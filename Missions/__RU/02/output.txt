// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 50923 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5840 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := 1 ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 57385 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 57385 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16932 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16932 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16932 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16932 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1670
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_EXP 43
1461: PPUSH
1462: LD_INT 25
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 72
1476: ST_TO_ADDR
// if not tmp then
1477: LD_VAR 0 1
1481: NOT
1482: IFFALSE 1486
// exit ;
1484: GO 1670
// wait ( 0 0$5 ) ;
1486: LD_INT 175
1488: PPUSH
1489: CALL_OW 67
// ComExit ( tmp ) ;
1493: LD_VAR 0 1
1497: PPUSH
1498: CALL 54631 0 1
// for i := 1 to 2 do
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: DOUBLE
1508: LD_INT 1
1510: DEC
1511: ST_TO_ADDR
1512: LD_INT 2
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1559
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1518: LD_VAR 0 1
1522: PPUSH
1523: LD_INT 71
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1533: LD_VAR 0 1
1537: PPUSH
1538: LD_INT 121
1540: PPUSH
1541: LD_INT 111
1543: PPUSH
1544: CALL_OW 171
// AddComUnload ( tmp ) ;
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 219
// end ;
1557: GO 1515
1559: POP
1560: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1561: LD_VAR 0 1
1565: PPUSH
1566: LD_INT 2
1568: PPUSH
1569: LD_INT 113
1571: PPUSH
1572: LD_INT 113
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1582: LD_INT 83
1584: PPUSH
1585: LD_INT 46
1587: PPUSH
1588: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1592: LD_INT 83
1594: PPUSH
1595: LD_INT 47
1597: PPUSH
1598: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1602: LD_INT 83
1604: PPUSH
1605: LD_INT 48
1607: PPUSH
1608: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1612: LD_VAR 0 1
1616: PPUSH
1617: LD_INT 26
1619: PPUSH
1620: LD_INT 116
1622: PPUSH
1623: LD_INT 98
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1633: LD_INT 35
1635: PPUSH
1636: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1640: LD_VAR 0 1
1644: PPUSH
1645: LD_INT 60
1647: PUSH
1648: EMPTY
1649: LIST
1650: PPUSH
1651: CALL_OW 72
1655: NOT
1656: IFFALSE 1633
// ComEnterUnit ( tmp , kirov ) ;
1658: LD_VAR 0 1
1662: PPUSH
1663: LD_INT 71
1665: PPUSH
1666: CALL_OW 120
// end ;
1670: PPOPN 2
1672: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1673: LD_INT 0
1675: PPUSH
1676: PPUSH
1677: PPUSH
1678: PPUSH
1679: PPUSH
1680: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1681: LD_ADDR_VAR 0 3
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 6
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 21
1698: PUSH
1699: LD_INT 2
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PPUSH
1710: CALL_OW 69
1714: ST_TO_ADDR
// if not belkovTank then
1715: LD_VAR 0 3
1719: NOT
1720: IFFALSE 1813
// begin uc_side := 6 ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_INT 6
1729: ST_TO_ADDR
// uc_nation := 3 ;
1730: LD_ADDR_OWVAR 21
1734: PUSH
1735: LD_INT 3
1737: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1738: LD_INT 21
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 1
1746: PPUSH
1747: LD_INT 42
1749: PPUSH
1750: LD_INT 100
1752: PPUSH
1753: CALL 21772 0 5
// belkovTank := CreateVehicle ;
1757: LD_ADDR_VAR 0 3
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 5
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1779: LD_VAR 0 3
1783: PPUSH
1784: LD_INT 127
1786: PPUSH
1787: LD_INT 118
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1797: LD_EXP 36
1801: PPUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 120
// end else
1811: GO 1827
// begin belkovTank := belkovTank [ 1 ] ;
1813: LD_ADDR_VAR 0 3
1817: PUSH
1818: LD_VAR 0 3
1822: PUSH
1823: LD_INT 1
1825: ARRAY
1826: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 71
1834: PPUSH
1835: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1839: LD_VAR 0 3
1843: PPUSH
1844: LD_INT 71
1846: PPUSH
1847: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 256
1860: PUSH
1861: LD_INT 1000
1863: LESS
1864: IFFALSE 1977
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1866: LD_ADDR_VAR 0 4
1870: PUSH
1871: LD_EXP 43
1875: PPUSH
1876: LD_INT 25
1878: PUSH
1879: LD_INT 3
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PPUSH
1886: CALL_OW 72
1890: ST_TO_ADDR
// if not mech then
1891: LD_VAR 0 4
1895: NOT
1896: IFFALSE 1912
// SetLives ( belkovTank , 1000 ) else
1898: LD_VAR 0 3
1902: PPUSH
1903: LD_INT 1000
1905: PPUSH
1906: CALL_OW 234
1910: GO 1977
// begin ComExit ( mech ) ;
1912: LD_VAR 0 4
1916: PPUSH
1917: CALL 54631 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1921: LD_VAR 0 4
1925: PPUSH
1926: LD_VAR 0 3
1930: PPUSH
1931: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1935: LD_VAR 0 4
1939: PPUSH
1940: LD_INT 22
1942: PUSH
1943: LD_INT 6
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: PUSH
1950: LD_INT 30
1952: PUSH
1953: LD_INT 2
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 69
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1977: LD_INT 70
1979: PPUSH
1980: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1984: LD_VAR 0 3
1988: PPUSH
1989: CALL_OW 256
1993: PUSH
1994: LD_INT 1000
1996: EQUAL
1997: IFFALSE 1977
// if mech then
1999: LD_VAR 0 4
2003: IFFALSE 2047
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 6
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 30
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2047: LD_EXP 36
2051: PPUSH
2052: LD_INT 107
2054: PPUSH
2055: LD_INT 104
2057: PPUSH
2058: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2062: LD_EXP 36
2066: PPUSH
2067: LD_INT 95
2069: PPUSH
2070: LD_INT 101
2072: PPUSH
2073: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2077: LD_EXP 36
2081: PPUSH
2082: LD_INT 89
2084: PPUSH
2085: LD_INT 100
2087: PPUSH
2088: CALL_OW 171
// wait ( 0 0$2 ) ;
2092: LD_INT 70
2094: PPUSH
2095: CALL_OW 67
// for i in belkovTeam do
2099: LD_ADDR_VAR 0 2
2103: PUSH
2104: LD_EXP 45
2108: PUSH
2109: FOR_IN
2110: IFFALSE 2138
// begin ComExit ( i ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: CALL 54631 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: LD_INT 89
2128: PPUSH
2129: LD_INT 100
2131: PPUSH
2132: CALL_OW 171
// end ;
2136: GO 2109
2138: POP
2139: POP
// tmp := Belkov union belkovTeam ;
2140: LD_ADDR_VAR 0 5
2144: PUSH
2145: LD_EXP 36
2149: PUSH
2150: LD_EXP 45
2154: UNION
2155: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2156: LD_INT 35
2158: PPUSH
2159: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2163: LD_VAR 0 5
2167: PPUSH
2168: LD_INT 60
2170: PUSH
2171: EMPTY
2172: LIST
2173: PPUSH
2174: CALL_OW 72
2178: NOT
2179: IFFALSE 2156
// ComMoveXY ( tmp , 71 , 65 ) ;
2181: LD_VAR 0 5
2185: PPUSH
2186: LD_INT 71
2188: PPUSH
2189: LD_INT 65
2191: PPUSH
2192: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2196: LD_VAR 0 5
2200: PPUSH
2201: LD_INT 61
2203: PPUSH
2204: LD_INT 37
2206: PPUSH
2207: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2211: LD_VAR 0 5
2215: PPUSH
2216: LD_INT 67
2218: PPUSH
2219: LD_INT 17
2221: PPUSH
2222: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2226: LD_VAR 0 5
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2238: LD_EXP 36
2242: PPUSH
2243: LD_INT 63
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2253: LD_EXP 36
2257: PPUSH
2258: LD_INT 105
2260: PPUSH
2261: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2265: LD_EXP 36
2269: PPUSH
2270: LD_INT 86
2272: PPUSH
2273: LD_INT 37
2275: PPUSH
2276: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2280: LD_EXP 36
2284: PPUSH
2285: LD_INT 105
2287: PPUSH
2288: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2292: LD_VAR 0 5
2296: PPUSH
2297: LD_INT 88
2299: PPUSH
2300: LD_INT 29
2302: PPUSH
2303: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2307: LD_INT 35
2309: PPUSH
2310: CALL_OW 67
// for i in tmp do
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 5
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2356
// if not HasTask ( i ) then
2327: LD_VAR 0 2
2331: PPUSH
2332: CALL_OW 314
2336: NOT
2337: IFFALSE 2354
// AddComMoveXY ( tmp , 88 , 29 ) ;
2339: LD_VAR 0 5
2343: PPUSH
2344: LD_INT 88
2346: PPUSH
2347: LD_INT 29
2349: PPUSH
2350: CALL_OW 171
2354: GO 2324
2356: POP
2357: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2358: LD_VAR 0 5
2362: PPUSH
2363: LD_INT 95
2365: PUSH
2366: LD_INT 6
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PPUSH
2373: CALL_OW 72
2377: IFFALSE 2471
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2379: LD_ADDR_VAR 0 2
2383: PUSH
2384: LD_VAR 0 5
2388: PPUSH
2389: LD_INT 95
2391: PUSH
2392: LD_INT 6
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PPUSH
2399: CALL_OW 72
2403: PUSH
2404: FOR_IN
2405: IFFALSE 2469
// begin if i = Belkov then
2407: LD_VAR 0 2
2411: PUSH
2412: LD_EXP 36
2416: EQUAL
2417: IFFALSE 2458
// begin belkovTank := IsInUnit ( Belkov ) ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_EXP 36
2428: PPUSH
2429: CALL_OW 310
2433: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2434: LD_ADDR_VAR 0 6
2438: PUSH
2439: LD_VAR 0 3
2443: PPUSH
2444: CALL_OW 261
2448: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2449: LD_VAR 0 3
2453: PPUSH
2454: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: CALL_OW 64
// end ;
2467: GO 2404
2469: POP
2470: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2471: LD_VAR 0 5
2475: PPUSH
2476: LD_INT 52
2478: PUSH
2479: EMPTY
2480: LIST
2481: PPUSH
2482: CALL_OW 72
2486: NOT
2487: IFFALSE 2307
// wait ( 1 1$20 ) ;
2489: LD_INT 2800
2491: PPUSH
2492: CALL_OW 67
// if fuel < 50 then
2496: LD_VAR 0 6
2500: PUSH
2501: LD_INT 50
2503: LESS
2504: IFFALSE 2514
// fuel := 50 ;
2506: LD_ADDR_VAR 0 6
2510: PUSH
2511: LD_INT 50
2513: ST_TO_ADDR
// uc_side := 6 ;
2514: LD_ADDR_OWVAR 20
2518: PUSH
2519: LD_INT 6
2521: ST_TO_ADDR
// uc_nation := 3 ;
2522: LD_ADDR_OWVAR 21
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2530: LD_INT 21
2532: PPUSH
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: LD_INT 42
2541: PPUSH
2542: LD_VAR 0 6
2546: PUSH
2547: LD_INT 5
2549: MINUS
2550: PPUSH
2551: CALL 21772 0 5
// belkovTank := CreateVehicle ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 45
2564: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2577: LD_VAR 0 3
2581: PPUSH
2582: LD_INT 60
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2595: LD_EXP 36
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2609: LD_EXP 36
2613: PPUSH
2614: LD_INT 72
2616: PPUSH
2617: LD_INT 26
2619: PPUSH
2620: CALL_OW 111
// wait ( 0 0$2 ) ;
2624: LD_INT 70
2626: PPUSH
2627: CALL_OW 67
// for i in belkovTeam do
2631: LD_ADDR_VAR 0 2
2635: PUSH
2636: LD_EXP 45
2640: PUSH
2641: FOR_IN
2642: IFFALSE 2686
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2644: LD_VAR 0 2
2648: PPUSH
2649: LD_INT 60
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 0
2657: PPUSH
2658: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_INT 65
2669: PPUSH
2670: LD_INT 18
2672: PPUSH
2673: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2677: LD_INT 28
2679: PPUSH
2680: CALL_OW 67
// end ;
2684: GO 2641
2686: POP
2687: POP
// repeat wait ( 0 0$1 ) ;
2688: LD_INT 35
2690: PPUSH
2691: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2695: LD_EXP 14
2699: PUSH
2700: LD_EXP 45
2704: PPUSH
2705: LD_INT 60
2707: PUSH
2708: EMPTY
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: NOT
2716: AND
2717: IFFALSE 2688
// americanTrap := true ;
2719: LD_ADDR_EXP 17
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// end ;
2727: LD_VAR 0 1
2731: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2732: LD_EXP 4
2736: PUSH
2737: LD_EXP 40
2741: PPUSH
2742: CALL_OW 302
2746: AND
2747: IFFALSE 3067
2749: GO 2751
2751: DISABLE
2752: LD_INT 0
2754: PPUSH
2755: PPUSH
2756: PPUSH
2757: PPUSH
// begin enable ;
2758: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2759: LD_EXP 8
2763: PUSH
2764: LD_INT 0
2766: GREATER
2767: PUSH
2768: LD_EXP 40
2772: PPUSH
2773: CALL_OW 314
2777: NOT
2778: AND
2779: IFFALSE 2948
// begin dir := rand ( 0 , 5 ) ;
2781: LD_ADDR_VAR 0 4
2785: PUSH
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 5
2791: PPUSH
2792: CALL_OW 12
2796: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2797: LD_ADDR_VAR 0 1
2801: PUSH
2802: LD_EXP 40
2806: PPUSH
2807: CALL_OW 250
2811: PPUSH
2812: LD_VAR 0 4
2816: PPUSH
2817: LD_INT 5
2819: PPUSH
2820: CALL_OW 272
2824: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2825: LD_ADDR_VAR 0 2
2829: PUSH
2830: LD_EXP 40
2834: PPUSH
2835: CALL_OW 251
2839: PPUSH
2840: LD_VAR 0 4
2844: PPUSH
2845: LD_INT 5
2847: PPUSH
2848: CALL_OW 273
2852: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2853: LD_VAR 0 1
2857: PPUSH
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 488
2867: PUSH
2868: LD_INT 106
2870: PPUSH
2871: LD_VAR 0 1
2875: PPUSH
2876: LD_VAR 0 2
2880: PPUSH
2881: CALL_OW 297
2885: PUSH
2886: LD_INT 26
2888: LESS
2889: AND
2890: IFFALSE 2913
// AddComMoveXY ( Platonov , x , y ) else
2892: LD_EXP 40
2896: PPUSH
2897: LD_VAR 0 1
2901: PPUSH
2902: LD_VAR 0 2
2906: PPUSH
2907: CALL_OW 171
2911: GO 2928
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2913: LD_EXP 40
2917: PPUSH
2918: LD_INT 64
2920: PPUSH
2921: LD_INT 96
2923: PPUSH
2924: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2928: LD_EXP 40
2932: PPUSH
2933: LD_INT 105
2935: PPUSH
2936: LD_INT 315
2938: PPUSH
2939: CALL_OW 12
2943: PPUSH
2944: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2948: LD_EXP 8
2952: PUSH
2953: LD_INT 0
2955: LESSEQUAL
2956: IFFALSE 3002
// begin if not IsAt ( Platonov , 64 , 96 ) then
2958: LD_EXP 40
2962: PPUSH
2963: LD_INT 64
2965: PPUSH
2966: LD_INT 96
2968: PPUSH
2969: CALL_OW 307
2973: NOT
2974: IFFALSE 3000
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2976: LD_EXP 40
2980: PPUSH
2981: LD_INT 64
2983: PPUSH
2984: LD_INT 96
2986: PPUSH
2987: CALL_OW 111
// AddComHold ( Platonov ) ;
2991: LD_EXP 40
2995: PPUSH
2996: CALL_OW 200
// end ; end else
3000: GO 3067
// if tick mod 0 0$75 = 0 0$00 then
3002: LD_OWVAR 1
3006: PUSH
3007: LD_INT 2625
3009: MOD
3010: PUSH
3011: LD_INT 0
3013: EQUAL
3014: IFFALSE 3067
// begin amount := rand ( 2 , 5 ) ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: LD_INT 2
3023: PPUSH
3024: LD_INT 5
3026: PPUSH
3027: CALL_OW 12
3031: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_EXP 8
3041: PUSH
3042: LD_VAR 0 3
3046: PUSH
3047: LD_INT 10
3049: MUL
3050: MINUS
3051: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 55
// end ; end ;
3067: PPOPN 4
3069: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3070: LD_INT 106
3072: PPUSH
3073: CALL_OW 274
3077: PPUSH
3078: LD_INT 2
3080: PPUSH
3081: CALL_OW 275
3085: PUSH
3086: LD_INT 30
3088: LESS
3089: IFFALSE 3299
3091: GO 3093
3093: DISABLE
3094: LD_INT 0
3096: PPUSH
3097: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3098: LD_ADDR_VAR 0 2
3102: PUSH
3103: LD_EXP 43
3107: PPUSH
3108: LD_INT 3
3110: PUSH
3111: LD_INT 60
3113: PUSH
3114: EMPTY
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 2
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 72
3139: ST_TO_ADDR
// if not eng then
3140: LD_VAR 0 2
3144: NOT
3145: IFFALSE 3149
// exit ;
3147: GO 3299
// ComExit ( eng ) ;
3149: LD_VAR 0 2
3153: PPUSH
3154: CALL 54631 0 1
// i := 5 ;
3158: LD_ADDR_VAR 0 1
3162: PUSH
3163: LD_INT 5
3165: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3166: LD_INT 35
3168: PPUSH
3169: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: NOT
3189: PUSH
3190: LD_VAR 0 2
3194: AND
3195: IFFALSE 3265
// begin ComTransport ( eng , kirov , mat_oil ) ;
3197: LD_VAR 0 2
3201: PPUSH
3202: LD_INT 71
3204: PPUSH
3205: LD_INT 2
3207: PPUSH
3208: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3212: LD_VAR 0 2
3216: PPUSH
3217: LD_INT 67
3219: PPUSH
3220: LD_INT 99
3222: PPUSH
3223: CALL_OW 171
// AddComUnload ( eng ) ;
3227: LD_VAR 0 2
3231: PPUSH
3232: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 107
3243: PPUSH
3244: LD_INT 104
3246: PPUSH
3247: CALL_OW 171
// i := i - 1 ;
3251: LD_ADDR_VAR 0 1
3255: PUSH
3256: LD_VAR 0 1
3260: PUSH
3261: LD_INT 1
3263: MINUS
3264: ST_TO_ADDR
// end ; until i = 0 ;
3265: LD_VAR 0 1
3269: PUSH
3270: LD_INT 0
3272: EQUAL
3273: IFFALSE 3166
// AddComMoveUnit ( eng , kirov ) ;
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 71
3282: PPUSH
3283: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3287: LD_VAR 0 2
3291: PPUSH
3292: LD_INT 71
3294: PPUSH
3295: CALL_OW 180
// end ;
3299: PPOPN 2
3301: END
// export function SendReinforcements ; var i ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
// reinforcementsGained := true ;
3306: LD_ADDR_EXP 25
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// for i := 1 to 2 do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: DOUBLE
3320: LD_INT 1
3322: DEC
3323: ST_TO_ADDR
3324: LD_INT 2
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3410
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3330: LD_EXP 44
3334: PUSH
3335: LD_VAR 0 2
3339: ARRAY
3340: PPUSH
3341: CALL 54631 0 1
3345: IFFALSE 3354
// wait ( 0 0$0.3 ) ;
3347: LD_INT 10
3349: PPUSH
3350: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3354: LD_EXP 44
3358: PUSH
3359: LD_VAR 0 2
3363: ARRAY
3364: PPUSH
3365: LD_INT 75
3367: PPUSH
3368: LD_INT 84
3370: PPUSH
3371: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3375: LD_EXP 44
3379: PUSH
3380: LD_VAR 0 2
3384: ARRAY
3385: PPUSH
3386: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3390: LD_EXP 44
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 3
3403: PPUSH
3404: CALL_OW 235
// end ;
3408: GO 3327
3410: POP
3411: POP
// end ;
3412: LD_VAR 0 1
3416: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3417: LD_EXP 21
3421: PUSH
3422: LD_EXP 18
3426: AND
3427: PUSH
3428: LD_EXP 43
3432: PPUSH
3433: LD_INT 25
3435: PUSH
3436: LD_INT 3
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 72
3447: AND
3448: IFFALSE 3605
3450: GO 3452
3452: DISABLE
3453: LD_INT 0
3455: PPUSH
3456: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3457: LD_ADDR_VAR 0 1
3461: PUSH
3462: LD_EXP 43
3466: PPUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 72
3481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 22
3489: PUSH
3490: LD_INT 6
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 30
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: ST_TO_ADDR
// if not fac then
3516: LD_VAR 0 2
3520: NOT
3521: IFFALSE 3525
// exit ;
3523: GO 3605
// fac := fac [ 1 ] ;
3525: LD_ADDR_VAR 0 2
3529: PUSH
3530: LD_VAR 0 2
3534: PUSH
3535: LD_INT 1
3537: ARRAY
3538: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3539: LD_VAR 0 2
3543: PPUSH
3544: CALL_OW 313
3548: PUSH
3549: LD_INT 0
3551: EQUAL
3552: IFFALSE 3584
// begin ComExit ( mech ) ;
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL 54631 0 1
// wait ( 3 ) ;
3563: LD_INT 3
3565: PPUSH
3566: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_VAR 0 2
3579: PPUSH
3580: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3584: LD_VAR 0 2
3588: PPUSH
3589: LD_INT 21
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 1
3597: PPUSH
3598: LD_INT 42
3600: PPUSH
3601: CALL_OW 125
// end ;
3605: PPOPN 2
3607: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3608: LD_INT 0
3610: PPUSH
3611: PPUSH
3612: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: LD_INT 90
3620: PPUSH
3621: LD_INT 100
3623: PPUSH
3624: CALL_OW 111
// wait ( 0 0$10 ) ;
3628: LD_INT 350
3630: PPUSH
3631: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3635: LD_VAR 0 1
3639: PPUSH
3640: LD_INT 0
3642: PPUSH
3643: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3654: LD_ADDR_VAR 0 4
3658: PUSH
3659: LD_VAR 0 1
3663: PPUSH
3664: CALL_OW 110
3668: ST_TO_ADDR
// if tag = 0 then
3669: LD_VAR 0 4
3673: PUSH
3674: LD_INT 0
3676: EQUAL
3677: IFFALSE 3748
// begin if not HasTask ( vehicle ) then
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL_OW 314
3688: NOT
3689: IFFALSE 3706
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3691: LD_VAR 0 1
3695: PPUSH
3696: LD_INT 83
3698: PPUSH
3699: LD_INT 68
3701: PPUSH
3702: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3706: LD_VAR 0 1
3710: PPUSH
3711: CALL_OW 256
3715: PUSH
3716: LD_INT 750
3718: LESS
3719: IFFALSE 3748
// begin SetTag ( vehicle , 1 ) ;
3721: LD_VAR 0 1
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 93
3740: PPUSH
3741: LD_INT 102
3743: PPUSH
3744: CALL_OW 111
// end ; end ; if tag = 1 then
3748: LD_VAR 0 4
3752: PUSH
3753: LD_INT 1
3755: EQUAL
3756: IFFALSE 3846
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3758: LD_VAR 0 1
3762: PPUSH
3763: LD_INT 113
3765: PPUSH
3766: LD_INT 106
3768: PPUSH
3769: CALL_OW 307
3773: NOT
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: CALL_OW 314
3784: NOT
3785: AND
3786: IFFALSE 3803
// ComMoveXY ( vehicle , 113 , 106 ) ;
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_INT 113
3795: PPUSH
3796: LD_INT 106
3798: PPUSH
3799: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3803: LD_VAR 0 1
3807: PPUSH
3808: LD_INT 113
3810: PPUSH
3811: LD_INT 106
3813: PPUSH
3814: CALL_OW 307
3818: IFFALSE 3846
// begin SetTag ( vehicle , 2 ) ;
3820: LD_VAR 0 1
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3832: LD_VAR 0 1
3836: PPUSH
3837: CALL_OW 311
3841: PPUSH
3842: CALL 55933 0 1
// end ; end ; if tag = 2 then
3846: LD_VAR 0 4
3850: PUSH
3851: LD_INT 2
3853: EQUAL
3854: IFFALSE 3918
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3856: LD_VAR 0 1
3860: PPUSH
3861: CALL_OW 256
3865: PUSH
3866: LD_INT 1000
3868: EQUAL
3869: PUSH
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 311
3879: AND
3880: IFFALSE 3918
// begin ComMoveUnit ( vehicle , kirov ) ;
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 71
3889: PPUSH
3890: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_INT 71
3901: PPUSH
3902: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3906: LD_VAR 0 1
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 301
3927: PUSH
3928: LD_EXP 23
3932: OR
3933: IFFALSE 3647
// if eastOutpostDestroyed then
3935: LD_EXP 23
3939: IFFALSE 3956
// ComMoveXY ( vehicle , 111 , 105 ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 111
3948: PPUSH
3949: LD_INT 105
3951: PPUSH
3952: CALL_OW 111
// end ; end_of_file
3956: LD_VAR 0 2
3960: RET
// export usWestForces , usEastForces , usTrapForces ; export function PrepareAmerican ; var i , un , tmp ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
// uc_side := 1 ;
3967: LD_ADDR_OWVAR 20
3971: PUSH
3972: LD_INT 1
3974: ST_TO_ADDR
// uc_nation := 1 ;
3975: LD_ADDR_OWVAR 21
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// usWestForces := [ ] ;
3983: LD_ADDR_EXP 46
3987: PUSH
3988: EMPTY
3989: ST_TO_ADDR
// usEastForces := [ ] ;
3990: LD_ADDR_EXP 47
3994: PUSH
3995: EMPTY
3996: ST_TO_ADDR
// bc_type := b_depot ;
3997: LD_ADDR_OWVAR 42
4001: PUSH
4002: LD_INT 0
4004: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4005: LD_ADDR_OWVAR 43
4009: PUSH
4010: LD_OWVAR 67
4014: PUSH
4015: LD_INT 1
4017: MINUS
4018: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4019: LD_INT 48
4021: PPUSH
4022: LD_INT 54
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4032: LD_ADDR_VAR 0 4
4036: PUSH
4037: LD_INT 55
4039: PUSH
4040: LD_INT 55
4042: PUSH
4043: LD_INT 4
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 59
4053: PUSH
4054: LD_INT 61
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: ST_TO_ADDR
// if Difficulty > 1 then
4069: LD_OWVAR 67
4073: PUSH
4074: LD_INT 1
4076: GREATER
4077: IFFALSE 4113
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4079: LD_ADDR_VAR 0 4
4083: PUSH
4084: LD_VAR 0 4
4088: PPUSH
4089: LD_VAR 0 4
4093: PPUSH
4094: LD_INT 46
4096: PUSH
4097: LD_INT 64
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 2
4112: ST_TO_ADDR
// if Difficulty > 2 then
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 2
4120: GREATER
4121: IFFALSE 4157
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4123: LD_ADDR_VAR 0 4
4127: PUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_VAR 0 4
4137: PPUSH
4138: LD_INT 36
4140: PUSH
4141: LD_INT 48
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 2
4156: ST_TO_ADDR
// bc_type := b_breastwork ;
4157: LD_ADDR_OWVAR 42
4161: PUSH
4162: LD_INT 31
4164: ST_TO_ADDR
// InitHC_All ( ) ;
4165: CALL_OW 584
// for i in tmp do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_VAR 0 4
4178: PUSH
4179: FOR_IN
4180: IFFALSE 4324
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4182: LD_VAR 0 2
4186: PUSH
4187: LD_INT 1
4189: ARRAY
4190: PPUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 2
4198: ARRAY
4199: PPUSH
4200: LD_VAR 0 2
4204: PUSH
4205: LD_INT 3
4207: ARRAY
4208: PPUSH
4209: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_OWVAR 67
4220: PPUSH
4221: CALL_OW 381
// un := CreateHuman ;
4225: LD_ADDR_VAR 0 3
4229: PUSH
4230: CALL_OW 44
4234: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4235: LD_ADDR_EXP 46
4239: PUSH
4240: LD_EXP 46
4244: PPUSH
4245: LD_EXP 46
4249: PUSH
4250: LD_INT 1
4252: PLUS
4253: PPUSH
4254: LD_VAR 0 3
4258: PPUSH
4259: CALL_OW 1
4263: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_VAR 0 2
4273: PUSH
4274: LD_INT 3
4276: ARRAY
4277: PUSH
4278: LD_INT 3
4280: PLUS
4281: PUSH
4282: LD_INT 6
4284: MOD
4285: PPUSH
4286: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4290: LD_VAR 0 3
4294: PPUSH
4295: LD_VAR 0 2
4299: PUSH
4300: LD_INT 1
4302: ARRAY
4303: PPUSH
4304: LD_VAR 0 2
4308: PUSH
4309: LD_INT 2
4311: ARRAY
4312: PPUSH
4313: CALL_OW 428
4317: PPUSH
4318: CALL_OW 52
// end ;
4322: GO 4179
4324: POP
4325: POP
// for i := 1 to 2 do
4326: LD_ADDR_VAR 0 2
4330: PUSH
4331: DOUBLE
4332: LD_INT 1
4334: DEC
4335: ST_TO_ADDR
4336: LD_INT 2
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4416
// begin PrepareEngineer ( false , Difficulty ) ;
4342: LD_INT 0
4344: PPUSH
4345: LD_OWVAR 67
4349: PPUSH
4350: CALL_OW 382
// un := CreateHuman ;
4354: LD_ADDR_VAR 0 3
4358: PUSH
4359: CALL_OW 44
4363: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4364: LD_ADDR_EXP 46
4368: PUSH
4369: LD_EXP 46
4373: PPUSH
4374: LD_EXP 46
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: PPUSH
4383: LD_VAR 0 3
4387: PPUSH
4388: CALL_OW 1
4392: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4393: LD_VAR 0 3
4397: PPUSH
4398: LD_INT 54
4400: PPUSH
4401: LD_INT 58
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 50
// end ;
4414: GO 4339
4416: POP
4417: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4418: LD_ADDR_VAR 0 4
4422: PUSH
4423: LD_INT 87
4425: PUSH
4426: LD_INT 62
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 89
4439: PUSH
4440: LD_INT 67
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// if Difficulty > 2 then
4455: LD_OWVAR 67
4459: PUSH
4460: LD_INT 2
4462: GREATER
4463: IFFALSE 4499
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4465: LD_ADDR_VAR 0 4
4469: PUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_INT 88
4482: PUSH
4483: LD_INT 53
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 2
4498: ST_TO_ADDR
// bc_type := b_breastwork ;
4499: LD_ADDR_OWVAR 42
4503: PUSH
4504: LD_INT 31
4506: ST_TO_ADDR
// for i in tmp do
4507: LD_ADDR_VAR 0 2
4511: PUSH
4512: LD_VAR 0 4
4516: PUSH
4517: FOR_IN
4518: IFFALSE 4662
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4520: LD_VAR 0 2
4524: PUSH
4525: LD_INT 1
4527: ARRAY
4528: PPUSH
4529: LD_VAR 0 2
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: PPUSH
4538: LD_VAR 0 2
4542: PUSH
4543: LD_INT 3
4545: ARRAY
4546: PPUSH
4547: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_OWVAR 67
4558: PPUSH
4559: CALL_OW 381
// un := CreateHuman ;
4563: LD_ADDR_VAR 0 3
4567: PUSH
4568: CALL_OW 44
4572: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4573: LD_ADDR_EXP 47
4577: PUSH
4578: LD_EXP 47
4582: PPUSH
4583: LD_EXP 47
4587: PUSH
4588: LD_INT 1
4590: PLUS
4591: PPUSH
4592: LD_VAR 0 3
4596: PPUSH
4597: CALL_OW 1
4601: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4602: LD_VAR 0 3
4606: PPUSH
4607: LD_VAR 0 2
4611: PUSH
4612: LD_INT 3
4614: ARRAY
4615: PUSH
4616: LD_INT 3
4618: PLUS
4619: PUSH
4620: LD_INT 6
4622: MOD
4623: PPUSH
4624: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4628: LD_VAR 0 3
4632: PPUSH
4633: LD_VAR 0 2
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: PPUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_INT 2
4649: ARRAY
4650: PPUSH
4651: CALL_OW 428
4655: PPUSH
4656: CALL_OW 52
// end ;
4660: GO 4517
4662: POP
4663: POP
// for i := 1 to 2 do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_INT 2
4676: PUSH
4677: FOR_TO
4678: IFFALSE 4754
// begin PrepareEngineer ( false , Difficulty ) ;
4680: LD_INT 0
4682: PPUSH
4683: LD_OWVAR 67
4687: PPUSH
4688: CALL_OW 382
// un := CreateHuman ;
4692: LD_ADDR_VAR 0 3
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4702: LD_ADDR_EXP 47
4706: PUSH
4707: LD_EXP 47
4711: PPUSH
4712: LD_EXP 47
4716: PUSH
4717: LD_INT 1
4719: PLUS
4720: PPUSH
4721: LD_VAR 0 3
4725: PPUSH
4726: CALL_OW 1
4730: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 95
4738: PPUSH
4739: LD_INT 65
4741: PPUSH
4742: LD_INT 2
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 50
// end ;
4752: GO 4677
4754: POP
4755: POP
// end ;
4756: LD_VAR 0 1
4760: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4761: LD_INT 0
4763: PPUSH
4764: PPUSH
4765: PPUSH
// usTrapForces := [ ] ;
4766: LD_ADDR_EXP 48
4770: PUSH
4771: EMPTY
4772: ST_TO_ADDR
// uc_side := 1 ;
4773: LD_ADDR_OWVAR 20
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// uc_nation := 1 ;
4781: LD_ADDR_OWVAR 21
4785: PUSH
4786: LD_INT 1
4788: ST_TO_ADDR
// InitHC_All ( ) ;
4789: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4793: LD_INT 1
4795: PPUSH
4796: LD_OWVAR 67
4800: PPUSH
4801: CALL_OW 381
// un := CreateHuman ;
4805: LD_ADDR_VAR 0 3
4809: PUSH
4810: CALL_OW 44
4814: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4815: LD_ADDR_EXP 48
4819: PUSH
4820: LD_EXP 48
4824: PPUSH
4825: LD_VAR 0 3
4829: PPUSH
4830: CALL 54233 0 2
4834: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4835: LD_ADDR_VAR 0 2
4839: PUSH
4840: DOUBLE
4841: LD_INT 1
4843: DEC
4844: ST_TO_ADDR
4845: LD_INT 5
4847: PUSH
4848: LD_INT 6
4850: PUSH
4851: LD_INT 7
4853: PUSH
4854: LD_INT 8
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_OWVAR 67
4867: ARRAY
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4916
// begin PrepareSoldier ( false , Difficulty ) ;
4872: LD_INT 0
4874: PPUSH
4875: LD_OWVAR 67
4879: PPUSH
4880: CALL_OW 381
// un := CreateHuman ;
4884: LD_ADDR_VAR 0 3
4888: PUSH
4889: CALL_OW 44
4893: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4894: LD_ADDR_EXP 48
4898: PUSH
4899: LD_EXP 48
4903: PPUSH
4904: LD_VAR 0 3
4908: PPUSH
4909: CALL 54233 0 2
4913: ST_TO_ADDR
// end ;
4914: GO 4869
4916: POP
4917: POP
// for i := 1 to 2 do
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: DOUBLE
4924: LD_INT 1
4926: DEC
4927: ST_TO_ADDR
4928: LD_INT 2
4930: PUSH
4931: FOR_TO
4932: IFFALSE 4978
// begin PrepareScientist ( false , Difficulty ) ;
4934: LD_INT 0
4936: PPUSH
4937: LD_OWVAR 67
4941: PPUSH
4942: CALL_OW 384
// un := CreateHuman ;
4946: LD_ADDR_VAR 0 3
4950: PUSH
4951: CALL_OW 44
4955: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4956: LD_ADDR_EXP 48
4960: PUSH
4961: LD_EXP 48
4965: PPUSH
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL 54233 0 2
4975: ST_TO_ADDR
// end ;
4976: GO 4931
4978: POP
4979: POP
// end ;
4980: LD_VAR 0 1
4984: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4985: LD_EXP 46
4989: IFFALSE 5559
4991: GO 4993
4993: DISABLE
4994: LD_INT 0
4996: PPUSH
4997: PPUSH
4998: PPUSH
4999: PPUSH
5000: PPUSH
// begin enable ;
5001: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5002: LD_ADDR_VAR 0 3
5006: PUSH
5007: LD_INT 8
5009: PPUSH
5010: LD_INT 22
5012: PUSH
5013: LD_INT 1
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 21
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PPUSH
5034: CALL_OW 70
5038: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5039: LD_ADDR_VAR 0 4
5043: PUSH
5044: LD_EXP 46
5048: PPUSH
5049: LD_INT 25
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 72
5063: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5064: LD_ADDR_VAR 0 5
5068: PUSH
5069: LD_EXP 46
5073: PPUSH
5074: LD_INT 25
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: CALL_OW 72
5088: ST_TO_ADDR
// if eng then
5089: LD_VAR 0 4
5093: IFFALSE 5287
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5095: LD_VAR 0 3
5099: PPUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 24
5105: PUSH
5106: LD_INT 1000
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 72
5121: IFFALSE 5233
// begin for i in eng do
5123: LD_ADDR_VAR 0 1
5127: PUSH
5128: LD_VAR 0 4
5132: PUSH
5133: FOR_IN
5134: IFFALSE 5229
// if IsInUnit ( i ) then
5136: LD_VAR 0 1
5140: PPUSH
5141: CALL_OW 310
5145: IFFALSE 5158
// ComExit ( i ) else
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL 54631 0 1
5156: GO 5227
// if IsOk ( i ) and not HasTask ( i ) then
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 302
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 314
5177: NOT
5178: AND
5179: IFFALSE 5227
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5181: LD_VAR 0 1
5185: PPUSH
5186: LD_VAR 0 3
5190: PPUSH
5191: LD_INT 3
5193: PUSH
5194: LD_INT 24
5196: PUSH
5197: LD_INT 1000
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 72
5212: PPUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: CALL_OW 74
5222: PPUSH
5223: CALL_OW 130
5227: GO 5133
5229: POP
5230: POP
// end else
5231: GO 5287
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_INT 30
5240: PUSH
5241: LD_INT 0
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 72
5252: IFFALSE 5287
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5254: LD_VAR 0 4
5258: PPUSH
5259: LD_VAR 0 3
5263: PPUSH
5264: LD_INT 30
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL_OW 72
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5287: LD_VAR 0 5
5291: PPUSH
5292: LD_INT 50
5294: PUSH
5295: EMPTY
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: PUSH
5303: LD_INT 18
5305: PPUSH
5306: LD_INT 81
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: CALL_OW 70
5320: PUSH
5321: LD_INT 1
5323: GREATER
5324: AND
5325: PUSH
5326: LD_INT 18
5328: PPUSH
5329: LD_INT 22
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 70
5343: NOT
5344: AND
5345: IFFALSE 5399
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5347: LD_ADDR_VAR 0 1
5351: PUSH
5352: LD_VAR 0 5
5356: PPUSH
5357: LD_INT 50
5359: PUSH
5360: EMPTY
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: PUSH
5368: FOR_IN
5369: IFFALSE 5397
// begin ComExit ( i ) ;
5371: LD_VAR 0 1
5375: PPUSH
5376: CALL 54631 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 46
5387: PPUSH
5388: LD_INT 62
5390: PPUSH
5391: CALL_OW 174
// end ;
5395: GO 5368
5397: POP
5398: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5399: LD_INT 18
5401: PPUSH
5402: LD_INT 81
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 70
5416: NOT
5417: PUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 54
5428: PUSH
5429: EMPTY
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 50
5438: PUSH
5439: EMPTY
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 72
5450: AND
5451: PUSH
5452: LD_VAR 0 3
5456: PPUSH
5457: LD_INT 30
5459: PUSH
5460: LD_INT 31
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 58
5469: PUSH
5470: EMPTY
5471: LIST
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL_OW 72
5481: AND
5482: IFFALSE 5559
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5484: LD_VAR 0 5
5488: PPUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 50
5504: PUSH
5505: EMPTY
5506: LIST
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PPUSH
5512: CALL_OW 72
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 31
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 58
5538: PUSH
5539: EMPTY
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PPUSH
5546: CALL_OW 72
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: CALL_OW 120
// end ;
5559: PPOPN 5
5561: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5562: LD_EXP 47
5566: IFFALSE 5837
5568: GO 5570
5570: DISABLE
5571: LD_INT 0
5573: PPUSH
5574: PPUSH
5575: PPUSH
// begin enable ;
5576: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: LD_INT 15
5584: PPUSH
5585: LD_INT 22
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 21
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PPUSH
5609: CALL_OW 70
5613: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5614: LD_ADDR_VAR 0 3
5618: PUSH
5619: LD_EXP 47
5623: PPUSH
5624: LD_INT 25
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PPUSH
5634: CALL_OW 72
5638: ST_TO_ADDR
// if eng then
5639: LD_VAR 0 3
5643: IFFALSE 5837
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 3
5652: PUSH
5653: LD_INT 24
5655: PUSH
5656: LD_INT 1000
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PPUSH
5667: CALL_OW 72
5671: IFFALSE 5783
// begin for i in eng do
5673: LD_ADDR_VAR 0 1
5677: PUSH
5678: LD_VAR 0 3
5682: PUSH
5683: FOR_IN
5684: IFFALSE 5779
// if IsInUnit ( i ) then
5686: LD_VAR 0 1
5690: PPUSH
5691: CALL_OW 310
5695: IFFALSE 5708
// ComExit ( i ) else
5697: LD_VAR 0 1
5701: PPUSH
5702: CALL 54631 0 1
5706: GO 5777
// if IsOk ( i ) and not HasTask ( i ) then
5708: LD_VAR 0 1
5712: PPUSH
5713: CALL_OW 302
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 314
5727: NOT
5728: AND
5729: IFFALSE 5777
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 24
5746: PUSH
5747: LD_INT 1000
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PPUSH
5758: CALL_OW 72
5762: PPUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: CALL_OW 74
5772: PPUSH
5773: CALL_OW 130
5777: GO 5683
5779: POP
5780: POP
// end else
5781: GO 5837
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_INT 30
5790: PUSH
5791: LD_INT 0
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 72
5802: IFFALSE 5837
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5804: LD_VAR 0 3
5808: PPUSH
5809: LD_VAR 0 2
5813: PPUSH
5814: LD_INT 30
5816: PUSH
5817: LD_INT 0
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 72
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 120
// end ; end_of_file
5837: PPOPN 3
5839: END
// export function Action ; var i , tmp ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
// InGameOn ;
5845: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5849: LD_INT 112
5851: PPUSH
5852: LD_INT 107
5854: PPUSH
5855: LD_INT 3
5857: PPUSH
5858: LD_INT 12
5860: NEG
5861: PPUSH
5862: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5866: LD_INT 121
5868: PPUSH
5869: LD_INT 113
5871: PPUSH
5872: CALL_OW 86
// tmp := PrepareBurlak ;
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: CALL 1244 0 0
5885: ST_TO_ADDR
// for i in tmp do
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_VAR 0 3
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5950
// begin SetDir ( i , 5 ) ;
5899: LD_VAR 0 2
5903: PPUSH
5904: LD_INT 5
5906: PPUSH
5907: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5911: LD_VAR 0 2
5915: PPUSH
5916: LD_INT 3
5918: PPUSH
5919: LD_INT 0
5921: PPUSH
5922: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5926: LD_VAR 0 2
5930: PPUSH
5931: LD_INT 121
5933: PPUSH
5934: LD_INT 111
5936: PPUSH
5937: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5941: LD_INT 28
5943: PPUSH
5944: CALL_OW 67
// end ;
5948: GO 5896
5950: POP
5951: POP
// CenterOnUnits ( Kurin ) ;
5952: LD_EXP 38
5956: PPUSH
5957: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5961: LD_EXP 34
5965: PPUSH
5966: LD_EXP 38
5970: PPUSH
5971: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5975: LD_INT 35
5977: PPUSH
5978: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5982: LD_EXP 34
5986: PPUSH
5987: LD_EXP 38
5991: PPUSH
5992: CALL_OW 296
5996: PUSH
5997: LD_INT 6
5999: LESS
6000: IFFALSE 5975
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6002: LD_EXP 34
6006: PUSH
6007: LD_EXP 35
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PPUSH
6016: LD_EXP 38
6020: PPUSH
6021: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_VAR 0 3
6034: PUSH
6035: LD_EXP 34
6039: PUSH
6040: LD_EXP 35
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: DIFF
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6117
// if GetClass ( i ) = class_soldier then
6053: LD_VAR 0 2
6057: PPUSH
6058: CALL_OW 257
6062: PUSH
6063: LD_INT 1
6065: EQUAL
6066: IFFALSE 6103
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 95
6075: PUSH
6076: LD_INT 209
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: LD_INT 2
6090: MOD
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: ARRAY
6096: PPUSH
6097: CALL_OW 120
6101: GO 6115
// ComEnterUnit ( i , ru_lab ) ;
6103: LD_VAR 0 2
6107: PPUSH
6108: LD_INT 83
6110: PPUSH
6111: CALL_OW 120
6115: GO 6050
6117: POP
6118: POP
// Say ( Kurin , D1-Kur-1 ) ;
6119: LD_EXP 38
6123: PPUSH
6124: LD_STRING D1-Kur-1
6126: PPUSH
6127: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6131: LD_EXP 34
6135: PPUSH
6136: LD_STRING D1-Bur-1
6138: PPUSH
6139: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6143: LD_INT 10
6145: PPUSH
6146: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6150: LD_EXP 38
6154: PPUSH
6155: LD_STRING D1-Kur-2
6157: PPUSH
6158: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6162: LD_EXP 39
6166: PPUSH
6167: CALL 54631 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6171: LD_EXP 39
6175: PPUSH
6176: LD_INT 115
6178: PPUSH
6179: LD_INT 108
6181: PPUSH
6182: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6186: LD_EXP 39
6190: PPUSH
6191: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6195: LD_EXP 34
6199: PPUSH
6200: LD_STRING D1-Bur-2
6202: PPUSH
6203: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6207: LD_EXP 38
6211: PPUSH
6212: LD_STRING D1-Kur-3
6214: PPUSH
6215: CALL_OW 88
// if Gnyevko then
6219: LD_EXP 35
6223: IFFALSE 6237
// Say ( Kurin , D1-Kur-3a ) ;
6225: LD_EXP 38
6229: PPUSH
6230: LD_STRING D1-Kur-3a
6232: PPUSH
6233: CALL_OW 88
// InGameOff ;
6237: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6241: LD_STRING M1
6243: PPUSH
6244: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6248: LD_INT 112
6250: PPUSH
6251: LD_INT 107
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6261: LD_INT 66
6263: PPUSH
6264: LD_INT 99
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 7
6272: NEG
6273: PPUSH
6274: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6278: LD_INT 66
6280: PPUSH
6281: LD_INT 99
6283: PPUSH
6284: LD_INT 3
6286: PPUSH
6287: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6291: LD_EXP 39
6295: PPUSH
6296: LD_INT 3
6298: PPUSH
6299: CALL_OW 235
// if Gnyevko then
6303: LD_EXP 35
6307: IFFALSE 6321
// SetSide ( Gnyevko , 3 ) ;
6309: LD_EXP 35
6313: PPUSH
6314: LD_INT 3
6316: PPUSH
6317: CALL_OW 235
// SaveForQuickRestart ;
6321: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6325: LD_EXP 38
6329: PPUSH
6330: LD_INT 71
6332: PPUSH
6333: CALL_OW 120
// wait ( 0 0$2 ) ;
6337: LD_INT 70
6339: PPUSH
6340: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6344: LD_EXP 43
6348: PUSH
6349: LD_INT 2
6351: ARRAY
6352: PPUSH
6353: CALL 54631 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6357: LD_EXP 43
6361: PUSH
6362: LD_INT 2
6364: ARRAY
6365: PPUSH
6366: LD_INT 98
6368: PPUSH
6369: LD_INT 98
6371: PPUSH
6372: CALL_OW 428
6376: PPUSH
6377: CALL_OW 180
// wait ( 0 0$12 ) ;
6381: LD_INT 420
6383: PPUSH
6384: CALL_OW 67
// kurinDontWannaTalk := true ;
6388: LD_ADDR_EXP 5
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// end ;
6396: LD_VAR 0 1
6400: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6401: LD_EXP 5
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 91
6418: PUSH
6419: LD_INT 71
6421: PUSH
6422: LD_INT 8
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PPUSH
6434: CALL_OW 69
6438: AND
6439: IFFALSE 6626
6441: GO 6443
6443: DISABLE
6444: LD_INT 0
6446: PPUSH
6447: PPUSH
// begin enable ;
6448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_INT 22
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 91
6466: PUSH
6467: LD_INT 71
6469: PUSH
6470: LD_INT 14
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 69
6486: ST_TO_ADDR
// InGameOn ;
6487: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6491: LD_INT 116
6493: PPUSH
6494: LD_INT 107
6496: PPUSH
6497: LD_INT 3
6499: PPUSH
6500: LD_INT 3
6502: PPUSH
6503: CALL_OW 330
// ComExit ( Kurin ) ;
6507: LD_EXP 38
6511: PPUSH
6512: CALL 54631 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6516: LD_EXP 38
6520: PPUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 1
6528: ARRAY
6529: PPUSH
6530: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6534: LD_EXP 38
6538: PPUSH
6539: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6543: LD_VAR 0 2
6547: PPUSH
6548: LD_INT 87
6550: PPUSH
6551: LD_INT 99
6553: PPUSH
6554: CALL_OW 111
// if kirovHasTank then
6558: LD_EXP 6
6562: IFFALSE 6578
// Say ( Kurin , D1a-Kur-1a ) else
6564: LD_EXP 38
6568: PPUSH
6569: LD_STRING D1a-Kur-1a
6571: PPUSH
6572: CALL_OW 88
6576: GO 6590
// Say ( Kurin , D1a-Kur-1 ) ;
6578: LD_EXP 38
6582: PPUSH
6583: LD_STRING D1a-Kur-1
6585: PPUSH
6586: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6590: LD_EXP 38
6594: PPUSH
6595: LD_INT 71
6597: PPUSH
6598: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6602: LD_INT 116
6604: PPUSH
6605: LD_INT 107
6607: PPUSH
6608: LD_INT 3
6610: PPUSH
6611: CALL_OW 331
// wait ( 0 0$3 ) ;
6615: LD_INT 105
6617: PPUSH
6618: CALL_OW 67
// InGameOff ;
6622: CALL_OW 9
// end ;
6626: PPOPN 2
6628: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6629: LD_INT 22
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 95
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 69
6657: PUSH
6658: LD_EXP 7
6662: AND
6663: IFFALSE 7002
6665: GO 6667
6667: DISABLE
6668: LD_INT 0
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
// begin enable ;
6675: ENABLE
// blockNorth := false ;
6676: LD_ADDR_EXP 7
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// InGameOn ;
6684: CALL_OW 8
// DialogueOn ;
6688: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6692: LD_ADDR_VAR 0 2
6696: PUSH
6697: LD_INT 22
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 95
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6726: LD_EXP 39
6730: PUSH
6731: LD_VAR 0 2
6735: IN
6736: PUSH
6737: LD_EXP 39
6741: PPUSH
6742: CALL_OW 302
6746: AND
6747: IFFALSE 6763
// Say ( Kovalyuk , D1b-Kov-1 ) else
6749: LD_EXP 39
6753: PPUSH
6754: LD_STRING D1b-Kov-1
6756: PPUSH
6757: CALL_OW 88
6761: GO 6798
// if Burlak in tmp and IsOk ( Burlak ) then
6763: LD_EXP 34
6767: PUSH
6768: LD_VAR 0 2
6772: IN
6773: PUSH
6774: LD_EXP 34
6778: PPUSH
6779: CALL_OW 302
6783: AND
6784: IFFALSE 6798
// Say ( Burlak , D1b-Bur-1 ) ;
6786: LD_EXP 34
6790: PPUSH
6791: LD_STRING D1b-Bur-1
6793: PPUSH
6794: CALL_OW 88
// DialogueOff ;
6798: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6802: LD_INT 22
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 3
6814: PUSH
6815: LD_INT 21
6817: PUSH
6818: LD_INT 3
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PPUSH
6838: CALL_OW 141
// for i in tmp do
6842: LD_ADDR_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: FOR_IN
6853: IFFALSE 6981
// begin d := rand ( 2 , 3 ) ;
6855: LD_ADDR_VAR 0 5
6859: PUSH
6860: LD_INT 2
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: CALL_OW 12
6870: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: LD_VAR 0 1
6880: PPUSH
6881: CALL_OW 250
6885: PPUSH
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_INT 6
6893: PPUSH
6894: CALL_OW 272
6898: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6899: LD_ADDR_VAR 0 4
6903: PUSH
6904: LD_VAR 0 1
6908: PPUSH
6909: CALL_OW 251
6913: PPUSH
6914: LD_VAR 0 5
6918: PPUSH
6919: LD_INT 6
6921: PPUSH
6922: CALL_OW 273
6926: ST_TO_ADDR
// if ValidHex ( x , y ) then
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_VAR 0 4
6936: PPUSH
6937: CALL_OW 488
6941: IFFALSE 6964
// ComMoveXY ( i , x , y ) else
6943: LD_VAR 0 1
6947: PPUSH
6948: LD_VAR 0 3
6952: PPUSH
6953: LD_VAR 0 4
6957: PPUSH
6958: CALL_OW 111
6962: GO 6979
// ComMoveXY ( i , 79 , 85 ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_INT 79
6971: PPUSH
6972: LD_INT 85
6974: PPUSH
6975: CALL_OW 111
// end ;
6979: GO 6852
6981: POP
6982: POP
// wait ( 0 0$5 ) ;
6983: LD_INT 175
6985: PPUSH
6986: CALL_OW 67
// InGameOff ;
6990: CALL_OW 9
// blockNorth := true ;
6994: LD_ADDR_EXP 7
6998: PUSH
6999: LD_INT 1
7001: ST_TO_ADDR
// end ;
7002: PPOPN 5
7004: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7005: LD_EXP 44
7009: PPUSH
7010: LD_INT 101
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PPUSH
7020: CALL_OW 72
7024: PUSH
7025: LD_EXP 4
7029: NOT
7030: AND
7031: IFFALSE 7433
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7043: LD_ADDR_VAR 0 5
7047: PUSH
7048: LD_EXP 44
7052: PPUSH
7053: LD_EXP 34
7057: PPUSH
7058: CALL_OW 74
7062: ST_TO_ADDR
// InGameOn ;
7063: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7067: LD_VAR 0 5
7071: PPUSH
7072: CALL_OW 250
7076: PPUSH
7077: LD_VAR 0 5
7081: PPUSH
7082: CALL_OW 251
7086: PPUSH
7087: LD_INT 3
7089: PPUSH
7090: LD_INT 6
7092: PPUSH
7093: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7097: LD_VAR 0 5
7101: PPUSH
7102: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7106: LD_VAR 0 5
7110: PPUSH
7111: LD_EXP 34
7115: PPUSH
7116: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7120: LD_VAR 0 5
7124: PPUSH
7125: LD_STRING D2-RSol1-1
7127: PPUSH
7128: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 5
7141: PPUSH
7142: CALL_OW 250
7146: PPUSH
7147: LD_VAR 0 5
7151: PPUSH
7152: CALL_OW 254
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: CALL_OW 272
7164: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7165: LD_ADDR_VAR 0 4
7169: PUSH
7170: LD_VAR 0 5
7174: PPUSH
7175: CALL_OW 251
7179: PPUSH
7180: LD_VAR 0 5
7184: PPUSH
7185: CALL_OW 254
7189: PPUSH
7190: LD_INT 3
7192: PPUSH
7193: CALL_OW 273
7197: ST_TO_ADDR
// if ValidHex ( x , y ) then
7198: LD_VAR 0 3
7202: PPUSH
7203: LD_VAR 0 4
7207: PPUSH
7208: CALL_OW 488
7212: IFFALSE 7244
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7214: LD_EXP 35
7218: PUSH
7219: LD_EXP 39
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: LD_VAR 0 4
7237: PPUSH
7238: CALL_OW 111
7242: GO 7267
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7244: LD_EXP 35
7248: PUSH
7249: LD_EXP 39
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7267: LD_EXP 34
7271: PPUSH
7272: LD_VAR 0 5
7276: PPUSH
7277: CALL_OW 112
// p := 0 ;
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7289: LD_INT 35
7291: PPUSH
7292: CALL_OW 67
// p := p + 1 ;
7296: LD_ADDR_VAR 0 2
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_INT 1
7308: PLUS
7309: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 10
7317: GREATER
7318: PUSH
7319: LD_EXP 34
7323: PPUSH
7324: LD_VAR 0 5
7328: PPUSH
7329: CALL_OW 296
7333: PUSH
7334: LD_INT 6
7336: LESS
7337: OR
7338: IFFALSE 7289
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7340: LD_EXP 34
7344: PUSH
7345: LD_EXP 35
7349: PUSH
7350: LD_EXP 39
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: PPUSH
7360: LD_VAR 0 5
7364: PPUSH
7365: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7369: LD_EXP 34
7373: PPUSH
7374: LD_STRING D2-Bur-1
7376: PPUSH
7377: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7381: LD_VAR 0 5
7385: PPUSH
7386: LD_STRING D2-RSol1-2
7388: PPUSH
7389: CALL_OW 88
// ComHold ( nearestGuard ) ;
7393: LD_VAR 0 5
7397: PPUSH
7398: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7402: LD_VAR 0 5
7406: PPUSH
7407: CALL_OW 250
7411: PPUSH
7412: LD_VAR 0 5
7416: PPUSH
7417: CALL_OW 251
7421: PPUSH
7422: LD_INT 3
7424: PPUSH
7425: CALL_OW 331
// InGameOff ;
7429: CALL_OW 9
// end ;
7433: PPOPN 5
7435: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7436: LD_EXP 34
7440: PPUSH
7441: LD_EXP 40
7445: PPUSH
7446: CALL_OW 296
7450: PUSH
7451: LD_INT 10
7453: LESS
7454: PUSH
7455: LD_INT 3
7457: PPUSH
7458: LD_EXP 40
7462: PPUSH
7463: CALL_OW 292
7467: AND
7468: IFFALSE 7824
7470: GO 7472
7472: DISABLE
7473: LD_INT 0
7475: PPUSH
// begin InGameOn ;
7476: CALL_OW 8
// beriaVisited := true ;
7480: LD_ADDR_EXP 4
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7488: LD_EXP 34
7492: PPUSH
7493: LD_EXP 40
7497: PPUSH
7498: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7502: LD_EXP 35
7506: PUSH
7507: LD_EXP 39
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: LD_INT 68
7518: PPUSH
7519: LD_INT 99
7521: PPUSH
7522: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7526: LD_EXP 40
7530: PPUSH
7531: LD_EXP 34
7535: PPUSH
7536: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7540: LD_EXP 40
7544: PPUSH
7545: LD_STRING D2-Pla-2
7547: PPUSH
7548: CALL_OW 88
// p := 0 ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7560: LD_INT 35
7562: PPUSH
7563: CALL_OW 67
// p := p + 1 ;
7567: LD_ADDR_VAR 0 1
7571: PUSH
7572: LD_VAR 0 1
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7581: LD_EXP 34
7585: PPUSH
7586: LD_EXP 40
7590: PPUSH
7591: CALL_OW 296
7595: PUSH
7596: LD_INT 6
7598: LESS
7599: PUSH
7600: LD_VAR 0 1
7604: PUSH
7605: LD_INT 8
7607: GREATER
7608: OR
7609: IFFALSE 7560
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7611: LD_EXP 34
7615: PUSH
7616: LD_EXP 35
7620: PUSH
7621: LD_EXP 39
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: PPUSH
7631: LD_EXP 40
7635: PPUSH
7636: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7640: LD_EXP 34
7644: PPUSH
7645: LD_STRING D2-Bur-2
7647: PPUSH
7648: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7652: LD_INT 6
7654: PPUSH
7655: LD_INT 3
7657: PPUSH
7658: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7662: LD_EXP 40
7666: PPUSH
7667: LD_STRING D2-Pla-3
7669: PPUSH
7670: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7674: LD_EXP 34
7678: PPUSH
7679: LD_STRING D2-Bur-3
7681: PPUSH
7682: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7686: LD_EXP 40
7690: PPUSH
7691: LD_STRING D2-Pla-4
7693: PPUSH
7694: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7698: LD_EXP 34
7702: PPUSH
7703: LD_STRING D2-Bur-4
7705: PPUSH
7706: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7710: LD_EXP 40
7714: PPUSH
7715: LD_STRING D2-Pla-5
7717: PPUSH
7718: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7722: LD_INT 1
7724: PUSH
7725: LD_INT 2
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: LD_INT 4
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL 7827 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7744: LD_EXP 40
7748: PPUSH
7749: LD_STRING D3-Pla-1
7751: PPUSH
7752: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7756: LD_EXP 34
7760: PPUSH
7761: LD_STRING D3-Bur-1
7763: PPUSH
7764: CALL_OW 88
// InGameOff ;
7768: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7772: LD_STRING M2a
7774: PPUSH
7775: CALL_OW 337
// SetSide ( beria , 3 ) ;
7779: LD_INT 106
7781: PPUSH
7782: LD_INT 3
7784: PPUSH
7785: CALL_OW 235
// if not Gnyevko then
7789: LD_EXP 35
7793: NOT
7794: IFFALSE 7815
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7796: LD_INT 106
7798: PPUSH
7799: CALL_OW 313
7803: PUSH
7804: LD_INT 1
7806: ARRAY
7807: PPUSH
7808: LD_INT 3
7810: PPUSH
7811: CALL_OW 235
// ComFree ( Platonov ) ;
7815: LD_EXP 40
7819: PPUSH
7820: CALL_OW 139
// end ;
7824: PPOPN 1
7826: END
// function AskPlatonov ( questions ) ; var q ; begin
7827: LD_INT 0
7829: PPUSH
7830: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7831: LD_ADDR_VAR 0 3
7835: PUSH
7836: LD_STRING QMoreInfo
7838: PPUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 98
7848: ST_TO_ADDR
// case q of 1 :
7849: LD_VAR 0 3
7853: PUSH
7854: LD_INT 1
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7889
7862: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7863: LD_EXP 34
7867: PPUSH
7868: LD_STRING D2a-Bur-1
7870: PPUSH
7871: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7875: LD_EXP 40
7879: PPUSH
7880: LD_STRING D2a-Pla-1
7882: PPUSH
7883: CALL_OW 88
// end ; 2 :
7887: GO 7960
7889: LD_INT 2
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 7924
7897: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7898: LD_EXP 34
7902: PPUSH
7903: LD_STRING D2b-Bur-1
7905: PPUSH
7906: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7910: LD_EXP 40
7914: PPUSH
7915: LD_STRING D2b-Pla-1
7917: PPUSH
7918: CALL_OW 88
// end ; 3 :
7922: GO 7960
7924: LD_INT 3
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7959
7932: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7933: LD_EXP 34
7937: PPUSH
7938: LD_STRING D2c-Bur-1
7940: PPUSH
7941: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7945: LD_EXP 40
7949: PPUSH
7950: LD_STRING D2c-Pla-1
7952: PPUSH
7953: CALL_OW 88
// end ; end ;
7957: GO 7960
7959: POP
// if q < 4 and questions > 2 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 4
7967: LESS
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: LD_INT 2
7976: GREATER
7977: AND
7978: IFFALSE 7995
// AskPlatonov ( questions diff q ) ;
7980: LD_VAR 0 1
7984: PUSH
7985: LD_VAR 0 3
7989: DIFF
7990: PPUSH
7991: CALL 7827 0 1
// end ;
7995: LD_VAR 0 2
7999: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8000: LD_INT 0
8002: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8003: LD_EXP 40
8007: PPUSH
8008: LD_VAR 0 1
8012: PPUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8022: LD_INT 35
8024: PPUSH
8025: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8029: LD_EXP 40
8033: PPUSH
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL_OW 297
8048: PUSH
8049: LD_INT 5
8051: LESS
8052: PUSH
8053: LD_VAR 0 1
8057: PPUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 283
8067: PUSH
8068: LD_INT 1
8070: EQUAL
8071: AND
8072: IFFALSE 8022
// ComStop ( Platonov ) ;
8074: LD_EXP 40
8078: PPUSH
8079: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8083: LD_EXP 40
8087: PPUSH
8088: LD_STRING D4-Pla-1
8090: PPUSH
8091: CALL_OW 88
// end ;
8095: LD_VAR 0 3
8099: RET
// every 0 0$2 trigger hasLab do
8100: LD_EXP 9
8104: IFFALSE 8168
8106: GO 8108
8108: DISABLE
// begin DialogueOn ;
8109: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8113: LD_EXP 34
8117: PPUSH
8118: LD_STRING D5a-Bur-1
8120: PPUSH
8121: CALL_OW 88
// if hasWorkshop then
8125: LD_EXP 10
8129: IFFALSE 8145
// Say ( Platonov , D5a-Pla-1 ) else
8131: LD_EXP 40
8135: PPUSH
8136: LD_STRING D5a-Pla-1
8138: PPUSH
8139: CALL_OW 88
8143: GO 8157
// Say ( Platonov , D5a-Pla-1a ) ;
8145: LD_EXP 40
8149: PPUSH
8150: LD_STRING D5a-Pla-1a
8152: PPUSH
8153: CALL_OW 88
// DialogueOff ;
8157: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8161: LD_STRING M2b
8163: PPUSH
8164: CALL_OW 337
// end ;
8168: END
// every 0 0$2 trigger hasWorkshop do
8169: LD_EXP 10
8173: IFFALSE 8237
8175: GO 8177
8177: DISABLE
// begin DialogueOn ;
8178: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8182: LD_EXP 34
8186: PPUSH
8187: LD_STRING D5b-Bur-1
8189: PPUSH
8190: CALL_OW 88
// if hasLab then
8194: LD_EXP 9
8198: IFFALSE 8214
// Say ( Platonov , D5b-Pla-1 ) else
8200: LD_EXP 40
8204: PPUSH
8205: LD_STRING D5b-Pla-1
8207: PPUSH
8208: CALL_OW 88
8212: GO 8226
// Say ( Platonov , D5b-Pla-1a ) ;
8214: LD_EXP 40
8218: PPUSH
8219: LD_STRING D5b-Pla-1a
8221: PPUSH
8222: CALL_OW 88
// DialogueOff ;
8226: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8230: LD_STRING M2c
8232: PPUSH
8233: CALL_OW 337
// end ;
8237: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8238: LD_EXP 9
8242: PUSH
8243: LD_EXP 10
8247: AND
8248: IFFALSE 8342
8250: GO 8252
8252: DISABLE
// begin DialogueOn ;
8253: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8257: LD_INT 47
8259: PPUSH
8260: LD_INT 3
8262: PPUSH
8263: CALL_OW 321
8267: PUSH
8268: LD_INT 2
8270: EQUAL
8271: IFFALSE 8299
// begin Say ( Burlak , D7b-Bur-1 ) ;
8273: LD_EXP 34
8277: PPUSH
8278: LD_STRING D7b-Bur-1
8280: PPUSH
8281: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8285: LD_EXP 40
8289: PPUSH
8290: LD_STRING D7b-Pla-1
8292: PPUSH
8293: CALL_OW 88
// end else
8297: GO 8323
// begin Say ( Burlak , D7a-Bur-1 ) ;
8299: LD_EXP 34
8303: PPUSH
8304: LD_STRING D7a-Bur-1
8306: PPUSH
8307: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8311: LD_EXP 40
8315: PPUSH
8316: LD_STRING D7a-Pla-1
8318: PPUSH
8319: CALL_OW 88
// end ; DialogueOff ;
8323: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8327: LD_STRING M2
8329: PPUSH
8330: CALL_OW 337
// hasToBuildTank := true ;
8334: LD_ADDR_EXP 11
8338: PUSH
8339: LD_INT 1
8341: ST_TO_ADDR
// end ;
8342: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8343: LD_EXP 4
8347: PUSH
8348: LD_EXP 9
8352: NOT
8353: PUSH
8354: LD_EXP 10
8358: NOT
8359: OR
8360: PUSH
8361: LD_EXP 11
8365: OR
8366: AND
8367: PUSH
8368: LD_INT 22
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 91
8383: PUSH
8384: LD_INT 106
8386: PUSH
8387: LD_INT 32
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 69
8407: AND
8408: IFFALSE 8517
8410: GO 8412
8412: DISABLE
8413: LD_INT 0
8415: PPUSH
// begin enable ;
8416: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8417: LD_ADDR_VAR 0 1
8421: PUSH
8422: LD_INT 22
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 91
8437: PUSH
8438: LD_INT 106
8440: PUSH
8441: LD_INT 32
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: ST_TO_ADDR
// InGameOn ;
8462: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 1
8473: ARRAY
8474: PPUSH
8475: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8479: LD_VAR 0 1
8483: PPUSH
8484: LD_INT 66
8486: PPUSH
8487: LD_INT 99
8489: PPUSH
8490: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8494: LD_EXP 40
8498: PPUSH
8499: LD_STRING D8-Pla-1
8501: PPUSH
8502: CALL_OW 88
// wait ( 0 0$3 ) ;
8506: LD_INT 105
8508: PPUSH
8509: CALL_OW 67
// InGameOff ;
8513: CALL_OW 9
// end ;
8517: PPOPN 1
8519: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8520: LD_INT 21
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 23
8535: PUSH
8536: LD_INT 3
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: LD_INT 30
8548: PUSH
8549: LD_INT 4
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 30
8558: PUSH
8559: LD_INT 31
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 70
8580: PUSH
8581: LD_EXP 31
8585: NOT
8586: AND
8587: IFFALSE 8798
8589: GO 8591
8591: DISABLE
8592: LD_INT 0
8594: PPUSH
// begin enable ;
8595: ENABLE
// InGameOn ;
8596: CALL_OW 8
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8600: LD_ADDR_VAR 0 1
8604: PUSH
8605: LD_INT 21
8607: PPUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 3
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 23
8620: PUSH
8621: LD_INT 3
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 2
8630: PUSH
8631: LD_INT 30
8633: PUSH
8634: LD_INT 4
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 30
8643: PUSH
8644: LD_INT 31
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: PPUSH
8661: CALL_OW 70
8665: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
8666: LD_EXP 40
8670: PPUSH
8671: LD_VAR 0 1
8675: PUSH
8676: LD_INT 1
8678: ARRAY
8679: PPUSH
8680: CALL_OW 112
// wait ( 0 0$2 ) ;
8684: LD_INT 70
8686: PPUSH
8687: CALL_OW 67
// ComHold ( Platonov ) ;
8691: LD_EXP 40
8695: PPUSH
8696: CALL_OW 140
// Say ( Platonov , D6-Pla-1 ) ;
8700: LD_EXP 40
8704: PPUSH
8705: LD_STRING D6-Pla-1
8707: PPUSH
8708: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8712: LD_EXP 34
8716: PPUSH
8717: LD_STRING D6-Bur-1
8719: PPUSH
8720: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8724: LD_VAR 0 1
8728: PUSH
8729: LD_INT 1
8731: ARRAY
8732: PPUSH
8733: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8737: LD_VAR 0 1
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PPUSH
8746: CALL_OW 266
8750: PUSH
8751: LD_INT 31
8753: EQUAL
8754: IFFALSE 8776
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8756: LD_INT 106
8758: PPUSH
8759: CALL_OW 274
8763: PPUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_INT 10
8769: PPUSH
8770: CALL_OW 276
8774: GO 8794
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8776: LD_INT 106
8778: PPUSH
8779: CALL_OW 274
8783: PPUSH
8784: LD_INT 1
8786: PPUSH
8787: LD_INT 30
8789: PPUSH
8790: CALL_OW 276
// InGameOff ;
8794: CALL_OW 9
// end ;
8798: PPOPN 1
8800: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8801: LD_EXP 4
8805: PUSH
8806: LD_INT 21
8808: PPUSH
8809: LD_INT 22
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 23
8821: PUSH
8822: LD_INT 3
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 21
8831: PUSH
8832: LD_INT 3
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: PPUSH
8844: CALL_OW 71
8848: AND
8849: IFFALSE 9106
8851: GO 8853
8853: DISABLE
8854: LD_INT 0
8856: PPUSH
8857: PPUSH
// begin enable ;
8858: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8859: LD_ADDR_VAR 0 1
8863: PUSH
8864: LD_INT 21
8866: PPUSH
8867: LD_INT 22
8869: PUSH
8870: LD_INT 3
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 23
8879: PUSH
8880: LD_INT 3
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 21
8889: PUSH
8890: LD_INT 3
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: PPUSH
8902: CALL_OW 71
8906: PUSH
8907: LD_INT 1
8909: ARRAY
8910: ST_TO_ADDR
// InGameOn ;
8911: CALL_OW 8
// ComMoveUnit ( Platonov , tmp ) ;
8915: LD_EXP 40
8919: PPUSH
8920: LD_VAR 0 1
8924: PPUSH
8925: CALL_OW 112
// Say ( Platonov , DPlatAngry ) ;
8929: LD_EXP 40
8933: PPUSH
8934: LD_STRING DPlatAngry
8936: PPUSH
8937: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8941: LD_EXP 34
8945: PPUSH
8946: LD_STRING D6-Bur-1
8948: PPUSH
8949: CALL_OW 88
// RemoveUnit ( tmp ) ;
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 64
// InGameOff ;
8962: CALL_OW 9
// amount := 0 ;
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: LD_INT 0
8973: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
8974: LD_VAR 0 1
8978: PPUSH
8979: CALL_OW 266
8983: PUSH
8984: LD_INT 31
8986: DOUBLE
8987: EQUAL
8988: IFTRUE 8992
8990: GO 9003
8992: POP
// amount := 10 ; b_lab :
8993: LD_ADDR_VAR 0 2
8997: PUSH
8998: LD_INT 10
9000: ST_TO_ADDR
9001: GO 9080
9003: LD_INT 6
9005: DOUBLE
9006: EQUAL
9007: IFTRUE 9011
9009: GO 9022
9011: POP
// amount := 20 ; b_armoury :
9012: LD_ADDR_VAR 0 2
9016: PUSH
9017: LD_INT 20
9019: ST_TO_ADDR
9020: GO 9080
9022: LD_INT 4
9024: DOUBLE
9025: EQUAL
9026: IFTRUE 9030
9028: GO 9041
9030: POP
// amount := 30 ; b_workshop :
9031: LD_ADDR_VAR 0 2
9035: PUSH
9036: LD_INT 30
9038: ST_TO_ADDR
9039: GO 9080
9041: LD_INT 2
9043: DOUBLE
9044: EQUAL
9045: IFTRUE 9049
9047: GO 9060
9049: POP
// amount := 40 ; b_oil_power :
9050: LD_ADDR_VAR 0 2
9054: PUSH
9055: LD_INT 40
9057: ST_TO_ADDR
9058: GO 9080
9060: LD_INT 26
9062: DOUBLE
9063: EQUAL
9064: IFTRUE 9068
9066: GO 9079
9068: POP
// amount := 20 ; end ;
9069: LD_ADDR_VAR 0 2
9073: PUSH
9074: LD_INT 20
9076: ST_TO_ADDR
9077: GO 9080
9079: POP
// if amount then
9080: LD_VAR 0 2
9084: IFFALSE 9106
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9086: LD_INT 106
9088: PPUSH
9089: CALL_OW 274
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: LD_VAR 0 2
9101: PPUSH
9102: CALL_OW 276
// end ;
9106: PPOPN 2
9108: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do var Dickens ;
9109: LD_INT 22
9111: PUSH
9112: LD_INT 3
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: LD_INT 92
9121: PUSH
9122: LD_INT 112
9124: PUSH
9125: LD_INT 155
9127: PUSH
9128: LD_INT 8
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 69
9145: PUSH
9146: LD_INT 2
9148: LESS
9149: PUSH
9150: LD_EXP 34
9154: PPUSH
9155: LD_INT 112
9157: PPUSH
9158: LD_INT 155
9160: PPUSH
9161: CALL_OW 297
9165: PUSH
9166: LD_INT 8
9168: LESS
9169: AND
9170: IFFALSE 9404
9172: GO 9174
9174: DISABLE
9175: LD_INT 0
9177: PPUSH
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9178: LD_INT 112
9180: PPUSH
9181: LD_INT 155
9183: PPUSH
9184: LD_INT 3
9186: PPUSH
9187: LD_INT 4
9189: NEG
9190: PPUSH
9191: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9195: LD_INT 1
9197: PPUSH
9198: LD_EXP 34
9202: PPUSH
9203: CALL_OW 471
// uc_side := 1 ;
9207: LD_ADDR_OWVAR 20
9211: PUSH
9212: LD_INT 1
9214: ST_TO_ADDR
// uc_nation := 1 ;
9215: LD_ADDR_OWVAR 21
9219: PUSH
9220: LD_INT 1
9222: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9223: LD_ADDR_VAR 0 1
9227: PUSH
9228: LD_STRING Dickens
9230: PPUSH
9231: CALL_OW 25
9235: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_INT 112
9243: PPUSH
9244: LD_INT 155
9246: PPUSH
9247: LD_INT 1
9249: PPUSH
9250: CALL_OW 48
// wait ( 0 0$2 ) ;
9254: LD_INT 70
9256: PPUSH
9257: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9261: LD_VAR 0 1
9265: PPUSH
9266: LD_EXP 34
9270: PPUSH
9271: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9275: LD_VAR 0 1
9279: PPUSH
9280: LD_STRING DUsSpawnSol
9282: PPUSH
9283: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9287: LD_INT 1
9289: PPUSH
9290: LD_EXP 34
9294: PPUSH
9295: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9299: LD_INT 112
9301: PPUSH
9302: LD_INT 155
9304: PPUSH
9305: LD_INT 3
9307: PPUSH
9308: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9312: LD_VAR 0 1
9316: PPUSH
9317: LD_INT 77
9319: PPUSH
9320: LD_INT 152
9322: PPUSH
9323: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9327: LD_INT 35
9329: PPUSH
9330: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9334: LD_VAR 0 1
9338: PPUSH
9339: CALL_OW 302
9343: NOT
9344: PUSH
9345: LD_VAR 0 1
9349: PPUSH
9350: LD_INT 77
9352: PPUSH
9353: LD_INT 152
9355: PPUSH
9356: CALL_OW 307
9360: OR
9361: IFFALSE 9327
// if not IsOk ( Dickens ) then
9363: LD_VAR 0 1
9367: PPUSH
9368: CALL_OW 302
9372: NOT
9373: IFFALSE 9377
// exit ;
9375: GO 9404
// RemoveUnit ( Dickens ) ;
9377: LD_VAR 0 1
9381: PPUSH
9382: CALL_OW 64
// SaveCharacters ( Dickens , currentMissionPrefix & Dickens ) ;
9386: LD_VAR 0 1
9390: PPUSH
9391: LD_EXP 3
9395: PUSH
9396: LD_STRING Dickens
9398: STR
9399: PPUSH
9400: CALL_OW 38
// end ;
9404: PPOPN 1
9406: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9407: LD_EXP 34
9411: PPUSH
9412: CALL_OW 256
9416: PUSH
9417: LD_INT 600
9419: LESS
9420: IFFALSE 9437
9422: GO 9424
9424: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9425: LD_EXP 34
9429: PPUSH
9430: LD_STRING DUsSpawnBur
9432: PPUSH
9433: CALL_OW 88
9437: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9438: LD_EXP 12
9442: IFFALSE 10504
9444: GO 9446
9446: DISABLE
9447: LD_INT 0
9449: PPUSH
9450: PPUSH
9451: PPUSH
9452: PPUSH
// begin hasToBuildTank := false ;
9453: LD_ADDR_EXP 11
9457: PUSH
9458: LD_INT 0
9460: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9461: LD_ADDR_EXP 5
9465: PUSH
9466: LD_INT 0
9468: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9469: LD_ADDR_VAR 0 2
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 3
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 21
9486: PUSH
9487: LD_INT 2
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PPUSH
9498: CALL_OW 69
9502: ST_TO_ADDR
// InGameOn ;
9503: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: CALL_OW 85
// wait ( 0 0$1 ) ;
9520: LD_INT 35
9522: PPUSH
9523: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9527: LD_EXP 34
9531: PPUSH
9532: LD_STRING D9-Bur-1
9534: PPUSH
9535: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9539: LD_EXP 40
9543: PPUSH
9544: LD_VAR 0 2
9548: PUSH
9549: LD_INT 1
9551: ARRAY
9552: PPUSH
9553: CALL_OW 112
// p := 0 ;
9557: LD_ADDR_VAR 0 3
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9565: LD_INT 35
9567: PPUSH
9568: CALL_OW 67
// p := p + 1 ;
9572: LD_ADDR_VAR 0 3
9576: PUSH
9577: LD_VAR 0 3
9581: PUSH
9582: LD_INT 1
9584: PLUS
9585: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9586: LD_EXP 40
9590: PPUSH
9591: LD_VAR 0 2
9595: PUSH
9596: LD_INT 1
9598: ARRAY
9599: PPUSH
9600: CALL_OW 296
9604: PUSH
9605: LD_INT 8
9607: LESS
9608: PUSH
9609: LD_VAR 0 3
9613: PUSH
9614: LD_INT 8
9616: GREATER
9617: OR
9618: IFFALSE 9565
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9620: LD_EXP 40
9624: PPUSH
9625: LD_VAR 0 2
9629: PUSH
9630: LD_INT 1
9632: ARRAY
9633: PPUSH
9634: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9638: LD_EXP 40
9642: PPUSH
9643: LD_STRING D9-Pla-1
9645: PPUSH
9646: CALL_OW 88
// ComFree ( Platonov ) ;
9650: LD_EXP 40
9654: PPUSH
9655: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_INT 64
9666: PPUSH
9667: LD_INT 98
9669: PPUSH
9670: CALL_OW 171
// InGameOff ;
9674: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9678: LD_STRING M3
9680: PPUSH
9681: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9685: LD_EXP 41
9689: PPUSH
9690: LD_INT 70
9692: PPUSH
9693: LD_INT 108
9695: PPUSH
9696: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9700: LD_EXP 41
9704: PPUSH
9705: CALL_OW 200
// wait ( 1 ) ;
9709: LD_INT 1
9711: PPUSH
9712: CALL_OW 67
// ComExit ( Belkov ) ;
9716: LD_EXP 36
9720: PPUSH
9721: CALL 54631 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9725: LD_EXP 36
9729: PPUSH
9730: LD_INT 113
9732: PPUSH
9733: LD_INT 104
9735: PPUSH
9736: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9740: LD_EXP 36
9744: PPUSH
9745: LD_INT 116
9747: PPUSH
9748: LD_INT 108
9750: PPUSH
9751: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9755: LD_INT 35
9757: PPUSH
9758: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9762: LD_INT 22
9764: PUSH
9765: LD_INT 3
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 21
9774: PUSH
9775: LD_INT 2
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 91
9784: PUSH
9785: LD_INT 71
9787: PUSH
9788: LD_INT 8
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: IFFALSE 9755
// InGameOn ;
9807: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9811: LD_ADDR_VAR 0 2
9815: PUSH
9816: LD_INT 22
9818: PUSH
9819: LD_INT 3
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 21
9828: PUSH
9829: LD_INT 2
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 91
9838: PUSH
9839: LD_INT 71
9841: PUSH
9842: LD_INT 8
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 69
9859: ST_TO_ADDR
// if belkovTeam < 3 then
9860: LD_EXP 45
9864: PUSH
9865: LD_INT 3
9867: LESS
9868: IFFALSE 9953
// begin for i := belkovTeam to 3 do
9870: LD_ADDR_VAR 0 1
9874: PUSH
9875: DOUBLE
9876: LD_EXP 45
9880: DEC
9881: ST_TO_ADDR
9882: LD_INT 3
9884: PUSH
9885: FOR_TO
9886: IFFALSE 9951
// begin un := kirovBaseSquad [ 1 ] ;
9888: LD_ADDR_VAR 0 4
9892: PUSH
9893: LD_EXP 43
9897: PUSH
9898: LD_INT 1
9900: ARRAY
9901: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9902: LD_ADDR_EXP 43
9906: PUSH
9907: LD_EXP 43
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: CALL_OW 3
9919: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9920: LD_ADDR_EXP 45
9924: PUSH
9925: LD_EXP 45
9929: PPUSH
9930: LD_EXP 45
9934: PUSH
9935: LD_INT 1
9937: PLUS
9938: PPUSH
9939: LD_VAR 0 4
9943: PPUSH
9944: CALL_OW 1
9948: ST_TO_ADDR
// end ;
9949: GO 9885
9951: POP
9952: POP
// end ; if Kirilenkova then
9953: LD_EXP 37
9957: IFFALSE 9981
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
9959: LD_ADDR_EXP 45
9963: PUSH
9964: LD_EXP 45
9968: PPUSH
9969: LD_EXP 37
9973: PPUSH
9974: CALL 54233 0 2
9978: ST_TO_ADDR
9979: GO 10020
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
9981: LD_ADDR_EXP 45
9985: PUSH
9986: LD_EXP 45
9990: PPUSH
9991: LD_EXP 43
9995: PPUSH
9996: LD_INT 25
9998: PUSH
9999: LD_INT 4
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PPUSH
10006: CALL_OW 72
10010: PUSH
10011: LD_INT 1
10013: ARRAY
10014: PPUSH
10015: CALL 54233 0 2
10019: ST_TO_ADDR
// ComExit ( Kurin ) ;
10020: LD_EXP 38
10024: PPUSH
10025: CALL 54631 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10029: LD_EXP 38
10033: PPUSH
10034: LD_VAR 0 2
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PPUSH
10043: CALL_OW 179
// wait ( 0 0$1 ) ;
10047: LD_INT 35
10049: PPUSH
10050: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10054: LD_VAR 0 2
10058: PUSH
10059: LD_INT 1
10061: ARRAY
10062: PPUSH
10063: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10067: LD_ADDR_VAR 0 4
10071: PUSH
10072: LD_VAR 0 2
10076: PUSH
10077: LD_INT 1
10079: ARRAY
10080: PPUSH
10081: CALL_OW 311
10085: ST_TO_ADDR
// ComExit ( un ) ;
10086: LD_VAR 0 4
10090: PPUSH
10091: CALL 54631 0 1
// wait ( 0 0$1 ) ;
10095: LD_INT 35
10097: PPUSH
10098: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10102: LD_VAR 0 4
10106: PPUSH
10107: LD_EXP 38
10111: PPUSH
10112: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10116: LD_EXP 36
10120: PPUSH
10121: LD_VAR 0 2
10125: PUSH
10126: LD_INT 1
10128: ARRAY
10129: PPUSH
10130: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10134: LD_INT 10
10136: PPUSH
10137: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10141: LD_EXP 38
10145: PPUSH
10146: LD_STRING D10-Kur-1
10148: PPUSH
10149: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10153: LD_EXP 36
10157: PPUSH
10158: LD_INT 122
10160: PPUSH
10161: LD_INT 112
10163: PPUSH
10164: CALL_OW 176
// wait ( 0 0$2 ) ;
10168: LD_INT 70
10170: PPUSH
10171: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10175: LD_EXP 36
10179: PPUSH
10180: LD_STRING D10-Bel-1
10182: PPUSH
10183: CALL_OW 88
// if belkovBrother then
10187: LD_EXP 32
10191: IFFALSE 10243
// begin Say ( Burlak , D10-Bur-1 ) ;
10193: LD_EXP 34
10197: PPUSH
10198: LD_STRING D10-Bur-1
10200: PPUSH
10201: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10205: LD_EXP 36
10209: PPUSH
10210: LD_STRING D10-Bel-2
10212: PPUSH
10213: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10217: LD_EXP 34
10221: PPUSH
10222: LD_STRING D10-Bur-2
10224: PPUSH
10225: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10229: LD_EXP 38
10233: PPUSH
10234: LD_STRING D10-Kur-2a
10236: PPUSH
10237: CALL_OW 88
// end else
10241: GO 10255
// begin Say ( Kurin , D10-Kur-2 ) end ;
10243: LD_EXP 38
10247: PPUSH
10248: LD_STRING D10-Kur-2
10250: PPUSH
10251: CALL_OW 88
// wait ( 0 0$2 ) ;
10255: LD_INT 70
10257: PPUSH
10258: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10262: LD_EXP 38
10266: PPUSH
10267: LD_STRING D10-Kur-2b
10269: PPUSH
10270: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10274: LD_VAR 0 4
10278: PPUSH
10279: LD_INT 66
10281: PPUSH
10282: LD_INT 97
10284: PPUSH
10285: CALL_OW 111
// wait ( 0 0$5 ) ;
10289: LD_INT 175
10291: PPUSH
10292: CALL_OW 67
// InGameOff ;
10296: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10300: LD_EXP 33
10304: PPUSH
10305: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10309: LD_STRING M4
10311: PPUSH
10312: CALL_OW 337
// wait ( 0 0$6 ) ;
10316: LD_INT 210
10318: PPUSH
10319: CALL_OW 67
// kurinDontWannaTalk := true ;
10323: LD_ADDR_EXP 5
10327: PUSH
10328: LD_INT 1
10330: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10331: LD_INT 140
10333: PPUSH
10334: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10338: LD_INT 35
10340: PPUSH
10341: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10345: LD_EXP 34
10349: PPUSH
10350: CALL_OW 310
10354: PUSH
10355: LD_EXP 34
10359: PPUSH
10360: LD_INT 106
10362: PPUSH
10363: CALL_OW 296
10367: PUSH
10368: LD_INT 12
10370: LESS
10371: OR
10372: IFFALSE 10338
// DialogueOn ;
10374: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10378: LD_EXP 40
10382: PPUSH
10383: LD_STRING D11-Pla-1
10385: PPUSH
10386: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10390: LD_EXP 34
10394: PPUSH
10395: LD_STRING D11-Bur-1
10397: PPUSH
10398: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: PUSH
10431: LD_INT 1
10433: GREATER
10434: IFFALSE 10448
// Say ( Burlak , D11-Bur-1a ) ;
10436: LD_EXP 34
10440: PPUSH
10441: LD_STRING D11-Bur-1a
10443: PPUSH
10444: CALL_OW 88
// DialogueOff ;
10448: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10452: LD_ADDR_EXP 8
10456: PUSH
10457: LD_INT 160
10459: PUSH
10460: LD_INT 150
10462: PUSH
10463: LD_INT 140
10465: PUSH
10466: LD_INT 120
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: PUSH
10475: LD_OWVAR 67
10479: ARRAY
10480: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10481: LD_STRING M5
10483: PPUSH
10484: CALL_OW 337
// kirovHasTank := true ;
10488: LD_ADDR_EXP 6
10492: PUSH
10493: LD_INT 1
10495: ST_TO_ADDR
// hasToBuildTank := true ;
10496: LD_ADDR_EXP 11
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// end ;
10504: PPOPN 4
10506: END
// every 0 0$2 trigger allianceAttacked do
10507: LD_EXP 13
10511: IFFALSE 10550
10513: GO 10515
10515: DISABLE
// begin DialogueOn ;
10516: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10520: LD_EXP 38
10524: PPUSH
10525: LD_STRING DArestKur
10527: PPUSH
10528: CALL_OW 88
// dwait ( 0 0$1 ) ;
10532: LD_INT 35
10534: PPUSH
10535: CALL_OW 68
// YouLost ( SelfAttack ) ;
10539: LD_STRING SelfAttack
10541: PPUSH
10542: CALL_OW 104
// DialogueOff ;
10546: CALL_OW 7
// end ;
10550: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10551: LD_INT 22
10553: PUSH
10554: LD_INT 3
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 21
10563: PUSH
10564: LD_INT 2
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PPUSH
10575: CALL_OW 69
10579: PUSH
10580: LD_INT 22
10582: PUSH
10583: LD_INT 3
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 21
10592: PUSH
10593: LD_INT 1
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PPUSH
10604: CALL_OW 69
10608: GREATEREQUAL
10609: PUSH
10610: LD_EXP 6
10614: AND
10615: IFFALSE 10785
10617: GO 10619
10619: DISABLE
// begin hasToBuildTank := false ;
10620: LD_ADDR_EXP 11
10624: PUSH
10625: LD_INT 0
10627: ST_TO_ADDR
// blockNorth := false ;
10628: LD_ADDR_EXP 7
10632: PUSH
10633: LD_INT 0
10635: ST_TO_ADDR
// InGameOn ;
10636: CALL_OW 8
// wait ( 0 0$2 ) ;
10640: LD_INT 70
10642: PPUSH
10643: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10647: LD_INT 106
10649: PPUSH
10650: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10654: LD_EXP 40
10658: PPUSH
10659: LD_INT 65
10661: PPUSH
10662: LD_INT 97
10664: PPUSH
10665: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10669: LD_EXP 40
10673: PPUSH
10674: LD_EXP 34
10678: PPUSH
10679: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10683: LD_EXP 34
10687: PPUSH
10688: LD_STRING D12-Bur-1
10690: PPUSH
10691: CALL_OW 88
// wait ( 0 0$1 ) ;
10695: LD_INT 35
10697: PPUSH
10698: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10702: LD_EXP 40
10706: PPUSH
10707: LD_STRING D12-Pla-1
10709: PPUSH
10710: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10714: LD_EXP 34
10718: PPUSH
10719: LD_STRING D12-Bur-2
10721: PPUSH
10722: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10726: LD_EXP 40
10730: PPUSH
10731: LD_STRING D12-Pla-2
10733: PPUSH
10734: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10738: LD_EXP 34
10742: PPUSH
10743: LD_STRING D12-Bur-3
10745: PPUSH
10746: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10750: LD_EXP 40
10754: PPUSH
10755: LD_STRING D12-Pla-3
10757: PPUSH
10758: CALL_OW 88
// hasAllTanks := true ;
10762: LD_ADDR_EXP 14
10766: PUSH
10767: LD_INT 1
10769: ST_TO_ADDR
// InGameOff ;
10770: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10774: LD_STRING M6
10776: PPUSH
10777: CALL_OW 337
// PrepareAmerican ;
10781: CALL 3961 0 0
// end ;
10785: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10786: LD_EXP 17
10790: IFFALSE 12554
10792: GO 10794
10794: DISABLE
10795: LD_INT 0
10797: PPUSH
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
// begin PrepareAmericanTrap ;
10804: CALL 4761 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10808: LD_ADDR_VAR 0 2
10812: PUSH
10813: LD_EXP 48
10817: PPUSH
10818: LD_INT 26
10820: PUSH
10821: LD_INT 1
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PPUSH
10828: CALL_OW 72
10832: PUSH
10833: LD_INT 1
10835: ARRAY
10836: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
10837: LD_INT 22
10839: PUSH
10840: LD_INT 3
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 3
10849: PUSH
10850: LD_INT 21
10852: PUSH
10853: LD_INT 3
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 60
10866: PUSH
10867: EMPTY
10868: LIST
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: LIST
10874: PPUSH
10875: CALL_OW 69
10879: PPUSH
10880: CALL_OW 141
// InGameOn ;
10884: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10888: LD_INT 69
10890: PPUSH
10891: LD_INT 22
10893: PPUSH
10894: CALL_OW 86
// wait ( 0 0$1 ) ;
10898: LD_INT 35
10900: PPUSH
10901: CALL_OW 67
// DialogueOn ;
10905: CALL_OW 6
// game_speed := 4 ;
10909: LD_ADDR_OWVAR 65
10913: PUSH
10914: LD_INT 4
10916: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
10917: LD_VAR 0 2
10921: PPUSH
10922: LD_STRING D13-Sol1-1
10924: PPUSH
10925: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
10929: LD_EXP 36
10933: PPUSH
10934: LD_STRING D13-Bel-1
10936: PPUSH
10937: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10941: LD_EXP 38
10945: PPUSH
10946: LD_STRING D13-Kur-1
10948: PPUSH
10949: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10953: LD_INT 10
10955: PPUSH
10956: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10960: LD_EXP 36
10964: PPUSH
10965: LD_STRING D13-Bel-2
10967: PPUSH
10968: CALL_OW 94
// DialogueOff ;
10972: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
10976: LD_EXP 36
10980: PPUSH
10981: LD_INT 76
10983: PPUSH
10984: LD_INT 20
10986: PPUSH
10987: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
10991: LD_EXP 45
10995: PPUSH
10996: LD_INT 72
10998: PPUSH
10999: LD_INT 20
11001: PPUSH
11002: CALL_OW 111
// wait ( 0 0$2 ) ;
11006: LD_INT 70
11008: PPUSH
11009: CALL_OW 67
// for i in usTrapForces do
11013: LD_ADDR_VAR 0 1
11017: PUSH
11018: LD_EXP 48
11022: PUSH
11023: FOR_IN
11024: IFFALSE 11057
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11026: LD_VAR 0 1
11030: PPUSH
11031: LD_INT 7
11033: PPUSH
11034: LD_INT 0
11036: PPUSH
11037: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: LD_EXP 36
11050: PPUSH
11051: CALL_OW 119
// end ;
11055: GO 11023
11057: POP
11058: POP
// wait ( 0 0$0.3 ) ;
11059: LD_INT 10
11061: PPUSH
11062: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11066: LD_EXP 48
11070: PPUSH
11071: LD_INT 65
11073: PPUSH
11074: LD_INT 18
11076: PPUSH
11077: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11081: LD_INT 70
11083: PPUSH
11084: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11088: LD_EXP 48
11092: PPUSH
11093: LD_INT 101
11095: PUSH
11096: LD_INT 3
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PPUSH
11103: CALL_OW 72
11107: PUSH
11108: LD_INT 3
11110: GREATER
11111: IFFALSE 11081
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11113: LD_INT 65
11115: PPUSH
11116: LD_INT 18
11118: PPUSH
11119: LD_INT 3
11121: PPUSH
11122: LD_INT 26
11124: NEG
11125: PPUSH
11126: CALL_OW 330
// DialogueOn ;
11130: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11134: LD_VAR 0 2
11138: PPUSH
11139: LD_STRING D14-Sol1-1
11141: PPUSH
11142: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11146: LD_EXP 36
11150: PPUSH
11151: LD_STRING D14-Bel-1
11153: PPUSH
11154: CALL_OW 88
// DialogueOff ;
11158: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11162: LD_INT 65
11164: PPUSH
11165: LD_INT 18
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11175: LD_EXP 45
11179: PPUSH
11180: LD_INT 31
11182: PPUSH
11183: LD_INT 9
11185: PPUSH
11186: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11190: LD_EXP 48
11194: PPUSH
11195: LD_INT 50
11197: PPUSH
11198: LD_INT 16
11200: PPUSH
11201: CALL_OW 174
// wait ( 0 0$2 ) ;
11205: LD_INT 70
11207: PPUSH
11208: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11212: LD_ADDR_VAR 0 6
11216: PUSH
11217: LD_EXP 36
11221: PPUSH
11222: CALL_OW 310
11226: ST_TO_ADDR
// if not belkovTank then
11227: LD_VAR 0 6
11231: NOT
11232: IFFALSE 11272
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11234: LD_ADDR_VAR 0 6
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_INT 6
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 21
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PPUSH
11263: CALL_OW 69
11267: PUSH
11268: LD_INT 1
11270: ARRAY
11271: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11272: LD_EXP 36
11276: PPUSH
11277: LD_INT 58
11279: PPUSH
11280: LD_INT 21
11282: PPUSH
11283: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11287: LD_EXP 36
11291: PPUSH
11292: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11296: LD_EXP 36
11300: PPUSH
11301: LD_INT 53
11303: PPUSH
11304: LD_INT 18
11306: PPUSH
11307: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11311: LD_EXP 36
11315: PPUSH
11316: LD_INT 31
11318: PPUSH
11319: LD_INT 9
11321: PPUSH
11322: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11326: LD_INT 35
11328: PPUSH
11329: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_EXP 36
11342: PUSH
11343: LD_EXP 45
11347: UNION
11348: PUSH
11349: LD_VAR 0 6
11353: UNION
11354: PUSH
11355: FOR_IN
11356: IFFALSE 11387
// if GetLives ( i ) < 800 then
11358: LD_VAR 0 1
11362: PPUSH
11363: CALL_OW 256
11367: PUSH
11368: LD_INT 800
11370: LESS
11371: IFFALSE 11385
// SetLives ( i , 800 ) ;
11373: LD_VAR 0 1
11377: PPUSH
11378: LD_INT 800
11380: PPUSH
11381: CALL_OW 234
11385: GO 11355
11387: POP
11388: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11389: LD_EXP 36
11393: PPUSH
11394: LD_INT 31
11396: PPUSH
11397: LD_INT 9
11399: PPUSH
11400: CALL_OW 297
11404: PUSH
11405: LD_INT 4
11407: LESS
11408: IFFALSE 11326
// for i := 1 to Difficulty do
11410: LD_ADDR_VAR 0 1
11414: PUSH
11415: DOUBLE
11416: LD_INT 1
11418: DEC
11419: ST_TO_ADDR
11420: LD_OWVAR 67
11424: PUSH
11425: FOR_TO
11426: IFFALSE 11468
// if i <= belkovTeam then
11428: LD_VAR 0 1
11432: PUSH
11433: LD_EXP 45
11437: LESSEQUAL
11438: IFFALSE 11466
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11440: LD_EXP 45
11444: PUSH
11445: LD_VAR 0 1
11449: ARRAY
11450: PPUSH
11451: LD_INT 600
11453: PPUSH
11454: LD_INT 800
11456: PPUSH
11457: CALL_OW 12
11461: PPUSH
11462: CALL_OW 234
11466: GO 11425
11468: POP
11469: POP
// SetLives ( Belkov , 820 ) ;
11470: LD_EXP 36
11474: PPUSH
11475: LD_INT 820
11477: PPUSH
11478: CALL_OW 234
// InGameOff ;
11482: CALL_OW 9
// DialogueOn ;
11486: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11490: LD_EXP 36
11494: PPUSH
11495: LD_STRING D14-Bel-1a
11497: PPUSH
11498: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11502: LD_EXP 38
11506: PPUSH
11507: LD_STRING D14-Kur-1
11509: PPUSH
11510: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11514: LD_EXP 36
11518: PPUSH
11519: LD_STRING D14-Bel-2
11521: PPUSH
11522: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11526: LD_EXP 38
11530: PPUSH
11531: LD_STRING D14-Kur-2
11533: PPUSH
11534: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11538: LD_EXP 34
11542: PPUSH
11543: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11547: LD_EXP 34
11551: PPUSH
11552: LD_STRING D14a-Bur-1
11554: PPUSH
11555: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11559: LD_EXP 40
11563: PPUSH
11564: LD_STRING D14a-Pla-1
11566: PPUSH
11567: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11571: LD_EXP 34
11575: PPUSH
11576: LD_STRING D14a-Bur-2
11578: PPUSH
11579: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11583: LD_EXP 40
11587: PPUSH
11588: LD_STRING D14a-Pla-2
11590: PPUSH
11591: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11595: LD_EXP 34
11599: PPUSH
11600: LD_STRING D14a-Bur-3
11602: PPUSH
11603: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11607: LD_EXP 40
11611: PPUSH
11612: LD_STRING D14a-Pla-3
11614: PPUSH
11615: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11619: LD_EXP 34
11623: PPUSH
11624: LD_STRING D14a-Bur-4
11626: PPUSH
11627: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11631: LD_EXP 40
11635: PPUSH
11636: LD_STRING D14a-Pla-4
11638: PPUSH
11639: CALL_OW 88
// DialogueOff ;
11643: CALL_OW 7
// belkovTrapped := true ;
11647: LD_ADDR_EXP 18
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11655: LD_EXP 48
11659: PPUSH
11660: LD_INT 68
11662: PPUSH
11663: LD_INT 16
11665: PPUSH
11666: CALL_OW 111
// if belkovTank then
11670: LD_VAR 0 6
11674: IFFALSE 11713
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11676: LD_EXP 48
11680: PUSH
11681: LD_INT 1
11683: ARRAY
11684: PPUSH
11685: LD_VAR 0 6
11689: PPUSH
11690: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11694: LD_EXP 48
11698: PUSH
11699: LD_INT 1
11701: ARRAY
11702: PPUSH
11703: LD_INT 69
11705: PPUSH
11706: LD_INT 20
11708: PPUSH
11709: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11713: LD_EXP 36
11717: PPUSH
11718: LD_INT 40
11720: PPUSH
11721: LD_INT 17
11723: PPUSH
11724: CALL_OW 111
// AddComHold ( Belkov ) ;
11728: LD_EXP 36
11732: PPUSH
11733: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11737: LD_ADDR_VAR 0 3
11741: PUSH
11742: LD_INT 44
11744: PUSH
11745: LD_INT 18
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 42
11754: PUSH
11755: LD_INT 16
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 40
11764: PUSH
11765: LD_INT 15
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 44
11774: PUSH
11775: LD_INT 20
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 42
11784: PUSH
11785: LD_INT 20
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 42
11794: PUSH
11795: LD_INT 12
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 42
11804: PUSH
11805: LD_INT 8
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11821: LD_ADDR_VAR 0 1
11825: PUSH
11826: LD_EXP 45
11830: PPUSH
11831: LD_INT 25
11833: PUSH
11834: LD_INT 1
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PPUSH
11841: CALL_OW 72
11845: PUSH
11846: FOR_IN
11847: IFFALSE 11913
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11849: LD_VAR 0 1
11853: PPUSH
11854: LD_VAR 0 3
11858: PUSH
11859: LD_INT 1
11861: ARRAY
11862: PUSH
11863: LD_INT 1
11865: ARRAY
11866: PPUSH
11867: LD_VAR 0 3
11871: PUSH
11872: LD_INT 1
11874: ARRAY
11875: PUSH
11876: LD_INT 2
11878: ARRAY
11879: PPUSH
11880: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11884: LD_ADDR_VAR 0 3
11888: PUSH
11889: LD_VAR 0 3
11893: PPUSH
11894: LD_INT 1
11896: PPUSH
11897: CALL_OW 3
11901: ST_TO_ADDR
// AddComCrawl ( i ) ;
11902: LD_VAR 0 1
11906: PPUSH
11907: CALL_OW 197
// end ;
11911: GO 11846
11913: POP
11914: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11915: LD_EXP 45
11919: PPUSH
11920: LD_INT 25
11922: PUSH
11923: LD_INT 4
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 72
11934: IFFALSE 11966
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11936: LD_EXP 45
11940: PPUSH
11941: LD_INT 25
11943: PUSH
11944: LD_INT 4
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PPUSH
11951: CALL_OW 72
11955: PPUSH
11956: LD_INT 38
11958: PPUSH
11959: LD_INT 18
11961: PPUSH
11962: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
11966: LD_ADDR_VAR 0 7
11970: PUSH
11971: LD_INT 9450
11973: PUSH
11974: LD_INT 8400
11976: PUSH
11977: LD_INT 6650
11979: PUSH
11980: LD_INT 5250
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: PUSH
11989: LD_OWVAR 67
11993: ARRAY
11994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11995: LD_INT 35
11997: PPUSH
11998: CALL_OW 67
// timer := timer - 0 0$1 ;
12002: LD_ADDR_VAR 0 7
12006: PUSH
12007: LD_VAR 0 7
12011: PUSH
12012: LD_INT 35
12014: MINUS
12015: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12016: LD_INT 19
12018: PPUSH
12019: LD_INT 22
12021: PUSH
12022: LD_INT 3
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 70
12033: IFFALSE 12043
// timer := 0 0$0 ;
12035: LD_ADDR_VAR 0 7
12039: PUSH
12040: LD_INT 0
12042: ST_TO_ADDR
// until timer <= 0 ;
12043: LD_VAR 0 7
12047: PUSH
12048: LD_INT 0
12050: LESSEQUAL
12051: IFFALSE 11995
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12053: LD_EXP 48
12057: PPUSH
12058: LD_INT 50
12060: PUSH
12061: EMPTY
12062: LIST
12063: PPUSH
12064: CALL_OW 72
12068: NOT
12069: IFFALSE 12073
// exit ;
12071: GO 12554
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12073: LD_ADDR_VAR 0 4
12077: PUSH
12078: LD_EXP 48
12082: PPUSH
12083: LD_INT 25
12085: PUSH
12086: LD_INT 1
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: LD_INT 54
12098: PUSH
12099: EMPTY
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 72
12114: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12115: LD_ADDR_VAR 0 5
12119: PUSH
12120: LD_EXP 48
12124: PPUSH
12125: LD_INT 25
12127: PUSH
12128: LD_INT 4
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: LD_INT 54
12140: PUSH
12141: EMPTY
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PPUSH
12152: CALL_OW 72
12156: ST_TO_ADDR
// for i in sol do
12157: LD_ADDR_VAR 0 1
12161: PUSH
12162: LD_VAR 0 4
12166: PUSH
12167: FOR_IN
12168: IFFALSE 12184
// SetTag ( i , 0 ) ;
12170: LD_VAR 0 1
12174: PPUSH
12175: LD_INT 0
12177: PPUSH
12178: CALL_OW 109
12182: GO 12167
12184: POP
12185: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12186: LD_VAR 0 5
12190: PPUSH
12191: LD_INT 60
12193: PPUSH
12194: LD_INT 8
12196: PPUSH
12197: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12201: LD_INT 22
12203: PUSH
12204: LD_INT 1
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 21
12213: PUSH
12214: LD_INT 2
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 69
12229: IFFALSE 12270
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12231: LD_INT 22
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 21
12243: PUSH
12244: LD_INT 2
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: PPUSH
12260: LD_INT 53
12262: PPUSH
12263: LD_INT 24
12265: PPUSH
12266: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12270: LD_INT 18
12272: PPUSH
12273: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12277: LD_ADDR_VAR 0 4
12281: PUSH
12282: LD_EXP 48
12286: PPUSH
12287: LD_INT 25
12289: PUSH
12290: LD_INT 1
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 50
12299: PUSH
12300: EMPTY
12301: LIST
12302: PUSH
12303: LD_INT 3
12305: PUSH
12306: LD_INT 54
12308: PUSH
12309: EMPTY
12310: LIST
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: PPUSH
12321: CALL_OW 72
12325: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12326: LD_VAR 0 4
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: CALL 51815 0 2
12338: PUSH
12339: LD_VAR 0 4
12343: EQUAL
12344: IFFALSE 12383
// begin wait ( 0 0$3 ) ;
12346: LD_INT 105
12348: PPUSH
12349: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12353: LD_VAR 0 4
12357: PPUSH
12358: LD_INT 41
12360: PPUSH
12361: LD_INT 18
12363: PPUSH
12364: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12368: LD_VAR 0 5
12372: PPUSH
12373: LD_INT 60
12375: PPUSH
12376: LD_INT 8
12378: PPUSH
12379: CALL_OW 111
// end ; for i in sol do
12383: LD_ADDR_VAR 0 1
12387: PUSH
12388: LD_VAR 0 4
12392: PUSH
12393: FOR_IN
12394: IFFALSE 12469
// if GetLives ( i ) < 800 then
12396: LD_VAR 0 1
12400: PPUSH
12401: CALL_OW 256
12405: PUSH
12406: LD_INT 800
12408: LESS
12409: IFFALSE 12440
// begin SetTag ( i , 1 ) ;
12411: LD_VAR 0 1
12415: PPUSH
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12423: LD_VAR 0 1
12427: PPUSH
12428: LD_INT 60
12430: PPUSH
12431: LD_INT 8
12433: PPUSH
12434: CALL_OW 111
// end else
12438: GO 12467
// if GetLives ( i ) = 1000 then
12440: LD_VAR 0 1
12444: PPUSH
12445: CALL_OW 256
12449: PUSH
12450: LD_INT 1000
12452: EQUAL
12453: IFFALSE 12467
// SetTag ( i , 0 ) ;
12455: LD_VAR 0 1
12459: PPUSH
12460: LD_INT 0
12462: PPUSH
12463: CALL_OW 109
12467: GO 12393
12469: POP
12470: POP
// until belkovDied or not sol ;
12471: LD_EXP 19
12475: PUSH
12476: LD_VAR 0 4
12480: NOT
12481: OR
12482: IFFALSE 12270
// if not sol then
12484: LD_VAR 0 4
12488: NOT
12489: IFFALSE 12493
// exit ;
12491: GO 12554
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12493: LD_VAR 0 4
12497: PUSH
12498: LD_VAR 0 5
12502: ADD
12503: PPUSH
12504: LD_INT 56
12506: PPUSH
12507: LD_INT 25
12509: PPUSH
12510: CALL_OW 111
// wait ( 0 0$30 ) ;
12514: LD_INT 1050
12516: PPUSH
12517: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12521: LD_EXP 48
12525: PPUSH
12526: LD_INT 66
12528: PPUSH
12529: LD_INT 96
12531: PPUSH
12532: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12536: LD_VAR 0 5
12540: PPUSH
12541: LD_VAR 0 4
12545: PUSH
12546: LD_INT 1
12548: ARRAY
12549: PPUSH
12550: CALL_OW 112
// end ;
12554: PPOPN 7
12556: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12557: LD_EXP 18
12561: PUSH
12562: LD_EXP 19
12566: NOT
12567: AND
12568: PUSH
12569: LD_INT 9
12571: PPUSH
12572: LD_INT 22
12574: PUSH
12575: LD_INT 3
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PPUSH
12582: CALL_OW 70
12586: AND
12587: IFFALSE 12907
12589: GO 12591
12591: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12592: LD_STRING QAttackAm
12594: PPUSH
12595: CALL_OW 97
12599: PUSH
12600: LD_INT 1
12602: DOUBLE
12603: EQUAL
12604: IFTRUE 12608
12606: GO 12675
12608: POP
// begin initiative := true ;
12609: LD_ADDR_EXP 31
12613: PUSH
12614: LD_INT 1
12616: ST_TO_ADDR
// DialogueOn ;
12617: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12621: LD_EXP 34
12625: PPUSH
12626: LD_STRING D17-Bur-1
12628: PPUSH
12629: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12633: LD_EXP 40
12637: PPUSH
12638: LD_STRING D17-Pla-1
12640: PPUSH
12641: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12645: LD_EXP 34
12649: PPUSH
12650: LD_STRING D17-Bur-2
12652: PPUSH
12653: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12657: LD_EXP 40
12661: PPUSH
12662: LD_STRING D17-Pla-2
12664: PPUSH
12665: CALL_OW 94
// DialogueOff ;
12669: CALL_OW 7
// end ; 2 :
12673: GO 12837
12675: LD_INT 2
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12775
12683: POP
// begin initiative := true ;
12684: LD_ADDR_EXP 31
12688: PUSH
12689: LD_INT 1
12691: ST_TO_ADDR
// DialogueOn ;
12692: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12696: LD_EXP 34
12700: PPUSH
12701: LD_STRING D18-Bur-1
12703: PPUSH
12704: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12708: LD_EXP 40
12712: PPUSH
12713: LD_STRING D18-Pla-1
12715: PPUSH
12716: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12720: LD_EXP 34
12724: PPUSH
12725: LD_STRING D18-Bur-2
12727: PPUSH
12728: CALL_OW 88
// if not reinforcementsGained then
12732: LD_EXP 25
12736: NOT
12737: IFFALSE 12757
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12739: LD_EXP 40
12743: PPUSH
12744: LD_STRING D18-Pla-2
12746: PPUSH
12747: CALL_OW 94
// SendReinforcements ;
12751: CALL 3302 0 0
// end else
12755: GO 12769
// SayRadio ( Platonov , D22-Pla-1b ) ;
12757: LD_EXP 40
12761: PPUSH
12762: LD_STRING D22-Pla-1b
12764: PPUSH
12765: CALL_OW 94
// DialogueOff ;
12769: CALL_OW 7
// end ; 3 :
12773: GO 12837
12775: LD_INT 3
12777: DOUBLE
12778: EQUAL
12779: IFTRUE 12783
12781: GO 12836
12783: POP
// begin if IsOk ( Gnyevko ) then
12784: LD_EXP 35
12788: PPUSH
12789: CALL_OW 302
12793: IFFALSE 12809
// Say ( Gnyevko , D19A-Gny-1 ) else
12795: LD_EXP 35
12799: PPUSH
12800: LD_STRING D19A-Gny-1
12802: PPUSH
12803: CALL_OW 88
12807: GO 12832
// if IsOk ( Kovalyuk ) then
12809: LD_EXP 39
12813: PPUSH
12814: CALL_OW 302
12818: IFFALSE 12832
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12820: LD_EXP 39
12824: PPUSH
12825: LD_STRING D19A-Kov-1
12827: PPUSH
12828: CALL_OW 88
// exit ;
12832: GO 12907
// end ; end ;
12834: GO 12837
12836: POP
// if IsOk ( Gnyevko ) then
12837: LD_EXP 35
12841: PPUSH
12842: CALL_OW 302
12846: IFFALSE 12872
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12848: LD_EXP 35
12852: PPUSH
12853: LD_STRING D19-Gny-1
12855: PPUSH
12856: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12860: LD_EXP 34
12864: PPUSH
12865: LD_STRING D19-Bur-1
12867: PPUSH
12868: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12872: LD_EXP 39
12876: PPUSH
12877: CALL_OW 302
12881: IFFALSE 12907
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12883: LD_EXP 39
12887: PPUSH
12888: LD_STRING D19-Kov-1
12890: PPUSH
12891: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12895: LD_EXP 34
12899: PPUSH
12900: LD_STRING D19-Bur-2
12902: PPUSH
12903: CALL_OW 88
// end ; end ;
12907: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12908: LD_EXP 18
12912: PUSH
12913: LD_EXP 19
12917: NOT
12918: AND
12919: PUSH
12920: LD_INT 16
12922: PPUSH
12923: LD_INT 22
12925: PUSH
12926: LD_INT 3
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PPUSH
12933: CALL_OW 70
12937: AND
12938: IFFALSE 13166
12940: GO 12942
12942: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12943: LD_STRING QAttackBw
12945: PPUSH
12946: CALL_OW 97
12950: PUSH
12951: LD_INT 1
12953: DOUBLE
12954: EQUAL
12955: IFTRUE 12959
12957: GO 13002
12959: POP
// begin initiative := true ;
12960: LD_ADDR_EXP 31
12964: PUSH
12965: LD_INT 1
12967: ST_TO_ADDR
// DialogueOn ;
12968: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12972: LD_EXP 34
12976: PPUSH
12977: LD_STRING D21-Bur-1
12979: PPUSH
12980: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12984: LD_EXP 40
12988: PPUSH
12989: LD_STRING D21-Pla-1
12991: PPUSH
12992: CALL_OW 94
// DialogueOff ;
12996: CALL_OW 7
// end ; 2 :
13000: GO 13117
13002: LD_INT 2
13004: DOUBLE
13005: EQUAL
13006: IFTRUE 13010
13008: GO 13105
13010: POP
// begin initiative := true ;
13011: LD_ADDR_EXP 31
13015: PUSH
13016: LD_INT 1
13018: ST_TO_ADDR
// DialogueOn ;
13019: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13023: LD_EXP 34
13027: PPUSH
13028: LD_STRING D22-Bur-1
13030: PPUSH
13031: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13035: LD_EXP 25
13039: NOT
13040: PUSH
13041: LD_EXP 22
13045: AND
13046: IFFALSE 13066
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13048: LD_EXP 40
13052: PPUSH
13053: LD_STRING D22-Pla-1
13055: PPUSH
13056: CALL_OW 94
// SendReinforcements ;
13060: CALL 3302 0 0
// end else
13064: GO 13099
// if not westOutpostDestroyed then
13066: LD_EXP 22
13070: NOT
13071: IFFALSE 13087
// SayRadio ( Platonov , D22-Pla-1a ) else
13073: LD_EXP 40
13077: PPUSH
13078: LD_STRING D22-Pla-1a
13080: PPUSH
13081: CALL_OW 94
13085: GO 13099
// SayRadio ( Platonov , D22-Pla-1b ) ;
13087: LD_EXP 40
13091: PPUSH
13092: LD_STRING D22-Pla-1b
13094: PPUSH
13095: CALL_OW 94
// DialogueOff ;
13099: CALL_OW 7
// end ; 3 :
13103: GO 13117
13105: LD_INT 3
13107: DOUBLE
13108: EQUAL
13109: IFTRUE 13113
13111: GO 13116
13113: POP
// begin end ; end ;
13114: GO 13117
13116: POP
// ChangeMissionObjectives ( M9 ) ;
13117: LD_STRING M9
13119: PPUSH
13120: CALL_OW 337
// wait ( 0 0$1 ) ;
13124: LD_INT 35
13126: PPUSH
13127: CALL_OW 67
// if IsOk ( Gnyevko ) then
13131: LD_EXP 35
13135: PPUSH
13136: CALL_OW 302
13140: IFFALSE 13166
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13142: LD_EXP 35
13146: PPUSH
13147: LD_STRING D23-Gny-1
13149: PPUSH
13150: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13154: LD_EXP 34
13158: PPUSH
13159: LD_STRING D23-Bur-1
13161: PPUSH
13162: CALL_OW 88
// end ; end ;
13166: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13167: LD_EXP 18
13171: PUSH
13172: LD_EXP 19
13176: AND
13177: PUSH
13178: LD_EXP 28
13182: NOT
13183: AND
13184: PUSH
13185: LD_EXP 45
13189: PPUSH
13190: LD_INT 91
13192: PUSH
13193: LD_EXP 34
13197: PUSH
13198: LD_INT 8
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 72
13210: AND
13211: IFFALSE 13255
13213: GO 13215
13215: DISABLE
13216: LD_INT 0
13218: PPUSH
// begin for i in belkovTeam do
13219: LD_ADDR_VAR 0 1
13223: PUSH
13224: LD_EXP 45
13228: PUSH
13229: FOR_IN
13230: IFFALSE 13246
// SetSide ( i , 3 ) ;
13232: LD_VAR 0 1
13236: PPUSH
13237: LD_INT 3
13239: PPUSH
13240: CALL_OW 235
13244: GO 13229
13246: POP
13247: POP
// ChangeMissionObjectives ( M9a ) ;
13248: LD_STRING M9a
13250: PPUSH
13251: CALL_OW 337
// end ;
13255: PPOPN 1
13257: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13258: LD_EXP 34
13262: PPUSH
13263: LD_EXP 36
13267: PPUSH
13268: CALL_OW 296
13272: PUSH
13273: LD_INT 6
13275: LESS
13276: PUSH
13277: LD_EXP 18
13281: AND
13282: PUSH
13283: LD_EXP 36
13287: PPUSH
13288: CALL_OW 302
13292: AND
13293: PUSH
13294: LD_INT 3
13296: PPUSH
13297: CALL_OW 463
13301: NOT
13302: AND
13303: IFFALSE 13618
13305: GO 13307
13307: DISABLE
13308: LD_INT 0
13310: PPUSH
13311: PPUSH
// begin InGameOn ;
13312: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13316: LD_EXP 34
13320: PPUSH
13321: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13325: LD_EXP 34
13329: PPUSH
13330: LD_INT 37
13332: PPUSH
13333: LD_INT 17
13335: PPUSH
13336: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13340: LD_EXP 34
13344: PPUSH
13345: LD_EXP 36
13349: PPUSH
13350: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13354: LD_EXP 36
13358: PPUSH
13359: LD_EXP 34
13363: PPUSH
13364: CALL_OW 119
// p := 0 ;
13368: LD_ADDR_VAR 0 2
13372: PUSH
13373: LD_INT 0
13375: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13376: LD_INT 35
13378: PPUSH
13379: CALL_OW 67
// p := p + 1 ;
13383: LD_ADDR_VAR 0 2
13387: PUSH
13388: LD_VAR 0 2
13392: PUSH
13393: LD_INT 1
13395: PLUS
13396: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13397: LD_EXP 34
13401: PPUSH
13402: LD_EXP 36
13406: PPUSH
13407: CALL_OW 296
13411: PUSH
13412: LD_INT 4
13414: LESS
13415: PUSH
13416: LD_VAR 0 2
13420: PUSH
13421: LD_INT 6
13423: GREATER
13424: OR
13425: IFFALSE 13376
// ComTurnUnit ( Burlak , Belkov ) ;
13427: LD_EXP 34
13431: PPUSH
13432: LD_EXP 36
13436: PPUSH
13437: CALL_OW 119
// DialogueOn ;
13441: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13445: LD_EXP 36
13449: PPUSH
13450: LD_STRING D24-Bel-1
13452: PPUSH
13453: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13457: LD_EXP 34
13461: PPUSH
13462: LD_STRING D24-Bur-1
13464: PPUSH
13465: CALL_OW 88
// if belkovBrother then
13469: LD_EXP 32
13473: IFFALSE 13487
// Say ( Burlak , D24-Bur-1a ) ;
13475: LD_EXP 34
13479: PPUSH
13480: LD_STRING D24-Bur-1a
13482: PPUSH
13483: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13487: LD_EXP 36
13491: PPUSH
13492: LD_STRING D24-Bel-2
13494: PPUSH
13495: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13499: LD_EXP 34
13503: PPUSH
13504: LD_STRING D24-Bur-2
13506: PPUSH
13507: CALL_OW 88
// if vehCaptured then
13511: LD_EXP 16
13515: IFFALSE 13529
// Say ( Burlak , D24-Bur-2a ) ;
13517: LD_EXP 34
13521: PPUSH
13522: LD_STRING D24-Bur-2a
13524: PPUSH
13525: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13529: LD_EXP 40
13533: PPUSH
13534: LD_STRING D24-Pla-2
13536: PPUSH
13537: CALL_OW 94
// if not westOutpostDestroyed then
13541: LD_EXP 22
13545: NOT
13546: IFFALSE 13560
// SayRadio ( Platonov , D24-Pla-2a ) ;
13548: LD_EXP 40
13552: PPUSH
13553: LD_STRING D24-Pla-2a
13555: PPUSH
13556: CALL_OW 94
// DialogueOff ;
13560: CALL_OW 7
// InGameOff ;
13564: CALL_OW 9
// belkovSaved := true ;
13568: LD_ADDR_EXP 28
13572: PUSH
13573: LD_INT 1
13575: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_EXP 45
13585: PUSH
13586: LD_EXP 36
13590: UNION
13591: PUSH
13592: FOR_IN
13593: IFFALSE 13609
// SetSide ( i , 3 ) ;
13595: LD_VAR 0 1
13599: PPUSH
13600: LD_INT 3
13602: PPUSH
13603: CALL_OW 235
13607: GO 13592
13609: POP
13610: POP
// ChangeMissionObjectives ( M9a ) ;
13611: LD_STRING M9a
13613: PPUSH
13614: CALL_OW 337
// end ;
13618: PPOPN 2
13620: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13621: LD_INT 3
13623: PPUSH
13624: LD_INT 22
13626: PUSH
13627: LD_INT 1
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 95
13636: PUSH
13637: LD_INT 8
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 69
13652: PPUSH
13653: CALL 57506 0 2
13657: IFFALSE 13842
13659: GO 13661
13661: DISABLE
// begin DialogueOn ;
13662: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13666: LD_INT 49
13668: PPUSH
13669: LD_INT 57
13671: PPUSH
13672: LD_INT 3
13674: PPUSH
13675: LD_INT 12
13677: NEG
13678: PPUSH
13679: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13683: LD_INT 49
13685: PPUSH
13686: LD_INT 57
13688: PPUSH
13689: LD_INT 3
13691: PPUSH
13692: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13696: LD_INT 49
13698: PPUSH
13699: LD_INT 57
13701: PPUSH
13702: CALL_OW 84
// if not eastOutpostDiscovered then
13706: LD_EXP 21
13710: NOT
13711: IFFALSE 13751
// begin Say ( Burlak , D15-Bur-1 ) ;
13713: LD_EXP 34
13717: PPUSH
13718: LD_STRING D15-Bur-1
13720: PPUSH
13721: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13725: LD_EXP 35
13729: PPUSH
13730: LD_STRING D15-Gny-1
13732: PPUSH
13733: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13737: LD_EXP 39
13741: PPUSH
13742: LD_STRING D15-Kov-1
13744: PPUSH
13745: CALL_OW 88
// end else
13749: GO 13787
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13751: LD_EXP 39
13755: PPUSH
13756: LD_STRING D16-Kov-1
13758: PPUSH
13759: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13763: LD_EXP 34
13767: PPUSH
13768: LD_STRING D16-Bur-1
13770: PPUSH
13771: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13775: LD_EXP 35
13779: PPUSH
13780: LD_STRING D16-Gny-1
13782: PPUSH
13783: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13787: LD_EXP 34
13791: PPUSH
13792: LD_STRING D15-Bur-2
13794: PPUSH
13795: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13799: LD_EXP 39
13803: PPUSH
13804: LD_STRING D15-Kov-2
13806: PPUSH
13807: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13811: LD_EXP 34
13815: PPUSH
13816: LD_STRING D15-Bur-3
13818: PPUSH
13819: CALL_OW 88
// DialogueOff ;
13823: CALL_OW 7
// westOutpostDiscovered := true ;
13827: LD_ADDR_EXP 20
13831: PUSH
13832: LD_INT 1
13834: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13835: LD_STRING M7
13837: PPUSH
13838: CALL_OW 337
// end ;
13842: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13843: LD_INT 3
13845: PPUSH
13846: LD_INT 22
13848: PUSH
13849: LD_INT 1
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 95
13858: PUSH
13859: LD_INT 15
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PPUSH
13870: CALL_OW 69
13874: PPUSH
13875: CALL 57506 0 2
13879: IFFALSE 14020
13881: GO 13883
13883: DISABLE
// begin DialogueOn ;
13884: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13888: LD_INT 95
13890: PPUSH
13891: LD_INT 65
13893: PPUSH
13894: LD_INT 3
13896: PPUSH
13897: LD_INT 12
13899: NEG
13900: PPUSH
13901: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13905: LD_INT 95
13907: PPUSH
13908: LD_INT 65
13910: PPUSH
13911: LD_INT 3
13913: PPUSH
13914: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13918: LD_INT 95
13920: PPUSH
13921: LD_INT 65
13923: PPUSH
13924: CALL_OW 84
// if westOutpostDiscovered then
13928: LD_EXP 20
13932: IFFALSE 13972
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13934: LD_EXP 39
13938: PPUSH
13939: LD_STRING D16-Kov-1
13941: PPUSH
13942: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13946: LD_EXP 34
13950: PPUSH
13951: LD_STRING D16-Bur-1
13953: PPUSH
13954: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13958: LD_EXP 35
13962: PPUSH
13963: LD_STRING D16-Gny-1
13965: PPUSH
13966: CALL_OW 88
// end else
13970: GO 14008
// begin Say ( Burlak , D15-Bur-1 ) ;
13972: LD_EXP 34
13976: PPUSH
13977: LD_STRING D15-Bur-1
13979: PPUSH
13980: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13984: LD_EXP 35
13988: PPUSH
13989: LD_STRING D15-Gny-1
13991: PPUSH
13992: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13996: LD_EXP 39
14000: PPUSH
14001: LD_STRING D15-Kov-1
14003: PPUSH
14004: CALL_OW 88
// end ; DialogueOff ;
14008: CALL_OW 7
// eastOutpostDiscovered := true ;
14012: LD_ADDR_EXP 21
14016: PUSH
14017: LD_INT 1
14019: ST_TO_ADDR
// end ;
14020: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14021: LD_INT 8
14023: PPUSH
14024: LD_INT 22
14026: PUSH
14027: LD_INT 1
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 50
14036: PUSH
14037: EMPTY
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 70
14048: PUSH
14049: LD_INT 0
14051: EQUAL
14052: PUSH
14053: LD_EXP 20
14057: AND
14058: IFFALSE 14102
14060: GO 14062
14062: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14063: LD_EXP 34
14067: PPUSH
14068: LD_STRING D20-Bur-1
14070: PPUSH
14071: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14075: LD_EXP 40
14079: PPUSH
14080: LD_STRING D20-Pla-1
14082: PPUSH
14083: CALL_OW 94
// westOutpostDestroyed := true ;
14087: LD_ADDR_EXP 22
14091: PUSH
14092: LD_INT 1
14094: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14095: LD_STRING M8
14097: PPUSH
14098: CALL_OW 337
// end ;
14102: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14103: LD_INT 15
14105: PPUSH
14106: LD_INT 22
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 50
14118: PUSH
14119: EMPTY
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PPUSH
14126: CALL_OW 70
14130: PUSH
14131: LD_INT 0
14133: EQUAL
14134: PUSH
14135: LD_EXP 21
14139: AND
14140: IFFALSE 14270
14142: GO 14144
14144: DISABLE
14145: LD_INT 0
14147: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14148: LD_EXP 34
14152: PPUSH
14153: LD_STRING D20-Bur-1
14155: PPUSH
14156: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14160: LD_EXP 40
14164: PPUSH
14165: LD_STRING D20-Pla-1
14167: PPUSH
14168: CALL_OW 94
// eastOutpostDestroyed := true ;
14172: LD_ADDR_EXP 23
14176: PUSH
14177: LD_INT 1
14179: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14180: LD_INT 35
14182: PPUSH
14183: CALL_OW 67
// stop_talking := true ;
14187: LD_ADDR_OWVAR 56
14191: PUSH
14192: LD_INT 1
14194: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14195: LD_ADDR_VAR 0 1
14199: PUSH
14200: LD_INT 22
14202: PUSH
14203: LD_INT 3
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 23
14212: PUSH
14213: LD_INT 3
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 21
14222: PUSH
14223: LD_INT 1
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: LIST
14234: PPUSH
14235: CALL_OW 69
14239: PUSH
14240: FOR_IN
14241: IFFALSE 14260
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14243: LD_VAR 0 1
14247: PPUSH
14248: LD_INT 1
14250: PPUSH
14251: LD_INT 1500
14253: PPUSH
14254: CALL_OW 591
14258: GO 14240
14260: POP
14261: POP
// stop_talking := false ;
14262: LD_ADDR_OWVAR 56
14266: PUSH
14267: LD_INT 0
14269: ST_TO_ADDR
// end ;
14270: PPOPN 1
14272: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14273: LD_INT 19
14275: PPUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PPUSH
14300: CALL_OW 70
14304: IFFALSE 14412
14306: GO 14308
14308: DISABLE
// begin DialogueOn ;
14309: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14313: LD_INT 19
14315: PPUSH
14316: LD_INT 22
14318: PUSH
14319: LD_INT 3
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 21
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PPUSH
14340: CALL_OW 70
14344: PPUSH
14345: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14349: LD_EXP 34
14353: PPUSH
14354: LD_STRING D26-Bur-1
14356: PPUSH
14357: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14361: LD_EXP 39
14365: PPUSH
14366: LD_STRING D26-Kov-1
14368: PPUSH
14369: CALL_OW 88
// if IsOk ( Gnyevko ) then
14373: LD_EXP 35
14377: PPUSH
14378: CALL_OW 302
14382: IFFALSE 14408
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14384: LD_EXP 35
14388: PPUSH
14389: LD_STRING D26-Gny-1
14391: PPUSH
14392: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14396: LD_EXP 34
14400: PPUSH
14401: LD_STRING D26-Bur-2
14403: PPUSH
14404: CALL_OW 88
// end ; DialogueOff ;
14408: CALL_OW 7
// end ;
14412: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14413: LD_EXP 21
14417: PUSH
14418: LD_EXP 23
14422: NOT
14423: AND
14424: PUSH
14425: LD_INT 17
14427: PPUSH
14428: LD_INT 22
14430: PUSH
14431: LD_INT 3
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 3
14440: PUSH
14441: LD_INT 24
14443: PUSH
14444: LD_INT 1000
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 70
14463: PUSH
14464: LD_INT 1
14466: GREATER
14467: AND
14468: IFFALSE 14531
14470: GO 14472
14472: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14473: LD_EXP 35
14477: PPUSH
14478: LD_STRING D16A-Gny-1
14480: PPUSH
14481: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D16A-Kov-1
14492: PPUSH
14493: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14497: LD_EXP 35
14501: PPUSH
14502: CALL_OW 302
14506: PUSH
14507: LD_EXP 39
14511: PPUSH
14512: CALL_OW 302
14516: OR
14517: IFFALSE 14531
// Say ( Burlak , D16A-Bur-1 ) ;
14519: LD_EXP 34
14523: PPUSH
14524: LD_STRING D16A-Bur-1
14526: PPUSH
14527: CALL_OW 88
// end ;
14531: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14532: LD_INT 3
14534: PPUSH
14535: LD_INT 9
14537: PPUSH
14538: CALL_OW 294
14542: IFFALSE 14555
14544: GO 14546
14546: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14547: LD_ADDR_EXP 24
14551: PUSH
14552: LD_INT 1
14554: ST_TO_ADDR
// end ;
14555: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14556: LD_INT 3
14558: PPUSH
14559: LD_INT 10
14561: PPUSH
14562: CALL_OW 294
14566: IFFALSE 14586
14568: GO 14570
14570: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14571: LD_ADDR_EXP 27
14575: PUSH
14576: LD_EXP 27
14580: PPUSH
14581: CALL 55594 0 1
14585: ST_TO_ADDR
14586: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14587: LD_INT 3
14589: PPUSH
14590: LD_INT 11
14592: PPUSH
14593: CALL_OW 294
14597: IFFALSE 14617
14599: GO 14601
14601: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14602: LD_ADDR_EXP 27
14606: PUSH
14607: LD_EXP 27
14611: PPUSH
14612: CALL 55594 0 1
14616: ST_TO_ADDR
14617: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14618: LD_INT 3
14620: PPUSH
14621: LD_INT 12
14623: PPUSH
14624: CALL_OW 294
14628: IFFALSE 14648
14630: GO 14632
14632: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14633: LD_ADDR_EXP 27
14637: PUSH
14638: LD_EXP 27
14642: PPUSH
14643: CALL 55594 0 1
14647: ST_TO_ADDR
14648: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14649: LD_INT 3
14651: PPUSH
14652: LD_INT 13
14654: PPUSH
14655: CALL_OW 294
14659: IFFALSE 14679
14661: GO 14663
14663: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14664: LD_ADDR_EXP 27
14668: PUSH
14669: LD_EXP 27
14673: PPUSH
14674: CALL 55594 0 1
14678: ST_TO_ADDR
14679: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14680: LD_INT 3
14682: PPUSH
14683: LD_INT 14
14685: PPUSH
14686: CALL_OW 294
14690: IFFALSE 14710
14692: GO 14694
14694: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14695: LD_ADDR_EXP 27
14699: PUSH
14700: LD_EXP 27
14704: PPUSH
14705: CALL 55594 0 1
14709: ST_TO_ADDR
14710: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14711: LD_EXP 27
14715: PUSH
14716: LD_INT 5
14718: GREATEREQUAL
14719: PUSH
14720: LD_EXP 14
14724: AND
14725: IFFALSE 14745
14727: GO 14729
14729: DISABLE
// begin allMapPointsSpotted := true ;
14730: LD_ADDR_EXP 26
14734: PUSH
14735: LD_INT 1
14737: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14738: LD_STRING M10
14740: PPUSH
14741: CALL_OW 337
// end ;
14745: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14746: LD_EXP 26
14750: PUSH
14751: LD_EXP 22
14755: AND
14756: IFFALSE 14768
14758: GO 14760
14760: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14761: LD_STRING M10a
14763: PPUSH
14764: CALL_OW 337
// end ;
14768: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14769: LD_EXP 14
14773: IFFALSE 15406
14775: GO 14777
14777: DISABLE
14778: LD_INT 0
14780: PPUSH
14781: PPUSH
14782: PPUSH
14783: PPUSH
14784: PPUSH
// begin wasOutsideBeria := false ;
14785: LD_ADDR_VAR 0 3
14789: PUSH
14790: LD_INT 0
14792: ST_TO_ADDR
// wantToTalk := false ;
14793: LD_ADDR_VAR 0 2
14797: PUSH
14798: LD_INT 0
14800: ST_TO_ADDR
// westOutpostReported := false ;
14801: LD_ADDR_VAR 0 4
14805: PUSH
14806: LD_INT 0
14808: ST_TO_ADDR
// eastOutpostReported := false ;
14809: LD_ADDR_VAR 0 5
14813: PUSH
14814: LD_INT 0
14816: ST_TO_ADDR
// timer := 0 0$0 ;
14817: LD_ADDR_VAR 0 1
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14825: LD_INT 70
14827: PPUSH
14828: CALL_OW 67
// timer := timer + 0 0$2 ;
14832: LD_ADDR_VAR 0 1
14836: PUSH
14837: LD_VAR 0 1
14841: PUSH
14842: LD_INT 70
14844: PLUS
14845: ST_TO_ADDR
// if timer >= 0 0$30 then
14846: LD_VAR 0 1
14850: PUSH
14851: LD_INT 1050
14853: GREATEREQUAL
14854: IFFALSE 14864
// wantToTalk := true ;
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: LD_INT 1
14863: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 then
14864: LD_EXP 34
14868: PPUSH
14869: LD_EXP 40
14873: PPUSH
14874: CALL_OW 296
14878: PUSH
14879: LD_INT 9
14881: GREATER
14882: IFFALSE 14892
// wasOutsideBeria := true ;
14884: LD_ADDR_VAR 0 3
14888: PUSH
14889: LD_INT 1
14891: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14892: LD_VAR 0 2
14896: PUSH
14897: LD_VAR 0 3
14901: AND
14902: PUSH
14903: LD_EXP 34
14907: PPUSH
14908: LD_EXP 40
14912: PPUSH
14913: CALL_OW 296
14917: PUSH
14918: LD_INT 8
14920: LESS
14921: PUSH
14922: LD_EXP 34
14926: PPUSH
14927: CALL_OW 310
14931: PPUSH
14932: LD_EXP 40
14936: PPUSH
14937: CALL_OW 296
14941: PUSH
14942: LD_INT 8
14944: LESS
14945: OR
14946: AND
14947: IFFALSE 15295
// begin timer := 0 0$0 ;
14949: LD_ADDR_VAR 0 1
14953: PUSH
14954: LD_INT 0
14956: ST_TO_ADDR
// wantToTalk := false ;
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 0
14964: ST_TO_ADDR
// wasOutsideBeria := false ;
14965: LD_ADDR_VAR 0 3
14969: PUSH
14970: LD_INT 0
14972: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
14973: LD_EXP 40
14977: PPUSH
14978: CALL_OW 87
// DialogueOn ;
14982: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
14986: LD_EXP 40
14990: PPUSH
14991: LD_STRING D25-Pla-1
14993: PPUSH
14994: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
14998: LD_VAR 0 4
15002: NOT
15003: PUSH
15004: LD_VAR 0 5
15008: NOT
15009: AND
15010: PUSH
15011: LD_EXP 20
15015: AND
15016: PUSH
15017: LD_EXP 21
15021: AND
15022: IFFALSE 15102
// begin westOutpostReported := true ;
15024: LD_ADDR_VAR 0 4
15028: PUSH
15029: LD_INT 1
15031: ST_TO_ADDR
// eastOutpostReported := true ;
15032: LD_ADDR_VAR 0 5
15036: PUSH
15037: LD_INT 1
15039: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15040: LD_EXP 34
15044: PPUSH
15045: LD_STRING D25-Bur-1
15047: PPUSH
15048: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15052: LD_EXP 24
15056: PUSH
15057: LD_EXP 22
15061: NOT
15062: AND
15063: IFFALSE 15100
// begin Say ( Burlak , D25b-Bur-1 ) ;
15065: LD_EXP 34
15069: PPUSH
15070: LD_STRING D25b-Bur-1
15072: PPUSH
15073: CALL_OW 88
// if not reinforcementsGained then
15077: LD_EXP 25
15081: NOT
15082: IFFALSE 15100
// begin Say ( Platonov , D25b-Pla-1 ) ;
15084: LD_EXP 40
15088: PPUSH
15089: LD_STRING D25b-Pla-1
15091: PPUSH
15092: CALL_OW 88
// SendReinforcements ( ) ;
15096: CALL 3302 0 0
// end ; end ; end else
15100: GO 15291
// if not westOutpostReported and westOutpostDiscovered then
15102: LD_VAR 0 4
15106: NOT
15107: PUSH
15108: LD_EXP 20
15112: AND
15113: IFFALSE 15185
// begin westOutpostReported := true ;
15115: LD_ADDR_VAR 0 4
15119: PUSH
15120: LD_INT 1
15122: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15123: LD_EXP 34
15127: PPUSH
15128: LD_STRING D25a-Bur-1b
15130: PPUSH
15131: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15135: LD_EXP 24
15139: PUSH
15140: LD_EXP 22
15144: NOT
15145: AND
15146: IFFALSE 15183
// begin Say ( Burlak , D25b-Bur-1 ) ;
15148: LD_EXP 34
15152: PPUSH
15153: LD_STRING D25b-Bur-1
15155: PPUSH
15156: CALL_OW 88
// if not reinforcementsGained then
15160: LD_EXP 25
15164: NOT
15165: IFFALSE 15183
// begin Say ( Platonov , D25b-Pla-1 ) ;
15167: LD_EXP 40
15171: PPUSH
15172: LD_STRING D25b-Pla-1
15174: PPUSH
15175: CALL_OW 88
// SendReinforcements ( ) ;
15179: CALL 3302 0 0
// end ; end ; end else
15183: GO 15291
// if not eastOutpostReported and eastOutpostDiscovered then
15185: LD_VAR 0 5
15189: NOT
15190: PUSH
15191: LD_EXP 21
15195: AND
15196: IFFALSE 15220
// begin eastOutpostReported := true ;
15198: LD_ADDR_VAR 0 5
15202: PUSH
15203: LD_INT 1
15205: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15206: LD_EXP 34
15210: PPUSH
15211: LD_STRING D25a-Bur-1a
15213: PPUSH
15214: CALL_OW 88
// end else
15218: GO 15291
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15220: LD_EXP 20
15224: NOT
15225: PUSH
15226: LD_EXP 21
15230: NOT
15231: OR
15232: IFFALSE 15260
// begin Say ( Burlak , D25a-Bur-1 ) ;
15234: LD_EXP 34
15238: PPUSH
15239: LD_STRING D25a-Bur-1
15241: PPUSH
15242: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15246: LD_EXP 40
15250: PPUSH
15251: LD_STRING D25c-Pla-1
15253: PPUSH
15254: CALL_OW 88
// end else
15258: GO 15291
// if not allMapPointsSpotted then
15260: LD_EXP 26
15264: NOT
15265: IFFALSE 15291
// begin Say ( Burlak , D25a-Bur-1 ) ;
15267: LD_EXP 34
15271: PPUSH
15272: LD_STRING D25a-Bur-1
15274: PPUSH
15275: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15279: LD_EXP 40
15283: PPUSH
15284: LD_STRING D25c-Pla-1a
15286: PPUSH
15287: CALL_OW 88
// end ; DialogueOff ;
15291: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15295: LD_EXP 26
15299: PUSH
15300: LD_EXP 22
15304: AND
15305: IFFALSE 14825
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15307: LD_INT 22
15309: PUSH
15310: LD_INT 3
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 21
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 91
15329: PUSH
15330: LD_EXP 40
15334: PUSH
15335: LD_INT 10
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: PPUSH
15348: CALL_OW 69
15352: IFFALSE 15395
// begin if not belkovDied and not belkovSaved then
15354: LD_EXP 19
15358: NOT
15359: PUSH
15360: LD_EXP 28
15364: NOT
15365: AND
15366: IFFALSE 15389
// begin if Query ( QContMission ) = 1 then
15368: LD_STRING QContMission
15370: PPUSH
15371: CALL_OW 97
15375: PUSH
15376: LD_INT 1
15378: EQUAL
15379: IFFALSE 15387
// begin EndMission ;
15381: CALL 15409 0 0
// exit ;
15385: GO 15406
// end ; end else
15387: GO 15395
// begin EndMission ;
15389: CALL 15409 0 0
// exit ;
15393: GO 15406
// end ; end ; wait ( 0 0$10 ) ;
15395: LD_INT 350
15397: PPUSH
15398: CALL_OW 67
// until false ;
15402: LD_INT 0
15404: IFFALSE 15307
// end ;
15406: PPOPN 5
15408: END
// function EndMission ; var i , tmp ; begin
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// if initiative then
15414: LD_EXP 31
15418: IFFALSE 15432
// AddMedal ( Initiative , 1 ) else
15420: LD_STRING Initiative
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: CALL_OW 101
15430: GO 15463
// if not eastOutpostDestroyed then
15432: LD_EXP 23
15436: NOT
15437: IFFALSE 15452
// AddMedal ( Initiative , - 2 ) else
15439: LD_STRING Initiative
15441: PPUSH
15442: LD_INT 2
15444: NEG
15445: PPUSH
15446: CALL_OW 101
15450: GO 15463
// AddMedal ( Initiative , - 1 ) ;
15452: LD_STRING Initiative
15454: PPUSH
15455: LD_INT 1
15457: NEG
15458: PPUSH
15459: CALL_OW 101
// if not belkovDied and belkovSaved then
15463: LD_EXP 19
15467: NOT
15468: PUSH
15469: LD_EXP 28
15473: AND
15474: IFFALSE 15488
// AddMedal ( Belkov , 1 ) else
15476: LD_STRING Belkov
15478: PPUSH
15479: LD_INT 1
15481: PPUSH
15482: CALL_OW 101
15486: GO 15583
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15488: LD_EXP 45
15492: PPUSH
15493: LD_INT 22
15495: PUSH
15496: LD_INT 3
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PPUSH
15503: CALL_OW 72
15507: IFFALSE 15521
// AddMedal ( Belkov , 2 ) else
15509: LD_STRING Belkov
15511: PPUSH
15512: LD_INT 2
15514: PPUSH
15515: CALL_OW 101
15519: GO 15583
// if belkovDied then
15521: LD_EXP 19
15525: IFFALSE 15540
// AddMedal ( Belkov , - 1 ) else
15527: LD_STRING Belkov
15529: PPUSH
15530: LD_INT 1
15532: NEG
15533: PPUSH
15534: CALL_OW 101
15538: GO 15583
// if not belkovSaved then
15540: LD_EXP 28
15544: NOT
15545: IFFALSE 15560
// AddMedal ( Belkov , - 2 ) else
15547: LD_STRING Belkov
15549: PPUSH
15550: LD_INT 2
15552: NEG
15553: PPUSH
15554: CALL_OW 101
15558: GO 15583
// if belkovDied and belkovSaved then
15560: LD_EXP 19
15564: PUSH
15565: LD_EXP 28
15569: AND
15570: IFFALSE 15583
// AddMedal ( Belkov , - 3 ) ;
15572: LD_STRING Belkov
15574: PPUSH
15575: LD_INT 3
15577: NEG
15578: PPUSH
15579: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15583: LD_EXP 30
15587: PUSH
15588: LD_INT 0
15590: EQUAL
15591: IFFALSE 15605
// AddMedal ( NoLosses , 1 ) else
15593: LD_STRING NoLosses
15595: PPUSH
15596: LD_INT 1
15598: PPUSH
15599: CALL_OW 101
15603: GO 15616
// AddMedal ( NoLosses , - 1 ) ;
15605: LD_STRING NoLosses
15607: PPUSH
15608: LD_INT 1
15610: NEG
15611: PPUSH
15612: CALL_OW 101
// GiveMedals ( Main ) ;
15616: LD_STRING Main
15618: PPUSH
15619: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15623: LD_INT 22
15625: PUSH
15626: LD_INT 3
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 23
15635: PUSH
15636: LD_INT 3
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 21
15645: PUSH
15646: LD_INT 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 69
15662: PPUSH
15663: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15667: LD_EXP 34
15671: PPUSH
15672: LD_EXP 3
15676: PUSH
15677: LD_STRING Burlak
15679: STR
15680: PPUSH
15681: CALL_OW 38
// if IsLive ( Gnyevko ) then
15685: LD_EXP 35
15689: PPUSH
15690: CALL_OW 300
15694: IFFALSE 15714
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15696: LD_EXP 35
15700: PPUSH
15701: LD_EXP 3
15705: PUSH
15706: LD_STRING Gnyevko
15708: STR
15709: PPUSH
15710: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15714: LD_EXP 39
15718: PPUSH
15719: CALL_OW 300
15723: IFFALSE 15743
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15725: LD_EXP 39
15729: PPUSH
15730: LD_EXP 3
15734: PUSH
15735: LD_STRING Kovalyuk
15737: STR
15738: PPUSH
15739: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15743: LD_EXP 36
15747: PPUSH
15748: CALL_OW 300
15752: PUSH
15753: LD_EXP 28
15757: AND
15758: IFFALSE 15778
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15760: LD_EXP 36
15764: PPUSH
15765: LD_EXP 3
15769: PUSH
15770: LD_STRING Belkov
15772: STR
15773: PPUSH
15774: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15778: LD_EXP 37
15782: PPUSH
15783: CALL_OW 300
15787: IFFALSE 15807
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15789: LD_EXP 37
15793: PPUSH
15794: LD_EXP 3
15798: PUSH
15799: LD_STRING Kirilenkova
15801: STR
15802: PPUSH
15803: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15807: LD_INT 22
15809: PUSH
15810: LD_INT 3
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 23
15819: PUSH
15820: LD_INT 3
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 21
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 69
15846: PUSH
15847: LD_EXP 34
15851: PUSH
15852: LD_EXP 35
15856: PUSH
15857: LD_EXP 39
15861: PUSH
15862: LD_EXP 36
15866: PUSH
15867: LD_EXP 37
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: DIFF
15879: PPUSH
15880: LD_EXP 3
15884: PUSH
15885: LD_STRING burlakTeam
15887: STR
15888: PPUSH
15889: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15893: LD_INT 22
15895: PUSH
15896: LD_INT 6
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 23
15905: PUSH
15906: LD_INT 3
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 21
15915: PUSH
15916: LD_INT 1
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 69
15932: PUSH
15933: LD_EXP 40
15937: PUSH
15938: LD_EXP 38
15942: PUSH
15943: LD_EXP 36
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: LD_EXP 45
15957: UNION
15958: DIFF
15959: PPUSH
15960: LD_EXP 3
15964: PUSH
15965: LD_STRING kirovTeam
15967: STR
15968: PPUSH
15969: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
15973: LD_EXP 23
15977: PPUSH
15978: LD_STRING 02_EasternOutpostDestroyed
15980: PPUSH
15981: CALL_OW 39
// tmp := [ ] ;
15985: LD_ADDR_VAR 0 3
15989: PUSH
15990: EMPTY
15991: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
15992: LD_ADDR_VAR 0 2
15996: PUSH
15997: LD_INT 22
15999: PUSH
16000: LD_INT 3
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 21
16009: PUSH
16010: LD_INT 3
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PPUSH
16021: CALL_OW 69
16025: PUSH
16026: FOR_IN
16027: IFFALSE 16103
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16029: LD_ADDR_VAR 0 3
16033: PUSH
16034: LD_VAR 0 3
16038: PPUSH
16039: LD_VAR 0 2
16043: PPUSH
16044: CALL_OW 266
16048: PUSH
16049: LD_VAR 0 2
16053: PPUSH
16054: CALL_OW 267
16058: PUSH
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL_OW 250
16068: PUSH
16069: LD_VAR 0 2
16073: PPUSH
16074: CALL_OW 251
16078: PUSH
16079: LD_VAR 0 2
16083: PPUSH
16084: CALL_OW 254
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL 54233 0 2
16100: ST_TO_ADDR
16101: GO 16026
16103: POP
16104: POP
// SaveVariable ( tmp , 02_Beria ) ;
16105: LD_VAR 0 3
16109: PPUSH
16110: LD_STRING 02_Beria
16112: PPUSH
16113: CALL_OW 39
// tmp := [ ] ;
16117: LD_ADDR_VAR 0 3
16121: PUSH
16122: EMPTY
16123: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16124: LD_ADDR_VAR 0 2
16128: PUSH
16129: LD_INT 22
16131: PUSH
16132: LD_INT 6
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 21
16141: PUSH
16142: LD_INT 3
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PPUSH
16153: CALL_OW 69
16157: PUSH
16158: FOR_IN
16159: IFFALSE 16235
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16161: LD_ADDR_VAR 0 3
16165: PUSH
16166: LD_VAR 0 3
16170: PPUSH
16171: LD_VAR 0 2
16175: PPUSH
16176: CALL_OW 266
16180: PUSH
16181: LD_VAR 0 2
16185: PPUSH
16186: CALL_OW 267
16190: PUSH
16191: LD_VAR 0 2
16195: PPUSH
16196: CALL_OW 250
16200: PUSH
16201: LD_VAR 0 2
16205: PPUSH
16206: CALL_OW 251
16210: PUSH
16211: LD_VAR 0 2
16215: PPUSH
16216: CALL_OW 254
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL 54233 0 2
16232: ST_TO_ADDR
16233: GO 16158
16235: POP
16236: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_STRING 02_Kirov
16244: PPUSH
16245: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16249: LD_INT 22
16251: PUSH
16252: LD_INT 3
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PPUSH
16273: CALL_OW 69
16277: PPUSH
16278: CALL 19034 0 1
16282: PPUSH
16283: LD_STRING 02_VehiclesCount
16285: PPUSH
16286: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16290: LD_INT 22
16292: PUSH
16293: LD_INT 6
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 21
16302: PUSH
16303: LD_INT 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PPUSH
16314: CALL_OW 69
16318: PPUSH
16319: CALL 19034 0 1
16323: PPUSH
16324: LD_STRING 02_KirovVehiclesCount
16326: PPUSH
16327: CALL_OW 39
// YouWin ;
16331: CALL_OW 103
// end ; end_of_file
16335: LD_VAR 0 1
16339: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16340: LD_INT 420
16342: PPUSH
16343: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16347: LD_VAR 0 2
16351: PPUSH
16352: LD_VAR 0 3
16356: PPUSH
16357: CALL 8000 0 2
// end ;
16361: PPOPN 5
16363: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16364: LD_VAR 0 1
16368: PPUSH
16369: CALL 74329 0 1
// if un = Burlak then
16373: LD_VAR 0 1
16377: PUSH
16378: LD_EXP 34
16382: EQUAL
16383: IFFALSE 16392
// YouLost ( Burlak ) ;
16385: LD_STRING Burlak
16387: PPUSH
16388: CALL_OW 104
// if un = Platonov then
16392: LD_VAR 0 1
16396: PUSH
16397: LD_EXP 40
16401: EQUAL
16402: IFFALSE 16411
// YouLost ( Platonov ) ;
16404: LD_STRING Platonov
16406: PPUSH
16407: CALL_OW 104
// if un = Kurin then
16411: LD_VAR 0 1
16415: PUSH
16416: LD_EXP 38
16420: EQUAL
16421: IFFALSE 16430
// YouLost ( Kurin ) ;
16423: LD_STRING Kurin
16425: PPUSH
16426: CALL_OW 104
// if un = Belkov then
16430: LD_VAR 0 1
16434: PUSH
16435: LD_EXP 36
16439: EQUAL
16440: IFFALSE 16450
// belkovDied := true ;
16442: LD_ADDR_EXP 19
16446: PUSH
16447: LD_INT 1
16449: ST_TO_ADDR
// if un in belkovTeam then
16450: LD_VAR 0 1
16454: PUSH
16455: LD_EXP 45
16459: IN
16460: IFFALSE 16493
// begin belkovTeam := belkovTeam diff un ;
16462: LD_ADDR_EXP 45
16466: PUSH
16467: LD_EXP 45
16471: PUSH
16472: LD_VAR 0 1
16476: DIFF
16477: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16478: LD_ADDR_EXP 29
16482: PUSH
16483: LD_EXP 29
16487: PPUSH
16488: CALL 55594 0 1
16492: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16493: LD_VAR 0 1
16497: PUSH
16498: LD_INT 22
16500: PUSH
16501: LD_INT 3
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 21
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 23
16520: PUSH
16521: LD_INT 3
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: PPUSH
16533: CALL_OW 69
16537: IN
16538: IFFALSE 16555
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16540: LD_ADDR_EXP 30
16544: PUSH
16545: LD_EXP 30
16549: PPUSH
16550: CALL 55594 0 1
16554: ST_TO_ADDR
// if un in usWestForces then
16555: LD_VAR 0 1
16559: PUSH
16560: LD_EXP 46
16564: IN
16565: IFFALSE 16583
// usWestForces := usWestForces diff un ;
16567: LD_ADDR_EXP 46
16571: PUSH
16572: LD_EXP 46
16576: PUSH
16577: LD_VAR 0 1
16581: DIFF
16582: ST_TO_ADDR
// if un in usEastForces then
16583: LD_VAR 0 1
16587: PUSH
16588: LD_EXP 47
16592: IN
16593: IFFALSE 16611
// usEastForces := usEastForces diff un ;
16595: LD_ADDR_EXP 47
16599: PUSH
16600: LD_EXP 47
16604: PUSH
16605: LD_VAR 0 1
16609: DIFF
16610: ST_TO_ADDR
// end ;
16611: PPOPN 1
16613: END
// on BuildingComplete ( b ) do var mech ;
16614: LD_INT 0
16616: PPUSH
// begin if GetSide ( b ) = 3 then
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 255
16626: PUSH
16627: LD_INT 3
16629: EQUAL
16630: IFFALSE 16689
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16632: LD_VAR 0 1
16636: PPUSH
16637: CALL_OW 266
16641: PUSH
16642: LD_INT 6
16644: PUSH
16645: LD_INT 7
16647: PUSH
16648: LD_INT 8
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: IN
16656: IFFALSE 16666
// hasLab := true ;
16658: LD_ADDR_EXP 9
16662: PUSH
16663: LD_INT 1
16665: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 266
16675: PUSH
16676: LD_INT 2
16678: EQUAL
16679: IFFALSE 16689
// hasWorkshop := true ;
16681: LD_ADDR_EXP 10
16685: PUSH
16686: LD_INT 1
16688: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 255
16698: PUSH
16699: LD_INT 6
16701: EQUAL
16702: IFFALSE 16776
// begin if GetBType ( b ) = b_workshop then
16704: LD_VAR 0 1
16708: PPUSH
16709: CALL_OW 266
16713: PUSH
16714: LD_INT 2
16716: EQUAL
16717: IFFALSE 16776
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16719: LD_ADDR_VAR 0 2
16723: PUSH
16724: LD_EXP 43
16728: PPUSH
16729: LD_INT 25
16731: PUSH
16732: LD_INT 3
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PPUSH
16739: CALL_OW 72
16743: ST_TO_ADDR
// if not mech then
16744: LD_VAR 0 2
16748: NOT
16749: IFFALSE 16753
// exit ;
16751: GO 16776
// ComExit ( mech ) ;
16753: LD_VAR 0 2
16757: PPUSH
16758: CALL 54631 0 1
// AddComEnterUnit ( mech , b ) ;
16762: LD_VAR 0 2
16766: PPUSH
16767: LD_VAR 0 1
16771: PPUSH
16772: CALL_OW 180
// end ; end ; end ;
16776: PPOPN 2
16778: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16779: LD_VAR 0 1
16783: PPUSH
16784: LD_VAR 0 2
16788: PPUSH
16789: CALL 74449 0 2
// if GetSide ( vehicle ) = 3 then
16793: LD_VAR 0 1
16797: PPUSH
16798: CALL_OW 255
16802: PUSH
16803: LD_INT 3
16805: EQUAL
16806: IFFALSE 16831
// begin hasTank := true ;
16808: LD_ADDR_EXP 12
16812: PUSH
16813: LD_INT 1
16815: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16816: LD_ADDR_EXP 15
16820: PUSH
16821: LD_EXP 15
16825: PPUSH
16826: CALL 55594 0 1
16830: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16831: LD_VAR 0 1
16835: PPUSH
16836: CALL_OW 255
16840: PUSH
16841: LD_INT 6
16843: EQUAL
16844: IFFALSE 16855
// KirovAttack ( vehicle ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: CALL 3608 0 1
// end ;
16855: PPOPN 2
16857: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16858: LD_VAR 0 1
16862: PUSH
16863: LD_EXP 33
16867: EQUAL
16868: IFFALSE 16874
// BelkovAttackScript ;
16870: CALL 1673 0 0
// end ;
16874: PPOPN 1
16876: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16877: LD_INT 0
16879: PPUSH
// begin if side = 1 then
16880: LD_VAR 0 3
16884: PUSH
16885: LD_INT 1
16887: EQUAL
16888: IFFALSE 16898
// vehCaptured := true ;
16890: LD_ADDR_EXP 16
16894: PUSH
16895: LD_INT 1
16897: ST_TO_ADDR
// end ;
16898: PPOPN 5
16900: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16901: LD_VAR 0 1
16905: PUSH
16906: LD_INT 3
16908: EQUAL
16909: PUSH
16910: LD_VAR 0 2
16914: PUSH
16915: LD_INT 6
16917: EQUAL
16918: AND
16919: IFFALSE 16929
// allianceAttacked := true ;
16921: LD_ADDR_EXP 13
16925: PUSH
16926: LD_INT 1
16928: ST_TO_ADDR
// end ; end_of_file
16929: PPOPN 2
16931: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16932: LD_INT 0
16934: PPUSH
16935: PPUSH
// if exist_mode then
16936: LD_VAR 0 2
16940: IFFALSE 16965
// unit := CreateCharacter ( prefix & ident ) else
16942: LD_ADDR_VAR 0 5
16946: PUSH
16947: LD_VAR 0 3
16951: PUSH
16952: LD_VAR 0 1
16956: STR
16957: PPUSH
16958: CALL_OW 34
16962: ST_TO_ADDR
16963: GO 16980
// unit := NewCharacter ( ident ) ;
16965: LD_ADDR_VAR 0 5
16969: PUSH
16970: LD_VAR 0 1
16974: PPUSH
16975: CALL_OW 25
16979: ST_TO_ADDR
// result := unit ;
16980: LD_ADDR_VAR 0 4
16984: PUSH
16985: LD_VAR 0 5
16989: ST_TO_ADDR
// end ;
16990: LD_VAR 0 4
16994: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16995: LD_INT 0
16997: PPUSH
16998: PPUSH
// if not side or not nation then
16999: LD_VAR 0 1
17003: NOT
17004: PUSH
17005: LD_VAR 0 2
17009: NOT
17010: OR
17011: IFFALSE 17015
// exit ;
17013: GO 17783
// case nation of nation_american :
17015: LD_VAR 0 2
17019: PUSH
17020: LD_INT 1
17022: DOUBLE
17023: EQUAL
17024: IFTRUE 17028
17026: GO 17242
17028: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17029: LD_ADDR_VAR 0 4
17033: PUSH
17034: LD_INT 35
17036: PUSH
17037: LD_INT 45
17039: PUSH
17040: LD_INT 46
17042: PUSH
17043: LD_INT 47
17045: PUSH
17046: LD_INT 82
17048: PUSH
17049: LD_INT 83
17051: PUSH
17052: LD_INT 84
17054: PUSH
17055: LD_INT 85
17057: PUSH
17058: LD_INT 86
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: LD_INT 2
17066: PUSH
17067: LD_INT 6
17069: PUSH
17070: LD_INT 15
17072: PUSH
17073: LD_INT 16
17075: PUSH
17076: LD_INT 7
17078: PUSH
17079: LD_INT 12
17081: PUSH
17082: LD_INT 13
17084: PUSH
17085: LD_INT 10
17087: PUSH
17088: LD_INT 14
17090: PUSH
17091: LD_INT 20
17093: PUSH
17094: LD_INT 21
17096: PUSH
17097: LD_INT 22
17099: PUSH
17100: LD_INT 25
17102: PUSH
17103: LD_INT 32
17105: PUSH
17106: LD_INT 27
17108: PUSH
17109: LD_INT 36
17111: PUSH
17112: LD_INT 69
17114: PUSH
17115: LD_INT 39
17117: PUSH
17118: LD_INT 34
17120: PUSH
17121: LD_INT 40
17123: PUSH
17124: LD_INT 48
17126: PUSH
17127: LD_INT 49
17129: PUSH
17130: LD_INT 50
17132: PUSH
17133: LD_INT 51
17135: PUSH
17136: LD_INT 52
17138: PUSH
17139: LD_INT 53
17141: PUSH
17142: LD_INT 54
17144: PUSH
17145: LD_INT 55
17147: PUSH
17148: LD_INT 56
17150: PUSH
17151: LD_INT 57
17153: PUSH
17154: LD_INT 58
17156: PUSH
17157: LD_INT 59
17159: PUSH
17160: LD_INT 60
17162: PUSH
17163: LD_INT 61
17165: PUSH
17166: LD_INT 62
17168: PUSH
17169: LD_INT 80
17171: PUSH
17172: LD_INT 82
17174: PUSH
17175: LD_INT 83
17177: PUSH
17178: LD_INT 84
17180: PUSH
17181: LD_INT 85
17183: PUSH
17184: LD_INT 86
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: ST_TO_ADDR
17240: GO 17707
17242: LD_INT 2
17244: DOUBLE
17245: EQUAL
17246: IFTRUE 17250
17248: GO 17476
17250: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17251: LD_ADDR_VAR 0 4
17255: PUSH
17256: LD_INT 35
17258: PUSH
17259: LD_INT 45
17261: PUSH
17262: LD_INT 46
17264: PUSH
17265: LD_INT 47
17267: PUSH
17268: LD_INT 82
17270: PUSH
17271: LD_INT 83
17273: PUSH
17274: LD_INT 84
17276: PUSH
17277: LD_INT 85
17279: PUSH
17280: LD_INT 87
17282: PUSH
17283: LD_INT 70
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 11
17291: PUSH
17292: LD_INT 3
17294: PUSH
17295: LD_INT 4
17297: PUSH
17298: LD_INT 5
17300: PUSH
17301: LD_INT 6
17303: PUSH
17304: LD_INT 15
17306: PUSH
17307: LD_INT 18
17309: PUSH
17310: LD_INT 7
17312: PUSH
17313: LD_INT 17
17315: PUSH
17316: LD_INT 8
17318: PUSH
17319: LD_INT 20
17321: PUSH
17322: LD_INT 21
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_INT 72
17330: PUSH
17331: LD_INT 26
17333: PUSH
17334: LD_INT 69
17336: PUSH
17337: LD_INT 39
17339: PUSH
17340: LD_INT 40
17342: PUSH
17343: LD_INT 41
17345: PUSH
17346: LD_INT 42
17348: PUSH
17349: LD_INT 43
17351: PUSH
17352: LD_INT 48
17354: PUSH
17355: LD_INT 49
17357: PUSH
17358: LD_INT 50
17360: PUSH
17361: LD_INT 51
17363: PUSH
17364: LD_INT 52
17366: PUSH
17367: LD_INT 53
17369: PUSH
17370: LD_INT 54
17372: PUSH
17373: LD_INT 55
17375: PUSH
17376: LD_INT 56
17378: PUSH
17379: LD_INT 60
17381: PUSH
17382: LD_INT 61
17384: PUSH
17385: LD_INT 62
17387: PUSH
17388: LD_INT 66
17390: PUSH
17391: LD_INT 67
17393: PUSH
17394: LD_INT 68
17396: PUSH
17397: LD_INT 81
17399: PUSH
17400: LD_INT 82
17402: PUSH
17403: LD_INT 83
17405: PUSH
17406: LD_INT 84
17408: PUSH
17409: LD_INT 85
17411: PUSH
17412: LD_INT 87
17414: PUSH
17415: LD_INT 88
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: ST_TO_ADDR
17474: GO 17707
17476: LD_INT 3
17478: DOUBLE
17479: EQUAL
17480: IFTRUE 17484
17482: GO 17706
17484: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17485: LD_ADDR_VAR 0 4
17489: PUSH
17490: LD_INT 46
17492: PUSH
17493: LD_INT 47
17495: PUSH
17496: LD_INT 1
17498: PUSH
17499: LD_INT 2
17501: PUSH
17502: LD_INT 82
17504: PUSH
17505: LD_INT 83
17507: PUSH
17508: LD_INT 84
17510: PUSH
17511: LD_INT 85
17513: PUSH
17514: LD_INT 86
17516: PUSH
17517: LD_INT 11
17519: PUSH
17520: LD_INT 9
17522: PUSH
17523: LD_INT 20
17525: PUSH
17526: LD_INT 19
17528: PUSH
17529: LD_INT 21
17531: PUSH
17532: LD_INT 24
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_INT 25
17540: PUSH
17541: LD_INT 28
17543: PUSH
17544: LD_INT 29
17546: PUSH
17547: LD_INT 30
17549: PUSH
17550: LD_INT 31
17552: PUSH
17553: LD_INT 37
17555: PUSH
17556: LD_INT 38
17558: PUSH
17559: LD_INT 32
17561: PUSH
17562: LD_INT 27
17564: PUSH
17565: LD_INT 33
17567: PUSH
17568: LD_INT 69
17570: PUSH
17571: LD_INT 39
17573: PUSH
17574: LD_INT 34
17576: PUSH
17577: LD_INT 40
17579: PUSH
17580: LD_INT 71
17582: PUSH
17583: LD_INT 23
17585: PUSH
17586: LD_INT 44
17588: PUSH
17589: LD_INT 48
17591: PUSH
17592: LD_INT 49
17594: PUSH
17595: LD_INT 50
17597: PUSH
17598: LD_INT 51
17600: PUSH
17601: LD_INT 52
17603: PUSH
17604: LD_INT 53
17606: PUSH
17607: LD_INT 54
17609: PUSH
17610: LD_INT 55
17612: PUSH
17613: LD_INT 56
17615: PUSH
17616: LD_INT 57
17618: PUSH
17619: LD_INT 58
17621: PUSH
17622: LD_INT 59
17624: PUSH
17625: LD_INT 63
17627: PUSH
17628: LD_INT 64
17630: PUSH
17631: LD_INT 65
17633: PUSH
17634: LD_INT 82
17636: PUSH
17637: LD_INT 83
17639: PUSH
17640: LD_INT 84
17642: PUSH
17643: LD_INT 85
17645: PUSH
17646: LD_INT 86
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: ST_TO_ADDR
17704: GO 17707
17706: POP
// if state > - 1 and state < 3 then
17707: LD_VAR 0 3
17711: PUSH
17712: LD_INT 1
17714: NEG
17715: GREATER
17716: PUSH
17717: LD_VAR 0 3
17721: PUSH
17722: LD_INT 3
17724: LESS
17725: AND
17726: IFFALSE 17783
// for i in result do
17728: LD_ADDR_VAR 0 5
17732: PUSH
17733: LD_VAR 0 4
17737: PUSH
17738: FOR_IN
17739: IFFALSE 17781
// if GetTech ( i , side ) <> state then
17741: LD_VAR 0 5
17745: PPUSH
17746: LD_VAR 0 1
17750: PPUSH
17751: CALL_OW 321
17755: PUSH
17756: LD_VAR 0 3
17760: NONEQUAL
17761: IFFALSE 17779
// result := result diff i ;
17763: LD_ADDR_VAR 0 4
17767: PUSH
17768: LD_VAR 0 4
17772: PUSH
17773: LD_VAR 0 5
17777: DIFF
17778: ST_TO_ADDR
17779: GO 17738
17781: POP
17782: POP
// end ;
17783: LD_VAR 0 4
17787: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17788: LD_INT 0
17790: PPUSH
17791: PPUSH
17792: PPUSH
// result := true ;
17793: LD_ADDR_VAR 0 3
17797: PUSH
17798: LD_INT 1
17800: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17801: LD_ADDR_VAR 0 5
17805: PUSH
17806: LD_VAR 0 2
17810: PPUSH
17811: CALL_OW 480
17815: ST_TO_ADDR
// if not tmp then
17816: LD_VAR 0 5
17820: NOT
17821: IFFALSE 17825
// exit ;
17823: GO 17874
// for i in tmp do
17825: LD_ADDR_VAR 0 4
17829: PUSH
17830: LD_VAR 0 5
17834: PUSH
17835: FOR_IN
17836: IFFALSE 17872
// if GetTech ( i , side ) <> state_researched then
17838: LD_VAR 0 4
17842: PPUSH
17843: LD_VAR 0 1
17847: PPUSH
17848: CALL_OW 321
17852: PUSH
17853: LD_INT 2
17855: NONEQUAL
17856: IFFALSE 17870
// begin result := false ;
17858: LD_ADDR_VAR 0 3
17862: PUSH
17863: LD_INT 0
17865: ST_TO_ADDR
// exit ;
17866: POP
17867: POP
17868: GO 17874
// end ;
17870: GO 17835
17872: POP
17873: POP
// end ;
17874: LD_VAR 0 3
17878: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
17886: PPUSH
17887: PPUSH
17888: PPUSH
17889: PPUSH
17890: PPUSH
17891: PPUSH
17892: PPUSH
17893: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17894: LD_VAR 0 1
17898: NOT
17899: PUSH
17900: LD_VAR 0 1
17904: PPUSH
17905: CALL_OW 257
17909: PUSH
17910: LD_INT 9
17912: NONEQUAL
17913: OR
17914: IFFALSE 17918
// exit ;
17916: GO 18491
// side := GetSide ( unit ) ;
17918: LD_ADDR_VAR 0 9
17922: PUSH
17923: LD_VAR 0 1
17927: PPUSH
17928: CALL_OW 255
17932: ST_TO_ADDR
// tech_space := tech_spacanom ;
17933: LD_ADDR_VAR 0 12
17937: PUSH
17938: LD_INT 29
17940: ST_TO_ADDR
// tech_time := tech_taurad ;
17941: LD_ADDR_VAR 0 13
17945: PUSH
17946: LD_INT 28
17948: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17949: LD_ADDR_VAR 0 11
17953: PUSH
17954: LD_VAR 0 1
17958: PPUSH
17959: CALL_OW 310
17963: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17964: LD_VAR 0 11
17968: PPUSH
17969: CALL_OW 247
17973: PUSH
17974: LD_INT 2
17976: EQUAL
17977: IFFALSE 17981
// exit ;
17979: GO 18491
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17981: LD_ADDR_VAR 0 8
17985: PUSH
17986: LD_INT 81
17988: PUSH
17989: LD_VAR 0 9
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: LD_INT 21
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PPUSH
18019: CALL_OW 69
18023: ST_TO_ADDR
// if not tmp then
18024: LD_VAR 0 8
18028: NOT
18029: IFFALSE 18033
// exit ;
18031: GO 18491
// if in_unit then
18033: LD_VAR 0 11
18037: IFFALSE 18061
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18039: LD_ADDR_VAR 0 10
18043: PUSH
18044: LD_VAR 0 8
18048: PPUSH
18049: LD_VAR 0 11
18053: PPUSH
18054: CALL_OW 74
18058: ST_TO_ADDR
18059: GO 18081
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18061: LD_ADDR_VAR 0 10
18065: PUSH
18066: LD_VAR 0 8
18070: PPUSH
18071: LD_VAR 0 1
18075: PPUSH
18076: CALL_OW 74
18080: ST_TO_ADDR
// if not enemy then
18081: LD_VAR 0 10
18085: NOT
18086: IFFALSE 18090
// exit ;
18088: GO 18491
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18090: LD_VAR 0 11
18094: PUSH
18095: LD_VAR 0 11
18099: PPUSH
18100: LD_VAR 0 10
18104: PPUSH
18105: CALL_OW 296
18109: PUSH
18110: LD_INT 13
18112: GREATER
18113: AND
18114: PUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: LD_VAR 0 10
18124: PPUSH
18125: CALL_OW 296
18129: PUSH
18130: LD_INT 12
18132: GREATER
18133: OR
18134: IFFALSE 18138
// exit ;
18136: GO 18491
// missile := [ 1 ] ;
18138: LD_ADDR_VAR 0 14
18142: PUSH
18143: LD_INT 1
18145: PUSH
18146: EMPTY
18147: LIST
18148: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18149: LD_VAR 0 9
18153: PPUSH
18154: LD_VAR 0 12
18158: PPUSH
18159: CALL_OW 325
18163: IFFALSE 18192
// missile := Replace ( missile , missile + 1 , 2 ) ;
18165: LD_ADDR_VAR 0 14
18169: PUSH
18170: LD_VAR 0 14
18174: PPUSH
18175: LD_VAR 0 14
18179: PUSH
18180: LD_INT 1
18182: PLUS
18183: PPUSH
18184: LD_INT 2
18186: PPUSH
18187: CALL_OW 1
18191: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18192: LD_VAR 0 9
18196: PPUSH
18197: LD_VAR 0 13
18201: PPUSH
18202: CALL_OW 325
18206: PUSH
18207: LD_VAR 0 10
18211: PPUSH
18212: CALL_OW 255
18216: PPUSH
18217: LD_VAR 0 13
18221: PPUSH
18222: CALL_OW 325
18226: NOT
18227: AND
18228: IFFALSE 18257
// missile := Replace ( missile , missile + 1 , 3 ) ;
18230: LD_ADDR_VAR 0 14
18234: PUSH
18235: LD_VAR 0 14
18239: PPUSH
18240: LD_VAR 0 14
18244: PUSH
18245: LD_INT 1
18247: PLUS
18248: PPUSH
18249: LD_INT 3
18251: PPUSH
18252: CALL_OW 1
18256: ST_TO_ADDR
// if missile < 2 then
18257: LD_VAR 0 14
18261: PUSH
18262: LD_INT 2
18264: LESS
18265: IFFALSE 18269
// exit ;
18267: GO 18491
// x := GetX ( enemy ) ;
18269: LD_ADDR_VAR 0 4
18273: PUSH
18274: LD_VAR 0 10
18278: PPUSH
18279: CALL_OW 250
18283: ST_TO_ADDR
// y := GetY ( enemy ) ;
18284: LD_ADDR_VAR 0 5
18288: PUSH
18289: LD_VAR 0 10
18293: PPUSH
18294: CALL_OW 251
18298: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18299: LD_ADDR_VAR 0 6
18303: PUSH
18304: LD_VAR 0 4
18308: PUSH
18309: LD_INT 1
18311: NEG
18312: PPUSH
18313: LD_INT 1
18315: PPUSH
18316: CALL_OW 12
18320: PLUS
18321: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18322: LD_ADDR_VAR 0 7
18326: PUSH
18327: LD_VAR 0 5
18331: PUSH
18332: LD_INT 1
18334: NEG
18335: PPUSH
18336: LD_INT 1
18338: PPUSH
18339: CALL_OW 12
18343: PLUS
18344: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18345: LD_VAR 0 6
18349: PPUSH
18350: LD_VAR 0 7
18354: PPUSH
18355: CALL_OW 488
18359: NOT
18360: IFFALSE 18382
// begin _x := x ;
18362: LD_ADDR_VAR 0 6
18366: PUSH
18367: LD_VAR 0 4
18371: ST_TO_ADDR
// _y := y ;
18372: LD_ADDR_VAR 0 7
18376: PUSH
18377: LD_VAR 0 5
18381: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18382: LD_ADDR_VAR 0 3
18386: PUSH
18387: LD_INT 1
18389: PPUSH
18390: LD_VAR 0 14
18394: PPUSH
18395: CALL_OW 12
18399: ST_TO_ADDR
// case i of 1 :
18400: LD_VAR 0 3
18404: PUSH
18405: LD_INT 1
18407: DOUBLE
18408: EQUAL
18409: IFTRUE 18413
18411: GO 18430
18413: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18414: LD_VAR 0 1
18418: PPUSH
18419: LD_VAR 0 10
18423: PPUSH
18424: CALL_OW 115
18428: GO 18491
18430: LD_INT 2
18432: DOUBLE
18433: EQUAL
18434: IFTRUE 18438
18436: GO 18460
18438: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18439: LD_VAR 0 1
18443: PPUSH
18444: LD_VAR 0 6
18448: PPUSH
18449: LD_VAR 0 7
18453: PPUSH
18454: CALL_OW 153
18458: GO 18491
18460: LD_INT 3
18462: DOUBLE
18463: EQUAL
18464: IFTRUE 18468
18466: GO 18490
18468: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18469: LD_VAR 0 1
18473: PPUSH
18474: LD_VAR 0 6
18478: PPUSH
18479: LD_VAR 0 7
18483: PPUSH
18484: CALL_OW 154
18488: GO 18491
18490: POP
// end ;
18491: LD_VAR 0 2
18495: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18496: LD_INT 0
18498: PPUSH
18499: PPUSH
18500: PPUSH
18501: PPUSH
18502: PPUSH
18503: PPUSH
// if not unit or not building then
18504: LD_VAR 0 1
18508: NOT
18509: PUSH
18510: LD_VAR 0 2
18514: NOT
18515: OR
18516: IFFALSE 18520
// exit ;
18518: GO 18678
// x := GetX ( building ) ;
18520: LD_ADDR_VAR 0 5
18524: PUSH
18525: LD_VAR 0 2
18529: PPUSH
18530: CALL_OW 250
18534: ST_TO_ADDR
// y := GetY ( building ) ;
18535: LD_ADDR_VAR 0 6
18539: PUSH
18540: LD_VAR 0 2
18544: PPUSH
18545: CALL_OW 251
18549: ST_TO_ADDR
// for i = 0 to 5 do
18550: LD_ADDR_VAR 0 4
18554: PUSH
18555: DOUBLE
18556: LD_INT 0
18558: DEC
18559: ST_TO_ADDR
18560: LD_INT 5
18562: PUSH
18563: FOR_TO
18564: IFFALSE 18676
// begin _x := ShiftX ( x , i , 3 ) ;
18566: LD_ADDR_VAR 0 7
18570: PUSH
18571: LD_VAR 0 5
18575: PPUSH
18576: LD_VAR 0 4
18580: PPUSH
18581: LD_INT 3
18583: PPUSH
18584: CALL_OW 272
18588: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18589: LD_ADDR_VAR 0 8
18593: PUSH
18594: LD_VAR 0 6
18598: PPUSH
18599: LD_VAR 0 4
18603: PPUSH
18604: LD_INT 3
18606: PPUSH
18607: CALL_OW 273
18611: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18612: LD_VAR 0 7
18616: PPUSH
18617: LD_VAR 0 8
18621: PPUSH
18622: CALL_OW 488
18626: NOT
18627: IFFALSE 18631
// continue ;
18629: GO 18563
// if HexInfo ( _x , _y ) = 0 then
18631: LD_VAR 0 7
18635: PPUSH
18636: LD_VAR 0 8
18640: PPUSH
18641: CALL_OW 428
18645: PUSH
18646: LD_INT 0
18648: EQUAL
18649: IFFALSE 18674
// begin ComMoveXY ( unit , _x , _y ) ;
18651: LD_VAR 0 1
18655: PPUSH
18656: LD_VAR 0 7
18660: PPUSH
18661: LD_VAR 0 8
18665: PPUSH
18666: CALL_OW 111
// exit ;
18670: POP
18671: POP
18672: GO 18678
// end ; end ;
18674: GO 18563
18676: POP
18677: POP
// end ;
18678: LD_VAR 0 3
18682: RET
// export function ScanBase ( side , base_area ) ; begin
18683: LD_INT 0
18685: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18686: LD_ADDR_VAR 0 3
18690: PUSH
18691: LD_VAR 0 2
18695: PPUSH
18696: LD_INT 81
18698: PUSH
18699: LD_VAR 0 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 70
18712: ST_TO_ADDR
// end ;
18713: LD_VAR 0 3
18717: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18718: LD_INT 0
18720: PPUSH
18721: PPUSH
18722: PPUSH
18723: PPUSH
// result := false ;
18724: LD_ADDR_VAR 0 2
18728: PUSH
18729: LD_INT 0
18731: ST_TO_ADDR
// side := GetSide ( unit ) ;
18732: LD_ADDR_VAR 0 3
18736: PUSH
18737: LD_VAR 0 1
18741: PPUSH
18742: CALL_OW 255
18746: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18747: LD_ADDR_VAR 0 4
18751: PUSH
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 248
18761: ST_TO_ADDR
// case nat of 1 :
18762: LD_VAR 0 4
18766: PUSH
18767: LD_INT 1
18769: DOUBLE
18770: EQUAL
18771: IFTRUE 18775
18773: GO 18786
18775: POP
// tech := tech_lassight ; 2 :
18776: LD_ADDR_VAR 0 5
18780: PUSH
18781: LD_INT 12
18783: ST_TO_ADDR
18784: GO 18825
18786: LD_INT 2
18788: DOUBLE
18789: EQUAL
18790: IFTRUE 18794
18792: GO 18805
18794: POP
// tech := tech_mortar ; 3 :
18795: LD_ADDR_VAR 0 5
18799: PUSH
18800: LD_INT 41
18802: ST_TO_ADDR
18803: GO 18825
18805: LD_INT 3
18807: DOUBLE
18808: EQUAL
18809: IFTRUE 18813
18811: GO 18824
18813: POP
// tech := tech_bazooka ; end ;
18814: LD_ADDR_VAR 0 5
18818: PUSH
18819: LD_INT 44
18821: ST_TO_ADDR
18822: GO 18825
18824: POP
// if Researched ( side , tech ) then
18825: LD_VAR 0 3
18829: PPUSH
18830: LD_VAR 0 5
18834: PPUSH
18835: CALL_OW 325
18839: IFFALSE 18866
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18841: LD_ADDR_VAR 0 2
18845: PUSH
18846: LD_INT 5
18848: PUSH
18849: LD_INT 8
18851: PUSH
18852: LD_INT 9
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: LIST
18859: PUSH
18860: LD_VAR 0 4
18864: ARRAY
18865: ST_TO_ADDR
// end ;
18866: LD_VAR 0 2
18870: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18871: LD_INT 0
18873: PPUSH
18874: PPUSH
18875: PPUSH
// if not mines then
18876: LD_VAR 0 2
18880: NOT
18881: IFFALSE 18885
// exit ;
18883: GO 19029
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18885: LD_ADDR_VAR 0 5
18889: PUSH
18890: LD_INT 81
18892: PUSH
18893: LD_VAR 0 1
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: LD_INT 21
18907: PUSH
18908: LD_INT 3
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PPUSH
18923: CALL_OW 69
18927: ST_TO_ADDR
// for i in mines do
18928: LD_ADDR_VAR 0 4
18932: PUSH
18933: LD_VAR 0 2
18937: PUSH
18938: FOR_IN
18939: IFFALSE 19027
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18941: LD_VAR 0 4
18945: PUSH
18946: LD_INT 1
18948: ARRAY
18949: PPUSH
18950: LD_VAR 0 4
18954: PUSH
18955: LD_INT 2
18957: ARRAY
18958: PPUSH
18959: CALL_OW 458
18963: NOT
18964: IFFALSE 18968
// continue ;
18966: GO 18938
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18968: LD_VAR 0 4
18972: PUSH
18973: LD_INT 1
18975: ARRAY
18976: PPUSH
18977: LD_VAR 0 4
18981: PUSH
18982: LD_INT 2
18984: ARRAY
18985: PPUSH
18986: CALL_OW 428
18990: PUSH
18991: LD_VAR 0 5
18995: IN
18996: IFFALSE 19025
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18998: LD_VAR 0 4
19002: PUSH
19003: LD_INT 1
19005: ARRAY
19006: PPUSH
19007: LD_VAR 0 4
19011: PUSH
19012: LD_INT 2
19014: ARRAY
19015: PPUSH
19016: LD_VAR 0 1
19020: PPUSH
19021: CALL_OW 456
// end ;
19025: GO 18938
19027: POP
19028: POP
// end ;
19029: LD_VAR 0 3
19033: RET
// export function Count ( array ) ; begin
19034: LD_INT 0
19036: PPUSH
// result := array + 0 ;
19037: LD_ADDR_VAR 0 2
19041: PUSH
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 0
19049: PLUS
19050: ST_TO_ADDR
// end ;
19051: LD_VAR 0 2
19055: RET
// export function IsEmpty ( building ) ; begin
19056: LD_INT 0
19058: PPUSH
// if not building then
19059: LD_VAR 0 1
19063: NOT
19064: IFFALSE 19068
// exit ;
19066: GO 19111
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19068: LD_ADDR_VAR 0 2
19072: PUSH
19073: LD_VAR 0 1
19077: PUSH
19078: LD_INT 22
19080: PUSH
19081: LD_VAR 0 1
19085: PPUSH
19086: CALL_OW 255
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 58
19097: PUSH
19098: EMPTY
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 69
19109: IN
19110: ST_TO_ADDR
// end ;
19111: LD_VAR 0 2
19115: RET
// export function IsNotFull ( building ) ; var places ; begin
19116: LD_INT 0
19118: PPUSH
19119: PPUSH
// if not building then
19120: LD_VAR 0 1
19124: NOT
19125: IFFALSE 19129
// exit ;
19127: GO 19157
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19129: LD_ADDR_VAR 0 2
19133: PUSH
19134: LD_VAR 0 1
19138: PPUSH
19139: LD_INT 3
19141: PUSH
19142: LD_INT 62
19144: PUSH
19145: EMPTY
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PPUSH
19152: CALL_OW 72
19156: ST_TO_ADDR
// end ;
19157: LD_VAR 0 2
19161: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19162: LD_INT 0
19164: PPUSH
19165: PPUSH
19166: PPUSH
19167: PPUSH
// tmp := [ ] ;
19168: LD_ADDR_VAR 0 3
19172: PUSH
19173: EMPTY
19174: ST_TO_ADDR
// list := [ ] ;
19175: LD_ADDR_VAR 0 5
19179: PUSH
19180: EMPTY
19181: ST_TO_ADDR
// for i = 16 to 25 do
19182: LD_ADDR_VAR 0 4
19186: PUSH
19187: DOUBLE
19188: LD_INT 16
19190: DEC
19191: ST_TO_ADDR
19192: LD_INT 25
19194: PUSH
19195: FOR_TO
19196: IFFALSE 19269
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19198: LD_ADDR_VAR 0 3
19202: PUSH
19203: LD_VAR 0 3
19207: PUSH
19208: LD_INT 22
19210: PUSH
19211: LD_VAR 0 1
19215: PPUSH
19216: CALL_OW 255
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 91
19227: PUSH
19228: LD_VAR 0 1
19232: PUSH
19233: LD_INT 6
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 30
19243: PUSH
19244: LD_VAR 0 4
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: PPUSH
19261: CALL_OW 69
19265: ADD
19266: ST_TO_ADDR
19267: GO 19195
19269: POP
19270: POP
// for i = 1 to tmp do
19271: LD_ADDR_VAR 0 4
19275: PUSH
19276: DOUBLE
19277: LD_INT 1
19279: DEC
19280: ST_TO_ADDR
19281: LD_VAR 0 3
19285: PUSH
19286: FOR_TO
19287: IFFALSE 19375
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19289: LD_ADDR_VAR 0 5
19293: PUSH
19294: LD_VAR 0 5
19298: PUSH
19299: LD_VAR 0 3
19303: PUSH
19304: LD_VAR 0 4
19308: ARRAY
19309: PPUSH
19310: CALL_OW 266
19314: PUSH
19315: LD_VAR 0 3
19319: PUSH
19320: LD_VAR 0 4
19324: ARRAY
19325: PPUSH
19326: CALL_OW 250
19330: PUSH
19331: LD_VAR 0 3
19335: PUSH
19336: LD_VAR 0 4
19340: ARRAY
19341: PPUSH
19342: CALL_OW 251
19346: PUSH
19347: LD_VAR 0 3
19351: PUSH
19352: LD_VAR 0 4
19356: ARRAY
19357: PPUSH
19358: CALL_OW 254
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: ADD
19372: ST_TO_ADDR
19373: GO 19286
19375: POP
19376: POP
// result := list ;
19377: LD_ADDR_VAR 0 2
19381: PUSH
19382: LD_VAR 0 5
19386: ST_TO_ADDR
// end ;
19387: LD_VAR 0 2
19391: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19392: LD_INT 0
19394: PPUSH
19395: PPUSH
19396: PPUSH
19397: PPUSH
19398: PPUSH
19399: PPUSH
19400: PPUSH
// if not factory then
19401: LD_VAR 0 1
19405: NOT
19406: IFFALSE 19410
// exit ;
19408: GO 20003
// if control = control_apeman then
19410: LD_VAR 0 4
19414: PUSH
19415: LD_INT 5
19417: EQUAL
19418: IFFALSE 19527
// begin tmp := UnitsInside ( factory ) ;
19420: LD_ADDR_VAR 0 8
19424: PUSH
19425: LD_VAR 0 1
19429: PPUSH
19430: CALL_OW 313
19434: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19435: LD_VAR 0 8
19439: PPUSH
19440: LD_INT 25
19442: PUSH
19443: LD_INT 12
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PPUSH
19450: CALL_OW 72
19454: NOT
19455: IFFALSE 19465
// control := control_manual ;
19457: LD_ADDR_VAR 0 4
19461: PUSH
19462: LD_INT 1
19464: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19465: LD_ADDR_VAR 0 8
19469: PUSH
19470: LD_VAR 0 1
19474: PPUSH
19475: CALL 19162 0 1
19479: ST_TO_ADDR
// if tmp then
19480: LD_VAR 0 8
19484: IFFALSE 19527
// begin for i in tmp do
19486: LD_ADDR_VAR 0 7
19490: PUSH
19491: LD_VAR 0 8
19495: PUSH
19496: FOR_IN
19497: IFFALSE 19525
// if i [ 1 ] = b_ext_radio then
19499: LD_VAR 0 7
19503: PUSH
19504: LD_INT 1
19506: ARRAY
19507: PUSH
19508: LD_INT 22
19510: EQUAL
19511: IFFALSE 19523
// begin control := control_remote ;
19513: LD_ADDR_VAR 0 4
19517: PUSH
19518: LD_INT 2
19520: ST_TO_ADDR
// break ;
19521: GO 19525
// end ;
19523: GO 19496
19525: POP
19526: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19527: LD_VAR 0 1
19531: PPUSH
19532: LD_VAR 0 2
19536: PPUSH
19537: LD_VAR 0 3
19541: PPUSH
19542: LD_VAR 0 4
19546: PPUSH
19547: LD_VAR 0 5
19551: PPUSH
19552: CALL_OW 448
19556: IFFALSE 19591
// begin result := [ chassis , engine , control , weapon ] ;
19558: LD_ADDR_VAR 0 6
19562: PUSH
19563: LD_VAR 0 2
19567: PUSH
19568: LD_VAR 0 3
19572: PUSH
19573: LD_VAR 0 4
19577: PUSH
19578: LD_VAR 0 5
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: ST_TO_ADDR
// exit ;
19589: GO 20003
// end ; _chassis := AvailableChassisList ( factory ) ;
19591: LD_ADDR_VAR 0 9
19595: PUSH
19596: LD_VAR 0 1
19600: PPUSH
19601: CALL_OW 475
19605: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19606: LD_ADDR_VAR 0 11
19610: PUSH
19611: LD_VAR 0 1
19615: PPUSH
19616: CALL_OW 476
19620: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19621: LD_ADDR_VAR 0 12
19625: PUSH
19626: LD_VAR 0 1
19630: PPUSH
19631: CALL_OW 477
19635: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19636: LD_ADDR_VAR 0 10
19640: PUSH
19641: LD_VAR 0 1
19645: PPUSH
19646: CALL_OW 478
19650: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19651: LD_VAR 0 9
19655: NOT
19656: PUSH
19657: LD_VAR 0 11
19661: NOT
19662: OR
19663: PUSH
19664: LD_VAR 0 12
19668: NOT
19669: OR
19670: PUSH
19671: LD_VAR 0 10
19675: NOT
19676: OR
19677: IFFALSE 19712
// begin result := [ chassis , engine , control , weapon ] ;
19679: LD_ADDR_VAR 0 6
19683: PUSH
19684: LD_VAR 0 2
19688: PUSH
19689: LD_VAR 0 3
19693: PUSH
19694: LD_VAR 0 4
19698: PUSH
19699: LD_VAR 0 5
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: ST_TO_ADDR
// exit ;
19710: GO 20003
// end ; if not chassis in _chassis then
19712: LD_VAR 0 2
19716: PUSH
19717: LD_VAR 0 9
19721: IN
19722: NOT
19723: IFFALSE 19749
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19725: LD_ADDR_VAR 0 2
19729: PUSH
19730: LD_VAR 0 9
19734: PUSH
19735: LD_INT 1
19737: PPUSH
19738: LD_VAR 0 9
19742: PPUSH
19743: CALL_OW 12
19747: ARRAY
19748: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19749: LD_VAR 0 2
19753: PPUSH
19754: LD_VAR 0 3
19758: PPUSH
19759: CALL 20008 0 2
19763: NOT
19764: IFFALSE 19823
// repeat engine := _engine [ 1 ] ;
19766: LD_ADDR_VAR 0 3
19770: PUSH
19771: LD_VAR 0 11
19775: PUSH
19776: LD_INT 1
19778: ARRAY
19779: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19780: LD_ADDR_VAR 0 11
19784: PUSH
19785: LD_VAR 0 11
19789: PPUSH
19790: LD_INT 1
19792: PPUSH
19793: CALL_OW 3
19797: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19798: LD_VAR 0 2
19802: PPUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: CALL 20008 0 2
19812: PUSH
19813: LD_VAR 0 11
19817: PUSH
19818: EMPTY
19819: EQUAL
19820: OR
19821: IFFALSE 19766
// if not control in _control then
19823: LD_VAR 0 4
19827: PUSH
19828: LD_VAR 0 12
19832: IN
19833: NOT
19834: IFFALSE 19860
// control := _control [ rand ( 1 , _control ) ] ;
19836: LD_ADDR_VAR 0 4
19840: PUSH
19841: LD_VAR 0 12
19845: PUSH
19846: LD_INT 1
19848: PPUSH
19849: LD_VAR 0 12
19853: PPUSH
19854: CALL_OW 12
19858: ARRAY
19859: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19860: LD_VAR 0 2
19864: PPUSH
19865: LD_VAR 0 5
19869: PPUSH
19870: CALL 20228 0 2
19874: NOT
19875: IFFALSE 19934
// repeat weapon := _weapon [ 1 ] ;
19877: LD_ADDR_VAR 0 5
19881: PUSH
19882: LD_VAR 0 10
19886: PUSH
19887: LD_INT 1
19889: ARRAY
19890: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19891: LD_ADDR_VAR 0 10
19895: PUSH
19896: LD_VAR 0 10
19900: PPUSH
19901: LD_INT 1
19903: PPUSH
19904: CALL_OW 3
19908: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19909: LD_VAR 0 2
19913: PPUSH
19914: LD_VAR 0 5
19918: PPUSH
19919: CALL 20228 0 2
19923: PUSH
19924: LD_VAR 0 10
19928: PUSH
19929: EMPTY
19930: EQUAL
19931: OR
19932: IFFALSE 19877
// result := [ ] ;
19934: LD_ADDR_VAR 0 6
19938: PUSH
19939: EMPTY
19940: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19941: LD_VAR 0 1
19945: PPUSH
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_VAR 0 4
19960: PPUSH
19961: LD_VAR 0 5
19965: PPUSH
19966: CALL_OW 448
19970: IFFALSE 20003
// result := [ chassis , engine , control , weapon ] ;
19972: LD_ADDR_VAR 0 6
19976: PUSH
19977: LD_VAR 0 2
19981: PUSH
19982: LD_VAR 0 3
19986: PUSH
19987: LD_VAR 0 4
19991: PUSH
19992: LD_VAR 0 5
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: ST_TO_ADDR
// end ;
20003: LD_VAR 0 6
20007: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20008: LD_INT 0
20010: PPUSH
// if not chassis or not engine then
20011: LD_VAR 0 1
20015: NOT
20016: PUSH
20017: LD_VAR 0 2
20021: NOT
20022: OR
20023: IFFALSE 20027
// exit ;
20025: GO 20223
// case engine of engine_solar :
20027: LD_VAR 0 2
20031: PUSH
20032: LD_INT 2
20034: DOUBLE
20035: EQUAL
20036: IFTRUE 20040
20038: GO 20078
20040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20041: LD_ADDR_VAR 0 3
20045: PUSH
20046: LD_INT 11
20048: PUSH
20049: LD_INT 12
20051: PUSH
20052: LD_INT 13
20054: PUSH
20055: LD_INT 14
20057: PUSH
20058: LD_INT 1
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: LD_INT 3
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: ST_TO_ADDR
20076: GO 20207
20078: LD_INT 1
20080: DOUBLE
20081: EQUAL
20082: IFTRUE 20086
20084: GO 20148
20086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20087: LD_ADDR_VAR 0 3
20091: PUSH
20092: LD_INT 11
20094: PUSH
20095: LD_INT 12
20097: PUSH
20098: LD_INT 13
20100: PUSH
20101: LD_INT 14
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: LD_INT 2
20109: PUSH
20110: LD_INT 3
20112: PUSH
20113: LD_INT 4
20115: PUSH
20116: LD_INT 5
20118: PUSH
20119: LD_INT 21
20121: PUSH
20122: LD_INT 23
20124: PUSH
20125: LD_INT 22
20127: PUSH
20128: LD_INT 24
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: ST_TO_ADDR
20146: GO 20207
20148: LD_INT 3
20150: DOUBLE
20151: EQUAL
20152: IFTRUE 20156
20154: GO 20206
20156: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20157: LD_ADDR_VAR 0 3
20161: PUSH
20162: LD_INT 13
20164: PUSH
20165: LD_INT 14
20167: PUSH
20168: LD_INT 2
20170: PUSH
20171: LD_INT 3
20173: PUSH
20174: LD_INT 4
20176: PUSH
20177: LD_INT 5
20179: PUSH
20180: LD_INT 21
20182: PUSH
20183: LD_INT 22
20185: PUSH
20186: LD_INT 23
20188: PUSH
20189: LD_INT 24
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: ST_TO_ADDR
20204: GO 20207
20206: POP
// result := ( chassis in result ) ;
20207: LD_ADDR_VAR 0 3
20211: PUSH
20212: LD_VAR 0 1
20216: PUSH
20217: LD_VAR 0 3
20221: IN
20222: ST_TO_ADDR
// end ;
20223: LD_VAR 0 3
20227: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20228: LD_INT 0
20230: PPUSH
// if not chassis or not weapon then
20231: LD_VAR 0 1
20235: NOT
20236: PUSH
20237: LD_VAR 0 2
20241: NOT
20242: OR
20243: IFFALSE 20247
// exit ;
20245: GO 21307
// case weapon of us_machine_gun :
20247: LD_VAR 0 2
20251: PUSH
20252: LD_INT 2
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20290
20260: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20261: LD_ADDR_VAR 0 3
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 3
20274: PUSH
20275: LD_INT 4
20277: PUSH
20278: LD_INT 5
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: ST_TO_ADDR
20288: GO 21291
20290: LD_INT 3
20292: DOUBLE
20293: EQUAL
20294: IFTRUE 20298
20296: GO 20328
20298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20299: LD_ADDR_VAR 0 3
20303: PUSH
20304: LD_INT 1
20306: PUSH
20307: LD_INT 2
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: LD_INT 4
20315: PUSH
20316: LD_INT 5
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: ST_TO_ADDR
20326: GO 21291
20328: LD_INT 11
20330: DOUBLE
20331: EQUAL
20332: IFTRUE 20336
20334: GO 20366
20336: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20337: LD_ADDR_VAR 0 3
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: LD_INT 3
20350: PUSH
20351: LD_INT 4
20353: PUSH
20354: LD_INT 5
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: ST_TO_ADDR
20364: GO 21291
20366: LD_INT 4
20368: DOUBLE
20369: EQUAL
20370: IFTRUE 20374
20372: GO 20400
20374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20375: LD_ADDR_VAR 0 3
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: LD_INT 3
20385: PUSH
20386: LD_INT 4
20388: PUSH
20389: LD_INT 5
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: ST_TO_ADDR
20398: GO 21291
20400: LD_INT 5
20402: DOUBLE
20403: EQUAL
20404: IFTRUE 20408
20406: GO 20434
20408: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20409: LD_ADDR_VAR 0 3
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: LD_INT 3
20419: PUSH
20420: LD_INT 4
20422: PUSH
20423: LD_INT 5
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: ST_TO_ADDR
20432: GO 21291
20434: LD_INT 9
20436: DOUBLE
20437: EQUAL
20438: IFTRUE 20442
20440: GO 20468
20442: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20443: LD_ADDR_VAR 0 3
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: LD_INT 3
20453: PUSH
20454: LD_INT 4
20456: PUSH
20457: LD_INT 5
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: ST_TO_ADDR
20466: GO 21291
20468: LD_INT 7
20470: DOUBLE
20471: EQUAL
20472: IFTRUE 20476
20474: GO 20502
20476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20477: LD_ADDR_VAR 0 3
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 3
20487: PUSH
20488: LD_INT 4
20490: PUSH
20491: LD_INT 5
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: ST_TO_ADDR
20500: GO 21291
20502: LD_INT 12
20504: DOUBLE
20505: EQUAL
20506: IFTRUE 20510
20508: GO 20536
20510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20511: LD_ADDR_VAR 0 3
20515: PUSH
20516: LD_INT 2
20518: PUSH
20519: LD_INT 3
20521: PUSH
20522: LD_INT 4
20524: PUSH
20525: LD_INT 5
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: ST_TO_ADDR
20534: GO 21291
20536: LD_INT 13
20538: DOUBLE
20539: EQUAL
20540: IFTRUE 20544
20542: GO 20570
20544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20545: LD_ADDR_VAR 0 3
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: LD_INT 3
20555: PUSH
20556: LD_INT 4
20558: PUSH
20559: LD_INT 5
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: ST_TO_ADDR
20568: GO 21291
20570: LD_INT 14
20572: DOUBLE
20573: EQUAL
20574: IFTRUE 20578
20576: GO 20596
20578: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_INT 4
20586: PUSH
20587: LD_INT 5
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: ST_TO_ADDR
20594: GO 21291
20596: LD_INT 6
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20622
20604: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20605: LD_ADDR_VAR 0 3
20609: PUSH
20610: LD_INT 4
20612: PUSH
20613: LD_INT 5
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: ST_TO_ADDR
20620: GO 21291
20622: LD_INT 10
20624: DOUBLE
20625: EQUAL
20626: IFTRUE 20630
20628: GO 20648
20630: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20631: LD_ADDR_VAR 0 3
20635: PUSH
20636: LD_INT 4
20638: PUSH
20639: LD_INT 5
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: ST_TO_ADDR
20646: GO 21291
20648: LD_INT 22
20650: DOUBLE
20651: EQUAL
20652: IFTRUE 20656
20654: GO 20682
20656: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_INT 11
20664: PUSH
20665: LD_INT 12
20667: PUSH
20668: LD_INT 13
20670: PUSH
20671: LD_INT 14
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: ST_TO_ADDR
20680: GO 21291
20682: LD_INT 23
20684: DOUBLE
20685: EQUAL
20686: IFTRUE 20690
20688: GO 20716
20690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20691: LD_ADDR_VAR 0 3
20695: PUSH
20696: LD_INT 11
20698: PUSH
20699: LD_INT 12
20701: PUSH
20702: LD_INT 13
20704: PUSH
20705: LD_INT 14
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: ST_TO_ADDR
20714: GO 21291
20716: LD_INT 24
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20750
20724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20725: LD_ADDR_VAR 0 3
20729: PUSH
20730: LD_INT 11
20732: PUSH
20733: LD_INT 12
20735: PUSH
20736: LD_INT 13
20738: PUSH
20739: LD_INT 14
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: ST_TO_ADDR
20748: GO 21291
20750: LD_INT 30
20752: DOUBLE
20753: EQUAL
20754: IFTRUE 20758
20756: GO 20784
20758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20759: LD_ADDR_VAR 0 3
20763: PUSH
20764: LD_INT 11
20766: PUSH
20767: LD_INT 12
20769: PUSH
20770: LD_INT 13
20772: PUSH
20773: LD_INT 14
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: ST_TO_ADDR
20782: GO 21291
20784: LD_INT 25
20786: DOUBLE
20787: EQUAL
20788: IFTRUE 20792
20790: GO 20810
20792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20793: LD_ADDR_VAR 0 3
20797: PUSH
20798: LD_INT 13
20800: PUSH
20801: LD_INT 14
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: ST_TO_ADDR
20808: GO 21291
20810: LD_INT 27
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20818
20816: GO 20836
20818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20819: LD_ADDR_VAR 0 3
20823: PUSH
20824: LD_INT 13
20826: PUSH
20827: LD_INT 14
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: ST_TO_ADDR
20834: GO 21291
20836: LD_INT 92
20838: DOUBLE
20839: EQUAL
20840: IFTRUE 20844
20842: GO 20870
20844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20845: LD_ADDR_VAR 0 3
20849: PUSH
20850: LD_INT 11
20852: PUSH
20853: LD_INT 12
20855: PUSH
20856: LD_INT 13
20858: PUSH
20859: LD_INT 14
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: ST_TO_ADDR
20868: GO 21291
20870: LD_INT 28
20872: DOUBLE
20873: EQUAL
20874: IFTRUE 20878
20876: GO 20896
20878: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20879: LD_ADDR_VAR 0 3
20883: PUSH
20884: LD_INT 13
20886: PUSH
20887: LD_INT 14
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: ST_TO_ADDR
20894: GO 21291
20896: LD_INT 29
20898: DOUBLE
20899: EQUAL
20900: IFTRUE 20904
20902: GO 20922
20904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20905: LD_ADDR_VAR 0 3
20909: PUSH
20910: LD_INT 13
20912: PUSH
20913: LD_INT 14
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: ST_TO_ADDR
20920: GO 21291
20922: LD_INT 31
20924: DOUBLE
20925: EQUAL
20926: IFTRUE 20930
20928: GO 20948
20930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20931: LD_ADDR_VAR 0 3
20935: PUSH
20936: LD_INT 13
20938: PUSH
20939: LD_INT 14
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: ST_TO_ADDR
20946: GO 21291
20948: LD_INT 26
20950: DOUBLE
20951: EQUAL
20952: IFTRUE 20956
20954: GO 20974
20956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20957: LD_ADDR_VAR 0 3
20961: PUSH
20962: LD_INT 13
20964: PUSH
20965: LD_INT 14
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: ST_TO_ADDR
20972: GO 21291
20974: LD_INT 42
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 21008
20982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20983: LD_ADDR_VAR 0 3
20987: PUSH
20988: LD_INT 21
20990: PUSH
20991: LD_INT 22
20993: PUSH
20994: LD_INT 23
20996: PUSH
20997: LD_INT 24
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: ST_TO_ADDR
21006: GO 21291
21008: LD_INT 43
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21042
21016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21017: LD_ADDR_VAR 0 3
21021: PUSH
21022: LD_INT 21
21024: PUSH
21025: LD_INT 22
21027: PUSH
21028: LD_INT 23
21030: PUSH
21031: LD_INT 24
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: ST_TO_ADDR
21040: GO 21291
21042: LD_INT 44
21044: DOUBLE
21045: EQUAL
21046: IFTRUE 21050
21048: GO 21076
21050: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21051: LD_ADDR_VAR 0 3
21055: PUSH
21056: LD_INT 21
21058: PUSH
21059: LD_INT 22
21061: PUSH
21062: LD_INT 23
21064: PUSH
21065: LD_INT 24
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: ST_TO_ADDR
21074: GO 21291
21076: LD_INT 45
21078: DOUBLE
21079: EQUAL
21080: IFTRUE 21084
21082: GO 21110
21084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21085: LD_ADDR_VAR 0 3
21089: PUSH
21090: LD_INT 21
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 23
21098: PUSH
21099: LD_INT 24
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: ST_TO_ADDR
21108: GO 21291
21110: LD_INT 49
21112: DOUBLE
21113: EQUAL
21114: IFTRUE 21118
21116: GO 21144
21118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21119: LD_ADDR_VAR 0 3
21123: PUSH
21124: LD_INT 21
21126: PUSH
21127: LD_INT 22
21129: PUSH
21130: LD_INT 23
21132: PUSH
21133: LD_INT 24
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: ST_TO_ADDR
21142: GO 21291
21144: LD_INT 51
21146: DOUBLE
21147: EQUAL
21148: IFTRUE 21152
21150: GO 21178
21152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21153: LD_ADDR_VAR 0 3
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 22
21163: PUSH
21164: LD_INT 23
21166: PUSH
21167: LD_INT 24
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: ST_TO_ADDR
21176: GO 21291
21178: LD_INT 52
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21212
21186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21187: LD_ADDR_VAR 0 3
21191: PUSH
21192: LD_INT 21
21194: PUSH
21195: LD_INT 22
21197: PUSH
21198: LD_INT 23
21200: PUSH
21201: LD_INT 24
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: ST_TO_ADDR
21210: GO 21291
21212: LD_INT 53
21214: DOUBLE
21215: EQUAL
21216: IFTRUE 21220
21218: GO 21238
21220: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21221: LD_ADDR_VAR 0 3
21225: PUSH
21226: LD_INT 23
21228: PUSH
21229: LD_INT 24
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: ST_TO_ADDR
21236: GO 21291
21238: LD_INT 46
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21264
21246: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21247: LD_ADDR_VAR 0 3
21251: PUSH
21252: LD_INT 23
21254: PUSH
21255: LD_INT 24
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: ST_TO_ADDR
21262: GO 21291
21264: LD_INT 47
21266: DOUBLE
21267: EQUAL
21268: IFTRUE 21272
21270: GO 21290
21272: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21273: LD_ADDR_VAR 0 3
21277: PUSH
21278: LD_INT 23
21280: PUSH
21281: LD_INT 24
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: ST_TO_ADDR
21288: GO 21291
21290: POP
// result := ( chassis in result ) ;
21291: LD_ADDR_VAR 0 3
21295: PUSH
21296: LD_VAR 0 1
21300: PUSH
21301: LD_VAR 0 3
21305: IN
21306: ST_TO_ADDR
// end ;
21307: LD_VAR 0 3
21311: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21312: LD_INT 0
21314: PPUSH
21315: PPUSH
21316: PPUSH
21317: PPUSH
21318: PPUSH
21319: PPUSH
21320: PPUSH
// result := array ;
21321: LD_ADDR_VAR 0 5
21325: PUSH
21326: LD_VAR 0 1
21330: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21331: LD_VAR 0 1
21335: NOT
21336: PUSH
21337: LD_VAR 0 2
21341: NOT
21342: OR
21343: PUSH
21344: LD_VAR 0 3
21348: NOT
21349: OR
21350: PUSH
21351: LD_VAR 0 2
21355: PUSH
21356: LD_VAR 0 1
21360: GREATER
21361: OR
21362: PUSH
21363: LD_VAR 0 3
21367: PUSH
21368: LD_VAR 0 1
21372: GREATER
21373: OR
21374: IFFALSE 21378
// exit ;
21376: GO 21674
// if direction then
21378: LD_VAR 0 4
21382: IFFALSE 21446
// begin d := 1 ;
21384: LD_ADDR_VAR 0 9
21388: PUSH
21389: LD_INT 1
21391: ST_TO_ADDR
// if i_from > i_to then
21392: LD_VAR 0 2
21396: PUSH
21397: LD_VAR 0 3
21401: GREATER
21402: IFFALSE 21428
// length := ( array - i_from ) + i_to else
21404: LD_ADDR_VAR 0 11
21408: PUSH
21409: LD_VAR 0 1
21413: PUSH
21414: LD_VAR 0 2
21418: MINUS
21419: PUSH
21420: LD_VAR 0 3
21424: PLUS
21425: ST_TO_ADDR
21426: GO 21444
// length := i_to - i_from ;
21428: LD_ADDR_VAR 0 11
21432: PUSH
21433: LD_VAR 0 3
21437: PUSH
21438: LD_VAR 0 2
21442: MINUS
21443: ST_TO_ADDR
// end else
21444: GO 21507
// begin d := - 1 ;
21446: LD_ADDR_VAR 0 9
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: ST_TO_ADDR
// if i_from > i_to then
21455: LD_VAR 0 2
21459: PUSH
21460: LD_VAR 0 3
21464: GREATER
21465: IFFALSE 21485
// length := i_from - i_to else
21467: LD_ADDR_VAR 0 11
21471: PUSH
21472: LD_VAR 0 2
21476: PUSH
21477: LD_VAR 0 3
21481: MINUS
21482: ST_TO_ADDR
21483: GO 21507
// length := ( array - i_to ) + i_from ;
21485: LD_ADDR_VAR 0 11
21489: PUSH
21490: LD_VAR 0 1
21494: PUSH
21495: LD_VAR 0 3
21499: MINUS
21500: PUSH
21501: LD_VAR 0 2
21505: PLUS
21506: ST_TO_ADDR
// end ; if not length then
21507: LD_VAR 0 11
21511: NOT
21512: IFFALSE 21516
// exit ;
21514: GO 21674
// tmp := array ;
21516: LD_ADDR_VAR 0 10
21520: PUSH
21521: LD_VAR 0 1
21525: ST_TO_ADDR
// for i = 1 to length do
21526: LD_ADDR_VAR 0 6
21530: PUSH
21531: DOUBLE
21532: LD_INT 1
21534: DEC
21535: ST_TO_ADDR
21536: LD_VAR 0 11
21540: PUSH
21541: FOR_TO
21542: IFFALSE 21662
// begin for j = 1 to array do
21544: LD_ADDR_VAR 0 7
21548: PUSH
21549: DOUBLE
21550: LD_INT 1
21552: DEC
21553: ST_TO_ADDR
21554: LD_VAR 0 1
21558: PUSH
21559: FOR_TO
21560: IFFALSE 21648
// begin k := j + d ;
21562: LD_ADDR_VAR 0 8
21566: PUSH
21567: LD_VAR 0 7
21571: PUSH
21572: LD_VAR 0 9
21576: PLUS
21577: ST_TO_ADDR
// if k > array then
21578: LD_VAR 0 8
21582: PUSH
21583: LD_VAR 0 1
21587: GREATER
21588: IFFALSE 21598
// k := 1 ;
21590: LD_ADDR_VAR 0 8
21594: PUSH
21595: LD_INT 1
21597: ST_TO_ADDR
// if not k then
21598: LD_VAR 0 8
21602: NOT
21603: IFFALSE 21615
// k := array ;
21605: LD_ADDR_VAR 0 8
21609: PUSH
21610: LD_VAR 0 1
21614: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21615: LD_ADDR_VAR 0 10
21619: PUSH
21620: LD_VAR 0 10
21624: PPUSH
21625: LD_VAR 0 8
21629: PPUSH
21630: LD_VAR 0 1
21634: PUSH
21635: LD_VAR 0 7
21639: ARRAY
21640: PPUSH
21641: CALL_OW 1
21645: ST_TO_ADDR
// end ;
21646: GO 21559
21648: POP
21649: POP
// array := tmp ;
21650: LD_ADDR_VAR 0 1
21654: PUSH
21655: LD_VAR 0 10
21659: ST_TO_ADDR
// end ;
21660: GO 21541
21662: POP
21663: POP
// result := array ;
21664: LD_ADDR_VAR 0 5
21668: PUSH
21669: LD_VAR 0 1
21673: ST_TO_ADDR
// end ;
21674: LD_VAR 0 5
21678: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21679: LD_INT 0
21681: PPUSH
21682: PPUSH
// result := 0 ;
21683: LD_ADDR_VAR 0 3
21687: PUSH
21688: LD_INT 0
21690: ST_TO_ADDR
// if not array or not value in array then
21691: LD_VAR 0 1
21695: NOT
21696: PUSH
21697: LD_VAR 0 2
21701: PUSH
21702: LD_VAR 0 1
21706: IN
21707: NOT
21708: OR
21709: IFFALSE 21713
// exit ;
21711: GO 21767
// for i = 1 to array do
21713: LD_ADDR_VAR 0 4
21717: PUSH
21718: DOUBLE
21719: LD_INT 1
21721: DEC
21722: ST_TO_ADDR
21723: LD_VAR 0 1
21727: PUSH
21728: FOR_TO
21729: IFFALSE 21765
// if value = array [ i ] then
21731: LD_VAR 0 2
21735: PUSH
21736: LD_VAR 0 1
21740: PUSH
21741: LD_VAR 0 4
21745: ARRAY
21746: EQUAL
21747: IFFALSE 21763
// begin result := i ;
21749: LD_ADDR_VAR 0 3
21753: PUSH
21754: LD_VAR 0 4
21758: ST_TO_ADDR
// exit ;
21759: POP
21760: POP
21761: GO 21767
// end ;
21763: GO 21728
21765: POP
21766: POP
// end ;
21767: LD_VAR 0 3
21771: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21772: LD_INT 0
21774: PPUSH
// vc_chassis := chassis ;
21775: LD_ADDR_OWVAR 37
21779: PUSH
21780: LD_VAR 0 1
21784: ST_TO_ADDR
// vc_engine := engine ;
21785: LD_ADDR_OWVAR 39
21789: PUSH
21790: LD_VAR 0 2
21794: ST_TO_ADDR
// vc_control := control ;
21795: LD_ADDR_OWVAR 38
21799: PUSH
21800: LD_VAR 0 3
21804: ST_TO_ADDR
// vc_weapon := weapon ;
21805: LD_ADDR_OWVAR 40
21809: PUSH
21810: LD_VAR 0 4
21814: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21815: LD_ADDR_OWVAR 41
21819: PUSH
21820: LD_VAR 0 5
21824: ST_TO_ADDR
// end ;
21825: LD_VAR 0 6
21829: RET
// export function WantPlant ( unit ) ; var task ; begin
21830: LD_INT 0
21832: PPUSH
21833: PPUSH
// result := false ;
21834: LD_ADDR_VAR 0 2
21838: PUSH
21839: LD_INT 0
21841: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21842: LD_ADDR_VAR 0 3
21846: PUSH
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL_OW 437
21856: ST_TO_ADDR
// if task then
21857: LD_VAR 0 3
21861: IFFALSE 21889
// if task [ 1 ] [ 1 ] = p then
21863: LD_VAR 0 3
21867: PUSH
21868: LD_INT 1
21870: ARRAY
21871: PUSH
21872: LD_INT 1
21874: ARRAY
21875: PUSH
21876: LD_STRING p
21878: EQUAL
21879: IFFALSE 21889
// result := true ;
21881: LD_ADDR_VAR 0 2
21885: PUSH
21886: LD_INT 1
21888: ST_TO_ADDR
// end ;
21889: LD_VAR 0 2
21893: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21894: LD_INT 0
21896: PPUSH
21897: PPUSH
21898: PPUSH
21899: PPUSH
// if pos < 1 then
21900: LD_VAR 0 2
21904: PUSH
21905: LD_INT 1
21907: LESS
21908: IFFALSE 21912
// exit ;
21910: GO 22215
// if pos = 1 then
21912: LD_VAR 0 2
21916: PUSH
21917: LD_INT 1
21919: EQUAL
21920: IFFALSE 21953
// result := Replace ( arr , pos [ 1 ] , value ) else
21922: LD_ADDR_VAR 0 4
21926: PUSH
21927: LD_VAR 0 1
21931: PPUSH
21932: LD_VAR 0 2
21936: PUSH
21937: LD_INT 1
21939: ARRAY
21940: PPUSH
21941: LD_VAR 0 3
21945: PPUSH
21946: CALL_OW 1
21950: ST_TO_ADDR
21951: GO 22215
// begin tmp := arr ;
21953: LD_ADDR_VAR 0 6
21957: PUSH
21958: LD_VAR 0 1
21962: ST_TO_ADDR
// s_arr := [ tmp ] ;
21963: LD_ADDR_VAR 0 7
21967: PUSH
21968: LD_VAR 0 6
21972: PUSH
21973: EMPTY
21974: LIST
21975: ST_TO_ADDR
// for i = 1 to pos - 1 do
21976: LD_ADDR_VAR 0 5
21980: PUSH
21981: DOUBLE
21982: LD_INT 1
21984: DEC
21985: ST_TO_ADDR
21986: LD_VAR 0 2
21990: PUSH
21991: LD_INT 1
21993: MINUS
21994: PUSH
21995: FOR_TO
21996: IFFALSE 22041
// begin tmp := tmp [ pos [ i ] ] ;
21998: LD_ADDR_VAR 0 6
22002: PUSH
22003: LD_VAR 0 6
22007: PUSH
22008: LD_VAR 0 2
22012: PUSH
22013: LD_VAR 0 5
22017: ARRAY
22018: ARRAY
22019: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22020: LD_ADDR_VAR 0 7
22024: PUSH
22025: LD_VAR 0 7
22029: PUSH
22030: LD_VAR 0 6
22034: PUSH
22035: EMPTY
22036: LIST
22037: ADD
22038: ST_TO_ADDR
// end ;
22039: GO 21995
22041: POP
22042: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22043: LD_ADDR_VAR 0 6
22047: PUSH
22048: LD_VAR 0 6
22052: PPUSH
22053: LD_VAR 0 2
22057: PUSH
22058: LD_VAR 0 2
22062: ARRAY
22063: PPUSH
22064: LD_VAR 0 3
22068: PPUSH
22069: CALL_OW 1
22073: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22074: LD_ADDR_VAR 0 7
22078: PUSH
22079: LD_VAR 0 7
22083: PPUSH
22084: LD_VAR 0 7
22088: PPUSH
22089: LD_VAR 0 6
22093: PPUSH
22094: CALL_OW 1
22098: ST_TO_ADDR
// for i = s_arr downto 2 do
22099: LD_ADDR_VAR 0 5
22103: PUSH
22104: DOUBLE
22105: LD_VAR 0 7
22109: INC
22110: ST_TO_ADDR
22111: LD_INT 2
22113: PUSH
22114: FOR_DOWNTO
22115: IFFALSE 22199
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22117: LD_ADDR_VAR 0 6
22121: PUSH
22122: LD_VAR 0 7
22126: PUSH
22127: LD_VAR 0 5
22131: PUSH
22132: LD_INT 1
22134: MINUS
22135: ARRAY
22136: PPUSH
22137: LD_VAR 0 2
22141: PUSH
22142: LD_VAR 0 5
22146: PUSH
22147: LD_INT 1
22149: MINUS
22150: ARRAY
22151: PPUSH
22152: LD_VAR 0 7
22156: PUSH
22157: LD_VAR 0 5
22161: ARRAY
22162: PPUSH
22163: CALL_OW 1
22167: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22168: LD_ADDR_VAR 0 7
22172: PUSH
22173: LD_VAR 0 7
22177: PPUSH
22178: LD_VAR 0 5
22182: PUSH
22183: LD_INT 1
22185: MINUS
22186: PPUSH
22187: LD_VAR 0 6
22191: PPUSH
22192: CALL_OW 1
22196: ST_TO_ADDR
// end ;
22197: GO 22114
22199: POP
22200: POP
// result := s_arr [ 1 ] ;
22201: LD_ADDR_VAR 0 4
22205: PUSH
22206: LD_VAR 0 7
22210: PUSH
22211: LD_INT 1
22213: ARRAY
22214: ST_TO_ADDR
// end ; end ;
22215: LD_VAR 0 4
22219: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22220: LD_INT 0
22222: PPUSH
22223: PPUSH
// if not list then
22224: LD_VAR 0 1
22228: NOT
22229: IFFALSE 22233
// exit ;
22231: GO 22324
// i := list [ pos1 ] ;
22233: LD_ADDR_VAR 0 5
22237: PUSH
22238: LD_VAR 0 1
22242: PUSH
22243: LD_VAR 0 2
22247: ARRAY
22248: ST_TO_ADDR
// if not i then
22249: LD_VAR 0 5
22253: NOT
22254: IFFALSE 22258
// exit ;
22256: GO 22324
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22258: LD_ADDR_VAR 0 1
22262: PUSH
22263: LD_VAR 0 1
22267: PPUSH
22268: LD_VAR 0 2
22272: PPUSH
22273: LD_VAR 0 1
22277: PUSH
22278: LD_VAR 0 3
22282: ARRAY
22283: PPUSH
22284: CALL_OW 1
22288: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22289: LD_ADDR_VAR 0 1
22293: PUSH
22294: LD_VAR 0 1
22298: PPUSH
22299: LD_VAR 0 3
22303: PPUSH
22304: LD_VAR 0 5
22308: PPUSH
22309: CALL_OW 1
22313: ST_TO_ADDR
// result := list ;
22314: LD_ADDR_VAR 0 4
22318: PUSH
22319: LD_VAR 0 1
22323: ST_TO_ADDR
// end ;
22324: LD_VAR 0 4
22328: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22329: LD_INT 0
22331: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22332: LD_ADDR_VAR 0 5
22336: PUSH
22337: LD_VAR 0 1
22341: PPUSH
22342: CALL_OW 250
22346: PPUSH
22347: LD_VAR 0 1
22351: PPUSH
22352: CALL_OW 251
22356: PPUSH
22357: LD_VAR 0 2
22361: PPUSH
22362: LD_VAR 0 3
22366: PPUSH
22367: LD_VAR 0 4
22371: PPUSH
22372: CALL 22382 0 5
22376: ST_TO_ADDR
// end ;
22377: LD_VAR 0 5
22381: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22382: LD_INT 0
22384: PPUSH
22385: PPUSH
22386: PPUSH
22387: PPUSH
// if not list then
22388: LD_VAR 0 3
22392: NOT
22393: IFFALSE 22397
// exit ;
22395: GO 22785
// result := [ ] ;
22397: LD_ADDR_VAR 0 6
22401: PUSH
22402: EMPTY
22403: ST_TO_ADDR
// for i in list do
22404: LD_ADDR_VAR 0 7
22408: PUSH
22409: LD_VAR 0 3
22413: PUSH
22414: FOR_IN
22415: IFFALSE 22617
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22417: LD_ADDR_VAR 0 9
22421: PUSH
22422: LD_VAR 0 7
22426: PPUSH
22427: LD_VAR 0 1
22431: PPUSH
22432: LD_VAR 0 2
22436: PPUSH
22437: CALL_OW 297
22441: ST_TO_ADDR
// if not result then
22442: LD_VAR 0 6
22446: NOT
22447: IFFALSE 22473
// result := [ [ i , tmp ] ] else
22449: LD_ADDR_VAR 0 6
22453: PUSH
22454: LD_VAR 0 7
22458: PUSH
22459: LD_VAR 0 9
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: EMPTY
22469: LIST
22470: ST_TO_ADDR
22471: GO 22615
// begin if result [ result ] [ 2 ] < tmp then
22473: LD_VAR 0 6
22477: PUSH
22478: LD_VAR 0 6
22482: ARRAY
22483: PUSH
22484: LD_INT 2
22486: ARRAY
22487: PUSH
22488: LD_VAR 0 9
22492: LESS
22493: IFFALSE 22535
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22495: LD_ADDR_VAR 0 6
22499: PUSH
22500: LD_VAR 0 6
22504: PPUSH
22505: LD_VAR 0 6
22509: PUSH
22510: LD_INT 1
22512: PLUS
22513: PPUSH
22514: LD_VAR 0 7
22518: PUSH
22519: LD_VAR 0 9
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PPUSH
22528: CALL_OW 2
22532: ST_TO_ADDR
22533: GO 22615
// for j = 1 to result do
22535: LD_ADDR_VAR 0 8
22539: PUSH
22540: DOUBLE
22541: LD_INT 1
22543: DEC
22544: ST_TO_ADDR
22545: LD_VAR 0 6
22549: PUSH
22550: FOR_TO
22551: IFFALSE 22613
// begin if tmp < result [ j ] [ 2 ] then
22553: LD_VAR 0 9
22557: PUSH
22558: LD_VAR 0 6
22562: PUSH
22563: LD_VAR 0 8
22567: ARRAY
22568: PUSH
22569: LD_INT 2
22571: ARRAY
22572: LESS
22573: IFFALSE 22611
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22575: LD_ADDR_VAR 0 6
22579: PUSH
22580: LD_VAR 0 6
22584: PPUSH
22585: LD_VAR 0 8
22589: PPUSH
22590: LD_VAR 0 7
22594: PUSH
22595: LD_VAR 0 9
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 2
22608: ST_TO_ADDR
// break ;
22609: GO 22613
// end ; end ;
22611: GO 22550
22613: POP
22614: POP
// end ; end ;
22615: GO 22414
22617: POP
22618: POP
// if result and not asc then
22619: LD_VAR 0 6
22623: PUSH
22624: LD_VAR 0 4
22628: NOT
22629: AND
22630: IFFALSE 22705
// begin tmp := result ;
22632: LD_ADDR_VAR 0 9
22636: PUSH
22637: LD_VAR 0 6
22641: ST_TO_ADDR
// for i = tmp downto 1 do
22642: LD_ADDR_VAR 0 7
22646: PUSH
22647: DOUBLE
22648: LD_VAR 0 9
22652: INC
22653: ST_TO_ADDR
22654: LD_INT 1
22656: PUSH
22657: FOR_DOWNTO
22658: IFFALSE 22703
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22660: LD_ADDR_VAR 0 6
22664: PUSH
22665: LD_VAR 0 6
22669: PPUSH
22670: LD_VAR 0 9
22674: PUSH
22675: LD_VAR 0 7
22679: MINUS
22680: PUSH
22681: LD_INT 1
22683: PLUS
22684: PPUSH
22685: LD_VAR 0 9
22689: PUSH
22690: LD_VAR 0 7
22694: ARRAY
22695: PPUSH
22696: CALL_OW 1
22700: ST_TO_ADDR
22701: GO 22657
22703: POP
22704: POP
// end ; tmp := [ ] ;
22705: LD_ADDR_VAR 0 9
22709: PUSH
22710: EMPTY
22711: ST_TO_ADDR
// if mode then
22712: LD_VAR 0 5
22716: IFFALSE 22785
// begin for i = 1 to result do
22718: LD_ADDR_VAR 0 7
22722: PUSH
22723: DOUBLE
22724: LD_INT 1
22726: DEC
22727: ST_TO_ADDR
22728: LD_VAR 0 6
22732: PUSH
22733: FOR_TO
22734: IFFALSE 22773
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22736: LD_ADDR_VAR 0 9
22740: PUSH
22741: LD_VAR 0 9
22745: PPUSH
22746: LD_VAR 0 7
22750: PPUSH
22751: LD_VAR 0 6
22755: PUSH
22756: LD_VAR 0 7
22760: ARRAY
22761: PUSH
22762: LD_INT 1
22764: ARRAY
22765: PPUSH
22766: CALL_OW 1
22770: ST_TO_ADDR
22771: GO 22733
22773: POP
22774: POP
// result := tmp ;
22775: LD_ADDR_VAR 0 6
22779: PUSH
22780: LD_VAR 0 9
22784: ST_TO_ADDR
// end ; end ;
22785: LD_VAR 0 6
22789: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22790: LD_INT 0
22792: PPUSH
22793: PPUSH
22794: PPUSH
22795: PPUSH
22796: PPUSH
22797: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22798: LD_ADDR_VAR 0 5
22802: PUSH
22803: LD_INT 0
22805: PUSH
22806: LD_INT 0
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: EMPTY
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: ST_TO_ADDR
// if not x or not y then
22820: LD_VAR 0 2
22824: NOT
22825: PUSH
22826: LD_VAR 0 3
22830: NOT
22831: OR
22832: IFFALSE 22836
// exit ;
22834: GO 24486
// if not range then
22836: LD_VAR 0 4
22840: NOT
22841: IFFALSE 22851
// range := 10 ;
22843: LD_ADDR_VAR 0 4
22847: PUSH
22848: LD_INT 10
22850: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22851: LD_ADDR_VAR 0 8
22855: PUSH
22856: LD_INT 81
22858: PUSH
22859: LD_VAR 0 1
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 92
22870: PUSH
22871: LD_VAR 0 2
22875: PUSH
22876: LD_VAR 0 3
22880: PUSH
22881: LD_VAR 0 4
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 3
22894: PUSH
22895: LD_INT 21
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: PPUSH
22914: CALL_OW 69
22918: ST_TO_ADDR
// if not tmp then
22919: LD_VAR 0 8
22923: NOT
22924: IFFALSE 22928
// exit ;
22926: GO 24486
// for i in tmp do
22928: LD_ADDR_VAR 0 6
22932: PUSH
22933: LD_VAR 0 8
22937: PUSH
22938: FOR_IN
22939: IFFALSE 24461
// begin points := [ 0 , 0 , 0 ] ;
22941: LD_ADDR_VAR 0 9
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: LD_INT 0
22951: PUSH
22952: LD_INT 0
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: LIST
22959: ST_TO_ADDR
// bpoints := 1 ;
22960: LD_ADDR_VAR 0 10
22964: PUSH
22965: LD_INT 1
22967: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22968: LD_VAR 0 6
22972: PPUSH
22973: CALL_OW 247
22977: PUSH
22978: LD_INT 1
22980: DOUBLE
22981: EQUAL
22982: IFTRUE 22986
22984: GO 23564
22986: POP
// begin if GetClass ( i ) = 1 then
22987: LD_VAR 0 6
22991: PPUSH
22992: CALL_OW 257
22996: PUSH
22997: LD_INT 1
22999: EQUAL
23000: IFFALSE 23021
// points := [ 10 , 5 , 3 ] ;
23002: LD_ADDR_VAR 0 9
23006: PUSH
23007: LD_INT 10
23009: PUSH
23010: LD_INT 5
23012: PUSH
23013: LD_INT 3
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23021: LD_VAR 0 6
23025: PPUSH
23026: CALL_OW 257
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: LD_INT 4
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: LIST
23044: IN
23045: IFFALSE 23066
// points := [ 3 , 2 , 1 ] ;
23047: LD_ADDR_VAR 0 9
23051: PUSH
23052: LD_INT 3
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: LIST
23065: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23066: LD_VAR 0 6
23070: PPUSH
23071: CALL_OW 257
23075: PUSH
23076: LD_INT 5
23078: EQUAL
23079: IFFALSE 23100
// points := [ 130 , 5 , 2 ] ;
23081: LD_ADDR_VAR 0 9
23085: PUSH
23086: LD_INT 130
23088: PUSH
23089: LD_INT 5
23091: PUSH
23092: LD_INT 2
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: LIST
23099: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23100: LD_VAR 0 6
23104: PPUSH
23105: CALL_OW 257
23109: PUSH
23110: LD_INT 8
23112: EQUAL
23113: IFFALSE 23134
// points := [ 35 , 35 , 30 ] ;
23115: LD_ADDR_VAR 0 9
23119: PUSH
23120: LD_INT 35
23122: PUSH
23123: LD_INT 35
23125: PUSH
23126: LD_INT 30
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23134: LD_VAR 0 6
23138: PPUSH
23139: CALL_OW 257
23143: PUSH
23144: LD_INT 9
23146: EQUAL
23147: IFFALSE 23168
// points := [ 20 , 55 , 40 ] ;
23149: LD_ADDR_VAR 0 9
23153: PUSH
23154: LD_INT 20
23156: PUSH
23157: LD_INT 55
23159: PUSH
23160: LD_INT 40
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23168: LD_VAR 0 6
23172: PPUSH
23173: CALL_OW 257
23177: PUSH
23178: LD_INT 12
23180: PUSH
23181: LD_INT 16
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: IN
23188: IFFALSE 23209
// points := [ 5 , 3 , 2 ] ;
23190: LD_ADDR_VAR 0 9
23194: PUSH
23195: LD_INT 5
23197: PUSH
23198: LD_INT 3
23200: PUSH
23201: LD_INT 2
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: LIST
23208: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23209: LD_VAR 0 6
23213: PPUSH
23214: CALL_OW 257
23218: PUSH
23219: LD_INT 17
23221: EQUAL
23222: IFFALSE 23243
// points := [ 100 , 50 , 75 ] ;
23224: LD_ADDR_VAR 0 9
23228: PUSH
23229: LD_INT 100
23231: PUSH
23232: LD_INT 50
23234: PUSH
23235: LD_INT 75
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: LIST
23242: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23243: LD_VAR 0 6
23247: PPUSH
23248: CALL_OW 257
23252: PUSH
23253: LD_INT 15
23255: EQUAL
23256: IFFALSE 23277
// points := [ 10 , 5 , 3 ] ;
23258: LD_ADDR_VAR 0 9
23262: PUSH
23263: LD_INT 10
23265: PUSH
23266: LD_INT 5
23268: PUSH
23269: LD_INT 3
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: LIST
23276: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23277: LD_VAR 0 6
23281: PPUSH
23282: CALL_OW 257
23286: PUSH
23287: LD_INT 14
23289: EQUAL
23290: IFFALSE 23311
// points := [ 10 , 0 , 0 ] ;
23292: LD_ADDR_VAR 0 9
23296: PUSH
23297: LD_INT 10
23299: PUSH
23300: LD_INT 0
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: LIST
23310: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23311: LD_VAR 0 6
23315: PPUSH
23316: CALL_OW 257
23320: PUSH
23321: LD_INT 11
23323: EQUAL
23324: IFFALSE 23345
// points := [ 30 , 10 , 5 ] ;
23326: LD_ADDR_VAR 0 9
23330: PUSH
23331: LD_INT 30
23333: PUSH
23334: LD_INT 10
23336: PUSH
23337: LD_INT 5
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: LIST
23344: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23345: LD_VAR 0 1
23349: PPUSH
23350: LD_INT 5
23352: PPUSH
23353: CALL_OW 321
23357: PUSH
23358: LD_INT 2
23360: EQUAL
23361: IFFALSE 23378
// bpoints := bpoints * 1.8 ;
23363: LD_ADDR_VAR 0 10
23367: PUSH
23368: LD_VAR 0 10
23372: PUSH
23373: LD_REAL  1.80000000000000E+0000
23376: MUL
23377: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23378: LD_VAR 0 6
23382: PPUSH
23383: CALL_OW 257
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: LD_INT 2
23393: PUSH
23394: LD_INT 3
23396: PUSH
23397: LD_INT 4
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: IN
23406: PUSH
23407: LD_VAR 0 1
23411: PPUSH
23412: LD_INT 51
23414: PPUSH
23415: CALL_OW 321
23419: PUSH
23420: LD_INT 2
23422: EQUAL
23423: AND
23424: IFFALSE 23441
// bpoints := bpoints * 1.2 ;
23426: LD_ADDR_VAR 0 10
23430: PUSH
23431: LD_VAR 0 10
23435: PUSH
23436: LD_REAL  1.20000000000000E+0000
23439: MUL
23440: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23441: LD_VAR 0 6
23445: PPUSH
23446: CALL_OW 257
23450: PUSH
23451: LD_INT 5
23453: PUSH
23454: LD_INT 7
23456: PUSH
23457: LD_INT 9
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: IN
23465: PUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: LD_INT 52
23473: PPUSH
23474: CALL_OW 321
23478: PUSH
23479: LD_INT 2
23481: EQUAL
23482: AND
23483: IFFALSE 23500
// bpoints := bpoints * 1.5 ;
23485: LD_ADDR_VAR 0 10
23489: PUSH
23490: LD_VAR 0 10
23494: PUSH
23495: LD_REAL  1.50000000000000E+0000
23498: MUL
23499: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23500: LD_VAR 0 1
23504: PPUSH
23505: LD_INT 66
23507: PPUSH
23508: CALL_OW 321
23512: PUSH
23513: LD_INT 2
23515: EQUAL
23516: IFFALSE 23533
// bpoints := bpoints * 1.1 ;
23518: LD_ADDR_VAR 0 10
23522: PUSH
23523: LD_VAR 0 10
23527: PUSH
23528: LD_REAL  1.10000000000000E+0000
23531: MUL
23532: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23533: LD_ADDR_VAR 0 10
23537: PUSH
23538: LD_VAR 0 10
23542: PUSH
23543: LD_VAR 0 6
23547: PPUSH
23548: LD_INT 1
23550: PPUSH
23551: CALL_OW 259
23555: PUSH
23556: LD_REAL  1.15000000000000E+0000
23559: MUL
23560: MUL
23561: ST_TO_ADDR
// end ; unit_vehicle :
23562: GO 24390
23564: LD_INT 2
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 24378
23572: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23573: LD_VAR 0 6
23577: PPUSH
23578: CALL_OW 264
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: LD_INT 42
23588: PUSH
23589: LD_INT 24
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: LIST
23596: IN
23597: IFFALSE 23618
// points := [ 25 , 5 , 3 ] ;
23599: LD_ADDR_VAR 0 9
23603: PUSH
23604: LD_INT 25
23606: PUSH
23607: LD_INT 5
23609: PUSH
23610: LD_INT 3
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: LIST
23617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23618: LD_VAR 0 6
23622: PPUSH
23623: CALL_OW 264
23627: PUSH
23628: LD_INT 4
23630: PUSH
23631: LD_INT 43
23633: PUSH
23634: LD_INT 25
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: IN
23642: IFFALSE 23663
// points := [ 40 , 15 , 5 ] ;
23644: LD_ADDR_VAR 0 9
23648: PUSH
23649: LD_INT 40
23651: PUSH
23652: LD_INT 15
23654: PUSH
23655: LD_INT 5
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23663: LD_VAR 0 6
23667: PPUSH
23668: CALL_OW 264
23672: PUSH
23673: LD_INT 3
23675: PUSH
23676: LD_INT 23
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: IN
23683: IFFALSE 23704
// points := [ 7 , 25 , 8 ] ;
23685: LD_ADDR_VAR 0 9
23689: PUSH
23690: LD_INT 7
23692: PUSH
23693: LD_INT 25
23695: PUSH
23696: LD_INT 8
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23704: LD_VAR 0 6
23708: PPUSH
23709: CALL_OW 264
23713: PUSH
23714: LD_INT 5
23716: PUSH
23717: LD_INT 27
23719: PUSH
23720: LD_INT 44
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: IN
23728: IFFALSE 23749
// points := [ 14 , 50 , 16 ] ;
23730: LD_ADDR_VAR 0 9
23734: PUSH
23735: LD_INT 14
23737: PUSH
23738: LD_INT 50
23740: PUSH
23741: LD_INT 16
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: LIST
23748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23749: LD_VAR 0 6
23753: PPUSH
23754: CALL_OW 264
23758: PUSH
23759: LD_INT 6
23761: PUSH
23762: LD_INT 46
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: IN
23769: IFFALSE 23790
// points := [ 32 , 120 , 70 ] ;
23771: LD_ADDR_VAR 0 9
23775: PUSH
23776: LD_INT 32
23778: PUSH
23779: LD_INT 120
23781: PUSH
23782: LD_INT 70
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23790: LD_VAR 0 6
23794: PPUSH
23795: CALL_OW 264
23799: PUSH
23800: LD_INT 7
23802: PUSH
23803: LD_INT 28
23805: PUSH
23806: LD_INT 45
23808: PUSH
23809: LD_INT 92
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: IN
23818: IFFALSE 23839
// points := [ 35 , 20 , 45 ] ;
23820: LD_ADDR_VAR 0 9
23824: PUSH
23825: LD_INT 35
23827: PUSH
23828: LD_INT 20
23830: PUSH
23831: LD_INT 45
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: LIST
23838: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23839: LD_VAR 0 6
23843: PPUSH
23844: CALL_OW 264
23848: PUSH
23849: LD_INT 47
23851: PUSH
23852: EMPTY
23853: LIST
23854: IN
23855: IFFALSE 23876
// points := [ 67 , 45 , 75 ] ;
23857: LD_ADDR_VAR 0 9
23861: PUSH
23862: LD_INT 67
23864: PUSH
23865: LD_INT 45
23867: PUSH
23868: LD_INT 75
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23876: LD_VAR 0 6
23880: PPUSH
23881: CALL_OW 264
23885: PUSH
23886: LD_INT 26
23888: PUSH
23889: EMPTY
23890: LIST
23891: IN
23892: IFFALSE 23913
// points := [ 120 , 30 , 80 ] ;
23894: LD_ADDR_VAR 0 9
23898: PUSH
23899: LD_INT 120
23901: PUSH
23902: LD_INT 30
23904: PUSH
23905: LD_INT 80
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: LIST
23912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23913: LD_VAR 0 6
23917: PPUSH
23918: CALL_OW 264
23922: PUSH
23923: LD_INT 22
23925: PUSH
23926: EMPTY
23927: LIST
23928: IN
23929: IFFALSE 23950
// points := [ 40 , 1 , 1 ] ;
23931: LD_ADDR_VAR 0 9
23935: PUSH
23936: LD_INT 40
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23950: LD_VAR 0 6
23954: PPUSH
23955: CALL_OW 264
23959: PUSH
23960: LD_INT 29
23962: PUSH
23963: EMPTY
23964: LIST
23965: IN
23966: IFFALSE 23987
// points := [ 70 , 200 , 400 ] ;
23968: LD_ADDR_VAR 0 9
23972: PUSH
23973: LD_INT 70
23975: PUSH
23976: LD_INT 200
23978: PUSH
23979: LD_INT 400
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23987: LD_VAR 0 6
23991: PPUSH
23992: CALL_OW 264
23996: PUSH
23997: LD_INT 14
23999: PUSH
24000: LD_INT 53
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: IN
24007: IFFALSE 24028
// points := [ 40 , 10 , 20 ] ;
24009: LD_ADDR_VAR 0 9
24013: PUSH
24014: LD_INT 40
24016: PUSH
24017: LD_INT 10
24019: PUSH
24020: LD_INT 20
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24028: LD_VAR 0 6
24032: PPUSH
24033: CALL_OW 264
24037: PUSH
24038: LD_INT 9
24040: PUSH
24041: EMPTY
24042: LIST
24043: IN
24044: IFFALSE 24065
// points := [ 5 , 70 , 20 ] ;
24046: LD_ADDR_VAR 0 9
24050: PUSH
24051: LD_INT 5
24053: PUSH
24054: LD_INT 70
24056: PUSH
24057: LD_INT 20
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24065: LD_VAR 0 6
24069: PPUSH
24070: CALL_OW 264
24074: PUSH
24075: LD_INT 10
24077: PUSH
24078: EMPTY
24079: LIST
24080: IN
24081: IFFALSE 24102
// points := [ 35 , 110 , 70 ] ;
24083: LD_ADDR_VAR 0 9
24087: PUSH
24088: LD_INT 35
24090: PUSH
24091: LD_INT 110
24093: PUSH
24094: LD_INT 70
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: LIST
24101: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24102: LD_VAR 0 6
24106: PPUSH
24107: CALL_OW 265
24111: PUSH
24112: LD_INT 25
24114: EQUAL
24115: IFFALSE 24136
// points := [ 80 , 65 , 100 ] ;
24117: LD_ADDR_VAR 0 9
24121: PUSH
24122: LD_INT 80
24124: PUSH
24125: LD_INT 65
24127: PUSH
24128: LD_INT 100
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24136: LD_VAR 0 6
24140: PPUSH
24141: CALL_OW 263
24145: PUSH
24146: LD_INT 1
24148: EQUAL
24149: IFFALSE 24184
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24151: LD_ADDR_VAR 0 10
24155: PUSH
24156: LD_VAR 0 10
24160: PUSH
24161: LD_VAR 0 6
24165: PPUSH
24166: CALL_OW 311
24170: PPUSH
24171: LD_INT 3
24173: PPUSH
24174: CALL_OW 259
24178: PUSH
24179: LD_INT 4
24181: MUL
24182: MUL
24183: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24184: LD_VAR 0 6
24188: PPUSH
24189: CALL_OW 263
24193: PUSH
24194: LD_INT 2
24196: EQUAL
24197: IFFALSE 24248
// begin j := IsControledBy ( i ) ;
24199: LD_ADDR_VAR 0 7
24203: PUSH
24204: LD_VAR 0 6
24208: PPUSH
24209: CALL_OW 312
24213: ST_TO_ADDR
// if j then
24214: LD_VAR 0 7
24218: IFFALSE 24248
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24220: LD_ADDR_VAR 0 10
24224: PUSH
24225: LD_VAR 0 10
24229: PUSH
24230: LD_VAR 0 7
24234: PPUSH
24235: LD_INT 3
24237: PPUSH
24238: CALL_OW 259
24242: PUSH
24243: LD_INT 3
24245: MUL
24246: MUL
24247: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24248: LD_VAR 0 6
24252: PPUSH
24253: CALL_OW 264
24257: PUSH
24258: LD_INT 5
24260: PUSH
24261: LD_INT 6
24263: PUSH
24264: LD_INT 46
24266: PUSH
24267: LD_INT 44
24269: PUSH
24270: LD_INT 47
24272: PUSH
24273: LD_INT 45
24275: PUSH
24276: LD_INT 28
24278: PUSH
24279: LD_INT 7
24281: PUSH
24282: LD_INT 27
24284: PUSH
24285: LD_INT 29
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: IN
24300: PUSH
24301: LD_VAR 0 1
24305: PPUSH
24306: LD_INT 52
24308: PPUSH
24309: CALL_OW 321
24313: PUSH
24314: LD_INT 2
24316: EQUAL
24317: AND
24318: IFFALSE 24335
// bpoints := bpoints * 1.2 ;
24320: LD_ADDR_VAR 0 10
24324: PUSH
24325: LD_VAR 0 10
24329: PUSH
24330: LD_REAL  1.20000000000000E+0000
24333: MUL
24334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24335: LD_VAR 0 6
24339: PPUSH
24340: CALL_OW 264
24344: PUSH
24345: LD_INT 6
24347: PUSH
24348: LD_INT 46
24350: PUSH
24351: LD_INT 47
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: IN
24359: IFFALSE 24376
// bpoints := bpoints * 1.2 ;
24361: LD_ADDR_VAR 0 10
24365: PUSH
24366: LD_VAR 0 10
24370: PUSH
24371: LD_REAL  1.20000000000000E+0000
24374: MUL
24375: ST_TO_ADDR
// end ; unit_building :
24376: GO 24390
24378: LD_INT 3
24380: DOUBLE
24381: EQUAL
24382: IFTRUE 24386
24384: GO 24389
24386: POP
// ; end ;
24387: GO 24390
24389: POP
// for j = 1 to 3 do
24390: LD_ADDR_VAR 0 7
24394: PUSH
24395: DOUBLE
24396: LD_INT 1
24398: DEC
24399: ST_TO_ADDR
24400: LD_INT 3
24402: PUSH
24403: FOR_TO
24404: IFFALSE 24457
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24406: LD_ADDR_VAR 0 5
24410: PUSH
24411: LD_VAR 0 5
24415: PPUSH
24416: LD_VAR 0 7
24420: PPUSH
24421: LD_VAR 0 5
24425: PUSH
24426: LD_VAR 0 7
24430: ARRAY
24431: PUSH
24432: LD_VAR 0 9
24436: PUSH
24437: LD_VAR 0 7
24441: ARRAY
24442: PUSH
24443: LD_VAR 0 10
24447: MUL
24448: PLUS
24449: PPUSH
24450: CALL_OW 1
24454: ST_TO_ADDR
24455: GO 24403
24457: POP
24458: POP
// end ;
24459: GO 22938
24461: POP
24462: POP
// result := Replace ( result , 4 , tmp ) ;
24463: LD_ADDR_VAR 0 5
24467: PUSH
24468: LD_VAR 0 5
24472: PPUSH
24473: LD_INT 4
24475: PPUSH
24476: LD_VAR 0 8
24480: PPUSH
24481: CALL_OW 1
24485: ST_TO_ADDR
// end ;
24486: LD_VAR 0 5
24490: RET
// export function DangerAtRange ( unit , range ) ; begin
24491: LD_INT 0
24493: PPUSH
// if not unit then
24494: LD_VAR 0 1
24498: NOT
24499: IFFALSE 24503
// exit ;
24501: GO 24548
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24503: LD_ADDR_VAR 0 3
24507: PUSH
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 255
24517: PPUSH
24518: LD_VAR 0 1
24522: PPUSH
24523: CALL_OW 250
24527: PPUSH
24528: LD_VAR 0 1
24532: PPUSH
24533: CALL_OW 251
24537: PPUSH
24538: LD_VAR 0 2
24542: PPUSH
24543: CALL 22790 0 4
24547: ST_TO_ADDR
// end ;
24548: LD_VAR 0 3
24552: RET
// export function DangerInArea ( side , area ) ; begin
24553: LD_INT 0
24555: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24556: LD_ADDR_VAR 0 3
24560: PUSH
24561: LD_VAR 0 2
24565: PPUSH
24566: LD_INT 81
24568: PUSH
24569: LD_VAR 0 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PPUSH
24578: CALL_OW 70
24582: ST_TO_ADDR
// end ;
24583: LD_VAR 0 3
24587: RET
// export function IsExtension ( b ) ; begin
24588: LD_INT 0
24590: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24591: LD_ADDR_VAR 0 2
24595: PUSH
24596: LD_VAR 0 1
24600: PUSH
24601: LD_INT 23
24603: PUSH
24604: LD_INT 20
24606: PUSH
24607: LD_INT 22
24609: PUSH
24610: LD_INT 17
24612: PUSH
24613: LD_INT 24
24615: PUSH
24616: LD_INT 21
24618: PUSH
24619: LD_INT 19
24621: PUSH
24622: LD_INT 16
24624: PUSH
24625: LD_INT 25
24627: PUSH
24628: LD_INT 18
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: IN
24643: ST_TO_ADDR
// end ;
24644: LD_VAR 0 2
24648: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24649: LD_INT 0
24651: PPUSH
24652: PPUSH
24653: PPUSH
// result := [ ] ;
24654: LD_ADDR_VAR 0 4
24658: PUSH
24659: EMPTY
24660: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24661: LD_ADDR_VAR 0 5
24665: PUSH
24666: LD_VAR 0 2
24670: PPUSH
24671: LD_INT 21
24673: PUSH
24674: LD_INT 3
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PPUSH
24681: CALL_OW 70
24685: ST_TO_ADDR
// if not tmp then
24686: LD_VAR 0 5
24690: NOT
24691: IFFALSE 24695
// exit ;
24693: GO 24759
// if checkLink then
24695: LD_VAR 0 3
24699: IFFALSE 24749
// begin for i in tmp do
24701: LD_ADDR_VAR 0 6
24705: PUSH
24706: LD_VAR 0 5
24710: PUSH
24711: FOR_IN
24712: IFFALSE 24747
// if GetBase ( i ) <> base then
24714: LD_VAR 0 6
24718: PPUSH
24719: CALL_OW 274
24723: PUSH
24724: LD_VAR 0 1
24728: NONEQUAL
24729: IFFALSE 24745
// ComLinkToBase ( base , i ) ;
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_VAR 0 6
24740: PPUSH
24741: CALL_OW 169
24745: GO 24711
24747: POP
24748: POP
// end ; result := tmp ;
24749: LD_ADDR_VAR 0 4
24753: PUSH
24754: LD_VAR 0 5
24758: ST_TO_ADDR
// end ;
24759: LD_VAR 0 4
24763: RET
// export function ComComplete ( units , b ) ; var i ; begin
24764: LD_INT 0
24766: PPUSH
24767: PPUSH
// if not units then
24768: LD_VAR 0 1
24772: NOT
24773: IFFALSE 24777
// exit ;
24775: GO 24867
// for i in units do
24777: LD_ADDR_VAR 0 4
24781: PUSH
24782: LD_VAR 0 1
24786: PUSH
24787: FOR_IN
24788: IFFALSE 24865
// if BuildingStatus ( b ) = bs_build then
24790: LD_VAR 0 2
24794: PPUSH
24795: CALL_OW 461
24799: PUSH
24800: LD_INT 1
24802: EQUAL
24803: IFFALSE 24863
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24805: LD_VAR 0 4
24809: PPUSH
24810: LD_STRING h
24812: PUSH
24813: LD_VAR 0 2
24817: PPUSH
24818: CALL_OW 250
24822: PUSH
24823: LD_VAR 0 2
24827: PPUSH
24828: CALL_OW 251
24832: PUSH
24833: LD_VAR 0 2
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: LD_INT 0
24843: PUSH
24844: LD_INT 0
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: PUSH
24856: EMPTY
24857: LIST
24858: PPUSH
24859: CALL_OW 446
24863: GO 24787
24865: POP
24866: POP
// end ;
24867: LD_VAR 0 3
24871: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24872: LD_INT 0
24874: PPUSH
24875: PPUSH
24876: PPUSH
24877: PPUSH
24878: PPUSH
24879: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24880: LD_VAR 0 1
24884: NOT
24885: PUSH
24886: LD_VAR 0 1
24890: PPUSH
24891: CALL_OW 263
24895: PUSH
24896: LD_INT 2
24898: NONEQUAL
24899: OR
24900: IFFALSE 24904
// exit ;
24902: GO 25220
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24904: LD_ADDR_VAR 0 6
24908: PUSH
24909: LD_INT 22
24911: PUSH
24912: LD_VAR 0 1
24916: PPUSH
24917: CALL_OW 255
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 30
24931: PUSH
24932: LD_INT 36
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 34
24941: PUSH
24942: LD_INT 31
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: LIST
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PPUSH
24958: CALL_OW 69
24962: ST_TO_ADDR
// if not tmp then
24963: LD_VAR 0 6
24967: NOT
24968: IFFALSE 24972
// exit ;
24970: GO 25220
// result := [ ] ;
24972: LD_ADDR_VAR 0 2
24976: PUSH
24977: EMPTY
24978: ST_TO_ADDR
// for i in tmp do
24979: LD_ADDR_VAR 0 3
24983: PUSH
24984: LD_VAR 0 6
24988: PUSH
24989: FOR_IN
24990: IFFALSE 25061
// begin t := UnitsInside ( i ) ;
24992: LD_ADDR_VAR 0 4
24996: PUSH
24997: LD_VAR 0 3
25001: PPUSH
25002: CALL_OW 313
25006: ST_TO_ADDR
// if t then
25007: LD_VAR 0 4
25011: IFFALSE 25059
// for j in t do
25013: LD_ADDR_VAR 0 7
25017: PUSH
25018: LD_VAR 0 4
25022: PUSH
25023: FOR_IN
25024: IFFALSE 25057
// result := Replace ( result , result + 1 , j ) ;
25026: LD_ADDR_VAR 0 2
25030: PUSH
25031: LD_VAR 0 2
25035: PPUSH
25036: LD_VAR 0 2
25040: PUSH
25041: LD_INT 1
25043: PLUS
25044: PPUSH
25045: LD_VAR 0 7
25049: PPUSH
25050: CALL_OW 1
25054: ST_TO_ADDR
25055: GO 25023
25057: POP
25058: POP
// end ;
25059: GO 24989
25061: POP
25062: POP
// if not result then
25063: LD_VAR 0 2
25067: NOT
25068: IFFALSE 25072
// exit ;
25070: GO 25220
// mech := result [ 1 ] ;
25072: LD_ADDR_VAR 0 5
25076: PUSH
25077: LD_VAR 0 2
25081: PUSH
25082: LD_INT 1
25084: ARRAY
25085: ST_TO_ADDR
// if result > 1 then
25086: LD_VAR 0 2
25090: PUSH
25091: LD_INT 1
25093: GREATER
25094: IFFALSE 25206
// begin for i = 2 to result do
25096: LD_ADDR_VAR 0 3
25100: PUSH
25101: DOUBLE
25102: LD_INT 2
25104: DEC
25105: ST_TO_ADDR
25106: LD_VAR 0 2
25110: PUSH
25111: FOR_TO
25112: IFFALSE 25204
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25114: LD_ADDR_VAR 0 4
25118: PUSH
25119: LD_VAR 0 2
25123: PUSH
25124: LD_VAR 0 3
25128: ARRAY
25129: PPUSH
25130: LD_INT 3
25132: PPUSH
25133: CALL_OW 259
25137: PUSH
25138: LD_VAR 0 2
25142: PUSH
25143: LD_VAR 0 3
25147: ARRAY
25148: PPUSH
25149: CALL_OW 432
25153: MINUS
25154: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25155: LD_VAR 0 4
25159: PUSH
25160: LD_VAR 0 5
25164: PPUSH
25165: LD_INT 3
25167: PPUSH
25168: CALL_OW 259
25172: PUSH
25173: LD_VAR 0 5
25177: PPUSH
25178: CALL_OW 432
25182: MINUS
25183: GREATEREQUAL
25184: IFFALSE 25202
// mech := result [ i ] ;
25186: LD_ADDR_VAR 0 5
25190: PUSH
25191: LD_VAR 0 2
25195: PUSH
25196: LD_VAR 0 3
25200: ARRAY
25201: ST_TO_ADDR
// end ;
25202: GO 25111
25204: POP
25205: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25206: LD_VAR 0 1
25210: PPUSH
25211: LD_VAR 0 5
25215: PPUSH
25216: CALL_OW 135
// end ;
25220: LD_VAR 0 2
25224: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25225: LD_INT 0
25227: PPUSH
25228: PPUSH
25229: PPUSH
25230: PPUSH
25231: PPUSH
25232: PPUSH
25233: PPUSH
25234: PPUSH
25235: PPUSH
25236: PPUSH
25237: PPUSH
25238: PPUSH
25239: PPUSH
// result := [ ] ;
25240: LD_ADDR_VAR 0 7
25244: PUSH
25245: EMPTY
25246: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25247: LD_VAR 0 1
25251: PPUSH
25252: CALL_OW 266
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: IN
25267: NOT
25268: IFFALSE 25272
// exit ;
25270: GO 26906
// if name then
25272: LD_VAR 0 3
25276: IFFALSE 25292
// SetBName ( base_dep , name ) ;
25278: LD_VAR 0 1
25282: PPUSH
25283: LD_VAR 0 3
25287: PPUSH
25288: CALL_OW 500
// base := GetBase ( base_dep ) ;
25292: LD_ADDR_VAR 0 15
25296: PUSH
25297: LD_VAR 0 1
25301: PPUSH
25302: CALL_OW 274
25306: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25307: LD_ADDR_VAR 0 16
25311: PUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL_OW 255
25321: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25322: LD_ADDR_VAR 0 17
25326: PUSH
25327: LD_VAR 0 1
25331: PPUSH
25332: CALL_OW 248
25336: ST_TO_ADDR
// if sources then
25337: LD_VAR 0 5
25341: IFFALSE 25388
// for i = 1 to 3 do
25343: LD_ADDR_VAR 0 8
25347: PUSH
25348: DOUBLE
25349: LD_INT 1
25351: DEC
25352: ST_TO_ADDR
25353: LD_INT 3
25355: PUSH
25356: FOR_TO
25357: IFFALSE 25386
// AddResourceType ( base , i , sources [ i ] ) ;
25359: LD_VAR 0 15
25363: PPUSH
25364: LD_VAR 0 8
25368: PPUSH
25369: LD_VAR 0 5
25373: PUSH
25374: LD_VAR 0 8
25378: ARRAY
25379: PPUSH
25380: CALL_OW 276
25384: GO 25356
25386: POP
25387: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25388: LD_ADDR_VAR 0 18
25392: PUSH
25393: LD_VAR 0 15
25397: PPUSH
25398: LD_VAR 0 2
25402: PPUSH
25403: LD_INT 1
25405: PPUSH
25406: CALL 24649 0 3
25410: ST_TO_ADDR
// InitHc ;
25411: CALL_OW 19
// InitUc ;
25415: CALL_OW 18
// uc_side := side ;
25419: LD_ADDR_OWVAR 20
25423: PUSH
25424: LD_VAR 0 16
25428: ST_TO_ADDR
// uc_nation := nation ;
25429: LD_ADDR_OWVAR 21
25433: PUSH
25434: LD_VAR 0 17
25438: ST_TO_ADDR
// if buildings then
25439: LD_VAR 0 18
25443: IFFALSE 26765
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25445: LD_ADDR_VAR 0 19
25449: PUSH
25450: LD_VAR 0 18
25454: PPUSH
25455: LD_INT 2
25457: PUSH
25458: LD_INT 30
25460: PUSH
25461: LD_INT 29
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 30
25470: PUSH
25471: LD_INT 30
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: PPUSH
25483: CALL_OW 72
25487: ST_TO_ADDR
// if tmp then
25488: LD_VAR 0 19
25492: IFFALSE 25540
// for i in tmp do
25494: LD_ADDR_VAR 0 8
25498: PUSH
25499: LD_VAR 0 19
25503: PUSH
25504: FOR_IN
25505: IFFALSE 25538
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25507: LD_VAR 0 8
25511: PPUSH
25512: CALL_OW 250
25516: PPUSH
25517: LD_VAR 0 8
25521: PPUSH
25522: CALL_OW 251
25526: PPUSH
25527: LD_VAR 0 16
25531: PPUSH
25532: CALL_OW 441
25536: GO 25504
25538: POP
25539: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25540: LD_VAR 0 18
25544: PPUSH
25545: LD_INT 2
25547: PUSH
25548: LD_INT 30
25550: PUSH
25551: LD_INT 32
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 30
25560: PUSH
25561: LD_INT 33
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: LIST
25572: PPUSH
25573: CALL_OW 72
25577: IFFALSE 25665
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25579: LD_ADDR_VAR 0 8
25583: PUSH
25584: LD_VAR 0 18
25588: PPUSH
25589: LD_INT 2
25591: PUSH
25592: LD_INT 30
25594: PUSH
25595: LD_INT 32
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 30
25604: PUSH
25605: LD_INT 33
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: LIST
25616: PPUSH
25617: CALL_OW 72
25621: PUSH
25622: FOR_IN
25623: IFFALSE 25663
// begin if not GetBWeapon ( i ) then
25625: LD_VAR 0 8
25629: PPUSH
25630: CALL_OW 269
25634: NOT
25635: IFFALSE 25661
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25637: LD_VAR 0 8
25641: PPUSH
25642: LD_VAR 0 8
25646: PPUSH
25647: LD_VAR 0 2
25651: PPUSH
25652: CALL 26911 0 2
25656: PPUSH
25657: CALL_OW 431
// end ;
25661: GO 25622
25663: POP
25664: POP
// end ; for i = 1 to personel do
25665: LD_ADDR_VAR 0 8
25669: PUSH
25670: DOUBLE
25671: LD_INT 1
25673: DEC
25674: ST_TO_ADDR
25675: LD_VAR 0 6
25679: PUSH
25680: FOR_TO
25681: IFFALSE 26745
// begin if i > 4 then
25683: LD_VAR 0 8
25687: PUSH
25688: LD_INT 4
25690: GREATER
25691: IFFALSE 25695
// break ;
25693: GO 26745
// case i of 1 :
25695: LD_VAR 0 8
25699: PUSH
25700: LD_INT 1
25702: DOUBLE
25703: EQUAL
25704: IFTRUE 25708
25706: GO 25788
25708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25709: LD_ADDR_VAR 0 12
25713: PUSH
25714: LD_VAR 0 18
25718: PPUSH
25719: LD_INT 22
25721: PUSH
25722: LD_VAR 0 16
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 58
25733: PUSH
25734: EMPTY
25735: LIST
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: LD_INT 30
25742: PUSH
25743: LD_INT 32
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 30
25752: PUSH
25753: LD_INT 4
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 30
25762: PUSH
25763: LD_INT 5
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: LIST
25780: PPUSH
25781: CALL_OW 72
25785: ST_TO_ADDR
25786: GO 26010
25788: LD_INT 2
25790: DOUBLE
25791: EQUAL
25792: IFTRUE 25796
25794: GO 25858
25796: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25797: LD_ADDR_VAR 0 12
25801: PUSH
25802: LD_VAR 0 18
25806: PPUSH
25807: LD_INT 22
25809: PUSH
25810: LD_VAR 0 16
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: PUSH
25822: LD_INT 30
25824: PUSH
25825: LD_INT 0
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 30
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: LIST
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PPUSH
25851: CALL_OW 72
25855: ST_TO_ADDR
25856: GO 26010
25858: LD_INT 3
25860: DOUBLE
25861: EQUAL
25862: IFTRUE 25866
25864: GO 25928
25866: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25867: LD_ADDR_VAR 0 12
25871: PUSH
25872: LD_VAR 0 18
25876: PPUSH
25877: LD_INT 22
25879: PUSH
25880: LD_VAR 0 16
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: LD_INT 30
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 30
25904: PUSH
25905: LD_INT 3
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PPUSH
25921: CALL_OW 72
25925: ST_TO_ADDR
25926: GO 26010
25928: LD_INT 4
25930: DOUBLE
25931: EQUAL
25932: IFTRUE 25936
25934: GO 26009
25936: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25937: LD_ADDR_VAR 0 12
25941: PUSH
25942: LD_VAR 0 18
25946: PPUSH
25947: LD_INT 22
25949: PUSH
25950: LD_VAR 0 16
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 2
25961: PUSH
25962: LD_INT 30
25964: PUSH
25965: LD_INT 6
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 30
25974: PUSH
25975: LD_INT 7
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 30
25984: PUSH
25985: LD_INT 8
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PPUSH
26002: CALL_OW 72
26006: ST_TO_ADDR
26007: GO 26010
26009: POP
// if i = 1 then
26010: LD_VAR 0 8
26014: PUSH
26015: LD_INT 1
26017: EQUAL
26018: IFFALSE 26129
// begin tmp := [ ] ;
26020: LD_ADDR_VAR 0 19
26024: PUSH
26025: EMPTY
26026: ST_TO_ADDR
// for j in f do
26027: LD_ADDR_VAR 0 9
26031: PUSH
26032: LD_VAR 0 12
26036: PUSH
26037: FOR_IN
26038: IFFALSE 26111
// if GetBType ( j ) = b_bunker then
26040: LD_VAR 0 9
26044: PPUSH
26045: CALL_OW 266
26049: PUSH
26050: LD_INT 32
26052: EQUAL
26053: IFFALSE 26080
// tmp := Insert ( tmp , 1 , j ) else
26055: LD_ADDR_VAR 0 19
26059: PUSH
26060: LD_VAR 0 19
26064: PPUSH
26065: LD_INT 1
26067: PPUSH
26068: LD_VAR 0 9
26072: PPUSH
26073: CALL_OW 2
26077: ST_TO_ADDR
26078: GO 26109
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26080: LD_ADDR_VAR 0 19
26084: PUSH
26085: LD_VAR 0 19
26089: PPUSH
26090: LD_VAR 0 19
26094: PUSH
26095: LD_INT 1
26097: PLUS
26098: PPUSH
26099: LD_VAR 0 9
26103: PPUSH
26104: CALL_OW 2
26108: ST_TO_ADDR
26109: GO 26037
26111: POP
26112: POP
// if tmp then
26113: LD_VAR 0 19
26117: IFFALSE 26129
// f := tmp ;
26119: LD_ADDR_VAR 0 12
26123: PUSH
26124: LD_VAR 0 19
26128: ST_TO_ADDR
// end ; x := personel [ i ] ;
26129: LD_ADDR_VAR 0 13
26133: PUSH
26134: LD_VAR 0 6
26138: PUSH
26139: LD_VAR 0 8
26143: ARRAY
26144: ST_TO_ADDR
// if x = - 1 then
26145: LD_VAR 0 13
26149: PUSH
26150: LD_INT 1
26152: NEG
26153: EQUAL
26154: IFFALSE 26363
// begin for j in f do
26156: LD_ADDR_VAR 0 9
26160: PUSH
26161: LD_VAR 0 12
26165: PUSH
26166: FOR_IN
26167: IFFALSE 26359
// repeat InitHc ;
26169: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26173: LD_VAR 0 9
26177: PPUSH
26178: CALL_OW 266
26182: PUSH
26183: LD_INT 5
26185: EQUAL
26186: IFFALSE 26256
// begin if UnitsInside ( j ) < 3 then
26188: LD_VAR 0 9
26192: PPUSH
26193: CALL_OW 313
26197: PUSH
26198: LD_INT 3
26200: LESS
26201: IFFALSE 26237
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26203: LD_INT 0
26205: PPUSH
26206: LD_INT 5
26208: PUSH
26209: LD_INT 8
26211: PUSH
26212: LD_INT 9
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: PUSH
26220: LD_VAR 0 17
26224: ARRAY
26225: PPUSH
26226: LD_VAR 0 4
26230: PPUSH
26231: CALL_OW 380
26235: GO 26254
// PrepareHuman ( false , i , skill ) ;
26237: LD_INT 0
26239: PPUSH
26240: LD_VAR 0 8
26244: PPUSH
26245: LD_VAR 0 4
26249: PPUSH
26250: CALL_OW 380
// end else
26254: GO 26273
// PrepareHuman ( false , i , skill ) ;
26256: LD_INT 0
26258: PPUSH
26259: LD_VAR 0 8
26263: PPUSH
26264: LD_VAR 0 4
26268: PPUSH
26269: CALL_OW 380
// un := CreateHuman ;
26273: LD_ADDR_VAR 0 14
26277: PUSH
26278: CALL_OW 44
26282: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26283: LD_ADDR_VAR 0 7
26287: PUSH
26288: LD_VAR 0 7
26292: PPUSH
26293: LD_INT 1
26295: PPUSH
26296: LD_VAR 0 14
26300: PPUSH
26301: CALL_OW 2
26305: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26306: LD_VAR 0 14
26310: PPUSH
26311: LD_VAR 0 9
26315: PPUSH
26316: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26320: LD_VAR 0 9
26324: PPUSH
26325: CALL_OW 313
26329: PUSH
26330: LD_INT 6
26332: EQUAL
26333: PUSH
26334: LD_VAR 0 9
26338: PPUSH
26339: CALL_OW 266
26343: PUSH
26344: LD_INT 32
26346: PUSH
26347: LD_INT 31
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: IN
26354: OR
26355: IFFALSE 26169
26357: GO 26166
26359: POP
26360: POP
// end else
26361: GO 26743
// for j = 1 to x do
26363: LD_ADDR_VAR 0 9
26367: PUSH
26368: DOUBLE
26369: LD_INT 1
26371: DEC
26372: ST_TO_ADDR
26373: LD_VAR 0 13
26377: PUSH
26378: FOR_TO
26379: IFFALSE 26741
// begin InitHc ;
26381: CALL_OW 19
// if not f then
26385: LD_VAR 0 12
26389: NOT
26390: IFFALSE 26479
// begin PrepareHuman ( false , i , skill ) ;
26392: LD_INT 0
26394: PPUSH
26395: LD_VAR 0 8
26399: PPUSH
26400: LD_VAR 0 4
26404: PPUSH
26405: CALL_OW 380
// un := CreateHuman ;
26409: LD_ADDR_VAR 0 14
26413: PUSH
26414: CALL_OW 44
26418: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26419: LD_ADDR_VAR 0 7
26423: PUSH
26424: LD_VAR 0 7
26428: PPUSH
26429: LD_INT 1
26431: PPUSH
26432: LD_VAR 0 14
26436: PPUSH
26437: CALL_OW 2
26441: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26442: LD_VAR 0 14
26446: PPUSH
26447: LD_VAR 0 1
26451: PPUSH
26452: CALL_OW 250
26456: PPUSH
26457: LD_VAR 0 1
26461: PPUSH
26462: CALL_OW 251
26466: PPUSH
26467: LD_INT 10
26469: PPUSH
26470: LD_INT 0
26472: PPUSH
26473: CALL_OW 50
// continue ;
26477: GO 26378
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26479: LD_VAR 0 12
26483: PUSH
26484: LD_INT 1
26486: ARRAY
26487: PPUSH
26488: CALL_OW 313
26492: PUSH
26493: LD_VAR 0 12
26497: PUSH
26498: LD_INT 1
26500: ARRAY
26501: PPUSH
26502: CALL_OW 266
26506: PUSH
26507: LD_INT 32
26509: PUSH
26510: LD_INT 31
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: IN
26517: AND
26518: PUSH
26519: LD_VAR 0 12
26523: PUSH
26524: LD_INT 1
26526: ARRAY
26527: PPUSH
26528: CALL_OW 313
26532: PUSH
26533: LD_INT 6
26535: EQUAL
26536: OR
26537: IFFALSE 26557
// f := Delete ( f , 1 ) ;
26539: LD_ADDR_VAR 0 12
26543: PUSH
26544: LD_VAR 0 12
26548: PPUSH
26549: LD_INT 1
26551: PPUSH
26552: CALL_OW 3
26556: ST_TO_ADDR
// if not f then
26557: LD_VAR 0 12
26561: NOT
26562: IFFALSE 26580
// begin x := x + 2 ;
26564: LD_ADDR_VAR 0 13
26568: PUSH
26569: LD_VAR 0 13
26573: PUSH
26574: LD_INT 2
26576: PLUS
26577: ST_TO_ADDR
// continue ;
26578: GO 26378
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26580: LD_VAR 0 12
26584: PUSH
26585: LD_INT 1
26587: ARRAY
26588: PPUSH
26589: CALL_OW 266
26593: PUSH
26594: LD_INT 5
26596: EQUAL
26597: IFFALSE 26671
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26599: LD_VAR 0 12
26603: PUSH
26604: LD_INT 1
26606: ARRAY
26607: PPUSH
26608: CALL_OW 313
26612: PUSH
26613: LD_INT 3
26615: LESS
26616: IFFALSE 26652
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26618: LD_INT 0
26620: PPUSH
26621: LD_INT 5
26623: PUSH
26624: LD_INT 8
26626: PUSH
26627: LD_INT 9
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: LIST
26634: PUSH
26635: LD_VAR 0 17
26639: ARRAY
26640: PPUSH
26641: LD_VAR 0 4
26645: PPUSH
26646: CALL_OW 380
26650: GO 26669
// PrepareHuman ( false , i , skill ) ;
26652: LD_INT 0
26654: PPUSH
26655: LD_VAR 0 8
26659: PPUSH
26660: LD_VAR 0 4
26664: PPUSH
26665: CALL_OW 380
// end else
26669: GO 26688
// PrepareHuman ( false , i , skill ) ;
26671: LD_INT 0
26673: PPUSH
26674: LD_VAR 0 8
26678: PPUSH
26679: LD_VAR 0 4
26683: PPUSH
26684: CALL_OW 380
// un := CreateHuman ;
26688: LD_ADDR_VAR 0 14
26692: PUSH
26693: CALL_OW 44
26697: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26698: LD_ADDR_VAR 0 7
26702: PUSH
26703: LD_VAR 0 7
26707: PPUSH
26708: LD_INT 1
26710: PPUSH
26711: LD_VAR 0 14
26715: PPUSH
26716: CALL_OW 2
26720: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26721: LD_VAR 0 14
26725: PPUSH
26726: LD_VAR 0 12
26730: PUSH
26731: LD_INT 1
26733: ARRAY
26734: PPUSH
26735: CALL_OW 52
// end ;
26739: GO 26378
26741: POP
26742: POP
// end ;
26743: GO 25680
26745: POP
26746: POP
// result := result ^ buildings ;
26747: LD_ADDR_VAR 0 7
26751: PUSH
26752: LD_VAR 0 7
26756: PUSH
26757: LD_VAR 0 18
26761: ADD
26762: ST_TO_ADDR
// end else
26763: GO 26906
// begin for i = 1 to personel do
26765: LD_ADDR_VAR 0 8
26769: PUSH
26770: DOUBLE
26771: LD_INT 1
26773: DEC
26774: ST_TO_ADDR
26775: LD_VAR 0 6
26779: PUSH
26780: FOR_TO
26781: IFFALSE 26904
// begin if i > 4 then
26783: LD_VAR 0 8
26787: PUSH
26788: LD_INT 4
26790: GREATER
26791: IFFALSE 26795
// break ;
26793: GO 26904
// x := personel [ i ] ;
26795: LD_ADDR_VAR 0 13
26799: PUSH
26800: LD_VAR 0 6
26804: PUSH
26805: LD_VAR 0 8
26809: ARRAY
26810: ST_TO_ADDR
// if x = - 1 then
26811: LD_VAR 0 13
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: EQUAL
26820: IFFALSE 26824
// continue ;
26822: GO 26780
// PrepareHuman ( false , i , skill ) ;
26824: LD_INT 0
26826: PPUSH
26827: LD_VAR 0 8
26831: PPUSH
26832: LD_VAR 0 4
26836: PPUSH
26837: CALL_OW 380
// un := CreateHuman ;
26841: LD_ADDR_VAR 0 14
26845: PUSH
26846: CALL_OW 44
26850: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26851: LD_VAR 0 14
26855: PPUSH
26856: LD_VAR 0 1
26860: PPUSH
26861: CALL_OW 250
26865: PPUSH
26866: LD_VAR 0 1
26870: PPUSH
26871: CALL_OW 251
26875: PPUSH
26876: LD_INT 10
26878: PPUSH
26879: LD_INT 0
26881: PPUSH
26882: CALL_OW 50
// result := result ^ un ;
26886: LD_ADDR_VAR 0 7
26890: PUSH
26891: LD_VAR 0 7
26895: PUSH
26896: LD_VAR 0 14
26900: ADD
26901: ST_TO_ADDR
// end ;
26902: GO 26780
26904: POP
26905: POP
// end ; end ;
26906: LD_VAR 0 7
26910: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26911: LD_INT 0
26913: PPUSH
26914: PPUSH
26915: PPUSH
26916: PPUSH
26917: PPUSH
26918: PPUSH
26919: PPUSH
26920: PPUSH
26921: PPUSH
26922: PPUSH
26923: PPUSH
26924: PPUSH
26925: PPUSH
26926: PPUSH
26927: PPUSH
26928: PPUSH
// result := false ;
26929: LD_ADDR_VAR 0 3
26933: PUSH
26934: LD_INT 0
26936: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26937: LD_VAR 0 1
26941: NOT
26942: PUSH
26943: LD_VAR 0 1
26947: PPUSH
26948: CALL_OW 266
26952: PUSH
26953: LD_INT 32
26955: PUSH
26956: LD_INT 33
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: IN
26963: NOT
26964: OR
26965: IFFALSE 26969
// exit ;
26967: GO 28078
// nat := GetNation ( tower ) ;
26969: LD_ADDR_VAR 0 12
26973: PUSH
26974: LD_VAR 0 1
26978: PPUSH
26979: CALL_OW 248
26983: ST_TO_ADDR
// side := GetSide ( tower ) ;
26984: LD_ADDR_VAR 0 16
26988: PUSH
26989: LD_VAR 0 1
26993: PPUSH
26994: CALL_OW 255
26998: ST_TO_ADDR
// x := GetX ( tower ) ;
26999: LD_ADDR_VAR 0 10
27003: PUSH
27004: LD_VAR 0 1
27008: PPUSH
27009: CALL_OW 250
27013: ST_TO_ADDR
// y := GetY ( tower ) ;
27014: LD_ADDR_VAR 0 11
27018: PUSH
27019: LD_VAR 0 1
27023: PPUSH
27024: CALL_OW 251
27028: ST_TO_ADDR
// if not x or not y then
27029: LD_VAR 0 10
27033: NOT
27034: PUSH
27035: LD_VAR 0 11
27039: NOT
27040: OR
27041: IFFALSE 27045
// exit ;
27043: GO 28078
// weapon := 0 ;
27045: LD_ADDR_VAR 0 18
27049: PUSH
27050: LD_INT 0
27052: ST_TO_ADDR
// fac_list := [ ] ;
27053: LD_ADDR_VAR 0 17
27057: PUSH
27058: EMPTY
27059: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27060: LD_ADDR_VAR 0 6
27064: PUSH
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 274
27074: PPUSH
27075: LD_VAR 0 2
27079: PPUSH
27080: LD_INT 0
27082: PPUSH
27083: CALL 24649 0 3
27087: PPUSH
27088: LD_INT 30
27090: PUSH
27091: LD_INT 3
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PPUSH
27098: CALL_OW 72
27102: ST_TO_ADDR
// if not factories then
27103: LD_VAR 0 6
27107: NOT
27108: IFFALSE 27112
// exit ;
27110: GO 28078
// for i in factories do
27112: LD_ADDR_VAR 0 8
27116: PUSH
27117: LD_VAR 0 6
27121: PUSH
27122: FOR_IN
27123: IFFALSE 27148
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27125: LD_ADDR_VAR 0 17
27129: PUSH
27130: LD_VAR 0 17
27134: PUSH
27135: LD_VAR 0 8
27139: PPUSH
27140: CALL_OW 478
27144: UNION
27145: ST_TO_ADDR
27146: GO 27122
27148: POP
27149: POP
// if not fac_list then
27150: LD_VAR 0 17
27154: NOT
27155: IFFALSE 27159
// exit ;
27157: GO 28078
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27159: LD_ADDR_VAR 0 5
27163: PUSH
27164: LD_INT 4
27166: PUSH
27167: LD_INT 5
27169: PUSH
27170: LD_INT 9
27172: PUSH
27173: LD_INT 10
27175: PUSH
27176: LD_INT 6
27178: PUSH
27179: LD_INT 7
27181: PUSH
27182: LD_INT 11
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 27
27196: PUSH
27197: LD_INT 28
27199: PUSH
27200: LD_INT 26
27202: PUSH
27203: LD_INT 30
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 43
27214: PUSH
27215: LD_INT 44
27217: PUSH
27218: LD_INT 46
27220: PUSH
27221: LD_INT 45
27223: PUSH
27224: LD_INT 47
27226: PUSH
27227: LD_INT 49
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: PUSH
27243: LD_VAR 0 12
27247: ARRAY
27248: ST_TO_ADDR
// list := list isect fac_list ;
27249: LD_ADDR_VAR 0 5
27253: PUSH
27254: LD_VAR 0 5
27258: PUSH
27259: LD_VAR 0 17
27263: ISECT
27264: ST_TO_ADDR
// if not list then
27265: LD_VAR 0 5
27269: NOT
27270: IFFALSE 27274
// exit ;
27272: GO 28078
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27274: LD_VAR 0 12
27278: PUSH
27279: LD_INT 3
27281: EQUAL
27282: PUSH
27283: LD_INT 49
27285: PUSH
27286: LD_VAR 0 5
27290: IN
27291: AND
27292: PUSH
27293: LD_INT 31
27295: PPUSH
27296: LD_VAR 0 16
27300: PPUSH
27301: CALL_OW 321
27305: PUSH
27306: LD_INT 2
27308: EQUAL
27309: AND
27310: IFFALSE 27370
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27312: LD_INT 22
27314: PUSH
27315: LD_VAR 0 16
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 35
27326: PUSH
27327: LD_INT 49
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 91
27336: PUSH
27337: LD_VAR 0 1
27341: PUSH
27342: LD_INT 10
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: PPUSH
27355: CALL_OW 69
27359: NOT
27360: IFFALSE 27370
// weapon := ru_time_lapser ;
27362: LD_ADDR_VAR 0 18
27366: PUSH
27367: LD_INT 49
27369: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27370: LD_VAR 0 12
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: IN
27385: PUSH
27386: LD_INT 11
27388: PUSH
27389: LD_VAR 0 5
27393: IN
27394: PUSH
27395: LD_INT 30
27397: PUSH
27398: LD_VAR 0 5
27402: IN
27403: OR
27404: AND
27405: PUSH
27406: LD_INT 6
27408: PPUSH
27409: LD_VAR 0 16
27413: PPUSH
27414: CALL_OW 321
27418: PUSH
27419: LD_INT 2
27421: EQUAL
27422: AND
27423: IFFALSE 27588
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27425: LD_INT 22
27427: PUSH
27428: LD_VAR 0 16
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: PUSH
27440: LD_INT 35
27442: PUSH
27443: LD_INT 11
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 35
27452: PUSH
27453: LD_INT 30
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 91
27467: PUSH
27468: LD_VAR 0 1
27472: PUSH
27473: LD_INT 18
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: LIST
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: LIST
27485: PPUSH
27486: CALL_OW 69
27490: NOT
27491: PUSH
27492: LD_INT 22
27494: PUSH
27495: LD_VAR 0 16
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 2
27506: PUSH
27507: LD_INT 30
27509: PUSH
27510: LD_INT 32
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 30
27519: PUSH
27520: LD_INT 33
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 91
27534: PUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_INT 12
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: LIST
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: LIST
27552: PUSH
27553: EMPTY
27554: LIST
27555: PPUSH
27556: CALL_OW 69
27560: PUSH
27561: LD_INT 2
27563: GREATER
27564: AND
27565: IFFALSE 27588
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27567: LD_ADDR_VAR 0 18
27571: PUSH
27572: LD_INT 11
27574: PUSH
27575: LD_INT 30
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_VAR 0 12
27586: ARRAY
27587: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27588: LD_VAR 0 18
27592: NOT
27593: PUSH
27594: LD_INT 40
27596: PPUSH
27597: LD_VAR 0 16
27601: PPUSH
27602: CALL_OW 321
27606: PUSH
27607: LD_INT 2
27609: EQUAL
27610: AND
27611: PUSH
27612: LD_INT 7
27614: PUSH
27615: LD_VAR 0 5
27619: IN
27620: PUSH
27621: LD_INT 28
27623: PUSH
27624: LD_VAR 0 5
27628: IN
27629: OR
27630: PUSH
27631: LD_INT 45
27633: PUSH
27634: LD_VAR 0 5
27638: IN
27639: OR
27640: AND
27641: IFFALSE 27895
// begin hex := GetHexInfo ( x , y ) ;
27643: LD_ADDR_VAR 0 4
27647: PUSH
27648: LD_VAR 0 10
27652: PPUSH
27653: LD_VAR 0 11
27657: PPUSH
27658: CALL_OW 546
27662: ST_TO_ADDR
// if hex [ 1 ] then
27663: LD_VAR 0 4
27667: PUSH
27668: LD_INT 1
27670: ARRAY
27671: IFFALSE 27675
// exit ;
27673: GO 28078
// height := hex [ 2 ] ;
27675: LD_ADDR_VAR 0 15
27679: PUSH
27680: LD_VAR 0 4
27684: PUSH
27685: LD_INT 2
27687: ARRAY
27688: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27689: LD_ADDR_VAR 0 14
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: LD_INT 3
27702: PUSH
27703: LD_INT 5
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: ST_TO_ADDR
// for i in tmp do
27712: LD_ADDR_VAR 0 8
27716: PUSH
27717: LD_VAR 0 14
27721: PUSH
27722: FOR_IN
27723: IFFALSE 27893
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27725: LD_ADDR_VAR 0 9
27729: PUSH
27730: LD_VAR 0 10
27734: PPUSH
27735: LD_VAR 0 8
27739: PPUSH
27740: LD_INT 5
27742: PPUSH
27743: CALL_OW 272
27747: PUSH
27748: LD_VAR 0 11
27752: PPUSH
27753: LD_VAR 0 8
27757: PPUSH
27758: LD_INT 5
27760: PPUSH
27761: CALL_OW 273
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27770: LD_VAR 0 9
27774: PUSH
27775: LD_INT 1
27777: ARRAY
27778: PPUSH
27779: LD_VAR 0 9
27783: PUSH
27784: LD_INT 2
27786: ARRAY
27787: PPUSH
27788: CALL_OW 488
27792: IFFALSE 27891
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27794: LD_ADDR_VAR 0 4
27798: PUSH
27799: LD_VAR 0 9
27803: PUSH
27804: LD_INT 1
27806: ARRAY
27807: PPUSH
27808: LD_VAR 0 9
27812: PUSH
27813: LD_INT 2
27815: ARRAY
27816: PPUSH
27817: CALL_OW 546
27821: ST_TO_ADDR
// if hex [ 1 ] then
27822: LD_VAR 0 4
27826: PUSH
27827: LD_INT 1
27829: ARRAY
27830: IFFALSE 27834
// continue ;
27832: GO 27722
// h := hex [ 2 ] ;
27834: LD_ADDR_VAR 0 13
27838: PUSH
27839: LD_VAR 0 4
27843: PUSH
27844: LD_INT 2
27846: ARRAY
27847: ST_TO_ADDR
// if h + 7 < height then
27848: LD_VAR 0 13
27852: PUSH
27853: LD_INT 7
27855: PLUS
27856: PUSH
27857: LD_VAR 0 15
27861: LESS
27862: IFFALSE 27891
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27864: LD_ADDR_VAR 0 18
27868: PUSH
27869: LD_INT 7
27871: PUSH
27872: LD_INT 28
27874: PUSH
27875: LD_INT 45
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: PUSH
27883: LD_VAR 0 12
27887: ARRAY
27888: ST_TO_ADDR
// break ;
27889: GO 27893
// end ; end ; end ;
27891: GO 27722
27893: POP
27894: POP
// end ; if not weapon then
27895: LD_VAR 0 18
27899: NOT
27900: IFFALSE 27960
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27902: LD_ADDR_VAR 0 5
27906: PUSH
27907: LD_VAR 0 5
27911: PUSH
27912: LD_INT 11
27914: PUSH
27915: LD_INT 30
27917: PUSH
27918: LD_INT 49
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: DIFF
27926: ST_TO_ADDR
// if not list then
27927: LD_VAR 0 5
27931: NOT
27932: IFFALSE 27936
// exit ;
27934: GO 28078
// weapon := list [ rand ( 1 , list ) ] ;
27936: LD_ADDR_VAR 0 18
27940: PUSH
27941: LD_VAR 0 5
27945: PUSH
27946: LD_INT 1
27948: PPUSH
27949: LD_VAR 0 5
27953: PPUSH
27954: CALL_OW 12
27958: ARRAY
27959: ST_TO_ADDR
// end ; if weapon then
27960: LD_VAR 0 18
27964: IFFALSE 28078
// begin tmp := CostOfWeapon ( weapon ) ;
27966: LD_ADDR_VAR 0 14
27970: PUSH
27971: LD_VAR 0 18
27975: PPUSH
27976: CALL_OW 451
27980: ST_TO_ADDR
// j := GetBase ( tower ) ;
27981: LD_ADDR_VAR 0 9
27985: PUSH
27986: LD_VAR 0 1
27990: PPUSH
27991: CALL_OW 274
27995: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27996: LD_VAR 0 9
28000: PPUSH
28001: LD_INT 1
28003: PPUSH
28004: CALL_OW 275
28008: PUSH
28009: LD_VAR 0 14
28013: PUSH
28014: LD_INT 1
28016: ARRAY
28017: GREATEREQUAL
28018: PUSH
28019: LD_VAR 0 9
28023: PPUSH
28024: LD_INT 2
28026: PPUSH
28027: CALL_OW 275
28031: PUSH
28032: LD_VAR 0 14
28036: PUSH
28037: LD_INT 2
28039: ARRAY
28040: GREATEREQUAL
28041: AND
28042: PUSH
28043: LD_VAR 0 9
28047: PPUSH
28048: LD_INT 3
28050: PPUSH
28051: CALL_OW 275
28055: PUSH
28056: LD_VAR 0 14
28060: PUSH
28061: LD_INT 3
28063: ARRAY
28064: GREATEREQUAL
28065: AND
28066: IFFALSE 28078
// result := weapon ;
28068: LD_ADDR_VAR 0 3
28072: PUSH
28073: LD_VAR 0 18
28077: ST_TO_ADDR
// end ; end ;
28078: LD_VAR 0 3
28082: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28083: LD_INT 0
28085: PPUSH
28086: PPUSH
// result := true ;
28087: LD_ADDR_VAR 0 3
28091: PUSH
28092: LD_INT 1
28094: ST_TO_ADDR
// if array1 = array2 then
28095: LD_VAR 0 1
28099: PUSH
28100: LD_VAR 0 2
28104: EQUAL
28105: IFFALSE 28165
// begin for i = 1 to array1 do
28107: LD_ADDR_VAR 0 4
28111: PUSH
28112: DOUBLE
28113: LD_INT 1
28115: DEC
28116: ST_TO_ADDR
28117: LD_VAR 0 1
28121: PUSH
28122: FOR_TO
28123: IFFALSE 28161
// if array1 [ i ] <> array2 [ i ] then
28125: LD_VAR 0 1
28129: PUSH
28130: LD_VAR 0 4
28134: ARRAY
28135: PUSH
28136: LD_VAR 0 2
28140: PUSH
28141: LD_VAR 0 4
28145: ARRAY
28146: NONEQUAL
28147: IFFALSE 28159
// begin result := false ;
28149: LD_ADDR_VAR 0 3
28153: PUSH
28154: LD_INT 0
28156: ST_TO_ADDR
// break ;
28157: GO 28161
// end ;
28159: GO 28122
28161: POP
28162: POP
// end else
28163: GO 28173
// result := false ;
28165: LD_ADDR_VAR 0 3
28169: PUSH
28170: LD_INT 0
28172: ST_TO_ADDR
// end ;
28173: LD_VAR 0 3
28177: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28178: LD_INT 0
28180: PPUSH
28181: PPUSH
// if not array1 or not array2 then
28182: LD_VAR 0 1
28186: NOT
28187: PUSH
28188: LD_VAR 0 2
28192: NOT
28193: OR
28194: IFFALSE 28198
// exit ;
28196: GO 28262
// result := true ;
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: LD_INT 1
28205: ST_TO_ADDR
// for i = 1 to array1 do
28206: LD_ADDR_VAR 0 4
28210: PUSH
28211: DOUBLE
28212: LD_INT 1
28214: DEC
28215: ST_TO_ADDR
28216: LD_VAR 0 1
28220: PUSH
28221: FOR_TO
28222: IFFALSE 28260
// if array1 [ i ] <> array2 [ i ] then
28224: LD_VAR 0 1
28228: PUSH
28229: LD_VAR 0 4
28233: ARRAY
28234: PUSH
28235: LD_VAR 0 2
28239: PUSH
28240: LD_VAR 0 4
28244: ARRAY
28245: NONEQUAL
28246: IFFALSE 28258
// begin result := false ;
28248: LD_ADDR_VAR 0 3
28252: PUSH
28253: LD_INT 0
28255: ST_TO_ADDR
// break ;
28256: GO 28260
// end ;
28258: GO 28221
28260: POP
28261: POP
// end ;
28262: LD_VAR 0 3
28266: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28267: LD_INT 0
28269: PPUSH
28270: PPUSH
28271: PPUSH
// pom := GetBase ( fac ) ;
28272: LD_ADDR_VAR 0 5
28276: PUSH
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL_OW 274
28286: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28287: LD_ADDR_VAR 0 4
28291: PUSH
28292: LD_VAR 0 2
28296: PUSH
28297: LD_INT 1
28299: ARRAY
28300: PPUSH
28301: LD_VAR 0 2
28305: PUSH
28306: LD_INT 2
28308: ARRAY
28309: PPUSH
28310: LD_VAR 0 2
28314: PUSH
28315: LD_INT 3
28317: ARRAY
28318: PPUSH
28319: LD_VAR 0 2
28323: PUSH
28324: LD_INT 4
28326: ARRAY
28327: PPUSH
28328: CALL_OW 449
28332: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28333: LD_ADDR_VAR 0 3
28337: PUSH
28338: LD_VAR 0 5
28342: PPUSH
28343: LD_INT 1
28345: PPUSH
28346: CALL_OW 275
28350: PUSH
28351: LD_VAR 0 4
28355: PUSH
28356: LD_INT 1
28358: ARRAY
28359: GREATEREQUAL
28360: PUSH
28361: LD_VAR 0 5
28365: PPUSH
28366: LD_INT 2
28368: PPUSH
28369: CALL_OW 275
28373: PUSH
28374: LD_VAR 0 4
28378: PUSH
28379: LD_INT 2
28381: ARRAY
28382: GREATEREQUAL
28383: AND
28384: PUSH
28385: LD_VAR 0 5
28389: PPUSH
28390: LD_INT 3
28392: PPUSH
28393: CALL_OW 275
28397: PUSH
28398: LD_VAR 0 4
28402: PUSH
28403: LD_INT 3
28405: ARRAY
28406: GREATEREQUAL
28407: AND
28408: ST_TO_ADDR
// end ;
28409: LD_VAR 0 3
28413: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28414: LD_INT 0
28416: PPUSH
28417: PPUSH
28418: PPUSH
28419: PPUSH
// pom := GetBase ( building ) ;
28420: LD_ADDR_VAR 0 3
28424: PUSH
28425: LD_VAR 0 1
28429: PPUSH
28430: CALL_OW 274
28434: ST_TO_ADDR
// if not pom then
28435: LD_VAR 0 3
28439: NOT
28440: IFFALSE 28444
// exit ;
28442: GO 28614
// btype := GetBType ( building ) ;
28444: LD_ADDR_VAR 0 5
28448: PUSH
28449: LD_VAR 0 1
28453: PPUSH
28454: CALL_OW 266
28458: ST_TO_ADDR
// if btype = b_armoury then
28459: LD_VAR 0 5
28463: PUSH
28464: LD_INT 4
28466: EQUAL
28467: IFFALSE 28477
// btype := b_barracks ;
28469: LD_ADDR_VAR 0 5
28473: PUSH
28474: LD_INT 5
28476: ST_TO_ADDR
// if btype = b_depot then
28477: LD_VAR 0 5
28481: PUSH
28482: LD_INT 0
28484: EQUAL
28485: IFFALSE 28495
// btype := b_warehouse ;
28487: LD_ADDR_VAR 0 5
28491: PUSH
28492: LD_INT 1
28494: ST_TO_ADDR
// if btype = b_workshop then
28495: LD_VAR 0 5
28499: PUSH
28500: LD_INT 2
28502: EQUAL
28503: IFFALSE 28513
// btype := b_factory ;
28505: LD_ADDR_VAR 0 5
28509: PUSH
28510: LD_INT 3
28512: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28513: LD_ADDR_VAR 0 4
28517: PUSH
28518: LD_VAR 0 5
28522: PPUSH
28523: LD_VAR 0 1
28527: PPUSH
28528: CALL_OW 248
28532: PPUSH
28533: CALL_OW 450
28537: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28538: LD_ADDR_VAR 0 2
28542: PUSH
28543: LD_VAR 0 3
28547: PPUSH
28548: LD_INT 1
28550: PPUSH
28551: CALL_OW 275
28555: PUSH
28556: LD_VAR 0 4
28560: PUSH
28561: LD_INT 1
28563: ARRAY
28564: GREATEREQUAL
28565: PUSH
28566: LD_VAR 0 3
28570: PPUSH
28571: LD_INT 2
28573: PPUSH
28574: CALL_OW 275
28578: PUSH
28579: LD_VAR 0 4
28583: PUSH
28584: LD_INT 2
28586: ARRAY
28587: GREATEREQUAL
28588: AND
28589: PUSH
28590: LD_VAR 0 3
28594: PPUSH
28595: LD_INT 3
28597: PPUSH
28598: CALL_OW 275
28602: PUSH
28603: LD_VAR 0 4
28607: PUSH
28608: LD_INT 3
28610: ARRAY
28611: GREATEREQUAL
28612: AND
28613: ST_TO_ADDR
// end ;
28614: LD_VAR 0 2
28618: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28619: LD_INT 0
28621: PPUSH
28622: PPUSH
28623: PPUSH
// pom := GetBase ( building ) ;
28624: LD_ADDR_VAR 0 4
28628: PUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 274
28638: ST_TO_ADDR
// if not pom then
28639: LD_VAR 0 4
28643: NOT
28644: IFFALSE 28648
// exit ;
28646: GO 28749
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28648: LD_ADDR_VAR 0 5
28652: PUSH
28653: LD_VAR 0 2
28657: PPUSH
28658: LD_VAR 0 1
28662: PPUSH
28663: CALL_OW 248
28667: PPUSH
28668: CALL_OW 450
28672: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28673: LD_ADDR_VAR 0 3
28677: PUSH
28678: LD_VAR 0 4
28682: PPUSH
28683: LD_INT 1
28685: PPUSH
28686: CALL_OW 275
28690: PUSH
28691: LD_VAR 0 5
28695: PUSH
28696: LD_INT 1
28698: ARRAY
28699: GREATEREQUAL
28700: PUSH
28701: LD_VAR 0 4
28705: PPUSH
28706: LD_INT 2
28708: PPUSH
28709: CALL_OW 275
28713: PUSH
28714: LD_VAR 0 5
28718: PUSH
28719: LD_INT 2
28721: ARRAY
28722: GREATEREQUAL
28723: AND
28724: PUSH
28725: LD_VAR 0 4
28729: PPUSH
28730: LD_INT 3
28732: PPUSH
28733: CALL_OW 275
28737: PUSH
28738: LD_VAR 0 5
28742: PUSH
28743: LD_INT 3
28745: ARRAY
28746: GREATEREQUAL
28747: AND
28748: ST_TO_ADDR
// end ;
28749: LD_VAR 0 3
28753: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28754: LD_INT 0
28756: PPUSH
28757: PPUSH
28758: PPUSH
28759: PPUSH
28760: PPUSH
28761: PPUSH
28762: PPUSH
28763: PPUSH
28764: PPUSH
28765: PPUSH
28766: PPUSH
// result := false ;
28767: LD_ADDR_VAR 0 8
28771: PUSH
28772: LD_INT 0
28774: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28775: LD_VAR 0 5
28779: NOT
28780: PUSH
28781: LD_VAR 0 1
28785: NOT
28786: OR
28787: PUSH
28788: LD_VAR 0 2
28792: NOT
28793: OR
28794: PUSH
28795: LD_VAR 0 3
28799: NOT
28800: OR
28801: IFFALSE 28805
// exit ;
28803: GO 29619
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28805: LD_ADDR_VAR 0 14
28809: PUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: LD_VAR 0 2
28819: PPUSH
28820: LD_VAR 0 3
28824: PPUSH
28825: LD_VAR 0 4
28829: PPUSH
28830: LD_VAR 0 5
28834: PUSH
28835: LD_INT 1
28837: ARRAY
28838: PPUSH
28839: CALL_OW 248
28843: PPUSH
28844: LD_INT 0
28846: PPUSH
28847: CALL 30852 0 6
28851: ST_TO_ADDR
// if not hexes then
28852: LD_VAR 0 14
28856: NOT
28857: IFFALSE 28861
// exit ;
28859: GO 29619
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28861: LD_ADDR_VAR 0 17
28865: PUSH
28866: LD_VAR 0 5
28870: PPUSH
28871: LD_INT 22
28873: PUSH
28874: LD_VAR 0 13
28878: PPUSH
28879: CALL_OW 255
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 2
28890: PUSH
28891: LD_INT 30
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 30
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PPUSH
28920: CALL_OW 72
28924: ST_TO_ADDR
// for i = 1 to hexes do
28925: LD_ADDR_VAR 0 9
28929: PUSH
28930: DOUBLE
28931: LD_INT 1
28933: DEC
28934: ST_TO_ADDR
28935: LD_VAR 0 14
28939: PUSH
28940: FOR_TO
28941: IFFALSE 29617
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28943: LD_ADDR_VAR 0 13
28947: PUSH
28948: LD_VAR 0 14
28952: PUSH
28953: LD_VAR 0 9
28957: ARRAY
28958: PUSH
28959: LD_INT 1
28961: ARRAY
28962: PPUSH
28963: LD_VAR 0 14
28967: PUSH
28968: LD_VAR 0 9
28972: ARRAY
28973: PUSH
28974: LD_INT 2
28976: ARRAY
28977: PPUSH
28978: CALL_OW 428
28982: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28983: LD_VAR 0 14
28987: PUSH
28988: LD_VAR 0 9
28992: ARRAY
28993: PUSH
28994: LD_INT 1
28996: ARRAY
28997: PPUSH
28998: LD_VAR 0 14
29002: PUSH
29003: LD_VAR 0 9
29007: ARRAY
29008: PUSH
29009: LD_INT 2
29011: ARRAY
29012: PPUSH
29013: CALL_OW 351
29017: PUSH
29018: LD_VAR 0 14
29022: PUSH
29023: LD_VAR 0 9
29027: ARRAY
29028: PUSH
29029: LD_INT 1
29031: ARRAY
29032: PPUSH
29033: LD_VAR 0 14
29037: PUSH
29038: LD_VAR 0 9
29042: ARRAY
29043: PUSH
29044: LD_INT 2
29046: ARRAY
29047: PPUSH
29048: CALL_OW 488
29052: NOT
29053: OR
29054: PUSH
29055: LD_VAR 0 13
29059: PPUSH
29060: CALL_OW 247
29064: PUSH
29065: LD_INT 3
29067: EQUAL
29068: OR
29069: IFFALSE 29075
// exit ;
29071: POP
29072: POP
29073: GO 29619
// if not tmp then
29075: LD_VAR 0 13
29079: NOT
29080: IFFALSE 29084
// continue ;
29082: GO 28940
// result := true ;
29084: LD_ADDR_VAR 0 8
29088: PUSH
29089: LD_INT 1
29091: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29092: LD_VAR 0 6
29096: PUSH
29097: LD_VAR 0 13
29101: PPUSH
29102: CALL_OW 247
29106: PUSH
29107: LD_INT 2
29109: EQUAL
29110: AND
29111: PUSH
29112: LD_VAR 0 13
29116: PPUSH
29117: CALL_OW 263
29121: PUSH
29122: LD_INT 1
29124: EQUAL
29125: AND
29126: IFFALSE 29290
// begin if IsDrivenBy ( tmp ) then
29128: LD_VAR 0 13
29132: PPUSH
29133: CALL_OW 311
29137: IFFALSE 29141
// continue ;
29139: GO 28940
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29141: LD_VAR 0 6
29145: PPUSH
29146: LD_INT 3
29148: PUSH
29149: LD_INT 60
29151: PUSH
29152: EMPTY
29153: LIST
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: LD_INT 55
29164: PUSH
29165: EMPTY
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PPUSH
29176: CALL_OW 72
29180: IFFALSE 29288
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29182: LD_ADDR_VAR 0 18
29186: PUSH
29187: LD_VAR 0 6
29191: PPUSH
29192: LD_INT 3
29194: PUSH
29195: LD_INT 60
29197: PUSH
29198: EMPTY
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 3
29207: PUSH
29208: LD_INT 55
29210: PUSH
29211: EMPTY
29212: LIST
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PPUSH
29222: CALL_OW 72
29226: PUSH
29227: LD_INT 1
29229: ARRAY
29230: ST_TO_ADDR
// if IsInUnit ( driver ) then
29231: LD_VAR 0 18
29235: PPUSH
29236: CALL_OW 310
29240: IFFALSE 29251
// ComExit ( driver ) ;
29242: LD_VAR 0 18
29246: PPUSH
29247: CALL 54631 0 1
// AddComEnterUnit ( driver , tmp ) ;
29251: LD_VAR 0 18
29255: PPUSH
29256: LD_VAR 0 13
29260: PPUSH
29261: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29265: LD_VAR 0 18
29269: PPUSH
29270: LD_VAR 0 7
29274: PPUSH
29275: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29279: LD_VAR 0 18
29283: PPUSH
29284: CALL_OW 181
// end ; continue ;
29288: GO 28940
// end ; if not cleaners or not tmp in cleaners then
29290: LD_VAR 0 6
29294: NOT
29295: PUSH
29296: LD_VAR 0 13
29300: PUSH
29301: LD_VAR 0 6
29305: IN
29306: NOT
29307: OR
29308: IFFALSE 29615
// begin if dep then
29310: LD_VAR 0 17
29314: IFFALSE 29450
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29316: LD_ADDR_VAR 0 16
29320: PUSH
29321: LD_VAR 0 17
29325: PUSH
29326: LD_INT 1
29328: ARRAY
29329: PPUSH
29330: CALL_OW 250
29334: PPUSH
29335: LD_VAR 0 17
29339: PUSH
29340: LD_INT 1
29342: ARRAY
29343: PPUSH
29344: CALL_OW 254
29348: PPUSH
29349: LD_INT 5
29351: PPUSH
29352: CALL_OW 272
29356: PUSH
29357: LD_VAR 0 17
29361: PUSH
29362: LD_INT 1
29364: ARRAY
29365: PPUSH
29366: CALL_OW 251
29370: PPUSH
29371: LD_VAR 0 17
29375: PUSH
29376: LD_INT 1
29378: ARRAY
29379: PPUSH
29380: CALL_OW 254
29384: PPUSH
29385: LD_INT 5
29387: PPUSH
29388: CALL_OW 273
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29397: LD_VAR 0 16
29401: PUSH
29402: LD_INT 1
29404: ARRAY
29405: PPUSH
29406: LD_VAR 0 16
29410: PUSH
29411: LD_INT 2
29413: ARRAY
29414: PPUSH
29415: CALL_OW 488
29419: IFFALSE 29450
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29421: LD_VAR 0 13
29425: PPUSH
29426: LD_VAR 0 16
29430: PUSH
29431: LD_INT 1
29433: ARRAY
29434: PPUSH
29435: LD_VAR 0 16
29439: PUSH
29440: LD_INT 2
29442: ARRAY
29443: PPUSH
29444: CALL_OW 111
// continue ;
29448: GO 28940
// end ; end ; r := GetDir ( tmp ) ;
29450: LD_ADDR_VAR 0 15
29454: PUSH
29455: LD_VAR 0 13
29459: PPUSH
29460: CALL_OW 254
29464: ST_TO_ADDR
// if r = 5 then
29465: LD_VAR 0 15
29469: PUSH
29470: LD_INT 5
29472: EQUAL
29473: IFFALSE 29483
// r := 0 ;
29475: LD_ADDR_VAR 0 15
29479: PUSH
29480: LD_INT 0
29482: ST_TO_ADDR
// for j = r to 5 do
29483: LD_ADDR_VAR 0 10
29487: PUSH
29488: DOUBLE
29489: LD_VAR 0 15
29493: DEC
29494: ST_TO_ADDR
29495: LD_INT 5
29497: PUSH
29498: FOR_TO
29499: IFFALSE 29613
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29501: LD_ADDR_VAR 0 11
29505: PUSH
29506: LD_VAR 0 13
29510: PPUSH
29511: CALL_OW 250
29515: PPUSH
29516: LD_VAR 0 10
29520: PPUSH
29521: LD_INT 2
29523: PPUSH
29524: CALL_OW 272
29528: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29529: LD_ADDR_VAR 0 12
29533: PUSH
29534: LD_VAR 0 13
29538: PPUSH
29539: CALL_OW 251
29543: PPUSH
29544: LD_VAR 0 10
29548: PPUSH
29549: LD_INT 2
29551: PPUSH
29552: CALL_OW 273
29556: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29557: LD_VAR 0 11
29561: PPUSH
29562: LD_VAR 0 12
29566: PPUSH
29567: CALL_OW 488
29571: PUSH
29572: LD_VAR 0 11
29576: PPUSH
29577: LD_VAR 0 12
29581: PPUSH
29582: CALL_OW 428
29586: NOT
29587: AND
29588: IFFALSE 29611
// begin ComMoveXY ( tmp , _x , _y ) ;
29590: LD_VAR 0 13
29594: PPUSH
29595: LD_VAR 0 11
29599: PPUSH
29600: LD_VAR 0 12
29604: PPUSH
29605: CALL_OW 111
// break ;
29609: GO 29613
// end ; end ;
29611: GO 29498
29613: POP
29614: POP
// end ; end ;
29615: GO 28940
29617: POP
29618: POP
// end ;
29619: LD_VAR 0 8
29623: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29624: LD_INT 0
29626: PPUSH
// result := true ;
29627: LD_ADDR_VAR 0 3
29631: PUSH
29632: LD_INT 1
29634: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29635: LD_VAR 0 2
29639: PUSH
29640: LD_INT 24
29642: DOUBLE
29643: EQUAL
29644: IFTRUE 29654
29646: LD_INT 33
29648: DOUBLE
29649: EQUAL
29650: IFTRUE 29654
29652: GO 29679
29654: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29655: LD_ADDR_VAR 0 3
29659: PUSH
29660: LD_INT 32
29662: PPUSH
29663: LD_VAR 0 1
29667: PPUSH
29668: CALL_OW 321
29672: PUSH
29673: LD_INT 2
29675: EQUAL
29676: ST_TO_ADDR
29677: GO 29995
29679: LD_INT 20
29681: DOUBLE
29682: EQUAL
29683: IFTRUE 29687
29685: GO 29712
29687: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29688: LD_ADDR_VAR 0 3
29692: PUSH
29693: LD_INT 6
29695: PPUSH
29696: LD_VAR 0 1
29700: PPUSH
29701: CALL_OW 321
29705: PUSH
29706: LD_INT 2
29708: EQUAL
29709: ST_TO_ADDR
29710: GO 29995
29712: LD_INT 22
29714: DOUBLE
29715: EQUAL
29716: IFTRUE 29726
29718: LD_INT 36
29720: DOUBLE
29721: EQUAL
29722: IFTRUE 29726
29724: GO 29751
29726: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29727: LD_ADDR_VAR 0 3
29731: PUSH
29732: LD_INT 15
29734: PPUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 321
29744: PUSH
29745: LD_INT 2
29747: EQUAL
29748: ST_TO_ADDR
29749: GO 29995
29751: LD_INT 30
29753: DOUBLE
29754: EQUAL
29755: IFTRUE 29759
29757: GO 29784
29759: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29760: LD_ADDR_VAR 0 3
29764: PUSH
29765: LD_INT 20
29767: PPUSH
29768: LD_VAR 0 1
29772: PPUSH
29773: CALL_OW 321
29777: PUSH
29778: LD_INT 2
29780: EQUAL
29781: ST_TO_ADDR
29782: GO 29995
29784: LD_INT 28
29786: DOUBLE
29787: EQUAL
29788: IFTRUE 29798
29790: LD_INT 21
29792: DOUBLE
29793: EQUAL
29794: IFTRUE 29798
29796: GO 29823
29798: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29799: LD_ADDR_VAR 0 3
29803: PUSH
29804: LD_INT 21
29806: PPUSH
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL_OW 321
29816: PUSH
29817: LD_INT 2
29819: EQUAL
29820: ST_TO_ADDR
29821: GO 29995
29823: LD_INT 16
29825: DOUBLE
29826: EQUAL
29827: IFTRUE 29831
29829: GO 29856
29831: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29832: LD_ADDR_VAR 0 3
29836: PUSH
29837: LD_INT 84
29839: PPUSH
29840: LD_VAR 0 1
29844: PPUSH
29845: CALL_OW 321
29849: PUSH
29850: LD_INT 2
29852: EQUAL
29853: ST_TO_ADDR
29854: GO 29995
29856: LD_INT 19
29858: DOUBLE
29859: EQUAL
29860: IFTRUE 29870
29862: LD_INT 23
29864: DOUBLE
29865: EQUAL
29866: IFTRUE 29870
29868: GO 29895
29870: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29871: LD_ADDR_VAR 0 3
29875: PUSH
29876: LD_INT 83
29878: PPUSH
29879: LD_VAR 0 1
29883: PPUSH
29884: CALL_OW 321
29888: PUSH
29889: LD_INT 2
29891: EQUAL
29892: ST_TO_ADDR
29893: GO 29995
29895: LD_INT 17
29897: DOUBLE
29898: EQUAL
29899: IFTRUE 29903
29901: GO 29928
29903: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29904: LD_ADDR_VAR 0 3
29908: PUSH
29909: LD_INT 39
29911: PPUSH
29912: LD_VAR 0 1
29916: PPUSH
29917: CALL_OW 321
29921: PUSH
29922: LD_INT 2
29924: EQUAL
29925: ST_TO_ADDR
29926: GO 29995
29928: LD_INT 18
29930: DOUBLE
29931: EQUAL
29932: IFTRUE 29936
29934: GO 29961
29936: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29937: LD_ADDR_VAR 0 3
29941: PUSH
29942: LD_INT 40
29944: PPUSH
29945: LD_VAR 0 1
29949: PPUSH
29950: CALL_OW 321
29954: PUSH
29955: LD_INT 2
29957: EQUAL
29958: ST_TO_ADDR
29959: GO 29995
29961: LD_INT 27
29963: DOUBLE
29964: EQUAL
29965: IFTRUE 29969
29967: GO 29994
29969: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29970: LD_ADDR_VAR 0 3
29974: PUSH
29975: LD_INT 35
29977: PPUSH
29978: LD_VAR 0 1
29982: PPUSH
29983: CALL_OW 321
29987: PUSH
29988: LD_INT 2
29990: EQUAL
29991: ST_TO_ADDR
29992: GO 29995
29994: POP
// end ;
29995: LD_VAR 0 3
29999: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30000: LD_INT 0
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
30012: PPUSH
// result := false ;
30013: LD_ADDR_VAR 0 6
30017: PUSH
30018: LD_INT 0
30020: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30021: LD_VAR 0 1
30025: NOT
30026: PUSH
30027: LD_VAR 0 1
30031: PPUSH
30032: CALL_OW 266
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: IN
30047: NOT
30048: OR
30049: PUSH
30050: LD_VAR 0 2
30054: NOT
30055: OR
30056: PUSH
30057: LD_VAR 0 5
30061: PUSH
30062: LD_INT 0
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: LD_INT 2
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: LD_INT 4
30076: PUSH
30077: LD_INT 5
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: IN
30088: NOT
30089: OR
30090: PUSH
30091: LD_VAR 0 3
30095: PPUSH
30096: LD_VAR 0 4
30100: PPUSH
30101: CALL_OW 488
30105: NOT
30106: OR
30107: IFFALSE 30111
// exit ;
30109: GO 30847
// side := GetSide ( depot ) ;
30111: LD_ADDR_VAR 0 9
30115: PUSH
30116: LD_VAR 0 1
30120: PPUSH
30121: CALL_OW 255
30125: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30126: LD_VAR 0 9
30130: PPUSH
30131: LD_VAR 0 2
30135: PPUSH
30136: CALL 29624 0 2
30140: NOT
30141: IFFALSE 30145
// exit ;
30143: GO 30847
// pom := GetBase ( depot ) ;
30145: LD_ADDR_VAR 0 10
30149: PUSH
30150: LD_VAR 0 1
30154: PPUSH
30155: CALL_OW 274
30159: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30160: LD_ADDR_VAR 0 11
30164: PUSH
30165: LD_VAR 0 2
30169: PPUSH
30170: LD_VAR 0 1
30174: PPUSH
30175: CALL_OW 248
30179: PPUSH
30180: CALL_OW 450
30184: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30185: LD_VAR 0 10
30189: PPUSH
30190: LD_INT 1
30192: PPUSH
30193: CALL_OW 275
30197: PUSH
30198: LD_VAR 0 11
30202: PUSH
30203: LD_INT 1
30205: ARRAY
30206: GREATEREQUAL
30207: PUSH
30208: LD_VAR 0 10
30212: PPUSH
30213: LD_INT 2
30215: PPUSH
30216: CALL_OW 275
30220: PUSH
30221: LD_VAR 0 11
30225: PUSH
30226: LD_INT 2
30228: ARRAY
30229: GREATEREQUAL
30230: AND
30231: PUSH
30232: LD_VAR 0 10
30236: PPUSH
30237: LD_INT 3
30239: PPUSH
30240: CALL_OW 275
30244: PUSH
30245: LD_VAR 0 11
30249: PUSH
30250: LD_INT 3
30252: ARRAY
30253: GREATEREQUAL
30254: AND
30255: NOT
30256: IFFALSE 30260
// exit ;
30258: GO 30847
// if GetBType ( depot ) = b_depot then
30260: LD_VAR 0 1
30264: PPUSH
30265: CALL_OW 266
30269: PUSH
30270: LD_INT 0
30272: EQUAL
30273: IFFALSE 30285
// dist := 28 else
30275: LD_ADDR_VAR 0 14
30279: PUSH
30280: LD_INT 28
30282: ST_TO_ADDR
30283: GO 30293
// dist := 36 ;
30285: LD_ADDR_VAR 0 14
30289: PUSH
30290: LD_INT 36
30292: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30293: LD_VAR 0 1
30297: PPUSH
30298: LD_VAR 0 3
30302: PPUSH
30303: LD_VAR 0 4
30307: PPUSH
30308: CALL_OW 297
30312: PUSH
30313: LD_VAR 0 14
30317: GREATER
30318: IFFALSE 30322
// exit ;
30320: GO 30847
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30322: LD_ADDR_VAR 0 12
30326: PUSH
30327: LD_VAR 0 2
30331: PPUSH
30332: LD_VAR 0 3
30336: PPUSH
30337: LD_VAR 0 4
30341: PPUSH
30342: LD_VAR 0 5
30346: PPUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL_OW 248
30356: PPUSH
30357: LD_INT 0
30359: PPUSH
30360: CALL 30852 0 6
30364: ST_TO_ADDR
// if not hexes then
30365: LD_VAR 0 12
30369: NOT
30370: IFFALSE 30374
// exit ;
30372: GO 30847
// hex := GetHexInfo ( x , y ) ;
30374: LD_ADDR_VAR 0 15
30378: PUSH
30379: LD_VAR 0 3
30383: PPUSH
30384: LD_VAR 0 4
30388: PPUSH
30389: CALL_OW 546
30393: ST_TO_ADDR
// if hex [ 1 ] then
30394: LD_VAR 0 15
30398: PUSH
30399: LD_INT 1
30401: ARRAY
30402: IFFALSE 30406
// exit ;
30404: GO 30847
// height := hex [ 2 ] ;
30406: LD_ADDR_VAR 0 13
30410: PUSH
30411: LD_VAR 0 15
30415: PUSH
30416: LD_INT 2
30418: ARRAY
30419: ST_TO_ADDR
// for i = 1 to hexes do
30420: LD_ADDR_VAR 0 7
30424: PUSH
30425: DOUBLE
30426: LD_INT 1
30428: DEC
30429: ST_TO_ADDR
30430: LD_VAR 0 12
30434: PUSH
30435: FOR_TO
30436: IFFALSE 30766
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30438: LD_VAR 0 12
30442: PUSH
30443: LD_VAR 0 7
30447: ARRAY
30448: PUSH
30449: LD_INT 1
30451: ARRAY
30452: PPUSH
30453: LD_VAR 0 12
30457: PUSH
30458: LD_VAR 0 7
30462: ARRAY
30463: PUSH
30464: LD_INT 2
30466: ARRAY
30467: PPUSH
30468: CALL_OW 488
30472: NOT
30473: PUSH
30474: LD_VAR 0 12
30478: PUSH
30479: LD_VAR 0 7
30483: ARRAY
30484: PUSH
30485: LD_INT 1
30487: ARRAY
30488: PPUSH
30489: LD_VAR 0 12
30493: PUSH
30494: LD_VAR 0 7
30498: ARRAY
30499: PUSH
30500: LD_INT 2
30502: ARRAY
30503: PPUSH
30504: CALL_OW 428
30508: PUSH
30509: LD_INT 0
30511: GREATER
30512: OR
30513: PUSH
30514: LD_VAR 0 12
30518: PUSH
30519: LD_VAR 0 7
30523: ARRAY
30524: PUSH
30525: LD_INT 1
30527: ARRAY
30528: PPUSH
30529: LD_VAR 0 12
30533: PUSH
30534: LD_VAR 0 7
30538: ARRAY
30539: PUSH
30540: LD_INT 2
30542: ARRAY
30543: PPUSH
30544: CALL_OW 351
30548: OR
30549: IFFALSE 30555
// exit ;
30551: POP
30552: POP
30553: GO 30847
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30555: LD_ADDR_VAR 0 8
30559: PUSH
30560: LD_VAR 0 12
30564: PUSH
30565: LD_VAR 0 7
30569: ARRAY
30570: PUSH
30571: LD_INT 1
30573: ARRAY
30574: PPUSH
30575: LD_VAR 0 12
30579: PUSH
30580: LD_VAR 0 7
30584: ARRAY
30585: PUSH
30586: LD_INT 2
30588: ARRAY
30589: PPUSH
30590: CALL_OW 546
30594: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30595: LD_VAR 0 8
30599: PUSH
30600: LD_INT 1
30602: ARRAY
30603: PUSH
30604: LD_VAR 0 8
30608: PUSH
30609: LD_INT 2
30611: ARRAY
30612: PUSH
30613: LD_VAR 0 13
30617: PUSH
30618: LD_INT 2
30620: PLUS
30621: GREATER
30622: OR
30623: PUSH
30624: LD_VAR 0 8
30628: PUSH
30629: LD_INT 2
30631: ARRAY
30632: PUSH
30633: LD_VAR 0 13
30637: PUSH
30638: LD_INT 2
30640: MINUS
30641: LESS
30642: OR
30643: PUSH
30644: LD_VAR 0 8
30648: PUSH
30649: LD_INT 3
30651: ARRAY
30652: PUSH
30653: LD_INT 0
30655: PUSH
30656: LD_INT 8
30658: PUSH
30659: LD_INT 9
30661: PUSH
30662: LD_INT 10
30664: PUSH
30665: LD_INT 11
30667: PUSH
30668: LD_INT 12
30670: PUSH
30671: LD_INT 13
30673: PUSH
30674: LD_INT 16
30676: PUSH
30677: LD_INT 17
30679: PUSH
30680: LD_INT 18
30682: PUSH
30683: LD_INT 19
30685: PUSH
30686: LD_INT 20
30688: PUSH
30689: LD_INT 21
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: IN
30707: NOT
30708: OR
30709: PUSH
30710: LD_VAR 0 8
30714: PUSH
30715: LD_INT 5
30717: ARRAY
30718: NOT
30719: OR
30720: PUSH
30721: LD_VAR 0 8
30725: PUSH
30726: LD_INT 6
30728: ARRAY
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: LD_INT 2
30735: PUSH
30736: LD_INT 7
30738: PUSH
30739: LD_INT 9
30741: PUSH
30742: LD_INT 10
30744: PUSH
30745: LD_INT 11
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: IN
30756: NOT
30757: OR
30758: IFFALSE 30764
// exit ;
30760: POP
30761: POP
30762: GO 30847
// end ;
30764: GO 30435
30766: POP
30767: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30768: LD_VAR 0 9
30772: PPUSH
30773: LD_VAR 0 3
30777: PPUSH
30778: LD_VAR 0 4
30782: PPUSH
30783: LD_INT 20
30785: PPUSH
30786: CALL 22790 0 4
30790: PUSH
30791: LD_INT 4
30793: ARRAY
30794: IFFALSE 30798
// exit ;
30796: GO 30847
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30798: LD_VAR 0 2
30802: PUSH
30803: LD_INT 29
30805: PUSH
30806: LD_INT 30
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: IN
30813: PUSH
30814: LD_VAR 0 3
30818: PPUSH
30819: LD_VAR 0 4
30823: PPUSH
30824: LD_VAR 0 9
30828: PPUSH
30829: CALL_OW 440
30833: NOT
30834: AND
30835: IFFALSE 30839
// exit ;
30837: GO 30847
// result := true ;
30839: LD_ADDR_VAR 0 6
30843: PUSH
30844: LD_INT 1
30846: ST_TO_ADDR
// end ;
30847: LD_VAR 0 6
30851: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30852: LD_INT 0
30854: PPUSH
30855: PPUSH
30856: PPUSH
30857: PPUSH
30858: PPUSH
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
30864: PPUSH
30865: PPUSH
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
30872: PPUSH
30873: PPUSH
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
30887: PPUSH
30888: PPUSH
30889: PPUSH
30890: PPUSH
30891: PPUSH
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
30904: PPUSH
30905: PPUSH
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
30910: PPUSH
30911: PPUSH
// result = [ ] ;
30912: LD_ADDR_VAR 0 7
30916: PUSH
30917: EMPTY
30918: ST_TO_ADDR
// temp_list = [ ] ;
30919: LD_ADDR_VAR 0 9
30923: PUSH
30924: EMPTY
30925: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30926: LD_VAR 0 4
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: LD_INT 3
30942: PUSH
30943: LD_INT 4
30945: PUSH
30946: LD_INT 5
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: IN
30957: NOT
30958: PUSH
30959: LD_VAR 0 1
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: IN
30974: PUSH
30975: LD_VAR 0 5
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: LD_INT 2
30985: PUSH
30986: LD_INT 3
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: LIST
30993: IN
30994: NOT
30995: AND
30996: OR
30997: IFFALSE 31001
// exit ;
30999: GO 49392
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31001: LD_VAR 0 1
31005: PUSH
31006: LD_INT 6
31008: PUSH
31009: LD_INT 7
31011: PUSH
31012: LD_INT 8
31014: PUSH
31015: LD_INT 13
31017: PUSH
31018: LD_INT 12
31020: PUSH
31021: LD_INT 15
31023: PUSH
31024: LD_INT 11
31026: PUSH
31027: LD_INT 14
31029: PUSH
31030: LD_INT 10
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: IN
31044: IFFALSE 31054
// btype = b_lab ;
31046: LD_ADDR_VAR 0 1
31050: PUSH
31051: LD_INT 6
31053: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31054: LD_VAR 0 6
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: LD_INT 1
31064: PUSH
31065: LD_INT 2
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: LIST
31072: IN
31073: NOT
31074: PUSH
31075: LD_VAR 0 1
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: LD_INT 1
31085: PUSH
31086: LD_INT 2
31088: PUSH
31089: LD_INT 3
31091: PUSH
31092: LD_INT 6
31094: PUSH
31095: LD_INT 36
31097: PUSH
31098: LD_INT 4
31100: PUSH
31101: LD_INT 5
31103: PUSH
31104: LD_INT 31
31106: PUSH
31107: LD_INT 32
31109: PUSH
31110: LD_INT 33
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: IN
31126: NOT
31127: PUSH
31128: LD_VAR 0 6
31132: PUSH
31133: LD_INT 1
31135: EQUAL
31136: AND
31137: OR
31138: PUSH
31139: LD_VAR 0 1
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: LD_INT 3
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: IN
31154: NOT
31155: PUSH
31156: LD_VAR 0 6
31160: PUSH
31161: LD_INT 2
31163: EQUAL
31164: AND
31165: OR
31166: IFFALSE 31176
// mode = 0 ;
31168: LD_ADDR_VAR 0 6
31172: PUSH
31173: LD_INT 0
31175: ST_TO_ADDR
// case mode of 0 :
31176: LD_VAR 0 6
31180: PUSH
31181: LD_INT 0
31183: DOUBLE
31184: EQUAL
31185: IFTRUE 31189
31187: GO 42642
31189: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31190: LD_ADDR_VAR 0 11
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: LD_INT 0
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: LD_INT 0
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: PUSH
31229: LD_INT 1
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: LD_INT 2
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 2
31286: NEG
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: LD_INT 2
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: LD_INT 2
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: LD_INT 3
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: LD_INT 3
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31383: LD_ADDR_VAR 0 12
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: LD_INT 1
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 0
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: LD_INT 0
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: LD_INT 1
31456: NEG
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: LD_INT 1
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 2
31506: NEG
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 2
31517: NEG
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 3
31551: NEG
31552: PUSH
31553: LD_INT 1
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31579: LD_ADDR_VAR 0 13
31583: PUSH
31584: LD_INT 0
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: LD_INT 1
31599: NEG
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 1
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: LD_INT 1
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: LD_INT 2
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: LD_INT 2
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: LD_INT 2
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: LD_INT 2
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: NEG
31727: PUSH
31728: LD_INT 3
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 3
31738: NEG
31739: PUSH
31740: LD_INT 2
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 3
31750: NEG
31751: PUSH
31752: LD_INT 3
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31778: LD_ADDR_VAR 0 14
31782: PUSH
31783: LD_INT 0
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 1
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: LD_INT 0
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: NEG
31848: PUSH
31849: LD_INT 1
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: LD_INT 2
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: LD_INT 2
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 1
31882: PUSH
31883: LD_INT 1
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 1
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 1
31924: NEG
31925: PUSH
31926: LD_INT 3
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: LD_INT 3
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 1
31947: PUSH
31948: LD_INT 2
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31974: LD_ADDR_VAR 0 15
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 1
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 1
32055: PUSH
32056: LD_INT 1
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: LD_INT 1
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32167: LD_ADDR_VAR 0 16
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: LD_INT 1
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 1
32248: NEG
32249: PUSH
32250: LD_INT 2
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: LD_INT 1
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: LD_INT 2
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: LD_INT 1
32294: NEG
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 2
32302: NEG
32303: PUSH
32304: LD_INT 2
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 3
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 3
32324: PUSH
32325: LD_INT 3
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 2
32334: PUSH
32335: LD_INT 3
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32360: LD_ADDR_VAR 0 17
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: LD_INT 1
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: LD_INT 2
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 0
32453: PUSH
32454: LD_INT 2
32456: NEG
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 2
32475: PUSH
32476: LD_INT 0
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: LD_INT 2
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: LD_INT 2
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: LD_INT 2
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 2
32536: NEG
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: NEG
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: NEG
32560: PUSH
32561: LD_INT 2
32563: NEG
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32590: LD_ADDR_VAR 0 18
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: LD_INT 1
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 1
32671: NEG
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: LD_INT 1
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: LD_INT 0
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: LD_INT 2
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32820: LD_ADDR_VAR 0 19
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 0
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: NEG
32879: PUSH
32880: LD_INT 0
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 1
32889: NEG
32890: PUSH
32891: LD_INT 1
32893: NEG
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: LD_INT 2
32905: NEG
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: LD_INT 2
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 2
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: LD_INT 1
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: LD_INT 2
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 1
32985: NEG
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 2
32996: NEG
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 2
33007: NEG
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: NEG
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33050: LD_ADDR_VAR 0 20
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: LD_INT 1
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: LD_INT 1
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: LD_INT 2
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 2
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 2
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 2
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: LD_INT 2
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: LD_INT 1
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 2
33226: NEG
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 2
33237: NEG
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: NEG
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33280: LD_ADDR_VAR 0 21
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 1
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 0
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: LD_INT 1
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: LD_INT 2
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: LD_INT 2
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: PUSH
33396: LD_INT 0
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 2
33405: PUSH
33406: LD_INT 1
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 2
33415: PUSH
33416: LD_INT 2
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 1
33425: PUSH
33426: LD_INT 2
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 0
33435: PUSH
33436: LD_INT 2
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 2
33456: NEG
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 2
33467: NEG
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 2
33479: NEG
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33510: LD_ADDR_VAR 0 22
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: LD_INT 1
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 1
33568: NEG
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: LD_INT 2
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: LD_INT 2
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: LD_INT 1
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: PUSH
33656: LD_INT 2
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: LD_INT 2
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 2
33686: NEG
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33740: LD_ADDR_VAR 0 23
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: LD_INT 0
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 0
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: NEG
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: LD_INT 2
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: LD_INT 2
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: LD_INT 1
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 2
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 1
33885: PUSH
33886: LD_INT 2
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: NEG
33906: PUSH
33907: LD_INT 1
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 2
33916: NEG
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 2
33927: NEG
33928: PUSH
33929: LD_INT 1
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 2
33939: NEG
33940: PUSH
33941: LD_INT 2
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: NEG
33952: PUSH
33953: LD_INT 3
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 1
33963: NEG
33964: PUSH
33965: LD_INT 3
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: LD_INT 2
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34020: LD_ADDR_VAR 0 24
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: LD_INT 1
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: LD_INT 2
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 2
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 1
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 2
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: LD_INT 2
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: LD_INT 2
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 2
34196: NEG
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 2
34207: NEG
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: LD_INT 2
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 2
34242: PUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 3
34253: PUSH
34254: LD_INT 1
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 3
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34296: LD_ADDR_VAR 0 25
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 2
34472: NEG
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 2
34483: NEG
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 2
34495: NEG
34496: PUSH
34497: LD_INT 2
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 3
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 3
34517: PUSH
34518: LD_INT 2
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 2
34527: PUSH
34528: LD_INT 3
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 3
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34570: LD_ADDR_VAR 0 26
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: LD_INT 1
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 2
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: LD_INT 1
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 2
34746: NEG
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 2
34757: NEG
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 3
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: LD_INT 3
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: LD_INT 2
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34846: LD_ADDR_VAR 0 27
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: LD_INT 2
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 2
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: LD_INT 2
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: LD_INT 2
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 2
35033: NEG
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: LD_INT 2
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 2
35068: NEG
35069: PUSH
35070: LD_INT 1
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 3
35079: NEG
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 3
35091: NEG
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35126: LD_ADDR_VAR 0 28
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: LD_INT 2
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 2
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 2
35261: PUSH
35262: LD_INT 2
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: LD_INT 2
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 1
35291: NEG
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 2
35325: NEG
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 2
35337: NEG
35338: PUSH
35339: LD_INT 3
35341: NEG
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: LD_INT 3
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 3
35361: NEG
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 3
35373: NEG
35374: PUSH
35375: LD_INT 2
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35408: LD_ADDR_VAR 0 29
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: LD_INT 2
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: LD_INT 2
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 2
35574: NEG
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: LD_INT 2
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: LD_INT 3
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 2
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 3
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 1
35631: PUSH
35632: LD_INT 3
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 3
35652: NEG
35653: PUSH
35654: LD_INT 2
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35687: LD_ADDR_VAR 0 30
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: LD_INT 1
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 2
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: NEG
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 2
35864: NEG
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: LD_INT 3
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: LD_INT 2
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 3
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: PUSH
35910: LD_INT 3
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 2
35919: NEG
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 3
35930: NEG
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35965: LD_ADDR_VAR 0 31
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: LD_INT 1
35985: NEG
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 2
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 2
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 2
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 2
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: NEG
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 2
36130: NEG
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: NEG
36143: PUSH
36144: LD_INT 2
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: NEG
36155: PUSH
36156: LD_INT 3
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 3
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: LD_INT 3
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 3
36208: NEG
36209: PUSH
36210: LD_INT 2
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36243: LD_ADDR_VAR 0 32
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 2
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 2
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 2
36409: NEG
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 2
36420: NEG
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: LD_INT 3
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: LD_INT 2
36447: NEG
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 3
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: PUSH
36466: LD_INT 3
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: NEG
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 3
36486: NEG
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36521: LD_ADDR_VAR 0 33
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: NEG
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: NEG
36603: PUSH
36604: LD_INT 2
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 2
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 2
36676: NEG
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 2
36687: NEG
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 2
36699: NEG
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: LD_INT 3
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 2
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 3
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 3
36765: NEG
36766: PUSH
36767: LD_INT 2
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36800: LD_ADDR_VAR 0 34
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 1
36869: NEG
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: LD_INT 2
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: LD_INT 2
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: LD_INT 2
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 2
36967: NEG
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 2
36979: NEG
36980: PUSH
36981: LD_INT 2
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: LD_INT 3
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 2
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 3
37014: PUSH
37015: LD_INT 2
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 2
37024: PUSH
37025: LD_INT 3
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 2
37034: NEG
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 3
37045: NEG
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37080: LD_ADDR_VAR 0 35
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 2
37171: NEG
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37192: LD_ADDR_VAR 0 36
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: LD_INT 2
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37304: LD_ADDR_VAR 0 37
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37416: LD_ADDR_VAR 0 38
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: LD_INT 1
37489: NEG
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 2
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37528: LD_ADDR_VAR 0 39
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: LD_INT 2
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37640: LD_ADDR_VAR 0 40
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37752: LD_ADDR_VAR 0 41
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 2
37918: NEG
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 2
37942: NEG
37943: PUSH
37944: LD_INT 3
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 3
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 3
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 3
37995: PUSH
37996: LD_INT 3
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: LD_INT 3
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 3
38026: NEG
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 3
38037: NEG
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 3
38049: NEG
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 3
38061: NEG
38062: PUSH
38063: LD_INT 3
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38102: LD_ADDR_VAR 0 42
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: LD_INT 2
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: LD_INT 2
38198: NEG
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 1
38209: NEG
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 2
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 2
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: LD_INT 2
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: NEG
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 2
38292: NEG
38293: PUSH
38294: LD_INT 3
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: LD_INT 3
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 3
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 3
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 3
38348: PUSH
38349: LD_INT 3
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: LD_INT 3
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: LD_INT 3
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: LD_INT 3
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 1
38388: NEG
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 3
38399: NEG
38400: PUSH
38401: LD_INT 2
38403: NEG
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 3
38411: NEG
38412: PUSH
38413: LD_INT 3
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38452: LD_ADDR_VAR 0 43
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 2
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: LD_INT 2
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 0
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 2
38618: NEG
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 2
38629: NEG
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 3
38645: NEG
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: LD_INT 3
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: LD_INT 2
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 3
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 3
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 3
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: LD_INT 3
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 2
38737: NEG
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 3
38748: NEG
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 3
38759: NEG
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38800: LD_ADDR_VAR 0 44
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 2
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 2
38955: NEG
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: LD_INT 1
38970: NEG
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: LD_INT 2
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: LD_INT 3
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 3
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 3
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 3
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 3
39043: PUSH
39044: LD_INT 3
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: LD_INT 3
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: LD_INT 1
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 3
39074: NEG
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 3
39085: NEG
39086: PUSH
39087: LD_INT 1
39089: NEG
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 3
39097: NEG
39098: PUSH
39099: LD_INT 2
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 3
39109: NEG
39110: PUSH
39111: LD_INT 3
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39150: LD_ADDR_VAR 0 45
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 2
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: LD_INT 2
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: LD_INT 2
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 0
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: NEG
39329: PUSH
39330: LD_INT 2
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 2
39340: NEG
39341: PUSH
39342: LD_INT 3
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: LD_INT 3
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: LD_INT 3
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 3
39386: PUSH
39387: LD_INT 2
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 3
39396: PUSH
39397: LD_INT 3
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: LD_INT 3
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: LD_INT 3
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 3
39447: NEG
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: LD_INT 3
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39500: LD_ADDR_VAR 0 46
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: LD_INT 2
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 2
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 2
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: NEG
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 3
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: LD_INT 3
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: LD_INT 2
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 3
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: PUSH
39755: LD_INT 3
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: LD_INT 2
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 2
39785: NEG
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 3
39796: NEG
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 3
39807: NEG
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39848: LD_ADDR_VAR 0 47
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: NEG
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39999: LD_ADDR_VAR 0 48
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: LD_INT 2
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40146: LD_ADDR_VAR 0 49
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: LD_INT 2
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40290: LD_ADDR_VAR 0 50
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: LD_INT 2
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 2
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40434: LD_ADDR_VAR 0 51
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: LD_INT 2
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: LD_INT 2
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40581: LD_ADDR_VAR 0 52
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 2
40685: NEG
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 2
40696: NEG
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: LD_INT 2
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40732: LD_ADDR_VAR 0 53
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: LD_INT 1
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 2
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: LD_INT 2
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 2
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 2
40908: NEG
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 2
40919: NEG
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 2
40931: NEG
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40962: LD_ADDR_VAR 0 54
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: LD_INT 2
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: LD_INT 2
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: LD_INT 2
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: NEG
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41192: LD_ADDR_VAR 0 55
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 2
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: LD_INT 2
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41422: LD_ADDR_VAR 0 56
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 2
41621: NEG
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41652: LD_ADDR_VAR 0 57
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: LD_INT 2
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 2
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 2
41828: NEG
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 2
41839: NEG
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41882: LD_ADDR_VAR 0 58
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: NEG
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 2
42081: NEG
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42112: LD_ADDR_VAR 0 59
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42200: LD_ADDR_VAR 0 60
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42288: LD_ADDR_VAR 0 61
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42376: LD_ADDR_VAR 0 62
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42464: LD_ADDR_VAR 0 63
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42552: LD_ADDR_VAR 0 64
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: ST_TO_ADDR
// end ; 1 :
42640: GO 48537
42642: LD_INT 1
42644: DOUBLE
42645: EQUAL
42646: IFTRUE 42650
42648: GO 45273
42650: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42651: LD_ADDR_VAR 0 11
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: LD_INT 3
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: LD_INT 3
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: LIST
42694: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42695: LD_ADDR_VAR 0 12
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 3
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 3
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42736: LD_ADDR_VAR 0 13
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: LD_INT 3
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42776: LD_ADDR_VAR 0 14
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42817: LD_ADDR_VAR 0 15
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 3
42835: NEG
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 3
42846: NEG
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: LIST
42860: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42861: LD_ADDR_VAR 0 16
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: LD_INT 3
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 3
42880: NEG
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 3
42892: NEG
42893: PUSH
42894: LD_INT 3
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42907: LD_ADDR_VAR 0 17
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: LD_INT 3
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 3
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42951: LD_ADDR_VAR 0 18
42955: PUSH
42956: LD_INT 2
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 3
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 3
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42992: LD_ADDR_VAR 0 19
42996: PUSH
42997: LD_INT 3
42999: PUSH
43000: LD_INT 2
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 3
43009: PUSH
43010: LD_INT 3
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: LD_INT 3
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43032: LD_ADDR_VAR 0 20
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 3
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 3
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: LIST
43072: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43073: LD_ADDR_VAR 0 21
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 3
43091: NEG
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 3
43102: NEG
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: LIST
43116: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43117: LD_ADDR_VAR 0 22
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: LD_INT 3
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 3
43136: NEG
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 3
43148: NEG
43149: PUSH
43150: LD_INT 3
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43163: LD_ADDR_VAR 0 23
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: LD_INT 3
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 4
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 3
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: LIST
43206: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43207: LD_ADDR_VAR 0 24
43211: PUSH
43212: LD_INT 3
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 3
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 4
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43248: LD_ADDR_VAR 0 25
43252: PUSH
43253: LD_INT 3
43255: PUSH
43256: LD_INT 3
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 4
43265: PUSH
43266: LD_INT 3
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 3
43275: PUSH
43276: LD_INT 4
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: LIST
43287: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43288: LD_ADDR_VAR 0 26
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: LD_INT 3
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 4
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43329: LD_ADDR_VAR 0 27
43333: PUSH
43334: LD_INT 3
43336: NEG
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 4
43358: NEG
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43373: LD_ADDR_VAR 0 28
43377: PUSH
43378: LD_INT 3
43380: NEG
43381: PUSH
43382: LD_INT 3
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 3
43392: NEG
43393: PUSH
43394: LD_INT 4
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 4
43404: NEG
43405: PUSH
43406: LD_INT 3
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43419: LD_ADDR_VAR 0 29
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 3
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 3
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 4
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 4
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: LD_INT 3
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 5
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 5
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 4
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 6
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: LD_INT 6
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 5
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43574: LD_ADDR_VAR 0 30
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 3
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 3
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 3
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 4
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 4
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 4
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 5
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 5
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 5
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 6
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 6
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43717: LD_ADDR_VAR 0 31
43721: PUSH
43722: LD_INT 3
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 3
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 4
43754: PUSH
43755: LD_INT 3
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 4
43764: PUSH
43765: LD_INT 4
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: LD_INT 4
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 5
43784: PUSH
43785: LD_INT 4
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 5
43794: PUSH
43795: LD_INT 5
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 4
43804: PUSH
43805: LD_INT 5
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 6
43814: PUSH
43815: LD_INT 5
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 6
43824: PUSH
43825: LD_INT 6
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 5
43834: PUSH
43835: LD_INT 6
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43856: LD_ADDR_VAR 0 32
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 3
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 4
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 4
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 5
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 5
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 4
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: LD_INT 6
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: LD_INT 6
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: LD_INT 5
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43999: LD_ADDR_VAR 0 33
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 3
44017: NEG
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 3
44028: NEG
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 3
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 4
44051: NEG
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 4
44062: NEG
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 4
44074: NEG
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 5
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 5
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 5
44108: NEG
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 6
44119: NEG
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 6
44130: NEG
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44154: LD_ADDR_VAR 0 34
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 3
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 3
44173: NEG
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 3
44185: NEG
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: NEG
44198: PUSH
44199: LD_INT 4
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 4
44209: NEG
44210: PUSH
44211: LD_INT 3
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 4
44221: NEG
44222: PUSH
44223: LD_INT 4
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 4
44233: NEG
44234: PUSH
44235: LD_INT 5
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 5
44245: NEG
44246: PUSH
44247: LD_INT 4
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 5
44257: NEG
44258: PUSH
44259: LD_INT 5
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 5
44269: NEG
44270: PUSH
44271: LD_INT 6
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 6
44281: NEG
44282: PUSH
44283: LD_INT 5
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 6
44293: NEG
44294: PUSH
44295: LD_INT 6
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44317: LD_ADDR_VAR 0 41
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: LD_INT 3
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: LIST
44360: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44361: LD_ADDR_VAR 0 42
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 3
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: LIST
44401: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44402: LD_ADDR_VAR 0 43
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 3
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: LD_INT 3
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44442: LD_ADDR_VAR 0 44
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 3
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: LIST
44482: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44483: LD_ADDR_VAR 0 45
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: NEG
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 3
44512: NEG
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44527: LD_ADDR_VAR 0 46
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: LD_INT 3
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 3
44558: NEG
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: LIST
44572: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44573: LD_ADDR_VAR 0 47
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: LD_INT 3
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: LD_INT 3
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44606: LD_ADDR_VAR 0 48
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44637: LD_ADDR_VAR 0 49
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 3
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44666: LD_ADDR_VAR 0 50
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44695: LD_ADDR_VAR 0 51
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44726: LD_ADDR_VAR 0 52
44730: PUSH
44731: LD_INT 3
44733: NEG
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 3
44745: NEG
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44759: LD_ADDR_VAR 0 53
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 3
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 3
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: LIST
44802: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44803: LD_ADDR_VAR 0 54
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 3
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: LIST
44843: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44844: LD_ADDR_VAR 0 55
44848: PUSH
44849: LD_INT 3
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 3
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: LD_INT 3
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44884: LD_ADDR_VAR 0 56
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: LIST
44924: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44925: LD_ADDR_VAR 0 57
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 3
44943: NEG
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 3
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: LIST
44968: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44969: LD_ADDR_VAR 0 58
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 3
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 3
44988: NEG
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 3
45000: NEG
45001: PUSH
45002: LD_INT 3
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45015: LD_ADDR_VAR 0 59
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45059: LD_ADDR_VAR 0 60
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45100: LD_ADDR_VAR 0 61
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45140: LD_ADDR_VAR 0 62
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: LD_INT 2
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45181: LD_ADDR_VAR 0 63
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: NEG
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: LIST
45224: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45225: LD_ADDR_VAR 0 64
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: ST_TO_ADDR
// end ; 2 :
45271: GO 48537
45273: LD_INT 2
45275: DOUBLE
45276: EQUAL
45277: IFTRUE 45281
45279: GO 48536
45281: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45282: LD_ADDR_VAR 0 29
45286: PUSH
45287: LD_INT 4
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 4
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 5
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 5
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 4
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 3
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 3
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 3
45361: PUSH
45362: LD_INT 2
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 5
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 3
45382: PUSH
45383: LD_INT 3
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 3
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 4
45402: PUSH
45403: LD_INT 3
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 4
45412: PUSH
45413: LD_INT 4
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 3
45422: PUSH
45423: LD_INT 4
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: LD_INT 3
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 4
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 4
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 4
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 3
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 4
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: LD_INT 5
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 5
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 4
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 3
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 5
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: LD_INT 3
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 3
45565: NEG
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 3
45576: NEG
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 3
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 4
45621: NEG
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 4
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 4
45644: NEG
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 4
45667: NEG
45668: PUSH
45669: LD_INT 4
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 4
45679: NEG
45680: PUSH
45681: LD_INT 5
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 3
45691: NEG
45692: PUSH
45693: LD_INT 4
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 3
45703: NEG
45704: PUSH
45705: LD_INT 3
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 4
45715: NEG
45716: PUSH
45717: LD_INT 3
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 5
45727: NEG
45728: PUSH
45729: LD_INT 4
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 5
45739: NEG
45740: PUSH
45741: LD_INT 5
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 3
45751: NEG
45752: PUSH
45753: LD_INT 5
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 5
45763: NEG
45764: PUSH
45765: LD_INT 3
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45820: LD_ADDR_VAR 0 30
45824: PUSH
45825: LD_INT 4
45827: PUSH
45828: LD_INT 4
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 4
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 5
45847: PUSH
45848: LD_INT 4
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 5
45857: PUSH
45858: LD_INT 5
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 4
45867: PUSH
45868: LD_INT 5
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 3
45877: PUSH
45878: LD_INT 4
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 3
45887: PUSH
45888: LD_INT 3
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 5
45897: PUSH
45898: LD_INT 3
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: PUSH
45908: LD_INT 5
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 3
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 4
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 4
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 3
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 2
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: LD_INT 4
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 4
46010: NEG
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 4
46021: NEG
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 3
46033: NEG
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 3
46044: NEG
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 4
46055: NEG
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 5
46066: NEG
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 5
46077: NEG
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 5
46089: NEG
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: NEG
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: LD_INT 3
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: LD_INT 4
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 3
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 4
46172: NEG
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 4
46184: NEG
46185: PUSH
46186: LD_INT 4
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: LD_INT 4
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 4
46208: NEG
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 4
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 5
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: LD_INT 4
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 3
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: LD_INT 4
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 5
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 3
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: LD_INT 5
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46367: LD_ADDR_VAR 0 31
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 4
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 3
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: LD_INT 4
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 5
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 5
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 4
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 5
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 3
46467: NEG
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 3
46478: NEG
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 2
46490: NEG
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 3
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 4
46523: NEG
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 4
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 4
46546: NEG
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 4
46569: NEG
46570: PUSH
46571: LD_INT 4
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 4
46581: NEG
46582: PUSH
46583: LD_INT 5
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 3
46593: NEG
46594: PUSH
46595: LD_INT 4
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 3
46605: NEG
46606: PUSH
46607: LD_INT 3
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 4
46617: NEG
46618: PUSH
46619: LD_INT 3
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 5
46629: NEG
46630: PUSH
46631: LD_INT 4
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 5
46641: NEG
46642: PUSH
46643: LD_INT 5
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: NEG
46654: PUSH
46655: LD_INT 5
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 5
46665: NEG
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 3
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 4
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 3
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: LD_INT 3
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 4
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: LD_INT 4
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 4
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 4
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 5
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 5
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 4
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 3
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 3
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 5
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46917: LD_ADDR_VAR 0 32
46921: PUSH
46922: LD_INT 4
46924: NEG
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 4
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 3
46947: NEG
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 3
46958: NEG
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 4
46969: NEG
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 5
46980: NEG
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 5
46991: NEG
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 5
47003: NEG
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 3
47015: NEG
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 3
47026: NEG
47027: PUSH
47028: LD_INT 3
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: NEG
47039: PUSH
47040: LD_INT 4
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: NEG
47051: PUSH
47052: LD_INT 3
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 3
47074: NEG
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 4
47086: NEG
47087: PUSH
47088: LD_INT 3
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 4
47098: NEG
47099: PUSH
47100: LD_INT 4
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: LD_INT 4
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 4
47122: NEG
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 4
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: LD_INT 5
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 4
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 3
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 3
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: LD_INT 4
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 5
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: LD_INT 3
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: LD_INT 5
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 3
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 4
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 4
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 3
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 4
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 4
47329: PUSH
47330: LD_INT 4
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 4
47339: PUSH
47340: LD_INT 3
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 5
47349: PUSH
47350: LD_INT 4
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 5
47359: PUSH
47360: LD_INT 5
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 4
47369: PUSH
47370: LD_INT 5
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 4
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 3
47389: PUSH
47390: LD_INT 3
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 5
47399: PUSH
47400: LD_INT 3
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: LD_INT 5
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47464: LD_ADDR_VAR 0 33
47468: PUSH
47469: LD_INT 4
47471: NEG
47472: PUSH
47473: LD_INT 4
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 4
47483: NEG
47484: PUSH
47485: LD_INT 5
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 3
47495: NEG
47496: PUSH
47497: LD_INT 4
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 3
47507: NEG
47508: PUSH
47509: LD_INT 3
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 4
47519: NEG
47520: PUSH
47521: LD_INT 3
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 5
47531: NEG
47532: PUSH
47533: LD_INT 4
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 5
47543: NEG
47544: PUSH
47545: LD_INT 5
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 3
47555: NEG
47556: PUSH
47557: LD_INT 5
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 5
47567: NEG
47568: PUSH
47569: LD_INT 3
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 3
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 4
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 3
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 3
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: LD_INT 4
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 4
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 4
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 4
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 5
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 5
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 4
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 5
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 3
47774: PUSH
47775: LD_INT 3
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 3
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 4
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 4
47804: PUSH
47805: LD_INT 4
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 3
47814: PUSH
47815: LD_INT 4
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 4
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 4
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 4
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: LD_INT 4
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: LD_INT 5
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: LD_INT 5
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: LD_INT 4
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: LD_INT 5
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: LD_INT 3
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48002: LD_ADDR_VAR 0 34
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 4
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 5
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: LD_INT 4
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 3
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 3
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 4
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 5
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 3
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: LD_INT 5
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 4
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 4
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 3
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 4
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 4
48204: PUSH
48205: LD_INT 4
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 4
48214: PUSH
48215: LD_INT 3
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 5
48224: PUSH
48225: LD_INT 4
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 5
48234: PUSH
48235: LD_INT 5
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 4
48244: PUSH
48245: LD_INT 5
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: LD_INT 4
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 3
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 5
48274: PUSH
48275: LD_INT 3
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 3
48284: PUSH
48285: LD_INT 5
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 3
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 3
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: LD_INT 4
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 4
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 4
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 4
48387: NEG
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 4
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 3
48410: NEG
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 3
48421: NEG
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 4
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 5
48443: NEG
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 5
48454: NEG
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 5
48466: NEG
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 3
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: ST_TO_ADDR
// end ; end ;
48534: GO 48537
48536: POP
// case btype of b_depot , b_warehouse :
48537: LD_VAR 0 1
48541: PUSH
48542: LD_INT 0
48544: DOUBLE
48545: EQUAL
48546: IFTRUE 48556
48548: LD_INT 1
48550: DOUBLE
48551: EQUAL
48552: IFTRUE 48556
48554: GO 48757
48556: POP
// case nation of nation_american :
48557: LD_VAR 0 5
48561: PUSH
48562: LD_INT 1
48564: DOUBLE
48565: EQUAL
48566: IFTRUE 48570
48568: GO 48626
48570: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48571: LD_ADDR_VAR 0 9
48575: PUSH
48576: LD_VAR 0 11
48580: PUSH
48581: LD_VAR 0 12
48585: PUSH
48586: LD_VAR 0 13
48590: PUSH
48591: LD_VAR 0 14
48595: PUSH
48596: LD_VAR 0 15
48600: PUSH
48601: LD_VAR 0 16
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: PUSH
48614: LD_VAR 0 4
48618: PUSH
48619: LD_INT 1
48621: PLUS
48622: ARRAY
48623: ST_TO_ADDR
48624: GO 48755
48626: LD_INT 2
48628: DOUBLE
48629: EQUAL
48630: IFTRUE 48634
48632: GO 48690
48634: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48635: LD_ADDR_VAR 0 9
48639: PUSH
48640: LD_VAR 0 17
48644: PUSH
48645: LD_VAR 0 18
48649: PUSH
48650: LD_VAR 0 19
48654: PUSH
48655: LD_VAR 0 20
48659: PUSH
48660: LD_VAR 0 21
48664: PUSH
48665: LD_VAR 0 22
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: PUSH
48678: LD_VAR 0 4
48682: PUSH
48683: LD_INT 1
48685: PLUS
48686: ARRAY
48687: ST_TO_ADDR
48688: GO 48755
48690: LD_INT 3
48692: DOUBLE
48693: EQUAL
48694: IFTRUE 48698
48696: GO 48754
48698: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48699: LD_ADDR_VAR 0 9
48703: PUSH
48704: LD_VAR 0 23
48708: PUSH
48709: LD_VAR 0 24
48713: PUSH
48714: LD_VAR 0 25
48718: PUSH
48719: LD_VAR 0 26
48723: PUSH
48724: LD_VAR 0 27
48728: PUSH
48729: LD_VAR 0 28
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: PUSH
48742: LD_VAR 0 4
48746: PUSH
48747: LD_INT 1
48749: PLUS
48750: ARRAY
48751: ST_TO_ADDR
48752: GO 48755
48754: POP
48755: GO 49310
48757: LD_INT 2
48759: DOUBLE
48760: EQUAL
48761: IFTRUE 48771
48763: LD_INT 3
48765: DOUBLE
48766: EQUAL
48767: IFTRUE 48771
48769: GO 48827
48771: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48772: LD_ADDR_VAR 0 9
48776: PUSH
48777: LD_VAR 0 29
48781: PUSH
48782: LD_VAR 0 30
48786: PUSH
48787: LD_VAR 0 31
48791: PUSH
48792: LD_VAR 0 32
48796: PUSH
48797: LD_VAR 0 33
48801: PUSH
48802: LD_VAR 0 34
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: PUSH
48815: LD_VAR 0 4
48819: PUSH
48820: LD_INT 1
48822: PLUS
48823: ARRAY
48824: ST_TO_ADDR
48825: GO 49310
48827: LD_INT 16
48829: DOUBLE
48830: EQUAL
48831: IFTRUE 48889
48833: LD_INT 17
48835: DOUBLE
48836: EQUAL
48837: IFTRUE 48889
48839: LD_INT 18
48841: DOUBLE
48842: EQUAL
48843: IFTRUE 48889
48845: LD_INT 19
48847: DOUBLE
48848: EQUAL
48849: IFTRUE 48889
48851: LD_INT 22
48853: DOUBLE
48854: EQUAL
48855: IFTRUE 48889
48857: LD_INT 20
48859: DOUBLE
48860: EQUAL
48861: IFTRUE 48889
48863: LD_INT 21
48865: DOUBLE
48866: EQUAL
48867: IFTRUE 48889
48869: LD_INT 23
48871: DOUBLE
48872: EQUAL
48873: IFTRUE 48889
48875: LD_INT 24
48877: DOUBLE
48878: EQUAL
48879: IFTRUE 48889
48881: LD_INT 25
48883: DOUBLE
48884: EQUAL
48885: IFTRUE 48889
48887: GO 48945
48889: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48890: LD_ADDR_VAR 0 9
48894: PUSH
48895: LD_VAR 0 35
48899: PUSH
48900: LD_VAR 0 36
48904: PUSH
48905: LD_VAR 0 37
48909: PUSH
48910: LD_VAR 0 38
48914: PUSH
48915: LD_VAR 0 39
48919: PUSH
48920: LD_VAR 0 40
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: PUSH
48933: LD_VAR 0 4
48937: PUSH
48938: LD_INT 1
48940: PLUS
48941: ARRAY
48942: ST_TO_ADDR
48943: GO 49310
48945: LD_INT 6
48947: DOUBLE
48948: EQUAL
48949: IFTRUE 49001
48951: LD_INT 7
48953: DOUBLE
48954: EQUAL
48955: IFTRUE 49001
48957: LD_INT 8
48959: DOUBLE
48960: EQUAL
48961: IFTRUE 49001
48963: LD_INT 13
48965: DOUBLE
48966: EQUAL
48967: IFTRUE 49001
48969: LD_INT 12
48971: DOUBLE
48972: EQUAL
48973: IFTRUE 49001
48975: LD_INT 15
48977: DOUBLE
48978: EQUAL
48979: IFTRUE 49001
48981: LD_INT 11
48983: DOUBLE
48984: EQUAL
48985: IFTRUE 49001
48987: LD_INT 14
48989: DOUBLE
48990: EQUAL
48991: IFTRUE 49001
48993: LD_INT 10
48995: DOUBLE
48996: EQUAL
48997: IFTRUE 49001
48999: GO 49057
49001: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49002: LD_ADDR_VAR 0 9
49006: PUSH
49007: LD_VAR 0 41
49011: PUSH
49012: LD_VAR 0 42
49016: PUSH
49017: LD_VAR 0 43
49021: PUSH
49022: LD_VAR 0 44
49026: PUSH
49027: LD_VAR 0 45
49031: PUSH
49032: LD_VAR 0 46
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: PUSH
49045: LD_VAR 0 4
49049: PUSH
49050: LD_INT 1
49052: PLUS
49053: ARRAY
49054: ST_TO_ADDR
49055: GO 49310
49057: LD_INT 36
49059: DOUBLE
49060: EQUAL
49061: IFTRUE 49065
49063: GO 49121
49065: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49066: LD_ADDR_VAR 0 9
49070: PUSH
49071: LD_VAR 0 47
49075: PUSH
49076: LD_VAR 0 48
49080: PUSH
49081: LD_VAR 0 49
49085: PUSH
49086: LD_VAR 0 50
49090: PUSH
49091: LD_VAR 0 51
49095: PUSH
49096: LD_VAR 0 52
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: PUSH
49109: LD_VAR 0 4
49113: PUSH
49114: LD_INT 1
49116: PLUS
49117: ARRAY
49118: ST_TO_ADDR
49119: GO 49310
49121: LD_INT 4
49123: DOUBLE
49124: EQUAL
49125: IFTRUE 49147
49127: LD_INT 5
49129: DOUBLE
49130: EQUAL
49131: IFTRUE 49147
49133: LD_INT 34
49135: DOUBLE
49136: EQUAL
49137: IFTRUE 49147
49139: LD_INT 37
49141: DOUBLE
49142: EQUAL
49143: IFTRUE 49147
49145: GO 49203
49147: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49148: LD_ADDR_VAR 0 9
49152: PUSH
49153: LD_VAR 0 53
49157: PUSH
49158: LD_VAR 0 54
49162: PUSH
49163: LD_VAR 0 55
49167: PUSH
49168: LD_VAR 0 56
49172: PUSH
49173: LD_VAR 0 57
49177: PUSH
49178: LD_VAR 0 58
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: PUSH
49191: LD_VAR 0 4
49195: PUSH
49196: LD_INT 1
49198: PLUS
49199: ARRAY
49200: ST_TO_ADDR
49201: GO 49310
49203: LD_INT 31
49205: DOUBLE
49206: EQUAL
49207: IFTRUE 49253
49209: LD_INT 32
49211: DOUBLE
49212: EQUAL
49213: IFTRUE 49253
49215: LD_INT 33
49217: DOUBLE
49218: EQUAL
49219: IFTRUE 49253
49221: LD_INT 27
49223: DOUBLE
49224: EQUAL
49225: IFTRUE 49253
49227: LD_INT 26
49229: DOUBLE
49230: EQUAL
49231: IFTRUE 49253
49233: LD_INT 28
49235: DOUBLE
49236: EQUAL
49237: IFTRUE 49253
49239: LD_INT 29
49241: DOUBLE
49242: EQUAL
49243: IFTRUE 49253
49245: LD_INT 30
49247: DOUBLE
49248: EQUAL
49249: IFTRUE 49253
49251: GO 49309
49253: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49254: LD_ADDR_VAR 0 9
49258: PUSH
49259: LD_VAR 0 59
49263: PUSH
49264: LD_VAR 0 60
49268: PUSH
49269: LD_VAR 0 61
49273: PUSH
49274: LD_VAR 0 62
49278: PUSH
49279: LD_VAR 0 63
49283: PUSH
49284: LD_VAR 0 64
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: PUSH
49297: LD_VAR 0 4
49301: PUSH
49302: LD_INT 1
49304: PLUS
49305: ARRAY
49306: ST_TO_ADDR
49307: GO 49310
49309: POP
// temp_list2 = [ ] ;
49310: LD_ADDR_VAR 0 10
49314: PUSH
49315: EMPTY
49316: ST_TO_ADDR
// for i in temp_list do
49317: LD_ADDR_VAR 0 8
49321: PUSH
49322: LD_VAR 0 9
49326: PUSH
49327: FOR_IN
49328: IFFALSE 49380
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49330: LD_ADDR_VAR 0 10
49334: PUSH
49335: LD_VAR 0 10
49339: PUSH
49340: LD_VAR 0 8
49344: PUSH
49345: LD_INT 1
49347: ARRAY
49348: PUSH
49349: LD_VAR 0 2
49353: PLUS
49354: PUSH
49355: LD_VAR 0 8
49359: PUSH
49360: LD_INT 2
49362: ARRAY
49363: PUSH
49364: LD_VAR 0 3
49368: PLUS
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: EMPTY
49375: LIST
49376: ADD
49377: ST_TO_ADDR
49378: GO 49327
49380: POP
49381: POP
// result = temp_list2 ;
49382: LD_ADDR_VAR 0 7
49386: PUSH
49387: LD_VAR 0 10
49391: ST_TO_ADDR
// end ;
49392: LD_VAR 0 7
49396: RET
// export function EnemyInRange ( unit , dist ) ; begin
49397: LD_INT 0
49399: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49400: LD_ADDR_VAR 0 3
49404: PUSH
49405: LD_VAR 0 1
49409: PPUSH
49410: CALL_OW 255
49414: PPUSH
49415: LD_VAR 0 1
49419: PPUSH
49420: CALL_OW 250
49424: PPUSH
49425: LD_VAR 0 1
49429: PPUSH
49430: CALL_OW 251
49434: PPUSH
49435: LD_VAR 0 2
49439: PPUSH
49440: CALL 22790 0 4
49444: PUSH
49445: LD_INT 4
49447: ARRAY
49448: ST_TO_ADDR
// end ;
49449: LD_VAR 0 3
49453: RET
// export function PlayerSeeMe ( unit ) ; begin
49454: LD_INT 0
49456: PPUSH
// result := See ( your_side , unit ) ;
49457: LD_ADDR_VAR 0 2
49461: PUSH
49462: LD_OWVAR 2
49466: PPUSH
49467: LD_VAR 0 1
49471: PPUSH
49472: CALL_OW 292
49476: ST_TO_ADDR
// end ;
49477: LD_VAR 0 2
49481: RET
// export function ReverseDir ( unit ) ; begin
49482: LD_INT 0
49484: PPUSH
// if not unit then
49485: LD_VAR 0 1
49489: NOT
49490: IFFALSE 49494
// exit ;
49492: GO 49517
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49494: LD_ADDR_VAR 0 2
49498: PUSH
49499: LD_VAR 0 1
49503: PPUSH
49504: CALL_OW 254
49508: PUSH
49509: LD_INT 3
49511: PLUS
49512: PUSH
49513: LD_INT 6
49515: MOD
49516: ST_TO_ADDR
// end ;
49517: LD_VAR 0 2
49521: RET
// export function ReverseArray ( array ) ; var i ; begin
49522: LD_INT 0
49524: PPUSH
49525: PPUSH
// if not array then
49526: LD_VAR 0 1
49530: NOT
49531: IFFALSE 49535
// exit ;
49533: GO 49590
// result := [ ] ;
49535: LD_ADDR_VAR 0 2
49539: PUSH
49540: EMPTY
49541: ST_TO_ADDR
// for i := array downto 1 do
49542: LD_ADDR_VAR 0 3
49546: PUSH
49547: DOUBLE
49548: LD_VAR 0 1
49552: INC
49553: ST_TO_ADDR
49554: LD_INT 1
49556: PUSH
49557: FOR_DOWNTO
49558: IFFALSE 49588
// result := Join ( result , array [ i ] ) ;
49560: LD_ADDR_VAR 0 2
49564: PUSH
49565: LD_VAR 0 2
49569: PPUSH
49570: LD_VAR 0 1
49574: PUSH
49575: LD_VAR 0 3
49579: ARRAY
49580: PPUSH
49581: CALL 54233 0 2
49585: ST_TO_ADDR
49586: GO 49557
49588: POP
49589: POP
// end ;
49590: LD_VAR 0 2
49594: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49595: LD_INT 0
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
// if not unit or not hexes then
49603: LD_VAR 0 1
49607: NOT
49608: PUSH
49609: LD_VAR 0 2
49613: NOT
49614: OR
49615: IFFALSE 49619
// exit ;
49617: GO 49742
// dist := 9999 ;
49619: LD_ADDR_VAR 0 5
49623: PUSH
49624: LD_INT 9999
49626: ST_TO_ADDR
// for i = 1 to hexes do
49627: LD_ADDR_VAR 0 4
49631: PUSH
49632: DOUBLE
49633: LD_INT 1
49635: DEC
49636: ST_TO_ADDR
49637: LD_VAR 0 2
49641: PUSH
49642: FOR_TO
49643: IFFALSE 49730
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49645: LD_ADDR_VAR 0 6
49649: PUSH
49650: LD_VAR 0 1
49654: PPUSH
49655: LD_VAR 0 2
49659: PUSH
49660: LD_VAR 0 4
49664: ARRAY
49665: PUSH
49666: LD_INT 1
49668: ARRAY
49669: PPUSH
49670: LD_VAR 0 2
49674: PUSH
49675: LD_VAR 0 4
49679: ARRAY
49680: PUSH
49681: LD_INT 2
49683: ARRAY
49684: PPUSH
49685: CALL_OW 297
49689: ST_TO_ADDR
// if tdist < dist then
49690: LD_VAR 0 6
49694: PUSH
49695: LD_VAR 0 5
49699: LESS
49700: IFFALSE 49728
// begin hex := hexes [ i ] ;
49702: LD_ADDR_VAR 0 8
49706: PUSH
49707: LD_VAR 0 2
49711: PUSH
49712: LD_VAR 0 4
49716: ARRAY
49717: ST_TO_ADDR
// dist := tdist ;
49718: LD_ADDR_VAR 0 5
49722: PUSH
49723: LD_VAR 0 6
49727: ST_TO_ADDR
// end ; end ;
49728: GO 49642
49730: POP
49731: POP
// result := hex ;
49732: LD_ADDR_VAR 0 3
49736: PUSH
49737: LD_VAR 0 8
49741: ST_TO_ADDR
// end ;
49742: LD_VAR 0 3
49746: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49747: LD_INT 0
49749: PPUSH
49750: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49751: LD_VAR 0 1
49755: NOT
49756: PUSH
49757: LD_VAR 0 1
49761: PUSH
49762: LD_INT 21
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 23
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PPUSH
49786: CALL_OW 69
49790: IN
49791: NOT
49792: OR
49793: IFFALSE 49797
// exit ;
49795: GO 49844
// for i = 1 to 3 do
49797: LD_ADDR_VAR 0 3
49801: PUSH
49802: DOUBLE
49803: LD_INT 1
49805: DEC
49806: ST_TO_ADDR
49807: LD_INT 3
49809: PUSH
49810: FOR_TO
49811: IFFALSE 49842
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49813: LD_VAR 0 1
49817: PPUSH
49818: CALL_OW 250
49822: PPUSH
49823: LD_VAR 0 1
49827: PPUSH
49828: CALL_OW 251
49832: PPUSH
49833: LD_INT 1
49835: PPUSH
49836: CALL_OW 453
49840: GO 49810
49842: POP
49843: POP
// end ;
49844: LD_VAR 0 2
49848: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49849: LD_INT 0
49851: PPUSH
49852: PPUSH
49853: PPUSH
49854: PPUSH
49855: PPUSH
49856: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49857: LD_VAR 0 1
49861: NOT
49862: PUSH
49863: LD_VAR 0 2
49867: NOT
49868: OR
49869: PUSH
49870: LD_VAR 0 1
49874: PPUSH
49875: CALL_OW 314
49879: OR
49880: IFFALSE 49884
// exit ;
49882: GO 50351
// if GetLives ( i ) < 250 then
49884: LD_VAR 0 4
49888: PPUSH
49889: CALL_OW 256
49893: PUSH
49894: LD_INT 250
49896: LESS
49897: IFFALSE 49910
// begin ComAutodestruct ( i ) ;
49899: LD_VAR 0 4
49903: PPUSH
49904: CALL 49747 0 1
// exit ;
49908: GO 50351
// end ; x := GetX ( enemy_unit ) ;
49910: LD_ADDR_VAR 0 7
49914: PUSH
49915: LD_VAR 0 2
49919: PPUSH
49920: CALL_OW 250
49924: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49925: LD_ADDR_VAR 0 8
49929: PUSH
49930: LD_VAR 0 2
49934: PPUSH
49935: CALL_OW 251
49939: ST_TO_ADDR
// if not x or not y then
49940: LD_VAR 0 7
49944: NOT
49945: PUSH
49946: LD_VAR 0 8
49950: NOT
49951: OR
49952: IFFALSE 49956
// exit ;
49954: GO 50351
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49956: LD_ADDR_VAR 0 6
49960: PUSH
49961: LD_VAR 0 7
49965: PPUSH
49966: LD_INT 0
49968: PPUSH
49969: LD_INT 4
49971: PPUSH
49972: CALL_OW 272
49976: PUSH
49977: LD_VAR 0 8
49981: PPUSH
49982: LD_INT 0
49984: PPUSH
49985: LD_INT 4
49987: PPUSH
49988: CALL_OW 273
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_VAR 0 7
50001: PPUSH
50002: LD_INT 1
50004: PPUSH
50005: LD_INT 4
50007: PPUSH
50008: CALL_OW 272
50012: PUSH
50013: LD_VAR 0 8
50017: PPUSH
50018: LD_INT 1
50020: PPUSH
50021: LD_INT 4
50023: PPUSH
50024: CALL_OW 273
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_VAR 0 7
50037: PPUSH
50038: LD_INT 2
50040: PPUSH
50041: LD_INT 4
50043: PPUSH
50044: CALL_OW 272
50048: PUSH
50049: LD_VAR 0 8
50053: PPUSH
50054: LD_INT 2
50056: PPUSH
50057: LD_INT 4
50059: PPUSH
50060: CALL_OW 273
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_VAR 0 7
50073: PPUSH
50074: LD_INT 3
50076: PPUSH
50077: LD_INT 4
50079: PPUSH
50080: CALL_OW 272
50084: PUSH
50085: LD_VAR 0 8
50089: PPUSH
50090: LD_INT 3
50092: PPUSH
50093: LD_INT 4
50095: PPUSH
50096: CALL_OW 273
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_VAR 0 7
50109: PPUSH
50110: LD_INT 4
50112: PPUSH
50113: LD_INT 4
50115: PPUSH
50116: CALL_OW 272
50120: PUSH
50121: LD_VAR 0 8
50125: PPUSH
50126: LD_INT 4
50128: PPUSH
50129: LD_INT 4
50131: PPUSH
50132: CALL_OW 273
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_VAR 0 7
50145: PPUSH
50146: LD_INT 5
50148: PPUSH
50149: LD_INT 4
50151: PPUSH
50152: CALL_OW 272
50156: PUSH
50157: LD_VAR 0 8
50161: PPUSH
50162: LD_INT 5
50164: PPUSH
50165: LD_INT 4
50167: PPUSH
50168: CALL_OW 273
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: ST_TO_ADDR
// for i = tmp downto 1 do
50185: LD_ADDR_VAR 0 4
50189: PUSH
50190: DOUBLE
50191: LD_VAR 0 6
50195: INC
50196: ST_TO_ADDR
50197: LD_INT 1
50199: PUSH
50200: FOR_DOWNTO
50201: IFFALSE 50302
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50203: LD_VAR 0 6
50207: PUSH
50208: LD_VAR 0 4
50212: ARRAY
50213: PUSH
50214: LD_INT 1
50216: ARRAY
50217: PPUSH
50218: LD_VAR 0 6
50222: PUSH
50223: LD_VAR 0 4
50227: ARRAY
50228: PUSH
50229: LD_INT 2
50231: ARRAY
50232: PPUSH
50233: CALL_OW 488
50237: NOT
50238: PUSH
50239: LD_VAR 0 6
50243: PUSH
50244: LD_VAR 0 4
50248: ARRAY
50249: PUSH
50250: LD_INT 1
50252: ARRAY
50253: PPUSH
50254: LD_VAR 0 6
50258: PUSH
50259: LD_VAR 0 4
50263: ARRAY
50264: PUSH
50265: LD_INT 2
50267: ARRAY
50268: PPUSH
50269: CALL_OW 428
50273: PUSH
50274: LD_INT 0
50276: NONEQUAL
50277: OR
50278: IFFALSE 50300
// tmp := Delete ( tmp , i ) ;
50280: LD_ADDR_VAR 0 6
50284: PUSH
50285: LD_VAR 0 6
50289: PPUSH
50290: LD_VAR 0 4
50294: PPUSH
50295: CALL_OW 3
50299: ST_TO_ADDR
50300: GO 50200
50302: POP
50303: POP
// j := GetClosestHex ( unit , tmp ) ;
50304: LD_ADDR_VAR 0 5
50308: PUSH
50309: LD_VAR 0 1
50313: PPUSH
50314: LD_VAR 0 6
50318: PPUSH
50319: CALL 49595 0 2
50323: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50324: LD_VAR 0 1
50328: PPUSH
50329: LD_VAR 0 5
50333: PUSH
50334: LD_INT 1
50336: ARRAY
50337: PPUSH
50338: LD_VAR 0 5
50342: PUSH
50343: LD_INT 2
50345: ARRAY
50346: PPUSH
50347: CALL_OW 111
// end ;
50351: LD_VAR 0 3
50355: RET
// export function PrepareApemanSoldier ( ) ; begin
50356: LD_INT 0
50358: PPUSH
// uc_nation := 0 ;
50359: LD_ADDR_OWVAR 21
50363: PUSH
50364: LD_INT 0
50366: ST_TO_ADDR
// hc_sex := sex_male ;
50367: LD_ADDR_OWVAR 27
50371: PUSH
50372: LD_INT 1
50374: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50375: LD_ADDR_OWVAR 28
50379: PUSH
50380: LD_INT 15
50382: ST_TO_ADDR
// hc_gallery :=  ;
50383: LD_ADDR_OWVAR 33
50387: PUSH
50388: LD_STRING 
50390: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50391: LD_ADDR_OWVAR 31
50395: PUSH
50396: LD_INT 0
50398: PPUSH
50399: LD_INT 3
50401: PPUSH
50402: CALL_OW 12
50406: PUSH
50407: LD_INT 0
50409: PPUSH
50410: LD_INT 3
50412: PPUSH
50413: CALL_OW 12
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: ST_TO_ADDR
// end ;
50430: LD_VAR 0 1
50434: RET
// export function PrepareApemanEngineer ( ) ; begin
50435: LD_INT 0
50437: PPUSH
// uc_nation := 0 ;
50438: LD_ADDR_OWVAR 21
50442: PUSH
50443: LD_INT 0
50445: ST_TO_ADDR
// hc_sex := sex_male ;
50446: LD_ADDR_OWVAR 27
50450: PUSH
50451: LD_INT 1
50453: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50454: LD_ADDR_OWVAR 28
50458: PUSH
50459: LD_INT 16
50461: ST_TO_ADDR
// hc_gallery :=  ;
50462: LD_ADDR_OWVAR 33
50466: PUSH
50467: LD_STRING 
50469: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50470: LD_ADDR_OWVAR 31
50474: PUSH
50475: LD_INT 0
50477: PPUSH
50478: LD_INT 3
50480: PPUSH
50481: CALL_OW 12
50485: PUSH
50486: LD_INT 0
50488: PPUSH
50489: LD_INT 3
50491: PPUSH
50492: CALL_OW 12
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: ST_TO_ADDR
// end ;
50509: LD_VAR 0 1
50513: RET
// export function PrepareApeman ( agressivity ) ; begin
50514: LD_INT 0
50516: PPUSH
// uc_side := 0 ;
50517: LD_ADDR_OWVAR 20
50521: PUSH
50522: LD_INT 0
50524: ST_TO_ADDR
// uc_nation := 0 ;
50525: LD_ADDR_OWVAR 21
50529: PUSH
50530: LD_INT 0
50532: ST_TO_ADDR
// hc_sex := sex_male ;
50533: LD_ADDR_OWVAR 27
50537: PUSH
50538: LD_INT 1
50540: ST_TO_ADDR
// hc_class := class_apeman ;
50541: LD_ADDR_OWVAR 28
50545: PUSH
50546: LD_INT 12
50548: ST_TO_ADDR
// hc_gallery :=  ;
50549: LD_ADDR_OWVAR 33
50553: PUSH
50554: LD_STRING 
50556: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50557: LD_ADDR_OWVAR 35
50561: PUSH
50562: LD_VAR 0 1
50566: NEG
50567: PPUSH
50568: LD_VAR 0 1
50572: PPUSH
50573: CALL_OW 12
50577: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50578: LD_ADDR_OWVAR 31
50582: PUSH
50583: LD_INT 0
50585: PPUSH
50586: LD_INT 3
50588: PPUSH
50589: CALL_OW 12
50593: PUSH
50594: LD_INT 0
50596: PPUSH
50597: LD_INT 3
50599: PPUSH
50600: CALL_OW 12
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: ST_TO_ADDR
// end ;
50617: LD_VAR 0 2
50621: RET
// export function PrepareTiger ( agressivity ) ; begin
50622: LD_INT 0
50624: PPUSH
// uc_side := 0 ;
50625: LD_ADDR_OWVAR 20
50629: PUSH
50630: LD_INT 0
50632: ST_TO_ADDR
// uc_nation := 0 ;
50633: LD_ADDR_OWVAR 21
50637: PUSH
50638: LD_INT 0
50640: ST_TO_ADDR
// hc_class := class_tiger ;
50641: LD_ADDR_OWVAR 28
50645: PUSH
50646: LD_INT 14
50648: ST_TO_ADDR
// hc_gallery :=  ;
50649: LD_ADDR_OWVAR 33
50653: PUSH
50654: LD_STRING 
50656: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50657: LD_ADDR_OWVAR 35
50661: PUSH
50662: LD_VAR 0 1
50666: NEG
50667: PPUSH
50668: LD_VAR 0 1
50672: PPUSH
50673: CALL_OW 12
50677: ST_TO_ADDR
// end ;
50678: LD_VAR 0 2
50682: RET
// export function PrepareEnchidna ( ) ; begin
50683: LD_INT 0
50685: PPUSH
// uc_side := 0 ;
50686: LD_ADDR_OWVAR 20
50690: PUSH
50691: LD_INT 0
50693: ST_TO_ADDR
// uc_nation := 0 ;
50694: LD_ADDR_OWVAR 21
50698: PUSH
50699: LD_INT 0
50701: ST_TO_ADDR
// hc_class := class_baggie ;
50702: LD_ADDR_OWVAR 28
50706: PUSH
50707: LD_INT 13
50709: ST_TO_ADDR
// hc_gallery :=  ;
50710: LD_ADDR_OWVAR 33
50714: PUSH
50715: LD_STRING 
50717: ST_TO_ADDR
// end ;
50718: LD_VAR 0 1
50722: RET
// export function PrepareFrog ( ) ; begin
50723: LD_INT 0
50725: PPUSH
// uc_side := 0 ;
50726: LD_ADDR_OWVAR 20
50730: PUSH
50731: LD_INT 0
50733: ST_TO_ADDR
// uc_nation := 0 ;
50734: LD_ADDR_OWVAR 21
50738: PUSH
50739: LD_INT 0
50741: ST_TO_ADDR
// hc_class := class_frog ;
50742: LD_ADDR_OWVAR 28
50746: PUSH
50747: LD_INT 19
50749: ST_TO_ADDR
// hc_gallery :=  ;
50750: LD_ADDR_OWVAR 33
50754: PUSH
50755: LD_STRING 
50757: ST_TO_ADDR
// end ;
50758: LD_VAR 0 1
50762: RET
// export function PrepareFish ( ) ; begin
50763: LD_INT 0
50765: PPUSH
// uc_side := 0 ;
50766: LD_ADDR_OWVAR 20
50770: PUSH
50771: LD_INT 0
50773: ST_TO_ADDR
// uc_nation := 0 ;
50774: LD_ADDR_OWVAR 21
50778: PUSH
50779: LD_INT 0
50781: ST_TO_ADDR
// hc_class := class_fish ;
50782: LD_ADDR_OWVAR 28
50786: PUSH
50787: LD_INT 20
50789: ST_TO_ADDR
// hc_gallery :=  ;
50790: LD_ADDR_OWVAR 33
50794: PUSH
50795: LD_STRING 
50797: ST_TO_ADDR
// end ;
50798: LD_VAR 0 1
50802: RET
// export function PrepareBird ( ) ; begin
50803: LD_INT 0
50805: PPUSH
// uc_side := 0 ;
50806: LD_ADDR_OWVAR 20
50810: PUSH
50811: LD_INT 0
50813: ST_TO_ADDR
// uc_nation := 0 ;
50814: LD_ADDR_OWVAR 21
50818: PUSH
50819: LD_INT 0
50821: ST_TO_ADDR
// hc_class := class_phororhacos ;
50822: LD_ADDR_OWVAR 28
50826: PUSH
50827: LD_INT 18
50829: ST_TO_ADDR
// hc_gallery :=  ;
50830: LD_ADDR_OWVAR 33
50834: PUSH
50835: LD_STRING 
50837: ST_TO_ADDR
// end ;
50838: LD_VAR 0 1
50842: RET
// export function PrepareHorse ( ) ; begin
50843: LD_INT 0
50845: PPUSH
// uc_side := 0 ;
50846: LD_ADDR_OWVAR 20
50850: PUSH
50851: LD_INT 0
50853: ST_TO_ADDR
// uc_nation := 0 ;
50854: LD_ADDR_OWVAR 21
50858: PUSH
50859: LD_INT 0
50861: ST_TO_ADDR
// hc_class := class_horse ;
50862: LD_ADDR_OWVAR 28
50866: PUSH
50867: LD_INT 21
50869: ST_TO_ADDR
// hc_gallery :=  ;
50870: LD_ADDR_OWVAR 33
50874: PUSH
50875: LD_STRING 
50877: ST_TO_ADDR
// end ;
50878: LD_VAR 0 1
50882: RET
// export function PrepareMastodont ( ) ; begin
50883: LD_INT 0
50885: PPUSH
// uc_side := 0 ;
50886: LD_ADDR_OWVAR 20
50890: PUSH
50891: LD_INT 0
50893: ST_TO_ADDR
// uc_nation := 0 ;
50894: LD_ADDR_OWVAR 21
50898: PUSH
50899: LD_INT 0
50901: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50902: LD_ADDR_OWVAR 37
50906: PUSH
50907: LD_INT 31
50909: ST_TO_ADDR
// vc_control := control_rider ;
50910: LD_ADDR_OWVAR 38
50914: PUSH
50915: LD_INT 4
50917: ST_TO_ADDR
// end ;
50918: LD_VAR 0 1
50922: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50923: LD_INT 0
50925: PPUSH
50926: PPUSH
50927: PPUSH
// uc_side = 0 ;
50928: LD_ADDR_OWVAR 20
50932: PUSH
50933: LD_INT 0
50935: ST_TO_ADDR
// uc_nation = 0 ;
50936: LD_ADDR_OWVAR 21
50940: PUSH
50941: LD_INT 0
50943: ST_TO_ADDR
// InitHc_All ( ) ;
50944: CALL_OW 584
// InitVc ;
50948: CALL_OW 20
// if mastodonts then
50952: LD_VAR 0 6
50956: IFFALSE 51023
// for i = 1 to mastodonts do
50958: LD_ADDR_VAR 0 11
50962: PUSH
50963: DOUBLE
50964: LD_INT 1
50966: DEC
50967: ST_TO_ADDR
50968: LD_VAR 0 6
50972: PUSH
50973: FOR_TO
50974: IFFALSE 51021
// begin vc_chassis := 31 ;
50976: LD_ADDR_OWVAR 37
50980: PUSH
50981: LD_INT 31
50983: ST_TO_ADDR
// vc_control := control_rider ;
50984: LD_ADDR_OWVAR 38
50988: PUSH
50989: LD_INT 4
50991: ST_TO_ADDR
// animal := CreateVehicle ;
50992: LD_ADDR_VAR 0 12
50996: PUSH
50997: CALL_OW 45
51001: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51002: LD_VAR 0 12
51006: PPUSH
51007: LD_VAR 0 8
51011: PPUSH
51012: LD_INT 0
51014: PPUSH
51015: CALL 53151 0 3
// end ;
51019: GO 50973
51021: POP
51022: POP
// if horses then
51023: LD_VAR 0 5
51027: IFFALSE 51094
// for i = 1 to horses do
51029: LD_ADDR_VAR 0 11
51033: PUSH
51034: DOUBLE
51035: LD_INT 1
51037: DEC
51038: ST_TO_ADDR
51039: LD_VAR 0 5
51043: PUSH
51044: FOR_TO
51045: IFFALSE 51092
// begin hc_class := 21 ;
51047: LD_ADDR_OWVAR 28
51051: PUSH
51052: LD_INT 21
51054: ST_TO_ADDR
// hc_gallery :=  ;
51055: LD_ADDR_OWVAR 33
51059: PUSH
51060: LD_STRING 
51062: ST_TO_ADDR
// animal := CreateHuman ;
51063: LD_ADDR_VAR 0 12
51067: PUSH
51068: CALL_OW 44
51072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51073: LD_VAR 0 12
51077: PPUSH
51078: LD_VAR 0 8
51082: PPUSH
51083: LD_INT 0
51085: PPUSH
51086: CALL 53151 0 3
// end ;
51090: GO 51044
51092: POP
51093: POP
// if birds then
51094: LD_VAR 0 1
51098: IFFALSE 51165
// for i = 1 to birds do
51100: LD_ADDR_VAR 0 11
51104: PUSH
51105: DOUBLE
51106: LD_INT 1
51108: DEC
51109: ST_TO_ADDR
51110: LD_VAR 0 1
51114: PUSH
51115: FOR_TO
51116: IFFALSE 51163
// begin hc_class = 18 ;
51118: LD_ADDR_OWVAR 28
51122: PUSH
51123: LD_INT 18
51125: ST_TO_ADDR
// hc_gallery =  ;
51126: LD_ADDR_OWVAR 33
51130: PUSH
51131: LD_STRING 
51133: ST_TO_ADDR
// animal := CreateHuman ;
51134: LD_ADDR_VAR 0 12
51138: PUSH
51139: CALL_OW 44
51143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51144: LD_VAR 0 12
51148: PPUSH
51149: LD_VAR 0 8
51153: PPUSH
51154: LD_INT 0
51156: PPUSH
51157: CALL 53151 0 3
// end ;
51161: GO 51115
51163: POP
51164: POP
// if tigers then
51165: LD_VAR 0 2
51169: IFFALSE 51253
// for i = 1 to tigers do
51171: LD_ADDR_VAR 0 11
51175: PUSH
51176: DOUBLE
51177: LD_INT 1
51179: DEC
51180: ST_TO_ADDR
51181: LD_VAR 0 2
51185: PUSH
51186: FOR_TO
51187: IFFALSE 51251
// begin hc_class = class_tiger ;
51189: LD_ADDR_OWVAR 28
51193: PUSH
51194: LD_INT 14
51196: ST_TO_ADDR
// hc_gallery =  ;
51197: LD_ADDR_OWVAR 33
51201: PUSH
51202: LD_STRING 
51204: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51205: LD_ADDR_OWVAR 35
51209: PUSH
51210: LD_INT 7
51212: NEG
51213: PPUSH
51214: LD_INT 7
51216: PPUSH
51217: CALL_OW 12
51221: ST_TO_ADDR
// animal := CreateHuman ;
51222: LD_ADDR_VAR 0 12
51226: PUSH
51227: CALL_OW 44
51231: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51232: LD_VAR 0 12
51236: PPUSH
51237: LD_VAR 0 8
51241: PPUSH
51242: LD_INT 0
51244: PPUSH
51245: CALL 53151 0 3
// end ;
51249: GO 51186
51251: POP
51252: POP
// if apemans then
51253: LD_VAR 0 3
51257: IFFALSE 51380
// for i = 1 to apemans do
51259: LD_ADDR_VAR 0 11
51263: PUSH
51264: DOUBLE
51265: LD_INT 1
51267: DEC
51268: ST_TO_ADDR
51269: LD_VAR 0 3
51273: PUSH
51274: FOR_TO
51275: IFFALSE 51378
// begin hc_class = class_apeman ;
51277: LD_ADDR_OWVAR 28
51281: PUSH
51282: LD_INT 12
51284: ST_TO_ADDR
// hc_gallery =  ;
51285: LD_ADDR_OWVAR 33
51289: PUSH
51290: LD_STRING 
51292: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51293: LD_ADDR_OWVAR 35
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PPUSH
51302: LD_INT 2
51304: PPUSH
51305: CALL_OW 12
51309: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51310: LD_ADDR_OWVAR 31
51314: PUSH
51315: LD_INT 1
51317: PPUSH
51318: LD_INT 3
51320: PPUSH
51321: CALL_OW 12
51325: PUSH
51326: LD_INT 1
51328: PPUSH
51329: LD_INT 3
51331: PPUSH
51332: CALL_OW 12
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: ST_TO_ADDR
// animal := CreateHuman ;
51349: LD_ADDR_VAR 0 12
51353: PUSH
51354: CALL_OW 44
51358: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51359: LD_VAR 0 12
51363: PPUSH
51364: LD_VAR 0 8
51368: PPUSH
51369: LD_INT 0
51371: PPUSH
51372: CALL 53151 0 3
// end ;
51376: GO 51274
51378: POP
51379: POP
// if enchidnas then
51380: LD_VAR 0 4
51384: IFFALSE 51451
// for i = 1 to enchidnas do
51386: LD_ADDR_VAR 0 11
51390: PUSH
51391: DOUBLE
51392: LD_INT 1
51394: DEC
51395: ST_TO_ADDR
51396: LD_VAR 0 4
51400: PUSH
51401: FOR_TO
51402: IFFALSE 51449
// begin hc_class = 13 ;
51404: LD_ADDR_OWVAR 28
51408: PUSH
51409: LD_INT 13
51411: ST_TO_ADDR
// hc_gallery =  ;
51412: LD_ADDR_OWVAR 33
51416: PUSH
51417: LD_STRING 
51419: ST_TO_ADDR
// animal := CreateHuman ;
51420: LD_ADDR_VAR 0 12
51424: PUSH
51425: CALL_OW 44
51429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51430: LD_VAR 0 12
51434: PPUSH
51435: LD_VAR 0 8
51439: PPUSH
51440: LD_INT 0
51442: PPUSH
51443: CALL 53151 0 3
// end ;
51447: GO 51401
51449: POP
51450: POP
// if fishes then
51451: LD_VAR 0 7
51455: IFFALSE 51522
// for i = 1 to fishes do
51457: LD_ADDR_VAR 0 11
51461: PUSH
51462: DOUBLE
51463: LD_INT 1
51465: DEC
51466: ST_TO_ADDR
51467: LD_VAR 0 7
51471: PUSH
51472: FOR_TO
51473: IFFALSE 51520
// begin hc_class = 20 ;
51475: LD_ADDR_OWVAR 28
51479: PUSH
51480: LD_INT 20
51482: ST_TO_ADDR
// hc_gallery =  ;
51483: LD_ADDR_OWVAR 33
51487: PUSH
51488: LD_STRING 
51490: ST_TO_ADDR
// animal := CreateHuman ;
51491: LD_ADDR_VAR 0 12
51495: PUSH
51496: CALL_OW 44
51500: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51501: LD_VAR 0 12
51505: PPUSH
51506: LD_VAR 0 9
51510: PPUSH
51511: LD_INT 0
51513: PPUSH
51514: CALL 53151 0 3
// end ;
51518: GO 51472
51520: POP
51521: POP
// end ;
51522: LD_VAR 0 10
51526: RET
// export function WantHeal ( sci , unit ) ; begin
51527: LD_INT 0
51529: PPUSH
// if GetTaskList ( sci ) > 0 then
51530: LD_VAR 0 1
51534: PPUSH
51535: CALL_OW 437
51539: PUSH
51540: LD_INT 0
51542: GREATER
51543: IFFALSE 51613
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51545: LD_VAR 0 1
51549: PPUSH
51550: CALL_OW 437
51554: PUSH
51555: LD_INT 1
51557: ARRAY
51558: PUSH
51559: LD_INT 1
51561: ARRAY
51562: PUSH
51563: LD_STRING l
51565: EQUAL
51566: PUSH
51567: LD_VAR 0 1
51571: PPUSH
51572: CALL_OW 437
51576: PUSH
51577: LD_INT 1
51579: ARRAY
51580: PUSH
51581: LD_INT 4
51583: ARRAY
51584: PUSH
51585: LD_VAR 0 2
51589: EQUAL
51590: AND
51591: IFFALSE 51603
// result := true else
51593: LD_ADDR_VAR 0 3
51597: PUSH
51598: LD_INT 1
51600: ST_TO_ADDR
51601: GO 51611
// result := false ;
51603: LD_ADDR_VAR 0 3
51607: PUSH
51608: LD_INT 0
51610: ST_TO_ADDR
// end else
51611: GO 51621
// result := false ;
51613: LD_ADDR_VAR 0 3
51617: PUSH
51618: LD_INT 0
51620: ST_TO_ADDR
// end ;
51621: LD_VAR 0 3
51625: RET
// export function HealTarget ( sci ) ; begin
51626: LD_INT 0
51628: PPUSH
// if not sci then
51629: LD_VAR 0 1
51633: NOT
51634: IFFALSE 51638
// exit ;
51636: GO 51703
// result := 0 ;
51638: LD_ADDR_VAR 0 2
51642: PUSH
51643: LD_INT 0
51645: ST_TO_ADDR
// if GetTaskList ( sci ) then
51646: LD_VAR 0 1
51650: PPUSH
51651: CALL_OW 437
51655: IFFALSE 51703
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51657: LD_VAR 0 1
51661: PPUSH
51662: CALL_OW 437
51666: PUSH
51667: LD_INT 1
51669: ARRAY
51670: PUSH
51671: LD_INT 1
51673: ARRAY
51674: PUSH
51675: LD_STRING l
51677: EQUAL
51678: IFFALSE 51703
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51680: LD_ADDR_VAR 0 2
51684: PUSH
51685: LD_VAR 0 1
51689: PPUSH
51690: CALL_OW 437
51694: PUSH
51695: LD_INT 1
51697: ARRAY
51698: PUSH
51699: LD_INT 4
51701: ARRAY
51702: ST_TO_ADDR
// end ;
51703: LD_VAR 0 2
51707: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51708: LD_INT 0
51710: PPUSH
51711: PPUSH
51712: PPUSH
51713: PPUSH
// if not base_units then
51714: LD_VAR 0 1
51718: NOT
51719: IFFALSE 51723
// exit ;
51721: GO 51810
// result := false ;
51723: LD_ADDR_VAR 0 2
51727: PUSH
51728: LD_INT 0
51730: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51731: LD_ADDR_VAR 0 5
51735: PUSH
51736: LD_VAR 0 1
51740: PPUSH
51741: LD_INT 21
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PPUSH
51751: CALL_OW 72
51755: ST_TO_ADDR
// if not tmp then
51756: LD_VAR 0 5
51760: NOT
51761: IFFALSE 51765
// exit ;
51763: GO 51810
// for i in tmp do
51765: LD_ADDR_VAR 0 3
51769: PUSH
51770: LD_VAR 0 5
51774: PUSH
51775: FOR_IN
51776: IFFALSE 51808
// begin result := EnemyInRange ( i , 22 ) ;
51778: LD_ADDR_VAR 0 2
51782: PUSH
51783: LD_VAR 0 3
51787: PPUSH
51788: LD_INT 22
51790: PPUSH
51791: CALL 49397 0 2
51795: ST_TO_ADDR
// if result then
51796: LD_VAR 0 2
51800: IFFALSE 51806
// exit ;
51802: POP
51803: POP
51804: GO 51810
// end ;
51806: GO 51775
51808: POP
51809: POP
// end ;
51810: LD_VAR 0 2
51814: RET
// export function FilterByTag ( units , tag ) ; begin
51815: LD_INT 0
51817: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51818: LD_ADDR_VAR 0 3
51822: PUSH
51823: LD_VAR 0 1
51827: PPUSH
51828: LD_INT 120
51830: PUSH
51831: LD_VAR 0 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PPUSH
51840: CALL_OW 72
51844: ST_TO_ADDR
// end ;
51845: LD_VAR 0 3
51849: RET
// export function IsDriver ( un ) ; begin
51850: LD_INT 0
51852: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51853: LD_ADDR_VAR 0 2
51857: PUSH
51858: LD_VAR 0 1
51862: PUSH
51863: LD_INT 55
51865: PUSH
51866: EMPTY
51867: LIST
51868: PPUSH
51869: CALL_OW 69
51873: IN
51874: ST_TO_ADDR
// end ;
51875: LD_VAR 0 2
51879: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51880: LD_INT 0
51882: PPUSH
51883: PPUSH
// list := [ ] ;
51884: LD_ADDR_VAR 0 5
51888: PUSH
51889: EMPTY
51890: ST_TO_ADDR
// case d of 0 :
51891: LD_VAR 0 3
51895: PUSH
51896: LD_INT 0
51898: DOUBLE
51899: EQUAL
51900: IFTRUE 51904
51902: GO 52037
51904: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51905: LD_ADDR_VAR 0 5
51909: PUSH
51910: LD_VAR 0 1
51914: PUSH
51915: LD_INT 4
51917: MINUS
51918: PUSH
51919: LD_VAR 0 2
51923: PUSH
51924: LD_INT 4
51926: MINUS
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: PUSH
51936: LD_VAR 0 1
51940: PUSH
51941: LD_INT 3
51943: MINUS
51944: PUSH
51945: LD_VAR 0 2
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: LIST
51957: PUSH
51958: LD_VAR 0 1
51962: PUSH
51963: LD_INT 4
51965: PLUS
51966: PUSH
51967: LD_VAR 0 2
51971: PUSH
51972: LD_INT 4
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: PUSH
51980: LD_VAR 0 1
51984: PUSH
51985: LD_INT 3
51987: PLUS
51988: PUSH
51989: LD_VAR 0 2
51993: PUSH
51994: LD_INT 3
51996: PLUS
51997: PUSH
51998: LD_INT 5
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: PUSH
52006: LD_VAR 0 1
52010: PUSH
52011: LD_VAR 0 2
52015: PUSH
52016: LD_INT 4
52018: PLUS
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: LIST
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: ST_TO_ADDR
// end ; 1 :
52035: GO 52735
52037: LD_INT 1
52039: DOUBLE
52040: EQUAL
52041: IFTRUE 52045
52043: GO 52178
52045: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52046: LD_ADDR_VAR 0 5
52050: PUSH
52051: LD_VAR 0 1
52055: PUSH
52056: LD_VAR 0 2
52060: PUSH
52061: LD_INT 4
52063: MINUS
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: PUSH
52073: LD_VAR 0 1
52077: PUSH
52078: LD_INT 3
52080: MINUS
52081: PUSH
52082: LD_VAR 0 2
52086: PUSH
52087: LD_INT 3
52089: MINUS
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: PUSH
52099: LD_VAR 0 1
52103: PUSH
52104: LD_INT 4
52106: MINUS
52107: PUSH
52108: LD_VAR 0 2
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: PUSH
52121: LD_VAR 0 1
52125: PUSH
52126: LD_VAR 0 2
52130: PUSH
52131: LD_INT 3
52133: PLUS
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: LIST
52142: PUSH
52143: LD_VAR 0 1
52147: PUSH
52148: LD_INT 4
52150: PLUS
52151: PUSH
52152: LD_VAR 0 2
52156: PUSH
52157: LD_INT 4
52159: PLUS
52160: PUSH
52161: LD_INT 5
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: LIST
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: ST_TO_ADDR
// end ; 2 :
52176: GO 52735
52178: LD_INT 2
52180: DOUBLE
52181: EQUAL
52182: IFTRUE 52186
52184: GO 52315
52186: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52187: LD_ADDR_VAR 0 5
52191: PUSH
52192: LD_VAR 0 1
52196: PUSH
52197: LD_VAR 0 2
52201: PUSH
52202: LD_INT 3
52204: MINUS
52205: PUSH
52206: LD_INT 3
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: LIST
52213: PUSH
52214: LD_VAR 0 1
52218: PUSH
52219: LD_INT 4
52221: PLUS
52222: PUSH
52223: LD_VAR 0 2
52227: PUSH
52228: LD_INT 4
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: PUSH
52236: LD_VAR 0 1
52240: PUSH
52241: LD_VAR 0 2
52245: PUSH
52246: LD_INT 4
52248: PLUS
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: LIST
52257: PUSH
52258: LD_VAR 0 1
52262: PUSH
52263: LD_INT 3
52265: MINUS
52266: PUSH
52267: LD_VAR 0 2
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: LIST
52279: PUSH
52280: LD_VAR 0 1
52284: PUSH
52285: LD_INT 4
52287: MINUS
52288: PUSH
52289: LD_VAR 0 2
52293: PUSH
52294: LD_INT 4
52296: MINUS
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: LIST
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: ST_TO_ADDR
// end ; 3 :
52313: GO 52735
52315: LD_INT 3
52317: DOUBLE
52318: EQUAL
52319: IFTRUE 52323
52321: GO 52456
52323: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52324: LD_ADDR_VAR 0 5
52328: PUSH
52329: LD_VAR 0 1
52333: PUSH
52334: LD_INT 3
52336: PLUS
52337: PUSH
52338: LD_VAR 0 2
52342: PUSH
52343: LD_INT 4
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: PUSH
52351: LD_VAR 0 1
52355: PUSH
52356: LD_INT 4
52358: PLUS
52359: PUSH
52360: LD_VAR 0 2
52364: PUSH
52365: LD_INT 4
52367: PLUS
52368: PUSH
52369: LD_INT 5
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: LIST
52376: PUSH
52377: LD_VAR 0 1
52381: PUSH
52382: LD_INT 4
52384: MINUS
52385: PUSH
52386: LD_VAR 0 2
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: PUSH
52399: LD_VAR 0 1
52403: PUSH
52404: LD_VAR 0 2
52408: PUSH
52409: LD_INT 4
52411: MINUS
52412: PUSH
52413: LD_INT 3
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: LIST
52420: PUSH
52421: LD_VAR 0 1
52425: PUSH
52426: LD_INT 3
52428: MINUS
52429: PUSH
52430: LD_VAR 0 2
52434: PUSH
52435: LD_INT 3
52437: MINUS
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: LIST
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: ST_TO_ADDR
// end ; 4 :
52454: GO 52735
52456: LD_INT 4
52458: DOUBLE
52459: EQUAL
52460: IFTRUE 52464
52462: GO 52597
52464: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52465: LD_ADDR_VAR 0 5
52469: PUSH
52470: LD_VAR 0 1
52474: PUSH
52475: LD_VAR 0 2
52479: PUSH
52480: LD_INT 4
52482: PLUS
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: PUSH
52492: LD_VAR 0 1
52496: PUSH
52497: LD_INT 3
52499: PLUS
52500: PUSH
52501: LD_VAR 0 2
52505: PUSH
52506: LD_INT 3
52508: PLUS
52509: PUSH
52510: LD_INT 5
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: LIST
52517: PUSH
52518: LD_VAR 0 1
52522: PUSH
52523: LD_INT 4
52525: PLUS
52526: PUSH
52527: LD_VAR 0 2
52531: PUSH
52532: LD_INT 4
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: LIST
52539: PUSH
52540: LD_VAR 0 1
52544: PUSH
52545: LD_VAR 0 2
52549: PUSH
52550: LD_INT 3
52552: MINUS
52553: PUSH
52554: LD_INT 3
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: PUSH
52562: LD_VAR 0 1
52566: PUSH
52567: LD_INT 4
52569: MINUS
52570: PUSH
52571: LD_VAR 0 2
52575: PUSH
52576: LD_INT 4
52578: MINUS
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: ST_TO_ADDR
// end ; 5 :
52595: GO 52735
52597: LD_INT 5
52599: DOUBLE
52600: EQUAL
52601: IFTRUE 52605
52603: GO 52734
52605: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52606: LD_ADDR_VAR 0 5
52610: PUSH
52611: LD_VAR 0 1
52615: PUSH
52616: LD_INT 4
52618: MINUS
52619: PUSH
52620: LD_VAR 0 2
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: PUSH
52633: LD_VAR 0 1
52637: PUSH
52638: LD_VAR 0 2
52642: PUSH
52643: LD_INT 4
52645: MINUS
52646: PUSH
52647: LD_INT 3
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: PUSH
52655: LD_VAR 0 1
52659: PUSH
52660: LD_INT 4
52662: PLUS
52663: PUSH
52664: LD_VAR 0 2
52668: PUSH
52669: LD_INT 4
52671: PLUS
52672: PUSH
52673: LD_INT 5
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: LIST
52680: PUSH
52681: LD_VAR 0 1
52685: PUSH
52686: LD_INT 3
52688: PLUS
52689: PUSH
52690: LD_VAR 0 2
52694: PUSH
52695: LD_INT 4
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: LIST
52702: PUSH
52703: LD_VAR 0 1
52707: PUSH
52708: LD_VAR 0 2
52712: PUSH
52713: LD_INT 3
52715: PLUS
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: LIST
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: ST_TO_ADDR
// end ; end ;
52732: GO 52735
52734: POP
// result := list ;
52735: LD_ADDR_VAR 0 4
52739: PUSH
52740: LD_VAR 0 5
52744: ST_TO_ADDR
// end ;
52745: LD_VAR 0 4
52749: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52750: LD_INT 0
52752: PPUSH
52753: PPUSH
52754: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52755: LD_VAR 0 1
52759: NOT
52760: PUSH
52761: LD_VAR 0 2
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: LD_INT 4
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: IN
52784: NOT
52785: OR
52786: IFFALSE 52790
// exit ;
52788: GO 52873
// tmp := [ ] ;
52790: LD_ADDR_VAR 0 5
52794: PUSH
52795: EMPTY
52796: ST_TO_ADDR
// for i in units do
52797: LD_ADDR_VAR 0 4
52801: PUSH
52802: LD_VAR 0 1
52806: PUSH
52807: FOR_IN
52808: IFFALSE 52842
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52810: LD_ADDR_VAR 0 5
52814: PUSH
52815: LD_VAR 0 5
52819: PPUSH
52820: LD_VAR 0 4
52824: PPUSH
52825: LD_VAR 0 2
52829: PPUSH
52830: CALL_OW 259
52834: PPUSH
52835: CALL 54233 0 2
52839: ST_TO_ADDR
52840: GO 52807
52842: POP
52843: POP
// if not tmp then
52844: LD_VAR 0 5
52848: NOT
52849: IFFALSE 52853
// exit ;
52851: GO 52873
// result := SortListByListDesc ( units , tmp ) ;
52853: LD_ADDR_VAR 0 3
52857: PUSH
52858: LD_VAR 0 1
52862: PPUSH
52863: LD_VAR 0 5
52867: PPUSH
52868: CALL_OW 77
52872: ST_TO_ADDR
// end ;
52873: LD_VAR 0 3
52877: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52878: LD_INT 0
52880: PPUSH
52881: PPUSH
52882: PPUSH
// result := false ;
52883: LD_ADDR_VAR 0 3
52887: PUSH
52888: LD_INT 0
52890: ST_TO_ADDR
// if not building then
52891: LD_VAR 0 2
52895: NOT
52896: IFFALSE 52900
// exit ;
52898: GO 53038
// x := GetX ( building ) ;
52900: LD_ADDR_VAR 0 4
52904: PUSH
52905: LD_VAR 0 2
52909: PPUSH
52910: CALL_OW 250
52914: ST_TO_ADDR
// y := GetY ( building ) ;
52915: LD_ADDR_VAR 0 5
52919: PUSH
52920: LD_VAR 0 2
52924: PPUSH
52925: CALL_OW 251
52929: ST_TO_ADDR
// if not x or not y then
52930: LD_VAR 0 4
52934: NOT
52935: PUSH
52936: LD_VAR 0 5
52940: NOT
52941: OR
52942: IFFALSE 52946
// exit ;
52944: GO 53038
// if GetTaskList ( unit ) then
52946: LD_VAR 0 1
52950: PPUSH
52951: CALL_OW 437
52955: IFFALSE 53038
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52957: LD_STRING e
52959: PUSH
52960: LD_VAR 0 1
52964: PPUSH
52965: CALL_OW 437
52969: PUSH
52970: LD_INT 1
52972: ARRAY
52973: PUSH
52974: LD_INT 1
52976: ARRAY
52977: EQUAL
52978: PUSH
52979: LD_VAR 0 4
52983: PUSH
52984: LD_VAR 0 1
52988: PPUSH
52989: CALL_OW 437
52993: PUSH
52994: LD_INT 1
52996: ARRAY
52997: PUSH
52998: LD_INT 2
53000: ARRAY
53001: EQUAL
53002: AND
53003: PUSH
53004: LD_VAR 0 5
53008: PUSH
53009: LD_VAR 0 1
53013: PPUSH
53014: CALL_OW 437
53018: PUSH
53019: LD_INT 1
53021: ARRAY
53022: PUSH
53023: LD_INT 3
53025: ARRAY
53026: EQUAL
53027: AND
53028: IFFALSE 53038
// result := true end ;
53030: LD_ADDR_VAR 0 3
53034: PUSH
53035: LD_INT 1
53037: ST_TO_ADDR
// end ;
53038: LD_VAR 0 3
53042: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53043: LD_INT 0
53045: PPUSH
// result := false ;
53046: LD_ADDR_VAR 0 4
53050: PUSH
53051: LD_INT 0
53053: ST_TO_ADDR
// if GetTaskList ( unit ) then
53054: LD_VAR 0 1
53058: PPUSH
53059: CALL_OW 437
53063: IFFALSE 53146
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53065: LD_STRING M
53067: PUSH
53068: LD_VAR 0 1
53072: PPUSH
53073: CALL_OW 437
53077: PUSH
53078: LD_INT 1
53080: ARRAY
53081: PUSH
53082: LD_INT 1
53084: ARRAY
53085: EQUAL
53086: PUSH
53087: LD_VAR 0 2
53091: PUSH
53092: LD_VAR 0 1
53096: PPUSH
53097: CALL_OW 437
53101: PUSH
53102: LD_INT 1
53104: ARRAY
53105: PUSH
53106: LD_INT 2
53108: ARRAY
53109: EQUAL
53110: AND
53111: PUSH
53112: LD_VAR 0 3
53116: PUSH
53117: LD_VAR 0 1
53121: PPUSH
53122: CALL_OW 437
53126: PUSH
53127: LD_INT 1
53129: ARRAY
53130: PUSH
53131: LD_INT 3
53133: ARRAY
53134: EQUAL
53135: AND
53136: IFFALSE 53146
// result := true ;
53138: LD_ADDR_VAR 0 4
53142: PUSH
53143: LD_INT 1
53145: ST_TO_ADDR
// end ; end ;
53146: LD_VAR 0 4
53150: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53151: LD_INT 0
53153: PPUSH
53154: PPUSH
53155: PPUSH
53156: PPUSH
// if not unit or not area then
53157: LD_VAR 0 1
53161: NOT
53162: PUSH
53163: LD_VAR 0 2
53167: NOT
53168: OR
53169: IFFALSE 53173
// exit ;
53171: GO 53336
// tmp := AreaToList ( area , i ) ;
53173: LD_ADDR_VAR 0 6
53177: PUSH
53178: LD_VAR 0 2
53182: PPUSH
53183: LD_VAR 0 5
53187: PPUSH
53188: CALL_OW 517
53192: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53193: LD_ADDR_VAR 0 5
53197: PUSH
53198: DOUBLE
53199: LD_INT 1
53201: DEC
53202: ST_TO_ADDR
53203: LD_VAR 0 6
53207: PUSH
53208: LD_INT 1
53210: ARRAY
53211: PUSH
53212: FOR_TO
53213: IFFALSE 53334
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53215: LD_ADDR_VAR 0 7
53219: PUSH
53220: LD_VAR 0 6
53224: PUSH
53225: LD_INT 1
53227: ARRAY
53228: PUSH
53229: LD_VAR 0 5
53233: ARRAY
53234: PUSH
53235: LD_VAR 0 6
53239: PUSH
53240: LD_INT 2
53242: ARRAY
53243: PUSH
53244: LD_VAR 0 5
53248: ARRAY
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
53254: LD_INT 92
53256: PUSH
53257: LD_VAR 0 7
53261: PUSH
53262: LD_INT 1
53264: ARRAY
53265: PUSH
53266: LD_VAR 0 7
53270: PUSH
53271: LD_INT 2
53273: ARRAY
53274: PUSH
53275: LD_INT 3
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: PPUSH
53284: CALL_OW 69
53288: PUSH
53289: LD_INT 0
53291: EQUAL
53292: IFFALSE 53332
// begin PlaceUnitArea ( unit , area , mode ) ;
53294: LD_VAR 0 1
53298: PPUSH
53299: LD_VAR 0 2
53303: PPUSH
53304: LD_VAR 0 3
53308: PPUSH
53309: CALL_OW 49
// result := IsPlaced ( unit ) ;
53313: LD_ADDR_VAR 0 4
53317: PUSH
53318: LD_VAR 0 1
53322: PPUSH
53323: CALL_OW 305
53327: ST_TO_ADDR
// exit ;
53328: POP
53329: POP
53330: GO 53336
// end ; end ;
53332: GO 53212
53334: POP
53335: POP
// end ;
53336: LD_VAR 0 4
53340: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53341: LD_INT 0
53343: PPUSH
53344: PPUSH
53345: PPUSH
// if not side or side > 8 then
53346: LD_VAR 0 1
53350: NOT
53351: PUSH
53352: LD_VAR 0 1
53356: PUSH
53357: LD_INT 8
53359: GREATER
53360: OR
53361: IFFALSE 53365
// exit ;
53363: GO 53552
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53365: LD_ADDR_VAR 0 4
53369: PUSH
53370: LD_INT 22
53372: PUSH
53373: LD_VAR 0 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 21
53384: PUSH
53385: LD_INT 3
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PPUSH
53396: CALL_OW 69
53400: ST_TO_ADDR
// if not tmp then
53401: LD_VAR 0 4
53405: NOT
53406: IFFALSE 53410
// exit ;
53408: GO 53552
// enable_addtolog := true ;
53410: LD_ADDR_OWVAR 81
53414: PUSH
53415: LD_INT 1
53417: ST_TO_ADDR
// AddToLog ( [ ) ;
53418: LD_STRING [
53420: PPUSH
53421: CALL_OW 561
// for i in tmp do
53425: LD_ADDR_VAR 0 3
53429: PUSH
53430: LD_VAR 0 4
53434: PUSH
53435: FOR_IN
53436: IFFALSE 53543
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53438: LD_STRING [
53440: PUSH
53441: LD_VAR 0 3
53445: PPUSH
53446: CALL_OW 266
53450: STR
53451: PUSH
53452: LD_STRING , 
53454: STR
53455: PUSH
53456: LD_VAR 0 3
53460: PPUSH
53461: CALL_OW 250
53465: STR
53466: PUSH
53467: LD_STRING , 
53469: STR
53470: PUSH
53471: LD_VAR 0 3
53475: PPUSH
53476: CALL_OW 251
53480: STR
53481: PUSH
53482: LD_STRING , 
53484: STR
53485: PUSH
53486: LD_VAR 0 3
53490: PPUSH
53491: CALL_OW 254
53495: STR
53496: PUSH
53497: LD_STRING , 
53499: STR
53500: PUSH
53501: LD_VAR 0 3
53505: PPUSH
53506: LD_INT 1
53508: PPUSH
53509: CALL_OW 268
53513: STR
53514: PUSH
53515: LD_STRING , 
53517: STR
53518: PUSH
53519: LD_VAR 0 3
53523: PPUSH
53524: LD_INT 2
53526: PPUSH
53527: CALL_OW 268
53531: STR
53532: PUSH
53533: LD_STRING ],
53535: STR
53536: PPUSH
53537: CALL_OW 561
// end ;
53541: GO 53435
53543: POP
53544: POP
// AddToLog ( ]; ) ;
53545: LD_STRING ];
53547: PPUSH
53548: CALL_OW 561
// end ;
53552: LD_VAR 0 2
53556: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53557: LD_INT 0
53559: PPUSH
53560: PPUSH
53561: PPUSH
53562: PPUSH
53563: PPUSH
// if not area or not rate or not max then
53564: LD_VAR 0 1
53568: NOT
53569: PUSH
53570: LD_VAR 0 2
53574: NOT
53575: OR
53576: PUSH
53577: LD_VAR 0 4
53581: NOT
53582: OR
53583: IFFALSE 53587
// exit ;
53585: GO 53776
// while 1 do
53587: LD_INT 1
53589: IFFALSE 53776
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53591: LD_ADDR_VAR 0 9
53595: PUSH
53596: LD_VAR 0 1
53600: PPUSH
53601: LD_INT 1
53603: PPUSH
53604: CALL_OW 287
53608: PUSH
53609: LD_INT 10
53611: MUL
53612: ST_TO_ADDR
// r := rate / 10 ;
53613: LD_ADDR_VAR 0 7
53617: PUSH
53618: LD_VAR 0 2
53622: PUSH
53623: LD_INT 10
53625: DIVREAL
53626: ST_TO_ADDR
// time := 1 1$00 ;
53627: LD_ADDR_VAR 0 8
53631: PUSH
53632: LD_INT 2100
53634: ST_TO_ADDR
// if amount < min then
53635: LD_VAR 0 9
53639: PUSH
53640: LD_VAR 0 3
53644: LESS
53645: IFFALSE 53663
// r := r * 2 else
53647: LD_ADDR_VAR 0 7
53651: PUSH
53652: LD_VAR 0 7
53656: PUSH
53657: LD_INT 2
53659: MUL
53660: ST_TO_ADDR
53661: GO 53689
// if amount > max then
53663: LD_VAR 0 9
53667: PUSH
53668: LD_VAR 0 4
53672: GREATER
53673: IFFALSE 53689
// r := r / 2 ;
53675: LD_ADDR_VAR 0 7
53679: PUSH
53680: LD_VAR 0 7
53684: PUSH
53685: LD_INT 2
53687: DIVREAL
53688: ST_TO_ADDR
// time := time / r ;
53689: LD_ADDR_VAR 0 8
53693: PUSH
53694: LD_VAR 0 8
53698: PUSH
53699: LD_VAR 0 7
53703: DIVREAL
53704: ST_TO_ADDR
// if time < 0 then
53705: LD_VAR 0 8
53709: PUSH
53710: LD_INT 0
53712: LESS
53713: IFFALSE 53730
// time := time * - 1 ;
53715: LD_ADDR_VAR 0 8
53719: PUSH
53720: LD_VAR 0 8
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: MUL
53729: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53730: LD_VAR 0 8
53734: PUSH
53735: LD_INT 35
53737: PPUSH
53738: LD_INT 875
53740: PPUSH
53741: CALL_OW 12
53745: PLUS
53746: PPUSH
53747: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53751: LD_INT 1
53753: PPUSH
53754: LD_INT 5
53756: PPUSH
53757: CALL_OW 12
53761: PPUSH
53762: LD_VAR 0 1
53766: PPUSH
53767: LD_INT 1
53769: PPUSH
53770: CALL_OW 55
// end ;
53774: GO 53587
// end ;
53776: LD_VAR 0 5
53780: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53781: LD_INT 0
53783: PPUSH
53784: PPUSH
53785: PPUSH
53786: PPUSH
53787: PPUSH
53788: PPUSH
53789: PPUSH
53790: PPUSH
// if not turrets or not factories then
53791: LD_VAR 0 1
53795: NOT
53796: PUSH
53797: LD_VAR 0 2
53801: NOT
53802: OR
53803: IFFALSE 53807
// exit ;
53805: GO 54114
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53807: LD_ADDR_VAR 0 10
53811: PUSH
53812: LD_INT 5
53814: PUSH
53815: LD_INT 6
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: LD_INT 4
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: LD_INT 5
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 24
53849: PUSH
53850: LD_INT 25
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 23
53859: PUSH
53860: LD_INT 27
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 42
53873: PUSH
53874: LD_INT 43
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 44
53883: PUSH
53884: LD_INT 46
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 45
53893: PUSH
53894: LD_INT 47
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: LIST
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: LIST
53910: ST_TO_ADDR
// result := [ ] ;
53911: LD_ADDR_VAR 0 3
53915: PUSH
53916: EMPTY
53917: ST_TO_ADDR
// for i in turrets do
53918: LD_ADDR_VAR 0 4
53922: PUSH
53923: LD_VAR 0 1
53927: PUSH
53928: FOR_IN
53929: IFFALSE 54112
// begin nat := GetNation ( i ) ;
53931: LD_ADDR_VAR 0 7
53935: PUSH
53936: LD_VAR 0 4
53940: PPUSH
53941: CALL_OW 248
53945: ST_TO_ADDR
// weapon := 0 ;
53946: LD_ADDR_VAR 0 8
53950: PUSH
53951: LD_INT 0
53953: ST_TO_ADDR
// if not nat then
53954: LD_VAR 0 7
53958: NOT
53959: IFFALSE 53963
// continue ;
53961: GO 53928
// for j in list [ nat ] do
53963: LD_ADDR_VAR 0 5
53967: PUSH
53968: LD_VAR 0 10
53972: PUSH
53973: LD_VAR 0 7
53977: ARRAY
53978: PUSH
53979: FOR_IN
53980: IFFALSE 54021
// if GetBWeapon ( i ) = j [ 1 ] then
53982: LD_VAR 0 4
53986: PPUSH
53987: CALL_OW 269
53991: PUSH
53992: LD_VAR 0 5
53996: PUSH
53997: LD_INT 1
53999: ARRAY
54000: EQUAL
54001: IFFALSE 54019
// begin weapon := j [ 2 ] ;
54003: LD_ADDR_VAR 0 8
54007: PUSH
54008: LD_VAR 0 5
54012: PUSH
54013: LD_INT 2
54015: ARRAY
54016: ST_TO_ADDR
// break ;
54017: GO 54021
// end ;
54019: GO 53979
54021: POP
54022: POP
// if not weapon then
54023: LD_VAR 0 8
54027: NOT
54028: IFFALSE 54032
// continue ;
54030: GO 53928
// for k in factories do
54032: LD_ADDR_VAR 0 6
54036: PUSH
54037: LD_VAR 0 2
54041: PUSH
54042: FOR_IN
54043: IFFALSE 54108
// begin weapons := AvailableWeaponList ( k ) ;
54045: LD_ADDR_VAR 0 9
54049: PUSH
54050: LD_VAR 0 6
54054: PPUSH
54055: CALL_OW 478
54059: ST_TO_ADDR
// if not weapons then
54060: LD_VAR 0 9
54064: NOT
54065: IFFALSE 54069
// continue ;
54067: GO 54042
// if weapon in weapons then
54069: LD_VAR 0 8
54073: PUSH
54074: LD_VAR 0 9
54078: IN
54079: IFFALSE 54106
// begin result := [ i , weapon ] ;
54081: LD_ADDR_VAR 0 3
54085: PUSH
54086: LD_VAR 0 4
54090: PUSH
54091: LD_VAR 0 8
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: ST_TO_ADDR
// exit ;
54100: POP
54101: POP
54102: POP
54103: POP
54104: GO 54114
// end ; end ;
54106: GO 54042
54108: POP
54109: POP
// end ;
54110: GO 53928
54112: POP
54113: POP
// end ;
54114: LD_VAR 0 3
54118: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54119: LD_INT 0
54121: PPUSH
// if not side or side > 8 then
54122: LD_VAR 0 3
54126: NOT
54127: PUSH
54128: LD_VAR 0 3
54132: PUSH
54133: LD_INT 8
54135: GREATER
54136: OR
54137: IFFALSE 54141
// exit ;
54139: GO 54200
// if not range then
54141: LD_VAR 0 4
54145: NOT
54146: IFFALSE 54157
// range := - 12 ;
54148: LD_ADDR_VAR 0 4
54152: PUSH
54153: LD_INT 12
54155: NEG
54156: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54157: LD_VAR 0 1
54161: PPUSH
54162: LD_VAR 0 2
54166: PPUSH
54167: LD_VAR 0 3
54171: PPUSH
54172: LD_VAR 0 4
54176: PPUSH
54177: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54181: LD_VAR 0 1
54185: PPUSH
54186: LD_VAR 0 2
54190: PPUSH
54191: LD_VAR 0 3
54195: PPUSH
54196: CALL_OW 331
// end ;
54200: LD_VAR 0 5
54204: RET
// export function Video ( mode ) ; begin
54205: LD_INT 0
54207: PPUSH
// ingame_video = mode ;
54208: LD_ADDR_OWVAR 52
54212: PUSH
54213: LD_VAR 0 1
54217: ST_TO_ADDR
// interface_hidden = mode ;
54218: LD_ADDR_OWVAR 54
54222: PUSH
54223: LD_VAR 0 1
54227: ST_TO_ADDR
// end ;
54228: LD_VAR 0 2
54232: RET
// export function Join ( array , element ) ; begin
54233: LD_INT 0
54235: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54236: LD_ADDR_VAR 0 3
54240: PUSH
54241: LD_VAR 0 1
54245: PPUSH
54246: LD_VAR 0 1
54250: PUSH
54251: LD_INT 1
54253: PLUS
54254: PPUSH
54255: LD_VAR 0 2
54259: PPUSH
54260: CALL_OW 1
54264: ST_TO_ADDR
// end ;
54265: LD_VAR 0 3
54269: RET
// export function JoinUnion ( array , element ) ; begin
54270: LD_INT 0
54272: PPUSH
// result := array union element ;
54273: LD_ADDR_VAR 0 3
54277: PUSH
54278: LD_VAR 0 1
54282: PUSH
54283: LD_VAR 0 2
54287: UNION
54288: ST_TO_ADDR
// end ;
54289: LD_VAR 0 3
54293: RET
// export function GetBehemoths ( side ) ; begin
54294: LD_INT 0
54296: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54297: LD_ADDR_VAR 0 2
54301: PUSH
54302: LD_INT 22
54304: PUSH
54305: LD_VAR 0 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 31
54316: PUSH
54317: LD_INT 25
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PPUSH
54328: CALL_OW 69
54332: ST_TO_ADDR
// end ;
54333: LD_VAR 0 2
54337: RET
// export function Shuffle ( array ) ; var i , index ; begin
54338: LD_INT 0
54340: PPUSH
54341: PPUSH
54342: PPUSH
// result := [ ] ;
54343: LD_ADDR_VAR 0 2
54347: PUSH
54348: EMPTY
54349: ST_TO_ADDR
// if not array then
54350: LD_VAR 0 1
54354: NOT
54355: IFFALSE 54359
// exit ;
54357: GO 54458
// Randomize ;
54359: CALL_OW 10
// for i = array downto 1 do
54363: LD_ADDR_VAR 0 3
54367: PUSH
54368: DOUBLE
54369: LD_VAR 0 1
54373: INC
54374: ST_TO_ADDR
54375: LD_INT 1
54377: PUSH
54378: FOR_DOWNTO
54379: IFFALSE 54456
// begin index := rand ( 1 , array ) ;
54381: LD_ADDR_VAR 0 4
54385: PUSH
54386: LD_INT 1
54388: PPUSH
54389: LD_VAR 0 1
54393: PPUSH
54394: CALL_OW 12
54398: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54399: LD_ADDR_VAR 0 2
54403: PUSH
54404: LD_VAR 0 2
54408: PPUSH
54409: LD_VAR 0 2
54413: PUSH
54414: LD_INT 1
54416: PLUS
54417: PPUSH
54418: LD_VAR 0 1
54422: PUSH
54423: LD_VAR 0 4
54427: ARRAY
54428: PPUSH
54429: CALL_OW 2
54433: ST_TO_ADDR
// array := Delete ( array , index ) ;
54434: LD_ADDR_VAR 0 1
54438: PUSH
54439: LD_VAR 0 1
54443: PPUSH
54444: LD_VAR 0 4
54448: PPUSH
54449: CALL_OW 3
54453: ST_TO_ADDR
// end ;
54454: GO 54378
54456: POP
54457: POP
// end ;
54458: LD_VAR 0 2
54462: RET
// export function GetBaseMaterials ( base ) ; begin
54463: LD_INT 0
54465: PPUSH
// result := [ 0 , 0 , 0 ] ;
54466: LD_ADDR_VAR 0 2
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: LIST
54484: ST_TO_ADDR
// if not base then
54485: LD_VAR 0 1
54489: NOT
54490: IFFALSE 54494
// exit ;
54492: GO 54543
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54494: LD_ADDR_VAR 0 2
54498: PUSH
54499: LD_VAR 0 1
54503: PPUSH
54504: LD_INT 1
54506: PPUSH
54507: CALL_OW 275
54511: PUSH
54512: LD_VAR 0 1
54516: PPUSH
54517: LD_INT 2
54519: PPUSH
54520: CALL_OW 275
54524: PUSH
54525: LD_VAR 0 1
54529: PPUSH
54530: LD_INT 3
54532: PPUSH
54533: CALL_OW 275
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: LIST
54542: ST_TO_ADDR
// end ;
54543: LD_VAR 0 2
54547: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54548: LD_INT 0
54550: PPUSH
54551: PPUSH
// result := array ;
54552: LD_ADDR_VAR 0 3
54556: PUSH
54557: LD_VAR 0 1
54561: ST_TO_ADDR
// if size >= result then
54562: LD_VAR 0 2
54566: PUSH
54567: LD_VAR 0 3
54571: GREATEREQUAL
54572: IFFALSE 54576
// exit ;
54574: GO 54626
// if size then
54576: LD_VAR 0 2
54580: IFFALSE 54626
// for i := array downto size do
54582: LD_ADDR_VAR 0 4
54586: PUSH
54587: DOUBLE
54588: LD_VAR 0 1
54592: INC
54593: ST_TO_ADDR
54594: LD_VAR 0 2
54598: PUSH
54599: FOR_DOWNTO
54600: IFFALSE 54624
// result := Delete ( result , result ) ;
54602: LD_ADDR_VAR 0 3
54606: PUSH
54607: LD_VAR 0 3
54611: PPUSH
54612: LD_VAR 0 3
54616: PPUSH
54617: CALL_OW 3
54621: ST_TO_ADDR
54622: GO 54599
54624: POP
54625: POP
// end ;
54626: LD_VAR 0 3
54630: RET
// export function ComExit ( unit ) ; var tmp ; begin
54631: LD_INT 0
54633: PPUSH
54634: PPUSH
// if not IsInUnit ( unit ) then
54635: LD_VAR 0 1
54639: PPUSH
54640: CALL_OW 310
54644: NOT
54645: IFFALSE 54649
// exit ;
54647: GO 54709
// tmp := IsInUnit ( unit ) ;
54649: LD_ADDR_VAR 0 3
54653: PUSH
54654: LD_VAR 0 1
54658: PPUSH
54659: CALL_OW 310
54663: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54664: LD_VAR 0 3
54668: PPUSH
54669: CALL_OW 247
54673: PUSH
54674: LD_INT 2
54676: EQUAL
54677: IFFALSE 54690
// ComExitVehicle ( unit ) else
54679: LD_VAR 0 1
54683: PPUSH
54684: CALL_OW 121
54688: GO 54699
// ComExitBuilding ( unit ) ;
54690: LD_VAR 0 1
54694: PPUSH
54695: CALL_OW 122
// result := tmp ;
54699: LD_ADDR_VAR 0 2
54703: PUSH
54704: LD_VAR 0 3
54708: ST_TO_ADDR
// end ;
54709: LD_VAR 0 2
54713: RET
// export function ComExitAll ( units ) ; var i ; begin
54714: LD_INT 0
54716: PPUSH
54717: PPUSH
// if not units then
54718: LD_VAR 0 1
54722: NOT
54723: IFFALSE 54727
// exit ;
54725: GO 54753
// for i in units do
54727: LD_ADDR_VAR 0 3
54731: PUSH
54732: LD_VAR 0 1
54736: PUSH
54737: FOR_IN
54738: IFFALSE 54751
// ComExit ( i ) ;
54740: LD_VAR 0 3
54744: PPUSH
54745: CALL 54631 0 1
54749: GO 54737
54751: POP
54752: POP
// end ;
54753: LD_VAR 0 2
54757: RET
// export function ResetHc ; begin
54758: LD_INT 0
54760: PPUSH
// InitHc ;
54761: CALL_OW 19
// hc_importance := 0 ;
54765: LD_ADDR_OWVAR 32
54769: PUSH
54770: LD_INT 0
54772: ST_TO_ADDR
// end ;
54773: LD_VAR 0 1
54777: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54778: LD_INT 0
54780: PPUSH
54781: PPUSH
54782: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54783: LD_ADDR_VAR 0 6
54787: PUSH
54788: LD_VAR 0 1
54792: PUSH
54793: LD_VAR 0 3
54797: PLUS
54798: PUSH
54799: LD_INT 2
54801: DIV
54802: ST_TO_ADDR
// if _x < 0 then
54803: LD_VAR 0 6
54807: PUSH
54808: LD_INT 0
54810: LESS
54811: IFFALSE 54828
// _x := _x * - 1 ;
54813: LD_ADDR_VAR 0 6
54817: PUSH
54818: LD_VAR 0 6
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: MUL
54827: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54828: LD_ADDR_VAR 0 7
54832: PUSH
54833: LD_VAR 0 2
54837: PUSH
54838: LD_VAR 0 4
54842: PLUS
54843: PUSH
54844: LD_INT 2
54846: DIV
54847: ST_TO_ADDR
// if _y < 0 then
54848: LD_VAR 0 7
54852: PUSH
54853: LD_INT 0
54855: LESS
54856: IFFALSE 54873
// _y := _y * - 1 ;
54858: LD_ADDR_VAR 0 7
54862: PUSH
54863: LD_VAR 0 7
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: MUL
54872: ST_TO_ADDR
// result := [ _x , _y ] ;
54873: LD_ADDR_VAR 0 5
54877: PUSH
54878: LD_VAR 0 6
54882: PUSH
54883: LD_VAR 0 7
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: ST_TO_ADDR
// end ;
54892: LD_VAR 0 5
54896: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54897: LD_INT 0
54899: PPUSH
54900: PPUSH
54901: PPUSH
54902: PPUSH
// task := GetTaskList ( unit ) ;
54903: LD_ADDR_VAR 0 7
54907: PUSH
54908: LD_VAR 0 1
54912: PPUSH
54913: CALL_OW 437
54917: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54918: LD_VAR 0 7
54922: NOT
54923: PUSH
54924: LD_VAR 0 1
54928: PPUSH
54929: LD_VAR 0 2
54933: PPUSH
54934: CALL_OW 308
54938: NOT
54939: AND
54940: IFFALSE 54944
// exit ;
54942: GO 55062
// if IsInArea ( unit , area ) then
54944: LD_VAR 0 1
54948: PPUSH
54949: LD_VAR 0 2
54953: PPUSH
54954: CALL_OW 308
54958: IFFALSE 54976
// begin ComMoveToArea ( unit , goAway ) ;
54960: LD_VAR 0 1
54964: PPUSH
54965: LD_VAR 0 3
54969: PPUSH
54970: CALL_OW 113
// exit ;
54974: GO 55062
// end ; if task [ 1 ] [ 1 ] <> M then
54976: LD_VAR 0 7
54980: PUSH
54981: LD_INT 1
54983: ARRAY
54984: PUSH
54985: LD_INT 1
54987: ARRAY
54988: PUSH
54989: LD_STRING M
54991: NONEQUAL
54992: IFFALSE 54996
// exit ;
54994: GO 55062
// x := task [ 1 ] [ 2 ] ;
54996: LD_ADDR_VAR 0 5
55000: PUSH
55001: LD_VAR 0 7
55005: PUSH
55006: LD_INT 1
55008: ARRAY
55009: PUSH
55010: LD_INT 2
55012: ARRAY
55013: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55014: LD_ADDR_VAR 0 6
55018: PUSH
55019: LD_VAR 0 7
55023: PUSH
55024: LD_INT 1
55026: ARRAY
55027: PUSH
55028: LD_INT 3
55030: ARRAY
55031: ST_TO_ADDR
// if InArea ( x , y , area ) then
55032: LD_VAR 0 5
55036: PPUSH
55037: LD_VAR 0 6
55041: PPUSH
55042: LD_VAR 0 2
55046: PPUSH
55047: CALL_OW 309
55051: IFFALSE 55062
// ComStop ( unit ) ;
55053: LD_VAR 0 1
55057: PPUSH
55058: CALL_OW 141
// end ;
55062: LD_VAR 0 4
55066: RET
// export function Abs ( value ) ; begin
55067: LD_INT 0
55069: PPUSH
// result := value ;
55070: LD_ADDR_VAR 0 2
55074: PUSH
55075: LD_VAR 0 1
55079: ST_TO_ADDR
// if value < 0 then
55080: LD_VAR 0 1
55084: PUSH
55085: LD_INT 0
55087: LESS
55088: IFFALSE 55105
// result := value * - 1 ;
55090: LD_ADDR_VAR 0 2
55094: PUSH
55095: LD_VAR 0 1
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: MUL
55104: ST_TO_ADDR
// end ;
55105: LD_VAR 0 2
55109: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55110: LD_INT 0
55112: PPUSH
55113: PPUSH
55114: PPUSH
55115: PPUSH
55116: PPUSH
55117: PPUSH
55118: PPUSH
55119: PPUSH
// if not unit or not building then
55120: LD_VAR 0 1
55124: NOT
55125: PUSH
55126: LD_VAR 0 2
55130: NOT
55131: OR
55132: IFFALSE 55136
// exit ;
55134: GO 55362
// x := GetX ( building ) ;
55136: LD_ADDR_VAR 0 4
55140: PUSH
55141: LD_VAR 0 2
55145: PPUSH
55146: CALL_OW 250
55150: ST_TO_ADDR
// y := GetY ( building ) ;
55151: LD_ADDR_VAR 0 6
55155: PUSH
55156: LD_VAR 0 2
55160: PPUSH
55161: CALL_OW 251
55165: ST_TO_ADDR
// d := GetDir ( building ) ;
55166: LD_ADDR_VAR 0 8
55170: PUSH
55171: LD_VAR 0 2
55175: PPUSH
55176: CALL_OW 254
55180: ST_TO_ADDR
// r := 4 ;
55181: LD_ADDR_VAR 0 9
55185: PUSH
55186: LD_INT 4
55188: ST_TO_ADDR
// for i := 1 to 5 do
55189: LD_ADDR_VAR 0 10
55193: PUSH
55194: DOUBLE
55195: LD_INT 1
55197: DEC
55198: ST_TO_ADDR
55199: LD_INT 5
55201: PUSH
55202: FOR_TO
55203: IFFALSE 55360
// begin _x := ShiftX ( x , d , r + i ) ;
55205: LD_ADDR_VAR 0 5
55209: PUSH
55210: LD_VAR 0 4
55214: PPUSH
55215: LD_VAR 0 8
55219: PPUSH
55220: LD_VAR 0 9
55224: PUSH
55225: LD_VAR 0 10
55229: PLUS
55230: PPUSH
55231: CALL_OW 272
55235: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55236: LD_ADDR_VAR 0 7
55240: PUSH
55241: LD_VAR 0 6
55245: PPUSH
55246: LD_VAR 0 8
55250: PPUSH
55251: LD_VAR 0 9
55255: PUSH
55256: LD_VAR 0 10
55260: PLUS
55261: PPUSH
55262: CALL_OW 273
55266: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55267: LD_VAR 0 5
55271: PPUSH
55272: LD_VAR 0 7
55276: PPUSH
55277: CALL_OW 488
55281: PUSH
55282: LD_VAR 0 5
55286: PPUSH
55287: LD_VAR 0 7
55291: PPUSH
55292: CALL_OW 428
55296: PPUSH
55297: CALL_OW 247
55301: PUSH
55302: LD_INT 3
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: IN
55312: NOT
55313: AND
55314: IFFALSE 55358
// begin ComMoveXY ( unit , _x , _y ) ;
55316: LD_VAR 0 1
55320: PPUSH
55321: LD_VAR 0 5
55325: PPUSH
55326: LD_VAR 0 7
55330: PPUSH
55331: CALL_OW 111
// result := [ _x , _y ] ;
55335: LD_ADDR_VAR 0 3
55339: PUSH
55340: LD_VAR 0 5
55344: PUSH
55345: LD_VAR 0 7
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: ST_TO_ADDR
// exit ;
55354: POP
55355: POP
55356: GO 55362
// end ; end ;
55358: GO 55202
55360: POP
55361: POP
// end ;
55362: LD_VAR 0 3
55366: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55367: LD_INT 0
55369: PPUSH
55370: PPUSH
55371: PPUSH
// result := 0 ;
55372: LD_ADDR_VAR 0 3
55376: PUSH
55377: LD_INT 0
55379: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55380: LD_VAR 0 1
55384: PUSH
55385: LD_INT 0
55387: LESS
55388: PUSH
55389: LD_VAR 0 1
55393: PUSH
55394: LD_INT 8
55396: GREATER
55397: OR
55398: PUSH
55399: LD_VAR 0 2
55403: PUSH
55404: LD_INT 0
55406: LESS
55407: OR
55408: PUSH
55409: LD_VAR 0 2
55413: PUSH
55414: LD_INT 8
55416: GREATER
55417: OR
55418: IFFALSE 55422
// exit ;
55420: GO 55497
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55422: LD_ADDR_VAR 0 4
55426: PUSH
55427: LD_INT 22
55429: PUSH
55430: LD_VAR 0 2
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PPUSH
55439: CALL_OW 69
55443: PUSH
55444: FOR_IN
55445: IFFALSE 55495
// begin un := UnitShoot ( i ) ;
55447: LD_ADDR_VAR 0 5
55451: PUSH
55452: LD_VAR 0 4
55456: PPUSH
55457: CALL_OW 504
55461: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55462: LD_VAR 0 5
55466: PPUSH
55467: CALL_OW 255
55471: PUSH
55472: LD_VAR 0 1
55476: EQUAL
55477: IFFALSE 55493
// begin result := un ;
55479: LD_ADDR_VAR 0 3
55483: PUSH
55484: LD_VAR 0 5
55488: ST_TO_ADDR
// exit ;
55489: POP
55490: POP
55491: GO 55497
// end ; end ;
55493: GO 55444
55495: POP
55496: POP
// end ;
55497: LD_VAR 0 3
55501: RET
// export function GetCargoBay ( units ) ; begin
55502: LD_INT 0
55504: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55505: LD_ADDR_VAR 0 2
55509: PUSH
55510: LD_VAR 0 1
55514: PPUSH
55515: LD_INT 2
55517: PUSH
55518: LD_INT 34
55520: PUSH
55521: LD_INT 12
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 34
55530: PUSH
55531: LD_INT 51
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 34
55540: PUSH
55541: LD_INT 32
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 34
55550: PUSH
55551: LD_INT 89
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: PPUSH
55565: CALL_OW 72
55569: ST_TO_ADDR
// end ;
55570: LD_VAR 0 2
55574: RET
// export function Negate ( value ) ; begin
55575: LD_INT 0
55577: PPUSH
// result := not value ;
55578: LD_ADDR_VAR 0 2
55582: PUSH
55583: LD_VAR 0 1
55587: NOT
55588: ST_TO_ADDR
// end ;
55589: LD_VAR 0 2
55593: RET
// export function Inc ( value ) ; begin
55594: LD_INT 0
55596: PPUSH
// result := value + 1 ;
55597: LD_ADDR_VAR 0 2
55601: PUSH
55602: LD_VAR 0 1
55606: PUSH
55607: LD_INT 1
55609: PLUS
55610: ST_TO_ADDR
// end ;
55611: LD_VAR 0 2
55615: RET
// export function Dec ( value ) ; begin
55616: LD_INT 0
55618: PPUSH
// result := value - 1 ;
55619: LD_ADDR_VAR 0 2
55623: PUSH
55624: LD_VAR 0 1
55628: PUSH
55629: LD_INT 1
55631: MINUS
55632: ST_TO_ADDR
// end ;
55633: LD_VAR 0 2
55637: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55638: LD_INT 0
55640: PPUSH
55641: PPUSH
55642: PPUSH
55643: PPUSH
55644: PPUSH
55645: PPUSH
55646: PPUSH
55647: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55648: LD_VAR 0 1
55652: PPUSH
55653: LD_VAR 0 2
55657: PPUSH
55658: CALL_OW 488
55662: NOT
55663: PUSH
55664: LD_VAR 0 3
55668: PPUSH
55669: LD_VAR 0 4
55673: PPUSH
55674: CALL_OW 488
55678: NOT
55679: OR
55680: IFFALSE 55693
// begin result := - 1 ;
55682: LD_ADDR_VAR 0 5
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: ST_TO_ADDR
// exit ;
55691: GO 55928
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55693: LD_ADDR_VAR 0 12
55697: PUSH
55698: LD_VAR 0 1
55702: PPUSH
55703: LD_VAR 0 2
55707: PPUSH
55708: LD_VAR 0 3
55712: PPUSH
55713: LD_VAR 0 4
55717: PPUSH
55718: CALL 54778 0 4
55722: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55723: LD_ADDR_VAR 0 11
55727: PUSH
55728: LD_VAR 0 1
55732: PPUSH
55733: LD_VAR 0 2
55737: PPUSH
55738: LD_VAR 0 12
55742: PUSH
55743: LD_INT 1
55745: ARRAY
55746: PPUSH
55747: LD_VAR 0 12
55751: PUSH
55752: LD_INT 2
55754: ARRAY
55755: PPUSH
55756: CALL_OW 298
55760: ST_TO_ADDR
// distance := 9999 ;
55761: LD_ADDR_VAR 0 10
55765: PUSH
55766: LD_INT 9999
55768: ST_TO_ADDR
// for i := 0 to 5 do
55769: LD_ADDR_VAR 0 6
55773: PUSH
55774: DOUBLE
55775: LD_INT 0
55777: DEC
55778: ST_TO_ADDR
55779: LD_INT 5
55781: PUSH
55782: FOR_TO
55783: IFFALSE 55926
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55785: LD_ADDR_VAR 0 7
55789: PUSH
55790: LD_VAR 0 1
55794: PPUSH
55795: LD_VAR 0 6
55799: PPUSH
55800: LD_VAR 0 11
55804: PPUSH
55805: CALL_OW 272
55809: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55810: LD_ADDR_VAR 0 8
55814: PUSH
55815: LD_VAR 0 2
55819: PPUSH
55820: LD_VAR 0 6
55824: PPUSH
55825: LD_VAR 0 11
55829: PPUSH
55830: CALL_OW 273
55834: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55835: LD_VAR 0 7
55839: PPUSH
55840: LD_VAR 0 8
55844: PPUSH
55845: CALL_OW 488
55849: NOT
55850: IFFALSE 55854
// continue ;
55852: GO 55782
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55854: LD_ADDR_VAR 0 9
55858: PUSH
55859: LD_VAR 0 12
55863: PUSH
55864: LD_INT 1
55866: ARRAY
55867: PPUSH
55868: LD_VAR 0 12
55872: PUSH
55873: LD_INT 2
55875: ARRAY
55876: PPUSH
55877: LD_VAR 0 7
55881: PPUSH
55882: LD_VAR 0 8
55886: PPUSH
55887: CALL_OW 298
55891: ST_TO_ADDR
// if tmp < distance then
55892: LD_VAR 0 9
55896: PUSH
55897: LD_VAR 0 10
55901: LESS
55902: IFFALSE 55924
// begin result := i ;
55904: LD_ADDR_VAR 0 5
55908: PUSH
55909: LD_VAR 0 6
55913: ST_TO_ADDR
// distance := tmp ;
55914: LD_ADDR_VAR 0 10
55918: PUSH
55919: LD_VAR 0 9
55923: ST_TO_ADDR
// end ; end ;
55924: GO 55782
55926: POP
55927: POP
// end ;
55928: LD_VAR 0 5
55932: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55933: LD_INT 0
55935: PPUSH
55936: PPUSH
// if not driver or not IsInUnit ( driver ) then
55937: LD_VAR 0 1
55941: NOT
55942: PUSH
55943: LD_VAR 0 1
55947: PPUSH
55948: CALL_OW 310
55952: NOT
55953: OR
55954: IFFALSE 55958
// exit ;
55956: GO 56048
// vehicle := IsInUnit ( driver ) ;
55958: LD_ADDR_VAR 0 3
55962: PUSH
55963: LD_VAR 0 1
55967: PPUSH
55968: CALL_OW 310
55972: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55973: LD_VAR 0 1
55977: PPUSH
55978: LD_STRING \
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: PUSH
56008: LD_STRING E
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_VAR 0 3
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PPUSH
56044: CALL_OW 446
// end ;
56048: LD_VAR 0 2
56052: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56053: LD_INT 0
56055: PPUSH
56056: PPUSH
// if not driver or not IsInUnit ( driver ) then
56057: LD_VAR 0 1
56061: NOT
56062: PUSH
56063: LD_VAR 0 1
56067: PPUSH
56068: CALL_OW 310
56072: NOT
56073: OR
56074: IFFALSE 56078
// exit ;
56076: GO 56168
// vehicle := IsInUnit ( driver ) ;
56078: LD_ADDR_VAR 0 3
56082: PUSH
56083: LD_VAR 0 1
56087: PPUSH
56088: CALL_OW 310
56092: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56093: LD_VAR 0 1
56097: PPUSH
56098: LD_STRING \
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: PUSH
56128: LD_STRING E
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_VAR 0 3
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PPUSH
56164: CALL_OW 447
// end ;
56168: LD_VAR 0 2
56172: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56173: LD_INT 0
56175: PPUSH
56176: PPUSH
56177: PPUSH
// tmp := [ ] ;
56178: LD_ADDR_VAR 0 5
56182: PUSH
56183: EMPTY
56184: ST_TO_ADDR
// for i in units do
56185: LD_ADDR_VAR 0 4
56189: PUSH
56190: LD_VAR 0 1
56194: PUSH
56195: FOR_IN
56196: IFFALSE 56234
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56198: LD_ADDR_VAR 0 5
56202: PUSH
56203: LD_VAR 0 5
56207: PPUSH
56208: LD_VAR 0 5
56212: PUSH
56213: LD_INT 1
56215: PLUS
56216: PPUSH
56217: LD_VAR 0 4
56221: PPUSH
56222: CALL_OW 256
56226: PPUSH
56227: CALL_OW 2
56231: ST_TO_ADDR
56232: GO 56195
56234: POP
56235: POP
// if not tmp then
56236: LD_VAR 0 5
56240: NOT
56241: IFFALSE 56245
// exit ;
56243: GO 56293
// if asc then
56245: LD_VAR 0 2
56249: IFFALSE 56273
// result := SortListByListAsc ( units , tmp ) else
56251: LD_ADDR_VAR 0 3
56255: PUSH
56256: LD_VAR 0 1
56260: PPUSH
56261: LD_VAR 0 5
56265: PPUSH
56266: CALL_OW 76
56270: ST_TO_ADDR
56271: GO 56293
// result := SortListByListDesc ( units , tmp ) ;
56273: LD_ADDR_VAR 0 3
56277: PUSH
56278: LD_VAR 0 1
56282: PPUSH
56283: LD_VAR 0 5
56287: PPUSH
56288: CALL_OW 77
56292: ST_TO_ADDR
// end ;
56293: LD_VAR 0 3
56297: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56298: LD_INT 0
56300: PPUSH
56301: PPUSH
// task := GetTaskList ( mech ) ;
56302: LD_ADDR_VAR 0 4
56306: PUSH
56307: LD_VAR 0 1
56311: PPUSH
56312: CALL_OW 437
56316: ST_TO_ADDR
// if not task then
56317: LD_VAR 0 4
56321: NOT
56322: IFFALSE 56326
// exit ;
56324: GO 56368
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56326: LD_ADDR_VAR 0 3
56330: PUSH
56331: LD_VAR 0 4
56335: PUSH
56336: LD_INT 1
56338: ARRAY
56339: PUSH
56340: LD_INT 1
56342: ARRAY
56343: PUSH
56344: LD_STRING r
56346: EQUAL
56347: PUSH
56348: LD_VAR 0 4
56352: PUSH
56353: LD_INT 1
56355: ARRAY
56356: PUSH
56357: LD_INT 4
56359: ARRAY
56360: PUSH
56361: LD_VAR 0 2
56365: EQUAL
56366: AND
56367: ST_TO_ADDR
// end ;
56368: LD_VAR 0 3
56372: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56373: LD_INT 0
56375: PPUSH
// SetDir ( unit , d ) ;
56376: LD_VAR 0 1
56380: PPUSH
56381: LD_VAR 0 4
56385: PPUSH
56386: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56390: LD_VAR 0 1
56394: PPUSH
56395: LD_VAR 0 2
56399: PPUSH
56400: LD_VAR 0 3
56404: PPUSH
56405: LD_VAR 0 5
56409: PPUSH
56410: CALL_OW 48
// end ;
56414: LD_VAR 0 6
56418: RET
// export function ToNaturalNumber ( number ) ; begin
56419: LD_INT 0
56421: PPUSH
// result := number div 1 ;
56422: LD_ADDR_VAR 0 2
56426: PUSH
56427: LD_VAR 0 1
56431: PUSH
56432: LD_INT 1
56434: DIV
56435: ST_TO_ADDR
// if number < 0 then
56436: LD_VAR 0 1
56440: PUSH
56441: LD_INT 0
56443: LESS
56444: IFFALSE 56454
// result := 0 ;
56446: LD_ADDR_VAR 0 2
56450: PUSH
56451: LD_INT 0
56453: ST_TO_ADDR
// end ;
56454: LD_VAR 0 2
56458: RET
// export function SortByClass ( units , class ) ; var un ; begin
56459: LD_INT 0
56461: PPUSH
56462: PPUSH
// if not units or not class then
56463: LD_VAR 0 1
56467: NOT
56468: PUSH
56469: LD_VAR 0 2
56473: NOT
56474: OR
56475: IFFALSE 56479
// exit ;
56477: GO 56574
// result := [ ] ;
56479: LD_ADDR_VAR 0 3
56483: PUSH
56484: EMPTY
56485: ST_TO_ADDR
// for un in units do
56486: LD_ADDR_VAR 0 4
56490: PUSH
56491: LD_VAR 0 1
56495: PUSH
56496: FOR_IN
56497: IFFALSE 56572
// if GetClass ( un ) = class then
56499: LD_VAR 0 4
56503: PPUSH
56504: CALL_OW 257
56508: PUSH
56509: LD_VAR 0 2
56513: EQUAL
56514: IFFALSE 56541
// result := Insert ( result , 1 , un ) else
56516: LD_ADDR_VAR 0 3
56520: PUSH
56521: LD_VAR 0 3
56525: PPUSH
56526: LD_INT 1
56528: PPUSH
56529: LD_VAR 0 4
56533: PPUSH
56534: CALL_OW 2
56538: ST_TO_ADDR
56539: GO 56570
// result := Replace ( result , result + 1 , un ) ;
56541: LD_ADDR_VAR 0 3
56545: PUSH
56546: LD_VAR 0 3
56550: PPUSH
56551: LD_VAR 0 3
56555: PUSH
56556: LD_INT 1
56558: PLUS
56559: PPUSH
56560: LD_VAR 0 4
56564: PPUSH
56565: CALL_OW 1
56569: ST_TO_ADDR
56570: GO 56496
56572: POP
56573: POP
// end ;
56574: LD_VAR 0 3
56578: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56579: LD_INT 0
56581: PPUSH
56582: PPUSH
56583: PPUSH
56584: PPUSH
56585: PPUSH
56586: PPUSH
56587: PPUSH
// result := [ ] ;
56588: LD_ADDR_VAR 0 4
56592: PUSH
56593: EMPTY
56594: ST_TO_ADDR
// if x - r < 0 then
56595: LD_VAR 0 1
56599: PUSH
56600: LD_VAR 0 3
56604: MINUS
56605: PUSH
56606: LD_INT 0
56608: LESS
56609: IFFALSE 56621
// min_x := 0 else
56611: LD_ADDR_VAR 0 8
56615: PUSH
56616: LD_INT 0
56618: ST_TO_ADDR
56619: GO 56637
// min_x := x - r ;
56621: LD_ADDR_VAR 0 8
56625: PUSH
56626: LD_VAR 0 1
56630: PUSH
56631: LD_VAR 0 3
56635: MINUS
56636: ST_TO_ADDR
// if y - r < 0 then
56637: LD_VAR 0 2
56641: PUSH
56642: LD_VAR 0 3
56646: MINUS
56647: PUSH
56648: LD_INT 0
56650: LESS
56651: IFFALSE 56663
// min_y := 0 else
56653: LD_ADDR_VAR 0 7
56657: PUSH
56658: LD_INT 0
56660: ST_TO_ADDR
56661: GO 56679
// min_y := y - r ;
56663: LD_ADDR_VAR 0 7
56667: PUSH
56668: LD_VAR 0 2
56672: PUSH
56673: LD_VAR 0 3
56677: MINUS
56678: ST_TO_ADDR
// max_x := x + r ;
56679: LD_ADDR_VAR 0 9
56683: PUSH
56684: LD_VAR 0 1
56688: PUSH
56689: LD_VAR 0 3
56693: PLUS
56694: ST_TO_ADDR
// max_y := y + r ;
56695: LD_ADDR_VAR 0 10
56699: PUSH
56700: LD_VAR 0 2
56704: PUSH
56705: LD_VAR 0 3
56709: PLUS
56710: ST_TO_ADDR
// for _x = min_x to max_x do
56711: LD_ADDR_VAR 0 5
56715: PUSH
56716: DOUBLE
56717: LD_VAR 0 8
56721: DEC
56722: ST_TO_ADDR
56723: LD_VAR 0 9
56727: PUSH
56728: FOR_TO
56729: IFFALSE 56830
// for _y = min_y to max_y do
56731: LD_ADDR_VAR 0 6
56735: PUSH
56736: DOUBLE
56737: LD_VAR 0 7
56741: DEC
56742: ST_TO_ADDR
56743: LD_VAR 0 10
56747: PUSH
56748: FOR_TO
56749: IFFALSE 56826
// begin if not ValidHex ( _x , _y ) then
56751: LD_VAR 0 5
56755: PPUSH
56756: LD_VAR 0 6
56760: PPUSH
56761: CALL_OW 488
56765: NOT
56766: IFFALSE 56770
// continue ;
56768: GO 56748
// if GetResourceTypeXY ( _x , _y ) then
56770: LD_VAR 0 5
56774: PPUSH
56775: LD_VAR 0 6
56779: PPUSH
56780: CALL_OW 283
56784: IFFALSE 56824
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56786: LD_ADDR_VAR 0 4
56790: PUSH
56791: LD_VAR 0 4
56795: PPUSH
56796: LD_VAR 0 4
56800: PUSH
56801: LD_INT 1
56803: PLUS
56804: PPUSH
56805: LD_VAR 0 5
56809: PUSH
56810: LD_VAR 0 6
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PPUSH
56819: CALL_OW 1
56823: ST_TO_ADDR
// end ;
56824: GO 56748
56826: POP
56827: POP
56828: GO 56728
56830: POP
56831: POP
// end ;
56832: LD_VAR 0 4
56836: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56837: LD_INT 0
56839: PPUSH
56840: PPUSH
56841: PPUSH
56842: PPUSH
56843: PPUSH
56844: PPUSH
56845: PPUSH
56846: PPUSH
// if not units then
56847: LD_VAR 0 1
56851: NOT
56852: IFFALSE 56856
// exit ;
56854: GO 57380
// result := UnitFilter ( units , [ f_ok ] ) ;
56856: LD_ADDR_VAR 0 3
56860: PUSH
56861: LD_VAR 0 1
56865: PPUSH
56866: LD_INT 50
56868: PUSH
56869: EMPTY
56870: LIST
56871: PPUSH
56872: CALL_OW 72
56876: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56877: LD_ADDR_VAR 0 8
56881: PUSH
56882: LD_VAR 0 1
56886: PUSH
56887: LD_INT 1
56889: ARRAY
56890: PPUSH
56891: CALL_OW 255
56895: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56896: LD_ADDR_VAR 0 10
56900: PUSH
56901: LD_INT 29
56903: PUSH
56904: LD_INT 91
56906: PUSH
56907: LD_INT 49
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: ST_TO_ADDR
// if not result then
56915: LD_VAR 0 3
56919: NOT
56920: IFFALSE 56924
// exit ;
56922: GO 57380
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56924: LD_ADDR_VAR 0 5
56928: PUSH
56929: LD_INT 81
56931: PUSH
56932: LD_VAR 0 8
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PPUSH
56941: CALL_OW 69
56945: ST_TO_ADDR
// for i in result do
56946: LD_ADDR_VAR 0 4
56950: PUSH
56951: LD_VAR 0 3
56955: PUSH
56956: FOR_IN
56957: IFFALSE 57378
// begin tag := GetTag ( i ) + 1 ;
56959: LD_ADDR_VAR 0 9
56963: PUSH
56964: LD_VAR 0 4
56968: PPUSH
56969: CALL_OW 110
56973: PUSH
56974: LD_INT 1
56976: PLUS
56977: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56978: LD_ADDR_VAR 0 7
56982: PUSH
56983: LD_VAR 0 4
56987: PPUSH
56988: CALL_OW 250
56992: PPUSH
56993: LD_VAR 0 4
56997: PPUSH
56998: CALL_OW 251
57002: PPUSH
57003: LD_INT 6
57005: PPUSH
57006: CALL 56579 0 3
57010: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57011: LD_VAR 0 4
57015: PPUSH
57016: CALL_OW 247
57020: PUSH
57021: LD_INT 2
57023: EQUAL
57024: PUSH
57025: LD_VAR 0 7
57029: AND
57030: PUSH
57031: LD_VAR 0 4
57035: PPUSH
57036: CALL_OW 264
57040: PUSH
57041: LD_VAR 0 10
57045: IN
57046: NOT
57047: AND
57048: IFFALSE 57087
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57050: LD_VAR 0 4
57054: PPUSH
57055: LD_VAR 0 7
57059: PUSH
57060: LD_INT 1
57062: ARRAY
57063: PUSH
57064: LD_INT 1
57066: ARRAY
57067: PPUSH
57068: LD_VAR 0 7
57072: PUSH
57073: LD_INT 1
57075: ARRAY
57076: PUSH
57077: LD_INT 2
57079: ARRAY
57080: PPUSH
57081: CALL_OW 116
57085: GO 57376
// if path > tag then
57087: LD_VAR 0 2
57091: PUSH
57092: LD_VAR 0 9
57096: GREATER
57097: IFFALSE 57305
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57099: LD_ADDR_VAR 0 6
57103: PUSH
57104: LD_VAR 0 5
57108: PPUSH
57109: LD_INT 91
57111: PUSH
57112: LD_VAR 0 4
57116: PUSH
57117: LD_INT 8
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: PPUSH
57125: CALL_OW 72
57129: ST_TO_ADDR
// if nearEnemy then
57130: LD_VAR 0 6
57134: IFFALSE 57203
// begin if GetWeapon ( i ) = ru_time_lapser then
57136: LD_VAR 0 4
57140: PPUSH
57141: CALL_OW 264
57145: PUSH
57146: LD_INT 49
57148: EQUAL
57149: IFFALSE 57177
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57151: LD_VAR 0 4
57155: PPUSH
57156: LD_VAR 0 6
57160: PPUSH
57161: LD_VAR 0 4
57165: PPUSH
57166: CALL_OW 74
57170: PPUSH
57171: CALL_OW 112
57175: GO 57201
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57177: LD_VAR 0 4
57181: PPUSH
57182: LD_VAR 0 6
57186: PPUSH
57187: LD_VAR 0 4
57191: PPUSH
57192: CALL_OW 74
57196: PPUSH
57197: CALL_OW 115
// end else
57201: GO 57303
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57203: LD_VAR 0 4
57207: PPUSH
57208: LD_VAR 0 2
57212: PUSH
57213: LD_VAR 0 9
57217: ARRAY
57218: PUSH
57219: LD_INT 1
57221: ARRAY
57222: PPUSH
57223: LD_VAR 0 2
57227: PUSH
57228: LD_VAR 0 9
57232: ARRAY
57233: PUSH
57234: LD_INT 2
57236: ARRAY
57237: PPUSH
57238: CALL_OW 297
57242: PUSH
57243: LD_INT 6
57245: GREATER
57246: IFFALSE 57289
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57248: LD_VAR 0 4
57252: PPUSH
57253: LD_VAR 0 2
57257: PUSH
57258: LD_VAR 0 9
57262: ARRAY
57263: PUSH
57264: LD_INT 1
57266: ARRAY
57267: PPUSH
57268: LD_VAR 0 2
57272: PUSH
57273: LD_VAR 0 9
57277: ARRAY
57278: PUSH
57279: LD_INT 2
57281: ARRAY
57282: PPUSH
57283: CALL_OW 114
57287: GO 57303
// SetTag ( i , tag ) ;
57289: LD_VAR 0 4
57293: PPUSH
57294: LD_VAR 0 9
57298: PPUSH
57299: CALL_OW 109
// end else
57303: GO 57376
// if enemy then
57305: LD_VAR 0 5
57309: IFFALSE 57376
// begin if GetWeapon ( i ) = ru_time_lapser then
57311: LD_VAR 0 4
57315: PPUSH
57316: CALL_OW 264
57320: PUSH
57321: LD_INT 49
57323: EQUAL
57324: IFFALSE 57352
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57326: LD_VAR 0 4
57330: PPUSH
57331: LD_VAR 0 5
57335: PPUSH
57336: LD_VAR 0 4
57340: PPUSH
57341: CALL_OW 74
57345: PPUSH
57346: CALL_OW 112
57350: GO 57376
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57352: LD_VAR 0 4
57356: PPUSH
57357: LD_VAR 0 5
57361: PPUSH
57362: LD_VAR 0 4
57366: PPUSH
57367: CALL_OW 74
57371: PPUSH
57372: CALL_OW 115
// end ; end ;
57376: GO 56956
57378: POP
57379: POP
// end ;
57380: LD_VAR 0 3
57384: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57385: LD_INT 0
57387: PPUSH
57388: PPUSH
57389: PPUSH
// if not unit or IsInUnit ( unit ) then
57390: LD_VAR 0 1
57394: NOT
57395: PUSH
57396: LD_VAR 0 1
57400: PPUSH
57401: CALL_OW 310
57405: OR
57406: IFFALSE 57410
// exit ;
57408: GO 57501
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57410: LD_ADDR_VAR 0 4
57414: PUSH
57415: LD_VAR 0 1
57419: PPUSH
57420: CALL_OW 250
57424: PPUSH
57425: LD_VAR 0 2
57429: PPUSH
57430: LD_INT 1
57432: PPUSH
57433: CALL_OW 272
57437: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57438: LD_ADDR_VAR 0 5
57442: PUSH
57443: LD_VAR 0 1
57447: PPUSH
57448: CALL_OW 251
57452: PPUSH
57453: LD_VAR 0 2
57457: PPUSH
57458: LD_INT 1
57460: PPUSH
57461: CALL_OW 273
57465: ST_TO_ADDR
// if ValidHex ( x , y ) then
57466: LD_VAR 0 4
57470: PPUSH
57471: LD_VAR 0 5
57475: PPUSH
57476: CALL_OW 488
57480: IFFALSE 57501
// ComTurnXY ( unit , x , y ) ;
57482: LD_VAR 0 1
57486: PPUSH
57487: LD_VAR 0 4
57491: PPUSH
57492: LD_VAR 0 5
57496: PPUSH
57497: CALL_OW 118
// end ;
57501: LD_VAR 0 3
57505: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57506: LD_INT 0
57508: PPUSH
57509: PPUSH
// result := false ;
57510: LD_ADDR_VAR 0 3
57514: PUSH
57515: LD_INT 0
57517: ST_TO_ADDR
// if not units then
57518: LD_VAR 0 2
57522: NOT
57523: IFFALSE 57527
// exit ;
57525: GO 57572
// for i in units do
57527: LD_ADDR_VAR 0 4
57531: PUSH
57532: LD_VAR 0 2
57536: PUSH
57537: FOR_IN
57538: IFFALSE 57570
// if See ( side , i ) then
57540: LD_VAR 0 1
57544: PPUSH
57545: LD_VAR 0 4
57549: PPUSH
57550: CALL_OW 292
57554: IFFALSE 57568
// begin result := true ;
57556: LD_ADDR_VAR 0 3
57560: PUSH
57561: LD_INT 1
57563: ST_TO_ADDR
// exit ;
57564: POP
57565: POP
57566: GO 57572
// end ;
57568: GO 57537
57570: POP
57571: POP
// end ;
57572: LD_VAR 0 3
57576: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57577: LD_INT 0
57579: PPUSH
57580: PPUSH
57581: PPUSH
57582: PPUSH
// if not unit or not points then
57583: LD_VAR 0 1
57587: NOT
57588: PUSH
57589: LD_VAR 0 2
57593: NOT
57594: OR
57595: IFFALSE 57599
// exit ;
57597: GO 57689
// dist := 99999 ;
57599: LD_ADDR_VAR 0 5
57603: PUSH
57604: LD_INT 99999
57606: ST_TO_ADDR
// for i in points do
57607: LD_ADDR_VAR 0 4
57611: PUSH
57612: LD_VAR 0 2
57616: PUSH
57617: FOR_IN
57618: IFFALSE 57687
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57620: LD_ADDR_VAR 0 6
57624: PUSH
57625: LD_VAR 0 1
57629: PPUSH
57630: LD_VAR 0 4
57634: PUSH
57635: LD_INT 1
57637: ARRAY
57638: PPUSH
57639: LD_VAR 0 4
57643: PUSH
57644: LD_INT 2
57646: ARRAY
57647: PPUSH
57648: CALL_OW 297
57652: ST_TO_ADDR
// if tmpDist < dist then
57653: LD_VAR 0 6
57657: PUSH
57658: LD_VAR 0 5
57662: LESS
57663: IFFALSE 57685
// begin result := i ;
57665: LD_ADDR_VAR 0 3
57669: PUSH
57670: LD_VAR 0 4
57674: ST_TO_ADDR
// dist := tmpDist ;
57675: LD_ADDR_VAR 0 5
57679: PUSH
57680: LD_VAR 0 6
57684: ST_TO_ADDR
// end ; end ;
57685: GO 57617
57687: POP
57688: POP
// end ;
57689: LD_VAR 0 3
57693: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57694: LD_INT 0
57696: PPUSH
// uc_side := side ;
57697: LD_ADDR_OWVAR 20
57701: PUSH
57702: LD_VAR 0 1
57706: ST_TO_ADDR
// uc_nation := 3 ;
57707: LD_ADDR_OWVAR 21
57711: PUSH
57712: LD_INT 3
57714: ST_TO_ADDR
// vc_chassis := 25 ;
57715: LD_ADDR_OWVAR 37
57719: PUSH
57720: LD_INT 25
57722: ST_TO_ADDR
// vc_engine := engine_siberite ;
57723: LD_ADDR_OWVAR 39
57727: PUSH
57728: LD_INT 3
57730: ST_TO_ADDR
// vc_control := control_computer ;
57731: LD_ADDR_OWVAR 38
57735: PUSH
57736: LD_INT 3
57738: ST_TO_ADDR
// vc_weapon := 59 ;
57739: LD_ADDR_OWVAR 40
57743: PUSH
57744: LD_INT 59
57746: ST_TO_ADDR
// result := CreateVehicle ;
57747: LD_ADDR_VAR 0 5
57751: PUSH
57752: CALL_OW 45
57756: ST_TO_ADDR
// SetDir ( result , d ) ;
57757: LD_VAR 0 5
57761: PPUSH
57762: LD_VAR 0 4
57766: PPUSH
57767: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57771: LD_VAR 0 5
57775: PPUSH
57776: LD_VAR 0 2
57780: PPUSH
57781: LD_VAR 0 3
57785: PPUSH
57786: LD_INT 0
57788: PPUSH
57789: CALL_OW 48
// end ;
57793: LD_VAR 0 5
57797: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57798: LD_INT 0
57800: PPUSH
57801: PPUSH
57802: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57803: LD_ADDR_VAR 0 2
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57826: LD_VAR 0 1
57830: NOT
57831: PUSH
57832: LD_VAR 0 1
57836: PPUSH
57837: CALL_OW 264
57841: PUSH
57842: LD_INT 12
57844: PUSH
57845: LD_INT 51
57847: PUSH
57848: LD_INT 32
57850: PUSH
57851: LD_INT 89
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: IN
57860: NOT
57861: OR
57862: IFFALSE 57866
// exit ;
57864: GO 57964
// for i := 1 to 3 do
57866: LD_ADDR_VAR 0 3
57870: PUSH
57871: DOUBLE
57872: LD_INT 1
57874: DEC
57875: ST_TO_ADDR
57876: LD_INT 3
57878: PUSH
57879: FOR_TO
57880: IFFALSE 57962
// begin tmp := GetCargo ( cargo , i ) ;
57882: LD_ADDR_VAR 0 4
57886: PUSH
57887: LD_VAR 0 1
57891: PPUSH
57892: LD_VAR 0 3
57896: PPUSH
57897: CALL_OW 289
57901: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57902: LD_ADDR_VAR 0 2
57906: PUSH
57907: LD_VAR 0 2
57911: PPUSH
57912: LD_VAR 0 3
57916: PPUSH
57917: LD_VAR 0 4
57921: PPUSH
57922: CALL_OW 1
57926: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57927: LD_ADDR_VAR 0 2
57931: PUSH
57932: LD_VAR 0 2
57936: PPUSH
57937: LD_INT 4
57939: PPUSH
57940: LD_VAR 0 2
57944: PUSH
57945: LD_INT 4
57947: ARRAY
57948: PUSH
57949: LD_VAR 0 4
57953: PLUS
57954: PPUSH
57955: CALL_OW 1
57959: ST_TO_ADDR
// end ;
57960: GO 57879
57962: POP
57963: POP
// end ;
57964: LD_VAR 0 2
57968: RET
// export function Length ( array ) ; begin
57969: LD_INT 0
57971: PPUSH
// result := array + 0 ;
57972: LD_ADDR_VAR 0 2
57976: PUSH
57977: LD_VAR 0 1
57981: PUSH
57982: LD_INT 0
57984: PLUS
57985: ST_TO_ADDR
// end ;
57986: LD_VAR 0 2
57990: RET
// export function PrepareArray ( array ) ; begin
57991: LD_INT 0
57993: PPUSH
// result := array diff 0 ;
57994: LD_ADDR_VAR 0 2
57998: PUSH
57999: LD_VAR 0 1
58003: PUSH
58004: LD_INT 0
58006: DIFF
58007: ST_TO_ADDR
// if not result [ 1 ] then
58008: LD_VAR 0 2
58012: PUSH
58013: LD_INT 1
58015: ARRAY
58016: NOT
58017: IFFALSE 58037
// result := Delete ( result , 1 ) ;
58019: LD_ADDR_VAR 0 2
58023: PUSH
58024: LD_VAR 0 2
58028: PPUSH
58029: LD_INT 1
58031: PPUSH
58032: CALL_OW 3
58036: ST_TO_ADDR
// end ;
58037: LD_VAR 0 2
58041: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58042: LD_INT 0
58044: PPUSH
58045: PPUSH
58046: PPUSH
58047: PPUSH
// sibRocketRange := 25 ;
58048: LD_ADDR_VAR 0 6
58052: PUSH
58053: LD_INT 25
58055: ST_TO_ADDR
// result := false ;
58056: LD_ADDR_VAR 0 4
58060: PUSH
58061: LD_INT 0
58063: ST_TO_ADDR
// for i := 0 to 5 do
58064: LD_ADDR_VAR 0 5
58068: PUSH
58069: DOUBLE
58070: LD_INT 0
58072: DEC
58073: ST_TO_ADDR
58074: LD_INT 5
58076: PUSH
58077: FOR_TO
58078: IFFALSE 58145
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58080: LD_VAR 0 1
58084: PPUSH
58085: LD_VAR 0 5
58089: PPUSH
58090: LD_VAR 0 6
58094: PPUSH
58095: CALL_OW 272
58099: PPUSH
58100: LD_VAR 0 2
58104: PPUSH
58105: LD_VAR 0 5
58109: PPUSH
58110: LD_VAR 0 6
58114: PPUSH
58115: CALL_OW 273
58119: PPUSH
58120: LD_VAR 0 3
58124: PPUSH
58125: CALL_OW 309
58129: IFFALSE 58143
// begin result := true ;
58131: LD_ADDR_VAR 0 4
58135: PUSH
58136: LD_INT 1
58138: ST_TO_ADDR
// exit ;
58139: POP
58140: POP
58141: GO 58147
// end ;
58143: GO 58077
58145: POP
58146: POP
// end ;
58147: LD_VAR 0 4
58151: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58152: LD_INT 0
58154: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58155: LD_VAR 0 1
58159: PPUSH
58160: LD_VAR 0 2
58164: PPUSH
58165: LD_INT 0
58167: PPUSH
58168: LD_INT 0
58170: PPUSH
58171: LD_INT 1
58173: PPUSH
58174: LD_INT 0
58176: PPUSH
58177: CALL_OW 587
// end ;
58181: LD_VAR 0 3
58185: RET
// export function CenterOnNow ( unit ) ; begin
58186: LD_INT 0
58188: PPUSH
// result := IsInUnit ( unit ) ;
58189: LD_ADDR_VAR 0 2
58193: PUSH
58194: LD_VAR 0 1
58198: PPUSH
58199: CALL_OW 310
58203: ST_TO_ADDR
// if not result then
58204: LD_VAR 0 2
58208: NOT
58209: IFFALSE 58221
// result := unit ;
58211: LD_ADDR_VAR 0 2
58215: PUSH
58216: LD_VAR 0 1
58220: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58221: LD_VAR 0 1
58225: PPUSH
58226: CALL_OW 87
// end ;
58230: LD_VAR 0 2
58234: RET
// export function ComMoveHex ( unit , hex ) ; begin
58235: LD_INT 0
58237: PPUSH
// if not hex then
58238: LD_VAR 0 2
58242: NOT
58243: IFFALSE 58247
// exit ;
58245: GO 58300
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58247: LD_VAR 0 2
58251: PUSH
58252: LD_INT 1
58254: ARRAY
58255: PPUSH
58256: LD_VAR 0 2
58260: PUSH
58261: LD_INT 2
58263: ARRAY
58264: PPUSH
58265: CALL_OW 428
58269: IFFALSE 58273
// exit ;
58271: GO 58300
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58273: LD_VAR 0 1
58277: PPUSH
58278: LD_VAR 0 2
58282: PUSH
58283: LD_INT 1
58285: ARRAY
58286: PPUSH
58287: LD_VAR 0 2
58291: PUSH
58292: LD_INT 2
58294: ARRAY
58295: PPUSH
58296: CALL_OW 111
// end ; end_of_file
58300: LD_VAR 0 3
58304: RET
// export globalGameSaveCounter ; every 0 0$1 do
58305: GO 58307
58307: DISABLE
// begin enable ;
58308: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58309: LD_STRING updateTimer(
58311: PUSH
58312: LD_OWVAR 1
58316: STR
58317: PUSH
58318: LD_STRING );
58320: STR
58321: PPUSH
58322: CALL_OW 559
// end ;
58326: END
// every 0 0$1 do
58327: GO 58329
58329: DISABLE
// begin globalGameSaveCounter := 0 ;
58330: LD_ADDR_EXP 49
58334: PUSH
58335: LD_INT 0
58337: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
58338: LD_STRING setGameSaveCounter(0)
58340: PPUSH
58341: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
58345: LD_STRING initStreamRollete();
58347: PPUSH
58348: CALL_OW 559
// InitStreamMode ;
58352: CALL 59678 0 0
// DefineStreamItems ( false ) ;
58356: LD_INT 0
58358: PPUSH
58359: CALL 60142 0 1
// end ;
58363: END
// export function SOS_MapStart ( ) ; begin
58364: LD_INT 0
58366: PPUSH
// if streamModeActive then
58367: LD_EXP 50
58371: IFFALSE 58380
// DefineStreamItems ( true ) ;
58373: LD_INT 1
58375: PPUSH
58376: CALL 60142 0 1
// UpdateLuaVariables ( ) ;
58380: CALL 58397 0 0
// UpdateFactoryWaypoints ( ) ;
58384: CALL 73011 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58388: CALL 73268 0 0
// end ;
58392: LD_VAR 0 1
58396: RET
// function UpdateLuaVariables ( ) ; begin
58397: LD_INT 0
58399: PPUSH
// if globalGameSaveCounter then
58400: LD_EXP 49
58404: IFFALSE 58438
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
58406: LD_ADDR_EXP 49
58410: PUSH
58411: LD_EXP 49
58415: PPUSH
58416: CALL 55594 0 1
58420: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58421: LD_STRING setGameSaveCounter(
58423: PUSH
58424: LD_EXP 49
58428: STR
58429: PUSH
58430: LD_STRING )
58432: STR
58433: PPUSH
58434: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58438: LD_STRING setGameDifficulty(
58440: PUSH
58441: LD_OWVAR 67
58445: STR
58446: PUSH
58447: LD_STRING )
58449: STR
58450: PPUSH
58451: CALL_OW 559
// end ;
58455: LD_VAR 0 1
58459: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58460: LD_INT 0
58462: PPUSH
// if p2 = stream_mode then
58463: LD_VAR 0 2
58467: PUSH
58468: LD_INT 100
58470: EQUAL
58471: IFFALSE 59474
// begin if not StreamModeActive then
58473: LD_EXP 50
58477: NOT
58478: IFFALSE 58488
// StreamModeActive := true ;
58480: LD_ADDR_EXP 50
58484: PUSH
58485: LD_INT 1
58487: ST_TO_ADDR
// if p3 = 0 then
58488: LD_VAR 0 3
58492: PUSH
58493: LD_INT 0
58495: EQUAL
58496: IFFALSE 58502
// InitStreamMode ;
58498: CALL 59678 0 0
// if p3 = 1 then
58502: LD_VAR 0 3
58506: PUSH
58507: LD_INT 1
58509: EQUAL
58510: IFFALSE 58520
// sRocket := true ;
58512: LD_ADDR_EXP 55
58516: PUSH
58517: LD_INT 1
58519: ST_TO_ADDR
// if p3 = 2 then
58520: LD_VAR 0 3
58524: PUSH
58525: LD_INT 2
58527: EQUAL
58528: IFFALSE 58538
// sSpeed := true ;
58530: LD_ADDR_EXP 54
58534: PUSH
58535: LD_INT 1
58537: ST_TO_ADDR
// if p3 = 3 then
58538: LD_VAR 0 3
58542: PUSH
58543: LD_INT 3
58545: EQUAL
58546: IFFALSE 58556
// sEngine := true ;
58548: LD_ADDR_EXP 56
58552: PUSH
58553: LD_INT 1
58555: ST_TO_ADDR
// if p3 = 4 then
58556: LD_VAR 0 3
58560: PUSH
58561: LD_INT 4
58563: EQUAL
58564: IFFALSE 58574
// sSpec := true ;
58566: LD_ADDR_EXP 53
58570: PUSH
58571: LD_INT 1
58573: ST_TO_ADDR
// if p3 = 5 then
58574: LD_VAR 0 3
58578: PUSH
58579: LD_INT 5
58581: EQUAL
58582: IFFALSE 58592
// sLevel := true ;
58584: LD_ADDR_EXP 57
58588: PUSH
58589: LD_INT 1
58591: ST_TO_ADDR
// if p3 = 6 then
58592: LD_VAR 0 3
58596: PUSH
58597: LD_INT 6
58599: EQUAL
58600: IFFALSE 58610
// sArmoury := true ;
58602: LD_ADDR_EXP 58
58606: PUSH
58607: LD_INT 1
58609: ST_TO_ADDR
// if p3 = 7 then
58610: LD_VAR 0 3
58614: PUSH
58615: LD_INT 7
58617: EQUAL
58618: IFFALSE 58628
// sRadar := true ;
58620: LD_ADDR_EXP 59
58624: PUSH
58625: LD_INT 1
58627: ST_TO_ADDR
// if p3 = 8 then
58628: LD_VAR 0 3
58632: PUSH
58633: LD_INT 8
58635: EQUAL
58636: IFFALSE 58646
// sBunker := true ;
58638: LD_ADDR_EXP 60
58642: PUSH
58643: LD_INT 1
58645: ST_TO_ADDR
// if p3 = 9 then
58646: LD_VAR 0 3
58650: PUSH
58651: LD_INT 9
58653: EQUAL
58654: IFFALSE 58664
// sHack := true ;
58656: LD_ADDR_EXP 61
58660: PUSH
58661: LD_INT 1
58663: ST_TO_ADDR
// if p3 = 10 then
58664: LD_VAR 0 3
58668: PUSH
58669: LD_INT 10
58671: EQUAL
58672: IFFALSE 58682
// sFire := true ;
58674: LD_ADDR_EXP 62
58678: PUSH
58679: LD_INT 1
58681: ST_TO_ADDR
// if p3 = 11 then
58682: LD_VAR 0 3
58686: PUSH
58687: LD_INT 11
58689: EQUAL
58690: IFFALSE 58700
// sRefresh := true ;
58692: LD_ADDR_EXP 63
58696: PUSH
58697: LD_INT 1
58699: ST_TO_ADDR
// if p3 = 12 then
58700: LD_VAR 0 3
58704: PUSH
58705: LD_INT 12
58707: EQUAL
58708: IFFALSE 58718
// sExp := true ;
58710: LD_ADDR_EXP 64
58714: PUSH
58715: LD_INT 1
58717: ST_TO_ADDR
// if p3 = 13 then
58718: LD_VAR 0 3
58722: PUSH
58723: LD_INT 13
58725: EQUAL
58726: IFFALSE 58736
// sDepot := true ;
58728: LD_ADDR_EXP 65
58732: PUSH
58733: LD_INT 1
58735: ST_TO_ADDR
// if p3 = 14 then
58736: LD_VAR 0 3
58740: PUSH
58741: LD_INT 14
58743: EQUAL
58744: IFFALSE 58754
// sFlag := true ;
58746: LD_ADDR_EXP 66
58750: PUSH
58751: LD_INT 1
58753: ST_TO_ADDR
// if p3 = 15 then
58754: LD_VAR 0 3
58758: PUSH
58759: LD_INT 15
58761: EQUAL
58762: IFFALSE 58772
// sKamikadze := true ;
58764: LD_ADDR_EXP 74
58768: PUSH
58769: LD_INT 1
58771: ST_TO_ADDR
// if p3 = 16 then
58772: LD_VAR 0 3
58776: PUSH
58777: LD_INT 16
58779: EQUAL
58780: IFFALSE 58790
// sTroll := true ;
58782: LD_ADDR_EXP 75
58786: PUSH
58787: LD_INT 1
58789: ST_TO_ADDR
// if p3 = 17 then
58790: LD_VAR 0 3
58794: PUSH
58795: LD_INT 17
58797: EQUAL
58798: IFFALSE 58808
// sSlow := true ;
58800: LD_ADDR_EXP 76
58804: PUSH
58805: LD_INT 1
58807: ST_TO_ADDR
// if p3 = 18 then
58808: LD_VAR 0 3
58812: PUSH
58813: LD_INT 18
58815: EQUAL
58816: IFFALSE 58826
// sLack := true ;
58818: LD_ADDR_EXP 77
58822: PUSH
58823: LD_INT 1
58825: ST_TO_ADDR
// if p3 = 19 then
58826: LD_VAR 0 3
58830: PUSH
58831: LD_INT 19
58833: EQUAL
58834: IFFALSE 58844
// sTank := true ;
58836: LD_ADDR_EXP 79
58840: PUSH
58841: LD_INT 1
58843: ST_TO_ADDR
// if p3 = 20 then
58844: LD_VAR 0 3
58848: PUSH
58849: LD_INT 20
58851: EQUAL
58852: IFFALSE 58862
// sRemote := true ;
58854: LD_ADDR_EXP 80
58858: PUSH
58859: LD_INT 1
58861: ST_TO_ADDR
// if p3 = 21 then
58862: LD_VAR 0 3
58866: PUSH
58867: LD_INT 21
58869: EQUAL
58870: IFFALSE 58880
// sPowell := true ;
58872: LD_ADDR_EXP 81
58876: PUSH
58877: LD_INT 1
58879: ST_TO_ADDR
// if p3 = 22 then
58880: LD_VAR 0 3
58884: PUSH
58885: LD_INT 22
58887: EQUAL
58888: IFFALSE 58898
// sTeleport := true ;
58890: LD_ADDR_EXP 84
58894: PUSH
58895: LD_INT 1
58897: ST_TO_ADDR
// if p3 = 23 then
58898: LD_VAR 0 3
58902: PUSH
58903: LD_INT 23
58905: EQUAL
58906: IFFALSE 58916
// sOilTower := true ;
58908: LD_ADDR_EXP 86
58912: PUSH
58913: LD_INT 1
58915: ST_TO_ADDR
// if p3 = 24 then
58916: LD_VAR 0 3
58920: PUSH
58921: LD_INT 24
58923: EQUAL
58924: IFFALSE 58934
// sShovel := true ;
58926: LD_ADDR_EXP 87
58930: PUSH
58931: LD_INT 1
58933: ST_TO_ADDR
// if p3 = 25 then
58934: LD_VAR 0 3
58938: PUSH
58939: LD_INT 25
58941: EQUAL
58942: IFFALSE 58952
// sSheik := true ;
58944: LD_ADDR_EXP 88
58948: PUSH
58949: LD_INT 1
58951: ST_TO_ADDR
// if p3 = 26 then
58952: LD_VAR 0 3
58956: PUSH
58957: LD_INT 26
58959: EQUAL
58960: IFFALSE 58970
// sEarthquake := true ;
58962: LD_ADDR_EXP 90
58966: PUSH
58967: LD_INT 1
58969: ST_TO_ADDR
// if p3 = 27 then
58970: LD_VAR 0 3
58974: PUSH
58975: LD_INT 27
58977: EQUAL
58978: IFFALSE 58988
// sAI := true ;
58980: LD_ADDR_EXP 91
58984: PUSH
58985: LD_INT 1
58987: ST_TO_ADDR
// if p3 = 28 then
58988: LD_VAR 0 3
58992: PUSH
58993: LD_INT 28
58995: EQUAL
58996: IFFALSE 59006
// sCargo := true ;
58998: LD_ADDR_EXP 94
59002: PUSH
59003: LD_INT 1
59005: ST_TO_ADDR
// if p3 = 29 then
59006: LD_VAR 0 3
59010: PUSH
59011: LD_INT 29
59013: EQUAL
59014: IFFALSE 59024
// sDLaser := true ;
59016: LD_ADDR_EXP 95
59020: PUSH
59021: LD_INT 1
59023: ST_TO_ADDR
// if p3 = 30 then
59024: LD_VAR 0 3
59028: PUSH
59029: LD_INT 30
59031: EQUAL
59032: IFFALSE 59042
// sExchange := true ;
59034: LD_ADDR_EXP 96
59038: PUSH
59039: LD_INT 1
59041: ST_TO_ADDR
// if p3 = 31 then
59042: LD_VAR 0 3
59046: PUSH
59047: LD_INT 31
59049: EQUAL
59050: IFFALSE 59060
// sFac := true ;
59052: LD_ADDR_EXP 97
59056: PUSH
59057: LD_INT 1
59059: ST_TO_ADDR
// if p3 = 32 then
59060: LD_VAR 0 3
59064: PUSH
59065: LD_INT 32
59067: EQUAL
59068: IFFALSE 59078
// sPower := true ;
59070: LD_ADDR_EXP 98
59074: PUSH
59075: LD_INT 1
59077: ST_TO_ADDR
// if p3 = 33 then
59078: LD_VAR 0 3
59082: PUSH
59083: LD_INT 33
59085: EQUAL
59086: IFFALSE 59096
// sRandom := true ;
59088: LD_ADDR_EXP 99
59092: PUSH
59093: LD_INT 1
59095: ST_TO_ADDR
// if p3 = 34 then
59096: LD_VAR 0 3
59100: PUSH
59101: LD_INT 34
59103: EQUAL
59104: IFFALSE 59114
// sShield := true ;
59106: LD_ADDR_EXP 100
59110: PUSH
59111: LD_INT 1
59113: ST_TO_ADDR
// if p3 = 35 then
59114: LD_VAR 0 3
59118: PUSH
59119: LD_INT 35
59121: EQUAL
59122: IFFALSE 59132
// sTime := true ;
59124: LD_ADDR_EXP 101
59128: PUSH
59129: LD_INT 1
59131: ST_TO_ADDR
// if p3 = 36 then
59132: LD_VAR 0 3
59136: PUSH
59137: LD_INT 36
59139: EQUAL
59140: IFFALSE 59150
// sTools := true ;
59142: LD_ADDR_EXP 102
59146: PUSH
59147: LD_INT 1
59149: ST_TO_ADDR
// if p3 = 101 then
59150: LD_VAR 0 3
59154: PUSH
59155: LD_INT 101
59157: EQUAL
59158: IFFALSE 59168
// sSold := true ;
59160: LD_ADDR_EXP 67
59164: PUSH
59165: LD_INT 1
59167: ST_TO_ADDR
// if p3 = 102 then
59168: LD_VAR 0 3
59172: PUSH
59173: LD_INT 102
59175: EQUAL
59176: IFFALSE 59186
// sDiff := true ;
59178: LD_ADDR_EXP 68
59182: PUSH
59183: LD_INT 1
59185: ST_TO_ADDR
// if p3 = 103 then
59186: LD_VAR 0 3
59190: PUSH
59191: LD_INT 103
59193: EQUAL
59194: IFFALSE 59204
// sFog := true ;
59196: LD_ADDR_EXP 71
59200: PUSH
59201: LD_INT 1
59203: ST_TO_ADDR
// if p3 = 104 then
59204: LD_VAR 0 3
59208: PUSH
59209: LD_INT 104
59211: EQUAL
59212: IFFALSE 59222
// sReset := true ;
59214: LD_ADDR_EXP 72
59218: PUSH
59219: LD_INT 1
59221: ST_TO_ADDR
// if p3 = 105 then
59222: LD_VAR 0 3
59226: PUSH
59227: LD_INT 105
59229: EQUAL
59230: IFFALSE 59240
// sSun := true ;
59232: LD_ADDR_EXP 73
59236: PUSH
59237: LD_INT 1
59239: ST_TO_ADDR
// if p3 = 106 then
59240: LD_VAR 0 3
59244: PUSH
59245: LD_INT 106
59247: EQUAL
59248: IFFALSE 59258
// sTiger := true ;
59250: LD_ADDR_EXP 69
59254: PUSH
59255: LD_INT 1
59257: ST_TO_ADDR
// if p3 = 107 then
59258: LD_VAR 0 3
59262: PUSH
59263: LD_INT 107
59265: EQUAL
59266: IFFALSE 59276
// sBomb := true ;
59268: LD_ADDR_EXP 70
59272: PUSH
59273: LD_INT 1
59275: ST_TO_ADDR
// if p3 = 108 then
59276: LD_VAR 0 3
59280: PUSH
59281: LD_INT 108
59283: EQUAL
59284: IFFALSE 59294
// sWound := true ;
59286: LD_ADDR_EXP 78
59290: PUSH
59291: LD_INT 1
59293: ST_TO_ADDR
// if p3 = 109 then
59294: LD_VAR 0 3
59298: PUSH
59299: LD_INT 109
59301: EQUAL
59302: IFFALSE 59312
// sBetray := true ;
59304: LD_ADDR_EXP 82
59308: PUSH
59309: LD_INT 1
59311: ST_TO_ADDR
// if p3 = 110 then
59312: LD_VAR 0 3
59316: PUSH
59317: LD_INT 110
59319: EQUAL
59320: IFFALSE 59330
// sContamin := true ;
59322: LD_ADDR_EXP 83
59326: PUSH
59327: LD_INT 1
59329: ST_TO_ADDR
// if p3 = 111 then
59330: LD_VAR 0 3
59334: PUSH
59335: LD_INT 111
59337: EQUAL
59338: IFFALSE 59348
// sOil := true ;
59340: LD_ADDR_EXP 85
59344: PUSH
59345: LD_INT 1
59347: ST_TO_ADDR
// if p3 = 112 then
59348: LD_VAR 0 3
59352: PUSH
59353: LD_INT 112
59355: EQUAL
59356: IFFALSE 59366
// sStu := true ;
59358: LD_ADDR_EXP 89
59362: PUSH
59363: LD_INT 1
59365: ST_TO_ADDR
// if p3 = 113 then
59366: LD_VAR 0 3
59370: PUSH
59371: LD_INT 113
59373: EQUAL
59374: IFFALSE 59384
// sBazooka := true ;
59376: LD_ADDR_EXP 92
59380: PUSH
59381: LD_INT 1
59383: ST_TO_ADDR
// if p3 = 114 then
59384: LD_VAR 0 3
59388: PUSH
59389: LD_INT 114
59391: EQUAL
59392: IFFALSE 59402
// sMortar := true ;
59394: LD_ADDR_EXP 93
59398: PUSH
59399: LD_INT 1
59401: ST_TO_ADDR
// if p3 = 115 then
59402: LD_VAR 0 3
59406: PUSH
59407: LD_INT 115
59409: EQUAL
59410: IFFALSE 59420
// sRanger := true ;
59412: LD_ADDR_EXP 103
59416: PUSH
59417: LD_INT 1
59419: ST_TO_ADDR
// if p3 = 116 then
59420: LD_VAR 0 3
59424: PUSH
59425: LD_INT 116
59427: EQUAL
59428: IFFALSE 59438
// sComputer := true ;
59430: LD_ADDR_EXP 104
59434: PUSH
59435: LD_INT 1
59437: ST_TO_ADDR
// if p3 = 117 then
59438: LD_VAR 0 3
59442: PUSH
59443: LD_INT 117
59445: EQUAL
59446: IFFALSE 59456
// s30 := true ;
59448: LD_ADDR_EXP 105
59452: PUSH
59453: LD_INT 1
59455: ST_TO_ADDR
// if p3 = 118 then
59456: LD_VAR 0 3
59460: PUSH
59461: LD_INT 118
59463: EQUAL
59464: IFFALSE 59474
// s60 := true ;
59466: LD_ADDR_EXP 106
59470: PUSH
59471: LD_INT 1
59473: ST_TO_ADDR
// end ; if p2 = hack_mode then
59474: LD_VAR 0 2
59478: PUSH
59479: LD_INT 101
59481: EQUAL
59482: IFFALSE 59610
// begin case p3 of 1 :
59484: LD_VAR 0 3
59488: PUSH
59489: LD_INT 1
59491: DOUBLE
59492: EQUAL
59493: IFTRUE 59497
59495: GO 59504
59497: POP
// hHackUnlimitedResources ; 2 :
59498: CALL 71757 0 0
59502: GO 59610
59504: LD_INT 2
59506: DOUBLE
59507: EQUAL
59508: IFTRUE 59512
59510: GO 59519
59512: POP
// hHackSetLevel10 ; 3 :
59513: CALL 71890 0 0
59517: GO 59610
59519: LD_INT 3
59521: DOUBLE
59522: EQUAL
59523: IFTRUE 59527
59525: GO 59534
59527: POP
// hHackSetLevel10YourUnits ; 4 :
59528: CALL 71975 0 0
59532: GO 59610
59534: LD_INT 4
59536: DOUBLE
59537: EQUAL
59538: IFTRUE 59542
59540: GO 59549
59542: POP
// hHackInvincible ; 5 :
59543: CALL 72423 0 0
59547: GO 59610
59549: LD_INT 5
59551: DOUBLE
59552: EQUAL
59553: IFTRUE 59557
59555: GO 59564
59557: POP
// hHackInvisible ; 6 :
59558: CALL 72534 0 0
59562: GO 59610
59564: LD_INT 6
59566: DOUBLE
59567: EQUAL
59568: IFTRUE 59572
59570: GO 59579
59572: POP
// hHackChangeYourSide ; 7 :
59573: CALL 72591 0 0
59577: GO 59610
59579: LD_INT 7
59581: DOUBLE
59582: EQUAL
59583: IFTRUE 59587
59585: GO 59594
59587: POP
// hHackChangeUnitSide ; 8 :
59588: CALL 72633 0 0
59592: GO 59610
59594: LD_INT 8
59596: DOUBLE
59597: EQUAL
59598: IFTRUE 59602
59600: GO 59609
59602: POP
// hHackFog ; end ;
59603: CALL 72734 0 0
59607: GO 59610
59609: POP
// end ; if p2 = game_save_mode then
59610: LD_VAR 0 2
59614: PUSH
59615: LD_INT 102
59617: EQUAL
59618: IFFALSE 59673
// begin if p3 = 1 then
59620: LD_VAR 0 3
59624: PUSH
59625: LD_INT 1
59627: EQUAL
59628: IFFALSE 59640
// globalGameSaveCounter := p4 ;
59630: LD_ADDR_EXP 49
59634: PUSH
59635: LD_VAR 0 4
59639: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59640: LD_VAR 0 3
59644: PUSH
59645: LD_INT 2
59647: EQUAL
59648: PUSH
59649: LD_EXP 49
59653: AND
59654: IFFALSE 59673
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59656: LD_STRING setGameSaveCounter(
59658: PUSH
59659: LD_EXP 49
59663: STR
59664: PUSH
59665: LD_STRING )
59667: STR
59668: PPUSH
59669: CALL_OW 559
// end ; end ;
59673: LD_VAR 0 7
59677: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59678: LD_INT 0
59680: PPUSH
// streamModeActive := false ;
59681: LD_ADDR_EXP 50
59685: PUSH
59686: LD_INT 0
59688: ST_TO_ADDR
// normalCounter := 36 ;
59689: LD_ADDR_EXP 51
59693: PUSH
59694: LD_INT 36
59696: ST_TO_ADDR
// hardcoreCounter := 18 ;
59697: LD_ADDR_EXP 52
59701: PUSH
59702: LD_INT 18
59704: ST_TO_ADDR
// sRocket := false ;
59705: LD_ADDR_EXP 55
59709: PUSH
59710: LD_INT 0
59712: ST_TO_ADDR
// sSpeed := false ;
59713: LD_ADDR_EXP 54
59717: PUSH
59718: LD_INT 0
59720: ST_TO_ADDR
// sEngine := false ;
59721: LD_ADDR_EXP 56
59725: PUSH
59726: LD_INT 0
59728: ST_TO_ADDR
// sSpec := false ;
59729: LD_ADDR_EXP 53
59733: PUSH
59734: LD_INT 0
59736: ST_TO_ADDR
// sLevel := false ;
59737: LD_ADDR_EXP 57
59741: PUSH
59742: LD_INT 0
59744: ST_TO_ADDR
// sArmoury := false ;
59745: LD_ADDR_EXP 58
59749: PUSH
59750: LD_INT 0
59752: ST_TO_ADDR
// sRadar := false ;
59753: LD_ADDR_EXP 59
59757: PUSH
59758: LD_INT 0
59760: ST_TO_ADDR
// sBunker := false ;
59761: LD_ADDR_EXP 60
59765: PUSH
59766: LD_INT 0
59768: ST_TO_ADDR
// sHack := false ;
59769: LD_ADDR_EXP 61
59773: PUSH
59774: LD_INT 0
59776: ST_TO_ADDR
// sFire := false ;
59777: LD_ADDR_EXP 62
59781: PUSH
59782: LD_INT 0
59784: ST_TO_ADDR
// sRefresh := false ;
59785: LD_ADDR_EXP 63
59789: PUSH
59790: LD_INT 0
59792: ST_TO_ADDR
// sExp := false ;
59793: LD_ADDR_EXP 64
59797: PUSH
59798: LD_INT 0
59800: ST_TO_ADDR
// sDepot := false ;
59801: LD_ADDR_EXP 65
59805: PUSH
59806: LD_INT 0
59808: ST_TO_ADDR
// sFlag := false ;
59809: LD_ADDR_EXP 66
59813: PUSH
59814: LD_INT 0
59816: ST_TO_ADDR
// sKamikadze := false ;
59817: LD_ADDR_EXP 74
59821: PUSH
59822: LD_INT 0
59824: ST_TO_ADDR
// sTroll := false ;
59825: LD_ADDR_EXP 75
59829: PUSH
59830: LD_INT 0
59832: ST_TO_ADDR
// sSlow := false ;
59833: LD_ADDR_EXP 76
59837: PUSH
59838: LD_INT 0
59840: ST_TO_ADDR
// sLack := false ;
59841: LD_ADDR_EXP 77
59845: PUSH
59846: LD_INT 0
59848: ST_TO_ADDR
// sTank := false ;
59849: LD_ADDR_EXP 79
59853: PUSH
59854: LD_INT 0
59856: ST_TO_ADDR
// sRemote := false ;
59857: LD_ADDR_EXP 80
59861: PUSH
59862: LD_INT 0
59864: ST_TO_ADDR
// sPowell := false ;
59865: LD_ADDR_EXP 81
59869: PUSH
59870: LD_INT 0
59872: ST_TO_ADDR
// sTeleport := false ;
59873: LD_ADDR_EXP 84
59877: PUSH
59878: LD_INT 0
59880: ST_TO_ADDR
// sOilTower := false ;
59881: LD_ADDR_EXP 86
59885: PUSH
59886: LD_INT 0
59888: ST_TO_ADDR
// sShovel := false ;
59889: LD_ADDR_EXP 87
59893: PUSH
59894: LD_INT 0
59896: ST_TO_ADDR
// sSheik := false ;
59897: LD_ADDR_EXP 88
59901: PUSH
59902: LD_INT 0
59904: ST_TO_ADDR
// sEarthquake := false ;
59905: LD_ADDR_EXP 90
59909: PUSH
59910: LD_INT 0
59912: ST_TO_ADDR
// sAI := false ;
59913: LD_ADDR_EXP 91
59917: PUSH
59918: LD_INT 0
59920: ST_TO_ADDR
// sCargo := false ;
59921: LD_ADDR_EXP 94
59925: PUSH
59926: LD_INT 0
59928: ST_TO_ADDR
// sDLaser := false ;
59929: LD_ADDR_EXP 95
59933: PUSH
59934: LD_INT 0
59936: ST_TO_ADDR
// sExchange := false ;
59937: LD_ADDR_EXP 96
59941: PUSH
59942: LD_INT 0
59944: ST_TO_ADDR
// sFac := false ;
59945: LD_ADDR_EXP 97
59949: PUSH
59950: LD_INT 0
59952: ST_TO_ADDR
// sPower := false ;
59953: LD_ADDR_EXP 98
59957: PUSH
59958: LD_INT 0
59960: ST_TO_ADDR
// sRandom := false ;
59961: LD_ADDR_EXP 99
59965: PUSH
59966: LD_INT 0
59968: ST_TO_ADDR
// sShield := false ;
59969: LD_ADDR_EXP 100
59973: PUSH
59974: LD_INT 0
59976: ST_TO_ADDR
// sTime := false ;
59977: LD_ADDR_EXP 101
59981: PUSH
59982: LD_INT 0
59984: ST_TO_ADDR
// sTools := false ;
59985: LD_ADDR_EXP 102
59989: PUSH
59990: LD_INT 0
59992: ST_TO_ADDR
// sSold := false ;
59993: LD_ADDR_EXP 67
59997: PUSH
59998: LD_INT 0
60000: ST_TO_ADDR
// sDiff := false ;
60001: LD_ADDR_EXP 68
60005: PUSH
60006: LD_INT 0
60008: ST_TO_ADDR
// sFog := false ;
60009: LD_ADDR_EXP 71
60013: PUSH
60014: LD_INT 0
60016: ST_TO_ADDR
// sReset := false ;
60017: LD_ADDR_EXP 72
60021: PUSH
60022: LD_INT 0
60024: ST_TO_ADDR
// sSun := false ;
60025: LD_ADDR_EXP 73
60029: PUSH
60030: LD_INT 0
60032: ST_TO_ADDR
// sTiger := false ;
60033: LD_ADDR_EXP 69
60037: PUSH
60038: LD_INT 0
60040: ST_TO_ADDR
// sBomb := false ;
60041: LD_ADDR_EXP 70
60045: PUSH
60046: LD_INT 0
60048: ST_TO_ADDR
// sWound := false ;
60049: LD_ADDR_EXP 78
60053: PUSH
60054: LD_INT 0
60056: ST_TO_ADDR
// sBetray := false ;
60057: LD_ADDR_EXP 82
60061: PUSH
60062: LD_INT 0
60064: ST_TO_ADDR
// sContamin := false ;
60065: LD_ADDR_EXP 83
60069: PUSH
60070: LD_INT 0
60072: ST_TO_ADDR
// sOil := false ;
60073: LD_ADDR_EXP 85
60077: PUSH
60078: LD_INT 0
60080: ST_TO_ADDR
// sStu := false ;
60081: LD_ADDR_EXP 89
60085: PUSH
60086: LD_INT 0
60088: ST_TO_ADDR
// sBazooka := false ;
60089: LD_ADDR_EXP 92
60093: PUSH
60094: LD_INT 0
60096: ST_TO_ADDR
// sMortar := false ;
60097: LD_ADDR_EXP 93
60101: PUSH
60102: LD_INT 0
60104: ST_TO_ADDR
// sRanger := false ;
60105: LD_ADDR_EXP 103
60109: PUSH
60110: LD_INT 0
60112: ST_TO_ADDR
// sComputer := false ;
60113: LD_ADDR_EXP 104
60117: PUSH
60118: LD_INT 0
60120: ST_TO_ADDR
// s30 := false ;
60121: LD_ADDR_EXP 105
60125: PUSH
60126: LD_INT 0
60128: ST_TO_ADDR
// s60 := false ;
60129: LD_ADDR_EXP 106
60133: PUSH
60134: LD_INT 0
60136: ST_TO_ADDR
// end ;
60137: LD_VAR 0 1
60141: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
60142: LD_INT 0
60144: PPUSH
60145: PPUSH
60146: PPUSH
60147: PPUSH
60148: PPUSH
60149: PPUSH
60150: PPUSH
// result := [ ] ;
60151: LD_ADDR_VAR 0 2
60155: PUSH
60156: EMPTY
60157: ST_TO_ADDR
// if campaign_id = 1 then
60158: LD_OWVAR 69
60162: PUSH
60163: LD_INT 1
60165: EQUAL
60166: IFFALSE 63332
// begin case mission_number of 1 :
60168: LD_OWVAR 70
60172: PUSH
60173: LD_INT 1
60175: DOUBLE
60176: EQUAL
60177: IFTRUE 60181
60179: GO 60257
60181: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
60182: LD_ADDR_VAR 0 2
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: LD_INT 4
60192: PUSH
60193: LD_INT 11
60195: PUSH
60196: LD_INT 12
60198: PUSH
60199: LD_INT 15
60201: PUSH
60202: LD_INT 16
60204: PUSH
60205: LD_INT 22
60207: PUSH
60208: LD_INT 23
60210: PUSH
60211: LD_INT 26
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 101
60227: PUSH
60228: LD_INT 102
60230: PUSH
60231: LD_INT 106
60233: PUSH
60234: LD_INT 116
60236: PUSH
60237: LD_INT 117
60239: PUSH
60240: LD_INT 118
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: ST_TO_ADDR
60255: GO 63330
60257: LD_INT 2
60259: DOUBLE
60260: EQUAL
60261: IFTRUE 60265
60263: GO 60349
60265: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
60266: LD_ADDR_VAR 0 2
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: LD_INT 4
60276: PUSH
60277: LD_INT 11
60279: PUSH
60280: LD_INT 12
60282: PUSH
60283: LD_INT 15
60285: PUSH
60286: LD_INT 16
60288: PUSH
60289: LD_INT 22
60291: PUSH
60292: LD_INT 23
60294: PUSH
60295: LD_INT 26
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 101
60311: PUSH
60312: LD_INT 102
60314: PUSH
60315: LD_INT 105
60317: PUSH
60318: LD_INT 106
60320: PUSH
60321: LD_INT 108
60323: PUSH
60324: LD_INT 116
60326: PUSH
60327: LD_INT 117
60329: PUSH
60330: LD_INT 118
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: ST_TO_ADDR
60347: GO 63330
60349: LD_INT 3
60351: DOUBLE
60352: EQUAL
60353: IFTRUE 60357
60355: GO 60445
60357: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60358: LD_ADDR_VAR 0 2
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: LD_INT 4
60368: PUSH
60369: LD_INT 5
60371: PUSH
60372: LD_INT 11
60374: PUSH
60375: LD_INT 12
60377: PUSH
60378: LD_INT 15
60380: PUSH
60381: LD_INT 16
60383: PUSH
60384: LD_INT 22
60386: PUSH
60387: LD_INT 26
60389: PUSH
60390: LD_INT 36
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 101
60407: PUSH
60408: LD_INT 102
60410: PUSH
60411: LD_INT 105
60413: PUSH
60414: LD_INT 106
60416: PUSH
60417: LD_INT 108
60419: PUSH
60420: LD_INT 116
60422: PUSH
60423: LD_INT 117
60425: PUSH
60426: LD_INT 118
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: ST_TO_ADDR
60443: GO 63330
60445: LD_INT 4
60447: DOUBLE
60448: EQUAL
60449: IFTRUE 60453
60451: GO 60549
60453: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60454: LD_ADDR_VAR 0 2
60458: PUSH
60459: LD_INT 2
60461: PUSH
60462: LD_INT 4
60464: PUSH
60465: LD_INT 5
60467: PUSH
60468: LD_INT 8
60470: PUSH
60471: LD_INT 11
60473: PUSH
60474: LD_INT 12
60476: PUSH
60477: LD_INT 15
60479: PUSH
60480: LD_INT 16
60482: PUSH
60483: LD_INT 22
60485: PUSH
60486: LD_INT 23
60488: PUSH
60489: LD_INT 26
60491: PUSH
60492: LD_INT 36
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 101
60511: PUSH
60512: LD_INT 102
60514: PUSH
60515: LD_INT 105
60517: PUSH
60518: LD_INT 106
60520: PUSH
60521: LD_INT 108
60523: PUSH
60524: LD_INT 116
60526: PUSH
60527: LD_INT 117
60529: PUSH
60530: LD_INT 118
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: ST_TO_ADDR
60547: GO 63330
60549: LD_INT 5
60551: DOUBLE
60552: EQUAL
60553: IFTRUE 60557
60555: GO 60669
60557: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60558: LD_ADDR_VAR 0 2
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: LD_INT 4
60568: PUSH
60569: LD_INT 5
60571: PUSH
60572: LD_INT 6
60574: PUSH
60575: LD_INT 8
60577: PUSH
60578: LD_INT 11
60580: PUSH
60581: LD_INT 12
60583: PUSH
60584: LD_INT 15
60586: PUSH
60587: LD_INT 16
60589: PUSH
60590: LD_INT 22
60592: PUSH
60593: LD_INT 23
60595: PUSH
60596: LD_INT 25
60598: PUSH
60599: LD_INT 26
60601: PUSH
60602: LD_INT 36
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 101
60623: PUSH
60624: LD_INT 102
60626: PUSH
60627: LD_INT 105
60629: PUSH
60630: LD_INT 106
60632: PUSH
60633: LD_INT 108
60635: PUSH
60636: LD_INT 109
60638: PUSH
60639: LD_INT 112
60641: PUSH
60642: LD_INT 116
60644: PUSH
60645: LD_INT 117
60647: PUSH
60648: LD_INT 118
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: ST_TO_ADDR
60667: GO 63330
60669: LD_INT 6
60671: DOUBLE
60672: EQUAL
60673: IFTRUE 60677
60675: GO 60809
60677: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60678: LD_ADDR_VAR 0 2
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: LD_INT 4
60688: PUSH
60689: LD_INT 5
60691: PUSH
60692: LD_INT 6
60694: PUSH
60695: LD_INT 8
60697: PUSH
60698: LD_INT 11
60700: PUSH
60701: LD_INT 12
60703: PUSH
60704: LD_INT 15
60706: PUSH
60707: LD_INT 16
60709: PUSH
60710: LD_INT 20
60712: PUSH
60713: LD_INT 21
60715: PUSH
60716: LD_INT 22
60718: PUSH
60719: LD_INT 23
60721: PUSH
60722: LD_INT 25
60724: PUSH
60725: LD_INT 26
60727: PUSH
60728: LD_INT 30
60730: PUSH
60731: LD_INT 31
60733: PUSH
60734: LD_INT 32
60736: PUSH
60737: LD_INT 36
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 101
60763: PUSH
60764: LD_INT 102
60766: PUSH
60767: LD_INT 105
60769: PUSH
60770: LD_INT 106
60772: PUSH
60773: LD_INT 108
60775: PUSH
60776: LD_INT 109
60778: PUSH
60779: LD_INT 112
60781: PUSH
60782: LD_INT 116
60784: PUSH
60785: LD_INT 117
60787: PUSH
60788: LD_INT 118
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: ST_TO_ADDR
60807: GO 63330
60809: LD_INT 7
60811: DOUBLE
60812: EQUAL
60813: IFTRUE 60817
60815: GO 60929
60817: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60818: LD_ADDR_VAR 0 2
60822: PUSH
60823: LD_INT 2
60825: PUSH
60826: LD_INT 4
60828: PUSH
60829: LD_INT 5
60831: PUSH
60832: LD_INT 7
60834: PUSH
60835: LD_INT 11
60837: PUSH
60838: LD_INT 12
60840: PUSH
60841: LD_INT 15
60843: PUSH
60844: LD_INT 16
60846: PUSH
60847: LD_INT 20
60849: PUSH
60850: LD_INT 21
60852: PUSH
60853: LD_INT 22
60855: PUSH
60856: LD_INT 23
60858: PUSH
60859: LD_INT 25
60861: PUSH
60862: LD_INT 26
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 101
60883: PUSH
60884: LD_INT 102
60886: PUSH
60887: LD_INT 103
60889: PUSH
60890: LD_INT 105
60892: PUSH
60893: LD_INT 106
60895: PUSH
60896: LD_INT 108
60898: PUSH
60899: LD_INT 112
60901: PUSH
60902: LD_INT 116
60904: PUSH
60905: LD_INT 117
60907: PUSH
60908: LD_INT 118
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: ST_TO_ADDR
60927: GO 63330
60929: LD_INT 8
60931: DOUBLE
60932: EQUAL
60933: IFTRUE 60937
60935: GO 61077
60937: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60938: LD_ADDR_VAR 0 2
60942: PUSH
60943: LD_INT 2
60945: PUSH
60946: LD_INT 4
60948: PUSH
60949: LD_INT 5
60951: PUSH
60952: LD_INT 6
60954: PUSH
60955: LD_INT 7
60957: PUSH
60958: LD_INT 8
60960: PUSH
60961: LD_INT 11
60963: PUSH
60964: LD_INT 12
60966: PUSH
60967: LD_INT 15
60969: PUSH
60970: LD_INT 16
60972: PUSH
60973: LD_INT 20
60975: PUSH
60976: LD_INT 21
60978: PUSH
60979: LD_INT 22
60981: PUSH
60982: LD_INT 23
60984: PUSH
60985: LD_INT 25
60987: PUSH
60988: LD_INT 26
60990: PUSH
60991: LD_INT 30
60993: PUSH
60994: LD_INT 31
60996: PUSH
60997: LD_INT 32
60999: PUSH
61000: LD_INT 36
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 101
61027: PUSH
61028: LD_INT 102
61030: PUSH
61031: LD_INT 103
61033: PUSH
61034: LD_INT 105
61036: PUSH
61037: LD_INT 106
61039: PUSH
61040: LD_INT 108
61042: PUSH
61043: LD_INT 109
61045: PUSH
61046: LD_INT 112
61048: PUSH
61049: LD_INT 116
61051: PUSH
61052: LD_INT 117
61054: PUSH
61055: LD_INT 118
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: ST_TO_ADDR
61075: GO 63330
61077: LD_INT 9
61079: DOUBLE
61080: EQUAL
61081: IFTRUE 61085
61083: GO 61233
61085: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
61086: LD_ADDR_VAR 0 2
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 4
61096: PUSH
61097: LD_INT 5
61099: PUSH
61100: LD_INT 6
61102: PUSH
61103: LD_INT 7
61105: PUSH
61106: LD_INT 8
61108: PUSH
61109: LD_INT 11
61111: PUSH
61112: LD_INT 12
61114: PUSH
61115: LD_INT 15
61117: PUSH
61118: LD_INT 16
61120: PUSH
61121: LD_INT 20
61123: PUSH
61124: LD_INT 21
61126: PUSH
61127: LD_INT 22
61129: PUSH
61130: LD_INT 23
61132: PUSH
61133: LD_INT 25
61135: PUSH
61136: LD_INT 26
61138: PUSH
61139: LD_INT 28
61141: PUSH
61142: LD_INT 30
61144: PUSH
61145: LD_INT 31
61147: PUSH
61148: LD_INT 32
61150: PUSH
61151: LD_INT 36
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 101
61179: PUSH
61180: LD_INT 102
61182: PUSH
61183: LD_INT 103
61185: PUSH
61186: LD_INT 105
61188: PUSH
61189: LD_INT 106
61191: PUSH
61192: LD_INT 108
61194: PUSH
61195: LD_INT 109
61197: PUSH
61198: LD_INT 112
61200: PUSH
61201: LD_INT 114
61203: PUSH
61204: LD_INT 116
61206: PUSH
61207: LD_INT 117
61209: PUSH
61210: LD_INT 118
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: ST_TO_ADDR
61231: GO 63330
61233: LD_INT 10
61235: DOUBLE
61236: EQUAL
61237: IFTRUE 61241
61239: GO 61437
61241: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
61242: LD_ADDR_VAR 0 2
61246: PUSH
61247: LD_INT 2
61249: PUSH
61250: LD_INT 4
61252: PUSH
61253: LD_INT 5
61255: PUSH
61256: LD_INT 6
61258: PUSH
61259: LD_INT 7
61261: PUSH
61262: LD_INT 8
61264: PUSH
61265: LD_INT 9
61267: PUSH
61268: LD_INT 10
61270: PUSH
61271: LD_INT 11
61273: PUSH
61274: LD_INT 12
61276: PUSH
61277: LD_INT 13
61279: PUSH
61280: LD_INT 14
61282: PUSH
61283: LD_INT 15
61285: PUSH
61286: LD_INT 16
61288: PUSH
61289: LD_INT 17
61291: PUSH
61292: LD_INT 18
61294: PUSH
61295: LD_INT 19
61297: PUSH
61298: LD_INT 20
61300: PUSH
61301: LD_INT 21
61303: PUSH
61304: LD_INT 22
61306: PUSH
61307: LD_INT 23
61309: PUSH
61310: LD_INT 24
61312: PUSH
61313: LD_INT 25
61315: PUSH
61316: LD_INT 26
61318: PUSH
61319: LD_INT 28
61321: PUSH
61322: LD_INT 30
61324: PUSH
61325: LD_INT 31
61327: PUSH
61328: LD_INT 32
61330: PUSH
61331: LD_INT 36
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 101
61367: PUSH
61368: LD_INT 102
61370: PUSH
61371: LD_INT 103
61373: PUSH
61374: LD_INT 104
61376: PUSH
61377: LD_INT 105
61379: PUSH
61380: LD_INT 106
61382: PUSH
61383: LD_INT 107
61385: PUSH
61386: LD_INT 108
61388: PUSH
61389: LD_INT 109
61391: PUSH
61392: LD_INT 110
61394: PUSH
61395: LD_INT 111
61397: PUSH
61398: LD_INT 112
61400: PUSH
61401: LD_INT 114
61403: PUSH
61404: LD_INT 116
61406: PUSH
61407: LD_INT 117
61409: PUSH
61410: LD_INT 118
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: ST_TO_ADDR
61435: GO 63330
61437: LD_INT 11
61439: DOUBLE
61440: EQUAL
61441: IFTRUE 61445
61443: GO 61649
61445: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61446: LD_ADDR_VAR 0 2
61450: PUSH
61451: LD_INT 2
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: LD_INT 4
61459: PUSH
61460: LD_INT 5
61462: PUSH
61463: LD_INT 6
61465: PUSH
61466: LD_INT 7
61468: PUSH
61469: LD_INT 8
61471: PUSH
61472: LD_INT 9
61474: PUSH
61475: LD_INT 10
61477: PUSH
61478: LD_INT 11
61480: PUSH
61481: LD_INT 12
61483: PUSH
61484: LD_INT 13
61486: PUSH
61487: LD_INT 14
61489: PUSH
61490: LD_INT 15
61492: PUSH
61493: LD_INT 16
61495: PUSH
61496: LD_INT 17
61498: PUSH
61499: LD_INT 18
61501: PUSH
61502: LD_INT 19
61504: PUSH
61505: LD_INT 20
61507: PUSH
61508: LD_INT 21
61510: PUSH
61511: LD_INT 22
61513: PUSH
61514: LD_INT 23
61516: PUSH
61517: LD_INT 24
61519: PUSH
61520: LD_INT 25
61522: PUSH
61523: LD_INT 26
61525: PUSH
61526: LD_INT 28
61528: PUSH
61529: LD_INT 30
61531: PUSH
61532: LD_INT 31
61534: PUSH
61535: LD_INT 32
61537: PUSH
61538: LD_INT 34
61540: PUSH
61541: LD_INT 36
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 101
61579: PUSH
61580: LD_INT 102
61582: PUSH
61583: LD_INT 103
61585: PUSH
61586: LD_INT 104
61588: PUSH
61589: LD_INT 105
61591: PUSH
61592: LD_INT 106
61594: PUSH
61595: LD_INT 107
61597: PUSH
61598: LD_INT 108
61600: PUSH
61601: LD_INT 109
61603: PUSH
61604: LD_INT 110
61606: PUSH
61607: LD_INT 111
61609: PUSH
61610: LD_INT 112
61612: PUSH
61613: LD_INT 114
61615: PUSH
61616: LD_INT 116
61618: PUSH
61619: LD_INT 117
61621: PUSH
61622: LD_INT 118
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: ST_TO_ADDR
61647: GO 63330
61649: LD_INT 12
61651: DOUBLE
61652: EQUAL
61653: IFTRUE 61657
61655: GO 61877
61657: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61658: LD_ADDR_VAR 0 2
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: LD_INT 4
61674: PUSH
61675: LD_INT 5
61677: PUSH
61678: LD_INT 6
61680: PUSH
61681: LD_INT 7
61683: PUSH
61684: LD_INT 8
61686: PUSH
61687: LD_INT 9
61689: PUSH
61690: LD_INT 10
61692: PUSH
61693: LD_INT 11
61695: PUSH
61696: LD_INT 12
61698: PUSH
61699: LD_INT 13
61701: PUSH
61702: LD_INT 14
61704: PUSH
61705: LD_INT 15
61707: PUSH
61708: LD_INT 16
61710: PUSH
61711: LD_INT 17
61713: PUSH
61714: LD_INT 18
61716: PUSH
61717: LD_INT 19
61719: PUSH
61720: LD_INT 20
61722: PUSH
61723: LD_INT 21
61725: PUSH
61726: LD_INT 22
61728: PUSH
61729: LD_INT 23
61731: PUSH
61732: LD_INT 24
61734: PUSH
61735: LD_INT 25
61737: PUSH
61738: LD_INT 26
61740: PUSH
61741: LD_INT 27
61743: PUSH
61744: LD_INT 28
61746: PUSH
61747: LD_INT 30
61749: PUSH
61750: LD_INT 31
61752: PUSH
61753: LD_INT 32
61755: PUSH
61756: LD_INT 33
61758: PUSH
61759: LD_INT 34
61761: PUSH
61762: LD_INT 36
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 101
61803: PUSH
61804: LD_INT 102
61806: PUSH
61807: LD_INT 103
61809: PUSH
61810: LD_INT 104
61812: PUSH
61813: LD_INT 105
61815: PUSH
61816: LD_INT 106
61818: PUSH
61819: LD_INT 107
61821: PUSH
61822: LD_INT 108
61824: PUSH
61825: LD_INT 109
61827: PUSH
61828: LD_INT 110
61830: PUSH
61831: LD_INT 111
61833: PUSH
61834: LD_INT 112
61836: PUSH
61837: LD_INT 113
61839: PUSH
61840: LD_INT 114
61842: PUSH
61843: LD_INT 116
61845: PUSH
61846: LD_INT 117
61848: PUSH
61849: LD_INT 118
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: ST_TO_ADDR
61875: GO 63330
61877: LD_INT 13
61879: DOUBLE
61880: EQUAL
61881: IFTRUE 61885
61883: GO 62093
61885: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61886: LD_ADDR_VAR 0 2
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 2
61896: PUSH
61897: LD_INT 3
61899: PUSH
61900: LD_INT 4
61902: PUSH
61903: LD_INT 5
61905: PUSH
61906: LD_INT 8
61908: PUSH
61909: LD_INT 9
61911: PUSH
61912: LD_INT 10
61914: PUSH
61915: LD_INT 11
61917: PUSH
61918: LD_INT 12
61920: PUSH
61921: LD_INT 14
61923: PUSH
61924: LD_INT 15
61926: PUSH
61927: LD_INT 16
61929: PUSH
61930: LD_INT 17
61932: PUSH
61933: LD_INT 18
61935: PUSH
61936: LD_INT 19
61938: PUSH
61939: LD_INT 20
61941: PUSH
61942: LD_INT 21
61944: PUSH
61945: LD_INT 22
61947: PUSH
61948: LD_INT 23
61950: PUSH
61951: LD_INT 24
61953: PUSH
61954: LD_INT 25
61956: PUSH
61957: LD_INT 26
61959: PUSH
61960: LD_INT 27
61962: PUSH
61963: LD_INT 28
61965: PUSH
61966: LD_INT 30
61968: PUSH
61969: LD_INT 31
61971: PUSH
61972: LD_INT 32
61974: PUSH
61975: LD_INT 33
61977: PUSH
61978: LD_INT 34
61980: PUSH
61981: LD_INT 36
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 101
62019: PUSH
62020: LD_INT 102
62022: PUSH
62023: LD_INT 103
62025: PUSH
62026: LD_INT 104
62028: PUSH
62029: LD_INT 105
62031: PUSH
62032: LD_INT 106
62034: PUSH
62035: LD_INT 107
62037: PUSH
62038: LD_INT 108
62040: PUSH
62041: LD_INT 109
62043: PUSH
62044: LD_INT 110
62046: PUSH
62047: LD_INT 111
62049: PUSH
62050: LD_INT 112
62052: PUSH
62053: LD_INT 113
62055: PUSH
62056: LD_INT 114
62058: PUSH
62059: LD_INT 116
62061: PUSH
62062: LD_INT 117
62064: PUSH
62065: LD_INT 118
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: ST_TO_ADDR
62091: GO 63330
62093: LD_INT 14
62095: DOUBLE
62096: EQUAL
62097: IFTRUE 62101
62099: GO 62325
62101: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
62102: LD_ADDR_VAR 0 2
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: LD_INT 3
62115: PUSH
62116: LD_INT 4
62118: PUSH
62119: LD_INT 5
62121: PUSH
62122: LD_INT 6
62124: PUSH
62125: LD_INT 7
62127: PUSH
62128: LD_INT 8
62130: PUSH
62131: LD_INT 9
62133: PUSH
62134: LD_INT 10
62136: PUSH
62137: LD_INT 11
62139: PUSH
62140: LD_INT 12
62142: PUSH
62143: LD_INT 13
62145: PUSH
62146: LD_INT 14
62148: PUSH
62149: LD_INT 15
62151: PUSH
62152: LD_INT 16
62154: PUSH
62155: LD_INT 17
62157: PUSH
62158: LD_INT 18
62160: PUSH
62161: LD_INT 19
62163: PUSH
62164: LD_INT 20
62166: PUSH
62167: LD_INT 21
62169: PUSH
62170: LD_INT 22
62172: PUSH
62173: LD_INT 23
62175: PUSH
62176: LD_INT 24
62178: PUSH
62179: LD_INT 25
62181: PUSH
62182: LD_INT 26
62184: PUSH
62185: LD_INT 27
62187: PUSH
62188: LD_INT 28
62190: PUSH
62191: LD_INT 29
62193: PUSH
62194: LD_INT 30
62196: PUSH
62197: LD_INT 31
62199: PUSH
62200: LD_INT 32
62202: PUSH
62203: LD_INT 33
62205: PUSH
62206: LD_INT 34
62208: PUSH
62209: LD_INT 36
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 101
62251: PUSH
62252: LD_INT 102
62254: PUSH
62255: LD_INT 103
62257: PUSH
62258: LD_INT 104
62260: PUSH
62261: LD_INT 105
62263: PUSH
62264: LD_INT 106
62266: PUSH
62267: LD_INT 107
62269: PUSH
62270: LD_INT 108
62272: PUSH
62273: LD_INT 109
62275: PUSH
62276: LD_INT 110
62278: PUSH
62279: LD_INT 111
62281: PUSH
62282: LD_INT 112
62284: PUSH
62285: LD_INT 113
62287: PUSH
62288: LD_INT 114
62290: PUSH
62291: LD_INT 116
62293: PUSH
62294: LD_INT 117
62296: PUSH
62297: LD_INT 118
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: ST_TO_ADDR
62323: GO 63330
62325: LD_INT 15
62327: DOUBLE
62328: EQUAL
62329: IFTRUE 62333
62331: GO 62557
62333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
62334: LD_ADDR_VAR 0 2
62338: PUSH
62339: LD_INT 1
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: LD_INT 3
62347: PUSH
62348: LD_INT 4
62350: PUSH
62351: LD_INT 5
62353: PUSH
62354: LD_INT 6
62356: PUSH
62357: LD_INT 7
62359: PUSH
62360: LD_INT 8
62362: PUSH
62363: LD_INT 9
62365: PUSH
62366: LD_INT 10
62368: PUSH
62369: LD_INT 11
62371: PUSH
62372: LD_INT 12
62374: PUSH
62375: LD_INT 13
62377: PUSH
62378: LD_INT 14
62380: PUSH
62381: LD_INT 15
62383: PUSH
62384: LD_INT 16
62386: PUSH
62387: LD_INT 17
62389: PUSH
62390: LD_INT 18
62392: PUSH
62393: LD_INT 19
62395: PUSH
62396: LD_INT 20
62398: PUSH
62399: LD_INT 21
62401: PUSH
62402: LD_INT 22
62404: PUSH
62405: LD_INT 23
62407: PUSH
62408: LD_INT 24
62410: PUSH
62411: LD_INT 25
62413: PUSH
62414: LD_INT 26
62416: PUSH
62417: LD_INT 27
62419: PUSH
62420: LD_INT 28
62422: PUSH
62423: LD_INT 29
62425: PUSH
62426: LD_INT 30
62428: PUSH
62429: LD_INT 31
62431: PUSH
62432: LD_INT 32
62434: PUSH
62435: LD_INT 33
62437: PUSH
62438: LD_INT 34
62440: PUSH
62441: LD_INT 36
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 101
62483: PUSH
62484: LD_INT 102
62486: PUSH
62487: LD_INT 103
62489: PUSH
62490: LD_INT 104
62492: PUSH
62493: LD_INT 105
62495: PUSH
62496: LD_INT 106
62498: PUSH
62499: LD_INT 107
62501: PUSH
62502: LD_INT 108
62504: PUSH
62505: LD_INT 109
62507: PUSH
62508: LD_INT 110
62510: PUSH
62511: LD_INT 111
62513: PUSH
62514: LD_INT 112
62516: PUSH
62517: LD_INT 113
62519: PUSH
62520: LD_INT 114
62522: PUSH
62523: LD_INT 116
62525: PUSH
62526: LD_INT 117
62528: PUSH
62529: LD_INT 118
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: ST_TO_ADDR
62555: GO 63330
62557: LD_INT 16
62559: DOUBLE
62560: EQUAL
62561: IFTRUE 62565
62563: GO 62701
62565: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62566: LD_ADDR_VAR 0 2
62570: PUSH
62571: LD_INT 2
62573: PUSH
62574: LD_INT 4
62576: PUSH
62577: LD_INT 5
62579: PUSH
62580: LD_INT 7
62582: PUSH
62583: LD_INT 11
62585: PUSH
62586: LD_INT 12
62588: PUSH
62589: LD_INT 15
62591: PUSH
62592: LD_INT 16
62594: PUSH
62595: LD_INT 20
62597: PUSH
62598: LD_INT 21
62600: PUSH
62601: LD_INT 22
62603: PUSH
62604: LD_INT 23
62606: PUSH
62607: LD_INT 25
62609: PUSH
62610: LD_INT 26
62612: PUSH
62613: LD_INT 30
62615: PUSH
62616: LD_INT 31
62618: PUSH
62619: LD_INT 32
62621: PUSH
62622: LD_INT 33
62624: PUSH
62625: LD_INT 34
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 101
62651: PUSH
62652: LD_INT 102
62654: PUSH
62655: LD_INT 103
62657: PUSH
62658: LD_INT 106
62660: PUSH
62661: LD_INT 108
62663: PUSH
62664: LD_INT 112
62666: PUSH
62667: LD_INT 113
62669: PUSH
62670: LD_INT 114
62672: PUSH
62673: LD_INT 116
62675: PUSH
62676: LD_INT 117
62678: PUSH
62679: LD_INT 118
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: ST_TO_ADDR
62699: GO 63330
62701: LD_INT 17
62703: DOUBLE
62704: EQUAL
62705: IFTRUE 62709
62707: GO 62933
62709: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62710: LD_ADDR_VAR 0 2
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: LD_INT 2
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: LD_INT 4
62726: PUSH
62727: LD_INT 5
62729: PUSH
62730: LD_INT 6
62732: PUSH
62733: LD_INT 7
62735: PUSH
62736: LD_INT 8
62738: PUSH
62739: LD_INT 9
62741: PUSH
62742: LD_INT 10
62744: PUSH
62745: LD_INT 11
62747: PUSH
62748: LD_INT 12
62750: PUSH
62751: LD_INT 13
62753: PUSH
62754: LD_INT 14
62756: PUSH
62757: LD_INT 15
62759: PUSH
62760: LD_INT 16
62762: PUSH
62763: LD_INT 17
62765: PUSH
62766: LD_INT 18
62768: PUSH
62769: LD_INT 19
62771: PUSH
62772: LD_INT 20
62774: PUSH
62775: LD_INT 21
62777: PUSH
62778: LD_INT 22
62780: PUSH
62781: LD_INT 23
62783: PUSH
62784: LD_INT 24
62786: PUSH
62787: LD_INT 25
62789: PUSH
62790: LD_INT 26
62792: PUSH
62793: LD_INT 27
62795: PUSH
62796: LD_INT 28
62798: PUSH
62799: LD_INT 29
62801: PUSH
62802: LD_INT 30
62804: PUSH
62805: LD_INT 31
62807: PUSH
62808: LD_INT 32
62810: PUSH
62811: LD_INT 33
62813: PUSH
62814: LD_INT 34
62816: PUSH
62817: LD_INT 36
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 101
62859: PUSH
62860: LD_INT 102
62862: PUSH
62863: LD_INT 103
62865: PUSH
62866: LD_INT 104
62868: PUSH
62869: LD_INT 105
62871: PUSH
62872: LD_INT 106
62874: PUSH
62875: LD_INT 107
62877: PUSH
62878: LD_INT 108
62880: PUSH
62881: LD_INT 109
62883: PUSH
62884: LD_INT 110
62886: PUSH
62887: LD_INT 111
62889: PUSH
62890: LD_INT 112
62892: PUSH
62893: LD_INT 113
62895: PUSH
62896: LD_INT 114
62898: PUSH
62899: LD_INT 116
62901: PUSH
62902: LD_INT 117
62904: PUSH
62905: LD_INT 118
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: ST_TO_ADDR
62931: GO 63330
62933: LD_INT 18
62935: DOUBLE
62936: EQUAL
62937: IFTRUE 62941
62939: GO 63089
62941: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62942: LD_ADDR_VAR 0 2
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: LD_INT 4
62952: PUSH
62953: LD_INT 5
62955: PUSH
62956: LD_INT 7
62958: PUSH
62959: LD_INT 11
62961: PUSH
62962: LD_INT 12
62964: PUSH
62965: LD_INT 15
62967: PUSH
62968: LD_INT 16
62970: PUSH
62971: LD_INT 20
62973: PUSH
62974: LD_INT 21
62976: PUSH
62977: LD_INT 22
62979: PUSH
62980: LD_INT 23
62982: PUSH
62983: LD_INT 25
62985: PUSH
62986: LD_INT 26
62988: PUSH
62989: LD_INT 30
62991: PUSH
62992: LD_INT 31
62994: PUSH
62995: LD_INT 32
62997: PUSH
62998: LD_INT 33
63000: PUSH
63001: LD_INT 34
63003: PUSH
63004: LD_INT 35
63006: PUSH
63007: LD_INT 36
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 101
63035: PUSH
63036: LD_INT 102
63038: PUSH
63039: LD_INT 103
63041: PUSH
63042: LD_INT 106
63044: PUSH
63045: LD_INT 108
63047: PUSH
63048: LD_INT 112
63050: PUSH
63051: LD_INT 113
63053: PUSH
63054: LD_INT 114
63056: PUSH
63057: LD_INT 115
63059: PUSH
63060: LD_INT 116
63062: PUSH
63063: LD_INT 117
63065: PUSH
63066: LD_INT 118
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: ST_TO_ADDR
63087: GO 63330
63089: LD_INT 19
63091: DOUBLE
63092: EQUAL
63093: IFTRUE 63097
63095: GO 63329
63097: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
63098: LD_ADDR_VAR 0 2
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: LD_INT 4
63114: PUSH
63115: LD_INT 5
63117: PUSH
63118: LD_INT 6
63120: PUSH
63121: LD_INT 7
63123: PUSH
63124: LD_INT 8
63126: PUSH
63127: LD_INT 9
63129: PUSH
63130: LD_INT 10
63132: PUSH
63133: LD_INT 11
63135: PUSH
63136: LD_INT 12
63138: PUSH
63139: LD_INT 13
63141: PUSH
63142: LD_INT 14
63144: PUSH
63145: LD_INT 15
63147: PUSH
63148: LD_INT 16
63150: PUSH
63151: LD_INT 17
63153: PUSH
63154: LD_INT 18
63156: PUSH
63157: LD_INT 19
63159: PUSH
63160: LD_INT 20
63162: PUSH
63163: LD_INT 21
63165: PUSH
63166: LD_INT 22
63168: PUSH
63169: LD_INT 23
63171: PUSH
63172: LD_INT 24
63174: PUSH
63175: LD_INT 25
63177: PUSH
63178: LD_INT 26
63180: PUSH
63181: LD_INT 27
63183: PUSH
63184: LD_INT 28
63186: PUSH
63187: LD_INT 29
63189: PUSH
63190: LD_INT 30
63192: PUSH
63193: LD_INT 31
63195: PUSH
63196: LD_INT 32
63198: PUSH
63199: LD_INT 33
63201: PUSH
63202: LD_INT 34
63204: PUSH
63205: LD_INT 35
63207: PUSH
63208: LD_INT 36
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 101
63251: PUSH
63252: LD_INT 102
63254: PUSH
63255: LD_INT 103
63257: PUSH
63258: LD_INT 104
63260: PUSH
63261: LD_INT 105
63263: PUSH
63264: LD_INT 106
63266: PUSH
63267: LD_INT 107
63269: PUSH
63270: LD_INT 108
63272: PUSH
63273: LD_INT 109
63275: PUSH
63276: LD_INT 110
63278: PUSH
63279: LD_INT 111
63281: PUSH
63282: LD_INT 112
63284: PUSH
63285: LD_INT 113
63287: PUSH
63288: LD_INT 114
63290: PUSH
63291: LD_INT 115
63293: PUSH
63294: LD_INT 116
63296: PUSH
63297: LD_INT 117
63299: PUSH
63300: LD_INT 118
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: ST_TO_ADDR
63327: GO 63330
63329: POP
// end else
63330: GO 63561
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
63332: LD_ADDR_VAR 0 2
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: LD_INT 2
63342: PUSH
63343: LD_INT 3
63345: PUSH
63346: LD_INT 4
63348: PUSH
63349: LD_INT 5
63351: PUSH
63352: LD_INT 6
63354: PUSH
63355: LD_INT 7
63357: PUSH
63358: LD_INT 8
63360: PUSH
63361: LD_INT 9
63363: PUSH
63364: LD_INT 10
63366: PUSH
63367: LD_INT 11
63369: PUSH
63370: LD_INT 12
63372: PUSH
63373: LD_INT 13
63375: PUSH
63376: LD_INT 14
63378: PUSH
63379: LD_INT 15
63381: PUSH
63382: LD_INT 16
63384: PUSH
63385: LD_INT 17
63387: PUSH
63388: LD_INT 18
63390: PUSH
63391: LD_INT 19
63393: PUSH
63394: LD_INT 20
63396: PUSH
63397: LD_INT 21
63399: PUSH
63400: LD_INT 22
63402: PUSH
63403: LD_INT 23
63405: PUSH
63406: LD_INT 24
63408: PUSH
63409: LD_INT 25
63411: PUSH
63412: LD_INT 26
63414: PUSH
63415: LD_INT 27
63417: PUSH
63418: LD_INT 28
63420: PUSH
63421: LD_INT 29
63423: PUSH
63424: LD_INT 30
63426: PUSH
63427: LD_INT 31
63429: PUSH
63430: LD_INT 32
63432: PUSH
63433: LD_INT 33
63435: PUSH
63436: LD_INT 34
63438: PUSH
63439: LD_INT 35
63441: PUSH
63442: LD_INT 36
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 101
63485: PUSH
63486: LD_INT 102
63488: PUSH
63489: LD_INT 103
63491: PUSH
63492: LD_INT 104
63494: PUSH
63495: LD_INT 105
63497: PUSH
63498: LD_INT 106
63500: PUSH
63501: LD_INT 107
63503: PUSH
63504: LD_INT 108
63506: PUSH
63507: LD_INT 109
63509: PUSH
63510: LD_INT 110
63512: PUSH
63513: LD_INT 111
63515: PUSH
63516: LD_INT 112
63518: PUSH
63519: LD_INT 113
63521: PUSH
63522: LD_INT 114
63524: PUSH
63525: LD_INT 115
63527: PUSH
63528: LD_INT 116
63530: PUSH
63531: LD_INT 117
63533: PUSH
63534: LD_INT 118
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: ST_TO_ADDR
// if result then
63561: LD_VAR 0 2
63565: IFFALSE 64351
// begin normal :=  ;
63567: LD_ADDR_VAR 0 5
63571: PUSH
63572: LD_STRING 
63574: ST_TO_ADDR
// hardcore :=  ;
63575: LD_ADDR_VAR 0 6
63579: PUSH
63580: LD_STRING 
63582: ST_TO_ADDR
// active :=  ;
63583: LD_ADDR_VAR 0 7
63587: PUSH
63588: LD_STRING 
63590: ST_TO_ADDR
// for i = 1 to normalCounter do
63591: LD_ADDR_VAR 0 8
63595: PUSH
63596: DOUBLE
63597: LD_INT 1
63599: DEC
63600: ST_TO_ADDR
63601: LD_EXP 51
63605: PUSH
63606: FOR_TO
63607: IFFALSE 63708
// begin tmp := 0 ;
63609: LD_ADDR_VAR 0 3
63613: PUSH
63614: LD_STRING 0
63616: ST_TO_ADDR
// if result [ 1 ] then
63617: LD_VAR 0 2
63621: PUSH
63622: LD_INT 1
63624: ARRAY
63625: IFFALSE 63690
// if result [ 1 ] [ 1 ] = i then
63627: LD_VAR 0 2
63631: PUSH
63632: LD_INT 1
63634: ARRAY
63635: PUSH
63636: LD_INT 1
63638: ARRAY
63639: PUSH
63640: LD_VAR 0 8
63644: EQUAL
63645: IFFALSE 63690
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63647: LD_ADDR_VAR 0 2
63651: PUSH
63652: LD_VAR 0 2
63656: PPUSH
63657: LD_INT 1
63659: PPUSH
63660: LD_VAR 0 2
63664: PUSH
63665: LD_INT 1
63667: ARRAY
63668: PPUSH
63669: LD_INT 1
63671: PPUSH
63672: CALL_OW 3
63676: PPUSH
63677: CALL_OW 1
63681: ST_TO_ADDR
// tmp := 1 ;
63682: LD_ADDR_VAR 0 3
63686: PUSH
63687: LD_STRING 1
63689: ST_TO_ADDR
// end ; normal := normal & tmp ;
63690: LD_ADDR_VAR 0 5
63694: PUSH
63695: LD_VAR 0 5
63699: PUSH
63700: LD_VAR 0 3
63704: STR
63705: ST_TO_ADDR
// end ;
63706: GO 63606
63708: POP
63709: POP
// for i = 1 to hardcoreCounter do
63710: LD_ADDR_VAR 0 8
63714: PUSH
63715: DOUBLE
63716: LD_INT 1
63718: DEC
63719: ST_TO_ADDR
63720: LD_EXP 52
63724: PUSH
63725: FOR_TO
63726: IFFALSE 63831
// begin tmp := 0 ;
63728: LD_ADDR_VAR 0 3
63732: PUSH
63733: LD_STRING 0
63735: ST_TO_ADDR
// if result [ 2 ] then
63736: LD_VAR 0 2
63740: PUSH
63741: LD_INT 2
63743: ARRAY
63744: IFFALSE 63813
// if result [ 2 ] [ 1 ] = 100 + i then
63746: LD_VAR 0 2
63750: PUSH
63751: LD_INT 2
63753: ARRAY
63754: PUSH
63755: LD_INT 1
63757: ARRAY
63758: PUSH
63759: LD_INT 100
63761: PUSH
63762: LD_VAR 0 8
63766: PLUS
63767: EQUAL
63768: IFFALSE 63813
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63770: LD_ADDR_VAR 0 2
63774: PUSH
63775: LD_VAR 0 2
63779: PPUSH
63780: LD_INT 2
63782: PPUSH
63783: LD_VAR 0 2
63787: PUSH
63788: LD_INT 2
63790: ARRAY
63791: PPUSH
63792: LD_INT 1
63794: PPUSH
63795: CALL_OW 3
63799: PPUSH
63800: CALL_OW 1
63804: ST_TO_ADDR
// tmp := 1 ;
63805: LD_ADDR_VAR 0 3
63809: PUSH
63810: LD_STRING 1
63812: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63813: LD_ADDR_VAR 0 6
63817: PUSH
63818: LD_VAR 0 6
63822: PUSH
63823: LD_VAR 0 3
63827: STR
63828: ST_TO_ADDR
// end ;
63829: GO 63725
63831: POP
63832: POP
// if isGameLoad then
63833: LD_VAR 0 1
63837: IFFALSE 64312
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63839: LD_ADDR_VAR 0 4
63843: PUSH
63844: LD_EXP 55
63848: PUSH
63849: LD_EXP 54
63853: PUSH
63854: LD_EXP 56
63858: PUSH
63859: LD_EXP 53
63863: PUSH
63864: LD_EXP 57
63868: PUSH
63869: LD_EXP 58
63873: PUSH
63874: LD_EXP 59
63878: PUSH
63879: LD_EXP 60
63883: PUSH
63884: LD_EXP 61
63888: PUSH
63889: LD_EXP 62
63893: PUSH
63894: LD_EXP 63
63898: PUSH
63899: LD_EXP 64
63903: PUSH
63904: LD_EXP 65
63908: PUSH
63909: LD_EXP 66
63913: PUSH
63914: LD_EXP 74
63918: PUSH
63919: LD_EXP 75
63923: PUSH
63924: LD_EXP 76
63928: PUSH
63929: LD_EXP 77
63933: PUSH
63934: LD_EXP 79
63938: PUSH
63939: LD_EXP 80
63943: PUSH
63944: LD_EXP 81
63948: PUSH
63949: LD_EXP 84
63953: PUSH
63954: LD_EXP 86
63958: PUSH
63959: LD_EXP 87
63963: PUSH
63964: LD_EXP 88
63968: PUSH
63969: LD_EXP 90
63973: PUSH
63974: LD_EXP 91
63978: PUSH
63979: LD_EXP 94
63983: PUSH
63984: LD_EXP 95
63988: PUSH
63989: LD_EXP 96
63993: PUSH
63994: LD_EXP 97
63998: PUSH
63999: LD_EXP 98
64003: PUSH
64004: LD_EXP 99
64008: PUSH
64009: LD_EXP 100
64013: PUSH
64014: LD_EXP 101
64018: PUSH
64019: LD_EXP 102
64023: PUSH
64024: LD_EXP 67
64028: PUSH
64029: LD_EXP 68
64033: PUSH
64034: LD_EXP 71
64038: PUSH
64039: LD_EXP 72
64043: PUSH
64044: LD_EXP 73
64048: PUSH
64049: LD_EXP 69
64053: PUSH
64054: LD_EXP 70
64058: PUSH
64059: LD_EXP 78
64063: PUSH
64064: LD_EXP 82
64068: PUSH
64069: LD_EXP 83
64073: PUSH
64074: LD_EXP 85
64078: PUSH
64079: LD_EXP 89
64083: PUSH
64084: LD_EXP 92
64088: PUSH
64089: LD_EXP 93
64093: PUSH
64094: LD_EXP 103
64098: PUSH
64099: LD_EXP 104
64103: PUSH
64104: LD_EXP 105
64108: PUSH
64109: LD_EXP 106
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: ST_TO_ADDR
// tmp :=  ;
64170: LD_ADDR_VAR 0 3
64174: PUSH
64175: LD_STRING 
64177: ST_TO_ADDR
// for i = 1 to normalCounter do
64178: LD_ADDR_VAR 0 8
64182: PUSH
64183: DOUBLE
64184: LD_INT 1
64186: DEC
64187: ST_TO_ADDR
64188: LD_EXP 51
64192: PUSH
64193: FOR_TO
64194: IFFALSE 64230
// begin if flags [ i ] then
64196: LD_VAR 0 4
64200: PUSH
64201: LD_VAR 0 8
64205: ARRAY
64206: IFFALSE 64228
// tmp := tmp & i & ; ;
64208: LD_ADDR_VAR 0 3
64212: PUSH
64213: LD_VAR 0 3
64217: PUSH
64218: LD_VAR 0 8
64222: STR
64223: PUSH
64224: LD_STRING ;
64226: STR
64227: ST_TO_ADDR
// end ;
64228: GO 64193
64230: POP
64231: POP
// for i = 1 to hardcoreCounter do
64232: LD_ADDR_VAR 0 8
64236: PUSH
64237: DOUBLE
64238: LD_INT 1
64240: DEC
64241: ST_TO_ADDR
64242: LD_EXP 52
64246: PUSH
64247: FOR_TO
64248: IFFALSE 64294
// begin if flags [ normalCounter + i ] then
64250: LD_VAR 0 4
64254: PUSH
64255: LD_EXP 51
64259: PUSH
64260: LD_VAR 0 8
64264: PLUS
64265: ARRAY
64266: IFFALSE 64292
// tmp := tmp & ( 100 + i ) & ; ;
64268: LD_ADDR_VAR 0 3
64272: PUSH
64273: LD_VAR 0 3
64277: PUSH
64278: LD_INT 100
64280: PUSH
64281: LD_VAR 0 8
64285: PLUS
64286: STR
64287: PUSH
64288: LD_STRING ;
64290: STR
64291: ST_TO_ADDR
// end ;
64292: GO 64247
64294: POP
64295: POP
// if tmp then
64296: LD_VAR 0 3
64300: IFFALSE 64312
// active := tmp ;
64302: LD_ADDR_VAR 0 7
64306: PUSH
64307: LD_VAR 0 3
64311: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
64312: LD_STRING getStreamItemsFromMission("
64314: PUSH
64315: LD_VAR 0 5
64319: STR
64320: PUSH
64321: LD_STRING ","
64323: STR
64324: PUSH
64325: LD_VAR 0 6
64329: STR
64330: PUSH
64331: LD_STRING ","
64333: STR
64334: PUSH
64335: LD_VAR 0 7
64339: STR
64340: PUSH
64341: LD_STRING ")
64343: STR
64344: PPUSH
64345: CALL_OW 559
// end else
64349: GO 64358
// ToLua ( getStreamItemsFromMission("","","") ) ;
64351: LD_STRING getStreamItemsFromMission("","","")
64353: PPUSH
64354: CALL_OW 559
// end ;
64358: LD_VAR 0 2
64362: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64363: LD_EXP 50
64367: PUSH
64368: LD_EXP 55
64372: AND
64373: IFFALSE 64497
64375: GO 64377
64377: DISABLE
64378: LD_INT 0
64380: PPUSH
64381: PPUSH
// begin enable ;
64382: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64383: LD_ADDR_VAR 0 2
64387: PUSH
64388: LD_INT 22
64390: PUSH
64391: LD_OWVAR 2
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 2
64402: PUSH
64403: LD_INT 34
64405: PUSH
64406: LD_INT 7
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 34
64415: PUSH
64416: LD_INT 45
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 34
64425: PUSH
64426: LD_INT 28
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 34
64435: PUSH
64436: LD_INT 47
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PPUSH
64454: CALL_OW 69
64458: ST_TO_ADDR
// if not tmp then
64459: LD_VAR 0 2
64463: NOT
64464: IFFALSE 64468
// exit ;
64466: GO 64497
// for i in tmp do
64468: LD_ADDR_VAR 0 1
64472: PUSH
64473: LD_VAR 0 2
64477: PUSH
64478: FOR_IN
64479: IFFALSE 64495
// begin SetLives ( i , 0 ) ;
64481: LD_VAR 0 1
64485: PPUSH
64486: LD_INT 0
64488: PPUSH
64489: CALL_OW 234
// end ;
64493: GO 64478
64495: POP
64496: POP
// end ;
64497: PPOPN 2
64499: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64500: LD_EXP 50
64504: PUSH
64505: LD_EXP 56
64509: AND
64510: IFFALSE 64594
64512: GO 64514
64514: DISABLE
64515: LD_INT 0
64517: PPUSH
64518: PPUSH
// begin enable ;
64519: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64520: LD_ADDR_VAR 0 2
64524: PUSH
64525: LD_INT 22
64527: PUSH
64528: LD_OWVAR 2
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 32
64539: PUSH
64540: LD_INT 3
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PPUSH
64551: CALL_OW 69
64555: ST_TO_ADDR
// if not tmp then
64556: LD_VAR 0 2
64560: NOT
64561: IFFALSE 64565
// exit ;
64563: GO 64594
// for i in tmp do
64565: LD_ADDR_VAR 0 1
64569: PUSH
64570: LD_VAR 0 2
64574: PUSH
64575: FOR_IN
64576: IFFALSE 64592
// begin SetLives ( i , 0 ) ;
64578: LD_VAR 0 1
64582: PPUSH
64583: LD_INT 0
64585: PPUSH
64586: CALL_OW 234
// end ;
64590: GO 64575
64592: POP
64593: POP
// end ;
64594: PPOPN 2
64596: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64597: LD_EXP 50
64601: PUSH
64602: LD_EXP 53
64606: AND
64607: IFFALSE 64700
64609: GO 64611
64611: DISABLE
64612: LD_INT 0
64614: PPUSH
// begin enable ;
64615: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64616: LD_ADDR_VAR 0 1
64620: PUSH
64621: LD_INT 22
64623: PUSH
64624: LD_OWVAR 2
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: LD_INT 25
64638: PUSH
64639: LD_INT 5
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 25
64648: PUSH
64649: LD_INT 9
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 25
64658: PUSH
64659: LD_INT 8
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PPUSH
64676: CALL_OW 69
64680: PUSH
64681: FOR_IN
64682: IFFALSE 64698
// begin SetClass ( i , 1 ) ;
64684: LD_VAR 0 1
64688: PPUSH
64689: LD_INT 1
64691: PPUSH
64692: CALL_OW 336
// end ;
64696: GO 64681
64698: POP
64699: POP
// end ;
64700: PPOPN 1
64702: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64703: LD_EXP 50
64707: PUSH
64708: LD_EXP 54
64712: AND
64713: PUSH
64714: LD_OWVAR 65
64718: PUSH
64719: LD_INT 7
64721: LESS
64722: AND
64723: IFFALSE 64737
64725: GO 64727
64727: DISABLE
// begin enable ;
64728: ENABLE
// game_speed := 7 ;
64729: LD_ADDR_OWVAR 65
64733: PUSH
64734: LD_INT 7
64736: ST_TO_ADDR
// end ;
64737: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64738: LD_EXP 50
64742: PUSH
64743: LD_EXP 57
64747: AND
64748: IFFALSE 64950
64750: GO 64752
64752: DISABLE
64753: LD_INT 0
64755: PPUSH
64756: PPUSH
64757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64758: LD_ADDR_VAR 0 3
64762: PUSH
64763: LD_INT 81
64765: PUSH
64766: LD_OWVAR 2
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 21
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PPUSH
64789: CALL_OW 69
64793: ST_TO_ADDR
// if not tmp then
64794: LD_VAR 0 3
64798: NOT
64799: IFFALSE 64803
// exit ;
64801: GO 64950
// if tmp > 5 then
64803: LD_VAR 0 3
64807: PUSH
64808: LD_INT 5
64810: GREATER
64811: IFFALSE 64823
// k := 5 else
64813: LD_ADDR_VAR 0 2
64817: PUSH
64818: LD_INT 5
64820: ST_TO_ADDR
64821: GO 64833
// k := tmp ;
64823: LD_ADDR_VAR 0 2
64827: PUSH
64828: LD_VAR 0 3
64832: ST_TO_ADDR
// for i := 1 to k do
64833: LD_ADDR_VAR 0 1
64837: PUSH
64838: DOUBLE
64839: LD_INT 1
64841: DEC
64842: ST_TO_ADDR
64843: LD_VAR 0 2
64847: PUSH
64848: FOR_TO
64849: IFFALSE 64948
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64851: LD_VAR 0 3
64855: PUSH
64856: LD_VAR 0 1
64860: ARRAY
64861: PPUSH
64862: LD_VAR 0 1
64866: PUSH
64867: LD_INT 4
64869: MOD
64870: PUSH
64871: LD_INT 1
64873: PLUS
64874: PPUSH
64875: CALL_OW 259
64879: PUSH
64880: LD_INT 10
64882: LESS
64883: IFFALSE 64946
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64885: LD_VAR 0 3
64889: PUSH
64890: LD_VAR 0 1
64894: ARRAY
64895: PPUSH
64896: LD_VAR 0 1
64900: PUSH
64901: LD_INT 4
64903: MOD
64904: PUSH
64905: LD_INT 1
64907: PLUS
64908: PPUSH
64909: LD_VAR 0 3
64913: PUSH
64914: LD_VAR 0 1
64918: ARRAY
64919: PPUSH
64920: LD_VAR 0 1
64924: PUSH
64925: LD_INT 4
64927: MOD
64928: PUSH
64929: LD_INT 1
64931: PLUS
64932: PPUSH
64933: CALL_OW 259
64937: PUSH
64938: LD_INT 1
64940: PLUS
64941: PPUSH
64942: CALL_OW 237
64946: GO 64848
64948: POP
64949: POP
// end ;
64950: PPOPN 3
64952: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64953: LD_EXP 50
64957: PUSH
64958: LD_EXP 58
64962: AND
64963: IFFALSE 64983
64965: GO 64967
64967: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64968: LD_INT 4
64970: PPUSH
64971: LD_OWVAR 2
64975: PPUSH
64976: LD_INT 0
64978: PPUSH
64979: CALL_OW 324
64983: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64984: LD_EXP 50
64988: PUSH
64989: LD_EXP 87
64993: AND
64994: IFFALSE 65014
64996: GO 64998
64998: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64999: LD_INT 19
65001: PPUSH
65002: LD_OWVAR 2
65006: PPUSH
65007: LD_INT 0
65009: PPUSH
65010: CALL_OW 324
65014: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
65015: LD_EXP 50
65019: PUSH
65020: LD_EXP 59
65024: AND
65025: IFFALSE 65127
65027: GO 65029
65029: DISABLE
65030: LD_INT 0
65032: PPUSH
65033: PPUSH
// begin enable ;
65034: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
65035: LD_ADDR_VAR 0 2
65039: PUSH
65040: LD_INT 22
65042: PUSH
65043: LD_OWVAR 2
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 2
65054: PUSH
65055: LD_INT 34
65057: PUSH
65058: LD_INT 11
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 34
65067: PUSH
65068: LD_INT 30
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: LIST
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PPUSH
65084: CALL_OW 69
65088: ST_TO_ADDR
// if not tmp then
65089: LD_VAR 0 2
65093: NOT
65094: IFFALSE 65098
// exit ;
65096: GO 65127
// for i in tmp do
65098: LD_ADDR_VAR 0 1
65102: PUSH
65103: LD_VAR 0 2
65107: PUSH
65108: FOR_IN
65109: IFFALSE 65125
// begin SetLives ( i , 0 ) ;
65111: LD_VAR 0 1
65115: PPUSH
65116: LD_INT 0
65118: PPUSH
65119: CALL_OW 234
// end ;
65123: GO 65108
65125: POP
65126: POP
// end ;
65127: PPOPN 2
65129: END
// every 0 0$1 trigger StreamModeActive and sBunker do
65130: LD_EXP 50
65134: PUSH
65135: LD_EXP 60
65139: AND
65140: IFFALSE 65160
65142: GO 65144
65144: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
65145: LD_INT 32
65147: PPUSH
65148: LD_OWVAR 2
65152: PPUSH
65153: LD_INT 0
65155: PPUSH
65156: CALL_OW 324
65160: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
65161: LD_EXP 50
65165: PUSH
65166: LD_EXP 61
65170: AND
65171: IFFALSE 65352
65173: GO 65175
65175: DISABLE
65176: LD_INT 0
65178: PPUSH
65179: PPUSH
65180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
65181: LD_ADDR_VAR 0 2
65185: PUSH
65186: LD_INT 22
65188: PUSH
65189: LD_OWVAR 2
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 33
65200: PUSH
65201: LD_INT 3
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PPUSH
65212: CALL_OW 69
65216: ST_TO_ADDR
// if not tmp then
65217: LD_VAR 0 2
65221: NOT
65222: IFFALSE 65226
// exit ;
65224: GO 65352
// side := 0 ;
65226: LD_ADDR_VAR 0 3
65230: PUSH
65231: LD_INT 0
65233: ST_TO_ADDR
// for i := 1 to 8 do
65234: LD_ADDR_VAR 0 1
65238: PUSH
65239: DOUBLE
65240: LD_INT 1
65242: DEC
65243: ST_TO_ADDR
65244: LD_INT 8
65246: PUSH
65247: FOR_TO
65248: IFFALSE 65296
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
65250: LD_OWVAR 2
65254: PUSH
65255: LD_VAR 0 1
65259: NONEQUAL
65260: PUSH
65261: LD_OWVAR 2
65265: PPUSH
65266: LD_VAR 0 1
65270: PPUSH
65271: CALL_OW 81
65275: PUSH
65276: LD_INT 2
65278: EQUAL
65279: AND
65280: IFFALSE 65294
// begin side := i ;
65282: LD_ADDR_VAR 0 3
65286: PUSH
65287: LD_VAR 0 1
65291: ST_TO_ADDR
// break ;
65292: GO 65296
// end ;
65294: GO 65247
65296: POP
65297: POP
// if not side then
65298: LD_VAR 0 3
65302: NOT
65303: IFFALSE 65307
// exit ;
65305: GO 65352
// for i := 1 to tmp do
65307: LD_ADDR_VAR 0 1
65311: PUSH
65312: DOUBLE
65313: LD_INT 1
65315: DEC
65316: ST_TO_ADDR
65317: LD_VAR 0 2
65321: PUSH
65322: FOR_TO
65323: IFFALSE 65350
// if Prob ( 60 ) then
65325: LD_INT 60
65327: PPUSH
65328: CALL_OW 13
65332: IFFALSE 65348
// SetSide ( i , side ) ;
65334: LD_VAR 0 1
65338: PPUSH
65339: LD_VAR 0 3
65343: PPUSH
65344: CALL_OW 235
65348: GO 65322
65350: POP
65351: POP
// end ;
65352: PPOPN 3
65354: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65355: LD_EXP 50
65359: PUSH
65360: LD_EXP 63
65364: AND
65365: IFFALSE 65484
65367: GO 65369
65369: DISABLE
65370: LD_INT 0
65372: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65373: LD_ADDR_VAR 0 1
65377: PUSH
65378: LD_INT 22
65380: PUSH
65381: LD_OWVAR 2
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 21
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 3
65402: PUSH
65403: LD_INT 23
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: LIST
65421: PPUSH
65422: CALL_OW 69
65426: PUSH
65427: FOR_IN
65428: IFFALSE 65482
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65430: LD_VAR 0 1
65434: PPUSH
65435: CALL_OW 257
65439: PUSH
65440: LD_INT 1
65442: PUSH
65443: LD_INT 2
65445: PUSH
65446: LD_INT 3
65448: PUSH
65449: LD_INT 4
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: IN
65458: IFFALSE 65480
// SetClass ( un , rand ( 1 , 4 ) ) ;
65460: LD_VAR 0 1
65464: PPUSH
65465: LD_INT 1
65467: PPUSH
65468: LD_INT 4
65470: PPUSH
65471: CALL_OW 12
65475: PPUSH
65476: CALL_OW 336
65480: GO 65427
65482: POP
65483: POP
// end ;
65484: PPOPN 1
65486: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65487: LD_EXP 50
65491: PUSH
65492: LD_EXP 62
65496: AND
65497: IFFALSE 65576
65499: GO 65501
65501: DISABLE
65502: LD_INT 0
65504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65505: LD_ADDR_VAR 0 1
65509: PUSH
65510: LD_INT 22
65512: PUSH
65513: LD_OWVAR 2
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 21
65524: PUSH
65525: LD_INT 3
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PPUSH
65536: CALL_OW 69
65540: ST_TO_ADDR
// if not tmp then
65541: LD_VAR 0 1
65545: NOT
65546: IFFALSE 65550
// exit ;
65548: GO 65576
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65550: LD_VAR 0 1
65554: PUSH
65555: LD_INT 1
65557: PPUSH
65558: LD_VAR 0 1
65562: PPUSH
65563: CALL_OW 12
65567: ARRAY
65568: PPUSH
65569: LD_INT 100
65571: PPUSH
65572: CALL_OW 234
// end ;
65576: PPOPN 1
65578: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65579: LD_EXP 50
65583: PUSH
65584: LD_EXP 64
65588: AND
65589: IFFALSE 65687
65591: GO 65593
65593: DISABLE
65594: LD_INT 0
65596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65597: LD_ADDR_VAR 0 1
65601: PUSH
65602: LD_INT 22
65604: PUSH
65605: LD_OWVAR 2
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 21
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PPUSH
65628: CALL_OW 69
65632: ST_TO_ADDR
// if not tmp then
65633: LD_VAR 0 1
65637: NOT
65638: IFFALSE 65642
// exit ;
65640: GO 65687
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65642: LD_VAR 0 1
65646: PUSH
65647: LD_INT 1
65649: PPUSH
65650: LD_VAR 0 1
65654: PPUSH
65655: CALL_OW 12
65659: ARRAY
65660: PPUSH
65661: LD_INT 1
65663: PPUSH
65664: LD_INT 4
65666: PPUSH
65667: CALL_OW 12
65671: PPUSH
65672: LD_INT 3000
65674: PPUSH
65675: LD_INT 9000
65677: PPUSH
65678: CALL_OW 12
65682: PPUSH
65683: CALL_OW 492
// end ;
65687: PPOPN 1
65689: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65690: LD_EXP 50
65694: PUSH
65695: LD_EXP 65
65699: AND
65700: IFFALSE 65720
65702: GO 65704
65704: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65705: LD_INT 1
65707: PPUSH
65708: LD_OWVAR 2
65712: PPUSH
65713: LD_INT 0
65715: PPUSH
65716: CALL_OW 324
65720: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65721: LD_EXP 50
65725: PUSH
65726: LD_EXP 66
65730: AND
65731: IFFALSE 65814
65733: GO 65735
65735: DISABLE
65736: LD_INT 0
65738: PPUSH
65739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65740: LD_ADDR_VAR 0 2
65744: PUSH
65745: LD_INT 22
65747: PUSH
65748: LD_OWVAR 2
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 21
65759: PUSH
65760: LD_INT 3
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PPUSH
65771: CALL_OW 69
65775: ST_TO_ADDR
// if not tmp then
65776: LD_VAR 0 2
65780: NOT
65781: IFFALSE 65785
// exit ;
65783: GO 65814
// for i in tmp do
65785: LD_ADDR_VAR 0 1
65789: PUSH
65790: LD_VAR 0 2
65794: PUSH
65795: FOR_IN
65796: IFFALSE 65812
// SetBLevel ( i , 10 ) ;
65798: LD_VAR 0 1
65802: PPUSH
65803: LD_INT 10
65805: PPUSH
65806: CALL_OW 241
65810: GO 65795
65812: POP
65813: POP
// end ;
65814: PPOPN 2
65816: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65817: LD_EXP 50
65821: PUSH
65822: LD_EXP 67
65826: AND
65827: IFFALSE 65938
65829: GO 65831
65831: DISABLE
65832: LD_INT 0
65834: PPUSH
65835: PPUSH
65836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65837: LD_ADDR_VAR 0 3
65841: PUSH
65842: LD_INT 22
65844: PUSH
65845: LD_OWVAR 2
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 25
65856: PUSH
65857: LD_INT 1
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PPUSH
65868: CALL_OW 69
65872: ST_TO_ADDR
// if not tmp then
65873: LD_VAR 0 3
65877: NOT
65878: IFFALSE 65882
// exit ;
65880: GO 65938
// un := tmp [ rand ( 1 , tmp ) ] ;
65882: LD_ADDR_VAR 0 2
65886: PUSH
65887: LD_VAR 0 3
65891: PUSH
65892: LD_INT 1
65894: PPUSH
65895: LD_VAR 0 3
65899: PPUSH
65900: CALL_OW 12
65904: ARRAY
65905: ST_TO_ADDR
// if Crawls ( un ) then
65906: LD_VAR 0 2
65910: PPUSH
65911: CALL_OW 318
65915: IFFALSE 65926
// ComWalk ( un ) ;
65917: LD_VAR 0 2
65921: PPUSH
65922: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65926: LD_VAR 0 2
65930: PPUSH
65931: LD_INT 5
65933: PPUSH
65934: CALL_OW 336
// end ;
65938: PPOPN 3
65940: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65941: LD_EXP 50
65945: PUSH
65946: LD_EXP 68
65950: AND
65951: PUSH
65952: LD_OWVAR 67
65956: PUSH
65957: LD_INT 4
65959: LESS
65960: AND
65961: IFFALSE 65980
65963: GO 65965
65965: DISABLE
// begin Difficulty := Difficulty + 1 ;
65966: LD_ADDR_OWVAR 67
65970: PUSH
65971: LD_OWVAR 67
65975: PUSH
65976: LD_INT 1
65978: PLUS
65979: ST_TO_ADDR
// end ;
65980: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65981: LD_EXP 50
65985: PUSH
65986: LD_EXP 69
65990: AND
65991: IFFALSE 66094
65993: GO 65995
65995: DISABLE
65996: LD_INT 0
65998: PPUSH
// begin for i := 1 to 5 do
65999: LD_ADDR_VAR 0 1
66003: PUSH
66004: DOUBLE
66005: LD_INT 1
66007: DEC
66008: ST_TO_ADDR
66009: LD_INT 5
66011: PUSH
66012: FOR_TO
66013: IFFALSE 66092
// begin uc_nation := nation_nature ;
66015: LD_ADDR_OWVAR 21
66019: PUSH
66020: LD_INT 0
66022: ST_TO_ADDR
// uc_side := 0 ;
66023: LD_ADDR_OWVAR 20
66027: PUSH
66028: LD_INT 0
66030: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66031: LD_ADDR_OWVAR 29
66035: PUSH
66036: LD_INT 12
66038: PUSH
66039: LD_INT 12
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: ST_TO_ADDR
// hc_agressivity := 20 ;
66046: LD_ADDR_OWVAR 35
66050: PUSH
66051: LD_INT 20
66053: ST_TO_ADDR
// hc_class := class_tiger ;
66054: LD_ADDR_OWVAR 28
66058: PUSH
66059: LD_INT 14
66061: ST_TO_ADDR
// hc_gallery :=  ;
66062: LD_ADDR_OWVAR 33
66066: PUSH
66067: LD_STRING 
66069: ST_TO_ADDR
// hc_name :=  ;
66070: LD_ADDR_OWVAR 26
66074: PUSH
66075: LD_STRING 
66077: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
66078: CALL_OW 44
66082: PPUSH
66083: LD_INT 0
66085: PPUSH
66086: CALL_OW 51
// end ;
66090: GO 66012
66092: POP
66093: POP
// end ;
66094: PPOPN 1
66096: END
// every 0 0$1 trigger StreamModeActive and sBomb do
66097: LD_EXP 50
66101: PUSH
66102: LD_EXP 70
66106: AND
66107: IFFALSE 66116
66109: GO 66111
66111: DISABLE
// StreamSibBomb ;
66112: CALL 66117 0 0
66116: END
// export function StreamSibBomb ; var i , x , y ; begin
66117: LD_INT 0
66119: PPUSH
66120: PPUSH
66121: PPUSH
66122: PPUSH
// result := false ;
66123: LD_ADDR_VAR 0 1
66127: PUSH
66128: LD_INT 0
66130: ST_TO_ADDR
// for i := 1 to 16 do
66131: LD_ADDR_VAR 0 2
66135: PUSH
66136: DOUBLE
66137: LD_INT 1
66139: DEC
66140: ST_TO_ADDR
66141: LD_INT 16
66143: PUSH
66144: FOR_TO
66145: IFFALSE 66344
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66147: LD_ADDR_VAR 0 3
66151: PUSH
66152: LD_INT 10
66154: PUSH
66155: LD_INT 20
66157: PUSH
66158: LD_INT 30
66160: PUSH
66161: LD_INT 40
66163: PUSH
66164: LD_INT 50
66166: PUSH
66167: LD_INT 60
66169: PUSH
66170: LD_INT 70
66172: PUSH
66173: LD_INT 80
66175: PUSH
66176: LD_INT 90
66178: PUSH
66179: LD_INT 100
66181: PUSH
66182: LD_INT 110
66184: PUSH
66185: LD_INT 120
66187: PUSH
66188: LD_INT 130
66190: PUSH
66191: LD_INT 140
66193: PUSH
66194: LD_INT 150
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 1
66216: PPUSH
66217: LD_INT 15
66219: PPUSH
66220: CALL_OW 12
66224: ARRAY
66225: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66226: LD_ADDR_VAR 0 4
66230: PUSH
66231: LD_INT 10
66233: PUSH
66234: LD_INT 20
66236: PUSH
66237: LD_INT 30
66239: PUSH
66240: LD_INT 40
66242: PUSH
66243: LD_INT 50
66245: PUSH
66246: LD_INT 60
66248: PUSH
66249: LD_INT 70
66251: PUSH
66252: LD_INT 80
66254: PUSH
66255: LD_INT 90
66257: PUSH
66258: LD_INT 100
66260: PUSH
66261: LD_INT 110
66263: PUSH
66264: LD_INT 120
66266: PUSH
66267: LD_INT 130
66269: PUSH
66270: LD_INT 140
66272: PUSH
66273: LD_INT 150
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 1
66295: PPUSH
66296: LD_INT 15
66298: PPUSH
66299: CALL_OW 12
66303: ARRAY
66304: ST_TO_ADDR
// if ValidHex ( x , y ) then
66305: LD_VAR 0 3
66309: PPUSH
66310: LD_VAR 0 4
66314: PPUSH
66315: CALL_OW 488
66319: IFFALSE 66342
// begin result := [ x , y ] ;
66321: LD_ADDR_VAR 0 1
66325: PUSH
66326: LD_VAR 0 3
66330: PUSH
66331: LD_VAR 0 4
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: ST_TO_ADDR
// break ;
66340: GO 66344
// end ; end ;
66342: GO 66144
66344: POP
66345: POP
// if result then
66346: LD_VAR 0 1
66350: IFFALSE 66410
// begin ToLua ( playSibBomb() ) ;
66352: LD_STRING playSibBomb()
66354: PPUSH
66355: CALL_OW 559
// wait ( 0 0$14 ) ;
66359: LD_INT 490
66361: PPUSH
66362: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66366: LD_VAR 0 1
66370: PUSH
66371: LD_INT 1
66373: ARRAY
66374: PPUSH
66375: LD_VAR 0 1
66379: PUSH
66380: LD_INT 2
66382: ARRAY
66383: PPUSH
66384: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66388: LD_VAR 0 1
66392: PUSH
66393: LD_INT 1
66395: ARRAY
66396: PPUSH
66397: LD_VAR 0 1
66401: PUSH
66402: LD_INT 2
66404: ARRAY
66405: PPUSH
66406: CALL_OW 429
// end ; end ;
66410: LD_VAR 0 1
66414: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66415: LD_EXP 50
66419: PUSH
66420: LD_EXP 72
66424: AND
66425: IFFALSE 66437
66427: GO 66429
66429: DISABLE
// YouLost (  ) ;
66430: LD_STRING 
66432: PPUSH
66433: CALL_OW 104
66437: END
// every 0 0$1 trigger StreamModeActive and sFog do
66438: LD_EXP 50
66442: PUSH
66443: LD_EXP 71
66447: AND
66448: IFFALSE 66462
66450: GO 66452
66452: DISABLE
// FogOff ( your_side ) ;
66453: LD_OWVAR 2
66457: PPUSH
66458: CALL_OW 344
66462: END
// every 0 0$1 trigger StreamModeActive and sSun do
66463: LD_EXP 50
66467: PUSH
66468: LD_EXP 73
66472: AND
66473: IFFALSE 66501
66475: GO 66477
66477: DISABLE
// begin solar_recharge_percent := 0 ;
66478: LD_ADDR_OWVAR 79
66482: PUSH
66483: LD_INT 0
66485: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66486: LD_INT 10500
66488: PPUSH
66489: CALL_OW 67
// solar_recharge_percent := 100 ;
66493: LD_ADDR_OWVAR 79
66497: PUSH
66498: LD_INT 100
66500: ST_TO_ADDR
// end ;
66501: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66502: LD_EXP 50
66506: PUSH
66507: LD_EXP 74
66511: AND
66512: IFFALSE 66751
66514: GO 66516
66516: DISABLE
66517: LD_INT 0
66519: PPUSH
66520: PPUSH
66521: PPUSH
// begin tmp := [ ] ;
66522: LD_ADDR_VAR 0 3
66526: PUSH
66527: EMPTY
66528: ST_TO_ADDR
// for i := 1 to 6 do
66529: LD_ADDR_VAR 0 1
66533: PUSH
66534: DOUBLE
66535: LD_INT 1
66537: DEC
66538: ST_TO_ADDR
66539: LD_INT 6
66541: PUSH
66542: FOR_TO
66543: IFFALSE 66648
// begin uc_nation := nation_nature ;
66545: LD_ADDR_OWVAR 21
66549: PUSH
66550: LD_INT 0
66552: ST_TO_ADDR
// uc_side := 0 ;
66553: LD_ADDR_OWVAR 20
66557: PUSH
66558: LD_INT 0
66560: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66561: LD_ADDR_OWVAR 29
66565: PUSH
66566: LD_INT 12
66568: PUSH
66569: LD_INT 12
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: ST_TO_ADDR
// hc_agressivity := 20 ;
66576: LD_ADDR_OWVAR 35
66580: PUSH
66581: LD_INT 20
66583: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66584: LD_ADDR_OWVAR 28
66588: PUSH
66589: LD_INT 17
66591: ST_TO_ADDR
// hc_gallery :=  ;
66592: LD_ADDR_OWVAR 33
66596: PUSH
66597: LD_STRING 
66599: ST_TO_ADDR
// hc_name :=  ;
66600: LD_ADDR_OWVAR 26
66604: PUSH
66605: LD_STRING 
66607: ST_TO_ADDR
// un := CreateHuman ;
66608: LD_ADDR_VAR 0 2
66612: PUSH
66613: CALL_OW 44
66617: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66618: LD_VAR 0 2
66622: PPUSH
66623: LD_INT 1
66625: PPUSH
66626: CALL_OW 51
// tmp := tmp ^ un ;
66630: LD_ADDR_VAR 0 3
66634: PUSH
66635: LD_VAR 0 3
66639: PUSH
66640: LD_VAR 0 2
66644: ADD
66645: ST_TO_ADDR
// end ;
66646: GO 66542
66648: POP
66649: POP
// repeat wait ( 0 0$1 ) ;
66650: LD_INT 35
66652: PPUSH
66653: CALL_OW 67
// for un in tmp do
66657: LD_ADDR_VAR 0 2
66661: PUSH
66662: LD_VAR 0 3
66666: PUSH
66667: FOR_IN
66668: IFFALSE 66742
// begin if IsDead ( un ) then
66670: LD_VAR 0 2
66674: PPUSH
66675: CALL_OW 301
66679: IFFALSE 66699
// begin tmp := tmp diff un ;
66681: LD_ADDR_VAR 0 3
66685: PUSH
66686: LD_VAR 0 3
66690: PUSH
66691: LD_VAR 0 2
66695: DIFF
66696: ST_TO_ADDR
// continue ;
66697: GO 66667
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66699: LD_VAR 0 2
66703: PPUSH
66704: LD_INT 3
66706: PUSH
66707: LD_INT 22
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PPUSH
66721: CALL_OW 69
66725: PPUSH
66726: LD_VAR 0 2
66730: PPUSH
66731: CALL_OW 74
66735: PPUSH
66736: CALL_OW 115
// end ;
66740: GO 66667
66742: POP
66743: POP
// until not tmp ;
66744: LD_VAR 0 3
66748: NOT
66749: IFFALSE 66650
// end ;
66751: PPOPN 3
66753: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66754: LD_EXP 50
66758: PUSH
66759: LD_EXP 75
66763: AND
66764: IFFALSE 66818
66766: GO 66768
66768: DISABLE
// begin ToLua ( displayTroll(); ) ;
66769: LD_STRING displayTroll();
66771: PPUSH
66772: CALL_OW 559
// wait ( 3 3$00 ) ;
66776: LD_INT 6300
66778: PPUSH
66779: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66783: LD_STRING hideTroll();
66785: PPUSH
66786: CALL_OW 559
// wait ( 1 1$00 ) ;
66790: LD_INT 2100
66792: PPUSH
66793: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66797: LD_STRING displayTroll();
66799: PPUSH
66800: CALL_OW 559
// wait ( 1 1$00 ) ;
66804: LD_INT 2100
66806: PPUSH
66807: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66811: LD_STRING hideTroll();
66813: PPUSH
66814: CALL_OW 559
// end ;
66818: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66819: LD_EXP 50
66823: PUSH
66824: LD_EXP 76
66828: AND
66829: IFFALSE 66892
66831: GO 66833
66833: DISABLE
66834: LD_INT 0
66836: PPUSH
// begin p := 0 ;
66837: LD_ADDR_VAR 0 1
66841: PUSH
66842: LD_INT 0
66844: ST_TO_ADDR
// repeat game_speed := 1 ;
66845: LD_ADDR_OWVAR 65
66849: PUSH
66850: LD_INT 1
66852: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66853: LD_INT 35
66855: PPUSH
66856: CALL_OW 67
// p := p + 1 ;
66860: LD_ADDR_VAR 0 1
66864: PUSH
66865: LD_VAR 0 1
66869: PUSH
66870: LD_INT 1
66872: PLUS
66873: ST_TO_ADDR
// until p >= 60 ;
66874: LD_VAR 0 1
66878: PUSH
66879: LD_INT 60
66881: GREATEREQUAL
66882: IFFALSE 66845
// game_speed := 4 ;
66884: LD_ADDR_OWVAR 65
66888: PUSH
66889: LD_INT 4
66891: ST_TO_ADDR
// end ;
66892: PPOPN 1
66894: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66895: LD_EXP 50
66899: PUSH
66900: LD_EXP 77
66904: AND
66905: IFFALSE 67051
66907: GO 66909
66909: DISABLE
66910: LD_INT 0
66912: PPUSH
66913: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66914: LD_ADDR_VAR 0 1
66918: PUSH
66919: LD_INT 22
66921: PUSH
66922: LD_OWVAR 2
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: LD_INT 30
66936: PUSH
66937: LD_INT 0
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 30
66946: PUSH
66947: LD_INT 1
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: LIST
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PPUSH
66963: CALL_OW 69
66967: ST_TO_ADDR
// if not depot then
66968: LD_VAR 0 1
66972: NOT
66973: IFFALSE 66977
// exit ;
66975: GO 67051
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66977: LD_ADDR_VAR 0 2
66981: PUSH
66982: LD_VAR 0 1
66986: PUSH
66987: LD_INT 1
66989: PPUSH
66990: LD_VAR 0 1
66994: PPUSH
66995: CALL_OW 12
66999: ARRAY
67000: PPUSH
67001: CALL_OW 274
67005: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
67006: LD_VAR 0 2
67010: PPUSH
67011: LD_INT 1
67013: PPUSH
67014: LD_INT 0
67016: PPUSH
67017: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
67021: LD_VAR 0 2
67025: PPUSH
67026: LD_INT 2
67028: PPUSH
67029: LD_INT 0
67031: PPUSH
67032: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
67036: LD_VAR 0 2
67040: PPUSH
67041: LD_INT 3
67043: PPUSH
67044: LD_INT 0
67046: PPUSH
67047: CALL_OW 277
// end ;
67051: PPOPN 2
67053: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
67054: LD_EXP 50
67058: PUSH
67059: LD_EXP 78
67063: AND
67064: IFFALSE 67161
67066: GO 67068
67068: DISABLE
67069: LD_INT 0
67071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67072: LD_ADDR_VAR 0 1
67076: PUSH
67077: LD_INT 22
67079: PUSH
67080: LD_OWVAR 2
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 21
67091: PUSH
67092: LD_INT 1
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 3
67101: PUSH
67102: LD_INT 23
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: LIST
67120: PPUSH
67121: CALL_OW 69
67125: ST_TO_ADDR
// if not tmp then
67126: LD_VAR 0 1
67130: NOT
67131: IFFALSE 67135
// exit ;
67133: GO 67161
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
67135: LD_VAR 0 1
67139: PUSH
67140: LD_INT 1
67142: PPUSH
67143: LD_VAR 0 1
67147: PPUSH
67148: CALL_OW 12
67152: ARRAY
67153: PPUSH
67154: LD_INT 200
67156: PPUSH
67157: CALL_OW 234
// end ;
67161: PPOPN 1
67163: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
67164: LD_EXP 50
67168: PUSH
67169: LD_EXP 79
67173: AND
67174: IFFALSE 67253
67176: GO 67178
67178: DISABLE
67179: LD_INT 0
67181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
67182: LD_ADDR_VAR 0 1
67186: PUSH
67187: LD_INT 22
67189: PUSH
67190: LD_OWVAR 2
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 21
67201: PUSH
67202: LD_INT 2
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PPUSH
67213: CALL_OW 69
67217: ST_TO_ADDR
// if not tmp then
67218: LD_VAR 0 1
67222: NOT
67223: IFFALSE 67227
// exit ;
67225: GO 67253
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
67227: LD_VAR 0 1
67231: PUSH
67232: LD_INT 1
67234: PPUSH
67235: LD_VAR 0 1
67239: PPUSH
67240: CALL_OW 12
67244: ARRAY
67245: PPUSH
67246: LD_INT 60
67248: PPUSH
67249: CALL_OW 234
// end ;
67253: PPOPN 1
67255: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
67256: LD_EXP 50
67260: PUSH
67261: LD_EXP 80
67265: AND
67266: IFFALSE 67365
67268: GO 67270
67270: DISABLE
67271: LD_INT 0
67273: PPUSH
67274: PPUSH
// begin enable ;
67275: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
67276: LD_ADDR_VAR 0 1
67280: PUSH
67281: LD_INT 22
67283: PUSH
67284: LD_OWVAR 2
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 61
67295: PUSH
67296: EMPTY
67297: LIST
67298: PUSH
67299: LD_INT 33
67301: PUSH
67302: LD_INT 2
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: LIST
67313: PPUSH
67314: CALL_OW 69
67318: ST_TO_ADDR
// if not tmp then
67319: LD_VAR 0 1
67323: NOT
67324: IFFALSE 67328
// exit ;
67326: GO 67365
// for i in tmp do
67328: LD_ADDR_VAR 0 2
67332: PUSH
67333: LD_VAR 0 1
67337: PUSH
67338: FOR_IN
67339: IFFALSE 67363
// if IsControledBy ( i ) then
67341: LD_VAR 0 2
67345: PPUSH
67346: CALL_OW 312
67350: IFFALSE 67361
// ComUnlink ( i ) ;
67352: LD_VAR 0 2
67356: PPUSH
67357: CALL_OW 136
67361: GO 67338
67363: POP
67364: POP
// end ;
67365: PPOPN 2
67367: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67368: LD_EXP 50
67372: PUSH
67373: LD_EXP 81
67377: AND
67378: IFFALSE 67518
67380: GO 67382
67382: DISABLE
67383: LD_INT 0
67385: PPUSH
67386: PPUSH
// begin ToLua ( displayPowell(); ) ;
67387: LD_STRING displayPowell();
67389: PPUSH
67390: CALL_OW 559
// uc_side := 0 ;
67394: LD_ADDR_OWVAR 20
67398: PUSH
67399: LD_INT 0
67401: ST_TO_ADDR
// uc_nation := 2 ;
67402: LD_ADDR_OWVAR 21
67406: PUSH
67407: LD_INT 2
67409: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67410: LD_ADDR_OWVAR 37
67414: PUSH
67415: LD_INT 14
67417: ST_TO_ADDR
// vc_engine := engine_siberite ;
67418: LD_ADDR_OWVAR 39
67422: PUSH
67423: LD_INT 3
67425: ST_TO_ADDR
// vc_control := control_apeman ;
67426: LD_ADDR_OWVAR 38
67430: PUSH
67431: LD_INT 5
67433: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67434: LD_ADDR_OWVAR 40
67438: PUSH
67439: LD_INT 29
67441: ST_TO_ADDR
// un := CreateVehicle ;
67442: LD_ADDR_VAR 0 2
67446: PUSH
67447: CALL_OW 45
67451: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67452: LD_VAR 0 2
67456: PPUSH
67457: LD_INT 1
67459: PPUSH
67460: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67464: LD_INT 35
67466: PPUSH
67467: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67471: LD_VAR 0 2
67475: PPUSH
67476: LD_INT 22
67478: PUSH
67479: LD_OWVAR 2
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PPUSH
67488: CALL_OW 69
67492: PPUSH
67493: LD_VAR 0 2
67497: PPUSH
67498: CALL_OW 74
67502: PPUSH
67503: CALL_OW 115
// until IsDead ( un ) ;
67507: LD_VAR 0 2
67511: PPUSH
67512: CALL_OW 301
67516: IFFALSE 67464
// end ;
67518: PPOPN 2
67520: END
// every 0 0$1 trigger StreamModeActive and sStu do
67521: LD_EXP 50
67525: PUSH
67526: LD_EXP 89
67530: AND
67531: IFFALSE 67547
67533: GO 67535
67535: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67536: LD_STRING displayStucuk();
67538: PPUSH
67539: CALL_OW 559
// ResetFog ;
67543: CALL_OW 335
// end ;
67547: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67548: LD_EXP 50
67552: PUSH
67553: LD_EXP 82
67557: AND
67558: IFFALSE 67699
67560: GO 67562
67562: DISABLE
67563: LD_INT 0
67565: PPUSH
67566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67567: LD_ADDR_VAR 0 2
67571: PUSH
67572: LD_INT 22
67574: PUSH
67575: LD_OWVAR 2
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 21
67586: PUSH
67587: LD_INT 1
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PPUSH
67598: CALL_OW 69
67602: ST_TO_ADDR
// if not tmp then
67603: LD_VAR 0 2
67607: NOT
67608: IFFALSE 67612
// exit ;
67610: GO 67699
// un := tmp [ rand ( 1 , tmp ) ] ;
67612: LD_ADDR_VAR 0 1
67616: PUSH
67617: LD_VAR 0 2
67621: PUSH
67622: LD_INT 1
67624: PPUSH
67625: LD_VAR 0 2
67629: PPUSH
67630: CALL_OW 12
67634: ARRAY
67635: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67636: LD_VAR 0 1
67640: PPUSH
67641: LD_INT 0
67643: PPUSH
67644: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67648: LD_VAR 0 1
67652: PPUSH
67653: LD_OWVAR 3
67657: PUSH
67658: LD_VAR 0 1
67662: DIFF
67663: PPUSH
67664: LD_VAR 0 1
67668: PPUSH
67669: CALL_OW 74
67673: PPUSH
67674: CALL_OW 115
// wait ( 0 0$20 ) ;
67678: LD_INT 700
67680: PPUSH
67681: CALL_OW 67
// SetSide ( un , your_side ) ;
67685: LD_VAR 0 1
67689: PPUSH
67690: LD_OWVAR 2
67694: PPUSH
67695: CALL_OW 235
// end ;
67699: PPOPN 2
67701: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67702: LD_EXP 50
67706: PUSH
67707: LD_EXP 83
67711: AND
67712: IFFALSE 67818
67714: GO 67716
67716: DISABLE
67717: LD_INT 0
67719: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67720: LD_ADDR_VAR 0 1
67724: PUSH
67725: LD_INT 22
67727: PUSH
67728: LD_OWVAR 2
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 2
67739: PUSH
67740: LD_INT 30
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 30
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: LIST
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PPUSH
67769: CALL_OW 69
67773: ST_TO_ADDR
// if not depot then
67774: LD_VAR 0 1
67778: NOT
67779: IFFALSE 67783
// exit ;
67781: GO 67818
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67783: LD_VAR 0 1
67787: PUSH
67788: LD_INT 1
67790: ARRAY
67791: PPUSH
67792: CALL_OW 250
67796: PPUSH
67797: LD_VAR 0 1
67801: PUSH
67802: LD_INT 1
67804: ARRAY
67805: PPUSH
67806: CALL_OW 251
67810: PPUSH
67811: LD_INT 70
67813: PPUSH
67814: CALL_OW 495
// end ;
67818: PPOPN 1
67820: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67821: LD_EXP 50
67825: PUSH
67826: LD_EXP 84
67830: AND
67831: IFFALSE 68042
67833: GO 67835
67835: DISABLE
67836: LD_INT 0
67838: PPUSH
67839: PPUSH
67840: PPUSH
67841: PPUSH
67842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67843: LD_ADDR_VAR 0 5
67847: PUSH
67848: LD_INT 22
67850: PUSH
67851: LD_OWVAR 2
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 21
67862: PUSH
67863: LD_INT 1
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PPUSH
67874: CALL_OW 69
67878: ST_TO_ADDR
// if not tmp then
67879: LD_VAR 0 5
67883: NOT
67884: IFFALSE 67888
// exit ;
67886: GO 68042
// for i in tmp do
67888: LD_ADDR_VAR 0 1
67892: PUSH
67893: LD_VAR 0 5
67897: PUSH
67898: FOR_IN
67899: IFFALSE 68040
// begin d := rand ( 0 , 5 ) ;
67901: LD_ADDR_VAR 0 4
67905: PUSH
67906: LD_INT 0
67908: PPUSH
67909: LD_INT 5
67911: PPUSH
67912: CALL_OW 12
67916: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67917: LD_ADDR_VAR 0 2
67921: PUSH
67922: LD_VAR 0 1
67926: PPUSH
67927: CALL_OW 250
67931: PPUSH
67932: LD_VAR 0 4
67936: PPUSH
67937: LD_INT 3
67939: PPUSH
67940: LD_INT 12
67942: PPUSH
67943: CALL_OW 12
67947: PPUSH
67948: CALL_OW 272
67952: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67953: LD_ADDR_VAR 0 3
67957: PUSH
67958: LD_VAR 0 1
67962: PPUSH
67963: CALL_OW 251
67967: PPUSH
67968: LD_VAR 0 4
67972: PPUSH
67973: LD_INT 3
67975: PPUSH
67976: LD_INT 12
67978: PPUSH
67979: CALL_OW 12
67983: PPUSH
67984: CALL_OW 273
67988: ST_TO_ADDR
// if ValidHex ( x , y ) then
67989: LD_VAR 0 2
67993: PPUSH
67994: LD_VAR 0 3
67998: PPUSH
67999: CALL_OW 488
68003: IFFALSE 68038
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
68005: LD_VAR 0 1
68009: PPUSH
68010: LD_VAR 0 2
68014: PPUSH
68015: LD_VAR 0 3
68019: PPUSH
68020: LD_INT 3
68022: PPUSH
68023: LD_INT 6
68025: PPUSH
68026: CALL_OW 12
68030: PPUSH
68031: LD_INT 1
68033: PPUSH
68034: CALL_OW 483
// end ;
68038: GO 67898
68040: POP
68041: POP
// end ;
68042: PPOPN 5
68044: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
68045: LD_EXP 50
68049: PUSH
68050: LD_EXP 85
68054: AND
68055: IFFALSE 68149
68057: GO 68059
68059: DISABLE
68060: LD_INT 0
68062: PPUSH
68063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
68064: LD_ADDR_VAR 0 2
68068: PUSH
68069: LD_INT 22
68071: PUSH
68072: LD_OWVAR 2
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 32
68083: PUSH
68084: LD_INT 1
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 21
68093: PUSH
68094: LD_INT 2
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: PPUSH
68106: CALL_OW 69
68110: ST_TO_ADDR
// if not tmp then
68111: LD_VAR 0 2
68115: NOT
68116: IFFALSE 68120
// exit ;
68118: GO 68149
// for i in tmp do
68120: LD_ADDR_VAR 0 1
68124: PUSH
68125: LD_VAR 0 2
68129: PUSH
68130: FOR_IN
68131: IFFALSE 68147
// SetFuel ( i , 0 ) ;
68133: LD_VAR 0 1
68137: PPUSH
68138: LD_INT 0
68140: PPUSH
68141: CALL_OW 240
68145: GO 68130
68147: POP
68148: POP
// end ;
68149: PPOPN 2
68151: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
68152: LD_EXP 50
68156: PUSH
68157: LD_EXP 86
68161: AND
68162: IFFALSE 68228
68164: GO 68166
68166: DISABLE
68167: LD_INT 0
68169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68170: LD_ADDR_VAR 0 1
68174: PUSH
68175: LD_INT 22
68177: PUSH
68178: LD_OWVAR 2
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 30
68189: PUSH
68190: LD_INT 29
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PPUSH
68201: CALL_OW 69
68205: ST_TO_ADDR
// if not tmp then
68206: LD_VAR 0 1
68210: NOT
68211: IFFALSE 68215
// exit ;
68213: GO 68228
// DestroyUnit ( tmp [ 1 ] ) ;
68215: LD_VAR 0 1
68219: PUSH
68220: LD_INT 1
68222: ARRAY
68223: PPUSH
68224: CALL_OW 65
// end ;
68228: PPOPN 1
68230: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
68231: LD_EXP 50
68235: PUSH
68236: LD_EXP 88
68240: AND
68241: IFFALSE 68370
68243: GO 68245
68245: DISABLE
68246: LD_INT 0
68248: PPUSH
// begin uc_side := 0 ;
68249: LD_ADDR_OWVAR 20
68253: PUSH
68254: LD_INT 0
68256: ST_TO_ADDR
// uc_nation := nation_arabian ;
68257: LD_ADDR_OWVAR 21
68261: PUSH
68262: LD_INT 2
68264: ST_TO_ADDR
// hc_gallery :=  ;
68265: LD_ADDR_OWVAR 33
68269: PUSH
68270: LD_STRING 
68272: ST_TO_ADDR
// hc_name :=  ;
68273: LD_ADDR_OWVAR 26
68277: PUSH
68278: LD_STRING 
68280: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
68281: LD_INT 1
68283: PPUSH
68284: LD_INT 11
68286: PPUSH
68287: LD_INT 10
68289: PPUSH
68290: CALL_OW 380
// un := CreateHuman ;
68294: LD_ADDR_VAR 0 1
68298: PUSH
68299: CALL_OW 44
68303: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68304: LD_VAR 0 1
68308: PPUSH
68309: LD_INT 1
68311: PPUSH
68312: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68316: LD_INT 35
68318: PPUSH
68319: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68323: LD_VAR 0 1
68327: PPUSH
68328: LD_INT 22
68330: PUSH
68331: LD_OWVAR 2
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PPUSH
68340: CALL_OW 69
68344: PPUSH
68345: LD_VAR 0 1
68349: PPUSH
68350: CALL_OW 74
68354: PPUSH
68355: CALL_OW 115
// until IsDead ( un ) ;
68359: LD_VAR 0 1
68363: PPUSH
68364: CALL_OW 301
68368: IFFALSE 68316
// end ;
68370: PPOPN 1
68372: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68373: LD_EXP 50
68377: PUSH
68378: LD_EXP 90
68382: AND
68383: IFFALSE 68395
68385: GO 68387
68387: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68388: LD_STRING earthquake(getX(game), 0, 32)
68390: PPUSH
68391: CALL_OW 559
68395: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68396: LD_EXP 50
68400: PUSH
68401: LD_EXP 91
68405: AND
68406: IFFALSE 68497
68408: GO 68410
68410: DISABLE
68411: LD_INT 0
68413: PPUSH
// begin enable ;
68414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68415: LD_ADDR_VAR 0 1
68419: PUSH
68420: LD_INT 22
68422: PUSH
68423: LD_OWVAR 2
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 21
68434: PUSH
68435: LD_INT 2
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 33
68444: PUSH
68445: LD_INT 3
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: LIST
68456: PPUSH
68457: CALL_OW 69
68461: ST_TO_ADDR
// if not tmp then
68462: LD_VAR 0 1
68466: NOT
68467: IFFALSE 68471
// exit ;
68469: GO 68497
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68471: LD_VAR 0 1
68475: PUSH
68476: LD_INT 1
68478: PPUSH
68479: LD_VAR 0 1
68483: PPUSH
68484: CALL_OW 12
68488: ARRAY
68489: PPUSH
68490: LD_INT 1
68492: PPUSH
68493: CALL_OW 234
// end ;
68497: PPOPN 1
68499: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68500: LD_EXP 50
68504: PUSH
68505: LD_EXP 92
68509: AND
68510: IFFALSE 68651
68512: GO 68514
68514: DISABLE
68515: LD_INT 0
68517: PPUSH
68518: PPUSH
68519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68520: LD_ADDR_VAR 0 3
68524: PUSH
68525: LD_INT 22
68527: PUSH
68528: LD_OWVAR 2
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 25
68539: PUSH
68540: LD_INT 1
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PPUSH
68551: CALL_OW 69
68555: ST_TO_ADDR
// if not tmp then
68556: LD_VAR 0 3
68560: NOT
68561: IFFALSE 68565
// exit ;
68563: GO 68651
// un := tmp [ rand ( 1 , tmp ) ] ;
68565: LD_ADDR_VAR 0 2
68569: PUSH
68570: LD_VAR 0 3
68574: PUSH
68575: LD_INT 1
68577: PPUSH
68578: LD_VAR 0 3
68582: PPUSH
68583: CALL_OW 12
68587: ARRAY
68588: ST_TO_ADDR
// if Crawls ( un ) then
68589: LD_VAR 0 2
68593: PPUSH
68594: CALL_OW 318
68598: IFFALSE 68609
// ComWalk ( un ) ;
68600: LD_VAR 0 2
68604: PPUSH
68605: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68609: LD_VAR 0 2
68613: PPUSH
68614: LD_INT 9
68616: PPUSH
68617: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68621: LD_INT 28
68623: PPUSH
68624: LD_OWVAR 2
68628: PPUSH
68629: LD_INT 2
68631: PPUSH
68632: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68636: LD_INT 29
68638: PPUSH
68639: LD_OWVAR 2
68643: PPUSH
68644: LD_INT 2
68646: PPUSH
68647: CALL_OW 322
// end ;
68651: PPOPN 3
68653: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68654: LD_EXP 50
68658: PUSH
68659: LD_EXP 93
68663: AND
68664: IFFALSE 68775
68666: GO 68668
68668: DISABLE
68669: LD_INT 0
68671: PPUSH
68672: PPUSH
68673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68674: LD_ADDR_VAR 0 3
68678: PUSH
68679: LD_INT 22
68681: PUSH
68682: LD_OWVAR 2
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 25
68693: PUSH
68694: LD_INT 1
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PPUSH
68705: CALL_OW 69
68709: ST_TO_ADDR
// if not tmp then
68710: LD_VAR 0 3
68714: NOT
68715: IFFALSE 68719
// exit ;
68717: GO 68775
// un := tmp [ rand ( 1 , tmp ) ] ;
68719: LD_ADDR_VAR 0 2
68723: PUSH
68724: LD_VAR 0 3
68728: PUSH
68729: LD_INT 1
68731: PPUSH
68732: LD_VAR 0 3
68736: PPUSH
68737: CALL_OW 12
68741: ARRAY
68742: ST_TO_ADDR
// if Crawls ( un ) then
68743: LD_VAR 0 2
68747: PPUSH
68748: CALL_OW 318
68752: IFFALSE 68763
// ComWalk ( un ) ;
68754: LD_VAR 0 2
68758: PPUSH
68759: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68763: LD_VAR 0 2
68767: PPUSH
68768: LD_INT 8
68770: PPUSH
68771: CALL_OW 336
// end ;
68775: PPOPN 3
68777: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68778: LD_EXP 50
68782: PUSH
68783: LD_EXP 94
68787: AND
68788: IFFALSE 68932
68790: GO 68792
68792: DISABLE
68793: LD_INT 0
68795: PPUSH
68796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68797: LD_ADDR_VAR 0 2
68801: PUSH
68802: LD_INT 22
68804: PUSH
68805: LD_OWVAR 2
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 21
68816: PUSH
68817: LD_INT 2
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 2
68826: PUSH
68827: LD_INT 34
68829: PUSH
68830: LD_INT 12
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 34
68839: PUSH
68840: LD_INT 51
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 34
68849: PUSH
68850: LD_INT 32
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: LIST
68867: PPUSH
68868: CALL_OW 69
68872: ST_TO_ADDR
// if not tmp then
68873: LD_VAR 0 2
68877: NOT
68878: IFFALSE 68882
// exit ;
68880: GO 68932
// for i in tmp do
68882: LD_ADDR_VAR 0 1
68886: PUSH
68887: LD_VAR 0 2
68891: PUSH
68892: FOR_IN
68893: IFFALSE 68930
// if GetCargo ( i , mat_artifact ) = 0 then
68895: LD_VAR 0 1
68899: PPUSH
68900: LD_INT 4
68902: PPUSH
68903: CALL_OW 289
68907: PUSH
68908: LD_INT 0
68910: EQUAL
68911: IFFALSE 68928
// SetCargo ( i , mat_siberit , 100 ) ;
68913: LD_VAR 0 1
68917: PPUSH
68918: LD_INT 3
68920: PPUSH
68921: LD_INT 100
68923: PPUSH
68924: CALL_OW 290
68928: GO 68892
68930: POP
68931: POP
// end ;
68932: PPOPN 2
68934: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68935: LD_EXP 50
68939: PUSH
68940: LD_EXP 95
68944: AND
68945: IFFALSE 69128
68947: GO 68949
68949: DISABLE
68950: LD_INT 0
68952: PPUSH
68953: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68954: LD_ADDR_VAR 0 2
68958: PUSH
68959: LD_INT 22
68961: PUSH
68962: LD_OWVAR 2
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PPUSH
68971: CALL_OW 69
68975: ST_TO_ADDR
// if not tmp then
68976: LD_VAR 0 2
68980: NOT
68981: IFFALSE 68985
// exit ;
68983: GO 69128
// for i := 1 to 2 do
68985: LD_ADDR_VAR 0 1
68989: PUSH
68990: DOUBLE
68991: LD_INT 1
68993: DEC
68994: ST_TO_ADDR
68995: LD_INT 2
68997: PUSH
68998: FOR_TO
68999: IFFALSE 69126
// begin uc_side := your_side ;
69001: LD_ADDR_OWVAR 20
69005: PUSH
69006: LD_OWVAR 2
69010: ST_TO_ADDR
// uc_nation := nation_american ;
69011: LD_ADDR_OWVAR 21
69015: PUSH
69016: LD_INT 1
69018: ST_TO_ADDR
// vc_chassis := us_morphling ;
69019: LD_ADDR_OWVAR 37
69023: PUSH
69024: LD_INT 5
69026: ST_TO_ADDR
// vc_engine := engine_siberite ;
69027: LD_ADDR_OWVAR 39
69031: PUSH
69032: LD_INT 3
69034: ST_TO_ADDR
// vc_control := control_computer ;
69035: LD_ADDR_OWVAR 38
69039: PUSH
69040: LD_INT 3
69042: ST_TO_ADDR
// vc_weapon := us_double_laser ;
69043: LD_ADDR_OWVAR 40
69047: PUSH
69048: LD_INT 10
69050: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
69051: LD_VAR 0 2
69055: PUSH
69056: LD_INT 1
69058: ARRAY
69059: PPUSH
69060: CALL_OW 310
69064: NOT
69065: IFFALSE 69112
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
69067: CALL_OW 45
69071: PPUSH
69072: LD_VAR 0 2
69076: PUSH
69077: LD_INT 1
69079: ARRAY
69080: PPUSH
69081: CALL_OW 250
69085: PPUSH
69086: LD_VAR 0 2
69090: PUSH
69091: LD_INT 1
69093: ARRAY
69094: PPUSH
69095: CALL_OW 251
69099: PPUSH
69100: LD_INT 12
69102: PPUSH
69103: LD_INT 1
69105: PPUSH
69106: CALL_OW 50
69110: GO 69124
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
69112: CALL_OW 45
69116: PPUSH
69117: LD_INT 1
69119: PPUSH
69120: CALL_OW 51
// end ;
69124: GO 68998
69126: POP
69127: POP
// end ;
69128: PPOPN 2
69130: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
69131: LD_EXP 50
69135: PUSH
69136: LD_EXP 96
69140: AND
69141: IFFALSE 69363
69143: GO 69145
69145: DISABLE
69146: LD_INT 0
69148: PPUSH
69149: PPUSH
69150: PPUSH
69151: PPUSH
69152: PPUSH
69153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69154: LD_ADDR_VAR 0 6
69158: PUSH
69159: LD_INT 22
69161: PUSH
69162: LD_OWVAR 2
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 21
69173: PUSH
69174: LD_INT 1
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 3
69183: PUSH
69184: LD_INT 23
69186: PUSH
69187: LD_INT 0
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: LIST
69202: PPUSH
69203: CALL_OW 69
69207: ST_TO_ADDR
// if not tmp then
69208: LD_VAR 0 6
69212: NOT
69213: IFFALSE 69217
// exit ;
69215: GO 69363
// s1 := rand ( 1 , 4 ) ;
69217: LD_ADDR_VAR 0 2
69221: PUSH
69222: LD_INT 1
69224: PPUSH
69225: LD_INT 4
69227: PPUSH
69228: CALL_OW 12
69232: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
69233: LD_ADDR_VAR 0 4
69237: PUSH
69238: LD_VAR 0 6
69242: PUSH
69243: LD_INT 1
69245: ARRAY
69246: PPUSH
69247: LD_VAR 0 2
69251: PPUSH
69252: CALL_OW 259
69256: ST_TO_ADDR
// if s1 = 1 then
69257: LD_VAR 0 2
69261: PUSH
69262: LD_INT 1
69264: EQUAL
69265: IFFALSE 69285
// s2 := rand ( 2 , 4 ) else
69267: LD_ADDR_VAR 0 3
69271: PUSH
69272: LD_INT 2
69274: PPUSH
69275: LD_INT 4
69277: PPUSH
69278: CALL_OW 12
69282: ST_TO_ADDR
69283: GO 69293
// s2 := 1 ;
69285: LD_ADDR_VAR 0 3
69289: PUSH
69290: LD_INT 1
69292: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
69293: LD_ADDR_VAR 0 5
69297: PUSH
69298: LD_VAR 0 6
69302: PUSH
69303: LD_INT 1
69305: ARRAY
69306: PPUSH
69307: LD_VAR 0 3
69311: PPUSH
69312: CALL_OW 259
69316: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
69317: LD_VAR 0 6
69321: PUSH
69322: LD_INT 1
69324: ARRAY
69325: PPUSH
69326: LD_VAR 0 2
69330: PPUSH
69331: LD_VAR 0 5
69335: PPUSH
69336: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69340: LD_VAR 0 6
69344: PUSH
69345: LD_INT 1
69347: ARRAY
69348: PPUSH
69349: LD_VAR 0 3
69353: PPUSH
69354: LD_VAR 0 4
69358: PPUSH
69359: CALL_OW 237
// end ;
69363: PPOPN 6
69365: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69366: LD_EXP 50
69370: PUSH
69371: LD_EXP 97
69375: AND
69376: IFFALSE 69455
69378: GO 69380
69380: DISABLE
69381: LD_INT 0
69383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69384: LD_ADDR_VAR 0 1
69388: PUSH
69389: LD_INT 22
69391: PUSH
69392: LD_OWVAR 2
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 30
69403: PUSH
69404: LD_INT 3
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PPUSH
69415: CALL_OW 69
69419: ST_TO_ADDR
// if not tmp then
69420: LD_VAR 0 1
69424: NOT
69425: IFFALSE 69429
// exit ;
69427: GO 69455
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69429: LD_VAR 0 1
69433: PUSH
69434: LD_INT 1
69436: PPUSH
69437: LD_VAR 0 1
69441: PPUSH
69442: CALL_OW 12
69446: ARRAY
69447: PPUSH
69448: LD_INT 1
69450: PPUSH
69451: CALL_OW 234
// end ;
69455: PPOPN 1
69457: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69458: LD_EXP 50
69462: PUSH
69463: LD_EXP 98
69467: AND
69468: IFFALSE 69580
69470: GO 69472
69472: DISABLE
69473: LD_INT 0
69475: PPUSH
69476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69477: LD_ADDR_VAR 0 2
69481: PUSH
69482: LD_INT 22
69484: PUSH
69485: LD_OWVAR 2
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 2
69496: PUSH
69497: LD_INT 30
69499: PUSH
69500: LD_INT 27
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 30
69509: PUSH
69510: LD_INT 26
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 30
69519: PUSH
69520: LD_INT 28
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PPUSH
69537: CALL_OW 69
69541: ST_TO_ADDR
// if not tmp then
69542: LD_VAR 0 2
69546: NOT
69547: IFFALSE 69551
// exit ;
69549: GO 69580
// for i in tmp do
69551: LD_ADDR_VAR 0 1
69555: PUSH
69556: LD_VAR 0 2
69560: PUSH
69561: FOR_IN
69562: IFFALSE 69578
// SetLives ( i , 1 ) ;
69564: LD_VAR 0 1
69568: PPUSH
69569: LD_INT 1
69571: PPUSH
69572: CALL_OW 234
69576: GO 69561
69578: POP
69579: POP
// end ;
69580: PPOPN 2
69582: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69583: LD_EXP 50
69587: PUSH
69588: LD_EXP 99
69592: AND
69593: IFFALSE 69880
69595: GO 69597
69597: DISABLE
69598: LD_INT 0
69600: PPUSH
69601: PPUSH
69602: PPUSH
// begin i := rand ( 1 , 7 ) ;
69603: LD_ADDR_VAR 0 1
69607: PUSH
69608: LD_INT 1
69610: PPUSH
69611: LD_INT 7
69613: PPUSH
69614: CALL_OW 12
69618: ST_TO_ADDR
// case i of 1 :
69619: LD_VAR 0 1
69623: PUSH
69624: LD_INT 1
69626: DOUBLE
69627: EQUAL
69628: IFTRUE 69632
69630: GO 69642
69632: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69633: LD_STRING earthquake(getX(game), 0, 32)
69635: PPUSH
69636: CALL_OW 559
69640: GO 69880
69642: LD_INT 2
69644: DOUBLE
69645: EQUAL
69646: IFTRUE 69650
69648: GO 69664
69650: POP
// begin ToLua ( displayStucuk(); ) ;
69651: LD_STRING displayStucuk();
69653: PPUSH
69654: CALL_OW 559
// ResetFog ;
69658: CALL_OW 335
// end ; 3 :
69662: GO 69880
69664: LD_INT 3
69666: DOUBLE
69667: EQUAL
69668: IFTRUE 69672
69670: GO 69776
69672: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69673: LD_ADDR_VAR 0 2
69677: PUSH
69678: LD_INT 22
69680: PUSH
69681: LD_OWVAR 2
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 25
69692: PUSH
69693: LD_INT 1
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PPUSH
69704: CALL_OW 69
69708: ST_TO_ADDR
// if not tmp then
69709: LD_VAR 0 2
69713: NOT
69714: IFFALSE 69718
// exit ;
69716: GO 69880
// un := tmp [ rand ( 1 , tmp ) ] ;
69718: LD_ADDR_VAR 0 3
69722: PUSH
69723: LD_VAR 0 2
69727: PUSH
69728: LD_INT 1
69730: PPUSH
69731: LD_VAR 0 2
69735: PPUSH
69736: CALL_OW 12
69740: ARRAY
69741: ST_TO_ADDR
// if Crawls ( un ) then
69742: LD_VAR 0 3
69746: PPUSH
69747: CALL_OW 318
69751: IFFALSE 69762
// ComWalk ( un ) ;
69753: LD_VAR 0 3
69757: PPUSH
69758: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69762: LD_VAR 0 3
69766: PPUSH
69767: LD_INT 8
69769: PPUSH
69770: CALL_OW 336
// end ; 4 :
69774: GO 69880
69776: LD_INT 4
69778: DOUBLE
69779: EQUAL
69780: IFTRUE 69784
69782: GO 69858
69784: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69785: LD_ADDR_VAR 0 2
69789: PUSH
69790: LD_INT 22
69792: PUSH
69793: LD_OWVAR 2
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 30
69804: PUSH
69805: LD_INT 29
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PPUSH
69816: CALL_OW 69
69820: ST_TO_ADDR
// if not tmp then
69821: LD_VAR 0 2
69825: NOT
69826: IFFALSE 69830
// exit ;
69828: GO 69880
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69830: LD_VAR 0 2
69834: PUSH
69835: LD_INT 1
69837: ARRAY
69838: PPUSH
69839: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69843: LD_VAR 0 2
69847: PUSH
69848: LD_INT 1
69850: ARRAY
69851: PPUSH
69852: CALL_OW 65
// end ; 5 .. 7 :
69856: GO 69880
69858: LD_INT 5
69860: DOUBLE
69861: GREATEREQUAL
69862: IFFALSE 69870
69864: LD_INT 7
69866: DOUBLE
69867: LESSEQUAL
69868: IFTRUE 69872
69870: GO 69879
69872: POP
// StreamSibBomb ; end ;
69873: CALL 66117 0 0
69877: GO 69880
69879: POP
// end ;
69880: PPOPN 3
69882: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69883: LD_EXP 50
69887: PUSH
69888: LD_EXP 100
69892: AND
69893: IFFALSE 70049
69895: GO 69897
69897: DISABLE
69898: LD_INT 0
69900: PPUSH
69901: PPUSH
69902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69903: LD_ADDR_VAR 0 2
69907: PUSH
69908: LD_INT 81
69910: PUSH
69911: LD_OWVAR 2
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 2
69922: PUSH
69923: LD_INT 21
69925: PUSH
69926: LD_INT 1
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 21
69935: PUSH
69936: LD_INT 2
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: LIST
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PPUSH
69952: CALL_OW 69
69956: ST_TO_ADDR
// if not tmp then
69957: LD_VAR 0 2
69961: NOT
69962: IFFALSE 69966
// exit ;
69964: GO 70049
// p := 0 ;
69966: LD_ADDR_VAR 0 3
69970: PUSH
69971: LD_INT 0
69973: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69974: LD_INT 35
69976: PPUSH
69977: CALL_OW 67
// p := p + 1 ;
69981: LD_ADDR_VAR 0 3
69985: PUSH
69986: LD_VAR 0 3
69990: PUSH
69991: LD_INT 1
69993: PLUS
69994: ST_TO_ADDR
// for i in tmp do
69995: LD_ADDR_VAR 0 1
69999: PUSH
70000: LD_VAR 0 2
70004: PUSH
70005: FOR_IN
70006: IFFALSE 70037
// if GetLives ( i ) < 1000 then
70008: LD_VAR 0 1
70012: PPUSH
70013: CALL_OW 256
70017: PUSH
70018: LD_INT 1000
70020: LESS
70021: IFFALSE 70035
// SetLives ( i , 1000 ) ;
70023: LD_VAR 0 1
70027: PPUSH
70028: LD_INT 1000
70030: PPUSH
70031: CALL_OW 234
70035: GO 70005
70037: POP
70038: POP
// until p > 20 ;
70039: LD_VAR 0 3
70043: PUSH
70044: LD_INT 20
70046: GREATER
70047: IFFALSE 69974
// end ;
70049: PPOPN 3
70051: END
// every 0 0$1 trigger StreamModeActive and sTime do
70052: LD_EXP 50
70056: PUSH
70057: LD_EXP 101
70061: AND
70062: IFFALSE 70097
70064: GO 70066
70066: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
70067: LD_INT 28
70069: PPUSH
70070: LD_OWVAR 2
70074: PPUSH
70075: LD_INT 2
70077: PPUSH
70078: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
70082: LD_INT 30
70084: PPUSH
70085: LD_OWVAR 2
70089: PPUSH
70090: LD_INT 2
70092: PPUSH
70093: CALL_OW 322
// end ;
70097: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
70098: LD_EXP 50
70102: PUSH
70103: LD_EXP 102
70107: AND
70108: IFFALSE 70229
70110: GO 70112
70112: DISABLE
70113: LD_INT 0
70115: PPUSH
70116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70117: LD_ADDR_VAR 0 2
70121: PUSH
70122: LD_INT 22
70124: PUSH
70125: LD_OWVAR 2
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 21
70136: PUSH
70137: LD_INT 1
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 3
70146: PUSH
70147: LD_INT 23
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: PPUSH
70166: CALL_OW 69
70170: ST_TO_ADDR
// if not tmp then
70171: LD_VAR 0 2
70175: NOT
70176: IFFALSE 70180
// exit ;
70178: GO 70229
// for i in tmp do
70180: LD_ADDR_VAR 0 1
70184: PUSH
70185: LD_VAR 0 2
70189: PUSH
70190: FOR_IN
70191: IFFALSE 70227
// begin if Crawls ( i ) then
70193: LD_VAR 0 1
70197: PPUSH
70198: CALL_OW 318
70202: IFFALSE 70213
// ComWalk ( i ) ;
70204: LD_VAR 0 1
70208: PPUSH
70209: CALL_OW 138
// SetClass ( i , 2 ) ;
70213: LD_VAR 0 1
70217: PPUSH
70218: LD_INT 2
70220: PPUSH
70221: CALL_OW 336
// end ;
70225: GO 70190
70227: POP
70228: POP
// end ;
70229: PPOPN 2
70231: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
70232: LD_EXP 50
70236: PUSH
70237: LD_EXP 103
70241: AND
70242: IFFALSE 70530
70244: GO 70246
70246: DISABLE
70247: LD_INT 0
70249: PPUSH
70250: PPUSH
70251: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
70252: LD_OWVAR 2
70256: PPUSH
70257: LD_INT 9
70259: PPUSH
70260: LD_INT 1
70262: PPUSH
70263: LD_INT 1
70265: PPUSH
70266: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
70270: LD_INT 9
70272: PPUSH
70273: LD_OWVAR 2
70277: PPUSH
70278: CALL_OW 343
// uc_side := 9 ;
70282: LD_ADDR_OWVAR 20
70286: PUSH
70287: LD_INT 9
70289: ST_TO_ADDR
// uc_nation := 2 ;
70290: LD_ADDR_OWVAR 21
70294: PUSH
70295: LD_INT 2
70297: ST_TO_ADDR
// hc_name := Dark Warrior ;
70298: LD_ADDR_OWVAR 26
70302: PUSH
70303: LD_STRING Dark Warrior
70305: ST_TO_ADDR
// hc_gallery :=  ;
70306: LD_ADDR_OWVAR 33
70310: PUSH
70311: LD_STRING 
70313: ST_TO_ADDR
// hc_noskilllimit := true ;
70314: LD_ADDR_OWVAR 76
70318: PUSH
70319: LD_INT 1
70321: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
70322: LD_ADDR_OWVAR 31
70326: PUSH
70327: LD_INT 30
70329: PUSH
70330: LD_INT 30
70332: PUSH
70333: LD_INT 30
70335: PUSH
70336: LD_INT 30
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: ST_TO_ADDR
// un := CreateHuman ;
70345: LD_ADDR_VAR 0 3
70349: PUSH
70350: CALL_OW 44
70354: ST_TO_ADDR
// hc_noskilllimit := false ;
70355: LD_ADDR_OWVAR 76
70359: PUSH
70360: LD_INT 0
70362: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70363: LD_VAR 0 3
70367: PPUSH
70368: LD_INT 1
70370: PPUSH
70371: CALL_OW 51
// ToLua ( playRanger() ) ;
70375: LD_STRING playRanger()
70377: PPUSH
70378: CALL_OW 559
// p := 0 ;
70382: LD_ADDR_VAR 0 2
70386: PUSH
70387: LD_INT 0
70389: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70390: LD_INT 35
70392: PPUSH
70393: CALL_OW 67
// p := p + 1 ;
70397: LD_ADDR_VAR 0 2
70401: PUSH
70402: LD_VAR 0 2
70406: PUSH
70407: LD_INT 1
70409: PLUS
70410: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70411: LD_VAR 0 3
70415: PPUSH
70416: CALL_OW 256
70420: PUSH
70421: LD_INT 1000
70423: LESS
70424: IFFALSE 70438
// SetLives ( un , 1000 ) ;
70426: LD_VAR 0 3
70430: PPUSH
70431: LD_INT 1000
70433: PPUSH
70434: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70438: LD_VAR 0 3
70442: PPUSH
70443: LD_INT 81
70445: PUSH
70446: LD_OWVAR 2
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 91
70457: PUSH
70458: LD_VAR 0 3
70462: PUSH
70463: LD_INT 30
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: LIST
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PPUSH
70475: CALL_OW 69
70479: PPUSH
70480: LD_VAR 0 3
70484: PPUSH
70485: CALL_OW 74
70489: PPUSH
70490: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70494: LD_VAR 0 2
70498: PUSH
70499: LD_INT 80
70501: GREATER
70502: PUSH
70503: LD_VAR 0 3
70507: PPUSH
70508: CALL_OW 301
70512: OR
70513: IFFALSE 70390
// if un then
70515: LD_VAR 0 3
70519: IFFALSE 70530
// RemoveUnit ( un ) ;
70521: LD_VAR 0 3
70525: PPUSH
70526: CALL_OW 64
// end ;
70530: PPOPN 3
70532: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70533: LD_EXP 104
70537: IFFALSE 70653
70539: GO 70541
70541: DISABLE
70542: LD_INT 0
70544: PPUSH
70545: PPUSH
70546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70547: LD_ADDR_VAR 0 2
70551: PUSH
70552: LD_INT 81
70554: PUSH
70555: LD_OWVAR 2
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 21
70566: PUSH
70567: LD_INT 1
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PPUSH
70578: CALL_OW 69
70582: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70583: LD_STRING playComputer()
70585: PPUSH
70586: CALL_OW 559
// if not tmp then
70590: LD_VAR 0 2
70594: NOT
70595: IFFALSE 70599
// exit ;
70597: GO 70653
// for i in tmp do
70599: LD_ADDR_VAR 0 1
70603: PUSH
70604: LD_VAR 0 2
70608: PUSH
70609: FOR_IN
70610: IFFALSE 70651
// for j := 1 to 4 do
70612: LD_ADDR_VAR 0 3
70616: PUSH
70617: DOUBLE
70618: LD_INT 1
70620: DEC
70621: ST_TO_ADDR
70622: LD_INT 4
70624: PUSH
70625: FOR_TO
70626: IFFALSE 70647
// SetSkill ( i , j , 10 ) ;
70628: LD_VAR 0 1
70632: PPUSH
70633: LD_VAR 0 3
70637: PPUSH
70638: LD_INT 10
70640: PPUSH
70641: CALL_OW 237
70645: GO 70625
70647: POP
70648: POP
70649: GO 70609
70651: POP
70652: POP
// end ;
70653: PPOPN 3
70655: END
// every 0 0$1 trigger s30 do var i , tmp ;
70656: LD_EXP 105
70660: IFFALSE 70729
70662: GO 70664
70664: DISABLE
70665: LD_INT 0
70667: PPUSH
70668: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70669: LD_ADDR_VAR 0 2
70673: PUSH
70674: LD_INT 22
70676: PUSH
70677: LD_OWVAR 2
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PPUSH
70686: CALL_OW 69
70690: ST_TO_ADDR
// if not tmp then
70691: LD_VAR 0 2
70695: NOT
70696: IFFALSE 70700
// exit ;
70698: GO 70729
// for i in tmp do
70700: LD_ADDR_VAR 0 1
70704: PUSH
70705: LD_VAR 0 2
70709: PUSH
70710: FOR_IN
70711: IFFALSE 70727
// SetLives ( i , 300 ) ;
70713: LD_VAR 0 1
70717: PPUSH
70718: LD_INT 300
70720: PPUSH
70721: CALL_OW 234
70725: GO 70710
70727: POP
70728: POP
// end ;
70729: PPOPN 2
70731: END
// every 0 0$1 trigger s60 do var i , tmp ;
70732: LD_EXP 106
70736: IFFALSE 70805
70738: GO 70740
70740: DISABLE
70741: LD_INT 0
70743: PPUSH
70744: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70745: LD_ADDR_VAR 0 2
70749: PUSH
70750: LD_INT 22
70752: PUSH
70753: LD_OWVAR 2
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PPUSH
70762: CALL_OW 69
70766: ST_TO_ADDR
// if not tmp then
70767: LD_VAR 0 2
70771: NOT
70772: IFFALSE 70776
// exit ;
70774: GO 70805
// for i in tmp do
70776: LD_ADDR_VAR 0 1
70780: PUSH
70781: LD_VAR 0 2
70785: PUSH
70786: FOR_IN
70787: IFFALSE 70803
// SetLives ( i , 600 ) ;
70789: LD_VAR 0 1
70793: PPUSH
70794: LD_INT 600
70796: PPUSH
70797: CALL_OW 234
70801: GO 70786
70803: POP
70804: POP
// end ;
70805: PPOPN 2
70807: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70808: LD_INT 0
70810: PPUSH
// case cmd of 301 :
70811: LD_VAR 0 1
70815: PUSH
70816: LD_INT 301
70818: DOUBLE
70819: EQUAL
70820: IFTRUE 70824
70822: GO 70856
70824: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70825: LD_VAR 0 6
70829: PPUSH
70830: LD_VAR 0 7
70834: PPUSH
70835: LD_VAR 0 8
70839: PPUSH
70840: LD_VAR 0 4
70844: PPUSH
70845: LD_VAR 0 5
70849: PPUSH
70850: CALL 72065 0 5
70854: GO 70977
70856: LD_INT 302
70858: DOUBLE
70859: EQUAL
70860: IFTRUE 70864
70862: GO 70901
70864: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70865: LD_VAR 0 6
70869: PPUSH
70870: LD_VAR 0 7
70874: PPUSH
70875: LD_VAR 0 8
70879: PPUSH
70880: LD_VAR 0 9
70884: PPUSH
70885: LD_VAR 0 4
70889: PPUSH
70890: LD_VAR 0 5
70894: PPUSH
70895: CALL 72156 0 6
70899: GO 70977
70901: LD_INT 303
70903: DOUBLE
70904: EQUAL
70905: IFTRUE 70909
70907: GO 70946
70909: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70910: LD_VAR 0 6
70914: PPUSH
70915: LD_VAR 0 7
70919: PPUSH
70920: LD_VAR 0 8
70924: PPUSH
70925: LD_VAR 0 9
70929: PPUSH
70930: LD_VAR 0 4
70934: PPUSH
70935: LD_VAR 0 5
70939: PPUSH
70940: CALL 70982 0 6
70944: GO 70977
70946: LD_INT 304
70948: DOUBLE
70949: EQUAL
70950: IFTRUE 70954
70952: GO 70976
70954: POP
// hHackTeleport ( unit , x , y ) ; end ;
70955: LD_VAR 0 2
70959: PPUSH
70960: LD_VAR 0 4
70964: PPUSH
70965: LD_VAR 0 5
70969: PPUSH
70970: CALL 72749 0 3
70974: GO 70977
70976: POP
// end ;
70977: LD_VAR 0 12
70981: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70982: LD_INT 0
70984: PPUSH
70985: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70986: LD_VAR 0 1
70990: PUSH
70991: LD_INT 1
70993: LESS
70994: PUSH
70995: LD_VAR 0 1
70999: PUSH
71000: LD_INT 3
71002: GREATER
71003: OR
71004: PUSH
71005: LD_VAR 0 5
71009: PPUSH
71010: LD_VAR 0 6
71014: PPUSH
71015: CALL_OW 428
71019: OR
71020: IFFALSE 71024
// exit ;
71022: GO 71752
// uc_side := your_side ;
71024: LD_ADDR_OWVAR 20
71028: PUSH
71029: LD_OWVAR 2
71033: ST_TO_ADDR
// uc_nation := nation ;
71034: LD_ADDR_OWVAR 21
71038: PUSH
71039: LD_VAR 0 1
71043: ST_TO_ADDR
// bc_level = 1 ;
71044: LD_ADDR_OWVAR 43
71048: PUSH
71049: LD_INT 1
71051: ST_TO_ADDR
// case btype of 1 :
71052: LD_VAR 0 2
71056: PUSH
71057: LD_INT 1
71059: DOUBLE
71060: EQUAL
71061: IFTRUE 71065
71063: GO 71076
71065: POP
// bc_type := b_depot ; 2 :
71066: LD_ADDR_OWVAR 42
71070: PUSH
71071: LD_INT 0
71073: ST_TO_ADDR
71074: GO 71696
71076: LD_INT 2
71078: DOUBLE
71079: EQUAL
71080: IFTRUE 71084
71082: GO 71095
71084: POP
// bc_type := b_warehouse ; 3 :
71085: LD_ADDR_OWVAR 42
71089: PUSH
71090: LD_INT 1
71092: ST_TO_ADDR
71093: GO 71696
71095: LD_INT 3
71097: DOUBLE
71098: EQUAL
71099: IFTRUE 71103
71101: GO 71114
71103: POP
// bc_type := b_lab ; 4 .. 9 :
71104: LD_ADDR_OWVAR 42
71108: PUSH
71109: LD_INT 6
71111: ST_TO_ADDR
71112: GO 71696
71114: LD_INT 4
71116: DOUBLE
71117: GREATEREQUAL
71118: IFFALSE 71126
71120: LD_INT 9
71122: DOUBLE
71123: LESSEQUAL
71124: IFTRUE 71128
71126: GO 71188
71128: POP
// begin bc_type := b_lab_half ;
71129: LD_ADDR_OWVAR 42
71133: PUSH
71134: LD_INT 7
71136: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
71137: LD_ADDR_OWVAR 44
71141: PUSH
71142: LD_INT 10
71144: PUSH
71145: LD_INT 11
71147: PUSH
71148: LD_INT 12
71150: PUSH
71151: LD_INT 15
71153: PUSH
71154: LD_INT 14
71156: PUSH
71157: LD_INT 13
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: PUSH
71168: LD_VAR 0 2
71172: PUSH
71173: LD_INT 3
71175: MINUS
71176: ARRAY
71177: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
71178: LD_ADDR_OWVAR 45
71182: PUSH
71183: LD_INT 9
71185: ST_TO_ADDR
// end ; 10 .. 13 :
71186: GO 71696
71188: LD_INT 10
71190: DOUBLE
71191: GREATEREQUAL
71192: IFFALSE 71200
71194: LD_INT 13
71196: DOUBLE
71197: LESSEQUAL
71198: IFTRUE 71202
71200: GO 71279
71202: POP
// begin bc_type := b_lab_full ;
71203: LD_ADDR_OWVAR 42
71207: PUSH
71208: LD_INT 8
71210: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
71211: LD_ADDR_OWVAR 44
71215: PUSH
71216: LD_INT 10
71218: PUSH
71219: LD_INT 12
71221: PUSH
71222: LD_INT 14
71224: PUSH
71225: LD_INT 13
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: PUSH
71234: LD_VAR 0 2
71238: PUSH
71239: LD_INT 9
71241: MINUS
71242: ARRAY
71243: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
71244: LD_ADDR_OWVAR 45
71248: PUSH
71249: LD_INT 11
71251: PUSH
71252: LD_INT 15
71254: PUSH
71255: LD_INT 12
71257: PUSH
71258: LD_INT 15
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: PUSH
71267: LD_VAR 0 2
71271: PUSH
71272: LD_INT 9
71274: MINUS
71275: ARRAY
71276: ST_TO_ADDR
// end ; 14 :
71277: GO 71696
71279: LD_INT 14
71281: DOUBLE
71282: EQUAL
71283: IFTRUE 71287
71285: GO 71298
71287: POP
// bc_type := b_workshop ; 15 :
71288: LD_ADDR_OWVAR 42
71292: PUSH
71293: LD_INT 2
71295: ST_TO_ADDR
71296: GO 71696
71298: LD_INT 15
71300: DOUBLE
71301: EQUAL
71302: IFTRUE 71306
71304: GO 71317
71306: POP
// bc_type := b_factory ; 16 :
71307: LD_ADDR_OWVAR 42
71311: PUSH
71312: LD_INT 3
71314: ST_TO_ADDR
71315: GO 71696
71317: LD_INT 16
71319: DOUBLE
71320: EQUAL
71321: IFTRUE 71325
71323: GO 71336
71325: POP
// bc_type := b_ext_gun ; 17 :
71326: LD_ADDR_OWVAR 42
71330: PUSH
71331: LD_INT 17
71333: ST_TO_ADDR
71334: GO 71696
71336: LD_INT 17
71338: DOUBLE
71339: EQUAL
71340: IFTRUE 71344
71342: GO 71372
71344: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
71345: LD_ADDR_OWVAR 42
71349: PUSH
71350: LD_INT 19
71352: PUSH
71353: LD_INT 23
71355: PUSH
71356: LD_INT 19
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: LIST
71363: PUSH
71364: LD_VAR 0 1
71368: ARRAY
71369: ST_TO_ADDR
71370: GO 71696
71372: LD_INT 18
71374: DOUBLE
71375: EQUAL
71376: IFTRUE 71380
71378: GO 71391
71380: POP
// bc_type := b_ext_radar ; 19 :
71381: LD_ADDR_OWVAR 42
71385: PUSH
71386: LD_INT 20
71388: ST_TO_ADDR
71389: GO 71696
71391: LD_INT 19
71393: DOUBLE
71394: EQUAL
71395: IFTRUE 71399
71397: GO 71410
71399: POP
// bc_type := b_ext_radio ; 20 :
71400: LD_ADDR_OWVAR 42
71404: PUSH
71405: LD_INT 22
71407: ST_TO_ADDR
71408: GO 71696
71410: LD_INT 20
71412: DOUBLE
71413: EQUAL
71414: IFTRUE 71418
71416: GO 71429
71418: POP
// bc_type := b_ext_siberium ; 21 :
71419: LD_ADDR_OWVAR 42
71423: PUSH
71424: LD_INT 21
71426: ST_TO_ADDR
71427: GO 71696
71429: LD_INT 21
71431: DOUBLE
71432: EQUAL
71433: IFTRUE 71437
71435: GO 71448
71437: POP
// bc_type := b_ext_computer ; 22 :
71438: LD_ADDR_OWVAR 42
71442: PUSH
71443: LD_INT 24
71445: ST_TO_ADDR
71446: GO 71696
71448: LD_INT 22
71450: DOUBLE
71451: EQUAL
71452: IFTRUE 71456
71454: GO 71467
71456: POP
// bc_type := b_ext_track ; 23 :
71457: LD_ADDR_OWVAR 42
71461: PUSH
71462: LD_INT 16
71464: ST_TO_ADDR
71465: GO 71696
71467: LD_INT 23
71469: DOUBLE
71470: EQUAL
71471: IFTRUE 71475
71473: GO 71486
71475: POP
// bc_type := b_ext_laser ; 24 :
71476: LD_ADDR_OWVAR 42
71480: PUSH
71481: LD_INT 25
71483: ST_TO_ADDR
71484: GO 71696
71486: LD_INT 24
71488: DOUBLE
71489: EQUAL
71490: IFTRUE 71494
71492: GO 71505
71494: POP
// bc_type := b_control_tower ; 25 :
71495: LD_ADDR_OWVAR 42
71499: PUSH
71500: LD_INT 36
71502: ST_TO_ADDR
71503: GO 71696
71505: LD_INT 25
71507: DOUBLE
71508: EQUAL
71509: IFTRUE 71513
71511: GO 71524
71513: POP
// bc_type := b_breastwork ; 26 :
71514: LD_ADDR_OWVAR 42
71518: PUSH
71519: LD_INT 31
71521: ST_TO_ADDR
71522: GO 71696
71524: LD_INT 26
71526: DOUBLE
71527: EQUAL
71528: IFTRUE 71532
71530: GO 71543
71532: POP
// bc_type := b_bunker ; 27 :
71533: LD_ADDR_OWVAR 42
71537: PUSH
71538: LD_INT 32
71540: ST_TO_ADDR
71541: GO 71696
71543: LD_INT 27
71545: DOUBLE
71546: EQUAL
71547: IFTRUE 71551
71549: GO 71562
71551: POP
// bc_type := b_turret ; 28 :
71552: LD_ADDR_OWVAR 42
71556: PUSH
71557: LD_INT 33
71559: ST_TO_ADDR
71560: GO 71696
71562: LD_INT 28
71564: DOUBLE
71565: EQUAL
71566: IFTRUE 71570
71568: GO 71581
71570: POP
// bc_type := b_armoury ; 29 :
71571: LD_ADDR_OWVAR 42
71575: PUSH
71576: LD_INT 4
71578: ST_TO_ADDR
71579: GO 71696
71581: LD_INT 29
71583: DOUBLE
71584: EQUAL
71585: IFTRUE 71589
71587: GO 71600
71589: POP
// bc_type := b_barracks ; 30 :
71590: LD_ADDR_OWVAR 42
71594: PUSH
71595: LD_INT 5
71597: ST_TO_ADDR
71598: GO 71696
71600: LD_INT 30
71602: DOUBLE
71603: EQUAL
71604: IFTRUE 71608
71606: GO 71619
71608: POP
// bc_type := b_solar_power ; 31 :
71609: LD_ADDR_OWVAR 42
71613: PUSH
71614: LD_INT 27
71616: ST_TO_ADDR
71617: GO 71696
71619: LD_INT 31
71621: DOUBLE
71622: EQUAL
71623: IFTRUE 71627
71625: GO 71638
71627: POP
// bc_type := b_oil_power ; 32 :
71628: LD_ADDR_OWVAR 42
71632: PUSH
71633: LD_INT 26
71635: ST_TO_ADDR
71636: GO 71696
71638: LD_INT 32
71640: DOUBLE
71641: EQUAL
71642: IFTRUE 71646
71644: GO 71657
71646: POP
// bc_type := b_siberite_power ; 33 :
71647: LD_ADDR_OWVAR 42
71651: PUSH
71652: LD_INT 28
71654: ST_TO_ADDR
71655: GO 71696
71657: LD_INT 33
71659: DOUBLE
71660: EQUAL
71661: IFTRUE 71665
71663: GO 71676
71665: POP
// bc_type := b_oil_mine ; 34 :
71666: LD_ADDR_OWVAR 42
71670: PUSH
71671: LD_INT 29
71673: ST_TO_ADDR
71674: GO 71696
71676: LD_INT 34
71678: DOUBLE
71679: EQUAL
71680: IFTRUE 71684
71682: GO 71695
71684: POP
// bc_type := b_siberite_mine ; end ;
71685: LD_ADDR_OWVAR 42
71689: PUSH
71690: LD_INT 30
71692: ST_TO_ADDR
71693: GO 71696
71695: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71696: LD_ADDR_VAR 0 8
71700: PUSH
71701: LD_VAR 0 5
71705: PPUSH
71706: LD_VAR 0 6
71710: PPUSH
71711: LD_VAR 0 3
71715: PPUSH
71716: CALL_OW 47
71720: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71721: LD_OWVAR 42
71725: PUSH
71726: LD_INT 32
71728: PUSH
71729: LD_INT 33
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: IN
71736: IFFALSE 71752
// PlaceWeaponTurret ( b , weapon ) ;
71738: LD_VAR 0 8
71742: PPUSH
71743: LD_VAR 0 4
71747: PPUSH
71748: CALL_OW 431
// end ;
71752: LD_VAR 0 7
71756: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71757: LD_INT 0
71759: PPUSH
71760: PPUSH
71761: PPUSH
71762: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71763: LD_ADDR_VAR 0 4
71767: PUSH
71768: LD_INT 22
71770: PUSH
71771: LD_OWVAR 2
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 2
71782: PUSH
71783: LD_INT 30
71785: PUSH
71786: LD_INT 0
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 30
71795: PUSH
71796: LD_INT 1
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: LIST
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PPUSH
71812: CALL_OW 69
71816: ST_TO_ADDR
// if not tmp then
71817: LD_VAR 0 4
71821: NOT
71822: IFFALSE 71826
// exit ;
71824: GO 71885
// for i in tmp do
71826: LD_ADDR_VAR 0 2
71830: PUSH
71831: LD_VAR 0 4
71835: PUSH
71836: FOR_IN
71837: IFFALSE 71883
// for j = 1 to 3 do
71839: LD_ADDR_VAR 0 3
71843: PUSH
71844: DOUBLE
71845: LD_INT 1
71847: DEC
71848: ST_TO_ADDR
71849: LD_INT 3
71851: PUSH
71852: FOR_TO
71853: IFFALSE 71879
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71855: LD_VAR 0 2
71859: PPUSH
71860: CALL_OW 274
71864: PPUSH
71865: LD_VAR 0 3
71869: PPUSH
71870: LD_INT 99999
71872: PPUSH
71873: CALL_OW 277
71877: GO 71852
71879: POP
71880: POP
71881: GO 71836
71883: POP
71884: POP
// end ;
71885: LD_VAR 0 1
71889: RET
// export function hHackSetLevel10 ; var i , j ; begin
71890: LD_INT 0
71892: PPUSH
71893: PPUSH
71894: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71895: LD_ADDR_VAR 0 2
71899: PUSH
71900: LD_INT 21
71902: PUSH
71903: LD_INT 1
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PPUSH
71910: CALL_OW 69
71914: PUSH
71915: FOR_IN
71916: IFFALSE 71968
// if IsSelected ( i ) then
71918: LD_VAR 0 2
71922: PPUSH
71923: CALL_OW 306
71927: IFFALSE 71966
// begin for j := 1 to 4 do
71929: LD_ADDR_VAR 0 3
71933: PUSH
71934: DOUBLE
71935: LD_INT 1
71937: DEC
71938: ST_TO_ADDR
71939: LD_INT 4
71941: PUSH
71942: FOR_TO
71943: IFFALSE 71964
// SetSkill ( i , j , 10 ) ;
71945: LD_VAR 0 2
71949: PPUSH
71950: LD_VAR 0 3
71954: PPUSH
71955: LD_INT 10
71957: PPUSH
71958: CALL_OW 237
71962: GO 71942
71964: POP
71965: POP
// end ;
71966: GO 71915
71968: POP
71969: POP
// end ;
71970: LD_VAR 0 1
71974: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71975: LD_INT 0
71977: PPUSH
71978: PPUSH
71979: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71980: LD_ADDR_VAR 0 2
71984: PUSH
71985: LD_INT 22
71987: PUSH
71988: LD_OWVAR 2
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 21
71999: PUSH
72000: LD_INT 1
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PPUSH
72011: CALL_OW 69
72015: PUSH
72016: FOR_IN
72017: IFFALSE 72058
// begin for j := 1 to 4 do
72019: LD_ADDR_VAR 0 3
72023: PUSH
72024: DOUBLE
72025: LD_INT 1
72027: DEC
72028: ST_TO_ADDR
72029: LD_INT 4
72031: PUSH
72032: FOR_TO
72033: IFFALSE 72054
// SetSkill ( i , j , 10 ) ;
72035: LD_VAR 0 2
72039: PPUSH
72040: LD_VAR 0 3
72044: PPUSH
72045: LD_INT 10
72047: PPUSH
72048: CALL_OW 237
72052: GO 72032
72054: POP
72055: POP
// end ;
72056: GO 72016
72058: POP
72059: POP
// end ;
72060: LD_VAR 0 1
72064: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
72065: LD_INT 0
72067: PPUSH
// uc_side := your_side ;
72068: LD_ADDR_OWVAR 20
72072: PUSH
72073: LD_OWVAR 2
72077: ST_TO_ADDR
// uc_nation := nation ;
72078: LD_ADDR_OWVAR 21
72082: PUSH
72083: LD_VAR 0 1
72087: ST_TO_ADDR
// InitHc ;
72088: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
72092: LD_INT 0
72094: PPUSH
72095: LD_VAR 0 2
72099: PPUSH
72100: LD_VAR 0 3
72104: PPUSH
72105: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
72109: LD_VAR 0 4
72113: PPUSH
72114: LD_VAR 0 5
72118: PPUSH
72119: CALL_OW 428
72123: PUSH
72124: LD_INT 0
72126: EQUAL
72127: IFFALSE 72151
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
72129: CALL_OW 44
72133: PPUSH
72134: LD_VAR 0 4
72138: PPUSH
72139: LD_VAR 0 5
72143: PPUSH
72144: LD_INT 1
72146: PPUSH
72147: CALL_OW 48
// end ;
72151: LD_VAR 0 6
72155: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
72156: LD_INT 0
72158: PPUSH
72159: PPUSH
// uc_side := your_side ;
72160: LD_ADDR_OWVAR 20
72164: PUSH
72165: LD_OWVAR 2
72169: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
72170: LD_VAR 0 1
72174: PUSH
72175: LD_INT 1
72177: PUSH
72178: LD_INT 2
72180: PUSH
72181: LD_INT 3
72183: PUSH
72184: LD_INT 4
72186: PUSH
72187: LD_INT 5
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: IN
72197: IFFALSE 72209
// uc_nation := nation_american else
72199: LD_ADDR_OWVAR 21
72203: PUSH
72204: LD_INT 1
72206: ST_TO_ADDR
72207: GO 72252
// if chassis in [ 11 , 12 , 13 , 14 ] then
72209: LD_VAR 0 1
72213: PUSH
72214: LD_INT 11
72216: PUSH
72217: LD_INT 12
72219: PUSH
72220: LD_INT 13
72222: PUSH
72223: LD_INT 14
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: IN
72232: IFFALSE 72244
// uc_nation := nation_arabian else
72234: LD_ADDR_OWVAR 21
72238: PUSH
72239: LD_INT 2
72241: ST_TO_ADDR
72242: GO 72252
// uc_nation := nation_russian ;
72244: LD_ADDR_OWVAR 21
72248: PUSH
72249: LD_INT 3
72251: ST_TO_ADDR
// vc_chassis := chassis ;
72252: LD_ADDR_OWVAR 37
72256: PUSH
72257: LD_VAR 0 1
72261: ST_TO_ADDR
// vc_engine := engine ;
72262: LD_ADDR_OWVAR 39
72266: PUSH
72267: LD_VAR 0 2
72271: ST_TO_ADDR
// vc_control := control ;
72272: LD_ADDR_OWVAR 38
72276: PUSH
72277: LD_VAR 0 3
72281: ST_TO_ADDR
// vc_weapon := weapon ;
72282: LD_ADDR_OWVAR 40
72286: PUSH
72287: LD_VAR 0 4
72291: ST_TO_ADDR
// un := CreateVehicle ;
72292: LD_ADDR_VAR 0 8
72296: PUSH
72297: CALL_OW 45
72301: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
72302: LD_VAR 0 8
72306: PPUSH
72307: LD_INT 0
72309: PPUSH
72310: LD_INT 5
72312: PPUSH
72313: CALL_OW 12
72317: PPUSH
72318: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
72322: LD_VAR 0 8
72326: PPUSH
72327: LD_VAR 0 5
72331: PPUSH
72332: LD_VAR 0 6
72336: PPUSH
72337: LD_INT 1
72339: PPUSH
72340: CALL_OW 48
// end ;
72344: LD_VAR 0 7
72348: RET
// export hInvincible ; every 1 do
72349: GO 72351
72351: DISABLE
// hInvincible := [ ] ;
72352: LD_ADDR_EXP 107
72356: PUSH
72357: EMPTY
72358: ST_TO_ADDR
72359: END
// every 10 do var i ;
72360: GO 72362
72362: DISABLE
72363: LD_INT 0
72365: PPUSH
// begin enable ;
72366: ENABLE
// if not hInvincible then
72367: LD_EXP 107
72371: NOT
72372: IFFALSE 72376
// exit ;
72374: GO 72420
// for i in hInvincible do
72376: LD_ADDR_VAR 0 1
72380: PUSH
72381: LD_EXP 107
72385: PUSH
72386: FOR_IN
72387: IFFALSE 72418
// if GetLives ( i ) < 1000 then
72389: LD_VAR 0 1
72393: PPUSH
72394: CALL_OW 256
72398: PUSH
72399: LD_INT 1000
72401: LESS
72402: IFFALSE 72416
// SetLives ( i , 1000 ) ;
72404: LD_VAR 0 1
72408: PPUSH
72409: LD_INT 1000
72411: PPUSH
72412: CALL_OW 234
72416: GO 72386
72418: POP
72419: POP
// end ;
72420: PPOPN 1
72422: END
// export function hHackInvincible ; var i ; begin
72423: LD_INT 0
72425: PPUSH
72426: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72427: LD_ADDR_VAR 0 2
72431: PUSH
72432: LD_INT 2
72434: PUSH
72435: LD_INT 21
72437: PUSH
72438: LD_INT 1
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 21
72447: PUSH
72448: LD_INT 2
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: LIST
72459: PPUSH
72460: CALL_OW 69
72464: PUSH
72465: FOR_IN
72466: IFFALSE 72527
// if IsSelected ( i ) then
72468: LD_VAR 0 2
72472: PPUSH
72473: CALL_OW 306
72477: IFFALSE 72525
// begin if i in hInvincible then
72479: LD_VAR 0 2
72483: PUSH
72484: LD_EXP 107
72488: IN
72489: IFFALSE 72509
// hInvincible := hInvincible diff i else
72491: LD_ADDR_EXP 107
72495: PUSH
72496: LD_EXP 107
72500: PUSH
72501: LD_VAR 0 2
72505: DIFF
72506: ST_TO_ADDR
72507: GO 72525
// hInvincible := hInvincible union i ;
72509: LD_ADDR_EXP 107
72513: PUSH
72514: LD_EXP 107
72518: PUSH
72519: LD_VAR 0 2
72523: UNION
72524: ST_TO_ADDR
// end ;
72525: GO 72465
72527: POP
72528: POP
// end ;
72529: LD_VAR 0 1
72533: RET
// export function hHackInvisible ; var i , j ; begin
72534: LD_INT 0
72536: PPUSH
72537: PPUSH
72538: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72539: LD_ADDR_VAR 0 2
72543: PUSH
72544: LD_INT 21
72546: PUSH
72547: LD_INT 1
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PPUSH
72554: CALL_OW 69
72558: PUSH
72559: FOR_IN
72560: IFFALSE 72584
// if IsSelected ( i ) then
72562: LD_VAR 0 2
72566: PPUSH
72567: CALL_OW 306
72571: IFFALSE 72582
// ComForceInvisible ( i ) ;
72573: LD_VAR 0 2
72577: PPUSH
72578: CALL_OW 496
72582: GO 72559
72584: POP
72585: POP
// end ;
72586: LD_VAR 0 1
72590: RET
// export function hHackChangeYourSide ; begin
72591: LD_INT 0
72593: PPUSH
// if your_side = 8 then
72594: LD_OWVAR 2
72598: PUSH
72599: LD_INT 8
72601: EQUAL
72602: IFFALSE 72614
// your_side := 0 else
72604: LD_ADDR_OWVAR 2
72608: PUSH
72609: LD_INT 0
72611: ST_TO_ADDR
72612: GO 72628
// your_side := your_side + 1 ;
72614: LD_ADDR_OWVAR 2
72618: PUSH
72619: LD_OWVAR 2
72623: PUSH
72624: LD_INT 1
72626: PLUS
72627: ST_TO_ADDR
// end ;
72628: LD_VAR 0 1
72632: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72633: LD_INT 0
72635: PPUSH
72636: PPUSH
72637: PPUSH
// for i in all_units do
72638: LD_ADDR_VAR 0 2
72642: PUSH
72643: LD_OWVAR 3
72647: PUSH
72648: FOR_IN
72649: IFFALSE 72727
// if IsSelected ( i ) then
72651: LD_VAR 0 2
72655: PPUSH
72656: CALL_OW 306
72660: IFFALSE 72725
// begin j := GetSide ( i ) ;
72662: LD_ADDR_VAR 0 3
72666: PUSH
72667: LD_VAR 0 2
72671: PPUSH
72672: CALL_OW 255
72676: ST_TO_ADDR
// if j = 8 then
72677: LD_VAR 0 3
72681: PUSH
72682: LD_INT 8
72684: EQUAL
72685: IFFALSE 72697
// j := 0 else
72687: LD_ADDR_VAR 0 3
72691: PUSH
72692: LD_INT 0
72694: ST_TO_ADDR
72695: GO 72711
// j := j + 1 ;
72697: LD_ADDR_VAR 0 3
72701: PUSH
72702: LD_VAR 0 3
72706: PUSH
72707: LD_INT 1
72709: PLUS
72710: ST_TO_ADDR
// SetSide ( i , j ) ;
72711: LD_VAR 0 2
72715: PPUSH
72716: LD_VAR 0 3
72720: PPUSH
72721: CALL_OW 235
// end ;
72725: GO 72648
72727: POP
72728: POP
// end ;
72729: LD_VAR 0 1
72733: RET
// export function hHackFog ; begin
72734: LD_INT 0
72736: PPUSH
// FogOff ( true ) ;
72737: LD_INT 1
72739: PPUSH
72740: CALL_OW 344
// end ;
72744: LD_VAR 0 1
72748: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72749: LD_INT 0
72751: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72752: LD_VAR 0 1
72756: PPUSH
72757: LD_VAR 0 2
72761: PPUSH
72762: LD_VAR 0 3
72766: PPUSH
72767: LD_INT 1
72769: PPUSH
72770: LD_INT 1
72772: PPUSH
72773: CALL_OW 483
// CenterOnXY ( x , y ) ;
72777: LD_VAR 0 2
72781: PPUSH
72782: LD_VAR 0 3
72786: PPUSH
72787: CALL_OW 84
// end ;
72791: LD_VAR 0 4
72795: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72796: LD_INT 0
72798: PPUSH
72799: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72800: LD_VAR 0 1
72804: NOT
72805: PUSH
72806: LD_VAR 0 2
72810: PPUSH
72811: LD_VAR 0 3
72815: PPUSH
72816: CALL_OW 488
72820: NOT
72821: OR
72822: PUSH
72823: LD_VAR 0 1
72827: PPUSH
72828: CALL_OW 266
72832: PUSH
72833: LD_INT 3
72835: NONEQUAL
72836: PUSH
72837: LD_VAR 0 1
72841: PPUSH
72842: CALL_OW 247
72846: PUSH
72847: LD_INT 1
72849: EQUAL
72850: NOT
72851: AND
72852: OR
72853: IFFALSE 72857
// exit ;
72855: GO 73006
// if GetType ( factory ) = unit_human then
72857: LD_VAR 0 1
72861: PPUSH
72862: CALL_OW 247
72866: PUSH
72867: LD_INT 1
72869: EQUAL
72870: IFFALSE 72887
// factory := IsInUnit ( factory ) ;
72872: LD_ADDR_VAR 0 1
72876: PUSH
72877: LD_VAR 0 1
72881: PPUSH
72882: CALL_OW 310
72886: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72887: LD_VAR 0 1
72891: PPUSH
72892: CALL_OW 266
72896: PUSH
72897: LD_INT 3
72899: NONEQUAL
72900: IFFALSE 72904
// exit ;
72902: GO 73006
// if HexInfo ( x , y ) = factory then
72904: LD_VAR 0 2
72908: PPUSH
72909: LD_VAR 0 3
72913: PPUSH
72914: CALL_OW 428
72918: PUSH
72919: LD_VAR 0 1
72923: EQUAL
72924: IFFALSE 72951
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72926: LD_ADDR_EXP 108
72930: PUSH
72931: LD_EXP 108
72935: PPUSH
72936: LD_VAR 0 1
72940: PPUSH
72941: LD_INT 0
72943: PPUSH
72944: CALL_OW 1
72948: ST_TO_ADDR
72949: GO 73002
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72951: LD_ADDR_EXP 108
72955: PUSH
72956: LD_EXP 108
72960: PPUSH
72961: LD_VAR 0 1
72965: PPUSH
72966: LD_VAR 0 1
72970: PPUSH
72971: CALL_OW 255
72975: PUSH
72976: LD_VAR 0 1
72980: PUSH
72981: LD_VAR 0 2
72985: PUSH
72986: LD_VAR 0 3
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: PPUSH
72997: CALL_OW 1
73001: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73002: CALL 73011 0 0
// end ;
73006: LD_VAR 0 4
73010: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
73011: LD_INT 0
73013: PPUSH
73014: PPUSH
73015: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
73016: LD_STRING resetFactoryWaypoint();
73018: PPUSH
73019: CALL_OW 559
// if factoryWaypoints then
73023: LD_EXP 108
73027: IFFALSE 73153
// begin list := PrepareArray ( factoryWaypoints ) ;
73029: LD_ADDR_VAR 0 3
73033: PUSH
73034: LD_EXP 108
73038: PPUSH
73039: CALL 57991 0 1
73043: ST_TO_ADDR
// for i := 1 to list do
73044: LD_ADDR_VAR 0 2
73048: PUSH
73049: DOUBLE
73050: LD_INT 1
73052: DEC
73053: ST_TO_ADDR
73054: LD_VAR 0 3
73058: PUSH
73059: FOR_TO
73060: IFFALSE 73151
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73062: LD_STRING setFactoryWaypointXY(
73064: PUSH
73065: LD_VAR 0 3
73069: PUSH
73070: LD_VAR 0 2
73074: ARRAY
73075: PUSH
73076: LD_INT 1
73078: ARRAY
73079: STR
73080: PUSH
73081: LD_STRING ,
73083: STR
73084: PUSH
73085: LD_VAR 0 3
73089: PUSH
73090: LD_VAR 0 2
73094: ARRAY
73095: PUSH
73096: LD_INT 2
73098: ARRAY
73099: STR
73100: PUSH
73101: LD_STRING ,
73103: STR
73104: PUSH
73105: LD_VAR 0 3
73109: PUSH
73110: LD_VAR 0 2
73114: ARRAY
73115: PUSH
73116: LD_INT 3
73118: ARRAY
73119: STR
73120: PUSH
73121: LD_STRING ,
73123: STR
73124: PUSH
73125: LD_VAR 0 3
73129: PUSH
73130: LD_VAR 0 2
73134: ARRAY
73135: PUSH
73136: LD_INT 4
73138: ARRAY
73139: STR
73140: PUSH
73141: LD_STRING )
73143: STR
73144: PPUSH
73145: CALL_OW 559
73149: GO 73059
73151: POP
73152: POP
// end ; end ;
73153: LD_VAR 0 1
73157: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
73158: LD_INT 0
73160: PPUSH
// if HexInfo ( x , y ) = warehouse then
73161: LD_VAR 0 2
73165: PPUSH
73166: LD_VAR 0 3
73170: PPUSH
73171: CALL_OW 428
73175: PUSH
73176: LD_VAR 0 1
73180: EQUAL
73181: IFFALSE 73208
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
73183: LD_ADDR_EXP 109
73187: PUSH
73188: LD_EXP 109
73192: PPUSH
73193: LD_VAR 0 1
73197: PPUSH
73198: LD_INT 0
73200: PPUSH
73201: CALL_OW 1
73205: ST_TO_ADDR
73206: GO 73259
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
73208: LD_ADDR_EXP 109
73212: PUSH
73213: LD_EXP 109
73217: PPUSH
73218: LD_VAR 0 1
73222: PPUSH
73223: LD_VAR 0 1
73227: PPUSH
73228: CALL_OW 255
73232: PUSH
73233: LD_VAR 0 1
73237: PUSH
73238: LD_VAR 0 2
73242: PUSH
73243: LD_VAR 0 3
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: PPUSH
73254: CALL_OW 1
73258: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
73259: CALL 73268 0 0
// end ;
73263: LD_VAR 0 4
73267: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
73268: LD_INT 0
73270: PPUSH
73271: PPUSH
73272: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
73273: LD_STRING resetWarehouseGatheringPoints();
73275: PPUSH
73276: CALL_OW 559
// if warehouseGatheringPoints then
73280: LD_EXP 109
73284: IFFALSE 73410
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
73286: LD_ADDR_VAR 0 3
73290: PUSH
73291: LD_EXP 109
73295: PPUSH
73296: CALL 57991 0 1
73300: ST_TO_ADDR
// for i := 1 to list do
73301: LD_ADDR_VAR 0 2
73305: PUSH
73306: DOUBLE
73307: LD_INT 1
73309: DEC
73310: ST_TO_ADDR
73311: LD_VAR 0 3
73315: PUSH
73316: FOR_TO
73317: IFFALSE 73408
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73319: LD_STRING setWarehouseGatheringPointXY(
73321: PUSH
73322: LD_VAR 0 3
73326: PUSH
73327: LD_VAR 0 2
73331: ARRAY
73332: PUSH
73333: LD_INT 1
73335: ARRAY
73336: STR
73337: PUSH
73338: LD_STRING ,
73340: STR
73341: PUSH
73342: LD_VAR 0 3
73346: PUSH
73347: LD_VAR 0 2
73351: ARRAY
73352: PUSH
73353: LD_INT 2
73355: ARRAY
73356: STR
73357: PUSH
73358: LD_STRING ,
73360: STR
73361: PUSH
73362: LD_VAR 0 3
73366: PUSH
73367: LD_VAR 0 2
73371: ARRAY
73372: PUSH
73373: LD_INT 3
73375: ARRAY
73376: STR
73377: PUSH
73378: LD_STRING ,
73380: STR
73381: PUSH
73382: LD_VAR 0 3
73386: PUSH
73387: LD_VAR 0 2
73391: ARRAY
73392: PUSH
73393: LD_INT 4
73395: ARRAY
73396: STR
73397: PUSH
73398: LD_STRING )
73400: STR
73401: PPUSH
73402: CALL_OW 559
73406: GO 73316
73408: POP
73409: POP
// end ; end ;
73410: LD_VAR 0 1
73414: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73415: LD_EXP 109
73419: IFFALSE 74104
73421: GO 73423
73423: DISABLE
73424: LD_INT 0
73426: PPUSH
73427: PPUSH
73428: PPUSH
73429: PPUSH
73430: PPUSH
73431: PPUSH
73432: PPUSH
73433: PPUSH
73434: PPUSH
// begin enable ;
73435: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73436: LD_ADDR_VAR 0 3
73440: PUSH
73441: LD_EXP 109
73445: PPUSH
73446: CALL 57991 0 1
73450: ST_TO_ADDR
// if not list then
73451: LD_VAR 0 3
73455: NOT
73456: IFFALSE 73460
// exit ;
73458: GO 74104
// for i := 1 to list do
73460: LD_ADDR_VAR 0 1
73464: PUSH
73465: DOUBLE
73466: LD_INT 1
73468: DEC
73469: ST_TO_ADDR
73470: LD_VAR 0 3
73474: PUSH
73475: FOR_TO
73476: IFFALSE 74102
// begin depot := list [ i ] [ 2 ] ;
73478: LD_ADDR_VAR 0 8
73482: PUSH
73483: LD_VAR 0 3
73487: PUSH
73488: LD_VAR 0 1
73492: ARRAY
73493: PUSH
73494: LD_INT 2
73496: ARRAY
73497: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73498: LD_ADDR_VAR 0 5
73502: PUSH
73503: LD_VAR 0 3
73507: PUSH
73508: LD_VAR 0 1
73512: ARRAY
73513: PUSH
73514: LD_INT 1
73516: ARRAY
73517: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73518: LD_VAR 0 8
73522: PPUSH
73523: CALL_OW 301
73527: PUSH
73528: LD_VAR 0 5
73532: PUSH
73533: LD_VAR 0 8
73537: PPUSH
73538: CALL_OW 255
73542: NONEQUAL
73543: OR
73544: IFFALSE 73573
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73546: LD_ADDR_EXP 109
73550: PUSH
73551: LD_EXP 109
73555: PPUSH
73556: LD_VAR 0 8
73560: PPUSH
73561: LD_INT 0
73563: PPUSH
73564: CALL_OW 1
73568: ST_TO_ADDR
// exit ;
73569: POP
73570: POP
73571: GO 74104
// end ; x := list [ i ] [ 3 ] ;
73573: LD_ADDR_VAR 0 6
73577: PUSH
73578: LD_VAR 0 3
73582: PUSH
73583: LD_VAR 0 1
73587: ARRAY
73588: PUSH
73589: LD_INT 3
73591: ARRAY
73592: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73593: LD_ADDR_VAR 0 7
73597: PUSH
73598: LD_VAR 0 3
73602: PUSH
73603: LD_VAR 0 1
73607: ARRAY
73608: PUSH
73609: LD_INT 4
73611: ARRAY
73612: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73613: LD_ADDR_VAR 0 9
73617: PUSH
73618: LD_VAR 0 6
73622: PPUSH
73623: LD_VAR 0 7
73627: PPUSH
73628: LD_INT 16
73630: PPUSH
73631: CALL 56579 0 3
73635: ST_TO_ADDR
// if not cratesNearbyPoint then
73636: LD_VAR 0 9
73640: NOT
73641: IFFALSE 73647
// exit ;
73643: POP
73644: POP
73645: GO 74104
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73647: LD_ADDR_VAR 0 4
73651: PUSH
73652: LD_INT 22
73654: PUSH
73655: LD_VAR 0 5
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 3
73666: PUSH
73667: LD_INT 60
73669: PUSH
73670: EMPTY
73671: LIST
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 91
73679: PUSH
73680: LD_VAR 0 8
73684: PUSH
73685: LD_INT 6
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 2
73695: PUSH
73696: LD_INT 25
73698: PUSH
73699: LD_INT 2
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 25
73708: PUSH
73709: LD_INT 16
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: LIST
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: PPUSH
73727: CALL_OW 69
73731: PUSH
73732: LD_VAR 0 8
73736: PPUSH
73737: CALL_OW 313
73741: PPUSH
73742: LD_INT 3
73744: PUSH
73745: LD_INT 60
73747: PUSH
73748: EMPTY
73749: LIST
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 2
73757: PUSH
73758: LD_INT 25
73760: PUSH
73761: LD_INT 2
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 25
73770: PUSH
73771: LD_INT 16
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: LIST
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: PPUSH
73787: CALL_OW 72
73791: UNION
73792: ST_TO_ADDR
// if tmp then
73793: LD_VAR 0 4
73797: IFFALSE 73877
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73799: LD_ADDR_VAR 0 4
73803: PUSH
73804: LD_VAR 0 4
73808: PPUSH
73809: LD_INT 3
73811: PPUSH
73812: CALL 54548 0 2
73816: ST_TO_ADDR
// for j in tmp do
73817: LD_ADDR_VAR 0 2
73821: PUSH
73822: LD_VAR 0 4
73826: PUSH
73827: FOR_IN
73828: IFFALSE 73871
// begin if IsInUnit ( j ) then
73830: LD_VAR 0 2
73834: PPUSH
73835: CALL_OW 310
73839: IFFALSE 73850
// ComExit ( j ) ;
73841: LD_VAR 0 2
73845: PPUSH
73846: CALL 54631 0 1
// AddComCollect ( j , x , y ) ;
73850: LD_VAR 0 2
73854: PPUSH
73855: LD_VAR 0 6
73859: PPUSH
73860: LD_VAR 0 7
73864: PPUSH
73865: CALL_OW 177
// end ;
73869: GO 73827
73871: POP
73872: POP
// exit ;
73873: POP
73874: POP
73875: GO 74104
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73877: LD_ADDR_VAR 0 4
73881: PUSH
73882: LD_INT 22
73884: PUSH
73885: LD_VAR 0 5
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: LD_INT 91
73896: PUSH
73897: LD_VAR 0 8
73901: PUSH
73902: LD_INT 8
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: LIST
73909: PUSH
73910: LD_INT 2
73912: PUSH
73913: LD_INT 34
73915: PUSH
73916: LD_INT 12
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PUSH
73923: LD_INT 34
73925: PUSH
73926: LD_INT 51
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PUSH
73933: LD_INT 34
73935: PUSH
73936: LD_INT 32
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: PUSH
73943: LD_INT 34
73945: PUSH
73946: LD_INT 89
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: LIST
73964: PPUSH
73965: CALL_OW 69
73969: ST_TO_ADDR
// if tmp then
73970: LD_VAR 0 4
73974: IFFALSE 74100
// begin for j in tmp do
73976: LD_ADDR_VAR 0 2
73980: PUSH
73981: LD_VAR 0 4
73985: PUSH
73986: FOR_IN
73987: IFFALSE 74098
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73989: LD_VAR 0 2
73993: PPUSH
73994: CALL_OW 262
73998: PUSH
73999: LD_INT 3
74001: EQUAL
74002: PUSH
74003: LD_VAR 0 2
74007: PPUSH
74008: CALL_OW 261
74012: PUSH
74013: LD_INT 20
74015: GREATER
74016: OR
74017: PUSH
74018: LD_VAR 0 2
74022: PPUSH
74023: CALL_OW 314
74027: NOT
74028: AND
74029: PUSH
74030: LD_VAR 0 2
74034: PPUSH
74035: CALL_OW 263
74039: PUSH
74040: LD_INT 1
74042: NONEQUAL
74043: PUSH
74044: LD_VAR 0 2
74048: PPUSH
74049: CALL_OW 311
74053: OR
74054: AND
74055: IFFALSE 74096
// begin ComCollect ( j , x , y ) ;
74057: LD_VAR 0 2
74061: PPUSH
74062: LD_VAR 0 6
74066: PPUSH
74067: LD_VAR 0 7
74071: PPUSH
74072: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
74076: LD_VAR 0 2
74080: PPUSH
74081: LD_VAR 0 8
74085: PPUSH
74086: CALL_OW 172
// exit ;
74090: POP
74091: POP
74092: POP
74093: POP
74094: GO 74104
// end ;
74096: GO 73986
74098: POP
74099: POP
// end ; end ;
74100: GO 73475
74102: POP
74103: POP
// end ; end_of_file
74104: PPOPN 9
74106: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74107: LD_VAR 0 1
74111: PPUSH
74112: LD_VAR 0 2
74116: PPUSH
74117: LD_VAR 0 3
74121: PPUSH
74122: LD_VAR 0 4
74126: PPUSH
74127: LD_VAR 0 5
74131: PPUSH
74132: LD_VAR 0 6
74136: PPUSH
74137: CALL 58460 0 6
// end ;
74141: PPOPN 6
74143: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74144: LD_INT 0
74146: PPUSH
// begin if not units then
74147: LD_VAR 0 1
74151: NOT
74152: IFFALSE 74156
// exit ;
74154: GO 74156
// end ;
74156: PPOPN 7
74158: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74159: CALL 58364 0 0
// end ; end_of_file
74163: PPOPN 1
74165: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74166: LD_VAR 0 1
74170: PUSH
74171: LD_INT 200
74173: DOUBLE
74174: GREATEREQUAL
74175: IFFALSE 74183
74177: LD_INT 299
74179: DOUBLE
74180: LESSEQUAL
74181: IFTRUE 74185
74183: GO 74217
74185: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74186: LD_VAR 0 1
74190: PPUSH
74191: LD_VAR 0 2
74195: PPUSH
74196: LD_VAR 0 3
74200: PPUSH
74201: LD_VAR 0 4
74205: PPUSH
74206: LD_VAR 0 5
74210: PPUSH
74211: CALL 74705 0 5
74215: GO 74294
74217: LD_INT 300
74219: DOUBLE
74220: GREATEREQUAL
74221: IFFALSE 74229
74223: LD_INT 399
74225: DOUBLE
74226: LESSEQUAL
74227: IFTRUE 74231
74229: GO 74293
74231: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74232: LD_VAR 0 1
74236: PPUSH
74237: LD_VAR 0 2
74241: PPUSH
74242: LD_VAR 0 3
74246: PPUSH
74247: LD_VAR 0 4
74251: PPUSH
74252: LD_VAR 0 5
74256: PPUSH
74257: LD_VAR 0 6
74261: PPUSH
74262: LD_VAR 0 7
74266: PPUSH
74267: LD_VAR 0 8
74271: PPUSH
74272: LD_VAR 0 9
74276: PPUSH
74277: LD_VAR 0 10
74281: PPUSH
74282: LD_VAR 0 11
74286: PPUSH
74287: CALL 70808 0 11
74291: GO 74294
74293: POP
// end ;
74294: PPOPN 11
74296: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74297: LD_VAR 0 1
74301: PPUSH
74302: LD_VAR 0 2
74306: PPUSH
74307: LD_VAR 0 3
74311: PPUSH
74312: LD_VAR 0 4
74316: PPUSH
74317: LD_VAR 0 5
74321: PPUSH
74322: CALL 74441 0 5
// end ; end_of_file
74326: PPOPN 5
74328: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
74329: LD_INT 0
74331: PPUSH
74332: PPUSH
74333: PPUSH
74334: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
74335: LD_VAR 0 1
74339: PPUSH
74340: CALL_OW 264
74344: PUSH
74345: LD_INT 91
74347: EQUAL
74348: IFFALSE 74420
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
74350: LD_INT 68
74352: PPUSH
74353: LD_VAR 0 1
74357: PPUSH
74358: CALL_OW 255
74362: PPUSH
74363: CALL_OW 321
74367: PUSH
74368: LD_INT 2
74370: EQUAL
74371: IFFALSE 74383
// eff := 70 else
74373: LD_ADDR_VAR 0 4
74377: PUSH
74378: LD_INT 70
74380: ST_TO_ADDR
74381: GO 74391
// eff := 30 ;
74383: LD_ADDR_VAR 0 4
74387: PUSH
74388: LD_INT 30
74390: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
74391: LD_VAR 0 1
74395: PPUSH
74396: CALL_OW 250
74400: PPUSH
74401: LD_VAR 0 1
74405: PPUSH
74406: CALL_OW 251
74410: PPUSH
74411: LD_VAR 0 4
74415: PPUSH
74416: CALL_OW 495
// end ; end ;
74420: LD_VAR 0 2
74424: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
74425: LD_INT 0
74427: PPUSH
// end ;
74428: LD_VAR 0 4
74432: RET
// export function SOS_Command ( cmd ) ; begin
74433: LD_INT 0
74435: PPUSH
// end ;
74436: LD_VAR 0 2
74440: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
74441: LD_INT 0
74443: PPUSH
// end ;
74444: LD_VAR 0 6
74448: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
74449: LD_INT 0
74451: PPUSH
74452: PPUSH
// if not vehicle or not factory then
74453: LD_VAR 0 1
74457: NOT
74458: PUSH
74459: LD_VAR 0 2
74463: NOT
74464: OR
74465: IFFALSE 74469
// exit ;
74467: GO 74700
// if factoryWaypoints >= factory then
74469: LD_EXP 108
74473: PUSH
74474: LD_VAR 0 2
74478: GREATEREQUAL
74479: IFFALSE 74700
// if factoryWaypoints [ factory ] then
74481: LD_EXP 108
74485: PUSH
74486: LD_VAR 0 2
74490: ARRAY
74491: IFFALSE 74700
// begin if GetControl ( vehicle ) = control_manual then
74493: LD_VAR 0 1
74497: PPUSH
74498: CALL_OW 263
74502: PUSH
74503: LD_INT 1
74505: EQUAL
74506: IFFALSE 74587
// begin driver := IsDrivenBy ( vehicle ) ;
74508: LD_ADDR_VAR 0 4
74512: PUSH
74513: LD_VAR 0 1
74517: PPUSH
74518: CALL_OW 311
74522: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74523: LD_VAR 0 4
74527: PPUSH
74528: LD_EXP 108
74532: PUSH
74533: LD_VAR 0 2
74537: ARRAY
74538: PUSH
74539: LD_INT 3
74541: ARRAY
74542: PPUSH
74543: LD_EXP 108
74547: PUSH
74548: LD_VAR 0 2
74552: ARRAY
74553: PUSH
74554: LD_INT 4
74556: ARRAY
74557: PPUSH
74558: CALL_OW 171
// AddComExitVehicle ( driver ) ;
74562: LD_VAR 0 4
74566: PPUSH
74567: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
74571: LD_VAR 0 4
74575: PPUSH
74576: LD_VAR 0 2
74580: PPUSH
74581: CALL_OW 180
// end else
74585: GO 74700
// if GetControl ( vehicle ) = control_remote then
74587: LD_VAR 0 1
74591: PPUSH
74592: CALL_OW 263
74596: PUSH
74597: LD_INT 2
74599: EQUAL
74600: IFFALSE 74661
// begin wait ( 0 0$2 ) ;
74602: LD_INT 70
74604: PPUSH
74605: CALL_OW 67
// if Connect ( vehicle ) then
74609: LD_VAR 0 1
74613: PPUSH
74614: CALL 24872 0 1
74618: IFFALSE 74659
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74620: LD_VAR 0 1
74624: PPUSH
74625: LD_EXP 108
74629: PUSH
74630: LD_VAR 0 2
74634: ARRAY
74635: PUSH
74636: LD_INT 3
74638: ARRAY
74639: PPUSH
74640: LD_EXP 108
74644: PUSH
74645: LD_VAR 0 2
74649: ARRAY
74650: PUSH
74651: LD_INT 4
74653: ARRAY
74654: PPUSH
74655: CALL_OW 171
// end else
74659: GO 74700
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74661: LD_VAR 0 1
74665: PPUSH
74666: LD_EXP 108
74670: PUSH
74671: LD_VAR 0 2
74675: ARRAY
74676: PUSH
74677: LD_INT 3
74679: ARRAY
74680: PPUSH
74681: LD_EXP 108
74685: PUSH
74686: LD_VAR 0 2
74690: ARRAY
74691: PUSH
74692: LD_INT 4
74694: ARRAY
74695: PPUSH
74696: CALL_OW 171
// end ; end ;
74700: LD_VAR 0 3
74704: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74705: LD_INT 0
74707: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74708: LD_VAR 0 1
74712: PUSH
74713: LD_INT 250
74715: EQUAL
74716: PUSH
74717: LD_VAR 0 2
74721: PPUSH
74722: CALL_OW 264
74726: PUSH
74727: LD_INT 81
74729: EQUAL
74730: AND
74731: IFFALSE 74752
// MinerPlaceMine ( unit , x , y ) ;
74733: LD_VAR 0 2
74737: PPUSH
74738: LD_VAR 0 4
74742: PPUSH
74743: LD_VAR 0 5
74747: PPUSH
74748: CALL 77137 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74752: LD_VAR 0 1
74756: PUSH
74757: LD_INT 251
74759: EQUAL
74760: PUSH
74761: LD_VAR 0 2
74765: PPUSH
74766: CALL_OW 264
74770: PUSH
74771: LD_INT 81
74773: EQUAL
74774: AND
74775: IFFALSE 74796
// MinerDetonateMine ( unit , x , y ) ;
74777: LD_VAR 0 2
74781: PPUSH
74782: LD_VAR 0 4
74786: PPUSH
74787: LD_VAR 0 5
74791: PPUSH
74792: CALL 77412 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74796: LD_VAR 0 1
74800: PUSH
74801: LD_INT 252
74803: EQUAL
74804: PUSH
74805: LD_VAR 0 2
74809: PPUSH
74810: CALL_OW 264
74814: PUSH
74815: LD_INT 81
74817: EQUAL
74818: AND
74819: IFFALSE 74840
// MinerCreateMinefield ( unit , x , y ) ;
74821: LD_VAR 0 2
74825: PPUSH
74826: LD_VAR 0 4
74830: PPUSH
74831: LD_VAR 0 5
74835: PPUSH
74836: CALL 77829 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74840: LD_VAR 0 1
74844: PUSH
74845: LD_INT 253
74847: EQUAL
74848: PUSH
74849: LD_VAR 0 2
74853: PPUSH
74854: CALL_OW 257
74858: PUSH
74859: LD_INT 5
74861: EQUAL
74862: AND
74863: IFFALSE 74884
// ComBinocular ( unit , x , y ) ;
74865: LD_VAR 0 2
74869: PPUSH
74870: LD_VAR 0 4
74874: PPUSH
74875: LD_VAR 0 5
74879: PPUSH
74880: CALL 78198 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74884: LD_VAR 0 1
74888: PUSH
74889: LD_INT 254
74891: EQUAL
74892: PUSH
74893: LD_VAR 0 2
74897: PPUSH
74898: CALL_OW 264
74902: PUSH
74903: LD_INT 99
74905: EQUAL
74906: AND
74907: PUSH
74908: LD_VAR 0 3
74912: PPUSH
74913: CALL_OW 263
74917: PUSH
74918: LD_INT 3
74920: EQUAL
74921: AND
74922: IFFALSE 74938
// HackDestroyVehicle ( unit , selectedUnit ) ;
74924: LD_VAR 0 2
74928: PPUSH
74929: LD_VAR 0 3
74933: PPUSH
74934: CALL 76501 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74938: LD_VAR 0 1
74942: PUSH
74943: LD_INT 255
74945: EQUAL
74946: PUSH
74947: LD_VAR 0 2
74951: PPUSH
74952: CALL_OW 264
74956: PUSH
74957: LD_INT 14
74959: PUSH
74960: LD_INT 53
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: IN
74967: AND
74968: PUSH
74969: LD_VAR 0 4
74973: PPUSH
74974: LD_VAR 0 5
74978: PPUSH
74979: CALL_OW 488
74983: AND
74984: IFFALSE 75008
// CutTreeXYR ( unit , x , y , 12 ) ;
74986: LD_VAR 0 2
74990: PPUSH
74991: LD_VAR 0 4
74995: PPUSH
74996: LD_VAR 0 5
75000: PPUSH
75001: LD_INT 12
75003: PPUSH
75004: CALL 75071 0 4
// if cmd = 256 then
75008: LD_VAR 0 1
75012: PUSH
75013: LD_INT 256
75015: EQUAL
75016: IFFALSE 75037
// SetFactoryWaypoint ( unit , x , y ) ;
75018: LD_VAR 0 2
75022: PPUSH
75023: LD_VAR 0 4
75027: PPUSH
75028: LD_VAR 0 5
75032: PPUSH
75033: CALL 72796 0 3
// if cmd = 257 then
75037: LD_VAR 0 1
75041: PUSH
75042: LD_INT 257
75044: EQUAL
75045: IFFALSE 75066
// SetWarehouseGatheringPoint ( unit , x , y ) ;
75047: LD_VAR 0 2
75051: PPUSH
75052: LD_VAR 0 4
75056: PPUSH
75057: LD_VAR 0 5
75061: PPUSH
75062: CALL 73158 0 3
// end ;
75066: LD_VAR 0 6
75070: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
75071: LD_INT 0
75073: PPUSH
75074: PPUSH
75075: PPUSH
75076: PPUSH
75077: PPUSH
75078: PPUSH
75079: PPUSH
75080: PPUSH
75081: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
75082: LD_VAR 0 1
75086: NOT
75087: PUSH
75088: LD_VAR 0 2
75092: PPUSH
75093: LD_VAR 0 3
75097: PPUSH
75098: CALL_OW 488
75102: NOT
75103: OR
75104: PUSH
75105: LD_VAR 0 4
75109: NOT
75110: OR
75111: IFFALSE 75115
// exit ;
75113: GO 75455
// list := [ ] ;
75115: LD_ADDR_VAR 0 13
75119: PUSH
75120: EMPTY
75121: ST_TO_ADDR
// if x - r < 0 then
75122: LD_VAR 0 2
75126: PUSH
75127: LD_VAR 0 4
75131: MINUS
75132: PUSH
75133: LD_INT 0
75135: LESS
75136: IFFALSE 75148
// min_x := 0 else
75138: LD_ADDR_VAR 0 7
75142: PUSH
75143: LD_INT 0
75145: ST_TO_ADDR
75146: GO 75164
// min_x := x - r ;
75148: LD_ADDR_VAR 0 7
75152: PUSH
75153: LD_VAR 0 2
75157: PUSH
75158: LD_VAR 0 4
75162: MINUS
75163: ST_TO_ADDR
// if y - r < 0 then
75164: LD_VAR 0 3
75168: PUSH
75169: LD_VAR 0 4
75173: MINUS
75174: PUSH
75175: LD_INT 0
75177: LESS
75178: IFFALSE 75190
// min_y := 0 else
75180: LD_ADDR_VAR 0 8
75184: PUSH
75185: LD_INT 0
75187: ST_TO_ADDR
75188: GO 75206
// min_y := y - r ;
75190: LD_ADDR_VAR 0 8
75194: PUSH
75195: LD_VAR 0 3
75199: PUSH
75200: LD_VAR 0 4
75204: MINUS
75205: ST_TO_ADDR
// max_x := x + r ;
75206: LD_ADDR_VAR 0 9
75210: PUSH
75211: LD_VAR 0 2
75215: PUSH
75216: LD_VAR 0 4
75220: PLUS
75221: ST_TO_ADDR
// max_y := y + r ;
75222: LD_ADDR_VAR 0 10
75226: PUSH
75227: LD_VAR 0 3
75231: PUSH
75232: LD_VAR 0 4
75236: PLUS
75237: ST_TO_ADDR
// for _x = min_x to max_x do
75238: LD_ADDR_VAR 0 11
75242: PUSH
75243: DOUBLE
75244: LD_VAR 0 7
75248: DEC
75249: ST_TO_ADDR
75250: LD_VAR 0 9
75254: PUSH
75255: FOR_TO
75256: IFFALSE 75373
// for _y = min_y to max_y do
75258: LD_ADDR_VAR 0 12
75262: PUSH
75263: DOUBLE
75264: LD_VAR 0 8
75268: DEC
75269: ST_TO_ADDR
75270: LD_VAR 0 10
75274: PUSH
75275: FOR_TO
75276: IFFALSE 75369
// begin if not ValidHex ( _x , _y ) then
75278: LD_VAR 0 11
75282: PPUSH
75283: LD_VAR 0 12
75287: PPUSH
75288: CALL_OW 488
75292: NOT
75293: IFFALSE 75297
// continue ;
75295: GO 75275
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75297: LD_VAR 0 11
75301: PPUSH
75302: LD_VAR 0 12
75306: PPUSH
75307: CALL_OW 351
75311: PUSH
75312: LD_VAR 0 11
75316: PPUSH
75317: LD_VAR 0 12
75321: PPUSH
75322: CALL_OW 554
75326: AND
75327: IFFALSE 75367
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75329: LD_ADDR_VAR 0 13
75333: PUSH
75334: LD_VAR 0 13
75338: PPUSH
75339: LD_VAR 0 13
75343: PUSH
75344: LD_INT 1
75346: PLUS
75347: PPUSH
75348: LD_VAR 0 11
75352: PUSH
75353: LD_VAR 0 12
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PPUSH
75362: CALL_OW 2
75366: ST_TO_ADDR
// end ;
75367: GO 75275
75369: POP
75370: POP
75371: GO 75255
75373: POP
75374: POP
// if not list then
75375: LD_VAR 0 13
75379: NOT
75380: IFFALSE 75384
// exit ;
75382: GO 75455
// for i in list do
75384: LD_ADDR_VAR 0 6
75388: PUSH
75389: LD_VAR 0 13
75393: PUSH
75394: FOR_IN
75395: IFFALSE 75453
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
75397: LD_VAR 0 1
75401: PPUSH
75402: LD_STRING M
75404: PUSH
75405: LD_VAR 0 6
75409: PUSH
75410: LD_INT 1
75412: ARRAY
75413: PUSH
75414: LD_VAR 0 6
75418: PUSH
75419: LD_INT 2
75421: ARRAY
75422: PUSH
75423: LD_INT 0
75425: PUSH
75426: LD_INT 0
75428: PUSH
75429: LD_INT 0
75431: PUSH
75432: LD_INT 0
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: PUSH
75444: EMPTY
75445: LIST
75446: PPUSH
75447: CALL_OW 447
75451: GO 75394
75453: POP
75454: POP
// end ;
75455: LD_VAR 0 5
75459: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75460: LD_EXP 111
75464: NOT
75465: IFFALSE 75515
75467: GO 75469
75469: DISABLE
// begin initHack := true ;
75470: LD_ADDR_EXP 111
75474: PUSH
75475: LD_INT 1
75477: ST_TO_ADDR
// hackTanks := [ ] ;
75478: LD_ADDR_EXP 112
75482: PUSH
75483: EMPTY
75484: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75485: LD_ADDR_EXP 113
75489: PUSH
75490: EMPTY
75491: ST_TO_ADDR
// hackLimit := 3 ;
75492: LD_ADDR_EXP 114
75496: PUSH
75497: LD_INT 3
75499: ST_TO_ADDR
// hackDist := 12 ;
75500: LD_ADDR_EXP 115
75504: PUSH
75505: LD_INT 12
75507: ST_TO_ADDR
// hackCounter := [ ] ;
75508: LD_ADDR_EXP 116
75512: PUSH
75513: EMPTY
75514: ST_TO_ADDR
// end ;
75515: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75516: LD_EXP 111
75520: PUSH
75521: LD_INT 34
75523: PUSH
75524: LD_INT 99
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: PPUSH
75531: CALL_OW 69
75535: AND
75536: IFFALSE 75789
75538: GO 75540
75540: DISABLE
75541: LD_INT 0
75543: PPUSH
75544: PPUSH
// begin enable ;
75545: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75546: LD_ADDR_VAR 0 1
75550: PUSH
75551: LD_INT 34
75553: PUSH
75554: LD_INT 99
75556: PUSH
75557: EMPTY
75558: LIST
75559: LIST
75560: PPUSH
75561: CALL_OW 69
75565: PUSH
75566: FOR_IN
75567: IFFALSE 75787
// begin if not i in hackTanks then
75569: LD_VAR 0 1
75573: PUSH
75574: LD_EXP 112
75578: IN
75579: NOT
75580: IFFALSE 75663
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75582: LD_ADDR_EXP 112
75586: PUSH
75587: LD_EXP 112
75591: PPUSH
75592: LD_EXP 112
75596: PUSH
75597: LD_INT 1
75599: PLUS
75600: PPUSH
75601: LD_VAR 0 1
75605: PPUSH
75606: CALL_OW 1
75610: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75611: LD_ADDR_EXP 113
75615: PUSH
75616: LD_EXP 113
75620: PPUSH
75621: LD_EXP 113
75625: PUSH
75626: LD_INT 1
75628: PLUS
75629: PPUSH
75630: EMPTY
75631: PPUSH
75632: CALL_OW 1
75636: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75637: LD_ADDR_EXP 116
75641: PUSH
75642: LD_EXP 116
75646: PPUSH
75647: LD_EXP 116
75651: PUSH
75652: LD_INT 1
75654: PLUS
75655: PPUSH
75656: EMPTY
75657: PPUSH
75658: CALL_OW 1
75662: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75663: LD_VAR 0 1
75667: PPUSH
75668: CALL_OW 302
75672: NOT
75673: IFFALSE 75686
// begin HackUnlinkAll ( i ) ;
75675: LD_VAR 0 1
75679: PPUSH
75680: CALL 75792 0 1
// continue ;
75684: GO 75566
// end ; HackCheckCapturedStatus ( i ) ;
75686: LD_VAR 0 1
75690: PPUSH
75691: CALL 76235 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75695: LD_ADDR_VAR 0 2
75699: PUSH
75700: LD_INT 81
75702: PUSH
75703: LD_VAR 0 1
75707: PPUSH
75708: CALL_OW 255
75712: PUSH
75713: EMPTY
75714: LIST
75715: LIST
75716: PUSH
75717: LD_INT 33
75719: PUSH
75720: LD_INT 3
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: PUSH
75727: LD_INT 91
75729: PUSH
75730: LD_VAR 0 1
75734: PUSH
75735: LD_EXP 115
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: LIST
75744: PUSH
75745: LD_INT 50
75747: PUSH
75748: EMPTY
75749: LIST
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: PPUSH
75757: CALL_OW 69
75761: ST_TO_ADDR
// if not tmp then
75762: LD_VAR 0 2
75766: NOT
75767: IFFALSE 75771
// continue ;
75769: GO 75566
// HackLink ( i , tmp ) ;
75771: LD_VAR 0 1
75775: PPUSH
75776: LD_VAR 0 2
75780: PPUSH
75781: CALL 75928 0 2
// end ;
75785: GO 75566
75787: POP
75788: POP
// end ;
75789: PPOPN 2
75791: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75792: LD_INT 0
75794: PPUSH
75795: PPUSH
75796: PPUSH
// if not hack in hackTanks then
75797: LD_VAR 0 1
75801: PUSH
75802: LD_EXP 112
75806: IN
75807: NOT
75808: IFFALSE 75812
// exit ;
75810: GO 75923
// index := GetElementIndex ( hackTanks , hack ) ;
75812: LD_ADDR_VAR 0 4
75816: PUSH
75817: LD_EXP 112
75821: PPUSH
75822: LD_VAR 0 1
75826: PPUSH
75827: CALL 21679 0 2
75831: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75832: LD_EXP 113
75836: PUSH
75837: LD_VAR 0 4
75841: ARRAY
75842: IFFALSE 75923
// begin for i in hackTanksCaptured [ index ] do
75844: LD_ADDR_VAR 0 3
75848: PUSH
75849: LD_EXP 113
75853: PUSH
75854: LD_VAR 0 4
75858: ARRAY
75859: PUSH
75860: FOR_IN
75861: IFFALSE 75887
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75863: LD_VAR 0 3
75867: PUSH
75868: LD_INT 1
75870: ARRAY
75871: PPUSH
75872: LD_VAR 0 3
75876: PUSH
75877: LD_INT 2
75879: ARRAY
75880: PPUSH
75881: CALL_OW 235
75885: GO 75860
75887: POP
75888: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75889: LD_ADDR_EXP 113
75893: PUSH
75894: LD_EXP 113
75898: PPUSH
75899: LD_VAR 0 4
75903: PPUSH
75904: EMPTY
75905: PPUSH
75906: CALL_OW 1
75910: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75911: LD_VAR 0 1
75915: PPUSH
75916: LD_INT 0
75918: PPUSH
75919: CALL_OW 505
// end ; end ;
75923: LD_VAR 0 2
75927: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75928: LD_INT 0
75930: PPUSH
75931: PPUSH
75932: PPUSH
// if not hack in hackTanks or not vehicles then
75933: LD_VAR 0 1
75937: PUSH
75938: LD_EXP 112
75942: IN
75943: NOT
75944: PUSH
75945: LD_VAR 0 2
75949: NOT
75950: OR
75951: IFFALSE 75955
// exit ;
75953: GO 76230
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75955: LD_ADDR_VAR 0 2
75959: PUSH
75960: LD_VAR 0 1
75964: PPUSH
75965: LD_VAR 0 2
75969: PPUSH
75970: LD_INT 1
75972: PPUSH
75973: LD_INT 1
75975: PPUSH
75976: CALL 22329 0 4
75980: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
75981: LD_ADDR_VAR 0 5
75985: PUSH
75986: LD_EXP 112
75990: PPUSH
75991: LD_VAR 0 1
75995: PPUSH
75996: CALL 21679 0 2
76000: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
76001: LD_EXP 113
76005: PUSH
76006: LD_VAR 0 5
76010: ARRAY
76011: PUSH
76012: LD_EXP 114
76016: LESS
76017: IFFALSE 76206
// begin for i := 1 to vehicles do
76019: LD_ADDR_VAR 0 4
76023: PUSH
76024: DOUBLE
76025: LD_INT 1
76027: DEC
76028: ST_TO_ADDR
76029: LD_VAR 0 2
76033: PUSH
76034: FOR_TO
76035: IFFALSE 76204
// begin if hackTanksCaptured [ index ] = hackLimit then
76037: LD_EXP 113
76041: PUSH
76042: LD_VAR 0 5
76046: ARRAY
76047: PUSH
76048: LD_EXP 114
76052: EQUAL
76053: IFFALSE 76057
// break ;
76055: GO 76204
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
76057: LD_ADDR_EXP 116
76061: PUSH
76062: LD_EXP 116
76066: PPUSH
76067: LD_VAR 0 5
76071: PPUSH
76072: LD_EXP 116
76076: PUSH
76077: LD_VAR 0 5
76081: ARRAY
76082: PUSH
76083: LD_INT 1
76085: PLUS
76086: PPUSH
76087: CALL_OW 1
76091: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
76092: LD_ADDR_EXP 113
76096: PUSH
76097: LD_EXP 113
76101: PPUSH
76102: LD_VAR 0 5
76106: PUSH
76107: LD_EXP 113
76111: PUSH
76112: LD_VAR 0 5
76116: ARRAY
76117: PUSH
76118: LD_INT 1
76120: PLUS
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PPUSH
76126: LD_VAR 0 2
76130: PUSH
76131: LD_VAR 0 4
76135: ARRAY
76136: PUSH
76137: LD_VAR 0 2
76141: PUSH
76142: LD_VAR 0 4
76146: ARRAY
76147: PPUSH
76148: CALL_OW 255
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PPUSH
76157: CALL 21894 0 3
76161: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76162: LD_VAR 0 2
76166: PUSH
76167: LD_VAR 0 4
76171: ARRAY
76172: PPUSH
76173: LD_VAR 0 1
76177: PPUSH
76178: CALL_OW 255
76182: PPUSH
76183: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76187: LD_VAR 0 2
76191: PUSH
76192: LD_VAR 0 4
76196: ARRAY
76197: PPUSH
76198: CALL_OW 141
// end ;
76202: GO 76034
76204: POP
76205: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76206: LD_VAR 0 1
76210: PPUSH
76211: LD_EXP 113
76215: PUSH
76216: LD_VAR 0 5
76220: ARRAY
76221: PUSH
76222: LD_INT 0
76224: PLUS
76225: PPUSH
76226: CALL_OW 505
// end ;
76230: LD_VAR 0 3
76234: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76235: LD_INT 0
76237: PPUSH
76238: PPUSH
76239: PPUSH
76240: PPUSH
// if not hack in hackTanks then
76241: LD_VAR 0 1
76245: PUSH
76246: LD_EXP 112
76250: IN
76251: NOT
76252: IFFALSE 76256
// exit ;
76254: GO 76496
// index := GetElementIndex ( hackTanks , hack ) ;
76256: LD_ADDR_VAR 0 4
76260: PUSH
76261: LD_EXP 112
76265: PPUSH
76266: LD_VAR 0 1
76270: PPUSH
76271: CALL 21679 0 2
76275: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76276: LD_ADDR_VAR 0 3
76280: PUSH
76281: DOUBLE
76282: LD_EXP 113
76286: PUSH
76287: LD_VAR 0 4
76291: ARRAY
76292: INC
76293: ST_TO_ADDR
76294: LD_INT 1
76296: PUSH
76297: FOR_DOWNTO
76298: IFFALSE 76470
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76300: LD_ADDR_VAR 0 5
76304: PUSH
76305: LD_EXP 113
76309: PUSH
76310: LD_VAR 0 4
76314: ARRAY
76315: PUSH
76316: LD_VAR 0 3
76320: ARRAY
76321: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76322: LD_VAR 0 5
76326: PUSH
76327: LD_INT 1
76329: ARRAY
76330: PPUSH
76331: CALL_OW 302
76335: NOT
76336: PUSH
76337: LD_VAR 0 5
76341: PUSH
76342: LD_INT 1
76344: ARRAY
76345: PPUSH
76346: CALL_OW 255
76350: PUSH
76351: LD_VAR 0 1
76355: PPUSH
76356: CALL_OW 255
76360: NONEQUAL
76361: OR
76362: IFFALSE 76468
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76364: LD_VAR 0 5
76368: PUSH
76369: LD_INT 1
76371: ARRAY
76372: PPUSH
76373: CALL_OW 305
76377: PUSH
76378: LD_VAR 0 5
76382: PUSH
76383: LD_INT 1
76385: ARRAY
76386: PPUSH
76387: CALL_OW 255
76391: PUSH
76392: LD_VAR 0 1
76396: PPUSH
76397: CALL_OW 255
76401: EQUAL
76402: AND
76403: IFFALSE 76427
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76405: LD_VAR 0 5
76409: PUSH
76410: LD_INT 1
76412: ARRAY
76413: PPUSH
76414: LD_VAR 0 5
76418: PUSH
76419: LD_INT 2
76421: ARRAY
76422: PPUSH
76423: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76427: LD_ADDR_EXP 113
76431: PUSH
76432: LD_EXP 113
76436: PPUSH
76437: LD_VAR 0 4
76441: PPUSH
76442: LD_EXP 113
76446: PUSH
76447: LD_VAR 0 4
76451: ARRAY
76452: PPUSH
76453: LD_VAR 0 3
76457: PPUSH
76458: CALL_OW 3
76462: PPUSH
76463: CALL_OW 1
76467: ST_TO_ADDR
// end ; end ;
76468: GO 76297
76470: POP
76471: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76472: LD_VAR 0 1
76476: PPUSH
76477: LD_EXP 113
76481: PUSH
76482: LD_VAR 0 4
76486: ARRAY
76487: PUSH
76488: LD_INT 0
76490: PLUS
76491: PPUSH
76492: CALL_OW 505
// end ;
76496: LD_VAR 0 2
76500: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76501: LD_INT 0
76503: PPUSH
76504: PPUSH
76505: PPUSH
76506: PPUSH
// if not hack in hackTanks then
76507: LD_VAR 0 1
76511: PUSH
76512: LD_EXP 112
76516: IN
76517: NOT
76518: IFFALSE 76522
// exit ;
76520: GO 76607
// index := GetElementIndex ( hackTanks , hack ) ;
76522: LD_ADDR_VAR 0 5
76526: PUSH
76527: LD_EXP 112
76531: PPUSH
76532: LD_VAR 0 1
76536: PPUSH
76537: CALL 21679 0 2
76541: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76542: LD_ADDR_VAR 0 4
76546: PUSH
76547: DOUBLE
76548: LD_INT 1
76550: DEC
76551: ST_TO_ADDR
76552: LD_EXP 113
76556: PUSH
76557: LD_VAR 0 5
76561: ARRAY
76562: PUSH
76563: FOR_TO
76564: IFFALSE 76605
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76566: LD_EXP 113
76570: PUSH
76571: LD_VAR 0 5
76575: ARRAY
76576: PUSH
76577: LD_VAR 0 4
76581: ARRAY
76582: PUSH
76583: LD_INT 1
76585: ARRAY
76586: PUSH
76587: LD_VAR 0 2
76591: EQUAL
76592: IFFALSE 76603
// KillUnit ( vehicle ) ;
76594: LD_VAR 0 2
76598: PPUSH
76599: CALL_OW 66
76603: GO 76563
76605: POP
76606: POP
// end ;
76607: LD_VAR 0 3
76611: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76612: LD_EXP 117
76616: NOT
76617: IFFALSE 76652
76619: GO 76621
76621: DISABLE
// begin initMiner := true ;
76622: LD_ADDR_EXP 117
76626: PUSH
76627: LD_INT 1
76629: ST_TO_ADDR
// minersList := [ ] ;
76630: LD_ADDR_EXP 118
76634: PUSH
76635: EMPTY
76636: ST_TO_ADDR
// minerMinesList := [ ] ;
76637: LD_ADDR_EXP 119
76641: PUSH
76642: EMPTY
76643: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76644: LD_ADDR_EXP 120
76648: PUSH
76649: LD_INT 5
76651: ST_TO_ADDR
// end ;
76652: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76653: LD_EXP 117
76657: PUSH
76658: LD_INT 34
76660: PUSH
76661: LD_INT 81
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: PPUSH
76668: CALL_OW 69
76672: AND
76673: IFFALSE 77134
76675: GO 76677
76677: DISABLE
76678: LD_INT 0
76680: PPUSH
76681: PPUSH
76682: PPUSH
76683: PPUSH
// begin enable ;
76684: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76685: LD_ADDR_VAR 0 1
76689: PUSH
76690: LD_INT 34
76692: PUSH
76693: LD_INT 81
76695: PUSH
76696: EMPTY
76697: LIST
76698: LIST
76699: PPUSH
76700: CALL_OW 69
76704: PUSH
76705: FOR_IN
76706: IFFALSE 76778
// begin if not i in minersList then
76708: LD_VAR 0 1
76712: PUSH
76713: LD_EXP 118
76717: IN
76718: NOT
76719: IFFALSE 76776
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76721: LD_ADDR_EXP 118
76725: PUSH
76726: LD_EXP 118
76730: PPUSH
76731: LD_EXP 118
76735: PUSH
76736: LD_INT 1
76738: PLUS
76739: PPUSH
76740: LD_VAR 0 1
76744: PPUSH
76745: CALL_OW 1
76749: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76750: LD_ADDR_EXP 119
76754: PUSH
76755: LD_EXP 119
76759: PPUSH
76760: LD_EXP 119
76764: PUSH
76765: LD_INT 1
76767: PLUS
76768: PPUSH
76769: EMPTY
76770: PPUSH
76771: CALL_OW 1
76775: ST_TO_ADDR
// end end ;
76776: GO 76705
76778: POP
76779: POP
// for i := minerMinesList downto 1 do
76780: LD_ADDR_VAR 0 1
76784: PUSH
76785: DOUBLE
76786: LD_EXP 119
76790: INC
76791: ST_TO_ADDR
76792: LD_INT 1
76794: PUSH
76795: FOR_DOWNTO
76796: IFFALSE 77132
// begin if IsLive ( minersList [ i ] ) then
76798: LD_EXP 118
76802: PUSH
76803: LD_VAR 0 1
76807: ARRAY
76808: PPUSH
76809: CALL_OW 300
76813: IFFALSE 76841
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76815: LD_EXP 118
76819: PUSH
76820: LD_VAR 0 1
76824: ARRAY
76825: PPUSH
76826: LD_EXP 119
76830: PUSH
76831: LD_VAR 0 1
76835: ARRAY
76836: PPUSH
76837: CALL_OW 505
// if not minerMinesList [ i ] then
76841: LD_EXP 119
76845: PUSH
76846: LD_VAR 0 1
76850: ARRAY
76851: NOT
76852: IFFALSE 76856
// continue ;
76854: GO 76795
// for j := minerMinesList [ i ] downto 1 do
76856: LD_ADDR_VAR 0 2
76860: PUSH
76861: DOUBLE
76862: LD_EXP 119
76866: PUSH
76867: LD_VAR 0 1
76871: ARRAY
76872: INC
76873: ST_TO_ADDR
76874: LD_INT 1
76876: PUSH
76877: FOR_DOWNTO
76878: IFFALSE 77128
// begin side := GetSide ( minersList [ i ] ) ;
76880: LD_ADDR_VAR 0 3
76884: PUSH
76885: LD_EXP 118
76889: PUSH
76890: LD_VAR 0 1
76894: ARRAY
76895: PPUSH
76896: CALL_OW 255
76900: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76901: LD_ADDR_VAR 0 4
76905: PUSH
76906: LD_EXP 119
76910: PUSH
76911: LD_VAR 0 1
76915: ARRAY
76916: PUSH
76917: LD_VAR 0 2
76921: ARRAY
76922: PUSH
76923: LD_INT 1
76925: ARRAY
76926: PPUSH
76927: LD_EXP 119
76931: PUSH
76932: LD_VAR 0 1
76936: ARRAY
76937: PUSH
76938: LD_VAR 0 2
76942: ARRAY
76943: PUSH
76944: LD_INT 2
76946: ARRAY
76947: PPUSH
76948: CALL_OW 428
76952: ST_TO_ADDR
// if not tmp then
76953: LD_VAR 0 4
76957: NOT
76958: IFFALSE 76962
// continue ;
76960: GO 76877
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76962: LD_VAR 0 4
76966: PUSH
76967: LD_INT 81
76969: PUSH
76970: LD_VAR 0 3
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PPUSH
76979: CALL_OW 69
76983: IN
76984: PUSH
76985: LD_EXP 119
76989: PUSH
76990: LD_VAR 0 1
76994: ARRAY
76995: PUSH
76996: LD_VAR 0 2
77000: ARRAY
77001: PUSH
77002: LD_INT 1
77004: ARRAY
77005: PPUSH
77006: LD_EXP 119
77010: PUSH
77011: LD_VAR 0 1
77015: ARRAY
77016: PUSH
77017: LD_VAR 0 2
77021: ARRAY
77022: PUSH
77023: LD_INT 2
77025: ARRAY
77026: PPUSH
77027: CALL_OW 458
77031: AND
77032: IFFALSE 77126
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
77034: LD_EXP 119
77038: PUSH
77039: LD_VAR 0 1
77043: ARRAY
77044: PUSH
77045: LD_VAR 0 2
77049: ARRAY
77050: PUSH
77051: LD_INT 1
77053: ARRAY
77054: PPUSH
77055: LD_EXP 119
77059: PUSH
77060: LD_VAR 0 1
77064: ARRAY
77065: PUSH
77066: LD_VAR 0 2
77070: ARRAY
77071: PUSH
77072: LD_INT 2
77074: ARRAY
77075: PPUSH
77076: LD_VAR 0 3
77080: PPUSH
77081: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
77085: LD_ADDR_EXP 119
77089: PUSH
77090: LD_EXP 119
77094: PPUSH
77095: LD_VAR 0 1
77099: PPUSH
77100: LD_EXP 119
77104: PUSH
77105: LD_VAR 0 1
77109: ARRAY
77110: PPUSH
77111: LD_VAR 0 2
77115: PPUSH
77116: CALL_OW 3
77120: PPUSH
77121: CALL_OW 1
77125: ST_TO_ADDR
// end ; end ;
77126: GO 76877
77128: POP
77129: POP
// end ;
77130: GO 76795
77132: POP
77133: POP
// end ;
77134: PPOPN 4
77136: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77137: LD_INT 0
77139: PPUSH
77140: PPUSH
// result := false ;
77141: LD_ADDR_VAR 0 4
77145: PUSH
77146: LD_INT 0
77148: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77149: LD_VAR 0 1
77153: PPUSH
77154: CALL_OW 264
77158: PUSH
77159: LD_INT 81
77161: EQUAL
77162: NOT
77163: IFFALSE 77167
// exit ;
77165: GO 77407
// index := GetElementIndex ( minersList , unit ) ;
77167: LD_ADDR_VAR 0 5
77171: PUSH
77172: LD_EXP 118
77176: PPUSH
77177: LD_VAR 0 1
77181: PPUSH
77182: CALL 21679 0 2
77186: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77187: LD_EXP 119
77191: PUSH
77192: LD_VAR 0 5
77196: ARRAY
77197: PUSH
77198: LD_EXP 120
77202: GREATEREQUAL
77203: IFFALSE 77207
// exit ;
77205: GO 77407
// ComMoveXY ( unit , x , y ) ;
77207: LD_VAR 0 1
77211: PPUSH
77212: LD_VAR 0 2
77216: PPUSH
77217: LD_VAR 0 3
77221: PPUSH
77222: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77226: LD_INT 35
77228: PPUSH
77229: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77233: LD_VAR 0 1
77237: PPUSH
77238: LD_VAR 0 2
77242: PPUSH
77243: LD_VAR 0 3
77247: PPUSH
77248: CALL 53043 0 3
77252: NOT
77253: PUSH
77254: LD_VAR 0 1
77258: PPUSH
77259: CALL_OW 314
77263: AND
77264: IFFALSE 77268
// exit ;
77266: GO 77407
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77268: LD_VAR 0 2
77272: PPUSH
77273: LD_VAR 0 3
77277: PPUSH
77278: CALL_OW 428
77282: PUSH
77283: LD_VAR 0 1
77287: EQUAL
77288: PUSH
77289: LD_VAR 0 1
77293: PPUSH
77294: CALL_OW 314
77298: NOT
77299: AND
77300: IFFALSE 77226
// PlaySoundXY ( x , y , PlantMine ) ;
77302: LD_VAR 0 2
77306: PPUSH
77307: LD_VAR 0 3
77311: PPUSH
77312: LD_STRING PlantMine
77314: PPUSH
77315: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77319: LD_VAR 0 2
77323: PPUSH
77324: LD_VAR 0 3
77328: PPUSH
77329: LD_VAR 0 1
77333: PPUSH
77334: CALL_OW 255
77338: PPUSH
77339: LD_INT 0
77341: PPUSH
77342: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77346: LD_ADDR_EXP 119
77350: PUSH
77351: LD_EXP 119
77355: PPUSH
77356: LD_VAR 0 5
77360: PUSH
77361: LD_EXP 119
77365: PUSH
77366: LD_VAR 0 5
77370: ARRAY
77371: PUSH
77372: LD_INT 1
77374: PLUS
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: PPUSH
77380: LD_VAR 0 2
77384: PUSH
77385: LD_VAR 0 3
77389: PUSH
77390: EMPTY
77391: LIST
77392: LIST
77393: PPUSH
77394: CALL 21894 0 3
77398: ST_TO_ADDR
// result := true ;
77399: LD_ADDR_VAR 0 4
77403: PUSH
77404: LD_INT 1
77406: ST_TO_ADDR
// end ;
77407: LD_VAR 0 4
77411: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77412: LD_INT 0
77414: PPUSH
77415: PPUSH
77416: PPUSH
// if not unit in minersList then
77417: LD_VAR 0 1
77421: PUSH
77422: LD_EXP 118
77426: IN
77427: NOT
77428: IFFALSE 77432
// exit ;
77430: GO 77824
// index := GetElementIndex ( minersList , unit ) ;
77432: LD_ADDR_VAR 0 6
77436: PUSH
77437: LD_EXP 118
77441: PPUSH
77442: LD_VAR 0 1
77446: PPUSH
77447: CALL 21679 0 2
77451: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77452: LD_ADDR_VAR 0 5
77456: PUSH
77457: DOUBLE
77458: LD_EXP 119
77462: PUSH
77463: LD_VAR 0 6
77467: ARRAY
77468: INC
77469: ST_TO_ADDR
77470: LD_INT 1
77472: PUSH
77473: FOR_DOWNTO
77474: IFFALSE 77635
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77476: LD_EXP 119
77480: PUSH
77481: LD_VAR 0 6
77485: ARRAY
77486: PUSH
77487: LD_VAR 0 5
77491: ARRAY
77492: PUSH
77493: LD_INT 1
77495: ARRAY
77496: PUSH
77497: LD_VAR 0 2
77501: EQUAL
77502: PUSH
77503: LD_EXP 119
77507: PUSH
77508: LD_VAR 0 6
77512: ARRAY
77513: PUSH
77514: LD_VAR 0 5
77518: ARRAY
77519: PUSH
77520: LD_INT 2
77522: ARRAY
77523: PUSH
77524: LD_VAR 0 3
77528: EQUAL
77529: AND
77530: IFFALSE 77633
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77532: LD_EXP 119
77536: PUSH
77537: LD_VAR 0 6
77541: ARRAY
77542: PUSH
77543: LD_VAR 0 5
77547: ARRAY
77548: PUSH
77549: LD_INT 1
77551: ARRAY
77552: PPUSH
77553: LD_EXP 119
77557: PUSH
77558: LD_VAR 0 6
77562: ARRAY
77563: PUSH
77564: LD_VAR 0 5
77568: ARRAY
77569: PUSH
77570: LD_INT 2
77572: ARRAY
77573: PPUSH
77574: LD_VAR 0 1
77578: PPUSH
77579: CALL_OW 255
77583: PPUSH
77584: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77588: LD_ADDR_EXP 119
77592: PUSH
77593: LD_EXP 119
77597: PPUSH
77598: LD_VAR 0 6
77602: PPUSH
77603: LD_EXP 119
77607: PUSH
77608: LD_VAR 0 6
77612: ARRAY
77613: PPUSH
77614: LD_VAR 0 5
77618: PPUSH
77619: CALL_OW 3
77623: PPUSH
77624: CALL_OW 1
77628: ST_TO_ADDR
// exit ;
77629: POP
77630: POP
77631: GO 77824
// end ; end ;
77633: GO 77473
77635: POP
77636: POP
// for i := minerMinesList [ index ] downto 1 do
77637: LD_ADDR_VAR 0 5
77641: PUSH
77642: DOUBLE
77643: LD_EXP 119
77647: PUSH
77648: LD_VAR 0 6
77652: ARRAY
77653: INC
77654: ST_TO_ADDR
77655: LD_INT 1
77657: PUSH
77658: FOR_DOWNTO
77659: IFFALSE 77822
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77661: LD_EXP 119
77665: PUSH
77666: LD_VAR 0 6
77670: ARRAY
77671: PUSH
77672: LD_VAR 0 5
77676: ARRAY
77677: PUSH
77678: LD_INT 1
77680: ARRAY
77681: PPUSH
77682: LD_EXP 119
77686: PUSH
77687: LD_VAR 0 6
77691: ARRAY
77692: PUSH
77693: LD_VAR 0 5
77697: ARRAY
77698: PUSH
77699: LD_INT 2
77701: ARRAY
77702: PPUSH
77703: LD_VAR 0 2
77707: PPUSH
77708: LD_VAR 0 3
77712: PPUSH
77713: CALL_OW 298
77717: PUSH
77718: LD_INT 6
77720: LESS
77721: IFFALSE 77820
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77723: LD_EXP 119
77727: PUSH
77728: LD_VAR 0 6
77732: ARRAY
77733: PUSH
77734: LD_VAR 0 5
77738: ARRAY
77739: PUSH
77740: LD_INT 1
77742: ARRAY
77743: PPUSH
77744: LD_EXP 119
77748: PUSH
77749: LD_VAR 0 6
77753: ARRAY
77754: PUSH
77755: LD_VAR 0 5
77759: ARRAY
77760: PUSH
77761: LD_INT 2
77763: ARRAY
77764: PPUSH
77765: LD_VAR 0 1
77769: PPUSH
77770: CALL_OW 255
77774: PPUSH
77775: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77779: LD_ADDR_EXP 119
77783: PUSH
77784: LD_EXP 119
77788: PPUSH
77789: LD_VAR 0 6
77793: PPUSH
77794: LD_EXP 119
77798: PUSH
77799: LD_VAR 0 6
77803: ARRAY
77804: PPUSH
77805: LD_VAR 0 5
77809: PPUSH
77810: CALL_OW 3
77814: PPUSH
77815: CALL_OW 1
77819: ST_TO_ADDR
// end ; end ;
77820: GO 77658
77822: POP
77823: POP
// end ;
77824: LD_VAR 0 4
77828: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77829: LD_INT 0
77831: PPUSH
77832: PPUSH
77833: PPUSH
77834: PPUSH
77835: PPUSH
77836: PPUSH
77837: PPUSH
77838: PPUSH
77839: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77840: LD_VAR 0 1
77844: PPUSH
77845: CALL_OW 264
77849: PUSH
77850: LD_INT 81
77852: EQUAL
77853: NOT
77854: PUSH
77855: LD_VAR 0 1
77859: PUSH
77860: LD_EXP 118
77864: IN
77865: NOT
77866: OR
77867: IFFALSE 77871
// exit ;
77869: GO 78193
// index := GetElementIndex ( minersList , unit ) ;
77871: LD_ADDR_VAR 0 6
77875: PUSH
77876: LD_EXP 118
77880: PPUSH
77881: LD_VAR 0 1
77885: PPUSH
77886: CALL 21679 0 2
77890: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77891: LD_ADDR_VAR 0 8
77895: PUSH
77896: LD_EXP 120
77900: PUSH
77901: LD_EXP 119
77905: PUSH
77906: LD_VAR 0 6
77910: ARRAY
77911: MINUS
77912: ST_TO_ADDR
// if not minesFreeAmount then
77913: LD_VAR 0 8
77917: NOT
77918: IFFALSE 77922
// exit ;
77920: GO 78193
// tmp := [ ] ;
77922: LD_ADDR_VAR 0 7
77926: PUSH
77927: EMPTY
77928: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77929: LD_ADDR_VAR 0 5
77933: PUSH
77934: DOUBLE
77935: LD_INT 1
77937: DEC
77938: ST_TO_ADDR
77939: LD_VAR 0 8
77943: PUSH
77944: FOR_TO
77945: IFFALSE 78140
// begin _d := rand ( 0 , 5 ) ;
77947: LD_ADDR_VAR 0 11
77951: PUSH
77952: LD_INT 0
77954: PPUSH
77955: LD_INT 5
77957: PPUSH
77958: CALL_OW 12
77962: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77963: LD_ADDR_VAR 0 12
77967: PUSH
77968: LD_INT 2
77970: PPUSH
77971: LD_INT 6
77973: PPUSH
77974: CALL_OW 12
77978: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77979: LD_ADDR_VAR 0 9
77983: PUSH
77984: LD_VAR 0 2
77988: PPUSH
77989: LD_VAR 0 11
77993: PPUSH
77994: LD_VAR 0 12
77998: PPUSH
77999: CALL_OW 272
78003: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
78004: LD_ADDR_VAR 0 10
78008: PUSH
78009: LD_VAR 0 3
78013: PPUSH
78014: LD_VAR 0 11
78018: PPUSH
78019: LD_VAR 0 12
78023: PPUSH
78024: CALL_OW 273
78028: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
78029: LD_VAR 0 9
78033: PPUSH
78034: LD_VAR 0 10
78038: PPUSH
78039: CALL_OW 488
78043: PUSH
78044: LD_VAR 0 9
78048: PUSH
78049: LD_VAR 0 10
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: PUSH
78058: LD_VAR 0 7
78062: IN
78063: NOT
78064: AND
78065: PUSH
78066: LD_VAR 0 9
78070: PPUSH
78071: LD_VAR 0 10
78075: PPUSH
78076: CALL_OW 458
78080: NOT
78081: AND
78082: IFFALSE 78124
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
78084: LD_ADDR_VAR 0 7
78088: PUSH
78089: LD_VAR 0 7
78093: PPUSH
78094: LD_VAR 0 7
78098: PUSH
78099: LD_INT 1
78101: PLUS
78102: PPUSH
78103: LD_VAR 0 9
78107: PUSH
78108: LD_VAR 0 10
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: PPUSH
78117: CALL_OW 1
78121: ST_TO_ADDR
78122: GO 78138
// i := i - 1 ;
78124: LD_ADDR_VAR 0 5
78128: PUSH
78129: LD_VAR 0 5
78133: PUSH
78134: LD_INT 1
78136: MINUS
78137: ST_TO_ADDR
// end ;
78138: GO 77944
78140: POP
78141: POP
// for i in tmp do
78142: LD_ADDR_VAR 0 5
78146: PUSH
78147: LD_VAR 0 7
78151: PUSH
78152: FOR_IN
78153: IFFALSE 78191
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78155: LD_VAR 0 1
78159: PPUSH
78160: LD_VAR 0 5
78164: PUSH
78165: LD_INT 1
78167: ARRAY
78168: PPUSH
78169: LD_VAR 0 5
78173: PUSH
78174: LD_INT 2
78176: ARRAY
78177: PPUSH
78178: CALL 77137 0 3
78182: NOT
78183: IFFALSE 78189
// exit ;
78185: POP
78186: POP
78187: GO 78193
78189: GO 78152
78191: POP
78192: POP
// end ;
78193: LD_VAR 0 4
78197: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78198: LD_INT 0
78200: PPUSH
78201: PPUSH
78202: PPUSH
78203: PPUSH
78204: PPUSH
78205: PPUSH
78206: PPUSH
// if not GetClass ( unit ) = class_sniper then
78207: LD_VAR 0 1
78211: PPUSH
78212: CALL_OW 257
78216: PUSH
78217: LD_INT 5
78219: EQUAL
78220: NOT
78221: IFFALSE 78225
// exit ;
78223: GO 78613
// dist := 8 ;
78225: LD_ADDR_VAR 0 5
78229: PUSH
78230: LD_INT 8
78232: ST_TO_ADDR
// viewRange := 12 ;
78233: LD_ADDR_VAR 0 7
78237: PUSH
78238: LD_INT 12
78240: ST_TO_ADDR
// side := GetSide ( unit ) ;
78241: LD_ADDR_VAR 0 6
78245: PUSH
78246: LD_VAR 0 1
78250: PPUSH
78251: CALL_OW 255
78255: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78256: LD_INT 61
78258: PPUSH
78259: LD_VAR 0 6
78263: PPUSH
78264: CALL_OW 321
78268: PUSH
78269: LD_INT 2
78271: EQUAL
78272: IFFALSE 78282
// viewRange := 16 ;
78274: LD_ADDR_VAR 0 7
78278: PUSH
78279: LD_INT 16
78281: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78282: LD_VAR 0 1
78286: PPUSH
78287: LD_VAR 0 2
78291: PPUSH
78292: LD_VAR 0 3
78296: PPUSH
78297: CALL_OW 297
78301: PUSH
78302: LD_VAR 0 5
78306: GREATER
78307: IFFALSE 78386
// begin ComMoveXY ( unit , x , y ) ;
78309: LD_VAR 0 1
78313: PPUSH
78314: LD_VAR 0 2
78318: PPUSH
78319: LD_VAR 0 3
78323: PPUSH
78324: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78328: LD_INT 35
78330: PPUSH
78331: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78335: LD_VAR 0 1
78339: PPUSH
78340: LD_VAR 0 2
78344: PPUSH
78345: LD_VAR 0 3
78349: PPUSH
78350: CALL 53043 0 3
78354: NOT
78355: IFFALSE 78359
// exit ;
78357: GO 78613
// until GetDistUnitXY ( unit , x , y ) < dist ;
78359: LD_VAR 0 1
78363: PPUSH
78364: LD_VAR 0 2
78368: PPUSH
78369: LD_VAR 0 3
78373: PPUSH
78374: CALL_OW 297
78378: PUSH
78379: LD_VAR 0 5
78383: LESS
78384: IFFALSE 78328
// end ; ComTurnXY ( unit , x , y ) ;
78386: LD_VAR 0 1
78390: PPUSH
78391: LD_VAR 0 2
78395: PPUSH
78396: LD_VAR 0 3
78400: PPUSH
78401: CALL_OW 118
// wait ( 5 ) ;
78405: LD_INT 5
78407: PPUSH
78408: CALL_OW 67
// _d := GetDir ( unit ) ;
78412: LD_ADDR_VAR 0 10
78416: PUSH
78417: LD_VAR 0 1
78421: PPUSH
78422: CALL_OW 254
78426: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78427: LD_ADDR_VAR 0 8
78431: PUSH
78432: LD_VAR 0 1
78436: PPUSH
78437: CALL_OW 250
78441: PPUSH
78442: LD_VAR 0 10
78446: PPUSH
78447: LD_VAR 0 5
78451: PPUSH
78452: CALL_OW 272
78456: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78457: LD_ADDR_VAR 0 9
78461: PUSH
78462: LD_VAR 0 1
78466: PPUSH
78467: CALL_OW 251
78471: PPUSH
78472: LD_VAR 0 10
78476: PPUSH
78477: LD_VAR 0 5
78481: PPUSH
78482: CALL_OW 273
78486: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78487: LD_VAR 0 8
78491: PPUSH
78492: LD_VAR 0 9
78496: PPUSH
78497: CALL_OW 488
78501: NOT
78502: IFFALSE 78506
// exit ;
78504: GO 78613
// ComAnimCustom ( unit , 1 ) ;
78506: LD_VAR 0 1
78510: PPUSH
78511: LD_INT 1
78513: PPUSH
78514: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78518: LD_VAR 0 8
78522: PPUSH
78523: LD_VAR 0 9
78527: PPUSH
78528: LD_VAR 0 6
78532: PPUSH
78533: LD_VAR 0 7
78537: PPUSH
78538: CALL_OW 330
// repeat wait ( 1 ) ;
78542: LD_INT 1
78544: PPUSH
78545: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78549: LD_VAR 0 1
78553: PPUSH
78554: CALL_OW 316
78558: PUSH
78559: LD_VAR 0 1
78563: PPUSH
78564: CALL_OW 314
78568: OR
78569: PUSH
78570: LD_VAR 0 1
78574: PPUSH
78575: CALL_OW 302
78579: NOT
78580: OR
78581: PUSH
78582: LD_VAR 0 1
78586: PPUSH
78587: CALL_OW 301
78591: OR
78592: IFFALSE 78542
// RemoveSeeing ( _x , _y , side ) ;
78594: LD_VAR 0 8
78598: PPUSH
78599: LD_VAR 0 9
78603: PPUSH
78604: LD_VAR 0 6
78608: PPUSH
78609: CALL_OW 331
// end ; end_of_file
78613: LD_VAR 0 4
78617: RET
