// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam ; export kirovConstructedBunkers ; export activateAMAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 349 0 0
// PrepareRussian ;
  24: CALL 1064 0 0
// PrepareNature ;
  28: CALL 14334 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// canExitBase = true ;
 203: LD_ADDR_EXP 19
 207: PUSH
 208: LD_INT 1
 210: ST_TO_ADDR
// canExploreMap = false ;
 211: LD_ADDR_EXP 20
 215: PUSH
 216: LD_INT 0
 218: ST_TO_ADDR
// sawLeftBunker = false ;
 219: LD_ADDR_EXP 27
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawRightBunker = false ;
 227: LD_ADDR_EXP 28
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// dialogLoopBlocker = false ;
 235: LD_ADDR_EXP 31
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 243: LD_ADDR_EXP 29
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 251: LD_ADDR_EXP 30
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// playerGetSupport = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// captureBelkovVehicle = false ;
 267: LD_ADDR_EXP 36
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// saveBelkovObjective = false ;
 275: LD_ADDR_EXP 34
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// medalForGetSupport = true ;
 283: LD_ADDR_EXP 38
 287: PUSH
 288: LD_INT 1
 290: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 291: LD_ADDR_EXP 37
 295: PUSH
 296: LD_INT 1
 298: NEG
 299: ST_TO_ADDR
// initiative = 0 ;
 300: LD_ADDR_EXP 40
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// lostComradesCounter = 0 ;
 308: LD_ADDR_EXP 41
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// northMapExplored = false ;
 316: LD_ADDR_EXP 39
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 324: LD_ADDR_EXP 25
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// activateAMAI = false ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// MissionIntro ;
 340: CALL 6008 0 0
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function InitMapConfig ; begin
 349: LD_INT 0
 351: PPUSH
// BaseMapConfig ;
 352: CALL 365 0 0
// MissionMapConfig ;
 356: CALL 451 0 0
// end ;
 360: LD_VAR 0 1
 364: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 365: LD_INT 0
 367: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 368: LD_ADDR_EXP 42
 372: PUSH
 373: LD_INT 2
 375: PUSH
 376: LD_INT 4
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: LD_INT 0
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 391: LD_ADDR_EXP 43
 395: PUSH
 396: LD_INT 2
 398: PUSH
 399: LD_INT 2
 401: PUSH
 402: LD_INT 2
 404: PUSH
 405: LD_INT 2
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: ST_TO_ADDR
// animalsAgression = 0 ;
 414: LD_ADDR_EXP 44
 418: PUSH
 419: LD_INT 0
 421: ST_TO_ADDR
// debugMode = 0 ;
 422: LD_ADDR_EXP 47
 426: PUSH
 427: LD_INT 0
 429: ST_TO_ADDR
// missionPrefix = 02_ ;
 430: LD_ADDR_EXP 45
 434: PUSH
 435: LD_STRING 02_
 437: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 438: LD_ADDR_EXP 46
 442: PUSH
 443: LD_STRING 01_
 445: ST_TO_ADDR
// end ;
 446: LD_VAR 0 1
 450: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 451: LD_INT 0
 453: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 454: LD_ADDR_EXP 49
 458: PUSH
 459: LD_INT 162
 461: PUSH
 462: LD_INT 107
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 162
 471: PUSH
 472: LD_INT 108
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 163
 481: PUSH
 482: LD_INT 109
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 163
 491: PUSH
 492: LD_INT 110
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 162
 501: PUSH
 502: LD_INT 109
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 161
 511: PUSH
 512: LD_INT 107
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 161
 521: PUSH
 522: LD_INT 106
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 538: LD_ADDR_EXP 50
 542: PUSH
 543: LD_INT 113
 545: PUSH
 546: LD_INT 96
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: LD_INT 114
 555: PUSH
 556: LD_INT 97
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: PUSH
 563: LD_INT 114
 565: PUSH
 566: LD_INT 98
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 578: LD_ADDR_EXP 48
 582: PUSH
 583: LD_INT 10
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 2
 591: PUSH
 592: LD_INT 1
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: ST_TO_ADDR
// labCratesRefund = 20 ;
 601: LD_ADDR_EXP 51
 605: PUSH
 606: LD_INT 20
 608: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 609: LD_ADDR_EXP 52
 613: PUSH
 614: LD_INT 40
 616: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 617: LD_ADDR_EXP 53
 621: PUSH
 622: LD_INT 20
 624: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 30
 632: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 10
 640: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 1
 648: PUSH
 649: LD_INT 2
 651: PUSH
 652: LD_INT 2
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: LIST
 659: PUSH
 660: LD_OWVAR 67
 664: ARRAY
 665: ST_TO_ADDR
// trapAmountPeople = [ [ 2 , 2 ] , [ 3 , 3 ] , [ 4 , 4 ] ] [ Difficulty ] ;
 666: LD_ADDR_EXP 57
 670: PUSH
 671: LD_INT 2
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 3
 683: PUSH
 684: LD_INT 3
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 4
 693: PUSH
 694: LD_INT 4
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_OWVAR 67
 710: ARRAY
 711: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 712: LD_ADDR_EXP 58
 716: PUSH
 717: LD_INT 21000
 719: PUSH
 720: LD_INT 16800
 722: PUSH
 723: LD_INT 12600
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_OWVAR 67
 735: ARRAY
 736: ST_TO_ADDR
// end ;
 737: LD_VAR 0 1
 741: RET
// every 0 0$1 trigger debugMode do var i ;
 742: LD_EXP 47
 746: IFFALSE 1061
 748: GO 750
 750: DISABLE
 751: LD_INT 0
 753: PPUSH
// begin enable ;
 754: ENABLE
// FogOff ( your_side ) ;
 755: LD_OWVAR 2
 759: PPUSH
 760: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 764: LD_ADDR_VAR 0 1
 768: PUSH
 769: LD_INT 22
 771: PUSH
 772: LD_OWVAR 2
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: LD_INT 21
 786: PUSH
 787: LD_INT 1
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: LD_INT 21
 796: PUSH
 797: LD_INT 2
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: PUSH
 818: FOR_IN
 819: IFFALSE 835
// SetLives ( i , 1000 ) ;
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 1000
 828: PPUSH
 829: CALL_OW 234
 833: GO 818
 835: POP
 836: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 837: LD_ADDR_VAR 0 1
 841: PUSH
 842: LD_INT 22
 844: PUSH
 845: LD_OWVAR 2
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: LD_INT 21
 856: PUSH
 857: LD_INT 1
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PPUSH
 868: CALL_OW 69
 872: PUSH
 873: FOR_IN
 874: IFFALSE 938
// begin SetSkill ( i , skill_combat , 10 ) ;
 876: LD_VAR 0 1
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 10
 886: PPUSH
 887: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 891: LD_VAR 0 1
 895: PPUSH
 896: LD_INT 2
 898: PPUSH
 899: LD_INT 10
 901: PPUSH
 902: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 906: LD_VAR 0 1
 910: PPUSH
 911: LD_INT 3
 913: PPUSH
 914: LD_INT 10
 916: PPUSH
 917: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 921: LD_VAR 0 1
 925: PPUSH
 926: LD_INT 4
 928: PPUSH
 929: LD_INT 10
 931: PPUSH
 932: CALL_OW 237
// end ;
 936: GO 873
 938: POP
 939: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 940: LD_ADDR_VAR 0 1
 944: PUSH
 945: LD_INT 22
 947: PUSH
 948: LD_OWVAR 2
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: LD_INT 30
 962: PUSH
 963: LD_INT 0
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PUSH
 970: LD_INT 30
 972: PUSH
 973: LD_INT 1
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PPUSH
 989: CALL_OW 69
 993: PUSH
 994: FOR_IN
 995: IFFALSE 1059
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 997: LD_VAR 0 1
1001: PPUSH
1002: CALL_OW 274
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: LD_INT 9999
1012: PPUSH
1013: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1017: LD_VAR 0 1
1021: PPUSH
1022: CALL_OW 274
1026: PPUSH
1027: LD_INT 2
1029: PPUSH
1030: LD_INT 9999
1032: PPUSH
1033: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1037: LD_VAR 0 1
1041: PPUSH
1042: CALL_OW 274
1046: PPUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 9999
1052: PPUSH
1053: CALL_OW 277
// end ;
1057: GO 994
1059: POP
1060: POP
// end ; end_of_file
1061: PPOPN 1
1063: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1064: LD_INT 0
1066: PPUSH
// PrepareCharactersFromPreviousMission ;
1067: CALL 1399 0 0
// PrepareKirovBase ;
1071: CALL 1594 0 0
// PrepareBeriaBase ;
1075: CALL 2250 0 0
// end ;
1079: LD_VAR 0 1
1083: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1084: LD_INT 0
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
// belkovTeam = [ ] ;
1090: LD_ADDR_EXP 70
1094: PUSH
1095: EMPTY
1096: ST_TO_ADDR
// uc_side = 6 ;
1097: LD_ADDR_OWVAR 20
1101: PUSH
1102: LD_INT 6
1104: ST_TO_ADDR
// uc_nation = nation_russian ;
1105: LD_ADDR_OWVAR 21
1109: PUSH
1110: LD_INT 3
1112: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1113: LD_ADDR_OWVAR 37
1117: PUSH
1118: LD_EXP 72
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1127: LD_ADDR_OWVAR 39
1131: PUSH
1132: LD_EXP 72
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1141: LD_ADDR_OWVAR 38
1145: PUSH
1146: LD_EXP 72
1150: PUSH
1151: LD_INT 3
1153: ARRAY
1154: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1155: LD_ADDR_OWVAR 40
1159: PUSH
1160: LD_EXP 72
1164: PUSH
1165: LD_INT 4
1167: ARRAY
1168: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1169: LD_ADDR_OWVAR 41
1173: PUSH
1174: LD_EXP 72
1178: PUSH
1179: LD_INT 5
1181: ARRAY
1182: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1183: LD_ADDR_EXP 69
1187: PUSH
1188: CALL_OW 45
1192: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1193: LD_EXP 69
1197: PPUSH
1198: LD_INT 3
1200: PPUSH
1201: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1205: LD_EXP 69
1209: PPUSH
1210: LD_INT 11
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1220: LD_ADDR_EXP 70
1224: PUSH
1225: LD_EXP 70
1229: PUSH
1230: LD_EXP 69
1234: ADD
1235: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1236: LD_STRING 02_TmpBelkov
1238: PPUSH
1239: CALL_OW 28
1243: IFFALSE 1290
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1245: LD_ADDR_EXP 61
1249: PUSH
1250: LD_STRING 02_TmpBelkov
1252: PPUSH
1253: CALL_OW 34
1257: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1258: LD_EXP 61
1262: PPUSH
1263: LD_EXP 69
1267: PPUSH
1268: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1272: LD_ADDR_EXP 70
1276: PUSH
1277: LD_EXP 70
1281: PUSH
1282: LD_EXP 61
1286: ADD
1287: ST_TO_ADDR
// end else
1288: GO 1333
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1290: LD_ADDR_EXP 65
1294: PUSH
1295: LD_STRING 02_TmpBelkov2
1297: PPUSH
1298: CALL_OW 34
1302: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) ;
1303: LD_EXP 65
1307: PPUSH
1308: LD_EXP 69
1312: PPUSH
1313: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov2 ;
1317: LD_ADDR_EXP 70
1321: PUSH
1322: LD_EXP 70
1326: PUSH
1327: LD_EXP 65
1331: ADD
1332: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1333: LD_ADDR_VAR 0 3
1337: PUSH
1338: LD_STRING 02_TmpBelkovTeam
1340: PPUSH
1341: CALL_OW 31
1345: ST_TO_ADDR
// for unit in others do
1346: LD_ADDR_VAR 0 2
1350: PUSH
1351: LD_VAR 0 3
1355: PUSH
1356: FOR_IN
1357: IFFALSE 1392
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1359: LD_VAR 0 2
1363: PPUSH
1364: LD_INT 11
1366: PPUSH
1367: LD_INT 0
1369: PPUSH
1370: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1374: LD_ADDR_EXP 70
1378: PUSH
1379: LD_EXP 70
1383: PUSH
1384: LD_VAR 0 2
1388: ADD
1389: ST_TO_ADDR
// end ;
1390: GO 1356
1392: POP
1393: POP
// end ;
1394: LD_VAR 0 1
1398: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1399: LD_INT 0
1401: PPUSH
1402: PPUSH
// uc_side = 3 ;
1403: LD_ADDR_OWVAR 20
1407: PUSH
1408: LD_INT 3
1410: ST_TO_ADDR
// Burlak = PrepareUnit ( Burlak , true ) ;
1411: LD_ADDR_EXP 59
1415: PUSH
1416: LD_STRING Burlak
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: CALL 3560 0 2
1426: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , true ) ;
1427: LD_ADDR_EXP 60
1431: PUSH
1432: LD_STRING Gnyevko
1434: PPUSH
1435: LD_INT 1
1437: PPUSH
1438: CALL 3560 0 2
1442: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , true ) ;
1443: LD_ADDR_EXP 61
1447: PUSH
1448: LD_STRING Belkov
1450: PPUSH
1451: LD_INT 1
1453: PPUSH
1454: CALL 3560 0 2
1458: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , true ) ;
1459: LD_ADDR_EXP 62
1463: PUSH
1464: LD_STRING Kirilenkova
1466: PPUSH
1467: LD_INT 1
1469: PPUSH
1470: CALL 3560 0 2
1474: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1475: LD_EXP 59
1479: PPUSH
1480: LD_INT 5
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1490: LD_EXP 60
1494: PPUSH
1495: LD_INT 3
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1505: LD_EXP 61
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 0
1515: PPUSH
1516: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1520: LD_EXP 62
1524: PPUSH
1525: LD_INT 3
1527: PPUSH
1528: LD_INT 0
1530: PPUSH
1531: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1535: LD_EXP 59
1539: PPUSH
1540: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1544: LD_ADDR_EXP 63
1548: PUSH
1549: LD_STRING 01_other_survivors
1551: PPUSH
1552: CALL_OW 31
1556: ST_TO_ADDR
// for i in other_survivors do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 63
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1587
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1570: LD_VAR 0 2
1574: PPUSH
1575: LD_INT 3
1577: PPUSH
1578: LD_INT 0
1580: PPUSH
1581: CALL_OW 49
1585: GO 1567
1587: POP
1588: POP
// end ;
1589: LD_VAR 0 1
1593: RET
// function PrepareKirovBase ; var i , un ; begin
1594: LD_INT 0
1596: PPUSH
1597: PPUSH
1598: PPUSH
// SetBName ( kirov , kirov ) ;
1599: LD_INT 71
1601: PPUSH
1602: LD_STRING kirov
1604: PPUSH
1605: CALL_OW 500
// uc_side = 6 ;
1609: LD_ADDR_OWVAR 20
1613: PUSH
1614: LD_INT 6
1616: ST_TO_ADDR
// uc_nation = 3 ;
1617: LD_ADDR_OWVAR 21
1621: PUSH
1622: LD_INT 3
1624: ST_TO_ADDR
// hc_gallery =  ;
1625: LD_ADDR_OWVAR 33
1629: PUSH
1630: LD_STRING 
1632: ST_TO_ADDR
// hc_name =  ;
1633: LD_ADDR_OWVAR 26
1637: PUSH
1638: LD_STRING 
1640: ST_TO_ADDR
// Kurin = PrepareUnit ( Kurin , false ) ;
1641: LD_ADDR_EXP 64
1645: PUSH
1646: LD_STRING Kurin
1648: PPUSH
1649: LD_INT 0
1651: PPUSH
1652: CALL 3560 0 2
1656: ST_TO_ADDR
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
1657: LD_ADDR_EXP 67
1661: PUSH
1662: LD_STRING Kovalyuk
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL 3560 0 2
1672: ST_TO_ADDR
// Belkov2 = PrepareUnit ( Belkov2 , false ) ;
1673: LD_ADDR_EXP 65
1677: PUSH
1678: LD_STRING Belkov2
1680: PPUSH
1681: LD_INT 0
1683: PPUSH
1684: CALL 3560 0 2
1688: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1689: LD_EXP 64
1693: PPUSH
1694: LD_INT 4
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1704: LD_EXP 67
1708: PPUSH
1709: LD_INT 161
1711: PPUSH
1712: LD_INT 108
1714: PPUSH
1715: LD_INT 6
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 50
// ComHold ( Kurin ) ;
1725: LD_EXP 64
1729: PPUSH
1730: CALL_OW 140
// otherKirovUnits = [ ] ;
1734: LD_ADDR_EXP 66
1738: PUSH
1739: EMPTY
1740: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1741: LD_ADDR_EXP 48
1745: PUSH
1746: LD_EXP 48
1750: PPUSH
1751: LD_INT 1
1753: PPUSH
1754: LD_EXP 48
1758: PUSH
1759: LD_INT 1
1761: ARRAY
1762: PUSH
1763: LD_EXP 63
1767: PPUSH
1768: LD_INT 25
1770: PUSH
1771: LD_INT 1
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PPUSH
1778: CALL_OW 72
1782: MINUS
1783: PPUSH
1784: CALL_OW 1
1788: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1789: LD_ADDR_VAR 0 2
1793: PUSH
1794: DOUBLE
1795: LD_INT 1
1797: DEC
1798: ST_TO_ADDR
1799: LD_EXP 48
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: PUSH
1808: FOR_TO
1809: IFFALSE 1872
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1811: LD_INT 0
1813: PPUSH
1814: LD_INT 1
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: LD_INT 3
1822: PPUSH
1823: CALL_OW 12
1827: PPUSH
1828: CALL_OW 380
// un = CreateHuman ;
1832: LD_ADDR_VAR 0 3
1836: PUSH
1837: CALL_OW 44
1841: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1842: LD_ADDR_EXP 66
1846: PUSH
1847: LD_EXP 66
1851: PUSH
1852: LD_VAR 0 3
1856: ADD
1857: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
1858: LD_VAR 0 3
1862: PPUSH
1863: LD_INT 209
1865: PPUSH
1866: CALL_OW 52
// end ;
1870: GO 1808
1872: POP
1873: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1874: LD_INT 0
1876: PPUSH
1877: LD_INT 1
1879: PPUSH
1880: LD_INT 1
1882: PPUSH
1883: LD_INT 3
1885: PPUSH
1886: CALL_OW 12
1890: PPUSH
1891: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
1895: CALL_OW 44
1899: PPUSH
1900: LD_INT 209
1902: PPUSH
1903: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_EXP 48
1921: PUSH
1922: LD_INT 2
1924: ARRAY
1925: PUSH
1926: FOR_TO
1927: IFFALSE 1990
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
1929: LD_INT 0
1931: PPUSH
1932: LD_INT 2
1934: PPUSH
1935: LD_INT 1
1937: PPUSH
1938: LD_INT 3
1940: PPUSH
1941: CALL_OW 12
1945: PPUSH
1946: CALL_OW 380
// un = CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1960: LD_ADDR_EXP 66
1964: PUSH
1965: LD_EXP 66
1969: PUSH
1970: LD_VAR 0 3
1974: ADD
1975: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1976: LD_VAR 0 3
1980: PPUSH
1981: LD_INT 71
1983: PPUSH
1984: CALL_OW 52
// end ;
1988: GO 1926
1990: POP
1991: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
1992: LD_ADDR_VAR 0 2
1996: PUSH
1997: DOUBLE
1998: LD_INT 1
2000: DEC
2001: ST_TO_ADDR
2002: LD_EXP 48
2006: PUSH
2007: LD_INT 3
2009: ARRAY
2010: PUSH
2011: FOR_TO
2012: IFFALSE 2075
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2014: LD_INT 0
2016: PPUSH
2017: LD_INT 3
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_INT 3
2025: PPUSH
2026: CALL_OW 12
2030: PPUSH
2031: CALL_OW 380
// un = CreateHuman ;
2035: LD_ADDR_VAR 0 3
2039: PUSH
2040: CALL_OW 44
2044: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2045: LD_ADDR_EXP 66
2049: PUSH
2050: LD_EXP 66
2054: PUSH
2055: LD_VAR 0 3
2059: ADD
2060: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2061: LD_VAR 0 3
2065: PPUSH
2066: LD_INT 71
2068: PPUSH
2069: CALL_OW 52
// end ;
2073: GO 2011
2075: POP
2076: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_EXP 48
2091: PUSH
2092: LD_INT 4
2094: ARRAY
2095: PUSH
2096: FOR_TO
2097: IFFALSE 2160
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2099: LD_INT 0
2101: PPUSH
2102: LD_INT 4
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 3
2110: PPUSH
2111: CALL_OW 12
2115: PPUSH
2116: CALL_OW 380
// un = CreateHuman ;
2120: LD_ADDR_VAR 0 3
2124: PUSH
2125: CALL_OW 44
2129: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2130: LD_ADDR_EXP 66
2134: PUSH
2135: LD_EXP 66
2139: PUSH
2140: LD_VAR 0 3
2144: ADD
2145: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2146: LD_VAR 0 3
2150: PPUSH
2151: LD_INT 83
2153: PPUSH
2154: CALL_OW 52
// end ;
2158: GO 2096
2160: POP
2161: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2162: LD_INT 6
2164: PPUSH
2165: LD_INT 83
2167: PPUSH
2168: LD_INT 3
2170: PPUSH
2171: CALL 4375 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2175: LD_STRING 01_Gnyevko
2177: PPUSH
2178: CALL_OW 28
2182: NOT
2183: IFFALSE 2226
// begin PrepareMechanic ( sex_male , 3 ) ;
2185: LD_INT 1
2187: PPUSH
2188: LD_INT 3
2190: PPUSH
2191: CALL_OW 383
// randomMech = CreateHuman ;
2195: LD_ADDR_EXP 68
2199: PUSH
2200: CALL_OW 44
2204: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2205: LD_EXP 68
2209: PPUSH
2210: LD_INT 161
2212: PPUSH
2213: LD_INT 108
2215: PPUSH
2216: LD_INT 6
2218: PPUSH
2219: LD_INT 0
2221: PPUSH
2222: CALL_OW 50
// end ; if not belkovReturn then
2226: LD_EXP 6
2230: NOT
2231: IFFALSE 2245
// PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2233: LD_EXP 65
2237: PPUSH
2238: LD_INT 95
2240: PPUSH
2241: CALL_OW 52
// end ;
2245: LD_VAR 0 1
2249: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
// SetBName ( beria , beria ) ;
2257: LD_INT 106
2259: PPUSH
2260: LD_STRING beria
2262: PPUSH
2263: CALL_OW 500
// uc_side = 6 ;
2267: LD_ADDR_OWVAR 20
2271: PUSH
2272: LD_INT 6
2274: ST_TO_ADDR
// uc_nation = 3 ;
2275: LD_ADDR_OWVAR 21
2279: PUSH
2280: LD_INT 3
2282: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2283: LD_ADDR_EXP 73
2287: PUSH
2288: LD_STRING Platonov
2290: PPUSH
2291: LD_INT 0
2293: PPUSH
2294: CALL 3560 0 2
2298: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2299: LD_EXP 73
2303: PPUSH
2304: LD_INT 112
2306: PPUSH
2307: LD_INT 97
2309: PPUSH
2310: LD_INT 0
2312: PPUSH
2313: CALL_OW 48
// ComHold ( Platonov ) ;
2317: LD_EXP 73
2321: PPUSH
2322: CALL_OW 140
// platSoldiers = [ ] ;
2326: LD_ADDR_EXP 74
2330: PUSH
2331: EMPTY
2332: ST_TO_ADDR
// unitsTemp = [ ] ;
2333: LD_ADDR_VAR 0 4
2337: PUSH
2338: EMPTY
2339: ST_TO_ADDR
// Kuklajs = PrepareUnit ( Kuklajs , false ) ;
2340: LD_ADDR_EXP 75
2344: PUSH
2345: LD_STRING Kuklajs
2347: PPUSH
2348: LD_INT 0
2350: PPUSH
2351: CALL 3560 0 2
2355: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2356: LD_ADDR_EXP 74
2360: PUSH
2361: LD_EXP 74
2365: PUSH
2366: LD_EXP 75
2370: ADD
2371: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2372: LD_EXP 75
2376: PPUSH
2377: LD_INT 110
2379: PPUSH
2380: LD_INT 97
2382: PPUSH
2383: LD_INT 6
2385: PPUSH
2386: LD_INT 0
2388: PPUSH
2389: CALL_OW 50
// Benko = PrepareUnit ( Benko , false ) ;
2393: LD_ADDR_EXP 76
2397: PUSH
2398: LD_STRING Benko
2400: PPUSH
2401: LD_INT 0
2403: PPUSH
2404: CALL 3560 0 2
2408: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2409: LD_ADDR_EXP 74
2413: PUSH
2414: LD_EXP 74
2418: PUSH
2419: LD_EXP 76
2423: ADD
2424: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2425: LD_ADDR_VAR 0 4
2429: PUSH
2430: LD_VAR 0 4
2434: PUSH
2435: LD_EXP 76
2439: ADD
2440: ST_TO_ADDR
// for i := 1 to 2 do
2441: LD_ADDR_VAR 0 2
2445: PUSH
2446: DOUBLE
2447: LD_INT 1
2449: DEC
2450: ST_TO_ADDR
2451: LD_INT 2
2453: PUSH
2454: FOR_TO
2455: IFFALSE 2522
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2457: LD_INT 0
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 1
2465: PPUSH
2466: LD_INT 3
2468: PPUSH
2469: CALL_OW 12
2473: PPUSH
2474: CALL_OW 380
// un = CreateHuman ;
2478: LD_ADDR_VAR 0 3
2482: PUSH
2483: CALL_OW 44
2487: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2488: LD_ADDR_EXP 74
2492: PUSH
2493: LD_EXP 74
2497: PUSH
2498: LD_VAR 0 3
2502: ADD
2503: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2504: LD_ADDR_VAR 0 4
2508: PUSH
2509: LD_VAR 0 4
2513: PUSH
2514: LD_VAR 0 3
2518: ADD
2519: ST_TO_ADDR
// end ;
2520: GO 2454
2522: POP
2523: POP
// for i := 1 to unitsTemp do
2524: LD_ADDR_VAR 0 2
2528: PUSH
2529: DOUBLE
2530: LD_INT 1
2532: DEC
2533: ST_TO_ADDR
2534: LD_VAR 0 4
2538: PUSH
2539: FOR_TO
2540: IFFALSE 2628
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2542: LD_ADDR_VAR 0 5
2546: PUSH
2547: LD_INT 8
2549: PPUSH
2550: LD_INT 22
2552: PUSH
2553: LD_INT 6
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 30
2562: PUSH
2563: LD_INT 31
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PPUSH
2574: CALL_OW 70
2578: PUSH
2579: LD_VAR 0 2
2583: ARRAY
2584: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2585: LD_VAR 0 4
2589: PUSH
2590: LD_VAR 0 2
2594: ARRAY
2595: PPUSH
2596: LD_VAR 0 5
2600: PPUSH
2601: CALL_OW 250
2605: PPUSH
2606: LD_VAR 0 5
2610: PPUSH
2611: CALL_OW 251
2615: PPUSH
2616: LD_INT 2
2618: PPUSH
2619: LD_INT 0
2621: PPUSH
2622: CALL_OW 50
// end ;
2626: GO 2539
2628: POP
2629: POP
// end ; end_of_file
2630: LD_VAR 0 1
2634: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export function PrepareAmerican ; begin
2635: LD_INT 0
2637: PPUSH
// PrepareTrap ;
2638: CALL 2651 0 0
// PrepareBunkiers ;
2642: CALL 3015 0 0
// end ;
2646: LD_VAR 0 1
2650: RET
// function PrepareTrap ; var i , un ; begin
2651: LD_INT 0
2653: PPUSH
2654: PPUSH
2655: PPUSH
// trapTeam = [ ] ;
2656: LD_ADDR_EXP 78
2660: PUSH
2661: EMPTY
2662: ST_TO_ADDR
// uc_nation = 1 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// uc_side = 1 ;
2671: LD_ADDR_OWVAR 20
2675: PUSH
2676: LD_INT 1
2678: ST_TO_ADDR
// hc_gallery =  ;
2679: LD_ADDR_OWVAR 33
2683: PUSH
2684: LD_STRING 
2686: ST_TO_ADDR
// hc_name = profile_name ;
2687: LD_ADDR_OWVAR 26
2691: PUSH
2692: LD_OWVAR 78
2696: ST_TO_ADDR
// hc_importance = 100 ;
2697: LD_ADDR_OWVAR 32
2701: PUSH
2702: LD_INT 100
2704: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2705: LD_INT 1
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_EXP 56
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: PPUSH
2720: CALL_OW 380
// trapCommander = CreateHuman ;
2724: LD_ADDR_EXP 77
2728: PUSH
2729: CALL_OW 44
2733: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2734: LD_EXP 77
2738: PPUSH
2739: LD_INT 13
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2749: LD_EXP 77
2753: PPUSH
2754: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
2758: LD_ADDR_EXP 78
2762: PUSH
2763: LD_EXP 78
2767: PUSH
2768: LD_EXP 77
2772: ADD
2773: ST_TO_ADDR
// hc_importance = 0 ;
2774: LD_ADDR_OWVAR 32
2778: PUSH
2779: LD_INT 0
2781: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
2782: LD_ADDR_VAR 0 2
2786: PUSH
2787: DOUBLE
2788: LD_INT 1
2790: DEC
2791: ST_TO_ADDR
2792: LD_EXP 57
2796: PUSH
2797: LD_INT 1
2799: ARRAY
2800: PUSH
2801: FOR_TO
2802: IFFALSE 2894
// begin hc_name =  ;
2804: LD_ADDR_OWVAR 26
2808: PUSH
2809: LD_STRING 
2811: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
2812: LD_INT 0
2814: PPUSH
2815: LD_INT 1
2817: PPUSH
2818: LD_EXP 56
2822: PPUSH
2823: CALL_OW 380
// un = CreateHuman ;
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: CALL_OW 44
2836: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
2837: LD_VAR 0 3
2841: PPUSH
2842: LD_INT 12
2844: PPUSH
2845: LD_INT 0
2847: PPUSH
2848: CALL_OW 49
// ComCrawl ( un ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_INT 116
2868: PPUSH
2869: LD_INT 21
2871: PPUSH
2872: CALL_OW 178
// trapTeam = trapTeam ^ un ;
2876: LD_ADDR_EXP 78
2880: PUSH
2881: LD_EXP 78
2885: PUSH
2886: LD_VAR 0 3
2890: ADD
2891: ST_TO_ADDR
// end ;
2892: GO 2801
2894: POP
2895: POP
// for i := 1 to trapAmountPeople [ 2 ] do
2896: LD_ADDR_VAR 0 2
2900: PUSH
2901: DOUBLE
2902: LD_INT 1
2904: DEC
2905: ST_TO_ADDR
2906: LD_EXP 57
2910: PUSH
2911: LD_INT 2
2913: ARRAY
2914: PUSH
2915: FOR_TO
2916: IFFALSE 3008
// begin hc_name =  ;
2918: LD_ADDR_OWVAR 26
2922: PUSH
2923: LD_STRING 
2925: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
2926: LD_INT 0
2928: PPUSH
2929: LD_INT 1
2931: PPUSH
2932: LD_EXP 56
2936: PPUSH
2937: CALL_OW 380
// un = CreateHuman ;
2941: LD_ADDR_VAR 0 3
2945: PUSH
2946: CALL_OW 44
2950: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
2951: LD_VAR 0 3
2955: PPUSH
2956: LD_INT 14
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 49
// ComCrawl ( un ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
2975: LD_VAR 0 3
2979: PPUSH
2980: LD_INT 116
2982: PPUSH
2983: LD_INT 21
2985: PPUSH
2986: CALL_OW 178
// trapTeam = trapTeam ^ un ;
2990: LD_ADDR_EXP 78
2994: PUSH
2995: LD_EXP 78
2999: PUSH
3000: LD_VAR 0 3
3004: ADD
3005: ST_TO_ADDR
// end ;
3006: GO 2915
3008: POP
3009: POP
// end ;
3010: LD_VAR 0 1
3014: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
3015: LD_INT 0
3017: PPUSH
3018: PPUSH
3019: PPUSH
3020: PPUSH
// uc_side = 1 ;
3021: LD_ADDR_OWVAR 20
3025: PUSH
3026: LD_INT 1
3028: ST_TO_ADDR
// uc_nation = nation_american ;
3029: LD_ADDR_OWVAR 21
3033: PUSH
3034: LD_INT 1
3036: ST_TO_ADDR
// bc_level = 1 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 1
3044: ST_TO_ADDR
// bc_type = b_breastwork ;
3045: LD_ADDR_OWVAR 42
3049: PUSH
3050: LD_INT 31
3052: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3053: LD_ADDR_VAR 0 4
3057: PUSH
3058: LD_INT 104
3060: PPUSH
3061: LD_INT 59
3063: PPUSH
3064: LD_INT 4
3066: PPUSH
3067: CALL_OW 47
3071: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3072: LD_ADDR_EXP 79
3076: PUSH
3077: LD_EXP 79
3081: PUSH
3082: LD_VAR 0 4
3086: ADD
3087: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3088: LD_EXP 56
3092: PPUSH
3093: LD_VAR 0 4
3097: PPUSH
3098: CALL 4616 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3102: LD_ADDR_VAR 0 4
3106: PUSH
3107: LD_INT 101
3109: PPUSH
3110: LD_INT 55
3112: PPUSH
3113: LD_INT 4
3115: PPUSH
3116: CALL_OW 47
3120: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3121: LD_ADDR_EXP 79
3125: PUSH
3126: LD_EXP 79
3130: PUSH
3131: LD_VAR 0 4
3135: ADD
3136: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3137: LD_EXP 56
3141: PPUSH
3142: LD_VAR 0 4
3146: PPUSH
3147: CALL 4616 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3151: LD_ADDR_VAR 0 4
3155: PUSH
3156: LD_INT 132
3158: PPUSH
3159: LD_INT 62
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: CALL_OW 47
3169: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3170: LD_ADDR_EXP 80
3174: PUSH
3175: LD_EXP 80
3179: PUSH
3180: LD_VAR 0 4
3184: ADD
3185: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3186: LD_EXP 56
3190: PPUSH
3191: LD_VAR 0 4
3195: PPUSH
3196: CALL 4616 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3200: LD_ADDR_VAR 0 4
3204: PUSH
3205: LD_INT 134
3207: PPUSH
3208: LD_INT 66
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: CALL_OW 47
3218: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3219: LD_ADDR_EXP 80
3223: PUSH
3224: LD_EXP 80
3228: PUSH
3229: LD_VAR 0 4
3233: ADD
3234: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3235: LD_EXP 56
3239: PPUSH
3240: LD_VAR 0 4
3244: PPUSH
3245: CALL 4616 0 2
// bc_type = b_depot ;
3249: LD_ADDR_OWVAR 42
3253: PUSH
3254: LD_INT 0
3256: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3257: LD_ADDR_EXP 81
3261: PUSH
3262: LD_INT 92
3264: PPUSH
3265: LD_INT 51
3267: PPUSH
3268: LD_INT 2
3270: PPUSH
3271: CALL_OW 47
3275: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3276: LD_ADDR_EXP 82
3280: PUSH
3281: LD_INT 193
3283: ST_TO_ADDR
// amLeftEngs = [ ] ;
3284: LD_ADDR_EXP 83
3288: PUSH
3289: EMPTY
3290: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3291: LD_ADDR_VAR 0 2
3295: PUSH
3296: DOUBLE
3297: LD_INT 1
3299: DEC
3300: ST_TO_ADDR
3301: LD_INT 1
3303: PUSH
3304: LD_INT 1
3306: PUSH
3307: LD_INT 1
3309: PPUSH
3310: LD_INT 2
3312: PPUSH
3313: CALL_OW 12
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: PUSH
3323: LD_OWVAR 67
3327: ARRAY
3328: PUSH
3329: FOR_TO
3330: IFFALSE 3421
// begin uc_nation = 1 ;
3332: LD_ADDR_OWVAR 21
3336: PUSH
3337: LD_INT 1
3339: ST_TO_ADDR
// uc_side = 1 ;
3340: LD_ADDR_OWVAR 20
3344: PUSH
3345: LD_INT 1
3347: ST_TO_ADDR
// hc_gallery =  ;
3348: LD_ADDR_OWVAR 33
3352: PUSH
3353: LD_STRING 
3355: ST_TO_ADDR
// hc_name =  ;
3356: LD_ADDR_OWVAR 26
3360: PUSH
3361: LD_STRING 
3363: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3364: LD_INT 0
3366: PPUSH
3367: LD_INT 2
3369: PPUSH
3370: LD_EXP 56
3374: PPUSH
3375: CALL_OW 380
// un = CreateHuman ;
3379: LD_ADDR_VAR 0 3
3383: PUSH
3384: CALL_OW 44
3388: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3389: LD_ADDR_EXP 83
3393: PUSH
3394: LD_EXP 83
3398: PUSH
3399: LD_VAR 0 3
3403: ADD
3404: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3405: LD_VAR 0 3
3409: PPUSH
3410: LD_EXP 81
3414: PPUSH
3415: CALL_OW 52
// end ;
3419: GO 3329
3421: POP
3422: POP
// if Difficulty = 3 then
3423: LD_OWVAR 67
3427: PUSH
3428: LD_INT 3
3430: EQUAL
3431: IFFALSE 3555
// begin amRightEngs = [ ] ;
3433: LD_ADDR_EXP 84
3437: PUSH
3438: EMPTY
3439: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3440: LD_ADDR_VAR 0 2
3444: PUSH
3445: DOUBLE
3446: LD_INT 1
3448: DEC
3449: ST_TO_ADDR
3450: LD_INT 1
3452: PPUSH
3453: LD_INT 2
3455: PPUSH
3456: CALL_OW 12
3460: PUSH
3461: FOR_TO
3462: IFFALSE 3553
// begin uc_nation = 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// uc_side = 1 ;
3472: LD_ADDR_OWVAR 20
3476: PUSH
3477: LD_INT 1
3479: ST_TO_ADDR
// hc_gallery =  ;
3480: LD_ADDR_OWVAR 33
3484: PUSH
3485: LD_STRING 
3487: ST_TO_ADDR
// hc_name =  ;
3488: LD_ADDR_OWVAR 26
3492: PUSH
3493: LD_STRING 
3495: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3496: LD_INT 0
3498: PPUSH
3499: LD_INT 2
3501: PPUSH
3502: LD_EXP 56
3506: PPUSH
3507: CALL_OW 380
// un = CreateHuman ;
3511: LD_ADDR_VAR 0 3
3515: PUSH
3516: CALL_OW 44
3520: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3521: LD_ADDR_EXP 84
3525: PUSH
3526: LD_EXP 84
3530: PUSH
3531: LD_VAR 0 3
3535: ADD
3536: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
3537: LD_VAR 0 3
3541: PPUSH
3542: LD_EXP 82
3546: PPUSH
3547: CALL_OW 52
// end ;
3551: GO 3461
3553: POP
3554: POP
// end ; end ; end_of_file
3555: LD_VAR 0 1
3559: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
// if exist_mode then
3564: LD_VAR 0 2
3568: IFFALSE 3593
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
3570: LD_ADDR_VAR 0 4
3574: PUSH
3575: LD_EXP 46
3579: PUSH
3580: LD_VAR 0 1
3584: STR
3585: PPUSH
3586: CALL_OW 34
3590: ST_TO_ADDR
3591: GO 3608
// unit := NewCharacter ( ident ) ;
3593: LD_ADDR_VAR 0 4
3597: PUSH
3598: LD_VAR 0 1
3602: PPUSH
3603: CALL_OW 25
3607: ST_TO_ADDR
// result := unit ;
3608: LD_ADDR_VAR 0 3
3612: PUSH
3613: LD_VAR 0 4
3617: ST_TO_ADDR
// end ;
3618: LD_VAR 0 3
3622: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
3623: LD_INT 0
3625: PPUSH
3626: PPUSH
3627: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
3628: LD_ADDR_VAR 0 1
3632: PUSH
3633: LD_VAR 0 1
3637: PUSH
3638: LD_EXP 59
3642: PUSH
3643: LD_EXP 60
3647: PUSH
3648: LD_EXP 61
3652: PUSH
3653: LD_EXP 62
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: DIFF
3664: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
3665: LD_ADDR_VAR 0 7
3669: PUSH
3670: LD_VAR 0 1
3674: PUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_VAR 0 1
3682: PPUSH
3683: CALL_OW 12
3687: ARRAY
3688: ST_TO_ADDR
// if radio then
3689: LD_VAR 0 4
3693: IFFALSE 3742
// begin if GetSex ( speaker ) = sex_male then
3695: LD_VAR 0 7
3699: PPUSH
3700: CALL_OW 258
3704: PUSH
3705: LD_INT 1
3707: EQUAL
3708: IFFALSE 3726
// SayRadio ( speaker , dialogMID ) else
3710: LD_VAR 0 7
3714: PPUSH
3715: LD_VAR 0 2
3719: PPUSH
3720: CALL_OW 94
3724: GO 3740
// SayRadio ( speaker , dialogFID ) ;
3726: LD_VAR 0 7
3730: PPUSH
3731: LD_VAR 0 3
3735: PPUSH
3736: CALL_OW 94
// end else
3740: GO 3787
// begin if GetSex ( speaker ) = sex_male then
3742: LD_VAR 0 7
3746: PPUSH
3747: CALL_OW 258
3751: PUSH
3752: LD_INT 1
3754: EQUAL
3755: IFFALSE 3773
// Say ( speaker , dialogMID ) else
3757: LD_VAR 0 7
3761: PPUSH
3762: LD_VAR 0 2
3766: PPUSH
3767: CALL_OW 88
3771: GO 3787
// Say ( speaker , dialogFID ) ;
3773: LD_VAR 0 7
3777: PPUSH
3778: LD_VAR 0 3
3782: PPUSH
3783: CALL_OW 88
// end ; result := speaker ;
3787: LD_ADDR_VAR 0 5
3791: PUSH
3792: LD_VAR 0 7
3796: ST_TO_ADDR
// end ;
3797: LD_VAR 0 5
3801: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
3802: LD_INT 0
3804: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
3805: LD_VAR 0 1
3809: PPUSH
3810: CALL_OW 255
3814: PUSH
3815: LD_VAR 0 3
3819: EQUAL
3820: PUSH
3821: LD_VAR 0 1
3825: PPUSH
3826: CALL_OW 302
3830: AND
3831: IFFALSE 3853
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
3833: LD_VAR 0 1
3837: PPUSH
3838: LD_EXP 45
3842: PUSH
3843: LD_VAR 0 2
3847: STR
3848: PPUSH
3849: CALL_OW 38
// end ;
3853: LD_VAR 0 4
3857: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
3858: LD_INT 0
3860: PPUSH
3861: PPUSH
3862: PPUSH
// resultCharactersToSave = [ ] ;
3863: LD_ADDR_VAR 0 6
3867: PUSH
3868: EMPTY
3869: ST_TO_ADDR
// for unit in characters do
3870: LD_ADDR_VAR 0 5
3874: PUSH
3875: LD_VAR 0 1
3879: PUSH
3880: FOR_IN
3881: IFFALSE 3929
// if GetSide ( unit ) = side and IsOK ( unit ) then
3883: LD_VAR 0 5
3887: PPUSH
3888: CALL_OW 255
3892: PUSH
3893: LD_VAR 0 3
3897: EQUAL
3898: PUSH
3899: LD_VAR 0 5
3903: PPUSH
3904: CALL_OW 302
3908: AND
3909: IFFALSE 3927
// resultCharactersToSave = resultCharactersToSave ^ unit ;
3911: LD_ADDR_VAR 0 6
3915: PUSH
3916: LD_VAR 0 6
3920: PUSH
3921: LD_VAR 0 5
3925: ADD
3926: ST_TO_ADDR
3927: GO 3880
3929: POP
3930: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
3931: LD_VAR 0 6
3935: PPUSH
3936: LD_EXP 45
3940: PUSH
3941: LD_VAR 0 2
3945: STR
3946: PPUSH
3947: CALL_OW 38
// end ;
3951: LD_VAR 0 4
3955: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
3956: LD_INT 0
3958: PPUSH
3959: PPUSH
3960: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
3961: LD_ADDR_VAR 0 3
3965: PUSH
3966: LD_STRING QMoreInfo
3968: PPUSH
3969: LD_VAR 0 1
3973: PPUSH
3974: CALL_OW 98
3978: ST_TO_ADDR
// case dec of 1 :
3979: LD_VAR 0 3
3983: PUSH
3984: LD_INT 1
3986: DOUBLE
3987: EQUAL
3988: IFTRUE 3992
3990: GO 4052
3992: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
3993: LD_EXP 59
3997: PPUSH
3998: LD_STRING D2a-Bur-1
4000: PPUSH
4001: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4005: LD_EXP 73
4009: PPUSH
4010: LD_STRING D2a-Pla-1
4012: PPUSH
4013: CALL_OW 88
// q1 = q diff 1 ;
4017: LD_ADDR_VAR 0 4
4021: PUSH
4022: LD_VAR 0 1
4026: PUSH
4027: LD_INT 1
4029: DIFF
4030: ST_TO_ADDR
// if q1 >= 2 then
4031: LD_VAR 0 4
4035: PUSH
4036: LD_INT 2
4038: GREATEREQUAL
4039: IFFALSE 4050
// Question1 ( q1 ) ;
4041: LD_VAR 0 4
4045: PPUSH
4046: CALL 3956 0 1
// end ; 2 :
4050: GO 4189
4052: LD_INT 2
4054: DOUBLE
4055: EQUAL
4056: IFTRUE 4060
4058: GO 4120
4060: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4061: LD_EXP 59
4065: PPUSH
4066: LD_STRING D2b-Bur-1
4068: PPUSH
4069: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4073: LD_EXP 73
4077: PPUSH
4078: LD_STRING D2b-Pla-1
4080: PPUSH
4081: CALL_OW 88
// q1 = q diff 2 ;
4085: LD_ADDR_VAR 0 4
4089: PUSH
4090: LD_VAR 0 1
4094: PUSH
4095: LD_INT 2
4097: DIFF
4098: ST_TO_ADDR
// if q1 >= 2 then
4099: LD_VAR 0 4
4103: PUSH
4104: LD_INT 2
4106: GREATEREQUAL
4107: IFFALSE 4118
// Question1 ( q1 ) ;
4109: LD_VAR 0 4
4113: PPUSH
4114: CALL 3956 0 1
// end ; 3 :
4118: GO 4189
4120: LD_INT 3
4122: DOUBLE
4123: EQUAL
4124: IFTRUE 4128
4126: GO 4188
4128: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4129: LD_EXP 59
4133: PPUSH
4134: LD_STRING D2c-Bur-1
4136: PPUSH
4137: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4141: LD_EXP 73
4145: PPUSH
4146: LD_STRING D2c-Pla-1
4148: PPUSH
4149: CALL_OW 88
// q1 = q diff 3 ;
4153: LD_ADDR_VAR 0 4
4157: PUSH
4158: LD_VAR 0 1
4162: PUSH
4163: LD_INT 3
4165: DIFF
4166: ST_TO_ADDR
// if q1 >= 2 then
4167: LD_VAR 0 4
4171: PUSH
4172: LD_INT 2
4174: GREATEREQUAL
4175: IFFALSE 4186
// Question1 ( q1 ) ;
4177: LD_VAR 0 4
4181: PPUSH
4182: CALL 3956 0 1
// end ; end ;
4186: GO 4189
4188: POP
// end ;
4189: LD_VAR 0 2
4193: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4194: LD_INT 0
4196: PPUSH
4197: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 then
4198: LD_VAR 0 1
4202: PPUSH
4203: CALL_OW 302
4207: NOT
4208: PUSH
4209: LD_VAR 0 2
4213: PPUSH
4214: CALL_OW 302
4218: NOT
4219: OR
4220: PUSH
4221: LD_VAR 0 3
4225: PPUSH
4226: CALL_OW 302
4230: NOT
4231: OR
4232: PUSH
4233: LD_VAR 0 3
4237: PPUSH
4238: CALL_OW 261
4242: PUSH
4243: LD_INT 100
4245: EQUAL
4246: OR
4247: IFFALSE 4251
// exit ;
4249: GO 4370
// AddComTransport ( engineer , depot , mat_oil ) ;
4251: LD_VAR 0 1
4255: PPUSH
4256: LD_VAR 0 2
4260: PPUSH
4261: LD_INT 2
4263: PPUSH
4264: CALL_OW 211
// repeat wait ( 0 0$1 ) ;
4268: LD_INT 35
4270: PPUSH
4271: CALL_OW 67
// until Carry ( engineer ) ;
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 281
4284: IFFALSE 4268
// RemoveTasks ( engineer ) ;
4286: LD_VAR 0 1
4290: PPUSH
4291: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4295: LD_VAR 0 1
4299: PPUSH
4300: LD_STRING O
4302: PUSH
4303: LD_INT 0
4305: PUSH
4306: LD_INT 0
4308: PUSH
4309: LD_VAR 0 3
4313: PUSH
4314: LD_INT 0
4316: PUSH
4317: LD_INT 0
4319: PUSH
4320: LD_INT 0
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: PPUSH
4335: CALL_OW 446
// repeat wait ( 0 0$1 ) ;
4339: LD_INT 35
4341: PPUSH
4342: CALL_OW 67
// until not Carry ( engineer ) ;
4346: LD_VAR 0 1
4350: PPUSH
4351: CALL_OW 281
4355: NOT
4356: IFFALSE 4339
// SetFuel ( vehicle , 100 ) ;
4358: LD_VAR 0 3
4362: PPUSH
4363: LD_INT 100
4365: PPUSH
4366: CALL_OW 240
// end ;
4370: LD_VAR 0 4
4374: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4375: LD_INT 0
4377: PPUSH
4378: PPUSH
4379: PPUSH
4380: PPUSH
4381: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4382: LD_ADDR_VAR 0 8
4386: PUSH
4387: LD_INT 48
4389: PUSH
4390: LD_INT 49
4392: PUSH
4393: LD_INT 50
4395: PUSH
4396: LD_INT 20
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: LD_INT 51
4404: PUSH
4405: LD_INT 52
4407: PUSH
4408: LD_INT 69
4410: PUSH
4411: LD_INT 39
4413: PUSH
4414: LD_INT 34
4416: PUSH
4417: LD_INT 40
4419: PUSH
4420: LD_INT 53
4422: PUSH
4423: LD_INT 71
4425: PUSH
4426: LD_INT 57
4428: PUSH
4429: LD_INT 58
4431: PUSH
4432: LD_INT 44
4434: PUSH
4435: LD_INT 32
4437: PUSH
4438: LD_INT 27
4440: PUSH
4441: LD_INT 23
4443: PUSH
4444: LD_INT 33
4446: PUSH
4447: LD_INT 59
4449: PUSH
4450: LD_INT 54
4452: PUSH
4453: LD_INT 55
4455: PUSH
4456: LD_INT 56
4458: PUSH
4459: LD_INT 63
4461: PUSH
4462: LD_INT 64
4464: PUSH
4465: LD_INT 65
4467: PUSH
4468: LD_INT 30
4470: PUSH
4471: LD_INT 31
4473: PUSH
4474: LD_INT 21
4476: PUSH
4477: LD_INT 22
4479: PUSH
4480: LD_INT 25
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// for i = 1 to ru_tech_list do
4517: LD_ADDR_VAR 0 5
4521: PUSH
4522: DOUBLE
4523: LD_INT 1
4525: DEC
4526: ST_TO_ADDR
4527: LD_VAR 0 8
4531: PUSH
4532: FOR_TO
4533: IFFALSE 4609
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
4535: LD_VAR 0 8
4539: PUSH
4540: LD_VAR 0 5
4544: ARRAY
4545: PPUSH
4546: LD_VAR 0 1
4550: PPUSH
4551: CALL_OW 321
4555: PUSH
4556: LD_INT 1
4558: EQUAL
4559: PUSH
4560: LD_VAR 0 8
4564: PUSH
4565: LD_VAR 0 5
4569: ARRAY
4570: PPUSH
4571: LD_VAR 0 3
4575: PPUSH
4576: CALL_OW 482
4580: PUSH
4581: LD_INT 1
4583: EQUAL
4584: AND
4585: IFFALSE 4607
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
4587: LD_VAR 0 2
4591: PPUSH
4592: LD_VAR 0 8
4596: PUSH
4597: LD_VAR 0 5
4601: ARRAY
4602: PPUSH
4603: CALL_OW 184
4607: GO 4532
4609: POP
4610: POP
// end ;
4611: LD_VAR 0 4
4615: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4616: LD_INT 0
4618: PPUSH
4619: PPUSH
4620: PPUSH
// uc_side := GetSide ( b ) ;
4621: LD_ADDR_OWVAR 20
4625: PUSH
4626: LD_VAR 0 2
4630: PPUSH
4631: CALL_OW 255
4635: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4636: LD_ADDR_OWVAR 21
4640: PUSH
4641: LD_VAR 0 2
4645: PPUSH
4646: CALL_OW 248
4650: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4651: LD_INT 0
4653: PPUSH
4654: LD_INT 1
4656: PPUSH
4657: LD_VAR 0 1
4661: PPUSH
4662: CALL_OW 380
// un = CreateHuman ;
4666: LD_ADDR_VAR 0 4
4670: PUSH
4671: CALL_OW 44
4675: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4676: LD_ADDR_VAR 0 5
4680: PUSH
4681: LD_VAR 0 2
4685: PPUSH
4686: CALL_OW 254
4690: PUSH
4691: LD_INT 3
4693: MINUS
4694: ST_TO_ADDR
// if dir < 0 then
4695: LD_VAR 0 5
4699: PUSH
4700: LD_INT 0
4702: LESS
4703: IFFALSE 4719
// dir := 6 + dir ;
4705: LD_ADDR_VAR 0 5
4709: PUSH
4710: LD_INT 6
4712: PUSH
4713: LD_VAR 0 5
4717: PLUS
4718: ST_TO_ADDR
// SetDir ( un , dir ) ;
4719: LD_VAR 0 4
4723: PPUSH
4724: LD_VAR 0 5
4728: PPUSH
4729: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4733: LD_VAR 0 4
4737: PPUSH
4738: LD_VAR 0 2
4742: PPUSH
4743: CALL_OW 52
// result = un ;
4747: LD_ADDR_VAR 0 3
4751: PUSH
4752: LD_VAR 0 4
4756: ST_TO_ADDR
// end ;
4757: LD_VAR 0 3
4761: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
4762: LD_INT 0
4764: PPUSH
4765: PPUSH
4766: PPUSH
// tmp = [ ] ;
4767: LD_ADDR_VAR 0 5
4771: PUSH
4772: EMPTY
4773: ST_TO_ADDR
// if not vehicles then
4774: LD_VAR 0 1
4778: NOT
4779: IFFALSE 4783
// exit ;
4781: GO 4900
// for i in vehicles do
4783: LD_ADDR_VAR 0 4
4787: PUSH
4788: LD_VAR 0 1
4792: PUSH
4793: FOR_IN
4794: IFFALSE 4884
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
4796: LD_ADDR_VAR 0 5
4800: PUSH
4801: LD_VAR 0 5
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: LD_VAR 0 4
4813: PPUSH
4814: CALL_OW 265
4818: PUSH
4819: LD_VAR 0 4
4823: PPUSH
4824: CALL_OW 262
4828: PUSH
4829: LD_VAR 0 4
4833: PPUSH
4834: CALL_OW 263
4838: PUSH
4839: LD_VAR 0 4
4843: PPUSH
4844: CALL_OW 264
4848: PUSH
4849: LD_VAR 0 4
4853: PPUSH
4854: CALL_OW 261
4858: PUSH
4859: LD_VAR 0 4
4863: PPUSH
4864: CALL_OW 256
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 2
4881: ST_TO_ADDR
4882: GO 4793
4884: POP
4885: POP
// SaveVariable ( tmp , ident ) ;
4886: LD_VAR 0 5
4890: PPUSH
4891: LD_VAR 0 2
4895: PPUSH
4896: CALL_OW 39
// end ;
4900: LD_VAR 0 3
4904: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
4905: LD_INT 0
4907: PPUSH
4908: PPUSH
4909: PPUSH
// buildingsToSave = [ ] ;
4910: LD_ADDR_VAR 0 5
4914: PUSH
4915: EMPTY
4916: ST_TO_ADDR
// if not buildings then
4917: LD_VAR 0 1
4921: NOT
4922: IFFALSE 4926
// exit ;
4924: GO 5501
// for i in buildings do
4926: LD_ADDR_VAR 0 4
4930: PUSH
4931: LD_VAR 0 1
4935: PUSH
4936: FOR_IN
4937: IFFALSE 5485
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4939: LD_VAR 0 4
4943: PPUSH
4944: CALL_OW 266
4948: PUSH
4949: LD_INT 6
4951: PUSH
4952: LD_INT 7
4954: PUSH
4955: LD_INT 8
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: IN
4963: IFFALSE 5088
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
4965: LD_ADDR_VAR 0 5
4969: PUSH
4970: LD_VAR 0 5
4974: PUSH
4975: LD_VAR 0 4
4979: PPUSH
4980: CALL_OW 266
4984: PUSH
4985: LD_VAR 0 4
4989: PPUSH
4990: CALL_OW 250
4994: PUSH
4995: LD_VAR 0 4
4999: PPUSH
5000: CALL_OW 251
5004: PUSH
5005: LD_VAR 0 4
5009: PPUSH
5010: CALL_OW 254
5014: PUSH
5015: LD_VAR 0 4
5019: PPUSH
5020: CALL_OW 267
5024: PUSH
5025: LD_VAR 0 4
5029: PPUSH
5030: CALL_OW 248
5034: PUSH
5035: LD_VAR 0 4
5039: PPUSH
5040: CALL_OW 256
5044: PUSH
5045: LD_VAR 0 4
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: CALL_OW 268
5057: PUSH
5058: LD_VAR 0 4
5062: PPUSH
5063: LD_INT 2
5065: PPUSH
5066: CALL_OW 268
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: ADD
5085: ST_TO_ADDR
5086: GO 5483
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5088: LD_VAR 0 4
5092: PPUSH
5093: CALL_OW 266
5097: PUSH
5098: LD_INT 32
5100: PUSH
5101: LD_INT 33
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: IN
5108: IFFALSE 5216
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: LD_VAR 0 5
5119: PUSH
5120: LD_VAR 0 4
5124: PPUSH
5125: CALL_OW 266
5129: PUSH
5130: LD_VAR 0 4
5134: PPUSH
5135: CALL_OW 250
5139: PUSH
5140: LD_VAR 0 4
5144: PPUSH
5145: CALL_OW 251
5149: PUSH
5150: LD_VAR 0 4
5154: PPUSH
5155: CALL_OW 254
5159: PUSH
5160: LD_VAR 0 4
5164: PPUSH
5165: CALL_OW 267
5169: PUSH
5170: LD_VAR 0 4
5174: PPUSH
5175: CALL_OW 248
5179: PUSH
5180: LD_VAR 0 4
5184: PPUSH
5185: CALL_OW 256
5189: PUSH
5190: LD_VAR 0 4
5194: PPUSH
5195: CALL_OW 269
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: EMPTY
5211: LIST
5212: ADD
5213: ST_TO_ADDR
5214: GO 5483
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5216: LD_VAR 0 4
5220: PPUSH
5221: CALL_OW 266
5225: PUSH
5226: LD_INT 0
5228: PUSH
5229: LD_INT 1
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: IN
5236: IFFALSE 5390
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5238: LD_ADDR_VAR 0 5
5242: PUSH
5243: LD_VAR 0 5
5247: PUSH
5248: LD_VAR 0 4
5252: PPUSH
5253: CALL_OW 266
5257: PUSH
5258: LD_VAR 0 4
5262: PPUSH
5263: CALL_OW 250
5267: PUSH
5268: LD_VAR 0 4
5272: PPUSH
5273: CALL_OW 251
5277: PUSH
5278: LD_VAR 0 4
5282: PPUSH
5283: CALL_OW 254
5287: PUSH
5288: LD_VAR 0 4
5292: PPUSH
5293: CALL_OW 267
5297: PUSH
5298: LD_VAR 0 4
5302: PPUSH
5303: CALL_OW 248
5307: PUSH
5308: LD_VAR 0 4
5312: PPUSH
5313: CALL_OW 256
5317: PUSH
5318: LD_VAR 0 4
5322: PPUSH
5323: CALL_OW 274
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: CALL_OW 275
5335: PUSH
5336: LD_VAR 0 4
5340: PPUSH
5341: CALL_OW 274
5345: PPUSH
5346: LD_INT 2
5348: PPUSH
5349: CALL_OW 275
5353: PUSH
5354: LD_VAR 0 4
5358: PPUSH
5359: CALL_OW 274
5363: PPUSH
5364: LD_INT 3
5366: PPUSH
5367: CALL_OW 275
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: PUSH
5384: EMPTY
5385: LIST
5386: ADD
5387: ST_TO_ADDR
5388: GO 5483
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
5390: LD_ADDR_VAR 0 5
5394: PUSH
5395: LD_VAR 0 5
5399: PUSH
5400: LD_VAR 0 4
5404: PPUSH
5405: CALL_OW 266
5409: PUSH
5410: LD_VAR 0 4
5414: PPUSH
5415: CALL_OW 250
5419: PUSH
5420: LD_VAR 0 4
5424: PPUSH
5425: CALL_OW 251
5429: PUSH
5430: LD_VAR 0 4
5434: PPUSH
5435: CALL_OW 254
5439: PUSH
5440: LD_VAR 0 4
5444: PPUSH
5445: CALL_OW 267
5449: PUSH
5450: LD_VAR 0 4
5454: PPUSH
5455: CALL_OW 248
5459: PUSH
5460: LD_VAR 0 4
5464: PPUSH
5465: CALL_OW 256
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: PUSH
5479: EMPTY
5480: LIST
5481: ADD
5482: ST_TO_ADDR
// end ;
5483: GO 4936
5485: POP
5486: POP
// SaveVariable ( buildingsToSave , ident ) ;
5487: LD_VAR 0 5
5491: PPUSH
5492: LD_VAR 0 2
5496: PPUSH
5497: CALL_OW 39
// end ;
5501: LD_VAR 0 3
5505: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
5506: LD_INT 0
5508: PPUSH
5509: PPUSH
5510: PPUSH
5511: PPUSH
5512: PPUSH
// belkovTeam = [ ] ;
5513: LD_ADDR_EXP 70
5517: PUSH
5518: EMPTY
5519: ST_TO_ADDR
// if belkovReturn then
5520: LD_EXP 6
5524: IFFALSE 5544
// belkovTeam = belkovTeam ^ Belkov else
5526: LD_ADDR_EXP 70
5530: PUSH
5531: LD_EXP 70
5535: PUSH
5536: LD_EXP 61
5540: ADD
5541: ST_TO_ADDR
5542: GO 5560
// belkovTeam = belkovTeam ^ Belkov2 ;
5544: LD_ADDR_EXP 70
5548: PUSH
5549: LD_EXP 70
5553: PUSH
5554: LD_EXP 65
5558: ADD
5559: ST_TO_ADDR
// for unit in other_survivors do
5560: LD_ADDR_VAR 0 3
5564: PUSH
5565: LD_EXP 63
5569: PUSH
5570: FOR_IN
5571: IFFALSE 5612
// if IsOK ( unit ) and belkovTeam < 5 then
5573: LD_VAR 0 3
5577: PPUSH
5578: CALL_OW 302
5582: PUSH
5583: LD_EXP 70
5587: PUSH
5588: LD_INT 5
5590: LESS
5591: AND
5592: IFFALSE 5610
// belkovTeam = belkovTeam ^ unit ;
5594: LD_ADDR_EXP 70
5598: PUSH
5599: LD_EXP 70
5603: PUSH
5604: LD_VAR 0 3
5608: ADD
5609: ST_TO_ADDR
5610: GO 5570
5612: POP
5613: POP
// if belkovTeam < 5 then
5614: LD_EXP 70
5618: PUSH
5619: LD_INT 5
5621: LESS
5622: IFFALSE 5748
// begin restRandSolds = 5 - belkovTeam ;
5624: LD_ADDR_VAR 0 4
5628: PUSH
5629: LD_INT 5
5631: PUSH
5632: LD_EXP 70
5636: MINUS
5637: ST_TO_ADDR
// for i := 1 to restRandSolds do
5638: LD_ADDR_VAR 0 2
5642: PUSH
5643: DOUBLE
5644: LD_INT 1
5646: DEC
5647: ST_TO_ADDR
5648: LD_VAR 0 4
5652: PUSH
5653: FOR_TO
5654: IFFALSE 5746
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
5656: LD_ADDR_VAR 0 3
5660: PUSH
5661: LD_EXP 66
5665: PPUSH
5666: LD_INT 25
5668: PUSH
5669: LD_INT 1
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PUSH
5676: EMPTY
5677: LIST
5678: PPUSH
5679: CALL_OW 72
5683: PUSH
5684: LD_EXP 64
5688: DIFF
5689: PUSH
5690: FOR_IN
5691: IFFALSE 5742
// if not unit in belkovTeam then
5693: LD_VAR 0 3
5697: PUSH
5698: LD_EXP 70
5702: IN
5703: NOT
5704: IFFALSE 5740
// begin belkovTeam = belkovTeam ^ unit ;
5706: LD_ADDR_EXP 70
5710: PUSH
5711: LD_EXP 70
5715: PUSH
5716: LD_VAR 0 3
5720: ADD
5721: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
5722: LD_ADDR_EXP 66
5726: PUSH
5727: LD_EXP 66
5731: PUSH
5732: LD_VAR 0 3
5736: DIFF
5737: ST_TO_ADDR
// break ;
5738: GO 5742
// end ;
5740: GO 5690
5742: POP
5743: POP
5744: GO 5653
5746: POP
5747: POP
// end ; tmp = belkovTeam diff Belkov ;
5748: LD_ADDR_VAR 0 5
5752: PUSH
5753: LD_EXP 70
5757: PUSH
5758: LD_EXP 61
5762: DIFF
5763: ST_TO_ADDR
// if tmp < 4 then
5764: LD_VAR 0 5
5768: PUSH
5769: LD_INT 4
5771: LESS
5772: IFFALSE 5856
// begin for i := 1 to 4 - tmp do
5774: LD_ADDR_VAR 0 2
5778: PUSH
5779: DOUBLE
5780: LD_INT 1
5782: DEC
5783: ST_TO_ADDR
5784: LD_INT 4
5786: PUSH
5787: LD_VAR 0 5
5791: MINUS
5792: PUSH
5793: FOR_TO
5794: IFFALSE 5854
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
5796: LD_INT 0
5798: PPUSH
5799: LD_INT 1
5801: PPUSH
5802: LD_INT 2
5804: PPUSH
5805: CALL_OW 12
5809: PPUSH
5810: CALL_OW 381
// unit = CreateHuman ;
5814: LD_ADDR_VAR 0 3
5818: PUSH
5819: CALL_OW 44
5823: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
5824: LD_ADDR_EXP 70
5828: PUSH
5829: LD_EXP 70
5833: PUSH
5834: LD_VAR 0 3
5838: ADD
5839: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
5840: LD_VAR 0 3
5844: PPUSH
5845: LD_INT 209
5847: PPUSH
5848: CALL_OW 52
// end ;
5852: GO 5793
5854: POP
5855: POP
// end ; belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
5856: LD_ADDR_EXP 70
5860: PUSH
5861: LD_EXP 70
5865: PUSH
5866: LD_EXP 66
5870: PPUSH
5871: LD_INT 25
5873: PUSH
5874: LD_INT 4
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: EMPTY
5882: LIST
5883: PPUSH
5884: CALL_OW 72
5888: PUSH
5889: LD_INT 1
5891: ARRAY
5892: ADD
5893: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
5894: LD_ADDR_EXP 66
5898: PUSH
5899: LD_EXP 66
5903: PUSH
5904: LD_EXP 66
5908: PPUSH
5909: LD_INT 25
5911: PUSH
5912: LD_INT 4
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: PPUSH
5922: CALL_OW 72
5926: PUSH
5927: LD_INT 1
5929: ARRAY
5930: DIFF
5931: ST_TO_ADDR
// end ;
5932: LD_VAR 0 1
5936: RET
// export function PlatonovSendSupport ; begin
5937: LD_INT 0
5939: PPUSH
// ComExitBuilding ( [ Kuklajs , Benko ] ) ;
5940: LD_EXP 75
5944: PUSH
5945: LD_EXP 76
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PPUSH
5954: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
5958: LD_EXP 75
5962: PUSH
5963: LD_EXP 76
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PPUSH
5972: LD_INT 112
5974: PPUSH
5975: LD_INT 96
5977: PPUSH
5978: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
5982: LD_EXP 75
5986: PUSH
5987: LD_EXP 76
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PPUSH
5996: LD_INT 3
5998: PPUSH
5999: CALL_OW 235
// end ; end_of_file
6003: LD_VAR 0 1
6007: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6008: LD_INT 0
6010: PPUSH
6011: PPUSH
6012: PPUSH
6013: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6014: LD_EXP 59
6018: PPUSH
6019: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6023: LD_EXP 59
6027: PPUSH
6028: LD_INT 163
6030: PPUSH
6031: LD_INT 108
6033: PPUSH
6034: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6038: LD_EXP 59
6042: PPUSH
6043: LD_EXP 64
6047: PPUSH
6048: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: LD_INT 22
6059: PUSH
6060: LD_INT 3
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 21
6069: PUSH
6070: LD_INT 1
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PPUSH
6081: CALL_OW 69
6085: PUSH
6086: LD_EXP 59
6090: DIFF
6091: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
6092: LD_ADDR_VAR 0 4
6096: PUSH
6097: DOUBLE
6098: LD_INT 1
6100: DEC
6101: ST_TO_ADDR
6102: LD_EXP 49
6106: PUSH
6107: FOR_TO
6108: IFFALSE 6226
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6110: LD_ADDR_VAR 0 3
6114: PUSH
6115: LD_VAR 0 2
6119: PPUSH
6120: LD_EXP 49
6124: PUSH
6125: LD_VAR 0 4
6129: ARRAY
6130: PUSH
6131: LD_INT 1
6133: ARRAY
6134: PPUSH
6135: LD_EXP 49
6139: PUSH
6140: LD_VAR 0 4
6144: ARRAY
6145: PUSH
6146: LD_INT 2
6148: ARRAY
6149: PPUSH
6150: CALL_OW 73
6154: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6155: LD_VAR 0 3
6159: PPUSH
6160: LD_EXP 49
6164: PUSH
6165: LD_VAR 0 4
6169: ARRAY
6170: PUSH
6171: LD_INT 1
6173: ARRAY
6174: PPUSH
6175: LD_EXP 49
6179: PUSH
6180: LD_VAR 0 4
6184: ARRAY
6185: PUSH
6186: LD_INT 2
6188: ARRAY
6189: PPUSH
6190: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
6194: LD_VAR 0 3
6198: PPUSH
6199: LD_EXP 64
6203: PPUSH
6204: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
6208: LD_ADDR_VAR 0 2
6212: PUSH
6213: LD_VAR 0 2
6217: PUSH
6218: LD_VAR 0 3
6222: DIFF
6223: ST_TO_ADDR
// end ;
6224: GO 6107
6226: POP
6227: POP
// repeat CenterNowOnUnits ( Burlak ) ;
6228: LD_EXP 59
6232: PPUSH
6233: CALL_OW 87
// wait ( 0 0$1 ) ;
6237: LD_INT 35
6239: PPUSH
6240: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
6244: LD_EXP 59
6248: PPUSH
6249: LD_EXP 64
6253: PPUSH
6254: CALL_OW 296
6258: PUSH
6259: LD_INT 4
6261: LESS
6262: IFFALSE 6228
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6264: LD_EXP 59
6268: PUSH
6269: LD_EXP 64
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PPUSH
6278: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
6282: LD_EXP 64
6286: PPUSH
6287: LD_EXP 59
6291: PPUSH
6292: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
6296: LD_EXP 64
6300: PPUSH
6301: LD_STRING D1-Kur-1
6303: PPUSH
6304: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6308: LD_EXP 59
6312: PPUSH
6313: LD_STRING D1-Bur-1
6315: PPUSH
6316: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
6320: LD_EXP 64
6324: PPUSH
6325: LD_STRING D1-Kur-2
6327: PPUSH
6328: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
6332: LD_EXP 59
6336: PPUSH
6337: LD_STRING D1-Bur-2
6339: PPUSH
6340: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6344: LD_EXP 64
6348: PPUSH
6349: LD_STRING D1-Kur-3
6351: PPUSH
6352: CALL_OW 88
// if IsOK ( Gnyevko ) then
6356: LD_EXP 60
6360: PPUSH
6361: CALL_OW 302
6365: IFFALSE 6379
// Say ( Kurin , D1-Kur-3a ) ;
6367: LD_EXP 64
6371: PPUSH
6372: LD_STRING D1-Kur-3a
6374: PPUSH
6375: CALL_OW 88
// InGameOff ;
6379: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
6383: LD_INT 22
6385: PUSH
6386: LD_INT 3
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PUSH
6393: LD_INT 21
6395: PUSH
6396: LD_INT 1
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PPUSH
6407: CALL_OW 69
6411: PUSH
6412: LD_EXP 59
6416: PUSH
6417: LD_EXP 60
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: DIFF
6426: PPUSH
6427: LD_INT 6
6429: PPUSH
6430: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
6434: LD_EXP 67
6438: PPUSH
6439: LD_INT 3
6441: PPUSH
6442: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
6446: LD_INT 9
6448: PPUSH
6449: LD_INT 22
6451: PUSH
6452: LD_INT 6
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 21
6461: PUSH
6462: LD_INT 1
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PPUSH
6473: CALL_OW 70
6477: PUSH
6478: LD_EXP 64
6482: DIFF
6483: PPUSH
6484: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
6488: LD_EXP 63
6492: PPUSH
6493: LD_INT 95
6495: PPUSH
6496: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
6500: LD_EXP 61
6504: PPUSH
6505: LD_INT 95
6507: PPUSH
6508: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
6512: LD_EXP 62
6516: PPUSH
6517: CALL_OW 305
6521: IFFALSE 6535
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
6523: LD_EXP 62
6527: PPUSH
6528: LD_INT 83
6530: PPUSH
6531: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
6535: LD_STRING 01_Gnyevko
6537: PPUSH
6538: CALL_OW 28
6542: NOT
6543: IFFALSE 6557
// SetSide ( randomMech , 3 ) ;
6545: LD_EXP 68
6549: PPUSH
6550: LD_INT 3
6552: PPUSH
6553: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
6557: LD_STRING M1
6559: PPUSH
6560: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 6
6569: PPUSH
6570: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
6574: LD_INT 3
6576: PPUSH
6577: LD_INT 7
6579: PPUSH
6580: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
6584: LD_INT 6
6586: PPUSH
6587: LD_INT 6
6589: PPUSH
6590: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
6594: LD_INT 6
6596: PPUSH
6597: LD_INT 7
6599: PPUSH
6600: CALL_OW 334
// SaveForQuickRestart ;
6604: CALL_OW 22
// end ;
6608: LD_VAR 0 1
6612: RET
// every 0 0$1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
6613: LD_EXP 20
6617: NOT
6618: PUSH
6619: LD_INT 20
6621: PPUSH
6622: LD_INT 22
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 2
6634: PUSH
6635: LD_INT 21
6637: PUSH
6638: LD_INT 1
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 21
6647: PUSH
6648: LD_INT 2
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PPUSH
6664: CALL_OW 70
6668: PUSH
6669: LD_INT 0
6671: GREATER
6672: AND
6673: IFFALSE 6894
6675: GO 6677
6677: DISABLE
6678: LD_INT 0
6680: PPUSH
// begin enable ;
6681: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: LD_INT 20
6689: PPUSH
6690: LD_INT 22
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: LD_INT 21
6705: PUSH
6706: LD_INT 1
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 21
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PPUSH
6732: CALL_OW 70
6736: PUSH
6737: FOR_IN
6738: IFFALSE 6877
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
6740: LD_VAR 0 1
6744: PPUSH
6745: LD_VAR 0 1
6749: PPUSH
6750: CALL_OW 250
6754: PPUSH
6755: LD_VAR 0 1
6759: PPUSH
6760: CALL_OW 251
6764: PUSH
6765: LD_INT 5
6767: PLUS
6768: PPUSH
6769: CALL_OW 111
// if dialogLoopBlocker then
6773: LD_EXP 31
6777: IFFALSE 6783
// exit ;
6779: POP
6780: POP
6781: GO 6894
// dialogLoopBlocker = true ;
6783: LD_ADDR_EXP 31
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// if not meetPlatonov then
6791: LD_EXP 7
6795: NOT
6796: IFFALSE 6859
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
6798: LD_VAR 0 1
6802: PUSH
6803: LD_EXP 59
6807: NONEQUAL
6808: PUSH
6809: LD_EXP 67
6813: PPUSH
6814: CALL_OW 302
6818: AND
6819: IFFALSE 6833
// Say ( Kovalyuk , D1b-Kov-1 ) ;
6821: LD_EXP 67
6825: PPUSH
6826: LD_STRING D1b-Kov-1
6828: PPUSH
6829: CALL_OW 88
// if unit = Burlak then
6833: LD_VAR 0 1
6837: PUSH
6838: LD_EXP 59
6842: EQUAL
6843: IFFALSE 6857
// Say ( Burlak , D1b-Bur-1 ) ;
6845: LD_EXP 59
6849: PPUSH
6850: LD_STRING D1b-Bur-1
6852: PPUSH
6853: CALL_OW 88
// end else
6857: GO 6871
// Say ( Platonov , D8-Pla-1 ) ;
6859: LD_EXP 73
6863: PPUSH
6864: LD_STRING D8-Pla-1
6866: PPUSH
6867: CALL_OW 88
// exit ;
6871: POP
6872: POP
6873: GO 6894
// end ;
6875: GO 6737
6877: POP
6878: POP
// wait ( 0 0$5 ) ;
6879: LD_INT 175
6881: PPUSH
6882: CALL_OW 67
// dialogLoopBlocker = false ;
6886: LD_ADDR_EXP 31
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// end ;
6894: PPOPN 1
6896: END
// every 0 0$1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
6897: LD_EXP 19
6901: NOT
6902: PUSH
6903: LD_INT 8
6905: PPUSH
6906: LD_INT 22
6908: PUSH
6909: LD_INT 3
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 2
6918: PUSH
6919: LD_INT 21
6921: PUSH
6922: LD_INT 1
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 2
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PPUSH
6948: CALL_OW 71
6952: PUSH
6953: LD_INT 0
6955: GREATER
6956: AND
6957: IFFALSE 7092
6959: GO 6961
6961: DISABLE
6962: LD_INT 0
6964: PPUSH
// begin enable ;
6965: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
6966: LD_ADDR_VAR 0 1
6970: PUSH
6971: LD_INT 8
6973: PPUSH
6974: LD_INT 22
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 2
6986: PUSH
6987: LD_INT 21
6989: PUSH
6990: LD_INT 1
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 2
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PPUSH
7016: CALL_OW 71
7020: PUSH
7021: FOR_IN
7022: IFFALSE 7075
// begin ComMoveXY ( unit , 114 , 98 ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_INT 114
7031: PPUSH
7032: LD_INT 98
7034: PPUSH
7035: CALL_OW 111
// if dialogLoopBlocker then
7039: LD_EXP 31
7043: IFFALSE 7049
// exit ;
7045: POP
7046: POP
7047: GO 7092
// dialogLoopBlocker = true ;
7049: LD_ADDR_EXP 31
7053: PUSH
7054: LD_INT 1
7056: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
7057: LD_EXP 73
7061: PPUSH
7062: LD_STRING D8-Pla-1
7064: PPUSH
7065: CALL_OW 88
// exit ;
7069: POP
7070: POP
7071: GO 7092
// end ;
7073: GO 7021
7075: POP
7076: POP
// wait ( 0 0$5 ) ;
7077: LD_INT 175
7079: PPUSH
7080: CALL_OW 67
// dialogLoopBlocker = false ;
7084: LD_ADDR_EXP 31
7088: PUSH
7089: LD_INT 0
7091: ST_TO_ADDR
// end ;
7092: PPOPN 1
7094: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7095: LD_EXP 7
7099: NOT
7100: PUSH
7101: LD_INT 9
7103: PPUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 3
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 70
7132: PUSH
7133: LD_INT 0
7135: GREATER
7136: AND
7137: IFFALSE 7154
7139: GO 7141
7141: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
7142: LD_EXP 64
7146: PPUSH
7147: LD_STRING D1a-Kur-1
7149: PPUSH
7150: CALL_OW 88
7154: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldier ;
7155: LD_EXP 7
7159: NOT
7160: PUSH
7161: LD_EXP 59
7165: PPUSH
7166: CALL_OW 302
7170: AND
7171: PUSH
7172: LD_INT 8
7174: PPUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 21
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 70
7203: PUSH
7204: LD_INT 0
7206: GREATER
7207: AND
7208: IFFALSE 7708
7210: GO 7212
7212: DISABLE
7213: LD_INT 0
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
// begin enable ;
7219: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
7220: LD_ADDR_VAR 0 2
7224: PUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 3
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 21
7237: PUSH
7238: LD_INT 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 69
7253: PUSH
7254: FOR_IN
7255: IFFALSE 7706
// if See ( 6 , unit ) then
7257: LD_INT 6
7259: PPUSH
7260: LD_VAR 0 2
7264: PPUSH
7265: CALL_OW 292
7269: IFFALSE 7704
// begin meetPlatonov = true ;
7271: LD_ADDR_EXP 7
7275: PUSH
7276: LD_INT 1
7278: ST_TO_ADDR
// InGameOn ;
7279: CALL_OW 8
// DialogueOn ;
7283: CALL_OW 6
// randomMaleSoldier = DialogRandom ( UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) , D2-RSol1-1 ,  , false ) ;
7287: LD_ADDR_VAR 0 4
7291: PUSH
7292: LD_EXP 74
7296: PPUSH
7297: LD_INT 26
7299: PUSH
7300: LD_INT 1
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PPUSH
7307: CALL_OW 72
7311: PPUSH
7312: LD_STRING D2-RSol1-1
7314: PPUSH
7315: LD_STRING 
7317: PPUSH
7318: LD_INT 0
7320: PPUSH
7321: CALL 3623 0 4
7325: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
7326: LD_EXP 59
7330: PPUSH
7331: LD_STRING D2-Bur-1
7333: PPUSH
7334: CALL_OW 88
// Say ( randomMaleSoldier , D2-RSol1-2 ) ;
7338: LD_VAR 0 4
7342: PPUSH
7343: LD_STRING D2-RSol1-2
7345: PPUSH
7346: CALL_OW 88
// DialogueOff ;
7350: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
7354: LD_ADDR_VAR 0 3
7358: PUSH
7359: LD_INT 22
7361: PUSH
7362: LD_INT 3
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: LD_INT 21
7371: PUSH
7372: LD_INT 1
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 50
7381: PUSH
7382: EMPTY
7383: LIST
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: ST_TO_ADDR
// for i := 1 to yourUnits do
7395: LD_ADDR_VAR 0 1
7399: PUSH
7400: DOUBLE
7401: LD_INT 1
7403: DEC
7404: ST_TO_ADDR
7405: LD_VAR 0 3
7409: PUSH
7410: FOR_TO
7411: IFFALSE 7480
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
7413: LD_VAR 0 3
7417: PUSH
7418: LD_VAR 0 1
7422: ARRAY
7423: PPUSH
7424: LD_EXP 50
7428: PUSH
7429: LD_VAR 0 1
7433: ARRAY
7434: PUSH
7435: LD_INT 1
7437: ARRAY
7438: PPUSH
7439: LD_EXP 50
7443: PUSH
7444: LD_VAR 0 1
7448: ARRAY
7449: PUSH
7450: LD_INT 2
7452: ARRAY
7453: PPUSH
7454: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
7458: LD_VAR 0 3
7462: PUSH
7463: LD_VAR 0 1
7467: ARRAY
7468: PPUSH
7469: LD_EXP 73
7473: PPUSH
7474: CALL_OW 179
// end ;
7478: GO 7410
7480: POP
7481: POP
// repeat CenterNowOnUnits ( Burlak ) ;
7482: LD_EXP 59
7486: PPUSH
7487: CALL_OW 87
// wait ( 0 0$1 ) ;
7491: LD_INT 35
7493: PPUSH
7494: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
7498: LD_EXP 59
7502: PPUSH
7503: LD_EXP 73
7507: PPUSH
7508: CALL_OW 296
7512: PUSH
7513: LD_INT 4
7515: LESS
7516: IFFALSE 7482
// ComTurnUnit ( Platonov , Burlak ) ;
7518: LD_EXP 73
7522: PPUSH
7523: LD_EXP 59
7527: PPUSH
7528: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7532: LD_EXP 73
7536: PPUSH
7537: LD_STRING D2-Pla-2
7539: PPUSH
7540: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
7544: LD_EXP 59
7548: PPUSH
7549: LD_STRING D2-Bur-2
7551: PPUSH
7552: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
7556: LD_EXP 73
7560: PPUSH
7561: LD_STRING D2-Pla-3
7563: PPUSH
7564: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7568: LD_EXP 59
7572: PPUSH
7573: LD_STRING D2-Bur-3
7575: PPUSH
7576: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7580: LD_EXP 73
7584: PPUSH
7585: LD_STRING D2-Pla-4
7587: PPUSH
7588: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7592: LD_EXP 59
7596: PPUSH
7597: LD_STRING D2-Bur-4
7599: PPUSH
7600: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7604: LD_EXP 73
7608: PPUSH
7609: LD_STRING D2-Pla-5
7611: PPUSH
7612: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
7616: LD_INT 1
7618: PUSH
7619: LD_INT 2
7621: PUSH
7622: LD_INT 3
7624: PUSH
7625: LD_INT 4
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL 3956 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7638: LD_EXP 73
7642: PPUSH
7643: LD_STRING D3-Pla-1
7645: PPUSH
7646: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7650: LD_EXP 59
7654: PPUSH
7655: LD_STRING D3-Bur-1
7657: PPUSH
7658: CALL_OW 88
// InGameOff ;
7662: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7666: LD_STRING M2a
7668: PPUSH
7669: CALL_OW 337
// ComFree ( Platonov ) ;
7673: LD_EXP 73
7677: PPUSH
7678: CALL_OW 139
// SetSide ( beria , 3 ) ;
7682: LD_INT 106
7684: PPUSH
7685: LD_INT 3
7687: PPUSH
7688: CALL_OW 235
// canExitBase = false ;
7692: LD_ADDR_EXP 19
7696: PUSH
7697: LD_INT 0
7699: ST_TO_ADDR
// exit ;
7700: POP
7701: POP
7702: GO 7708
// end ;
7704: GO 7254
7706: POP
7707: POP
// end ;
7708: PPOPN 4
7710: END
// export function Dial_LabConstructed ; begin
7711: LD_INT 0
7713: PPUSH
// labConstructed = true ;
7714: LD_ADDR_EXP 8
7718: PUSH
7719: LD_INT 1
7721: ST_TO_ADDR
// DialogueOn ;
7722: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
7726: LD_EXP 59
7730: PPUSH
7731: LD_STRING D5a-Bur-1
7733: PPUSH
7734: CALL_OW 88
// if workshopConstructed then
7738: LD_EXP 9
7742: IFFALSE 7758
// Say ( Platonov , D5a-Pla-1a ) else
7744: LD_EXP 73
7748: PPUSH
7749: LD_STRING D5a-Pla-1a
7751: PPUSH
7752: CALL_OW 88
7756: GO 7770
// Say ( Platonov , D5a-Pla-1a ) ;
7758: LD_EXP 73
7762: PPUSH
7763: LD_STRING D5a-Pla-1a
7765: PPUSH
7766: CALL_OW 88
// DialogueOff ;
7770: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
7774: LD_STRING M2b
7776: PPUSH
7777: CALL_OW 337
// end ;
7781: LD_VAR 0 1
7785: RET
// export function Dial_WorkshopConstructed ; begin
7786: LD_INT 0
7788: PPUSH
// workshopConstructed = true ;
7789: LD_ADDR_EXP 9
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// DialogueOn ;
7797: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
7801: LD_EXP 59
7805: PPUSH
7806: LD_STRING D5b-Bur-1
7808: PPUSH
7809: CALL_OW 88
// if labConstructed then
7813: LD_EXP 8
7817: IFFALSE 7833
// Say ( Platonov , D5b-Pla-1 ) else
7819: LD_EXP 73
7823: PPUSH
7824: LD_STRING D5b-Pla-1
7826: PPUSH
7827: CALL_OW 88
7831: GO 7845
// Say ( Platonov , D5b-Pla-1a ) ;
7833: LD_EXP 73
7837: PPUSH
7838: LD_STRING D5b-Pla-1a
7840: PPUSH
7841: CALL_OW 88
// DialogueOff ;
7845: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
7849: LD_STRING M2c
7851: PPUSH
7852: CALL_OW 337
// end ;
7856: LD_VAR 0 1
7860: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
7861: LD_INT 0
7863: PPUSH
// wait ( 0 0$1 ) ;
7864: LD_INT 35
7866: PPUSH
7867: CALL_OW 67
// CenterNowOnUnits ( building ) ;
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
7880: LD_INT 22
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 21
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PPUSH
7904: CALL_OW 69
7908: PPUSH
7909: CALL_OW 141
// DialogueOn ;
7913: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
7917: LD_EXP 73
7921: PPUSH
7922: LD_STRING D6-Pla-1
7924: PPUSH
7925: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
7929: LD_EXP 59
7933: PPUSH
7934: LD_STRING D6-Bur-1
7936: PPUSH
7937: CALL_OW 88
// DialogueOff ;
7941: CALL_OW 7
// case GetBType ( building ) of b_lab :
7945: LD_VAR 0 1
7949: PPUSH
7950: CALL_OW 266
7954: PUSH
7955: LD_INT 6
7957: DOUBLE
7958: EQUAL
7959: IFTRUE 7963
7961: GO 8003
7963: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
7964: LD_INT 106
7966: PPUSH
7967: CALL_OW 274
7971: PPUSH
7972: LD_INT 1
7974: PPUSH
7975: LD_INT 106
7977: PPUSH
7978: CALL_OW 274
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: CALL_OW 275
7990: PUSH
7991: LD_EXP 51
7995: PLUS
7996: PPUSH
7997: CALL_OW 277
8001: GO 8196
8003: LD_INT 2
8005: DOUBLE
8006: EQUAL
8007: IFTRUE 8011
8009: GO 8051
8011: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
8012: LD_INT 106
8014: PPUSH
8015: CALL_OW 274
8019: PPUSH
8020: LD_INT 1
8022: PPUSH
8023: LD_INT 106
8025: PPUSH
8026: CALL_OW 274
8030: PPUSH
8031: LD_INT 1
8033: PPUSH
8034: CALL_OW 275
8038: PUSH
8039: LD_EXP 52
8043: PLUS
8044: PPUSH
8045: CALL_OW 277
8049: GO 8196
8051: LD_INT 26
8053: DOUBLE
8054: EQUAL
8055: IFTRUE 8059
8057: GO 8099
8059: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
8060: LD_INT 106
8062: PPUSH
8063: CALL_OW 274
8067: PPUSH
8068: LD_INT 1
8070: PPUSH
8071: LD_INT 106
8073: PPUSH
8074: CALL_OW 274
8078: PPUSH
8079: LD_INT 1
8081: PPUSH
8082: CALL_OW 275
8086: PUSH
8087: LD_EXP 53
8091: PLUS
8092: PPUSH
8093: CALL_OW 277
8097: GO 8196
8099: LD_INT 4
8101: DOUBLE
8102: EQUAL
8103: IFTRUE 8107
8105: GO 8147
8107: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
8108: LD_INT 106
8110: PPUSH
8111: CALL_OW 274
8115: PPUSH
8116: LD_INT 1
8118: PPUSH
8119: LD_INT 106
8121: PPUSH
8122: CALL_OW 274
8126: PPUSH
8127: LD_INT 1
8129: PPUSH
8130: CALL_OW 275
8134: PUSH
8135: LD_EXP 54
8139: PLUS
8140: PPUSH
8141: CALL_OW 277
8145: GO 8196
8147: LD_INT 31
8149: DOUBLE
8150: EQUAL
8151: IFTRUE 8155
8153: GO 8195
8155: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
8156: LD_INT 106
8158: PPUSH
8159: CALL_OW 274
8163: PPUSH
8164: LD_INT 1
8166: PPUSH
8167: LD_INT 106
8169: PPUSH
8170: CALL_OW 274
8174: PPUSH
8175: LD_INT 1
8177: PPUSH
8178: CALL_OW 275
8182: PUSH
8183: LD_EXP 55
8187: PLUS
8188: PPUSH
8189: CALL_OW 277
8193: GO 8196
8195: POP
// RemoveUnit ( building ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 64
// end ;
8205: LD_VAR 0 2
8209: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
8210: LD_EXP 9
8214: PUSH
8215: LD_EXP 8
8219: AND
8220: IFFALSE 8329
8222: GO 8224
8224: DISABLE
// begin DialogueOn ;
8225: CALL_OW 6
// if engineResearched then
8229: LD_EXP 10
8233: IFFALSE 8261
// begin Say ( Burlak , D7b-Bur-1 ) ;
8235: LD_EXP 59
8239: PPUSH
8240: LD_STRING D7b-Bur-1
8242: PPUSH
8243: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8247: LD_EXP 73
8251: PPUSH
8252: LD_STRING D7b-Pla-1
8254: PPUSH
8255: CALL_OW 88
// end else
8259: GO 8285
// begin Say ( Burlak , D7a-Bur-1 ) ;
8261: LD_EXP 59
8265: PPUSH
8266: LD_STRING D7a-Bur-1
8268: PPUSH
8269: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8273: LD_EXP 73
8277: PPUSH
8278: LD_STRING D7a-Pla-1
8280: PPUSH
8281: CALL_OW 88
// end ; DialogueOff ;
8285: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8289: LD_STRING M2
8291: PPUSH
8292: CALL_OW 337
// CreateCratesXYR ( 5 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
8296: LD_INT 5
8298: PPUSH
8299: LD_EXP 73
8303: PPUSH
8304: CALL_OW 250
8308: PPUSH
8309: LD_EXP 73
8313: PPUSH
8314: CALL_OW 251
8318: PPUSH
8319: LD_INT 5
8321: PPUSH
8322: LD_INT 1
8324: PPUSH
8325: CALL_OW 56
// end ;
8329: END
// export function Dial_NewCrates ( x , y ) ; begin
8330: LD_INT 0
8332: PPUSH
// wait ( 0 0$18 ) ;
8333: LD_INT 630
8335: PPUSH
8336: CALL_OW 67
// ComMoveXY ( Platonov , x , y ) ;
8340: LD_EXP 73
8344: PPUSH
8345: LD_VAR 0 1
8349: PPUSH
8350: LD_VAR 0 2
8354: PPUSH
8355: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
8359: LD_EXP 73
8363: PPUSH
8364: LD_STRING D4-Pla-1
8366: PPUSH
8367: CALL_OW 88
// end ;
8371: LD_VAR 0 3
8375: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
8376: LD_INT 0
8378: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
8379: LD_ADDR_EXP 13
8383: PUSH
8384: LD_INT 22
8386: PUSH
8387: LD_INT 3
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: LD_INT 21
8396: PUSH
8397: LD_INT 2
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: PUSH
8413: LD_INT 1
8415: ARRAY
8416: ST_TO_ADDR
// constructedFirstVehicle = true ;
8417: LD_ADDR_EXP 12
8421: PUSH
8422: LD_INT 1
8424: ST_TO_ADDR
// InGameOn ;
8425: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
8429: LD_VAR 0 1
8433: PPUSH
8434: CALL_OW 87
// wait ( 0 0$3 ) ;
8438: LD_INT 105
8440: PPUSH
8441: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
8445: LD_EXP 59
8449: PPUSH
8450: LD_STRING D9-Bur-1
8452: PPUSH
8453: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
8457: LD_EXP 73
8461: PPUSH
8462: LD_EXP 13
8466: PPUSH
8467: CALL_OW 250
8471: PPUSH
8472: LD_EXP 13
8476: PPUSH
8477: CALL_OW 251
8481: PPUSH
8482: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8486: LD_INT 35
8488: PPUSH
8489: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
8493: LD_EXP 73
8497: PPUSH
8498: LD_EXP 13
8502: PPUSH
8503: CALL_OW 296
8507: PUSH
8508: LD_INT 4
8510: LESS
8511: IFFALSE 8486
// ComTurnUnit ( Platonov , firstVeh ) ;
8513: LD_EXP 73
8517: PPUSH
8518: LD_EXP 13
8522: PPUSH
8523: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
8527: LD_EXP 73
8531: PPUSH
8532: LD_STRING D9-Pla-1
8534: PPUSH
8535: CALL_OW 88
// InGameOff ;
8539: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
8543: LD_STRING M3
8545: PPUSH
8546: CALL_OW 337
// canExitBase = true ;
8550: LD_ADDR_EXP 19
8554: PUSH
8555: LD_INT 1
8557: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
8558: LD_EXP 73
8562: PPUSH
8563: LD_INT 112
8565: PPUSH
8566: LD_INT 97
8568: PPUSH
8569: CALL_OW 111
// end ;
8573: LD_VAR 0 2
8577: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
8578: LD_EXP 13
8582: PPUSH
8583: LD_INT 9
8585: PPUSH
8586: CALL_OW 308
8590: PUSH
8591: LD_EXP 14
8595: NOT
8596: AND
8597: IFFALSE 9449
8599: GO 8601
8601: DISABLE
8602: LD_INT 0
8604: PPUSH
8605: PPUSH
8606: PPUSH
// begin vehicleForKurin = true ;
8607: LD_ADDR_EXP 14
8611: PUSH
8612: LD_INT 1
8614: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
8615: LD_ADDR_VAR 0 2
8619: PUSH
8620: LD_EXP 66
8624: PPUSH
8625: LD_INT 25
8627: PUSH
8628: LD_INT 2
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PPUSH
8635: CALL_OW 72
8639: PUSH
8640: LD_INT 1
8642: ARRAY
8643: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
8644: LD_ADDR_VAR 0 3
8648: PUSH
8649: LD_EXP 66
8653: PPUSH
8654: LD_INT 25
8656: PUSH
8657: LD_INT 3
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PPUSH
8664: CALL_OW 72
8668: PUSH
8669: LD_INT 1
8671: ARRAY
8672: ST_TO_ADDR
// InGameOn ;
8673: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
8677: LD_EXP 64
8681: PPUSH
8682: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
8686: LD_EXP 13
8690: PPUSH
8691: LD_EXP 64
8695: PPUSH
8696: CALL_OW 250
8700: PPUSH
8701: LD_EXP 64
8705: PPUSH
8706: CALL_OW 251
8710: PPUSH
8711: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
8715: LD_EXP 64
8719: PPUSH
8720: LD_STRING D10-Kur-1
8722: PPUSH
8723: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
8727: LD_INT 35
8729: PPUSH
8730: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
8734: LD_EXP 13
8738: PPUSH
8739: LD_EXP 64
8743: PPUSH
8744: CALL_OW 250
8748: PPUSH
8749: LD_EXP 64
8753: PPUSH
8754: CALL_OW 251
8758: PPUSH
8759: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
8763: LD_EXP 13
8767: PPUSH
8768: LD_EXP 64
8772: PPUSH
8773: CALL_OW 296
8777: PUSH
8778: LD_INT 9
8780: LESS
8781: IFFALSE 8727
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
8783: LD_EXP 13
8787: PPUSH
8788: CALL_OW 313
8792: PPUSH
8793: CALL_OW 121
// wait ( 0 0$1 ) ;
8797: LD_INT 35
8799: PPUSH
8800: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
8804: LD_EXP 13
8808: PPUSH
8809: CALL_OW 256
8813: PUSH
8814: LD_INT 1000
8816: LESS
8817: IFFALSE 8849
// begin ComExitBuilding ( mech ) ;
8819: LD_VAR 0 3
8823: PPUSH
8824: CALL_OW 122
// wait ( 0 0$1 ) ;
8828: LD_INT 35
8830: PPUSH
8831: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
8835: LD_VAR 0 3
8839: PPUSH
8840: LD_EXP 13
8844: PPUSH
8845: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
8849: LD_EXP 13
8853: PPUSH
8854: CALL_OW 261
8858: PUSH
8859: LD_INT 90
8861: LESS
8862: IFFALSE 8897
// begin ComExitBuilding ( eng ) ;
8864: LD_VAR 0 2
8868: PPUSH
8869: CALL_OW 122
// wait ( 0 0$1 ) ;
8873: LD_INT 35
8875: PPUSH
8876: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
8880: LD_VAR 0 2
8884: PPUSH
8885: LD_INT 71
8887: PPUSH
8888: LD_EXP 13
8892: PPUSH
8893: CALL 4194 0 3
// end ; repeat wait ( 0 0$1 ) ;
8897: LD_INT 35
8899: PPUSH
8900: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
8904: LD_EXP 13
8908: PPUSH
8909: CALL_OW 256
8913: PUSH
8914: LD_INT 1000
8916: EQUAL
8917: PUSH
8918: LD_EXP 13
8922: PPUSH
8923: CALL_OW 261
8927: PUSH
8928: LD_INT 90
8930: GREATER
8931: AND
8932: IFFALSE 8897
// ComEnterUnit ( eng , kirov ) ;
8934: LD_VAR 0 2
8938: PPUSH
8939: LD_INT 71
8941: PPUSH
8942: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
8946: LD_EXP 13
8950: PPUSH
8951: LD_INT 6
8953: PPUSH
8954: CALL_OW 235
// if belkovReturn then
8958: LD_EXP 6
8962: IFFALSE 9048
// begin if IsInUnit ( Belkov ) then
8964: LD_EXP 61
8968: PPUSH
8969: CALL_OW 310
8973: IFFALSE 8984
// ComExitBuilding ( Belkov ) ;
8975: LD_EXP 61
8979: PPUSH
8980: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
8984: LD_INT 35
8986: PPUSH
8987: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
8991: LD_EXP 61
8995: PPUSH
8996: LD_EXP 13
9000: PPUSH
9001: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
9005: LD_EXP 61
9009: PPUSH
9010: CALL_OW 310
9014: PUSH
9015: LD_EXP 13
9019: EQUAL
9020: IFFALSE 8984
// Say ( Belkov , D10-Bel-1 ) ;
9022: LD_EXP 61
9026: PPUSH
9027: LD_STRING D10-Bel-1
9029: PPUSH
9030: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
9034: LD_EXP 64
9038: PPUSH
9039: LD_STRING D10-Kur-2
9041: PPUSH
9042: CALL_OW 88
// end else
9046: GO 9174
// begin if IsInUnit ( Belkov2 ) then
9048: LD_EXP 65
9052: PPUSH
9053: CALL_OW 310
9057: IFFALSE 9068
// ComExitBuilding ( Belkov2 ) ;
9059: LD_EXP 65
9063: PPUSH
9064: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
9068: LD_INT 35
9070: PPUSH
9071: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
9075: LD_EXP 65
9079: PPUSH
9080: LD_EXP 13
9084: PPUSH
9085: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
9089: LD_EXP 65
9093: PPUSH
9094: CALL_OW 310
9098: PUSH
9099: LD_EXP 13
9103: EQUAL
9104: IFFALSE 9068
// meetBelkovBrother = true ;
9106: LD_ADDR_EXP 4
9110: PUSH
9111: LD_INT 1
9113: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
9114: LD_EXP 65
9118: PPUSH
9119: LD_STRING D10-Bel-1
9121: PPUSH
9122: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
9126: LD_EXP 59
9130: PPUSH
9131: LD_STRING D10-Bur-1
9133: PPUSH
9134: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
9138: LD_EXP 65
9142: PPUSH
9143: LD_STRING D10-Bel-2
9145: PPUSH
9146: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
9150: LD_EXP 59
9154: PPUSH
9155: LD_STRING D10-Bur-2
9157: PPUSH
9158: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
9162: LD_EXP 64
9166: PPUSH
9167: LD_STRING D10-Kur-2a
9169: PPUSH
9170: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
9174: LD_ADDR_EXP 71
9178: PUSH
9179: EMPTY
9180: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
9181: LD_ADDR_EXP 72
9185: PUSH
9186: EMPTY
9187: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
9188: LD_ADDR_EXP 22
9192: PUSH
9193: LD_INT 1
9195: ST_TO_ADDR
// CreateBelkovTeam ;
9196: CALL 5506 0 0
// ComExitBuilding ( belkovTeam ) ;
9200: LD_EXP 70
9204: PPUSH
9205: CALL_OW 122
// wait ( 0 0$1 ) ;
9209: LD_INT 35
9211: PPUSH
9212: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9216: LD_ADDR_EXP 69
9220: PUSH
9221: LD_INT 22
9223: PUSH
9224: LD_INT 6
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: LD_INT 21
9233: PUSH
9234: LD_INT 2
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PPUSH
9245: CALL_OW 69
9249: PUSH
9250: LD_INT 1
9252: ARRAY
9253: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
9254: LD_ADDR_EXP 70
9258: PUSH
9259: LD_EXP 70
9263: PUSH
9264: LD_EXP 69
9268: ADD
9269: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
9270: LD_EXP 70
9274: PPUSH
9275: LD_INT 147
9277: PPUSH
9278: LD_INT 102
9280: PPUSH
9281: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
9285: LD_EXP 70
9289: PPUSH
9290: LD_INT 133
9292: PPUSH
9293: LD_INT 94
9295: PPUSH
9296: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
9300: LD_EXP 70
9304: PPUSH
9305: LD_INT 123
9307: PPUSH
9308: LD_INT 74
9310: PPUSH
9311: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
9315: LD_EXP 70
9319: PPUSH
9320: LD_INT 111
9322: PPUSH
9323: LD_INT 48
9325: PPUSH
9326: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
9330: LD_EXP 70
9334: PPUSH
9335: LD_INT 122
9337: PPUSH
9338: LD_INT 43
9340: PPUSH
9341: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
9345: LD_EXP 70
9349: PPUSH
9350: LD_INT 129
9352: PPUSH
9353: LD_INT 32
9355: PPUSH
9356: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
9360: LD_EXP 70
9364: PPUSH
9365: LD_INT 132
9367: PPUSH
9368: LD_INT 22
9370: PPUSH
9371: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9375: LD_INT 35
9377: PPUSH
9378: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
9382: LD_EXP 69
9386: PPUSH
9387: CALL_OW 87
// until GetDistUnitArea ( kirovVehicle , belkovExitArea ) < 10 ;
9391: LD_EXP 69
9395: PPUSH
9396: LD_INT 10
9398: PPUSH
9399: CALL_OW 299
9403: PUSH
9404: LD_INT 10
9406: LESS
9407: IFFALSE 9375
// CenterNowOnUnits ( Kurin ) ;
9409: LD_EXP 64
9413: PPUSH
9414: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
9418: LD_EXP 64
9422: PPUSH
9423: LD_STRING D10-Kur-2b
9425: PPUSH
9426: CALL_OW 88
// InGameOff ;
9430: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
9434: LD_STRING M4
9436: PPUSH
9437: CALL_OW 337
// backToBeria1 = true ;
9441: LD_ADDR_EXP 15
9445: PUSH
9446: LD_INT 1
9448: ST_TO_ADDR
// end ;
9449: PPOPN 3
9451: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
9452: LD_INT 9
9454: PPUSH
9455: LD_INT 22
9457: PUSH
9458: LD_INT 3
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 21
9467: PUSH
9468: LD_INT 2
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PPUSH
9479: CALL_OW 70
9483: PUSH
9484: LD_EXP 14
9488: AND
9489: IFFALSE 9506
9491: GO 9493
9493: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
9494: LD_EXP 64
9498: PPUSH
9499: LD_STRING D1a-Kur-1a
9501: PPUSH
9502: CALL_OW 88
9506: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
9507: LD_EXP 22
9511: IFFALSE 9835
9513: GO 9515
9515: DISABLE
9516: LD_INT 0
9518: PPUSH
9519: PPUSH
// begin enable ;
9520: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
9521: LD_INT 10
9523: PPUSH
9524: LD_INT 22
9526: PUSH
9527: LD_INT 6
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 70
9538: PUSH
9539: LD_INT 0
9541: EQUAL
9542: IFFALSE 9546
// exit ;
9544: GO 9835
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
9546: LD_ADDR_VAR 0 1
9550: PUSH
9551: LD_INT 10
9553: PPUSH
9554: LD_INT 22
9556: PUSH
9557: LD_INT 6
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PPUSH
9564: CALL_OW 70
9568: PUSH
9569: FOR_IN
9570: IFFALSE 9821
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 ) then
9572: LD_VAR 0 1
9576: PPUSH
9577: CALL_OW 247
9581: PUSH
9582: LD_INT 1
9584: EQUAL
9585: PUSH
9586: LD_VAR 0 1
9590: PUSH
9591: LD_EXP 61
9595: EQUAL
9596: NOT
9597: PUSH
9598: LD_VAR 0 1
9602: PUSH
9603: LD_EXP 65
9607: EQUAL
9608: NOT
9609: AND
9610: AND
9611: IFFALSE 9652
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
9613: LD_ADDR_EXP 23
9617: PUSH
9618: LD_EXP 23
9622: PUSH
9623: LD_INT 1
9625: PLUS
9626: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
9627: LD_ADDR_EXP 71
9631: PUSH
9632: LD_EXP 71
9636: PUSH
9637: LD_VAR 0 1
9641: ADD
9642: ST_TO_ADDR
// RemoveUnit ( unit ) ;
9643: LD_VAR 0 1
9647: PPUSH
9648: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
9652: LD_VAR 0 1
9656: PPUSH
9657: CALL_OW 247
9661: PUSH
9662: LD_INT 2
9664: EQUAL
9665: IFFALSE 9819
// begin driver = UnitsInside ( unit ) ;
9667: LD_ADDR_VAR 0 2
9671: PUSH
9672: LD_VAR 0 1
9676: PPUSH
9677: CALL_OW 313
9681: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
9682: LD_VAR 0 2
9686: PUSH
9687: LD_INT 1
9689: ARRAY
9690: PUSH
9691: LD_EXP 61
9695: EQUAL
9696: IFFALSE 9721
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
9698: LD_EXP 61
9702: PPUSH
9703: LD_STRING 02_TmpBelkov
9705: PPUSH
9706: CALL_OW 38
// RemoveUnit ( unit ) ;
9710: LD_VAR 0 1
9714: PPUSH
9715: CALL_OW 64
// end else
9719: GO 9742
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
9721: LD_EXP 65
9725: PPUSH
9726: LD_STRING 02_TmpBelkov2
9728: PPUSH
9729: CALL_OW 38
// RemoveUnit ( unit ) ;
9733: LD_VAR 0 1
9737: PPUSH
9738: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
9742: LD_ADDR_EXP 72
9746: PUSH
9747: LD_EXP 72
9751: PUSH
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 265
9761: PUSH
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 262
9771: PUSH
9772: LD_VAR 0 1
9776: PPUSH
9777: CALL_OW 263
9781: PUSH
9782: LD_VAR 0 1
9786: PPUSH
9787: CALL_OW 264
9791: PUSH
9792: LD_VAR 0 1
9796: PPUSH
9797: CALL_OW 261
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: ADD
9809: ST_TO_ADDR
// RemoveUnit ( unit ) ;
9810: LD_VAR 0 1
9814: PPUSH
9815: CALL_OW 64
// end ; end ;
9819: GO 9569
9821: POP
9822: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
9823: LD_EXP 71
9827: PPUSH
9828: LD_STRING 02_TmpBelkovTeam
9830: PPUSH
9831: CALL_OW 38
// end ;
9835: PPOPN 2
9837: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
9838: LD_INT 8
9840: PPUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 3
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PPUSH
9865: CALL_OW 71
9869: PUSH
9870: LD_INT 0
9872: EQUAL
9873: PUSH
9874: LD_EXP 15
9878: AND
9879: IFFALSE 10072
9881: GO 9883
9883: DISABLE
9884: LD_INT 0
9886: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
9887: LD_ADDR_VAR 0 1
9891: PUSH
9892: LD_EXP 66
9896: PPUSH
9897: LD_INT 25
9899: PUSH
9900: LD_INT 2
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PPUSH
9907: CALL_OW 72
9911: ST_TO_ADDR
// backToBeria1 = false ;
9912: LD_ADDR_EXP 15
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// canExitBase = false ;
9920: LD_ADDR_EXP 19
9924: PUSH
9925: LD_INT 0
9927: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
9928: LD_EXP 73
9932: PPUSH
9933: LD_STRING D11-Pla-1
9935: PPUSH
9936: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
9940: LD_INT 22
9942: PUSH
9943: LD_INT 3
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 21
9952: PUSH
9953: LD_INT 1
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PPUSH
9964: CALL_OW 69
9968: PUSH
9969: LD_INT 1
9971: GREATER
9972: IFFALSE 9988
// Say ( Burlak , D11-Bur-1a ) else
9974: LD_EXP 59
9978: PPUSH
9979: LD_STRING D11-Bur-1a
9981: PPUSH
9982: CALL_OW 88
9986: GO 10000
// Say ( Burlak , D11-Bur-1 ) ;
9988: LD_EXP 59
9992: PPUSH
9993: LD_STRING D11-Bur-1
9995: PPUSH
9996: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
10000: LD_STRING M5
10002: PPUSH
10003: CALL_OW 337
// construcMoreVehicles = true ;
10007: LD_ADDR_EXP 17
10011: PUSH
10012: LD_INT 1
10014: ST_TO_ADDR
// spawnCrates = true ;
10015: LD_ADDR_EXP 21
10019: PUSH
10020: LD_INT 1
10022: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
10023: LD_VAR 0 1
10027: PPUSH
10028: CALL_OW 122
// wait ( 0 0$1 ) ;
10032: LD_INT 35
10034: PPUSH
10035: CALL_OW 67
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
10039: LD_VAR 0 1
10043: PPUSH
10044: LD_INT 2
10046: PPUSH
10047: LD_INT 159
10049: PPUSH
10050: LD_INT 112
10052: PPUSH
10053: LD_INT 0
10055: PPUSH
10056: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
10060: LD_VAR 0 1
10064: PPUSH
10065: LD_INT 71
10067: PPUSH
10068: CALL_OW 180
// end ;
10072: PPOPN 1
10074: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
10075: LD_EXP 18
10079: PUSH
10080: LD_INT 22
10082: PUSH
10083: LD_INT 3
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PPUSH
10104: CALL_OW 69
10108: GREATEREQUAL
10109: IFFALSE 10957
10111: GO 10113
10113: DISABLE
10114: LD_INT 0
10116: PPUSH
10117: PPUSH
// begin canRemoveBelkovUnits = false ;
10118: LD_ADDR_EXP 22
10122: PUSH
10123: LD_INT 0
10125: ST_TO_ADDR
// spawnCrates = false ;
10126: LD_ADDR_EXP 21
10130: PUSH
10131: LD_INT 0
10133: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
10134: LD_INT 22
10136: PUSH
10137: LD_INT 3
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 2
10146: PUSH
10147: LD_INT 21
10149: PUSH
10150: LD_INT 1
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 21
10159: PUSH
10160: LD_INT 2
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PPUSH
10176: CALL_OW 69
10180: PPUSH
10181: CALL_OW 141
// InGameOn ;
10185: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
10189: LD_EXP 73
10193: PPUSH
10194: CALL_OW 85
// DialogueOn ;
10198: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
10202: LD_EXP 59
10206: PPUSH
10207: LD_STRING D12-Bur-1
10209: PPUSH
10210: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
10214: LD_EXP 73
10218: PPUSH
10219: LD_STRING D12-Pla-1
10221: PPUSH
10222: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10226: LD_EXP 59
10230: PPUSH
10231: LD_STRING D12-Bur-2
10233: PPUSH
10234: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10238: LD_EXP 73
10242: PPUSH
10243: LD_STRING D12-Pla-2
10245: PPUSH
10246: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10250: LD_EXP 59
10254: PPUSH
10255: LD_STRING D12-Bur-3
10257: PPUSH
10258: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10262: LD_EXP 73
10266: PPUSH
10267: LD_STRING D12-Pla-3
10269: PPUSH
10270: CALL_OW 88
// DialogueOff ;
10274: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
10278: LD_INT 6
10280: PPUSH
10281: LD_INT 1
10283: PPUSH
10284: LD_INT 1
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 80
// PrepareAmerican ;
10294: CALL 2635 0 0
// PrepareBelkovReturnTeam ;
10298: CALL 1084 0 0
// if IsOK ( Belkov ) then
10302: LD_EXP 61
10306: PPUSH
10307: CALL_OW 302
10311: IFFALSE 10325
// tmpBelkov = Belkov else
10313: LD_ADDR_VAR 0 1
10317: PUSH
10318: LD_EXP 61
10322: ST_TO_ADDR
10323: GO 10335
// tmpBelkov = Belkov2 ;
10325: LD_ADDR_VAR 0 1
10329: PUSH
10330: LD_EXP 65
10334: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
10335: LD_EXP 69
10339: PPUSH
10340: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
10344: LD_EXP 77
10348: PPUSH
10349: LD_STRING D13-Sol1-1
10351: PPUSH
10352: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
10356: LD_VAR 0 1
10360: PPUSH
10361: LD_STRING D13-Bel-1
10363: PPUSH
10364: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10368: LD_EXP 64
10372: PPUSH
10373: LD_STRING D13-Kur-1
10375: PPUSH
10376: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
10380: LD_VAR 0 1
10384: PPUSH
10385: LD_STRING D13-Bel-2
10387: PPUSH
10388: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
10392: LD_EXP 70
10396: PPUSH
10397: LD_INT 121
10399: PPUSH
10400: LD_INT 29
10402: PPUSH
10403: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10407: LD_INT 35
10409: PPUSH
10410: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
10414: LD_EXP 69
10418: PPUSH
10419: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
10423: LD_ADDR_VAR 0 2
10427: PUSH
10428: LD_EXP 70
10432: PPUSH
10433: LD_INT 21
10435: PUSH
10436: LD_INT 1
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 56
10445: PUSH
10446: EMPTY
10447: LIST
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PPUSH
10453: CALL_OW 72
10457: PPUSH
10458: LD_EXP 69
10462: PPUSH
10463: CALL_OW 74
10467: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
10468: LD_EXP 69
10472: PPUSH
10473: LD_VAR 0 2
10477: PPUSH
10478: CALL_OW 296
10482: PUSH
10483: LD_INT 5
10485: LESS
10486: IFFALSE 10499
// ComStop ( kirovVehicle ) else
10488: LD_EXP 69
10492: PPUSH
10493: CALL_OW 141
10497: GO 10514
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
10499: LD_EXP 70
10503: PPUSH
10504: LD_INT 121
10506: PPUSH
10507: LD_INT 29
10509: PPUSH
10510: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
10514: LD_EXP 70
10518: PPUSH
10519: LD_EXP 77
10523: PPUSH
10524: CALL_OW 74
10528: PPUSH
10529: LD_EXP 77
10533: PPUSH
10534: CALL_OW 296
10538: PUSH
10539: LD_INT 5
10541: LESS
10542: IFFALSE 10407
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
10544: LD_EXP 69
10548: PUSH
10549: LD_EXP 77
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PPUSH
10558: CALL_OW 87
// ComWalk ( trapTeam ) ;
10562: LD_EXP 78
10566: PPUSH
10567: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
10571: LD_EXP 78
10575: PPUSH
10576: LD_EXP 69
10580: PPUSH
10581: CALL_OW 179
// ComStop ( belkovTeam ) ;
10585: LD_EXP 70
10589: PPUSH
10590: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
10594: LD_EXP 70
10598: PPUSH
10599: LD_EXP 77
10603: PPUSH
10604: CALL_OW 179
// Say ( trapCommander , D14-Sol1-1 ) ;
10608: LD_EXP 77
10612: PPUSH
10613: LD_STRING D14-Sol1-1
10615: PPUSH
10616: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
10620: LD_VAR 0 1
10624: PPUSH
10625: LD_STRING D14-Bel-1
10627: PPUSH
10628: CALL_OW 88
// immortalBelkovTeam = true ;
10632: LD_ADDR_EXP 24
10636: PUSH
10637: LD_INT 1
10639: ST_TO_ADDR
// ComExitVehicle ( tmpBelkov ) ;
10640: LD_VAR 0 1
10644: PPUSH
10645: CALL_OW 121
// wait ( 0 0$1 ) ;
10649: LD_INT 35
10651: PPUSH
10652: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
10656: LD_EXP 77
10660: PPUSH
10661: LD_EXP 69
10665: PPUSH
10666: CALL_OW 120
// AddComHold ( trapTeam ) ;
10670: LD_EXP 78
10674: PPUSH
10675: CALL_OW 200
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
10679: LD_INT 6
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: LD_INT 2
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL_OW 80
// ComMoveToArea ( belkovTeam , BelkovRetreatArea ) ;
10695: LD_EXP 70
10699: PPUSH
10700: LD_INT 15
10702: PPUSH
10703: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
10707: LD_INT 35
10709: PPUSH
10710: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
10714: LD_VAR 0 1
10718: PPUSH
10719: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
10723: LD_VAR 0 1
10727: PPUSH
10728: LD_INT 15
10730: PPUSH
10731: CALL_OW 308
10735: IFFALSE 10707
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
10737: LD_VAR 0 1
10741: PPUSH
10742: LD_STRING D14-Bel-1a
10744: PPUSH
10745: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
10749: LD_EXP 64
10753: PPUSH
10754: LD_STRING D14-Kur-1
10756: PPUSH
10757: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
10761: LD_VAR 0 1
10765: PPUSH
10766: LD_STRING D14-Bel-2
10768: PPUSH
10769: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
10773: LD_EXP 64
10777: PPUSH
10778: LD_STRING D14-Kur-2
10780: PPUSH
10781: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
10785: LD_EXP 73
10789: PPUSH
10790: CALL_OW 85
// wait ( 0 0$2 ) ;
10794: LD_INT 70
10796: PPUSH
10797: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
10801: LD_EXP 59
10805: PPUSH
10806: LD_STRING D14a-Bur-1
10808: PPUSH
10809: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
10813: LD_EXP 73
10817: PPUSH
10818: LD_STRING D14a-Pla-1
10820: PPUSH
10821: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
10825: LD_EXP 59
10829: PPUSH
10830: LD_STRING D14a-Bur-2
10832: PPUSH
10833: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
10837: LD_EXP 73
10841: PPUSH
10842: LD_STRING D14a-Pla-2
10844: PPUSH
10845: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
10849: LD_EXP 59
10853: PPUSH
10854: LD_STRING D14a-Bur-3
10856: PPUSH
10857: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
10861: LD_EXP 73
10865: PPUSH
10866: LD_STRING D14a-Pla-3
10868: PPUSH
10869: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
10873: LD_EXP 59
10877: PPUSH
10878: LD_STRING D14a-Bur-4
10880: PPUSH
10881: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
10885: LD_EXP 73
10889: PPUSH
10890: LD_STRING D14a-Pla-4
10892: PPUSH
10893: CALL_OW 88
// InGameOff ;
10897: CALL_OW 9
// immortalBelkovTeam = false ;
10901: LD_ADDR_EXP 24
10905: PUSH
10906: LD_INT 0
10908: ST_TO_ADDR
// activateAMAI = true ;
10909: LD_ADDR_EXP 26
10913: PUSH
10914: LD_INT 1
10916: ST_TO_ADDR
// canExitBase = true ;
10917: LD_ADDR_EXP 19
10921: PUSH
10922: LD_INT 1
10924: ST_TO_ADDR
// canExploreMap = true ;
10925: LD_ADDR_EXP 20
10929: PUSH
10930: LD_INT 1
10932: ST_TO_ADDR
// construcMoreVehicles = false ;
10933: LD_ADDR_EXP 17
10937: PUSH
10938: LD_INT 0
10940: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
10941: LD_STRING M6
10943: PPUSH
10944: CALL_OW 337
// ComFree ( trapTeam ) ;
10948: LD_EXP 78
10952: PPUSH
10953: CALL_OW 139
// end ;
10957: PPOPN 2
10959: END
// every 0 0$1 trigger immortalBelkovTeam do
10960: LD_EXP 24
10964: IFFALSE 10982
10966: GO 10968
10968: DISABLE
// begin enable ;
10969: ENABLE
// SetLives ( belkovTeam , 1000 ) ;
10970: LD_EXP 70
10974: PPUSH
10975: LD_INT 1000
10977: PPUSH
10978: CALL_OW 234
// end ;
10982: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
10983: LD_EXP 20
10987: PUSH
10988: LD_EXP 35
10992: NOT
10993: AND
10994: PUSH
10995: LD_EXP 58
10999: PUSH
11000: LD_INT 0
11002: GREATER
11003: AND
11004: IFFALSE 11024
11006: GO 11008
11008: DISABLE
// begin enable ;
11009: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
11010: LD_ADDR_EXP 58
11014: PUSH
11015: LD_EXP 58
11019: PUSH
11020: LD_INT 35
11022: MINUS
11023: ST_TO_ADDR
// end ;
11024: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
11025: LD_EXP 20
11029: IFFALSE 11113
11031: GO 11033
11033: DISABLE
11034: LD_INT 0
11036: PPUSH
11037: PPUSH
// begin tmp = trapTeam ;
11038: LD_ADDR_VAR 0 2
11042: PUSH
11043: LD_EXP 78
11047: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
11048: LD_ADDR_VAR 0 2
11052: PUSH
11053: LD_VAR 0 2
11057: PUSH
11058: LD_EXP 77
11062: DIFF
11063: ST_TO_ADDR
// for i := 1 to rand ( 3 , 4 ) do
11064: LD_ADDR_VAR 0 1
11068: PUSH
11069: DOUBLE
11070: LD_INT 1
11072: DEC
11073: ST_TO_ADDR
11074: LD_INT 3
11076: PPUSH
11077: LD_INT 4
11079: PPUSH
11080: CALL_OW 12
11084: PUSH
11085: FOR_TO
11086: IFFALSE 11111
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
11088: LD_VAR 0 2
11092: PUSH
11093: LD_VAR 0 1
11097: ARRAY
11098: PPUSH
11099: LD_INT 87
11101: PPUSH
11102: LD_INT 18
11104: PPUSH
11105: CALL_OW 114
11109: GO 11085
11111: POP
11112: POP
// end ;
11113: PPOPN 2
11115: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
11116: LD_EXP 58
11120: PUSH
11121: LD_INT 70
11123: LESS
11124: PUSH
11125: LD_EXP 78
11129: AND
11130: IFFALSE 11151
11132: GO 11134
11134: DISABLE
// begin enable ;
11135: ENABLE
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
11136: LD_EXP 70
11140: PPUSH
11141: LD_INT 120
11143: PPUSH
11144: LD_INT 28
11146: PPUSH
11147: CALL_OW 114
// end ;
11151: END
// every 0 0$1 trigger not sawLeftBunker or not sawRightBunker do var bunker ;
11152: LD_EXP 27
11156: NOT
11157: PUSH
11158: LD_EXP 28
11162: NOT
11163: OR
11164: IFFALSE 11604
11166: GO 11168
11168: DISABLE
11169: LD_INT 0
11171: PPUSH
// begin enable ;
11172: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
11173: LD_ADDR_VAR 0 1
11177: PUSH
11178: LD_INT 22
11180: PUSH
11181: LD_INT 1
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: LD_INT 21
11190: PUSH
11191: LD_INT 3
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 30
11200: PUSH
11201: LD_INT 31
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: PUSH
11218: FOR_IN
11219: IFFALSE 11602
// begin if See ( 3 , bunker ) then
11221: LD_INT 3
11223: PPUSH
11224: LD_VAR 0 1
11228: PPUSH
11229: CALL_OW 292
11233: IFFALSE 11600
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
11235: LD_VAR 0 1
11239: PUSH
11240: LD_EXP 79
11244: IN
11245: PUSH
11246: LD_EXP 27
11250: NOT
11251: AND
11252: PUSH
11253: LD_INT 18
11255: PPUSH
11256: LD_INT 22
11258: PUSH
11259: LD_INT 3
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: PPUSH
11269: CALL_OW 70
11273: NOT
11274: AND
11275: IFFALSE 11446
// begin sawLeftBunker = true ;
11277: LD_ADDR_EXP 27
11281: PUSH
11282: LD_INT 1
11284: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
11285: LD_VAR 0 1
11289: PPUSH
11290: CALL_OW 85
// DialogueOn ;
11294: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
11298: LD_EXP 59
11302: PPUSH
11303: LD_STRING D15-Bur-1
11305: PPUSH
11306: CALL_OW 88
// if IsOK ( Gnyevko ) then
11310: LD_EXP 60
11314: PPUSH
11315: CALL_OW 302
11319: IFFALSE 11333
// Say ( Gnyevko , D15-Gny-1 ) ;
11321: LD_EXP 60
11325: PPUSH
11326: LD_STRING D15-Gny-1
11328: PPUSH
11329: CALL_OW 88
// if IsOK ( Kovalyuk ) then
11333: LD_EXP 67
11337: PPUSH
11338: CALL_OW 302
11342: IFFALSE 11356
// Say ( Kovalyuk , D15-Kov-1 ) ;
11344: LD_EXP 67
11348: PPUSH
11349: LD_STRING D15-Kov-1
11351: PPUSH
11352: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
11356: LD_EXP 59
11360: PPUSH
11361: LD_STRING D15-Bur-2
11363: PPUSH
11364: CALL_OW 88
// if IsOK ( Kovalyuk ) then
11368: LD_EXP 67
11372: PPUSH
11373: CALL_OW 302
11377: IFFALSE 11391
// Say ( Kovalyuk , D15-Kov-2 ) ;
11379: LD_EXP 67
11383: PPUSH
11384: LD_STRING D15-Kov-2
11386: PPUSH
11387: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
11391: LD_EXP 59
11395: PPUSH
11396: LD_STRING D15-Bur-3
11398: PPUSH
11399: CALL_OW 88
// DialogueOff ;
11403: CALL_OW 7
// if raportForPlatonov = 2 then
11407: LD_EXP 37
11411: PUSH
11412: LD_INT 2
11414: EQUAL
11415: IFFALSE 11427
// raportForPlatonov = 1 else
11417: LD_ADDR_EXP 37
11421: PUSH
11422: LD_INT 1
11424: ST_TO_ADDR
11425: GO 11435
// raportForPlatonov = 3 ;
11427: LD_ADDR_EXP 37
11431: PUSH
11432: LD_INT 3
11434: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
11435: LD_STRING M7
11437: PPUSH
11438: CALL_OW 337
// exit ;
11442: POP
11443: POP
11444: GO 11604
// end ; if bunker in rightBunkers and not sawRightBunker then
11446: LD_VAR 0 1
11450: PUSH
11451: LD_EXP 80
11455: IN
11456: PUSH
11457: LD_EXP 28
11461: NOT
11462: AND
11463: IFFALSE 11600
// begin sawRightBunker = true ;
11465: LD_ADDR_EXP 28
11469: PUSH
11470: LD_INT 1
11472: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
11473: LD_VAR 0 1
11477: PPUSH
11478: CALL_OW 85
// DialogueOn ;
11482: CALL_OW 6
// if IsOK ( Kovalyuk ) then
11486: LD_EXP 67
11490: PPUSH
11491: CALL_OW 302
11495: IFFALSE 11529
// begin if sawLeftBunker then
11497: LD_EXP 27
11501: IFFALSE 11517
// Say ( Kovalyuk , D16-Kov-1a ) else
11503: LD_EXP 67
11507: PPUSH
11508: LD_STRING D16-Kov-1a
11510: PPUSH
11511: CALL_OW 88
11515: GO 11529
// Say ( Kovalyuk , D16-Kov-1 ) ;
11517: LD_EXP 67
11521: PPUSH
11522: LD_STRING D16-Kov-1
11524: PPUSH
11525: CALL_OW 88
// end ; Say ( Burlak , D16-Bur-1 ) ;
11529: LD_EXP 59
11533: PPUSH
11534: LD_STRING D16-Bur-1
11536: PPUSH
11537: CALL_OW 88
// if IsOK ( Gnyevko ) then
11541: LD_EXP 60
11545: PPUSH
11546: CALL_OW 302
11550: IFFALSE 11564
// Say ( Gnyevko , D16-Gny-1 ) ;
11552: LD_EXP 60
11556: PPUSH
11557: LD_STRING D16-Gny-1
11559: PPUSH
11560: CALL_OW 88
// DialogueOff ;
11564: CALL_OW 7
// if raportForPlatonov = 3 then
11568: LD_EXP 37
11572: PUSH
11573: LD_INT 3
11575: EQUAL
11576: IFFALSE 11588
// raportForPlatonov = 1 else
11578: LD_ADDR_EXP 37
11582: PUSH
11583: LD_INT 1
11585: ST_TO_ADDR
11586: GO 11596
// raportForPlatonov = 2 ;
11588: LD_ADDR_EXP 37
11592: PUSH
11593: LD_INT 2
11595: ST_TO_ADDR
// exit ;
11596: POP
11597: POP
11598: GO 11604
// end ; end ; end ;
11600: GO 11218
11602: POP
11603: POP
// end ;
11604: PPOPN 1
11606: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
11607: LD_EXP 30
11611: NOT
11612: PUSH
11613: LD_EXP 80
11617: AND
11618: PUSH
11619: LD_EXP 67
11623: PPUSH
11624: CALL_OW 302
11628: PUSH
11629: LD_EXP 60
11633: PPUSH
11634: CALL_OW 302
11638: OR
11639: AND
11640: IFFALSE 11828
11642: GO 11644
11644: DISABLE
11645: LD_INT 0
11647: PPUSH
// begin enable ;
11648: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
11649: LD_ADDR_VAR 0 1
11653: PUSH
11654: LD_INT 22
11656: PUSH
11657: LD_INT 3
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: LD_INT 2
11666: PUSH
11667: LD_INT 21
11669: PUSH
11670: LD_INT 1
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 21
11679: PUSH
11680: LD_INT 2
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: PUSH
11701: FOR_IN
11702: IFFALSE 11826
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
11704: LD_VAR 0 1
11708: PPUSH
11709: CALL_OW 320
11713: PUSH
11714: LD_EXP 80
11718: PUSH
11719: LD_INT 1
11721: ARRAY
11722: EQUAL
11723: PUSH
11724: LD_VAR 0 1
11728: PPUSH
11729: CALL_OW 320
11733: PUSH
11734: LD_EXP 80
11738: PUSH
11739: LD_INT 2
11741: ARRAY
11742: EQUAL
11743: OR
11744: IFFALSE 11824
// begin dialogAttackRightBunkers = true ;
11746: LD_ADDR_EXP 30
11750: PUSH
11751: LD_INT 1
11753: ST_TO_ADDR
// DialogueOn ;
11754: CALL_OW 6
// if IsOK ( Gnyevko ) then
11758: LD_EXP 60
11762: PPUSH
11763: CALL_OW 302
11767: IFFALSE 11781
// Say ( Gnyevko , D16A-Gny-1 ) ;
11769: LD_EXP 60
11773: PPUSH
11774: LD_STRING D16A-Gny-1
11776: PPUSH
11777: CALL_OW 88
// if IsOK ( Kovalyuk ) then
11781: LD_EXP 67
11785: PPUSH
11786: CALL_OW 302
11790: IFFALSE 11804
// Say ( Kovalyuk , D16A-Kov-1 ) ;
11792: LD_EXP 67
11796: PPUSH
11797: LD_STRING D16A-Kov-1
11799: PPUSH
11800: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
11804: LD_EXP 59
11808: PPUSH
11809: LD_STRING D16A-Bur-1
11811: PPUSH
11812: CALL_OW 88
// DialogueOff ;
11816: CALL_OW 7
// exit ;
11820: POP
11821: POP
11822: GO 11828
// end ; end ;
11824: GO 11701
11826: POP
11827: POP
// end ;
11828: PPOPN 1
11830: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
11831: LD_INT 18
11833: PPUSH
11834: LD_INT 22
11836: PUSH
11837: LD_INT 3
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: PPUSH
11847: CALL_OW 70
11851: PUSH
11852: LD_EXP 27
11856: NOT
11857: AND
11858: IFFALSE 12241
11860: GO 11862
11862: DISABLE
11863: LD_INT 0
11865: PPUSH
// begin sawLeftBunker = true ;
11866: LD_ADDR_EXP 27
11870: PUSH
11871: LD_INT 1
11873: ST_TO_ADDR
// if playerGetSupport then
11874: LD_EXP 32
11878: IFFALSE 11897
// decsToChoose = [ 1 , 3 ] else
11880: LD_ADDR_VAR 0 1
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: LD_INT 3
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: ST_TO_ADDR
11895: GO 11916
// decsToChoose = [ 1 , 2 , 3 ] ;
11897: LD_ADDR_VAR 0 1
11901: PUSH
11902: LD_INT 1
11904: PUSH
11905: LD_INT 2
11907: PUSH
11908: LD_INT 3
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: LIST
11915: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
11916: LD_STRING QAttackBw
11918: PPUSH
11919: LD_VAR 0 1
11923: PPUSH
11924: CALL_OW 98
11928: PUSH
11929: LD_INT 1
11931: DOUBLE
11932: EQUAL
11933: IFTRUE 11937
11935: GO 12030
11937: POP
// begin DialogueOn ;
11938: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
11942: LD_EXP 59
11946: PPUSH
11947: LD_STRING D17-Bur-1
11949: PPUSH
11950: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
11954: LD_EXP 73
11958: PPUSH
11959: LD_STRING D17-Pla-1
11961: PPUSH
11962: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
11966: LD_EXP 59
11970: PPUSH
11971: LD_STRING D17-Bur-2
11973: PPUSH
11974: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
11978: LD_EXP 73
11982: PPUSH
11983: LD_STRING D17-Pla-2
11985: PPUSH
11986: CALL_OW 94
// DialogueOff ;
11990: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
11994: LD_EXP 40
11998: PUSH
11999: LD_INT 2
12001: PUSH
12002: LD_INT 3
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: IN
12009: NOT
12010: IFFALSE 12028
// begin initiative = 1 ;
12012: LD_ADDR_EXP 40
12016: PUSH
12017: LD_INT 1
12019: ST_TO_ADDR
// platonovOpinion = 2 ;
12020: LD_ADDR_EXP 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// end ; end ; 2 :
12028: GO 12171
12030: LD_INT 2
12032: DOUBLE
12033: EQUAL
12034: IFTRUE 12038
12036: GO 12143
12038: POP
// begin DialogueOn ;
12039: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12043: LD_EXP 59
12047: PPUSH
12048: LD_STRING D18-Bur-1
12050: PPUSH
12051: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12055: LD_EXP 73
12059: PPUSH
12060: LD_STRING D18-Pla-1
12062: PPUSH
12063: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12067: LD_EXP 59
12071: PPUSH
12072: LD_STRING D18-Bur-2
12074: PPUSH
12075: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
12079: LD_EXP 73
12083: PPUSH
12084: LD_STRING D18-Pla-2
12086: PPUSH
12087: CALL_OW 94
// DialogueOff ;
12091: CALL_OW 7
// playerGetSupport = true ;
12095: LD_ADDR_EXP 32
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// medalForGetSupport = false ;
12103: LD_ADDR_EXP 38
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// PlatonovSendSupport ;
12111: CALL 5937 0 0
// if initiative <> 3 then
12115: LD_EXP 40
12119: PUSH
12120: LD_INT 3
12122: NONEQUAL
12123: IFFALSE 12141
// begin initiative = 1 ;
12125: LD_ADDR_EXP 40
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
// platonovOpinion = 2 ;
12133: LD_ADDR_EXP 5
12137: PUSH
12138: LD_INT 2
12140: ST_TO_ADDR
// end ; end ; 3 :
12141: GO 12171
12143: LD_INT 3
12145: DOUBLE
12146: EQUAL
12147: IFTRUE 12151
12149: GO 12170
12151: POP
// begin initiative = 3 ;
12152: LD_ADDR_EXP 40
12156: PUSH
12157: LD_INT 3
12159: ST_TO_ADDR
// platonovOpinion = 0 ;
12160: LD_ADDR_EXP 5
12164: PUSH
12165: LD_INT 0
12167: ST_TO_ADDR
// end ; end ;
12168: GO 12171
12170: POP
// if IsOK ( Gnyevko ) then
12171: LD_EXP 60
12175: PPUSH
12176: CALL_OW 302
12180: IFFALSE 12206
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12182: LD_EXP 60
12186: PPUSH
12187: LD_STRING D19-Gny-1
12189: PPUSH
12190: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12194: LD_EXP 59
12198: PPUSH
12199: LD_STRING D19-Bur-1
12201: PPUSH
12202: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
12206: LD_EXP 67
12210: PPUSH
12211: CALL_OW 302
12215: IFFALSE 12241
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12217: LD_EXP 67
12221: PPUSH
12222: LD_STRING D19-Kov-1
12224: PPUSH
12225: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12229: LD_EXP 59
12233: PPUSH
12234: LD_STRING D19-Bur-2
12236: PPUSH
12237: CALL_OW 88
// end ; end ;
12241: PPOPN 1
12243: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
12244: LD_EXP 29
12248: NOT
12249: PUSH
12250: LD_EXP 79
12254: AND
12255: PUSH
12256: LD_INT 18
12258: PPUSH
12259: LD_INT 22
12261: PUSH
12262: LD_INT 3
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: EMPTY
12270: LIST
12271: PPUSH
12272: CALL_OW 70
12276: PUSH
12277: LD_INT 0
12279: EQUAL
12280: AND
12281: PUSH
12282: LD_EXP 67
12286: PPUSH
12287: CALL_OW 302
12291: PUSH
12292: LD_EXP 60
12296: PPUSH
12297: CALL_OW 302
12301: OR
12302: AND
12303: IFFALSE 12491
12305: GO 12307
12307: DISABLE
12308: LD_INT 0
12310: PPUSH
// begin enable ;
12311: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
12312: LD_ADDR_VAR 0 1
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: LD_INT 3
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 2
12329: PUSH
12330: LD_INT 21
12332: PUSH
12333: LD_INT 1
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 21
12342: PUSH
12343: LD_INT 2
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PPUSH
12359: CALL_OW 69
12363: PUSH
12364: FOR_IN
12365: IFFALSE 12489
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
12367: LD_VAR 0 1
12371: PPUSH
12372: CALL_OW 320
12376: PUSH
12377: LD_EXP 79
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: EQUAL
12386: PUSH
12387: LD_VAR 0 1
12391: PPUSH
12392: CALL_OW 320
12396: PUSH
12397: LD_EXP 79
12401: PUSH
12402: LD_INT 2
12404: ARRAY
12405: EQUAL
12406: OR
12407: IFFALSE 12487
// begin dialogAttackLeftBunkers = true ;
12409: LD_ADDR_EXP 29
12413: PUSH
12414: LD_INT 1
12416: ST_TO_ADDR
// DialogueOn ;
12417: CALL_OW 6
// if IsOK ( Gnyevko ) then
12421: LD_EXP 60
12425: PPUSH
12426: CALL_OW 302
12430: IFFALSE 12444
// Say ( Gnyevko , D19A-Gny-1 ) ;
12432: LD_EXP 60
12436: PPUSH
12437: LD_STRING D19A-Gny-1
12439: PPUSH
12440: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12444: LD_EXP 67
12448: PPUSH
12449: CALL_OW 302
12453: IFFALSE 12467
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12455: LD_EXP 67
12459: PPUSH
12460: LD_STRING D19A-Kov-1
12462: PPUSH
12463: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
12467: LD_EXP 59
12471: PPUSH
12472: LD_STRING D16A-Bur-1
12474: PPUSH
12475: CALL_OW 88
// DialogueOff ;
12479: CALL_OW 7
// exit ;
12483: POP
12484: POP
12485: GO 12491
// end ; end ;
12487: GO 12364
12489: POP
12490: POP
// end ;
12491: PPOPN 1
12493: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
12494: LD_EXP 79
12498: NOT
12499: PUSH
12500: LD_INT 17
12502: PPUSH
12503: LD_INT 22
12505: PUSH
12506: LD_INT 1
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: LD_INT 21
12515: PUSH
12516: LD_INT 3
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 30
12525: PUSH
12526: LD_INT 31
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: LD_INT 50
12535: PUSH
12536: EMPTY
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: PPUSH
12545: CALL_OW 70
12549: PUSH
12550: LD_INT 0
12552: EQUAL
12553: OR
12554: PUSH
12555: LD_EXP 20
12559: AND
12560: IFFALSE 12611
12562: GO 12564
12564: DISABLE
// begin leftBunkers = [ ] ;
12565: LD_ADDR_EXP 79
12569: PUSH
12570: EMPTY
12571: ST_TO_ADDR
// DialogueOn ;
12572: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
12576: LD_EXP 59
12580: PPUSH
12581: LD_STRING D20-Bur-1
12583: PPUSH
12584: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
12588: LD_EXP 73
12592: PPUSH
12593: LD_STRING D20-Pla-1
12595: PPUSH
12596: CALL_OW 88
// DialogueOff ;
12600: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
12604: LD_STRING M8
12606: PPUSH
12607: CALL_OW 337
// end ;
12611: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
12612: LD_EXP 80
12616: NOT
12617: PUSH
12618: LD_INT 16
12620: PPUSH
12621: LD_INT 22
12623: PUSH
12624: LD_INT 1
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 21
12633: PUSH
12634: LD_INT 3
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 30
12643: PUSH
12644: LD_INT 31
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 50
12653: PUSH
12654: EMPTY
12655: LIST
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: PPUSH
12663: CALL_OW 70
12667: PUSH
12668: LD_INT 0
12670: EQUAL
12671: OR
12672: PUSH
12673: LD_EXP 20
12677: AND
12678: IFFALSE 12722
12680: GO 12682
12682: DISABLE
// begin rightBunkers = [ ] ;
12683: LD_ADDR_EXP 80
12687: PUSH
12688: EMPTY
12689: ST_TO_ADDR
// DialogueOn ;
12690: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
12694: LD_EXP 59
12698: PPUSH
12699: LD_STRING D20a-Bur-1
12701: PPUSH
12702: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
12706: LD_EXP 73
12710: PPUSH
12711: LD_STRING D20a-Pla-1
12713: PPUSH
12714: CALL_OW 88
// DialogueOff ;
12718: CALL_OW 7
// end ;
12722: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
12723: LD_EXP 33
12727: NOT
12728: PUSH
12729: LD_EXP 70
12733: AND
12734: IFFALSE 13229
12736: GO 12738
12738: DISABLE
12739: LD_INT 0
12741: PPUSH
12742: PPUSH
12743: PPUSH
// begin enable ;
12744: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
12745: LD_ADDR_VAR 0 1
12749: PUSH
12750: LD_INT 22
12752: PUSH
12753: LD_INT 3
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 2
12762: PUSH
12763: LD_INT 21
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 21
12775: PUSH
12776: LD_INT 2
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PPUSH
12792: CALL_OW 69
12796: PUSH
12797: FOR_IN
12798: IFFALSE 13227
// for trapUnit in trapTeam do
12800: LD_ADDR_VAR 0 2
12804: PUSH
12805: LD_EXP 78
12809: PUSH
12810: FOR_IN
12811: IFFALSE 13223
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
12813: LD_VAR 0 1
12817: PPUSH
12818: LD_VAR 0 2
12822: PPUSH
12823: CALL_OW 296
12827: PUSH
12828: LD_INT 16
12830: LESS
12831: IFFALSE 13221
// begin saveBelkovDecision = true ;
12833: LD_ADDR_EXP 33
12837: PUSH
12838: LD_INT 1
12840: ST_TO_ADDR
// if playerGetSupport then
12841: LD_EXP 32
12845: IFFALSE 12864
// decsToChoose = [ 1 , 3 ] else
12847: LD_ADDR_VAR 0 3
12851: PUSH
12852: LD_INT 1
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: ST_TO_ADDR
12862: GO 12883
// decsToChoose = [ 1 , 2 , 3 ] ;
12864: LD_ADDR_VAR 0 3
12868: PUSH
12869: LD_INT 1
12871: PUSH
12872: LD_INT 2
12874: PUSH
12875: LD_INT 3
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
12883: LD_STRING QAttackAm
12885: PPUSH
12886: LD_VAR 0 3
12890: PPUSH
12891: CALL_OW 98
12895: PUSH
12896: LD_INT 1
12898: DOUBLE
12899: EQUAL
12900: IFTRUE 12904
12902: GO 12973
12904: POP
// begin DialogueOn ;
12905: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12909: LD_EXP 59
12913: PPUSH
12914: LD_STRING D21-Bur-1
12916: PPUSH
12917: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12921: LD_EXP 73
12925: PPUSH
12926: LD_STRING D21-Pla-1
12928: PPUSH
12929: CALL_OW 94
// DialogueOff ;
12933: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
12937: LD_EXP 40
12941: PUSH
12942: LD_INT 2
12944: PUSH
12945: LD_INT 3
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: IN
12952: NOT
12953: IFFALSE 12971
// begin initiative = 1 ;
12955: LD_ADDR_EXP 40
12959: PUSH
12960: LD_INT 1
12962: ST_TO_ADDR
// platonovOpinion = 2 ;
12963: LD_ADDR_EXP 5
12967: PUSH
12968: LD_INT 2
12970: ST_TO_ADDR
// end ; end ; 2 :
12971: GO 13165
12973: LD_INT 2
12975: DOUBLE
12976: EQUAL
12977: IFTRUE 12981
12979: GO 13137
12981: POP
// begin DialogueOn ;
12982: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
12986: LD_EXP 59
12990: PPUSH
12991: LD_STRING D22-Bur-1
12993: PPUSH
12994: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
12998: LD_EXP 32
13002: PUSH
13003: LD_EXP 79
13007: PUSH
13008: LD_INT 0
13010: EQUAL
13011: PUSH
13012: LD_EXP 80
13016: PUSH
13017: LD_INT 0
13019: EQUAL
13020: OR
13021: AND
13022: IFFALSE 13036
// Say ( Platonov , D22-Pla-1b ) ;
13024: LD_EXP 73
13028: PPUSH
13029: LD_STRING D22-Pla-1b
13031: PPUSH
13032: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
13036: LD_EXP 32
13040: PUSH
13041: LD_EXP 79
13045: PUSH
13046: LD_EXP 80
13050: OR
13051: AND
13052: IFFALSE 13066
// Say ( Platonov , D22-Pla-1a ) ;
13054: LD_EXP 73
13058: PPUSH
13059: LD_STRING D22-Pla-1a
13061: PPUSH
13062: CALL_OW 88
// if not playerGetSupport then
13066: LD_EXP 32
13070: NOT
13071: IFFALSE 13105
// begin Say ( Platonov , D22-Pla-1 ) ;
13073: LD_EXP 73
13077: PPUSH
13078: LD_STRING D22-Pla-1
13080: PPUSH
13081: CALL_OW 88
// playerGetSupport = true ;
13085: LD_ADDR_EXP 32
13089: PUSH
13090: LD_INT 1
13092: ST_TO_ADDR
// medalForGetSupport = false ;
13093: LD_ADDR_EXP 38
13097: PUSH
13098: LD_INT 0
13100: ST_TO_ADDR
// PlatonovSendSupport ;
13101: CALL 5937 0 0
// end ; DialogueOff ;
13105: CALL_OW 7
// if initiative <> 3 then
13109: LD_EXP 40
13113: PUSH
13114: LD_INT 3
13116: NONEQUAL
13117: IFFALSE 13135
// begin initiative = 2 ;
13119: LD_ADDR_EXP 40
13123: PUSH
13124: LD_INT 2
13126: ST_TO_ADDR
// platonovOpinion = 1 ;
13127: LD_ADDR_EXP 5
13131: PUSH
13132: LD_INT 1
13134: ST_TO_ADDR
// end ; end ; 3 :
13135: GO 13165
13137: LD_INT 3
13139: DOUBLE
13140: EQUAL
13141: IFTRUE 13145
13143: GO 13164
13145: POP
// begin initiative = 3 ;
13146: LD_ADDR_EXP 40
13150: PUSH
13151: LD_INT 3
13153: ST_TO_ADDR
// platonovOpinion = 0 ;
13154: LD_ADDR_EXP 5
13158: PUSH
13159: LD_INT 0
13161: ST_TO_ADDR
// end ; end ;
13162: GO 13165
13164: POP
// if IsOK ( Gnyevko ) then
13165: LD_EXP 60
13169: PPUSH
13170: CALL_OW 302
13174: IFFALSE 13200
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13176: LD_EXP 60
13180: PPUSH
13181: LD_STRING D23-Gny-1
13183: PPUSH
13184: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13188: LD_EXP 59
13192: PPUSH
13193: LD_STRING D23-Bur-1
13195: PPUSH
13196: CALL_OW 88
// end ; saveBelkovObjective = true ;
13200: LD_ADDR_EXP 34
13204: PUSH
13205: LD_INT 1
13207: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
13208: LD_STRING M9
13210: PPUSH
13211: CALL_OW 337
// exit ;
13215: POP
13216: POP
13217: POP
13218: POP
13219: GO 13229
// end ;
13221: GO 12810
13223: POP
13224: POP
13225: GO 12797
13227: POP
13228: POP
// end ;
13229: PPOPN 3
13231: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
13232: LD_EXP 20
13236: PUSH
13237: LD_EXP 78
13241: NOT
13242: AND
13243: PUSH
13244: LD_EXP 35
13248: NOT
13249: AND
13250: IFFALSE 13282
13252: GO 13254
13254: DISABLE
// begin belkovSaved = true ;
13255: LD_ADDR_EXP 35
13259: PUSH
13260: LD_INT 1
13262: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
13263: LD_EXP 70
13267: PPUSH
13268: LD_INT 3
13270: PPUSH
13271: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
13275: LD_STRING M9a
13277: PPUSH
13278: CALL_OW 337
// end ;
13282: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
13283: LD_EXP 33
13287: PUSH
13288: LD_EXP 61
13292: PPUSH
13293: CALL_OW 301
13297: PUSH
13298: LD_EXP 65
13302: PPUSH
13303: CALL_OW 301
13307: PUSH
13308: LD_EXP 61
13312: PPUSH
13313: CALL_OW 255
13317: PUSH
13318: LD_INT 6
13320: EQUAL
13321: PUSH
13322: LD_EXP 65
13326: PPUSH
13327: CALL_OW 255
13331: PUSH
13332: LD_INT 6
13334: EQUAL
13335: OR
13336: AND
13337: OR
13338: AND
13339: IFFALSE 13359
13341: GO 13343
13343: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
13344: LD_STRING M9a
13346: PPUSH
13347: CALL_OW 337
// saveBelkovObjective = false ;
13351: LD_ADDR_EXP 34
13355: PUSH
13356: LD_INT 0
13358: ST_TO_ADDR
// end ;
13359: END
// every 0 0$5 trigger belkovSaved and ( GetDistUnits ( Burlak , Belkov ) < 14 or GetDistUnits ( Burlak , Belkov2 ) < 14 ) do
13360: LD_EXP 35
13364: PUSH
13365: LD_EXP 59
13369: PPUSH
13370: LD_EXP 61
13374: PPUSH
13375: CALL_OW 296
13379: PUSH
13380: LD_INT 14
13382: LESS
13383: PUSH
13384: LD_EXP 59
13388: PPUSH
13389: LD_EXP 65
13393: PPUSH
13394: CALL_OW 296
13398: PUSH
13399: LD_INT 14
13401: LESS
13402: OR
13403: AND
13404: IFFALSE 13678
13406: GO 13408
13408: DISABLE
// begin InGameOn ;
13409: CALL_OW 8
// if IsOk ( Belkov ) then
13413: LD_EXP 61
13417: PPUSH
13418: CALL_OW 302
13422: IFFALSE 13520
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
13424: LD_EXP 59
13428: PUSH
13429: LD_EXP 61
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PPUSH
13438: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
13442: LD_EXP 59
13446: PPUSH
13447: LD_EXP 61
13451: PPUSH
13452: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
13456: LD_EXP 61
13460: PPUSH
13461: LD_EXP 59
13465: PPUSH
13466: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
13470: LD_EXP 61
13474: PPUSH
13475: LD_STRING D24-Bel-1
13477: PPUSH
13478: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13482: LD_EXP 59
13486: PPUSH
13487: LD_STRING D24-Bur-1
13489: PPUSH
13490: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13494: LD_EXP 61
13498: PPUSH
13499: LD_STRING D24-Bel-2
13501: PPUSH
13502: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13506: LD_EXP 59
13510: PPUSH
13511: LD_STRING D24-Bur-2
13513: PPUSH
13514: CALL_OW 88
// end else
13518: GO 13626
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
13520: LD_EXP 59
13524: PUSH
13525: LD_EXP 65
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
13538: LD_EXP 59
13542: PPUSH
13543: LD_EXP 65
13547: PPUSH
13548: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
13552: LD_EXP 65
13556: PPUSH
13557: LD_EXP 59
13561: PPUSH
13562: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
13566: LD_EXP 65
13570: PPUSH
13571: LD_STRING D24-Bel-1
13573: PPUSH
13574: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13578: LD_EXP 59
13582: PPUSH
13583: LD_STRING D24-Bur-1
13585: PPUSH
13586: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
13590: LD_EXP 59
13594: PPUSH
13595: LD_STRING D24-Bur-1a
13597: PPUSH
13598: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
13602: LD_EXP 65
13606: PPUSH
13607: LD_STRING D24-Bel-2
13609: PPUSH
13610: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13614: LD_EXP 59
13618: PPUSH
13619: LD_STRING D24-Bur-2
13621: PPUSH
13622: CALL_OW 88
// end ; if captureBelkovVehicle then
13626: LD_EXP 36
13630: IFFALSE 13644
// Say ( Burlak , D24-Bur-2a ) ;
13632: LD_EXP 59
13636: PPUSH
13637: LD_STRING D24-Bur-2a
13639: PPUSH
13640: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13644: LD_EXP 73
13648: PPUSH
13649: LD_STRING D24-Pla-2
13651: PPUSH
13652: CALL_OW 94
// if leftBunkers then
13656: LD_EXP 79
13660: IFFALSE 13674
// SayRadio ( Platonov , D24-Pla-2a ) ;
13662: LD_EXP 73
13666: PPUSH
13667: LD_STRING D24-Pla-2a
13669: PPUSH
13670: CALL_OW 94
// InGameOff ;
13674: CALL_OW 9
// end ;
13678: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
13679: LD_INT 22
13681: PPUSH
13682: LD_INT 22
13684: PUSH
13685: LD_INT 3
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 2
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 70
13710: PUSH
13711: LD_EXP 67
13715: PPUSH
13716: CALL_OW 302
13720: PUSH
13721: LD_EXP 60
13725: PPUSH
13726: CALL_OW 302
13730: OR
13731: AND
13732: IFFALSE 13815
13734: GO 13736
13736: DISABLE
// begin DialogueOn ;
13737: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
13741: LD_EXP 59
13745: PPUSH
13746: LD_STRING D26-Bur-1
13748: PPUSH
13749: CALL_OW 88
// if IsOk ( Kovalyuk ) then
13753: LD_EXP 67
13757: PPUSH
13758: CALL_OW 302
13762: IFFALSE 13776
// Say ( Kovalyuk , D26-Kov-1 ) ;
13764: LD_EXP 67
13768: PPUSH
13769: LD_STRING D26-Kov-1
13771: PPUSH
13772: CALL_OW 88
// if IsOk ( Gnyevko ) then
13776: LD_EXP 60
13780: PPUSH
13781: CALL_OW 302
13785: IFFALSE 13799
// Say ( Gnyevko , D26-Gny-1 ) ;
13787: LD_EXP 60
13791: PPUSH
13792: LD_STRING D26-Gny-1
13794: PPUSH
13795: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
13799: LD_EXP 59
13803: PPUSH
13804: LD_STRING D26-Bur-2
13806: PPUSH
13807: CALL_OW 88
// DialogueOff ;
13811: CALL_OW 7
// end ;
13815: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
13816: LD_EXP 20
13820: PUSH
13821: LD_EXP 59
13825: PPUSH
13826: LD_INT 8
13828: PPUSH
13829: CALL_OW 308
13833: NOT
13834: PUSH
13835: LD_EXP 59
13839: PPUSH
13840: CALL_OW 310
13844: PPUSH
13845: CALL_OW 310
13849: PPUSH
13850: LD_INT 8
13852: PPUSH
13853: CALL_OW 308
13857: NOT
13858: AND
13859: AND
13860: PUSH
13861: LD_EXP 37
13865: PUSH
13866: LD_INT 1
13868: NEG
13869: EQUAL
13870: AND
13871: IFFALSE 13885
13873: GO 13875
13875: DISABLE
// begin enable ;
13876: ENABLE
// raportForPlatonov = 0 ;
13877: LD_ADDR_EXP 37
13881: PUSH
13882: LD_INT 0
13884: ST_TO_ADDR
// end ;
13885: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
13886: LD_EXP 20
13890: PUSH
13891: LD_EXP 37
13895: PUSH
13896: LD_INT 0
13898: GREATEREQUAL
13899: AND
13900: PUSH
13901: LD_EXP 16
13905: NOT
13906: AND
13907: PUSH
13908: LD_EXP 59
13912: PPUSH
13913: LD_INT 8
13915: PPUSH
13916: CALL_OW 308
13920: PUSH
13921: LD_EXP 59
13925: PPUSH
13926: CALL_OW 310
13930: PPUSH
13931: CALL_OW 310
13935: PPUSH
13936: LD_INT 8
13938: PPUSH
13939: CALL_OW 308
13943: PUSH
13944: LD_EXP 16
13948: NOT
13949: AND
13950: OR
13951: AND
13952: IFFALSE 14243
13954: GO 13956
13956: DISABLE
// begin enable ;
13957: ENABLE
// DialogueOn ;
13958: CALL_OW 6
// case raportForPlatonov of 0 :
13962: LD_EXP 37
13966: PUSH
13967: LD_INT 0
13969: DOUBLE
13970: EQUAL
13971: IFTRUE 13975
13973: GO 14002
13975: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
13976: LD_EXP 73
13980: PPUSH
13981: LD_STRING D25a-Pla-1
13983: PPUSH
13984: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
13988: LD_EXP 59
13992: PPUSH
13993: LD_STRING D25a-Bur-1
13995: PPUSH
13996: CALL_OW 88
// end ; 1 :
14000: GO 14218
14002: LD_INT 1
14004: DOUBLE
14005: EQUAL
14006: IFTRUE 14010
14008: GO 14073
14010: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14011: LD_EXP 73
14015: PPUSH
14016: LD_STRING D25-Pla-1
14018: PPUSH
14019: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
14023: LD_EXP 59
14027: PPUSH
14028: LD_STRING D25-Bur-1
14030: PPUSH
14031: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
14035: LD_EXP 59
14039: PPUSH
14040: LD_STRING D25b-Bur-1
14042: PPUSH
14043: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
14047: LD_EXP 73
14051: PPUSH
14052: LD_STRING D25b-Pla-1
14054: PPUSH
14055: CALL_OW 88
// playerGetSupport = true ;
14059: LD_ADDR_EXP 32
14063: PUSH
14064: LD_INT 1
14066: ST_TO_ADDR
// PlatonovSendSupport ;
14067: CALL 5937 0 0
// end ; 2 :
14071: GO 14218
14073: LD_INT 2
14075: DOUBLE
14076: EQUAL
14077: IFTRUE 14081
14079: GO 14127
14081: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14082: LD_EXP 73
14086: PPUSH
14087: LD_STRING D25-Pla-1
14089: PPUSH
14090: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
14094: LD_EXP 59
14098: PPUSH
14099: LD_STRING D25-Bur-1a
14101: PPUSH
14102: CALL_OW 88
// if not sawLeftBunker then
14106: LD_EXP 27
14110: NOT
14111: IFFALSE 14125
// Say ( Platonov , D25c-Pla-1 ) ;
14113: LD_EXP 73
14117: PPUSH
14118: LD_STRING D25c-Pla-1
14120: PPUSH
14121: CALL_OW 88
// end ; 3 :
14125: GO 14218
14127: LD_INT 3
14129: DOUBLE
14130: EQUAL
14131: IFTRUE 14135
14133: GO 14217
14135: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14136: LD_EXP 73
14140: PPUSH
14141: LD_STRING D25-Pla-1
14143: PPUSH
14144: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
14148: LD_EXP 59
14152: PPUSH
14153: LD_STRING D25a-Bur-1b
14155: PPUSH
14156: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
14160: LD_EXP 59
14164: PPUSH
14165: LD_STRING D25b-Bur-1
14167: PPUSH
14168: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
14172: LD_EXP 73
14176: PPUSH
14177: LD_STRING D25b-Pla-1
14179: PPUSH
14180: CALL_OW 88
// playerGetSupport = true ;
14184: LD_ADDR_EXP 32
14188: PUSH
14189: LD_INT 1
14191: ST_TO_ADDR
// PlatonovSendSupport ;
14192: CALL 5937 0 0
// if not sawRightBunker then
14196: LD_EXP 28
14200: NOT
14201: IFFALSE 14215
// Say ( Platonov , D25c-Pla-1 ) ;
14203: LD_EXP 73
14207: PPUSH
14208: LD_STRING D25c-Pla-1
14210: PPUSH
14211: CALL_OW 88
// end ; end ;
14215: GO 14218
14217: POP
// raportForPlatonov = - 1 ;
14218: LD_ADDR_EXP 37
14222: PUSH
14223: LD_INT 1
14225: NEG
14226: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
14227: LD_EXP 73
14231: PPUSH
14232: LD_STRING D25c-Pla-1a
14234: PPUSH
14235: CALL_OW 88
// DialogueOff ;
14239: CALL_OW 7
// end ;
14243: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
14244: LD_INT 19
14246: PPUSH
14247: LD_INT 22
14249: PUSH
14250: LD_INT 3
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: PPUSH
14260: CALL_OW 70
14264: PUSH
14265: LD_INT 0
14267: GREATER
14268: IFFALSE 14288
14270: GO 14272
14272: DISABLE
// begin northMapExplored = true ;
14273: LD_ADDR_EXP 39
14277: PUSH
14278: LD_INT 1
14280: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14281: LD_STRING M10
14283: PPUSH
14284: CALL_OW 337
// end ;
14288: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
14289: LD_EXP 79
14293: NOT
14294: PUSH
14295: LD_EXP 39
14299: AND
14300: PUSH
14301: LD_EXP 35
14305: PUSH
14306: LD_EXP 34
14310: NOT
14311: OR
14312: AND
14313: IFFALSE 14333
14315: GO 14317
14317: DISABLE
// begin backToBeria2 = true ;
14318: LD_ADDR_EXP 16
14322: PUSH
14323: LD_INT 1
14325: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
14326: LD_STRING M10a
14328: PPUSH
14329: CALL_OW 337
// end ; end_of_file
14333: END
// export function PrepareNature ; var i , un ; begin
14334: LD_INT 0
14336: PPUSH
14337: PPUSH
14338: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
14339: LD_ADDR_VAR 0 2
14343: PUSH
14344: DOUBLE
14345: LD_INT 1
14347: DEC
14348: ST_TO_ADDR
14349: LD_EXP 42
14353: PUSH
14354: LD_INT 1
14356: ARRAY
14357: PUSH
14358: FOR_TO
14359: IFFALSE 14469
// begin uc_side = 0 ;
14361: LD_ADDR_OWVAR 20
14365: PUSH
14366: LD_INT 0
14368: ST_TO_ADDR
// uc_nation = nation_nature ;
14369: LD_ADDR_OWVAR 21
14373: PUSH
14374: LD_INT 0
14376: ST_TO_ADDR
// hc_class = class_apeman ;
14377: LD_ADDR_OWVAR 28
14381: PUSH
14382: LD_INT 12
14384: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14385: LD_ADDR_OWVAR 31
14389: PUSH
14390: LD_EXP 43
14394: PUSH
14395: LD_INT 1
14397: ARRAY
14398: PUSH
14399: LD_EXP 43
14403: PUSH
14404: LD_INT 2
14406: ARRAY
14407: PUSH
14408: LD_EXP 43
14412: PUSH
14413: LD_INT 3
14415: ARRAY
14416: PUSH
14417: LD_EXP 43
14421: PUSH
14422: LD_INT 4
14424: ARRAY
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14432: LD_ADDR_OWVAR 35
14436: PUSH
14437: LD_EXP 44
14441: ST_TO_ADDR
// un = CreateHuman ;
14442: LD_ADDR_VAR 0 3
14446: PUSH
14447: CALL_OW 44
14451: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14452: LD_VAR 0 3
14456: PPUSH
14457: LD_INT 21
14459: PPUSH
14460: LD_INT 0
14462: PPUSH
14463: CALL_OW 49
// end ;
14467: GO 14358
14469: POP
14470: POP
// for i := 1 to animalsAmount [ 2 ] do
14471: LD_ADDR_VAR 0 2
14475: PUSH
14476: DOUBLE
14477: LD_INT 1
14479: DEC
14480: ST_TO_ADDR
14481: LD_EXP 42
14485: PUSH
14486: LD_INT 2
14488: ARRAY
14489: PUSH
14490: FOR_TO
14491: IFFALSE 14601
// begin uc_side = 0 ;
14493: LD_ADDR_OWVAR 20
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// uc_nation = nation_nature ;
14501: LD_ADDR_OWVAR 21
14505: PUSH
14506: LD_INT 0
14508: ST_TO_ADDR
// hc_class = class_phororhacos ;
14509: LD_ADDR_OWVAR 28
14513: PUSH
14514: LD_INT 18
14516: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14517: LD_ADDR_OWVAR 31
14521: PUSH
14522: LD_EXP 43
14526: PUSH
14527: LD_INT 1
14529: ARRAY
14530: PUSH
14531: LD_EXP 43
14535: PUSH
14536: LD_INT 2
14538: ARRAY
14539: PUSH
14540: LD_EXP 43
14544: PUSH
14545: LD_INT 3
14547: ARRAY
14548: PUSH
14549: LD_EXP 43
14553: PUSH
14554: LD_INT 4
14556: ARRAY
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14564: LD_ADDR_OWVAR 35
14568: PUSH
14569: LD_EXP 44
14573: ST_TO_ADDR
// un = CreateHuman ;
14574: LD_ADDR_VAR 0 3
14578: PUSH
14579: CALL_OW 44
14583: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14584: LD_VAR 0 3
14588: PPUSH
14589: LD_INT 21
14591: PPUSH
14592: LD_INT 0
14594: PPUSH
14595: CALL_OW 49
// end ;
14599: GO 14490
14601: POP
14602: POP
// for i := 1 to animalsAmount [ 3 ] do
14603: LD_ADDR_VAR 0 2
14607: PUSH
14608: DOUBLE
14609: LD_INT 1
14611: DEC
14612: ST_TO_ADDR
14613: LD_EXP 42
14617: PUSH
14618: LD_INT 3
14620: ARRAY
14621: PUSH
14622: FOR_TO
14623: IFFALSE 14733
// begin uc_side = 0 ;
14625: LD_ADDR_OWVAR 20
14629: PUSH
14630: LD_INT 0
14632: ST_TO_ADDR
// uc_nation = nation_nature ;
14633: LD_ADDR_OWVAR 21
14637: PUSH
14638: LD_INT 0
14640: ST_TO_ADDR
// hc_class = class_tiger ;
14641: LD_ADDR_OWVAR 28
14645: PUSH
14646: LD_INT 14
14648: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14649: LD_ADDR_OWVAR 31
14653: PUSH
14654: LD_EXP 43
14658: PUSH
14659: LD_INT 1
14661: ARRAY
14662: PUSH
14663: LD_EXP 43
14667: PUSH
14668: LD_INT 2
14670: ARRAY
14671: PUSH
14672: LD_EXP 43
14676: PUSH
14677: LD_INT 3
14679: ARRAY
14680: PUSH
14681: LD_EXP 43
14685: PUSH
14686: LD_INT 4
14688: ARRAY
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14696: LD_ADDR_OWVAR 35
14700: PUSH
14701: LD_EXP 44
14705: ST_TO_ADDR
// un = CreateHuman ;
14706: LD_ADDR_VAR 0 3
14710: PUSH
14711: CALL_OW 44
14715: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 21
14723: PPUSH
14724: LD_INT 0
14726: PPUSH
14727: CALL_OW 49
// end ;
14731: GO 14622
14733: POP
14734: POP
// for i := 1 to animalsAmount [ 4 ] do
14735: LD_ADDR_VAR 0 2
14739: PUSH
14740: DOUBLE
14741: LD_INT 1
14743: DEC
14744: ST_TO_ADDR
14745: LD_EXP 42
14749: PUSH
14750: LD_INT 4
14752: ARRAY
14753: PUSH
14754: FOR_TO
14755: IFFALSE 14865
// begin uc_side = 0 ;
14757: LD_ADDR_OWVAR 20
14761: PUSH
14762: LD_INT 0
14764: ST_TO_ADDR
// uc_nation = nation_nature ;
14765: LD_ADDR_OWVAR 21
14769: PUSH
14770: LD_INT 0
14772: ST_TO_ADDR
// hc_class = 21 ;
14773: LD_ADDR_OWVAR 28
14777: PUSH
14778: LD_INT 21
14780: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14781: LD_ADDR_OWVAR 31
14785: PUSH
14786: LD_EXP 43
14790: PUSH
14791: LD_INT 1
14793: ARRAY
14794: PUSH
14795: LD_EXP 43
14799: PUSH
14800: LD_INT 2
14802: ARRAY
14803: PUSH
14804: LD_EXP 43
14808: PUSH
14809: LD_INT 3
14811: ARRAY
14812: PUSH
14813: LD_EXP 43
14817: PUSH
14818: LD_INT 4
14820: ARRAY
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14828: LD_ADDR_OWVAR 35
14832: PUSH
14833: LD_EXP 44
14837: ST_TO_ADDR
// un = CreateHuman ;
14838: LD_ADDR_VAR 0 3
14842: PUSH
14843: CALL_OW 44
14847: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14848: LD_VAR 0 3
14852: PPUSH
14853: LD_INT 21
14855: PPUSH
14856: LD_INT 0
14858: PPUSH
14859: CALL_OW 49
// end ;
14863: GO 14754
14865: POP
14866: POP
// end ; end_of_file
14867: LD_VAR 0 1
14871: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
14872: LD_EXP 21
14876: IFFALSE 15105
14878: GO 14880
14880: DISABLE
14881: LD_INT 0
14883: PPUSH
14884: PPUSH
14885: PPUSH
14886: PPUSH
14887: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
14888: LD_ADDR_VAR 0 4
14892: PUSH
14893: LD_INT 22
14895: PUSH
14896: LD_INT 3
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 21
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 25
14915: PUSH
14916: LD_INT 2
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: PPUSH
14928: CALL_OW 69
14932: ST_TO_ADDR
// wait ( 0 0$40 ) ;
14933: LD_INT 1400
14935: PPUSH
14936: CALL_OW 67
// carryCratesEngs = 0 ;
14940: LD_ADDR_VAR 0 3
14944: PUSH
14945: LD_INT 0
14947: ST_TO_ADDR
// for unit in playerEngs do
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_VAR 0 4
14957: PUSH
14958: FOR_IN
14959: IFFALSE 14987
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
14961: LD_ADDR_VAR 0 3
14965: PUSH
14966: LD_VAR 0 3
14970: PUSH
14971: LD_VAR 0 2
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 289
14983: PLUS
14984: ST_TO_ADDR
14985: GO 14958
14987: POP
14988: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
14989: LD_INT 106
14991: PPUSH
14992: CALL_OW 274
14996: PPUSH
14997: LD_INT 1
14999: PPUSH
15000: CALL_OW 275
15004: PUSH
15005: LD_INT 50
15007: LESS
15008: PUSH
15009: LD_INT 8
15011: PPUSH
15012: LD_INT 1
15014: PPUSH
15015: CALL_OW 287
15019: PUSH
15020: LD_INT 10
15022: MUL
15023: PUSH
15024: LD_INT 106
15026: PPUSH
15027: CALL_OW 274
15031: PPUSH
15032: LD_INT 1
15034: PPUSH
15035: CALL_OW 275
15039: PLUS
15040: PUSH
15041: LD_VAR 0 3
15045: PLUS
15046: PUSH
15047: LD_INT 50
15049: LESS
15050: AND
15051: IFFALSE 15063
// spawnNextCrates = true else
15053: LD_ADDR_VAR 0 5
15057: PUSH
15058: LD_INT 1
15060: ST_TO_ADDR
15061: GO 15071
// spawnNextCrates = false ;
15063: LD_ADDR_VAR 0 5
15067: PUSH
15068: LD_INT 0
15070: ST_TO_ADDR
// if spawnNextCrates then
15071: LD_VAR 0 5
15075: IFFALSE 15098
// CreateCratesArea ( rand ( 1 , 5 ) , BeriaBaseArea , true ) ;
15077: LD_INT 1
15079: PPUSH
15080: LD_INT 5
15082: PPUSH
15083: CALL_OW 12
15087: PPUSH
15088: LD_INT 8
15090: PPUSH
15091: LD_INT 1
15093: PPUSH
15094: CALL_OW 55
// until not spawnCrates ;
15098: LD_EXP 21
15102: NOT
15103: IFFALSE 14888
// end ; end_of_file
15105: PPOPN 5
15107: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
15108: LD_VAR 0 1
15112: PPUSH
15113: CALL_OW 266
15117: PUSH
15118: LD_INT 6
15120: EQUAL
15121: PUSH
15122: LD_INT 22
15124: PUSH
15125: LD_INT 3
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 30
15134: PUSH
15135: LD_INT 6
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PPUSH
15146: CALL_OW 69
15150: PUSH
15151: LD_INT 1
15153: GREATER
15154: AND
15155: PUSH
15156: LD_EXP 11
15160: NOT
15161: AND
15162: IFFALSE 15173
// Dial_StopConstructAgainSameBuilding ( building ) ;
15164: LD_VAR 0 1
15168: PPUSH
15169: CALL 7861 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 266
15182: PUSH
15183: LD_INT 2
15185: EQUAL
15186: PUSH
15187: LD_INT 22
15189: PUSH
15190: LD_INT 3
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 30
15199: PUSH
15200: LD_INT 2
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PPUSH
15211: CALL_OW 69
15215: PUSH
15216: LD_INT 1
15218: GREATER
15219: AND
15220: PUSH
15221: LD_EXP 11
15225: NOT
15226: AND
15227: IFFALSE 15238
// Dial_StopConstructAgainSameBuilding ( building ) ;
15229: LD_VAR 0 1
15233: PPUSH
15234: CALL 7861 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 255
15247: PUSH
15248: LD_INT 3
15250: EQUAL
15251: PUSH
15252: LD_VAR 0 1
15256: PPUSH
15257: CALL_OW 266
15261: PUSH
15262: LD_INT 26
15264: PUSH
15265: LD_INT 4
15267: PUSH
15268: LD_INT 31
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: LIST
15275: IN
15276: AND
15277: PUSH
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_INT 8
15285: PPUSH
15286: CALL_OW 308
15290: AND
15291: IFFALSE 15302
// Dial_StopConstructAgainSameBuilding ( building ) ;
15293: LD_VAR 0 1
15297: PPUSH
15298: CALL 7861 0 1
// end ;
15302: PPOPN 2
15304: END
// on BuildingComplete ( building ) do var sold , platSold ;
15305: LD_INT 0
15307: PPUSH
15308: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
15309: LD_VAR 0 1
15313: PPUSH
15314: CALL_OW 255
15318: PUSH
15319: LD_INT 3
15321: EQUAL
15322: PUSH
15323: LD_VAR 0 1
15327: PPUSH
15328: CALL_OW 266
15332: PUSH
15333: LD_INT 6
15335: EQUAL
15336: AND
15337: PUSH
15338: LD_EXP 8
15342: NOT
15343: AND
15344: IFFALSE 15350
// Dial_LabConstructed ;
15346: CALL 7711 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
15350: LD_VAR 0 1
15354: PPUSH
15355: CALL_OW 255
15359: PUSH
15360: LD_INT 3
15362: EQUAL
15363: PUSH
15364: LD_VAR 0 1
15368: PPUSH
15369: CALL_OW 266
15373: PUSH
15374: LD_INT 2
15376: EQUAL
15377: AND
15378: PUSH
15379: LD_EXP 9
15383: NOT
15384: AND
15385: IFFALSE 15391
// Dial_WorkshopConstructed ;
15387: CALL 7786 0 0
// if GetSide ( building ) = 6 then
15391: LD_VAR 0 1
15395: PPUSH
15396: CALL_OW 255
15400: PUSH
15401: LD_INT 6
15403: EQUAL
15404: IFFALSE 15606
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
15406: LD_VAR 0 1
15410: PPUSH
15411: CALL_OW 266
15415: PUSH
15416: LD_INT 31
15418: EQUAL
15419: PUSH
15420: LD_VAR 0 1
15424: PPUSH
15425: LD_INT 9
15427: PPUSH
15428: CALL_OW 308
15432: AND
15433: IFFALSE 15475
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
15435: LD_ADDR_VAR 0 2
15439: PUSH
15440: LD_INT 209
15442: PPUSH
15443: CALL_OW 313
15447: PUSH
15448: LD_INT 1
15450: ARRAY
15451: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
15452: LD_VAR 0 2
15456: PPUSH
15457: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
15461: LD_VAR 0 2
15465: PPUSH
15466: LD_VAR 0 1
15470: PPUSH
15471: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 266
15484: PUSH
15485: LD_INT 31
15487: EQUAL
15488: PUSH
15489: LD_VAR 0 1
15493: PPUSH
15494: LD_INT 8
15496: PPUSH
15497: CALL_OW 308
15501: AND
15502: IFFALSE 15538
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
15504: LD_ADDR_VAR 0 2
15508: PUSH
15509: LD_EXP 74
15513: PPUSH
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 74
15523: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
15524: LD_VAR 0 2
15528: PPUSH
15529: LD_VAR 0 1
15533: PPUSH
15534: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
15538: LD_VAR 0 1
15542: PPUSH
15543: CALL_OW 266
15547: PUSH
15548: LD_INT 2
15550: EQUAL
15551: IFFALSE 15606
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
15553: LD_EXP 66
15557: PPUSH
15558: LD_INT 25
15560: PUSH
15561: LD_INT 3
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PPUSH
15568: CALL_OW 72
15572: PPUSH
15573: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
15577: LD_EXP 66
15581: PPUSH
15582: LD_INT 25
15584: PUSH
15585: LD_INT 3
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PPUSH
15592: CALL_OW 72
15596: PPUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 180
// end ; end ; end ;
15606: PPOPN 3
15608: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
15609: LD_VAR 0 1
15613: PUSH
15614: LD_INT 47
15616: EQUAL
15617: PUSH
15618: LD_VAR 0 2
15622: PPUSH
15623: CALL_OW 255
15627: PUSH
15628: LD_INT 3
15630: EQUAL
15631: AND
15632: IFFALSE 15642
// engineResearched = true ;
15634: LD_ADDR_EXP 10
15638: PUSH
15639: LD_INT 1
15641: ST_TO_ADDR
// if tech = tech_Tech1 then
15642: LD_VAR 0 1
15646: PUSH
15647: LD_INT 48
15649: EQUAL
15650: IFFALSE 15672
// begin wait ( 0 0$5 ) ;
15652: LD_INT 175
15654: PPUSH
15655: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
15659: LD_INT 83
15661: PPUSH
15662: LD_INT 1500
15664: PPUSH
15665: LD_INT 0
15667: PPUSH
15668: CALL_OW 486
// end ; end ;
15672: PPOPN 2
15674: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
15675: LD_VAR 0 2
15679: PPUSH
15680: CALL_OW 255
15684: PUSH
15685: LD_OWVAR 2
15689: EQUAL
15690: PUSH
15691: LD_VAR 0 2
15695: PPUSH
15696: CALL_OW 302
15700: AND
15701: PUSH
15702: LD_EXP 12
15706: NOT
15707: AND
15708: PUSH
15709: LD_EXP 17
15713: NOT
15714: AND
15715: IFFALSE 15726
// Dial_FirstVehConstructed ( factory ) ;
15717: LD_VAR 0 2
15721: PPUSH
15722: CALL 8376 0 1
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
15726: LD_VAR 0 2
15730: PPUSH
15731: CALL_OW 255
15735: PUSH
15736: LD_OWVAR 2
15740: EQUAL
15741: PUSH
15742: LD_VAR 0 2
15746: PPUSH
15747: CALL_OW 302
15751: AND
15752: PUSH
15753: LD_EXP 17
15757: AND
15758: IFFALSE 15774
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
15760: LD_ADDR_EXP 18
15764: PUSH
15765: LD_EXP 18
15769: PUSH
15770: LD_INT 1
15772: PLUS
15773: ST_TO_ADDR
// end ;
15774: PPOPN 2
15776: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
15777: LD_EXP 19
15781: NOT
15782: PUSH
15783: LD_VAR 0 5
15787: PUSH
15788: LD_INT 1
15790: EQUAL
15791: AND
15792: IFFALSE 15808
// Dial_NewCrates ( x , y ) ;
15794: LD_VAR 0 2
15798: PPUSH
15799: LD_VAR 0 3
15803: PPUSH
15804: CALL 8330 0 2
// end ;
15808: PPOPN 5
15810: END
// on Command ( com ) do var i , j , temp , order , destiny ;
15811: LD_INT 0
15813: PPUSH
15814: PPUSH
15815: PPUSH
15816: PPUSH
15817: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
15818: LD_ADDR_VAR 0 2
15822: PUSH
15823: LD_INT 22
15825: PUSH
15826: LD_INT 3
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: PUSH
15852: FOR_IN
15853: IFFALSE 16046
// if GetTaskList ( i ) > 0 then
15855: LD_VAR 0 2
15859: PPUSH
15860: CALL_OW 437
15864: PUSH
15865: LD_INT 0
15867: GREATER
15868: IFFALSE 16044
// for j = 1 to GetTaskList ( i ) do
15870: LD_ADDR_VAR 0 3
15874: PUSH
15875: DOUBLE
15876: LD_INT 1
15878: DEC
15879: ST_TO_ADDR
15880: LD_VAR 0 2
15884: PPUSH
15885: CALL_OW 437
15889: PUSH
15890: FOR_TO
15891: IFFALSE 16042
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
15893: LD_ADDR_VAR 0 4
15897: PUSH
15898: LD_VAR 0 2
15902: PPUSH
15903: CALL_OW 437
15907: PUSH
15908: LD_VAR 0 3
15912: ARRAY
15913: PUSH
15914: LD_INT 4
15916: ARRAY
15917: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
15918: LD_VAR 0 4
15922: PUSH
15923: LD_INT 71
15925: EQUAL
15926: PUSH
15927: LD_VAR 0 4
15931: PPUSH
15932: CALL_OW 255
15936: PUSH
15937: LD_INT 6
15939: EQUAL
15940: PUSH
15941: LD_VAR 0 2
15945: PPUSH
15946: CALL_OW 437
15950: PUSH
15951: LD_VAR 0 3
15955: ARRAY
15956: PUSH
15957: LD_INT 1
15959: ARRAY
15960: PUSH
15961: LD_STRING e
15963: EQUAL
15964: AND
15965: PUSH
15966: LD_VAR 0 4
15970: PPUSH
15971: CALL_OW 247
15975: PUSH
15976: LD_INT 2
15978: EQUAL
15979: AND
15980: OR
15981: IFFALSE 15994
// SetTaskList ( i , [ ] ) ;
15983: LD_VAR 0 2
15987: PPUSH
15988: EMPTY
15989: PPUSH
15990: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
15994: LD_VAR 0 4
15998: PUSH
15999: LD_INT 106
16001: EQUAL
16002: PUSH
16003: LD_VAR 0 2
16007: PPUSH
16008: CALL_OW 437
16012: PUSH
16013: LD_VAR 0 3
16017: ARRAY
16018: PUSH
16019: LD_INT 1
16021: ARRAY
16022: PUSH
16023: LD_STRING Y
16025: EQUAL
16026: AND
16027: IFFALSE 16040
// SetTaskList ( i , [ ] ) ;
16029: LD_VAR 0 2
16033: PPUSH
16034: EMPTY
16035: PPUSH
16036: CALL_OW 446
// end ;
16040: GO 15890
16042: POP
16043: POP
16044: GO 15852
16046: POP
16047: POP
// end ;
16048: PPOPN 6
16050: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 255
16060: PUSH
16061: LD_INT 1
16063: EQUAL
16064: PUSH
16065: LD_VAR 0 1
16069: PPUSH
16070: CALL_OW 247
16074: PUSH
16075: LD_INT 1
16077: EQUAL
16078: AND
16079: IFFALSE 16137
// begin if unit in amLeftEngs then
16081: LD_VAR 0 1
16085: PUSH
16086: LD_EXP 83
16090: IN
16091: IFFALSE 16109
// amLeftEngs = amLeftEngs diff unit ;
16093: LD_ADDR_EXP 83
16097: PUSH
16098: LD_EXP 83
16102: PUSH
16103: LD_VAR 0 1
16107: DIFF
16108: ST_TO_ADDR
// if unit in amRightEngs then
16109: LD_VAR 0 1
16113: PUSH
16114: LD_EXP 84
16118: IN
16119: IFFALSE 16137
// amRightEngs = amRightEngs diff unit ;
16121: LD_ADDR_EXP 84
16125: PUSH
16126: LD_EXP 84
16130: PUSH
16131: LD_VAR 0 1
16135: DIFF
16136: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
16137: LD_VAR 0 1
16141: PPUSH
16142: CALL_OW 255
16146: PUSH
16147: LD_INT 6
16149: EQUAL
16150: PUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 247
16160: PUSH
16161: LD_INT 1
16163: EQUAL
16164: AND
16165: IFFALSE 16195
// if unit in belkovTeam then
16167: LD_VAR 0 1
16171: PUSH
16172: LD_EXP 70
16176: IN
16177: IFFALSE 16195
// belkovTeam = belkovTeam diff unit ;
16179: LD_ADDR_EXP 70
16183: PUSH
16184: LD_EXP 70
16188: PUSH
16189: LD_VAR 0 1
16193: DIFF
16194: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16195: LD_VAR 0 1
16199: PPUSH
16200: CALL_OW 255
16204: PUSH
16205: LD_INT 3
16207: EQUAL
16208: PUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: CALL_OW 247
16218: PUSH
16219: LD_INT 1
16221: EQUAL
16222: AND
16223: IFFALSE 16239
// lostComradesCounter = lostComradesCounter + 1 ;
16225: LD_ADDR_EXP 41
16229: PUSH
16230: LD_EXP 41
16234: PUSH
16235: LD_INT 1
16237: PLUS
16238: ST_TO_ADDR
// if unit = Burlak then
16239: LD_VAR 0 1
16243: PUSH
16244: LD_EXP 59
16248: EQUAL
16249: IFFALSE 16255
// BurlakIsDead ;
16251: CALL 17490 0 0
// if unit in platSoldiers then
16255: LD_VAR 0 1
16259: PUSH
16260: LD_EXP 74
16264: IN
16265: IFFALSE 16283
// platSoldiers = platSoldiers diff unit ;
16267: LD_ADDR_EXP 74
16271: PUSH
16272: LD_EXP 74
16276: PUSH
16277: LD_VAR 0 1
16281: DIFF
16282: ST_TO_ADDR
// end ;
16283: PPOPN 1
16285: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 255
16295: PUSH
16296: LD_INT 1
16298: EQUAL
16299: PUSH
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL_OW 247
16309: PUSH
16310: LD_INT 3
16312: EQUAL
16313: AND
16314: IFFALSE 16372
// begin if unit in leftBunkers then
16316: LD_VAR 0 1
16320: PUSH
16321: LD_EXP 79
16325: IN
16326: IFFALSE 16344
// leftBunkers = leftBunkers diff unit ;
16328: LD_ADDR_EXP 79
16332: PUSH
16333: LD_EXP 79
16337: PUSH
16338: LD_VAR 0 1
16342: DIFF
16343: ST_TO_ADDR
// if unit in rightBunkers then
16344: LD_VAR 0 1
16348: PUSH
16349: LD_EXP 80
16353: IN
16354: IFFALSE 16372
// rightBunkers = rightBunkers diff unit ;
16356: LD_ADDR_EXP 80
16360: PUSH
16361: LD_EXP 80
16365: PUSH
16366: LD_VAR 0 1
16370: DIFF
16371: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16372: LD_VAR 0 1
16376: PPUSH
16377: CALL_OW 255
16381: PUSH
16382: LD_INT 1
16384: EQUAL
16385: PUSH
16386: LD_VAR 0 1
16390: PPUSH
16391: CALL_OW 247
16395: PUSH
16396: LD_INT 1
16398: EQUAL
16399: AND
16400: IFFALSE 16430
// if unit in trapTeam then
16402: LD_VAR 0 1
16406: PUSH
16407: LD_EXP 78
16411: IN
16412: IFFALSE 16430
// trapTeam = trapTeam diff unit ;
16414: LD_ADDR_EXP 78
16418: PUSH
16419: LD_EXP 78
16423: PUSH
16424: LD_VAR 0 1
16428: DIFF
16429: ST_TO_ADDR
// end ;
16430: PPOPN 1
16432: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
16433: LD_VAR 0 3
16437: PUSH
16438: LD_INT 1
16440: EQUAL
16441: IFFALSE 16451
// captureBelkovVehicle = true ;
16443: LD_ADDR_EXP 36
16447: PUSH
16448: LD_INT 1
16450: ST_TO_ADDR
// if original_side = 6 then
16451: LD_VAR 0 3
16455: PUSH
16456: LD_INT 6
16458: EQUAL
16459: IFFALSE 16479
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
16461: LD_VAR 0 1
16465: PUSH
16466: LD_VAR 0 2
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PPUSH
16475: CALL_OW 139
// end ;
16479: PPOPN 4
16481: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
16482: LD_VAR 0 1
16486: PUSH
16487: LD_INT 3
16489: EQUAL
16490: PUSH
16491: LD_VAR 0 2
16495: PUSH
16496: LD_INT 6
16498: EQUAL
16499: AND
16500: IFFALSE 16506
// AttackComrades ;
16502: CALL 17505 0 0
// end ; end_of_file
16506: PPOPN 2
16508: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
16509: LD_EXP 16
16513: PUSH
16514: LD_INT 8
16516: PPUSH
16517: LD_INT 22
16519: PUSH
16520: LD_INT 3
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 21
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PPUSH
16541: CALL_OW 71
16545: PUSH
16546: LD_INT 0
16548: EQUAL
16549: AND
16550: IFFALSE 16651
16552: GO 16554
16554: DISABLE
// begin enable ;
16555: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
16556: LD_EXP 34
16560: NOT
16561: PUSH
16562: LD_EXP 61
16566: PPUSH
16567: CALL_OW 302
16571: PUSH
16572: LD_EXP 65
16576: PPUSH
16577: CALL_OW 302
16581: OR
16582: AND
16583: IFFALSE 16630
// begin case Query ( QContMission ) of 1 :
16585: LD_STRING QContMission
16587: PPUSH
16588: CALL_OW 97
16592: PUSH
16593: LD_INT 1
16595: DOUBLE
16596: EQUAL
16597: IFTRUE 16601
16599: GO 16608
16601: POP
// begin FinishMission ;
16602: CALL 16652 0 0
// end ; 2 :
16606: GO 16628
16608: LD_INT 2
16610: DOUBLE
16611: EQUAL
16612: IFTRUE 16616
16614: GO 16627
16616: POP
// begin saveBelkovObjective = true ;
16617: LD_ADDR_EXP 34
16621: PUSH
16622: LD_INT 1
16624: ST_TO_ADDR
// end ; end ;
16625: GO 16628
16627: POP
// end else
16628: GO 16641
// if not belkovSaved then
16630: LD_EXP 35
16634: NOT
16635: IFFALSE 16641
// FinishMission ;
16637: CALL 16652 0 0
// if belkovSaved then
16641: LD_EXP 35
16645: IFFALSE 16651
// FinishMission ;
16647: CALL 16652 0 0
// end ;
16651: END
// function FinishMission ; begin
16652: LD_INT 0
16654: PPUSH
// SetRewards ;
16655: CALL 16676 0 0
// SavePlayerCharacters ;
16659: CALL 16966 0 0
// SaveGlobalVariables ;
16663: CALL 17170 0 0
// YouWin ;
16667: CALL_OW 103
// end ;
16671: LD_VAR 0 1
16675: RET
// function SetRewards ; begin
16676: LD_INT 0
16678: PPUSH
// case initiative of 1 :
16679: LD_EXP 40
16683: PUSH
16684: LD_INT 1
16686: DOUBLE
16687: EQUAL
16688: IFTRUE 16692
16690: GO 16705
16692: POP
// AddMedal ( Initiative , 1 ) ; 2 :
16693: LD_STRING Initiative
16695: PPUSH
16696: LD_INT 1
16698: PPUSH
16699: CALL_OW 101
16703: GO 16750
16705: LD_INT 2
16707: DOUBLE
16708: EQUAL
16709: IFTRUE 16713
16711: GO 16727
16713: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
16714: LD_STRING Initiative
16716: PPUSH
16717: LD_INT 2
16719: NEG
16720: PPUSH
16721: CALL_OW 101
16725: GO 16750
16727: LD_INT 3
16729: DOUBLE
16730: EQUAL
16731: IFTRUE 16735
16733: GO 16749
16735: POP
// AddMedal ( Initiative , - 1 ) ; end ;
16736: LD_STRING Initiative
16738: PPUSH
16739: LD_INT 1
16741: NEG
16742: PPUSH
16743: CALL_OW 101
16747: GO 16750
16749: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
16750: LD_EXP 35
16754: PUSH
16755: LD_EXP 61
16759: PPUSH
16760: CALL_OW 302
16764: PUSH
16765: LD_EXP 65
16769: PPUSH
16770: CALL_OW 302
16774: OR
16775: AND
16776: IFFALSE 16788
// AddMedal ( Belkov , 1 ) ;
16778: LD_STRING Belkov
16780: PPUSH
16781: LD_INT 1
16783: PPUSH
16784: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
16788: LD_EXP 35
16792: NOT
16793: PUSH
16794: LD_EXP 34
16798: NOT
16799: AND
16800: IFFALSE 16813
// AddMedal ( Belkov , - 1 ) ;
16802: LD_STRING Belkov
16804: PPUSH
16805: LD_INT 1
16807: NEG
16808: PPUSH
16809: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
16813: LD_EXP 35
16817: NOT
16818: PUSH
16819: LD_EXP 34
16823: AND
16824: IFFALSE 16837
// AddMedal ( Belkov , - 2 ) ;
16826: LD_STRING Belkov
16828: PPUSH
16829: LD_INT 2
16831: NEG
16832: PPUSH
16833: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
16837: LD_EXP 35
16841: PUSH
16842: LD_EXP 6
16846: PUSH
16847: LD_EXP 61
16851: PPUSH
16852: CALL_OW 301
16856: AND
16857: AND
16858: PUSH
16859: LD_EXP 6
16863: NOT
16864: PUSH
16865: LD_EXP 65
16869: PPUSH
16870: CALL_OW 301
16874: AND
16875: OR
16876: IFFALSE 16889
// AddMedal ( Belkov , - 2 ) ;
16878: LD_STRING Belkov
16880: PPUSH
16881: LD_INT 2
16883: NEG
16884: PPUSH
16885: CALL_OW 101
// if lostComradesCounter = 0 then
16889: LD_EXP 41
16893: PUSH
16894: LD_INT 0
16896: EQUAL
16897: IFFALSE 16911
// AddMedal ( NoLosses , 1 ) else
16899: LD_STRING NoLosses
16901: PPUSH
16902: LD_INT 1
16904: PPUSH
16905: CALL_OW 101
16909: GO 16921
// AddMedal ( NoLosses , 0 ) ;
16911: LD_STRING NoLosses
16913: PPUSH
16914: LD_INT 0
16916: PPUSH
16917: CALL_OW 101
// GiveMedals ( Main ) ;
16921: LD_STRING Main
16923: PPUSH
16924: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
16928: LD_INT 22
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 21
16940: PUSH
16941: LD_INT 1
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PPUSH
16952: CALL_OW 69
16956: PPUSH
16957: CALL_OW 43
// end ;
16961: LD_VAR 0 1
16965: RET
// function SavePlayerCharacters ; var othersYour ; begin
16966: LD_INT 0
16968: PPUSH
16969: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16970: LD_EXP 59
16974: PPUSH
16975: LD_STRING Burlak
16977: PPUSH
16978: LD_INT 3
16980: PPUSH
16981: CALL 3802 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
16985: LD_EXP 60
16989: PPUSH
16990: LD_STRING Gnyevko
16992: PPUSH
16993: LD_INT 3
16995: PPUSH
16996: CALL 3802 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
17000: LD_EXP 67
17004: PPUSH
17005: LD_STRING Kovalyuk
17007: PPUSH
17008: LD_INT 3
17010: PPUSH
17011: CALL 3802 0 3
// if belkovReturn then
17015: LD_EXP 6
17019: IFFALSE 17038
// ExtSaveCharacter ( Belkov , Belkov , 3 ) else
17021: LD_EXP 61
17025: PPUSH
17026: LD_STRING Belkov
17028: PPUSH
17029: LD_INT 3
17031: PPUSH
17032: CALL 3802 0 3
17036: GO 17053
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
17038: LD_EXP 65
17042: PPUSH
17043: LD_STRING Belkov2
17045: PPUSH
17046: LD_INT 3
17048: PPUSH
17049: CALL 3802 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk ] ;
17053: LD_ADDR_VAR 0 2
17057: PUSH
17058: LD_INT 22
17060: PUSH
17061: LD_INT 3
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 21
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PPUSH
17082: CALL_OW 69
17086: PUSH
17087: LD_EXP 59
17091: PUSH
17092: LD_EXP 60
17096: PUSH
17097: LD_EXP 61
17101: PUSH
17102: LD_EXP 65
17106: PUSH
17107: LD_EXP 67
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: DIFF
17119: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
17120: LD_VAR 0 2
17124: PPUSH
17125: LD_STRING other_survivors
17127: PPUSH
17128: LD_INT 3
17130: PPUSH
17131: CALL 3858 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
17135: LD_EXP 74
17139: PPUSH
17140: LD_STRING other_beria
17142: PPUSH
17143: LD_INT 6
17145: PPUSH
17146: CALL 3858 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
17150: LD_EXP 66
17154: PPUSH
17155: LD_STRING other_kirov
17157: PPUSH
17158: LD_INT 6
17160: PPUSH
17161: CALL 3858 0 3
// end ;
17165: LD_VAR 0 1
17169: RET
// function SaveGlobalVariables ; var vehicles ; begin
17170: LD_INT 0
17172: PPUSH
17173: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
17174: LD_ADDR_VAR 0 2
17178: PUSH
17179: LD_INT 22
17181: PUSH
17182: LD_INT 3
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 21
17191: PUSH
17192: LD_INT 2
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 50
17201: PUSH
17202: EMPTY
17203: LIST
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: ST_TO_ADDR
// if vehicles then
17215: LD_VAR 0 2
17219: IFFALSE 17233
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
17221: LD_VAR 0 2
17225: PPUSH
17226: LD_STRING 02_Vehicles_1
17228: PPUSH
17229: CALL 4762 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
17233: LD_INT 8
17235: PPUSH
17236: LD_INT 21
17238: PUSH
17239: LD_INT 3
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: EMPTY
17247: LIST
17248: PPUSH
17249: CALL_OW 70
17253: PPUSH
17254: LD_STRING 02_BeriaBase_2
17256: PPUSH
17257: CALL 4905 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
17261: LD_INT 9
17263: PPUSH
17264: LD_INT 22
17266: PUSH
17267: LD_INT 6
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PPUSH
17288: CALL_OW 70
17292: PPUSH
17293: LD_STRING 02_KirovBase_3
17295: PPUSH
17296: CALL 4905 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
17300: LD_INT 22
17302: PUSH
17303: LD_INT 3
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 21
17312: PUSH
17313: LD_INT 3
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 50
17322: PUSH
17323: EMPTY
17324: LIST
17325: PUSH
17326: LD_INT 3
17328: PUSH
17329: LD_INT 95
17331: PUSH
17332: LD_INT 8
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: PPUSH
17349: CALL_OW 69
17353: PPUSH
17354: LD_STRING 02_OtherBuildings_4
17356: PPUSH
17357: CALL 4905 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
17361: LD_INT 22
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 21
17373: PUSH
17374: LD_INT 3
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 50
17383: PUSH
17384: EMPTY
17385: LIST
17386: PUSH
17387: LD_INT 23
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: PPUSH
17403: CALL_OW 69
17407: PPUSH
17408: LD_STRING 02_AmericanBuildings_5
17410: PPUSH
17411: CALL 4905 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
17415: LD_EXP 4
17419: PPUSH
17420: LD_STRING 02_MeetBelkovBrother_6
17422: PPUSH
17423: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
17427: LD_INT 106
17429: PPUSH
17430: CALL_OW 274
17434: PPUSH
17435: LD_INT 1
17437: PPUSH
17438: CALL_OW 275
17442: PPUSH
17443: LD_STRING 02_BeriaResourceCrates_7
17445: PPUSH
17446: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
17450: LD_INT 106
17452: PPUSH
17453: CALL_OW 274
17457: PPUSH
17458: LD_INT 2
17460: PPUSH
17461: CALL_OW 275
17465: PPUSH
17466: LD_STRING 02_BeriaResourceOil_8
17468: PPUSH
17469: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
17473: LD_EXP 5
17477: PPUSH
17478: LD_STRING 02_PlatonovOpinion_9
17480: PPUSH
17481: CALL_OW 39
// end ; end_of_file
17485: LD_VAR 0 1
17489: RET
// export function BurlakIsDead ; begin
17490: LD_INT 0
17492: PPUSH
// YouLost ( Burlak ) ;
17493: LD_STRING Burlak
17495: PPUSH
17496: CALL_OW 104
// end ;
17500: LD_VAR 0 1
17504: RET
// export function AttackComrades ; begin
17505: LD_INT 0
17507: PPUSH
// YouLost ( SelfAttack ) ;
17508: LD_STRING SelfAttack
17510: PPUSH
17511: CALL_OW 104
// end ; end_of_file
17515: LD_VAR 0 1
17519: RET
// every 0 0$1 do var engs ;
17520: GO 17522
17522: DISABLE
17523: LD_INT 0
17525: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
17526: LD_ADDR_VAR 0 1
17530: PUSH
17531: LD_EXP 66
17535: PPUSH
17536: LD_INT 25
17538: PUSH
17539: LD_INT 2
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PPUSH
17546: CALL_OW 72
17550: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
17551: LD_VAR 0 1
17555: PPUSH
17556: CALL_OW 122
// wait ( 0 0$1 ) ;
17560: LD_INT 35
17562: PPUSH
17563: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 144 , 96 , 1 ) ;
17567: LD_VAR 0 1
17571: PPUSH
17572: LD_INT 31
17574: PPUSH
17575: LD_INT 144
17577: PPUSH
17578: LD_INT 96
17580: PPUSH
17581: LD_INT 1
17583: PPUSH
17584: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
17588: LD_VAR 0 1
17592: PPUSH
17593: LD_INT 31
17595: PPUSH
17596: LD_INT 146
17598: PPUSH
17599: LD_INT 107
17601: PPUSH
17602: LD_INT 1
17604: PPUSH
17605: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 180 , 118 , 5 ) ;
17609: LD_VAR 0 1
17613: PPUSH
17614: LD_INT 31
17616: PPUSH
17617: LD_INT 180
17619: PPUSH
17620: LD_INT 118
17622: PPUSH
17623: LD_INT 5
17625: PPUSH
17626: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
17630: LD_VAR 0 1
17634: PPUSH
17635: LD_INT 31
17637: PPUSH
17638: LD_INT 176
17640: PPUSH
17641: LD_INT 123
17643: PPUSH
17644: LD_INT 5
17646: PPUSH
17647: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
17651: LD_VAR 0 1
17655: PPUSH
17656: LD_INT 31
17658: PPUSH
17659: LD_INT 170
17661: PPUSH
17662: LD_INT 102
17664: PPUSH
17665: LD_INT 4
17667: PPUSH
17668: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
17672: LD_VAR 0 1
17676: PPUSH
17677: LD_INT 31
17679: PPUSH
17680: LD_INT 173
17682: PPUSH
17683: LD_INT 105
17685: PPUSH
17686: LD_INT 4
17688: PPUSH
17689: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
17693: LD_VAR 0 1
17697: PPUSH
17698: LD_INT 71
17700: PPUSH
17701: CALL_OW 180
// end ;
17705: PPOPN 1
17707: END
// every 0 0$1 trigger activateAMAI do
17708: LD_EXP 26
17712: IFFALSE 17736
17714: GO 17716
17716: DISABLE
// begin enable ;
17717: ENABLE
// RepairDamageLeftBunkers ;
17718: CALL 17737 0 0
// if Difficulty = 3 then
17722: LD_OWVAR 67
17726: PUSH
17727: LD_INT 3
17729: EQUAL
17730: IFFALSE 17736
// RepairDamageRightBunkers ;
17732: CALL 17945 0 0
// end ;
17736: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
17737: LD_INT 0
17739: PPUSH
17740: PPUSH
17741: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
17742: LD_EXP 83
17746: NOT
17747: PUSH
17748: LD_INT 17
17750: PPUSH
17751: LD_INT 22
17753: PUSH
17754: LD_INT 1
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 21
17763: PUSH
17764: LD_INT 3
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 30
17773: PUSH
17774: LD_INT 31
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 3
17783: PUSH
17784: LD_INT 24
17786: PUSH
17787: LD_INT 1000
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: PPUSH
17804: CALL_OW 70
17808: PUSH
17809: LD_INT 0
17811: EQUAL
17812: OR
17813: IFFALSE 17817
// exit ;
17815: GO 17940
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
17817: LD_EXP 83
17821: PPUSH
17822: LD_INT 3
17824: PUSH
17825: LD_INT 60
17827: PUSH
17828: EMPTY
17829: LIST
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PPUSH
17835: CALL_OW 72
17839: PPUSH
17840: CALL_OW 122
// for bunker in leftBunkers do
17844: LD_ADDR_VAR 0 3
17848: PUSH
17849: LD_EXP 79
17853: PUSH
17854: FOR_IN
17855: IFFALSE 17906
// if GetLives ( bunker ) < 1000 then
17857: LD_VAR 0 3
17861: PPUSH
17862: CALL_OW 256
17866: PUSH
17867: LD_INT 1000
17869: LESS
17870: IFFALSE 17904
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
17872: LD_EXP 83
17876: PPUSH
17877: LD_INT 3
17879: PUSH
17880: LD_INT 60
17882: PUSH
17883: EMPTY
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PPUSH
17890: CALL_OW 72
17894: PPUSH
17895: LD_VAR 0 3
17899: PPUSH
17900: CALL_OW 190
17904: GO 17854
17906: POP
17907: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
17908: LD_EXP 83
17912: PPUSH
17913: LD_INT 3
17915: PUSH
17916: LD_INT 60
17918: PUSH
17919: EMPTY
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PPUSH
17926: CALL_OW 72
17930: PPUSH
17931: LD_EXP 81
17935: PPUSH
17936: CALL_OW 180
// end ;
17940: LD_VAR 0 1
17944: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
17945: LD_INT 0
17947: PPUSH
17948: PPUSH
17949: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
17950: LD_EXP 84
17954: NOT
17955: PUSH
17956: LD_INT 16
17958: PPUSH
17959: LD_INT 22
17961: PUSH
17962: LD_INT 1
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 21
17971: PUSH
17972: LD_INT 3
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 30
17981: PUSH
17982: LD_INT 31
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 3
17991: PUSH
17992: LD_INT 24
17994: PUSH
17995: LD_INT 1000
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: PPUSH
18012: CALL_OW 70
18016: PUSH
18017: LD_INT 0
18019: EQUAL
18020: OR
18021: IFFALSE 18025
// exit ;
18023: GO 18148
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
18025: LD_EXP 84
18029: PPUSH
18030: LD_INT 3
18032: PUSH
18033: LD_INT 60
18035: PUSH
18036: EMPTY
18037: LIST
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PPUSH
18043: CALL_OW 72
18047: PPUSH
18048: CALL_OW 122
// for bunker in rightBunkers do
18052: LD_ADDR_VAR 0 3
18056: PUSH
18057: LD_EXP 80
18061: PUSH
18062: FOR_IN
18063: IFFALSE 18114
// if GetLives ( bunker ) < 1000 then
18065: LD_VAR 0 3
18069: PPUSH
18070: CALL_OW 256
18074: PUSH
18075: LD_INT 1000
18077: LESS
18078: IFFALSE 18112
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
18080: LD_EXP 84
18084: PPUSH
18085: LD_INT 3
18087: PUSH
18088: LD_INT 60
18090: PUSH
18091: EMPTY
18092: LIST
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PPUSH
18098: CALL_OW 72
18102: PPUSH
18103: LD_VAR 0 3
18107: PPUSH
18108: CALL_OW 190
18112: GO 18062
18114: POP
18115: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
18116: LD_EXP 84
18120: PPUSH
18121: LD_INT 3
18123: PUSH
18124: LD_INT 60
18126: PUSH
18127: EMPTY
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 72
18138: PPUSH
18139: LD_EXP 82
18143: PPUSH
18144: CALL_OW 180
// end ;
18148: LD_VAR 0 1
18152: RET
