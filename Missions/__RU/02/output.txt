// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 51311 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5840 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := 1 ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 57786 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 57786 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16932 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16932 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16932 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16932 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1670
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_EXP 43
1461: PPUSH
1462: LD_INT 25
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 72
1476: ST_TO_ADDR
// if not tmp then
1477: LD_VAR 0 1
1481: NOT
1482: IFFALSE 1486
// exit ;
1484: GO 1670
// wait ( 0 0$5 ) ;
1486: LD_INT 175
1488: PPUSH
1489: CALL_OW 67
// ComExit ( tmp ) ;
1493: LD_VAR 0 1
1497: PPUSH
1498: CALL 55032 0 1
// for i := 1 to 2 do
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: DOUBLE
1508: LD_INT 1
1510: DEC
1511: ST_TO_ADDR
1512: LD_INT 2
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1559
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1518: LD_VAR 0 1
1522: PPUSH
1523: LD_INT 71
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1533: LD_VAR 0 1
1537: PPUSH
1538: LD_INT 121
1540: PPUSH
1541: LD_INT 111
1543: PPUSH
1544: CALL_OW 171
// AddComUnload ( tmp ) ;
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 219
// end ;
1557: GO 1515
1559: POP
1560: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1561: LD_VAR 0 1
1565: PPUSH
1566: LD_INT 2
1568: PPUSH
1569: LD_INT 113
1571: PPUSH
1572: LD_INT 113
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1582: LD_INT 83
1584: PPUSH
1585: LD_INT 46
1587: PPUSH
1588: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1592: LD_INT 83
1594: PPUSH
1595: LD_INT 47
1597: PPUSH
1598: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1602: LD_INT 83
1604: PPUSH
1605: LD_INT 48
1607: PPUSH
1608: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1612: LD_VAR 0 1
1616: PPUSH
1617: LD_INT 26
1619: PPUSH
1620: LD_INT 116
1622: PPUSH
1623: LD_INT 98
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1633: LD_INT 35
1635: PPUSH
1636: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1640: LD_VAR 0 1
1644: PPUSH
1645: LD_INT 60
1647: PUSH
1648: EMPTY
1649: LIST
1650: PPUSH
1651: CALL_OW 72
1655: NOT
1656: IFFALSE 1633
// ComEnterUnit ( tmp , kirov ) ;
1658: LD_VAR 0 1
1662: PPUSH
1663: LD_INT 71
1665: PPUSH
1666: CALL_OW 120
// end ;
1670: PPOPN 2
1672: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1673: LD_INT 0
1675: PPUSH
1676: PPUSH
1677: PPUSH
1678: PPUSH
1679: PPUSH
1680: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1681: LD_ADDR_VAR 0 3
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 6
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 21
1698: PUSH
1699: LD_INT 2
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PPUSH
1710: CALL_OW 69
1714: ST_TO_ADDR
// if not belkovTank then
1715: LD_VAR 0 3
1719: NOT
1720: IFFALSE 1813
// begin uc_side := 6 ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_INT 6
1729: ST_TO_ADDR
// uc_nation := 3 ;
1730: LD_ADDR_OWVAR 21
1734: PUSH
1735: LD_INT 3
1737: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1738: LD_INT 21
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 1
1746: PPUSH
1747: LD_INT 42
1749: PPUSH
1750: LD_INT 100
1752: PPUSH
1753: CALL 21772 0 5
// belkovTank := CreateVehicle ;
1757: LD_ADDR_VAR 0 3
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 5
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1779: LD_VAR 0 3
1783: PPUSH
1784: LD_INT 127
1786: PPUSH
1787: LD_INT 118
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1797: LD_EXP 36
1801: PPUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 120
// end else
1811: GO 1827
// begin belkovTank := belkovTank [ 1 ] ;
1813: LD_ADDR_VAR 0 3
1817: PUSH
1818: LD_VAR 0 3
1822: PUSH
1823: LD_INT 1
1825: ARRAY
1826: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 71
1834: PPUSH
1835: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1839: LD_VAR 0 3
1843: PPUSH
1844: LD_INT 71
1846: PPUSH
1847: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 256
1860: PUSH
1861: LD_INT 1000
1863: LESS
1864: IFFALSE 1977
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1866: LD_ADDR_VAR 0 4
1870: PUSH
1871: LD_EXP 43
1875: PPUSH
1876: LD_INT 25
1878: PUSH
1879: LD_INT 3
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PPUSH
1886: CALL_OW 72
1890: ST_TO_ADDR
// if not mech then
1891: LD_VAR 0 4
1895: NOT
1896: IFFALSE 1912
// SetLives ( belkovTank , 1000 ) else
1898: LD_VAR 0 3
1902: PPUSH
1903: LD_INT 1000
1905: PPUSH
1906: CALL_OW 234
1910: GO 1977
// begin ComExit ( mech ) ;
1912: LD_VAR 0 4
1916: PPUSH
1917: CALL 55032 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1921: LD_VAR 0 4
1925: PPUSH
1926: LD_VAR 0 3
1930: PPUSH
1931: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1935: LD_VAR 0 4
1939: PPUSH
1940: LD_INT 22
1942: PUSH
1943: LD_INT 6
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: PUSH
1950: LD_INT 30
1952: PUSH
1953: LD_INT 2
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 69
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1977: LD_INT 70
1979: PPUSH
1980: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1984: LD_VAR 0 3
1988: PPUSH
1989: CALL_OW 256
1993: PUSH
1994: LD_INT 1000
1996: EQUAL
1997: IFFALSE 1977
// if mech then
1999: LD_VAR 0 4
2003: IFFALSE 2047
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 6
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 30
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2047: LD_EXP 36
2051: PPUSH
2052: LD_INT 107
2054: PPUSH
2055: LD_INT 104
2057: PPUSH
2058: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2062: LD_EXP 36
2066: PPUSH
2067: LD_INT 95
2069: PPUSH
2070: LD_INT 101
2072: PPUSH
2073: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2077: LD_EXP 36
2081: PPUSH
2082: LD_INT 89
2084: PPUSH
2085: LD_INT 100
2087: PPUSH
2088: CALL_OW 171
// wait ( 0 0$2 ) ;
2092: LD_INT 70
2094: PPUSH
2095: CALL_OW 67
// for i in belkovTeam do
2099: LD_ADDR_VAR 0 2
2103: PUSH
2104: LD_EXP 45
2108: PUSH
2109: FOR_IN
2110: IFFALSE 2138
// begin ComExit ( i ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: CALL 55032 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: LD_INT 89
2128: PPUSH
2129: LD_INT 100
2131: PPUSH
2132: CALL_OW 171
// end ;
2136: GO 2109
2138: POP
2139: POP
// tmp := Belkov union belkovTeam ;
2140: LD_ADDR_VAR 0 5
2144: PUSH
2145: LD_EXP 36
2149: PUSH
2150: LD_EXP 45
2154: UNION
2155: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2156: LD_INT 35
2158: PPUSH
2159: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2163: LD_VAR 0 5
2167: PPUSH
2168: LD_INT 60
2170: PUSH
2171: EMPTY
2172: LIST
2173: PPUSH
2174: CALL_OW 72
2178: NOT
2179: IFFALSE 2156
// ComMoveXY ( tmp , 71 , 65 ) ;
2181: LD_VAR 0 5
2185: PPUSH
2186: LD_INT 71
2188: PPUSH
2189: LD_INT 65
2191: PPUSH
2192: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2196: LD_VAR 0 5
2200: PPUSH
2201: LD_INT 61
2203: PPUSH
2204: LD_INT 37
2206: PPUSH
2207: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2211: LD_VAR 0 5
2215: PPUSH
2216: LD_INT 67
2218: PPUSH
2219: LD_INT 17
2221: PPUSH
2222: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2226: LD_VAR 0 5
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2238: LD_EXP 36
2242: PPUSH
2243: LD_INT 63
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2253: LD_EXP 36
2257: PPUSH
2258: LD_INT 105
2260: PPUSH
2261: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2265: LD_EXP 36
2269: PPUSH
2270: LD_INT 86
2272: PPUSH
2273: LD_INT 37
2275: PPUSH
2276: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2280: LD_EXP 36
2284: PPUSH
2285: LD_INT 105
2287: PPUSH
2288: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2292: LD_VAR 0 5
2296: PPUSH
2297: LD_INT 88
2299: PPUSH
2300: LD_INT 29
2302: PPUSH
2303: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2307: LD_INT 35
2309: PPUSH
2310: CALL_OW 67
// for i in tmp do
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 5
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2356
// if not HasTask ( i ) then
2327: LD_VAR 0 2
2331: PPUSH
2332: CALL_OW 314
2336: NOT
2337: IFFALSE 2354
// AddComMoveXY ( tmp , 88 , 29 ) ;
2339: LD_VAR 0 5
2343: PPUSH
2344: LD_INT 88
2346: PPUSH
2347: LD_INT 29
2349: PPUSH
2350: CALL_OW 171
2354: GO 2324
2356: POP
2357: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2358: LD_VAR 0 5
2362: PPUSH
2363: LD_INT 95
2365: PUSH
2366: LD_INT 6
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PPUSH
2373: CALL_OW 72
2377: IFFALSE 2471
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2379: LD_ADDR_VAR 0 2
2383: PUSH
2384: LD_VAR 0 5
2388: PPUSH
2389: LD_INT 95
2391: PUSH
2392: LD_INT 6
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PPUSH
2399: CALL_OW 72
2403: PUSH
2404: FOR_IN
2405: IFFALSE 2469
// begin if i = Belkov then
2407: LD_VAR 0 2
2411: PUSH
2412: LD_EXP 36
2416: EQUAL
2417: IFFALSE 2458
// begin belkovTank := IsInUnit ( Belkov ) ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_EXP 36
2428: PPUSH
2429: CALL_OW 310
2433: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2434: LD_ADDR_VAR 0 6
2438: PUSH
2439: LD_VAR 0 3
2443: PPUSH
2444: CALL_OW 261
2448: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2449: LD_VAR 0 3
2453: PPUSH
2454: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: CALL_OW 64
// end ;
2467: GO 2404
2469: POP
2470: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2471: LD_VAR 0 5
2475: PPUSH
2476: LD_INT 52
2478: PUSH
2479: EMPTY
2480: LIST
2481: PPUSH
2482: CALL_OW 72
2486: NOT
2487: IFFALSE 2307
// wait ( 1 1$20 ) ;
2489: LD_INT 2800
2491: PPUSH
2492: CALL_OW 67
// if fuel < 50 then
2496: LD_VAR 0 6
2500: PUSH
2501: LD_INT 50
2503: LESS
2504: IFFALSE 2514
// fuel := 50 ;
2506: LD_ADDR_VAR 0 6
2510: PUSH
2511: LD_INT 50
2513: ST_TO_ADDR
// uc_side := 6 ;
2514: LD_ADDR_OWVAR 20
2518: PUSH
2519: LD_INT 6
2521: ST_TO_ADDR
// uc_nation := 3 ;
2522: LD_ADDR_OWVAR 21
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2530: LD_INT 21
2532: PPUSH
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: LD_INT 42
2541: PPUSH
2542: LD_VAR 0 6
2546: PUSH
2547: LD_INT 5
2549: MINUS
2550: PPUSH
2551: CALL 21772 0 5
// belkovTank := CreateVehicle ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 45
2564: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2577: LD_VAR 0 3
2581: PPUSH
2582: LD_INT 60
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2595: LD_EXP 36
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2609: LD_EXP 36
2613: PPUSH
2614: LD_INT 72
2616: PPUSH
2617: LD_INT 26
2619: PPUSH
2620: CALL_OW 111
// wait ( 0 0$2 ) ;
2624: LD_INT 70
2626: PPUSH
2627: CALL_OW 67
// for i in belkovTeam do
2631: LD_ADDR_VAR 0 2
2635: PUSH
2636: LD_EXP 45
2640: PUSH
2641: FOR_IN
2642: IFFALSE 2686
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2644: LD_VAR 0 2
2648: PPUSH
2649: LD_INT 60
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 0
2657: PPUSH
2658: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_INT 65
2669: PPUSH
2670: LD_INT 18
2672: PPUSH
2673: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2677: LD_INT 28
2679: PPUSH
2680: CALL_OW 67
// end ;
2684: GO 2641
2686: POP
2687: POP
// repeat wait ( 0 0$1 ) ;
2688: LD_INT 35
2690: PPUSH
2691: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2695: LD_EXP 14
2699: PUSH
2700: LD_EXP 45
2704: PPUSH
2705: LD_INT 60
2707: PUSH
2708: EMPTY
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: NOT
2716: AND
2717: IFFALSE 2688
// americanTrap := true ;
2719: LD_ADDR_EXP 17
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// end ;
2727: LD_VAR 0 1
2731: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2732: LD_EXP 4
2736: PUSH
2737: LD_EXP 40
2741: PPUSH
2742: CALL_OW 302
2746: AND
2747: IFFALSE 3067
2749: GO 2751
2751: DISABLE
2752: LD_INT 0
2754: PPUSH
2755: PPUSH
2756: PPUSH
2757: PPUSH
// begin enable ;
2758: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2759: LD_EXP 8
2763: PUSH
2764: LD_INT 0
2766: GREATER
2767: PUSH
2768: LD_EXP 40
2772: PPUSH
2773: CALL_OW 314
2777: NOT
2778: AND
2779: IFFALSE 2948
// begin dir := rand ( 0 , 5 ) ;
2781: LD_ADDR_VAR 0 4
2785: PUSH
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 5
2791: PPUSH
2792: CALL_OW 12
2796: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2797: LD_ADDR_VAR 0 1
2801: PUSH
2802: LD_EXP 40
2806: PPUSH
2807: CALL_OW 250
2811: PPUSH
2812: LD_VAR 0 4
2816: PPUSH
2817: LD_INT 5
2819: PPUSH
2820: CALL_OW 272
2824: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2825: LD_ADDR_VAR 0 2
2829: PUSH
2830: LD_EXP 40
2834: PPUSH
2835: CALL_OW 251
2839: PPUSH
2840: LD_VAR 0 4
2844: PPUSH
2845: LD_INT 5
2847: PPUSH
2848: CALL_OW 273
2852: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2853: LD_VAR 0 1
2857: PPUSH
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 488
2867: PUSH
2868: LD_INT 106
2870: PPUSH
2871: LD_VAR 0 1
2875: PPUSH
2876: LD_VAR 0 2
2880: PPUSH
2881: CALL_OW 297
2885: PUSH
2886: LD_INT 26
2888: LESS
2889: AND
2890: IFFALSE 2913
// AddComMoveXY ( Platonov , x , y ) else
2892: LD_EXP 40
2896: PPUSH
2897: LD_VAR 0 1
2901: PPUSH
2902: LD_VAR 0 2
2906: PPUSH
2907: CALL_OW 171
2911: GO 2928
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2913: LD_EXP 40
2917: PPUSH
2918: LD_INT 64
2920: PPUSH
2921: LD_INT 96
2923: PPUSH
2924: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2928: LD_EXP 40
2932: PPUSH
2933: LD_INT 105
2935: PPUSH
2936: LD_INT 315
2938: PPUSH
2939: CALL_OW 12
2943: PPUSH
2944: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2948: LD_EXP 8
2952: PUSH
2953: LD_INT 0
2955: LESSEQUAL
2956: IFFALSE 3002
// begin if not IsAt ( Platonov , 64 , 96 ) then
2958: LD_EXP 40
2962: PPUSH
2963: LD_INT 64
2965: PPUSH
2966: LD_INT 96
2968: PPUSH
2969: CALL_OW 307
2973: NOT
2974: IFFALSE 3000
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2976: LD_EXP 40
2980: PPUSH
2981: LD_INT 64
2983: PPUSH
2984: LD_INT 96
2986: PPUSH
2987: CALL_OW 111
// AddComHold ( Platonov ) ;
2991: LD_EXP 40
2995: PPUSH
2996: CALL_OW 200
// end ; end else
3000: GO 3067
// if tick mod 0 0$75 = 0 0$00 then
3002: LD_OWVAR 1
3006: PUSH
3007: LD_INT 2625
3009: MOD
3010: PUSH
3011: LD_INT 0
3013: EQUAL
3014: IFFALSE 3067
// begin amount := rand ( 2 , 5 ) ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: LD_INT 2
3023: PPUSH
3024: LD_INT 5
3026: PPUSH
3027: CALL_OW 12
3031: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_EXP 8
3041: PUSH
3042: LD_VAR 0 3
3046: PUSH
3047: LD_INT 10
3049: MUL
3050: MINUS
3051: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 55
// end ; end ;
3067: PPOPN 4
3069: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3070: LD_INT 106
3072: PPUSH
3073: CALL_OW 274
3077: PPUSH
3078: LD_INT 2
3080: PPUSH
3081: CALL_OW 275
3085: PUSH
3086: LD_INT 30
3088: LESS
3089: IFFALSE 3299
3091: GO 3093
3093: DISABLE
3094: LD_INT 0
3096: PPUSH
3097: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3098: LD_ADDR_VAR 0 2
3102: PUSH
3103: LD_EXP 43
3107: PPUSH
3108: LD_INT 3
3110: PUSH
3111: LD_INT 60
3113: PUSH
3114: EMPTY
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 2
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 72
3139: ST_TO_ADDR
// if not eng then
3140: LD_VAR 0 2
3144: NOT
3145: IFFALSE 3149
// exit ;
3147: GO 3299
// ComExit ( eng ) ;
3149: LD_VAR 0 2
3153: PPUSH
3154: CALL 55032 0 1
// i := 5 ;
3158: LD_ADDR_VAR 0 1
3162: PUSH
3163: LD_INT 5
3165: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3166: LD_INT 35
3168: PPUSH
3169: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: NOT
3189: PUSH
3190: LD_VAR 0 2
3194: AND
3195: IFFALSE 3265
// begin ComTransport ( eng , kirov , mat_oil ) ;
3197: LD_VAR 0 2
3201: PPUSH
3202: LD_INT 71
3204: PPUSH
3205: LD_INT 2
3207: PPUSH
3208: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3212: LD_VAR 0 2
3216: PPUSH
3217: LD_INT 67
3219: PPUSH
3220: LD_INT 99
3222: PPUSH
3223: CALL_OW 171
// AddComUnload ( eng ) ;
3227: LD_VAR 0 2
3231: PPUSH
3232: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 107
3243: PPUSH
3244: LD_INT 104
3246: PPUSH
3247: CALL_OW 171
// i := i - 1 ;
3251: LD_ADDR_VAR 0 1
3255: PUSH
3256: LD_VAR 0 1
3260: PUSH
3261: LD_INT 1
3263: MINUS
3264: ST_TO_ADDR
// end ; until i = 0 ;
3265: LD_VAR 0 1
3269: PUSH
3270: LD_INT 0
3272: EQUAL
3273: IFFALSE 3166
// AddComMoveUnit ( eng , kirov ) ;
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 71
3282: PPUSH
3283: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3287: LD_VAR 0 2
3291: PPUSH
3292: LD_INT 71
3294: PPUSH
3295: CALL_OW 180
// end ;
3299: PPOPN 2
3301: END
// export function SendReinforcements ; var i ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
// reinforcementsGained := true ;
3306: LD_ADDR_EXP 25
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// for i := 1 to 2 do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: DOUBLE
3320: LD_INT 1
3322: DEC
3323: ST_TO_ADDR
3324: LD_INT 2
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3410
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3330: LD_EXP 44
3334: PUSH
3335: LD_VAR 0 2
3339: ARRAY
3340: PPUSH
3341: CALL 55032 0 1
3345: IFFALSE 3354
// wait ( 0 0$0.3 ) ;
3347: LD_INT 10
3349: PPUSH
3350: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3354: LD_EXP 44
3358: PUSH
3359: LD_VAR 0 2
3363: ARRAY
3364: PPUSH
3365: LD_INT 75
3367: PPUSH
3368: LD_INT 84
3370: PPUSH
3371: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3375: LD_EXP 44
3379: PUSH
3380: LD_VAR 0 2
3384: ARRAY
3385: PPUSH
3386: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3390: LD_EXP 44
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 3
3403: PPUSH
3404: CALL_OW 235
// end ;
3408: GO 3327
3410: POP
3411: POP
// end ;
3412: LD_VAR 0 1
3416: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3417: LD_EXP 21
3421: PUSH
3422: LD_EXP 18
3426: AND
3427: PUSH
3428: LD_EXP 43
3432: PPUSH
3433: LD_INT 25
3435: PUSH
3436: LD_INT 3
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 72
3447: AND
3448: IFFALSE 3605
3450: GO 3452
3452: DISABLE
3453: LD_INT 0
3455: PPUSH
3456: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3457: LD_ADDR_VAR 0 1
3461: PUSH
3462: LD_EXP 43
3466: PPUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 72
3481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 22
3489: PUSH
3490: LD_INT 6
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 30
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: ST_TO_ADDR
// if not fac then
3516: LD_VAR 0 2
3520: NOT
3521: IFFALSE 3525
// exit ;
3523: GO 3605
// fac := fac [ 1 ] ;
3525: LD_ADDR_VAR 0 2
3529: PUSH
3530: LD_VAR 0 2
3534: PUSH
3535: LD_INT 1
3537: ARRAY
3538: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3539: LD_VAR 0 2
3543: PPUSH
3544: CALL_OW 313
3548: PUSH
3549: LD_INT 0
3551: EQUAL
3552: IFFALSE 3584
// begin ComExit ( mech ) ;
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL 55032 0 1
// wait ( 3 ) ;
3563: LD_INT 3
3565: PPUSH
3566: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_VAR 0 2
3579: PPUSH
3580: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3584: LD_VAR 0 2
3588: PPUSH
3589: LD_INT 21
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 1
3597: PPUSH
3598: LD_INT 42
3600: PPUSH
3601: CALL_OW 125
// end ;
3605: PPOPN 2
3607: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3608: LD_INT 0
3610: PPUSH
3611: PPUSH
3612: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: LD_INT 90
3620: PPUSH
3621: LD_INT 100
3623: PPUSH
3624: CALL_OW 111
// wait ( 0 0$10 ) ;
3628: LD_INT 350
3630: PPUSH
3631: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3635: LD_VAR 0 1
3639: PPUSH
3640: LD_INT 0
3642: PPUSH
3643: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3654: LD_ADDR_VAR 0 4
3658: PUSH
3659: LD_VAR 0 1
3663: PPUSH
3664: CALL_OW 110
3668: ST_TO_ADDR
// if tag = 0 then
3669: LD_VAR 0 4
3673: PUSH
3674: LD_INT 0
3676: EQUAL
3677: IFFALSE 3748
// begin if not HasTask ( vehicle ) then
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL_OW 314
3688: NOT
3689: IFFALSE 3706
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3691: LD_VAR 0 1
3695: PPUSH
3696: LD_INT 83
3698: PPUSH
3699: LD_INT 68
3701: PPUSH
3702: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3706: LD_VAR 0 1
3710: PPUSH
3711: CALL_OW 256
3715: PUSH
3716: LD_INT 750
3718: LESS
3719: IFFALSE 3748
// begin SetTag ( vehicle , 1 ) ;
3721: LD_VAR 0 1
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 93
3740: PPUSH
3741: LD_INT 102
3743: PPUSH
3744: CALL_OW 111
// end ; end ; if tag = 1 then
3748: LD_VAR 0 4
3752: PUSH
3753: LD_INT 1
3755: EQUAL
3756: IFFALSE 3846
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3758: LD_VAR 0 1
3762: PPUSH
3763: LD_INT 113
3765: PPUSH
3766: LD_INT 106
3768: PPUSH
3769: CALL_OW 307
3773: NOT
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: CALL_OW 314
3784: NOT
3785: AND
3786: IFFALSE 3803
// ComMoveXY ( vehicle , 113 , 106 ) ;
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_INT 113
3795: PPUSH
3796: LD_INT 106
3798: PPUSH
3799: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3803: LD_VAR 0 1
3807: PPUSH
3808: LD_INT 113
3810: PPUSH
3811: LD_INT 106
3813: PPUSH
3814: CALL_OW 307
3818: IFFALSE 3846
// begin SetTag ( vehicle , 2 ) ;
3820: LD_VAR 0 1
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3832: LD_VAR 0 1
3836: PPUSH
3837: CALL_OW 311
3841: PPUSH
3842: CALL 56334 0 1
// end ; end ; if tag = 2 then
3846: LD_VAR 0 4
3850: PUSH
3851: LD_INT 2
3853: EQUAL
3854: IFFALSE 3918
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3856: LD_VAR 0 1
3860: PPUSH
3861: CALL_OW 256
3865: PUSH
3866: LD_INT 1000
3868: EQUAL
3869: PUSH
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 311
3879: AND
3880: IFFALSE 3918
// begin ComMoveUnit ( vehicle , kirov ) ;
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 71
3889: PPUSH
3890: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_INT 71
3901: PPUSH
3902: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3906: LD_VAR 0 1
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 301
3927: PUSH
3928: LD_EXP 23
3932: OR
3933: IFFALSE 3647
// if eastOutpostDestroyed then
3935: LD_EXP 23
3939: IFFALSE 3956
// ComMoveXY ( vehicle , 111 , 105 ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 111
3948: PPUSH
3949: LD_INT 105
3951: PPUSH
3952: CALL_OW 111
// end ; end_of_file
3956: LD_VAR 0 2
3960: RET
// export usWestForces , usEastForces , usTrapForces ; export function PrepareAmerican ; var i , un , tmp ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
// uc_side := 1 ;
3967: LD_ADDR_OWVAR 20
3971: PUSH
3972: LD_INT 1
3974: ST_TO_ADDR
// uc_nation := 1 ;
3975: LD_ADDR_OWVAR 21
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// usWestForces := [ ] ;
3983: LD_ADDR_EXP 46
3987: PUSH
3988: EMPTY
3989: ST_TO_ADDR
// usEastForces := [ ] ;
3990: LD_ADDR_EXP 47
3994: PUSH
3995: EMPTY
3996: ST_TO_ADDR
// bc_type := b_depot ;
3997: LD_ADDR_OWVAR 42
4001: PUSH
4002: LD_INT 0
4004: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4005: LD_ADDR_OWVAR 43
4009: PUSH
4010: LD_OWVAR 67
4014: PUSH
4015: LD_INT 1
4017: MINUS
4018: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4019: LD_INT 48
4021: PPUSH
4022: LD_INT 54
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4032: LD_ADDR_VAR 0 4
4036: PUSH
4037: LD_INT 55
4039: PUSH
4040: LD_INT 55
4042: PUSH
4043: LD_INT 4
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 59
4053: PUSH
4054: LD_INT 61
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: ST_TO_ADDR
// if Difficulty > 1 then
4069: LD_OWVAR 67
4073: PUSH
4074: LD_INT 1
4076: GREATER
4077: IFFALSE 4113
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4079: LD_ADDR_VAR 0 4
4083: PUSH
4084: LD_VAR 0 4
4088: PPUSH
4089: LD_VAR 0 4
4093: PPUSH
4094: LD_INT 46
4096: PUSH
4097: LD_INT 64
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 2
4112: ST_TO_ADDR
// if Difficulty > 2 then
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 2
4120: GREATER
4121: IFFALSE 4157
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4123: LD_ADDR_VAR 0 4
4127: PUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_VAR 0 4
4137: PPUSH
4138: LD_INT 36
4140: PUSH
4141: LD_INT 48
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 2
4156: ST_TO_ADDR
// bc_type := b_breastwork ;
4157: LD_ADDR_OWVAR 42
4161: PUSH
4162: LD_INT 31
4164: ST_TO_ADDR
// InitHC_All ( ) ;
4165: CALL_OW 584
// for i in tmp do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_VAR 0 4
4178: PUSH
4179: FOR_IN
4180: IFFALSE 4324
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4182: LD_VAR 0 2
4186: PUSH
4187: LD_INT 1
4189: ARRAY
4190: PPUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 2
4198: ARRAY
4199: PPUSH
4200: LD_VAR 0 2
4204: PUSH
4205: LD_INT 3
4207: ARRAY
4208: PPUSH
4209: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_OWVAR 67
4220: PPUSH
4221: CALL_OW 381
// un := CreateHuman ;
4225: LD_ADDR_VAR 0 3
4229: PUSH
4230: CALL_OW 44
4234: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4235: LD_ADDR_EXP 46
4239: PUSH
4240: LD_EXP 46
4244: PPUSH
4245: LD_EXP 46
4249: PUSH
4250: LD_INT 1
4252: PLUS
4253: PPUSH
4254: LD_VAR 0 3
4258: PPUSH
4259: CALL_OW 1
4263: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_VAR 0 2
4273: PUSH
4274: LD_INT 3
4276: ARRAY
4277: PUSH
4278: LD_INT 3
4280: PLUS
4281: PUSH
4282: LD_INT 6
4284: MOD
4285: PPUSH
4286: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4290: LD_VAR 0 3
4294: PPUSH
4295: LD_VAR 0 2
4299: PUSH
4300: LD_INT 1
4302: ARRAY
4303: PPUSH
4304: LD_VAR 0 2
4308: PUSH
4309: LD_INT 2
4311: ARRAY
4312: PPUSH
4313: CALL_OW 428
4317: PPUSH
4318: CALL_OW 52
// end ;
4322: GO 4179
4324: POP
4325: POP
// for i := 1 to 2 do
4326: LD_ADDR_VAR 0 2
4330: PUSH
4331: DOUBLE
4332: LD_INT 1
4334: DEC
4335: ST_TO_ADDR
4336: LD_INT 2
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4416
// begin PrepareEngineer ( false , Difficulty ) ;
4342: LD_INT 0
4344: PPUSH
4345: LD_OWVAR 67
4349: PPUSH
4350: CALL_OW 382
// un := CreateHuman ;
4354: LD_ADDR_VAR 0 3
4358: PUSH
4359: CALL_OW 44
4363: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4364: LD_ADDR_EXP 46
4368: PUSH
4369: LD_EXP 46
4373: PPUSH
4374: LD_EXP 46
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: PPUSH
4383: LD_VAR 0 3
4387: PPUSH
4388: CALL_OW 1
4392: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4393: LD_VAR 0 3
4397: PPUSH
4398: LD_INT 54
4400: PPUSH
4401: LD_INT 58
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 50
// end ;
4414: GO 4339
4416: POP
4417: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4418: LD_ADDR_VAR 0 4
4422: PUSH
4423: LD_INT 87
4425: PUSH
4426: LD_INT 62
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 89
4439: PUSH
4440: LD_INT 67
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// if Difficulty > 2 then
4455: LD_OWVAR 67
4459: PUSH
4460: LD_INT 2
4462: GREATER
4463: IFFALSE 4499
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4465: LD_ADDR_VAR 0 4
4469: PUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_INT 88
4482: PUSH
4483: LD_INT 53
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 2
4498: ST_TO_ADDR
// bc_type := b_breastwork ;
4499: LD_ADDR_OWVAR 42
4503: PUSH
4504: LD_INT 31
4506: ST_TO_ADDR
// for i in tmp do
4507: LD_ADDR_VAR 0 2
4511: PUSH
4512: LD_VAR 0 4
4516: PUSH
4517: FOR_IN
4518: IFFALSE 4662
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4520: LD_VAR 0 2
4524: PUSH
4525: LD_INT 1
4527: ARRAY
4528: PPUSH
4529: LD_VAR 0 2
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: PPUSH
4538: LD_VAR 0 2
4542: PUSH
4543: LD_INT 3
4545: ARRAY
4546: PPUSH
4547: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_OWVAR 67
4558: PPUSH
4559: CALL_OW 381
// un := CreateHuman ;
4563: LD_ADDR_VAR 0 3
4567: PUSH
4568: CALL_OW 44
4572: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4573: LD_ADDR_EXP 47
4577: PUSH
4578: LD_EXP 47
4582: PPUSH
4583: LD_EXP 47
4587: PUSH
4588: LD_INT 1
4590: PLUS
4591: PPUSH
4592: LD_VAR 0 3
4596: PPUSH
4597: CALL_OW 1
4601: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4602: LD_VAR 0 3
4606: PPUSH
4607: LD_VAR 0 2
4611: PUSH
4612: LD_INT 3
4614: ARRAY
4615: PUSH
4616: LD_INT 3
4618: PLUS
4619: PUSH
4620: LD_INT 6
4622: MOD
4623: PPUSH
4624: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4628: LD_VAR 0 3
4632: PPUSH
4633: LD_VAR 0 2
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: PPUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_INT 2
4649: ARRAY
4650: PPUSH
4651: CALL_OW 428
4655: PPUSH
4656: CALL_OW 52
// end ;
4660: GO 4517
4662: POP
4663: POP
// for i := 1 to 2 do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_INT 2
4676: PUSH
4677: FOR_TO
4678: IFFALSE 4754
// begin PrepareEngineer ( false , Difficulty ) ;
4680: LD_INT 0
4682: PPUSH
4683: LD_OWVAR 67
4687: PPUSH
4688: CALL_OW 382
// un := CreateHuman ;
4692: LD_ADDR_VAR 0 3
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4702: LD_ADDR_EXP 47
4706: PUSH
4707: LD_EXP 47
4711: PPUSH
4712: LD_EXP 47
4716: PUSH
4717: LD_INT 1
4719: PLUS
4720: PPUSH
4721: LD_VAR 0 3
4725: PPUSH
4726: CALL_OW 1
4730: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 95
4738: PPUSH
4739: LD_INT 65
4741: PPUSH
4742: LD_INT 2
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 50
// end ;
4752: GO 4677
4754: POP
4755: POP
// end ;
4756: LD_VAR 0 1
4760: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4761: LD_INT 0
4763: PPUSH
4764: PPUSH
4765: PPUSH
// usTrapForces := [ ] ;
4766: LD_ADDR_EXP 48
4770: PUSH
4771: EMPTY
4772: ST_TO_ADDR
// uc_side := 1 ;
4773: LD_ADDR_OWVAR 20
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// uc_nation := 1 ;
4781: LD_ADDR_OWVAR 21
4785: PUSH
4786: LD_INT 1
4788: ST_TO_ADDR
// InitHC_All ( ) ;
4789: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4793: LD_INT 1
4795: PPUSH
4796: LD_OWVAR 67
4800: PPUSH
4801: CALL_OW 381
// un := CreateHuman ;
4805: LD_ADDR_VAR 0 3
4809: PUSH
4810: CALL_OW 44
4814: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4815: LD_ADDR_EXP 48
4819: PUSH
4820: LD_EXP 48
4824: PPUSH
4825: LD_VAR 0 3
4829: PPUSH
4830: CALL 54634 0 2
4834: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4835: LD_ADDR_VAR 0 2
4839: PUSH
4840: DOUBLE
4841: LD_INT 1
4843: DEC
4844: ST_TO_ADDR
4845: LD_INT 5
4847: PUSH
4848: LD_INT 6
4850: PUSH
4851: LD_INT 7
4853: PUSH
4854: LD_INT 8
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_OWVAR 67
4867: ARRAY
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4916
// begin PrepareSoldier ( false , Difficulty ) ;
4872: LD_INT 0
4874: PPUSH
4875: LD_OWVAR 67
4879: PPUSH
4880: CALL_OW 381
// un := CreateHuman ;
4884: LD_ADDR_VAR 0 3
4888: PUSH
4889: CALL_OW 44
4893: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4894: LD_ADDR_EXP 48
4898: PUSH
4899: LD_EXP 48
4903: PPUSH
4904: LD_VAR 0 3
4908: PPUSH
4909: CALL 54634 0 2
4913: ST_TO_ADDR
// end ;
4914: GO 4869
4916: POP
4917: POP
// for i := 1 to 2 do
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: DOUBLE
4924: LD_INT 1
4926: DEC
4927: ST_TO_ADDR
4928: LD_INT 2
4930: PUSH
4931: FOR_TO
4932: IFFALSE 4978
// begin PrepareScientist ( false , Difficulty ) ;
4934: LD_INT 0
4936: PPUSH
4937: LD_OWVAR 67
4941: PPUSH
4942: CALL_OW 384
// un := CreateHuman ;
4946: LD_ADDR_VAR 0 3
4950: PUSH
4951: CALL_OW 44
4955: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4956: LD_ADDR_EXP 48
4960: PUSH
4961: LD_EXP 48
4965: PPUSH
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL 54634 0 2
4975: ST_TO_ADDR
// end ;
4976: GO 4931
4978: POP
4979: POP
// end ;
4980: LD_VAR 0 1
4984: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4985: LD_EXP 46
4989: IFFALSE 5559
4991: GO 4993
4993: DISABLE
4994: LD_INT 0
4996: PPUSH
4997: PPUSH
4998: PPUSH
4999: PPUSH
5000: PPUSH
// begin enable ;
5001: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5002: LD_ADDR_VAR 0 3
5006: PUSH
5007: LD_INT 8
5009: PPUSH
5010: LD_INT 22
5012: PUSH
5013: LD_INT 1
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 21
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PPUSH
5034: CALL_OW 70
5038: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5039: LD_ADDR_VAR 0 4
5043: PUSH
5044: LD_EXP 46
5048: PPUSH
5049: LD_INT 25
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 72
5063: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5064: LD_ADDR_VAR 0 5
5068: PUSH
5069: LD_EXP 46
5073: PPUSH
5074: LD_INT 25
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: CALL_OW 72
5088: ST_TO_ADDR
// if eng then
5089: LD_VAR 0 4
5093: IFFALSE 5287
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5095: LD_VAR 0 3
5099: PPUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 24
5105: PUSH
5106: LD_INT 1000
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 72
5121: IFFALSE 5233
// begin for i in eng do
5123: LD_ADDR_VAR 0 1
5127: PUSH
5128: LD_VAR 0 4
5132: PUSH
5133: FOR_IN
5134: IFFALSE 5229
// if IsInUnit ( i ) then
5136: LD_VAR 0 1
5140: PPUSH
5141: CALL_OW 310
5145: IFFALSE 5158
// ComExit ( i ) else
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL 55032 0 1
5156: GO 5227
// if IsOk ( i ) and not HasTask ( i ) then
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 302
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 314
5177: NOT
5178: AND
5179: IFFALSE 5227
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5181: LD_VAR 0 1
5185: PPUSH
5186: LD_VAR 0 3
5190: PPUSH
5191: LD_INT 3
5193: PUSH
5194: LD_INT 24
5196: PUSH
5197: LD_INT 1000
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 72
5212: PPUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: CALL_OW 74
5222: PPUSH
5223: CALL_OW 130
5227: GO 5133
5229: POP
5230: POP
// end else
5231: GO 5287
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_INT 30
5240: PUSH
5241: LD_INT 0
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 72
5252: IFFALSE 5287
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5254: LD_VAR 0 4
5258: PPUSH
5259: LD_VAR 0 3
5263: PPUSH
5264: LD_INT 30
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL_OW 72
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5287: LD_VAR 0 5
5291: PPUSH
5292: LD_INT 50
5294: PUSH
5295: EMPTY
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: PUSH
5303: LD_INT 18
5305: PPUSH
5306: LD_INT 81
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: CALL_OW 70
5320: PUSH
5321: LD_INT 1
5323: GREATER
5324: AND
5325: PUSH
5326: LD_INT 18
5328: PPUSH
5329: LD_INT 22
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 70
5343: NOT
5344: AND
5345: IFFALSE 5399
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5347: LD_ADDR_VAR 0 1
5351: PUSH
5352: LD_VAR 0 5
5356: PPUSH
5357: LD_INT 50
5359: PUSH
5360: EMPTY
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: PUSH
5368: FOR_IN
5369: IFFALSE 5397
// begin ComExit ( i ) ;
5371: LD_VAR 0 1
5375: PPUSH
5376: CALL 55032 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 46
5387: PPUSH
5388: LD_INT 62
5390: PPUSH
5391: CALL_OW 174
// end ;
5395: GO 5368
5397: POP
5398: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5399: LD_INT 18
5401: PPUSH
5402: LD_INT 81
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 70
5416: NOT
5417: PUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 54
5428: PUSH
5429: EMPTY
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 50
5438: PUSH
5439: EMPTY
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 72
5450: AND
5451: PUSH
5452: LD_VAR 0 3
5456: PPUSH
5457: LD_INT 30
5459: PUSH
5460: LD_INT 31
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 58
5469: PUSH
5470: EMPTY
5471: LIST
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL_OW 72
5481: AND
5482: IFFALSE 5559
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5484: LD_VAR 0 5
5488: PPUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 50
5504: PUSH
5505: EMPTY
5506: LIST
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PPUSH
5512: CALL_OW 72
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 31
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 58
5538: PUSH
5539: EMPTY
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PPUSH
5546: CALL_OW 72
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: CALL_OW 120
// end ;
5559: PPOPN 5
5561: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5562: LD_EXP 47
5566: IFFALSE 5837
5568: GO 5570
5570: DISABLE
5571: LD_INT 0
5573: PPUSH
5574: PPUSH
5575: PPUSH
// begin enable ;
5576: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: LD_INT 15
5584: PPUSH
5585: LD_INT 22
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 21
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PPUSH
5609: CALL_OW 70
5613: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5614: LD_ADDR_VAR 0 3
5618: PUSH
5619: LD_EXP 47
5623: PPUSH
5624: LD_INT 25
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PPUSH
5634: CALL_OW 72
5638: ST_TO_ADDR
// if eng then
5639: LD_VAR 0 3
5643: IFFALSE 5837
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 3
5652: PUSH
5653: LD_INT 24
5655: PUSH
5656: LD_INT 1000
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PPUSH
5667: CALL_OW 72
5671: IFFALSE 5783
// begin for i in eng do
5673: LD_ADDR_VAR 0 1
5677: PUSH
5678: LD_VAR 0 3
5682: PUSH
5683: FOR_IN
5684: IFFALSE 5779
// if IsInUnit ( i ) then
5686: LD_VAR 0 1
5690: PPUSH
5691: CALL_OW 310
5695: IFFALSE 5708
// ComExit ( i ) else
5697: LD_VAR 0 1
5701: PPUSH
5702: CALL 55032 0 1
5706: GO 5777
// if IsOk ( i ) and not HasTask ( i ) then
5708: LD_VAR 0 1
5712: PPUSH
5713: CALL_OW 302
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 314
5727: NOT
5728: AND
5729: IFFALSE 5777
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 24
5746: PUSH
5747: LD_INT 1000
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PPUSH
5758: CALL_OW 72
5762: PPUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: CALL_OW 74
5772: PPUSH
5773: CALL_OW 130
5777: GO 5683
5779: POP
5780: POP
// end else
5781: GO 5837
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_INT 30
5790: PUSH
5791: LD_INT 0
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 72
5802: IFFALSE 5837
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5804: LD_VAR 0 3
5808: PPUSH
5809: LD_VAR 0 2
5813: PPUSH
5814: LD_INT 30
5816: PUSH
5817: LD_INT 0
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 72
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 120
// end ; end_of_file
5837: PPOPN 3
5839: END
// export function Action ; var i , tmp ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
// InGameOn ;
5845: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5849: LD_INT 112
5851: PPUSH
5852: LD_INT 107
5854: PPUSH
5855: LD_INT 3
5857: PPUSH
5858: LD_INT 12
5860: NEG
5861: PPUSH
5862: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5866: LD_INT 121
5868: PPUSH
5869: LD_INT 113
5871: PPUSH
5872: CALL_OW 86
// tmp := PrepareBurlak ;
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: CALL 1244 0 0
5885: ST_TO_ADDR
// for i in tmp do
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_VAR 0 3
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5950
// begin SetDir ( i , 5 ) ;
5899: LD_VAR 0 2
5903: PPUSH
5904: LD_INT 5
5906: PPUSH
5907: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5911: LD_VAR 0 2
5915: PPUSH
5916: LD_INT 3
5918: PPUSH
5919: LD_INT 0
5921: PPUSH
5922: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5926: LD_VAR 0 2
5930: PPUSH
5931: LD_INT 121
5933: PPUSH
5934: LD_INT 111
5936: PPUSH
5937: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5941: LD_INT 28
5943: PPUSH
5944: CALL_OW 67
// end ;
5948: GO 5896
5950: POP
5951: POP
// CenterOnUnits ( Kurin ) ;
5952: LD_EXP 38
5956: PPUSH
5957: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5961: LD_EXP 34
5965: PPUSH
5966: LD_EXP 38
5970: PPUSH
5971: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5975: LD_INT 35
5977: PPUSH
5978: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5982: LD_EXP 34
5986: PPUSH
5987: LD_EXP 38
5991: PPUSH
5992: CALL_OW 296
5996: PUSH
5997: LD_INT 6
5999: LESS
6000: IFFALSE 5975
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6002: LD_EXP 34
6006: PUSH
6007: LD_EXP 35
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PPUSH
6016: LD_EXP 38
6020: PPUSH
6021: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_VAR 0 3
6034: PUSH
6035: LD_EXP 34
6039: PUSH
6040: LD_EXP 35
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: DIFF
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6117
// if GetClass ( i ) = class_soldier then
6053: LD_VAR 0 2
6057: PPUSH
6058: CALL_OW 257
6062: PUSH
6063: LD_INT 1
6065: EQUAL
6066: IFFALSE 6103
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 95
6075: PUSH
6076: LD_INT 209
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: LD_INT 2
6090: MOD
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: ARRAY
6096: PPUSH
6097: CALL_OW 120
6101: GO 6115
// ComEnterUnit ( i , ru_lab ) ;
6103: LD_VAR 0 2
6107: PPUSH
6108: LD_INT 83
6110: PPUSH
6111: CALL_OW 120
6115: GO 6050
6117: POP
6118: POP
// Say ( Kurin , D1-Kur-1 ) ;
6119: LD_EXP 38
6123: PPUSH
6124: LD_STRING D1-Kur-1
6126: PPUSH
6127: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6131: LD_EXP 34
6135: PPUSH
6136: LD_STRING D1-Bur-1
6138: PPUSH
6139: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6143: LD_INT 10
6145: PPUSH
6146: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6150: LD_EXP 38
6154: PPUSH
6155: LD_STRING D1-Kur-2
6157: PPUSH
6158: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6162: LD_EXP 39
6166: PPUSH
6167: CALL 55032 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6171: LD_EXP 39
6175: PPUSH
6176: LD_INT 115
6178: PPUSH
6179: LD_INT 108
6181: PPUSH
6182: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6186: LD_EXP 39
6190: PPUSH
6191: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6195: LD_EXP 34
6199: PPUSH
6200: LD_STRING D1-Bur-2
6202: PPUSH
6203: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6207: LD_EXP 38
6211: PPUSH
6212: LD_STRING D1-Kur-3
6214: PPUSH
6215: CALL_OW 88
// if Gnyevko then
6219: LD_EXP 35
6223: IFFALSE 6237
// Say ( Kurin , D1-Kur-3a ) ;
6225: LD_EXP 38
6229: PPUSH
6230: LD_STRING D1-Kur-3a
6232: PPUSH
6233: CALL_OW 88
// InGameOff ;
6237: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6241: LD_STRING M1
6243: PPUSH
6244: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6248: LD_INT 112
6250: PPUSH
6251: LD_INT 107
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6261: LD_INT 66
6263: PPUSH
6264: LD_INT 99
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 7
6272: NEG
6273: PPUSH
6274: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6278: LD_INT 66
6280: PPUSH
6281: LD_INT 99
6283: PPUSH
6284: LD_INT 3
6286: PPUSH
6287: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6291: LD_EXP 39
6295: PPUSH
6296: LD_INT 3
6298: PPUSH
6299: CALL_OW 235
// if Gnyevko then
6303: LD_EXP 35
6307: IFFALSE 6321
// SetSide ( Gnyevko , 3 ) ;
6309: LD_EXP 35
6313: PPUSH
6314: LD_INT 3
6316: PPUSH
6317: CALL_OW 235
// SaveForQuickRestart ;
6321: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6325: LD_EXP 38
6329: PPUSH
6330: LD_INT 71
6332: PPUSH
6333: CALL_OW 120
// wait ( 0 0$2 ) ;
6337: LD_INT 70
6339: PPUSH
6340: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6344: LD_EXP 43
6348: PUSH
6349: LD_INT 2
6351: ARRAY
6352: PPUSH
6353: CALL 55032 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6357: LD_EXP 43
6361: PUSH
6362: LD_INT 2
6364: ARRAY
6365: PPUSH
6366: LD_INT 98
6368: PPUSH
6369: LD_INT 98
6371: PPUSH
6372: CALL_OW 428
6376: PPUSH
6377: CALL_OW 180
// wait ( 0 0$12 ) ;
6381: LD_INT 420
6383: PPUSH
6384: CALL_OW 67
// kurinDontWannaTalk := true ;
6388: LD_ADDR_EXP 5
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// end ;
6396: LD_VAR 0 1
6400: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6401: LD_EXP 5
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 91
6418: PUSH
6419: LD_INT 71
6421: PUSH
6422: LD_INT 8
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PPUSH
6434: CALL_OW 69
6438: AND
6439: IFFALSE 6626
6441: GO 6443
6443: DISABLE
6444: LD_INT 0
6446: PPUSH
6447: PPUSH
// begin enable ;
6448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_INT 22
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 91
6466: PUSH
6467: LD_INT 71
6469: PUSH
6470: LD_INT 14
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 69
6486: ST_TO_ADDR
// InGameOn ;
6487: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6491: LD_INT 116
6493: PPUSH
6494: LD_INT 107
6496: PPUSH
6497: LD_INT 3
6499: PPUSH
6500: LD_INT 3
6502: PPUSH
6503: CALL_OW 330
// ComExit ( Kurin ) ;
6507: LD_EXP 38
6511: PPUSH
6512: CALL 55032 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6516: LD_EXP 38
6520: PPUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 1
6528: ARRAY
6529: PPUSH
6530: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6534: LD_EXP 38
6538: PPUSH
6539: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6543: LD_VAR 0 2
6547: PPUSH
6548: LD_INT 87
6550: PPUSH
6551: LD_INT 99
6553: PPUSH
6554: CALL_OW 111
// if kirovHasTank then
6558: LD_EXP 6
6562: IFFALSE 6578
// Say ( Kurin , D1a-Kur-1a ) else
6564: LD_EXP 38
6568: PPUSH
6569: LD_STRING D1a-Kur-1a
6571: PPUSH
6572: CALL_OW 88
6576: GO 6590
// Say ( Kurin , D1a-Kur-1 ) ;
6578: LD_EXP 38
6582: PPUSH
6583: LD_STRING D1a-Kur-1
6585: PPUSH
6586: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6590: LD_EXP 38
6594: PPUSH
6595: LD_INT 71
6597: PPUSH
6598: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6602: LD_INT 116
6604: PPUSH
6605: LD_INT 107
6607: PPUSH
6608: LD_INT 3
6610: PPUSH
6611: CALL_OW 331
// wait ( 0 0$3 ) ;
6615: LD_INT 105
6617: PPUSH
6618: CALL_OW 67
// InGameOff ;
6622: CALL_OW 9
// end ;
6626: PPOPN 2
6628: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6629: LD_INT 22
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 95
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 69
6657: PUSH
6658: LD_EXP 7
6662: AND
6663: IFFALSE 7002
6665: GO 6667
6667: DISABLE
6668: LD_INT 0
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
// begin enable ;
6675: ENABLE
// blockNorth := false ;
6676: LD_ADDR_EXP 7
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// InGameOn ;
6684: CALL_OW 8
// DialogueOn ;
6688: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6692: LD_ADDR_VAR 0 2
6696: PUSH
6697: LD_INT 22
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 95
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6726: LD_EXP 39
6730: PUSH
6731: LD_VAR 0 2
6735: IN
6736: PUSH
6737: LD_EXP 39
6741: PPUSH
6742: CALL_OW 302
6746: AND
6747: IFFALSE 6763
// Say ( Kovalyuk , D1b-Kov-1 ) else
6749: LD_EXP 39
6753: PPUSH
6754: LD_STRING D1b-Kov-1
6756: PPUSH
6757: CALL_OW 88
6761: GO 6798
// if Burlak in tmp and IsOk ( Burlak ) then
6763: LD_EXP 34
6767: PUSH
6768: LD_VAR 0 2
6772: IN
6773: PUSH
6774: LD_EXP 34
6778: PPUSH
6779: CALL_OW 302
6783: AND
6784: IFFALSE 6798
// Say ( Burlak , D1b-Bur-1 ) ;
6786: LD_EXP 34
6790: PPUSH
6791: LD_STRING D1b-Bur-1
6793: PPUSH
6794: CALL_OW 88
// DialogueOff ;
6798: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6802: LD_INT 22
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 3
6814: PUSH
6815: LD_INT 21
6817: PUSH
6818: LD_INT 3
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PPUSH
6838: CALL_OW 141
// for i in tmp do
6842: LD_ADDR_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: FOR_IN
6853: IFFALSE 6981
// begin d := rand ( 2 , 3 ) ;
6855: LD_ADDR_VAR 0 5
6859: PUSH
6860: LD_INT 2
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: CALL_OW 12
6870: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: LD_VAR 0 1
6880: PPUSH
6881: CALL_OW 250
6885: PPUSH
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_INT 6
6893: PPUSH
6894: CALL_OW 272
6898: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6899: LD_ADDR_VAR 0 4
6903: PUSH
6904: LD_VAR 0 1
6908: PPUSH
6909: CALL_OW 251
6913: PPUSH
6914: LD_VAR 0 5
6918: PPUSH
6919: LD_INT 6
6921: PPUSH
6922: CALL_OW 273
6926: ST_TO_ADDR
// if ValidHex ( x , y ) then
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_VAR 0 4
6936: PPUSH
6937: CALL_OW 488
6941: IFFALSE 6964
// ComMoveXY ( i , x , y ) else
6943: LD_VAR 0 1
6947: PPUSH
6948: LD_VAR 0 3
6952: PPUSH
6953: LD_VAR 0 4
6957: PPUSH
6958: CALL_OW 111
6962: GO 6979
// ComMoveXY ( i , 79 , 85 ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_INT 79
6971: PPUSH
6972: LD_INT 85
6974: PPUSH
6975: CALL_OW 111
// end ;
6979: GO 6852
6981: POP
6982: POP
// wait ( 0 0$5 ) ;
6983: LD_INT 175
6985: PPUSH
6986: CALL_OW 67
// InGameOff ;
6990: CALL_OW 9
// blockNorth := true ;
6994: LD_ADDR_EXP 7
6998: PUSH
6999: LD_INT 1
7001: ST_TO_ADDR
// end ;
7002: PPOPN 5
7004: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7005: LD_EXP 44
7009: PPUSH
7010: LD_INT 101
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PPUSH
7020: CALL_OW 72
7024: PUSH
7025: LD_EXP 4
7029: NOT
7030: AND
7031: IFFALSE 7433
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7043: LD_ADDR_VAR 0 5
7047: PUSH
7048: LD_EXP 44
7052: PPUSH
7053: LD_EXP 34
7057: PPUSH
7058: CALL_OW 74
7062: ST_TO_ADDR
// InGameOn ;
7063: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7067: LD_VAR 0 5
7071: PPUSH
7072: CALL_OW 250
7076: PPUSH
7077: LD_VAR 0 5
7081: PPUSH
7082: CALL_OW 251
7086: PPUSH
7087: LD_INT 3
7089: PPUSH
7090: LD_INT 6
7092: PPUSH
7093: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7097: LD_VAR 0 5
7101: PPUSH
7102: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7106: LD_VAR 0 5
7110: PPUSH
7111: LD_EXP 34
7115: PPUSH
7116: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7120: LD_VAR 0 5
7124: PPUSH
7125: LD_STRING D2-RSol1-1
7127: PPUSH
7128: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 5
7141: PPUSH
7142: CALL_OW 250
7146: PPUSH
7147: LD_VAR 0 5
7151: PPUSH
7152: CALL_OW 254
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: CALL_OW 272
7164: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7165: LD_ADDR_VAR 0 4
7169: PUSH
7170: LD_VAR 0 5
7174: PPUSH
7175: CALL_OW 251
7179: PPUSH
7180: LD_VAR 0 5
7184: PPUSH
7185: CALL_OW 254
7189: PPUSH
7190: LD_INT 3
7192: PPUSH
7193: CALL_OW 273
7197: ST_TO_ADDR
// if ValidHex ( x , y ) then
7198: LD_VAR 0 3
7202: PPUSH
7203: LD_VAR 0 4
7207: PPUSH
7208: CALL_OW 488
7212: IFFALSE 7244
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7214: LD_EXP 35
7218: PUSH
7219: LD_EXP 39
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: LD_VAR 0 4
7237: PPUSH
7238: CALL_OW 111
7242: GO 7267
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7244: LD_EXP 35
7248: PUSH
7249: LD_EXP 39
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7267: LD_EXP 34
7271: PPUSH
7272: LD_VAR 0 5
7276: PPUSH
7277: CALL_OW 112
// p := 0 ;
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7289: LD_INT 35
7291: PPUSH
7292: CALL_OW 67
// p := p + 1 ;
7296: LD_ADDR_VAR 0 2
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_INT 1
7308: PLUS
7309: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 10
7317: GREATER
7318: PUSH
7319: LD_EXP 34
7323: PPUSH
7324: LD_VAR 0 5
7328: PPUSH
7329: CALL_OW 296
7333: PUSH
7334: LD_INT 6
7336: LESS
7337: OR
7338: IFFALSE 7289
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7340: LD_EXP 34
7344: PUSH
7345: LD_EXP 35
7349: PUSH
7350: LD_EXP 39
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: PPUSH
7360: LD_VAR 0 5
7364: PPUSH
7365: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7369: LD_EXP 34
7373: PPUSH
7374: LD_STRING D2-Bur-1
7376: PPUSH
7377: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7381: LD_VAR 0 5
7385: PPUSH
7386: LD_STRING D2-RSol1-2
7388: PPUSH
7389: CALL_OW 88
// ComHold ( nearestGuard ) ;
7393: LD_VAR 0 5
7397: PPUSH
7398: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7402: LD_VAR 0 5
7406: PPUSH
7407: CALL_OW 250
7411: PPUSH
7412: LD_VAR 0 5
7416: PPUSH
7417: CALL_OW 251
7421: PPUSH
7422: LD_INT 3
7424: PPUSH
7425: CALL_OW 331
// InGameOff ;
7429: CALL_OW 9
// end ;
7433: PPOPN 5
7435: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7436: LD_EXP 34
7440: PPUSH
7441: LD_EXP 40
7445: PPUSH
7446: CALL_OW 296
7450: PUSH
7451: LD_INT 10
7453: LESS
7454: PUSH
7455: LD_INT 3
7457: PPUSH
7458: LD_EXP 40
7462: PPUSH
7463: CALL_OW 292
7467: AND
7468: IFFALSE 7824
7470: GO 7472
7472: DISABLE
7473: LD_INT 0
7475: PPUSH
// begin InGameOn ;
7476: CALL_OW 8
// beriaVisited := true ;
7480: LD_ADDR_EXP 4
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7488: LD_EXP 34
7492: PPUSH
7493: LD_EXP 40
7497: PPUSH
7498: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7502: LD_EXP 35
7506: PUSH
7507: LD_EXP 39
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: LD_INT 68
7518: PPUSH
7519: LD_INT 99
7521: PPUSH
7522: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7526: LD_EXP 40
7530: PPUSH
7531: LD_EXP 34
7535: PPUSH
7536: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7540: LD_EXP 40
7544: PPUSH
7545: LD_STRING D2-Pla-2
7547: PPUSH
7548: CALL_OW 88
// p := 0 ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7560: LD_INT 35
7562: PPUSH
7563: CALL_OW 67
// p := p + 1 ;
7567: LD_ADDR_VAR 0 1
7571: PUSH
7572: LD_VAR 0 1
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7581: LD_EXP 34
7585: PPUSH
7586: LD_EXP 40
7590: PPUSH
7591: CALL_OW 296
7595: PUSH
7596: LD_INT 6
7598: LESS
7599: PUSH
7600: LD_VAR 0 1
7604: PUSH
7605: LD_INT 8
7607: GREATER
7608: OR
7609: IFFALSE 7560
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7611: LD_EXP 34
7615: PUSH
7616: LD_EXP 35
7620: PUSH
7621: LD_EXP 39
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: PPUSH
7631: LD_EXP 40
7635: PPUSH
7636: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7640: LD_EXP 34
7644: PPUSH
7645: LD_STRING D2-Bur-2
7647: PPUSH
7648: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7652: LD_INT 6
7654: PPUSH
7655: LD_INT 3
7657: PPUSH
7658: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7662: LD_EXP 40
7666: PPUSH
7667: LD_STRING D2-Pla-3
7669: PPUSH
7670: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7674: LD_EXP 34
7678: PPUSH
7679: LD_STRING D2-Bur-3
7681: PPUSH
7682: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7686: LD_EXP 40
7690: PPUSH
7691: LD_STRING D2-Pla-4
7693: PPUSH
7694: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7698: LD_EXP 34
7702: PPUSH
7703: LD_STRING D2-Bur-4
7705: PPUSH
7706: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7710: LD_EXP 40
7714: PPUSH
7715: LD_STRING D2-Pla-5
7717: PPUSH
7718: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7722: LD_INT 1
7724: PUSH
7725: LD_INT 2
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: LD_INT 4
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL 7827 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7744: LD_EXP 40
7748: PPUSH
7749: LD_STRING D3-Pla-1
7751: PPUSH
7752: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7756: LD_EXP 34
7760: PPUSH
7761: LD_STRING D3-Bur-1
7763: PPUSH
7764: CALL_OW 88
// InGameOff ;
7768: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7772: LD_STRING M2a
7774: PPUSH
7775: CALL_OW 337
// SetSide ( beria , 3 ) ;
7779: LD_INT 106
7781: PPUSH
7782: LD_INT 3
7784: PPUSH
7785: CALL_OW 235
// if not Gnyevko then
7789: LD_EXP 35
7793: NOT
7794: IFFALSE 7815
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7796: LD_INT 106
7798: PPUSH
7799: CALL_OW 313
7803: PUSH
7804: LD_INT 1
7806: ARRAY
7807: PPUSH
7808: LD_INT 3
7810: PPUSH
7811: CALL_OW 235
// ComFree ( Platonov ) ;
7815: LD_EXP 40
7819: PPUSH
7820: CALL_OW 139
// end ;
7824: PPOPN 1
7826: END
// function AskPlatonov ( questions ) ; var q ; begin
7827: LD_INT 0
7829: PPUSH
7830: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7831: LD_ADDR_VAR 0 3
7835: PUSH
7836: LD_STRING QMoreInfo
7838: PPUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 98
7848: ST_TO_ADDR
// case q of 1 :
7849: LD_VAR 0 3
7853: PUSH
7854: LD_INT 1
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7889
7862: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7863: LD_EXP 34
7867: PPUSH
7868: LD_STRING D2a-Bur-1
7870: PPUSH
7871: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7875: LD_EXP 40
7879: PPUSH
7880: LD_STRING D2a-Pla-1
7882: PPUSH
7883: CALL_OW 88
// end ; 2 :
7887: GO 7960
7889: LD_INT 2
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 7924
7897: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7898: LD_EXP 34
7902: PPUSH
7903: LD_STRING D2b-Bur-1
7905: PPUSH
7906: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7910: LD_EXP 40
7914: PPUSH
7915: LD_STRING D2b-Pla-1
7917: PPUSH
7918: CALL_OW 88
// end ; 3 :
7922: GO 7960
7924: LD_INT 3
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7959
7932: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7933: LD_EXP 34
7937: PPUSH
7938: LD_STRING D2c-Bur-1
7940: PPUSH
7941: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7945: LD_EXP 40
7949: PPUSH
7950: LD_STRING D2c-Pla-1
7952: PPUSH
7953: CALL_OW 88
// end ; end ;
7957: GO 7960
7959: POP
// if q < 4 and questions > 2 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 4
7967: LESS
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: LD_INT 2
7976: GREATER
7977: AND
7978: IFFALSE 7995
// AskPlatonov ( questions diff q ) ;
7980: LD_VAR 0 1
7984: PUSH
7985: LD_VAR 0 3
7989: DIFF
7990: PPUSH
7991: CALL 7827 0 1
// end ;
7995: LD_VAR 0 2
7999: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8000: LD_INT 0
8002: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8003: LD_EXP 40
8007: PPUSH
8008: LD_VAR 0 1
8012: PPUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8022: LD_INT 35
8024: PPUSH
8025: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8029: LD_EXP 40
8033: PPUSH
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL_OW 297
8048: PUSH
8049: LD_INT 5
8051: LESS
8052: PUSH
8053: LD_VAR 0 1
8057: PPUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 283
8067: PUSH
8068: LD_INT 1
8070: EQUAL
8071: AND
8072: IFFALSE 8022
// ComStop ( Platonov ) ;
8074: LD_EXP 40
8078: PPUSH
8079: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8083: LD_EXP 40
8087: PPUSH
8088: LD_STRING D4-Pla-1
8090: PPUSH
8091: CALL_OW 88
// end ;
8095: LD_VAR 0 3
8099: RET
// every 0 0$2 trigger hasLab do
8100: LD_EXP 9
8104: IFFALSE 8168
8106: GO 8108
8108: DISABLE
// begin DialogueOn ;
8109: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8113: LD_EXP 34
8117: PPUSH
8118: LD_STRING D5a-Bur-1
8120: PPUSH
8121: CALL_OW 88
// if hasWorkshop then
8125: LD_EXP 10
8129: IFFALSE 8145
// Say ( Platonov , D5a-Pla-1 ) else
8131: LD_EXP 40
8135: PPUSH
8136: LD_STRING D5a-Pla-1
8138: PPUSH
8139: CALL_OW 88
8143: GO 8157
// Say ( Platonov , D5a-Pla-1a ) ;
8145: LD_EXP 40
8149: PPUSH
8150: LD_STRING D5a-Pla-1a
8152: PPUSH
8153: CALL_OW 88
// DialogueOff ;
8157: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8161: LD_STRING M2b
8163: PPUSH
8164: CALL_OW 337
// end ;
8168: END
// every 0 0$2 trigger hasWorkshop do
8169: LD_EXP 10
8173: IFFALSE 8237
8175: GO 8177
8177: DISABLE
// begin DialogueOn ;
8178: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8182: LD_EXP 34
8186: PPUSH
8187: LD_STRING D5b-Bur-1
8189: PPUSH
8190: CALL_OW 88
// if hasLab then
8194: LD_EXP 9
8198: IFFALSE 8214
// Say ( Platonov , D5b-Pla-1 ) else
8200: LD_EXP 40
8204: PPUSH
8205: LD_STRING D5b-Pla-1
8207: PPUSH
8208: CALL_OW 88
8212: GO 8226
// Say ( Platonov , D5b-Pla-1a ) ;
8214: LD_EXP 40
8218: PPUSH
8219: LD_STRING D5b-Pla-1a
8221: PPUSH
8222: CALL_OW 88
// DialogueOff ;
8226: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8230: LD_STRING M2c
8232: PPUSH
8233: CALL_OW 337
// end ;
8237: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8238: LD_EXP 9
8242: PUSH
8243: LD_EXP 10
8247: AND
8248: IFFALSE 8342
8250: GO 8252
8252: DISABLE
// begin DialogueOn ;
8253: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8257: LD_INT 47
8259: PPUSH
8260: LD_INT 3
8262: PPUSH
8263: CALL_OW 321
8267: PUSH
8268: LD_INT 2
8270: EQUAL
8271: IFFALSE 8299
// begin Say ( Burlak , D7b-Bur-1 ) ;
8273: LD_EXP 34
8277: PPUSH
8278: LD_STRING D7b-Bur-1
8280: PPUSH
8281: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8285: LD_EXP 40
8289: PPUSH
8290: LD_STRING D7b-Pla-1
8292: PPUSH
8293: CALL_OW 88
// end else
8297: GO 8323
// begin Say ( Burlak , D7a-Bur-1 ) ;
8299: LD_EXP 34
8303: PPUSH
8304: LD_STRING D7a-Bur-1
8306: PPUSH
8307: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8311: LD_EXP 40
8315: PPUSH
8316: LD_STRING D7a-Pla-1
8318: PPUSH
8319: CALL_OW 88
// end ; DialogueOff ;
8323: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8327: LD_STRING M2
8329: PPUSH
8330: CALL_OW 337
// hasToBuildTank := true ;
8334: LD_ADDR_EXP 11
8338: PUSH
8339: LD_INT 1
8341: ST_TO_ADDR
// end ;
8342: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8343: LD_EXP 4
8347: PUSH
8348: LD_EXP 9
8352: NOT
8353: PUSH
8354: LD_EXP 10
8358: NOT
8359: OR
8360: PUSH
8361: LD_EXP 11
8365: OR
8366: AND
8367: PUSH
8368: LD_INT 22
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 91
8383: PUSH
8384: LD_INT 106
8386: PUSH
8387: LD_INT 32
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 69
8407: AND
8408: IFFALSE 8517
8410: GO 8412
8412: DISABLE
8413: LD_INT 0
8415: PPUSH
// begin enable ;
8416: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8417: LD_ADDR_VAR 0 1
8421: PUSH
8422: LD_INT 22
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 91
8437: PUSH
8438: LD_INT 106
8440: PUSH
8441: LD_INT 32
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: ST_TO_ADDR
// InGameOn ;
8462: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 1
8473: ARRAY
8474: PPUSH
8475: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8479: LD_VAR 0 1
8483: PPUSH
8484: LD_INT 66
8486: PPUSH
8487: LD_INT 99
8489: PPUSH
8490: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8494: LD_EXP 40
8498: PPUSH
8499: LD_STRING D8-Pla-1
8501: PPUSH
8502: CALL_OW 88
// wait ( 0 0$3 ) ;
8506: LD_INT 105
8508: PPUSH
8509: CALL_OW 67
// InGameOff ;
8513: CALL_OW 9
// end ;
8517: PPOPN 1
8519: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8520: LD_INT 21
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 23
8535: PUSH
8536: LD_INT 3
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: LD_INT 30
8548: PUSH
8549: LD_INT 4
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 30
8558: PUSH
8559: LD_INT 31
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 70
8580: PUSH
8581: LD_EXP 31
8585: NOT
8586: AND
8587: IFFALSE 8798
8589: GO 8591
8591: DISABLE
8592: LD_INT 0
8594: PPUSH
// begin enable ;
8595: ENABLE
// InGameOn ;
8596: CALL_OW 8
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8600: LD_ADDR_VAR 0 1
8604: PUSH
8605: LD_INT 21
8607: PPUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 3
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 23
8620: PUSH
8621: LD_INT 3
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 2
8630: PUSH
8631: LD_INT 30
8633: PUSH
8634: LD_INT 4
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 30
8643: PUSH
8644: LD_INT 31
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: PPUSH
8661: CALL_OW 70
8665: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
8666: LD_EXP 40
8670: PPUSH
8671: LD_VAR 0 1
8675: PUSH
8676: LD_INT 1
8678: ARRAY
8679: PPUSH
8680: CALL_OW 112
// wait ( 0 0$2 ) ;
8684: LD_INT 70
8686: PPUSH
8687: CALL_OW 67
// ComHold ( Platonov ) ;
8691: LD_EXP 40
8695: PPUSH
8696: CALL_OW 140
// Say ( Platonov , D6-Pla-1 ) ;
8700: LD_EXP 40
8704: PPUSH
8705: LD_STRING D6-Pla-1
8707: PPUSH
8708: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8712: LD_EXP 34
8716: PPUSH
8717: LD_STRING D6-Bur-1
8719: PPUSH
8720: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8724: LD_VAR 0 1
8728: PUSH
8729: LD_INT 1
8731: ARRAY
8732: PPUSH
8733: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8737: LD_VAR 0 1
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PPUSH
8746: CALL_OW 266
8750: PUSH
8751: LD_INT 31
8753: EQUAL
8754: IFFALSE 8776
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8756: LD_INT 106
8758: PPUSH
8759: CALL_OW 274
8763: PPUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_INT 10
8769: PPUSH
8770: CALL_OW 276
8774: GO 8794
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8776: LD_INT 106
8778: PPUSH
8779: CALL_OW 274
8783: PPUSH
8784: LD_INT 1
8786: PPUSH
8787: LD_INT 30
8789: PPUSH
8790: CALL_OW 276
// InGameOff ;
8794: CALL_OW 9
// end ;
8798: PPOPN 1
8800: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8801: LD_EXP 4
8805: PUSH
8806: LD_INT 21
8808: PPUSH
8809: LD_INT 22
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 23
8821: PUSH
8822: LD_INT 3
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 21
8831: PUSH
8832: LD_INT 3
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: PPUSH
8844: CALL_OW 71
8848: AND
8849: IFFALSE 9106
8851: GO 8853
8853: DISABLE
8854: LD_INT 0
8856: PPUSH
8857: PPUSH
// begin enable ;
8858: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8859: LD_ADDR_VAR 0 1
8863: PUSH
8864: LD_INT 21
8866: PPUSH
8867: LD_INT 22
8869: PUSH
8870: LD_INT 3
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 23
8879: PUSH
8880: LD_INT 3
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 21
8889: PUSH
8890: LD_INT 3
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: PPUSH
8902: CALL_OW 71
8906: PUSH
8907: LD_INT 1
8909: ARRAY
8910: ST_TO_ADDR
// InGameOn ;
8911: CALL_OW 8
// ComMoveUnit ( Platonov , tmp ) ;
8915: LD_EXP 40
8919: PPUSH
8920: LD_VAR 0 1
8924: PPUSH
8925: CALL_OW 112
// Say ( Platonov , DPlatAngry ) ;
8929: LD_EXP 40
8933: PPUSH
8934: LD_STRING DPlatAngry
8936: PPUSH
8937: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8941: LD_EXP 34
8945: PPUSH
8946: LD_STRING D6-Bur-1
8948: PPUSH
8949: CALL_OW 88
// RemoveUnit ( tmp ) ;
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 64
// InGameOff ;
8962: CALL_OW 9
// amount := 0 ;
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: LD_INT 0
8973: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
8974: LD_VAR 0 1
8978: PPUSH
8979: CALL_OW 266
8983: PUSH
8984: LD_INT 31
8986: DOUBLE
8987: EQUAL
8988: IFTRUE 8992
8990: GO 9003
8992: POP
// amount := 10 ; b_lab :
8993: LD_ADDR_VAR 0 2
8997: PUSH
8998: LD_INT 10
9000: ST_TO_ADDR
9001: GO 9080
9003: LD_INT 6
9005: DOUBLE
9006: EQUAL
9007: IFTRUE 9011
9009: GO 9022
9011: POP
// amount := 20 ; b_armoury :
9012: LD_ADDR_VAR 0 2
9016: PUSH
9017: LD_INT 20
9019: ST_TO_ADDR
9020: GO 9080
9022: LD_INT 4
9024: DOUBLE
9025: EQUAL
9026: IFTRUE 9030
9028: GO 9041
9030: POP
// amount := 30 ; b_workshop :
9031: LD_ADDR_VAR 0 2
9035: PUSH
9036: LD_INT 30
9038: ST_TO_ADDR
9039: GO 9080
9041: LD_INT 2
9043: DOUBLE
9044: EQUAL
9045: IFTRUE 9049
9047: GO 9060
9049: POP
// amount := 40 ; b_oil_power :
9050: LD_ADDR_VAR 0 2
9054: PUSH
9055: LD_INT 40
9057: ST_TO_ADDR
9058: GO 9080
9060: LD_INT 26
9062: DOUBLE
9063: EQUAL
9064: IFTRUE 9068
9066: GO 9079
9068: POP
// amount := 20 ; end ;
9069: LD_ADDR_VAR 0 2
9073: PUSH
9074: LD_INT 20
9076: ST_TO_ADDR
9077: GO 9080
9079: POP
// if amount then
9080: LD_VAR 0 2
9084: IFFALSE 9106
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9086: LD_INT 106
9088: PPUSH
9089: CALL_OW 274
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: LD_VAR 0 2
9101: PPUSH
9102: CALL_OW 276
// end ;
9106: PPOPN 2
9108: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do var Dickens ;
9109: LD_INT 22
9111: PUSH
9112: LD_INT 3
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: LD_INT 92
9121: PUSH
9122: LD_INT 112
9124: PUSH
9125: LD_INT 155
9127: PUSH
9128: LD_INT 8
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 69
9145: PUSH
9146: LD_INT 2
9148: LESS
9149: PUSH
9150: LD_EXP 34
9154: PPUSH
9155: LD_INT 112
9157: PPUSH
9158: LD_INT 155
9160: PPUSH
9161: CALL_OW 297
9165: PUSH
9166: LD_INT 8
9168: LESS
9169: AND
9170: IFFALSE 9404
9172: GO 9174
9174: DISABLE
9175: LD_INT 0
9177: PPUSH
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9178: LD_INT 112
9180: PPUSH
9181: LD_INT 155
9183: PPUSH
9184: LD_INT 3
9186: PPUSH
9187: LD_INT 4
9189: NEG
9190: PPUSH
9191: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9195: LD_INT 1
9197: PPUSH
9198: LD_EXP 34
9202: PPUSH
9203: CALL_OW 471
// uc_side := 1 ;
9207: LD_ADDR_OWVAR 20
9211: PUSH
9212: LD_INT 1
9214: ST_TO_ADDR
// uc_nation := 1 ;
9215: LD_ADDR_OWVAR 21
9219: PUSH
9220: LD_INT 1
9222: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9223: LD_ADDR_VAR 0 1
9227: PUSH
9228: LD_STRING Dickens
9230: PPUSH
9231: CALL_OW 25
9235: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_INT 112
9243: PPUSH
9244: LD_INT 155
9246: PPUSH
9247: LD_INT 1
9249: PPUSH
9250: CALL_OW 48
// wait ( 0 0$2 ) ;
9254: LD_INT 70
9256: PPUSH
9257: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9261: LD_VAR 0 1
9265: PPUSH
9266: LD_EXP 34
9270: PPUSH
9271: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9275: LD_VAR 0 1
9279: PPUSH
9280: LD_STRING DUsSpawnSol
9282: PPUSH
9283: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9287: LD_INT 1
9289: PPUSH
9290: LD_EXP 34
9294: PPUSH
9295: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9299: LD_INT 112
9301: PPUSH
9302: LD_INT 155
9304: PPUSH
9305: LD_INT 3
9307: PPUSH
9308: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9312: LD_VAR 0 1
9316: PPUSH
9317: LD_INT 77
9319: PPUSH
9320: LD_INT 152
9322: PPUSH
9323: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9327: LD_INT 35
9329: PPUSH
9330: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9334: LD_VAR 0 1
9338: PPUSH
9339: CALL_OW 302
9343: NOT
9344: PUSH
9345: LD_VAR 0 1
9349: PPUSH
9350: LD_INT 77
9352: PPUSH
9353: LD_INT 152
9355: PPUSH
9356: CALL_OW 307
9360: OR
9361: IFFALSE 9327
// if not IsOk ( Dickens ) then
9363: LD_VAR 0 1
9367: PPUSH
9368: CALL_OW 302
9372: NOT
9373: IFFALSE 9377
// exit ;
9375: GO 9404
// RemoveUnit ( Dickens ) ;
9377: LD_VAR 0 1
9381: PPUSH
9382: CALL_OW 64
// SaveCharacters ( Dickens , currentMissionPrefix & Dickens ) ;
9386: LD_VAR 0 1
9390: PPUSH
9391: LD_EXP 3
9395: PUSH
9396: LD_STRING Dickens
9398: STR
9399: PPUSH
9400: CALL_OW 38
// end ;
9404: PPOPN 1
9406: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9407: LD_EXP 34
9411: PPUSH
9412: CALL_OW 256
9416: PUSH
9417: LD_INT 600
9419: LESS
9420: IFFALSE 9437
9422: GO 9424
9424: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9425: LD_EXP 34
9429: PPUSH
9430: LD_STRING DUsSpawnBur
9432: PPUSH
9433: CALL_OW 88
9437: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9438: LD_EXP 12
9442: IFFALSE 10504
9444: GO 9446
9446: DISABLE
9447: LD_INT 0
9449: PPUSH
9450: PPUSH
9451: PPUSH
9452: PPUSH
// begin hasToBuildTank := false ;
9453: LD_ADDR_EXP 11
9457: PUSH
9458: LD_INT 0
9460: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9461: LD_ADDR_EXP 5
9465: PUSH
9466: LD_INT 0
9468: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9469: LD_ADDR_VAR 0 2
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 3
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 21
9486: PUSH
9487: LD_INT 2
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PPUSH
9498: CALL_OW 69
9502: ST_TO_ADDR
// InGameOn ;
9503: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: CALL_OW 85
// wait ( 0 0$1 ) ;
9520: LD_INT 35
9522: PPUSH
9523: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9527: LD_EXP 34
9531: PPUSH
9532: LD_STRING D9-Bur-1
9534: PPUSH
9535: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9539: LD_EXP 40
9543: PPUSH
9544: LD_VAR 0 2
9548: PUSH
9549: LD_INT 1
9551: ARRAY
9552: PPUSH
9553: CALL_OW 112
// p := 0 ;
9557: LD_ADDR_VAR 0 3
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9565: LD_INT 35
9567: PPUSH
9568: CALL_OW 67
// p := p + 1 ;
9572: LD_ADDR_VAR 0 3
9576: PUSH
9577: LD_VAR 0 3
9581: PUSH
9582: LD_INT 1
9584: PLUS
9585: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9586: LD_EXP 40
9590: PPUSH
9591: LD_VAR 0 2
9595: PUSH
9596: LD_INT 1
9598: ARRAY
9599: PPUSH
9600: CALL_OW 296
9604: PUSH
9605: LD_INT 8
9607: LESS
9608: PUSH
9609: LD_VAR 0 3
9613: PUSH
9614: LD_INT 8
9616: GREATER
9617: OR
9618: IFFALSE 9565
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9620: LD_EXP 40
9624: PPUSH
9625: LD_VAR 0 2
9629: PUSH
9630: LD_INT 1
9632: ARRAY
9633: PPUSH
9634: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9638: LD_EXP 40
9642: PPUSH
9643: LD_STRING D9-Pla-1
9645: PPUSH
9646: CALL_OW 88
// ComFree ( Platonov ) ;
9650: LD_EXP 40
9654: PPUSH
9655: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_INT 64
9666: PPUSH
9667: LD_INT 98
9669: PPUSH
9670: CALL_OW 171
// InGameOff ;
9674: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9678: LD_STRING M3
9680: PPUSH
9681: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9685: LD_EXP 41
9689: PPUSH
9690: LD_INT 70
9692: PPUSH
9693: LD_INT 108
9695: PPUSH
9696: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9700: LD_EXP 41
9704: PPUSH
9705: CALL_OW 200
// wait ( 1 ) ;
9709: LD_INT 1
9711: PPUSH
9712: CALL_OW 67
// ComExit ( Belkov ) ;
9716: LD_EXP 36
9720: PPUSH
9721: CALL 55032 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9725: LD_EXP 36
9729: PPUSH
9730: LD_INT 113
9732: PPUSH
9733: LD_INT 104
9735: PPUSH
9736: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9740: LD_EXP 36
9744: PPUSH
9745: LD_INT 116
9747: PPUSH
9748: LD_INT 108
9750: PPUSH
9751: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9755: LD_INT 35
9757: PPUSH
9758: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9762: LD_INT 22
9764: PUSH
9765: LD_INT 3
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 21
9774: PUSH
9775: LD_INT 2
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 91
9784: PUSH
9785: LD_INT 71
9787: PUSH
9788: LD_INT 8
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: IFFALSE 9755
// InGameOn ;
9807: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9811: LD_ADDR_VAR 0 2
9815: PUSH
9816: LD_INT 22
9818: PUSH
9819: LD_INT 3
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 21
9828: PUSH
9829: LD_INT 2
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 91
9838: PUSH
9839: LD_INT 71
9841: PUSH
9842: LD_INT 8
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 69
9859: ST_TO_ADDR
// if belkovTeam < 3 then
9860: LD_EXP 45
9864: PUSH
9865: LD_INT 3
9867: LESS
9868: IFFALSE 9953
// begin for i := belkovTeam to 3 do
9870: LD_ADDR_VAR 0 1
9874: PUSH
9875: DOUBLE
9876: LD_EXP 45
9880: DEC
9881: ST_TO_ADDR
9882: LD_INT 3
9884: PUSH
9885: FOR_TO
9886: IFFALSE 9951
// begin un := kirovBaseSquad [ 1 ] ;
9888: LD_ADDR_VAR 0 4
9892: PUSH
9893: LD_EXP 43
9897: PUSH
9898: LD_INT 1
9900: ARRAY
9901: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9902: LD_ADDR_EXP 43
9906: PUSH
9907: LD_EXP 43
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: CALL_OW 3
9919: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9920: LD_ADDR_EXP 45
9924: PUSH
9925: LD_EXP 45
9929: PPUSH
9930: LD_EXP 45
9934: PUSH
9935: LD_INT 1
9937: PLUS
9938: PPUSH
9939: LD_VAR 0 4
9943: PPUSH
9944: CALL_OW 1
9948: ST_TO_ADDR
// end ;
9949: GO 9885
9951: POP
9952: POP
// end ; if Kirilenkova then
9953: LD_EXP 37
9957: IFFALSE 9981
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
9959: LD_ADDR_EXP 45
9963: PUSH
9964: LD_EXP 45
9968: PPUSH
9969: LD_EXP 37
9973: PPUSH
9974: CALL 54634 0 2
9978: ST_TO_ADDR
9979: GO 10020
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
9981: LD_ADDR_EXP 45
9985: PUSH
9986: LD_EXP 45
9990: PPUSH
9991: LD_EXP 43
9995: PPUSH
9996: LD_INT 25
9998: PUSH
9999: LD_INT 4
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PPUSH
10006: CALL_OW 72
10010: PUSH
10011: LD_INT 1
10013: ARRAY
10014: PPUSH
10015: CALL 54634 0 2
10019: ST_TO_ADDR
// ComExit ( Kurin ) ;
10020: LD_EXP 38
10024: PPUSH
10025: CALL 55032 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10029: LD_EXP 38
10033: PPUSH
10034: LD_VAR 0 2
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PPUSH
10043: CALL_OW 179
// wait ( 0 0$1 ) ;
10047: LD_INT 35
10049: PPUSH
10050: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10054: LD_VAR 0 2
10058: PUSH
10059: LD_INT 1
10061: ARRAY
10062: PPUSH
10063: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10067: LD_ADDR_VAR 0 4
10071: PUSH
10072: LD_VAR 0 2
10076: PUSH
10077: LD_INT 1
10079: ARRAY
10080: PPUSH
10081: CALL_OW 311
10085: ST_TO_ADDR
// ComExit ( un ) ;
10086: LD_VAR 0 4
10090: PPUSH
10091: CALL 55032 0 1
// wait ( 0 0$1 ) ;
10095: LD_INT 35
10097: PPUSH
10098: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10102: LD_VAR 0 4
10106: PPUSH
10107: LD_EXP 38
10111: PPUSH
10112: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10116: LD_EXP 36
10120: PPUSH
10121: LD_VAR 0 2
10125: PUSH
10126: LD_INT 1
10128: ARRAY
10129: PPUSH
10130: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10134: LD_INT 10
10136: PPUSH
10137: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10141: LD_EXP 38
10145: PPUSH
10146: LD_STRING D10-Kur-1
10148: PPUSH
10149: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10153: LD_EXP 36
10157: PPUSH
10158: LD_INT 122
10160: PPUSH
10161: LD_INT 112
10163: PPUSH
10164: CALL_OW 176
// wait ( 0 0$2 ) ;
10168: LD_INT 70
10170: PPUSH
10171: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10175: LD_EXP 36
10179: PPUSH
10180: LD_STRING D10-Bel-1
10182: PPUSH
10183: CALL_OW 88
// if belkovBrother then
10187: LD_EXP 32
10191: IFFALSE 10243
// begin Say ( Burlak , D10-Bur-1 ) ;
10193: LD_EXP 34
10197: PPUSH
10198: LD_STRING D10-Bur-1
10200: PPUSH
10201: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10205: LD_EXP 36
10209: PPUSH
10210: LD_STRING D10-Bel-2
10212: PPUSH
10213: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10217: LD_EXP 34
10221: PPUSH
10222: LD_STRING D10-Bur-2
10224: PPUSH
10225: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10229: LD_EXP 38
10233: PPUSH
10234: LD_STRING D10-Kur-2a
10236: PPUSH
10237: CALL_OW 88
// end else
10241: GO 10255
// begin Say ( Kurin , D10-Kur-2 ) end ;
10243: LD_EXP 38
10247: PPUSH
10248: LD_STRING D10-Kur-2
10250: PPUSH
10251: CALL_OW 88
// wait ( 0 0$2 ) ;
10255: LD_INT 70
10257: PPUSH
10258: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10262: LD_EXP 38
10266: PPUSH
10267: LD_STRING D10-Kur-2b
10269: PPUSH
10270: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10274: LD_VAR 0 4
10278: PPUSH
10279: LD_INT 66
10281: PPUSH
10282: LD_INT 97
10284: PPUSH
10285: CALL_OW 111
// wait ( 0 0$5 ) ;
10289: LD_INT 175
10291: PPUSH
10292: CALL_OW 67
// InGameOff ;
10296: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10300: LD_EXP 33
10304: PPUSH
10305: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10309: LD_STRING M4
10311: PPUSH
10312: CALL_OW 337
// wait ( 0 0$6 ) ;
10316: LD_INT 210
10318: PPUSH
10319: CALL_OW 67
// kurinDontWannaTalk := true ;
10323: LD_ADDR_EXP 5
10327: PUSH
10328: LD_INT 1
10330: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10331: LD_INT 140
10333: PPUSH
10334: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10338: LD_INT 35
10340: PPUSH
10341: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10345: LD_EXP 34
10349: PPUSH
10350: CALL_OW 310
10354: PUSH
10355: LD_EXP 34
10359: PPUSH
10360: LD_INT 106
10362: PPUSH
10363: CALL_OW 296
10367: PUSH
10368: LD_INT 12
10370: LESS
10371: OR
10372: IFFALSE 10338
// DialogueOn ;
10374: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10378: LD_EXP 40
10382: PPUSH
10383: LD_STRING D11-Pla-1
10385: PPUSH
10386: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10390: LD_EXP 34
10394: PPUSH
10395: LD_STRING D11-Bur-1
10397: PPUSH
10398: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: PUSH
10431: LD_INT 1
10433: GREATER
10434: IFFALSE 10448
// Say ( Burlak , D11-Bur-1a ) ;
10436: LD_EXP 34
10440: PPUSH
10441: LD_STRING D11-Bur-1a
10443: PPUSH
10444: CALL_OW 88
// DialogueOff ;
10448: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10452: LD_ADDR_EXP 8
10456: PUSH
10457: LD_INT 160
10459: PUSH
10460: LD_INT 150
10462: PUSH
10463: LD_INT 140
10465: PUSH
10466: LD_INT 120
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: PUSH
10475: LD_OWVAR 67
10479: ARRAY
10480: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10481: LD_STRING M5
10483: PPUSH
10484: CALL_OW 337
// kirovHasTank := true ;
10488: LD_ADDR_EXP 6
10492: PUSH
10493: LD_INT 1
10495: ST_TO_ADDR
// hasToBuildTank := true ;
10496: LD_ADDR_EXP 11
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// end ;
10504: PPOPN 4
10506: END
// every 0 0$2 trigger allianceAttacked do
10507: LD_EXP 13
10511: IFFALSE 10550
10513: GO 10515
10515: DISABLE
// begin DialogueOn ;
10516: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10520: LD_EXP 38
10524: PPUSH
10525: LD_STRING DArestKur
10527: PPUSH
10528: CALL_OW 88
// dwait ( 0 0$1 ) ;
10532: LD_INT 35
10534: PPUSH
10535: CALL_OW 68
// YouLost ( SelfAttack ) ;
10539: LD_STRING SelfAttack
10541: PPUSH
10542: CALL_OW 104
// DialogueOff ;
10546: CALL_OW 7
// end ;
10550: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10551: LD_INT 22
10553: PUSH
10554: LD_INT 3
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 21
10563: PUSH
10564: LD_INT 2
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PPUSH
10575: CALL_OW 69
10579: PUSH
10580: LD_INT 22
10582: PUSH
10583: LD_INT 3
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 21
10592: PUSH
10593: LD_INT 1
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PPUSH
10604: CALL_OW 69
10608: GREATEREQUAL
10609: PUSH
10610: LD_EXP 6
10614: AND
10615: IFFALSE 10785
10617: GO 10619
10619: DISABLE
// begin hasToBuildTank := false ;
10620: LD_ADDR_EXP 11
10624: PUSH
10625: LD_INT 0
10627: ST_TO_ADDR
// blockNorth := false ;
10628: LD_ADDR_EXP 7
10632: PUSH
10633: LD_INT 0
10635: ST_TO_ADDR
// InGameOn ;
10636: CALL_OW 8
// wait ( 0 0$2 ) ;
10640: LD_INT 70
10642: PPUSH
10643: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10647: LD_INT 106
10649: PPUSH
10650: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10654: LD_EXP 40
10658: PPUSH
10659: LD_INT 65
10661: PPUSH
10662: LD_INT 97
10664: PPUSH
10665: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10669: LD_EXP 40
10673: PPUSH
10674: LD_EXP 34
10678: PPUSH
10679: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10683: LD_EXP 34
10687: PPUSH
10688: LD_STRING D12-Bur-1
10690: PPUSH
10691: CALL_OW 88
// wait ( 0 0$1 ) ;
10695: LD_INT 35
10697: PPUSH
10698: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10702: LD_EXP 40
10706: PPUSH
10707: LD_STRING D12-Pla-1
10709: PPUSH
10710: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10714: LD_EXP 34
10718: PPUSH
10719: LD_STRING D12-Bur-2
10721: PPUSH
10722: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10726: LD_EXP 40
10730: PPUSH
10731: LD_STRING D12-Pla-2
10733: PPUSH
10734: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10738: LD_EXP 34
10742: PPUSH
10743: LD_STRING D12-Bur-3
10745: PPUSH
10746: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10750: LD_EXP 40
10754: PPUSH
10755: LD_STRING D12-Pla-3
10757: PPUSH
10758: CALL_OW 88
// hasAllTanks := true ;
10762: LD_ADDR_EXP 14
10766: PUSH
10767: LD_INT 1
10769: ST_TO_ADDR
// InGameOff ;
10770: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10774: LD_STRING M6
10776: PPUSH
10777: CALL_OW 337
// PrepareAmerican ;
10781: CALL 3961 0 0
// end ;
10785: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10786: LD_EXP 17
10790: IFFALSE 12554
10792: GO 10794
10794: DISABLE
10795: LD_INT 0
10797: PPUSH
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
// begin PrepareAmericanTrap ;
10804: CALL 4761 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10808: LD_ADDR_VAR 0 2
10812: PUSH
10813: LD_EXP 48
10817: PPUSH
10818: LD_INT 26
10820: PUSH
10821: LD_INT 1
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PPUSH
10828: CALL_OW 72
10832: PUSH
10833: LD_INT 1
10835: ARRAY
10836: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
10837: LD_INT 22
10839: PUSH
10840: LD_INT 3
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 3
10849: PUSH
10850: LD_INT 21
10852: PUSH
10853: LD_INT 3
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 60
10866: PUSH
10867: EMPTY
10868: LIST
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: LIST
10874: PPUSH
10875: CALL_OW 69
10879: PPUSH
10880: CALL_OW 141
// InGameOn ;
10884: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10888: LD_INT 69
10890: PPUSH
10891: LD_INT 22
10893: PPUSH
10894: CALL_OW 86
// wait ( 0 0$1 ) ;
10898: LD_INT 35
10900: PPUSH
10901: CALL_OW 67
// DialogueOn ;
10905: CALL_OW 6
// game_speed := 4 ;
10909: LD_ADDR_OWVAR 65
10913: PUSH
10914: LD_INT 4
10916: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
10917: LD_VAR 0 2
10921: PPUSH
10922: LD_STRING D13-Sol1-1
10924: PPUSH
10925: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
10929: LD_EXP 36
10933: PPUSH
10934: LD_STRING D13-Bel-1
10936: PPUSH
10937: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10941: LD_EXP 38
10945: PPUSH
10946: LD_STRING D13-Kur-1
10948: PPUSH
10949: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10953: LD_INT 10
10955: PPUSH
10956: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10960: LD_EXP 36
10964: PPUSH
10965: LD_STRING D13-Bel-2
10967: PPUSH
10968: CALL_OW 94
// DialogueOff ;
10972: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
10976: LD_EXP 36
10980: PPUSH
10981: LD_INT 76
10983: PPUSH
10984: LD_INT 20
10986: PPUSH
10987: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
10991: LD_EXP 45
10995: PPUSH
10996: LD_INT 72
10998: PPUSH
10999: LD_INT 20
11001: PPUSH
11002: CALL_OW 111
// wait ( 0 0$2 ) ;
11006: LD_INT 70
11008: PPUSH
11009: CALL_OW 67
// for i in usTrapForces do
11013: LD_ADDR_VAR 0 1
11017: PUSH
11018: LD_EXP 48
11022: PUSH
11023: FOR_IN
11024: IFFALSE 11057
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11026: LD_VAR 0 1
11030: PPUSH
11031: LD_INT 7
11033: PPUSH
11034: LD_INT 0
11036: PPUSH
11037: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: LD_EXP 36
11050: PPUSH
11051: CALL_OW 119
// end ;
11055: GO 11023
11057: POP
11058: POP
// wait ( 0 0$0.3 ) ;
11059: LD_INT 10
11061: PPUSH
11062: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11066: LD_EXP 48
11070: PPUSH
11071: LD_INT 65
11073: PPUSH
11074: LD_INT 18
11076: PPUSH
11077: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11081: LD_INT 70
11083: PPUSH
11084: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11088: LD_EXP 48
11092: PPUSH
11093: LD_INT 101
11095: PUSH
11096: LD_INT 3
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PPUSH
11103: CALL_OW 72
11107: PUSH
11108: LD_INT 3
11110: GREATER
11111: IFFALSE 11081
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11113: LD_INT 65
11115: PPUSH
11116: LD_INT 18
11118: PPUSH
11119: LD_INT 3
11121: PPUSH
11122: LD_INT 26
11124: NEG
11125: PPUSH
11126: CALL_OW 330
// DialogueOn ;
11130: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11134: LD_VAR 0 2
11138: PPUSH
11139: LD_STRING D14-Sol1-1
11141: PPUSH
11142: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11146: LD_EXP 36
11150: PPUSH
11151: LD_STRING D14-Bel-1
11153: PPUSH
11154: CALL_OW 88
// DialogueOff ;
11158: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11162: LD_INT 65
11164: PPUSH
11165: LD_INT 18
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11175: LD_EXP 45
11179: PPUSH
11180: LD_INT 31
11182: PPUSH
11183: LD_INT 9
11185: PPUSH
11186: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11190: LD_EXP 48
11194: PPUSH
11195: LD_INT 50
11197: PPUSH
11198: LD_INT 16
11200: PPUSH
11201: CALL_OW 174
// wait ( 0 0$2 ) ;
11205: LD_INT 70
11207: PPUSH
11208: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11212: LD_ADDR_VAR 0 6
11216: PUSH
11217: LD_EXP 36
11221: PPUSH
11222: CALL_OW 310
11226: ST_TO_ADDR
// if not belkovTank then
11227: LD_VAR 0 6
11231: NOT
11232: IFFALSE 11272
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11234: LD_ADDR_VAR 0 6
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_INT 6
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 21
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PPUSH
11263: CALL_OW 69
11267: PUSH
11268: LD_INT 1
11270: ARRAY
11271: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11272: LD_EXP 36
11276: PPUSH
11277: LD_INT 58
11279: PPUSH
11280: LD_INT 21
11282: PPUSH
11283: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11287: LD_EXP 36
11291: PPUSH
11292: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11296: LD_EXP 36
11300: PPUSH
11301: LD_INT 53
11303: PPUSH
11304: LD_INT 18
11306: PPUSH
11307: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11311: LD_EXP 36
11315: PPUSH
11316: LD_INT 31
11318: PPUSH
11319: LD_INT 9
11321: PPUSH
11322: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11326: LD_INT 35
11328: PPUSH
11329: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_EXP 36
11342: PUSH
11343: LD_EXP 45
11347: UNION
11348: PUSH
11349: LD_VAR 0 6
11353: UNION
11354: PUSH
11355: FOR_IN
11356: IFFALSE 11387
// if GetLives ( i ) < 800 then
11358: LD_VAR 0 1
11362: PPUSH
11363: CALL_OW 256
11367: PUSH
11368: LD_INT 800
11370: LESS
11371: IFFALSE 11385
// SetLives ( i , 800 ) ;
11373: LD_VAR 0 1
11377: PPUSH
11378: LD_INT 800
11380: PPUSH
11381: CALL_OW 234
11385: GO 11355
11387: POP
11388: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11389: LD_EXP 36
11393: PPUSH
11394: LD_INT 31
11396: PPUSH
11397: LD_INT 9
11399: PPUSH
11400: CALL_OW 297
11404: PUSH
11405: LD_INT 4
11407: LESS
11408: IFFALSE 11326
// for i := 1 to Difficulty do
11410: LD_ADDR_VAR 0 1
11414: PUSH
11415: DOUBLE
11416: LD_INT 1
11418: DEC
11419: ST_TO_ADDR
11420: LD_OWVAR 67
11424: PUSH
11425: FOR_TO
11426: IFFALSE 11468
// if i <= belkovTeam then
11428: LD_VAR 0 1
11432: PUSH
11433: LD_EXP 45
11437: LESSEQUAL
11438: IFFALSE 11466
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11440: LD_EXP 45
11444: PUSH
11445: LD_VAR 0 1
11449: ARRAY
11450: PPUSH
11451: LD_INT 600
11453: PPUSH
11454: LD_INT 800
11456: PPUSH
11457: CALL_OW 12
11461: PPUSH
11462: CALL_OW 234
11466: GO 11425
11468: POP
11469: POP
// SetLives ( Belkov , 820 ) ;
11470: LD_EXP 36
11474: PPUSH
11475: LD_INT 820
11477: PPUSH
11478: CALL_OW 234
// InGameOff ;
11482: CALL_OW 9
// DialogueOn ;
11486: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11490: LD_EXP 36
11494: PPUSH
11495: LD_STRING D14-Bel-1a
11497: PPUSH
11498: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11502: LD_EXP 38
11506: PPUSH
11507: LD_STRING D14-Kur-1
11509: PPUSH
11510: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11514: LD_EXP 36
11518: PPUSH
11519: LD_STRING D14-Bel-2
11521: PPUSH
11522: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11526: LD_EXP 38
11530: PPUSH
11531: LD_STRING D14-Kur-2
11533: PPUSH
11534: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11538: LD_EXP 34
11542: PPUSH
11543: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11547: LD_EXP 34
11551: PPUSH
11552: LD_STRING D14a-Bur-1
11554: PPUSH
11555: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11559: LD_EXP 40
11563: PPUSH
11564: LD_STRING D14a-Pla-1
11566: PPUSH
11567: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11571: LD_EXP 34
11575: PPUSH
11576: LD_STRING D14a-Bur-2
11578: PPUSH
11579: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11583: LD_EXP 40
11587: PPUSH
11588: LD_STRING D14a-Pla-2
11590: PPUSH
11591: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11595: LD_EXP 34
11599: PPUSH
11600: LD_STRING D14a-Bur-3
11602: PPUSH
11603: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11607: LD_EXP 40
11611: PPUSH
11612: LD_STRING D14a-Pla-3
11614: PPUSH
11615: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11619: LD_EXP 34
11623: PPUSH
11624: LD_STRING D14a-Bur-4
11626: PPUSH
11627: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11631: LD_EXP 40
11635: PPUSH
11636: LD_STRING D14a-Pla-4
11638: PPUSH
11639: CALL_OW 88
// DialogueOff ;
11643: CALL_OW 7
// belkovTrapped := true ;
11647: LD_ADDR_EXP 18
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11655: LD_EXP 48
11659: PPUSH
11660: LD_INT 68
11662: PPUSH
11663: LD_INT 16
11665: PPUSH
11666: CALL_OW 111
// if belkovTank then
11670: LD_VAR 0 6
11674: IFFALSE 11713
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11676: LD_EXP 48
11680: PUSH
11681: LD_INT 1
11683: ARRAY
11684: PPUSH
11685: LD_VAR 0 6
11689: PPUSH
11690: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11694: LD_EXP 48
11698: PUSH
11699: LD_INT 1
11701: ARRAY
11702: PPUSH
11703: LD_INT 69
11705: PPUSH
11706: LD_INT 20
11708: PPUSH
11709: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11713: LD_EXP 36
11717: PPUSH
11718: LD_INT 40
11720: PPUSH
11721: LD_INT 17
11723: PPUSH
11724: CALL_OW 111
// AddComHold ( Belkov ) ;
11728: LD_EXP 36
11732: PPUSH
11733: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11737: LD_ADDR_VAR 0 3
11741: PUSH
11742: LD_INT 44
11744: PUSH
11745: LD_INT 18
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 42
11754: PUSH
11755: LD_INT 16
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 40
11764: PUSH
11765: LD_INT 15
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 44
11774: PUSH
11775: LD_INT 20
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 42
11784: PUSH
11785: LD_INT 20
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 42
11794: PUSH
11795: LD_INT 12
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 42
11804: PUSH
11805: LD_INT 8
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11821: LD_ADDR_VAR 0 1
11825: PUSH
11826: LD_EXP 45
11830: PPUSH
11831: LD_INT 25
11833: PUSH
11834: LD_INT 1
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PPUSH
11841: CALL_OW 72
11845: PUSH
11846: FOR_IN
11847: IFFALSE 11913
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11849: LD_VAR 0 1
11853: PPUSH
11854: LD_VAR 0 3
11858: PUSH
11859: LD_INT 1
11861: ARRAY
11862: PUSH
11863: LD_INT 1
11865: ARRAY
11866: PPUSH
11867: LD_VAR 0 3
11871: PUSH
11872: LD_INT 1
11874: ARRAY
11875: PUSH
11876: LD_INT 2
11878: ARRAY
11879: PPUSH
11880: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11884: LD_ADDR_VAR 0 3
11888: PUSH
11889: LD_VAR 0 3
11893: PPUSH
11894: LD_INT 1
11896: PPUSH
11897: CALL_OW 3
11901: ST_TO_ADDR
// AddComCrawl ( i ) ;
11902: LD_VAR 0 1
11906: PPUSH
11907: CALL_OW 197
// end ;
11911: GO 11846
11913: POP
11914: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11915: LD_EXP 45
11919: PPUSH
11920: LD_INT 25
11922: PUSH
11923: LD_INT 4
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 72
11934: IFFALSE 11966
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11936: LD_EXP 45
11940: PPUSH
11941: LD_INT 25
11943: PUSH
11944: LD_INT 4
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PPUSH
11951: CALL_OW 72
11955: PPUSH
11956: LD_INT 38
11958: PPUSH
11959: LD_INT 18
11961: PPUSH
11962: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
11966: LD_ADDR_VAR 0 7
11970: PUSH
11971: LD_INT 9450
11973: PUSH
11974: LD_INT 8400
11976: PUSH
11977: LD_INT 6650
11979: PUSH
11980: LD_INT 5250
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: PUSH
11989: LD_OWVAR 67
11993: ARRAY
11994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11995: LD_INT 35
11997: PPUSH
11998: CALL_OW 67
// timer := timer - 0 0$1 ;
12002: LD_ADDR_VAR 0 7
12006: PUSH
12007: LD_VAR 0 7
12011: PUSH
12012: LD_INT 35
12014: MINUS
12015: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12016: LD_INT 19
12018: PPUSH
12019: LD_INT 22
12021: PUSH
12022: LD_INT 3
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 70
12033: IFFALSE 12043
// timer := 0 0$0 ;
12035: LD_ADDR_VAR 0 7
12039: PUSH
12040: LD_INT 0
12042: ST_TO_ADDR
// until timer <= 0 ;
12043: LD_VAR 0 7
12047: PUSH
12048: LD_INT 0
12050: LESSEQUAL
12051: IFFALSE 11995
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12053: LD_EXP 48
12057: PPUSH
12058: LD_INT 50
12060: PUSH
12061: EMPTY
12062: LIST
12063: PPUSH
12064: CALL_OW 72
12068: NOT
12069: IFFALSE 12073
// exit ;
12071: GO 12554
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12073: LD_ADDR_VAR 0 4
12077: PUSH
12078: LD_EXP 48
12082: PPUSH
12083: LD_INT 25
12085: PUSH
12086: LD_INT 1
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: LD_INT 54
12098: PUSH
12099: EMPTY
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 72
12114: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12115: LD_ADDR_VAR 0 5
12119: PUSH
12120: LD_EXP 48
12124: PPUSH
12125: LD_INT 25
12127: PUSH
12128: LD_INT 4
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: LD_INT 54
12140: PUSH
12141: EMPTY
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PPUSH
12152: CALL_OW 72
12156: ST_TO_ADDR
// for i in sol do
12157: LD_ADDR_VAR 0 1
12161: PUSH
12162: LD_VAR 0 4
12166: PUSH
12167: FOR_IN
12168: IFFALSE 12184
// SetTag ( i , 0 ) ;
12170: LD_VAR 0 1
12174: PPUSH
12175: LD_INT 0
12177: PPUSH
12178: CALL_OW 109
12182: GO 12167
12184: POP
12185: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12186: LD_VAR 0 5
12190: PPUSH
12191: LD_INT 60
12193: PPUSH
12194: LD_INT 8
12196: PPUSH
12197: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12201: LD_INT 22
12203: PUSH
12204: LD_INT 1
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 21
12213: PUSH
12214: LD_INT 2
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 69
12229: IFFALSE 12270
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12231: LD_INT 22
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 21
12243: PUSH
12244: LD_INT 2
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: PPUSH
12260: LD_INT 53
12262: PPUSH
12263: LD_INT 24
12265: PPUSH
12266: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12270: LD_INT 18
12272: PPUSH
12273: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12277: LD_ADDR_VAR 0 4
12281: PUSH
12282: LD_EXP 48
12286: PPUSH
12287: LD_INT 25
12289: PUSH
12290: LD_INT 1
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 50
12299: PUSH
12300: EMPTY
12301: LIST
12302: PUSH
12303: LD_INT 3
12305: PUSH
12306: LD_INT 54
12308: PUSH
12309: EMPTY
12310: LIST
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: PPUSH
12321: CALL_OW 72
12325: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12326: LD_VAR 0 4
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: CALL 52203 0 2
12338: PUSH
12339: LD_VAR 0 4
12343: EQUAL
12344: IFFALSE 12383
// begin wait ( 0 0$3 ) ;
12346: LD_INT 105
12348: PPUSH
12349: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12353: LD_VAR 0 4
12357: PPUSH
12358: LD_INT 41
12360: PPUSH
12361: LD_INT 18
12363: PPUSH
12364: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12368: LD_VAR 0 5
12372: PPUSH
12373: LD_INT 60
12375: PPUSH
12376: LD_INT 8
12378: PPUSH
12379: CALL_OW 111
// end ; for i in sol do
12383: LD_ADDR_VAR 0 1
12387: PUSH
12388: LD_VAR 0 4
12392: PUSH
12393: FOR_IN
12394: IFFALSE 12469
// if GetLives ( i ) < 800 then
12396: LD_VAR 0 1
12400: PPUSH
12401: CALL_OW 256
12405: PUSH
12406: LD_INT 800
12408: LESS
12409: IFFALSE 12440
// begin SetTag ( i , 1 ) ;
12411: LD_VAR 0 1
12415: PPUSH
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12423: LD_VAR 0 1
12427: PPUSH
12428: LD_INT 60
12430: PPUSH
12431: LD_INT 8
12433: PPUSH
12434: CALL_OW 111
// end else
12438: GO 12467
// if GetLives ( i ) = 1000 then
12440: LD_VAR 0 1
12444: PPUSH
12445: CALL_OW 256
12449: PUSH
12450: LD_INT 1000
12452: EQUAL
12453: IFFALSE 12467
// SetTag ( i , 0 ) ;
12455: LD_VAR 0 1
12459: PPUSH
12460: LD_INT 0
12462: PPUSH
12463: CALL_OW 109
12467: GO 12393
12469: POP
12470: POP
// until belkovDied or not sol ;
12471: LD_EXP 19
12475: PUSH
12476: LD_VAR 0 4
12480: NOT
12481: OR
12482: IFFALSE 12270
// if not sol then
12484: LD_VAR 0 4
12488: NOT
12489: IFFALSE 12493
// exit ;
12491: GO 12554
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12493: LD_VAR 0 4
12497: PUSH
12498: LD_VAR 0 5
12502: ADD
12503: PPUSH
12504: LD_INT 56
12506: PPUSH
12507: LD_INT 25
12509: PPUSH
12510: CALL_OW 111
// wait ( 0 0$30 ) ;
12514: LD_INT 1050
12516: PPUSH
12517: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12521: LD_EXP 48
12525: PPUSH
12526: LD_INT 66
12528: PPUSH
12529: LD_INT 96
12531: PPUSH
12532: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12536: LD_VAR 0 5
12540: PPUSH
12541: LD_VAR 0 4
12545: PUSH
12546: LD_INT 1
12548: ARRAY
12549: PPUSH
12550: CALL_OW 112
// end ;
12554: PPOPN 7
12556: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12557: LD_EXP 18
12561: PUSH
12562: LD_EXP 19
12566: NOT
12567: AND
12568: PUSH
12569: LD_INT 9
12571: PPUSH
12572: LD_INT 22
12574: PUSH
12575: LD_INT 3
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PPUSH
12582: CALL_OW 70
12586: AND
12587: IFFALSE 12907
12589: GO 12591
12591: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12592: LD_STRING QAttackAm
12594: PPUSH
12595: CALL_OW 97
12599: PUSH
12600: LD_INT 1
12602: DOUBLE
12603: EQUAL
12604: IFTRUE 12608
12606: GO 12675
12608: POP
// begin initiative := true ;
12609: LD_ADDR_EXP 31
12613: PUSH
12614: LD_INT 1
12616: ST_TO_ADDR
// DialogueOn ;
12617: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12621: LD_EXP 34
12625: PPUSH
12626: LD_STRING D17-Bur-1
12628: PPUSH
12629: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12633: LD_EXP 40
12637: PPUSH
12638: LD_STRING D17-Pla-1
12640: PPUSH
12641: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12645: LD_EXP 34
12649: PPUSH
12650: LD_STRING D17-Bur-2
12652: PPUSH
12653: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12657: LD_EXP 40
12661: PPUSH
12662: LD_STRING D17-Pla-2
12664: PPUSH
12665: CALL_OW 94
// DialogueOff ;
12669: CALL_OW 7
// end ; 2 :
12673: GO 12837
12675: LD_INT 2
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12775
12683: POP
// begin initiative := true ;
12684: LD_ADDR_EXP 31
12688: PUSH
12689: LD_INT 1
12691: ST_TO_ADDR
// DialogueOn ;
12692: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12696: LD_EXP 34
12700: PPUSH
12701: LD_STRING D18-Bur-1
12703: PPUSH
12704: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12708: LD_EXP 40
12712: PPUSH
12713: LD_STRING D18-Pla-1
12715: PPUSH
12716: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12720: LD_EXP 34
12724: PPUSH
12725: LD_STRING D18-Bur-2
12727: PPUSH
12728: CALL_OW 88
// if not reinforcementsGained then
12732: LD_EXP 25
12736: NOT
12737: IFFALSE 12757
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12739: LD_EXP 40
12743: PPUSH
12744: LD_STRING D18-Pla-2
12746: PPUSH
12747: CALL_OW 94
// SendReinforcements ;
12751: CALL 3302 0 0
// end else
12755: GO 12769
// SayRadio ( Platonov , D22-Pla-1b ) ;
12757: LD_EXP 40
12761: PPUSH
12762: LD_STRING D22-Pla-1b
12764: PPUSH
12765: CALL_OW 94
// DialogueOff ;
12769: CALL_OW 7
// end ; 3 :
12773: GO 12837
12775: LD_INT 3
12777: DOUBLE
12778: EQUAL
12779: IFTRUE 12783
12781: GO 12836
12783: POP
// begin if IsOk ( Gnyevko ) then
12784: LD_EXP 35
12788: PPUSH
12789: CALL_OW 302
12793: IFFALSE 12809
// Say ( Gnyevko , D19A-Gny-1 ) else
12795: LD_EXP 35
12799: PPUSH
12800: LD_STRING D19A-Gny-1
12802: PPUSH
12803: CALL_OW 88
12807: GO 12832
// if IsOk ( Kovalyuk ) then
12809: LD_EXP 39
12813: PPUSH
12814: CALL_OW 302
12818: IFFALSE 12832
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12820: LD_EXP 39
12824: PPUSH
12825: LD_STRING D19A-Kov-1
12827: PPUSH
12828: CALL_OW 88
// exit ;
12832: GO 12907
// end ; end ;
12834: GO 12837
12836: POP
// if IsOk ( Gnyevko ) then
12837: LD_EXP 35
12841: PPUSH
12842: CALL_OW 302
12846: IFFALSE 12872
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12848: LD_EXP 35
12852: PPUSH
12853: LD_STRING D19-Gny-1
12855: PPUSH
12856: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12860: LD_EXP 34
12864: PPUSH
12865: LD_STRING D19-Bur-1
12867: PPUSH
12868: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12872: LD_EXP 39
12876: PPUSH
12877: CALL_OW 302
12881: IFFALSE 12907
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12883: LD_EXP 39
12887: PPUSH
12888: LD_STRING D19-Kov-1
12890: PPUSH
12891: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12895: LD_EXP 34
12899: PPUSH
12900: LD_STRING D19-Bur-2
12902: PPUSH
12903: CALL_OW 88
// end ; end ;
12907: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12908: LD_EXP 18
12912: PUSH
12913: LD_EXP 19
12917: NOT
12918: AND
12919: PUSH
12920: LD_INT 16
12922: PPUSH
12923: LD_INT 22
12925: PUSH
12926: LD_INT 3
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PPUSH
12933: CALL_OW 70
12937: AND
12938: IFFALSE 13166
12940: GO 12942
12942: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12943: LD_STRING QAttackBw
12945: PPUSH
12946: CALL_OW 97
12950: PUSH
12951: LD_INT 1
12953: DOUBLE
12954: EQUAL
12955: IFTRUE 12959
12957: GO 13002
12959: POP
// begin initiative := true ;
12960: LD_ADDR_EXP 31
12964: PUSH
12965: LD_INT 1
12967: ST_TO_ADDR
// DialogueOn ;
12968: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12972: LD_EXP 34
12976: PPUSH
12977: LD_STRING D21-Bur-1
12979: PPUSH
12980: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12984: LD_EXP 40
12988: PPUSH
12989: LD_STRING D21-Pla-1
12991: PPUSH
12992: CALL_OW 94
// DialogueOff ;
12996: CALL_OW 7
// end ; 2 :
13000: GO 13117
13002: LD_INT 2
13004: DOUBLE
13005: EQUAL
13006: IFTRUE 13010
13008: GO 13105
13010: POP
// begin initiative := true ;
13011: LD_ADDR_EXP 31
13015: PUSH
13016: LD_INT 1
13018: ST_TO_ADDR
// DialogueOn ;
13019: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13023: LD_EXP 34
13027: PPUSH
13028: LD_STRING D22-Bur-1
13030: PPUSH
13031: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13035: LD_EXP 25
13039: NOT
13040: PUSH
13041: LD_EXP 22
13045: AND
13046: IFFALSE 13066
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13048: LD_EXP 40
13052: PPUSH
13053: LD_STRING D22-Pla-1
13055: PPUSH
13056: CALL_OW 94
// SendReinforcements ;
13060: CALL 3302 0 0
// end else
13064: GO 13099
// if not westOutpostDestroyed then
13066: LD_EXP 22
13070: NOT
13071: IFFALSE 13087
// SayRadio ( Platonov , D22-Pla-1a ) else
13073: LD_EXP 40
13077: PPUSH
13078: LD_STRING D22-Pla-1a
13080: PPUSH
13081: CALL_OW 94
13085: GO 13099
// SayRadio ( Platonov , D22-Pla-1b ) ;
13087: LD_EXP 40
13091: PPUSH
13092: LD_STRING D22-Pla-1b
13094: PPUSH
13095: CALL_OW 94
// DialogueOff ;
13099: CALL_OW 7
// end ; 3 :
13103: GO 13117
13105: LD_INT 3
13107: DOUBLE
13108: EQUAL
13109: IFTRUE 13113
13111: GO 13116
13113: POP
// begin end ; end ;
13114: GO 13117
13116: POP
// ChangeMissionObjectives ( M9 ) ;
13117: LD_STRING M9
13119: PPUSH
13120: CALL_OW 337
// wait ( 0 0$1 ) ;
13124: LD_INT 35
13126: PPUSH
13127: CALL_OW 67
// if IsOk ( Gnyevko ) then
13131: LD_EXP 35
13135: PPUSH
13136: CALL_OW 302
13140: IFFALSE 13166
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13142: LD_EXP 35
13146: PPUSH
13147: LD_STRING D23-Gny-1
13149: PPUSH
13150: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13154: LD_EXP 34
13158: PPUSH
13159: LD_STRING D23-Bur-1
13161: PPUSH
13162: CALL_OW 88
// end ; end ;
13166: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13167: LD_EXP 18
13171: PUSH
13172: LD_EXP 19
13176: AND
13177: PUSH
13178: LD_EXP 28
13182: NOT
13183: AND
13184: PUSH
13185: LD_EXP 45
13189: PPUSH
13190: LD_INT 91
13192: PUSH
13193: LD_EXP 34
13197: PUSH
13198: LD_INT 8
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 72
13210: AND
13211: IFFALSE 13255
13213: GO 13215
13215: DISABLE
13216: LD_INT 0
13218: PPUSH
// begin for i in belkovTeam do
13219: LD_ADDR_VAR 0 1
13223: PUSH
13224: LD_EXP 45
13228: PUSH
13229: FOR_IN
13230: IFFALSE 13246
// SetSide ( i , 3 ) ;
13232: LD_VAR 0 1
13236: PPUSH
13237: LD_INT 3
13239: PPUSH
13240: CALL_OW 235
13244: GO 13229
13246: POP
13247: POP
// ChangeMissionObjectives ( M9a ) ;
13248: LD_STRING M9a
13250: PPUSH
13251: CALL_OW 337
// end ;
13255: PPOPN 1
13257: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13258: LD_EXP 34
13262: PPUSH
13263: LD_EXP 36
13267: PPUSH
13268: CALL_OW 296
13272: PUSH
13273: LD_INT 6
13275: LESS
13276: PUSH
13277: LD_EXP 18
13281: AND
13282: PUSH
13283: LD_EXP 36
13287: PPUSH
13288: CALL_OW 302
13292: AND
13293: PUSH
13294: LD_INT 3
13296: PPUSH
13297: CALL_OW 463
13301: NOT
13302: AND
13303: IFFALSE 13618
13305: GO 13307
13307: DISABLE
13308: LD_INT 0
13310: PPUSH
13311: PPUSH
// begin InGameOn ;
13312: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13316: LD_EXP 34
13320: PPUSH
13321: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13325: LD_EXP 34
13329: PPUSH
13330: LD_INT 37
13332: PPUSH
13333: LD_INT 17
13335: PPUSH
13336: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13340: LD_EXP 34
13344: PPUSH
13345: LD_EXP 36
13349: PPUSH
13350: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13354: LD_EXP 36
13358: PPUSH
13359: LD_EXP 34
13363: PPUSH
13364: CALL_OW 119
// p := 0 ;
13368: LD_ADDR_VAR 0 2
13372: PUSH
13373: LD_INT 0
13375: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13376: LD_INT 35
13378: PPUSH
13379: CALL_OW 67
// p := p + 1 ;
13383: LD_ADDR_VAR 0 2
13387: PUSH
13388: LD_VAR 0 2
13392: PUSH
13393: LD_INT 1
13395: PLUS
13396: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13397: LD_EXP 34
13401: PPUSH
13402: LD_EXP 36
13406: PPUSH
13407: CALL_OW 296
13411: PUSH
13412: LD_INT 4
13414: LESS
13415: PUSH
13416: LD_VAR 0 2
13420: PUSH
13421: LD_INT 6
13423: GREATER
13424: OR
13425: IFFALSE 13376
// ComTurnUnit ( Burlak , Belkov ) ;
13427: LD_EXP 34
13431: PPUSH
13432: LD_EXP 36
13436: PPUSH
13437: CALL_OW 119
// DialogueOn ;
13441: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13445: LD_EXP 36
13449: PPUSH
13450: LD_STRING D24-Bel-1
13452: PPUSH
13453: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13457: LD_EXP 34
13461: PPUSH
13462: LD_STRING D24-Bur-1
13464: PPUSH
13465: CALL_OW 88
// if belkovBrother then
13469: LD_EXP 32
13473: IFFALSE 13487
// Say ( Burlak , D24-Bur-1a ) ;
13475: LD_EXP 34
13479: PPUSH
13480: LD_STRING D24-Bur-1a
13482: PPUSH
13483: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13487: LD_EXP 36
13491: PPUSH
13492: LD_STRING D24-Bel-2
13494: PPUSH
13495: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13499: LD_EXP 34
13503: PPUSH
13504: LD_STRING D24-Bur-2
13506: PPUSH
13507: CALL_OW 88
// if vehCaptured then
13511: LD_EXP 16
13515: IFFALSE 13529
// Say ( Burlak , D24-Bur-2a ) ;
13517: LD_EXP 34
13521: PPUSH
13522: LD_STRING D24-Bur-2a
13524: PPUSH
13525: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13529: LD_EXP 40
13533: PPUSH
13534: LD_STRING D24-Pla-2
13536: PPUSH
13537: CALL_OW 94
// if not westOutpostDestroyed then
13541: LD_EXP 22
13545: NOT
13546: IFFALSE 13560
// SayRadio ( Platonov , D24-Pla-2a ) ;
13548: LD_EXP 40
13552: PPUSH
13553: LD_STRING D24-Pla-2a
13555: PPUSH
13556: CALL_OW 94
// DialogueOff ;
13560: CALL_OW 7
// InGameOff ;
13564: CALL_OW 9
// belkovSaved := true ;
13568: LD_ADDR_EXP 28
13572: PUSH
13573: LD_INT 1
13575: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_EXP 45
13585: PUSH
13586: LD_EXP 36
13590: UNION
13591: PUSH
13592: FOR_IN
13593: IFFALSE 13609
// SetSide ( i , 3 ) ;
13595: LD_VAR 0 1
13599: PPUSH
13600: LD_INT 3
13602: PPUSH
13603: CALL_OW 235
13607: GO 13592
13609: POP
13610: POP
// ChangeMissionObjectives ( M9a ) ;
13611: LD_STRING M9a
13613: PPUSH
13614: CALL_OW 337
// end ;
13618: PPOPN 2
13620: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13621: LD_INT 3
13623: PPUSH
13624: LD_INT 22
13626: PUSH
13627: LD_INT 1
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 95
13636: PUSH
13637: LD_INT 8
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 69
13652: PPUSH
13653: CALL 57907 0 2
13657: IFFALSE 13842
13659: GO 13661
13661: DISABLE
// begin DialogueOn ;
13662: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13666: LD_INT 49
13668: PPUSH
13669: LD_INT 57
13671: PPUSH
13672: LD_INT 3
13674: PPUSH
13675: LD_INT 12
13677: NEG
13678: PPUSH
13679: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13683: LD_INT 49
13685: PPUSH
13686: LD_INT 57
13688: PPUSH
13689: LD_INT 3
13691: PPUSH
13692: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13696: LD_INT 49
13698: PPUSH
13699: LD_INT 57
13701: PPUSH
13702: CALL_OW 84
// if not eastOutpostDiscovered then
13706: LD_EXP 21
13710: NOT
13711: IFFALSE 13751
// begin Say ( Burlak , D15-Bur-1 ) ;
13713: LD_EXP 34
13717: PPUSH
13718: LD_STRING D15-Bur-1
13720: PPUSH
13721: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13725: LD_EXP 35
13729: PPUSH
13730: LD_STRING D15-Gny-1
13732: PPUSH
13733: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13737: LD_EXP 39
13741: PPUSH
13742: LD_STRING D15-Kov-1
13744: PPUSH
13745: CALL_OW 88
// end else
13749: GO 13787
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13751: LD_EXP 39
13755: PPUSH
13756: LD_STRING D16-Kov-1
13758: PPUSH
13759: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13763: LD_EXP 34
13767: PPUSH
13768: LD_STRING D16-Bur-1
13770: PPUSH
13771: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13775: LD_EXP 35
13779: PPUSH
13780: LD_STRING D16-Gny-1
13782: PPUSH
13783: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13787: LD_EXP 34
13791: PPUSH
13792: LD_STRING D15-Bur-2
13794: PPUSH
13795: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13799: LD_EXP 39
13803: PPUSH
13804: LD_STRING D15-Kov-2
13806: PPUSH
13807: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13811: LD_EXP 34
13815: PPUSH
13816: LD_STRING D15-Bur-3
13818: PPUSH
13819: CALL_OW 88
// DialogueOff ;
13823: CALL_OW 7
// westOutpostDiscovered := true ;
13827: LD_ADDR_EXP 20
13831: PUSH
13832: LD_INT 1
13834: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13835: LD_STRING M7
13837: PPUSH
13838: CALL_OW 337
// end ;
13842: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13843: LD_INT 3
13845: PPUSH
13846: LD_INT 22
13848: PUSH
13849: LD_INT 1
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 95
13858: PUSH
13859: LD_INT 15
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PPUSH
13870: CALL_OW 69
13874: PPUSH
13875: CALL 57907 0 2
13879: IFFALSE 14020
13881: GO 13883
13883: DISABLE
// begin DialogueOn ;
13884: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13888: LD_INT 95
13890: PPUSH
13891: LD_INT 65
13893: PPUSH
13894: LD_INT 3
13896: PPUSH
13897: LD_INT 12
13899: NEG
13900: PPUSH
13901: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13905: LD_INT 95
13907: PPUSH
13908: LD_INT 65
13910: PPUSH
13911: LD_INT 3
13913: PPUSH
13914: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13918: LD_INT 95
13920: PPUSH
13921: LD_INT 65
13923: PPUSH
13924: CALL_OW 84
// if westOutpostDiscovered then
13928: LD_EXP 20
13932: IFFALSE 13972
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13934: LD_EXP 39
13938: PPUSH
13939: LD_STRING D16-Kov-1
13941: PPUSH
13942: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13946: LD_EXP 34
13950: PPUSH
13951: LD_STRING D16-Bur-1
13953: PPUSH
13954: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13958: LD_EXP 35
13962: PPUSH
13963: LD_STRING D16-Gny-1
13965: PPUSH
13966: CALL_OW 88
// end else
13970: GO 14008
// begin Say ( Burlak , D15-Bur-1 ) ;
13972: LD_EXP 34
13976: PPUSH
13977: LD_STRING D15-Bur-1
13979: PPUSH
13980: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13984: LD_EXP 35
13988: PPUSH
13989: LD_STRING D15-Gny-1
13991: PPUSH
13992: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13996: LD_EXP 39
14000: PPUSH
14001: LD_STRING D15-Kov-1
14003: PPUSH
14004: CALL_OW 88
// end ; DialogueOff ;
14008: CALL_OW 7
// eastOutpostDiscovered := true ;
14012: LD_ADDR_EXP 21
14016: PUSH
14017: LD_INT 1
14019: ST_TO_ADDR
// end ;
14020: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14021: LD_INT 8
14023: PPUSH
14024: LD_INT 22
14026: PUSH
14027: LD_INT 1
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 50
14036: PUSH
14037: EMPTY
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 70
14048: PUSH
14049: LD_INT 0
14051: EQUAL
14052: PUSH
14053: LD_EXP 20
14057: AND
14058: IFFALSE 14102
14060: GO 14062
14062: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14063: LD_EXP 34
14067: PPUSH
14068: LD_STRING D20-Bur-1
14070: PPUSH
14071: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14075: LD_EXP 40
14079: PPUSH
14080: LD_STRING D20-Pla-1
14082: PPUSH
14083: CALL_OW 94
// westOutpostDestroyed := true ;
14087: LD_ADDR_EXP 22
14091: PUSH
14092: LD_INT 1
14094: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14095: LD_STRING M8
14097: PPUSH
14098: CALL_OW 337
// end ;
14102: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14103: LD_INT 15
14105: PPUSH
14106: LD_INT 22
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 50
14118: PUSH
14119: EMPTY
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PPUSH
14126: CALL_OW 70
14130: PUSH
14131: LD_INT 0
14133: EQUAL
14134: PUSH
14135: LD_EXP 21
14139: AND
14140: IFFALSE 14270
14142: GO 14144
14144: DISABLE
14145: LD_INT 0
14147: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14148: LD_EXP 34
14152: PPUSH
14153: LD_STRING D20-Bur-1
14155: PPUSH
14156: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14160: LD_EXP 40
14164: PPUSH
14165: LD_STRING D20-Pla-1
14167: PPUSH
14168: CALL_OW 94
// eastOutpostDestroyed := true ;
14172: LD_ADDR_EXP 23
14176: PUSH
14177: LD_INT 1
14179: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14180: LD_INT 35
14182: PPUSH
14183: CALL_OW 67
// stop_talking := true ;
14187: LD_ADDR_OWVAR 56
14191: PUSH
14192: LD_INT 1
14194: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14195: LD_ADDR_VAR 0 1
14199: PUSH
14200: LD_INT 22
14202: PUSH
14203: LD_INT 3
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 23
14212: PUSH
14213: LD_INT 3
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 21
14222: PUSH
14223: LD_INT 1
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: LIST
14234: PPUSH
14235: CALL_OW 69
14239: PUSH
14240: FOR_IN
14241: IFFALSE 14260
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14243: LD_VAR 0 1
14247: PPUSH
14248: LD_INT 1
14250: PPUSH
14251: LD_INT 1500
14253: PPUSH
14254: CALL_OW 591
14258: GO 14240
14260: POP
14261: POP
// stop_talking := false ;
14262: LD_ADDR_OWVAR 56
14266: PUSH
14267: LD_INT 0
14269: ST_TO_ADDR
// end ;
14270: PPOPN 1
14272: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14273: LD_INT 19
14275: PPUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PPUSH
14300: CALL_OW 70
14304: IFFALSE 14412
14306: GO 14308
14308: DISABLE
// begin DialogueOn ;
14309: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14313: LD_INT 19
14315: PPUSH
14316: LD_INT 22
14318: PUSH
14319: LD_INT 3
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 21
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PPUSH
14340: CALL_OW 70
14344: PPUSH
14345: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14349: LD_EXP 34
14353: PPUSH
14354: LD_STRING D26-Bur-1
14356: PPUSH
14357: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14361: LD_EXP 39
14365: PPUSH
14366: LD_STRING D26-Kov-1
14368: PPUSH
14369: CALL_OW 88
// if IsOk ( Gnyevko ) then
14373: LD_EXP 35
14377: PPUSH
14378: CALL_OW 302
14382: IFFALSE 14408
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14384: LD_EXP 35
14388: PPUSH
14389: LD_STRING D26-Gny-1
14391: PPUSH
14392: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14396: LD_EXP 34
14400: PPUSH
14401: LD_STRING D26-Bur-2
14403: PPUSH
14404: CALL_OW 88
// end ; DialogueOff ;
14408: CALL_OW 7
// end ;
14412: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14413: LD_EXP 21
14417: PUSH
14418: LD_EXP 23
14422: NOT
14423: AND
14424: PUSH
14425: LD_INT 17
14427: PPUSH
14428: LD_INT 22
14430: PUSH
14431: LD_INT 3
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 3
14440: PUSH
14441: LD_INT 24
14443: PUSH
14444: LD_INT 1000
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 70
14463: PUSH
14464: LD_INT 1
14466: GREATER
14467: AND
14468: IFFALSE 14531
14470: GO 14472
14472: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14473: LD_EXP 35
14477: PPUSH
14478: LD_STRING D16A-Gny-1
14480: PPUSH
14481: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D16A-Kov-1
14492: PPUSH
14493: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14497: LD_EXP 35
14501: PPUSH
14502: CALL_OW 302
14506: PUSH
14507: LD_EXP 39
14511: PPUSH
14512: CALL_OW 302
14516: OR
14517: IFFALSE 14531
// Say ( Burlak , D16A-Bur-1 ) ;
14519: LD_EXP 34
14523: PPUSH
14524: LD_STRING D16A-Bur-1
14526: PPUSH
14527: CALL_OW 88
// end ;
14531: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14532: LD_INT 3
14534: PPUSH
14535: LD_INT 9
14537: PPUSH
14538: CALL_OW 294
14542: IFFALSE 14555
14544: GO 14546
14546: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14547: LD_ADDR_EXP 24
14551: PUSH
14552: LD_INT 1
14554: ST_TO_ADDR
// end ;
14555: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14556: LD_INT 3
14558: PPUSH
14559: LD_INT 10
14561: PPUSH
14562: CALL_OW 294
14566: IFFALSE 14586
14568: GO 14570
14570: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14571: LD_ADDR_EXP 27
14575: PUSH
14576: LD_EXP 27
14580: PPUSH
14581: CALL 55995 0 1
14585: ST_TO_ADDR
14586: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14587: LD_INT 3
14589: PPUSH
14590: LD_INT 11
14592: PPUSH
14593: CALL_OW 294
14597: IFFALSE 14617
14599: GO 14601
14601: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14602: LD_ADDR_EXP 27
14606: PUSH
14607: LD_EXP 27
14611: PPUSH
14612: CALL 55995 0 1
14616: ST_TO_ADDR
14617: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14618: LD_INT 3
14620: PPUSH
14621: LD_INT 12
14623: PPUSH
14624: CALL_OW 294
14628: IFFALSE 14648
14630: GO 14632
14632: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14633: LD_ADDR_EXP 27
14637: PUSH
14638: LD_EXP 27
14642: PPUSH
14643: CALL 55995 0 1
14647: ST_TO_ADDR
14648: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14649: LD_INT 3
14651: PPUSH
14652: LD_INT 13
14654: PPUSH
14655: CALL_OW 294
14659: IFFALSE 14679
14661: GO 14663
14663: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14664: LD_ADDR_EXP 27
14668: PUSH
14669: LD_EXP 27
14673: PPUSH
14674: CALL 55995 0 1
14678: ST_TO_ADDR
14679: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14680: LD_INT 3
14682: PPUSH
14683: LD_INT 14
14685: PPUSH
14686: CALL_OW 294
14690: IFFALSE 14710
14692: GO 14694
14694: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14695: LD_ADDR_EXP 27
14699: PUSH
14700: LD_EXP 27
14704: PPUSH
14705: CALL 55995 0 1
14709: ST_TO_ADDR
14710: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14711: LD_EXP 27
14715: PUSH
14716: LD_INT 5
14718: GREATEREQUAL
14719: PUSH
14720: LD_EXP 14
14724: AND
14725: IFFALSE 14745
14727: GO 14729
14729: DISABLE
// begin allMapPointsSpotted := true ;
14730: LD_ADDR_EXP 26
14734: PUSH
14735: LD_INT 1
14737: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14738: LD_STRING M10
14740: PPUSH
14741: CALL_OW 337
// end ;
14745: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14746: LD_EXP 26
14750: PUSH
14751: LD_EXP 22
14755: AND
14756: IFFALSE 14768
14758: GO 14760
14760: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14761: LD_STRING M10a
14763: PPUSH
14764: CALL_OW 337
// end ;
14768: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14769: LD_EXP 14
14773: IFFALSE 15406
14775: GO 14777
14777: DISABLE
14778: LD_INT 0
14780: PPUSH
14781: PPUSH
14782: PPUSH
14783: PPUSH
14784: PPUSH
// begin wasOutsideBeria := false ;
14785: LD_ADDR_VAR 0 3
14789: PUSH
14790: LD_INT 0
14792: ST_TO_ADDR
// wantToTalk := false ;
14793: LD_ADDR_VAR 0 2
14797: PUSH
14798: LD_INT 0
14800: ST_TO_ADDR
// westOutpostReported := false ;
14801: LD_ADDR_VAR 0 4
14805: PUSH
14806: LD_INT 0
14808: ST_TO_ADDR
// eastOutpostReported := false ;
14809: LD_ADDR_VAR 0 5
14813: PUSH
14814: LD_INT 0
14816: ST_TO_ADDR
// timer := 0 0$0 ;
14817: LD_ADDR_VAR 0 1
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14825: LD_INT 70
14827: PPUSH
14828: CALL_OW 67
// timer := timer + 0 0$2 ;
14832: LD_ADDR_VAR 0 1
14836: PUSH
14837: LD_VAR 0 1
14841: PUSH
14842: LD_INT 70
14844: PLUS
14845: ST_TO_ADDR
// if timer >= 0 0$30 then
14846: LD_VAR 0 1
14850: PUSH
14851: LD_INT 1050
14853: GREATEREQUAL
14854: IFFALSE 14864
// wantToTalk := true ;
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: LD_INT 1
14863: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 then
14864: LD_EXP 34
14868: PPUSH
14869: LD_EXP 40
14873: PPUSH
14874: CALL_OW 296
14878: PUSH
14879: LD_INT 9
14881: GREATER
14882: IFFALSE 14892
// wasOutsideBeria := true ;
14884: LD_ADDR_VAR 0 3
14888: PUSH
14889: LD_INT 1
14891: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14892: LD_VAR 0 2
14896: PUSH
14897: LD_VAR 0 3
14901: AND
14902: PUSH
14903: LD_EXP 34
14907: PPUSH
14908: LD_EXP 40
14912: PPUSH
14913: CALL_OW 296
14917: PUSH
14918: LD_INT 8
14920: LESS
14921: PUSH
14922: LD_EXP 34
14926: PPUSH
14927: CALL_OW 310
14931: PPUSH
14932: LD_EXP 40
14936: PPUSH
14937: CALL_OW 296
14941: PUSH
14942: LD_INT 8
14944: LESS
14945: OR
14946: AND
14947: IFFALSE 15295
// begin timer := 0 0$0 ;
14949: LD_ADDR_VAR 0 1
14953: PUSH
14954: LD_INT 0
14956: ST_TO_ADDR
// wantToTalk := false ;
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 0
14964: ST_TO_ADDR
// wasOutsideBeria := false ;
14965: LD_ADDR_VAR 0 3
14969: PUSH
14970: LD_INT 0
14972: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
14973: LD_EXP 40
14977: PPUSH
14978: CALL_OW 87
// DialogueOn ;
14982: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
14986: LD_EXP 40
14990: PPUSH
14991: LD_STRING D25-Pla-1
14993: PPUSH
14994: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
14998: LD_VAR 0 4
15002: NOT
15003: PUSH
15004: LD_VAR 0 5
15008: NOT
15009: AND
15010: PUSH
15011: LD_EXP 20
15015: AND
15016: PUSH
15017: LD_EXP 21
15021: AND
15022: IFFALSE 15102
// begin westOutpostReported := true ;
15024: LD_ADDR_VAR 0 4
15028: PUSH
15029: LD_INT 1
15031: ST_TO_ADDR
// eastOutpostReported := true ;
15032: LD_ADDR_VAR 0 5
15036: PUSH
15037: LD_INT 1
15039: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15040: LD_EXP 34
15044: PPUSH
15045: LD_STRING D25-Bur-1
15047: PPUSH
15048: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15052: LD_EXP 24
15056: PUSH
15057: LD_EXP 22
15061: NOT
15062: AND
15063: IFFALSE 15100
// begin Say ( Burlak , D25b-Bur-1 ) ;
15065: LD_EXP 34
15069: PPUSH
15070: LD_STRING D25b-Bur-1
15072: PPUSH
15073: CALL_OW 88
// if not reinforcementsGained then
15077: LD_EXP 25
15081: NOT
15082: IFFALSE 15100
// begin Say ( Platonov , D25b-Pla-1 ) ;
15084: LD_EXP 40
15088: PPUSH
15089: LD_STRING D25b-Pla-1
15091: PPUSH
15092: CALL_OW 88
// SendReinforcements ( ) ;
15096: CALL 3302 0 0
// end ; end ; end else
15100: GO 15291
// if not westOutpostReported and westOutpostDiscovered then
15102: LD_VAR 0 4
15106: NOT
15107: PUSH
15108: LD_EXP 20
15112: AND
15113: IFFALSE 15185
// begin westOutpostReported := true ;
15115: LD_ADDR_VAR 0 4
15119: PUSH
15120: LD_INT 1
15122: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15123: LD_EXP 34
15127: PPUSH
15128: LD_STRING D25a-Bur-1b
15130: PPUSH
15131: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15135: LD_EXP 24
15139: PUSH
15140: LD_EXP 22
15144: NOT
15145: AND
15146: IFFALSE 15183
// begin Say ( Burlak , D25b-Bur-1 ) ;
15148: LD_EXP 34
15152: PPUSH
15153: LD_STRING D25b-Bur-1
15155: PPUSH
15156: CALL_OW 88
// if not reinforcementsGained then
15160: LD_EXP 25
15164: NOT
15165: IFFALSE 15183
// begin Say ( Platonov , D25b-Pla-1 ) ;
15167: LD_EXP 40
15171: PPUSH
15172: LD_STRING D25b-Pla-1
15174: PPUSH
15175: CALL_OW 88
// SendReinforcements ( ) ;
15179: CALL 3302 0 0
// end ; end ; end else
15183: GO 15291
// if not eastOutpostReported and eastOutpostDiscovered then
15185: LD_VAR 0 5
15189: NOT
15190: PUSH
15191: LD_EXP 21
15195: AND
15196: IFFALSE 15220
// begin eastOutpostReported := true ;
15198: LD_ADDR_VAR 0 5
15202: PUSH
15203: LD_INT 1
15205: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15206: LD_EXP 34
15210: PPUSH
15211: LD_STRING D25a-Bur-1a
15213: PPUSH
15214: CALL_OW 88
// end else
15218: GO 15291
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15220: LD_EXP 20
15224: NOT
15225: PUSH
15226: LD_EXP 21
15230: NOT
15231: OR
15232: IFFALSE 15260
// begin Say ( Burlak , D25a-Bur-1 ) ;
15234: LD_EXP 34
15238: PPUSH
15239: LD_STRING D25a-Bur-1
15241: PPUSH
15242: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15246: LD_EXP 40
15250: PPUSH
15251: LD_STRING D25c-Pla-1
15253: PPUSH
15254: CALL_OW 88
// end else
15258: GO 15291
// if not allMapPointsSpotted then
15260: LD_EXP 26
15264: NOT
15265: IFFALSE 15291
// begin Say ( Burlak , D25a-Bur-1 ) ;
15267: LD_EXP 34
15271: PPUSH
15272: LD_STRING D25a-Bur-1
15274: PPUSH
15275: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15279: LD_EXP 40
15283: PPUSH
15284: LD_STRING D25c-Pla-1a
15286: PPUSH
15287: CALL_OW 88
// end ; DialogueOff ;
15291: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15295: LD_EXP 26
15299: PUSH
15300: LD_EXP 22
15304: AND
15305: IFFALSE 14825
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15307: LD_INT 22
15309: PUSH
15310: LD_INT 3
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 21
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 91
15329: PUSH
15330: LD_EXP 40
15334: PUSH
15335: LD_INT 10
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: PPUSH
15348: CALL_OW 69
15352: IFFALSE 15395
// begin if not belkovDied and not belkovSaved then
15354: LD_EXP 19
15358: NOT
15359: PUSH
15360: LD_EXP 28
15364: NOT
15365: AND
15366: IFFALSE 15389
// begin if Query ( QContMission ) = 1 then
15368: LD_STRING QContMission
15370: PPUSH
15371: CALL_OW 97
15375: PUSH
15376: LD_INT 1
15378: EQUAL
15379: IFFALSE 15387
// begin EndMission ;
15381: CALL 15409 0 0
// exit ;
15385: GO 15406
// end ; end else
15387: GO 15395
// begin EndMission ;
15389: CALL 15409 0 0
// exit ;
15393: GO 15406
// end ; end ; wait ( 0 0$10 ) ;
15395: LD_INT 350
15397: PPUSH
15398: CALL_OW 67
// until false ;
15402: LD_INT 0
15404: IFFALSE 15307
// end ;
15406: PPOPN 5
15408: END
// function EndMission ; var i , tmp ; begin
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// if initiative then
15414: LD_EXP 31
15418: IFFALSE 15432
// AddMedal ( Initiative , 1 ) else
15420: LD_STRING Initiative
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: CALL_OW 101
15430: GO 15463
// if not eastOutpostDestroyed then
15432: LD_EXP 23
15436: NOT
15437: IFFALSE 15452
// AddMedal ( Initiative , - 2 ) else
15439: LD_STRING Initiative
15441: PPUSH
15442: LD_INT 2
15444: NEG
15445: PPUSH
15446: CALL_OW 101
15450: GO 15463
// AddMedal ( Initiative , - 1 ) ;
15452: LD_STRING Initiative
15454: PPUSH
15455: LD_INT 1
15457: NEG
15458: PPUSH
15459: CALL_OW 101
// if not belkovDied and belkovSaved then
15463: LD_EXP 19
15467: NOT
15468: PUSH
15469: LD_EXP 28
15473: AND
15474: IFFALSE 15488
// AddMedal ( Belkov , 1 ) else
15476: LD_STRING Belkov
15478: PPUSH
15479: LD_INT 1
15481: PPUSH
15482: CALL_OW 101
15486: GO 15583
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15488: LD_EXP 45
15492: PPUSH
15493: LD_INT 22
15495: PUSH
15496: LD_INT 3
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PPUSH
15503: CALL_OW 72
15507: IFFALSE 15521
// AddMedal ( Belkov , 2 ) else
15509: LD_STRING Belkov
15511: PPUSH
15512: LD_INT 2
15514: PPUSH
15515: CALL_OW 101
15519: GO 15583
// if belkovDied then
15521: LD_EXP 19
15525: IFFALSE 15540
// AddMedal ( Belkov , - 1 ) else
15527: LD_STRING Belkov
15529: PPUSH
15530: LD_INT 1
15532: NEG
15533: PPUSH
15534: CALL_OW 101
15538: GO 15583
// if not belkovSaved then
15540: LD_EXP 28
15544: NOT
15545: IFFALSE 15560
// AddMedal ( Belkov , - 2 ) else
15547: LD_STRING Belkov
15549: PPUSH
15550: LD_INT 2
15552: NEG
15553: PPUSH
15554: CALL_OW 101
15558: GO 15583
// if belkovDied and belkovSaved then
15560: LD_EXP 19
15564: PUSH
15565: LD_EXP 28
15569: AND
15570: IFFALSE 15583
// AddMedal ( Belkov , - 3 ) ;
15572: LD_STRING Belkov
15574: PPUSH
15575: LD_INT 3
15577: NEG
15578: PPUSH
15579: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15583: LD_EXP 30
15587: PUSH
15588: LD_INT 0
15590: EQUAL
15591: IFFALSE 15605
// AddMedal ( NoLosses , 1 ) else
15593: LD_STRING NoLosses
15595: PPUSH
15596: LD_INT 1
15598: PPUSH
15599: CALL_OW 101
15603: GO 15616
// AddMedal ( NoLosses , - 1 ) ;
15605: LD_STRING NoLosses
15607: PPUSH
15608: LD_INT 1
15610: NEG
15611: PPUSH
15612: CALL_OW 101
// GiveMedals ( Main ) ;
15616: LD_STRING Main
15618: PPUSH
15619: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15623: LD_INT 22
15625: PUSH
15626: LD_INT 3
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 23
15635: PUSH
15636: LD_INT 3
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 21
15645: PUSH
15646: LD_INT 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 69
15662: PPUSH
15663: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15667: LD_EXP 34
15671: PPUSH
15672: LD_EXP 3
15676: PUSH
15677: LD_STRING Burlak
15679: STR
15680: PPUSH
15681: CALL_OW 38
// if IsLive ( Gnyevko ) then
15685: LD_EXP 35
15689: PPUSH
15690: CALL_OW 300
15694: IFFALSE 15714
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15696: LD_EXP 35
15700: PPUSH
15701: LD_EXP 3
15705: PUSH
15706: LD_STRING Gnyevko
15708: STR
15709: PPUSH
15710: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15714: LD_EXP 39
15718: PPUSH
15719: CALL_OW 300
15723: IFFALSE 15743
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15725: LD_EXP 39
15729: PPUSH
15730: LD_EXP 3
15734: PUSH
15735: LD_STRING Kovalyuk
15737: STR
15738: PPUSH
15739: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15743: LD_EXP 36
15747: PPUSH
15748: CALL_OW 300
15752: PUSH
15753: LD_EXP 28
15757: AND
15758: IFFALSE 15778
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15760: LD_EXP 36
15764: PPUSH
15765: LD_EXP 3
15769: PUSH
15770: LD_STRING Belkov
15772: STR
15773: PPUSH
15774: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15778: LD_EXP 37
15782: PPUSH
15783: CALL_OW 300
15787: IFFALSE 15807
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15789: LD_EXP 37
15793: PPUSH
15794: LD_EXP 3
15798: PUSH
15799: LD_STRING Kirilenkova
15801: STR
15802: PPUSH
15803: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15807: LD_INT 22
15809: PUSH
15810: LD_INT 3
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 23
15819: PUSH
15820: LD_INT 3
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 21
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 69
15846: PUSH
15847: LD_EXP 34
15851: PUSH
15852: LD_EXP 35
15856: PUSH
15857: LD_EXP 39
15861: PUSH
15862: LD_EXP 36
15866: PUSH
15867: LD_EXP 37
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: DIFF
15879: PPUSH
15880: LD_EXP 3
15884: PUSH
15885: LD_STRING burlakTeam
15887: STR
15888: PPUSH
15889: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15893: LD_INT 22
15895: PUSH
15896: LD_INT 6
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 23
15905: PUSH
15906: LD_INT 3
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 21
15915: PUSH
15916: LD_INT 1
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 69
15932: PUSH
15933: LD_EXP 40
15937: PUSH
15938: LD_EXP 38
15942: PUSH
15943: LD_EXP 36
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: LD_EXP 45
15957: UNION
15958: DIFF
15959: PPUSH
15960: LD_EXP 3
15964: PUSH
15965: LD_STRING kirovTeam
15967: STR
15968: PPUSH
15969: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
15973: LD_EXP 23
15977: PPUSH
15978: LD_STRING 02_EasternOutpostDestroyed
15980: PPUSH
15981: CALL_OW 39
// tmp := [ ] ;
15985: LD_ADDR_VAR 0 3
15989: PUSH
15990: EMPTY
15991: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
15992: LD_ADDR_VAR 0 2
15996: PUSH
15997: LD_INT 22
15999: PUSH
16000: LD_INT 3
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 21
16009: PUSH
16010: LD_INT 3
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PPUSH
16021: CALL_OW 69
16025: PUSH
16026: FOR_IN
16027: IFFALSE 16103
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16029: LD_ADDR_VAR 0 3
16033: PUSH
16034: LD_VAR 0 3
16038: PPUSH
16039: LD_VAR 0 2
16043: PPUSH
16044: CALL_OW 266
16048: PUSH
16049: LD_VAR 0 2
16053: PPUSH
16054: CALL_OW 267
16058: PUSH
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL_OW 250
16068: PUSH
16069: LD_VAR 0 2
16073: PPUSH
16074: CALL_OW 251
16078: PUSH
16079: LD_VAR 0 2
16083: PPUSH
16084: CALL_OW 254
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL 54634 0 2
16100: ST_TO_ADDR
16101: GO 16026
16103: POP
16104: POP
// SaveVariable ( tmp , 02_Beria ) ;
16105: LD_VAR 0 3
16109: PPUSH
16110: LD_STRING 02_Beria
16112: PPUSH
16113: CALL_OW 39
// tmp := [ ] ;
16117: LD_ADDR_VAR 0 3
16121: PUSH
16122: EMPTY
16123: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16124: LD_ADDR_VAR 0 2
16128: PUSH
16129: LD_INT 22
16131: PUSH
16132: LD_INT 6
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 21
16141: PUSH
16142: LD_INT 3
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PPUSH
16153: CALL_OW 69
16157: PUSH
16158: FOR_IN
16159: IFFALSE 16235
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16161: LD_ADDR_VAR 0 3
16165: PUSH
16166: LD_VAR 0 3
16170: PPUSH
16171: LD_VAR 0 2
16175: PPUSH
16176: CALL_OW 266
16180: PUSH
16181: LD_VAR 0 2
16185: PPUSH
16186: CALL_OW 267
16190: PUSH
16191: LD_VAR 0 2
16195: PPUSH
16196: CALL_OW 250
16200: PUSH
16201: LD_VAR 0 2
16205: PPUSH
16206: CALL_OW 251
16210: PUSH
16211: LD_VAR 0 2
16215: PPUSH
16216: CALL_OW 254
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL 54634 0 2
16232: ST_TO_ADDR
16233: GO 16158
16235: POP
16236: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_STRING 02_Kirov
16244: PPUSH
16245: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16249: LD_INT 22
16251: PUSH
16252: LD_INT 3
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PPUSH
16273: CALL_OW 69
16277: PPUSH
16278: CALL 19034 0 1
16282: PPUSH
16283: LD_STRING 02_VehiclesCount
16285: PPUSH
16286: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16290: LD_INT 22
16292: PUSH
16293: LD_INT 6
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 21
16302: PUSH
16303: LD_INT 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PPUSH
16314: CALL_OW 69
16318: PPUSH
16319: CALL 19034 0 1
16323: PPUSH
16324: LD_STRING 02_KirovVehiclesCount
16326: PPUSH
16327: CALL_OW 39
// YouWin ;
16331: CALL_OW 103
// end ; end_of_file
16335: LD_VAR 0 1
16339: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16340: LD_INT 420
16342: PPUSH
16343: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16347: LD_VAR 0 2
16351: PPUSH
16352: LD_VAR 0 3
16356: PPUSH
16357: CALL 8000 0 2
// end ;
16361: PPOPN 5
16363: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16364: LD_VAR 0 1
16368: PPUSH
16369: CALL 74880 0 1
// if un = Burlak then
16373: LD_VAR 0 1
16377: PUSH
16378: LD_EXP 34
16382: EQUAL
16383: IFFALSE 16392
// YouLost ( Burlak ) ;
16385: LD_STRING Burlak
16387: PPUSH
16388: CALL_OW 104
// if un = Platonov then
16392: LD_VAR 0 1
16396: PUSH
16397: LD_EXP 40
16401: EQUAL
16402: IFFALSE 16411
// YouLost ( Platonov ) ;
16404: LD_STRING Platonov
16406: PPUSH
16407: CALL_OW 104
// if un = Kurin then
16411: LD_VAR 0 1
16415: PUSH
16416: LD_EXP 38
16420: EQUAL
16421: IFFALSE 16430
// YouLost ( Kurin ) ;
16423: LD_STRING Kurin
16425: PPUSH
16426: CALL_OW 104
// if un = Belkov then
16430: LD_VAR 0 1
16434: PUSH
16435: LD_EXP 36
16439: EQUAL
16440: IFFALSE 16450
// belkovDied := true ;
16442: LD_ADDR_EXP 19
16446: PUSH
16447: LD_INT 1
16449: ST_TO_ADDR
// if un in belkovTeam then
16450: LD_VAR 0 1
16454: PUSH
16455: LD_EXP 45
16459: IN
16460: IFFALSE 16493
// begin belkovTeam := belkovTeam diff un ;
16462: LD_ADDR_EXP 45
16466: PUSH
16467: LD_EXP 45
16471: PUSH
16472: LD_VAR 0 1
16476: DIFF
16477: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16478: LD_ADDR_EXP 29
16482: PUSH
16483: LD_EXP 29
16487: PPUSH
16488: CALL 55995 0 1
16492: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16493: LD_VAR 0 1
16497: PUSH
16498: LD_INT 22
16500: PUSH
16501: LD_INT 3
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 21
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 23
16520: PUSH
16521: LD_INT 3
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: PPUSH
16533: CALL_OW 69
16537: IN
16538: IFFALSE 16555
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16540: LD_ADDR_EXP 30
16544: PUSH
16545: LD_EXP 30
16549: PPUSH
16550: CALL 55995 0 1
16554: ST_TO_ADDR
// if un in usWestForces then
16555: LD_VAR 0 1
16559: PUSH
16560: LD_EXP 46
16564: IN
16565: IFFALSE 16583
// usWestForces := usWestForces diff un ;
16567: LD_ADDR_EXP 46
16571: PUSH
16572: LD_EXP 46
16576: PUSH
16577: LD_VAR 0 1
16581: DIFF
16582: ST_TO_ADDR
// if un in usEastForces then
16583: LD_VAR 0 1
16587: PUSH
16588: LD_EXP 47
16592: IN
16593: IFFALSE 16611
// usEastForces := usEastForces diff un ;
16595: LD_ADDR_EXP 47
16599: PUSH
16600: LD_EXP 47
16604: PUSH
16605: LD_VAR 0 1
16609: DIFF
16610: ST_TO_ADDR
// end ;
16611: PPOPN 1
16613: END
// on BuildingComplete ( b ) do var mech ;
16614: LD_INT 0
16616: PPUSH
// begin if GetSide ( b ) = 3 then
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 255
16626: PUSH
16627: LD_INT 3
16629: EQUAL
16630: IFFALSE 16689
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16632: LD_VAR 0 1
16636: PPUSH
16637: CALL_OW 266
16641: PUSH
16642: LD_INT 6
16644: PUSH
16645: LD_INT 7
16647: PUSH
16648: LD_INT 8
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: IN
16656: IFFALSE 16666
// hasLab := true ;
16658: LD_ADDR_EXP 9
16662: PUSH
16663: LD_INT 1
16665: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 266
16675: PUSH
16676: LD_INT 2
16678: EQUAL
16679: IFFALSE 16689
// hasWorkshop := true ;
16681: LD_ADDR_EXP 10
16685: PUSH
16686: LD_INT 1
16688: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 255
16698: PUSH
16699: LD_INT 6
16701: EQUAL
16702: IFFALSE 16776
// begin if GetBType ( b ) = b_workshop then
16704: LD_VAR 0 1
16708: PPUSH
16709: CALL_OW 266
16713: PUSH
16714: LD_INT 2
16716: EQUAL
16717: IFFALSE 16776
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16719: LD_ADDR_VAR 0 2
16723: PUSH
16724: LD_EXP 43
16728: PPUSH
16729: LD_INT 25
16731: PUSH
16732: LD_INT 3
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PPUSH
16739: CALL_OW 72
16743: ST_TO_ADDR
// if not mech then
16744: LD_VAR 0 2
16748: NOT
16749: IFFALSE 16753
// exit ;
16751: GO 16776
// ComExit ( mech ) ;
16753: LD_VAR 0 2
16757: PPUSH
16758: CALL 55032 0 1
// AddComEnterUnit ( mech , b ) ;
16762: LD_VAR 0 2
16766: PPUSH
16767: LD_VAR 0 1
16771: PPUSH
16772: CALL_OW 180
// end ; end ; end ;
16776: PPOPN 2
16778: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16779: LD_VAR 0 1
16783: PPUSH
16784: LD_VAR 0 2
16788: PPUSH
16789: CALL 75000 0 2
// if GetSide ( vehicle ) = 3 then
16793: LD_VAR 0 1
16797: PPUSH
16798: CALL_OW 255
16802: PUSH
16803: LD_INT 3
16805: EQUAL
16806: IFFALSE 16831
// begin hasTank := true ;
16808: LD_ADDR_EXP 12
16812: PUSH
16813: LD_INT 1
16815: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16816: LD_ADDR_EXP 15
16820: PUSH
16821: LD_EXP 15
16825: PPUSH
16826: CALL 55995 0 1
16830: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16831: LD_VAR 0 1
16835: PPUSH
16836: CALL_OW 255
16840: PUSH
16841: LD_INT 6
16843: EQUAL
16844: IFFALSE 16855
// KirovAttack ( vehicle ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: CALL 3608 0 1
// end ;
16855: PPOPN 2
16857: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16858: LD_VAR 0 1
16862: PUSH
16863: LD_EXP 33
16867: EQUAL
16868: IFFALSE 16874
// BelkovAttackScript ;
16870: CALL 1673 0 0
// end ;
16874: PPOPN 1
16876: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16877: LD_INT 0
16879: PPUSH
// begin if side = 1 then
16880: LD_VAR 0 3
16884: PUSH
16885: LD_INT 1
16887: EQUAL
16888: IFFALSE 16898
// vehCaptured := true ;
16890: LD_ADDR_EXP 16
16894: PUSH
16895: LD_INT 1
16897: ST_TO_ADDR
// end ;
16898: PPOPN 5
16900: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16901: LD_VAR 0 1
16905: PUSH
16906: LD_INT 3
16908: EQUAL
16909: PUSH
16910: LD_VAR 0 2
16914: PUSH
16915: LD_INT 6
16917: EQUAL
16918: AND
16919: IFFALSE 16929
// allianceAttacked := true ;
16921: LD_ADDR_EXP 13
16925: PUSH
16926: LD_INT 1
16928: ST_TO_ADDR
// end ; end_of_file
16929: PPOPN 2
16931: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16932: LD_INT 0
16934: PPUSH
16935: PPUSH
// if exist_mode then
16936: LD_VAR 0 2
16940: IFFALSE 16965
// unit := CreateCharacter ( prefix & ident ) else
16942: LD_ADDR_VAR 0 5
16946: PUSH
16947: LD_VAR 0 3
16951: PUSH
16952: LD_VAR 0 1
16956: STR
16957: PPUSH
16958: CALL_OW 34
16962: ST_TO_ADDR
16963: GO 16980
// unit := NewCharacter ( ident ) ;
16965: LD_ADDR_VAR 0 5
16969: PUSH
16970: LD_VAR 0 1
16974: PPUSH
16975: CALL_OW 25
16979: ST_TO_ADDR
// result := unit ;
16980: LD_ADDR_VAR 0 4
16984: PUSH
16985: LD_VAR 0 5
16989: ST_TO_ADDR
// end ;
16990: LD_VAR 0 4
16994: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16995: LD_INT 0
16997: PPUSH
16998: PPUSH
// if not side or not nation then
16999: LD_VAR 0 1
17003: NOT
17004: PUSH
17005: LD_VAR 0 2
17009: NOT
17010: OR
17011: IFFALSE 17015
// exit ;
17013: GO 17783
// case nation of nation_american :
17015: LD_VAR 0 2
17019: PUSH
17020: LD_INT 1
17022: DOUBLE
17023: EQUAL
17024: IFTRUE 17028
17026: GO 17242
17028: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17029: LD_ADDR_VAR 0 4
17033: PUSH
17034: LD_INT 35
17036: PUSH
17037: LD_INT 45
17039: PUSH
17040: LD_INT 46
17042: PUSH
17043: LD_INT 47
17045: PUSH
17046: LD_INT 82
17048: PUSH
17049: LD_INT 83
17051: PUSH
17052: LD_INT 84
17054: PUSH
17055: LD_INT 85
17057: PUSH
17058: LD_INT 86
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: LD_INT 2
17066: PUSH
17067: LD_INT 6
17069: PUSH
17070: LD_INT 15
17072: PUSH
17073: LD_INT 16
17075: PUSH
17076: LD_INT 7
17078: PUSH
17079: LD_INT 12
17081: PUSH
17082: LD_INT 13
17084: PUSH
17085: LD_INT 10
17087: PUSH
17088: LD_INT 14
17090: PUSH
17091: LD_INT 20
17093: PUSH
17094: LD_INT 21
17096: PUSH
17097: LD_INT 22
17099: PUSH
17100: LD_INT 25
17102: PUSH
17103: LD_INT 32
17105: PUSH
17106: LD_INT 27
17108: PUSH
17109: LD_INT 36
17111: PUSH
17112: LD_INT 69
17114: PUSH
17115: LD_INT 39
17117: PUSH
17118: LD_INT 34
17120: PUSH
17121: LD_INT 40
17123: PUSH
17124: LD_INT 48
17126: PUSH
17127: LD_INT 49
17129: PUSH
17130: LD_INT 50
17132: PUSH
17133: LD_INT 51
17135: PUSH
17136: LD_INT 52
17138: PUSH
17139: LD_INT 53
17141: PUSH
17142: LD_INT 54
17144: PUSH
17145: LD_INT 55
17147: PUSH
17148: LD_INT 56
17150: PUSH
17151: LD_INT 57
17153: PUSH
17154: LD_INT 58
17156: PUSH
17157: LD_INT 59
17159: PUSH
17160: LD_INT 60
17162: PUSH
17163: LD_INT 61
17165: PUSH
17166: LD_INT 62
17168: PUSH
17169: LD_INT 80
17171: PUSH
17172: LD_INT 82
17174: PUSH
17175: LD_INT 83
17177: PUSH
17178: LD_INT 84
17180: PUSH
17181: LD_INT 85
17183: PUSH
17184: LD_INT 86
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: ST_TO_ADDR
17240: GO 17707
17242: LD_INT 2
17244: DOUBLE
17245: EQUAL
17246: IFTRUE 17250
17248: GO 17476
17250: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17251: LD_ADDR_VAR 0 4
17255: PUSH
17256: LD_INT 35
17258: PUSH
17259: LD_INT 45
17261: PUSH
17262: LD_INT 46
17264: PUSH
17265: LD_INT 47
17267: PUSH
17268: LD_INT 82
17270: PUSH
17271: LD_INT 83
17273: PUSH
17274: LD_INT 84
17276: PUSH
17277: LD_INT 85
17279: PUSH
17280: LD_INT 87
17282: PUSH
17283: LD_INT 70
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 11
17291: PUSH
17292: LD_INT 3
17294: PUSH
17295: LD_INT 4
17297: PUSH
17298: LD_INT 5
17300: PUSH
17301: LD_INT 6
17303: PUSH
17304: LD_INT 15
17306: PUSH
17307: LD_INT 18
17309: PUSH
17310: LD_INT 7
17312: PUSH
17313: LD_INT 17
17315: PUSH
17316: LD_INT 8
17318: PUSH
17319: LD_INT 20
17321: PUSH
17322: LD_INT 21
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_INT 72
17330: PUSH
17331: LD_INT 26
17333: PUSH
17334: LD_INT 69
17336: PUSH
17337: LD_INT 39
17339: PUSH
17340: LD_INT 40
17342: PUSH
17343: LD_INT 41
17345: PUSH
17346: LD_INT 42
17348: PUSH
17349: LD_INT 43
17351: PUSH
17352: LD_INT 48
17354: PUSH
17355: LD_INT 49
17357: PUSH
17358: LD_INT 50
17360: PUSH
17361: LD_INT 51
17363: PUSH
17364: LD_INT 52
17366: PUSH
17367: LD_INT 53
17369: PUSH
17370: LD_INT 54
17372: PUSH
17373: LD_INT 55
17375: PUSH
17376: LD_INT 56
17378: PUSH
17379: LD_INT 60
17381: PUSH
17382: LD_INT 61
17384: PUSH
17385: LD_INT 62
17387: PUSH
17388: LD_INT 66
17390: PUSH
17391: LD_INT 67
17393: PUSH
17394: LD_INT 68
17396: PUSH
17397: LD_INT 81
17399: PUSH
17400: LD_INT 82
17402: PUSH
17403: LD_INT 83
17405: PUSH
17406: LD_INT 84
17408: PUSH
17409: LD_INT 85
17411: PUSH
17412: LD_INT 87
17414: PUSH
17415: LD_INT 88
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: ST_TO_ADDR
17474: GO 17707
17476: LD_INT 3
17478: DOUBLE
17479: EQUAL
17480: IFTRUE 17484
17482: GO 17706
17484: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17485: LD_ADDR_VAR 0 4
17489: PUSH
17490: LD_INT 46
17492: PUSH
17493: LD_INT 47
17495: PUSH
17496: LD_INT 1
17498: PUSH
17499: LD_INT 2
17501: PUSH
17502: LD_INT 82
17504: PUSH
17505: LD_INT 83
17507: PUSH
17508: LD_INT 84
17510: PUSH
17511: LD_INT 85
17513: PUSH
17514: LD_INT 86
17516: PUSH
17517: LD_INT 11
17519: PUSH
17520: LD_INT 9
17522: PUSH
17523: LD_INT 20
17525: PUSH
17526: LD_INT 19
17528: PUSH
17529: LD_INT 21
17531: PUSH
17532: LD_INT 24
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_INT 25
17540: PUSH
17541: LD_INT 28
17543: PUSH
17544: LD_INT 29
17546: PUSH
17547: LD_INT 30
17549: PUSH
17550: LD_INT 31
17552: PUSH
17553: LD_INT 37
17555: PUSH
17556: LD_INT 38
17558: PUSH
17559: LD_INT 32
17561: PUSH
17562: LD_INT 27
17564: PUSH
17565: LD_INT 33
17567: PUSH
17568: LD_INT 69
17570: PUSH
17571: LD_INT 39
17573: PUSH
17574: LD_INT 34
17576: PUSH
17577: LD_INT 40
17579: PUSH
17580: LD_INT 71
17582: PUSH
17583: LD_INT 23
17585: PUSH
17586: LD_INT 44
17588: PUSH
17589: LD_INT 48
17591: PUSH
17592: LD_INT 49
17594: PUSH
17595: LD_INT 50
17597: PUSH
17598: LD_INT 51
17600: PUSH
17601: LD_INT 52
17603: PUSH
17604: LD_INT 53
17606: PUSH
17607: LD_INT 54
17609: PUSH
17610: LD_INT 55
17612: PUSH
17613: LD_INT 56
17615: PUSH
17616: LD_INT 57
17618: PUSH
17619: LD_INT 58
17621: PUSH
17622: LD_INT 59
17624: PUSH
17625: LD_INT 63
17627: PUSH
17628: LD_INT 64
17630: PUSH
17631: LD_INT 65
17633: PUSH
17634: LD_INT 82
17636: PUSH
17637: LD_INT 83
17639: PUSH
17640: LD_INT 84
17642: PUSH
17643: LD_INT 85
17645: PUSH
17646: LD_INT 86
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: ST_TO_ADDR
17704: GO 17707
17706: POP
// if state > - 1 and state < 3 then
17707: LD_VAR 0 3
17711: PUSH
17712: LD_INT 1
17714: NEG
17715: GREATER
17716: PUSH
17717: LD_VAR 0 3
17721: PUSH
17722: LD_INT 3
17724: LESS
17725: AND
17726: IFFALSE 17783
// for i in result do
17728: LD_ADDR_VAR 0 5
17732: PUSH
17733: LD_VAR 0 4
17737: PUSH
17738: FOR_IN
17739: IFFALSE 17781
// if GetTech ( i , side ) <> state then
17741: LD_VAR 0 5
17745: PPUSH
17746: LD_VAR 0 1
17750: PPUSH
17751: CALL_OW 321
17755: PUSH
17756: LD_VAR 0 3
17760: NONEQUAL
17761: IFFALSE 17779
// result := result diff i ;
17763: LD_ADDR_VAR 0 4
17767: PUSH
17768: LD_VAR 0 4
17772: PUSH
17773: LD_VAR 0 5
17777: DIFF
17778: ST_TO_ADDR
17779: GO 17738
17781: POP
17782: POP
// end ;
17783: LD_VAR 0 4
17787: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17788: LD_INT 0
17790: PPUSH
17791: PPUSH
17792: PPUSH
// result := true ;
17793: LD_ADDR_VAR 0 3
17797: PUSH
17798: LD_INT 1
17800: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17801: LD_ADDR_VAR 0 5
17805: PUSH
17806: LD_VAR 0 2
17810: PPUSH
17811: CALL_OW 480
17815: ST_TO_ADDR
// if not tmp then
17816: LD_VAR 0 5
17820: NOT
17821: IFFALSE 17825
// exit ;
17823: GO 17874
// for i in tmp do
17825: LD_ADDR_VAR 0 4
17829: PUSH
17830: LD_VAR 0 5
17834: PUSH
17835: FOR_IN
17836: IFFALSE 17872
// if GetTech ( i , side ) <> state_researched then
17838: LD_VAR 0 4
17842: PPUSH
17843: LD_VAR 0 1
17847: PPUSH
17848: CALL_OW 321
17852: PUSH
17853: LD_INT 2
17855: NONEQUAL
17856: IFFALSE 17870
// begin result := false ;
17858: LD_ADDR_VAR 0 3
17862: PUSH
17863: LD_INT 0
17865: ST_TO_ADDR
// exit ;
17866: POP
17867: POP
17868: GO 17874
// end ;
17870: GO 17835
17872: POP
17873: POP
// end ;
17874: LD_VAR 0 3
17878: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
17886: PPUSH
17887: PPUSH
17888: PPUSH
17889: PPUSH
17890: PPUSH
17891: PPUSH
17892: PPUSH
17893: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17894: LD_VAR 0 1
17898: NOT
17899: PUSH
17900: LD_VAR 0 1
17904: PPUSH
17905: CALL_OW 257
17909: PUSH
17910: LD_INT 9
17912: NONEQUAL
17913: OR
17914: IFFALSE 17918
// exit ;
17916: GO 18491
// side := GetSide ( unit ) ;
17918: LD_ADDR_VAR 0 9
17922: PUSH
17923: LD_VAR 0 1
17927: PPUSH
17928: CALL_OW 255
17932: ST_TO_ADDR
// tech_space := tech_spacanom ;
17933: LD_ADDR_VAR 0 12
17937: PUSH
17938: LD_INT 29
17940: ST_TO_ADDR
// tech_time := tech_taurad ;
17941: LD_ADDR_VAR 0 13
17945: PUSH
17946: LD_INT 28
17948: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17949: LD_ADDR_VAR 0 11
17953: PUSH
17954: LD_VAR 0 1
17958: PPUSH
17959: CALL_OW 310
17963: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17964: LD_VAR 0 11
17968: PPUSH
17969: CALL_OW 247
17973: PUSH
17974: LD_INT 2
17976: EQUAL
17977: IFFALSE 17981
// exit ;
17979: GO 18491
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17981: LD_ADDR_VAR 0 8
17985: PUSH
17986: LD_INT 81
17988: PUSH
17989: LD_VAR 0 9
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: LD_INT 21
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PPUSH
18019: CALL_OW 69
18023: ST_TO_ADDR
// if not tmp then
18024: LD_VAR 0 8
18028: NOT
18029: IFFALSE 18033
// exit ;
18031: GO 18491
// if in_unit then
18033: LD_VAR 0 11
18037: IFFALSE 18061
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18039: LD_ADDR_VAR 0 10
18043: PUSH
18044: LD_VAR 0 8
18048: PPUSH
18049: LD_VAR 0 11
18053: PPUSH
18054: CALL_OW 74
18058: ST_TO_ADDR
18059: GO 18081
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18061: LD_ADDR_VAR 0 10
18065: PUSH
18066: LD_VAR 0 8
18070: PPUSH
18071: LD_VAR 0 1
18075: PPUSH
18076: CALL_OW 74
18080: ST_TO_ADDR
// if not enemy then
18081: LD_VAR 0 10
18085: NOT
18086: IFFALSE 18090
// exit ;
18088: GO 18491
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18090: LD_VAR 0 11
18094: PUSH
18095: LD_VAR 0 11
18099: PPUSH
18100: LD_VAR 0 10
18104: PPUSH
18105: CALL_OW 296
18109: PUSH
18110: LD_INT 13
18112: GREATER
18113: AND
18114: PUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: LD_VAR 0 10
18124: PPUSH
18125: CALL_OW 296
18129: PUSH
18130: LD_INT 12
18132: GREATER
18133: OR
18134: IFFALSE 18138
// exit ;
18136: GO 18491
// missile := [ 1 ] ;
18138: LD_ADDR_VAR 0 14
18142: PUSH
18143: LD_INT 1
18145: PUSH
18146: EMPTY
18147: LIST
18148: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18149: LD_VAR 0 9
18153: PPUSH
18154: LD_VAR 0 12
18158: PPUSH
18159: CALL_OW 325
18163: IFFALSE 18192
// missile := Replace ( missile , missile + 1 , 2 ) ;
18165: LD_ADDR_VAR 0 14
18169: PUSH
18170: LD_VAR 0 14
18174: PPUSH
18175: LD_VAR 0 14
18179: PUSH
18180: LD_INT 1
18182: PLUS
18183: PPUSH
18184: LD_INT 2
18186: PPUSH
18187: CALL_OW 1
18191: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18192: LD_VAR 0 9
18196: PPUSH
18197: LD_VAR 0 13
18201: PPUSH
18202: CALL_OW 325
18206: PUSH
18207: LD_VAR 0 10
18211: PPUSH
18212: CALL_OW 255
18216: PPUSH
18217: LD_VAR 0 13
18221: PPUSH
18222: CALL_OW 325
18226: NOT
18227: AND
18228: IFFALSE 18257
// missile := Replace ( missile , missile + 1 , 3 ) ;
18230: LD_ADDR_VAR 0 14
18234: PUSH
18235: LD_VAR 0 14
18239: PPUSH
18240: LD_VAR 0 14
18244: PUSH
18245: LD_INT 1
18247: PLUS
18248: PPUSH
18249: LD_INT 3
18251: PPUSH
18252: CALL_OW 1
18256: ST_TO_ADDR
// if missile < 2 then
18257: LD_VAR 0 14
18261: PUSH
18262: LD_INT 2
18264: LESS
18265: IFFALSE 18269
// exit ;
18267: GO 18491
// x := GetX ( enemy ) ;
18269: LD_ADDR_VAR 0 4
18273: PUSH
18274: LD_VAR 0 10
18278: PPUSH
18279: CALL_OW 250
18283: ST_TO_ADDR
// y := GetY ( enemy ) ;
18284: LD_ADDR_VAR 0 5
18288: PUSH
18289: LD_VAR 0 10
18293: PPUSH
18294: CALL_OW 251
18298: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18299: LD_ADDR_VAR 0 6
18303: PUSH
18304: LD_VAR 0 4
18308: PUSH
18309: LD_INT 1
18311: NEG
18312: PPUSH
18313: LD_INT 1
18315: PPUSH
18316: CALL_OW 12
18320: PLUS
18321: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18322: LD_ADDR_VAR 0 7
18326: PUSH
18327: LD_VAR 0 5
18331: PUSH
18332: LD_INT 1
18334: NEG
18335: PPUSH
18336: LD_INT 1
18338: PPUSH
18339: CALL_OW 12
18343: PLUS
18344: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18345: LD_VAR 0 6
18349: PPUSH
18350: LD_VAR 0 7
18354: PPUSH
18355: CALL_OW 488
18359: NOT
18360: IFFALSE 18382
// begin _x := x ;
18362: LD_ADDR_VAR 0 6
18366: PUSH
18367: LD_VAR 0 4
18371: ST_TO_ADDR
// _y := y ;
18372: LD_ADDR_VAR 0 7
18376: PUSH
18377: LD_VAR 0 5
18381: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18382: LD_ADDR_VAR 0 3
18386: PUSH
18387: LD_INT 1
18389: PPUSH
18390: LD_VAR 0 14
18394: PPUSH
18395: CALL_OW 12
18399: ST_TO_ADDR
// case i of 1 :
18400: LD_VAR 0 3
18404: PUSH
18405: LD_INT 1
18407: DOUBLE
18408: EQUAL
18409: IFTRUE 18413
18411: GO 18430
18413: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18414: LD_VAR 0 1
18418: PPUSH
18419: LD_VAR 0 10
18423: PPUSH
18424: CALL_OW 115
18428: GO 18491
18430: LD_INT 2
18432: DOUBLE
18433: EQUAL
18434: IFTRUE 18438
18436: GO 18460
18438: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18439: LD_VAR 0 1
18443: PPUSH
18444: LD_VAR 0 6
18448: PPUSH
18449: LD_VAR 0 7
18453: PPUSH
18454: CALL_OW 153
18458: GO 18491
18460: LD_INT 3
18462: DOUBLE
18463: EQUAL
18464: IFTRUE 18468
18466: GO 18490
18468: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18469: LD_VAR 0 1
18473: PPUSH
18474: LD_VAR 0 6
18478: PPUSH
18479: LD_VAR 0 7
18483: PPUSH
18484: CALL_OW 154
18488: GO 18491
18490: POP
// end ;
18491: LD_VAR 0 2
18495: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18496: LD_INT 0
18498: PPUSH
18499: PPUSH
18500: PPUSH
18501: PPUSH
18502: PPUSH
18503: PPUSH
// if not unit or not building then
18504: LD_VAR 0 1
18508: NOT
18509: PUSH
18510: LD_VAR 0 2
18514: NOT
18515: OR
18516: IFFALSE 18520
// exit ;
18518: GO 18678
// x := GetX ( building ) ;
18520: LD_ADDR_VAR 0 5
18524: PUSH
18525: LD_VAR 0 2
18529: PPUSH
18530: CALL_OW 250
18534: ST_TO_ADDR
// y := GetY ( building ) ;
18535: LD_ADDR_VAR 0 6
18539: PUSH
18540: LD_VAR 0 2
18544: PPUSH
18545: CALL_OW 251
18549: ST_TO_ADDR
// for i = 0 to 5 do
18550: LD_ADDR_VAR 0 4
18554: PUSH
18555: DOUBLE
18556: LD_INT 0
18558: DEC
18559: ST_TO_ADDR
18560: LD_INT 5
18562: PUSH
18563: FOR_TO
18564: IFFALSE 18676
// begin _x := ShiftX ( x , i , 3 ) ;
18566: LD_ADDR_VAR 0 7
18570: PUSH
18571: LD_VAR 0 5
18575: PPUSH
18576: LD_VAR 0 4
18580: PPUSH
18581: LD_INT 3
18583: PPUSH
18584: CALL_OW 272
18588: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18589: LD_ADDR_VAR 0 8
18593: PUSH
18594: LD_VAR 0 6
18598: PPUSH
18599: LD_VAR 0 4
18603: PPUSH
18604: LD_INT 3
18606: PPUSH
18607: CALL_OW 273
18611: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18612: LD_VAR 0 7
18616: PPUSH
18617: LD_VAR 0 8
18621: PPUSH
18622: CALL_OW 488
18626: NOT
18627: IFFALSE 18631
// continue ;
18629: GO 18563
// if HexInfo ( _x , _y ) = 0 then
18631: LD_VAR 0 7
18635: PPUSH
18636: LD_VAR 0 8
18640: PPUSH
18641: CALL_OW 428
18645: PUSH
18646: LD_INT 0
18648: EQUAL
18649: IFFALSE 18674
// begin ComMoveXY ( unit , _x , _y ) ;
18651: LD_VAR 0 1
18655: PPUSH
18656: LD_VAR 0 7
18660: PPUSH
18661: LD_VAR 0 8
18665: PPUSH
18666: CALL_OW 111
// exit ;
18670: POP
18671: POP
18672: GO 18678
// end ; end ;
18674: GO 18563
18676: POP
18677: POP
// end ;
18678: LD_VAR 0 3
18682: RET
// export function ScanBase ( side , base_area ) ; begin
18683: LD_INT 0
18685: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18686: LD_ADDR_VAR 0 3
18690: PUSH
18691: LD_VAR 0 2
18695: PPUSH
18696: LD_INT 81
18698: PUSH
18699: LD_VAR 0 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 70
18712: ST_TO_ADDR
// end ;
18713: LD_VAR 0 3
18717: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18718: LD_INT 0
18720: PPUSH
18721: PPUSH
18722: PPUSH
18723: PPUSH
// result := false ;
18724: LD_ADDR_VAR 0 2
18728: PUSH
18729: LD_INT 0
18731: ST_TO_ADDR
// side := GetSide ( unit ) ;
18732: LD_ADDR_VAR 0 3
18736: PUSH
18737: LD_VAR 0 1
18741: PPUSH
18742: CALL_OW 255
18746: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18747: LD_ADDR_VAR 0 4
18751: PUSH
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 248
18761: ST_TO_ADDR
// case nat of 1 :
18762: LD_VAR 0 4
18766: PUSH
18767: LD_INT 1
18769: DOUBLE
18770: EQUAL
18771: IFTRUE 18775
18773: GO 18786
18775: POP
// tech := tech_lassight ; 2 :
18776: LD_ADDR_VAR 0 5
18780: PUSH
18781: LD_INT 12
18783: ST_TO_ADDR
18784: GO 18825
18786: LD_INT 2
18788: DOUBLE
18789: EQUAL
18790: IFTRUE 18794
18792: GO 18805
18794: POP
// tech := tech_mortar ; 3 :
18795: LD_ADDR_VAR 0 5
18799: PUSH
18800: LD_INT 41
18802: ST_TO_ADDR
18803: GO 18825
18805: LD_INT 3
18807: DOUBLE
18808: EQUAL
18809: IFTRUE 18813
18811: GO 18824
18813: POP
// tech := tech_bazooka ; end ;
18814: LD_ADDR_VAR 0 5
18818: PUSH
18819: LD_INT 44
18821: ST_TO_ADDR
18822: GO 18825
18824: POP
// if Researched ( side , tech ) then
18825: LD_VAR 0 3
18829: PPUSH
18830: LD_VAR 0 5
18834: PPUSH
18835: CALL_OW 325
18839: IFFALSE 18866
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18841: LD_ADDR_VAR 0 2
18845: PUSH
18846: LD_INT 5
18848: PUSH
18849: LD_INT 8
18851: PUSH
18852: LD_INT 9
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: LIST
18859: PUSH
18860: LD_VAR 0 4
18864: ARRAY
18865: ST_TO_ADDR
// end ;
18866: LD_VAR 0 2
18870: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18871: LD_INT 0
18873: PPUSH
18874: PPUSH
18875: PPUSH
// if not mines then
18876: LD_VAR 0 2
18880: NOT
18881: IFFALSE 18885
// exit ;
18883: GO 19029
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18885: LD_ADDR_VAR 0 5
18889: PUSH
18890: LD_INT 81
18892: PUSH
18893: LD_VAR 0 1
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: LD_INT 21
18907: PUSH
18908: LD_INT 3
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PPUSH
18923: CALL_OW 69
18927: ST_TO_ADDR
// for i in mines do
18928: LD_ADDR_VAR 0 4
18932: PUSH
18933: LD_VAR 0 2
18937: PUSH
18938: FOR_IN
18939: IFFALSE 19027
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18941: LD_VAR 0 4
18945: PUSH
18946: LD_INT 1
18948: ARRAY
18949: PPUSH
18950: LD_VAR 0 4
18954: PUSH
18955: LD_INT 2
18957: ARRAY
18958: PPUSH
18959: CALL_OW 458
18963: NOT
18964: IFFALSE 18968
// continue ;
18966: GO 18938
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18968: LD_VAR 0 4
18972: PUSH
18973: LD_INT 1
18975: ARRAY
18976: PPUSH
18977: LD_VAR 0 4
18981: PUSH
18982: LD_INT 2
18984: ARRAY
18985: PPUSH
18986: CALL_OW 428
18990: PUSH
18991: LD_VAR 0 5
18995: IN
18996: IFFALSE 19025
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18998: LD_VAR 0 4
19002: PUSH
19003: LD_INT 1
19005: ARRAY
19006: PPUSH
19007: LD_VAR 0 4
19011: PUSH
19012: LD_INT 2
19014: ARRAY
19015: PPUSH
19016: LD_VAR 0 1
19020: PPUSH
19021: CALL_OW 456
// end ;
19025: GO 18938
19027: POP
19028: POP
// end ;
19029: LD_VAR 0 3
19033: RET
// export function Count ( array ) ; begin
19034: LD_INT 0
19036: PPUSH
// result := array + 0 ;
19037: LD_ADDR_VAR 0 2
19041: PUSH
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 0
19049: PLUS
19050: ST_TO_ADDR
// end ;
19051: LD_VAR 0 2
19055: RET
// export function IsEmpty ( building ) ; begin
19056: LD_INT 0
19058: PPUSH
// if not building then
19059: LD_VAR 0 1
19063: NOT
19064: IFFALSE 19068
// exit ;
19066: GO 19111
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19068: LD_ADDR_VAR 0 2
19072: PUSH
19073: LD_VAR 0 1
19077: PUSH
19078: LD_INT 22
19080: PUSH
19081: LD_VAR 0 1
19085: PPUSH
19086: CALL_OW 255
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 58
19097: PUSH
19098: EMPTY
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 69
19109: IN
19110: ST_TO_ADDR
// end ;
19111: LD_VAR 0 2
19115: RET
// export function IsNotFull ( building ) ; var places ; begin
19116: LD_INT 0
19118: PPUSH
19119: PPUSH
// if not building then
19120: LD_VAR 0 1
19124: NOT
19125: IFFALSE 19129
// exit ;
19127: GO 19157
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19129: LD_ADDR_VAR 0 2
19133: PUSH
19134: LD_VAR 0 1
19138: PPUSH
19139: LD_INT 3
19141: PUSH
19142: LD_INT 62
19144: PUSH
19145: EMPTY
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PPUSH
19152: CALL_OW 72
19156: ST_TO_ADDR
// end ;
19157: LD_VAR 0 2
19161: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19162: LD_INT 0
19164: PPUSH
19165: PPUSH
19166: PPUSH
19167: PPUSH
// tmp := [ ] ;
19168: LD_ADDR_VAR 0 3
19172: PUSH
19173: EMPTY
19174: ST_TO_ADDR
// list := [ ] ;
19175: LD_ADDR_VAR 0 5
19179: PUSH
19180: EMPTY
19181: ST_TO_ADDR
// for i = 16 to 25 do
19182: LD_ADDR_VAR 0 4
19186: PUSH
19187: DOUBLE
19188: LD_INT 16
19190: DEC
19191: ST_TO_ADDR
19192: LD_INT 25
19194: PUSH
19195: FOR_TO
19196: IFFALSE 19269
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19198: LD_ADDR_VAR 0 3
19202: PUSH
19203: LD_VAR 0 3
19207: PUSH
19208: LD_INT 22
19210: PUSH
19211: LD_VAR 0 1
19215: PPUSH
19216: CALL_OW 255
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 91
19227: PUSH
19228: LD_VAR 0 1
19232: PUSH
19233: LD_INT 6
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 30
19243: PUSH
19244: LD_VAR 0 4
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: PPUSH
19261: CALL_OW 69
19265: ADD
19266: ST_TO_ADDR
19267: GO 19195
19269: POP
19270: POP
// for i = 1 to tmp do
19271: LD_ADDR_VAR 0 4
19275: PUSH
19276: DOUBLE
19277: LD_INT 1
19279: DEC
19280: ST_TO_ADDR
19281: LD_VAR 0 3
19285: PUSH
19286: FOR_TO
19287: IFFALSE 19375
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19289: LD_ADDR_VAR 0 5
19293: PUSH
19294: LD_VAR 0 5
19298: PUSH
19299: LD_VAR 0 3
19303: PUSH
19304: LD_VAR 0 4
19308: ARRAY
19309: PPUSH
19310: CALL_OW 266
19314: PUSH
19315: LD_VAR 0 3
19319: PUSH
19320: LD_VAR 0 4
19324: ARRAY
19325: PPUSH
19326: CALL_OW 250
19330: PUSH
19331: LD_VAR 0 3
19335: PUSH
19336: LD_VAR 0 4
19340: ARRAY
19341: PPUSH
19342: CALL_OW 251
19346: PUSH
19347: LD_VAR 0 3
19351: PUSH
19352: LD_VAR 0 4
19356: ARRAY
19357: PPUSH
19358: CALL_OW 254
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: ADD
19372: ST_TO_ADDR
19373: GO 19286
19375: POP
19376: POP
// result := list ;
19377: LD_ADDR_VAR 0 2
19381: PUSH
19382: LD_VAR 0 5
19386: ST_TO_ADDR
// end ;
19387: LD_VAR 0 2
19391: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19392: LD_INT 0
19394: PPUSH
19395: PPUSH
19396: PPUSH
19397: PPUSH
19398: PPUSH
19399: PPUSH
19400: PPUSH
// if not factory then
19401: LD_VAR 0 1
19405: NOT
19406: IFFALSE 19410
// exit ;
19408: GO 20003
// if control = control_apeman then
19410: LD_VAR 0 4
19414: PUSH
19415: LD_INT 5
19417: EQUAL
19418: IFFALSE 19527
// begin tmp := UnitsInside ( factory ) ;
19420: LD_ADDR_VAR 0 8
19424: PUSH
19425: LD_VAR 0 1
19429: PPUSH
19430: CALL_OW 313
19434: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19435: LD_VAR 0 8
19439: PPUSH
19440: LD_INT 25
19442: PUSH
19443: LD_INT 12
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PPUSH
19450: CALL_OW 72
19454: NOT
19455: IFFALSE 19465
// control := control_manual ;
19457: LD_ADDR_VAR 0 4
19461: PUSH
19462: LD_INT 1
19464: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19465: LD_ADDR_VAR 0 8
19469: PUSH
19470: LD_VAR 0 1
19474: PPUSH
19475: CALL 19162 0 1
19479: ST_TO_ADDR
// if tmp then
19480: LD_VAR 0 8
19484: IFFALSE 19527
// begin for i in tmp do
19486: LD_ADDR_VAR 0 7
19490: PUSH
19491: LD_VAR 0 8
19495: PUSH
19496: FOR_IN
19497: IFFALSE 19525
// if i [ 1 ] = b_ext_radio then
19499: LD_VAR 0 7
19503: PUSH
19504: LD_INT 1
19506: ARRAY
19507: PUSH
19508: LD_INT 22
19510: EQUAL
19511: IFFALSE 19523
// begin control := control_remote ;
19513: LD_ADDR_VAR 0 4
19517: PUSH
19518: LD_INT 2
19520: ST_TO_ADDR
// break ;
19521: GO 19525
// end ;
19523: GO 19496
19525: POP
19526: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19527: LD_VAR 0 1
19531: PPUSH
19532: LD_VAR 0 2
19536: PPUSH
19537: LD_VAR 0 3
19541: PPUSH
19542: LD_VAR 0 4
19546: PPUSH
19547: LD_VAR 0 5
19551: PPUSH
19552: CALL_OW 448
19556: IFFALSE 19591
// begin result := [ chassis , engine , control , weapon ] ;
19558: LD_ADDR_VAR 0 6
19562: PUSH
19563: LD_VAR 0 2
19567: PUSH
19568: LD_VAR 0 3
19572: PUSH
19573: LD_VAR 0 4
19577: PUSH
19578: LD_VAR 0 5
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: ST_TO_ADDR
// exit ;
19589: GO 20003
// end ; _chassis := AvailableChassisList ( factory ) ;
19591: LD_ADDR_VAR 0 9
19595: PUSH
19596: LD_VAR 0 1
19600: PPUSH
19601: CALL_OW 475
19605: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19606: LD_ADDR_VAR 0 11
19610: PUSH
19611: LD_VAR 0 1
19615: PPUSH
19616: CALL_OW 476
19620: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19621: LD_ADDR_VAR 0 12
19625: PUSH
19626: LD_VAR 0 1
19630: PPUSH
19631: CALL_OW 477
19635: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19636: LD_ADDR_VAR 0 10
19640: PUSH
19641: LD_VAR 0 1
19645: PPUSH
19646: CALL_OW 478
19650: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19651: LD_VAR 0 9
19655: NOT
19656: PUSH
19657: LD_VAR 0 11
19661: NOT
19662: OR
19663: PUSH
19664: LD_VAR 0 12
19668: NOT
19669: OR
19670: PUSH
19671: LD_VAR 0 10
19675: NOT
19676: OR
19677: IFFALSE 19712
// begin result := [ chassis , engine , control , weapon ] ;
19679: LD_ADDR_VAR 0 6
19683: PUSH
19684: LD_VAR 0 2
19688: PUSH
19689: LD_VAR 0 3
19693: PUSH
19694: LD_VAR 0 4
19698: PUSH
19699: LD_VAR 0 5
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: ST_TO_ADDR
// exit ;
19710: GO 20003
// end ; if not chassis in _chassis then
19712: LD_VAR 0 2
19716: PUSH
19717: LD_VAR 0 9
19721: IN
19722: NOT
19723: IFFALSE 19749
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19725: LD_ADDR_VAR 0 2
19729: PUSH
19730: LD_VAR 0 9
19734: PUSH
19735: LD_INT 1
19737: PPUSH
19738: LD_VAR 0 9
19742: PPUSH
19743: CALL_OW 12
19747: ARRAY
19748: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19749: LD_VAR 0 2
19753: PPUSH
19754: LD_VAR 0 3
19758: PPUSH
19759: CALL 20008 0 2
19763: NOT
19764: IFFALSE 19823
// repeat engine := _engine [ 1 ] ;
19766: LD_ADDR_VAR 0 3
19770: PUSH
19771: LD_VAR 0 11
19775: PUSH
19776: LD_INT 1
19778: ARRAY
19779: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19780: LD_ADDR_VAR 0 11
19784: PUSH
19785: LD_VAR 0 11
19789: PPUSH
19790: LD_INT 1
19792: PPUSH
19793: CALL_OW 3
19797: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19798: LD_VAR 0 2
19802: PPUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: CALL 20008 0 2
19812: PUSH
19813: LD_VAR 0 11
19817: PUSH
19818: EMPTY
19819: EQUAL
19820: OR
19821: IFFALSE 19766
// if not control in _control then
19823: LD_VAR 0 4
19827: PUSH
19828: LD_VAR 0 12
19832: IN
19833: NOT
19834: IFFALSE 19860
// control := _control [ rand ( 1 , _control ) ] ;
19836: LD_ADDR_VAR 0 4
19840: PUSH
19841: LD_VAR 0 12
19845: PUSH
19846: LD_INT 1
19848: PPUSH
19849: LD_VAR 0 12
19853: PPUSH
19854: CALL_OW 12
19858: ARRAY
19859: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19860: LD_VAR 0 2
19864: PPUSH
19865: LD_VAR 0 5
19869: PPUSH
19870: CALL 20228 0 2
19874: NOT
19875: IFFALSE 19934
// repeat weapon := _weapon [ 1 ] ;
19877: LD_ADDR_VAR 0 5
19881: PUSH
19882: LD_VAR 0 10
19886: PUSH
19887: LD_INT 1
19889: ARRAY
19890: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19891: LD_ADDR_VAR 0 10
19895: PUSH
19896: LD_VAR 0 10
19900: PPUSH
19901: LD_INT 1
19903: PPUSH
19904: CALL_OW 3
19908: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19909: LD_VAR 0 2
19913: PPUSH
19914: LD_VAR 0 5
19918: PPUSH
19919: CALL 20228 0 2
19923: PUSH
19924: LD_VAR 0 10
19928: PUSH
19929: EMPTY
19930: EQUAL
19931: OR
19932: IFFALSE 19877
// result := [ ] ;
19934: LD_ADDR_VAR 0 6
19938: PUSH
19939: EMPTY
19940: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19941: LD_VAR 0 1
19945: PPUSH
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_VAR 0 4
19960: PPUSH
19961: LD_VAR 0 5
19965: PPUSH
19966: CALL_OW 448
19970: IFFALSE 20003
// result := [ chassis , engine , control , weapon ] ;
19972: LD_ADDR_VAR 0 6
19976: PUSH
19977: LD_VAR 0 2
19981: PUSH
19982: LD_VAR 0 3
19986: PUSH
19987: LD_VAR 0 4
19991: PUSH
19992: LD_VAR 0 5
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: ST_TO_ADDR
// end ;
20003: LD_VAR 0 6
20007: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20008: LD_INT 0
20010: PPUSH
// if not chassis or not engine then
20011: LD_VAR 0 1
20015: NOT
20016: PUSH
20017: LD_VAR 0 2
20021: NOT
20022: OR
20023: IFFALSE 20027
// exit ;
20025: GO 20223
// case engine of engine_solar :
20027: LD_VAR 0 2
20031: PUSH
20032: LD_INT 2
20034: DOUBLE
20035: EQUAL
20036: IFTRUE 20040
20038: GO 20078
20040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20041: LD_ADDR_VAR 0 3
20045: PUSH
20046: LD_INT 11
20048: PUSH
20049: LD_INT 12
20051: PUSH
20052: LD_INT 13
20054: PUSH
20055: LD_INT 14
20057: PUSH
20058: LD_INT 1
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: LD_INT 3
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: ST_TO_ADDR
20076: GO 20207
20078: LD_INT 1
20080: DOUBLE
20081: EQUAL
20082: IFTRUE 20086
20084: GO 20148
20086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20087: LD_ADDR_VAR 0 3
20091: PUSH
20092: LD_INT 11
20094: PUSH
20095: LD_INT 12
20097: PUSH
20098: LD_INT 13
20100: PUSH
20101: LD_INT 14
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: LD_INT 2
20109: PUSH
20110: LD_INT 3
20112: PUSH
20113: LD_INT 4
20115: PUSH
20116: LD_INT 5
20118: PUSH
20119: LD_INT 21
20121: PUSH
20122: LD_INT 23
20124: PUSH
20125: LD_INT 22
20127: PUSH
20128: LD_INT 24
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: ST_TO_ADDR
20146: GO 20207
20148: LD_INT 3
20150: DOUBLE
20151: EQUAL
20152: IFTRUE 20156
20154: GO 20206
20156: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20157: LD_ADDR_VAR 0 3
20161: PUSH
20162: LD_INT 13
20164: PUSH
20165: LD_INT 14
20167: PUSH
20168: LD_INT 2
20170: PUSH
20171: LD_INT 3
20173: PUSH
20174: LD_INT 4
20176: PUSH
20177: LD_INT 5
20179: PUSH
20180: LD_INT 21
20182: PUSH
20183: LD_INT 22
20185: PUSH
20186: LD_INT 23
20188: PUSH
20189: LD_INT 24
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: ST_TO_ADDR
20204: GO 20207
20206: POP
// result := ( chassis in result ) ;
20207: LD_ADDR_VAR 0 3
20211: PUSH
20212: LD_VAR 0 1
20216: PUSH
20217: LD_VAR 0 3
20221: IN
20222: ST_TO_ADDR
// end ;
20223: LD_VAR 0 3
20227: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20228: LD_INT 0
20230: PPUSH
// if not chassis or not weapon then
20231: LD_VAR 0 1
20235: NOT
20236: PUSH
20237: LD_VAR 0 2
20241: NOT
20242: OR
20243: IFFALSE 20247
// exit ;
20245: GO 21307
// case weapon of us_machine_gun :
20247: LD_VAR 0 2
20251: PUSH
20252: LD_INT 2
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20290
20260: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20261: LD_ADDR_VAR 0 3
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 3
20274: PUSH
20275: LD_INT 4
20277: PUSH
20278: LD_INT 5
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: ST_TO_ADDR
20288: GO 21291
20290: LD_INT 3
20292: DOUBLE
20293: EQUAL
20294: IFTRUE 20298
20296: GO 20328
20298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20299: LD_ADDR_VAR 0 3
20303: PUSH
20304: LD_INT 1
20306: PUSH
20307: LD_INT 2
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: LD_INT 4
20315: PUSH
20316: LD_INT 5
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: ST_TO_ADDR
20326: GO 21291
20328: LD_INT 11
20330: DOUBLE
20331: EQUAL
20332: IFTRUE 20336
20334: GO 20366
20336: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20337: LD_ADDR_VAR 0 3
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: LD_INT 3
20350: PUSH
20351: LD_INT 4
20353: PUSH
20354: LD_INT 5
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: ST_TO_ADDR
20364: GO 21291
20366: LD_INT 4
20368: DOUBLE
20369: EQUAL
20370: IFTRUE 20374
20372: GO 20400
20374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20375: LD_ADDR_VAR 0 3
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: LD_INT 3
20385: PUSH
20386: LD_INT 4
20388: PUSH
20389: LD_INT 5
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: ST_TO_ADDR
20398: GO 21291
20400: LD_INT 5
20402: DOUBLE
20403: EQUAL
20404: IFTRUE 20408
20406: GO 20434
20408: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20409: LD_ADDR_VAR 0 3
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: LD_INT 3
20419: PUSH
20420: LD_INT 4
20422: PUSH
20423: LD_INT 5
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: ST_TO_ADDR
20432: GO 21291
20434: LD_INT 9
20436: DOUBLE
20437: EQUAL
20438: IFTRUE 20442
20440: GO 20468
20442: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20443: LD_ADDR_VAR 0 3
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: LD_INT 3
20453: PUSH
20454: LD_INT 4
20456: PUSH
20457: LD_INT 5
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: ST_TO_ADDR
20466: GO 21291
20468: LD_INT 7
20470: DOUBLE
20471: EQUAL
20472: IFTRUE 20476
20474: GO 20502
20476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20477: LD_ADDR_VAR 0 3
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 3
20487: PUSH
20488: LD_INT 4
20490: PUSH
20491: LD_INT 5
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: ST_TO_ADDR
20500: GO 21291
20502: LD_INT 12
20504: DOUBLE
20505: EQUAL
20506: IFTRUE 20510
20508: GO 20536
20510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20511: LD_ADDR_VAR 0 3
20515: PUSH
20516: LD_INT 2
20518: PUSH
20519: LD_INT 3
20521: PUSH
20522: LD_INT 4
20524: PUSH
20525: LD_INT 5
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: ST_TO_ADDR
20534: GO 21291
20536: LD_INT 13
20538: DOUBLE
20539: EQUAL
20540: IFTRUE 20544
20542: GO 20570
20544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20545: LD_ADDR_VAR 0 3
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: LD_INT 3
20555: PUSH
20556: LD_INT 4
20558: PUSH
20559: LD_INT 5
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: ST_TO_ADDR
20568: GO 21291
20570: LD_INT 14
20572: DOUBLE
20573: EQUAL
20574: IFTRUE 20578
20576: GO 20596
20578: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_INT 4
20586: PUSH
20587: LD_INT 5
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: ST_TO_ADDR
20594: GO 21291
20596: LD_INT 6
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20622
20604: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20605: LD_ADDR_VAR 0 3
20609: PUSH
20610: LD_INT 4
20612: PUSH
20613: LD_INT 5
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: ST_TO_ADDR
20620: GO 21291
20622: LD_INT 10
20624: DOUBLE
20625: EQUAL
20626: IFTRUE 20630
20628: GO 20648
20630: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20631: LD_ADDR_VAR 0 3
20635: PUSH
20636: LD_INT 4
20638: PUSH
20639: LD_INT 5
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: ST_TO_ADDR
20646: GO 21291
20648: LD_INT 22
20650: DOUBLE
20651: EQUAL
20652: IFTRUE 20656
20654: GO 20682
20656: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_INT 11
20664: PUSH
20665: LD_INT 12
20667: PUSH
20668: LD_INT 13
20670: PUSH
20671: LD_INT 14
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: ST_TO_ADDR
20680: GO 21291
20682: LD_INT 23
20684: DOUBLE
20685: EQUAL
20686: IFTRUE 20690
20688: GO 20716
20690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20691: LD_ADDR_VAR 0 3
20695: PUSH
20696: LD_INT 11
20698: PUSH
20699: LD_INT 12
20701: PUSH
20702: LD_INT 13
20704: PUSH
20705: LD_INT 14
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: ST_TO_ADDR
20714: GO 21291
20716: LD_INT 24
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20750
20724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20725: LD_ADDR_VAR 0 3
20729: PUSH
20730: LD_INT 11
20732: PUSH
20733: LD_INT 12
20735: PUSH
20736: LD_INT 13
20738: PUSH
20739: LD_INT 14
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: ST_TO_ADDR
20748: GO 21291
20750: LD_INT 30
20752: DOUBLE
20753: EQUAL
20754: IFTRUE 20758
20756: GO 20784
20758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20759: LD_ADDR_VAR 0 3
20763: PUSH
20764: LD_INT 11
20766: PUSH
20767: LD_INT 12
20769: PUSH
20770: LD_INT 13
20772: PUSH
20773: LD_INT 14
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: ST_TO_ADDR
20782: GO 21291
20784: LD_INT 25
20786: DOUBLE
20787: EQUAL
20788: IFTRUE 20792
20790: GO 20810
20792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20793: LD_ADDR_VAR 0 3
20797: PUSH
20798: LD_INT 13
20800: PUSH
20801: LD_INT 14
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: ST_TO_ADDR
20808: GO 21291
20810: LD_INT 27
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20818
20816: GO 20836
20818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20819: LD_ADDR_VAR 0 3
20823: PUSH
20824: LD_INT 13
20826: PUSH
20827: LD_INT 14
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: ST_TO_ADDR
20834: GO 21291
20836: LD_INT 92
20838: DOUBLE
20839: EQUAL
20840: IFTRUE 20844
20842: GO 20870
20844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20845: LD_ADDR_VAR 0 3
20849: PUSH
20850: LD_INT 11
20852: PUSH
20853: LD_INT 12
20855: PUSH
20856: LD_INT 13
20858: PUSH
20859: LD_INT 14
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: ST_TO_ADDR
20868: GO 21291
20870: LD_INT 28
20872: DOUBLE
20873: EQUAL
20874: IFTRUE 20878
20876: GO 20896
20878: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20879: LD_ADDR_VAR 0 3
20883: PUSH
20884: LD_INT 13
20886: PUSH
20887: LD_INT 14
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: ST_TO_ADDR
20894: GO 21291
20896: LD_INT 29
20898: DOUBLE
20899: EQUAL
20900: IFTRUE 20904
20902: GO 20922
20904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20905: LD_ADDR_VAR 0 3
20909: PUSH
20910: LD_INT 13
20912: PUSH
20913: LD_INT 14
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: ST_TO_ADDR
20920: GO 21291
20922: LD_INT 31
20924: DOUBLE
20925: EQUAL
20926: IFTRUE 20930
20928: GO 20948
20930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20931: LD_ADDR_VAR 0 3
20935: PUSH
20936: LD_INT 13
20938: PUSH
20939: LD_INT 14
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: ST_TO_ADDR
20946: GO 21291
20948: LD_INT 26
20950: DOUBLE
20951: EQUAL
20952: IFTRUE 20956
20954: GO 20974
20956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20957: LD_ADDR_VAR 0 3
20961: PUSH
20962: LD_INT 13
20964: PUSH
20965: LD_INT 14
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: ST_TO_ADDR
20972: GO 21291
20974: LD_INT 42
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 21008
20982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20983: LD_ADDR_VAR 0 3
20987: PUSH
20988: LD_INT 21
20990: PUSH
20991: LD_INT 22
20993: PUSH
20994: LD_INT 23
20996: PUSH
20997: LD_INT 24
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: ST_TO_ADDR
21006: GO 21291
21008: LD_INT 43
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21042
21016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21017: LD_ADDR_VAR 0 3
21021: PUSH
21022: LD_INT 21
21024: PUSH
21025: LD_INT 22
21027: PUSH
21028: LD_INT 23
21030: PUSH
21031: LD_INT 24
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: ST_TO_ADDR
21040: GO 21291
21042: LD_INT 44
21044: DOUBLE
21045: EQUAL
21046: IFTRUE 21050
21048: GO 21076
21050: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21051: LD_ADDR_VAR 0 3
21055: PUSH
21056: LD_INT 21
21058: PUSH
21059: LD_INT 22
21061: PUSH
21062: LD_INT 23
21064: PUSH
21065: LD_INT 24
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: ST_TO_ADDR
21074: GO 21291
21076: LD_INT 45
21078: DOUBLE
21079: EQUAL
21080: IFTRUE 21084
21082: GO 21110
21084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21085: LD_ADDR_VAR 0 3
21089: PUSH
21090: LD_INT 21
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 23
21098: PUSH
21099: LD_INT 24
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: ST_TO_ADDR
21108: GO 21291
21110: LD_INT 49
21112: DOUBLE
21113: EQUAL
21114: IFTRUE 21118
21116: GO 21144
21118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21119: LD_ADDR_VAR 0 3
21123: PUSH
21124: LD_INT 21
21126: PUSH
21127: LD_INT 22
21129: PUSH
21130: LD_INT 23
21132: PUSH
21133: LD_INT 24
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: ST_TO_ADDR
21142: GO 21291
21144: LD_INT 51
21146: DOUBLE
21147: EQUAL
21148: IFTRUE 21152
21150: GO 21178
21152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21153: LD_ADDR_VAR 0 3
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 22
21163: PUSH
21164: LD_INT 23
21166: PUSH
21167: LD_INT 24
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: ST_TO_ADDR
21176: GO 21291
21178: LD_INT 52
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21212
21186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21187: LD_ADDR_VAR 0 3
21191: PUSH
21192: LD_INT 21
21194: PUSH
21195: LD_INT 22
21197: PUSH
21198: LD_INT 23
21200: PUSH
21201: LD_INT 24
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: ST_TO_ADDR
21210: GO 21291
21212: LD_INT 53
21214: DOUBLE
21215: EQUAL
21216: IFTRUE 21220
21218: GO 21238
21220: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21221: LD_ADDR_VAR 0 3
21225: PUSH
21226: LD_INT 23
21228: PUSH
21229: LD_INT 24
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: ST_TO_ADDR
21236: GO 21291
21238: LD_INT 46
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21264
21246: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21247: LD_ADDR_VAR 0 3
21251: PUSH
21252: LD_INT 23
21254: PUSH
21255: LD_INT 24
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: ST_TO_ADDR
21262: GO 21291
21264: LD_INT 47
21266: DOUBLE
21267: EQUAL
21268: IFTRUE 21272
21270: GO 21290
21272: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21273: LD_ADDR_VAR 0 3
21277: PUSH
21278: LD_INT 23
21280: PUSH
21281: LD_INT 24
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: ST_TO_ADDR
21288: GO 21291
21290: POP
// result := ( chassis in result ) ;
21291: LD_ADDR_VAR 0 3
21295: PUSH
21296: LD_VAR 0 1
21300: PUSH
21301: LD_VAR 0 3
21305: IN
21306: ST_TO_ADDR
// end ;
21307: LD_VAR 0 3
21311: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21312: LD_INT 0
21314: PPUSH
21315: PPUSH
21316: PPUSH
21317: PPUSH
21318: PPUSH
21319: PPUSH
21320: PPUSH
// result := array ;
21321: LD_ADDR_VAR 0 5
21325: PUSH
21326: LD_VAR 0 1
21330: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21331: LD_VAR 0 1
21335: NOT
21336: PUSH
21337: LD_VAR 0 2
21341: NOT
21342: OR
21343: PUSH
21344: LD_VAR 0 3
21348: NOT
21349: OR
21350: PUSH
21351: LD_VAR 0 2
21355: PUSH
21356: LD_VAR 0 1
21360: GREATER
21361: OR
21362: PUSH
21363: LD_VAR 0 3
21367: PUSH
21368: LD_VAR 0 1
21372: GREATER
21373: OR
21374: IFFALSE 21378
// exit ;
21376: GO 21674
// if direction then
21378: LD_VAR 0 4
21382: IFFALSE 21446
// begin d := 1 ;
21384: LD_ADDR_VAR 0 9
21388: PUSH
21389: LD_INT 1
21391: ST_TO_ADDR
// if i_from > i_to then
21392: LD_VAR 0 2
21396: PUSH
21397: LD_VAR 0 3
21401: GREATER
21402: IFFALSE 21428
// length := ( array - i_from ) + i_to else
21404: LD_ADDR_VAR 0 11
21408: PUSH
21409: LD_VAR 0 1
21413: PUSH
21414: LD_VAR 0 2
21418: MINUS
21419: PUSH
21420: LD_VAR 0 3
21424: PLUS
21425: ST_TO_ADDR
21426: GO 21444
// length := i_to - i_from ;
21428: LD_ADDR_VAR 0 11
21432: PUSH
21433: LD_VAR 0 3
21437: PUSH
21438: LD_VAR 0 2
21442: MINUS
21443: ST_TO_ADDR
// end else
21444: GO 21507
// begin d := - 1 ;
21446: LD_ADDR_VAR 0 9
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: ST_TO_ADDR
// if i_from > i_to then
21455: LD_VAR 0 2
21459: PUSH
21460: LD_VAR 0 3
21464: GREATER
21465: IFFALSE 21485
// length := i_from - i_to else
21467: LD_ADDR_VAR 0 11
21471: PUSH
21472: LD_VAR 0 2
21476: PUSH
21477: LD_VAR 0 3
21481: MINUS
21482: ST_TO_ADDR
21483: GO 21507
// length := ( array - i_to ) + i_from ;
21485: LD_ADDR_VAR 0 11
21489: PUSH
21490: LD_VAR 0 1
21494: PUSH
21495: LD_VAR 0 3
21499: MINUS
21500: PUSH
21501: LD_VAR 0 2
21505: PLUS
21506: ST_TO_ADDR
// end ; if not length then
21507: LD_VAR 0 11
21511: NOT
21512: IFFALSE 21516
// exit ;
21514: GO 21674
// tmp := array ;
21516: LD_ADDR_VAR 0 10
21520: PUSH
21521: LD_VAR 0 1
21525: ST_TO_ADDR
// for i = 1 to length do
21526: LD_ADDR_VAR 0 6
21530: PUSH
21531: DOUBLE
21532: LD_INT 1
21534: DEC
21535: ST_TO_ADDR
21536: LD_VAR 0 11
21540: PUSH
21541: FOR_TO
21542: IFFALSE 21662
// begin for j = 1 to array do
21544: LD_ADDR_VAR 0 7
21548: PUSH
21549: DOUBLE
21550: LD_INT 1
21552: DEC
21553: ST_TO_ADDR
21554: LD_VAR 0 1
21558: PUSH
21559: FOR_TO
21560: IFFALSE 21648
// begin k := j + d ;
21562: LD_ADDR_VAR 0 8
21566: PUSH
21567: LD_VAR 0 7
21571: PUSH
21572: LD_VAR 0 9
21576: PLUS
21577: ST_TO_ADDR
// if k > array then
21578: LD_VAR 0 8
21582: PUSH
21583: LD_VAR 0 1
21587: GREATER
21588: IFFALSE 21598
// k := 1 ;
21590: LD_ADDR_VAR 0 8
21594: PUSH
21595: LD_INT 1
21597: ST_TO_ADDR
// if not k then
21598: LD_VAR 0 8
21602: NOT
21603: IFFALSE 21615
// k := array ;
21605: LD_ADDR_VAR 0 8
21609: PUSH
21610: LD_VAR 0 1
21614: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21615: LD_ADDR_VAR 0 10
21619: PUSH
21620: LD_VAR 0 10
21624: PPUSH
21625: LD_VAR 0 8
21629: PPUSH
21630: LD_VAR 0 1
21634: PUSH
21635: LD_VAR 0 7
21639: ARRAY
21640: PPUSH
21641: CALL_OW 1
21645: ST_TO_ADDR
// end ;
21646: GO 21559
21648: POP
21649: POP
// array := tmp ;
21650: LD_ADDR_VAR 0 1
21654: PUSH
21655: LD_VAR 0 10
21659: ST_TO_ADDR
// end ;
21660: GO 21541
21662: POP
21663: POP
// result := array ;
21664: LD_ADDR_VAR 0 5
21668: PUSH
21669: LD_VAR 0 1
21673: ST_TO_ADDR
// end ;
21674: LD_VAR 0 5
21678: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21679: LD_INT 0
21681: PPUSH
21682: PPUSH
// result := 0 ;
21683: LD_ADDR_VAR 0 3
21687: PUSH
21688: LD_INT 0
21690: ST_TO_ADDR
// if not array or not value in array then
21691: LD_VAR 0 1
21695: NOT
21696: PUSH
21697: LD_VAR 0 2
21701: PUSH
21702: LD_VAR 0 1
21706: IN
21707: NOT
21708: OR
21709: IFFALSE 21713
// exit ;
21711: GO 21767
// for i = 1 to array do
21713: LD_ADDR_VAR 0 4
21717: PUSH
21718: DOUBLE
21719: LD_INT 1
21721: DEC
21722: ST_TO_ADDR
21723: LD_VAR 0 1
21727: PUSH
21728: FOR_TO
21729: IFFALSE 21765
// if value = array [ i ] then
21731: LD_VAR 0 2
21735: PUSH
21736: LD_VAR 0 1
21740: PUSH
21741: LD_VAR 0 4
21745: ARRAY
21746: EQUAL
21747: IFFALSE 21763
// begin result := i ;
21749: LD_ADDR_VAR 0 3
21753: PUSH
21754: LD_VAR 0 4
21758: ST_TO_ADDR
// exit ;
21759: POP
21760: POP
21761: GO 21767
// end ;
21763: GO 21728
21765: POP
21766: POP
// end ;
21767: LD_VAR 0 3
21771: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21772: LD_INT 0
21774: PPUSH
// vc_chassis := chassis ;
21775: LD_ADDR_OWVAR 37
21779: PUSH
21780: LD_VAR 0 1
21784: ST_TO_ADDR
// vc_engine := engine ;
21785: LD_ADDR_OWVAR 39
21789: PUSH
21790: LD_VAR 0 2
21794: ST_TO_ADDR
// vc_control := control ;
21795: LD_ADDR_OWVAR 38
21799: PUSH
21800: LD_VAR 0 3
21804: ST_TO_ADDR
// vc_weapon := weapon ;
21805: LD_ADDR_OWVAR 40
21809: PUSH
21810: LD_VAR 0 4
21814: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21815: LD_ADDR_OWVAR 41
21819: PUSH
21820: LD_VAR 0 5
21824: ST_TO_ADDR
// end ;
21825: LD_VAR 0 6
21829: RET
// export function WantPlant ( unit ) ; var task ; begin
21830: LD_INT 0
21832: PPUSH
21833: PPUSH
// result := false ;
21834: LD_ADDR_VAR 0 2
21838: PUSH
21839: LD_INT 0
21841: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21842: LD_ADDR_VAR 0 3
21846: PUSH
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL_OW 437
21856: ST_TO_ADDR
// if task then
21857: LD_VAR 0 3
21861: IFFALSE 21889
// if task [ 1 ] [ 1 ] = p then
21863: LD_VAR 0 3
21867: PUSH
21868: LD_INT 1
21870: ARRAY
21871: PUSH
21872: LD_INT 1
21874: ARRAY
21875: PUSH
21876: LD_STRING p
21878: EQUAL
21879: IFFALSE 21889
// result := true ;
21881: LD_ADDR_VAR 0 2
21885: PUSH
21886: LD_INT 1
21888: ST_TO_ADDR
// end ;
21889: LD_VAR 0 2
21893: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21894: LD_INT 0
21896: PPUSH
21897: PPUSH
21898: PPUSH
21899: PPUSH
// if pos < 1 then
21900: LD_VAR 0 2
21904: PUSH
21905: LD_INT 1
21907: LESS
21908: IFFALSE 21912
// exit ;
21910: GO 22215
// if pos = 1 then
21912: LD_VAR 0 2
21916: PUSH
21917: LD_INT 1
21919: EQUAL
21920: IFFALSE 21953
// result := Replace ( arr , pos [ 1 ] , value ) else
21922: LD_ADDR_VAR 0 4
21926: PUSH
21927: LD_VAR 0 1
21931: PPUSH
21932: LD_VAR 0 2
21936: PUSH
21937: LD_INT 1
21939: ARRAY
21940: PPUSH
21941: LD_VAR 0 3
21945: PPUSH
21946: CALL_OW 1
21950: ST_TO_ADDR
21951: GO 22215
// begin tmp := arr ;
21953: LD_ADDR_VAR 0 6
21957: PUSH
21958: LD_VAR 0 1
21962: ST_TO_ADDR
// s_arr := [ tmp ] ;
21963: LD_ADDR_VAR 0 7
21967: PUSH
21968: LD_VAR 0 6
21972: PUSH
21973: EMPTY
21974: LIST
21975: ST_TO_ADDR
// for i = 1 to pos - 1 do
21976: LD_ADDR_VAR 0 5
21980: PUSH
21981: DOUBLE
21982: LD_INT 1
21984: DEC
21985: ST_TO_ADDR
21986: LD_VAR 0 2
21990: PUSH
21991: LD_INT 1
21993: MINUS
21994: PUSH
21995: FOR_TO
21996: IFFALSE 22041
// begin tmp := tmp [ pos [ i ] ] ;
21998: LD_ADDR_VAR 0 6
22002: PUSH
22003: LD_VAR 0 6
22007: PUSH
22008: LD_VAR 0 2
22012: PUSH
22013: LD_VAR 0 5
22017: ARRAY
22018: ARRAY
22019: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22020: LD_ADDR_VAR 0 7
22024: PUSH
22025: LD_VAR 0 7
22029: PUSH
22030: LD_VAR 0 6
22034: PUSH
22035: EMPTY
22036: LIST
22037: ADD
22038: ST_TO_ADDR
// end ;
22039: GO 21995
22041: POP
22042: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22043: LD_ADDR_VAR 0 6
22047: PUSH
22048: LD_VAR 0 6
22052: PPUSH
22053: LD_VAR 0 2
22057: PUSH
22058: LD_VAR 0 2
22062: ARRAY
22063: PPUSH
22064: LD_VAR 0 3
22068: PPUSH
22069: CALL_OW 1
22073: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22074: LD_ADDR_VAR 0 7
22078: PUSH
22079: LD_VAR 0 7
22083: PPUSH
22084: LD_VAR 0 7
22088: PPUSH
22089: LD_VAR 0 6
22093: PPUSH
22094: CALL_OW 1
22098: ST_TO_ADDR
// for i = s_arr downto 2 do
22099: LD_ADDR_VAR 0 5
22103: PUSH
22104: DOUBLE
22105: LD_VAR 0 7
22109: INC
22110: ST_TO_ADDR
22111: LD_INT 2
22113: PUSH
22114: FOR_DOWNTO
22115: IFFALSE 22199
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22117: LD_ADDR_VAR 0 6
22121: PUSH
22122: LD_VAR 0 7
22126: PUSH
22127: LD_VAR 0 5
22131: PUSH
22132: LD_INT 1
22134: MINUS
22135: ARRAY
22136: PPUSH
22137: LD_VAR 0 2
22141: PUSH
22142: LD_VAR 0 5
22146: PUSH
22147: LD_INT 1
22149: MINUS
22150: ARRAY
22151: PPUSH
22152: LD_VAR 0 7
22156: PUSH
22157: LD_VAR 0 5
22161: ARRAY
22162: PPUSH
22163: CALL_OW 1
22167: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22168: LD_ADDR_VAR 0 7
22172: PUSH
22173: LD_VAR 0 7
22177: PPUSH
22178: LD_VAR 0 5
22182: PUSH
22183: LD_INT 1
22185: MINUS
22186: PPUSH
22187: LD_VAR 0 6
22191: PPUSH
22192: CALL_OW 1
22196: ST_TO_ADDR
// end ;
22197: GO 22114
22199: POP
22200: POP
// result := s_arr [ 1 ] ;
22201: LD_ADDR_VAR 0 4
22205: PUSH
22206: LD_VAR 0 7
22210: PUSH
22211: LD_INT 1
22213: ARRAY
22214: ST_TO_ADDR
// end ; end ;
22215: LD_VAR 0 4
22219: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22220: LD_INT 0
22222: PPUSH
22223: PPUSH
// if not list then
22224: LD_VAR 0 1
22228: NOT
22229: IFFALSE 22233
// exit ;
22231: GO 22324
// i := list [ pos1 ] ;
22233: LD_ADDR_VAR 0 5
22237: PUSH
22238: LD_VAR 0 1
22242: PUSH
22243: LD_VAR 0 2
22247: ARRAY
22248: ST_TO_ADDR
// if not i then
22249: LD_VAR 0 5
22253: NOT
22254: IFFALSE 22258
// exit ;
22256: GO 22324
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22258: LD_ADDR_VAR 0 1
22262: PUSH
22263: LD_VAR 0 1
22267: PPUSH
22268: LD_VAR 0 2
22272: PPUSH
22273: LD_VAR 0 1
22277: PUSH
22278: LD_VAR 0 3
22282: ARRAY
22283: PPUSH
22284: CALL_OW 1
22288: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22289: LD_ADDR_VAR 0 1
22293: PUSH
22294: LD_VAR 0 1
22298: PPUSH
22299: LD_VAR 0 3
22303: PPUSH
22304: LD_VAR 0 5
22308: PPUSH
22309: CALL_OW 1
22313: ST_TO_ADDR
// result := list ;
22314: LD_ADDR_VAR 0 4
22318: PUSH
22319: LD_VAR 0 1
22323: ST_TO_ADDR
// end ;
22324: LD_VAR 0 4
22328: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22329: LD_INT 0
22331: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22332: LD_ADDR_VAR 0 5
22336: PUSH
22337: LD_VAR 0 1
22341: PPUSH
22342: CALL_OW 250
22346: PPUSH
22347: LD_VAR 0 1
22351: PPUSH
22352: CALL_OW 251
22356: PPUSH
22357: LD_VAR 0 2
22361: PPUSH
22362: LD_VAR 0 3
22366: PPUSH
22367: LD_VAR 0 4
22371: PPUSH
22372: CALL 22750 0 5
22376: ST_TO_ADDR
// end ;
22377: LD_VAR 0 5
22381: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22382: LD_INT 0
22384: PPUSH
22385: PPUSH
22386: PPUSH
22387: PPUSH
// if not list or not unit then
22388: LD_VAR 0 2
22392: NOT
22393: PUSH
22394: LD_VAR 0 1
22398: NOT
22399: OR
22400: IFFALSE 22404
// exit ;
22402: GO 22745
// result := [ ] ;
22404: LD_ADDR_VAR 0 5
22408: PUSH
22409: EMPTY
22410: ST_TO_ADDR
// for i in list do
22411: LD_ADDR_VAR 0 6
22415: PUSH
22416: LD_VAR 0 2
22420: PUSH
22421: FOR_IN
22422: IFFALSE 22640
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22424: LD_ADDR_VAR 0 8
22428: PUSH
22429: LD_VAR 0 1
22433: PPUSH
22434: LD_VAR 0 6
22438: PUSH
22439: LD_INT 1
22441: ARRAY
22442: PPUSH
22443: LD_VAR 0 6
22447: PUSH
22448: LD_INT 2
22450: ARRAY
22451: PPUSH
22452: CALL_OW 297
22456: ST_TO_ADDR
// if not Count ( result ) then
22457: LD_VAR 0 5
22461: PPUSH
22462: CALL 19034 0 1
22466: NOT
22467: IFFALSE 22500
// begin result := Join ( result , [ i , tmp ] ) ;
22469: LD_ADDR_VAR 0 5
22473: PUSH
22474: LD_VAR 0 5
22478: PPUSH
22479: LD_VAR 0 6
22483: PUSH
22484: LD_VAR 0 8
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PPUSH
22493: CALL 54634 0 2
22497: ST_TO_ADDR
// continue ;
22498: GO 22421
// end ; if result [ result ] [ 2 ] <= tmp then
22500: LD_VAR 0 5
22504: PUSH
22505: LD_VAR 0 5
22509: ARRAY
22510: PUSH
22511: LD_INT 2
22513: ARRAY
22514: PUSH
22515: LD_VAR 0 8
22519: LESSEQUAL
22520: IFFALSE 22553
// result := Join ( result , [ i , tmp ] ) else
22522: LD_ADDR_VAR 0 5
22526: PUSH
22527: LD_VAR 0 5
22531: PPUSH
22532: LD_VAR 0 6
22536: PUSH
22537: LD_VAR 0 8
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PPUSH
22546: CALL 54634 0 2
22550: ST_TO_ADDR
22551: GO 22638
// begin for j := 1 to Count ( result ) do
22553: LD_ADDR_VAR 0 7
22557: PUSH
22558: DOUBLE
22559: LD_INT 1
22561: DEC
22562: ST_TO_ADDR
22563: LD_VAR 0 5
22567: PPUSH
22568: CALL 19034 0 1
22572: PUSH
22573: FOR_TO
22574: IFFALSE 22636
// begin if tmp < result [ j ] [ 2 ] then
22576: LD_VAR 0 8
22580: PUSH
22581: LD_VAR 0 5
22585: PUSH
22586: LD_VAR 0 7
22590: ARRAY
22591: PUSH
22592: LD_INT 2
22594: ARRAY
22595: LESS
22596: IFFALSE 22634
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22598: LD_ADDR_VAR 0 5
22602: PUSH
22603: LD_VAR 0 5
22607: PPUSH
22608: LD_VAR 0 7
22612: PPUSH
22613: LD_VAR 0 6
22617: PUSH
22618: LD_VAR 0 8
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PPUSH
22627: CALL_OW 2
22631: ST_TO_ADDR
// break ;
22632: GO 22636
// end ; end ;
22634: GO 22573
22636: POP
22637: POP
// end ; end ;
22638: GO 22421
22640: POP
22641: POP
// if result and not asc then
22642: LD_VAR 0 5
22646: PUSH
22647: LD_VAR 0 3
22651: NOT
22652: AND
22653: IFFALSE 22670
// result := ReverseArray ( result ) ;
22655: LD_ADDR_VAR 0 5
22659: PUSH
22660: LD_VAR 0 5
22664: PPUSH
22665: CALL 49910 0 1
22669: ST_TO_ADDR
// tmp := [ ] ;
22670: LD_ADDR_VAR 0 8
22674: PUSH
22675: EMPTY
22676: ST_TO_ADDR
// if mode then
22677: LD_VAR 0 4
22681: IFFALSE 22745
// begin for i := 1 to result do
22683: LD_ADDR_VAR 0 6
22687: PUSH
22688: DOUBLE
22689: LD_INT 1
22691: DEC
22692: ST_TO_ADDR
22693: LD_VAR 0 5
22697: PUSH
22698: FOR_TO
22699: IFFALSE 22733
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22701: LD_ADDR_VAR 0 8
22705: PUSH
22706: LD_VAR 0 8
22710: PPUSH
22711: LD_VAR 0 5
22715: PUSH
22716: LD_VAR 0 6
22720: ARRAY
22721: PUSH
22722: LD_INT 1
22724: ARRAY
22725: PPUSH
22726: CALL 54634 0 2
22730: ST_TO_ADDR
22731: GO 22698
22733: POP
22734: POP
// result := tmp ;
22735: LD_ADDR_VAR 0 5
22739: PUSH
22740: LD_VAR 0 8
22744: ST_TO_ADDR
// end ; end ;
22745: LD_VAR 0 5
22749: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22750: LD_INT 0
22752: PPUSH
22753: PPUSH
22754: PPUSH
22755: PPUSH
// if not list then
22756: LD_VAR 0 3
22760: NOT
22761: IFFALSE 22765
// exit ;
22763: GO 23153
// result := [ ] ;
22765: LD_ADDR_VAR 0 6
22769: PUSH
22770: EMPTY
22771: ST_TO_ADDR
// for i in list do
22772: LD_ADDR_VAR 0 7
22776: PUSH
22777: LD_VAR 0 3
22781: PUSH
22782: FOR_IN
22783: IFFALSE 22985
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22785: LD_ADDR_VAR 0 9
22789: PUSH
22790: LD_VAR 0 7
22794: PPUSH
22795: LD_VAR 0 1
22799: PPUSH
22800: LD_VAR 0 2
22804: PPUSH
22805: CALL_OW 297
22809: ST_TO_ADDR
// if not result then
22810: LD_VAR 0 6
22814: NOT
22815: IFFALSE 22841
// result := [ [ i , tmp ] ] else
22817: LD_ADDR_VAR 0 6
22821: PUSH
22822: LD_VAR 0 7
22826: PUSH
22827: LD_VAR 0 9
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: EMPTY
22837: LIST
22838: ST_TO_ADDR
22839: GO 22983
// begin if result [ result ] [ 2 ] < tmp then
22841: LD_VAR 0 6
22845: PUSH
22846: LD_VAR 0 6
22850: ARRAY
22851: PUSH
22852: LD_INT 2
22854: ARRAY
22855: PUSH
22856: LD_VAR 0 9
22860: LESS
22861: IFFALSE 22903
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22863: LD_ADDR_VAR 0 6
22867: PUSH
22868: LD_VAR 0 6
22872: PPUSH
22873: LD_VAR 0 6
22877: PUSH
22878: LD_INT 1
22880: PLUS
22881: PPUSH
22882: LD_VAR 0 7
22886: PUSH
22887: LD_VAR 0 9
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PPUSH
22896: CALL_OW 2
22900: ST_TO_ADDR
22901: GO 22983
// for j = 1 to result do
22903: LD_ADDR_VAR 0 8
22907: PUSH
22908: DOUBLE
22909: LD_INT 1
22911: DEC
22912: ST_TO_ADDR
22913: LD_VAR 0 6
22917: PUSH
22918: FOR_TO
22919: IFFALSE 22981
// begin if tmp < result [ j ] [ 2 ] then
22921: LD_VAR 0 9
22925: PUSH
22926: LD_VAR 0 6
22930: PUSH
22931: LD_VAR 0 8
22935: ARRAY
22936: PUSH
22937: LD_INT 2
22939: ARRAY
22940: LESS
22941: IFFALSE 22979
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22943: LD_ADDR_VAR 0 6
22947: PUSH
22948: LD_VAR 0 6
22952: PPUSH
22953: LD_VAR 0 8
22957: PPUSH
22958: LD_VAR 0 7
22962: PUSH
22963: LD_VAR 0 9
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PPUSH
22972: CALL_OW 2
22976: ST_TO_ADDR
// break ;
22977: GO 22981
// end ; end ;
22979: GO 22918
22981: POP
22982: POP
// end ; end ;
22983: GO 22782
22985: POP
22986: POP
// if result and not asc then
22987: LD_VAR 0 6
22991: PUSH
22992: LD_VAR 0 4
22996: NOT
22997: AND
22998: IFFALSE 23073
// begin tmp := result ;
23000: LD_ADDR_VAR 0 9
23004: PUSH
23005: LD_VAR 0 6
23009: ST_TO_ADDR
// for i = tmp downto 1 do
23010: LD_ADDR_VAR 0 7
23014: PUSH
23015: DOUBLE
23016: LD_VAR 0 9
23020: INC
23021: ST_TO_ADDR
23022: LD_INT 1
23024: PUSH
23025: FOR_DOWNTO
23026: IFFALSE 23071
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23028: LD_ADDR_VAR 0 6
23032: PUSH
23033: LD_VAR 0 6
23037: PPUSH
23038: LD_VAR 0 9
23042: PUSH
23043: LD_VAR 0 7
23047: MINUS
23048: PUSH
23049: LD_INT 1
23051: PLUS
23052: PPUSH
23053: LD_VAR 0 9
23057: PUSH
23058: LD_VAR 0 7
23062: ARRAY
23063: PPUSH
23064: CALL_OW 1
23068: ST_TO_ADDR
23069: GO 23025
23071: POP
23072: POP
// end ; tmp := [ ] ;
23073: LD_ADDR_VAR 0 9
23077: PUSH
23078: EMPTY
23079: ST_TO_ADDR
// if mode then
23080: LD_VAR 0 5
23084: IFFALSE 23153
// begin for i = 1 to result do
23086: LD_ADDR_VAR 0 7
23090: PUSH
23091: DOUBLE
23092: LD_INT 1
23094: DEC
23095: ST_TO_ADDR
23096: LD_VAR 0 6
23100: PUSH
23101: FOR_TO
23102: IFFALSE 23141
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23104: LD_ADDR_VAR 0 9
23108: PUSH
23109: LD_VAR 0 9
23113: PPUSH
23114: LD_VAR 0 7
23118: PPUSH
23119: LD_VAR 0 6
23123: PUSH
23124: LD_VAR 0 7
23128: ARRAY
23129: PUSH
23130: LD_INT 1
23132: ARRAY
23133: PPUSH
23134: CALL_OW 1
23138: ST_TO_ADDR
23139: GO 23101
23141: POP
23142: POP
// result := tmp ;
23143: LD_ADDR_VAR 0 6
23147: PUSH
23148: LD_VAR 0 9
23152: ST_TO_ADDR
// end ; end ;
23153: LD_VAR 0 6
23157: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23158: LD_INT 0
23160: PPUSH
23161: PPUSH
23162: PPUSH
23163: PPUSH
23164: PPUSH
23165: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23166: LD_ADDR_VAR 0 5
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: LD_INT 0
23176: PUSH
23177: LD_INT 0
23179: PUSH
23180: EMPTY
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: ST_TO_ADDR
// if not x or not y then
23188: LD_VAR 0 2
23192: NOT
23193: PUSH
23194: LD_VAR 0 3
23198: NOT
23199: OR
23200: IFFALSE 23204
// exit ;
23202: GO 24854
// if not range then
23204: LD_VAR 0 4
23208: NOT
23209: IFFALSE 23219
// range := 10 ;
23211: LD_ADDR_VAR 0 4
23215: PUSH
23216: LD_INT 10
23218: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23219: LD_ADDR_VAR 0 8
23223: PUSH
23224: LD_INT 81
23226: PUSH
23227: LD_VAR 0 1
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 92
23238: PUSH
23239: LD_VAR 0 2
23243: PUSH
23244: LD_VAR 0 3
23248: PUSH
23249: LD_VAR 0 4
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 3
23262: PUSH
23263: LD_INT 21
23265: PUSH
23266: LD_INT 3
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: PPUSH
23282: CALL_OW 69
23286: ST_TO_ADDR
// if not tmp then
23287: LD_VAR 0 8
23291: NOT
23292: IFFALSE 23296
// exit ;
23294: GO 24854
// for i in tmp do
23296: LD_ADDR_VAR 0 6
23300: PUSH
23301: LD_VAR 0 8
23305: PUSH
23306: FOR_IN
23307: IFFALSE 24829
// begin points := [ 0 , 0 , 0 ] ;
23309: LD_ADDR_VAR 0 9
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: ST_TO_ADDR
// bpoints := 1 ;
23328: LD_ADDR_VAR 0 10
23332: PUSH
23333: LD_INT 1
23335: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23336: LD_VAR 0 6
23340: PPUSH
23341: CALL_OW 247
23345: PUSH
23346: LD_INT 1
23348: DOUBLE
23349: EQUAL
23350: IFTRUE 23354
23352: GO 23932
23354: POP
// begin if GetClass ( i ) = 1 then
23355: LD_VAR 0 6
23359: PPUSH
23360: CALL_OW 257
23364: PUSH
23365: LD_INT 1
23367: EQUAL
23368: IFFALSE 23389
// points := [ 10 , 5 , 3 ] ;
23370: LD_ADDR_VAR 0 9
23374: PUSH
23375: LD_INT 10
23377: PUSH
23378: LD_INT 5
23380: PUSH
23381: LD_INT 3
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: LIST
23388: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23389: LD_VAR 0 6
23393: PPUSH
23394: CALL_OW 257
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 3
23404: PUSH
23405: LD_INT 4
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: IN
23413: IFFALSE 23434
// points := [ 3 , 2 , 1 ] ;
23415: LD_ADDR_VAR 0 9
23419: PUSH
23420: LD_INT 3
23422: PUSH
23423: LD_INT 2
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: LIST
23433: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23434: LD_VAR 0 6
23438: PPUSH
23439: CALL_OW 257
23443: PUSH
23444: LD_INT 5
23446: EQUAL
23447: IFFALSE 23468
// points := [ 130 , 5 , 2 ] ;
23449: LD_ADDR_VAR 0 9
23453: PUSH
23454: LD_INT 130
23456: PUSH
23457: LD_INT 5
23459: PUSH
23460: LD_INT 2
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: LIST
23467: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23468: LD_VAR 0 6
23472: PPUSH
23473: CALL_OW 257
23477: PUSH
23478: LD_INT 8
23480: EQUAL
23481: IFFALSE 23502
// points := [ 35 , 35 , 30 ] ;
23483: LD_ADDR_VAR 0 9
23487: PUSH
23488: LD_INT 35
23490: PUSH
23491: LD_INT 35
23493: PUSH
23494: LD_INT 30
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: LIST
23501: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23502: LD_VAR 0 6
23506: PPUSH
23507: CALL_OW 257
23511: PUSH
23512: LD_INT 9
23514: EQUAL
23515: IFFALSE 23536
// points := [ 20 , 55 , 40 ] ;
23517: LD_ADDR_VAR 0 9
23521: PUSH
23522: LD_INT 20
23524: PUSH
23525: LD_INT 55
23527: PUSH
23528: LD_INT 40
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23536: LD_VAR 0 6
23540: PPUSH
23541: CALL_OW 257
23545: PUSH
23546: LD_INT 12
23548: PUSH
23549: LD_INT 16
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: IN
23556: IFFALSE 23577
// points := [ 5 , 3 , 2 ] ;
23558: LD_ADDR_VAR 0 9
23562: PUSH
23563: LD_INT 5
23565: PUSH
23566: LD_INT 3
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23577: LD_VAR 0 6
23581: PPUSH
23582: CALL_OW 257
23586: PUSH
23587: LD_INT 17
23589: EQUAL
23590: IFFALSE 23611
// points := [ 100 , 50 , 75 ] ;
23592: LD_ADDR_VAR 0 9
23596: PUSH
23597: LD_INT 100
23599: PUSH
23600: LD_INT 50
23602: PUSH
23603: LD_INT 75
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: LIST
23610: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23611: LD_VAR 0 6
23615: PPUSH
23616: CALL_OW 257
23620: PUSH
23621: LD_INT 15
23623: EQUAL
23624: IFFALSE 23645
// points := [ 10 , 5 , 3 ] ;
23626: LD_ADDR_VAR 0 9
23630: PUSH
23631: LD_INT 10
23633: PUSH
23634: LD_INT 5
23636: PUSH
23637: LD_INT 3
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23645: LD_VAR 0 6
23649: PPUSH
23650: CALL_OW 257
23654: PUSH
23655: LD_INT 14
23657: EQUAL
23658: IFFALSE 23679
// points := [ 10 , 0 , 0 ] ;
23660: LD_ADDR_VAR 0 9
23664: PUSH
23665: LD_INT 10
23667: PUSH
23668: LD_INT 0
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23679: LD_VAR 0 6
23683: PPUSH
23684: CALL_OW 257
23688: PUSH
23689: LD_INT 11
23691: EQUAL
23692: IFFALSE 23713
// points := [ 30 , 10 , 5 ] ;
23694: LD_ADDR_VAR 0 9
23698: PUSH
23699: LD_INT 30
23701: PUSH
23702: LD_INT 10
23704: PUSH
23705: LD_INT 5
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: LIST
23712: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_INT 5
23720: PPUSH
23721: CALL_OW 321
23725: PUSH
23726: LD_INT 2
23728: EQUAL
23729: IFFALSE 23746
// bpoints := bpoints * 1.8 ;
23731: LD_ADDR_VAR 0 10
23735: PUSH
23736: LD_VAR 0 10
23740: PUSH
23741: LD_REAL  1.80000000000000E+0000
23744: MUL
23745: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23746: LD_VAR 0 6
23750: PPUSH
23751: CALL_OW 257
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: LD_INT 3
23764: PUSH
23765: LD_INT 4
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: IN
23774: PUSH
23775: LD_VAR 0 1
23779: PPUSH
23780: LD_INT 51
23782: PPUSH
23783: CALL_OW 321
23787: PUSH
23788: LD_INT 2
23790: EQUAL
23791: AND
23792: IFFALSE 23809
// bpoints := bpoints * 1.2 ;
23794: LD_ADDR_VAR 0 10
23798: PUSH
23799: LD_VAR 0 10
23803: PUSH
23804: LD_REAL  1.20000000000000E+0000
23807: MUL
23808: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23809: LD_VAR 0 6
23813: PPUSH
23814: CALL_OW 257
23818: PUSH
23819: LD_INT 5
23821: PUSH
23822: LD_INT 7
23824: PUSH
23825: LD_INT 9
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: IN
23833: PUSH
23834: LD_VAR 0 1
23838: PPUSH
23839: LD_INT 52
23841: PPUSH
23842: CALL_OW 321
23846: PUSH
23847: LD_INT 2
23849: EQUAL
23850: AND
23851: IFFALSE 23868
// bpoints := bpoints * 1.5 ;
23853: LD_ADDR_VAR 0 10
23857: PUSH
23858: LD_VAR 0 10
23862: PUSH
23863: LD_REAL  1.50000000000000E+0000
23866: MUL
23867: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23868: LD_VAR 0 1
23872: PPUSH
23873: LD_INT 66
23875: PPUSH
23876: CALL_OW 321
23880: PUSH
23881: LD_INT 2
23883: EQUAL
23884: IFFALSE 23901
// bpoints := bpoints * 1.1 ;
23886: LD_ADDR_VAR 0 10
23890: PUSH
23891: LD_VAR 0 10
23895: PUSH
23896: LD_REAL  1.10000000000000E+0000
23899: MUL
23900: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23901: LD_ADDR_VAR 0 10
23905: PUSH
23906: LD_VAR 0 10
23910: PUSH
23911: LD_VAR 0 6
23915: PPUSH
23916: LD_INT 1
23918: PPUSH
23919: CALL_OW 259
23923: PUSH
23924: LD_REAL  1.15000000000000E+0000
23927: MUL
23928: MUL
23929: ST_TO_ADDR
// end ; unit_vehicle :
23930: GO 24758
23932: LD_INT 2
23934: DOUBLE
23935: EQUAL
23936: IFTRUE 23940
23938: GO 24746
23940: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23941: LD_VAR 0 6
23945: PPUSH
23946: CALL_OW 264
23950: PUSH
23951: LD_INT 2
23953: PUSH
23954: LD_INT 42
23956: PUSH
23957: LD_INT 24
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: IN
23965: IFFALSE 23986
// points := [ 25 , 5 , 3 ] ;
23967: LD_ADDR_VAR 0 9
23971: PUSH
23972: LD_INT 25
23974: PUSH
23975: LD_INT 5
23977: PUSH
23978: LD_INT 3
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: LIST
23985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23986: LD_VAR 0 6
23990: PPUSH
23991: CALL_OW 264
23995: PUSH
23996: LD_INT 4
23998: PUSH
23999: LD_INT 43
24001: PUSH
24002: LD_INT 25
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: IN
24010: IFFALSE 24031
// points := [ 40 , 15 , 5 ] ;
24012: LD_ADDR_VAR 0 9
24016: PUSH
24017: LD_INT 40
24019: PUSH
24020: LD_INT 15
24022: PUSH
24023: LD_INT 5
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: LIST
24030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24031: LD_VAR 0 6
24035: PPUSH
24036: CALL_OW 264
24040: PUSH
24041: LD_INT 3
24043: PUSH
24044: LD_INT 23
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: IN
24051: IFFALSE 24072
// points := [ 7 , 25 , 8 ] ;
24053: LD_ADDR_VAR 0 9
24057: PUSH
24058: LD_INT 7
24060: PUSH
24061: LD_INT 25
24063: PUSH
24064: LD_INT 8
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24072: LD_VAR 0 6
24076: PPUSH
24077: CALL_OW 264
24081: PUSH
24082: LD_INT 5
24084: PUSH
24085: LD_INT 27
24087: PUSH
24088: LD_INT 44
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: LIST
24095: IN
24096: IFFALSE 24117
// points := [ 14 , 50 , 16 ] ;
24098: LD_ADDR_VAR 0 9
24102: PUSH
24103: LD_INT 14
24105: PUSH
24106: LD_INT 50
24108: PUSH
24109: LD_INT 16
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24117: LD_VAR 0 6
24121: PPUSH
24122: CALL_OW 264
24126: PUSH
24127: LD_INT 6
24129: PUSH
24130: LD_INT 46
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: IN
24137: IFFALSE 24158
// points := [ 32 , 120 , 70 ] ;
24139: LD_ADDR_VAR 0 9
24143: PUSH
24144: LD_INT 32
24146: PUSH
24147: LD_INT 120
24149: PUSH
24150: LD_INT 70
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24158: LD_VAR 0 6
24162: PPUSH
24163: CALL_OW 264
24167: PUSH
24168: LD_INT 7
24170: PUSH
24171: LD_INT 28
24173: PUSH
24174: LD_INT 45
24176: PUSH
24177: LD_INT 92
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: IN
24186: IFFALSE 24207
// points := [ 35 , 20 , 45 ] ;
24188: LD_ADDR_VAR 0 9
24192: PUSH
24193: LD_INT 35
24195: PUSH
24196: LD_INT 20
24198: PUSH
24199: LD_INT 45
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: LIST
24206: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24207: LD_VAR 0 6
24211: PPUSH
24212: CALL_OW 264
24216: PUSH
24217: LD_INT 47
24219: PUSH
24220: EMPTY
24221: LIST
24222: IN
24223: IFFALSE 24244
// points := [ 67 , 45 , 75 ] ;
24225: LD_ADDR_VAR 0 9
24229: PUSH
24230: LD_INT 67
24232: PUSH
24233: LD_INT 45
24235: PUSH
24236: LD_INT 75
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: LIST
24243: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24244: LD_VAR 0 6
24248: PPUSH
24249: CALL_OW 264
24253: PUSH
24254: LD_INT 26
24256: PUSH
24257: EMPTY
24258: LIST
24259: IN
24260: IFFALSE 24281
// points := [ 120 , 30 , 80 ] ;
24262: LD_ADDR_VAR 0 9
24266: PUSH
24267: LD_INT 120
24269: PUSH
24270: LD_INT 30
24272: PUSH
24273: LD_INT 80
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24281: LD_VAR 0 6
24285: PPUSH
24286: CALL_OW 264
24290: PUSH
24291: LD_INT 22
24293: PUSH
24294: EMPTY
24295: LIST
24296: IN
24297: IFFALSE 24318
// points := [ 40 , 1 , 1 ] ;
24299: LD_ADDR_VAR 0 9
24303: PUSH
24304: LD_INT 40
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: LD_INT 1
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24318: LD_VAR 0 6
24322: PPUSH
24323: CALL_OW 264
24327: PUSH
24328: LD_INT 29
24330: PUSH
24331: EMPTY
24332: LIST
24333: IN
24334: IFFALSE 24355
// points := [ 70 , 200 , 400 ] ;
24336: LD_ADDR_VAR 0 9
24340: PUSH
24341: LD_INT 70
24343: PUSH
24344: LD_INT 200
24346: PUSH
24347: LD_INT 400
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: LIST
24354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24355: LD_VAR 0 6
24359: PPUSH
24360: CALL_OW 264
24364: PUSH
24365: LD_INT 14
24367: PUSH
24368: LD_INT 53
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: IN
24375: IFFALSE 24396
// points := [ 40 , 10 , 20 ] ;
24377: LD_ADDR_VAR 0 9
24381: PUSH
24382: LD_INT 40
24384: PUSH
24385: LD_INT 10
24387: PUSH
24388: LD_INT 20
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24396: LD_VAR 0 6
24400: PPUSH
24401: CALL_OW 264
24405: PUSH
24406: LD_INT 9
24408: PUSH
24409: EMPTY
24410: LIST
24411: IN
24412: IFFALSE 24433
// points := [ 5 , 70 , 20 ] ;
24414: LD_ADDR_VAR 0 9
24418: PUSH
24419: LD_INT 5
24421: PUSH
24422: LD_INT 70
24424: PUSH
24425: LD_INT 20
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: LIST
24432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24433: LD_VAR 0 6
24437: PPUSH
24438: CALL_OW 264
24442: PUSH
24443: LD_INT 10
24445: PUSH
24446: EMPTY
24447: LIST
24448: IN
24449: IFFALSE 24470
// points := [ 35 , 110 , 70 ] ;
24451: LD_ADDR_VAR 0 9
24455: PUSH
24456: LD_INT 35
24458: PUSH
24459: LD_INT 110
24461: PUSH
24462: LD_INT 70
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: LIST
24469: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24470: LD_VAR 0 6
24474: PPUSH
24475: CALL_OW 265
24479: PUSH
24480: LD_INT 25
24482: EQUAL
24483: IFFALSE 24504
// points := [ 80 , 65 , 100 ] ;
24485: LD_ADDR_VAR 0 9
24489: PUSH
24490: LD_INT 80
24492: PUSH
24493: LD_INT 65
24495: PUSH
24496: LD_INT 100
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: LIST
24503: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24504: LD_VAR 0 6
24508: PPUSH
24509: CALL_OW 263
24513: PUSH
24514: LD_INT 1
24516: EQUAL
24517: IFFALSE 24552
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24519: LD_ADDR_VAR 0 10
24523: PUSH
24524: LD_VAR 0 10
24528: PUSH
24529: LD_VAR 0 6
24533: PPUSH
24534: CALL_OW 311
24538: PPUSH
24539: LD_INT 3
24541: PPUSH
24542: CALL_OW 259
24546: PUSH
24547: LD_INT 4
24549: MUL
24550: MUL
24551: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24552: LD_VAR 0 6
24556: PPUSH
24557: CALL_OW 263
24561: PUSH
24562: LD_INT 2
24564: EQUAL
24565: IFFALSE 24616
// begin j := IsControledBy ( i ) ;
24567: LD_ADDR_VAR 0 7
24571: PUSH
24572: LD_VAR 0 6
24576: PPUSH
24577: CALL_OW 312
24581: ST_TO_ADDR
// if j then
24582: LD_VAR 0 7
24586: IFFALSE 24616
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24588: LD_ADDR_VAR 0 10
24592: PUSH
24593: LD_VAR 0 10
24597: PUSH
24598: LD_VAR 0 7
24602: PPUSH
24603: LD_INT 3
24605: PPUSH
24606: CALL_OW 259
24610: PUSH
24611: LD_INT 3
24613: MUL
24614: MUL
24615: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24616: LD_VAR 0 6
24620: PPUSH
24621: CALL_OW 264
24625: PUSH
24626: LD_INT 5
24628: PUSH
24629: LD_INT 6
24631: PUSH
24632: LD_INT 46
24634: PUSH
24635: LD_INT 44
24637: PUSH
24638: LD_INT 47
24640: PUSH
24641: LD_INT 45
24643: PUSH
24644: LD_INT 28
24646: PUSH
24647: LD_INT 7
24649: PUSH
24650: LD_INT 27
24652: PUSH
24653: LD_INT 29
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: IN
24668: PUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: LD_INT 52
24676: PPUSH
24677: CALL_OW 321
24681: PUSH
24682: LD_INT 2
24684: EQUAL
24685: AND
24686: IFFALSE 24703
// bpoints := bpoints * 1.2 ;
24688: LD_ADDR_VAR 0 10
24692: PUSH
24693: LD_VAR 0 10
24697: PUSH
24698: LD_REAL  1.20000000000000E+0000
24701: MUL
24702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24703: LD_VAR 0 6
24707: PPUSH
24708: CALL_OW 264
24712: PUSH
24713: LD_INT 6
24715: PUSH
24716: LD_INT 46
24718: PUSH
24719: LD_INT 47
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: LIST
24726: IN
24727: IFFALSE 24744
// bpoints := bpoints * 1.2 ;
24729: LD_ADDR_VAR 0 10
24733: PUSH
24734: LD_VAR 0 10
24738: PUSH
24739: LD_REAL  1.20000000000000E+0000
24742: MUL
24743: ST_TO_ADDR
// end ; unit_building :
24744: GO 24758
24746: LD_INT 3
24748: DOUBLE
24749: EQUAL
24750: IFTRUE 24754
24752: GO 24757
24754: POP
// ; end ;
24755: GO 24758
24757: POP
// for j = 1 to 3 do
24758: LD_ADDR_VAR 0 7
24762: PUSH
24763: DOUBLE
24764: LD_INT 1
24766: DEC
24767: ST_TO_ADDR
24768: LD_INT 3
24770: PUSH
24771: FOR_TO
24772: IFFALSE 24825
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24774: LD_ADDR_VAR 0 5
24778: PUSH
24779: LD_VAR 0 5
24783: PPUSH
24784: LD_VAR 0 7
24788: PPUSH
24789: LD_VAR 0 5
24793: PUSH
24794: LD_VAR 0 7
24798: ARRAY
24799: PUSH
24800: LD_VAR 0 9
24804: PUSH
24805: LD_VAR 0 7
24809: ARRAY
24810: PUSH
24811: LD_VAR 0 10
24815: MUL
24816: PLUS
24817: PPUSH
24818: CALL_OW 1
24822: ST_TO_ADDR
24823: GO 24771
24825: POP
24826: POP
// end ;
24827: GO 23306
24829: POP
24830: POP
// result := Replace ( result , 4 , tmp ) ;
24831: LD_ADDR_VAR 0 5
24835: PUSH
24836: LD_VAR 0 5
24840: PPUSH
24841: LD_INT 4
24843: PPUSH
24844: LD_VAR 0 8
24848: PPUSH
24849: CALL_OW 1
24853: ST_TO_ADDR
// end ;
24854: LD_VAR 0 5
24858: RET
// export function DangerAtRange ( unit , range ) ; begin
24859: LD_INT 0
24861: PPUSH
// if not unit then
24862: LD_VAR 0 1
24866: NOT
24867: IFFALSE 24871
// exit ;
24869: GO 24916
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24871: LD_ADDR_VAR 0 3
24875: PUSH
24876: LD_VAR 0 1
24880: PPUSH
24881: CALL_OW 255
24885: PPUSH
24886: LD_VAR 0 1
24890: PPUSH
24891: CALL_OW 250
24895: PPUSH
24896: LD_VAR 0 1
24900: PPUSH
24901: CALL_OW 251
24905: PPUSH
24906: LD_VAR 0 2
24910: PPUSH
24911: CALL 23158 0 4
24915: ST_TO_ADDR
// end ;
24916: LD_VAR 0 3
24920: RET
// export function DangerInArea ( side , area ) ; begin
24921: LD_INT 0
24923: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24924: LD_ADDR_VAR 0 3
24928: PUSH
24929: LD_VAR 0 2
24933: PPUSH
24934: LD_INT 81
24936: PUSH
24937: LD_VAR 0 1
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PPUSH
24946: CALL_OW 70
24950: ST_TO_ADDR
// end ;
24951: LD_VAR 0 3
24955: RET
// export function IsExtension ( b ) ; begin
24956: LD_INT 0
24958: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24959: LD_ADDR_VAR 0 2
24963: PUSH
24964: LD_VAR 0 1
24968: PUSH
24969: LD_INT 23
24971: PUSH
24972: LD_INT 20
24974: PUSH
24975: LD_INT 22
24977: PUSH
24978: LD_INT 17
24980: PUSH
24981: LD_INT 24
24983: PUSH
24984: LD_INT 21
24986: PUSH
24987: LD_INT 19
24989: PUSH
24990: LD_INT 16
24992: PUSH
24993: LD_INT 25
24995: PUSH
24996: LD_INT 18
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: IN
25011: ST_TO_ADDR
// end ;
25012: LD_VAR 0 2
25016: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25017: LD_INT 0
25019: PPUSH
25020: PPUSH
25021: PPUSH
// result := [ ] ;
25022: LD_ADDR_VAR 0 4
25026: PUSH
25027: EMPTY
25028: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25029: LD_ADDR_VAR 0 5
25033: PUSH
25034: LD_VAR 0 2
25038: PPUSH
25039: LD_INT 21
25041: PUSH
25042: LD_INT 3
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PPUSH
25049: CALL_OW 70
25053: ST_TO_ADDR
// if not tmp then
25054: LD_VAR 0 5
25058: NOT
25059: IFFALSE 25063
// exit ;
25061: GO 25127
// if checkLink then
25063: LD_VAR 0 3
25067: IFFALSE 25117
// begin for i in tmp do
25069: LD_ADDR_VAR 0 6
25073: PUSH
25074: LD_VAR 0 5
25078: PUSH
25079: FOR_IN
25080: IFFALSE 25115
// if GetBase ( i ) <> base then
25082: LD_VAR 0 6
25086: PPUSH
25087: CALL_OW 274
25091: PUSH
25092: LD_VAR 0 1
25096: NONEQUAL
25097: IFFALSE 25113
// ComLinkToBase ( base , i ) ;
25099: LD_VAR 0 1
25103: PPUSH
25104: LD_VAR 0 6
25108: PPUSH
25109: CALL_OW 169
25113: GO 25079
25115: POP
25116: POP
// end ; result := tmp ;
25117: LD_ADDR_VAR 0 4
25121: PUSH
25122: LD_VAR 0 5
25126: ST_TO_ADDR
// end ;
25127: LD_VAR 0 4
25131: RET
// export function ComComplete ( units , b ) ; var i ; begin
25132: LD_INT 0
25134: PPUSH
25135: PPUSH
// if not units then
25136: LD_VAR 0 1
25140: NOT
25141: IFFALSE 25145
// exit ;
25143: GO 25235
// for i in units do
25145: LD_ADDR_VAR 0 4
25149: PUSH
25150: LD_VAR 0 1
25154: PUSH
25155: FOR_IN
25156: IFFALSE 25233
// if BuildingStatus ( b ) = bs_build then
25158: LD_VAR 0 2
25162: PPUSH
25163: CALL_OW 461
25167: PUSH
25168: LD_INT 1
25170: EQUAL
25171: IFFALSE 25231
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25173: LD_VAR 0 4
25177: PPUSH
25178: LD_STRING h
25180: PUSH
25181: LD_VAR 0 2
25185: PPUSH
25186: CALL_OW 250
25190: PUSH
25191: LD_VAR 0 2
25195: PPUSH
25196: CALL_OW 251
25200: PUSH
25201: LD_VAR 0 2
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: PUSH
25224: EMPTY
25225: LIST
25226: PPUSH
25227: CALL_OW 446
25231: GO 25155
25233: POP
25234: POP
// end ;
25235: LD_VAR 0 3
25239: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25240: LD_INT 0
25242: PPUSH
25243: PPUSH
25244: PPUSH
25245: PPUSH
25246: PPUSH
25247: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25248: LD_VAR 0 1
25252: NOT
25253: PUSH
25254: LD_VAR 0 1
25258: PPUSH
25259: CALL_OW 263
25263: PUSH
25264: LD_INT 2
25266: NONEQUAL
25267: OR
25268: IFFALSE 25272
// exit ;
25270: GO 25588
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25272: LD_ADDR_VAR 0 6
25276: PUSH
25277: LD_INT 22
25279: PUSH
25280: LD_VAR 0 1
25284: PPUSH
25285: CALL_OW 255
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 2
25296: PUSH
25297: LD_INT 30
25299: PUSH
25300: LD_INT 36
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 34
25309: PUSH
25310: LD_INT 31
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PPUSH
25326: CALL_OW 69
25330: ST_TO_ADDR
// if not tmp then
25331: LD_VAR 0 6
25335: NOT
25336: IFFALSE 25340
// exit ;
25338: GO 25588
// result := [ ] ;
25340: LD_ADDR_VAR 0 2
25344: PUSH
25345: EMPTY
25346: ST_TO_ADDR
// for i in tmp do
25347: LD_ADDR_VAR 0 3
25351: PUSH
25352: LD_VAR 0 6
25356: PUSH
25357: FOR_IN
25358: IFFALSE 25429
// begin t := UnitsInside ( i ) ;
25360: LD_ADDR_VAR 0 4
25364: PUSH
25365: LD_VAR 0 3
25369: PPUSH
25370: CALL_OW 313
25374: ST_TO_ADDR
// if t then
25375: LD_VAR 0 4
25379: IFFALSE 25427
// for j in t do
25381: LD_ADDR_VAR 0 7
25385: PUSH
25386: LD_VAR 0 4
25390: PUSH
25391: FOR_IN
25392: IFFALSE 25425
// result := Replace ( result , result + 1 , j ) ;
25394: LD_ADDR_VAR 0 2
25398: PUSH
25399: LD_VAR 0 2
25403: PPUSH
25404: LD_VAR 0 2
25408: PUSH
25409: LD_INT 1
25411: PLUS
25412: PPUSH
25413: LD_VAR 0 7
25417: PPUSH
25418: CALL_OW 1
25422: ST_TO_ADDR
25423: GO 25391
25425: POP
25426: POP
// end ;
25427: GO 25357
25429: POP
25430: POP
// if not result then
25431: LD_VAR 0 2
25435: NOT
25436: IFFALSE 25440
// exit ;
25438: GO 25588
// mech := result [ 1 ] ;
25440: LD_ADDR_VAR 0 5
25444: PUSH
25445: LD_VAR 0 2
25449: PUSH
25450: LD_INT 1
25452: ARRAY
25453: ST_TO_ADDR
// if result > 1 then
25454: LD_VAR 0 2
25458: PUSH
25459: LD_INT 1
25461: GREATER
25462: IFFALSE 25574
// begin for i = 2 to result do
25464: LD_ADDR_VAR 0 3
25468: PUSH
25469: DOUBLE
25470: LD_INT 2
25472: DEC
25473: ST_TO_ADDR
25474: LD_VAR 0 2
25478: PUSH
25479: FOR_TO
25480: IFFALSE 25572
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25482: LD_ADDR_VAR 0 4
25486: PUSH
25487: LD_VAR 0 2
25491: PUSH
25492: LD_VAR 0 3
25496: ARRAY
25497: PPUSH
25498: LD_INT 3
25500: PPUSH
25501: CALL_OW 259
25505: PUSH
25506: LD_VAR 0 2
25510: PUSH
25511: LD_VAR 0 3
25515: ARRAY
25516: PPUSH
25517: CALL_OW 432
25521: MINUS
25522: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25523: LD_VAR 0 4
25527: PUSH
25528: LD_VAR 0 5
25532: PPUSH
25533: LD_INT 3
25535: PPUSH
25536: CALL_OW 259
25540: PUSH
25541: LD_VAR 0 5
25545: PPUSH
25546: CALL_OW 432
25550: MINUS
25551: GREATEREQUAL
25552: IFFALSE 25570
// mech := result [ i ] ;
25554: LD_ADDR_VAR 0 5
25558: PUSH
25559: LD_VAR 0 2
25563: PUSH
25564: LD_VAR 0 3
25568: ARRAY
25569: ST_TO_ADDR
// end ;
25570: GO 25479
25572: POP
25573: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25574: LD_VAR 0 1
25578: PPUSH
25579: LD_VAR 0 5
25583: PPUSH
25584: CALL_OW 135
// end ;
25588: LD_VAR 0 2
25592: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25593: LD_INT 0
25595: PPUSH
25596: PPUSH
25597: PPUSH
25598: PPUSH
25599: PPUSH
25600: PPUSH
25601: PPUSH
25602: PPUSH
25603: PPUSH
25604: PPUSH
25605: PPUSH
25606: PPUSH
25607: PPUSH
// result := [ ] ;
25608: LD_ADDR_VAR 0 7
25612: PUSH
25613: EMPTY
25614: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25615: LD_VAR 0 1
25619: PPUSH
25620: CALL_OW 266
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: IN
25635: NOT
25636: IFFALSE 25640
// exit ;
25638: GO 27274
// if name then
25640: LD_VAR 0 3
25644: IFFALSE 25660
// SetBName ( base_dep , name ) ;
25646: LD_VAR 0 1
25650: PPUSH
25651: LD_VAR 0 3
25655: PPUSH
25656: CALL_OW 500
// base := GetBase ( base_dep ) ;
25660: LD_ADDR_VAR 0 15
25664: PUSH
25665: LD_VAR 0 1
25669: PPUSH
25670: CALL_OW 274
25674: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25675: LD_ADDR_VAR 0 16
25679: PUSH
25680: LD_VAR 0 1
25684: PPUSH
25685: CALL_OW 255
25689: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25690: LD_ADDR_VAR 0 17
25694: PUSH
25695: LD_VAR 0 1
25699: PPUSH
25700: CALL_OW 248
25704: ST_TO_ADDR
// if sources then
25705: LD_VAR 0 5
25709: IFFALSE 25756
// for i = 1 to 3 do
25711: LD_ADDR_VAR 0 8
25715: PUSH
25716: DOUBLE
25717: LD_INT 1
25719: DEC
25720: ST_TO_ADDR
25721: LD_INT 3
25723: PUSH
25724: FOR_TO
25725: IFFALSE 25754
// AddResourceType ( base , i , sources [ i ] ) ;
25727: LD_VAR 0 15
25731: PPUSH
25732: LD_VAR 0 8
25736: PPUSH
25737: LD_VAR 0 5
25741: PUSH
25742: LD_VAR 0 8
25746: ARRAY
25747: PPUSH
25748: CALL_OW 276
25752: GO 25724
25754: POP
25755: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25756: LD_ADDR_VAR 0 18
25760: PUSH
25761: LD_VAR 0 15
25765: PPUSH
25766: LD_VAR 0 2
25770: PPUSH
25771: LD_INT 1
25773: PPUSH
25774: CALL 25017 0 3
25778: ST_TO_ADDR
// InitHc ;
25779: CALL_OW 19
// InitUc ;
25783: CALL_OW 18
// uc_side := side ;
25787: LD_ADDR_OWVAR 20
25791: PUSH
25792: LD_VAR 0 16
25796: ST_TO_ADDR
// uc_nation := nation ;
25797: LD_ADDR_OWVAR 21
25801: PUSH
25802: LD_VAR 0 17
25806: ST_TO_ADDR
// if buildings then
25807: LD_VAR 0 18
25811: IFFALSE 27133
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25813: LD_ADDR_VAR 0 19
25817: PUSH
25818: LD_VAR 0 18
25822: PPUSH
25823: LD_INT 2
25825: PUSH
25826: LD_INT 30
25828: PUSH
25829: LD_INT 29
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 30
25838: PUSH
25839: LD_INT 30
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: PPUSH
25851: CALL_OW 72
25855: ST_TO_ADDR
// if tmp then
25856: LD_VAR 0 19
25860: IFFALSE 25908
// for i in tmp do
25862: LD_ADDR_VAR 0 8
25866: PUSH
25867: LD_VAR 0 19
25871: PUSH
25872: FOR_IN
25873: IFFALSE 25906
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25875: LD_VAR 0 8
25879: PPUSH
25880: CALL_OW 250
25884: PPUSH
25885: LD_VAR 0 8
25889: PPUSH
25890: CALL_OW 251
25894: PPUSH
25895: LD_VAR 0 16
25899: PPUSH
25900: CALL_OW 441
25904: GO 25872
25906: POP
25907: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25908: LD_VAR 0 18
25912: PPUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 30
25918: PUSH
25919: LD_INT 32
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 30
25928: PUSH
25929: LD_INT 33
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: PPUSH
25941: CALL_OW 72
25945: IFFALSE 26033
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25947: LD_ADDR_VAR 0 8
25951: PUSH
25952: LD_VAR 0 18
25956: PPUSH
25957: LD_INT 2
25959: PUSH
25960: LD_INT 30
25962: PUSH
25963: LD_INT 32
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 30
25972: PUSH
25973: LD_INT 33
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: LIST
25984: PPUSH
25985: CALL_OW 72
25989: PUSH
25990: FOR_IN
25991: IFFALSE 26031
// begin if not GetBWeapon ( i ) then
25993: LD_VAR 0 8
25997: PPUSH
25998: CALL_OW 269
26002: NOT
26003: IFFALSE 26029
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26005: LD_VAR 0 8
26009: PPUSH
26010: LD_VAR 0 8
26014: PPUSH
26015: LD_VAR 0 2
26019: PPUSH
26020: CALL 27279 0 2
26024: PPUSH
26025: CALL_OW 431
// end ;
26029: GO 25990
26031: POP
26032: POP
// end ; for i = 1 to personel do
26033: LD_ADDR_VAR 0 8
26037: PUSH
26038: DOUBLE
26039: LD_INT 1
26041: DEC
26042: ST_TO_ADDR
26043: LD_VAR 0 6
26047: PUSH
26048: FOR_TO
26049: IFFALSE 27113
// begin if i > 4 then
26051: LD_VAR 0 8
26055: PUSH
26056: LD_INT 4
26058: GREATER
26059: IFFALSE 26063
// break ;
26061: GO 27113
// case i of 1 :
26063: LD_VAR 0 8
26067: PUSH
26068: LD_INT 1
26070: DOUBLE
26071: EQUAL
26072: IFTRUE 26076
26074: GO 26156
26076: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26077: LD_ADDR_VAR 0 12
26081: PUSH
26082: LD_VAR 0 18
26086: PPUSH
26087: LD_INT 22
26089: PUSH
26090: LD_VAR 0 16
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 58
26101: PUSH
26102: EMPTY
26103: LIST
26104: PUSH
26105: LD_INT 2
26107: PUSH
26108: LD_INT 30
26110: PUSH
26111: LD_INT 32
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 30
26120: PUSH
26121: LD_INT 4
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 30
26130: PUSH
26131: LD_INT 5
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: PPUSH
26149: CALL_OW 72
26153: ST_TO_ADDR
26154: GO 26378
26156: LD_INT 2
26158: DOUBLE
26159: EQUAL
26160: IFTRUE 26164
26162: GO 26226
26164: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26165: LD_ADDR_VAR 0 12
26169: PUSH
26170: LD_VAR 0 18
26174: PPUSH
26175: LD_INT 22
26177: PUSH
26178: LD_VAR 0 16
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: PUSH
26190: LD_INT 30
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 30
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PPUSH
26219: CALL_OW 72
26223: ST_TO_ADDR
26224: GO 26378
26226: LD_INT 3
26228: DOUBLE
26229: EQUAL
26230: IFTRUE 26234
26232: GO 26296
26234: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26235: LD_ADDR_VAR 0 12
26239: PUSH
26240: LD_VAR 0 18
26244: PPUSH
26245: LD_INT 22
26247: PUSH
26248: LD_VAR 0 16
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: LD_INT 30
26262: PUSH
26263: LD_INT 2
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 30
26272: PUSH
26273: LD_INT 3
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PPUSH
26289: CALL_OW 72
26293: ST_TO_ADDR
26294: GO 26378
26296: LD_INT 4
26298: DOUBLE
26299: EQUAL
26300: IFTRUE 26304
26302: GO 26377
26304: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26305: LD_ADDR_VAR 0 12
26309: PUSH
26310: LD_VAR 0 18
26314: PPUSH
26315: LD_INT 22
26317: PUSH
26318: LD_VAR 0 16
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 2
26329: PUSH
26330: LD_INT 30
26332: PUSH
26333: LD_INT 6
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 30
26342: PUSH
26343: LD_INT 7
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 30
26352: PUSH
26353: LD_INT 8
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PPUSH
26370: CALL_OW 72
26374: ST_TO_ADDR
26375: GO 26378
26377: POP
// if i = 1 then
26378: LD_VAR 0 8
26382: PUSH
26383: LD_INT 1
26385: EQUAL
26386: IFFALSE 26497
// begin tmp := [ ] ;
26388: LD_ADDR_VAR 0 19
26392: PUSH
26393: EMPTY
26394: ST_TO_ADDR
// for j in f do
26395: LD_ADDR_VAR 0 9
26399: PUSH
26400: LD_VAR 0 12
26404: PUSH
26405: FOR_IN
26406: IFFALSE 26479
// if GetBType ( j ) = b_bunker then
26408: LD_VAR 0 9
26412: PPUSH
26413: CALL_OW 266
26417: PUSH
26418: LD_INT 32
26420: EQUAL
26421: IFFALSE 26448
// tmp := Insert ( tmp , 1 , j ) else
26423: LD_ADDR_VAR 0 19
26427: PUSH
26428: LD_VAR 0 19
26432: PPUSH
26433: LD_INT 1
26435: PPUSH
26436: LD_VAR 0 9
26440: PPUSH
26441: CALL_OW 2
26445: ST_TO_ADDR
26446: GO 26477
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26448: LD_ADDR_VAR 0 19
26452: PUSH
26453: LD_VAR 0 19
26457: PPUSH
26458: LD_VAR 0 19
26462: PUSH
26463: LD_INT 1
26465: PLUS
26466: PPUSH
26467: LD_VAR 0 9
26471: PPUSH
26472: CALL_OW 2
26476: ST_TO_ADDR
26477: GO 26405
26479: POP
26480: POP
// if tmp then
26481: LD_VAR 0 19
26485: IFFALSE 26497
// f := tmp ;
26487: LD_ADDR_VAR 0 12
26491: PUSH
26492: LD_VAR 0 19
26496: ST_TO_ADDR
// end ; x := personel [ i ] ;
26497: LD_ADDR_VAR 0 13
26501: PUSH
26502: LD_VAR 0 6
26506: PUSH
26507: LD_VAR 0 8
26511: ARRAY
26512: ST_TO_ADDR
// if x = - 1 then
26513: LD_VAR 0 13
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: EQUAL
26522: IFFALSE 26731
// begin for j in f do
26524: LD_ADDR_VAR 0 9
26528: PUSH
26529: LD_VAR 0 12
26533: PUSH
26534: FOR_IN
26535: IFFALSE 26727
// repeat InitHc ;
26537: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26541: LD_VAR 0 9
26545: PPUSH
26546: CALL_OW 266
26550: PUSH
26551: LD_INT 5
26553: EQUAL
26554: IFFALSE 26624
// begin if UnitsInside ( j ) < 3 then
26556: LD_VAR 0 9
26560: PPUSH
26561: CALL_OW 313
26565: PUSH
26566: LD_INT 3
26568: LESS
26569: IFFALSE 26605
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26571: LD_INT 0
26573: PPUSH
26574: LD_INT 5
26576: PUSH
26577: LD_INT 8
26579: PUSH
26580: LD_INT 9
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: PUSH
26588: LD_VAR 0 17
26592: ARRAY
26593: PPUSH
26594: LD_VAR 0 4
26598: PPUSH
26599: CALL_OW 380
26603: GO 26622
// PrepareHuman ( false , i , skill ) ;
26605: LD_INT 0
26607: PPUSH
26608: LD_VAR 0 8
26612: PPUSH
26613: LD_VAR 0 4
26617: PPUSH
26618: CALL_OW 380
// end else
26622: GO 26641
// PrepareHuman ( false , i , skill ) ;
26624: LD_INT 0
26626: PPUSH
26627: LD_VAR 0 8
26631: PPUSH
26632: LD_VAR 0 4
26636: PPUSH
26637: CALL_OW 380
// un := CreateHuman ;
26641: LD_ADDR_VAR 0 14
26645: PUSH
26646: CALL_OW 44
26650: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26651: LD_ADDR_VAR 0 7
26655: PUSH
26656: LD_VAR 0 7
26660: PPUSH
26661: LD_INT 1
26663: PPUSH
26664: LD_VAR 0 14
26668: PPUSH
26669: CALL_OW 2
26673: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26674: LD_VAR 0 14
26678: PPUSH
26679: LD_VAR 0 9
26683: PPUSH
26684: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26688: LD_VAR 0 9
26692: PPUSH
26693: CALL_OW 313
26697: PUSH
26698: LD_INT 6
26700: EQUAL
26701: PUSH
26702: LD_VAR 0 9
26706: PPUSH
26707: CALL_OW 266
26711: PUSH
26712: LD_INT 32
26714: PUSH
26715: LD_INT 31
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: IN
26722: OR
26723: IFFALSE 26537
26725: GO 26534
26727: POP
26728: POP
// end else
26729: GO 27111
// for j = 1 to x do
26731: LD_ADDR_VAR 0 9
26735: PUSH
26736: DOUBLE
26737: LD_INT 1
26739: DEC
26740: ST_TO_ADDR
26741: LD_VAR 0 13
26745: PUSH
26746: FOR_TO
26747: IFFALSE 27109
// begin InitHc ;
26749: CALL_OW 19
// if not f then
26753: LD_VAR 0 12
26757: NOT
26758: IFFALSE 26847
// begin PrepareHuman ( false , i , skill ) ;
26760: LD_INT 0
26762: PPUSH
26763: LD_VAR 0 8
26767: PPUSH
26768: LD_VAR 0 4
26772: PPUSH
26773: CALL_OW 380
// un := CreateHuman ;
26777: LD_ADDR_VAR 0 14
26781: PUSH
26782: CALL_OW 44
26786: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26787: LD_ADDR_VAR 0 7
26791: PUSH
26792: LD_VAR 0 7
26796: PPUSH
26797: LD_INT 1
26799: PPUSH
26800: LD_VAR 0 14
26804: PPUSH
26805: CALL_OW 2
26809: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26810: LD_VAR 0 14
26814: PPUSH
26815: LD_VAR 0 1
26819: PPUSH
26820: CALL_OW 250
26824: PPUSH
26825: LD_VAR 0 1
26829: PPUSH
26830: CALL_OW 251
26834: PPUSH
26835: LD_INT 10
26837: PPUSH
26838: LD_INT 0
26840: PPUSH
26841: CALL_OW 50
// continue ;
26845: GO 26746
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26847: LD_VAR 0 12
26851: PUSH
26852: LD_INT 1
26854: ARRAY
26855: PPUSH
26856: CALL_OW 313
26860: PUSH
26861: LD_VAR 0 12
26865: PUSH
26866: LD_INT 1
26868: ARRAY
26869: PPUSH
26870: CALL_OW 266
26874: PUSH
26875: LD_INT 32
26877: PUSH
26878: LD_INT 31
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: IN
26885: AND
26886: PUSH
26887: LD_VAR 0 12
26891: PUSH
26892: LD_INT 1
26894: ARRAY
26895: PPUSH
26896: CALL_OW 313
26900: PUSH
26901: LD_INT 6
26903: EQUAL
26904: OR
26905: IFFALSE 26925
// f := Delete ( f , 1 ) ;
26907: LD_ADDR_VAR 0 12
26911: PUSH
26912: LD_VAR 0 12
26916: PPUSH
26917: LD_INT 1
26919: PPUSH
26920: CALL_OW 3
26924: ST_TO_ADDR
// if not f then
26925: LD_VAR 0 12
26929: NOT
26930: IFFALSE 26948
// begin x := x + 2 ;
26932: LD_ADDR_VAR 0 13
26936: PUSH
26937: LD_VAR 0 13
26941: PUSH
26942: LD_INT 2
26944: PLUS
26945: ST_TO_ADDR
// continue ;
26946: GO 26746
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26948: LD_VAR 0 12
26952: PUSH
26953: LD_INT 1
26955: ARRAY
26956: PPUSH
26957: CALL_OW 266
26961: PUSH
26962: LD_INT 5
26964: EQUAL
26965: IFFALSE 27039
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26967: LD_VAR 0 12
26971: PUSH
26972: LD_INT 1
26974: ARRAY
26975: PPUSH
26976: CALL_OW 313
26980: PUSH
26981: LD_INT 3
26983: LESS
26984: IFFALSE 27020
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26986: LD_INT 0
26988: PPUSH
26989: LD_INT 5
26991: PUSH
26992: LD_INT 8
26994: PUSH
26995: LD_INT 9
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: LIST
27002: PUSH
27003: LD_VAR 0 17
27007: ARRAY
27008: PPUSH
27009: LD_VAR 0 4
27013: PPUSH
27014: CALL_OW 380
27018: GO 27037
// PrepareHuman ( false , i , skill ) ;
27020: LD_INT 0
27022: PPUSH
27023: LD_VAR 0 8
27027: PPUSH
27028: LD_VAR 0 4
27032: PPUSH
27033: CALL_OW 380
// end else
27037: GO 27056
// PrepareHuman ( false , i , skill ) ;
27039: LD_INT 0
27041: PPUSH
27042: LD_VAR 0 8
27046: PPUSH
27047: LD_VAR 0 4
27051: PPUSH
27052: CALL_OW 380
// un := CreateHuman ;
27056: LD_ADDR_VAR 0 14
27060: PUSH
27061: CALL_OW 44
27065: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27066: LD_ADDR_VAR 0 7
27070: PUSH
27071: LD_VAR 0 7
27075: PPUSH
27076: LD_INT 1
27078: PPUSH
27079: LD_VAR 0 14
27083: PPUSH
27084: CALL_OW 2
27088: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27089: LD_VAR 0 14
27093: PPUSH
27094: LD_VAR 0 12
27098: PUSH
27099: LD_INT 1
27101: ARRAY
27102: PPUSH
27103: CALL_OW 52
// end ;
27107: GO 26746
27109: POP
27110: POP
// end ;
27111: GO 26048
27113: POP
27114: POP
// result := result ^ buildings ;
27115: LD_ADDR_VAR 0 7
27119: PUSH
27120: LD_VAR 0 7
27124: PUSH
27125: LD_VAR 0 18
27129: ADD
27130: ST_TO_ADDR
// end else
27131: GO 27274
// begin for i = 1 to personel do
27133: LD_ADDR_VAR 0 8
27137: PUSH
27138: DOUBLE
27139: LD_INT 1
27141: DEC
27142: ST_TO_ADDR
27143: LD_VAR 0 6
27147: PUSH
27148: FOR_TO
27149: IFFALSE 27272
// begin if i > 4 then
27151: LD_VAR 0 8
27155: PUSH
27156: LD_INT 4
27158: GREATER
27159: IFFALSE 27163
// break ;
27161: GO 27272
// x := personel [ i ] ;
27163: LD_ADDR_VAR 0 13
27167: PUSH
27168: LD_VAR 0 6
27172: PUSH
27173: LD_VAR 0 8
27177: ARRAY
27178: ST_TO_ADDR
// if x = - 1 then
27179: LD_VAR 0 13
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: EQUAL
27188: IFFALSE 27192
// continue ;
27190: GO 27148
// PrepareHuman ( false , i , skill ) ;
27192: LD_INT 0
27194: PPUSH
27195: LD_VAR 0 8
27199: PPUSH
27200: LD_VAR 0 4
27204: PPUSH
27205: CALL_OW 380
// un := CreateHuman ;
27209: LD_ADDR_VAR 0 14
27213: PUSH
27214: CALL_OW 44
27218: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27219: LD_VAR 0 14
27223: PPUSH
27224: LD_VAR 0 1
27228: PPUSH
27229: CALL_OW 250
27233: PPUSH
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL_OW 251
27243: PPUSH
27244: LD_INT 10
27246: PPUSH
27247: LD_INT 0
27249: PPUSH
27250: CALL_OW 50
// result := result ^ un ;
27254: LD_ADDR_VAR 0 7
27258: PUSH
27259: LD_VAR 0 7
27263: PUSH
27264: LD_VAR 0 14
27268: ADD
27269: ST_TO_ADDR
// end ;
27270: GO 27148
27272: POP
27273: POP
// end ; end ;
27274: LD_VAR 0 7
27278: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27279: LD_INT 0
27281: PPUSH
27282: PPUSH
27283: PPUSH
27284: PPUSH
27285: PPUSH
27286: PPUSH
27287: PPUSH
27288: PPUSH
27289: PPUSH
27290: PPUSH
27291: PPUSH
27292: PPUSH
27293: PPUSH
27294: PPUSH
27295: PPUSH
27296: PPUSH
// result := false ;
27297: LD_ADDR_VAR 0 3
27301: PUSH
27302: LD_INT 0
27304: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27305: LD_VAR 0 1
27309: NOT
27310: PUSH
27311: LD_VAR 0 1
27315: PPUSH
27316: CALL_OW 266
27320: PUSH
27321: LD_INT 32
27323: PUSH
27324: LD_INT 33
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: IN
27331: NOT
27332: OR
27333: IFFALSE 27337
// exit ;
27335: GO 28446
// nat := GetNation ( tower ) ;
27337: LD_ADDR_VAR 0 12
27341: PUSH
27342: LD_VAR 0 1
27346: PPUSH
27347: CALL_OW 248
27351: ST_TO_ADDR
// side := GetSide ( tower ) ;
27352: LD_ADDR_VAR 0 16
27356: PUSH
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 255
27366: ST_TO_ADDR
// x := GetX ( tower ) ;
27367: LD_ADDR_VAR 0 10
27371: PUSH
27372: LD_VAR 0 1
27376: PPUSH
27377: CALL_OW 250
27381: ST_TO_ADDR
// y := GetY ( tower ) ;
27382: LD_ADDR_VAR 0 11
27386: PUSH
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 251
27396: ST_TO_ADDR
// if not x or not y then
27397: LD_VAR 0 10
27401: NOT
27402: PUSH
27403: LD_VAR 0 11
27407: NOT
27408: OR
27409: IFFALSE 27413
// exit ;
27411: GO 28446
// weapon := 0 ;
27413: LD_ADDR_VAR 0 18
27417: PUSH
27418: LD_INT 0
27420: ST_TO_ADDR
// fac_list := [ ] ;
27421: LD_ADDR_VAR 0 17
27425: PUSH
27426: EMPTY
27427: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27428: LD_ADDR_VAR 0 6
27432: PUSH
27433: LD_VAR 0 1
27437: PPUSH
27438: CALL_OW 274
27442: PPUSH
27443: LD_VAR 0 2
27447: PPUSH
27448: LD_INT 0
27450: PPUSH
27451: CALL 25017 0 3
27455: PPUSH
27456: LD_INT 30
27458: PUSH
27459: LD_INT 3
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PPUSH
27466: CALL_OW 72
27470: ST_TO_ADDR
// if not factories then
27471: LD_VAR 0 6
27475: NOT
27476: IFFALSE 27480
// exit ;
27478: GO 28446
// for i in factories do
27480: LD_ADDR_VAR 0 8
27484: PUSH
27485: LD_VAR 0 6
27489: PUSH
27490: FOR_IN
27491: IFFALSE 27516
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27493: LD_ADDR_VAR 0 17
27497: PUSH
27498: LD_VAR 0 17
27502: PUSH
27503: LD_VAR 0 8
27507: PPUSH
27508: CALL_OW 478
27512: UNION
27513: ST_TO_ADDR
27514: GO 27490
27516: POP
27517: POP
// if not fac_list then
27518: LD_VAR 0 17
27522: NOT
27523: IFFALSE 27527
// exit ;
27525: GO 28446
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27527: LD_ADDR_VAR 0 5
27531: PUSH
27532: LD_INT 4
27534: PUSH
27535: LD_INT 5
27537: PUSH
27538: LD_INT 9
27540: PUSH
27541: LD_INT 10
27543: PUSH
27544: LD_INT 6
27546: PUSH
27547: LD_INT 7
27549: PUSH
27550: LD_INT 11
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 27
27564: PUSH
27565: LD_INT 28
27567: PUSH
27568: LD_INT 26
27570: PUSH
27571: LD_INT 30
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 43
27582: PUSH
27583: LD_INT 44
27585: PUSH
27586: LD_INT 46
27588: PUSH
27589: LD_INT 45
27591: PUSH
27592: LD_INT 47
27594: PUSH
27595: LD_INT 49
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: LIST
27610: PUSH
27611: LD_VAR 0 12
27615: ARRAY
27616: ST_TO_ADDR
// list := list isect fac_list ;
27617: LD_ADDR_VAR 0 5
27621: PUSH
27622: LD_VAR 0 5
27626: PUSH
27627: LD_VAR 0 17
27631: ISECT
27632: ST_TO_ADDR
// if not list then
27633: LD_VAR 0 5
27637: NOT
27638: IFFALSE 27642
// exit ;
27640: GO 28446
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27642: LD_VAR 0 12
27646: PUSH
27647: LD_INT 3
27649: EQUAL
27650: PUSH
27651: LD_INT 49
27653: PUSH
27654: LD_VAR 0 5
27658: IN
27659: AND
27660: PUSH
27661: LD_INT 31
27663: PPUSH
27664: LD_VAR 0 16
27668: PPUSH
27669: CALL_OW 321
27673: PUSH
27674: LD_INT 2
27676: EQUAL
27677: AND
27678: IFFALSE 27738
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27680: LD_INT 22
27682: PUSH
27683: LD_VAR 0 16
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 35
27694: PUSH
27695: LD_INT 49
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 91
27704: PUSH
27705: LD_VAR 0 1
27709: PUSH
27710: LD_INT 10
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: PPUSH
27723: CALL_OW 69
27727: NOT
27728: IFFALSE 27738
// weapon := ru_time_lapser ;
27730: LD_ADDR_VAR 0 18
27734: PUSH
27735: LD_INT 49
27737: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27738: LD_VAR 0 12
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 2
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: IN
27753: PUSH
27754: LD_INT 11
27756: PUSH
27757: LD_VAR 0 5
27761: IN
27762: PUSH
27763: LD_INT 30
27765: PUSH
27766: LD_VAR 0 5
27770: IN
27771: OR
27772: AND
27773: PUSH
27774: LD_INT 6
27776: PPUSH
27777: LD_VAR 0 16
27781: PPUSH
27782: CALL_OW 321
27786: PUSH
27787: LD_INT 2
27789: EQUAL
27790: AND
27791: IFFALSE 27956
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27793: LD_INT 22
27795: PUSH
27796: LD_VAR 0 16
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 2
27807: PUSH
27808: LD_INT 35
27810: PUSH
27811: LD_INT 11
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 35
27820: PUSH
27821: LD_INT 30
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 91
27835: PUSH
27836: LD_VAR 0 1
27840: PUSH
27841: LD_INT 18
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: LIST
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: LIST
27853: PPUSH
27854: CALL_OW 69
27858: NOT
27859: PUSH
27860: LD_INT 22
27862: PUSH
27863: LD_VAR 0 16
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 2
27874: PUSH
27875: LD_INT 30
27877: PUSH
27878: LD_INT 32
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 30
27887: PUSH
27888: LD_INT 33
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 91
27902: PUSH
27903: LD_VAR 0 1
27907: PUSH
27908: LD_INT 12
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: PPUSH
27924: CALL_OW 69
27928: PUSH
27929: LD_INT 2
27931: GREATER
27932: AND
27933: IFFALSE 27956
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27935: LD_ADDR_VAR 0 18
27939: PUSH
27940: LD_INT 11
27942: PUSH
27943: LD_INT 30
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_VAR 0 12
27954: ARRAY
27955: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27956: LD_VAR 0 18
27960: NOT
27961: PUSH
27962: LD_INT 40
27964: PPUSH
27965: LD_VAR 0 16
27969: PPUSH
27970: CALL_OW 321
27974: PUSH
27975: LD_INT 2
27977: EQUAL
27978: AND
27979: PUSH
27980: LD_INT 7
27982: PUSH
27983: LD_VAR 0 5
27987: IN
27988: PUSH
27989: LD_INT 28
27991: PUSH
27992: LD_VAR 0 5
27996: IN
27997: OR
27998: PUSH
27999: LD_INT 45
28001: PUSH
28002: LD_VAR 0 5
28006: IN
28007: OR
28008: AND
28009: IFFALSE 28263
// begin hex := GetHexInfo ( x , y ) ;
28011: LD_ADDR_VAR 0 4
28015: PUSH
28016: LD_VAR 0 10
28020: PPUSH
28021: LD_VAR 0 11
28025: PPUSH
28026: CALL_OW 546
28030: ST_TO_ADDR
// if hex [ 1 ] then
28031: LD_VAR 0 4
28035: PUSH
28036: LD_INT 1
28038: ARRAY
28039: IFFALSE 28043
// exit ;
28041: GO 28446
// height := hex [ 2 ] ;
28043: LD_ADDR_VAR 0 15
28047: PUSH
28048: LD_VAR 0 4
28052: PUSH
28053: LD_INT 2
28055: ARRAY
28056: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28057: LD_ADDR_VAR 0 14
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: LD_INT 3
28070: PUSH
28071: LD_INT 5
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: ST_TO_ADDR
// for i in tmp do
28080: LD_ADDR_VAR 0 8
28084: PUSH
28085: LD_VAR 0 14
28089: PUSH
28090: FOR_IN
28091: IFFALSE 28261
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28093: LD_ADDR_VAR 0 9
28097: PUSH
28098: LD_VAR 0 10
28102: PPUSH
28103: LD_VAR 0 8
28107: PPUSH
28108: LD_INT 5
28110: PPUSH
28111: CALL_OW 272
28115: PUSH
28116: LD_VAR 0 11
28120: PPUSH
28121: LD_VAR 0 8
28125: PPUSH
28126: LD_INT 5
28128: PPUSH
28129: CALL_OW 273
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28138: LD_VAR 0 9
28142: PUSH
28143: LD_INT 1
28145: ARRAY
28146: PPUSH
28147: LD_VAR 0 9
28151: PUSH
28152: LD_INT 2
28154: ARRAY
28155: PPUSH
28156: CALL_OW 488
28160: IFFALSE 28259
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28162: LD_ADDR_VAR 0 4
28166: PUSH
28167: LD_VAR 0 9
28171: PUSH
28172: LD_INT 1
28174: ARRAY
28175: PPUSH
28176: LD_VAR 0 9
28180: PUSH
28181: LD_INT 2
28183: ARRAY
28184: PPUSH
28185: CALL_OW 546
28189: ST_TO_ADDR
// if hex [ 1 ] then
28190: LD_VAR 0 4
28194: PUSH
28195: LD_INT 1
28197: ARRAY
28198: IFFALSE 28202
// continue ;
28200: GO 28090
// h := hex [ 2 ] ;
28202: LD_ADDR_VAR 0 13
28206: PUSH
28207: LD_VAR 0 4
28211: PUSH
28212: LD_INT 2
28214: ARRAY
28215: ST_TO_ADDR
// if h + 7 < height then
28216: LD_VAR 0 13
28220: PUSH
28221: LD_INT 7
28223: PLUS
28224: PUSH
28225: LD_VAR 0 15
28229: LESS
28230: IFFALSE 28259
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28232: LD_ADDR_VAR 0 18
28236: PUSH
28237: LD_INT 7
28239: PUSH
28240: LD_INT 28
28242: PUSH
28243: LD_INT 45
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: LIST
28250: PUSH
28251: LD_VAR 0 12
28255: ARRAY
28256: ST_TO_ADDR
// break ;
28257: GO 28261
// end ; end ; end ;
28259: GO 28090
28261: POP
28262: POP
// end ; if not weapon then
28263: LD_VAR 0 18
28267: NOT
28268: IFFALSE 28328
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28270: LD_ADDR_VAR 0 5
28274: PUSH
28275: LD_VAR 0 5
28279: PUSH
28280: LD_INT 11
28282: PUSH
28283: LD_INT 30
28285: PUSH
28286: LD_INT 49
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: LIST
28293: DIFF
28294: ST_TO_ADDR
// if not list then
28295: LD_VAR 0 5
28299: NOT
28300: IFFALSE 28304
// exit ;
28302: GO 28446
// weapon := list [ rand ( 1 , list ) ] ;
28304: LD_ADDR_VAR 0 18
28308: PUSH
28309: LD_VAR 0 5
28313: PUSH
28314: LD_INT 1
28316: PPUSH
28317: LD_VAR 0 5
28321: PPUSH
28322: CALL_OW 12
28326: ARRAY
28327: ST_TO_ADDR
// end ; if weapon then
28328: LD_VAR 0 18
28332: IFFALSE 28446
// begin tmp := CostOfWeapon ( weapon ) ;
28334: LD_ADDR_VAR 0 14
28338: PUSH
28339: LD_VAR 0 18
28343: PPUSH
28344: CALL_OW 451
28348: ST_TO_ADDR
// j := GetBase ( tower ) ;
28349: LD_ADDR_VAR 0 9
28353: PUSH
28354: LD_VAR 0 1
28358: PPUSH
28359: CALL_OW 274
28363: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28364: LD_VAR 0 9
28368: PPUSH
28369: LD_INT 1
28371: PPUSH
28372: CALL_OW 275
28376: PUSH
28377: LD_VAR 0 14
28381: PUSH
28382: LD_INT 1
28384: ARRAY
28385: GREATEREQUAL
28386: PUSH
28387: LD_VAR 0 9
28391: PPUSH
28392: LD_INT 2
28394: PPUSH
28395: CALL_OW 275
28399: PUSH
28400: LD_VAR 0 14
28404: PUSH
28405: LD_INT 2
28407: ARRAY
28408: GREATEREQUAL
28409: AND
28410: PUSH
28411: LD_VAR 0 9
28415: PPUSH
28416: LD_INT 3
28418: PPUSH
28419: CALL_OW 275
28423: PUSH
28424: LD_VAR 0 14
28428: PUSH
28429: LD_INT 3
28431: ARRAY
28432: GREATEREQUAL
28433: AND
28434: IFFALSE 28446
// result := weapon ;
28436: LD_ADDR_VAR 0 3
28440: PUSH
28441: LD_VAR 0 18
28445: ST_TO_ADDR
// end ; end ;
28446: LD_VAR 0 3
28450: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28451: LD_INT 0
28453: PPUSH
28454: PPUSH
// result := true ;
28455: LD_ADDR_VAR 0 3
28459: PUSH
28460: LD_INT 1
28462: ST_TO_ADDR
// if array1 = array2 then
28463: LD_VAR 0 1
28467: PUSH
28468: LD_VAR 0 2
28472: EQUAL
28473: IFFALSE 28533
// begin for i = 1 to array1 do
28475: LD_ADDR_VAR 0 4
28479: PUSH
28480: DOUBLE
28481: LD_INT 1
28483: DEC
28484: ST_TO_ADDR
28485: LD_VAR 0 1
28489: PUSH
28490: FOR_TO
28491: IFFALSE 28529
// if array1 [ i ] <> array2 [ i ] then
28493: LD_VAR 0 1
28497: PUSH
28498: LD_VAR 0 4
28502: ARRAY
28503: PUSH
28504: LD_VAR 0 2
28508: PUSH
28509: LD_VAR 0 4
28513: ARRAY
28514: NONEQUAL
28515: IFFALSE 28527
// begin result := false ;
28517: LD_ADDR_VAR 0 3
28521: PUSH
28522: LD_INT 0
28524: ST_TO_ADDR
// break ;
28525: GO 28529
// end ;
28527: GO 28490
28529: POP
28530: POP
// end else
28531: GO 28541
// result := false ;
28533: LD_ADDR_VAR 0 3
28537: PUSH
28538: LD_INT 0
28540: ST_TO_ADDR
// end ;
28541: LD_VAR 0 3
28545: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28546: LD_INT 0
28548: PPUSH
28549: PPUSH
// if not array1 or not array2 then
28550: LD_VAR 0 1
28554: NOT
28555: PUSH
28556: LD_VAR 0 2
28560: NOT
28561: OR
28562: IFFALSE 28566
// exit ;
28564: GO 28630
// result := true ;
28566: LD_ADDR_VAR 0 3
28570: PUSH
28571: LD_INT 1
28573: ST_TO_ADDR
// for i = 1 to array1 do
28574: LD_ADDR_VAR 0 4
28578: PUSH
28579: DOUBLE
28580: LD_INT 1
28582: DEC
28583: ST_TO_ADDR
28584: LD_VAR 0 1
28588: PUSH
28589: FOR_TO
28590: IFFALSE 28628
// if array1 [ i ] <> array2 [ i ] then
28592: LD_VAR 0 1
28596: PUSH
28597: LD_VAR 0 4
28601: ARRAY
28602: PUSH
28603: LD_VAR 0 2
28607: PUSH
28608: LD_VAR 0 4
28612: ARRAY
28613: NONEQUAL
28614: IFFALSE 28626
// begin result := false ;
28616: LD_ADDR_VAR 0 3
28620: PUSH
28621: LD_INT 0
28623: ST_TO_ADDR
// break ;
28624: GO 28628
// end ;
28626: GO 28589
28628: POP
28629: POP
// end ;
28630: LD_VAR 0 3
28634: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28635: LD_INT 0
28637: PPUSH
28638: PPUSH
28639: PPUSH
// pom := GetBase ( fac ) ;
28640: LD_ADDR_VAR 0 5
28644: PUSH
28645: LD_VAR 0 1
28649: PPUSH
28650: CALL_OW 274
28654: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28655: LD_ADDR_VAR 0 4
28659: PUSH
28660: LD_VAR 0 2
28664: PUSH
28665: LD_INT 1
28667: ARRAY
28668: PPUSH
28669: LD_VAR 0 2
28673: PUSH
28674: LD_INT 2
28676: ARRAY
28677: PPUSH
28678: LD_VAR 0 2
28682: PUSH
28683: LD_INT 3
28685: ARRAY
28686: PPUSH
28687: LD_VAR 0 2
28691: PUSH
28692: LD_INT 4
28694: ARRAY
28695: PPUSH
28696: CALL_OW 449
28700: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28701: LD_ADDR_VAR 0 3
28705: PUSH
28706: LD_VAR 0 5
28710: PPUSH
28711: LD_INT 1
28713: PPUSH
28714: CALL_OW 275
28718: PUSH
28719: LD_VAR 0 4
28723: PUSH
28724: LD_INT 1
28726: ARRAY
28727: GREATEREQUAL
28728: PUSH
28729: LD_VAR 0 5
28733: PPUSH
28734: LD_INT 2
28736: PPUSH
28737: CALL_OW 275
28741: PUSH
28742: LD_VAR 0 4
28746: PUSH
28747: LD_INT 2
28749: ARRAY
28750: GREATEREQUAL
28751: AND
28752: PUSH
28753: LD_VAR 0 5
28757: PPUSH
28758: LD_INT 3
28760: PPUSH
28761: CALL_OW 275
28765: PUSH
28766: LD_VAR 0 4
28770: PUSH
28771: LD_INT 3
28773: ARRAY
28774: GREATEREQUAL
28775: AND
28776: ST_TO_ADDR
// end ;
28777: LD_VAR 0 3
28781: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28782: LD_INT 0
28784: PPUSH
28785: PPUSH
28786: PPUSH
28787: PPUSH
// pom := GetBase ( building ) ;
28788: LD_ADDR_VAR 0 3
28792: PUSH
28793: LD_VAR 0 1
28797: PPUSH
28798: CALL_OW 274
28802: ST_TO_ADDR
// if not pom then
28803: LD_VAR 0 3
28807: NOT
28808: IFFALSE 28812
// exit ;
28810: GO 28982
// btype := GetBType ( building ) ;
28812: LD_ADDR_VAR 0 5
28816: PUSH
28817: LD_VAR 0 1
28821: PPUSH
28822: CALL_OW 266
28826: ST_TO_ADDR
// if btype = b_armoury then
28827: LD_VAR 0 5
28831: PUSH
28832: LD_INT 4
28834: EQUAL
28835: IFFALSE 28845
// btype := b_barracks ;
28837: LD_ADDR_VAR 0 5
28841: PUSH
28842: LD_INT 5
28844: ST_TO_ADDR
// if btype = b_depot then
28845: LD_VAR 0 5
28849: PUSH
28850: LD_INT 0
28852: EQUAL
28853: IFFALSE 28863
// btype := b_warehouse ;
28855: LD_ADDR_VAR 0 5
28859: PUSH
28860: LD_INT 1
28862: ST_TO_ADDR
// if btype = b_workshop then
28863: LD_VAR 0 5
28867: PUSH
28868: LD_INT 2
28870: EQUAL
28871: IFFALSE 28881
// btype := b_factory ;
28873: LD_ADDR_VAR 0 5
28877: PUSH
28878: LD_INT 3
28880: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28881: LD_ADDR_VAR 0 4
28885: PUSH
28886: LD_VAR 0 5
28890: PPUSH
28891: LD_VAR 0 1
28895: PPUSH
28896: CALL_OW 248
28900: PPUSH
28901: CALL_OW 450
28905: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28906: LD_ADDR_VAR 0 2
28910: PUSH
28911: LD_VAR 0 3
28915: PPUSH
28916: LD_INT 1
28918: PPUSH
28919: CALL_OW 275
28923: PUSH
28924: LD_VAR 0 4
28928: PUSH
28929: LD_INT 1
28931: ARRAY
28932: GREATEREQUAL
28933: PUSH
28934: LD_VAR 0 3
28938: PPUSH
28939: LD_INT 2
28941: PPUSH
28942: CALL_OW 275
28946: PUSH
28947: LD_VAR 0 4
28951: PUSH
28952: LD_INT 2
28954: ARRAY
28955: GREATEREQUAL
28956: AND
28957: PUSH
28958: LD_VAR 0 3
28962: PPUSH
28963: LD_INT 3
28965: PPUSH
28966: CALL_OW 275
28970: PUSH
28971: LD_VAR 0 4
28975: PUSH
28976: LD_INT 3
28978: ARRAY
28979: GREATEREQUAL
28980: AND
28981: ST_TO_ADDR
// end ;
28982: LD_VAR 0 2
28986: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28987: LD_INT 0
28989: PPUSH
28990: PPUSH
28991: PPUSH
// pom := GetBase ( building ) ;
28992: LD_ADDR_VAR 0 4
28996: PUSH
28997: LD_VAR 0 1
29001: PPUSH
29002: CALL_OW 274
29006: ST_TO_ADDR
// if not pom then
29007: LD_VAR 0 4
29011: NOT
29012: IFFALSE 29016
// exit ;
29014: GO 29117
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29016: LD_ADDR_VAR 0 5
29020: PUSH
29021: LD_VAR 0 2
29025: PPUSH
29026: LD_VAR 0 1
29030: PPUSH
29031: CALL_OW 248
29035: PPUSH
29036: CALL_OW 450
29040: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_VAR 0 4
29050: PPUSH
29051: LD_INT 1
29053: PPUSH
29054: CALL_OW 275
29058: PUSH
29059: LD_VAR 0 5
29063: PUSH
29064: LD_INT 1
29066: ARRAY
29067: GREATEREQUAL
29068: PUSH
29069: LD_VAR 0 4
29073: PPUSH
29074: LD_INT 2
29076: PPUSH
29077: CALL_OW 275
29081: PUSH
29082: LD_VAR 0 5
29086: PUSH
29087: LD_INT 2
29089: ARRAY
29090: GREATEREQUAL
29091: AND
29092: PUSH
29093: LD_VAR 0 4
29097: PPUSH
29098: LD_INT 3
29100: PPUSH
29101: CALL_OW 275
29105: PUSH
29106: LD_VAR 0 5
29110: PUSH
29111: LD_INT 3
29113: ARRAY
29114: GREATEREQUAL
29115: AND
29116: ST_TO_ADDR
// end ;
29117: LD_VAR 0 3
29121: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29122: LD_INT 0
29124: PPUSH
29125: PPUSH
29126: PPUSH
29127: PPUSH
29128: PPUSH
29129: PPUSH
29130: PPUSH
29131: PPUSH
29132: PPUSH
29133: PPUSH
29134: PPUSH
// result := false ;
29135: LD_ADDR_VAR 0 8
29139: PUSH
29140: LD_INT 0
29142: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29143: LD_VAR 0 5
29147: NOT
29148: PUSH
29149: LD_VAR 0 1
29153: NOT
29154: OR
29155: PUSH
29156: LD_VAR 0 2
29160: NOT
29161: OR
29162: PUSH
29163: LD_VAR 0 3
29167: NOT
29168: OR
29169: IFFALSE 29173
// exit ;
29171: GO 29987
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29173: LD_ADDR_VAR 0 14
29177: PUSH
29178: LD_VAR 0 1
29182: PPUSH
29183: LD_VAR 0 2
29187: PPUSH
29188: LD_VAR 0 3
29192: PPUSH
29193: LD_VAR 0 4
29197: PPUSH
29198: LD_VAR 0 5
29202: PUSH
29203: LD_INT 1
29205: ARRAY
29206: PPUSH
29207: CALL_OW 248
29211: PPUSH
29212: LD_INT 0
29214: PPUSH
29215: CALL 31240 0 6
29219: ST_TO_ADDR
// if not hexes then
29220: LD_VAR 0 14
29224: NOT
29225: IFFALSE 29229
// exit ;
29227: GO 29987
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29229: LD_ADDR_VAR 0 17
29233: PUSH
29234: LD_VAR 0 5
29238: PPUSH
29239: LD_INT 22
29241: PUSH
29242: LD_VAR 0 13
29246: PPUSH
29247: CALL_OW 255
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: LD_INT 30
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 30
29271: PUSH
29272: LD_INT 1
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PPUSH
29288: CALL_OW 72
29292: ST_TO_ADDR
// for i = 1 to hexes do
29293: LD_ADDR_VAR 0 9
29297: PUSH
29298: DOUBLE
29299: LD_INT 1
29301: DEC
29302: ST_TO_ADDR
29303: LD_VAR 0 14
29307: PUSH
29308: FOR_TO
29309: IFFALSE 29985
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29311: LD_ADDR_VAR 0 13
29315: PUSH
29316: LD_VAR 0 14
29320: PUSH
29321: LD_VAR 0 9
29325: ARRAY
29326: PUSH
29327: LD_INT 1
29329: ARRAY
29330: PPUSH
29331: LD_VAR 0 14
29335: PUSH
29336: LD_VAR 0 9
29340: ARRAY
29341: PUSH
29342: LD_INT 2
29344: ARRAY
29345: PPUSH
29346: CALL_OW 428
29350: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29351: LD_VAR 0 14
29355: PUSH
29356: LD_VAR 0 9
29360: ARRAY
29361: PUSH
29362: LD_INT 1
29364: ARRAY
29365: PPUSH
29366: LD_VAR 0 14
29370: PUSH
29371: LD_VAR 0 9
29375: ARRAY
29376: PUSH
29377: LD_INT 2
29379: ARRAY
29380: PPUSH
29381: CALL_OW 351
29385: PUSH
29386: LD_VAR 0 14
29390: PUSH
29391: LD_VAR 0 9
29395: ARRAY
29396: PUSH
29397: LD_INT 1
29399: ARRAY
29400: PPUSH
29401: LD_VAR 0 14
29405: PUSH
29406: LD_VAR 0 9
29410: ARRAY
29411: PUSH
29412: LD_INT 2
29414: ARRAY
29415: PPUSH
29416: CALL_OW 488
29420: NOT
29421: OR
29422: PUSH
29423: LD_VAR 0 13
29427: PPUSH
29428: CALL_OW 247
29432: PUSH
29433: LD_INT 3
29435: EQUAL
29436: OR
29437: IFFALSE 29443
// exit ;
29439: POP
29440: POP
29441: GO 29987
// if not tmp then
29443: LD_VAR 0 13
29447: NOT
29448: IFFALSE 29452
// continue ;
29450: GO 29308
// result := true ;
29452: LD_ADDR_VAR 0 8
29456: PUSH
29457: LD_INT 1
29459: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29460: LD_VAR 0 6
29464: PUSH
29465: LD_VAR 0 13
29469: PPUSH
29470: CALL_OW 247
29474: PUSH
29475: LD_INT 2
29477: EQUAL
29478: AND
29479: PUSH
29480: LD_VAR 0 13
29484: PPUSH
29485: CALL_OW 263
29489: PUSH
29490: LD_INT 1
29492: EQUAL
29493: AND
29494: IFFALSE 29658
// begin if IsDrivenBy ( tmp ) then
29496: LD_VAR 0 13
29500: PPUSH
29501: CALL_OW 311
29505: IFFALSE 29509
// continue ;
29507: GO 29308
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29509: LD_VAR 0 6
29513: PPUSH
29514: LD_INT 3
29516: PUSH
29517: LD_INT 60
29519: PUSH
29520: EMPTY
29521: LIST
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 3
29529: PUSH
29530: LD_INT 55
29532: PUSH
29533: EMPTY
29534: LIST
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PPUSH
29544: CALL_OW 72
29548: IFFALSE 29656
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29550: LD_ADDR_VAR 0 18
29554: PUSH
29555: LD_VAR 0 6
29559: PPUSH
29560: LD_INT 3
29562: PUSH
29563: LD_INT 60
29565: PUSH
29566: EMPTY
29567: LIST
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: LD_INT 55
29578: PUSH
29579: EMPTY
29580: LIST
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PPUSH
29590: CALL_OW 72
29594: PUSH
29595: LD_INT 1
29597: ARRAY
29598: ST_TO_ADDR
// if IsInUnit ( driver ) then
29599: LD_VAR 0 18
29603: PPUSH
29604: CALL_OW 310
29608: IFFALSE 29619
// ComExit ( driver ) ;
29610: LD_VAR 0 18
29614: PPUSH
29615: CALL 55032 0 1
// AddComEnterUnit ( driver , tmp ) ;
29619: LD_VAR 0 18
29623: PPUSH
29624: LD_VAR 0 13
29628: PPUSH
29629: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29633: LD_VAR 0 18
29637: PPUSH
29638: LD_VAR 0 7
29642: PPUSH
29643: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29647: LD_VAR 0 18
29651: PPUSH
29652: CALL_OW 181
// end ; continue ;
29656: GO 29308
// end ; if not cleaners or not tmp in cleaners then
29658: LD_VAR 0 6
29662: NOT
29663: PUSH
29664: LD_VAR 0 13
29668: PUSH
29669: LD_VAR 0 6
29673: IN
29674: NOT
29675: OR
29676: IFFALSE 29983
// begin if dep then
29678: LD_VAR 0 17
29682: IFFALSE 29818
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29684: LD_ADDR_VAR 0 16
29688: PUSH
29689: LD_VAR 0 17
29693: PUSH
29694: LD_INT 1
29696: ARRAY
29697: PPUSH
29698: CALL_OW 250
29702: PPUSH
29703: LD_VAR 0 17
29707: PUSH
29708: LD_INT 1
29710: ARRAY
29711: PPUSH
29712: CALL_OW 254
29716: PPUSH
29717: LD_INT 5
29719: PPUSH
29720: CALL_OW 272
29724: PUSH
29725: LD_VAR 0 17
29729: PUSH
29730: LD_INT 1
29732: ARRAY
29733: PPUSH
29734: CALL_OW 251
29738: PPUSH
29739: LD_VAR 0 17
29743: PUSH
29744: LD_INT 1
29746: ARRAY
29747: PPUSH
29748: CALL_OW 254
29752: PPUSH
29753: LD_INT 5
29755: PPUSH
29756: CALL_OW 273
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29765: LD_VAR 0 16
29769: PUSH
29770: LD_INT 1
29772: ARRAY
29773: PPUSH
29774: LD_VAR 0 16
29778: PUSH
29779: LD_INT 2
29781: ARRAY
29782: PPUSH
29783: CALL_OW 488
29787: IFFALSE 29818
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29789: LD_VAR 0 13
29793: PPUSH
29794: LD_VAR 0 16
29798: PUSH
29799: LD_INT 1
29801: ARRAY
29802: PPUSH
29803: LD_VAR 0 16
29807: PUSH
29808: LD_INT 2
29810: ARRAY
29811: PPUSH
29812: CALL_OW 111
// continue ;
29816: GO 29308
// end ; end ; r := GetDir ( tmp ) ;
29818: LD_ADDR_VAR 0 15
29822: PUSH
29823: LD_VAR 0 13
29827: PPUSH
29828: CALL_OW 254
29832: ST_TO_ADDR
// if r = 5 then
29833: LD_VAR 0 15
29837: PUSH
29838: LD_INT 5
29840: EQUAL
29841: IFFALSE 29851
// r := 0 ;
29843: LD_ADDR_VAR 0 15
29847: PUSH
29848: LD_INT 0
29850: ST_TO_ADDR
// for j = r to 5 do
29851: LD_ADDR_VAR 0 10
29855: PUSH
29856: DOUBLE
29857: LD_VAR 0 15
29861: DEC
29862: ST_TO_ADDR
29863: LD_INT 5
29865: PUSH
29866: FOR_TO
29867: IFFALSE 29981
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29869: LD_ADDR_VAR 0 11
29873: PUSH
29874: LD_VAR 0 13
29878: PPUSH
29879: CALL_OW 250
29883: PPUSH
29884: LD_VAR 0 10
29888: PPUSH
29889: LD_INT 2
29891: PPUSH
29892: CALL_OW 272
29896: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29897: LD_ADDR_VAR 0 12
29901: PUSH
29902: LD_VAR 0 13
29906: PPUSH
29907: CALL_OW 251
29911: PPUSH
29912: LD_VAR 0 10
29916: PPUSH
29917: LD_INT 2
29919: PPUSH
29920: CALL_OW 273
29924: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29925: LD_VAR 0 11
29929: PPUSH
29930: LD_VAR 0 12
29934: PPUSH
29935: CALL_OW 488
29939: PUSH
29940: LD_VAR 0 11
29944: PPUSH
29945: LD_VAR 0 12
29949: PPUSH
29950: CALL_OW 428
29954: NOT
29955: AND
29956: IFFALSE 29979
// begin ComMoveXY ( tmp , _x , _y ) ;
29958: LD_VAR 0 13
29962: PPUSH
29963: LD_VAR 0 11
29967: PPUSH
29968: LD_VAR 0 12
29972: PPUSH
29973: CALL_OW 111
// break ;
29977: GO 29981
// end ; end ;
29979: GO 29866
29981: POP
29982: POP
// end ; end ;
29983: GO 29308
29985: POP
29986: POP
// end ;
29987: LD_VAR 0 8
29991: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29992: LD_INT 0
29994: PPUSH
// result := true ;
29995: LD_ADDR_VAR 0 3
29999: PUSH
30000: LD_INT 1
30002: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30003: LD_VAR 0 2
30007: PUSH
30008: LD_INT 24
30010: DOUBLE
30011: EQUAL
30012: IFTRUE 30022
30014: LD_INT 33
30016: DOUBLE
30017: EQUAL
30018: IFTRUE 30022
30020: GO 30047
30022: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30023: LD_ADDR_VAR 0 3
30027: PUSH
30028: LD_INT 32
30030: PPUSH
30031: LD_VAR 0 1
30035: PPUSH
30036: CALL_OW 321
30040: PUSH
30041: LD_INT 2
30043: EQUAL
30044: ST_TO_ADDR
30045: GO 30363
30047: LD_INT 20
30049: DOUBLE
30050: EQUAL
30051: IFTRUE 30055
30053: GO 30080
30055: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30056: LD_ADDR_VAR 0 3
30060: PUSH
30061: LD_INT 6
30063: PPUSH
30064: LD_VAR 0 1
30068: PPUSH
30069: CALL_OW 321
30073: PUSH
30074: LD_INT 2
30076: EQUAL
30077: ST_TO_ADDR
30078: GO 30363
30080: LD_INT 22
30082: DOUBLE
30083: EQUAL
30084: IFTRUE 30094
30086: LD_INT 36
30088: DOUBLE
30089: EQUAL
30090: IFTRUE 30094
30092: GO 30119
30094: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30095: LD_ADDR_VAR 0 3
30099: PUSH
30100: LD_INT 15
30102: PPUSH
30103: LD_VAR 0 1
30107: PPUSH
30108: CALL_OW 321
30112: PUSH
30113: LD_INT 2
30115: EQUAL
30116: ST_TO_ADDR
30117: GO 30363
30119: LD_INT 30
30121: DOUBLE
30122: EQUAL
30123: IFTRUE 30127
30125: GO 30152
30127: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30128: LD_ADDR_VAR 0 3
30132: PUSH
30133: LD_INT 20
30135: PPUSH
30136: LD_VAR 0 1
30140: PPUSH
30141: CALL_OW 321
30145: PUSH
30146: LD_INT 2
30148: EQUAL
30149: ST_TO_ADDR
30150: GO 30363
30152: LD_INT 28
30154: DOUBLE
30155: EQUAL
30156: IFTRUE 30166
30158: LD_INT 21
30160: DOUBLE
30161: EQUAL
30162: IFTRUE 30166
30164: GO 30191
30166: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30167: LD_ADDR_VAR 0 3
30171: PUSH
30172: LD_INT 21
30174: PPUSH
30175: LD_VAR 0 1
30179: PPUSH
30180: CALL_OW 321
30184: PUSH
30185: LD_INT 2
30187: EQUAL
30188: ST_TO_ADDR
30189: GO 30363
30191: LD_INT 16
30193: DOUBLE
30194: EQUAL
30195: IFTRUE 30199
30197: GO 30224
30199: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30200: LD_ADDR_VAR 0 3
30204: PUSH
30205: LD_INT 84
30207: PPUSH
30208: LD_VAR 0 1
30212: PPUSH
30213: CALL_OW 321
30217: PUSH
30218: LD_INT 2
30220: EQUAL
30221: ST_TO_ADDR
30222: GO 30363
30224: LD_INT 19
30226: DOUBLE
30227: EQUAL
30228: IFTRUE 30238
30230: LD_INT 23
30232: DOUBLE
30233: EQUAL
30234: IFTRUE 30238
30236: GO 30263
30238: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30239: LD_ADDR_VAR 0 3
30243: PUSH
30244: LD_INT 83
30246: PPUSH
30247: LD_VAR 0 1
30251: PPUSH
30252: CALL_OW 321
30256: PUSH
30257: LD_INT 2
30259: EQUAL
30260: ST_TO_ADDR
30261: GO 30363
30263: LD_INT 17
30265: DOUBLE
30266: EQUAL
30267: IFTRUE 30271
30269: GO 30296
30271: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30272: LD_ADDR_VAR 0 3
30276: PUSH
30277: LD_INT 39
30279: PPUSH
30280: LD_VAR 0 1
30284: PPUSH
30285: CALL_OW 321
30289: PUSH
30290: LD_INT 2
30292: EQUAL
30293: ST_TO_ADDR
30294: GO 30363
30296: LD_INT 18
30298: DOUBLE
30299: EQUAL
30300: IFTRUE 30304
30302: GO 30329
30304: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30305: LD_ADDR_VAR 0 3
30309: PUSH
30310: LD_INT 40
30312: PPUSH
30313: LD_VAR 0 1
30317: PPUSH
30318: CALL_OW 321
30322: PUSH
30323: LD_INT 2
30325: EQUAL
30326: ST_TO_ADDR
30327: GO 30363
30329: LD_INT 27
30331: DOUBLE
30332: EQUAL
30333: IFTRUE 30337
30335: GO 30362
30337: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30338: LD_ADDR_VAR 0 3
30342: PUSH
30343: LD_INT 35
30345: PPUSH
30346: LD_VAR 0 1
30350: PPUSH
30351: CALL_OW 321
30355: PUSH
30356: LD_INT 2
30358: EQUAL
30359: ST_TO_ADDR
30360: GO 30363
30362: POP
// end ;
30363: LD_VAR 0 3
30367: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30368: LD_INT 0
30370: PPUSH
30371: PPUSH
30372: PPUSH
30373: PPUSH
30374: PPUSH
30375: PPUSH
30376: PPUSH
30377: PPUSH
30378: PPUSH
30379: PPUSH
30380: PPUSH
// result := false ;
30381: LD_ADDR_VAR 0 6
30385: PUSH
30386: LD_INT 0
30388: ST_TO_ADDR
// if btype = b_depot then
30389: LD_VAR 0 2
30393: PUSH
30394: LD_INT 0
30396: EQUAL
30397: IFFALSE 30409
// begin result := true ;
30399: LD_ADDR_VAR 0 6
30403: PUSH
30404: LD_INT 1
30406: ST_TO_ADDR
// exit ;
30407: GO 31235
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30409: LD_VAR 0 1
30413: NOT
30414: PUSH
30415: LD_VAR 0 1
30419: PPUSH
30420: CALL_OW 266
30424: PUSH
30425: LD_INT 0
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: IN
30435: NOT
30436: OR
30437: PUSH
30438: LD_VAR 0 2
30442: NOT
30443: OR
30444: PUSH
30445: LD_VAR 0 5
30449: PUSH
30450: LD_INT 0
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 3
30461: PUSH
30462: LD_INT 4
30464: PUSH
30465: LD_INT 5
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: IN
30476: NOT
30477: OR
30478: PUSH
30479: LD_VAR 0 3
30483: PPUSH
30484: LD_VAR 0 4
30488: PPUSH
30489: CALL_OW 488
30493: NOT
30494: OR
30495: IFFALSE 30499
// exit ;
30497: GO 31235
// side := GetSide ( depot ) ;
30499: LD_ADDR_VAR 0 9
30503: PUSH
30504: LD_VAR 0 1
30508: PPUSH
30509: CALL_OW 255
30513: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30514: LD_VAR 0 9
30518: PPUSH
30519: LD_VAR 0 2
30523: PPUSH
30524: CALL 29992 0 2
30528: NOT
30529: IFFALSE 30533
// exit ;
30531: GO 31235
// pom := GetBase ( depot ) ;
30533: LD_ADDR_VAR 0 10
30537: PUSH
30538: LD_VAR 0 1
30542: PPUSH
30543: CALL_OW 274
30547: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30548: LD_ADDR_VAR 0 11
30552: PUSH
30553: LD_VAR 0 2
30557: PPUSH
30558: LD_VAR 0 1
30562: PPUSH
30563: CALL_OW 248
30567: PPUSH
30568: CALL_OW 450
30572: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30573: LD_VAR 0 10
30577: PPUSH
30578: LD_INT 1
30580: PPUSH
30581: CALL_OW 275
30585: PUSH
30586: LD_VAR 0 11
30590: PUSH
30591: LD_INT 1
30593: ARRAY
30594: GREATEREQUAL
30595: PUSH
30596: LD_VAR 0 10
30600: PPUSH
30601: LD_INT 2
30603: PPUSH
30604: CALL_OW 275
30608: PUSH
30609: LD_VAR 0 11
30613: PUSH
30614: LD_INT 2
30616: ARRAY
30617: GREATEREQUAL
30618: AND
30619: PUSH
30620: LD_VAR 0 10
30624: PPUSH
30625: LD_INT 3
30627: PPUSH
30628: CALL_OW 275
30632: PUSH
30633: LD_VAR 0 11
30637: PUSH
30638: LD_INT 3
30640: ARRAY
30641: GREATEREQUAL
30642: AND
30643: NOT
30644: IFFALSE 30648
// exit ;
30646: GO 31235
// if GetBType ( depot ) = b_depot then
30648: LD_VAR 0 1
30652: PPUSH
30653: CALL_OW 266
30657: PUSH
30658: LD_INT 0
30660: EQUAL
30661: IFFALSE 30673
// dist := 28 else
30663: LD_ADDR_VAR 0 14
30667: PUSH
30668: LD_INT 28
30670: ST_TO_ADDR
30671: GO 30681
// dist := 36 ;
30673: LD_ADDR_VAR 0 14
30677: PUSH
30678: LD_INT 36
30680: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30681: LD_VAR 0 1
30685: PPUSH
30686: LD_VAR 0 3
30690: PPUSH
30691: LD_VAR 0 4
30695: PPUSH
30696: CALL_OW 297
30700: PUSH
30701: LD_VAR 0 14
30705: GREATER
30706: IFFALSE 30710
// exit ;
30708: GO 31235
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30710: LD_ADDR_VAR 0 12
30714: PUSH
30715: LD_VAR 0 2
30719: PPUSH
30720: LD_VAR 0 3
30724: PPUSH
30725: LD_VAR 0 4
30729: PPUSH
30730: LD_VAR 0 5
30734: PPUSH
30735: LD_VAR 0 1
30739: PPUSH
30740: CALL_OW 248
30744: PPUSH
30745: LD_INT 0
30747: PPUSH
30748: CALL 31240 0 6
30752: ST_TO_ADDR
// if not hexes then
30753: LD_VAR 0 12
30757: NOT
30758: IFFALSE 30762
// exit ;
30760: GO 31235
// hex := GetHexInfo ( x , y ) ;
30762: LD_ADDR_VAR 0 15
30766: PUSH
30767: LD_VAR 0 3
30771: PPUSH
30772: LD_VAR 0 4
30776: PPUSH
30777: CALL_OW 546
30781: ST_TO_ADDR
// if hex [ 1 ] then
30782: LD_VAR 0 15
30786: PUSH
30787: LD_INT 1
30789: ARRAY
30790: IFFALSE 30794
// exit ;
30792: GO 31235
// height := hex [ 2 ] ;
30794: LD_ADDR_VAR 0 13
30798: PUSH
30799: LD_VAR 0 15
30803: PUSH
30804: LD_INT 2
30806: ARRAY
30807: ST_TO_ADDR
// for i = 1 to hexes do
30808: LD_ADDR_VAR 0 7
30812: PUSH
30813: DOUBLE
30814: LD_INT 1
30816: DEC
30817: ST_TO_ADDR
30818: LD_VAR 0 12
30822: PUSH
30823: FOR_TO
30824: IFFALSE 31154
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30826: LD_VAR 0 12
30830: PUSH
30831: LD_VAR 0 7
30835: ARRAY
30836: PUSH
30837: LD_INT 1
30839: ARRAY
30840: PPUSH
30841: LD_VAR 0 12
30845: PUSH
30846: LD_VAR 0 7
30850: ARRAY
30851: PUSH
30852: LD_INT 2
30854: ARRAY
30855: PPUSH
30856: CALL_OW 488
30860: NOT
30861: PUSH
30862: LD_VAR 0 12
30866: PUSH
30867: LD_VAR 0 7
30871: ARRAY
30872: PUSH
30873: LD_INT 1
30875: ARRAY
30876: PPUSH
30877: LD_VAR 0 12
30881: PUSH
30882: LD_VAR 0 7
30886: ARRAY
30887: PUSH
30888: LD_INT 2
30890: ARRAY
30891: PPUSH
30892: CALL_OW 428
30896: PUSH
30897: LD_INT 0
30899: GREATER
30900: OR
30901: PUSH
30902: LD_VAR 0 12
30906: PUSH
30907: LD_VAR 0 7
30911: ARRAY
30912: PUSH
30913: LD_INT 1
30915: ARRAY
30916: PPUSH
30917: LD_VAR 0 12
30921: PUSH
30922: LD_VAR 0 7
30926: ARRAY
30927: PUSH
30928: LD_INT 2
30930: ARRAY
30931: PPUSH
30932: CALL_OW 351
30936: OR
30937: IFFALSE 30943
// exit ;
30939: POP
30940: POP
30941: GO 31235
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30943: LD_ADDR_VAR 0 8
30947: PUSH
30948: LD_VAR 0 12
30952: PUSH
30953: LD_VAR 0 7
30957: ARRAY
30958: PUSH
30959: LD_INT 1
30961: ARRAY
30962: PPUSH
30963: LD_VAR 0 12
30967: PUSH
30968: LD_VAR 0 7
30972: ARRAY
30973: PUSH
30974: LD_INT 2
30976: ARRAY
30977: PPUSH
30978: CALL_OW 546
30982: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30983: LD_VAR 0 8
30987: PUSH
30988: LD_INT 1
30990: ARRAY
30991: PUSH
30992: LD_VAR 0 8
30996: PUSH
30997: LD_INT 2
30999: ARRAY
31000: PUSH
31001: LD_VAR 0 13
31005: PUSH
31006: LD_INT 2
31008: PLUS
31009: GREATER
31010: OR
31011: PUSH
31012: LD_VAR 0 8
31016: PUSH
31017: LD_INT 2
31019: ARRAY
31020: PUSH
31021: LD_VAR 0 13
31025: PUSH
31026: LD_INT 2
31028: MINUS
31029: LESS
31030: OR
31031: PUSH
31032: LD_VAR 0 8
31036: PUSH
31037: LD_INT 3
31039: ARRAY
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: LD_INT 8
31046: PUSH
31047: LD_INT 9
31049: PUSH
31050: LD_INT 10
31052: PUSH
31053: LD_INT 11
31055: PUSH
31056: LD_INT 12
31058: PUSH
31059: LD_INT 13
31061: PUSH
31062: LD_INT 16
31064: PUSH
31065: LD_INT 17
31067: PUSH
31068: LD_INT 18
31070: PUSH
31071: LD_INT 19
31073: PUSH
31074: LD_INT 20
31076: PUSH
31077: LD_INT 21
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: IN
31095: NOT
31096: OR
31097: PUSH
31098: LD_VAR 0 8
31102: PUSH
31103: LD_INT 5
31105: ARRAY
31106: NOT
31107: OR
31108: PUSH
31109: LD_VAR 0 8
31113: PUSH
31114: LD_INT 6
31116: ARRAY
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: LD_INT 7
31126: PUSH
31127: LD_INT 9
31129: PUSH
31130: LD_INT 10
31132: PUSH
31133: LD_INT 11
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: IN
31144: NOT
31145: OR
31146: IFFALSE 31152
// exit ;
31148: POP
31149: POP
31150: GO 31235
// end ;
31152: GO 30823
31154: POP
31155: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31156: LD_VAR 0 9
31160: PPUSH
31161: LD_VAR 0 3
31165: PPUSH
31166: LD_VAR 0 4
31170: PPUSH
31171: LD_INT 20
31173: PPUSH
31174: CALL 23158 0 4
31178: PUSH
31179: LD_INT 4
31181: ARRAY
31182: IFFALSE 31186
// exit ;
31184: GO 31235
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31186: LD_VAR 0 2
31190: PUSH
31191: LD_INT 29
31193: PUSH
31194: LD_INT 30
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: IN
31201: PUSH
31202: LD_VAR 0 3
31206: PPUSH
31207: LD_VAR 0 4
31211: PPUSH
31212: LD_VAR 0 9
31216: PPUSH
31217: CALL_OW 440
31221: NOT
31222: AND
31223: IFFALSE 31227
// exit ;
31225: GO 31235
// result := true ;
31227: LD_ADDR_VAR 0 6
31231: PUSH
31232: LD_INT 1
31234: ST_TO_ADDR
// end ;
31235: LD_VAR 0 6
31239: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31240: LD_INT 0
31242: PPUSH
31243: PPUSH
31244: PPUSH
31245: PPUSH
31246: PPUSH
31247: PPUSH
31248: PPUSH
31249: PPUSH
31250: PPUSH
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
31255: PPUSH
31256: PPUSH
31257: PPUSH
31258: PPUSH
31259: PPUSH
31260: PPUSH
31261: PPUSH
31262: PPUSH
31263: PPUSH
31264: PPUSH
31265: PPUSH
31266: PPUSH
31267: PPUSH
31268: PPUSH
31269: PPUSH
31270: PPUSH
31271: PPUSH
31272: PPUSH
31273: PPUSH
31274: PPUSH
31275: PPUSH
31276: PPUSH
31277: PPUSH
31278: PPUSH
31279: PPUSH
31280: PPUSH
31281: PPUSH
31282: PPUSH
31283: PPUSH
31284: PPUSH
31285: PPUSH
31286: PPUSH
31287: PPUSH
31288: PPUSH
31289: PPUSH
31290: PPUSH
31291: PPUSH
31292: PPUSH
31293: PPUSH
31294: PPUSH
31295: PPUSH
31296: PPUSH
31297: PPUSH
31298: PPUSH
31299: PPUSH
// result = [ ] ;
31300: LD_ADDR_VAR 0 7
31304: PUSH
31305: EMPTY
31306: ST_TO_ADDR
// temp_list = [ ] ;
31307: LD_ADDR_VAR 0 9
31311: PUSH
31312: EMPTY
31313: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31314: LD_VAR 0 4
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: LD_INT 2
31327: PUSH
31328: LD_INT 3
31330: PUSH
31331: LD_INT 4
31333: PUSH
31334: LD_INT 5
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: IN
31345: NOT
31346: PUSH
31347: LD_VAR 0 1
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: IN
31362: PUSH
31363: LD_VAR 0 5
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: LD_INT 2
31373: PUSH
31374: LD_INT 3
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: LIST
31381: IN
31382: NOT
31383: AND
31384: OR
31385: IFFALSE 31389
// exit ;
31387: GO 49780
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31389: LD_VAR 0 1
31393: PUSH
31394: LD_INT 6
31396: PUSH
31397: LD_INT 7
31399: PUSH
31400: LD_INT 8
31402: PUSH
31403: LD_INT 13
31405: PUSH
31406: LD_INT 12
31408: PUSH
31409: LD_INT 15
31411: PUSH
31412: LD_INT 11
31414: PUSH
31415: LD_INT 14
31417: PUSH
31418: LD_INT 10
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: IN
31432: IFFALSE 31442
// btype = b_lab ;
31434: LD_ADDR_VAR 0 1
31438: PUSH
31439: LD_INT 6
31441: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31442: LD_VAR 0 6
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: IN
31461: NOT
31462: PUSH
31463: LD_VAR 0 1
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: LD_INT 3
31479: PUSH
31480: LD_INT 6
31482: PUSH
31483: LD_INT 36
31485: PUSH
31486: LD_INT 4
31488: PUSH
31489: LD_INT 5
31491: PUSH
31492: LD_INT 31
31494: PUSH
31495: LD_INT 32
31497: PUSH
31498: LD_INT 33
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: IN
31514: NOT
31515: PUSH
31516: LD_VAR 0 6
31520: PUSH
31521: LD_INT 1
31523: EQUAL
31524: AND
31525: OR
31526: PUSH
31527: LD_VAR 0 1
31531: PUSH
31532: LD_INT 2
31534: PUSH
31535: LD_INT 3
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: IN
31542: NOT
31543: PUSH
31544: LD_VAR 0 6
31548: PUSH
31549: LD_INT 2
31551: EQUAL
31552: AND
31553: OR
31554: IFFALSE 31564
// mode = 0 ;
31556: LD_ADDR_VAR 0 6
31560: PUSH
31561: LD_INT 0
31563: ST_TO_ADDR
// case mode of 0 :
31564: LD_VAR 0 6
31568: PUSH
31569: LD_INT 0
31571: DOUBLE
31572: EQUAL
31573: IFTRUE 31577
31575: GO 43030
31577: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31578: LD_ADDR_VAR 0 11
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: LD_INT 1
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 1
31724: PUSH
31725: LD_INT 3
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: LD_INT 3
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 1
31744: NEG
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31771: LD_ADDR_VAR 0 12
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 0
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: LD_INT 1
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: LD_INT 1
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 2
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 2
31894: NEG
31895: PUSH
31896: LD_INT 0
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 2
31917: NEG
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 3
31928: NEG
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 3
31939: NEG
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31967: LD_ADDR_VAR 0 13
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 0
31984: PUSH
31985: LD_INT 1
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: LD_INT 1
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: NEG
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: LD_INT 2
32106: NEG
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 2
32114: NEG
32115: PUSH
32116: LD_INT 3
32118: NEG
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 3
32126: NEG
32127: PUSH
32128: LD_INT 2
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 3
32138: NEG
32139: PUSH
32140: LD_INT 3
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32166: LD_ADDR_VAR 0 14
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: NEG
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: LD_INT 2
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: LD_INT 2
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: LD_INT 2
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 0
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: LD_INT 3
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 3
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32362: LD_ADDR_VAR 0 15
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: LD_INT 1
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 0
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: LD_INT 0
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 1
32474: NEG
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 2
32485: NEG
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 2
32496: NEG
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 2
32508: PUSH
32509: LD_INT 1
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 3
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32555: LD_ADDR_VAR 0 16
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: LD_INT 1
32575: NEG
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 0
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: NEG
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: NEG
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: LD_INT 2
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: LD_INT 2
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 2
32678: NEG
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 2
32690: NEG
32691: PUSH
32692: LD_INT 2
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 3
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 3
32712: PUSH
32713: LD_INT 3
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: PUSH
32723: LD_INT 3
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32748: LD_ADDR_VAR 0 17
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 1
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 1
32829: NEG
32830: PUSH
32831: LD_INT 2
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 0
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 1
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 2
32947: NEG
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32978: LD_ADDR_VAR 0 18
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: NEG
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: LD_INT 2
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: LD_INT 2
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 1
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: LD_INT 2
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: NEG
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: NEG
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: LD_INT 1
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: NEG
33178: PUSH
33179: LD_INT 2
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33208: LD_ADDR_VAR 0 19
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 1
33228: NEG
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: NEG
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: NEG
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: NEG
33290: PUSH
33291: LD_INT 2
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: LD_INT 1
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 2
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 1
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: LD_INT 2
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33438: LD_ADDR_VAR 0 20
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: LD_INT 1
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: LD_INT 1
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 0
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: LD_INT 2
33523: NEG
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: LD_INT 2
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: LD_INT 1
33545: NEG
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 2
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 2
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 2
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: LD_INT 2
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 2
33637: NEG
33638: PUSH
33639: LD_INT 2
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33668: LD_ADDR_VAR 0 21
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: LD_INT 2
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: LD_INT 2
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 2
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: NEG
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 2
33844: NEG
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 2
33867: NEG
33868: PUSH
33869: LD_INT 2
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33898: LD_ADDR_VAR 0 22
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: LD_INT 1
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: LD_INT 2
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: LD_INT 2
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: NEG
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 2
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 2
34097: NEG
34098: PUSH
34099: LD_INT 2
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34128: LD_ADDR_VAR 0 23
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: LD_INT 1
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: LD_INT 1
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 2
34253: PUSH
34254: LD_INT 1
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 2
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: NEG
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 2
34304: NEG
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 2
34315: NEG
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 2
34327: NEG
34328: PUSH
34329: LD_INT 2
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 2
34339: NEG
34340: PUSH
34341: LD_INT 3
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: LD_INT 3
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: LD_INT 2
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34408: LD_ADDR_VAR 0 24
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 0
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: LD_INT 0
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: LD_INT 2
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: LD_INT 2
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: NEG
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 2
34595: NEG
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: LD_INT 2
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: LD_INT 2
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 1
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 3
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 3
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34684: LD_ADDR_VAR 0 25
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 1
34765: NEG
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: LD_INT 2
34780: NEG
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: LD_INT 0
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: LD_INT 1
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: LD_INT 2
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: LD_INT 1
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 2
34860: NEG
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: NEG
34872: PUSH
34873: LD_INT 1
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: NEG
34884: PUSH
34885: LD_INT 2
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 3
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 3
34905: PUSH
34906: LD_INT 2
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: LD_INT 3
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: LD_INT 3
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34958: LD_ADDR_VAR 0 26
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: LD_INT 1
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: LD_INT 2
35043: NEG
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: LD_INT 2
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: PUSH
35125: LD_INT 1
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 2
35134: NEG
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: NEG
35146: PUSH
35147: LD_INT 1
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 2
35157: NEG
35158: PUSH
35159: LD_INT 2
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: LD_INT 3
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 2
35200: NEG
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35234: LD_ADDR_VAR 0 27
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 0
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 0
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: NEG
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: LD_INT 2
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 1
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: LD_INT 2
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 2
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: LD_INT 2
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 2
35410: NEG
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 2
35421: NEG
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 2
35433: NEG
35434: PUSH
35435: LD_INT 2
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: LD_INT 2
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 2
35456: NEG
35457: PUSH
35458: LD_INT 1
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 3
35467: NEG
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 3
35479: NEG
35480: PUSH
35481: LD_INT 2
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35514: LD_ADDR_VAR 0 28
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 0
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: LD_INT 2
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 2
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: LD_INT 2
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 2
35713: NEG
35714: PUSH
35715: LD_INT 2
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 2
35725: NEG
35726: PUSH
35727: LD_INT 3
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: LD_INT 3
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 3
35749: NEG
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 3
35761: NEG
35762: PUSH
35763: LD_INT 2
35765: NEG
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35796: LD_ADDR_VAR 0 29
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 1
35877: NEG
35878: PUSH
35879: LD_INT 2
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 2
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 1
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 2
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 1
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: LD_INT 2
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: LD_INT 2
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: NEG
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 2
35974: NEG
35975: PUSH
35976: LD_INT 2
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 2
35986: NEG
35987: PUSH
35988: LD_INT 3
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 3
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 3
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 3
36040: NEG
36041: PUSH
36042: LD_INT 2
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36075: LD_ADDR_VAR 0 30
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: LD_INT 2
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: LD_INT 2
36171: NEG
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: LD_INT 1
36182: NEG
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: LD_INT 3
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 3
36287: PUSH
36288: LD_INT 2
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: LD_INT 3
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: NEG
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 3
36318: NEG
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36353: LD_ADDR_VAR 0 31
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 1
36422: NEG
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: LD_INT 2
36438: NEG
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: LD_INT 1
36449: NEG
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 2
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 2
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 2
36518: NEG
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 2
36530: NEG
36531: PUSH
36532: LD_INT 2
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: NEG
36543: PUSH
36544: LD_INT 3
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 3
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 3
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 3
36596: NEG
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36631: LD_ADDR_VAR 0 32
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: LD_INT 0
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 1
36689: NEG
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: LD_INT 2
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: LD_INT 2
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 2
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 2
36756: PUSH
36757: LD_INT 2
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: LD_INT 2
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 2
36797: NEG
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 2
36808: NEG
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: LD_INT 3
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: LD_INT 2
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 3
36843: PUSH
36844: LD_INT 2
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: LD_INT 3
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 2
36863: NEG
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 3
36874: NEG
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36909: LD_ADDR_VAR 0 33
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: LD_INT 2
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 2
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 2
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 2
37064: NEG
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 2
37075: NEG
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: NEG
37088: PUSH
37089: LD_INT 2
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 2
37099: NEG
37100: PUSH
37101: LD_INT 3
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 3
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: LD_INT 2
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 3
37153: NEG
37154: PUSH
37155: LD_INT 2
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37188: LD_ADDR_VAR 0 34
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 2
37313: PUSH
37314: LD_INT 2
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: LD_INT 2
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 2
37355: NEG
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 2
37367: NEG
37368: PUSH
37369: LD_INT 2
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: LD_INT 3
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: LD_INT 2
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 3
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: LD_INT 3
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 2
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 3
37433: NEG
37434: PUSH
37435: LD_INT 1
37437: NEG
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37468: LD_ADDR_VAR 0 35
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 0
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 2
37559: NEG
37560: PUSH
37561: LD_INT 1
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37580: LD_ADDR_VAR 0 36
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37692: LD_ADDR_VAR 0 37
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: NEG
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37804: LD_ADDR_VAR 0 38
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: LD_INT 1
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: NEG
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37916: LD_ADDR_VAR 0 39
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 2
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38028: LD_ADDR_VAR 0 40
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: LD_INT 1
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38140: LD_ADDR_VAR 0 41
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: NEG
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: LD_INT 2
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 2
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: LD_INT 2
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: LD_INT 2
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: LD_INT 2
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: LD_INT 3
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 3
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: LD_INT 2
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 3
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: LD_INT 3
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: NEG
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 3
38414: NEG
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 3
38425: NEG
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 3
38437: NEG
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 3
38449: NEG
38450: PUSH
38451: LD_INT 3
38453: NEG
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38490: LD_ADDR_VAR 0 42
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: LD_INT 2
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: LD_INT 3
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 3
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: LD_INT 3
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 3
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 3
38736: PUSH
38737: LD_INT 3
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: LD_INT 3
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: LD_INT 3
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 3
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: LD_INT 2
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 3
38787: NEG
38788: PUSH
38789: LD_INT 2
38791: NEG
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 3
38799: NEG
38800: PUSH
38801: LD_INT 3
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38840: LD_ADDR_VAR 0 43
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: LD_INT 1
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 2
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 1
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 2
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 2
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 2
39017: NEG
39018: PUSH
39019: LD_INT 1
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: LD_INT 3
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: LD_INT 3
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 2
39055: NEG
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 3
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 3
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 3
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 3
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 2
39125: NEG
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 3
39136: NEG
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 3
39147: NEG
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39188: LD_ADDR_VAR 0 44
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: LD_INT 1
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: LD_INT 2
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: LD_INT 0
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: LD_INT 3
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 3
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 3
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: LD_INT 3
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 2
39441: PUSH
39442: LD_INT 3
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 3
39462: NEG
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 3
39473: NEG
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 3
39485: NEG
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 3
39497: NEG
39498: PUSH
39499: LD_INT 3
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39538: LD_ADDR_VAR 0 45
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: LD_INT 2
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: LD_INT 2
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 2
39716: NEG
39717: PUSH
39718: LD_INT 2
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: NEG
39729: PUSH
39730: LD_INT 3
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: LD_INT 3
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 3
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 2
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 3
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 3
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: LD_INT 3
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: LD_INT 3
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 3
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 3
39835: NEG
39836: PUSH
39837: LD_INT 2
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: LD_INT 3
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39888: LD_ADDR_VAR 0 46
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 2
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: LD_INT 2
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 3
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 3
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 3
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 3
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 3
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: NEG
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 3
40184: NEG
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 3
40195: NEG
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40236: LD_ADDR_VAR 0 47
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: LD_INT 2
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 2
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40387: LD_ADDR_VAR 0 48
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 2
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40534: LD_ADDR_VAR 0 49
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40678: LD_ADDR_VAR 0 50
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40822: LD_ADDR_VAR 0 51
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: LD_INT 1
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40969: LD_ADDR_VAR 0 52
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41120: LD_ADDR_VAR 0 53
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: LD_INT 2
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 2
41296: NEG
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41350: LD_ADDR_VAR 0 54
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: LD_INT 2
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: LD_INT 2
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41580: LD_ADDR_VAR 0 55
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: NEG
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41810: LD_ADDR_VAR 0 56
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: LD_INT 2
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: LD_INT 2
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42040: LD_ADDR_VAR 0 57
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: LD_INT 2
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: LD_INT 2
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 2
42227: NEG
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: NEG
42240: PUSH
42241: LD_INT 2
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42270: LD_ADDR_VAR 0 58
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: LD_INT 2
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: LD_INT 2
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: NEG
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 2
42457: NEG
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42500: LD_ADDR_VAR 0 59
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42588: LD_ADDR_VAR 0 60
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42676: LD_ADDR_VAR 0 61
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42764: LD_ADDR_VAR 0 62
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42852: LD_ADDR_VAR 0 63
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42940: LD_ADDR_VAR 0 64
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: ST_TO_ADDR
// end ; 1 :
43028: GO 48925
43030: LD_INT 1
43032: DOUBLE
43033: EQUAL
43034: IFTRUE 43038
43036: GO 45661
43038: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43039: LD_ADDR_VAR 0 11
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: LD_INT 3
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: LD_INT 3
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43083: LD_ADDR_VAR 0 12
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 3
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43124: LD_ADDR_VAR 0 13
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: LD_INT 3
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: LD_INT 3
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: LIST
43163: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43164: LD_ADDR_VAR 0 14
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: LD_INT 3
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: LD_INT 3
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: LIST
43204: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43205: LD_ADDR_VAR 0 15
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 3
43223: NEG
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 3
43234: NEG
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: LIST
43248: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43249: LD_ADDR_VAR 0 16
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: LD_INT 3
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 3
43268: NEG
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 3
43280: NEG
43281: PUSH
43282: LD_INT 3
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: LIST
43294: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43295: LD_ADDR_VAR 0 17
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: LD_INT 3
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 3
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: LIST
43338: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43339: LD_ADDR_VAR 0 18
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 3
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 3
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: LIST
43379: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43380: LD_ADDR_VAR 0 19
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 3
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: LIST
43419: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43420: LD_ADDR_VAR 0 20
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: LD_INT 3
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 3
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43461: LD_ADDR_VAR 0 21
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: NEG
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 3
43490: NEG
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: LIST
43504: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43505: LD_ADDR_VAR 0 22
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: LD_INT 3
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 3
43524: NEG
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 3
43536: NEG
43537: PUSH
43538: LD_INT 3
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43551: LD_ADDR_VAR 0 23
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 3
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 4
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: LD_INT 3
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: LIST
43594: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43595: LD_ADDR_VAR 0 24
43599: PUSH
43600: LD_INT 3
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 3
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 4
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: LIST
43635: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43636: LD_ADDR_VAR 0 25
43640: PUSH
43641: LD_INT 3
43643: PUSH
43644: LD_INT 3
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 4
43653: PUSH
43654: LD_INT 3
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 3
43663: PUSH
43664: LD_INT 4
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43676: LD_ADDR_VAR 0 26
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 3
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 4
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: LD_INT 3
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43717: LD_ADDR_VAR 0 27
43721: PUSH
43722: LD_INT 3
43724: NEG
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 3
43735: NEG
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 4
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43761: LD_ADDR_VAR 0 28
43765: PUSH
43766: LD_INT 3
43768: NEG
43769: PUSH
43770: LD_INT 3
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 3
43780: NEG
43781: PUSH
43782: LD_INT 4
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 4
43792: NEG
43793: PUSH
43794: LD_INT 3
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: LIST
43806: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43807: LD_ADDR_VAR 0 29
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 3
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 3
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: LD_INT 4
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 4
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 3
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 5
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 5
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 4
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 6
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 6
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: LD_INT 5
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43962: LD_ADDR_VAR 0 30
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 3
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 3
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 3
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 4
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 4
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 4
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 5
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 5
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 5
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 6
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 6
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44105: LD_ADDR_VAR 0 31
44109: PUSH
44110: LD_INT 3
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 3
44122: PUSH
44123: LD_INT 3
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: LD_INT 3
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 4
44142: PUSH
44143: LD_INT 3
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 4
44152: PUSH
44153: LD_INT 4
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: LD_INT 4
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 5
44172: PUSH
44173: LD_INT 4
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 5
44182: PUSH
44183: LD_INT 5
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 4
44192: PUSH
44193: LD_INT 5
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 6
44202: PUSH
44203: LD_INT 5
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 6
44212: PUSH
44213: LD_INT 6
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 5
44222: PUSH
44223: LD_INT 6
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44244: LD_ADDR_VAR 0 32
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: LD_INT 3
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 3
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 4
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 4
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 3
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 5
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 5
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: LD_INT 4
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 6
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 6
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 5
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44387: LD_ADDR_VAR 0 33
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 3
44405: NEG
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 3
44416: NEG
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 3
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 4
44439: NEG
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 4
44450: NEG
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 4
44462: NEG
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 5
44473: NEG
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 5
44484: NEG
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 5
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 6
44507: NEG
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 6
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44542: LD_ADDR_VAR 0 34
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: LD_INT 3
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 3
44561: NEG
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 3
44573: NEG
44574: PUSH
44575: LD_INT 3
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 3
44585: NEG
44586: PUSH
44587: LD_INT 4
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 4
44597: NEG
44598: PUSH
44599: LD_INT 3
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 4
44609: NEG
44610: PUSH
44611: LD_INT 4
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 4
44621: NEG
44622: PUSH
44623: LD_INT 5
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 5
44633: NEG
44634: PUSH
44635: LD_INT 4
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 5
44645: NEG
44646: PUSH
44647: LD_INT 5
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 5
44657: NEG
44658: PUSH
44659: LD_INT 6
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 6
44669: NEG
44670: PUSH
44671: LD_INT 5
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 6
44681: NEG
44682: PUSH
44683: LD_INT 6
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44705: LD_ADDR_VAR 0 41
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 2
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: LD_INT 3
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: LIST
44748: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44749: LD_ADDR_VAR 0 42
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 3
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: LIST
44789: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44790: LD_ADDR_VAR 0 43
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 3
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 3
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: LIST
44829: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44830: LD_ADDR_VAR 0 44
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 3
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44871: LD_ADDR_VAR 0 45
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 3
44900: NEG
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: LIST
44914: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44915: LD_ADDR_VAR 0 46
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: LD_INT 3
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 3
44946: NEG
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44961: LD_ADDR_VAR 0 47
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 3
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 3
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44994: LD_ADDR_VAR 0 48
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45025: LD_ADDR_VAR 0 49
45029: PUSH
45030: LD_INT 3
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 3
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45054: LD_ADDR_VAR 0 50
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 3
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45083: LD_ADDR_VAR 0 51
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45114: LD_ADDR_VAR 0 52
45118: PUSH
45119: LD_INT 3
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 3
45133: NEG
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45147: LD_ADDR_VAR 0 53
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 3
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 3
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45191: LD_ADDR_VAR 0 54
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 3
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45232: LD_ADDR_VAR 0 55
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 3
45249: PUSH
45250: LD_INT 3
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: LIST
45271: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45272: LD_ADDR_VAR 0 56
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45313: LD_ADDR_VAR 0 57
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 3
45331: NEG
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 3
45342: NEG
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45357: LD_ADDR_VAR 0 58
45361: PUSH
45362: LD_INT 2
45364: NEG
45365: PUSH
45366: LD_INT 3
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 3
45376: NEG
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 3
45388: NEG
45389: PUSH
45390: LD_INT 3
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: LIST
45402: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45403: LD_ADDR_VAR 0 59
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 2
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45447: LD_ADDR_VAR 0 60
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: LIST
45487: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45488: LD_ADDR_VAR 0 61
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45528: LD_ADDR_VAR 0 62
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: LIST
45568: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45569: LD_ADDR_VAR 0 63
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: LIST
45612: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45613: LD_ADDR_VAR 0 64
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: LIST
45658: ST_TO_ADDR
// end ; 2 :
45659: GO 48925
45661: LD_INT 2
45663: DOUBLE
45664: EQUAL
45665: IFTRUE 45669
45667: GO 48924
45669: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45670: LD_ADDR_VAR 0 29
45674: PUSH
45675: LD_INT 4
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 4
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 5
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 5
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 4
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 3
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 5
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 3
45770: PUSH
45771: LD_INT 3
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 4
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 4
45800: PUSH
45801: LD_INT 4
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 3
45810: PUSH
45811: LD_INT 4
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: LD_INT 3
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: LD_INT 2
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 4
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: LD_INT 4
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 4
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 4
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: LD_INT 5
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 5
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: LD_INT 4
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: LD_INT 3
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: PUSH
45933: LD_INT 5
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: LD_INT 3
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 3
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 3
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 3
45998: NEG
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 4
46009: NEG
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 4
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 4
46032: NEG
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 4
46055: NEG
46056: PUSH
46057: LD_INT 4
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 4
46067: NEG
46068: PUSH
46069: LD_INT 5
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 3
46079: NEG
46080: PUSH
46081: LD_INT 4
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: LD_INT 3
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 4
46103: NEG
46104: PUSH
46105: LD_INT 3
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 5
46115: NEG
46116: PUSH
46117: LD_INT 4
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 5
46127: NEG
46128: PUSH
46129: LD_INT 5
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 3
46139: NEG
46140: PUSH
46141: LD_INT 5
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 5
46151: NEG
46152: PUSH
46153: LD_INT 3
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46208: LD_ADDR_VAR 0 30
46212: PUSH
46213: LD_INT 4
46215: PUSH
46216: LD_INT 4
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 4
46225: PUSH
46226: LD_INT 3
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 5
46235: PUSH
46236: LD_INT 4
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 5
46245: PUSH
46246: LD_INT 5
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 4
46255: PUSH
46256: LD_INT 5
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 3
46265: PUSH
46266: LD_INT 4
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 3
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 5
46285: PUSH
46286: LD_INT 3
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: LD_INT 5
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 3
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 4
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 4
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: LD_INT 3
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 4
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 4
46398: NEG
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 4
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 4
46443: NEG
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 5
46454: NEG
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 5
46465: NEG
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 5
46477: NEG
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 3
46489: NEG
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 3
46500: NEG
46501: PUSH
46502: LD_INT 3
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 3
46512: NEG
46513: PUSH
46514: LD_INT 4
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 3
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 4
46560: NEG
46561: PUSH
46562: LD_INT 3
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 4
46572: NEG
46573: PUSH
46574: LD_INT 4
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: LD_INT 4
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 4
46596: NEG
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 4
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 5
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: LD_INT 4
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 3
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 3
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 4
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 5
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: LD_INT 3
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: LD_INT 5
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46755: LD_ADDR_VAR 0 31
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 4
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 3
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 4
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 5
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 5
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: LD_INT 4
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 3
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: LD_INT 5
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 3
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 3
46855: NEG
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 3
46866: NEG
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 3
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 4
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 4
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 4
46934: NEG
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 4
46957: NEG
46958: PUSH
46959: LD_INT 4
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 4
46969: NEG
46970: PUSH
46971: LD_INT 5
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 3
46981: NEG
46982: PUSH
46983: LD_INT 4
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 3
46993: NEG
46994: PUSH
46995: LD_INT 3
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 4
47005: NEG
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 5
47017: NEG
47018: PUSH
47019: LD_INT 4
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 5
47029: NEG
47030: PUSH
47031: LD_INT 5
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 3
47041: NEG
47042: PUSH
47043: LD_INT 5
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 5
47053: NEG
47054: PUSH
47055: LD_INT 3
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 3
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 4
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 3
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: LD_INT 3
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 4
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: LD_INT 4
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 4
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 4
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 5
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 5
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 4
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 3
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 3
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 3
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 5
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47305: LD_ADDR_VAR 0 32
47309: PUSH
47310: LD_INT 4
47312: NEG
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 4
47323: NEG
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 3
47335: NEG
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 3
47346: NEG
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 4
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 5
47368: NEG
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 5
47379: NEG
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 5
47391: NEG
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 3
47403: NEG
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: LD_INT 3
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 3
47426: NEG
47427: PUSH
47428: LD_INT 4
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: LD_INT 3
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 3
47462: NEG
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 4
47474: NEG
47475: PUSH
47476: LD_INT 3
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 4
47486: NEG
47487: PUSH
47488: LD_INT 4
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: LD_INT 4
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 4
47510: NEG
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 4
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 5
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 4
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 3
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 3
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 4
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 5
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: LD_INT 3
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: LD_INT 5
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 3
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 4
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 4
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 4
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 4
47717: PUSH
47718: LD_INT 4
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 4
47727: PUSH
47728: LD_INT 3
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 5
47737: PUSH
47738: LD_INT 4
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 5
47747: PUSH
47748: LD_INT 5
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 4
47757: PUSH
47758: LD_INT 5
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 3
47767: PUSH
47768: LD_INT 4
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 3
47777: PUSH
47778: LD_INT 3
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 5
47787: PUSH
47788: LD_INT 3
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: LD_INT 5
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47852: LD_ADDR_VAR 0 33
47856: PUSH
47857: LD_INT 4
47859: NEG
47860: PUSH
47861: LD_INT 4
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 4
47871: NEG
47872: PUSH
47873: LD_INT 5
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: LD_INT 4
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 3
47895: NEG
47896: PUSH
47897: LD_INT 3
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 4
47907: NEG
47908: PUSH
47909: LD_INT 3
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 5
47919: NEG
47920: PUSH
47921: LD_INT 4
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 5
47931: NEG
47932: PUSH
47933: LD_INT 5
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: NEG
47944: PUSH
47945: LD_INT 5
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 5
47955: NEG
47956: PUSH
47957: LD_INT 3
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 3
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 4
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 3
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 3
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: LD_INT 4
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: NEG
48058: PUSH
48059: LD_INT 4
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 4
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 4
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 5
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 5
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 4
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 3
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 3
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 3
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 5
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 3
48162: PUSH
48163: LD_INT 3
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 4
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 4
48192: PUSH
48193: LD_INT 4
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: LD_INT 4
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 3
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 4
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 4
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 4
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 3
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 4
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 5
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 5
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 4
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 3
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 5
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48390: LD_ADDR_VAR 0 34
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 4
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 5
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 4
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: LD_INT 3
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: LD_INT 4
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 5
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: LD_INT 3
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: LD_INT 5
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 4
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 4
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 4
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 4
48592: PUSH
48593: LD_INT 4
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 4
48602: PUSH
48603: LD_INT 3
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 5
48612: PUSH
48613: LD_INT 4
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 5
48622: PUSH
48623: LD_INT 5
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 4
48632: PUSH
48633: LD_INT 5
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: LD_INT 4
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: PUSH
48653: LD_INT 3
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 5
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: LD_INT 5
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 4
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 4
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 3
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 4
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 4
48775: NEG
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 4
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 3
48798: NEG
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: NEG
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 4
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 5
48831: NEG
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 5
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 5
48854: NEG
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 3
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: ST_TO_ADDR
// end ; end ;
48922: GO 48925
48924: POP
// case btype of b_depot , b_warehouse :
48925: LD_VAR 0 1
48929: PUSH
48930: LD_INT 0
48932: DOUBLE
48933: EQUAL
48934: IFTRUE 48944
48936: LD_INT 1
48938: DOUBLE
48939: EQUAL
48940: IFTRUE 48944
48942: GO 49145
48944: POP
// case nation of nation_american :
48945: LD_VAR 0 5
48949: PUSH
48950: LD_INT 1
48952: DOUBLE
48953: EQUAL
48954: IFTRUE 48958
48956: GO 49014
48958: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48959: LD_ADDR_VAR 0 9
48963: PUSH
48964: LD_VAR 0 11
48968: PUSH
48969: LD_VAR 0 12
48973: PUSH
48974: LD_VAR 0 13
48978: PUSH
48979: LD_VAR 0 14
48983: PUSH
48984: LD_VAR 0 15
48988: PUSH
48989: LD_VAR 0 16
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: PUSH
49002: LD_VAR 0 4
49006: PUSH
49007: LD_INT 1
49009: PLUS
49010: ARRAY
49011: ST_TO_ADDR
49012: GO 49143
49014: LD_INT 2
49016: DOUBLE
49017: EQUAL
49018: IFTRUE 49022
49020: GO 49078
49022: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49023: LD_ADDR_VAR 0 9
49027: PUSH
49028: LD_VAR 0 17
49032: PUSH
49033: LD_VAR 0 18
49037: PUSH
49038: LD_VAR 0 19
49042: PUSH
49043: LD_VAR 0 20
49047: PUSH
49048: LD_VAR 0 21
49052: PUSH
49053: LD_VAR 0 22
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: PUSH
49066: LD_VAR 0 4
49070: PUSH
49071: LD_INT 1
49073: PLUS
49074: ARRAY
49075: ST_TO_ADDR
49076: GO 49143
49078: LD_INT 3
49080: DOUBLE
49081: EQUAL
49082: IFTRUE 49086
49084: GO 49142
49086: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49087: LD_ADDR_VAR 0 9
49091: PUSH
49092: LD_VAR 0 23
49096: PUSH
49097: LD_VAR 0 24
49101: PUSH
49102: LD_VAR 0 25
49106: PUSH
49107: LD_VAR 0 26
49111: PUSH
49112: LD_VAR 0 27
49116: PUSH
49117: LD_VAR 0 28
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: PUSH
49130: LD_VAR 0 4
49134: PUSH
49135: LD_INT 1
49137: PLUS
49138: ARRAY
49139: ST_TO_ADDR
49140: GO 49143
49142: POP
49143: GO 49698
49145: LD_INT 2
49147: DOUBLE
49148: EQUAL
49149: IFTRUE 49159
49151: LD_INT 3
49153: DOUBLE
49154: EQUAL
49155: IFTRUE 49159
49157: GO 49215
49159: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49160: LD_ADDR_VAR 0 9
49164: PUSH
49165: LD_VAR 0 29
49169: PUSH
49170: LD_VAR 0 30
49174: PUSH
49175: LD_VAR 0 31
49179: PUSH
49180: LD_VAR 0 32
49184: PUSH
49185: LD_VAR 0 33
49189: PUSH
49190: LD_VAR 0 34
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: PUSH
49203: LD_VAR 0 4
49207: PUSH
49208: LD_INT 1
49210: PLUS
49211: ARRAY
49212: ST_TO_ADDR
49213: GO 49698
49215: LD_INT 16
49217: DOUBLE
49218: EQUAL
49219: IFTRUE 49277
49221: LD_INT 17
49223: DOUBLE
49224: EQUAL
49225: IFTRUE 49277
49227: LD_INT 18
49229: DOUBLE
49230: EQUAL
49231: IFTRUE 49277
49233: LD_INT 19
49235: DOUBLE
49236: EQUAL
49237: IFTRUE 49277
49239: LD_INT 22
49241: DOUBLE
49242: EQUAL
49243: IFTRUE 49277
49245: LD_INT 20
49247: DOUBLE
49248: EQUAL
49249: IFTRUE 49277
49251: LD_INT 21
49253: DOUBLE
49254: EQUAL
49255: IFTRUE 49277
49257: LD_INT 23
49259: DOUBLE
49260: EQUAL
49261: IFTRUE 49277
49263: LD_INT 24
49265: DOUBLE
49266: EQUAL
49267: IFTRUE 49277
49269: LD_INT 25
49271: DOUBLE
49272: EQUAL
49273: IFTRUE 49277
49275: GO 49333
49277: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49278: LD_ADDR_VAR 0 9
49282: PUSH
49283: LD_VAR 0 35
49287: PUSH
49288: LD_VAR 0 36
49292: PUSH
49293: LD_VAR 0 37
49297: PUSH
49298: LD_VAR 0 38
49302: PUSH
49303: LD_VAR 0 39
49307: PUSH
49308: LD_VAR 0 40
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: PUSH
49321: LD_VAR 0 4
49325: PUSH
49326: LD_INT 1
49328: PLUS
49329: ARRAY
49330: ST_TO_ADDR
49331: GO 49698
49333: LD_INT 6
49335: DOUBLE
49336: EQUAL
49337: IFTRUE 49389
49339: LD_INT 7
49341: DOUBLE
49342: EQUAL
49343: IFTRUE 49389
49345: LD_INT 8
49347: DOUBLE
49348: EQUAL
49349: IFTRUE 49389
49351: LD_INT 13
49353: DOUBLE
49354: EQUAL
49355: IFTRUE 49389
49357: LD_INT 12
49359: DOUBLE
49360: EQUAL
49361: IFTRUE 49389
49363: LD_INT 15
49365: DOUBLE
49366: EQUAL
49367: IFTRUE 49389
49369: LD_INT 11
49371: DOUBLE
49372: EQUAL
49373: IFTRUE 49389
49375: LD_INT 14
49377: DOUBLE
49378: EQUAL
49379: IFTRUE 49389
49381: LD_INT 10
49383: DOUBLE
49384: EQUAL
49385: IFTRUE 49389
49387: GO 49445
49389: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49390: LD_ADDR_VAR 0 9
49394: PUSH
49395: LD_VAR 0 41
49399: PUSH
49400: LD_VAR 0 42
49404: PUSH
49405: LD_VAR 0 43
49409: PUSH
49410: LD_VAR 0 44
49414: PUSH
49415: LD_VAR 0 45
49419: PUSH
49420: LD_VAR 0 46
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: PUSH
49433: LD_VAR 0 4
49437: PUSH
49438: LD_INT 1
49440: PLUS
49441: ARRAY
49442: ST_TO_ADDR
49443: GO 49698
49445: LD_INT 36
49447: DOUBLE
49448: EQUAL
49449: IFTRUE 49453
49451: GO 49509
49453: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49454: LD_ADDR_VAR 0 9
49458: PUSH
49459: LD_VAR 0 47
49463: PUSH
49464: LD_VAR 0 48
49468: PUSH
49469: LD_VAR 0 49
49473: PUSH
49474: LD_VAR 0 50
49478: PUSH
49479: LD_VAR 0 51
49483: PUSH
49484: LD_VAR 0 52
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: PUSH
49497: LD_VAR 0 4
49501: PUSH
49502: LD_INT 1
49504: PLUS
49505: ARRAY
49506: ST_TO_ADDR
49507: GO 49698
49509: LD_INT 4
49511: DOUBLE
49512: EQUAL
49513: IFTRUE 49535
49515: LD_INT 5
49517: DOUBLE
49518: EQUAL
49519: IFTRUE 49535
49521: LD_INT 34
49523: DOUBLE
49524: EQUAL
49525: IFTRUE 49535
49527: LD_INT 37
49529: DOUBLE
49530: EQUAL
49531: IFTRUE 49535
49533: GO 49591
49535: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49536: LD_ADDR_VAR 0 9
49540: PUSH
49541: LD_VAR 0 53
49545: PUSH
49546: LD_VAR 0 54
49550: PUSH
49551: LD_VAR 0 55
49555: PUSH
49556: LD_VAR 0 56
49560: PUSH
49561: LD_VAR 0 57
49565: PUSH
49566: LD_VAR 0 58
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: PUSH
49579: LD_VAR 0 4
49583: PUSH
49584: LD_INT 1
49586: PLUS
49587: ARRAY
49588: ST_TO_ADDR
49589: GO 49698
49591: LD_INT 31
49593: DOUBLE
49594: EQUAL
49595: IFTRUE 49641
49597: LD_INT 32
49599: DOUBLE
49600: EQUAL
49601: IFTRUE 49641
49603: LD_INT 33
49605: DOUBLE
49606: EQUAL
49607: IFTRUE 49641
49609: LD_INT 27
49611: DOUBLE
49612: EQUAL
49613: IFTRUE 49641
49615: LD_INT 26
49617: DOUBLE
49618: EQUAL
49619: IFTRUE 49641
49621: LD_INT 28
49623: DOUBLE
49624: EQUAL
49625: IFTRUE 49641
49627: LD_INT 29
49629: DOUBLE
49630: EQUAL
49631: IFTRUE 49641
49633: LD_INT 30
49635: DOUBLE
49636: EQUAL
49637: IFTRUE 49641
49639: GO 49697
49641: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49642: LD_ADDR_VAR 0 9
49646: PUSH
49647: LD_VAR 0 59
49651: PUSH
49652: LD_VAR 0 60
49656: PUSH
49657: LD_VAR 0 61
49661: PUSH
49662: LD_VAR 0 62
49666: PUSH
49667: LD_VAR 0 63
49671: PUSH
49672: LD_VAR 0 64
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: PUSH
49685: LD_VAR 0 4
49689: PUSH
49690: LD_INT 1
49692: PLUS
49693: ARRAY
49694: ST_TO_ADDR
49695: GO 49698
49697: POP
// temp_list2 = [ ] ;
49698: LD_ADDR_VAR 0 10
49702: PUSH
49703: EMPTY
49704: ST_TO_ADDR
// for i in temp_list do
49705: LD_ADDR_VAR 0 8
49709: PUSH
49710: LD_VAR 0 9
49714: PUSH
49715: FOR_IN
49716: IFFALSE 49768
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49718: LD_ADDR_VAR 0 10
49722: PUSH
49723: LD_VAR 0 10
49727: PUSH
49728: LD_VAR 0 8
49732: PUSH
49733: LD_INT 1
49735: ARRAY
49736: PUSH
49737: LD_VAR 0 2
49741: PLUS
49742: PUSH
49743: LD_VAR 0 8
49747: PUSH
49748: LD_INT 2
49750: ARRAY
49751: PUSH
49752: LD_VAR 0 3
49756: PLUS
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: EMPTY
49763: LIST
49764: ADD
49765: ST_TO_ADDR
49766: GO 49715
49768: POP
49769: POP
// result = temp_list2 ;
49770: LD_ADDR_VAR 0 7
49774: PUSH
49775: LD_VAR 0 10
49779: ST_TO_ADDR
// end ;
49780: LD_VAR 0 7
49784: RET
// export function EnemyInRange ( unit , dist ) ; begin
49785: LD_INT 0
49787: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49788: LD_ADDR_VAR 0 3
49792: PUSH
49793: LD_VAR 0 1
49797: PPUSH
49798: CALL_OW 255
49802: PPUSH
49803: LD_VAR 0 1
49807: PPUSH
49808: CALL_OW 250
49812: PPUSH
49813: LD_VAR 0 1
49817: PPUSH
49818: CALL_OW 251
49822: PPUSH
49823: LD_VAR 0 2
49827: PPUSH
49828: CALL 23158 0 4
49832: PUSH
49833: LD_INT 4
49835: ARRAY
49836: ST_TO_ADDR
// end ;
49837: LD_VAR 0 3
49841: RET
// export function PlayerSeeMe ( unit ) ; begin
49842: LD_INT 0
49844: PPUSH
// result := See ( your_side , unit ) ;
49845: LD_ADDR_VAR 0 2
49849: PUSH
49850: LD_OWVAR 2
49854: PPUSH
49855: LD_VAR 0 1
49859: PPUSH
49860: CALL_OW 292
49864: ST_TO_ADDR
// end ;
49865: LD_VAR 0 2
49869: RET
// export function ReverseDir ( unit ) ; begin
49870: LD_INT 0
49872: PPUSH
// if not unit then
49873: LD_VAR 0 1
49877: NOT
49878: IFFALSE 49882
// exit ;
49880: GO 49905
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49882: LD_ADDR_VAR 0 2
49886: PUSH
49887: LD_VAR 0 1
49891: PPUSH
49892: CALL_OW 254
49896: PUSH
49897: LD_INT 3
49899: PLUS
49900: PUSH
49901: LD_INT 6
49903: MOD
49904: ST_TO_ADDR
// end ;
49905: LD_VAR 0 2
49909: RET
// export function ReverseArray ( array ) ; var i ; begin
49910: LD_INT 0
49912: PPUSH
49913: PPUSH
// if not array then
49914: LD_VAR 0 1
49918: NOT
49919: IFFALSE 49923
// exit ;
49921: GO 49978
// result := [ ] ;
49923: LD_ADDR_VAR 0 2
49927: PUSH
49928: EMPTY
49929: ST_TO_ADDR
// for i := array downto 1 do
49930: LD_ADDR_VAR 0 3
49934: PUSH
49935: DOUBLE
49936: LD_VAR 0 1
49940: INC
49941: ST_TO_ADDR
49942: LD_INT 1
49944: PUSH
49945: FOR_DOWNTO
49946: IFFALSE 49976
// result := Join ( result , array [ i ] ) ;
49948: LD_ADDR_VAR 0 2
49952: PUSH
49953: LD_VAR 0 2
49957: PPUSH
49958: LD_VAR 0 1
49962: PUSH
49963: LD_VAR 0 3
49967: ARRAY
49968: PPUSH
49969: CALL 54634 0 2
49973: ST_TO_ADDR
49974: GO 49945
49976: POP
49977: POP
// end ;
49978: LD_VAR 0 2
49982: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49983: LD_INT 0
49985: PPUSH
49986: PPUSH
49987: PPUSH
49988: PPUSH
49989: PPUSH
49990: PPUSH
// if not unit or not hexes then
49991: LD_VAR 0 1
49995: NOT
49996: PUSH
49997: LD_VAR 0 2
50001: NOT
50002: OR
50003: IFFALSE 50007
// exit ;
50005: GO 50130
// dist := 9999 ;
50007: LD_ADDR_VAR 0 5
50011: PUSH
50012: LD_INT 9999
50014: ST_TO_ADDR
// for i = 1 to hexes do
50015: LD_ADDR_VAR 0 4
50019: PUSH
50020: DOUBLE
50021: LD_INT 1
50023: DEC
50024: ST_TO_ADDR
50025: LD_VAR 0 2
50029: PUSH
50030: FOR_TO
50031: IFFALSE 50118
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50033: LD_ADDR_VAR 0 6
50037: PUSH
50038: LD_VAR 0 1
50042: PPUSH
50043: LD_VAR 0 2
50047: PUSH
50048: LD_VAR 0 4
50052: ARRAY
50053: PUSH
50054: LD_INT 1
50056: ARRAY
50057: PPUSH
50058: LD_VAR 0 2
50062: PUSH
50063: LD_VAR 0 4
50067: ARRAY
50068: PUSH
50069: LD_INT 2
50071: ARRAY
50072: PPUSH
50073: CALL_OW 297
50077: ST_TO_ADDR
// if tdist < dist then
50078: LD_VAR 0 6
50082: PUSH
50083: LD_VAR 0 5
50087: LESS
50088: IFFALSE 50116
// begin hex := hexes [ i ] ;
50090: LD_ADDR_VAR 0 8
50094: PUSH
50095: LD_VAR 0 2
50099: PUSH
50100: LD_VAR 0 4
50104: ARRAY
50105: ST_TO_ADDR
// dist := tdist ;
50106: LD_ADDR_VAR 0 5
50110: PUSH
50111: LD_VAR 0 6
50115: ST_TO_ADDR
// end ; end ;
50116: GO 50030
50118: POP
50119: POP
// result := hex ;
50120: LD_ADDR_VAR 0 3
50124: PUSH
50125: LD_VAR 0 8
50129: ST_TO_ADDR
// end ;
50130: LD_VAR 0 3
50134: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50135: LD_INT 0
50137: PPUSH
50138: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50139: LD_VAR 0 1
50143: NOT
50144: PUSH
50145: LD_VAR 0 1
50149: PUSH
50150: LD_INT 21
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 23
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PPUSH
50174: CALL_OW 69
50178: IN
50179: NOT
50180: OR
50181: IFFALSE 50185
// exit ;
50183: GO 50232
// for i = 1 to 3 do
50185: LD_ADDR_VAR 0 3
50189: PUSH
50190: DOUBLE
50191: LD_INT 1
50193: DEC
50194: ST_TO_ADDR
50195: LD_INT 3
50197: PUSH
50198: FOR_TO
50199: IFFALSE 50230
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50201: LD_VAR 0 1
50205: PPUSH
50206: CALL_OW 250
50210: PPUSH
50211: LD_VAR 0 1
50215: PPUSH
50216: CALL_OW 251
50220: PPUSH
50221: LD_INT 1
50223: PPUSH
50224: CALL_OW 453
50228: GO 50198
50230: POP
50231: POP
// end ;
50232: LD_VAR 0 2
50236: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50237: LD_INT 0
50239: PPUSH
50240: PPUSH
50241: PPUSH
50242: PPUSH
50243: PPUSH
50244: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
50245: LD_VAR 0 1
50249: NOT
50250: PUSH
50251: LD_VAR 0 2
50255: NOT
50256: OR
50257: PUSH
50258: LD_VAR 0 1
50262: PPUSH
50263: CALL_OW 314
50267: OR
50268: IFFALSE 50272
// exit ;
50270: GO 50739
// if GetLives ( i ) < 250 then
50272: LD_VAR 0 4
50276: PPUSH
50277: CALL_OW 256
50281: PUSH
50282: LD_INT 250
50284: LESS
50285: IFFALSE 50298
// begin ComAutodestruct ( i ) ;
50287: LD_VAR 0 4
50291: PPUSH
50292: CALL 50135 0 1
// exit ;
50296: GO 50739
// end ; x := GetX ( enemy_unit ) ;
50298: LD_ADDR_VAR 0 7
50302: PUSH
50303: LD_VAR 0 2
50307: PPUSH
50308: CALL_OW 250
50312: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50313: LD_ADDR_VAR 0 8
50317: PUSH
50318: LD_VAR 0 2
50322: PPUSH
50323: CALL_OW 251
50327: ST_TO_ADDR
// if not x or not y then
50328: LD_VAR 0 7
50332: NOT
50333: PUSH
50334: LD_VAR 0 8
50338: NOT
50339: OR
50340: IFFALSE 50344
// exit ;
50342: GO 50739
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50344: LD_ADDR_VAR 0 6
50348: PUSH
50349: LD_VAR 0 7
50353: PPUSH
50354: LD_INT 0
50356: PPUSH
50357: LD_INT 4
50359: PPUSH
50360: CALL_OW 272
50364: PUSH
50365: LD_VAR 0 8
50369: PPUSH
50370: LD_INT 0
50372: PPUSH
50373: LD_INT 4
50375: PPUSH
50376: CALL_OW 273
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_VAR 0 7
50389: PPUSH
50390: LD_INT 1
50392: PPUSH
50393: LD_INT 4
50395: PPUSH
50396: CALL_OW 272
50400: PUSH
50401: LD_VAR 0 8
50405: PPUSH
50406: LD_INT 1
50408: PPUSH
50409: LD_INT 4
50411: PPUSH
50412: CALL_OW 273
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_VAR 0 7
50425: PPUSH
50426: LD_INT 2
50428: PPUSH
50429: LD_INT 4
50431: PPUSH
50432: CALL_OW 272
50436: PUSH
50437: LD_VAR 0 8
50441: PPUSH
50442: LD_INT 2
50444: PPUSH
50445: LD_INT 4
50447: PPUSH
50448: CALL_OW 273
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_VAR 0 7
50461: PPUSH
50462: LD_INT 3
50464: PPUSH
50465: LD_INT 4
50467: PPUSH
50468: CALL_OW 272
50472: PUSH
50473: LD_VAR 0 8
50477: PPUSH
50478: LD_INT 3
50480: PPUSH
50481: LD_INT 4
50483: PPUSH
50484: CALL_OW 273
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_VAR 0 7
50497: PPUSH
50498: LD_INT 4
50500: PPUSH
50501: LD_INT 4
50503: PPUSH
50504: CALL_OW 272
50508: PUSH
50509: LD_VAR 0 8
50513: PPUSH
50514: LD_INT 4
50516: PPUSH
50517: LD_INT 4
50519: PPUSH
50520: CALL_OW 273
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_VAR 0 7
50533: PPUSH
50534: LD_INT 5
50536: PPUSH
50537: LD_INT 4
50539: PPUSH
50540: CALL_OW 272
50544: PUSH
50545: LD_VAR 0 8
50549: PPUSH
50550: LD_INT 5
50552: PPUSH
50553: LD_INT 4
50555: PPUSH
50556: CALL_OW 273
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: ST_TO_ADDR
// for i = tmp downto 1 do
50573: LD_ADDR_VAR 0 4
50577: PUSH
50578: DOUBLE
50579: LD_VAR 0 6
50583: INC
50584: ST_TO_ADDR
50585: LD_INT 1
50587: PUSH
50588: FOR_DOWNTO
50589: IFFALSE 50690
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50591: LD_VAR 0 6
50595: PUSH
50596: LD_VAR 0 4
50600: ARRAY
50601: PUSH
50602: LD_INT 1
50604: ARRAY
50605: PPUSH
50606: LD_VAR 0 6
50610: PUSH
50611: LD_VAR 0 4
50615: ARRAY
50616: PUSH
50617: LD_INT 2
50619: ARRAY
50620: PPUSH
50621: CALL_OW 488
50625: NOT
50626: PUSH
50627: LD_VAR 0 6
50631: PUSH
50632: LD_VAR 0 4
50636: ARRAY
50637: PUSH
50638: LD_INT 1
50640: ARRAY
50641: PPUSH
50642: LD_VAR 0 6
50646: PUSH
50647: LD_VAR 0 4
50651: ARRAY
50652: PUSH
50653: LD_INT 2
50655: ARRAY
50656: PPUSH
50657: CALL_OW 428
50661: PUSH
50662: LD_INT 0
50664: NONEQUAL
50665: OR
50666: IFFALSE 50688
// tmp := Delete ( tmp , i ) ;
50668: LD_ADDR_VAR 0 6
50672: PUSH
50673: LD_VAR 0 6
50677: PPUSH
50678: LD_VAR 0 4
50682: PPUSH
50683: CALL_OW 3
50687: ST_TO_ADDR
50688: GO 50588
50690: POP
50691: POP
// j := GetClosestHex ( unit , tmp ) ;
50692: LD_ADDR_VAR 0 5
50696: PUSH
50697: LD_VAR 0 1
50701: PPUSH
50702: LD_VAR 0 6
50706: PPUSH
50707: CALL 49983 0 2
50711: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50712: LD_VAR 0 1
50716: PPUSH
50717: LD_VAR 0 5
50721: PUSH
50722: LD_INT 1
50724: ARRAY
50725: PPUSH
50726: LD_VAR 0 5
50730: PUSH
50731: LD_INT 2
50733: ARRAY
50734: PPUSH
50735: CALL_OW 111
// end ;
50739: LD_VAR 0 3
50743: RET
// export function PrepareApemanSoldier ( ) ; begin
50744: LD_INT 0
50746: PPUSH
// uc_nation := 0 ;
50747: LD_ADDR_OWVAR 21
50751: PUSH
50752: LD_INT 0
50754: ST_TO_ADDR
// hc_sex := sex_male ;
50755: LD_ADDR_OWVAR 27
50759: PUSH
50760: LD_INT 1
50762: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50763: LD_ADDR_OWVAR 28
50767: PUSH
50768: LD_INT 15
50770: ST_TO_ADDR
// hc_gallery :=  ;
50771: LD_ADDR_OWVAR 33
50775: PUSH
50776: LD_STRING 
50778: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50779: LD_ADDR_OWVAR 31
50783: PUSH
50784: LD_INT 0
50786: PPUSH
50787: LD_INT 3
50789: PPUSH
50790: CALL_OW 12
50794: PUSH
50795: LD_INT 0
50797: PPUSH
50798: LD_INT 3
50800: PPUSH
50801: CALL_OW 12
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: ST_TO_ADDR
// end ;
50818: LD_VAR 0 1
50822: RET
// export function PrepareApemanEngineer ( ) ; begin
50823: LD_INT 0
50825: PPUSH
// uc_nation := 0 ;
50826: LD_ADDR_OWVAR 21
50830: PUSH
50831: LD_INT 0
50833: ST_TO_ADDR
// hc_sex := sex_male ;
50834: LD_ADDR_OWVAR 27
50838: PUSH
50839: LD_INT 1
50841: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50842: LD_ADDR_OWVAR 28
50846: PUSH
50847: LD_INT 16
50849: ST_TO_ADDR
// hc_gallery :=  ;
50850: LD_ADDR_OWVAR 33
50854: PUSH
50855: LD_STRING 
50857: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50858: LD_ADDR_OWVAR 31
50862: PUSH
50863: LD_INT 0
50865: PPUSH
50866: LD_INT 3
50868: PPUSH
50869: CALL_OW 12
50873: PUSH
50874: LD_INT 0
50876: PPUSH
50877: LD_INT 3
50879: PPUSH
50880: CALL_OW 12
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: ST_TO_ADDR
// end ;
50897: LD_VAR 0 1
50901: RET
// export function PrepareApeman ( agressivity ) ; begin
50902: LD_INT 0
50904: PPUSH
// uc_side := 0 ;
50905: LD_ADDR_OWVAR 20
50909: PUSH
50910: LD_INT 0
50912: ST_TO_ADDR
// uc_nation := 0 ;
50913: LD_ADDR_OWVAR 21
50917: PUSH
50918: LD_INT 0
50920: ST_TO_ADDR
// hc_sex := sex_male ;
50921: LD_ADDR_OWVAR 27
50925: PUSH
50926: LD_INT 1
50928: ST_TO_ADDR
// hc_class := class_apeman ;
50929: LD_ADDR_OWVAR 28
50933: PUSH
50934: LD_INT 12
50936: ST_TO_ADDR
// hc_gallery :=  ;
50937: LD_ADDR_OWVAR 33
50941: PUSH
50942: LD_STRING 
50944: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50945: LD_ADDR_OWVAR 35
50949: PUSH
50950: LD_VAR 0 1
50954: NEG
50955: PPUSH
50956: LD_VAR 0 1
50960: PPUSH
50961: CALL_OW 12
50965: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50966: LD_ADDR_OWVAR 31
50970: PUSH
50971: LD_INT 0
50973: PPUSH
50974: LD_INT 3
50976: PPUSH
50977: CALL_OW 12
50981: PUSH
50982: LD_INT 0
50984: PPUSH
50985: LD_INT 3
50987: PPUSH
50988: CALL_OW 12
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: ST_TO_ADDR
// end ;
51005: LD_VAR 0 2
51009: RET
// export function PrepareTiger ( agressivity ) ; begin
51010: LD_INT 0
51012: PPUSH
// uc_side := 0 ;
51013: LD_ADDR_OWVAR 20
51017: PUSH
51018: LD_INT 0
51020: ST_TO_ADDR
// uc_nation := 0 ;
51021: LD_ADDR_OWVAR 21
51025: PUSH
51026: LD_INT 0
51028: ST_TO_ADDR
// hc_class := class_tiger ;
51029: LD_ADDR_OWVAR 28
51033: PUSH
51034: LD_INT 14
51036: ST_TO_ADDR
// hc_gallery :=  ;
51037: LD_ADDR_OWVAR 33
51041: PUSH
51042: LD_STRING 
51044: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51045: LD_ADDR_OWVAR 35
51049: PUSH
51050: LD_VAR 0 1
51054: NEG
51055: PPUSH
51056: LD_VAR 0 1
51060: PPUSH
51061: CALL_OW 12
51065: ST_TO_ADDR
// end ;
51066: LD_VAR 0 2
51070: RET
// export function PrepareEnchidna ( ) ; begin
51071: LD_INT 0
51073: PPUSH
// uc_side := 0 ;
51074: LD_ADDR_OWVAR 20
51078: PUSH
51079: LD_INT 0
51081: ST_TO_ADDR
// uc_nation := 0 ;
51082: LD_ADDR_OWVAR 21
51086: PUSH
51087: LD_INT 0
51089: ST_TO_ADDR
// hc_class := class_baggie ;
51090: LD_ADDR_OWVAR 28
51094: PUSH
51095: LD_INT 13
51097: ST_TO_ADDR
// hc_gallery :=  ;
51098: LD_ADDR_OWVAR 33
51102: PUSH
51103: LD_STRING 
51105: ST_TO_ADDR
// end ;
51106: LD_VAR 0 1
51110: RET
// export function PrepareFrog ( ) ; begin
51111: LD_INT 0
51113: PPUSH
// uc_side := 0 ;
51114: LD_ADDR_OWVAR 20
51118: PUSH
51119: LD_INT 0
51121: ST_TO_ADDR
// uc_nation := 0 ;
51122: LD_ADDR_OWVAR 21
51126: PUSH
51127: LD_INT 0
51129: ST_TO_ADDR
// hc_class := class_frog ;
51130: LD_ADDR_OWVAR 28
51134: PUSH
51135: LD_INT 19
51137: ST_TO_ADDR
// hc_gallery :=  ;
51138: LD_ADDR_OWVAR 33
51142: PUSH
51143: LD_STRING 
51145: ST_TO_ADDR
// end ;
51146: LD_VAR 0 1
51150: RET
// export function PrepareFish ( ) ; begin
51151: LD_INT 0
51153: PPUSH
// uc_side := 0 ;
51154: LD_ADDR_OWVAR 20
51158: PUSH
51159: LD_INT 0
51161: ST_TO_ADDR
// uc_nation := 0 ;
51162: LD_ADDR_OWVAR 21
51166: PUSH
51167: LD_INT 0
51169: ST_TO_ADDR
// hc_class := class_fish ;
51170: LD_ADDR_OWVAR 28
51174: PUSH
51175: LD_INT 20
51177: ST_TO_ADDR
// hc_gallery :=  ;
51178: LD_ADDR_OWVAR 33
51182: PUSH
51183: LD_STRING 
51185: ST_TO_ADDR
// end ;
51186: LD_VAR 0 1
51190: RET
// export function PrepareBird ( ) ; begin
51191: LD_INT 0
51193: PPUSH
// uc_side := 0 ;
51194: LD_ADDR_OWVAR 20
51198: PUSH
51199: LD_INT 0
51201: ST_TO_ADDR
// uc_nation := 0 ;
51202: LD_ADDR_OWVAR 21
51206: PUSH
51207: LD_INT 0
51209: ST_TO_ADDR
// hc_class := class_phororhacos ;
51210: LD_ADDR_OWVAR 28
51214: PUSH
51215: LD_INT 18
51217: ST_TO_ADDR
// hc_gallery :=  ;
51218: LD_ADDR_OWVAR 33
51222: PUSH
51223: LD_STRING 
51225: ST_TO_ADDR
// end ;
51226: LD_VAR 0 1
51230: RET
// export function PrepareHorse ( ) ; begin
51231: LD_INT 0
51233: PPUSH
// uc_side := 0 ;
51234: LD_ADDR_OWVAR 20
51238: PUSH
51239: LD_INT 0
51241: ST_TO_ADDR
// uc_nation := 0 ;
51242: LD_ADDR_OWVAR 21
51246: PUSH
51247: LD_INT 0
51249: ST_TO_ADDR
// hc_class := class_horse ;
51250: LD_ADDR_OWVAR 28
51254: PUSH
51255: LD_INT 21
51257: ST_TO_ADDR
// hc_gallery :=  ;
51258: LD_ADDR_OWVAR 33
51262: PUSH
51263: LD_STRING 
51265: ST_TO_ADDR
// end ;
51266: LD_VAR 0 1
51270: RET
// export function PrepareMastodont ( ) ; begin
51271: LD_INT 0
51273: PPUSH
// uc_side := 0 ;
51274: LD_ADDR_OWVAR 20
51278: PUSH
51279: LD_INT 0
51281: ST_TO_ADDR
// uc_nation := 0 ;
51282: LD_ADDR_OWVAR 21
51286: PUSH
51287: LD_INT 0
51289: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51290: LD_ADDR_OWVAR 37
51294: PUSH
51295: LD_INT 31
51297: ST_TO_ADDR
// vc_control := control_rider ;
51298: LD_ADDR_OWVAR 38
51302: PUSH
51303: LD_INT 4
51305: ST_TO_ADDR
// end ;
51306: LD_VAR 0 1
51310: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51311: LD_INT 0
51313: PPUSH
51314: PPUSH
51315: PPUSH
// uc_side = 0 ;
51316: LD_ADDR_OWVAR 20
51320: PUSH
51321: LD_INT 0
51323: ST_TO_ADDR
// uc_nation = 0 ;
51324: LD_ADDR_OWVAR 21
51328: PUSH
51329: LD_INT 0
51331: ST_TO_ADDR
// InitHc_All ( ) ;
51332: CALL_OW 584
// InitVc ;
51336: CALL_OW 20
// if mastodonts then
51340: LD_VAR 0 6
51344: IFFALSE 51411
// for i = 1 to mastodonts do
51346: LD_ADDR_VAR 0 11
51350: PUSH
51351: DOUBLE
51352: LD_INT 1
51354: DEC
51355: ST_TO_ADDR
51356: LD_VAR 0 6
51360: PUSH
51361: FOR_TO
51362: IFFALSE 51409
// begin vc_chassis := 31 ;
51364: LD_ADDR_OWVAR 37
51368: PUSH
51369: LD_INT 31
51371: ST_TO_ADDR
// vc_control := control_rider ;
51372: LD_ADDR_OWVAR 38
51376: PUSH
51377: LD_INT 4
51379: ST_TO_ADDR
// animal := CreateVehicle ;
51380: LD_ADDR_VAR 0 12
51384: PUSH
51385: CALL_OW 45
51389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51390: LD_VAR 0 12
51394: PPUSH
51395: LD_VAR 0 8
51399: PPUSH
51400: LD_INT 0
51402: PPUSH
51403: CALL 53539 0 3
// end ;
51407: GO 51361
51409: POP
51410: POP
// if horses then
51411: LD_VAR 0 5
51415: IFFALSE 51482
// for i = 1 to horses do
51417: LD_ADDR_VAR 0 11
51421: PUSH
51422: DOUBLE
51423: LD_INT 1
51425: DEC
51426: ST_TO_ADDR
51427: LD_VAR 0 5
51431: PUSH
51432: FOR_TO
51433: IFFALSE 51480
// begin hc_class := 21 ;
51435: LD_ADDR_OWVAR 28
51439: PUSH
51440: LD_INT 21
51442: ST_TO_ADDR
// hc_gallery :=  ;
51443: LD_ADDR_OWVAR 33
51447: PUSH
51448: LD_STRING 
51450: ST_TO_ADDR
// animal := CreateHuman ;
51451: LD_ADDR_VAR 0 12
51455: PUSH
51456: CALL_OW 44
51460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51461: LD_VAR 0 12
51465: PPUSH
51466: LD_VAR 0 8
51470: PPUSH
51471: LD_INT 0
51473: PPUSH
51474: CALL 53539 0 3
// end ;
51478: GO 51432
51480: POP
51481: POP
// if birds then
51482: LD_VAR 0 1
51486: IFFALSE 51553
// for i = 1 to birds do
51488: LD_ADDR_VAR 0 11
51492: PUSH
51493: DOUBLE
51494: LD_INT 1
51496: DEC
51497: ST_TO_ADDR
51498: LD_VAR 0 1
51502: PUSH
51503: FOR_TO
51504: IFFALSE 51551
// begin hc_class := 18 ;
51506: LD_ADDR_OWVAR 28
51510: PUSH
51511: LD_INT 18
51513: ST_TO_ADDR
// hc_gallery =  ;
51514: LD_ADDR_OWVAR 33
51518: PUSH
51519: LD_STRING 
51521: ST_TO_ADDR
// animal := CreateHuman ;
51522: LD_ADDR_VAR 0 12
51526: PUSH
51527: CALL_OW 44
51531: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51532: LD_VAR 0 12
51536: PPUSH
51537: LD_VAR 0 8
51541: PPUSH
51542: LD_INT 0
51544: PPUSH
51545: CALL 53539 0 3
// end ;
51549: GO 51503
51551: POP
51552: POP
// if tigers then
51553: LD_VAR 0 2
51557: IFFALSE 51641
// for i = 1 to tigers do
51559: LD_ADDR_VAR 0 11
51563: PUSH
51564: DOUBLE
51565: LD_INT 1
51567: DEC
51568: ST_TO_ADDR
51569: LD_VAR 0 2
51573: PUSH
51574: FOR_TO
51575: IFFALSE 51639
// begin hc_class = class_tiger ;
51577: LD_ADDR_OWVAR 28
51581: PUSH
51582: LD_INT 14
51584: ST_TO_ADDR
// hc_gallery =  ;
51585: LD_ADDR_OWVAR 33
51589: PUSH
51590: LD_STRING 
51592: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51593: LD_ADDR_OWVAR 35
51597: PUSH
51598: LD_INT 7
51600: NEG
51601: PPUSH
51602: LD_INT 7
51604: PPUSH
51605: CALL_OW 12
51609: ST_TO_ADDR
// animal := CreateHuman ;
51610: LD_ADDR_VAR 0 12
51614: PUSH
51615: CALL_OW 44
51619: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51620: LD_VAR 0 12
51624: PPUSH
51625: LD_VAR 0 8
51629: PPUSH
51630: LD_INT 0
51632: PPUSH
51633: CALL 53539 0 3
// end ;
51637: GO 51574
51639: POP
51640: POP
// if apemans then
51641: LD_VAR 0 3
51645: IFFALSE 51768
// for i = 1 to apemans do
51647: LD_ADDR_VAR 0 11
51651: PUSH
51652: DOUBLE
51653: LD_INT 1
51655: DEC
51656: ST_TO_ADDR
51657: LD_VAR 0 3
51661: PUSH
51662: FOR_TO
51663: IFFALSE 51766
// begin hc_class = class_apeman ;
51665: LD_ADDR_OWVAR 28
51669: PUSH
51670: LD_INT 12
51672: ST_TO_ADDR
// hc_gallery =  ;
51673: LD_ADDR_OWVAR 33
51677: PUSH
51678: LD_STRING 
51680: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51681: LD_ADDR_OWVAR 35
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PPUSH
51690: LD_INT 2
51692: PPUSH
51693: CALL_OW 12
51697: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51698: LD_ADDR_OWVAR 31
51702: PUSH
51703: LD_INT 1
51705: PPUSH
51706: LD_INT 3
51708: PPUSH
51709: CALL_OW 12
51713: PUSH
51714: LD_INT 1
51716: PPUSH
51717: LD_INT 3
51719: PPUSH
51720: CALL_OW 12
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: ST_TO_ADDR
// animal := CreateHuman ;
51737: LD_ADDR_VAR 0 12
51741: PUSH
51742: CALL_OW 44
51746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51747: LD_VAR 0 12
51751: PPUSH
51752: LD_VAR 0 8
51756: PPUSH
51757: LD_INT 0
51759: PPUSH
51760: CALL 53539 0 3
// end ;
51764: GO 51662
51766: POP
51767: POP
// if enchidnas then
51768: LD_VAR 0 4
51772: IFFALSE 51839
// for i = 1 to enchidnas do
51774: LD_ADDR_VAR 0 11
51778: PUSH
51779: DOUBLE
51780: LD_INT 1
51782: DEC
51783: ST_TO_ADDR
51784: LD_VAR 0 4
51788: PUSH
51789: FOR_TO
51790: IFFALSE 51837
// begin hc_class = 13 ;
51792: LD_ADDR_OWVAR 28
51796: PUSH
51797: LD_INT 13
51799: ST_TO_ADDR
// hc_gallery =  ;
51800: LD_ADDR_OWVAR 33
51804: PUSH
51805: LD_STRING 
51807: ST_TO_ADDR
// animal := CreateHuman ;
51808: LD_ADDR_VAR 0 12
51812: PUSH
51813: CALL_OW 44
51817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51818: LD_VAR 0 12
51822: PPUSH
51823: LD_VAR 0 8
51827: PPUSH
51828: LD_INT 0
51830: PPUSH
51831: CALL 53539 0 3
// end ;
51835: GO 51789
51837: POP
51838: POP
// if fishes then
51839: LD_VAR 0 7
51843: IFFALSE 51910
// for i = 1 to fishes do
51845: LD_ADDR_VAR 0 11
51849: PUSH
51850: DOUBLE
51851: LD_INT 1
51853: DEC
51854: ST_TO_ADDR
51855: LD_VAR 0 7
51859: PUSH
51860: FOR_TO
51861: IFFALSE 51908
// begin hc_class = 20 ;
51863: LD_ADDR_OWVAR 28
51867: PUSH
51868: LD_INT 20
51870: ST_TO_ADDR
// hc_gallery =  ;
51871: LD_ADDR_OWVAR 33
51875: PUSH
51876: LD_STRING 
51878: ST_TO_ADDR
// animal := CreateHuman ;
51879: LD_ADDR_VAR 0 12
51883: PUSH
51884: CALL_OW 44
51888: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51889: LD_VAR 0 12
51893: PPUSH
51894: LD_VAR 0 9
51898: PPUSH
51899: LD_INT 0
51901: PPUSH
51902: CALL 53539 0 3
// end ;
51906: GO 51860
51908: POP
51909: POP
// end ;
51910: LD_VAR 0 10
51914: RET
// export function WantHeal ( sci , unit ) ; begin
51915: LD_INT 0
51917: PPUSH
// if GetTaskList ( sci ) > 0 then
51918: LD_VAR 0 1
51922: PPUSH
51923: CALL_OW 437
51927: PUSH
51928: LD_INT 0
51930: GREATER
51931: IFFALSE 52001
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51933: LD_VAR 0 1
51937: PPUSH
51938: CALL_OW 437
51942: PUSH
51943: LD_INT 1
51945: ARRAY
51946: PUSH
51947: LD_INT 1
51949: ARRAY
51950: PUSH
51951: LD_STRING l
51953: EQUAL
51954: PUSH
51955: LD_VAR 0 1
51959: PPUSH
51960: CALL_OW 437
51964: PUSH
51965: LD_INT 1
51967: ARRAY
51968: PUSH
51969: LD_INT 4
51971: ARRAY
51972: PUSH
51973: LD_VAR 0 2
51977: EQUAL
51978: AND
51979: IFFALSE 51991
// result := true else
51981: LD_ADDR_VAR 0 3
51985: PUSH
51986: LD_INT 1
51988: ST_TO_ADDR
51989: GO 51999
// result := false ;
51991: LD_ADDR_VAR 0 3
51995: PUSH
51996: LD_INT 0
51998: ST_TO_ADDR
// end else
51999: GO 52009
// result := false ;
52001: LD_ADDR_VAR 0 3
52005: PUSH
52006: LD_INT 0
52008: ST_TO_ADDR
// end ;
52009: LD_VAR 0 3
52013: RET
// export function HealTarget ( sci ) ; begin
52014: LD_INT 0
52016: PPUSH
// if not sci then
52017: LD_VAR 0 1
52021: NOT
52022: IFFALSE 52026
// exit ;
52024: GO 52091
// result := 0 ;
52026: LD_ADDR_VAR 0 2
52030: PUSH
52031: LD_INT 0
52033: ST_TO_ADDR
// if GetTaskList ( sci ) then
52034: LD_VAR 0 1
52038: PPUSH
52039: CALL_OW 437
52043: IFFALSE 52091
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52045: LD_VAR 0 1
52049: PPUSH
52050: CALL_OW 437
52054: PUSH
52055: LD_INT 1
52057: ARRAY
52058: PUSH
52059: LD_INT 1
52061: ARRAY
52062: PUSH
52063: LD_STRING l
52065: EQUAL
52066: IFFALSE 52091
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52068: LD_ADDR_VAR 0 2
52072: PUSH
52073: LD_VAR 0 1
52077: PPUSH
52078: CALL_OW 437
52082: PUSH
52083: LD_INT 1
52085: ARRAY
52086: PUSH
52087: LD_INT 4
52089: ARRAY
52090: ST_TO_ADDR
// end ;
52091: LD_VAR 0 2
52095: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52096: LD_INT 0
52098: PPUSH
52099: PPUSH
52100: PPUSH
52101: PPUSH
// if not base_units then
52102: LD_VAR 0 1
52106: NOT
52107: IFFALSE 52111
// exit ;
52109: GO 52198
// result := false ;
52111: LD_ADDR_VAR 0 2
52115: PUSH
52116: LD_INT 0
52118: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52119: LD_ADDR_VAR 0 5
52123: PUSH
52124: LD_VAR 0 1
52128: PPUSH
52129: LD_INT 21
52131: PUSH
52132: LD_INT 3
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PPUSH
52139: CALL_OW 72
52143: ST_TO_ADDR
// if not tmp then
52144: LD_VAR 0 5
52148: NOT
52149: IFFALSE 52153
// exit ;
52151: GO 52198
// for i in tmp do
52153: LD_ADDR_VAR 0 3
52157: PUSH
52158: LD_VAR 0 5
52162: PUSH
52163: FOR_IN
52164: IFFALSE 52196
// begin result := EnemyInRange ( i , 22 ) ;
52166: LD_ADDR_VAR 0 2
52170: PUSH
52171: LD_VAR 0 3
52175: PPUSH
52176: LD_INT 22
52178: PPUSH
52179: CALL 49785 0 2
52183: ST_TO_ADDR
// if result then
52184: LD_VAR 0 2
52188: IFFALSE 52194
// exit ;
52190: POP
52191: POP
52192: GO 52198
// end ;
52194: GO 52163
52196: POP
52197: POP
// end ;
52198: LD_VAR 0 2
52202: RET
// export function FilterByTag ( units , tag ) ; begin
52203: LD_INT 0
52205: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52206: LD_ADDR_VAR 0 3
52210: PUSH
52211: LD_VAR 0 1
52215: PPUSH
52216: LD_INT 120
52218: PUSH
52219: LD_VAR 0 2
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PPUSH
52228: CALL_OW 72
52232: ST_TO_ADDR
// end ;
52233: LD_VAR 0 3
52237: RET
// export function IsDriver ( un ) ; begin
52238: LD_INT 0
52240: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52241: LD_ADDR_VAR 0 2
52245: PUSH
52246: LD_VAR 0 1
52250: PUSH
52251: LD_INT 55
52253: PUSH
52254: EMPTY
52255: LIST
52256: PPUSH
52257: CALL_OW 69
52261: IN
52262: ST_TO_ADDR
// end ;
52263: LD_VAR 0 2
52267: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52268: LD_INT 0
52270: PPUSH
52271: PPUSH
// list := [ ] ;
52272: LD_ADDR_VAR 0 5
52276: PUSH
52277: EMPTY
52278: ST_TO_ADDR
// case d of 0 :
52279: LD_VAR 0 3
52283: PUSH
52284: LD_INT 0
52286: DOUBLE
52287: EQUAL
52288: IFTRUE 52292
52290: GO 52425
52292: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52293: LD_ADDR_VAR 0 5
52297: PUSH
52298: LD_VAR 0 1
52302: PUSH
52303: LD_INT 4
52305: MINUS
52306: PUSH
52307: LD_VAR 0 2
52311: PUSH
52312: LD_INT 4
52314: MINUS
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: PUSH
52324: LD_VAR 0 1
52328: PUSH
52329: LD_INT 3
52331: MINUS
52332: PUSH
52333: LD_VAR 0 2
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: PUSH
52346: LD_VAR 0 1
52350: PUSH
52351: LD_INT 4
52353: PLUS
52354: PUSH
52355: LD_VAR 0 2
52359: PUSH
52360: LD_INT 4
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: PUSH
52368: LD_VAR 0 1
52372: PUSH
52373: LD_INT 3
52375: PLUS
52376: PUSH
52377: LD_VAR 0 2
52381: PUSH
52382: LD_INT 3
52384: PLUS
52385: PUSH
52386: LD_INT 5
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: PUSH
52394: LD_VAR 0 1
52398: PUSH
52399: LD_VAR 0 2
52403: PUSH
52404: LD_INT 4
52406: PLUS
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: LIST
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: ST_TO_ADDR
// end ; 1 :
52423: GO 53123
52425: LD_INT 1
52427: DOUBLE
52428: EQUAL
52429: IFTRUE 52433
52431: GO 52566
52433: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52434: LD_ADDR_VAR 0 5
52438: PUSH
52439: LD_VAR 0 1
52443: PUSH
52444: LD_VAR 0 2
52448: PUSH
52449: LD_INT 4
52451: MINUS
52452: PUSH
52453: LD_INT 3
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: PUSH
52461: LD_VAR 0 1
52465: PUSH
52466: LD_INT 3
52468: MINUS
52469: PUSH
52470: LD_VAR 0 2
52474: PUSH
52475: LD_INT 3
52477: MINUS
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: LIST
52486: PUSH
52487: LD_VAR 0 1
52491: PUSH
52492: LD_INT 4
52494: MINUS
52495: PUSH
52496: LD_VAR 0 2
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: LIST
52508: PUSH
52509: LD_VAR 0 1
52513: PUSH
52514: LD_VAR 0 2
52518: PUSH
52519: LD_INT 3
52521: PLUS
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: PUSH
52531: LD_VAR 0 1
52535: PUSH
52536: LD_INT 4
52538: PLUS
52539: PUSH
52540: LD_VAR 0 2
52544: PUSH
52545: LD_INT 4
52547: PLUS
52548: PUSH
52549: LD_INT 5
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: LIST
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: ST_TO_ADDR
// end ; 2 :
52564: GO 53123
52566: LD_INT 2
52568: DOUBLE
52569: EQUAL
52570: IFTRUE 52574
52572: GO 52703
52574: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52575: LD_ADDR_VAR 0 5
52579: PUSH
52580: LD_VAR 0 1
52584: PUSH
52585: LD_VAR 0 2
52589: PUSH
52590: LD_INT 3
52592: MINUS
52593: PUSH
52594: LD_INT 3
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: LIST
52601: PUSH
52602: LD_VAR 0 1
52606: PUSH
52607: LD_INT 4
52609: PLUS
52610: PUSH
52611: LD_VAR 0 2
52615: PUSH
52616: LD_INT 4
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: PUSH
52624: LD_VAR 0 1
52628: PUSH
52629: LD_VAR 0 2
52633: PUSH
52634: LD_INT 4
52636: PLUS
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: LIST
52645: PUSH
52646: LD_VAR 0 1
52650: PUSH
52651: LD_INT 3
52653: MINUS
52654: PUSH
52655: LD_VAR 0 2
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: PUSH
52668: LD_VAR 0 1
52672: PUSH
52673: LD_INT 4
52675: MINUS
52676: PUSH
52677: LD_VAR 0 2
52681: PUSH
52682: LD_INT 4
52684: MINUS
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: LIST
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// end ; 3 :
52701: GO 53123
52703: LD_INT 3
52705: DOUBLE
52706: EQUAL
52707: IFTRUE 52711
52709: GO 52844
52711: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52712: LD_ADDR_VAR 0 5
52716: PUSH
52717: LD_VAR 0 1
52721: PUSH
52722: LD_INT 3
52724: PLUS
52725: PUSH
52726: LD_VAR 0 2
52730: PUSH
52731: LD_INT 4
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: PUSH
52739: LD_VAR 0 1
52743: PUSH
52744: LD_INT 4
52746: PLUS
52747: PUSH
52748: LD_VAR 0 2
52752: PUSH
52753: LD_INT 4
52755: PLUS
52756: PUSH
52757: LD_INT 5
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: PUSH
52765: LD_VAR 0 1
52769: PUSH
52770: LD_INT 4
52772: MINUS
52773: PUSH
52774: LD_VAR 0 2
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: PUSH
52787: LD_VAR 0 1
52791: PUSH
52792: LD_VAR 0 2
52796: PUSH
52797: LD_INT 4
52799: MINUS
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: PUSH
52809: LD_VAR 0 1
52813: PUSH
52814: LD_INT 3
52816: MINUS
52817: PUSH
52818: LD_VAR 0 2
52822: PUSH
52823: LD_INT 3
52825: MINUS
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: LIST
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: ST_TO_ADDR
// end ; 4 :
52842: GO 53123
52844: LD_INT 4
52846: DOUBLE
52847: EQUAL
52848: IFTRUE 52852
52850: GO 52985
52852: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52853: LD_ADDR_VAR 0 5
52857: PUSH
52858: LD_VAR 0 1
52862: PUSH
52863: LD_VAR 0 2
52867: PUSH
52868: LD_INT 4
52870: PLUS
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: LIST
52879: PUSH
52880: LD_VAR 0 1
52884: PUSH
52885: LD_INT 3
52887: PLUS
52888: PUSH
52889: LD_VAR 0 2
52893: PUSH
52894: LD_INT 3
52896: PLUS
52897: PUSH
52898: LD_INT 5
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: PUSH
52906: LD_VAR 0 1
52910: PUSH
52911: LD_INT 4
52913: PLUS
52914: PUSH
52915: LD_VAR 0 2
52919: PUSH
52920: LD_INT 4
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: LIST
52927: PUSH
52928: LD_VAR 0 1
52932: PUSH
52933: LD_VAR 0 2
52937: PUSH
52938: LD_INT 3
52940: MINUS
52941: PUSH
52942: LD_INT 3
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: PUSH
52950: LD_VAR 0 1
52954: PUSH
52955: LD_INT 4
52957: MINUS
52958: PUSH
52959: LD_VAR 0 2
52963: PUSH
52964: LD_INT 4
52966: MINUS
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: LIST
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: ST_TO_ADDR
// end ; 5 :
52983: GO 53123
52985: LD_INT 5
52987: DOUBLE
52988: EQUAL
52989: IFTRUE 52993
52991: GO 53122
52993: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52994: LD_ADDR_VAR 0 5
52998: PUSH
52999: LD_VAR 0 1
53003: PUSH
53004: LD_INT 4
53006: MINUS
53007: PUSH
53008: LD_VAR 0 2
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: PUSH
53021: LD_VAR 0 1
53025: PUSH
53026: LD_VAR 0 2
53030: PUSH
53031: LD_INT 4
53033: MINUS
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: LIST
53042: PUSH
53043: LD_VAR 0 1
53047: PUSH
53048: LD_INT 4
53050: PLUS
53051: PUSH
53052: LD_VAR 0 2
53056: PUSH
53057: LD_INT 4
53059: PLUS
53060: PUSH
53061: LD_INT 5
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: LIST
53068: PUSH
53069: LD_VAR 0 1
53073: PUSH
53074: LD_INT 3
53076: PLUS
53077: PUSH
53078: LD_VAR 0 2
53082: PUSH
53083: LD_INT 4
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: LIST
53090: PUSH
53091: LD_VAR 0 1
53095: PUSH
53096: LD_VAR 0 2
53100: PUSH
53101: LD_INT 3
53103: PLUS
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: ST_TO_ADDR
// end ; end ;
53120: GO 53123
53122: POP
// result := list ;
53123: LD_ADDR_VAR 0 4
53127: PUSH
53128: LD_VAR 0 5
53132: ST_TO_ADDR
// end ;
53133: LD_VAR 0 4
53137: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53138: LD_INT 0
53140: PPUSH
53141: PPUSH
53142: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53143: LD_VAR 0 1
53147: NOT
53148: PUSH
53149: LD_VAR 0 2
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: LD_INT 3
53162: PUSH
53163: LD_INT 4
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: IN
53172: NOT
53173: OR
53174: IFFALSE 53178
// exit ;
53176: GO 53261
// tmp := [ ] ;
53178: LD_ADDR_VAR 0 5
53182: PUSH
53183: EMPTY
53184: ST_TO_ADDR
// for i in units do
53185: LD_ADDR_VAR 0 4
53189: PUSH
53190: LD_VAR 0 1
53194: PUSH
53195: FOR_IN
53196: IFFALSE 53230
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53198: LD_ADDR_VAR 0 5
53202: PUSH
53203: LD_VAR 0 5
53207: PPUSH
53208: LD_VAR 0 4
53212: PPUSH
53213: LD_VAR 0 2
53217: PPUSH
53218: CALL_OW 259
53222: PPUSH
53223: CALL 54634 0 2
53227: ST_TO_ADDR
53228: GO 53195
53230: POP
53231: POP
// if not tmp then
53232: LD_VAR 0 5
53236: NOT
53237: IFFALSE 53241
// exit ;
53239: GO 53261
// result := SortListByListDesc ( units , tmp ) ;
53241: LD_ADDR_VAR 0 3
53245: PUSH
53246: LD_VAR 0 1
53250: PPUSH
53251: LD_VAR 0 5
53255: PPUSH
53256: CALL_OW 77
53260: ST_TO_ADDR
// end ;
53261: LD_VAR 0 3
53265: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53266: LD_INT 0
53268: PPUSH
53269: PPUSH
53270: PPUSH
// result := false ;
53271: LD_ADDR_VAR 0 3
53275: PUSH
53276: LD_INT 0
53278: ST_TO_ADDR
// if not building then
53279: LD_VAR 0 2
53283: NOT
53284: IFFALSE 53288
// exit ;
53286: GO 53426
// x := GetX ( building ) ;
53288: LD_ADDR_VAR 0 4
53292: PUSH
53293: LD_VAR 0 2
53297: PPUSH
53298: CALL_OW 250
53302: ST_TO_ADDR
// y := GetY ( building ) ;
53303: LD_ADDR_VAR 0 5
53307: PUSH
53308: LD_VAR 0 2
53312: PPUSH
53313: CALL_OW 251
53317: ST_TO_ADDR
// if not x or not y then
53318: LD_VAR 0 4
53322: NOT
53323: PUSH
53324: LD_VAR 0 5
53328: NOT
53329: OR
53330: IFFALSE 53334
// exit ;
53332: GO 53426
// if GetTaskList ( unit ) then
53334: LD_VAR 0 1
53338: PPUSH
53339: CALL_OW 437
53343: IFFALSE 53426
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53345: LD_STRING e
53347: PUSH
53348: LD_VAR 0 1
53352: PPUSH
53353: CALL_OW 437
53357: PUSH
53358: LD_INT 1
53360: ARRAY
53361: PUSH
53362: LD_INT 1
53364: ARRAY
53365: EQUAL
53366: PUSH
53367: LD_VAR 0 4
53371: PUSH
53372: LD_VAR 0 1
53376: PPUSH
53377: CALL_OW 437
53381: PUSH
53382: LD_INT 1
53384: ARRAY
53385: PUSH
53386: LD_INT 2
53388: ARRAY
53389: EQUAL
53390: AND
53391: PUSH
53392: LD_VAR 0 5
53396: PUSH
53397: LD_VAR 0 1
53401: PPUSH
53402: CALL_OW 437
53406: PUSH
53407: LD_INT 1
53409: ARRAY
53410: PUSH
53411: LD_INT 3
53413: ARRAY
53414: EQUAL
53415: AND
53416: IFFALSE 53426
// result := true end ;
53418: LD_ADDR_VAR 0 3
53422: PUSH
53423: LD_INT 1
53425: ST_TO_ADDR
// end ;
53426: LD_VAR 0 3
53430: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53431: LD_INT 0
53433: PPUSH
// result := false ;
53434: LD_ADDR_VAR 0 4
53438: PUSH
53439: LD_INT 0
53441: ST_TO_ADDR
// if GetTaskList ( unit ) then
53442: LD_VAR 0 1
53446: PPUSH
53447: CALL_OW 437
53451: IFFALSE 53534
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53453: LD_STRING M
53455: PUSH
53456: LD_VAR 0 1
53460: PPUSH
53461: CALL_OW 437
53465: PUSH
53466: LD_INT 1
53468: ARRAY
53469: PUSH
53470: LD_INT 1
53472: ARRAY
53473: EQUAL
53474: PUSH
53475: LD_VAR 0 2
53479: PUSH
53480: LD_VAR 0 1
53484: PPUSH
53485: CALL_OW 437
53489: PUSH
53490: LD_INT 1
53492: ARRAY
53493: PUSH
53494: LD_INT 2
53496: ARRAY
53497: EQUAL
53498: AND
53499: PUSH
53500: LD_VAR 0 3
53504: PUSH
53505: LD_VAR 0 1
53509: PPUSH
53510: CALL_OW 437
53514: PUSH
53515: LD_INT 1
53517: ARRAY
53518: PUSH
53519: LD_INT 3
53521: ARRAY
53522: EQUAL
53523: AND
53524: IFFALSE 53534
// result := true ;
53526: LD_ADDR_VAR 0 4
53530: PUSH
53531: LD_INT 1
53533: ST_TO_ADDR
// end ; end ;
53534: LD_VAR 0 4
53538: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53539: LD_INT 0
53541: PPUSH
53542: PPUSH
53543: PPUSH
53544: PPUSH
// if not unit or not area then
53545: LD_VAR 0 1
53549: NOT
53550: PUSH
53551: LD_VAR 0 2
53555: NOT
53556: OR
53557: IFFALSE 53561
// exit ;
53559: GO 53737
// tmp := AreaToList ( area , i ) ;
53561: LD_ADDR_VAR 0 6
53565: PUSH
53566: LD_VAR 0 2
53570: PPUSH
53571: LD_VAR 0 5
53575: PPUSH
53576: CALL_OW 517
53580: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53581: LD_ADDR_VAR 0 5
53585: PUSH
53586: DOUBLE
53587: LD_INT 1
53589: DEC
53590: ST_TO_ADDR
53591: LD_VAR 0 6
53595: PUSH
53596: LD_INT 1
53598: ARRAY
53599: PUSH
53600: FOR_TO
53601: IFFALSE 53735
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53603: LD_ADDR_VAR 0 7
53607: PUSH
53608: LD_VAR 0 6
53612: PUSH
53613: LD_INT 1
53615: ARRAY
53616: PUSH
53617: LD_VAR 0 5
53621: ARRAY
53622: PUSH
53623: LD_VAR 0 6
53627: PUSH
53628: LD_INT 2
53630: ARRAY
53631: PUSH
53632: LD_VAR 0 5
53636: ARRAY
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53642: LD_INT 92
53644: PUSH
53645: LD_VAR 0 7
53649: PUSH
53650: LD_INT 1
53652: ARRAY
53653: PUSH
53654: LD_VAR 0 7
53658: PUSH
53659: LD_INT 2
53661: ARRAY
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: PPUSH
53672: CALL_OW 69
53676: PUSH
53677: LD_INT 0
53679: EQUAL
53680: IFFALSE 53733
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53682: LD_VAR 0 1
53686: PPUSH
53687: LD_VAR 0 7
53691: PUSH
53692: LD_INT 1
53694: ARRAY
53695: PPUSH
53696: LD_VAR 0 7
53700: PUSH
53701: LD_INT 2
53703: ARRAY
53704: PPUSH
53705: LD_VAR 0 3
53709: PPUSH
53710: CALL_OW 48
// result := IsPlaced ( unit ) ;
53714: LD_ADDR_VAR 0 4
53718: PUSH
53719: LD_VAR 0 1
53723: PPUSH
53724: CALL_OW 305
53728: ST_TO_ADDR
// exit ;
53729: POP
53730: POP
53731: GO 53737
// end ; end ;
53733: GO 53600
53735: POP
53736: POP
// end ;
53737: LD_VAR 0 4
53741: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53742: LD_INT 0
53744: PPUSH
53745: PPUSH
53746: PPUSH
// if not side or side > 8 then
53747: LD_VAR 0 1
53751: NOT
53752: PUSH
53753: LD_VAR 0 1
53757: PUSH
53758: LD_INT 8
53760: GREATER
53761: OR
53762: IFFALSE 53766
// exit ;
53764: GO 53953
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53766: LD_ADDR_VAR 0 4
53770: PUSH
53771: LD_INT 22
53773: PUSH
53774: LD_VAR 0 1
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 21
53785: PUSH
53786: LD_INT 3
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PPUSH
53797: CALL_OW 69
53801: ST_TO_ADDR
// if not tmp then
53802: LD_VAR 0 4
53806: NOT
53807: IFFALSE 53811
// exit ;
53809: GO 53953
// enable_addtolog := true ;
53811: LD_ADDR_OWVAR 81
53815: PUSH
53816: LD_INT 1
53818: ST_TO_ADDR
// AddToLog ( [ ) ;
53819: LD_STRING [
53821: PPUSH
53822: CALL_OW 561
// for i in tmp do
53826: LD_ADDR_VAR 0 3
53830: PUSH
53831: LD_VAR 0 4
53835: PUSH
53836: FOR_IN
53837: IFFALSE 53944
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53839: LD_STRING [
53841: PUSH
53842: LD_VAR 0 3
53846: PPUSH
53847: CALL_OW 266
53851: STR
53852: PUSH
53853: LD_STRING , 
53855: STR
53856: PUSH
53857: LD_VAR 0 3
53861: PPUSH
53862: CALL_OW 250
53866: STR
53867: PUSH
53868: LD_STRING , 
53870: STR
53871: PUSH
53872: LD_VAR 0 3
53876: PPUSH
53877: CALL_OW 251
53881: STR
53882: PUSH
53883: LD_STRING , 
53885: STR
53886: PUSH
53887: LD_VAR 0 3
53891: PPUSH
53892: CALL_OW 254
53896: STR
53897: PUSH
53898: LD_STRING , 
53900: STR
53901: PUSH
53902: LD_VAR 0 3
53906: PPUSH
53907: LD_INT 1
53909: PPUSH
53910: CALL_OW 268
53914: STR
53915: PUSH
53916: LD_STRING , 
53918: STR
53919: PUSH
53920: LD_VAR 0 3
53924: PPUSH
53925: LD_INT 2
53927: PPUSH
53928: CALL_OW 268
53932: STR
53933: PUSH
53934: LD_STRING ],
53936: STR
53937: PPUSH
53938: CALL_OW 561
// end ;
53942: GO 53836
53944: POP
53945: POP
// AddToLog ( ]; ) ;
53946: LD_STRING ];
53948: PPUSH
53949: CALL_OW 561
// end ;
53953: LD_VAR 0 2
53957: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53958: LD_INT 0
53960: PPUSH
53961: PPUSH
53962: PPUSH
53963: PPUSH
53964: PPUSH
// if not area or not rate or not max then
53965: LD_VAR 0 1
53969: NOT
53970: PUSH
53971: LD_VAR 0 2
53975: NOT
53976: OR
53977: PUSH
53978: LD_VAR 0 4
53982: NOT
53983: OR
53984: IFFALSE 53988
// exit ;
53986: GO 54177
// while 1 do
53988: LD_INT 1
53990: IFFALSE 54177
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53992: LD_ADDR_VAR 0 9
53996: PUSH
53997: LD_VAR 0 1
54001: PPUSH
54002: LD_INT 1
54004: PPUSH
54005: CALL_OW 287
54009: PUSH
54010: LD_INT 10
54012: MUL
54013: ST_TO_ADDR
// r := rate / 10 ;
54014: LD_ADDR_VAR 0 7
54018: PUSH
54019: LD_VAR 0 2
54023: PUSH
54024: LD_INT 10
54026: DIVREAL
54027: ST_TO_ADDR
// time := 1 1$00 ;
54028: LD_ADDR_VAR 0 8
54032: PUSH
54033: LD_INT 2100
54035: ST_TO_ADDR
// if amount < min then
54036: LD_VAR 0 9
54040: PUSH
54041: LD_VAR 0 3
54045: LESS
54046: IFFALSE 54064
// r := r * 2 else
54048: LD_ADDR_VAR 0 7
54052: PUSH
54053: LD_VAR 0 7
54057: PUSH
54058: LD_INT 2
54060: MUL
54061: ST_TO_ADDR
54062: GO 54090
// if amount > max then
54064: LD_VAR 0 9
54068: PUSH
54069: LD_VAR 0 4
54073: GREATER
54074: IFFALSE 54090
// r := r / 2 ;
54076: LD_ADDR_VAR 0 7
54080: PUSH
54081: LD_VAR 0 7
54085: PUSH
54086: LD_INT 2
54088: DIVREAL
54089: ST_TO_ADDR
// time := time / r ;
54090: LD_ADDR_VAR 0 8
54094: PUSH
54095: LD_VAR 0 8
54099: PUSH
54100: LD_VAR 0 7
54104: DIVREAL
54105: ST_TO_ADDR
// if time < 0 then
54106: LD_VAR 0 8
54110: PUSH
54111: LD_INT 0
54113: LESS
54114: IFFALSE 54131
// time := time * - 1 ;
54116: LD_ADDR_VAR 0 8
54120: PUSH
54121: LD_VAR 0 8
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: MUL
54130: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54131: LD_VAR 0 8
54135: PUSH
54136: LD_INT 35
54138: PPUSH
54139: LD_INT 875
54141: PPUSH
54142: CALL_OW 12
54146: PLUS
54147: PPUSH
54148: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54152: LD_INT 1
54154: PPUSH
54155: LD_INT 5
54157: PPUSH
54158: CALL_OW 12
54162: PPUSH
54163: LD_VAR 0 1
54167: PPUSH
54168: LD_INT 1
54170: PPUSH
54171: CALL_OW 55
// end ;
54175: GO 53988
// end ;
54177: LD_VAR 0 5
54181: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54182: LD_INT 0
54184: PPUSH
54185: PPUSH
54186: PPUSH
54187: PPUSH
54188: PPUSH
54189: PPUSH
54190: PPUSH
54191: PPUSH
// if not turrets or not factories then
54192: LD_VAR 0 1
54196: NOT
54197: PUSH
54198: LD_VAR 0 2
54202: NOT
54203: OR
54204: IFFALSE 54208
// exit ;
54206: GO 54515
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54208: LD_ADDR_VAR 0 10
54212: PUSH
54213: LD_INT 5
54215: PUSH
54216: LD_INT 6
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 4
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 3
54235: PUSH
54236: LD_INT 5
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 24
54250: PUSH
54251: LD_INT 25
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 23
54260: PUSH
54261: LD_INT 27
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 42
54274: PUSH
54275: LD_INT 43
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 44
54284: PUSH
54285: LD_INT 46
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 45
54294: PUSH
54295: LD_INT 47
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: LIST
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: LIST
54311: ST_TO_ADDR
// result := [ ] ;
54312: LD_ADDR_VAR 0 3
54316: PUSH
54317: EMPTY
54318: ST_TO_ADDR
// for i in turrets do
54319: LD_ADDR_VAR 0 4
54323: PUSH
54324: LD_VAR 0 1
54328: PUSH
54329: FOR_IN
54330: IFFALSE 54513
// begin nat := GetNation ( i ) ;
54332: LD_ADDR_VAR 0 7
54336: PUSH
54337: LD_VAR 0 4
54341: PPUSH
54342: CALL_OW 248
54346: ST_TO_ADDR
// weapon := 0 ;
54347: LD_ADDR_VAR 0 8
54351: PUSH
54352: LD_INT 0
54354: ST_TO_ADDR
// if not nat then
54355: LD_VAR 0 7
54359: NOT
54360: IFFALSE 54364
// continue ;
54362: GO 54329
// for j in list [ nat ] do
54364: LD_ADDR_VAR 0 5
54368: PUSH
54369: LD_VAR 0 10
54373: PUSH
54374: LD_VAR 0 7
54378: ARRAY
54379: PUSH
54380: FOR_IN
54381: IFFALSE 54422
// if GetBWeapon ( i ) = j [ 1 ] then
54383: LD_VAR 0 4
54387: PPUSH
54388: CALL_OW 269
54392: PUSH
54393: LD_VAR 0 5
54397: PUSH
54398: LD_INT 1
54400: ARRAY
54401: EQUAL
54402: IFFALSE 54420
// begin weapon := j [ 2 ] ;
54404: LD_ADDR_VAR 0 8
54408: PUSH
54409: LD_VAR 0 5
54413: PUSH
54414: LD_INT 2
54416: ARRAY
54417: ST_TO_ADDR
// break ;
54418: GO 54422
// end ;
54420: GO 54380
54422: POP
54423: POP
// if not weapon then
54424: LD_VAR 0 8
54428: NOT
54429: IFFALSE 54433
// continue ;
54431: GO 54329
// for k in factories do
54433: LD_ADDR_VAR 0 6
54437: PUSH
54438: LD_VAR 0 2
54442: PUSH
54443: FOR_IN
54444: IFFALSE 54509
// begin weapons := AvailableWeaponList ( k ) ;
54446: LD_ADDR_VAR 0 9
54450: PUSH
54451: LD_VAR 0 6
54455: PPUSH
54456: CALL_OW 478
54460: ST_TO_ADDR
// if not weapons then
54461: LD_VAR 0 9
54465: NOT
54466: IFFALSE 54470
// continue ;
54468: GO 54443
// if weapon in weapons then
54470: LD_VAR 0 8
54474: PUSH
54475: LD_VAR 0 9
54479: IN
54480: IFFALSE 54507
// begin result := [ i , weapon ] ;
54482: LD_ADDR_VAR 0 3
54486: PUSH
54487: LD_VAR 0 4
54491: PUSH
54492: LD_VAR 0 8
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: ST_TO_ADDR
// exit ;
54501: POP
54502: POP
54503: POP
54504: POP
54505: GO 54515
// end ; end ;
54507: GO 54443
54509: POP
54510: POP
// end ;
54511: GO 54329
54513: POP
54514: POP
// end ;
54515: LD_VAR 0 3
54519: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54520: LD_INT 0
54522: PPUSH
// if not side or side > 8 then
54523: LD_VAR 0 3
54527: NOT
54528: PUSH
54529: LD_VAR 0 3
54533: PUSH
54534: LD_INT 8
54536: GREATER
54537: OR
54538: IFFALSE 54542
// exit ;
54540: GO 54601
// if not range then
54542: LD_VAR 0 4
54546: NOT
54547: IFFALSE 54558
// range := - 12 ;
54549: LD_ADDR_VAR 0 4
54553: PUSH
54554: LD_INT 12
54556: NEG
54557: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54558: LD_VAR 0 1
54562: PPUSH
54563: LD_VAR 0 2
54567: PPUSH
54568: LD_VAR 0 3
54572: PPUSH
54573: LD_VAR 0 4
54577: PPUSH
54578: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54582: LD_VAR 0 1
54586: PPUSH
54587: LD_VAR 0 2
54591: PPUSH
54592: LD_VAR 0 3
54596: PPUSH
54597: CALL_OW 331
// end ;
54601: LD_VAR 0 5
54605: RET
// export function Video ( mode ) ; begin
54606: LD_INT 0
54608: PPUSH
// ingame_video = mode ;
54609: LD_ADDR_OWVAR 52
54613: PUSH
54614: LD_VAR 0 1
54618: ST_TO_ADDR
// interface_hidden = mode ;
54619: LD_ADDR_OWVAR 54
54623: PUSH
54624: LD_VAR 0 1
54628: ST_TO_ADDR
// end ;
54629: LD_VAR 0 2
54633: RET
// export function Join ( array , element ) ; begin
54634: LD_INT 0
54636: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54637: LD_ADDR_VAR 0 3
54641: PUSH
54642: LD_VAR 0 1
54646: PPUSH
54647: LD_VAR 0 1
54651: PUSH
54652: LD_INT 1
54654: PLUS
54655: PPUSH
54656: LD_VAR 0 2
54660: PPUSH
54661: CALL_OW 1
54665: ST_TO_ADDR
// end ;
54666: LD_VAR 0 3
54670: RET
// export function JoinUnion ( array , element ) ; begin
54671: LD_INT 0
54673: PPUSH
// result := array union element ;
54674: LD_ADDR_VAR 0 3
54678: PUSH
54679: LD_VAR 0 1
54683: PUSH
54684: LD_VAR 0 2
54688: UNION
54689: ST_TO_ADDR
// end ;
54690: LD_VAR 0 3
54694: RET
// export function GetBehemoths ( side ) ; begin
54695: LD_INT 0
54697: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54698: LD_ADDR_VAR 0 2
54702: PUSH
54703: LD_INT 22
54705: PUSH
54706: LD_VAR 0 1
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 31
54717: PUSH
54718: LD_INT 25
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PPUSH
54729: CALL_OW 69
54733: ST_TO_ADDR
// end ;
54734: LD_VAR 0 2
54738: RET
// export function Shuffle ( array ) ; var i , index ; begin
54739: LD_INT 0
54741: PPUSH
54742: PPUSH
54743: PPUSH
// result := [ ] ;
54744: LD_ADDR_VAR 0 2
54748: PUSH
54749: EMPTY
54750: ST_TO_ADDR
// if not array then
54751: LD_VAR 0 1
54755: NOT
54756: IFFALSE 54760
// exit ;
54758: GO 54859
// Randomize ;
54760: CALL_OW 10
// for i = array downto 1 do
54764: LD_ADDR_VAR 0 3
54768: PUSH
54769: DOUBLE
54770: LD_VAR 0 1
54774: INC
54775: ST_TO_ADDR
54776: LD_INT 1
54778: PUSH
54779: FOR_DOWNTO
54780: IFFALSE 54857
// begin index := rand ( 1 , array ) ;
54782: LD_ADDR_VAR 0 4
54786: PUSH
54787: LD_INT 1
54789: PPUSH
54790: LD_VAR 0 1
54794: PPUSH
54795: CALL_OW 12
54799: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54800: LD_ADDR_VAR 0 2
54804: PUSH
54805: LD_VAR 0 2
54809: PPUSH
54810: LD_VAR 0 2
54814: PUSH
54815: LD_INT 1
54817: PLUS
54818: PPUSH
54819: LD_VAR 0 1
54823: PUSH
54824: LD_VAR 0 4
54828: ARRAY
54829: PPUSH
54830: CALL_OW 2
54834: ST_TO_ADDR
// array := Delete ( array , index ) ;
54835: LD_ADDR_VAR 0 1
54839: PUSH
54840: LD_VAR 0 1
54844: PPUSH
54845: LD_VAR 0 4
54849: PPUSH
54850: CALL_OW 3
54854: ST_TO_ADDR
// end ;
54855: GO 54779
54857: POP
54858: POP
// end ;
54859: LD_VAR 0 2
54863: RET
// export function GetBaseMaterials ( base ) ; begin
54864: LD_INT 0
54866: PPUSH
// result := [ 0 , 0 , 0 ] ;
54867: LD_ADDR_VAR 0 2
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: LIST
54885: ST_TO_ADDR
// if not base then
54886: LD_VAR 0 1
54890: NOT
54891: IFFALSE 54895
// exit ;
54893: GO 54944
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54895: LD_ADDR_VAR 0 2
54899: PUSH
54900: LD_VAR 0 1
54904: PPUSH
54905: LD_INT 1
54907: PPUSH
54908: CALL_OW 275
54912: PUSH
54913: LD_VAR 0 1
54917: PPUSH
54918: LD_INT 2
54920: PPUSH
54921: CALL_OW 275
54925: PUSH
54926: LD_VAR 0 1
54930: PPUSH
54931: LD_INT 3
54933: PPUSH
54934: CALL_OW 275
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: LIST
54943: ST_TO_ADDR
// end ;
54944: LD_VAR 0 2
54948: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54949: LD_INT 0
54951: PPUSH
54952: PPUSH
// result := array ;
54953: LD_ADDR_VAR 0 3
54957: PUSH
54958: LD_VAR 0 1
54962: ST_TO_ADDR
// if size >= result then
54963: LD_VAR 0 2
54967: PUSH
54968: LD_VAR 0 3
54972: GREATEREQUAL
54973: IFFALSE 54977
// exit ;
54975: GO 55027
// if size then
54977: LD_VAR 0 2
54981: IFFALSE 55027
// for i := array downto size do
54983: LD_ADDR_VAR 0 4
54987: PUSH
54988: DOUBLE
54989: LD_VAR 0 1
54993: INC
54994: ST_TO_ADDR
54995: LD_VAR 0 2
54999: PUSH
55000: FOR_DOWNTO
55001: IFFALSE 55025
// result := Delete ( result , result ) ;
55003: LD_ADDR_VAR 0 3
55007: PUSH
55008: LD_VAR 0 3
55012: PPUSH
55013: LD_VAR 0 3
55017: PPUSH
55018: CALL_OW 3
55022: ST_TO_ADDR
55023: GO 55000
55025: POP
55026: POP
// end ;
55027: LD_VAR 0 3
55031: RET
// export function ComExit ( unit ) ; var tmp ; begin
55032: LD_INT 0
55034: PPUSH
55035: PPUSH
// if not IsInUnit ( unit ) then
55036: LD_VAR 0 1
55040: PPUSH
55041: CALL_OW 310
55045: NOT
55046: IFFALSE 55050
// exit ;
55048: GO 55110
// tmp := IsInUnit ( unit ) ;
55050: LD_ADDR_VAR 0 3
55054: PUSH
55055: LD_VAR 0 1
55059: PPUSH
55060: CALL_OW 310
55064: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55065: LD_VAR 0 3
55069: PPUSH
55070: CALL_OW 247
55074: PUSH
55075: LD_INT 2
55077: EQUAL
55078: IFFALSE 55091
// ComExitVehicle ( unit ) else
55080: LD_VAR 0 1
55084: PPUSH
55085: CALL_OW 121
55089: GO 55100
// ComExitBuilding ( unit ) ;
55091: LD_VAR 0 1
55095: PPUSH
55096: CALL_OW 122
// result := tmp ;
55100: LD_ADDR_VAR 0 2
55104: PUSH
55105: LD_VAR 0 3
55109: ST_TO_ADDR
// end ;
55110: LD_VAR 0 2
55114: RET
// export function ComExitAll ( units ) ; var i ; begin
55115: LD_INT 0
55117: PPUSH
55118: PPUSH
// if not units then
55119: LD_VAR 0 1
55123: NOT
55124: IFFALSE 55128
// exit ;
55126: GO 55154
// for i in units do
55128: LD_ADDR_VAR 0 3
55132: PUSH
55133: LD_VAR 0 1
55137: PUSH
55138: FOR_IN
55139: IFFALSE 55152
// ComExit ( i ) ;
55141: LD_VAR 0 3
55145: PPUSH
55146: CALL 55032 0 1
55150: GO 55138
55152: POP
55153: POP
// end ;
55154: LD_VAR 0 2
55158: RET
// export function ResetHc ; begin
55159: LD_INT 0
55161: PPUSH
// InitHc ;
55162: CALL_OW 19
// hc_importance := 0 ;
55166: LD_ADDR_OWVAR 32
55170: PUSH
55171: LD_INT 0
55173: ST_TO_ADDR
// end ;
55174: LD_VAR 0 1
55178: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55179: LD_INT 0
55181: PPUSH
55182: PPUSH
55183: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55184: LD_ADDR_VAR 0 6
55188: PUSH
55189: LD_VAR 0 1
55193: PUSH
55194: LD_VAR 0 3
55198: PLUS
55199: PUSH
55200: LD_INT 2
55202: DIV
55203: ST_TO_ADDR
// if _x < 0 then
55204: LD_VAR 0 6
55208: PUSH
55209: LD_INT 0
55211: LESS
55212: IFFALSE 55229
// _x := _x * - 1 ;
55214: LD_ADDR_VAR 0 6
55218: PUSH
55219: LD_VAR 0 6
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: MUL
55228: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55229: LD_ADDR_VAR 0 7
55233: PUSH
55234: LD_VAR 0 2
55238: PUSH
55239: LD_VAR 0 4
55243: PLUS
55244: PUSH
55245: LD_INT 2
55247: DIV
55248: ST_TO_ADDR
// if _y < 0 then
55249: LD_VAR 0 7
55253: PUSH
55254: LD_INT 0
55256: LESS
55257: IFFALSE 55274
// _y := _y * - 1 ;
55259: LD_ADDR_VAR 0 7
55263: PUSH
55264: LD_VAR 0 7
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: MUL
55273: ST_TO_ADDR
// result := [ _x , _y ] ;
55274: LD_ADDR_VAR 0 5
55278: PUSH
55279: LD_VAR 0 6
55283: PUSH
55284: LD_VAR 0 7
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: ST_TO_ADDR
// end ;
55293: LD_VAR 0 5
55297: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55298: LD_INT 0
55300: PPUSH
55301: PPUSH
55302: PPUSH
55303: PPUSH
// task := GetTaskList ( unit ) ;
55304: LD_ADDR_VAR 0 7
55308: PUSH
55309: LD_VAR 0 1
55313: PPUSH
55314: CALL_OW 437
55318: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55319: LD_VAR 0 7
55323: NOT
55324: PUSH
55325: LD_VAR 0 1
55329: PPUSH
55330: LD_VAR 0 2
55334: PPUSH
55335: CALL_OW 308
55339: NOT
55340: AND
55341: IFFALSE 55345
// exit ;
55343: GO 55463
// if IsInArea ( unit , area ) then
55345: LD_VAR 0 1
55349: PPUSH
55350: LD_VAR 0 2
55354: PPUSH
55355: CALL_OW 308
55359: IFFALSE 55377
// begin ComMoveToArea ( unit , goAway ) ;
55361: LD_VAR 0 1
55365: PPUSH
55366: LD_VAR 0 3
55370: PPUSH
55371: CALL_OW 113
// exit ;
55375: GO 55463
// end ; if task [ 1 ] [ 1 ] <> M then
55377: LD_VAR 0 7
55381: PUSH
55382: LD_INT 1
55384: ARRAY
55385: PUSH
55386: LD_INT 1
55388: ARRAY
55389: PUSH
55390: LD_STRING M
55392: NONEQUAL
55393: IFFALSE 55397
// exit ;
55395: GO 55463
// x := task [ 1 ] [ 2 ] ;
55397: LD_ADDR_VAR 0 5
55401: PUSH
55402: LD_VAR 0 7
55406: PUSH
55407: LD_INT 1
55409: ARRAY
55410: PUSH
55411: LD_INT 2
55413: ARRAY
55414: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55415: LD_ADDR_VAR 0 6
55419: PUSH
55420: LD_VAR 0 7
55424: PUSH
55425: LD_INT 1
55427: ARRAY
55428: PUSH
55429: LD_INT 3
55431: ARRAY
55432: ST_TO_ADDR
// if InArea ( x , y , area ) then
55433: LD_VAR 0 5
55437: PPUSH
55438: LD_VAR 0 6
55442: PPUSH
55443: LD_VAR 0 2
55447: PPUSH
55448: CALL_OW 309
55452: IFFALSE 55463
// ComStop ( unit ) ;
55454: LD_VAR 0 1
55458: PPUSH
55459: CALL_OW 141
// end ;
55463: LD_VAR 0 4
55467: RET
// export function Abs ( value ) ; begin
55468: LD_INT 0
55470: PPUSH
// result := value ;
55471: LD_ADDR_VAR 0 2
55475: PUSH
55476: LD_VAR 0 1
55480: ST_TO_ADDR
// if value < 0 then
55481: LD_VAR 0 1
55485: PUSH
55486: LD_INT 0
55488: LESS
55489: IFFALSE 55506
// result := value * - 1 ;
55491: LD_ADDR_VAR 0 2
55495: PUSH
55496: LD_VAR 0 1
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: MUL
55505: ST_TO_ADDR
// end ;
55506: LD_VAR 0 2
55510: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55511: LD_INT 0
55513: PPUSH
55514: PPUSH
55515: PPUSH
55516: PPUSH
55517: PPUSH
55518: PPUSH
55519: PPUSH
55520: PPUSH
// if not unit or not building then
55521: LD_VAR 0 1
55525: NOT
55526: PUSH
55527: LD_VAR 0 2
55531: NOT
55532: OR
55533: IFFALSE 55537
// exit ;
55535: GO 55763
// x := GetX ( building ) ;
55537: LD_ADDR_VAR 0 4
55541: PUSH
55542: LD_VAR 0 2
55546: PPUSH
55547: CALL_OW 250
55551: ST_TO_ADDR
// y := GetY ( building ) ;
55552: LD_ADDR_VAR 0 6
55556: PUSH
55557: LD_VAR 0 2
55561: PPUSH
55562: CALL_OW 251
55566: ST_TO_ADDR
// d := GetDir ( building ) ;
55567: LD_ADDR_VAR 0 8
55571: PUSH
55572: LD_VAR 0 2
55576: PPUSH
55577: CALL_OW 254
55581: ST_TO_ADDR
// r := 4 ;
55582: LD_ADDR_VAR 0 9
55586: PUSH
55587: LD_INT 4
55589: ST_TO_ADDR
// for i := 1 to 5 do
55590: LD_ADDR_VAR 0 10
55594: PUSH
55595: DOUBLE
55596: LD_INT 1
55598: DEC
55599: ST_TO_ADDR
55600: LD_INT 5
55602: PUSH
55603: FOR_TO
55604: IFFALSE 55761
// begin _x := ShiftX ( x , d , r + i ) ;
55606: LD_ADDR_VAR 0 5
55610: PUSH
55611: LD_VAR 0 4
55615: PPUSH
55616: LD_VAR 0 8
55620: PPUSH
55621: LD_VAR 0 9
55625: PUSH
55626: LD_VAR 0 10
55630: PLUS
55631: PPUSH
55632: CALL_OW 272
55636: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55637: LD_ADDR_VAR 0 7
55641: PUSH
55642: LD_VAR 0 6
55646: PPUSH
55647: LD_VAR 0 8
55651: PPUSH
55652: LD_VAR 0 9
55656: PUSH
55657: LD_VAR 0 10
55661: PLUS
55662: PPUSH
55663: CALL_OW 273
55667: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55668: LD_VAR 0 5
55672: PPUSH
55673: LD_VAR 0 7
55677: PPUSH
55678: CALL_OW 488
55682: PUSH
55683: LD_VAR 0 5
55687: PPUSH
55688: LD_VAR 0 7
55692: PPUSH
55693: CALL_OW 428
55697: PPUSH
55698: CALL_OW 247
55702: PUSH
55703: LD_INT 3
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: IN
55713: NOT
55714: AND
55715: IFFALSE 55759
// begin ComMoveXY ( unit , _x , _y ) ;
55717: LD_VAR 0 1
55721: PPUSH
55722: LD_VAR 0 5
55726: PPUSH
55727: LD_VAR 0 7
55731: PPUSH
55732: CALL_OW 111
// result := [ _x , _y ] ;
55736: LD_ADDR_VAR 0 3
55740: PUSH
55741: LD_VAR 0 5
55745: PUSH
55746: LD_VAR 0 7
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// exit ;
55755: POP
55756: POP
55757: GO 55763
// end ; end ;
55759: GO 55603
55761: POP
55762: POP
// end ;
55763: LD_VAR 0 3
55767: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55768: LD_INT 0
55770: PPUSH
55771: PPUSH
55772: PPUSH
// result := 0 ;
55773: LD_ADDR_VAR 0 3
55777: PUSH
55778: LD_INT 0
55780: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55781: LD_VAR 0 1
55785: PUSH
55786: LD_INT 0
55788: LESS
55789: PUSH
55790: LD_VAR 0 1
55794: PUSH
55795: LD_INT 8
55797: GREATER
55798: OR
55799: PUSH
55800: LD_VAR 0 2
55804: PUSH
55805: LD_INT 0
55807: LESS
55808: OR
55809: PUSH
55810: LD_VAR 0 2
55814: PUSH
55815: LD_INT 8
55817: GREATER
55818: OR
55819: IFFALSE 55823
// exit ;
55821: GO 55898
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55823: LD_ADDR_VAR 0 4
55827: PUSH
55828: LD_INT 22
55830: PUSH
55831: LD_VAR 0 2
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PPUSH
55840: CALL_OW 69
55844: PUSH
55845: FOR_IN
55846: IFFALSE 55896
// begin un := UnitShoot ( i ) ;
55848: LD_ADDR_VAR 0 5
55852: PUSH
55853: LD_VAR 0 4
55857: PPUSH
55858: CALL_OW 504
55862: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55863: LD_VAR 0 5
55867: PPUSH
55868: CALL_OW 255
55872: PUSH
55873: LD_VAR 0 1
55877: EQUAL
55878: IFFALSE 55894
// begin result := un ;
55880: LD_ADDR_VAR 0 3
55884: PUSH
55885: LD_VAR 0 5
55889: ST_TO_ADDR
// exit ;
55890: POP
55891: POP
55892: GO 55898
// end ; end ;
55894: GO 55845
55896: POP
55897: POP
// end ;
55898: LD_VAR 0 3
55902: RET
// export function GetCargoBay ( units ) ; begin
55903: LD_INT 0
55905: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55906: LD_ADDR_VAR 0 2
55910: PUSH
55911: LD_VAR 0 1
55915: PPUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 34
55921: PUSH
55922: LD_INT 12
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 34
55931: PUSH
55932: LD_INT 51
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 34
55941: PUSH
55942: LD_INT 32
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 34
55951: PUSH
55952: LD_INT 89
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: PPUSH
55966: CALL_OW 72
55970: ST_TO_ADDR
// end ;
55971: LD_VAR 0 2
55975: RET
// export function Negate ( value ) ; begin
55976: LD_INT 0
55978: PPUSH
// result := not value ;
55979: LD_ADDR_VAR 0 2
55983: PUSH
55984: LD_VAR 0 1
55988: NOT
55989: ST_TO_ADDR
// end ;
55990: LD_VAR 0 2
55994: RET
// export function Inc ( value ) ; begin
55995: LD_INT 0
55997: PPUSH
// result := value + 1 ;
55998: LD_ADDR_VAR 0 2
56002: PUSH
56003: LD_VAR 0 1
56007: PUSH
56008: LD_INT 1
56010: PLUS
56011: ST_TO_ADDR
// end ;
56012: LD_VAR 0 2
56016: RET
// export function Dec ( value ) ; begin
56017: LD_INT 0
56019: PPUSH
// result := value - 1 ;
56020: LD_ADDR_VAR 0 2
56024: PUSH
56025: LD_VAR 0 1
56029: PUSH
56030: LD_INT 1
56032: MINUS
56033: ST_TO_ADDR
// end ;
56034: LD_VAR 0 2
56038: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56039: LD_INT 0
56041: PPUSH
56042: PPUSH
56043: PPUSH
56044: PPUSH
56045: PPUSH
56046: PPUSH
56047: PPUSH
56048: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56049: LD_VAR 0 1
56053: PPUSH
56054: LD_VAR 0 2
56058: PPUSH
56059: CALL_OW 488
56063: NOT
56064: PUSH
56065: LD_VAR 0 3
56069: PPUSH
56070: LD_VAR 0 4
56074: PPUSH
56075: CALL_OW 488
56079: NOT
56080: OR
56081: IFFALSE 56094
// begin result := - 1 ;
56083: LD_ADDR_VAR 0 5
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: ST_TO_ADDR
// exit ;
56092: GO 56329
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56094: LD_ADDR_VAR 0 12
56098: PUSH
56099: LD_VAR 0 1
56103: PPUSH
56104: LD_VAR 0 2
56108: PPUSH
56109: LD_VAR 0 3
56113: PPUSH
56114: LD_VAR 0 4
56118: PPUSH
56119: CALL 55179 0 4
56123: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56124: LD_ADDR_VAR 0 11
56128: PUSH
56129: LD_VAR 0 1
56133: PPUSH
56134: LD_VAR 0 2
56138: PPUSH
56139: LD_VAR 0 12
56143: PUSH
56144: LD_INT 1
56146: ARRAY
56147: PPUSH
56148: LD_VAR 0 12
56152: PUSH
56153: LD_INT 2
56155: ARRAY
56156: PPUSH
56157: CALL_OW 298
56161: ST_TO_ADDR
// distance := 9999 ;
56162: LD_ADDR_VAR 0 10
56166: PUSH
56167: LD_INT 9999
56169: ST_TO_ADDR
// for i := 0 to 5 do
56170: LD_ADDR_VAR 0 6
56174: PUSH
56175: DOUBLE
56176: LD_INT 0
56178: DEC
56179: ST_TO_ADDR
56180: LD_INT 5
56182: PUSH
56183: FOR_TO
56184: IFFALSE 56327
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56186: LD_ADDR_VAR 0 7
56190: PUSH
56191: LD_VAR 0 1
56195: PPUSH
56196: LD_VAR 0 6
56200: PPUSH
56201: LD_VAR 0 11
56205: PPUSH
56206: CALL_OW 272
56210: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56211: LD_ADDR_VAR 0 8
56215: PUSH
56216: LD_VAR 0 2
56220: PPUSH
56221: LD_VAR 0 6
56225: PPUSH
56226: LD_VAR 0 11
56230: PPUSH
56231: CALL_OW 273
56235: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56236: LD_VAR 0 7
56240: PPUSH
56241: LD_VAR 0 8
56245: PPUSH
56246: CALL_OW 488
56250: NOT
56251: IFFALSE 56255
// continue ;
56253: GO 56183
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56255: LD_ADDR_VAR 0 9
56259: PUSH
56260: LD_VAR 0 12
56264: PUSH
56265: LD_INT 1
56267: ARRAY
56268: PPUSH
56269: LD_VAR 0 12
56273: PUSH
56274: LD_INT 2
56276: ARRAY
56277: PPUSH
56278: LD_VAR 0 7
56282: PPUSH
56283: LD_VAR 0 8
56287: PPUSH
56288: CALL_OW 298
56292: ST_TO_ADDR
// if tmp < distance then
56293: LD_VAR 0 9
56297: PUSH
56298: LD_VAR 0 10
56302: LESS
56303: IFFALSE 56325
// begin result := i ;
56305: LD_ADDR_VAR 0 5
56309: PUSH
56310: LD_VAR 0 6
56314: ST_TO_ADDR
// distance := tmp ;
56315: LD_ADDR_VAR 0 10
56319: PUSH
56320: LD_VAR 0 9
56324: ST_TO_ADDR
// end ; end ;
56325: GO 56183
56327: POP
56328: POP
// end ;
56329: LD_VAR 0 5
56333: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56334: LD_INT 0
56336: PPUSH
56337: PPUSH
// if not driver or not IsInUnit ( driver ) then
56338: LD_VAR 0 1
56342: NOT
56343: PUSH
56344: LD_VAR 0 1
56348: PPUSH
56349: CALL_OW 310
56353: NOT
56354: OR
56355: IFFALSE 56359
// exit ;
56357: GO 56449
// vehicle := IsInUnit ( driver ) ;
56359: LD_ADDR_VAR 0 3
56363: PUSH
56364: LD_VAR 0 1
56368: PPUSH
56369: CALL_OW 310
56373: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56374: LD_VAR 0 1
56378: PPUSH
56379: LD_STRING \
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 0
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: PUSH
56409: LD_STRING E
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: LD_VAR 0 3
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PPUSH
56445: CALL_OW 446
// end ;
56449: LD_VAR 0 2
56453: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56454: LD_INT 0
56456: PPUSH
56457: PPUSH
// if not driver or not IsInUnit ( driver ) then
56458: LD_VAR 0 1
56462: NOT
56463: PUSH
56464: LD_VAR 0 1
56468: PPUSH
56469: CALL_OW 310
56473: NOT
56474: OR
56475: IFFALSE 56479
// exit ;
56477: GO 56569
// vehicle := IsInUnit ( driver ) ;
56479: LD_ADDR_VAR 0 3
56483: PUSH
56484: LD_VAR 0 1
56488: PPUSH
56489: CALL_OW 310
56493: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56494: LD_VAR 0 1
56498: PPUSH
56499: LD_STRING \
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: PUSH
56529: LD_STRING E
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_VAR 0 3
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PPUSH
56565: CALL_OW 447
// end ;
56569: LD_VAR 0 2
56573: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56574: LD_INT 0
56576: PPUSH
56577: PPUSH
56578: PPUSH
// tmp := [ ] ;
56579: LD_ADDR_VAR 0 5
56583: PUSH
56584: EMPTY
56585: ST_TO_ADDR
// for i in units do
56586: LD_ADDR_VAR 0 4
56590: PUSH
56591: LD_VAR 0 1
56595: PUSH
56596: FOR_IN
56597: IFFALSE 56635
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56599: LD_ADDR_VAR 0 5
56603: PUSH
56604: LD_VAR 0 5
56608: PPUSH
56609: LD_VAR 0 5
56613: PUSH
56614: LD_INT 1
56616: PLUS
56617: PPUSH
56618: LD_VAR 0 4
56622: PPUSH
56623: CALL_OW 256
56627: PPUSH
56628: CALL_OW 2
56632: ST_TO_ADDR
56633: GO 56596
56635: POP
56636: POP
// if not tmp then
56637: LD_VAR 0 5
56641: NOT
56642: IFFALSE 56646
// exit ;
56644: GO 56694
// if asc then
56646: LD_VAR 0 2
56650: IFFALSE 56674
// result := SortListByListAsc ( units , tmp ) else
56652: LD_ADDR_VAR 0 3
56656: PUSH
56657: LD_VAR 0 1
56661: PPUSH
56662: LD_VAR 0 5
56666: PPUSH
56667: CALL_OW 76
56671: ST_TO_ADDR
56672: GO 56694
// result := SortListByListDesc ( units , tmp ) ;
56674: LD_ADDR_VAR 0 3
56678: PUSH
56679: LD_VAR 0 1
56683: PPUSH
56684: LD_VAR 0 5
56688: PPUSH
56689: CALL_OW 77
56693: ST_TO_ADDR
// end ;
56694: LD_VAR 0 3
56698: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56699: LD_INT 0
56701: PPUSH
56702: PPUSH
// task := GetTaskList ( mech ) ;
56703: LD_ADDR_VAR 0 4
56707: PUSH
56708: LD_VAR 0 1
56712: PPUSH
56713: CALL_OW 437
56717: ST_TO_ADDR
// if not task then
56718: LD_VAR 0 4
56722: NOT
56723: IFFALSE 56727
// exit ;
56725: GO 56769
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56727: LD_ADDR_VAR 0 3
56731: PUSH
56732: LD_VAR 0 4
56736: PUSH
56737: LD_INT 1
56739: ARRAY
56740: PUSH
56741: LD_INT 1
56743: ARRAY
56744: PUSH
56745: LD_STRING r
56747: EQUAL
56748: PUSH
56749: LD_VAR 0 4
56753: PUSH
56754: LD_INT 1
56756: ARRAY
56757: PUSH
56758: LD_INT 4
56760: ARRAY
56761: PUSH
56762: LD_VAR 0 2
56766: EQUAL
56767: AND
56768: ST_TO_ADDR
// end ;
56769: LD_VAR 0 3
56773: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56774: LD_INT 0
56776: PPUSH
// SetDir ( unit , d ) ;
56777: LD_VAR 0 1
56781: PPUSH
56782: LD_VAR 0 4
56786: PPUSH
56787: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56791: LD_VAR 0 1
56795: PPUSH
56796: LD_VAR 0 2
56800: PPUSH
56801: LD_VAR 0 3
56805: PPUSH
56806: LD_VAR 0 5
56810: PPUSH
56811: CALL_OW 48
// end ;
56815: LD_VAR 0 6
56819: RET
// export function ToNaturalNumber ( number ) ; begin
56820: LD_INT 0
56822: PPUSH
// result := number div 1 ;
56823: LD_ADDR_VAR 0 2
56827: PUSH
56828: LD_VAR 0 1
56832: PUSH
56833: LD_INT 1
56835: DIV
56836: ST_TO_ADDR
// if number < 0 then
56837: LD_VAR 0 1
56841: PUSH
56842: LD_INT 0
56844: LESS
56845: IFFALSE 56855
// result := 0 ;
56847: LD_ADDR_VAR 0 2
56851: PUSH
56852: LD_INT 0
56854: ST_TO_ADDR
// end ;
56855: LD_VAR 0 2
56859: RET
// export function SortByClass ( units , class ) ; var un ; begin
56860: LD_INT 0
56862: PPUSH
56863: PPUSH
// if not units or not class then
56864: LD_VAR 0 1
56868: NOT
56869: PUSH
56870: LD_VAR 0 2
56874: NOT
56875: OR
56876: IFFALSE 56880
// exit ;
56878: GO 56975
// result := [ ] ;
56880: LD_ADDR_VAR 0 3
56884: PUSH
56885: EMPTY
56886: ST_TO_ADDR
// for un in units do
56887: LD_ADDR_VAR 0 4
56891: PUSH
56892: LD_VAR 0 1
56896: PUSH
56897: FOR_IN
56898: IFFALSE 56973
// if GetClass ( un ) = class then
56900: LD_VAR 0 4
56904: PPUSH
56905: CALL_OW 257
56909: PUSH
56910: LD_VAR 0 2
56914: EQUAL
56915: IFFALSE 56942
// result := Insert ( result , 1 , un ) else
56917: LD_ADDR_VAR 0 3
56921: PUSH
56922: LD_VAR 0 3
56926: PPUSH
56927: LD_INT 1
56929: PPUSH
56930: LD_VAR 0 4
56934: PPUSH
56935: CALL_OW 2
56939: ST_TO_ADDR
56940: GO 56971
// result := Replace ( result , result + 1 , un ) ;
56942: LD_ADDR_VAR 0 3
56946: PUSH
56947: LD_VAR 0 3
56951: PPUSH
56952: LD_VAR 0 3
56956: PUSH
56957: LD_INT 1
56959: PLUS
56960: PPUSH
56961: LD_VAR 0 4
56965: PPUSH
56966: CALL_OW 1
56970: ST_TO_ADDR
56971: GO 56897
56973: POP
56974: POP
// end ;
56975: LD_VAR 0 3
56979: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56980: LD_INT 0
56982: PPUSH
56983: PPUSH
56984: PPUSH
56985: PPUSH
56986: PPUSH
56987: PPUSH
56988: PPUSH
// result := [ ] ;
56989: LD_ADDR_VAR 0 4
56993: PUSH
56994: EMPTY
56995: ST_TO_ADDR
// if x - r < 0 then
56996: LD_VAR 0 1
57000: PUSH
57001: LD_VAR 0 3
57005: MINUS
57006: PUSH
57007: LD_INT 0
57009: LESS
57010: IFFALSE 57022
// min_x := 0 else
57012: LD_ADDR_VAR 0 8
57016: PUSH
57017: LD_INT 0
57019: ST_TO_ADDR
57020: GO 57038
// min_x := x - r ;
57022: LD_ADDR_VAR 0 8
57026: PUSH
57027: LD_VAR 0 1
57031: PUSH
57032: LD_VAR 0 3
57036: MINUS
57037: ST_TO_ADDR
// if y - r < 0 then
57038: LD_VAR 0 2
57042: PUSH
57043: LD_VAR 0 3
57047: MINUS
57048: PUSH
57049: LD_INT 0
57051: LESS
57052: IFFALSE 57064
// min_y := 0 else
57054: LD_ADDR_VAR 0 7
57058: PUSH
57059: LD_INT 0
57061: ST_TO_ADDR
57062: GO 57080
// min_y := y - r ;
57064: LD_ADDR_VAR 0 7
57068: PUSH
57069: LD_VAR 0 2
57073: PUSH
57074: LD_VAR 0 3
57078: MINUS
57079: ST_TO_ADDR
// max_x := x + r ;
57080: LD_ADDR_VAR 0 9
57084: PUSH
57085: LD_VAR 0 1
57089: PUSH
57090: LD_VAR 0 3
57094: PLUS
57095: ST_TO_ADDR
// max_y := y + r ;
57096: LD_ADDR_VAR 0 10
57100: PUSH
57101: LD_VAR 0 2
57105: PUSH
57106: LD_VAR 0 3
57110: PLUS
57111: ST_TO_ADDR
// for _x = min_x to max_x do
57112: LD_ADDR_VAR 0 5
57116: PUSH
57117: DOUBLE
57118: LD_VAR 0 8
57122: DEC
57123: ST_TO_ADDR
57124: LD_VAR 0 9
57128: PUSH
57129: FOR_TO
57130: IFFALSE 57231
// for _y = min_y to max_y do
57132: LD_ADDR_VAR 0 6
57136: PUSH
57137: DOUBLE
57138: LD_VAR 0 7
57142: DEC
57143: ST_TO_ADDR
57144: LD_VAR 0 10
57148: PUSH
57149: FOR_TO
57150: IFFALSE 57227
// begin if not ValidHex ( _x , _y ) then
57152: LD_VAR 0 5
57156: PPUSH
57157: LD_VAR 0 6
57161: PPUSH
57162: CALL_OW 488
57166: NOT
57167: IFFALSE 57171
// continue ;
57169: GO 57149
// if GetResourceTypeXY ( _x , _y ) then
57171: LD_VAR 0 5
57175: PPUSH
57176: LD_VAR 0 6
57180: PPUSH
57181: CALL_OW 283
57185: IFFALSE 57225
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57187: LD_ADDR_VAR 0 4
57191: PUSH
57192: LD_VAR 0 4
57196: PPUSH
57197: LD_VAR 0 4
57201: PUSH
57202: LD_INT 1
57204: PLUS
57205: PPUSH
57206: LD_VAR 0 5
57210: PUSH
57211: LD_VAR 0 6
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PPUSH
57220: CALL_OW 1
57224: ST_TO_ADDR
// end ;
57225: GO 57149
57227: POP
57228: POP
57229: GO 57129
57231: POP
57232: POP
// end ;
57233: LD_VAR 0 4
57237: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57238: LD_INT 0
57240: PPUSH
57241: PPUSH
57242: PPUSH
57243: PPUSH
57244: PPUSH
57245: PPUSH
57246: PPUSH
57247: PPUSH
// if not units then
57248: LD_VAR 0 1
57252: NOT
57253: IFFALSE 57257
// exit ;
57255: GO 57781
// result := UnitFilter ( units , [ f_ok ] ) ;
57257: LD_ADDR_VAR 0 3
57261: PUSH
57262: LD_VAR 0 1
57266: PPUSH
57267: LD_INT 50
57269: PUSH
57270: EMPTY
57271: LIST
57272: PPUSH
57273: CALL_OW 72
57277: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57278: LD_ADDR_VAR 0 8
57282: PUSH
57283: LD_VAR 0 1
57287: PUSH
57288: LD_INT 1
57290: ARRAY
57291: PPUSH
57292: CALL_OW 255
57296: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57297: LD_ADDR_VAR 0 10
57301: PUSH
57302: LD_INT 29
57304: PUSH
57305: LD_INT 91
57307: PUSH
57308: LD_INT 49
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: LIST
57315: ST_TO_ADDR
// if not result then
57316: LD_VAR 0 3
57320: NOT
57321: IFFALSE 57325
// exit ;
57323: GO 57781
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57325: LD_ADDR_VAR 0 5
57329: PUSH
57330: LD_INT 81
57332: PUSH
57333: LD_VAR 0 8
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PPUSH
57342: CALL_OW 69
57346: ST_TO_ADDR
// for i in result do
57347: LD_ADDR_VAR 0 4
57351: PUSH
57352: LD_VAR 0 3
57356: PUSH
57357: FOR_IN
57358: IFFALSE 57779
// begin tag := GetTag ( i ) + 1 ;
57360: LD_ADDR_VAR 0 9
57364: PUSH
57365: LD_VAR 0 4
57369: PPUSH
57370: CALL_OW 110
57374: PUSH
57375: LD_INT 1
57377: PLUS
57378: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
57379: LD_ADDR_VAR 0 7
57383: PUSH
57384: LD_VAR 0 4
57388: PPUSH
57389: CALL_OW 250
57393: PPUSH
57394: LD_VAR 0 4
57398: PPUSH
57399: CALL_OW 251
57403: PPUSH
57404: LD_INT 6
57406: PPUSH
57407: CALL 56980 0 3
57411: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57412: LD_VAR 0 4
57416: PPUSH
57417: CALL_OW 247
57421: PUSH
57422: LD_INT 2
57424: EQUAL
57425: PUSH
57426: LD_VAR 0 7
57430: AND
57431: PUSH
57432: LD_VAR 0 4
57436: PPUSH
57437: CALL_OW 264
57441: PUSH
57442: LD_VAR 0 10
57446: IN
57447: NOT
57448: AND
57449: IFFALSE 57488
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57451: LD_VAR 0 4
57455: PPUSH
57456: LD_VAR 0 7
57460: PUSH
57461: LD_INT 1
57463: ARRAY
57464: PUSH
57465: LD_INT 1
57467: ARRAY
57468: PPUSH
57469: LD_VAR 0 7
57473: PUSH
57474: LD_INT 1
57476: ARRAY
57477: PUSH
57478: LD_INT 2
57480: ARRAY
57481: PPUSH
57482: CALL_OW 116
57486: GO 57777
// if path > tag then
57488: LD_VAR 0 2
57492: PUSH
57493: LD_VAR 0 9
57497: GREATER
57498: IFFALSE 57706
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57500: LD_ADDR_VAR 0 6
57504: PUSH
57505: LD_VAR 0 5
57509: PPUSH
57510: LD_INT 91
57512: PUSH
57513: LD_VAR 0 4
57517: PUSH
57518: LD_INT 8
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: PPUSH
57526: CALL_OW 72
57530: ST_TO_ADDR
// if nearEnemy then
57531: LD_VAR 0 6
57535: IFFALSE 57604
// begin if GetWeapon ( i ) = ru_time_lapser then
57537: LD_VAR 0 4
57541: PPUSH
57542: CALL_OW 264
57546: PUSH
57547: LD_INT 49
57549: EQUAL
57550: IFFALSE 57578
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57552: LD_VAR 0 4
57556: PPUSH
57557: LD_VAR 0 6
57561: PPUSH
57562: LD_VAR 0 4
57566: PPUSH
57567: CALL_OW 74
57571: PPUSH
57572: CALL_OW 112
57576: GO 57602
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57578: LD_VAR 0 4
57582: PPUSH
57583: LD_VAR 0 6
57587: PPUSH
57588: LD_VAR 0 4
57592: PPUSH
57593: CALL_OW 74
57597: PPUSH
57598: CALL 58706 0 2
// end else
57602: GO 57704
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57604: LD_VAR 0 4
57608: PPUSH
57609: LD_VAR 0 2
57613: PUSH
57614: LD_VAR 0 9
57618: ARRAY
57619: PUSH
57620: LD_INT 1
57622: ARRAY
57623: PPUSH
57624: LD_VAR 0 2
57628: PUSH
57629: LD_VAR 0 9
57633: ARRAY
57634: PUSH
57635: LD_INT 2
57637: ARRAY
57638: PPUSH
57639: CALL_OW 297
57643: PUSH
57644: LD_INT 6
57646: GREATER
57647: IFFALSE 57690
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57649: LD_VAR 0 4
57653: PPUSH
57654: LD_VAR 0 2
57658: PUSH
57659: LD_VAR 0 9
57663: ARRAY
57664: PUSH
57665: LD_INT 1
57667: ARRAY
57668: PPUSH
57669: LD_VAR 0 2
57673: PUSH
57674: LD_VAR 0 9
57678: ARRAY
57679: PUSH
57680: LD_INT 2
57682: ARRAY
57683: PPUSH
57684: CALL_OW 114
57688: GO 57704
// SetTag ( i , tag ) ;
57690: LD_VAR 0 4
57694: PPUSH
57695: LD_VAR 0 9
57699: PPUSH
57700: CALL_OW 109
// end else
57704: GO 57777
// if enemy then
57706: LD_VAR 0 5
57710: IFFALSE 57777
// begin if GetWeapon ( i ) = ru_time_lapser then
57712: LD_VAR 0 4
57716: PPUSH
57717: CALL_OW 264
57721: PUSH
57722: LD_INT 49
57724: EQUAL
57725: IFFALSE 57753
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57727: LD_VAR 0 4
57731: PPUSH
57732: LD_VAR 0 5
57736: PPUSH
57737: LD_VAR 0 4
57741: PPUSH
57742: CALL_OW 74
57746: PPUSH
57747: CALL_OW 112
57751: GO 57777
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57753: LD_VAR 0 4
57757: PPUSH
57758: LD_VAR 0 5
57762: PPUSH
57763: LD_VAR 0 4
57767: PPUSH
57768: CALL_OW 74
57772: PPUSH
57773: CALL 58706 0 2
// end ; end ;
57777: GO 57357
57779: POP
57780: POP
// end ;
57781: LD_VAR 0 3
57785: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57786: LD_INT 0
57788: PPUSH
57789: PPUSH
57790: PPUSH
// if not unit or IsInUnit ( unit ) then
57791: LD_VAR 0 1
57795: NOT
57796: PUSH
57797: LD_VAR 0 1
57801: PPUSH
57802: CALL_OW 310
57806: OR
57807: IFFALSE 57811
// exit ;
57809: GO 57902
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57811: LD_ADDR_VAR 0 4
57815: PUSH
57816: LD_VAR 0 1
57820: PPUSH
57821: CALL_OW 250
57825: PPUSH
57826: LD_VAR 0 2
57830: PPUSH
57831: LD_INT 1
57833: PPUSH
57834: CALL_OW 272
57838: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57839: LD_ADDR_VAR 0 5
57843: PUSH
57844: LD_VAR 0 1
57848: PPUSH
57849: CALL_OW 251
57853: PPUSH
57854: LD_VAR 0 2
57858: PPUSH
57859: LD_INT 1
57861: PPUSH
57862: CALL_OW 273
57866: ST_TO_ADDR
// if ValidHex ( x , y ) then
57867: LD_VAR 0 4
57871: PPUSH
57872: LD_VAR 0 5
57876: PPUSH
57877: CALL_OW 488
57881: IFFALSE 57902
// ComTurnXY ( unit , x , y ) ;
57883: LD_VAR 0 1
57887: PPUSH
57888: LD_VAR 0 4
57892: PPUSH
57893: LD_VAR 0 5
57897: PPUSH
57898: CALL_OW 118
// end ;
57902: LD_VAR 0 3
57906: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57907: LD_INT 0
57909: PPUSH
57910: PPUSH
// result := false ;
57911: LD_ADDR_VAR 0 3
57915: PUSH
57916: LD_INT 0
57918: ST_TO_ADDR
// if not units then
57919: LD_VAR 0 2
57923: NOT
57924: IFFALSE 57928
// exit ;
57926: GO 57973
// for i in units do
57928: LD_ADDR_VAR 0 4
57932: PUSH
57933: LD_VAR 0 2
57937: PUSH
57938: FOR_IN
57939: IFFALSE 57971
// if See ( side , i ) then
57941: LD_VAR 0 1
57945: PPUSH
57946: LD_VAR 0 4
57950: PPUSH
57951: CALL_OW 292
57955: IFFALSE 57969
// begin result := true ;
57957: LD_ADDR_VAR 0 3
57961: PUSH
57962: LD_INT 1
57964: ST_TO_ADDR
// exit ;
57965: POP
57966: POP
57967: GO 57973
// end ;
57969: GO 57938
57971: POP
57972: POP
// end ;
57973: LD_VAR 0 3
57977: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57978: LD_INT 0
57980: PPUSH
57981: PPUSH
57982: PPUSH
57983: PPUSH
// if not unit or not points then
57984: LD_VAR 0 1
57988: NOT
57989: PUSH
57990: LD_VAR 0 2
57994: NOT
57995: OR
57996: IFFALSE 58000
// exit ;
57998: GO 58090
// dist := 99999 ;
58000: LD_ADDR_VAR 0 5
58004: PUSH
58005: LD_INT 99999
58007: ST_TO_ADDR
// for i in points do
58008: LD_ADDR_VAR 0 4
58012: PUSH
58013: LD_VAR 0 2
58017: PUSH
58018: FOR_IN
58019: IFFALSE 58088
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58021: LD_ADDR_VAR 0 6
58025: PUSH
58026: LD_VAR 0 1
58030: PPUSH
58031: LD_VAR 0 4
58035: PUSH
58036: LD_INT 1
58038: ARRAY
58039: PPUSH
58040: LD_VAR 0 4
58044: PUSH
58045: LD_INT 2
58047: ARRAY
58048: PPUSH
58049: CALL_OW 297
58053: ST_TO_ADDR
// if tmpDist < dist then
58054: LD_VAR 0 6
58058: PUSH
58059: LD_VAR 0 5
58063: LESS
58064: IFFALSE 58086
// begin result := i ;
58066: LD_ADDR_VAR 0 3
58070: PUSH
58071: LD_VAR 0 4
58075: ST_TO_ADDR
// dist := tmpDist ;
58076: LD_ADDR_VAR 0 5
58080: PUSH
58081: LD_VAR 0 6
58085: ST_TO_ADDR
// end ; end ;
58086: GO 58018
58088: POP
58089: POP
// end ;
58090: LD_VAR 0 3
58094: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58095: LD_INT 0
58097: PPUSH
// uc_side := side ;
58098: LD_ADDR_OWVAR 20
58102: PUSH
58103: LD_VAR 0 1
58107: ST_TO_ADDR
// uc_nation := 3 ;
58108: LD_ADDR_OWVAR 21
58112: PUSH
58113: LD_INT 3
58115: ST_TO_ADDR
// vc_chassis := 25 ;
58116: LD_ADDR_OWVAR 37
58120: PUSH
58121: LD_INT 25
58123: ST_TO_ADDR
// vc_engine := engine_siberite ;
58124: LD_ADDR_OWVAR 39
58128: PUSH
58129: LD_INT 3
58131: ST_TO_ADDR
// vc_control := control_computer ;
58132: LD_ADDR_OWVAR 38
58136: PUSH
58137: LD_INT 3
58139: ST_TO_ADDR
// vc_weapon := 59 ;
58140: LD_ADDR_OWVAR 40
58144: PUSH
58145: LD_INT 59
58147: ST_TO_ADDR
// result := CreateVehicle ;
58148: LD_ADDR_VAR 0 5
58152: PUSH
58153: CALL_OW 45
58157: ST_TO_ADDR
// SetDir ( result , d ) ;
58158: LD_VAR 0 5
58162: PPUSH
58163: LD_VAR 0 4
58167: PPUSH
58168: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58172: LD_VAR 0 5
58176: PPUSH
58177: LD_VAR 0 2
58181: PPUSH
58182: LD_VAR 0 3
58186: PPUSH
58187: LD_INT 0
58189: PPUSH
58190: CALL_OW 48
// end ;
58194: LD_VAR 0 5
58198: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58199: LD_INT 0
58201: PPUSH
58202: PPUSH
58203: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58204: LD_ADDR_VAR 0 2
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58227: LD_VAR 0 1
58231: NOT
58232: PUSH
58233: LD_VAR 0 1
58237: PPUSH
58238: CALL_OW 264
58242: PUSH
58243: LD_INT 12
58245: PUSH
58246: LD_INT 51
58248: PUSH
58249: LD_INT 32
58251: PUSH
58252: LD_INT 89
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: IN
58261: NOT
58262: OR
58263: IFFALSE 58267
// exit ;
58265: GO 58365
// for i := 1 to 3 do
58267: LD_ADDR_VAR 0 3
58271: PUSH
58272: DOUBLE
58273: LD_INT 1
58275: DEC
58276: ST_TO_ADDR
58277: LD_INT 3
58279: PUSH
58280: FOR_TO
58281: IFFALSE 58363
// begin tmp := GetCargo ( cargo , i ) ;
58283: LD_ADDR_VAR 0 4
58287: PUSH
58288: LD_VAR 0 1
58292: PPUSH
58293: LD_VAR 0 3
58297: PPUSH
58298: CALL_OW 289
58302: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58303: LD_ADDR_VAR 0 2
58307: PUSH
58308: LD_VAR 0 2
58312: PPUSH
58313: LD_VAR 0 3
58317: PPUSH
58318: LD_VAR 0 4
58322: PPUSH
58323: CALL_OW 1
58327: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58328: LD_ADDR_VAR 0 2
58332: PUSH
58333: LD_VAR 0 2
58337: PPUSH
58338: LD_INT 4
58340: PPUSH
58341: LD_VAR 0 2
58345: PUSH
58346: LD_INT 4
58348: ARRAY
58349: PUSH
58350: LD_VAR 0 4
58354: PLUS
58355: PPUSH
58356: CALL_OW 1
58360: ST_TO_ADDR
// end ;
58361: GO 58280
58363: POP
58364: POP
// end ;
58365: LD_VAR 0 2
58369: RET
// export function Length ( array ) ; begin
58370: LD_INT 0
58372: PPUSH
// result := array + 0 ;
58373: LD_ADDR_VAR 0 2
58377: PUSH
58378: LD_VAR 0 1
58382: PUSH
58383: LD_INT 0
58385: PLUS
58386: ST_TO_ADDR
// end ;
58387: LD_VAR 0 2
58391: RET
// export function PrepareArray ( array ) ; begin
58392: LD_INT 0
58394: PPUSH
// result := array diff 0 ;
58395: LD_ADDR_VAR 0 2
58399: PUSH
58400: LD_VAR 0 1
58404: PUSH
58405: LD_INT 0
58407: DIFF
58408: ST_TO_ADDR
// if not result [ 1 ] then
58409: LD_VAR 0 2
58413: PUSH
58414: LD_INT 1
58416: ARRAY
58417: NOT
58418: IFFALSE 58438
// result := Delete ( result , 1 ) ;
58420: LD_ADDR_VAR 0 2
58424: PUSH
58425: LD_VAR 0 2
58429: PPUSH
58430: LD_INT 1
58432: PPUSH
58433: CALL_OW 3
58437: ST_TO_ADDR
// end ;
58438: LD_VAR 0 2
58442: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58443: LD_INT 0
58445: PPUSH
58446: PPUSH
58447: PPUSH
58448: PPUSH
// sibRocketRange := 25 ;
58449: LD_ADDR_VAR 0 6
58453: PUSH
58454: LD_INT 25
58456: ST_TO_ADDR
// result := false ;
58457: LD_ADDR_VAR 0 4
58461: PUSH
58462: LD_INT 0
58464: ST_TO_ADDR
// for i := 0 to 5 do
58465: LD_ADDR_VAR 0 5
58469: PUSH
58470: DOUBLE
58471: LD_INT 0
58473: DEC
58474: ST_TO_ADDR
58475: LD_INT 5
58477: PUSH
58478: FOR_TO
58479: IFFALSE 58546
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58481: LD_VAR 0 1
58485: PPUSH
58486: LD_VAR 0 5
58490: PPUSH
58491: LD_VAR 0 6
58495: PPUSH
58496: CALL_OW 272
58500: PPUSH
58501: LD_VAR 0 2
58505: PPUSH
58506: LD_VAR 0 5
58510: PPUSH
58511: LD_VAR 0 6
58515: PPUSH
58516: CALL_OW 273
58520: PPUSH
58521: LD_VAR 0 3
58525: PPUSH
58526: CALL_OW 309
58530: IFFALSE 58544
// begin result := true ;
58532: LD_ADDR_VAR 0 4
58536: PUSH
58537: LD_INT 1
58539: ST_TO_ADDR
// exit ;
58540: POP
58541: POP
58542: GO 58548
// end ;
58544: GO 58478
58546: POP
58547: POP
// end ;
58548: LD_VAR 0 4
58552: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58553: LD_INT 0
58555: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58556: LD_VAR 0 1
58560: PPUSH
58561: LD_VAR 0 2
58565: PPUSH
58566: LD_INT 0
58568: PPUSH
58569: LD_INT 0
58571: PPUSH
58572: LD_INT 1
58574: PPUSH
58575: LD_INT 0
58577: PPUSH
58578: CALL_OW 587
// end ;
58582: LD_VAR 0 3
58586: RET
// export function CenterOnNow ( unit ) ; begin
58587: LD_INT 0
58589: PPUSH
// result := IsInUnit ( unit ) ;
58590: LD_ADDR_VAR 0 2
58594: PUSH
58595: LD_VAR 0 1
58599: PPUSH
58600: CALL_OW 310
58604: ST_TO_ADDR
// if not result then
58605: LD_VAR 0 2
58609: NOT
58610: IFFALSE 58622
// result := unit ;
58612: LD_ADDR_VAR 0 2
58616: PUSH
58617: LD_VAR 0 1
58621: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58622: LD_VAR 0 1
58626: PPUSH
58627: CALL_OW 87
// end ;
58631: LD_VAR 0 2
58635: RET
// export function ComMoveHex ( unit , hex ) ; begin
58636: LD_INT 0
58638: PPUSH
// if not hex then
58639: LD_VAR 0 2
58643: NOT
58644: IFFALSE 58648
// exit ;
58646: GO 58701
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58648: LD_VAR 0 2
58652: PUSH
58653: LD_INT 1
58655: ARRAY
58656: PPUSH
58657: LD_VAR 0 2
58661: PUSH
58662: LD_INT 2
58664: ARRAY
58665: PPUSH
58666: CALL_OW 428
58670: IFFALSE 58674
// exit ;
58672: GO 58701
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58674: LD_VAR 0 1
58678: PPUSH
58679: LD_VAR 0 2
58683: PUSH
58684: LD_INT 1
58686: ARRAY
58687: PPUSH
58688: LD_VAR 0 2
58692: PUSH
58693: LD_INT 2
58695: ARRAY
58696: PPUSH
58697: CALL_OW 111
// end ;
58701: LD_VAR 0 3
58705: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58706: LD_INT 0
58708: PPUSH
58709: PPUSH
58710: PPUSH
// if not unit or not enemy then
58711: LD_VAR 0 1
58715: NOT
58716: PUSH
58717: LD_VAR 0 2
58721: NOT
58722: OR
58723: IFFALSE 58727
// exit ;
58725: GO 58851
// x := GetX ( enemy ) ;
58727: LD_ADDR_VAR 0 4
58731: PUSH
58732: LD_VAR 0 2
58736: PPUSH
58737: CALL_OW 250
58741: ST_TO_ADDR
// y := GetY ( enemy ) ;
58742: LD_ADDR_VAR 0 5
58746: PUSH
58747: LD_VAR 0 2
58751: PPUSH
58752: CALL_OW 251
58756: ST_TO_ADDR
// if ValidHex ( x , y ) then
58757: LD_VAR 0 4
58761: PPUSH
58762: LD_VAR 0 5
58766: PPUSH
58767: CALL_OW 488
58771: IFFALSE 58851
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
58773: LD_VAR 0 2
58777: PPUSH
58778: CALL_OW 247
58782: PUSH
58783: LD_INT 3
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: IN
58793: PUSH
58794: LD_VAR 0 1
58798: PPUSH
58799: CALL_OW 255
58803: PPUSH
58804: LD_VAR 0 2
58808: PPUSH
58809: CALL_OW 292
58813: AND
58814: IFFALSE 58832
// ComAttackUnit ( unit , enemy ) else
58816: LD_VAR 0 1
58820: PPUSH
58821: LD_VAR 0 2
58825: PPUSH
58826: CALL_OW 115
58830: GO 58851
// ComAgressiveMove ( unit , x , y ) ;
58832: LD_VAR 0 1
58836: PPUSH
58837: LD_VAR 0 4
58841: PPUSH
58842: LD_VAR 0 5
58846: PPUSH
58847: CALL_OW 114
// end ; end_of_file
58851: LD_VAR 0 3
58855: RET
// export globalGameSaveCounter ; every 0 0$1 do
58856: GO 58858
58858: DISABLE
// begin enable ;
58859: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58860: LD_STRING updateTimer(
58862: PUSH
58863: LD_OWVAR 1
58867: STR
58868: PUSH
58869: LD_STRING );
58871: STR
58872: PPUSH
58873: CALL_OW 559
// end ;
58877: END
// every 0 0$1 do
58878: GO 58880
58880: DISABLE
// begin globalGameSaveCounter := 0 ;
58881: LD_ADDR_EXP 49
58885: PUSH
58886: LD_INT 0
58888: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
58889: LD_STRING setGameSaveCounter(0)
58891: PPUSH
58892: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
58896: LD_STRING initStreamRollete();
58898: PPUSH
58899: CALL_OW 559
// InitStreamMode ;
58903: CALL 60229 0 0
// DefineStreamItems ( false ) ;
58907: LD_INT 0
58909: PPUSH
58910: CALL 60693 0 1
// end ;
58914: END
// export function SOS_MapStart ( ) ; begin
58915: LD_INT 0
58917: PPUSH
// if streamModeActive then
58918: LD_EXP 50
58922: IFFALSE 58931
// DefineStreamItems ( true ) ;
58924: LD_INT 1
58926: PPUSH
58927: CALL 60693 0 1
// UpdateLuaVariables ( ) ;
58931: CALL 58948 0 0
// UpdateFactoryWaypoints ( ) ;
58935: CALL 73562 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58939: CALL 73819 0 0
// end ;
58943: LD_VAR 0 1
58947: RET
// function UpdateLuaVariables ( ) ; begin
58948: LD_INT 0
58950: PPUSH
// if globalGameSaveCounter then
58951: LD_EXP 49
58955: IFFALSE 58989
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
58957: LD_ADDR_EXP 49
58961: PUSH
58962: LD_EXP 49
58966: PPUSH
58967: CALL 55995 0 1
58971: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58972: LD_STRING setGameSaveCounter(
58974: PUSH
58975: LD_EXP 49
58979: STR
58980: PUSH
58981: LD_STRING )
58983: STR
58984: PPUSH
58985: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58989: LD_STRING setGameDifficulty(
58991: PUSH
58992: LD_OWVAR 67
58996: STR
58997: PUSH
58998: LD_STRING )
59000: STR
59001: PPUSH
59002: CALL_OW 559
// end ;
59006: LD_VAR 0 1
59010: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59011: LD_INT 0
59013: PPUSH
// if p2 = stream_mode then
59014: LD_VAR 0 2
59018: PUSH
59019: LD_INT 100
59021: EQUAL
59022: IFFALSE 60025
// begin if not StreamModeActive then
59024: LD_EXP 50
59028: NOT
59029: IFFALSE 59039
// StreamModeActive := true ;
59031: LD_ADDR_EXP 50
59035: PUSH
59036: LD_INT 1
59038: ST_TO_ADDR
// if p3 = 0 then
59039: LD_VAR 0 3
59043: PUSH
59044: LD_INT 0
59046: EQUAL
59047: IFFALSE 59053
// InitStreamMode ;
59049: CALL 60229 0 0
// if p3 = 1 then
59053: LD_VAR 0 3
59057: PUSH
59058: LD_INT 1
59060: EQUAL
59061: IFFALSE 59071
// sRocket := true ;
59063: LD_ADDR_EXP 55
59067: PUSH
59068: LD_INT 1
59070: ST_TO_ADDR
// if p3 = 2 then
59071: LD_VAR 0 3
59075: PUSH
59076: LD_INT 2
59078: EQUAL
59079: IFFALSE 59089
// sSpeed := true ;
59081: LD_ADDR_EXP 54
59085: PUSH
59086: LD_INT 1
59088: ST_TO_ADDR
// if p3 = 3 then
59089: LD_VAR 0 3
59093: PUSH
59094: LD_INT 3
59096: EQUAL
59097: IFFALSE 59107
// sEngine := true ;
59099: LD_ADDR_EXP 56
59103: PUSH
59104: LD_INT 1
59106: ST_TO_ADDR
// if p3 = 4 then
59107: LD_VAR 0 3
59111: PUSH
59112: LD_INT 4
59114: EQUAL
59115: IFFALSE 59125
// sSpec := true ;
59117: LD_ADDR_EXP 53
59121: PUSH
59122: LD_INT 1
59124: ST_TO_ADDR
// if p3 = 5 then
59125: LD_VAR 0 3
59129: PUSH
59130: LD_INT 5
59132: EQUAL
59133: IFFALSE 59143
// sLevel := true ;
59135: LD_ADDR_EXP 57
59139: PUSH
59140: LD_INT 1
59142: ST_TO_ADDR
// if p3 = 6 then
59143: LD_VAR 0 3
59147: PUSH
59148: LD_INT 6
59150: EQUAL
59151: IFFALSE 59161
// sArmoury := true ;
59153: LD_ADDR_EXP 58
59157: PUSH
59158: LD_INT 1
59160: ST_TO_ADDR
// if p3 = 7 then
59161: LD_VAR 0 3
59165: PUSH
59166: LD_INT 7
59168: EQUAL
59169: IFFALSE 59179
// sRadar := true ;
59171: LD_ADDR_EXP 59
59175: PUSH
59176: LD_INT 1
59178: ST_TO_ADDR
// if p3 = 8 then
59179: LD_VAR 0 3
59183: PUSH
59184: LD_INT 8
59186: EQUAL
59187: IFFALSE 59197
// sBunker := true ;
59189: LD_ADDR_EXP 60
59193: PUSH
59194: LD_INT 1
59196: ST_TO_ADDR
// if p3 = 9 then
59197: LD_VAR 0 3
59201: PUSH
59202: LD_INT 9
59204: EQUAL
59205: IFFALSE 59215
// sHack := true ;
59207: LD_ADDR_EXP 61
59211: PUSH
59212: LD_INT 1
59214: ST_TO_ADDR
// if p3 = 10 then
59215: LD_VAR 0 3
59219: PUSH
59220: LD_INT 10
59222: EQUAL
59223: IFFALSE 59233
// sFire := true ;
59225: LD_ADDR_EXP 62
59229: PUSH
59230: LD_INT 1
59232: ST_TO_ADDR
// if p3 = 11 then
59233: LD_VAR 0 3
59237: PUSH
59238: LD_INT 11
59240: EQUAL
59241: IFFALSE 59251
// sRefresh := true ;
59243: LD_ADDR_EXP 63
59247: PUSH
59248: LD_INT 1
59250: ST_TO_ADDR
// if p3 = 12 then
59251: LD_VAR 0 3
59255: PUSH
59256: LD_INT 12
59258: EQUAL
59259: IFFALSE 59269
// sExp := true ;
59261: LD_ADDR_EXP 64
59265: PUSH
59266: LD_INT 1
59268: ST_TO_ADDR
// if p3 = 13 then
59269: LD_VAR 0 3
59273: PUSH
59274: LD_INT 13
59276: EQUAL
59277: IFFALSE 59287
// sDepot := true ;
59279: LD_ADDR_EXP 65
59283: PUSH
59284: LD_INT 1
59286: ST_TO_ADDR
// if p3 = 14 then
59287: LD_VAR 0 3
59291: PUSH
59292: LD_INT 14
59294: EQUAL
59295: IFFALSE 59305
// sFlag := true ;
59297: LD_ADDR_EXP 66
59301: PUSH
59302: LD_INT 1
59304: ST_TO_ADDR
// if p3 = 15 then
59305: LD_VAR 0 3
59309: PUSH
59310: LD_INT 15
59312: EQUAL
59313: IFFALSE 59323
// sKamikadze := true ;
59315: LD_ADDR_EXP 74
59319: PUSH
59320: LD_INT 1
59322: ST_TO_ADDR
// if p3 = 16 then
59323: LD_VAR 0 3
59327: PUSH
59328: LD_INT 16
59330: EQUAL
59331: IFFALSE 59341
// sTroll := true ;
59333: LD_ADDR_EXP 75
59337: PUSH
59338: LD_INT 1
59340: ST_TO_ADDR
// if p3 = 17 then
59341: LD_VAR 0 3
59345: PUSH
59346: LD_INT 17
59348: EQUAL
59349: IFFALSE 59359
// sSlow := true ;
59351: LD_ADDR_EXP 76
59355: PUSH
59356: LD_INT 1
59358: ST_TO_ADDR
// if p3 = 18 then
59359: LD_VAR 0 3
59363: PUSH
59364: LD_INT 18
59366: EQUAL
59367: IFFALSE 59377
// sLack := true ;
59369: LD_ADDR_EXP 77
59373: PUSH
59374: LD_INT 1
59376: ST_TO_ADDR
// if p3 = 19 then
59377: LD_VAR 0 3
59381: PUSH
59382: LD_INT 19
59384: EQUAL
59385: IFFALSE 59395
// sTank := true ;
59387: LD_ADDR_EXP 79
59391: PUSH
59392: LD_INT 1
59394: ST_TO_ADDR
// if p3 = 20 then
59395: LD_VAR 0 3
59399: PUSH
59400: LD_INT 20
59402: EQUAL
59403: IFFALSE 59413
// sRemote := true ;
59405: LD_ADDR_EXP 80
59409: PUSH
59410: LD_INT 1
59412: ST_TO_ADDR
// if p3 = 21 then
59413: LD_VAR 0 3
59417: PUSH
59418: LD_INT 21
59420: EQUAL
59421: IFFALSE 59431
// sPowell := true ;
59423: LD_ADDR_EXP 81
59427: PUSH
59428: LD_INT 1
59430: ST_TO_ADDR
// if p3 = 22 then
59431: LD_VAR 0 3
59435: PUSH
59436: LD_INT 22
59438: EQUAL
59439: IFFALSE 59449
// sTeleport := true ;
59441: LD_ADDR_EXP 84
59445: PUSH
59446: LD_INT 1
59448: ST_TO_ADDR
// if p3 = 23 then
59449: LD_VAR 0 3
59453: PUSH
59454: LD_INT 23
59456: EQUAL
59457: IFFALSE 59467
// sOilTower := true ;
59459: LD_ADDR_EXP 86
59463: PUSH
59464: LD_INT 1
59466: ST_TO_ADDR
// if p3 = 24 then
59467: LD_VAR 0 3
59471: PUSH
59472: LD_INT 24
59474: EQUAL
59475: IFFALSE 59485
// sShovel := true ;
59477: LD_ADDR_EXP 87
59481: PUSH
59482: LD_INT 1
59484: ST_TO_ADDR
// if p3 = 25 then
59485: LD_VAR 0 3
59489: PUSH
59490: LD_INT 25
59492: EQUAL
59493: IFFALSE 59503
// sSheik := true ;
59495: LD_ADDR_EXP 88
59499: PUSH
59500: LD_INT 1
59502: ST_TO_ADDR
// if p3 = 26 then
59503: LD_VAR 0 3
59507: PUSH
59508: LD_INT 26
59510: EQUAL
59511: IFFALSE 59521
// sEarthquake := true ;
59513: LD_ADDR_EXP 90
59517: PUSH
59518: LD_INT 1
59520: ST_TO_ADDR
// if p3 = 27 then
59521: LD_VAR 0 3
59525: PUSH
59526: LD_INT 27
59528: EQUAL
59529: IFFALSE 59539
// sAI := true ;
59531: LD_ADDR_EXP 91
59535: PUSH
59536: LD_INT 1
59538: ST_TO_ADDR
// if p3 = 28 then
59539: LD_VAR 0 3
59543: PUSH
59544: LD_INT 28
59546: EQUAL
59547: IFFALSE 59557
// sCargo := true ;
59549: LD_ADDR_EXP 94
59553: PUSH
59554: LD_INT 1
59556: ST_TO_ADDR
// if p3 = 29 then
59557: LD_VAR 0 3
59561: PUSH
59562: LD_INT 29
59564: EQUAL
59565: IFFALSE 59575
// sDLaser := true ;
59567: LD_ADDR_EXP 95
59571: PUSH
59572: LD_INT 1
59574: ST_TO_ADDR
// if p3 = 30 then
59575: LD_VAR 0 3
59579: PUSH
59580: LD_INT 30
59582: EQUAL
59583: IFFALSE 59593
// sExchange := true ;
59585: LD_ADDR_EXP 96
59589: PUSH
59590: LD_INT 1
59592: ST_TO_ADDR
// if p3 = 31 then
59593: LD_VAR 0 3
59597: PUSH
59598: LD_INT 31
59600: EQUAL
59601: IFFALSE 59611
// sFac := true ;
59603: LD_ADDR_EXP 97
59607: PUSH
59608: LD_INT 1
59610: ST_TO_ADDR
// if p3 = 32 then
59611: LD_VAR 0 3
59615: PUSH
59616: LD_INT 32
59618: EQUAL
59619: IFFALSE 59629
// sPower := true ;
59621: LD_ADDR_EXP 98
59625: PUSH
59626: LD_INT 1
59628: ST_TO_ADDR
// if p3 = 33 then
59629: LD_VAR 0 3
59633: PUSH
59634: LD_INT 33
59636: EQUAL
59637: IFFALSE 59647
// sRandom := true ;
59639: LD_ADDR_EXP 99
59643: PUSH
59644: LD_INT 1
59646: ST_TO_ADDR
// if p3 = 34 then
59647: LD_VAR 0 3
59651: PUSH
59652: LD_INT 34
59654: EQUAL
59655: IFFALSE 59665
// sShield := true ;
59657: LD_ADDR_EXP 100
59661: PUSH
59662: LD_INT 1
59664: ST_TO_ADDR
// if p3 = 35 then
59665: LD_VAR 0 3
59669: PUSH
59670: LD_INT 35
59672: EQUAL
59673: IFFALSE 59683
// sTime := true ;
59675: LD_ADDR_EXP 101
59679: PUSH
59680: LD_INT 1
59682: ST_TO_ADDR
// if p3 = 36 then
59683: LD_VAR 0 3
59687: PUSH
59688: LD_INT 36
59690: EQUAL
59691: IFFALSE 59701
// sTools := true ;
59693: LD_ADDR_EXP 102
59697: PUSH
59698: LD_INT 1
59700: ST_TO_ADDR
// if p3 = 101 then
59701: LD_VAR 0 3
59705: PUSH
59706: LD_INT 101
59708: EQUAL
59709: IFFALSE 59719
// sSold := true ;
59711: LD_ADDR_EXP 67
59715: PUSH
59716: LD_INT 1
59718: ST_TO_ADDR
// if p3 = 102 then
59719: LD_VAR 0 3
59723: PUSH
59724: LD_INT 102
59726: EQUAL
59727: IFFALSE 59737
// sDiff := true ;
59729: LD_ADDR_EXP 68
59733: PUSH
59734: LD_INT 1
59736: ST_TO_ADDR
// if p3 = 103 then
59737: LD_VAR 0 3
59741: PUSH
59742: LD_INT 103
59744: EQUAL
59745: IFFALSE 59755
// sFog := true ;
59747: LD_ADDR_EXP 71
59751: PUSH
59752: LD_INT 1
59754: ST_TO_ADDR
// if p3 = 104 then
59755: LD_VAR 0 3
59759: PUSH
59760: LD_INT 104
59762: EQUAL
59763: IFFALSE 59773
// sReset := true ;
59765: LD_ADDR_EXP 72
59769: PUSH
59770: LD_INT 1
59772: ST_TO_ADDR
// if p3 = 105 then
59773: LD_VAR 0 3
59777: PUSH
59778: LD_INT 105
59780: EQUAL
59781: IFFALSE 59791
// sSun := true ;
59783: LD_ADDR_EXP 73
59787: PUSH
59788: LD_INT 1
59790: ST_TO_ADDR
// if p3 = 106 then
59791: LD_VAR 0 3
59795: PUSH
59796: LD_INT 106
59798: EQUAL
59799: IFFALSE 59809
// sTiger := true ;
59801: LD_ADDR_EXP 69
59805: PUSH
59806: LD_INT 1
59808: ST_TO_ADDR
// if p3 = 107 then
59809: LD_VAR 0 3
59813: PUSH
59814: LD_INT 107
59816: EQUAL
59817: IFFALSE 59827
// sBomb := true ;
59819: LD_ADDR_EXP 70
59823: PUSH
59824: LD_INT 1
59826: ST_TO_ADDR
// if p3 = 108 then
59827: LD_VAR 0 3
59831: PUSH
59832: LD_INT 108
59834: EQUAL
59835: IFFALSE 59845
// sWound := true ;
59837: LD_ADDR_EXP 78
59841: PUSH
59842: LD_INT 1
59844: ST_TO_ADDR
// if p3 = 109 then
59845: LD_VAR 0 3
59849: PUSH
59850: LD_INT 109
59852: EQUAL
59853: IFFALSE 59863
// sBetray := true ;
59855: LD_ADDR_EXP 82
59859: PUSH
59860: LD_INT 1
59862: ST_TO_ADDR
// if p3 = 110 then
59863: LD_VAR 0 3
59867: PUSH
59868: LD_INT 110
59870: EQUAL
59871: IFFALSE 59881
// sContamin := true ;
59873: LD_ADDR_EXP 83
59877: PUSH
59878: LD_INT 1
59880: ST_TO_ADDR
// if p3 = 111 then
59881: LD_VAR 0 3
59885: PUSH
59886: LD_INT 111
59888: EQUAL
59889: IFFALSE 59899
// sOil := true ;
59891: LD_ADDR_EXP 85
59895: PUSH
59896: LD_INT 1
59898: ST_TO_ADDR
// if p3 = 112 then
59899: LD_VAR 0 3
59903: PUSH
59904: LD_INT 112
59906: EQUAL
59907: IFFALSE 59917
// sStu := true ;
59909: LD_ADDR_EXP 89
59913: PUSH
59914: LD_INT 1
59916: ST_TO_ADDR
// if p3 = 113 then
59917: LD_VAR 0 3
59921: PUSH
59922: LD_INT 113
59924: EQUAL
59925: IFFALSE 59935
// sBazooka := true ;
59927: LD_ADDR_EXP 92
59931: PUSH
59932: LD_INT 1
59934: ST_TO_ADDR
// if p3 = 114 then
59935: LD_VAR 0 3
59939: PUSH
59940: LD_INT 114
59942: EQUAL
59943: IFFALSE 59953
// sMortar := true ;
59945: LD_ADDR_EXP 93
59949: PUSH
59950: LD_INT 1
59952: ST_TO_ADDR
// if p3 = 115 then
59953: LD_VAR 0 3
59957: PUSH
59958: LD_INT 115
59960: EQUAL
59961: IFFALSE 59971
// sRanger := true ;
59963: LD_ADDR_EXP 103
59967: PUSH
59968: LD_INT 1
59970: ST_TO_ADDR
// if p3 = 116 then
59971: LD_VAR 0 3
59975: PUSH
59976: LD_INT 116
59978: EQUAL
59979: IFFALSE 59989
// sComputer := true ;
59981: LD_ADDR_EXP 104
59985: PUSH
59986: LD_INT 1
59988: ST_TO_ADDR
// if p3 = 117 then
59989: LD_VAR 0 3
59993: PUSH
59994: LD_INT 117
59996: EQUAL
59997: IFFALSE 60007
// s30 := true ;
59999: LD_ADDR_EXP 105
60003: PUSH
60004: LD_INT 1
60006: ST_TO_ADDR
// if p3 = 118 then
60007: LD_VAR 0 3
60011: PUSH
60012: LD_INT 118
60014: EQUAL
60015: IFFALSE 60025
// s60 := true ;
60017: LD_ADDR_EXP 106
60021: PUSH
60022: LD_INT 1
60024: ST_TO_ADDR
// end ; if p2 = hack_mode then
60025: LD_VAR 0 2
60029: PUSH
60030: LD_INT 101
60032: EQUAL
60033: IFFALSE 60161
// begin case p3 of 1 :
60035: LD_VAR 0 3
60039: PUSH
60040: LD_INT 1
60042: DOUBLE
60043: EQUAL
60044: IFTRUE 60048
60046: GO 60055
60048: POP
// hHackUnlimitedResources ; 2 :
60049: CALL 72308 0 0
60053: GO 60161
60055: LD_INT 2
60057: DOUBLE
60058: EQUAL
60059: IFTRUE 60063
60061: GO 60070
60063: POP
// hHackSetLevel10 ; 3 :
60064: CALL 72441 0 0
60068: GO 60161
60070: LD_INT 3
60072: DOUBLE
60073: EQUAL
60074: IFTRUE 60078
60076: GO 60085
60078: POP
// hHackSetLevel10YourUnits ; 4 :
60079: CALL 72526 0 0
60083: GO 60161
60085: LD_INT 4
60087: DOUBLE
60088: EQUAL
60089: IFTRUE 60093
60091: GO 60100
60093: POP
// hHackInvincible ; 5 :
60094: CALL 72974 0 0
60098: GO 60161
60100: LD_INT 5
60102: DOUBLE
60103: EQUAL
60104: IFTRUE 60108
60106: GO 60115
60108: POP
// hHackInvisible ; 6 :
60109: CALL 73085 0 0
60113: GO 60161
60115: LD_INT 6
60117: DOUBLE
60118: EQUAL
60119: IFTRUE 60123
60121: GO 60130
60123: POP
// hHackChangeYourSide ; 7 :
60124: CALL 73142 0 0
60128: GO 60161
60130: LD_INT 7
60132: DOUBLE
60133: EQUAL
60134: IFTRUE 60138
60136: GO 60145
60138: POP
// hHackChangeUnitSide ; 8 :
60139: CALL 73184 0 0
60143: GO 60161
60145: LD_INT 8
60147: DOUBLE
60148: EQUAL
60149: IFTRUE 60153
60151: GO 60160
60153: POP
// hHackFog ; end ;
60154: CALL 73285 0 0
60158: GO 60161
60160: POP
// end ; if p2 = game_save_mode then
60161: LD_VAR 0 2
60165: PUSH
60166: LD_INT 102
60168: EQUAL
60169: IFFALSE 60224
// begin if p3 = 1 then
60171: LD_VAR 0 3
60175: PUSH
60176: LD_INT 1
60178: EQUAL
60179: IFFALSE 60191
// globalGameSaveCounter := p4 ;
60181: LD_ADDR_EXP 49
60185: PUSH
60186: LD_VAR 0 4
60190: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
60191: LD_VAR 0 3
60195: PUSH
60196: LD_INT 2
60198: EQUAL
60199: PUSH
60200: LD_EXP 49
60204: AND
60205: IFFALSE 60224
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
60207: LD_STRING setGameSaveCounter(
60209: PUSH
60210: LD_EXP 49
60214: STR
60215: PUSH
60216: LD_STRING )
60218: STR
60219: PPUSH
60220: CALL_OW 559
// end ; end ;
60224: LD_VAR 0 7
60228: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
60229: LD_INT 0
60231: PPUSH
// streamModeActive := false ;
60232: LD_ADDR_EXP 50
60236: PUSH
60237: LD_INT 0
60239: ST_TO_ADDR
// normalCounter := 36 ;
60240: LD_ADDR_EXP 51
60244: PUSH
60245: LD_INT 36
60247: ST_TO_ADDR
// hardcoreCounter := 18 ;
60248: LD_ADDR_EXP 52
60252: PUSH
60253: LD_INT 18
60255: ST_TO_ADDR
// sRocket := false ;
60256: LD_ADDR_EXP 55
60260: PUSH
60261: LD_INT 0
60263: ST_TO_ADDR
// sSpeed := false ;
60264: LD_ADDR_EXP 54
60268: PUSH
60269: LD_INT 0
60271: ST_TO_ADDR
// sEngine := false ;
60272: LD_ADDR_EXP 56
60276: PUSH
60277: LD_INT 0
60279: ST_TO_ADDR
// sSpec := false ;
60280: LD_ADDR_EXP 53
60284: PUSH
60285: LD_INT 0
60287: ST_TO_ADDR
// sLevel := false ;
60288: LD_ADDR_EXP 57
60292: PUSH
60293: LD_INT 0
60295: ST_TO_ADDR
// sArmoury := false ;
60296: LD_ADDR_EXP 58
60300: PUSH
60301: LD_INT 0
60303: ST_TO_ADDR
// sRadar := false ;
60304: LD_ADDR_EXP 59
60308: PUSH
60309: LD_INT 0
60311: ST_TO_ADDR
// sBunker := false ;
60312: LD_ADDR_EXP 60
60316: PUSH
60317: LD_INT 0
60319: ST_TO_ADDR
// sHack := false ;
60320: LD_ADDR_EXP 61
60324: PUSH
60325: LD_INT 0
60327: ST_TO_ADDR
// sFire := false ;
60328: LD_ADDR_EXP 62
60332: PUSH
60333: LD_INT 0
60335: ST_TO_ADDR
// sRefresh := false ;
60336: LD_ADDR_EXP 63
60340: PUSH
60341: LD_INT 0
60343: ST_TO_ADDR
// sExp := false ;
60344: LD_ADDR_EXP 64
60348: PUSH
60349: LD_INT 0
60351: ST_TO_ADDR
// sDepot := false ;
60352: LD_ADDR_EXP 65
60356: PUSH
60357: LD_INT 0
60359: ST_TO_ADDR
// sFlag := false ;
60360: LD_ADDR_EXP 66
60364: PUSH
60365: LD_INT 0
60367: ST_TO_ADDR
// sKamikadze := false ;
60368: LD_ADDR_EXP 74
60372: PUSH
60373: LD_INT 0
60375: ST_TO_ADDR
// sTroll := false ;
60376: LD_ADDR_EXP 75
60380: PUSH
60381: LD_INT 0
60383: ST_TO_ADDR
// sSlow := false ;
60384: LD_ADDR_EXP 76
60388: PUSH
60389: LD_INT 0
60391: ST_TO_ADDR
// sLack := false ;
60392: LD_ADDR_EXP 77
60396: PUSH
60397: LD_INT 0
60399: ST_TO_ADDR
// sTank := false ;
60400: LD_ADDR_EXP 79
60404: PUSH
60405: LD_INT 0
60407: ST_TO_ADDR
// sRemote := false ;
60408: LD_ADDR_EXP 80
60412: PUSH
60413: LD_INT 0
60415: ST_TO_ADDR
// sPowell := false ;
60416: LD_ADDR_EXP 81
60420: PUSH
60421: LD_INT 0
60423: ST_TO_ADDR
// sTeleport := false ;
60424: LD_ADDR_EXP 84
60428: PUSH
60429: LD_INT 0
60431: ST_TO_ADDR
// sOilTower := false ;
60432: LD_ADDR_EXP 86
60436: PUSH
60437: LD_INT 0
60439: ST_TO_ADDR
// sShovel := false ;
60440: LD_ADDR_EXP 87
60444: PUSH
60445: LD_INT 0
60447: ST_TO_ADDR
// sSheik := false ;
60448: LD_ADDR_EXP 88
60452: PUSH
60453: LD_INT 0
60455: ST_TO_ADDR
// sEarthquake := false ;
60456: LD_ADDR_EXP 90
60460: PUSH
60461: LD_INT 0
60463: ST_TO_ADDR
// sAI := false ;
60464: LD_ADDR_EXP 91
60468: PUSH
60469: LD_INT 0
60471: ST_TO_ADDR
// sCargo := false ;
60472: LD_ADDR_EXP 94
60476: PUSH
60477: LD_INT 0
60479: ST_TO_ADDR
// sDLaser := false ;
60480: LD_ADDR_EXP 95
60484: PUSH
60485: LD_INT 0
60487: ST_TO_ADDR
// sExchange := false ;
60488: LD_ADDR_EXP 96
60492: PUSH
60493: LD_INT 0
60495: ST_TO_ADDR
// sFac := false ;
60496: LD_ADDR_EXP 97
60500: PUSH
60501: LD_INT 0
60503: ST_TO_ADDR
// sPower := false ;
60504: LD_ADDR_EXP 98
60508: PUSH
60509: LD_INT 0
60511: ST_TO_ADDR
// sRandom := false ;
60512: LD_ADDR_EXP 99
60516: PUSH
60517: LD_INT 0
60519: ST_TO_ADDR
// sShield := false ;
60520: LD_ADDR_EXP 100
60524: PUSH
60525: LD_INT 0
60527: ST_TO_ADDR
// sTime := false ;
60528: LD_ADDR_EXP 101
60532: PUSH
60533: LD_INT 0
60535: ST_TO_ADDR
// sTools := false ;
60536: LD_ADDR_EXP 102
60540: PUSH
60541: LD_INT 0
60543: ST_TO_ADDR
// sSold := false ;
60544: LD_ADDR_EXP 67
60548: PUSH
60549: LD_INT 0
60551: ST_TO_ADDR
// sDiff := false ;
60552: LD_ADDR_EXP 68
60556: PUSH
60557: LD_INT 0
60559: ST_TO_ADDR
// sFog := false ;
60560: LD_ADDR_EXP 71
60564: PUSH
60565: LD_INT 0
60567: ST_TO_ADDR
// sReset := false ;
60568: LD_ADDR_EXP 72
60572: PUSH
60573: LD_INT 0
60575: ST_TO_ADDR
// sSun := false ;
60576: LD_ADDR_EXP 73
60580: PUSH
60581: LD_INT 0
60583: ST_TO_ADDR
// sTiger := false ;
60584: LD_ADDR_EXP 69
60588: PUSH
60589: LD_INT 0
60591: ST_TO_ADDR
// sBomb := false ;
60592: LD_ADDR_EXP 70
60596: PUSH
60597: LD_INT 0
60599: ST_TO_ADDR
// sWound := false ;
60600: LD_ADDR_EXP 78
60604: PUSH
60605: LD_INT 0
60607: ST_TO_ADDR
// sBetray := false ;
60608: LD_ADDR_EXP 82
60612: PUSH
60613: LD_INT 0
60615: ST_TO_ADDR
// sContamin := false ;
60616: LD_ADDR_EXP 83
60620: PUSH
60621: LD_INT 0
60623: ST_TO_ADDR
// sOil := false ;
60624: LD_ADDR_EXP 85
60628: PUSH
60629: LD_INT 0
60631: ST_TO_ADDR
// sStu := false ;
60632: LD_ADDR_EXP 89
60636: PUSH
60637: LD_INT 0
60639: ST_TO_ADDR
// sBazooka := false ;
60640: LD_ADDR_EXP 92
60644: PUSH
60645: LD_INT 0
60647: ST_TO_ADDR
// sMortar := false ;
60648: LD_ADDR_EXP 93
60652: PUSH
60653: LD_INT 0
60655: ST_TO_ADDR
// sRanger := false ;
60656: LD_ADDR_EXP 103
60660: PUSH
60661: LD_INT 0
60663: ST_TO_ADDR
// sComputer := false ;
60664: LD_ADDR_EXP 104
60668: PUSH
60669: LD_INT 0
60671: ST_TO_ADDR
// s30 := false ;
60672: LD_ADDR_EXP 105
60676: PUSH
60677: LD_INT 0
60679: ST_TO_ADDR
// s60 := false ;
60680: LD_ADDR_EXP 106
60684: PUSH
60685: LD_INT 0
60687: ST_TO_ADDR
// end ;
60688: LD_VAR 0 1
60692: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
60693: LD_INT 0
60695: PPUSH
60696: PPUSH
60697: PPUSH
60698: PPUSH
60699: PPUSH
60700: PPUSH
60701: PPUSH
// result := [ ] ;
60702: LD_ADDR_VAR 0 2
60706: PUSH
60707: EMPTY
60708: ST_TO_ADDR
// if campaign_id = 1 then
60709: LD_OWVAR 69
60713: PUSH
60714: LD_INT 1
60716: EQUAL
60717: IFFALSE 63883
// begin case mission_number of 1 :
60719: LD_OWVAR 70
60723: PUSH
60724: LD_INT 1
60726: DOUBLE
60727: EQUAL
60728: IFTRUE 60732
60730: GO 60808
60732: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
60733: LD_ADDR_VAR 0 2
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: LD_INT 4
60743: PUSH
60744: LD_INT 11
60746: PUSH
60747: LD_INT 12
60749: PUSH
60750: LD_INT 15
60752: PUSH
60753: LD_INT 16
60755: PUSH
60756: LD_INT 22
60758: PUSH
60759: LD_INT 23
60761: PUSH
60762: LD_INT 26
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 101
60778: PUSH
60779: LD_INT 102
60781: PUSH
60782: LD_INT 106
60784: PUSH
60785: LD_INT 116
60787: PUSH
60788: LD_INT 117
60790: PUSH
60791: LD_INT 118
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: ST_TO_ADDR
60806: GO 63881
60808: LD_INT 2
60810: DOUBLE
60811: EQUAL
60812: IFTRUE 60816
60814: GO 60900
60816: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
60817: LD_ADDR_VAR 0 2
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: LD_INT 4
60827: PUSH
60828: LD_INT 11
60830: PUSH
60831: LD_INT 12
60833: PUSH
60834: LD_INT 15
60836: PUSH
60837: LD_INT 16
60839: PUSH
60840: LD_INT 22
60842: PUSH
60843: LD_INT 23
60845: PUSH
60846: LD_INT 26
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 101
60862: PUSH
60863: LD_INT 102
60865: PUSH
60866: LD_INT 105
60868: PUSH
60869: LD_INT 106
60871: PUSH
60872: LD_INT 108
60874: PUSH
60875: LD_INT 116
60877: PUSH
60878: LD_INT 117
60880: PUSH
60881: LD_INT 118
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: ST_TO_ADDR
60898: GO 63881
60900: LD_INT 3
60902: DOUBLE
60903: EQUAL
60904: IFTRUE 60908
60906: GO 60996
60908: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60909: LD_ADDR_VAR 0 2
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: LD_INT 4
60919: PUSH
60920: LD_INT 5
60922: PUSH
60923: LD_INT 11
60925: PUSH
60926: LD_INT 12
60928: PUSH
60929: LD_INT 15
60931: PUSH
60932: LD_INT 16
60934: PUSH
60935: LD_INT 22
60937: PUSH
60938: LD_INT 26
60940: PUSH
60941: LD_INT 36
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 101
60958: PUSH
60959: LD_INT 102
60961: PUSH
60962: LD_INT 105
60964: PUSH
60965: LD_INT 106
60967: PUSH
60968: LD_INT 108
60970: PUSH
60971: LD_INT 116
60973: PUSH
60974: LD_INT 117
60976: PUSH
60977: LD_INT 118
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: ST_TO_ADDR
60994: GO 63881
60996: LD_INT 4
60998: DOUBLE
60999: EQUAL
61000: IFTRUE 61004
61002: GO 61100
61004: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
61005: LD_ADDR_VAR 0 2
61009: PUSH
61010: LD_INT 2
61012: PUSH
61013: LD_INT 4
61015: PUSH
61016: LD_INT 5
61018: PUSH
61019: LD_INT 8
61021: PUSH
61022: LD_INT 11
61024: PUSH
61025: LD_INT 12
61027: PUSH
61028: LD_INT 15
61030: PUSH
61031: LD_INT 16
61033: PUSH
61034: LD_INT 22
61036: PUSH
61037: LD_INT 23
61039: PUSH
61040: LD_INT 26
61042: PUSH
61043: LD_INT 36
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 101
61062: PUSH
61063: LD_INT 102
61065: PUSH
61066: LD_INT 105
61068: PUSH
61069: LD_INT 106
61071: PUSH
61072: LD_INT 108
61074: PUSH
61075: LD_INT 116
61077: PUSH
61078: LD_INT 117
61080: PUSH
61081: LD_INT 118
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: ST_TO_ADDR
61098: GO 63881
61100: LD_INT 5
61102: DOUBLE
61103: EQUAL
61104: IFTRUE 61108
61106: GO 61220
61108: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
61109: LD_ADDR_VAR 0 2
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: LD_INT 4
61119: PUSH
61120: LD_INT 5
61122: PUSH
61123: LD_INT 6
61125: PUSH
61126: LD_INT 8
61128: PUSH
61129: LD_INT 11
61131: PUSH
61132: LD_INT 12
61134: PUSH
61135: LD_INT 15
61137: PUSH
61138: LD_INT 16
61140: PUSH
61141: LD_INT 22
61143: PUSH
61144: LD_INT 23
61146: PUSH
61147: LD_INT 25
61149: PUSH
61150: LD_INT 26
61152: PUSH
61153: LD_INT 36
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 101
61174: PUSH
61175: LD_INT 102
61177: PUSH
61178: LD_INT 105
61180: PUSH
61181: LD_INT 106
61183: PUSH
61184: LD_INT 108
61186: PUSH
61187: LD_INT 109
61189: PUSH
61190: LD_INT 112
61192: PUSH
61193: LD_INT 116
61195: PUSH
61196: LD_INT 117
61198: PUSH
61199: LD_INT 118
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: ST_TO_ADDR
61218: GO 63881
61220: LD_INT 6
61222: DOUBLE
61223: EQUAL
61224: IFTRUE 61228
61226: GO 61360
61228: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
61229: LD_ADDR_VAR 0 2
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: LD_INT 4
61239: PUSH
61240: LD_INT 5
61242: PUSH
61243: LD_INT 6
61245: PUSH
61246: LD_INT 8
61248: PUSH
61249: LD_INT 11
61251: PUSH
61252: LD_INT 12
61254: PUSH
61255: LD_INT 15
61257: PUSH
61258: LD_INT 16
61260: PUSH
61261: LD_INT 20
61263: PUSH
61264: LD_INT 21
61266: PUSH
61267: LD_INT 22
61269: PUSH
61270: LD_INT 23
61272: PUSH
61273: LD_INT 25
61275: PUSH
61276: LD_INT 26
61278: PUSH
61279: LD_INT 30
61281: PUSH
61282: LD_INT 31
61284: PUSH
61285: LD_INT 32
61287: PUSH
61288: LD_INT 36
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 101
61314: PUSH
61315: LD_INT 102
61317: PUSH
61318: LD_INT 105
61320: PUSH
61321: LD_INT 106
61323: PUSH
61324: LD_INT 108
61326: PUSH
61327: LD_INT 109
61329: PUSH
61330: LD_INT 112
61332: PUSH
61333: LD_INT 116
61335: PUSH
61336: LD_INT 117
61338: PUSH
61339: LD_INT 118
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: ST_TO_ADDR
61358: GO 63881
61360: LD_INT 7
61362: DOUBLE
61363: EQUAL
61364: IFTRUE 61368
61366: GO 61480
61368: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
61369: LD_ADDR_VAR 0 2
61373: PUSH
61374: LD_INT 2
61376: PUSH
61377: LD_INT 4
61379: PUSH
61380: LD_INT 5
61382: PUSH
61383: LD_INT 7
61385: PUSH
61386: LD_INT 11
61388: PUSH
61389: LD_INT 12
61391: PUSH
61392: LD_INT 15
61394: PUSH
61395: LD_INT 16
61397: PUSH
61398: LD_INT 20
61400: PUSH
61401: LD_INT 21
61403: PUSH
61404: LD_INT 22
61406: PUSH
61407: LD_INT 23
61409: PUSH
61410: LD_INT 25
61412: PUSH
61413: LD_INT 26
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 101
61434: PUSH
61435: LD_INT 102
61437: PUSH
61438: LD_INT 103
61440: PUSH
61441: LD_INT 105
61443: PUSH
61444: LD_INT 106
61446: PUSH
61447: LD_INT 108
61449: PUSH
61450: LD_INT 112
61452: PUSH
61453: LD_INT 116
61455: PUSH
61456: LD_INT 117
61458: PUSH
61459: LD_INT 118
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: ST_TO_ADDR
61478: GO 63881
61480: LD_INT 8
61482: DOUBLE
61483: EQUAL
61484: IFTRUE 61488
61486: GO 61628
61488: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
61489: LD_ADDR_VAR 0 2
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: LD_INT 4
61499: PUSH
61500: LD_INT 5
61502: PUSH
61503: LD_INT 6
61505: PUSH
61506: LD_INT 7
61508: PUSH
61509: LD_INT 8
61511: PUSH
61512: LD_INT 11
61514: PUSH
61515: LD_INT 12
61517: PUSH
61518: LD_INT 15
61520: PUSH
61521: LD_INT 16
61523: PUSH
61524: LD_INT 20
61526: PUSH
61527: LD_INT 21
61529: PUSH
61530: LD_INT 22
61532: PUSH
61533: LD_INT 23
61535: PUSH
61536: LD_INT 25
61538: PUSH
61539: LD_INT 26
61541: PUSH
61542: LD_INT 30
61544: PUSH
61545: LD_INT 31
61547: PUSH
61548: LD_INT 32
61550: PUSH
61551: LD_INT 36
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 101
61578: PUSH
61579: LD_INT 102
61581: PUSH
61582: LD_INT 103
61584: PUSH
61585: LD_INT 105
61587: PUSH
61588: LD_INT 106
61590: PUSH
61591: LD_INT 108
61593: PUSH
61594: LD_INT 109
61596: PUSH
61597: LD_INT 112
61599: PUSH
61600: LD_INT 116
61602: PUSH
61603: LD_INT 117
61605: PUSH
61606: LD_INT 118
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: ST_TO_ADDR
61626: GO 63881
61628: LD_INT 9
61630: DOUBLE
61631: EQUAL
61632: IFTRUE 61636
61634: GO 61784
61636: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
61637: LD_ADDR_VAR 0 2
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: LD_INT 4
61647: PUSH
61648: LD_INT 5
61650: PUSH
61651: LD_INT 6
61653: PUSH
61654: LD_INT 7
61656: PUSH
61657: LD_INT 8
61659: PUSH
61660: LD_INT 11
61662: PUSH
61663: LD_INT 12
61665: PUSH
61666: LD_INT 15
61668: PUSH
61669: LD_INT 16
61671: PUSH
61672: LD_INT 20
61674: PUSH
61675: LD_INT 21
61677: PUSH
61678: LD_INT 22
61680: PUSH
61681: LD_INT 23
61683: PUSH
61684: LD_INT 25
61686: PUSH
61687: LD_INT 26
61689: PUSH
61690: LD_INT 28
61692: PUSH
61693: LD_INT 30
61695: PUSH
61696: LD_INT 31
61698: PUSH
61699: LD_INT 32
61701: PUSH
61702: LD_INT 36
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 101
61730: PUSH
61731: LD_INT 102
61733: PUSH
61734: LD_INT 103
61736: PUSH
61737: LD_INT 105
61739: PUSH
61740: LD_INT 106
61742: PUSH
61743: LD_INT 108
61745: PUSH
61746: LD_INT 109
61748: PUSH
61749: LD_INT 112
61751: PUSH
61752: LD_INT 114
61754: PUSH
61755: LD_INT 116
61757: PUSH
61758: LD_INT 117
61760: PUSH
61761: LD_INT 118
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: ST_TO_ADDR
61782: GO 63881
61784: LD_INT 10
61786: DOUBLE
61787: EQUAL
61788: IFTRUE 61792
61790: GO 61988
61792: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
61793: LD_ADDR_VAR 0 2
61797: PUSH
61798: LD_INT 2
61800: PUSH
61801: LD_INT 4
61803: PUSH
61804: LD_INT 5
61806: PUSH
61807: LD_INT 6
61809: PUSH
61810: LD_INT 7
61812: PUSH
61813: LD_INT 8
61815: PUSH
61816: LD_INT 9
61818: PUSH
61819: LD_INT 10
61821: PUSH
61822: LD_INT 11
61824: PUSH
61825: LD_INT 12
61827: PUSH
61828: LD_INT 13
61830: PUSH
61831: LD_INT 14
61833: PUSH
61834: LD_INT 15
61836: PUSH
61837: LD_INT 16
61839: PUSH
61840: LD_INT 17
61842: PUSH
61843: LD_INT 18
61845: PUSH
61846: LD_INT 19
61848: PUSH
61849: LD_INT 20
61851: PUSH
61852: LD_INT 21
61854: PUSH
61855: LD_INT 22
61857: PUSH
61858: LD_INT 23
61860: PUSH
61861: LD_INT 24
61863: PUSH
61864: LD_INT 25
61866: PUSH
61867: LD_INT 26
61869: PUSH
61870: LD_INT 28
61872: PUSH
61873: LD_INT 30
61875: PUSH
61876: LD_INT 31
61878: PUSH
61879: LD_INT 32
61881: PUSH
61882: LD_INT 36
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 101
61918: PUSH
61919: LD_INT 102
61921: PUSH
61922: LD_INT 103
61924: PUSH
61925: LD_INT 104
61927: PUSH
61928: LD_INT 105
61930: PUSH
61931: LD_INT 106
61933: PUSH
61934: LD_INT 107
61936: PUSH
61937: LD_INT 108
61939: PUSH
61940: LD_INT 109
61942: PUSH
61943: LD_INT 110
61945: PUSH
61946: LD_INT 111
61948: PUSH
61949: LD_INT 112
61951: PUSH
61952: LD_INT 114
61954: PUSH
61955: LD_INT 116
61957: PUSH
61958: LD_INT 117
61960: PUSH
61961: LD_INT 118
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: ST_TO_ADDR
61986: GO 63881
61988: LD_INT 11
61990: DOUBLE
61991: EQUAL
61992: IFTRUE 61996
61994: GO 62200
61996: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61997: LD_ADDR_VAR 0 2
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: LD_INT 4
62010: PUSH
62011: LD_INT 5
62013: PUSH
62014: LD_INT 6
62016: PUSH
62017: LD_INT 7
62019: PUSH
62020: LD_INT 8
62022: PUSH
62023: LD_INT 9
62025: PUSH
62026: LD_INT 10
62028: PUSH
62029: LD_INT 11
62031: PUSH
62032: LD_INT 12
62034: PUSH
62035: LD_INT 13
62037: PUSH
62038: LD_INT 14
62040: PUSH
62041: LD_INT 15
62043: PUSH
62044: LD_INT 16
62046: PUSH
62047: LD_INT 17
62049: PUSH
62050: LD_INT 18
62052: PUSH
62053: LD_INT 19
62055: PUSH
62056: LD_INT 20
62058: PUSH
62059: LD_INT 21
62061: PUSH
62062: LD_INT 22
62064: PUSH
62065: LD_INT 23
62067: PUSH
62068: LD_INT 24
62070: PUSH
62071: LD_INT 25
62073: PUSH
62074: LD_INT 26
62076: PUSH
62077: LD_INT 28
62079: PUSH
62080: LD_INT 30
62082: PUSH
62083: LD_INT 31
62085: PUSH
62086: LD_INT 32
62088: PUSH
62089: LD_INT 34
62091: PUSH
62092: LD_INT 36
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 101
62130: PUSH
62131: LD_INT 102
62133: PUSH
62134: LD_INT 103
62136: PUSH
62137: LD_INT 104
62139: PUSH
62140: LD_INT 105
62142: PUSH
62143: LD_INT 106
62145: PUSH
62146: LD_INT 107
62148: PUSH
62149: LD_INT 108
62151: PUSH
62152: LD_INT 109
62154: PUSH
62155: LD_INT 110
62157: PUSH
62158: LD_INT 111
62160: PUSH
62161: LD_INT 112
62163: PUSH
62164: LD_INT 114
62166: PUSH
62167: LD_INT 116
62169: PUSH
62170: LD_INT 117
62172: PUSH
62173: LD_INT 118
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: ST_TO_ADDR
62198: GO 63881
62200: LD_INT 12
62202: DOUBLE
62203: EQUAL
62204: IFTRUE 62208
62206: GO 62428
62208: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
62209: LD_ADDR_VAR 0 2
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: LD_INT 3
62222: PUSH
62223: LD_INT 4
62225: PUSH
62226: LD_INT 5
62228: PUSH
62229: LD_INT 6
62231: PUSH
62232: LD_INT 7
62234: PUSH
62235: LD_INT 8
62237: PUSH
62238: LD_INT 9
62240: PUSH
62241: LD_INT 10
62243: PUSH
62244: LD_INT 11
62246: PUSH
62247: LD_INT 12
62249: PUSH
62250: LD_INT 13
62252: PUSH
62253: LD_INT 14
62255: PUSH
62256: LD_INT 15
62258: PUSH
62259: LD_INT 16
62261: PUSH
62262: LD_INT 17
62264: PUSH
62265: LD_INT 18
62267: PUSH
62268: LD_INT 19
62270: PUSH
62271: LD_INT 20
62273: PUSH
62274: LD_INT 21
62276: PUSH
62277: LD_INT 22
62279: PUSH
62280: LD_INT 23
62282: PUSH
62283: LD_INT 24
62285: PUSH
62286: LD_INT 25
62288: PUSH
62289: LD_INT 26
62291: PUSH
62292: LD_INT 27
62294: PUSH
62295: LD_INT 28
62297: PUSH
62298: LD_INT 30
62300: PUSH
62301: LD_INT 31
62303: PUSH
62304: LD_INT 32
62306: PUSH
62307: LD_INT 33
62309: PUSH
62310: LD_INT 34
62312: PUSH
62313: LD_INT 36
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 101
62354: PUSH
62355: LD_INT 102
62357: PUSH
62358: LD_INT 103
62360: PUSH
62361: LD_INT 104
62363: PUSH
62364: LD_INT 105
62366: PUSH
62367: LD_INT 106
62369: PUSH
62370: LD_INT 107
62372: PUSH
62373: LD_INT 108
62375: PUSH
62376: LD_INT 109
62378: PUSH
62379: LD_INT 110
62381: PUSH
62382: LD_INT 111
62384: PUSH
62385: LD_INT 112
62387: PUSH
62388: LD_INT 113
62390: PUSH
62391: LD_INT 114
62393: PUSH
62394: LD_INT 116
62396: PUSH
62397: LD_INT 117
62399: PUSH
62400: LD_INT 118
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: ST_TO_ADDR
62426: GO 63881
62428: LD_INT 13
62430: DOUBLE
62431: EQUAL
62432: IFTRUE 62436
62434: GO 62644
62436: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
62437: LD_ADDR_VAR 0 2
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: LD_INT 3
62450: PUSH
62451: LD_INT 4
62453: PUSH
62454: LD_INT 5
62456: PUSH
62457: LD_INT 8
62459: PUSH
62460: LD_INT 9
62462: PUSH
62463: LD_INT 10
62465: PUSH
62466: LD_INT 11
62468: PUSH
62469: LD_INT 12
62471: PUSH
62472: LD_INT 14
62474: PUSH
62475: LD_INT 15
62477: PUSH
62478: LD_INT 16
62480: PUSH
62481: LD_INT 17
62483: PUSH
62484: LD_INT 18
62486: PUSH
62487: LD_INT 19
62489: PUSH
62490: LD_INT 20
62492: PUSH
62493: LD_INT 21
62495: PUSH
62496: LD_INT 22
62498: PUSH
62499: LD_INT 23
62501: PUSH
62502: LD_INT 24
62504: PUSH
62505: LD_INT 25
62507: PUSH
62508: LD_INT 26
62510: PUSH
62511: LD_INT 27
62513: PUSH
62514: LD_INT 28
62516: PUSH
62517: LD_INT 30
62519: PUSH
62520: LD_INT 31
62522: PUSH
62523: LD_INT 32
62525: PUSH
62526: LD_INT 33
62528: PUSH
62529: LD_INT 34
62531: PUSH
62532: LD_INT 36
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 101
62570: PUSH
62571: LD_INT 102
62573: PUSH
62574: LD_INT 103
62576: PUSH
62577: LD_INT 104
62579: PUSH
62580: LD_INT 105
62582: PUSH
62583: LD_INT 106
62585: PUSH
62586: LD_INT 107
62588: PUSH
62589: LD_INT 108
62591: PUSH
62592: LD_INT 109
62594: PUSH
62595: LD_INT 110
62597: PUSH
62598: LD_INT 111
62600: PUSH
62601: LD_INT 112
62603: PUSH
62604: LD_INT 113
62606: PUSH
62607: LD_INT 114
62609: PUSH
62610: LD_INT 116
62612: PUSH
62613: LD_INT 117
62615: PUSH
62616: LD_INT 118
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: ST_TO_ADDR
62642: GO 63881
62644: LD_INT 14
62646: DOUBLE
62647: EQUAL
62648: IFTRUE 62652
62650: GO 62876
62652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
62653: LD_ADDR_VAR 0 2
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: LD_INT 2
62663: PUSH
62664: LD_INT 3
62666: PUSH
62667: LD_INT 4
62669: PUSH
62670: LD_INT 5
62672: PUSH
62673: LD_INT 6
62675: PUSH
62676: LD_INT 7
62678: PUSH
62679: LD_INT 8
62681: PUSH
62682: LD_INT 9
62684: PUSH
62685: LD_INT 10
62687: PUSH
62688: LD_INT 11
62690: PUSH
62691: LD_INT 12
62693: PUSH
62694: LD_INT 13
62696: PUSH
62697: LD_INT 14
62699: PUSH
62700: LD_INT 15
62702: PUSH
62703: LD_INT 16
62705: PUSH
62706: LD_INT 17
62708: PUSH
62709: LD_INT 18
62711: PUSH
62712: LD_INT 19
62714: PUSH
62715: LD_INT 20
62717: PUSH
62718: LD_INT 21
62720: PUSH
62721: LD_INT 22
62723: PUSH
62724: LD_INT 23
62726: PUSH
62727: LD_INT 24
62729: PUSH
62730: LD_INT 25
62732: PUSH
62733: LD_INT 26
62735: PUSH
62736: LD_INT 27
62738: PUSH
62739: LD_INT 28
62741: PUSH
62742: LD_INT 29
62744: PUSH
62745: LD_INT 30
62747: PUSH
62748: LD_INT 31
62750: PUSH
62751: LD_INT 32
62753: PUSH
62754: LD_INT 33
62756: PUSH
62757: LD_INT 34
62759: PUSH
62760: LD_INT 36
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 101
62802: PUSH
62803: LD_INT 102
62805: PUSH
62806: LD_INT 103
62808: PUSH
62809: LD_INT 104
62811: PUSH
62812: LD_INT 105
62814: PUSH
62815: LD_INT 106
62817: PUSH
62818: LD_INT 107
62820: PUSH
62821: LD_INT 108
62823: PUSH
62824: LD_INT 109
62826: PUSH
62827: LD_INT 110
62829: PUSH
62830: LD_INT 111
62832: PUSH
62833: LD_INT 112
62835: PUSH
62836: LD_INT 113
62838: PUSH
62839: LD_INT 114
62841: PUSH
62842: LD_INT 116
62844: PUSH
62845: LD_INT 117
62847: PUSH
62848: LD_INT 118
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: ST_TO_ADDR
62874: GO 63881
62876: LD_INT 15
62878: DOUBLE
62879: EQUAL
62880: IFTRUE 62884
62882: GO 63108
62884: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
62885: LD_ADDR_VAR 0 2
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: LD_INT 2
62895: PUSH
62896: LD_INT 3
62898: PUSH
62899: LD_INT 4
62901: PUSH
62902: LD_INT 5
62904: PUSH
62905: LD_INT 6
62907: PUSH
62908: LD_INT 7
62910: PUSH
62911: LD_INT 8
62913: PUSH
62914: LD_INT 9
62916: PUSH
62917: LD_INT 10
62919: PUSH
62920: LD_INT 11
62922: PUSH
62923: LD_INT 12
62925: PUSH
62926: LD_INT 13
62928: PUSH
62929: LD_INT 14
62931: PUSH
62932: LD_INT 15
62934: PUSH
62935: LD_INT 16
62937: PUSH
62938: LD_INT 17
62940: PUSH
62941: LD_INT 18
62943: PUSH
62944: LD_INT 19
62946: PUSH
62947: LD_INT 20
62949: PUSH
62950: LD_INT 21
62952: PUSH
62953: LD_INT 22
62955: PUSH
62956: LD_INT 23
62958: PUSH
62959: LD_INT 24
62961: PUSH
62962: LD_INT 25
62964: PUSH
62965: LD_INT 26
62967: PUSH
62968: LD_INT 27
62970: PUSH
62971: LD_INT 28
62973: PUSH
62974: LD_INT 29
62976: PUSH
62977: LD_INT 30
62979: PUSH
62980: LD_INT 31
62982: PUSH
62983: LD_INT 32
62985: PUSH
62986: LD_INT 33
62988: PUSH
62989: LD_INT 34
62991: PUSH
62992: LD_INT 36
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 101
63034: PUSH
63035: LD_INT 102
63037: PUSH
63038: LD_INT 103
63040: PUSH
63041: LD_INT 104
63043: PUSH
63044: LD_INT 105
63046: PUSH
63047: LD_INT 106
63049: PUSH
63050: LD_INT 107
63052: PUSH
63053: LD_INT 108
63055: PUSH
63056: LD_INT 109
63058: PUSH
63059: LD_INT 110
63061: PUSH
63062: LD_INT 111
63064: PUSH
63065: LD_INT 112
63067: PUSH
63068: LD_INT 113
63070: PUSH
63071: LD_INT 114
63073: PUSH
63074: LD_INT 116
63076: PUSH
63077: LD_INT 117
63079: PUSH
63080: LD_INT 118
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: ST_TO_ADDR
63106: GO 63881
63108: LD_INT 16
63110: DOUBLE
63111: EQUAL
63112: IFTRUE 63116
63114: GO 63252
63116: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
63117: LD_ADDR_VAR 0 2
63121: PUSH
63122: LD_INT 2
63124: PUSH
63125: LD_INT 4
63127: PUSH
63128: LD_INT 5
63130: PUSH
63131: LD_INT 7
63133: PUSH
63134: LD_INT 11
63136: PUSH
63137: LD_INT 12
63139: PUSH
63140: LD_INT 15
63142: PUSH
63143: LD_INT 16
63145: PUSH
63146: LD_INT 20
63148: PUSH
63149: LD_INT 21
63151: PUSH
63152: LD_INT 22
63154: PUSH
63155: LD_INT 23
63157: PUSH
63158: LD_INT 25
63160: PUSH
63161: LD_INT 26
63163: PUSH
63164: LD_INT 30
63166: PUSH
63167: LD_INT 31
63169: PUSH
63170: LD_INT 32
63172: PUSH
63173: LD_INT 33
63175: PUSH
63176: LD_INT 34
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 101
63202: PUSH
63203: LD_INT 102
63205: PUSH
63206: LD_INT 103
63208: PUSH
63209: LD_INT 106
63211: PUSH
63212: LD_INT 108
63214: PUSH
63215: LD_INT 112
63217: PUSH
63218: LD_INT 113
63220: PUSH
63221: LD_INT 114
63223: PUSH
63224: LD_INT 116
63226: PUSH
63227: LD_INT 117
63229: PUSH
63230: LD_INT 118
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: ST_TO_ADDR
63250: GO 63881
63252: LD_INT 17
63254: DOUBLE
63255: EQUAL
63256: IFTRUE 63260
63258: GO 63484
63260: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
63261: LD_ADDR_VAR 0 2
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: LD_INT 2
63271: PUSH
63272: LD_INT 3
63274: PUSH
63275: LD_INT 4
63277: PUSH
63278: LD_INT 5
63280: PUSH
63281: LD_INT 6
63283: PUSH
63284: LD_INT 7
63286: PUSH
63287: LD_INT 8
63289: PUSH
63290: LD_INT 9
63292: PUSH
63293: LD_INT 10
63295: PUSH
63296: LD_INT 11
63298: PUSH
63299: LD_INT 12
63301: PUSH
63302: LD_INT 13
63304: PUSH
63305: LD_INT 14
63307: PUSH
63308: LD_INT 15
63310: PUSH
63311: LD_INT 16
63313: PUSH
63314: LD_INT 17
63316: PUSH
63317: LD_INT 18
63319: PUSH
63320: LD_INT 19
63322: PUSH
63323: LD_INT 20
63325: PUSH
63326: LD_INT 21
63328: PUSH
63329: LD_INT 22
63331: PUSH
63332: LD_INT 23
63334: PUSH
63335: LD_INT 24
63337: PUSH
63338: LD_INT 25
63340: PUSH
63341: LD_INT 26
63343: PUSH
63344: LD_INT 27
63346: PUSH
63347: LD_INT 28
63349: PUSH
63350: LD_INT 29
63352: PUSH
63353: LD_INT 30
63355: PUSH
63356: LD_INT 31
63358: PUSH
63359: LD_INT 32
63361: PUSH
63362: LD_INT 33
63364: PUSH
63365: LD_INT 34
63367: PUSH
63368: LD_INT 36
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 101
63410: PUSH
63411: LD_INT 102
63413: PUSH
63414: LD_INT 103
63416: PUSH
63417: LD_INT 104
63419: PUSH
63420: LD_INT 105
63422: PUSH
63423: LD_INT 106
63425: PUSH
63426: LD_INT 107
63428: PUSH
63429: LD_INT 108
63431: PUSH
63432: LD_INT 109
63434: PUSH
63435: LD_INT 110
63437: PUSH
63438: LD_INT 111
63440: PUSH
63441: LD_INT 112
63443: PUSH
63444: LD_INT 113
63446: PUSH
63447: LD_INT 114
63449: PUSH
63450: LD_INT 116
63452: PUSH
63453: LD_INT 117
63455: PUSH
63456: LD_INT 118
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: ST_TO_ADDR
63482: GO 63881
63484: LD_INT 18
63486: DOUBLE
63487: EQUAL
63488: IFTRUE 63492
63490: GO 63640
63492: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
63493: LD_ADDR_VAR 0 2
63497: PUSH
63498: LD_INT 2
63500: PUSH
63501: LD_INT 4
63503: PUSH
63504: LD_INT 5
63506: PUSH
63507: LD_INT 7
63509: PUSH
63510: LD_INT 11
63512: PUSH
63513: LD_INT 12
63515: PUSH
63516: LD_INT 15
63518: PUSH
63519: LD_INT 16
63521: PUSH
63522: LD_INT 20
63524: PUSH
63525: LD_INT 21
63527: PUSH
63528: LD_INT 22
63530: PUSH
63531: LD_INT 23
63533: PUSH
63534: LD_INT 25
63536: PUSH
63537: LD_INT 26
63539: PUSH
63540: LD_INT 30
63542: PUSH
63543: LD_INT 31
63545: PUSH
63546: LD_INT 32
63548: PUSH
63549: LD_INT 33
63551: PUSH
63552: LD_INT 34
63554: PUSH
63555: LD_INT 35
63557: PUSH
63558: LD_INT 36
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 101
63586: PUSH
63587: LD_INT 102
63589: PUSH
63590: LD_INT 103
63592: PUSH
63593: LD_INT 106
63595: PUSH
63596: LD_INT 108
63598: PUSH
63599: LD_INT 112
63601: PUSH
63602: LD_INT 113
63604: PUSH
63605: LD_INT 114
63607: PUSH
63608: LD_INT 115
63610: PUSH
63611: LD_INT 116
63613: PUSH
63614: LD_INT 117
63616: PUSH
63617: LD_INT 118
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: ST_TO_ADDR
63638: GO 63881
63640: LD_INT 19
63642: DOUBLE
63643: EQUAL
63644: IFTRUE 63648
63646: GO 63880
63648: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
63649: LD_ADDR_VAR 0 2
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: LD_INT 2
63659: PUSH
63660: LD_INT 3
63662: PUSH
63663: LD_INT 4
63665: PUSH
63666: LD_INT 5
63668: PUSH
63669: LD_INT 6
63671: PUSH
63672: LD_INT 7
63674: PUSH
63675: LD_INT 8
63677: PUSH
63678: LD_INT 9
63680: PUSH
63681: LD_INT 10
63683: PUSH
63684: LD_INT 11
63686: PUSH
63687: LD_INT 12
63689: PUSH
63690: LD_INT 13
63692: PUSH
63693: LD_INT 14
63695: PUSH
63696: LD_INT 15
63698: PUSH
63699: LD_INT 16
63701: PUSH
63702: LD_INT 17
63704: PUSH
63705: LD_INT 18
63707: PUSH
63708: LD_INT 19
63710: PUSH
63711: LD_INT 20
63713: PUSH
63714: LD_INT 21
63716: PUSH
63717: LD_INT 22
63719: PUSH
63720: LD_INT 23
63722: PUSH
63723: LD_INT 24
63725: PUSH
63726: LD_INT 25
63728: PUSH
63729: LD_INT 26
63731: PUSH
63732: LD_INT 27
63734: PUSH
63735: LD_INT 28
63737: PUSH
63738: LD_INT 29
63740: PUSH
63741: LD_INT 30
63743: PUSH
63744: LD_INT 31
63746: PUSH
63747: LD_INT 32
63749: PUSH
63750: LD_INT 33
63752: PUSH
63753: LD_INT 34
63755: PUSH
63756: LD_INT 35
63758: PUSH
63759: LD_INT 36
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 101
63802: PUSH
63803: LD_INT 102
63805: PUSH
63806: LD_INT 103
63808: PUSH
63809: LD_INT 104
63811: PUSH
63812: LD_INT 105
63814: PUSH
63815: LD_INT 106
63817: PUSH
63818: LD_INT 107
63820: PUSH
63821: LD_INT 108
63823: PUSH
63824: LD_INT 109
63826: PUSH
63827: LD_INT 110
63829: PUSH
63830: LD_INT 111
63832: PUSH
63833: LD_INT 112
63835: PUSH
63836: LD_INT 113
63838: PUSH
63839: LD_INT 114
63841: PUSH
63842: LD_INT 115
63844: PUSH
63845: LD_INT 116
63847: PUSH
63848: LD_INT 117
63850: PUSH
63851: LD_INT 118
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: ST_TO_ADDR
63878: GO 63881
63880: POP
// end else
63881: GO 64112
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
63883: LD_ADDR_VAR 0 2
63887: PUSH
63888: LD_INT 1
63890: PUSH
63891: LD_INT 2
63893: PUSH
63894: LD_INT 3
63896: PUSH
63897: LD_INT 4
63899: PUSH
63900: LD_INT 5
63902: PUSH
63903: LD_INT 6
63905: PUSH
63906: LD_INT 7
63908: PUSH
63909: LD_INT 8
63911: PUSH
63912: LD_INT 9
63914: PUSH
63915: LD_INT 10
63917: PUSH
63918: LD_INT 11
63920: PUSH
63921: LD_INT 12
63923: PUSH
63924: LD_INT 13
63926: PUSH
63927: LD_INT 14
63929: PUSH
63930: LD_INT 15
63932: PUSH
63933: LD_INT 16
63935: PUSH
63936: LD_INT 17
63938: PUSH
63939: LD_INT 18
63941: PUSH
63942: LD_INT 19
63944: PUSH
63945: LD_INT 20
63947: PUSH
63948: LD_INT 21
63950: PUSH
63951: LD_INT 22
63953: PUSH
63954: LD_INT 23
63956: PUSH
63957: LD_INT 24
63959: PUSH
63960: LD_INT 25
63962: PUSH
63963: LD_INT 26
63965: PUSH
63966: LD_INT 27
63968: PUSH
63969: LD_INT 28
63971: PUSH
63972: LD_INT 29
63974: PUSH
63975: LD_INT 30
63977: PUSH
63978: LD_INT 31
63980: PUSH
63981: LD_INT 32
63983: PUSH
63984: LD_INT 33
63986: PUSH
63987: LD_INT 34
63989: PUSH
63990: LD_INT 35
63992: PUSH
63993: LD_INT 36
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 101
64036: PUSH
64037: LD_INT 102
64039: PUSH
64040: LD_INT 103
64042: PUSH
64043: LD_INT 104
64045: PUSH
64046: LD_INT 105
64048: PUSH
64049: LD_INT 106
64051: PUSH
64052: LD_INT 107
64054: PUSH
64055: LD_INT 108
64057: PUSH
64058: LD_INT 109
64060: PUSH
64061: LD_INT 110
64063: PUSH
64064: LD_INT 111
64066: PUSH
64067: LD_INT 112
64069: PUSH
64070: LD_INT 113
64072: PUSH
64073: LD_INT 114
64075: PUSH
64076: LD_INT 115
64078: PUSH
64079: LD_INT 116
64081: PUSH
64082: LD_INT 117
64084: PUSH
64085: LD_INT 118
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: ST_TO_ADDR
// if result then
64112: LD_VAR 0 2
64116: IFFALSE 64902
// begin normal :=  ;
64118: LD_ADDR_VAR 0 5
64122: PUSH
64123: LD_STRING 
64125: ST_TO_ADDR
// hardcore :=  ;
64126: LD_ADDR_VAR 0 6
64130: PUSH
64131: LD_STRING 
64133: ST_TO_ADDR
// active :=  ;
64134: LD_ADDR_VAR 0 7
64138: PUSH
64139: LD_STRING 
64141: ST_TO_ADDR
// for i = 1 to normalCounter do
64142: LD_ADDR_VAR 0 8
64146: PUSH
64147: DOUBLE
64148: LD_INT 1
64150: DEC
64151: ST_TO_ADDR
64152: LD_EXP 51
64156: PUSH
64157: FOR_TO
64158: IFFALSE 64259
// begin tmp := 0 ;
64160: LD_ADDR_VAR 0 3
64164: PUSH
64165: LD_STRING 0
64167: ST_TO_ADDR
// if result [ 1 ] then
64168: LD_VAR 0 2
64172: PUSH
64173: LD_INT 1
64175: ARRAY
64176: IFFALSE 64241
// if result [ 1 ] [ 1 ] = i then
64178: LD_VAR 0 2
64182: PUSH
64183: LD_INT 1
64185: ARRAY
64186: PUSH
64187: LD_INT 1
64189: ARRAY
64190: PUSH
64191: LD_VAR 0 8
64195: EQUAL
64196: IFFALSE 64241
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
64198: LD_ADDR_VAR 0 2
64202: PUSH
64203: LD_VAR 0 2
64207: PPUSH
64208: LD_INT 1
64210: PPUSH
64211: LD_VAR 0 2
64215: PUSH
64216: LD_INT 1
64218: ARRAY
64219: PPUSH
64220: LD_INT 1
64222: PPUSH
64223: CALL_OW 3
64227: PPUSH
64228: CALL_OW 1
64232: ST_TO_ADDR
// tmp := 1 ;
64233: LD_ADDR_VAR 0 3
64237: PUSH
64238: LD_STRING 1
64240: ST_TO_ADDR
// end ; normal := normal & tmp ;
64241: LD_ADDR_VAR 0 5
64245: PUSH
64246: LD_VAR 0 5
64250: PUSH
64251: LD_VAR 0 3
64255: STR
64256: ST_TO_ADDR
// end ;
64257: GO 64157
64259: POP
64260: POP
// for i = 1 to hardcoreCounter do
64261: LD_ADDR_VAR 0 8
64265: PUSH
64266: DOUBLE
64267: LD_INT 1
64269: DEC
64270: ST_TO_ADDR
64271: LD_EXP 52
64275: PUSH
64276: FOR_TO
64277: IFFALSE 64382
// begin tmp := 0 ;
64279: LD_ADDR_VAR 0 3
64283: PUSH
64284: LD_STRING 0
64286: ST_TO_ADDR
// if result [ 2 ] then
64287: LD_VAR 0 2
64291: PUSH
64292: LD_INT 2
64294: ARRAY
64295: IFFALSE 64364
// if result [ 2 ] [ 1 ] = 100 + i then
64297: LD_VAR 0 2
64301: PUSH
64302: LD_INT 2
64304: ARRAY
64305: PUSH
64306: LD_INT 1
64308: ARRAY
64309: PUSH
64310: LD_INT 100
64312: PUSH
64313: LD_VAR 0 8
64317: PLUS
64318: EQUAL
64319: IFFALSE 64364
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
64321: LD_ADDR_VAR 0 2
64325: PUSH
64326: LD_VAR 0 2
64330: PPUSH
64331: LD_INT 2
64333: PPUSH
64334: LD_VAR 0 2
64338: PUSH
64339: LD_INT 2
64341: ARRAY
64342: PPUSH
64343: LD_INT 1
64345: PPUSH
64346: CALL_OW 3
64350: PPUSH
64351: CALL_OW 1
64355: ST_TO_ADDR
// tmp := 1 ;
64356: LD_ADDR_VAR 0 3
64360: PUSH
64361: LD_STRING 1
64363: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
64364: LD_ADDR_VAR 0 6
64368: PUSH
64369: LD_VAR 0 6
64373: PUSH
64374: LD_VAR 0 3
64378: STR
64379: ST_TO_ADDR
// end ;
64380: GO 64276
64382: POP
64383: POP
// if isGameLoad then
64384: LD_VAR 0 1
64388: IFFALSE 64863
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
64390: LD_ADDR_VAR 0 4
64394: PUSH
64395: LD_EXP 55
64399: PUSH
64400: LD_EXP 54
64404: PUSH
64405: LD_EXP 56
64409: PUSH
64410: LD_EXP 53
64414: PUSH
64415: LD_EXP 57
64419: PUSH
64420: LD_EXP 58
64424: PUSH
64425: LD_EXP 59
64429: PUSH
64430: LD_EXP 60
64434: PUSH
64435: LD_EXP 61
64439: PUSH
64440: LD_EXP 62
64444: PUSH
64445: LD_EXP 63
64449: PUSH
64450: LD_EXP 64
64454: PUSH
64455: LD_EXP 65
64459: PUSH
64460: LD_EXP 66
64464: PUSH
64465: LD_EXP 74
64469: PUSH
64470: LD_EXP 75
64474: PUSH
64475: LD_EXP 76
64479: PUSH
64480: LD_EXP 77
64484: PUSH
64485: LD_EXP 79
64489: PUSH
64490: LD_EXP 80
64494: PUSH
64495: LD_EXP 81
64499: PUSH
64500: LD_EXP 84
64504: PUSH
64505: LD_EXP 86
64509: PUSH
64510: LD_EXP 87
64514: PUSH
64515: LD_EXP 88
64519: PUSH
64520: LD_EXP 90
64524: PUSH
64525: LD_EXP 91
64529: PUSH
64530: LD_EXP 94
64534: PUSH
64535: LD_EXP 95
64539: PUSH
64540: LD_EXP 96
64544: PUSH
64545: LD_EXP 97
64549: PUSH
64550: LD_EXP 98
64554: PUSH
64555: LD_EXP 99
64559: PUSH
64560: LD_EXP 100
64564: PUSH
64565: LD_EXP 101
64569: PUSH
64570: LD_EXP 102
64574: PUSH
64575: LD_EXP 67
64579: PUSH
64580: LD_EXP 68
64584: PUSH
64585: LD_EXP 71
64589: PUSH
64590: LD_EXP 72
64594: PUSH
64595: LD_EXP 73
64599: PUSH
64600: LD_EXP 69
64604: PUSH
64605: LD_EXP 70
64609: PUSH
64610: LD_EXP 78
64614: PUSH
64615: LD_EXP 82
64619: PUSH
64620: LD_EXP 83
64624: PUSH
64625: LD_EXP 85
64629: PUSH
64630: LD_EXP 89
64634: PUSH
64635: LD_EXP 92
64639: PUSH
64640: LD_EXP 93
64644: PUSH
64645: LD_EXP 103
64649: PUSH
64650: LD_EXP 104
64654: PUSH
64655: LD_EXP 105
64659: PUSH
64660: LD_EXP 106
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: ST_TO_ADDR
// tmp :=  ;
64721: LD_ADDR_VAR 0 3
64725: PUSH
64726: LD_STRING 
64728: ST_TO_ADDR
// for i = 1 to normalCounter do
64729: LD_ADDR_VAR 0 8
64733: PUSH
64734: DOUBLE
64735: LD_INT 1
64737: DEC
64738: ST_TO_ADDR
64739: LD_EXP 51
64743: PUSH
64744: FOR_TO
64745: IFFALSE 64781
// begin if flags [ i ] then
64747: LD_VAR 0 4
64751: PUSH
64752: LD_VAR 0 8
64756: ARRAY
64757: IFFALSE 64779
// tmp := tmp & i & ; ;
64759: LD_ADDR_VAR 0 3
64763: PUSH
64764: LD_VAR 0 3
64768: PUSH
64769: LD_VAR 0 8
64773: STR
64774: PUSH
64775: LD_STRING ;
64777: STR
64778: ST_TO_ADDR
// end ;
64779: GO 64744
64781: POP
64782: POP
// for i = 1 to hardcoreCounter do
64783: LD_ADDR_VAR 0 8
64787: PUSH
64788: DOUBLE
64789: LD_INT 1
64791: DEC
64792: ST_TO_ADDR
64793: LD_EXP 52
64797: PUSH
64798: FOR_TO
64799: IFFALSE 64845
// begin if flags [ normalCounter + i ] then
64801: LD_VAR 0 4
64805: PUSH
64806: LD_EXP 51
64810: PUSH
64811: LD_VAR 0 8
64815: PLUS
64816: ARRAY
64817: IFFALSE 64843
// tmp := tmp & ( 100 + i ) & ; ;
64819: LD_ADDR_VAR 0 3
64823: PUSH
64824: LD_VAR 0 3
64828: PUSH
64829: LD_INT 100
64831: PUSH
64832: LD_VAR 0 8
64836: PLUS
64837: STR
64838: PUSH
64839: LD_STRING ;
64841: STR
64842: ST_TO_ADDR
// end ;
64843: GO 64798
64845: POP
64846: POP
// if tmp then
64847: LD_VAR 0 3
64851: IFFALSE 64863
// active := tmp ;
64853: LD_ADDR_VAR 0 7
64857: PUSH
64858: LD_VAR 0 3
64862: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
64863: LD_STRING getStreamItemsFromMission("
64865: PUSH
64866: LD_VAR 0 5
64870: STR
64871: PUSH
64872: LD_STRING ","
64874: STR
64875: PUSH
64876: LD_VAR 0 6
64880: STR
64881: PUSH
64882: LD_STRING ","
64884: STR
64885: PUSH
64886: LD_VAR 0 7
64890: STR
64891: PUSH
64892: LD_STRING ")
64894: STR
64895: PPUSH
64896: CALL_OW 559
// end else
64900: GO 64909
// ToLua ( getStreamItemsFromMission("","","") ) ;
64902: LD_STRING getStreamItemsFromMission("","","")
64904: PPUSH
64905: CALL_OW 559
// end ;
64909: LD_VAR 0 2
64913: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64914: LD_EXP 50
64918: PUSH
64919: LD_EXP 55
64923: AND
64924: IFFALSE 65048
64926: GO 64928
64928: DISABLE
64929: LD_INT 0
64931: PPUSH
64932: PPUSH
// begin enable ;
64933: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64934: LD_ADDR_VAR 0 2
64938: PUSH
64939: LD_INT 22
64941: PUSH
64942: LD_OWVAR 2
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 2
64953: PUSH
64954: LD_INT 34
64956: PUSH
64957: LD_INT 7
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 34
64966: PUSH
64967: LD_INT 45
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 34
64976: PUSH
64977: LD_INT 28
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 34
64986: PUSH
64987: LD_INT 47
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PPUSH
65005: CALL_OW 69
65009: ST_TO_ADDR
// if not tmp then
65010: LD_VAR 0 2
65014: NOT
65015: IFFALSE 65019
// exit ;
65017: GO 65048
// for i in tmp do
65019: LD_ADDR_VAR 0 1
65023: PUSH
65024: LD_VAR 0 2
65028: PUSH
65029: FOR_IN
65030: IFFALSE 65046
// begin SetLives ( i , 0 ) ;
65032: LD_VAR 0 1
65036: PPUSH
65037: LD_INT 0
65039: PPUSH
65040: CALL_OW 234
// end ;
65044: GO 65029
65046: POP
65047: POP
// end ;
65048: PPOPN 2
65050: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
65051: LD_EXP 50
65055: PUSH
65056: LD_EXP 56
65060: AND
65061: IFFALSE 65145
65063: GO 65065
65065: DISABLE
65066: LD_INT 0
65068: PPUSH
65069: PPUSH
// begin enable ;
65070: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
65071: LD_ADDR_VAR 0 2
65075: PUSH
65076: LD_INT 22
65078: PUSH
65079: LD_OWVAR 2
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 32
65090: PUSH
65091: LD_INT 3
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PPUSH
65102: CALL_OW 69
65106: ST_TO_ADDR
// if not tmp then
65107: LD_VAR 0 2
65111: NOT
65112: IFFALSE 65116
// exit ;
65114: GO 65145
// for i in tmp do
65116: LD_ADDR_VAR 0 1
65120: PUSH
65121: LD_VAR 0 2
65125: PUSH
65126: FOR_IN
65127: IFFALSE 65143
// begin SetLives ( i , 0 ) ;
65129: LD_VAR 0 1
65133: PPUSH
65134: LD_INT 0
65136: PPUSH
65137: CALL_OW 234
// end ;
65141: GO 65126
65143: POP
65144: POP
// end ;
65145: PPOPN 2
65147: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
65148: LD_EXP 50
65152: PUSH
65153: LD_EXP 53
65157: AND
65158: IFFALSE 65251
65160: GO 65162
65162: DISABLE
65163: LD_INT 0
65165: PPUSH
// begin enable ;
65166: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
65167: LD_ADDR_VAR 0 1
65171: PUSH
65172: LD_INT 22
65174: PUSH
65175: LD_OWVAR 2
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 2
65186: PUSH
65187: LD_INT 25
65189: PUSH
65190: LD_INT 5
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 25
65199: PUSH
65200: LD_INT 9
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 25
65209: PUSH
65210: LD_INT 8
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PPUSH
65227: CALL_OW 69
65231: PUSH
65232: FOR_IN
65233: IFFALSE 65249
// begin SetClass ( i , 1 ) ;
65235: LD_VAR 0 1
65239: PPUSH
65240: LD_INT 1
65242: PPUSH
65243: CALL_OW 336
// end ;
65247: GO 65232
65249: POP
65250: POP
// end ;
65251: PPOPN 1
65253: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
65254: LD_EXP 50
65258: PUSH
65259: LD_EXP 54
65263: AND
65264: PUSH
65265: LD_OWVAR 65
65269: PUSH
65270: LD_INT 7
65272: LESS
65273: AND
65274: IFFALSE 65288
65276: GO 65278
65278: DISABLE
// begin enable ;
65279: ENABLE
// game_speed := 7 ;
65280: LD_ADDR_OWVAR 65
65284: PUSH
65285: LD_INT 7
65287: ST_TO_ADDR
// end ;
65288: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
65289: LD_EXP 50
65293: PUSH
65294: LD_EXP 57
65298: AND
65299: IFFALSE 65501
65301: GO 65303
65303: DISABLE
65304: LD_INT 0
65306: PPUSH
65307: PPUSH
65308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65309: LD_ADDR_VAR 0 3
65313: PUSH
65314: LD_INT 81
65316: PUSH
65317: LD_OWVAR 2
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 21
65328: PUSH
65329: LD_INT 1
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PPUSH
65340: CALL_OW 69
65344: ST_TO_ADDR
// if not tmp then
65345: LD_VAR 0 3
65349: NOT
65350: IFFALSE 65354
// exit ;
65352: GO 65501
// if tmp > 5 then
65354: LD_VAR 0 3
65358: PUSH
65359: LD_INT 5
65361: GREATER
65362: IFFALSE 65374
// k := 5 else
65364: LD_ADDR_VAR 0 2
65368: PUSH
65369: LD_INT 5
65371: ST_TO_ADDR
65372: GO 65384
// k := tmp ;
65374: LD_ADDR_VAR 0 2
65378: PUSH
65379: LD_VAR 0 3
65383: ST_TO_ADDR
// for i := 1 to k do
65384: LD_ADDR_VAR 0 1
65388: PUSH
65389: DOUBLE
65390: LD_INT 1
65392: DEC
65393: ST_TO_ADDR
65394: LD_VAR 0 2
65398: PUSH
65399: FOR_TO
65400: IFFALSE 65499
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
65402: LD_VAR 0 3
65406: PUSH
65407: LD_VAR 0 1
65411: ARRAY
65412: PPUSH
65413: LD_VAR 0 1
65417: PUSH
65418: LD_INT 4
65420: MOD
65421: PUSH
65422: LD_INT 1
65424: PLUS
65425: PPUSH
65426: CALL_OW 259
65430: PUSH
65431: LD_INT 10
65433: LESS
65434: IFFALSE 65497
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
65436: LD_VAR 0 3
65440: PUSH
65441: LD_VAR 0 1
65445: ARRAY
65446: PPUSH
65447: LD_VAR 0 1
65451: PUSH
65452: LD_INT 4
65454: MOD
65455: PUSH
65456: LD_INT 1
65458: PLUS
65459: PPUSH
65460: LD_VAR 0 3
65464: PUSH
65465: LD_VAR 0 1
65469: ARRAY
65470: PPUSH
65471: LD_VAR 0 1
65475: PUSH
65476: LD_INT 4
65478: MOD
65479: PUSH
65480: LD_INT 1
65482: PLUS
65483: PPUSH
65484: CALL_OW 259
65488: PUSH
65489: LD_INT 1
65491: PLUS
65492: PPUSH
65493: CALL_OW 237
65497: GO 65399
65499: POP
65500: POP
// end ;
65501: PPOPN 3
65503: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65504: LD_EXP 50
65508: PUSH
65509: LD_EXP 58
65513: AND
65514: IFFALSE 65534
65516: GO 65518
65518: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
65519: LD_INT 4
65521: PPUSH
65522: LD_OWVAR 2
65526: PPUSH
65527: LD_INT 0
65529: PPUSH
65530: CALL_OW 324
65534: END
// every 0 0$1 trigger StreamModeActive and sShovel do
65535: LD_EXP 50
65539: PUSH
65540: LD_EXP 87
65544: AND
65545: IFFALSE 65565
65547: GO 65549
65549: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
65550: LD_INT 19
65552: PPUSH
65553: LD_OWVAR 2
65557: PPUSH
65558: LD_INT 0
65560: PPUSH
65561: CALL_OW 324
65565: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
65566: LD_EXP 50
65570: PUSH
65571: LD_EXP 59
65575: AND
65576: IFFALSE 65678
65578: GO 65580
65580: DISABLE
65581: LD_INT 0
65583: PPUSH
65584: PPUSH
// begin enable ;
65585: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
65586: LD_ADDR_VAR 0 2
65590: PUSH
65591: LD_INT 22
65593: PUSH
65594: LD_OWVAR 2
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 2
65605: PUSH
65606: LD_INT 34
65608: PUSH
65609: LD_INT 11
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 34
65618: PUSH
65619: LD_INT 30
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: LIST
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PPUSH
65635: CALL_OW 69
65639: ST_TO_ADDR
// if not tmp then
65640: LD_VAR 0 2
65644: NOT
65645: IFFALSE 65649
// exit ;
65647: GO 65678
// for i in tmp do
65649: LD_ADDR_VAR 0 1
65653: PUSH
65654: LD_VAR 0 2
65658: PUSH
65659: FOR_IN
65660: IFFALSE 65676
// begin SetLives ( i , 0 ) ;
65662: LD_VAR 0 1
65666: PPUSH
65667: LD_INT 0
65669: PPUSH
65670: CALL_OW 234
// end ;
65674: GO 65659
65676: POP
65677: POP
// end ;
65678: PPOPN 2
65680: END
// every 0 0$1 trigger StreamModeActive and sBunker do
65681: LD_EXP 50
65685: PUSH
65686: LD_EXP 60
65690: AND
65691: IFFALSE 65711
65693: GO 65695
65695: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
65696: LD_INT 32
65698: PPUSH
65699: LD_OWVAR 2
65703: PPUSH
65704: LD_INT 0
65706: PPUSH
65707: CALL_OW 324
65711: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
65712: LD_EXP 50
65716: PUSH
65717: LD_EXP 61
65721: AND
65722: IFFALSE 65903
65724: GO 65726
65726: DISABLE
65727: LD_INT 0
65729: PPUSH
65730: PPUSH
65731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
65732: LD_ADDR_VAR 0 2
65736: PUSH
65737: LD_INT 22
65739: PUSH
65740: LD_OWVAR 2
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 33
65751: PUSH
65752: LD_INT 3
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PPUSH
65763: CALL_OW 69
65767: ST_TO_ADDR
// if not tmp then
65768: LD_VAR 0 2
65772: NOT
65773: IFFALSE 65777
// exit ;
65775: GO 65903
// side := 0 ;
65777: LD_ADDR_VAR 0 3
65781: PUSH
65782: LD_INT 0
65784: ST_TO_ADDR
// for i := 1 to 8 do
65785: LD_ADDR_VAR 0 1
65789: PUSH
65790: DOUBLE
65791: LD_INT 1
65793: DEC
65794: ST_TO_ADDR
65795: LD_INT 8
65797: PUSH
65798: FOR_TO
65799: IFFALSE 65847
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
65801: LD_OWVAR 2
65805: PUSH
65806: LD_VAR 0 1
65810: NONEQUAL
65811: PUSH
65812: LD_OWVAR 2
65816: PPUSH
65817: LD_VAR 0 1
65821: PPUSH
65822: CALL_OW 81
65826: PUSH
65827: LD_INT 2
65829: EQUAL
65830: AND
65831: IFFALSE 65845
// begin side := i ;
65833: LD_ADDR_VAR 0 3
65837: PUSH
65838: LD_VAR 0 1
65842: ST_TO_ADDR
// break ;
65843: GO 65847
// end ;
65845: GO 65798
65847: POP
65848: POP
// if not side then
65849: LD_VAR 0 3
65853: NOT
65854: IFFALSE 65858
// exit ;
65856: GO 65903
// for i := 1 to tmp do
65858: LD_ADDR_VAR 0 1
65862: PUSH
65863: DOUBLE
65864: LD_INT 1
65866: DEC
65867: ST_TO_ADDR
65868: LD_VAR 0 2
65872: PUSH
65873: FOR_TO
65874: IFFALSE 65901
// if Prob ( 60 ) then
65876: LD_INT 60
65878: PPUSH
65879: CALL_OW 13
65883: IFFALSE 65899
// SetSide ( i , side ) ;
65885: LD_VAR 0 1
65889: PPUSH
65890: LD_VAR 0 3
65894: PPUSH
65895: CALL_OW 235
65899: GO 65873
65901: POP
65902: POP
// end ;
65903: PPOPN 3
65905: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65906: LD_EXP 50
65910: PUSH
65911: LD_EXP 63
65915: AND
65916: IFFALSE 66035
65918: GO 65920
65920: DISABLE
65921: LD_INT 0
65923: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65924: LD_ADDR_VAR 0 1
65928: PUSH
65929: LD_INT 22
65931: PUSH
65932: LD_OWVAR 2
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 21
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 3
65953: PUSH
65954: LD_INT 23
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: LIST
65972: PPUSH
65973: CALL_OW 69
65977: PUSH
65978: FOR_IN
65979: IFFALSE 66033
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65981: LD_VAR 0 1
65985: PPUSH
65986: CALL_OW 257
65990: PUSH
65991: LD_INT 1
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: LD_INT 4
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: IN
66009: IFFALSE 66031
// SetClass ( un , rand ( 1 , 4 ) ) ;
66011: LD_VAR 0 1
66015: PPUSH
66016: LD_INT 1
66018: PPUSH
66019: LD_INT 4
66021: PPUSH
66022: CALL_OW 12
66026: PPUSH
66027: CALL_OW 336
66031: GO 65978
66033: POP
66034: POP
// end ;
66035: PPOPN 1
66037: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
66038: LD_EXP 50
66042: PUSH
66043: LD_EXP 62
66047: AND
66048: IFFALSE 66127
66050: GO 66052
66052: DISABLE
66053: LD_INT 0
66055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66056: LD_ADDR_VAR 0 1
66060: PUSH
66061: LD_INT 22
66063: PUSH
66064: LD_OWVAR 2
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 21
66075: PUSH
66076: LD_INT 3
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PPUSH
66087: CALL_OW 69
66091: ST_TO_ADDR
// if not tmp then
66092: LD_VAR 0 1
66096: NOT
66097: IFFALSE 66101
// exit ;
66099: GO 66127
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
66101: LD_VAR 0 1
66105: PUSH
66106: LD_INT 1
66108: PPUSH
66109: LD_VAR 0 1
66113: PPUSH
66114: CALL_OW 12
66118: ARRAY
66119: PPUSH
66120: LD_INT 100
66122: PPUSH
66123: CALL_OW 234
// end ;
66127: PPOPN 1
66129: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
66130: LD_EXP 50
66134: PUSH
66135: LD_EXP 64
66139: AND
66140: IFFALSE 66238
66142: GO 66144
66144: DISABLE
66145: LD_INT 0
66147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66148: LD_ADDR_VAR 0 1
66152: PUSH
66153: LD_INT 22
66155: PUSH
66156: LD_OWVAR 2
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 21
66167: PUSH
66168: LD_INT 1
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PPUSH
66179: CALL_OW 69
66183: ST_TO_ADDR
// if not tmp then
66184: LD_VAR 0 1
66188: NOT
66189: IFFALSE 66193
// exit ;
66191: GO 66238
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
66193: LD_VAR 0 1
66197: PUSH
66198: LD_INT 1
66200: PPUSH
66201: LD_VAR 0 1
66205: PPUSH
66206: CALL_OW 12
66210: ARRAY
66211: PPUSH
66212: LD_INT 1
66214: PPUSH
66215: LD_INT 4
66217: PPUSH
66218: CALL_OW 12
66222: PPUSH
66223: LD_INT 3000
66225: PPUSH
66226: LD_INT 9000
66228: PPUSH
66229: CALL_OW 12
66233: PPUSH
66234: CALL_OW 492
// end ;
66238: PPOPN 1
66240: END
// every 0 0$1 trigger StreamModeActive and sDepot do
66241: LD_EXP 50
66245: PUSH
66246: LD_EXP 65
66250: AND
66251: IFFALSE 66271
66253: GO 66255
66255: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
66256: LD_INT 1
66258: PPUSH
66259: LD_OWVAR 2
66263: PPUSH
66264: LD_INT 0
66266: PPUSH
66267: CALL_OW 324
66271: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
66272: LD_EXP 50
66276: PUSH
66277: LD_EXP 66
66281: AND
66282: IFFALSE 66365
66284: GO 66286
66286: DISABLE
66287: LD_INT 0
66289: PPUSH
66290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66291: LD_ADDR_VAR 0 2
66295: PUSH
66296: LD_INT 22
66298: PUSH
66299: LD_OWVAR 2
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 21
66310: PUSH
66311: LD_INT 3
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PPUSH
66322: CALL_OW 69
66326: ST_TO_ADDR
// if not tmp then
66327: LD_VAR 0 2
66331: NOT
66332: IFFALSE 66336
// exit ;
66334: GO 66365
// for i in tmp do
66336: LD_ADDR_VAR 0 1
66340: PUSH
66341: LD_VAR 0 2
66345: PUSH
66346: FOR_IN
66347: IFFALSE 66363
// SetBLevel ( i , 10 ) ;
66349: LD_VAR 0 1
66353: PPUSH
66354: LD_INT 10
66356: PPUSH
66357: CALL_OW 241
66361: GO 66346
66363: POP
66364: POP
// end ;
66365: PPOPN 2
66367: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
66368: LD_EXP 50
66372: PUSH
66373: LD_EXP 67
66377: AND
66378: IFFALSE 66489
66380: GO 66382
66382: DISABLE
66383: LD_INT 0
66385: PPUSH
66386: PPUSH
66387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66388: LD_ADDR_VAR 0 3
66392: PUSH
66393: LD_INT 22
66395: PUSH
66396: LD_OWVAR 2
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 25
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PPUSH
66419: CALL_OW 69
66423: ST_TO_ADDR
// if not tmp then
66424: LD_VAR 0 3
66428: NOT
66429: IFFALSE 66433
// exit ;
66431: GO 66489
// un := tmp [ rand ( 1 , tmp ) ] ;
66433: LD_ADDR_VAR 0 2
66437: PUSH
66438: LD_VAR 0 3
66442: PUSH
66443: LD_INT 1
66445: PPUSH
66446: LD_VAR 0 3
66450: PPUSH
66451: CALL_OW 12
66455: ARRAY
66456: ST_TO_ADDR
// if Crawls ( un ) then
66457: LD_VAR 0 2
66461: PPUSH
66462: CALL_OW 318
66466: IFFALSE 66477
// ComWalk ( un ) ;
66468: LD_VAR 0 2
66472: PPUSH
66473: CALL_OW 138
// SetClass ( un , class_sniper ) ;
66477: LD_VAR 0 2
66481: PPUSH
66482: LD_INT 5
66484: PPUSH
66485: CALL_OW 336
// end ;
66489: PPOPN 3
66491: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
66492: LD_EXP 50
66496: PUSH
66497: LD_EXP 68
66501: AND
66502: PUSH
66503: LD_OWVAR 67
66507: PUSH
66508: LD_INT 4
66510: LESS
66511: AND
66512: IFFALSE 66531
66514: GO 66516
66516: DISABLE
// begin Difficulty := Difficulty + 1 ;
66517: LD_ADDR_OWVAR 67
66521: PUSH
66522: LD_OWVAR 67
66526: PUSH
66527: LD_INT 1
66529: PLUS
66530: ST_TO_ADDR
// end ;
66531: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
66532: LD_EXP 50
66536: PUSH
66537: LD_EXP 69
66541: AND
66542: IFFALSE 66645
66544: GO 66546
66546: DISABLE
66547: LD_INT 0
66549: PPUSH
// begin for i := 1 to 5 do
66550: LD_ADDR_VAR 0 1
66554: PUSH
66555: DOUBLE
66556: LD_INT 1
66558: DEC
66559: ST_TO_ADDR
66560: LD_INT 5
66562: PUSH
66563: FOR_TO
66564: IFFALSE 66643
// begin uc_nation := nation_nature ;
66566: LD_ADDR_OWVAR 21
66570: PUSH
66571: LD_INT 0
66573: ST_TO_ADDR
// uc_side := 0 ;
66574: LD_ADDR_OWVAR 20
66578: PUSH
66579: LD_INT 0
66581: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66582: LD_ADDR_OWVAR 29
66586: PUSH
66587: LD_INT 12
66589: PUSH
66590: LD_INT 12
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// hc_agressivity := 20 ;
66597: LD_ADDR_OWVAR 35
66601: PUSH
66602: LD_INT 20
66604: ST_TO_ADDR
// hc_class := class_tiger ;
66605: LD_ADDR_OWVAR 28
66609: PUSH
66610: LD_INT 14
66612: ST_TO_ADDR
// hc_gallery :=  ;
66613: LD_ADDR_OWVAR 33
66617: PUSH
66618: LD_STRING 
66620: ST_TO_ADDR
// hc_name :=  ;
66621: LD_ADDR_OWVAR 26
66625: PUSH
66626: LD_STRING 
66628: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
66629: CALL_OW 44
66633: PPUSH
66634: LD_INT 0
66636: PPUSH
66637: CALL_OW 51
// end ;
66641: GO 66563
66643: POP
66644: POP
// end ;
66645: PPOPN 1
66647: END
// every 0 0$1 trigger StreamModeActive and sBomb do
66648: LD_EXP 50
66652: PUSH
66653: LD_EXP 70
66657: AND
66658: IFFALSE 66667
66660: GO 66662
66662: DISABLE
// StreamSibBomb ;
66663: CALL 66668 0 0
66667: END
// export function StreamSibBomb ; var i , x , y ; begin
66668: LD_INT 0
66670: PPUSH
66671: PPUSH
66672: PPUSH
66673: PPUSH
// result := false ;
66674: LD_ADDR_VAR 0 1
66678: PUSH
66679: LD_INT 0
66681: ST_TO_ADDR
// for i := 1 to 16 do
66682: LD_ADDR_VAR 0 2
66686: PUSH
66687: DOUBLE
66688: LD_INT 1
66690: DEC
66691: ST_TO_ADDR
66692: LD_INT 16
66694: PUSH
66695: FOR_TO
66696: IFFALSE 66895
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66698: LD_ADDR_VAR 0 3
66702: PUSH
66703: LD_INT 10
66705: PUSH
66706: LD_INT 20
66708: PUSH
66709: LD_INT 30
66711: PUSH
66712: LD_INT 40
66714: PUSH
66715: LD_INT 50
66717: PUSH
66718: LD_INT 60
66720: PUSH
66721: LD_INT 70
66723: PUSH
66724: LD_INT 80
66726: PUSH
66727: LD_INT 90
66729: PUSH
66730: LD_INT 100
66732: PUSH
66733: LD_INT 110
66735: PUSH
66736: LD_INT 120
66738: PUSH
66739: LD_INT 130
66741: PUSH
66742: LD_INT 140
66744: PUSH
66745: LD_INT 150
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 1
66767: PPUSH
66768: LD_INT 15
66770: PPUSH
66771: CALL_OW 12
66775: ARRAY
66776: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66777: LD_ADDR_VAR 0 4
66781: PUSH
66782: LD_INT 10
66784: PUSH
66785: LD_INT 20
66787: PUSH
66788: LD_INT 30
66790: PUSH
66791: LD_INT 40
66793: PUSH
66794: LD_INT 50
66796: PUSH
66797: LD_INT 60
66799: PUSH
66800: LD_INT 70
66802: PUSH
66803: LD_INT 80
66805: PUSH
66806: LD_INT 90
66808: PUSH
66809: LD_INT 100
66811: PUSH
66812: LD_INT 110
66814: PUSH
66815: LD_INT 120
66817: PUSH
66818: LD_INT 130
66820: PUSH
66821: LD_INT 140
66823: PUSH
66824: LD_INT 150
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 1
66846: PPUSH
66847: LD_INT 15
66849: PPUSH
66850: CALL_OW 12
66854: ARRAY
66855: ST_TO_ADDR
// if ValidHex ( x , y ) then
66856: LD_VAR 0 3
66860: PPUSH
66861: LD_VAR 0 4
66865: PPUSH
66866: CALL_OW 488
66870: IFFALSE 66893
// begin result := [ x , y ] ;
66872: LD_ADDR_VAR 0 1
66876: PUSH
66877: LD_VAR 0 3
66881: PUSH
66882: LD_VAR 0 4
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: ST_TO_ADDR
// break ;
66891: GO 66895
// end ; end ;
66893: GO 66695
66895: POP
66896: POP
// if result then
66897: LD_VAR 0 1
66901: IFFALSE 66961
// begin ToLua ( playSibBomb() ) ;
66903: LD_STRING playSibBomb()
66905: PPUSH
66906: CALL_OW 559
// wait ( 0 0$14 ) ;
66910: LD_INT 490
66912: PPUSH
66913: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66917: LD_VAR 0 1
66921: PUSH
66922: LD_INT 1
66924: ARRAY
66925: PPUSH
66926: LD_VAR 0 1
66930: PUSH
66931: LD_INT 2
66933: ARRAY
66934: PPUSH
66935: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66939: LD_VAR 0 1
66943: PUSH
66944: LD_INT 1
66946: ARRAY
66947: PPUSH
66948: LD_VAR 0 1
66952: PUSH
66953: LD_INT 2
66955: ARRAY
66956: PPUSH
66957: CALL_OW 429
// end ; end ;
66961: LD_VAR 0 1
66965: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66966: LD_EXP 50
66970: PUSH
66971: LD_EXP 72
66975: AND
66976: IFFALSE 66988
66978: GO 66980
66980: DISABLE
// YouLost (  ) ;
66981: LD_STRING 
66983: PPUSH
66984: CALL_OW 104
66988: END
// every 0 0$1 trigger StreamModeActive and sFog do
66989: LD_EXP 50
66993: PUSH
66994: LD_EXP 71
66998: AND
66999: IFFALSE 67013
67001: GO 67003
67003: DISABLE
// FogOff ( your_side ) ;
67004: LD_OWVAR 2
67008: PPUSH
67009: CALL_OW 344
67013: END
// every 0 0$1 trigger StreamModeActive and sSun do
67014: LD_EXP 50
67018: PUSH
67019: LD_EXP 73
67023: AND
67024: IFFALSE 67052
67026: GO 67028
67028: DISABLE
// begin solar_recharge_percent := 0 ;
67029: LD_ADDR_OWVAR 79
67033: PUSH
67034: LD_INT 0
67036: ST_TO_ADDR
// wait ( 5 5$00 ) ;
67037: LD_INT 10500
67039: PPUSH
67040: CALL_OW 67
// solar_recharge_percent := 100 ;
67044: LD_ADDR_OWVAR 79
67048: PUSH
67049: LD_INT 100
67051: ST_TO_ADDR
// end ;
67052: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
67053: LD_EXP 50
67057: PUSH
67058: LD_EXP 74
67062: AND
67063: IFFALSE 67302
67065: GO 67067
67067: DISABLE
67068: LD_INT 0
67070: PPUSH
67071: PPUSH
67072: PPUSH
// begin tmp := [ ] ;
67073: LD_ADDR_VAR 0 3
67077: PUSH
67078: EMPTY
67079: ST_TO_ADDR
// for i := 1 to 6 do
67080: LD_ADDR_VAR 0 1
67084: PUSH
67085: DOUBLE
67086: LD_INT 1
67088: DEC
67089: ST_TO_ADDR
67090: LD_INT 6
67092: PUSH
67093: FOR_TO
67094: IFFALSE 67199
// begin uc_nation := nation_nature ;
67096: LD_ADDR_OWVAR 21
67100: PUSH
67101: LD_INT 0
67103: ST_TO_ADDR
// uc_side := 0 ;
67104: LD_ADDR_OWVAR 20
67108: PUSH
67109: LD_INT 0
67111: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67112: LD_ADDR_OWVAR 29
67116: PUSH
67117: LD_INT 12
67119: PUSH
67120: LD_INT 12
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: ST_TO_ADDR
// hc_agressivity := 20 ;
67127: LD_ADDR_OWVAR 35
67131: PUSH
67132: LD_INT 20
67134: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
67135: LD_ADDR_OWVAR 28
67139: PUSH
67140: LD_INT 17
67142: ST_TO_ADDR
// hc_gallery :=  ;
67143: LD_ADDR_OWVAR 33
67147: PUSH
67148: LD_STRING 
67150: ST_TO_ADDR
// hc_name :=  ;
67151: LD_ADDR_OWVAR 26
67155: PUSH
67156: LD_STRING 
67158: ST_TO_ADDR
// un := CreateHuman ;
67159: LD_ADDR_VAR 0 2
67163: PUSH
67164: CALL_OW 44
67168: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
67169: LD_VAR 0 2
67173: PPUSH
67174: LD_INT 1
67176: PPUSH
67177: CALL_OW 51
// tmp := tmp ^ un ;
67181: LD_ADDR_VAR 0 3
67185: PUSH
67186: LD_VAR 0 3
67190: PUSH
67191: LD_VAR 0 2
67195: ADD
67196: ST_TO_ADDR
// end ;
67197: GO 67093
67199: POP
67200: POP
// repeat wait ( 0 0$1 ) ;
67201: LD_INT 35
67203: PPUSH
67204: CALL_OW 67
// for un in tmp do
67208: LD_ADDR_VAR 0 2
67212: PUSH
67213: LD_VAR 0 3
67217: PUSH
67218: FOR_IN
67219: IFFALSE 67293
// begin if IsDead ( un ) then
67221: LD_VAR 0 2
67225: PPUSH
67226: CALL_OW 301
67230: IFFALSE 67250
// begin tmp := tmp diff un ;
67232: LD_ADDR_VAR 0 3
67236: PUSH
67237: LD_VAR 0 3
67241: PUSH
67242: LD_VAR 0 2
67246: DIFF
67247: ST_TO_ADDR
// continue ;
67248: GO 67218
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
67250: LD_VAR 0 2
67254: PPUSH
67255: LD_INT 3
67257: PUSH
67258: LD_INT 22
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PPUSH
67272: CALL_OW 69
67276: PPUSH
67277: LD_VAR 0 2
67281: PPUSH
67282: CALL_OW 74
67286: PPUSH
67287: CALL_OW 115
// end ;
67291: GO 67218
67293: POP
67294: POP
// until not tmp ;
67295: LD_VAR 0 3
67299: NOT
67300: IFFALSE 67201
// end ;
67302: PPOPN 3
67304: END
// every 0 0$1 trigger StreamModeActive and sTroll do
67305: LD_EXP 50
67309: PUSH
67310: LD_EXP 75
67314: AND
67315: IFFALSE 67369
67317: GO 67319
67319: DISABLE
// begin ToLua ( displayTroll(); ) ;
67320: LD_STRING displayTroll();
67322: PPUSH
67323: CALL_OW 559
// wait ( 3 3$00 ) ;
67327: LD_INT 6300
67329: PPUSH
67330: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67334: LD_STRING hideTroll();
67336: PPUSH
67337: CALL_OW 559
// wait ( 1 1$00 ) ;
67341: LD_INT 2100
67343: PPUSH
67344: CALL_OW 67
// ToLua ( displayTroll(); ) ;
67348: LD_STRING displayTroll();
67350: PPUSH
67351: CALL_OW 559
// wait ( 1 1$00 ) ;
67355: LD_INT 2100
67357: PPUSH
67358: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67362: LD_STRING hideTroll();
67364: PPUSH
67365: CALL_OW 559
// end ;
67369: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
67370: LD_EXP 50
67374: PUSH
67375: LD_EXP 76
67379: AND
67380: IFFALSE 67443
67382: GO 67384
67384: DISABLE
67385: LD_INT 0
67387: PPUSH
// begin p := 0 ;
67388: LD_ADDR_VAR 0 1
67392: PUSH
67393: LD_INT 0
67395: ST_TO_ADDR
// repeat game_speed := 1 ;
67396: LD_ADDR_OWVAR 65
67400: PUSH
67401: LD_INT 1
67403: ST_TO_ADDR
// wait ( 0 0$1 ) ;
67404: LD_INT 35
67406: PPUSH
67407: CALL_OW 67
// p := p + 1 ;
67411: LD_ADDR_VAR 0 1
67415: PUSH
67416: LD_VAR 0 1
67420: PUSH
67421: LD_INT 1
67423: PLUS
67424: ST_TO_ADDR
// until p >= 60 ;
67425: LD_VAR 0 1
67429: PUSH
67430: LD_INT 60
67432: GREATEREQUAL
67433: IFFALSE 67396
// game_speed := 4 ;
67435: LD_ADDR_OWVAR 65
67439: PUSH
67440: LD_INT 4
67442: ST_TO_ADDR
// end ;
67443: PPOPN 1
67445: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
67446: LD_EXP 50
67450: PUSH
67451: LD_EXP 77
67455: AND
67456: IFFALSE 67602
67458: GO 67460
67460: DISABLE
67461: LD_INT 0
67463: PPUSH
67464: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67465: LD_ADDR_VAR 0 1
67469: PUSH
67470: LD_INT 22
67472: PUSH
67473: LD_OWVAR 2
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 2
67484: PUSH
67485: LD_INT 30
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 30
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: LIST
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PPUSH
67514: CALL_OW 69
67518: ST_TO_ADDR
// if not depot then
67519: LD_VAR 0 1
67523: NOT
67524: IFFALSE 67528
// exit ;
67526: GO 67602
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
67528: LD_ADDR_VAR 0 2
67532: PUSH
67533: LD_VAR 0 1
67537: PUSH
67538: LD_INT 1
67540: PPUSH
67541: LD_VAR 0 1
67545: PPUSH
67546: CALL_OW 12
67550: ARRAY
67551: PPUSH
67552: CALL_OW 274
67556: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
67557: LD_VAR 0 2
67561: PPUSH
67562: LD_INT 1
67564: PPUSH
67565: LD_INT 0
67567: PPUSH
67568: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
67572: LD_VAR 0 2
67576: PPUSH
67577: LD_INT 2
67579: PPUSH
67580: LD_INT 0
67582: PPUSH
67583: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
67587: LD_VAR 0 2
67591: PPUSH
67592: LD_INT 3
67594: PPUSH
67595: LD_INT 0
67597: PPUSH
67598: CALL_OW 277
// end ;
67602: PPOPN 2
67604: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
67605: LD_EXP 50
67609: PUSH
67610: LD_EXP 78
67614: AND
67615: IFFALSE 67712
67617: GO 67619
67619: DISABLE
67620: LD_INT 0
67622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67623: LD_ADDR_VAR 0 1
67627: PUSH
67628: LD_INT 22
67630: PUSH
67631: LD_OWVAR 2
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 21
67642: PUSH
67643: LD_INT 1
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 3
67652: PUSH
67653: LD_INT 23
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: LIST
67671: PPUSH
67672: CALL_OW 69
67676: ST_TO_ADDR
// if not tmp then
67677: LD_VAR 0 1
67681: NOT
67682: IFFALSE 67686
// exit ;
67684: GO 67712
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
67686: LD_VAR 0 1
67690: PUSH
67691: LD_INT 1
67693: PPUSH
67694: LD_VAR 0 1
67698: PPUSH
67699: CALL_OW 12
67703: ARRAY
67704: PPUSH
67705: LD_INT 200
67707: PPUSH
67708: CALL_OW 234
// end ;
67712: PPOPN 1
67714: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
67715: LD_EXP 50
67719: PUSH
67720: LD_EXP 79
67724: AND
67725: IFFALSE 67804
67727: GO 67729
67729: DISABLE
67730: LD_INT 0
67732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
67733: LD_ADDR_VAR 0 1
67737: PUSH
67738: LD_INT 22
67740: PUSH
67741: LD_OWVAR 2
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 21
67752: PUSH
67753: LD_INT 2
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PPUSH
67764: CALL_OW 69
67768: ST_TO_ADDR
// if not tmp then
67769: LD_VAR 0 1
67773: NOT
67774: IFFALSE 67778
// exit ;
67776: GO 67804
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
67778: LD_VAR 0 1
67782: PUSH
67783: LD_INT 1
67785: PPUSH
67786: LD_VAR 0 1
67790: PPUSH
67791: CALL_OW 12
67795: ARRAY
67796: PPUSH
67797: LD_INT 60
67799: PPUSH
67800: CALL_OW 234
// end ;
67804: PPOPN 1
67806: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
67807: LD_EXP 50
67811: PUSH
67812: LD_EXP 80
67816: AND
67817: IFFALSE 67916
67819: GO 67821
67821: DISABLE
67822: LD_INT 0
67824: PPUSH
67825: PPUSH
// begin enable ;
67826: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
67827: LD_ADDR_VAR 0 1
67831: PUSH
67832: LD_INT 22
67834: PUSH
67835: LD_OWVAR 2
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 61
67846: PUSH
67847: EMPTY
67848: LIST
67849: PUSH
67850: LD_INT 33
67852: PUSH
67853: LD_INT 2
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: LIST
67864: PPUSH
67865: CALL_OW 69
67869: ST_TO_ADDR
// if not tmp then
67870: LD_VAR 0 1
67874: NOT
67875: IFFALSE 67879
// exit ;
67877: GO 67916
// for i in tmp do
67879: LD_ADDR_VAR 0 2
67883: PUSH
67884: LD_VAR 0 1
67888: PUSH
67889: FOR_IN
67890: IFFALSE 67914
// if IsControledBy ( i ) then
67892: LD_VAR 0 2
67896: PPUSH
67897: CALL_OW 312
67901: IFFALSE 67912
// ComUnlink ( i ) ;
67903: LD_VAR 0 2
67907: PPUSH
67908: CALL_OW 136
67912: GO 67889
67914: POP
67915: POP
// end ;
67916: PPOPN 2
67918: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67919: LD_EXP 50
67923: PUSH
67924: LD_EXP 81
67928: AND
67929: IFFALSE 68069
67931: GO 67933
67933: DISABLE
67934: LD_INT 0
67936: PPUSH
67937: PPUSH
// begin ToLua ( displayPowell(); ) ;
67938: LD_STRING displayPowell();
67940: PPUSH
67941: CALL_OW 559
// uc_side := 0 ;
67945: LD_ADDR_OWVAR 20
67949: PUSH
67950: LD_INT 0
67952: ST_TO_ADDR
// uc_nation := 2 ;
67953: LD_ADDR_OWVAR 21
67957: PUSH
67958: LD_INT 2
67960: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67961: LD_ADDR_OWVAR 37
67965: PUSH
67966: LD_INT 14
67968: ST_TO_ADDR
// vc_engine := engine_siberite ;
67969: LD_ADDR_OWVAR 39
67973: PUSH
67974: LD_INT 3
67976: ST_TO_ADDR
// vc_control := control_apeman ;
67977: LD_ADDR_OWVAR 38
67981: PUSH
67982: LD_INT 5
67984: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67985: LD_ADDR_OWVAR 40
67989: PUSH
67990: LD_INT 29
67992: ST_TO_ADDR
// un := CreateVehicle ;
67993: LD_ADDR_VAR 0 2
67997: PUSH
67998: CALL_OW 45
68002: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68003: LD_VAR 0 2
68007: PPUSH
68008: LD_INT 1
68010: PPUSH
68011: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68015: LD_INT 35
68017: PPUSH
68018: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68022: LD_VAR 0 2
68026: PPUSH
68027: LD_INT 22
68029: PUSH
68030: LD_OWVAR 2
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PPUSH
68039: CALL_OW 69
68043: PPUSH
68044: LD_VAR 0 2
68048: PPUSH
68049: CALL_OW 74
68053: PPUSH
68054: CALL_OW 115
// until IsDead ( un ) ;
68058: LD_VAR 0 2
68062: PPUSH
68063: CALL_OW 301
68067: IFFALSE 68015
// end ;
68069: PPOPN 2
68071: END
// every 0 0$1 trigger StreamModeActive and sStu do
68072: LD_EXP 50
68076: PUSH
68077: LD_EXP 89
68081: AND
68082: IFFALSE 68098
68084: GO 68086
68086: DISABLE
// begin ToLua ( displayStucuk(); ) ;
68087: LD_STRING displayStucuk();
68089: PPUSH
68090: CALL_OW 559
// ResetFog ;
68094: CALL_OW 335
// end ;
68098: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
68099: LD_EXP 50
68103: PUSH
68104: LD_EXP 82
68108: AND
68109: IFFALSE 68250
68111: GO 68113
68113: DISABLE
68114: LD_INT 0
68116: PPUSH
68117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68118: LD_ADDR_VAR 0 2
68122: PUSH
68123: LD_INT 22
68125: PUSH
68126: LD_OWVAR 2
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 21
68137: PUSH
68138: LD_INT 1
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PPUSH
68149: CALL_OW 69
68153: ST_TO_ADDR
// if not tmp then
68154: LD_VAR 0 2
68158: NOT
68159: IFFALSE 68163
// exit ;
68161: GO 68250
// un := tmp [ rand ( 1 , tmp ) ] ;
68163: LD_ADDR_VAR 0 1
68167: PUSH
68168: LD_VAR 0 2
68172: PUSH
68173: LD_INT 1
68175: PPUSH
68176: LD_VAR 0 2
68180: PPUSH
68181: CALL_OW 12
68185: ARRAY
68186: ST_TO_ADDR
// SetSide ( un , 0 ) ;
68187: LD_VAR 0 1
68191: PPUSH
68192: LD_INT 0
68194: PPUSH
68195: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
68199: LD_VAR 0 1
68203: PPUSH
68204: LD_OWVAR 3
68208: PUSH
68209: LD_VAR 0 1
68213: DIFF
68214: PPUSH
68215: LD_VAR 0 1
68219: PPUSH
68220: CALL_OW 74
68224: PPUSH
68225: CALL_OW 115
// wait ( 0 0$20 ) ;
68229: LD_INT 700
68231: PPUSH
68232: CALL_OW 67
// SetSide ( un , your_side ) ;
68236: LD_VAR 0 1
68240: PPUSH
68241: LD_OWVAR 2
68245: PPUSH
68246: CALL_OW 235
// end ;
68250: PPOPN 2
68252: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
68253: LD_EXP 50
68257: PUSH
68258: LD_EXP 83
68262: AND
68263: IFFALSE 68369
68265: GO 68267
68267: DISABLE
68268: LD_INT 0
68270: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68271: LD_ADDR_VAR 0 1
68275: PUSH
68276: LD_INT 22
68278: PUSH
68279: LD_OWVAR 2
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 2
68290: PUSH
68291: LD_INT 30
68293: PUSH
68294: LD_INT 0
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 30
68303: PUSH
68304: LD_INT 1
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: LIST
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PPUSH
68320: CALL_OW 69
68324: ST_TO_ADDR
// if not depot then
68325: LD_VAR 0 1
68329: NOT
68330: IFFALSE 68334
// exit ;
68332: GO 68369
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
68334: LD_VAR 0 1
68338: PUSH
68339: LD_INT 1
68341: ARRAY
68342: PPUSH
68343: CALL_OW 250
68347: PPUSH
68348: LD_VAR 0 1
68352: PUSH
68353: LD_INT 1
68355: ARRAY
68356: PPUSH
68357: CALL_OW 251
68361: PPUSH
68362: LD_INT 70
68364: PPUSH
68365: CALL_OW 495
// end ;
68369: PPOPN 1
68371: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
68372: LD_EXP 50
68376: PUSH
68377: LD_EXP 84
68381: AND
68382: IFFALSE 68593
68384: GO 68386
68386: DISABLE
68387: LD_INT 0
68389: PPUSH
68390: PPUSH
68391: PPUSH
68392: PPUSH
68393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68394: LD_ADDR_VAR 0 5
68398: PUSH
68399: LD_INT 22
68401: PUSH
68402: LD_OWVAR 2
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 21
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PPUSH
68425: CALL_OW 69
68429: ST_TO_ADDR
// if not tmp then
68430: LD_VAR 0 5
68434: NOT
68435: IFFALSE 68439
// exit ;
68437: GO 68593
// for i in tmp do
68439: LD_ADDR_VAR 0 1
68443: PUSH
68444: LD_VAR 0 5
68448: PUSH
68449: FOR_IN
68450: IFFALSE 68591
// begin d := rand ( 0 , 5 ) ;
68452: LD_ADDR_VAR 0 4
68456: PUSH
68457: LD_INT 0
68459: PPUSH
68460: LD_INT 5
68462: PPUSH
68463: CALL_OW 12
68467: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
68468: LD_ADDR_VAR 0 2
68472: PUSH
68473: LD_VAR 0 1
68477: PPUSH
68478: CALL_OW 250
68482: PPUSH
68483: LD_VAR 0 4
68487: PPUSH
68488: LD_INT 3
68490: PPUSH
68491: LD_INT 12
68493: PPUSH
68494: CALL_OW 12
68498: PPUSH
68499: CALL_OW 272
68503: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
68504: LD_ADDR_VAR 0 3
68508: PUSH
68509: LD_VAR 0 1
68513: PPUSH
68514: CALL_OW 251
68518: PPUSH
68519: LD_VAR 0 4
68523: PPUSH
68524: LD_INT 3
68526: PPUSH
68527: LD_INT 12
68529: PPUSH
68530: CALL_OW 12
68534: PPUSH
68535: CALL_OW 273
68539: ST_TO_ADDR
// if ValidHex ( x , y ) then
68540: LD_VAR 0 2
68544: PPUSH
68545: LD_VAR 0 3
68549: PPUSH
68550: CALL_OW 488
68554: IFFALSE 68589
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
68556: LD_VAR 0 1
68560: PPUSH
68561: LD_VAR 0 2
68565: PPUSH
68566: LD_VAR 0 3
68570: PPUSH
68571: LD_INT 3
68573: PPUSH
68574: LD_INT 6
68576: PPUSH
68577: CALL_OW 12
68581: PPUSH
68582: LD_INT 1
68584: PPUSH
68585: CALL_OW 483
// end ;
68589: GO 68449
68591: POP
68592: POP
// end ;
68593: PPOPN 5
68595: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
68596: LD_EXP 50
68600: PUSH
68601: LD_EXP 85
68605: AND
68606: IFFALSE 68700
68608: GO 68610
68610: DISABLE
68611: LD_INT 0
68613: PPUSH
68614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
68615: LD_ADDR_VAR 0 2
68619: PUSH
68620: LD_INT 22
68622: PUSH
68623: LD_OWVAR 2
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 32
68634: PUSH
68635: LD_INT 1
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 21
68644: PUSH
68645: LD_INT 2
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: LIST
68656: PPUSH
68657: CALL_OW 69
68661: ST_TO_ADDR
// if not tmp then
68662: LD_VAR 0 2
68666: NOT
68667: IFFALSE 68671
// exit ;
68669: GO 68700
// for i in tmp do
68671: LD_ADDR_VAR 0 1
68675: PUSH
68676: LD_VAR 0 2
68680: PUSH
68681: FOR_IN
68682: IFFALSE 68698
// SetFuel ( i , 0 ) ;
68684: LD_VAR 0 1
68688: PPUSH
68689: LD_INT 0
68691: PPUSH
68692: CALL_OW 240
68696: GO 68681
68698: POP
68699: POP
// end ;
68700: PPOPN 2
68702: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
68703: LD_EXP 50
68707: PUSH
68708: LD_EXP 86
68712: AND
68713: IFFALSE 68779
68715: GO 68717
68717: DISABLE
68718: LD_INT 0
68720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68721: LD_ADDR_VAR 0 1
68725: PUSH
68726: LD_INT 22
68728: PUSH
68729: LD_OWVAR 2
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 30
68740: PUSH
68741: LD_INT 29
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PPUSH
68752: CALL_OW 69
68756: ST_TO_ADDR
// if not tmp then
68757: LD_VAR 0 1
68761: NOT
68762: IFFALSE 68766
// exit ;
68764: GO 68779
// DestroyUnit ( tmp [ 1 ] ) ;
68766: LD_VAR 0 1
68770: PUSH
68771: LD_INT 1
68773: ARRAY
68774: PPUSH
68775: CALL_OW 65
// end ;
68779: PPOPN 1
68781: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
68782: LD_EXP 50
68786: PUSH
68787: LD_EXP 88
68791: AND
68792: IFFALSE 68921
68794: GO 68796
68796: DISABLE
68797: LD_INT 0
68799: PPUSH
// begin uc_side := 0 ;
68800: LD_ADDR_OWVAR 20
68804: PUSH
68805: LD_INT 0
68807: ST_TO_ADDR
// uc_nation := nation_arabian ;
68808: LD_ADDR_OWVAR 21
68812: PUSH
68813: LD_INT 2
68815: ST_TO_ADDR
// hc_gallery :=  ;
68816: LD_ADDR_OWVAR 33
68820: PUSH
68821: LD_STRING 
68823: ST_TO_ADDR
// hc_name :=  ;
68824: LD_ADDR_OWVAR 26
68828: PUSH
68829: LD_STRING 
68831: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
68832: LD_INT 1
68834: PPUSH
68835: LD_INT 11
68837: PPUSH
68838: LD_INT 10
68840: PPUSH
68841: CALL_OW 380
// un := CreateHuman ;
68845: LD_ADDR_VAR 0 1
68849: PUSH
68850: CALL_OW 44
68854: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68855: LD_VAR 0 1
68859: PPUSH
68860: LD_INT 1
68862: PPUSH
68863: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68867: LD_INT 35
68869: PPUSH
68870: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68874: LD_VAR 0 1
68878: PPUSH
68879: LD_INT 22
68881: PUSH
68882: LD_OWVAR 2
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PPUSH
68891: CALL_OW 69
68895: PPUSH
68896: LD_VAR 0 1
68900: PPUSH
68901: CALL_OW 74
68905: PPUSH
68906: CALL_OW 115
// until IsDead ( un ) ;
68910: LD_VAR 0 1
68914: PPUSH
68915: CALL_OW 301
68919: IFFALSE 68867
// end ;
68921: PPOPN 1
68923: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68924: LD_EXP 50
68928: PUSH
68929: LD_EXP 90
68933: AND
68934: IFFALSE 68946
68936: GO 68938
68938: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68939: LD_STRING earthquake(getX(game), 0, 32)
68941: PPUSH
68942: CALL_OW 559
68946: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68947: LD_EXP 50
68951: PUSH
68952: LD_EXP 91
68956: AND
68957: IFFALSE 69048
68959: GO 68961
68961: DISABLE
68962: LD_INT 0
68964: PPUSH
// begin enable ;
68965: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68966: LD_ADDR_VAR 0 1
68970: PUSH
68971: LD_INT 22
68973: PUSH
68974: LD_OWVAR 2
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 21
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 33
68995: PUSH
68996: LD_INT 3
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: LIST
69007: PPUSH
69008: CALL_OW 69
69012: ST_TO_ADDR
// if not tmp then
69013: LD_VAR 0 1
69017: NOT
69018: IFFALSE 69022
// exit ;
69020: GO 69048
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69022: LD_VAR 0 1
69026: PUSH
69027: LD_INT 1
69029: PPUSH
69030: LD_VAR 0 1
69034: PPUSH
69035: CALL_OW 12
69039: ARRAY
69040: PPUSH
69041: LD_INT 1
69043: PPUSH
69044: CALL_OW 234
// end ;
69048: PPOPN 1
69050: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
69051: LD_EXP 50
69055: PUSH
69056: LD_EXP 92
69060: AND
69061: IFFALSE 69202
69063: GO 69065
69065: DISABLE
69066: LD_INT 0
69068: PPUSH
69069: PPUSH
69070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69071: LD_ADDR_VAR 0 3
69075: PUSH
69076: LD_INT 22
69078: PUSH
69079: LD_OWVAR 2
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 25
69090: PUSH
69091: LD_INT 1
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PPUSH
69102: CALL_OW 69
69106: ST_TO_ADDR
// if not tmp then
69107: LD_VAR 0 3
69111: NOT
69112: IFFALSE 69116
// exit ;
69114: GO 69202
// un := tmp [ rand ( 1 , tmp ) ] ;
69116: LD_ADDR_VAR 0 2
69120: PUSH
69121: LD_VAR 0 3
69125: PUSH
69126: LD_INT 1
69128: PPUSH
69129: LD_VAR 0 3
69133: PPUSH
69134: CALL_OW 12
69138: ARRAY
69139: ST_TO_ADDR
// if Crawls ( un ) then
69140: LD_VAR 0 2
69144: PPUSH
69145: CALL_OW 318
69149: IFFALSE 69160
// ComWalk ( un ) ;
69151: LD_VAR 0 2
69155: PPUSH
69156: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
69160: LD_VAR 0 2
69164: PPUSH
69165: LD_INT 9
69167: PPUSH
69168: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
69172: LD_INT 28
69174: PPUSH
69175: LD_OWVAR 2
69179: PPUSH
69180: LD_INT 2
69182: PPUSH
69183: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
69187: LD_INT 29
69189: PPUSH
69190: LD_OWVAR 2
69194: PPUSH
69195: LD_INT 2
69197: PPUSH
69198: CALL_OW 322
// end ;
69202: PPOPN 3
69204: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
69205: LD_EXP 50
69209: PUSH
69210: LD_EXP 93
69214: AND
69215: IFFALSE 69326
69217: GO 69219
69219: DISABLE
69220: LD_INT 0
69222: PPUSH
69223: PPUSH
69224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69225: LD_ADDR_VAR 0 3
69229: PUSH
69230: LD_INT 22
69232: PUSH
69233: LD_OWVAR 2
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 25
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PPUSH
69256: CALL_OW 69
69260: ST_TO_ADDR
// if not tmp then
69261: LD_VAR 0 3
69265: NOT
69266: IFFALSE 69270
// exit ;
69268: GO 69326
// un := tmp [ rand ( 1 , tmp ) ] ;
69270: LD_ADDR_VAR 0 2
69274: PUSH
69275: LD_VAR 0 3
69279: PUSH
69280: LD_INT 1
69282: PPUSH
69283: LD_VAR 0 3
69287: PPUSH
69288: CALL_OW 12
69292: ARRAY
69293: ST_TO_ADDR
// if Crawls ( un ) then
69294: LD_VAR 0 2
69298: PPUSH
69299: CALL_OW 318
69303: IFFALSE 69314
// ComWalk ( un ) ;
69305: LD_VAR 0 2
69309: PPUSH
69310: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69314: LD_VAR 0 2
69318: PPUSH
69319: LD_INT 8
69321: PPUSH
69322: CALL_OW 336
// end ;
69326: PPOPN 3
69328: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
69329: LD_EXP 50
69333: PUSH
69334: LD_EXP 94
69338: AND
69339: IFFALSE 69483
69341: GO 69343
69343: DISABLE
69344: LD_INT 0
69346: PPUSH
69347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
69348: LD_ADDR_VAR 0 2
69352: PUSH
69353: LD_INT 22
69355: PUSH
69356: LD_OWVAR 2
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 21
69367: PUSH
69368: LD_INT 2
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 2
69377: PUSH
69378: LD_INT 34
69380: PUSH
69381: LD_INT 12
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 34
69390: PUSH
69391: LD_INT 51
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 34
69400: PUSH
69401: LD_INT 32
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: LIST
69418: PPUSH
69419: CALL_OW 69
69423: ST_TO_ADDR
// if not tmp then
69424: LD_VAR 0 2
69428: NOT
69429: IFFALSE 69433
// exit ;
69431: GO 69483
// for i in tmp do
69433: LD_ADDR_VAR 0 1
69437: PUSH
69438: LD_VAR 0 2
69442: PUSH
69443: FOR_IN
69444: IFFALSE 69481
// if GetCargo ( i , mat_artifact ) = 0 then
69446: LD_VAR 0 1
69450: PPUSH
69451: LD_INT 4
69453: PPUSH
69454: CALL_OW 289
69458: PUSH
69459: LD_INT 0
69461: EQUAL
69462: IFFALSE 69479
// SetCargo ( i , mat_siberit , 100 ) ;
69464: LD_VAR 0 1
69468: PPUSH
69469: LD_INT 3
69471: PPUSH
69472: LD_INT 100
69474: PPUSH
69475: CALL_OW 290
69479: GO 69443
69481: POP
69482: POP
// end ;
69483: PPOPN 2
69485: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
69486: LD_EXP 50
69490: PUSH
69491: LD_EXP 95
69495: AND
69496: IFFALSE 69679
69498: GO 69500
69500: DISABLE
69501: LD_INT 0
69503: PPUSH
69504: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69505: LD_ADDR_VAR 0 2
69509: PUSH
69510: LD_INT 22
69512: PUSH
69513: LD_OWVAR 2
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PPUSH
69522: CALL_OW 69
69526: ST_TO_ADDR
// if not tmp then
69527: LD_VAR 0 2
69531: NOT
69532: IFFALSE 69536
// exit ;
69534: GO 69679
// for i := 1 to 2 do
69536: LD_ADDR_VAR 0 1
69540: PUSH
69541: DOUBLE
69542: LD_INT 1
69544: DEC
69545: ST_TO_ADDR
69546: LD_INT 2
69548: PUSH
69549: FOR_TO
69550: IFFALSE 69677
// begin uc_side := your_side ;
69552: LD_ADDR_OWVAR 20
69556: PUSH
69557: LD_OWVAR 2
69561: ST_TO_ADDR
// uc_nation := nation_american ;
69562: LD_ADDR_OWVAR 21
69566: PUSH
69567: LD_INT 1
69569: ST_TO_ADDR
// vc_chassis := us_morphling ;
69570: LD_ADDR_OWVAR 37
69574: PUSH
69575: LD_INT 5
69577: ST_TO_ADDR
// vc_engine := engine_siberite ;
69578: LD_ADDR_OWVAR 39
69582: PUSH
69583: LD_INT 3
69585: ST_TO_ADDR
// vc_control := control_computer ;
69586: LD_ADDR_OWVAR 38
69590: PUSH
69591: LD_INT 3
69593: ST_TO_ADDR
// vc_weapon := us_double_laser ;
69594: LD_ADDR_OWVAR 40
69598: PUSH
69599: LD_INT 10
69601: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
69602: LD_VAR 0 2
69606: PUSH
69607: LD_INT 1
69609: ARRAY
69610: PPUSH
69611: CALL_OW 310
69615: NOT
69616: IFFALSE 69663
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
69618: CALL_OW 45
69622: PPUSH
69623: LD_VAR 0 2
69627: PUSH
69628: LD_INT 1
69630: ARRAY
69631: PPUSH
69632: CALL_OW 250
69636: PPUSH
69637: LD_VAR 0 2
69641: PUSH
69642: LD_INT 1
69644: ARRAY
69645: PPUSH
69646: CALL_OW 251
69650: PPUSH
69651: LD_INT 12
69653: PPUSH
69654: LD_INT 1
69656: PPUSH
69657: CALL_OW 50
69661: GO 69675
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
69663: CALL_OW 45
69667: PPUSH
69668: LD_INT 1
69670: PPUSH
69671: CALL_OW 51
// end ;
69675: GO 69549
69677: POP
69678: POP
// end ;
69679: PPOPN 2
69681: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
69682: LD_EXP 50
69686: PUSH
69687: LD_EXP 96
69691: AND
69692: IFFALSE 69914
69694: GO 69696
69696: DISABLE
69697: LD_INT 0
69699: PPUSH
69700: PPUSH
69701: PPUSH
69702: PPUSH
69703: PPUSH
69704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69705: LD_ADDR_VAR 0 6
69709: PUSH
69710: LD_INT 22
69712: PUSH
69713: LD_OWVAR 2
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 21
69724: PUSH
69725: LD_INT 1
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 3
69734: PUSH
69735: LD_INT 23
69737: PUSH
69738: LD_INT 0
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: LIST
69753: PPUSH
69754: CALL_OW 69
69758: ST_TO_ADDR
// if not tmp then
69759: LD_VAR 0 6
69763: NOT
69764: IFFALSE 69768
// exit ;
69766: GO 69914
// s1 := rand ( 1 , 4 ) ;
69768: LD_ADDR_VAR 0 2
69772: PUSH
69773: LD_INT 1
69775: PPUSH
69776: LD_INT 4
69778: PPUSH
69779: CALL_OW 12
69783: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
69784: LD_ADDR_VAR 0 4
69788: PUSH
69789: LD_VAR 0 6
69793: PUSH
69794: LD_INT 1
69796: ARRAY
69797: PPUSH
69798: LD_VAR 0 2
69802: PPUSH
69803: CALL_OW 259
69807: ST_TO_ADDR
// if s1 = 1 then
69808: LD_VAR 0 2
69812: PUSH
69813: LD_INT 1
69815: EQUAL
69816: IFFALSE 69836
// s2 := rand ( 2 , 4 ) else
69818: LD_ADDR_VAR 0 3
69822: PUSH
69823: LD_INT 2
69825: PPUSH
69826: LD_INT 4
69828: PPUSH
69829: CALL_OW 12
69833: ST_TO_ADDR
69834: GO 69844
// s2 := 1 ;
69836: LD_ADDR_VAR 0 3
69840: PUSH
69841: LD_INT 1
69843: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
69844: LD_ADDR_VAR 0 5
69848: PUSH
69849: LD_VAR 0 6
69853: PUSH
69854: LD_INT 1
69856: ARRAY
69857: PPUSH
69858: LD_VAR 0 3
69862: PPUSH
69863: CALL_OW 259
69867: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
69868: LD_VAR 0 6
69872: PUSH
69873: LD_INT 1
69875: ARRAY
69876: PPUSH
69877: LD_VAR 0 2
69881: PPUSH
69882: LD_VAR 0 5
69886: PPUSH
69887: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69891: LD_VAR 0 6
69895: PUSH
69896: LD_INT 1
69898: ARRAY
69899: PPUSH
69900: LD_VAR 0 3
69904: PPUSH
69905: LD_VAR 0 4
69909: PPUSH
69910: CALL_OW 237
// end ;
69914: PPOPN 6
69916: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69917: LD_EXP 50
69921: PUSH
69922: LD_EXP 97
69926: AND
69927: IFFALSE 70006
69929: GO 69931
69931: DISABLE
69932: LD_INT 0
69934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69935: LD_ADDR_VAR 0 1
69939: PUSH
69940: LD_INT 22
69942: PUSH
69943: LD_OWVAR 2
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 30
69954: PUSH
69955: LD_INT 3
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PPUSH
69966: CALL_OW 69
69970: ST_TO_ADDR
// if not tmp then
69971: LD_VAR 0 1
69975: NOT
69976: IFFALSE 69980
// exit ;
69978: GO 70006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69980: LD_VAR 0 1
69984: PUSH
69985: LD_INT 1
69987: PPUSH
69988: LD_VAR 0 1
69992: PPUSH
69993: CALL_OW 12
69997: ARRAY
69998: PPUSH
69999: LD_INT 1
70001: PPUSH
70002: CALL_OW 234
// end ;
70006: PPOPN 1
70008: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
70009: LD_EXP 50
70013: PUSH
70014: LD_EXP 98
70018: AND
70019: IFFALSE 70131
70021: GO 70023
70023: DISABLE
70024: LD_INT 0
70026: PPUSH
70027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
70028: LD_ADDR_VAR 0 2
70032: PUSH
70033: LD_INT 22
70035: PUSH
70036: LD_OWVAR 2
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 2
70047: PUSH
70048: LD_INT 30
70050: PUSH
70051: LD_INT 27
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 30
70060: PUSH
70061: LD_INT 26
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 30
70070: PUSH
70071: LD_INT 28
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PPUSH
70088: CALL_OW 69
70092: ST_TO_ADDR
// if not tmp then
70093: LD_VAR 0 2
70097: NOT
70098: IFFALSE 70102
// exit ;
70100: GO 70131
// for i in tmp do
70102: LD_ADDR_VAR 0 1
70106: PUSH
70107: LD_VAR 0 2
70111: PUSH
70112: FOR_IN
70113: IFFALSE 70129
// SetLives ( i , 1 ) ;
70115: LD_VAR 0 1
70119: PPUSH
70120: LD_INT 1
70122: PPUSH
70123: CALL_OW 234
70127: GO 70112
70129: POP
70130: POP
// end ;
70131: PPOPN 2
70133: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
70134: LD_EXP 50
70138: PUSH
70139: LD_EXP 99
70143: AND
70144: IFFALSE 70431
70146: GO 70148
70148: DISABLE
70149: LD_INT 0
70151: PPUSH
70152: PPUSH
70153: PPUSH
// begin i := rand ( 1 , 7 ) ;
70154: LD_ADDR_VAR 0 1
70158: PUSH
70159: LD_INT 1
70161: PPUSH
70162: LD_INT 7
70164: PPUSH
70165: CALL_OW 12
70169: ST_TO_ADDR
// case i of 1 :
70170: LD_VAR 0 1
70174: PUSH
70175: LD_INT 1
70177: DOUBLE
70178: EQUAL
70179: IFTRUE 70183
70181: GO 70193
70183: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
70184: LD_STRING earthquake(getX(game), 0, 32)
70186: PPUSH
70187: CALL_OW 559
70191: GO 70431
70193: LD_INT 2
70195: DOUBLE
70196: EQUAL
70197: IFTRUE 70201
70199: GO 70215
70201: POP
// begin ToLua ( displayStucuk(); ) ;
70202: LD_STRING displayStucuk();
70204: PPUSH
70205: CALL_OW 559
// ResetFog ;
70209: CALL_OW 335
// end ; 3 :
70213: GO 70431
70215: LD_INT 3
70217: DOUBLE
70218: EQUAL
70219: IFTRUE 70223
70221: GO 70327
70223: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70224: LD_ADDR_VAR 0 2
70228: PUSH
70229: LD_INT 22
70231: PUSH
70232: LD_OWVAR 2
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 25
70243: PUSH
70244: LD_INT 1
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PPUSH
70255: CALL_OW 69
70259: ST_TO_ADDR
// if not tmp then
70260: LD_VAR 0 2
70264: NOT
70265: IFFALSE 70269
// exit ;
70267: GO 70431
// un := tmp [ rand ( 1 , tmp ) ] ;
70269: LD_ADDR_VAR 0 3
70273: PUSH
70274: LD_VAR 0 2
70278: PUSH
70279: LD_INT 1
70281: PPUSH
70282: LD_VAR 0 2
70286: PPUSH
70287: CALL_OW 12
70291: ARRAY
70292: ST_TO_ADDR
// if Crawls ( un ) then
70293: LD_VAR 0 3
70297: PPUSH
70298: CALL_OW 318
70302: IFFALSE 70313
// ComWalk ( un ) ;
70304: LD_VAR 0 3
70308: PPUSH
70309: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70313: LD_VAR 0 3
70317: PPUSH
70318: LD_INT 8
70320: PPUSH
70321: CALL_OW 336
// end ; 4 :
70325: GO 70431
70327: LD_INT 4
70329: DOUBLE
70330: EQUAL
70331: IFTRUE 70335
70333: GO 70409
70335: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70336: LD_ADDR_VAR 0 2
70340: PUSH
70341: LD_INT 22
70343: PUSH
70344: LD_OWVAR 2
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 30
70355: PUSH
70356: LD_INT 29
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PPUSH
70367: CALL_OW 69
70371: ST_TO_ADDR
// if not tmp then
70372: LD_VAR 0 2
70376: NOT
70377: IFFALSE 70381
// exit ;
70379: GO 70431
// CenterNowOnUnits ( tmp [ 1 ] ) ;
70381: LD_VAR 0 2
70385: PUSH
70386: LD_INT 1
70388: ARRAY
70389: PPUSH
70390: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
70394: LD_VAR 0 2
70398: PUSH
70399: LD_INT 1
70401: ARRAY
70402: PPUSH
70403: CALL_OW 65
// end ; 5 .. 7 :
70407: GO 70431
70409: LD_INT 5
70411: DOUBLE
70412: GREATEREQUAL
70413: IFFALSE 70421
70415: LD_INT 7
70417: DOUBLE
70418: LESSEQUAL
70419: IFTRUE 70423
70421: GO 70430
70423: POP
// StreamSibBomb ; end ;
70424: CALL 66668 0 0
70428: GO 70431
70430: POP
// end ;
70431: PPOPN 3
70433: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
70434: LD_EXP 50
70438: PUSH
70439: LD_EXP 100
70443: AND
70444: IFFALSE 70600
70446: GO 70448
70448: DISABLE
70449: LD_INT 0
70451: PPUSH
70452: PPUSH
70453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
70454: LD_ADDR_VAR 0 2
70458: PUSH
70459: LD_INT 81
70461: PUSH
70462: LD_OWVAR 2
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 2
70473: PUSH
70474: LD_INT 21
70476: PUSH
70477: LD_INT 1
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 21
70486: PUSH
70487: LD_INT 2
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: LIST
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PPUSH
70503: CALL_OW 69
70507: ST_TO_ADDR
// if not tmp then
70508: LD_VAR 0 2
70512: NOT
70513: IFFALSE 70517
// exit ;
70515: GO 70600
// p := 0 ;
70517: LD_ADDR_VAR 0 3
70521: PUSH
70522: LD_INT 0
70524: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70525: LD_INT 35
70527: PPUSH
70528: CALL_OW 67
// p := p + 1 ;
70532: LD_ADDR_VAR 0 3
70536: PUSH
70537: LD_VAR 0 3
70541: PUSH
70542: LD_INT 1
70544: PLUS
70545: ST_TO_ADDR
// for i in tmp do
70546: LD_ADDR_VAR 0 1
70550: PUSH
70551: LD_VAR 0 2
70555: PUSH
70556: FOR_IN
70557: IFFALSE 70588
// if GetLives ( i ) < 1000 then
70559: LD_VAR 0 1
70563: PPUSH
70564: CALL_OW 256
70568: PUSH
70569: LD_INT 1000
70571: LESS
70572: IFFALSE 70586
// SetLives ( i , 1000 ) ;
70574: LD_VAR 0 1
70578: PPUSH
70579: LD_INT 1000
70581: PPUSH
70582: CALL_OW 234
70586: GO 70556
70588: POP
70589: POP
// until p > 20 ;
70590: LD_VAR 0 3
70594: PUSH
70595: LD_INT 20
70597: GREATER
70598: IFFALSE 70525
// end ;
70600: PPOPN 3
70602: END
// every 0 0$1 trigger StreamModeActive and sTime do
70603: LD_EXP 50
70607: PUSH
70608: LD_EXP 101
70612: AND
70613: IFFALSE 70648
70615: GO 70617
70617: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
70618: LD_INT 28
70620: PPUSH
70621: LD_OWVAR 2
70625: PPUSH
70626: LD_INT 2
70628: PPUSH
70629: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
70633: LD_INT 30
70635: PPUSH
70636: LD_OWVAR 2
70640: PPUSH
70641: LD_INT 2
70643: PPUSH
70644: CALL_OW 322
// end ;
70648: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
70649: LD_EXP 50
70653: PUSH
70654: LD_EXP 102
70658: AND
70659: IFFALSE 70780
70661: GO 70663
70663: DISABLE
70664: LD_INT 0
70666: PPUSH
70667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70668: LD_ADDR_VAR 0 2
70672: PUSH
70673: LD_INT 22
70675: PUSH
70676: LD_OWVAR 2
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 21
70687: PUSH
70688: LD_INT 1
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 3
70697: PUSH
70698: LD_INT 23
70700: PUSH
70701: LD_INT 0
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: LIST
70716: PPUSH
70717: CALL_OW 69
70721: ST_TO_ADDR
// if not tmp then
70722: LD_VAR 0 2
70726: NOT
70727: IFFALSE 70731
// exit ;
70729: GO 70780
// for i in tmp do
70731: LD_ADDR_VAR 0 1
70735: PUSH
70736: LD_VAR 0 2
70740: PUSH
70741: FOR_IN
70742: IFFALSE 70778
// begin if Crawls ( i ) then
70744: LD_VAR 0 1
70748: PPUSH
70749: CALL_OW 318
70753: IFFALSE 70764
// ComWalk ( i ) ;
70755: LD_VAR 0 1
70759: PPUSH
70760: CALL_OW 138
// SetClass ( i , 2 ) ;
70764: LD_VAR 0 1
70768: PPUSH
70769: LD_INT 2
70771: PPUSH
70772: CALL_OW 336
// end ;
70776: GO 70741
70778: POP
70779: POP
// end ;
70780: PPOPN 2
70782: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
70783: LD_EXP 50
70787: PUSH
70788: LD_EXP 103
70792: AND
70793: IFFALSE 71081
70795: GO 70797
70797: DISABLE
70798: LD_INT 0
70800: PPUSH
70801: PPUSH
70802: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
70803: LD_OWVAR 2
70807: PPUSH
70808: LD_INT 9
70810: PPUSH
70811: LD_INT 1
70813: PPUSH
70814: LD_INT 1
70816: PPUSH
70817: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
70821: LD_INT 9
70823: PPUSH
70824: LD_OWVAR 2
70828: PPUSH
70829: CALL_OW 343
// uc_side := 9 ;
70833: LD_ADDR_OWVAR 20
70837: PUSH
70838: LD_INT 9
70840: ST_TO_ADDR
// uc_nation := 2 ;
70841: LD_ADDR_OWVAR 21
70845: PUSH
70846: LD_INT 2
70848: ST_TO_ADDR
// hc_name := Dark Warrior ;
70849: LD_ADDR_OWVAR 26
70853: PUSH
70854: LD_STRING Dark Warrior
70856: ST_TO_ADDR
// hc_gallery :=  ;
70857: LD_ADDR_OWVAR 33
70861: PUSH
70862: LD_STRING 
70864: ST_TO_ADDR
// hc_noskilllimit := true ;
70865: LD_ADDR_OWVAR 76
70869: PUSH
70870: LD_INT 1
70872: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
70873: LD_ADDR_OWVAR 31
70877: PUSH
70878: LD_INT 30
70880: PUSH
70881: LD_INT 30
70883: PUSH
70884: LD_INT 30
70886: PUSH
70887: LD_INT 30
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: ST_TO_ADDR
// un := CreateHuman ;
70896: LD_ADDR_VAR 0 3
70900: PUSH
70901: CALL_OW 44
70905: ST_TO_ADDR
// hc_noskilllimit := false ;
70906: LD_ADDR_OWVAR 76
70910: PUSH
70911: LD_INT 0
70913: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70914: LD_VAR 0 3
70918: PPUSH
70919: LD_INT 1
70921: PPUSH
70922: CALL_OW 51
// ToLua ( playRanger() ) ;
70926: LD_STRING playRanger()
70928: PPUSH
70929: CALL_OW 559
// p := 0 ;
70933: LD_ADDR_VAR 0 2
70937: PUSH
70938: LD_INT 0
70940: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70941: LD_INT 35
70943: PPUSH
70944: CALL_OW 67
// p := p + 1 ;
70948: LD_ADDR_VAR 0 2
70952: PUSH
70953: LD_VAR 0 2
70957: PUSH
70958: LD_INT 1
70960: PLUS
70961: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70962: LD_VAR 0 3
70966: PPUSH
70967: CALL_OW 256
70971: PUSH
70972: LD_INT 1000
70974: LESS
70975: IFFALSE 70989
// SetLives ( un , 1000 ) ;
70977: LD_VAR 0 3
70981: PPUSH
70982: LD_INT 1000
70984: PPUSH
70985: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70989: LD_VAR 0 3
70993: PPUSH
70994: LD_INT 81
70996: PUSH
70997: LD_OWVAR 2
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 91
71008: PUSH
71009: LD_VAR 0 3
71013: PUSH
71014: LD_INT 30
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: LIST
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PPUSH
71026: CALL_OW 69
71030: PPUSH
71031: LD_VAR 0 3
71035: PPUSH
71036: CALL_OW 74
71040: PPUSH
71041: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
71045: LD_VAR 0 2
71049: PUSH
71050: LD_INT 80
71052: GREATER
71053: PUSH
71054: LD_VAR 0 3
71058: PPUSH
71059: CALL_OW 301
71063: OR
71064: IFFALSE 70941
// if un then
71066: LD_VAR 0 3
71070: IFFALSE 71081
// RemoveUnit ( un ) ;
71072: LD_VAR 0 3
71076: PPUSH
71077: CALL_OW 64
// end ;
71081: PPOPN 3
71083: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
71084: LD_EXP 104
71088: IFFALSE 71204
71090: GO 71092
71092: DISABLE
71093: LD_INT 0
71095: PPUSH
71096: PPUSH
71097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71098: LD_ADDR_VAR 0 2
71102: PUSH
71103: LD_INT 81
71105: PUSH
71106: LD_OWVAR 2
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 21
71117: PUSH
71118: LD_INT 1
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PPUSH
71129: CALL_OW 69
71133: ST_TO_ADDR
// ToLua ( playComputer() ) ;
71134: LD_STRING playComputer()
71136: PPUSH
71137: CALL_OW 559
// if not tmp then
71141: LD_VAR 0 2
71145: NOT
71146: IFFALSE 71150
// exit ;
71148: GO 71204
// for i in tmp do
71150: LD_ADDR_VAR 0 1
71154: PUSH
71155: LD_VAR 0 2
71159: PUSH
71160: FOR_IN
71161: IFFALSE 71202
// for j := 1 to 4 do
71163: LD_ADDR_VAR 0 3
71167: PUSH
71168: DOUBLE
71169: LD_INT 1
71171: DEC
71172: ST_TO_ADDR
71173: LD_INT 4
71175: PUSH
71176: FOR_TO
71177: IFFALSE 71198
// SetSkill ( i , j , 10 ) ;
71179: LD_VAR 0 1
71183: PPUSH
71184: LD_VAR 0 3
71188: PPUSH
71189: LD_INT 10
71191: PPUSH
71192: CALL_OW 237
71196: GO 71176
71198: POP
71199: POP
71200: GO 71160
71202: POP
71203: POP
// end ;
71204: PPOPN 3
71206: END
// every 0 0$1 trigger s30 do var i , tmp ;
71207: LD_EXP 105
71211: IFFALSE 71280
71213: GO 71215
71215: DISABLE
71216: LD_INT 0
71218: PPUSH
71219: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71220: LD_ADDR_VAR 0 2
71224: PUSH
71225: LD_INT 22
71227: PUSH
71228: LD_OWVAR 2
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PPUSH
71237: CALL_OW 69
71241: ST_TO_ADDR
// if not tmp then
71242: LD_VAR 0 2
71246: NOT
71247: IFFALSE 71251
// exit ;
71249: GO 71280
// for i in tmp do
71251: LD_ADDR_VAR 0 1
71255: PUSH
71256: LD_VAR 0 2
71260: PUSH
71261: FOR_IN
71262: IFFALSE 71278
// SetLives ( i , 300 ) ;
71264: LD_VAR 0 1
71268: PPUSH
71269: LD_INT 300
71271: PPUSH
71272: CALL_OW 234
71276: GO 71261
71278: POP
71279: POP
// end ;
71280: PPOPN 2
71282: END
// every 0 0$1 trigger s60 do var i , tmp ;
71283: LD_EXP 106
71287: IFFALSE 71356
71289: GO 71291
71291: DISABLE
71292: LD_INT 0
71294: PPUSH
71295: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71296: LD_ADDR_VAR 0 2
71300: PUSH
71301: LD_INT 22
71303: PUSH
71304: LD_OWVAR 2
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PPUSH
71313: CALL_OW 69
71317: ST_TO_ADDR
// if not tmp then
71318: LD_VAR 0 2
71322: NOT
71323: IFFALSE 71327
// exit ;
71325: GO 71356
// for i in tmp do
71327: LD_ADDR_VAR 0 1
71331: PUSH
71332: LD_VAR 0 2
71336: PUSH
71337: FOR_IN
71338: IFFALSE 71354
// SetLives ( i , 600 ) ;
71340: LD_VAR 0 1
71344: PPUSH
71345: LD_INT 600
71347: PPUSH
71348: CALL_OW 234
71352: GO 71337
71354: POP
71355: POP
// end ;
71356: PPOPN 2
71358: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71359: LD_INT 0
71361: PPUSH
// case cmd of 301 :
71362: LD_VAR 0 1
71366: PUSH
71367: LD_INT 301
71369: DOUBLE
71370: EQUAL
71371: IFTRUE 71375
71373: GO 71407
71375: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
71376: LD_VAR 0 6
71380: PPUSH
71381: LD_VAR 0 7
71385: PPUSH
71386: LD_VAR 0 8
71390: PPUSH
71391: LD_VAR 0 4
71395: PPUSH
71396: LD_VAR 0 5
71400: PPUSH
71401: CALL 72616 0 5
71405: GO 71528
71407: LD_INT 302
71409: DOUBLE
71410: EQUAL
71411: IFTRUE 71415
71413: GO 71452
71415: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
71416: LD_VAR 0 6
71420: PPUSH
71421: LD_VAR 0 7
71425: PPUSH
71426: LD_VAR 0 8
71430: PPUSH
71431: LD_VAR 0 9
71435: PPUSH
71436: LD_VAR 0 4
71440: PPUSH
71441: LD_VAR 0 5
71445: PPUSH
71446: CALL 72707 0 6
71450: GO 71528
71452: LD_INT 303
71454: DOUBLE
71455: EQUAL
71456: IFTRUE 71460
71458: GO 71497
71460: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
71461: LD_VAR 0 6
71465: PPUSH
71466: LD_VAR 0 7
71470: PPUSH
71471: LD_VAR 0 8
71475: PPUSH
71476: LD_VAR 0 9
71480: PPUSH
71481: LD_VAR 0 4
71485: PPUSH
71486: LD_VAR 0 5
71490: PPUSH
71491: CALL 71533 0 6
71495: GO 71528
71497: LD_INT 304
71499: DOUBLE
71500: EQUAL
71501: IFTRUE 71505
71503: GO 71527
71505: POP
// hHackTeleport ( unit , x , y ) ; end ;
71506: LD_VAR 0 2
71510: PPUSH
71511: LD_VAR 0 4
71515: PPUSH
71516: LD_VAR 0 5
71520: PPUSH
71521: CALL 73300 0 3
71525: GO 71528
71527: POP
// end ;
71528: LD_VAR 0 12
71532: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
71533: LD_INT 0
71535: PPUSH
71536: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
71537: LD_VAR 0 1
71541: PUSH
71542: LD_INT 1
71544: LESS
71545: PUSH
71546: LD_VAR 0 1
71550: PUSH
71551: LD_INT 3
71553: GREATER
71554: OR
71555: PUSH
71556: LD_VAR 0 5
71560: PPUSH
71561: LD_VAR 0 6
71565: PPUSH
71566: CALL_OW 428
71570: OR
71571: IFFALSE 71575
// exit ;
71573: GO 72303
// uc_side := your_side ;
71575: LD_ADDR_OWVAR 20
71579: PUSH
71580: LD_OWVAR 2
71584: ST_TO_ADDR
// uc_nation := nation ;
71585: LD_ADDR_OWVAR 21
71589: PUSH
71590: LD_VAR 0 1
71594: ST_TO_ADDR
// bc_level = 1 ;
71595: LD_ADDR_OWVAR 43
71599: PUSH
71600: LD_INT 1
71602: ST_TO_ADDR
// case btype of 1 :
71603: LD_VAR 0 2
71607: PUSH
71608: LD_INT 1
71610: DOUBLE
71611: EQUAL
71612: IFTRUE 71616
71614: GO 71627
71616: POP
// bc_type := b_depot ; 2 :
71617: LD_ADDR_OWVAR 42
71621: PUSH
71622: LD_INT 0
71624: ST_TO_ADDR
71625: GO 72247
71627: LD_INT 2
71629: DOUBLE
71630: EQUAL
71631: IFTRUE 71635
71633: GO 71646
71635: POP
// bc_type := b_warehouse ; 3 :
71636: LD_ADDR_OWVAR 42
71640: PUSH
71641: LD_INT 1
71643: ST_TO_ADDR
71644: GO 72247
71646: LD_INT 3
71648: DOUBLE
71649: EQUAL
71650: IFTRUE 71654
71652: GO 71665
71654: POP
// bc_type := b_lab ; 4 .. 9 :
71655: LD_ADDR_OWVAR 42
71659: PUSH
71660: LD_INT 6
71662: ST_TO_ADDR
71663: GO 72247
71665: LD_INT 4
71667: DOUBLE
71668: GREATEREQUAL
71669: IFFALSE 71677
71671: LD_INT 9
71673: DOUBLE
71674: LESSEQUAL
71675: IFTRUE 71679
71677: GO 71739
71679: POP
// begin bc_type := b_lab_half ;
71680: LD_ADDR_OWVAR 42
71684: PUSH
71685: LD_INT 7
71687: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
71688: LD_ADDR_OWVAR 44
71692: PUSH
71693: LD_INT 10
71695: PUSH
71696: LD_INT 11
71698: PUSH
71699: LD_INT 12
71701: PUSH
71702: LD_INT 15
71704: PUSH
71705: LD_INT 14
71707: PUSH
71708: LD_INT 13
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: PUSH
71719: LD_VAR 0 2
71723: PUSH
71724: LD_INT 3
71726: MINUS
71727: ARRAY
71728: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
71729: LD_ADDR_OWVAR 45
71733: PUSH
71734: LD_INT 9
71736: ST_TO_ADDR
// end ; 10 .. 13 :
71737: GO 72247
71739: LD_INT 10
71741: DOUBLE
71742: GREATEREQUAL
71743: IFFALSE 71751
71745: LD_INT 13
71747: DOUBLE
71748: LESSEQUAL
71749: IFTRUE 71753
71751: GO 71830
71753: POP
// begin bc_type := b_lab_full ;
71754: LD_ADDR_OWVAR 42
71758: PUSH
71759: LD_INT 8
71761: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
71762: LD_ADDR_OWVAR 44
71766: PUSH
71767: LD_INT 10
71769: PUSH
71770: LD_INT 12
71772: PUSH
71773: LD_INT 14
71775: PUSH
71776: LD_INT 13
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: PUSH
71785: LD_VAR 0 2
71789: PUSH
71790: LD_INT 9
71792: MINUS
71793: ARRAY
71794: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
71795: LD_ADDR_OWVAR 45
71799: PUSH
71800: LD_INT 11
71802: PUSH
71803: LD_INT 15
71805: PUSH
71806: LD_INT 12
71808: PUSH
71809: LD_INT 15
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: PUSH
71818: LD_VAR 0 2
71822: PUSH
71823: LD_INT 9
71825: MINUS
71826: ARRAY
71827: ST_TO_ADDR
// end ; 14 :
71828: GO 72247
71830: LD_INT 14
71832: DOUBLE
71833: EQUAL
71834: IFTRUE 71838
71836: GO 71849
71838: POP
// bc_type := b_workshop ; 15 :
71839: LD_ADDR_OWVAR 42
71843: PUSH
71844: LD_INT 2
71846: ST_TO_ADDR
71847: GO 72247
71849: LD_INT 15
71851: DOUBLE
71852: EQUAL
71853: IFTRUE 71857
71855: GO 71868
71857: POP
// bc_type := b_factory ; 16 :
71858: LD_ADDR_OWVAR 42
71862: PUSH
71863: LD_INT 3
71865: ST_TO_ADDR
71866: GO 72247
71868: LD_INT 16
71870: DOUBLE
71871: EQUAL
71872: IFTRUE 71876
71874: GO 71887
71876: POP
// bc_type := b_ext_gun ; 17 :
71877: LD_ADDR_OWVAR 42
71881: PUSH
71882: LD_INT 17
71884: ST_TO_ADDR
71885: GO 72247
71887: LD_INT 17
71889: DOUBLE
71890: EQUAL
71891: IFTRUE 71895
71893: GO 71923
71895: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
71896: LD_ADDR_OWVAR 42
71900: PUSH
71901: LD_INT 19
71903: PUSH
71904: LD_INT 23
71906: PUSH
71907: LD_INT 19
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: LIST
71914: PUSH
71915: LD_VAR 0 1
71919: ARRAY
71920: ST_TO_ADDR
71921: GO 72247
71923: LD_INT 18
71925: DOUBLE
71926: EQUAL
71927: IFTRUE 71931
71929: GO 71942
71931: POP
// bc_type := b_ext_radar ; 19 :
71932: LD_ADDR_OWVAR 42
71936: PUSH
71937: LD_INT 20
71939: ST_TO_ADDR
71940: GO 72247
71942: LD_INT 19
71944: DOUBLE
71945: EQUAL
71946: IFTRUE 71950
71948: GO 71961
71950: POP
// bc_type := b_ext_radio ; 20 :
71951: LD_ADDR_OWVAR 42
71955: PUSH
71956: LD_INT 22
71958: ST_TO_ADDR
71959: GO 72247
71961: LD_INT 20
71963: DOUBLE
71964: EQUAL
71965: IFTRUE 71969
71967: GO 71980
71969: POP
// bc_type := b_ext_siberium ; 21 :
71970: LD_ADDR_OWVAR 42
71974: PUSH
71975: LD_INT 21
71977: ST_TO_ADDR
71978: GO 72247
71980: LD_INT 21
71982: DOUBLE
71983: EQUAL
71984: IFTRUE 71988
71986: GO 71999
71988: POP
// bc_type := b_ext_computer ; 22 :
71989: LD_ADDR_OWVAR 42
71993: PUSH
71994: LD_INT 24
71996: ST_TO_ADDR
71997: GO 72247
71999: LD_INT 22
72001: DOUBLE
72002: EQUAL
72003: IFTRUE 72007
72005: GO 72018
72007: POP
// bc_type := b_ext_track ; 23 :
72008: LD_ADDR_OWVAR 42
72012: PUSH
72013: LD_INT 16
72015: ST_TO_ADDR
72016: GO 72247
72018: LD_INT 23
72020: DOUBLE
72021: EQUAL
72022: IFTRUE 72026
72024: GO 72037
72026: POP
// bc_type := b_ext_laser ; 24 :
72027: LD_ADDR_OWVAR 42
72031: PUSH
72032: LD_INT 25
72034: ST_TO_ADDR
72035: GO 72247
72037: LD_INT 24
72039: DOUBLE
72040: EQUAL
72041: IFTRUE 72045
72043: GO 72056
72045: POP
// bc_type := b_control_tower ; 25 :
72046: LD_ADDR_OWVAR 42
72050: PUSH
72051: LD_INT 36
72053: ST_TO_ADDR
72054: GO 72247
72056: LD_INT 25
72058: DOUBLE
72059: EQUAL
72060: IFTRUE 72064
72062: GO 72075
72064: POP
// bc_type := b_breastwork ; 26 :
72065: LD_ADDR_OWVAR 42
72069: PUSH
72070: LD_INT 31
72072: ST_TO_ADDR
72073: GO 72247
72075: LD_INT 26
72077: DOUBLE
72078: EQUAL
72079: IFTRUE 72083
72081: GO 72094
72083: POP
// bc_type := b_bunker ; 27 :
72084: LD_ADDR_OWVAR 42
72088: PUSH
72089: LD_INT 32
72091: ST_TO_ADDR
72092: GO 72247
72094: LD_INT 27
72096: DOUBLE
72097: EQUAL
72098: IFTRUE 72102
72100: GO 72113
72102: POP
// bc_type := b_turret ; 28 :
72103: LD_ADDR_OWVAR 42
72107: PUSH
72108: LD_INT 33
72110: ST_TO_ADDR
72111: GO 72247
72113: LD_INT 28
72115: DOUBLE
72116: EQUAL
72117: IFTRUE 72121
72119: GO 72132
72121: POP
// bc_type := b_armoury ; 29 :
72122: LD_ADDR_OWVAR 42
72126: PUSH
72127: LD_INT 4
72129: ST_TO_ADDR
72130: GO 72247
72132: LD_INT 29
72134: DOUBLE
72135: EQUAL
72136: IFTRUE 72140
72138: GO 72151
72140: POP
// bc_type := b_barracks ; 30 :
72141: LD_ADDR_OWVAR 42
72145: PUSH
72146: LD_INT 5
72148: ST_TO_ADDR
72149: GO 72247
72151: LD_INT 30
72153: DOUBLE
72154: EQUAL
72155: IFTRUE 72159
72157: GO 72170
72159: POP
// bc_type := b_solar_power ; 31 :
72160: LD_ADDR_OWVAR 42
72164: PUSH
72165: LD_INT 27
72167: ST_TO_ADDR
72168: GO 72247
72170: LD_INT 31
72172: DOUBLE
72173: EQUAL
72174: IFTRUE 72178
72176: GO 72189
72178: POP
// bc_type := b_oil_power ; 32 :
72179: LD_ADDR_OWVAR 42
72183: PUSH
72184: LD_INT 26
72186: ST_TO_ADDR
72187: GO 72247
72189: LD_INT 32
72191: DOUBLE
72192: EQUAL
72193: IFTRUE 72197
72195: GO 72208
72197: POP
// bc_type := b_siberite_power ; 33 :
72198: LD_ADDR_OWVAR 42
72202: PUSH
72203: LD_INT 28
72205: ST_TO_ADDR
72206: GO 72247
72208: LD_INT 33
72210: DOUBLE
72211: EQUAL
72212: IFTRUE 72216
72214: GO 72227
72216: POP
// bc_type := b_oil_mine ; 34 :
72217: LD_ADDR_OWVAR 42
72221: PUSH
72222: LD_INT 29
72224: ST_TO_ADDR
72225: GO 72247
72227: LD_INT 34
72229: DOUBLE
72230: EQUAL
72231: IFTRUE 72235
72233: GO 72246
72235: POP
// bc_type := b_siberite_mine ; end ;
72236: LD_ADDR_OWVAR 42
72240: PUSH
72241: LD_INT 30
72243: ST_TO_ADDR
72244: GO 72247
72246: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
72247: LD_ADDR_VAR 0 8
72251: PUSH
72252: LD_VAR 0 5
72256: PPUSH
72257: LD_VAR 0 6
72261: PPUSH
72262: LD_VAR 0 3
72266: PPUSH
72267: CALL_OW 47
72271: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
72272: LD_OWVAR 42
72276: PUSH
72277: LD_INT 32
72279: PUSH
72280: LD_INT 33
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: IN
72287: IFFALSE 72303
// PlaceWeaponTurret ( b , weapon ) ;
72289: LD_VAR 0 8
72293: PPUSH
72294: LD_VAR 0 4
72298: PPUSH
72299: CALL_OW 431
// end ;
72303: LD_VAR 0 7
72307: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
72308: LD_INT 0
72310: PPUSH
72311: PPUSH
72312: PPUSH
72313: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72314: LD_ADDR_VAR 0 4
72318: PUSH
72319: LD_INT 22
72321: PUSH
72322: LD_OWVAR 2
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PUSH
72331: LD_INT 2
72333: PUSH
72334: LD_INT 30
72336: PUSH
72337: LD_INT 0
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 30
72346: PUSH
72347: LD_INT 1
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: LIST
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PPUSH
72363: CALL_OW 69
72367: ST_TO_ADDR
// if not tmp then
72368: LD_VAR 0 4
72372: NOT
72373: IFFALSE 72377
// exit ;
72375: GO 72436
// for i in tmp do
72377: LD_ADDR_VAR 0 2
72381: PUSH
72382: LD_VAR 0 4
72386: PUSH
72387: FOR_IN
72388: IFFALSE 72434
// for j = 1 to 3 do
72390: LD_ADDR_VAR 0 3
72394: PUSH
72395: DOUBLE
72396: LD_INT 1
72398: DEC
72399: ST_TO_ADDR
72400: LD_INT 3
72402: PUSH
72403: FOR_TO
72404: IFFALSE 72430
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
72406: LD_VAR 0 2
72410: PPUSH
72411: CALL_OW 274
72415: PPUSH
72416: LD_VAR 0 3
72420: PPUSH
72421: LD_INT 99999
72423: PPUSH
72424: CALL_OW 277
72428: GO 72403
72430: POP
72431: POP
72432: GO 72387
72434: POP
72435: POP
// end ;
72436: LD_VAR 0 1
72440: RET
// export function hHackSetLevel10 ; var i , j ; begin
72441: LD_INT 0
72443: PPUSH
72444: PPUSH
72445: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72446: LD_ADDR_VAR 0 2
72450: PUSH
72451: LD_INT 21
72453: PUSH
72454: LD_INT 1
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PPUSH
72461: CALL_OW 69
72465: PUSH
72466: FOR_IN
72467: IFFALSE 72519
// if IsSelected ( i ) then
72469: LD_VAR 0 2
72473: PPUSH
72474: CALL_OW 306
72478: IFFALSE 72517
// begin for j := 1 to 4 do
72480: LD_ADDR_VAR 0 3
72484: PUSH
72485: DOUBLE
72486: LD_INT 1
72488: DEC
72489: ST_TO_ADDR
72490: LD_INT 4
72492: PUSH
72493: FOR_TO
72494: IFFALSE 72515
// SetSkill ( i , j , 10 ) ;
72496: LD_VAR 0 2
72500: PPUSH
72501: LD_VAR 0 3
72505: PPUSH
72506: LD_INT 10
72508: PPUSH
72509: CALL_OW 237
72513: GO 72493
72515: POP
72516: POP
// end ;
72517: GO 72466
72519: POP
72520: POP
// end ;
72521: LD_VAR 0 1
72525: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
72526: LD_INT 0
72528: PPUSH
72529: PPUSH
72530: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
72531: LD_ADDR_VAR 0 2
72535: PUSH
72536: LD_INT 22
72538: PUSH
72539: LD_OWVAR 2
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 21
72550: PUSH
72551: LD_INT 1
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PPUSH
72562: CALL_OW 69
72566: PUSH
72567: FOR_IN
72568: IFFALSE 72609
// begin for j := 1 to 4 do
72570: LD_ADDR_VAR 0 3
72574: PUSH
72575: DOUBLE
72576: LD_INT 1
72578: DEC
72579: ST_TO_ADDR
72580: LD_INT 4
72582: PUSH
72583: FOR_TO
72584: IFFALSE 72605
// SetSkill ( i , j , 10 ) ;
72586: LD_VAR 0 2
72590: PPUSH
72591: LD_VAR 0 3
72595: PPUSH
72596: LD_INT 10
72598: PPUSH
72599: CALL_OW 237
72603: GO 72583
72605: POP
72606: POP
// end ;
72607: GO 72567
72609: POP
72610: POP
// end ;
72611: LD_VAR 0 1
72615: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
72616: LD_INT 0
72618: PPUSH
// uc_side := your_side ;
72619: LD_ADDR_OWVAR 20
72623: PUSH
72624: LD_OWVAR 2
72628: ST_TO_ADDR
// uc_nation := nation ;
72629: LD_ADDR_OWVAR 21
72633: PUSH
72634: LD_VAR 0 1
72638: ST_TO_ADDR
// InitHc ;
72639: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
72643: LD_INT 0
72645: PPUSH
72646: LD_VAR 0 2
72650: PPUSH
72651: LD_VAR 0 3
72655: PPUSH
72656: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
72660: LD_VAR 0 4
72664: PPUSH
72665: LD_VAR 0 5
72669: PPUSH
72670: CALL_OW 428
72674: PUSH
72675: LD_INT 0
72677: EQUAL
72678: IFFALSE 72702
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
72680: CALL_OW 44
72684: PPUSH
72685: LD_VAR 0 4
72689: PPUSH
72690: LD_VAR 0 5
72694: PPUSH
72695: LD_INT 1
72697: PPUSH
72698: CALL_OW 48
// end ;
72702: LD_VAR 0 6
72706: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
72707: LD_INT 0
72709: PPUSH
72710: PPUSH
// uc_side := your_side ;
72711: LD_ADDR_OWVAR 20
72715: PUSH
72716: LD_OWVAR 2
72720: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
72721: LD_VAR 0 1
72725: PUSH
72726: LD_INT 1
72728: PUSH
72729: LD_INT 2
72731: PUSH
72732: LD_INT 3
72734: PUSH
72735: LD_INT 4
72737: PUSH
72738: LD_INT 5
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: IN
72748: IFFALSE 72760
// uc_nation := nation_american else
72750: LD_ADDR_OWVAR 21
72754: PUSH
72755: LD_INT 1
72757: ST_TO_ADDR
72758: GO 72803
// if chassis in [ 11 , 12 , 13 , 14 ] then
72760: LD_VAR 0 1
72764: PUSH
72765: LD_INT 11
72767: PUSH
72768: LD_INT 12
72770: PUSH
72771: LD_INT 13
72773: PUSH
72774: LD_INT 14
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: IN
72783: IFFALSE 72795
// uc_nation := nation_arabian else
72785: LD_ADDR_OWVAR 21
72789: PUSH
72790: LD_INT 2
72792: ST_TO_ADDR
72793: GO 72803
// uc_nation := nation_russian ;
72795: LD_ADDR_OWVAR 21
72799: PUSH
72800: LD_INT 3
72802: ST_TO_ADDR
// vc_chassis := chassis ;
72803: LD_ADDR_OWVAR 37
72807: PUSH
72808: LD_VAR 0 1
72812: ST_TO_ADDR
// vc_engine := engine ;
72813: LD_ADDR_OWVAR 39
72817: PUSH
72818: LD_VAR 0 2
72822: ST_TO_ADDR
// vc_control := control ;
72823: LD_ADDR_OWVAR 38
72827: PUSH
72828: LD_VAR 0 3
72832: ST_TO_ADDR
// vc_weapon := weapon ;
72833: LD_ADDR_OWVAR 40
72837: PUSH
72838: LD_VAR 0 4
72842: ST_TO_ADDR
// un := CreateVehicle ;
72843: LD_ADDR_VAR 0 8
72847: PUSH
72848: CALL_OW 45
72852: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
72853: LD_VAR 0 8
72857: PPUSH
72858: LD_INT 0
72860: PPUSH
72861: LD_INT 5
72863: PPUSH
72864: CALL_OW 12
72868: PPUSH
72869: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
72873: LD_VAR 0 8
72877: PPUSH
72878: LD_VAR 0 5
72882: PPUSH
72883: LD_VAR 0 6
72887: PPUSH
72888: LD_INT 1
72890: PPUSH
72891: CALL_OW 48
// end ;
72895: LD_VAR 0 7
72899: RET
// export hInvincible ; every 1 do
72900: GO 72902
72902: DISABLE
// hInvincible := [ ] ;
72903: LD_ADDR_EXP 107
72907: PUSH
72908: EMPTY
72909: ST_TO_ADDR
72910: END
// every 10 do var i ;
72911: GO 72913
72913: DISABLE
72914: LD_INT 0
72916: PPUSH
// begin enable ;
72917: ENABLE
// if not hInvincible then
72918: LD_EXP 107
72922: NOT
72923: IFFALSE 72927
// exit ;
72925: GO 72971
// for i in hInvincible do
72927: LD_ADDR_VAR 0 1
72931: PUSH
72932: LD_EXP 107
72936: PUSH
72937: FOR_IN
72938: IFFALSE 72969
// if GetLives ( i ) < 1000 then
72940: LD_VAR 0 1
72944: PPUSH
72945: CALL_OW 256
72949: PUSH
72950: LD_INT 1000
72952: LESS
72953: IFFALSE 72967
// SetLives ( i , 1000 ) ;
72955: LD_VAR 0 1
72959: PPUSH
72960: LD_INT 1000
72962: PPUSH
72963: CALL_OW 234
72967: GO 72937
72969: POP
72970: POP
// end ;
72971: PPOPN 1
72973: END
// export function hHackInvincible ; var i ; begin
72974: LD_INT 0
72976: PPUSH
72977: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72978: LD_ADDR_VAR 0 2
72982: PUSH
72983: LD_INT 2
72985: PUSH
72986: LD_INT 21
72988: PUSH
72989: LD_INT 1
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 21
72998: PUSH
72999: LD_INT 2
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: EMPTY
73007: LIST
73008: LIST
73009: LIST
73010: PPUSH
73011: CALL_OW 69
73015: PUSH
73016: FOR_IN
73017: IFFALSE 73078
// if IsSelected ( i ) then
73019: LD_VAR 0 2
73023: PPUSH
73024: CALL_OW 306
73028: IFFALSE 73076
// begin if i in hInvincible then
73030: LD_VAR 0 2
73034: PUSH
73035: LD_EXP 107
73039: IN
73040: IFFALSE 73060
// hInvincible := hInvincible diff i else
73042: LD_ADDR_EXP 107
73046: PUSH
73047: LD_EXP 107
73051: PUSH
73052: LD_VAR 0 2
73056: DIFF
73057: ST_TO_ADDR
73058: GO 73076
// hInvincible := hInvincible union i ;
73060: LD_ADDR_EXP 107
73064: PUSH
73065: LD_EXP 107
73069: PUSH
73070: LD_VAR 0 2
73074: UNION
73075: ST_TO_ADDR
// end ;
73076: GO 73016
73078: POP
73079: POP
// end ;
73080: LD_VAR 0 1
73084: RET
// export function hHackInvisible ; var i , j ; begin
73085: LD_INT 0
73087: PPUSH
73088: PPUSH
73089: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73090: LD_ADDR_VAR 0 2
73094: PUSH
73095: LD_INT 21
73097: PUSH
73098: LD_INT 1
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PPUSH
73105: CALL_OW 69
73109: PUSH
73110: FOR_IN
73111: IFFALSE 73135
// if IsSelected ( i ) then
73113: LD_VAR 0 2
73117: PPUSH
73118: CALL_OW 306
73122: IFFALSE 73133
// ComForceInvisible ( i ) ;
73124: LD_VAR 0 2
73128: PPUSH
73129: CALL_OW 496
73133: GO 73110
73135: POP
73136: POP
// end ;
73137: LD_VAR 0 1
73141: RET
// export function hHackChangeYourSide ; begin
73142: LD_INT 0
73144: PPUSH
// if your_side = 8 then
73145: LD_OWVAR 2
73149: PUSH
73150: LD_INT 8
73152: EQUAL
73153: IFFALSE 73165
// your_side := 0 else
73155: LD_ADDR_OWVAR 2
73159: PUSH
73160: LD_INT 0
73162: ST_TO_ADDR
73163: GO 73179
// your_side := your_side + 1 ;
73165: LD_ADDR_OWVAR 2
73169: PUSH
73170: LD_OWVAR 2
73174: PUSH
73175: LD_INT 1
73177: PLUS
73178: ST_TO_ADDR
// end ;
73179: LD_VAR 0 1
73183: RET
// export function hHackChangeUnitSide ; var i , j ; begin
73184: LD_INT 0
73186: PPUSH
73187: PPUSH
73188: PPUSH
// for i in all_units do
73189: LD_ADDR_VAR 0 2
73193: PUSH
73194: LD_OWVAR 3
73198: PUSH
73199: FOR_IN
73200: IFFALSE 73278
// if IsSelected ( i ) then
73202: LD_VAR 0 2
73206: PPUSH
73207: CALL_OW 306
73211: IFFALSE 73276
// begin j := GetSide ( i ) ;
73213: LD_ADDR_VAR 0 3
73217: PUSH
73218: LD_VAR 0 2
73222: PPUSH
73223: CALL_OW 255
73227: ST_TO_ADDR
// if j = 8 then
73228: LD_VAR 0 3
73232: PUSH
73233: LD_INT 8
73235: EQUAL
73236: IFFALSE 73248
// j := 0 else
73238: LD_ADDR_VAR 0 3
73242: PUSH
73243: LD_INT 0
73245: ST_TO_ADDR
73246: GO 73262
// j := j + 1 ;
73248: LD_ADDR_VAR 0 3
73252: PUSH
73253: LD_VAR 0 3
73257: PUSH
73258: LD_INT 1
73260: PLUS
73261: ST_TO_ADDR
// SetSide ( i , j ) ;
73262: LD_VAR 0 2
73266: PPUSH
73267: LD_VAR 0 3
73271: PPUSH
73272: CALL_OW 235
// end ;
73276: GO 73199
73278: POP
73279: POP
// end ;
73280: LD_VAR 0 1
73284: RET
// export function hHackFog ; begin
73285: LD_INT 0
73287: PPUSH
// FogOff ( true ) ;
73288: LD_INT 1
73290: PPUSH
73291: CALL_OW 344
// end ;
73295: LD_VAR 0 1
73299: RET
// export function hHackTeleport ( unit , x , y ) ; begin
73300: LD_INT 0
73302: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
73303: LD_VAR 0 1
73307: PPUSH
73308: LD_VAR 0 2
73312: PPUSH
73313: LD_VAR 0 3
73317: PPUSH
73318: LD_INT 1
73320: PPUSH
73321: LD_INT 1
73323: PPUSH
73324: CALL_OW 483
// CenterOnXY ( x , y ) ;
73328: LD_VAR 0 2
73332: PPUSH
73333: LD_VAR 0 3
73337: PPUSH
73338: CALL_OW 84
// end ;
73342: LD_VAR 0 4
73346: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
73347: LD_INT 0
73349: PPUSH
73350: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
73351: LD_VAR 0 1
73355: NOT
73356: PUSH
73357: LD_VAR 0 2
73361: PPUSH
73362: LD_VAR 0 3
73366: PPUSH
73367: CALL_OW 488
73371: NOT
73372: OR
73373: PUSH
73374: LD_VAR 0 1
73378: PPUSH
73379: CALL_OW 266
73383: PUSH
73384: LD_INT 3
73386: NONEQUAL
73387: PUSH
73388: LD_VAR 0 1
73392: PPUSH
73393: CALL_OW 247
73397: PUSH
73398: LD_INT 1
73400: EQUAL
73401: NOT
73402: AND
73403: OR
73404: IFFALSE 73408
// exit ;
73406: GO 73557
// if GetType ( factory ) = unit_human then
73408: LD_VAR 0 1
73412: PPUSH
73413: CALL_OW 247
73417: PUSH
73418: LD_INT 1
73420: EQUAL
73421: IFFALSE 73438
// factory := IsInUnit ( factory ) ;
73423: LD_ADDR_VAR 0 1
73427: PUSH
73428: LD_VAR 0 1
73432: PPUSH
73433: CALL_OW 310
73437: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
73438: LD_VAR 0 1
73442: PPUSH
73443: CALL_OW 266
73447: PUSH
73448: LD_INT 3
73450: NONEQUAL
73451: IFFALSE 73455
// exit ;
73453: GO 73557
// if HexInfo ( x , y ) = factory then
73455: LD_VAR 0 2
73459: PPUSH
73460: LD_VAR 0 3
73464: PPUSH
73465: CALL_OW 428
73469: PUSH
73470: LD_VAR 0 1
73474: EQUAL
73475: IFFALSE 73502
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
73477: LD_ADDR_EXP 108
73481: PUSH
73482: LD_EXP 108
73486: PPUSH
73487: LD_VAR 0 1
73491: PPUSH
73492: LD_INT 0
73494: PPUSH
73495: CALL_OW 1
73499: ST_TO_ADDR
73500: GO 73553
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
73502: LD_ADDR_EXP 108
73506: PUSH
73507: LD_EXP 108
73511: PPUSH
73512: LD_VAR 0 1
73516: PPUSH
73517: LD_VAR 0 1
73521: PPUSH
73522: CALL_OW 255
73526: PUSH
73527: LD_VAR 0 1
73531: PUSH
73532: LD_VAR 0 2
73536: PUSH
73537: LD_VAR 0 3
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: PPUSH
73548: CALL_OW 1
73552: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73553: CALL 73562 0 0
// end ;
73557: LD_VAR 0 4
73561: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
73562: LD_INT 0
73564: PPUSH
73565: PPUSH
73566: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
73567: LD_STRING resetFactoryWaypoint();
73569: PPUSH
73570: CALL_OW 559
// if factoryWaypoints then
73574: LD_EXP 108
73578: IFFALSE 73704
// begin list := PrepareArray ( factoryWaypoints ) ;
73580: LD_ADDR_VAR 0 3
73584: PUSH
73585: LD_EXP 108
73589: PPUSH
73590: CALL 58392 0 1
73594: ST_TO_ADDR
// for i := 1 to list do
73595: LD_ADDR_VAR 0 2
73599: PUSH
73600: DOUBLE
73601: LD_INT 1
73603: DEC
73604: ST_TO_ADDR
73605: LD_VAR 0 3
73609: PUSH
73610: FOR_TO
73611: IFFALSE 73702
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73613: LD_STRING setFactoryWaypointXY(
73615: PUSH
73616: LD_VAR 0 3
73620: PUSH
73621: LD_VAR 0 2
73625: ARRAY
73626: PUSH
73627: LD_INT 1
73629: ARRAY
73630: STR
73631: PUSH
73632: LD_STRING ,
73634: STR
73635: PUSH
73636: LD_VAR 0 3
73640: PUSH
73641: LD_VAR 0 2
73645: ARRAY
73646: PUSH
73647: LD_INT 2
73649: ARRAY
73650: STR
73651: PUSH
73652: LD_STRING ,
73654: STR
73655: PUSH
73656: LD_VAR 0 3
73660: PUSH
73661: LD_VAR 0 2
73665: ARRAY
73666: PUSH
73667: LD_INT 3
73669: ARRAY
73670: STR
73671: PUSH
73672: LD_STRING ,
73674: STR
73675: PUSH
73676: LD_VAR 0 3
73680: PUSH
73681: LD_VAR 0 2
73685: ARRAY
73686: PUSH
73687: LD_INT 4
73689: ARRAY
73690: STR
73691: PUSH
73692: LD_STRING )
73694: STR
73695: PPUSH
73696: CALL_OW 559
73700: GO 73610
73702: POP
73703: POP
// end ; end ;
73704: LD_VAR 0 1
73708: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
73709: LD_INT 0
73711: PPUSH
// if HexInfo ( x , y ) = warehouse then
73712: LD_VAR 0 2
73716: PPUSH
73717: LD_VAR 0 3
73721: PPUSH
73722: CALL_OW 428
73726: PUSH
73727: LD_VAR 0 1
73731: EQUAL
73732: IFFALSE 73759
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
73734: LD_ADDR_EXP 109
73738: PUSH
73739: LD_EXP 109
73743: PPUSH
73744: LD_VAR 0 1
73748: PPUSH
73749: LD_INT 0
73751: PPUSH
73752: CALL_OW 1
73756: ST_TO_ADDR
73757: GO 73810
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
73759: LD_ADDR_EXP 109
73763: PUSH
73764: LD_EXP 109
73768: PPUSH
73769: LD_VAR 0 1
73773: PPUSH
73774: LD_VAR 0 1
73778: PPUSH
73779: CALL_OW 255
73783: PUSH
73784: LD_VAR 0 1
73788: PUSH
73789: LD_VAR 0 2
73793: PUSH
73794: LD_VAR 0 3
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: PPUSH
73805: CALL_OW 1
73809: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
73810: CALL 73819 0 0
// end ;
73814: LD_VAR 0 4
73818: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
73819: LD_INT 0
73821: PPUSH
73822: PPUSH
73823: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
73824: LD_STRING resetWarehouseGatheringPoints();
73826: PPUSH
73827: CALL_OW 559
// if warehouseGatheringPoints then
73831: LD_EXP 109
73835: IFFALSE 73961
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
73837: LD_ADDR_VAR 0 3
73841: PUSH
73842: LD_EXP 109
73846: PPUSH
73847: CALL 58392 0 1
73851: ST_TO_ADDR
// for i := 1 to list do
73852: LD_ADDR_VAR 0 2
73856: PUSH
73857: DOUBLE
73858: LD_INT 1
73860: DEC
73861: ST_TO_ADDR
73862: LD_VAR 0 3
73866: PUSH
73867: FOR_TO
73868: IFFALSE 73959
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73870: LD_STRING setWarehouseGatheringPointXY(
73872: PUSH
73873: LD_VAR 0 3
73877: PUSH
73878: LD_VAR 0 2
73882: ARRAY
73883: PUSH
73884: LD_INT 1
73886: ARRAY
73887: STR
73888: PUSH
73889: LD_STRING ,
73891: STR
73892: PUSH
73893: LD_VAR 0 3
73897: PUSH
73898: LD_VAR 0 2
73902: ARRAY
73903: PUSH
73904: LD_INT 2
73906: ARRAY
73907: STR
73908: PUSH
73909: LD_STRING ,
73911: STR
73912: PUSH
73913: LD_VAR 0 3
73917: PUSH
73918: LD_VAR 0 2
73922: ARRAY
73923: PUSH
73924: LD_INT 3
73926: ARRAY
73927: STR
73928: PUSH
73929: LD_STRING ,
73931: STR
73932: PUSH
73933: LD_VAR 0 3
73937: PUSH
73938: LD_VAR 0 2
73942: ARRAY
73943: PUSH
73944: LD_INT 4
73946: ARRAY
73947: STR
73948: PUSH
73949: LD_STRING )
73951: STR
73952: PPUSH
73953: CALL_OW 559
73957: GO 73867
73959: POP
73960: POP
// end ; end ;
73961: LD_VAR 0 1
73965: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73966: LD_EXP 109
73970: IFFALSE 74655
73972: GO 73974
73974: DISABLE
73975: LD_INT 0
73977: PPUSH
73978: PPUSH
73979: PPUSH
73980: PPUSH
73981: PPUSH
73982: PPUSH
73983: PPUSH
73984: PPUSH
73985: PPUSH
// begin enable ;
73986: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73987: LD_ADDR_VAR 0 3
73991: PUSH
73992: LD_EXP 109
73996: PPUSH
73997: CALL 58392 0 1
74001: ST_TO_ADDR
// if not list then
74002: LD_VAR 0 3
74006: NOT
74007: IFFALSE 74011
// exit ;
74009: GO 74655
// for i := 1 to list do
74011: LD_ADDR_VAR 0 1
74015: PUSH
74016: DOUBLE
74017: LD_INT 1
74019: DEC
74020: ST_TO_ADDR
74021: LD_VAR 0 3
74025: PUSH
74026: FOR_TO
74027: IFFALSE 74653
// begin depot := list [ i ] [ 2 ] ;
74029: LD_ADDR_VAR 0 8
74033: PUSH
74034: LD_VAR 0 3
74038: PUSH
74039: LD_VAR 0 1
74043: ARRAY
74044: PUSH
74045: LD_INT 2
74047: ARRAY
74048: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
74049: LD_ADDR_VAR 0 5
74053: PUSH
74054: LD_VAR 0 3
74058: PUSH
74059: LD_VAR 0 1
74063: ARRAY
74064: PUSH
74065: LD_INT 1
74067: ARRAY
74068: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
74069: LD_VAR 0 8
74073: PPUSH
74074: CALL_OW 301
74078: PUSH
74079: LD_VAR 0 5
74083: PUSH
74084: LD_VAR 0 8
74088: PPUSH
74089: CALL_OW 255
74093: NONEQUAL
74094: OR
74095: IFFALSE 74124
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
74097: LD_ADDR_EXP 109
74101: PUSH
74102: LD_EXP 109
74106: PPUSH
74107: LD_VAR 0 8
74111: PPUSH
74112: LD_INT 0
74114: PPUSH
74115: CALL_OW 1
74119: ST_TO_ADDR
// exit ;
74120: POP
74121: POP
74122: GO 74655
// end ; x := list [ i ] [ 3 ] ;
74124: LD_ADDR_VAR 0 6
74128: PUSH
74129: LD_VAR 0 3
74133: PUSH
74134: LD_VAR 0 1
74138: ARRAY
74139: PUSH
74140: LD_INT 3
74142: ARRAY
74143: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
74144: LD_ADDR_VAR 0 7
74148: PUSH
74149: LD_VAR 0 3
74153: PUSH
74154: LD_VAR 0 1
74158: ARRAY
74159: PUSH
74160: LD_INT 4
74162: ARRAY
74163: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
74164: LD_ADDR_VAR 0 9
74168: PUSH
74169: LD_VAR 0 6
74173: PPUSH
74174: LD_VAR 0 7
74178: PPUSH
74179: LD_INT 16
74181: PPUSH
74182: CALL 56980 0 3
74186: ST_TO_ADDR
// if not cratesNearbyPoint then
74187: LD_VAR 0 9
74191: NOT
74192: IFFALSE 74198
// exit ;
74194: POP
74195: POP
74196: GO 74655
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
74198: LD_ADDR_VAR 0 4
74202: PUSH
74203: LD_INT 22
74205: PUSH
74206: LD_VAR 0 5
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PUSH
74215: LD_INT 3
74217: PUSH
74218: LD_INT 60
74220: PUSH
74221: EMPTY
74222: LIST
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: LD_INT 91
74230: PUSH
74231: LD_VAR 0 8
74235: PUSH
74236: LD_INT 6
74238: PUSH
74239: EMPTY
74240: LIST
74241: LIST
74242: LIST
74243: PUSH
74244: LD_INT 2
74246: PUSH
74247: LD_INT 25
74249: PUSH
74250: LD_INT 2
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: PUSH
74257: LD_INT 25
74259: PUSH
74260: LD_INT 16
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: EMPTY
74268: LIST
74269: LIST
74270: LIST
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: PPUSH
74278: CALL_OW 69
74282: PUSH
74283: LD_VAR 0 8
74287: PPUSH
74288: CALL_OW 313
74292: PPUSH
74293: LD_INT 3
74295: PUSH
74296: LD_INT 60
74298: PUSH
74299: EMPTY
74300: LIST
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: PUSH
74306: LD_INT 2
74308: PUSH
74309: LD_INT 25
74311: PUSH
74312: LD_INT 2
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: LD_INT 25
74321: PUSH
74322: LD_INT 16
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: LIST
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: PPUSH
74338: CALL_OW 72
74342: UNION
74343: ST_TO_ADDR
// if tmp then
74344: LD_VAR 0 4
74348: IFFALSE 74428
// begin tmp := ShrinkArray ( tmp , 3 ) ;
74350: LD_ADDR_VAR 0 4
74354: PUSH
74355: LD_VAR 0 4
74359: PPUSH
74360: LD_INT 3
74362: PPUSH
74363: CALL 54949 0 2
74367: ST_TO_ADDR
// for j in tmp do
74368: LD_ADDR_VAR 0 2
74372: PUSH
74373: LD_VAR 0 4
74377: PUSH
74378: FOR_IN
74379: IFFALSE 74422
// begin if IsInUnit ( j ) then
74381: LD_VAR 0 2
74385: PPUSH
74386: CALL_OW 310
74390: IFFALSE 74401
// ComExit ( j ) ;
74392: LD_VAR 0 2
74396: PPUSH
74397: CALL 55032 0 1
// AddComCollect ( j , x , y ) ;
74401: LD_VAR 0 2
74405: PPUSH
74406: LD_VAR 0 6
74410: PPUSH
74411: LD_VAR 0 7
74415: PPUSH
74416: CALL_OW 177
// end ;
74420: GO 74378
74422: POP
74423: POP
// exit ;
74424: POP
74425: POP
74426: GO 74655
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
74428: LD_ADDR_VAR 0 4
74432: PUSH
74433: LD_INT 22
74435: PUSH
74436: LD_VAR 0 5
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: PUSH
74445: LD_INT 91
74447: PUSH
74448: LD_VAR 0 8
74452: PUSH
74453: LD_INT 8
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: LIST
74460: PUSH
74461: LD_INT 2
74463: PUSH
74464: LD_INT 34
74466: PUSH
74467: LD_INT 12
74469: PUSH
74470: EMPTY
74471: LIST
74472: LIST
74473: PUSH
74474: LD_INT 34
74476: PUSH
74477: LD_INT 51
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: PUSH
74484: LD_INT 34
74486: PUSH
74487: LD_INT 32
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 34
74496: PUSH
74497: LD_INT 89
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: LIST
74515: PPUSH
74516: CALL_OW 69
74520: ST_TO_ADDR
// if tmp then
74521: LD_VAR 0 4
74525: IFFALSE 74651
// begin for j in tmp do
74527: LD_ADDR_VAR 0 2
74531: PUSH
74532: LD_VAR 0 4
74536: PUSH
74537: FOR_IN
74538: IFFALSE 74649
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
74540: LD_VAR 0 2
74544: PPUSH
74545: CALL_OW 262
74549: PUSH
74550: LD_INT 3
74552: EQUAL
74553: PUSH
74554: LD_VAR 0 2
74558: PPUSH
74559: CALL_OW 261
74563: PUSH
74564: LD_INT 20
74566: GREATER
74567: OR
74568: PUSH
74569: LD_VAR 0 2
74573: PPUSH
74574: CALL_OW 314
74578: NOT
74579: AND
74580: PUSH
74581: LD_VAR 0 2
74585: PPUSH
74586: CALL_OW 263
74590: PUSH
74591: LD_INT 1
74593: NONEQUAL
74594: PUSH
74595: LD_VAR 0 2
74599: PPUSH
74600: CALL_OW 311
74604: OR
74605: AND
74606: IFFALSE 74647
// begin ComCollect ( j , x , y ) ;
74608: LD_VAR 0 2
74612: PPUSH
74613: LD_VAR 0 6
74617: PPUSH
74618: LD_VAR 0 7
74622: PPUSH
74623: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
74627: LD_VAR 0 2
74631: PPUSH
74632: LD_VAR 0 8
74636: PPUSH
74637: CALL_OW 172
// exit ;
74641: POP
74642: POP
74643: POP
74644: POP
74645: GO 74655
// end ;
74647: GO 74537
74649: POP
74650: POP
// end ; end ;
74651: GO 74026
74653: POP
74654: POP
// end ; end_of_file
74655: PPOPN 9
74657: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74658: LD_VAR 0 1
74662: PPUSH
74663: LD_VAR 0 2
74667: PPUSH
74668: LD_VAR 0 3
74672: PPUSH
74673: LD_VAR 0 4
74677: PPUSH
74678: LD_VAR 0 5
74682: PPUSH
74683: LD_VAR 0 6
74687: PPUSH
74688: CALL 59011 0 6
// end ;
74692: PPOPN 6
74694: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74695: LD_INT 0
74697: PPUSH
// begin if not units then
74698: LD_VAR 0 1
74702: NOT
74703: IFFALSE 74707
// exit ;
74705: GO 74707
// end ;
74707: PPOPN 7
74709: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74710: CALL 58915 0 0
// end ; end_of_file
74714: PPOPN 1
74716: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74717: LD_VAR 0 1
74721: PUSH
74722: LD_INT 200
74724: DOUBLE
74725: GREATEREQUAL
74726: IFFALSE 74734
74728: LD_INT 299
74730: DOUBLE
74731: LESSEQUAL
74732: IFTRUE 74736
74734: GO 74768
74736: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74737: LD_VAR 0 1
74741: PPUSH
74742: LD_VAR 0 2
74746: PPUSH
74747: LD_VAR 0 3
74751: PPUSH
74752: LD_VAR 0 4
74756: PPUSH
74757: LD_VAR 0 5
74761: PPUSH
74762: CALL 75256 0 5
74766: GO 74845
74768: LD_INT 300
74770: DOUBLE
74771: GREATEREQUAL
74772: IFFALSE 74780
74774: LD_INT 399
74776: DOUBLE
74777: LESSEQUAL
74778: IFTRUE 74782
74780: GO 74844
74782: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74783: LD_VAR 0 1
74787: PPUSH
74788: LD_VAR 0 2
74792: PPUSH
74793: LD_VAR 0 3
74797: PPUSH
74798: LD_VAR 0 4
74802: PPUSH
74803: LD_VAR 0 5
74807: PPUSH
74808: LD_VAR 0 6
74812: PPUSH
74813: LD_VAR 0 7
74817: PPUSH
74818: LD_VAR 0 8
74822: PPUSH
74823: LD_VAR 0 9
74827: PPUSH
74828: LD_VAR 0 10
74832: PPUSH
74833: LD_VAR 0 11
74837: PPUSH
74838: CALL 71359 0 11
74842: GO 74845
74844: POP
// end ;
74845: PPOPN 11
74847: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74848: LD_VAR 0 1
74852: PPUSH
74853: LD_VAR 0 2
74857: PPUSH
74858: LD_VAR 0 3
74862: PPUSH
74863: LD_VAR 0 4
74867: PPUSH
74868: LD_VAR 0 5
74872: PPUSH
74873: CALL 74992 0 5
// end ; end_of_file
74877: PPOPN 5
74879: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
74880: LD_INT 0
74882: PPUSH
74883: PPUSH
74884: PPUSH
74885: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
74886: LD_VAR 0 1
74890: PPUSH
74891: CALL_OW 264
74895: PUSH
74896: LD_INT 91
74898: EQUAL
74899: IFFALSE 74971
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
74901: LD_INT 68
74903: PPUSH
74904: LD_VAR 0 1
74908: PPUSH
74909: CALL_OW 255
74913: PPUSH
74914: CALL_OW 321
74918: PUSH
74919: LD_INT 2
74921: EQUAL
74922: IFFALSE 74934
// eff := 70 else
74924: LD_ADDR_VAR 0 4
74928: PUSH
74929: LD_INT 70
74931: ST_TO_ADDR
74932: GO 74942
// eff := 30 ;
74934: LD_ADDR_VAR 0 4
74938: PUSH
74939: LD_INT 30
74941: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
74942: LD_VAR 0 1
74946: PPUSH
74947: CALL_OW 250
74951: PPUSH
74952: LD_VAR 0 1
74956: PPUSH
74957: CALL_OW 251
74961: PPUSH
74962: LD_VAR 0 4
74966: PPUSH
74967: CALL_OW 495
// end ; end ;
74971: LD_VAR 0 2
74975: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
74976: LD_INT 0
74978: PPUSH
// end ;
74979: LD_VAR 0 4
74983: RET
// export function SOS_Command ( cmd ) ; begin
74984: LD_INT 0
74986: PPUSH
// end ;
74987: LD_VAR 0 2
74991: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
74992: LD_INT 0
74994: PPUSH
// end ;
74995: LD_VAR 0 6
74999: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
75000: LD_INT 0
75002: PPUSH
75003: PPUSH
// if not vehicle or not factory then
75004: LD_VAR 0 1
75008: NOT
75009: PUSH
75010: LD_VAR 0 2
75014: NOT
75015: OR
75016: IFFALSE 75020
// exit ;
75018: GO 75251
// if factoryWaypoints >= factory then
75020: LD_EXP 108
75024: PUSH
75025: LD_VAR 0 2
75029: GREATEREQUAL
75030: IFFALSE 75251
// if factoryWaypoints [ factory ] then
75032: LD_EXP 108
75036: PUSH
75037: LD_VAR 0 2
75041: ARRAY
75042: IFFALSE 75251
// begin if GetControl ( vehicle ) = control_manual then
75044: LD_VAR 0 1
75048: PPUSH
75049: CALL_OW 263
75053: PUSH
75054: LD_INT 1
75056: EQUAL
75057: IFFALSE 75138
// begin driver := IsDrivenBy ( vehicle ) ;
75059: LD_ADDR_VAR 0 4
75063: PUSH
75064: LD_VAR 0 1
75068: PPUSH
75069: CALL_OW 311
75073: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
75074: LD_VAR 0 4
75078: PPUSH
75079: LD_EXP 108
75083: PUSH
75084: LD_VAR 0 2
75088: ARRAY
75089: PUSH
75090: LD_INT 3
75092: ARRAY
75093: PPUSH
75094: LD_EXP 108
75098: PUSH
75099: LD_VAR 0 2
75103: ARRAY
75104: PUSH
75105: LD_INT 4
75107: ARRAY
75108: PPUSH
75109: CALL_OW 171
// AddComExitVehicle ( driver ) ;
75113: LD_VAR 0 4
75117: PPUSH
75118: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
75122: LD_VAR 0 4
75126: PPUSH
75127: LD_VAR 0 2
75131: PPUSH
75132: CALL_OW 180
// end else
75136: GO 75251
// if GetControl ( vehicle ) = control_remote then
75138: LD_VAR 0 1
75142: PPUSH
75143: CALL_OW 263
75147: PUSH
75148: LD_INT 2
75150: EQUAL
75151: IFFALSE 75212
// begin wait ( 0 0$2 ) ;
75153: LD_INT 70
75155: PPUSH
75156: CALL_OW 67
// if Connect ( vehicle ) then
75160: LD_VAR 0 1
75164: PPUSH
75165: CALL 25240 0 1
75169: IFFALSE 75210
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
75171: LD_VAR 0 1
75175: PPUSH
75176: LD_EXP 108
75180: PUSH
75181: LD_VAR 0 2
75185: ARRAY
75186: PUSH
75187: LD_INT 3
75189: ARRAY
75190: PPUSH
75191: LD_EXP 108
75195: PUSH
75196: LD_VAR 0 2
75200: ARRAY
75201: PUSH
75202: LD_INT 4
75204: ARRAY
75205: PPUSH
75206: CALL_OW 171
// end else
75210: GO 75251
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
75212: LD_VAR 0 1
75216: PPUSH
75217: LD_EXP 108
75221: PUSH
75222: LD_VAR 0 2
75226: ARRAY
75227: PUSH
75228: LD_INT 3
75230: ARRAY
75231: PPUSH
75232: LD_EXP 108
75236: PUSH
75237: LD_VAR 0 2
75241: ARRAY
75242: PUSH
75243: LD_INT 4
75245: ARRAY
75246: PPUSH
75247: CALL_OW 171
// end ; end ;
75251: LD_VAR 0 3
75255: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
75256: LD_INT 0
75258: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
75259: LD_VAR 0 1
75263: PUSH
75264: LD_INT 250
75266: EQUAL
75267: PUSH
75268: LD_VAR 0 2
75272: PPUSH
75273: CALL_OW 264
75277: PUSH
75278: LD_INT 81
75280: EQUAL
75281: AND
75282: IFFALSE 75303
// MinerPlaceMine ( unit , x , y ) ;
75284: LD_VAR 0 2
75288: PPUSH
75289: LD_VAR 0 4
75293: PPUSH
75294: LD_VAR 0 5
75298: PPUSH
75299: CALL 78127 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
75303: LD_VAR 0 1
75307: PUSH
75308: LD_INT 251
75310: EQUAL
75311: PUSH
75312: LD_VAR 0 2
75316: PPUSH
75317: CALL_OW 264
75321: PUSH
75322: LD_INT 81
75324: EQUAL
75325: AND
75326: IFFALSE 75347
// MinerDetonateMine ( unit , x , y ) ;
75328: LD_VAR 0 2
75332: PPUSH
75333: LD_VAR 0 4
75337: PPUSH
75338: LD_VAR 0 5
75342: PPUSH
75343: CALL 78402 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
75347: LD_VAR 0 1
75351: PUSH
75352: LD_INT 252
75354: EQUAL
75355: PUSH
75356: LD_VAR 0 2
75360: PPUSH
75361: CALL_OW 264
75365: PUSH
75366: LD_INT 81
75368: EQUAL
75369: AND
75370: IFFALSE 75391
// MinerCreateMinefield ( unit , x , y ) ;
75372: LD_VAR 0 2
75376: PPUSH
75377: LD_VAR 0 4
75381: PPUSH
75382: LD_VAR 0 5
75386: PPUSH
75387: CALL 78819 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
75391: LD_VAR 0 1
75395: PUSH
75396: LD_INT 253
75398: EQUAL
75399: PUSH
75400: LD_VAR 0 2
75404: PPUSH
75405: CALL_OW 257
75409: PUSH
75410: LD_INT 5
75412: EQUAL
75413: AND
75414: IFFALSE 75435
// ComBinocular ( unit , x , y ) ;
75416: LD_VAR 0 2
75420: PPUSH
75421: LD_VAR 0 4
75425: PPUSH
75426: LD_VAR 0 5
75430: PPUSH
75431: CALL 79188 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
75435: LD_VAR 0 1
75439: PUSH
75440: LD_INT 254
75442: EQUAL
75443: PUSH
75444: LD_VAR 0 2
75448: PPUSH
75449: CALL_OW 264
75453: PUSH
75454: LD_INT 99
75456: EQUAL
75457: AND
75458: PUSH
75459: LD_VAR 0 3
75463: PPUSH
75464: CALL_OW 263
75468: PUSH
75469: LD_INT 3
75471: EQUAL
75472: AND
75473: IFFALSE 75489
// HackDestroyVehicle ( unit , selectedUnit ) ;
75475: LD_VAR 0 2
75479: PPUSH
75480: LD_VAR 0 3
75484: PPUSH
75485: CALL 77491 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
75489: LD_VAR 0 1
75493: PUSH
75494: LD_INT 255
75496: EQUAL
75497: PUSH
75498: LD_VAR 0 2
75502: PPUSH
75503: CALL_OW 264
75507: PUSH
75508: LD_INT 14
75510: PUSH
75511: LD_INT 53
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: IN
75518: AND
75519: PUSH
75520: LD_VAR 0 4
75524: PPUSH
75525: LD_VAR 0 5
75529: PPUSH
75530: CALL_OW 488
75534: AND
75535: IFFALSE 75559
// CutTreeXYR ( unit , x , y , 12 ) ;
75537: LD_VAR 0 2
75541: PPUSH
75542: LD_VAR 0 4
75546: PPUSH
75547: LD_VAR 0 5
75551: PPUSH
75552: LD_INT 12
75554: PPUSH
75555: CALL 75654 0 4
// if cmd = 256 then
75559: LD_VAR 0 1
75563: PUSH
75564: LD_INT 256
75566: EQUAL
75567: IFFALSE 75588
// SetFactoryWaypoint ( unit , x , y ) ;
75569: LD_VAR 0 2
75573: PPUSH
75574: LD_VAR 0 4
75578: PPUSH
75579: LD_VAR 0 5
75583: PPUSH
75584: CALL 73347 0 3
// if cmd = 257 then
75588: LD_VAR 0 1
75592: PUSH
75593: LD_INT 257
75595: EQUAL
75596: IFFALSE 75617
// SetWarehouseGatheringPoint ( unit , x , y ) ;
75598: LD_VAR 0 2
75602: PPUSH
75603: LD_VAR 0 4
75607: PPUSH
75608: LD_VAR 0 5
75612: PPUSH
75613: CALL 73709 0 3
// if cmd = 258 then
75617: LD_VAR 0 1
75621: PUSH
75622: LD_INT 258
75624: EQUAL
75625: IFFALSE 75649
// BurnTreeXYR ( unit , x , y , 8 ) ;
75627: LD_VAR 0 2
75631: PPUSH
75632: LD_VAR 0 4
75636: PPUSH
75637: LD_VAR 0 5
75641: PPUSH
75642: LD_INT 8
75644: PPUSH
75645: CALL 76048 0 4
// end ;
75649: LD_VAR 0 6
75653: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
75654: LD_INT 0
75656: PPUSH
75657: PPUSH
75658: PPUSH
75659: PPUSH
75660: PPUSH
75661: PPUSH
75662: PPUSH
75663: PPUSH
75664: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
75665: LD_VAR 0 1
75669: PPUSH
75670: CALL_OW 302
75674: NOT
75675: PUSH
75676: LD_VAR 0 2
75680: PPUSH
75681: LD_VAR 0 3
75685: PPUSH
75686: CALL_OW 488
75690: NOT
75691: OR
75692: PUSH
75693: LD_VAR 0 4
75697: NOT
75698: OR
75699: IFFALSE 75703
// exit ;
75701: GO 76043
// list := [ ] ;
75703: LD_ADDR_VAR 0 13
75707: PUSH
75708: EMPTY
75709: ST_TO_ADDR
// if x - r < 0 then
75710: LD_VAR 0 2
75714: PUSH
75715: LD_VAR 0 4
75719: MINUS
75720: PUSH
75721: LD_INT 0
75723: LESS
75724: IFFALSE 75736
// min_x := 0 else
75726: LD_ADDR_VAR 0 7
75730: PUSH
75731: LD_INT 0
75733: ST_TO_ADDR
75734: GO 75752
// min_x := x - r ;
75736: LD_ADDR_VAR 0 7
75740: PUSH
75741: LD_VAR 0 2
75745: PUSH
75746: LD_VAR 0 4
75750: MINUS
75751: ST_TO_ADDR
// if y - r < 0 then
75752: LD_VAR 0 3
75756: PUSH
75757: LD_VAR 0 4
75761: MINUS
75762: PUSH
75763: LD_INT 0
75765: LESS
75766: IFFALSE 75778
// min_y := 0 else
75768: LD_ADDR_VAR 0 8
75772: PUSH
75773: LD_INT 0
75775: ST_TO_ADDR
75776: GO 75794
// min_y := y - r ;
75778: LD_ADDR_VAR 0 8
75782: PUSH
75783: LD_VAR 0 3
75787: PUSH
75788: LD_VAR 0 4
75792: MINUS
75793: ST_TO_ADDR
// max_x := x + r ;
75794: LD_ADDR_VAR 0 9
75798: PUSH
75799: LD_VAR 0 2
75803: PUSH
75804: LD_VAR 0 4
75808: PLUS
75809: ST_TO_ADDR
// max_y := y + r ;
75810: LD_ADDR_VAR 0 10
75814: PUSH
75815: LD_VAR 0 3
75819: PUSH
75820: LD_VAR 0 4
75824: PLUS
75825: ST_TO_ADDR
// for _x = min_x to max_x do
75826: LD_ADDR_VAR 0 11
75830: PUSH
75831: DOUBLE
75832: LD_VAR 0 7
75836: DEC
75837: ST_TO_ADDR
75838: LD_VAR 0 9
75842: PUSH
75843: FOR_TO
75844: IFFALSE 75961
// for _y = min_y to max_y do
75846: LD_ADDR_VAR 0 12
75850: PUSH
75851: DOUBLE
75852: LD_VAR 0 8
75856: DEC
75857: ST_TO_ADDR
75858: LD_VAR 0 10
75862: PUSH
75863: FOR_TO
75864: IFFALSE 75957
// begin if not ValidHex ( _x , _y ) then
75866: LD_VAR 0 11
75870: PPUSH
75871: LD_VAR 0 12
75875: PPUSH
75876: CALL_OW 488
75880: NOT
75881: IFFALSE 75885
// continue ;
75883: GO 75863
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75885: LD_VAR 0 11
75889: PPUSH
75890: LD_VAR 0 12
75894: PPUSH
75895: CALL_OW 351
75899: PUSH
75900: LD_VAR 0 11
75904: PPUSH
75905: LD_VAR 0 12
75909: PPUSH
75910: CALL_OW 554
75914: AND
75915: IFFALSE 75955
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75917: LD_ADDR_VAR 0 13
75921: PUSH
75922: LD_VAR 0 13
75926: PPUSH
75927: LD_VAR 0 13
75931: PUSH
75932: LD_INT 1
75934: PLUS
75935: PPUSH
75936: LD_VAR 0 11
75940: PUSH
75941: LD_VAR 0 12
75945: PUSH
75946: EMPTY
75947: LIST
75948: LIST
75949: PPUSH
75950: CALL_OW 2
75954: ST_TO_ADDR
// end ;
75955: GO 75863
75957: POP
75958: POP
75959: GO 75843
75961: POP
75962: POP
// if not list then
75963: LD_VAR 0 13
75967: NOT
75968: IFFALSE 75972
// exit ;
75970: GO 76043
// for i in list do
75972: LD_ADDR_VAR 0 6
75976: PUSH
75977: LD_VAR 0 13
75981: PUSH
75982: FOR_IN
75983: IFFALSE 76041
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
75985: LD_VAR 0 1
75989: PPUSH
75990: LD_STRING M
75992: PUSH
75993: LD_VAR 0 6
75997: PUSH
75998: LD_INT 1
76000: ARRAY
76001: PUSH
76002: LD_VAR 0 6
76006: PUSH
76007: LD_INT 2
76009: ARRAY
76010: PUSH
76011: LD_INT 0
76013: PUSH
76014: LD_INT 0
76016: PUSH
76017: LD_INT 0
76019: PUSH
76020: LD_INT 0
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: PUSH
76032: EMPTY
76033: LIST
76034: PPUSH
76035: CALL_OW 447
76039: GO 75982
76041: POP
76042: POP
// end ;
76043: LD_VAR 0 5
76047: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
76048: LD_INT 0
76050: PPUSH
76051: PPUSH
76052: PPUSH
76053: PPUSH
76054: PPUSH
76055: PPUSH
76056: PPUSH
76057: PPUSH
76058: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
76059: LD_VAR 0 1
76063: PPUSH
76064: CALL_OW 302
76068: NOT
76069: PUSH
76070: LD_VAR 0 2
76074: PPUSH
76075: LD_VAR 0 3
76079: PPUSH
76080: CALL_OW 488
76084: NOT
76085: OR
76086: PUSH
76087: LD_VAR 0 4
76091: NOT
76092: OR
76093: IFFALSE 76097
// exit ;
76095: GO 76445
// list := [ ] ;
76097: LD_ADDR_VAR 0 13
76101: PUSH
76102: EMPTY
76103: ST_TO_ADDR
// if x - r < 0 then
76104: LD_VAR 0 2
76108: PUSH
76109: LD_VAR 0 4
76113: MINUS
76114: PUSH
76115: LD_INT 0
76117: LESS
76118: IFFALSE 76130
// min_x := 0 else
76120: LD_ADDR_VAR 0 7
76124: PUSH
76125: LD_INT 0
76127: ST_TO_ADDR
76128: GO 76146
// min_x := x - r ;
76130: LD_ADDR_VAR 0 7
76134: PUSH
76135: LD_VAR 0 2
76139: PUSH
76140: LD_VAR 0 4
76144: MINUS
76145: ST_TO_ADDR
// if y - r < 0 then
76146: LD_VAR 0 3
76150: PUSH
76151: LD_VAR 0 4
76155: MINUS
76156: PUSH
76157: LD_INT 0
76159: LESS
76160: IFFALSE 76172
// min_y := 0 else
76162: LD_ADDR_VAR 0 8
76166: PUSH
76167: LD_INT 0
76169: ST_TO_ADDR
76170: GO 76188
// min_y := y - r ;
76172: LD_ADDR_VAR 0 8
76176: PUSH
76177: LD_VAR 0 3
76181: PUSH
76182: LD_VAR 0 4
76186: MINUS
76187: ST_TO_ADDR
// max_x := x + r ;
76188: LD_ADDR_VAR 0 9
76192: PUSH
76193: LD_VAR 0 2
76197: PUSH
76198: LD_VAR 0 4
76202: PLUS
76203: ST_TO_ADDR
// max_y := y + r ;
76204: LD_ADDR_VAR 0 10
76208: PUSH
76209: LD_VAR 0 3
76213: PUSH
76214: LD_VAR 0 4
76218: PLUS
76219: ST_TO_ADDR
// for _x = min_x to max_x do
76220: LD_ADDR_VAR 0 11
76224: PUSH
76225: DOUBLE
76226: LD_VAR 0 7
76230: DEC
76231: ST_TO_ADDR
76232: LD_VAR 0 9
76236: PUSH
76237: FOR_TO
76238: IFFALSE 76355
// for _y = min_y to max_y do
76240: LD_ADDR_VAR 0 12
76244: PUSH
76245: DOUBLE
76246: LD_VAR 0 8
76250: DEC
76251: ST_TO_ADDR
76252: LD_VAR 0 10
76256: PUSH
76257: FOR_TO
76258: IFFALSE 76351
// begin if not ValidHex ( _x , _y ) then
76260: LD_VAR 0 11
76264: PPUSH
76265: LD_VAR 0 12
76269: PPUSH
76270: CALL_OW 488
76274: NOT
76275: IFFALSE 76279
// continue ;
76277: GO 76257
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76279: LD_VAR 0 11
76283: PPUSH
76284: LD_VAR 0 12
76288: PPUSH
76289: CALL_OW 351
76293: PUSH
76294: LD_VAR 0 11
76298: PPUSH
76299: LD_VAR 0 12
76303: PPUSH
76304: CALL_OW 554
76308: AND
76309: IFFALSE 76349
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76311: LD_ADDR_VAR 0 13
76315: PUSH
76316: LD_VAR 0 13
76320: PPUSH
76321: LD_VAR 0 13
76325: PUSH
76326: LD_INT 1
76328: PLUS
76329: PPUSH
76330: LD_VAR 0 11
76334: PUSH
76335: LD_VAR 0 12
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: PPUSH
76344: CALL_OW 2
76348: ST_TO_ADDR
// end ;
76349: GO 76257
76351: POP
76352: POP
76353: GO 76237
76355: POP
76356: POP
// if not list then
76357: LD_VAR 0 13
76361: NOT
76362: IFFALSE 76366
// exit ;
76364: GO 76445
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
76366: LD_ADDR_VAR 0 13
76370: PUSH
76371: LD_VAR 0 1
76375: PPUSH
76376: LD_VAR 0 13
76380: PPUSH
76381: LD_INT 1
76383: PPUSH
76384: LD_INT 1
76386: PPUSH
76387: CALL 22382 0 4
76391: ST_TO_ADDR
// ComStop ( flame ) ;
76392: LD_VAR 0 1
76396: PPUSH
76397: CALL_OW 141
// for i in list do
76401: LD_ADDR_VAR 0 6
76405: PUSH
76406: LD_VAR 0 13
76410: PUSH
76411: FOR_IN
76412: IFFALSE 76443
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
76414: LD_VAR 0 1
76418: PPUSH
76419: LD_VAR 0 6
76423: PUSH
76424: LD_INT 1
76426: ARRAY
76427: PPUSH
76428: LD_VAR 0 6
76432: PUSH
76433: LD_INT 2
76435: ARRAY
76436: PPUSH
76437: CALL_OW 176
76441: GO 76411
76443: POP
76444: POP
// end ;
76445: LD_VAR 0 5
76449: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
76450: LD_EXP 111
76454: NOT
76455: IFFALSE 76505
76457: GO 76459
76459: DISABLE
// begin initHack := true ;
76460: LD_ADDR_EXP 111
76464: PUSH
76465: LD_INT 1
76467: ST_TO_ADDR
// hackTanks := [ ] ;
76468: LD_ADDR_EXP 112
76472: PUSH
76473: EMPTY
76474: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
76475: LD_ADDR_EXP 113
76479: PUSH
76480: EMPTY
76481: ST_TO_ADDR
// hackLimit := 3 ;
76482: LD_ADDR_EXP 114
76486: PUSH
76487: LD_INT 3
76489: ST_TO_ADDR
// hackDist := 12 ;
76490: LD_ADDR_EXP 115
76494: PUSH
76495: LD_INT 12
76497: ST_TO_ADDR
// hackCounter := [ ] ;
76498: LD_ADDR_EXP 116
76502: PUSH
76503: EMPTY
76504: ST_TO_ADDR
// end ;
76505: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
76506: LD_EXP 111
76510: PUSH
76511: LD_INT 34
76513: PUSH
76514: LD_INT 99
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: PPUSH
76521: CALL_OW 69
76525: AND
76526: IFFALSE 76779
76528: GO 76530
76530: DISABLE
76531: LD_INT 0
76533: PPUSH
76534: PPUSH
// begin enable ;
76535: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
76536: LD_ADDR_VAR 0 1
76540: PUSH
76541: LD_INT 34
76543: PUSH
76544: LD_INT 99
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: PPUSH
76551: CALL_OW 69
76555: PUSH
76556: FOR_IN
76557: IFFALSE 76777
// begin if not i in hackTanks then
76559: LD_VAR 0 1
76563: PUSH
76564: LD_EXP 112
76568: IN
76569: NOT
76570: IFFALSE 76653
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
76572: LD_ADDR_EXP 112
76576: PUSH
76577: LD_EXP 112
76581: PPUSH
76582: LD_EXP 112
76586: PUSH
76587: LD_INT 1
76589: PLUS
76590: PPUSH
76591: LD_VAR 0 1
76595: PPUSH
76596: CALL_OW 1
76600: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
76601: LD_ADDR_EXP 113
76605: PUSH
76606: LD_EXP 113
76610: PPUSH
76611: LD_EXP 113
76615: PUSH
76616: LD_INT 1
76618: PLUS
76619: PPUSH
76620: EMPTY
76621: PPUSH
76622: CALL_OW 1
76626: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
76627: LD_ADDR_EXP 116
76631: PUSH
76632: LD_EXP 116
76636: PPUSH
76637: LD_EXP 116
76641: PUSH
76642: LD_INT 1
76644: PLUS
76645: PPUSH
76646: EMPTY
76647: PPUSH
76648: CALL_OW 1
76652: ST_TO_ADDR
// end ; if not IsOk ( i ) then
76653: LD_VAR 0 1
76657: PPUSH
76658: CALL_OW 302
76662: NOT
76663: IFFALSE 76676
// begin HackUnlinkAll ( i ) ;
76665: LD_VAR 0 1
76669: PPUSH
76670: CALL 76782 0 1
// continue ;
76674: GO 76556
// end ; HackCheckCapturedStatus ( i ) ;
76676: LD_VAR 0 1
76680: PPUSH
76681: CALL 77225 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
76685: LD_ADDR_VAR 0 2
76689: PUSH
76690: LD_INT 81
76692: PUSH
76693: LD_VAR 0 1
76697: PPUSH
76698: CALL_OW 255
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: PUSH
76707: LD_INT 33
76709: PUSH
76710: LD_INT 3
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: PUSH
76717: LD_INT 91
76719: PUSH
76720: LD_VAR 0 1
76724: PUSH
76725: LD_EXP 115
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: LIST
76734: PUSH
76735: LD_INT 50
76737: PUSH
76738: EMPTY
76739: LIST
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: LIST
76745: LIST
76746: PPUSH
76747: CALL_OW 69
76751: ST_TO_ADDR
// if not tmp then
76752: LD_VAR 0 2
76756: NOT
76757: IFFALSE 76761
// continue ;
76759: GO 76556
// HackLink ( i , tmp ) ;
76761: LD_VAR 0 1
76765: PPUSH
76766: LD_VAR 0 2
76770: PPUSH
76771: CALL 76918 0 2
// end ;
76775: GO 76556
76777: POP
76778: POP
// end ;
76779: PPOPN 2
76781: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
76782: LD_INT 0
76784: PPUSH
76785: PPUSH
76786: PPUSH
// if not hack in hackTanks then
76787: LD_VAR 0 1
76791: PUSH
76792: LD_EXP 112
76796: IN
76797: NOT
76798: IFFALSE 76802
// exit ;
76800: GO 76913
// index := GetElementIndex ( hackTanks , hack ) ;
76802: LD_ADDR_VAR 0 4
76806: PUSH
76807: LD_EXP 112
76811: PPUSH
76812: LD_VAR 0 1
76816: PPUSH
76817: CALL 21679 0 2
76821: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
76822: LD_EXP 113
76826: PUSH
76827: LD_VAR 0 4
76831: ARRAY
76832: IFFALSE 76913
// begin for i in hackTanksCaptured [ index ] do
76834: LD_ADDR_VAR 0 3
76838: PUSH
76839: LD_EXP 113
76843: PUSH
76844: LD_VAR 0 4
76848: ARRAY
76849: PUSH
76850: FOR_IN
76851: IFFALSE 76877
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
76853: LD_VAR 0 3
76857: PUSH
76858: LD_INT 1
76860: ARRAY
76861: PPUSH
76862: LD_VAR 0 3
76866: PUSH
76867: LD_INT 2
76869: ARRAY
76870: PPUSH
76871: CALL_OW 235
76875: GO 76850
76877: POP
76878: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
76879: LD_ADDR_EXP 113
76883: PUSH
76884: LD_EXP 113
76888: PPUSH
76889: LD_VAR 0 4
76893: PPUSH
76894: EMPTY
76895: PPUSH
76896: CALL_OW 1
76900: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
76901: LD_VAR 0 1
76905: PPUSH
76906: LD_INT 0
76908: PPUSH
76909: CALL_OW 505
// end ; end ;
76913: LD_VAR 0 2
76917: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
76918: LD_INT 0
76920: PPUSH
76921: PPUSH
76922: PPUSH
// if not hack in hackTanks or not vehicles then
76923: LD_VAR 0 1
76927: PUSH
76928: LD_EXP 112
76932: IN
76933: NOT
76934: PUSH
76935: LD_VAR 0 2
76939: NOT
76940: OR
76941: IFFALSE 76945
// exit ;
76943: GO 77220
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
76945: LD_ADDR_VAR 0 2
76949: PUSH
76950: LD_VAR 0 1
76954: PPUSH
76955: LD_VAR 0 2
76959: PPUSH
76960: LD_INT 1
76962: PPUSH
76963: LD_INT 1
76965: PPUSH
76966: CALL 22329 0 4
76970: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
76971: LD_ADDR_VAR 0 5
76975: PUSH
76976: LD_EXP 112
76980: PPUSH
76981: LD_VAR 0 1
76985: PPUSH
76986: CALL 21679 0 2
76990: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
76991: LD_EXP 113
76995: PUSH
76996: LD_VAR 0 5
77000: ARRAY
77001: PUSH
77002: LD_EXP 114
77006: LESS
77007: IFFALSE 77196
// begin for i := 1 to vehicles do
77009: LD_ADDR_VAR 0 4
77013: PUSH
77014: DOUBLE
77015: LD_INT 1
77017: DEC
77018: ST_TO_ADDR
77019: LD_VAR 0 2
77023: PUSH
77024: FOR_TO
77025: IFFALSE 77194
// begin if hackTanksCaptured [ index ] = hackLimit then
77027: LD_EXP 113
77031: PUSH
77032: LD_VAR 0 5
77036: ARRAY
77037: PUSH
77038: LD_EXP 114
77042: EQUAL
77043: IFFALSE 77047
// break ;
77045: GO 77194
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
77047: LD_ADDR_EXP 116
77051: PUSH
77052: LD_EXP 116
77056: PPUSH
77057: LD_VAR 0 5
77061: PPUSH
77062: LD_EXP 116
77066: PUSH
77067: LD_VAR 0 5
77071: ARRAY
77072: PUSH
77073: LD_INT 1
77075: PLUS
77076: PPUSH
77077: CALL_OW 1
77081: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
77082: LD_ADDR_EXP 113
77086: PUSH
77087: LD_EXP 113
77091: PPUSH
77092: LD_VAR 0 5
77096: PUSH
77097: LD_EXP 113
77101: PUSH
77102: LD_VAR 0 5
77106: ARRAY
77107: PUSH
77108: LD_INT 1
77110: PLUS
77111: PUSH
77112: EMPTY
77113: LIST
77114: LIST
77115: PPUSH
77116: LD_VAR 0 2
77120: PUSH
77121: LD_VAR 0 4
77125: ARRAY
77126: PUSH
77127: LD_VAR 0 2
77131: PUSH
77132: LD_VAR 0 4
77136: ARRAY
77137: PPUSH
77138: CALL_OW 255
77142: PUSH
77143: EMPTY
77144: LIST
77145: LIST
77146: PPUSH
77147: CALL 21894 0 3
77151: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
77152: LD_VAR 0 2
77156: PUSH
77157: LD_VAR 0 4
77161: ARRAY
77162: PPUSH
77163: LD_VAR 0 1
77167: PPUSH
77168: CALL_OW 255
77172: PPUSH
77173: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
77177: LD_VAR 0 2
77181: PUSH
77182: LD_VAR 0 4
77186: ARRAY
77187: PPUSH
77188: CALL_OW 141
// end ;
77192: GO 77024
77194: POP
77195: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
77196: LD_VAR 0 1
77200: PPUSH
77201: LD_EXP 113
77205: PUSH
77206: LD_VAR 0 5
77210: ARRAY
77211: PUSH
77212: LD_INT 0
77214: PLUS
77215: PPUSH
77216: CALL_OW 505
// end ;
77220: LD_VAR 0 3
77224: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
77225: LD_INT 0
77227: PPUSH
77228: PPUSH
77229: PPUSH
77230: PPUSH
// if not hack in hackTanks then
77231: LD_VAR 0 1
77235: PUSH
77236: LD_EXP 112
77240: IN
77241: NOT
77242: IFFALSE 77246
// exit ;
77244: GO 77486
// index := GetElementIndex ( hackTanks , hack ) ;
77246: LD_ADDR_VAR 0 4
77250: PUSH
77251: LD_EXP 112
77255: PPUSH
77256: LD_VAR 0 1
77260: PPUSH
77261: CALL 21679 0 2
77265: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
77266: LD_ADDR_VAR 0 3
77270: PUSH
77271: DOUBLE
77272: LD_EXP 113
77276: PUSH
77277: LD_VAR 0 4
77281: ARRAY
77282: INC
77283: ST_TO_ADDR
77284: LD_INT 1
77286: PUSH
77287: FOR_DOWNTO
77288: IFFALSE 77460
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
77290: LD_ADDR_VAR 0 5
77294: PUSH
77295: LD_EXP 113
77299: PUSH
77300: LD_VAR 0 4
77304: ARRAY
77305: PUSH
77306: LD_VAR 0 3
77310: ARRAY
77311: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
77312: LD_VAR 0 5
77316: PUSH
77317: LD_INT 1
77319: ARRAY
77320: PPUSH
77321: CALL_OW 302
77325: NOT
77326: PUSH
77327: LD_VAR 0 5
77331: PUSH
77332: LD_INT 1
77334: ARRAY
77335: PPUSH
77336: CALL_OW 255
77340: PUSH
77341: LD_VAR 0 1
77345: PPUSH
77346: CALL_OW 255
77350: NONEQUAL
77351: OR
77352: IFFALSE 77458
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
77354: LD_VAR 0 5
77358: PUSH
77359: LD_INT 1
77361: ARRAY
77362: PPUSH
77363: CALL_OW 305
77367: PUSH
77368: LD_VAR 0 5
77372: PUSH
77373: LD_INT 1
77375: ARRAY
77376: PPUSH
77377: CALL_OW 255
77381: PUSH
77382: LD_VAR 0 1
77386: PPUSH
77387: CALL_OW 255
77391: EQUAL
77392: AND
77393: IFFALSE 77417
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
77395: LD_VAR 0 5
77399: PUSH
77400: LD_INT 1
77402: ARRAY
77403: PPUSH
77404: LD_VAR 0 5
77408: PUSH
77409: LD_INT 2
77411: ARRAY
77412: PPUSH
77413: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
77417: LD_ADDR_EXP 113
77421: PUSH
77422: LD_EXP 113
77426: PPUSH
77427: LD_VAR 0 4
77431: PPUSH
77432: LD_EXP 113
77436: PUSH
77437: LD_VAR 0 4
77441: ARRAY
77442: PPUSH
77443: LD_VAR 0 3
77447: PPUSH
77448: CALL_OW 3
77452: PPUSH
77453: CALL_OW 1
77457: ST_TO_ADDR
// end ; end ;
77458: GO 77287
77460: POP
77461: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
77462: LD_VAR 0 1
77466: PPUSH
77467: LD_EXP 113
77471: PUSH
77472: LD_VAR 0 4
77476: ARRAY
77477: PUSH
77478: LD_INT 0
77480: PLUS
77481: PPUSH
77482: CALL_OW 505
// end ;
77486: LD_VAR 0 2
77490: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
77491: LD_INT 0
77493: PPUSH
77494: PPUSH
77495: PPUSH
77496: PPUSH
// if not hack in hackTanks then
77497: LD_VAR 0 1
77501: PUSH
77502: LD_EXP 112
77506: IN
77507: NOT
77508: IFFALSE 77512
// exit ;
77510: GO 77597
// index := GetElementIndex ( hackTanks , hack ) ;
77512: LD_ADDR_VAR 0 5
77516: PUSH
77517: LD_EXP 112
77521: PPUSH
77522: LD_VAR 0 1
77526: PPUSH
77527: CALL 21679 0 2
77531: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
77532: LD_ADDR_VAR 0 4
77536: PUSH
77537: DOUBLE
77538: LD_INT 1
77540: DEC
77541: ST_TO_ADDR
77542: LD_EXP 113
77546: PUSH
77547: LD_VAR 0 5
77551: ARRAY
77552: PUSH
77553: FOR_TO
77554: IFFALSE 77595
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
77556: LD_EXP 113
77560: PUSH
77561: LD_VAR 0 5
77565: ARRAY
77566: PUSH
77567: LD_VAR 0 4
77571: ARRAY
77572: PUSH
77573: LD_INT 1
77575: ARRAY
77576: PUSH
77577: LD_VAR 0 2
77581: EQUAL
77582: IFFALSE 77593
// KillUnit ( vehicle ) ;
77584: LD_VAR 0 2
77588: PPUSH
77589: CALL_OW 66
77593: GO 77553
77595: POP
77596: POP
// end ;
77597: LD_VAR 0 3
77601: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
77602: LD_EXP 117
77606: NOT
77607: IFFALSE 77642
77609: GO 77611
77611: DISABLE
// begin initMiner := true ;
77612: LD_ADDR_EXP 117
77616: PUSH
77617: LD_INT 1
77619: ST_TO_ADDR
// minersList := [ ] ;
77620: LD_ADDR_EXP 118
77624: PUSH
77625: EMPTY
77626: ST_TO_ADDR
// minerMinesList := [ ] ;
77627: LD_ADDR_EXP 119
77631: PUSH
77632: EMPTY
77633: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
77634: LD_ADDR_EXP 120
77638: PUSH
77639: LD_INT 5
77641: ST_TO_ADDR
// end ;
77642: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
77643: LD_EXP 117
77647: PUSH
77648: LD_INT 34
77650: PUSH
77651: LD_INT 81
77653: PUSH
77654: EMPTY
77655: LIST
77656: LIST
77657: PPUSH
77658: CALL_OW 69
77662: AND
77663: IFFALSE 78124
77665: GO 77667
77667: DISABLE
77668: LD_INT 0
77670: PPUSH
77671: PPUSH
77672: PPUSH
77673: PPUSH
// begin enable ;
77674: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
77675: LD_ADDR_VAR 0 1
77679: PUSH
77680: LD_INT 34
77682: PUSH
77683: LD_INT 81
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PPUSH
77690: CALL_OW 69
77694: PUSH
77695: FOR_IN
77696: IFFALSE 77768
// begin if not i in minersList then
77698: LD_VAR 0 1
77702: PUSH
77703: LD_EXP 118
77707: IN
77708: NOT
77709: IFFALSE 77766
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
77711: LD_ADDR_EXP 118
77715: PUSH
77716: LD_EXP 118
77720: PPUSH
77721: LD_EXP 118
77725: PUSH
77726: LD_INT 1
77728: PLUS
77729: PPUSH
77730: LD_VAR 0 1
77734: PPUSH
77735: CALL_OW 1
77739: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
77740: LD_ADDR_EXP 119
77744: PUSH
77745: LD_EXP 119
77749: PPUSH
77750: LD_EXP 119
77754: PUSH
77755: LD_INT 1
77757: PLUS
77758: PPUSH
77759: EMPTY
77760: PPUSH
77761: CALL_OW 1
77765: ST_TO_ADDR
// end end ;
77766: GO 77695
77768: POP
77769: POP
// for i := minerMinesList downto 1 do
77770: LD_ADDR_VAR 0 1
77774: PUSH
77775: DOUBLE
77776: LD_EXP 119
77780: INC
77781: ST_TO_ADDR
77782: LD_INT 1
77784: PUSH
77785: FOR_DOWNTO
77786: IFFALSE 78122
// begin if IsLive ( minersList [ i ] ) then
77788: LD_EXP 118
77792: PUSH
77793: LD_VAR 0 1
77797: ARRAY
77798: PPUSH
77799: CALL_OW 300
77803: IFFALSE 77831
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
77805: LD_EXP 118
77809: PUSH
77810: LD_VAR 0 1
77814: ARRAY
77815: PPUSH
77816: LD_EXP 119
77820: PUSH
77821: LD_VAR 0 1
77825: ARRAY
77826: PPUSH
77827: CALL_OW 505
// if not minerMinesList [ i ] then
77831: LD_EXP 119
77835: PUSH
77836: LD_VAR 0 1
77840: ARRAY
77841: NOT
77842: IFFALSE 77846
// continue ;
77844: GO 77785
// for j := minerMinesList [ i ] downto 1 do
77846: LD_ADDR_VAR 0 2
77850: PUSH
77851: DOUBLE
77852: LD_EXP 119
77856: PUSH
77857: LD_VAR 0 1
77861: ARRAY
77862: INC
77863: ST_TO_ADDR
77864: LD_INT 1
77866: PUSH
77867: FOR_DOWNTO
77868: IFFALSE 78118
// begin side := GetSide ( minersList [ i ] ) ;
77870: LD_ADDR_VAR 0 3
77874: PUSH
77875: LD_EXP 118
77879: PUSH
77880: LD_VAR 0 1
77884: ARRAY
77885: PPUSH
77886: CALL_OW 255
77890: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
77891: LD_ADDR_VAR 0 4
77895: PUSH
77896: LD_EXP 119
77900: PUSH
77901: LD_VAR 0 1
77905: ARRAY
77906: PUSH
77907: LD_VAR 0 2
77911: ARRAY
77912: PUSH
77913: LD_INT 1
77915: ARRAY
77916: PPUSH
77917: LD_EXP 119
77921: PUSH
77922: LD_VAR 0 1
77926: ARRAY
77927: PUSH
77928: LD_VAR 0 2
77932: ARRAY
77933: PUSH
77934: LD_INT 2
77936: ARRAY
77937: PPUSH
77938: CALL_OW 428
77942: ST_TO_ADDR
// if not tmp then
77943: LD_VAR 0 4
77947: NOT
77948: IFFALSE 77952
// continue ;
77950: GO 77867
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
77952: LD_VAR 0 4
77956: PUSH
77957: LD_INT 81
77959: PUSH
77960: LD_VAR 0 3
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: PPUSH
77969: CALL_OW 69
77973: IN
77974: PUSH
77975: LD_EXP 119
77979: PUSH
77980: LD_VAR 0 1
77984: ARRAY
77985: PUSH
77986: LD_VAR 0 2
77990: ARRAY
77991: PUSH
77992: LD_INT 1
77994: ARRAY
77995: PPUSH
77996: LD_EXP 119
78000: PUSH
78001: LD_VAR 0 1
78005: ARRAY
78006: PUSH
78007: LD_VAR 0 2
78011: ARRAY
78012: PUSH
78013: LD_INT 2
78015: ARRAY
78016: PPUSH
78017: CALL_OW 458
78021: AND
78022: IFFALSE 78116
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
78024: LD_EXP 119
78028: PUSH
78029: LD_VAR 0 1
78033: ARRAY
78034: PUSH
78035: LD_VAR 0 2
78039: ARRAY
78040: PUSH
78041: LD_INT 1
78043: ARRAY
78044: PPUSH
78045: LD_EXP 119
78049: PUSH
78050: LD_VAR 0 1
78054: ARRAY
78055: PUSH
78056: LD_VAR 0 2
78060: ARRAY
78061: PUSH
78062: LD_INT 2
78064: ARRAY
78065: PPUSH
78066: LD_VAR 0 3
78070: PPUSH
78071: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
78075: LD_ADDR_EXP 119
78079: PUSH
78080: LD_EXP 119
78084: PPUSH
78085: LD_VAR 0 1
78089: PPUSH
78090: LD_EXP 119
78094: PUSH
78095: LD_VAR 0 1
78099: ARRAY
78100: PPUSH
78101: LD_VAR 0 2
78105: PPUSH
78106: CALL_OW 3
78110: PPUSH
78111: CALL_OW 1
78115: ST_TO_ADDR
// end ; end ;
78116: GO 77867
78118: POP
78119: POP
// end ;
78120: GO 77785
78122: POP
78123: POP
// end ;
78124: PPOPN 4
78126: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
78127: LD_INT 0
78129: PPUSH
78130: PPUSH
// result := false ;
78131: LD_ADDR_VAR 0 4
78135: PUSH
78136: LD_INT 0
78138: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
78139: LD_VAR 0 1
78143: PPUSH
78144: CALL_OW 264
78148: PUSH
78149: LD_INT 81
78151: EQUAL
78152: NOT
78153: IFFALSE 78157
// exit ;
78155: GO 78397
// index := GetElementIndex ( minersList , unit ) ;
78157: LD_ADDR_VAR 0 5
78161: PUSH
78162: LD_EXP 118
78166: PPUSH
78167: LD_VAR 0 1
78171: PPUSH
78172: CALL 21679 0 2
78176: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
78177: LD_EXP 119
78181: PUSH
78182: LD_VAR 0 5
78186: ARRAY
78187: PUSH
78188: LD_EXP 120
78192: GREATEREQUAL
78193: IFFALSE 78197
// exit ;
78195: GO 78397
// ComMoveXY ( unit , x , y ) ;
78197: LD_VAR 0 1
78201: PPUSH
78202: LD_VAR 0 2
78206: PPUSH
78207: LD_VAR 0 3
78211: PPUSH
78212: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78216: LD_INT 35
78218: PPUSH
78219: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
78223: LD_VAR 0 1
78227: PPUSH
78228: LD_VAR 0 2
78232: PPUSH
78233: LD_VAR 0 3
78237: PPUSH
78238: CALL 53431 0 3
78242: NOT
78243: PUSH
78244: LD_VAR 0 1
78248: PPUSH
78249: CALL_OW 314
78253: AND
78254: IFFALSE 78258
// exit ;
78256: GO 78397
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
78258: LD_VAR 0 2
78262: PPUSH
78263: LD_VAR 0 3
78267: PPUSH
78268: CALL_OW 428
78272: PUSH
78273: LD_VAR 0 1
78277: EQUAL
78278: PUSH
78279: LD_VAR 0 1
78283: PPUSH
78284: CALL_OW 314
78288: NOT
78289: AND
78290: IFFALSE 78216
// PlaySoundXY ( x , y , PlantMine ) ;
78292: LD_VAR 0 2
78296: PPUSH
78297: LD_VAR 0 3
78301: PPUSH
78302: LD_STRING PlantMine
78304: PPUSH
78305: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
78309: LD_VAR 0 2
78313: PPUSH
78314: LD_VAR 0 3
78318: PPUSH
78319: LD_VAR 0 1
78323: PPUSH
78324: CALL_OW 255
78328: PPUSH
78329: LD_INT 0
78331: PPUSH
78332: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
78336: LD_ADDR_EXP 119
78340: PUSH
78341: LD_EXP 119
78345: PPUSH
78346: LD_VAR 0 5
78350: PUSH
78351: LD_EXP 119
78355: PUSH
78356: LD_VAR 0 5
78360: ARRAY
78361: PUSH
78362: LD_INT 1
78364: PLUS
78365: PUSH
78366: EMPTY
78367: LIST
78368: LIST
78369: PPUSH
78370: LD_VAR 0 2
78374: PUSH
78375: LD_VAR 0 3
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: PPUSH
78384: CALL 21894 0 3
78388: ST_TO_ADDR
// result := true ;
78389: LD_ADDR_VAR 0 4
78393: PUSH
78394: LD_INT 1
78396: ST_TO_ADDR
// end ;
78397: LD_VAR 0 4
78401: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
78402: LD_INT 0
78404: PPUSH
78405: PPUSH
78406: PPUSH
// if not unit in minersList then
78407: LD_VAR 0 1
78411: PUSH
78412: LD_EXP 118
78416: IN
78417: NOT
78418: IFFALSE 78422
// exit ;
78420: GO 78814
// index := GetElementIndex ( minersList , unit ) ;
78422: LD_ADDR_VAR 0 6
78426: PUSH
78427: LD_EXP 118
78431: PPUSH
78432: LD_VAR 0 1
78436: PPUSH
78437: CALL 21679 0 2
78441: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
78442: LD_ADDR_VAR 0 5
78446: PUSH
78447: DOUBLE
78448: LD_EXP 119
78452: PUSH
78453: LD_VAR 0 6
78457: ARRAY
78458: INC
78459: ST_TO_ADDR
78460: LD_INT 1
78462: PUSH
78463: FOR_DOWNTO
78464: IFFALSE 78625
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
78466: LD_EXP 119
78470: PUSH
78471: LD_VAR 0 6
78475: ARRAY
78476: PUSH
78477: LD_VAR 0 5
78481: ARRAY
78482: PUSH
78483: LD_INT 1
78485: ARRAY
78486: PUSH
78487: LD_VAR 0 2
78491: EQUAL
78492: PUSH
78493: LD_EXP 119
78497: PUSH
78498: LD_VAR 0 6
78502: ARRAY
78503: PUSH
78504: LD_VAR 0 5
78508: ARRAY
78509: PUSH
78510: LD_INT 2
78512: ARRAY
78513: PUSH
78514: LD_VAR 0 3
78518: EQUAL
78519: AND
78520: IFFALSE 78623
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
78522: LD_EXP 119
78526: PUSH
78527: LD_VAR 0 6
78531: ARRAY
78532: PUSH
78533: LD_VAR 0 5
78537: ARRAY
78538: PUSH
78539: LD_INT 1
78541: ARRAY
78542: PPUSH
78543: LD_EXP 119
78547: PUSH
78548: LD_VAR 0 6
78552: ARRAY
78553: PUSH
78554: LD_VAR 0 5
78558: ARRAY
78559: PUSH
78560: LD_INT 2
78562: ARRAY
78563: PPUSH
78564: LD_VAR 0 1
78568: PPUSH
78569: CALL_OW 255
78573: PPUSH
78574: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
78578: LD_ADDR_EXP 119
78582: PUSH
78583: LD_EXP 119
78587: PPUSH
78588: LD_VAR 0 6
78592: PPUSH
78593: LD_EXP 119
78597: PUSH
78598: LD_VAR 0 6
78602: ARRAY
78603: PPUSH
78604: LD_VAR 0 5
78608: PPUSH
78609: CALL_OW 3
78613: PPUSH
78614: CALL_OW 1
78618: ST_TO_ADDR
// exit ;
78619: POP
78620: POP
78621: GO 78814
// end ; end ;
78623: GO 78463
78625: POP
78626: POP
// for i := minerMinesList [ index ] downto 1 do
78627: LD_ADDR_VAR 0 5
78631: PUSH
78632: DOUBLE
78633: LD_EXP 119
78637: PUSH
78638: LD_VAR 0 6
78642: ARRAY
78643: INC
78644: ST_TO_ADDR
78645: LD_INT 1
78647: PUSH
78648: FOR_DOWNTO
78649: IFFALSE 78812
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
78651: LD_EXP 119
78655: PUSH
78656: LD_VAR 0 6
78660: ARRAY
78661: PUSH
78662: LD_VAR 0 5
78666: ARRAY
78667: PUSH
78668: LD_INT 1
78670: ARRAY
78671: PPUSH
78672: LD_EXP 119
78676: PUSH
78677: LD_VAR 0 6
78681: ARRAY
78682: PUSH
78683: LD_VAR 0 5
78687: ARRAY
78688: PUSH
78689: LD_INT 2
78691: ARRAY
78692: PPUSH
78693: LD_VAR 0 2
78697: PPUSH
78698: LD_VAR 0 3
78702: PPUSH
78703: CALL_OW 298
78707: PUSH
78708: LD_INT 6
78710: LESS
78711: IFFALSE 78810
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
78713: LD_EXP 119
78717: PUSH
78718: LD_VAR 0 6
78722: ARRAY
78723: PUSH
78724: LD_VAR 0 5
78728: ARRAY
78729: PUSH
78730: LD_INT 1
78732: ARRAY
78733: PPUSH
78734: LD_EXP 119
78738: PUSH
78739: LD_VAR 0 6
78743: ARRAY
78744: PUSH
78745: LD_VAR 0 5
78749: ARRAY
78750: PUSH
78751: LD_INT 2
78753: ARRAY
78754: PPUSH
78755: LD_VAR 0 1
78759: PPUSH
78760: CALL_OW 255
78764: PPUSH
78765: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
78769: LD_ADDR_EXP 119
78773: PUSH
78774: LD_EXP 119
78778: PPUSH
78779: LD_VAR 0 6
78783: PPUSH
78784: LD_EXP 119
78788: PUSH
78789: LD_VAR 0 6
78793: ARRAY
78794: PPUSH
78795: LD_VAR 0 5
78799: PPUSH
78800: CALL_OW 3
78804: PPUSH
78805: CALL_OW 1
78809: ST_TO_ADDR
// end ; end ;
78810: GO 78648
78812: POP
78813: POP
// end ;
78814: LD_VAR 0 4
78818: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
78819: LD_INT 0
78821: PPUSH
78822: PPUSH
78823: PPUSH
78824: PPUSH
78825: PPUSH
78826: PPUSH
78827: PPUSH
78828: PPUSH
78829: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
78830: LD_VAR 0 1
78834: PPUSH
78835: CALL_OW 264
78839: PUSH
78840: LD_INT 81
78842: EQUAL
78843: NOT
78844: PUSH
78845: LD_VAR 0 1
78849: PUSH
78850: LD_EXP 118
78854: IN
78855: NOT
78856: OR
78857: IFFALSE 78861
// exit ;
78859: GO 79183
// index := GetElementIndex ( minersList , unit ) ;
78861: LD_ADDR_VAR 0 6
78865: PUSH
78866: LD_EXP 118
78870: PPUSH
78871: LD_VAR 0 1
78875: PPUSH
78876: CALL 21679 0 2
78880: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
78881: LD_ADDR_VAR 0 8
78885: PUSH
78886: LD_EXP 120
78890: PUSH
78891: LD_EXP 119
78895: PUSH
78896: LD_VAR 0 6
78900: ARRAY
78901: MINUS
78902: ST_TO_ADDR
// if not minesFreeAmount then
78903: LD_VAR 0 8
78907: NOT
78908: IFFALSE 78912
// exit ;
78910: GO 79183
// tmp := [ ] ;
78912: LD_ADDR_VAR 0 7
78916: PUSH
78917: EMPTY
78918: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
78919: LD_ADDR_VAR 0 5
78923: PUSH
78924: DOUBLE
78925: LD_INT 1
78927: DEC
78928: ST_TO_ADDR
78929: LD_VAR 0 8
78933: PUSH
78934: FOR_TO
78935: IFFALSE 79130
// begin _d := rand ( 0 , 5 ) ;
78937: LD_ADDR_VAR 0 11
78941: PUSH
78942: LD_INT 0
78944: PPUSH
78945: LD_INT 5
78947: PPUSH
78948: CALL_OW 12
78952: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
78953: LD_ADDR_VAR 0 12
78957: PUSH
78958: LD_INT 2
78960: PPUSH
78961: LD_INT 6
78963: PPUSH
78964: CALL_OW 12
78968: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
78969: LD_ADDR_VAR 0 9
78973: PUSH
78974: LD_VAR 0 2
78978: PPUSH
78979: LD_VAR 0 11
78983: PPUSH
78984: LD_VAR 0 12
78988: PPUSH
78989: CALL_OW 272
78993: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
78994: LD_ADDR_VAR 0 10
78998: PUSH
78999: LD_VAR 0 3
79003: PPUSH
79004: LD_VAR 0 11
79008: PPUSH
79009: LD_VAR 0 12
79013: PPUSH
79014: CALL_OW 273
79018: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
79019: LD_VAR 0 9
79023: PPUSH
79024: LD_VAR 0 10
79028: PPUSH
79029: CALL_OW 488
79033: PUSH
79034: LD_VAR 0 9
79038: PUSH
79039: LD_VAR 0 10
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: PUSH
79048: LD_VAR 0 7
79052: IN
79053: NOT
79054: AND
79055: PUSH
79056: LD_VAR 0 9
79060: PPUSH
79061: LD_VAR 0 10
79065: PPUSH
79066: CALL_OW 458
79070: NOT
79071: AND
79072: IFFALSE 79114
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
79074: LD_ADDR_VAR 0 7
79078: PUSH
79079: LD_VAR 0 7
79083: PPUSH
79084: LD_VAR 0 7
79088: PUSH
79089: LD_INT 1
79091: PLUS
79092: PPUSH
79093: LD_VAR 0 9
79097: PUSH
79098: LD_VAR 0 10
79102: PUSH
79103: EMPTY
79104: LIST
79105: LIST
79106: PPUSH
79107: CALL_OW 1
79111: ST_TO_ADDR
79112: GO 79128
// i := i - 1 ;
79114: LD_ADDR_VAR 0 5
79118: PUSH
79119: LD_VAR 0 5
79123: PUSH
79124: LD_INT 1
79126: MINUS
79127: ST_TO_ADDR
// end ;
79128: GO 78934
79130: POP
79131: POP
// for i in tmp do
79132: LD_ADDR_VAR 0 5
79136: PUSH
79137: LD_VAR 0 7
79141: PUSH
79142: FOR_IN
79143: IFFALSE 79181
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
79145: LD_VAR 0 1
79149: PPUSH
79150: LD_VAR 0 5
79154: PUSH
79155: LD_INT 1
79157: ARRAY
79158: PPUSH
79159: LD_VAR 0 5
79163: PUSH
79164: LD_INT 2
79166: ARRAY
79167: PPUSH
79168: CALL 78127 0 3
79172: NOT
79173: IFFALSE 79179
// exit ;
79175: POP
79176: POP
79177: GO 79183
79179: GO 79142
79181: POP
79182: POP
// end ;
79183: LD_VAR 0 4
79187: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
79188: LD_INT 0
79190: PPUSH
79191: PPUSH
79192: PPUSH
79193: PPUSH
79194: PPUSH
79195: PPUSH
79196: PPUSH
// if not GetClass ( unit ) = class_sniper then
79197: LD_VAR 0 1
79201: PPUSH
79202: CALL_OW 257
79206: PUSH
79207: LD_INT 5
79209: EQUAL
79210: NOT
79211: IFFALSE 79215
// exit ;
79213: GO 79603
// dist := 8 ;
79215: LD_ADDR_VAR 0 5
79219: PUSH
79220: LD_INT 8
79222: ST_TO_ADDR
// viewRange := 12 ;
79223: LD_ADDR_VAR 0 7
79227: PUSH
79228: LD_INT 12
79230: ST_TO_ADDR
// side := GetSide ( unit ) ;
79231: LD_ADDR_VAR 0 6
79235: PUSH
79236: LD_VAR 0 1
79240: PPUSH
79241: CALL_OW 255
79245: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
79246: LD_INT 61
79248: PPUSH
79249: LD_VAR 0 6
79253: PPUSH
79254: CALL_OW 321
79258: PUSH
79259: LD_INT 2
79261: EQUAL
79262: IFFALSE 79272
// viewRange := 16 ;
79264: LD_ADDR_VAR 0 7
79268: PUSH
79269: LD_INT 16
79271: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
79272: LD_VAR 0 1
79276: PPUSH
79277: LD_VAR 0 2
79281: PPUSH
79282: LD_VAR 0 3
79286: PPUSH
79287: CALL_OW 297
79291: PUSH
79292: LD_VAR 0 5
79296: GREATER
79297: IFFALSE 79376
// begin ComMoveXY ( unit , x , y ) ;
79299: LD_VAR 0 1
79303: PPUSH
79304: LD_VAR 0 2
79308: PPUSH
79309: LD_VAR 0 3
79313: PPUSH
79314: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79318: LD_INT 35
79320: PPUSH
79321: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
79325: LD_VAR 0 1
79329: PPUSH
79330: LD_VAR 0 2
79334: PPUSH
79335: LD_VAR 0 3
79339: PPUSH
79340: CALL 53431 0 3
79344: NOT
79345: IFFALSE 79349
// exit ;
79347: GO 79603
// until GetDistUnitXY ( unit , x , y ) < dist ;
79349: LD_VAR 0 1
79353: PPUSH
79354: LD_VAR 0 2
79358: PPUSH
79359: LD_VAR 0 3
79363: PPUSH
79364: CALL_OW 297
79368: PUSH
79369: LD_VAR 0 5
79373: LESS
79374: IFFALSE 79318
// end ; ComTurnXY ( unit , x , y ) ;
79376: LD_VAR 0 1
79380: PPUSH
79381: LD_VAR 0 2
79385: PPUSH
79386: LD_VAR 0 3
79390: PPUSH
79391: CALL_OW 118
// wait ( 5 ) ;
79395: LD_INT 5
79397: PPUSH
79398: CALL_OW 67
// _d := GetDir ( unit ) ;
79402: LD_ADDR_VAR 0 10
79406: PUSH
79407: LD_VAR 0 1
79411: PPUSH
79412: CALL_OW 254
79416: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
79417: LD_ADDR_VAR 0 8
79421: PUSH
79422: LD_VAR 0 1
79426: PPUSH
79427: CALL_OW 250
79431: PPUSH
79432: LD_VAR 0 10
79436: PPUSH
79437: LD_VAR 0 5
79441: PPUSH
79442: CALL_OW 272
79446: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
79447: LD_ADDR_VAR 0 9
79451: PUSH
79452: LD_VAR 0 1
79456: PPUSH
79457: CALL_OW 251
79461: PPUSH
79462: LD_VAR 0 10
79466: PPUSH
79467: LD_VAR 0 5
79471: PPUSH
79472: CALL_OW 273
79476: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79477: LD_VAR 0 8
79481: PPUSH
79482: LD_VAR 0 9
79486: PPUSH
79487: CALL_OW 488
79491: NOT
79492: IFFALSE 79496
// exit ;
79494: GO 79603
// ComAnimCustom ( unit , 1 ) ;
79496: LD_VAR 0 1
79500: PPUSH
79501: LD_INT 1
79503: PPUSH
79504: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
79508: LD_VAR 0 8
79512: PPUSH
79513: LD_VAR 0 9
79517: PPUSH
79518: LD_VAR 0 6
79522: PPUSH
79523: LD_VAR 0 7
79527: PPUSH
79528: CALL_OW 330
// repeat wait ( 1 ) ;
79532: LD_INT 1
79534: PPUSH
79535: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
79539: LD_VAR 0 1
79543: PPUSH
79544: CALL_OW 316
79548: PUSH
79549: LD_VAR 0 1
79553: PPUSH
79554: CALL_OW 314
79558: OR
79559: PUSH
79560: LD_VAR 0 1
79564: PPUSH
79565: CALL_OW 302
79569: NOT
79570: OR
79571: PUSH
79572: LD_VAR 0 1
79576: PPUSH
79577: CALL_OW 301
79581: OR
79582: IFFALSE 79532
// RemoveSeeing ( _x , _y , side ) ;
79584: LD_VAR 0 8
79588: PPUSH
79589: LD_VAR 0 9
79593: PPUSH
79594: LD_VAR 0 6
79598: PPUSH
79599: CALL_OW 331
// end ; end_of_file
79603: LD_VAR 0 4
79607: RET
