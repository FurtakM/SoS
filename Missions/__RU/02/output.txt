// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 51408 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5840 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := 1 ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 57887 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 57887 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16999 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16999 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16999 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16999 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1670
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_EXP 43
1461: PPUSH
1462: LD_INT 25
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 72
1476: ST_TO_ADDR
// if not tmp then
1477: LD_VAR 0 1
1481: NOT
1482: IFFALSE 1486
// exit ;
1484: GO 1670
// wait ( 0 0$5 ) ;
1486: LD_INT 175
1488: PPUSH
1489: CALL_OW 67
// ComExit ( tmp ) ;
1493: LD_VAR 0 1
1497: PPUSH
1498: CALL 55129 0 1
// for i := 1 to 2 do
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: DOUBLE
1508: LD_INT 1
1510: DEC
1511: ST_TO_ADDR
1512: LD_INT 2
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1559
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1518: LD_VAR 0 1
1522: PPUSH
1523: LD_INT 71
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1533: LD_VAR 0 1
1537: PPUSH
1538: LD_INT 121
1540: PPUSH
1541: LD_INT 111
1543: PPUSH
1544: CALL_OW 171
// AddComUnload ( tmp ) ;
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 219
// end ;
1557: GO 1515
1559: POP
1560: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1561: LD_VAR 0 1
1565: PPUSH
1566: LD_INT 2
1568: PPUSH
1569: LD_INT 113
1571: PPUSH
1572: LD_INT 113
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1582: LD_INT 83
1584: PPUSH
1585: LD_INT 46
1587: PPUSH
1588: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1592: LD_INT 83
1594: PPUSH
1595: LD_INT 47
1597: PPUSH
1598: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1602: LD_INT 83
1604: PPUSH
1605: LD_INT 48
1607: PPUSH
1608: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1612: LD_VAR 0 1
1616: PPUSH
1617: LD_INT 26
1619: PPUSH
1620: LD_INT 116
1622: PPUSH
1623: LD_INT 98
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1633: LD_INT 35
1635: PPUSH
1636: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1640: LD_VAR 0 1
1644: PPUSH
1645: LD_INT 60
1647: PUSH
1648: EMPTY
1649: LIST
1650: PPUSH
1651: CALL_OW 72
1655: NOT
1656: IFFALSE 1633
// ComEnterUnit ( tmp , kirov ) ;
1658: LD_VAR 0 1
1662: PPUSH
1663: LD_INT 71
1665: PPUSH
1666: CALL_OW 120
// end ;
1670: PPOPN 2
1672: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1673: LD_INT 0
1675: PPUSH
1676: PPUSH
1677: PPUSH
1678: PPUSH
1679: PPUSH
1680: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1681: LD_ADDR_VAR 0 3
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 6
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 21
1698: PUSH
1699: LD_INT 2
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PPUSH
1710: CALL_OW 69
1714: ST_TO_ADDR
// if not belkovTank then
1715: LD_VAR 0 3
1719: NOT
1720: IFFALSE 1813
// begin uc_side := 6 ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_INT 6
1729: ST_TO_ADDR
// uc_nation := 3 ;
1730: LD_ADDR_OWVAR 21
1734: PUSH
1735: LD_INT 3
1737: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1738: LD_INT 21
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 1
1746: PPUSH
1747: LD_INT 42
1749: PPUSH
1750: LD_INT 100
1752: PPUSH
1753: CALL 21860 0 5
// belkovTank := CreateVehicle ;
1757: LD_ADDR_VAR 0 3
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 5
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1779: LD_VAR 0 3
1783: PPUSH
1784: LD_INT 127
1786: PPUSH
1787: LD_INT 118
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1797: LD_EXP 36
1801: PPUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 120
// end else
1811: GO 1827
// begin belkovTank := belkovTank [ 1 ] ;
1813: LD_ADDR_VAR 0 3
1817: PUSH
1818: LD_VAR 0 3
1822: PUSH
1823: LD_INT 1
1825: ARRAY
1826: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 71
1834: PPUSH
1835: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1839: LD_VAR 0 3
1843: PPUSH
1844: LD_INT 71
1846: PPUSH
1847: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 256
1860: PUSH
1861: LD_INT 1000
1863: LESS
1864: IFFALSE 1977
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1866: LD_ADDR_VAR 0 4
1870: PUSH
1871: LD_EXP 43
1875: PPUSH
1876: LD_INT 25
1878: PUSH
1879: LD_INT 3
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PPUSH
1886: CALL_OW 72
1890: ST_TO_ADDR
// if not mech then
1891: LD_VAR 0 4
1895: NOT
1896: IFFALSE 1912
// SetLives ( belkovTank , 1000 ) else
1898: LD_VAR 0 3
1902: PPUSH
1903: LD_INT 1000
1905: PPUSH
1906: CALL_OW 234
1910: GO 1977
// begin ComExit ( mech ) ;
1912: LD_VAR 0 4
1916: PPUSH
1917: CALL 55129 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1921: LD_VAR 0 4
1925: PPUSH
1926: LD_VAR 0 3
1930: PPUSH
1931: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1935: LD_VAR 0 4
1939: PPUSH
1940: LD_INT 22
1942: PUSH
1943: LD_INT 6
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: PUSH
1950: LD_INT 30
1952: PUSH
1953: LD_INT 2
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 69
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1977: LD_INT 70
1979: PPUSH
1980: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1984: LD_VAR 0 3
1988: PPUSH
1989: CALL_OW 256
1993: PUSH
1994: LD_INT 1000
1996: EQUAL
1997: IFFALSE 1977
// if mech then
1999: LD_VAR 0 4
2003: IFFALSE 2047
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 6
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 30
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2047: LD_EXP 36
2051: PPUSH
2052: LD_INT 107
2054: PPUSH
2055: LD_INT 104
2057: PPUSH
2058: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2062: LD_EXP 36
2066: PPUSH
2067: LD_INT 95
2069: PPUSH
2070: LD_INT 101
2072: PPUSH
2073: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2077: LD_EXP 36
2081: PPUSH
2082: LD_INT 89
2084: PPUSH
2085: LD_INT 100
2087: PPUSH
2088: CALL_OW 171
// wait ( 0 0$2 ) ;
2092: LD_INT 70
2094: PPUSH
2095: CALL_OW 67
// for i in belkovTeam do
2099: LD_ADDR_VAR 0 2
2103: PUSH
2104: LD_EXP 45
2108: PUSH
2109: FOR_IN
2110: IFFALSE 2138
// begin ComExit ( i ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: CALL 55129 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: LD_INT 89
2128: PPUSH
2129: LD_INT 100
2131: PPUSH
2132: CALL_OW 171
// end ;
2136: GO 2109
2138: POP
2139: POP
// tmp := Belkov union belkovTeam ;
2140: LD_ADDR_VAR 0 5
2144: PUSH
2145: LD_EXP 36
2149: PUSH
2150: LD_EXP 45
2154: UNION
2155: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2156: LD_INT 35
2158: PPUSH
2159: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2163: LD_VAR 0 5
2167: PPUSH
2168: LD_INT 60
2170: PUSH
2171: EMPTY
2172: LIST
2173: PPUSH
2174: CALL_OW 72
2178: NOT
2179: IFFALSE 2156
// ComMoveXY ( tmp , 71 , 65 ) ;
2181: LD_VAR 0 5
2185: PPUSH
2186: LD_INT 71
2188: PPUSH
2189: LD_INT 65
2191: PPUSH
2192: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2196: LD_VAR 0 5
2200: PPUSH
2201: LD_INT 61
2203: PPUSH
2204: LD_INT 37
2206: PPUSH
2207: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2211: LD_VAR 0 5
2215: PPUSH
2216: LD_INT 67
2218: PPUSH
2219: LD_INT 17
2221: PPUSH
2222: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2226: LD_VAR 0 5
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2238: LD_EXP 36
2242: PPUSH
2243: LD_INT 63
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2253: LD_EXP 36
2257: PPUSH
2258: LD_INT 105
2260: PPUSH
2261: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2265: LD_EXP 36
2269: PPUSH
2270: LD_INT 86
2272: PPUSH
2273: LD_INT 37
2275: PPUSH
2276: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2280: LD_EXP 36
2284: PPUSH
2285: LD_INT 105
2287: PPUSH
2288: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2292: LD_VAR 0 5
2296: PPUSH
2297: LD_INT 88
2299: PPUSH
2300: LD_INT 29
2302: PPUSH
2303: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2307: LD_INT 35
2309: PPUSH
2310: CALL_OW 67
// for i in tmp do
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 5
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2356
// if not HasTask ( i ) then
2327: LD_VAR 0 2
2331: PPUSH
2332: CALL_OW 314
2336: NOT
2337: IFFALSE 2354
// AddComMoveXY ( tmp , 88 , 29 ) ;
2339: LD_VAR 0 5
2343: PPUSH
2344: LD_INT 88
2346: PPUSH
2347: LD_INT 29
2349: PPUSH
2350: CALL_OW 171
2354: GO 2324
2356: POP
2357: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2358: LD_VAR 0 5
2362: PPUSH
2363: LD_INT 95
2365: PUSH
2366: LD_INT 6
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PPUSH
2373: CALL_OW 72
2377: IFFALSE 2471
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2379: LD_ADDR_VAR 0 2
2383: PUSH
2384: LD_VAR 0 5
2388: PPUSH
2389: LD_INT 95
2391: PUSH
2392: LD_INT 6
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PPUSH
2399: CALL_OW 72
2403: PUSH
2404: FOR_IN
2405: IFFALSE 2469
// begin if i = Belkov then
2407: LD_VAR 0 2
2411: PUSH
2412: LD_EXP 36
2416: EQUAL
2417: IFFALSE 2458
// begin belkovTank := IsInUnit ( Belkov ) ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_EXP 36
2428: PPUSH
2429: CALL_OW 310
2433: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2434: LD_ADDR_VAR 0 6
2438: PUSH
2439: LD_VAR 0 3
2443: PPUSH
2444: CALL_OW 261
2448: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2449: LD_VAR 0 3
2453: PPUSH
2454: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: CALL_OW 64
// end ;
2467: GO 2404
2469: POP
2470: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2471: LD_VAR 0 5
2475: PPUSH
2476: LD_INT 52
2478: PUSH
2479: EMPTY
2480: LIST
2481: PPUSH
2482: CALL_OW 72
2486: NOT
2487: IFFALSE 2307
// wait ( 1 1$20 ) ;
2489: LD_INT 2800
2491: PPUSH
2492: CALL_OW 67
// if fuel < 50 then
2496: LD_VAR 0 6
2500: PUSH
2501: LD_INT 50
2503: LESS
2504: IFFALSE 2514
// fuel := 50 ;
2506: LD_ADDR_VAR 0 6
2510: PUSH
2511: LD_INT 50
2513: ST_TO_ADDR
// uc_side := 6 ;
2514: LD_ADDR_OWVAR 20
2518: PUSH
2519: LD_INT 6
2521: ST_TO_ADDR
// uc_nation := 3 ;
2522: LD_ADDR_OWVAR 21
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2530: LD_INT 21
2532: PPUSH
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: LD_INT 42
2541: PPUSH
2542: LD_VAR 0 6
2546: PUSH
2547: LD_INT 5
2549: MINUS
2550: PPUSH
2551: CALL 21860 0 5
// belkovTank := CreateVehicle ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 45
2564: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2577: LD_VAR 0 3
2581: PPUSH
2582: LD_INT 60
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2595: LD_EXP 36
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2609: LD_EXP 36
2613: PPUSH
2614: LD_INT 72
2616: PPUSH
2617: LD_INT 26
2619: PPUSH
2620: CALL_OW 111
// wait ( 0 0$2 ) ;
2624: LD_INT 70
2626: PPUSH
2627: CALL_OW 67
// for i in belkovTeam do
2631: LD_ADDR_VAR 0 2
2635: PUSH
2636: LD_EXP 45
2640: PUSH
2641: FOR_IN
2642: IFFALSE 2686
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2644: LD_VAR 0 2
2648: PPUSH
2649: LD_INT 60
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 0
2657: PPUSH
2658: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_INT 65
2669: PPUSH
2670: LD_INT 18
2672: PPUSH
2673: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2677: LD_INT 28
2679: PPUSH
2680: CALL_OW 67
// end ;
2684: GO 2641
2686: POP
2687: POP
// repeat wait ( 0 0$1 ) ;
2688: LD_INT 35
2690: PPUSH
2691: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2695: LD_EXP 14
2699: PUSH
2700: LD_EXP 45
2704: PPUSH
2705: LD_INT 60
2707: PUSH
2708: EMPTY
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: NOT
2716: AND
2717: IFFALSE 2688
// americanTrap := true ;
2719: LD_ADDR_EXP 17
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// end ;
2727: LD_VAR 0 1
2731: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2732: LD_EXP 4
2736: PUSH
2737: LD_EXP 40
2741: PPUSH
2742: CALL_OW 302
2746: AND
2747: IFFALSE 3067
2749: GO 2751
2751: DISABLE
2752: LD_INT 0
2754: PPUSH
2755: PPUSH
2756: PPUSH
2757: PPUSH
// begin enable ;
2758: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2759: LD_EXP 8
2763: PUSH
2764: LD_INT 0
2766: GREATER
2767: PUSH
2768: LD_EXP 40
2772: PPUSH
2773: CALL_OW 314
2777: NOT
2778: AND
2779: IFFALSE 2948
// begin dir := rand ( 0 , 5 ) ;
2781: LD_ADDR_VAR 0 4
2785: PUSH
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 5
2791: PPUSH
2792: CALL_OW 12
2796: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2797: LD_ADDR_VAR 0 1
2801: PUSH
2802: LD_EXP 40
2806: PPUSH
2807: CALL_OW 250
2811: PPUSH
2812: LD_VAR 0 4
2816: PPUSH
2817: LD_INT 5
2819: PPUSH
2820: CALL_OW 272
2824: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2825: LD_ADDR_VAR 0 2
2829: PUSH
2830: LD_EXP 40
2834: PPUSH
2835: CALL_OW 251
2839: PPUSH
2840: LD_VAR 0 4
2844: PPUSH
2845: LD_INT 5
2847: PPUSH
2848: CALL_OW 273
2852: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2853: LD_VAR 0 1
2857: PPUSH
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 488
2867: PUSH
2868: LD_INT 106
2870: PPUSH
2871: LD_VAR 0 1
2875: PPUSH
2876: LD_VAR 0 2
2880: PPUSH
2881: CALL_OW 297
2885: PUSH
2886: LD_INT 26
2888: LESS
2889: AND
2890: IFFALSE 2913
// AddComMoveXY ( Platonov , x , y ) else
2892: LD_EXP 40
2896: PPUSH
2897: LD_VAR 0 1
2901: PPUSH
2902: LD_VAR 0 2
2906: PPUSH
2907: CALL_OW 171
2911: GO 2928
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2913: LD_EXP 40
2917: PPUSH
2918: LD_INT 64
2920: PPUSH
2921: LD_INT 96
2923: PPUSH
2924: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2928: LD_EXP 40
2932: PPUSH
2933: LD_INT 105
2935: PPUSH
2936: LD_INT 315
2938: PPUSH
2939: CALL_OW 12
2943: PPUSH
2944: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2948: LD_EXP 8
2952: PUSH
2953: LD_INT 0
2955: LESSEQUAL
2956: IFFALSE 3002
// begin if not IsAt ( Platonov , 64 , 96 ) then
2958: LD_EXP 40
2962: PPUSH
2963: LD_INT 64
2965: PPUSH
2966: LD_INT 96
2968: PPUSH
2969: CALL_OW 307
2973: NOT
2974: IFFALSE 3000
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2976: LD_EXP 40
2980: PPUSH
2981: LD_INT 64
2983: PPUSH
2984: LD_INT 96
2986: PPUSH
2987: CALL_OW 111
// AddComHold ( Platonov ) ;
2991: LD_EXP 40
2995: PPUSH
2996: CALL_OW 200
// end ; end else
3000: GO 3067
// if tick mod 0 0$75 = 0 0$00 then
3002: LD_OWVAR 1
3006: PUSH
3007: LD_INT 2625
3009: MOD
3010: PUSH
3011: LD_INT 0
3013: EQUAL
3014: IFFALSE 3067
// begin amount := rand ( 2 , 5 ) ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: LD_INT 2
3023: PPUSH
3024: LD_INT 5
3026: PPUSH
3027: CALL_OW 12
3031: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_EXP 8
3041: PUSH
3042: LD_VAR 0 3
3046: PUSH
3047: LD_INT 10
3049: MUL
3050: MINUS
3051: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 55
// end ; end ;
3067: PPOPN 4
3069: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3070: LD_INT 106
3072: PPUSH
3073: CALL_OW 274
3077: PPUSH
3078: LD_INT 2
3080: PPUSH
3081: CALL_OW 275
3085: PUSH
3086: LD_INT 30
3088: LESS
3089: IFFALSE 3299
3091: GO 3093
3093: DISABLE
3094: LD_INT 0
3096: PPUSH
3097: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3098: LD_ADDR_VAR 0 2
3102: PUSH
3103: LD_EXP 43
3107: PPUSH
3108: LD_INT 3
3110: PUSH
3111: LD_INT 60
3113: PUSH
3114: EMPTY
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 2
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 72
3139: ST_TO_ADDR
// if not eng then
3140: LD_VAR 0 2
3144: NOT
3145: IFFALSE 3149
// exit ;
3147: GO 3299
// ComExit ( eng ) ;
3149: LD_VAR 0 2
3153: PPUSH
3154: CALL 55129 0 1
// i := 5 ;
3158: LD_ADDR_VAR 0 1
3162: PUSH
3163: LD_INT 5
3165: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3166: LD_INT 35
3168: PPUSH
3169: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: NOT
3189: PUSH
3190: LD_VAR 0 2
3194: AND
3195: IFFALSE 3265
// begin ComTransport ( eng , kirov , mat_oil ) ;
3197: LD_VAR 0 2
3201: PPUSH
3202: LD_INT 71
3204: PPUSH
3205: LD_INT 2
3207: PPUSH
3208: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3212: LD_VAR 0 2
3216: PPUSH
3217: LD_INT 67
3219: PPUSH
3220: LD_INT 99
3222: PPUSH
3223: CALL_OW 171
// AddComUnload ( eng ) ;
3227: LD_VAR 0 2
3231: PPUSH
3232: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 107
3243: PPUSH
3244: LD_INT 104
3246: PPUSH
3247: CALL_OW 171
// i := i - 1 ;
3251: LD_ADDR_VAR 0 1
3255: PUSH
3256: LD_VAR 0 1
3260: PUSH
3261: LD_INT 1
3263: MINUS
3264: ST_TO_ADDR
// end ; until i = 0 ;
3265: LD_VAR 0 1
3269: PUSH
3270: LD_INT 0
3272: EQUAL
3273: IFFALSE 3166
// AddComMoveUnit ( eng , kirov ) ;
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 71
3282: PPUSH
3283: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3287: LD_VAR 0 2
3291: PPUSH
3292: LD_INT 71
3294: PPUSH
3295: CALL_OW 180
// end ;
3299: PPOPN 2
3301: END
// export function SendReinforcements ; var i ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
// reinforcementsGained := true ;
3306: LD_ADDR_EXP 25
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// for i := 1 to 2 do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: DOUBLE
3320: LD_INT 1
3322: DEC
3323: ST_TO_ADDR
3324: LD_INT 2
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3410
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3330: LD_EXP 44
3334: PUSH
3335: LD_VAR 0 2
3339: ARRAY
3340: PPUSH
3341: CALL 55129 0 1
3345: IFFALSE 3354
// wait ( 0 0$0.3 ) ;
3347: LD_INT 10
3349: PPUSH
3350: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3354: LD_EXP 44
3358: PUSH
3359: LD_VAR 0 2
3363: ARRAY
3364: PPUSH
3365: LD_INT 75
3367: PPUSH
3368: LD_INT 84
3370: PPUSH
3371: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3375: LD_EXP 44
3379: PUSH
3380: LD_VAR 0 2
3384: ARRAY
3385: PPUSH
3386: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3390: LD_EXP 44
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 3
3403: PPUSH
3404: CALL_OW 235
// end ;
3408: GO 3327
3410: POP
3411: POP
// end ;
3412: LD_VAR 0 1
3416: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3417: LD_EXP 21
3421: PUSH
3422: LD_EXP 18
3426: AND
3427: PUSH
3428: LD_EXP 43
3432: PPUSH
3433: LD_INT 25
3435: PUSH
3436: LD_INT 3
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 72
3447: AND
3448: IFFALSE 3605
3450: GO 3452
3452: DISABLE
3453: LD_INT 0
3455: PPUSH
3456: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3457: LD_ADDR_VAR 0 1
3461: PUSH
3462: LD_EXP 43
3466: PPUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 72
3481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 22
3489: PUSH
3490: LD_INT 6
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 30
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: ST_TO_ADDR
// if not fac then
3516: LD_VAR 0 2
3520: NOT
3521: IFFALSE 3525
// exit ;
3523: GO 3605
// fac := fac [ 1 ] ;
3525: LD_ADDR_VAR 0 2
3529: PUSH
3530: LD_VAR 0 2
3534: PUSH
3535: LD_INT 1
3537: ARRAY
3538: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3539: LD_VAR 0 2
3543: PPUSH
3544: CALL_OW 313
3548: PUSH
3549: LD_INT 0
3551: EQUAL
3552: IFFALSE 3584
// begin ComExit ( mech ) ;
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL 55129 0 1
// wait ( 3 ) ;
3563: LD_INT 3
3565: PPUSH
3566: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_VAR 0 2
3579: PPUSH
3580: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3584: LD_VAR 0 2
3588: PPUSH
3589: LD_INT 21
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 1
3597: PPUSH
3598: LD_INT 42
3600: PPUSH
3601: CALL_OW 125
// end ;
3605: PPOPN 2
3607: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3608: LD_INT 0
3610: PPUSH
3611: PPUSH
3612: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: LD_INT 90
3620: PPUSH
3621: LD_INT 100
3623: PPUSH
3624: CALL_OW 111
// wait ( 0 0$10 ) ;
3628: LD_INT 350
3630: PPUSH
3631: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3635: LD_VAR 0 1
3639: PPUSH
3640: LD_INT 0
3642: PPUSH
3643: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3654: LD_ADDR_VAR 0 4
3658: PUSH
3659: LD_VAR 0 1
3663: PPUSH
3664: CALL_OW 110
3668: ST_TO_ADDR
// if tag = 0 then
3669: LD_VAR 0 4
3673: PUSH
3674: LD_INT 0
3676: EQUAL
3677: IFFALSE 3748
// begin if not HasTask ( vehicle ) then
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL_OW 314
3688: NOT
3689: IFFALSE 3706
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3691: LD_VAR 0 1
3695: PPUSH
3696: LD_INT 83
3698: PPUSH
3699: LD_INT 68
3701: PPUSH
3702: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3706: LD_VAR 0 1
3710: PPUSH
3711: CALL_OW 256
3715: PUSH
3716: LD_INT 750
3718: LESS
3719: IFFALSE 3748
// begin SetTag ( vehicle , 1 ) ;
3721: LD_VAR 0 1
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 93
3740: PPUSH
3741: LD_INT 102
3743: PPUSH
3744: CALL_OW 111
// end ; end ; if tag = 1 then
3748: LD_VAR 0 4
3752: PUSH
3753: LD_INT 1
3755: EQUAL
3756: IFFALSE 3846
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3758: LD_VAR 0 1
3762: PPUSH
3763: LD_INT 113
3765: PPUSH
3766: LD_INT 106
3768: PPUSH
3769: CALL_OW 307
3773: NOT
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: CALL_OW 314
3784: NOT
3785: AND
3786: IFFALSE 3803
// ComMoveXY ( vehicle , 113 , 106 ) ;
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_INT 113
3795: PPUSH
3796: LD_INT 106
3798: PPUSH
3799: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3803: LD_VAR 0 1
3807: PPUSH
3808: LD_INT 113
3810: PPUSH
3811: LD_INT 106
3813: PPUSH
3814: CALL_OW 307
3818: IFFALSE 3846
// begin SetTag ( vehicle , 2 ) ;
3820: LD_VAR 0 1
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3832: LD_VAR 0 1
3836: PPUSH
3837: CALL_OW 311
3841: PPUSH
3842: CALL 56431 0 1
// end ; end ; if tag = 2 then
3846: LD_VAR 0 4
3850: PUSH
3851: LD_INT 2
3853: EQUAL
3854: IFFALSE 3918
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3856: LD_VAR 0 1
3860: PPUSH
3861: CALL_OW 256
3865: PUSH
3866: LD_INT 1000
3868: EQUAL
3869: PUSH
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 311
3879: AND
3880: IFFALSE 3918
// begin ComMoveUnit ( vehicle , kirov ) ;
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 71
3889: PPUSH
3890: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_INT 71
3901: PPUSH
3902: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3906: LD_VAR 0 1
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 301
3927: PUSH
3928: LD_EXP 23
3932: OR
3933: IFFALSE 3647
// if eastOutpostDestroyed then
3935: LD_EXP 23
3939: IFFALSE 3956
// ComMoveXY ( vehicle , 111 , 105 ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 111
3948: PPUSH
3949: LD_INT 105
3951: PPUSH
3952: CALL_OW 111
// end ; end_of_file
3956: LD_VAR 0 2
3960: RET
// export usWestForces , usEastForces , usTrapForces , Dickens ; export function PrepareAmerican ; var i , un , tmp ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
// uc_side := 1 ;
3967: LD_ADDR_OWVAR 20
3971: PUSH
3972: LD_INT 1
3974: ST_TO_ADDR
// uc_nation := 1 ;
3975: LD_ADDR_OWVAR 21
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// usWestForces := [ ] ;
3983: LD_ADDR_EXP 46
3987: PUSH
3988: EMPTY
3989: ST_TO_ADDR
// usEastForces := [ ] ;
3990: LD_ADDR_EXP 47
3994: PUSH
3995: EMPTY
3996: ST_TO_ADDR
// bc_type := b_depot ;
3997: LD_ADDR_OWVAR 42
4001: PUSH
4002: LD_INT 0
4004: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4005: LD_ADDR_OWVAR 43
4009: PUSH
4010: LD_OWVAR 67
4014: PUSH
4015: LD_INT 1
4017: MINUS
4018: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4019: LD_INT 48
4021: PPUSH
4022: LD_INT 54
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4032: LD_ADDR_VAR 0 4
4036: PUSH
4037: LD_INT 55
4039: PUSH
4040: LD_INT 55
4042: PUSH
4043: LD_INT 4
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 59
4053: PUSH
4054: LD_INT 61
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: ST_TO_ADDR
// if Difficulty > 1 then
4069: LD_OWVAR 67
4073: PUSH
4074: LD_INT 1
4076: GREATER
4077: IFFALSE 4113
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4079: LD_ADDR_VAR 0 4
4083: PUSH
4084: LD_VAR 0 4
4088: PPUSH
4089: LD_VAR 0 4
4093: PPUSH
4094: LD_INT 46
4096: PUSH
4097: LD_INT 64
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 2
4112: ST_TO_ADDR
// if Difficulty > 2 then
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 2
4120: GREATER
4121: IFFALSE 4157
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4123: LD_ADDR_VAR 0 4
4127: PUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_VAR 0 4
4137: PPUSH
4138: LD_INT 36
4140: PUSH
4141: LD_INT 48
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 2
4156: ST_TO_ADDR
// bc_type := b_breastwork ;
4157: LD_ADDR_OWVAR 42
4161: PUSH
4162: LD_INT 31
4164: ST_TO_ADDR
// InitHC_All ( ) ;
4165: CALL_OW 584
// for i in tmp do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_VAR 0 4
4178: PUSH
4179: FOR_IN
4180: IFFALSE 4324
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4182: LD_VAR 0 2
4186: PUSH
4187: LD_INT 1
4189: ARRAY
4190: PPUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 2
4198: ARRAY
4199: PPUSH
4200: LD_VAR 0 2
4204: PUSH
4205: LD_INT 3
4207: ARRAY
4208: PPUSH
4209: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_OWVAR 67
4220: PPUSH
4221: CALL_OW 381
// un := CreateHuman ;
4225: LD_ADDR_VAR 0 3
4229: PUSH
4230: CALL_OW 44
4234: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4235: LD_ADDR_EXP 46
4239: PUSH
4240: LD_EXP 46
4244: PPUSH
4245: LD_EXP 46
4249: PUSH
4250: LD_INT 1
4252: PLUS
4253: PPUSH
4254: LD_VAR 0 3
4258: PPUSH
4259: CALL_OW 1
4263: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_VAR 0 2
4273: PUSH
4274: LD_INT 3
4276: ARRAY
4277: PUSH
4278: LD_INT 3
4280: PLUS
4281: PUSH
4282: LD_INT 6
4284: MOD
4285: PPUSH
4286: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4290: LD_VAR 0 3
4294: PPUSH
4295: LD_VAR 0 2
4299: PUSH
4300: LD_INT 1
4302: ARRAY
4303: PPUSH
4304: LD_VAR 0 2
4308: PUSH
4309: LD_INT 2
4311: ARRAY
4312: PPUSH
4313: CALL_OW 428
4317: PPUSH
4318: CALL_OW 52
// end ;
4322: GO 4179
4324: POP
4325: POP
// for i := 1 to 2 do
4326: LD_ADDR_VAR 0 2
4330: PUSH
4331: DOUBLE
4332: LD_INT 1
4334: DEC
4335: ST_TO_ADDR
4336: LD_INT 2
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4416
// begin PrepareEngineer ( false , Difficulty ) ;
4342: LD_INT 0
4344: PPUSH
4345: LD_OWVAR 67
4349: PPUSH
4350: CALL_OW 382
// un := CreateHuman ;
4354: LD_ADDR_VAR 0 3
4358: PUSH
4359: CALL_OW 44
4363: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4364: LD_ADDR_EXP 46
4368: PUSH
4369: LD_EXP 46
4373: PPUSH
4374: LD_EXP 46
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: PPUSH
4383: LD_VAR 0 3
4387: PPUSH
4388: CALL_OW 1
4392: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4393: LD_VAR 0 3
4397: PPUSH
4398: LD_INT 54
4400: PPUSH
4401: LD_INT 58
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 50
// end ;
4414: GO 4339
4416: POP
4417: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4418: LD_ADDR_VAR 0 4
4422: PUSH
4423: LD_INT 87
4425: PUSH
4426: LD_INT 62
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 89
4439: PUSH
4440: LD_INT 67
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// if Difficulty > 2 then
4455: LD_OWVAR 67
4459: PUSH
4460: LD_INT 2
4462: GREATER
4463: IFFALSE 4499
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4465: LD_ADDR_VAR 0 4
4469: PUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_INT 88
4482: PUSH
4483: LD_INT 53
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 2
4498: ST_TO_ADDR
// bc_type := b_breastwork ;
4499: LD_ADDR_OWVAR 42
4503: PUSH
4504: LD_INT 31
4506: ST_TO_ADDR
// for i in tmp do
4507: LD_ADDR_VAR 0 2
4511: PUSH
4512: LD_VAR 0 4
4516: PUSH
4517: FOR_IN
4518: IFFALSE 4662
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4520: LD_VAR 0 2
4524: PUSH
4525: LD_INT 1
4527: ARRAY
4528: PPUSH
4529: LD_VAR 0 2
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: PPUSH
4538: LD_VAR 0 2
4542: PUSH
4543: LD_INT 3
4545: ARRAY
4546: PPUSH
4547: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_OWVAR 67
4558: PPUSH
4559: CALL_OW 381
// un := CreateHuman ;
4563: LD_ADDR_VAR 0 3
4567: PUSH
4568: CALL_OW 44
4572: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4573: LD_ADDR_EXP 47
4577: PUSH
4578: LD_EXP 47
4582: PPUSH
4583: LD_EXP 47
4587: PUSH
4588: LD_INT 1
4590: PLUS
4591: PPUSH
4592: LD_VAR 0 3
4596: PPUSH
4597: CALL_OW 1
4601: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4602: LD_VAR 0 3
4606: PPUSH
4607: LD_VAR 0 2
4611: PUSH
4612: LD_INT 3
4614: ARRAY
4615: PUSH
4616: LD_INT 3
4618: PLUS
4619: PUSH
4620: LD_INT 6
4622: MOD
4623: PPUSH
4624: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4628: LD_VAR 0 3
4632: PPUSH
4633: LD_VAR 0 2
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: PPUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_INT 2
4649: ARRAY
4650: PPUSH
4651: CALL_OW 428
4655: PPUSH
4656: CALL_OW 52
// end ;
4660: GO 4517
4662: POP
4663: POP
// for i := 1 to 2 do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_INT 2
4676: PUSH
4677: FOR_TO
4678: IFFALSE 4754
// begin PrepareEngineer ( false , Difficulty ) ;
4680: LD_INT 0
4682: PPUSH
4683: LD_OWVAR 67
4687: PPUSH
4688: CALL_OW 382
// un := CreateHuman ;
4692: LD_ADDR_VAR 0 3
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4702: LD_ADDR_EXP 47
4706: PUSH
4707: LD_EXP 47
4711: PPUSH
4712: LD_EXP 47
4716: PUSH
4717: LD_INT 1
4719: PLUS
4720: PPUSH
4721: LD_VAR 0 3
4725: PPUSH
4726: CALL_OW 1
4730: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 95
4738: PPUSH
4739: LD_INT 65
4741: PPUSH
4742: LD_INT 2
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 50
// end ;
4752: GO 4677
4754: POP
4755: POP
// end ;
4756: LD_VAR 0 1
4760: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4761: LD_INT 0
4763: PPUSH
4764: PPUSH
4765: PPUSH
// usTrapForces := [ ] ;
4766: LD_ADDR_EXP 48
4770: PUSH
4771: EMPTY
4772: ST_TO_ADDR
// uc_side := 1 ;
4773: LD_ADDR_OWVAR 20
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// uc_nation := 1 ;
4781: LD_ADDR_OWVAR 21
4785: PUSH
4786: LD_INT 1
4788: ST_TO_ADDR
// InitHC_All ( ) ;
4789: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4793: LD_INT 1
4795: PPUSH
4796: LD_OWVAR 67
4800: PPUSH
4801: CALL_OW 381
// un := CreateHuman ;
4805: LD_ADDR_VAR 0 3
4809: PUSH
4810: CALL_OW 44
4814: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4815: LD_ADDR_EXP 48
4819: PUSH
4820: LD_EXP 48
4824: PPUSH
4825: LD_VAR 0 3
4829: PPUSH
4830: CALL 54731 0 2
4834: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4835: LD_ADDR_VAR 0 2
4839: PUSH
4840: DOUBLE
4841: LD_INT 1
4843: DEC
4844: ST_TO_ADDR
4845: LD_INT 5
4847: PUSH
4848: LD_INT 6
4850: PUSH
4851: LD_INT 7
4853: PUSH
4854: LD_INT 8
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_OWVAR 67
4867: ARRAY
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4916
// begin PrepareSoldier ( false , Difficulty ) ;
4872: LD_INT 0
4874: PPUSH
4875: LD_OWVAR 67
4879: PPUSH
4880: CALL_OW 381
// un := CreateHuman ;
4884: LD_ADDR_VAR 0 3
4888: PUSH
4889: CALL_OW 44
4893: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4894: LD_ADDR_EXP 48
4898: PUSH
4899: LD_EXP 48
4903: PPUSH
4904: LD_VAR 0 3
4908: PPUSH
4909: CALL 54731 0 2
4913: ST_TO_ADDR
// end ;
4914: GO 4869
4916: POP
4917: POP
// for i := 1 to 2 do
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: DOUBLE
4924: LD_INT 1
4926: DEC
4927: ST_TO_ADDR
4928: LD_INT 2
4930: PUSH
4931: FOR_TO
4932: IFFALSE 4978
// begin PrepareScientist ( false , Difficulty ) ;
4934: LD_INT 0
4936: PPUSH
4937: LD_OWVAR 67
4941: PPUSH
4942: CALL_OW 384
// un := CreateHuman ;
4946: LD_ADDR_VAR 0 3
4950: PUSH
4951: CALL_OW 44
4955: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4956: LD_ADDR_EXP 48
4960: PUSH
4961: LD_EXP 48
4965: PPUSH
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL 54731 0 2
4975: ST_TO_ADDR
// end ;
4976: GO 4931
4978: POP
4979: POP
// end ;
4980: LD_VAR 0 1
4984: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4985: LD_EXP 46
4989: IFFALSE 5559
4991: GO 4993
4993: DISABLE
4994: LD_INT 0
4996: PPUSH
4997: PPUSH
4998: PPUSH
4999: PPUSH
5000: PPUSH
// begin enable ;
5001: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5002: LD_ADDR_VAR 0 3
5006: PUSH
5007: LD_INT 8
5009: PPUSH
5010: LD_INT 22
5012: PUSH
5013: LD_INT 1
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 21
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PPUSH
5034: CALL_OW 70
5038: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5039: LD_ADDR_VAR 0 4
5043: PUSH
5044: LD_EXP 46
5048: PPUSH
5049: LD_INT 25
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 72
5063: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5064: LD_ADDR_VAR 0 5
5068: PUSH
5069: LD_EXP 46
5073: PPUSH
5074: LD_INT 25
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: CALL_OW 72
5088: ST_TO_ADDR
// if eng then
5089: LD_VAR 0 4
5093: IFFALSE 5287
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5095: LD_VAR 0 3
5099: PPUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 24
5105: PUSH
5106: LD_INT 1000
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 72
5121: IFFALSE 5233
// begin for i in eng do
5123: LD_ADDR_VAR 0 1
5127: PUSH
5128: LD_VAR 0 4
5132: PUSH
5133: FOR_IN
5134: IFFALSE 5229
// if IsInUnit ( i ) then
5136: LD_VAR 0 1
5140: PPUSH
5141: CALL_OW 310
5145: IFFALSE 5158
// ComExit ( i ) else
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL 55129 0 1
5156: GO 5227
// if IsOk ( i ) and not HasTask ( i ) then
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 302
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 314
5177: NOT
5178: AND
5179: IFFALSE 5227
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5181: LD_VAR 0 1
5185: PPUSH
5186: LD_VAR 0 3
5190: PPUSH
5191: LD_INT 3
5193: PUSH
5194: LD_INT 24
5196: PUSH
5197: LD_INT 1000
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 72
5212: PPUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: CALL_OW 74
5222: PPUSH
5223: CALL_OW 130
5227: GO 5133
5229: POP
5230: POP
// end else
5231: GO 5287
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_INT 30
5240: PUSH
5241: LD_INT 0
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 72
5252: IFFALSE 5287
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5254: LD_VAR 0 4
5258: PPUSH
5259: LD_VAR 0 3
5263: PPUSH
5264: LD_INT 30
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL_OW 72
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5287: LD_VAR 0 5
5291: PPUSH
5292: LD_INT 50
5294: PUSH
5295: EMPTY
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: PUSH
5303: LD_INT 18
5305: PPUSH
5306: LD_INT 81
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: CALL_OW 70
5320: PUSH
5321: LD_INT 1
5323: GREATER
5324: AND
5325: PUSH
5326: LD_INT 18
5328: PPUSH
5329: LD_INT 22
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 70
5343: NOT
5344: AND
5345: IFFALSE 5399
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5347: LD_ADDR_VAR 0 1
5351: PUSH
5352: LD_VAR 0 5
5356: PPUSH
5357: LD_INT 50
5359: PUSH
5360: EMPTY
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: PUSH
5368: FOR_IN
5369: IFFALSE 5397
// begin ComExit ( i ) ;
5371: LD_VAR 0 1
5375: PPUSH
5376: CALL 55129 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 46
5387: PPUSH
5388: LD_INT 62
5390: PPUSH
5391: CALL_OW 174
// end ;
5395: GO 5368
5397: POP
5398: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5399: LD_INT 18
5401: PPUSH
5402: LD_INT 81
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 70
5416: NOT
5417: PUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 54
5428: PUSH
5429: EMPTY
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 50
5438: PUSH
5439: EMPTY
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 72
5450: AND
5451: PUSH
5452: LD_VAR 0 3
5456: PPUSH
5457: LD_INT 30
5459: PUSH
5460: LD_INT 31
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 58
5469: PUSH
5470: EMPTY
5471: LIST
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL_OW 72
5481: AND
5482: IFFALSE 5559
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5484: LD_VAR 0 5
5488: PPUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 50
5504: PUSH
5505: EMPTY
5506: LIST
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PPUSH
5512: CALL_OW 72
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 31
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 58
5538: PUSH
5539: EMPTY
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PPUSH
5546: CALL_OW 72
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: CALL_OW 120
// end ;
5559: PPOPN 5
5561: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5562: LD_EXP 47
5566: IFFALSE 5837
5568: GO 5570
5570: DISABLE
5571: LD_INT 0
5573: PPUSH
5574: PPUSH
5575: PPUSH
// begin enable ;
5576: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: LD_INT 15
5584: PPUSH
5585: LD_INT 22
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 21
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PPUSH
5609: CALL_OW 70
5613: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5614: LD_ADDR_VAR 0 3
5618: PUSH
5619: LD_EXP 47
5623: PPUSH
5624: LD_INT 25
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PPUSH
5634: CALL_OW 72
5638: ST_TO_ADDR
// if eng then
5639: LD_VAR 0 3
5643: IFFALSE 5837
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 3
5652: PUSH
5653: LD_INT 24
5655: PUSH
5656: LD_INT 1000
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PPUSH
5667: CALL_OW 72
5671: IFFALSE 5783
// begin for i in eng do
5673: LD_ADDR_VAR 0 1
5677: PUSH
5678: LD_VAR 0 3
5682: PUSH
5683: FOR_IN
5684: IFFALSE 5779
// if IsInUnit ( i ) then
5686: LD_VAR 0 1
5690: PPUSH
5691: CALL_OW 310
5695: IFFALSE 5708
// ComExit ( i ) else
5697: LD_VAR 0 1
5701: PPUSH
5702: CALL 55129 0 1
5706: GO 5777
// if IsOk ( i ) and not HasTask ( i ) then
5708: LD_VAR 0 1
5712: PPUSH
5713: CALL_OW 302
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 314
5727: NOT
5728: AND
5729: IFFALSE 5777
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 24
5746: PUSH
5747: LD_INT 1000
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PPUSH
5758: CALL_OW 72
5762: PPUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: CALL_OW 74
5772: PPUSH
5773: CALL_OW 130
5777: GO 5683
5779: POP
5780: POP
// end else
5781: GO 5837
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_INT 30
5790: PUSH
5791: LD_INT 0
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 72
5802: IFFALSE 5837
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5804: LD_VAR 0 3
5808: PPUSH
5809: LD_VAR 0 2
5813: PPUSH
5814: LD_INT 30
5816: PUSH
5817: LD_INT 0
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 72
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 120
// end ; end_of_file
5837: PPOPN 3
5839: END
// export function Action ; var i , tmp ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
// InGameOn ;
5845: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5849: LD_INT 112
5851: PPUSH
5852: LD_INT 107
5854: PPUSH
5855: LD_INT 3
5857: PPUSH
5858: LD_INT 12
5860: NEG
5861: PPUSH
5862: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5866: LD_INT 121
5868: PPUSH
5869: LD_INT 113
5871: PPUSH
5872: CALL_OW 86
// tmp := PrepareBurlak ;
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: CALL 1244 0 0
5885: ST_TO_ADDR
// for i in tmp do
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_VAR 0 3
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5950
// begin SetDir ( i , 5 ) ;
5899: LD_VAR 0 2
5903: PPUSH
5904: LD_INT 5
5906: PPUSH
5907: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5911: LD_VAR 0 2
5915: PPUSH
5916: LD_INT 3
5918: PPUSH
5919: LD_INT 0
5921: PPUSH
5922: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5926: LD_VAR 0 2
5930: PPUSH
5931: LD_INT 121
5933: PPUSH
5934: LD_INT 111
5936: PPUSH
5937: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5941: LD_INT 28
5943: PPUSH
5944: CALL_OW 67
// end ;
5948: GO 5896
5950: POP
5951: POP
// CenterOnUnits ( Kurin ) ;
5952: LD_EXP 38
5956: PPUSH
5957: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5961: LD_EXP 34
5965: PPUSH
5966: LD_EXP 38
5970: PPUSH
5971: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5975: LD_INT 35
5977: PPUSH
5978: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5982: LD_EXP 34
5986: PPUSH
5987: LD_EXP 38
5991: PPUSH
5992: CALL_OW 296
5996: PUSH
5997: LD_INT 6
5999: LESS
6000: IFFALSE 5975
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6002: LD_EXP 34
6006: PUSH
6007: LD_EXP 35
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PPUSH
6016: LD_EXP 38
6020: PPUSH
6021: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_VAR 0 3
6034: PUSH
6035: LD_EXP 34
6039: PUSH
6040: LD_EXP 35
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: DIFF
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6117
// if GetClass ( i ) = class_soldier then
6053: LD_VAR 0 2
6057: PPUSH
6058: CALL_OW 257
6062: PUSH
6063: LD_INT 1
6065: EQUAL
6066: IFFALSE 6103
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 95
6075: PUSH
6076: LD_INT 209
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: LD_INT 2
6090: MOD
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: ARRAY
6096: PPUSH
6097: CALL_OW 120
6101: GO 6115
// ComEnterUnit ( i , ru_lab ) ;
6103: LD_VAR 0 2
6107: PPUSH
6108: LD_INT 83
6110: PPUSH
6111: CALL_OW 120
6115: GO 6050
6117: POP
6118: POP
// Say ( Kurin , D1-Kur-1 ) ;
6119: LD_EXP 38
6123: PPUSH
6124: LD_STRING D1-Kur-1
6126: PPUSH
6127: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6131: LD_EXP 34
6135: PPUSH
6136: LD_STRING D1-Bur-1
6138: PPUSH
6139: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6143: LD_INT 10
6145: PPUSH
6146: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6150: LD_EXP 38
6154: PPUSH
6155: LD_STRING D1-Kur-2
6157: PPUSH
6158: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6162: LD_EXP 39
6166: PPUSH
6167: CALL 55129 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6171: LD_EXP 39
6175: PPUSH
6176: LD_INT 115
6178: PPUSH
6179: LD_INT 108
6181: PPUSH
6182: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6186: LD_EXP 39
6190: PPUSH
6191: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6195: LD_EXP 34
6199: PPUSH
6200: LD_STRING D1-Bur-2
6202: PPUSH
6203: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6207: LD_EXP 38
6211: PPUSH
6212: LD_STRING D1-Kur-3
6214: PPUSH
6215: CALL_OW 88
// if Gnyevko then
6219: LD_EXP 35
6223: IFFALSE 6237
// Say ( Kurin , D1-Kur-3a ) ;
6225: LD_EXP 38
6229: PPUSH
6230: LD_STRING D1-Kur-3a
6232: PPUSH
6233: CALL_OW 88
// InGameOff ;
6237: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6241: LD_STRING M1
6243: PPUSH
6244: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6248: LD_INT 112
6250: PPUSH
6251: LD_INT 107
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6261: LD_INT 66
6263: PPUSH
6264: LD_INT 99
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 7
6272: NEG
6273: PPUSH
6274: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6278: LD_INT 66
6280: PPUSH
6281: LD_INT 99
6283: PPUSH
6284: LD_INT 3
6286: PPUSH
6287: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6291: LD_EXP 39
6295: PPUSH
6296: LD_INT 3
6298: PPUSH
6299: CALL_OW 235
// if Gnyevko then
6303: LD_EXP 35
6307: IFFALSE 6321
// SetSide ( Gnyevko , 3 ) ;
6309: LD_EXP 35
6313: PPUSH
6314: LD_INT 3
6316: PPUSH
6317: CALL_OW 235
// SaveForQuickRestart ;
6321: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6325: LD_EXP 38
6329: PPUSH
6330: LD_INT 71
6332: PPUSH
6333: CALL_OW 120
// wait ( 0 0$2 ) ;
6337: LD_INT 70
6339: PPUSH
6340: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6344: LD_EXP 43
6348: PUSH
6349: LD_INT 2
6351: ARRAY
6352: PPUSH
6353: CALL 55129 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6357: LD_EXP 43
6361: PUSH
6362: LD_INT 2
6364: ARRAY
6365: PPUSH
6366: LD_INT 98
6368: PPUSH
6369: LD_INT 98
6371: PPUSH
6372: CALL_OW 428
6376: PPUSH
6377: CALL_OW 180
// wait ( 0 0$12 ) ;
6381: LD_INT 420
6383: PPUSH
6384: CALL_OW 67
// kurinDontWannaTalk := true ;
6388: LD_ADDR_EXP 5
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// end ;
6396: LD_VAR 0 1
6400: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6401: LD_EXP 5
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 91
6418: PUSH
6419: LD_INT 71
6421: PUSH
6422: LD_INT 8
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PPUSH
6434: CALL_OW 69
6438: AND
6439: IFFALSE 6626
6441: GO 6443
6443: DISABLE
6444: LD_INT 0
6446: PPUSH
6447: PPUSH
// begin enable ;
6448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_INT 22
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 91
6466: PUSH
6467: LD_INT 71
6469: PUSH
6470: LD_INT 14
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 69
6486: ST_TO_ADDR
// InGameOn ;
6487: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6491: LD_INT 116
6493: PPUSH
6494: LD_INT 107
6496: PPUSH
6497: LD_INT 3
6499: PPUSH
6500: LD_INT 3
6502: PPUSH
6503: CALL_OW 330
// ComExit ( Kurin ) ;
6507: LD_EXP 38
6511: PPUSH
6512: CALL 55129 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6516: LD_EXP 38
6520: PPUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 1
6528: ARRAY
6529: PPUSH
6530: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6534: LD_EXP 38
6538: PPUSH
6539: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6543: LD_VAR 0 2
6547: PPUSH
6548: LD_INT 87
6550: PPUSH
6551: LD_INT 99
6553: PPUSH
6554: CALL_OW 111
// if kirovHasTank then
6558: LD_EXP 6
6562: IFFALSE 6578
// Say ( Kurin , D1a-Kur-1a ) else
6564: LD_EXP 38
6568: PPUSH
6569: LD_STRING D1a-Kur-1a
6571: PPUSH
6572: CALL_OW 88
6576: GO 6590
// Say ( Kurin , D1a-Kur-1 ) ;
6578: LD_EXP 38
6582: PPUSH
6583: LD_STRING D1a-Kur-1
6585: PPUSH
6586: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6590: LD_EXP 38
6594: PPUSH
6595: LD_INT 71
6597: PPUSH
6598: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6602: LD_INT 116
6604: PPUSH
6605: LD_INT 107
6607: PPUSH
6608: LD_INT 3
6610: PPUSH
6611: CALL_OW 331
// wait ( 0 0$3 ) ;
6615: LD_INT 105
6617: PPUSH
6618: CALL_OW 67
// InGameOff ;
6622: CALL_OW 9
// end ;
6626: PPOPN 2
6628: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6629: LD_INT 22
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 95
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 69
6657: PUSH
6658: LD_EXP 7
6662: AND
6663: IFFALSE 7002
6665: GO 6667
6667: DISABLE
6668: LD_INT 0
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
// begin enable ;
6675: ENABLE
// blockNorth := false ;
6676: LD_ADDR_EXP 7
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// InGameOn ;
6684: CALL_OW 8
// DialogueOn ;
6688: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6692: LD_ADDR_VAR 0 2
6696: PUSH
6697: LD_INT 22
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 95
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6726: LD_EXP 39
6730: PUSH
6731: LD_VAR 0 2
6735: IN
6736: PUSH
6737: LD_EXP 39
6741: PPUSH
6742: CALL_OW 302
6746: AND
6747: IFFALSE 6763
// Say ( Kovalyuk , D1b-Kov-1 ) else
6749: LD_EXP 39
6753: PPUSH
6754: LD_STRING D1b-Kov-1
6756: PPUSH
6757: CALL_OW 88
6761: GO 6798
// if Burlak in tmp and IsOk ( Burlak ) then
6763: LD_EXP 34
6767: PUSH
6768: LD_VAR 0 2
6772: IN
6773: PUSH
6774: LD_EXP 34
6778: PPUSH
6779: CALL_OW 302
6783: AND
6784: IFFALSE 6798
// Say ( Burlak , D1b-Bur-1 ) ;
6786: LD_EXP 34
6790: PPUSH
6791: LD_STRING D1b-Bur-1
6793: PPUSH
6794: CALL_OW 88
// DialogueOff ;
6798: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6802: LD_INT 22
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 3
6814: PUSH
6815: LD_INT 21
6817: PUSH
6818: LD_INT 3
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PPUSH
6838: CALL_OW 141
// for i in tmp do
6842: LD_ADDR_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: FOR_IN
6853: IFFALSE 6981
// begin d := rand ( 2 , 3 ) ;
6855: LD_ADDR_VAR 0 5
6859: PUSH
6860: LD_INT 2
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: CALL_OW 12
6870: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: LD_VAR 0 1
6880: PPUSH
6881: CALL_OW 250
6885: PPUSH
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_INT 6
6893: PPUSH
6894: CALL_OW 272
6898: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6899: LD_ADDR_VAR 0 4
6903: PUSH
6904: LD_VAR 0 1
6908: PPUSH
6909: CALL_OW 251
6913: PPUSH
6914: LD_VAR 0 5
6918: PPUSH
6919: LD_INT 6
6921: PPUSH
6922: CALL_OW 273
6926: ST_TO_ADDR
// if ValidHex ( x , y ) then
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_VAR 0 4
6936: PPUSH
6937: CALL_OW 488
6941: IFFALSE 6964
// ComMoveXY ( i , x , y ) else
6943: LD_VAR 0 1
6947: PPUSH
6948: LD_VAR 0 3
6952: PPUSH
6953: LD_VAR 0 4
6957: PPUSH
6958: CALL_OW 111
6962: GO 6979
// ComMoveXY ( i , 79 , 85 ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_INT 79
6971: PPUSH
6972: LD_INT 85
6974: PPUSH
6975: CALL_OW 111
// end ;
6979: GO 6852
6981: POP
6982: POP
// wait ( 0 0$5 ) ;
6983: LD_INT 175
6985: PPUSH
6986: CALL_OW 67
// InGameOff ;
6990: CALL_OW 9
// blockNorth := true ;
6994: LD_ADDR_EXP 7
6998: PUSH
6999: LD_INT 1
7001: ST_TO_ADDR
// end ;
7002: PPOPN 5
7004: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7005: LD_EXP 44
7009: PPUSH
7010: LD_INT 101
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PPUSH
7020: CALL_OW 72
7024: PUSH
7025: LD_EXP 4
7029: NOT
7030: AND
7031: IFFALSE 7433
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7043: LD_ADDR_VAR 0 5
7047: PUSH
7048: LD_EXP 44
7052: PPUSH
7053: LD_EXP 34
7057: PPUSH
7058: CALL_OW 74
7062: ST_TO_ADDR
// InGameOn ;
7063: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7067: LD_VAR 0 5
7071: PPUSH
7072: CALL_OW 250
7076: PPUSH
7077: LD_VAR 0 5
7081: PPUSH
7082: CALL_OW 251
7086: PPUSH
7087: LD_INT 3
7089: PPUSH
7090: LD_INT 6
7092: PPUSH
7093: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7097: LD_VAR 0 5
7101: PPUSH
7102: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7106: LD_VAR 0 5
7110: PPUSH
7111: LD_EXP 34
7115: PPUSH
7116: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7120: LD_VAR 0 5
7124: PPUSH
7125: LD_STRING D2-RSol1-1
7127: PPUSH
7128: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 5
7141: PPUSH
7142: CALL_OW 250
7146: PPUSH
7147: LD_VAR 0 5
7151: PPUSH
7152: CALL_OW 254
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: CALL_OW 272
7164: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7165: LD_ADDR_VAR 0 4
7169: PUSH
7170: LD_VAR 0 5
7174: PPUSH
7175: CALL_OW 251
7179: PPUSH
7180: LD_VAR 0 5
7184: PPUSH
7185: CALL_OW 254
7189: PPUSH
7190: LD_INT 3
7192: PPUSH
7193: CALL_OW 273
7197: ST_TO_ADDR
// if ValidHex ( x , y ) then
7198: LD_VAR 0 3
7202: PPUSH
7203: LD_VAR 0 4
7207: PPUSH
7208: CALL_OW 488
7212: IFFALSE 7244
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7214: LD_EXP 35
7218: PUSH
7219: LD_EXP 39
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: LD_VAR 0 4
7237: PPUSH
7238: CALL_OW 111
7242: GO 7267
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7244: LD_EXP 35
7248: PUSH
7249: LD_EXP 39
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7267: LD_EXP 34
7271: PPUSH
7272: LD_VAR 0 5
7276: PPUSH
7277: CALL_OW 112
// p := 0 ;
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7289: LD_INT 35
7291: PPUSH
7292: CALL_OW 67
// p := p + 1 ;
7296: LD_ADDR_VAR 0 2
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_INT 1
7308: PLUS
7309: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 10
7317: GREATER
7318: PUSH
7319: LD_EXP 34
7323: PPUSH
7324: LD_VAR 0 5
7328: PPUSH
7329: CALL_OW 296
7333: PUSH
7334: LD_INT 6
7336: LESS
7337: OR
7338: IFFALSE 7289
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7340: LD_EXP 34
7344: PUSH
7345: LD_EXP 35
7349: PUSH
7350: LD_EXP 39
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: PPUSH
7360: LD_VAR 0 5
7364: PPUSH
7365: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7369: LD_EXP 34
7373: PPUSH
7374: LD_STRING D2-Bur-1
7376: PPUSH
7377: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7381: LD_VAR 0 5
7385: PPUSH
7386: LD_STRING D2-RSol1-2
7388: PPUSH
7389: CALL_OW 88
// ComHold ( nearestGuard ) ;
7393: LD_VAR 0 5
7397: PPUSH
7398: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7402: LD_VAR 0 5
7406: PPUSH
7407: CALL_OW 250
7411: PPUSH
7412: LD_VAR 0 5
7416: PPUSH
7417: CALL_OW 251
7421: PPUSH
7422: LD_INT 3
7424: PPUSH
7425: CALL_OW 331
// InGameOff ;
7429: CALL_OW 9
// end ;
7433: PPOPN 5
7435: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7436: LD_EXP 34
7440: PPUSH
7441: LD_EXP 40
7445: PPUSH
7446: CALL_OW 296
7450: PUSH
7451: LD_INT 10
7453: LESS
7454: PUSH
7455: LD_INT 3
7457: PPUSH
7458: LD_EXP 40
7462: PPUSH
7463: CALL_OW 292
7467: AND
7468: IFFALSE 7824
7470: GO 7472
7472: DISABLE
7473: LD_INT 0
7475: PPUSH
// begin InGameOn ;
7476: CALL_OW 8
// beriaVisited := true ;
7480: LD_ADDR_EXP 4
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7488: LD_EXP 34
7492: PPUSH
7493: LD_EXP 40
7497: PPUSH
7498: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7502: LD_EXP 35
7506: PUSH
7507: LD_EXP 39
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: LD_INT 68
7518: PPUSH
7519: LD_INT 99
7521: PPUSH
7522: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7526: LD_EXP 40
7530: PPUSH
7531: LD_EXP 34
7535: PPUSH
7536: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7540: LD_EXP 40
7544: PPUSH
7545: LD_STRING D2-Pla-2
7547: PPUSH
7548: CALL_OW 88
// p := 0 ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7560: LD_INT 35
7562: PPUSH
7563: CALL_OW 67
// p := p + 1 ;
7567: LD_ADDR_VAR 0 1
7571: PUSH
7572: LD_VAR 0 1
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7581: LD_EXP 34
7585: PPUSH
7586: LD_EXP 40
7590: PPUSH
7591: CALL_OW 296
7595: PUSH
7596: LD_INT 6
7598: LESS
7599: PUSH
7600: LD_VAR 0 1
7604: PUSH
7605: LD_INT 8
7607: GREATER
7608: OR
7609: IFFALSE 7560
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7611: LD_EXP 34
7615: PUSH
7616: LD_EXP 35
7620: PUSH
7621: LD_EXP 39
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: PPUSH
7631: LD_EXP 40
7635: PPUSH
7636: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7640: LD_EXP 34
7644: PPUSH
7645: LD_STRING D2-Bur-2
7647: PPUSH
7648: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7652: LD_INT 6
7654: PPUSH
7655: LD_INT 3
7657: PPUSH
7658: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7662: LD_EXP 40
7666: PPUSH
7667: LD_STRING D2-Pla-3
7669: PPUSH
7670: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7674: LD_EXP 34
7678: PPUSH
7679: LD_STRING D2-Bur-3
7681: PPUSH
7682: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7686: LD_EXP 40
7690: PPUSH
7691: LD_STRING D2-Pla-4
7693: PPUSH
7694: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7698: LD_EXP 34
7702: PPUSH
7703: LD_STRING D2-Bur-4
7705: PPUSH
7706: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7710: LD_EXP 40
7714: PPUSH
7715: LD_STRING D2-Pla-5
7717: PPUSH
7718: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7722: LD_INT 1
7724: PUSH
7725: LD_INT 2
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: LD_INT 4
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL 7827 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7744: LD_EXP 40
7748: PPUSH
7749: LD_STRING D3-Pla-1
7751: PPUSH
7752: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7756: LD_EXP 34
7760: PPUSH
7761: LD_STRING D3-Bur-1
7763: PPUSH
7764: CALL_OW 88
// InGameOff ;
7768: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7772: LD_STRING M2a
7774: PPUSH
7775: CALL_OW 337
// SetSide ( beria , 3 ) ;
7779: LD_INT 106
7781: PPUSH
7782: LD_INT 3
7784: PPUSH
7785: CALL_OW 235
// if not Gnyevko then
7789: LD_EXP 35
7793: NOT
7794: IFFALSE 7815
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7796: LD_INT 106
7798: PPUSH
7799: CALL_OW 313
7803: PUSH
7804: LD_INT 1
7806: ARRAY
7807: PPUSH
7808: LD_INT 3
7810: PPUSH
7811: CALL_OW 235
// ComFree ( Platonov ) ;
7815: LD_EXP 40
7819: PPUSH
7820: CALL_OW 139
// end ;
7824: PPOPN 1
7826: END
// function AskPlatonov ( questions ) ; var q ; begin
7827: LD_INT 0
7829: PPUSH
7830: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7831: LD_ADDR_VAR 0 3
7835: PUSH
7836: LD_STRING QMoreInfo
7838: PPUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 98
7848: ST_TO_ADDR
// case q of 1 :
7849: LD_VAR 0 3
7853: PUSH
7854: LD_INT 1
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7889
7862: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7863: LD_EXP 34
7867: PPUSH
7868: LD_STRING D2a-Bur-1
7870: PPUSH
7871: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7875: LD_EXP 40
7879: PPUSH
7880: LD_STRING D2a-Pla-1
7882: PPUSH
7883: CALL_OW 88
// end ; 2 :
7887: GO 7960
7889: LD_INT 2
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 7924
7897: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7898: LD_EXP 34
7902: PPUSH
7903: LD_STRING D2b-Bur-1
7905: PPUSH
7906: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7910: LD_EXP 40
7914: PPUSH
7915: LD_STRING D2b-Pla-1
7917: PPUSH
7918: CALL_OW 88
// end ; 3 :
7922: GO 7960
7924: LD_INT 3
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7959
7932: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7933: LD_EXP 34
7937: PPUSH
7938: LD_STRING D2c-Bur-1
7940: PPUSH
7941: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7945: LD_EXP 40
7949: PPUSH
7950: LD_STRING D2c-Pla-1
7952: PPUSH
7953: CALL_OW 88
// end ; end ;
7957: GO 7960
7959: POP
// if q < 4 and questions > 2 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 4
7967: LESS
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: LD_INT 2
7976: GREATER
7977: AND
7978: IFFALSE 7995
// AskPlatonov ( questions diff q ) ;
7980: LD_VAR 0 1
7984: PUSH
7985: LD_VAR 0 3
7989: DIFF
7990: PPUSH
7991: CALL 7827 0 1
// end ;
7995: LD_VAR 0 2
7999: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8000: LD_INT 0
8002: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8003: LD_EXP 40
8007: PPUSH
8008: LD_VAR 0 1
8012: PPUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8022: LD_INT 35
8024: PPUSH
8025: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8029: LD_EXP 40
8033: PPUSH
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL_OW 297
8048: PUSH
8049: LD_INT 5
8051: LESS
8052: PUSH
8053: LD_VAR 0 1
8057: PPUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 283
8067: PUSH
8068: LD_INT 1
8070: EQUAL
8071: AND
8072: IFFALSE 8022
// ComStop ( Platonov ) ;
8074: LD_EXP 40
8078: PPUSH
8079: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8083: LD_EXP 40
8087: PPUSH
8088: LD_STRING D4-Pla-1
8090: PPUSH
8091: CALL_OW 88
// end ;
8095: LD_VAR 0 3
8099: RET
// every 0 0$2 trigger hasLab do
8100: LD_EXP 9
8104: IFFALSE 8168
8106: GO 8108
8108: DISABLE
// begin DialogueOn ;
8109: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8113: LD_EXP 34
8117: PPUSH
8118: LD_STRING D5a-Bur-1
8120: PPUSH
8121: CALL_OW 88
// if hasWorkshop then
8125: LD_EXP 10
8129: IFFALSE 8145
// Say ( Platonov , D5a-Pla-1 ) else
8131: LD_EXP 40
8135: PPUSH
8136: LD_STRING D5a-Pla-1
8138: PPUSH
8139: CALL_OW 88
8143: GO 8157
// Say ( Platonov , D5a-Pla-1a ) ;
8145: LD_EXP 40
8149: PPUSH
8150: LD_STRING D5a-Pla-1a
8152: PPUSH
8153: CALL_OW 88
// DialogueOff ;
8157: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8161: LD_STRING M2b
8163: PPUSH
8164: CALL_OW 337
// end ;
8168: END
// every 0 0$2 trigger hasWorkshop do
8169: LD_EXP 10
8173: IFFALSE 8237
8175: GO 8177
8177: DISABLE
// begin DialogueOn ;
8178: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8182: LD_EXP 34
8186: PPUSH
8187: LD_STRING D5b-Bur-1
8189: PPUSH
8190: CALL_OW 88
// if hasLab then
8194: LD_EXP 9
8198: IFFALSE 8214
// Say ( Platonov , D5b-Pla-1 ) else
8200: LD_EXP 40
8204: PPUSH
8205: LD_STRING D5b-Pla-1
8207: PPUSH
8208: CALL_OW 88
8212: GO 8226
// Say ( Platonov , D5b-Pla-1a ) ;
8214: LD_EXP 40
8218: PPUSH
8219: LD_STRING D5b-Pla-1a
8221: PPUSH
8222: CALL_OW 88
// DialogueOff ;
8226: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8230: LD_STRING M2c
8232: PPUSH
8233: CALL_OW 337
// end ;
8237: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8238: LD_EXP 9
8242: PUSH
8243: LD_EXP 10
8247: AND
8248: IFFALSE 8342
8250: GO 8252
8252: DISABLE
// begin DialogueOn ;
8253: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8257: LD_INT 47
8259: PPUSH
8260: LD_INT 3
8262: PPUSH
8263: CALL_OW 321
8267: PUSH
8268: LD_INT 2
8270: EQUAL
8271: IFFALSE 8299
// begin Say ( Burlak , D7b-Bur-1 ) ;
8273: LD_EXP 34
8277: PPUSH
8278: LD_STRING D7b-Bur-1
8280: PPUSH
8281: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8285: LD_EXP 40
8289: PPUSH
8290: LD_STRING D7b-Pla-1
8292: PPUSH
8293: CALL_OW 88
// end else
8297: GO 8323
// begin Say ( Burlak , D7a-Bur-1 ) ;
8299: LD_EXP 34
8303: PPUSH
8304: LD_STRING D7a-Bur-1
8306: PPUSH
8307: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8311: LD_EXP 40
8315: PPUSH
8316: LD_STRING D7a-Pla-1
8318: PPUSH
8319: CALL_OW 88
// end ; DialogueOff ;
8323: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8327: LD_STRING M2
8329: PPUSH
8330: CALL_OW 337
// hasToBuildTank := true ;
8334: LD_ADDR_EXP 11
8338: PUSH
8339: LD_INT 1
8341: ST_TO_ADDR
// end ;
8342: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8343: LD_EXP 4
8347: PUSH
8348: LD_EXP 9
8352: NOT
8353: PUSH
8354: LD_EXP 10
8358: NOT
8359: OR
8360: PUSH
8361: LD_EXP 11
8365: OR
8366: AND
8367: PUSH
8368: LD_INT 22
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 91
8383: PUSH
8384: LD_INT 106
8386: PUSH
8387: LD_INT 32
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 69
8407: AND
8408: IFFALSE 8517
8410: GO 8412
8412: DISABLE
8413: LD_INT 0
8415: PPUSH
// begin enable ;
8416: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8417: LD_ADDR_VAR 0 1
8421: PUSH
8422: LD_INT 22
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 91
8437: PUSH
8438: LD_INT 106
8440: PUSH
8441: LD_INT 32
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: ST_TO_ADDR
// InGameOn ;
8462: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 1
8473: ARRAY
8474: PPUSH
8475: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8479: LD_VAR 0 1
8483: PPUSH
8484: LD_INT 66
8486: PPUSH
8487: LD_INT 99
8489: PPUSH
8490: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8494: LD_EXP 40
8498: PPUSH
8499: LD_STRING D8-Pla-1
8501: PPUSH
8502: CALL_OW 88
// wait ( 0 0$3 ) ;
8506: LD_INT 105
8508: PPUSH
8509: CALL_OW 67
// InGameOff ;
8513: CALL_OW 9
// end ;
8517: PPOPN 1
8519: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8520: LD_INT 21
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 23
8535: PUSH
8536: LD_INT 3
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: LD_INT 30
8548: PUSH
8549: LD_INT 4
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 30
8558: PUSH
8559: LD_INT 31
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 70
8580: PUSH
8581: LD_EXP 31
8585: NOT
8586: AND
8587: IFFALSE 8819
8589: GO 8591
8591: DISABLE
8592: LD_INT 0
8594: PPUSH
// begin enable ;
8595: ENABLE
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8596: LD_ADDR_VAR 0 1
8600: PUSH
8601: LD_INT 21
8603: PPUSH
8604: LD_INT 22
8606: PUSH
8607: LD_INT 3
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 23
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 2
8626: PUSH
8627: LD_INT 30
8629: PUSH
8630: LD_INT 4
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 30
8639: PUSH
8640: LD_INT 31
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 70
8661: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
8662: LD_EXP 40
8666: PPUSH
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
8676: LD_INT 35
8678: PPUSH
8679: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
8683: LD_EXP 40
8687: PPUSH
8688: LD_VAR 0 1
8692: PPUSH
8693: CALL_OW 296
8697: PUSH
8698: LD_INT 6
8700: LESS
8701: IFFALSE 8676
// InGameOn ;
8703: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
8707: LD_EXP 40
8711: PPUSH
8712: LD_VAR 0 1
8716: PPUSH
8717: CALL_OW 119
// Say ( Platonov , D6-Pla-1 ) ;
8721: LD_EXP 40
8725: PPUSH
8726: LD_STRING D6-Pla-1
8728: PPUSH
8729: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8733: LD_EXP 34
8737: PPUSH
8738: LD_STRING D6-Bur-1
8740: PPUSH
8741: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8745: LD_VAR 0 1
8749: PUSH
8750: LD_INT 1
8752: ARRAY
8753: PPUSH
8754: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8758: LD_VAR 0 1
8762: PUSH
8763: LD_INT 1
8765: ARRAY
8766: PPUSH
8767: CALL_OW 266
8771: PUSH
8772: LD_INT 31
8774: EQUAL
8775: IFFALSE 8797
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8777: LD_INT 106
8779: PPUSH
8780: CALL_OW 274
8784: PPUSH
8785: LD_INT 1
8787: PPUSH
8788: LD_INT 10
8790: PPUSH
8791: CALL_OW 276
8795: GO 8815
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8797: LD_INT 106
8799: PPUSH
8800: CALL_OW 274
8804: PPUSH
8805: LD_INT 1
8807: PPUSH
8808: LD_INT 30
8810: PPUSH
8811: CALL_OW 276
// InGameOff ;
8815: CALL_OW 9
// end ;
8819: PPOPN 1
8821: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8822: LD_EXP 4
8826: PUSH
8827: LD_INT 21
8829: PPUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 3
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 23
8842: PUSH
8843: LD_INT 3
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: LD_INT 21
8852: PUSH
8853: LD_INT 3
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: PPUSH
8865: CALL_OW 71
8869: AND
8870: IFFALSE 9168
8872: GO 8874
8874: DISABLE
8875: LD_INT 0
8877: PPUSH
8878: PPUSH
// begin enable ;
8879: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8880: LD_ADDR_VAR 0 1
8884: PUSH
8885: LD_INT 21
8887: PPUSH
8888: LD_INT 22
8890: PUSH
8891: LD_INT 3
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 23
8900: PUSH
8901: LD_INT 3
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 21
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: PPUSH
8923: CALL_OW 71
8927: PUSH
8928: LD_INT 1
8930: ARRAY
8931: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
8932: LD_EXP 40
8936: PPUSH
8937: LD_VAR 0 1
8941: PPUSH
8942: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
8946: LD_INT 35
8948: PPUSH
8949: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
8953: LD_EXP 40
8957: PPUSH
8958: LD_VAR 0 1
8962: PPUSH
8963: CALL_OW 296
8967: PUSH
8968: LD_INT 6
8970: LESS
8971: IFFALSE 8946
// InGameOn ;
8973: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
8977: LD_EXP 40
8981: PPUSH
8982: LD_VAR 0 1
8986: PPUSH
8987: CALL_OW 119
// Say ( Platonov , DPlatAngry ) ;
8991: LD_EXP 40
8995: PPUSH
8996: LD_STRING DPlatAngry
8998: PPUSH
8999: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9003: LD_EXP 34
9007: PPUSH
9008: LD_STRING D6-Bur-1
9010: PPUSH
9011: CALL_OW 88
// RemoveUnit ( tmp ) ;
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 64
// InGameOff ;
9024: CALL_OW 9
// amount := 0 ;
9028: LD_ADDR_VAR 0 2
9032: PUSH
9033: LD_INT 0
9035: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
9036: LD_VAR 0 1
9040: PPUSH
9041: CALL_OW 266
9045: PUSH
9046: LD_INT 31
9048: DOUBLE
9049: EQUAL
9050: IFTRUE 9054
9052: GO 9065
9054: POP
// amount := 10 ; b_lab :
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_INT 10
9062: ST_TO_ADDR
9063: GO 9142
9065: LD_INT 6
9067: DOUBLE
9068: EQUAL
9069: IFTRUE 9073
9071: GO 9084
9073: POP
// amount := 20 ; b_armoury :
9074: LD_ADDR_VAR 0 2
9078: PUSH
9079: LD_INT 20
9081: ST_TO_ADDR
9082: GO 9142
9084: LD_INT 4
9086: DOUBLE
9087: EQUAL
9088: IFTRUE 9092
9090: GO 9103
9092: POP
// amount := 30 ; b_workshop :
9093: LD_ADDR_VAR 0 2
9097: PUSH
9098: LD_INT 30
9100: ST_TO_ADDR
9101: GO 9142
9103: LD_INT 2
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9122
9111: POP
// amount := 40 ; b_oil_power :
9112: LD_ADDR_VAR 0 2
9116: PUSH
9117: LD_INT 40
9119: ST_TO_ADDR
9120: GO 9142
9122: LD_INT 26
9124: DOUBLE
9125: EQUAL
9126: IFTRUE 9130
9128: GO 9141
9130: POP
// amount := 20 ; end ;
9131: LD_ADDR_VAR 0 2
9135: PUSH
9136: LD_INT 20
9138: ST_TO_ADDR
9139: GO 9142
9141: POP
// if amount then
9142: LD_VAR 0 2
9146: IFFALSE 9168
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9148: LD_INT 106
9150: PPUSH
9151: CALL_OW 274
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: LD_VAR 0 2
9163: PPUSH
9164: CALL_OW 276
// end ;
9168: PPOPN 2
9170: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do
9171: LD_INT 22
9173: PUSH
9174: LD_INT 3
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 92
9183: PUSH
9184: LD_INT 112
9186: PUSH
9187: LD_INT 155
9189: PUSH
9190: LD_INT 8
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: PUSH
9208: LD_INT 2
9210: LESS
9211: PUSH
9212: LD_EXP 34
9216: PPUSH
9217: LD_INT 112
9219: PPUSH
9220: LD_INT 155
9222: PPUSH
9223: CALL_OW 297
9227: PUSH
9228: LD_INT 8
9230: LESS
9231: AND
9232: IFFALSE 9445
9234: GO 9236
9236: DISABLE
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9237: LD_INT 112
9239: PPUSH
9240: LD_INT 155
9242: PPUSH
9243: LD_INT 3
9245: PPUSH
9246: LD_INT 4
9248: NEG
9249: PPUSH
9250: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9254: LD_INT 1
9256: PPUSH
9257: LD_EXP 34
9261: PPUSH
9262: CALL_OW 471
// uc_side := 1 ;
9266: LD_ADDR_OWVAR 20
9270: PUSH
9271: LD_INT 1
9273: ST_TO_ADDR
// uc_nation := 1 ;
9274: LD_ADDR_OWVAR 21
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9282: LD_ADDR_EXP 49
9286: PUSH
9287: LD_STRING Dickens
9289: PPUSH
9290: CALL_OW 25
9294: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9295: LD_EXP 49
9299: PPUSH
9300: LD_INT 112
9302: PPUSH
9303: LD_INT 155
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 48
// wait ( 0 0$2 ) ;
9313: LD_INT 70
9315: PPUSH
9316: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9320: LD_EXP 49
9324: PPUSH
9325: LD_EXP 34
9329: PPUSH
9330: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9334: LD_EXP 49
9338: PPUSH
9339: LD_STRING DUsSpawnSol
9341: PPUSH
9342: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9346: LD_INT 1
9348: PPUSH
9349: LD_EXP 34
9353: PPUSH
9354: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9358: LD_INT 112
9360: PPUSH
9361: LD_INT 155
9363: PPUSH
9364: LD_INT 3
9366: PPUSH
9367: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9371: LD_EXP 49
9375: PPUSH
9376: LD_INT 77
9378: PPUSH
9379: LD_INT 152
9381: PPUSH
9382: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9386: LD_INT 35
9388: PPUSH
9389: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9393: LD_EXP 49
9397: PPUSH
9398: CALL_OW 302
9402: NOT
9403: PUSH
9404: LD_EXP 49
9408: PPUSH
9409: LD_INT 77
9411: PPUSH
9412: LD_INT 152
9414: PPUSH
9415: CALL_OW 307
9419: OR
9420: IFFALSE 9386
// if not IsOk ( Dickens ) then
9422: LD_EXP 49
9426: PPUSH
9427: CALL_OW 302
9431: NOT
9432: IFFALSE 9436
// exit ;
9434: GO 9445
// RemoveUnit ( Dickens ) ;
9436: LD_EXP 49
9440: PPUSH
9441: CALL_OW 64
// end ;
9445: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9446: LD_EXP 34
9450: PPUSH
9451: CALL_OW 256
9455: PUSH
9456: LD_INT 600
9458: LESS
9459: IFFALSE 9476
9461: GO 9463
9463: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9464: LD_EXP 34
9468: PPUSH
9469: LD_STRING DUsSpawnBur
9471: PPUSH
9472: CALL_OW 88
9476: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9477: LD_EXP 12
9481: IFFALSE 10543
9483: GO 9485
9485: DISABLE
9486: LD_INT 0
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// begin hasToBuildTank := false ;
9492: LD_ADDR_EXP 11
9496: PUSH
9497: LD_INT 0
9499: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9500: LD_ADDR_EXP 5
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9508: LD_ADDR_VAR 0 2
9512: PUSH
9513: LD_INT 22
9515: PUSH
9516: LD_INT 3
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: LD_INT 21
9525: PUSH
9526: LD_INT 2
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PPUSH
9537: CALL_OW 69
9541: ST_TO_ADDR
// InGameOn ;
9542: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9546: LD_VAR 0 2
9550: PUSH
9551: LD_INT 1
9553: ARRAY
9554: PPUSH
9555: CALL_OW 85
// wait ( 0 0$1 ) ;
9559: LD_INT 35
9561: PPUSH
9562: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9566: LD_EXP 34
9570: PPUSH
9571: LD_STRING D9-Bur-1
9573: PPUSH
9574: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9578: LD_EXP 40
9582: PPUSH
9583: LD_VAR 0 2
9587: PUSH
9588: LD_INT 1
9590: ARRAY
9591: PPUSH
9592: CALL_OW 112
// p := 0 ;
9596: LD_ADDR_VAR 0 3
9600: PUSH
9601: LD_INT 0
9603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9604: LD_INT 35
9606: PPUSH
9607: CALL_OW 67
// p := p + 1 ;
9611: LD_ADDR_VAR 0 3
9615: PUSH
9616: LD_VAR 0 3
9620: PUSH
9621: LD_INT 1
9623: PLUS
9624: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9625: LD_EXP 40
9629: PPUSH
9630: LD_VAR 0 2
9634: PUSH
9635: LD_INT 1
9637: ARRAY
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 8
9646: LESS
9647: PUSH
9648: LD_VAR 0 3
9652: PUSH
9653: LD_INT 8
9655: GREATER
9656: OR
9657: IFFALSE 9604
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_VAR 0 2
9668: PUSH
9669: LD_INT 1
9671: ARRAY
9672: PPUSH
9673: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9677: LD_EXP 40
9681: PPUSH
9682: LD_STRING D9-Pla-1
9684: PPUSH
9685: CALL_OW 88
// ComFree ( Platonov ) ;
9689: LD_EXP 40
9693: PPUSH
9694: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9698: LD_EXP 40
9702: PPUSH
9703: LD_INT 64
9705: PPUSH
9706: LD_INT 98
9708: PPUSH
9709: CALL_OW 171
// InGameOff ;
9713: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9717: LD_STRING M3
9719: PPUSH
9720: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9724: LD_EXP 41
9728: PPUSH
9729: LD_INT 70
9731: PPUSH
9732: LD_INT 108
9734: PPUSH
9735: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9739: LD_EXP 41
9743: PPUSH
9744: CALL_OW 200
// wait ( 1 ) ;
9748: LD_INT 1
9750: PPUSH
9751: CALL_OW 67
// ComExit ( Belkov ) ;
9755: LD_EXP 36
9759: PPUSH
9760: CALL 55129 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9764: LD_EXP 36
9768: PPUSH
9769: LD_INT 113
9771: PPUSH
9772: LD_INT 104
9774: PPUSH
9775: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9779: LD_EXP 36
9783: PPUSH
9784: LD_INT 116
9786: PPUSH
9787: LD_INT 108
9789: PPUSH
9790: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9794: LD_INT 35
9796: PPUSH
9797: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9801: LD_INT 22
9803: PUSH
9804: LD_INT 3
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 91
9823: PUSH
9824: LD_INT 71
9826: PUSH
9827: LD_INT 8
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: PPUSH
9840: CALL_OW 69
9844: IFFALSE 9794
// InGameOn ;
9846: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9850: LD_ADDR_VAR 0 2
9854: PUSH
9855: LD_INT 22
9857: PUSH
9858: LD_INT 3
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 21
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 91
9877: PUSH
9878: LD_INT 71
9880: PUSH
9881: LD_INT 8
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 69
9898: ST_TO_ADDR
// if belkovTeam < 3 then
9899: LD_EXP 45
9903: PUSH
9904: LD_INT 3
9906: LESS
9907: IFFALSE 9992
// begin for i := belkovTeam to 3 do
9909: LD_ADDR_VAR 0 1
9913: PUSH
9914: DOUBLE
9915: LD_EXP 45
9919: DEC
9920: ST_TO_ADDR
9921: LD_INT 3
9923: PUSH
9924: FOR_TO
9925: IFFALSE 9990
// begin un := kirovBaseSquad [ 1 ] ;
9927: LD_ADDR_VAR 0 4
9931: PUSH
9932: LD_EXP 43
9936: PUSH
9937: LD_INT 1
9939: ARRAY
9940: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9941: LD_ADDR_EXP 43
9945: PUSH
9946: LD_EXP 43
9950: PPUSH
9951: LD_INT 1
9953: PPUSH
9954: CALL_OW 3
9958: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9959: LD_ADDR_EXP 45
9963: PUSH
9964: LD_EXP 45
9968: PPUSH
9969: LD_EXP 45
9973: PUSH
9974: LD_INT 1
9976: PLUS
9977: PPUSH
9978: LD_VAR 0 4
9982: PPUSH
9983: CALL_OW 1
9987: ST_TO_ADDR
// end ;
9988: GO 9924
9990: POP
9991: POP
// end ; if Kirilenkova then
9992: LD_EXP 37
9996: IFFALSE 10020
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
9998: LD_ADDR_EXP 45
10002: PUSH
10003: LD_EXP 45
10007: PPUSH
10008: LD_EXP 37
10012: PPUSH
10013: CALL 54731 0 2
10017: ST_TO_ADDR
10018: GO 10059
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
10020: LD_ADDR_EXP 45
10024: PUSH
10025: LD_EXP 45
10029: PPUSH
10030: LD_EXP 43
10034: PPUSH
10035: LD_INT 25
10037: PUSH
10038: LD_INT 4
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PPUSH
10045: CALL_OW 72
10049: PUSH
10050: LD_INT 1
10052: ARRAY
10053: PPUSH
10054: CALL 54731 0 2
10058: ST_TO_ADDR
// ComExit ( Kurin ) ;
10059: LD_EXP 38
10063: PPUSH
10064: CALL 55129 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10068: LD_EXP 38
10072: PPUSH
10073: LD_VAR 0 2
10077: PUSH
10078: LD_INT 1
10080: ARRAY
10081: PPUSH
10082: CALL_OW 179
// wait ( 0 0$1 ) ;
10086: LD_INT 35
10088: PPUSH
10089: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 1
10100: ARRAY
10101: PPUSH
10102: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10106: LD_ADDR_VAR 0 4
10110: PUSH
10111: LD_VAR 0 2
10115: PUSH
10116: LD_INT 1
10118: ARRAY
10119: PPUSH
10120: CALL_OW 311
10124: ST_TO_ADDR
// ComExit ( un ) ;
10125: LD_VAR 0 4
10129: PPUSH
10130: CALL 55129 0 1
// wait ( 0 0$1 ) ;
10134: LD_INT 35
10136: PPUSH
10137: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10141: LD_VAR 0 4
10145: PPUSH
10146: LD_EXP 38
10150: PPUSH
10151: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10155: LD_EXP 36
10159: PPUSH
10160: LD_VAR 0 2
10164: PUSH
10165: LD_INT 1
10167: ARRAY
10168: PPUSH
10169: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10173: LD_INT 10
10175: PPUSH
10176: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10180: LD_EXP 38
10184: PPUSH
10185: LD_STRING D10-Kur-1
10187: PPUSH
10188: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10192: LD_EXP 36
10196: PPUSH
10197: LD_INT 122
10199: PPUSH
10200: LD_INT 112
10202: PPUSH
10203: CALL_OW 176
// wait ( 0 0$2 ) ;
10207: LD_INT 70
10209: PPUSH
10210: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10214: LD_EXP 36
10218: PPUSH
10219: LD_STRING D10-Bel-1
10221: PPUSH
10222: CALL_OW 88
// if belkovBrother then
10226: LD_EXP 32
10230: IFFALSE 10282
// begin Say ( Burlak , D10-Bur-1 ) ;
10232: LD_EXP 34
10236: PPUSH
10237: LD_STRING D10-Bur-1
10239: PPUSH
10240: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10244: LD_EXP 36
10248: PPUSH
10249: LD_STRING D10-Bel-2
10251: PPUSH
10252: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10256: LD_EXP 34
10260: PPUSH
10261: LD_STRING D10-Bur-2
10263: PPUSH
10264: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10268: LD_EXP 38
10272: PPUSH
10273: LD_STRING D10-Kur-2a
10275: PPUSH
10276: CALL_OW 88
// end else
10280: GO 10294
// begin Say ( Kurin , D10-Kur-2 ) end ;
10282: LD_EXP 38
10286: PPUSH
10287: LD_STRING D10-Kur-2
10289: PPUSH
10290: CALL_OW 88
// wait ( 0 0$2 ) ;
10294: LD_INT 70
10296: PPUSH
10297: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10301: LD_EXP 38
10305: PPUSH
10306: LD_STRING D10-Kur-2b
10308: PPUSH
10309: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10313: LD_VAR 0 4
10317: PPUSH
10318: LD_INT 66
10320: PPUSH
10321: LD_INT 97
10323: PPUSH
10324: CALL_OW 111
// wait ( 0 0$5 ) ;
10328: LD_INT 175
10330: PPUSH
10331: CALL_OW 67
// InGameOff ;
10335: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10339: LD_EXP 33
10343: PPUSH
10344: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10348: LD_STRING M4
10350: PPUSH
10351: CALL_OW 337
// wait ( 0 0$6 ) ;
10355: LD_INT 210
10357: PPUSH
10358: CALL_OW 67
// kurinDontWannaTalk := true ;
10362: LD_ADDR_EXP 5
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10370: LD_INT 140
10372: PPUSH
10373: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10377: LD_INT 35
10379: PPUSH
10380: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10384: LD_EXP 34
10388: PPUSH
10389: CALL_OW 310
10393: PUSH
10394: LD_EXP 34
10398: PPUSH
10399: LD_INT 106
10401: PPUSH
10402: CALL_OW 296
10406: PUSH
10407: LD_INT 12
10409: LESS
10410: OR
10411: IFFALSE 10377
// DialogueOn ;
10413: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10417: LD_EXP 40
10421: PPUSH
10422: LD_STRING D11-Pla-1
10424: PPUSH
10425: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10429: LD_EXP 34
10433: PPUSH
10434: LD_STRING D11-Bur-1
10436: PPUSH
10437: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10441: LD_INT 22
10443: PUSH
10444: LD_INT 3
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: PUSH
10470: LD_INT 1
10472: GREATER
10473: IFFALSE 10487
// Say ( Burlak , D11-Bur-1a ) ;
10475: LD_EXP 34
10479: PPUSH
10480: LD_STRING D11-Bur-1a
10482: PPUSH
10483: CALL_OW 88
// DialogueOff ;
10487: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10491: LD_ADDR_EXP 8
10495: PUSH
10496: LD_INT 160
10498: PUSH
10499: LD_INT 150
10501: PUSH
10502: LD_INT 140
10504: PUSH
10505: LD_INT 120
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: PUSH
10514: LD_OWVAR 67
10518: ARRAY
10519: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10520: LD_STRING M5
10522: PPUSH
10523: CALL_OW 337
// kirovHasTank := true ;
10527: LD_ADDR_EXP 6
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// hasToBuildTank := true ;
10535: LD_ADDR_EXP 11
10539: PUSH
10540: LD_INT 1
10542: ST_TO_ADDR
// end ;
10543: PPOPN 4
10545: END
// every 0 0$2 trigger allianceAttacked do
10546: LD_EXP 13
10550: IFFALSE 10589
10552: GO 10554
10554: DISABLE
// begin DialogueOn ;
10555: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10559: LD_EXP 38
10563: PPUSH
10564: LD_STRING DArestKur
10566: PPUSH
10567: CALL_OW 88
// dwait ( 0 0$1 ) ;
10571: LD_INT 35
10573: PPUSH
10574: CALL_OW 68
// YouLost ( SelfAttack ) ;
10578: LD_STRING SelfAttack
10580: PPUSH
10581: CALL_OW 104
// DialogueOff ;
10585: CALL_OW 7
// end ;
10589: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10590: LD_INT 22
10592: PUSH
10593: LD_INT 3
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 21
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: PUSH
10619: LD_INT 22
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 21
10631: PUSH
10632: LD_INT 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: GREATEREQUAL
10648: PUSH
10649: LD_EXP 6
10653: AND
10654: IFFALSE 10824
10656: GO 10658
10658: DISABLE
// begin hasToBuildTank := false ;
10659: LD_ADDR_EXP 11
10663: PUSH
10664: LD_INT 0
10666: ST_TO_ADDR
// blockNorth := false ;
10667: LD_ADDR_EXP 7
10671: PUSH
10672: LD_INT 0
10674: ST_TO_ADDR
// InGameOn ;
10675: CALL_OW 8
// wait ( 0 0$2 ) ;
10679: LD_INT 70
10681: PPUSH
10682: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10686: LD_INT 106
10688: PPUSH
10689: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10693: LD_EXP 40
10697: PPUSH
10698: LD_INT 65
10700: PPUSH
10701: LD_INT 97
10703: PPUSH
10704: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10708: LD_EXP 40
10712: PPUSH
10713: LD_EXP 34
10717: PPUSH
10718: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10722: LD_EXP 34
10726: PPUSH
10727: LD_STRING D12-Bur-1
10729: PPUSH
10730: CALL_OW 88
// wait ( 0 0$1 ) ;
10734: LD_INT 35
10736: PPUSH
10737: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10741: LD_EXP 40
10745: PPUSH
10746: LD_STRING D12-Pla-1
10748: PPUSH
10749: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10753: LD_EXP 34
10757: PPUSH
10758: LD_STRING D12-Bur-2
10760: PPUSH
10761: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10765: LD_EXP 40
10769: PPUSH
10770: LD_STRING D12-Pla-2
10772: PPUSH
10773: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10777: LD_EXP 34
10781: PPUSH
10782: LD_STRING D12-Bur-3
10784: PPUSH
10785: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10789: LD_EXP 40
10793: PPUSH
10794: LD_STRING D12-Pla-3
10796: PPUSH
10797: CALL_OW 88
// hasAllTanks := true ;
10801: LD_ADDR_EXP 14
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// InGameOff ;
10809: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10813: LD_STRING M6
10815: PPUSH
10816: CALL_OW 337
// PrepareAmerican ;
10820: CALL 3961 0 0
// end ;
10824: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10825: LD_EXP 17
10829: IFFALSE 12593
10831: GO 10833
10833: DISABLE
10834: LD_INT 0
10836: PPUSH
10837: PPUSH
10838: PPUSH
10839: PPUSH
10840: PPUSH
10841: PPUSH
10842: PPUSH
// begin PrepareAmericanTrap ;
10843: CALL 4761 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10847: LD_ADDR_VAR 0 2
10851: PUSH
10852: LD_EXP 48
10856: PPUSH
10857: LD_INT 26
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PPUSH
10867: CALL_OW 72
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
10876: LD_INT 22
10878: PUSH
10879: LD_INT 3
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 3
10888: PUSH
10889: LD_INT 21
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 60
10905: PUSH
10906: EMPTY
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: PPUSH
10914: CALL_OW 69
10918: PPUSH
10919: CALL_OW 141
// InGameOn ;
10923: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10927: LD_INT 69
10929: PPUSH
10930: LD_INT 22
10932: PPUSH
10933: CALL_OW 86
// wait ( 0 0$1 ) ;
10937: LD_INT 35
10939: PPUSH
10940: CALL_OW 67
// DialogueOn ;
10944: CALL_OW 6
// game_speed := 4 ;
10948: LD_ADDR_OWVAR 65
10952: PUSH
10953: LD_INT 4
10955: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
10956: LD_VAR 0 2
10960: PPUSH
10961: LD_STRING D13-Sol1-1
10963: PPUSH
10964: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
10968: LD_EXP 36
10972: PPUSH
10973: LD_STRING D13-Bel-1
10975: PPUSH
10976: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10980: LD_EXP 38
10984: PPUSH
10985: LD_STRING D13-Kur-1
10987: PPUSH
10988: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10992: LD_INT 10
10994: PPUSH
10995: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10999: LD_EXP 36
11003: PPUSH
11004: LD_STRING D13-Bel-2
11006: PPUSH
11007: CALL_OW 94
// DialogueOff ;
11011: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
11015: LD_EXP 36
11019: PPUSH
11020: LD_INT 76
11022: PPUSH
11023: LD_INT 20
11025: PPUSH
11026: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
11030: LD_EXP 45
11034: PPUSH
11035: LD_INT 72
11037: PPUSH
11038: LD_INT 20
11040: PPUSH
11041: CALL_OW 111
// wait ( 0 0$2 ) ;
11045: LD_INT 70
11047: PPUSH
11048: CALL_OW 67
// for i in usTrapForces do
11052: LD_ADDR_VAR 0 1
11056: PUSH
11057: LD_EXP 48
11061: PUSH
11062: FOR_IN
11063: IFFALSE 11096
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11065: LD_VAR 0 1
11069: PPUSH
11070: LD_INT 7
11072: PPUSH
11073: LD_INT 0
11075: PPUSH
11076: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11080: LD_VAR 0 1
11084: PPUSH
11085: LD_EXP 36
11089: PPUSH
11090: CALL_OW 119
// end ;
11094: GO 11062
11096: POP
11097: POP
// wait ( 0 0$0.3 ) ;
11098: LD_INT 10
11100: PPUSH
11101: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11105: LD_EXP 48
11109: PPUSH
11110: LD_INT 65
11112: PPUSH
11113: LD_INT 18
11115: PPUSH
11116: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11120: LD_INT 70
11122: PPUSH
11123: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11127: LD_EXP 48
11131: PPUSH
11132: LD_INT 101
11134: PUSH
11135: LD_INT 3
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PPUSH
11142: CALL_OW 72
11146: PUSH
11147: LD_INT 3
11149: GREATER
11150: IFFALSE 11120
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11152: LD_INT 65
11154: PPUSH
11155: LD_INT 18
11157: PPUSH
11158: LD_INT 3
11160: PPUSH
11161: LD_INT 26
11163: NEG
11164: PPUSH
11165: CALL_OW 330
// DialogueOn ;
11169: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11173: LD_VAR 0 2
11177: PPUSH
11178: LD_STRING D14-Sol1-1
11180: PPUSH
11181: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11185: LD_EXP 36
11189: PPUSH
11190: LD_STRING D14-Bel-1
11192: PPUSH
11193: CALL_OW 88
// DialogueOff ;
11197: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11201: LD_INT 65
11203: PPUSH
11204: LD_INT 18
11206: PPUSH
11207: LD_INT 3
11209: PPUSH
11210: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11214: LD_EXP 45
11218: PPUSH
11219: LD_INT 31
11221: PPUSH
11222: LD_INT 9
11224: PPUSH
11225: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11229: LD_EXP 48
11233: PPUSH
11234: LD_INT 50
11236: PPUSH
11237: LD_INT 16
11239: PPUSH
11240: CALL_OW 174
// wait ( 0 0$2 ) ;
11244: LD_INT 70
11246: PPUSH
11247: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11251: LD_ADDR_VAR 0 6
11255: PUSH
11256: LD_EXP 36
11260: PPUSH
11261: CALL_OW 310
11265: ST_TO_ADDR
// if not belkovTank then
11266: LD_VAR 0 6
11270: NOT
11271: IFFALSE 11311
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11273: LD_ADDR_VAR 0 6
11277: PUSH
11278: LD_INT 22
11280: PUSH
11281: LD_INT 6
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 21
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PPUSH
11302: CALL_OW 69
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11311: LD_EXP 36
11315: PPUSH
11316: LD_INT 58
11318: PPUSH
11319: LD_INT 21
11321: PPUSH
11322: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11326: LD_EXP 36
11330: PPUSH
11331: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11335: LD_EXP 36
11339: PPUSH
11340: LD_INT 53
11342: PPUSH
11343: LD_INT 18
11345: PPUSH
11346: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11350: LD_EXP 36
11354: PPUSH
11355: LD_INT 31
11357: PPUSH
11358: LD_INT 9
11360: PPUSH
11361: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11365: LD_INT 35
11367: PPUSH
11368: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11372: LD_ADDR_VAR 0 1
11376: PUSH
11377: LD_EXP 36
11381: PUSH
11382: LD_EXP 45
11386: UNION
11387: PUSH
11388: LD_VAR 0 6
11392: UNION
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11426
// if GetLives ( i ) < 800 then
11397: LD_VAR 0 1
11401: PPUSH
11402: CALL_OW 256
11406: PUSH
11407: LD_INT 800
11409: LESS
11410: IFFALSE 11424
// SetLives ( i , 800 ) ;
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_INT 800
11419: PPUSH
11420: CALL_OW 234
11424: GO 11394
11426: POP
11427: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11428: LD_EXP 36
11432: PPUSH
11433: LD_INT 31
11435: PPUSH
11436: LD_INT 9
11438: PPUSH
11439: CALL_OW 297
11443: PUSH
11444: LD_INT 4
11446: LESS
11447: IFFALSE 11365
// for i := 1 to Difficulty do
11449: LD_ADDR_VAR 0 1
11453: PUSH
11454: DOUBLE
11455: LD_INT 1
11457: DEC
11458: ST_TO_ADDR
11459: LD_OWVAR 67
11463: PUSH
11464: FOR_TO
11465: IFFALSE 11507
// if i <= belkovTeam then
11467: LD_VAR 0 1
11471: PUSH
11472: LD_EXP 45
11476: LESSEQUAL
11477: IFFALSE 11505
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11479: LD_EXP 45
11483: PUSH
11484: LD_VAR 0 1
11488: ARRAY
11489: PPUSH
11490: LD_INT 600
11492: PPUSH
11493: LD_INT 800
11495: PPUSH
11496: CALL_OW 12
11500: PPUSH
11501: CALL_OW 234
11505: GO 11464
11507: POP
11508: POP
// SetLives ( Belkov , 820 ) ;
11509: LD_EXP 36
11513: PPUSH
11514: LD_INT 820
11516: PPUSH
11517: CALL_OW 234
// InGameOff ;
11521: CALL_OW 9
// DialogueOn ;
11525: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11529: LD_EXP 36
11533: PPUSH
11534: LD_STRING D14-Bel-1a
11536: PPUSH
11537: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11541: LD_EXP 38
11545: PPUSH
11546: LD_STRING D14-Kur-1
11548: PPUSH
11549: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11553: LD_EXP 36
11557: PPUSH
11558: LD_STRING D14-Bel-2
11560: PPUSH
11561: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11565: LD_EXP 38
11569: PPUSH
11570: LD_STRING D14-Kur-2
11572: PPUSH
11573: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11577: LD_EXP 34
11581: PPUSH
11582: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11586: LD_EXP 34
11590: PPUSH
11591: LD_STRING D14a-Bur-1
11593: PPUSH
11594: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11598: LD_EXP 40
11602: PPUSH
11603: LD_STRING D14a-Pla-1
11605: PPUSH
11606: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11610: LD_EXP 34
11614: PPUSH
11615: LD_STRING D14a-Bur-2
11617: PPUSH
11618: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11622: LD_EXP 40
11626: PPUSH
11627: LD_STRING D14a-Pla-2
11629: PPUSH
11630: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11634: LD_EXP 34
11638: PPUSH
11639: LD_STRING D14a-Bur-3
11641: PPUSH
11642: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11646: LD_EXP 40
11650: PPUSH
11651: LD_STRING D14a-Pla-3
11653: PPUSH
11654: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11658: LD_EXP 34
11662: PPUSH
11663: LD_STRING D14a-Bur-4
11665: PPUSH
11666: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11670: LD_EXP 40
11674: PPUSH
11675: LD_STRING D14a-Pla-4
11677: PPUSH
11678: CALL_OW 88
// DialogueOff ;
11682: CALL_OW 7
// belkovTrapped := true ;
11686: LD_ADDR_EXP 18
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11694: LD_EXP 48
11698: PPUSH
11699: LD_INT 68
11701: PPUSH
11702: LD_INT 16
11704: PPUSH
11705: CALL_OW 111
// if belkovTank then
11709: LD_VAR 0 6
11713: IFFALSE 11752
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11715: LD_EXP 48
11719: PUSH
11720: LD_INT 1
11722: ARRAY
11723: PPUSH
11724: LD_VAR 0 6
11728: PPUSH
11729: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11733: LD_EXP 48
11737: PUSH
11738: LD_INT 1
11740: ARRAY
11741: PPUSH
11742: LD_INT 69
11744: PPUSH
11745: LD_INT 20
11747: PPUSH
11748: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11752: LD_EXP 36
11756: PPUSH
11757: LD_INT 40
11759: PPUSH
11760: LD_INT 17
11762: PPUSH
11763: CALL_OW 111
// AddComHold ( Belkov ) ;
11767: LD_EXP 36
11771: PPUSH
11772: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11776: LD_ADDR_VAR 0 3
11780: PUSH
11781: LD_INT 44
11783: PUSH
11784: LD_INT 18
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 42
11793: PUSH
11794: LD_INT 16
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 40
11803: PUSH
11804: LD_INT 15
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 44
11813: PUSH
11814: LD_INT 20
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 42
11823: PUSH
11824: LD_INT 20
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 42
11833: PUSH
11834: LD_INT 12
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 42
11843: PUSH
11844: LD_INT 8
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11860: LD_ADDR_VAR 0 1
11864: PUSH
11865: LD_EXP 45
11869: PPUSH
11870: LD_INT 25
11872: PUSH
11873: LD_INT 1
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 72
11884: PUSH
11885: FOR_IN
11886: IFFALSE 11952
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11888: LD_VAR 0 1
11892: PPUSH
11893: LD_VAR 0 3
11897: PUSH
11898: LD_INT 1
11900: ARRAY
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PUSH
11915: LD_INT 2
11917: ARRAY
11918: PPUSH
11919: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11923: LD_ADDR_VAR 0 3
11927: PUSH
11928: LD_VAR 0 3
11932: PPUSH
11933: LD_INT 1
11935: PPUSH
11936: CALL_OW 3
11940: ST_TO_ADDR
// AddComCrawl ( i ) ;
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 197
// end ;
11950: GO 11885
11952: POP
11953: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11954: LD_EXP 45
11958: PPUSH
11959: LD_INT 25
11961: PUSH
11962: LD_INT 4
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PPUSH
11969: CALL_OW 72
11973: IFFALSE 12005
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11975: LD_EXP 45
11979: PPUSH
11980: LD_INT 25
11982: PUSH
11983: LD_INT 4
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 72
11994: PPUSH
11995: LD_INT 38
11997: PPUSH
11998: LD_INT 18
12000: PPUSH
12001: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
12005: LD_ADDR_VAR 0 7
12009: PUSH
12010: LD_INT 9450
12012: PUSH
12013: LD_INT 8400
12015: PUSH
12016: LD_INT 6650
12018: PUSH
12019: LD_INT 5250
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: LD_OWVAR 67
12032: ARRAY
12033: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12034: LD_INT 35
12036: PPUSH
12037: CALL_OW 67
// timer := timer - 0 0$1 ;
12041: LD_ADDR_VAR 0 7
12045: PUSH
12046: LD_VAR 0 7
12050: PUSH
12051: LD_INT 35
12053: MINUS
12054: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12055: LD_INT 19
12057: PPUSH
12058: LD_INT 22
12060: PUSH
12061: LD_INT 3
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PPUSH
12068: CALL_OW 70
12072: IFFALSE 12082
// timer := 0 0$0 ;
12074: LD_ADDR_VAR 0 7
12078: PUSH
12079: LD_INT 0
12081: ST_TO_ADDR
// until timer <= 0 ;
12082: LD_VAR 0 7
12086: PUSH
12087: LD_INT 0
12089: LESSEQUAL
12090: IFFALSE 12034
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12092: LD_EXP 48
12096: PPUSH
12097: LD_INT 50
12099: PUSH
12100: EMPTY
12101: LIST
12102: PPUSH
12103: CALL_OW 72
12107: NOT
12108: IFFALSE 12112
// exit ;
12110: GO 12593
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12112: LD_ADDR_VAR 0 4
12116: PUSH
12117: LD_EXP 48
12121: PPUSH
12122: LD_INT 25
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 3
12134: PUSH
12135: LD_INT 54
12137: PUSH
12138: EMPTY
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 72
12153: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12154: LD_ADDR_VAR 0 5
12158: PUSH
12159: LD_EXP 48
12163: PPUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 4
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 3
12176: PUSH
12177: LD_INT 54
12179: PUSH
12180: EMPTY
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PPUSH
12191: CALL_OW 72
12195: ST_TO_ADDR
// for i in sol do
12196: LD_ADDR_VAR 0 1
12200: PUSH
12201: LD_VAR 0 4
12205: PUSH
12206: FOR_IN
12207: IFFALSE 12223
// SetTag ( i , 0 ) ;
12209: LD_VAR 0 1
12213: PPUSH
12214: LD_INT 0
12216: PPUSH
12217: CALL_OW 109
12221: GO 12206
12223: POP
12224: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12225: LD_VAR 0 5
12229: PPUSH
12230: LD_INT 60
12232: PPUSH
12233: LD_INT 8
12235: PPUSH
12236: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12240: LD_INT 22
12242: PUSH
12243: LD_INT 1
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 21
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 69
12268: IFFALSE 12309
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12270: LD_INT 22
12272: PUSH
12273: LD_INT 1
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 21
12282: PUSH
12283: LD_INT 2
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PPUSH
12294: CALL_OW 69
12298: PPUSH
12299: LD_INT 53
12301: PPUSH
12302: LD_INT 24
12304: PPUSH
12305: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12309: LD_INT 18
12311: PPUSH
12312: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12316: LD_ADDR_VAR 0 4
12320: PUSH
12321: LD_EXP 48
12325: PPUSH
12326: LD_INT 25
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 50
12338: PUSH
12339: EMPTY
12340: LIST
12341: PUSH
12342: LD_INT 3
12344: PUSH
12345: LD_INT 54
12347: PUSH
12348: EMPTY
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12365: LD_VAR 0 4
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL 52300 0 2
12377: PUSH
12378: LD_VAR 0 4
12382: EQUAL
12383: IFFALSE 12422
// begin wait ( 0 0$3 ) ;
12385: LD_INT 105
12387: PPUSH
12388: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12392: LD_VAR 0 4
12396: PPUSH
12397: LD_INT 41
12399: PPUSH
12400: LD_INT 18
12402: PPUSH
12403: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12407: LD_VAR 0 5
12411: PPUSH
12412: LD_INT 60
12414: PPUSH
12415: LD_INT 8
12417: PPUSH
12418: CALL_OW 111
// end ; for i in sol do
12422: LD_ADDR_VAR 0 1
12426: PUSH
12427: LD_VAR 0 4
12431: PUSH
12432: FOR_IN
12433: IFFALSE 12508
// if GetLives ( i ) < 800 then
12435: LD_VAR 0 1
12439: PPUSH
12440: CALL_OW 256
12444: PUSH
12445: LD_INT 800
12447: LESS
12448: IFFALSE 12479
// begin SetTag ( i , 1 ) ;
12450: LD_VAR 0 1
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12462: LD_VAR 0 1
12466: PPUSH
12467: LD_INT 60
12469: PPUSH
12470: LD_INT 8
12472: PPUSH
12473: CALL_OW 111
// end else
12477: GO 12506
// if GetLives ( i ) = 1000 then
12479: LD_VAR 0 1
12483: PPUSH
12484: CALL_OW 256
12488: PUSH
12489: LD_INT 1000
12491: EQUAL
12492: IFFALSE 12506
// SetTag ( i , 0 ) ;
12494: LD_VAR 0 1
12498: PPUSH
12499: LD_INT 0
12501: PPUSH
12502: CALL_OW 109
12506: GO 12432
12508: POP
12509: POP
// until belkovDied or not sol ;
12510: LD_EXP 19
12514: PUSH
12515: LD_VAR 0 4
12519: NOT
12520: OR
12521: IFFALSE 12309
// if not sol then
12523: LD_VAR 0 4
12527: NOT
12528: IFFALSE 12532
// exit ;
12530: GO 12593
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12532: LD_VAR 0 4
12536: PUSH
12537: LD_VAR 0 5
12541: ADD
12542: PPUSH
12543: LD_INT 56
12545: PPUSH
12546: LD_INT 25
12548: PPUSH
12549: CALL_OW 111
// wait ( 0 0$30 ) ;
12553: LD_INT 1050
12555: PPUSH
12556: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12560: LD_EXP 48
12564: PPUSH
12565: LD_INT 66
12567: PPUSH
12568: LD_INT 96
12570: PPUSH
12571: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12575: LD_VAR 0 5
12579: PPUSH
12580: LD_VAR 0 4
12584: PUSH
12585: LD_INT 1
12587: ARRAY
12588: PPUSH
12589: CALL_OW 112
// end ;
12593: PPOPN 7
12595: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12596: LD_EXP 18
12600: PUSH
12601: LD_EXP 19
12605: NOT
12606: AND
12607: PUSH
12608: LD_INT 9
12610: PPUSH
12611: LD_INT 22
12613: PUSH
12614: LD_INT 3
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 70
12625: AND
12626: IFFALSE 12946
12628: GO 12630
12630: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12631: LD_STRING QAttackAm
12633: PPUSH
12634: CALL_OW 97
12638: PUSH
12639: LD_INT 1
12641: DOUBLE
12642: EQUAL
12643: IFTRUE 12647
12645: GO 12714
12647: POP
// begin initiative := true ;
12648: LD_ADDR_EXP 31
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// DialogueOn ;
12656: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12660: LD_EXP 34
12664: PPUSH
12665: LD_STRING D17-Bur-1
12667: PPUSH
12668: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12672: LD_EXP 40
12676: PPUSH
12677: LD_STRING D17-Pla-1
12679: PPUSH
12680: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12684: LD_EXP 34
12688: PPUSH
12689: LD_STRING D17-Bur-2
12691: PPUSH
12692: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12696: LD_EXP 40
12700: PPUSH
12701: LD_STRING D17-Pla-2
12703: PPUSH
12704: CALL_OW 94
// DialogueOff ;
12708: CALL_OW 7
// end ; 2 :
12712: GO 12876
12714: LD_INT 2
12716: DOUBLE
12717: EQUAL
12718: IFTRUE 12722
12720: GO 12814
12722: POP
// begin initiative := true ;
12723: LD_ADDR_EXP 31
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// DialogueOn ;
12731: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12735: LD_EXP 34
12739: PPUSH
12740: LD_STRING D18-Bur-1
12742: PPUSH
12743: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12747: LD_EXP 40
12751: PPUSH
12752: LD_STRING D18-Pla-1
12754: PPUSH
12755: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12759: LD_EXP 34
12763: PPUSH
12764: LD_STRING D18-Bur-2
12766: PPUSH
12767: CALL_OW 88
// if not reinforcementsGained then
12771: LD_EXP 25
12775: NOT
12776: IFFALSE 12796
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12778: LD_EXP 40
12782: PPUSH
12783: LD_STRING D18-Pla-2
12785: PPUSH
12786: CALL_OW 94
// SendReinforcements ;
12790: CALL 3302 0 0
// end else
12794: GO 12808
// SayRadio ( Platonov , D22-Pla-1b ) ;
12796: LD_EXP 40
12800: PPUSH
12801: LD_STRING D22-Pla-1b
12803: PPUSH
12804: CALL_OW 94
// DialogueOff ;
12808: CALL_OW 7
// end ; 3 :
12812: GO 12876
12814: LD_INT 3
12816: DOUBLE
12817: EQUAL
12818: IFTRUE 12822
12820: GO 12875
12822: POP
// begin if IsOk ( Gnyevko ) then
12823: LD_EXP 35
12827: PPUSH
12828: CALL_OW 302
12832: IFFALSE 12848
// Say ( Gnyevko , D19A-Gny-1 ) else
12834: LD_EXP 35
12838: PPUSH
12839: LD_STRING D19A-Gny-1
12841: PPUSH
12842: CALL_OW 88
12846: GO 12871
// if IsOk ( Kovalyuk ) then
12848: LD_EXP 39
12852: PPUSH
12853: CALL_OW 302
12857: IFFALSE 12871
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12859: LD_EXP 39
12863: PPUSH
12864: LD_STRING D19A-Kov-1
12866: PPUSH
12867: CALL_OW 88
// exit ;
12871: GO 12946
// end ; end ;
12873: GO 12876
12875: POP
// if IsOk ( Gnyevko ) then
12876: LD_EXP 35
12880: PPUSH
12881: CALL_OW 302
12885: IFFALSE 12911
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12887: LD_EXP 35
12891: PPUSH
12892: LD_STRING D19-Gny-1
12894: PPUSH
12895: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12899: LD_EXP 34
12903: PPUSH
12904: LD_STRING D19-Bur-1
12906: PPUSH
12907: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12911: LD_EXP 39
12915: PPUSH
12916: CALL_OW 302
12920: IFFALSE 12946
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12922: LD_EXP 39
12926: PPUSH
12927: LD_STRING D19-Kov-1
12929: PPUSH
12930: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12934: LD_EXP 34
12938: PPUSH
12939: LD_STRING D19-Bur-2
12941: PPUSH
12942: CALL_OW 88
// end ; end ;
12946: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12947: LD_EXP 18
12951: PUSH
12952: LD_EXP 19
12956: NOT
12957: AND
12958: PUSH
12959: LD_INT 16
12961: PPUSH
12962: LD_INT 22
12964: PUSH
12965: LD_INT 3
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 70
12976: AND
12977: IFFALSE 13205
12979: GO 12981
12981: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12982: LD_STRING QAttackBw
12984: PPUSH
12985: CALL_OW 97
12989: PUSH
12990: LD_INT 1
12992: DOUBLE
12993: EQUAL
12994: IFTRUE 12998
12996: GO 13041
12998: POP
// begin initiative := true ;
12999: LD_ADDR_EXP 31
13003: PUSH
13004: LD_INT 1
13006: ST_TO_ADDR
// DialogueOn ;
13007: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
13011: LD_EXP 34
13015: PPUSH
13016: LD_STRING D21-Bur-1
13018: PPUSH
13019: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
13023: LD_EXP 40
13027: PPUSH
13028: LD_STRING D21-Pla-1
13030: PPUSH
13031: CALL_OW 94
// DialogueOff ;
13035: CALL_OW 7
// end ; 2 :
13039: GO 13156
13041: LD_INT 2
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13144
13049: POP
// begin initiative := true ;
13050: LD_ADDR_EXP 31
13054: PUSH
13055: LD_INT 1
13057: ST_TO_ADDR
// DialogueOn ;
13058: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13062: LD_EXP 34
13066: PPUSH
13067: LD_STRING D22-Bur-1
13069: PPUSH
13070: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13074: LD_EXP 25
13078: NOT
13079: PUSH
13080: LD_EXP 22
13084: AND
13085: IFFALSE 13105
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13087: LD_EXP 40
13091: PPUSH
13092: LD_STRING D22-Pla-1
13094: PPUSH
13095: CALL_OW 94
// SendReinforcements ;
13099: CALL 3302 0 0
// end else
13103: GO 13138
// if not westOutpostDestroyed then
13105: LD_EXP 22
13109: NOT
13110: IFFALSE 13126
// SayRadio ( Platonov , D22-Pla-1a ) else
13112: LD_EXP 40
13116: PPUSH
13117: LD_STRING D22-Pla-1a
13119: PPUSH
13120: CALL_OW 94
13124: GO 13138
// SayRadio ( Platonov , D22-Pla-1b ) ;
13126: LD_EXP 40
13130: PPUSH
13131: LD_STRING D22-Pla-1b
13133: PPUSH
13134: CALL_OW 94
// DialogueOff ;
13138: CALL_OW 7
// end ; 3 :
13142: GO 13156
13144: LD_INT 3
13146: DOUBLE
13147: EQUAL
13148: IFTRUE 13152
13150: GO 13155
13152: POP
// begin end ; end ;
13153: GO 13156
13155: POP
// ChangeMissionObjectives ( M9 ) ;
13156: LD_STRING M9
13158: PPUSH
13159: CALL_OW 337
// wait ( 0 0$1 ) ;
13163: LD_INT 35
13165: PPUSH
13166: CALL_OW 67
// if IsOk ( Gnyevko ) then
13170: LD_EXP 35
13174: PPUSH
13175: CALL_OW 302
13179: IFFALSE 13205
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13181: LD_EXP 35
13185: PPUSH
13186: LD_STRING D23-Gny-1
13188: PPUSH
13189: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13193: LD_EXP 34
13197: PPUSH
13198: LD_STRING D23-Bur-1
13200: PPUSH
13201: CALL_OW 88
// end ; end ;
13205: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13206: LD_EXP 18
13210: PUSH
13211: LD_EXP 19
13215: AND
13216: PUSH
13217: LD_EXP 28
13221: NOT
13222: AND
13223: PUSH
13224: LD_EXP 45
13228: PPUSH
13229: LD_INT 91
13231: PUSH
13232: LD_EXP 34
13236: PUSH
13237: LD_INT 8
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 72
13249: AND
13250: IFFALSE 13294
13252: GO 13254
13254: DISABLE
13255: LD_INT 0
13257: PPUSH
// begin for i in belkovTeam do
13258: LD_ADDR_VAR 0 1
13262: PUSH
13263: LD_EXP 45
13267: PUSH
13268: FOR_IN
13269: IFFALSE 13285
// SetSide ( i , 3 ) ;
13271: LD_VAR 0 1
13275: PPUSH
13276: LD_INT 3
13278: PPUSH
13279: CALL_OW 235
13283: GO 13268
13285: POP
13286: POP
// ChangeMissionObjectives ( M9a ) ;
13287: LD_STRING M9a
13289: PPUSH
13290: CALL_OW 337
// end ;
13294: PPOPN 1
13296: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13297: LD_EXP 34
13301: PPUSH
13302: LD_EXP 36
13306: PPUSH
13307: CALL_OW 296
13311: PUSH
13312: LD_INT 6
13314: LESS
13315: PUSH
13316: LD_EXP 18
13320: AND
13321: PUSH
13322: LD_EXP 36
13326: PPUSH
13327: CALL_OW 302
13331: AND
13332: PUSH
13333: LD_INT 3
13335: PPUSH
13336: CALL_OW 463
13340: NOT
13341: AND
13342: IFFALSE 13657
13344: GO 13346
13346: DISABLE
13347: LD_INT 0
13349: PPUSH
13350: PPUSH
// begin InGameOn ;
13351: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13355: LD_EXP 34
13359: PPUSH
13360: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13364: LD_EXP 34
13368: PPUSH
13369: LD_INT 37
13371: PPUSH
13372: LD_INT 17
13374: PPUSH
13375: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13379: LD_EXP 34
13383: PPUSH
13384: LD_EXP 36
13388: PPUSH
13389: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13393: LD_EXP 36
13397: PPUSH
13398: LD_EXP 34
13402: PPUSH
13403: CALL_OW 119
// p := 0 ;
13407: LD_ADDR_VAR 0 2
13411: PUSH
13412: LD_INT 0
13414: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13415: LD_INT 35
13417: PPUSH
13418: CALL_OW 67
// p := p + 1 ;
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: LD_VAR 0 2
13431: PUSH
13432: LD_INT 1
13434: PLUS
13435: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13436: LD_EXP 34
13440: PPUSH
13441: LD_EXP 36
13445: PPUSH
13446: CALL_OW 296
13450: PUSH
13451: LD_INT 4
13453: LESS
13454: PUSH
13455: LD_VAR 0 2
13459: PUSH
13460: LD_INT 6
13462: GREATER
13463: OR
13464: IFFALSE 13415
// ComTurnUnit ( Burlak , Belkov ) ;
13466: LD_EXP 34
13470: PPUSH
13471: LD_EXP 36
13475: PPUSH
13476: CALL_OW 119
// DialogueOn ;
13480: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13484: LD_EXP 36
13488: PPUSH
13489: LD_STRING D24-Bel-1
13491: PPUSH
13492: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13496: LD_EXP 34
13500: PPUSH
13501: LD_STRING D24-Bur-1
13503: PPUSH
13504: CALL_OW 88
// if belkovBrother then
13508: LD_EXP 32
13512: IFFALSE 13526
// Say ( Burlak , D24-Bur-1a ) ;
13514: LD_EXP 34
13518: PPUSH
13519: LD_STRING D24-Bur-1a
13521: PPUSH
13522: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13526: LD_EXP 36
13530: PPUSH
13531: LD_STRING D24-Bel-2
13533: PPUSH
13534: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13538: LD_EXP 34
13542: PPUSH
13543: LD_STRING D24-Bur-2
13545: PPUSH
13546: CALL_OW 88
// if vehCaptured then
13550: LD_EXP 16
13554: IFFALSE 13568
// Say ( Burlak , D24-Bur-2a ) ;
13556: LD_EXP 34
13560: PPUSH
13561: LD_STRING D24-Bur-2a
13563: PPUSH
13564: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13568: LD_EXP 40
13572: PPUSH
13573: LD_STRING D24-Pla-2
13575: PPUSH
13576: CALL_OW 94
// if not westOutpostDestroyed then
13580: LD_EXP 22
13584: NOT
13585: IFFALSE 13599
// SayRadio ( Platonov , D24-Pla-2a ) ;
13587: LD_EXP 40
13591: PPUSH
13592: LD_STRING D24-Pla-2a
13594: PPUSH
13595: CALL_OW 94
// DialogueOff ;
13599: CALL_OW 7
// InGameOff ;
13603: CALL_OW 9
// belkovSaved := true ;
13607: LD_ADDR_EXP 28
13611: PUSH
13612: LD_INT 1
13614: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13615: LD_ADDR_VAR 0 1
13619: PUSH
13620: LD_EXP 45
13624: PUSH
13625: LD_EXP 36
13629: UNION
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13648
// SetSide ( i , 3 ) ;
13634: LD_VAR 0 1
13638: PPUSH
13639: LD_INT 3
13641: PPUSH
13642: CALL_OW 235
13646: GO 13631
13648: POP
13649: POP
// ChangeMissionObjectives ( M9a ) ;
13650: LD_STRING M9a
13652: PPUSH
13653: CALL_OW 337
// end ;
13657: PPOPN 2
13659: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13660: LD_INT 3
13662: PPUSH
13663: LD_INT 22
13665: PUSH
13666: LD_INT 1
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 95
13675: PUSH
13676: LD_INT 8
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PPUSH
13692: CALL 58008 0 2
13696: IFFALSE 13881
13698: GO 13700
13700: DISABLE
// begin DialogueOn ;
13701: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13705: LD_INT 49
13707: PPUSH
13708: LD_INT 57
13710: PPUSH
13711: LD_INT 3
13713: PPUSH
13714: LD_INT 12
13716: NEG
13717: PPUSH
13718: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13722: LD_INT 49
13724: PPUSH
13725: LD_INT 57
13727: PPUSH
13728: LD_INT 3
13730: PPUSH
13731: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13735: LD_INT 49
13737: PPUSH
13738: LD_INT 57
13740: PPUSH
13741: CALL_OW 84
// if not eastOutpostDiscovered then
13745: LD_EXP 21
13749: NOT
13750: IFFALSE 13790
// begin Say ( Burlak , D15-Bur-1 ) ;
13752: LD_EXP 34
13756: PPUSH
13757: LD_STRING D15-Bur-1
13759: PPUSH
13760: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13764: LD_EXP 35
13768: PPUSH
13769: LD_STRING D15-Gny-1
13771: PPUSH
13772: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13776: LD_EXP 39
13780: PPUSH
13781: LD_STRING D15-Kov-1
13783: PPUSH
13784: CALL_OW 88
// end else
13788: GO 13826
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13790: LD_EXP 39
13794: PPUSH
13795: LD_STRING D16-Kov-1
13797: PPUSH
13798: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13802: LD_EXP 34
13806: PPUSH
13807: LD_STRING D16-Bur-1
13809: PPUSH
13810: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13814: LD_EXP 35
13818: PPUSH
13819: LD_STRING D16-Gny-1
13821: PPUSH
13822: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13826: LD_EXP 34
13830: PPUSH
13831: LD_STRING D15-Bur-2
13833: PPUSH
13834: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13838: LD_EXP 39
13842: PPUSH
13843: LD_STRING D15-Kov-2
13845: PPUSH
13846: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13850: LD_EXP 34
13854: PPUSH
13855: LD_STRING D15-Bur-3
13857: PPUSH
13858: CALL_OW 88
// DialogueOff ;
13862: CALL_OW 7
// westOutpostDiscovered := true ;
13866: LD_ADDR_EXP 20
13870: PUSH
13871: LD_INT 1
13873: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13874: LD_STRING M7
13876: PPUSH
13877: CALL_OW 337
// end ;
13881: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13882: LD_INT 3
13884: PPUSH
13885: LD_INT 22
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 95
13897: PUSH
13898: LD_INT 15
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PPUSH
13914: CALL 58008 0 2
13918: IFFALSE 14059
13920: GO 13922
13922: DISABLE
// begin DialogueOn ;
13923: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13927: LD_INT 95
13929: PPUSH
13930: LD_INT 65
13932: PPUSH
13933: LD_INT 3
13935: PPUSH
13936: LD_INT 12
13938: NEG
13939: PPUSH
13940: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13944: LD_INT 95
13946: PPUSH
13947: LD_INT 65
13949: PPUSH
13950: LD_INT 3
13952: PPUSH
13953: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13957: LD_INT 95
13959: PPUSH
13960: LD_INT 65
13962: PPUSH
13963: CALL_OW 84
// if westOutpostDiscovered then
13967: LD_EXP 20
13971: IFFALSE 14011
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13973: LD_EXP 39
13977: PPUSH
13978: LD_STRING D16-Kov-1
13980: PPUSH
13981: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13985: LD_EXP 34
13989: PPUSH
13990: LD_STRING D16-Bur-1
13992: PPUSH
13993: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13997: LD_EXP 35
14001: PPUSH
14002: LD_STRING D16-Gny-1
14004: PPUSH
14005: CALL_OW 88
// end else
14009: GO 14047
// begin Say ( Burlak , D15-Bur-1 ) ;
14011: LD_EXP 34
14015: PPUSH
14016: LD_STRING D15-Bur-1
14018: PPUSH
14019: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14023: LD_EXP 35
14027: PPUSH
14028: LD_STRING D15-Gny-1
14030: PPUSH
14031: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14035: LD_EXP 39
14039: PPUSH
14040: LD_STRING D15-Kov-1
14042: PPUSH
14043: CALL_OW 88
// end ; DialogueOff ;
14047: CALL_OW 7
// eastOutpostDiscovered := true ;
14051: LD_ADDR_EXP 21
14055: PUSH
14056: LD_INT 1
14058: ST_TO_ADDR
// end ;
14059: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14060: LD_INT 8
14062: PPUSH
14063: LD_INT 22
14065: PUSH
14066: LD_INT 1
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 50
14075: PUSH
14076: EMPTY
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 70
14087: PUSH
14088: LD_INT 0
14090: EQUAL
14091: PUSH
14092: LD_EXP 20
14096: AND
14097: IFFALSE 14141
14099: GO 14101
14101: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14102: LD_EXP 34
14106: PPUSH
14107: LD_STRING D20-Bur-1
14109: PPUSH
14110: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14114: LD_EXP 40
14118: PPUSH
14119: LD_STRING D20-Pla-1
14121: PPUSH
14122: CALL_OW 94
// westOutpostDestroyed := true ;
14126: LD_ADDR_EXP 22
14130: PUSH
14131: LD_INT 1
14133: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14134: LD_STRING M8
14136: PPUSH
14137: CALL_OW 337
// end ;
14141: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14142: LD_INT 15
14144: PPUSH
14145: LD_INT 22
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 50
14157: PUSH
14158: EMPTY
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PPUSH
14165: CALL_OW 70
14169: PUSH
14170: LD_INT 0
14172: EQUAL
14173: PUSH
14174: LD_EXP 21
14178: AND
14179: IFFALSE 14309
14181: GO 14183
14183: DISABLE
14184: LD_INT 0
14186: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14187: LD_EXP 34
14191: PPUSH
14192: LD_STRING D20-Bur-1
14194: PPUSH
14195: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14199: LD_EXP 40
14203: PPUSH
14204: LD_STRING D20-Pla-1
14206: PPUSH
14207: CALL_OW 94
// eastOutpostDestroyed := true ;
14211: LD_ADDR_EXP 23
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14219: LD_INT 35
14221: PPUSH
14222: CALL_OW 67
// stop_talking := true ;
14226: LD_ADDR_OWVAR 56
14230: PUSH
14231: LD_INT 1
14233: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14234: LD_ADDR_VAR 0 1
14238: PUSH
14239: LD_INT 22
14241: PUSH
14242: LD_INT 3
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 23
14251: PUSH
14252: LD_INT 3
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: LIST
14273: PPUSH
14274: CALL_OW 69
14278: PUSH
14279: FOR_IN
14280: IFFALSE 14299
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14282: LD_VAR 0 1
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_INT 1500
14292: PPUSH
14293: CALL_OW 591
14297: GO 14279
14299: POP
14300: POP
// stop_talking := false ;
14301: LD_ADDR_OWVAR 56
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// end ;
14309: PPOPN 1
14311: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14312: LD_INT 19
14314: PPUSH
14315: LD_INT 22
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 21
14327: PUSH
14328: LD_INT 2
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 70
14343: IFFALSE 14451
14345: GO 14347
14347: DISABLE
// begin DialogueOn ;
14348: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14352: LD_INT 19
14354: PPUSH
14355: LD_INT 22
14357: PUSH
14358: LD_INT 3
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 21
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 70
14383: PPUSH
14384: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14388: LD_EXP 34
14392: PPUSH
14393: LD_STRING D26-Bur-1
14395: PPUSH
14396: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14400: LD_EXP 39
14404: PPUSH
14405: LD_STRING D26-Kov-1
14407: PPUSH
14408: CALL_OW 88
// if IsOk ( Gnyevko ) then
14412: LD_EXP 35
14416: PPUSH
14417: CALL_OW 302
14421: IFFALSE 14447
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14423: LD_EXP 35
14427: PPUSH
14428: LD_STRING D26-Gny-1
14430: PPUSH
14431: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14435: LD_EXP 34
14439: PPUSH
14440: LD_STRING D26-Bur-2
14442: PPUSH
14443: CALL_OW 88
// end ; DialogueOff ;
14447: CALL_OW 7
// end ;
14451: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14452: LD_EXP 21
14456: PUSH
14457: LD_EXP 23
14461: NOT
14462: AND
14463: PUSH
14464: LD_INT 17
14466: PPUSH
14467: LD_INT 22
14469: PUSH
14470: LD_INT 3
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: LD_INT 24
14482: PUSH
14483: LD_INT 1000
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL_OW 70
14502: PUSH
14503: LD_INT 1
14505: GREATER
14506: AND
14507: IFFALSE 14570
14509: GO 14511
14511: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14512: LD_EXP 35
14516: PPUSH
14517: LD_STRING D16A-Gny-1
14519: PPUSH
14520: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14524: LD_EXP 39
14528: PPUSH
14529: LD_STRING D16A-Kov-1
14531: PPUSH
14532: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14536: LD_EXP 35
14540: PPUSH
14541: CALL_OW 302
14545: PUSH
14546: LD_EXP 39
14550: PPUSH
14551: CALL_OW 302
14555: OR
14556: IFFALSE 14570
// Say ( Burlak , D16A-Bur-1 ) ;
14558: LD_EXP 34
14562: PPUSH
14563: LD_STRING D16A-Bur-1
14565: PPUSH
14566: CALL_OW 88
// end ;
14570: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14571: LD_INT 3
14573: PPUSH
14574: LD_INT 9
14576: PPUSH
14577: CALL_OW 294
14581: IFFALSE 14594
14583: GO 14585
14585: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14586: LD_ADDR_EXP 24
14590: PUSH
14591: LD_INT 1
14593: ST_TO_ADDR
// end ;
14594: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14595: LD_INT 3
14597: PPUSH
14598: LD_INT 10
14600: PPUSH
14601: CALL_OW 294
14605: IFFALSE 14625
14607: GO 14609
14609: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14610: LD_ADDR_EXP 27
14614: PUSH
14615: LD_EXP 27
14619: PPUSH
14620: CALL 56092 0 1
14624: ST_TO_ADDR
14625: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14626: LD_INT 3
14628: PPUSH
14629: LD_INT 11
14631: PPUSH
14632: CALL_OW 294
14636: IFFALSE 14656
14638: GO 14640
14640: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14641: LD_ADDR_EXP 27
14645: PUSH
14646: LD_EXP 27
14650: PPUSH
14651: CALL 56092 0 1
14655: ST_TO_ADDR
14656: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14657: LD_INT 3
14659: PPUSH
14660: LD_INT 12
14662: PPUSH
14663: CALL_OW 294
14667: IFFALSE 14687
14669: GO 14671
14671: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14672: LD_ADDR_EXP 27
14676: PUSH
14677: LD_EXP 27
14681: PPUSH
14682: CALL 56092 0 1
14686: ST_TO_ADDR
14687: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14688: LD_INT 3
14690: PPUSH
14691: LD_INT 13
14693: PPUSH
14694: CALL_OW 294
14698: IFFALSE 14718
14700: GO 14702
14702: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14703: LD_ADDR_EXP 27
14707: PUSH
14708: LD_EXP 27
14712: PPUSH
14713: CALL 56092 0 1
14717: ST_TO_ADDR
14718: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14719: LD_INT 3
14721: PPUSH
14722: LD_INT 14
14724: PPUSH
14725: CALL_OW 294
14729: IFFALSE 14749
14731: GO 14733
14733: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14734: LD_ADDR_EXP 27
14738: PUSH
14739: LD_EXP 27
14743: PPUSH
14744: CALL 56092 0 1
14748: ST_TO_ADDR
14749: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14750: LD_EXP 27
14754: PUSH
14755: LD_INT 5
14757: GREATEREQUAL
14758: PUSH
14759: LD_EXP 14
14763: AND
14764: IFFALSE 14784
14766: GO 14768
14768: DISABLE
// begin allMapPointsSpotted := true ;
14769: LD_ADDR_EXP 26
14773: PUSH
14774: LD_INT 1
14776: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14777: LD_STRING M10
14779: PPUSH
14780: CALL_OW 337
// end ;
14784: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14785: LD_EXP 26
14789: PUSH
14790: LD_EXP 22
14794: AND
14795: IFFALSE 14807
14797: GO 14799
14799: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14800: LD_STRING M10a
14802: PPUSH
14803: CALL_OW 337
// end ;
14807: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14808: LD_EXP 14
14812: IFFALSE 15445
14814: GO 14816
14816: DISABLE
14817: LD_INT 0
14819: PPUSH
14820: PPUSH
14821: PPUSH
14822: PPUSH
14823: PPUSH
// begin wasOutsideBeria := false ;
14824: LD_ADDR_VAR 0 3
14828: PUSH
14829: LD_INT 0
14831: ST_TO_ADDR
// wantToTalk := false ;
14832: LD_ADDR_VAR 0 2
14836: PUSH
14837: LD_INT 0
14839: ST_TO_ADDR
// westOutpostReported := false ;
14840: LD_ADDR_VAR 0 4
14844: PUSH
14845: LD_INT 0
14847: ST_TO_ADDR
// eastOutpostReported := false ;
14848: LD_ADDR_VAR 0 5
14852: PUSH
14853: LD_INT 0
14855: ST_TO_ADDR
// timer := 0 0$0 ;
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 0
14863: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14864: LD_INT 70
14866: PPUSH
14867: CALL_OW 67
// timer := timer + 0 0$2 ;
14871: LD_ADDR_VAR 0 1
14875: PUSH
14876: LD_VAR 0 1
14880: PUSH
14881: LD_INT 70
14883: PLUS
14884: ST_TO_ADDR
// if timer >= 0 0$30 then
14885: LD_VAR 0 1
14889: PUSH
14890: LD_INT 1050
14892: GREATEREQUAL
14893: IFFALSE 14903
// wantToTalk := true ;
14895: LD_ADDR_VAR 0 2
14899: PUSH
14900: LD_INT 1
14902: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 then
14903: LD_EXP 34
14907: PPUSH
14908: LD_EXP 40
14912: PPUSH
14913: CALL_OW 296
14917: PUSH
14918: LD_INT 9
14920: GREATER
14921: IFFALSE 14931
// wasOutsideBeria := true ;
14923: LD_ADDR_VAR 0 3
14927: PUSH
14928: LD_INT 1
14930: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14931: LD_VAR 0 2
14935: PUSH
14936: LD_VAR 0 3
14940: AND
14941: PUSH
14942: LD_EXP 34
14946: PPUSH
14947: LD_EXP 40
14951: PPUSH
14952: CALL_OW 296
14956: PUSH
14957: LD_INT 8
14959: LESS
14960: PUSH
14961: LD_EXP 34
14965: PPUSH
14966: CALL_OW 310
14970: PPUSH
14971: LD_EXP 40
14975: PPUSH
14976: CALL_OW 296
14980: PUSH
14981: LD_INT 8
14983: LESS
14984: OR
14985: AND
14986: IFFALSE 15334
// begin timer := 0 0$0 ;
14988: LD_ADDR_VAR 0 1
14992: PUSH
14993: LD_INT 0
14995: ST_TO_ADDR
// wantToTalk := false ;
14996: LD_ADDR_VAR 0 2
15000: PUSH
15001: LD_INT 0
15003: ST_TO_ADDR
// wasOutsideBeria := false ;
15004: LD_ADDR_VAR 0 3
15008: PUSH
15009: LD_INT 0
15011: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
15012: LD_EXP 40
15016: PPUSH
15017: CALL_OW 87
// DialogueOn ;
15021: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
15025: LD_EXP 40
15029: PPUSH
15030: LD_STRING D25-Pla-1
15032: PPUSH
15033: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
15037: LD_VAR 0 4
15041: NOT
15042: PUSH
15043: LD_VAR 0 5
15047: NOT
15048: AND
15049: PUSH
15050: LD_EXP 20
15054: AND
15055: PUSH
15056: LD_EXP 21
15060: AND
15061: IFFALSE 15141
// begin westOutpostReported := true ;
15063: LD_ADDR_VAR 0 4
15067: PUSH
15068: LD_INT 1
15070: ST_TO_ADDR
// eastOutpostReported := true ;
15071: LD_ADDR_VAR 0 5
15075: PUSH
15076: LD_INT 1
15078: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15079: LD_EXP 34
15083: PPUSH
15084: LD_STRING D25-Bur-1
15086: PPUSH
15087: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15091: LD_EXP 24
15095: PUSH
15096: LD_EXP 22
15100: NOT
15101: AND
15102: IFFALSE 15139
// begin Say ( Burlak , D25b-Bur-1 ) ;
15104: LD_EXP 34
15108: PPUSH
15109: LD_STRING D25b-Bur-1
15111: PPUSH
15112: CALL_OW 88
// if not reinforcementsGained then
15116: LD_EXP 25
15120: NOT
15121: IFFALSE 15139
// begin Say ( Platonov , D25b-Pla-1 ) ;
15123: LD_EXP 40
15127: PPUSH
15128: LD_STRING D25b-Pla-1
15130: PPUSH
15131: CALL_OW 88
// SendReinforcements ( ) ;
15135: CALL 3302 0 0
// end ; end ; end else
15139: GO 15330
// if not westOutpostReported and westOutpostDiscovered then
15141: LD_VAR 0 4
15145: NOT
15146: PUSH
15147: LD_EXP 20
15151: AND
15152: IFFALSE 15224
// begin westOutpostReported := true ;
15154: LD_ADDR_VAR 0 4
15158: PUSH
15159: LD_INT 1
15161: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15162: LD_EXP 34
15166: PPUSH
15167: LD_STRING D25a-Bur-1b
15169: PPUSH
15170: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15174: LD_EXP 24
15178: PUSH
15179: LD_EXP 22
15183: NOT
15184: AND
15185: IFFALSE 15222
// begin Say ( Burlak , D25b-Bur-1 ) ;
15187: LD_EXP 34
15191: PPUSH
15192: LD_STRING D25b-Bur-1
15194: PPUSH
15195: CALL_OW 88
// if not reinforcementsGained then
15199: LD_EXP 25
15203: NOT
15204: IFFALSE 15222
// begin Say ( Platonov , D25b-Pla-1 ) ;
15206: LD_EXP 40
15210: PPUSH
15211: LD_STRING D25b-Pla-1
15213: PPUSH
15214: CALL_OW 88
// SendReinforcements ( ) ;
15218: CALL 3302 0 0
// end ; end ; end else
15222: GO 15330
// if not eastOutpostReported and eastOutpostDiscovered then
15224: LD_VAR 0 5
15228: NOT
15229: PUSH
15230: LD_EXP 21
15234: AND
15235: IFFALSE 15259
// begin eastOutpostReported := true ;
15237: LD_ADDR_VAR 0 5
15241: PUSH
15242: LD_INT 1
15244: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15245: LD_EXP 34
15249: PPUSH
15250: LD_STRING D25a-Bur-1a
15252: PPUSH
15253: CALL_OW 88
// end else
15257: GO 15330
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15259: LD_EXP 20
15263: NOT
15264: PUSH
15265: LD_EXP 21
15269: NOT
15270: OR
15271: IFFALSE 15299
// begin Say ( Burlak , D25a-Bur-1 ) ;
15273: LD_EXP 34
15277: PPUSH
15278: LD_STRING D25a-Bur-1
15280: PPUSH
15281: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15285: LD_EXP 40
15289: PPUSH
15290: LD_STRING D25c-Pla-1
15292: PPUSH
15293: CALL_OW 88
// end else
15297: GO 15330
// if not allMapPointsSpotted then
15299: LD_EXP 26
15303: NOT
15304: IFFALSE 15330
// begin Say ( Burlak , D25a-Bur-1 ) ;
15306: LD_EXP 34
15310: PPUSH
15311: LD_STRING D25a-Bur-1
15313: PPUSH
15314: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15318: LD_EXP 40
15322: PPUSH
15323: LD_STRING D25c-Pla-1a
15325: PPUSH
15326: CALL_OW 88
// end ; DialogueOff ;
15330: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15334: LD_EXP 26
15338: PUSH
15339: LD_EXP 22
15343: AND
15344: IFFALSE 14864
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15346: LD_INT 22
15348: PUSH
15349: LD_INT 3
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 21
15358: PUSH
15359: LD_INT 1
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 91
15368: PUSH
15369: LD_EXP 40
15373: PUSH
15374: LD_INT 10
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: PPUSH
15387: CALL_OW 69
15391: IFFALSE 15434
// begin if not belkovDied and not belkovSaved then
15393: LD_EXP 19
15397: NOT
15398: PUSH
15399: LD_EXP 28
15403: NOT
15404: AND
15405: IFFALSE 15428
// begin if Query ( QContMission ) = 1 then
15407: LD_STRING QContMission
15409: PPUSH
15410: CALL_OW 97
15414: PUSH
15415: LD_INT 1
15417: EQUAL
15418: IFFALSE 15426
// begin EndMission ;
15420: CALL 15448 0 0
// exit ;
15424: GO 15445
// end ; end else
15426: GO 15434
// begin EndMission ;
15428: CALL 15448 0 0
// exit ;
15432: GO 15445
// end ; end ; wait ( 0 0$10 ) ;
15434: LD_INT 350
15436: PPUSH
15437: CALL_OW 67
// until false ;
15441: LD_INT 0
15443: IFFALSE 15346
// end ;
15445: PPOPN 5
15447: END
// function EndMission ; var i , tmp ; begin
15448: LD_INT 0
15450: PPUSH
15451: PPUSH
15452: PPUSH
// if initiative then
15453: LD_EXP 31
15457: IFFALSE 15471
// AddMedal ( Initiative , 1 ) else
15459: LD_STRING Initiative
15461: PPUSH
15462: LD_INT 1
15464: PPUSH
15465: CALL_OW 101
15469: GO 15502
// if not eastOutpostDestroyed then
15471: LD_EXP 23
15475: NOT
15476: IFFALSE 15491
// AddMedal ( Initiative , - 2 ) else
15478: LD_STRING Initiative
15480: PPUSH
15481: LD_INT 2
15483: NEG
15484: PPUSH
15485: CALL_OW 101
15489: GO 15502
// AddMedal ( Initiative , - 1 ) ;
15491: LD_STRING Initiative
15493: PPUSH
15494: LD_INT 1
15496: NEG
15497: PPUSH
15498: CALL_OW 101
// if not belkovDied and belkovSaved then
15502: LD_EXP 19
15506: NOT
15507: PUSH
15508: LD_EXP 28
15512: AND
15513: IFFALSE 15527
// AddMedal ( Belkov , 1 ) else
15515: LD_STRING Belkov
15517: PPUSH
15518: LD_INT 1
15520: PPUSH
15521: CALL_OW 101
15525: GO 15622
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15527: LD_EXP 45
15531: PPUSH
15532: LD_INT 22
15534: PUSH
15535: LD_INT 3
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PPUSH
15542: CALL_OW 72
15546: IFFALSE 15560
// AddMedal ( Belkov , 2 ) else
15548: LD_STRING Belkov
15550: PPUSH
15551: LD_INT 2
15553: PPUSH
15554: CALL_OW 101
15558: GO 15622
// if belkovDied then
15560: LD_EXP 19
15564: IFFALSE 15579
// AddMedal ( Belkov , - 1 ) else
15566: LD_STRING Belkov
15568: PPUSH
15569: LD_INT 1
15571: NEG
15572: PPUSH
15573: CALL_OW 101
15577: GO 15622
// if not belkovSaved then
15579: LD_EXP 28
15583: NOT
15584: IFFALSE 15599
// AddMedal ( Belkov , - 2 ) else
15586: LD_STRING Belkov
15588: PPUSH
15589: LD_INT 2
15591: NEG
15592: PPUSH
15593: CALL_OW 101
15597: GO 15622
// if belkovDied and belkovSaved then
15599: LD_EXP 19
15603: PUSH
15604: LD_EXP 28
15608: AND
15609: IFFALSE 15622
// AddMedal ( Belkov , - 3 ) ;
15611: LD_STRING Belkov
15613: PPUSH
15614: LD_INT 3
15616: NEG
15617: PPUSH
15618: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15622: LD_EXP 30
15626: PUSH
15627: LD_INT 0
15629: EQUAL
15630: IFFALSE 15644
// AddMedal ( NoLosses , 1 ) else
15632: LD_STRING NoLosses
15634: PPUSH
15635: LD_INT 1
15637: PPUSH
15638: CALL_OW 101
15642: GO 15655
// AddMedal ( NoLosses , - 1 ) ;
15644: LD_STRING NoLosses
15646: PPUSH
15647: LD_INT 1
15649: NEG
15650: PPUSH
15651: CALL_OW 101
// GiveMedals ( Main ) ;
15655: LD_STRING Main
15657: PPUSH
15658: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15662: LD_INT 22
15664: PUSH
15665: LD_INT 3
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 23
15674: PUSH
15675: LD_INT 3
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 21
15684: PUSH
15685: LD_INT 1
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: PPUSH
15702: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15706: LD_EXP 34
15710: PPUSH
15711: LD_EXP 3
15715: PUSH
15716: LD_STRING Burlak
15718: STR
15719: PPUSH
15720: CALL_OW 38
// if IsLive ( Gnyevko ) then
15724: LD_EXP 35
15728: PPUSH
15729: CALL_OW 300
15733: IFFALSE 15753
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15735: LD_EXP 35
15739: PPUSH
15740: LD_EXP 3
15744: PUSH
15745: LD_STRING Gnyevko
15747: STR
15748: PPUSH
15749: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15753: LD_EXP 39
15757: PPUSH
15758: CALL_OW 300
15762: IFFALSE 15782
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15764: LD_EXP 39
15768: PPUSH
15769: LD_EXP 3
15773: PUSH
15774: LD_STRING Kovalyuk
15776: STR
15777: PPUSH
15778: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15782: LD_EXP 36
15786: PPUSH
15787: CALL_OW 300
15791: PUSH
15792: LD_EXP 28
15796: AND
15797: IFFALSE 15817
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15799: LD_EXP 36
15803: PPUSH
15804: LD_EXP 3
15808: PUSH
15809: LD_STRING Belkov
15811: STR
15812: PPUSH
15813: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15817: LD_EXP 37
15821: PPUSH
15822: CALL_OW 300
15826: IFFALSE 15846
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15828: LD_EXP 37
15832: PPUSH
15833: LD_EXP 3
15837: PUSH
15838: LD_STRING Kirilenkova
15840: STR
15841: PPUSH
15842: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15846: LD_INT 22
15848: PUSH
15849: LD_INT 3
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 23
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 21
15868: PUSH
15869: LD_INT 1
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: PUSH
15886: LD_EXP 34
15890: PUSH
15891: LD_EXP 35
15895: PUSH
15896: LD_EXP 39
15900: PUSH
15901: LD_EXP 36
15905: PUSH
15906: LD_EXP 37
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: DIFF
15918: PPUSH
15919: LD_EXP 3
15923: PUSH
15924: LD_STRING burlakTeam
15926: STR
15927: PPUSH
15928: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15932: LD_INT 22
15934: PUSH
15935: LD_INT 6
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 23
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 21
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: LIST
15966: PPUSH
15967: CALL_OW 69
15971: PUSH
15972: LD_EXP 40
15976: PUSH
15977: LD_EXP 38
15981: PUSH
15982: LD_EXP 36
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: LD_EXP 45
15996: UNION
15997: DIFF
15998: PPUSH
15999: LD_EXP 3
16003: PUSH
16004: LD_STRING kirovTeam
16006: STR
16007: PPUSH
16008: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
16012: LD_EXP 23
16016: PPUSH
16017: LD_STRING 02_EasternOutpostDestroyed
16019: PPUSH
16020: CALL_OW 39
// tmp := [ ] ;
16024: LD_ADDR_VAR 0 3
16028: PUSH
16029: EMPTY
16030: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
16031: LD_ADDR_VAR 0 2
16035: PUSH
16036: LD_INT 22
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 21
16048: PUSH
16049: LD_INT 3
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PPUSH
16060: CALL_OW 69
16064: PUSH
16065: FOR_IN
16066: IFFALSE 16142
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16068: LD_ADDR_VAR 0 3
16072: PUSH
16073: LD_VAR 0 3
16077: PPUSH
16078: LD_VAR 0 2
16082: PPUSH
16083: CALL_OW 266
16087: PUSH
16088: LD_VAR 0 2
16092: PPUSH
16093: CALL_OW 267
16097: PUSH
16098: LD_VAR 0 2
16102: PPUSH
16103: CALL_OW 250
16107: PUSH
16108: LD_VAR 0 2
16112: PPUSH
16113: CALL_OW 251
16117: PUSH
16118: LD_VAR 0 2
16122: PPUSH
16123: CALL_OW 254
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: PPUSH
16135: CALL 54731 0 2
16139: ST_TO_ADDR
16140: GO 16065
16142: POP
16143: POP
// SaveVariable ( tmp , 02_Beria ) ;
16144: LD_VAR 0 3
16148: PPUSH
16149: LD_STRING 02_Beria
16151: PPUSH
16152: CALL_OW 39
// tmp := [ ] ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 6
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 21
16180: PUSH
16181: LD_INT 3
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16274
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_VAR 0 3
16209: PPUSH
16210: LD_VAR 0 2
16214: PPUSH
16215: CALL_OW 266
16219: PUSH
16220: LD_VAR 0 2
16224: PPUSH
16225: CALL_OW 267
16229: PUSH
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL_OW 250
16239: PUSH
16240: LD_VAR 0 2
16244: PPUSH
16245: CALL_OW 251
16249: PUSH
16250: LD_VAR 0 2
16254: PPUSH
16255: CALL_OW 254
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: PPUSH
16267: CALL 54731 0 2
16271: ST_TO_ADDR
16272: GO 16197
16274: POP
16275: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16276: LD_VAR 0 3
16280: PPUSH
16281: LD_STRING 02_Kirov
16283: PPUSH
16284: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16288: LD_INT 22
16290: PUSH
16291: LD_INT 3
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 21
16300: PUSH
16301: LD_INT 2
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PPUSH
16312: CALL_OW 69
16316: PPUSH
16317: CALL 19122 0 1
16321: PPUSH
16322: LD_STRING 02_VehiclesCount
16324: PPUSH
16325: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16329: LD_INT 22
16331: PUSH
16332: LD_INT 6
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 21
16341: PUSH
16342: LD_INT 2
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 69
16357: PPUSH
16358: CALL 19122 0 1
16362: PPUSH
16363: LD_STRING 02_KirovVehiclesCount
16365: PPUSH
16366: CALL_OW 39
// YouWin ;
16370: CALL_OW 103
// end ; end_of_file
16374: LD_VAR 0 1
16378: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16379: LD_INT 420
16381: PPUSH
16382: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16386: LD_VAR 0 2
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: CALL 8000 0 2
// end ;
16400: PPOPN 5
16402: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16403: LD_VAR 0 1
16407: PPUSH
16408: CALL 75984 0 1
// if un = Burlak then
16412: LD_VAR 0 1
16416: PUSH
16417: LD_EXP 34
16421: EQUAL
16422: IFFALSE 16431
// YouLost ( Burlak ) ;
16424: LD_STRING Burlak
16426: PPUSH
16427: CALL_OW 104
// if un = Platonov then
16431: LD_VAR 0 1
16435: PUSH
16436: LD_EXP 40
16440: EQUAL
16441: IFFALSE 16450
// YouLost ( Platonov ) ;
16443: LD_STRING Platonov
16445: PPUSH
16446: CALL_OW 104
// if un = Kurin then
16450: LD_VAR 0 1
16454: PUSH
16455: LD_EXP 38
16459: EQUAL
16460: IFFALSE 16469
// YouLost ( Kurin ) ;
16462: LD_STRING Kurin
16464: PPUSH
16465: CALL_OW 104
// if un = Belkov then
16469: LD_VAR 0 1
16473: PUSH
16474: LD_EXP 36
16478: EQUAL
16479: IFFALSE 16489
// belkovDied := true ;
16481: LD_ADDR_EXP 19
16485: PUSH
16486: LD_INT 1
16488: ST_TO_ADDR
// if un in belkovTeam then
16489: LD_VAR 0 1
16493: PUSH
16494: LD_EXP 45
16498: IN
16499: IFFALSE 16532
// begin belkovTeam := belkovTeam diff un ;
16501: LD_ADDR_EXP 45
16505: PUSH
16506: LD_EXP 45
16510: PUSH
16511: LD_VAR 0 1
16515: DIFF
16516: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16517: LD_ADDR_EXP 29
16521: PUSH
16522: LD_EXP 29
16526: PPUSH
16527: CALL 56092 0 1
16531: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16532: LD_VAR 0 1
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_INT 3
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 21
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 23
16559: PUSH
16560: LD_INT 3
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: LIST
16571: PPUSH
16572: CALL_OW 69
16576: IN
16577: IFFALSE 16594
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16579: LD_ADDR_EXP 30
16583: PUSH
16584: LD_EXP 30
16588: PPUSH
16589: CALL 56092 0 1
16593: ST_TO_ADDR
// if un in usWestForces then
16594: LD_VAR 0 1
16598: PUSH
16599: LD_EXP 46
16603: IN
16604: IFFALSE 16622
// usWestForces := usWestForces diff un ;
16606: LD_ADDR_EXP 46
16610: PUSH
16611: LD_EXP 46
16615: PUSH
16616: LD_VAR 0 1
16620: DIFF
16621: ST_TO_ADDR
// if un in usEastForces then
16622: LD_VAR 0 1
16626: PUSH
16627: LD_EXP 47
16631: IN
16632: IFFALSE 16650
// usEastForces := usEastForces diff un ;
16634: LD_ADDR_EXP 47
16638: PUSH
16639: LD_EXP 47
16643: PUSH
16644: LD_VAR 0 1
16648: DIFF
16649: ST_TO_ADDR
// if un = Dickens then
16650: LD_VAR 0 1
16654: PUSH
16655: LD_EXP 49
16659: EQUAL
16660: IFFALSE 16678
// SaveVariable ( 1 , currentMissionPrefix & DickensKilled ) ;
16662: LD_INT 1
16664: PPUSH
16665: LD_EXP 3
16669: PUSH
16670: LD_STRING DickensKilled
16672: STR
16673: PPUSH
16674: CALL_OW 39
// end ;
16678: PPOPN 1
16680: END
// on BuildingComplete ( b ) do var mech ;
16681: LD_INT 0
16683: PPUSH
// begin if GetSide ( b ) = 3 then
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 255
16693: PUSH
16694: LD_INT 3
16696: EQUAL
16697: IFFALSE 16756
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 266
16708: PUSH
16709: LD_INT 6
16711: PUSH
16712: LD_INT 7
16714: PUSH
16715: LD_INT 8
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: IN
16723: IFFALSE 16733
// hasLab := true ;
16725: LD_ADDR_EXP 9
16729: PUSH
16730: LD_INT 1
16732: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16733: LD_VAR 0 1
16737: PPUSH
16738: CALL_OW 266
16742: PUSH
16743: LD_INT 2
16745: EQUAL
16746: IFFALSE 16756
// hasWorkshop := true ;
16748: LD_ADDR_EXP 10
16752: PUSH
16753: LD_INT 1
16755: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16756: LD_VAR 0 1
16760: PPUSH
16761: CALL_OW 255
16765: PUSH
16766: LD_INT 6
16768: EQUAL
16769: IFFALSE 16843
// begin if GetBType ( b ) = b_workshop then
16771: LD_VAR 0 1
16775: PPUSH
16776: CALL_OW 266
16780: PUSH
16781: LD_INT 2
16783: EQUAL
16784: IFFALSE 16843
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16786: LD_ADDR_VAR 0 2
16790: PUSH
16791: LD_EXP 43
16795: PPUSH
16796: LD_INT 25
16798: PUSH
16799: LD_INT 3
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PPUSH
16806: CALL_OW 72
16810: ST_TO_ADDR
// if not mech then
16811: LD_VAR 0 2
16815: NOT
16816: IFFALSE 16820
// exit ;
16818: GO 16843
// ComExit ( mech ) ;
16820: LD_VAR 0 2
16824: PPUSH
16825: CALL 55129 0 1
// AddComEnterUnit ( mech , b ) ;
16829: LD_VAR 0 2
16833: PPUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: CALL_OW 180
// end ; end ; end ;
16843: PPOPN 2
16845: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: LD_VAR 0 2
16855: PPUSH
16856: CALL 76042 0 2
// if GetSide ( vehicle ) = 3 then
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 255
16869: PUSH
16870: LD_INT 3
16872: EQUAL
16873: IFFALSE 16898
// begin hasTank := true ;
16875: LD_ADDR_EXP 12
16879: PUSH
16880: LD_INT 1
16882: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16883: LD_ADDR_EXP 15
16887: PUSH
16888: LD_EXP 15
16892: PPUSH
16893: CALL 56092 0 1
16897: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16898: LD_VAR 0 1
16902: PPUSH
16903: CALL_OW 255
16907: PUSH
16908: LD_INT 6
16910: EQUAL
16911: IFFALSE 16922
// KirovAttack ( vehicle ) ;
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL 3608 0 1
// end ;
16922: PPOPN 2
16924: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16925: LD_VAR 0 1
16929: PUSH
16930: LD_EXP 33
16934: EQUAL
16935: IFFALSE 16941
// BelkovAttackScript ;
16937: CALL 1673 0 0
// end ;
16941: PPOPN 1
16943: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16944: LD_INT 0
16946: PPUSH
// begin if side = 1 then
16947: LD_VAR 0 3
16951: PUSH
16952: LD_INT 1
16954: EQUAL
16955: IFFALSE 16965
// vehCaptured := true ;
16957: LD_ADDR_EXP 16
16961: PUSH
16962: LD_INT 1
16964: ST_TO_ADDR
// end ;
16965: PPOPN 5
16967: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16968: LD_VAR 0 1
16972: PUSH
16973: LD_INT 3
16975: EQUAL
16976: PUSH
16977: LD_VAR 0 2
16981: PUSH
16982: LD_INT 6
16984: EQUAL
16985: AND
16986: IFFALSE 16996
// allianceAttacked := true ;
16988: LD_ADDR_EXP 13
16992: PUSH
16993: LD_INT 1
16995: ST_TO_ADDR
// end ; end_of_file
16996: PPOPN 2
16998: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16999: LD_INT 0
17001: PPUSH
17002: PPUSH
// if exist_mode then
17003: LD_VAR 0 2
17007: IFFALSE 17053
// begin unit := CreateCharacter ( prefix & ident ) ;
17009: LD_ADDR_VAR 0 5
17013: PUSH
17014: LD_VAR 0 3
17018: PUSH
17019: LD_VAR 0 1
17023: STR
17024: PPUSH
17025: CALL_OW 34
17029: ST_TO_ADDR
// if unit then
17030: LD_VAR 0 5
17034: IFFALSE 17051
// DeleteCharacters ( prefix & ident ) ;
17036: LD_VAR 0 3
17040: PUSH
17041: LD_VAR 0 1
17045: STR
17046: PPUSH
17047: CALL_OW 40
// end else
17051: GO 17068
// unit := NewCharacter ( ident ) ;
17053: LD_ADDR_VAR 0 5
17057: PUSH
17058: LD_VAR 0 1
17062: PPUSH
17063: CALL_OW 25
17067: ST_TO_ADDR
// result := unit ;
17068: LD_ADDR_VAR 0 4
17072: PUSH
17073: LD_VAR 0 5
17077: ST_TO_ADDR
// end ;
17078: LD_VAR 0 4
17082: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17083: LD_INT 0
17085: PPUSH
17086: PPUSH
// if not side or not nation then
17087: LD_VAR 0 1
17091: NOT
17092: PUSH
17093: LD_VAR 0 2
17097: NOT
17098: OR
17099: IFFALSE 17103
// exit ;
17101: GO 17871
// case nation of nation_american :
17103: LD_VAR 0 2
17107: PUSH
17108: LD_INT 1
17110: DOUBLE
17111: EQUAL
17112: IFTRUE 17116
17114: GO 17330
17116: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17117: LD_ADDR_VAR 0 4
17121: PUSH
17122: LD_INT 35
17124: PUSH
17125: LD_INT 45
17127: PUSH
17128: LD_INT 46
17130: PUSH
17131: LD_INT 47
17133: PUSH
17134: LD_INT 82
17136: PUSH
17137: LD_INT 83
17139: PUSH
17140: LD_INT 84
17142: PUSH
17143: LD_INT 85
17145: PUSH
17146: LD_INT 86
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: LD_INT 2
17154: PUSH
17155: LD_INT 6
17157: PUSH
17158: LD_INT 15
17160: PUSH
17161: LD_INT 16
17163: PUSH
17164: LD_INT 7
17166: PUSH
17167: LD_INT 12
17169: PUSH
17170: LD_INT 13
17172: PUSH
17173: LD_INT 10
17175: PUSH
17176: LD_INT 14
17178: PUSH
17179: LD_INT 20
17181: PUSH
17182: LD_INT 21
17184: PUSH
17185: LD_INT 22
17187: PUSH
17188: LD_INT 25
17190: PUSH
17191: LD_INT 32
17193: PUSH
17194: LD_INT 27
17196: PUSH
17197: LD_INT 36
17199: PUSH
17200: LD_INT 69
17202: PUSH
17203: LD_INT 39
17205: PUSH
17206: LD_INT 34
17208: PUSH
17209: LD_INT 40
17211: PUSH
17212: LD_INT 48
17214: PUSH
17215: LD_INT 49
17217: PUSH
17218: LD_INT 50
17220: PUSH
17221: LD_INT 51
17223: PUSH
17224: LD_INT 52
17226: PUSH
17227: LD_INT 53
17229: PUSH
17230: LD_INT 54
17232: PUSH
17233: LD_INT 55
17235: PUSH
17236: LD_INT 56
17238: PUSH
17239: LD_INT 57
17241: PUSH
17242: LD_INT 58
17244: PUSH
17245: LD_INT 59
17247: PUSH
17248: LD_INT 60
17250: PUSH
17251: LD_INT 61
17253: PUSH
17254: LD_INT 62
17256: PUSH
17257: LD_INT 80
17259: PUSH
17260: LD_INT 82
17262: PUSH
17263: LD_INT 83
17265: PUSH
17266: LD_INT 84
17268: PUSH
17269: LD_INT 85
17271: PUSH
17272: LD_INT 86
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: ST_TO_ADDR
17328: GO 17795
17330: LD_INT 2
17332: DOUBLE
17333: EQUAL
17334: IFTRUE 17338
17336: GO 17564
17338: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17339: LD_ADDR_VAR 0 4
17343: PUSH
17344: LD_INT 35
17346: PUSH
17347: LD_INT 45
17349: PUSH
17350: LD_INT 46
17352: PUSH
17353: LD_INT 47
17355: PUSH
17356: LD_INT 82
17358: PUSH
17359: LD_INT 83
17361: PUSH
17362: LD_INT 84
17364: PUSH
17365: LD_INT 85
17367: PUSH
17368: LD_INT 87
17370: PUSH
17371: LD_INT 70
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: LD_INT 11
17379: PUSH
17380: LD_INT 3
17382: PUSH
17383: LD_INT 4
17385: PUSH
17386: LD_INT 5
17388: PUSH
17389: LD_INT 6
17391: PUSH
17392: LD_INT 15
17394: PUSH
17395: LD_INT 18
17397: PUSH
17398: LD_INT 7
17400: PUSH
17401: LD_INT 17
17403: PUSH
17404: LD_INT 8
17406: PUSH
17407: LD_INT 20
17409: PUSH
17410: LD_INT 21
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_INT 72
17418: PUSH
17419: LD_INT 26
17421: PUSH
17422: LD_INT 69
17424: PUSH
17425: LD_INT 39
17427: PUSH
17428: LD_INT 40
17430: PUSH
17431: LD_INT 41
17433: PUSH
17434: LD_INT 42
17436: PUSH
17437: LD_INT 43
17439: PUSH
17440: LD_INT 48
17442: PUSH
17443: LD_INT 49
17445: PUSH
17446: LD_INT 50
17448: PUSH
17449: LD_INT 51
17451: PUSH
17452: LD_INT 52
17454: PUSH
17455: LD_INT 53
17457: PUSH
17458: LD_INT 54
17460: PUSH
17461: LD_INT 55
17463: PUSH
17464: LD_INT 56
17466: PUSH
17467: LD_INT 60
17469: PUSH
17470: LD_INT 61
17472: PUSH
17473: LD_INT 62
17475: PUSH
17476: LD_INT 66
17478: PUSH
17479: LD_INT 67
17481: PUSH
17482: LD_INT 68
17484: PUSH
17485: LD_INT 81
17487: PUSH
17488: LD_INT 82
17490: PUSH
17491: LD_INT 83
17493: PUSH
17494: LD_INT 84
17496: PUSH
17497: LD_INT 85
17499: PUSH
17500: LD_INT 87
17502: PUSH
17503: LD_INT 88
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: ST_TO_ADDR
17562: GO 17795
17564: LD_INT 3
17566: DOUBLE
17567: EQUAL
17568: IFTRUE 17572
17570: GO 17794
17572: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17573: LD_ADDR_VAR 0 4
17577: PUSH
17578: LD_INT 46
17580: PUSH
17581: LD_INT 47
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: LD_INT 2
17589: PUSH
17590: LD_INT 82
17592: PUSH
17593: LD_INT 83
17595: PUSH
17596: LD_INT 84
17598: PUSH
17599: LD_INT 85
17601: PUSH
17602: LD_INT 86
17604: PUSH
17605: LD_INT 11
17607: PUSH
17608: LD_INT 9
17610: PUSH
17611: LD_INT 20
17613: PUSH
17614: LD_INT 19
17616: PUSH
17617: LD_INT 21
17619: PUSH
17620: LD_INT 24
17622: PUSH
17623: LD_INT 22
17625: PUSH
17626: LD_INT 25
17628: PUSH
17629: LD_INT 28
17631: PUSH
17632: LD_INT 29
17634: PUSH
17635: LD_INT 30
17637: PUSH
17638: LD_INT 31
17640: PUSH
17641: LD_INT 37
17643: PUSH
17644: LD_INT 38
17646: PUSH
17647: LD_INT 32
17649: PUSH
17650: LD_INT 27
17652: PUSH
17653: LD_INT 33
17655: PUSH
17656: LD_INT 69
17658: PUSH
17659: LD_INT 39
17661: PUSH
17662: LD_INT 34
17664: PUSH
17665: LD_INT 40
17667: PUSH
17668: LD_INT 71
17670: PUSH
17671: LD_INT 23
17673: PUSH
17674: LD_INT 44
17676: PUSH
17677: LD_INT 48
17679: PUSH
17680: LD_INT 49
17682: PUSH
17683: LD_INT 50
17685: PUSH
17686: LD_INT 51
17688: PUSH
17689: LD_INT 52
17691: PUSH
17692: LD_INT 53
17694: PUSH
17695: LD_INT 54
17697: PUSH
17698: LD_INT 55
17700: PUSH
17701: LD_INT 56
17703: PUSH
17704: LD_INT 57
17706: PUSH
17707: LD_INT 58
17709: PUSH
17710: LD_INT 59
17712: PUSH
17713: LD_INT 63
17715: PUSH
17716: LD_INT 64
17718: PUSH
17719: LD_INT 65
17721: PUSH
17722: LD_INT 82
17724: PUSH
17725: LD_INT 83
17727: PUSH
17728: LD_INT 84
17730: PUSH
17731: LD_INT 85
17733: PUSH
17734: LD_INT 86
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: ST_TO_ADDR
17792: GO 17795
17794: POP
// if state > - 1 and state < 3 then
17795: LD_VAR 0 3
17799: PUSH
17800: LD_INT 1
17802: NEG
17803: GREATER
17804: PUSH
17805: LD_VAR 0 3
17809: PUSH
17810: LD_INT 3
17812: LESS
17813: AND
17814: IFFALSE 17871
// for i in result do
17816: LD_ADDR_VAR 0 5
17820: PUSH
17821: LD_VAR 0 4
17825: PUSH
17826: FOR_IN
17827: IFFALSE 17869
// if GetTech ( i , side ) <> state then
17829: LD_VAR 0 5
17833: PPUSH
17834: LD_VAR 0 1
17838: PPUSH
17839: CALL_OW 321
17843: PUSH
17844: LD_VAR 0 3
17848: NONEQUAL
17849: IFFALSE 17867
// result := result diff i ;
17851: LD_ADDR_VAR 0 4
17855: PUSH
17856: LD_VAR 0 4
17860: PUSH
17861: LD_VAR 0 5
17865: DIFF
17866: ST_TO_ADDR
17867: GO 17826
17869: POP
17870: POP
// end ;
17871: LD_VAR 0 4
17875: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17876: LD_INT 0
17878: PPUSH
17879: PPUSH
17880: PPUSH
// result := true ;
17881: LD_ADDR_VAR 0 3
17885: PUSH
17886: LD_INT 1
17888: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17889: LD_ADDR_VAR 0 5
17893: PUSH
17894: LD_VAR 0 2
17898: PPUSH
17899: CALL_OW 480
17903: ST_TO_ADDR
// if not tmp then
17904: LD_VAR 0 5
17908: NOT
17909: IFFALSE 17913
// exit ;
17911: GO 17962
// for i in tmp do
17913: LD_ADDR_VAR 0 4
17917: PUSH
17918: LD_VAR 0 5
17922: PUSH
17923: FOR_IN
17924: IFFALSE 17960
// if GetTech ( i , side ) <> state_researched then
17926: LD_VAR 0 4
17930: PPUSH
17931: LD_VAR 0 1
17935: PPUSH
17936: CALL_OW 321
17940: PUSH
17941: LD_INT 2
17943: NONEQUAL
17944: IFFALSE 17958
// begin result := false ;
17946: LD_ADDR_VAR 0 3
17950: PUSH
17951: LD_INT 0
17953: ST_TO_ADDR
// exit ;
17954: POP
17955: POP
17956: GO 17962
// end ;
17958: GO 17923
17960: POP
17961: POP
// end ;
17962: LD_VAR 0 3
17966: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17967: LD_INT 0
17969: PPUSH
17970: PPUSH
17971: PPUSH
17972: PPUSH
17973: PPUSH
17974: PPUSH
17975: PPUSH
17976: PPUSH
17977: PPUSH
17978: PPUSH
17979: PPUSH
17980: PPUSH
17981: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17982: LD_VAR 0 1
17986: NOT
17987: PUSH
17988: LD_VAR 0 1
17992: PPUSH
17993: CALL_OW 257
17997: PUSH
17998: LD_INT 9
18000: NONEQUAL
18001: OR
18002: IFFALSE 18006
// exit ;
18004: GO 18579
// side := GetSide ( unit ) ;
18006: LD_ADDR_VAR 0 9
18010: PUSH
18011: LD_VAR 0 1
18015: PPUSH
18016: CALL_OW 255
18020: ST_TO_ADDR
// tech_space := tech_spacanom ;
18021: LD_ADDR_VAR 0 12
18025: PUSH
18026: LD_INT 29
18028: ST_TO_ADDR
// tech_time := tech_taurad ;
18029: LD_ADDR_VAR 0 13
18033: PUSH
18034: LD_INT 28
18036: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18037: LD_ADDR_VAR 0 11
18041: PUSH
18042: LD_VAR 0 1
18046: PPUSH
18047: CALL_OW 310
18051: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18052: LD_VAR 0 11
18056: PPUSH
18057: CALL_OW 247
18061: PUSH
18062: LD_INT 2
18064: EQUAL
18065: IFFALSE 18069
// exit ;
18067: GO 18579
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18069: LD_ADDR_VAR 0 8
18073: PUSH
18074: LD_INT 81
18076: PUSH
18077: LD_VAR 0 9
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 3
18088: PUSH
18089: LD_INT 21
18091: PUSH
18092: LD_INT 3
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PPUSH
18107: CALL_OW 69
18111: ST_TO_ADDR
// if not tmp then
18112: LD_VAR 0 8
18116: NOT
18117: IFFALSE 18121
// exit ;
18119: GO 18579
// if in_unit then
18121: LD_VAR 0 11
18125: IFFALSE 18149
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18127: LD_ADDR_VAR 0 10
18131: PUSH
18132: LD_VAR 0 8
18136: PPUSH
18137: LD_VAR 0 11
18141: PPUSH
18142: CALL_OW 74
18146: ST_TO_ADDR
18147: GO 18169
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18149: LD_ADDR_VAR 0 10
18153: PUSH
18154: LD_VAR 0 8
18158: PPUSH
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 74
18168: ST_TO_ADDR
// if not enemy then
18169: LD_VAR 0 10
18173: NOT
18174: IFFALSE 18178
// exit ;
18176: GO 18579
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18178: LD_VAR 0 11
18182: PUSH
18183: LD_VAR 0 11
18187: PPUSH
18188: LD_VAR 0 10
18192: PPUSH
18193: CALL_OW 296
18197: PUSH
18198: LD_INT 13
18200: GREATER
18201: AND
18202: PUSH
18203: LD_VAR 0 1
18207: PPUSH
18208: LD_VAR 0 10
18212: PPUSH
18213: CALL_OW 296
18217: PUSH
18218: LD_INT 12
18220: GREATER
18221: OR
18222: IFFALSE 18226
// exit ;
18224: GO 18579
// missile := [ 1 ] ;
18226: LD_ADDR_VAR 0 14
18230: PUSH
18231: LD_INT 1
18233: PUSH
18234: EMPTY
18235: LIST
18236: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18237: LD_VAR 0 9
18241: PPUSH
18242: LD_VAR 0 12
18246: PPUSH
18247: CALL_OW 325
18251: IFFALSE 18280
// missile := Replace ( missile , missile + 1 , 2 ) ;
18253: LD_ADDR_VAR 0 14
18257: PUSH
18258: LD_VAR 0 14
18262: PPUSH
18263: LD_VAR 0 14
18267: PUSH
18268: LD_INT 1
18270: PLUS
18271: PPUSH
18272: LD_INT 2
18274: PPUSH
18275: CALL_OW 1
18279: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18280: LD_VAR 0 9
18284: PPUSH
18285: LD_VAR 0 13
18289: PPUSH
18290: CALL_OW 325
18294: PUSH
18295: LD_VAR 0 10
18299: PPUSH
18300: CALL_OW 255
18304: PPUSH
18305: LD_VAR 0 13
18309: PPUSH
18310: CALL_OW 325
18314: NOT
18315: AND
18316: IFFALSE 18345
// missile := Replace ( missile , missile + 1 , 3 ) ;
18318: LD_ADDR_VAR 0 14
18322: PUSH
18323: LD_VAR 0 14
18327: PPUSH
18328: LD_VAR 0 14
18332: PUSH
18333: LD_INT 1
18335: PLUS
18336: PPUSH
18337: LD_INT 3
18339: PPUSH
18340: CALL_OW 1
18344: ST_TO_ADDR
// if missile < 2 then
18345: LD_VAR 0 14
18349: PUSH
18350: LD_INT 2
18352: LESS
18353: IFFALSE 18357
// exit ;
18355: GO 18579
// x := GetX ( enemy ) ;
18357: LD_ADDR_VAR 0 4
18361: PUSH
18362: LD_VAR 0 10
18366: PPUSH
18367: CALL_OW 250
18371: ST_TO_ADDR
// y := GetY ( enemy ) ;
18372: LD_ADDR_VAR 0 5
18376: PUSH
18377: LD_VAR 0 10
18381: PPUSH
18382: CALL_OW 251
18386: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18387: LD_ADDR_VAR 0 6
18391: PUSH
18392: LD_VAR 0 4
18396: PUSH
18397: LD_INT 1
18399: NEG
18400: PPUSH
18401: LD_INT 1
18403: PPUSH
18404: CALL_OW 12
18408: PLUS
18409: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18410: LD_ADDR_VAR 0 7
18414: PUSH
18415: LD_VAR 0 5
18419: PUSH
18420: LD_INT 1
18422: NEG
18423: PPUSH
18424: LD_INT 1
18426: PPUSH
18427: CALL_OW 12
18431: PLUS
18432: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18433: LD_VAR 0 6
18437: PPUSH
18438: LD_VAR 0 7
18442: PPUSH
18443: CALL_OW 488
18447: NOT
18448: IFFALSE 18470
// begin _x := x ;
18450: LD_ADDR_VAR 0 6
18454: PUSH
18455: LD_VAR 0 4
18459: ST_TO_ADDR
// _y := y ;
18460: LD_ADDR_VAR 0 7
18464: PUSH
18465: LD_VAR 0 5
18469: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18470: LD_ADDR_VAR 0 3
18474: PUSH
18475: LD_INT 1
18477: PPUSH
18478: LD_VAR 0 14
18482: PPUSH
18483: CALL_OW 12
18487: ST_TO_ADDR
// case i of 1 :
18488: LD_VAR 0 3
18492: PUSH
18493: LD_INT 1
18495: DOUBLE
18496: EQUAL
18497: IFTRUE 18501
18499: GO 18518
18501: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18502: LD_VAR 0 1
18506: PPUSH
18507: LD_VAR 0 10
18511: PPUSH
18512: CALL_OW 115
18516: GO 18579
18518: LD_INT 2
18520: DOUBLE
18521: EQUAL
18522: IFTRUE 18526
18524: GO 18548
18526: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18527: LD_VAR 0 1
18531: PPUSH
18532: LD_VAR 0 6
18536: PPUSH
18537: LD_VAR 0 7
18541: PPUSH
18542: CALL_OW 153
18546: GO 18579
18548: LD_INT 3
18550: DOUBLE
18551: EQUAL
18552: IFTRUE 18556
18554: GO 18578
18556: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18557: LD_VAR 0 1
18561: PPUSH
18562: LD_VAR 0 6
18566: PPUSH
18567: LD_VAR 0 7
18571: PPUSH
18572: CALL_OW 154
18576: GO 18579
18578: POP
// end ;
18579: LD_VAR 0 2
18583: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18584: LD_INT 0
18586: PPUSH
18587: PPUSH
18588: PPUSH
18589: PPUSH
18590: PPUSH
18591: PPUSH
// if not unit or not building then
18592: LD_VAR 0 1
18596: NOT
18597: PUSH
18598: LD_VAR 0 2
18602: NOT
18603: OR
18604: IFFALSE 18608
// exit ;
18606: GO 18766
// x := GetX ( building ) ;
18608: LD_ADDR_VAR 0 5
18612: PUSH
18613: LD_VAR 0 2
18617: PPUSH
18618: CALL_OW 250
18622: ST_TO_ADDR
// y := GetY ( building ) ;
18623: LD_ADDR_VAR 0 6
18627: PUSH
18628: LD_VAR 0 2
18632: PPUSH
18633: CALL_OW 251
18637: ST_TO_ADDR
// for i = 0 to 5 do
18638: LD_ADDR_VAR 0 4
18642: PUSH
18643: DOUBLE
18644: LD_INT 0
18646: DEC
18647: ST_TO_ADDR
18648: LD_INT 5
18650: PUSH
18651: FOR_TO
18652: IFFALSE 18764
// begin _x := ShiftX ( x , i , 3 ) ;
18654: LD_ADDR_VAR 0 7
18658: PUSH
18659: LD_VAR 0 5
18663: PPUSH
18664: LD_VAR 0 4
18668: PPUSH
18669: LD_INT 3
18671: PPUSH
18672: CALL_OW 272
18676: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18677: LD_ADDR_VAR 0 8
18681: PUSH
18682: LD_VAR 0 6
18686: PPUSH
18687: LD_VAR 0 4
18691: PPUSH
18692: LD_INT 3
18694: PPUSH
18695: CALL_OW 273
18699: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18700: LD_VAR 0 7
18704: PPUSH
18705: LD_VAR 0 8
18709: PPUSH
18710: CALL_OW 488
18714: NOT
18715: IFFALSE 18719
// continue ;
18717: GO 18651
// if HexInfo ( _x , _y ) = 0 then
18719: LD_VAR 0 7
18723: PPUSH
18724: LD_VAR 0 8
18728: PPUSH
18729: CALL_OW 428
18733: PUSH
18734: LD_INT 0
18736: EQUAL
18737: IFFALSE 18762
// begin ComMoveXY ( unit , _x , _y ) ;
18739: LD_VAR 0 1
18743: PPUSH
18744: LD_VAR 0 7
18748: PPUSH
18749: LD_VAR 0 8
18753: PPUSH
18754: CALL_OW 111
// exit ;
18758: POP
18759: POP
18760: GO 18766
// end ; end ;
18762: GO 18651
18764: POP
18765: POP
// end ;
18766: LD_VAR 0 3
18770: RET
// export function ScanBase ( side , base_area ) ; begin
18771: LD_INT 0
18773: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18774: LD_ADDR_VAR 0 3
18778: PUSH
18779: LD_VAR 0 2
18783: PPUSH
18784: LD_INT 81
18786: PUSH
18787: LD_VAR 0 1
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PPUSH
18796: CALL_OW 70
18800: ST_TO_ADDR
// end ;
18801: LD_VAR 0 3
18805: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18806: LD_INT 0
18808: PPUSH
18809: PPUSH
18810: PPUSH
18811: PPUSH
// result := false ;
18812: LD_ADDR_VAR 0 2
18816: PUSH
18817: LD_INT 0
18819: ST_TO_ADDR
// side := GetSide ( unit ) ;
18820: LD_ADDR_VAR 0 3
18824: PUSH
18825: LD_VAR 0 1
18829: PPUSH
18830: CALL_OW 255
18834: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18835: LD_ADDR_VAR 0 4
18839: PUSH
18840: LD_VAR 0 1
18844: PPUSH
18845: CALL_OW 248
18849: ST_TO_ADDR
// case nat of 1 :
18850: LD_VAR 0 4
18854: PUSH
18855: LD_INT 1
18857: DOUBLE
18858: EQUAL
18859: IFTRUE 18863
18861: GO 18874
18863: POP
// tech := tech_lassight ; 2 :
18864: LD_ADDR_VAR 0 5
18868: PUSH
18869: LD_INT 12
18871: ST_TO_ADDR
18872: GO 18913
18874: LD_INT 2
18876: DOUBLE
18877: EQUAL
18878: IFTRUE 18882
18880: GO 18893
18882: POP
// tech := tech_mortar ; 3 :
18883: LD_ADDR_VAR 0 5
18887: PUSH
18888: LD_INT 41
18890: ST_TO_ADDR
18891: GO 18913
18893: LD_INT 3
18895: DOUBLE
18896: EQUAL
18897: IFTRUE 18901
18899: GO 18912
18901: POP
// tech := tech_bazooka ; end ;
18902: LD_ADDR_VAR 0 5
18906: PUSH
18907: LD_INT 44
18909: ST_TO_ADDR
18910: GO 18913
18912: POP
// if Researched ( side , tech ) then
18913: LD_VAR 0 3
18917: PPUSH
18918: LD_VAR 0 5
18922: PPUSH
18923: CALL_OW 325
18927: IFFALSE 18954
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18929: LD_ADDR_VAR 0 2
18933: PUSH
18934: LD_INT 5
18936: PUSH
18937: LD_INT 8
18939: PUSH
18940: LD_INT 9
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: PUSH
18948: LD_VAR 0 4
18952: ARRAY
18953: ST_TO_ADDR
// end ;
18954: LD_VAR 0 2
18958: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18959: LD_INT 0
18961: PPUSH
18962: PPUSH
18963: PPUSH
// if not mines then
18964: LD_VAR 0 2
18968: NOT
18969: IFFALSE 18973
// exit ;
18971: GO 19117
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18973: LD_ADDR_VAR 0 5
18977: PUSH
18978: LD_INT 81
18980: PUSH
18981: LD_VAR 0 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 3
18992: PUSH
18993: LD_INT 21
18995: PUSH
18996: LD_INT 3
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PPUSH
19011: CALL_OW 69
19015: ST_TO_ADDR
// for i in mines do
19016: LD_ADDR_VAR 0 4
19020: PUSH
19021: LD_VAR 0 2
19025: PUSH
19026: FOR_IN
19027: IFFALSE 19115
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19029: LD_VAR 0 4
19033: PUSH
19034: LD_INT 1
19036: ARRAY
19037: PPUSH
19038: LD_VAR 0 4
19042: PUSH
19043: LD_INT 2
19045: ARRAY
19046: PPUSH
19047: CALL_OW 458
19051: NOT
19052: IFFALSE 19056
// continue ;
19054: GO 19026
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19056: LD_VAR 0 4
19060: PUSH
19061: LD_INT 1
19063: ARRAY
19064: PPUSH
19065: LD_VAR 0 4
19069: PUSH
19070: LD_INT 2
19072: ARRAY
19073: PPUSH
19074: CALL_OW 428
19078: PUSH
19079: LD_VAR 0 5
19083: IN
19084: IFFALSE 19113
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19086: LD_VAR 0 4
19090: PUSH
19091: LD_INT 1
19093: ARRAY
19094: PPUSH
19095: LD_VAR 0 4
19099: PUSH
19100: LD_INT 2
19102: ARRAY
19103: PPUSH
19104: LD_VAR 0 1
19108: PPUSH
19109: CALL_OW 456
// end ;
19113: GO 19026
19115: POP
19116: POP
// end ;
19117: LD_VAR 0 3
19121: RET
// export function Count ( array ) ; begin
19122: LD_INT 0
19124: PPUSH
// result := array + 0 ;
19125: LD_ADDR_VAR 0 2
19129: PUSH
19130: LD_VAR 0 1
19134: PUSH
19135: LD_INT 0
19137: PLUS
19138: ST_TO_ADDR
// end ;
19139: LD_VAR 0 2
19143: RET
// export function IsEmpty ( building ) ; begin
19144: LD_INT 0
19146: PPUSH
// if not building then
19147: LD_VAR 0 1
19151: NOT
19152: IFFALSE 19156
// exit ;
19154: GO 19199
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19156: LD_ADDR_VAR 0 2
19160: PUSH
19161: LD_VAR 0 1
19165: PUSH
19166: LD_INT 22
19168: PUSH
19169: LD_VAR 0 1
19173: PPUSH
19174: CALL_OW 255
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 58
19185: PUSH
19186: EMPTY
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PPUSH
19193: CALL_OW 69
19197: IN
19198: ST_TO_ADDR
// end ;
19199: LD_VAR 0 2
19203: RET
// export function IsNotFull ( building ) ; var places ; begin
19204: LD_INT 0
19206: PPUSH
19207: PPUSH
// if not building then
19208: LD_VAR 0 1
19212: NOT
19213: IFFALSE 19217
// exit ;
19215: GO 19245
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19217: LD_ADDR_VAR 0 2
19221: PUSH
19222: LD_VAR 0 1
19226: PPUSH
19227: LD_INT 3
19229: PUSH
19230: LD_INT 62
19232: PUSH
19233: EMPTY
19234: LIST
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PPUSH
19240: CALL_OW 72
19244: ST_TO_ADDR
// end ;
19245: LD_VAR 0 2
19249: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19250: LD_INT 0
19252: PPUSH
19253: PPUSH
19254: PPUSH
19255: PPUSH
// tmp := [ ] ;
19256: LD_ADDR_VAR 0 3
19260: PUSH
19261: EMPTY
19262: ST_TO_ADDR
// list := [ ] ;
19263: LD_ADDR_VAR 0 5
19267: PUSH
19268: EMPTY
19269: ST_TO_ADDR
// for i = 16 to 25 do
19270: LD_ADDR_VAR 0 4
19274: PUSH
19275: DOUBLE
19276: LD_INT 16
19278: DEC
19279: ST_TO_ADDR
19280: LD_INT 25
19282: PUSH
19283: FOR_TO
19284: IFFALSE 19357
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19286: LD_ADDR_VAR 0 3
19290: PUSH
19291: LD_VAR 0 3
19295: PUSH
19296: LD_INT 22
19298: PUSH
19299: LD_VAR 0 1
19303: PPUSH
19304: CALL_OW 255
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 91
19315: PUSH
19316: LD_VAR 0 1
19320: PUSH
19321: LD_INT 6
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 30
19331: PUSH
19332: LD_VAR 0 4
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: LIST
19345: PUSH
19346: EMPTY
19347: LIST
19348: PPUSH
19349: CALL_OW 69
19353: ADD
19354: ST_TO_ADDR
19355: GO 19283
19357: POP
19358: POP
// for i = 1 to tmp do
19359: LD_ADDR_VAR 0 4
19363: PUSH
19364: DOUBLE
19365: LD_INT 1
19367: DEC
19368: ST_TO_ADDR
19369: LD_VAR 0 3
19373: PUSH
19374: FOR_TO
19375: IFFALSE 19463
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19377: LD_ADDR_VAR 0 5
19381: PUSH
19382: LD_VAR 0 5
19386: PUSH
19387: LD_VAR 0 3
19391: PUSH
19392: LD_VAR 0 4
19396: ARRAY
19397: PPUSH
19398: CALL_OW 266
19402: PUSH
19403: LD_VAR 0 3
19407: PUSH
19408: LD_VAR 0 4
19412: ARRAY
19413: PPUSH
19414: CALL_OW 250
19418: PUSH
19419: LD_VAR 0 3
19423: PUSH
19424: LD_VAR 0 4
19428: ARRAY
19429: PPUSH
19430: CALL_OW 251
19434: PUSH
19435: LD_VAR 0 3
19439: PUSH
19440: LD_VAR 0 4
19444: ARRAY
19445: PPUSH
19446: CALL_OW 254
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: PUSH
19457: EMPTY
19458: LIST
19459: ADD
19460: ST_TO_ADDR
19461: GO 19374
19463: POP
19464: POP
// result := list ;
19465: LD_ADDR_VAR 0 2
19469: PUSH
19470: LD_VAR 0 5
19474: ST_TO_ADDR
// end ;
19475: LD_VAR 0 2
19479: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19480: LD_INT 0
19482: PPUSH
19483: PPUSH
19484: PPUSH
19485: PPUSH
19486: PPUSH
19487: PPUSH
19488: PPUSH
// if not factory then
19489: LD_VAR 0 1
19493: NOT
19494: IFFALSE 19498
// exit ;
19496: GO 20091
// if control = control_apeman then
19498: LD_VAR 0 4
19502: PUSH
19503: LD_INT 5
19505: EQUAL
19506: IFFALSE 19615
// begin tmp := UnitsInside ( factory ) ;
19508: LD_ADDR_VAR 0 8
19512: PUSH
19513: LD_VAR 0 1
19517: PPUSH
19518: CALL_OW 313
19522: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19523: LD_VAR 0 8
19527: PPUSH
19528: LD_INT 25
19530: PUSH
19531: LD_INT 12
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 72
19542: NOT
19543: IFFALSE 19553
// control := control_manual ;
19545: LD_ADDR_VAR 0 4
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19553: LD_ADDR_VAR 0 8
19557: PUSH
19558: LD_VAR 0 1
19562: PPUSH
19563: CALL 19250 0 1
19567: ST_TO_ADDR
// if tmp then
19568: LD_VAR 0 8
19572: IFFALSE 19615
// begin for i in tmp do
19574: LD_ADDR_VAR 0 7
19578: PUSH
19579: LD_VAR 0 8
19583: PUSH
19584: FOR_IN
19585: IFFALSE 19613
// if i [ 1 ] = b_ext_radio then
19587: LD_VAR 0 7
19591: PUSH
19592: LD_INT 1
19594: ARRAY
19595: PUSH
19596: LD_INT 22
19598: EQUAL
19599: IFFALSE 19611
// begin control := control_remote ;
19601: LD_ADDR_VAR 0 4
19605: PUSH
19606: LD_INT 2
19608: ST_TO_ADDR
// break ;
19609: GO 19613
// end ;
19611: GO 19584
19613: POP
19614: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19615: LD_VAR 0 1
19619: PPUSH
19620: LD_VAR 0 2
19624: PPUSH
19625: LD_VAR 0 3
19629: PPUSH
19630: LD_VAR 0 4
19634: PPUSH
19635: LD_VAR 0 5
19639: PPUSH
19640: CALL_OW 448
19644: IFFALSE 19679
// begin result := [ chassis , engine , control , weapon ] ;
19646: LD_ADDR_VAR 0 6
19650: PUSH
19651: LD_VAR 0 2
19655: PUSH
19656: LD_VAR 0 3
19660: PUSH
19661: LD_VAR 0 4
19665: PUSH
19666: LD_VAR 0 5
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: ST_TO_ADDR
// exit ;
19677: GO 20091
// end ; _chassis := AvailableChassisList ( factory ) ;
19679: LD_ADDR_VAR 0 9
19683: PUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 475
19693: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19694: LD_ADDR_VAR 0 11
19698: PUSH
19699: LD_VAR 0 1
19703: PPUSH
19704: CALL_OW 476
19708: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19709: LD_ADDR_VAR 0 12
19713: PUSH
19714: LD_VAR 0 1
19718: PPUSH
19719: CALL_OW 477
19723: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19724: LD_ADDR_VAR 0 10
19728: PUSH
19729: LD_VAR 0 1
19733: PPUSH
19734: CALL_OW 478
19738: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19739: LD_VAR 0 9
19743: NOT
19744: PUSH
19745: LD_VAR 0 11
19749: NOT
19750: OR
19751: PUSH
19752: LD_VAR 0 12
19756: NOT
19757: OR
19758: PUSH
19759: LD_VAR 0 10
19763: NOT
19764: OR
19765: IFFALSE 19800
// begin result := [ chassis , engine , control , weapon ] ;
19767: LD_ADDR_VAR 0 6
19771: PUSH
19772: LD_VAR 0 2
19776: PUSH
19777: LD_VAR 0 3
19781: PUSH
19782: LD_VAR 0 4
19786: PUSH
19787: LD_VAR 0 5
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: ST_TO_ADDR
// exit ;
19798: GO 20091
// end ; if not chassis in _chassis then
19800: LD_VAR 0 2
19804: PUSH
19805: LD_VAR 0 9
19809: IN
19810: NOT
19811: IFFALSE 19837
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19813: LD_ADDR_VAR 0 2
19817: PUSH
19818: LD_VAR 0 9
19822: PUSH
19823: LD_INT 1
19825: PPUSH
19826: LD_VAR 0 9
19830: PPUSH
19831: CALL_OW 12
19835: ARRAY
19836: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19837: LD_VAR 0 2
19841: PPUSH
19842: LD_VAR 0 3
19846: PPUSH
19847: CALL 20096 0 2
19851: NOT
19852: IFFALSE 19911
// repeat engine := _engine [ 1 ] ;
19854: LD_ADDR_VAR 0 3
19858: PUSH
19859: LD_VAR 0 11
19863: PUSH
19864: LD_INT 1
19866: ARRAY
19867: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19868: LD_ADDR_VAR 0 11
19872: PUSH
19873: LD_VAR 0 11
19877: PPUSH
19878: LD_INT 1
19880: PPUSH
19881: CALL_OW 3
19885: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19886: LD_VAR 0 2
19890: PPUSH
19891: LD_VAR 0 3
19895: PPUSH
19896: CALL 20096 0 2
19900: PUSH
19901: LD_VAR 0 11
19905: PUSH
19906: EMPTY
19907: EQUAL
19908: OR
19909: IFFALSE 19854
// if not control in _control then
19911: LD_VAR 0 4
19915: PUSH
19916: LD_VAR 0 12
19920: IN
19921: NOT
19922: IFFALSE 19948
// control := _control [ rand ( 1 , _control ) ] ;
19924: LD_ADDR_VAR 0 4
19928: PUSH
19929: LD_VAR 0 12
19933: PUSH
19934: LD_INT 1
19936: PPUSH
19937: LD_VAR 0 12
19941: PPUSH
19942: CALL_OW 12
19946: ARRAY
19947: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19948: LD_VAR 0 2
19952: PPUSH
19953: LD_VAR 0 5
19957: PPUSH
19958: CALL 20316 0 2
19962: NOT
19963: IFFALSE 20022
// repeat weapon := _weapon [ 1 ] ;
19965: LD_ADDR_VAR 0 5
19969: PUSH
19970: LD_VAR 0 10
19974: PUSH
19975: LD_INT 1
19977: ARRAY
19978: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19979: LD_ADDR_VAR 0 10
19983: PUSH
19984: LD_VAR 0 10
19988: PPUSH
19989: LD_INT 1
19991: PPUSH
19992: CALL_OW 3
19996: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19997: LD_VAR 0 2
20001: PPUSH
20002: LD_VAR 0 5
20006: PPUSH
20007: CALL 20316 0 2
20011: PUSH
20012: LD_VAR 0 10
20016: PUSH
20017: EMPTY
20018: EQUAL
20019: OR
20020: IFFALSE 19965
// result := [ ] ;
20022: LD_ADDR_VAR 0 6
20026: PUSH
20027: EMPTY
20028: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20029: LD_VAR 0 1
20033: PPUSH
20034: LD_VAR 0 2
20038: PPUSH
20039: LD_VAR 0 3
20043: PPUSH
20044: LD_VAR 0 4
20048: PPUSH
20049: LD_VAR 0 5
20053: PPUSH
20054: CALL_OW 448
20058: IFFALSE 20091
// result := [ chassis , engine , control , weapon ] ;
20060: LD_ADDR_VAR 0 6
20064: PUSH
20065: LD_VAR 0 2
20069: PUSH
20070: LD_VAR 0 3
20074: PUSH
20075: LD_VAR 0 4
20079: PUSH
20080: LD_VAR 0 5
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: ST_TO_ADDR
// end ;
20091: LD_VAR 0 6
20095: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20096: LD_INT 0
20098: PPUSH
// if not chassis or not engine then
20099: LD_VAR 0 1
20103: NOT
20104: PUSH
20105: LD_VAR 0 2
20109: NOT
20110: OR
20111: IFFALSE 20115
// exit ;
20113: GO 20311
// case engine of engine_solar :
20115: LD_VAR 0 2
20119: PUSH
20120: LD_INT 2
20122: DOUBLE
20123: EQUAL
20124: IFTRUE 20128
20126: GO 20166
20128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20129: LD_ADDR_VAR 0 3
20133: PUSH
20134: LD_INT 11
20136: PUSH
20137: LD_INT 12
20139: PUSH
20140: LD_INT 13
20142: PUSH
20143: LD_INT 14
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: LD_INT 2
20151: PUSH
20152: LD_INT 3
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: ST_TO_ADDR
20164: GO 20295
20166: LD_INT 1
20168: DOUBLE
20169: EQUAL
20170: IFTRUE 20174
20172: GO 20236
20174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20175: LD_ADDR_VAR 0 3
20179: PUSH
20180: LD_INT 11
20182: PUSH
20183: LD_INT 12
20185: PUSH
20186: LD_INT 13
20188: PUSH
20189: LD_INT 14
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: LD_INT 3
20200: PUSH
20201: LD_INT 4
20203: PUSH
20204: LD_INT 5
20206: PUSH
20207: LD_INT 21
20209: PUSH
20210: LD_INT 23
20212: PUSH
20213: LD_INT 22
20215: PUSH
20216: LD_INT 24
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: ST_TO_ADDR
20234: GO 20295
20236: LD_INT 3
20238: DOUBLE
20239: EQUAL
20240: IFTRUE 20244
20242: GO 20294
20244: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20245: LD_ADDR_VAR 0 3
20249: PUSH
20250: LD_INT 13
20252: PUSH
20253: LD_INT 14
20255: PUSH
20256: LD_INT 2
20258: PUSH
20259: LD_INT 3
20261: PUSH
20262: LD_INT 4
20264: PUSH
20265: LD_INT 5
20267: PUSH
20268: LD_INT 21
20270: PUSH
20271: LD_INT 22
20273: PUSH
20274: LD_INT 23
20276: PUSH
20277: LD_INT 24
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: ST_TO_ADDR
20292: GO 20295
20294: POP
// result := ( chassis in result ) ;
20295: LD_ADDR_VAR 0 3
20299: PUSH
20300: LD_VAR 0 1
20304: PUSH
20305: LD_VAR 0 3
20309: IN
20310: ST_TO_ADDR
// end ;
20311: LD_VAR 0 3
20315: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20316: LD_INT 0
20318: PPUSH
// if not chassis or not weapon then
20319: LD_VAR 0 1
20323: NOT
20324: PUSH
20325: LD_VAR 0 2
20329: NOT
20330: OR
20331: IFFALSE 20335
// exit ;
20333: GO 21395
// case weapon of us_machine_gun :
20335: LD_VAR 0 2
20339: PUSH
20340: LD_INT 2
20342: DOUBLE
20343: EQUAL
20344: IFTRUE 20348
20346: GO 20378
20348: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20349: LD_ADDR_VAR 0 3
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: LD_INT 3
20362: PUSH
20363: LD_INT 4
20365: PUSH
20366: LD_INT 5
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: ST_TO_ADDR
20376: GO 21379
20378: LD_INT 3
20380: DOUBLE
20381: EQUAL
20382: IFTRUE 20386
20384: GO 20416
20386: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20387: LD_ADDR_VAR 0 3
20391: PUSH
20392: LD_INT 1
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: LD_INT 3
20400: PUSH
20401: LD_INT 4
20403: PUSH
20404: LD_INT 5
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: ST_TO_ADDR
20414: GO 21379
20416: LD_INT 11
20418: DOUBLE
20419: EQUAL
20420: IFTRUE 20424
20422: GO 20454
20424: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20425: LD_ADDR_VAR 0 3
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 3
20438: PUSH
20439: LD_INT 4
20441: PUSH
20442: LD_INT 5
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: ST_TO_ADDR
20452: GO 21379
20454: LD_INT 4
20456: DOUBLE
20457: EQUAL
20458: IFTRUE 20462
20460: GO 20488
20462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20463: LD_ADDR_VAR 0 3
20467: PUSH
20468: LD_INT 2
20470: PUSH
20471: LD_INT 3
20473: PUSH
20474: LD_INT 4
20476: PUSH
20477: LD_INT 5
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: ST_TO_ADDR
20486: GO 21379
20488: LD_INT 5
20490: DOUBLE
20491: EQUAL
20492: IFTRUE 20496
20494: GO 20522
20496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20497: LD_ADDR_VAR 0 3
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 3
20507: PUSH
20508: LD_INT 4
20510: PUSH
20511: LD_INT 5
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: ST_TO_ADDR
20520: GO 21379
20522: LD_INT 9
20524: DOUBLE
20525: EQUAL
20526: IFTRUE 20530
20528: GO 20556
20530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20531: LD_ADDR_VAR 0 3
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: LD_INT 3
20541: PUSH
20542: LD_INT 4
20544: PUSH
20545: LD_INT 5
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: ST_TO_ADDR
20554: GO 21379
20556: LD_INT 7
20558: DOUBLE
20559: EQUAL
20560: IFTRUE 20564
20562: GO 20590
20564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20565: LD_ADDR_VAR 0 3
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: LD_INT 3
20575: PUSH
20576: LD_INT 4
20578: PUSH
20579: LD_INT 5
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: ST_TO_ADDR
20588: GO 21379
20590: LD_INT 12
20592: DOUBLE
20593: EQUAL
20594: IFTRUE 20598
20596: GO 20624
20598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20599: LD_ADDR_VAR 0 3
20603: PUSH
20604: LD_INT 2
20606: PUSH
20607: LD_INT 3
20609: PUSH
20610: LD_INT 4
20612: PUSH
20613: LD_INT 5
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: ST_TO_ADDR
20622: GO 21379
20624: LD_INT 13
20626: DOUBLE
20627: EQUAL
20628: IFTRUE 20632
20630: GO 20658
20632: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20633: LD_ADDR_VAR 0 3
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: LD_INT 3
20643: PUSH
20644: LD_INT 4
20646: PUSH
20647: LD_INT 5
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: ST_TO_ADDR
20656: GO 21379
20658: LD_INT 14
20660: DOUBLE
20661: EQUAL
20662: IFTRUE 20666
20664: GO 20684
20666: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20667: LD_ADDR_VAR 0 3
20671: PUSH
20672: LD_INT 4
20674: PUSH
20675: LD_INT 5
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: ST_TO_ADDR
20682: GO 21379
20684: LD_INT 6
20686: DOUBLE
20687: EQUAL
20688: IFTRUE 20692
20690: GO 20710
20692: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20693: LD_ADDR_VAR 0 3
20697: PUSH
20698: LD_INT 4
20700: PUSH
20701: LD_INT 5
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: ST_TO_ADDR
20708: GO 21379
20710: LD_INT 10
20712: DOUBLE
20713: EQUAL
20714: IFTRUE 20718
20716: GO 20736
20718: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20719: LD_ADDR_VAR 0 3
20723: PUSH
20724: LD_INT 4
20726: PUSH
20727: LD_INT 5
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: ST_TO_ADDR
20734: GO 21379
20736: LD_INT 22
20738: DOUBLE
20739: EQUAL
20740: IFTRUE 20744
20742: GO 20770
20744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20745: LD_ADDR_VAR 0 3
20749: PUSH
20750: LD_INT 11
20752: PUSH
20753: LD_INT 12
20755: PUSH
20756: LD_INT 13
20758: PUSH
20759: LD_INT 14
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: ST_TO_ADDR
20768: GO 21379
20770: LD_INT 23
20772: DOUBLE
20773: EQUAL
20774: IFTRUE 20778
20776: GO 20804
20778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20779: LD_ADDR_VAR 0 3
20783: PUSH
20784: LD_INT 11
20786: PUSH
20787: LD_INT 12
20789: PUSH
20790: LD_INT 13
20792: PUSH
20793: LD_INT 14
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: ST_TO_ADDR
20802: GO 21379
20804: LD_INT 24
20806: DOUBLE
20807: EQUAL
20808: IFTRUE 20812
20810: GO 20838
20812: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20813: LD_ADDR_VAR 0 3
20817: PUSH
20818: LD_INT 11
20820: PUSH
20821: LD_INT 12
20823: PUSH
20824: LD_INT 13
20826: PUSH
20827: LD_INT 14
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: ST_TO_ADDR
20836: GO 21379
20838: LD_INT 30
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20872
20846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20847: LD_ADDR_VAR 0 3
20851: PUSH
20852: LD_INT 11
20854: PUSH
20855: LD_INT 12
20857: PUSH
20858: LD_INT 13
20860: PUSH
20861: LD_INT 14
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: ST_TO_ADDR
20870: GO 21379
20872: LD_INT 25
20874: DOUBLE
20875: EQUAL
20876: IFTRUE 20880
20878: GO 20898
20880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20881: LD_ADDR_VAR 0 3
20885: PUSH
20886: LD_INT 13
20888: PUSH
20889: LD_INT 14
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: ST_TO_ADDR
20896: GO 21379
20898: LD_INT 27
20900: DOUBLE
20901: EQUAL
20902: IFTRUE 20906
20904: GO 20924
20906: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20907: LD_ADDR_VAR 0 3
20911: PUSH
20912: LD_INT 13
20914: PUSH
20915: LD_INT 14
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: ST_TO_ADDR
20922: GO 21379
20924: LD_INT 92
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 20958
20932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20933: LD_ADDR_VAR 0 3
20937: PUSH
20938: LD_INT 11
20940: PUSH
20941: LD_INT 12
20943: PUSH
20944: LD_INT 13
20946: PUSH
20947: LD_INT 14
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: ST_TO_ADDR
20956: GO 21379
20958: LD_INT 28
20960: DOUBLE
20961: EQUAL
20962: IFTRUE 20966
20964: GO 20984
20966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20967: LD_ADDR_VAR 0 3
20971: PUSH
20972: LD_INT 13
20974: PUSH
20975: LD_INT 14
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: ST_TO_ADDR
20982: GO 21379
20984: LD_INT 29
20986: DOUBLE
20987: EQUAL
20988: IFTRUE 20992
20990: GO 21010
20992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20993: LD_ADDR_VAR 0 3
20997: PUSH
20998: LD_INT 13
21000: PUSH
21001: LD_INT 14
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: ST_TO_ADDR
21008: GO 21379
21010: LD_INT 31
21012: DOUBLE
21013: EQUAL
21014: IFTRUE 21018
21016: GO 21036
21018: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21019: LD_ADDR_VAR 0 3
21023: PUSH
21024: LD_INT 13
21026: PUSH
21027: LD_INT 14
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: ST_TO_ADDR
21034: GO 21379
21036: LD_INT 26
21038: DOUBLE
21039: EQUAL
21040: IFTRUE 21044
21042: GO 21062
21044: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21045: LD_ADDR_VAR 0 3
21049: PUSH
21050: LD_INT 13
21052: PUSH
21053: LD_INT 14
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: ST_TO_ADDR
21060: GO 21379
21062: LD_INT 42
21064: DOUBLE
21065: EQUAL
21066: IFTRUE 21070
21068: GO 21096
21070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21071: LD_ADDR_VAR 0 3
21075: PUSH
21076: LD_INT 21
21078: PUSH
21079: LD_INT 22
21081: PUSH
21082: LD_INT 23
21084: PUSH
21085: LD_INT 24
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: ST_TO_ADDR
21094: GO 21379
21096: LD_INT 43
21098: DOUBLE
21099: EQUAL
21100: IFTRUE 21104
21102: GO 21130
21104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21105: LD_ADDR_VAR 0 3
21109: PUSH
21110: LD_INT 21
21112: PUSH
21113: LD_INT 22
21115: PUSH
21116: LD_INT 23
21118: PUSH
21119: LD_INT 24
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: ST_TO_ADDR
21128: GO 21379
21130: LD_INT 44
21132: DOUBLE
21133: EQUAL
21134: IFTRUE 21138
21136: GO 21164
21138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21139: LD_ADDR_VAR 0 3
21143: PUSH
21144: LD_INT 21
21146: PUSH
21147: LD_INT 22
21149: PUSH
21150: LD_INT 23
21152: PUSH
21153: LD_INT 24
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: ST_TO_ADDR
21162: GO 21379
21164: LD_INT 45
21166: DOUBLE
21167: EQUAL
21168: IFTRUE 21172
21170: GO 21198
21172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21173: LD_ADDR_VAR 0 3
21177: PUSH
21178: LD_INT 21
21180: PUSH
21181: LD_INT 22
21183: PUSH
21184: LD_INT 23
21186: PUSH
21187: LD_INT 24
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: ST_TO_ADDR
21196: GO 21379
21198: LD_INT 49
21200: DOUBLE
21201: EQUAL
21202: IFTRUE 21206
21204: GO 21232
21206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21207: LD_ADDR_VAR 0 3
21211: PUSH
21212: LD_INT 21
21214: PUSH
21215: LD_INT 22
21217: PUSH
21218: LD_INT 23
21220: PUSH
21221: LD_INT 24
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: ST_TO_ADDR
21230: GO 21379
21232: LD_INT 51
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21266
21240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21241: LD_ADDR_VAR 0 3
21245: PUSH
21246: LD_INT 21
21248: PUSH
21249: LD_INT 22
21251: PUSH
21252: LD_INT 23
21254: PUSH
21255: LD_INT 24
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: ST_TO_ADDR
21264: GO 21379
21266: LD_INT 52
21268: DOUBLE
21269: EQUAL
21270: IFTRUE 21274
21272: GO 21300
21274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21275: LD_ADDR_VAR 0 3
21279: PUSH
21280: LD_INT 21
21282: PUSH
21283: LD_INT 22
21285: PUSH
21286: LD_INT 23
21288: PUSH
21289: LD_INT 24
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: ST_TO_ADDR
21298: GO 21379
21300: LD_INT 53
21302: DOUBLE
21303: EQUAL
21304: IFTRUE 21308
21306: GO 21326
21308: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21309: LD_ADDR_VAR 0 3
21313: PUSH
21314: LD_INT 23
21316: PUSH
21317: LD_INT 24
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: ST_TO_ADDR
21324: GO 21379
21326: LD_INT 46
21328: DOUBLE
21329: EQUAL
21330: IFTRUE 21334
21332: GO 21352
21334: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21335: LD_ADDR_VAR 0 3
21339: PUSH
21340: LD_INT 23
21342: PUSH
21343: LD_INT 24
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: ST_TO_ADDR
21350: GO 21379
21352: LD_INT 47
21354: DOUBLE
21355: EQUAL
21356: IFTRUE 21360
21358: GO 21378
21360: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21361: LD_ADDR_VAR 0 3
21365: PUSH
21366: LD_INT 23
21368: PUSH
21369: LD_INT 24
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: ST_TO_ADDR
21376: GO 21379
21378: POP
// result := ( chassis in result ) ;
21379: LD_ADDR_VAR 0 3
21383: PUSH
21384: LD_VAR 0 1
21388: PUSH
21389: LD_VAR 0 3
21393: IN
21394: ST_TO_ADDR
// end ;
21395: LD_VAR 0 3
21399: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21400: LD_INT 0
21402: PPUSH
21403: PPUSH
21404: PPUSH
21405: PPUSH
21406: PPUSH
21407: PPUSH
21408: PPUSH
// result := array ;
21409: LD_ADDR_VAR 0 5
21413: PUSH
21414: LD_VAR 0 1
21418: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21419: LD_VAR 0 1
21423: NOT
21424: PUSH
21425: LD_VAR 0 2
21429: NOT
21430: OR
21431: PUSH
21432: LD_VAR 0 3
21436: NOT
21437: OR
21438: PUSH
21439: LD_VAR 0 2
21443: PUSH
21444: LD_VAR 0 1
21448: GREATER
21449: OR
21450: PUSH
21451: LD_VAR 0 3
21455: PUSH
21456: LD_VAR 0 1
21460: GREATER
21461: OR
21462: IFFALSE 21466
// exit ;
21464: GO 21762
// if direction then
21466: LD_VAR 0 4
21470: IFFALSE 21534
// begin d := 1 ;
21472: LD_ADDR_VAR 0 9
21476: PUSH
21477: LD_INT 1
21479: ST_TO_ADDR
// if i_from > i_to then
21480: LD_VAR 0 2
21484: PUSH
21485: LD_VAR 0 3
21489: GREATER
21490: IFFALSE 21516
// length := ( array - i_from ) + i_to else
21492: LD_ADDR_VAR 0 11
21496: PUSH
21497: LD_VAR 0 1
21501: PUSH
21502: LD_VAR 0 2
21506: MINUS
21507: PUSH
21508: LD_VAR 0 3
21512: PLUS
21513: ST_TO_ADDR
21514: GO 21532
// length := i_to - i_from ;
21516: LD_ADDR_VAR 0 11
21520: PUSH
21521: LD_VAR 0 3
21525: PUSH
21526: LD_VAR 0 2
21530: MINUS
21531: ST_TO_ADDR
// end else
21532: GO 21595
// begin d := - 1 ;
21534: LD_ADDR_VAR 0 9
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: ST_TO_ADDR
// if i_from > i_to then
21543: LD_VAR 0 2
21547: PUSH
21548: LD_VAR 0 3
21552: GREATER
21553: IFFALSE 21573
// length := i_from - i_to else
21555: LD_ADDR_VAR 0 11
21559: PUSH
21560: LD_VAR 0 2
21564: PUSH
21565: LD_VAR 0 3
21569: MINUS
21570: ST_TO_ADDR
21571: GO 21595
// length := ( array - i_to ) + i_from ;
21573: LD_ADDR_VAR 0 11
21577: PUSH
21578: LD_VAR 0 1
21582: PUSH
21583: LD_VAR 0 3
21587: MINUS
21588: PUSH
21589: LD_VAR 0 2
21593: PLUS
21594: ST_TO_ADDR
// end ; if not length then
21595: LD_VAR 0 11
21599: NOT
21600: IFFALSE 21604
// exit ;
21602: GO 21762
// tmp := array ;
21604: LD_ADDR_VAR 0 10
21608: PUSH
21609: LD_VAR 0 1
21613: ST_TO_ADDR
// for i = 1 to length do
21614: LD_ADDR_VAR 0 6
21618: PUSH
21619: DOUBLE
21620: LD_INT 1
21622: DEC
21623: ST_TO_ADDR
21624: LD_VAR 0 11
21628: PUSH
21629: FOR_TO
21630: IFFALSE 21750
// begin for j = 1 to array do
21632: LD_ADDR_VAR 0 7
21636: PUSH
21637: DOUBLE
21638: LD_INT 1
21640: DEC
21641: ST_TO_ADDR
21642: LD_VAR 0 1
21646: PUSH
21647: FOR_TO
21648: IFFALSE 21736
// begin k := j + d ;
21650: LD_ADDR_VAR 0 8
21654: PUSH
21655: LD_VAR 0 7
21659: PUSH
21660: LD_VAR 0 9
21664: PLUS
21665: ST_TO_ADDR
// if k > array then
21666: LD_VAR 0 8
21670: PUSH
21671: LD_VAR 0 1
21675: GREATER
21676: IFFALSE 21686
// k := 1 ;
21678: LD_ADDR_VAR 0 8
21682: PUSH
21683: LD_INT 1
21685: ST_TO_ADDR
// if not k then
21686: LD_VAR 0 8
21690: NOT
21691: IFFALSE 21703
// k := array ;
21693: LD_ADDR_VAR 0 8
21697: PUSH
21698: LD_VAR 0 1
21702: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21703: LD_ADDR_VAR 0 10
21707: PUSH
21708: LD_VAR 0 10
21712: PPUSH
21713: LD_VAR 0 8
21717: PPUSH
21718: LD_VAR 0 1
21722: PUSH
21723: LD_VAR 0 7
21727: ARRAY
21728: PPUSH
21729: CALL_OW 1
21733: ST_TO_ADDR
// end ;
21734: GO 21647
21736: POP
21737: POP
// array := tmp ;
21738: LD_ADDR_VAR 0 1
21742: PUSH
21743: LD_VAR 0 10
21747: ST_TO_ADDR
// end ;
21748: GO 21629
21750: POP
21751: POP
// result := array ;
21752: LD_ADDR_VAR 0 5
21756: PUSH
21757: LD_VAR 0 1
21761: ST_TO_ADDR
// end ;
21762: LD_VAR 0 5
21766: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21767: LD_INT 0
21769: PPUSH
21770: PPUSH
// result := 0 ;
21771: LD_ADDR_VAR 0 3
21775: PUSH
21776: LD_INT 0
21778: ST_TO_ADDR
// if not array or not value in array then
21779: LD_VAR 0 1
21783: NOT
21784: PUSH
21785: LD_VAR 0 2
21789: PUSH
21790: LD_VAR 0 1
21794: IN
21795: NOT
21796: OR
21797: IFFALSE 21801
// exit ;
21799: GO 21855
// for i = 1 to array do
21801: LD_ADDR_VAR 0 4
21805: PUSH
21806: DOUBLE
21807: LD_INT 1
21809: DEC
21810: ST_TO_ADDR
21811: LD_VAR 0 1
21815: PUSH
21816: FOR_TO
21817: IFFALSE 21853
// if value = array [ i ] then
21819: LD_VAR 0 2
21823: PUSH
21824: LD_VAR 0 1
21828: PUSH
21829: LD_VAR 0 4
21833: ARRAY
21834: EQUAL
21835: IFFALSE 21851
// begin result := i ;
21837: LD_ADDR_VAR 0 3
21841: PUSH
21842: LD_VAR 0 4
21846: ST_TO_ADDR
// exit ;
21847: POP
21848: POP
21849: GO 21855
// end ;
21851: GO 21816
21853: POP
21854: POP
// end ;
21855: LD_VAR 0 3
21859: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21860: LD_INT 0
21862: PPUSH
// vc_chassis := chassis ;
21863: LD_ADDR_OWVAR 37
21867: PUSH
21868: LD_VAR 0 1
21872: ST_TO_ADDR
// vc_engine := engine ;
21873: LD_ADDR_OWVAR 39
21877: PUSH
21878: LD_VAR 0 2
21882: ST_TO_ADDR
// vc_control := control ;
21883: LD_ADDR_OWVAR 38
21887: PUSH
21888: LD_VAR 0 3
21892: ST_TO_ADDR
// vc_weapon := weapon ;
21893: LD_ADDR_OWVAR 40
21897: PUSH
21898: LD_VAR 0 4
21902: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21903: LD_ADDR_OWVAR 41
21907: PUSH
21908: LD_VAR 0 5
21912: ST_TO_ADDR
// end ;
21913: LD_VAR 0 6
21917: RET
// export function WantPlant ( unit ) ; var task ; begin
21918: LD_INT 0
21920: PPUSH
21921: PPUSH
// result := false ;
21922: LD_ADDR_VAR 0 2
21926: PUSH
21927: LD_INT 0
21929: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21930: LD_ADDR_VAR 0 3
21934: PUSH
21935: LD_VAR 0 1
21939: PPUSH
21940: CALL_OW 437
21944: ST_TO_ADDR
// if task then
21945: LD_VAR 0 3
21949: IFFALSE 21977
// if task [ 1 ] [ 1 ] = p then
21951: LD_VAR 0 3
21955: PUSH
21956: LD_INT 1
21958: ARRAY
21959: PUSH
21960: LD_INT 1
21962: ARRAY
21963: PUSH
21964: LD_STRING p
21966: EQUAL
21967: IFFALSE 21977
// result := true ;
21969: LD_ADDR_VAR 0 2
21973: PUSH
21974: LD_INT 1
21976: ST_TO_ADDR
// end ;
21977: LD_VAR 0 2
21981: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21982: LD_INT 0
21984: PPUSH
21985: PPUSH
21986: PPUSH
21987: PPUSH
// if pos < 1 then
21988: LD_VAR 0 2
21992: PUSH
21993: LD_INT 1
21995: LESS
21996: IFFALSE 22000
// exit ;
21998: GO 22303
// if pos = 1 then
22000: LD_VAR 0 2
22004: PUSH
22005: LD_INT 1
22007: EQUAL
22008: IFFALSE 22041
// result := Replace ( arr , pos [ 1 ] , value ) else
22010: LD_ADDR_VAR 0 4
22014: PUSH
22015: LD_VAR 0 1
22019: PPUSH
22020: LD_VAR 0 2
22024: PUSH
22025: LD_INT 1
22027: ARRAY
22028: PPUSH
22029: LD_VAR 0 3
22033: PPUSH
22034: CALL_OW 1
22038: ST_TO_ADDR
22039: GO 22303
// begin tmp := arr ;
22041: LD_ADDR_VAR 0 6
22045: PUSH
22046: LD_VAR 0 1
22050: ST_TO_ADDR
// s_arr := [ tmp ] ;
22051: LD_ADDR_VAR 0 7
22055: PUSH
22056: LD_VAR 0 6
22060: PUSH
22061: EMPTY
22062: LIST
22063: ST_TO_ADDR
// for i = 1 to pos - 1 do
22064: LD_ADDR_VAR 0 5
22068: PUSH
22069: DOUBLE
22070: LD_INT 1
22072: DEC
22073: ST_TO_ADDR
22074: LD_VAR 0 2
22078: PUSH
22079: LD_INT 1
22081: MINUS
22082: PUSH
22083: FOR_TO
22084: IFFALSE 22129
// begin tmp := tmp [ pos [ i ] ] ;
22086: LD_ADDR_VAR 0 6
22090: PUSH
22091: LD_VAR 0 6
22095: PUSH
22096: LD_VAR 0 2
22100: PUSH
22101: LD_VAR 0 5
22105: ARRAY
22106: ARRAY
22107: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22108: LD_ADDR_VAR 0 7
22112: PUSH
22113: LD_VAR 0 7
22117: PUSH
22118: LD_VAR 0 6
22122: PUSH
22123: EMPTY
22124: LIST
22125: ADD
22126: ST_TO_ADDR
// end ;
22127: GO 22083
22129: POP
22130: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22131: LD_ADDR_VAR 0 6
22135: PUSH
22136: LD_VAR 0 6
22140: PPUSH
22141: LD_VAR 0 2
22145: PUSH
22146: LD_VAR 0 2
22150: ARRAY
22151: PPUSH
22152: LD_VAR 0 3
22156: PPUSH
22157: CALL_OW 1
22161: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22162: LD_ADDR_VAR 0 7
22166: PUSH
22167: LD_VAR 0 7
22171: PPUSH
22172: LD_VAR 0 7
22176: PPUSH
22177: LD_VAR 0 6
22181: PPUSH
22182: CALL_OW 1
22186: ST_TO_ADDR
// for i = s_arr downto 2 do
22187: LD_ADDR_VAR 0 5
22191: PUSH
22192: DOUBLE
22193: LD_VAR 0 7
22197: INC
22198: ST_TO_ADDR
22199: LD_INT 2
22201: PUSH
22202: FOR_DOWNTO
22203: IFFALSE 22287
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22205: LD_ADDR_VAR 0 6
22209: PUSH
22210: LD_VAR 0 7
22214: PUSH
22215: LD_VAR 0 5
22219: PUSH
22220: LD_INT 1
22222: MINUS
22223: ARRAY
22224: PPUSH
22225: LD_VAR 0 2
22229: PUSH
22230: LD_VAR 0 5
22234: PUSH
22235: LD_INT 1
22237: MINUS
22238: ARRAY
22239: PPUSH
22240: LD_VAR 0 7
22244: PUSH
22245: LD_VAR 0 5
22249: ARRAY
22250: PPUSH
22251: CALL_OW 1
22255: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22256: LD_ADDR_VAR 0 7
22260: PUSH
22261: LD_VAR 0 7
22265: PPUSH
22266: LD_VAR 0 5
22270: PUSH
22271: LD_INT 1
22273: MINUS
22274: PPUSH
22275: LD_VAR 0 6
22279: PPUSH
22280: CALL_OW 1
22284: ST_TO_ADDR
// end ;
22285: GO 22202
22287: POP
22288: POP
// result := s_arr [ 1 ] ;
22289: LD_ADDR_VAR 0 4
22293: PUSH
22294: LD_VAR 0 7
22298: PUSH
22299: LD_INT 1
22301: ARRAY
22302: ST_TO_ADDR
// end ; end ;
22303: LD_VAR 0 4
22307: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22308: LD_INT 0
22310: PPUSH
22311: PPUSH
// if not list then
22312: LD_VAR 0 1
22316: NOT
22317: IFFALSE 22321
// exit ;
22319: GO 22412
// i := list [ pos1 ] ;
22321: LD_ADDR_VAR 0 5
22325: PUSH
22326: LD_VAR 0 1
22330: PUSH
22331: LD_VAR 0 2
22335: ARRAY
22336: ST_TO_ADDR
// if not i then
22337: LD_VAR 0 5
22341: NOT
22342: IFFALSE 22346
// exit ;
22344: GO 22412
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22346: LD_ADDR_VAR 0 1
22350: PUSH
22351: LD_VAR 0 1
22355: PPUSH
22356: LD_VAR 0 2
22360: PPUSH
22361: LD_VAR 0 1
22365: PUSH
22366: LD_VAR 0 3
22370: ARRAY
22371: PPUSH
22372: CALL_OW 1
22376: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22377: LD_ADDR_VAR 0 1
22381: PUSH
22382: LD_VAR 0 1
22386: PPUSH
22387: LD_VAR 0 3
22391: PPUSH
22392: LD_VAR 0 5
22396: PPUSH
22397: CALL_OW 1
22401: ST_TO_ADDR
// result := list ;
22402: LD_ADDR_VAR 0 4
22406: PUSH
22407: LD_VAR 0 1
22411: ST_TO_ADDR
// end ;
22412: LD_VAR 0 4
22416: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22417: LD_INT 0
22419: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22420: LD_ADDR_VAR 0 5
22424: PUSH
22425: LD_VAR 0 1
22429: PPUSH
22430: CALL_OW 250
22434: PPUSH
22435: LD_VAR 0 1
22439: PPUSH
22440: CALL_OW 251
22444: PPUSH
22445: LD_VAR 0 2
22449: PPUSH
22450: LD_VAR 0 3
22454: PPUSH
22455: LD_VAR 0 4
22459: PPUSH
22460: CALL 22838 0 5
22464: ST_TO_ADDR
// end ;
22465: LD_VAR 0 5
22469: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22470: LD_INT 0
22472: PPUSH
22473: PPUSH
22474: PPUSH
22475: PPUSH
// if not list or not unit then
22476: LD_VAR 0 2
22480: NOT
22481: PUSH
22482: LD_VAR 0 1
22486: NOT
22487: OR
22488: IFFALSE 22492
// exit ;
22490: GO 22833
// result := [ ] ;
22492: LD_ADDR_VAR 0 5
22496: PUSH
22497: EMPTY
22498: ST_TO_ADDR
// for i in list do
22499: LD_ADDR_VAR 0 6
22503: PUSH
22504: LD_VAR 0 2
22508: PUSH
22509: FOR_IN
22510: IFFALSE 22728
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22512: LD_ADDR_VAR 0 8
22516: PUSH
22517: LD_VAR 0 1
22521: PPUSH
22522: LD_VAR 0 6
22526: PUSH
22527: LD_INT 1
22529: ARRAY
22530: PPUSH
22531: LD_VAR 0 6
22535: PUSH
22536: LD_INT 2
22538: ARRAY
22539: PPUSH
22540: CALL_OW 297
22544: ST_TO_ADDR
// if not Count ( result ) then
22545: LD_VAR 0 5
22549: PPUSH
22550: CALL 19122 0 1
22554: NOT
22555: IFFALSE 22588
// begin result := Join ( result , [ i , tmp ] ) ;
22557: LD_ADDR_VAR 0 5
22561: PUSH
22562: LD_VAR 0 5
22566: PPUSH
22567: LD_VAR 0 6
22571: PUSH
22572: LD_VAR 0 8
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PPUSH
22581: CALL 54731 0 2
22585: ST_TO_ADDR
// continue ;
22586: GO 22509
// end ; if result [ result ] [ 2 ] <= tmp then
22588: LD_VAR 0 5
22592: PUSH
22593: LD_VAR 0 5
22597: ARRAY
22598: PUSH
22599: LD_INT 2
22601: ARRAY
22602: PUSH
22603: LD_VAR 0 8
22607: LESSEQUAL
22608: IFFALSE 22641
// result := Join ( result , [ i , tmp ] ) else
22610: LD_ADDR_VAR 0 5
22614: PUSH
22615: LD_VAR 0 5
22619: PPUSH
22620: LD_VAR 0 6
22624: PUSH
22625: LD_VAR 0 8
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PPUSH
22634: CALL 54731 0 2
22638: ST_TO_ADDR
22639: GO 22726
// begin for j := 1 to Count ( result ) do
22641: LD_ADDR_VAR 0 7
22645: PUSH
22646: DOUBLE
22647: LD_INT 1
22649: DEC
22650: ST_TO_ADDR
22651: LD_VAR 0 5
22655: PPUSH
22656: CALL 19122 0 1
22660: PUSH
22661: FOR_TO
22662: IFFALSE 22724
// begin if tmp < result [ j ] [ 2 ] then
22664: LD_VAR 0 8
22668: PUSH
22669: LD_VAR 0 5
22673: PUSH
22674: LD_VAR 0 7
22678: ARRAY
22679: PUSH
22680: LD_INT 2
22682: ARRAY
22683: LESS
22684: IFFALSE 22722
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22686: LD_ADDR_VAR 0 5
22690: PUSH
22691: LD_VAR 0 5
22695: PPUSH
22696: LD_VAR 0 7
22700: PPUSH
22701: LD_VAR 0 6
22705: PUSH
22706: LD_VAR 0 8
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PPUSH
22715: CALL_OW 2
22719: ST_TO_ADDR
// break ;
22720: GO 22724
// end ; end ;
22722: GO 22661
22724: POP
22725: POP
// end ; end ;
22726: GO 22509
22728: POP
22729: POP
// if result and not asc then
22730: LD_VAR 0 5
22734: PUSH
22735: LD_VAR 0 3
22739: NOT
22740: AND
22741: IFFALSE 22758
// result := ReverseArray ( result ) ;
22743: LD_ADDR_VAR 0 5
22747: PUSH
22748: LD_VAR 0 5
22752: PPUSH
22753: CALL 49998 0 1
22757: ST_TO_ADDR
// tmp := [ ] ;
22758: LD_ADDR_VAR 0 8
22762: PUSH
22763: EMPTY
22764: ST_TO_ADDR
// if mode then
22765: LD_VAR 0 4
22769: IFFALSE 22833
// begin for i := 1 to result do
22771: LD_ADDR_VAR 0 6
22775: PUSH
22776: DOUBLE
22777: LD_INT 1
22779: DEC
22780: ST_TO_ADDR
22781: LD_VAR 0 5
22785: PUSH
22786: FOR_TO
22787: IFFALSE 22821
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22789: LD_ADDR_VAR 0 8
22793: PUSH
22794: LD_VAR 0 8
22798: PPUSH
22799: LD_VAR 0 5
22803: PUSH
22804: LD_VAR 0 6
22808: ARRAY
22809: PUSH
22810: LD_INT 1
22812: ARRAY
22813: PPUSH
22814: CALL 54731 0 2
22818: ST_TO_ADDR
22819: GO 22786
22821: POP
22822: POP
// result := tmp ;
22823: LD_ADDR_VAR 0 5
22827: PUSH
22828: LD_VAR 0 8
22832: ST_TO_ADDR
// end ; end ;
22833: LD_VAR 0 5
22837: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22838: LD_INT 0
22840: PPUSH
22841: PPUSH
22842: PPUSH
22843: PPUSH
// if not list then
22844: LD_VAR 0 3
22848: NOT
22849: IFFALSE 22853
// exit ;
22851: GO 23241
// result := [ ] ;
22853: LD_ADDR_VAR 0 6
22857: PUSH
22858: EMPTY
22859: ST_TO_ADDR
// for i in list do
22860: LD_ADDR_VAR 0 7
22864: PUSH
22865: LD_VAR 0 3
22869: PUSH
22870: FOR_IN
22871: IFFALSE 23073
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22873: LD_ADDR_VAR 0 9
22877: PUSH
22878: LD_VAR 0 7
22882: PPUSH
22883: LD_VAR 0 1
22887: PPUSH
22888: LD_VAR 0 2
22892: PPUSH
22893: CALL_OW 297
22897: ST_TO_ADDR
// if not result then
22898: LD_VAR 0 6
22902: NOT
22903: IFFALSE 22929
// result := [ [ i , tmp ] ] else
22905: LD_ADDR_VAR 0 6
22909: PUSH
22910: LD_VAR 0 7
22914: PUSH
22915: LD_VAR 0 9
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: ST_TO_ADDR
22927: GO 23071
// begin if result [ result ] [ 2 ] <= tmp then
22929: LD_VAR 0 6
22933: PUSH
22934: LD_VAR 0 6
22938: ARRAY
22939: PUSH
22940: LD_INT 2
22942: ARRAY
22943: PUSH
22944: LD_VAR 0 9
22948: LESSEQUAL
22949: IFFALSE 22991
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22951: LD_ADDR_VAR 0 6
22955: PUSH
22956: LD_VAR 0 6
22960: PPUSH
22961: LD_VAR 0 6
22965: PUSH
22966: LD_INT 1
22968: PLUS
22969: PPUSH
22970: LD_VAR 0 7
22974: PUSH
22975: LD_VAR 0 9
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PPUSH
22984: CALL_OW 2
22988: ST_TO_ADDR
22989: GO 23071
// for j := 1 to result do
22991: LD_ADDR_VAR 0 8
22995: PUSH
22996: DOUBLE
22997: LD_INT 1
22999: DEC
23000: ST_TO_ADDR
23001: LD_VAR 0 6
23005: PUSH
23006: FOR_TO
23007: IFFALSE 23069
// begin if tmp < result [ j ] [ 2 ] then
23009: LD_VAR 0 9
23013: PUSH
23014: LD_VAR 0 6
23018: PUSH
23019: LD_VAR 0 8
23023: ARRAY
23024: PUSH
23025: LD_INT 2
23027: ARRAY
23028: LESS
23029: IFFALSE 23067
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23031: LD_ADDR_VAR 0 6
23035: PUSH
23036: LD_VAR 0 6
23040: PPUSH
23041: LD_VAR 0 8
23045: PPUSH
23046: LD_VAR 0 7
23050: PUSH
23051: LD_VAR 0 9
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PPUSH
23060: CALL_OW 2
23064: ST_TO_ADDR
// break ;
23065: GO 23069
// end ; end ;
23067: GO 23006
23069: POP
23070: POP
// end ; end ;
23071: GO 22870
23073: POP
23074: POP
// if result and not asc then
23075: LD_VAR 0 6
23079: PUSH
23080: LD_VAR 0 4
23084: NOT
23085: AND
23086: IFFALSE 23161
// begin tmp := result ;
23088: LD_ADDR_VAR 0 9
23092: PUSH
23093: LD_VAR 0 6
23097: ST_TO_ADDR
// for i = tmp downto 1 do
23098: LD_ADDR_VAR 0 7
23102: PUSH
23103: DOUBLE
23104: LD_VAR 0 9
23108: INC
23109: ST_TO_ADDR
23110: LD_INT 1
23112: PUSH
23113: FOR_DOWNTO
23114: IFFALSE 23159
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23116: LD_ADDR_VAR 0 6
23120: PUSH
23121: LD_VAR 0 6
23125: PPUSH
23126: LD_VAR 0 9
23130: PUSH
23131: LD_VAR 0 7
23135: MINUS
23136: PUSH
23137: LD_INT 1
23139: PLUS
23140: PPUSH
23141: LD_VAR 0 9
23145: PUSH
23146: LD_VAR 0 7
23150: ARRAY
23151: PPUSH
23152: CALL_OW 1
23156: ST_TO_ADDR
23157: GO 23113
23159: POP
23160: POP
// end ; tmp := [ ] ;
23161: LD_ADDR_VAR 0 9
23165: PUSH
23166: EMPTY
23167: ST_TO_ADDR
// if mode then
23168: LD_VAR 0 5
23172: IFFALSE 23241
// begin for i = 1 to result do
23174: LD_ADDR_VAR 0 7
23178: PUSH
23179: DOUBLE
23180: LD_INT 1
23182: DEC
23183: ST_TO_ADDR
23184: LD_VAR 0 6
23188: PUSH
23189: FOR_TO
23190: IFFALSE 23229
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23192: LD_ADDR_VAR 0 9
23196: PUSH
23197: LD_VAR 0 9
23201: PPUSH
23202: LD_VAR 0 7
23206: PPUSH
23207: LD_VAR 0 6
23211: PUSH
23212: LD_VAR 0 7
23216: ARRAY
23217: PUSH
23218: LD_INT 1
23220: ARRAY
23221: PPUSH
23222: CALL_OW 1
23226: ST_TO_ADDR
23227: GO 23189
23229: POP
23230: POP
// result := tmp ;
23231: LD_ADDR_VAR 0 6
23235: PUSH
23236: LD_VAR 0 9
23240: ST_TO_ADDR
// end ; end ;
23241: LD_VAR 0 6
23245: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23246: LD_INT 0
23248: PPUSH
23249: PPUSH
23250: PPUSH
23251: PPUSH
23252: PPUSH
23253: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23254: LD_ADDR_VAR 0 5
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: EMPTY
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: ST_TO_ADDR
// if not x or not y then
23276: LD_VAR 0 2
23280: NOT
23281: PUSH
23282: LD_VAR 0 3
23286: NOT
23287: OR
23288: IFFALSE 23292
// exit ;
23290: GO 24942
// if not range then
23292: LD_VAR 0 4
23296: NOT
23297: IFFALSE 23307
// range := 10 ;
23299: LD_ADDR_VAR 0 4
23303: PUSH
23304: LD_INT 10
23306: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23307: LD_ADDR_VAR 0 8
23311: PUSH
23312: LD_INT 81
23314: PUSH
23315: LD_VAR 0 1
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 92
23326: PUSH
23327: LD_VAR 0 2
23331: PUSH
23332: LD_VAR 0 3
23336: PUSH
23337: LD_VAR 0 4
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 3
23350: PUSH
23351: LD_INT 21
23353: PUSH
23354: LD_INT 3
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: PPUSH
23370: CALL_OW 69
23374: ST_TO_ADDR
// if not tmp then
23375: LD_VAR 0 8
23379: NOT
23380: IFFALSE 23384
// exit ;
23382: GO 24942
// for i in tmp do
23384: LD_ADDR_VAR 0 6
23388: PUSH
23389: LD_VAR 0 8
23393: PUSH
23394: FOR_IN
23395: IFFALSE 24917
// begin points := [ 0 , 0 , 0 ] ;
23397: LD_ADDR_VAR 0 9
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: ST_TO_ADDR
// bpoints := 1 ;
23416: LD_ADDR_VAR 0 10
23420: PUSH
23421: LD_INT 1
23423: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23424: LD_VAR 0 6
23428: PPUSH
23429: CALL_OW 247
23433: PUSH
23434: LD_INT 1
23436: DOUBLE
23437: EQUAL
23438: IFTRUE 23442
23440: GO 24020
23442: POP
// begin if GetClass ( i ) = 1 then
23443: LD_VAR 0 6
23447: PPUSH
23448: CALL_OW 257
23452: PUSH
23453: LD_INT 1
23455: EQUAL
23456: IFFALSE 23477
// points := [ 10 , 5 , 3 ] ;
23458: LD_ADDR_VAR 0 9
23462: PUSH
23463: LD_INT 10
23465: PUSH
23466: LD_INT 5
23468: PUSH
23469: LD_INT 3
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: LIST
23476: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23477: LD_VAR 0 6
23481: PPUSH
23482: CALL_OW 257
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: LD_INT 3
23492: PUSH
23493: LD_INT 4
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: IN
23501: IFFALSE 23522
// points := [ 3 , 2 , 1 ] ;
23503: LD_ADDR_VAR 0 9
23507: PUSH
23508: LD_INT 3
23510: PUSH
23511: LD_INT 2
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23522: LD_VAR 0 6
23526: PPUSH
23527: CALL_OW 257
23531: PUSH
23532: LD_INT 5
23534: EQUAL
23535: IFFALSE 23556
// points := [ 130 , 5 , 2 ] ;
23537: LD_ADDR_VAR 0 9
23541: PUSH
23542: LD_INT 130
23544: PUSH
23545: LD_INT 5
23547: PUSH
23548: LD_INT 2
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23556: LD_VAR 0 6
23560: PPUSH
23561: CALL_OW 257
23565: PUSH
23566: LD_INT 8
23568: EQUAL
23569: IFFALSE 23590
// points := [ 35 , 35 , 30 ] ;
23571: LD_ADDR_VAR 0 9
23575: PUSH
23576: LD_INT 35
23578: PUSH
23579: LD_INT 35
23581: PUSH
23582: LD_INT 30
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23590: LD_VAR 0 6
23594: PPUSH
23595: CALL_OW 257
23599: PUSH
23600: LD_INT 9
23602: EQUAL
23603: IFFALSE 23624
// points := [ 20 , 55 , 40 ] ;
23605: LD_ADDR_VAR 0 9
23609: PUSH
23610: LD_INT 20
23612: PUSH
23613: LD_INT 55
23615: PUSH
23616: LD_INT 40
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: LIST
23623: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23624: LD_VAR 0 6
23628: PPUSH
23629: CALL_OW 257
23633: PUSH
23634: LD_INT 12
23636: PUSH
23637: LD_INT 16
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: IN
23644: IFFALSE 23665
// points := [ 5 , 3 , 2 ] ;
23646: LD_ADDR_VAR 0 9
23650: PUSH
23651: LD_INT 5
23653: PUSH
23654: LD_INT 3
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: LIST
23664: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23665: LD_VAR 0 6
23669: PPUSH
23670: CALL_OW 257
23674: PUSH
23675: LD_INT 17
23677: EQUAL
23678: IFFALSE 23699
// points := [ 100 , 50 , 75 ] ;
23680: LD_ADDR_VAR 0 9
23684: PUSH
23685: LD_INT 100
23687: PUSH
23688: LD_INT 50
23690: PUSH
23691: LD_INT 75
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: LIST
23698: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23699: LD_VAR 0 6
23703: PPUSH
23704: CALL_OW 257
23708: PUSH
23709: LD_INT 15
23711: EQUAL
23712: IFFALSE 23733
// points := [ 10 , 5 , 3 ] ;
23714: LD_ADDR_VAR 0 9
23718: PUSH
23719: LD_INT 10
23721: PUSH
23722: LD_INT 5
23724: PUSH
23725: LD_INT 3
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23733: LD_VAR 0 6
23737: PPUSH
23738: CALL_OW 257
23742: PUSH
23743: LD_INT 14
23745: EQUAL
23746: IFFALSE 23767
// points := [ 10 , 0 , 0 ] ;
23748: LD_ADDR_VAR 0 9
23752: PUSH
23753: LD_INT 10
23755: PUSH
23756: LD_INT 0
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: LIST
23766: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23767: LD_VAR 0 6
23771: PPUSH
23772: CALL_OW 257
23776: PUSH
23777: LD_INT 11
23779: EQUAL
23780: IFFALSE 23801
// points := [ 30 , 10 , 5 ] ;
23782: LD_ADDR_VAR 0 9
23786: PUSH
23787: LD_INT 30
23789: PUSH
23790: LD_INT 10
23792: PUSH
23793: LD_INT 5
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23801: LD_VAR 0 1
23805: PPUSH
23806: LD_INT 5
23808: PPUSH
23809: CALL_OW 321
23813: PUSH
23814: LD_INT 2
23816: EQUAL
23817: IFFALSE 23834
// bpoints := bpoints * 1.8 ;
23819: LD_ADDR_VAR 0 10
23823: PUSH
23824: LD_VAR 0 10
23828: PUSH
23829: LD_REAL  1.80000000000000E+0000
23832: MUL
23833: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23834: LD_VAR 0 6
23838: PPUSH
23839: CALL_OW 257
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 3
23852: PUSH
23853: LD_INT 4
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: IN
23862: PUSH
23863: LD_VAR 0 1
23867: PPUSH
23868: LD_INT 51
23870: PPUSH
23871: CALL_OW 321
23875: PUSH
23876: LD_INT 2
23878: EQUAL
23879: AND
23880: IFFALSE 23897
// bpoints := bpoints * 1.2 ;
23882: LD_ADDR_VAR 0 10
23886: PUSH
23887: LD_VAR 0 10
23891: PUSH
23892: LD_REAL  1.20000000000000E+0000
23895: MUL
23896: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23897: LD_VAR 0 6
23901: PPUSH
23902: CALL_OW 257
23906: PUSH
23907: LD_INT 5
23909: PUSH
23910: LD_INT 7
23912: PUSH
23913: LD_INT 9
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: IN
23921: PUSH
23922: LD_VAR 0 1
23926: PPUSH
23927: LD_INT 52
23929: PPUSH
23930: CALL_OW 321
23934: PUSH
23935: LD_INT 2
23937: EQUAL
23938: AND
23939: IFFALSE 23956
// bpoints := bpoints * 1.5 ;
23941: LD_ADDR_VAR 0 10
23945: PUSH
23946: LD_VAR 0 10
23950: PUSH
23951: LD_REAL  1.50000000000000E+0000
23954: MUL
23955: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23956: LD_VAR 0 1
23960: PPUSH
23961: LD_INT 66
23963: PPUSH
23964: CALL_OW 321
23968: PUSH
23969: LD_INT 2
23971: EQUAL
23972: IFFALSE 23989
// bpoints := bpoints * 1.1 ;
23974: LD_ADDR_VAR 0 10
23978: PUSH
23979: LD_VAR 0 10
23983: PUSH
23984: LD_REAL  1.10000000000000E+0000
23987: MUL
23988: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23989: LD_ADDR_VAR 0 10
23993: PUSH
23994: LD_VAR 0 10
23998: PUSH
23999: LD_VAR 0 6
24003: PPUSH
24004: LD_INT 1
24006: PPUSH
24007: CALL_OW 259
24011: PUSH
24012: LD_REAL  1.15000000000000E+0000
24015: MUL
24016: MUL
24017: ST_TO_ADDR
// end ; unit_vehicle :
24018: GO 24846
24020: LD_INT 2
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24834
24028: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24029: LD_VAR 0 6
24033: PPUSH
24034: CALL_OW 264
24038: PUSH
24039: LD_INT 2
24041: PUSH
24042: LD_INT 42
24044: PUSH
24045: LD_INT 24
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: IN
24053: IFFALSE 24074
// points := [ 25 , 5 , 3 ] ;
24055: LD_ADDR_VAR 0 9
24059: PUSH
24060: LD_INT 25
24062: PUSH
24063: LD_INT 5
24065: PUSH
24066: LD_INT 3
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: LIST
24073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24074: LD_VAR 0 6
24078: PPUSH
24079: CALL_OW 264
24083: PUSH
24084: LD_INT 4
24086: PUSH
24087: LD_INT 43
24089: PUSH
24090: LD_INT 25
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: LIST
24097: IN
24098: IFFALSE 24119
// points := [ 40 , 15 , 5 ] ;
24100: LD_ADDR_VAR 0 9
24104: PUSH
24105: LD_INT 40
24107: PUSH
24108: LD_INT 15
24110: PUSH
24111: LD_INT 5
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: LIST
24118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24119: LD_VAR 0 6
24123: PPUSH
24124: CALL_OW 264
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 23
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: IN
24139: IFFALSE 24160
// points := [ 7 , 25 , 8 ] ;
24141: LD_ADDR_VAR 0 9
24145: PUSH
24146: LD_INT 7
24148: PUSH
24149: LD_INT 25
24151: PUSH
24152: LD_INT 8
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24160: LD_VAR 0 6
24164: PPUSH
24165: CALL_OW 264
24169: PUSH
24170: LD_INT 5
24172: PUSH
24173: LD_INT 27
24175: PUSH
24176: LD_INT 44
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: IN
24184: IFFALSE 24205
// points := [ 14 , 50 , 16 ] ;
24186: LD_ADDR_VAR 0 9
24190: PUSH
24191: LD_INT 14
24193: PUSH
24194: LD_INT 50
24196: PUSH
24197: LD_INT 16
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24205: LD_VAR 0 6
24209: PPUSH
24210: CALL_OW 264
24214: PUSH
24215: LD_INT 6
24217: PUSH
24218: LD_INT 46
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: IN
24225: IFFALSE 24246
// points := [ 32 , 120 , 70 ] ;
24227: LD_ADDR_VAR 0 9
24231: PUSH
24232: LD_INT 32
24234: PUSH
24235: LD_INT 120
24237: PUSH
24238: LD_INT 70
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: LIST
24245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24246: LD_VAR 0 6
24250: PPUSH
24251: CALL_OW 264
24255: PUSH
24256: LD_INT 7
24258: PUSH
24259: LD_INT 28
24261: PUSH
24262: LD_INT 45
24264: PUSH
24265: LD_INT 92
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: IN
24274: IFFALSE 24295
// points := [ 35 , 20 , 45 ] ;
24276: LD_ADDR_VAR 0 9
24280: PUSH
24281: LD_INT 35
24283: PUSH
24284: LD_INT 20
24286: PUSH
24287: LD_INT 45
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: LIST
24294: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24295: LD_VAR 0 6
24299: PPUSH
24300: CALL_OW 264
24304: PUSH
24305: LD_INT 47
24307: PUSH
24308: EMPTY
24309: LIST
24310: IN
24311: IFFALSE 24332
// points := [ 67 , 45 , 75 ] ;
24313: LD_ADDR_VAR 0 9
24317: PUSH
24318: LD_INT 67
24320: PUSH
24321: LD_INT 45
24323: PUSH
24324: LD_INT 75
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: LIST
24331: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24332: LD_VAR 0 6
24336: PPUSH
24337: CALL_OW 264
24341: PUSH
24342: LD_INT 26
24344: PUSH
24345: EMPTY
24346: LIST
24347: IN
24348: IFFALSE 24369
// points := [ 120 , 30 , 80 ] ;
24350: LD_ADDR_VAR 0 9
24354: PUSH
24355: LD_INT 120
24357: PUSH
24358: LD_INT 30
24360: PUSH
24361: LD_INT 80
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: LIST
24368: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24369: LD_VAR 0 6
24373: PPUSH
24374: CALL_OW 264
24378: PUSH
24379: LD_INT 22
24381: PUSH
24382: EMPTY
24383: LIST
24384: IN
24385: IFFALSE 24406
// points := [ 40 , 1 , 1 ] ;
24387: LD_ADDR_VAR 0 9
24391: PUSH
24392: LD_INT 40
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: LIST
24405: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24406: LD_VAR 0 6
24410: PPUSH
24411: CALL_OW 264
24415: PUSH
24416: LD_INT 29
24418: PUSH
24419: EMPTY
24420: LIST
24421: IN
24422: IFFALSE 24443
// points := [ 70 , 200 , 400 ] ;
24424: LD_ADDR_VAR 0 9
24428: PUSH
24429: LD_INT 70
24431: PUSH
24432: LD_INT 200
24434: PUSH
24435: LD_INT 400
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24443: LD_VAR 0 6
24447: PPUSH
24448: CALL_OW 264
24452: PUSH
24453: LD_INT 14
24455: PUSH
24456: LD_INT 53
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: IN
24463: IFFALSE 24484
// points := [ 40 , 10 , 20 ] ;
24465: LD_ADDR_VAR 0 9
24469: PUSH
24470: LD_INT 40
24472: PUSH
24473: LD_INT 10
24475: PUSH
24476: LD_INT 20
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: LIST
24483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24484: LD_VAR 0 6
24488: PPUSH
24489: CALL_OW 264
24493: PUSH
24494: LD_INT 9
24496: PUSH
24497: EMPTY
24498: LIST
24499: IN
24500: IFFALSE 24521
// points := [ 5 , 70 , 20 ] ;
24502: LD_ADDR_VAR 0 9
24506: PUSH
24507: LD_INT 5
24509: PUSH
24510: LD_INT 70
24512: PUSH
24513: LD_INT 20
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: LIST
24520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24521: LD_VAR 0 6
24525: PPUSH
24526: CALL_OW 264
24530: PUSH
24531: LD_INT 10
24533: PUSH
24534: EMPTY
24535: LIST
24536: IN
24537: IFFALSE 24558
// points := [ 35 , 110 , 70 ] ;
24539: LD_ADDR_VAR 0 9
24543: PUSH
24544: LD_INT 35
24546: PUSH
24547: LD_INT 110
24549: PUSH
24550: LD_INT 70
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24558: LD_VAR 0 6
24562: PPUSH
24563: CALL_OW 265
24567: PUSH
24568: LD_INT 25
24570: EQUAL
24571: IFFALSE 24592
// points := [ 80 , 65 , 100 ] ;
24573: LD_ADDR_VAR 0 9
24577: PUSH
24578: LD_INT 80
24580: PUSH
24581: LD_INT 65
24583: PUSH
24584: LD_INT 100
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: LIST
24591: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24592: LD_VAR 0 6
24596: PPUSH
24597: CALL_OW 263
24601: PUSH
24602: LD_INT 1
24604: EQUAL
24605: IFFALSE 24640
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24607: LD_ADDR_VAR 0 10
24611: PUSH
24612: LD_VAR 0 10
24616: PUSH
24617: LD_VAR 0 6
24621: PPUSH
24622: CALL_OW 311
24626: PPUSH
24627: LD_INT 3
24629: PPUSH
24630: CALL_OW 259
24634: PUSH
24635: LD_INT 4
24637: MUL
24638: MUL
24639: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24640: LD_VAR 0 6
24644: PPUSH
24645: CALL_OW 263
24649: PUSH
24650: LD_INT 2
24652: EQUAL
24653: IFFALSE 24704
// begin j := IsControledBy ( i ) ;
24655: LD_ADDR_VAR 0 7
24659: PUSH
24660: LD_VAR 0 6
24664: PPUSH
24665: CALL_OW 312
24669: ST_TO_ADDR
// if j then
24670: LD_VAR 0 7
24674: IFFALSE 24704
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24676: LD_ADDR_VAR 0 10
24680: PUSH
24681: LD_VAR 0 10
24685: PUSH
24686: LD_VAR 0 7
24690: PPUSH
24691: LD_INT 3
24693: PPUSH
24694: CALL_OW 259
24698: PUSH
24699: LD_INT 3
24701: MUL
24702: MUL
24703: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24704: LD_VAR 0 6
24708: PPUSH
24709: CALL_OW 264
24713: PUSH
24714: LD_INT 5
24716: PUSH
24717: LD_INT 6
24719: PUSH
24720: LD_INT 46
24722: PUSH
24723: LD_INT 44
24725: PUSH
24726: LD_INT 47
24728: PUSH
24729: LD_INT 45
24731: PUSH
24732: LD_INT 28
24734: PUSH
24735: LD_INT 7
24737: PUSH
24738: LD_INT 27
24740: PUSH
24741: LD_INT 29
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: IN
24756: PUSH
24757: LD_VAR 0 1
24761: PPUSH
24762: LD_INT 52
24764: PPUSH
24765: CALL_OW 321
24769: PUSH
24770: LD_INT 2
24772: EQUAL
24773: AND
24774: IFFALSE 24791
// bpoints := bpoints * 1.2 ;
24776: LD_ADDR_VAR 0 10
24780: PUSH
24781: LD_VAR 0 10
24785: PUSH
24786: LD_REAL  1.20000000000000E+0000
24789: MUL
24790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24791: LD_VAR 0 6
24795: PPUSH
24796: CALL_OW 264
24800: PUSH
24801: LD_INT 6
24803: PUSH
24804: LD_INT 46
24806: PUSH
24807: LD_INT 47
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: IN
24815: IFFALSE 24832
// bpoints := bpoints * 1.2 ;
24817: LD_ADDR_VAR 0 10
24821: PUSH
24822: LD_VAR 0 10
24826: PUSH
24827: LD_REAL  1.20000000000000E+0000
24830: MUL
24831: ST_TO_ADDR
// end ; unit_building :
24832: GO 24846
24834: LD_INT 3
24836: DOUBLE
24837: EQUAL
24838: IFTRUE 24842
24840: GO 24845
24842: POP
// ; end ;
24843: GO 24846
24845: POP
// for j = 1 to 3 do
24846: LD_ADDR_VAR 0 7
24850: PUSH
24851: DOUBLE
24852: LD_INT 1
24854: DEC
24855: ST_TO_ADDR
24856: LD_INT 3
24858: PUSH
24859: FOR_TO
24860: IFFALSE 24913
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24862: LD_ADDR_VAR 0 5
24866: PUSH
24867: LD_VAR 0 5
24871: PPUSH
24872: LD_VAR 0 7
24876: PPUSH
24877: LD_VAR 0 5
24881: PUSH
24882: LD_VAR 0 7
24886: ARRAY
24887: PUSH
24888: LD_VAR 0 9
24892: PUSH
24893: LD_VAR 0 7
24897: ARRAY
24898: PUSH
24899: LD_VAR 0 10
24903: MUL
24904: PLUS
24905: PPUSH
24906: CALL_OW 1
24910: ST_TO_ADDR
24911: GO 24859
24913: POP
24914: POP
// end ;
24915: GO 23394
24917: POP
24918: POP
// result := Replace ( result , 4 , tmp ) ;
24919: LD_ADDR_VAR 0 5
24923: PUSH
24924: LD_VAR 0 5
24928: PPUSH
24929: LD_INT 4
24931: PPUSH
24932: LD_VAR 0 8
24936: PPUSH
24937: CALL_OW 1
24941: ST_TO_ADDR
// end ;
24942: LD_VAR 0 5
24946: RET
// export function DangerAtRange ( unit , range ) ; begin
24947: LD_INT 0
24949: PPUSH
// if not unit then
24950: LD_VAR 0 1
24954: NOT
24955: IFFALSE 24959
// exit ;
24957: GO 25004
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24959: LD_ADDR_VAR 0 3
24963: PUSH
24964: LD_VAR 0 1
24968: PPUSH
24969: CALL_OW 255
24973: PPUSH
24974: LD_VAR 0 1
24978: PPUSH
24979: CALL_OW 250
24983: PPUSH
24984: LD_VAR 0 1
24988: PPUSH
24989: CALL_OW 251
24993: PPUSH
24994: LD_VAR 0 2
24998: PPUSH
24999: CALL 23246 0 4
25003: ST_TO_ADDR
// end ;
25004: LD_VAR 0 3
25008: RET
// export function DangerInArea ( side , area ) ; begin
25009: LD_INT 0
25011: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25012: LD_ADDR_VAR 0 3
25016: PUSH
25017: LD_VAR 0 2
25021: PPUSH
25022: LD_INT 81
25024: PUSH
25025: LD_VAR 0 1
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PPUSH
25034: CALL_OW 70
25038: ST_TO_ADDR
// end ;
25039: LD_VAR 0 3
25043: RET
// export function IsExtension ( b ) ; begin
25044: LD_INT 0
25046: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25047: LD_ADDR_VAR 0 2
25051: PUSH
25052: LD_VAR 0 1
25056: PUSH
25057: LD_INT 23
25059: PUSH
25060: LD_INT 20
25062: PUSH
25063: LD_INT 22
25065: PUSH
25066: LD_INT 17
25068: PUSH
25069: LD_INT 24
25071: PUSH
25072: LD_INT 21
25074: PUSH
25075: LD_INT 19
25077: PUSH
25078: LD_INT 16
25080: PUSH
25081: LD_INT 25
25083: PUSH
25084: LD_INT 18
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: IN
25099: ST_TO_ADDR
// end ;
25100: LD_VAR 0 2
25104: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25105: LD_INT 0
25107: PPUSH
25108: PPUSH
25109: PPUSH
// result := [ ] ;
25110: LD_ADDR_VAR 0 4
25114: PUSH
25115: EMPTY
25116: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25117: LD_ADDR_VAR 0 5
25121: PUSH
25122: LD_VAR 0 2
25126: PPUSH
25127: LD_INT 21
25129: PUSH
25130: LD_INT 3
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PPUSH
25137: CALL_OW 70
25141: ST_TO_ADDR
// if not tmp then
25142: LD_VAR 0 5
25146: NOT
25147: IFFALSE 25151
// exit ;
25149: GO 25215
// if checkLink then
25151: LD_VAR 0 3
25155: IFFALSE 25205
// begin for i in tmp do
25157: LD_ADDR_VAR 0 6
25161: PUSH
25162: LD_VAR 0 5
25166: PUSH
25167: FOR_IN
25168: IFFALSE 25203
// if GetBase ( i ) <> base then
25170: LD_VAR 0 6
25174: PPUSH
25175: CALL_OW 274
25179: PUSH
25180: LD_VAR 0 1
25184: NONEQUAL
25185: IFFALSE 25201
// ComLinkToBase ( base , i ) ;
25187: LD_VAR 0 1
25191: PPUSH
25192: LD_VAR 0 6
25196: PPUSH
25197: CALL_OW 169
25201: GO 25167
25203: POP
25204: POP
// end ; result := tmp ;
25205: LD_ADDR_VAR 0 4
25209: PUSH
25210: LD_VAR 0 5
25214: ST_TO_ADDR
// end ;
25215: LD_VAR 0 4
25219: RET
// export function ComComplete ( units , b ) ; var i ; begin
25220: LD_INT 0
25222: PPUSH
25223: PPUSH
// if not units then
25224: LD_VAR 0 1
25228: NOT
25229: IFFALSE 25233
// exit ;
25231: GO 25323
// for i in units do
25233: LD_ADDR_VAR 0 4
25237: PUSH
25238: LD_VAR 0 1
25242: PUSH
25243: FOR_IN
25244: IFFALSE 25321
// if BuildingStatus ( b ) = bs_build then
25246: LD_VAR 0 2
25250: PPUSH
25251: CALL_OW 461
25255: PUSH
25256: LD_INT 1
25258: EQUAL
25259: IFFALSE 25319
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25261: LD_VAR 0 4
25265: PPUSH
25266: LD_STRING h
25268: PUSH
25269: LD_VAR 0 2
25273: PPUSH
25274: CALL_OW 250
25278: PUSH
25279: LD_VAR 0 2
25283: PPUSH
25284: CALL_OW 251
25288: PUSH
25289: LD_VAR 0 2
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: PPUSH
25315: CALL_OW 446
25319: GO 25243
25321: POP
25322: POP
// end ;
25323: LD_VAR 0 3
25327: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25328: LD_INT 0
25330: PPUSH
25331: PPUSH
25332: PPUSH
25333: PPUSH
25334: PPUSH
25335: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25336: LD_VAR 0 1
25340: NOT
25341: PUSH
25342: LD_VAR 0 1
25346: PPUSH
25347: CALL_OW 263
25351: PUSH
25352: LD_INT 2
25354: NONEQUAL
25355: OR
25356: IFFALSE 25360
// exit ;
25358: GO 25676
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25360: LD_ADDR_VAR 0 6
25364: PUSH
25365: LD_INT 22
25367: PUSH
25368: LD_VAR 0 1
25372: PPUSH
25373: CALL_OW 255
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: LD_INT 30
25387: PUSH
25388: LD_INT 36
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 34
25397: PUSH
25398: LD_INT 31
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: LIST
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PPUSH
25414: CALL_OW 69
25418: ST_TO_ADDR
// if not tmp then
25419: LD_VAR 0 6
25423: NOT
25424: IFFALSE 25428
// exit ;
25426: GO 25676
// result := [ ] ;
25428: LD_ADDR_VAR 0 2
25432: PUSH
25433: EMPTY
25434: ST_TO_ADDR
// for i in tmp do
25435: LD_ADDR_VAR 0 3
25439: PUSH
25440: LD_VAR 0 6
25444: PUSH
25445: FOR_IN
25446: IFFALSE 25517
// begin t := UnitsInside ( i ) ;
25448: LD_ADDR_VAR 0 4
25452: PUSH
25453: LD_VAR 0 3
25457: PPUSH
25458: CALL_OW 313
25462: ST_TO_ADDR
// if t then
25463: LD_VAR 0 4
25467: IFFALSE 25515
// for j in t do
25469: LD_ADDR_VAR 0 7
25473: PUSH
25474: LD_VAR 0 4
25478: PUSH
25479: FOR_IN
25480: IFFALSE 25513
// result := Replace ( result , result + 1 , j ) ;
25482: LD_ADDR_VAR 0 2
25486: PUSH
25487: LD_VAR 0 2
25491: PPUSH
25492: LD_VAR 0 2
25496: PUSH
25497: LD_INT 1
25499: PLUS
25500: PPUSH
25501: LD_VAR 0 7
25505: PPUSH
25506: CALL_OW 1
25510: ST_TO_ADDR
25511: GO 25479
25513: POP
25514: POP
// end ;
25515: GO 25445
25517: POP
25518: POP
// if not result then
25519: LD_VAR 0 2
25523: NOT
25524: IFFALSE 25528
// exit ;
25526: GO 25676
// mech := result [ 1 ] ;
25528: LD_ADDR_VAR 0 5
25532: PUSH
25533: LD_VAR 0 2
25537: PUSH
25538: LD_INT 1
25540: ARRAY
25541: ST_TO_ADDR
// if result > 1 then
25542: LD_VAR 0 2
25546: PUSH
25547: LD_INT 1
25549: GREATER
25550: IFFALSE 25662
// begin for i = 2 to result do
25552: LD_ADDR_VAR 0 3
25556: PUSH
25557: DOUBLE
25558: LD_INT 2
25560: DEC
25561: ST_TO_ADDR
25562: LD_VAR 0 2
25566: PUSH
25567: FOR_TO
25568: IFFALSE 25660
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25570: LD_ADDR_VAR 0 4
25574: PUSH
25575: LD_VAR 0 2
25579: PUSH
25580: LD_VAR 0 3
25584: ARRAY
25585: PPUSH
25586: LD_INT 3
25588: PPUSH
25589: CALL_OW 259
25593: PUSH
25594: LD_VAR 0 2
25598: PUSH
25599: LD_VAR 0 3
25603: ARRAY
25604: PPUSH
25605: CALL_OW 432
25609: MINUS
25610: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25611: LD_VAR 0 4
25615: PUSH
25616: LD_VAR 0 5
25620: PPUSH
25621: LD_INT 3
25623: PPUSH
25624: CALL_OW 259
25628: PUSH
25629: LD_VAR 0 5
25633: PPUSH
25634: CALL_OW 432
25638: MINUS
25639: GREATEREQUAL
25640: IFFALSE 25658
// mech := result [ i ] ;
25642: LD_ADDR_VAR 0 5
25646: PUSH
25647: LD_VAR 0 2
25651: PUSH
25652: LD_VAR 0 3
25656: ARRAY
25657: ST_TO_ADDR
// end ;
25658: GO 25567
25660: POP
25661: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25662: LD_VAR 0 1
25666: PPUSH
25667: LD_VAR 0 5
25671: PPUSH
25672: CALL_OW 135
// end ;
25676: LD_VAR 0 2
25680: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25681: LD_INT 0
25683: PPUSH
25684: PPUSH
25685: PPUSH
25686: PPUSH
25687: PPUSH
25688: PPUSH
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
25693: PPUSH
25694: PPUSH
25695: PPUSH
// result := [ ] ;
25696: LD_ADDR_VAR 0 7
25700: PUSH
25701: EMPTY
25702: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25703: LD_VAR 0 1
25707: PPUSH
25708: CALL_OW 266
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: IN
25723: NOT
25724: IFFALSE 25728
// exit ;
25726: GO 27362
// if name then
25728: LD_VAR 0 3
25732: IFFALSE 25748
// SetBName ( base_dep , name ) ;
25734: LD_VAR 0 1
25738: PPUSH
25739: LD_VAR 0 3
25743: PPUSH
25744: CALL_OW 500
// base := GetBase ( base_dep ) ;
25748: LD_ADDR_VAR 0 15
25752: PUSH
25753: LD_VAR 0 1
25757: PPUSH
25758: CALL_OW 274
25762: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25763: LD_ADDR_VAR 0 16
25767: PUSH
25768: LD_VAR 0 1
25772: PPUSH
25773: CALL_OW 255
25777: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25778: LD_ADDR_VAR 0 17
25782: PUSH
25783: LD_VAR 0 1
25787: PPUSH
25788: CALL_OW 248
25792: ST_TO_ADDR
// if sources then
25793: LD_VAR 0 5
25797: IFFALSE 25844
// for i = 1 to 3 do
25799: LD_ADDR_VAR 0 8
25803: PUSH
25804: DOUBLE
25805: LD_INT 1
25807: DEC
25808: ST_TO_ADDR
25809: LD_INT 3
25811: PUSH
25812: FOR_TO
25813: IFFALSE 25842
// AddResourceType ( base , i , sources [ i ] ) ;
25815: LD_VAR 0 15
25819: PPUSH
25820: LD_VAR 0 8
25824: PPUSH
25825: LD_VAR 0 5
25829: PUSH
25830: LD_VAR 0 8
25834: ARRAY
25835: PPUSH
25836: CALL_OW 276
25840: GO 25812
25842: POP
25843: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25844: LD_ADDR_VAR 0 18
25848: PUSH
25849: LD_VAR 0 15
25853: PPUSH
25854: LD_VAR 0 2
25858: PPUSH
25859: LD_INT 1
25861: PPUSH
25862: CALL 25105 0 3
25866: ST_TO_ADDR
// InitHc ;
25867: CALL_OW 19
// InitUc ;
25871: CALL_OW 18
// uc_side := side ;
25875: LD_ADDR_OWVAR 20
25879: PUSH
25880: LD_VAR 0 16
25884: ST_TO_ADDR
// uc_nation := nation ;
25885: LD_ADDR_OWVAR 21
25889: PUSH
25890: LD_VAR 0 17
25894: ST_TO_ADDR
// if buildings then
25895: LD_VAR 0 18
25899: IFFALSE 27221
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25901: LD_ADDR_VAR 0 19
25905: PUSH
25906: LD_VAR 0 18
25910: PPUSH
25911: LD_INT 2
25913: PUSH
25914: LD_INT 30
25916: PUSH
25917: LD_INT 29
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 30
25926: PUSH
25927: LD_INT 30
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: LIST
25938: PPUSH
25939: CALL_OW 72
25943: ST_TO_ADDR
// if tmp then
25944: LD_VAR 0 19
25948: IFFALSE 25996
// for i in tmp do
25950: LD_ADDR_VAR 0 8
25954: PUSH
25955: LD_VAR 0 19
25959: PUSH
25960: FOR_IN
25961: IFFALSE 25994
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25963: LD_VAR 0 8
25967: PPUSH
25968: CALL_OW 250
25972: PPUSH
25973: LD_VAR 0 8
25977: PPUSH
25978: CALL_OW 251
25982: PPUSH
25983: LD_VAR 0 16
25987: PPUSH
25988: CALL_OW 441
25992: GO 25960
25994: POP
25995: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25996: LD_VAR 0 18
26000: PPUSH
26001: LD_INT 2
26003: PUSH
26004: LD_INT 30
26006: PUSH
26007: LD_INT 32
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 30
26016: PUSH
26017: LD_INT 33
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: LIST
26028: PPUSH
26029: CALL_OW 72
26033: IFFALSE 26121
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26035: LD_ADDR_VAR 0 8
26039: PUSH
26040: LD_VAR 0 18
26044: PPUSH
26045: LD_INT 2
26047: PUSH
26048: LD_INT 30
26050: PUSH
26051: LD_INT 32
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 30
26060: PUSH
26061: LD_INT 33
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: PPUSH
26073: CALL_OW 72
26077: PUSH
26078: FOR_IN
26079: IFFALSE 26119
// begin if not GetBWeapon ( i ) then
26081: LD_VAR 0 8
26085: PPUSH
26086: CALL_OW 269
26090: NOT
26091: IFFALSE 26117
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26093: LD_VAR 0 8
26097: PPUSH
26098: LD_VAR 0 8
26102: PPUSH
26103: LD_VAR 0 2
26107: PPUSH
26108: CALL 27367 0 2
26112: PPUSH
26113: CALL_OW 431
// end ;
26117: GO 26078
26119: POP
26120: POP
// end ; for i = 1 to personel do
26121: LD_ADDR_VAR 0 8
26125: PUSH
26126: DOUBLE
26127: LD_INT 1
26129: DEC
26130: ST_TO_ADDR
26131: LD_VAR 0 6
26135: PUSH
26136: FOR_TO
26137: IFFALSE 27201
// begin if i > 4 then
26139: LD_VAR 0 8
26143: PUSH
26144: LD_INT 4
26146: GREATER
26147: IFFALSE 26151
// break ;
26149: GO 27201
// case i of 1 :
26151: LD_VAR 0 8
26155: PUSH
26156: LD_INT 1
26158: DOUBLE
26159: EQUAL
26160: IFTRUE 26164
26162: GO 26244
26164: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26165: LD_ADDR_VAR 0 12
26169: PUSH
26170: LD_VAR 0 18
26174: PPUSH
26175: LD_INT 22
26177: PUSH
26178: LD_VAR 0 16
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 58
26189: PUSH
26190: EMPTY
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: LD_INT 30
26198: PUSH
26199: LD_INT 32
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 30
26208: PUSH
26209: LD_INT 4
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 30
26218: PUSH
26219: LD_INT 5
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: LIST
26236: PPUSH
26237: CALL_OW 72
26241: ST_TO_ADDR
26242: GO 26466
26244: LD_INT 2
26246: DOUBLE
26247: EQUAL
26248: IFTRUE 26252
26250: GO 26314
26252: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26253: LD_ADDR_VAR 0 12
26257: PUSH
26258: LD_VAR 0 18
26262: PPUSH
26263: LD_INT 22
26265: PUSH
26266: LD_VAR 0 16
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: LD_INT 30
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 30
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: LIST
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PPUSH
26307: CALL_OW 72
26311: ST_TO_ADDR
26312: GO 26466
26314: LD_INT 3
26316: DOUBLE
26317: EQUAL
26318: IFTRUE 26322
26320: GO 26384
26322: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26323: LD_ADDR_VAR 0 12
26327: PUSH
26328: LD_VAR 0 18
26332: PPUSH
26333: LD_INT 22
26335: PUSH
26336: LD_VAR 0 16
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 2
26347: PUSH
26348: LD_INT 30
26350: PUSH
26351: LD_INT 2
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 30
26360: PUSH
26361: LD_INT 3
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: LIST
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PPUSH
26377: CALL_OW 72
26381: ST_TO_ADDR
26382: GO 26466
26384: LD_INT 4
26386: DOUBLE
26387: EQUAL
26388: IFTRUE 26392
26390: GO 26465
26392: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26393: LD_ADDR_VAR 0 12
26397: PUSH
26398: LD_VAR 0 18
26402: PPUSH
26403: LD_INT 22
26405: PUSH
26406: LD_VAR 0 16
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 2
26417: PUSH
26418: LD_INT 30
26420: PUSH
26421: LD_INT 6
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 30
26430: PUSH
26431: LD_INT 7
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 30
26440: PUSH
26441: LD_INT 8
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PPUSH
26458: CALL_OW 72
26462: ST_TO_ADDR
26463: GO 26466
26465: POP
// if i = 1 then
26466: LD_VAR 0 8
26470: PUSH
26471: LD_INT 1
26473: EQUAL
26474: IFFALSE 26585
// begin tmp := [ ] ;
26476: LD_ADDR_VAR 0 19
26480: PUSH
26481: EMPTY
26482: ST_TO_ADDR
// for j in f do
26483: LD_ADDR_VAR 0 9
26487: PUSH
26488: LD_VAR 0 12
26492: PUSH
26493: FOR_IN
26494: IFFALSE 26567
// if GetBType ( j ) = b_bunker then
26496: LD_VAR 0 9
26500: PPUSH
26501: CALL_OW 266
26505: PUSH
26506: LD_INT 32
26508: EQUAL
26509: IFFALSE 26536
// tmp := Insert ( tmp , 1 , j ) else
26511: LD_ADDR_VAR 0 19
26515: PUSH
26516: LD_VAR 0 19
26520: PPUSH
26521: LD_INT 1
26523: PPUSH
26524: LD_VAR 0 9
26528: PPUSH
26529: CALL_OW 2
26533: ST_TO_ADDR
26534: GO 26565
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26536: LD_ADDR_VAR 0 19
26540: PUSH
26541: LD_VAR 0 19
26545: PPUSH
26546: LD_VAR 0 19
26550: PUSH
26551: LD_INT 1
26553: PLUS
26554: PPUSH
26555: LD_VAR 0 9
26559: PPUSH
26560: CALL_OW 2
26564: ST_TO_ADDR
26565: GO 26493
26567: POP
26568: POP
// if tmp then
26569: LD_VAR 0 19
26573: IFFALSE 26585
// f := tmp ;
26575: LD_ADDR_VAR 0 12
26579: PUSH
26580: LD_VAR 0 19
26584: ST_TO_ADDR
// end ; x := personel [ i ] ;
26585: LD_ADDR_VAR 0 13
26589: PUSH
26590: LD_VAR 0 6
26594: PUSH
26595: LD_VAR 0 8
26599: ARRAY
26600: ST_TO_ADDR
// if x = - 1 then
26601: LD_VAR 0 13
26605: PUSH
26606: LD_INT 1
26608: NEG
26609: EQUAL
26610: IFFALSE 26819
// begin for j in f do
26612: LD_ADDR_VAR 0 9
26616: PUSH
26617: LD_VAR 0 12
26621: PUSH
26622: FOR_IN
26623: IFFALSE 26815
// repeat InitHc ;
26625: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26629: LD_VAR 0 9
26633: PPUSH
26634: CALL_OW 266
26638: PUSH
26639: LD_INT 5
26641: EQUAL
26642: IFFALSE 26712
// begin if UnitsInside ( j ) < 3 then
26644: LD_VAR 0 9
26648: PPUSH
26649: CALL_OW 313
26653: PUSH
26654: LD_INT 3
26656: LESS
26657: IFFALSE 26693
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26659: LD_INT 0
26661: PPUSH
26662: LD_INT 5
26664: PUSH
26665: LD_INT 8
26667: PUSH
26668: LD_INT 9
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: PUSH
26676: LD_VAR 0 17
26680: ARRAY
26681: PPUSH
26682: LD_VAR 0 4
26686: PPUSH
26687: CALL_OW 380
26691: GO 26710
// PrepareHuman ( false , i , skill ) ;
26693: LD_INT 0
26695: PPUSH
26696: LD_VAR 0 8
26700: PPUSH
26701: LD_VAR 0 4
26705: PPUSH
26706: CALL_OW 380
// end else
26710: GO 26729
// PrepareHuman ( false , i , skill ) ;
26712: LD_INT 0
26714: PPUSH
26715: LD_VAR 0 8
26719: PPUSH
26720: LD_VAR 0 4
26724: PPUSH
26725: CALL_OW 380
// un := CreateHuman ;
26729: LD_ADDR_VAR 0 14
26733: PUSH
26734: CALL_OW 44
26738: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26739: LD_ADDR_VAR 0 7
26743: PUSH
26744: LD_VAR 0 7
26748: PPUSH
26749: LD_INT 1
26751: PPUSH
26752: LD_VAR 0 14
26756: PPUSH
26757: CALL_OW 2
26761: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26762: LD_VAR 0 14
26766: PPUSH
26767: LD_VAR 0 9
26771: PPUSH
26772: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26776: LD_VAR 0 9
26780: PPUSH
26781: CALL_OW 313
26785: PUSH
26786: LD_INT 6
26788: EQUAL
26789: PUSH
26790: LD_VAR 0 9
26794: PPUSH
26795: CALL_OW 266
26799: PUSH
26800: LD_INT 32
26802: PUSH
26803: LD_INT 31
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: IN
26810: OR
26811: IFFALSE 26625
26813: GO 26622
26815: POP
26816: POP
// end else
26817: GO 27199
// for j = 1 to x do
26819: LD_ADDR_VAR 0 9
26823: PUSH
26824: DOUBLE
26825: LD_INT 1
26827: DEC
26828: ST_TO_ADDR
26829: LD_VAR 0 13
26833: PUSH
26834: FOR_TO
26835: IFFALSE 27197
// begin InitHc ;
26837: CALL_OW 19
// if not f then
26841: LD_VAR 0 12
26845: NOT
26846: IFFALSE 26935
// begin PrepareHuman ( false , i , skill ) ;
26848: LD_INT 0
26850: PPUSH
26851: LD_VAR 0 8
26855: PPUSH
26856: LD_VAR 0 4
26860: PPUSH
26861: CALL_OW 380
// un := CreateHuman ;
26865: LD_ADDR_VAR 0 14
26869: PUSH
26870: CALL_OW 44
26874: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26875: LD_ADDR_VAR 0 7
26879: PUSH
26880: LD_VAR 0 7
26884: PPUSH
26885: LD_INT 1
26887: PPUSH
26888: LD_VAR 0 14
26892: PPUSH
26893: CALL_OW 2
26897: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26898: LD_VAR 0 14
26902: PPUSH
26903: LD_VAR 0 1
26907: PPUSH
26908: CALL_OW 250
26912: PPUSH
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL_OW 251
26922: PPUSH
26923: LD_INT 10
26925: PPUSH
26926: LD_INT 0
26928: PPUSH
26929: CALL_OW 50
// continue ;
26933: GO 26834
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26935: LD_VAR 0 12
26939: PUSH
26940: LD_INT 1
26942: ARRAY
26943: PPUSH
26944: CALL_OW 313
26948: PUSH
26949: LD_VAR 0 12
26953: PUSH
26954: LD_INT 1
26956: ARRAY
26957: PPUSH
26958: CALL_OW 266
26962: PUSH
26963: LD_INT 32
26965: PUSH
26966: LD_INT 31
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: IN
26973: AND
26974: PUSH
26975: LD_VAR 0 12
26979: PUSH
26980: LD_INT 1
26982: ARRAY
26983: PPUSH
26984: CALL_OW 313
26988: PUSH
26989: LD_INT 6
26991: EQUAL
26992: OR
26993: IFFALSE 27013
// f := Delete ( f , 1 ) ;
26995: LD_ADDR_VAR 0 12
26999: PUSH
27000: LD_VAR 0 12
27004: PPUSH
27005: LD_INT 1
27007: PPUSH
27008: CALL_OW 3
27012: ST_TO_ADDR
// if not f then
27013: LD_VAR 0 12
27017: NOT
27018: IFFALSE 27036
// begin x := x + 2 ;
27020: LD_ADDR_VAR 0 13
27024: PUSH
27025: LD_VAR 0 13
27029: PUSH
27030: LD_INT 2
27032: PLUS
27033: ST_TO_ADDR
// continue ;
27034: GO 26834
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27036: LD_VAR 0 12
27040: PUSH
27041: LD_INT 1
27043: ARRAY
27044: PPUSH
27045: CALL_OW 266
27049: PUSH
27050: LD_INT 5
27052: EQUAL
27053: IFFALSE 27127
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27055: LD_VAR 0 12
27059: PUSH
27060: LD_INT 1
27062: ARRAY
27063: PPUSH
27064: CALL_OW 313
27068: PUSH
27069: LD_INT 3
27071: LESS
27072: IFFALSE 27108
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27074: LD_INT 0
27076: PPUSH
27077: LD_INT 5
27079: PUSH
27080: LD_INT 8
27082: PUSH
27083: LD_INT 9
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: PUSH
27091: LD_VAR 0 17
27095: ARRAY
27096: PPUSH
27097: LD_VAR 0 4
27101: PPUSH
27102: CALL_OW 380
27106: GO 27125
// PrepareHuman ( false , i , skill ) ;
27108: LD_INT 0
27110: PPUSH
27111: LD_VAR 0 8
27115: PPUSH
27116: LD_VAR 0 4
27120: PPUSH
27121: CALL_OW 380
// end else
27125: GO 27144
// PrepareHuman ( false , i , skill ) ;
27127: LD_INT 0
27129: PPUSH
27130: LD_VAR 0 8
27134: PPUSH
27135: LD_VAR 0 4
27139: PPUSH
27140: CALL_OW 380
// un := CreateHuman ;
27144: LD_ADDR_VAR 0 14
27148: PUSH
27149: CALL_OW 44
27153: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27154: LD_ADDR_VAR 0 7
27158: PUSH
27159: LD_VAR 0 7
27163: PPUSH
27164: LD_INT 1
27166: PPUSH
27167: LD_VAR 0 14
27171: PPUSH
27172: CALL_OW 2
27176: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27177: LD_VAR 0 14
27181: PPUSH
27182: LD_VAR 0 12
27186: PUSH
27187: LD_INT 1
27189: ARRAY
27190: PPUSH
27191: CALL_OW 52
// end ;
27195: GO 26834
27197: POP
27198: POP
// end ;
27199: GO 26136
27201: POP
27202: POP
// result := result ^ buildings ;
27203: LD_ADDR_VAR 0 7
27207: PUSH
27208: LD_VAR 0 7
27212: PUSH
27213: LD_VAR 0 18
27217: ADD
27218: ST_TO_ADDR
// end else
27219: GO 27362
// begin for i = 1 to personel do
27221: LD_ADDR_VAR 0 8
27225: PUSH
27226: DOUBLE
27227: LD_INT 1
27229: DEC
27230: ST_TO_ADDR
27231: LD_VAR 0 6
27235: PUSH
27236: FOR_TO
27237: IFFALSE 27360
// begin if i > 4 then
27239: LD_VAR 0 8
27243: PUSH
27244: LD_INT 4
27246: GREATER
27247: IFFALSE 27251
// break ;
27249: GO 27360
// x := personel [ i ] ;
27251: LD_ADDR_VAR 0 13
27255: PUSH
27256: LD_VAR 0 6
27260: PUSH
27261: LD_VAR 0 8
27265: ARRAY
27266: ST_TO_ADDR
// if x = - 1 then
27267: LD_VAR 0 13
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: EQUAL
27276: IFFALSE 27280
// continue ;
27278: GO 27236
// PrepareHuman ( false , i , skill ) ;
27280: LD_INT 0
27282: PPUSH
27283: LD_VAR 0 8
27287: PPUSH
27288: LD_VAR 0 4
27292: PPUSH
27293: CALL_OW 380
// un := CreateHuman ;
27297: LD_ADDR_VAR 0 14
27301: PUSH
27302: CALL_OW 44
27306: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27307: LD_VAR 0 14
27311: PPUSH
27312: LD_VAR 0 1
27316: PPUSH
27317: CALL_OW 250
27321: PPUSH
27322: LD_VAR 0 1
27326: PPUSH
27327: CALL_OW 251
27331: PPUSH
27332: LD_INT 10
27334: PPUSH
27335: LD_INT 0
27337: PPUSH
27338: CALL_OW 50
// result := result ^ un ;
27342: LD_ADDR_VAR 0 7
27346: PUSH
27347: LD_VAR 0 7
27351: PUSH
27352: LD_VAR 0 14
27356: ADD
27357: ST_TO_ADDR
// end ;
27358: GO 27236
27360: POP
27361: POP
// end ; end ;
27362: LD_VAR 0 7
27366: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27367: LD_INT 0
27369: PPUSH
27370: PPUSH
27371: PPUSH
27372: PPUSH
27373: PPUSH
27374: PPUSH
27375: PPUSH
27376: PPUSH
27377: PPUSH
27378: PPUSH
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
27383: PPUSH
27384: PPUSH
// result := false ;
27385: LD_ADDR_VAR 0 3
27389: PUSH
27390: LD_INT 0
27392: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27393: LD_VAR 0 1
27397: NOT
27398: PUSH
27399: LD_VAR 0 1
27403: PPUSH
27404: CALL_OW 266
27408: PUSH
27409: LD_INT 32
27411: PUSH
27412: LD_INT 33
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: IN
27419: NOT
27420: OR
27421: IFFALSE 27425
// exit ;
27423: GO 28534
// nat := GetNation ( tower ) ;
27425: LD_ADDR_VAR 0 12
27429: PUSH
27430: LD_VAR 0 1
27434: PPUSH
27435: CALL_OW 248
27439: ST_TO_ADDR
// side := GetSide ( tower ) ;
27440: LD_ADDR_VAR 0 16
27444: PUSH
27445: LD_VAR 0 1
27449: PPUSH
27450: CALL_OW 255
27454: ST_TO_ADDR
// x := GetX ( tower ) ;
27455: LD_ADDR_VAR 0 10
27459: PUSH
27460: LD_VAR 0 1
27464: PPUSH
27465: CALL_OW 250
27469: ST_TO_ADDR
// y := GetY ( tower ) ;
27470: LD_ADDR_VAR 0 11
27474: PUSH
27475: LD_VAR 0 1
27479: PPUSH
27480: CALL_OW 251
27484: ST_TO_ADDR
// if not x or not y then
27485: LD_VAR 0 10
27489: NOT
27490: PUSH
27491: LD_VAR 0 11
27495: NOT
27496: OR
27497: IFFALSE 27501
// exit ;
27499: GO 28534
// weapon := 0 ;
27501: LD_ADDR_VAR 0 18
27505: PUSH
27506: LD_INT 0
27508: ST_TO_ADDR
// fac_list := [ ] ;
27509: LD_ADDR_VAR 0 17
27513: PUSH
27514: EMPTY
27515: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27516: LD_ADDR_VAR 0 6
27520: PUSH
27521: LD_VAR 0 1
27525: PPUSH
27526: CALL_OW 274
27530: PPUSH
27531: LD_VAR 0 2
27535: PPUSH
27536: LD_INT 0
27538: PPUSH
27539: CALL 25105 0 3
27543: PPUSH
27544: LD_INT 30
27546: PUSH
27547: LD_INT 3
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PPUSH
27554: CALL_OW 72
27558: ST_TO_ADDR
// if not factories then
27559: LD_VAR 0 6
27563: NOT
27564: IFFALSE 27568
// exit ;
27566: GO 28534
// for i in factories do
27568: LD_ADDR_VAR 0 8
27572: PUSH
27573: LD_VAR 0 6
27577: PUSH
27578: FOR_IN
27579: IFFALSE 27604
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27581: LD_ADDR_VAR 0 17
27585: PUSH
27586: LD_VAR 0 17
27590: PUSH
27591: LD_VAR 0 8
27595: PPUSH
27596: CALL_OW 478
27600: UNION
27601: ST_TO_ADDR
27602: GO 27578
27604: POP
27605: POP
// if not fac_list then
27606: LD_VAR 0 17
27610: NOT
27611: IFFALSE 27615
// exit ;
27613: GO 28534
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27615: LD_ADDR_VAR 0 5
27619: PUSH
27620: LD_INT 4
27622: PUSH
27623: LD_INT 5
27625: PUSH
27626: LD_INT 9
27628: PUSH
27629: LD_INT 10
27631: PUSH
27632: LD_INT 6
27634: PUSH
27635: LD_INT 7
27637: PUSH
27638: LD_INT 11
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 27
27652: PUSH
27653: LD_INT 28
27655: PUSH
27656: LD_INT 26
27658: PUSH
27659: LD_INT 30
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 43
27670: PUSH
27671: LD_INT 44
27673: PUSH
27674: LD_INT 46
27676: PUSH
27677: LD_INT 45
27679: PUSH
27680: LD_INT 47
27682: PUSH
27683: LD_INT 49
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: LIST
27698: PUSH
27699: LD_VAR 0 12
27703: ARRAY
27704: ST_TO_ADDR
// list := list isect fac_list ;
27705: LD_ADDR_VAR 0 5
27709: PUSH
27710: LD_VAR 0 5
27714: PUSH
27715: LD_VAR 0 17
27719: ISECT
27720: ST_TO_ADDR
// if not list then
27721: LD_VAR 0 5
27725: NOT
27726: IFFALSE 27730
// exit ;
27728: GO 28534
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27730: LD_VAR 0 12
27734: PUSH
27735: LD_INT 3
27737: EQUAL
27738: PUSH
27739: LD_INT 49
27741: PUSH
27742: LD_VAR 0 5
27746: IN
27747: AND
27748: PUSH
27749: LD_INT 31
27751: PPUSH
27752: LD_VAR 0 16
27756: PPUSH
27757: CALL_OW 321
27761: PUSH
27762: LD_INT 2
27764: EQUAL
27765: AND
27766: IFFALSE 27826
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27768: LD_INT 22
27770: PUSH
27771: LD_VAR 0 16
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 35
27782: PUSH
27783: LD_INT 49
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 91
27792: PUSH
27793: LD_VAR 0 1
27797: PUSH
27798: LD_INT 10
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: LIST
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: LIST
27810: PPUSH
27811: CALL_OW 69
27815: NOT
27816: IFFALSE 27826
// weapon := ru_time_lapser ;
27818: LD_ADDR_VAR 0 18
27822: PUSH
27823: LD_INT 49
27825: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27826: LD_VAR 0 12
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: IN
27841: PUSH
27842: LD_INT 11
27844: PUSH
27845: LD_VAR 0 5
27849: IN
27850: PUSH
27851: LD_INT 30
27853: PUSH
27854: LD_VAR 0 5
27858: IN
27859: OR
27860: AND
27861: PUSH
27862: LD_INT 6
27864: PPUSH
27865: LD_VAR 0 16
27869: PPUSH
27870: CALL_OW 321
27874: PUSH
27875: LD_INT 2
27877: EQUAL
27878: AND
27879: IFFALSE 28044
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27881: LD_INT 22
27883: PUSH
27884: LD_VAR 0 16
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 35
27898: PUSH
27899: LD_INT 11
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 35
27908: PUSH
27909: LD_INT 30
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 91
27923: PUSH
27924: LD_VAR 0 1
27928: PUSH
27929: LD_INT 18
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: PPUSH
27942: CALL_OW 69
27946: NOT
27947: PUSH
27948: LD_INT 22
27950: PUSH
27951: LD_VAR 0 16
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: LD_INT 30
27965: PUSH
27966: LD_INT 32
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 30
27975: PUSH
27976: LD_INT 33
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 91
27990: PUSH
27991: LD_VAR 0 1
27995: PUSH
27996: LD_INT 12
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: LIST
28008: PUSH
28009: EMPTY
28010: LIST
28011: PPUSH
28012: CALL_OW 69
28016: PUSH
28017: LD_INT 2
28019: GREATER
28020: AND
28021: IFFALSE 28044
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28023: LD_ADDR_VAR 0 18
28027: PUSH
28028: LD_INT 11
28030: PUSH
28031: LD_INT 30
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_VAR 0 12
28042: ARRAY
28043: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28044: LD_VAR 0 18
28048: NOT
28049: PUSH
28050: LD_INT 40
28052: PPUSH
28053: LD_VAR 0 16
28057: PPUSH
28058: CALL_OW 321
28062: PUSH
28063: LD_INT 2
28065: EQUAL
28066: AND
28067: PUSH
28068: LD_INT 7
28070: PUSH
28071: LD_VAR 0 5
28075: IN
28076: PUSH
28077: LD_INT 28
28079: PUSH
28080: LD_VAR 0 5
28084: IN
28085: OR
28086: PUSH
28087: LD_INT 45
28089: PUSH
28090: LD_VAR 0 5
28094: IN
28095: OR
28096: AND
28097: IFFALSE 28351
// begin hex := GetHexInfo ( x , y ) ;
28099: LD_ADDR_VAR 0 4
28103: PUSH
28104: LD_VAR 0 10
28108: PPUSH
28109: LD_VAR 0 11
28113: PPUSH
28114: CALL_OW 546
28118: ST_TO_ADDR
// if hex [ 1 ] then
28119: LD_VAR 0 4
28123: PUSH
28124: LD_INT 1
28126: ARRAY
28127: IFFALSE 28131
// exit ;
28129: GO 28534
// height := hex [ 2 ] ;
28131: LD_ADDR_VAR 0 15
28135: PUSH
28136: LD_VAR 0 4
28140: PUSH
28141: LD_INT 2
28143: ARRAY
28144: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28145: LD_ADDR_VAR 0 14
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: LD_INT 2
28155: PUSH
28156: LD_INT 3
28158: PUSH
28159: LD_INT 5
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: ST_TO_ADDR
// for i in tmp do
28168: LD_ADDR_VAR 0 8
28172: PUSH
28173: LD_VAR 0 14
28177: PUSH
28178: FOR_IN
28179: IFFALSE 28349
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28181: LD_ADDR_VAR 0 9
28185: PUSH
28186: LD_VAR 0 10
28190: PPUSH
28191: LD_VAR 0 8
28195: PPUSH
28196: LD_INT 5
28198: PPUSH
28199: CALL_OW 272
28203: PUSH
28204: LD_VAR 0 11
28208: PPUSH
28209: LD_VAR 0 8
28213: PPUSH
28214: LD_INT 5
28216: PPUSH
28217: CALL_OW 273
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28226: LD_VAR 0 9
28230: PUSH
28231: LD_INT 1
28233: ARRAY
28234: PPUSH
28235: LD_VAR 0 9
28239: PUSH
28240: LD_INT 2
28242: ARRAY
28243: PPUSH
28244: CALL_OW 488
28248: IFFALSE 28347
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28250: LD_ADDR_VAR 0 4
28254: PUSH
28255: LD_VAR 0 9
28259: PUSH
28260: LD_INT 1
28262: ARRAY
28263: PPUSH
28264: LD_VAR 0 9
28268: PUSH
28269: LD_INT 2
28271: ARRAY
28272: PPUSH
28273: CALL_OW 546
28277: ST_TO_ADDR
// if hex [ 1 ] then
28278: LD_VAR 0 4
28282: PUSH
28283: LD_INT 1
28285: ARRAY
28286: IFFALSE 28290
// continue ;
28288: GO 28178
// h := hex [ 2 ] ;
28290: LD_ADDR_VAR 0 13
28294: PUSH
28295: LD_VAR 0 4
28299: PUSH
28300: LD_INT 2
28302: ARRAY
28303: ST_TO_ADDR
// if h + 7 < height then
28304: LD_VAR 0 13
28308: PUSH
28309: LD_INT 7
28311: PLUS
28312: PUSH
28313: LD_VAR 0 15
28317: LESS
28318: IFFALSE 28347
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28320: LD_ADDR_VAR 0 18
28324: PUSH
28325: LD_INT 7
28327: PUSH
28328: LD_INT 28
28330: PUSH
28331: LD_INT 45
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: LIST
28338: PUSH
28339: LD_VAR 0 12
28343: ARRAY
28344: ST_TO_ADDR
// break ;
28345: GO 28349
// end ; end ; end ;
28347: GO 28178
28349: POP
28350: POP
// end ; if not weapon then
28351: LD_VAR 0 18
28355: NOT
28356: IFFALSE 28416
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28358: LD_ADDR_VAR 0 5
28362: PUSH
28363: LD_VAR 0 5
28367: PUSH
28368: LD_INT 11
28370: PUSH
28371: LD_INT 30
28373: PUSH
28374: LD_INT 49
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: DIFF
28382: ST_TO_ADDR
// if not list then
28383: LD_VAR 0 5
28387: NOT
28388: IFFALSE 28392
// exit ;
28390: GO 28534
// weapon := list [ rand ( 1 , list ) ] ;
28392: LD_ADDR_VAR 0 18
28396: PUSH
28397: LD_VAR 0 5
28401: PUSH
28402: LD_INT 1
28404: PPUSH
28405: LD_VAR 0 5
28409: PPUSH
28410: CALL_OW 12
28414: ARRAY
28415: ST_TO_ADDR
// end ; if weapon then
28416: LD_VAR 0 18
28420: IFFALSE 28534
// begin tmp := CostOfWeapon ( weapon ) ;
28422: LD_ADDR_VAR 0 14
28426: PUSH
28427: LD_VAR 0 18
28431: PPUSH
28432: CALL_OW 451
28436: ST_TO_ADDR
// j := GetBase ( tower ) ;
28437: LD_ADDR_VAR 0 9
28441: PUSH
28442: LD_VAR 0 1
28446: PPUSH
28447: CALL_OW 274
28451: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28452: LD_VAR 0 9
28456: PPUSH
28457: LD_INT 1
28459: PPUSH
28460: CALL_OW 275
28464: PUSH
28465: LD_VAR 0 14
28469: PUSH
28470: LD_INT 1
28472: ARRAY
28473: GREATEREQUAL
28474: PUSH
28475: LD_VAR 0 9
28479: PPUSH
28480: LD_INT 2
28482: PPUSH
28483: CALL_OW 275
28487: PUSH
28488: LD_VAR 0 14
28492: PUSH
28493: LD_INT 2
28495: ARRAY
28496: GREATEREQUAL
28497: AND
28498: PUSH
28499: LD_VAR 0 9
28503: PPUSH
28504: LD_INT 3
28506: PPUSH
28507: CALL_OW 275
28511: PUSH
28512: LD_VAR 0 14
28516: PUSH
28517: LD_INT 3
28519: ARRAY
28520: GREATEREQUAL
28521: AND
28522: IFFALSE 28534
// result := weapon ;
28524: LD_ADDR_VAR 0 3
28528: PUSH
28529: LD_VAR 0 18
28533: ST_TO_ADDR
// end ; end ;
28534: LD_VAR 0 3
28538: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28539: LD_INT 0
28541: PPUSH
28542: PPUSH
// result := true ;
28543: LD_ADDR_VAR 0 3
28547: PUSH
28548: LD_INT 1
28550: ST_TO_ADDR
// if array1 = array2 then
28551: LD_VAR 0 1
28555: PUSH
28556: LD_VAR 0 2
28560: EQUAL
28561: IFFALSE 28621
// begin for i = 1 to array1 do
28563: LD_ADDR_VAR 0 4
28567: PUSH
28568: DOUBLE
28569: LD_INT 1
28571: DEC
28572: ST_TO_ADDR
28573: LD_VAR 0 1
28577: PUSH
28578: FOR_TO
28579: IFFALSE 28617
// if array1 [ i ] <> array2 [ i ] then
28581: LD_VAR 0 1
28585: PUSH
28586: LD_VAR 0 4
28590: ARRAY
28591: PUSH
28592: LD_VAR 0 2
28596: PUSH
28597: LD_VAR 0 4
28601: ARRAY
28602: NONEQUAL
28603: IFFALSE 28615
// begin result := false ;
28605: LD_ADDR_VAR 0 3
28609: PUSH
28610: LD_INT 0
28612: ST_TO_ADDR
// break ;
28613: GO 28617
// end ;
28615: GO 28578
28617: POP
28618: POP
// end else
28619: GO 28629
// result := false ;
28621: LD_ADDR_VAR 0 3
28625: PUSH
28626: LD_INT 0
28628: ST_TO_ADDR
// end ;
28629: LD_VAR 0 3
28633: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28634: LD_INT 0
28636: PPUSH
28637: PPUSH
// if not array1 or not array2 then
28638: LD_VAR 0 1
28642: NOT
28643: PUSH
28644: LD_VAR 0 2
28648: NOT
28649: OR
28650: IFFALSE 28654
// exit ;
28652: GO 28718
// result := true ;
28654: LD_ADDR_VAR 0 3
28658: PUSH
28659: LD_INT 1
28661: ST_TO_ADDR
// for i = 1 to array1 do
28662: LD_ADDR_VAR 0 4
28666: PUSH
28667: DOUBLE
28668: LD_INT 1
28670: DEC
28671: ST_TO_ADDR
28672: LD_VAR 0 1
28676: PUSH
28677: FOR_TO
28678: IFFALSE 28716
// if array1 [ i ] <> array2 [ i ] then
28680: LD_VAR 0 1
28684: PUSH
28685: LD_VAR 0 4
28689: ARRAY
28690: PUSH
28691: LD_VAR 0 2
28695: PUSH
28696: LD_VAR 0 4
28700: ARRAY
28701: NONEQUAL
28702: IFFALSE 28714
// begin result := false ;
28704: LD_ADDR_VAR 0 3
28708: PUSH
28709: LD_INT 0
28711: ST_TO_ADDR
// break ;
28712: GO 28716
// end ;
28714: GO 28677
28716: POP
28717: POP
// end ;
28718: LD_VAR 0 3
28722: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28723: LD_INT 0
28725: PPUSH
28726: PPUSH
28727: PPUSH
// pom := GetBase ( fac ) ;
28728: LD_ADDR_VAR 0 5
28732: PUSH
28733: LD_VAR 0 1
28737: PPUSH
28738: CALL_OW 274
28742: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28743: LD_ADDR_VAR 0 4
28747: PUSH
28748: LD_VAR 0 2
28752: PUSH
28753: LD_INT 1
28755: ARRAY
28756: PPUSH
28757: LD_VAR 0 2
28761: PUSH
28762: LD_INT 2
28764: ARRAY
28765: PPUSH
28766: LD_VAR 0 2
28770: PUSH
28771: LD_INT 3
28773: ARRAY
28774: PPUSH
28775: LD_VAR 0 2
28779: PUSH
28780: LD_INT 4
28782: ARRAY
28783: PPUSH
28784: CALL_OW 449
28788: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28789: LD_ADDR_VAR 0 3
28793: PUSH
28794: LD_VAR 0 5
28798: PPUSH
28799: LD_INT 1
28801: PPUSH
28802: CALL_OW 275
28806: PUSH
28807: LD_VAR 0 4
28811: PUSH
28812: LD_INT 1
28814: ARRAY
28815: GREATEREQUAL
28816: PUSH
28817: LD_VAR 0 5
28821: PPUSH
28822: LD_INT 2
28824: PPUSH
28825: CALL_OW 275
28829: PUSH
28830: LD_VAR 0 4
28834: PUSH
28835: LD_INT 2
28837: ARRAY
28838: GREATEREQUAL
28839: AND
28840: PUSH
28841: LD_VAR 0 5
28845: PPUSH
28846: LD_INT 3
28848: PPUSH
28849: CALL_OW 275
28853: PUSH
28854: LD_VAR 0 4
28858: PUSH
28859: LD_INT 3
28861: ARRAY
28862: GREATEREQUAL
28863: AND
28864: ST_TO_ADDR
// end ;
28865: LD_VAR 0 3
28869: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28870: LD_INT 0
28872: PPUSH
28873: PPUSH
28874: PPUSH
28875: PPUSH
// pom := GetBase ( building ) ;
28876: LD_ADDR_VAR 0 3
28880: PUSH
28881: LD_VAR 0 1
28885: PPUSH
28886: CALL_OW 274
28890: ST_TO_ADDR
// if not pom then
28891: LD_VAR 0 3
28895: NOT
28896: IFFALSE 28900
// exit ;
28898: GO 29070
// btype := GetBType ( building ) ;
28900: LD_ADDR_VAR 0 5
28904: PUSH
28905: LD_VAR 0 1
28909: PPUSH
28910: CALL_OW 266
28914: ST_TO_ADDR
// if btype = b_armoury then
28915: LD_VAR 0 5
28919: PUSH
28920: LD_INT 4
28922: EQUAL
28923: IFFALSE 28933
// btype := b_barracks ;
28925: LD_ADDR_VAR 0 5
28929: PUSH
28930: LD_INT 5
28932: ST_TO_ADDR
// if btype = b_depot then
28933: LD_VAR 0 5
28937: PUSH
28938: LD_INT 0
28940: EQUAL
28941: IFFALSE 28951
// btype := b_warehouse ;
28943: LD_ADDR_VAR 0 5
28947: PUSH
28948: LD_INT 1
28950: ST_TO_ADDR
// if btype = b_workshop then
28951: LD_VAR 0 5
28955: PUSH
28956: LD_INT 2
28958: EQUAL
28959: IFFALSE 28969
// btype := b_factory ;
28961: LD_ADDR_VAR 0 5
28965: PUSH
28966: LD_INT 3
28968: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28969: LD_ADDR_VAR 0 4
28973: PUSH
28974: LD_VAR 0 5
28978: PPUSH
28979: LD_VAR 0 1
28983: PPUSH
28984: CALL_OW 248
28988: PPUSH
28989: CALL_OW 450
28993: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28994: LD_ADDR_VAR 0 2
28998: PUSH
28999: LD_VAR 0 3
29003: PPUSH
29004: LD_INT 1
29006: PPUSH
29007: CALL_OW 275
29011: PUSH
29012: LD_VAR 0 4
29016: PUSH
29017: LD_INT 1
29019: ARRAY
29020: GREATEREQUAL
29021: PUSH
29022: LD_VAR 0 3
29026: PPUSH
29027: LD_INT 2
29029: PPUSH
29030: CALL_OW 275
29034: PUSH
29035: LD_VAR 0 4
29039: PUSH
29040: LD_INT 2
29042: ARRAY
29043: GREATEREQUAL
29044: AND
29045: PUSH
29046: LD_VAR 0 3
29050: PPUSH
29051: LD_INT 3
29053: PPUSH
29054: CALL_OW 275
29058: PUSH
29059: LD_VAR 0 4
29063: PUSH
29064: LD_INT 3
29066: ARRAY
29067: GREATEREQUAL
29068: AND
29069: ST_TO_ADDR
// end ;
29070: LD_VAR 0 2
29074: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29075: LD_INT 0
29077: PPUSH
29078: PPUSH
29079: PPUSH
// pom := GetBase ( building ) ;
29080: LD_ADDR_VAR 0 4
29084: PUSH
29085: LD_VAR 0 1
29089: PPUSH
29090: CALL_OW 274
29094: ST_TO_ADDR
// if not pom then
29095: LD_VAR 0 4
29099: NOT
29100: IFFALSE 29104
// exit ;
29102: GO 29205
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29104: LD_ADDR_VAR 0 5
29108: PUSH
29109: LD_VAR 0 2
29113: PPUSH
29114: LD_VAR 0 1
29118: PPUSH
29119: CALL_OW 248
29123: PPUSH
29124: CALL_OW 450
29128: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29129: LD_ADDR_VAR 0 3
29133: PUSH
29134: LD_VAR 0 4
29138: PPUSH
29139: LD_INT 1
29141: PPUSH
29142: CALL_OW 275
29146: PUSH
29147: LD_VAR 0 5
29151: PUSH
29152: LD_INT 1
29154: ARRAY
29155: GREATEREQUAL
29156: PUSH
29157: LD_VAR 0 4
29161: PPUSH
29162: LD_INT 2
29164: PPUSH
29165: CALL_OW 275
29169: PUSH
29170: LD_VAR 0 5
29174: PUSH
29175: LD_INT 2
29177: ARRAY
29178: GREATEREQUAL
29179: AND
29180: PUSH
29181: LD_VAR 0 4
29185: PPUSH
29186: LD_INT 3
29188: PPUSH
29189: CALL_OW 275
29193: PUSH
29194: LD_VAR 0 5
29198: PUSH
29199: LD_INT 3
29201: ARRAY
29202: GREATEREQUAL
29203: AND
29204: ST_TO_ADDR
// end ;
29205: LD_VAR 0 3
29209: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29210: LD_INT 0
29212: PPUSH
29213: PPUSH
29214: PPUSH
29215: PPUSH
29216: PPUSH
29217: PPUSH
29218: PPUSH
29219: PPUSH
29220: PPUSH
29221: PPUSH
29222: PPUSH
// result := false ;
29223: LD_ADDR_VAR 0 8
29227: PUSH
29228: LD_INT 0
29230: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29231: LD_VAR 0 5
29235: NOT
29236: PUSH
29237: LD_VAR 0 1
29241: NOT
29242: OR
29243: PUSH
29244: LD_VAR 0 2
29248: NOT
29249: OR
29250: PUSH
29251: LD_VAR 0 3
29255: NOT
29256: OR
29257: IFFALSE 29261
// exit ;
29259: GO 30075
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29261: LD_ADDR_VAR 0 14
29265: PUSH
29266: LD_VAR 0 1
29270: PPUSH
29271: LD_VAR 0 2
29275: PPUSH
29276: LD_VAR 0 3
29280: PPUSH
29281: LD_VAR 0 4
29285: PPUSH
29286: LD_VAR 0 5
29290: PUSH
29291: LD_INT 1
29293: ARRAY
29294: PPUSH
29295: CALL_OW 248
29299: PPUSH
29300: LD_INT 0
29302: PPUSH
29303: CALL 31328 0 6
29307: ST_TO_ADDR
// if not hexes then
29308: LD_VAR 0 14
29312: NOT
29313: IFFALSE 29317
// exit ;
29315: GO 30075
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29317: LD_ADDR_VAR 0 17
29321: PUSH
29322: LD_VAR 0 5
29326: PPUSH
29327: LD_INT 22
29329: PUSH
29330: LD_VAR 0 13
29334: PPUSH
29335: CALL_OW 255
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: LD_INT 30
29349: PUSH
29350: LD_INT 0
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 30
29359: PUSH
29360: LD_INT 1
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PPUSH
29376: CALL_OW 72
29380: ST_TO_ADDR
// for i = 1 to hexes do
29381: LD_ADDR_VAR 0 9
29385: PUSH
29386: DOUBLE
29387: LD_INT 1
29389: DEC
29390: ST_TO_ADDR
29391: LD_VAR 0 14
29395: PUSH
29396: FOR_TO
29397: IFFALSE 30073
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29399: LD_ADDR_VAR 0 13
29403: PUSH
29404: LD_VAR 0 14
29408: PUSH
29409: LD_VAR 0 9
29413: ARRAY
29414: PUSH
29415: LD_INT 1
29417: ARRAY
29418: PPUSH
29419: LD_VAR 0 14
29423: PUSH
29424: LD_VAR 0 9
29428: ARRAY
29429: PUSH
29430: LD_INT 2
29432: ARRAY
29433: PPUSH
29434: CALL_OW 428
29438: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29439: LD_VAR 0 14
29443: PUSH
29444: LD_VAR 0 9
29448: ARRAY
29449: PUSH
29450: LD_INT 1
29452: ARRAY
29453: PPUSH
29454: LD_VAR 0 14
29458: PUSH
29459: LD_VAR 0 9
29463: ARRAY
29464: PUSH
29465: LD_INT 2
29467: ARRAY
29468: PPUSH
29469: CALL_OW 351
29473: PUSH
29474: LD_VAR 0 14
29478: PUSH
29479: LD_VAR 0 9
29483: ARRAY
29484: PUSH
29485: LD_INT 1
29487: ARRAY
29488: PPUSH
29489: LD_VAR 0 14
29493: PUSH
29494: LD_VAR 0 9
29498: ARRAY
29499: PUSH
29500: LD_INT 2
29502: ARRAY
29503: PPUSH
29504: CALL_OW 488
29508: NOT
29509: OR
29510: PUSH
29511: LD_VAR 0 13
29515: PPUSH
29516: CALL_OW 247
29520: PUSH
29521: LD_INT 3
29523: EQUAL
29524: OR
29525: IFFALSE 29531
// exit ;
29527: POP
29528: POP
29529: GO 30075
// if not tmp then
29531: LD_VAR 0 13
29535: NOT
29536: IFFALSE 29540
// continue ;
29538: GO 29396
// result := true ;
29540: LD_ADDR_VAR 0 8
29544: PUSH
29545: LD_INT 1
29547: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29548: LD_VAR 0 6
29552: PUSH
29553: LD_VAR 0 13
29557: PPUSH
29558: CALL_OW 247
29562: PUSH
29563: LD_INT 2
29565: EQUAL
29566: AND
29567: PUSH
29568: LD_VAR 0 13
29572: PPUSH
29573: CALL_OW 263
29577: PUSH
29578: LD_INT 1
29580: EQUAL
29581: AND
29582: IFFALSE 29746
// begin if IsDrivenBy ( tmp ) then
29584: LD_VAR 0 13
29588: PPUSH
29589: CALL_OW 311
29593: IFFALSE 29597
// continue ;
29595: GO 29396
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29597: LD_VAR 0 6
29601: PPUSH
29602: LD_INT 3
29604: PUSH
29605: LD_INT 60
29607: PUSH
29608: EMPTY
29609: LIST
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 3
29617: PUSH
29618: LD_INT 55
29620: PUSH
29621: EMPTY
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PPUSH
29632: CALL_OW 72
29636: IFFALSE 29744
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29638: LD_ADDR_VAR 0 18
29642: PUSH
29643: LD_VAR 0 6
29647: PPUSH
29648: LD_INT 3
29650: PUSH
29651: LD_INT 60
29653: PUSH
29654: EMPTY
29655: LIST
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 3
29663: PUSH
29664: LD_INT 55
29666: PUSH
29667: EMPTY
29668: LIST
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PPUSH
29678: CALL_OW 72
29682: PUSH
29683: LD_INT 1
29685: ARRAY
29686: ST_TO_ADDR
// if IsInUnit ( driver ) then
29687: LD_VAR 0 18
29691: PPUSH
29692: CALL_OW 310
29696: IFFALSE 29707
// ComExit ( driver ) ;
29698: LD_VAR 0 18
29702: PPUSH
29703: CALL 55129 0 1
// AddComEnterUnit ( driver , tmp ) ;
29707: LD_VAR 0 18
29711: PPUSH
29712: LD_VAR 0 13
29716: PPUSH
29717: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29721: LD_VAR 0 18
29725: PPUSH
29726: LD_VAR 0 7
29730: PPUSH
29731: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29735: LD_VAR 0 18
29739: PPUSH
29740: CALL_OW 181
// end ; continue ;
29744: GO 29396
// end ; if not cleaners or not tmp in cleaners then
29746: LD_VAR 0 6
29750: NOT
29751: PUSH
29752: LD_VAR 0 13
29756: PUSH
29757: LD_VAR 0 6
29761: IN
29762: NOT
29763: OR
29764: IFFALSE 30071
// begin if dep then
29766: LD_VAR 0 17
29770: IFFALSE 29906
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29772: LD_ADDR_VAR 0 16
29776: PUSH
29777: LD_VAR 0 17
29781: PUSH
29782: LD_INT 1
29784: ARRAY
29785: PPUSH
29786: CALL_OW 250
29790: PPUSH
29791: LD_VAR 0 17
29795: PUSH
29796: LD_INT 1
29798: ARRAY
29799: PPUSH
29800: CALL_OW 254
29804: PPUSH
29805: LD_INT 5
29807: PPUSH
29808: CALL_OW 272
29812: PUSH
29813: LD_VAR 0 17
29817: PUSH
29818: LD_INT 1
29820: ARRAY
29821: PPUSH
29822: CALL_OW 251
29826: PPUSH
29827: LD_VAR 0 17
29831: PUSH
29832: LD_INT 1
29834: ARRAY
29835: PPUSH
29836: CALL_OW 254
29840: PPUSH
29841: LD_INT 5
29843: PPUSH
29844: CALL_OW 273
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29853: LD_VAR 0 16
29857: PUSH
29858: LD_INT 1
29860: ARRAY
29861: PPUSH
29862: LD_VAR 0 16
29866: PUSH
29867: LD_INT 2
29869: ARRAY
29870: PPUSH
29871: CALL_OW 488
29875: IFFALSE 29906
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29877: LD_VAR 0 13
29881: PPUSH
29882: LD_VAR 0 16
29886: PUSH
29887: LD_INT 1
29889: ARRAY
29890: PPUSH
29891: LD_VAR 0 16
29895: PUSH
29896: LD_INT 2
29898: ARRAY
29899: PPUSH
29900: CALL_OW 111
// continue ;
29904: GO 29396
// end ; end ; r := GetDir ( tmp ) ;
29906: LD_ADDR_VAR 0 15
29910: PUSH
29911: LD_VAR 0 13
29915: PPUSH
29916: CALL_OW 254
29920: ST_TO_ADDR
// if r = 5 then
29921: LD_VAR 0 15
29925: PUSH
29926: LD_INT 5
29928: EQUAL
29929: IFFALSE 29939
// r := 0 ;
29931: LD_ADDR_VAR 0 15
29935: PUSH
29936: LD_INT 0
29938: ST_TO_ADDR
// for j = r to 5 do
29939: LD_ADDR_VAR 0 10
29943: PUSH
29944: DOUBLE
29945: LD_VAR 0 15
29949: DEC
29950: ST_TO_ADDR
29951: LD_INT 5
29953: PUSH
29954: FOR_TO
29955: IFFALSE 30069
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29957: LD_ADDR_VAR 0 11
29961: PUSH
29962: LD_VAR 0 13
29966: PPUSH
29967: CALL_OW 250
29971: PPUSH
29972: LD_VAR 0 10
29976: PPUSH
29977: LD_INT 2
29979: PPUSH
29980: CALL_OW 272
29984: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29985: LD_ADDR_VAR 0 12
29989: PUSH
29990: LD_VAR 0 13
29994: PPUSH
29995: CALL_OW 251
29999: PPUSH
30000: LD_VAR 0 10
30004: PPUSH
30005: LD_INT 2
30007: PPUSH
30008: CALL_OW 273
30012: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30013: LD_VAR 0 11
30017: PPUSH
30018: LD_VAR 0 12
30022: PPUSH
30023: CALL_OW 488
30027: PUSH
30028: LD_VAR 0 11
30032: PPUSH
30033: LD_VAR 0 12
30037: PPUSH
30038: CALL_OW 428
30042: NOT
30043: AND
30044: IFFALSE 30067
// begin ComMoveXY ( tmp , _x , _y ) ;
30046: LD_VAR 0 13
30050: PPUSH
30051: LD_VAR 0 11
30055: PPUSH
30056: LD_VAR 0 12
30060: PPUSH
30061: CALL_OW 111
// break ;
30065: GO 30069
// end ; end ;
30067: GO 29954
30069: POP
30070: POP
// end ; end ;
30071: GO 29396
30073: POP
30074: POP
// end ;
30075: LD_VAR 0 8
30079: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30080: LD_INT 0
30082: PPUSH
// result := true ;
30083: LD_ADDR_VAR 0 3
30087: PUSH
30088: LD_INT 1
30090: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30091: LD_VAR 0 2
30095: PUSH
30096: LD_INT 24
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30110
30102: LD_INT 33
30104: DOUBLE
30105: EQUAL
30106: IFTRUE 30110
30108: GO 30135
30110: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30111: LD_ADDR_VAR 0 3
30115: PUSH
30116: LD_INT 32
30118: PPUSH
30119: LD_VAR 0 1
30123: PPUSH
30124: CALL_OW 321
30128: PUSH
30129: LD_INT 2
30131: EQUAL
30132: ST_TO_ADDR
30133: GO 30451
30135: LD_INT 20
30137: DOUBLE
30138: EQUAL
30139: IFTRUE 30143
30141: GO 30168
30143: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30144: LD_ADDR_VAR 0 3
30148: PUSH
30149: LD_INT 6
30151: PPUSH
30152: LD_VAR 0 1
30156: PPUSH
30157: CALL_OW 321
30161: PUSH
30162: LD_INT 2
30164: EQUAL
30165: ST_TO_ADDR
30166: GO 30451
30168: LD_INT 22
30170: DOUBLE
30171: EQUAL
30172: IFTRUE 30182
30174: LD_INT 36
30176: DOUBLE
30177: EQUAL
30178: IFTRUE 30182
30180: GO 30207
30182: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30183: LD_ADDR_VAR 0 3
30187: PUSH
30188: LD_INT 15
30190: PPUSH
30191: LD_VAR 0 1
30195: PPUSH
30196: CALL_OW 321
30200: PUSH
30201: LD_INT 2
30203: EQUAL
30204: ST_TO_ADDR
30205: GO 30451
30207: LD_INT 30
30209: DOUBLE
30210: EQUAL
30211: IFTRUE 30215
30213: GO 30240
30215: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30216: LD_ADDR_VAR 0 3
30220: PUSH
30221: LD_INT 20
30223: PPUSH
30224: LD_VAR 0 1
30228: PPUSH
30229: CALL_OW 321
30233: PUSH
30234: LD_INT 2
30236: EQUAL
30237: ST_TO_ADDR
30238: GO 30451
30240: LD_INT 28
30242: DOUBLE
30243: EQUAL
30244: IFTRUE 30254
30246: LD_INT 21
30248: DOUBLE
30249: EQUAL
30250: IFTRUE 30254
30252: GO 30279
30254: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30255: LD_ADDR_VAR 0 3
30259: PUSH
30260: LD_INT 21
30262: PPUSH
30263: LD_VAR 0 1
30267: PPUSH
30268: CALL_OW 321
30272: PUSH
30273: LD_INT 2
30275: EQUAL
30276: ST_TO_ADDR
30277: GO 30451
30279: LD_INT 16
30281: DOUBLE
30282: EQUAL
30283: IFTRUE 30287
30285: GO 30312
30287: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30288: LD_ADDR_VAR 0 3
30292: PUSH
30293: LD_INT 84
30295: PPUSH
30296: LD_VAR 0 1
30300: PPUSH
30301: CALL_OW 321
30305: PUSH
30306: LD_INT 2
30308: EQUAL
30309: ST_TO_ADDR
30310: GO 30451
30312: LD_INT 19
30314: DOUBLE
30315: EQUAL
30316: IFTRUE 30326
30318: LD_INT 23
30320: DOUBLE
30321: EQUAL
30322: IFTRUE 30326
30324: GO 30351
30326: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30327: LD_ADDR_VAR 0 3
30331: PUSH
30332: LD_INT 83
30334: PPUSH
30335: LD_VAR 0 1
30339: PPUSH
30340: CALL_OW 321
30344: PUSH
30345: LD_INT 2
30347: EQUAL
30348: ST_TO_ADDR
30349: GO 30451
30351: LD_INT 17
30353: DOUBLE
30354: EQUAL
30355: IFTRUE 30359
30357: GO 30384
30359: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30360: LD_ADDR_VAR 0 3
30364: PUSH
30365: LD_INT 39
30367: PPUSH
30368: LD_VAR 0 1
30372: PPUSH
30373: CALL_OW 321
30377: PUSH
30378: LD_INT 2
30380: EQUAL
30381: ST_TO_ADDR
30382: GO 30451
30384: LD_INT 18
30386: DOUBLE
30387: EQUAL
30388: IFTRUE 30392
30390: GO 30417
30392: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30393: LD_ADDR_VAR 0 3
30397: PUSH
30398: LD_INT 40
30400: PPUSH
30401: LD_VAR 0 1
30405: PPUSH
30406: CALL_OW 321
30410: PUSH
30411: LD_INT 2
30413: EQUAL
30414: ST_TO_ADDR
30415: GO 30451
30417: LD_INT 27
30419: DOUBLE
30420: EQUAL
30421: IFTRUE 30425
30423: GO 30450
30425: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30426: LD_ADDR_VAR 0 3
30430: PUSH
30431: LD_INT 35
30433: PPUSH
30434: LD_VAR 0 1
30438: PPUSH
30439: CALL_OW 321
30443: PUSH
30444: LD_INT 2
30446: EQUAL
30447: ST_TO_ADDR
30448: GO 30451
30450: POP
// end ;
30451: LD_VAR 0 3
30455: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30456: LD_INT 0
30458: PPUSH
30459: PPUSH
30460: PPUSH
30461: PPUSH
30462: PPUSH
30463: PPUSH
30464: PPUSH
30465: PPUSH
30466: PPUSH
30467: PPUSH
30468: PPUSH
// result := false ;
30469: LD_ADDR_VAR 0 6
30473: PUSH
30474: LD_INT 0
30476: ST_TO_ADDR
// if btype = b_depot then
30477: LD_VAR 0 2
30481: PUSH
30482: LD_INT 0
30484: EQUAL
30485: IFFALSE 30497
// begin result := true ;
30487: LD_ADDR_VAR 0 6
30491: PUSH
30492: LD_INT 1
30494: ST_TO_ADDR
// exit ;
30495: GO 31323
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30497: LD_VAR 0 1
30501: NOT
30502: PUSH
30503: LD_VAR 0 1
30507: PPUSH
30508: CALL_OW 266
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: LD_INT 1
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: IN
30523: NOT
30524: OR
30525: PUSH
30526: LD_VAR 0 2
30530: NOT
30531: OR
30532: PUSH
30533: LD_VAR 0 5
30537: PUSH
30538: LD_INT 0
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: LD_INT 3
30549: PUSH
30550: LD_INT 4
30552: PUSH
30553: LD_INT 5
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: IN
30564: NOT
30565: OR
30566: PUSH
30567: LD_VAR 0 3
30571: PPUSH
30572: LD_VAR 0 4
30576: PPUSH
30577: CALL_OW 488
30581: NOT
30582: OR
30583: IFFALSE 30587
// exit ;
30585: GO 31323
// side := GetSide ( depot ) ;
30587: LD_ADDR_VAR 0 9
30591: PUSH
30592: LD_VAR 0 1
30596: PPUSH
30597: CALL_OW 255
30601: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30602: LD_VAR 0 9
30606: PPUSH
30607: LD_VAR 0 2
30611: PPUSH
30612: CALL 30080 0 2
30616: NOT
30617: IFFALSE 30621
// exit ;
30619: GO 31323
// pom := GetBase ( depot ) ;
30621: LD_ADDR_VAR 0 10
30625: PUSH
30626: LD_VAR 0 1
30630: PPUSH
30631: CALL_OW 274
30635: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30636: LD_ADDR_VAR 0 11
30640: PUSH
30641: LD_VAR 0 2
30645: PPUSH
30646: LD_VAR 0 1
30650: PPUSH
30651: CALL_OW 248
30655: PPUSH
30656: CALL_OW 450
30660: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30661: LD_VAR 0 10
30665: PPUSH
30666: LD_INT 1
30668: PPUSH
30669: CALL_OW 275
30673: PUSH
30674: LD_VAR 0 11
30678: PUSH
30679: LD_INT 1
30681: ARRAY
30682: GREATEREQUAL
30683: PUSH
30684: LD_VAR 0 10
30688: PPUSH
30689: LD_INT 2
30691: PPUSH
30692: CALL_OW 275
30696: PUSH
30697: LD_VAR 0 11
30701: PUSH
30702: LD_INT 2
30704: ARRAY
30705: GREATEREQUAL
30706: AND
30707: PUSH
30708: LD_VAR 0 10
30712: PPUSH
30713: LD_INT 3
30715: PPUSH
30716: CALL_OW 275
30720: PUSH
30721: LD_VAR 0 11
30725: PUSH
30726: LD_INT 3
30728: ARRAY
30729: GREATEREQUAL
30730: AND
30731: NOT
30732: IFFALSE 30736
// exit ;
30734: GO 31323
// if GetBType ( depot ) = b_depot then
30736: LD_VAR 0 1
30740: PPUSH
30741: CALL_OW 266
30745: PUSH
30746: LD_INT 0
30748: EQUAL
30749: IFFALSE 30761
// dist := 28 else
30751: LD_ADDR_VAR 0 14
30755: PUSH
30756: LD_INT 28
30758: ST_TO_ADDR
30759: GO 30769
// dist := 36 ;
30761: LD_ADDR_VAR 0 14
30765: PUSH
30766: LD_INT 36
30768: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30769: LD_VAR 0 1
30773: PPUSH
30774: LD_VAR 0 3
30778: PPUSH
30779: LD_VAR 0 4
30783: PPUSH
30784: CALL_OW 297
30788: PUSH
30789: LD_VAR 0 14
30793: GREATER
30794: IFFALSE 30798
// exit ;
30796: GO 31323
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30798: LD_ADDR_VAR 0 12
30802: PUSH
30803: LD_VAR 0 2
30807: PPUSH
30808: LD_VAR 0 3
30812: PPUSH
30813: LD_VAR 0 4
30817: PPUSH
30818: LD_VAR 0 5
30822: PPUSH
30823: LD_VAR 0 1
30827: PPUSH
30828: CALL_OW 248
30832: PPUSH
30833: LD_INT 0
30835: PPUSH
30836: CALL 31328 0 6
30840: ST_TO_ADDR
// if not hexes then
30841: LD_VAR 0 12
30845: NOT
30846: IFFALSE 30850
// exit ;
30848: GO 31323
// hex := GetHexInfo ( x , y ) ;
30850: LD_ADDR_VAR 0 15
30854: PUSH
30855: LD_VAR 0 3
30859: PPUSH
30860: LD_VAR 0 4
30864: PPUSH
30865: CALL_OW 546
30869: ST_TO_ADDR
// if hex [ 1 ] then
30870: LD_VAR 0 15
30874: PUSH
30875: LD_INT 1
30877: ARRAY
30878: IFFALSE 30882
// exit ;
30880: GO 31323
// height := hex [ 2 ] ;
30882: LD_ADDR_VAR 0 13
30886: PUSH
30887: LD_VAR 0 15
30891: PUSH
30892: LD_INT 2
30894: ARRAY
30895: ST_TO_ADDR
// for i = 1 to hexes do
30896: LD_ADDR_VAR 0 7
30900: PUSH
30901: DOUBLE
30902: LD_INT 1
30904: DEC
30905: ST_TO_ADDR
30906: LD_VAR 0 12
30910: PUSH
30911: FOR_TO
30912: IFFALSE 31242
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30914: LD_VAR 0 12
30918: PUSH
30919: LD_VAR 0 7
30923: ARRAY
30924: PUSH
30925: LD_INT 1
30927: ARRAY
30928: PPUSH
30929: LD_VAR 0 12
30933: PUSH
30934: LD_VAR 0 7
30938: ARRAY
30939: PUSH
30940: LD_INT 2
30942: ARRAY
30943: PPUSH
30944: CALL_OW 488
30948: NOT
30949: PUSH
30950: LD_VAR 0 12
30954: PUSH
30955: LD_VAR 0 7
30959: ARRAY
30960: PUSH
30961: LD_INT 1
30963: ARRAY
30964: PPUSH
30965: LD_VAR 0 12
30969: PUSH
30970: LD_VAR 0 7
30974: ARRAY
30975: PUSH
30976: LD_INT 2
30978: ARRAY
30979: PPUSH
30980: CALL_OW 428
30984: PUSH
30985: LD_INT 0
30987: GREATER
30988: OR
30989: PUSH
30990: LD_VAR 0 12
30994: PUSH
30995: LD_VAR 0 7
30999: ARRAY
31000: PUSH
31001: LD_INT 1
31003: ARRAY
31004: PPUSH
31005: LD_VAR 0 12
31009: PUSH
31010: LD_VAR 0 7
31014: ARRAY
31015: PUSH
31016: LD_INT 2
31018: ARRAY
31019: PPUSH
31020: CALL_OW 351
31024: OR
31025: IFFALSE 31031
// exit ;
31027: POP
31028: POP
31029: GO 31323
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31031: LD_ADDR_VAR 0 8
31035: PUSH
31036: LD_VAR 0 12
31040: PUSH
31041: LD_VAR 0 7
31045: ARRAY
31046: PUSH
31047: LD_INT 1
31049: ARRAY
31050: PPUSH
31051: LD_VAR 0 12
31055: PUSH
31056: LD_VAR 0 7
31060: ARRAY
31061: PUSH
31062: LD_INT 2
31064: ARRAY
31065: PPUSH
31066: CALL_OW 546
31070: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31071: LD_VAR 0 8
31075: PUSH
31076: LD_INT 1
31078: ARRAY
31079: PUSH
31080: LD_VAR 0 8
31084: PUSH
31085: LD_INT 2
31087: ARRAY
31088: PUSH
31089: LD_VAR 0 13
31093: PUSH
31094: LD_INT 2
31096: PLUS
31097: GREATER
31098: OR
31099: PUSH
31100: LD_VAR 0 8
31104: PUSH
31105: LD_INT 2
31107: ARRAY
31108: PUSH
31109: LD_VAR 0 13
31113: PUSH
31114: LD_INT 2
31116: MINUS
31117: LESS
31118: OR
31119: PUSH
31120: LD_VAR 0 8
31124: PUSH
31125: LD_INT 3
31127: ARRAY
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: LD_INT 8
31134: PUSH
31135: LD_INT 9
31137: PUSH
31138: LD_INT 10
31140: PUSH
31141: LD_INT 11
31143: PUSH
31144: LD_INT 12
31146: PUSH
31147: LD_INT 13
31149: PUSH
31150: LD_INT 16
31152: PUSH
31153: LD_INT 17
31155: PUSH
31156: LD_INT 18
31158: PUSH
31159: LD_INT 19
31161: PUSH
31162: LD_INT 20
31164: PUSH
31165: LD_INT 21
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: IN
31183: NOT
31184: OR
31185: PUSH
31186: LD_VAR 0 8
31190: PUSH
31191: LD_INT 5
31193: ARRAY
31194: NOT
31195: OR
31196: PUSH
31197: LD_VAR 0 8
31201: PUSH
31202: LD_INT 6
31204: ARRAY
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: LD_INT 7
31214: PUSH
31215: LD_INT 9
31217: PUSH
31218: LD_INT 10
31220: PUSH
31221: LD_INT 11
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: IN
31232: NOT
31233: OR
31234: IFFALSE 31240
// exit ;
31236: POP
31237: POP
31238: GO 31323
// end ;
31240: GO 30911
31242: POP
31243: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31244: LD_VAR 0 9
31248: PPUSH
31249: LD_VAR 0 3
31253: PPUSH
31254: LD_VAR 0 4
31258: PPUSH
31259: LD_INT 20
31261: PPUSH
31262: CALL 23246 0 4
31266: PUSH
31267: LD_INT 4
31269: ARRAY
31270: IFFALSE 31274
// exit ;
31272: GO 31323
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31274: LD_VAR 0 2
31278: PUSH
31279: LD_INT 29
31281: PUSH
31282: LD_INT 30
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: IN
31289: PUSH
31290: LD_VAR 0 3
31294: PPUSH
31295: LD_VAR 0 4
31299: PPUSH
31300: LD_VAR 0 9
31304: PPUSH
31305: CALL_OW 440
31309: NOT
31310: AND
31311: IFFALSE 31315
// exit ;
31313: GO 31323
// result := true ;
31315: LD_ADDR_VAR 0 6
31319: PUSH
31320: LD_INT 1
31322: ST_TO_ADDR
// end ;
31323: LD_VAR 0 6
31327: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31328: LD_INT 0
31330: PPUSH
31331: PPUSH
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
31336: PPUSH
31337: PPUSH
31338: PPUSH
31339: PPUSH
31340: PPUSH
31341: PPUSH
31342: PPUSH
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
31351: PPUSH
31352: PPUSH
31353: PPUSH
31354: PPUSH
31355: PPUSH
31356: PPUSH
31357: PPUSH
31358: PPUSH
31359: PPUSH
31360: PPUSH
31361: PPUSH
31362: PPUSH
31363: PPUSH
31364: PPUSH
31365: PPUSH
31366: PPUSH
31367: PPUSH
31368: PPUSH
31369: PPUSH
31370: PPUSH
31371: PPUSH
31372: PPUSH
31373: PPUSH
31374: PPUSH
31375: PPUSH
31376: PPUSH
31377: PPUSH
31378: PPUSH
31379: PPUSH
31380: PPUSH
31381: PPUSH
31382: PPUSH
31383: PPUSH
31384: PPUSH
31385: PPUSH
31386: PPUSH
31387: PPUSH
// result = [ ] ;
31388: LD_ADDR_VAR 0 7
31392: PUSH
31393: EMPTY
31394: ST_TO_ADDR
// temp_list = [ ] ;
31395: LD_ADDR_VAR 0 9
31399: PUSH
31400: EMPTY
31401: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31402: LD_VAR 0 4
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: LD_INT 3
31418: PUSH
31419: LD_INT 4
31421: PUSH
31422: LD_INT 5
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: IN
31433: NOT
31434: PUSH
31435: LD_VAR 0 1
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: IN
31450: PUSH
31451: LD_VAR 0 5
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: LIST
31469: IN
31470: NOT
31471: AND
31472: OR
31473: IFFALSE 31477
// exit ;
31475: GO 49868
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31477: LD_VAR 0 1
31481: PUSH
31482: LD_INT 6
31484: PUSH
31485: LD_INT 7
31487: PUSH
31488: LD_INT 8
31490: PUSH
31491: LD_INT 13
31493: PUSH
31494: LD_INT 12
31496: PUSH
31497: LD_INT 15
31499: PUSH
31500: LD_INT 11
31502: PUSH
31503: LD_INT 14
31505: PUSH
31506: LD_INT 10
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: IN
31520: IFFALSE 31530
// btype = b_lab ;
31522: LD_ADDR_VAR 0 1
31526: PUSH
31527: LD_INT 6
31529: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31530: LD_VAR 0 6
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 2
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: IN
31549: NOT
31550: PUSH
31551: LD_VAR 0 1
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: LD_INT 2
31564: PUSH
31565: LD_INT 3
31567: PUSH
31568: LD_INT 6
31570: PUSH
31571: LD_INT 36
31573: PUSH
31574: LD_INT 4
31576: PUSH
31577: LD_INT 5
31579: PUSH
31580: LD_INT 31
31582: PUSH
31583: LD_INT 32
31585: PUSH
31586: LD_INT 33
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: IN
31602: NOT
31603: PUSH
31604: LD_VAR 0 6
31608: PUSH
31609: LD_INT 1
31611: EQUAL
31612: AND
31613: OR
31614: PUSH
31615: LD_VAR 0 1
31619: PUSH
31620: LD_INT 2
31622: PUSH
31623: LD_INT 3
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: IN
31630: NOT
31631: PUSH
31632: LD_VAR 0 6
31636: PUSH
31637: LD_INT 2
31639: EQUAL
31640: AND
31641: OR
31642: IFFALSE 31652
// mode = 0 ;
31644: LD_ADDR_VAR 0 6
31648: PUSH
31649: LD_INT 0
31651: ST_TO_ADDR
// case mode of 0 :
31652: LD_VAR 0 6
31656: PUSH
31657: LD_INT 0
31659: DOUBLE
31660: EQUAL
31661: IFTRUE 31665
31663: GO 43118
31665: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31666: LD_ADDR_VAR 0 11
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 0
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 1
31694: PUSH
31695: LD_INT 0
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: LD_INT 1
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: LD_INT 0
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: LD_INT 1
31739: NEG
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 1
31747: NEG
31748: PUSH
31749: LD_INT 2
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: LD_INT 2
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: LD_INT 1
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 1
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: LD_INT 2
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 3
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: LD_INT 3
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31859: LD_ADDR_VAR 0 12
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 1
31917: NEG
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 1
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: PUSH
31962: LD_INT 1
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: NEG
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: NEG
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 2
32005: NEG
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 3
32016: NEG
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 3
32027: NEG
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32055: LD_ADDR_VAR 0 13
32059: PUSH
32060: LD_INT 0
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 1
32124: NEG
32125: PUSH
32126: LD_INT 1
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: LD_INT 2
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 2
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 2
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 2
32178: NEG
32179: PUSH
32180: LD_INT 1
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 2
32190: NEG
32191: PUSH
32192: LD_INT 2
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 2
32202: NEG
32203: PUSH
32204: LD_INT 3
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 3
32214: NEG
32215: PUSH
32216: LD_INT 2
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 3
32226: NEG
32227: PUSH
32228: LD_INT 3
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32254: LD_ADDR_VAR 0 14
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 0
32271: PUSH
32272: LD_INT 1
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: LD_INT 1
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: NEG
32336: PUSH
32337: LD_INT 2
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 2
32350: NEG
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: LD_INT 3
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: LD_INT 3
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: LD_INT 2
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32450: LD_ADDR_VAR 0 15
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 2
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: NEG
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: NEG
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: LD_INT 1
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 3
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32643: LD_ADDR_VAR 0 16
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 2
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: LD_INT 1
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: LD_INT 2
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 3
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 3
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: LD_INT 3
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32836: LD_ADDR_VAR 0 17
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 1
32905: NEG
32906: PUSH
32907: LD_INT 1
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: LD_INT 2
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: LD_INT 2
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 2
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 2
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: LD_INT 2
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: LD_INT 2
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: NEG
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: NEG
33036: PUSH
33037: LD_INT 2
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33066: LD_ADDR_VAR 0 18
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 1
33124: NEG
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: NEG
33136: PUSH
33137: LD_INT 1
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 2
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: LD_INT 2
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: PUSH
33212: LD_INT 2
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 2
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: LD_INT 1
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: LD_INT 2
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33296: LD_ADDR_VAR 0 19
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: LD_INT 2
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 1
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 2
33421: PUSH
33422: LD_INT 1
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: NEG
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 2
33495: NEG
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33526: LD_ADDR_VAR 0 20
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: LD_INT 2
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: LD_INT 2
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: LD_INT 2
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 2
33702: NEG
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: LD_INT 1
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33756: LD_ADDR_VAR 0 21
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 1
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 2
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 2
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 2
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: NEG
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: NEG
33956: PUSH
33957: LD_INT 2
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33986: LD_ADDR_VAR 0 22
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: LD_INT 2
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34216: LD_ADDR_VAR 0 23
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 0
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: NEG
34298: PUSH
34299: LD_INT 2
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: LD_INT 2
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 2
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 2
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: LD_INT 2
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: LD_INT 3
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: LD_INT 3
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: LD_INT 1
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34496: LD_ADDR_VAR 0 24
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: LD_INT 2
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: LD_INT 2
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: NEG
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 2
34683: NEG
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 2
34695: NEG
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: LD_INT 2
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: LD_INT 1
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 3
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 3
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34772: LD_ADDR_VAR 0 25
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: LD_INT 2
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: LD_INT 2
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 0
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: NEG
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 2
34959: NEG
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 2
34971: NEG
34972: PUSH
34973: LD_INT 2
34975: NEG
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: LD_INT 2
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 2
35003: PUSH
35004: LD_INT 3
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: LD_INT 3
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35046: LD_ADDR_VAR 0 26
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 1
35066: NEG
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 1
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: LD_INT 1
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: NEG
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: LD_INT 2
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: LD_INT 2
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: LD_INT 2
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 1
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 2
35245: NEG
35246: PUSH
35247: LD_INT 2
35249: NEG
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: LD_INT 3
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: LD_INT 3
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 2
35288: NEG
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35322: LD_ADDR_VAR 0 27
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 1
35391: NEG
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: LD_INT 2
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 2
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: LD_INT 1
35429: NEG
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 2
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 2
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 2
35457: PUSH
35458: LD_INT 2
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 2
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 2
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: LD_INT 1
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: LD_INT 0
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 2
35509: NEG
35510: PUSH
35511: LD_INT 1
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: LD_INT 2
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: NEG
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 3
35555: NEG
35556: PUSH
35557: LD_INT 1
35559: NEG
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 3
35567: NEG
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35602: LD_ADDR_VAR 0 28
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: LD_INT 1
35622: NEG
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 1
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: LD_INT 2
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 2
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: LD_INT 2
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 2
35778: NEG
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: NEG
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 2
35813: NEG
35814: PUSH
35815: LD_INT 3
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 3
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 3
35837: NEG
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 3
35849: NEG
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35884: LD_ADDR_VAR 0 29
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: NEG
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 2
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 2
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 2
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 2
36050: NEG
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: LD_INT 2
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: LD_INT 3
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 3
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: LD_INT 3
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 3
36128: NEG
36129: PUSH
36130: LD_INT 2
36132: NEG
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36163: LD_ADDR_VAR 0 30
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: LD_INT 2
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: LD_INT 2
36259: NEG
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 1
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 2
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 2
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: NEG
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: NEG
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: LD_INT 3
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: LD_INT 2
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 3
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: LD_INT 3
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 2
36395: NEG
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 3
36406: NEG
36407: PUSH
36408: LD_INT 1
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36441: LD_ADDR_VAR 0 31
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: LD_INT 2
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 2
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 2
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: NEG
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 2
36630: NEG
36631: PUSH
36632: LD_INT 3
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 2
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 3
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: LD_INT 3
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 3
36684: NEG
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36719: LD_ADDR_VAR 0 32
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 2
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 2
36885: NEG
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: LD_INT 3
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: LD_INT 2
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 3
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: LD_INT 3
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 2
36951: NEG
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 3
36962: NEG
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36997: LD_ADDR_VAR 0 33
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 2
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: NEG
37188: PUSH
37189: LD_INT 3
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 3
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: LD_INT 2
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 3
37241: NEG
37242: PUSH
37243: LD_INT 2
37245: NEG
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37276: LD_ADDR_VAR 0 34
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: LD_INT 2
37361: NEG
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 2
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 2
37443: NEG
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: LD_INT 2
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: LD_INT 3
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 2
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 3
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: LD_INT 3
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: NEG
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 3
37521: NEG
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37556: LD_ADDR_VAR 0 35
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 2
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37668: LD_ADDR_VAR 0 36
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: NEG
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: LD_INT 1
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37780: LD_ADDR_VAR 0 37
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: LD_INT 1
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: LD_INT 1
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: LD_INT 1
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37892: LD_ADDR_VAR 0 38
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38004: LD_ADDR_VAR 0 39
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: LD_INT 2
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38116: LD_ADDR_VAR 0 40
38120: PUSH
38121: LD_INT 0
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38228: LD_ADDR_VAR 0 41
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: NEG
38310: PUSH
38311: LD_INT 2
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 2
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 2
38406: NEG
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 2
38418: NEG
38419: PUSH
38420: LD_INT 3
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 3
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 3
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: PUSH
38462: LD_INT 2
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 3
38471: PUSH
38472: LD_INT 3
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: LD_INT 3
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 3
38502: NEG
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 3
38513: NEG
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 3
38525: NEG
38526: PUSH
38527: LD_INT 2
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 3
38537: NEG
38538: PUSH
38539: LD_INT 3
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38578: LD_ADDR_VAR 0 42
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 2
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 2
38756: NEG
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: NEG
38769: PUSH
38770: LD_INT 3
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: LD_INT 3
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: LD_INT 3
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 3
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 3
38824: PUSH
38825: LD_INT 3
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: LD_INT 3
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: LD_INT 3
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: LD_INT 3
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 3
38875: NEG
38876: PUSH
38877: LD_INT 2
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 3
38887: NEG
38888: PUSH
38889: LD_INT 3
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38928: LD_ADDR_VAR 0 43
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 0
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: NEG
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 2
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: LD_INT 1
39035: NEG
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 2
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: LD_INT 2
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 2
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 2
39094: NEG
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: LD_INT 3
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 3
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: LD_INT 2
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 3
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: LD_INT 3
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: LD_INT 3
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 3
39224: NEG
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 3
39235: NEG
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39276: LD_ADDR_VAR 0 44
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: LD_INT 2
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: LD_INT 2
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: LD_INT 2
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: NEG
39467: PUSH
39468: LD_INT 3
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 3
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 3
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 3
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 3
39519: PUSH
39520: LD_INT 3
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 2
39529: PUSH
39530: LD_INT 3
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 2
39539: NEG
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 3
39550: NEG
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 3
39561: NEG
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 3
39573: NEG
39574: PUSH
39575: LD_INT 2
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 3
39585: NEG
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39626: LD_ADDR_VAR 0 45
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 2
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 2
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 2
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: LD_INT 3
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: LD_INT 3
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 3
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 2
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 3
39862: PUSH
39863: LD_INT 2
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 3
39872: PUSH
39873: LD_INT 3
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: LD_INT 3
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 3
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: LD_INT 3
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 3
39923: NEG
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 3
39935: NEG
39936: PUSH
39937: LD_INT 3
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39976: LD_ADDR_VAR 0 46
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 3
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: LD_INT 3
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: LD_INT 2
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 3
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: LD_INT 3
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 3
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 3
40272: NEG
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 3
40283: NEG
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40324: LD_ADDR_VAR 0 47
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 2
40439: NEG
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: LD_INT 2
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40475: LD_ADDR_VAR 0 48
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: LD_INT 2
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 2
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40622: LD_ADDR_VAR 0 49
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40766: LD_ADDR_VAR 0 50
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 2
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 2
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40910: LD_ADDR_VAR 0 51
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: NEG
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 2
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: NEG
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: LD_INT 1
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41057: LD_ADDR_VAR 0 52
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41208: LD_ADDR_VAR 0 53
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41438: LD_ADDR_VAR 0 54
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: LD_INT 2
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 2
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41668: LD_ADDR_VAR 0 55
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41898: LD_ADDR_VAR 0 56
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42128: LD_ADDR_VAR 0 57
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: LD_INT 2
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 2
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: LD_INT 2
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42358: LD_ADDR_VAR 0 58
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 2
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42588: LD_ADDR_VAR 0 59
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42676: LD_ADDR_VAR 0 60
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42764: LD_ADDR_VAR 0 61
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42852: LD_ADDR_VAR 0 62
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42940: LD_ADDR_VAR 0 63
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43028: LD_ADDR_VAR 0 64
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// end ; 1 :
43116: GO 49013
43118: LD_INT 1
43120: DOUBLE
43121: EQUAL
43122: IFTRUE 43126
43124: GO 45749
43126: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43127: LD_ADDR_VAR 0 11
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: LD_INT 3
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 3
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: LIST
43170: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43171: LD_ADDR_VAR 0 12
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 3
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43212: LD_ADDR_VAR 0 13
43216: PUSH
43217: LD_INT 3
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: PUSH
43230: LD_INT 3
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 2
43239: PUSH
43240: LD_INT 3
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43252: LD_ADDR_VAR 0 14
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: LD_INT 3
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 3
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: LIST
43292: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43293: LD_ADDR_VAR 0 15
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43337: LD_ADDR_VAR 0 16
43341: PUSH
43342: LD_INT 2
43344: NEG
43345: PUSH
43346: LD_INT 3
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 3
43356: NEG
43357: PUSH
43358: LD_INT 2
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 3
43368: NEG
43369: PUSH
43370: LD_INT 3
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: LIST
43382: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43383: LD_ADDR_VAR 0 17
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 3
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 3
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: LIST
43426: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43427: LD_ADDR_VAR 0 18
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 3
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 3
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: LIST
43467: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43468: LD_ADDR_VAR 0 19
43472: PUSH
43473: LD_INT 3
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 3
43485: PUSH
43486: LD_INT 3
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: LIST
43507: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43508: LD_ADDR_VAR 0 20
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 3
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: LIST
43548: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43549: LD_ADDR_VAR 0 21
43553: PUSH
43554: LD_INT 2
43556: NEG
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: NEG
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 3
43578: NEG
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43593: LD_ADDR_VAR 0 22
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: LD_INT 3
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 3
43612: NEG
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 3
43624: NEG
43625: PUSH
43626: LD_INT 3
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43639: LD_ADDR_VAR 0 23
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: LD_INT 3
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: LD_INT 4
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: LD_INT 3
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43683: LD_ADDR_VAR 0 24
43687: PUSH
43688: LD_INT 3
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 3
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 4
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: LIST
43723: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43724: LD_ADDR_VAR 0 25
43728: PUSH
43729: LD_INT 3
43731: PUSH
43732: LD_INT 3
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 4
43741: PUSH
43742: LD_INT 3
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 3
43751: PUSH
43752: LD_INT 4
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: LIST
43763: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43764: LD_ADDR_VAR 0 26
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 4
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 3
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43805: LD_ADDR_VAR 0 27
43809: PUSH
43810: LD_INT 3
43812: NEG
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 3
43823: NEG
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 4
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43849: LD_ADDR_VAR 0 28
43853: PUSH
43854: LD_INT 3
43856: NEG
43857: PUSH
43858: LD_INT 3
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 3
43868: NEG
43869: PUSH
43870: LD_INT 4
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 4
43880: NEG
43881: PUSH
43882: LD_INT 3
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43895: LD_ADDR_VAR 0 29
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 3
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 3
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 4
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 4
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 3
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 5
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 5
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 4
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 6
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 6
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 5
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44050: LD_ADDR_VAR 0 30
44054: PUSH
44055: LD_INT 2
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 3
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 3
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 3
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 4
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 4
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 4
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 5
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 5
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 5
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 6
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 6
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44193: LD_ADDR_VAR 0 31
44197: PUSH
44198: LD_INT 3
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: LD_INT 3
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 4
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 4
44240: PUSH
44241: LD_INT 4
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 3
44250: PUSH
44251: LD_INT 4
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 5
44260: PUSH
44261: LD_INT 4
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 5
44270: PUSH
44271: LD_INT 5
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 4
44280: PUSH
44281: LD_INT 5
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 6
44290: PUSH
44291: LD_INT 5
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 6
44300: PUSH
44301: LD_INT 6
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 5
44310: PUSH
44311: LD_INT 6
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44332: LD_ADDR_VAR 0 32
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 3
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 4
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 4
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 3
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: LD_INT 5
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 5
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: LD_INT 4
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 6
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 6
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 5
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44475: LD_ADDR_VAR 0 33
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 3
44493: NEG
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 3
44504: NEG
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 3
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 4
44527: NEG
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 4
44538: NEG
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 4
44550: NEG
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 5
44561: NEG
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 5
44572: NEG
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 5
44584: NEG
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 6
44595: NEG
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 6
44606: NEG
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44630: LD_ADDR_VAR 0 34
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: LD_INT 3
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 3
44649: NEG
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 3
44661: NEG
44662: PUSH
44663: LD_INT 3
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 3
44673: NEG
44674: PUSH
44675: LD_INT 4
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 4
44685: NEG
44686: PUSH
44687: LD_INT 3
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 4
44697: NEG
44698: PUSH
44699: LD_INT 4
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 4
44709: NEG
44710: PUSH
44711: LD_INT 5
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 5
44721: NEG
44722: PUSH
44723: LD_INT 4
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 5
44733: NEG
44734: PUSH
44735: LD_INT 5
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 5
44745: NEG
44746: PUSH
44747: LD_INT 6
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 6
44757: NEG
44758: PUSH
44759: LD_INT 5
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 6
44769: NEG
44770: PUSH
44771: LD_INT 6
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44793: LD_ADDR_VAR 0 41
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 3
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 2
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44837: LD_ADDR_VAR 0 42
44841: PUSH
44842: LD_INT 2
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 3
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: LIST
44877: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44878: LD_ADDR_VAR 0 43
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 3
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: LD_INT 3
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44918: LD_ADDR_VAR 0 44
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 3
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: LIST
44958: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44959: LD_ADDR_VAR 0 45
44963: PUSH
44964: LD_INT 2
44966: NEG
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 2
44977: NEG
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 3
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45003: LD_ADDR_VAR 0 46
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 2
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: LD_INT 3
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 3
45034: NEG
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: LIST
45048: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45049: LD_ADDR_VAR 0 47
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: LD_INT 3
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 3
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45082: LD_ADDR_VAR 0 48
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45113: LD_ADDR_VAR 0 49
45117: PUSH
45118: LD_INT 3
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 3
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45142: LD_ADDR_VAR 0 50
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: LD_INT 3
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 3
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45171: LD_ADDR_VAR 0 51
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45202: LD_ADDR_VAR 0 52
45206: PUSH
45207: LD_INT 3
45209: NEG
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 3
45221: NEG
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45235: LD_ADDR_VAR 0 53
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: LD_INT 3
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 3
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: LIST
45278: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45279: LD_ADDR_VAR 0 54
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 3
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 3
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45320: LD_ADDR_VAR 0 55
45324: PUSH
45325: LD_INT 3
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 3
45337: PUSH
45338: LD_INT 3
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 3
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: LIST
45359: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45360: LD_ADDR_VAR 0 56
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 3
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: LD_INT 3
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: LIST
45400: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45401: LD_ADDR_VAR 0 57
45405: PUSH
45406: LD_INT 2
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 3
45419: NEG
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 3
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45445: LD_ADDR_VAR 0 58
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: LD_INT 3
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 3
45464: NEG
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 3
45476: NEG
45477: PUSH
45478: LD_INT 3
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45491: LD_ADDR_VAR 0 59
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45535: LD_ADDR_VAR 0 60
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45576: LD_ADDR_VAR 0 61
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: LIST
45615: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45616: LD_ADDR_VAR 0 62
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45657: LD_ADDR_VAR 0 63
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: LIST
45700: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45701: LD_ADDR_VAR 0 64
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: ST_TO_ADDR
// end ; 2 :
45747: GO 49013
45749: LD_INT 2
45751: DOUBLE
45752: EQUAL
45753: IFTRUE 45757
45755: GO 49012
45757: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45758: LD_ADDR_VAR 0 29
45762: PUSH
45763: LD_INT 4
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 4
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 5
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 5
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 4
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 3
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 3
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 5
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 3
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 4
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 4
45888: PUSH
45889: LD_INT 4
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: LD_INT 4
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: LD_INT 3
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 4
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 4
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 4
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 3
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 4
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: LD_INT 5
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 5
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 4
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: LD_INT 5
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 2
46030: NEG
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 3
46041: NEG
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 3
46086: NEG
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 4
46097: NEG
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 4
46108: NEG
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 4
46120: NEG
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 4
46143: NEG
46144: PUSH
46145: LD_INT 4
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 4
46155: NEG
46156: PUSH
46157: LD_INT 5
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 3
46167: NEG
46168: PUSH
46169: LD_INT 4
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 3
46179: NEG
46180: PUSH
46181: LD_INT 3
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 4
46191: NEG
46192: PUSH
46193: LD_INT 3
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 5
46203: NEG
46204: PUSH
46205: LD_INT 4
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 5
46215: NEG
46216: PUSH
46217: LD_INT 5
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 3
46227: NEG
46228: PUSH
46229: LD_INT 5
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 5
46239: NEG
46240: PUSH
46241: LD_INT 3
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46296: LD_ADDR_VAR 0 30
46300: PUSH
46301: LD_INT 4
46303: PUSH
46304: LD_INT 4
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 4
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 5
46323: PUSH
46324: LD_INT 4
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 5
46333: PUSH
46334: LD_INT 5
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 4
46343: PUSH
46344: LD_INT 5
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: PUSH
46354: LD_INT 4
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: LD_INT 3
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 5
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 3
46383: PUSH
46384: LD_INT 5
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 3
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 2
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 4
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 4
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: LD_INT 3
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 4
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 4
46486: NEG
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 4
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 3
46509: NEG
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: NEG
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 4
46531: NEG
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 5
46542: NEG
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 5
46553: NEG
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 5
46565: NEG
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 3
46577: NEG
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 3
46588: NEG
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: NEG
46601: PUSH
46602: LD_INT 4
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: LD_INT 3
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 3
46636: NEG
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 4
46648: NEG
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 4
46660: NEG
46661: PUSH
46662: LD_INT 4
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 4
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 4
46684: NEG
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 4
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 5
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 4
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 3
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 3
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 4
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: LD_INT 5
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: LD_INT 3
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 5
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46843: LD_ADDR_VAR 0 31
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 4
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 3
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 4
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 5
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 5
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 4
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: LD_INT 5
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: LD_INT 3
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 3
46943: NEG
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 3
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 3
46988: NEG
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 4
46999: NEG
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 4
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 4
47022: NEG
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 4
47045: NEG
47046: PUSH
47047: LD_INT 4
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 4
47057: NEG
47058: PUSH
47059: LD_INT 5
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 3
47069: NEG
47070: PUSH
47071: LD_INT 4
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 3
47081: NEG
47082: PUSH
47083: LD_INT 3
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 4
47093: NEG
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 5
47105: NEG
47106: PUSH
47107: LD_INT 4
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 5
47117: NEG
47118: PUSH
47119: LD_INT 5
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 3
47129: NEG
47130: PUSH
47131: LD_INT 5
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 5
47141: NEG
47142: PUSH
47143: LD_INT 3
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 3
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 4
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: LD_INT 3
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 3
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 4
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 4
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 4
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 4
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 5
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 5
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 4
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 3
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 5
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47393: LD_ADDR_VAR 0 32
47397: PUSH
47398: LD_INT 4
47400: NEG
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 4
47411: NEG
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 4
47445: NEG
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 5
47456: NEG
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 5
47467: NEG
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 5
47479: NEG
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 3
47502: NEG
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 3
47514: NEG
47515: PUSH
47516: LD_INT 4
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: LD_INT 3
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 3
47550: NEG
47551: PUSH
47552: LD_INT 2
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 4
47562: NEG
47563: PUSH
47564: LD_INT 3
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 4
47574: NEG
47575: PUSH
47576: LD_INT 4
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 4
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 4
47598: NEG
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 4
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 5
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 4
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 3
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: LD_INT 4
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 5
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: LD_INT 3
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: LD_INT 5
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 3
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 3
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 4
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 4
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 4
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 4
47805: PUSH
47806: LD_INT 4
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 4
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 5
47825: PUSH
47826: LD_INT 4
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 5
47835: PUSH
47836: LD_INT 5
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 4
47845: PUSH
47846: LD_INT 5
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: LD_INT 4
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: LD_INT 3
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 5
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 5
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47940: LD_ADDR_VAR 0 33
47944: PUSH
47945: LD_INT 4
47947: NEG
47948: PUSH
47949: LD_INT 4
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 4
47959: NEG
47960: PUSH
47961: LD_INT 5
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 3
47971: NEG
47972: PUSH
47973: LD_INT 4
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 3
47983: NEG
47984: PUSH
47985: LD_INT 3
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 4
47995: NEG
47996: PUSH
47997: LD_INT 3
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 5
48007: NEG
48008: PUSH
48009: LD_INT 4
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 5
48019: NEG
48020: PUSH
48021: LD_INT 5
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: LD_INT 5
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 5
48043: NEG
48044: PUSH
48045: LD_INT 3
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 3
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 4
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 3
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 3
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 4
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: LD_INT 4
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 4
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 4
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 5
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 5
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 4
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: LD_INT 2
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 5
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: LD_INT 3
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 3
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 4
48270: PUSH
48271: LD_INT 3
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 4
48280: PUSH
48281: LD_INT 4
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 3
48290: PUSH
48291: LD_INT 4
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: LD_INT 3
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 4
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 4
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 4
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 4
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 5
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 5
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: LD_INT 4
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 3
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: LD_INT 5
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: LD_INT 3
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48478: LD_ADDR_VAR 0 34
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 4
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 5
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 4
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 3
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 4
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: LD_INT 5
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: LD_INT 3
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 5
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 3
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 4
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 4
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 3
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 4
48670: PUSH
48671: LD_INT 2
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 4
48680: PUSH
48681: LD_INT 4
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 4
48690: PUSH
48691: LD_INT 3
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 5
48700: PUSH
48701: LD_INT 4
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 5
48710: PUSH
48711: LD_INT 5
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 4
48720: PUSH
48721: LD_INT 5
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 3
48730: PUSH
48731: LD_INT 4
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 3
48740: PUSH
48741: LD_INT 3
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 5
48750: PUSH
48751: LD_INT 3
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 3
48760: PUSH
48761: LD_INT 5
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 3
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 3
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 4
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 4
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 3
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 4
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 4
48863: NEG
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 4
48874: NEG
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 3
48886: NEG
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 3
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 4
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 5
48919: NEG
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 5
48930: NEG
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 5
48942: NEG
48943: PUSH
48944: LD_INT 2
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 3
48954: NEG
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: ST_TO_ADDR
// end ; end ;
49010: GO 49013
49012: POP
// case btype of b_depot , b_warehouse :
49013: LD_VAR 0 1
49017: PUSH
49018: LD_INT 0
49020: DOUBLE
49021: EQUAL
49022: IFTRUE 49032
49024: LD_INT 1
49026: DOUBLE
49027: EQUAL
49028: IFTRUE 49032
49030: GO 49233
49032: POP
// case nation of nation_american :
49033: LD_VAR 0 5
49037: PUSH
49038: LD_INT 1
49040: DOUBLE
49041: EQUAL
49042: IFTRUE 49046
49044: GO 49102
49046: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49047: LD_ADDR_VAR 0 9
49051: PUSH
49052: LD_VAR 0 11
49056: PUSH
49057: LD_VAR 0 12
49061: PUSH
49062: LD_VAR 0 13
49066: PUSH
49067: LD_VAR 0 14
49071: PUSH
49072: LD_VAR 0 15
49076: PUSH
49077: LD_VAR 0 16
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: PUSH
49090: LD_VAR 0 4
49094: PUSH
49095: LD_INT 1
49097: PLUS
49098: ARRAY
49099: ST_TO_ADDR
49100: GO 49231
49102: LD_INT 2
49104: DOUBLE
49105: EQUAL
49106: IFTRUE 49110
49108: GO 49166
49110: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49111: LD_ADDR_VAR 0 9
49115: PUSH
49116: LD_VAR 0 17
49120: PUSH
49121: LD_VAR 0 18
49125: PUSH
49126: LD_VAR 0 19
49130: PUSH
49131: LD_VAR 0 20
49135: PUSH
49136: LD_VAR 0 21
49140: PUSH
49141: LD_VAR 0 22
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: PUSH
49154: LD_VAR 0 4
49158: PUSH
49159: LD_INT 1
49161: PLUS
49162: ARRAY
49163: ST_TO_ADDR
49164: GO 49231
49166: LD_INT 3
49168: DOUBLE
49169: EQUAL
49170: IFTRUE 49174
49172: GO 49230
49174: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49175: LD_ADDR_VAR 0 9
49179: PUSH
49180: LD_VAR 0 23
49184: PUSH
49185: LD_VAR 0 24
49189: PUSH
49190: LD_VAR 0 25
49194: PUSH
49195: LD_VAR 0 26
49199: PUSH
49200: LD_VAR 0 27
49204: PUSH
49205: LD_VAR 0 28
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: PUSH
49218: LD_VAR 0 4
49222: PUSH
49223: LD_INT 1
49225: PLUS
49226: ARRAY
49227: ST_TO_ADDR
49228: GO 49231
49230: POP
49231: GO 49786
49233: LD_INT 2
49235: DOUBLE
49236: EQUAL
49237: IFTRUE 49247
49239: LD_INT 3
49241: DOUBLE
49242: EQUAL
49243: IFTRUE 49247
49245: GO 49303
49247: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49248: LD_ADDR_VAR 0 9
49252: PUSH
49253: LD_VAR 0 29
49257: PUSH
49258: LD_VAR 0 30
49262: PUSH
49263: LD_VAR 0 31
49267: PUSH
49268: LD_VAR 0 32
49272: PUSH
49273: LD_VAR 0 33
49277: PUSH
49278: LD_VAR 0 34
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: PUSH
49291: LD_VAR 0 4
49295: PUSH
49296: LD_INT 1
49298: PLUS
49299: ARRAY
49300: ST_TO_ADDR
49301: GO 49786
49303: LD_INT 16
49305: DOUBLE
49306: EQUAL
49307: IFTRUE 49365
49309: LD_INT 17
49311: DOUBLE
49312: EQUAL
49313: IFTRUE 49365
49315: LD_INT 18
49317: DOUBLE
49318: EQUAL
49319: IFTRUE 49365
49321: LD_INT 19
49323: DOUBLE
49324: EQUAL
49325: IFTRUE 49365
49327: LD_INT 22
49329: DOUBLE
49330: EQUAL
49331: IFTRUE 49365
49333: LD_INT 20
49335: DOUBLE
49336: EQUAL
49337: IFTRUE 49365
49339: LD_INT 21
49341: DOUBLE
49342: EQUAL
49343: IFTRUE 49365
49345: LD_INT 23
49347: DOUBLE
49348: EQUAL
49349: IFTRUE 49365
49351: LD_INT 24
49353: DOUBLE
49354: EQUAL
49355: IFTRUE 49365
49357: LD_INT 25
49359: DOUBLE
49360: EQUAL
49361: IFTRUE 49365
49363: GO 49421
49365: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49366: LD_ADDR_VAR 0 9
49370: PUSH
49371: LD_VAR 0 35
49375: PUSH
49376: LD_VAR 0 36
49380: PUSH
49381: LD_VAR 0 37
49385: PUSH
49386: LD_VAR 0 38
49390: PUSH
49391: LD_VAR 0 39
49395: PUSH
49396: LD_VAR 0 40
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: PUSH
49409: LD_VAR 0 4
49413: PUSH
49414: LD_INT 1
49416: PLUS
49417: ARRAY
49418: ST_TO_ADDR
49419: GO 49786
49421: LD_INT 6
49423: DOUBLE
49424: EQUAL
49425: IFTRUE 49477
49427: LD_INT 7
49429: DOUBLE
49430: EQUAL
49431: IFTRUE 49477
49433: LD_INT 8
49435: DOUBLE
49436: EQUAL
49437: IFTRUE 49477
49439: LD_INT 13
49441: DOUBLE
49442: EQUAL
49443: IFTRUE 49477
49445: LD_INT 12
49447: DOUBLE
49448: EQUAL
49449: IFTRUE 49477
49451: LD_INT 15
49453: DOUBLE
49454: EQUAL
49455: IFTRUE 49477
49457: LD_INT 11
49459: DOUBLE
49460: EQUAL
49461: IFTRUE 49477
49463: LD_INT 14
49465: DOUBLE
49466: EQUAL
49467: IFTRUE 49477
49469: LD_INT 10
49471: DOUBLE
49472: EQUAL
49473: IFTRUE 49477
49475: GO 49533
49477: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49478: LD_ADDR_VAR 0 9
49482: PUSH
49483: LD_VAR 0 41
49487: PUSH
49488: LD_VAR 0 42
49492: PUSH
49493: LD_VAR 0 43
49497: PUSH
49498: LD_VAR 0 44
49502: PUSH
49503: LD_VAR 0 45
49507: PUSH
49508: LD_VAR 0 46
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: PUSH
49521: LD_VAR 0 4
49525: PUSH
49526: LD_INT 1
49528: PLUS
49529: ARRAY
49530: ST_TO_ADDR
49531: GO 49786
49533: LD_INT 36
49535: DOUBLE
49536: EQUAL
49537: IFTRUE 49541
49539: GO 49597
49541: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49542: LD_ADDR_VAR 0 9
49546: PUSH
49547: LD_VAR 0 47
49551: PUSH
49552: LD_VAR 0 48
49556: PUSH
49557: LD_VAR 0 49
49561: PUSH
49562: LD_VAR 0 50
49566: PUSH
49567: LD_VAR 0 51
49571: PUSH
49572: LD_VAR 0 52
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: PUSH
49585: LD_VAR 0 4
49589: PUSH
49590: LD_INT 1
49592: PLUS
49593: ARRAY
49594: ST_TO_ADDR
49595: GO 49786
49597: LD_INT 4
49599: DOUBLE
49600: EQUAL
49601: IFTRUE 49623
49603: LD_INT 5
49605: DOUBLE
49606: EQUAL
49607: IFTRUE 49623
49609: LD_INT 34
49611: DOUBLE
49612: EQUAL
49613: IFTRUE 49623
49615: LD_INT 37
49617: DOUBLE
49618: EQUAL
49619: IFTRUE 49623
49621: GO 49679
49623: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49624: LD_ADDR_VAR 0 9
49628: PUSH
49629: LD_VAR 0 53
49633: PUSH
49634: LD_VAR 0 54
49638: PUSH
49639: LD_VAR 0 55
49643: PUSH
49644: LD_VAR 0 56
49648: PUSH
49649: LD_VAR 0 57
49653: PUSH
49654: LD_VAR 0 58
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: PUSH
49667: LD_VAR 0 4
49671: PUSH
49672: LD_INT 1
49674: PLUS
49675: ARRAY
49676: ST_TO_ADDR
49677: GO 49786
49679: LD_INT 31
49681: DOUBLE
49682: EQUAL
49683: IFTRUE 49729
49685: LD_INT 32
49687: DOUBLE
49688: EQUAL
49689: IFTRUE 49729
49691: LD_INT 33
49693: DOUBLE
49694: EQUAL
49695: IFTRUE 49729
49697: LD_INT 27
49699: DOUBLE
49700: EQUAL
49701: IFTRUE 49729
49703: LD_INT 26
49705: DOUBLE
49706: EQUAL
49707: IFTRUE 49729
49709: LD_INT 28
49711: DOUBLE
49712: EQUAL
49713: IFTRUE 49729
49715: LD_INT 29
49717: DOUBLE
49718: EQUAL
49719: IFTRUE 49729
49721: LD_INT 30
49723: DOUBLE
49724: EQUAL
49725: IFTRUE 49729
49727: GO 49785
49729: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49730: LD_ADDR_VAR 0 9
49734: PUSH
49735: LD_VAR 0 59
49739: PUSH
49740: LD_VAR 0 60
49744: PUSH
49745: LD_VAR 0 61
49749: PUSH
49750: LD_VAR 0 62
49754: PUSH
49755: LD_VAR 0 63
49759: PUSH
49760: LD_VAR 0 64
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: PUSH
49773: LD_VAR 0 4
49777: PUSH
49778: LD_INT 1
49780: PLUS
49781: ARRAY
49782: ST_TO_ADDR
49783: GO 49786
49785: POP
// temp_list2 = [ ] ;
49786: LD_ADDR_VAR 0 10
49790: PUSH
49791: EMPTY
49792: ST_TO_ADDR
// for i in temp_list do
49793: LD_ADDR_VAR 0 8
49797: PUSH
49798: LD_VAR 0 9
49802: PUSH
49803: FOR_IN
49804: IFFALSE 49856
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49806: LD_ADDR_VAR 0 10
49810: PUSH
49811: LD_VAR 0 10
49815: PUSH
49816: LD_VAR 0 8
49820: PUSH
49821: LD_INT 1
49823: ARRAY
49824: PUSH
49825: LD_VAR 0 2
49829: PLUS
49830: PUSH
49831: LD_VAR 0 8
49835: PUSH
49836: LD_INT 2
49838: ARRAY
49839: PUSH
49840: LD_VAR 0 3
49844: PLUS
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: EMPTY
49851: LIST
49852: ADD
49853: ST_TO_ADDR
49854: GO 49803
49856: POP
49857: POP
// result = temp_list2 ;
49858: LD_ADDR_VAR 0 7
49862: PUSH
49863: LD_VAR 0 10
49867: ST_TO_ADDR
// end ;
49868: LD_VAR 0 7
49872: RET
// export function EnemyInRange ( unit , dist ) ; begin
49873: LD_INT 0
49875: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49876: LD_ADDR_VAR 0 3
49880: PUSH
49881: LD_VAR 0 1
49885: PPUSH
49886: CALL_OW 255
49890: PPUSH
49891: LD_VAR 0 1
49895: PPUSH
49896: CALL_OW 250
49900: PPUSH
49901: LD_VAR 0 1
49905: PPUSH
49906: CALL_OW 251
49910: PPUSH
49911: LD_VAR 0 2
49915: PPUSH
49916: CALL 23246 0 4
49920: PUSH
49921: LD_INT 4
49923: ARRAY
49924: ST_TO_ADDR
// end ;
49925: LD_VAR 0 3
49929: RET
// export function PlayerSeeMe ( unit ) ; begin
49930: LD_INT 0
49932: PPUSH
// result := See ( your_side , unit ) ;
49933: LD_ADDR_VAR 0 2
49937: PUSH
49938: LD_OWVAR 2
49942: PPUSH
49943: LD_VAR 0 1
49947: PPUSH
49948: CALL_OW 292
49952: ST_TO_ADDR
// end ;
49953: LD_VAR 0 2
49957: RET
// export function ReverseDir ( unit ) ; begin
49958: LD_INT 0
49960: PPUSH
// if not unit then
49961: LD_VAR 0 1
49965: NOT
49966: IFFALSE 49970
// exit ;
49968: GO 49993
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49970: LD_ADDR_VAR 0 2
49974: PUSH
49975: LD_VAR 0 1
49979: PPUSH
49980: CALL_OW 254
49984: PUSH
49985: LD_INT 3
49987: PLUS
49988: PUSH
49989: LD_INT 6
49991: MOD
49992: ST_TO_ADDR
// end ;
49993: LD_VAR 0 2
49997: RET
// export function ReverseArray ( array ) ; var i ; begin
49998: LD_INT 0
50000: PPUSH
50001: PPUSH
// if not array then
50002: LD_VAR 0 1
50006: NOT
50007: IFFALSE 50011
// exit ;
50009: GO 50066
// result := [ ] ;
50011: LD_ADDR_VAR 0 2
50015: PUSH
50016: EMPTY
50017: ST_TO_ADDR
// for i := array downto 1 do
50018: LD_ADDR_VAR 0 3
50022: PUSH
50023: DOUBLE
50024: LD_VAR 0 1
50028: INC
50029: ST_TO_ADDR
50030: LD_INT 1
50032: PUSH
50033: FOR_DOWNTO
50034: IFFALSE 50064
// result := Join ( result , array [ i ] ) ;
50036: LD_ADDR_VAR 0 2
50040: PUSH
50041: LD_VAR 0 2
50045: PPUSH
50046: LD_VAR 0 1
50050: PUSH
50051: LD_VAR 0 3
50055: ARRAY
50056: PPUSH
50057: CALL 54731 0 2
50061: ST_TO_ADDR
50062: GO 50033
50064: POP
50065: POP
// end ;
50066: LD_VAR 0 2
50070: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50071: LD_INT 0
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
50077: PPUSH
50078: PPUSH
// if not unit or not hexes then
50079: LD_VAR 0 1
50083: NOT
50084: PUSH
50085: LD_VAR 0 2
50089: NOT
50090: OR
50091: IFFALSE 50095
// exit ;
50093: GO 50218
// dist := 9999 ;
50095: LD_ADDR_VAR 0 5
50099: PUSH
50100: LD_INT 9999
50102: ST_TO_ADDR
// for i = 1 to hexes do
50103: LD_ADDR_VAR 0 4
50107: PUSH
50108: DOUBLE
50109: LD_INT 1
50111: DEC
50112: ST_TO_ADDR
50113: LD_VAR 0 2
50117: PUSH
50118: FOR_TO
50119: IFFALSE 50206
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50121: LD_ADDR_VAR 0 6
50125: PUSH
50126: LD_VAR 0 1
50130: PPUSH
50131: LD_VAR 0 2
50135: PUSH
50136: LD_VAR 0 4
50140: ARRAY
50141: PUSH
50142: LD_INT 1
50144: ARRAY
50145: PPUSH
50146: LD_VAR 0 2
50150: PUSH
50151: LD_VAR 0 4
50155: ARRAY
50156: PUSH
50157: LD_INT 2
50159: ARRAY
50160: PPUSH
50161: CALL_OW 297
50165: ST_TO_ADDR
// if tdist < dist then
50166: LD_VAR 0 6
50170: PUSH
50171: LD_VAR 0 5
50175: LESS
50176: IFFALSE 50204
// begin hex := hexes [ i ] ;
50178: LD_ADDR_VAR 0 8
50182: PUSH
50183: LD_VAR 0 2
50187: PUSH
50188: LD_VAR 0 4
50192: ARRAY
50193: ST_TO_ADDR
// dist := tdist ;
50194: LD_ADDR_VAR 0 5
50198: PUSH
50199: LD_VAR 0 6
50203: ST_TO_ADDR
// end ; end ;
50204: GO 50118
50206: POP
50207: POP
// result := hex ;
50208: LD_ADDR_VAR 0 3
50212: PUSH
50213: LD_VAR 0 8
50217: ST_TO_ADDR
// end ;
50218: LD_VAR 0 3
50222: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50223: LD_INT 0
50225: PPUSH
50226: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50227: LD_VAR 0 1
50231: NOT
50232: PUSH
50233: LD_VAR 0 1
50237: PUSH
50238: LD_INT 21
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 23
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PPUSH
50262: CALL_OW 69
50266: IN
50267: NOT
50268: OR
50269: IFFALSE 50273
// exit ;
50271: GO 50320
// for i = 1 to 3 do
50273: LD_ADDR_VAR 0 3
50277: PUSH
50278: DOUBLE
50279: LD_INT 1
50281: DEC
50282: ST_TO_ADDR
50283: LD_INT 3
50285: PUSH
50286: FOR_TO
50287: IFFALSE 50318
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50289: LD_VAR 0 1
50293: PPUSH
50294: CALL_OW 250
50298: PPUSH
50299: LD_VAR 0 1
50303: PPUSH
50304: CALL_OW 251
50308: PPUSH
50309: LD_INT 1
50311: PPUSH
50312: CALL_OW 453
50316: GO 50286
50318: POP
50319: POP
// end ;
50320: LD_VAR 0 2
50324: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50325: LD_INT 0
50327: PPUSH
50328: PPUSH
50329: PPUSH
50330: PPUSH
50331: PPUSH
50332: PPUSH
// if not unit or not enemy_unit then
50333: LD_VAR 0 1
50337: NOT
50338: PUSH
50339: LD_VAR 0 2
50343: NOT
50344: OR
50345: IFFALSE 50349
// exit ;
50347: GO 50816
// if GetLives ( i ) < 250 then
50349: LD_VAR 0 4
50353: PPUSH
50354: CALL_OW 256
50358: PUSH
50359: LD_INT 250
50361: LESS
50362: IFFALSE 50375
// begin ComAutodestruct ( i ) ;
50364: LD_VAR 0 4
50368: PPUSH
50369: CALL 50223 0 1
// exit ;
50373: GO 50816
// end ; x := GetX ( enemy_unit ) ;
50375: LD_ADDR_VAR 0 7
50379: PUSH
50380: LD_VAR 0 2
50384: PPUSH
50385: CALL_OW 250
50389: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50390: LD_ADDR_VAR 0 8
50394: PUSH
50395: LD_VAR 0 2
50399: PPUSH
50400: CALL_OW 251
50404: ST_TO_ADDR
// if not x or not y then
50405: LD_VAR 0 7
50409: NOT
50410: PUSH
50411: LD_VAR 0 8
50415: NOT
50416: OR
50417: IFFALSE 50421
// exit ;
50419: GO 50816
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50421: LD_ADDR_VAR 0 6
50425: PUSH
50426: LD_VAR 0 7
50430: PPUSH
50431: LD_INT 0
50433: PPUSH
50434: LD_INT 4
50436: PPUSH
50437: CALL_OW 272
50441: PUSH
50442: LD_VAR 0 8
50446: PPUSH
50447: LD_INT 0
50449: PPUSH
50450: LD_INT 4
50452: PPUSH
50453: CALL_OW 273
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_VAR 0 7
50466: PPUSH
50467: LD_INT 1
50469: PPUSH
50470: LD_INT 4
50472: PPUSH
50473: CALL_OW 272
50477: PUSH
50478: LD_VAR 0 8
50482: PPUSH
50483: LD_INT 1
50485: PPUSH
50486: LD_INT 4
50488: PPUSH
50489: CALL_OW 273
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_VAR 0 7
50502: PPUSH
50503: LD_INT 2
50505: PPUSH
50506: LD_INT 4
50508: PPUSH
50509: CALL_OW 272
50513: PUSH
50514: LD_VAR 0 8
50518: PPUSH
50519: LD_INT 2
50521: PPUSH
50522: LD_INT 4
50524: PPUSH
50525: CALL_OW 273
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_VAR 0 7
50538: PPUSH
50539: LD_INT 3
50541: PPUSH
50542: LD_INT 4
50544: PPUSH
50545: CALL_OW 272
50549: PUSH
50550: LD_VAR 0 8
50554: PPUSH
50555: LD_INT 3
50557: PPUSH
50558: LD_INT 4
50560: PPUSH
50561: CALL_OW 273
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_VAR 0 7
50574: PPUSH
50575: LD_INT 4
50577: PPUSH
50578: LD_INT 4
50580: PPUSH
50581: CALL_OW 272
50585: PUSH
50586: LD_VAR 0 8
50590: PPUSH
50591: LD_INT 4
50593: PPUSH
50594: LD_INT 4
50596: PPUSH
50597: CALL_OW 273
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_VAR 0 7
50610: PPUSH
50611: LD_INT 5
50613: PPUSH
50614: LD_INT 4
50616: PPUSH
50617: CALL_OW 272
50621: PUSH
50622: LD_VAR 0 8
50626: PPUSH
50627: LD_INT 5
50629: PPUSH
50630: LD_INT 4
50632: PPUSH
50633: CALL_OW 273
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: ST_TO_ADDR
// for i = tmp downto 1 do
50650: LD_ADDR_VAR 0 4
50654: PUSH
50655: DOUBLE
50656: LD_VAR 0 6
50660: INC
50661: ST_TO_ADDR
50662: LD_INT 1
50664: PUSH
50665: FOR_DOWNTO
50666: IFFALSE 50767
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50668: LD_VAR 0 6
50672: PUSH
50673: LD_VAR 0 4
50677: ARRAY
50678: PUSH
50679: LD_INT 1
50681: ARRAY
50682: PPUSH
50683: LD_VAR 0 6
50687: PUSH
50688: LD_VAR 0 4
50692: ARRAY
50693: PUSH
50694: LD_INT 2
50696: ARRAY
50697: PPUSH
50698: CALL_OW 488
50702: NOT
50703: PUSH
50704: LD_VAR 0 6
50708: PUSH
50709: LD_VAR 0 4
50713: ARRAY
50714: PUSH
50715: LD_INT 1
50717: ARRAY
50718: PPUSH
50719: LD_VAR 0 6
50723: PUSH
50724: LD_VAR 0 4
50728: ARRAY
50729: PUSH
50730: LD_INT 2
50732: ARRAY
50733: PPUSH
50734: CALL_OW 428
50738: PUSH
50739: LD_INT 0
50741: NONEQUAL
50742: OR
50743: IFFALSE 50765
// tmp := Delete ( tmp , i ) ;
50745: LD_ADDR_VAR 0 6
50749: PUSH
50750: LD_VAR 0 6
50754: PPUSH
50755: LD_VAR 0 4
50759: PPUSH
50760: CALL_OW 3
50764: ST_TO_ADDR
50765: GO 50665
50767: POP
50768: POP
// j := GetClosestHex ( unit , tmp ) ;
50769: LD_ADDR_VAR 0 5
50773: PUSH
50774: LD_VAR 0 1
50778: PPUSH
50779: LD_VAR 0 6
50783: PPUSH
50784: CALL 50071 0 2
50788: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50789: LD_VAR 0 1
50793: PPUSH
50794: LD_VAR 0 5
50798: PUSH
50799: LD_INT 1
50801: ARRAY
50802: PPUSH
50803: LD_VAR 0 5
50807: PUSH
50808: LD_INT 2
50810: ARRAY
50811: PPUSH
50812: CALL_OW 111
// end ;
50816: LD_VAR 0 3
50820: RET
// export function PrepareApemanSoldier ( ) ; begin
50821: LD_INT 0
50823: PPUSH
// uc_nation := 0 ;
50824: LD_ADDR_OWVAR 21
50828: PUSH
50829: LD_INT 0
50831: ST_TO_ADDR
// hc_sex := sex_male ;
50832: LD_ADDR_OWVAR 27
50836: PUSH
50837: LD_INT 1
50839: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50840: LD_ADDR_OWVAR 28
50844: PUSH
50845: LD_INT 15
50847: ST_TO_ADDR
// hc_gallery :=  ;
50848: LD_ADDR_OWVAR 33
50852: PUSH
50853: LD_STRING 
50855: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50856: LD_ADDR_OWVAR 31
50860: PUSH
50861: LD_INT 0
50863: PPUSH
50864: LD_INT 3
50866: PPUSH
50867: CALL_OW 12
50871: PUSH
50872: LD_INT 0
50874: PPUSH
50875: LD_INT 3
50877: PPUSH
50878: CALL_OW 12
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: ST_TO_ADDR
// end ;
50895: LD_VAR 0 1
50899: RET
// export function PrepareApemanEngineer ( ) ; begin
50900: LD_INT 0
50902: PPUSH
// uc_nation := 0 ;
50903: LD_ADDR_OWVAR 21
50907: PUSH
50908: LD_INT 0
50910: ST_TO_ADDR
// hc_sex := sex_male ;
50911: LD_ADDR_OWVAR 27
50915: PUSH
50916: LD_INT 1
50918: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50919: LD_ADDR_OWVAR 28
50923: PUSH
50924: LD_INT 16
50926: ST_TO_ADDR
// hc_gallery :=  ;
50927: LD_ADDR_OWVAR 33
50931: PUSH
50932: LD_STRING 
50934: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50935: LD_ADDR_OWVAR 31
50939: PUSH
50940: LD_INT 0
50942: PPUSH
50943: LD_INT 3
50945: PPUSH
50946: CALL_OW 12
50950: PUSH
50951: LD_INT 0
50953: PPUSH
50954: LD_INT 3
50956: PPUSH
50957: CALL_OW 12
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: ST_TO_ADDR
// end ;
50974: LD_VAR 0 1
50978: RET
// export function PrepareApeman ( agressivity ) ; begin
50979: LD_INT 0
50981: PPUSH
// uc_side := 0 ;
50982: LD_ADDR_OWVAR 20
50986: PUSH
50987: LD_INT 0
50989: ST_TO_ADDR
// uc_nation := 0 ;
50990: LD_ADDR_OWVAR 21
50994: PUSH
50995: LD_INT 0
50997: ST_TO_ADDR
// hc_sex := sex_male ;
50998: LD_ADDR_OWVAR 27
51002: PUSH
51003: LD_INT 1
51005: ST_TO_ADDR
// hc_class := class_apeman ;
51006: LD_ADDR_OWVAR 28
51010: PUSH
51011: LD_INT 12
51013: ST_TO_ADDR
// hc_gallery :=  ;
51014: LD_ADDR_OWVAR 33
51018: PUSH
51019: LD_STRING 
51021: ST_TO_ADDR
// if agressivity = 0 then
51022: LD_VAR 0 1
51026: PUSH
51027: LD_INT 0
51029: EQUAL
51030: IFFALSE 51042
// hc_agressivity := 0 else
51032: LD_ADDR_OWVAR 35
51036: PUSH
51037: LD_INT 0
51039: ST_TO_ADDR
51040: GO 51063
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51042: LD_ADDR_OWVAR 35
51046: PUSH
51047: LD_VAR 0 1
51051: NEG
51052: PPUSH
51053: LD_VAR 0 1
51057: PPUSH
51058: CALL_OW 12
51062: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51063: LD_ADDR_OWVAR 31
51067: PUSH
51068: LD_INT 0
51070: PPUSH
51071: LD_INT 3
51073: PPUSH
51074: CALL_OW 12
51078: PUSH
51079: LD_INT 0
51081: PPUSH
51082: LD_INT 3
51084: PPUSH
51085: CALL_OW 12
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: ST_TO_ADDR
// end ;
51102: LD_VAR 0 2
51106: RET
// export function PrepareTiger ( agressivity ) ; begin
51107: LD_INT 0
51109: PPUSH
// uc_side := 0 ;
51110: LD_ADDR_OWVAR 20
51114: PUSH
51115: LD_INT 0
51117: ST_TO_ADDR
// uc_nation := 0 ;
51118: LD_ADDR_OWVAR 21
51122: PUSH
51123: LD_INT 0
51125: ST_TO_ADDR
// hc_class := class_tiger ;
51126: LD_ADDR_OWVAR 28
51130: PUSH
51131: LD_INT 14
51133: ST_TO_ADDR
// hc_gallery :=  ;
51134: LD_ADDR_OWVAR 33
51138: PUSH
51139: LD_STRING 
51141: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51142: LD_ADDR_OWVAR 35
51146: PUSH
51147: LD_VAR 0 1
51151: NEG
51152: PPUSH
51153: LD_VAR 0 1
51157: PPUSH
51158: CALL_OW 12
51162: ST_TO_ADDR
// end ;
51163: LD_VAR 0 2
51167: RET
// export function PrepareEnchidna ( ) ; begin
51168: LD_INT 0
51170: PPUSH
// uc_side := 0 ;
51171: LD_ADDR_OWVAR 20
51175: PUSH
51176: LD_INT 0
51178: ST_TO_ADDR
// uc_nation := 0 ;
51179: LD_ADDR_OWVAR 21
51183: PUSH
51184: LD_INT 0
51186: ST_TO_ADDR
// hc_class := class_baggie ;
51187: LD_ADDR_OWVAR 28
51191: PUSH
51192: LD_INT 13
51194: ST_TO_ADDR
// hc_gallery :=  ;
51195: LD_ADDR_OWVAR 33
51199: PUSH
51200: LD_STRING 
51202: ST_TO_ADDR
// end ;
51203: LD_VAR 0 1
51207: RET
// export function PrepareFrog ( ) ; begin
51208: LD_INT 0
51210: PPUSH
// uc_side := 0 ;
51211: LD_ADDR_OWVAR 20
51215: PUSH
51216: LD_INT 0
51218: ST_TO_ADDR
// uc_nation := 0 ;
51219: LD_ADDR_OWVAR 21
51223: PUSH
51224: LD_INT 0
51226: ST_TO_ADDR
// hc_class := class_frog ;
51227: LD_ADDR_OWVAR 28
51231: PUSH
51232: LD_INT 19
51234: ST_TO_ADDR
// hc_gallery :=  ;
51235: LD_ADDR_OWVAR 33
51239: PUSH
51240: LD_STRING 
51242: ST_TO_ADDR
// end ;
51243: LD_VAR 0 1
51247: RET
// export function PrepareFish ( ) ; begin
51248: LD_INT 0
51250: PPUSH
// uc_side := 0 ;
51251: LD_ADDR_OWVAR 20
51255: PUSH
51256: LD_INT 0
51258: ST_TO_ADDR
// uc_nation := 0 ;
51259: LD_ADDR_OWVAR 21
51263: PUSH
51264: LD_INT 0
51266: ST_TO_ADDR
// hc_class := class_fish ;
51267: LD_ADDR_OWVAR 28
51271: PUSH
51272: LD_INT 20
51274: ST_TO_ADDR
// hc_gallery :=  ;
51275: LD_ADDR_OWVAR 33
51279: PUSH
51280: LD_STRING 
51282: ST_TO_ADDR
// end ;
51283: LD_VAR 0 1
51287: RET
// export function PrepareBird ( ) ; begin
51288: LD_INT 0
51290: PPUSH
// uc_side := 0 ;
51291: LD_ADDR_OWVAR 20
51295: PUSH
51296: LD_INT 0
51298: ST_TO_ADDR
// uc_nation := 0 ;
51299: LD_ADDR_OWVAR 21
51303: PUSH
51304: LD_INT 0
51306: ST_TO_ADDR
// hc_class := class_phororhacos ;
51307: LD_ADDR_OWVAR 28
51311: PUSH
51312: LD_INT 18
51314: ST_TO_ADDR
// hc_gallery :=  ;
51315: LD_ADDR_OWVAR 33
51319: PUSH
51320: LD_STRING 
51322: ST_TO_ADDR
// end ;
51323: LD_VAR 0 1
51327: RET
// export function PrepareHorse ( ) ; begin
51328: LD_INT 0
51330: PPUSH
// uc_side := 0 ;
51331: LD_ADDR_OWVAR 20
51335: PUSH
51336: LD_INT 0
51338: ST_TO_ADDR
// uc_nation := 0 ;
51339: LD_ADDR_OWVAR 21
51343: PUSH
51344: LD_INT 0
51346: ST_TO_ADDR
// hc_class := class_horse ;
51347: LD_ADDR_OWVAR 28
51351: PUSH
51352: LD_INT 21
51354: ST_TO_ADDR
// hc_gallery :=  ;
51355: LD_ADDR_OWVAR 33
51359: PUSH
51360: LD_STRING 
51362: ST_TO_ADDR
// end ;
51363: LD_VAR 0 1
51367: RET
// export function PrepareMastodont ( ) ; begin
51368: LD_INT 0
51370: PPUSH
// uc_side := 0 ;
51371: LD_ADDR_OWVAR 20
51375: PUSH
51376: LD_INT 0
51378: ST_TO_ADDR
// uc_nation := 0 ;
51379: LD_ADDR_OWVAR 21
51383: PUSH
51384: LD_INT 0
51386: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51387: LD_ADDR_OWVAR 37
51391: PUSH
51392: LD_INT 31
51394: ST_TO_ADDR
// vc_control := control_rider ;
51395: LD_ADDR_OWVAR 38
51399: PUSH
51400: LD_INT 4
51402: ST_TO_ADDR
// end ;
51403: LD_VAR 0 1
51407: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51408: LD_INT 0
51410: PPUSH
51411: PPUSH
51412: PPUSH
// uc_side = 0 ;
51413: LD_ADDR_OWVAR 20
51417: PUSH
51418: LD_INT 0
51420: ST_TO_ADDR
// uc_nation = 0 ;
51421: LD_ADDR_OWVAR 21
51425: PUSH
51426: LD_INT 0
51428: ST_TO_ADDR
// InitHc_All ( ) ;
51429: CALL_OW 584
// InitVc ;
51433: CALL_OW 20
// if mastodonts then
51437: LD_VAR 0 6
51441: IFFALSE 51508
// for i = 1 to mastodonts do
51443: LD_ADDR_VAR 0 11
51447: PUSH
51448: DOUBLE
51449: LD_INT 1
51451: DEC
51452: ST_TO_ADDR
51453: LD_VAR 0 6
51457: PUSH
51458: FOR_TO
51459: IFFALSE 51506
// begin vc_chassis := 31 ;
51461: LD_ADDR_OWVAR 37
51465: PUSH
51466: LD_INT 31
51468: ST_TO_ADDR
// vc_control := control_rider ;
51469: LD_ADDR_OWVAR 38
51473: PUSH
51474: LD_INT 4
51476: ST_TO_ADDR
// animal := CreateVehicle ;
51477: LD_ADDR_VAR 0 12
51481: PUSH
51482: CALL_OW 45
51486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51487: LD_VAR 0 12
51491: PPUSH
51492: LD_VAR 0 8
51496: PPUSH
51497: LD_INT 0
51499: PPUSH
51500: CALL 53636 0 3
// end ;
51504: GO 51458
51506: POP
51507: POP
// if horses then
51508: LD_VAR 0 5
51512: IFFALSE 51579
// for i = 1 to horses do
51514: LD_ADDR_VAR 0 11
51518: PUSH
51519: DOUBLE
51520: LD_INT 1
51522: DEC
51523: ST_TO_ADDR
51524: LD_VAR 0 5
51528: PUSH
51529: FOR_TO
51530: IFFALSE 51577
// begin hc_class := 21 ;
51532: LD_ADDR_OWVAR 28
51536: PUSH
51537: LD_INT 21
51539: ST_TO_ADDR
// hc_gallery :=  ;
51540: LD_ADDR_OWVAR 33
51544: PUSH
51545: LD_STRING 
51547: ST_TO_ADDR
// animal := CreateHuman ;
51548: LD_ADDR_VAR 0 12
51552: PUSH
51553: CALL_OW 44
51557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51558: LD_VAR 0 12
51562: PPUSH
51563: LD_VAR 0 8
51567: PPUSH
51568: LD_INT 0
51570: PPUSH
51571: CALL 53636 0 3
// end ;
51575: GO 51529
51577: POP
51578: POP
// if birds then
51579: LD_VAR 0 1
51583: IFFALSE 51650
// for i = 1 to birds do
51585: LD_ADDR_VAR 0 11
51589: PUSH
51590: DOUBLE
51591: LD_INT 1
51593: DEC
51594: ST_TO_ADDR
51595: LD_VAR 0 1
51599: PUSH
51600: FOR_TO
51601: IFFALSE 51648
// begin hc_class := 18 ;
51603: LD_ADDR_OWVAR 28
51607: PUSH
51608: LD_INT 18
51610: ST_TO_ADDR
// hc_gallery =  ;
51611: LD_ADDR_OWVAR 33
51615: PUSH
51616: LD_STRING 
51618: ST_TO_ADDR
// animal := CreateHuman ;
51619: LD_ADDR_VAR 0 12
51623: PUSH
51624: CALL_OW 44
51628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51629: LD_VAR 0 12
51633: PPUSH
51634: LD_VAR 0 8
51638: PPUSH
51639: LD_INT 0
51641: PPUSH
51642: CALL 53636 0 3
// end ;
51646: GO 51600
51648: POP
51649: POP
// if tigers then
51650: LD_VAR 0 2
51654: IFFALSE 51738
// for i = 1 to tigers do
51656: LD_ADDR_VAR 0 11
51660: PUSH
51661: DOUBLE
51662: LD_INT 1
51664: DEC
51665: ST_TO_ADDR
51666: LD_VAR 0 2
51670: PUSH
51671: FOR_TO
51672: IFFALSE 51736
// begin hc_class = class_tiger ;
51674: LD_ADDR_OWVAR 28
51678: PUSH
51679: LD_INT 14
51681: ST_TO_ADDR
// hc_gallery =  ;
51682: LD_ADDR_OWVAR 33
51686: PUSH
51687: LD_STRING 
51689: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51690: LD_ADDR_OWVAR 35
51694: PUSH
51695: LD_INT 7
51697: NEG
51698: PPUSH
51699: LD_INT 7
51701: PPUSH
51702: CALL_OW 12
51706: ST_TO_ADDR
// animal := CreateHuman ;
51707: LD_ADDR_VAR 0 12
51711: PUSH
51712: CALL_OW 44
51716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51717: LD_VAR 0 12
51721: PPUSH
51722: LD_VAR 0 8
51726: PPUSH
51727: LD_INT 0
51729: PPUSH
51730: CALL 53636 0 3
// end ;
51734: GO 51671
51736: POP
51737: POP
// if apemans then
51738: LD_VAR 0 3
51742: IFFALSE 51865
// for i = 1 to apemans do
51744: LD_ADDR_VAR 0 11
51748: PUSH
51749: DOUBLE
51750: LD_INT 1
51752: DEC
51753: ST_TO_ADDR
51754: LD_VAR 0 3
51758: PUSH
51759: FOR_TO
51760: IFFALSE 51863
// begin hc_class = class_apeman ;
51762: LD_ADDR_OWVAR 28
51766: PUSH
51767: LD_INT 12
51769: ST_TO_ADDR
// hc_gallery =  ;
51770: LD_ADDR_OWVAR 33
51774: PUSH
51775: LD_STRING 
51777: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51778: LD_ADDR_OWVAR 35
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PPUSH
51787: LD_INT 2
51789: PPUSH
51790: CALL_OW 12
51794: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51795: LD_ADDR_OWVAR 31
51799: PUSH
51800: LD_INT 1
51802: PPUSH
51803: LD_INT 3
51805: PPUSH
51806: CALL_OW 12
51810: PUSH
51811: LD_INT 1
51813: PPUSH
51814: LD_INT 3
51816: PPUSH
51817: CALL_OW 12
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: ST_TO_ADDR
// animal := CreateHuman ;
51834: LD_ADDR_VAR 0 12
51838: PUSH
51839: CALL_OW 44
51843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51844: LD_VAR 0 12
51848: PPUSH
51849: LD_VAR 0 8
51853: PPUSH
51854: LD_INT 0
51856: PPUSH
51857: CALL 53636 0 3
// end ;
51861: GO 51759
51863: POP
51864: POP
// if enchidnas then
51865: LD_VAR 0 4
51869: IFFALSE 51936
// for i = 1 to enchidnas do
51871: LD_ADDR_VAR 0 11
51875: PUSH
51876: DOUBLE
51877: LD_INT 1
51879: DEC
51880: ST_TO_ADDR
51881: LD_VAR 0 4
51885: PUSH
51886: FOR_TO
51887: IFFALSE 51934
// begin hc_class = 13 ;
51889: LD_ADDR_OWVAR 28
51893: PUSH
51894: LD_INT 13
51896: ST_TO_ADDR
// hc_gallery =  ;
51897: LD_ADDR_OWVAR 33
51901: PUSH
51902: LD_STRING 
51904: ST_TO_ADDR
// animal := CreateHuman ;
51905: LD_ADDR_VAR 0 12
51909: PUSH
51910: CALL_OW 44
51914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51915: LD_VAR 0 12
51919: PPUSH
51920: LD_VAR 0 8
51924: PPUSH
51925: LD_INT 0
51927: PPUSH
51928: CALL 53636 0 3
// end ;
51932: GO 51886
51934: POP
51935: POP
// if fishes then
51936: LD_VAR 0 7
51940: IFFALSE 52007
// for i = 1 to fishes do
51942: LD_ADDR_VAR 0 11
51946: PUSH
51947: DOUBLE
51948: LD_INT 1
51950: DEC
51951: ST_TO_ADDR
51952: LD_VAR 0 7
51956: PUSH
51957: FOR_TO
51958: IFFALSE 52005
// begin hc_class = 20 ;
51960: LD_ADDR_OWVAR 28
51964: PUSH
51965: LD_INT 20
51967: ST_TO_ADDR
// hc_gallery =  ;
51968: LD_ADDR_OWVAR 33
51972: PUSH
51973: LD_STRING 
51975: ST_TO_ADDR
// animal := CreateHuman ;
51976: LD_ADDR_VAR 0 12
51980: PUSH
51981: CALL_OW 44
51985: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51986: LD_VAR 0 12
51990: PPUSH
51991: LD_VAR 0 9
51995: PPUSH
51996: LD_INT 0
51998: PPUSH
51999: CALL 53636 0 3
// end ;
52003: GO 51957
52005: POP
52006: POP
// end ;
52007: LD_VAR 0 10
52011: RET
// export function WantHeal ( sci , unit ) ; begin
52012: LD_INT 0
52014: PPUSH
// if GetTaskList ( sci ) > 0 then
52015: LD_VAR 0 1
52019: PPUSH
52020: CALL_OW 437
52024: PUSH
52025: LD_INT 0
52027: GREATER
52028: IFFALSE 52098
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52030: LD_VAR 0 1
52034: PPUSH
52035: CALL_OW 437
52039: PUSH
52040: LD_INT 1
52042: ARRAY
52043: PUSH
52044: LD_INT 1
52046: ARRAY
52047: PUSH
52048: LD_STRING l
52050: EQUAL
52051: PUSH
52052: LD_VAR 0 1
52056: PPUSH
52057: CALL_OW 437
52061: PUSH
52062: LD_INT 1
52064: ARRAY
52065: PUSH
52066: LD_INT 4
52068: ARRAY
52069: PUSH
52070: LD_VAR 0 2
52074: EQUAL
52075: AND
52076: IFFALSE 52088
// result := true else
52078: LD_ADDR_VAR 0 3
52082: PUSH
52083: LD_INT 1
52085: ST_TO_ADDR
52086: GO 52096
// result := false ;
52088: LD_ADDR_VAR 0 3
52092: PUSH
52093: LD_INT 0
52095: ST_TO_ADDR
// end else
52096: GO 52106
// result := false ;
52098: LD_ADDR_VAR 0 3
52102: PUSH
52103: LD_INT 0
52105: ST_TO_ADDR
// end ;
52106: LD_VAR 0 3
52110: RET
// export function HealTarget ( sci ) ; begin
52111: LD_INT 0
52113: PPUSH
// if not sci then
52114: LD_VAR 0 1
52118: NOT
52119: IFFALSE 52123
// exit ;
52121: GO 52188
// result := 0 ;
52123: LD_ADDR_VAR 0 2
52127: PUSH
52128: LD_INT 0
52130: ST_TO_ADDR
// if GetTaskList ( sci ) then
52131: LD_VAR 0 1
52135: PPUSH
52136: CALL_OW 437
52140: IFFALSE 52188
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52142: LD_VAR 0 1
52146: PPUSH
52147: CALL_OW 437
52151: PUSH
52152: LD_INT 1
52154: ARRAY
52155: PUSH
52156: LD_INT 1
52158: ARRAY
52159: PUSH
52160: LD_STRING l
52162: EQUAL
52163: IFFALSE 52188
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52165: LD_ADDR_VAR 0 2
52169: PUSH
52170: LD_VAR 0 1
52174: PPUSH
52175: CALL_OW 437
52179: PUSH
52180: LD_INT 1
52182: ARRAY
52183: PUSH
52184: LD_INT 4
52186: ARRAY
52187: ST_TO_ADDR
// end ;
52188: LD_VAR 0 2
52192: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52193: LD_INT 0
52195: PPUSH
52196: PPUSH
52197: PPUSH
52198: PPUSH
// if not base_units then
52199: LD_VAR 0 1
52203: NOT
52204: IFFALSE 52208
// exit ;
52206: GO 52295
// result := false ;
52208: LD_ADDR_VAR 0 2
52212: PUSH
52213: LD_INT 0
52215: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52216: LD_ADDR_VAR 0 5
52220: PUSH
52221: LD_VAR 0 1
52225: PPUSH
52226: LD_INT 21
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PPUSH
52236: CALL_OW 72
52240: ST_TO_ADDR
// if not tmp then
52241: LD_VAR 0 5
52245: NOT
52246: IFFALSE 52250
// exit ;
52248: GO 52295
// for i in tmp do
52250: LD_ADDR_VAR 0 3
52254: PUSH
52255: LD_VAR 0 5
52259: PUSH
52260: FOR_IN
52261: IFFALSE 52293
// begin result := EnemyInRange ( i , 22 ) ;
52263: LD_ADDR_VAR 0 2
52267: PUSH
52268: LD_VAR 0 3
52272: PPUSH
52273: LD_INT 22
52275: PPUSH
52276: CALL 49873 0 2
52280: ST_TO_ADDR
// if result then
52281: LD_VAR 0 2
52285: IFFALSE 52291
// exit ;
52287: POP
52288: POP
52289: GO 52295
// end ;
52291: GO 52260
52293: POP
52294: POP
// end ;
52295: LD_VAR 0 2
52299: RET
// export function FilterByTag ( units , tag ) ; begin
52300: LD_INT 0
52302: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52303: LD_ADDR_VAR 0 3
52307: PUSH
52308: LD_VAR 0 1
52312: PPUSH
52313: LD_INT 120
52315: PUSH
52316: LD_VAR 0 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PPUSH
52325: CALL_OW 72
52329: ST_TO_ADDR
// end ;
52330: LD_VAR 0 3
52334: RET
// export function IsDriver ( un ) ; begin
52335: LD_INT 0
52337: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52338: LD_ADDR_VAR 0 2
52342: PUSH
52343: LD_VAR 0 1
52347: PUSH
52348: LD_INT 55
52350: PUSH
52351: EMPTY
52352: LIST
52353: PPUSH
52354: CALL_OW 69
52358: IN
52359: ST_TO_ADDR
// end ;
52360: LD_VAR 0 2
52364: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52365: LD_INT 0
52367: PPUSH
52368: PPUSH
// list := [ ] ;
52369: LD_ADDR_VAR 0 5
52373: PUSH
52374: EMPTY
52375: ST_TO_ADDR
// case d of 0 :
52376: LD_VAR 0 3
52380: PUSH
52381: LD_INT 0
52383: DOUBLE
52384: EQUAL
52385: IFTRUE 52389
52387: GO 52522
52389: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52390: LD_ADDR_VAR 0 5
52394: PUSH
52395: LD_VAR 0 1
52399: PUSH
52400: LD_INT 4
52402: MINUS
52403: PUSH
52404: LD_VAR 0 2
52408: PUSH
52409: LD_INT 4
52411: MINUS
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: LIST
52420: PUSH
52421: LD_VAR 0 1
52425: PUSH
52426: LD_INT 3
52428: MINUS
52429: PUSH
52430: LD_VAR 0 2
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: PUSH
52443: LD_VAR 0 1
52447: PUSH
52448: LD_INT 4
52450: PLUS
52451: PUSH
52452: LD_VAR 0 2
52456: PUSH
52457: LD_INT 4
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: LIST
52464: PUSH
52465: LD_VAR 0 1
52469: PUSH
52470: LD_INT 3
52472: PLUS
52473: PUSH
52474: LD_VAR 0 2
52478: PUSH
52479: LD_INT 3
52481: PLUS
52482: PUSH
52483: LD_INT 5
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: LIST
52490: PUSH
52491: LD_VAR 0 1
52495: PUSH
52496: LD_VAR 0 2
52500: PUSH
52501: LD_INT 4
52503: PLUS
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: ST_TO_ADDR
// end ; 1 :
52520: GO 53220
52522: LD_INT 1
52524: DOUBLE
52525: EQUAL
52526: IFTRUE 52530
52528: GO 52663
52530: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52531: LD_ADDR_VAR 0 5
52535: PUSH
52536: LD_VAR 0 1
52540: PUSH
52541: LD_VAR 0 2
52545: PUSH
52546: LD_INT 4
52548: MINUS
52549: PUSH
52550: LD_INT 3
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: LIST
52557: PUSH
52558: LD_VAR 0 1
52562: PUSH
52563: LD_INT 3
52565: MINUS
52566: PUSH
52567: LD_VAR 0 2
52571: PUSH
52572: LD_INT 3
52574: MINUS
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: LIST
52583: PUSH
52584: LD_VAR 0 1
52588: PUSH
52589: LD_INT 4
52591: MINUS
52592: PUSH
52593: LD_VAR 0 2
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: PUSH
52606: LD_VAR 0 1
52610: PUSH
52611: LD_VAR 0 2
52615: PUSH
52616: LD_INT 3
52618: PLUS
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: LIST
52627: PUSH
52628: LD_VAR 0 1
52632: PUSH
52633: LD_INT 4
52635: PLUS
52636: PUSH
52637: LD_VAR 0 2
52641: PUSH
52642: LD_INT 4
52644: PLUS
52645: PUSH
52646: LD_INT 5
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: ST_TO_ADDR
// end ; 2 :
52661: GO 53220
52663: LD_INT 2
52665: DOUBLE
52666: EQUAL
52667: IFTRUE 52671
52669: GO 52800
52671: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52672: LD_ADDR_VAR 0 5
52676: PUSH
52677: LD_VAR 0 1
52681: PUSH
52682: LD_VAR 0 2
52686: PUSH
52687: LD_INT 3
52689: MINUS
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: LIST
52698: PUSH
52699: LD_VAR 0 1
52703: PUSH
52704: LD_INT 4
52706: PLUS
52707: PUSH
52708: LD_VAR 0 2
52712: PUSH
52713: LD_INT 4
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: PUSH
52721: LD_VAR 0 1
52725: PUSH
52726: LD_VAR 0 2
52730: PUSH
52731: LD_INT 4
52733: PLUS
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: PUSH
52743: LD_VAR 0 1
52747: PUSH
52748: LD_INT 3
52750: MINUS
52751: PUSH
52752: LD_VAR 0 2
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: PUSH
52765: LD_VAR 0 1
52769: PUSH
52770: LD_INT 4
52772: MINUS
52773: PUSH
52774: LD_VAR 0 2
52778: PUSH
52779: LD_INT 4
52781: MINUS
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: LIST
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: ST_TO_ADDR
// end ; 3 :
52798: GO 53220
52800: LD_INT 3
52802: DOUBLE
52803: EQUAL
52804: IFTRUE 52808
52806: GO 52941
52808: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52809: LD_ADDR_VAR 0 5
52813: PUSH
52814: LD_VAR 0 1
52818: PUSH
52819: LD_INT 3
52821: PLUS
52822: PUSH
52823: LD_VAR 0 2
52827: PUSH
52828: LD_INT 4
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: LIST
52835: PUSH
52836: LD_VAR 0 1
52840: PUSH
52841: LD_INT 4
52843: PLUS
52844: PUSH
52845: LD_VAR 0 2
52849: PUSH
52850: LD_INT 4
52852: PLUS
52853: PUSH
52854: LD_INT 5
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: PUSH
52862: LD_VAR 0 1
52866: PUSH
52867: LD_INT 4
52869: MINUS
52870: PUSH
52871: LD_VAR 0 2
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: LIST
52883: PUSH
52884: LD_VAR 0 1
52888: PUSH
52889: LD_VAR 0 2
52893: PUSH
52894: LD_INT 4
52896: MINUS
52897: PUSH
52898: LD_INT 3
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: PUSH
52906: LD_VAR 0 1
52910: PUSH
52911: LD_INT 3
52913: MINUS
52914: PUSH
52915: LD_VAR 0 2
52919: PUSH
52920: LD_INT 3
52922: MINUS
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: LIST
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: ST_TO_ADDR
// end ; 4 :
52939: GO 53220
52941: LD_INT 4
52943: DOUBLE
52944: EQUAL
52945: IFTRUE 52949
52947: GO 53082
52949: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52950: LD_ADDR_VAR 0 5
52954: PUSH
52955: LD_VAR 0 1
52959: PUSH
52960: LD_VAR 0 2
52964: PUSH
52965: LD_INT 4
52967: PLUS
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: LIST
52976: PUSH
52977: LD_VAR 0 1
52981: PUSH
52982: LD_INT 3
52984: PLUS
52985: PUSH
52986: LD_VAR 0 2
52990: PUSH
52991: LD_INT 3
52993: PLUS
52994: PUSH
52995: LD_INT 5
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: LIST
53002: PUSH
53003: LD_VAR 0 1
53007: PUSH
53008: LD_INT 4
53010: PLUS
53011: PUSH
53012: LD_VAR 0 2
53016: PUSH
53017: LD_INT 4
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: PUSH
53025: LD_VAR 0 1
53029: PUSH
53030: LD_VAR 0 2
53034: PUSH
53035: LD_INT 3
53037: MINUS
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: PUSH
53047: LD_VAR 0 1
53051: PUSH
53052: LD_INT 4
53054: MINUS
53055: PUSH
53056: LD_VAR 0 2
53060: PUSH
53061: LD_INT 4
53063: MINUS
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// end ; 5 :
53080: GO 53220
53082: LD_INT 5
53084: DOUBLE
53085: EQUAL
53086: IFTRUE 53090
53088: GO 53219
53090: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53091: LD_ADDR_VAR 0 5
53095: PUSH
53096: LD_VAR 0 1
53100: PUSH
53101: LD_INT 4
53103: MINUS
53104: PUSH
53105: LD_VAR 0 2
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: PUSH
53118: LD_VAR 0 1
53122: PUSH
53123: LD_VAR 0 2
53127: PUSH
53128: LD_INT 4
53130: MINUS
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: LIST
53139: PUSH
53140: LD_VAR 0 1
53144: PUSH
53145: LD_INT 4
53147: PLUS
53148: PUSH
53149: LD_VAR 0 2
53153: PUSH
53154: LD_INT 4
53156: PLUS
53157: PUSH
53158: LD_INT 5
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: PUSH
53166: LD_VAR 0 1
53170: PUSH
53171: LD_INT 3
53173: PLUS
53174: PUSH
53175: LD_VAR 0 2
53179: PUSH
53180: LD_INT 4
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: PUSH
53188: LD_VAR 0 1
53192: PUSH
53193: LD_VAR 0 2
53197: PUSH
53198: LD_INT 3
53200: PLUS
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: ST_TO_ADDR
// end ; end ;
53217: GO 53220
53219: POP
// result := list ;
53220: LD_ADDR_VAR 0 4
53224: PUSH
53225: LD_VAR 0 5
53229: ST_TO_ADDR
// end ;
53230: LD_VAR 0 4
53234: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53235: LD_INT 0
53237: PPUSH
53238: PPUSH
53239: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53240: LD_VAR 0 1
53244: NOT
53245: PUSH
53246: LD_VAR 0 2
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: LD_INT 4
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: IN
53269: NOT
53270: OR
53271: IFFALSE 53275
// exit ;
53273: GO 53358
// tmp := [ ] ;
53275: LD_ADDR_VAR 0 5
53279: PUSH
53280: EMPTY
53281: ST_TO_ADDR
// for i in units do
53282: LD_ADDR_VAR 0 4
53286: PUSH
53287: LD_VAR 0 1
53291: PUSH
53292: FOR_IN
53293: IFFALSE 53327
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53295: LD_ADDR_VAR 0 5
53299: PUSH
53300: LD_VAR 0 5
53304: PPUSH
53305: LD_VAR 0 4
53309: PPUSH
53310: LD_VAR 0 2
53314: PPUSH
53315: CALL_OW 259
53319: PPUSH
53320: CALL 54731 0 2
53324: ST_TO_ADDR
53325: GO 53292
53327: POP
53328: POP
// if not tmp then
53329: LD_VAR 0 5
53333: NOT
53334: IFFALSE 53338
// exit ;
53336: GO 53358
// result := SortListByListDesc ( units , tmp ) ;
53338: LD_ADDR_VAR 0 3
53342: PUSH
53343: LD_VAR 0 1
53347: PPUSH
53348: LD_VAR 0 5
53352: PPUSH
53353: CALL_OW 77
53357: ST_TO_ADDR
// end ;
53358: LD_VAR 0 3
53362: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53363: LD_INT 0
53365: PPUSH
53366: PPUSH
53367: PPUSH
// result := false ;
53368: LD_ADDR_VAR 0 3
53372: PUSH
53373: LD_INT 0
53375: ST_TO_ADDR
// if not building then
53376: LD_VAR 0 2
53380: NOT
53381: IFFALSE 53385
// exit ;
53383: GO 53523
// x := GetX ( building ) ;
53385: LD_ADDR_VAR 0 4
53389: PUSH
53390: LD_VAR 0 2
53394: PPUSH
53395: CALL_OW 250
53399: ST_TO_ADDR
// y := GetY ( building ) ;
53400: LD_ADDR_VAR 0 5
53404: PUSH
53405: LD_VAR 0 2
53409: PPUSH
53410: CALL_OW 251
53414: ST_TO_ADDR
// if not x or not y then
53415: LD_VAR 0 4
53419: NOT
53420: PUSH
53421: LD_VAR 0 5
53425: NOT
53426: OR
53427: IFFALSE 53431
// exit ;
53429: GO 53523
// if GetTaskList ( unit ) then
53431: LD_VAR 0 1
53435: PPUSH
53436: CALL_OW 437
53440: IFFALSE 53523
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53442: LD_STRING e
53444: PUSH
53445: LD_VAR 0 1
53449: PPUSH
53450: CALL_OW 437
53454: PUSH
53455: LD_INT 1
53457: ARRAY
53458: PUSH
53459: LD_INT 1
53461: ARRAY
53462: EQUAL
53463: PUSH
53464: LD_VAR 0 4
53468: PUSH
53469: LD_VAR 0 1
53473: PPUSH
53474: CALL_OW 437
53478: PUSH
53479: LD_INT 1
53481: ARRAY
53482: PUSH
53483: LD_INT 2
53485: ARRAY
53486: EQUAL
53487: AND
53488: PUSH
53489: LD_VAR 0 5
53493: PUSH
53494: LD_VAR 0 1
53498: PPUSH
53499: CALL_OW 437
53503: PUSH
53504: LD_INT 1
53506: ARRAY
53507: PUSH
53508: LD_INT 3
53510: ARRAY
53511: EQUAL
53512: AND
53513: IFFALSE 53523
// result := true end ;
53515: LD_ADDR_VAR 0 3
53519: PUSH
53520: LD_INT 1
53522: ST_TO_ADDR
// end ;
53523: LD_VAR 0 3
53527: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53528: LD_INT 0
53530: PPUSH
// result := false ;
53531: LD_ADDR_VAR 0 4
53535: PUSH
53536: LD_INT 0
53538: ST_TO_ADDR
// if GetTaskList ( unit ) then
53539: LD_VAR 0 1
53543: PPUSH
53544: CALL_OW 437
53548: IFFALSE 53631
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53550: LD_STRING M
53552: PUSH
53553: LD_VAR 0 1
53557: PPUSH
53558: CALL_OW 437
53562: PUSH
53563: LD_INT 1
53565: ARRAY
53566: PUSH
53567: LD_INT 1
53569: ARRAY
53570: EQUAL
53571: PUSH
53572: LD_VAR 0 2
53576: PUSH
53577: LD_VAR 0 1
53581: PPUSH
53582: CALL_OW 437
53586: PUSH
53587: LD_INT 1
53589: ARRAY
53590: PUSH
53591: LD_INT 2
53593: ARRAY
53594: EQUAL
53595: AND
53596: PUSH
53597: LD_VAR 0 3
53601: PUSH
53602: LD_VAR 0 1
53606: PPUSH
53607: CALL_OW 437
53611: PUSH
53612: LD_INT 1
53614: ARRAY
53615: PUSH
53616: LD_INT 3
53618: ARRAY
53619: EQUAL
53620: AND
53621: IFFALSE 53631
// result := true ;
53623: LD_ADDR_VAR 0 4
53627: PUSH
53628: LD_INT 1
53630: ST_TO_ADDR
// end ; end ;
53631: LD_VAR 0 4
53635: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53636: LD_INT 0
53638: PPUSH
53639: PPUSH
53640: PPUSH
53641: PPUSH
// if not unit or not area then
53642: LD_VAR 0 1
53646: NOT
53647: PUSH
53648: LD_VAR 0 2
53652: NOT
53653: OR
53654: IFFALSE 53658
// exit ;
53656: GO 53834
// tmp := AreaToList ( area , i ) ;
53658: LD_ADDR_VAR 0 6
53662: PUSH
53663: LD_VAR 0 2
53667: PPUSH
53668: LD_VAR 0 5
53672: PPUSH
53673: CALL_OW 517
53677: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53678: LD_ADDR_VAR 0 5
53682: PUSH
53683: DOUBLE
53684: LD_INT 1
53686: DEC
53687: ST_TO_ADDR
53688: LD_VAR 0 6
53692: PUSH
53693: LD_INT 1
53695: ARRAY
53696: PUSH
53697: FOR_TO
53698: IFFALSE 53832
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53700: LD_ADDR_VAR 0 7
53704: PUSH
53705: LD_VAR 0 6
53709: PUSH
53710: LD_INT 1
53712: ARRAY
53713: PUSH
53714: LD_VAR 0 5
53718: ARRAY
53719: PUSH
53720: LD_VAR 0 6
53724: PUSH
53725: LD_INT 2
53727: ARRAY
53728: PUSH
53729: LD_VAR 0 5
53733: ARRAY
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53739: LD_INT 92
53741: PUSH
53742: LD_VAR 0 7
53746: PUSH
53747: LD_INT 1
53749: ARRAY
53750: PUSH
53751: LD_VAR 0 7
53755: PUSH
53756: LD_INT 2
53758: ARRAY
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: PPUSH
53769: CALL_OW 69
53773: PUSH
53774: LD_INT 0
53776: EQUAL
53777: IFFALSE 53830
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53779: LD_VAR 0 1
53783: PPUSH
53784: LD_VAR 0 7
53788: PUSH
53789: LD_INT 1
53791: ARRAY
53792: PPUSH
53793: LD_VAR 0 7
53797: PUSH
53798: LD_INT 2
53800: ARRAY
53801: PPUSH
53802: LD_VAR 0 3
53806: PPUSH
53807: CALL_OW 48
// result := IsPlaced ( unit ) ;
53811: LD_ADDR_VAR 0 4
53815: PUSH
53816: LD_VAR 0 1
53820: PPUSH
53821: CALL_OW 305
53825: ST_TO_ADDR
// exit ;
53826: POP
53827: POP
53828: GO 53834
// end ; end ;
53830: GO 53697
53832: POP
53833: POP
// end ;
53834: LD_VAR 0 4
53838: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53839: LD_INT 0
53841: PPUSH
53842: PPUSH
53843: PPUSH
// if not side or side > 8 then
53844: LD_VAR 0 1
53848: NOT
53849: PUSH
53850: LD_VAR 0 1
53854: PUSH
53855: LD_INT 8
53857: GREATER
53858: OR
53859: IFFALSE 53863
// exit ;
53861: GO 54050
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53863: LD_ADDR_VAR 0 4
53867: PUSH
53868: LD_INT 22
53870: PUSH
53871: LD_VAR 0 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 21
53882: PUSH
53883: LD_INT 3
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PPUSH
53894: CALL_OW 69
53898: ST_TO_ADDR
// if not tmp then
53899: LD_VAR 0 4
53903: NOT
53904: IFFALSE 53908
// exit ;
53906: GO 54050
// enable_addtolog := true ;
53908: LD_ADDR_OWVAR 81
53912: PUSH
53913: LD_INT 1
53915: ST_TO_ADDR
// AddToLog ( [ ) ;
53916: LD_STRING [
53918: PPUSH
53919: CALL_OW 561
// for i in tmp do
53923: LD_ADDR_VAR 0 3
53927: PUSH
53928: LD_VAR 0 4
53932: PUSH
53933: FOR_IN
53934: IFFALSE 54041
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53936: LD_STRING [
53938: PUSH
53939: LD_VAR 0 3
53943: PPUSH
53944: CALL_OW 266
53948: STR
53949: PUSH
53950: LD_STRING , 
53952: STR
53953: PUSH
53954: LD_VAR 0 3
53958: PPUSH
53959: CALL_OW 250
53963: STR
53964: PUSH
53965: LD_STRING , 
53967: STR
53968: PUSH
53969: LD_VAR 0 3
53973: PPUSH
53974: CALL_OW 251
53978: STR
53979: PUSH
53980: LD_STRING , 
53982: STR
53983: PUSH
53984: LD_VAR 0 3
53988: PPUSH
53989: CALL_OW 254
53993: STR
53994: PUSH
53995: LD_STRING , 
53997: STR
53998: PUSH
53999: LD_VAR 0 3
54003: PPUSH
54004: LD_INT 1
54006: PPUSH
54007: CALL_OW 268
54011: STR
54012: PUSH
54013: LD_STRING , 
54015: STR
54016: PUSH
54017: LD_VAR 0 3
54021: PPUSH
54022: LD_INT 2
54024: PPUSH
54025: CALL_OW 268
54029: STR
54030: PUSH
54031: LD_STRING ],
54033: STR
54034: PPUSH
54035: CALL_OW 561
// end ;
54039: GO 53933
54041: POP
54042: POP
// AddToLog ( ]; ) ;
54043: LD_STRING ];
54045: PPUSH
54046: CALL_OW 561
// end ;
54050: LD_VAR 0 2
54054: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54055: LD_INT 0
54057: PPUSH
54058: PPUSH
54059: PPUSH
54060: PPUSH
54061: PPUSH
// if not area or not rate or not max then
54062: LD_VAR 0 1
54066: NOT
54067: PUSH
54068: LD_VAR 0 2
54072: NOT
54073: OR
54074: PUSH
54075: LD_VAR 0 4
54079: NOT
54080: OR
54081: IFFALSE 54085
// exit ;
54083: GO 54274
// while 1 do
54085: LD_INT 1
54087: IFFALSE 54274
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54089: LD_ADDR_VAR 0 9
54093: PUSH
54094: LD_VAR 0 1
54098: PPUSH
54099: LD_INT 1
54101: PPUSH
54102: CALL_OW 287
54106: PUSH
54107: LD_INT 10
54109: MUL
54110: ST_TO_ADDR
// r := rate / 10 ;
54111: LD_ADDR_VAR 0 7
54115: PUSH
54116: LD_VAR 0 2
54120: PUSH
54121: LD_INT 10
54123: DIVREAL
54124: ST_TO_ADDR
// time := 1 1$00 ;
54125: LD_ADDR_VAR 0 8
54129: PUSH
54130: LD_INT 2100
54132: ST_TO_ADDR
// if amount < min then
54133: LD_VAR 0 9
54137: PUSH
54138: LD_VAR 0 3
54142: LESS
54143: IFFALSE 54161
// r := r * 2 else
54145: LD_ADDR_VAR 0 7
54149: PUSH
54150: LD_VAR 0 7
54154: PUSH
54155: LD_INT 2
54157: MUL
54158: ST_TO_ADDR
54159: GO 54187
// if amount > max then
54161: LD_VAR 0 9
54165: PUSH
54166: LD_VAR 0 4
54170: GREATER
54171: IFFALSE 54187
// r := r / 2 ;
54173: LD_ADDR_VAR 0 7
54177: PUSH
54178: LD_VAR 0 7
54182: PUSH
54183: LD_INT 2
54185: DIVREAL
54186: ST_TO_ADDR
// time := time / r ;
54187: LD_ADDR_VAR 0 8
54191: PUSH
54192: LD_VAR 0 8
54196: PUSH
54197: LD_VAR 0 7
54201: DIVREAL
54202: ST_TO_ADDR
// if time < 0 then
54203: LD_VAR 0 8
54207: PUSH
54208: LD_INT 0
54210: LESS
54211: IFFALSE 54228
// time := time * - 1 ;
54213: LD_ADDR_VAR 0 8
54217: PUSH
54218: LD_VAR 0 8
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: MUL
54227: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54228: LD_VAR 0 8
54232: PUSH
54233: LD_INT 35
54235: PPUSH
54236: LD_INT 875
54238: PPUSH
54239: CALL_OW 12
54243: PLUS
54244: PPUSH
54245: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54249: LD_INT 1
54251: PPUSH
54252: LD_INT 5
54254: PPUSH
54255: CALL_OW 12
54259: PPUSH
54260: LD_VAR 0 1
54264: PPUSH
54265: LD_INT 1
54267: PPUSH
54268: CALL_OW 55
// end ;
54272: GO 54085
// end ;
54274: LD_VAR 0 5
54278: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54279: LD_INT 0
54281: PPUSH
54282: PPUSH
54283: PPUSH
54284: PPUSH
54285: PPUSH
54286: PPUSH
54287: PPUSH
54288: PPUSH
// if not turrets or not factories then
54289: LD_VAR 0 1
54293: NOT
54294: PUSH
54295: LD_VAR 0 2
54299: NOT
54300: OR
54301: IFFALSE 54305
// exit ;
54303: GO 54612
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54305: LD_ADDR_VAR 0 10
54309: PUSH
54310: LD_INT 5
54312: PUSH
54313: LD_INT 6
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: LD_INT 4
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 3
54332: PUSH
54333: LD_INT 5
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 24
54347: PUSH
54348: LD_INT 25
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 23
54357: PUSH
54358: LD_INT 27
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 42
54371: PUSH
54372: LD_INT 43
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 44
54381: PUSH
54382: LD_INT 46
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 45
54391: PUSH
54392: LD_INT 47
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: LIST
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// result := [ ] ;
54409: LD_ADDR_VAR 0 3
54413: PUSH
54414: EMPTY
54415: ST_TO_ADDR
// for i in turrets do
54416: LD_ADDR_VAR 0 4
54420: PUSH
54421: LD_VAR 0 1
54425: PUSH
54426: FOR_IN
54427: IFFALSE 54610
// begin nat := GetNation ( i ) ;
54429: LD_ADDR_VAR 0 7
54433: PUSH
54434: LD_VAR 0 4
54438: PPUSH
54439: CALL_OW 248
54443: ST_TO_ADDR
// weapon := 0 ;
54444: LD_ADDR_VAR 0 8
54448: PUSH
54449: LD_INT 0
54451: ST_TO_ADDR
// if not nat then
54452: LD_VAR 0 7
54456: NOT
54457: IFFALSE 54461
// continue ;
54459: GO 54426
// for j in list [ nat ] do
54461: LD_ADDR_VAR 0 5
54465: PUSH
54466: LD_VAR 0 10
54470: PUSH
54471: LD_VAR 0 7
54475: ARRAY
54476: PUSH
54477: FOR_IN
54478: IFFALSE 54519
// if GetBWeapon ( i ) = j [ 1 ] then
54480: LD_VAR 0 4
54484: PPUSH
54485: CALL_OW 269
54489: PUSH
54490: LD_VAR 0 5
54494: PUSH
54495: LD_INT 1
54497: ARRAY
54498: EQUAL
54499: IFFALSE 54517
// begin weapon := j [ 2 ] ;
54501: LD_ADDR_VAR 0 8
54505: PUSH
54506: LD_VAR 0 5
54510: PUSH
54511: LD_INT 2
54513: ARRAY
54514: ST_TO_ADDR
// break ;
54515: GO 54519
// end ;
54517: GO 54477
54519: POP
54520: POP
// if not weapon then
54521: LD_VAR 0 8
54525: NOT
54526: IFFALSE 54530
// continue ;
54528: GO 54426
// for k in factories do
54530: LD_ADDR_VAR 0 6
54534: PUSH
54535: LD_VAR 0 2
54539: PUSH
54540: FOR_IN
54541: IFFALSE 54606
// begin weapons := AvailableWeaponList ( k ) ;
54543: LD_ADDR_VAR 0 9
54547: PUSH
54548: LD_VAR 0 6
54552: PPUSH
54553: CALL_OW 478
54557: ST_TO_ADDR
// if not weapons then
54558: LD_VAR 0 9
54562: NOT
54563: IFFALSE 54567
// continue ;
54565: GO 54540
// if weapon in weapons then
54567: LD_VAR 0 8
54571: PUSH
54572: LD_VAR 0 9
54576: IN
54577: IFFALSE 54604
// begin result := [ i , weapon ] ;
54579: LD_ADDR_VAR 0 3
54583: PUSH
54584: LD_VAR 0 4
54588: PUSH
54589: LD_VAR 0 8
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: ST_TO_ADDR
// exit ;
54598: POP
54599: POP
54600: POP
54601: POP
54602: GO 54612
// end ; end ;
54604: GO 54540
54606: POP
54607: POP
// end ;
54608: GO 54426
54610: POP
54611: POP
// end ;
54612: LD_VAR 0 3
54616: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54617: LD_INT 0
54619: PPUSH
// if not side or side > 8 then
54620: LD_VAR 0 3
54624: NOT
54625: PUSH
54626: LD_VAR 0 3
54630: PUSH
54631: LD_INT 8
54633: GREATER
54634: OR
54635: IFFALSE 54639
// exit ;
54637: GO 54698
// if not range then
54639: LD_VAR 0 4
54643: NOT
54644: IFFALSE 54655
// range := - 12 ;
54646: LD_ADDR_VAR 0 4
54650: PUSH
54651: LD_INT 12
54653: NEG
54654: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54655: LD_VAR 0 1
54659: PPUSH
54660: LD_VAR 0 2
54664: PPUSH
54665: LD_VAR 0 3
54669: PPUSH
54670: LD_VAR 0 4
54674: PPUSH
54675: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54679: LD_VAR 0 1
54683: PPUSH
54684: LD_VAR 0 2
54688: PPUSH
54689: LD_VAR 0 3
54693: PPUSH
54694: CALL_OW 331
// end ;
54698: LD_VAR 0 5
54702: RET
// export function Video ( mode ) ; begin
54703: LD_INT 0
54705: PPUSH
// ingame_video = mode ;
54706: LD_ADDR_OWVAR 52
54710: PUSH
54711: LD_VAR 0 1
54715: ST_TO_ADDR
// interface_hidden = mode ;
54716: LD_ADDR_OWVAR 54
54720: PUSH
54721: LD_VAR 0 1
54725: ST_TO_ADDR
// end ;
54726: LD_VAR 0 2
54730: RET
// export function Join ( array , element ) ; begin
54731: LD_INT 0
54733: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54734: LD_ADDR_VAR 0 3
54738: PUSH
54739: LD_VAR 0 1
54743: PPUSH
54744: LD_VAR 0 1
54748: PUSH
54749: LD_INT 1
54751: PLUS
54752: PPUSH
54753: LD_VAR 0 2
54757: PPUSH
54758: CALL_OW 1
54762: ST_TO_ADDR
// end ;
54763: LD_VAR 0 3
54767: RET
// export function JoinUnion ( array , element ) ; begin
54768: LD_INT 0
54770: PPUSH
// result := array union element ;
54771: LD_ADDR_VAR 0 3
54775: PUSH
54776: LD_VAR 0 1
54780: PUSH
54781: LD_VAR 0 2
54785: UNION
54786: ST_TO_ADDR
// end ;
54787: LD_VAR 0 3
54791: RET
// export function GetBehemoths ( side ) ; begin
54792: LD_INT 0
54794: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54795: LD_ADDR_VAR 0 2
54799: PUSH
54800: LD_INT 22
54802: PUSH
54803: LD_VAR 0 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 31
54814: PUSH
54815: LD_INT 25
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PPUSH
54826: CALL_OW 69
54830: ST_TO_ADDR
// end ;
54831: LD_VAR 0 2
54835: RET
// export function Shuffle ( array ) ; var i , index ; begin
54836: LD_INT 0
54838: PPUSH
54839: PPUSH
54840: PPUSH
// result := [ ] ;
54841: LD_ADDR_VAR 0 2
54845: PUSH
54846: EMPTY
54847: ST_TO_ADDR
// if not array then
54848: LD_VAR 0 1
54852: NOT
54853: IFFALSE 54857
// exit ;
54855: GO 54956
// Randomize ;
54857: CALL_OW 10
// for i = array downto 1 do
54861: LD_ADDR_VAR 0 3
54865: PUSH
54866: DOUBLE
54867: LD_VAR 0 1
54871: INC
54872: ST_TO_ADDR
54873: LD_INT 1
54875: PUSH
54876: FOR_DOWNTO
54877: IFFALSE 54954
// begin index := rand ( 1 , array ) ;
54879: LD_ADDR_VAR 0 4
54883: PUSH
54884: LD_INT 1
54886: PPUSH
54887: LD_VAR 0 1
54891: PPUSH
54892: CALL_OW 12
54896: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54897: LD_ADDR_VAR 0 2
54901: PUSH
54902: LD_VAR 0 2
54906: PPUSH
54907: LD_VAR 0 2
54911: PUSH
54912: LD_INT 1
54914: PLUS
54915: PPUSH
54916: LD_VAR 0 1
54920: PUSH
54921: LD_VAR 0 4
54925: ARRAY
54926: PPUSH
54927: CALL_OW 2
54931: ST_TO_ADDR
// array := Delete ( array , index ) ;
54932: LD_ADDR_VAR 0 1
54936: PUSH
54937: LD_VAR 0 1
54941: PPUSH
54942: LD_VAR 0 4
54946: PPUSH
54947: CALL_OW 3
54951: ST_TO_ADDR
// end ;
54952: GO 54876
54954: POP
54955: POP
// end ;
54956: LD_VAR 0 2
54960: RET
// export function GetBaseMaterials ( base ) ; begin
54961: LD_INT 0
54963: PPUSH
// result := [ 0 , 0 , 0 ] ;
54964: LD_ADDR_VAR 0 2
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: LIST
54982: ST_TO_ADDR
// if not base then
54983: LD_VAR 0 1
54987: NOT
54988: IFFALSE 54992
// exit ;
54990: GO 55041
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54992: LD_ADDR_VAR 0 2
54996: PUSH
54997: LD_VAR 0 1
55001: PPUSH
55002: LD_INT 1
55004: PPUSH
55005: CALL_OW 275
55009: PUSH
55010: LD_VAR 0 1
55014: PPUSH
55015: LD_INT 2
55017: PPUSH
55018: CALL_OW 275
55022: PUSH
55023: LD_VAR 0 1
55027: PPUSH
55028: LD_INT 3
55030: PPUSH
55031: CALL_OW 275
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// end ;
55041: LD_VAR 0 2
55045: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55046: LD_INT 0
55048: PPUSH
55049: PPUSH
// result := array ;
55050: LD_ADDR_VAR 0 3
55054: PUSH
55055: LD_VAR 0 1
55059: ST_TO_ADDR
// if size >= result then
55060: LD_VAR 0 2
55064: PUSH
55065: LD_VAR 0 3
55069: GREATEREQUAL
55070: IFFALSE 55074
// exit ;
55072: GO 55124
// if size then
55074: LD_VAR 0 2
55078: IFFALSE 55124
// for i := array downto size do
55080: LD_ADDR_VAR 0 4
55084: PUSH
55085: DOUBLE
55086: LD_VAR 0 1
55090: INC
55091: ST_TO_ADDR
55092: LD_VAR 0 2
55096: PUSH
55097: FOR_DOWNTO
55098: IFFALSE 55122
// result := Delete ( result , result ) ;
55100: LD_ADDR_VAR 0 3
55104: PUSH
55105: LD_VAR 0 3
55109: PPUSH
55110: LD_VAR 0 3
55114: PPUSH
55115: CALL_OW 3
55119: ST_TO_ADDR
55120: GO 55097
55122: POP
55123: POP
// end ;
55124: LD_VAR 0 3
55128: RET
// export function ComExit ( unit ) ; var tmp ; begin
55129: LD_INT 0
55131: PPUSH
55132: PPUSH
// if not IsInUnit ( unit ) then
55133: LD_VAR 0 1
55137: PPUSH
55138: CALL_OW 310
55142: NOT
55143: IFFALSE 55147
// exit ;
55145: GO 55207
// tmp := IsInUnit ( unit ) ;
55147: LD_ADDR_VAR 0 3
55151: PUSH
55152: LD_VAR 0 1
55156: PPUSH
55157: CALL_OW 310
55161: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55162: LD_VAR 0 3
55166: PPUSH
55167: CALL_OW 247
55171: PUSH
55172: LD_INT 2
55174: EQUAL
55175: IFFALSE 55188
// ComExitVehicle ( unit ) else
55177: LD_VAR 0 1
55181: PPUSH
55182: CALL_OW 121
55186: GO 55197
// ComExitBuilding ( unit ) ;
55188: LD_VAR 0 1
55192: PPUSH
55193: CALL_OW 122
// result := tmp ;
55197: LD_ADDR_VAR 0 2
55201: PUSH
55202: LD_VAR 0 3
55206: ST_TO_ADDR
// end ;
55207: LD_VAR 0 2
55211: RET
// export function ComExitAll ( units ) ; var i ; begin
55212: LD_INT 0
55214: PPUSH
55215: PPUSH
// if not units then
55216: LD_VAR 0 1
55220: NOT
55221: IFFALSE 55225
// exit ;
55223: GO 55251
// for i in units do
55225: LD_ADDR_VAR 0 3
55229: PUSH
55230: LD_VAR 0 1
55234: PUSH
55235: FOR_IN
55236: IFFALSE 55249
// ComExit ( i ) ;
55238: LD_VAR 0 3
55242: PPUSH
55243: CALL 55129 0 1
55247: GO 55235
55249: POP
55250: POP
// end ;
55251: LD_VAR 0 2
55255: RET
// export function ResetHc ; begin
55256: LD_INT 0
55258: PPUSH
// InitHc ;
55259: CALL_OW 19
// hc_importance := 0 ;
55263: LD_ADDR_OWVAR 32
55267: PUSH
55268: LD_INT 0
55270: ST_TO_ADDR
// end ;
55271: LD_VAR 0 1
55275: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55276: LD_INT 0
55278: PPUSH
55279: PPUSH
55280: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55281: LD_ADDR_VAR 0 6
55285: PUSH
55286: LD_VAR 0 1
55290: PUSH
55291: LD_VAR 0 3
55295: PLUS
55296: PUSH
55297: LD_INT 2
55299: DIV
55300: ST_TO_ADDR
// if _x < 0 then
55301: LD_VAR 0 6
55305: PUSH
55306: LD_INT 0
55308: LESS
55309: IFFALSE 55326
// _x := _x * - 1 ;
55311: LD_ADDR_VAR 0 6
55315: PUSH
55316: LD_VAR 0 6
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: MUL
55325: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55326: LD_ADDR_VAR 0 7
55330: PUSH
55331: LD_VAR 0 2
55335: PUSH
55336: LD_VAR 0 4
55340: PLUS
55341: PUSH
55342: LD_INT 2
55344: DIV
55345: ST_TO_ADDR
// if _y < 0 then
55346: LD_VAR 0 7
55350: PUSH
55351: LD_INT 0
55353: LESS
55354: IFFALSE 55371
// _y := _y * - 1 ;
55356: LD_ADDR_VAR 0 7
55360: PUSH
55361: LD_VAR 0 7
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: MUL
55370: ST_TO_ADDR
// result := [ _x , _y ] ;
55371: LD_ADDR_VAR 0 5
55375: PUSH
55376: LD_VAR 0 6
55380: PUSH
55381: LD_VAR 0 7
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: ST_TO_ADDR
// end ;
55390: LD_VAR 0 5
55394: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55395: LD_INT 0
55397: PPUSH
55398: PPUSH
55399: PPUSH
55400: PPUSH
// task := GetTaskList ( unit ) ;
55401: LD_ADDR_VAR 0 7
55405: PUSH
55406: LD_VAR 0 1
55410: PPUSH
55411: CALL_OW 437
55415: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55416: LD_VAR 0 7
55420: NOT
55421: PUSH
55422: LD_VAR 0 1
55426: PPUSH
55427: LD_VAR 0 2
55431: PPUSH
55432: CALL_OW 308
55436: NOT
55437: AND
55438: IFFALSE 55442
// exit ;
55440: GO 55560
// if IsInArea ( unit , area ) then
55442: LD_VAR 0 1
55446: PPUSH
55447: LD_VAR 0 2
55451: PPUSH
55452: CALL_OW 308
55456: IFFALSE 55474
// begin ComMoveToArea ( unit , goAway ) ;
55458: LD_VAR 0 1
55462: PPUSH
55463: LD_VAR 0 3
55467: PPUSH
55468: CALL_OW 113
// exit ;
55472: GO 55560
// end ; if task [ 1 ] [ 1 ] <> M then
55474: LD_VAR 0 7
55478: PUSH
55479: LD_INT 1
55481: ARRAY
55482: PUSH
55483: LD_INT 1
55485: ARRAY
55486: PUSH
55487: LD_STRING M
55489: NONEQUAL
55490: IFFALSE 55494
// exit ;
55492: GO 55560
// x := task [ 1 ] [ 2 ] ;
55494: LD_ADDR_VAR 0 5
55498: PUSH
55499: LD_VAR 0 7
55503: PUSH
55504: LD_INT 1
55506: ARRAY
55507: PUSH
55508: LD_INT 2
55510: ARRAY
55511: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55512: LD_ADDR_VAR 0 6
55516: PUSH
55517: LD_VAR 0 7
55521: PUSH
55522: LD_INT 1
55524: ARRAY
55525: PUSH
55526: LD_INT 3
55528: ARRAY
55529: ST_TO_ADDR
// if InArea ( x , y , area ) then
55530: LD_VAR 0 5
55534: PPUSH
55535: LD_VAR 0 6
55539: PPUSH
55540: LD_VAR 0 2
55544: PPUSH
55545: CALL_OW 309
55549: IFFALSE 55560
// ComStop ( unit ) ;
55551: LD_VAR 0 1
55555: PPUSH
55556: CALL_OW 141
// end ;
55560: LD_VAR 0 4
55564: RET
// export function Abs ( value ) ; begin
55565: LD_INT 0
55567: PPUSH
// result := value ;
55568: LD_ADDR_VAR 0 2
55572: PUSH
55573: LD_VAR 0 1
55577: ST_TO_ADDR
// if value < 0 then
55578: LD_VAR 0 1
55582: PUSH
55583: LD_INT 0
55585: LESS
55586: IFFALSE 55603
// result := value * - 1 ;
55588: LD_ADDR_VAR 0 2
55592: PUSH
55593: LD_VAR 0 1
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: MUL
55602: ST_TO_ADDR
// end ;
55603: LD_VAR 0 2
55607: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55608: LD_INT 0
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
55616: PPUSH
55617: PPUSH
// if not unit or not building then
55618: LD_VAR 0 1
55622: NOT
55623: PUSH
55624: LD_VAR 0 2
55628: NOT
55629: OR
55630: IFFALSE 55634
// exit ;
55632: GO 55860
// x := GetX ( building ) ;
55634: LD_ADDR_VAR 0 4
55638: PUSH
55639: LD_VAR 0 2
55643: PPUSH
55644: CALL_OW 250
55648: ST_TO_ADDR
// y := GetY ( building ) ;
55649: LD_ADDR_VAR 0 6
55653: PUSH
55654: LD_VAR 0 2
55658: PPUSH
55659: CALL_OW 251
55663: ST_TO_ADDR
// d := GetDir ( building ) ;
55664: LD_ADDR_VAR 0 8
55668: PUSH
55669: LD_VAR 0 2
55673: PPUSH
55674: CALL_OW 254
55678: ST_TO_ADDR
// r := 4 ;
55679: LD_ADDR_VAR 0 9
55683: PUSH
55684: LD_INT 4
55686: ST_TO_ADDR
// for i := 1 to 5 do
55687: LD_ADDR_VAR 0 10
55691: PUSH
55692: DOUBLE
55693: LD_INT 1
55695: DEC
55696: ST_TO_ADDR
55697: LD_INT 5
55699: PUSH
55700: FOR_TO
55701: IFFALSE 55858
// begin _x := ShiftX ( x , d , r + i ) ;
55703: LD_ADDR_VAR 0 5
55707: PUSH
55708: LD_VAR 0 4
55712: PPUSH
55713: LD_VAR 0 8
55717: PPUSH
55718: LD_VAR 0 9
55722: PUSH
55723: LD_VAR 0 10
55727: PLUS
55728: PPUSH
55729: CALL_OW 272
55733: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55734: LD_ADDR_VAR 0 7
55738: PUSH
55739: LD_VAR 0 6
55743: PPUSH
55744: LD_VAR 0 8
55748: PPUSH
55749: LD_VAR 0 9
55753: PUSH
55754: LD_VAR 0 10
55758: PLUS
55759: PPUSH
55760: CALL_OW 273
55764: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55765: LD_VAR 0 5
55769: PPUSH
55770: LD_VAR 0 7
55774: PPUSH
55775: CALL_OW 488
55779: PUSH
55780: LD_VAR 0 5
55784: PPUSH
55785: LD_VAR 0 7
55789: PPUSH
55790: CALL_OW 428
55794: PPUSH
55795: CALL_OW 247
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: IN
55810: NOT
55811: AND
55812: IFFALSE 55856
// begin ComMoveXY ( unit , _x , _y ) ;
55814: LD_VAR 0 1
55818: PPUSH
55819: LD_VAR 0 5
55823: PPUSH
55824: LD_VAR 0 7
55828: PPUSH
55829: CALL_OW 111
// result := [ _x , _y ] ;
55833: LD_ADDR_VAR 0 3
55837: PUSH
55838: LD_VAR 0 5
55842: PUSH
55843: LD_VAR 0 7
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: ST_TO_ADDR
// exit ;
55852: POP
55853: POP
55854: GO 55860
// end ; end ;
55856: GO 55700
55858: POP
55859: POP
// end ;
55860: LD_VAR 0 3
55864: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55865: LD_INT 0
55867: PPUSH
55868: PPUSH
55869: PPUSH
// result := 0 ;
55870: LD_ADDR_VAR 0 3
55874: PUSH
55875: LD_INT 0
55877: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55878: LD_VAR 0 1
55882: PUSH
55883: LD_INT 0
55885: LESS
55886: PUSH
55887: LD_VAR 0 1
55891: PUSH
55892: LD_INT 8
55894: GREATER
55895: OR
55896: PUSH
55897: LD_VAR 0 2
55901: PUSH
55902: LD_INT 0
55904: LESS
55905: OR
55906: PUSH
55907: LD_VAR 0 2
55911: PUSH
55912: LD_INT 8
55914: GREATER
55915: OR
55916: IFFALSE 55920
// exit ;
55918: GO 55995
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55920: LD_ADDR_VAR 0 4
55924: PUSH
55925: LD_INT 22
55927: PUSH
55928: LD_VAR 0 2
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PPUSH
55937: CALL_OW 69
55941: PUSH
55942: FOR_IN
55943: IFFALSE 55993
// begin un := UnitShoot ( i ) ;
55945: LD_ADDR_VAR 0 5
55949: PUSH
55950: LD_VAR 0 4
55954: PPUSH
55955: CALL_OW 504
55959: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55960: LD_VAR 0 5
55964: PPUSH
55965: CALL_OW 255
55969: PUSH
55970: LD_VAR 0 1
55974: EQUAL
55975: IFFALSE 55991
// begin result := un ;
55977: LD_ADDR_VAR 0 3
55981: PUSH
55982: LD_VAR 0 5
55986: ST_TO_ADDR
// exit ;
55987: POP
55988: POP
55989: GO 55995
// end ; end ;
55991: GO 55942
55993: POP
55994: POP
// end ;
55995: LD_VAR 0 3
55999: RET
// export function GetCargoBay ( units ) ; begin
56000: LD_INT 0
56002: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56003: LD_ADDR_VAR 0 2
56007: PUSH
56008: LD_VAR 0 1
56012: PPUSH
56013: LD_INT 2
56015: PUSH
56016: LD_INT 34
56018: PUSH
56019: LD_INT 12
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 34
56028: PUSH
56029: LD_INT 51
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 34
56038: PUSH
56039: LD_INT 32
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 34
56048: PUSH
56049: LD_INT 89
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: PPUSH
56063: CALL_OW 72
56067: ST_TO_ADDR
// end ;
56068: LD_VAR 0 2
56072: RET
// export function Negate ( value ) ; begin
56073: LD_INT 0
56075: PPUSH
// result := not value ;
56076: LD_ADDR_VAR 0 2
56080: PUSH
56081: LD_VAR 0 1
56085: NOT
56086: ST_TO_ADDR
// end ;
56087: LD_VAR 0 2
56091: RET
// export function Inc ( value ) ; begin
56092: LD_INT 0
56094: PPUSH
// result := value + 1 ;
56095: LD_ADDR_VAR 0 2
56099: PUSH
56100: LD_VAR 0 1
56104: PUSH
56105: LD_INT 1
56107: PLUS
56108: ST_TO_ADDR
// end ;
56109: LD_VAR 0 2
56113: RET
// export function Dec ( value ) ; begin
56114: LD_INT 0
56116: PPUSH
// result := value - 1 ;
56117: LD_ADDR_VAR 0 2
56121: PUSH
56122: LD_VAR 0 1
56126: PUSH
56127: LD_INT 1
56129: MINUS
56130: ST_TO_ADDR
// end ;
56131: LD_VAR 0 2
56135: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56136: LD_INT 0
56138: PPUSH
56139: PPUSH
56140: PPUSH
56141: PPUSH
56142: PPUSH
56143: PPUSH
56144: PPUSH
56145: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56146: LD_VAR 0 1
56150: PPUSH
56151: LD_VAR 0 2
56155: PPUSH
56156: CALL_OW 488
56160: NOT
56161: PUSH
56162: LD_VAR 0 3
56166: PPUSH
56167: LD_VAR 0 4
56171: PPUSH
56172: CALL_OW 488
56176: NOT
56177: OR
56178: IFFALSE 56191
// begin result := - 1 ;
56180: LD_ADDR_VAR 0 5
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: ST_TO_ADDR
// exit ;
56189: GO 56426
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56191: LD_ADDR_VAR 0 12
56195: PUSH
56196: LD_VAR 0 1
56200: PPUSH
56201: LD_VAR 0 2
56205: PPUSH
56206: LD_VAR 0 3
56210: PPUSH
56211: LD_VAR 0 4
56215: PPUSH
56216: CALL 55276 0 4
56220: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56221: LD_ADDR_VAR 0 11
56225: PUSH
56226: LD_VAR 0 1
56230: PPUSH
56231: LD_VAR 0 2
56235: PPUSH
56236: LD_VAR 0 12
56240: PUSH
56241: LD_INT 1
56243: ARRAY
56244: PPUSH
56245: LD_VAR 0 12
56249: PUSH
56250: LD_INT 2
56252: ARRAY
56253: PPUSH
56254: CALL_OW 298
56258: ST_TO_ADDR
// distance := 9999 ;
56259: LD_ADDR_VAR 0 10
56263: PUSH
56264: LD_INT 9999
56266: ST_TO_ADDR
// for i := 0 to 5 do
56267: LD_ADDR_VAR 0 6
56271: PUSH
56272: DOUBLE
56273: LD_INT 0
56275: DEC
56276: ST_TO_ADDR
56277: LD_INT 5
56279: PUSH
56280: FOR_TO
56281: IFFALSE 56424
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56283: LD_ADDR_VAR 0 7
56287: PUSH
56288: LD_VAR 0 1
56292: PPUSH
56293: LD_VAR 0 6
56297: PPUSH
56298: LD_VAR 0 11
56302: PPUSH
56303: CALL_OW 272
56307: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56308: LD_ADDR_VAR 0 8
56312: PUSH
56313: LD_VAR 0 2
56317: PPUSH
56318: LD_VAR 0 6
56322: PPUSH
56323: LD_VAR 0 11
56327: PPUSH
56328: CALL_OW 273
56332: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56333: LD_VAR 0 7
56337: PPUSH
56338: LD_VAR 0 8
56342: PPUSH
56343: CALL_OW 488
56347: NOT
56348: IFFALSE 56352
// continue ;
56350: GO 56280
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56352: LD_ADDR_VAR 0 9
56356: PUSH
56357: LD_VAR 0 12
56361: PUSH
56362: LD_INT 1
56364: ARRAY
56365: PPUSH
56366: LD_VAR 0 12
56370: PUSH
56371: LD_INT 2
56373: ARRAY
56374: PPUSH
56375: LD_VAR 0 7
56379: PPUSH
56380: LD_VAR 0 8
56384: PPUSH
56385: CALL_OW 298
56389: ST_TO_ADDR
// if tmp < distance then
56390: LD_VAR 0 9
56394: PUSH
56395: LD_VAR 0 10
56399: LESS
56400: IFFALSE 56422
// begin result := i ;
56402: LD_ADDR_VAR 0 5
56406: PUSH
56407: LD_VAR 0 6
56411: ST_TO_ADDR
// distance := tmp ;
56412: LD_ADDR_VAR 0 10
56416: PUSH
56417: LD_VAR 0 9
56421: ST_TO_ADDR
// end ; end ;
56422: GO 56280
56424: POP
56425: POP
// end ;
56426: LD_VAR 0 5
56430: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56431: LD_INT 0
56433: PPUSH
56434: PPUSH
// if not driver or not IsInUnit ( driver ) then
56435: LD_VAR 0 1
56439: NOT
56440: PUSH
56441: LD_VAR 0 1
56445: PPUSH
56446: CALL_OW 310
56450: NOT
56451: OR
56452: IFFALSE 56456
// exit ;
56454: GO 56546
// vehicle := IsInUnit ( driver ) ;
56456: LD_ADDR_VAR 0 3
56460: PUSH
56461: LD_VAR 0 1
56465: PPUSH
56466: CALL_OW 310
56470: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56471: LD_VAR 0 1
56475: PPUSH
56476: LD_STRING \
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: PUSH
56506: LD_STRING E
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_VAR 0 3
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PPUSH
56542: CALL_OW 446
// end ;
56546: LD_VAR 0 2
56550: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56551: LD_INT 0
56553: PPUSH
56554: PPUSH
// if not driver or not IsInUnit ( driver ) then
56555: LD_VAR 0 1
56559: NOT
56560: PUSH
56561: LD_VAR 0 1
56565: PPUSH
56566: CALL_OW 310
56570: NOT
56571: OR
56572: IFFALSE 56576
// exit ;
56574: GO 56666
// vehicle := IsInUnit ( driver ) ;
56576: LD_ADDR_VAR 0 3
56580: PUSH
56581: LD_VAR 0 1
56585: PPUSH
56586: CALL_OW 310
56590: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56591: LD_VAR 0 1
56595: PPUSH
56596: LD_STRING \
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: PUSH
56626: LD_STRING E
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_VAR 0 3
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PPUSH
56662: CALL_OW 447
// end ;
56666: LD_VAR 0 2
56670: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56671: LD_INT 0
56673: PPUSH
56674: PPUSH
56675: PPUSH
// tmp := [ ] ;
56676: LD_ADDR_VAR 0 5
56680: PUSH
56681: EMPTY
56682: ST_TO_ADDR
// for i in units do
56683: LD_ADDR_VAR 0 4
56687: PUSH
56688: LD_VAR 0 1
56692: PUSH
56693: FOR_IN
56694: IFFALSE 56732
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56696: LD_ADDR_VAR 0 5
56700: PUSH
56701: LD_VAR 0 5
56705: PPUSH
56706: LD_VAR 0 5
56710: PUSH
56711: LD_INT 1
56713: PLUS
56714: PPUSH
56715: LD_VAR 0 4
56719: PPUSH
56720: CALL_OW 256
56724: PPUSH
56725: CALL_OW 2
56729: ST_TO_ADDR
56730: GO 56693
56732: POP
56733: POP
// if not tmp then
56734: LD_VAR 0 5
56738: NOT
56739: IFFALSE 56743
// exit ;
56741: GO 56791
// if asc then
56743: LD_VAR 0 2
56747: IFFALSE 56771
// result := SortListByListAsc ( units , tmp ) else
56749: LD_ADDR_VAR 0 3
56753: PUSH
56754: LD_VAR 0 1
56758: PPUSH
56759: LD_VAR 0 5
56763: PPUSH
56764: CALL_OW 76
56768: ST_TO_ADDR
56769: GO 56791
// result := SortListByListDesc ( units , tmp ) ;
56771: LD_ADDR_VAR 0 3
56775: PUSH
56776: LD_VAR 0 1
56780: PPUSH
56781: LD_VAR 0 5
56785: PPUSH
56786: CALL_OW 77
56790: ST_TO_ADDR
// end ;
56791: LD_VAR 0 3
56795: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56796: LD_INT 0
56798: PPUSH
56799: PPUSH
// task := GetTaskList ( mech ) ;
56800: LD_ADDR_VAR 0 4
56804: PUSH
56805: LD_VAR 0 1
56809: PPUSH
56810: CALL_OW 437
56814: ST_TO_ADDR
// if not task then
56815: LD_VAR 0 4
56819: NOT
56820: IFFALSE 56824
// exit ;
56822: GO 56866
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56824: LD_ADDR_VAR 0 3
56828: PUSH
56829: LD_VAR 0 4
56833: PUSH
56834: LD_INT 1
56836: ARRAY
56837: PUSH
56838: LD_INT 1
56840: ARRAY
56841: PUSH
56842: LD_STRING r
56844: EQUAL
56845: PUSH
56846: LD_VAR 0 4
56850: PUSH
56851: LD_INT 1
56853: ARRAY
56854: PUSH
56855: LD_INT 4
56857: ARRAY
56858: PUSH
56859: LD_VAR 0 2
56863: EQUAL
56864: AND
56865: ST_TO_ADDR
// end ;
56866: LD_VAR 0 3
56870: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56871: LD_INT 0
56873: PPUSH
// SetDir ( unit , d ) ;
56874: LD_VAR 0 1
56878: PPUSH
56879: LD_VAR 0 4
56883: PPUSH
56884: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56888: LD_VAR 0 1
56892: PPUSH
56893: LD_VAR 0 2
56897: PPUSH
56898: LD_VAR 0 3
56902: PPUSH
56903: LD_VAR 0 5
56907: PPUSH
56908: CALL_OW 48
// end ;
56912: LD_VAR 0 6
56916: RET
// export function ToNaturalNumber ( number ) ; begin
56917: LD_INT 0
56919: PPUSH
// result := number div 1 ;
56920: LD_ADDR_VAR 0 2
56924: PUSH
56925: LD_VAR 0 1
56929: PUSH
56930: LD_INT 1
56932: DIV
56933: ST_TO_ADDR
// if number < 0 then
56934: LD_VAR 0 1
56938: PUSH
56939: LD_INT 0
56941: LESS
56942: IFFALSE 56952
// result := 0 ;
56944: LD_ADDR_VAR 0 2
56948: PUSH
56949: LD_INT 0
56951: ST_TO_ADDR
// end ;
56952: LD_VAR 0 2
56956: RET
// export function SortByClass ( units , class ) ; var un ; begin
56957: LD_INT 0
56959: PPUSH
56960: PPUSH
// if not units or not class then
56961: LD_VAR 0 1
56965: NOT
56966: PUSH
56967: LD_VAR 0 2
56971: NOT
56972: OR
56973: IFFALSE 56977
// exit ;
56975: GO 57072
// result := [ ] ;
56977: LD_ADDR_VAR 0 3
56981: PUSH
56982: EMPTY
56983: ST_TO_ADDR
// for un in units do
56984: LD_ADDR_VAR 0 4
56988: PUSH
56989: LD_VAR 0 1
56993: PUSH
56994: FOR_IN
56995: IFFALSE 57070
// if GetClass ( un ) = class then
56997: LD_VAR 0 4
57001: PPUSH
57002: CALL_OW 257
57006: PUSH
57007: LD_VAR 0 2
57011: EQUAL
57012: IFFALSE 57039
// result := Insert ( result , 1 , un ) else
57014: LD_ADDR_VAR 0 3
57018: PUSH
57019: LD_VAR 0 3
57023: PPUSH
57024: LD_INT 1
57026: PPUSH
57027: LD_VAR 0 4
57031: PPUSH
57032: CALL_OW 2
57036: ST_TO_ADDR
57037: GO 57068
// result := Replace ( result , result + 1 , un ) ;
57039: LD_ADDR_VAR 0 3
57043: PUSH
57044: LD_VAR 0 3
57048: PPUSH
57049: LD_VAR 0 3
57053: PUSH
57054: LD_INT 1
57056: PLUS
57057: PPUSH
57058: LD_VAR 0 4
57062: PPUSH
57063: CALL_OW 1
57067: ST_TO_ADDR
57068: GO 56994
57070: POP
57071: POP
// end ;
57072: LD_VAR 0 3
57076: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57077: LD_INT 0
57079: PPUSH
57080: PPUSH
57081: PPUSH
57082: PPUSH
57083: PPUSH
57084: PPUSH
57085: PPUSH
// result := [ ] ;
57086: LD_ADDR_VAR 0 4
57090: PUSH
57091: EMPTY
57092: ST_TO_ADDR
// if x - r < 0 then
57093: LD_VAR 0 1
57097: PUSH
57098: LD_VAR 0 3
57102: MINUS
57103: PUSH
57104: LD_INT 0
57106: LESS
57107: IFFALSE 57119
// min_x := 0 else
57109: LD_ADDR_VAR 0 8
57113: PUSH
57114: LD_INT 0
57116: ST_TO_ADDR
57117: GO 57135
// min_x := x - r ;
57119: LD_ADDR_VAR 0 8
57123: PUSH
57124: LD_VAR 0 1
57128: PUSH
57129: LD_VAR 0 3
57133: MINUS
57134: ST_TO_ADDR
// if y - r < 0 then
57135: LD_VAR 0 2
57139: PUSH
57140: LD_VAR 0 3
57144: MINUS
57145: PUSH
57146: LD_INT 0
57148: LESS
57149: IFFALSE 57161
// min_y := 0 else
57151: LD_ADDR_VAR 0 7
57155: PUSH
57156: LD_INT 0
57158: ST_TO_ADDR
57159: GO 57177
// min_y := y - r ;
57161: LD_ADDR_VAR 0 7
57165: PUSH
57166: LD_VAR 0 2
57170: PUSH
57171: LD_VAR 0 3
57175: MINUS
57176: ST_TO_ADDR
// max_x := x + r ;
57177: LD_ADDR_VAR 0 9
57181: PUSH
57182: LD_VAR 0 1
57186: PUSH
57187: LD_VAR 0 3
57191: PLUS
57192: ST_TO_ADDR
// max_y := y + r ;
57193: LD_ADDR_VAR 0 10
57197: PUSH
57198: LD_VAR 0 2
57202: PUSH
57203: LD_VAR 0 3
57207: PLUS
57208: ST_TO_ADDR
// for _x = min_x to max_x do
57209: LD_ADDR_VAR 0 5
57213: PUSH
57214: DOUBLE
57215: LD_VAR 0 8
57219: DEC
57220: ST_TO_ADDR
57221: LD_VAR 0 9
57225: PUSH
57226: FOR_TO
57227: IFFALSE 57328
// for _y = min_y to max_y do
57229: LD_ADDR_VAR 0 6
57233: PUSH
57234: DOUBLE
57235: LD_VAR 0 7
57239: DEC
57240: ST_TO_ADDR
57241: LD_VAR 0 10
57245: PUSH
57246: FOR_TO
57247: IFFALSE 57324
// begin if not ValidHex ( _x , _y ) then
57249: LD_VAR 0 5
57253: PPUSH
57254: LD_VAR 0 6
57258: PPUSH
57259: CALL_OW 488
57263: NOT
57264: IFFALSE 57268
// continue ;
57266: GO 57246
// if GetResourceTypeXY ( _x , _y ) then
57268: LD_VAR 0 5
57272: PPUSH
57273: LD_VAR 0 6
57277: PPUSH
57278: CALL_OW 283
57282: IFFALSE 57322
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57284: LD_ADDR_VAR 0 4
57288: PUSH
57289: LD_VAR 0 4
57293: PPUSH
57294: LD_VAR 0 4
57298: PUSH
57299: LD_INT 1
57301: PLUS
57302: PPUSH
57303: LD_VAR 0 5
57307: PUSH
57308: LD_VAR 0 6
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PPUSH
57317: CALL_OW 1
57321: ST_TO_ADDR
// end ;
57322: GO 57246
57324: POP
57325: POP
57326: GO 57226
57328: POP
57329: POP
// end ;
57330: LD_VAR 0 4
57334: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57335: LD_INT 0
57337: PPUSH
57338: PPUSH
57339: PPUSH
57340: PPUSH
57341: PPUSH
57342: PPUSH
57343: PPUSH
57344: PPUSH
// if not units then
57345: LD_VAR 0 1
57349: NOT
57350: IFFALSE 57354
// exit ;
57352: GO 57882
// result := UnitFilter ( units , [ f_ok ] ) ;
57354: LD_ADDR_VAR 0 3
57358: PUSH
57359: LD_VAR 0 1
57363: PPUSH
57364: LD_INT 50
57366: PUSH
57367: EMPTY
57368: LIST
57369: PPUSH
57370: CALL_OW 72
57374: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57375: LD_ADDR_VAR 0 8
57379: PUSH
57380: LD_VAR 0 1
57384: PUSH
57385: LD_INT 1
57387: ARRAY
57388: PPUSH
57389: CALL_OW 255
57393: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57394: LD_ADDR_VAR 0 10
57398: PUSH
57399: LD_INT 29
57401: PUSH
57402: LD_INT 91
57404: PUSH
57405: LD_INT 49
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: ST_TO_ADDR
// if not result then
57413: LD_VAR 0 3
57417: NOT
57418: IFFALSE 57422
// exit ;
57420: GO 57882
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57422: LD_ADDR_VAR 0 5
57426: PUSH
57427: LD_INT 81
57429: PUSH
57430: LD_VAR 0 8
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PPUSH
57439: CALL_OW 69
57443: ST_TO_ADDR
// for i in result do
57444: LD_ADDR_VAR 0 4
57448: PUSH
57449: LD_VAR 0 3
57453: PUSH
57454: FOR_IN
57455: IFFALSE 57880
// begin tag := GetTag ( i ) + 1 ;
57457: LD_ADDR_VAR 0 9
57461: PUSH
57462: LD_VAR 0 4
57466: PPUSH
57467: CALL_OW 110
57471: PUSH
57472: LD_INT 1
57474: PLUS
57475: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57476: LD_ADDR_VAR 0 7
57480: PUSH
57481: LD_VAR 0 4
57485: PPUSH
57486: CALL_OW 250
57490: PPUSH
57491: LD_VAR 0 4
57495: PPUSH
57496: CALL_OW 251
57500: PPUSH
57501: LD_INT 4
57503: PPUSH
57504: CALL 57077 0 3
57508: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57509: LD_VAR 0 4
57513: PPUSH
57514: CALL_OW 247
57518: PUSH
57519: LD_INT 2
57521: EQUAL
57522: PUSH
57523: LD_VAR 0 7
57527: PUSH
57528: LD_INT 2
57530: GREATER
57531: AND
57532: PUSH
57533: LD_VAR 0 4
57537: PPUSH
57538: CALL_OW 264
57542: PUSH
57543: LD_VAR 0 10
57547: IN
57548: NOT
57549: AND
57550: IFFALSE 57589
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57552: LD_VAR 0 4
57556: PPUSH
57557: LD_VAR 0 7
57561: PUSH
57562: LD_INT 1
57564: ARRAY
57565: PUSH
57566: LD_INT 1
57568: ARRAY
57569: PPUSH
57570: LD_VAR 0 7
57574: PUSH
57575: LD_INT 1
57577: ARRAY
57578: PUSH
57579: LD_INT 2
57581: ARRAY
57582: PPUSH
57583: CALL_OW 116
57587: GO 57878
// if path > tag then
57589: LD_VAR 0 2
57593: PUSH
57594: LD_VAR 0 9
57598: GREATER
57599: IFFALSE 57807
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57601: LD_ADDR_VAR 0 6
57605: PUSH
57606: LD_VAR 0 5
57610: PPUSH
57611: LD_INT 91
57613: PUSH
57614: LD_VAR 0 4
57618: PUSH
57619: LD_INT 8
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: LIST
57626: PPUSH
57627: CALL_OW 72
57631: ST_TO_ADDR
// if nearEnemy then
57632: LD_VAR 0 6
57636: IFFALSE 57705
// begin if GetWeapon ( i ) = ru_time_lapser then
57638: LD_VAR 0 4
57642: PPUSH
57643: CALL_OW 264
57647: PUSH
57648: LD_INT 49
57650: EQUAL
57651: IFFALSE 57679
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57653: LD_VAR 0 4
57657: PPUSH
57658: LD_VAR 0 6
57662: PPUSH
57663: LD_VAR 0 4
57667: PPUSH
57668: CALL_OW 74
57672: PPUSH
57673: CALL_OW 112
57677: GO 57703
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57679: LD_VAR 0 4
57683: PPUSH
57684: LD_VAR 0 6
57688: PPUSH
57689: LD_VAR 0 4
57693: PPUSH
57694: CALL_OW 74
57698: PPUSH
57699: CALL 58953 0 2
// end else
57703: GO 57805
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57705: LD_VAR 0 4
57709: PPUSH
57710: LD_VAR 0 2
57714: PUSH
57715: LD_VAR 0 9
57719: ARRAY
57720: PUSH
57721: LD_INT 1
57723: ARRAY
57724: PPUSH
57725: LD_VAR 0 2
57729: PUSH
57730: LD_VAR 0 9
57734: ARRAY
57735: PUSH
57736: LD_INT 2
57738: ARRAY
57739: PPUSH
57740: CALL_OW 297
57744: PUSH
57745: LD_INT 6
57747: GREATER
57748: IFFALSE 57791
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57750: LD_VAR 0 4
57754: PPUSH
57755: LD_VAR 0 2
57759: PUSH
57760: LD_VAR 0 9
57764: ARRAY
57765: PUSH
57766: LD_INT 1
57768: ARRAY
57769: PPUSH
57770: LD_VAR 0 2
57774: PUSH
57775: LD_VAR 0 9
57779: ARRAY
57780: PUSH
57781: LD_INT 2
57783: ARRAY
57784: PPUSH
57785: CALL_OW 114
57789: GO 57805
// SetTag ( i , tag ) ;
57791: LD_VAR 0 4
57795: PPUSH
57796: LD_VAR 0 9
57800: PPUSH
57801: CALL_OW 109
// end else
57805: GO 57878
// if enemy then
57807: LD_VAR 0 5
57811: IFFALSE 57878
// begin if GetWeapon ( i ) = ru_time_lapser then
57813: LD_VAR 0 4
57817: PPUSH
57818: CALL_OW 264
57822: PUSH
57823: LD_INT 49
57825: EQUAL
57826: IFFALSE 57854
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57828: LD_VAR 0 4
57832: PPUSH
57833: LD_VAR 0 5
57837: PPUSH
57838: LD_VAR 0 4
57842: PPUSH
57843: CALL_OW 74
57847: PPUSH
57848: CALL_OW 112
57852: GO 57878
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57854: LD_VAR 0 4
57858: PPUSH
57859: LD_VAR 0 5
57863: PPUSH
57864: LD_VAR 0 4
57868: PPUSH
57869: CALL_OW 74
57873: PPUSH
57874: CALL 58953 0 2
// end ; end ;
57878: GO 57454
57880: POP
57881: POP
// end ;
57882: LD_VAR 0 3
57886: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57887: LD_INT 0
57889: PPUSH
57890: PPUSH
57891: PPUSH
// if not unit or IsInUnit ( unit ) then
57892: LD_VAR 0 1
57896: NOT
57897: PUSH
57898: LD_VAR 0 1
57902: PPUSH
57903: CALL_OW 310
57907: OR
57908: IFFALSE 57912
// exit ;
57910: GO 58003
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57912: LD_ADDR_VAR 0 4
57916: PUSH
57917: LD_VAR 0 1
57921: PPUSH
57922: CALL_OW 250
57926: PPUSH
57927: LD_VAR 0 2
57931: PPUSH
57932: LD_INT 1
57934: PPUSH
57935: CALL_OW 272
57939: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57940: LD_ADDR_VAR 0 5
57944: PUSH
57945: LD_VAR 0 1
57949: PPUSH
57950: CALL_OW 251
57954: PPUSH
57955: LD_VAR 0 2
57959: PPUSH
57960: LD_INT 1
57962: PPUSH
57963: CALL_OW 273
57967: ST_TO_ADDR
// if ValidHex ( x , y ) then
57968: LD_VAR 0 4
57972: PPUSH
57973: LD_VAR 0 5
57977: PPUSH
57978: CALL_OW 488
57982: IFFALSE 58003
// ComTurnXY ( unit , x , y ) ;
57984: LD_VAR 0 1
57988: PPUSH
57989: LD_VAR 0 4
57993: PPUSH
57994: LD_VAR 0 5
57998: PPUSH
57999: CALL_OW 118
// end ;
58003: LD_VAR 0 3
58007: RET
// export function SeeUnits ( side , units ) ; var i ; begin
58008: LD_INT 0
58010: PPUSH
58011: PPUSH
// result := false ;
58012: LD_ADDR_VAR 0 3
58016: PUSH
58017: LD_INT 0
58019: ST_TO_ADDR
// if not units then
58020: LD_VAR 0 2
58024: NOT
58025: IFFALSE 58029
// exit ;
58027: GO 58074
// for i in units do
58029: LD_ADDR_VAR 0 4
58033: PUSH
58034: LD_VAR 0 2
58038: PUSH
58039: FOR_IN
58040: IFFALSE 58072
// if See ( side , i ) then
58042: LD_VAR 0 1
58046: PPUSH
58047: LD_VAR 0 4
58051: PPUSH
58052: CALL_OW 292
58056: IFFALSE 58070
// begin result := true ;
58058: LD_ADDR_VAR 0 3
58062: PUSH
58063: LD_INT 1
58065: ST_TO_ADDR
// exit ;
58066: POP
58067: POP
58068: GO 58074
// end ;
58070: GO 58039
58072: POP
58073: POP
// end ;
58074: LD_VAR 0 3
58078: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58079: LD_INT 0
58081: PPUSH
58082: PPUSH
58083: PPUSH
58084: PPUSH
// if not unit or not points then
58085: LD_VAR 0 1
58089: NOT
58090: PUSH
58091: LD_VAR 0 2
58095: NOT
58096: OR
58097: IFFALSE 58101
// exit ;
58099: GO 58191
// dist := 99999 ;
58101: LD_ADDR_VAR 0 5
58105: PUSH
58106: LD_INT 99999
58108: ST_TO_ADDR
// for i in points do
58109: LD_ADDR_VAR 0 4
58113: PUSH
58114: LD_VAR 0 2
58118: PUSH
58119: FOR_IN
58120: IFFALSE 58189
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58122: LD_ADDR_VAR 0 6
58126: PUSH
58127: LD_VAR 0 1
58131: PPUSH
58132: LD_VAR 0 4
58136: PUSH
58137: LD_INT 1
58139: ARRAY
58140: PPUSH
58141: LD_VAR 0 4
58145: PUSH
58146: LD_INT 2
58148: ARRAY
58149: PPUSH
58150: CALL_OW 297
58154: ST_TO_ADDR
// if tmpDist < dist then
58155: LD_VAR 0 6
58159: PUSH
58160: LD_VAR 0 5
58164: LESS
58165: IFFALSE 58187
// begin result := i ;
58167: LD_ADDR_VAR 0 3
58171: PUSH
58172: LD_VAR 0 4
58176: ST_TO_ADDR
// dist := tmpDist ;
58177: LD_ADDR_VAR 0 5
58181: PUSH
58182: LD_VAR 0 6
58186: ST_TO_ADDR
// end ; end ;
58187: GO 58119
58189: POP
58190: POP
// end ;
58191: LD_VAR 0 3
58195: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58196: LD_INT 0
58198: PPUSH
// uc_side := side ;
58199: LD_ADDR_OWVAR 20
58203: PUSH
58204: LD_VAR 0 1
58208: ST_TO_ADDR
// uc_nation := 3 ;
58209: LD_ADDR_OWVAR 21
58213: PUSH
58214: LD_INT 3
58216: ST_TO_ADDR
// vc_chassis := 25 ;
58217: LD_ADDR_OWVAR 37
58221: PUSH
58222: LD_INT 25
58224: ST_TO_ADDR
// vc_engine := engine_siberite ;
58225: LD_ADDR_OWVAR 39
58229: PUSH
58230: LD_INT 3
58232: ST_TO_ADDR
// vc_control := control_computer ;
58233: LD_ADDR_OWVAR 38
58237: PUSH
58238: LD_INT 3
58240: ST_TO_ADDR
// vc_weapon := 59 ;
58241: LD_ADDR_OWVAR 40
58245: PUSH
58246: LD_INT 59
58248: ST_TO_ADDR
// result := CreateVehicle ;
58249: LD_ADDR_VAR 0 5
58253: PUSH
58254: CALL_OW 45
58258: ST_TO_ADDR
// SetDir ( result , d ) ;
58259: LD_VAR 0 5
58263: PPUSH
58264: LD_VAR 0 4
58268: PPUSH
58269: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58273: LD_VAR 0 5
58277: PPUSH
58278: LD_VAR 0 2
58282: PPUSH
58283: LD_VAR 0 3
58287: PPUSH
58288: LD_INT 0
58290: PPUSH
58291: CALL_OW 48
// end ;
58295: LD_VAR 0 5
58299: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58300: LD_INT 0
58302: PPUSH
58303: PPUSH
58304: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58305: LD_ADDR_VAR 0 2
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58328: LD_VAR 0 1
58332: NOT
58333: PUSH
58334: LD_VAR 0 1
58338: PPUSH
58339: CALL_OW 264
58343: PUSH
58344: LD_INT 12
58346: PUSH
58347: LD_INT 51
58349: PUSH
58350: LD_INT 32
58352: PUSH
58353: LD_INT 89
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: IN
58362: NOT
58363: OR
58364: IFFALSE 58368
// exit ;
58366: GO 58466
// for i := 1 to 3 do
58368: LD_ADDR_VAR 0 3
58372: PUSH
58373: DOUBLE
58374: LD_INT 1
58376: DEC
58377: ST_TO_ADDR
58378: LD_INT 3
58380: PUSH
58381: FOR_TO
58382: IFFALSE 58464
// begin tmp := GetCargo ( cargo , i ) ;
58384: LD_ADDR_VAR 0 4
58388: PUSH
58389: LD_VAR 0 1
58393: PPUSH
58394: LD_VAR 0 3
58398: PPUSH
58399: CALL_OW 289
58403: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58404: LD_ADDR_VAR 0 2
58408: PUSH
58409: LD_VAR 0 2
58413: PPUSH
58414: LD_VAR 0 3
58418: PPUSH
58419: LD_VAR 0 4
58423: PPUSH
58424: CALL_OW 1
58428: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58429: LD_ADDR_VAR 0 2
58433: PUSH
58434: LD_VAR 0 2
58438: PPUSH
58439: LD_INT 4
58441: PPUSH
58442: LD_VAR 0 2
58446: PUSH
58447: LD_INT 4
58449: ARRAY
58450: PUSH
58451: LD_VAR 0 4
58455: PLUS
58456: PPUSH
58457: CALL_OW 1
58461: ST_TO_ADDR
// end ;
58462: GO 58381
58464: POP
58465: POP
// end ;
58466: LD_VAR 0 2
58470: RET
// export function Length ( array ) ; begin
58471: LD_INT 0
58473: PPUSH
// result := array + 0 ;
58474: LD_ADDR_VAR 0 2
58478: PUSH
58479: LD_VAR 0 1
58483: PUSH
58484: LD_INT 0
58486: PLUS
58487: ST_TO_ADDR
// end ;
58488: LD_VAR 0 2
58492: RET
// export function PrepareArray ( array ) ; begin
58493: LD_INT 0
58495: PPUSH
// result := array diff 0 ;
58496: LD_ADDR_VAR 0 2
58500: PUSH
58501: LD_VAR 0 1
58505: PUSH
58506: LD_INT 0
58508: DIFF
58509: ST_TO_ADDR
// if not result [ 1 ] then
58510: LD_VAR 0 2
58514: PUSH
58515: LD_INT 1
58517: ARRAY
58518: NOT
58519: IFFALSE 58539
// result := Delete ( result , 1 ) ;
58521: LD_ADDR_VAR 0 2
58525: PUSH
58526: LD_VAR 0 2
58530: PPUSH
58531: LD_INT 1
58533: PPUSH
58534: CALL_OW 3
58538: ST_TO_ADDR
// end ;
58539: LD_VAR 0 2
58543: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58544: LD_INT 0
58546: PPUSH
58547: PPUSH
58548: PPUSH
58549: PPUSH
// sibRocketRange := 25 ;
58550: LD_ADDR_VAR 0 6
58554: PUSH
58555: LD_INT 25
58557: ST_TO_ADDR
// result := false ;
58558: LD_ADDR_VAR 0 4
58562: PUSH
58563: LD_INT 0
58565: ST_TO_ADDR
// for i := 0 to 5 do
58566: LD_ADDR_VAR 0 5
58570: PUSH
58571: DOUBLE
58572: LD_INT 0
58574: DEC
58575: ST_TO_ADDR
58576: LD_INT 5
58578: PUSH
58579: FOR_TO
58580: IFFALSE 58647
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58582: LD_VAR 0 1
58586: PPUSH
58587: LD_VAR 0 5
58591: PPUSH
58592: LD_VAR 0 6
58596: PPUSH
58597: CALL_OW 272
58601: PPUSH
58602: LD_VAR 0 2
58606: PPUSH
58607: LD_VAR 0 5
58611: PPUSH
58612: LD_VAR 0 6
58616: PPUSH
58617: CALL_OW 273
58621: PPUSH
58622: LD_VAR 0 3
58626: PPUSH
58627: CALL_OW 309
58631: IFFALSE 58645
// begin result := true ;
58633: LD_ADDR_VAR 0 4
58637: PUSH
58638: LD_INT 1
58640: ST_TO_ADDR
// exit ;
58641: POP
58642: POP
58643: GO 58649
// end ;
58645: GO 58579
58647: POP
58648: POP
// end ;
58649: LD_VAR 0 4
58653: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58654: LD_INT 0
58656: PPUSH
58657: PPUSH
58658: PPUSH
// if btype = b_depot then
58659: LD_VAR 0 2
58663: PUSH
58664: LD_INT 0
58666: EQUAL
58667: IFFALSE 58679
// begin result := true ;
58669: LD_ADDR_VAR 0 3
58673: PUSH
58674: LD_INT 1
58676: ST_TO_ADDR
// exit ;
58677: GO 58795
// end ; pom := GetBase ( depot ) ;
58679: LD_ADDR_VAR 0 4
58683: PUSH
58684: LD_VAR 0 1
58688: PPUSH
58689: CALL_OW 274
58693: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58694: LD_ADDR_VAR 0 5
58698: PUSH
58699: LD_VAR 0 2
58703: PPUSH
58704: LD_VAR 0 1
58708: PPUSH
58709: CALL_OW 248
58713: PPUSH
58714: CALL_OW 450
58718: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58719: LD_ADDR_VAR 0 3
58723: PUSH
58724: LD_VAR 0 4
58728: PPUSH
58729: LD_INT 1
58731: PPUSH
58732: CALL_OW 275
58736: PUSH
58737: LD_VAR 0 5
58741: PUSH
58742: LD_INT 1
58744: ARRAY
58745: GREATEREQUAL
58746: PUSH
58747: LD_VAR 0 4
58751: PPUSH
58752: LD_INT 2
58754: PPUSH
58755: CALL_OW 275
58759: PUSH
58760: LD_VAR 0 5
58764: PUSH
58765: LD_INT 2
58767: ARRAY
58768: GREATEREQUAL
58769: AND
58770: PUSH
58771: LD_VAR 0 4
58775: PPUSH
58776: LD_INT 3
58778: PPUSH
58779: CALL_OW 275
58783: PUSH
58784: LD_VAR 0 5
58788: PUSH
58789: LD_INT 3
58791: ARRAY
58792: GREATEREQUAL
58793: AND
58794: ST_TO_ADDR
// end ;
58795: LD_VAR 0 3
58799: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58800: LD_INT 0
58802: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58803: LD_VAR 0 1
58807: PPUSH
58808: LD_VAR 0 2
58812: PPUSH
58813: LD_INT 0
58815: PPUSH
58816: LD_INT 0
58818: PPUSH
58819: LD_INT 1
58821: PPUSH
58822: LD_INT 0
58824: PPUSH
58825: CALL_OW 587
// end ;
58829: LD_VAR 0 3
58833: RET
// export function CenterOnNow ( unit ) ; begin
58834: LD_INT 0
58836: PPUSH
// result := IsInUnit ( unit ) ;
58837: LD_ADDR_VAR 0 2
58841: PUSH
58842: LD_VAR 0 1
58846: PPUSH
58847: CALL_OW 310
58851: ST_TO_ADDR
// if not result then
58852: LD_VAR 0 2
58856: NOT
58857: IFFALSE 58869
// result := unit ;
58859: LD_ADDR_VAR 0 2
58863: PUSH
58864: LD_VAR 0 1
58868: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58869: LD_VAR 0 1
58873: PPUSH
58874: CALL_OW 87
// end ;
58878: LD_VAR 0 2
58882: RET
// export function ComMoveHex ( unit , hex ) ; begin
58883: LD_INT 0
58885: PPUSH
// if not hex then
58886: LD_VAR 0 2
58890: NOT
58891: IFFALSE 58895
// exit ;
58893: GO 58948
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58895: LD_VAR 0 2
58899: PUSH
58900: LD_INT 1
58902: ARRAY
58903: PPUSH
58904: LD_VAR 0 2
58908: PUSH
58909: LD_INT 2
58911: ARRAY
58912: PPUSH
58913: CALL_OW 428
58917: IFFALSE 58921
// exit ;
58919: GO 58948
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58921: LD_VAR 0 1
58925: PPUSH
58926: LD_VAR 0 2
58930: PUSH
58931: LD_INT 1
58933: ARRAY
58934: PPUSH
58935: LD_VAR 0 2
58939: PUSH
58940: LD_INT 2
58942: ARRAY
58943: PPUSH
58944: CALL_OW 111
// end ;
58948: LD_VAR 0 3
58952: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58953: LD_INT 0
58955: PPUSH
58956: PPUSH
58957: PPUSH
// if not unit or not enemy then
58958: LD_VAR 0 1
58962: NOT
58963: PUSH
58964: LD_VAR 0 2
58968: NOT
58969: OR
58970: IFFALSE 58974
// exit ;
58972: GO 59098
// x := GetX ( enemy ) ;
58974: LD_ADDR_VAR 0 4
58978: PUSH
58979: LD_VAR 0 2
58983: PPUSH
58984: CALL_OW 250
58988: ST_TO_ADDR
// y := GetY ( enemy ) ;
58989: LD_ADDR_VAR 0 5
58993: PUSH
58994: LD_VAR 0 2
58998: PPUSH
58999: CALL_OW 251
59003: ST_TO_ADDR
// if ValidHex ( x , y ) then
59004: LD_VAR 0 4
59008: PPUSH
59009: LD_VAR 0 5
59013: PPUSH
59014: CALL_OW 488
59018: IFFALSE 59098
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
59020: LD_VAR 0 2
59024: PPUSH
59025: CALL_OW 247
59029: PUSH
59030: LD_INT 3
59032: PUSH
59033: LD_INT 2
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: IN
59040: PUSH
59041: LD_VAR 0 1
59045: PPUSH
59046: CALL_OW 255
59050: PPUSH
59051: LD_VAR 0 2
59055: PPUSH
59056: CALL_OW 292
59060: OR
59061: IFFALSE 59079
// ComAttackUnit ( unit , enemy ) else
59063: LD_VAR 0 1
59067: PPUSH
59068: LD_VAR 0 2
59072: PPUSH
59073: CALL_OW 115
59077: GO 59098
// ComAgressiveMove ( unit , x , y ) ;
59079: LD_VAR 0 1
59083: PPUSH
59084: LD_VAR 0 4
59088: PPUSH
59089: LD_VAR 0 5
59093: PPUSH
59094: CALL_OW 114
// end ;
59098: LD_VAR 0 3
59102: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59103: LD_INT 0
59105: PPUSH
59106: PPUSH
59107: PPUSH
// list := AreaToList ( area , 0 ) ;
59108: LD_ADDR_VAR 0 5
59112: PUSH
59113: LD_VAR 0 1
59117: PPUSH
59118: LD_INT 0
59120: PPUSH
59121: CALL_OW 517
59125: ST_TO_ADDR
// if not list then
59126: LD_VAR 0 5
59130: NOT
59131: IFFALSE 59135
// exit ;
59133: GO 59265
// if all then
59135: LD_VAR 0 2
59139: IFFALSE 59227
// begin for i := 1 to list [ 1 ] do
59141: LD_ADDR_VAR 0 4
59145: PUSH
59146: DOUBLE
59147: LD_INT 1
59149: DEC
59150: ST_TO_ADDR
59151: LD_VAR 0 5
59155: PUSH
59156: LD_INT 1
59158: ARRAY
59159: PUSH
59160: FOR_TO
59161: IFFALSE 59223
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59163: LD_ADDR_VAR 0 3
59167: PUSH
59168: LD_VAR 0 3
59172: PPUSH
59173: LD_VAR 0 3
59177: PUSH
59178: LD_INT 1
59180: PLUS
59181: PPUSH
59182: LD_VAR 0 5
59186: PUSH
59187: LD_INT 1
59189: ARRAY
59190: PUSH
59191: LD_VAR 0 4
59195: ARRAY
59196: PUSH
59197: LD_VAR 0 5
59201: PUSH
59202: LD_INT 2
59204: ARRAY
59205: PUSH
59206: LD_VAR 0 4
59210: ARRAY
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PPUSH
59216: CALL_OW 1
59220: ST_TO_ADDR
59221: GO 59160
59223: POP
59224: POP
// exit ;
59225: GO 59265
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59227: LD_ADDR_VAR 0 3
59231: PUSH
59232: LD_VAR 0 5
59236: PUSH
59237: LD_INT 1
59239: ARRAY
59240: PUSH
59241: LD_INT 1
59243: ARRAY
59244: PUSH
59245: LD_VAR 0 5
59249: PUSH
59250: LD_INT 2
59252: ARRAY
59253: PUSH
59254: LD_INT 1
59256: ARRAY
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: EMPTY
59263: LIST
59264: ST_TO_ADDR
// end ;
59265: LD_VAR 0 3
59269: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59270: LD_INT 0
59272: PPUSH
59273: PPUSH
// list := AreaToList ( area , 0 ) ;
59274: LD_ADDR_VAR 0 4
59278: PUSH
59279: LD_VAR 0 1
59283: PPUSH
59284: LD_INT 0
59286: PPUSH
59287: CALL_OW 517
59291: ST_TO_ADDR
// if not list then
59292: LD_VAR 0 4
59296: NOT
59297: IFFALSE 59301
// exit ;
59299: GO 59342
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59301: LD_ADDR_VAR 0 3
59305: PUSH
59306: LD_VAR 0 4
59310: PUSH
59311: LD_INT 1
59313: ARRAY
59314: PUSH
59315: LD_INT 1
59317: ARRAY
59318: PUSH
59319: LD_VAR 0 4
59323: PUSH
59324: LD_INT 2
59326: ARRAY
59327: PUSH
59328: LD_INT 1
59330: ARRAY
59331: PUSH
59332: LD_VAR 0 2
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: LIST
59341: ST_TO_ADDR
// end ;
59342: LD_VAR 0 3
59346: RET
// export function First ( array ) ; begin
59347: LD_INT 0
59349: PPUSH
// if not array then
59350: LD_VAR 0 1
59354: NOT
59355: IFFALSE 59359
// exit ;
59357: GO 59373
// result := array [ 1 ] ;
59359: LD_ADDR_VAR 0 2
59363: PUSH
59364: LD_VAR 0 1
59368: PUSH
59369: LD_INT 1
59371: ARRAY
59372: ST_TO_ADDR
// end ;
59373: LD_VAR 0 2
59377: RET
// export function Last ( array ) ; begin
59378: LD_INT 0
59380: PPUSH
// if not array then
59381: LD_VAR 0 1
59385: NOT
59386: IFFALSE 59390
// exit ;
59388: GO 59406
// result := array [ array ] ;
59390: LD_ADDR_VAR 0 2
59394: PUSH
59395: LD_VAR 0 1
59399: PUSH
59400: LD_VAR 0 1
59404: ARRAY
59405: ST_TO_ADDR
// end ;
59406: LD_VAR 0 2
59410: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59411: LD_INT 0
59413: PPUSH
59414: PPUSH
// result := [ ] ;
59415: LD_ADDR_VAR 0 5
59419: PUSH
59420: EMPTY
59421: ST_TO_ADDR
// if not array then
59422: LD_VAR 0 1
59426: NOT
59427: IFFALSE 59431
// exit ;
59429: GO 59543
// for i := 1 to array do
59431: LD_ADDR_VAR 0 6
59435: PUSH
59436: DOUBLE
59437: LD_INT 1
59439: DEC
59440: ST_TO_ADDR
59441: LD_VAR 0 1
59445: PUSH
59446: FOR_TO
59447: IFFALSE 59541
// if array [ i ] [ index ] = value then
59449: LD_VAR 0 1
59453: PUSH
59454: LD_VAR 0 6
59458: ARRAY
59459: PUSH
59460: LD_VAR 0 2
59464: ARRAY
59465: PUSH
59466: LD_VAR 0 3
59470: EQUAL
59471: IFFALSE 59539
// begin if indexColumn then
59473: LD_VAR 0 4
59477: IFFALSE 59513
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59479: LD_ADDR_VAR 0 5
59483: PUSH
59484: LD_VAR 0 5
59488: PPUSH
59489: LD_VAR 0 1
59493: PUSH
59494: LD_VAR 0 6
59498: ARRAY
59499: PUSH
59500: LD_VAR 0 4
59504: ARRAY
59505: PPUSH
59506: CALL 54731 0 2
59510: ST_TO_ADDR
59511: GO 59539
// result := Join ( result , array [ i ] ) ;
59513: LD_ADDR_VAR 0 5
59517: PUSH
59518: LD_VAR 0 5
59522: PPUSH
59523: LD_VAR 0 1
59527: PUSH
59528: LD_VAR 0 6
59532: ARRAY
59533: PPUSH
59534: CALL 54731 0 2
59538: ST_TO_ADDR
// end ;
59539: GO 59446
59541: POP
59542: POP
// end ;
59543: LD_VAR 0 5
59547: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59548: LD_INT 0
59550: PPUSH
// if not vehicles or not parkingPoint then
59551: LD_VAR 0 1
59555: NOT
59556: PUSH
59557: LD_VAR 0 2
59561: NOT
59562: OR
59563: IFFALSE 59567
// exit ;
59565: GO 59665
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59567: LD_ADDR_VAR 0 1
59571: PUSH
59572: LD_VAR 0 1
59576: PPUSH
59577: LD_INT 50
59579: PUSH
59580: EMPTY
59581: LIST
59582: PUSH
59583: LD_INT 3
59585: PUSH
59586: LD_INT 92
59588: PUSH
59589: LD_VAR 0 2
59593: PUSH
59594: LD_INT 1
59596: ARRAY
59597: PUSH
59598: LD_VAR 0 2
59602: PUSH
59603: LD_INT 2
59605: ARRAY
59606: PUSH
59607: LD_INT 8
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PPUSH
59624: CALL_OW 72
59628: ST_TO_ADDR
// if not vehicles then
59629: LD_VAR 0 1
59633: NOT
59634: IFFALSE 59638
// exit ;
59636: GO 59665
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59638: LD_VAR 0 1
59642: PPUSH
59643: LD_VAR 0 2
59647: PUSH
59648: LD_INT 1
59650: ARRAY
59651: PPUSH
59652: LD_VAR 0 2
59656: PUSH
59657: LD_INT 2
59659: ARRAY
59660: PPUSH
59661: CALL_OW 111
// end ;
59665: LD_VAR 0 3
59669: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59670: LD_INT 0
59672: PPUSH
59673: PPUSH
59674: PPUSH
// if not side or not area then
59675: LD_VAR 0 1
59679: NOT
59680: PUSH
59681: LD_VAR 0 2
59685: NOT
59686: OR
59687: IFFALSE 59691
// exit ;
59689: GO 59810
// tmp := AreaToList ( area , 0 ) ;
59691: LD_ADDR_VAR 0 5
59695: PUSH
59696: LD_VAR 0 2
59700: PPUSH
59701: LD_INT 0
59703: PPUSH
59704: CALL_OW 517
59708: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59709: LD_ADDR_VAR 0 4
59713: PUSH
59714: DOUBLE
59715: LD_INT 1
59717: DEC
59718: ST_TO_ADDR
59719: LD_VAR 0 5
59723: PUSH
59724: LD_INT 1
59726: ARRAY
59727: PUSH
59728: FOR_TO
59729: IFFALSE 59808
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59731: LD_VAR 0 5
59735: PUSH
59736: LD_INT 1
59738: ARRAY
59739: PUSH
59740: LD_VAR 0 4
59744: ARRAY
59745: PPUSH
59746: LD_VAR 0 5
59750: PUSH
59751: LD_INT 2
59753: ARRAY
59754: PUSH
59755: LD_VAR 0 4
59759: ARRAY
59760: PPUSH
59761: CALL_OW 351
59765: IFFALSE 59806
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59767: LD_VAR 0 5
59771: PUSH
59772: LD_INT 1
59774: ARRAY
59775: PUSH
59776: LD_VAR 0 4
59780: ARRAY
59781: PPUSH
59782: LD_VAR 0 5
59786: PUSH
59787: LD_INT 2
59789: ARRAY
59790: PUSH
59791: LD_VAR 0 4
59795: ARRAY
59796: PPUSH
59797: LD_VAR 0 1
59801: PPUSH
59802: CALL_OW 244
// end ;
59806: GO 59728
59808: POP
59809: POP
// end ; end_of_file
59810: LD_VAR 0 3
59814: RET
// export globalGameSaveCounter ; every 0 0$1 do
59815: GO 59817
59817: DISABLE
// begin enable ;
59818: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59819: LD_STRING updateTimer(
59821: PUSH
59822: LD_OWVAR 1
59826: STR
59827: PUSH
59828: LD_STRING );
59830: STR
59831: PPUSH
59832: CALL_OW 559
// end ;
59836: END
// every 0 0$1 do
59837: GO 59839
59839: DISABLE
// begin globalGameSaveCounter := 0 ;
59840: LD_ADDR_EXP 50
59844: PUSH
59845: LD_INT 0
59847: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
59848: LD_STRING setGameSaveCounter(0)
59850: PPUSH
59851: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
59855: LD_STRING initStreamRollete();
59857: PPUSH
59858: CALL_OW 559
// InitStreamMode ;
59862: CALL 61205 0 0
// DefineStreamItems ( false ) ;
59866: LD_INT 0
59868: PPUSH
59869: CALL 61669 0 1
// end ;
59873: END
// export function SOS_MapStart ( ) ; begin
59874: LD_INT 0
59876: PPUSH
// if streamModeActive then
59877: LD_EXP 51
59881: IFFALSE 59890
// DefineStreamItems ( true ) ;
59883: LD_INT 1
59885: PPUSH
59886: CALL 61669 0 1
// UpdateLuaVariables ( ) ;
59890: CALL 59907 0 0
// UpdateFactoryWaypoints ( ) ;
59894: CALL 74671 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59898: CALL 74923 0 0
// end ;
59902: LD_VAR 0 1
59906: RET
// function UpdateLuaVariables ( ) ; begin
59907: LD_INT 0
59909: PPUSH
// if globalGameSaveCounter then
59910: LD_EXP 50
59914: IFFALSE 59948
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
59916: LD_ADDR_EXP 50
59920: PUSH
59921: LD_EXP 50
59925: PPUSH
59926: CALL 56092 0 1
59930: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59931: LD_STRING setGameSaveCounter(
59933: PUSH
59934: LD_EXP 50
59938: STR
59939: PUSH
59940: LD_STRING )
59942: STR
59943: PPUSH
59944: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59948: LD_STRING setGameDifficulty(
59950: PUSH
59951: LD_OWVAR 67
59955: STR
59956: PUSH
59957: LD_STRING )
59959: STR
59960: PPUSH
59961: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59965: LD_STRING displayDifficulty(
59967: PUSH
59968: LD_OWVAR 67
59972: STR
59973: PUSH
59974: LD_STRING )
59976: STR
59977: PPUSH
59978: CALL_OW 559
// end ;
59982: LD_VAR 0 1
59986: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59987: LD_INT 0
59989: PPUSH
// if p2 = stream_mode then
59990: LD_VAR 0 2
59994: PUSH
59995: LD_INT 100
59997: EQUAL
59998: IFFALSE 61001
// begin if not StreamModeActive then
60000: LD_EXP 51
60004: NOT
60005: IFFALSE 60015
// StreamModeActive := true ;
60007: LD_ADDR_EXP 51
60011: PUSH
60012: LD_INT 1
60014: ST_TO_ADDR
// if p3 = 0 then
60015: LD_VAR 0 3
60019: PUSH
60020: LD_INT 0
60022: EQUAL
60023: IFFALSE 60029
// InitStreamMode ;
60025: CALL 61205 0 0
// if p3 = 1 then
60029: LD_VAR 0 3
60033: PUSH
60034: LD_INT 1
60036: EQUAL
60037: IFFALSE 60047
// sRocket := true ;
60039: LD_ADDR_EXP 56
60043: PUSH
60044: LD_INT 1
60046: ST_TO_ADDR
// if p3 = 2 then
60047: LD_VAR 0 3
60051: PUSH
60052: LD_INT 2
60054: EQUAL
60055: IFFALSE 60065
// sSpeed := true ;
60057: LD_ADDR_EXP 55
60061: PUSH
60062: LD_INT 1
60064: ST_TO_ADDR
// if p3 = 3 then
60065: LD_VAR 0 3
60069: PUSH
60070: LD_INT 3
60072: EQUAL
60073: IFFALSE 60083
// sEngine := true ;
60075: LD_ADDR_EXP 57
60079: PUSH
60080: LD_INT 1
60082: ST_TO_ADDR
// if p3 = 4 then
60083: LD_VAR 0 3
60087: PUSH
60088: LD_INT 4
60090: EQUAL
60091: IFFALSE 60101
// sSpec := true ;
60093: LD_ADDR_EXP 54
60097: PUSH
60098: LD_INT 1
60100: ST_TO_ADDR
// if p3 = 5 then
60101: LD_VAR 0 3
60105: PUSH
60106: LD_INT 5
60108: EQUAL
60109: IFFALSE 60119
// sLevel := true ;
60111: LD_ADDR_EXP 58
60115: PUSH
60116: LD_INT 1
60118: ST_TO_ADDR
// if p3 = 6 then
60119: LD_VAR 0 3
60123: PUSH
60124: LD_INT 6
60126: EQUAL
60127: IFFALSE 60137
// sArmoury := true ;
60129: LD_ADDR_EXP 59
60133: PUSH
60134: LD_INT 1
60136: ST_TO_ADDR
// if p3 = 7 then
60137: LD_VAR 0 3
60141: PUSH
60142: LD_INT 7
60144: EQUAL
60145: IFFALSE 60155
// sRadar := true ;
60147: LD_ADDR_EXP 60
60151: PUSH
60152: LD_INT 1
60154: ST_TO_ADDR
// if p3 = 8 then
60155: LD_VAR 0 3
60159: PUSH
60160: LD_INT 8
60162: EQUAL
60163: IFFALSE 60173
// sBunker := true ;
60165: LD_ADDR_EXP 61
60169: PUSH
60170: LD_INT 1
60172: ST_TO_ADDR
// if p3 = 9 then
60173: LD_VAR 0 3
60177: PUSH
60178: LD_INT 9
60180: EQUAL
60181: IFFALSE 60191
// sHack := true ;
60183: LD_ADDR_EXP 62
60187: PUSH
60188: LD_INT 1
60190: ST_TO_ADDR
// if p3 = 10 then
60191: LD_VAR 0 3
60195: PUSH
60196: LD_INT 10
60198: EQUAL
60199: IFFALSE 60209
// sFire := true ;
60201: LD_ADDR_EXP 63
60205: PUSH
60206: LD_INT 1
60208: ST_TO_ADDR
// if p3 = 11 then
60209: LD_VAR 0 3
60213: PUSH
60214: LD_INT 11
60216: EQUAL
60217: IFFALSE 60227
// sRefresh := true ;
60219: LD_ADDR_EXP 64
60223: PUSH
60224: LD_INT 1
60226: ST_TO_ADDR
// if p3 = 12 then
60227: LD_VAR 0 3
60231: PUSH
60232: LD_INT 12
60234: EQUAL
60235: IFFALSE 60245
// sExp := true ;
60237: LD_ADDR_EXP 65
60241: PUSH
60242: LD_INT 1
60244: ST_TO_ADDR
// if p3 = 13 then
60245: LD_VAR 0 3
60249: PUSH
60250: LD_INT 13
60252: EQUAL
60253: IFFALSE 60263
// sDepot := true ;
60255: LD_ADDR_EXP 66
60259: PUSH
60260: LD_INT 1
60262: ST_TO_ADDR
// if p3 = 14 then
60263: LD_VAR 0 3
60267: PUSH
60268: LD_INT 14
60270: EQUAL
60271: IFFALSE 60281
// sFlag := true ;
60273: LD_ADDR_EXP 67
60277: PUSH
60278: LD_INT 1
60280: ST_TO_ADDR
// if p3 = 15 then
60281: LD_VAR 0 3
60285: PUSH
60286: LD_INT 15
60288: EQUAL
60289: IFFALSE 60299
// sKamikadze := true ;
60291: LD_ADDR_EXP 75
60295: PUSH
60296: LD_INT 1
60298: ST_TO_ADDR
// if p3 = 16 then
60299: LD_VAR 0 3
60303: PUSH
60304: LD_INT 16
60306: EQUAL
60307: IFFALSE 60317
// sTroll := true ;
60309: LD_ADDR_EXP 76
60313: PUSH
60314: LD_INT 1
60316: ST_TO_ADDR
// if p3 = 17 then
60317: LD_VAR 0 3
60321: PUSH
60322: LD_INT 17
60324: EQUAL
60325: IFFALSE 60335
// sSlow := true ;
60327: LD_ADDR_EXP 77
60331: PUSH
60332: LD_INT 1
60334: ST_TO_ADDR
// if p3 = 18 then
60335: LD_VAR 0 3
60339: PUSH
60340: LD_INT 18
60342: EQUAL
60343: IFFALSE 60353
// sLack := true ;
60345: LD_ADDR_EXP 78
60349: PUSH
60350: LD_INT 1
60352: ST_TO_ADDR
// if p3 = 19 then
60353: LD_VAR 0 3
60357: PUSH
60358: LD_INT 19
60360: EQUAL
60361: IFFALSE 60371
// sTank := true ;
60363: LD_ADDR_EXP 80
60367: PUSH
60368: LD_INT 1
60370: ST_TO_ADDR
// if p3 = 20 then
60371: LD_VAR 0 3
60375: PUSH
60376: LD_INT 20
60378: EQUAL
60379: IFFALSE 60389
// sRemote := true ;
60381: LD_ADDR_EXP 81
60385: PUSH
60386: LD_INT 1
60388: ST_TO_ADDR
// if p3 = 21 then
60389: LD_VAR 0 3
60393: PUSH
60394: LD_INT 21
60396: EQUAL
60397: IFFALSE 60407
// sPowell := true ;
60399: LD_ADDR_EXP 82
60403: PUSH
60404: LD_INT 1
60406: ST_TO_ADDR
// if p3 = 22 then
60407: LD_VAR 0 3
60411: PUSH
60412: LD_INT 22
60414: EQUAL
60415: IFFALSE 60425
// sTeleport := true ;
60417: LD_ADDR_EXP 85
60421: PUSH
60422: LD_INT 1
60424: ST_TO_ADDR
// if p3 = 23 then
60425: LD_VAR 0 3
60429: PUSH
60430: LD_INT 23
60432: EQUAL
60433: IFFALSE 60443
// sOilTower := true ;
60435: LD_ADDR_EXP 87
60439: PUSH
60440: LD_INT 1
60442: ST_TO_ADDR
// if p3 = 24 then
60443: LD_VAR 0 3
60447: PUSH
60448: LD_INT 24
60450: EQUAL
60451: IFFALSE 60461
// sShovel := true ;
60453: LD_ADDR_EXP 88
60457: PUSH
60458: LD_INT 1
60460: ST_TO_ADDR
// if p3 = 25 then
60461: LD_VAR 0 3
60465: PUSH
60466: LD_INT 25
60468: EQUAL
60469: IFFALSE 60479
// sSheik := true ;
60471: LD_ADDR_EXP 89
60475: PUSH
60476: LD_INT 1
60478: ST_TO_ADDR
// if p3 = 26 then
60479: LD_VAR 0 3
60483: PUSH
60484: LD_INT 26
60486: EQUAL
60487: IFFALSE 60497
// sEarthquake := true ;
60489: LD_ADDR_EXP 91
60493: PUSH
60494: LD_INT 1
60496: ST_TO_ADDR
// if p3 = 27 then
60497: LD_VAR 0 3
60501: PUSH
60502: LD_INT 27
60504: EQUAL
60505: IFFALSE 60515
// sAI := true ;
60507: LD_ADDR_EXP 92
60511: PUSH
60512: LD_INT 1
60514: ST_TO_ADDR
// if p3 = 28 then
60515: LD_VAR 0 3
60519: PUSH
60520: LD_INT 28
60522: EQUAL
60523: IFFALSE 60533
// sCargo := true ;
60525: LD_ADDR_EXP 95
60529: PUSH
60530: LD_INT 1
60532: ST_TO_ADDR
// if p3 = 29 then
60533: LD_VAR 0 3
60537: PUSH
60538: LD_INT 29
60540: EQUAL
60541: IFFALSE 60551
// sDLaser := true ;
60543: LD_ADDR_EXP 96
60547: PUSH
60548: LD_INT 1
60550: ST_TO_ADDR
// if p3 = 30 then
60551: LD_VAR 0 3
60555: PUSH
60556: LD_INT 30
60558: EQUAL
60559: IFFALSE 60569
// sExchange := true ;
60561: LD_ADDR_EXP 97
60565: PUSH
60566: LD_INT 1
60568: ST_TO_ADDR
// if p3 = 31 then
60569: LD_VAR 0 3
60573: PUSH
60574: LD_INT 31
60576: EQUAL
60577: IFFALSE 60587
// sFac := true ;
60579: LD_ADDR_EXP 98
60583: PUSH
60584: LD_INT 1
60586: ST_TO_ADDR
// if p3 = 32 then
60587: LD_VAR 0 3
60591: PUSH
60592: LD_INT 32
60594: EQUAL
60595: IFFALSE 60605
// sPower := true ;
60597: LD_ADDR_EXP 99
60601: PUSH
60602: LD_INT 1
60604: ST_TO_ADDR
// if p3 = 33 then
60605: LD_VAR 0 3
60609: PUSH
60610: LD_INT 33
60612: EQUAL
60613: IFFALSE 60623
// sRandom := true ;
60615: LD_ADDR_EXP 100
60619: PUSH
60620: LD_INT 1
60622: ST_TO_ADDR
// if p3 = 34 then
60623: LD_VAR 0 3
60627: PUSH
60628: LD_INT 34
60630: EQUAL
60631: IFFALSE 60641
// sShield := true ;
60633: LD_ADDR_EXP 101
60637: PUSH
60638: LD_INT 1
60640: ST_TO_ADDR
// if p3 = 35 then
60641: LD_VAR 0 3
60645: PUSH
60646: LD_INT 35
60648: EQUAL
60649: IFFALSE 60659
// sTime := true ;
60651: LD_ADDR_EXP 102
60655: PUSH
60656: LD_INT 1
60658: ST_TO_ADDR
// if p3 = 36 then
60659: LD_VAR 0 3
60663: PUSH
60664: LD_INT 36
60666: EQUAL
60667: IFFALSE 60677
// sTools := true ;
60669: LD_ADDR_EXP 103
60673: PUSH
60674: LD_INT 1
60676: ST_TO_ADDR
// if p3 = 101 then
60677: LD_VAR 0 3
60681: PUSH
60682: LD_INT 101
60684: EQUAL
60685: IFFALSE 60695
// sSold := true ;
60687: LD_ADDR_EXP 68
60691: PUSH
60692: LD_INT 1
60694: ST_TO_ADDR
// if p3 = 102 then
60695: LD_VAR 0 3
60699: PUSH
60700: LD_INT 102
60702: EQUAL
60703: IFFALSE 60713
// sDiff := true ;
60705: LD_ADDR_EXP 69
60709: PUSH
60710: LD_INT 1
60712: ST_TO_ADDR
// if p3 = 103 then
60713: LD_VAR 0 3
60717: PUSH
60718: LD_INT 103
60720: EQUAL
60721: IFFALSE 60731
// sFog := true ;
60723: LD_ADDR_EXP 72
60727: PUSH
60728: LD_INT 1
60730: ST_TO_ADDR
// if p3 = 104 then
60731: LD_VAR 0 3
60735: PUSH
60736: LD_INT 104
60738: EQUAL
60739: IFFALSE 60749
// sReset := true ;
60741: LD_ADDR_EXP 73
60745: PUSH
60746: LD_INT 1
60748: ST_TO_ADDR
// if p3 = 105 then
60749: LD_VAR 0 3
60753: PUSH
60754: LD_INT 105
60756: EQUAL
60757: IFFALSE 60767
// sSun := true ;
60759: LD_ADDR_EXP 74
60763: PUSH
60764: LD_INT 1
60766: ST_TO_ADDR
// if p3 = 106 then
60767: LD_VAR 0 3
60771: PUSH
60772: LD_INT 106
60774: EQUAL
60775: IFFALSE 60785
// sTiger := true ;
60777: LD_ADDR_EXP 70
60781: PUSH
60782: LD_INT 1
60784: ST_TO_ADDR
// if p3 = 107 then
60785: LD_VAR 0 3
60789: PUSH
60790: LD_INT 107
60792: EQUAL
60793: IFFALSE 60803
// sBomb := true ;
60795: LD_ADDR_EXP 71
60799: PUSH
60800: LD_INT 1
60802: ST_TO_ADDR
// if p3 = 108 then
60803: LD_VAR 0 3
60807: PUSH
60808: LD_INT 108
60810: EQUAL
60811: IFFALSE 60821
// sWound := true ;
60813: LD_ADDR_EXP 79
60817: PUSH
60818: LD_INT 1
60820: ST_TO_ADDR
// if p3 = 109 then
60821: LD_VAR 0 3
60825: PUSH
60826: LD_INT 109
60828: EQUAL
60829: IFFALSE 60839
// sBetray := true ;
60831: LD_ADDR_EXP 83
60835: PUSH
60836: LD_INT 1
60838: ST_TO_ADDR
// if p3 = 110 then
60839: LD_VAR 0 3
60843: PUSH
60844: LD_INT 110
60846: EQUAL
60847: IFFALSE 60857
// sContamin := true ;
60849: LD_ADDR_EXP 84
60853: PUSH
60854: LD_INT 1
60856: ST_TO_ADDR
// if p3 = 111 then
60857: LD_VAR 0 3
60861: PUSH
60862: LD_INT 111
60864: EQUAL
60865: IFFALSE 60875
// sOil := true ;
60867: LD_ADDR_EXP 86
60871: PUSH
60872: LD_INT 1
60874: ST_TO_ADDR
// if p3 = 112 then
60875: LD_VAR 0 3
60879: PUSH
60880: LD_INT 112
60882: EQUAL
60883: IFFALSE 60893
// sStu := true ;
60885: LD_ADDR_EXP 90
60889: PUSH
60890: LD_INT 1
60892: ST_TO_ADDR
// if p3 = 113 then
60893: LD_VAR 0 3
60897: PUSH
60898: LD_INT 113
60900: EQUAL
60901: IFFALSE 60911
// sBazooka := true ;
60903: LD_ADDR_EXP 93
60907: PUSH
60908: LD_INT 1
60910: ST_TO_ADDR
// if p3 = 114 then
60911: LD_VAR 0 3
60915: PUSH
60916: LD_INT 114
60918: EQUAL
60919: IFFALSE 60929
// sMortar := true ;
60921: LD_ADDR_EXP 94
60925: PUSH
60926: LD_INT 1
60928: ST_TO_ADDR
// if p3 = 115 then
60929: LD_VAR 0 3
60933: PUSH
60934: LD_INT 115
60936: EQUAL
60937: IFFALSE 60947
// sRanger := true ;
60939: LD_ADDR_EXP 104
60943: PUSH
60944: LD_INT 1
60946: ST_TO_ADDR
// if p3 = 116 then
60947: LD_VAR 0 3
60951: PUSH
60952: LD_INT 116
60954: EQUAL
60955: IFFALSE 60965
// sComputer := true ;
60957: LD_ADDR_EXP 105
60961: PUSH
60962: LD_INT 1
60964: ST_TO_ADDR
// if p3 = 117 then
60965: LD_VAR 0 3
60969: PUSH
60970: LD_INT 117
60972: EQUAL
60973: IFFALSE 60983
// s30 := true ;
60975: LD_ADDR_EXP 106
60979: PUSH
60980: LD_INT 1
60982: ST_TO_ADDR
// if p3 = 118 then
60983: LD_VAR 0 3
60987: PUSH
60988: LD_INT 118
60990: EQUAL
60991: IFFALSE 61001
// s60 := true ;
60993: LD_ADDR_EXP 107
60997: PUSH
60998: LD_INT 1
61000: ST_TO_ADDR
// end ; if p2 = hack_mode then
61001: LD_VAR 0 2
61005: PUSH
61006: LD_INT 101
61008: EQUAL
61009: IFFALSE 61137
// begin case p3 of 1 :
61011: LD_VAR 0 3
61015: PUSH
61016: LD_INT 1
61018: DOUBLE
61019: EQUAL
61020: IFTRUE 61024
61022: GO 61031
61024: POP
// hHackUnlimitedResources ; 2 :
61025: CALL 73284 0 0
61029: GO 61137
61031: LD_INT 2
61033: DOUBLE
61034: EQUAL
61035: IFTRUE 61039
61037: GO 61046
61039: POP
// hHackSetLevel10 ; 3 :
61040: CALL 73417 0 0
61044: GO 61137
61046: LD_INT 3
61048: DOUBLE
61049: EQUAL
61050: IFTRUE 61054
61052: GO 61061
61054: POP
// hHackSetLevel10YourUnits ; 4 :
61055: CALL 73502 0 0
61059: GO 61137
61061: LD_INT 4
61063: DOUBLE
61064: EQUAL
61065: IFTRUE 61069
61067: GO 61076
61069: POP
// hHackInvincible ; 5 :
61070: CALL 73950 0 0
61074: GO 61137
61076: LD_INT 5
61078: DOUBLE
61079: EQUAL
61080: IFTRUE 61084
61082: GO 61091
61084: POP
// hHackInvisible ; 6 :
61085: CALL 74061 0 0
61089: GO 61137
61091: LD_INT 6
61093: DOUBLE
61094: EQUAL
61095: IFTRUE 61099
61097: GO 61106
61099: POP
// hHackChangeYourSide ; 7 :
61100: CALL 74118 0 0
61104: GO 61137
61106: LD_INT 7
61108: DOUBLE
61109: EQUAL
61110: IFTRUE 61114
61112: GO 61121
61114: POP
// hHackChangeUnitSide ; 8 :
61115: CALL 74160 0 0
61119: GO 61137
61121: LD_INT 8
61123: DOUBLE
61124: EQUAL
61125: IFTRUE 61129
61127: GO 61136
61129: POP
// hHackFog ; end ;
61130: CALL 74261 0 0
61134: GO 61137
61136: POP
// end ; if p2 = game_save_mode then
61137: LD_VAR 0 2
61141: PUSH
61142: LD_INT 102
61144: EQUAL
61145: IFFALSE 61200
// begin if p3 = 1 then
61147: LD_VAR 0 3
61151: PUSH
61152: LD_INT 1
61154: EQUAL
61155: IFFALSE 61167
// globalGameSaveCounter := p4 ;
61157: LD_ADDR_EXP 50
61161: PUSH
61162: LD_VAR 0 4
61166: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
61167: LD_VAR 0 3
61171: PUSH
61172: LD_INT 2
61174: EQUAL
61175: PUSH
61176: LD_EXP 50
61180: AND
61181: IFFALSE 61200
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61183: LD_STRING setGameSaveCounter(
61185: PUSH
61186: LD_EXP 50
61190: STR
61191: PUSH
61192: LD_STRING )
61194: STR
61195: PPUSH
61196: CALL_OW 559
// end ; end ;
61200: LD_VAR 0 7
61204: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
61205: LD_INT 0
61207: PPUSH
// streamModeActive := false ;
61208: LD_ADDR_EXP 51
61212: PUSH
61213: LD_INT 0
61215: ST_TO_ADDR
// normalCounter := 36 ;
61216: LD_ADDR_EXP 52
61220: PUSH
61221: LD_INT 36
61223: ST_TO_ADDR
// hardcoreCounter := 18 ;
61224: LD_ADDR_EXP 53
61228: PUSH
61229: LD_INT 18
61231: ST_TO_ADDR
// sRocket := false ;
61232: LD_ADDR_EXP 56
61236: PUSH
61237: LD_INT 0
61239: ST_TO_ADDR
// sSpeed := false ;
61240: LD_ADDR_EXP 55
61244: PUSH
61245: LD_INT 0
61247: ST_TO_ADDR
// sEngine := false ;
61248: LD_ADDR_EXP 57
61252: PUSH
61253: LD_INT 0
61255: ST_TO_ADDR
// sSpec := false ;
61256: LD_ADDR_EXP 54
61260: PUSH
61261: LD_INT 0
61263: ST_TO_ADDR
// sLevel := false ;
61264: LD_ADDR_EXP 58
61268: PUSH
61269: LD_INT 0
61271: ST_TO_ADDR
// sArmoury := false ;
61272: LD_ADDR_EXP 59
61276: PUSH
61277: LD_INT 0
61279: ST_TO_ADDR
// sRadar := false ;
61280: LD_ADDR_EXP 60
61284: PUSH
61285: LD_INT 0
61287: ST_TO_ADDR
// sBunker := false ;
61288: LD_ADDR_EXP 61
61292: PUSH
61293: LD_INT 0
61295: ST_TO_ADDR
// sHack := false ;
61296: LD_ADDR_EXP 62
61300: PUSH
61301: LD_INT 0
61303: ST_TO_ADDR
// sFire := false ;
61304: LD_ADDR_EXP 63
61308: PUSH
61309: LD_INT 0
61311: ST_TO_ADDR
// sRefresh := false ;
61312: LD_ADDR_EXP 64
61316: PUSH
61317: LD_INT 0
61319: ST_TO_ADDR
// sExp := false ;
61320: LD_ADDR_EXP 65
61324: PUSH
61325: LD_INT 0
61327: ST_TO_ADDR
// sDepot := false ;
61328: LD_ADDR_EXP 66
61332: PUSH
61333: LD_INT 0
61335: ST_TO_ADDR
// sFlag := false ;
61336: LD_ADDR_EXP 67
61340: PUSH
61341: LD_INT 0
61343: ST_TO_ADDR
// sKamikadze := false ;
61344: LD_ADDR_EXP 75
61348: PUSH
61349: LD_INT 0
61351: ST_TO_ADDR
// sTroll := false ;
61352: LD_ADDR_EXP 76
61356: PUSH
61357: LD_INT 0
61359: ST_TO_ADDR
// sSlow := false ;
61360: LD_ADDR_EXP 77
61364: PUSH
61365: LD_INT 0
61367: ST_TO_ADDR
// sLack := false ;
61368: LD_ADDR_EXP 78
61372: PUSH
61373: LD_INT 0
61375: ST_TO_ADDR
// sTank := false ;
61376: LD_ADDR_EXP 80
61380: PUSH
61381: LD_INT 0
61383: ST_TO_ADDR
// sRemote := false ;
61384: LD_ADDR_EXP 81
61388: PUSH
61389: LD_INT 0
61391: ST_TO_ADDR
// sPowell := false ;
61392: LD_ADDR_EXP 82
61396: PUSH
61397: LD_INT 0
61399: ST_TO_ADDR
// sTeleport := false ;
61400: LD_ADDR_EXP 85
61404: PUSH
61405: LD_INT 0
61407: ST_TO_ADDR
// sOilTower := false ;
61408: LD_ADDR_EXP 87
61412: PUSH
61413: LD_INT 0
61415: ST_TO_ADDR
// sShovel := false ;
61416: LD_ADDR_EXP 88
61420: PUSH
61421: LD_INT 0
61423: ST_TO_ADDR
// sSheik := false ;
61424: LD_ADDR_EXP 89
61428: PUSH
61429: LD_INT 0
61431: ST_TO_ADDR
// sEarthquake := false ;
61432: LD_ADDR_EXP 91
61436: PUSH
61437: LD_INT 0
61439: ST_TO_ADDR
// sAI := false ;
61440: LD_ADDR_EXP 92
61444: PUSH
61445: LD_INT 0
61447: ST_TO_ADDR
// sCargo := false ;
61448: LD_ADDR_EXP 95
61452: PUSH
61453: LD_INT 0
61455: ST_TO_ADDR
// sDLaser := false ;
61456: LD_ADDR_EXP 96
61460: PUSH
61461: LD_INT 0
61463: ST_TO_ADDR
// sExchange := false ;
61464: LD_ADDR_EXP 97
61468: PUSH
61469: LD_INT 0
61471: ST_TO_ADDR
// sFac := false ;
61472: LD_ADDR_EXP 98
61476: PUSH
61477: LD_INT 0
61479: ST_TO_ADDR
// sPower := false ;
61480: LD_ADDR_EXP 99
61484: PUSH
61485: LD_INT 0
61487: ST_TO_ADDR
// sRandom := false ;
61488: LD_ADDR_EXP 100
61492: PUSH
61493: LD_INT 0
61495: ST_TO_ADDR
// sShield := false ;
61496: LD_ADDR_EXP 101
61500: PUSH
61501: LD_INT 0
61503: ST_TO_ADDR
// sTime := false ;
61504: LD_ADDR_EXP 102
61508: PUSH
61509: LD_INT 0
61511: ST_TO_ADDR
// sTools := false ;
61512: LD_ADDR_EXP 103
61516: PUSH
61517: LD_INT 0
61519: ST_TO_ADDR
// sSold := false ;
61520: LD_ADDR_EXP 68
61524: PUSH
61525: LD_INT 0
61527: ST_TO_ADDR
// sDiff := false ;
61528: LD_ADDR_EXP 69
61532: PUSH
61533: LD_INT 0
61535: ST_TO_ADDR
// sFog := false ;
61536: LD_ADDR_EXP 72
61540: PUSH
61541: LD_INT 0
61543: ST_TO_ADDR
// sReset := false ;
61544: LD_ADDR_EXP 73
61548: PUSH
61549: LD_INT 0
61551: ST_TO_ADDR
// sSun := false ;
61552: LD_ADDR_EXP 74
61556: PUSH
61557: LD_INT 0
61559: ST_TO_ADDR
// sTiger := false ;
61560: LD_ADDR_EXP 70
61564: PUSH
61565: LD_INT 0
61567: ST_TO_ADDR
// sBomb := false ;
61568: LD_ADDR_EXP 71
61572: PUSH
61573: LD_INT 0
61575: ST_TO_ADDR
// sWound := false ;
61576: LD_ADDR_EXP 79
61580: PUSH
61581: LD_INT 0
61583: ST_TO_ADDR
// sBetray := false ;
61584: LD_ADDR_EXP 83
61588: PUSH
61589: LD_INT 0
61591: ST_TO_ADDR
// sContamin := false ;
61592: LD_ADDR_EXP 84
61596: PUSH
61597: LD_INT 0
61599: ST_TO_ADDR
// sOil := false ;
61600: LD_ADDR_EXP 86
61604: PUSH
61605: LD_INT 0
61607: ST_TO_ADDR
// sStu := false ;
61608: LD_ADDR_EXP 90
61612: PUSH
61613: LD_INT 0
61615: ST_TO_ADDR
// sBazooka := false ;
61616: LD_ADDR_EXP 93
61620: PUSH
61621: LD_INT 0
61623: ST_TO_ADDR
// sMortar := false ;
61624: LD_ADDR_EXP 94
61628: PUSH
61629: LD_INT 0
61631: ST_TO_ADDR
// sRanger := false ;
61632: LD_ADDR_EXP 104
61636: PUSH
61637: LD_INT 0
61639: ST_TO_ADDR
// sComputer := false ;
61640: LD_ADDR_EXP 105
61644: PUSH
61645: LD_INT 0
61647: ST_TO_ADDR
// s30 := false ;
61648: LD_ADDR_EXP 106
61652: PUSH
61653: LD_INT 0
61655: ST_TO_ADDR
// s60 := false ;
61656: LD_ADDR_EXP 107
61660: PUSH
61661: LD_INT 0
61663: ST_TO_ADDR
// end ;
61664: LD_VAR 0 1
61668: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
61669: LD_INT 0
61671: PPUSH
61672: PPUSH
61673: PPUSH
61674: PPUSH
61675: PPUSH
61676: PPUSH
61677: PPUSH
// result := [ ] ;
61678: LD_ADDR_VAR 0 2
61682: PUSH
61683: EMPTY
61684: ST_TO_ADDR
// if campaign_id = 1 then
61685: LD_OWVAR 69
61689: PUSH
61690: LD_INT 1
61692: EQUAL
61693: IFFALSE 64859
// begin case mission_number of 1 :
61695: LD_OWVAR 70
61699: PUSH
61700: LD_INT 1
61702: DOUBLE
61703: EQUAL
61704: IFTRUE 61708
61706: GO 61784
61708: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
61709: LD_ADDR_VAR 0 2
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: LD_INT 4
61719: PUSH
61720: LD_INT 11
61722: PUSH
61723: LD_INT 12
61725: PUSH
61726: LD_INT 15
61728: PUSH
61729: LD_INT 16
61731: PUSH
61732: LD_INT 22
61734: PUSH
61735: LD_INT 23
61737: PUSH
61738: LD_INT 26
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 101
61754: PUSH
61755: LD_INT 102
61757: PUSH
61758: LD_INT 106
61760: PUSH
61761: LD_INT 116
61763: PUSH
61764: LD_INT 117
61766: PUSH
61767: LD_INT 118
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: ST_TO_ADDR
61782: GO 64857
61784: LD_INT 2
61786: DOUBLE
61787: EQUAL
61788: IFTRUE 61792
61790: GO 61876
61792: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
61793: LD_ADDR_VAR 0 2
61797: PUSH
61798: LD_INT 2
61800: PUSH
61801: LD_INT 4
61803: PUSH
61804: LD_INT 11
61806: PUSH
61807: LD_INT 12
61809: PUSH
61810: LD_INT 15
61812: PUSH
61813: LD_INT 16
61815: PUSH
61816: LD_INT 22
61818: PUSH
61819: LD_INT 23
61821: PUSH
61822: LD_INT 26
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 101
61838: PUSH
61839: LD_INT 102
61841: PUSH
61842: LD_INT 105
61844: PUSH
61845: LD_INT 106
61847: PUSH
61848: LD_INT 108
61850: PUSH
61851: LD_INT 116
61853: PUSH
61854: LD_INT 117
61856: PUSH
61857: LD_INT 118
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: ST_TO_ADDR
61874: GO 64857
61876: LD_INT 3
61878: DOUBLE
61879: EQUAL
61880: IFTRUE 61884
61882: GO 61972
61884: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
61885: LD_ADDR_VAR 0 2
61889: PUSH
61890: LD_INT 2
61892: PUSH
61893: LD_INT 4
61895: PUSH
61896: LD_INT 5
61898: PUSH
61899: LD_INT 11
61901: PUSH
61902: LD_INT 12
61904: PUSH
61905: LD_INT 15
61907: PUSH
61908: LD_INT 16
61910: PUSH
61911: LD_INT 22
61913: PUSH
61914: LD_INT 26
61916: PUSH
61917: LD_INT 36
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 101
61934: PUSH
61935: LD_INT 102
61937: PUSH
61938: LD_INT 105
61940: PUSH
61941: LD_INT 106
61943: PUSH
61944: LD_INT 108
61946: PUSH
61947: LD_INT 116
61949: PUSH
61950: LD_INT 117
61952: PUSH
61953: LD_INT 118
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: ST_TO_ADDR
61970: GO 64857
61972: LD_INT 4
61974: DOUBLE
61975: EQUAL
61976: IFTRUE 61980
61978: GO 62076
61980: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
61981: LD_ADDR_VAR 0 2
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: LD_INT 4
61991: PUSH
61992: LD_INT 5
61994: PUSH
61995: LD_INT 8
61997: PUSH
61998: LD_INT 11
62000: PUSH
62001: LD_INT 12
62003: PUSH
62004: LD_INT 15
62006: PUSH
62007: LD_INT 16
62009: PUSH
62010: LD_INT 22
62012: PUSH
62013: LD_INT 23
62015: PUSH
62016: LD_INT 26
62018: PUSH
62019: LD_INT 36
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 101
62038: PUSH
62039: LD_INT 102
62041: PUSH
62042: LD_INT 105
62044: PUSH
62045: LD_INT 106
62047: PUSH
62048: LD_INT 108
62050: PUSH
62051: LD_INT 116
62053: PUSH
62054: LD_INT 117
62056: PUSH
62057: LD_INT 118
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: ST_TO_ADDR
62074: GO 64857
62076: LD_INT 5
62078: DOUBLE
62079: EQUAL
62080: IFTRUE 62084
62082: GO 62196
62084: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
62085: LD_ADDR_VAR 0 2
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 4
62095: PUSH
62096: LD_INT 5
62098: PUSH
62099: LD_INT 6
62101: PUSH
62102: LD_INT 8
62104: PUSH
62105: LD_INT 11
62107: PUSH
62108: LD_INT 12
62110: PUSH
62111: LD_INT 15
62113: PUSH
62114: LD_INT 16
62116: PUSH
62117: LD_INT 22
62119: PUSH
62120: LD_INT 23
62122: PUSH
62123: LD_INT 25
62125: PUSH
62126: LD_INT 26
62128: PUSH
62129: LD_INT 36
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 101
62150: PUSH
62151: LD_INT 102
62153: PUSH
62154: LD_INT 105
62156: PUSH
62157: LD_INT 106
62159: PUSH
62160: LD_INT 108
62162: PUSH
62163: LD_INT 109
62165: PUSH
62166: LD_INT 112
62168: PUSH
62169: LD_INT 116
62171: PUSH
62172: LD_INT 117
62174: PUSH
62175: LD_INT 118
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: ST_TO_ADDR
62194: GO 64857
62196: LD_INT 6
62198: DOUBLE
62199: EQUAL
62200: IFTRUE 62204
62202: GO 62336
62204: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
62205: LD_ADDR_VAR 0 2
62209: PUSH
62210: LD_INT 2
62212: PUSH
62213: LD_INT 4
62215: PUSH
62216: LD_INT 5
62218: PUSH
62219: LD_INT 6
62221: PUSH
62222: LD_INT 8
62224: PUSH
62225: LD_INT 11
62227: PUSH
62228: LD_INT 12
62230: PUSH
62231: LD_INT 15
62233: PUSH
62234: LD_INT 16
62236: PUSH
62237: LD_INT 20
62239: PUSH
62240: LD_INT 21
62242: PUSH
62243: LD_INT 22
62245: PUSH
62246: LD_INT 23
62248: PUSH
62249: LD_INT 25
62251: PUSH
62252: LD_INT 26
62254: PUSH
62255: LD_INT 30
62257: PUSH
62258: LD_INT 31
62260: PUSH
62261: LD_INT 32
62263: PUSH
62264: LD_INT 36
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 101
62290: PUSH
62291: LD_INT 102
62293: PUSH
62294: LD_INT 105
62296: PUSH
62297: LD_INT 106
62299: PUSH
62300: LD_INT 108
62302: PUSH
62303: LD_INT 109
62305: PUSH
62306: LD_INT 112
62308: PUSH
62309: LD_INT 116
62311: PUSH
62312: LD_INT 117
62314: PUSH
62315: LD_INT 118
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: ST_TO_ADDR
62334: GO 64857
62336: LD_INT 7
62338: DOUBLE
62339: EQUAL
62340: IFTRUE 62344
62342: GO 62456
62344: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
62345: LD_ADDR_VAR 0 2
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: LD_INT 4
62355: PUSH
62356: LD_INT 5
62358: PUSH
62359: LD_INT 7
62361: PUSH
62362: LD_INT 11
62364: PUSH
62365: LD_INT 12
62367: PUSH
62368: LD_INT 15
62370: PUSH
62371: LD_INT 16
62373: PUSH
62374: LD_INT 20
62376: PUSH
62377: LD_INT 21
62379: PUSH
62380: LD_INT 22
62382: PUSH
62383: LD_INT 23
62385: PUSH
62386: LD_INT 25
62388: PUSH
62389: LD_INT 26
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 101
62410: PUSH
62411: LD_INT 102
62413: PUSH
62414: LD_INT 103
62416: PUSH
62417: LD_INT 105
62419: PUSH
62420: LD_INT 106
62422: PUSH
62423: LD_INT 108
62425: PUSH
62426: LD_INT 112
62428: PUSH
62429: LD_INT 116
62431: PUSH
62432: LD_INT 117
62434: PUSH
62435: LD_INT 118
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: ST_TO_ADDR
62454: GO 64857
62456: LD_INT 8
62458: DOUBLE
62459: EQUAL
62460: IFTRUE 62464
62462: GO 62604
62464: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
62465: LD_ADDR_VAR 0 2
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: LD_INT 4
62475: PUSH
62476: LD_INT 5
62478: PUSH
62479: LD_INT 6
62481: PUSH
62482: LD_INT 7
62484: PUSH
62485: LD_INT 8
62487: PUSH
62488: LD_INT 11
62490: PUSH
62491: LD_INT 12
62493: PUSH
62494: LD_INT 15
62496: PUSH
62497: LD_INT 16
62499: PUSH
62500: LD_INT 20
62502: PUSH
62503: LD_INT 21
62505: PUSH
62506: LD_INT 22
62508: PUSH
62509: LD_INT 23
62511: PUSH
62512: LD_INT 25
62514: PUSH
62515: LD_INT 26
62517: PUSH
62518: LD_INT 30
62520: PUSH
62521: LD_INT 31
62523: PUSH
62524: LD_INT 32
62526: PUSH
62527: LD_INT 36
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 101
62554: PUSH
62555: LD_INT 102
62557: PUSH
62558: LD_INT 103
62560: PUSH
62561: LD_INT 105
62563: PUSH
62564: LD_INT 106
62566: PUSH
62567: LD_INT 108
62569: PUSH
62570: LD_INT 109
62572: PUSH
62573: LD_INT 112
62575: PUSH
62576: LD_INT 116
62578: PUSH
62579: LD_INT 117
62581: PUSH
62582: LD_INT 118
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: ST_TO_ADDR
62602: GO 64857
62604: LD_INT 9
62606: DOUBLE
62607: EQUAL
62608: IFTRUE 62612
62610: GO 62760
62612: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
62613: LD_ADDR_VAR 0 2
62617: PUSH
62618: LD_INT 2
62620: PUSH
62621: LD_INT 4
62623: PUSH
62624: LD_INT 5
62626: PUSH
62627: LD_INT 6
62629: PUSH
62630: LD_INT 7
62632: PUSH
62633: LD_INT 8
62635: PUSH
62636: LD_INT 11
62638: PUSH
62639: LD_INT 12
62641: PUSH
62642: LD_INT 15
62644: PUSH
62645: LD_INT 16
62647: PUSH
62648: LD_INT 20
62650: PUSH
62651: LD_INT 21
62653: PUSH
62654: LD_INT 22
62656: PUSH
62657: LD_INT 23
62659: PUSH
62660: LD_INT 25
62662: PUSH
62663: LD_INT 26
62665: PUSH
62666: LD_INT 28
62668: PUSH
62669: LD_INT 30
62671: PUSH
62672: LD_INT 31
62674: PUSH
62675: LD_INT 32
62677: PUSH
62678: LD_INT 36
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 101
62706: PUSH
62707: LD_INT 102
62709: PUSH
62710: LD_INT 103
62712: PUSH
62713: LD_INT 105
62715: PUSH
62716: LD_INT 106
62718: PUSH
62719: LD_INT 108
62721: PUSH
62722: LD_INT 109
62724: PUSH
62725: LD_INT 112
62727: PUSH
62728: LD_INT 114
62730: PUSH
62731: LD_INT 116
62733: PUSH
62734: LD_INT 117
62736: PUSH
62737: LD_INT 118
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: ST_TO_ADDR
62758: GO 64857
62760: LD_INT 10
62762: DOUBLE
62763: EQUAL
62764: IFTRUE 62768
62766: GO 62964
62768: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
62769: LD_ADDR_VAR 0 2
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: LD_INT 4
62779: PUSH
62780: LD_INT 5
62782: PUSH
62783: LD_INT 6
62785: PUSH
62786: LD_INT 7
62788: PUSH
62789: LD_INT 8
62791: PUSH
62792: LD_INT 9
62794: PUSH
62795: LD_INT 10
62797: PUSH
62798: LD_INT 11
62800: PUSH
62801: LD_INT 12
62803: PUSH
62804: LD_INT 13
62806: PUSH
62807: LD_INT 14
62809: PUSH
62810: LD_INT 15
62812: PUSH
62813: LD_INT 16
62815: PUSH
62816: LD_INT 17
62818: PUSH
62819: LD_INT 18
62821: PUSH
62822: LD_INT 19
62824: PUSH
62825: LD_INT 20
62827: PUSH
62828: LD_INT 21
62830: PUSH
62831: LD_INT 22
62833: PUSH
62834: LD_INT 23
62836: PUSH
62837: LD_INT 24
62839: PUSH
62840: LD_INT 25
62842: PUSH
62843: LD_INT 26
62845: PUSH
62846: LD_INT 28
62848: PUSH
62849: LD_INT 30
62851: PUSH
62852: LD_INT 31
62854: PUSH
62855: LD_INT 32
62857: PUSH
62858: LD_INT 36
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 101
62894: PUSH
62895: LD_INT 102
62897: PUSH
62898: LD_INT 103
62900: PUSH
62901: LD_INT 104
62903: PUSH
62904: LD_INT 105
62906: PUSH
62907: LD_INT 106
62909: PUSH
62910: LD_INT 107
62912: PUSH
62913: LD_INT 108
62915: PUSH
62916: LD_INT 109
62918: PUSH
62919: LD_INT 110
62921: PUSH
62922: LD_INT 111
62924: PUSH
62925: LD_INT 112
62927: PUSH
62928: LD_INT 114
62930: PUSH
62931: LD_INT 116
62933: PUSH
62934: LD_INT 117
62936: PUSH
62937: LD_INT 118
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: ST_TO_ADDR
62962: GO 64857
62964: LD_INT 11
62966: DOUBLE
62967: EQUAL
62968: IFTRUE 62972
62970: GO 63176
62972: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
62973: LD_ADDR_VAR 0 2
62977: PUSH
62978: LD_INT 2
62980: PUSH
62981: LD_INT 3
62983: PUSH
62984: LD_INT 4
62986: PUSH
62987: LD_INT 5
62989: PUSH
62990: LD_INT 6
62992: PUSH
62993: LD_INT 7
62995: PUSH
62996: LD_INT 8
62998: PUSH
62999: LD_INT 9
63001: PUSH
63002: LD_INT 10
63004: PUSH
63005: LD_INT 11
63007: PUSH
63008: LD_INT 12
63010: PUSH
63011: LD_INT 13
63013: PUSH
63014: LD_INT 14
63016: PUSH
63017: LD_INT 15
63019: PUSH
63020: LD_INT 16
63022: PUSH
63023: LD_INT 17
63025: PUSH
63026: LD_INT 18
63028: PUSH
63029: LD_INT 19
63031: PUSH
63032: LD_INT 20
63034: PUSH
63035: LD_INT 21
63037: PUSH
63038: LD_INT 22
63040: PUSH
63041: LD_INT 23
63043: PUSH
63044: LD_INT 24
63046: PUSH
63047: LD_INT 25
63049: PUSH
63050: LD_INT 26
63052: PUSH
63053: LD_INT 28
63055: PUSH
63056: LD_INT 30
63058: PUSH
63059: LD_INT 31
63061: PUSH
63062: LD_INT 32
63064: PUSH
63065: LD_INT 34
63067: PUSH
63068: LD_INT 36
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 101
63106: PUSH
63107: LD_INT 102
63109: PUSH
63110: LD_INT 103
63112: PUSH
63113: LD_INT 104
63115: PUSH
63116: LD_INT 105
63118: PUSH
63119: LD_INT 106
63121: PUSH
63122: LD_INT 107
63124: PUSH
63125: LD_INT 108
63127: PUSH
63128: LD_INT 109
63130: PUSH
63131: LD_INT 110
63133: PUSH
63134: LD_INT 111
63136: PUSH
63137: LD_INT 112
63139: PUSH
63140: LD_INT 114
63142: PUSH
63143: LD_INT 116
63145: PUSH
63146: LD_INT 117
63148: PUSH
63149: LD_INT 118
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: ST_TO_ADDR
63174: GO 64857
63176: LD_INT 12
63178: DOUBLE
63179: EQUAL
63180: IFTRUE 63184
63182: GO 63404
63184: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
63185: LD_ADDR_VAR 0 2
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: LD_INT 3
63198: PUSH
63199: LD_INT 4
63201: PUSH
63202: LD_INT 5
63204: PUSH
63205: LD_INT 6
63207: PUSH
63208: LD_INT 7
63210: PUSH
63211: LD_INT 8
63213: PUSH
63214: LD_INT 9
63216: PUSH
63217: LD_INT 10
63219: PUSH
63220: LD_INT 11
63222: PUSH
63223: LD_INT 12
63225: PUSH
63226: LD_INT 13
63228: PUSH
63229: LD_INT 14
63231: PUSH
63232: LD_INT 15
63234: PUSH
63235: LD_INT 16
63237: PUSH
63238: LD_INT 17
63240: PUSH
63241: LD_INT 18
63243: PUSH
63244: LD_INT 19
63246: PUSH
63247: LD_INT 20
63249: PUSH
63250: LD_INT 21
63252: PUSH
63253: LD_INT 22
63255: PUSH
63256: LD_INT 23
63258: PUSH
63259: LD_INT 24
63261: PUSH
63262: LD_INT 25
63264: PUSH
63265: LD_INT 26
63267: PUSH
63268: LD_INT 27
63270: PUSH
63271: LD_INT 28
63273: PUSH
63274: LD_INT 30
63276: PUSH
63277: LD_INT 31
63279: PUSH
63280: LD_INT 32
63282: PUSH
63283: LD_INT 33
63285: PUSH
63286: LD_INT 34
63288: PUSH
63289: LD_INT 36
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 101
63330: PUSH
63331: LD_INT 102
63333: PUSH
63334: LD_INT 103
63336: PUSH
63337: LD_INT 104
63339: PUSH
63340: LD_INT 105
63342: PUSH
63343: LD_INT 106
63345: PUSH
63346: LD_INT 107
63348: PUSH
63349: LD_INT 108
63351: PUSH
63352: LD_INT 109
63354: PUSH
63355: LD_INT 110
63357: PUSH
63358: LD_INT 111
63360: PUSH
63361: LD_INT 112
63363: PUSH
63364: LD_INT 113
63366: PUSH
63367: LD_INT 114
63369: PUSH
63370: LD_INT 116
63372: PUSH
63373: LD_INT 117
63375: PUSH
63376: LD_INT 118
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: ST_TO_ADDR
63402: GO 64857
63404: LD_INT 13
63406: DOUBLE
63407: EQUAL
63408: IFTRUE 63412
63410: GO 63620
63412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
63413: LD_ADDR_VAR 0 2
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: LD_INT 3
63426: PUSH
63427: LD_INT 4
63429: PUSH
63430: LD_INT 5
63432: PUSH
63433: LD_INT 8
63435: PUSH
63436: LD_INT 9
63438: PUSH
63439: LD_INT 10
63441: PUSH
63442: LD_INT 11
63444: PUSH
63445: LD_INT 12
63447: PUSH
63448: LD_INT 14
63450: PUSH
63451: LD_INT 15
63453: PUSH
63454: LD_INT 16
63456: PUSH
63457: LD_INT 17
63459: PUSH
63460: LD_INT 18
63462: PUSH
63463: LD_INT 19
63465: PUSH
63466: LD_INT 20
63468: PUSH
63469: LD_INT 21
63471: PUSH
63472: LD_INT 22
63474: PUSH
63475: LD_INT 23
63477: PUSH
63478: LD_INT 24
63480: PUSH
63481: LD_INT 25
63483: PUSH
63484: LD_INT 26
63486: PUSH
63487: LD_INT 27
63489: PUSH
63490: LD_INT 28
63492: PUSH
63493: LD_INT 30
63495: PUSH
63496: LD_INT 31
63498: PUSH
63499: LD_INT 32
63501: PUSH
63502: LD_INT 33
63504: PUSH
63505: LD_INT 34
63507: PUSH
63508: LD_INT 36
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 101
63546: PUSH
63547: LD_INT 102
63549: PUSH
63550: LD_INT 103
63552: PUSH
63553: LD_INT 104
63555: PUSH
63556: LD_INT 105
63558: PUSH
63559: LD_INT 106
63561: PUSH
63562: LD_INT 107
63564: PUSH
63565: LD_INT 108
63567: PUSH
63568: LD_INT 109
63570: PUSH
63571: LD_INT 110
63573: PUSH
63574: LD_INT 111
63576: PUSH
63577: LD_INT 112
63579: PUSH
63580: LD_INT 113
63582: PUSH
63583: LD_INT 114
63585: PUSH
63586: LD_INT 116
63588: PUSH
63589: LD_INT 117
63591: PUSH
63592: LD_INT 118
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: ST_TO_ADDR
63618: GO 64857
63620: LD_INT 14
63622: DOUBLE
63623: EQUAL
63624: IFTRUE 63628
63626: GO 63852
63628: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
63629: LD_ADDR_VAR 0 2
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: LD_INT 2
63639: PUSH
63640: LD_INT 3
63642: PUSH
63643: LD_INT 4
63645: PUSH
63646: LD_INT 5
63648: PUSH
63649: LD_INT 6
63651: PUSH
63652: LD_INT 7
63654: PUSH
63655: LD_INT 8
63657: PUSH
63658: LD_INT 9
63660: PUSH
63661: LD_INT 10
63663: PUSH
63664: LD_INT 11
63666: PUSH
63667: LD_INT 12
63669: PUSH
63670: LD_INT 13
63672: PUSH
63673: LD_INT 14
63675: PUSH
63676: LD_INT 15
63678: PUSH
63679: LD_INT 16
63681: PUSH
63682: LD_INT 17
63684: PUSH
63685: LD_INT 18
63687: PUSH
63688: LD_INT 19
63690: PUSH
63691: LD_INT 20
63693: PUSH
63694: LD_INT 21
63696: PUSH
63697: LD_INT 22
63699: PUSH
63700: LD_INT 23
63702: PUSH
63703: LD_INT 24
63705: PUSH
63706: LD_INT 25
63708: PUSH
63709: LD_INT 26
63711: PUSH
63712: LD_INT 27
63714: PUSH
63715: LD_INT 28
63717: PUSH
63718: LD_INT 29
63720: PUSH
63721: LD_INT 30
63723: PUSH
63724: LD_INT 31
63726: PUSH
63727: LD_INT 32
63729: PUSH
63730: LD_INT 33
63732: PUSH
63733: LD_INT 34
63735: PUSH
63736: LD_INT 36
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 101
63778: PUSH
63779: LD_INT 102
63781: PUSH
63782: LD_INT 103
63784: PUSH
63785: LD_INT 104
63787: PUSH
63788: LD_INT 105
63790: PUSH
63791: LD_INT 106
63793: PUSH
63794: LD_INT 107
63796: PUSH
63797: LD_INT 108
63799: PUSH
63800: LD_INT 109
63802: PUSH
63803: LD_INT 110
63805: PUSH
63806: LD_INT 111
63808: PUSH
63809: LD_INT 112
63811: PUSH
63812: LD_INT 113
63814: PUSH
63815: LD_INT 114
63817: PUSH
63818: LD_INT 116
63820: PUSH
63821: LD_INT 117
63823: PUSH
63824: LD_INT 118
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: ST_TO_ADDR
63850: GO 64857
63852: LD_INT 15
63854: DOUBLE
63855: EQUAL
63856: IFTRUE 63860
63858: GO 64084
63860: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
63861: LD_ADDR_VAR 0 2
63865: PUSH
63866: LD_INT 1
63868: PUSH
63869: LD_INT 2
63871: PUSH
63872: LD_INT 3
63874: PUSH
63875: LD_INT 4
63877: PUSH
63878: LD_INT 5
63880: PUSH
63881: LD_INT 6
63883: PUSH
63884: LD_INT 7
63886: PUSH
63887: LD_INT 8
63889: PUSH
63890: LD_INT 9
63892: PUSH
63893: LD_INT 10
63895: PUSH
63896: LD_INT 11
63898: PUSH
63899: LD_INT 12
63901: PUSH
63902: LD_INT 13
63904: PUSH
63905: LD_INT 14
63907: PUSH
63908: LD_INT 15
63910: PUSH
63911: LD_INT 16
63913: PUSH
63914: LD_INT 17
63916: PUSH
63917: LD_INT 18
63919: PUSH
63920: LD_INT 19
63922: PUSH
63923: LD_INT 20
63925: PUSH
63926: LD_INT 21
63928: PUSH
63929: LD_INT 22
63931: PUSH
63932: LD_INT 23
63934: PUSH
63935: LD_INT 24
63937: PUSH
63938: LD_INT 25
63940: PUSH
63941: LD_INT 26
63943: PUSH
63944: LD_INT 27
63946: PUSH
63947: LD_INT 28
63949: PUSH
63950: LD_INT 29
63952: PUSH
63953: LD_INT 30
63955: PUSH
63956: LD_INT 31
63958: PUSH
63959: LD_INT 32
63961: PUSH
63962: LD_INT 33
63964: PUSH
63965: LD_INT 34
63967: PUSH
63968: LD_INT 36
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 101
64010: PUSH
64011: LD_INT 102
64013: PUSH
64014: LD_INT 103
64016: PUSH
64017: LD_INT 104
64019: PUSH
64020: LD_INT 105
64022: PUSH
64023: LD_INT 106
64025: PUSH
64026: LD_INT 107
64028: PUSH
64029: LD_INT 108
64031: PUSH
64032: LD_INT 109
64034: PUSH
64035: LD_INT 110
64037: PUSH
64038: LD_INT 111
64040: PUSH
64041: LD_INT 112
64043: PUSH
64044: LD_INT 113
64046: PUSH
64047: LD_INT 114
64049: PUSH
64050: LD_INT 116
64052: PUSH
64053: LD_INT 117
64055: PUSH
64056: LD_INT 118
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: ST_TO_ADDR
64082: GO 64857
64084: LD_INT 16
64086: DOUBLE
64087: EQUAL
64088: IFTRUE 64092
64090: GO 64228
64092: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
64093: LD_ADDR_VAR 0 2
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: LD_INT 4
64103: PUSH
64104: LD_INT 5
64106: PUSH
64107: LD_INT 7
64109: PUSH
64110: LD_INT 11
64112: PUSH
64113: LD_INT 12
64115: PUSH
64116: LD_INT 15
64118: PUSH
64119: LD_INT 16
64121: PUSH
64122: LD_INT 20
64124: PUSH
64125: LD_INT 21
64127: PUSH
64128: LD_INT 22
64130: PUSH
64131: LD_INT 23
64133: PUSH
64134: LD_INT 25
64136: PUSH
64137: LD_INT 26
64139: PUSH
64140: LD_INT 30
64142: PUSH
64143: LD_INT 31
64145: PUSH
64146: LD_INT 32
64148: PUSH
64149: LD_INT 33
64151: PUSH
64152: LD_INT 34
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 101
64178: PUSH
64179: LD_INT 102
64181: PUSH
64182: LD_INT 103
64184: PUSH
64185: LD_INT 106
64187: PUSH
64188: LD_INT 108
64190: PUSH
64191: LD_INT 112
64193: PUSH
64194: LD_INT 113
64196: PUSH
64197: LD_INT 114
64199: PUSH
64200: LD_INT 116
64202: PUSH
64203: LD_INT 117
64205: PUSH
64206: LD_INT 118
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: ST_TO_ADDR
64226: GO 64857
64228: LD_INT 17
64230: DOUBLE
64231: EQUAL
64232: IFTRUE 64236
64234: GO 64460
64236: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
64237: LD_ADDR_VAR 0 2
64241: PUSH
64242: LD_INT 1
64244: PUSH
64245: LD_INT 2
64247: PUSH
64248: LD_INT 3
64250: PUSH
64251: LD_INT 4
64253: PUSH
64254: LD_INT 5
64256: PUSH
64257: LD_INT 6
64259: PUSH
64260: LD_INT 7
64262: PUSH
64263: LD_INT 8
64265: PUSH
64266: LD_INT 9
64268: PUSH
64269: LD_INT 10
64271: PUSH
64272: LD_INT 11
64274: PUSH
64275: LD_INT 12
64277: PUSH
64278: LD_INT 13
64280: PUSH
64281: LD_INT 14
64283: PUSH
64284: LD_INT 15
64286: PUSH
64287: LD_INT 16
64289: PUSH
64290: LD_INT 17
64292: PUSH
64293: LD_INT 18
64295: PUSH
64296: LD_INT 19
64298: PUSH
64299: LD_INT 20
64301: PUSH
64302: LD_INT 21
64304: PUSH
64305: LD_INT 22
64307: PUSH
64308: LD_INT 23
64310: PUSH
64311: LD_INT 24
64313: PUSH
64314: LD_INT 25
64316: PUSH
64317: LD_INT 26
64319: PUSH
64320: LD_INT 27
64322: PUSH
64323: LD_INT 28
64325: PUSH
64326: LD_INT 29
64328: PUSH
64329: LD_INT 30
64331: PUSH
64332: LD_INT 31
64334: PUSH
64335: LD_INT 32
64337: PUSH
64338: LD_INT 33
64340: PUSH
64341: LD_INT 34
64343: PUSH
64344: LD_INT 36
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 101
64386: PUSH
64387: LD_INT 102
64389: PUSH
64390: LD_INT 103
64392: PUSH
64393: LD_INT 104
64395: PUSH
64396: LD_INT 105
64398: PUSH
64399: LD_INT 106
64401: PUSH
64402: LD_INT 107
64404: PUSH
64405: LD_INT 108
64407: PUSH
64408: LD_INT 109
64410: PUSH
64411: LD_INT 110
64413: PUSH
64414: LD_INT 111
64416: PUSH
64417: LD_INT 112
64419: PUSH
64420: LD_INT 113
64422: PUSH
64423: LD_INT 114
64425: PUSH
64426: LD_INT 116
64428: PUSH
64429: LD_INT 117
64431: PUSH
64432: LD_INT 118
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: ST_TO_ADDR
64458: GO 64857
64460: LD_INT 18
64462: DOUBLE
64463: EQUAL
64464: IFTRUE 64468
64466: GO 64616
64468: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
64469: LD_ADDR_VAR 0 2
64473: PUSH
64474: LD_INT 2
64476: PUSH
64477: LD_INT 4
64479: PUSH
64480: LD_INT 5
64482: PUSH
64483: LD_INT 7
64485: PUSH
64486: LD_INT 11
64488: PUSH
64489: LD_INT 12
64491: PUSH
64492: LD_INT 15
64494: PUSH
64495: LD_INT 16
64497: PUSH
64498: LD_INT 20
64500: PUSH
64501: LD_INT 21
64503: PUSH
64504: LD_INT 22
64506: PUSH
64507: LD_INT 23
64509: PUSH
64510: LD_INT 25
64512: PUSH
64513: LD_INT 26
64515: PUSH
64516: LD_INT 30
64518: PUSH
64519: LD_INT 31
64521: PUSH
64522: LD_INT 32
64524: PUSH
64525: LD_INT 33
64527: PUSH
64528: LD_INT 34
64530: PUSH
64531: LD_INT 35
64533: PUSH
64534: LD_INT 36
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 101
64562: PUSH
64563: LD_INT 102
64565: PUSH
64566: LD_INT 103
64568: PUSH
64569: LD_INT 106
64571: PUSH
64572: LD_INT 108
64574: PUSH
64575: LD_INT 112
64577: PUSH
64578: LD_INT 113
64580: PUSH
64581: LD_INT 114
64583: PUSH
64584: LD_INT 115
64586: PUSH
64587: LD_INT 116
64589: PUSH
64590: LD_INT 117
64592: PUSH
64593: LD_INT 118
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: ST_TO_ADDR
64614: GO 64857
64616: LD_INT 19
64618: DOUBLE
64619: EQUAL
64620: IFTRUE 64624
64622: GO 64856
64624: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
64625: LD_ADDR_VAR 0 2
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: LD_INT 3
64638: PUSH
64639: LD_INT 4
64641: PUSH
64642: LD_INT 5
64644: PUSH
64645: LD_INT 6
64647: PUSH
64648: LD_INT 7
64650: PUSH
64651: LD_INT 8
64653: PUSH
64654: LD_INT 9
64656: PUSH
64657: LD_INT 10
64659: PUSH
64660: LD_INT 11
64662: PUSH
64663: LD_INT 12
64665: PUSH
64666: LD_INT 13
64668: PUSH
64669: LD_INT 14
64671: PUSH
64672: LD_INT 15
64674: PUSH
64675: LD_INT 16
64677: PUSH
64678: LD_INT 17
64680: PUSH
64681: LD_INT 18
64683: PUSH
64684: LD_INT 19
64686: PUSH
64687: LD_INT 20
64689: PUSH
64690: LD_INT 21
64692: PUSH
64693: LD_INT 22
64695: PUSH
64696: LD_INT 23
64698: PUSH
64699: LD_INT 24
64701: PUSH
64702: LD_INT 25
64704: PUSH
64705: LD_INT 26
64707: PUSH
64708: LD_INT 27
64710: PUSH
64711: LD_INT 28
64713: PUSH
64714: LD_INT 29
64716: PUSH
64717: LD_INT 30
64719: PUSH
64720: LD_INT 31
64722: PUSH
64723: LD_INT 32
64725: PUSH
64726: LD_INT 33
64728: PUSH
64729: LD_INT 34
64731: PUSH
64732: LD_INT 35
64734: PUSH
64735: LD_INT 36
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 101
64778: PUSH
64779: LD_INT 102
64781: PUSH
64782: LD_INT 103
64784: PUSH
64785: LD_INT 104
64787: PUSH
64788: LD_INT 105
64790: PUSH
64791: LD_INT 106
64793: PUSH
64794: LD_INT 107
64796: PUSH
64797: LD_INT 108
64799: PUSH
64800: LD_INT 109
64802: PUSH
64803: LD_INT 110
64805: PUSH
64806: LD_INT 111
64808: PUSH
64809: LD_INT 112
64811: PUSH
64812: LD_INT 113
64814: PUSH
64815: LD_INT 114
64817: PUSH
64818: LD_INT 115
64820: PUSH
64821: LD_INT 116
64823: PUSH
64824: LD_INT 117
64826: PUSH
64827: LD_INT 118
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: ST_TO_ADDR
64854: GO 64857
64856: POP
// end else
64857: GO 65088
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
64859: LD_ADDR_VAR 0 2
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: LD_INT 3
64872: PUSH
64873: LD_INT 4
64875: PUSH
64876: LD_INT 5
64878: PUSH
64879: LD_INT 6
64881: PUSH
64882: LD_INT 7
64884: PUSH
64885: LD_INT 8
64887: PUSH
64888: LD_INT 9
64890: PUSH
64891: LD_INT 10
64893: PUSH
64894: LD_INT 11
64896: PUSH
64897: LD_INT 12
64899: PUSH
64900: LD_INT 13
64902: PUSH
64903: LD_INT 14
64905: PUSH
64906: LD_INT 15
64908: PUSH
64909: LD_INT 16
64911: PUSH
64912: LD_INT 17
64914: PUSH
64915: LD_INT 18
64917: PUSH
64918: LD_INT 19
64920: PUSH
64921: LD_INT 20
64923: PUSH
64924: LD_INT 21
64926: PUSH
64927: LD_INT 22
64929: PUSH
64930: LD_INT 23
64932: PUSH
64933: LD_INT 24
64935: PUSH
64936: LD_INT 25
64938: PUSH
64939: LD_INT 26
64941: PUSH
64942: LD_INT 27
64944: PUSH
64945: LD_INT 28
64947: PUSH
64948: LD_INT 29
64950: PUSH
64951: LD_INT 30
64953: PUSH
64954: LD_INT 31
64956: PUSH
64957: LD_INT 32
64959: PUSH
64960: LD_INT 33
64962: PUSH
64963: LD_INT 34
64965: PUSH
64966: LD_INT 35
64968: PUSH
64969: LD_INT 36
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 101
65012: PUSH
65013: LD_INT 102
65015: PUSH
65016: LD_INT 103
65018: PUSH
65019: LD_INT 104
65021: PUSH
65022: LD_INT 105
65024: PUSH
65025: LD_INT 106
65027: PUSH
65028: LD_INT 107
65030: PUSH
65031: LD_INT 108
65033: PUSH
65034: LD_INT 109
65036: PUSH
65037: LD_INT 110
65039: PUSH
65040: LD_INT 111
65042: PUSH
65043: LD_INT 112
65045: PUSH
65046: LD_INT 113
65048: PUSH
65049: LD_INT 114
65051: PUSH
65052: LD_INT 115
65054: PUSH
65055: LD_INT 116
65057: PUSH
65058: LD_INT 117
65060: PUSH
65061: LD_INT 118
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: ST_TO_ADDR
// if result then
65088: LD_VAR 0 2
65092: IFFALSE 65878
// begin normal :=  ;
65094: LD_ADDR_VAR 0 5
65098: PUSH
65099: LD_STRING 
65101: ST_TO_ADDR
// hardcore :=  ;
65102: LD_ADDR_VAR 0 6
65106: PUSH
65107: LD_STRING 
65109: ST_TO_ADDR
// active :=  ;
65110: LD_ADDR_VAR 0 7
65114: PUSH
65115: LD_STRING 
65117: ST_TO_ADDR
// for i = 1 to normalCounter do
65118: LD_ADDR_VAR 0 8
65122: PUSH
65123: DOUBLE
65124: LD_INT 1
65126: DEC
65127: ST_TO_ADDR
65128: LD_EXP 52
65132: PUSH
65133: FOR_TO
65134: IFFALSE 65235
// begin tmp := 0 ;
65136: LD_ADDR_VAR 0 3
65140: PUSH
65141: LD_STRING 0
65143: ST_TO_ADDR
// if result [ 1 ] then
65144: LD_VAR 0 2
65148: PUSH
65149: LD_INT 1
65151: ARRAY
65152: IFFALSE 65217
// if result [ 1 ] [ 1 ] = i then
65154: LD_VAR 0 2
65158: PUSH
65159: LD_INT 1
65161: ARRAY
65162: PUSH
65163: LD_INT 1
65165: ARRAY
65166: PUSH
65167: LD_VAR 0 8
65171: EQUAL
65172: IFFALSE 65217
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
65174: LD_ADDR_VAR 0 2
65178: PUSH
65179: LD_VAR 0 2
65183: PPUSH
65184: LD_INT 1
65186: PPUSH
65187: LD_VAR 0 2
65191: PUSH
65192: LD_INT 1
65194: ARRAY
65195: PPUSH
65196: LD_INT 1
65198: PPUSH
65199: CALL_OW 3
65203: PPUSH
65204: CALL_OW 1
65208: ST_TO_ADDR
// tmp := 1 ;
65209: LD_ADDR_VAR 0 3
65213: PUSH
65214: LD_STRING 1
65216: ST_TO_ADDR
// end ; normal := normal & tmp ;
65217: LD_ADDR_VAR 0 5
65221: PUSH
65222: LD_VAR 0 5
65226: PUSH
65227: LD_VAR 0 3
65231: STR
65232: ST_TO_ADDR
// end ;
65233: GO 65133
65235: POP
65236: POP
// for i = 1 to hardcoreCounter do
65237: LD_ADDR_VAR 0 8
65241: PUSH
65242: DOUBLE
65243: LD_INT 1
65245: DEC
65246: ST_TO_ADDR
65247: LD_EXP 53
65251: PUSH
65252: FOR_TO
65253: IFFALSE 65358
// begin tmp := 0 ;
65255: LD_ADDR_VAR 0 3
65259: PUSH
65260: LD_STRING 0
65262: ST_TO_ADDR
// if result [ 2 ] then
65263: LD_VAR 0 2
65267: PUSH
65268: LD_INT 2
65270: ARRAY
65271: IFFALSE 65340
// if result [ 2 ] [ 1 ] = 100 + i then
65273: LD_VAR 0 2
65277: PUSH
65278: LD_INT 2
65280: ARRAY
65281: PUSH
65282: LD_INT 1
65284: ARRAY
65285: PUSH
65286: LD_INT 100
65288: PUSH
65289: LD_VAR 0 8
65293: PLUS
65294: EQUAL
65295: IFFALSE 65340
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
65297: LD_ADDR_VAR 0 2
65301: PUSH
65302: LD_VAR 0 2
65306: PPUSH
65307: LD_INT 2
65309: PPUSH
65310: LD_VAR 0 2
65314: PUSH
65315: LD_INT 2
65317: ARRAY
65318: PPUSH
65319: LD_INT 1
65321: PPUSH
65322: CALL_OW 3
65326: PPUSH
65327: CALL_OW 1
65331: ST_TO_ADDR
// tmp := 1 ;
65332: LD_ADDR_VAR 0 3
65336: PUSH
65337: LD_STRING 1
65339: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
65340: LD_ADDR_VAR 0 6
65344: PUSH
65345: LD_VAR 0 6
65349: PUSH
65350: LD_VAR 0 3
65354: STR
65355: ST_TO_ADDR
// end ;
65356: GO 65252
65358: POP
65359: POP
// if isGameLoad then
65360: LD_VAR 0 1
65364: IFFALSE 65839
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
65366: LD_ADDR_VAR 0 4
65370: PUSH
65371: LD_EXP 56
65375: PUSH
65376: LD_EXP 55
65380: PUSH
65381: LD_EXP 57
65385: PUSH
65386: LD_EXP 54
65390: PUSH
65391: LD_EXP 58
65395: PUSH
65396: LD_EXP 59
65400: PUSH
65401: LD_EXP 60
65405: PUSH
65406: LD_EXP 61
65410: PUSH
65411: LD_EXP 62
65415: PUSH
65416: LD_EXP 63
65420: PUSH
65421: LD_EXP 64
65425: PUSH
65426: LD_EXP 65
65430: PUSH
65431: LD_EXP 66
65435: PUSH
65436: LD_EXP 67
65440: PUSH
65441: LD_EXP 75
65445: PUSH
65446: LD_EXP 76
65450: PUSH
65451: LD_EXP 77
65455: PUSH
65456: LD_EXP 78
65460: PUSH
65461: LD_EXP 80
65465: PUSH
65466: LD_EXP 81
65470: PUSH
65471: LD_EXP 82
65475: PUSH
65476: LD_EXP 85
65480: PUSH
65481: LD_EXP 87
65485: PUSH
65486: LD_EXP 88
65490: PUSH
65491: LD_EXP 89
65495: PUSH
65496: LD_EXP 91
65500: PUSH
65501: LD_EXP 92
65505: PUSH
65506: LD_EXP 95
65510: PUSH
65511: LD_EXP 96
65515: PUSH
65516: LD_EXP 97
65520: PUSH
65521: LD_EXP 98
65525: PUSH
65526: LD_EXP 99
65530: PUSH
65531: LD_EXP 100
65535: PUSH
65536: LD_EXP 101
65540: PUSH
65541: LD_EXP 102
65545: PUSH
65546: LD_EXP 103
65550: PUSH
65551: LD_EXP 68
65555: PUSH
65556: LD_EXP 69
65560: PUSH
65561: LD_EXP 72
65565: PUSH
65566: LD_EXP 73
65570: PUSH
65571: LD_EXP 74
65575: PUSH
65576: LD_EXP 70
65580: PUSH
65581: LD_EXP 71
65585: PUSH
65586: LD_EXP 79
65590: PUSH
65591: LD_EXP 83
65595: PUSH
65596: LD_EXP 84
65600: PUSH
65601: LD_EXP 86
65605: PUSH
65606: LD_EXP 90
65610: PUSH
65611: LD_EXP 93
65615: PUSH
65616: LD_EXP 94
65620: PUSH
65621: LD_EXP 104
65625: PUSH
65626: LD_EXP 105
65630: PUSH
65631: LD_EXP 106
65635: PUSH
65636: LD_EXP 107
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: ST_TO_ADDR
// tmp :=  ;
65697: LD_ADDR_VAR 0 3
65701: PUSH
65702: LD_STRING 
65704: ST_TO_ADDR
// for i = 1 to normalCounter do
65705: LD_ADDR_VAR 0 8
65709: PUSH
65710: DOUBLE
65711: LD_INT 1
65713: DEC
65714: ST_TO_ADDR
65715: LD_EXP 52
65719: PUSH
65720: FOR_TO
65721: IFFALSE 65757
// begin if flags [ i ] then
65723: LD_VAR 0 4
65727: PUSH
65728: LD_VAR 0 8
65732: ARRAY
65733: IFFALSE 65755
// tmp := tmp & i & ; ;
65735: LD_ADDR_VAR 0 3
65739: PUSH
65740: LD_VAR 0 3
65744: PUSH
65745: LD_VAR 0 8
65749: STR
65750: PUSH
65751: LD_STRING ;
65753: STR
65754: ST_TO_ADDR
// end ;
65755: GO 65720
65757: POP
65758: POP
// for i = 1 to hardcoreCounter do
65759: LD_ADDR_VAR 0 8
65763: PUSH
65764: DOUBLE
65765: LD_INT 1
65767: DEC
65768: ST_TO_ADDR
65769: LD_EXP 53
65773: PUSH
65774: FOR_TO
65775: IFFALSE 65821
// begin if flags [ normalCounter + i ] then
65777: LD_VAR 0 4
65781: PUSH
65782: LD_EXP 52
65786: PUSH
65787: LD_VAR 0 8
65791: PLUS
65792: ARRAY
65793: IFFALSE 65819
// tmp := tmp & ( 100 + i ) & ; ;
65795: LD_ADDR_VAR 0 3
65799: PUSH
65800: LD_VAR 0 3
65804: PUSH
65805: LD_INT 100
65807: PUSH
65808: LD_VAR 0 8
65812: PLUS
65813: STR
65814: PUSH
65815: LD_STRING ;
65817: STR
65818: ST_TO_ADDR
// end ;
65819: GO 65774
65821: POP
65822: POP
// if tmp then
65823: LD_VAR 0 3
65827: IFFALSE 65839
// active := tmp ;
65829: LD_ADDR_VAR 0 7
65833: PUSH
65834: LD_VAR 0 3
65838: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
65839: LD_STRING getStreamItemsFromMission("
65841: PUSH
65842: LD_VAR 0 5
65846: STR
65847: PUSH
65848: LD_STRING ","
65850: STR
65851: PUSH
65852: LD_VAR 0 6
65856: STR
65857: PUSH
65858: LD_STRING ","
65860: STR
65861: PUSH
65862: LD_VAR 0 7
65866: STR
65867: PUSH
65868: LD_STRING ")
65870: STR
65871: PPUSH
65872: CALL_OW 559
// end else
65876: GO 65885
// ToLua ( getStreamItemsFromMission("","","") ) ;
65878: LD_STRING getStreamItemsFromMission("","","")
65880: PPUSH
65881: CALL_OW 559
// end ;
65885: LD_VAR 0 2
65889: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
65890: LD_EXP 51
65894: PUSH
65895: LD_EXP 56
65899: AND
65900: IFFALSE 66024
65902: GO 65904
65904: DISABLE
65905: LD_INT 0
65907: PPUSH
65908: PPUSH
// begin enable ;
65909: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
65910: LD_ADDR_VAR 0 2
65914: PUSH
65915: LD_INT 22
65917: PUSH
65918: LD_OWVAR 2
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: LD_INT 34
65932: PUSH
65933: LD_INT 7
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 34
65942: PUSH
65943: LD_INT 45
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 34
65952: PUSH
65953: LD_INT 28
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 34
65962: PUSH
65963: LD_INT 47
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PPUSH
65981: CALL_OW 69
65985: ST_TO_ADDR
// if not tmp then
65986: LD_VAR 0 2
65990: NOT
65991: IFFALSE 65995
// exit ;
65993: GO 66024
// for i in tmp do
65995: LD_ADDR_VAR 0 1
65999: PUSH
66000: LD_VAR 0 2
66004: PUSH
66005: FOR_IN
66006: IFFALSE 66022
// begin SetLives ( i , 0 ) ;
66008: LD_VAR 0 1
66012: PPUSH
66013: LD_INT 0
66015: PPUSH
66016: CALL_OW 234
// end ;
66020: GO 66005
66022: POP
66023: POP
// end ;
66024: PPOPN 2
66026: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
66027: LD_EXP 51
66031: PUSH
66032: LD_EXP 57
66036: AND
66037: IFFALSE 66121
66039: GO 66041
66041: DISABLE
66042: LD_INT 0
66044: PPUSH
66045: PPUSH
// begin enable ;
66046: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
66047: LD_ADDR_VAR 0 2
66051: PUSH
66052: LD_INT 22
66054: PUSH
66055: LD_OWVAR 2
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 32
66066: PUSH
66067: LD_INT 3
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PPUSH
66078: CALL_OW 69
66082: ST_TO_ADDR
// if not tmp then
66083: LD_VAR 0 2
66087: NOT
66088: IFFALSE 66092
// exit ;
66090: GO 66121
// for i in tmp do
66092: LD_ADDR_VAR 0 1
66096: PUSH
66097: LD_VAR 0 2
66101: PUSH
66102: FOR_IN
66103: IFFALSE 66119
// begin SetLives ( i , 0 ) ;
66105: LD_VAR 0 1
66109: PPUSH
66110: LD_INT 0
66112: PPUSH
66113: CALL_OW 234
// end ;
66117: GO 66102
66119: POP
66120: POP
// end ;
66121: PPOPN 2
66123: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
66124: LD_EXP 51
66128: PUSH
66129: LD_EXP 54
66133: AND
66134: IFFALSE 66227
66136: GO 66138
66138: DISABLE
66139: LD_INT 0
66141: PPUSH
// begin enable ;
66142: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
66143: LD_ADDR_VAR 0 1
66147: PUSH
66148: LD_INT 22
66150: PUSH
66151: LD_OWVAR 2
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 2
66162: PUSH
66163: LD_INT 25
66165: PUSH
66166: LD_INT 5
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 25
66175: PUSH
66176: LD_INT 9
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 25
66185: PUSH
66186: LD_INT 8
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PPUSH
66203: CALL_OW 69
66207: PUSH
66208: FOR_IN
66209: IFFALSE 66225
// begin SetClass ( i , 1 ) ;
66211: LD_VAR 0 1
66215: PPUSH
66216: LD_INT 1
66218: PPUSH
66219: CALL_OW 336
// end ;
66223: GO 66208
66225: POP
66226: POP
// end ;
66227: PPOPN 1
66229: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
66230: LD_EXP 51
66234: PUSH
66235: LD_EXP 55
66239: AND
66240: PUSH
66241: LD_OWVAR 65
66245: PUSH
66246: LD_INT 7
66248: LESS
66249: AND
66250: IFFALSE 66264
66252: GO 66254
66254: DISABLE
// begin enable ;
66255: ENABLE
// game_speed := 7 ;
66256: LD_ADDR_OWVAR 65
66260: PUSH
66261: LD_INT 7
66263: ST_TO_ADDR
// end ;
66264: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
66265: LD_EXP 51
66269: PUSH
66270: LD_EXP 58
66274: AND
66275: IFFALSE 66477
66277: GO 66279
66279: DISABLE
66280: LD_INT 0
66282: PPUSH
66283: PPUSH
66284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
66285: LD_ADDR_VAR 0 3
66289: PUSH
66290: LD_INT 81
66292: PUSH
66293: LD_OWVAR 2
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 21
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PPUSH
66316: CALL_OW 69
66320: ST_TO_ADDR
// if not tmp then
66321: LD_VAR 0 3
66325: NOT
66326: IFFALSE 66330
// exit ;
66328: GO 66477
// if tmp > 5 then
66330: LD_VAR 0 3
66334: PUSH
66335: LD_INT 5
66337: GREATER
66338: IFFALSE 66350
// k := 5 else
66340: LD_ADDR_VAR 0 2
66344: PUSH
66345: LD_INT 5
66347: ST_TO_ADDR
66348: GO 66360
// k := tmp ;
66350: LD_ADDR_VAR 0 2
66354: PUSH
66355: LD_VAR 0 3
66359: ST_TO_ADDR
// for i := 1 to k do
66360: LD_ADDR_VAR 0 1
66364: PUSH
66365: DOUBLE
66366: LD_INT 1
66368: DEC
66369: ST_TO_ADDR
66370: LD_VAR 0 2
66374: PUSH
66375: FOR_TO
66376: IFFALSE 66475
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
66378: LD_VAR 0 3
66382: PUSH
66383: LD_VAR 0 1
66387: ARRAY
66388: PPUSH
66389: LD_VAR 0 1
66393: PUSH
66394: LD_INT 4
66396: MOD
66397: PUSH
66398: LD_INT 1
66400: PLUS
66401: PPUSH
66402: CALL_OW 259
66406: PUSH
66407: LD_INT 10
66409: LESS
66410: IFFALSE 66473
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
66412: LD_VAR 0 3
66416: PUSH
66417: LD_VAR 0 1
66421: ARRAY
66422: PPUSH
66423: LD_VAR 0 1
66427: PUSH
66428: LD_INT 4
66430: MOD
66431: PUSH
66432: LD_INT 1
66434: PLUS
66435: PPUSH
66436: LD_VAR 0 3
66440: PUSH
66441: LD_VAR 0 1
66445: ARRAY
66446: PPUSH
66447: LD_VAR 0 1
66451: PUSH
66452: LD_INT 4
66454: MOD
66455: PUSH
66456: LD_INT 1
66458: PLUS
66459: PPUSH
66460: CALL_OW 259
66464: PUSH
66465: LD_INT 1
66467: PLUS
66468: PPUSH
66469: CALL_OW 237
66473: GO 66375
66475: POP
66476: POP
// end ;
66477: PPOPN 3
66479: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
66480: LD_EXP 51
66484: PUSH
66485: LD_EXP 59
66489: AND
66490: IFFALSE 66510
66492: GO 66494
66494: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
66495: LD_INT 4
66497: PPUSH
66498: LD_OWVAR 2
66502: PPUSH
66503: LD_INT 0
66505: PPUSH
66506: CALL_OW 324
66510: END
// every 0 0$1 trigger StreamModeActive and sShovel do
66511: LD_EXP 51
66515: PUSH
66516: LD_EXP 88
66520: AND
66521: IFFALSE 66541
66523: GO 66525
66525: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
66526: LD_INT 19
66528: PPUSH
66529: LD_OWVAR 2
66533: PPUSH
66534: LD_INT 0
66536: PPUSH
66537: CALL_OW 324
66541: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
66542: LD_EXP 51
66546: PUSH
66547: LD_EXP 60
66551: AND
66552: IFFALSE 66654
66554: GO 66556
66556: DISABLE
66557: LD_INT 0
66559: PPUSH
66560: PPUSH
// begin enable ;
66561: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
66562: LD_ADDR_VAR 0 2
66566: PUSH
66567: LD_INT 22
66569: PUSH
66570: LD_OWVAR 2
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 2
66581: PUSH
66582: LD_INT 34
66584: PUSH
66585: LD_INT 11
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 34
66594: PUSH
66595: LD_INT 30
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: LIST
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PPUSH
66611: CALL_OW 69
66615: ST_TO_ADDR
// if not tmp then
66616: LD_VAR 0 2
66620: NOT
66621: IFFALSE 66625
// exit ;
66623: GO 66654
// for i in tmp do
66625: LD_ADDR_VAR 0 1
66629: PUSH
66630: LD_VAR 0 2
66634: PUSH
66635: FOR_IN
66636: IFFALSE 66652
// begin SetLives ( i , 0 ) ;
66638: LD_VAR 0 1
66642: PPUSH
66643: LD_INT 0
66645: PPUSH
66646: CALL_OW 234
// end ;
66650: GO 66635
66652: POP
66653: POP
// end ;
66654: PPOPN 2
66656: END
// every 0 0$1 trigger StreamModeActive and sBunker do
66657: LD_EXP 51
66661: PUSH
66662: LD_EXP 61
66666: AND
66667: IFFALSE 66687
66669: GO 66671
66671: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
66672: LD_INT 32
66674: PPUSH
66675: LD_OWVAR 2
66679: PPUSH
66680: LD_INT 0
66682: PPUSH
66683: CALL_OW 324
66687: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
66688: LD_EXP 51
66692: PUSH
66693: LD_EXP 62
66697: AND
66698: IFFALSE 66879
66700: GO 66702
66702: DISABLE
66703: LD_INT 0
66705: PPUSH
66706: PPUSH
66707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
66708: LD_ADDR_VAR 0 2
66712: PUSH
66713: LD_INT 22
66715: PUSH
66716: LD_OWVAR 2
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 33
66727: PUSH
66728: LD_INT 3
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PPUSH
66739: CALL_OW 69
66743: ST_TO_ADDR
// if not tmp then
66744: LD_VAR 0 2
66748: NOT
66749: IFFALSE 66753
// exit ;
66751: GO 66879
// side := 0 ;
66753: LD_ADDR_VAR 0 3
66757: PUSH
66758: LD_INT 0
66760: ST_TO_ADDR
// for i := 1 to 8 do
66761: LD_ADDR_VAR 0 1
66765: PUSH
66766: DOUBLE
66767: LD_INT 1
66769: DEC
66770: ST_TO_ADDR
66771: LD_INT 8
66773: PUSH
66774: FOR_TO
66775: IFFALSE 66823
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
66777: LD_OWVAR 2
66781: PUSH
66782: LD_VAR 0 1
66786: NONEQUAL
66787: PUSH
66788: LD_OWVAR 2
66792: PPUSH
66793: LD_VAR 0 1
66797: PPUSH
66798: CALL_OW 81
66802: PUSH
66803: LD_INT 2
66805: EQUAL
66806: AND
66807: IFFALSE 66821
// begin side := i ;
66809: LD_ADDR_VAR 0 3
66813: PUSH
66814: LD_VAR 0 1
66818: ST_TO_ADDR
// break ;
66819: GO 66823
// end ;
66821: GO 66774
66823: POP
66824: POP
// if not side then
66825: LD_VAR 0 3
66829: NOT
66830: IFFALSE 66834
// exit ;
66832: GO 66879
// for i := 1 to tmp do
66834: LD_ADDR_VAR 0 1
66838: PUSH
66839: DOUBLE
66840: LD_INT 1
66842: DEC
66843: ST_TO_ADDR
66844: LD_VAR 0 2
66848: PUSH
66849: FOR_TO
66850: IFFALSE 66877
// if Prob ( 60 ) then
66852: LD_INT 60
66854: PPUSH
66855: CALL_OW 13
66859: IFFALSE 66875
// SetSide ( i , side ) ;
66861: LD_VAR 0 1
66865: PPUSH
66866: LD_VAR 0 3
66870: PPUSH
66871: CALL_OW 235
66875: GO 66849
66877: POP
66878: POP
// end ;
66879: PPOPN 3
66881: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
66882: LD_EXP 51
66886: PUSH
66887: LD_EXP 64
66891: AND
66892: IFFALSE 67011
66894: GO 66896
66896: DISABLE
66897: LD_INT 0
66899: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
66900: LD_ADDR_VAR 0 1
66904: PUSH
66905: LD_INT 22
66907: PUSH
66908: LD_OWVAR 2
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 21
66919: PUSH
66920: LD_INT 1
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 3
66929: PUSH
66930: LD_INT 23
66932: PUSH
66933: LD_INT 0
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: PPUSH
66949: CALL_OW 69
66953: PUSH
66954: FOR_IN
66955: IFFALSE 67009
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
66957: LD_VAR 0 1
66961: PPUSH
66962: CALL_OW 257
66966: PUSH
66967: LD_INT 1
66969: PUSH
66970: LD_INT 2
66972: PUSH
66973: LD_INT 3
66975: PUSH
66976: LD_INT 4
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: IN
66985: IFFALSE 67007
// SetClass ( un , rand ( 1 , 4 ) ) ;
66987: LD_VAR 0 1
66991: PPUSH
66992: LD_INT 1
66994: PPUSH
66995: LD_INT 4
66997: PPUSH
66998: CALL_OW 12
67002: PPUSH
67003: CALL_OW 336
67007: GO 66954
67009: POP
67010: POP
// end ;
67011: PPOPN 1
67013: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
67014: LD_EXP 51
67018: PUSH
67019: LD_EXP 63
67023: AND
67024: IFFALSE 67103
67026: GO 67028
67028: DISABLE
67029: LD_INT 0
67031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67032: LD_ADDR_VAR 0 1
67036: PUSH
67037: LD_INT 22
67039: PUSH
67040: LD_OWVAR 2
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 21
67051: PUSH
67052: LD_INT 3
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PPUSH
67063: CALL_OW 69
67067: ST_TO_ADDR
// if not tmp then
67068: LD_VAR 0 1
67072: NOT
67073: IFFALSE 67077
// exit ;
67075: GO 67103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
67077: LD_VAR 0 1
67081: PUSH
67082: LD_INT 1
67084: PPUSH
67085: LD_VAR 0 1
67089: PPUSH
67090: CALL_OW 12
67094: ARRAY
67095: PPUSH
67096: LD_INT 100
67098: PPUSH
67099: CALL_OW 234
// end ;
67103: PPOPN 1
67105: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
67106: LD_EXP 51
67110: PUSH
67111: LD_EXP 65
67115: AND
67116: IFFALSE 67214
67118: GO 67120
67120: DISABLE
67121: LD_INT 0
67123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67124: LD_ADDR_VAR 0 1
67128: PUSH
67129: LD_INT 22
67131: PUSH
67132: LD_OWVAR 2
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 21
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PPUSH
67155: CALL_OW 69
67159: ST_TO_ADDR
// if not tmp then
67160: LD_VAR 0 1
67164: NOT
67165: IFFALSE 67169
// exit ;
67167: GO 67214
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
67169: LD_VAR 0 1
67173: PUSH
67174: LD_INT 1
67176: PPUSH
67177: LD_VAR 0 1
67181: PPUSH
67182: CALL_OW 12
67186: ARRAY
67187: PPUSH
67188: LD_INT 1
67190: PPUSH
67191: LD_INT 4
67193: PPUSH
67194: CALL_OW 12
67198: PPUSH
67199: LD_INT 3000
67201: PPUSH
67202: LD_INT 9000
67204: PPUSH
67205: CALL_OW 12
67209: PPUSH
67210: CALL_OW 492
// end ;
67214: PPOPN 1
67216: END
// every 0 0$1 trigger StreamModeActive and sDepot do
67217: LD_EXP 51
67221: PUSH
67222: LD_EXP 66
67226: AND
67227: IFFALSE 67247
67229: GO 67231
67231: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
67232: LD_INT 1
67234: PPUSH
67235: LD_OWVAR 2
67239: PPUSH
67240: LD_INT 0
67242: PPUSH
67243: CALL_OW 324
67247: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
67248: LD_EXP 51
67252: PUSH
67253: LD_EXP 67
67257: AND
67258: IFFALSE 67341
67260: GO 67262
67262: DISABLE
67263: LD_INT 0
67265: PPUSH
67266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67267: LD_ADDR_VAR 0 2
67271: PUSH
67272: LD_INT 22
67274: PUSH
67275: LD_OWVAR 2
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 21
67286: PUSH
67287: LD_INT 3
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PPUSH
67298: CALL_OW 69
67302: ST_TO_ADDR
// if not tmp then
67303: LD_VAR 0 2
67307: NOT
67308: IFFALSE 67312
// exit ;
67310: GO 67341
// for i in tmp do
67312: LD_ADDR_VAR 0 1
67316: PUSH
67317: LD_VAR 0 2
67321: PUSH
67322: FOR_IN
67323: IFFALSE 67339
// SetBLevel ( i , 10 ) ;
67325: LD_VAR 0 1
67329: PPUSH
67330: LD_INT 10
67332: PPUSH
67333: CALL_OW 241
67337: GO 67322
67339: POP
67340: POP
// end ;
67341: PPOPN 2
67343: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
67344: LD_EXP 51
67348: PUSH
67349: LD_EXP 68
67353: AND
67354: IFFALSE 67465
67356: GO 67358
67358: DISABLE
67359: LD_INT 0
67361: PPUSH
67362: PPUSH
67363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67364: LD_ADDR_VAR 0 3
67368: PUSH
67369: LD_INT 22
67371: PUSH
67372: LD_OWVAR 2
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 25
67383: PUSH
67384: LD_INT 1
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PPUSH
67395: CALL_OW 69
67399: ST_TO_ADDR
// if not tmp then
67400: LD_VAR 0 3
67404: NOT
67405: IFFALSE 67409
// exit ;
67407: GO 67465
// un := tmp [ rand ( 1 , tmp ) ] ;
67409: LD_ADDR_VAR 0 2
67413: PUSH
67414: LD_VAR 0 3
67418: PUSH
67419: LD_INT 1
67421: PPUSH
67422: LD_VAR 0 3
67426: PPUSH
67427: CALL_OW 12
67431: ARRAY
67432: ST_TO_ADDR
// if Crawls ( un ) then
67433: LD_VAR 0 2
67437: PPUSH
67438: CALL_OW 318
67442: IFFALSE 67453
// ComWalk ( un ) ;
67444: LD_VAR 0 2
67448: PPUSH
67449: CALL_OW 138
// SetClass ( un , class_sniper ) ;
67453: LD_VAR 0 2
67457: PPUSH
67458: LD_INT 5
67460: PPUSH
67461: CALL_OW 336
// end ;
67465: PPOPN 3
67467: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
67468: LD_EXP 51
67472: PUSH
67473: LD_EXP 69
67477: AND
67478: PUSH
67479: LD_OWVAR 67
67483: PUSH
67484: LD_INT 4
67486: LESS
67487: AND
67488: IFFALSE 67507
67490: GO 67492
67492: DISABLE
// begin Difficulty := Difficulty + 1 ;
67493: LD_ADDR_OWVAR 67
67497: PUSH
67498: LD_OWVAR 67
67502: PUSH
67503: LD_INT 1
67505: PLUS
67506: ST_TO_ADDR
// end ;
67507: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
67508: LD_EXP 51
67512: PUSH
67513: LD_EXP 70
67517: AND
67518: IFFALSE 67621
67520: GO 67522
67522: DISABLE
67523: LD_INT 0
67525: PPUSH
// begin for i := 1 to 5 do
67526: LD_ADDR_VAR 0 1
67530: PUSH
67531: DOUBLE
67532: LD_INT 1
67534: DEC
67535: ST_TO_ADDR
67536: LD_INT 5
67538: PUSH
67539: FOR_TO
67540: IFFALSE 67619
// begin uc_nation := nation_nature ;
67542: LD_ADDR_OWVAR 21
67546: PUSH
67547: LD_INT 0
67549: ST_TO_ADDR
// uc_side := 0 ;
67550: LD_ADDR_OWVAR 20
67554: PUSH
67555: LD_INT 0
67557: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67558: LD_ADDR_OWVAR 29
67562: PUSH
67563: LD_INT 12
67565: PUSH
67566: LD_INT 12
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: ST_TO_ADDR
// hc_agressivity := 20 ;
67573: LD_ADDR_OWVAR 35
67577: PUSH
67578: LD_INT 20
67580: ST_TO_ADDR
// hc_class := class_tiger ;
67581: LD_ADDR_OWVAR 28
67585: PUSH
67586: LD_INT 14
67588: ST_TO_ADDR
// hc_gallery :=  ;
67589: LD_ADDR_OWVAR 33
67593: PUSH
67594: LD_STRING 
67596: ST_TO_ADDR
// hc_name :=  ;
67597: LD_ADDR_OWVAR 26
67601: PUSH
67602: LD_STRING 
67604: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
67605: CALL_OW 44
67609: PPUSH
67610: LD_INT 0
67612: PPUSH
67613: CALL_OW 51
// end ;
67617: GO 67539
67619: POP
67620: POP
// end ;
67621: PPOPN 1
67623: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67624: LD_EXP 51
67628: PUSH
67629: LD_EXP 71
67633: AND
67634: IFFALSE 67643
67636: GO 67638
67638: DISABLE
// StreamSibBomb ;
67639: CALL 67644 0 0
67643: END
// export function StreamSibBomb ; var i , x , y ; begin
67644: LD_INT 0
67646: PPUSH
67647: PPUSH
67648: PPUSH
67649: PPUSH
// result := false ;
67650: LD_ADDR_VAR 0 1
67654: PUSH
67655: LD_INT 0
67657: ST_TO_ADDR
// for i := 1 to 16 do
67658: LD_ADDR_VAR 0 2
67662: PUSH
67663: DOUBLE
67664: LD_INT 1
67666: DEC
67667: ST_TO_ADDR
67668: LD_INT 16
67670: PUSH
67671: FOR_TO
67672: IFFALSE 67871
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67674: LD_ADDR_VAR 0 3
67678: PUSH
67679: LD_INT 10
67681: PUSH
67682: LD_INT 20
67684: PUSH
67685: LD_INT 30
67687: PUSH
67688: LD_INT 40
67690: PUSH
67691: LD_INT 50
67693: PUSH
67694: LD_INT 60
67696: PUSH
67697: LD_INT 70
67699: PUSH
67700: LD_INT 80
67702: PUSH
67703: LD_INT 90
67705: PUSH
67706: LD_INT 100
67708: PUSH
67709: LD_INT 110
67711: PUSH
67712: LD_INT 120
67714: PUSH
67715: LD_INT 130
67717: PUSH
67718: LD_INT 140
67720: PUSH
67721: LD_INT 150
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 1
67743: PPUSH
67744: LD_INT 15
67746: PPUSH
67747: CALL_OW 12
67751: ARRAY
67752: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67753: LD_ADDR_VAR 0 4
67757: PUSH
67758: LD_INT 10
67760: PUSH
67761: LD_INT 20
67763: PUSH
67764: LD_INT 30
67766: PUSH
67767: LD_INT 40
67769: PUSH
67770: LD_INT 50
67772: PUSH
67773: LD_INT 60
67775: PUSH
67776: LD_INT 70
67778: PUSH
67779: LD_INT 80
67781: PUSH
67782: LD_INT 90
67784: PUSH
67785: LD_INT 100
67787: PUSH
67788: LD_INT 110
67790: PUSH
67791: LD_INT 120
67793: PUSH
67794: LD_INT 130
67796: PUSH
67797: LD_INT 140
67799: PUSH
67800: LD_INT 150
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 1
67822: PPUSH
67823: LD_INT 15
67825: PPUSH
67826: CALL_OW 12
67830: ARRAY
67831: ST_TO_ADDR
// if ValidHex ( x , y ) then
67832: LD_VAR 0 3
67836: PPUSH
67837: LD_VAR 0 4
67841: PPUSH
67842: CALL_OW 488
67846: IFFALSE 67869
// begin result := [ x , y ] ;
67848: LD_ADDR_VAR 0 1
67852: PUSH
67853: LD_VAR 0 3
67857: PUSH
67858: LD_VAR 0 4
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: ST_TO_ADDR
// break ;
67867: GO 67871
// end ; end ;
67869: GO 67671
67871: POP
67872: POP
// if result then
67873: LD_VAR 0 1
67877: IFFALSE 67937
// begin ToLua ( playSibBomb() ) ;
67879: LD_STRING playSibBomb()
67881: PPUSH
67882: CALL_OW 559
// wait ( 0 0$14 ) ;
67886: LD_INT 490
67888: PPUSH
67889: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
67893: LD_VAR 0 1
67897: PUSH
67898: LD_INT 1
67900: ARRAY
67901: PPUSH
67902: LD_VAR 0 1
67906: PUSH
67907: LD_INT 2
67909: ARRAY
67910: PPUSH
67911: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
67915: LD_VAR 0 1
67919: PUSH
67920: LD_INT 1
67922: ARRAY
67923: PPUSH
67924: LD_VAR 0 1
67928: PUSH
67929: LD_INT 2
67931: ARRAY
67932: PPUSH
67933: CALL_OW 429
// end ; end ;
67937: LD_VAR 0 1
67941: RET
// every 0 0$1 trigger StreamModeActive and sReset do
67942: LD_EXP 51
67946: PUSH
67947: LD_EXP 73
67951: AND
67952: IFFALSE 67964
67954: GO 67956
67956: DISABLE
// YouLost (  ) ;
67957: LD_STRING 
67959: PPUSH
67960: CALL_OW 104
67964: END
// every 0 0$1 trigger StreamModeActive and sFog do
67965: LD_EXP 51
67969: PUSH
67970: LD_EXP 72
67974: AND
67975: IFFALSE 67989
67977: GO 67979
67979: DISABLE
// FogOff ( your_side ) ;
67980: LD_OWVAR 2
67984: PPUSH
67985: CALL_OW 344
67989: END
// every 0 0$1 trigger StreamModeActive and sSun do
67990: LD_EXP 51
67994: PUSH
67995: LD_EXP 74
67999: AND
68000: IFFALSE 68028
68002: GO 68004
68004: DISABLE
// begin solar_recharge_percent := 0 ;
68005: LD_ADDR_OWVAR 79
68009: PUSH
68010: LD_INT 0
68012: ST_TO_ADDR
// wait ( 5 5$00 ) ;
68013: LD_INT 10500
68015: PPUSH
68016: CALL_OW 67
// solar_recharge_percent := 100 ;
68020: LD_ADDR_OWVAR 79
68024: PUSH
68025: LD_INT 100
68027: ST_TO_ADDR
// end ;
68028: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
68029: LD_EXP 51
68033: PUSH
68034: LD_EXP 75
68038: AND
68039: IFFALSE 68278
68041: GO 68043
68043: DISABLE
68044: LD_INT 0
68046: PPUSH
68047: PPUSH
68048: PPUSH
// begin tmp := [ ] ;
68049: LD_ADDR_VAR 0 3
68053: PUSH
68054: EMPTY
68055: ST_TO_ADDR
// for i := 1 to 6 do
68056: LD_ADDR_VAR 0 1
68060: PUSH
68061: DOUBLE
68062: LD_INT 1
68064: DEC
68065: ST_TO_ADDR
68066: LD_INT 6
68068: PUSH
68069: FOR_TO
68070: IFFALSE 68175
// begin uc_nation := nation_nature ;
68072: LD_ADDR_OWVAR 21
68076: PUSH
68077: LD_INT 0
68079: ST_TO_ADDR
// uc_side := 0 ;
68080: LD_ADDR_OWVAR 20
68084: PUSH
68085: LD_INT 0
68087: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68088: LD_ADDR_OWVAR 29
68092: PUSH
68093: LD_INT 12
68095: PUSH
68096: LD_INT 12
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: ST_TO_ADDR
// hc_agressivity := 20 ;
68103: LD_ADDR_OWVAR 35
68107: PUSH
68108: LD_INT 20
68110: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
68111: LD_ADDR_OWVAR 28
68115: PUSH
68116: LD_INT 17
68118: ST_TO_ADDR
// hc_gallery :=  ;
68119: LD_ADDR_OWVAR 33
68123: PUSH
68124: LD_STRING 
68126: ST_TO_ADDR
// hc_name :=  ;
68127: LD_ADDR_OWVAR 26
68131: PUSH
68132: LD_STRING 
68134: ST_TO_ADDR
// un := CreateHuman ;
68135: LD_ADDR_VAR 0 2
68139: PUSH
68140: CALL_OW 44
68144: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
68145: LD_VAR 0 2
68149: PPUSH
68150: LD_INT 1
68152: PPUSH
68153: CALL_OW 51
// tmp := tmp ^ un ;
68157: LD_ADDR_VAR 0 3
68161: PUSH
68162: LD_VAR 0 3
68166: PUSH
68167: LD_VAR 0 2
68171: ADD
68172: ST_TO_ADDR
// end ;
68173: GO 68069
68175: POP
68176: POP
// repeat wait ( 0 0$1 ) ;
68177: LD_INT 35
68179: PPUSH
68180: CALL_OW 67
// for un in tmp do
68184: LD_ADDR_VAR 0 2
68188: PUSH
68189: LD_VAR 0 3
68193: PUSH
68194: FOR_IN
68195: IFFALSE 68269
// begin if IsDead ( un ) then
68197: LD_VAR 0 2
68201: PPUSH
68202: CALL_OW 301
68206: IFFALSE 68226
// begin tmp := tmp diff un ;
68208: LD_ADDR_VAR 0 3
68212: PUSH
68213: LD_VAR 0 3
68217: PUSH
68218: LD_VAR 0 2
68222: DIFF
68223: ST_TO_ADDR
// continue ;
68224: GO 68194
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
68226: LD_VAR 0 2
68230: PPUSH
68231: LD_INT 3
68233: PUSH
68234: LD_INT 22
68236: PUSH
68237: LD_INT 0
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PPUSH
68248: CALL_OW 69
68252: PPUSH
68253: LD_VAR 0 2
68257: PPUSH
68258: CALL_OW 74
68262: PPUSH
68263: CALL_OW 115
// end ;
68267: GO 68194
68269: POP
68270: POP
// until not tmp ;
68271: LD_VAR 0 3
68275: NOT
68276: IFFALSE 68177
// end ;
68278: PPOPN 3
68280: END
// every 0 0$1 trigger StreamModeActive and sTroll do
68281: LD_EXP 51
68285: PUSH
68286: LD_EXP 76
68290: AND
68291: IFFALSE 68345
68293: GO 68295
68295: DISABLE
// begin ToLua ( displayTroll(); ) ;
68296: LD_STRING displayTroll();
68298: PPUSH
68299: CALL_OW 559
// wait ( 3 3$00 ) ;
68303: LD_INT 6300
68305: PPUSH
68306: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68310: LD_STRING hideTroll();
68312: PPUSH
68313: CALL_OW 559
// wait ( 1 1$00 ) ;
68317: LD_INT 2100
68319: PPUSH
68320: CALL_OW 67
// ToLua ( displayTroll(); ) ;
68324: LD_STRING displayTroll();
68326: PPUSH
68327: CALL_OW 559
// wait ( 1 1$00 ) ;
68331: LD_INT 2100
68333: PPUSH
68334: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68338: LD_STRING hideTroll();
68340: PPUSH
68341: CALL_OW 559
// end ;
68345: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
68346: LD_EXP 51
68350: PUSH
68351: LD_EXP 77
68355: AND
68356: IFFALSE 68419
68358: GO 68360
68360: DISABLE
68361: LD_INT 0
68363: PPUSH
// begin p := 0 ;
68364: LD_ADDR_VAR 0 1
68368: PUSH
68369: LD_INT 0
68371: ST_TO_ADDR
// repeat game_speed := 1 ;
68372: LD_ADDR_OWVAR 65
68376: PUSH
68377: LD_INT 1
68379: ST_TO_ADDR
// wait ( 0 0$1 ) ;
68380: LD_INT 35
68382: PPUSH
68383: CALL_OW 67
// p := p + 1 ;
68387: LD_ADDR_VAR 0 1
68391: PUSH
68392: LD_VAR 0 1
68396: PUSH
68397: LD_INT 1
68399: PLUS
68400: ST_TO_ADDR
// until p >= 60 ;
68401: LD_VAR 0 1
68405: PUSH
68406: LD_INT 60
68408: GREATEREQUAL
68409: IFFALSE 68372
// game_speed := 4 ;
68411: LD_ADDR_OWVAR 65
68415: PUSH
68416: LD_INT 4
68418: ST_TO_ADDR
// end ;
68419: PPOPN 1
68421: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
68422: LD_EXP 51
68426: PUSH
68427: LD_EXP 78
68431: AND
68432: IFFALSE 68578
68434: GO 68436
68436: DISABLE
68437: LD_INT 0
68439: PPUSH
68440: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68441: LD_ADDR_VAR 0 1
68445: PUSH
68446: LD_INT 22
68448: PUSH
68449: LD_OWVAR 2
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 2
68460: PUSH
68461: LD_INT 30
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 30
68473: PUSH
68474: LD_INT 1
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: LIST
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PPUSH
68490: CALL_OW 69
68494: ST_TO_ADDR
// if not depot then
68495: LD_VAR 0 1
68499: NOT
68500: IFFALSE 68504
// exit ;
68502: GO 68578
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
68504: LD_ADDR_VAR 0 2
68508: PUSH
68509: LD_VAR 0 1
68513: PUSH
68514: LD_INT 1
68516: PPUSH
68517: LD_VAR 0 1
68521: PPUSH
68522: CALL_OW 12
68526: ARRAY
68527: PPUSH
68528: CALL_OW 274
68532: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
68533: LD_VAR 0 2
68537: PPUSH
68538: LD_INT 1
68540: PPUSH
68541: LD_INT 0
68543: PPUSH
68544: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
68548: LD_VAR 0 2
68552: PPUSH
68553: LD_INT 2
68555: PPUSH
68556: LD_INT 0
68558: PPUSH
68559: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
68563: LD_VAR 0 2
68567: PPUSH
68568: LD_INT 3
68570: PPUSH
68571: LD_INT 0
68573: PPUSH
68574: CALL_OW 277
// end ;
68578: PPOPN 2
68580: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
68581: LD_EXP 51
68585: PUSH
68586: LD_EXP 79
68590: AND
68591: IFFALSE 68688
68593: GO 68595
68595: DISABLE
68596: LD_INT 0
68598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68599: LD_ADDR_VAR 0 1
68603: PUSH
68604: LD_INT 22
68606: PUSH
68607: LD_OWVAR 2
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 21
68618: PUSH
68619: LD_INT 1
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 3
68628: PUSH
68629: LD_INT 23
68631: PUSH
68632: LD_INT 0
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: LIST
68647: PPUSH
68648: CALL_OW 69
68652: ST_TO_ADDR
// if not tmp then
68653: LD_VAR 0 1
68657: NOT
68658: IFFALSE 68662
// exit ;
68660: GO 68688
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
68662: LD_VAR 0 1
68666: PUSH
68667: LD_INT 1
68669: PPUSH
68670: LD_VAR 0 1
68674: PPUSH
68675: CALL_OW 12
68679: ARRAY
68680: PPUSH
68681: LD_INT 200
68683: PPUSH
68684: CALL_OW 234
// end ;
68688: PPOPN 1
68690: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
68691: LD_EXP 51
68695: PUSH
68696: LD_EXP 80
68700: AND
68701: IFFALSE 68780
68703: GO 68705
68705: DISABLE
68706: LD_INT 0
68708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
68709: LD_ADDR_VAR 0 1
68713: PUSH
68714: LD_INT 22
68716: PUSH
68717: LD_OWVAR 2
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 21
68728: PUSH
68729: LD_INT 2
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PPUSH
68740: CALL_OW 69
68744: ST_TO_ADDR
// if not tmp then
68745: LD_VAR 0 1
68749: NOT
68750: IFFALSE 68754
// exit ;
68752: GO 68780
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
68754: LD_VAR 0 1
68758: PUSH
68759: LD_INT 1
68761: PPUSH
68762: LD_VAR 0 1
68766: PPUSH
68767: CALL_OW 12
68771: ARRAY
68772: PPUSH
68773: LD_INT 60
68775: PPUSH
68776: CALL_OW 234
// end ;
68780: PPOPN 1
68782: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
68783: LD_EXP 51
68787: PUSH
68788: LD_EXP 81
68792: AND
68793: IFFALSE 68892
68795: GO 68797
68797: DISABLE
68798: LD_INT 0
68800: PPUSH
68801: PPUSH
// begin enable ;
68802: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
68803: LD_ADDR_VAR 0 1
68807: PUSH
68808: LD_INT 22
68810: PUSH
68811: LD_OWVAR 2
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 61
68822: PUSH
68823: EMPTY
68824: LIST
68825: PUSH
68826: LD_INT 33
68828: PUSH
68829: LD_INT 2
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: LIST
68840: PPUSH
68841: CALL_OW 69
68845: ST_TO_ADDR
// if not tmp then
68846: LD_VAR 0 1
68850: NOT
68851: IFFALSE 68855
// exit ;
68853: GO 68892
// for i in tmp do
68855: LD_ADDR_VAR 0 2
68859: PUSH
68860: LD_VAR 0 1
68864: PUSH
68865: FOR_IN
68866: IFFALSE 68890
// if IsControledBy ( i ) then
68868: LD_VAR 0 2
68872: PPUSH
68873: CALL_OW 312
68877: IFFALSE 68888
// ComUnlink ( i ) ;
68879: LD_VAR 0 2
68883: PPUSH
68884: CALL_OW 136
68888: GO 68865
68890: POP
68891: POP
// end ;
68892: PPOPN 2
68894: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
68895: LD_EXP 51
68899: PUSH
68900: LD_EXP 82
68904: AND
68905: IFFALSE 69045
68907: GO 68909
68909: DISABLE
68910: LD_INT 0
68912: PPUSH
68913: PPUSH
// begin ToLua ( displayPowell(); ) ;
68914: LD_STRING displayPowell();
68916: PPUSH
68917: CALL_OW 559
// uc_side := 0 ;
68921: LD_ADDR_OWVAR 20
68925: PUSH
68926: LD_INT 0
68928: ST_TO_ADDR
// uc_nation := 2 ;
68929: LD_ADDR_OWVAR 21
68933: PUSH
68934: LD_INT 2
68936: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
68937: LD_ADDR_OWVAR 37
68941: PUSH
68942: LD_INT 14
68944: ST_TO_ADDR
// vc_engine := engine_siberite ;
68945: LD_ADDR_OWVAR 39
68949: PUSH
68950: LD_INT 3
68952: ST_TO_ADDR
// vc_control := control_apeman ;
68953: LD_ADDR_OWVAR 38
68957: PUSH
68958: LD_INT 5
68960: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
68961: LD_ADDR_OWVAR 40
68965: PUSH
68966: LD_INT 29
68968: ST_TO_ADDR
// un := CreateVehicle ;
68969: LD_ADDR_VAR 0 2
68973: PUSH
68974: CALL_OW 45
68978: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68979: LD_VAR 0 2
68983: PPUSH
68984: LD_INT 1
68986: PPUSH
68987: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68991: LD_INT 35
68993: PPUSH
68994: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68998: LD_VAR 0 2
69002: PPUSH
69003: LD_INT 22
69005: PUSH
69006: LD_OWVAR 2
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PPUSH
69015: CALL_OW 69
69019: PPUSH
69020: LD_VAR 0 2
69024: PPUSH
69025: CALL_OW 74
69029: PPUSH
69030: CALL_OW 115
// until IsDead ( un ) ;
69034: LD_VAR 0 2
69038: PPUSH
69039: CALL_OW 301
69043: IFFALSE 68991
// end ;
69045: PPOPN 2
69047: END
// every 0 0$1 trigger StreamModeActive and sStu do
69048: LD_EXP 51
69052: PUSH
69053: LD_EXP 90
69057: AND
69058: IFFALSE 69074
69060: GO 69062
69062: DISABLE
// begin ToLua ( displayStucuk(); ) ;
69063: LD_STRING displayStucuk();
69065: PPUSH
69066: CALL_OW 559
// ResetFog ;
69070: CALL_OW 335
// end ;
69074: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
69075: LD_EXP 51
69079: PUSH
69080: LD_EXP 83
69084: AND
69085: IFFALSE 69226
69087: GO 69089
69089: DISABLE
69090: LD_INT 0
69092: PPUSH
69093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69094: LD_ADDR_VAR 0 2
69098: PUSH
69099: LD_INT 22
69101: PUSH
69102: LD_OWVAR 2
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 21
69113: PUSH
69114: LD_INT 1
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PPUSH
69125: CALL_OW 69
69129: ST_TO_ADDR
// if not tmp then
69130: LD_VAR 0 2
69134: NOT
69135: IFFALSE 69139
// exit ;
69137: GO 69226
// un := tmp [ rand ( 1 , tmp ) ] ;
69139: LD_ADDR_VAR 0 1
69143: PUSH
69144: LD_VAR 0 2
69148: PUSH
69149: LD_INT 1
69151: PPUSH
69152: LD_VAR 0 2
69156: PPUSH
69157: CALL_OW 12
69161: ARRAY
69162: ST_TO_ADDR
// SetSide ( un , 0 ) ;
69163: LD_VAR 0 1
69167: PPUSH
69168: LD_INT 0
69170: PPUSH
69171: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
69175: LD_VAR 0 1
69179: PPUSH
69180: LD_OWVAR 3
69184: PUSH
69185: LD_VAR 0 1
69189: DIFF
69190: PPUSH
69191: LD_VAR 0 1
69195: PPUSH
69196: CALL_OW 74
69200: PPUSH
69201: CALL_OW 115
// wait ( 0 0$20 ) ;
69205: LD_INT 700
69207: PPUSH
69208: CALL_OW 67
// SetSide ( un , your_side ) ;
69212: LD_VAR 0 1
69216: PPUSH
69217: LD_OWVAR 2
69221: PPUSH
69222: CALL_OW 235
// end ;
69226: PPOPN 2
69228: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
69229: LD_EXP 51
69233: PUSH
69234: LD_EXP 84
69238: AND
69239: IFFALSE 69345
69241: GO 69243
69243: DISABLE
69244: LD_INT 0
69246: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69247: LD_ADDR_VAR 0 1
69251: PUSH
69252: LD_INT 22
69254: PUSH
69255: LD_OWVAR 2
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 2
69266: PUSH
69267: LD_INT 30
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 30
69279: PUSH
69280: LD_INT 1
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: LIST
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PPUSH
69296: CALL_OW 69
69300: ST_TO_ADDR
// if not depot then
69301: LD_VAR 0 1
69305: NOT
69306: IFFALSE 69310
// exit ;
69308: GO 69345
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
69310: LD_VAR 0 1
69314: PUSH
69315: LD_INT 1
69317: ARRAY
69318: PPUSH
69319: CALL_OW 250
69323: PPUSH
69324: LD_VAR 0 1
69328: PUSH
69329: LD_INT 1
69331: ARRAY
69332: PPUSH
69333: CALL_OW 251
69337: PPUSH
69338: LD_INT 70
69340: PPUSH
69341: CALL_OW 495
// end ;
69345: PPOPN 1
69347: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
69348: LD_EXP 51
69352: PUSH
69353: LD_EXP 85
69357: AND
69358: IFFALSE 69569
69360: GO 69362
69362: DISABLE
69363: LD_INT 0
69365: PPUSH
69366: PPUSH
69367: PPUSH
69368: PPUSH
69369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69370: LD_ADDR_VAR 0 5
69374: PUSH
69375: LD_INT 22
69377: PUSH
69378: LD_OWVAR 2
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 21
69389: PUSH
69390: LD_INT 1
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PPUSH
69401: CALL_OW 69
69405: ST_TO_ADDR
// if not tmp then
69406: LD_VAR 0 5
69410: NOT
69411: IFFALSE 69415
// exit ;
69413: GO 69569
// for i in tmp do
69415: LD_ADDR_VAR 0 1
69419: PUSH
69420: LD_VAR 0 5
69424: PUSH
69425: FOR_IN
69426: IFFALSE 69567
// begin d := rand ( 0 , 5 ) ;
69428: LD_ADDR_VAR 0 4
69432: PUSH
69433: LD_INT 0
69435: PPUSH
69436: LD_INT 5
69438: PPUSH
69439: CALL_OW 12
69443: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
69444: LD_ADDR_VAR 0 2
69448: PUSH
69449: LD_VAR 0 1
69453: PPUSH
69454: CALL_OW 250
69458: PPUSH
69459: LD_VAR 0 4
69463: PPUSH
69464: LD_INT 3
69466: PPUSH
69467: LD_INT 12
69469: PPUSH
69470: CALL_OW 12
69474: PPUSH
69475: CALL_OW 272
69479: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
69480: LD_ADDR_VAR 0 3
69484: PUSH
69485: LD_VAR 0 1
69489: PPUSH
69490: CALL_OW 251
69494: PPUSH
69495: LD_VAR 0 4
69499: PPUSH
69500: LD_INT 3
69502: PPUSH
69503: LD_INT 12
69505: PPUSH
69506: CALL_OW 12
69510: PPUSH
69511: CALL_OW 273
69515: ST_TO_ADDR
// if ValidHex ( x , y ) then
69516: LD_VAR 0 2
69520: PPUSH
69521: LD_VAR 0 3
69525: PPUSH
69526: CALL_OW 488
69530: IFFALSE 69565
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
69532: LD_VAR 0 1
69536: PPUSH
69537: LD_VAR 0 2
69541: PPUSH
69542: LD_VAR 0 3
69546: PPUSH
69547: LD_INT 3
69549: PPUSH
69550: LD_INT 6
69552: PPUSH
69553: CALL_OW 12
69557: PPUSH
69558: LD_INT 1
69560: PPUSH
69561: CALL_OW 483
// end ;
69565: GO 69425
69567: POP
69568: POP
// end ;
69569: PPOPN 5
69571: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
69572: LD_EXP 51
69576: PUSH
69577: LD_EXP 86
69581: AND
69582: IFFALSE 69676
69584: GO 69586
69586: DISABLE
69587: LD_INT 0
69589: PPUSH
69590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69591: LD_ADDR_VAR 0 2
69595: PUSH
69596: LD_INT 22
69598: PUSH
69599: LD_OWVAR 2
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 32
69610: PUSH
69611: LD_INT 1
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 21
69620: PUSH
69621: LD_INT 2
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: LIST
69632: PPUSH
69633: CALL_OW 69
69637: ST_TO_ADDR
// if not tmp then
69638: LD_VAR 0 2
69642: NOT
69643: IFFALSE 69647
// exit ;
69645: GO 69676
// for i in tmp do
69647: LD_ADDR_VAR 0 1
69651: PUSH
69652: LD_VAR 0 2
69656: PUSH
69657: FOR_IN
69658: IFFALSE 69674
// SetFuel ( i , 0 ) ;
69660: LD_VAR 0 1
69664: PPUSH
69665: LD_INT 0
69667: PPUSH
69668: CALL_OW 240
69672: GO 69657
69674: POP
69675: POP
// end ;
69676: PPOPN 2
69678: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
69679: LD_EXP 51
69683: PUSH
69684: LD_EXP 87
69688: AND
69689: IFFALSE 69755
69691: GO 69693
69693: DISABLE
69694: LD_INT 0
69696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69697: LD_ADDR_VAR 0 1
69701: PUSH
69702: LD_INT 22
69704: PUSH
69705: LD_OWVAR 2
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 30
69716: PUSH
69717: LD_INT 29
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PPUSH
69728: CALL_OW 69
69732: ST_TO_ADDR
// if not tmp then
69733: LD_VAR 0 1
69737: NOT
69738: IFFALSE 69742
// exit ;
69740: GO 69755
// DestroyUnit ( tmp [ 1 ] ) ;
69742: LD_VAR 0 1
69746: PUSH
69747: LD_INT 1
69749: ARRAY
69750: PPUSH
69751: CALL_OW 65
// end ;
69755: PPOPN 1
69757: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
69758: LD_EXP 51
69762: PUSH
69763: LD_EXP 89
69767: AND
69768: IFFALSE 69897
69770: GO 69772
69772: DISABLE
69773: LD_INT 0
69775: PPUSH
// begin uc_side := 0 ;
69776: LD_ADDR_OWVAR 20
69780: PUSH
69781: LD_INT 0
69783: ST_TO_ADDR
// uc_nation := nation_arabian ;
69784: LD_ADDR_OWVAR 21
69788: PUSH
69789: LD_INT 2
69791: ST_TO_ADDR
// hc_gallery :=  ;
69792: LD_ADDR_OWVAR 33
69796: PUSH
69797: LD_STRING 
69799: ST_TO_ADDR
// hc_name :=  ;
69800: LD_ADDR_OWVAR 26
69804: PUSH
69805: LD_STRING 
69807: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
69808: LD_INT 1
69810: PPUSH
69811: LD_INT 11
69813: PPUSH
69814: LD_INT 10
69816: PPUSH
69817: CALL_OW 380
// un := CreateHuman ;
69821: LD_ADDR_VAR 0 1
69825: PUSH
69826: CALL_OW 44
69830: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69831: LD_VAR 0 1
69835: PPUSH
69836: LD_INT 1
69838: PPUSH
69839: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69843: LD_INT 35
69845: PPUSH
69846: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69850: LD_VAR 0 1
69854: PPUSH
69855: LD_INT 22
69857: PUSH
69858: LD_OWVAR 2
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PPUSH
69867: CALL_OW 69
69871: PPUSH
69872: LD_VAR 0 1
69876: PPUSH
69877: CALL_OW 74
69881: PPUSH
69882: CALL_OW 115
// until IsDead ( un ) ;
69886: LD_VAR 0 1
69890: PPUSH
69891: CALL_OW 301
69895: IFFALSE 69843
// end ;
69897: PPOPN 1
69899: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
69900: LD_EXP 51
69904: PUSH
69905: LD_EXP 91
69909: AND
69910: IFFALSE 69922
69912: GO 69914
69914: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
69915: LD_STRING earthquake(getX(game), 0, 32)
69917: PPUSH
69918: CALL_OW 559
69922: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
69923: LD_EXP 51
69927: PUSH
69928: LD_EXP 92
69932: AND
69933: IFFALSE 70024
69935: GO 69937
69937: DISABLE
69938: LD_INT 0
69940: PPUSH
// begin enable ;
69941: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
69942: LD_ADDR_VAR 0 1
69946: PUSH
69947: LD_INT 22
69949: PUSH
69950: LD_OWVAR 2
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 21
69961: PUSH
69962: LD_INT 2
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 33
69971: PUSH
69972: LD_INT 3
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: LIST
69983: PPUSH
69984: CALL_OW 69
69988: ST_TO_ADDR
// if not tmp then
69989: LD_VAR 0 1
69993: NOT
69994: IFFALSE 69998
// exit ;
69996: GO 70024
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69998: LD_VAR 0 1
70002: PUSH
70003: LD_INT 1
70005: PPUSH
70006: LD_VAR 0 1
70010: PPUSH
70011: CALL_OW 12
70015: ARRAY
70016: PPUSH
70017: LD_INT 1
70019: PPUSH
70020: CALL_OW 234
// end ;
70024: PPOPN 1
70026: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
70027: LD_EXP 51
70031: PUSH
70032: LD_EXP 93
70036: AND
70037: IFFALSE 70178
70039: GO 70041
70041: DISABLE
70042: LD_INT 0
70044: PPUSH
70045: PPUSH
70046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70047: LD_ADDR_VAR 0 3
70051: PUSH
70052: LD_INT 22
70054: PUSH
70055: LD_OWVAR 2
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 25
70066: PUSH
70067: LD_INT 1
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PPUSH
70078: CALL_OW 69
70082: ST_TO_ADDR
// if not tmp then
70083: LD_VAR 0 3
70087: NOT
70088: IFFALSE 70092
// exit ;
70090: GO 70178
// un := tmp [ rand ( 1 , tmp ) ] ;
70092: LD_ADDR_VAR 0 2
70096: PUSH
70097: LD_VAR 0 3
70101: PUSH
70102: LD_INT 1
70104: PPUSH
70105: LD_VAR 0 3
70109: PPUSH
70110: CALL_OW 12
70114: ARRAY
70115: ST_TO_ADDR
// if Crawls ( un ) then
70116: LD_VAR 0 2
70120: PPUSH
70121: CALL_OW 318
70125: IFFALSE 70136
// ComWalk ( un ) ;
70127: LD_VAR 0 2
70131: PPUSH
70132: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
70136: LD_VAR 0 2
70140: PPUSH
70141: LD_INT 9
70143: PPUSH
70144: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
70148: LD_INT 28
70150: PPUSH
70151: LD_OWVAR 2
70155: PPUSH
70156: LD_INT 2
70158: PPUSH
70159: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
70163: LD_INT 29
70165: PPUSH
70166: LD_OWVAR 2
70170: PPUSH
70171: LD_INT 2
70173: PPUSH
70174: CALL_OW 322
// end ;
70178: PPOPN 3
70180: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
70181: LD_EXP 51
70185: PUSH
70186: LD_EXP 94
70190: AND
70191: IFFALSE 70302
70193: GO 70195
70195: DISABLE
70196: LD_INT 0
70198: PPUSH
70199: PPUSH
70200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70201: LD_ADDR_VAR 0 3
70205: PUSH
70206: LD_INT 22
70208: PUSH
70209: LD_OWVAR 2
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 25
70220: PUSH
70221: LD_INT 1
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PPUSH
70232: CALL_OW 69
70236: ST_TO_ADDR
// if not tmp then
70237: LD_VAR 0 3
70241: NOT
70242: IFFALSE 70246
// exit ;
70244: GO 70302
// un := tmp [ rand ( 1 , tmp ) ] ;
70246: LD_ADDR_VAR 0 2
70250: PUSH
70251: LD_VAR 0 3
70255: PUSH
70256: LD_INT 1
70258: PPUSH
70259: LD_VAR 0 3
70263: PPUSH
70264: CALL_OW 12
70268: ARRAY
70269: ST_TO_ADDR
// if Crawls ( un ) then
70270: LD_VAR 0 2
70274: PPUSH
70275: CALL_OW 318
70279: IFFALSE 70290
// ComWalk ( un ) ;
70281: LD_VAR 0 2
70285: PPUSH
70286: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70290: LD_VAR 0 2
70294: PPUSH
70295: LD_INT 8
70297: PPUSH
70298: CALL_OW 336
// end ;
70302: PPOPN 3
70304: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
70305: LD_EXP 51
70309: PUSH
70310: LD_EXP 95
70314: AND
70315: IFFALSE 70459
70317: GO 70319
70319: DISABLE
70320: LD_INT 0
70322: PPUSH
70323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
70324: LD_ADDR_VAR 0 2
70328: PUSH
70329: LD_INT 22
70331: PUSH
70332: LD_OWVAR 2
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 21
70343: PUSH
70344: LD_INT 2
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 2
70353: PUSH
70354: LD_INT 34
70356: PUSH
70357: LD_INT 12
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 34
70366: PUSH
70367: LD_INT 51
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 34
70376: PUSH
70377: LD_INT 32
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: LIST
70394: PPUSH
70395: CALL_OW 69
70399: ST_TO_ADDR
// if not tmp then
70400: LD_VAR 0 2
70404: NOT
70405: IFFALSE 70409
// exit ;
70407: GO 70459
// for i in tmp do
70409: LD_ADDR_VAR 0 1
70413: PUSH
70414: LD_VAR 0 2
70418: PUSH
70419: FOR_IN
70420: IFFALSE 70457
// if GetCargo ( i , mat_artifact ) = 0 then
70422: LD_VAR 0 1
70426: PPUSH
70427: LD_INT 4
70429: PPUSH
70430: CALL_OW 289
70434: PUSH
70435: LD_INT 0
70437: EQUAL
70438: IFFALSE 70455
// SetCargo ( i , mat_siberit , 100 ) ;
70440: LD_VAR 0 1
70444: PPUSH
70445: LD_INT 3
70447: PPUSH
70448: LD_INT 100
70450: PPUSH
70451: CALL_OW 290
70455: GO 70419
70457: POP
70458: POP
// end ;
70459: PPOPN 2
70461: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
70462: LD_EXP 51
70466: PUSH
70467: LD_EXP 96
70471: AND
70472: IFFALSE 70655
70474: GO 70476
70476: DISABLE
70477: LD_INT 0
70479: PPUSH
70480: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70481: LD_ADDR_VAR 0 2
70485: PUSH
70486: LD_INT 22
70488: PUSH
70489: LD_OWVAR 2
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PPUSH
70498: CALL_OW 69
70502: ST_TO_ADDR
// if not tmp then
70503: LD_VAR 0 2
70507: NOT
70508: IFFALSE 70512
// exit ;
70510: GO 70655
// for i := 1 to 2 do
70512: LD_ADDR_VAR 0 1
70516: PUSH
70517: DOUBLE
70518: LD_INT 1
70520: DEC
70521: ST_TO_ADDR
70522: LD_INT 2
70524: PUSH
70525: FOR_TO
70526: IFFALSE 70653
// begin uc_side := your_side ;
70528: LD_ADDR_OWVAR 20
70532: PUSH
70533: LD_OWVAR 2
70537: ST_TO_ADDR
// uc_nation := nation_american ;
70538: LD_ADDR_OWVAR 21
70542: PUSH
70543: LD_INT 1
70545: ST_TO_ADDR
// vc_chassis := us_morphling ;
70546: LD_ADDR_OWVAR 37
70550: PUSH
70551: LD_INT 5
70553: ST_TO_ADDR
// vc_engine := engine_siberite ;
70554: LD_ADDR_OWVAR 39
70558: PUSH
70559: LD_INT 3
70561: ST_TO_ADDR
// vc_control := control_computer ;
70562: LD_ADDR_OWVAR 38
70566: PUSH
70567: LD_INT 3
70569: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70570: LD_ADDR_OWVAR 40
70574: PUSH
70575: LD_INT 10
70577: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70578: LD_VAR 0 2
70582: PUSH
70583: LD_INT 1
70585: ARRAY
70586: PPUSH
70587: CALL_OW 310
70591: NOT
70592: IFFALSE 70639
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
70594: CALL_OW 45
70598: PPUSH
70599: LD_VAR 0 2
70603: PUSH
70604: LD_INT 1
70606: ARRAY
70607: PPUSH
70608: CALL_OW 250
70612: PPUSH
70613: LD_VAR 0 2
70617: PUSH
70618: LD_INT 1
70620: ARRAY
70621: PPUSH
70622: CALL_OW 251
70626: PPUSH
70627: LD_INT 12
70629: PPUSH
70630: LD_INT 1
70632: PPUSH
70633: CALL_OW 50
70637: GO 70651
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70639: CALL_OW 45
70643: PPUSH
70644: LD_INT 1
70646: PPUSH
70647: CALL_OW 51
// end ;
70651: GO 70525
70653: POP
70654: POP
// end ;
70655: PPOPN 2
70657: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
70658: LD_EXP 51
70662: PUSH
70663: LD_EXP 97
70667: AND
70668: IFFALSE 70890
70670: GO 70672
70672: DISABLE
70673: LD_INT 0
70675: PPUSH
70676: PPUSH
70677: PPUSH
70678: PPUSH
70679: PPUSH
70680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70681: LD_ADDR_VAR 0 6
70685: PUSH
70686: LD_INT 22
70688: PUSH
70689: LD_OWVAR 2
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 21
70700: PUSH
70701: LD_INT 1
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 3
70710: PUSH
70711: LD_INT 23
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: LIST
70729: PPUSH
70730: CALL_OW 69
70734: ST_TO_ADDR
// if not tmp then
70735: LD_VAR 0 6
70739: NOT
70740: IFFALSE 70744
// exit ;
70742: GO 70890
// s1 := rand ( 1 , 4 ) ;
70744: LD_ADDR_VAR 0 2
70748: PUSH
70749: LD_INT 1
70751: PPUSH
70752: LD_INT 4
70754: PPUSH
70755: CALL_OW 12
70759: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
70760: LD_ADDR_VAR 0 4
70764: PUSH
70765: LD_VAR 0 6
70769: PUSH
70770: LD_INT 1
70772: ARRAY
70773: PPUSH
70774: LD_VAR 0 2
70778: PPUSH
70779: CALL_OW 259
70783: ST_TO_ADDR
// if s1 = 1 then
70784: LD_VAR 0 2
70788: PUSH
70789: LD_INT 1
70791: EQUAL
70792: IFFALSE 70812
// s2 := rand ( 2 , 4 ) else
70794: LD_ADDR_VAR 0 3
70798: PUSH
70799: LD_INT 2
70801: PPUSH
70802: LD_INT 4
70804: PPUSH
70805: CALL_OW 12
70809: ST_TO_ADDR
70810: GO 70820
// s2 := 1 ;
70812: LD_ADDR_VAR 0 3
70816: PUSH
70817: LD_INT 1
70819: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
70820: LD_ADDR_VAR 0 5
70824: PUSH
70825: LD_VAR 0 6
70829: PUSH
70830: LD_INT 1
70832: ARRAY
70833: PPUSH
70834: LD_VAR 0 3
70838: PPUSH
70839: CALL_OW 259
70843: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
70844: LD_VAR 0 6
70848: PUSH
70849: LD_INT 1
70851: ARRAY
70852: PPUSH
70853: LD_VAR 0 2
70857: PPUSH
70858: LD_VAR 0 5
70862: PPUSH
70863: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
70867: LD_VAR 0 6
70871: PUSH
70872: LD_INT 1
70874: ARRAY
70875: PPUSH
70876: LD_VAR 0 3
70880: PPUSH
70881: LD_VAR 0 4
70885: PPUSH
70886: CALL_OW 237
// end ;
70890: PPOPN 6
70892: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
70893: LD_EXP 51
70897: PUSH
70898: LD_EXP 98
70902: AND
70903: IFFALSE 70982
70905: GO 70907
70907: DISABLE
70908: LD_INT 0
70910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
70911: LD_ADDR_VAR 0 1
70915: PUSH
70916: LD_INT 22
70918: PUSH
70919: LD_OWVAR 2
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 30
70930: PUSH
70931: LD_INT 3
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PPUSH
70942: CALL_OW 69
70946: ST_TO_ADDR
// if not tmp then
70947: LD_VAR 0 1
70951: NOT
70952: IFFALSE 70956
// exit ;
70954: GO 70982
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70956: LD_VAR 0 1
70960: PUSH
70961: LD_INT 1
70963: PPUSH
70964: LD_VAR 0 1
70968: PPUSH
70969: CALL_OW 12
70973: ARRAY
70974: PPUSH
70975: LD_INT 1
70977: PPUSH
70978: CALL_OW 234
// end ;
70982: PPOPN 1
70984: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
70985: LD_EXP 51
70989: PUSH
70990: LD_EXP 99
70994: AND
70995: IFFALSE 71107
70997: GO 70999
70999: DISABLE
71000: LD_INT 0
71002: PPUSH
71003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
71004: LD_ADDR_VAR 0 2
71008: PUSH
71009: LD_INT 22
71011: PUSH
71012: LD_OWVAR 2
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 2
71023: PUSH
71024: LD_INT 30
71026: PUSH
71027: LD_INT 27
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 30
71036: PUSH
71037: LD_INT 26
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 30
71046: PUSH
71047: LD_INT 28
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PPUSH
71064: CALL_OW 69
71068: ST_TO_ADDR
// if not tmp then
71069: LD_VAR 0 2
71073: NOT
71074: IFFALSE 71078
// exit ;
71076: GO 71107
// for i in tmp do
71078: LD_ADDR_VAR 0 1
71082: PUSH
71083: LD_VAR 0 2
71087: PUSH
71088: FOR_IN
71089: IFFALSE 71105
// SetLives ( i , 1 ) ;
71091: LD_VAR 0 1
71095: PPUSH
71096: LD_INT 1
71098: PPUSH
71099: CALL_OW 234
71103: GO 71088
71105: POP
71106: POP
// end ;
71107: PPOPN 2
71109: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
71110: LD_EXP 51
71114: PUSH
71115: LD_EXP 100
71119: AND
71120: IFFALSE 71407
71122: GO 71124
71124: DISABLE
71125: LD_INT 0
71127: PPUSH
71128: PPUSH
71129: PPUSH
// begin i := rand ( 1 , 7 ) ;
71130: LD_ADDR_VAR 0 1
71134: PUSH
71135: LD_INT 1
71137: PPUSH
71138: LD_INT 7
71140: PPUSH
71141: CALL_OW 12
71145: ST_TO_ADDR
// case i of 1 :
71146: LD_VAR 0 1
71150: PUSH
71151: LD_INT 1
71153: DOUBLE
71154: EQUAL
71155: IFTRUE 71159
71157: GO 71169
71159: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
71160: LD_STRING earthquake(getX(game), 0, 32)
71162: PPUSH
71163: CALL_OW 559
71167: GO 71407
71169: LD_INT 2
71171: DOUBLE
71172: EQUAL
71173: IFTRUE 71177
71175: GO 71191
71177: POP
// begin ToLua ( displayStucuk(); ) ;
71178: LD_STRING displayStucuk();
71180: PPUSH
71181: CALL_OW 559
// ResetFog ;
71185: CALL_OW 335
// end ; 3 :
71189: GO 71407
71191: LD_INT 3
71193: DOUBLE
71194: EQUAL
71195: IFTRUE 71199
71197: GO 71303
71199: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71200: LD_ADDR_VAR 0 2
71204: PUSH
71205: LD_INT 22
71207: PUSH
71208: LD_OWVAR 2
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 25
71219: PUSH
71220: LD_INT 1
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PPUSH
71231: CALL_OW 69
71235: ST_TO_ADDR
// if not tmp then
71236: LD_VAR 0 2
71240: NOT
71241: IFFALSE 71245
// exit ;
71243: GO 71407
// un := tmp [ rand ( 1 , tmp ) ] ;
71245: LD_ADDR_VAR 0 3
71249: PUSH
71250: LD_VAR 0 2
71254: PUSH
71255: LD_INT 1
71257: PPUSH
71258: LD_VAR 0 2
71262: PPUSH
71263: CALL_OW 12
71267: ARRAY
71268: ST_TO_ADDR
// if Crawls ( un ) then
71269: LD_VAR 0 3
71273: PPUSH
71274: CALL_OW 318
71278: IFFALSE 71289
// ComWalk ( un ) ;
71280: LD_VAR 0 3
71284: PPUSH
71285: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71289: LD_VAR 0 3
71293: PPUSH
71294: LD_INT 8
71296: PPUSH
71297: CALL_OW 336
// end ; 4 :
71301: GO 71407
71303: LD_INT 4
71305: DOUBLE
71306: EQUAL
71307: IFTRUE 71311
71309: GO 71385
71311: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71312: LD_ADDR_VAR 0 2
71316: PUSH
71317: LD_INT 22
71319: PUSH
71320: LD_OWVAR 2
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 30
71331: PUSH
71332: LD_INT 29
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PPUSH
71343: CALL_OW 69
71347: ST_TO_ADDR
// if not tmp then
71348: LD_VAR 0 2
71352: NOT
71353: IFFALSE 71357
// exit ;
71355: GO 71407
// CenterNowOnUnits ( tmp [ 1 ] ) ;
71357: LD_VAR 0 2
71361: PUSH
71362: LD_INT 1
71364: ARRAY
71365: PPUSH
71366: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
71370: LD_VAR 0 2
71374: PUSH
71375: LD_INT 1
71377: ARRAY
71378: PPUSH
71379: CALL_OW 65
// end ; 5 .. 7 :
71383: GO 71407
71385: LD_INT 5
71387: DOUBLE
71388: GREATEREQUAL
71389: IFFALSE 71397
71391: LD_INT 7
71393: DOUBLE
71394: LESSEQUAL
71395: IFTRUE 71399
71397: GO 71406
71399: POP
// StreamSibBomb ; end ;
71400: CALL 67644 0 0
71404: GO 71407
71406: POP
// end ;
71407: PPOPN 3
71409: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
71410: LD_EXP 51
71414: PUSH
71415: LD_EXP 101
71419: AND
71420: IFFALSE 71576
71422: GO 71424
71424: DISABLE
71425: LD_INT 0
71427: PPUSH
71428: PPUSH
71429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
71430: LD_ADDR_VAR 0 2
71434: PUSH
71435: LD_INT 81
71437: PUSH
71438: LD_OWVAR 2
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 2
71449: PUSH
71450: LD_INT 21
71452: PUSH
71453: LD_INT 1
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 21
71462: PUSH
71463: LD_INT 2
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: LIST
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PPUSH
71479: CALL_OW 69
71483: ST_TO_ADDR
// if not tmp then
71484: LD_VAR 0 2
71488: NOT
71489: IFFALSE 71493
// exit ;
71491: GO 71576
// p := 0 ;
71493: LD_ADDR_VAR 0 3
71497: PUSH
71498: LD_INT 0
71500: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71501: LD_INT 35
71503: PPUSH
71504: CALL_OW 67
// p := p + 1 ;
71508: LD_ADDR_VAR 0 3
71512: PUSH
71513: LD_VAR 0 3
71517: PUSH
71518: LD_INT 1
71520: PLUS
71521: ST_TO_ADDR
// for i in tmp do
71522: LD_ADDR_VAR 0 1
71526: PUSH
71527: LD_VAR 0 2
71531: PUSH
71532: FOR_IN
71533: IFFALSE 71564
// if GetLives ( i ) < 1000 then
71535: LD_VAR 0 1
71539: PPUSH
71540: CALL_OW 256
71544: PUSH
71545: LD_INT 1000
71547: LESS
71548: IFFALSE 71562
// SetLives ( i , 1000 ) ;
71550: LD_VAR 0 1
71554: PPUSH
71555: LD_INT 1000
71557: PPUSH
71558: CALL_OW 234
71562: GO 71532
71564: POP
71565: POP
// until p > 20 ;
71566: LD_VAR 0 3
71570: PUSH
71571: LD_INT 20
71573: GREATER
71574: IFFALSE 71501
// end ;
71576: PPOPN 3
71578: END
// every 0 0$1 trigger StreamModeActive and sTime do
71579: LD_EXP 51
71583: PUSH
71584: LD_EXP 102
71588: AND
71589: IFFALSE 71624
71591: GO 71593
71593: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
71594: LD_INT 28
71596: PPUSH
71597: LD_OWVAR 2
71601: PPUSH
71602: LD_INT 2
71604: PPUSH
71605: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71609: LD_INT 30
71611: PPUSH
71612: LD_OWVAR 2
71616: PPUSH
71617: LD_INT 2
71619: PPUSH
71620: CALL_OW 322
// end ;
71624: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71625: LD_EXP 51
71629: PUSH
71630: LD_EXP 103
71634: AND
71635: IFFALSE 71756
71637: GO 71639
71639: DISABLE
71640: LD_INT 0
71642: PPUSH
71643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71644: LD_ADDR_VAR 0 2
71648: PUSH
71649: LD_INT 22
71651: PUSH
71652: LD_OWVAR 2
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 21
71663: PUSH
71664: LD_INT 1
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 3
71673: PUSH
71674: LD_INT 23
71676: PUSH
71677: LD_INT 0
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: LIST
71692: PPUSH
71693: CALL_OW 69
71697: ST_TO_ADDR
// if not tmp then
71698: LD_VAR 0 2
71702: NOT
71703: IFFALSE 71707
// exit ;
71705: GO 71756
// for i in tmp do
71707: LD_ADDR_VAR 0 1
71711: PUSH
71712: LD_VAR 0 2
71716: PUSH
71717: FOR_IN
71718: IFFALSE 71754
// begin if Crawls ( i ) then
71720: LD_VAR 0 1
71724: PPUSH
71725: CALL_OW 318
71729: IFFALSE 71740
// ComWalk ( i ) ;
71731: LD_VAR 0 1
71735: PPUSH
71736: CALL_OW 138
// SetClass ( i , 2 ) ;
71740: LD_VAR 0 1
71744: PPUSH
71745: LD_INT 2
71747: PPUSH
71748: CALL_OW 336
// end ;
71752: GO 71717
71754: POP
71755: POP
// end ;
71756: PPOPN 2
71758: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
71759: LD_EXP 51
71763: PUSH
71764: LD_EXP 104
71768: AND
71769: IFFALSE 72057
71771: GO 71773
71773: DISABLE
71774: LD_INT 0
71776: PPUSH
71777: PPUSH
71778: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
71779: LD_OWVAR 2
71783: PPUSH
71784: LD_INT 9
71786: PPUSH
71787: LD_INT 1
71789: PPUSH
71790: LD_INT 1
71792: PPUSH
71793: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
71797: LD_INT 9
71799: PPUSH
71800: LD_OWVAR 2
71804: PPUSH
71805: CALL_OW 343
// uc_side := 9 ;
71809: LD_ADDR_OWVAR 20
71813: PUSH
71814: LD_INT 9
71816: ST_TO_ADDR
// uc_nation := 2 ;
71817: LD_ADDR_OWVAR 21
71821: PUSH
71822: LD_INT 2
71824: ST_TO_ADDR
// hc_name := Dark Warrior ;
71825: LD_ADDR_OWVAR 26
71829: PUSH
71830: LD_STRING Dark Warrior
71832: ST_TO_ADDR
// hc_gallery :=  ;
71833: LD_ADDR_OWVAR 33
71837: PUSH
71838: LD_STRING 
71840: ST_TO_ADDR
// hc_noskilllimit := true ;
71841: LD_ADDR_OWVAR 76
71845: PUSH
71846: LD_INT 1
71848: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
71849: LD_ADDR_OWVAR 31
71853: PUSH
71854: LD_INT 30
71856: PUSH
71857: LD_INT 30
71859: PUSH
71860: LD_INT 30
71862: PUSH
71863: LD_INT 30
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: ST_TO_ADDR
// un := CreateHuman ;
71872: LD_ADDR_VAR 0 3
71876: PUSH
71877: CALL_OW 44
71881: ST_TO_ADDR
// hc_noskilllimit := false ;
71882: LD_ADDR_OWVAR 76
71886: PUSH
71887: LD_INT 0
71889: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71890: LD_VAR 0 3
71894: PPUSH
71895: LD_INT 1
71897: PPUSH
71898: CALL_OW 51
// ToLua ( playRanger() ) ;
71902: LD_STRING playRanger()
71904: PPUSH
71905: CALL_OW 559
// p := 0 ;
71909: LD_ADDR_VAR 0 2
71913: PUSH
71914: LD_INT 0
71916: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71917: LD_INT 35
71919: PPUSH
71920: CALL_OW 67
// p := p + 1 ;
71924: LD_ADDR_VAR 0 2
71928: PUSH
71929: LD_VAR 0 2
71933: PUSH
71934: LD_INT 1
71936: PLUS
71937: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
71938: LD_VAR 0 3
71942: PPUSH
71943: CALL_OW 256
71947: PUSH
71948: LD_INT 1000
71950: LESS
71951: IFFALSE 71965
// SetLives ( un , 1000 ) ;
71953: LD_VAR 0 3
71957: PPUSH
71958: LD_INT 1000
71960: PPUSH
71961: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
71965: LD_VAR 0 3
71969: PPUSH
71970: LD_INT 81
71972: PUSH
71973: LD_OWVAR 2
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 91
71984: PUSH
71985: LD_VAR 0 3
71989: PUSH
71990: LD_INT 30
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: LIST
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PPUSH
72002: CALL_OW 69
72006: PPUSH
72007: LD_VAR 0 3
72011: PPUSH
72012: CALL_OW 74
72016: PPUSH
72017: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
72021: LD_VAR 0 2
72025: PUSH
72026: LD_INT 80
72028: GREATER
72029: PUSH
72030: LD_VAR 0 3
72034: PPUSH
72035: CALL_OW 301
72039: OR
72040: IFFALSE 71917
// if un then
72042: LD_VAR 0 3
72046: IFFALSE 72057
// RemoveUnit ( un ) ;
72048: LD_VAR 0 3
72052: PPUSH
72053: CALL_OW 64
// end ;
72057: PPOPN 3
72059: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
72060: LD_EXP 105
72064: IFFALSE 72180
72066: GO 72068
72068: DISABLE
72069: LD_INT 0
72071: PPUSH
72072: PPUSH
72073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72074: LD_ADDR_VAR 0 2
72078: PUSH
72079: LD_INT 81
72081: PUSH
72082: LD_OWVAR 2
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 21
72093: PUSH
72094: LD_INT 1
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PPUSH
72105: CALL_OW 69
72109: ST_TO_ADDR
// ToLua ( playComputer() ) ;
72110: LD_STRING playComputer()
72112: PPUSH
72113: CALL_OW 559
// if not tmp then
72117: LD_VAR 0 2
72121: NOT
72122: IFFALSE 72126
// exit ;
72124: GO 72180
// for i in tmp do
72126: LD_ADDR_VAR 0 1
72130: PUSH
72131: LD_VAR 0 2
72135: PUSH
72136: FOR_IN
72137: IFFALSE 72178
// for j := 1 to 4 do
72139: LD_ADDR_VAR 0 3
72143: PUSH
72144: DOUBLE
72145: LD_INT 1
72147: DEC
72148: ST_TO_ADDR
72149: LD_INT 4
72151: PUSH
72152: FOR_TO
72153: IFFALSE 72174
// SetSkill ( i , j , 10 ) ;
72155: LD_VAR 0 1
72159: PPUSH
72160: LD_VAR 0 3
72164: PPUSH
72165: LD_INT 10
72167: PPUSH
72168: CALL_OW 237
72172: GO 72152
72174: POP
72175: POP
72176: GO 72136
72178: POP
72179: POP
// end ;
72180: PPOPN 3
72182: END
// every 0 0$1 trigger s30 do var i , tmp ;
72183: LD_EXP 106
72187: IFFALSE 72256
72189: GO 72191
72191: DISABLE
72192: LD_INT 0
72194: PPUSH
72195: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72196: LD_ADDR_VAR 0 2
72200: PUSH
72201: LD_INT 22
72203: PUSH
72204: LD_OWVAR 2
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PPUSH
72213: CALL_OW 69
72217: ST_TO_ADDR
// if not tmp then
72218: LD_VAR 0 2
72222: NOT
72223: IFFALSE 72227
// exit ;
72225: GO 72256
// for i in tmp do
72227: LD_ADDR_VAR 0 1
72231: PUSH
72232: LD_VAR 0 2
72236: PUSH
72237: FOR_IN
72238: IFFALSE 72254
// SetLives ( i , 300 ) ;
72240: LD_VAR 0 1
72244: PPUSH
72245: LD_INT 300
72247: PPUSH
72248: CALL_OW 234
72252: GO 72237
72254: POP
72255: POP
// end ;
72256: PPOPN 2
72258: END
// every 0 0$1 trigger s60 do var i , tmp ;
72259: LD_EXP 107
72263: IFFALSE 72332
72265: GO 72267
72267: DISABLE
72268: LD_INT 0
72270: PPUSH
72271: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72272: LD_ADDR_VAR 0 2
72276: PUSH
72277: LD_INT 22
72279: PUSH
72280: LD_OWVAR 2
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PPUSH
72289: CALL_OW 69
72293: ST_TO_ADDR
// if not tmp then
72294: LD_VAR 0 2
72298: NOT
72299: IFFALSE 72303
// exit ;
72301: GO 72332
// for i in tmp do
72303: LD_ADDR_VAR 0 1
72307: PUSH
72308: LD_VAR 0 2
72312: PUSH
72313: FOR_IN
72314: IFFALSE 72330
// SetLives ( i , 600 ) ;
72316: LD_VAR 0 1
72320: PPUSH
72321: LD_INT 600
72323: PPUSH
72324: CALL_OW 234
72328: GO 72313
72330: POP
72331: POP
// end ;
72332: PPOPN 2
72334: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72335: LD_INT 0
72337: PPUSH
// case cmd of 301 :
72338: LD_VAR 0 1
72342: PUSH
72343: LD_INT 301
72345: DOUBLE
72346: EQUAL
72347: IFTRUE 72351
72349: GO 72383
72351: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
72352: LD_VAR 0 6
72356: PPUSH
72357: LD_VAR 0 7
72361: PPUSH
72362: LD_VAR 0 8
72366: PPUSH
72367: LD_VAR 0 4
72371: PPUSH
72372: LD_VAR 0 5
72376: PPUSH
72377: CALL 73592 0 5
72381: GO 72504
72383: LD_INT 302
72385: DOUBLE
72386: EQUAL
72387: IFTRUE 72391
72389: GO 72428
72391: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
72392: LD_VAR 0 6
72396: PPUSH
72397: LD_VAR 0 7
72401: PPUSH
72402: LD_VAR 0 8
72406: PPUSH
72407: LD_VAR 0 9
72411: PPUSH
72412: LD_VAR 0 4
72416: PPUSH
72417: LD_VAR 0 5
72421: PPUSH
72422: CALL 73683 0 6
72426: GO 72504
72428: LD_INT 303
72430: DOUBLE
72431: EQUAL
72432: IFTRUE 72436
72434: GO 72473
72436: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
72437: LD_VAR 0 6
72441: PPUSH
72442: LD_VAR 0 7
72446: PPUSH
72447: LD_VAR 0 8
72451: PPUSH
72452: LD_VAR 0 9
72456: PPUSH
72457: LD_VAR 0 4
72461: PPUSH
72462: LD_VAR 0 5
72466: PPUSH
72467: CALL 72509 0 6
72471: GO 72504
72473: LD_INT 304
72475: DOUBLE
72476: EQUAL
72477: IFTRUE 72481
72479: GO 72503
72481: POP
// hHackTeleport ( unit , x , y ) ; end ;
72482: LD_VAR 0 2
72486: PPUSH
72487: LD_VAR 0 4
72491: PPUSH
72492: LD_VAR 0 5
72496: PPUSH
72497: CALL 74276 0 3
72501: GO 72504
72503: POP
// end ;
72504: LD_VAR 0 12
72508: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
72509: LD_INT 0
72511: PPUSH
72512: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
72513: LD_VAR 0 1
72517: PUSH
72518: LD_INT 1
72520: LESS
72521: PUSH
72522: LD_VAR 0 1
72526: PUSH
72527: LD_INT 3
72529: GREATER
72530: OR
72531: PUSH
72532: LD_VAR 0 5
72536: PPUSH
72537: LD_VAR 0 6
72541: PPUSH
72542: CALL_OW 428
72546: OR
72547: IFFALSE 72551
// exit ;
72549: GO 73279
// uc_side := your_side ;
72551: LD_ADDR_OWVAR 20
72555: PUSH
72556: LD_OWVAR 2
72560: ST_TO_ADDR
// uc_nation := nation ;
72561: LD_ADDR_OWVAR 21
72565: PUSH
72566: LD_VAR 0 1
72570: ST_TO_ADDR
// bc_level = 1 ;
72571: LD_ADDR_OWVAR 43
72575: PUSH
72576: LD_INT 1
72578: ST_TO_ADDR
// case btype of 1 :
72579: LD_VAR 0 2
72583: PUSH
72584: LD_INT 1
72586: DOUBLE
72587: EQUAL
72588: IFTRUE 72592
72590: GO 72603
72592: POP
// bc_type := b_depot ; 2 :
72593: LD_ADDR_OWVAR 42
72597: PUSH
72598: LD_INT 0
72600: ST_TO_ADDR
72601: GO 73223
72603: LD_INT 2
72605: DOUBLE
72606: EQUAL
72607: IFTRUE 72611
72609: GO 72622
72611: POP
// bc_type := b_warehouse ; 3 :
72612: LD_ADDR_OWVAR 42
72616: PUSH
72617: LD_INT 1
72619: ST_TO_ADDR
72620: GO 73223
72622: LD_INT 3
72624: DOUBLE
72625: EQUAL
72626: IFTRUE 72630
72628: GO 72641
72630: POP
// bc_type := b_lab ; 4 .. 9 :
72631: LD_ADDR_OWVAR 42
72635: PUSH
72636: LD_INT 6
72638: ST_TO_ADDR
72639: GO 73223
72641: LD_INT 4
72643: DOUBLE
72644: GREATEREQUAL
72645: IFFALSE 72653
72647: LD_INT 9
72649: DOUBLE
72650: LESSEQUAL
72651: IFTRUE 72655
72653: GO 72715
72655: POP
// begin bc_type := b_lab_half ;
72656: LD_ADDR_OWVAR 42
72660: PUSH
72661: LD_INT 7
72663: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
72664: LD_ADDR_OWVAR 44
72668: PUSH
72669: LD_INT 10
72671: PUSH
72672: LD_INT 11
72674: PUSH
72675: LD_INT 12
72677: PUSH
72678: LD_INT 15
72680: PUSH
72681: LD_INT 14
72683: PUSH
72684: LD_INT 13
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: PUSH
72695: LD_VAR 0 2
72699: PUSH
72700: LD_INT 3
72702: MINUS
72703: ARRAY
72704: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
72705: LD_ADDR_OWVAR 45
72709: PUSH
72710: LD_INT 9
72712: ST_TO_ADDR
// end ; 10 .. 13 :
72713: GO 73223
72715: LD_INT 10
72717: DOUBLE
72718: GREATEREQUAL
72719: IFFALSE 72727
72721: LD_INT 13
72723: DOUBLE
72724: LESSEQUAL
72725: IFTRUE 72729
72727: GO 72806
72729: POP
// begin bc_type := b_lab_full ;
72730: LD_ADDR_OWVAR 42
72734: PUSH
72735: LD_INT 8
72737: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
72738: LD_ADDR_OWVAR 44
72742: PUSH
72743: LD_INT 10
72745: PUSH
72746: LD_INT 12
72748: PUSH
72749: LD_INT 14
72751: PUSH
72752: LD_INT 13
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: PUSH
72761: LD_VAR 0 2
72765: PUSH
72766: LD_INT 9
72768: MINUS
72769: ARRAY
72770: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
72771: LD_ADDR_OWVAR 45
72775: PUSH
72776: LD_INT 11
72778: PUSH
72779: LD_INT 15
72781: PUSH
72782: LD_INT 12
72784: PUSH
72785: LD_INT 15
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: PUSH
72794: LD_VAR 0 2
72798: PUSH
72799: LD_INT 9
72801: MINUS
72802: ARRAY
72803: ST_TO_ADDR
// end ; 14 :
72804: GO 73223
72806: LD_INT 14
72808: DOUBLE
72809: EQUAL
72810: IFTRUE 72814
72812: GO 72825
72814: POP
// bc_type := b_workshop ; 15 :
72815: LD_ADDR_OWVAR 42
72819: PUSH
72820: LD_INT 2
72822: ST_TO_ADDR
72823: GO 73223
72825: LD_INT 15
72827: DOUBLE
72828: EQUAL
72829: IFTRUE 72833
72831: GO 72844
72833: POP
// bc_type := b_factory ; 16 :
72834: LD_ADDR_OWVAR 42
72838: PUSH
72839: LD_INT 3
72841: ST_TO_ADDR
72842: GO 73223
72844: LD_INT 16
72846: DOUBLE
72847: EQUAL
72848: IFTRUE 72852
72850: GO 72863
72852: POP
// bc_type := b_ext_gun ; 17 :
72853: LD_ADDR_OWVAR 42
72857: PUSH
72858: LD_INT 17
72860: ST_TO_ADDR
72861: GO 73223
72863: LD_INT 17
72865: DOUBLE
72866: EQUAL
72867: IFTRUE 72871
72869: GO 72899
72871: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
72872: LD_ADDR_OWVAR 42
72876: PUSH
72877: LD_INT 19
72879: PUSH
72880: LD_INT 23
72882: PUSH
72883: LD_INT 19
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: LIST
72890: PUSH
72891: LD_VAR 0 1
72895: ARRAY
72896: ST_TO_ADDR
72897: GO 73223
72899: LD_INT 18
72901: DOUBLE
72902: EQUAL
72903: IFTRUE 72907
72905: GO 72918
72907: POP
// bc_type := b_ext_radar ; 19 :
72908: LD_ADDR_OWVAR 42
72912: PUSH
72913: LD_INT 20
72915: ST_TO_ADDR
72916: GO 73223
72918: LD_INT 19
72920: DOUBLE
72921: EQUAL
72922: IFTRUE 72926
72924: GO 72937
72926: POP
// bc_type := b_ext_radio ; 20 :
72927: LD_ADDR_OWVAR 42
72931: PUSH
72932: LD_INT 22
72934: ST_TO_ADDR
72935: GO 73223
72937: LD_INT 20
72939: DOUBLE
72940: EQUAL
72941: IFTRUE 72945
72943: GO 72956
72945: POP
// bc_type := b_ext_siberium ; 21 :
72946: LD_ADDR_OWVAR 42
72950: PUSH
72951: LD_INT 21
72953: ST_TO_ADDR
72954: GO 73223
72956: LD_INT 21
72958: DOUBLE
72959: EQUAL
72960: IFTRUE 72964
72962: GO 72975
72964: POP
// bc_type := b_ext_computer ; 22 :
72965: LD_ADDR_OWVAR 42
72969: PUSH
72970: LD_INT 24
72972: ST_TO_ADDR
72973: GO 73223
72975: LD_INT 22
72977: DOUBLE
72978: EQUAL
72979: IFTRUE 72983
72981: GO 72994
72983: POP
// bc_type := b_ext_track ; 23 :
72984: LD_ADDR_OWVAR 42
72988: PUSH
72989: LD_INT 16
72991: ST_TO_ADDR
72992: GO 73223
72994: LD_INT 23
72996: DOUBLE
72997: EQUAL
72998: IFTRUE 73002
73000: GO 73013
73002: POP
// bc_type := b_ext_laser ; 24 :
73003: LD_ADDR_OWVAR 42
73007: PUSH
73008: LD_INT 25
73010: ST_TO_ADDR
73011: GO 73223
73013: LD_INT 24
73015: DOUBLE
73016: EQUAL
73017: IFTRUE 73021
73019: GO 73032
73021: POP
// bc_type := b_control_tower ; 25 :
73022: LD_ADDR_OWVAR 42
73026: PUSH
73027: LD_INT 36
73029: ST_TO_ADDR
73030: GO 73223
73032: LD_INT 25
73034: DOUBLE
73035: EQUAL
73036: IFTRUE 73040
73038: GO 73051
73040: POP
// bc_type := b_breastwork ; 26 :
73041: LD_ADDR_OWVAR 42
73045: PUSH
73046: LD_INT 31
73048: ST_TO_ADDR
73049: GO 73223
73051: LD_INT 26
73053: DOUBLE
73054: EQUAL
73055: IFTRUE 73059
73057: GO 73070
73059: POP
// bc_type := b_bunker ; 27 :
73060: LD_ADDR_OWVAR 42
73064: PUSH
73065: LD_INT 32
73067: ST_TO_ADDR
73068: GO 73223
73070: LD_INT 27
73072: DOUBLE
73073: EQUAL
73074: IFTRUE 73078
73076: GO 73089
73078: POP
// bc_type := b_turret ; 28 :
73079: LD_ADDR_OWVAR 42
73083: PUSH
73084: LD_INT 33
73086: ST_TO_ADDR
73087: GO 73223
73089: LD_INT 28
73091: DOUBLE
73092: EQUAL
73093: IFTRUE 73097
73095: GO 73108
73097: POP
// bc_type := b_armoury ; 29 :
73098: LD_ADDR_OWVAR 42
73102: PUSH
73103: LD_INT 4
73105: ST_TO_ADDR
73106: GO 73223
73108: LD_INT 29
73110: DOUBLE
73111: EQUAL
73112: IFTRUE 73116
73114: GO 73127
73116: POP
// bc_type := b_barracks ; 30 :
73117: LD_ADDR_OWVAR 42
73121: PUSH
73122: LD_INT 5
73124: ST_TO_ADDR
73125: GO 73223
73127: LD_INT 30
73129: DOUBLE
73130: EQUAL
73131: IFTRUE 73135
73133: GO 73146
73135: POP
// bc_type := b_solar_power ; 31 :
73136: LD_ADDR_OWVAR 42
73140: PUSH
73141: LD_INT 27
73143: ST_TO_ADDR
73144: GO 73223
73146: LD_INT 31
73148: DOUBLE
73149: EQUAL
73150: IFTRUE 73154
73152: GO 73165
73154: POP
// bc_type := b_oil_power ; 32 :
73155: LD_ADDR_OWVAR 42
73159: PUSH
73160: LD_INT 26
73162: ST_TO_ADDR
73163: GO 73223
73165: LD_INT 32
73167: DOUBLE
73168: EQUAL
73169: IFTRUE 73173
73171: GO 73184
73173: POP
// bc_type := b_siberite_power ; 33 :
73174: LD_ADDR_OWVAR 42
73178: PUSH
73179: LD_INT 28
73181: ST_TO_ADDR
73182: GO 73223
73184: LD_INT 33
73186: DOUBLE
73187: EQUAL
73188: IFTRUE 73192
73190: GO 73203
73192: POP
// bc_type := b_oil_mine ; 34 :
73193: LD_ADDR_OWVAR 42
73197: PUSH
73198: LD_INT 29
73200: ST_TO_ADDR
73201: GO 73223
73203: LD_INT 34
73205: DOUBLE
73206: EQUAL
73207: IFTRUE 73211
73209: GO 73222
73211: POP
// bc_type := b_siberite_mine ; end ;
73212: LD_ADDR_OWVAR 42
73216: PUSH
73217: LD_INT 30
73219: ST_TO_ADDR
73220: GO 73223
73222: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
73223: LD_ADDR_VAR 0 8
73227: PUSH
73228: LD_VAR 0 5
73232: PPUSH
73233: LD_VAR 0 6
73237: PPUSH
73238: LD_VAR 0 3
73242: PPUSH
73243: CALL_OW 47
73247: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
73248: LD_OWVAR 42
73252: PUSH
73253: LD_INT 32
73255: PUSH
73256: LD_INT 33
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: IN
73263: IFFALSE 73279
// PlaceWeaponTurret ( b , weapon ) ;
73265: LD_VAR 0 8
73269: PPUSH
73270: LD_VAR 0 4
73274: PPUSH
73275: CALL_OW 431
// end ;
73279: LD_VAR 0 7
73283: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
73284: LD_INT 0
73286: PPUSH
73287: PPUSH
73288: PPUSH
73289: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73290: LD_ADDR_VAR 0 4
73294: PUSH
73295: LD_INT 22
73297: PUSH
73298: LD_OWVAR 2
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: PUSH
73307: LD_INT 2
73309: PUSH
73310: LD_INT 30
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 30
73322: PUSH
73323: LD_INT 1
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: LIST
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PPUSH
73339: CALL_OW 69
73343: ST_TO_ADDR
// if not tmp then
73344: LD_VAR 0 4
73348: NOT
73349: IFFALSE 73353
// exit ;
73351: GO 73412
// for i in tmp do
73353: LD_ADDR_VAR 0 2
73357: PUSH
73358: LD_VAR 0 4
73362: PUSH
73363: FOR_IN
73364: IFFALSE 73410
// for j = 1 to 3 do
73366: LD_ADDR_VAR 0 3
73370: PUSH
73371: DOUBLE
73372: LD_INT 1
73374: DEC
73375: ST_TO_ADDR
73376: LD_INT 3
73378: PUSH
73379: FOR_TO
73380: IFFALSE 73406
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
73382: LD_VAR 0 2
73386: PPUSH
73387: CALL_OW 274
73391: PPUSH
73392: LD_VAR 0 3
73396: PPUSH
73397: LD_INT 99999
73399: PPUSH
73400: CALL_OW 277
73404: GO 73379
73406: POP
73407: POP
73408: GO 73363
73410: POP
73411: POP
// end ;
73412: LD_VAR 0 1
73416: RET
// export function hHackSetLevel10 ; var i , j ; begin
73417: LD_INT 0
73419: PPUSH
73420: PPUSH
73421: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73422: LD_ADDR_VAR 0 2
73426: PUSH
73427: LD_INT 21
73429: PUSH
73430: LD_INT 1
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PPUSH
73437: CALL_OW 69
73441: PUSH
73442: FOR_IN
73443: IFFALSE 73495
// if IsSelected ( i ) then
73445: LD_VAR 0 2
73449: PPUSH
73450: CALL_OW 306
73454: IFFALSE 73493
// begin for j := 1 to 4 do
73456: LD_ADDR_VAR 0 3
73460: PUSH
73461: DOUBLE
73462: LD_INT 1
73464: DEC
73465: ST_TO_ADDR
73466: LD_INT 4
73468: PUSH
73469: FOR_TO
73470: IFFALSE 73491
// SetSkill ( i , j , 10 ) ;
73472: LD_VAR 0 2
73476: PPUSH
73477: LD_VAR 0 3
73481: PPUSH
73482: LD_INT 10
73484: PPUSH
73485: CALL_OW 237
73489: GO 73469
73491: POP
73492: POP
// end ;
73493: GO 73442
73495: POP
73496: POP
// end ;
73497: LD_VAR 0 1
73501: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
73502: LD_INT 0
73504: PPUSH
73505: PPUSH
73506: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
73507: LD_ADDR_VAR 0 2
73511: PUSH
73512: LD_INT 22
73514: PUSH
73515: LD_OWVAR 2
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 21
73526: PUSH
73527: LD_INT 1
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: PPUSH
73538: CALL_OW 69
73542: PUSH
73543: FOR_IN
73544: IFFALSE 73585
// begin for j := 1 to 4 do
73546: LD_ADDR_VAR 0 3
73550: PUSH
73551: DOUBLE
73552: LD_INT 1
73554: DEC
73555: ST_TO_ADDR
73556: LD_INT 4
73558: PUSH
73559: FOR_TO
73560: IFFALSE 73581
// SetSkill ( i , j , 10 ) ;
73562: LD_VAR 0 2
73566: PPUSH
73567: LD_VAR 0 3
73571: PPUSH
73572: LD_INT 10
73574: PPUSH
73575: CALL_OW 237
73579: GO 73559
73581: POP
73582: POP
// end ;
73583: GO 73543
73585: POP
73586: POP
// end ;
73587: LD_VAR 0 1
73591: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73592: LD_INT 0
73594: PPUSH
// uc_side := your_side ;
73595: LD_ADDR_OWVAR 20
73599: PUSH
73600: LD_OWVAR 2
73604: ST_TO_ADDR
// uc_nation := nation ;
73605: LD_ADDR_OWVAR 21
73609: PUSH
73610: LD_VAR 0 1
73614: ST_TO_ADDR
// InitHc ;
73615: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73619: LD_INT 0
73621: PPUSH
73622: LD_VAR 0 2
73626: PPUSH
73627: LD_VAR 0 3
73631: PPUSH
73632: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73636: LD_VAR 0 4
73640: PPUSH
73641: LD_VAR 0 5
73645: PPUSH
73646: CALL_OW 428
73650: PUSH
73651: LD_INT 0
73653: EQUAL
73654: IFFALSE 73678
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73656: CALL_OW 44
73660: PPUSH
73661: LD_VAR 0 4
73665: PPUSH
73666: LD_VAR 0 5
73670: PPUSH
73671: LD_INT 1
73673: PPUSH
73674: CALL_OW 48
// end ;
73678: LD_VAR 0 6
73682: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
73683: LD_INT 0
73685: PPUSH
73686: PPUSH
// uc_side := your_side ;
73687: LD_ADDR_OWVAR 20
73691: PUSH
73692: LD_OWVAR 2
73696: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
73697: LD_VAR 0 1
73701: PUSH
73702: LD_INT 1
73704: PUSH
73705: LD_INT 2
73707: PUSH
73708: LD_INT 3
73710: PUSH
73711: LD_INT 4
73713: PUSH
73714: LD_INT 5
73716: PUSH
73717: EMPTY
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: IN
73724: IFFALSE 73736
// uc_nation := nation_american else
73726: LD_ADDR_OWVAR 21
73730: PUSH
73731: LD_INT 1
73733: ST_TO_ADDR
73734: GO 73779
// if chassis in [ 11 , 12 , 13 , 14 ] then
73736: LD_VAR 0 1
73740: PUSH
73741: LD_INT 11
73743: PUSH
73744: LD_INT 12
73746: PUSH
73747: LD_INT 13
73749: PUSH
73750: LD_INT 14
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: IN
73759: IFFALSE 73771
// uc_nation := nation_arabian else
73761: LD_ADDR_OWVAR 21
73765: PUSH
73766: LD_INT 2
73768: ST_TO_ADDR
73769: GO 73779
// uc_nation := nation_russian ;
73771: LD_ADDR_OWVAR 21
73775: PUSH
73776: LD_INT 3
73778: ST_TO_ADDR
// vc_chassis := chassis ;
73779: LD_ADDR_OWVAR 37
73783: PUSH
73784: LD_VAR 0 1
73788: ST_TO_ADDR
// vc_engine := engine ;
73789: LD_ADDR_OWVAR 39
73793: PUSH
73794: LD_VAR 0 2
73798: ST_TO_ADDR
// vc_control := control ;
73799: LD_ADDR_OWVAR 38
73803: PUSH
73804: LD_VAR 0 3
73808: ST_TO_ADDR
// vc_weapon := weapon ;
73809: LD_ADDR_OWVAR 40
73813: PUSH
73814: LD_VAR 0 4
73818: ST_TO_ADDR
// un := CreateVehicle ;
73819: LD_ADDR_VAR 0 8
73823: PUSH
73824: CALL_OW 45
73828: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
73829: LD_VAR 0 8
73833: PPUSH
73834: LD_INT 0
73836: PPUSH
73837: LD_INT 5
73839: PPUSH
73840: CALL_OW 12
73844: PPUSH
73845: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
73849: LD_VAR 0 8
73853: PPUSH
73854: LD_VAR 0 5
73858: PPUSH
73859: LD_VAR 0 6
73863: PPUSH
73864: LD_INT 1
73866: PPUSH
73867: CALL_OW 48
// end ;
73871: LD_VAR 0 7
73875: RET
// export hInvincible ; every 1 do
73876: GO 73878
73878: DISABLE
// hInvincible := [ ] ;
73879: LD_ADDR_EXP 108
73883: PUSH
73884: EMPTY
73885: ST_TO_ADDR
73886: END
// every 10 do var i ;
73887: GO 73889
73889: DISABLE
73890: LD_INT 0
73892: PPUSH
// begin enable ;
73893: ENABLE
// if not hInvincible then
73894: LD_EXP 108
73898: NOT
73899: IFFALSE 73903
// exit ;
73901: GO 73947
// for i in hInvincible do
73903: LD_ADDR_VAR 0 1
73907: PUSH
73908: LD_EXP 108
73912: PUSH
73913: FOR_IN
73914: IFFALSE 73945
// if GetLives ( i ) < 1000 then
73916: LD_VAR 0 1
73920: PPUSH
73921: CALL_OW 256
73925: PUSH
73926: LD_INT 1000
73928: LESS
73929: IFFALSE 73943
// SetLives ( i , 1000 ) ;
73931: LD_VAR 0 1
73935: PPUSH
73936: LD_INT 1000
73938: PPUSH
73939: CALL_OW 234
73943: GO 73913
73945: POP
73946: POP
// end ;
73947: PPOPN 1
73949: END
// export function hHackInvincible ; var i ; begin
73950: LD_INT 0
73952: PPUSH
73953: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
73954: LD_ADDR_VAR 0 2
73958: PUSH
73959: LD_INT 2
73961: PUSH
73962: LD_INT 21
73964: PUSH
73965: LD_INT 1
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_INT 21
73974: PUSH
73975: LD_INT 2
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: LIST
73986: PPUSH
73987: CALL_OW 69
73991: PUSH
73992: FOR_IN
73993: IFFALSE 74054
// if IsSelected ( i ) then
73995: LD_VAR 0 2
73999: PPUSH
74000: CALL_OW 306
74004: IFFALSE 74052
// begin if i in hInvincible then
74006: LD_VAR 0 2
74010: PUSH
74011: LD_EXP 108
74015: IN
74016: IFFALSE 74036
// hInvincible := hInvincible diff i else
74018: LD_ADDR_EXP 108
74022: PUSH
74023: LD_EXP 108
74027: PUSH
74028: LD_VAR 0 2
74032: DIFF
74033: ST_TO_ADDR
74034: GO 74052
// hInvincible := hInvincible union i ;
74036: LD_ADDR_EXP 108
74040: PUSH
74041: LD_EXP 108
74045: PUSH
74046: LD_VAR 0 2
74050: UNION
74051: ST_TO_ADDR
// end ;
74052: GO 73992
74054: POP
74055: POP
// end ;
74056: LD_VAR 0 1
74060: RET
// export function hHackInvisible ; var i , j ; begin
74061: LD_INT 0
74063: PPUSH
74064: PPUSH
74065: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74066: LD_ADDR_VAR 0 2
74070: PUSH
74071: LD_INT 21
74073: PUSH
74074: LD_INT 1
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: PPUSH
74081: CALL_OW 69
74085: PUSH
74086: FOR_IN
74087: IFFALSE 74111
// if IsSelected ( i ) then
74089: LD_VAR 0 2
74093: PPUSH
74094: CALL_OW 306
74098: IFFALSE 74109
// ComForceInvisible ( i ) ;
74100: LD_VAR 0 2
74104: PPUSH
74105: CALL_OW 496
74109: GO 74086
74111: POP
74112: POP
// end ;
74113: LD_VAR 0 1
74117: RET
// export function hHackChangeYourSide ; begin
74118: LD_INT 0
74120: PPUSH
// if your_side = 8 then
74121: LD_OWVAR 2
74125: PUSH
74126: LD_INT 8
74128: EQUAL
74129: IFFALSE 74141
// your_side := 0 else
74131: LD_ADDR_OWVAR 2
74135: PUSH
74136: LD_INT 0
74138: ST_TO_ADDR
74139: GO 74155
// your_side := your_side + 1 ;
74141: LD_ADDR_OWVAR 2
74145: PUSH
74146: LD_OWVAR 2
74150: PUSH
74151: LD_INT 1
74153: PLUS
74154: ST_TO_ADDR
// end ;
74155: LD_VAR 0 1
74159: RET
// export function hHackChangeUnitSide ; var i , j ; begin
74160: LD_INT 0
74162: PPUSH
74163: PPUSH
74164: PPUSH
// for i in all_units do
74165: LD_ADDR_VAR 0 2
74169: PUSH
74170: LD_OWVAR 3
74174: PUSH
74175: FOR_IN
74176: IFFALSE 74254
// if IsSelected ( i ) then
74178: LD_VAR 0 2
74182: PPUSH
74183: CALL_OW 306
74187: IFFALSE 74252
// begin j := GetSide ( i ) ;
74189: LD_ADDR_VAR 0 3
74193: PUSH
74194: LD_VAR 0 2
74198: PPUSH
74199: CALL_OW 255
74203: ST_TO_ADDR
// if j = 8 then
74204: LD_VAR 0 3
74208: PUSH
74209: LD_INT 8
74211: EQUAL
74212: IFFALSE 74224
// j := 0 else
74214: LD_ADDR_VAR 0 3
74218: PUSH
74219: LD_INT 0
74221: ST_TO_ADDR
74222: GO 74238
// j := j + 1 ;
74224: LD_ADDR_VAR 0 3
74228: PUSH
74229: LD_VAR 0 3
74233: PUSH
74234: LD_INT 1
74236: PLUS
74237: ST_TO_ADDR
// SetSide ( i , j ) ;
74238: LD_VAR 0 2
74242: PPUSH
74243: LD_VAR 0 3
74247: PPUSH
74248: CALL_OW 235
// end ;
74252: GO 74175
74254: POP
74255: POP
// end ;
74256: LD_VAR 0 1
74260: RET
// export function hHackFog ; begin
74261: LD_INT 0
74263: PPUSH
// FogOff ( true ) ;
74264: LD_INT 1
74266: PPUSH
74267: CALL_OW 344
// end ;
74271: LD_VAR 0 1
74275: RET
// export function hHackTeleport ( unit , x , y ) ; begin
74276: LD_INT 0
74278: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
74279: LD_VAR 0 1
74283: PPUSH
74284: LD_VAR 0 2
74288: PPUSH
74289: LD_VAR 0 3
74293: PPUSH
74294: LD_INT 1
74296: PPUSH
74297: LD_INT 1
74299: PPUSH
74300: CALL_OW 483
// CenterOnXY ( x , y ) ;
74304: LD_VAR 0 2
74308: PPUSH
74309: LD_VAR 0 3
74313: PPUSH
74314: CALL_OW 84
// end ;
74318: LD_VAR 0 4
74322: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
74323: LD_INT 0
74325: PPUSH
74326: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
74327: LD_VAR 0 1
74331: NOT
74332: PUSH
74333: LD_VAR 0 2
74337: PPUSH
74338: LD_VAR 0 3
74342: PPUSH
74343: CALL_OW 488
74347: NOT
74348: OR
74349: PUSH
74350: LD_VAR 0 1
74354: PPUSH
74355: CALL_OW 266
74359: PUSH
74360: LD_INT 3
74362: NONEQUAL
74363: PUSH
74364: LD_VAR 0 1
74368: PPUSH
74369: CALL_OW 247
74373: PUSH
74374: LD_INT 1
74376: EQUAL
74377: NOT
74378: AND
74379: OR
74380: IFFALSE 74384
// exit ;
74382: GO 74666
// if GetType ( factory ) = unit_human then
74384: LD_VAR 0 1
74388: PPUSH
74389: CALL_OW 247
74393: PUSH
74394: LD_INT 1
74396: EQUAL
74397: IFFALSE 74414
// factory := IsInUnit ( factory ) ;
74399: LD_ADDR_VAR 0 1
74403: PUSH
74404: LD_VAR 0 1
74408: PPUSH
74409: CALL_OW 310
74413: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
74414: LD_VAR 0 1
74418: PPUSH
74419: CALL_OW 266
74423: PUSH
74424: LD_INT 3
74426: NONEQUAL
74427: IFFALSE 74431
// exit ;
74429: GO 74666
// for i := 1 to Count ( factoryWaypoints ) do
74431: LD_ADDR_VAR 0 5
74435: PUSH
74436: DOUBLE
74437: LD_INT 1
74439: DEC
74440: ST_TO_ADDR
74441: LD_EXP 109
74445: PPUSH
74446: CALL 19122 0 1
74450: PUSH
74451: FOR_TO
74452: IFFALSE 74614
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
74454: LD_VAR 0 2
74458: PPUSH
74459: LD_VAR 0 3
74463: PPUSH
74464: CALL_OW 428
74468: PUSH
74469: LD_EXP 109
74473: PUSH
74474: LD_VAR 0 5
74478: ARRAY
74479: PUSH
74480: LD_INT 2
74482: ARRAY
74483: EQUAL
74484: IFFALSE 74516
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74486: LD_ADDR_EXP 109
74490: PUSH
74491: LD_EXP 109
74495: PPUSH
74496: LD_VAR 0 5
74500: PPUSH
74501: CALL_OW 3
74505: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74506: CALL 74671 0 0
// exit ;
74510: POP
74511: POP
74512: GO 74666
// end else
74514: GO 74612
// if factory = factoryWaypoints [ i ] [ 2 ] then
74516: LD_VAR 0 1
74520: PUSH
74521: LD_EXP 109
74525: PUSH
74526: LD_VAR 0 5
74530: ARRAY
74531: PUSH
74532: LD_INT 2
74534: ARRAY
74535: EQUAL
74536: IFFALSE 74612
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74538: LD_ADDR_EXP 109
74542: PUSH
74543: LD_EXP 109
74547: PPUSH
74548: LD_VAR 0 5
74552: PPUSH
74553: CALL_OW 3
74557: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74558: LD_ADDR_EXP 109
74562: PUSH
74563: LD_EXP 109
74567: PPUSH
74568: LD_VAR 0 1
74572: PPUSH
74573: CALL_OW 255
74577: PUSH
74578: LD_VAR 0 1
74582: PUSH
74583: LD_VAR 0 2
74587: PUSH
74588: LD_VAR 0 3
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: LIST
74597: LIST
74598: PPUSH
74599: CALL 54731 0 2
74603: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74604: CALL 74671 0 0
// exit ;
74608: POP
74609: POP
74610: GO 74666
// end ; end ;
74612: GO 74451
74614: POP
74615: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74616: LD_ADDR_EXP 109
74620: PUSH
74621: LD_EXP 109
74625: PPUSH
74626: LD_VAR 0 1
74630: PPUSH
74631: CALL_OW 255
74635: PUSH
74636: LD_VAR 0 1
74640: PUSH
74641: LD_VAR 0 2
74645: PUSH
74646: LD_VAR 0 3
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: PPUSH
74657: CALL 54731 0 2
74661: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74662: CALL 74671 0 0
// end ;
74666: LD_VAR 0 4
74670: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
74671: LD_INT 0
74673: PPUSH
74674: PPUSH
74675: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
74676: LD_STRING resetFactoryWaypoint();
74678: PPUSH
74679: CALL_OW 559
// if factoryWaypoints then
74683: LD_EXP 109
74687: IFFALSE 74808
// begin list := factoryWaypoints ;
74689: LD_ADDR_VAR 0 3
74693: PUSH
74694: LD_EXP 109
74698: ST_TO_ADDR
// for i := 1 to list do
74699: LD_ADDR_VAR 0 2
74703: PUSH
74704: DOUBLE
74705: LD_INT 1
74707: DEC
74708: ST_TO_ADDR
74709: LD_VAR 0 3
74713: PUSH
74714: FOR_TO
74715: IFFALSE 74806
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74717: LD_STRING setFactoryWaypointXY(
74719: PUSH
74720: LD_VAR 0 3
74724: PUSH
74725: LD_VAR 0 2
74729: ARRAY
74730: PUSH
74731: LD_INT 1
74733: ARRAY
74734: STR
74735: PUSH
74736: LD_STRING ,
74738: STR
74739: PUSH
74740: LD_VAR 0 3
74744: PUSH
74745: LD_VAR 0 2
74749: ARRAY
74750: PUSH
74751: LD_INT 2
74753: ARRAY
74754: STR
74755: PUSH
74756: LD_STRING ,
74758: STR
74759: PUSH
74760: LD_VAR 0 3
74764: PUSH
74765: LD_VAR 0 2
74769: ARRAY
74770: PUSH
74771: LD_INT 3
74773: ARRAY
74774: STR
74775: PUSH
74776: LD_STRING ,
74778: STR
74779: PUSH
74780: LD_VAR 0 3
74784: PUSH
74785: LD_VAR 0 2
74789: ARRAY
74790: PUSH
74791: LD_INT 4
74793: ARRAY
74794: STR
74795: PUSH
74796: LD_STRING )
74798: STR
74799: PPUSH
74800: CALL_OW 559
74804: GO 74714
74806: POP
74807: POP
// end ; end ;
74808: LD_VAR 0 1
74812: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
74813: LD_INT 0
74815: PPUSH
// if HexInfo ( x , y ) = warehouse then
74816: LD_VAR 0 2
74820: PPUSH
74821: LD_VAR 0 3
74825: PPUSH
74826: CALL_OW 428
74830: PUSH
74831: LD_VAR 0 1
74835: EQUAL
74836: IFFALSE 74863
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
74838: LD_ADDR_EXP 110
74842: PUSH
74843: LD_EXP 110
74847: PPUSH
74848: LD_VAR 0 1
74852: PPUSH
74853: LD_INT 0
74855: PPUSH
74856: CALL_OW 1
74860: ST_TO_ADDR
74861: GO 74914
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
74863: LD_ADDR_EXP 110
74867: PUSH
74868: LD_EXP 110
74872: PPUSH
74873: LD_VAR 0 1
74877: PPUSH
74878: LD_VAR 0 1
74882: PPUSH
74883: CALL_OW 255
74887: PUSH
74888: LD_VAR 0 1
74892: PUSH
74893: LD_VAR 0 2
74897: PUSH
74898: LD_VAR 0 3
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: PPUSH
74909: CALL_OW 1
74913: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
74914: CALL 74923 0 0
// end ;
74918: LD_VAR 0 4
74922: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
74923: LD_INT 0
74925: PPUSH
74926: PPUSH
74927: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
74928: LD_STRING resetWarehouseGatheringPoints();
74930: PPUSH
74931: CALL_OW 559
// if warehouseGatheringPoints then
74935: LD_EXP 110
74939: IFFALSE 75065
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
74941: LD_ADDR_VAR 0 3
74945: PUSH
74946: LD_EXP 110
74950: PPUSH
74951: CALL 58493 0 1
74955: ST_TO_ADDR
// for i := 1 to list do
74956: LD_ADDR_VAR 0 2
74960: PUSH
74961: DOUBLE
74962: LD_INT 1
74964: DEC
74965: ST_TO_ADDR
74966: LD_VAR 0 3
74970: PUSH
74971: FOR_TO
74972: IFFALSE 75063
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74974: LD_STRING setWarehouseGatheringPointXY(
74976: PUSH
74977: LD_VAR 0 3
74981: PUSH
74982: LD_VAR 0 2
74986: ARRAY
74987: PUSH
74988: LD_INT 1
74990: ARRAY
74991: STR
74992: PUSH
74993: LD_STRING ,
74995: STR
74996: PUSH
74997: LD_VAR 0 3
75001: PUSH
75002: LD_VAR 0 2
75006: ARRAY
75007: PUSH
75008: LD_INT 2
75010: ARRAY
75011: STR
75012: PUSH
75013: LD_STRING ,
75015: STR
75016: PUSH
75017: LD_VAR 0 3
75021: PUSH
75022: LD_VAR 0 2
75026: ARRAY
75027: PUSH
75028: LD_INT 3
75030: ARRAY
75031: STR
75032: PUSH
75033: LD_STRING ,
75035: STR
75036: PUSH
75037: LD_VAR 0 3
75041: PUSH
75042: LD_VAR 0 2
75046: ARRAY
75047: PUSH
75048: LD_INT 4
75050: ARRAY
75051: STR
75052: PUSH
75053: LD_STRING )
75055: STR
75056: PPUSH
75057: CALL_OW 559
75061: GO 74971
75063: POP
75064: POP
// end ; end ;
75065: LD_VAR 0 1
75069: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
75070: LD_EXP 110
75074: IFFALSE 75759
75076: GO 75078
75078: DISABLE
75079: LD_INT 0
75081: PPUSH
75082: PPUSH
75083: PPUSH
75084: PPUSH
75085: PPUSH
75086: PPUSH
75087: PPUSH
75088: PPUSH
75089: PPUSH
// begin enable ;
75090: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
75091: LD_ADDR_VAR 0 3
75095: PUSH
75096: LD_EXP 110
75100: PPUSH
75101: CALL 58493 0 1
75105: ST_TO_ADDR
// if not list then
75106: LD_VAR 0 3
75110: NOT
75111: IFFALSE 75115
// exit ;
75113: GO 75759
// for i := 1 to list do
75115: LD_ADDR_VAR 0 1
75119: PUSH
75120: DOUBLE
75121: LD_INT 1
75123: DEC
75124: ST_TO_ADDR
75125: LD_VAR 0 3
75129: PUSH
75130: FOR_TO
75131: IFFALSE 75757
// begin depot := list [ i ] [ 2 ] ;
75133: LD_ADDR_VAR 0 8
75137: PUSH
75138: LD_VAR 0 3
75142: PUSH
75143: LD_VAR 0 1
75147: ARRAY
75148: PUSH
75149: LD_INT 2
75151: ARRAY
75152: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
75153: LD_ADDR_VAR 0 5
75157: PUSH
75158: LD_VAR 0 3
75162: PUSH
75163: LD_VAR 0 1
75167: ARRAY
75168: PUSH
75169: LD_INT 1
75171: ARRAY
75172: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
75173: LD_VAR 0 8
75177: PPUSH
75178: CALL_OW 301
75182: PUSH
75183: LD_VAR 0 5
75187: PUSH
75188: LD_VAR 0 8
75192: PPUSH
75193: CALL_OW 255
75197: NONEQUAL
75198: OR
75199: IFFALSE 75228
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
75201: LD_ADDR_EXP 110
75205: PUSH
75206: LD_EXP 110
75210: PPUSH
75211: LD_VAR 0 8
75215: PPUSH
75216: LD_INT 0
75218: PPUSH
75219: CALL_OW 1
75223: ST_TO_ADDR
// exit ;
75224: POP
75225: POP
75226: GO 75759
// end ; x := list [ i ] [ 3 ] ;
75228: LD_ADDR_VAR 0 6
75232: PUSH
75233: LD_VAR 0 3
75237: PUSH
75238: LD_VAR 0 1
75242: ARRAY
75243: PUSH
75244: LD_INT 3
75246: ARRAY
75247: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
75248: LD_ADDR_VAR 0 7
75252: PUSH
75253: LD_VAR 0 3
75257: PUSH
75258: LD_VAR 0 1
75262: ARRAY
75263: PUSH
75264: LD_INT 4
75266: ARRAY
75267: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
75268: LD_ADDR_VAR 0 9
75272: PUSH
75273: LD_VAR 0 6
75277: PPUSH
75278: LD_VAR 0 7
75282: PPUSH
75283: LD_INT 16
75285: PPUSH
75286: CALL 57077 0 3
75290: ST_TO_ADDR
// if not cratesNearbyPoint then
75291: LD_VAR 0 9
75295: NOT
75296: IFFALSE 75302
// exit ;
75298: POP
75299: POP
75300: GO 75759
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
75302: LD_ADDR_VAR 0 4
75306: PUSH
75307: LD_INT 22
75309: PUSH
75310: LD_VAR 0 5
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: PUSH
75319: LD_INT 3
75321: PUSH
75322: LD_INT 60
75324: PUSH
75325: EMPTY
75326: LIST
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: PUSH
75332: LD_INT 91
75334: PUSH
75335: LD_VAR 0 8
75339: PUSH
75340: LD_INT 6
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: LIST
75347: PUSH
75348: LD_INT 2
75350: PUSH
75351: LD_INT 25
75353: PUSH
75354: LD_INT 2
75356: PUSH
75357: EMPTY
75358: LIST
75359: LIST
75360: PUSH
75361: LD_INT 25
75363: PUSH
75364: LD_INT 16
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: LIST
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: PPUSH
75382: CALL_OW 69
75386: PUSH
75387: LD_VAR 0 8
75391: PPUSH
75392: CALL_OW 313
75396: PPUSH
75397: LD_INT 3
75399: PUSH
75400: LD_INT 60
75402: PUSH
75403: EMPTY
75404: LIST
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: PUSH
75410: LD_INT 2
75412: PUSH
75413: LD_INT 25
75415: PUSH
75416: LD_INT 2
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: PUSH
75423: LD_INT 25
75425: PUSH
75426: LD_INT 16
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: PUSH
75433: EMPTY
75434: LIST
75435: LIST
75436: LIST
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: PPUSH
75442: CALL_OW 72
75446: UNION
75447: ST_TO_ADDR
// if tmp then
75448: LD_VAR 0 4
75452: IFFALSE 75532
// begin tmp := ShrinkArray ( tmp , 3 ) ;
75454: LD_ADDR_VAR 0 4
75458: PUSH
75459: LD_VAR 0 4
75463: PPUSH
75464: LD_INT 3
75466: PPUSH
75467: CALL 55046 0 2
75471: ST_TO_ADDR
// for j in tmp do
75472: LD_ADDR_VAR 0 2
75476: PUSH
75477: LD_VAR 0 4
75481: PUSH
75482: FOR_IN
75483: IFFALSE 75526
// begin if IsInUnit ( j ) then
75485: LD_VAR 0 2
75489: PPUSH
75490: CALL_OW 310
75494: IFFALSE 75505
// ComExit ( j ) ;
75496: LD_VAR 0 2
75500: PPUSH
75501: CALL 55129 0 1
// AddComCollect ( j , x , y ) ;
75505: LD_VAR 0 2
75509: PPUSH
75510: LD_VAR 0 6
75514: PPUSH
75515: LD_VAR 0 7
75519: PPUSH
75520: CALL_OW 177
// end ;
75524: GO 75482
75526: POP
75527: POP
// exit ;
75528: POP
75529: POP
75530: GO 75759
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
75532: LD_ADDR_VAR 0 4
75536: PUSH
75537: LD_INT 22
75539: PUSH
75540: LD_VAR 0 5
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PUSH
75549: LD_INT 91
75551: PUSH
75552: LD_VAR 0 8
75556: PUSH
75557: LD_INT 8
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: LIST
75564: PUSH
75565: LD_INT 2
75567: PUSH
75568: LD_INT 34
75570: PUSH
75571: LD_INT 12
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PUSH
75578: LD_INT 34
75580: PUSH
75581: LD_INT 51
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PUSH
75588: LD_INT 34
75590: PUSH
75591: LD_INT 32
75593: PUSH
75594: EMPTY
75595: LIST
75596: LIST
75597: PUSH
75598: LD_INT 34
75600: PUSH
75601: LD_INT 89
75603: PUSH
75604: EMPTY
75605: LIST
75606: LIST
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: LIST
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: LIST
75619: PPUSH
75620: CALL_OW 69
75624: ST_TO_ADDR
// if tmp then
75625: LD_VAR 0 4
75629: IFFALSE 75755
// begin for j in tmp do
75631: LD_ADDR_VAR 0 2
75635: PUSH
75636: LD_VAR 0 4
75640: PUSH
75641: FOR_IN
75642: IFFALSE 75753
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
75644: LD_VAR 0 2
75648: PPUSH
75649: CALL_OW 262
75653: PUSH
75654: LD_INT 3
75656: EQUAL
75657: PUSH
75658: LD_VAR 0 2
75662: PPUSH
75663: CALL_OW 261
75667: PUSH
75668: LD_INT 20
75670: GREATER
75671: OR
75672: PUSH
75673: LD_VAR 0 2
75677: PPUSH
75678: CALL_OW 314
75682: NOT
75683: AND
75684: PUSH
75685: LD_VAR 0 2
75689: PPUSH
75690: CALL_OW 263
75694: PUSH
75695: LD_INT 1
75697: NONEQUAL
75698: PUSH
75699: LD_VAR 0 2
75703: PPUSH
75704: CALL_OW 311
75708: OR
75709: AND
75710: IFFALSE 75751
// begin ComCollect ( j , x , y ) ;
75712: LD_VAR 0 2
75716: PPUSH
75717: LD_VAR 0 6
75721: PPUSH
75722: LD_VAR 0 7
75726: PPUSH
75727: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
75731: LD_VAR 0 2
75735: PPUSH
75736: LD_VAR 0 8
75740: PPUSH
75741: CALL_OW 172
// exit ;
75745: POP
75746: POP
75747: POP
75748: POP
75749: GO 75759
// end ;
75751: GO 75641
75753: POP
75754: POP
// end ; end ;
75755: GO 75130
75757: POP
75758: POP
// end ; end_of_file
75759: PPOPN 9
75761: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75762: LD_VAR 0 1
75766: PPUSH
75767: LD_VAR 0 2
75771: PPUSH
75772: LD_VAR 0 3
75776: PPUSH
75777: LD_VAR 0 4
75781: PPUSH
75782: LD_VAR 0 5
75786: PPUSH
75787: LD_VAR 0 6
75791: PPUSH
75792: CALL 59987 0 6
// end ;
75796: PPOPN 6
75798: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75799: LD_INT 0
75801: PPUSH
// begin if not units then
75802: LD_VAR 0 1
75806: NOT
75807: IFFALSE 75811
// exit ;
75809: GO 75811
// end ;
75811: PPOPN 7
75813: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75814: CALL 59874 0 0
// end ; end_of_file
75818: PPOPN 1
75820: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75821: LD_VAR 0 1
75825: PUSH
75826: LD_INT 200
75828: DOUBLE
75829: GREATEREQUAL
75830: IFFALSE 75838
75832: LD_INT 299
75834: DOUBLE
75835: LESSEQUAL
75836: IFTRUE 75840
75838: GO 75872
75840: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75841: LD_VAR 0 1
75845: PPUSH
75846: LD_VAR 0 2
75850: PPUSH
75851: LD_VAR 0 3
75855: PPUSH
75856: LD_VAR 0 4
75860: PPUSH
75861: LD_VAR 0 5
75865: PPUSH
75866: CALL 76569 0 5
75870: GO 75949
75872: LD_INT 300
75874: DOUBLE
75875: GREATEREQUAL
75876: IFFALSE 75884
75878: LD_INT 399
75880: DOUBLE
75881: LESSEQUAL
75882: IFTRUE 75886
75884: GO 75948
75886: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75887: LD_VAR 0 1
75891: PPUSH
75892: LD_VAR 0 2
75896: PPUSH
75897: LD_VAR 0 3
75901: PPUSH
75902: LD_VAR 0 4
75906: PPUSH
75907: LD_VAR 0 5
75911: PPUSH
75912: LD_VAR 0 6
75916: PPUSH
75917: LD_VAR 0 7
75921: PPUSH
75922: LD_VAR 0 8
75926: PPUSH
75927: LD_VAR 0 9
75931: PPUSH
75932: LD_VAR 0 10
75936: PPUSH
75937: LD_VAR 0 11
75941: PPUSH
75942: CALL 72335 0 11
75946: GO 75949
75948: POP
// end ;
75949: PPOPN 11
75951: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75952: LD_VAR 0 1
75956: PPUSH
75957: LD_VAR 0 2
75961: PPUSH
75962: LD_VAR 0 3
75966: PPUSH
75967: LD_VAR 0 4
75971: PPUSH
75972: LD_VAR 0 5
75976: PPUSH
75977: CALL 76034 0 5
// end ; end_of_file
75981: PPOPN 5
75983: END
// export function SOS_UnitDestroyed ( un ) ; begin
75984: LD_INT 0
75986: PPUSH
// ComRadiation ( un ) ;
75987: LD_VAR 0 1
75991: PPUSH
75992: CALL 76973 0 1
// end ;
75996: LD_VAR 0 2
76000: RET
// export function SOS_UnitKamikazed ( un ) ; begin
76001: LD_INT 0
76003: PPUSH
// ComRadiation ( un ) ;
76004: LD_VAR 0 1
76008: PPUSH
76009: CALL 76973 0 1
// end ;
76013: LD_VAR 0 2
76017: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
76018: LD_INT 0
76020: PPUSH
// end ;
76021: LD_VAR 0 4
76025: RET
// export function SOS_Command ( cmd ) ; begin
76026: LD_INT 0
76028: PPUSH
// end ;
76029: LD_VAR 0 2
76033: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
76034: LD_INT 0
76036: PPUSH
// end ;
76037: LD_VAR 0 6
76041: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
76042: LD_INT 0
76044: PPUSH
76045: PPUSH
76046: PPUSH
76047: PPUSH
76048: PPUSH
// if not vehicle or not factory then
76049: LD_VAR 0 1
76053: NOT
76054: PUSH
76055: LD_VAR 0 2
76059: NOT
76060: OR
76061: IFFALSE 76065
// exit ;
76063: GO 76564
// if not factoryWaypoints then
76065: LD_EXP 109
76069: NOT
76070: IFFALSE 76074
// exit ;
76072: GO 76564
// for i := 1 to Count ( factoryWaypoints ) do
76074: LD_ADDR_VAR 0 4
76078: PUSH
76079: DOUBLE
76080: LD_INT 1
76082: DEC
76083: ST_TO_ADDR
76084: LD_EXP 109
76088: PPUSH
76089: CALL 19122 0 1
76093: PUSH
76094: FOR_TO
76095: IFFALSE 76562
// if factoryWaypoints [ i ] [ 2 ] = factory then
76097: LD_EXP 109
76101: PUSH
76102: LD_VAR 0 4
76106: ARRAY
76107: PUSH
76108: LD_INT 2
76110: ARRAY
76111: PUSH
76112: LD_VAR 0 2
76116: EQUAL
76117: IFFALSE 76560
// begin if GetControl ( vehicle ) = control_manual then
76119: LD_VAR 0 1
76123: PPUSH
76124: CALL_OW 263
76128: PUSH
76129: LD_INT 1
76131: EQUAL
76132: IFFALSE 76443
// begin driver := IsDrivenBy ( vehicle ) ;
76134: LD_ADDR_VAR 0 6
76138: PUSH
76139: LD_VAR 0 1
76143: PPUSH
76144: CALL_OW 311
76148: ST_TO_ADDR
// tag := GetTag ( driver ) ;
76149: LD_ADDR_VAR 0 5
76153: PUSH
76154: LD_VAR 0 6
76158: PPUSH
76159: CALL_OW 110
76163: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
76164: LD_VAR 0 5
76168: PUSH
76169: LD_INT 501
76171: EQUAL
76172: PUSH
76173: LD_VAR 0 1
76177: PPUSH
76178: CALL_OW 110
76182: PUSH
76183: LD_INT 501
76185: EQUAL
76186: OR
76187: IFFALSE 76193
// exit ;
76189: POP
76190: POP
76191: GO 76564
// if not HasTask ( driver ) then
76193: LD_VAR 0 6
76197: PPUSH
76198: CALL_OW 314
76202: NOT
76203: IFFALSE 76441
// begin SetTag ( driver , tDriver ) ;
76205: LD_VAR 0 6
76209: PPUSH
76210: LD_INT 501
76212: PPUSH
76213: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
76217: LD_VAR 0 1
76221: PPUSH
76222: LD_INT 501
76224: PPUSH
76225: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76229: LD_ADDR_VAR 0 7
76233: PUSH
76234: LD_EXP 109
76238: PUSH
76239: LD_VAR 0 4
76243: ARRAY
76244: PUSH
76245: LD_INT 3
76247: ARRAY
76248: PPUSH
76249: LD_EXP 109
76253: PUSH
76254: LD_VAR 0 4
76258: ARRAY
76259: PUSH
76260: LD_INT 4
76262: ARRAY
76263: PPUSH
76264: CALL_OW 428
76268: ST_TO_ADDR
// if hex then
76269: LD_VAR 0 7
76273: IFFALSE 76291
// ComMoveUnit ( driver , hex ) else
76275: LD_VAR 0 6
76279: PPUSH
76280: LD_VAR 0 7
76284: PPUSH
76285: CALL_OW 112
76289: GO 76330
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76291: LD_VAR 0 6
76295: PPUSH
76296: LD_EXP 109
76300: PUSH
76301: LD_VAR 0 4
76305: ARRAY
76306: PUSH
76307: LD_INT 3
76309: ARRAY
76310: PPUSH
76311: LD_EXP 109
76315: PUSH
76316: LD_VAR 0 4
76320: ARRAY
76321: PUSH
76322: LD_INT 4
76324: ARRAY
76325: PPUSH
76326: CALL_OW 111
// AddComExitVehicle ( driver ) ;
76330: LD_VAR 0 6
76334: PPUSH
76335: CALL_OW 181
// if Multiplayer then
76339: LD_OWVAR 4
76343: IFFALSE 76392
// begin repeat wait ( 10 ) ;
76345: LD_INT 10
76347: PPUSH
76348: CALL_OW 67
// until not IsInUnit ( driver ) ;
76352: LD_VAR 0 6
76356: PPUSH
76357: CALL_OW 310
76361: NOT
76362: IFFALSE 76345
// if not HasTask ( driver ) then
76364: LD_VAR 0 6
76368: PPUSH
76369: CALL_OW 314
76373: NOT
76374: IFFALSE 76390
// ComEnterUnit ( driver , factory ) ;
76376: LD_VAR 0 6
76380: PPUSH
76381: LD_VAR 0 2
76385: PPUSH
76386: CALL_OW 120
// end else
76390: GO 76406
// AddComEnterUnit ( driver , factory ) ;
76392: LD_VAR 0 6
76396: PPUSH
76397: LD_VAR 0 2
76401: PPUSH
76402: CALL_OW 180
// wait ( 0 0$1 ) ;
76406: LD_INT 35
76408: PPUSH
76409: CALL_OW 67
// SetTag ( driver , tag ) ;
76413: LD_VAR 0 6
76417: PPUSH
76418: LD_VAR 0 5
76422: PPUSH
76423: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
76427: LD_VAR 0 1
76431: PPUSH
76432: LD_INT 0
76434: PPUSH
76435: CALL_OW 109
// break ;
76439: GO 76562
// end ; end else
76441: GO 76560
// if GetControl ( vehicle ) = control_remote then
76443: LD_VAR 0 1
76447: PPUSH
76448: CALL_OW 263
76452: PUSH
76453: LD_INT 2
76455: EQUAL
76456: IFFALSE 76519
// begin wait ( 0 0$2 ) ;
76458: LD_INT 70
76460: PPUSH
76461: CALL_OW 67
// if Connect ( vehicle ) then
76465: LD_VAR 0 1
76469: PPUSH
76470: CALL 25328 0 1
76474: IFFALSE 76515
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76476: LD_VAR 0 1
76480: PPUSH
76481: LD_EXP 109
76485: PUSH
76486: LD_VAR 0 4
76490: ARRAY
76491: PUSH
76492: LD_INT 3
76494: ARRAY
76495: PPUSH
76496: LD_EXP 109
76500: PUSH
76501: LD_VAR 0 4
76505: ARRAY
76506: PUSH
76507: LD_INT 4
76509: ARRAY
76510: PPUSH
76511: CALL_OW 171
// break ;
76515: GO 76562
// end else
76517: GO 76560
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76519: LD_VAR 0 1
76523: PPUSH
76524: LD_EXP 109
76528: PUSH
76529: LD_VAR 0 4
76533: ARRAY
76534: PUSH
76535: LD_INT 3
76537: ARRAY
76538: PPUSH
76539: LD_EXP 109
76543: PUSH
76544: LD_VAR 0 4
76548: ARRAY
76549: PUSH
76550: LD_INT 4
76552: ARRAY
76553: PPUSH
76554: CALL_OW 171
// break ;
76558: GO 76562
// end ; end ;
76560: GO 76094
76562: POP
76563: POP
// end ;
76564: LD_VAR 0 3
76568: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
76569: LD_INT 0
76571: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
76572: LD_VAR 0 1
76576: PUSH
76577: LD_INT 250
76579: EQUAL
76580: PUSH
76581: LD_VAR 0 2
76585: PPUSH
76586: CALL_OW 264
76590: PUSH
76591: LD_INT 81
76593: EQUAL
76594: AND
76595: IFFALSE 76616
// MinerPlaceMine ( unit , x , y ) ;
76597: LD_VAR 0 2
76601: PPUSH
76602: LD_VAR 0 4
76606: PPUSH
76607: LD_VAR 0 5
76611: PPUSH
76612: CALL 79708 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
76616: LD_VAR 0 1
76620: PUSH
76621: LD_INT 251
76623: EQUAL
76624: PUSH
76625: LD_VAR 0 2
76629: PPUSH
76630: CALL_OW 264
76634: PUSH
76635: LD_INT 81
76637: EQUAL
76638: AND
76639: IFFALSE 76660
// MinerDetonateMine ( unit , x , y ) ;
76641: LD_VAR 0 2
76645: PPUSH
76646: LD_VAR 0 4
76650: PPUSH
76651: LD_VAR 0 5
76655: PPUSH
76656: CALL 79983 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
76660: LD_VAR 0 1
76664: PUSH
76665: LD_INT 252
76667: EQUAL
76668: PUSH
76669: LD_VAR 0 2
76673: PPUSH
76674: CALL_OW 264
76678: PUSH
76679: LD_INT 81
76681: EQUAL
76682: AND
76683: IFFALSE 76704
// MinerCreateMinefield ( unit , x , y ) ;
76685: LD_VAR 0 2
76689: PPUSH
76690: LD_VAR 0 4
76694: PPUSH
76695: LD_VAR 0 5
76699: PPUSH
76700: CALL 80400 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
76704: LD_VAR 0 1
76708: PUSH
76709: LD_INT 253
76711: EQUAL
76712: PUSH
76713: LD_VAR 0 2
76717: PPUSH
76718: CALL_OW 257
76722: PUSH
76723: LD_INT 5
76725: EQUAL
76726: AND
76727: IFFALSE 76748
// ComBinocular ( unit , x , y ) ;
76729: LD_VAR 0 2
76733: PPUSH
76734: LD_VAR 0 4
76738: PPUSH
76739: LD_VAR 0 5
76743: PPUSH
76744: CALL 80769 0 3
// if selectedUnit then
76748: LD_VAR 0 3
76752: IFFALSE 76808
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
76754: LD_VAR 0 1
76758: PUSH
76759: LD_INT 254
76761: EQUAL
76762: PUSH
76763: LD_VAR 0 2
76767: PPUSH
76768: CALL_OW 264
76772: PUSH
76773: LD_INT 99
76775: EQUAL
76776: AND
76777: PUSH
76778: LD_VAR 0 3
76782: PPUSH
76783: CALL_OW 263
76787: PUSH
76788: LD_INT 3
76790: EQUAL
76791: AND
76792: IFFALSE 76808
// HackDestroyVehicle ( unit , selectedUnit ) ;
76794: LD_VAR 0 2
76798: PPUSH
76799: LD_VAR 0 3
76803: PPUSH
76804: CALL 79072 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
76808: LD_VAR 0 1
76812: PUSH
76813: LD_INT 255
76815: EQUAL
76816: PUSH
76817: LD_VAR 0 2
76821: PPUSH
76822: CALL_OW 264
76826: PUSH
76827: LD_INT 14
76829: PUSH
76830: LD_INT 53
76832: PUSH
76833: EMPTY
76834: LIST
76835: LIST
76836: IN
76837: AND
76838: PUSH
76839: LD_VAR 0 4
76843: PPUSH
76844: LD_VAR 0 5
76848: PPUSH
76849: CALL_OW 488
76853: AND
76854: IFFALSE 76878
// CutTreeXYR ( unit , x , y , 12 ) ;
76856: LD_VAR 0 2
76860: PPUSH
76861: LD_VAR 0 4
76865: PPUSH
76866: LD_VAR 0 5
76870: PPUSH
76871: LD_INT 12
76873: PPUSH
76874: CALL 77069 0 4
// if cmd = 256 then
76878: LD_VAR 0 1
76882: PUSH
76883: LD_INT 256
76885: EQUAL
76886: IFFALSE 76907
// SetFactoryWaypoint ( unit , x , y ) ;
76888: LD_VAR 0 2
76892: PPUSH
76893: LD_VAR 0 4
76897: PPUSH
76898: LD_VAR 0 5
76902: PPUSH
76903: CALL 74323 0 3
// if cmd = 257 then
76907: LD_VAR 0 1
76911: PUSH
76912: LD_INT 257
76914: EQUAL
76915: IFFALSE 76936
// SetWarehouseGatheringPoint ( unit , x , y ) ;
76917: LD_VAR 0 2
76921: PPUSH
76922: LD_VAR 0 4
76926: PPUSH
76927: LD_VAR 0 5
76931: PPUSH
76932: CALL 74813 0 3
// if cmd = 258 then
76936: LD_VAR 0 1
76940: PUSH
76941: LD_INT 258
76943: EQUAL
76944: IFFALSE 76968
// BurnTreeXYR ( unit , x , y , 8 ) ;
76946: LD_VAR 0 2
76950: PPUSH
76951: LD_VAR 0 4
76955: PPUSH
76956: LD_VAR 0 5
76960: PPUSH
76961: LD_INT 8
76963: PPUSH
76964: CALL 77463 0 4
// end ;
76968: LD_VAR 0 6
76972: RET
// export function ComRadiation ( un ) ; var eff ; begin
76973: LD_INT 0
76975: PPUSH
76976: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
76977: LD_VAR 0 1
76981: PPUSH
76982: CALL_OW 264
76986: PUSH
76987: LD_INT 91
76989: NONEQUAL
76990: IFFALSE 76994
// exit ;
76992: GO 77064
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
76994: LD_INT 68
76996: PPUSH
76997: LD_VAR 0 1
77001: PPUSH
77002: CALL_OW 255
77006: PPUSH
77007: CALL_OW 321
77011: PUSH
77012: LD_INT 2
77014: EQUAL
77015: IFFALSE 77027
// eff := 70 else
77017: LD_ADDR_VAR 0 3
77021: PUSH
77022: LD_INT 70
77024: ST_TO_ADDR
77025: GO 77035
// eff := 30 ;
77027: LD_ADDR_VAR 0 3
77031: PUSH
77032: LD_INT 30
77034: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
77035: LD_VAR 0 1
77039: PPUSH
77040: CALL_OW 250
77044: PPUSH
77045: LD_VAR 0 1
77049: PPUSH
77050: CALL_OW 251
77054: PPUSH
77055: LD_VAR 0 3
77059: PPUSH
77060: CALL_OW 495
// end ;
77064: LD_VAR 0 2
77068: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77069: LD_INT 0
77071: PPUSH
77072: PPUSH
77073: PPUSH
77074: PPUSH
77075: PPUSH
77076: PPUSH
77077: PPUSH
77078: PPUSH
77079: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
77080: LD_VAR 0 1
77084: PPUSH
77085: CALL_OW 302
77089: NOT
77090: PUSH
77091: LD_VAR 0 2
77095: PPUSH
77096: LD_VAR 0 3
77100: PPUSH
77101: CALL_OW 488
77105: NOT
77106: OR
77107: PUSH
77108: LD_VAR 0 4
77112: NOT
77113: OR
77114: IFFALSE 77118
// exit ;
77116: GO 77458
// list := [ ] ;
77118: LD_ADDR_VAR 0 13
77122: PUSH
77123: EMPTY
77124: ST_TO_ADDR
// if x - r < 0 then
77125: LD_VAR 0 2
77129: PUSH
77130: LD_VAR 0 4
77134: MINUS
77135: PUSH
77136: LD_INT 0
77138: LESS
77139: IFFALSE 77151
// min_x := 0 else
77141: LD_ADDR_VAR 0 7
77145: PUSH
77146: LD_INT 0
77148: ST_TO_ADDR
77149: GO 77167
// min_x := x - r ;
77151: LD_ADDR_VAR 0 7
77155: PUSH
77156: LD_VAR 0 2
77160: PUSH
77161: LD_VAR 0 4
77165: MINUS
77166: ST_TO_ADDR
// if y - r < 0 then
77167: LD_VAR 0 3
77171: PUSH
77172: LD_VAR 0 4
77176: MINUS
77177: PUSH
77178: LD_INT 0
77180: LESS
77181: IFFALSE 77193
// min_y := 0 else
77183: LD_ADDR_VAR 0 8
77187: PUSH
77188: LD_INT 0
77190: ST_TO_ADDR
77191: GO 77209
// min_y := y - r ;
77193: LD_ADDR_VAR 0 8
77197: PUSH
77198: LD_VAR 0 3
77202: PUSH
77203: LD_VAR 0 4
77207: MINUS
77208: ST_TO_ADDR
// max_x := x + r ;
77209: LD_ADDR_VAR 0 9
77213: PUSH
77214: LD_VAR 0 2
77218: PUSH
77219: LD_VAR 0 4
77223: PLUS
77224: ST_TO_ADDR
// max_y := y + r ;
77225: LD_ADDR_VAR 0 10
77229: PUSH
77230: LD_VAR 0 3
77234: PUSH
77235: LD_VAR 0 4
77239: PLUS
77240: ST_TO_ADDR
// for _x = min_x to max_x do
77241: LD_ADDR_VAR 0 11
77245: PUSH
77246: DOUBLE
77247: LD_VAR 0 7
77251: DEC
77252: ST_TO_ADDR
77253: LD_VAR 0 9
77257: PUSH
77258: FOR_TO
77259: IFFALSE 77376
// for _y = min_y to max_y do
77261: LD_ADDR_VAR 0 12
77265: PUSH
77266: DOUBLE
77267: LD_VAR 0 8
77271: DEC
77272: ST_TO_ADDR
77273: LD_VAR 0 10
77277: PUSH
77278: FOR_TO
77279: IFFALSE 77372
// begin if not ValidHex ( _x , _y ) then
77281: LD_VAR 0 11
77285: PPUSH
77286: LD_VAR 0 12
77290: PPUSH
77291: CALL_OW 488
77295: NOT
77296: IFFALSE 77300
// continue ;
77298: GO 77278
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77300: LD_VAR 0 11
77304: PPUSH
77305: LD_VAR 0 12
77309: PPUSH
77310: CALL_OW 351
77314: PUSH
77315: LD_VAR 0 11
77319: PPUSH
77320: LD_VAR 0 12
77324: PPUSH
77325: CALL_OW 554
77329: AND
77330: IFFALSE 77370
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77332: LD_ADDR_VAR 0 13
77336: PUSH
77337: LD_VAR 0 13
77341: PPUSH
77342: LD_VAR 0 13
77346: PUSH
77347: LD_INT 1
77349: PLUS
77350: PPUSH
77351: LD_VAR 0 11
77355: PUSH
77356: LD_VAR 0 12
77360: PUSH
77361: EMPTY
77362: LIST
77363: LIST
77364: PPUSH
77365: CALL_OW 2
77369: ST_TO_ADDR
// end ;
77370: GO 77278
77372: POP
77373: POP
77374: GO 77258
77376: POP
77377: POP
// if not list then
77378: LD_VAR 0 13
77382: NOT
77383: IFFALSE 77387
// exit ;
77385: GO 77458
// for i in list do
77387: LD_ADDR_VAR 0 6
77391: PUSH
77392: LD_VAR 0 13
77396: PUSH
77397: FOR_IN
77398: IFFALSE 77456
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
77400: LD_VAR 0 1
77404: PPUSH
77405: LD_STRING M
77407: PUSH
77408: LD_VAR 0 6
77412: PUSH
77413: LD_INT 1
77415: ARRAY
77416: PUSH
77417: LD_VAR 0 6
77421: PUSH
77422: LD_INT 2
77424: ARRAY
77425: PUSH
77426: LD_INT 0
77428: PUSH
77429: LD_INT 0
77431: PUSH
77432: LD_INT 0
77434: PUSH
77435: LD_INT 0
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: LIST
77442: LIST
77443: LIST
77444: LIST
77445: LIST
77446: PUSH
77447: EMPTY
77448: LIST
77449: PPUSH
77450: CALL_OW 447
77454: GO 77397
77456: POP
77457: POP
// end ;
77458: LD_VAR 0 5
77462: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
77463: LD_INT 0
77465: PPUSH
77466: PPUSH
77467: PPUSH
77468: PPUSH
77469: PPUSH
77470: PPUSH
77471: PPUSH
77472: PPUSH
77473: PPUSH
77474: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
77475: LD_VAR 0 1
77479: PPUSH
77480: CALL_OW 302
77484: NOT
77485: PUSH
77486: LD_VAR 0 2
77490: PPUSH
77491: LD_VAR 0 3
77495: PPUSH
77496: CALL_OW 488
77500: NOT
77501: OR
77502: PUSH
77503: LD_VAR 0 4
77507: NOT
77508: OR
77509: IFFALSE 77513
// exit ;
77511: GO 78026
// list := [ ] ;
77513: LD_ADDR_VAR 0 13
77517: PUSH
77518: EMPTY
77519: ST_TO_ADDR
// if x - r < 0 then
77520: LD_VAR 0 2
77524: PUSH
77525: LD_VAR 0 4
77529: MINUS
77530: PUSH
77531: LD_INT 0
77533: LESS
77534: IFFALSE 77546
// min_x := 0 else
77536: LD_ADDR_VAR 0 7
77540: PUSH
77541: LD_INT 0
77543: ST_TO_ADDR
77544: GO 77562
// min_x := x - r ;
77546: LD_ADDR_VAR 0 7
77550: PUSH
77551: LD_VAR 0 2
77555: PUSH
77556: LD_VAR 0 4
77560: MINUS
77561: ST_TO_ADDR
// if y - r < 0 then
77562: LD_VAR 0 3
77566: PUSH
77567: LD_VAR 0 4
77571: MINUS
77572: PUSH
77573: LD_INT 0
77575: LESS
77576: IFFALSE 77588
// min_y := 0 else
77578: LD_ADDR_VAR 0 8
77582: PUSH
77583: LD_INT 0
77585: ST_TO_ADDR
77586: GO 77604
// min_y := y - r ;
77588: LD_ADDR_VAR 0 8
77592: PUSH
77593: LD_VAR 0 3
77597: PUSH
77598: LD_VAR 0 4
77602: MINUS
77603: ST_TO_ADDR
// max_x := x + r ;
77604: LD_ADDR_VAR 0 9
77608: PUSH
77609: LD_VAR 0 2
77613: PUSH
77614: LD_VAR 0 4
77618: PLUS
77619: ST_TO_ADDR
// max_y := y + r ;
77620: LD_ADDR_VAR 0 10
77624: PUSH
77625: LD_VAR 0 3
77629: PUSH
77630: LD_VAR 0 4
77634: PLUS
77635: ST_TO_ADDR
// for _x = min_x to max_x do
77636: LD_ADDR_VAR 0 11
77640: PUSH
77641: DOUBLE
77642: LD_VAR 0 7
77646: DEC
77647: ST_TO_ADDR
77648: LD_VAR 0 9
77652: PUSH
77653: FOR_TO
77654: IFFALSE 77771
// for _y = min_y to max_y do
77656: LD_ADDR_VAR 0 12
77660: PUSH
77661: DOUBLE
77662: LD_VAR 0 8
77666: DEC
77667: ST_TO_ADDR
77668: LD_VAR 0 10
77672: PUSH
77673: FOR_TO
77674: IFFALSE 77767
// begin if not ValidHex ( _x , _y ) then
77676: LD_VAR 0 11
77680: PPUSH
77681: LD_VAR 0 12
77685: PPUSH
77686: CALL_OW 488
77690: NOT
77691: IFFALSE 77695
// continue ;
77693: GO 77673
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77695: LD_VAR 0 11
77699: PPUSH
77700: LD_VAR 0 12
77704: PPUSH
77705: CALL_OW 351
77709: PUSH
77710: LD_VAR 0 11
77714: PPUSH
77715: LD_VAR 0 12
77719: PPUSH
77720: CALL_OW 554
77724: AND
77725: IFFALSE 77765
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77727: LD_ADDR_VAR 0 13
77731: PUSH
77732: LD_VAR 0 13
77736: PPUSH
77737: LD_VAR 0 13
77741: PUSH
77742: LD_INT 1
77744: PLUS
77745: PPUSH
77746: LD_VAR 0 11
77750: PUSH
77751: LD_VAR 0 12
77755: PUSH
77756: EMPTY
77757: LIST
77758: LIST
77759: PPUSH
77760: CALL_OW 2
77764: ST_TO_ADDR
// end ;
77765: GO 77673
77767: POP
77768: POP
77769: GO 77653
77771: POP
77772: POP
// if not list then
77773: LD_VAR 0 13
77777: NOT
77778: IFFALSE 77782
// exit ;
77780: GO 78026
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
77782: LD_ADDR_VAR 0 13
77786: PUSH
77787: LD_VAR 0 1
77791: PPUSH
77792: LD_VAR 0 13
77796: PPUSH
77797: LD_INT 1
77799: PPUSH
77800: LD_INT 1
77802: PPUSH
77803: CALL 22470 0 4
77807: ST_TO_ADDR
// ComStop ( flame ) ;
77808: LD_VAR 0 1
77812: PPUSH
77813: CALL_OW 141
// for i in list do
77817: LD_ADDR_VAR 0 6
77821: PUSH
77822: LD_VAR 0 13
77826: PUSH
77827: FOR_IN
77828: IFFALSE 77859
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
77830: LD_VAR 0 1
77834: PPUSH
77835: LD_VAR 0 6
77839: PUSH
77840: LD_INT 1
77842: ARRAY
77843: PPUSH
77844: LD_VAR 0 6
77848: PUSH
77849: LD_INT 2
77851: ARRAY
77852: PPUSH
77853: CALL_OW 176
77857: GO 77827
77859: POP
77860: POP
// repeat wait ( 0 0$1 ) ;
77861: LD_INT 35
77863: PPUSH
77864: CALL_OW 67
// task := GetTaskList ( flame ) ;
77868: LD_ADDR_VAR 0 14
77872: PUSH
77873: LD_VAR 0 1
77877: PPUSH
77878: CALL_OW 437
77882: ST_TO_ADDR
// if not task then
77883: LD_VAR 0 14
77887: NOT
77888: IFFALSE 77892
// exit ;
77890: GO 78026
// if task [ 1 ] [ 1 ] <> | then
77892: LD_VAR 0 14
77896: PUSH
77897: LD_INT 1
77899: ARRAY
77900: PUSH
77901: LD_INT 1
77903: ARRAY
77904: PUSH
77905: LD_STRING |
77907: NONEQUAL
77908: IFFALSE 77912
// exit ;
77910: GO 78026
// _x := task [ 1 ] [ 2 ] ;
77912: LD_ADDR_VAR 0 11
77916: PUSH
77917: LD_VAR 0 14
77921: PUSH
77922: LD_INT 1
77924: ARRAY
77925: PUSH
77926: LD_INT 2
77928: ARRAY
77929: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
77930: LD_ADDR_VAR 0 12
77934: PUSH
77935: LD_VAR 0 14
77939: PUSH
77940: LD_INT 1
77942: ARRAY
77943: PUSH
77944: LD_INT 3
77946: ARRAY
77947: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
77948: LD_VAR 0 11
77952: PPUSH
77953: LD_VAR 0 12
77957: PPUSH
77958: CALL_OW 351
77962: NOT
77963: PUSH
77964: LD_VAR 0 11
77968: PPUSH
77969: LD_VAR 0 12
77973: PPUSH
77974: CALL_OW 554
77978: NOT
77979: OR
77980: IFFALSE 78014
// begin task := Delete ( task , 1 ) ;
77982: LD_ADDR_VAR 0 14
77986: PUSH
77987: LD_VAR 0 14
77991: PPUSH
77992: LD_INT 1
77994: PPUSH
77995: CALL_OW 3
77999: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
78000: LD_VAR 0 1
78004: PPUSH
78005: LD_VAR 0 14
78009: PPUSH
78010: CALL_OW 446
// end ; until not HasTask ( flame ) ;
78014: LD_VAR 0 1
78018: PPUSH
78019: CALL_OW 314
78023: NOT
78024: IFFALSE 77861
// end ;
78026: LD_VAR 0 5
78030: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
78031: LD_EXP 112
78035: NOT
78036: IFFALSE 78086
78038: GO 78040
78040: DISABLE
// begin initHack := true ;
78041: LD_ADDR_EXP 112
78045: PUSH
78046: LD_INT 1
78048: ST_TO_ADDR
// hackTanks := [ ] ;
78049: LD_ADDR_EXP 113
78053: PUSH
78054: EMPTY
78055: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
78056: LD_ADDR_EXP 114
78060: PUSH
78061: EMPTY
78062: ST_TO_ADDR
// hackLimit := 3 ;
78063: LD_ADDR_EXP 115
78067: PUSH
78068: LD_INT 3
78070: ST_TO_ADDR
// hackDist := 12 ;
78071: LD_ADDR_EXP 116
78075: PUSH
78076: LD_INT 12
78078: ST_TO_ADDR
// hackCounter := [ ] ;
78079: LD_ADDR_EXP 117
78083: PUSH
78084: EMPTY
78085: ST_TO_ADDR
// end ;
78086: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
78087: LD_EXP 112
78091: PUSH
78092: LD_INT 34
78094: PUSH
78095: LD_INT 99
78097: PUSH
78098: EMPTY
78099: LIST
78100: LIST
78101: PPUSH
78102: CALL_OW 69
78106: AND
78107: IFFALSE 78360
78109: GO 78111
78111: DISABLE
78112: LD_INT 0
78114: PPUSH
78115: PPUSH
// begin enable ;
78116: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
78117: LD_ADDR_VAR 0 1
78121: PUSH
78122: LD_INT 34
78124: PUSH
78125: LD_INT 99
78127: PUSH
78128: EMPTY
78129: LIST
78130: LIST
78131: PPUSH
78132: CALL_OW 69
78136: PUSH
78137: FOR_IN
78138: IFFALSE 78358
// begin if not i in hackTanks then
78140: LD_VAR 0 1
78144: PUSH
78145: LD_EXP 113
78149: IN
78150: NOT
78151: IFFALSE 78234
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
78153: LD_ADDR_EXP 113
78157: PUSH
78158: LD_EXP 113
78162: PPUSH
78163: LD_EXP 113
78167: PUSH
78168: LD_INT 1
78170: PLUS
78171: PPUSH
78172: LD_VAR 0 1
78176: PPUSH
78177: CALL_OW 1
78181: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
78182: LD_ADDR_EXP 114
78186: PUSH
78187: LD_EXP 114
78191: PPUSH
78192: LD_EXP 114
78196: PUSH
78197: LD_INT 1
78199: PLUS
78200: PPUSH
78201: EMPTY
78202: PPUSH
78203: CALL_OW 1
78207: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78208: LD_ADDR_EXP 117
78212: PUSH
78213: LD_EXP 117
78217: PPUSH
78218: LD_EXP 117
78222: PUSH
78223: LD_INT 1
78225: PLUS
78226: PPUSH
78227: EMPTY
78228: PPUSH
78229: CALL_OW 1
78233: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78234: LD_VAR 0 1
78238: PPUSH
78239: CALL_OW 302
78243: NOT
78244: IFFALSE 78257
// begin HackUnlinkAll ( i ) ;
78246: LD_VAR 0 1
78250: PPUSH
78251: CALL 78363 0 1
// continue ;
78255: GO 78137
// end ; HackCheckCapturedStatus ( i ) ;
78257: LD_VAR 0 1
78261: PPUSH
78262: CALL 78806 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78266: LD_ADDR_VAR 0 2
78270: PUSH
78271: LD_INT 81
78273: PUSH
78274: LD_VAR 0 1
78278: PPUSH
78279: CALL_OW 255
78283: PUSH
78284: EMPTY
78285: LIST
78286: LIST
78287: PUSH
78288: LD_INT 33
78290: PUSH
78291: LD_INT 3
78293: PUSH
78294: EMPTY
78295: LIST
78296: LIST
78297: PUSH
78298: LD_INT 91
78300: PUSH
78301: LD_VAR 0 1
78305: PUSH
78306: LD_EXP 116
78310: PUSH
78311: EMPTY
78312: LIST
78313: LIST
78314: LIST
78315: PUSH
78316: LD_INT 50
78318: PUSH
78319: EMPTY
78320: LIST
78321: PUSH
78322: EMPTY
78323: LIST
78324: LIST
78325: LIST
78326: LIST
78327: PPUSH
78328: CALL_OW 69
78332: ST_TO_ADDR
// if not tmp then
78333: LD_VAR 0 2
78337: NOT
78338: IFFALSE 78342
// continue ;
78340: GO 78137
// HackLink ( i , tmp ) ;
78342: LD_VAR 0 1
78346: PPUSH
78347: LD_VAR 0 2
78351: PPUSH
78352: CALL 78499 0 2
// end ;
78356: GO 78137
78358: POP
78359: POP
// end ;
78360: PPOPN 2
78362: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78363: LD_INT 0
78365: PPUSH
78366: PPUSH
78367: PPUSH
// if not hack in hackTanks then
78368: LD_VAR 0 1
78372: PUSH
78373: LD_EXP 113
78377: IN
78378: NOT
78379: IFFALSE 78383
// exit ;
78381: GO 78494
// index := GetElementIndex ( hackTanks , hack ) ;
78383: LD_ADDR_VAR 0 4
78387: PUSH
78388: LD_EXP 113
78392: PPUSH
78393: LD_VAR 0 1
78397: PPUSH
78398: CALL 21767 0 2
78402: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
78403: LD_EXP 114
78407: PUSH
78408: LD_VAR 0 4
78412: ARRAY
78413: IFFALSE 78494
// begin for i in hackTanksCaptured [ index ] do
78415: LD_ADDR_VAR 0 3
78419: PUSH
78420: LD_EXP 114
78424: PUSH
78425: LD_VAR 0 4
78429: ARRAY
78430: PUSH
78431: FOR_IN
78432: IFFALSE 78458
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
78434: LD_VAR 0 3
78438: PUSH
78439: LD_INT 1
78441: ARRAY
78442: PPUSH
78443: LD_VAR 0 3
78447: PUSH
78448: LD_INT 2
78450: ARRAY
78451: PPUSH
78452: CALL_OW 235
78456: GO 78431
78458: POP
78459: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78460: LD_ADDR_EXP 114
78464: PUSH
78465: LD_EXP 114
78469: PPUSH
78470: LD_VAR 0 4
78474: PPUSH
78475: EMPTY
78476: PPUSH
78477: CALL_OW 1
78481: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78482: LD_VAR 0 1
78486: PPUSH
78487: LD_INT 0
78489: PPUSH
78490: CALL_OW 505
// end ; end ;
78494: LD_VAR 0 2
78498: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78499: LD_INT 0
78501: PPUSH
78502: PPUSH
78503: PPUSH
// if not hack in hackTanks or not vehicles then
78504: LD_VAR 0 1
78508: PUSH
78509: LD_EXP 113
78513: IN
78514: NOT
78515: PUSH
78516: LD_VAR 0 2
78520: NOT
78521: OR
78522: IFFALSE 78526
// exit ;
78524: GO 78801
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78526: LD_ADDR_VAR 0 2
78530: PUSH
78531: LD_VAR 0 1
78535: PPUSH
78536: LD_VAR 0 2
78540: PPUSH
78541: LD_INT 1
78543: PPUSH
78544: LD_INT 1
78546: PPUSH
78547: CALL 22417 0 4
78551: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78552: LD_ADDR_VAR 0 5
78556: PUSH
78557: LD_EXP 113
78561: PPUSH
78562: LD_VAR 0 1
78566: PPUSH
78567: CALL 21767 0 2
78571: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78572: LD_EXP 114
78576: PUSH
78577: LD_VAR 0 5
78581: ARRAY
78582: PUSH
78583: LD_EXP 115
78587: LESS
78588: IFFALSE 78777
// begin for i := 1 to vehicles do
78590: LD_ADDR_VAR 0 4
78594: PUSH
78595: DOUBLE
78596: LD_INT 1
78598: DEC
78599: ST_TO_ADDR
78600: LD_VAR 0 2
78604: PUSH
78605: FOR_TO
78606: IFFALSE 78775
// begin if hackTanksCaptured [ index ] = hackLimit then
78608: LD_EXP 114
78612: PUSH
78613: LD_VAR 0 5
78617: ARRAY
78618: PUSH
78619: LD_EXP 115
78623: EQUAL
78624: IFFALSE 78628
// break ;
78626: GO 78775
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78628: LD_ADDR_EXP 117
78632: PUSH
78633: LD_EXP 117
78637: PPUSH
78638: LD_VAR 0 5
78642: PPUSH
78643: LD_EXP 117
78647: PUSH
78648: LD_VAR 0 5
78652: ARRAY
78653: PUSH
78654: LD_INT 1
78656: PLUS
78657: PPUSH
78658: CALL_OW 1
78662: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78663: LD_ADDR_EXP 114
78667: PUSH
78668: LD_EXP 114
78672: PPUSH
78673: LD_VAR 0 5
78677: PUSH
78678: LD_EXP 114
78682: PUSH
78683: LD_VAR 0 5
78687: ARRAY
78688: PUSH
78689: LD_INT 1
78691: PLUS
78692: PUSH
78693: EMPTY
78694: LIST
78695: LIST
78696: PPUSH
78697: LD_VAR 0 2
78701: PUSH
78702: LD_VAR 0 4
78706: ARRAY
78707: PUSH
78708: LD_VAR 0 2
78712: PUSH
78713: LD_VAR 0 4
78717: ARRAY
78718: PPUSH
78719: CALL_OW 255
78723: PUSH
78724: EMPTY
78725: LIST
78726: LIST
78727: PPUSH
78728: CALL 21982 0 3
78732: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78733: LD_VAR 0 2
78737: PUSH
78738: LD_VAR 0 4
78742: ARRAY
78743: PPUSH
78744: LD_VAR 0 1
78748: PPUSH
78749: CALL_OW 255
78753: PPUSH
78754: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78758: LD_VAR 0 2
78762: PUSH
78763: LD_VAR 0 4
78767: ARRAY
78768: PPUSH
78769: CALL_OW 141
// end ;
78773: GO 78605
78775: POP
78776: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78777: LD_VAR 0 1
78781: PPUSH
78782: LD_EXP 114
78786: PUSH
78787: LD_VAR 0 5
78791: ARRAY
78792: PUSH
78793: LD_INT 0
78795: PLUS
78796: PPUSH
78797: CALL_OW 505
// end ;
78801: LD_VAR 0 3
78805: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78806: LD_INT 0
78808: PPUSH
78809: PPUSH
78810: PPUSH
78811: PPUSH
// if not hack in hackTanks then
78812: LD_VAR 0 1
78816: PUSH
78817: LD_EXP 113
78821: IN
78822: NOT
78823: IFFALSE 78827
// exit ;
78825: GO 79067
// index := GetElementIndex ( hackTanks , hack ) ;
78827: LD_ADDR_VAR 0 4
78831: PUSH
78832: LD_EXP 113
78836: PPUSH
78837: LD_VAR 0 1
78841: PPUSH
78842: CALL 21767 0 2
78846: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78847: LD_ADDR_VAR 0 3
78851: PUSH
78852: DOUBLE
78853: LD_EXP 114
78857: PUSH
78858: LD_VAR 0 4
78862: ARRAY
78863: INC
78864: ST_TO_ADDR
78865: LD_INT 1
78867: PUSH
78868: FOR_DOWNTO
78869: IFFALSE 79041
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
78871: LD_ADDR_VAR 0 5
78875: PUSH
78876: LD_EXP 114
78880: PUSH
78881: LD_VAR 0 4
78885: ARRAY
78886: PUSH
78887: LD_VAR 0 3
78891: ARRAY
78892: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
78893: LD_VAR 0 5
78897: PUSH
78898: LD_INT 1
78900: ARRAY
78901: PPUSH
78902: CALL_OW 302
78906: NOT
78907: PUSH
78908: LD_VAR 0 5
78912: PUSH
78913: LD_INT 1
78915: ARRAY
78916: PPUSH
78917: CALL_OW 255
78921: PUSH
78922: LD_VAR 0 1
78926: PPUSH
78927: CALL_OW 255
78931: NONEQUAL
78932: OR
78933: IFFALSE 79039
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
78935: LD_VAR 0 5
78939: PUSH
78940: LD_INT 1
78942: ARRAY
78943: PPUSH
78944: CALL_OW 305
78948: PUSH
78949: LD_VAR 0 5
78953: PUSH
78954: LD_INT 1
78956: ARRAY
78957: PPUSH
78958: CALL_OW 255
78962: PUSH
78963: LD_VAR 0 1
78967: PPUSH
78968: CALL_OW 255
78972: EQUAL
78973: AND
78974: IFFALSE 78998
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
78976: LD_VAR 0 5
78980: PUSH
78981: LD_INT 1
78983: ARRAY
78984: PPUSH
78985: LD_VAR 0 5
78989: PUSH
78990: LD_INT 2
78992: ARRAY
78993: PPUSH
78994: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
78998: LD_ADDR_EXP 114
79002: PUSH
79003: LD_EXP 114
79007: PPUSH
79008: LD_VAR 0 4
79012: PPUSH
79013: LD_EXP 114
79017: PUSH
79018: LD_VAR 0 4
79022: ARRAY
79023: PPUSH
79024: LD_VAR 0 3
79028: PPUSH
79029: CALL_OW 3
79033: PPUSH
79034: CALL_OW 1
79038: ST_TO_ADDR
// end ; end ;
79039: GO 78868
79041: POP
79042: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79043: LD_VAR 0 1
79047: PPUSH
79048: LD_EXP 114
79052: PUSH
79053: LD_VAR 0 4
79057: ARRAY
79058: PUSH
79059: LD_INT 0
79061: PLUS
79062: PPUSH
79063: CALL_OW 505
// end ;
79067: LD_VAR 0 2
79071: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
79072: LD_INT 0
79074: PPUSH
79075: PPUSH
79076: PPUSH
79077: PPUSH
// if not hack in hackTanks then
79078: LD_VAR 0 1
79082: PUSH
79083: LD_EXP 113
79087: IN
79088: NOT
79089: IFFALSE 79093
// exit ;
79091: GO 79178
// index := GetElementIndex ( hackTanks , hack ) ;
79093: LD_ADDR_VAR 0 5
79097: PUSH
79098: LD_EXP 113
79102: PPUSH
79103: LD_VAR 0 1
79107: PPUSH
79108: CALL 21767 0 2
79112: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
79113: LD_ADDR_VAR 0 4
79117: PUSH
79118: DOUBLE
79119: LD_INT 1
79121: DEC
79122: ST_TO_ADDR
79123: LD_EXP 114
79127: PUSH
79128: LD_VAR 0 5
79132: ARRAY
79133: PUSH
79134: FOR_TO
79135: IFFALSE 79176
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
79137: LD_EXP 114
79141: PUSH
79142: LD_VAR 0 5
79146: ARRAY
79147: PUSH
79148: LD_VAR 0 4
79152: ARRAY
79153: PUSH
79154: LD_INT 1
79156: ARRAY
79157: PUSH
79158: LD_VAR 0 2
79162: EQUAL
79163: IFFALSE 79174
// KillUnit ( vehicle ) ;
79165: LD_VAR 0 2
79169: PPUSH
79170: CALL_OW 66
79174: GO 79134
79176: POP
79177: POP
// end ;
79178: LD_VAR 0 3
79182: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
79183: LD_EXP 118
79187: NOT
79188: IFFALSE 79223
79190: GO 79192
79192: DISABLE
// begin initMiner := true ;
79193: LD_ADDR_EXP 118
79197: PUSH
79198: LD_INT 1
79200: ST_TO_ADDR
// minersList := [ ] ;
79201: LD_ADDR_EXP 119
79205: PUSH
79206: EMPTY
79207: ST_TO_ADDR
// minerMinesList := [ ] ;
79208: LD_ADDR_EXP 120
79212: PUSH
79213: EMPTY
79214: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
79215: LD_ADDR_EXP 121
79219: PUSH
79220: LD_INT 5
79222: ST_TO_ADDR
// end ;
79223: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
79224: LD_EXP 118
79228: PUSH
79229: LD_INT 34
79231: PUSH
79232: LD_INT 81
79234: PUSH
79235: EMPTY
79236: LIST
79237: LIST
79238: PPUSH
79239: CALL_OW 69
79243: AND
79244: IFFALSE 79705
79246: GO 79248
79248: DISABLE
79249: LD_INT 0
79251: PPUSH
79252: PPUSH
79253: PPUSH
79254: PPUSH
// begin enable ;
79255: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79256: LD_ADDR_VAR 0 1
79260: PUSH
79261: LD_INT 34
79263: PUSH
79264: LD_INT 81
79266: PUSH
79267: EMPTY
79268: LIST
79269: LIST
79270: PPUSH
79271: CALL_OW 69
79275: PUSH
79276: FOR_IN
79277: IFFALSE 79349
// begin if not i in minersList then
79279: LD_VAR 0 1
79283: PUSH
79284: LD_EXP 119
79288: IN
79289: NOT
79290: IFFALSE 79347
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79292: LD_ADDR_EXP 119
79296: PUSH
79297: LD_EXP 119
79301: PPUSH
79302: LD_EXP 119
79306: PUSH
79307: LD_INT 1
79309: PLUS
79310: PPUSH
79311: LD_VAR 0 1
79315: PPUSH
79316: CALL_OW 1
79320: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
79321: LD_ADDR_EXP 120
79325: PUSH
79326: LD_EXP 120
79330: PPUSH
79331: LD_EXP 120
79335: PUSH
79336: LD_INT 1
79338: PLUS
79339: PPUSH
79340: EMPTY
79341: PPUSH
79342: CALL_OW 1
79346: ST_TO_ADDR
// end end ;
79347: GO 79276
79349: POP
79350: POP
// for i := minerMinesList downto 1 do
79351: LD_ADDR_VAR 0 1
79355: PUSH
79356: DOUBLE
79357: LD_EXP 120
79361: INC
79362: ST_TO_ADDR
79363: LD_INT 1
79365: PUSH
79366: FOR_DOWNTO
79367: IFFALSE 79703
// begin if IsLive ( minersList [ i ] ) then
79369: LD_EXP 119
79373: PUSH
79374: LD_VAR 0 1
79378: ARRAY
79379: PPUSH
79380: CALL_OW 300
79384: IFFALSE 79412
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
79386: LD_EXP 119
79390: PUSH
79391: LD_VAR 0 1
79395: ARRAY
79396: PPUSH
79397: LD_EXP 120
79401: PUSH
79402: LD_VAR 0 1
79406: ARRAY
79407: PPUSH
79408: CALL_OW 505
// if not minerMinesList [ i ] then
79412: LD_EXP 120
79416: PUSH
79417: LD_VAR 0 1
79421: ARRAY
79422: NOT
79423: IFFALSE 79427
// continue ;
79425: GO 79366
// for j := minerMinesList [ i ] downto 1 do
79427: LD_ADDR_VAR 0 2
79431: PUSH
79432: DOUBLE
79433: LD_EXP 120
79437: PUSH
79438: LD_VAR 0 1
79442: ARRAY
79443: INC
79444: ST_TO_ADDR
79445: LD_INT 1
79447: PUSH
79448: FOR_DOWNTO
79449: IFFALSE 79699
// begin side := GetSide ( minersList [ i ] ) ;
79451: LD_ADDR_VAR 0 3
79455: PUSH
79456: LD_EXP 119
79460: PUSH
79461: LD_VAR 0 1
79465: ARRAY
79466: PPUSH
79467: CALL_OW 255
79471: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79472: LD_ADDR_VAR 0 4
79476: PUSH
79477: LD_EXP 120
79481: PUSH
79482: LD_VAR 0 1
79486: ARRAY
79487: PUSH
79488: LD_VAR 0 2
79492: ARRAY
79493: PUSH
79494: LD_INT 1
79496: ARRAY
79497: PPUSH
79498: LD_EXP 120
79502: PUSH
79503: LD_VAR 0 1
79507: ARRAY
79508: PUSH
79509: LD_VAR 0 2
79513: ARRAY
79514: PUSH
79515: LD_INT 2
79517: ARRAY
79518: PPUSH
79519: CALL_OW 428
79523: ST_TO_ADDR
// if not tmp then
79524: LD_VAR 0 4
79528: NOT
79529: IFFALSE 79533
// continue ;
79531: GO 79448
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79533: LD_VAR 0 4
79537: PUSH
79538: LD_INT 81
79540: PUSH
79541: LD_VAR 0 3
79545: PUSH
79546: EMPTY
79547: LIST
79548: LIST
79549: PPUSH
79550: CALL_OW 69
79554: IN
79555: PUSH
79556: LD_EXP 120
79560: PUSH
79561: LD_VAR 0 1
79565: ARRAY
79566: PUSH
79567: LD_VAR 0 2
79571: ARRAY
79572: PUSH
79573: LD_INT 1
79575: ARRAY
79576: PPUSH
79577: LD_EXP 120
79581: PUSH
79582: LD_VAR 0 1
79586: ARRAY
79587: PUSH
79588: LD_VAR 0 2
79592: ARRAY
79593: PUSH
79594: LD_INT 2
79596: ARRAY
79597: PPUSH
79598: CALL_OW 458
79602: AND
79603: IFFALSE 79697
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79605: LD_EXP 120
79609: PUSH
79610: LD_VAR 0 1
79614: ARRAY
79615: PUSH
79616: LD_VAR 0 2
79620: ARRAY
79621: PUSH
79622: LD_INT 1
79624: ARRAY
79625: PPUSH
79626: LD_EXP 120
79630: PUSH
79631: LD_VAR 0 1
79635: ARRAY
79636: PUSH
79637: LD_VAR 0 2
79641: ARRAY
79642: PUSH
79643: LD_INT 2
79645: ARRAY
79646: PPUSH
79647: LD_VAR 0 3
79651: PPUSH
79652: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79656: LD_ADDR_EXP 120
79660: PUSH
79661: LD_EXP 120
79665: PPUSH
79666: LD_VAR 0 1
79670: PPUSH
79671: LD_EXP 120
79675: PUSH
79676: LD_VAR 0 1
79680: ARRAY
79681: PPUSH
79682: LD_VAR 0 2
79686: PPUSH
79687: CALL_OW 3
79691: PPUSH
79692: CALL_OW 1
79696: ST_TO_ADDR
// end ; end ;
79697: GO 79448
79699: POP
79700: POP
// end ;
79701: GO 79366
79703: POP
79704: POP
// end ;
79705: PPOPN 4
79707: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
79708: LD_INT 0
79710: PPUSH
79711: PPUSH
// result := false ;
79712: LD_ADDR_VAR 0 4
79716: PUSH
79717: LD_INT 0
79719: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79720: LD_VAR 0 1
79724: PPUSH
79725: CALL_OW 264
79729: PUSH
79730: LD_INT 81
79732: EQUAL
79733: NOT
79734: IFFALSE 79738
// exit ;
79736: GO 79978
// index := GetElementIndex ( minersList , unit ) ;
79738: LD_ADDR_VAR 0 5
79742: PUSH
79743: LD_EXP 119
79747: PPUSH
79748: LD_VAR 0 1
79752: PPUSH
79753: CALL 21767 0 2
79757: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79758: LD_EXP 120
79762: PUSH
79763: LD_VAR 0 5
79767: ARRAY
79768: PUSH
79769: LD_EXP 121
79773: GREATEREQUAL
79774: IFFALSE 79778
// exit ;
79776: GO 79978
// ComMoveXY ( unit , x , y ) ;
79778: LD_VAR 0 1
79782: PPUSH
79783: LD_VAR 0 2
79787: PPUSH
79788: LD_VAR 0 3
79792: PPUSH
79793: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79797: LD_INT 35
79799: PPUSH
79800: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79804: LD_VAR 0 1
79808: PPUSH
79809: LD_VAR 0 2
79813: PPUSH
79814: LD_VAR 0 3
79818: PPUSH
79819: CALL 53528 0 3
79823: NOT
79824: PUSH
79825: LD_VAR 0 1
79829: PPUSH
79830: CALL_OW 314
79834: AND
79835: IFFALSE 79839
// exit ;
79837: GO 79978
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79839: LD_VAR 0 2
79843: PPUSH
79844: LD_VAR 0 3
79848: PPUSH
79849: CALL_OW 428
79853: PUSH
79854: LD_VAR 0 1
79858: EQUAL
79859: PUSH
79860: LD_VAR 0 1
79864: PPUSH
79865: CALL_OW 314
79869: NOT
79870: AND
79871: IFFALSE 79797
// PlaySoundXY ( x , y , PlantMine ) ;
79873: LD_VAR 0 2
79877: PPUSH
79878: LD_VAR 0 3
79882: PPUSH
79883: LD_STRING PlantMine
79885: PPUSH
79886: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
79890: LD_VAR 0 2
79894: PPUSH
79895: LD_VAR 0 3
79899: PPUSH
79900: LD_VAR 0 1
79904: PPUSH
79905: CALL_OW 255
79909: PPUSH
79910: LD_INT 0
79912: PPUSH
79913: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
79917: LD_ADDR_EXP 120
79921: PUSH
79922: LD_EXP 120
79926: PPUSH
79927: LD_VAR 0 5
79931: PUSH
79932: LD_EXP 120
79936: PUSH
79937: LD_VAR 0 5
79941: ARRAY
79942: PUSH
79943: LD_INT 1
79945: PLUS
79946: PUSH
79947: EMPTY
79948: LIST
79949: LIST
79950: PPUSH
79951: LD_VAR 0 2
79955: PUSH
79956: LD_VAR 0 3
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PPUSH
79965: CALL 21982 0 3
79969: ST_TO_ADDR
// result := true ;
79970: LD_ADDR_VAR 0 4
79974: PUSH
79975: LD_INT 1
79977: ST_TO_ADDR
// end ;
79978: LD_VAR 0 4
79982: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
79983: LD_INT 0
79985: PPUSH
79986: PPUSH
79987: PPUSH
// if not unit in minersList then
79988: LD_VAR 0 1
79992: PUSH
79993: LD_EXP 119
79997: IN
79998: NOT
79999: IFFALSE 80003
// exit ;
80001: GO 80395
// index := GetElementIndex ( minersList , unit ) ;
80003: LD_ADDR_VAR 0 6
80007: PUSH
80008: LD_EXP 119
80012: PPUSH
80013: LD_VAR 0 1
80017: PPUSH
80018: CALL 21767 0 2
80022: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
80023: LD_ADDR_VAR 0 5
80027: PUSH
80028: DOUBLE
80029: LD_EXP 120
80033: PUSH
80034: LD_VAR 0 6
80038: ARRAY
80039: INC
80040: ST_TO_ADDR
80041: LD_INT 1
80043: PUSH
80044: FOR_DOWNTO
80045: IFFALSE 80206
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
80047: LD_EXP 120
80051: PUSH
80052: LD_VAR 0 6
80056: ARRAY
80057: PUSH
80058: LD_VAR 0 5
80062: ARRAY
80063: PUSH
80064: LD_INT 1
80066: ARRAY
80067: PUSH
80068: LD_VAR 0 2
80072: EQUAL
80073: PUSH
80074: LD_EXP 120
80078: PUSH
80079: LD_VAR 0 6
80083: ARRAY
80084: PUSH
80085: LD_VAR 0 5
80089: ARRAY
80090: PUSH
80091: LD_INT 2
80093: ARRAY
80094: PUSH
80095: LD_VAR 0 3
80099: EQUAL
80100: AND
80101: IFFALSE 80204
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80103: LD_EXP 120
80107: PUSH
80108: LD_VAR 0 6
80112: ARRAY
80113: PUSH
80114: LD_VAR 0 5
80118: ARRAY
80119: PUSH
80120: LD_INT 1
80122: ARRAY
80123: PPUSH
80124: LD_EXP 120
80128: PUSH
80129: LD_VAR 0 6
80133: ARRAY
80134: PUSH
80135: LD_VAR 0 5
80139: ARRAY
80140: PUSH
80141: LD_INT 2
80143: ARRAY
80144: PPUSH
80145: LD_VAR 0 1
80149: PPUSH
80150: CALL_OW 255
80154: PPUSH
80155: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80159: LD_ADDR_EXP 120
80163: PUSH
80164: LD_EXP 120
80168: PPUSH
80169: LD_VAR 0 6
80173: PPUSH
80174: LD_EXP 120
80178: PUSH
80179: LD_VAR 0 6
80183: ARRAY
80184: PPUSH
80185: LD_VAR 0 5
80189: PPUSH
80190: CALL_OW 3
80194: PPUSH
80195: CALL_OW 1
80199: ST_TO_ADDR
// exit ;
80200: POP
80201: POP
80202: GO 80395
// end ; end ;
80204: GO 80044
80206: POP
80207: POP
// for i := minerMinesList [ index ] downto 1 do
80208: LD_ADDR_VAR 0 5
80212: PUSH
80213: DOUBLE
80214: LD_EXP 120
80218: PUSH
80219: LD_VAR 0 6
80223: ARRAY
80224: INC
80225: ST_TO_ADDR
80226: LD_INT 1
80228: PUSH
80229: FOR_DOWNTO
80230: IFFALSE 80393
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80232: LD_EXP 120
80236: PUSH
80237: LD_VAR 0 6
80241: ARRAY
80242: PUSH
80243: LD_VAR 0 5
80247: ARRAY
80248: PUSH
80249: LD_INT 1
80251: ARRAY
80252: PPUSH
80253: LD_EXP 120
80257: PUSH
80258: LD_VAR 0 6
80262: ARRAY
80263: PUSH
80264: LD_VAR 0 5
80268: ARRAY
80269: PUSH
80270: LD_INT 2
80272: ARRAY
80273: PPUSH
80274: LD_VAR 0 2
80278: PPUSH
80279: LD_VAR 0 3
80283: PPUSH
80284: CALL_OW 298
80288: PUSH
80289: LD_INT 6
80291: LESS
80292: IFFALSE 80391
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80294: LD_EXP 120
80298: PUSH
80299: LD_VAR 0 6
80303: ARRAY
80304: PUSH
80305: LD_VAR 0 5
80309: ARRAY
80310: PUSH
80311: LD_INT 1
80313: ARRAY
80314: PPUSH
80315: LD_EXP 120
80319: PUSH
80320: LD_VAR 0 6
80324: ARRAY
80325: PUSH
80326: LD_VAR 0 5
80330: ARRAY
80331: PUSH
80332: LD_INT 2
80334: ARRAY
80335: PPUSH
80336: LD_VAR 0 1
80340: PPUSH
80341: CALL_OW 255
80345: PPUSH
80346: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80350: LD_ADDR_EXP 120
80354: PUSH
80355: LD_EXP 120
80359: PPUSH
80360: LD_VAR 0 6
80364: PPUSH
80365: LD_EXP 120
80369: PUSH
80370: LD_VAR 0 6
80374: ARRAY
80375: PPUSH
80376: LD_VAR 0 5
80380: PPUSH
80381: CALL_OW 3
80385: PPUSH
80386: CALL_OW 1
80390: ST_TO_ADDR
// end ; end ;
80391: GO 80229
80393: POP
80394: POP
// end ;
80395: LD_VAR 0 4
80399: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
80400: LD_INT 0
80402: PPUSH
80403: PPUSH
80404: PPUSH
80405: PPUSH
80406: PPUSH
80407: PPUSH
80408: PPUSH
80409: PPUSH
80410: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
80411: LD_VAR 0 1
80415: PPUSH
80416: CALL_OW 264
80420: PUSH
80421: LD_INT 81
80423: EQUAL
80424: NOT
80425: PUSH
80426: LD_VAR 0 1
80430: PUSH
80431: LD_EXP 119
80435: IN
80436: NOT
80437: OR
80438: IFFALSE 80442
// exit ;
80440: GO 80764
// index := GetElementIndex ( minersList , unit ) ;
80442: LD_ADDR_VAR 0 6
80446: PUSH
80447: LD_EXP 119
80451: PPUSH
80452: LD_VAR 0 1
80456: PPUSH
80457: CALL 21767 0 2
80461: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80462: LD_ADDR_VAR 0 8
80466: PUSH
80467: LD_EXP 121
80471: PUSH
80472: LD_EXP 120
80476: PUSH
80477: LD_VAR 0 6
80481: ARRAY
80482: MINUS
80483: ST_TO_ADDR
// if not minesFreeAmount then
80484: LD_VAR 0 8
80488: NOT
80489: IFFALSE 80493
// exit ;
80491: GO 80764
// tmp := [ ] ;
80493: LD_ADDR_VAR 0 7
80497: PUSH
80498: EMPTY
80499: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80500: LD_ADDR_VAR 0 5
80504: PUSH
80505: DOUBLE
80506: LD_INT 1
80508: DEC
80509: ST_TO_ADDR
80510: LD_VAR 0 8
80514: PUSH
80515: FOR_TO
80516: IFFALSE 80711
// begin _d := rand ( 0 , 5 ) ;
80518: LD_ADDR_VAR 0 11
80522: PUSH
80523: LD_INT 0
80525: PPUSH
80526: LD_INT 5
80528: PPUSH
80529: CALL_OW 12
80533: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80534: LD_ADDR_VAR 0 12
80538: PUSH
80539: LD_INT 2
80541: PPUSH
80542: LD_INT 6
80544: PPUSH
80545: CALL_OW 12
80549: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80550: LD_ADDR_VAR 0 9
80554: PUSH
80555: LD_VAR 0 2
80559: PPUSH
80560: LD_VAR 0 11
80564: PPUSH
80565: LD_VAR 0 12
80569: PPUSH
80570: CALL_OW 272
80574: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80575: LD_ADDR_VAR 0 10
80579: PUSH
80580: LD_VAR 0 3
80584: PPUSH
80585: LD_VAR 0 11
80589: PPUSH
80590: LD_VAR 0 12
80594: PPUSH
80595: CALL_OW 273
80599: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80600: LD_VAR 0 9
80604: PPUSH
80605: LD_VAR 0 10
80609: PPUSH
80610: CALL_OW 488
80614: PUSH
80615: LD_VAR 0 9
80619: PUSH
80620: LD_VAR 0 10
80624: PUSH
80625: EMPTY
80626: LIST
80627: LIST
80628: PUSH
80629: LD_VAR 0 7
80633: IN
80634: NOT
80635: AND
80636: PUSH
80637: LD_VAR 0 9
80641: PPUSH
80642: LD_VAR 0 10
80646: PPUSH
80647: CALL_OW 458
80651: NOT
80652: AND
80653: IFFALSE 80695
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80655: LD_ADDR_VAR 0 7
80659: PUSH
80660: LD_VAR 0 7
80664: PPUSH
80665: LD_VAR 0 7
80669: PUSH
80670: LD_INT 1
80672: PLUS
80673: PPUSH
80674: LD_VAR 0 9
80678: PUSH
80679: LD_VAR 0 10
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PPUSH
80688: CALL_OW 1
80692: ST_TO_ADDR
80693: GO 80709
// i := i - 1 ;
80695: LD_ADDR_VAR 0 5
80699: PUSH
80700: LD_VAR 0 5
80704: PUSH
80705: LD_INT 1
80707: MINUS
80708: ST_TO_ADDR
// end ;
80709: GO 80515
80711: POP
80712: POP
// for i in tmp do
80713: LD_ADDR_VAR 0 5
80717: PUSH
80718: LD_VAR 0 7
80722: PUSH
80723: FOR_IN
80724: IFFALSE 80762
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80726: LD_VAR 0 1
80730: PPUSH
80731: LD_VAR 0 5
80735: PUSH
80736: LD_INT 1
80738: ARRAY
80739: PPUSH
80740: LD_VAR 0 5
80744: PUSH
80745: LD_INT 2
80747: ARRAY
80748: PPUSH
80749: CALL 79708 0 3
80753: NOT
80754: IFFALSE 80760
// exit ;
80756: POP
80757: POP
80758: GO 80764
80760: GO 80723
80762: POP
80763: POP
// end ;
80764: LD_VAR 0 4
80768: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
80769: LD_INT 0
80771: PPUSH
80772: PPUSH
80773: PPUSH
80774: PPUSH
80775: PPUSH
80776: PPUSH
80777: PPUSH
80778: PPUSH
80779: PPUSH
// if GetClass ( unit ) <> class_sniper then
80780: LD_VAR 0 1
80784: PPUSH
80785: CALL_OW 257
80789: PUSH
80790: LD_INT 5
80792: NONEQUAL
80793: IFFALSE 80797
// exit ;
80795: GO 81263
// dist := 8 ;
80797: LD_ADDR_VAR 0 5
80801: PUSH
80802: LD_INT 8
80804: ST_TO_ADDR
// viewRange := 12 ;
80805: LD_ADDR_VAR 0 8
80809: PUSH
80810: LD_INT 12
80812: ST_TO_ADDR
// side := GetSide ( unit ) ;
80813: LD_ADDR_VAR 0 6
80817: PUSH
80818: LD_VAR 0 1
80822: PPUSH
80823: CALL_OW 255
80827: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80828: LD_INT 61
80830: PPUSH
80831: LD_VAR 0 6
80835: PPUSH
80836: CALL_OW 321
80840: PUSH
80841: LD_INT 2
80843: EQUAL
80844: IFFALSE 80854
// viewRange := 16 ;
80846: LD_ADDR_VAR 0 8
80850: PUSH
80851: LD_INT 16
80853: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
80854: LD_VAR 0 1
80858: PPUSH
80859: LD_VAR 0 2
80863: PPUSH
80864: LD_VAR 0 3
80868: PPUSH
80869: CALL_OW 297
80873: PUSH
80874: LD_VAR 0 5
80878: GREATER
80879: IFFALSE 80958
// begin ComMoveXY ( unit , x , y ) ;
80881: LD_VAR 0 1
80885: PPUSH
80886: LD_VAR 0 2
80890: PPUSH
80891: LD_VAR 0 3
80895: PPUSH
80896: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80900: LD_INT 35
80902: PPUSH
80903: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
80907: LD_VAR 0 1
80911: PPUSH
80912: LD_VAR 0 2
80916: PPUSH
80917: LD_VAR 0 3
80921: PPUSH
80922: CALL 53528 0 3
80926: NOT
80927: IFFALSE 80931
// exit ;
80929: GO 81263
// until GetDistUnitXY ( unit , x , y ) < dist ;
80931: LD_VAR 0 1
80935: PPUSH
80936: LD_VAR 0 2
80940: PPUSH
80941: LD_VAR 0 3
80945: PPUSH
80946: CALL_OW 297
80950: PUSH
80951: LD_VAR 0 5
80955: LESS
80956: IFFALSE 80900
// end ; ComTurnXY ( unit , x , y ) ;
80958: LD_VAR 0 1
80962: PPUSH
80963: LD_VAR 0 2
80967: PPUSH
80968: LD_VAR 0 3
80972: PPUSH
80973: CALL_OW 118
// repeat if Multiplayer then
80977: LD_OWVAR 4
80981: IFFALSE 80992
// wait ( 35 ) else
80983: LD_INT 35
80985: PPUSH
80986: CALL_OW 67
80990: GO 80999
// wait ( 5 ) ;
80992: LD_INT 5
80994: PPUSH
80995: CALL_OW 67
// _d := GetDir ( unit ) ;
80999: LD_ADDR_VAR 0 11
81003: PUSH
81004: LD_VAR 0 1
81008: PPUSH
81009: CALL_OW 254
81013: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
81014: LD_ADDR_VAR 0 7
81018: PUSH
81019: LD_VAR 0 1
81023: PPUSH
81024: CALL_OW 250
81028: PPUSH
81029: LD_VAR 0 1
81033: PPUSH
81034: CALL_OW 251
81038: PPUSH
81039: LD_VAR 0 2
81043: PPUSH
81044: LD_VAR 0 3
81048: PPUSH
81049: CALL 56136 0 4
81053: ST_TO_ADDR
// until dir = _d ;
81054: LD_VAR 0 7
81058: PUSH
81059: LD_VAR 0 11
81063: EQUAL
81064: IFFALSE 80977
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
81066: LD_ADDR_VAR 0 9
81070: PUSH
81071: LD_VAR 0 1
81075: PPUSH
81076: CALL_OW 250
81080: PPUSH
81081: LD_VAR 0 7
81085: PPUSH
81086: LD_VAR 0 5
81090: PPUSH
81091: CALL_OW 272
81095: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
81096: LD_ADDR_VAR 0 10
81100: PUSH
81101: LD_VAR 0 1
81105: PPUSH
81106: CALL_OW 251
81110: PPUSH
81111: LD_VAR 0 7
81115: PPUSH
81116: LD_VAR 0 5
81120: PPUSH
81121: CALL_OW 273
81125: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81126: LD_VAR 0 9
81130: PPUSH
81131: LD_VAR 0 10
81135: PPUSH
81136: CALL_OW 488
81140: NOT
81141: IFFALSE 81145
// exit ;
81143: GO 81263
// ComAnimCustom ( unit , 1 ) ;
81145: LD_VAR 0 1
81149: PPUSH
81150: LD_INT 1
81152: PPUSH
81153: CALL_OW 592
// p := 0 ;
81157: LD_ADDR_VAR 0 12
81161: PUSH
81162: LD_INT 0
81164: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
81165: LD_VAR 0 9
81169: PPUSH
81170: LD_VAR 0 10
81174: PPUSH
81175: LD_VAR 0 6
81179: PPUSH
81180: LD_VAR 0 8
81184: PPUSH
81185: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
81189: LD_INT 35
81191: PPUSH
81192: CALL_OW 67
// p := Inc ( p ) ;
81196: LD_ADDR_VAR 0 12
81200: PUSH
81201: LD_VAR 0 12
81205: PPUSH
81206: CALL 56092 0 1
81210: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
81211: LD_VAR 0 12
81215: PUSH
81216: LD_INT 3
81218: EQUAL
81219: PUSH
81220: LD_VAR 0 1
81224: PPUSH
81225: CALL_OW 302
81229: NOT
81230: OR
81231: PUSH
81232: LD_VAR 0 1
81236: PPUSH
81237: CALL_OW 301
81241: OR
81242: IFFALSE 81189
// RemoveSeeing ( _x , _y , side ) ;
81244: LD_VAR 0 9
81248: PPUSH
81249: LD_VAR 0 10
81253: PPUSH
81254: LD_VAR 0 6
81258: PPUSH
81259: CALL_OW 331
// end ; end_of_file
81263: LD_VAR 0 4
81267: RET
