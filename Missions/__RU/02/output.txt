// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam , immortalVehLive ; export kirovConstructedBunkers ; export activateAMAI , activateBelkovAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; export achievement_ConstructVehicles ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 373 0 0
// PrepareRussian ;
  24: CALL 1139 0 0
// CreateNature ;
  28: CALL 16627 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// immortalVehLive = 1000 ;
 203: LD_ADDR_EXP 25
 207: PUSH
 208: LD_INT 1000
 210: ST_TO_ADDR
// canExitBase = true ;
 211: LD_ADDR_EXP 19
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// canExploreMap = false ;
 219: LD_ADDR_EXP 20
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawLeftBunker = false ;
 227: LD_ADDR_EXP 29
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// sawRightBunker = false ;
 235: LD_ADDR_EXP 30
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogLoopBlocker = false ;
 243: LD_ADDR_EXP 33
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 251: LD_ADDR_EXP 31
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// playerGetSupport = false ;
 267: LD_ADDR_EXP 34
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// captureBelkovVehicle = false ;
 275: LD_ADDR_EXP 38
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// saveBelkovObjective = false ;
 283: LD_ADDR_EXP 36
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// medalForGetSupport = true ;
 291: LD_ADDR_EXP 40
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 299: LD_ADDR_EXP 39
 303: PUSH
 304: LD_INT 1
 306: NEG
 307: ST_TO_ADDR
// initiative = 0 ;
 308: LD_ADDR_EXP 42
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// lostComradesCounter = 0 ;
 316: LD_ADDR_EXP 43
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// northMapExplored = false ;
 324: LD_ADDR_EXP 41
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// activateAMAI = false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// activateBelkovAI = false ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// achievement_ConstructVehicles = 0 ;
 356: LD_ADDR_EXP 44
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
// MissionIntro ;
 364: CALL 6987 0 0
// end ; end_of_file
 368: LD_VAR 0 1
 372: RET
// export function InitMapConfig ; begin
 373: LD_INT 0
 375: PPUSH
// BaseMapConfig ;
 376: CALL 389 0 0
// MissionMapConfig ;
 380: CALL 475 0 0
// end ;
 384: LD_VAR 0 1
 388: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 389: LD_INT 0
 391: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 392: LD_ADDR_EXP 45
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 4
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 415: LD_ADDR_EXP 46
 419: PUSH
 420: LD_INT 2
 422: PUSH
 423: LD_INT 2
 425: PUSH
 426: LD_INT 2
 428: PUSH
 429: LD_INT 2
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: ST_TO_ADDR
// animalsAgression = 0 ;
 438: LD_ADDR_EXP 47
 442: PUSH
 443: LD_INT 0
 445: ST_TO_ADDR
// debugMode = 0 ;
 446: LD_ADDR_EXP 50
 450: PUSH
 451: LD_INT 0
 453: ST_TO_ADDR
// missionPrefix = 02_ ;
 454: LD_ADDR_EXP 48
 458: PUSH
 459: LD_STRING 02_
 461: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 462: LD_ADDR_EXP 49
 466: PUSH
 467: LD_STRING 01_
 469: ST_TO_ADDR
// end ;
 470: LD_VAR 0 1
 474: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 475: LD_INT 0
 477: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 162
 485: PUSH
 486: LD_INT 107
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 162
 495: PUSH
 496: LD_INT 108
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 163
 505: PUSH
 506: LD_INT 109
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 163
 515: PUSH
 516: LD_INT 110
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 162
 525: PUSH
 526: LD_INT 109
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 161
 535: PUSH
 536: LD_INT 107
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 161
 545: PUSH
 546: LD_INT 106
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 113
 569: PUSH
 570: LD_INT 96
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 114
 579: PUSH
 580: LD_INT 97
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 114
 589: PUSH
 590: LD_INT 98
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 602: LD_ADDR_EXP 51
 606: PUSH
 607: LD_INT 10
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// labCratesRefund = 20 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 20
 632: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 40
 640: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 20
 648: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 649: LD_ADDR_EXP 57
 653: PUSH
 654: LD_INT 30
 656: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 657: LD_ADDR_EXP 58
 661: PUSH
 662: LD_INT 10
 664: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 , 3 ] [ Difficulty ] ;
 665: LD_ADDR_EXP 59
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 3
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: LD_OWVAR 67
 692: ARRAY
 693: ST_TO_ADDR
// trapAmountPeople = [ [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] ] [ Difficulty ] ;
 694: LD_ADDR_EXP 60
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: LD_INT 1
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 3
 719: PUSH
 720: LD_INT 2
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 1
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: PUSH
 753: LD_INT 3
 755: PUSH
 756: LD_INT 2
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: PUSH
 777: LD_OWVAR 67
 781: ARRAY
 782: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 , 5 5$0 ] [ Difficulty ] ;
 783: LD_ADDR_EXP 61
 787: PUSH
 788: LD_INT 21000
 790: PUSH
 791: LD_INT 16800
 793: PUSH
 794: LD_INT 12600
 796: PUSH
 797: LD_INT 10500
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: PUSH
 806: LD_OWVAR 67
 810: ARRAY
 811: ST_TO_ADDR
// end ;
 812: LD_VAR 0 1
 816: RET
// every 0 0$1 trigger debugMode do var i ;
 817: LD_EXP 50
 821: IFFALSE 1136
 823: GO 825
 825: DISABLE
 826: LD_INT 0
 828: PPUSH
// begin enable ;
 829: ENABLE
// FogOff ( your_side ) ;
 830: LD_OWVAR 2
 834: PPUSH
 835: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 839: LD_ADDR_VAR 0 1
 843: PUSH
 844: LD_INT 22
 846: PUSH
 847: LD_OWVAR 2
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 2
 858: PUSH
 859: LD_INT 21
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: LD_INT 21
 871: PUSH
 872: LD_INT 2
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PPUSH
 888: CALL_OW 69
 892: PUSH
 893: FOR_IN
 894: IFFALSE 910
// SetLives ( i , 1000 ) ;
 896: LD_VAR 0 1
 900: PPUSH
 901: LD_INT 1000
 903: PPUSH
 904: CALL_OW 234
 908: GO 893
 910: POP
 911: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 912: LD_ADDR_VAR 0 1
 916: PUSH
 917: LD_INT 22
 919: PUSH
 920: LD_OWVAR 2
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 21
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PPUSH
 943: CALL_OW 69
 947: PUSH
 948: FOR_IN
 949: IFFALSE 1013
// begin SetSkill ( i , skill_combat , 10 ) ;
 951: LD_VAR 0 1
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: LD_INT 10
 961: PPUSH
 962: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 966: LD_VAR 0 1
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 10
 976: PPUSH
 977: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 981: LD_VAR 0 1
 985: PPUSH
 986: LD_INT 3
 988: PPUSH
 989: LD_INT 10
 991: PPUSH
 992: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 996: LD_VAR 0 1
1000: PPUSH
1001: LD_INT 4
1003: PPUSH
1004: LD_INT 10
1006: PPUSH
1007: CALL_OW 237
// end ;
1011: GO 948
1013: POP
1014: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1015: LD_ADDR_VAR 0 1
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_OWVAR 2
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 2
1034: PUSH
1035: LD_INT 30
1037: PUSH
1038: LD_INT 0
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 30
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PPUSH
1064: CALL_OW 69
1068: PUSH
1069: FOR_IN
1070: IFFALSE 1134
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1072: LD_VAR 0 1
1076: PPUSH
1077: CALL_OW 274
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_INT 9999
1087: PPUSH
1088: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1092: LD_VAR 0 1
1096: PPUSH
1097: CALL_OW 274
1101: PPUSH
1102: LD_INT 2
1104: PPUSH
1105: LD_INT 9999
1107: PPUSH
1108: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1112: LD_VAR 0 1
1116: PPUSH
1117: CALL_OW 274
1121: PPUSH
1122: LD_INT 3
1124: PPUSH
1125: LD_INT 9999
1127: PPUSH
1128: CALL_OW 277
// end ;
1132: GO 1069
1134: POP
1135: POP
// end ; end_of_file
1136: PPOPN 1
1138: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1139: LD_INT 0
1141: PPUSH
// PrepareCharactersFromPreviousMission ;
1142: CALL 1561 0 0
// PrepareKirovBase ;
1146: CALL 1756 0 0
// PrepareBeriaBase ;
1150: CALL 2521 0 0
// end ;
1154: LD_VAR 0 1
1158: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1159: LD_INT 0
1161: PPUSH
1162: PPUSH
1163: PPUSH
1164: PPUSH
// belkovTeam = [ ] ;
1165: LD_ADDR_EXP 73
1169: PUSH
1170: EMPTY
1171: ST_TO_ADDR
// uc_side = 6 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 6
1179: ST_TO_ADDR
// uc_nation = nation_russian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1188: LD_ADDR_OWVAR 37
1192: PUSH
1193: LD_EXP 75
1197: PUSH
1198: LD_INT 1
1200: ARRAY
1201: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1202: LD_ADDR_OWVAR 39
1206: PUSH
1207: LD_EXP 75
1211: PUSH
1212: LD_INT 2
1214: ARRAY
1215: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1216: LD_ADDR_OWVAR 38
1220: PUSH
1221: LD_EXP 75
1225: PUSH
1226: LD_INT 3
1228: ARRAY
1229: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1230: LD_ADDR_OWVAR 40
1234: PUSH
1235: LD_EXP 75
1239: PUSH
1240: LD_INT 4
1242: ARRAY
1243: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1244: LD_ADDR_OWVAR 41
1248: PUSH
1249: LD_EXP 75
1253: PUSH
1254: LD_INT 5
1256: ARRAY
1257: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1258: LD_ADDR_EXP 72
1262: PUSH
1263: CALL_OW 45
1267: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1268: LD_EXP 72
1272: PPUSH
1273: LD_INT 3
1275: PPUSH
1276: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1280: LD_EXP 72
1284: PPUSH
1285: LD_INT 11
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1295: LD_ADDR_EXP 73
1299: PUSH
1300: LD_EXP 73
1304: PUSH
1305: LD_EXP 72
1309: ADD
1310: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1311: LD_STRING 02_TmpBelkov
1313: PPUSH
1314: CALL_OW 28
1318: IFFALSE 1363
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1320: LD_ADDR_EXP 64
1324: PUSH
1325: LD_STRING 02_TmpBelkov
1327: PPUSH
1328: CALL_OW 34
1332: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1333: LD_EXP 64
1337: PPUSH
1338: LD_EXP 72
1342: PPUSH
1343: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1347: LD_ADDR_EXP 73
1351: PUSH
1352: LD_EXP 73
1356: PUSH
1357: LD_EXP 64
1361: ADD
1362: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpBelkov2 ) then
1363: LD_STRING 02_TmpBelkov2
1365: PPUSH
1366: CALL_OW 28
1370: IFFALSE 1442
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1372: LD_ADDR_EXP 68
1376: PUSH
1377: LD_STRING 02_TmpBelkov2
1379: PPUSH
1380: CALL_OW 34
1384: ST_TO_ADDR
// if not TestCharacters ( 02_TmpBelkov ) then
1385: LD_STRING 02_TmpBelkov
1387: PPUSH
1388: CALL_OW 28
1392: NOT
1393: IFFALSE 1411
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) else
1395: LD_EXP 68
1399: PPUSH
1400: LD_EXP 72
1404: PPUSH
1405: CALL_OW 52
1409: GO 1426
// PlaceUnitArea ( Belkov2 , BelkovReturnArea , false ) ;
1411: LD_EXP 68
1415: PPUSH
1416: LD_INT 11
1418: PPUSH
1419: LD_INT 0
1421: PPUSH
1422: CALL_OW 49
// belkovTeam = belkovTeam ^ Belkov2 ;
1426: LD_ADDR_EXP 73
1430: PUSH
1431: LD_EXP 73
1435: PUSH
1436: LD_EXP 68
1440: ADD
1441: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1442: LD_STRING 02_TmpKirilenkova
1444: PPUSH
1445: CALL_OW 28
1449: IFFALSE 1495
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1451: LD_ADDR_EXP 65
1455: PUSH
1456: LD_STRING 02_TmpKirilenkova
1458: PPUSH
1459: CALL_OW 34
1463: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1464: LD_EXP 65
1468: PPUSH
1469: LD_INT 11
1471: PPUSH
1472: LD_INT 0
1474: PPUSH
1475: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1479: LD_ADDR_EXP 73
1483: PUSH
1484: LD_EXP 73
1488: PUSH
1489: LD_EXP 65
1493: ADD
1494: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1495: LD_ADDR_VAR 0 3
1499: PUSH
1500: LD_STRING 02_TmpBelkovTeam
1502: PPUSH
1503: CALL_OW 31
1507: ST_TO_ADDR
// for unit in others do
1508: LD_ADDR_VAR 0 2
1512: PUSH
1513: LD_VAR 0 3
1517: PUSH
1518: FOR_IN
1519: IFFALSE 1554
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1521: LD_VAR 0 2
1525: PPUSH
1526: LD_INT 11
1528: PPUSH
1529: LD_INT 0
1531: PPUSH
1532: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1536: LD_ADDR_EXP 73
1540: PUSH
1541: LD_EXP 73
1545: PUSH
1546: LD_VAR 0 2
1550: ADD
1551: ST_TO_ADDR
// end ;
1552: GO 1518
1554: POP
1555: POP
// end ;
1556: LD_VAR 0 1
1560: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1561: LD_INT 0
1563: PPUSH
1564: PPUSH
// uc_side = 3 ;
1565: LD_ADDR_OWVAR 20
1569: PUSH
1570: LD_INT 3
1572: ST_TO_ADDR
// Burlak = PrepareUnitEx ( Burlak , true ) ;
1573: LD_ADDR_EXP 62
1577: PUSH
1578: LD_STRING Burlak
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: CALL 4146 0 2
1588: ST_TO_ADDR
// Gnyevko = PrepareUnitEx ( Gnyevko , true ) ;
1589: LD_ADDR_EXP 63
1593: PUSH
1594: LD_STRING Gnyevko
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: CALL 4146 0 2
1604: ST_TO_ADDR
// Belkov = PrepareUnitEx ( Belkov , true ) ;
1605: LD_ADDR_EXP 64
1609: PUSH
1610: LD_STRING Belkov
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL 4146 0 2
1620: ST_TO_ADDR
// Kirilenkova = PrepareUnitEx ( Kirilenkova , true ) ;
1621: LD_ADDR_EXP 65
1625: PUSH
1626: LD_STRING Kirilenkova
1628: PPUSH
1629: LD_INT 1
1631: PPUSH
1632: CALL 4146 0 2
1636: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1637: LD_EXP 62
1641: PPUSH
1642: LD_INT 5
1644: PPUSH
1645: LD_INT 0
1647: PPUSH
1648: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1652: LD_EXP 63
1656: PPUSH
1657: LD_INT 3
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1667: LD_EXP 64
1671: PPUSH
1672: LD_INT 3
1674: PPUSH
1675: LD_INT 0
1677: PPUSH
1678: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1682: LD_EXP 65
1686: PPUSH
1687: LD_INT 3
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1697: LD_EXP 62
1701: PPUSH
1702: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1706: LD_ADDR_EXP 66
1710: PUSH
1711: LD_STRING 01_other_survivors
1713: PPUSH
1714: CALL_OW 31
1718: ST_TO_ADDR
// for i in other_survivors do
1719: LD_ADDR_VAR 0 2
1723: PUSH
1724: LD_EXP 66
1728: PUSH
1729: FOR_IN
1730: IFFALSE 1749
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1732: LD_VAR 0 2
1736: PPUSH
1737: LD_INT 3
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
1747: GO 1729
1749: POP
1750: POP
// end ;
1751: LD_VAR 0 1
1755: RET
// function PrepareKirovBase ; var i , un ; begin
1756: LD_INT 0
1758: PPUSH
1759: PPUSH
1760: PPUSH
// SetBName ( kirov , kirov ) ;
1761: LD_INT 71
1763: PPUSH
1764: LD_STRING kirov
1766: PPUSH
1767: CALL_OW 500
// uc_side = 6 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 6
1778: ST_TO_ADDR
// uc_nation = 3 ;
1779: LD_ADDR_OWVAR 21
1783: PUSH
1784: LD_INT 3
1786: ST_TO_ADDR
// hc_gallery =  ;
1787: LD_ADDR_OWVAR 33
1791: PUSH
1792: LD_STRING 
1794: ST_TO_ADDR
// hc_name =  ;
1795: LD_ADDR_OWVAR 26
1799: PUSH
1800: LD_STRING 
1802: ST_TO_ADDR
// Kurin = PrepareUnitEx ( Kurin , false ) ;
1803: LD_ADDR_EXP 67
1807: PUSH
1808: LD_STRING Kurin
1810: PPUSH
1811: LD_INT 0
1813: PPUSH
1814: CALL 4146 0 2
1818: ST_TO_ADDR
// Kovalyuk = PrepareUnitEx ( Kovalyuk , false ) ;
1819: LD_ADDR_EXP 70
1823: PUSH
1824: LD_STRING Kovalyuk
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: CALL 4146 0 2
1834: ST_TO_ADDR
// Belkov2 = PrepareUnitEx ( Belkov2 , false ) ;
1835: LD_ADDR_EXP 68
1839: PUSH
1840: LD_STRING Belkov2
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL 4146 0 2
1850: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1851: LD_EXP 67
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1866: LD_EXP 70
1870: PPUSH
1871: LD_INT 161
1873: PPUSH
1874: LD_INT 108
1876: PPUSH
1877: LD_INT 6
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 50
// ComHold ( Kurin ) ;
1887: LD_EXP 67
1891: PPUSH
1892: CALL_OW 140
// otherKirovUnits = [ ] ;
1896: LD_ADDR_EXP 69
1900: PUSH
1901: EMPTY
1902: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1903: LD_ADDR_EXP 51
1907: PUSH
1908: LD_EXP 51
1912: PPUSH
1913: LD_INT 1
1915: PPUSH
1916: LD_EXP 51
1920: PUSH
1921: LD_INT 1
1923: ARRAY
1924: PUSH
1925: LD_EXP 66
1929: PPUSH
1930: LD_INT 25
1932: PUSH
1933: LD_INT 1
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: PPUSH
1940: CALL_OW 72
1944: MINUS
1945: PPUSH
1946: CALL_OW 1
1950: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1951: LD_ADDR_VAR 0 2
1955: PUSH
1956: DOUBLE
1957: LD_INT 1
1959: DEC
1960: ST_TO_ADDR
1961: LD_EXP 51
1965: PUSH
1966: LD_INT 1
1968: ARRAY
1969: PUSH
1970: FOR_TO
1971: IFFALSE 2150
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1973: LD_INT 0
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: LD_INT 3
1984: PPUSH
1985: CALL_OW 12
1989: PPUSH
1990: CALL_OW 380
// un = CreateHuman ;
1994: LD_ADDR_VAR 0 3
1998: PUSH
1999: CALL_OW 44
2003: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2004: LD_ADDR_EXP 69
2008: PUSH
2009: LD_EXP 69
2013: PUSH
2014: LD_VAR 0 3
2018: ADD
2019: ST_TO_ADDR
// if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
2020: LD_INT 9
2022: PPUSH
2023: LD_INT 22
2025: PUSH
2026: LD_INT 6
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 21
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 30
2045: PUSH
2046: LD_INT 31
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PPUSH
2065: CALL_OW 70
2069: IFFALSE 2136
// PlaceSolBun ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
2071: LD_VAR 0 3
2075: PPUSH
2076: LD_INT 9
2078: PPUSH
2079: LD_INT 22
2081: PUSH
2082: LD_INT 6
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 21
2091: PUSH
2092: LD_INT 3
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 30
2101: PUSH
2102: LD_INT 31
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 58
2111: PUSH
2112: EMPTY
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 70
2125: PUSH
2126: LD_INT 1
2128: ARRAY
2129: PPUSH
2130: CALL 5385 0 2
2134: GO 2148
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2136: LD_VAR 0 3
2140: PPUSH
2141: LD_INT 209
2143: PPUSH
2144: CALL_OW 52
// end ;
2148: GO 1970
2150: POP
2151: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2152: LD_INT 0
2154: PPUSH
2155: LD_INT 1
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 3
2163: PPUSH
2164: CALL_OW 12
2168: PPUSH
2169: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2173: CALL_OW 44
2177: PPUSH
2178: LD_INT 209
2180: PPUSH
2181: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2185: LD_ADDR_VAR 0 2
2189: PUSH
2190: DOUBLE
2191: LD_INT 1
2193: DEC
2194: ST_TO_ADDR
2195: LD_EXP 51
2199: PUSH
2200: LD_INT 2
2202: ARRAY
2203: PUSH
2204: FOR_TO
2205: IFFALSE 2268
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2207: LD_INT 0
2209: PPUSH
2210: LD_INT 2
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: LD_INT 3
2218: PPUSH
2219: CALL_OW 12
2223: PPUSH
2224: CALL_OW 380
// un = CreateHuman ;
2228: LD_ADDR_VAR 0 3
2232: PUSH
2233: CALL_OW 44
2237: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2238: LD_ADDR_EXP 69
2242: PUSH
2243: LD_EXP 69
2247: PUSH
2248: LD_VAR 0 3
2252: ADD
2253: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2254: LD_VAR 0 3
2258: PPUSH
2259: LD_INT 71
2261: PPUSH
2262: CALL_OW 52
// end ;
2266: GO 2204
2268: POP
2269: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2270: LD_ADDR_VAR 0 2
2274: PUSH
2275: DOUBLE
2276: LD_INT 1
2278: DEC
2279: ST_TO_ADDR
2280: LD_EXP 51
2284: PUSH
2285: LD_INT 3
2287: ARRAY
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2353
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2292: LD_INT 0
2294: PPUSH
2295: LD_INT 3
2297: PPUSH
2298: LD_INT 1
2300: PPUSH
2301: LD_INT 3
2303: PPUSH
2304: CALL_OW 12
2308: PPUSH
2309: CALL_OW 380
// un = CreateHuman ;
2313: LD_ADDR_VAR 0 3
2317: PUSH
2318: CALL_OW 44
2322: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2323: LD_ADDR_EXP 69
2327: PUSH
2328: LD_EXP 69
2332: PUSH
2333: LD_VAR 0 3
2337: ADD
2338: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2339: LD_VAR 0 3
2343: PPUSH
2344: LD_INT 71
2346: PPUSH
2347: CALL_OW 52
// end ;
2351: GO 2289
2353: POP
2354: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: DOUBLE
2361: LD_INT 1
2363: DEC
2364: ST_TO_ADDR
2365: LD_EXP 51
2369: PUSH
2370: LD_INT 4
2372: ARRAY
2373: PUSH
2374: FOR_TO
2375: IFFALSE 2438
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2377: LD_INT 0
2379: PPUSH
2380: LD_INT 4
2382: PPUSH
2383: LD_INT 1
2385: PPUSH
2386: LD_INT 3
2388: PPUSH
2389: CALL_OW 12
2393: PPUSH
2394: CALL_OW 380
// un = CreateHuman ;
2398: LD_ADDR_VAR 0 3
2402: PUSH
2403: CALL_OW 44
2407: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2408: LD_ADDR_EXP 69
2412: PUSH
2413: LD_EXP 69
2417: PUSH
2418: LD_VAR 0 3
2422: ADD
2423: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2424: LD_VAR 0 3
2428: PPUSH
2429: LD_INT 83
2431: PPUSH
2432: CALL_OW 52
// end ;
2436: GO 2374
2438: POP
2439: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2440: LD_INT 6
2442: PPUSH
2443: LD_INT 83
2445: PPUSH
2446: LD_INT 3
2448: PPUSH
2449: CALL 4998 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2453: LD_STRING 01_Gnyevko
2455: PPUSH
2456: CALL_OW 28
2460: NOT
2461: IFFALSE 2504
// begin PrepareMechanic ( sex_male , 3 ) ;
2463: LD_INT 1
2465: PPUSH
2466: LD_INT 3
2468: PPUSH
2469: CALL_OW 383
// randomMech = CreateHuman ;
2473: LD_ADDR_EXP 71
2477: PUSH
2478: CALL_OW 44
2482: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2483: LD_EXP 71
2487: PPUSH
2488: LD_INT 161
2490: PPUSH
2491: LD_INT 108
2493: PPUSH
2494: LD_INT 6
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 50
// end ; PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2504: LD_EXP 68
2508: PPUSH
2509: LD_INT 95
2511: PPUSH
2512: CALL_OW 52
// end ;
2516: LD_VAR 0 1
2520: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2521: LD_INT 0
2523: PPUSH
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
// SetBName ( beria , beria ) ;
2528: LD_INT 106
2530: PPUSH
2531: LD_STRING beria
2533: PPUSH
2534: CALL_OW 500
// uc_side = 6 ;
2538: LD_ADDR_OWVAR 20
2542: PUSH
2543: LD_INT 6
2545: ST_TO_ADDR
// uc_nation = 3 ;
2546: LD_ADDR_OWVAR 21
2550: PUSH
2551: LD_INT 3
2553: ST_TO_ADDR
// Platonov = PrepareUnitEx ( Platonov , false ) ;
2554: LD_ADDR_EXP 76
2558: PUSH
2559: LD_STRING Platonov
2561: PPUSH
2562: LD_INT 0
2564: PPUSH
2565: CALL 4146 0 2
2569: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2570: LD_EXP 76
2574: PPUSH
2575: LD_INT 112
2577: PPUSH
2578: LD_INT 97
2580: PPUSH
2581: LD_INT 0
2583: PPUSH
2584: CALL_OW 48
// ComHold ( Platonov ) ;
2588: LD_EXP 76
2592: PPUSH
2593: CALL_OW 140
// platSoldiers = [ ] ;
2597: LD_ADDR_EXP 77
2601: PUSH
2602: EMPTY
2603: ST_TO_ADDR
// unitsTemp = [ ] ;
2604: LD_ADDR_VAR 0 4
2608: PUSH
2609: EMPTY
2610: ST_TO_ADDR
// Kuklajs = PrepareUnitEx ( Kuklajs , false ) ;
2611: LD_ADDR_EXP 78
2615: PUSH
2616: LD_STRING Kuklajs
2618: PPUSH
2619: LD_INT 0
2621: PPUSH
2622: CALL 4146 0 2
2626: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2627: LD_ADDR_EXP 77
2631: PUSH
2632: LD_EXP 77
2636: PUSH
2637: LD_EXP 78
2641: ADD
2642: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2643: LD_EXP 78
2647: PPUSH
2648: LD_INT 110
2650: PPUSH
2651: LD_INT 97
2653: PPUSH
2654: LD_INT 6
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 50
// Benko = PrepareUnitEx ( Benko , false ) ;
2664: LD_ADDR_EXP 79
2668: PUSH
2669: LD_STRING Benko
2671: PPUSH
2672: LD_INT 0
2674: PPUSH
2675: CALL 4146 0 2
2679: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2680: LD_ADDR_EXP 77
2684: PUSH
2685: LD_EXP 77
2689: PUSH
2690: LD_EXP 79
2694: ADD
2695: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2696: LD_ADDR_VAR 0 4
2700: PUSH
2701: LD_VAR 0 4
2705: PUSH
2706: LD_EXP 79
2710: ADD
2711: ST_TO_ADDR
// for i := 1 to 2 do
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: DOUBLE
2718: LD_INT 1
2720: DEC
2721: ST_TO_ADDR
2722: LD_INT 2
2724: PUSH
2725: FOR_TO
2726: IFFALSE 2793
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_INT 3
2739: PPUSH
2740: CALL_OW 12
2744: PPUSH
2745: CALL_OW 380
// un = CreateHuman ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: CALL_OW 44
2758: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2759: LD_ADDR_EXP 77
2763: PUSH
2764: LD_EXP 77
2768: PUSH
2769: LD_VAR 0 3
2773: ADD
2774: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2775: LD_ADDR_VAR 0 4
2779: PUSH
2780: LD_VAR 0 4
2784: PUSH
2785: LD_VAR 0 3
2789: ADD
2790: ST_TO_ADDR
// end ;
2791: GO 2725
2793: POP
2794: POP
// for i := 1 to unitsTemp do
2795: LD_ADDR_VAR 0 2
2799: PUSH
2800: DOUBLE
2801: LD_INT 1
2803: DEC
2804: ST_TO_ADDR
2805: LD_VAR 0 4
2809: PUSH
2810: FOR_TO
2811: IFFALSE 2899
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_INT 8
2820: PPUSH
2821: LD_INT 22
2823: PUSH
2824: LD_INT 6
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PUSH
2831: LD_INT 30
2833: PUSH
2834: LD_INT 31
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 70
2849: PUSH
2850: LD_VAR 0 2
2854: ARRAY
2855: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2856: LD_VAR 0 4
2860: PUSH
2861: LD_VAR 0 2
2865: ARRAY
2866: PPUSH
2867: LD_VAR 0 5
2871: PPUSH
2872: CALL_OW 250
2876: PPUSH
2877: LD_VAR 0 5
2881: PPUSH
2882: CALL_OW 251
2886: PPUSH
2887: LD_INT 2
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: CALL_OW 50
// end ;
2897: GO 2810
2899: POP
2900: POP
// end ; end_of_file
2901: LD_VAR 0 1
2905: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export amVeh , amMech ; export function PrepareAmerican ; begin
2906: LD_INT 0
2908: PPUSH
// PrepareBunkiers ;
2909: CALL 3512 0 0
// PrepareTrap ;
2913: CALL 2922 0 0
// end ;
2917: LD_VAR 0 1
2921: RET
// function PrepareTrap ; var i , un ; begin
2922: LD_INT 0
2924: PPUSH
2925: PPUSH
2926: PPUSH
// trapTeam = [ ] ;
2927: LD_ADDR_EXP 81
2931: PUSH
2932: EMPTY
2933: ST_TO_ADDR
// uc_nation = 1 ;
2934: LD_ADDR_OWVAR 21
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// uc_side = 1 ;
2942: LD_ADDR_OWVAR 20
2946: PUSH
2947: LD_INT 1
2949: ST_TO_ADDR
// hc_gallery =  ;
2950: LD_ADDR_OWVAR 33
2954: PUSH
2955: LD_STRING 
2957: ST_TO_ADDR
// hc_name =  ;
2958: LD_ADDR_OWVAR 26
2962: PUSH
2963: LD_STRING 
2965: ST_TO_ADDR
// hc_importance = 100 ;
2966: LD_ADDR_OWVAR 32
2970: PUSH
2971: LD_INT 100
2973: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2974: LD_INT 1
2976: PPUSH
2977: LD_INT 1
2979: PPUSH
2980: LD_EXP 59
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: PPUSH
2989: CALL_OW 380
// trapCommander = CreateHuman ;
2993: LD_ADDR_EXP 80
2997: PUSH
2998: CALL_OW 44
3002: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
3003: LD_EXP 80
3007: PPUSH
3008: LD_INT 13
3010: PPUSH
3011: LD_INT 0
3013: PPUSH
3014: CALL_OW 49
// ComCrawl ( trapCommander ) ;
3018: LD_EXP 80
3022: PPUSH
3023: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
3027: LD_ADDR_EXP 81
3031: PUSH
3032: LD_EXP 81
3036: PUSH
3037: LD_EXP 80
3041: ADD
3042: ST_TO_ADDR
// hc_importance = 0 ;
3043: LD_ADDR_OWVAR 32
3047: PUSH
3048: LD_INT 0
3050: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: DOUBLE
3057: LD_INT 1
3059: DEC
3060: ST_TO_ADDR
3061: LD_EXP 60
3065: PUSH
3066: LD_INT 1
3068: ARRAY
3069: PUSH
3070: FOR_TO
3071: IFFALSE 3163
// begin hc_name =  ;
3073: LD_ADDR_OWVAR 26
3077: PUSH
3078: LD_STRING 
3080: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3081: LD_INT 0
3083: PPUSH
3084: LD_INT 1
3086: PPUSH
3087: LD_EXP 59
3091: PPUSH
3092: CALL_OW 380
// un = CreateHuman ;
3096: LD_ADDR_VAR 0 3
3100: PUSH
3101: CALL_OW 44
3105: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_INT 12
3113: PPUSH
3114: LD_INT 0
3116: PPUSH
3117: CALL_OW 49
// ComCrawl ( un ) ;
3121: LD_VAR 0 3
3125: PPUSH
3126: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3130: LD_VAR 0 3
3134: PPUSH
3135: LD_INT 116
3137: PPUSH
3138: LD_INT 21
3140: PPUSH
3141: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3145: LD_ADDR_EXP 81
3149: PUSH
3150: LD_EXP 81
3154: PUSH
3155: LD_VAR 0 3
3159: ADD
3160: ST_TO_ADDR
// end ;
3161: GO 3070
3163: POP
3164: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3165: LD_ADDR_VAR 0 2
3169: PUSH
3170: DOUBLE
3171: LD_INT 1
3173: DEC
3174: ST_TO_ADDR
3175: LD_EXP 60
3179: PUSH
3180: LD_INT 2
3182: ARRAY
3183: PUSH
3184: FOR_TO
3185: IFFALSE 3277
// begin hc_name =  ;
3187: LD_ADDR_OWVAR 26
3191: PUSH
3192: LD_STRING 
3194: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3195: LD_INT 0
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: LD_EXP 59
3205: PPUSH
3206: CALL_OW 380
// un = CreateHuman ;
3210: LD_ADDR_VAR 0 3
3214: PUSH
3215: CALL_OW 44
3219: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3220: LD_VAR 0 3
3224: PPUSH
3225: LD_INT 14
3227: PPUSH
3228: LD_INT 0
3230: PPUSH
3231: CALL_OW 49
// ComCrawl ( un ) ;
3235: LD_VAR 0 3
3239: PPUSH
3240: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3244: LD_VAR 0 3
3248: PPUSH
3249: LD_INT 116
3251: PPUSH
3252: LD_INT 21
3254: PPUSH
3255: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3259: LD_ADDR_EXP 81
3263: PUSH
3264: LD_EXP 81
3268: PUSH
3269: LD_VAR 0 3
3273: ADD
3274: ST_TO_ADDR
// end ;
3275: GO 3184
3277: POP
3278: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3279: LD_ADDR_VAR 0 2
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_EXP 60
3293: PUSH
3294: LD_INT 3
3296: ARRAY
3297: PUSH
3298: FOR_TO
3299: IFFALSE 3391
// begin hc_name =  ;
3301: LD_ADDR_OWVAR 26
3305: PUSH
3306: LD_STRING 
3308: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3309: LD_INT 0
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_EXP 59
3319: PPUSH
3320: CALL_OW 380
// un = CreateHuman ;
3324: LD_ADDR_VAR 0 3
3328: PUSH
3329: CALL_OW 44
3333: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3334: LD_VAR 0 3
3338: PPUSH
3339: LD_INT 23
3341: PPUSH
3342: LD_INT 0
3344: PPUSH
3345: CALL_OW 49
// ComCrawl ( un ) ;
3349: LD_VAR 0 3
3353: PPUSH
3354: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3358: LD_VAR 0 3
3362: PPUSH
3363: LD_INT 109
3365: PPUSH
3366: LD_INT 8
3368: PPUSH
3369: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3373: LD_ADDR_EXP 81
3377: PUSH
3378: LD_EXP 81
3382: PUSH
3383: LD_VAR 0 3
3387: ADD
3388: ST_TO_ADDR
// end ;
3389: GO 3298
3391: POP
3392: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3393: LD_ADDR_VAR 0 2
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_EXP 60
3407: PUSH
3408: LD_INT 4
3410: ARRAY
3411: PUSH
3412: FOR_TO
3413: IFFALSE 3505
// begin hc_name =  ;
3415: LD_ADDR_OWVAR 26
3419: PUSH
3420: LD_STRING 
3422: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3423: LD_INT 0
3425: PPUSH
3426: LD_INT 1
3428: PPUSH
3429: LD_EXP 59
3433: PPUSH
3434: CALL_OW 380
// un = CreateHuman ;
3438: LD_ADDR_VAR 0 3
3442: PUSH
3443: CALL_OW 44
3447: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3448: LD_VAR 0 3
3452: PPUSH
3453: LD_INT 24
3455: PPUSH
3456: LD_INT 0
3458: PPUSH
3459: CALL_OW 49
// ComCrawl ( un ) ;
3463: LD_VAR 0 3
3467: PPUSH
3468: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3472: LD_VAR 0 3
3476: PPUSH
3477: LD_INT 109
3479: PPUSH
3480: LD_INT 8
3482: PPUSH
3483: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3487: LD_ADDR_EXP 81
3491: PUSH
3492: LD_EXP 81
3496: PUSH
3497: LD_VAR 0 3
3501: ADD
3502: ST_TO_ADDR
// end ;
3503: GO 3412
3505: POP
3506: POP
// end ;
3507: LD_VAR 0 1
3511: RET
// function PrepareBunkiers ; var i , un , bunker , animal ; begin
3512: LD_INT 0
3514: PPUSH
3515: PPUSH
3516: PPUSH
3517: PPUSH
3518: PPUSH
// for animal in FilterUnitsInArea ( LeftHillArea , [ [ f_side , 0 ] ] ) do
3519: LD_ADDR_VAR 0 5
3523: PUSH
3524: LD_INT 17
3526: PPUSH
3527: LD_INT 22
3529: PUSH
3530: LD_INT 0
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: EMPTY
3538: LIST
3539: PPUSH
3540: CALL_OW 70
3544: PUSH
3545: FOR_IN
3546: IFFALSE 3559
// RemoveUnit ( animal ) ;
3548: LD_VAR 0 5
3552: PPUSH
3553: CALL_OW 64
3557: GO 3545
3559: POP
3560: POP
// uc_side = 1 ;
3561: LD_ADDR_OWVAR 20
3565: PUSH
3566: LD_INT 1
3568: ST_TO_ADDR
// uc_nation = nation_american ;
3569: LD_ADDR_OWVAR 21
3573: PUSH
3574: LD_INT 1
3576: ST_TO_ADDR
// bc_level = 1 ;
3577: LD_ADDR_OWVAR 43
3581: PUSH
3582: LD_INT 1
3584: ST_TO_ADDR
// bc_type = b_breastwork ;
3585: LD_ADDR_OWVAR 42
3589: PUSH
3590: LD_INT 31
3592: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3593: LD_ADDR_VAR 0 4
3597: PUSH
3598: LD_INT 104
3600: PPUSH
3601: LD_INT 59
3603: PPUSH
3604: LD_INT 4
3606: PPUSH
3607: CALL_OW 47
3611: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3612: LD_ADDR_EXP 82
3616: PUSH
3617: LD_EXP 82
3621: PUSH
3622: LD_VAR 0 4
3626: ADD
3627: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3628: LD_EXP 59
3632: PPUSH
3633: LD_VAR 0 4
3637: PPUSH
3638: CALL 5239 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3642: LD_ADDR_VAR 0 4
3646: PUSH
3647: LD_INT 101
3649: PPUSH
3650: LD_INT 55
3652: PPUSH
3653: LD_INT 4
3655: PPUSH
3656: CALL_OW 47
3660: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3661: LD_ADDR_EXP 82
3665: PUSH
3666: LD_EXP 82
3670: PUSH
3671: LD_VAR 0 4
3675: ADD
3676: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3677: LD_EXP 59
3681: PPUSH
3682: LD_VAR 0 4
3686: PPUSH
3687: CALL 5239 0 2
// for animal in FilterUnitsInArea ( RightHillArea , [ [ f_side , 0 ] ] ) do
3691: LD_ADDR_VAR 0 5
3695: PUSH
3696: LD_INT 16
3698: PPUSH
3699: LD_INT 22
3701: PUSH
3702: LD_INT 0
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: EMPTY
3710: LIST
3711: PPUSH
3712: CALL_OW 70
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3731
// RemoveUnit ( animal ) ;
3720: LD_VAR 0 5
3724: PPUSH
3725: CALL_OW 64
3729: GO 3717
3731: POP
3732: POP
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3733: LD_ADDR_VAR 0 4
3737: PUSH
3738: LD_INT 132
3740: PPUSH
3741: LD_INT 62
3743: PPUSH
3744: LD_INT 1
3746: PPUSH
3747: CALL_OW 47
3751: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3752: LD_ADDR_EXP 83
3756: PUSH
3757: LD_EXP 83
3761: PUSH
3762: LD_VAR 0 4
3766: ADD
3767: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3768: LD_EXP 59
3772: PPUSH
3773: LD_VAR 0 4
3777: PPUSH
3778: CALL 5239 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3782: LD_ADDR_VAR 0 4
3786: PUSH
3787: LD_INT 134
3789: PPUSH
3790: LD_INT 66
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: CALL_OW 47
3800: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3801: LD_ADDR_EXP 83
3805: PUSH
3806: LD_EXP 83
3810: PUSH
3811: LD_VAR 0 4
3815: ADD
3816: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3817: LD_EXP 59
3821: PPUSH
3822: LD_VAR 0 4
3826: PPUSH
3827: CALL 5239 0 2
// bc_type = b_depot ;
3831: LD_ADDR_OWVAR 42
3835: PUSH
3836: LD_INT 0
3838: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3839: LD_ADDR_EXP 84
3843: PUSH
3844: LD_INT 92
3846: PPUSH
3847: LD_INT 51
3849: PPUSH
3850: LD_INT 2
3852: PPUSH
3853: CALL_OW 47
3857: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3858: LD_ADDR_EXP 85
3862: PUSH
3863: LD_INT 193
3865: ST_TO_ADDR
// amLeftEngs = [ ] ;
3866: LD_ADDR_EXP 86
3870: PUSH
3871: EMPTY
3872: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) , 2 ] [ Difficulty ] do
3873: LD_ADDR_VAR 0 2
3877: PUSH
3878: DOUBLE
3879: LD_INT 1
3881: DEC
3882: ST_TO_ADDR
3883: LD_INT 1
3885: PUSH
3886: LD_INT 1
3888: PUSH
3889: LD_INT 1
3891: PPUSH
3892: LD_INT 2
3894: PPUSH
3895: CALL_OW 12
3899: PUSH
3900: LD_INT 2
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: PUSH
3909: LD_OWVAR 67
3913: ARRAY
3914: PUSH
3915: FOR_TO
3916: IFFALSE 4007
// begin uc_nation = 1 ;
3918: LD_ADDR_OWVAR 21
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// uc_side = 1 ;
3926: LD_ADDR_OWVAR 20
3930: PUSH
3931: LD_INT 1
3933: ST_TO_ADDR
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 2
3955: PPUSH
3956: LD_EXP 59
3960: PPUSH
3961: CALL_OW 380
// un = CreateHuman ;
3965: LD_ADDR_VAR 0 3
3969: PUSH
3970: CALL_OW 44
3974: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3975: LD_ADDR_EXP 86
3979: PUSH
3980: LD_EXP 86
3984: PUSH
3985: LD_VAR 0 3
3989: ADD
3990: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3991: LD_VAR 0 3
3995: PPUSH
3996: LD_EXP 84
4000: PPUSH
4001: CALL_OW 52
// end ;
4005: GO 3915
4007: POP
4008: POP
// if Difficulty >= 3 then
4009: LD_OWVAR 67
4013: PUSH
4014: LD_INT 3
4016: GREATEREQUAL
4017: IFFALSE 4141
// begin amRightEngs = [ ] ;
4019: LD_ADDR_EXP 87
4023: PUSH
4024: EMPTY
4025: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: DOUBLE
4032: LD_INT 1
4034: DEC
4035: ST_TO_ADDR
4036: LD_INT 1
4038: PPUSH
4039: LD_INT 2
4041: PPUSH
4042: CALL_OW 12
4046: PUSH
4047: FOR_TO
4048: IFFALSE 4139
// begin uc_nation = 1 ;
4050: LD_ADDR_OWVAR 21
4054: PUSH
4055: LD_INT 1
4057: ST_TO_ADDR
// uc_side = 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// hc_gallery =  ;
4066: LD_ADDR_OWVAR 33
4070: PUSH
4071: LD_STRING 
4073: ST_TO_ADDR
// hc_name =  ;
4074: LD_ADDR_OWVAR 26
4078: PUSH
4079: LD_STRING 
4081: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
4082: LD_INT 0
4084: PPUSH
4085: LD_INT 2
4087: PPUSH
4088: LD_EXP 59
4092: PPUSH
4093: CALL_OW 380
// un = CreateHuman ;
4097: LD_ADDR_VAR 0 3
4101: PUSH
4102: CALL_OW 44
4106: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
4107: LD_ADDR_EXP 87
4111: PUSH
4112: LD_EXP 87
4116: PUSH
4117: LD_VAR 0 3
4121: ADD
4122: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
4123: LD_VAR 0 3
4127: PPUSH
4128: LD_EXP 85
4132: PPUSH
4133: CALL_OW 52
// end ;
4137: GO 4047
4139: POP
4140: POP
// end ; end ; end_of_file
4141: LD_VAR 0 1
4145: RET
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
4146: LD_INT 0
4148: PPUSH
4149: PPUSH
// if exist_mode then
4150: LD_VAR 0 2
4154: IFFALSE 4179
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: LD_EXP 49
4165: PUSH
4166: LD_VAR 0 1
4170: STR
4171: PPUSH
4172: CALL_OW 34
4176: ST_TO_ADDR
4177: GO 4194
// unit := NewCharacter ( ident ) ;
4179: LD_ADDR_VAR 0 4
4183: PUSH
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 25
4193: ST_TO_ADDR
// result := unit ;
4194: LD_ADDR_VAR 0 3
4198: PUSH
4199: LD_VAR 0 4
4203: ST_TO_ADDR
// end ;
4204: LD_VAR 0 3
4208: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4209: LD_INT 0
4211: PPUSH
4212: PPUSH
4213: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4214: LD_ADDR_VAR 0 1
4218: PUSH
4219: LD_VAR 0 1
4223: PUSH
4224: LD_EXP 62
4228: PUSH
4229: LD_EXP 63
4233: PUSH
4234: LD_EXP 64
4238: PUSH
4239: LD_EXP 65
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: DIFF
4250: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4251: LD_ADDR_VAR 0 7
4255: PUSH
4256: LD_VAR 0 1
4260: PUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 12
4273: ARRAY
4274: ST_TO_ADDR
// if radio then
4275: LD_VAR 0 4
4279: IFFALSE 4328
// begin if GetSex ( speaker ) = sex_male then
4281: LD_VAR 0 7
4285: PPUSH
4286: CALL_OW 258
4290: PUSH
4291: LD_INT 1
4293: EQUAL
4294: IFFALSE 4312
// SayRadio ( speaker , dialogMID ) else
4296: LD_VAR 0 7
4300: PPUSH
4301: LD_VAR 0 2
4305: PPUSH
4306: CALL_OW 94
4310: GO 4326
// SayRadio ( speaker , dialogFID ) ;
4312: LD_VAR 0 7
4316: PPUSH
4317: LD_VAR 0 3
4321: PPUSH
4322: CALL_OW 94
// end else
4326: GO 4373
// begin if GetSex ( speaker ) = sex_male then
4328: LD_VAR 0 7
4332: PPUSH
4333: CALL_OW 258
4337: PUSH
4338: LD_INT 1
4340: EQUAL
4341: IFFALSE 4359
// Say ( speaker , dialogMID ) else
4343: LD_VAR 0 7
4347: PPUSH
4348: LD_VAR 0 2
4352: PPUSH
4353: CALL_OW 88
4357: GO 4373
// Say ( speaker , dialogFID ) ;
4359: LD_VAR 0 7
4363: PPUSH
4364: LD_VAR 0 3
4368: PPUSH
4369: CALL_OW 88
// end ; result := speaker ;
4373: LD_ADDR_VAR 0 5
4377: PUSH
4378: LD_VAR 0 7
4382: ST_TO_ADDR
// end ;
4383: LD_VAR 0 5
4387: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4388: LD_INT 0
4390: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4391: LD_VAR 0 1
4395: PPUSH
4396: CALL_OW 255
4400: PUSH
4401: LD_VAR 0 3
4405: EQUAL
4406: PUSH
4407: LD_VAR 0 1
4411: PPUSH
4412: CALL_OW 302
4416: AND
4417: IFFALSE 4439
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_EXP 48
4428: PUSH
4429: LD_VAR 0 2
4433: STR
4434: PPUSH
4435: CALL_OW 38
// end ;
4439: LD_VAR 0 4
4443: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
4448: PPUSH
// resultCharactersToSave = [ ] ;
4449: LD_ADDR_VAR 0 6
4453: PUSH
4454: EMPTY
4455: ST_TO_ADDR
// for unit in characters do
4456: LD_ADDR_VAR 0 5
4460: PUSH
4461: LD_VAR 0 1
4465: PUSH
4466: FOR_IN
4467: IFFALSE 4515
// if GetSide ( unit ) = side and IsOK ( unit ) then
4469: LD_VAR 0 5
4473: PPUSH
4474: CALL_OW 255
4478: PUSH
4479: LD_VAR 0 3
4483: EQUAL
4484: PUSH
4485: LD_VAR 0 5
4489: PPUSH
4490: CALL_OW 302
4494: AND
4495: IFFALSE 4513
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4497: LD_ADDR_VAR 0 6
4501: PUSH
4502: LD_VAR 0 6
4506: PUSH
4507: LD_VAR 0 5
4511: ADD
4512: ST_TO_ADDR
4513: GO 4466
4515: POP
4516: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4517: LD_VAR 0 6
4521: PPUSH
4522: LD_EXP 48
4526: PUSH
4527: LD_VAR 0 2
4531: STR
4532: PPUSH
4533: CALL_OW 38
// end ;
4537: LD_VAR 0 4
4541: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4542: LD_INT 0
4544: PPUSH
4545: PPUSH
4546: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4547: LD_ADDR_VAR 0 3
4551: PUSH
4552: LD_STRING QMoreInfo
4554: PPUSH
4555: LD_VAR 0 1
4559: PPUSH
4560: CALL_OW 98
4564: ST_TO_ADDR
// case dec of 1 :
4565: LD_VAR 0 3
4569: PUSH
4570: LD_INT 1
4572: DOUBLE
4573: EQUAL
4574: IFTRUE 4578
4576: GO 4638
4578: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4579: LD_EXP 62
4583: PPUSH
4584: LD_STRING D2a-Bur-1
4586: PPUSH
4587: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4591: LD_EXP 76
4595: PPUSH
4596: LD_STRING D2a-Pla-1
4598: PPUSH
4599: CALL_OW 88
// q1 = q diff 1 ;
4603: LD_ADDR_VAR 0 4
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: DIFF
4616: ST_TO_ADDR
// if q1 >= 2 then
4617: LD_VAR 0 4
4621: PUSH
4622: LD_INT 2
4624: GREATEREQUAL
4625: IFFALSE 4636
// Question1 ( q1 ) ;
4627: LD_VAR 0 4
4631: PPUSH
4632: CALL 4542 0 1
// end ; 2 :
4636: GO 4775
4638: LD_INT 2
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4646
4644: GO 4706
4646: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4647: LD_EXP 62
4651: PPUSH
4652: LD_STRING D2b-Bur-1
4654: PPUSH
4655: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4659: LD_EXP 76
4663: PPUSH
4664: LD_STRING D2b-Pla-1
4666: PPUSH
4667: CALL_OW 88
// q1 = q diff 2 ;
4671: LD_ADDR_VAR 0 4
4675: PUSH
4676: LD_VAR 0 1
4680: PUSH
4681: LD_INT 2
4683: DIFF
4684: ST_TO_ADDR
// if q1 >= 2 then
4685: LD_VAR 0 4
4689: PUSH
4690: LD_INT 2
4692: GREATEREQUAL
4693: IFFALSE 4704
// Question1 ( q1 ) ;
4695: LD_VAR 0 4
4699: PPUSH
4700: CALL 4542 0 1
// end ; 3 :
4704: GO 4775
4706: LD_INT 3
4708: DOUBLE
4709: EQUAL
4710: IFTRUE 4714
4712: GO 4774
4714: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4715: LD_EXP 62
4719: PPUSH
4720: LD_STRING D2c-Bur-1
4722: PPUSH
4723: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4727: LD_EXP 76
4731: PPUSH
4732: LD_STRING D2c-Pla-1
4734: PPUSH
4735: CALL_OW 88
// q1 = q diff 3 ;
4739: LD_ADDR_VAR 0 4
4743: PUSH
4744: LD_VAR 0 1
4748: PUSH
4749: LD_INT 3
4751: DIFF
4752: ST_TO_ADDR
// if q1 >= 2 then
4753: LD_VAR 0 4
4757: PUSH
4758: LD_INT 2
4760: GREATEREQUAL
4761: IFFALSE 4772
// Question1 ( q1 ) ;
4763: LD_VAR 0 4
4767: PPUSH
4768: CALL 4542 0 1
// end ; end ;
4772: GO 4775
4774: POP
// end ;
4775: LD_VAR 0 2
4779: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4780: LD_INT 0
4782: PPUSH
4783: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 or not GetBType ( depot ) in [ b_depot , b_warehouse ] then
4784: LD_VAR 0 1
4788: PPUSH
4789: CALL_OW 302
4793: NOT
4794: PUSH
4795: LD_VAR 0 2
4799: PPUSH
4800: CALL_OW 302
4804: NOT
4805: OR
4806: PUSH
4807: LD_VAR 0 3
4811: PPUSH
4812: CALL_OW 302
4816: NOT
4817: OR
4818: PUSH
4819: LD_VAR 0 3
4823: PPUSH
4824: CALL_OW 261
4828: PUSH
4829: LD_INT 100
4831: EQUAL
4832: OR
4833: PUSH
4834: LD_VAR 0 2
4838: PPUSH
4839: CALL_OW 266
4843: PUSH
4844: LD_INT 0
4846: PUSH
4847: LD_INT 1
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: IN
4854: NOT
4855: OR
4856: IFFALSE 4860
// exit ;
4858: GO 4993
// AddComTransport ( engineer , depot , mat_oil ) ;
4860: LD_VAR 0 1
4864: PPUSH
4865: LD_VAR 0 2
4869: PPUSH
4870: LD_INT 2
4872: PPUSH
4873: CALL_OW 211
// repeat wait ( 0 0$01 ) ;
4877: LD_INT 35
4879: PPUSH
4880: CALL_OW 67
// until Carry ( engineer ) ;
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 281
4893: IFFALSE 4877
// RemoveTasks ( engineer ) ;
4895: LD_VAR 0 1
4899: PPUSH
4900: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4904: LD_VAR 0 1
4908: PPUSH
4909: LD_STRING O
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: LD_INT 0
4917: PUSH
4918: LD_VAR 0 3
4922: PUSH
4923: LD_INT 0
4925: PUSH
4926: LD_INT 0
4928: PUSH
4929: LD_INT 0
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: PUSH
4941: EMPTY
4942: LIST
4943: PPUSH
4944: CALL_OW 446
// repeat wait ( 0 0$01 ) ;
4948: LD_INT 35
4950: PPUSH
4951: CALL_OW 67
// until not Carry ( engineer ) ;
4955: LD_VAR 0 1
4959: PPUSH
4960: CALL_OW 281
4964: NOT
4965: IFFALSE 4948
// SetFuel ( vehicle , 100 ) ;
4967: LD_VAR 0 3
4971: PPUSH
4972: LD_INT 100
4974: PPUSH
4975: CALL_OW 240
// AddComEnterUnit ( engineer , depot ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: LD_VAR 0 2
4988: PPUSH
4989: CALL_OW 180
// end ;
4993: LD_VAR 0 4
4997: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4998: LD_INT 0
5000: PPUSH
5001: PPUSH
5002: PPUSH
5003: PPUSH
5004: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
5005: LD_ADDR_VAR 0 8
5009: PUSH
5010: LD_INT 48
5012: PUSH
5013: LD_INT 49
5015: PUSH
5016: LD_INT 50
5018: PUSH
5019: LD_INT 20
5021: PUSH
5022: LD_INT 1
5024: PUSH
5025: LD_INT 51
5027: PUSH
5028: LD_INT 52
5030: PUSH
5031: LD_INT 69
5033: PUSH
5034: LD_INT 39
5036: PUSH
5037: LD_INT 34
5039: PUSH
5040: LD_INT 40
5042: PUSH
5043: LD_INT 53
5045: PUSH
5046: LD_INT 71
5048: PUSH
5049: LD_INT 57
5051: PUSH
5052: LD_INT 58
5054: PUSH
5055: LD_INT 44
5057: PUSH
5058: LD_INT 32
5060: PUSH
5061: LD_INT 27
5063: PUSH
5064: LD_INT 23
5066: PUSH
5067: LD_INT 33
5069: PUSH
5070: LD_INT 59
5072: PUSH
5073: LD_INT 54
5075: PUSH
5076: LD_INT 55
5078: PUSH
5079: LD_INT 56
5081: PUSH
5082: LD_INT 63
5084: PUSH
5085: LD_INT 64
5087: PUSH
5088: LD_INT 65
5090: PUSH
5091: LD_INT 30
5093: PUSH
5094: LD_INT 31
5096: PUSH
5097: LD_INT 21
5099: PUSH
5100: LD_INT 22
5102: PUSH
5103: LD_INT 25
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: ST_TO_ADDR
// for i = 1 to ru_tech_list do
5140: LD_ADDR_VAR 0 5
5144: PUSH
5145: DOUBLE
5146: LD_INT 1
5148: DEC
5149: ST_TO_ADDR
5150: LD_VAR 0 8
5154: PUSH
5155: FOR_TO
5156: IFFALSE 5232
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
5158: LD_VAR 0 8
5162: PUSH
5163: LD_VAR 0 5
5167: ARRAY
5168: PPUSH
5169: LD_VAR 0 1
5173: PPUSH
5174: CALL_OW 321
5178: PUSH
5179: LD_INT 1
5181: EQUAL
5182: PUSH
5183: LD_VAR 0 8
5187: PUSH
5188: LD_VAR 0 5
5192: ARRAY
5193: PPUSH
5194: LD_VAR 0 3
5198: PPUSH
5199: CALL_OW 482
5203: PUSH
5204: LD_INT 1
5206: EQUAL
5207: AND
5208: IFFALSE 5230
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5210: LD_VAR 0 2
5214: PPUSH
5215: LD_VAR 0 8
5219: PUSH
5220: LD_VAR 0 5
5224: ARRAY
5225: PPUSH
5226: CALL_OW 184
5230: GO 5155
5232: POP
5233: POP
// end ;
5234: LD_VAR 0 4
5238: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5239: LD_INT 0
5241: PPUSH
5242: PPUSH
5243: PPUSH
// uc_side := GetSide ( b ) ;
5244: LD_ADDR_OWVAR 20
5248: PUSH
5249: LD_VAR 0 2
5253: PPUSH
5254: CALL_OW 255
5258: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5259: LD_ADDR_OWVAR 21
5263: PUSH
5264: LD_VAR 0 2
5268: PPUSH
5269: CALL_OW 248
5273: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5274: LD_INT 0
5276: PPUSH
5277: LD_INT 1
5279: PPUSH
5280: LD_VAR 0 1
5284: PPUSH
5285: CALL_OW 380
// un = CreateHuman ;
5289: LD_ADDR_VAR 0 4
5293: PUSH
5294: CALL_OW 44
5298: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5299: LD_ADDR_VAR 0 5
5303: PUSH
5304: LD_VAR 0 2
5308: PPUSH
5309: CALL_OW 254
5313: PUSH
5314: LD_INT 3
5316: MINUS
5317: ST_TO_ADDR
// if dir < 0 then
5318: LD_VAR 0 5
5322: PUSH
5323: LD_INT 0
5325: LESS
5326: IFFALSE 5342
// dir := 6 + dir ;
5328: LD_ADDR_VAR 0 5
5332: PUSH
5333: LD_INT 6
5335: PUSH
5336: LD_VAR 0 5
5340: PLUS
5341: ST_TO_ADDR
// SetDir ( un , dir ) ;
5342: LD_VAR 0 4
5346: PPUSH
5347: LD_VAR 0 5
5351: PPUSH
5352: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5356: LD_VAR 0 4
5360: PPUSH
5361: LD_VAR 0 2
5365: PPUSH
5366: CALL_OW 52
// result = un ;
5370: LD_ADDR_VAR 0 3
5374: PUSH
5375: LD_VAR 0 4
5379: ST_TO_ADDR
// end ;
5380: LD_VAR 0 3
5384: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5385: LD_INT 0
5387: PPUSH
5388: PPUSH
// dir := GetDir ( b ) - 3 ;
5389: LD_ADDR_VAR 0 4
5393: PUSH
5394: LD_VAR 0 2
5398: PPUSH
5399: CALL_OW 254
5403: PUSH
5404: LD_INT 3
5406: MINUS
5407: ST_TO_ADDR
// if dir < 0 then
5408: LD_VAR 0 4
5412: PUSH
5413: LD_INT 0
5415: LESS
5416: IFFALSE 5432
// dir := 6 + dir ;
5418: LD_ADDR_VAR 0 4
5422: PUSH
5423: LD_INT 6
5425: PUSH
5426: LD_VAR 0 4
5430: PLUS
5431: ST_TO_ADDR
// SetDir ( un , dir ) ;
5432: LD_VAR 0 1
5436: PPUSH
5437: LD_VAR 0 4
5441: PPUSH
5442: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5446: LD_VAR 0 1
5450: PPUSH
5451: LD_VAR 0 2
5455: PPUSH
5456: CALL_OW 52
// result = un ;
5460: LD_ADDR_VAR 0 3
5464: PUSH
5465: LD_VAR 0 1
5469: ST_TO_ADDR
// end ;
5470: LD_VAR 0 3
5474: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5475: LD_INT 0
5477: PPUSH
5478: PPUSH
5479: PPUSH
// tmp = [ ] ;
5480: LD_ADDR_VAR 0 5
5484: PUSH
5485: EMPTY
5486: ST_TO_ADDR
// if not vehicles then
5487: LD_VAR 0 1
5491: NOT
5492: IFFALSE 5496
// exit ;
5494: GO 5613
// for i in vehicles do
5496: LD_ADDR_VAR 0 4
5500: PUSH
5501: LD_VAR 0 1
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5597
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5509: LD_ADDR_VAR 0 5
5513: PUSH
5514: LD_VAR 0 5
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: LD_VAR 0 4
5526: PPUSH
5527: CALL_OW 265
5531: PUSH
5532: LD_VAR 0 4
5536: PPUSH
5537: CALL_OW 262
5541: PUSH
5542: LD_VAR 0 4
5546: PPUSH
5547: CALL_OW 263
5551: PUSH
5552: LD_VAR 0 4
5556: PPUSH
5557: CALL_OW 264
5561: PUSH
5562: LD_VAR 0 4
5566: PPUSH
5567: CALL_OW 261
5571: PUSH
5572: LD_VAR 0 4
5576: PPUSH
5577: CALL_OW 256
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PPUSH
5590: CALL_OW 2
5594: ST_TO_ADDR
5595: GO 5506
5597: POP
5598: POP
// SaveVariable ( tmp , ident ) ;
5599: LD_VAR 0 5
5603: PPUSH
5604: LD_VAR 0 2
5608: PPUSH
5609: CALL_OW 39
// end ;
5613: LD_VAR 0 3
5617: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5618: LD_INT 0
5620: PPUSH
5621: PPUSH
5622: PPUSH
// buildingsToSave = [ ] ;
5623: LD_ADDR_VAR 0 5
5627: PUSH
5628: EMPTY
5629: ST_TO_ADDR
// if not buildings then
5630: LD_VAR 0 1
5634: NOT
5635: IFFALSE 5639
// exit ;
5637: GO 6214
// for i in buildings do
5639: LD_ADDR_VAR 0 4
5643: PUSH
5644: LD_VAR 0 1
5648: PUSH
5649: FOR_IN
5650: IFFALSE 6198
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5652: LD_VAR 0 4
5656: PPUSH
5657: CALL_OW 266
5661: PUSH
5662: LD_INT 6
5664: PUSH
5665: LD_INT 7
5667: PUSH
5668: LD_INT 8
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: LIST
5675: IN
5676: IFFALSE 5801
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5678: LD_ADDR_VAR 0 5
5682: PUSH
5683: LD_VAR 0 5
5687: PUSH
5688: LD_VAR 0 4
5692: PPUSH
5693: CALL_OW 266
5697: PUSH
5698: LD_VAR 0 4
5702: PPUSH
5703: CALL_OW 250
5707: PUSH
5708: LD_VAR 0 4
5712: PPUSH
5713: CALL_OW 251
5717: PUSH
5718: LD_VAR 0 4
5722: PPUSH
5723: CALL_OW 254
5727: PUSH
5728: LD_VAR 0 4
5732: PPUSH
5733: CALL_OW 267
5737: PUSH
5738: LD_VAR 0 4
5742: PPUSH
5743: CALL_OW 248
5747: PUSH
5748: LD_VAR 0 4
5752: PPUSH
5753: CALL_OW 256
5757: PUSH
5758: LD_VAR 0 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: CALL_OW 268
5770: PUSH
5771: LD_VAR 0 4
5775: PPUSH
5776: LD_INT 2
5778: PPUSH
5779: CALL_OW 268
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: PUSH
5795: EMPTY
5796: LIST
5797: ADD
5798: ST_TO_ADDR
5799: GO 6196
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5801: LD_VAR 0 4
5805: PPUSH
5806: CALL_OW 266
5810: PUSH
5811: LD_INT 32
5813: PUSH
5814: LD_INT 33
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: IN
5821: IFFALSE 5929
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5823: LD_ADDR_VAR 0 5
5827: PUSH
5828: LD_VAR 0 5
5832: PUSH
5833: LD_VAR 0 4
5837: PPUSH
5838: CALL_OW 266
5842: PUSH
5843: LD_VAR 0 4
5847: PPUSH
5848: CALL_OW 250
5852: PUSH
5853: LD_VAR 0 4
5857: PPUSH
5858: CALL_OW 251
5862: PUSH
5863: LD_VAR 0 4
5867: PPUSH
5868: CALL_OW 254
5872: PUSH
5873: LD_VAR 0 4
5877: PPUSH
5878: CALL_OW 267
5882: PUSH
5883: LD_VAR 0 4
5887: PPUSH
5888: CALL_OW 248
5892: PUSH
5893: LD_VAR 0 4
5897: PPUSH
5898: CALL_OW 256
5902: PUSH
5903: LD_VAR 0 4
5907: PPUSH
5908: CALL_OW 269
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: ADD
5926: ST_TO_ADDR
5927: GO 6196
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5929: LD_VAR 0 4
5933: PPUSH
5934: CALL_OW 266
5938: PUSH
5939: LD_INT 0
5941: PUSH
5942: LD_INT 1
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: IN
5949: IFFALSE 6103
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5951: LD_ADDR_VAR 0 5
5955: PUSH
5956: LD_VAR 0 5
5960: PUSH
5961: LD_VAR 0 4
5965: PPUSH
5966: CALL_OW 266
5970: PUSH
5971: LD_VAR 0 4
5975: PPUSH
5976: CALL_OW 250
5980: PUSH
5981: LD_VAR 0 4
5985: PPUSH
5986: CALL_OW 251
5990: PUSH
5991: LD_VAR 0 4
5995: PPUSH
5996: CALL_OW 254
6000: PUSH
6001: LD_VAR 0 4
6005: PPUSH
6006: CALL_OW 267
6010: PUSH
6011: LD_VAR 0 4
6015: PPUSH
6016: CALL_OW 248
6020: PUSH
6021: LD_VAR 0 4
6025: PPUSH
6026: CALL_OW 256
6030: PUSH
6031: LD_VAR 0 4
6035: PPUSH
6036: CALL_OW 274
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: CALL_OW 275
6048: PUSH
6049: LD_VAR 0 4
6053: PPUSH
6054: CALL_OW 274
6058: PPUSH
6059: LD_INT 2
6061: PPUSH
6062: CALL_OW 275
6066: PUSH
6067: LD_VAR 0 4
6071: PPUSH
6072: CALL_OW 274
6076: PPUSH
6077: LD_INT 3
6079: PPUSH
6080: CALL_OW 275
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: PUSH
6097: EMPTY
6098: LIST
6099: ADD
6100: ST_TO_ADDR
6101: GO 6196
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
6103: LD_ADDR_VAR 0 5
6107: PUSH
6108: LD_VAR 0 5
6112: PUSH
6113: LD_VAR 0 4
6117: PPUSH
6118: CALL_OW 266
6122: PUSH
6123: LD_VAR 0 4
6127: PPUSH
6128: CALL_OW 250
6132: PUSH
6133: LD_VAR 0 4
6137: PPUSH
6138: CALL_OW 251
6142: PUSH
6143: LD_VAR 0 4
6147: PPUSH
6148: CALL_OW 254
6152: PUSH
6153: LD_VAR 0 4
6157: PPUSH
6158: CALL_OW 267
6162: PUSH
6163: LD_VAR 0 4
6167: PPUSH
6168: CALL_OW 248
6172: PUSH
6173: LD_VAR 0 4
6177: PPUSH
6178: CALL_OW 256
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: ADD
6195: ST_TO_ADDR
// end ;
6196: GO 5649
6198: POP
6199: POP
// SaveVariable ( buildingsToSave , ident ) ;
6200: LD_VAR 0 5
6204: PPUSH
6205: LD_VAR 0 2
6209: PPUSH
6210: CALL_OW 39
// end ;
6214: LD_VAR 0 3
6218: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6219: LD_INT 0
6221: PPUSH
6222: PPUSH
6223: PPUSH
6224: PPUSH
6225: PPUSH
// belkovTeam = [ ] ;
6226: LD_ADDR_EXP 73
6230: PUSH
6231: EMPTY
6232: ST_TO_ADDR
// if belkovReturn then
6233: LD_EXP 6
6237: IFFALSE 6255
// belkovTeam = belkovTeam ^ Belkov ;
6239: LD_ADDR_EXP 73
6243: PUSH
6244: LD_EXP 73
6248: PUSH
6249: LD_EXP 64
6253: ADD
6254: ST_TO_ADDR
// belkovTeam = belkovTeam ^ Belkov2 ;
6255: LD_ADDR_EXP 73
6259: PUSH
6260: LD_EXP 73
6264: PUSH
6265: LD_EXP 68
6269: ADD
6270: ST_TO_ADDR
// for unit in other_survivors do
6271: LD_ADDR_VAR 0 3
6275: PUSH
6276: LD_EXP 66
6280: PUSH
6281: FOR_IN
6282: IFFALSE 6323
// if IsOK ( unit ) and belkovTeam < 5 then
6284: LD_VAR 0 3
6288: PPUSH
6289: CALL_OW 302
6293: PUSH
6294: LD_EXP 73
6298: PUSH
6299: LD_INT 5
6301: LESS
6302: AND
6303: IFFALSE 6321
// belkovTeam = belkovTeam ^ unit ;
6305: LD_ADDR_EXP 73
6309: PUSH
6310: LD_EXP 73
6314: PUSH
6315: LD_VAR 0 3
6319: ADD
6320: ST_TO_ADDR
6321: GO 6281
6323: POP
6324: POP
// if belkovTeam < 5 then
6325: LD_EXP 73
6329: PUSH
6330: LD_INT 5
6332: LESS
6333: IFFALSE 6459
// begin restRandSolds = 5 - belkovTeam ;
6335: LD_ADDR_VAR 0 4
6339: PUSH
6340: LD_INT 5
6342: PUSH
6343: LD_EXP 73
6347: MINUS
6348: ST_TO_ADDR
// for i := 1 to restRandSolds do
6349: LD_ADDR_VAR 0 2
6353: PUSH
6354: DOUBLE
6355: LD_INT 1
6357: DEC
6358: ST_TO_ADDR
6359: LD_VAR 0 4
6363: PUSH
6364: FOR_TO
6365: IFFALSE 6457
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6367: LD_ADDR_VAR 0 3
6371: PUSH
6372: LD_EXP 69
6376: PPUSH
6377: LD_INT 25
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: EMPTY
6388: LIST
6389: PPUSH
6390: CALL_OW 72
6394: PUSH
6395: LD_EXP 67
6399: DIFF
6400: PUSH
6401: FOR_IN
6402: IFFALSE 6453
// if not unit in belkovTeam then
6404: LD_VAR 0 3
6408: PUSH
6409: LD_EXP 73
6413: IN
6414: NOT
6415: IFFALSE 6451
// begin belkovTeam = belkovTeam ^ unit ;
6417: LD_ADDR_EXP 73
6421: PUSH
6422: LD_EXP 73
6426: PUSH
6427: LD_VAR 0 3
6431: ADD
6432: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6433: LD_ADDR_EXP 69
6437: PUSH
6438: LD_EXP 69
6442: PUSH
6443: LD_VAR 0 3
6447: DIFF
6448: ST_TO_ADDR
// break ;
6449: GO 6453
// end ;
6451: GO 6401
6453: POP
6454: POP
6455: GO 6364
6457: POP
6458: POP
// end ; tmp = belkovTeam diff Belkov ;
6459: LD_ADDR_VAR 0 5
6463: PUSH
6464: LD_EXP 73
6468: PUSH
6469: LD_EXP 64
6473: DIFF
6474: ST_TO_ADDR
// if tmp < 4 then
6475: LD_VAR 0 5
6479: PUSH
6480: LD_INT 4
6482: LESS
6483: IFFALSE 6567
// begin for i := 1 to 4 - tmp do
6485: LD_ADDR_VAR 0 2
6489: PUSH
6490: DOUBLE
6491: LD_INT 1
6493: DEC
6494: ST_TO_ADDR
6495: LD_INT 4
6497: PUSH
6498: LD_VAR 0 5
6502: MINUS
6503: PUSH
6504: FOR_TO
6505: IFFALSE 6565
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6507: LD_INT 0
6509: PPUSH
6510: LD_INT 1
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: CALL_OW 12
6520: PPUSH
6521: CALL_OW 381
// unit = CreateHuman ;
6525: LD_ADDR_VAR 0 3
6529: PUSH
6530: CALL_OW 44
6534: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6535: LD_ADDR_EXP 73
6539: PUSH
6540: LD_EXP 73
6544: PUSH
6545: LD_VAR 0 3
6549: ADD
6550: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6551: LD_VAR 0 3
6555: PPUSH
6556: LD_INT 209
6558: PPUSH
6559: CALL_OW 52
// end ;
6563: GO 6504
6565: POP
6566: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6567: LD_STRING 01_Kirilenkova
6569: PPUSH
6570: CALL_OW 28
6574: IFFALSE 6594
// belkovTeam = belkovTeam ^ Kirilenkova else
6576: LD_ADDR_EXP 73
6580: PUSH
6581: LD_EXP 73
6585: PUSH
6586: LD_EXP 65
6590: ADD
6591: ST_TO_ADDR
6592: GO 6670
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6594: LD_ADDR_EXP 73
6598: PUSH
6599: LD_EXP 73
6603: PUSH
6604: LD_EXP 69
6608: PPUSH
6609: LD_INT 25
6611: PUSH
6612: LD_INT 4
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: PPUSH
6622: CALL_OW 72
6626: PUSH
6627: LD_INT 1
6629: ARRAY
6630: ADD
6631: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6632: LD_ADDR_EXP 69
6636: PUSH
6637: LD_EXP 69
6641: PUSH
6642: LD_EXP 69
6646: PPUSH
6647: LD_INT 25
6649: PUSH
6650: LD_INT 4
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: PPUSH
6660: CALL_OW 72
6664: PUSH
6665: LD_INT 1
6667: ARRAY
6668: DIFF
6669: ST_TO_ADDR
// end ; end ;
6670: LD_VAR 0 1
6674: RET
// export function PlatonovSendSupport ; var soldsOk ; begin
6675: LD_INT 0
6677: PPUSH
6678: PPUSH
// if not Kuklajs or not IsOK ( Kuklajs ) then
6679: LD_EXP 78
6683: NOT
6684: PUSH
6685: LD_EXP 78
6689: PPUSH
6690: CALL_OW 302
6694: NOT
6695: OR
6696: IFFALSE 6799
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Benko ;
6698: LD_ADDR_VAR 0 2
6702: PUSH
6703: LD_EXP 77
6707: PPUSH
6708: LD_INT 50
6710: PUSH
6711: EMPTY
6712: LIST
6713: PPUSH
6714: CALL_OW 72
6718: PUSH
6719: LD_EXP 79
6723: DIFF
6724: ST_TO_ADDR
// if soldsOK then
6725: LD_VAR 0 2
6729: IFFALSE 6799
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6731: LD_VAR 0 2
6735: PUSH
6736: LD_INT 1
6738: ARRAY
6739: PPUSH
6740: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6744: LD_VAR 0 2
6748: PUSH
6749: LD_INT 1
6751: ARRAY
6752: PPUSH
6753: LD_INT 112
6755: PPUSH
6756: LD_INT 96
6758: PPUSH
6759: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6763: LD_VAR 0 2
6767: PUSH
6768: LD_INT 1
6770: ARRAY
6771: PPUSH
6772: LD_INT 3
6774: PPUSH
6775: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6779: LD_ADDR_EXP 77
6783: PUSH
6784: LD_EXP 77
6788: PUSH
6789: LD_VAR 0 2
6793: PUSH
6794: LD_INT 1
6796: ARRAY
6797: DIFF
6798: ST_TO_ADDR
// end ; end ; if not Benko or not IsOK ( Benko ) then
6799: LD_EXP 79
6803: NOT
6804: PUSH
6805: LD_EXP 79
6809: PPUSH
6810: CALL_OW 302
6814: NOT
6815: OR
6816: IFFALSE 6919
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Kuklajs ;
6818: LD_ADDR_VAR 0 2
6822: PUSH
6823: LD_EXP 77
6827: PPUSH
6828: LD_INT 50
6830: PUSH
6831: EMPTY
6832: LIST
6833: PPUSH
6834: CALL_OW 72
6838: PUSH
6839: LD_EXP 78
6843: DIFF
6844: ST_TO_ADDR
// if soldsOK then
6845: LD_VAR 0 2
6849: IFFALSE 6919
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6851: LD_VAR 0 2
6855: PUSH
6856: LD_INT 1
6858: ARRAY
6859: PPUSH
6860: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6864: LD_VAR 0 2
6868: PUSH
6869: LD_INT 1
6871: ARRAY
6872: PPUSH
6873: LD_INT 112
6875: PPUSH
6876: LD_INT 96
6878: PPUSH
6879: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6883: LD_VAR 0 2
6887: PUSH
6888: LD_INT 1
6890: ARRAY
6891: PPUSH
6892: LD_INT 3
6894: PPUSH
6895: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6899: LD_ADDR_EXP 77
6903: PUSH
6904: LD_EXP 77
6908: PUSH
6909: LD_VAR 0 2
6913: PUSH
6914: LD_INT 1
6916: ARRAY
6917: DIFF
6918: ST_TO_ADDR
// end ; end ; ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6919: LD_EXP 78
6923: PUSH
6924: LD_EXP 79
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6937: LD_EXP 78
6941: PUSH
6942: LD_EXP 79
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PPUSH
6951: LD_INT 112
6953: PPUSH
6954: LD_INT 96
6956: PPUSH
6957: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6961: LD_EXP 78
6965: PUSH
6966: LD_EXP 79
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: LD_INT 3
6977: PPUSH
6978: CALL_OW 235
// end ; end_of_file
6982: LD_VAR 0 1
6986: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6987: LD_INT 0
6989: PPUSH
6990: PPUSH
6991: PPUSH
6992: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6993: LD_EXP 62
6997: PPUSH
6998: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
7002: LD_EXP 62
7006: PPUSH
7007: LD_INT 163
7009: PPUSH
7010: LD_INT 108
7012: PPUSH
7013: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
7017: LD_EXP 62
7021: PPUSH
7022: LD_EXP 67
7026: PPUSH
7027: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
7031: LD_ADDR_VAR 0 2
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_INT 3
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 21
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PPUSH
7060: CALL_OW 69
7064: PUSH
7065: LD_EXP 62
7069: DIFF
7070: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
7071: LD_ADDR_VAR 0 4
7075: PUSH
7076: DOUBLE
7077: LD_INT 1
7079: DEC
7080: ST_TO_ADDR
7081: LD_EXP 52
7085: PUSH
7086: FOR_TO
7087: IFFALSE 7205
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7089: LD_ADDR_VAR 0 3
7093: PUSH
7094: LD_VAR 0 2
7098: PPUSH
7099: LD_EXP 52
7103: PUSH
7104: LD_VAR 0 4
7108: ARRAY
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: LD_EXP 52
7118: PUSH
7119: LD_VAR 0 4
7123: ARRAY
7124: PUSH
7125: LD_INT 2
7127: ARRAY
7128: PPUSH
7129: CALL_OW 73
7133: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7134: LD_VAR 0 3
7138: PPUSH
7139: LD_EXP 52
7143: PUSH
7144: LD_VAR 0 4
7148: ARRAY
7149: PUSH
7150: LD_INT 1
7152: ARRAY
7153: PPUSH
7154: LD_EXP 52
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PUSH
7165: LD_INT 2
7167: ARRAY
7168: PPUSH
7169: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
7173: LD_VAR 0 3
7177: PPUSH
7178: LD_EXP 67
7182: PPUSH
7183: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_VAR 0 2
7196: PUSH
7197: LD_VAR 0 3
7201: DIFF
7202: ST_TO_ADDR
// end ;
7203: GO 7086
7205: POP
7206: POP
// repeat CenterNowOnUnits ( Burlak ) ;
7207: LD_EXP 62
7211: PPUSH
7212: CALL_OW 87
// wait ( 0 0$1 ) ;
7216: LD_INT 35
7218: PPUSH
7219: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
7223: LD_EXP 62
7227: PPUSH
7228: LD_EXP 67
7232: PPUSH
7233: CALL_OW 296
7237: PUSH
7238: LD_INT 4
7240: LESS
7241: IFFALSE 7207
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7243: LD_EXP 62
7247: PUSH
7248: LD_EXP 67
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
7261: LD_EXP 67
7265: PPUSH
7266: LD_EXP 62
7270: PPUSH
7271: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
7275: LD_EXP 67
7279: PPUSH
7280: LD_STRING D1-Kur-1
7282: PPUSH
7283: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
7287: LD_EXP 62
7291: PPUSH
7292: LD_STRING D1-Bur-1
7294: PPUSH
7295: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
7299: LD_EXP 67
7303: PPUSH
7304: LD_STRING D1-Kur-2
7306: PPUSH
7307: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
7311: LD_EXP 62
7315: PPUSH
7316: LD_STRING D1-Bur-2
7318: PPUSH
7319: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
7323: LD_EXP 67
7327: PPUSH
7328: LD_STRING D1-Kur-3
7330: PPUSH
7331: CALL_OW 88
// if IsOK ( Gnyevko ) then
7335: LD_EXP 63
7339: PPUSH
7340: CALL_OW 302
7344: IFFALSE 7358
// Say ( Kurin , D1-Kur-3a ) ;
7346: LD_EXP 67
7350: PPUSH
7351: LD_STRING D1-Kur-3a
7353: PPUSH
7354: CALL_OW 88
// InGameOff ;
7358: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
7362: LD_INT 22
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 21
7374: PUSH
7375: LD_INT 1
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 69
7390: PUSH
7391: LD_EXP 62
7395: PUSH
7396: LD_EXP 63
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: DIFF
7405: PPUSH
7406: LD_INT 6
7408: PPUSH
7409: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
7413: LD_EXP 70
7417: PPUSH
7418: LD_INT 3
7420: PPUSH
7421: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
7425: LD_INT 9
7427: PPUSH
7428: LD_INT 22
7430: PUSH
7431: LD_INT 6
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: LD_INT 21
7440: PUSH
7441: LD_INT 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PPUSH
7452: CALL_OW 70
7456: PUSH
7457: LD_EXP 67
7461: DIFF
7462: PPUSH
7463: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7467: LD_EXP 66
7471: PPUSH
7472: LD_INT 95
7474: PPUSH
7475: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7479: LD_EXP 64
7483: PPUSH
7484: LD_INT 95
7486: PPUSH
7487: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7491: LD_EXP 65
7495: PPUSH
7496: CALL_OW 305
7500: IFFALSE 7514
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7502: LD_EXP 65
7506: PPUSH
7507: LD_INT 83
7509: PPUSH
7510: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7514: LD_STRING 01_Gnyevko
7516: PPUSH
7517: CALL_OW 28
7521: NOT
7522: IFFALSE 7536
// SetSide ( randomMech , 3 ) ;
7524: LD_EXP 71
7528: PPUSH
7529: LD_INT 3
7531: PPUSH
7532: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7536: LD_STRING M1
7538: PPUSH
7539: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7543: LD_INT 3
7545: PPUSH
7546: LD_INT 6
7548: PPUSH
7549: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7553: LD_INT 3
7555: PPUSH
7556: LD_INT 7
7558: PPUSH
7559: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7563: LD_INT 6
7565: PPUSH
7566: LD_INT 6
7568: PPUSH
7569: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7573: LD_INT 6
7575: PPUSH
7576: LD_INT 7
7578: PPUSH
7579: CALL_OW 334
// SaveForQuickRestart ;
7583: CALL_OW 22
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7587: LD_EXP 66
7591: PPUSH
7592: LD_INT 95
7594: PPUSH
7595: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7599: LD_EXP 64
7603: PPUSH
7604: LD_INT 95
7606: PPUSH
7607: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7611: LD_EXP 65
7615: PPUSH
7616: CALL_OW 305
7620: IFFALSE 7634
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7622: LD_EXP 65
7626: PPUSH
7627: LD_INT 83
7629: PPUSH
7630: CALL_OW 120
// end ;
7634: LD_VAR 0 1
7638: RET
// every 1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7639: LD_EXP 20
7643: NOT
7644: PUSH
7645: LD_INT 20
7647: PPUSH
7648: LD_INT 22
7650: PUSH
7651: LD_INT 3
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 2
7660: PUSH
7661: LD_INT 21
7663: PUSH
7664: LD_INT 1
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 21
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 70
7694: PUSH
7695: LD_INT 0
7697: GREATER
7698: AND
7699: IFFALSE 8073
7701: GO 7703
7703: DISABLE
7704: LD_INT 0
7706: PPUSH
// begin enable ;
7707: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7708: LD_ADDR_VAR 0 1
7712: PUSH
7713: LD_INT 20
7715: PPUSH
7716: LD_INT 22
7718: PUSH
7719: LD_INT 3
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_INT 2
7728: PUSH
7729: LD_INT 21
7731: PUSH
7732: LD_INT 1
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 21
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PPUSH
7758: CALL_OW 70
7762: PUSH
7763: FOR_IN
7764: IFFALSE 8050
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7766: LD_VAR 0 1
7770: PPUSH
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 250
7780: PPUSH
7781: LD_VAR 0 1
7785: PPUSH
7786: CALL_OW 251
7790: PUSH
7791: LD_INT 5
7793: PLUS
7794: PPUSH
7795: CALL_OW 111
// if not meetPlatonov and not dialogLoopBlocker then
7799: LD_EXP 7
7803: NOT
7804: PUSH
7805: LD_EXP 33
7809: NOT
7810: AND
7811: IFFALSE 7874
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7813: LD_VAR 0 1
7817: PUSH
7818: LD_EXP 62
7822: NONEQUAL
7823: PUSH
7824: LD_EXP 70
7828: PPUSH
7829: CALL_OW 302
7833: AND
7834: IFFALSE 7848
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7836: LD_EXP 70
7840: PPUSH
7841: LD_STRING D1b-Kov-1
7843: PPUSH
7844: CALL_OW 88
// if unit = Burlak then
7848: LD_VAR 0 1
7852: PUSH
7853: LD_EXP 62
7857: EQUAL
7858: IFFALSE 7872
// Say ( Burlak , D1b-Bur-1 ) ;
7860: LD_EXP 62
7864: PPUSH
7865: LD_STRING D1b-Bur-1
7867: PPUSH
7868: CALL_OW 88
// end else
7872: GO 7893
// if not dialogLoopBlocker then
7874: LD_EXP 33
7878: NOT
7879: IFFALSE 7893
// Say ( Platonov , D8-Pla-1 ) ;
7881: LD_EXP 76
7885: PPUSH
7886: LD_STRING D8-Pla-1
7888: PPUSH
7889: CALL_OW 88
// if not dialogLoopBlocker then
7893: LD_EXP 33
7897: NOT
7898: IFFALSE 7908
// dialogLoopBlocker = true ;
7900: LD_ADDR_EXP 33
7904: PUSH
7905: LD_INT 1
7907: ST_TO_ADDR
// repeat ComMoveXY ( FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7908: LD_INT 20
7910: PPUSH
7911: LD_INT 22
7913: PUSH
7914: LD_INT 3
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: LD_INT 21
7926: PUSH
7927: LD_INT 1
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: LD_INT 21
7936: PUSH
7937: LD_INT 2
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 70
7957: PPUSH
7958: LD_VAR 0 1
7962: PPUSH
7963: CALL_OW 250
7967: PPUSH
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL_OW 251
7977: PUSH
7978: LD_INT 5
7980: PLUS
7981: PPUSH
7982: CALL_OW 111
// wait ( 0 0$1 ) ;
7986: LD_INT 35
7988: PPUSH
7989: CALL_OW 67
// until FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 ;
7993: LD_INT 20
7995: PPUSH
7996: LD_INT 22
7998: PUSH
7999: LD_INT 3
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 2
8008: PUSH
8009: LD_INT 21
8011: PUSH
8012: LD_INT 1
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 21
8021: PUSH
8022: LD_INT 2
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PPUSH
8038: CALL_OW 70
8042: PUSH
8043: LD_INT 0
8045: EQUAL
8046: IFFALSE 7908
// end ;
8048: GO 7763
8050: POP
8051: POP
// if dialogLoopBlocker then
8052: LD_EXP 33
8056: IFFALSE 8073
// begin wait ( 0 0$5 ) ;
8058: LD_INT 175
8060: PPUSH
8061: CALL_OW 67
// dialogLoopBlocker = false ;
8065: LD_ADDR_EXP 33
8069: PUSH
8070: LD_INT 0
8072: ST_TO_ADDR
// end ; end ;
8073: PPOPN 1
8075: END
// every 1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
8076: LD_EXP 19
8080: NOT
8081: PUSH
8082: LD_INT 8
8084: PPUSH
8085: LD_INT 22
8087: PUSH
8088: LD_INT 3
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_INT 2
8097: PUSH
8098: LD_INT 21
8100: PUSH
8101: LD_INT 1
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: LD_INT 21
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PPUSH
8127: CALL_OW 71
8131: PUSH
8132: LD_INT 0
8134: GREATER
8135: AND
8136: IFFALSE 8271
8138: GO 8140
8140: DISABLE
8141: LD_INT 0
8143: PPUSH
// begin enable ;
8144: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
8145: LD_ADDR_VAR 0 1
8149: PUSH
8150: LD_INT 8
8152: PPUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 3
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 2
8165: PUSH
8166: LD_INT 21
8168: PUSH
8169: LD_INT 1
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 21
8178: PUSH
8179: LD_INT 2
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 71
8199: PUSH
8200: FOR_IN
8201: IFFALSE 8254
// begin ComMoveXY ( unit , 114 , 98 ) ;
8203: LD_VAR 0 1
8207: PPUSH
8208: LD_INT 114
8210: PPUSH
8211: LD_INT 98
8213: PPUSH
8214: CALL_OW 111
// if dialogLoopBlocker then
8218: LD_EXP 33
8222: IFFALSE 8228
// exit ;
8224: POP
8225: POP
8226: GO 8271
// dialogLoopBlocker = true ;
8228: LD_ADDR_EXP 33
8232: PUSH
8233: LD_INT 1
8235: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
8236: LD_EXP 76
8240: PPUSH
8241: LD_STRING D8-Pla-1
8243: PPUSH
8244: CALL_OW 88
// exit ;
8248: POP
8249: POP
8250: GO 8271
// end ;
8252: GO 8200
8254: POP
8255: POP
// wait ( 0 0$5 ) ;
8256: LD_INT 175
8258: PPUSH
8259: CALL_OW 67
// dialogLoopBlocker = false ;
8263: LD_ADDR_EXP 33
8267: PUSH
8268: LD_INT 0
8270: ST_TO_ADDR
// end ;
8271: PPOPN 1
8273: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8274: LD_EXP 7
8278: NOT
8279: PUSH
8280: LD_INT 9
8282: PPUSH
8283: LD_INT 22
8285: PUSH
8286: LD_INT 3
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: LD_INT 21
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PPUSH
8307: CALL_OW 70
8311: PUSH
8312: LD_INT 0
8314: GREATER
8315: AND
8316: IFFALSE 8333
8318: GO 8320
8320: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
8321: LD_EXP 67
8325: PPUSH
8326: LD_STRING D1a-Kur-1
8328: PPUSH
8329: CALL_OW 88
8333: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( MeetBeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldiers , nearRandom ;
8334: LD_EXP 7
8338: NOT
8339: PUSH
8340: LD_EXP 62
8344: PPUSH
8345: CALL_OW 302
8349: AND
8350: PUSH
8351: LD_INT 29
8353: PPUSH
8354: LD_INT 22
8356: PUSH
8357: LD_INT 3
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PUSH
8364: LD_INT 21
8366: PUSH
8367: LD_INT 1
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PPUSH
8378: CALL_OW 70
8382: PUSH
8383: LD_INT 0
8385: GREATER
8386: AND
8387: IFFALSE 9014
8389: GO 8391
8391: DISABLE
8392: LD_INT 0
8394: PPUSH
8395: PPUSH
8396: PPUSH
8397: PPUSH
8398: PPUSH
// begin enable ;
8399: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
8400: LD_ADDR_VAR 0 2
8404: PUSH
8405: LD_INT 22
8407: PUSH
8408: LD_INT 3
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PUSH
8415: LD_INT 21
8417: PUSH
8418: LD_INT 1
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PPUSH
8429: CALL_OW 69
8433: PUSH
8434: FOR_IN
8435: IFFALSE 9012
// if See ( 6 , unit ) then
8437: LD_INT 6
8439: PPUSH
8440: LD_VAR 0 2
8444: PPUSH
8445: CALL_OW 292
8449: IFFALSE 9010
// begin meetPlatonov = true ;
8451: LD_ADDR_EXP 7
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// InGameOn ;
8459: CALL_OW 8
// DialogueOn ;
8463: CALL_OW 6
// randomMaleSoldiers = UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) ;
8467: LD_ADDR_VAR 0 4
8471: PUSH
8472: LD_EXP 77
8476: PPUSH
8477: LD_INT 26
8479: PUSH
8480: LD_INT 1
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 72
8491: ST_TO_ADDR
// randomMaleSoldiers = randomMaleSoldiers ^ FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_empty ] ] ] ) ;
8492: LD_ADDR_VAR 0 4
8496: PUSH
8497: LD_VAR 0 4
8501: PUSH
8502: LD_INT 8
8504: PPUSH
8505: LD_INT 22
8507: PUSH
8508: LD_INT 6
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PUSH
8515: LD_INT 21
8517: PUSH
8518: LD_INT 3
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PUSH
8525: LD_INT 30
8527: PUSH
8528: LD_INT 31
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: LD_INT 58
8540: PUSH
8541: EMPTY
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: PPUSH
8554: CALL_OW 70
8558: ADD
8559: ST_TO_ADDR
// nearRandom = NearestUnitToUnit ( randomMaleSoldiers , unit ) ;
8560: LD_ADDR_VAR 0 5
8564: PUSH
8565: LD_VAR 0 4
8569: PPUSH
8570: LD_VAR 0 2
8574: PPUSH
8575: CALL_OW 74
8579: ST_TO_ADDR
// if GetType ( nearRandom ) = unit_building then
8580: LD_VAR 0 5
8584: PPUSH
8585: CALL_OW 247
8589: PUSH
8590: LD_INT 3
8592: EQUAL
8593: IFFALSE 8614
// nearRandom = UnitsInside ( nearRandom ) [ 1 ] ;
8595: LD_ADDR_VAR 0 5
8599: PUSH
8600: LD_VAR 0 5
8604: PPUSH
8605: CALL_OW 313
8609: PUSH
8610: LD_INT 1
8612: ARRAY
8613: ST_TO_ADDR
// DialogRandom ( nearRandom , D2-RSol1-1 ,  , false ) ;
8614: LD_VAR 0 5
8618: PPUSH
8619: LD_STRING D2-RSol1-1
8621: PPUSH
8622: LD_STRING 
8624: PPUSH
8625: LD_INT 0
8627: PPUSH
8628: CALL 4209 0 4
// Say ( Burlak , D2-Bur-1 ) ;
8632: LD_EXP 62
8636: PPUSH
8637: LD_STRING D2-Bur-1
8639: PPUSH
8640: CALL_OW 88
// Say ( nearRandom , D2-RSol1-2 ) ;
8644: LD_VAR 0 5
8648: PPUSH
8649: LD_STRING D2-RSol1-2
8651: PPUSH
8652: CALL_OW 88
// DialogueOff ;
8656: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8660: LD_ADDR_VAR 0 3
8664: PUSH
8665: LD_INT 22
8667: PUSH
8668: LD_INT 3
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 21
8677: PUSH
8678: LD_INT 1
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 50
8687: PUSH
8688: EMPTY
8689: LIST
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: PPUSH
8696: CALL_OW 69
8700: ST_TO_ADDR
// for i := 1 to yourUnits do
8701: LD_ADDR_VAR 0 1
8705: PUSH
8706: DOUBLE
8707: LD_INT 1
8709: DEC
8710: ST_TO_ADDR
8711: LD_VAR 0 3
8715: PUSH
8716: FOR_TO
8717: IFFALSE 8786
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
8719: LD_VAR 0 3
8723: PUSH
8724: LD_VAR 0 1
8728: ARRAY
8729: PPUSH
8730: LD_EXP 53
8734: PUSH
8735: LD_VAR 0 1
8739: ARRAY
8740: PUSH
8741: LD_INT 1
8743: ARRAY
8744: PPUSH
8745: LD_EXP 53
8749: PUSH
8750: LD_VAR 0 1
8754: ARRAY
8755: PUSH
8756: LD_INT 2
8758: ARRAY
8759: PPUSH
8760: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
8764: LD_VAR 0 3
8768: PUSH
8769: LD_VAR 0 1
8773: ARRAY
8774: PPUSH
8775: LD_EXP 76
8779: PPUSH
8780: CALL_OW 179
// end ;
8784: GO 8716
8786: POP
8787: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8788: LD_EXP 62
8792: PPUSH
8793: CALL_OW 87
// wait ( 0 0$1 ) ;
8797: LD_INT 35
8799: PPUSH
8800: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8804: LD_EXP 62
8808: PPUSH
8809: LD_EXP 76
8813: PPUSH
8814: CALL_OW 296
8818: PUSH
8819: LD_INT 4
8821: LESS
8822: IFFALSE 8788
// ComTurnUnit ( Platonov , Burlak ) ;
8824: LD_EXP 76
8828: PPUSH
8829: LD_EXP 62
8833: PPUSH
8834: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8838: LD_EXP 76
8842: PPUSH
8843: LD_STRING D2-Pla-2
8845: PPUSH
8846: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8850: LD_EXP 62
8854: PPUSH
8855: LD_STRING D2-Bur-2
8857: PPUSH
8858: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8862: LD_EXP 76
8866: PPUSH
8867: LD_STRING D2-Pla-3
8869: PPUSH
8870: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8874: LD_EXP 62
8878: PPUSH
8879: LD_STRING D2-Bur-3
8881: PPUSH
8882: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8886: LD_EXP 76
8890: PPUSH
8891: LD_STRING D2-Pla-4
8893: PPUSH
8894: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8898: LD_EXP 62
8902: PPUSH
8903: LD_STRING D2-Bur-4
8905: PPUSH
8906: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8910: LD_EXP 76
8914: PPUSH
8915: LD_STRING D2-Pla-5
8917: PPUSH
8918: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8922: LD_INT 1
8924: PUSH
8925: LD_INT 2
8927: PUSH
8928: LD_INT 3
8930: PUSH
8931: LD_INT 4
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL 4542 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8944: LD_EXP 76
8948: PPUSH
8949: LD_STRING D3-Pla-1
8951: PPUSH
8952: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8956: LD_EXP 62
8960: PPUSH
8961: LD_STRING D3-Bur-1
8963: PPUSH
8964: CALL_OW 88
// InGameOff ;
8968: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8972: LD_STRING M2a
8974: PPUSH
8975: CALL_OW 337
// ComFree ( Platonov ) ;
8979: LD_EXP 76
8983: PPUSH
8984: CALL_OW 139
// SetSide ( beria , 3 ) ;
8988: LD_INT 106
8990: PPUSH
8991: LD_INT 3
8993: PPUSH
8994: CALL_OW 235
// canExitBase = false ;
8998: LD_ADDR_EXP 19
9002: PUSH
9003: LD_INT 0
9005: ST_TO_ADDR
// exit ;
9006: POP
9007: POP
9008: GO 9014
// end ;
9010: GO 8434
9012: POP
9013: POP
// end ;
9014: PPOPN 5
9016: END
// export function Dial_LabConstructed ; begin
9017: LD_INT 0
9019: PPUSH
// labConstructed = true ;
9020: LD_ADDR_EXP 8
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// DialogueOn ;
9028: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
9032: LD_EXP 62
9036: PPUSH
9037: LD_STRING D5a-Bur-1
9039: PPUSH
9040: CALL_OW 88
// if workshopConstructed then
9044: LD_EXP 9
9048: IFFALSE 9064
// Say ( Platonov , D5a-Pla-1 ) else
9050: LD_EXP 76
9054: PPUSH
9055: LD_STRING D5a-Pla-1
9057: PPUSH
9058: CALL_OW 88
9062: GO 9076
// Say ( Platonov , D5a-Pla-1a ) ;
9064: LD_EXP 76
9068: PPUSH
9069: LD_STRING D5a-Pla-1a
9071: PPUSH
9072: CALL_OW 88
// DialogueOff ;
9076: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
9080: LD_STRING M2b
9082: PPUSH
9083: CALL_OW 337
// end ;
9087: LD_VAR 0 1
9091: RET
// export function Dial_WorkshopConstructed ; begin
9092: LD_INT 0
9094: PPUSH
// workshopConstructed = true ;
9095: LD_ADDR_EXP 9
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// DialogueOn ;
9103: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
9107: LD_EXP 62
9111: PPUSH
9112: LD_STRING D5b-Bur-1
9114: PPUSH
9115: CALL_OW 88
// if labConstructed then
9119: LD_EXP 8
9123: IFFALSE 9139
// Say ( Platonov , D5b-Pla-1 ) else
9125: LD_EXP 76
9129: PPUSH
9130: LD_STRING D5b-Pla-1
9132: PPUSH
9133: CALL_OW 88
9137: GO 9151
// Say ( Platonov , D5b-Pla-1a ) ;
9139: LD_EXP 76
9143: PPUSH
9144: LD_STRING D5b-Pla-1a
9146: PPUSH
9147: CALL_OW 88
// DialogueOff ;
9151: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
9155: LD_STRING M2c
9157: PPUSH
9158: CALL_OW 337
// end ;
9162: LD_VAR 0 1
9166: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
9167: LD_INT 0
9169: PPUSH
// wait ( 0 0$1 ) ;
9170: LD_INT 35
9172: PPUSH
9173: CALL_OW 67
// CenterNowOnUnits ( building ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
9186: LD_INT 22
9188: PUSH
9189: LD_INT 3
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 21
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PPUSH
9210: CALL_OW 69
9214: PPUSH
9215: CALL_OW 141
// DialogueOn ;
9219: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
9223: LD_EXP 76
9227: PPUSH
9228: LD_STRING D6-Pla-1
9230: PPUSH
9231: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9235: LD_EXP 62
9239: PPUSH
9240: LD_STRING D6-Bur-1
9242: PPUSH
9243: CALL_OW 88
// DialogueOff ;
9247: CALL_OW 7
// case GetBType ( building ) of b_lab :
9251: LD_VAR 0 1
9255: PPUSH
9256: CALL_OW 266
9260: PUSH
9261: LD_INT 6
9263: DOUBLE
9264: EQUAL
9265: IFTRUE 9269
9267: GO 9309
9269: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
9270: LD_INT 106
9272: PPUSH
9273: CALL_OW 274
9277: PPUSH
9278: LD_INT 1
9280: PPUSH
9281: LD_INT 106
9283: PPUSH
9284: CALL_OW 274
9288: PPUSH
9289: LD_INT 1
9291: PPUSH
9292: CALL_OW 275
9296: PUSH
9297: LD_EXP 54
9301: PLUS
9302: PPUSH
9303: CALL_OW 277
9307: GO 9502
9309: LD_INT 2
9311: DOUBLE
9312: EQUAL
9313: IFTRUE 9317
9315: GO 9357
9317: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
9318: LD_INT 106
9320: PPUSH
9321: CALL_OW 274
9325: PPUSH
9326: LD_INT 1
9328: PPUSH
9329: LD_INT 106
9331: PPUSH
9332: CALL_OW 274
9336: PPUSH
9337: LD_INT 1
9339: PPUSH
9340: CALL_OW 275
9344: PUSH
9345: LD_EXP 55
9349: PLUS
9350: PPUSH
9351: CALL_OW 277
9355: GO 9502
9357: LD_INT 26
9359: DOUBLE
9360: EQUAL
9361: IFTRUE 9365
9363: GO 9405
9365: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
9366: LD_INT 106
9368: PPUSH
9369: CALL_OW 274
9373: PPUSH
9374: LD_INT 1
9376: PPUSH
9377: LD_INT 106
9379: PPUSH
9380: CALL_OW 274
9384: PPUSH
9385: LD_INT 1
9387: PPUSH
9388: CALL_OW 275
9392: PUSH
9393: LD_EXP 56
9397: PLUS
9398: PPUSH
9399: CALL_OW 277
9403: GO 9502
9405: LD_INT 4
9407: DOUBLE
9408: EQUAL
9409: IFTRUE 9413
9411: GO 9453
9413: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
9414: LD_INT 106
9416: PPUSH
9417: CALL_OW 274
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: LD_INT 106
9427: PPUSH
9428: CALL_OW 274
9432: PPUSH
9433: LD_INT 1
9435: PPUSH
9436: CALL_OW 275
9440: PUSH
9441: LD_EXP 57
9445: PLUS
9446: PPUSH
9447: CALL_OW 277
9451: GO 9502
9453: LD_INT 31
9455: DOUBLE
9456: EQUAL
9457: IFTRUE 9461
9459: GO 9501
9461: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
9462: LD_INT 106
9464: PPUSH
9465: CALL_OW 274
9469: PPUSH
9470: LD_INT 1
9472: PPUSH
9473: LD_INT 106
9475: PPUSH
9476: CALL_OW 274
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: CALL_OW 275
9488: PUSH
9489: LD_EXP 58
9493: PLUS
9494: PPUSH
9495: CALL_OW 277
9499: GO 9502
9501: POP
// RemoveUnit ( building ) ;
9502: LD_VAR 0 1
9506: PPUSH
9507: CALL_OW 64
// end ;
9511: LD_VAR 0 2
9515: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
9516: LD_EXP 9
9520: PUSH
9521: LD_EXP 8
9525: AND
9526: IFFALSE 9635
9528: GO 9530
9530: DISABLE
// begin DialogueOn ;
9531: CALL_OW 6
// if engineResearched then
9535: LD_EXP 10
9539: IFFALSE 9567
// begin Say ( Burlak , D7b-Bur-1 ) ;
9541: LD_EXP 62
9545: PPUSH
9546: LD_STRING D7b-Bur-1
9548: PPUSH
9549: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
9553: LD_EXP 76
9557: PPUSH
9558: LD_STRING D7b-Pla-1
9560: PPUSH
9561: CALL_OW 88
// end else
9565: GO 9591
// begin Say ( Burlak , D7a-Bur-1 ) ;
9567: LD_EXP 62
9571: PPUSH
9572: LD_STRING D7a-Bur-1
9574: PPUSH
9575: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
9579: LD_EXP 76
9583: PPUSH
9584: LD_STRING D7a-Pla-1
9586: PPUSH
9587: CALL_OW 88
// end ; DialogueOff ;
9591: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9595: LD_STRING M2
9597: PPUSH
9598: CALL_OW 337
// CreateCratesXYR ( 3 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
9602: LD_INT 3
9604: PPUSH
9605: LD_EXP 76
9609: PPUSH
9610: CALL_OW 250
9614: PPUSH
9615: LD_EXP 76
9619: PPUSH
9620: CALL_OW 251
9624: PPUSH
9625: LD_INT 5
9627: PPUSH
9628: LD_INT 1
9630: PPUSH
9631: CALL_OW 56
// end ;
9635: END
// export function Dial_NewCrates ( x , y ) ; begin
9636: LD_INT 0
9638: PPUSH
// wait ( 0 0$18 ) ;
9639: LD_INT 630
9641: PPUSH
9642: CALL_OW 67
// if not spawnCrates then
9646: LD_EXP 21
9650: NOT
9651: IFFALSE 9655
// exit ;
9653: GO 9686
// ComMoveXY ( Platonov , x , y ) ;
9655: LD_EXP 76
9659: PPUSH
9660: LD_VAR 0 1
9664: PPUSH
9665: LD_VAR 0 2
9669: PPUSH
9670: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
9674: LD_EXP 76
9678: PPUSH
9679: LD_STRING D4-Pla-1
9681: PPUSH
9682: CALL_OW 88
// end ;
9686: LD_VAR 0 3
9690: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
9691: LD_INT 0
9693: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9694: LD_ADDR_EXP 13
9698: PUSH
9699: LD_INT 22
9701: PUSH
9702: LD_INT 3
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 21
9711: PUSH
9712: LD_INT 2
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PPUSH
9723: CALL_OW 69
9727: PUSH
9728: LD_INT 1
9730: ARRAY
9731: ST_TO_ADDR
// constructedFirstVehicle = true ;
9732: LD_ADDR_EXP 12
9736: PUSH
9737: LD_INT 1
9739: ST_TO_ADDR
// InGameOn ;
9740: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
9744: LD_VAR 0 1
9748: PPUSH
9749: CALL_OW 87
// wait ( 0 0$3 ) ;
9753: LD_INT 105
9755: PPUSH
9756: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9760: LD_EXP 62
9764: PPUSH
9765: LD_STRING D9-Bur-1
9767: PPUSH
9768: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
9772: LD_EXP 76
9776: PPUSH
9777: LD_EXP 13
9781: PPUSH
9782: CALL_OW 250
9786: PPUSH
9787: LD_EXP 13
9791: PPUSH
9792: CALL_OW 251
9796: PPUSH
9797: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9801: LD_INT 35
9803: PPUSH
9804: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9808: LD_EXP 76
9812: PPUSH
9813: LD_EXP 13
9817: PPUSH
9818: CALL_OW 296
9822: PUSH
9823: LD_INT 4
9825: LESS
9826: IFFALSE 9801
// ComTurnUnit ( Platonov , firstVeh ) ;
9828: LD_EXP 76
9832: PPUSH
9833: LD_EXP 13
9837: PPUSH
9838: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9842: LD_EXP 76
9846: PPUSH
9847: LD_STRING D9-Pla-1
9849: PPUSH
9850: CALL_OW 88
// InGameOff ;
9854: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9858: LD_STRING M3
9860: PPUSH
9861: CALL_OW 337
// canExitBase = true ;
9865: LD_ADDR_EXP 19
9869: PUSH
9870: LD_INT 1
9872: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9873: LD_EXP 76
9877: PPUSH
9878: LD_INT 112
9880: PPUSH
9881: LD_INT 97
9883: PPUSH
9884: CALL_OW 111
// end ;
9888: LD_VAR 0 2
9892: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9893: LD_EXP 13
9897: PPUSH
9898: LD_INT 9
9900: PPUSH
9901: CALL_OW 308
9905: PUSH
9906: LD_EXP 14
9910: NOT
9911: AND
9912: IFFALSE 10766
9914: GO 9916
9916: DISABLE
9917: LD_INT 0
9919: PPUSH
9920: PPUSH
9921: PPUSH
// begin vehicleForKurin = true ;
9922: LD_ADDR_EXP 14
9926: PUSH
9927: LD_INT 1
9929: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9930: LD_ADDR_VAR 0 2
9934: PUSH
9935: LD_EXP 69
9939: PPUSH
9940: LD_INT 25
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PPUSH
9950: CALL_OW 72
9954: PUSH
9955: LD_INT 1
9957: ARRAY
9958: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9959: LD_ADDR_VAR 0 3
9963: PUSH
9964: LD_EXP 69
9968: PPUSH
9969: LD_INT 25
9971: PUSH
9972: LD_INT 3
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PPUSH
9979: CALL_OW 72
9983: PUSH
9984: LD_INT 1
9986: ARRAY
9987: ST_TO_ADDR
// InGameOn ;
9988: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9992: LD_EXP 67
9996: PPUSH
9997: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
10001: LD_EXP 13
10005: PPUSH
10006: LD_EXP 67
10010: PPUSH
10011: CALL_OW 250
10015: PPUSH
10016: LD_EXP 67
10020: PPUSH
10021: CALL_OW 251
10025: PPUSH
10026: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
10030: LD_EXP 67
10034: PPUSH
10035: LD_STRING D10-Kur-1
10037: PPUSH
10038: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10042: LD_INT 35
10044: PPUSH
10045: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
10049: LD_EXP 13
10053: PPUSH
10054: LD_EXP 67
10058: PPUSH
10059: CALL_OW 250
10063: PPUSH
10064: LD_EXP 67
10068: PPUSH
10069: CALL_OW 251
10073: PPUSH
10074: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
10078: LD_EXP 13
10082: PPUSH
10083: LD_EXP 67
10087: PPUSH
10088: CALL_OW 296
10092: PUSH
10093: LD_INT 9
10095: LESS
10096: IFFALSE 10042
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
10098: LD_EXP 13
10102: PPUSH
10103: CALL_OW 313
10107: PPUSH
10108: CALL_OW 121
// wait ( 0 0$1 ) ;
10112: LD_INT 35
10114: PPUSH
10115: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
10119: LD_EXP 13
10123: PPUSH
10124: CALL_OW 256
10128: PUSH
10129: LD_INT 1000
10131: LESS
10132: IFFALSE 10164
// begin ComExitBuilding ( mech ) ;
10134: LD_VAR 0 3
10138: PPUSH
10139: CALL_OW 122
// wait ( 0 0$1 ) ;
10143: LD_INT 35
10145: PPUSH
10146: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
10150: LD_VAR 0 3
10154: PPUSH
10155: LD_EXP 13
10159: PPUSH
10160: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
10164: LD_EXP 13
10168: PPUSH
10169: CALL_OW 261
10173: PUSH
10174: LD_INT 90
10176: LESS
10177: IFFALSE 10212
// begin ComExitBuilding ( eng ) ;
10179: LD_VAR 0 2
10183: PPUSH
10184: CALL_OW 122
// wait ( 0 0$1 ) ;
10188: LD_INT 35
10190: PPUSH
10191: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
10195: LD_VAR 0 2
10199: PPUSH
10200: LD_INT 71
10202: PPUSH
10203: LD_EXP 13
10207: PPUSH
10208: CALL 4780 0 3
// end ; repeat wait ( 0 0$1 ) ;
10212: LD_INT 35
10214: PPUSH
10215: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
10219: LD_EXP 13
10223: PPUSH
10224: CALL_OW 256
10228: PUSH
10229: LD_INT 1000
10231: EQUAL
10232: PUSH
10233: LD_EXP 13
10237: PPUSH
10238: CALL_OW 261
10242: PUSH
10243: LD_INT 90
10245: GREATER
10246: AND
10247: IFFALSE 10212
// if UnitsInside ( firstVeh ) then
10249: LD_EXP 13
10253: PPUSH
10254: CALL_OW 313
10258: IFFALSE 10278
// ComExitVehicle ( UnitsInside ( firstVeh ) [ 1 ] ) ;
10260: LD_EXP 13
10264: PPUSH
10265: CALL_OW 313
10269: PUSH
10270: LD_INT 1
10272: ARRAY
10273: PPUSH
10274: CALL_OW 121
// ComEnterUnit ( eng , kirov ) ;
10278: LD_VAR 0 2
10282: PPUSH
10283: LD_INT 71
10285: PPUSH
10286: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
10290: LD_EXP 13
10294: PPUSH
10295: LD_INT 6
10297: PPUSH
10298: CALL_OW 235
// if belkovReturn then
10302: LD_EXP 6
10306: IFFALSE 10392
// begin if IsInUnit ( Belkov ) then
10308: LD_EXP 64
10312: PPUSH
10313: CALL_OW 310
10317: IFFALSE 10328
// ComExitBuilding ( Belkov ) ;
10319: LD_EXP 64
10323: PPUSH
10324: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10328: LD_INT 35
10330: PPUSH
10331: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
10335: LD_EXP 64
10339: PPUSH
10340: LD_EXP 13
10344: PPUSH
10345: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
10349: LD_EXP 64
10353: PPUSH
10354: CALL_OW 310
10358: PUSH
10359: LD_EXP 13
10363: EQUAL
10364: IFFALSE 10328
// Say ( Belkov , D10-Bel-1 ) ;
10366: LD_EXP 64
10370: PPUSH
10371: LD_STRING D10-Bel-1
10373: PPUSH
10374: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
10378: LD_EXP 67
10382: PPUSH
10383: LD_STRING D10-Kur-2
10385: PPUSH
10386: CALL_OW 88
// end else
10390: GO 10518
// begin if IsInUnit ( Belkov2 ) then
10392: LD_EXP 68
10396: PPUSH
10397: CALL_OW 310
10401: IFFALSE 10412
// ComExitBuilding ( Belkov2 ) ;
10403: LD_EXP 68
10407: PPUSH
10408: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10412: LD_INT 35
10414: PPUSH
10415: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
10419: LD_EXP 68
10423: PPUSH
10424: LD_EXP 13
10428: PPUSH
10429: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
10433: LD_EXP 68
10437: PPUSH
10438: CALL_OW 310
10442: PUSH
10443: LD_EXP 13
10447: EQUAL
10448: IFFALSE 10412
// meetBelkovBrother = true ;
10450: LD_ADDR_EXP 4
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
10458: LD_EXP 68
10462: PPUSH
10463: LD_STRING D10-Bel-1
10465: PPUSH
10466: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
10470: LD_EXP 62
10474: PPUSH
10475: LD_STRING D10-Bur-1
10477: PPUSH
10478: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
10482: LD_EXP 68
10486: PPUSH
10487: LD_STRING D10-Bel-2
10489: PPUSH
10490: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10494: LD_EXP 62
10498: PPUSH
10499: LD_STRING D10-Bur-2
10501: PPUSH
10502: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10506: LD_EXP 67
10510: PPUSH
10511: LD_STRING D10-Kur-2a
10513: PPUSH
10514: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
10518: LD_ADDR_EXP 74
10522: PUSH
10523: EMPTY
10524: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
10525: LD_ADDR_EXP 75
10529: PUSH
10530: EMPTY
10531: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
10532: LD_ADDR_EXP 22
10536: PUSH
10537: LD_INT 1
10539: ST_TO_ADDR
// CreateBelkovTeam ;
10540: CALL 6219 0 0
// ComExitBuilding ( belkovTeam ) ;
10544: LD_EXP 73
10548: PPUSH
10549: CALL_OW 122
// wait ( 0 0$1 ) ;
10553: LD_INT 35
10555: PPUSH
10556: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
10560: LD_ADDR_EXP 72
10564: PUSH
10565: LD_INT 22
10567: PUSH
10568: LD_INT 6
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 21
10577: PUSH
10578: LD_INT 2
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: PUSH
10594: LD_INT 1
10596: ARRAY
10597: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
10598: LD_ADDR_EXP 73
10602: PUSH
10603: LD_EXP 73
10607: PUSH
10608: LD_EXP 72
10612: ADD
10613: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
10614: LD_EXP 73
10618: PPUSH
10619: LD_INT 147
10621: PPUSH
10622: LD_INT 102
10624: PPUSH
10625: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
10629: LD_EXP 73
10633: PPUSH
10634: LD_INT 133
10636: PPUSH
10637: LD_INT 94
10639: PPUSH
10640: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
10644: LD_EXP 73
10648: PPUSH
10649: LD_INT 123
10651: PPUSH
10652: LD_INT 74
10654: PPUSH
10655: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
10659: LD_EXP 73
10663: PPUSH
10664: LD_INT 111
10666: PPUSH
10667: LD_INT 48
10669: PPUSH
10670: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
10674: LD_EXP 73
10678: PPUSH
10679: LD_INT 122
10681: PPUSH
10682: LD_INT 43
10684: PPUSH
10685: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
10689: LD_EXP 73
10693: PPUSH
10694: LD_INT 129
10696: PPUSH
10697: LD_INT 32
10699: PPUSH
10700: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
10704: LD_EXP 73
10708: PPUSH
10709: LD_INT 132
10711: PPUSH
10712: LD_INT 22
10714: PPUSH
10715: CALL_OW 171
// wait ( 0 0$8 ) ;
10719: LD_INT 280
10721: PPUSH
10722: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
10726: LD_EXP 67
10730: PPUSH
10731: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
10735: LD_EXP 67
10739: PPUSH
10740: LD_STRING D10-Kur-2b
10742: PPUSH
10743: CALL_OW 88
// InGameOff ;
10747: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
10751: LD_STRING M4
10753: PPUSH
10754: CALL_OW 337
// backToBeria1 = true ;
10758: LD_ADDR_EXP 15
10762: PUSH
10763: LD_INT 1
10765: ST_TO_ADDR
// end ;
10766: PPOPN 3
10768: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
10769: LD_INT 9
10771: PPUSH
10772: LD_INT 22
10774: PUSH
10775: LD_INT 3
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 21
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 70
10800: PUSH
10801: LD_EXP 14
10805: AND
10806: IFFALSE 10823
10808: GO 10810
10810: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10811: LD_EXP 67
10815: PPUSH
10816: LD_STRING D1a-Kur-1a
10818: PPUSH
10819: CALL_OW 88
10823: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10824: LD_EXP 22
10828: IFFALSE 11231
10830: GO 10832
10832: DISABLE
10833: LD_INT 0
10835: PPUSH
10836: PPUSH
// begin enable ;
10837: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10838: LD_INT 10
10840: PPUSH
10841: LD_INT 22
10843: PUSH
10844: LD_INT 6
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PPUSH
10851: CALL_OW 70
10855: PUSH
10856: LD_INT 0
10858: EQUAL
10859: IFFALSE 10863
// exit ;
10861: GO 11231
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10863: LD_ADDR_VAR 0 1
10867: PUSH
10868: LD_INT 10
10870: PPUSH
10871: LD_INT 22
10873: PUSH
10874: LD_INT 6
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PPUSH
10881: CALL_OW 70
10885: PUSH
10886: FOR_IN
10887: IFFALSE 11217
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10889: LD_VAR 0 1
10893: PPUSH
10894: CALL_OW 247
10898: PUSH
10899: LD_INT 1
10901: EQUAL
10902: PUSH
10903: LD_VAR 0 1
10907: PUSH
10908: LD_EXP 64
10912: EQUAL
10913: NOT
10914: PUSH
10915: LD_VAR 0 1
10919: PUSH
10920: LD_EXP 68
10924: EQUAL
10925: NOT
10926: AND
10927: PUSH
10928: LD_VAR 0 1
10932: PUSH
10933: LD_EXP 65
10937: EQUAL
10938: NOT
10939: AND
10940: AND
10941: IFFALSE 10982
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10943: LD_ADDR_EXP 23
10947: PUSH
10948: LD_EXP 23
10952: PUSH
10953: LD_INT 1
10955: PLUS
10956: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10957: LD_ADDR_EXP 74
10961: PUSH
10962: LD_EXP 74
10966: PUSH
10967: LD_VAR 0 1
10971: ADD
10972: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10973: LD_VAR 0 1
10977: PPUSH
10978: CALL_OW 64
// end ; if unit = Kirilenkova then
10982: LD_VAR 0 1
10986: PUSH
10987: LD_EXP 65
10991: EQUAL
10992: IFFALSE 11015
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10994: LD_EXP 65
10998: PPUSH
10999: LD_STRING 02_TmpKirilenkova
11001: PPUSH
11002: CALL_OW 38
// RemoveUnit ( unit ) ;
11006: LD_VAR 0 1
11010: PPUSH
11011: CALL_OW 64
// end ; if unit = Belkov2 then
11015: LD_VAR 0 1
11019: PUSH
11020: LD_EXP 68
11024: EQUAL
11025: IFFALSE 11048
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
11027: LD_EXP 68
11031: PPUSH
11032: LD_STRING 02_TmpBelkov2
11034: PPUSH
11035: CALL_OW 38
// RemoveUnit ( unit ) ;
11039: LD_VAR 0 1
11043: PPUSH
11044: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
11048: LD_VAR 0 1
11052: PPUSH
11053: CALL_OW 247
11057: PUSH
11058: LD_INT 2
11060: EQUAL
11061: IFFALSE 11215
// begin driver = UnitsInside ( unit ) ;
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_VAR 0 1
11072: PPUSH
11073: CALL_OW 313
11077: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
11078: LD_VAR 0 2
11082: PUSH
11083: LD_INT 1
11085: ARRAY
11086: PUSH
11087: LD_EXP 64
11091: EQUAL
11092: IFFALSE 11117
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
11094: LD_EXP 64
11098: PPUSH
11099: LD_STRING 02_TmpBelkov
11101: PPUSH
11102: CALL_OW 38
// RemoveUnit ( unit ) ;
11106: LD_VAR 0 1
11110: PPUSH
11111: CALL_OW 64
// end else
11115: GO 11138
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
11117: LD_EXP 68
11121: PPUSH
11122: LD_STRING 02_TmpBelkov2
11124: PPUSH
11125: CALL_OW 38
// RemoveUnit ( unit ) ;
11129: LD_VAR 0 1
11133: PPUSH
11134: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
11138: LD_ADDR_EXP 75
11142: PUSH
11143: LD_EXP 75
11147: PUSH
11148: LD_VAR 0 1
11152: PPUSH
11153: CALL_OW 265
11157: PUSH
11158: LD_VAR 0 1
11162: PPUSH
11163: CALL_OW 262
11167: PUSH
11168: LD_VAR 0 1
11172: PPUSH
11173: CALL_OW 263
11177: PUSH
11178: LD_VAR 0 1
11182: PPUSH
11183: CALL_OW 264
11187: PUSH
11188: LD_VAR 0 1
11192: PPUSH
11193: CALL_OW 261
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: ADD
11205: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11206: LD_VAR 0 1
11210: PPUSH
11211: CALL_OW 64
// end ; end ;
11215: GO 10886
11217: POP
11218: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
11219: LD_EXP 74
11223: PPUSH
11224: LD_STRING 02_TmpBelkovTeam
11226: PPUSH
11227: CALL_OW 38
// end ;
11231: PPOPN 2
11233: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
11234: LD_INT 8
11236: PPUSH
11237: LD_INT 22
11239: PUSH
11240: LD_INT 3
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 1
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 71
11265: PUSH
11266: LD_INT 0
11268: EQUAL
11269: PUSH
11270: LD_EXP 15
11274: AND
11275: IFFALSE 11482
11277: GO 11279
11279: DISABLE
11280: LD_INT 0
11282: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
11283: LD_ADDR_VAR 0 1
11287: PUSH
11288: LD_EXP 69
11292: PPUSH
11293: LD_INT 25
11295: PUSH
11296: LD_INT 2
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PPUSH
11303: CALL_OW 72
11307: ST_TO_ADDR
// backToBeria1 = false ;
11308: LD_ADDR_EXP 15
11312: PUSH
11313: LD_INT 0
11315: ST_TO_ADDR
// canExitBase = false ;
11316: LD_ADDR_EXP 19
11320: PUSH
11321: LD_INT 0
11323: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
11324: LD_EXP 76
11328: PPUSH
11329: LD_STRING D11-Pla-1
11331: PPUSH
11332: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
11336: LD_INT 22
11338: PUSH
11339: LD_INT 3
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: LD_INT 21
11348: PUSH
11349: LD_INT 1
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 69
11364: PUSH
11365: LD_INT 1
11367: GREATER
11368: IFFALSE 11384
// Say ( Burlak , D11-Bur-1a ) else
11370: LD_EXP 62
11374: PPUSH
11375: LD_STRING D11-Bur-1a
11377: PPUSH
11378: CALL_OW 88
11382: GO 11396
// Say ( Burlak , D11-Bur-1 ) ;
11384: LD_EXP 62
11388: PPUSH
11389: LD_STRING D11-Bur-1
11391: PPUSH
11392: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
11396: LD_STRING M5
11398: PPUSH
11399: CALL_OW 337
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11403: LD_INT 1
11405: PPUSH
11406: LD_INT 5
11408: PPUSH
11409: CALL_OW 12
11413: PPUSH
11414: LD_INT 26
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL_OW 55
// construcMoreVehicles = true ;
11424: LD_ADDR_EXP 17
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// spawnCrates = true ;
11432: LD_ADDR_EXP 21
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
11440: LD_VAR 0 1
11444: PPUSH
11445: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
11449: LD_VAR 0 1
11453: PPUSH
11454: LD_INT 2
11456: PPUSH
11457: LD_INT 159
11459: PPUSH
11460: LD_INT 112
11462: PPUSH
11463: LD_INT 0
11465: PPUSH
11466: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
11470: LD_VAR 0 1
11474: PPUSH
11475: LD_INT 71
11477: PPUSH
11478: CALL_OW 180
// end ;
11482: PPOPN 1
11484: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
11485: LD_EXP 18
11489: PUSH
11490: LD_INT 22
11492: PUSH
11493: LD_INT 3
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 21
11502: PUSH
11503: LD_INT 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PPUSH
11514: CALL_OW 69
11518: GREATEREQUAL
11519: IFFALSE 12647
11521: GO 11523
11523: DISABLE
11524: LD_INT 0
11526: PPUSH
11527: PPUSH
// begin canRemoveBelkovUnits = false ;
11528: LD_ADDR_EXP 22
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// spawnCrates = false ;
11536: LD_ADDR_EXP 21
11540: PUSH
11541: LD_INT 0
11543: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
11544: LD_INT 22
11546: PUSH
11547: LD_INT 3
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: LD_INT 2
11556: PUSH
11557: LD_INT 21
11559: PUSH
11560: LD_INT 1
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 21
11569: PUSH
11570: LD_INT 2
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PPUSH
11586: CALL_OW 69
11590: PPUSH
11591: CALL_OW 141
// InGameOn ;
11595: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
11599: LD_EXP 76
11603: PPUSH
11604: CALL_OW 85
// DialogueOn ;
11608: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
11612: LD_EXP 62
11616: PPUSH
11617: LD_STRING D12-Bur-1
11619: PPUSH
11620: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
11624: LD_EXP 76
11628: PPUSH
11629: LD_STRING D12-Pla-1
11631: PPUSH
11632: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11636: LD_EXP 62
11640: PPUSH
11641: LD_STRING D12-Bur-2
11643: PPUSH
11644: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11648: LD_EXP 76
11652: PPUSH
11653: LD_STRING D12-Pla-2
11655: PPUSH
11656: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11660: LD_EXP 62
11664: PPUSH
11665: LD_STRING D12-Bur-3
11667: PPUSH
11668: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11672: LD_EXP 76
11676: PPUSH
11677: LD_STRING D12-Pla-3
11679: PPUSH
11680: CALL_OW 88
// DialogueOff ;
11684: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
11688: LD_INT 6
11690: PPUSH
11691: LD_INT 1
11693: PPUSH
11694: LD_INT 1
11696: PPUSH
11697: LD_INT 1
11699: PPUSH
11700: CALL_OW 80
// PrepareAmerican ;
11704: CALL 2906 0 0
// PrepareBelkovReturnTeam ;
11708: CALL 1159 0 0
// if IsOK ( Belkov ) then
11712: LD_EXP 64
11716: PPUSH
11717: CALL_OW 302
11721: IFFALSE 11735
// tmpBelkov = Belkov else
11723: LD_ADDR_VAR 0 1
11727: PUSH
11728: LD_EXP 64
11732: ST_TO_ADDR
11733: GO 11745
// tmpBelkov = Belkov2 ;
11735: LD_ADDR_VAR 0 1
11739: PUSH
11740: LD_EXP 68
11744: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
11745: LD_EXP 72
11749: PPUSH
11750: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
11754: LD_EXP 80
11758: PPUSH
11759: LD_STRING D13-Sol1-1
11761: PPUSH
11762: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
11766: LD_VAR 0 1
11770: PPUSH
11771: LD_STRING D13-Bel-1
11773: PPUSH
11774: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11778: LD_EXP 67
11782: PPUSH
11783: LD_STRING D13-Kur-1
11785: PPUSH
11786: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
11790: LD_VAR 0 1
11794: PPUSH
11795: LD_STRING D13-Bel-2
11797: PPUSH
11798: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11802: LD_EXP 73
11806: PPUSH
11807: LD_INT 121
11809: PPUSH
11810: LD_INT 29
11812: PPUSH
11813: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11817: LD_INT 35
11819: PPUSH
11820: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
11824: LD_EXP 72
11828: PPUSH
11829: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
11833: LD_ADDR_VAR 0 2
11837: PUSH
11838: LD_EXP 73
11842: PPUSH
11843: LD_INT 21
11845: PUSH
11846: LD_INT 1
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 56
11855: PUSH
11856: EMPTY
11857: LIST
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 72
11867: PPUSH
11868: LD_EXP 72
11872: PPUSH
11873: CALL_OW 74
11877: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11878: LD_EXP 72
11882: PPUSH
11883: LD_VAR 0 2
11887: PPUSH
11888: CALL_OW 296
11892: PUSH
11893: LD_INT 5
11895: LESS
11896: IFFALSE 11909
// ComStop ( kirovVehicle ) else
11898: LD_EXP 72
11902: PPUSH
11903: CALL_OW 141
11907: GO 11924
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11909: LD_EXP 73
11913: PPUSH
11914: LD_INT 121
11916: PPUSH
11917: LD_INT 29
11919: PPUSH
11920: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11924: LD_EXP 73
11928: PPUSH
11929: LD_EXP 80
11933: PPUSH
11934: CALL_OW 74
11938: PPUSH
11939: LD_EXP 80
11943: PPUSH
11944: CALL_OW 296
11948: PUSH
11949: LD_INT 5
11951: LESS
11952: IFFALSE 11817
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11954: LD_EXP 72
11958: PUSH
11959: LD_EXP 80
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PPUSH
11968: CALL_OW 87
// ComWalk ( trapTeam ) ;
11972: LD_EXP 81
11976: PPUSH
11977: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11981: LD_EXP 81
11985: PPUSH
11986: LD_EXP 72
11990: PPUSH
11991: CALL_OW 179
// ComStop ( belkovTeam ) ;
11995: LD_EXP 73
11999: PPUSH
12000: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
12004: LD_EXP 73
12008: PPUSH
12009: LD_EXP 80
12013: PPUSH
12014: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
12018: LD_INT 25
12020: PPUSH
12021: LD_INT 22
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 21
12033: PUSH
12034: LD_INT 1
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PPUSH
12045: CALL_OW 70
12049: PPUSH
12050: LD_INT 111
12052: PPUSH
12053: LD_INT 13
12055: PPUSH
12056: CALL_OW 171
// music_class = music_combat ;
12060: LD_ADDR_OWVAR 72
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12068: LD_INT 35
12070: PPUSH
12071: CALL_OW 67
// DialogueOn ;
12075: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
12079: LD_EXP 80
12083: PPUSH
12084: LD_STRING D14-Sol1-1
12086: PPUSH
12087: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
12091: LD_VAR 0 1
12095: PPUSH
12096: LD_STRING D14-Bel-1
12098: PPUSH
12099: CALL_OW 88
// DialogueOff ;
12103: CALL_OW 7
// immortalBelkovTeam = true ;
12107: LD_ADDR_EXP 24
12111: PUSH
12112: LD_INT 1
12114: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
12115: LD_INT 6
12117: PPUSH
12118: LD_INT 1
12120: PPUSH
12121: LD_INT 2
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
12131: LD_EXP 73
12135: PPUSH
12136: LD_INT 107
12138: PPUSH
12139: LD_INT 5
12141: PPUSH
12142: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
12146: LD_EXP 72
12150: PPUSH
12151: LD_INT 107
12153: PPUSH
12154: LD_INT 5
12156: PPUSH
12157: CALL_OW 111
// wait ( 0 0$2 ) ;
12161: LD_INT 70
12163: PPUSH
12164: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
12168: LD_EXP 73
12172: PPUSH
12173: LD_INT 101
12175: PPUSH
12176: LD_INT 19
12178: PPUSH
12179: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
12183: LD_EXP 72
12187: PPUSH
12188: LD_INT 101
12190: PPUSH
12191: LD_INT 19
12193: PPUSH
12194: CALL_OW 111
// wait ( 0 0$2 ) ;
12198: LD_INT 70
12200: PPUSH
12201: CALL_OW 67
// immortalVehLive = 400 ;
12205: LD_ADDR_EXP 25
12209: PUSH
12210: LD_INT 400
12212: ST_TO_ADDR
// SetLives ( kirovVehicle , 500 ) ;
12213: LD_EXP 72
12217: PPUSH
12218: LD_INT 500
12220: PPUSH
12221: CALL_OW 234
// wait ( 0 0$3 ) ;
12225: LD_INT 105
12227: PPUSH
12228: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
12232: LD_VAR 0 1
12236: PPUSH
12237: CALL_OW 121
// wait ( 0 0$1 ) ;
12241: LD_INT 35
12243: PPUSH
12244: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
12248: LD_EXP 80
12252: PPUSH
12253: LD_EXP 72
12257: PPUSH
12258: CALL_OW 120
// AddComHold ( trapTeam ) ;
12262: LD_EXP 81
12266: PPUSH
12267: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
12271: LD_EXP 73
12275: PPUSH
12276: LD_INT 88
12278: PPUSH
12279: LD_INT 18
12281: PPUSH
12282: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12286: LD_INT 35
12288: PPUSH
12289: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
12302: LD_VAR 0 1
12306: PPUSH
12307: LD_INT 15
12309: PPUSH
12310: CALL_OW 308
12314: IFFALSE 12286
// amVeh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
12316: LD_ADDR_EXP 88
12320: PUSH
12321: LD_INT 22
12323: PUSH
12324: LD_INT 1
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 21
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PPUSH
12345: CALL_OW 69
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: ST_TO_ADDR
// ComMoveXY ( FilterUnitsInArea ( NearHillArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 113 , 29 ) ;
12354: LD_INT 28
12356: PPUSH
12357: LD_INT 22
12359: PUSH
12360: LD_INT 1
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 21
12369: PUSH
12370: LD_INT 1
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PPUSH
12381: CALL_OW 70
12385: PPUSH
12386: LD_INT 113
12388: PPUSH
12389: LD_INT 29
12391: PPUSH
12392: CALL_OW 111
// ComMoveXY ( amVeh , 118 , 25 ) ;
12396: LD_EXP 88
12400: PPUSH
12401: LD_INT 118
12403: PPUSH
12404: LD_INT 25
12406: PPUSH
12407: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
12411: LD_VAR 0 1
12415: PPUSH
12416: LD_STRING D14-Bel-1a
12418: PPUSH
12419: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
12423: LD_EXP 67
12427: PPUSH
12428: LD_STRING D14-Kur-1
12430: PPUSH
12431: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
12435: LD_VAR 0 1
12439: PPUSH
12440: LD_STRING D14-Bel-2
12442: PPUSH
12443: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
12447: LD_EXP 67
12451: PPUSH
12452: LD_STRING D14-Kur-2
12454: PPUSH
12455: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
12459: LD_EXP 76
12463: PPUSH
12464: CALL_OW 85
// wait ( 0 0$2 ) ;
12468: LD_INT 70
12470: PPUSH
12471: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
12475: LD_EXP 62
12479: PPUSH
12480: LD_STRING D14a-Bur-1
12482: PPUSH
12483: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
12487: LD_EXP 76
12491: PPUSH
12492: LD_STRING D14a-Pla-1
12494: PPUSH
12495: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
12499: LD_EXP 62
12503: PPUSH
12504: LD_STRING D14a-Bur-2
12506: PPUSH
12507: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
12511: LD_EXP 76
12515: PPUSH
12516: LD_STRING D14a-Pla-2
12518: PPUSH
12519: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
12523: LD_EXP 62
12527: PPUSH
12528: LD_STRING D14a-Bur-3
12530: PPUSH
12531: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
12535: LD_EXP 76
12539: PPUSH
12540: LD_STRING D14a-Pla-3
12542: PPUSH
12543: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
12547: LD_EXP 62
12551: PPUSH
12552: LD_STRING D14a-Bur-4
12554: PPUSH
12555: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
12559: LD_EXP 76
12563: PPUSH
12564: LD_STRING D14a-Pla-4
12566: PPUSH
12567: CALL_OW 88
// InGameOff ;
12571: CALL_OW 9
// immortalBelkovTeam = false ;
12575: LD_ADDR_EXP 24
12579: PUSH
12580: LD_INT 0
12582: ST_TO_ADDR
// activateAMAI = true ;
12583: LD_ADDR_EXP 27
12587: PUSH
12588: LD_INT 1
12590: ST_TO_ADDR
// canExitBase = true ;
12591: LD_ADDR_EXP 19
12595: PUSH
12596: LD_INT 1
12598: ST_TO_ADDR
// canExploreMap = true ;
12599: LD_ADDR_EXP 20
12603: PUSH
12604: LD_INT 1
12606: ST_TO_ADDR
// construcMoreVehicles = false ;
12607: LD_ADDR_EXP 17
12611: PUSH
12612: LD_INT 0
12614: ST_TO_ADDR
// activateBelkovAI = true ;
12615: LD_ADDR_EXP 28
12619: PUSH
12620: LD_INT 1
12622: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
12623: LD_STRING M6
12625: PPUSH
12626: CALL_OW 337
// music_class = 0 ;
12630: LD_ADDR_OWVAR 72
12634: PUSH
12635: LD_INT 0
12637: ST_TO_ADDR
// ComFree ( trapTeam ) ;
12638: LD_EXP 81
12642: PPUSH
12643: CALL_OW 139
// end ;
12647: PPOPN 2
12649: END
// every 0 0$1 trigger GetDistUnitXY ( amVeh , 118 , 25 ) < 6 do
12650: LD_EXP 88
12654: PPUSH
12655: LD_INT 118
12657: PPUSH
12658: LD_INT 25
12660: PPUSH
12661: CALL_OW 297
12665: PUSH
12666: LD_INT 6
12668: LESS
12669: IFFALSE 12764
12671: GO 12673
12673: DISABLE
// begin ComExitVehicle ( trapCommander ) ;
12674: LD_EXP 80
12678: PPUSH
12679: CALL_OW 121
// uc_side = 1 ;
12683: LD_ADDR_OWVAR 20
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// uc_nation = 1 ;
12691: LD_ADDR_OWVAR 21
12695: PUSH
12696: LD_INT 1
12698: ST_TO_ADDR
// PrepareMechanic ( 0 , enemySkillLevel ) ;
12699: LD_INT 0
12701: PPUSH
12702: LD_EXP 59
12706: PPUSH
12707: CALL_OW 383
// amMech = CreateHuman ;
12711: LD_ADDR_EXP 89
12715: PUSH
12716: CALL_OW 44
12720: ST_TO_ADDR
// PlaceUnitArea ( amMech , AmMechSpawnArea , false ) ;
12721: LD_EXP 89
12725: PPUSH
12726: LD_INT 27
12728: PPUSH
12729: LD_INT 0
12731: PPUSH
12732: CALL_OW 49
// ComRepairVehicle ( amMech , amVeh ) ;
12736: LD_EXP 89
12740: PPUSH
12741: LD_EXP 88
12745: PPUSH
12746: CALL_OW 129
// AddComEnterUnit ( amMech , amVeh ) ;
12750: LD_EXP 89
12754: PPUSH
12755: LD_EXP 88
12759: PPUSH
12760: CALL_OW 180
// end ;
12764: END
// every 0 0$1 trigger IsOK ( amMech ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do var nearUnit ;
12765: LD_EXP 89
12769: PPUSH
12770: CALL_OW 302
12774: PUSH
12775: LD_INT 22
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 21
12787: PUSH
12788: LD_INT 2
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 50
12797: PUSH
12798: EMPTY
12799: LIST
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: PPUSH
12806: CALL_OW 69
12810: AND
12811: IFFALSE 13064
12813: GO 12815
12815: DISABLE
12816: LD_INT 0
12818: PPUSH
// begin enable ;
12819: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , amMech ) ;
12820: LD_ADDR_VAR 0 1
12824: PUSH
12825: LD_INT 22
12827: PUSH
12828: LD_INT 3
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 2
12837: PUSH
12838: LD_INT 21
12840: PUSH
12841: LD_INT 1
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 21
12850: PUSH
12851: LD_INT 2
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PPUSH
12867: CALL_OW 69
12871: PPUSH
12872: LD_EXP 89
12876: PPUSH
12877: CALL_OW 74
12881: ST_TO_ADDR
// if GetDistUnits ( nearUnit , amMech ) < 13 then
12882: LD_VAR 0 1
12886: PPUSH
12887: LD_EXP 89
12891: PPUSH
12892: CALL_OW 296
12896: PUSH
12897: LD_INT 13
12899: LESS
12900: IFFALSE 12953
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) else
12902: LD_EXP 89
12906: PPUSH
12907: LD_INT 22
12909: PUSH
12910: LD_INT 1
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 50
12929: PUSH
12930: EMPTY
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 69
12942: PUSH
12943: LD_INT 1
12945: ARRAY
12946: PPUSH
12947: CALL_OW 120
12951: GO 13064
// begin if GetLives ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) = 1000 and not IsInUnit ( amMech ) then
12953: LD_INT 22
12955: PUSH
12956: LD_INT 1
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 21
12965: PUSH
12966: LD_INT 2
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 50
12975: PUSH
12976: EMPTY
12977: LIST
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: LIST
12983: PPUSH
12984: CALL_OW 69
12988: PUSH
12989: LD_INT 1
12991: ARRAY
12992: PPUSH
12993: CALL_OW 256
12997: PUSH
12998: LD_INT 1000
13000: EQUAL
13001: PUSH
13002: LD_EXP 89
13006: PPUSH
13007: CALL_OW 310
13011: NOT
13012: AND
13013: IFFALSE 13064
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
13015: LD_EXP 89
13019: PPUSH
13020: LD_INT 22
13022: PUSH
13023: LD_INT 1
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 21
13032: PUSH
13033: LD_INT 2
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: LD_INT 50
13042: PUSH
13043: EMPTY
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PPUSH
13051: CALL_OW 69
13055: PUSH
13056: LD_INT 1
13058: ARRAY
13059: PPUSH
13060: CALL_OW 120
// end ; end ;
13064: PPOPN 1
13066: END
// every 0 0$1 trigger immortalBelkovTeam do
13067: LD_EXP 24
13071: IFFALSE 13158
13073: GO 13075
13075: DISABLE
// begin enable ;
13076: ENABLE
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_human ] ) , 1000 ) ;
13077: LD_EXP 73
13081: PPUSH
13082: LD_INT 21
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 72
13096: PPUSH
13097: LD_INT 1000
13099: PPUSH
13100: CALL_OW 234
// if UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) then
13104: LD_EXP 73
13108: PPUSH
13109: LD_INT 21
13111: PUSH
13112: LD_INT 2
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PPUSH
13119: CALL_OW 72
13123: IFFALSE 13158
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) [ 1 ] , immortalVehLive ) ;
13125: LD_EXP 73
13129: PPUSH
13130: LD_INT 21
13132: PUSH
13133: LD_INT 2
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PPUSH
13140: CALL_OW 72
13144: PUSH
13145: LD_INT 1
13147: ARRAY
13148: PPUSH
13149: LD_EXP 25
13153: PPUSH
13154: CALL_OW 234
// end ;
13158: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
13159: LD_EXP 20
13163: PUSH
13164: LD_EXP 37
13168: NOT
13169: AND
13170: PUSH
13171: LD_EXP 61
13175: PUSH
13176: LD_INT 0
13178: GREATER
13179: AND
13180: IFFALSE 13200
13182: GO 13184
13184: DISABLE
// begin enable ;
13185: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
13186: LD_ADDR_EXP 61
13190: PUSH
13191: LD_EXP 61
13195: PUSH
13196: LD_INT 35
13198: MINUS
13199: ST_TO_ADDR
// end ;
13200: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
13201: LD_EXP 20
13205: IFFALSE 13289
13207: GO 13209
13209: DISABLE
13210: LD_INT 0
13212: PPUSH
13213: PPUSH
// begin tmp = trapTeam ;
13214: LD_ADDR_VAR 0 2
13218: PUSH
13219: LD_EXP 81
13223: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
13224: LD_ADDR_VAR 0 2
13228: PUSH
13229: LD_VAR 0 2
13233: PUSH
13234: LD_EXP 80
13238: DIFF
13239: ST_TO_ADDR
// for i := 1 to rand ( 2 , 3 ) do
13240: LD_ADDR_VAR 0 1
13244: PUSH
13245: DOUBLE
13246: LD_INT 1
13248: DEC
13249: ST_TO_ADDR
13250: LD_INT 2
13252: PPUSH
13253: LD_INT 3
13255: PPUSH
13256: CALL_OW 12
13260: PUSH
13261: FOR_TO
13262: IFFALSE 13287
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
13264: LD_VAR 0 2
13268: PUSH
13269: LD_VAR 0 1
13273: ARRAY
13274: PPUSH
13275: LD_INT 87
13277: PPUSH
13278: LD_INT 18
13280: PPUSH
13281: CALL_OW 114
13285: GO 13261
13287: POP
13288: POP
// end ;
13289: PPOPN 2
13291: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
13292: LD_EXP 61
13296: PUSH
13297: LD_INT 70
13299: LESS
13300: PUSH
13301: LD_EXP 81
13305: AND
13306: IFFALSE 13335
13308: GO 13310
13310: DISABLE
// begin enable ;
13311: ENABLE
// activateBelkovAI = false ;
13312: LD_ADDR_EXP 28
13316: PUSH
13317: LD_INT 0
13319: ST_TO_ADDR
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
13320: LD_EXP 73
13324: PPUSH
13325: LD_INT 120
13327: PPUSH
13328: LD_INT 28
13330: PPUSH
13331: CALL_OW 114
// end ;
13335: END
// every 0 0$1 trigger ( not sawLeftBunker or not sawRightBunker ) and canExploreMap do var bunker ;
13336: LD_EXP 29
13340: NOT
13341: PUSH
13342: LD_EXP 30
13346: NOT
13347: OR
13348: PUSH
13349: LD_EXP 20
13353: AND
13354: IFFALSE 13816
13356: GO 13358
13358: DISABLE
13359: LD_INT 0
13361: PPUSH
// begin enable ;
13362: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
13363: LD_ADDR_VAR 0 1
13367: PUSH
13368: LD_INT 22
13370: PUSH
13371: LD_INT 1
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 21
13380: PUSH
13381: LD_INT 3
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 30
13390: PUSH
13391: LD_INT 31
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: LIST
13402: PPUSH
13403: CALL_OW 69
13407: PUSH
13408: FOR_IN
13409: IFFALSE 13814
// begin if See ( 3 , bunker ) then
13411: LD_INT 3
13413: PPUSH
13414: LD_VAR 0 1
13418: PPUSH
13419: CALL_OW 292
13423: IFFALSE 13812
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
13425: LD_VAR 0 1
13429: PUSH
13430: LD_EXP 82
13434: IN
13435: PUSH
13436: LD_EXP 29
13440: NOT
13441: AND
13442: PUSH
13443: LD_INT 18
13445: PPUSH
13446: LD_INT 22
13448: PUSH
13449: LD_INT 3
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: PPUSH
13459: CALL_OW 70
13463: NOT
13464: AND
13465: IFFALSE 13658
// begin sawLeftBunker = true ;
13467: LD_ADDR_EXP 29
13471: PUSH
13472: LD_INT 1
13474: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13475: LD_VAR 0 1
13479: PPUSH
13480: CALL_OW 85
// DialogueOn ;
13484: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
13488: LD_EXP 62
13492: PPUSH
13493: LD_STRING D15-Bur-1
13495: PPUSH
13496: CALL_OW 88
// if IsOK ( Gnyevko ) or IsOK ( Kovalyuk ) then
13500: LD_EXP 63
13504: PPUSH
13505: CALL_OW 302
13509: PUSH
13510: LD_EXP 70
13514: PPUSH
13515: CALL_OW 302
13519: OR
13520: IFFALSE 13615
// begin if IsOK ( Gnyevko ) then
13522: LD_EXP 63
13526: PPUSH
13527: CALL_OW 302
13531: IFFALSE 13545
// Say ( Gnyevko , D15-Gny-1 ) ;
13533: LD_EXP 63
13537: PPUSH
13538: LD_STRING D15-Gny-1
13540: PPUSH
13541: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13545: LD_EXP 70
13549: PPUSH
13550: CALL_OW 302
13554: IFFALSE 13568
// Say ( Kovalyuk , D15-Kov-1 ) ;
13556: LD_EXP 70
13560: PPUSH
13561: LD_STRING D15-Kov-1
13563: PPUSH
13564: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
13568: LD_EXP 62
13572: PPUSH
13573: LD_STRING D15-Bur-2
13575: PPUSH
13576: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13580: LD_EXP 70
13584: PPUSH
13585: CALL_OW 302
13589: IFFALSE 13603
// Say ( Kovalyuk , D15-Kov-2 ) ;
13591: LD_EXP 70
13595: PPUSH
13596: LD_STRING D15-Kov-2
13598: PPUSH
13599: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13603: LD_EXP 62
13607: PPUSH
13608: LD_STRING D15-Bur-3
13610: PPUSH
13611: CALL_OW 88
// end ; DialogueOff ;
13615: CALL_OW 7
// if raportForPlatonov = 2 then
13619: LD_EXP 39
13623: PUSH
13624: LD_INT 2
13626: EQUAL
13627: IFFALSE 13639
// raportForPlatonov = 1 else
13629: LD_ADDR_EXP 39
13633: PUSH
13634: LD_INT 1
13636: ST_TO_ADDR
13637: GO 13647
// raportForPlatonov = 3 ;
13639: LD_ADDR_EXP 39
13643: PUSH
13644: LD_INT 3
13646: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13647: LD_STRING M7
13649: PPUSH
13650: CALL_OW 337
// exit ;
13654: POP
13655: POP
13656: GO 13816
// end ; if bunker in rightBunkers and not sawRightBunker then
13658: LD_VAR 0 1
13662: PUSH
13663: LD_EXP 83
13667: IN
13668: PUSH
13669: LD_EXP 30
13673: NOT
13674: AND
13675: IFFALSE 13812
// begin sawRightBunker = true ;
13677: LD_ADDR_EXP 30
13681: PUSH
13682: LD_INT 1
13684: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13685: LD_VAR 0 1
13689: PPUSH
13690: CALL_OW 85
// DialogueOn ;
13694: CALL_OW 6
// if IsOK ( Kovalyuk ) then
13698: LD_EXP 70
13702: PPUSH
13703: CALL_OW 302
13707: IFFALSE 13776
// begin if sawLeftBunker then
13709: LD_EXP 29
13713: IFFALSE 13729
// Say ( Kovalyuk , D16-Kov-1a ) else
13715: LD_EXP 70
13719: PPUSH
13720: LD_STRING D16-Kov-1a
13722: PPUSH
13723: CALL_OW 88
13727: GO 13741
// Say ( Kovalyuk , D16-Kov-1 ) ;
13729: LD_EXP 70
13733: PPUSH
13734: LD_STRING D16-Kov-1
13736: PPUSH
13737: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13741: LD_EXP 62
13745: PPUSH
13746: LD_STRING D16-Bur-1
13748: PPUSH
13749: CALL_OW 88
// if IsOK ( Gnyevko ) then
13753: LD_EXP 63
13757: PPUSH
13758: CALL_OW 302
13762: IFFALSE 13776
// Say ( Gnyevko , D16-Gny-1 ) ;
13764: LD_EXP 63
13768: PPUSH
13769: LD_STRING D16-Gny-1
13771: PPUSH
13772: CALL_OW 88
// end ; DialogueOff ;
13776: CALL_OW 7
// if raportForPlatonov = 3 then
13780: LD_EXP 39
13784: PUSH
13785: LD_INT 3
13787: EQUAL
13788: IFFALSE 13800
// raportForPlatonov = 1 else
13790: LD_ADDR_EXP 39
13794: PUSH
13795: LD_INT 1
13797: ST_TO_ADDR
13798: GO 13808
// raportForPlatonov = 2 ;
13800: LD_ADDR_EXP 39
13804: PUSH
13805: LD_INT 2
13807: ST_TO_ADDR
// exit ;
13808: POP
13809: POP
13810: GO 13816
// end ; end ; end ;
13812: GO 13408
13814: POP
13815: POP
// end ;
13816: PPOPN 1
13818: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and canExploreMap and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13819: LD_EXP 32
13823: NOT
13824: PUSH
13825: LD_EXP 83
13829: AND
13830: PUSH
13831: LD_EXP 20
13835: AND
13836: PUSH
13837: LD_EXP 70
13841: PPUSH
13842: CALL_OW 302
13846: PUSH
13847: LD_EXP 63
13851: PPUSH
13852: CALL_OW 302
13856: OR
13857: AND
13858: IFFALSE 14046
13860: GO 13862
13862: DISABLE
13863: LD_INT 0
13865: PPUSH
// begin enable ;
13866: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13867: LD_ADDR_VAR 0 1
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 21
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 21
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: PUSH
13919: FOR_IN
13920: IFFALSE 14044
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
13922: LD_VAR 0 1
13926: PPUSH
13927: CALL_OW 320
13931: PUSH
13932: LD_EXP 83
13936: PUSH
13937: LD_INT 1
13939: ARRAY
13940: EQUAL
13941: PUSH
13942: LD_VAR 0 1
13946: PPUSH
13947: CALL_OW 320
13951: PUSH
13952: LD_EXP 83
13956: PUSH
13957: LD_INT 2
13959: ARRAY
13960: EQUAL
13961: OR
13962: IFFALSE 14042
// begin dialogAttackRightBunkers = true ;
13964: LD_ADDR_EXP 32
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// DialogueOn ;
13972: CALL_OW 6
// if IsOK ( Gnyevko ) then
13976: LD_EXP 63
13980: PPUSH
13981: CALL_OW 302
13985: IFFALSE 13999
// Say ( Gnyevko , D16A-Gny-1 ) ;
13987: LD_EXP 63
13991: PPUSH
13992: LD_STRING D16A-Gny-1
13994: PPUSH
13995: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13999: LD_EXP 70
14003: PPUSH
14004: CALL_OW 302
14008: IFFALSE 14022
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14010: LD_EXP 70
14014: PPUSH
14015: LD_STRING D16A-Kov-1
14017: PPUSH
14018: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
14022: LD_EXP 62
14026: PPUSH
14027: LD_STRING D16A-Bur-1
14029: PPUSH
14030: CALL_OW 88
// DialogueOff ;
14034: CALL_OW 7
// exit ;
14038: POP
14039: POP
14040: GO 14046
// end ; end ;
14042: GO 13919
14044: POP
14045: POP
// end ;
14046: PPOPN 1
14048: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
14049: LD_INT 18
14051: PPUSH
14052: LD_INT 22
14054: PUSH
14055: LD_INT 3
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: EMPTY
14063: LIST
14064: PPUSH
14065: CALL_OW 70
14069: PUSH
14070: LD_EXP 29
14074: NOT
14075: AND
14076: IFFALSE 14459
14078: GO 14080
14080: DISABLE
14081: LD_INT 0
14083: PPUSH
// begin sawLeftBunker = true ;
14084: LD_ADDR_EXP 29
14088: PUSH
14089: LD_INT 1
14091: ST_TO_ADDR
// if playerGetSupport then
14092: LD_EXP 34
14096: IFFALSE 14115
// decsToChoose = [ 1 , 3 ] else
14098: LD_ADDR_VAR 0 1
14102: PUSH
14103: LD_INT 1
14105: PUSH
14106: LD_INT 3
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: ST_TO_ADDR
14113: GO 14134
// decsToChoose = [ 1 , 2 , 3 ] ;
14115: LD_ADDR_VAR 0 1
14119: PUSH
14120: LD_INT 1
14122: PUSH
14123: LD_INT 2
14125: PUSH
14126: LD_INT 3
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
14134: LD_STRING QAttackBw
14136: PPUSH
14137: LD_VAR 0 1
14141: PPUSH
14142: CALL_OW 98
14146: PUSH
14147: LD_INT 1
14149: DOUBLE
14150: EQUAL
14151: IFTRUE 14155
14153: GO 14248
14155: POP
// begin DialogueOn ;
14156: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
14160: LD_EXP 62
14164: PPUSH
14165: LD_STRING D17-Bur-1
14167: PPUSH
14168: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
14172: LD_EXP 76
14176: PPUSH
14177: LD_STRING D17-Pla-1
14179: PPUSH
14180: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
14184: LD_EXP 62
14188: PPUSH
14189: LD_STRING D17-Bur-2
14191: PPUSH
14192: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
14196: LD_EXP 76
14200: PPUSH
14201: LD_STRING D17-Pla-2
14203: PPUSH
14204: CALL_OW 94
// DialogueOff ;
14208: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
14212: LD_EXP 42
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: LD_INT 3
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: IN
14227: NOT
14228: IFFALSE 14246
// begin initiative = 1 ;
14230: LD_ADDR_EXP 42
14234: PUSH
14235: LD_INT 1
14237: ST_TO_ADDR
// platonovOpinion = 2 ;
14238: LD_ADDR_EXP 5
14242: PUSH
14243: LD_INT 2
14245: ST_TO_ADDR
// end ; end ; 2 :
14246: GO 14389
14248: LD_INT 2
14250: DOUBLE
14251: EQUAL
14252: IFTRUE 14256
14254: GO 14361
14256: POP
// begin DialogueOn ;
14257: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
14261: LD_EXP 62
14265: PPUSH
14266: LD_STRING D18-Bur-1
14268: PPUSH
14269: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
14273: LD_EXP 76
14277: PPUSH
14278: LD_STRING D18-Pla-1
14280: PPUSH
14281: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
14285: LD_EXP 62
14289: PPUSH
14290: LD_STRING D18-Bur-2
14292: PPUSH
14293: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
14297: LD_EXP 76
14301: PPUSH
14302: LD_STRING D18-Pla-2
14304: PPUSH
14305: CALL_OW 94
// DialogueOff ;
14309: CALL_OW 7
// playerGetSupport = true ;
14313: LD_ADDR_EXP 34
14317: PUSH
14318: LD_INT 1
14320: ST_TO_ADDR
// medalForGetSupport = false ;
14321: LD_ADDR_EXP 40
14325: PUSH
14326: LD_INT 0
14328: ST_TO_ADDR
// PlatonovSendSupport ;
14329: CALL 6675 0 0
// if initiative <> 3 then
14333: LD_EXP 42
14337: PUSH
14338: LD_INT 3
14340: NONEQUAL
14341: IFFALSE 14359
// begin initiative = 1 ;
14343: LD_ADDR_EXP 42
14347: PUSH
14348: LD_INT 1
14350: ST_TO_ADDR
// platonovOpinion = 2 ;
14351: LD_ADDR_EXP 5
14355: PUSH
14356: LD_INT 2
14358: ST_TO_ADDR
// end ; end ; 3 :
14359: GO 14389
14361: LD_INT 3
14363: DOUBLE
14364: EQUAL
14365: IFTRUE 14369
14367: GO 14388
14369: POP
// begin initiative = 3 ;
14370: LD_ADDR_EXP 42
14374: PUSH
14375: LD_INT 3
14377: ST_TO_ADDR
// platonovOpinion = 0 ;
14378: LD_ADDR_EXP 5
14382: PUSH
14383: LD_INT 0
14385: ST_TO_ADDR
// end ; end ;
14386: GO 14389
14388: POP
// if IsOK ( Gnyevko ) then
14389: LD_EXP 63
14393: PPUSH
14394: CALL_OW 302
14398: IFFALSE 14424
// begin Say ( Gnyevko , D19-Gny-1 ) ;
14400: LD_EXP 63
14404: PPUSH
14405: LD_STRING D19-Gny-1
14407: PPUSH
14408: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
14412: LD_EXP 62
14416: PPUSH
14417: LD_STRING D19-Bur-1
14419: PPUSH
14420: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
14424: LD_EXP 70
14428: PPUSH
14429: CALL_OW 302
14433: IFFALSE 14459
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
14435: LD_EXP 70
14439: PPUSH
14440: LD_STRING D19-Kov-1
14442: PPUSH
14443: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
14447: LD_EXP 62
14451: PPUSH
14452: LD_STRING D19-Bur-2
14454: PPUSH
14455: CALL_OW 88
// end ; end ;
14459: PPOPN 1
14461: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and canExploreMap and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
14462: LD_EXP 31
14466: NOT
14467: PUSH
14468: LD_EXP 82
14472: AND
14473: PUSH
14474: LD_EXP 20
14478: AND
14479: PUSH
14480: LD_INT 18
14482: PPUSH
14483: LD_INT 22
14485: PUSH
14486: LD_INT 3
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: EMPTY
14494: LIST
14495: PPUSH
14496: CALL_OW 70
14500: PUSH
14501: LD_INT 0
14503: EQUAL
14504: AND
14505: PUSH
14506: LD_EXP 70
14510: PPUSH
14511: CALL_OW 302
14515: PUSH
14516: LD_EXP 63
14520: PPUSH
14521: CALL_OW 302
14525: OR
14526: AND
14527: IFFALSE 14715
14529: GO 14531
14531: DISABLE
14532: LD_INT 0
14534: PPUSH
// begin enable ;
14535: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14536: LD_ADDR_VAR 0 1
14540: PUSH
14541: LD_INT 22
14543: PUSH
14544: LD_INT 3
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 2
14553: PUSH
14554: LD_INT 21
14556: PUSH
14557: LD_INT 1
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 21
14566: PUSH
14567: LD_INT 2
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: LIST
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PPUSH
14583: CALL_OW 69
14587: PUSH
14588: FOR_IN
14589: IFFALSE 14713
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
14591: LD_VAR 0 1
14595: PPUSH
14596: CALL_OW 320
14600: PUSH
14601: LD_EXP 82
14605: PUSH
14606: LD_INT 1
14608: ARRAY
14609: EQUAL
14610: PUSH
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 320
14620: PUSH
14621: LD_EXP 82
14625: PUSH
14626: LD_INT 2
14628: ARRAY
14629: EQUAL
14630: OR
14631: IFFALSE 14711
// begin dialogAttackLeftBunkers = true ;
14633: LD_ADDR_EXP 31
14637: PUSH
14638: LD_INT 1
14640: ST_TO_ADDR
// DialogueOn ;
14641: CALL_OW 6
// if IsOK ( Gnyevko ) then
14645: LD_EXP 63
14649: PPUSH
14650: CALL_OW 302
14654: IFFALSE 14668
// Say ( Gnyevko , D19A-Gny-1 ) ;
14656: LD_EXP 63
14660: PPUSH
14661: LD_STRING D19A-Gny-1
14663: PPUSH
14664: CALL_OW 88
// if IsOK ( Kovalyuk ) then
14668: LD_EXP 70
14672: PPUSH
14673: CALL_OW 302
14677: IFFALSE 14691
// Say ( Kovalyuk , D19A-Kov-1 ) ;
14679: LD_EXP 70
14683: PPUSH
14684: LD_STRING D19A-Kov-1
14686: PPUSH
14687: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
14691: LD_EXP 62
14695: PPUSH
14696: LD_STRING D16A-Bur-1
14698: PPUSH
14699: CALL_OW 88
// DialogueOff ;
14703: CALL_OW 7
// exit ;
14707: POP
14708: POP
14709: GO 14715
// end ; end ;
14711: GO 14588
14713: POP
14714: POP
// end ;
14715: PPOPN 1
14717: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14718: LD_EXP 82
14722: NOT
14723: PUSH
14724: LD_INT 17
14726: PPUSH
14727: LD_INT 22
14729: PUSH
14730: LD_INT 1
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 21
14739: PUSH
14740: LD_INT 3
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 30
14749: PUSH
14750: LD_INT 31
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 50
14759: PUSH
14760: EMPTY
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 70
14773: PUSH
14774: LD_INT 0
14776: EQUAL
14777: OR
14778: PUSH
14779: LD_EXP 20
14783: AND
14784: IFFALSE 14835
14786: GO 14788
14788: DISABLE
// begin leftBunkers = [ ] ;
14789: LD_ADDR_EXP 82
14793: PUSH
14794: EMPTY
14795: ST_TO_ADDR
// DialogueOn ;
14796: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
14800: LD_EXP 62
14804: PPUSH
14805: LD_STRING D20-Bur-1
14807: PPUSH
14808: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
14812: LD_EXP 76
14816: PPUSH
14817: LD_STRING D20-Pla-1
14819: PPUSH
14820: CALL_OW 88
// DialogueOff ;
14824: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
14828: LD_STRING M8
14830: PPUSH
14831: CALL_OW 337
// end ;
14835: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14836: LD_EXP 83
14840: NOT
14841: PUSH
14842: LD_INT 16
14844: PPUSH
14845: LD_INT 22
14847: PUSH
14848: LD_INT 1
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 21
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 30
14867: PUSH
14868: LD_INT 31
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 50
14877: PUSH
14878: EMPTY
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 70
14891: PUSH
14892: LD_INT 0
14894: EQUAL
14895: OR
14896: PUSH
14897: LD_EXP 20
14901: AND
14902: IFFALSE 14946
14904: GO 14906
14906: DISABLE
// begin rightBunkers = [ ] ;
14907: LD_ADDR_EXP 83
14911: PUSH
14912: EMPTY
14913: ST_TO_ADDR
// DialogueOn ;
14914: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
14918: LD_EXP 62
14922: PPUSH
14923: LD_STRING D20a-Bur-1
14925: PPUSH
14926: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
14930: LD_EXP 76
14934: PPUSH
14935: LD_STRING D20a-Pla-1
14937: PPUSH
14938: CALL_OW 88
// DialogueOff ;
14942: CALL_OW 7
// end ;
14946: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
14947: LD_EXP 35
14951: NOT
14952: PUSH
14953: LD_EXP 73
14957: AND
14958: IFFALSE 15453
14960: GO 14962
14962: DISABLE
14963: LD_INT 0
14965: PPUSH
14966: PPUSH
14967: PPUSH
// begin enable ;
14968: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14969: LD_ADDR_VAR 0 1
14973: PUSH
14974: LD_INT 22
14976: PUSH
14977: LD_INT 3
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 2
14986: PUSH
14987: LD_INT 21
14989: PUSH
14990: LD_INT 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 21
14999: PUSH
15000: LD_INT 2
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PPUSH
15016: CALL_OW 69
15020: PUSH
15021: FOR_IN
15022: IFFALSE 15451
// for trapUnit in trapTeam do
15024: LD_ADDR_VAR 0 2
15028: PUSH
15029: LD_EXP 81
15033: PUSH
15034: FOR_IN
15035: IFFALSE 15447
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
15037: LD_VAR 0 1
15041: PPUSH
15042: LD_VAR 0 2
15046: PPUSH
15047: CALL_OW 296
15051: PUSH
15052: LD_INT 16
15054: LESS
15055: IFFALSE 15445
// begin saveBelkovDecision = true ;
15057: LD_ADDR_EXP 35
15061: PUSH
15062: LD_INT 1
15064: ST_TO_ADDR
// if playerGetSupport then
15065: LD_EXP 34
15069: IFFALSE 15088
// decsToChoose = [ 1 , 3 ] else
15071: LD_ADDR_VAR 0 3
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: LD_INT 3
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: ST_TO_ADDR
15086: GO 15107
// decsToChoose = [ 1 , 2 , 3 ] ;
15088: LD_ADDR_VAR 0 3
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: LD_INT 2
15098: PUSH
15099: LD_INT 3
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
15107: LD_STRING QAttackAm
15109: PPUSH
15110: LD_VAR 0 3
15114: PPUSH
15115: CALL_OW 98
15119: PUSH
15120: LD_INT 1
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15128
15126: GO 15197
15128: POP
// begin DialogueOn ;
15129: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
15133: LD_EXP 62
15137: PPUSH
15138: LD_STRING D21-Bur-1
15140: PPUSH
15141: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
15145: LD_EXP 76
15149: PPUSH
15150: LD_STRING D21-Pla-1
15152: PPUSH
15153: CALL_OW 94
// DialogueOff ;
15157: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
15161: LD_EXP 42
15165: PUSH
15166: LD_INT 2
15168: PUSH
15169: LD_INT 3
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: IN
15176: NOT
15177: IFFALSE 15195
// begin initiative = 1 ;
15179: LD_ADDR_EXP 42
15183: PUSH
15184: LD_INT 1
15186: ST_TO_ADDR
// platonovOpinion = 2 ;
15187: LD_ADDR_EXP 5
15191: PUSH
15192: LD_INT 2
15194: ST_TO_ADDR
// end ; end ; 2 :
15195: GO 15389
15197: LD_INT 2
15199: DOUBLE
15200: EQUAL
15201: IFTRUE 15205
15203: GO 15361
15205: POP
// begin DialogueOn ;
15206: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
15210: LD_EXP 62
15214: PPUSH
15215: LD_STRING D22-Bur-1
15217: PPUSH
15218: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
15222: LD_EXP 34
15226: PUSH
15227: LD_EXP 82
15231: PUSH
15232: LD_INT 0
15234: EQUAL
15235: PUSH
15236: LD_EXP 83
15240: PUSH
15241: LD_INT 0
15243: EQUAL
15244: OR
15245: AND
15246: IFFALSE 15260
// Say ( Platonov , D22-Pla-1b ) ;
15248: LD_EXP 76
15252: PPUSH
15253: LD_STRING D22-Pla-1b
15255: PPUSH
15256: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
15260: LD_EXP 34
15264: PUSH
15265: LD_EXP 82
15269: PUSH
15270: LD_EXP 83
15274: OR
15275: AND
15276: IFFALSE 15290
// Say ( Platonov , D22-Pla-1a ) ;
15278: LD_EXP 76
15282: PPUSH
15283: LD_STRING D22-Pla-1a
15285: PPUSH
15286: CALL_OW 88
// if not playerGetSupport then
15290: LD_EXP 34
15294: NOT
15295: IFFALSE 15329
// begin Say ( Platonov , D22-Pla-1 ) ;
15297: LD_EXP 76
15301: PPUSH
15302: LD_STRING D22-Pla-1
15304: PPUSH
15305: CALL_OW 88
// playerGetSupport = true ;
15309: LD_ADDR_EXP 34
15313: PUSH
15314: LD_INT 1
15316: ST_TO_ADDR
// medalForGetSupport = false ;
15317: LD_ADDR_EXP 40
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// PlatonovSendSupport ;
15325: CALL 6675 0 0
// end ; DialogueOff ;
15329: CALL_OW 7
// if initiative <> 3 then
15333: LD_EXP 42
15337: PUSH
15338: LD_INT 3
15340: NONEQUAL
15341: IFFALSE 15359
// begin initiative = 2 ;
15343: LD_ADDR_EXP 42
15347: PUSH
15348: LD_INT 2
15350: ST_TO_ADDR
// platonovOpinion = 1 ;
15351: LD_ADDR_EXP 5
15355: PUSH
15356: LD_INT 1
15358: ST_TO_ADDR
// end ; end ; 3 :
15359: GO 15389
15361: LD_INT 3
15363: DOUBLE
15364: EQUAL
15365: IFTRUE 15369
15367: GO 15388
15369: POP
// begin initiative = 3 ;
15370: LD_ADDR_EXP 42
15374: PUSH
15375: LD_INT 3
15377: ST_TO_ADDR
// platonovOpinion = 0 ;
15378: LD_ADDR_EXP 5
15382: PUSH
15383: LD_INT 0
15385: ST_TO_ADDR
// end ; end ;
15386: GO 15389
15388: POP
// if IsOK ( Gnyevko ) then
15389: LD_EXP 63
15393: PPUSH
15394: CALL_OW 302
15398: IFFALSE 15424
// begin Say ( Gnyevko , D23-Gny-1 ) ;
15400: LD_EXP 63
15404: PPUSH
15405: LD_STRING D23-Gny-1
15407: PPUSH
15408: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
15412: LD_EXP 62
15416: PPUSH
15417: LD_STRING D23-Bur-1
15419: PPUSH
15420: CALL_OW 88
// end ; saveBelkovObjective = true ;
15424: LD_ADDR_EXP 36
15428: PUSH
15429: LD_INT 1
15431: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
15432: LD_STRING M9
15434: PPUSH
15435: CALL_OW 337
// exit ;
15439: POP
15440: POP
15441: POP
15442: POP
15443: GO 15453
// end ;
15445: GO 15034
15447: POP
15448: POP
15449: GO 15021
15451: POP
15452: POP
// end ;
15453: PPOPN 3
15455: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
15456: LD_EXP 20
15460: PUSH
15461: LD_EXP 81
15465: NOT
15466: AND
15467: PUSH
15468: LD_EXP 37
15472: NOT
15473: AND
15474: IFFALSE 15514
15476: GO 15478
15478: DISABLE
// begin belkovSaved = true ;
15479: LD_ADDR_EXP 37
15483: PUSH
15484: LD_INT 1
15486: ST_TO_ADDR
// activateBelkovAI = false ;
15487: LD_ADDR_EXP 28
15491: PUSH
15492: LD_INT 0
15494: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
15495: LD_EXP 73
15499: PPUSH
15500: LD_INT 3
15502: PPUSH
15503: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
15507: LD_STRING M9a
15509: PPUSH
15510: CALL_OW 337
// end ;
15514: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
15515: LD_EXP 35
15519: PUSH
15520: LD_EXP 64
15524: PPUSH
15525: CALL_OW 301
15529: PUSH
15530: LD_EXP 68
15534: PPUSH
15535: CALL_OW 301
15539: PUSH
15540: LD_EXP 64
15544: PPUSH
15545: CALL_OW 255
15549: PUSH
15550: LD_INT 6
15552: EQUAL
15553: PUSH
15554: LD_EXP 68
15558: PPUSH
15559: CALL_OW 255
15563: PUSH
15564: LD_INT 6
15566: EQUAL
15567: OR
15568: AND
15569: OR
15570: AND
15571: IFFALSE 15591
15573: GO 15575
15575: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
15576: LD_STRING M9a
15578: PPUSH
15579: CALL_OW 337
// saveBelkovObjective = false ;
15583: LD_ADDR_EXP 36
15587: PUSH
15588: LD_INT 0
15590: ST_TO_ADDR
// end ;
15591: END
// every 0 0$5 trigger belkovSaved and ( ( GetDistUnits ( Burlak , Belkov ) < 14 and belkovReturn ) or ( GetDistUnits ( Burlak , Belkov2 ) < 14 and not belkovReturn ) ) do
15592: LD_EXP 37
15596: PUSH
15597: LD_EXP 62
15601: PPUSH
15602: LD_EXP 64
15606: PPUSH
15607: CALL_OW 296
15611: PUSH
15612: LD_INT 14
15614: LESS
15615: PUSH
15616: LD_EXP 6
15620: AND
15621: PUSH
15622: LD_EXP 62
15626: PPUSH
15627: LD_EXP 68
15631: PPUSH
15632: CALL_OW 296
15636: PUSH
15637: LD_INT 14
15639: LESS
15640: PUSH
15641: LD_EXP 6
15645: NOT
15646: AND
15647: OR
15648: AND
15649: IFFALSE 15945
15651: GO 15653
15653: DISABLE
// begin InGameOn ;
15654: CALL_OW 8
// if IsOk ( Belkov ) and belkovReturn then
15658: LD_EXP 64
15662: PPUSH
15663: CALL_OW 302
15667: PUSH
15668: LD_EXP 6
15672: AND
15673: IFFALSE 15769
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
15675: LD_EXP 62
15679: PUSH
15680: LD_EXP 64
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PPUSH
15689: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
15693: LD_EXP 62
15697: PPUSH
15698: LD_EXP 64
15702: PPUSH
15703: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
15707: LD_EXP 64
15711: PPUSH
15712: LD_EXP 62
15716: PPUSH
15717: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
15721: LD_EXP 64
15725: PPUSH
15726: LD_STRING D24-Bel-1
15728: PPUSH
15729: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15733: LD_EXP 62
15737: PPUSH
15738: LD_STRING D24-Bur-1
15740: PPUSH
15741: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
15745: LD_EXP 64
15749: PPUSH
15750: LD_STRING D24-Bel-2
15752: PPUSH
15753: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15757: LD_EXP 62
15761: PPUSH
15762: LD_STRING D24-Bur-2
15764: PPUSH
15765: CALL_OW 88
// end ; if IsOk ( Belkov2 ) and not belkovReturn then
15769: LD_EXP 68
15773: PPUSH
15774: CALL_OW 302
15778: PUSH
15779: LD_EXP 6
15783: NOT
15784: AND
15785: IFFALSE 15893
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
15787: LD_EXP 62
15791: PUSH
15792: LD_EXP 68
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PPUSH
15801: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
15805: LD_EXP 62
15809: PPUSH
15810: LD_EXP 68
15814: PPUSH
15815: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
15819: LD_EXP 68
15823: PPUSH
15824: LD_EXP 62
15828: PPUSH
15829: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
15833: LD_EXP 68
15837: PPUSH
15838: LD_STRING D24-Bel-1
15840: PPUSH
15841: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15845: LD_EXP 62
15849: PPUSH
15850: LD_STRING D24-Bur-1
15852: PPUSH
15853: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
15857: LD_EXP 62
15861: PPUSH
15862: LD_STRING D24-Bur-1a
15864: PPUSH
15865: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
15869: LD_EXP 68
15873: PPUSH
15874: LD_STRING D24-Bel-2
15876: PPUSH
15877: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15881: LD_EXP 62
15885: PPUSH
15886: LD_STRING D24-Bur-2
15888: PPUSH
15889: CALL_OW 88
// end ; if captureBelkovVehicle then
15893: LD_EXP 38
15897: IFFALSE 15911
// Say ( Burlak , D24-Bur-2a ) ;
15899: LD_EXP 62
15903: PPUSH
15904: LD_STRING D24-Bur-2a
15906: PPUSH
15907: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
15911: LD_EXP 76
15915: PPUSH
15916: LD_STRING D24-Pla-2
15918: PPUSH
15919: CALL_OW 94
// if leftBunkers then
15923: LD_EXP 82
15927: IFFALSE 15941
// SayRadio ( Platonov , D24-Pla-2a ) ;
15929: LD_EXP 76
15933: PPUSH
15934: LD_STRING D24-Pla-2a
15936: PPUSH
15937: CALL_OW 94
// InGameOff ;
15941: CALL_OW 9
// end ;
15945: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
15946: LD_INT 22
15948: PPUSH
15949: LD_INT 22
15951: PUSH
15952: LD_INT 3
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PPUSH
15973: CALL_OW 70
15977: PUSH
15978: LD_EXP 70
15982: PPUSH
15983: CALL_OW 302
15987: PUSH
15988: LD_EXP 63
15992: PPUSH
15993: CALL_OW 302
15997: OR
15998: AND
15999: IFFALSE 16082
16001: GO 16003
16003: DISABLE
// begin DialogueOn ;
16004: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
16008: LD_EXP 62
16012: PPUSH
16013: LD_STRING D26-Bur-1
16015: PPUSH
16016: CALL_OW 88
// if IsOk ( Kovalyuk ) then
16020: LD_EXP 70
16024: PPUSH
16025: CALL_OW 302
16029: IFFALSE 16043
// Say ( Kovalyuk , D26-Kov-1 ) ;
16031: LD_EXP 70
16035: PPUSH
16036: LD_STRING D26-Kov-1
16038: PPUSH
16039: CALL_OW 88
// if IsOk ( Gnyevko ) then
16043: LD_EXP 63
16047: PPUSH
16048: CALL_OW 302
16052: IFFALSE 16066
// Say ( Gnyevko , D26-Gny-1 ) ;
16054: LD_EXP 63
16058: PPUSH
16059: LD_STRING D26-Gny-1
16061: PPUSH
16062: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
16066: LD_EXP 62
16070: PPUSH
16071: LD_STRING D26-Bur-2
16073: PPUSH
16074: CALL_OW 88
// DialogueOff ;
16078: CALL_OW 7
// end ;
16082: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
16083: LD_EXP 20
16087: PUSH
16088: LD_EXP 62
16092: PPUSH
16093: LD_INT 8
16095: PPUSH
16096: CALL_OW 308
16100: NOT
16101: PUSH
16102: LD_EXP 62
16106: PPUSH
16107: CALL_OW 310
16111: PPUSH
16112: CALL_OW 310
16116: PPUSH
16117: LD_INT 8
16119: PPUSH
16120: CALL_OW 308
16124: NOT
16125: AND
16126: AND
16127: PUSH
16128: LD_EXP 39
16132: PUSH
16133: LD_INT 1
16135: NEG
16136: EQUAL
16137: AND
16138: IFFALSE 16152
16140: GO 16142
16142: DISABLE
// begin enable ;
16143: ENABLE
// raportForPlatonov = 0 ;
16144: LD_ADDR_EXP 39
16148: PUSH
16149: LD_INT 0
16151: ST_TO_ADDR
// end ;
16152: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
16153: LD_EXP 20
16157: PUSH
16158: LD_EXP 39
16162: PUSH
16163: LD_INT 0
16165: GREATEREQUAL
16166: AND
16167: PUSH
16168: LD_EXP 16
16172: NOT
16173: AND
16174: PUSH
16175: LD_EXP 62
16179: PPUSH
16180: LD_INT 8
16182: PPUSH
16183: CALL_OW 308
16187: PUSH
16188: LD_EXP 62
16192: PPUSH
16193: CALL_OW 310
16197: PPUSH
16198: CALL_OW 310
16202: PPUSH
16203: LD_INT 8
16205: PPUSH
16206: CALL_OW 308
16210: PUSH
16211: LD_EXP 16
16215: NOT
16216: AND
16217: OR
16218: AND
16219: IFFALSE 16510
16221: GO 16223
16223: DISABLE
// begin enable ;
16224: ENABLE
// DialogueOn ;
16225: CALL_OW 6
// case raportForPlatonov of 0 :
16229: LD_EXP 39
16233: PUSH
16234: LD_INT 0
16236: DOUBLE
16237: EQUAL
16238: IFTRUE 16242
16240: GO 16269
16242: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
16243: LD_EXP 76
16247: PPUSH
16248: LD_STRING D25a-Pla-1
16250: PPUSH
16251: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
16255: LD_EXP 62
16259: PPUSH
16260: LD_STRING D25a-Bur-1
16262: PPUSH
16263: CALL_OW 88
// end ; 1 :
16267: GO 16485
16269: LD_INT 1
16271: DOUBLE
16272: EQUAL
16273: IFTRUE 16277
16275: GO 16340
16277: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16278: LD_EXP 76
16282: PPUSH
16283: LD_STRING D25-Pla-1
16285: PPUSH
16286: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
16290: LD_EXP 62
16294: PPUSH
16295: LD_STRING D25-Bur-1
16297: PPUSH
16298: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16302: LD_EXP 62
16306: PPUSH
16307: LD_STRING D25b-Bur-1
16309: PPUSH
16310: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16314: LD_EXP 76
16318: PPUSH
16319: LD_STRING D25b-Pla-1
16321: PPUSH
16322: CALL_OW 88
// playerGetSupport = true ;
16326: LD_ADDR_EXP 34
16330: PUSH
16331: LD_INT 1
16333: ST_TO_ADDR
// PlatonovSendSupport ;
16334: CALL 6675 0 0
// end ; 2 :
16338: GO 16485
16340: LD_INT 2
16342: DOUBLE
16343: EQUAL
16344: IFTRUE 16348
16346: GO 16394
16348: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16349: LD_EXP 76
16353: PPUSH
16354: LD_STRING D25-Pla-1
16356: PPUSH
16357: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
16361: LD_EXP 62
16365: PPUSH
16366: LD_STRING D25-Bur-1a
16368: PPUSH
16369: CALL_OW 88
// if not sawLeftBunker then
16373: LD_EXP 29
16377: NOT
16378: IFFALSE 16392
// Say ( Platonov , D25c-Pla-1 ) ;
16380: LD_EXP 76
16384: PPUSH
16385: LD_STRING D25c-Pla-1
16387: PPUSH
16388: CALL_OW 88
// end ; 3 :
16392: GO 16485
16394: LD_INT 3
16396: DOUBLE
16397: EQUAL
16398: IFTRUE 16402
16400: GO 16484
16402: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16403: LD_EXP 76
16407: PPUSH
16408: LD_STRING D25-Pla-1
16410: PPUSH
16411: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
16415: LD_EXP 62
16419: PPUSH
16420: LD_STRING D25a-Bur-1b
16422: PPUSH
16423: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16427: LD_EXP 62
16431: PPUSH
16432: LD_STRING D25b-Bur-1
16434: PPUSH
16435: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16439: LD_EXP 76
16443: PPUSH
16444: LD_STRING D25b-Pla-1
16446: PPUSH
16447: CALL_OW 88
// playerGetSupport = true ;
16451: LD_ADDR_EXP 34
16455: PUSH
16456: LD_INT 1
16458: ST_TO_ADDR
// PlatonovSendSupport ;
16459: CALL 6675 0 0
// if not sawRightBunker then
16463: LD_EXP 30
16467: NOT
16468: IFFALSE 16482
// Say ( Platonov , D25c-Pla-1 ) ;
16470: LD_EXP 76
16474: PPUSH
16475: LD_STRING D25c-Pla-1
16477: PPUSH
16478: CALL_OW 88
// end ; end ;
16482: GO 16485
16484: POP
// raportForPlatonov = - 1 ;
16485: LD_ADDR_EXP 39
16489: PUSH
16490: LD_INT 1
16492: NEG
16493: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
16494: LD_EXP 76
16498: PPUSH
16499: LD_STRING D25c-Pla-1a
16501: PPUSH
16502: CALL_OW 88
// DialogueOff ;
16506: CALL_OW 7
// end ;
16510: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
16511: LD_INT 19
16513: PPUSH
16514: LD_INT 22
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: EMPTY
16525: LIST
16526: PPUSH
16527: CALL_OW 70
16531: PUSH
16532: LD_INT 0
16534: GREATER
16535: IFFALSE 16555
16537: GO 16539
16539: DISABLE
// begin northMapExplored = true ;
16540: LD_ADDR_EXP 41
16544: PUSH
16545: LD_INT 1
16547: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
16548: LD_STRING M10
16550: PPUSH
16551: CALL_OW 337
// end ;
16555: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
16556: LD_EXP 82
16560: NOT
16561: PUSH
16562: LD_EXP 41
16566: AND
16567: PUSH
16568: LD_EXP 37
16572: PUSH
16573: LD_EXP 36
16577: NOT
16578: OR
16579: AND
16580: IFFALSE 16600
16582: GO 16584
16584: DISABLE
// begin backToBeria2 = true ;
16585: LD_ADDR_EXP 16
16589: PUSH
16590: LD_INT 1
16592: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
16593: LD_STRING M10a
16595: PPUSH
16596: CALL_OW 337
// end ;
16600: END
// every 0 0$1 do
16601: GO 16603
16603: DISABLE
// begin enable ;
16604: ENABLE
// SetLives ( [ Kurin , Platonov ] , 1000 ) ;
16605: LD_EXP 67
16609: PUSH
16610: LD_EXP 76
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PPUSH
16619: LD_INT 1000
16621: PPUSH
16622: CALL_OW 234
// end ; end_of_file
16626: END
// export function CreateNature ; var i , un ; begin
16627: LD_INT 0
16629: PPUSH
16630: PPUSH
16631: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
16632: LD_ADDR_VAR 0 2
16636: PUSH
16637: DOUBLE
16638: LD_INT 1
16640: DEC
16641: ST_TO_ADDR
16642: LD_EXP 45
16646: PUSH
16647: LD_INT 1
16649: ARRAY
16650: PUSH
16651: FOR_TO
16652: IFFALSE 16762
// begin uc_side = 0 ;
16654: LD_ADDR_OWVAR 20
16658: PUSH
16659: LD_INT 0
16661: ST_TO_ADDR
// uc_nation = nation_nature ;
16662: LD_ADDR_OWVAR 21
16666: PUSH
16667: LD_INT 0
16669: ST_TO_ADDR
// hc_class = class_apeman ;
16670: LD_ADDR_OWVAR 28
16674: PUSH
16675: LD_INT 12
16677: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16678: LD_ADDR_OWVAR 31
16682: PUSH
16683: LD_EXP 46
16687: PUSH
16688: LD_INT 1
16690: ARRAY
16691: PUSH
16692: LD_EXP 46
16696: PUSH
16697: LD_INT 2
16699: ARRAY
16700: PUSH
16701: LD_EXP 46
16705: PUSH
16706: LD_INT 3
16708: ARRAY
16709: PUSH
16710: LD_EXP 46
16714: PUSH
16715: LD_INT 4
16717: ARRAY
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16725: LD_ADDR_OWVAR 35
16729: PUSH
16730: LD_EXP 47
16734: ST_TO_ADDR
// un = CreateHuman ;
16735: LD_ADDR_VAR 0 3
16739: PUSH
16740: CALL_OW 44
16744: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16745: LD_VAR 0 3
16749: PPUSH
16750: LD_INT 21
16752: PPUSH
16753: LD_INT 0
16755: PPUSH
16756: CALL_OW 49
// end ;
16760: GO 16651
16762: POP
16763: POP
// for i := 1 to animalsAmount [ 2 ] do
16764: LD_ADDR_VAR 0 2
16768: PUSH
16769: DOUBLE
16770: LD_INT 1
16772: DEC
16773: ST_TO_ADDR
16774: LD_EXP 45
16778: PUSH
16779: LD_INT 2
16781: ARRAY
16782: PUSH
16783: FOR_TO
16784: IFFALSE 16894
// begin uc_side = 0 ;
16786: LD_ADDR_OWVAR 20
16790: PUSH
16791: LD_INT 0
16793: ST_TO_ADDR
// uc_nation = nation_nature ;
16794: LD_ADDR_OWVAR 21
16798: PUSH
16799: LD_INT 0
16801: ST_TO_ADDR
// hc_class = class_phororhacos ;
16802: LD_ADDR_OWVAR 28
16806: PUSH
16807: LD_INT 18
16809: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16810: LD_ADDR_OWVAR 31
16814: PUSH
16815: LD_EXP 46
16819: PUSH
16820: LD_INT 1
16822: ARRAY
16823: PUSH
16824: LD_EXP 46
16828: PUSH
16829: LD_INT 2
16831: ARRAY
16832: PUSH
16833: LD_EXP 46
16837: PUSH
16838: LD_INT 3
16840: ARRAY
16841: PUSH
16842: LD_EXP 46
16846: PUSH
16847: LD_INT 4
16849: ARRAY
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16857: LD_ADDR_OWVAR 35
16861: PUSH
16862: LD_EXP 47
16866: ST_TO_ADDR
// un = CreateHuman ;
16867: LD_ADDR_VAR 0 3
16871: PUSH
16872: CALL_OW 44
16876: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16877: LD_VAR 0 3
16881: PPUSH
16882: LD_INT 21
16884: PPUSH
16885: LD_INT 0
16887: PPUSH
16888: CALL_OW 49
// end ;
16892: GO 16783
16894: POP
16895: POP
// for i := 1 to animalsAmount [ 3 ] do
16896: LD_ADDR_VAR 0 2
16900: PUSH
16901: DOUBLE
16902: LD_INT 1
16904: DEC
16905: ST_TO_ADDR
16906: LD_EXP 45
16910: PUSH
16911: LD_INT 3
16913: ARRAY
16914: PUSH
16915: FOR_TO
16916: IFFALSE 17026
// begin uc_side = 0 ;
16918: LD_ADDR_OWVAR 20
16922: PUSH
16923: LD_INT 0
16925: ST_TO_ADDR
// uc_nation = nation_nature ;
16926: LD_ADDR_OWVAR 21
16930: PUSH
16931: LD_INT 0
16933: ST_TO_ADDR
// hc_class = class_tiger ;
16934: LD_ADDR_OWVAR 28
16938: PUSH
16939: LD_INT 14
16941: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16942: LD_ADDR_OWVAR 31
16946: PUSH
16947: LD_EXP 46
16951: PUSH
16952: LD_INT 1
16954: ARRAY
16955: PUSH
16956: LD_EXP 46
16960: PUSH
16961: LD_INT 2
16963: ARRAY
16964: PUSH
16965: LD_EXP 46
16969: PUSH
16970: LD_INT 3
16972: ARRAY
16973: PUSH
16974: LD_EXP 46
16978: PUSH
16979: LD_INT 4
16981: ARRAY
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16989: LD_ADDR_OWVAR 35
16993: PUSH
16994: LD_EXP 47
16998: ST_TO_ADDR
// un = CreateHuman ;
16999: LD_ADDR_VAR 0 3
17003: PUSH
17004: CALL_OW 44
17008: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17009: LD_VAR 0 3
17013: PPUSH
17014: LD_INT 21
17016: PPUSH
17017: LD_INT 0
17019: PPUSH
17020: CALL_OW 49
// end ;
17024: GO 16915
17026: POP
17027: POP
// for i := 1 to animalsAmount [ 4 ] do
17028: LD_ADDR_VAR 0 2
17032: PUSH
17033: DOUBLE
17034: LD_INT 1
17036: DEC
17037: ST_TO_ADDR
17038: LD_EXP 45
17042: PUSH
17043: LD_INT 4
17045: ARRAY
17046: PUSH
17047: FOR_TO
17048: IFFALSE 17158
// begin uc_side = 0 ;
17050: LD_ADDR_OWVAR 20
17054: PUSH
17055: LD_INT 0
17057: ST_TO_ADDR
// uc_nation = nation_nature ;
17058: LD_ADDR_OWVAR 21
17062: PUSH
17063: LD_INT 0
17065: ST_TO_ADDR
// hc_class = 21 ;
17066: LD_ADDR_OWVAR 28
17070: PUSH
17071: LD_INT 21
17073: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
17074: LD_ADDR_OWVAR 31
17078: PUSH
17079: LD_EXP 46
17083: PUSH
17084: LD_INT 1
17086: ARRAY
17087: PUSH
17088: LD_EXP 46
17092: PUSH
17093: LD_INT 2
17095: ARRAY
17096: PUSH
17097: LD_EXP 46
17101: PUSH
17102: LD_INT 3
17104: ARRAY
17105: PUSH
17106: LD_EXP 46
17110: PUSH
17111: LD_INT 4
17113: ARRAY
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
17121: LD_ADDR_OWVAR 35
17125: PUSH
17126: LD_EXP 47
17130: ST_TO_ADDR
// un = CreateHuman ;
17131: LD_ADDR_VAR 0 3
17135: PUSH
17136: CALL_OW 44
17140: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17141: LD_VAR 0 3
17145: PPUSH
17146: LD_INT 21
17148: PPUSH
17149: LD_INT 0
17151: PPUSH
17152: CALL_OW 49
// end ;
17156: GO 17047
17158: POP
17159: POP
// end ; end_of_file
17160: LD_VAR 0 1
17164: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
17165: LD_EXP 21
17169: IFFALSE 17398
17171: GO 17173
17173: DISABLE
17174: LD_INT 0
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
17181: LD_ADDR_VAR 0 4
17185: PUSH
17186: LD_INT 22
17188: PUSH
17189: LD_INT 3
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 21
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 25
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: PPUSH
17221: CALL_OW 69
17225: ST_TO_ADDR
// wait ( 0 0$20 ) ;
17226: LD_INT 700
17228: PPUSH
17229: CALL_OW 67
// carryCratesEngs = 0 ;
17233: LD_ADDR_VAR 0 3
17237: PUSH
17238: LD_INT 0
17240: ST_TO_ADDR
// for unit in playerEngs do
17241: LD_ADDR_VAR 0 2
17245: PUSH
17246: LD_VAR 0 4
17250: PUSH
17251: FOR_IN
17252: IFFALSE 17280
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
17254: LD_ADDR_VAR 0 3
17258: PUSH
17259: LD_VAR 0 3
17263: PUSH
17264: LD_VAR 0 2
17268: PPUSH
17269: LD_INT 1
17271: PPUSH
17272: CALL_OW 289
17276: PLUS
17277: ST_TO_ADDR
17278: GO 17251
17280: POP
17281: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
17282: LD_INT 106
17284: PPUSH
17285: CALL_OW 274
17289: PPUSH
17290: LD_INT 1
17292: PPUSH
17293: CALL_OW 275
17297: PUSH
17298: LD_INT 50
17300: LESS
17301: PUSH
17302: LD_INT 8
17304: PPUSH
17305: LD_INT 1
17307: PPUSH
17308: CALL_OW 287
17312: PUSH
17313: LD_INT 10
17315: MUL
17316: PUSH
17317: LD_INT 106
17319: PPUSH
17320: CALL_OW 274
17324: PPUSH
17325: LD_INT 1
17327: PPUSH
17328: CALL_OW 275
17332: PLUS
17333: PUSH
17334: LD_VAR 0 3
17338: PLUS
17339: PUSH
17340: LD_INT 50
17342: LESS
17343: AND
17344: IFFALSE 17356
// spawnNextCrates = true else
17346: LD_ADDR_VAR 0 5
17350: PUSH
17351: LD_INT 1
17353: ST_TO_ADDR
17354: GO 17364
// spawnNextCrates = false ;
17356: LD_ADDR_VAR 0 5
17360: PUSH
17361: LD_INT 0
17363: ST_TO_ADDR
// if spawnNextCrates then
17364: LD_VAR 0 5
17368: IFFALSE 17391
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
17370: LD_INT 1
17372: PPUSH
17373: LD_INT 5
17375: PPUSH
17376: CALL_OW 12
17380: PPUSH
17381: LD_INT 26
17383: PPUSH
17384: LD_INT 1
17386: PPUSH
17387: CALL_OW 55
// until not spawnCrates ;
17391: LD_EXP 21
17395: NOT
17396: IFFALSE 17181
// end ; end_of_file
17398: PPOPN 5
17400: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
17401: LD_VAR 0 1
17405: PPUSH
17406: CALL_OW 266
17410: PUSH
17411: LD_INT 6
17413: EQUAL
17414: PUSH
17415: LD_INT 22
17417: PUSH
17418: LD_INT 3
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 30
17427: PUSH
17428: LD_INT 6
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PPUSH
17439: CALL_OW 69
17443: PUSH
17444: LD_INT 1
17446: GREATER
17447: AND
17448: PUSH
17449: LD_EXP 11
17453: NOT
17454: AND
17455: IFFALSE 17466
// Dial_StopConstructAgainSameBuilding ( building ) ;
17457: LD_VAR 0 1
17461: PPUSH
17462: CALL 9167 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
17466: LD_VAR 0 1
17470: PPUSH
17471: CALL_OW 266
17475: PUSH
17476: LD_INT 2
17478: EQUAL
17479: PUSH
17480: LD_INT 22
17482: PUSH
17483: LD_INT 3
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 30
17492: PUSH
17493: LD_INT 2
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 69
17508: PUSH
17509: LD_INT 1
17511: GREATER
17512: AND
17513: PUSH
17514: LD_EXP 11
17518: NOT
17519: AND
17520: IFFALSE 17531
// Dial_StopConstructAgainSameBuilding ( building ) ;
17522: LD_VAR 0 1
17526: PPUSH
17527: CALL 9167 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
17531: LD_VAR 0 1
17535: PPUSH
17536: CALL_OW 255
17540: PUSH
17541: LD_INT 3
17543: EQUAL
17544: PUSH
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 266
17554: PUSH
17555: LD_INT 26
17557: PUSH
17558: LD_INT 4
17560: PUSH
17561: LD_INT 31
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: LIST
17568: IN
17569: AND
17570: PUSH
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_INT 8
17578: PPUSH
17579: CALL_OW 308
17583: AND
17584: IFFALSE 17595
// Dial_StopConstructAgainSameBuilding ( building ) ;
17586: LD_VAR 0 1
17590: PPUSH
17591: CALL 9167 0 1
// end ;
17595: PPOPN 2
17597: END
// on BuildingComplete ( building ) do var sold , platSold ;
17598: LD_INT 0
17600: PPUSH
17601: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
17602: LD_VAR 0 1
17606: PPUSH
17607: CALL_OW 255
17611: PUSH
17612: LD_INT 3
17614: EQUAL
17615: PUSH
17616: LD_VAR 0 1
17620: PPUSH
17621: CALL_OW 266
17625: PUSH
17626: LD_INT 6
17628: EQUAL
17629: AND
17630: PUSH
17631: LD_EXP 8
17635: NOT
17636: AND
17637: IFFALSE 17643
// Dial_LabConstructed ;
17639: CALL 9017 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
17643: LD_VAR 0 1
17647: PPUSH
17648: CALL_OW 255
17652: PUSH
17653: LD_INT 3
17655: EQUAL
17656: PUSH
17657: LD_VAR 0 1
17661: PPUSH
17662: CALL_OW 266
17666: PUSH
17667: LD_INT 2
17669: EQUAL
17670: AND
17671: PUSH
17672: LD_EXP 9
17676: NOT
17677: AND
17678: IFFALSE 17684
// Dial_WorkshopConstructed ;
17680: CALL 9092 0 0
// if GetSide ( building ) = 6 then
17684: LD_VAR 0 1
17688: PPUSH
17689: CALL_OW 255
17693: PUSH
17694: LD_INT 6
17696: EQUAL
17697: IFFALSE 17908
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 266
17708: PUSH
17709: LD_INT 31
17711: EQUAL
17712: PUSH
17713: LD_VAR 0 1
17717: PPUSH
17718: LD_INT 9
17720: PPUSH
17721: CALL_OW 308
17725: AND
17726: IFFALSE 17777
// begin if UnitsInside ( ru2_arm2 ) then
17728: LD_INT 209
17730: PPUSH
17731: CALL_OW 313
17735: IFFALSE 17777
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
17737: LD_ADDR_VAR 0 2
17741: PUSH
17742: LD_INT 209
17744: PPUSH
17745: CALL_OW 313
17749: PUSH
17750: LD_INT 1
17752: ARRAY
17753: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
17754: LD_VAR 0 2
17758: PPUSH
17759: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
17763: LD_VAR 0 2
17767: PPUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
17777: LD_VAR 0 1
17781: PPUSH
17782: CALL_OW 266
17786: PUSH
17787: LD_INT 31
17789: EQUAL
17790: PUSH
17791: LD_VAR 0 1
17795: PPUSH
17796: LD_INT 8
17798: PPUSH
17799: CALL_OW 308
17803: AND
17804: IFFALSE 17840
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_EXP 77
17815: PPUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 74
17825: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
17826: LD_VAR 0 2
17830: PPUSH
17831: LD_VAR 0 1
17835: PPUSH
17836: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
17840: LD_VAR 0 1
17844: PPUSH
17845: CALL_OW 266
17849: PUSH
17850: LD_INT 2
17852: EQUAL
17853: IFFALSE 17908
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
17855: LD_EXP 69
17859: PPUSH
17860: LD_INT 25
17862: PUSH
17863: LD_INT 3
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PPUSH
17870: CALL_OW 72
17874: PPUSH
17875: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
17879: LD_EXP 69
17883: PPUSH
17884: LD_INT 25
17886: PUSH
17887: LD_INT 3
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PPUSH
17894: CALL_OW 72
17898: PPUSH
17899: LD_VAR 0 1
17903: PPUSH
17904: CALL_OW 180
// end ; end ; end ;
17908: PPOPN 3
17910: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
17911: LD_VAR 0 1
17915: PUSH
17916: LD_INT 47
17918: EQUAL
17919: PUSH
17920: LD_VAR 0 2
17924: PPUSH
17925: CALL_OW 255
17929: PUSH
17930: LD_INT 3
17932: EQUAL
17933: AND
17934: IFFALSE 17944
// engineResearched = true ;
17936: LD_ADDR_EXP 10
17940: PUSH
17941: LD_INT 1
17943: ST_TO_ADDR
// if tech = tech_Tech1 then
17944: LD_VAR 0 1
17948: PUSH
17949: LD_INT 48
17951: EQUAL
17952: IFFALSE 17974
// begin wait ( 0 0$5 ) ;
17954: LD_INT 175
17956: PPUSH
17957: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
17961: LD_INT 83
17963: PPUSH
17964: LD_INT 1500
17966: PPUSH
17967: LD_INT 0
17969: PPUSH
17970: CALL_OW 486
// end ; end ;
17974: PPOPN 2
17976: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
17977: LD_VAR 0 2
17981: PPUSH
17982: CALL_OW 255
17986: PUSH
17987: LD_OWVAR 2
17991: EQUAL
17992: PUSH
17993: LD_VAR 0 2
17997: PPUSH
17998: CALL_OW 302
18002: AND
18003: PUSH
18004: LD_EXP 12
18008: NOT
18009: AND
18010: PUSH
18011: LD_EXP 17
18015: NOT
18016: AND
18017: IFFALSE 18028
// Dial_FirstVehConstructed ( factory ) ;
18019: LD_VAR 0 2
18023: PPUSH
18024: CALL 9691 0 1
// if GetSide ( factory ) = your_side and not vehicleForKurin and not IsOK ( firstVeh ) then
18028: LD_VAR 0 2
18032: PPUSH
18033: CALL_OW 255
18037: PUSH
18038: LD_OWVAR 2
18042: EQUAL
18043: PUSH
18044: LD_EXP 14
18048: NOT
18049: AND
18050: PUSH
18051: LD_EXP 13
18055: PPUSH
18056: CALL_OW 302
18060: NOT
18061: AND
18062: IFFALSE 18074
// firstVeh = vehicle ;
18064: LD_ADDR_EXP 13
18068: PUSH
18069: LD_VAR 0 1
18073: ST_TO_ADDR
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
18074: LD_VAR 0 2
18078: PPUSH
18079: CALL_OW 255
18083: PUSH
18084: LD_OWVAR 2
18088: EQUAL
18089: PUSH
18090: LD_VAR 0 2
18094: PPUSH
18095: CALL_OW 302
18099: AND
18100: PUSH
18101: LD_EXP 17
18105: AND
18106: IFFALSE 18122
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
18108: LD_ADDR_EXP 18
18112: PUSH
18113: LD_EXP 18
18117: PUSH
18118: LD_INT 1
18120: PLUS
18121: ST_TO_ADDR
// if GetSide ( factory ) = your_side and GetNation ( factory ) = nation_russian then
18122: LD_VAR 0 2
18126: PPUSH
18127: CALL_OW 255
18131: PUSH
18132: LD_OWVAR 2
18136: EQUAL
18137: PUSH
18138: LD_VAR 0 2
18142: PPUSH
18143: CALL_OW 248
18147: PUSH
18148: LD_INT 3
18150: EQUAL
18151: AND
18152: IFFALSE 18168
// achievement_ConstructVehicles = achievement_ConstructVehicles + 1 ;
18154: LD_ADDR_EXP 44
18158: PUSH
18159: LD_EXP 44
18163: PUSH
18164: LD_INT 1
18166: PLUS
18167: ST_TO_ADDR
// end ;
18168: PPOPN 2
18170: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
18171: LD_EXP 19
18175: NOT
18176: PUSH
18177: LD_VAR 0 5
18181: PUSH
18182: LD_INT 1
18184: EQUAL
18185: AND
18186: IFFALSE 18202
// Dial_NewCrates ( x , y ) ;
18188: LD_VAR 0 2
18192: PPUSH
18193: LD_VAR 0 3
18197: PPUSH
18198: CALL 9636 0 2
// end ;
18202: PPOPN 5
18204: END
// on Command ( com ) do var i , j , temp , order , destiny ;
18205: LD_INT 0
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
18211: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18212: LD_ADDR_VAR 0 2
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_INT 3
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 21
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 69
18245: PUSH
18246: FOR_IN
18247: IFFALSE 18440
// if GetTaskList ( i ) > 0 then
18249: LD_VAR 0 2
18253: PPUSH
18254: CALL_OW 437
18258: PUSH
18259: LD_INT 0
18261: GREATER
18262: IFFALSE 18438
// for j = 1 to GetTaskList ( i ) do
18264: LD_ADDR_VAR 0 3
18268: PUSH
18269: DOUBLE
18270: LD_INT 1
18272: DEC
18273: ST_TO_ADDR
18274: LD_VAR 0 2
18278: PPUSH
18279: CALL_OW 437
18283: PUSH
18284: FOR_TO
18285: IFFALSE 18436
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
18287: LD_ADDR_VAR 0 4
18291: PUSH
18292: LD_VAR 0 2
18296: PPUSH
18297: CALL_OW 437
18301: PUSH
18302: LD_VAR 0 3
18306: ARRAY
18307: PUSH
18308: LD_INT 4
18310: ARRAY
18311: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
18312: LD_VAR 0 4
18316: PUSH
18317: LD_INT 71
18319: EQUAL
18320: PUSH
18321: LD_VAR 0 4
18325: PPUSH
18326: CALL_OW 255
18330: PUSH
18331: LD_INT 6
18333: EQUAL
18334: PUSH
18335: LD_VAR 0 2
18339: PPUSH
18340: CALL_OW 437
18344: PUSH
18345: LD_VAR 0 3
18349: ARRAY
18350: PUSH
18351: LD_INT 1
18353: ARRAY
18354: PUSH
18355: LD_STRING e
18357: EQUAL
18358: AND
18359: PUSH
18360: LD_VAR 0 4
18364: PPUSH
18365: CALL_OW 247
18369: PUSH
18370: LD_INT 2
18372: EQUAL
18373: AND
18374: OR
18375: IFFALSE 18388
// SetTaskList ( i , [ ] ) ;
18377: LD_VAR 0 2
18381: PPUSH
18382: EMPTY
18383: PPUSH
18384: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
18388: LD_VAR 0 4
18392: PUSH
18393: LD_INT 106
18395: EQUAL
18396: PUSH
18397: LD_VAR 0 2
18401: PPUSH
18402: CALL_OW 437
18406: PUSH
18407: LD_VAR 0 3
18411: ARRAY
18412: PUSH
18413: LD_INT 1
18415: ARRAY
18416: PUSH
18417: LD_STRING Y
18419: EQUAL
18420: AND
18421: IFFALSE 18434
// SetTaskList ( i , [ ] ) ;
18423: LD_VAR 0 2
18427: PPUSH
18428: EMPTY
18429: PPUSH
18430: CALL_OW 446
// end ;
18434: GO 18284
18436: POP
18437: POP
18438: GO 18246
18440: POP
18441: POP
// end ;
18442: PPOPN 6
18444: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 255
18454: PUSH
18455: LD_INT 1
18457: EQUAL
18458: PUSH
18459: LD_VAR 0 1
18463: PPUSH
18464: CALL_OW 247
18468: PUSH
18469: LD_INT 1
18471: EQUAL
18472: AND
18473: IFFALSE 18531
// begin if unit in amLeftEngs then
18475: LD_VAR 0 1
18479: PUSH
18480: LD_EXP 86
18484: IN
18485: IFFALSE 18503
// amLeftEngs = amLeftEngs diff unit ;
18487: LD_ADDR_EXP 86
18491: PUSH
18492: LD_EXP 86
18496: PUSH
18497: LD_VAR 0 1
18501: DIFF
18502: ST_TO_ADDR
// if unit in amRightEngs then
18503: LD_VAR 0 1
18507: PUSH
18508: LD_EXP 87
18512: IN
18513: IFFALSE 18531
// amRightEngs = amRightEngs diff unit ;
18515: LD_ADDR_EXP 87
18519: PUSH
18520: LD_EXP 87
18524: PUSH
18525: LD_VAR 0 1
18529: DIFF
18530: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 255
18540: PUSH
18541: LD_INT 6
18543: EQUAL
18544: PUSH
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 247
18554: PUSH
18555: LD_INT 1
18557: EQUAL
18558: AND
18559: IFFALSE 18589
// if unit in belkovTeam then
18561: LD_VAR 0 1
18565: PUSH
18566: LD_EXP 73
18570: IN
18571: IFFALSE 18589
// belkovTeam = belkovTeam diff unit ;
18573: LD_ADDR_EXP 73
18577: PUSH
18578: LD_EXP 73
18582: PUSH
18583: LD_VAR 0 1
18587: DIFF
18588: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 255
18598: PUSH
18599: LD_INT 3
18601: EQUAL
18602: PUSH
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 247
18612: PUSH
18613: LD_INT 1
18615: EQUAL
18616: AND
18617: IFFALSE 18633
// lostComradesCounter = lostComradesCounter + 1 ;
18619: LD_ADDR_EXP 43
18623: PUSH
18624: LD_EXP 43
18628: PUSH
18629: LD_INT 1
18631: PLUS
18632: ST_TO_ADDR
// if unit = Burlak then
18633: LD_VAR 0 1
18637: PUSH
18638: LD_EXP 62
18642: EQUAL
18643: IFFALSE 18649
// BurlakIsDead ;
18645: CALL 19960 0 0
// if unit = Beria then
18649: LD_VAR 0 1
18653: PUSH
18654: LD_INT 106
18656: EQUAL
18657: IFFALSE 18663
// BaseDestroyed ;
18659: CALL 19990 0 0
// if unit in platSoldiers then
18663: LD_VAR 0 1
18667: PUSH
18668: LD_EXP 77
18672: IN
18673: IFFALSE 18691
// platSoldiers = platSoldiers diff unit ;
18675: LD_ADDR_EXP 77
18679: PUSH
18680: LD_EXP 77
18684: PUSH
18685: LD_VAR 0 1
18689: DIFF
18690: ST_TO_ADDR
// end ;
18691: PPOPN 1
18693: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
18694: LD_VAR 0 1
18698: PPUSH
18699: CALL_OW 255
18703: PUSH
18704: LD_INT 1
18706: EQUAL
18707: PUSH
18708: LD_VAR 0 1
18712: PPUSH
18713: CALL_OW 247
18717: PUSH
18718: LD_INT 3
18720: EQUAL
18721: AND
18722: IFFALSE 18780
// begin if unit in leftBunkers then
18724: LD_VAR 0 1
18728: PUSH
18729: LD_EXP 82
18733: IN
18734: IFFALSE 18752
// leftBunkers = leftBunkers diff unit ;
18736: LD_ADDR_EXP 82
18740: PUSH
18741: LD_EXP 82
18745: PUSH
18746: LD_VAR 0 1
18750: DIFF
18751: ST_TO_ADDR
// if unit in rightBunkers then
18752: LD_VAR 0 1
18756: PUSH
18757: LD_EXP 83
18761: IN
18762: IFFALSE 18780
// rightBunkers = rightBunkers diff unit ;
18764: LD_ADDR_EXP 83
18768: PUSH
18769: LD_EXP 83
18773: PUSH
18774: LD_VAR 0 1
18778: DIFF
18779: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18780: LD_VAR 0 1
18784: PPUSH
18785: CALL_OW 255
18789: PUSH
18790: LD_INT 1
18792: EQUAL
18793: PUSH
18794: LD_VAR 0 1
18798: PPUSH
18799: CALL_OW 247
18803: PUSH
18804: LD_INT 1
18806: EQUAL
18807: AND
18808: IFFALSE 18838
// if unit in trapTeam then
18810: LD_VAR 0 1
18814: PUSH
18815: LD_EXP 81
18819: IN
18820: IFFALSE 18838
// trapTeam = trapTeam diff unit ;
18822: LD_ADDR_EXP 81
18826: PUSH
18827: LD_EXP 81
18831: PUSH
18832: LD_VAR 0 1
18836: DIFF
18837: ST_TO_ADDR
// end ;
18838: PPOPN 1
18840: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
18841: LD_VAR 0 3
18845: PUSH
18846: LD_INT 1
18848: EQUAL
18849: IFFALSE 18859
// captureBelkovVehicle = true ;
18851: LD_ADDR_EXP 38
18855: PUSH
18856: LD_INT 1
18858: ST_TO_ADDR
// if original_side = 6 then
18859: LD_VAR 0 3
18863: PUSH
18864: LD_INT 6
18866: EQUAL
18867: IFFALSE 18911
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
18869: LD_VAR 0 1
18873: PUSH
18874: LD_VAR 0 2
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PPUSH
18883: LD_INT 118
18885: PPUSH
18886: LD_INT 25
18888: PPUSH
18889: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
18893: LD_VAR 0 1
18897: PUSH
18898: LD_VAR 0 2
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PPUSH
18907: CALL_OW 139
// end ; end ;
18911: PPOPN 4
18913: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
18914: LD_VAR 0 1
18918: PUSH
18919: LD_INT 3
18921: EQUAL
18922: PUSH
18923: LD_VAR 0 2
18927: PUSH
18928: LD_INT 6
18930: EQUAL
18931: AND
18932: IFFALSE 18938
// AttackComrades ;
18934: CALL 19975 0 0
// end ;
18938: PPOPN 2
18940: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
18941: LD_VAR 0 2
18945: PUSH
18946: LD_INT 6
18948: EQUAL
18949: IFFALSE 18963
// SetSide ( building , 3 ) ;
18951: LD_VAR 0 1
18955: PPUSH
18956: LD_INT 3
18958: PPUSH
18959: CALL_OW 235
// end ; end_of_file
18963: PPOPN 3
18965: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
18966: LD_EXP 16
18970: PUSH
18971: LD_INT 8
18973: PPUSH
18974: LD_INT 22
18976: PUSH
18977: LD_INT 3
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 21
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PPUSH
18998: CALL_OW 71
19002: PUSH
19003: LD_INT 0
19005: EQUAL
19006: AND
19007: IFFALSE 19108
19009: GO 19011
19011: DISABLE
// begin enable ;
19012: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
19013: LD_EXP 36
19017: NOT
19018: PUSH
19019: LD_EXP 64
19023: PPUSH
19024: CALL_OW 302
19028: PUSH
19029: LD_EXP 68
19033: PPUSH
19034: CALL_OW 302
19038: OR
19039: AND
19040: IFFALSE 19087
// begin case Query ( QContMission ) of 1 :
19042: LD_STRING QContMission
19044: PPUSH
19045: CALL_OW 97
19049: PUSH
19050: LD_INT 1
19052: DOUBLE
19053: EQUAL
19054: IFTRUE 19058
19056: GO 19065
19058: POP
// begin FinishMission ;
19059: CALL 19109 0 0
// end ; 2 :
19063: GO 19085
19065: LD_INT 2
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19084
19073: POP
// begin saveBelkovObjective = true ;
19074: LD_ADDR_EXP 36
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// end ; end ;
19082: GO 19085
19084: POP
// end else
19085: GO 19098
// if not belkovSaved then
19087: LD_EXP 37
19091: NOT
19092: IFFALSE 19098
// FinishMission ;
19094: CALL 19109 0 0
// if belkovSaved then
19098: LD_EXP 37
19102: IFFALSE 19108
// FinishMission ;
19104: CALL 19109 0 0
// end ;
19108: END
// function FinishMission ; begin
19109: LD_INT 0
19111: PPUSH
// SetRewards ;
19112: CALL 19133 0 0
// SavePlayerCharacters ;
19116: CALL 19423 0 0
// SaveGlobalVariables ;
19120: CALL 19640 0 0
// YouWin ;
19124: CALL_OW 103
// end ;
19128: LD_VAR 0 1
19132: RET
// function SetRewards ; begin
19133: LD_INT 0
19135: PPUSH
// case initiative of 1 :
19136: LD_EXP 42
19140: PUSH
19141: LD_INT 1
19143: DOUBLE
19144: EQUAL
19145: IFTRUE 19149
19147: GO 19162
19149: POP
// AddMedal ( Initiative , 1 ) ; 2 :
19150: LD_STRING Initiative
19152: PPUSH
19153: LD_INT 1
19155: PPUSH
19156: CALL_OW 101
19160: GO 19207
19162: LD_INT 2
19164: DOUBLE
19165: EQUAL
19166: IFTRUE 19170
19168: GO 19184
19170: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
19171: LD_STRING Initiative
19173: PPUSH
19174: LD_INT 2
19176: NEG
19177: PPUSH
19178: CALL_OW 101
19182: GO 19207
19184: LD_INT 3
19186: DOUBLE
19187: EQUAL
19188: IFTRUE 19192
19190: GO 19206
19192: POP
// AddMedal ( Initiative , - 1 ) ; end ;
19193: LD_STRING Initiative
19195: PPUSH
19196: LD_INT 1
19198: NEG
19199: PPUSH
19200: CALL_OW 101
19204: GO 19207
19206: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
19207: LD_EXP 37
19211: PUSH
19212: LD_EXP 64
19216: PPUSH
19217: CALL_OW 302
19221: PUSH
19222: LD_EXP 68
19226: PPUSH
19227: CALL_OW 302
19231: OR
19232: AND
19233: IFFALSE 19245
// AddMedal ( Belkov , 1 ) ;
19235: LD_STRING Belkov
19237: PPUSH
19238: LD_INT 1
19240: PPUSH
19241: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
19245: LD_EXP 37
19249: NOT
19250: PUSH
19251: LD_EXP 36
19255: NOT
19256: AND
19257: IFFALSE 19270
// AddMedal ( Belkov , - 1 ) ;
19259: LD_STRING Belkov
19261: PPUSH
19262: LD_INT 1
19264: NEG
19265: PPUSH
19266: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
19270: LD_EXP 37
19274: NOT
19275: PUSH
19276: LD_EXP 36
19280: AND
19281: IFFALSE 19294
// AddMedal ( Belkov , - 2 ) ;
19283: LD_STRING Belkov
19285: PPUSH
19286: LD_INT 2
19288: NEG
19289: PPUSH
19290: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
19294: LD_EXP 37
19298: PUSH
19299: LD_EXP 6
19303: PUSH
19304: LD_EXP 64
19308: PPUSH
19309: CALL_OW 301
19313: AND
19314: AND
19315: PUSH
19316: LD_EXP 6
19320: NOT
19321: PUSH
19322: LD_EXP 68
19326: PPUSH
19327: CALL_OW 301
19331: AND
19332: OR
19333: IFFALSE 19346
// AddMedal ( Belkov , - 2 ) ;
19335: LD_STRING Belkov
19337: PPUSH
19338: LD_INT 2
19340: NEG
19341: PPUSH
19342: CALL_OW 101
// if lostComradesCounter = 0 then
19346: LD_EXP 43
19350: PUSH
19351: LD_INT 0
19353: EQUAL
19354: IFFALSE 19368
// AddMedal ( NoLosses , 1 ) else
19356: LD_STRING NoLosses
19358: PPUSH
19359: LD_INT 1
19361: PPUSH
19362: CALL_OW 101
19366: GO 19378
// AddMedal ( NoLosses , 0 ) ;
19368: LD_STRING NoLosses
19370: PPUSH
19371: LD_INT 0
19373: PPUSH
19374: CALL_OW 101
// GiveMedals ( Main ) ;
19378: LD_STRING Main
19380: PPUSH
19381: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19385: LD_INT 22
19387: PUSH
19388: LD_INT 3
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 21
19397: PUSH
19398: LD_INT 1
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PPUSH
19409: CALL_OW 69
19413: PPUSH
19414: CALL_OW 43
// end ;
19418: LD_VAR 0 1
19422: RET
// function SavePlayerCharacters ; var othersYour ; begin
19423: LD_INT 0
19425: PPUSH
19426: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19427: LD_EXP 62
19431: PPUSH
19432: LD_STRING Burlak
19434: PPUSH
19435: LD_INT 3
19437: PPUSH
19438: CALL 4388 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19442: LD_EXP 63
19446: PPUSH
19447: LD_STRING Gnyevko
19449: PPUSH
19450: LD_INT 3
19452: PPUSH
19453: CALL 4388 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19457: LD_EXP 70
19461: PPUSH
19462: LD_STRING Kovalyuk
19464: PPUSH
19465: LD_INT 3
19467: PPUSH
19468: CALL 4388 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19472: LD_EXP 64
19476: PPUSH
19477: LD_STRING Belkov
19479: PPUSH
19480: LD_INT 3
19482: PPUSH
19483: CALL 4388 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19487: LD_EXP 68
19491: PPUSH
19492: LD_STRING Belkov2
19494: PPUSH
19495: LD_INT 3
19497: PPUSH
19498: CALL 4388 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19502: LD_EXP 65
19506: PPUSH
19507: LD_STRING Kirilenkova
19509: PPUSH
19510: LD_INT 3
19512: PPUSH
19513: CALL 4388 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
19517: LD_ADDR_VAR 0 2
19521: PUSH
19522: LD_INT 22
19524: PUSH
19525: LD_INT 3
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 21
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PPUSH
19546: CALL_OW 69
19550: PUSH
19551: LD_EXP 62
19555: PUSH
19556: LD_EXP 63
19560: PUSH
19561: LD_EXP 64
19565: PUSH
19566: LD_EXP 68
19570: PUSH
19571: LD_EXP 70
19575: PUSH
19576: LD_EXP 65
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: DIFF
19589: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19590: LD_VAR 0 2
19594: PPUSH
19595: LD_STRING other_survivors
19597: PPUSH
19598: LD_INT 3
19600: PPUSH
19601: CALL 4444 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
19605: LD_EXP 77
19609: PPUSH
19610: LD_STRING other_beria
19612: PPUSH
19613: LD_INT 6
19615: PPUSH
19616: CALL 4444 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
19620: LD_EXP 69
19624: PPUSH
19625: LD_STRING other_kirov
19627: PPUSH
19628: LD_INT 6
19630: PPUSH
19631: CALL 4444 0 3
// end ;
19635: LD_VAR 0 1
19639: RET
// function SaveGlobalVariables ; var vehicles ; begin
19640: LD_INT 0
19642: PPUSH
19643: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
19644: LD_ADDR_VAR 0 2
19648: PUSH
19649: LD_INT 22
19651: PUSH
19652: LD_INT 3
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 21
19661: PUSH
19662: LD_INT 2
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 50
19671: PUSH
19672: EMPTY
19673: LIST
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: LIST
19679: PPUSH
19680: CALL_OW 69
19684: ST_TO_ADDR
// if vehicles then
19685: LD_VAR 0 2
19689: IFFALSE 19703
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
19691: LD_VAR 0 2
19695: PPUSH
19696: LD_STRING 02_Vehicles_1
19698: PPUSH
19699: CALL 5475 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
19703: LD_INT 8
19705: PPUSH
19706: LD_INT 21
19708: PUSH
19709: LD_INT 3
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: PPUSH
19719: CALL_OW 70
19723: PPUSH
19724: LD_STRING 02_BeriaBase_2
19726: PPUSH
19727: CALL 5618 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
19731: LD_INT 9
19733: PPUSH
19734: LD_INT 22
19736: PUSH
19737: LD_INT 6
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 21
19746: PUSH
19747: LD_INT 3
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PPUSH
19758: CALL_OW 70
19762: PPUSH
19763: LD_STRING 02_KirovBase_3
19765: PPUSH
19766: CALL 5618 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
19770: LD_INT 22
19772: PUSH
19773: LD_INT 3
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 21
19782: PUSH
19783: LD_INT 3
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 50
19792: PUSH
19793: EMPTY
19794: LIST
19795: PUSH
19796: LD_INT 3
19798: PUSH
19799: LD_INT 95
19801: PUSH
19802: LD_INT 8
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: PPUSH
19819: CALL_OW 69
19823: PPUSH
19824: LD_STRING 02_OtherBuildings_4
19826: PPUSH
19827: CALL 5618 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
19831: LD_INT 22
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 21
19843: PUSH
19844: LD_INT 3
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 50
19853: PUSH
19854: EMPTY
19855: LIST
19856: PUSH
19857: LD_INT 23
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: PPUSH
19873: CALL_OW 69
19877: PPUSH
19878: LD_STRING 02_AmericanBuildings_5
19880: PPUSH
19881: CALL 5618 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
19885: LD_EXP 4
19889: PPUSH
19890: LD_STRING 02_MeetBelkovBrother_6
19892: PPUSH
19893: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
19897: LD_INT 106
19899: PPUSH
19900: CALL_OW 274
19904: PPUSH
19905: LD_INT 1
19907: PPUSH
19908: CALL_OW 275
19912: PPUSH
19913: LD_STRING 02_BeriaResourceCrates_7
19915: PPUSH
19916: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
19920: LD_INT 106
19922: PPUSH
19923: CALL_OW 274
19927: PPUSH
19928: LD_INT 2
19930: PPUSH
19931: CALL_OW 275
19935: PPUSH
19936: LD_STRING 02_BeriaResourceOil_8
19938: PPUSH
19939: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
19943: LD_EXP 5
19947: PPUSH
19948: LD_STRING 02_PlatonovOpinion_9
19950: PPUSH
19951: CALL_OW 39
// end ; end_of_file
19955: LD_VAR 0 1
19959: RET
// export function BurlakIsDead ; begin
19960: LD_INT 0
19962: PPUSH
// YouLost ( Burlak ) ;
19963: LD_STRING Burlak
19965: PPUSH
19966: CALL_OW 104
// end ;
19970: LD_VAR 0 1
19974: RET
// export function AttackComrades ; begin
19975: LD_INT 0
19977: PPUSH
// YouLost ( SelfAttack ) ;
19978: LD_STRING SelfAttack
19980: PPUSH
19981: CALL_OW 104
// end ;
19985: LD_VAR 0 1
19989: RET
// export function BaseDestroyed ; begin
19990: LD_INT 0
19992: PPUSH
// YouLost ( Base ) ;
19993: LD_STRING Base
19995: PPUSH
19996: CALL_OW 104
// end ; end_of_file
20000: LD_VAR 0 1
20004: RET
// every 0 0$1 do var engs ;
20005: GO 20007
20007: DISABLE
20008: LD_INT 0
20010: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
20011: LD_ADDR_VAR 0 1
20015: PUSH
20016: LD_EXP 69
20020: PPUSH
20021: LD_INT 25
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PPUSH
20031: CALL_OW 72
20035: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 122
// wait ( 0 0$1 ) ;
20045: LD_INT 35
20047: PPUSH
20048: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
20052: LD_VAR 0 1
20056: PPUSH
20057: LD_INT 31
20059: PPUSH
20060: LD_INT 146
20062: PPUSH
20063: LD_INT 107
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
20073: LD_VAR 0 1
20077: PPUSH
20078: LD_INT 31
20080: PPUSH
20081: LD_INT 176
20083: PPUSH
20084: LD_INT 123
20086: PPUSH
20087: LD_INT 5
20089: PPUSH
20090: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
20094: LD_VAR 0 1
20098: PPUSH
20099: LD_INT 31
20101: PPUSH
20102: LD_INT 170
20104: PPUSH
20105: LD_INT 102
20107: PPUSH
20108: LD_INT 4
20110: PPUSH
20111: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
20115: LD_VAR 0 1
20119: PPUSH
20120: LD_INT 31
20122: PPUSH
20123: LD_INT 173
20125: PPUSH
20126: LD_INT 105
20128: PPUSH
20129: LD_INT 4
20131: PPUSH
20132: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
20136: LD_VAR 0 1
20140: PPUSH
20141: LD_INT 71
20143: PPUSH
20144: CALL_OW 180
// end ;
20148: PPOPN 1
20150: END
// every 0 0$1 trigger activateAMAI do
20151: LD_EXP 27
20155: IFFALSE 20179
20157: GO 20159
20159: DISABLE
// begin enable ;
20160: ENABLE
// RepairDamageLeftBunkers ;
20161: CALL 20180 0 0
// if Difficulty >= 3 then
20165: LD_OWVAR 67
20169: PUSH
20170: LD_INT 3
20172: GREATEREQUAL
20173: IFFALSE 20179
// RepairDamageRightBunkers ;
20175: CALL 20388 0 0
// end ;
20179: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
20180: LD_INT 0
20182: PPUSH
20183: PPUSH
20184: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20185: LD_EXP 86
20189: NOT
20190: PUSH
20191: LD_INT 17
20193: PPUSH
20194: LD_INT 22
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 21
20206: PUSH
20207: LD_INT 3
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 30
20216: PUSH
20217: LD_INT 31
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 3
20226: PUSH
20227: LD_INT 24
20229: PUSH
20230: LD_INT 1000
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: PPUSH
20247: CALL_OW 70
20251: PUSH
20252: LD_INT 0
20254: EQUAL
20255: OR
20256: IFFALSE 20260
// exit ;
20258: GO 20383
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
20260: LD_EXP 86
20264: PPUSH
20265: LD_INT 3
20267: PUSH
20268: LD_INT 60
20270: PUSH
20271: EMPTY
20272: LIST
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PPUSH
20278: CALL_OW 72
20282: PPUSH
20283: CALL_OW 122
// for bunker in leftBunkers do
20287: LD_ADDR_VAR 0 3
20291: PUSH
20292: LD_EXP 82
20296: PUSH
20297: FOR_IN
20298: IFFALSE 20349
// if GetLives ( bunker ) < 1000 then
20300: LD_VAR 0 3
20304: PPUSH
20305: CALL_OW 256
20309: PUSH
20310: LD_INT 1000
20312: LESS
20313: IFFALSE 20347
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20315: LD_EXP 86
20319: PPUSH
20320: LD_INT 3
20322: PUSH
20323: LD_INT 60
20325: PUSH
20326: EMPTY
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PPUSH
20333: CALL_OW 72
20337: PPUSH
20338: LD_VAR 0 3
20342: PPUSH
20343: CALL_OW 190
20347: GO 20297
20349: POP
20350: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
20351: LD_EXP 86
20355: PPUSH
20356: LD_INT 3
20358: PUSH
20359: LD_INT 60
20361: PUSH
20362: EMPTY
20363: LIST
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 72
20373: PPUSH
20374: LD_EXP 84
20378: PPUSH
20379: CALL_OW 180
// end ;
20383: LD_VAR 0 1
20387: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
20388: LD_INT 0
20390: PPUSH
20391: PPUSH
20392: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20393: LD_EXP 87
20397: NOT
20398: PUSH
20399: LD_INT 16
20401: PPUSH
20402: LD_INT 22
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 21
20414: PUSH
20415: LD_INT 3
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 30
20424: PUSH
20425: LD_INT 31
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 3
20434: PUSH
20435: LD_INT 24
20437: PUSH
20438: LD_INT 1000
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 70
20459: PUSH
20460: LD_INT 0
20462: EQUAL
20463: OR
20464: IFFALSE 20468
// exit ;
20466: GO 20591
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
20468: LD_EXP 87
20472: PPUSH
20473: LD_INT 3
20475: PUSH
20476: LD_INT 60
20478: PUSH
20479: EMPTY
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PPUSH
20486: CALL_OW 72
20490: PPUSH
20491: CALL_OW 122
// for bunker in rightBunkers do
20495: LD_ADDR_VAR 0 3
20499: PUSH
20500: LD_EXP 83
20504: PUSH
20505: FOR_IN
20506: IFFALSE 20557
// if GetLives ( bunker ) < 1000 then
20508: LD_VAR 0 3
20512: PPUSH
20513: CALL_OW 256
20517: PUSH
20518: LD_INT 1000
20520: LESS
20521: IFFALSE 20555
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20523: LD_EXP 87
20527: PPUSH
20528: LD_INT 3
20530: PUSH
20531: LD_INT 60
20533: PUSH
20534: EMPTY
20535: LIST
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PPUSH
20541: CALL_OW 72
20545: PPUSH
20546: LD_VAR 0 3
20550: PPUSH
20551: CALL_OW 190
20555: GO 20505
20557: POP
20558: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
20559: LD_EXP 87
20563: PPUSH
20564: LD_INT 3
20566: PUSH
20567: LD_INT 60
20569: PUSH
20570: EMPTY
20571: LIST
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PPUSH
20577: CALL_OW 72
20581: PPUSH
20582: LD_EXP 85
20586: PPUSH
20587: CALL_OW 180
// end ;
20591: LD_VAR 0 1
20595: RET
// every 0 0$1 trigger activateBelkovAI and belkovTeam do var unit , med , damaged ;
20596: LD_EXP 28
20600: PUSH
20601: LD_EXP 73
20605: AND
20606: IFFALSE 20743
20608: GO 20610
20610: DISABLE
20611: LD_INT 0
20613: PPUSH
20614: PPUSH
20615: PPUSH
// begin enable ;
20616: ENABLE
// med = UnitFilter ( belkovTeam , [ f_class , class_scientistic ] ) ;
20617: LD_ADDR_VAR 0 2
20621: PUSH
20622: LD_EXP 73
20626: PPUSH
20627: LD_INT 25
20629: PUSH
20630: LD_INT 4
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PPUSH
20637: CALL_OW 72
20641: ST_TO_ADDR
// damaged = UnitFilter ( belkovTeam , [ f_not , [ f_lives , 650 ] ] ) ;
20642: LD_ADDR_VAR 0 3
20646: PUSH
20647: LD_EXP 73
20651: PPUSH
20652: LD_INT 3
20654: PUSH
20655: LD_INT 24
20657: PUSH
20658: LD_INT 650
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PPUSH
20669: CALL_OW 72
20673: ST_TO_ADDR
// if not damaged and med then
20674: LD_VAR 0 3
20678: NOT
20679: PUSH
20680: LD_VAR 0 2
20684: AND
20685: IFFALSE 20704
// ComMoveXY ( med , 83 , 17 ) else
20687: LD_VAR 0 2
20691: PPUSH
20692: LD_INT 83
20694: PPUSH
20695: LD_INT 17
20697: PPUSH
20698: CALL_OW 111
20702: GO 20743
// if med then
20704: LD_VAR 0 2
20708: IFFALSE 20743
// begin ComMoveXY ( damaged , 83 , 17 ) ;
20710: LD_VAR 0 3
20714: PPUSH
20715: LD_INT 83
20717: PPUSH
20718: LD_INT 17
20720: PPUSH
20721: CALL_OW 111
// ComHeal ( med , damaged [ 1 ] ) ;
20725: LD_VAR 0 2
20729: PPUSH
20730: LD_VAR 0 3
20734: PUSH
20735: LD_INT 1
20737: ARRAY
20738: PPUSH
20739: CALL_OW 128
// end ; end ; end_of_file
20743: PPOPN 3
20745: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_american ] , [ f_btype , b_depot ] ] ) = 2 do
20746: LD_INT 22
20748: PUSH
20749: LD_INT 3
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 23
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 30
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: PPUSH
20781: CALL_OW 69
20785: PUSH
20786: LD_INT 2
20788: EQUAL
20789: IFFALSE 20801
20791: GO 20793
20793: DISABLE
// SetAchievement ( ACH_DEPOT ) ;
20794: LD_STRING ACH_DEPOT
20796: PPUSH
20797: CALL_OW 543
20801: END
// every 1 trigger achievement_ConstructVehicles = 5 do
20802: LD_EXP 44
20806: PUSH
20807: LD_INT 5
20809: EQUAL
20810: IFFALSE 20822
20812: GO 20814
20814: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
20815: LD_STRING ACH_WORKSHOP
20817: PPUSH
20818: CALL_OW 543
20822: END
// every 1 trigger captureBelkovVehicle do
20823: LD_EXP 38
20827: IFFALSE 20839
20829: GO 20831
20831: DISABLE
// SetAchievement ( ACH_RETAKE ) ; end_of_file
20832: LD_STRING ACH_RETAKE
20834: PPUSH
20835: CALL_OW 543
20839: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20840: LD_INT 0
20842: PPUSH
// if p2 = 100 then
20843: LD_VAR 0 2
20847: PUSH
20848: LD_INT 100
20850: EQUAL
20851: IFFALSE 21800
// begin if not StreamModeActive then
20853: LD_EXP 90
20857: NOT
20858: IFFALSE 20868
// StreamModeActive := true ;
20860: LD_ADDR_EXP 90
20864: PUSH
20865: LD_INT 1
20867: ST_TO_ADDR
// if p3 = 0 then
20868: LD_VAR 0 3
20872: PUSH
20873: LD_INT 0
20875: EQUAL
20876: IFFALSE 20882
// InitStreamMode ;
20878: CALL 21960 0 0
// if p3 = 1 then
20882: LD_VAR 0 3
20886: PUSH
20887: LD_INT 1
20889: EQUAL
20890: IFFALSE 20900
// sRocket := true ;
20892: LD_ADDR_EXP 95
20896: PUSH
20897: LD_INT 1
20899: ST_TO_ADDR
// if p3 = 2 then
20900: LD_VAR 0 3
20904: PUSH
20905: LD_INT 2
20907: EQUAL
20908: IFFALSE 20918
// sSpeed := true ;
20910: LD_ADDR_EXP 94
20914: PUSH
20915: LD_INT 1
20917: ST_TO_ADDR
// if p3 = 3 then
20918: LD_VAR 0 3
20922: PUSH
20923: LD_INT 3
20925: EQUAL
20926: IFFALSE 20936
// sEngine := true ;
20928: LD_ADDR_EXP 96
20932: PUSH
20933: LD_INT 1
20935: ST_TO_ADDR
// if p3 = 4 then
20936: LD_VAR 0 3
20940: PUSH
20941: LD_INT 4
20943: EQUAL
20944: IFFALSE 20954
// sSpec := true ;
20946: LD_ADDR_EXP 93
20950: PUSH
20951: LD_INT 1
20953: ST_TO_ADDR
// if p3 = 5 then
20954: LD_VAR 0 3
20958: PUSH
20959: LD_INT 5
20961: EQUAL
20962: IFFALSE 20972
// sLevel := true ;
20964: LD_ADDR_EXP 97
20968: PUSH
20969: LD_INT 1
20971: ST_TO_ADDR
// if p3 = 6 then
20972: LD_VAR 0 3
20976: PUSH
20977: LD_INT 6
20979: EQUAL
20980: IFFALSE 20990
// sArmoury := true ;
20982: LD_ADDR_EXP 98
20986: PUSH
20987: LD_INT 1
20989: ST_TO_ADDR
// if p3 = 7 then
20990: LD_VAR 0 3
20994: PUSH
20995: LD_INT 7
20997: EQUAL
20998: IFFALSE 21008
// sRadar := true ;
21000: LD_ADDR_EXP 99
21004: PUSH
21005: LD_INT 1
21007: ST_TO_ADDR
// if p3 = 8 then
21008: LD_VAR 0 3
21012: PUSH
21013: LD_INT 8
21015: EQUAL
21016: IFFALSE 21026
// sBunker := true ;
21018: LD_ADDR_EXP 100
21022: PUSH
21023: LD_INT 1
21025: ST_TO_ADDR
// if p3 = 9 then
21026: LD_VAR 0 3
21030: PUSH
21031: LD_INT 9
21033: EQUAL
21034: IFFALSE 21044
// sHack := true ;
21036: LD_ADDR_EXP 101
21040: PUSH
21041: LD_INT 1
21043: ST_TO_ADDR
// if p3 = 10 then
21044: LD_VAR 0 3
21048: PUSH
21049: LD_INT 10
21051: EQUAL
21052: IFFALSE 21062
// sFire := true ;
21054: LD_ADDR_EXP 102
21058: PUSH
21059: LD_INT 1
21061: ST_TO_ADDR
// if p3 = 11 then
21062: LD_VAR 0 3
21066: PUSH
21067: LD_INT 11
21069: EQUAL
21070: IFFALSE 21080
// sRefresh := true ;
21072: LD_ADDR_EXP 103
21076: PUSH
21077: LD_INT 1
21079: ST_TO_ADDR
// if p3 = 12 then
21080: LD_VAR 0 3
21084: PUSH
21085: LD_INT 12
21087: EQUAL
21088: IFFALSE 21098
// sExp := true ;
21090: LD_ADDR_EXP 104
21094: PUSH
21095: LD_INT 1
21097: ST_TO_ADDR
// if p3 = 13 then
21098: LD_VAR 0 3
21102: PUSH
21103: LD_INT 13
21105: EQUAL
21106: IFFALSE 21116
// sDepot := true ;
21108: LD_ADDR_EXP 105
21112: PUSH
21113: LD_INT 1
21115: ST_TO_ADDR
// if p3 = 14 then
21116: LD_VAR 0 3
21120: PUSH
21121: LD_INT 14
21123: EQUAL
21124: IFFALSE 21134
// sFlag := true ;
21126: LD_ADDR_EXP 106
21130: PUSH
21131: LD_INT 1
21133: ST_TO_ADDR
// if p3 = 15 then
21134: LD_VAR 0 3
21138: PUSH
21139: LD_INT 15
21141: EQUAL
21142: IFFALSE 21152
// sKamikadze := true ;
21144: LD_ADDR_EXP 114
21148: PUSH
21149: LD_INT 1
21151: ST_TO_ADDR
// if p3 = 16 then
21152: LD_VAR 0 3
21156: PUSH
21157: LD_INT 16
21159: EQUAL
21160: IFFALSE 21170
// sTroll := true ;
21162: LD_ADDR_EXP 115
21166: PUSH
21167: LD_INT 1
21169: ST_TO_ADDR
// if p3 = 17 then
21170: LD_VAR 0 3
21174: PUSH
21175: LD_INT 17
21177: EQUAL
21178: IFFALSE 21188
// sSlow := true ;
21180: LD_ADDR_EXP 116
21184: PUSH
21185: LD_INT 1
21187: ST_TO_ADDR
// if p3 = 18 then
21188: LD_VAR 0 3
21192: PUSH
21193: LD_INT 18
21195: EQUAL
21196: IFFALSE 21206
// sLack := true ;
21198: LD_ADDR_EXP 117
21202: PUSH
21203: LD_INT 1
21205: ST_TO_ADDR
// if p3 = 19 then
21206: LD_VAR 0 3
21210: PUSH
21211: LD_INT 19
21213: EQUAL
21214: IFFALSE 21224
// sTank := true ;
21216: LD_ADDR_EXP 119
21220: PUSH
21221: LD_INT 1
21223: ST_TO_ADDR
// if p3 = 20 then
21224: LD_VAR 0 3
21228: PUSH
21229: LD_INT 20
21231: EQUAL
21232: IFFALSE 21242
// sRemote := true ;
21234: LD_ADDR_EXP 120
21238: PUSH
21239: LD_INT 1
21241: ST_TO_ADDR
// if p3 = 21 then
21242: LD_VAR 0 3
21246: PUSH
21247: LD_INT 21
21249: EQUAL
21250: IFFALSE 21260
// sPowell := true ;
21252: LD_ADDR_EXP 121
21256: PUSH
21257: LD_INT 1
21259: ST_TO_ADDR
// if p3 = 22 then
21260: LD_VAR 0 3
21264: PUSH
21265: LD_INT 22
21267: EQUAL
21268: IFFALSE 21278
// sTeleport := true ;
21270: LD_ADDR_EXP 124
21274: PUSH
21275: LD_INT 1
21277: ST_TO_ADDR
// if p3 = 23 then
21278: LD_VAR 0 3
21282: PUSH
21283: LD_INT 23
21285: EQUAL
21286: IFFALSE 21296
// sOilTower := true ;
21288: LD_ADDR_EXP 126
21292: PUSH
21293: LD_INT 1
21295: ST_TO_ADDR
// if p3 = 24 then
21296: LD_VAR 0 3
21300: PUSH
21301: LD_INT 24
21303: EQUAL
21304: IFFALSE 21314
// sShovel := true ;
21306: LD_ADDR_EXP 127
21310: PUSH
21311: LD_INT 1
21313: ST_TO_ADDR
// if p3 = 25 then
21314: LD_VAR 0 3
21318: PUSH
21319: LD_INT 25
21321: EQUAL
21322: IFFALSE 21332
// sSheik := true ;
21324: LD_ADDR_EXP 128
21328: PUSH
21329: LD_INT 1
21331: ST_TO_ADDR
// if p3 = 26 then
21332: LD_VAR 0 3
21336: PUSH
21337: LD_INT 26
21339: EQUAL
21340: IFFALSE 21350
// sEarthquake := true ;
21342: LD_ADDR_EXP 130
21346: PUSH
21347: LD_INT 1
21349: ST_TO_ADDR
// if p3 = 27 then
21350: LD_VAR 0 3
21354: PUSH
21355: LD_INT 27
21357: EQUAL
21358: IFFALSE 21368
// sAI := true ;
21360: LD_ADDR_EXP 131
21364: PUSH
21365: LD_INT 1
21367: ST_TO_ADDR
// if p3 = 28 then
21368: LD_VAR 0 3
21372: PUSH
21373: LD_INT 28
21375: EQUAL
21376: IFFALSE 21386
// sCargo := true ;
21378: LD_ADDR_EXP 134
21382: PUSH
21383: LD_INT 1
21385: ST_TO_ADDR
// if p3 = 29 then
21386: LD_VAR 0 3
21390: PUSH
21391: LD_INT 29
21393: EQUAL
21394: IFFALSE 21404
// sDLaser := true ;
21396: LD_ADDR_EXP 135
21400: PUSH
21401: LD_INT 1
21403: ST_TO_ADDR
// if p3 = 30 then
21404: LD_VAR 0 3
21408: PUSH
21409: LD_INT 30
21411: EQUAL
21412: IFFALSE 21422
// sExchange := true ;
21414: LD_ADDR_EXP 136
21418: PUSH
21419: LD_INT 1
21421: ST_TO_ADDR
// if p3 = 31 then
21422: LD_VAR 0 3
21426: PUSH
21427: LD_INT 31
21429: EQUAL
21430: IFFALSE 21440
// sFac := true ;
21432: LD_ADDR_EXP 137
21436: PUSH
21437: LD_INT 1
21439: ST_TO_ADDR
// if p3 = 32 then
21440: LD_VAR 0 3
21444: PUSH
21445: LD_INT 32
21447: EQUAL
21448: IFFALSE 21458
// sPower := true ;
21450: LD_ADDR_EXP 138
21454: PUSH
21455: LD_INT 1
21457: ST_TO_ADDR
// if p3 = 33 then
21458: LD_VAR 0 3
21462: PUSH
21463: LD_INT 33
21465: EQUAL
21466: IFFALSE 21476
// sRandom := true ;
21468: LD_ADDR_EXP 139
21472: PUSH
21473: LD_INT 1
21475: ST_TO_ADDR
// if p3 = 34 then
21476: LD_VAR 0 3
21480: PUSH
21481: LD_INT 34
21483: EQUAL
21484: IFFALSE 21494
// sShield := true ;
21486: LD_ADDR_EXP 140
21490: PUSH
21491: LD_INT 1
21493: ST_TO_ADDR
// if p3 = 35 then
21494: LD_VAR 0 3
21498: PUSH
21499: LD_INT 35
21501: EQUAL
21502: IFFALSE 21512
// sTime := true ;
21504: LD_ADDR_EXP 141
21508: PUSH
21509: LD_INT 1
21511: ST_TO_ADDR
// if p3 = 36 then
21512: LD_VAR 0 3
21516: PUSH
21517: LD_INT 36
21519: EQUAL
21520: IFFALSE 21530
// sTools := true ;
21522: LD_ADDR_EXP 142
21526: PUSH
21527: LD_INT 1
21529: ST_TO_ADDR
// if p3 = 101 then
21530: LD_VAR 0 3
21534: PUSH
21535: LD_INT 101
21537: EQUAL
21538: IFFALSE 21548
// sSold := true ;
21540: LD_ADDR_EXP 107
21544: PUSH
21545: LD_INT 1
21547: ST_TO_ADDR
// if p3 = 102 then
21548: LD_VAR 0 3
21552: PUSH
21553: LD_INT 102
21555: EQUAL
21556: IFFALSE 21566
// sDiff := true ;
21558: LD_ADDR_EXP 108
21562: PUSH
21563: LD_INT 1
21565: ST_TO_ADDR
// if p3 = 103 then
21566: LD_VAR 0 3
21570: PUSH
21571: LD_INT 103
21573: EQUAL
21574: IFFALSE 21584
// sFog := true ;
21576: LD_ADDR_EXP 111
21580: PUSH
21581: LD_INT 1
21583: ST_TO_ADDR
// if p3 = 104 then
21584: LD_VAR 0 3
21588: PUSH
21589: LD_INT 104
21591: EQUAL
21592: IFFALSE 21602
// sReset := true ;
21594: LD_ADDR_EXP 112
21598: PUSH
21599: LD_INT 1
21601: ST_TO_ADDR
// if p3 = 105 then
21602: LD_VAR 0 3
21606: PUSH
21607: LD_INT 105
21609: EQUAL
21610: IFFALSE 21620
// sSun := true ;
21612: LD_ADDR_EXP 113
21616: PUSH
21617: LD_INT 1
21619: ST_TO_ADDR
// if p3 = 106 then
21620: LD_VAR 0 3
21624: PUSH
21625: LD_INT 106
21627: EQUAL
21628: IFFALSE 21638
// sTiger := true ;
21630: LD_ADDR_EXP 109
21634: PUSH
21635: LD_INT 1
21637: ST_TO_ADDR
// if p3 = 107 then
21638: LD_VAR 0 3
21642: PUSH
21643: LD_INT 107
21645: EQUAL
21646: IFFALSE 21656
// sBomb := true ;
21648: LD_ADDR_EXP 110
21652: PUSH
21653: LD_INT 1
21655: ST_TO_ADDR
// if p3 = 108 then
21656: LD_VAR 0 3
21660: PUSH
21661: LD_INT 108
21663: EQUAL
21664: IFFALSE 21674
// sWound := true ;
21666: LD_ADDR_EXP 118
21670: PUSH
21671: LD_INT 1
21673: ST_TO_ADDR
// if p3 = 109 then
21674: LD_VAR 0 3
21678: PUSH
21679: LD_INT 109
21681: EQUAL
21682: IFFALSE 21692
// sBetray := true ;
21684: LD_ADDR_EXP 122
21688: PUSH
21689: LD_INT 1
21691: ST_TO_ADDR
// if p3 = 110 then
21692: LD_VAR 0 3
21696: PUSH
21697: LD_INT 110
21699: EQUAL
21700: IFFALSE 21710
// sContamin := true ;
21702: LD_ADDR_EXP 123
21706: PUSH
21707: LD_INT 1
21709: ST_TO_ADDR
// if p3 = 111 then
21710: LD_VAR 0 3
21714: PUSH
21715: LD_INT 111
21717: EQUAL
21718: IFFALSE 21728
// sOil := true ;
21720: LD_ADDR_EXP 125
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// if p3 = 112 then
21728: LD_VAR 0 3
21732: PUSH
21733: LD_INT 112
21735: EQUAL
21736: IFFALSE 21746
// sStu := true ;
21738: LD_ADDR_EXP 129
21742: PUSH
21743: LD_INT 1
21745: ST_TO_ADDR
// if p3 = 113 then
21746: LD_VAR 0 3
21750: PUSH
21751: LD_INT 113
21753: EQUAL
21754: IFFALSE 21764
// sBazooka := true ;
21756: LD_ADDR_EXP 132
21760: PUSH
21761: LD_INT 1
21763: ST_TO_ADDR
// if p3 = 114 then
21764: LD_VAR 0 3
21768: PUSH
21769: LD_INT 114
21771: EQUAL
21772: IFFALSE 21782
// sMortar := true ;
21774: LD_ADDR_EXP 133
21778: PUSH
21779: LD_INT 1
21781: ST_TO_ADDR
// if p3 = 115 then
21782: LD_VAR 0 3
21786: PUSH
21787: LD_INT 115
21789: EQUAL
21790: IFFALSE 21800
// sRanger := true ;
21792: LD_ADDR_EXP 143
21796: PUSH
21797: LD_INT 1
21799: ST_TO_ADDR
// end ; if p2 = 101 then
21800: LD_VAR 0 2
21804: PUSH
21805: LD_INT 101
21807: EQUAL
21808: IFFALSE 21936
// begin case p3 of 1 :
21810: LD_VAR 0 3
21814: PUSH
21815: LD_INT 1
21817: DOUBLE
21818: EQUAL
21819: IFTRUE 21823
21821: GO 21830
21823: POP
// hHackUnlimitedResources ; 2 :
21824: CALL 32973 0 0
21828: GO 21936
21830: LD_INT 2
21832: DOUBLE
21833: EQUAL
21834: IFTRUE 21838
21836: GO 21845
21838: POP
// hHackSetLevel10 ; 3 :
21839: CALL 33106 0 0
21843: GO 21936
21845: LD_INT 3
21847: DOUBLE
21848: EQUAL
21849: IFTRUE 21853
21851: GO 21860
21853: POP
// hHackSetLevel10YourUnits ; 4 :
21854: CALL 33191 0 0
21858: GO 21936
21860: LD_INT 4
21862: DOUBLE
21863: EQUAL
21864: IFTRUE 21868
21866: GO 21875
21868: POP
// hHackInvincible ; 5 :
21869: CALL 33639 0 0
21873: GO 21936
21875: LD_INT 5
21877: DOUBLE
21878: EQUAL
21879: IFTRUE 21883
21881: GO 21890
21883: POP
// hHackInvisible ; 6 :
21884: CALL 33750 0 0
21888: GO 21936
21890: LD_INT 6
21892: DOUBLE
21893: EQUAL
21894: IFTRUE 21898
21896: GO 21905
21898: POP
// hHackChangeYourSide ; 7 :
21899: CALL 33807 0 0
21903: GO 21936
21905: LD_INT 7
21907: DOUBLE
21908: EQUAL
21909: IFTRUE 21913
21911: GO 21920
21913: POP
// hHackChangeUnitSide ; 8 :
21914: CALL 33849 0 0
21918: GO 21936
21920: LD_INT 8
21922: DOUBLE
21923: EQUAL
21924: IFTRUE 21928
21926: GO 21935
21928: POP
// hHackFog ; end ;
21929: CALL 33950 0 0
21933: GO 21936
21935: POP
// end ; end ;
21936: LD_VAR 0 7
21940: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
21941: GO 21943
21943: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21944: LD_STRING initStreamRollete();
21946: PPUSH
21947: CALL_OW 559
// InitStreamMode ;
21951: CALL 21960 0 0
// DefineStreamItems ( ) ;
21955: CALL 22400 0 0
// end ;
21959: END
// function InitStreamMode ; begin
21960: LD_INT 0
21962: PPUSH
// streamModeActive := false ;
21963: LD_ADDR_EXP 90
21967: PUSH
21968: LD_INT 0
21970: ST_TO_ADDR
// normalCounter := 36 ;
21971: LD_ADDR_EXP 91
21975: PUSH
21976: LD_INT 36
21978: ST_TO_ADDR
// hardcoreCounter := 16 ;
21979: LD_ADDR_EXP 92
21983: PUSH
21984: LD_INT 16
21986: ST_TO_ADDR
// sRocket := false ;
21987: LD_ADDR_EXP 95
21991: PUSH
21992: LD_INT 0
21994: ST_TO_ADDR
// sSpeed := false ;
21995: LD_ADDR_EXP 94
21999: PUSH
22000: LD_INT 0
22002: ST_TO_ADDR
// sEngine := false ;
22003: LD_ADDR_EXP 96
22007: PUSH
22008: LD_INT 0
22010: ST_TO_ADDR
// sSpec := false ;
22011: LD_ADDR_EXP 93
22015: PUSH
22016: LD_INT 0
22018: ST_TO_ADDR
// sLevel := false ;
22019: LD_ADDR_EXP 97
22023: PUSH
22024: LD_INT 0
22026: ST_TO_ADDR
// sArmoury := false ;
22027: LD_ADDR_EXP 98
22031: PUSH
22032: LD_INT 0
22034: ST_TO_ADDR
// sRadar := false ;
22035: LD_ADDR_EXP 99
22039: PUSH
22040: LD_INT 0
22042: ST_TO_ADDR
// sBunker := false ;
22043: LD_ADDR_EXP 100
22047: PUSH
22048: LD_INT 0
22050: ST_TO_ADDR
// sHack := false ;
22051: LD_ADDR_EXP 101
22055: PUSH
22056: LD_INT 0
22058: ST_TO_ADDR
// sFire := false ;
22059: LD_ADDR_EXP 102
22063: PUSH
22064: LD_INT 0
22066: ST_TO_ADDR
// sRefresh := false ;
22067: LD_ADDR_EXP 103
22071: PUSH
22072: LD_INT 0
22074: ST_TO_ADDR
// sExp := false ;
22075: LD_ADDR_EXP 104
22079: PUSH
22080: LD_INT 0
22082: ST_TO_ADDR
// sDepot := false ;
22083: LD_ADDR_EXP 105
22087: PUSH
22088: LD_INT 0
22090: ST_TO_ADDR
// sFlag := false ;
22091: LD_ADDR_EXP 106
22095: PUSH
22096: LD_INT 0
22098: ST_TO_ADDR
// sKamikadze := false ;
22099: LD_ADDR_EXP 114
22103: PUSH
22104: LD_INT 0
22106: ST_TO_ADDR
// sTroll := false ;
22107: LD_ADDR_EXP 115
22111: PUSH
22112: LD_INT 0
22114: ST_TO_ADDR
// sSlow := false ;
22115: LD_ADDR_EXP 116
22119: PUSH
22120: LD_INT 0
22122: ST_TO_ADDR
// sLack := false ;
22123: LD_ADDR_EXP 117
22127: PUSH
22128: LD_INT 0
22130: ST_TO_ADDR
// sTank := false ;
22131: LD_ADDR_EXP 119
22135: PUSH
22136: LD_INT 0
22138: ST_TO_ADDR
// sRemote := false ;
22139: LD_ADDR_EXP 120
22143: PUSH
22144: LD_INT 0
22146: ST_TO_ADDR
// sPowell := false ;
22147: LD_ADDR_EXP 121
22151: PUSH
22152: LD_INT 0
22154: ST_TO_ADDR
// sTeleport := false ;
22155: LD_ADDR_EXP 124
22159: PUSH
22160: LD_INT 0
22162: ST_TO_ADDR
// sOilTower := false ;
22163: LD_ADDR_EXP 126
22167: PUSH
22168: LD_INT 0
22170: ST_TO_ADDR
// sShovel := false ;
22171: LD_ADDR_EXP 127
22175: PUSH
22176: LD_INT 0
22178: ST_TO_ADDR
// sSheik := false ;
22179: LD_ADDR_EXP 128
22183: PUSH
22184: LD_INT 0
22186: ST_TO_ADDR
// sEarthquake := false ;
22187: LD_ADDR_EXP 130
22191: PUSH
22192: LD_INT 0
22194: ST_TO_ADDR
// sAI := false ;
22195: LD_ADDR_EXP 131
22199: PUSH
22200: LD_INT 0
22202: ST_TO_ADDR
// sCargo := false ;
22203: LD_ADDR_EXP 134
22207: PUSH
22208: LD_INT 0
22210: ST_TO_ADDR
// sDLaser := false ;
22211: LD_ADDR_EXP 135
22215: PUSH
22216: LD_INT 0
22218: ST_TO_ADDR
// sExchange := false ;
22219: LD_ADDR_EXP 136
22223: PUSH
22224: LD_INT 0
22226: ST_TO_ADDR
// sFac := false ;
22227: LD_ADDR_EXP 137
22231: PUSH
22232: LD_INT 0
22234: ST_TO_ADDR
// sPower := false ;
22235: LD_ADDR_EXP 138
22239: PUSH
22240: LD_INT 0
22242: ST_TO_ADDR
// sRandom := false ;
22243: LD_ADDR_EXP 139
22247: PUSH
22248: LD_INT 0
22250: ST_TO_ADDR
// sShield := false ;
22251: LD_ADDR_EXP 140
22255: PUSH
22256: LD_INT 0
22258: ST_TO_ADDR
// sTime := false ;
22259: LD_ADDR_EXP 141
22263: PUSH
22264: LD_INT 0
22266: ST_TO_ADDR
// sTools := false ;
22267: LD_ADDR_EXP 142
22271: PUSH
22272: LD_INT 0
22274: ST_TO_ADDR
// sSold := false ;
22275: LD_ADDR_EXP 107
22279: PUSH
22280: LD_INT 0
22282: ST_TO_ADDR
// sDiff := false ;
22283: LD_ADDR_EXP 108
22287: PUSH
22288: LD_INT 0
22290: ST_TO_ADDR
// sFog := false ;
22291: LD_ADDR_EXP 111
22295: PUSH
22296: LD_INT 0
22298: ST_TO_ADDR
// sReset := false ;
22299: LD_ADDR_EXP 112
22303: PUSH
22304: LD_INT 0
22306: ST_TO_ADDR
// sSun := false ;
22307: LD_ADDR_EXP 113
22311: PUSH
22312: LD_INT 0
22314: ST_TO_ADDR
// sTiger := false ;
22315: LD_ADDR_EXP 109
22319: PUSH
22320: LD_INT 0
22322: ST_TO_ADDR
// sBomb := false ;
22323: LD_ADDR_EXP 110
22327: PUSH
22328: LD_INT 0
22330: ST_TO_ADDR
// sWound := false ;
22331: LD_ADDR_EXP 118
22335: PUSH
22336: LD_INT 0
22338: ST_TO_ADDR
// sBetray := false ;
22339: LD_ADDR_EXP 122
22343: PUSH
22344: LD_INT 0
22346: ST_TO_ADDR
// sContamin := false ;
22347: LD_ADDR_EXP 123
22351: PUSH
22352: LD_INT 0
22354: ST_TO_ADDR
// sOil := false ;
22355: LD_ADDR_EXP 125
22359: PUSH
22360: LD_INT 0
22362: ST_TO_ADDR
// sStu := false ;
22363: LD_ADDR_EXP 129
22367: PUSH
22368: LD_INT 0
22370: ST_TO_ADDR
// sBazooka := false ;
22371: LD_ADDR_EXP 132
22375: PUSH
22376: LD_INT 0
22378: ST_TO_ADDR
// sMortar := false ;
22379: LD_ADDR_EXP 133
22383: PUSH
22384: LD_INT 0
22386: ST_TO_ADDR
// sRanger := false ;
22387: LD_ADDR_EXP 143
22391: PUSH
22392: LD_INT 0
22394: ST_TO_ADDR
// end ;
22395: LD_VAR 0 1
22399: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
22400: LD_INT 0
22402: PPUSH
22403: PPUSH
22404: PPUSH
22405: PPUSH
22406: PPUSH
// result := [ ] ;
22407: LD_ADDR_VAR 0 1
22411: PUSH
22412: EMPTY
22413: ST_TO_ADDR
// if campaign_id = 1 then
22414: LD_OWVAR 69
22418: PUSH
22419: LD_INT 1
22421: EQUAL
22422: IFFALSE 25360
// begin case mission_number of 1 :
22424: LD_OWVAR 70
22428: PUSH
22429: LD_INT 1
22431: DOUBLE
22432: EQUAL
22433: IFTRUE 22437
22435: GO 22501
22437: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
22438: LD_ADDR_VAR 0 1
22442: PUSH
22443: LD_INT 2
22445: PUSH
22446: LD_INT 4
22448: PUSH
22449: LD_INT 11
22451: PUSH
22452: LD_INT 12
22454: PUSH
22455: LD_INT 15
22457: PUSH
22458: LD_INT 16
22460: PUSH
22461: LD_INT 22
22463: PUSH
22464: LD_INT 23
22466: PUSH
22467: LD_INT 26
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 101
22483: PUSH
22484: LD_INT 102
22486: PUSH
22487: LD_INT 106
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: LIST
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: ST_TO_ADDR
22499: GO 25358
22501: LD_INT 2
22503: DOUBLE
22504: EQUAL
22505: IFTRUE 22509
22507: GO 22581
22509: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
22510: LD_ADDR_VAR 0 1
22514: PUSH
22515: LD_INT 2
22517: PUSH
22518: LD_INT 4
22520: PUSH
22521: LD_INT 11
22523: PUSH
22524: LD_INT 12
22526: PUSH
22527: LD_INT 15
22529: PUSH
22530: LD_INT 16
22532: PUSH
22533: LD_INT 22
22535: PUSH
22536: LD_INT 23
22538: PUSH
22539: LD_INT 26
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 101
22555: PUSH
22556: LD_INT 102
22558: PUSH
22559: LD_INT 105
22561: PUSH
22562: LD_INT 106
22564: PUSH
22565: LD_INT 108
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: ST_TO_ADDR
22579: GO 25358
22581: LD_INT 3
22583: DOUBLE
22584: EQUAL
22585: IFTRUE 22589
22587: GO 22665
22589: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
22590: LD_ADDR_VAR 0 1
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: LD_INT 4
22600: PUSH
22601: LD_INT 5
22603: PUSH
22604: LD_INT 11
22606: PUSH
22607: LD_INT 12
22609: PUSH
22610: LD_INT 15
22612: PUSH
22613: LD_INT 16
22615: PUSH
22616: LD_INT 22
22618: PUSH
22619: LD_INT 26
22621: PUSH
22622: LD_INT 36
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 101
22639: PUSH
22640: LD_INT 102
22642: PUSH
22643: LD_INT 105
22645: PUSH
22646: LD_INT 106
22648: PUSH
22649: LD_INT 108
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: ST_TO_ADDR
22663: GO 25358
22665: LD_INT 4
22667: DOUBLE
22668: EQUAL
22669: IFTRUE 22673
22671: GO 22757
22673: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
22674: LD_ADDR_VAR 0 1
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: LD_INT 4
22684: PUSH
22685: LD_INT 5
22687: PUSH
22688: LD_INT 8
22690: PUSH
22691: LD_INT 11
22693: PUSH
22694: LD_INT 12
22696: PUSH
22697: LD_INT 15
22699: PUSH
22700: LD_INT 16
22702: PUSH
22703: LD_INT 22
22705: PUSH
22706: LD_INT 23
22708: PUSH
22709: LD_INT 26
22711: PUSH
22712: LD_INT 36
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 101
22731: PUSH
22732: LD_INT 102
22734: PUSH
22735: LD_INT 105
22737: PUSH
22738: LD_INT 106
22740: PUSH
22741: LD_INT 108
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: ST_TO_ADDR
22755: GO 25358
22757: LD_INT 5
22759: DOUBLE
22760: EQUAL
22761: IFTRUE 22765
22763: GO 22865
22765: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
22766: LD_ADDR_VAR 0 1
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: LD_INT 4
22776: PUSH
22777: LD_INT 5
22779: PUSH
22780: LD_INT 6
22782: PUSH
22783: LD_INT 8
22785: PUSH
22786: LD_INT 11
22788: PUSH
22789: LD_INT 12
22791: PUSH
22792: LD_INT 15
22794: PUSH
22795: LD_INT 16
22797: PUSH
22798: LD_INT 22
22800: PUSH
22801: LD_INT 23
22803: PUSH
22804: LD_INT 25
22806: PUSH
22807: LD_INT 26
22809: PUSH
22810: LD_INT 36
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 101
22831: PUSH
22832: LD_INT 102
22834: PUSH
22835: LD_INT 105
22837: PUSH
22838: LD_INT 106
22840: PUSH
22841: LD_INT 108
22843: PUSH
22844: LD_INT 109
22846: PUSH
22847: LD_INT 112
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: ST_TO_ADDR
22863: GO 25358
22865: LD_INT 6
22867: DOUBLE
22868: EQUAL
22869: IFTRUE 22873
22871: GO 22993
22873: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
22874: LD_ADDR_VAR 0 1
22878: PUSH
22879: LD_INT 2
22881: PUSH
22882: LD_INT 4
22884: PUSH
22885: LD_INT 5
22887: PUSH
22888: LD_INT 6
22890: PUSH
22891: LD_INT 8
22893: PUSH
22894: LD_INT 11
22896: PUSH
22897: LD_INT 12
22899: PUSH
22900: LD_INT 15
22902: PUSH
22903: LD_INT 16
22905: PUSH
22906: LD_INT 20
22908: PUSH
22909: LD_INT 21
22911: PUSH
22912: LD_INT 22
22914: PUSH
22915: LD_INT 23
22917: PUSH
22918: LD_INT 25
22920: PUSH
22921: LD_INT 26
22923: PUSH
22924: LD_INT 30
22926: PUSH
22927: LD_INT 31
22929: PUSH
22930: LD_INT 32
22932: PUSH
22933: LD_INT 36
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 101
22959: PUSH
22960: LD_INT 102
22962: PUSH
22963: LD_INT 105
22965: PUSH
22966: LD_INT 106
22968: PUSH
22969: LD_INT 108
22971: PUSH
22972: LD_INT 109
22974: PUSH
22975: LD_INT 112
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: ST_TO_ADDR
22991: GO 25358
22993: LD_INT 7
22995: DOUBLE
22996: EQUAL
22997: IFTRUE 23001
22999: GO 23101
23001: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
23002: LD_ADDR_VAR 0 1
23006: PUSH
23007: LD_INT 2
23009: PUSH
23010: LD_INT 4
23012: PUSH
23013: LD_INT 5
23015: PUSH
23016: LD_INT 7
23018: PUSH
23019: LD_INT 11
23021: PUSH
23022: LD_INT 12
23024: PUSH
23025: LD_INT 15
23027: PUSH
23028: LD_INT 16
23030: PUSH
23031: LD_INT 20
23033: PUSH
23034: LD_INT 21
23036: PUSH
23037: LD_INT 22
23039: PUSH
23040: LD_INT 23
23042: PUSH
23043: LD_INT 25
23045: PUSH
23046: LD_INT 26
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 101
23067: PUSH
23068: LD_INT 102
23070: PUSH
23071: LD_INT 103
23073: PUSH
23074: LD_INT 105
23076: PUSH
23077: LD_INT 106
23079: PUSH
23080: LD_INT 108
23082: PUSH
23083: LD_INT 112
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: ST_TO_ADDR
23099: GO 25358
23101: LD_INT 8
23103: DOUBLE
23104: EQUAL
23105: IFTRUE 23109
23107: GO 23237
23109: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
23110: LD_ADDR_VAR 0 1
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: LD_INT 4
23120: PUSH
23121: LD_INT 5
23123: PUSH
23124: LD_INT 6
23126: PUSH
23127: LD_INT 7
23129: PUSH
23130: LD_INT 8
23132: PUSH
23133: LD_INT 11
23135: PUSH
23136: LD_INT 12
23138: PUSH
23139: LD_INT 15
23141: PUSH
23142: LD_INT 16
23144: PUSH
23145: LD_INT 20
23147: PUSH
23148: LD_INT 21
23150: PUSH
23151: LD_INT 22
23153: PUSH
23154: LD_INT 23
23156: PUSH
23157: LD_INT 25
23159: PUSH
23160: LD_INT 26
23162: PUSH
23163: LD_INT 30
23165: PUSH
23166: LD_INT 31
23168: PUSH
23169: LD_INT 32
23171: PUSH
23172: LD_INT 36
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 101
23199: PUSH
23200: LD_INT 102
23202: PUSH
23203: LD_INT 103
23205: PUSH
23206: LD_INT 105
23208: PUSH
23209: LD_INT 106
23211: PUSH
23212: LD_INT 108
23214: PUSH
23215: LD_INT 109
23217: PUSH
23218: LD_INT 112
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: ST_TO_ADDR
23235: GO 25358
23237: LD_INT 9
23239: DOUBLE
23240: EQUAL
23241: IFTRUE 23245
23243: GO 23381
23245: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
23246: LD_ADDR_VAR 0 1
23250: PUSH
23251: LD_INT 2
23253: PUSH
23254: LD_INT 4
23256: PUSH
23257: LD_INT 5
23259: PUSH
23260: LD_INT 6
23262: PUSH
23263: LD_INT 7
23265: PUSH
23266: LD_INT 8
23268: PUSH
23269: LD_INT 11
23271: PUSH
23272: LD_INT 12
23274: PUSH
23275: LD_INT 15
23277: PUSH
23278: LD_INT 16
23280: PUSH
23281: LD_INT 20
23283: PUSH
23284: LD_INT 21
23286: PUSH
23287: LD_INT 22
23289: PUSH
23290: LD_INT 23
23292: PUSH
23293: LD_INT 25
23295: PUSH
23296: LD_INT 26
23298: PUSH
23299: LD_INT 28
23301: PUSH
23302: LD_INT 30
23304: PUSH
23305: LD_INT 31
23307: PUSH
23308: LD_INT 32
23310: PUSH
23311: LD_INT 36
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 101
23339: PUSH
23340: LD_INT 102
23342: PUSH
23343: LD_INT 103
23345: PUSH
23346: LD_INT 105
23348: PUSH
23349: LD_INT 106
23351: PUSH
23352: LD_INT 108
23354: PUSH
23355: LD_INT 109
23357: PUSH
23358: LD_INT 112
23360: PUSH
23361: LD_INT 114
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: ST_TO_ADDR
23379: GO 25358
23381: LD_INT 10
23383: DOUBLE
23384: EQUAL
23385: IFTRUE 23389
23387: GO 23573
23389: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
23390: LD_ADDR_VAR 0 1
23394: PUSH
23395: LD_INT 2
23397: PUSH
23398: LD_INT 4
23400: PUSH
23401: LD_INT 5
23403: PUSH
23404: LD_INT 6
23406: PUSH
23407: LD_INT 7
23409: PUSH
23410: LD_INT 8
23412: PUSH
23413: LD_INT 9
23415: PUSH
23416: LD_INT 10
23418: PUSH
23419: LD_INT 11
23421: PUSH
23422: LD_INT 12
23424: PUSH
23425: LD_INT 13
23427: PUSH
23428: LD_INT 14
23430: PUSH
23431: LD_INT 15
23433: PUSH
23434: LD_INT 16
23436: PUSH
23437: LD_INT 17
23439: PUSH
23440: LD_INT 18
23442: PUSH
23443: LD_INT 19
23445: PUSH
23446: LD_INT 20
23448: PUSH
23449: LD_INT 21
23451: PUSH
23452: LD_INT 22
23454: PUSH
23455: LD_INT 23
23457: PUSH
23458: LD_INT 24
23460: PUSH
23461: LD_INT 25
23463: PUSH
23464: LD_INT 26
23466: PUSH
23467: LD_INT 28
23469: PUSH
23470: LD_INT 30
23472: PUSH
23473: LD_INT 31
23475: PUSH
23476: LD_INT 32
23478: PUSH
23479: LD_INT 36
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 101
23515: PUSH
23516: LD_INT 102
23518: PUSH
23519: LD_INT 103
23521: PUSH
23522: LD_INT 104
23524: PUSH
23525: LD_INT 105
23527: PUSH
23528: LD_INT 106
23530: PUSH
23531: LD_INT 107
23533: PUSH
23534: LD_INT 108
23536: PUSH
23537: LD_INT 109
23539: PUSH
23540: LD_INT 110
23542: PUSH
23543: LD_INT 111
23545: PUSH
23546: LD_INT 112
23548: PUSH
23549: LD_INT 114
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: ST_TO_ADDR
23571: GO 25358
23573: LD_INT 11
23575: DOUBLE
23576: EQUAL
23577: IFTRUE 23581
23579: GO 23773
23581: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
23582: LD_ADDR_VAR 0 1
23586: PUSH
23587: LD_INT 2
23589: PUSH
23590: LD_INT 3
23592: PUSH
23593: LD_INT 4
23595: PUSH
23596: LD_INT 5
23598: PUSH
23599: LD_INT 6
23601: PUSH
23602: LD_INT 7
23604: PUSH
23605: LD_INT 8
23607: PUSH
23608: LD_INT 9
23610: PUSH
23611: LD_INT 10
23613: PUSH
23614: LD_INT 11
23616: PUSH
23617: LD_INT 12
23619: PUSH
23620: LD_INT 13
23622: PUSH
23623: LD_INT 14
23625: PUSH
23626: LD_INT 15
23628: PUSH
23629: LD_INT 16
23631: PUSH
23632: LD_INT 17
23634: PUSH
23635: LD_INT 18
23637: PUSH
23638: LD_INT 19
23640: PUSH
23641: LD_INT 20
23643: PUSH
23644: LD_INT 21
23646: PUSH
23647: LD_INT 22
23649: PUSH
23650: LD_INT 23
23652: PUSH
23653: LD_INT 24
23655: PUSH
23656: LD_INT 25
23658: PUSH
23659: LD_INT 26
23661: PUSH
23662: LD_INT 28
23664: PUSH
23665: LD_INT 30
23667: PUSH
23668: LD_INT 31
23670: PUSH
23671: LD_INT 32
23673: PUSH
23674: LD_INT 34
23676: PUSH
23677: LD_INT 36
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 101
23715: PUSH
23716: LD_INT 102
23718: PUSH
23719: LD_INT 103
23721: PUSH
23722: LD_INT 104
23724: PUSH
23725: LD_INT 105
23727: PUSH
23728: LD_INT 106
23730: PUSH
23731: LD_INT 107
23733: PUSH
23734: LD_INT 108
23736: PUSH
23737: LD_INT 109
23739: PUSH
23740: LD_INT 110
23742: PUSH
23743: LD_INT 111
23745: PUSH
23746: LD_INT 112
23748: PUSH
23749: LD_INT 114
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: ST_TO_ADDR
23771: GO 25358
23773: LD_INT 12
23775: DOUBLE
23776: EQUAL
23777: IFTRUE 23781
23779: GO 23989
23781: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
23782: LD_ADDR_VAR 0 1
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: LD_INT 2
23792: PUSH
23793: LD_INT 3
23795: PUSH
23796: LD_INT 4
23798: PUSH
23799: LD_INT 5
23801: PUSH
23802: LD_INT 6
23804: PUSH
23805: LD_INT 7
23807: PUSH
23808: LD_INT 8
23810: PUSH
23811: LD_INT 9
23813: PUSH
23814: LD_INT 10
23816: PUSH
23817: LD_INT 11
23819: PUSH
23820: LD_INT 12
23822: PUSH
23823: LD_INT 13
23825: PUSH
23826: LD_INT 14
23828: PUSH
23829: LD_INT 15
23831: PUSH
23832: LD_INT 16
23834: PUSH
23835: LD_INT 17
23837: PUSH
23838: LD_INT 18
23840: PUSH
23841: LD_INT 19
23843: PUSH
23844: LD_INT 20
23846: PUSH
23847: LD_INT 21
23849: PUSH
23850: LD_INT 22
23852: PUSH
23853: LD_INT 23
23855: PUSH
23856: LD_INT 24
23858: PUSH
23859: LD_INT 25
23861: PUSH
23862: LD_INT 26
23864: PUSH
23865: LD_INT 27
23867: PUSH
23868: LD_INT 28
23870: PUSH
23871: LD_INT 30
23873: PUSH
23874: LD_INT 31
23876: PUSH
23877: LD_INT 32
23879: PUSH
23880: LD_INT 33
23882: PUSH
23883: LD_INT 34
23885: PUSH
23886: LD_INT 36
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 101
23927: PUSH
23928: LD_INT 102
23930: PUSH
23931: LD_INT 103
23933: PUSH
23934: LD_INT 104
23936: PUSH
23937: LD_INT 105
23939: PUSH
23940: LD_INT 106
23942: PUSH
23943: LD_INT 107
23945: PUSH
23946: LD_INT 108
23948: PUSH
23949: LD_INT 109
23951: PUSH
23952: LD_INT 110
23954: PUSH
23955: LD_INT 111
23957: PUSH
23958: LD_INT 112
23960: PUSH
23961: LD_INT 113
23963: PUSH
23964: LD_INT 114
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: ST_TO_ADDR
23987: GO 25358
23989: LD_INT 13
23991: DOUBLE
23992: EQUAL
23993: IFTRUE 23997
23995: GO 24193
23997: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
23998: LD_ADDR_VAR 0 1
24002: PUSH
24003: LD_INT 1
24005: PUSH
24006: LD_INT 2
24008: PUSH
24009: LD_INT 3
24011: PUSH
24012: LD_INT 4
24014: PUSH
24015: LD_INT 5
24017: PUSH
24018: LD_INT 8
24020: PUSH
24021: LD_INT 9
24023: PUSH
24024: LD_INT 10
24026: PUSH
24027: LD_INT 11
24029: PUSH
24030: LD_INT 12
24032: PUSH
24033: LD_INT 14
24035: PUSH
24036: LD_INT 15
24038: PUSH
24039: LD_INT 16
24041: PUSH
24042: LD_INT 17
24044: PUSH
24045: LD_INT 18
24047: PUSH
24048: LD_INT 19
24050: PUSH
24051: LD_INT 20
24053: PUSH
24054: LD_INT 21
24056: PUSH
24057: LD_INT 22
24059: PUSH
24060: LD_INT 23
24062: PUSH
24063: LD_INT 24
24065: PUSH
24066: LD_INT 25
24068: PUSH
24069: LD_INT 26
24071: PUSH
24072: LD_INT 27
24074: PUSH
24075: LD_INT 28
24077: PUSH
24078: LD_INT 30
24080: PUSH
24081: LD_INT 31
24083: PUSH
24084: LD_INT 32
24086: PUSH
24087: LD_INT 33
24089: PUSH
24090: LD_INT 34
24092: PUSH
24093: LD_INT 36
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 101
24131: PUSH
24132: LD_INT 102
24134: PUSH
24135: LD_INT 103
24137: PUSH
24138: LD_INT 104
24140: PUSH
24141: LD_INT 105
24143: PUSH
24144: LD_INT 106
24146: PUSH
24147: LD_INT 107
24149: PUSH
24150: LD_INT 108
24152: PUSH
24153: LD_INT 109
24155: PUSH
24156: LD_INT 110
24158: PUSH
24159: LD_INT 111
24161: PUSH
24162: LD_INT 112
24164: PUSH
24165: LD_INT 113
24167: PUSH
24168: LD_INT 114
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: ST_TO_ADDR
24191: GO 25358
24193: LD_INT 14
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24413
24201: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
24202: LD_ADDR_VAR 0 1
24206: PUSH
24207: LD_INT 1
24209: PUSH
24210: LD_INT 2
24212: PUSH
24213: LD_INT 3
24215: PUSH
24216: LD_INT 4
24218: PUSH
24219: LD_INT 5
24221: PUSH
24222: LD_INT 6
24224: PUSH
24225: LD_INT 7
24227: PUSH
24228: LD_INT 8
24230: PUSH
24231: LD_INT 9
24233: PUSH
24234: LD_INT 10
24236: PUSH
24237: LD_INT 11
24239: PUSH
24240: LD_INT 12
24242: PUSH
24243: LD_INT 13
24245: PUSH
24246: LD_INT 14
24248: PUSH
24249: LD_INT 15
24251: PUSH
24252: LD_INT 16
24254: PUSH
24255: LD_INT 17
24257: PUSH
24258: LD_INT 18
24260: PUSH
24261: LD_INT 19
24263: PUSH
24264: LD_INT 20
24266: PUSH
24267: LD_INT 21
24269: PUSH
24270: LD_INT 22
24272: PUSH
24273: LD_INT 23
24275: PUSH
24276: LD_INT 24
24278: PUSH
24279: LD_INT 25
24281: PUSH
24282: LD_INT 26
24284: PUSH
24285: LD_INT 27
24287: PUSH
24288: LD_INT 28
24290: PUSH
24291: LD_INT 29
24293: PUSH
24294: LD_INT 30
24296: PUSH
24297: LD_INT 31
24299: PUSH
24300: LD_INT 32
24302: PUSH
24303: LD_INT 33
24305: PUSH
24306: LD_INT 34
24308: PUSH
24309: LD_INT 36
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 101
24351: PUSH
24352: LD_INT 102
24354: PUSH
24355: LD_INT 103
24357: PUSH
24358: LD_INT 104
24360: PUSH
24361: LD_INT 105
24363: PUSH
24364: LD_INT 106
24366: PUSH
24367: LD_INT 107
24369: PUSH
24370: LD_INT 108
24372: PUSH
24373: LD_INT 109
24375: PUSH
24376: LD_INT 110
24378: PUSH
24379: LD_INT 111
24381: PUSH
24382: LD_INT 112
24384: PUSH
24385: LD_INT 113
24387: PUSH
24388: LD_INT 114
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: ST_TO_ADDR
24411: GO 25358
24413: LD_INT 15
24415: DOUBLE
24416: EQUAL
24417: IFTRUE 24421
24419: GO 24633
24421: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
24422: LD_ADDR_VAR 0 1
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: LD_INT 2
24432: PUSH
24433: LD_INT 3
24435: PUSH
24436: LD_INT 4
24438: PUSH
24439: LD_INT 5
24441: PUSH
24442: LD_INT 6
24444: PUSH
24445: LD_INT 7
24447: PUSH
24448: LD_INT 8
24450: PUSH
24451: LD_INT 9
24453: PUSH
24454: LD_INT 10
24456: PUSH
24457: LD_INT 11
24459: PUSH
24460: LD_INT 12
24462: PUSH
24463: LD_INT 13
24465: PUSH
24466: LD_INT 14
24468: PUSH
24469: LD_INT 15
24471: PUSH
24472: LD_INT 16
24474: PUSH
24475: LD_INT 17
24477: PUSH
24478: LD_INT 18
24480: PUSH
24481: LD_INT 19
24483: PUSH
24484: LD_INT 20
24486: PUSH
24487: LD_INT 21
24489: PUSH
24490: LD_INT 22
24492: PUSH
24493: LD_INT 23
24495: PUSH
24496: LD_INT 24
24498: PUSH
24499: LD_INT 25
24501: PUSH
24502: LD_INT 26
24504: PUSH
24505: LD_INT 27
24507: PUSH
24508: LD_INT 28
24510: PUSH
24511: LD_INT 29
24513: PUSH
24514: LD_INT 30
24516: PUSH
24517: LD_INT 31
24519: PUSH
24520: LD_INT 32
24522: PUSH
24523: LD_INT 33
24525: PUSH
24526: LD_INT 34
24528: PUSH
24529: LD_INT 36
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 101
24571: PUSH
24572: LD_INT 102
24574: PUSH
24575: LD_INT 103
24577: PUSH
24578: LD_INT 104
24580: PUSH
24581: LD_INT 105
24583: PUSH
24584: LD_INT 106
24586: PUSH
24587: LD_INT 107
24589: PUSH
24590: LD_INT 108
24592: PUSH
24593: LD_INT 109
24595: PUSH
24596: LD_INT 110
24598: PUSH
24599: LD_INT 111
24601: PUSH
24602: LD_INT 112
24604: PUSH
24605: LD_INT 113
24607: PUSH
24608: LD_INT 114
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: ST_TO_ADDR
24631: GO 25358
24633: LD_INT 16
24635: DOUBLE
24636: EQUAL
24637: IFTRUE 24641
24639: GO 24765
24641: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
24642: LD_ADDR_VAR 0 1
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: LD_INT 4
24652: PUSH
24653: LD_INT 5
24655: PUSH
24656: LD_INT 7
24658: PUSH
24659: LD_INT 11
24661: PUSH
24662: LD_INT 12
24664: PUSH
24665: LD_INT 15
24667: PUSH
24668: LD_INT 16
24670: PUSH
24671: LD_INT 20
24673: PUSH
24674: LD_INT 21
24676: PUSH
24677: LD_INT 22
24679: PUSH
24680: LD_INT 23
24682: PUSH
24683: LD_INT 25
24685: PUSH
24686: LD_INT 26
24688: PUSH
24689: LD_INT 30
24691: PUSH
24692: LD_INT 31
24694: PUSH
24695: LD_INT 32
24697: PUSH
24698: LD_INT 33
24700: PUSH
24701: LD_INT 34
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 101
24727: PUSH
24728: LD_INT 102
24730: PUSH
24731: LD_INT 103
24733: PUSH
24734: LD_INT 106
24736: PUSH
24737: LD_INT 108
24739: PUSH
24740: LD_INT 112
24742: PUSH
24743: LD_INT 113
24745: PUSH
24746: LD_INT 114
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: ST_TO_ADDR
24763: GO 25358
24765: LD_INT 17
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 24985
24773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
24774: LD_ADDR_VAR 0 1
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 2
24784: PUSH
24785: LD_INT 3
24787: PUSH
24788: LD_INT 4
24790: PUSH
24791: LD_INT 5
24793: PUSH
24794: LD_INT 6
24796: PUSH
24797: LD_INT 7
24799: PUSH
24800: LD_INT 8
24802: PUSH
24803: LD_INT 9
24805: PUSH
24806: LD_INT 10
24808: PUSH
24809: LD_INT 11
24811: PUSH
24812: LD_INT 12
24814: PUSH
24815: LD_INT 13
24817: PUSH
24818: LD_INT 14
24820: PUSH
24821: LD_INT 15
24823: PUSH
24824: LD_INT 16
24826: PUSH
24827: LD_INT 17
24829: PUSH
24830: LD_INT 18
24832: PUSH
24833: LD_INT 19
24835: PUSH
24836: LD_INT 20
24838: PUSH
24839: LD_INT 21
24841: PUSH
24842: LD_INT 22
24844: PUSH
24845: LD_INT 23
24847: PUSH
24848: LD_INT 24
24850: PUSH
24851: LD_INT 25
24853: PUSH
24854: LD_INT 26
24856: PUSH
24857: LD_INT 27
24859: PUSH
24860: LD_INT 28
24862: PUSH
24863: LD_INT 29
24865: PUSH
24866: LD_INT 30
24868: PUSH
24869: LD_INT 31
24871: PUSH
24872: LD_INT 32
24874: PUSH
24875: LD_INT 33
24877: PUSH
24878: LD_INT 34
24880: PUSH
24881: LD_INT 36
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 101
24923: PUSH
24924: LD_INT 102
24926: PUSH
24927: LD_INT 103
24929: PUSH
24930: LD_INT 104
24932: PUSH
24933: LD_INT 105
24935: PUSH
24936: LD_INT 106
24938: PUSH
24939: LD_INT 107
24941: PUSH
24942: LD_INT 108
24944: PUSH
24945: LD_INT 109
24947: PUSH
24948: LD_INT 110
24950: PUSH
24951: LD_INT 111
24953: PUSH
24954: LD_INT 112
24956: PUSH
24957: LD_INT 113
24959: PUSH
24960: LD_INT 114
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: ST_TO_ADDR
24983: GO 25358
24985: LD_INT 18
24987: DOUBLE
24988: EQUAL
24989: IFTRUE 24993
24991: GO 25129
24993: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
24994: LD_ADDR_VAR 0 1
24998: PUSH
24999: LD_INT 2
25001: PUSH
25002: LD_INT 4
25004: PUSH
25005: LD_INT 5
25007: PUSH
25008: LD_INT 7
25010: PUSH
25011: LD_INT 11
25013: PUSH
25014: LD_INT 12
25016: PUSH
25017: LD_INT 15
25019: PUSH
25020: LD_INT 16
25022: PUSH
25023: LD_INT 20
25025: PUSH
25026: LD_INT 21
25028: PUSH
25029: LD_INT 22
25031: PUSH
25032: LD_INT 23
25034: PUSH
25035: LD_INT 25
25037: PUSH
25038: LD_INT 26
25040: PUSH
25041: LD_INT 30
25043: PUSH
25044: LD_INT 31
25046: PUSH
25047: LD_INT 32
25049: PUSH
25050: LD_INT 33
25052: PUSH
25053: LD_INT 34
25055: PUSH
25056: LD_INT 35
25058: PUSH
25059: LD_INT 36
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 101
25087: PUSH
25088: LD_INT 102
25090: PUSH
25091: LD_INT 103
25093: PUSH
25094: LD_INT 106
25096: PUSH
25097: LD_INT 108
25099: PUSH
25100: LD_INT 112
25102: PUSH
25103: LD_INT 113
25105: PUSH
25106: LD_INT 114
25108: PUSH
25109: LD_INT 115
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: ST_TO_ADDR
25127: GO 25358
25129: LD_INT 19
25131: DOUBLE
25132: EQUAL
25133: IFTRUE 25137
25135: GO 25357
25137: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
25138: LD_ADDR_VAR 0 1
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: LD_INT 2
25148: PUSH
25149: LD_INT 3
25151: PUSH
25152: LD_INT 4
25154: PUSH
25155: LD_INT 5
25157: PUSH
25158: LD_INT 6
25160: PUSH
25161: LD_INT 7
25163: PUSH
25164: LD_INT 8
25166: PUSH
25167: LD_INT 9
25169: PUSH
25170: LD_INT 10
25172: PUSH
25173: LD_INT 11
25175: PUSH
25176: LD_INT 12
25178: PUSH
25179: LD_INT 13
25181: PUSH
25182: LD_INT 14
25184: PUSH
25185: LD_INT 15
25187: PUSH
25188: LD_INT 16
25190: PUSH
25191: LD_INT 17
25193: PUSH
25194: LD_INT 18
25196: PUSH
25197: LD_INT 19
25199: PUSH
25200: LD_INT 20
25202: PUSH
25203: LD_INT 21
25205: PUSH
25206: LD_INT 22
25208: PUSH
25209: LD_INT 23
25211: PUSH
25212: LD_INT 24
25214: PUSH
25215: LD_INT 25
25217: PUSH
25218: LD_INT 26
25220: PUSH
25221: LD_INT 27
25223: PUSH
25224: LD_INT 28
25226: PUSH
25227: LD_INT 29
25229: PUSH
25230: LD_INT 30
25232: PUSH
25233: LD_INT 31
25235: PUSH
25236: LD_INT 32
25238: PUSH
25239: LD_INT 33
25241: PUSH
25242: LD_INT 34
25244: PUSH
25245: LD_INT 35
25247: PUSH
25248: LD_INT 36
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 101
25291: PUSH
25292: LD_INT 102
25294: PUSH
25295: LD_INT 103
25297: PUSH
25298: LD_INT 104
25300: PUSH
25301: LD_INT 105
25303: PUSH
25304: LD_INT 106
25306: PUSH
25307: LD_INT 107
25309: PUSH
25310: LD_INT 108
25312: PUSH
25313: LD_INT 109
25315: PUSH
25316: LD_INT 110
25318: PUSH
25319: LD_INT 111
25321: PUSH
25322: LD_INT 112
25324: PUSH
25325: LD_INT 113
25327: PUSH
25328: LD_INT 114
25330: PUSH
25331: LD_INT 115
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: ST_TO_ADDR
25355: GO 25358
25357: POP
// end else
25358: GO 25577
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
25360: LD_ADDR_VAR 0 1
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: LD_INT 3
25373: PUSH
25374: LD_INT 4
25376: PUSH
25377: LD_INT 5
25379: PUSH
25380: LD_INT 6
25382: PUSH
25383: LD_INT 7
25385: PUSH
25386: LD_INT 8
25388: PUSH
25389: LD_INT 9
25391: PUSH
25392: LD_INT 10
25394: PUSH
25395: LD_INT 11
25397: PUSH
25398: LD_INT 12
25400: PUSH
25401: LD_INT 13
25403: PUSH
25404: LD_INT 14
25406: PUSH
25407: LD_INT 15
25409: PUSH
25410: LD_INT 16
25412: PUSH
25413: LD_INT 17
25415: PUSH
25416: LD_INT 18
25418: PUSH
25419: LD_INT 19
25421: PUSH
25422: LD_INT 20
25424: PUSH
25425: LD_INT 21
25427: PUSH
25428: LD_INT 22
25430: PUSH
25431: LD_INT 23
25433: PUSH
25434: LD_INT 24
25436: PUSH
25437: LD_INT 25
25439: PUSH
25440: LD_INT 26
25442: PUSH
25443: LD_INT 27
25445: PUSH
25446: LD_INT 28
25448: PUSH
25449: LD_INT 29
25451: PUSH
25452: LD_INT 30
25454: PUSH
25455: LD_INT 31
25457: PUSH
25458: LD_INT 32
25460: PUSH
25461: LD_INT 33
25463: PUSH
25464: LD_INT 34
25466: PUSH
25467: LD_INT 35
25469: PUSH
25470: LD_INT 36
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 101
25513: PUSH
25514: LD_INT 102
25516: PUSH
25517: LD_INT 103
25519: PUSH
25520: LD_INT 104
25522: PUSH
25523: LD_INT 105
25525: PUSH
25526: LD_INT 106
25528: PUSH
25529: LD_INT 107
25531: PUSH
25532: LD_INT 108
25534: PUSH
25535: LD_INT 109
25537: PUSH
25538: LD_INT 110
25540: PUSH
25541: LD_INT 111
25543: PUSH
25544: LD_INT 112
25546: PUSH
25547: LD_INT 113
25549: PUSH
25550: LD_INT 114
25552: PUSH
25553: LD_INT 115
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: ST_TO_ADDR
// if result then
25577: LD_VAR 0 1
25581: IFFALSE 25870
// begin normal :=  ;
25583: LD_ADDR_VAR 0 3
25587: PUSH
25588: LD_STRING 
25590: ST_TO_ADDR
// hardcore :=  ;
25591: LD_ADDR_VAR 0 4
25595: PUSH
25596: LD_STRING 
25598: ST_TO_ADDR
// for i = 1 to normalCounter do
25599: LD_ADDR_VAR 0 5
25603: PUSH
25604: DOUBLE
25605: LD_INT 1
25607: DEC
25608: ST_TO_ADDR
25609: LD_EXP 91
25613: PUSH
25614: FOR_TO
25615: IFFALSE 25716
// begin tmp := 0 ;
25617: LD_ADDR_VAR 0 2
25621: PUSH
25622: LD_STRING 0
25624: ST_TO_ADDR
// if result [ 1 ] then
25625: LD_VAR 0 1
25629: PUSH
25630: LD_INT 1
25632: ARRAY
25633: IFFALSE 25698
// if result [ 1 ] [ 1 ] = i then
25635: LD_VAR 0 1
25639: PUSH
25640: LD_INT 1
25642: ARRAY
25643: PUSH
25644: LD_INT 1
25646: ARRAY
25647: PUSH
25648: LD_VAR 0 5
25652: EQUAL
25653: IFFALSE 25698
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25655: LD_ADDR_VAR 0 1
25659: PUSH
25660: LD_VAR 0 1
25664: PPUSH
25665: LD_INT 1
25667: PPUSH
25668: LD_VAR 0 1
25672: PUSH
25673: LD_INT 1
25675: ARRAY
25676: PPUSH
25677: LD_INT 1
25679: PPUSH
25680: CALL_OW 3
25684: PPUSH
25685: CALL_OW 1
25689: ST_TO_ADDR
// tmp := 1 ;
25690: LD_ADDR_VAR 0 2
25694: PUSH
25695: LD_STRING 1
25697: ST_TO_ADDR
// end ; normal := normal & tmp ;
25698: LD_ADDR_VAR 0 3
25702: PUSH
25703: LD_VAR 0 3
25707: PUSH
25708: LD_VAR 0 2
25712: STR
25713: ST_TO_ADDR
// end ;
25714: GO 25614
25716: POP
25717: POP
// for i = 1 to hardcoreCounter do
25718: LD_ADDR_VAR 0 5
25722: PUSH
25723: DOUBLE
25724: LD_INT 1
25726: DEC
25727: ST_TO_ADDR
25728: LD_EXP 92
25732: PUSH
25733: FOR_TO
25734: IFFALSE 25839
// begin tmp := 0 ;
25736: LD_ADDR_VAR 0 2
25740: PUSH
25741: LD_STRING 0
25743: ST_TO_ADDR
// if result [ 2 ] then
25744: LD_VAR 0 1
25748: PUSH
25749: LD_INT 2
25751: ARRAY
25752: IFFALSE 25821
// if result [ 2 ] [ 1 ] = 100 + i then
25754: LD_VAR 0 1
25758: PUSH
25759: LD_INT 2
25761: ARRAY
25762: PUSH
25763: LD_INT 1
25765: ARRAY
25766: PUSH
25767: LD_INT 100
25769: PUSH
25770: LD_VAR 0 5
25774: PLUS
25775: EQUAL
25776: IFFALSE 25821
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25778: LD_ADDR_VAR 0 1
25782: PUSH
25783: LD_VAR 0 1
25787: PPUSH
25788: LD_INT 2
25790: PPUSH
25791: LD_VAR 0 1
25795: PUSH
25796: LD_INT 2
25798: ARRAY
25799: PPUSH
25800: LD_INT 1
25802: PPUSH
25803: CALL_OW 3
25807: PPUSH
25808: CALL_OW 1
25812: ST_TO_ADDR
// tmp := 1 ;
25813: LD_ADDR_VAR 0 2
25817: PUSH
25818: LD_STRING 1
25820: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25821: LD_ADDR_VAR 0 4
25825: PUSH
25826: LD_VAR 0 4
25830: PUSH
25831: LD_VAR 0 2
25835: STR
25836: ST_TO_ADDR
// end ;
25837: GO 25733
25839: POP
25840: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25841: LD_STRING getStreamItemsFromMission("
25843: PUSH
25844: LD_VAR 0 3
25848: STR
25849: PUSH
25850: LD_STRING ","
25852: STR
25853: PUSH
25854: LD_VAR 0 4
25858: STR
25859: PUSH
25860: LD_STRING ")
25862: STR
25863: PPUSH
25864: CALL_OW 559
// end else
25868: GO 25877
// ToLua ( getStreamItemsFromMission("","") ) ;
25870: LD_STRING getStreamItemsFromMission("","")
25872: PPUSH
25873: CALL_OW 559
// end ;
25877: LD_VAR 0 1
25881: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25882: LD_EXP 90
25886: PUSH
25887: LD_EXP 95
25891: AND
25892: IFFALSE 26016
25894: GO 25896
25896: DISABLE
25897: LD_INT 0
25899: PPUSH
25900: PPUSH
// begin enable ;
25901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25902: LD_ADDR_VAR 0 2
25906: PUSH
25907: LD_INT 22
25909: PUSH
25910: LD_OWVAR 2
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: LD_INT 34
25924: PUSH
25925: LD_INT 7
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 34
25934: PUSH
25935: LD_INT 45
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 34
25944: PUSH
25945: LD_INT 28
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 34
25954: PUSH
25955: LD_INT 47
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PPUSH
25973: CALL_OW 69
25977: ST_TO_ADDR
// if not tmp then
25978: LD_VAR 0 2
25982: NOT
25983: IFFALSE 25987
// exit ;
25985: GO 26016
// for i in tmp do
25987: LD_ADDR_VAR 0 1
25991: PUSH
25992: LD_VAR 0 2
25996: PUSH
25997: FOR_IN
25998: IFFALSE 26014
// begin SetLives ( i , 0 ) ;
26000: LD_VAR 0 1
26004: PPUSH
26005: LD_INT 0
26007: PPUSH
26008: CALL_OW 234
// end ;
26012: GO 25997
26014: POP
26015: POP
// end ;
26016: PPOPN 2
26018: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26019: LD_EXP 90
26023: PUSH
26024: LD_EXP 96
26028: AND
26029: IFFALSE 26113
26031: GO 26033
26033: DISABLE
26034: LD_INT 0
26036: PPUSH
26037: PPUSH
// begin enable ;
26038: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26039: LD_ADDR_VAR 0 2
26043: PUSH
26044: LD_INT 22
26046: PUSH
26047: LD_OWVAR 2
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 32
26058: PUSH
26059: LD_INT 3
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PPUSH
26070: CALL_OW 69
26074: ST_TO_ADDR
// if not tmp then
26075: LD_VAR 0 2
26079: NOT
26080: IFFALSE 26084
// exit ;
26082: GO 26113
// for i in tmp do
26084: LD_ADDR_VAR 0 1
26088: PUSH
26089: LD_VAR 0 2
26093: PUSH
26094: FOR_IN
26095: IFFALSE 26111
// begin SetLives ( i , 0 ) ;
26097: LD_VAR 0 1
26101: PPUSH
26102: LD_INT 0
26104: PPUSH
26105: CALL_OW 234
// end ;
26109: GO 26094
26111: POP
26112: POP
// end ;
26113: PPOPN 2
26115: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26116: LD_EXP 90
26120: PUSH
26121: LD_EXP 93
26125: AND
26126: IFFALSE 26219
26128: GO 26130
26130: DISABLE
26131: LD_INT 0
26133: PPUSH
// begin enable ;
26134: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26135: LD_ADDR_VAR 0 1
26139: PUSH
26140: LD_INT 22
26142: PUSH
26143: LD_OWVAR 2
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 2
26154: PUSH
26155: LD_INT 25
26157: PUSH
26158: LD_INT 5
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 25
26167: PUSH
26168: LD_INT 9
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 25
26177: PUSH
26178: LD_INT 8
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PPUSH
26195: CALL_OW 69
26199: PUSH
26200: FOR_IN
26201: IFFALSE 26217
// begin SetClass ( i , 1 ) ;
26203: LD_VAR 0 1
26207: PPUSH
26208: LD_INT 1
26210: PPUSH
26211: CALL_OW 336
// end ;
26215: GO 26200
26217: POP
26218: POP
// end ;
26219: PPOPN 1
26221: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26222: LD_EXP 90
26226: PUSH
26227: LD_EXP 94
26231: AND
26232: PUSH
26233: LD_OWVAR 65
26237: PUSH
26238: LD_INT 7
26240: LESS
26241: AND
26242: IFFALSE 26256
26244: GO 26246
26246: DISABLE
// begin enable ;
26247: ENABLE
// game_speed := 7 ;
26248: LD_ADDR_OWVAR 65
26252: PUSH
26253: LD_INT 7
26255: ST_TO_ADDR
// end ;
26256: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26257: LD_EXP 90
26261: PUSH
26262: LD_EXP 97
26266: AND
26267: IFFALSE 26469
26269: GO 26271
26271: DISABLE
26272: LD_INT 0
26274: PPUSH
26275: PPUSH
26276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26277: LD_ADDR_VAR 0 3
26281: PUSH
26282: LD_INT 81
26284: PUSH
26285: LD_OWVAR 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 21
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PPUSH
26308: CALL_OW 69
26312: ST_TO_ADDR
// if not tmp then
26313: LD_VAR 0 3
26317: NOT
26318: IFFALSE 26322
// exit ;
26320: GO 26469
// if tmp > 5 then
26322: LD_VAR 0 3
26326: PUSH
26327: LD_INT 5
26329: GREATER
26330: IFFALSE 26342
// k := 5 else
26332: LD_ADDR_VAR 0 2
26336: PUSH
26337: LD_INT 5
26339: ST_TO_ADDR
26340: GO 26352
// k := tmp ;
26342: LD_ADDR_VAR 0 2
26346: PUSH
26347: LD_VAR 0 3
26351: ST_TO_ADDR
// for i := 1 to k do
26352: LD_ADDR_VAR 0 1
26356: PUSH
26357: DOUBLE
26358: LD_INT 1
26360: DEC
26361: ST_TO_ADDR
26362: LD_VAR 0 2
26366: PUSH
26367: FOR_TO
26368: IFFALSE 26467
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26370: LD_VAR 0 3
26374: PUSH
26375: LD_VAR 0 1
26379: ARRAY
26380: PPUSH
26381: LD_VAR 0 1
26385: PUSH
26386: LD_INT 4
26388: MOD
26389: PUSH
26390: LD_INT 1
26392: PLUS
26393: PPUSH
26394: CALL_OW 259
26398: PUSH
26399: LD_INT 10
26401: LESS
26402: IFFALSE 26465
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26404: LD_VAR 0 3
26408: PUSH
26409: LD_VAR 0 1
26413: ARRAY
26414: PPUSH
26415: LD_VAR 0 1
26419: PUSH
26420: LD_INT 4
26422: MOD
26423: PUSH
26424: LD_INT 1
26426: PLUS
26427: PPUSH
26428: LD_VAR 0 3
26432: PUSH
26433: LD_VAR 0 1
26437: ARRAY
26438: PPUSH
26439: LD_VAR 0 1
26443: PUSH
26444: LD_INT 4
26446: MOD
26447: PUSH
26448: LD_INT 1
26450: PLUS
26451: PPUSH
26452: CALL_OW 259
26456: PUSH
26457: LD_INT 1
26459: PLUS
26460: PPUSH
26461: CALL_OW 237
26465: GO 26367
26467: POP
26468: POP
// end ;
26469: PPOPN 3
26471: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26472: LD_EXP 90
26476: PUSH
26477: LD_EXP 98
26481: AND
26482: IFFALSE 26502
26484: GO 26486
26486: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26487: LD_INT 4
26489: PPUSH
26490: LD_OWVAR 2
26494: PPUSH
26495: LD_INT 0
26497: PPUSH
26498: CALL_OW 324
26502: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26503: LD_EXP 90
26507: PUSH
26508: LD_EXP 127
26512: AND
26513: IFFALSE 26533
26515: GO 26517
26517: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26518: LD_INT 19
26520: PPUSH
26521: LD_OWVAR 2
26525: PPUSH
26526: LD_INT 0
26528: PPUSH
26529: CALL_OW 324
26533: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26534: LD_EXP 90
26538: PUSH
26539: LD_EXP 99
26543: AND
26544: IFFALSE 26646
26546: GO 26548
26548: DISABLE
26549: LD_INT 0
26551: PPUSH
26552: PPUSH
// begin enable ;
26553: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26554: LD_ADDR_VAR 0 2
26558: PUSH
26559: LD_INT 22
26561: PUSH
26562: LD_OWVAR 2
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 2
26573: PUSH
26574: LD_INT 34
26576: PUSH
26577: LD_INT 11
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 34
26586: PUSH
26587: LD_INT 30
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: LIST
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PPUSH
26603: CALL_OW 69
26607: ST_TO_ADDR
// if not tmp then
26608: LD_VAR 0 2
26612: NOT
26613: IFFALSE 26617
// exit ;
26615: GO 26646
// for i in tmp do
26617: LD_ADDR_VAR 0 1
26621: PUSH
26622: LD_VAR 0 2
26626: PUSH
26627: FOR_IN
26628: IFFALSE 26644
// begin SetLives ( i , 0 ) ;
26630: LD_VAR 0 1
26634: PPUSH
26635: LD_INT 0
26637: PPUSH
26638: CALL_OW 234
// end ;
26642: GO 26627
26644: POP
26645: POP
// end ;
26646: PPOPN 2
26648: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26649: LD_EXP 90
26653: PUSH
26654: LD_EXP 100
26658: AND
26659: IFFALSE 26679
26661: GO 26663
26663: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26664: LD_INT 32
26666: PPUSH
26667: LD_OWVAR 2
26671: PPUSH
26672: LD_INT 0
26674: PPUSH
26675: CALL_OW 324
26679: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26680: LD_EXP 90
26684: PUSH
26685: LD_EXP 101
26689: AND
26690: IFFALSE 26871
26692: GO 26694
26694: DISABLE
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
26699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26700: LD_ADDR_VAR 0 2
26704: PUSH
26705: LD_INT 22
26707: PUSH
26708: LD_OWVAR 2
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 33
26719: PUSH
26720: LD_INT 3
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PPUSH
26731: CALL_OW 69
26735: ST_TO_ADDR
// if not tmp then
26736: LD_VAR 0 2
26740: NOT
26741: IFFALSE 26745
// exit ;
26743: GO 26871
// side := 0 ;
26745: LD_ADDR_VAR 0 3
26749: PUSH
26750: LD_INT 0
26752: ST_TO_ADDR
// for i := 1 to 8 do
26753: LD_ADDR_VAR 0 1
26757: PUSH
26758: DOUBLE
26759: LD_INT 1
26761: DEC
26762: ST_TO_ADDR
26763: LD_INT 8
26765: PUSH
26766: FOR_TO
26767: IFFALSE 26815
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26769: LD_OWVAR 2
26773: PUSH
26774: LD_VAR 0 1
26778: NONEQUAL
26779: PUSH
26780: LD_OWVAR 2
26784: PPUSH
26785: LD_VAR 0 1
26789: PPUSH
26790: CALL_OW 81
26794: PUSH
26795: LD_INT 2
26797: EQUAL
26798: AND
26799: IFFALSE 26813
// begin side := i ;
26801: LD_ADDR_VAR 0 3
26805: PUSH
26806: LD_VAR 0 1
26810: ST_TO_ADDR
// break ;
26811: GO 26815
// end ;
26813: GO 26766
26815: POP
26816: POP
// if not side then
26817: LD_VAR 0 3
26821: NOT
26822: IFFALSE 26826
// exit ;
26824: GO 26871
// for i := 1 to tmp do
26826: LD_ADDR_VAR 0 1
26830: PUSH
26831: DOUBLE
26832: LD_INT 1
26834: DEC
26835: ST_TO_ADDR
26836: LD_VAR 0 2
26840: PUSH
26841: FOR_TO
26842: IFFALSE 26869
// if Prob ( 60 ) then
26844: LD_INT 60
26846: PPUSH
26847: CALL_OW 13
26851: IFFALSE 26867
// SetSide ( i , side ) ;
26853: LD_VAR 0 1
26857: PPUSH
26858: LD_VAR 0 3
26862: PPUSH
26863: CALL_OW 235
26867: GO 26841
26869: POP
26870: POP
// end ;
26871: PPOPN 3
26873: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26874: LD_EXP 90
26878: PUSH
26879: LD_EXP 103
26883: AND
26884: IFFALSE 27003
26886: GO 26888
26888: DISABLE
26889: LD_INT 0
26891: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26892: LD_ADDR_VAR 0 1
26896: PUSH
26897: LD_INT 22
26899: PUSH
26900: LD_OWVAR 2
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 21
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: LD_INT 23
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: PPUSH
26941: CALL_OW 69
26945: PUSH
26946: FOR_IN
26947: IFFALSE 27001
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26949: LD_VAR 0 1
26953: PPUSH
26954: CALL_OW 257
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: LD_INT 3
26967: PUSH
26968: LD_INT 4
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: IN
26977: IFFALSE 26999
// SetClass ( un , rand ( 1 , 4 ) ) ;
26979: LD_VAR 0 1
26983: PPUSH
26984: LD_INT 1
26986: PPUSH
26987: LD_INT 4
26989: PPUSH
26990: CALL_OW 12
26994: PPUSH
26995: CALL_OW 336
26999: GO 26946
27001: POP
27002: POP
// end ;
27003: PPOPN 1
27005: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27006: LD_EXP 90
27010: PUSH
27011: LD_EXP 102
27015: AND
27016: IFFALSE 27095
27018: GO 27020
27020: DISABLE
27021: LD_INT 0
27023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27024: LD_ADDR_VAR 0 1
27028: PUSH
27029: LD_INT 22
27031: PUSH
27032: LD_OWVAR 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 21
27043: PUSH
27044: LD_INT 3
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PPUSH
27055: CALL_OW 69
27059: ST_TO_ADDR
// if not tmp then
27060: LD_VAR 0 1
27064: NOT
27065: IFFALSE 27069
// exit ;
27067: GO 27095
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27069: LD_VAR 0 1
27073: PUSH
27074: LD_INT 1
27076: PPUSH
27077: LD_VAR 0 1
27081: PPUSH
27082: CALL_OW 12
27086: ARRAY
27087: PPUSH
27088: LD_INT 100
27090: PPUSH
27091: CALL_OW 234
// end ;
27095: PPOPN 1
27097: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27098: LD_EXP 90
27102: PUSH
27103: LD_EXP 104
27107: AND
27108: IFFALSE 27206
27110: GO 27112
27112: DISABLE
27113: LD_INT 0
27115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27116: LD_ADDR_VAR 0 1
27120: PUSH
27121: LD_INT 22
27123: PUSH
27124: LD_OWVAR 2
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 21
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PPUSH
27147: CALL_OW 69
27151: ST_TO_ADDR
// if not tmp then
27152: LD_VAR 0 1
27156: NOT
27157: IFFALSE 27161
// exit ;
27159: GO 27206
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27161: LD_VAR 0 1
27165: PUSH
27166: LD_INT 1
27168: PPUSH
27169: LD_VAR 0 1
27173: PPUSH
27174: CALL_OW 12
27178: ARRAY
27179: PPUSH
27180: LD_INT 1
27182: PPUSH
27183: LD_INT 4
27185: PPUSH
27186: CALL_OW 12
27190: PPUSH
27191: LD_INT 3000
27193: PPUSH
27194: LD_INT 9000
27196: PPUSH
27197: CALL_OW 12
27201: PPUSH
27202: CALL_OW 492
// end ;
27206: PPOPN 1
27208: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27209: LD_EXP 90
27213: PUSH
27214: LD_EXP 105
27218: AND
27219: IFFALSE 27239
27221: GO 27223
27223: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27224: LD_INT 1
27226: PPUSH
27227: LD_OWVAR 2
27231: PPUSH
27232: LD_INT 0
27234: PPUSH
27235: CALL_OW 324
27239: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27240: LD_EXP 90
27244: PUSH
27245: LD_EXP 106
27249: AND
27250: IFFALSE 27333
27252: GO 27254
27254: DISABLE
27255: LD_INT 0
27257: PPUSH
27258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27259: LD_ADDR_VAR 0 2
27263: PUSH
27264: LD_INT 22
27266: PUSH
27267: LD_OWVAR 2
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 21
27278: PUSH
27279: LD_INT 3
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PPUSH
27290: CALL_OW 69
27294: ST_TO_ADDR
// if not tmp then
27295: LD_VAR 0 2
27299: NOT
27300: IFFALSE 27304
// exit ;
27302: GO 27333
// for i in tmp do
27304: LD_ADDR_VAR 0 1
27308: PUSH
27309: LD_VAR 0 2
27313: PUSH
27314: FOR_IN
27315: IFFALSE 27331
// SetBLevel ( i , 10 ) ;
27317: LD_VAR 0 1
27321: PPUSH
27322: LD_INT 10
27324: PPUSH
27325: CALL_OW 241
27329: GO 27314
27331: POP
27332: POP
// end ;
27333: PPOPN 2
27335: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27336: LD_EXP 90
27340: PUSH
27341: LD_EXP 107
27345: AND
27346: IFFALSE 27457
27348: GO 27350
27350: DISABLE
27351: LD_INT 0
27353: PPUSH
27354: PPUSH
27355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27356: LD_ADDR_VAR 0 3
27360: PUSH
27361: LD_INT 22
27363: PUSH
27364: LD_OWVAR 2
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 25
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PPUSH
27387: CALL_OW 69
27391: ST_TO_ADDR
// if not tmp then
27392: LD_VAR 0 3
27396: NOT
27397: IFFALSE 27401
// exit ;
27399: GO 27457
// un := tmp [ rand ( 1 , tmp ) ] ;
27401: LD_ADDR_VAR 0 2
27405: PUSH
27406: LD_VAR 0 3
27410: PUSH
27411: LD_INT 1
27413: PPUSH
27414: LD_VAR 0 3
27418: PPUSH
27419: CALL_OW 12
27423: ARRAY
27424: ST_TO_ADDR
// if Crawls ( un ) then
27425: LD_VAR 0 2
27429: PPUSH
27430: CALL_OW 318
27434: IFFALSE 27445
// ComWalk ( un ) ;
27436: LD_VAR 0 2
27440: PPUSH
27441: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27445: LD_VAR 0 2
27449: PPUSH
27450: LD_INT 5
27452: PPUSH
27453: CALL_OW 336
// end ;
27457: PPOPN 3
27459: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
27460: LD_EXP 90
27464: PUSH
27465: LD_EXP 108
27469: AND
27470: PUSH
27471: LD_OWVAR 67
27475: PUSH
27476: LD_INT 3
27478: LESS
27479: AND
27480: IFFALSE 27499
27482: GO 27484
27484: DISABLE
// Difficulty := Difficulty + 1 ;
27485: LD_ADDR_OWVAR 67
27489: PUSH
27490: LD_OWVAR 67
27494: PUSH
27495: LD_INT 1
27497: PLUS
27498: ST_TO_ADDR
27499: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27500: LD_EXP 90
27504: PUSH
27505: LD_EXP 109
27509: AND
27510: IFFALSE 27613
27512: GO 27514
27514: DISABLE
27515: LD_INT 0
27517: PPUSH
// begin for i := 1 to 5 do
27518: LD_ADDR_VAR 0 1
27522: PUSH
27523: DOUBLE
27524: LD_INT 1
27526: DEC
27527: ST_TO_ADDR
27528: LD_INT 5
27530: PUSH
27531: FOR_TO
27532: IFFALSE 27611
// begin uc_nation := nation_nature ;
27534: LD_ADDR_OWVAR 21
27538: PUSH
27539: LD_INT 0
27541: ST_TO_ADDR
// uc_side := 0 ;
27542: LD_ADDR_OWVAR 20
27546: PUSH
27547: LD_INT 0
27549: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27550: LD_ADDR_OWVAR 29
27554: PUSH
27555: LD_INT 12
27557: PUSH
27558: LD_INT 12
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: ST_TO_ADDR
// hc_agressivity := 20 ;
27565: LD_ADDR_OWVAR 35
27569: PUSH
27570: LD_INT 20
27572: ST_TO_ADDR
// hc_class := class_tiger ;
27573: LD_ADDR_OWVAR 28
27577: PUSH
27578: LD_INT 14
27580: ST_TO_ADDR
// hc_gallery :=  ;
27581: LD_ADDR_OWVAR 33
27585: PUSH
27586: LD_STRING 
27588: ST_TO_ADDR
// hc_name :=  ;
27589: LD_ADDR_OWVAR 26
27593: PUSH
27594: LD_STRING 
27596: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27597: CALL_OW 44
27601: PPUSH
27602: LD_INT 0
27604: PPUSH
27605: CALL_OW 51
// end ;
27609: GO 27531
27611: POP
27612: POP
// end ;
27613: PPOPN 1
27615: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27616: LD_EXP 90
27620: PUSH
27621: LD_EXP 110
27625: AND
27626: IFFALSE 27635
27628: GO 27630
27630: DISABLE
// StreamSibBomb ;
27631: CALL 27636 0 0
27635: END
// export function StreamSibBomb ; var i , x , y ; begin
27636: LD_INT 0
27638: PPUSH
27639: PPUSH
27640: PPUSH
27641: PPUSH
// result := false ;
27642: LD_ADDR_VAR 0 1
27646: PUSH
27647: LD_INT 0
27649: ST_TO_ADDR
// for i := 1 to 16 do
27650: LD_ADDR_VAR 0 2
27654: PUSH
27655: DOUBLE
27656: LD_INT 1
27658: DEC
27659: ST_TO_ADDR
27660: LD_INT 16
27662: PUSH
27663: FOR_TO
27664: IFFALSE 27863
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27666: LD_ADDR_VAR 0 3
27670: PUSH
27671: LD_INT 10
27673: PUSH
27674: LD_INT 20
27676: PUSH
27677: LD_INT 30
27679: PUSH
27680: LD_INT 40
27682: PUSH
27683: LD_INT 50
27685: PUSH
27686: LD_INT 60
27688: PUSH
27689: LD_INT 70
27691: PUSH
27692: LD_INT 80
27694: PUSH
27695: LD_INT 90
27697: PUSH
27698: LD_INT 100
27700: PUSH
27701: LD_INT 110
27703: PUSH
27704: LD_INT 120
27706: PUSH
27707: LD_INT 130
27709: PUSH
27710: LD_INT 140
27712: PUSH
27713: LD_INT 150
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: PPUSH
27736: LD_INT 15
27738: PPUSH
27739: CALL_OW 12
27743: ARRAY
27744: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27745: LD_ADDR_VAR 0 4
27749: PUSH
27750: LD_INT 10
27752: PUSH
27753: LD_INT 20
27755: PUSH
27756: LD_INT 30
27758: PUSH
27759: LD_INT 40
27761: PUSH
27762: LD_INT 50
27764: PUSH
27765: LD_INT 60
27767: PUSH
27768: LD_INT 70
27770: PUSH
27771: LD_INT 80
27773: PUSH
27774: LD_INT 90
27776: PUSH
27777: LD_INT 100
27779: PUSH
27780: LD_INT 110
27782: PUSH
27783: LD_INT 120
27785: PUSH
27786: LD_INT 130
27788: PUSH
27789: LD_INT 140
27791: PUSH
27792: LD_INT 150
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 1
27814: PPUSH
27815: LD_INT 15
27817: PPUSH
27818: CALL_OW 12
27822: ARRAY
27823: ST_TO_ADDR
// if ValidHex ( x , y ) then
27824: LD_VAR 0 3
27828: PPUSH
27829: LD_VAR 0 4
27833: PPUSH
27834: CALL_OW 488
27838: IFFALSE 27861
// begin result := [ x , y ] ;
27840: LD_ADDR_VAR 0 1
27844: PUSH
27845: LD_VAR 0 3
27849: PUSH
27850: LD_VAR 0 4
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: ST_TO_ADDR
// break ;
27859: GO 27863
// end ; end ;
27861: GO 27663
27863: POP
27864: POP
// if result then
27865: LD_VAR 0 1
27869: IFFALSE 27929
// begin ToLua ( playSibBomb() ) ;
27871: LD_STRING playSibBomb()
27873: PPUSH
27874: CALL_OW 559
// wait ( 0 0$14 ) ;
27878: LD_INT 490
27880: PPUSH
27881: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27885: LD_VAR 0 1
27889: PUSH
27890: LD_INT 1
27892: ARRAY
27893: PPUSH
27894: LD_VAR 0 1
27898: PUSH
27899: LD_INT 2
27901: ARRAY
27902: PPUSH
27903: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27907: LD_VAR 0 1
27911: PUSH
27912: LD_INT 1
27914: ARRAY
27915: PPUSH
27916: LD_VAR 0 1
27920: PUSH
27921: LD_INT 2
27923: ARRAY
27924: PPUSH
27925: CALL_OW 429
// end ; end ;
27929: LD_VAR 0 1
27933: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27934: LD_EXP 90
27938: PUSH
27939: LD_EXP 112
27943: AND
27944: IFFALSE 27956
27946: GO 27948
27948: DISABLE
// YouLost (  ) ;
27949: LD_STRING 
27951: PPUSH
27952: CALL_OW 104
27956: END
// every 0 0$1 trigger StreamModeActive and sFog do
27957: LD_EXP 90
27961: PUSH
27962: LD_EXP 111
27966: AND
27967: IFFALSE 27981
27969: GO 27971
27971: DISABLE
// FogOff ( your_side ) ;
27972: LD_OWVAR 2
27976: PPUSH
27977: CALL_OW 344
27981: END
// every 0 0$1 trigger StreamModeActive and sSun do
27982: LD_EXP 90
27986: PUSH
27987: LD_EXP 113
27991: AND
27992: IFFALSE 28020
27994: GO 27996
27996: DISABLE
// begin solar_recharge_percent := 0 ;
27997: LD_ADDR_OWVAR 79
28001: PUSH
28002: LD_INT 0
28004: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28005: LD_INT 10500
28007: PPUSH
28008: CALL_OW 67
// solar_recharge_percent := 100 ;
28012: LD_ADDR_OWVAR 79
28016: PUSH
28017: LD_INT 100
28019: ST_TO_ADDR
// end ;
28020: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28021: LD_EXP 90
28025: PUSH
28026: LD_EXP 114
28030: AND
28031: IFFALSE 28270
28033: GO 28035
28035: DISABLE
28036: LD_INT 0
28038: PPUSH
28039: PPUSH
28040: PPUSH
// begin tmp := [ ] ;
28041: LD_ADDR_VAR 0 3
28045: PUSH
28046: EMPTY
28047: ST_TO_ADDR
// for i := 1 to 6 do
28048: LD_ADDR_VAR 0 1
28052: PUSH
28053: DOUBLE
28054: LD_INT 1
28056: DEC
28057: ST_TO_ADDR
28058: LD_INT 6
28060: PUSH
28061: FOR_TO
28062: IFFALSE 28167
// begin uc_nation := nation_nature ;
28064: LD_ADDR_OWVAR 21
28068: PUSH
28069: LD_INT 0
28071: ST_TO_ADDR
// uc_side := 0 ;
28072: LD_ADDR_OWVAR 20
28076: PUSH
28077: LD_INT 0
28079: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28080: LD_ADDR_OWVAR 29
28084: PUSH
28085: LD_INT 12
28087: PUSH
28088: LD_INT 12
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: ST_TO_ADDR
// hc_agressivity := 20 ;
28095: LD_ADDR_OWVAR 35
28099: PUSH
28100: LD_INT 20
28102: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28103: LD_ADDR_OWVAR 28
28107: PUSH
28108: LD_INT 17
28110: ST_TO_ADDR
// hc_gallery :=  ;
28111: LD_ADDR_OWVAR 33
28115: PUSH
28116: LD_STRING 
28118: ST_TO_ADDR
// hc_name :=  ;
28119: LD_ADDR_OWVAR 26
28123: PUSH
28124: LD_STRING 
28126: ST_TO_ADDR
// un := CreateHuman ;
28127: LD_ADDR_VAR 0 2
28131: PUSH
28132: CALL_OW 44
28136: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28137: LD_VAR 0 2
28141: PPUSH
28142: LD_INT 1
28144: PPUSH
28145: CALL_OW 51
// tmp := tmp ^ un ;
28149: LD_ADDR_VAR 0 3
28153: PUSH
28154: LD_VAR 0 3
28158: PUSH
28159: LD_VAR 0 2
28163: ADD
28164: ST_TO_ADDR
// end ;
28165: GO 28061
28167: POP
28168: POP
// repeat wait ( 0 0$1 ) ;
28169: LD_INT 35
28171: PPUSH
28172: CALL_OW 67
// for un in tmp do
28176: LD_ADDR_VAR 0 2
28180: PUSH
28181: LD_VAR 0 3
28185: PUSH
28186: FOR_IN
28187: IFFALSE 28261
// begin if IsDead ( un ) then
28189: LD_VAR 0 2
28193: PPUSH
28194: CALL_OW 301
28198: IFFALSE 28218
// begin tmp := tmp diff un ;
28200: LD_ADDR_VAR 0 3
28204: PUSH
28205: LD_VAR 0 3
28209: PUSH
28210: LD_VAR 0 2
28214: DIFF
28215: ST_TO_ADDR
// continue ;
28216: GO 28186
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28218: LD_VAR 0 2
28222: PPUSH
28223: LD_INT 3
28225: PUSH
28226: LD_INT 22
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PPUSH
28240: CALL_OW 69
28244: PPUSH
28245: LD_VAR 0 2
28249: PPUSH
28250: CALL_OW 74
28254: PPUSH
28255: CALL_OW 115
// end ;
28259: GO 28186
28261: POP
28262: POP
// until not tmp ;
28263: LD_VAR 0 3
28267: NOT
28268: IFFALSE 28169
// end ;
28270: PPOPN 3
28272: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28273: LD_EXP 90
28277: PUSH
28278: LD_EXP 115
28282: AND
28283: IFFALSE 28337
28285: GO 28287
28287: DISABLE
// begin ToLua ( displayTroll(); ) ;
28288: LD_STRING displayTroll();
28290: PPUSH
28291: CALL_OW 559
// wait ( 3 3$00 ) ;
28295: LD_INT 6300
28297: PPUSH
28298: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28302: LD_STRING hideTroll();
28304: PPUSH
28305: CALL_OW 559
// wait ( 1 1$00 ) ;
28309: LD_INT 2100
28311: PPUSH
28312: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28316: LD_STRING displayTroll();
28318: PPUSH
28319: CALL_OW 559
// wait ( 1 1$00 ) ;
28323: LD_INT 2100
28325: PPUSH
28326: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28330: LD_STRING hideTroll();
28332: PPUSH
28333: CALL_OW 559
// end ;
28337: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28338: LD_EXP 90
28342: PUSH
28343: LD_EXP 116
28347: AND
28348: IFFALSE 28411
28350: GO 28352
28352: DISABLE
28353: LD_INT 0
28355: PPUSH
// begin p := 0 ;
28356: LD_ADDR_VAR 0 1
28360: PUSH
28361: LD_INT 0
28363: ST_TO_ADDR
// repeat game_speed := 1 ;
28364: LD_ADDR_OWVAR 65
28368: PUSH
28369: LD_INT 1
28371: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28372: LD_INT 35
28374: PPUSH
28375: CALL_OW 67
// p := p + 1 ;
28379: LD_ADDR_VAR 0 1
28383: PUSH
28384: LD_VAR 0 1
28388: PUSH
28389: LD_INT 1
28391: PLUS
28392: ST_TO_ADDR
// until p >= 60 ;
28393: LD_VAR 0 1
28397: PUSH
28398: LD_INT 60
28400: GREATEREQUAL
28401: IFFALSE 28364
// game_speed := 4 ;
28403: LD_ADDR_OWVAR 65
28407: PUSH
28408: LD_INT 4
28410: ST_TO_ADDR
// end ;
28411: PPOPN 1
28413: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28414: LD_EXP 90
28418: PUSH
28419: LD_EXP 117
28423: AND
28424: IFFALSE 28570
28426: GO 28428
28428: DISABLE
28429: LD_INT 0
28431: PPUSH
28432: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28433: LD_ADDR_VAR 0 1
28437: PUSH
28438: LD_INT 22
28440: PUSH
28441: LD_OWVAR 2
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: LD_INT 30
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 30
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PPUSH
28482: CALL_OW 69
28486: ST_TO_ADDR
// if not depot then
28487: LD_VAR 0 1
28491: NOT
28492: IFFALSE 28496
// exit ;
28494: GO 28570
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28496: LD_ADDR_VAR 0 2
28500: PUSH
28501: LD_VAR 0 1
28505: PUSH
28506: LD_INT 1
28508: PPUSH
28509: LD_VAR 0 1
28513: PPUSH
28514: CALL_OW 12
28518: ARRAY
28519: PPUSH
28520: CALL_OW 274
28524: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28525: LD_VAR 0 2
28529: PPUSH
28530: LD_INT 1
28532: PPUSH
28533: LD_INT 0
28535: PPUSH
28536: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28540: LD_VAR 0 2
28544: PPUSH
28545: LD_INT 2
28547: PPUSH
28548: LD_INT 0
28550: PPUSH
28551: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28555: LD_VAR 0 2
28559: PPUSH
28560: LD_INT 3
28562: PPUSH
28563: LD_INT 0
28565: PPUSH
28566: CALL_OW 277
// end ;
28570: PPOPN 2
28572: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28573: LD_EXP 90
28577: PUSH
28578: LD_EXP 118
28582: AND
28583: IFFALSE 28680
28585: GO 28587
28587: DISABLE
28588: LD_INT 0
28590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28591: LD_ADDR_VAR 0 1
28595: PUSH
28596: LD_INT 22
28598: PUSH
28599: LD_OWVAR 2
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 21
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 3
28620: PUSH
28621: LD_INT 23
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: PPUSH
28640: CALL_OW 69
28644: ST_TO_ADDR
// if not tmp then
28645: LD_VAR 0 1
28649: NOT
28650: IFFALSE 28654
// exit ;
28652: GO 28680
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28654: LD_VAR 0 1
28658: PUSH
28659: LD_INT 1
28661: PPUSH
28662: LD_VAR 0 1
28666: PPUSH
28667: CALL_OW 12
28671: ARRAY
28672: PPUSH
28673: LD_INT 200
28675: PPUSH
28676: CALL_OW 234
// end ;
28680: PPOPN 1
28682: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28683: LD_EXP 90
28687: PUSH
28688: LD_EXP 119
28692: AND
28693: IFFALSE 28772
28695: GO 28697
28697: DISABLE
28698: LD_INT 0
28700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28701: LD_ADDR_VAR 0 1
28705: PUSH
28706: LD_INT 22
28708: PUSH
28709: LD_OWVAR 2
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 21
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PPUSH
28732: CALL_OW 69
28736: ST_TO_ADDR
// if not tmp then
28737: LD_VAR 0 1
28741: NOT
28742: IFFALSE 28746
// exit ;
28744: GO 28772
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28746: LD_VAR 0 1
28750: PUSH
28751: LD_INT 1
28753: PPUSH
28754: LD_VAR 0 1
28758: PPUSH
28759: CALL_OW 12
28763: ARRAY
28764: PPUSH
28765: LD_INT 60
28767: PPUSH
28768: CALL_OW 234
// end ;
28772: PPOPN 1
28774: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28775: LD_EXP 90
28779: PUSH
28780: LD_EXP 120
28784: AND
28785: IFFALSE 28884
28787: GO 28789
28789: DISABLE
28790: LD_INT 0
28792: PPUSH
28793: PPUSH
// begin enable ;
28794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28795: LD_ADDR_VAR 0 1
28799: PUSH
28800: LD_INT 22
28802: PUSH
28803: LD_OWVAR 2
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 61
28814: PUSH
28815: EMPTY
28816: LIST
28817: PUSH
28818: LD_INT 33
28820: PUSH
28821: LD_INT 2
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: LIST
28832: PPUSH
28833: CALL_OW 69
28837: ST_TO_ADDR
// if not tmp then
28838: LD_VAR 0 1
28842: NOT
28843: IFFALSE 28847
// exit ;
28845: GO 28884
// for i in tmp do
28847: LD_ADDR_VAR 0 2
28851: PUSH
28852: LD_VAR 0 1
28856: PUSH
28857: FOR_IN
28858: IFFALSE 28882
// if IsControledBy ( i ) then
28860: LD_VAR 0 2
28864: PPUSH
28865: CALL_OW 312
28869: IFFALSE 28880
// ComUnlink ( i ) ;
28871: LD_VAR 0 2
28875: PPUSH
28876: CALL_OW 136
28880: GO 28857
28882: POP
28883: POP
// end ;
28884: PPOPN 2
28886: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28887: LD_EXP 90
28891: PUSH
28892: LD_EXP 121
28896: AND
28897: IFFALSE 29037
28899: GO 28901
28901: DISABLE
28902: LD_INT 0
28904: PPUSH
28905: PPUSH
// begin ToLua ( displayPowell(); ) ;
28906: LD_STRING displayPowell();
28908: PPUSH
28909: CALL_OW 559
// uc_side := 0 ;
28913: LD_ADDR_OWVAR 20
28917: PUSH
28918: LD_INT 0
28920: ST_TO_ADDR
// uc_nation := 2 ;
28921: LD_ADDR_OWVAR 21
28925: PUSH
28926: LD_INT 2
28928: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28929: LD_ADDR_OWVAR 37
28933: PUSH
28934: LD_INT 14
28936: ST_TO_ADDR
// vc_engine := engine_siberite ;
28937: LD_ADDR_OWVAR 39
28941: PUSH
28942: LD_INT 3
28944: ST_TO_ADDR
// vc_control := control_apeman ;
28945: LD_ADDR_OWVAR 38
28949: PUSH
28950: LD_INT 5
28952: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28953: LD_ADDR_OWVAR 40
28957: PUSH
28958: LD_INT 29
28960: ST_TO_ADDR
// un := CreateVehicle ;
28961: LD_ADDR_VAR 0 2
28965: PUSH
28966: CALL_OW 45
28970: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28971: LD_VAR 0 2
28975: PPUSH
28976: LD_INT 1
28978: PPUSH
28979: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28983: LD_INT 35
28985: PPUSH
28986: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28990: LD_VAR 0 2
28994: PPUSH
28995: LD_INT 22
28997: PUSH
28998: LD_OWVAR 2
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PPUSH
29007: CALL_OW 69
29011: PPUSH
29012: LD_VAR 0 2
29016: PPUSH
29017: CALL_OW 74
29021: PPUSH
29022: CALL_OW 115
// until IsDead ( un ) ;
29026: LD_VAR 0 2
29030: PPUSH
29031: CALL_OW 301
29035: IFFALSE 28983
// end ;
29037: PPOPN 2
29039: END
// every 0 0$1 trigger StreamModeActive and sStu do
29040: LD_EXP 90
29044: PUSH
29045: LD_EXP 129
29049: AND
29050: IFFALSE 29066
29052: GO 29054
29054: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29055: LD_STRING displayStucuk();
29057: PPUSH
29058: CALL_OW 559
// ResetFog ;
29062: CALL_OW 335
// end ;
29066: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29067: LD_EXP 90
29071: PUSH
29072: LD_EXP 122
29076: AND
29077: IFFALSE 29218
29079: GO 29081
29081: DISABLE
29082: LD_INT 0
29084: PPUSH
29085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29086: LD_ADDR_VAR 0 2
29090: PUSH
29091: LD_INT 22
29093: PUSH
29094: LD_OWVAR 2
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 21
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PPUSH
29117: CALL_OW 69
29121: ST_TO_ADDR
// if not tmp then
29122: LD_VAR 0 2
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29218
// un := tmp [ rand ( 1 , tmp ) ] ;
29131: LD_ADDR_VAR 0 1
29135: PUSH
29136: LD_VAR 0 2
29140: PUSH
29141: LD_INT 1
29143: PPUSH
29144: LD_VAR 0 2
29148: PPUSH
29149: CALL_OW 12
29153: ARRAY
29154: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29155: LD_VAR 0 1
29159: PPUSH
29160: LD_INT 0
29162: PPUSH
29163: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29167: LD_VAR 0 1
29171: PPUSH
29172: LD_OWVAR 3
29176: PUSH
29177: LD_VAR 0 1
29181: DIFF
29182: PPUSH
29183: LD_VAR 0 1
29187: PPUSH
29188: CALL_OW 74
29192: PPUSH
29193: CALL_OW 115
// wait ( 0 0$20 ) ;
29197: LD_INT 700
29199: PPUSH
29200: CALL_OW 67
// SetSide ( un , your_side ) ;
29204: LD_VAR 0 1
29208: PPUSH
29209: LD_OWVAR 2
29213: PPUSH
29214: CALL_OW 235
// end ;
29218: PPOPN 2
29220: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29221: LD_EXP 90
29225: PUSH
29226: LD_EXP 123
29230: AND
29231: IFFALSE 29337
29233: GO 29235
29235: DISABLE
29236: LD_INT 0
29238: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29239: LD_ADDR_VAR 0 1
29243: PUSH
29244: LD_INT 22
29246: PUSH
29247: LD_OWVAR 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: LD_INT 30
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 30
29271: PUSH
29272: LD_INT 1
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PPUSH
29288: CALL_OW 69
29292: ST_TO_ADDR
// if not depot then
29293: LD_VAR 0 1
29297: NOT
29298: IFFALSE 29302
// exit ;
29300: GO 29337
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29302: LD_VAR 0 1
29306: PUSH
29307: LD_INT 1
29309: ARRAY
29310: PPUSH
29311: CALL_OW 250
29315: PPUSH
29316: LD_VAR 0 1
29320: PUSH
29321: LD_INT 1
29323: ARRAY
29324: PPUSH
29325: CALL_OW 251
29329: PPUSH
29330: LD_INT 70
29332: PPUSH
29333: CALL_OW 495
// end ;
29337: PPOPN 1
29339: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29340: LD_EXP 90
29344: PUSH
29345: LD_EXP 124
29349: AND
29350: IFFALSE 29561
29352: GO 29354
29354: DISABLE
29355: LD_INT 0
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29362: LD_ADDR_VAR 0 5
29366: PUSH
29367: LD_INT 22
29369: PUSH
29370: LD_OWVAR 2
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 21
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PPUSH
29393: CALL_OW 69
29397: ST_TO_ADDR
// if not tmp then
29398: LD_VAR 0 5
29402: NOT
29403: IFFALSE 29407
// exit ;
29405: GO 29561
// for i in tmp do
29407: LD_ADDR_VAR 0 1
29411: PUSH
29412: LD_VAR 0 5
29416: PUSH
29417: FOR_IN
29418: IFFALSE 29559
// begin d := rand ( 0 , 5 ) ;
29420: LD_ADDR_VAR 0 4
29424: PUSH
29425: LD_INT 0
29427: PPUSH
29428: LD_INT 5
29430: PPUSH
29431: CALL_OW 12
29435: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29436: LD_ADDR_VAR 0 2
29440: PUSH
29441: LD_VAR 0 1
29445: PPUSH
29446: CALL_OW 250
29450: PPUSH
29451: LD_VAR 0 4
29455: PPUSH
29456: LD_INT 3
29458: PPUSH
29459: LD_INT 12
29461: PPUSH
29462: CALL_OW 12
29466: PPUSH
29467: CALL_OW 272
29471: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29472: LD_ADDR_VAR 0 3
29476: PUSH
29477: LD_VAR 0 1
29481: PPUSH
29482: CALL_OW 251
29486: PPUSH
29487: LD_VAR 0 4
29491: PPUSH
29492: LD_INT 3
29494: PPUSH
29495: LD_INT 12
29497: PPUSH
29498: CALL_OW 12
29502: PPUSH
29503: CALL_OW 273
29507: ST_TO_ADDR
// if ValidHex ( x , y ) then
29508: LD_VAR 0 2
29512: PPUSH
29513: LD_VAR 0 3
29517: PPUSH
29518: CALL_OW 488
29522: IFFALSE 29557
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29524: LD_VAR 0 1
29528: PPUSH
29529: LD_VAR 0 2
29533: PPUSH
29534: LD_VAR 0 3
29538: PPUSH
29539: LD_INT 3
29541: PPUSH
29542: LD_INT 6
29544: PPUSH
29545: CALL_OW 12
29549: PPUSH
29550: LD_INT 1
29552: PPUSH
29553: CALL_OW 483
// end ;
29557: GO 29417
29559: POP
29560: POP
// end ;
29561: PPOPN 5
29563: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29564: LD_EXP 90
29568: PUSH
29569: LD_EXP 125
29573: AND
29574: IFFALSE 29668
29576: GO 29578
29578: DISABLE
29579: LD_INT 0
29581: PPUSH
29582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29583: LD_ADDR_VAR 0 2
29587: PUSH
29588: LD_INT 22
29590: PUSH
29591: LD_OWVAR 2
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 32
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 21
29612: PUSH
29613: LD_INT 2
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: PPUSH
29625: CALL_OW 69
29629: ST_TO_ADDR
// if not tmp then
29630: LD_VAR 0 2
29634: NOT
29635: IFFALSE 29639
// exit ;
29637: GO 29668
// for i in tmp do
29639: LD_ADDR_VAR 0 1
29643: PUSH
29644: LD_VAR 0 2
29648: PUSH
29649: FOR_IN
29650: IFFALSE 29666
// SetFuel ( i , 0 ) ;
29652: LD_VAR 0 1
29656: PPUSH
29657: LD_INT 0
29659: PPUSH
29660: CALL_OW 240
29664: GO 29649
29666: POP
29667: POP
// end ;
29668: PPOPN 2
29670: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29671: LD_EXP 90
29675: PUSH
29676: LD_EXP 126
29680: AND
29681: IFFALSE 29747
29683: GO 29685
29685: DISABLE
29686: LD_INT 0
29688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29689: LD_ADDR_VAR 0 1
29693: PUSH
29694: LD_INT 22
29696: PUSH
29697: LD_OWVAR 2
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 30
29708: PUSH
29709: LD_INT 29
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PPUSH
29720: CALL_OW 69
29724: ST_TO_ADDR
// if not tmp then
29725: LD_VAR 0 1
29729: NOT
29730: IFFALSE 29734
// exit ;
29732: GO 29747
// DestroyUnit ( tmp [ 1 ] ) ;
29734: LD_VAR 0 1
29738: PUSH
29739: LD_INT 1
29741: ARRAY
29742: PPUSH
29743: CALL_OW 65
// end ;
29747: PPOPN 1
29749: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29750: LD_EXP 90
29754: PUSH
29755: LD_EXP 128
29759: AND
29760: IFFALSE 29889
29762: GO 29764
29764: DISABLE
29765: LD_INT 0
29767: PPUSH
// begin uc_side := 0 ;
29768: LD_ADDR_OWVAR 20
29772: PUSH
29773: LD_INT 0
29775: ST_TO_ADDR
// uc_nation := nation_arabian ;
29776: LD_ADDR_OWVAR 21
29780: PUSH
29781: LD_INT 2
29783: ST_TO_ADDR
// hc_gallery :=  ;
29784: LD_ADDR_OWVAR 33
29788: PUSH
29789: LD_STRING 
29791: ST_TO_ADDR
// hc_name :=  ;
29792: LD_ADDR_OWVAR 26
29796: PUSH
29797: LD_STRING 
29799: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29800: LD_INT 1
29802: PPUSH
29803: LD_INT 11
29805: PPUSH
29806: LD_INT 10
29808: PPUSH
29809: CALL_OW 380
// un := CreateHuman ;
29813: LD_ADDR_VAR 0 1
29817: PUSH
29818: CALL_OW 44
29822: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29823: LD_VAR 0 1
29827: PPUSH
29828: LD_INT 1
29830: PPUSH
29831: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29835: LD_INT 35
29837: PPUSH
29838: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29842: LD_VAR 0 1
29846: PPUSH
29847: LD_INT 22
29849: PUSH
29850: LD_OWVAR 2
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PPUSH
29859: CALL_OW 69
29863: PPUSH
29864: LD_VAR 0 1
29868: PPUSH
29869: CALL_OW 74
29873: PPUSH
29874: CALL_OW 115
// until IsDead ( un ) ;
29878: LD_VAR 0 1
29882: PPUSH
29883: CALL_OW 301
29887: IFFALSE 29835
// end ;
29889: PPOPN 1
29891: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29892: LD_EXP 90
29896: PUSH
29897: LD_EXP 130
29901: AND
29902: IFFALSE 29914
29904: GO 29906
29906: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29907: LD_STRING earthquake(getX(game), 0, 32)
29909: PPUSH
29910: CALL_OW 559
29914: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29915: LD_EXP 90
29919: PUSH
29920: LD_EXP 131
29924: AND
29925: IFFALSE 30016
29927: GO 29929
29929: DISABLE
29930: LD_INT 0
29932: PPUSH
// begin enable ;
29933: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29934: LD_ADDR_VAR 0 1
29938: PUSH
29939: LD_INT 22
29941: PUSH
29942: LD_OWVAR 2
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 21
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 33
29963: PUSH
29964: LD_INT 3
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: LIST
29975: PPUSH
29976: CALL_OW 69
29980: ST_TO_ADDR
// if not tmp then
29981: LD_VAR 0 1
29985: NOT
29986: IFFALSE 29990
// exit ;
29988: GO 30016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29990: LD_VAR 0 1
29994: PUSH
29995: LD_INT 1
29997: PPUSH
29998: LD_VAR 0 1
30002: PPUSH
30003: CALL_OW 12
30007: ARRAY
30008: PPUSH
30009: LD_INT 1
30011: PPUSH
30012: CALL_OW 234
// end ;
30016: PPOPN 1
30018: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30019: LD_EXP 90
30023: PUSH
30024: LD_EXP 132
30028: AND
30029: IFFALSE 30170
30031: GO 30033
30033: DISABLE
30034: LD_INT 0
30036: PPUSH
30037: PPUSH
30038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30039: LD_ADDR_VAR 0 3
30043: PUSH
30044: LD_INT 22
30046: PUSH
30047: LD_OWVAR 2
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 25
30058: PUSH
30059: LD_INT 1
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PPUSH
30070: CALL_OW 69
30074: ST_TO_ADDR
// if not tmp then
30075: LD_VAR 0 3
30079: NOT
30080: IFFALSE 30084
// exit ;
30082: GO 30170
// un := tmp [ rand ( 1 , tmp ) ] ;
30084: LD_ADDR_VAR 0 2
30088: PUSH
30089: LD_VAR 0 3
30093: PUSH
30094: LD_INT 1
30096: PPUSH
30097: LD_VAR 0 3
30101: PPUSH
30102: CALL_OW 12
30106: ARRAY
30107: ST_TO_ADDR
// if Crawls ( un ) then
30108: LD_VAR 0 2
30112: PPUSH
30113: CALL_OW 318
30117: IFFALSE 30128
// ComWalk ( un ) ;
30119: LD_VAR 0 2
30123: PPUSH
30124: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30128: LD_VAR 0 2
30132: PPUSH
30133: LD_INT 9
30135: PPUSH
30136: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30140: LD_INT 28
30142: PPUSH
30143: LD_OWVAR 2
30147: PPUSH
30148: LD_INT 2
30150: PPUSH
30151: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30155: LD_INT 29
30157: PPUSH
30158: LD_OWVAR 2
30162: PPUSH
30163: LD_INT 2
30165: PPUSH
30166: CALL_OW 322
// end ;
30170: PPOPN 3
30172: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30173: LD_EXP 90
30177: PUSH
30178: LD_EXP 133
30182: AND
30183: IFFALSE 30294
30185: GO 30187
30187: DISABLE
30188: LD_INT 0
30190: PPUSH
30191: PPUSH
30192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30193: LD_ADDR_VAR 0 3
30197: PUSH
30198: LD_INT 22
30200: PUSH
30201: LD_OWVAR 2
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 25
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PPUSH
30224: CALL_OW 69
30228: ST_TO_ADDR
// if not tmp then
30229: LD_VAR 0 3
30233: NOT
30234: IFFALSE 30238
// exit ;
30236: GO 30294
// un := tmp [ rand ( 1 , tmp ) ] ;
30238: LD_ADDR_VAR 0 2
30242: PUSH
30243: LD_VAR 0 3
30247: PUSH
30248: LD_INT 1
30250: PPUSH
30251: LD_VAR 0 3
30255: PPUSH
30256: CALL_OW 12
30260: ARRAY
30261: ST_TO_ADDR
// if Crawls ( un ) then
30262: LD_VAR 0 2
30266: PPUSH
30267: CALL_OW 318
30271: IFFALSE 30282
// ComWalk ( un ) ;
30273: LD_VAR 0 2
30277: PPUSH
30278: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30282: LD_VAR 0 2
30286: PPUSH
30287: LD_INT 8
30289: PPUSH
30290: CALL_OW 336
// end ;
30294: PPOPN 3
30296: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30297: LD_EXP 90
30301: PUSH
30302: LD_EXP 134
30306: AND
30307: IFFALSE 30451
30309: GO 30311
30311: DISABLE
30312: LD_INT 0
30314: PPUSH
30315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30316: LD_ADDR_VAR 0 2
30320: PUSH
30321: LD_INT 22
30323: PUSH
30324: LD_OWVAR 2
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 21
30335: PUSH
30336: LD_INT 2
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 34
30348: PUSH
30349: LD_INT 12
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 34
30358: PUSH
30359: LD_INT 51
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 34
30368: PUSH
30369: LD_INT 32
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: PPUSH
30387: CALL_OW 69
30391: ST_TO_ADDR
// if not tmp then
30392: LD_VAR 0 2
30396: NOT
30397: IFFALSE 30401
// exit ;
30399: GO 30451
// for i in tmp do
30401: LD_ADDR_VAR 0 1
30405: PUSH
30406: LD_VAR 0 2
30410: PUSH
30411: FOR_IN
30412: IFFALSE 30449
// if GetCargo ( i , mat_artifact ) = 0 then
30414: LD_VAR 0 1
30418: PPUSH
30419: LD_INT 4
30421: PPUSH
30422: CALL_OW 289
30426: PUSH
30427: LD_INT 0
30429: EQUAL
30430: IFFALSE 30447
// SetCargo ( i , mat_siberit , 100 ) ;
30432: LD_VAR 0 1
30436: PPUSH
30437: LD_INT 3
30439: PPUSH
30440: LD_INT 100
30442: PPUSH
30443: CALL_OW 290
30447: GO 30411
30449: POP
30450: POP
// end ;
30451: PPOPN 2
30453: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30454: LD_EXP 90
30458: PUSH
30459: LD_EXP 135
30463: AND
30464: IFFALSE 30647
30466: GO 30468
30468: DISABLE
30469: LD_INT 0
30471: PPUSH
30472: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30473: LD_ADDR_VAR 0 2
30477: PUSH
30478: LD_INT 22
30480: PUSH
30481: LD_OWVAR 2
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PPUSH
30490: CALL_OW 69
30494: ST_TO_ADDR
// if not tmp then
30495: LD_VAR 0 2
30499: NOT
30500: IFFALSE 30504
// exit ;
30502: GO 30647
// for i := 1 to 2 do
30504: LD_ADDR_VAR 0 1
30508: PUSH
30509: DOUBLE
30510: LD_INT 1
30512: DEC
30513: ST_TO_ADDR
30514: LD_INT 2
30516: PUSH
30517: FOR_TO
30518: IFFALSE 30645
// begin uc_side := your_side ;
30520: LD_ADDR_OWVAR 20
30524: PUSH
30525: LD_OWVAR 2
30529: ST_TO_ADDR
// uc_nation := nation_american ;
30530: LD_ADDR_OWVAR 21
30534: PUSH
30535: LD_INT 1
30537: ST_TO_ADDR
// vc_chassis := us_morphling ;
30538: LD_ADDR_OWVAR 37
30542: PUSH
30543: LD_INT 5
30545: ST_TO_ADDR
// vc_engine := engine_siberite ;
30546: LD_ADDR_OWVAR 39
30550: PUSH
30551: LD_INT 3
30553: ST_TO_ADDR
// vc_control := control_computer ;
30554: LD_ADDR_OWVAR 38
30558: PUSH
30559: LD_INT 3
30561: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30562: LD_ADDR_OWVAR 40
30566: PUSH
30567: LD_INT 10
30569: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30570: LD_VAR 0 2
30574: PUSH
30575: LD_INT 1
30577: ARRAY
30578: PPUSH
30579: CALL_OW 310
30583: NOT
30584: IFFALSE 30631
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30586: CALL_OW 45
30590: PPUSH
30591: LD_VAR 0 2
30595: PUSH
30596: LD_INT 1
30598: ARRAY
30599: PPUSH
30600: CALL_OW 250
30604: PPUSH
30605: LD_VAR 0 2
30609: PUSH
30610: LD_INT 1
30612: ARRAY
30613: PPUSH
30614: CALL_OW 251
30618: PPUSH
30619: LD_INT 12
30621: PPUSH
30622: LD_INT 1
30624: PPUSH
30625: CALL_OW 50
30629: GO 30643
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30631: CALL_OW 45
30635: PPUSH
30636: LD_INT 1
30638: PPUSH
30639: CALL_OW 51
// end ;
30643: GO 30517
30645: POP
30646: POP
// end ;
30647: PPOPN 2
30649: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30650: LD_EXP 90
30654: PUSH
30655: LD_EXP 136
30659: AND
30660: IFFALSE 30882
30662: GO 30664
30664: DISABLE
30665: LD_INT 0
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30673: LD_ADDR_VAR 0 6
30677: PUSH
30678: LD_INT 22
30680: PUSH
30681: LD_OWVAR 2
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 21
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 3
30702: PUSH
30703: LD_INT 23
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: PPUSH
30722: CALL_OW 69
30726: ST_TO_ADDR
// if not tmp then
30727: LD_VAR 0 6
30731: NOT
30732: IFFALSE 30736
// exit ;
30734: GO 30882
// s1 := rand ( 1 , 4 ) ;
30736: LD_ADDR_VAR 0 2
30740: PUSH
30741: LD_INT 1
30743: PPUSH
30744: LD_INT 4
30746: PPUSH
30747: CALL_OW 12
30751: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30752: LD_ADDR_VAR 0 4
30756: PUSH
30757: LD_VAR 0 6
30761: PUSH
30762: LD_INT 1
30764: ARRAY
30765: PPUSH
30766: LD_VAR 0 2
30770: PPUSH
30771: CALL_OW 259
30775: ST_TO_ADDR
// if s1 = 1 then
30776: LD_VAR 0 2
30780: PUSH
30781: LD_INT 1
30783: EQUAL
30784: IFFALSE 30804
// s2 := rand ( 2 , 4 ) else
30786: LD_ADDR_VAR 0 3
30790: PUSH
30791: LD_INT 2
30793: PPUSH
30794: LD_INT 4
30796: PPUSH
30797: CALL_OW 12
30801: ST_TO_ADDR
30802: GO 30812
// s2 := 1 ;
30804: LD_ADDR_VAR 0 3
30808: PUSH
30809: LD_INT 1
30811: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30812: LD_ADDR_VAR 0 5
30816: PUSH
30817: LD_VAR 0 6
30821: PUSH
30822: LD_INT 1
30824: ARRAY
30825: PPUSH
30826: LD_VAR 0 3
30830: PPUSH
30831: CALL_OW 259
30835: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30836: LD_VAR 0 6
30840: PUSH
30841: LD_INT 1
30843: ARRAY
30844: PPUSH
30845: LD_VAR 0 2
30849: PPUSH
30850: LD_VAR 0 5
30854: PPUSH
30855: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30859: LD_VAR 0 6
30863: PUSH
30864: LD_INT 1
30866: ARRAY
30867: PPUSH
30868: LD_VAR 0 3
30872: PPUSH
30873: LD_VAR 0 4
30877: PPUSH
30878: CALL_OW 237
// end ;
30882: PPOPN 6
30884: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30885: LD_EXP 90
30889: PUSH
30890: LD_EXP 137
30894: AND
30895: IFFALSE 30974
30897: GO 30899
30899: DISABLE
30900: LD_INT 0
30902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30903: LD_ADDR_VAR 0 1
30907: PUSH
30908: LD_INT 22
30910: PUSH
30911: LD_OWVAR 2
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 30
30922: PUSH
30923: LD_INT 3
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PPUSH
30934: CALL_OW 69
30938: ST_TO_ADDR
// if not tmp then
30939: LD_VAR 0 1
30943: NOT
30944: IFFALSE 30948
// exit ;
30946: GO 30974
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30948: LD_VAR 0 1
30952: PUSH
30953: LD_INT 1
30955: PPUSH
30956: LD_VAR 0 1
30960: PPUSH
30961: CALL_OW 12
30965: ARRAY
30966: PPUSH
30967: LD_INT 1
30969: PPUSH
30970: CALL_OW 234
// end ;
30974: PPOPN 1
30976: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30977: LD_EXP 90
30981: PUSH
30982: LD_EXP 138
30986: AND
30987: IFFALSE 31099
30989: GO 30991
30991: DISABLE
30992: LD_INT 0
30994: PPUSH
30995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30996: LD_ADDR_VAR 0 2
31000: PUSH
31001: LD_INT 22
31003: PUSH
31004: LD_OWVAR 2
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: PUSH
31016: LD_INT 30
31018: PUSH
31019: LD_INT 27
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 30
31028: PUSH
31029: LD_INT 26
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 30
31038: PUSH
31039: LD_INT 28
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PPUSH
31056: CALL_OW 69
31060: ST_TO_ADDR
// if not tmp then
31061: LD_VAR 0 2
31065: NOT
31066: IFFALSE 31070
// exit ;
31068: GO 31099
// for i in tmp do
31070: LD_ADDR_VAR 0 1
31074: PUSH
31075: LD_VAR 0 2
31079: PUSH
31080: FOR_IN
31081: IFFALSE 31097
// SetLives ( i , 1 ) ;
31083: LD_VAR 0 1
31087: PPUSH
31088: LD_INT 1
31090: PPUSH
31091: CALL_OW 234
31095: GO 31080
31097: POP
31098: POP
// end ;
31099: PPOPN 2
31101: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31102: LD_EXP 90
31106: PUSH
31107: LD_EXP 139
31111: AND
31112: IFFALSE 31386
31114: GO 31116
31116: DISABLE
31117: LD_INT 0
31119: PPUSH
31120: PPUSH
31121: PPUSH
// begin i := rand ( 1 , 7 ) ;
31122: LD_ADDR_VAR 0 1
31126: PUSH
31127: LD_INT 1
31129: PPUSH
31130: LD_INT 7
31132: PPUSH
31133: CALL_OW 12
31137: ST_TO_ADDR
// case i of 1 :
31138: LD_VAR 0 1
31142: PUSH
31143: LD_INT 1
31145: DOUBLE
31146: EQUAL
31147: IFTRUE 31151
31149: GO 31161
31151: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31152: LD_STRING earthquake(getX(game), 0, 32)
31154: PPUSH
31155: CALL_OW 559
31159: GO 31386
31161: LD_INT 2
31163: DOUBLE
31164: EQUAL
31165: IFTRUE 31169
31167: GO 31183
31169: POP
// begin ToLua ( displayStucuk(); ) ;
31170: LD_STRING displayStucuk();
31172: PPUSH
31173: CALL_OW 559
// ResetFog ;
31177: CALL_OW 335
// end ; 3 :
31181: GO 31386
31183: LD_INT 3
31185: DOUBLE
31186: EQUAL
31187: IFTRUE 31191
31189: GO 31295
31191: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31192: LD_ADDR_VAR 0 2
31196: PUSH
31197: LD_INT 22
31199: PUSH
31200: LD_OWVAR 2
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 25
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PPUSH
31223: CALL_OW 69
31227: ST_TO_ADDR
// if not tmp then
31228: LD_VAR 0 2
31232: NOT
31233: IFFALSE 31237
// exit ;
31235: GO 31386
// un := tmp [ rand ( 1 , tmp ) ] ;
31237: LD_ADDR_VAR 0 3
31241: PUSH
31242: LD_VAR 0 2
31246: PUSH
31247: LD_INT 1
31249: PPUSH
31250: LD_VAR 0 2
31254: PPUSH
31255: CALL_OW 12
31259: ARRAY
31260: ST_TO_ADDR
// if Crawls ( un ) then
31261: LD_VAR 0 3
31265: PPUSH
31266: CALL_OW 318
31270: IFFALSE 31281
// ComWalk ( un ) ;
31272: LD_VAR 0 3
31276: PPUSH
31277: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31281: LD_VAR 0 3
31285: PPUSH
31286: LD_INT 8
31288: PPUSH
31289: CALL_OW 336
// end ; 4 :
31293: GO 31386
31295: LD_INT 4
31297: DOUBLE
31298: EQUAL
31299: IFTRUE 31303
31301: GO 31364
31303: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31304: LD_ADDR_VAR 0 2
31308: PUSH
31309: LD_INT 22
31311: PUSH
31312: LD_OWVAR 2
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 30
31323: PUSH
31324: LD_INT 29
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PPUSH
31335: CALL_OW 69
31339: ST_TO_ADDR
// if not tmp then
31340: LD_VAR 0 2
31344: NOT
31345: IFFALSE 31349
// exit ;
31347: GO 31386
// DestroyUnit ( tmp [ 1 ] ) ;
31349: LD_VAR 0 2
31353: PUSH
31354: LD_INT 1
31356: ARRAY
31357: PPUSH
31358: CALL_OW 65
// end ; 5 .. 7 :
31362: GO 31386
31364: LD_INT 5
31366: DOUBLE
31367: GREATEREQUAL
31368: IFFALSE 31376
31370: LD_INT 7
31372: DOUBLE
31373: LESSEQUAL
31374: IFTRUE 31378
31376: GO 31385
31378: POP
// StreamSibBomb ; end ;
31379: CALL 27636 0 0
31383: GO 31386
31385: POP
// end ;
31386: PPOPN 3
31388: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31389: LD_EXP 90
31393: PUSH
31394: LD_EXP 140
31398: AND
31399: IFFALSE 31555
31401: GO 31403
31403: DISABLE
31404: LD_INT 0
31406: PPUSH
31407: PPUSH
31408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31409: LD_ADDR_VAR 0 2
31413: PUSH
31414: LD_INT 81
31416: PUSH
31417: LD_OWVAR 2
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 2
31428: PUSH
31429: LD_INT 21
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 21
31441: PUSH
31442: LD_INT 2
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: LIST
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PPUSH
31458: CALL_OW 69
31462: ST_TO_ADDR
// if not tmp then
31463: LD_VAR 0 2
31467: NOT
31468: IFFALSE 31472
// exit ;
31470: GO 31555
// p := 0 ;
31472: LD_ADDR_VAR 0 3
31476: PUSH
31477: LD_INT 0
31479: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31480: LD_INT 35
31482: PPUSH
31483: CALL_OW 67
// p := p + 1 ;
31487: LD_ADDR_VAR 0 3
31491: PUSH
31492: LD_VAR 0 3
31496: PUSH
31497: LD_INT 1
31499: PLUS
31500: ST_TO_ADDR
// for i in tmp do
31501: LD_ADDR_VAR 0 1
31505: PUSH
31506: LD_VAR 0 2
31510: PUSH
31511: FOR_IN
31512: IFFALSE 31543
// if GetLives ( i ) < 1000 then
31514: LD_VAR 0 1
31518: PPUSH
31519: CALL_OW 256
31523: PUSH
31524: LD_INT 1000
31526: LESS
31527: IFFALSE 31541
// SetLives ( i , 1000 ) ;
31529: LD_VAR 0 1
31533: PPUSH
31534: LD_INT 1000
31536: PPUSH
31537: CALL_OW 234
31541: GO 31511
31543: POP
31544: POP
// until p > 20 ;
31545: LD_VAR 0 3
31549: PUSH
31550: LD_INT 20
31552: GREATER
31553: IFFALSE 31480
// end ;
31555: PPOPN 3
31557: END
// every 0 0$1 trigger StreamModeActive and sTime do
31558: LD_EXP 90
31562: PUSH
31563: LD_EXP 141
31567: AND
31568: IFFALSE 31603
31570: GO 31572
31572: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31573: LD_INT 28
31575: PPUSH
31576: LD_OWVAR 2
31580: PPUSH
31581: LD_INT 2
31583: PPUSH
31584: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31588: LD_INT 30
31590: PPUSH
31591: LD_OWVAR 2
31595: PPUSH
31596: LD_INT 2
31598: PPUSH
31599: CALL_OW 322
// end ;
31603: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31604: LD_EXP 90
31608: PUSH
31609: LD_EXP 142
31613: AND
31614: IFFALSE 31735
31616: GO 31618
31618: DISABLE
31619: LD_INT 0
31621: PPUSH
31622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31623: LD_ADDR_VAR 0 2
31627: PUSH
31628: LD_INT 22
31630: PUSH
31631: LD_OWVAR 2
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 21
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 3
31652: PUSH
31653: LD_INT 23
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: LIST
31671: PPUSH
31672: CALL_OW 69
31676: ST_TO_ADDR
// if not tmp then
31677: LD_VAR 0 2
31681: NOT
31682: IFFALSE 31686
// exit ;
31684: GO 31735
// for i in tmp do
31686: LD_ADDR_VAR 0 1
31690: PUSH
31691: LD_VAR 0 2
31695: PUSH
31696: FOR_IN
31697: IFFALSE 31733
// begin if Crawls ( i ) then
31699: LD_VAR 0 1
31703: PPUSH
31704: CALL_OW 318
31708: IFFALSE 31719
// ComWalk ( i ) ;
31710: LD_VAR 0 1
31714: PPUSH
31715: CALL_OW 138
// SetClass ( i , 2 ) ;
31719: LD_VAR 0 1
31723: PPUSH
31724: LD_INT 2
31726: PPUSH
31727: CALL_OW 336
// end ;
31731: GO 31696
31733: POP
31734: POP
// end ;
31735: PPOPN 2
31737: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31738: LD_EXP 90
31742: PUSH
31743: LD_EXP 143
31747: AND
31748: IFFALSE 32029
31750: GO 31752
31752: DISABLE
31753: LD_INT 0
31755: PPUSH
31756: PPUSH
31757: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31758: LD_OWVAR 2
31762: PPUSH
31763: LD_INT 9
31765: PPUSH
31766: LD_INT 1
31768: PPUSH
31769: LD_INT 1
31771: PPUSH
31772: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31776: LD_INT 9
31778: PPUSH
31779: LD_OWVAR 2
31783: PPUSH
31784: CALL_OW 343
// uc_side := 9 ;
31788: LD_ADDR_OWVAR 20
31792: PUSH
31793: LD_INT 9
31795: ST_TO_ADDR
// uc_nation := 2 ;
31796: LD_ADDR_OWVAR 21
31800: PUSH
31801: LD_INT 2
31803: ST_TO_ADDR
// hc_name := Dark Warrior ;
31804: LD_ADDR_OWVAR 26
31808: PUSH
31809: LD_STRING Dark Warrior
31811: ST_TO_ADDR
// hc_gallery :=  ;
31812: LD_ADDR_OWVAR 33
31816: PUSH
31817: LD_STRING 
31819: ST_TO_ADDR
// hc_noskilllimit := true ;
31820: LD_ADDR_OWVAR 76
31824: PUSH
31825: LD_INT 1
31827: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31828: LD_ADDR_OWVAR 31
31832: PUSH
31833: LD_INT 30
31835: PUSH
31836: LD_INT 30
31838: PUSH
31839: LD_INT 30
31841: PUSH
31842: LD_INT 30
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: ST_TO_ADDR
// un := CreateHuman ;
31851: LD_ADDR_VAR 0 3
31855: PUSH
31856: CALL_OW 44
31860: ST_TO_ADDR
// hc_noskilllimit := false ;
31861: LD_ADDR_OWVAR 76
31865: PUSH
31866: LD_INT 0
31868: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31869: LD_VAR 0 3
31873: PPUSH
31874: LD_INT 1
31876: PPUSH
31877: CALL_OW 51
// p := 0 ;
31881: LD_ADDR_VAR 0 2
31885: PUSH
31886: LD_INT 0
31888: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31889: LD_INT 35
31891: PPUSH
31892: CALL_OW 67
// p := p + 1 ;
31896: LD_ADDR_VAR 0 2
31900: PUSH
31901: LD_VAR 0 2
31905: PUSH
31906: LD_INT 1
31908: PLUS
31909: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31910: LD_VAR 0 3
31914: PPUSH
31915: CALL_OW 256
31919: PUSH
31920: LD_INT 1000
31922: LESS
31923: IFFALSE 31937
// SetLives ( un , 1000 ) ;
31925: LD_VAR 0 3
31929: PPUSH
31930: LD_INT 1000
31932: PPUSH
31933: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31937: LD_VAR 0 3
31941: PPUSH
31942: LD_INT 81
31944: PUSH
31945: LD_OWVAR 2
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 91
31956: PUSH
31957: LD_VAR 0 3
31961: PUSH
31962: LD_INT 30
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PPUSH
31974: CALL_OW 69
31978: PPUSH
31979: LD_VAR 0 3
31983: PPUSH
31984: CALL_OW 74
31988: PPUSH
31989: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
31993: LD_VAR 0 2
31997: PUSH
31998: LD_INT 60
32000: GREATER
32001: PUSH
32002: LD_VAR 0 3
32006: PPUSH
32007: CALL_OW 301
32011: OR
32012: IFFALSE 31889
// if un then
32014: LD_VAR 0 3
32018: IFFALSE 32029
// RemoveUnit ( un ) ;
32020: LD_VAR 0 3
32024: PPUSH
32025: CALL_OW 64
// end ;
32029: PPOPN 3
32031: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32032: LD_INT 0
32034: PPUSH
// case cmd of 301 :
32035: LD_VAR 0 1
32039: PUSH
32040: LD_INT 301
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32080
32048: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32049: LD_VAR 0 6
32053: PPUSH
32054: LD_VAR 0 7
32058: PPUSH
32059: LD_VAR 0 8
32063: PPUSH
32064: LD_VAR 0 4
32068: PPUSH
32069: LD_VAR 0 5
32073: PPUSH
32074: CALL 33281 0 5
32078: GO 32201
32080: LD_INT 302
32082: DOUBLE
32083: EQUAL
32084: IFTRUE 32088
32086: GO 32125
32088: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32089: LD_VAR 0 6
32093: PPUSH
32094: LD_VAR 0 7
32098: PPUSH
32099: LD_VAR 0 8
32103: PPUSH
32104: LD_VAR 0 9
32108: PPUSH
32109: LD_VAR 0 4
32113: PPUSH
32114: LD_VAR 0 5
32118: PPUSH
32119: CALL 33372 0 6
32123: GO 32201
32125: LD_INT 303
32127: DOUBLE
32128: EQUAL
32129: IFTRUE 32133
32131: GO 32170
32133: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32134: LD_VAR 0 6
32138: PPUSH
32139: LD_VAR 0 7
32143: PPUSH
32144: LD_VAR 0 8
32148: PPUSH
32149: LD_VAR 0 9
32153: PPUSH
32154: LD_VAR 0 4
32158: PPUSH
32159: LD_VAR 0 5
32163: PPUSH
32164: CALL 32206 0 6
32168: GO 32201
32170: LD_INT 304
32172: DOUBLE
32173: EQUAL
32174: IFTRUE 32178
32176: GO 32200
32178: POP
// hHackTeleport ( unit , x , y ) ; end ;
32179: LD_VAR 0 2
32183: PPUSH
32184: LD_VAR 0 4
32188: PPUSH
32189: LD_VAR 0 5
32193: PPUSH
32194: CALL 33965 0 3
32198: GO 32201
32200: POP
// end ;
32201: LD_VAR 0 12
32205: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32206: LD_INT 0
32208: PPUSH
32209: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32210: LD_VAR 0 1
32214: PUSH
32215: LD_INT 1
32217: LESS
32218: PUSH
32219: LD_VAR 0 1
32223: PUSH
32224: LD_INT 3
32226: GREATER
32227: OR
32228: PUSH
32229: LD_VAR 0 5
32233: PPUSH
32234: LD_VAR 0 6
32238: PPUSH
32239: CALL_OW 428
32243: OR
32244: IFFALSE 32248
// exit ;
32246: GO 32968
// uc_side := your_side ;
32248: LD_ADDR_OWVAR 20
32252: PUSH
32253: LD_OWVAR 2
32257: ST_TO_ADDR
// uc_nation := nation ;
32258: LD_ADDR_OWVAR 21
32262: PUSH
32263: LD_VAR 0 1
32267: ST_TO_ADDR
// bc_level = 1 ;
32268: LD_ADDR_OWVAR 43
32272: PUSH
32273: LD_INT 1
32275: ST_TO_ADDR
// case btype of 1 :
32276: LD_VAR 0 2
32280: PUSH
32281: LD_INT 1
32283: DOUBLE
32284: EQUAL
32285: IFTRUE 32289
32287: GO 32300
32289: POP
// bc_type := b_depot ; 2 :
32290: LD_ADDR_OWVAR 42
32294: PUSH
32295: LD_INT 0
32297: ST_TO_ADDR
32298: GO 32912
32300: LD_INT 2
32302: DOUBLE
32303: EQUAL
32304: IFTRUE 32308
32306: GO 32319
32308: POP
// bc_type := b_warehouse ; 3 :
32309: LD_ADDR_OWVAR 42
32313: PUSH
32314: LD_INT 1
32316: ST_TO_ADDR
32317: GO 32912
32319: LD_INT 3
32321: DOUBLE
32322: EQUAL
32323: IFTRUE 32327
32325: GO 32338
32327: POP
// bc_type := b_lab ; 4 .. 9 :
32328: LD_ADDR_OWVAR 42
32332: PUSH
32333: LD_INT 6
32335: ST_TO_ADDR
32336: GO 32912
32338: LD_INT 4
32340: DOUBLE
32341: GREATEREQUAL
32342: IFFALSE 32350
32344: LD_INT 9
32346: DOUBLE
32347: LESSEQUAL
32348: IFTRUE 32352
32350: GO 32404
32352: POP
// begin bc_type := b_lab_half ;
32353: LD_ADDR_OWVAR 42
32357: PUSH
32358: LD_INT 7
32360: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32361: LD_ADDR_OWVAR 44
32365: PUSH
32366: LD_INT 10
32368: PUSH
32369: LD_INT 11
32371: PUSH
32372: LD_INT 12
32374: PUSH
32375: LD_INT 15
32377: PUSH
32378: LD_INT 14
32380: PUSH
32381: LD_INT 13
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: PUSH
32392: LD_VAR 0 2
32396: PUSH
32397: LD_INT 3
32399: MINUS
32400: ARRAY
32401: ST_TO_ADDR
// end ; 10 .. 13 :
32402: GO 32912
32404: LD_INT 10
32406: DOUBLE
32407: GREATEREQUAL
32408: IFFALSE 32416
32410: LD_INT 13
32412: DOUBLE
32413: LESSEQUAL
32414: IFTRUE 32418
32416: GO 32495
32418: POP
// begin bc_type := b_lab_full ;
32419: LD_ADDR_OWVAR 42
32423: PUSH
32424: LD_INT 8
32426: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32427: LD_ADDR_OWVAR 44
32431: PUSH
32432: LD_INT 10
32434: PUSH
32435: LD_INT 12
32437: PUSH
32438: LD_INT 14
32440: PUSH
32441: LD_INT 13
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: PUSH
32450: LD_VAR 0 2
32454: PUSH
32455: LD_INT 9
32457: MINUS
32458: ARRAY
32459: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32460: LD_ADDR_OWVAR 45
32464: PUSH
32465: LD_INT 11
32467: PUSH
32468: LD_INT 15
32470: PUSH
32471: LD_INT 12
32473: PUSH
32474: LD_INT 15
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: PUSH
32483: LD_VAR 0 2
32487: PUSH
32488: LD_INT 9
32490: MINUS
32491: ARRAY
32492: ST_TO_ADDR
// end ; 14 :
32493: GO 32912
32495: LD_INT 14
32497: DOUBLE
32498: EQUAL
32499: IFTRUE 32503
32501: GO 32514
32503: POP
// bc_type := b_workshop ; 15 :
32504: LD_ADDR_OWVAR 42
32508: PUSH
32509: LD_INT 2
32511: ST_TO_ADDR
32512: GO 32912
32514: LD_INT 15
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32522
32520: GO 32533
32522: POP
// bc_type := b_factory ; 16 :
32523: LD_ADDR_OWVAR 42
32527: PUSH
32528: LD_INT 3
32530: ST_TO_ADDR
32531: GO 32912
32533: LD_INT 16
32535: DOUBLE
32536: EQUAL
32537: IFTRUE 32541
32539: GO 32552
32541: POP
// bc_type := b_ext_gun ; 17 :
32542: LD_ADDR_OWVAR 42
32546: PUSH
32547: LD_INT 17
32549: ST_TO_ADDR
32550: GO 32912
32552: LD_INT 17
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32588
32560: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32561: LD_ADDR_OWVAR 42
32565: PUSH
32566: LD_INT 19
32568: PUSH
32569: LD_INT 23
32571: PUSH
32572: LD_INT 19
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: LIST
32579: PUSH
32580: LD_VAR 0 1
32584: ARRAY
32585: ST_TO_ADDR
32586: GO 32912
32588: LD_INT 18
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32596
32594: GO 32607
32596: POP
// bc_type := b_ext_radar ; 19 :
32597: LD_ADDR_OWVAR 42
32601: PUSH
32602: LD_INT 20
32604: ST_TO_ADDR
32605: GO 32912
32607: LD_INT 19
32609: DOUBLE
32610: EQUAL
32611: IFTRUE 32615
32613: GO 32626
32615: POP
// bc_type := b_ext_radio ; 20 :
32616: LD_ADDR_OWVAR 42
32620: PUSH
32621: LD_INT 22
32623: ST_TO_ADDR
32624: GO 32912
32626: LD_INT 20
32628: DOUBLE
32629: EQUAL
32630: IFTRUE 32634
32632: GO 32645
32634: POP
// bc_type := b_ext_siberium ; 21 :
32635: LD_ADDR_OWVAR 42
32639: PUSH
32640: LD_INT 21
32642: ST_TO_ADDR
32643: GO 32912
32645: LD_INT 21
32647: DOUBLE
32648: EQUAL
32649: IFTRUE 32653
32651: GO 32664
32653: POP
// bc_type := b_ext_computer ; 22 :
32654: LD_ADDR_OWVAR 42
32658: PUSH
32659: LD_INT 24
32661: ST_TO_ADDR
32662: GO 32912
32664: LD_INT 22
32666: DOUBLE
32667: EQUAL
32668: IFTRUE 32672
32670: GO 32683
32672: POP
// bc_type := b_ext_track ; 23 :
32673: LD_ADDR_OWVAR 42
32677: PUSH
32678: LD_INT 16
32680: ST_TO_ADDR
32681: GO 32912
32683: LD_INT 23
32685: DOUBLE
32686: EQUAL
32687: IFTRUE 32691
32689: GO 32702
32691: POP
// bc_type := b_ext_laser ; 24 :
32692: LD_ADDR_OWVAR 42
32696: PUSH
32697: LD_INT 25
32699: ST_TO_ADDR
32700: GO 32912
32702: LD_INT 24
32704: DOUBLE
32705: EQUAL
32706: IFTRUE 32710
32708: GO 32721
32710: POP
// bc_type := b_control_tower ; 25 :
32711: LD_ADDR_OWVAR 42
32715: PUSH
32716: LD_INT 36
32718: ST_TO_ADDR
32719: GO 32912
32721: LD_INT 25
32723: DOUBLE
32724: EQUAL
32725: IFTRUE 32729
32727: GO 32740
32729: POP
// bc_type := b_breastwork ; 26 :
32730: LD_ADDR_OWVAR 42
32734: PUSH
32735: LD_INT 31
32737: ST_TO_ADDR
32738: GO 32912
32740: LD_INT 26
32742: DOUBLE
32743: EQUAL
32744: IFTRUE 32748
32746: GO 32759
32748: POP
// bc_type := b_bunker ; 27 :
32749: LD_ADDR_OWVAR 42
32753: PUSH
32754: LD_INT 32
32756: ST_TO_ADDR
32757: GO 32912
32759: LD_INT 27
32761: DOUBLE
32762: EQUAL
32763: IFTRUE 32767
32765: GO 32778
32767: POP
// bc_type := b_turret ; 28 :
32768: LD_ADDR_OWVAR 42
32772: PUSH
32773: LD_INT 33
32775: ST_TO_ADDR
32776: GO 32912
32778: LD_INT 28
32780: DOUBLE
32781: EQUAL
32782: IFTRUE 32786
32784: GO 32797
32786: POP
// bc_type := b_armoury ; 29 :
32787: LD_ADDR_OWVAR 42
32791: PUSH
32792: LD_INT 4
32794: ST_TO_ADDR
32795: GO 32912
32797: LD_INT 29
32799: DOUBLE
32800: EQUAL
32801: IFTRUE 32805
32803: GO 32816
32805: POP
// bc_type := b_barracks ; 30 :
32806: LD_ADDR_OWVAR 42
32810: PUSH
32811: LD_INT 5
32813: ST_TO_ADDR
32814: GO 32912
32816: LD_INT 30
32818: DOUBLE
32819: EQUAL
32820: IFTRUE 32824
32822: GO 32835
32824: POP
// bc_type := b_solar_power ; 31 :
32825: LD_ADDR_OWVAR 42
32829: PUSH
32830: LD_INT 27
32832: ST_TO_ADDR
32833: GO 32912
32835: LD_INT 31
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32843
32841: GO 32854
32843: POP
// bc_type := b_oil_power ; 32 :
32844: LD_ADDR_OWVAR 42
32848: PUSH
32849: LD_INT 26
32851: ST_TO_ADDR
32852: GO 32912
32854: LD_INT 32
32856: DOUBLE
32857: EQUAL
32858: IFTRUE 32862
32860: GO 32873
32862: POP
// bc_type := b_siberite_power ; 33 :
32863: LD_ADDR_OWVAR 42
32867: PUSH
32868: LD_INT 28
32870: ST_TO_ADDR
32871: GO 32912
32873: LD_INT 33
32875: DOUBLE
32876: EQUAL
32877: IFTRUE 32881
32879: GO 32892
32881: POP
// bc_type := b_oil_mine ; 34 :
32882: LD_ADDR_OWVAR 42
32886: PUSH
32887: LD_INT 29
32889: ST_TO_ADDR
32890: GO 32912
32892: LD_INT 34
32894: DOUBLE
32895: EQUAL
32896: IFTRUE 32900
32898: GO 32911
32900: POP
// bc_type := b_siberite_mine ; end ;
32901: LD_ADDR_OWVAR 42
32905: PUSH
32906: LD_INT 30
32908: ST_TO_ADDR
32909: GO 32912
32911: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32912: LD_ADDR_VAR 0 8
32916: PUSH
32917: LD_VAR 0 5
32921: PPUSH
32922: LD_VAR 0 6
32926: PPUSH
32927: LD_VAR 0 3
32931: PPUSH
32932: CALL_OW 47
32936: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32937: LD_OWVAR 42
32941: PUSH
32942: LD_INT 32
32944: PUSH
32945: LD_INT 33
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: IN
32952: IFFALSE 32968
// PlaceWeaponTurret ( b , weapon ) ;
32954: LD_VAR 0 8
32958: PPUSH
32959: LD_VAR 0 4
32963: PPUSH
32964: CALL_OW 431
// end ;
32968: LD_VAR 0 7
32972: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32973: LD_INT 0
32975: PPUSH
32976: PPUSH
32977: PPUSH
32978: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32979: LD_ADDR_VAR 0 4
32983: PUSH
32984: LD_INT 22
32986: PUSH
32987: LD_OWVAR 2
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: LD_INT 30
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 30
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PPUSH
33028: CALL_OW 69
33032: ST_TO_ADDR
// if not tmp then
33033: LD_VAR 0 4
33037: NOT
33038: IFFALSE 33042
// exit ;
33040: GO 33101
// for i in tmp do
33042: LD_ADDR_VAR 0 2
33046: PUSH
33047: LD_VAR 0 4
33051: PUSH
33052: FOR_IN
33053: IFFALSE 33099
// for j = 1 to 3 do
33055: LD_ADDR_VAR 0 3
33059: PUSH
33060: DOUBLE
33061: LD_INT 1
33063: DEC
33064: ST_TO_ADDR
33065: LD_INT 3
33067: PUSH
33068: FOR_TO
33069: IFFALSE 33095
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33071: LD_VAR 0 2
33075: PPUSH
33076: CALL_OW 274
33080: PPUSH
33081: LD_VAR 0 3
33085: PPUSH
33086: LD_INT 99999
33088: PPUSH
33089: CALL_OW 277
33093: GO 33068
33095: POP
33096: POP
33097: GO 33052
33099: POP
33100: POP
// end ;
33101: LD_VAR 0 1
33105: RET
// export function hHackSetLevel10 ; var i , j ; begin
33106: LD_INT 0
33108: PPUSH
33109: PPUSH
33110: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33111: LD_ADDR_VAR 0 2
33115: PUSH
33116: LD_INT 21
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PPUSH
33126: CALL_OW 69
33130: PUSH
33131: FOR_IN
33132: IFFALSE 33184
// if IsSelected ( i ) then
33134: LD_VAR 0 2
33138: PPUSH
33139: CALL_OW 306
33143: IFFALSE 33182
// begin for j := 1 to 4 do
33145: LD_ADDR_VAR 0 3
33149: PUSH
33150: DOUBLE
33151: LD_INT 1
33153: DEC
33154: ST_TO_ADDR
33155: LD_INT 4
33157: PUSH
33158: FOR_TO
33159: IFFALSE 33180
// SetSkill ( i , j , 10 ) ;
33161: LD_VAR 0 2
33165: PPUSH
33166: LD_VAR 0 3
33170: PPUSH
33171: LD_INT 10
33173: PPUSH
33174: CALL_OW 237
33178: GO 33158
33180: POP
33181: POP
// end ;
33182: GO 33131
33184: POP
33185: POP
// end ;
33186: LD_VAR 0 1
33190: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33191: LD_INT 0
33193: PPUSH
33194: PPUSH
33195: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33196: LD_ADDR_VAR 0 2
33200: PUSH
33201: LD_INT 22
33203: PUSH
33204: LD_OWVAR 2
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 21
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PPUSH
33227: CALL_OW 69
33231: PUSH
33232: FOR_IN
33233: IFFALSE 33274
// begin for j := 1 to 4 do
33235: LD_ADDR_VAR 0 3
33239: PUSH
33240: DOUBLE
33241: LD_INT 1
33243: DEC
33244: ST_TO_ADDR
33245: LD_INT 4
33247: PUSH
33248: FOR_TO
33249: IFFALSE 33270
// SetSkill ( i , j , 10 ) ;
33251: LD_VAR 0 2
33255: PPUSH
33256: LD_VAR 0 3
33260: PPUSH
33261: LD_INT 10
33263: PPUSH
33264: CALL_OW 237
33268: GO 33248
33270: POP
33271: POP
// end ;
33272: GO 33232
33274: POP
33275: POP
// end ;
33276: LD_VAR 0 1
33280: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33281: LD_INT 0
33283: PPUSH
// uc_side := your_side ;
33284: LD_ADDR_OWVAR 20
33288: PUSH
33289: LD_OWVAR 2
33293: ST_TO_ADDR
// uc_nation := nation ;
33294: LD_ADDR_OWVAR 21
33298: PUSH
33299: LD_VAR 0 1
33303: ST_TO_ADDR
// InitHc ;
33304: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33308: LD_INT 0
33310: PPUSH
33311: LD_VAR 0 2
33315: PPUSH
33316: LD_VAR 0 3
33320: PPUSH
33321: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33325: LD_VAR 0 4
33329: PPUSH
33330: LD_VAR 0 5
33334: PPUSH
33335: CALL_OW 428
33339: PUSH
33340: LD_INT 0
33342: EQUAL
33343: IFFALSE 33367
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33345: CALL_OW 44
33349: PPUSH
33350: LD_VAR 0 4
33354: PPUSH
33355: LD_VAR 0 5
33359: PPUSH
33360: LD_INT 1
33362: PPUSH
33363: CALL_OW 48
// end ;
33367: LD_VAR 0 6
33371: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33372: LD_INT 0
33374: PPUSH
33375: PPUSH
// uc_side := your_side ;
33376: LD_ADDR_OWVAR 20
33380: PUSH
33381: LD_OWVAR 2
33385: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33386: LD_VAR 0 1
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: LD_INT 4
33402: PUSH
33403: LD_INT 5
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: IN
33413: IFFALSE 33425
// uc_nation := nation_american else
33415: LD_ADDR_OWVAR 21
33419: PUSH
33420: LD_INT 1
33422: ST_TO_ADDR
33423: GO 33468
// if chassis in [ 11 , 12 , 13 , 14 ] then
33425: LD_VAR 0 1
33429: PUSH
33430: LD_INT 11
33432: PUSH
33433: LD_INT 12
33435: PUSH
33436: LD_INT 13
33438: PUSH
33439: LD_INT 14
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: IN
33448: IFFALSE 33460
// uc_nation := nation_arabian else
33450: LD_ADDR_OWVAR 21
33454: PUSH
33455: LD_INT 2
33457: ST_TO_ADDR
33458: GO 33468
// uc_nation := nation_russian ;
33460: LD_ADDR_OWVAR 21
33464: PUSH
33465: LD_INT 3
33467: ST_TO_ADDR
// vc_chassis := chassis ;
33468: LD_ADDR_OWVAR 37
33472: PUSH
33473: LD_VAR 0 1
33477: ST_TO_ADDR
// vc_engine := engine ;
33478: LD_ADDR_OWVAR 39
33482: PUSH
33483: LD_VAR 0 2
33487: ST_TO_ADDR
// vc_control := control ;
33488: LD_ADDR_OWVAR 38
33492: PUSH
33493: LD_VAR 0 3
33497: ST_TO_ADDR
// vc_weapon := weapon ;
33498: LD_ADDR_OWVAR 40
33502: PUSH
33503: LD_VAR 0 4
33507: ST_TO_ADDR
// un := CreateVehicle ;
33508: LD_ADDR_VAR 0 8
33512: PUSH
33513: CALL_OW 45
33517: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33518: LD_VAR 0 8
33522: PPUSH
33523: LD_INT 0
33525: PPUSH
33526: LD_INT 5
33528: PPUSH
33529: CALL_OW 12
33533: PPUSH
33534: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33538: LD_VAR 0 8
33542: PPUSH
33543: LD_VAR 0 5
33547: PPUSH
33548: LD_VAR 0 6
33552: PPUSH
33553: LD_INT 1
33555: PPUSH
33556: CALL_OW 48
// end ;
33560: LD_VAR 0 7
33564: RET
// export hInvincible ; every 1 do
33565: GO 33567
33567: DISABLE
// hInvincible := [ ] ;
33568: LD_ADDR_EXP 144
33572: PUSH
33573: EMPTY
33574: ST_TO_ADDR
33575: END
// every 10 do var i ;
33576: GO 33578
33578: DISABLE
33579: LD_INT 0
33581: PPUSH
// begin enable ;
33582: ENABLE
// if not hInvincible then
33583: LD_EXP 144
33587: NOT
33588: IFFALSE 33592
// exit ;
33590: GO 33636
// for i in hInvincible do
33592: LD_ADDR_VAR 0 1
33596: PUSH
33597: LD_EXP 144
33601: PUSH
33602: FOR_IN
33603: IFFALSE 33634
// if GetLives ( i ) < 1000 then
33605: LD_VAR 0 1
33609: PPUSH
33610: CALL_OW 256
33614: PUSH
33615: LD_INT 1000
33617: LESS
33618: IFFALSE 33632
// SetLives ( i , 1000 ) ;
33620: LD_VAR 0 1
33624: PPUSH
33625: LD_INT 1000
33627: PPUSH
33628: CALL_OW 234
33632: GO 33602
33634: POP
33635: POP
// end ;
33636: PPOPN 1
33638: END
// export function hHackInvincible ; var i ; begin
33639: LD_INT 0
33641: PPUSH
33642: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33643: LD_ADDR_VAR 0 2
33647: PUSH
33648: LD_INT 2
33650: PUSH
33651: LD_INT 21
33653: PUSH
33654: LD_INT 1
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 21
33663: PUSH
33664: LD_INT 2
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: PPUSH
33676: CALL_OW 69
33680: PUSH
33681: FOR_IN
33682: IFFALSE 33743
// if IsSelected ( i ) then
33684: LD_VAR 0 2
33688: PPUSH
33689: CALL_OW 306
33693: IFFALSE 33741
// begin if i in hInvincible then
33695: LD_VAR 0 2
33699: PUSH
33700: LD_EXP 144
33704: IN
33705: IFFALSE 33725
// hInvincible := hInvincible diff i else
33707: LD_ADDR_EXP 144
33711: PUSH
33712: LD_EXP 144
33716: PUSH
33717: LD_VAR 0 2
33721: DIFF
33722: ST_TO_ADDR
33723: GO 33741
// hInvincible := hInvincible union i ;
33725: LD_ADDR_EXP 144
33729: PUSH
33730: LD_EXP 144
33734: PUSH
33735: LD_VAR 0 2
33739: UNION
33740: ST_TO_ADDR
// end ;
33741: GO 33681
33743: POP
33744: POP
// end ;
33745: LD_VAR 0 1
33749: RET
// export function hHackInvisible ; var i , j ; begin
33750: LD_INT 0
33752: PPUSH
33753: PPUSH
33754: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33755: LD_ADDR_VAR 0 2
33759: PUSH
33760: LD_INT 21
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PPUSH
33770: CALL_OW 69
33774: PUSH
33775: FOR_IN
33776: IFFALSE 33800
// if IsSelected ( i ) then
33778: LD_VAR 0 2
33782: PPUSH
33783: CALL_OW 306
33787: IFFALSE 33798
// ComForceInvisible ( i ) ;
33789: LD_VAR 0 2
33793: PPUSH
33794: CALL_OW 496
33798: GO 33775
33800: POP
33801: POP
// end ;
33802: LD_VAR 0 1
33806: RET
// export function hHackChangeYourSide ; begin
33807: LD_INT 0
33809: PPUSH
// if your_side = 8 then
33810: LD_OWVAR 2
33814: PUSH
33815: LD_INT 8
33817: EQUAL
33818: IFFALSE 33830
// your_side := 0 else
33820: LD_ADDR_OWVAR 2
33824: PUSH
33825: LD_INT 0
33827: ST_TO_ADDR
33828: GO 33844
// your_side := your_side + 1 ;
33830: LD_ADDR_OWVAR 2
33834: PUSH
33835: LD_OWVAR 2
33839: PUSH
33840: LD_INT 1
33842: PLUS
33843: ST_TO_ADDR
// end ;
33844: LD_VAR 0 1
33848: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33849: LD_INT 0
33851: PPUSH
33852: PPUSH
33853: PPUSH
// for i in all_units do
33854: LD_ADDR_VAR 0 2
33858: PUSH
33859: LD_OWVAR 3
33863: PUSH
33864: FOR_IN
33865: IFFALSE 33943
// if IsSelected ( i ) then
33867: LD_VAR 0 2
33871: PPUSH
33872: CALL_OW 306
33876: IFFALSE 33941
// begin j := GetSide ( i ) ;
33878: LD_ADDR_VAR 0 3
33882: PUSH
33883: LD_VAR 0 2
33887: PPUSH
33888: CALL_OW 255
33892: ST_TO_ADDR
// if j = 8 then
33893: LD_VAR 0 3
33897: PUSH
33898: LD_INT 8
33900: EQUAL
33901: IFFALSE 33913
// j := 0 else
33903: LD_ADDR_VAR 0 3
33907: PUSH
33908: LD_INT 0
33910: ST_TO_ADDR
33911: GO 33927
// j := j + 1 ;
33913: LD_ADDR_VAR 0 3
33917: PUSH
33918: LD_VAR 0 3
33922: PUSH
33923: LD_INT 1
33925: PLUS
33926: ST_TO_ADDR
// SetSide ( i , j ) ;
33927: LD_VAR 0 2
33931: PPUSH
33932: LD_VAR 0 3
33936: PPUSH
33937: CALL_OW 235
// end ;
33941: GO 33864
33943: POP
33944: POP
// end ;
33945: LD_VAR 0 1
33949: RET
// export function hHackFog ; begin
33950: LD_INT 0
33952: PPUSH
// FogOff ( true ) ;
33953: LD_INT 1
33955: PPUSH
33956: CALL_OW 344
// end ;
33960: LD_VAR 0 1
33964: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33965: LD_INT 0
33967: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33968: LD_VAR 0 1
33972: PPUSH
33973: LD_VAR 0 2
33977: PPUSH
33978: LD_VAR 0 3
33982: PPUSH
33983: LD_INT 1
33985: PPUSH
33986: LD_INT 1
33988: PPUSH
33989: CALL_OW 483
// CenterOnXY ( x , y ) ;
33993: LD_VAR 0 2
33997: PPUSH
33998: LD_VAR 0 3
34002: PPUSH
34003: CALL_OW 84
// end ; end_of_file
34007: LD_VAR 0 4
34011: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34012: LD_INT 0
34014: PPUSH
34015: PPUSH
34016: PPUSH
34017: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34018: LD_VAR 0 1
34022: PPUSH
34023: CALL_OW 264
34027: PUSH
34028: LD_EXP 161
34032: EQUAL
34033: IFFALSE 34105
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34035: LD_INT 68
34037: PPUSH
34038: LD_VAR 0 1
34042: PPUSH
34043: CALL_OW 255
34047: PPUSH
34048: CALL_OW 321
34052: PUSH
34053: LD_INT 2
34055: EQUAL
34056: IFFALSE 34068
// eff := 70 else
34058: LD_ADDR_VAR 0 4
34062: PUSH
34063: LD_INT 70
34065: ST_TO_ADDR
34066: GO 34076
// eff := 30 ;
34068: LD_ADDR_VAR 0 4
34072: PUSH
34073: LD_INT 30
34075: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34076: LD_VAR 0 1
34080: PPUSH
34081: CALL_OW 250
34085: PPUSH
34086: LD_VAR 0 1
34090: PPUSH
34091: CALL_OW 251
34095: PPUSH
34096: LD_VAR 0 4
34100: PPUSH
34101: CALL_OW 495
// end ; end ;
34105: LD_VAR 0 2
34109: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34110: LD_INT 0
34112: PPUSH
// end ;
34113: LD_VAR 0 4
34117: RET
// export function SOS_Command ( cmd ) ; begin
34118: LD_INT 0
34120: PPUSH
// end ;
34121: LD_VAR 0 2
34125: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34126: LD_INT 0
34128: PPUSH
// if cmd = 121 then
34129: LD_VAR 0 1
34133: PUSH
34134: LD_INT 121
34136: EQUAL
34137: IFFALSE 34139
// end ;
34139: LD_VAR 0 6
34143: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34144: LD_INT 0
34146: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34147: LD_VAR 0 1
34151: PUSH
34152: LD_INT 250
34154: EQUAL
34155: PUSH
34156: LD_VAR 0 2
34160: PPUSH
34161: CALL_OW 264
34165: PUSH
34166: LD_EXP 164
34170: EQUAL
34171: AND
34172: IFFALSE 34193
// MinerPlaceMine ( unit , x , y ) ;
34174: LD_VAR 0 2
34178: PPUSH
34179: LD_VAR 0 4
34183: PPUSH
34184: LD_VAR 0 5
34188: PPUSH
34189: CALL 36542 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34193: LD_VAR 0 1
34197: PUSH
34198: LD_INT 251
34200: EQUAL
34201: PUSH
34202: LD_VAR 0 2
34206: PPUSH
34207: CALL_OW 264
34211: PUSH
34212: LD_EXP 164
34216: EQUAL
34217: AND
34218: IFFALSE 34239
// MinerDetonateMine ( unit , x , y ) ;
34220: LD_VAR 0 2
34224: PPUSH
34225: LD_VAR 0 4
34229: PPUSH
34230: LD_VAR 0 5
34234: PPUSH
34235: CALL 36819 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34239: LD_VAR 0 1
34243: PUSH
34244: LD_INT 252
34246: EQUAL
34247: PUSH
34248: LD_VAR 0 2
34252: PPUSH
34253: CALL_OW 264
34257: PUSH
34258: LD_EXP 164
34262: EQUAL
34263: AND
34264: IFFALSE 34285
// MinerCreateMinefield ( unit , x , y ) ;
34266: LD_VAR 0 2
34270: PPUSH
34271: LD_VAR 0 4
34275: PPUSH
34276: LD_VAR 0 5
34280: PPUSH
34281: CALL 37236 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34285: LD_VAR 0 1
34289: PUSH
34290: LD_INT 253
34292: EQUAL
34293: PUSH
34294: LD_VAR 0 2
34298: PPUSH
34299: CALL_OW 257
34303: PUSH
34304: LD_INT 5
34306: EQUAL
34307: AND
34308: IFFALSE 34329
// ComBinocular ( unit , x , y ) ;
34310: LD_VAR 0 2
34314: PPUSH
34315: LD_VAR 0 4
34319: PPUSH
34320: LD_VAR 0 5
34324: PPUSH
34325: CALL 37607 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34329: LD_VAR 0 1
34333: PUSH
34334: LD_INT 254
34336: EQUAL
34337: PUSH
34338: LD_VAR 0 2
34342: PPUSH
34343: CALL_OW 264
34347: PUSH
34348: LD_EXP 159
34352: EQUAL
34353: AND
34354: PUSH
34355: LD_VAR 0 3
34359: PPUSH
34360: CALL_OW 263
34364: PUSH
34365: LD_INT 3
34367: EQUAL
34368: AND
34369: IFFALSE 34385
// HackDestroyVehicle ( unit , selectedUnit ) ;
34371: LD_VAR 0 2
34375: PPUSH
34376: LD_VAR 0 3
34380: PPUSH
34381: CALL 35902 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34385: LD_VAR 0 1
34389: PUSH
34390: LD_INT 255
34392: EQUAL
34393: PUSH
34394: LD_VAR 0 2
34398: PPUSH
34399: CALL_OW 264
34403: PUSH
34404: LD_INT 14
34406: PUSH
34407: LD_INT 53
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: IN
34414: AND
34415: PUSH
34416: LD_VAR 0 4
34420: PPUSH
34421: LD_VAR 0 5
34425: PPUSH
34426: CALL_OW 488
34430: AND
34431: IFFALSE 34455
// CutTreeXYR ( unit , x , y , 12 ) ;
34433: LD_VAR 0 2
34437: PPUSH
34438: LD_VAR 0 4
34442: PPUSH
34443: LD_VAR 0 5
34447: PPUSH
34448: LD_INT 12
34450: PPUSH
34451: CALL 34468 0 4
// end ;
34455: LD_VAR 0 6
34459: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
34460: LD_INT 0
34462: PPUSH
// end ;
34463: LD_VAR 0 4
34467: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34468: LD_INT 0
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
34475: PPUSH
34476: PPUSH
34477: PPUSH
34478: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34479: LD_VAR 0 1
34483: NOT
34484: PUSH
34485: LD_VAR 0 2
34489: PPUSH
34490: LD_VAR 0 3
34494: PPUSH
34495: CALL_OW 488
34499: NOT
34500: OR
34501: PUSH
34502: LD_VAR 0 4
34506: NOT
34507: OR
34508: IFFALSE 34512
// exit ;
34510: GO 34852
// list := [ ] ;
34512: LD_ADDR_VAR 0 13
34516: PUSH
34517: EMPTY
34518: ST_TO_ADDR
// if x - r < 0 then
34519: LD_VAR 0 2
34523: PUSH
34524: LD_VAR 0 4
34528: MINUS
34529: PUSH
34530: LD_INT 0
34532: LESS
34533: IFFALSE 34545
// min_x := 0 else
34535: LD_ADDR_VAR 0 7
34539: PUSH
34540: LD_INT 0
34542: ST_TO_ADDR
34543: GO 34561
// min_x := x - r ;
34545: LD_ADDR_VAR 0 7
34549: PUSH
34550: LD_VAR 0 2
34554: PUSH
34555: LD_VAR 0 4
34559: MINUS
34560: ST_TO_ADDR
// if y - r < 0 then
34561: LD_VAR 0 3
34565: PUSH
34566: LD_VAR 0 4
34570: MINUS
34571: PUSH
34572: LD_INT 0
34574: LESS
34575: IFFALSE 34587
// min_y := 0 else
34577: LD_ADDR_VAR 0 8
34581: PUSH
34582: LD_INT 0
34584: ST_TO_ADDR
34585: GO 34603
// min_y := y - r ;
34587: LD_ADDR_VAR 0 8
34591: PUSH
34592: LD_VAR 0 3
34596: PUSH
34597: LD_VAR 0 4
34601: MINUS
34602: ST_TO_ADDR
// max_x := x + r ;
34603: LD_ADDR_VAR 0 9
34607: PUSH
34608: LD_VAR 0 2
34612: PUSH
34613: LD_VAR 0 4
34617: PLUS
34618: ST_TO_ADDR
// max_y := y + r ;
34619: LD_ADDR_VAR 0 10
34623: PUSH
34624: LD_VAR 0 3
34628: PUSH
34629: LD_VAR 0 4
34633: PLUS
34634: ST_TO_ADDR
// for _x = min_x to max_x do
34635: LD_ADDR_VAR 0 11
34639: PUSH
34640: DOUBLE
34641: LD_VAR 0 7
34645: DEC
34646: ST_TO_ADDR
34647: LD_VAR 0 9
34651: PUSH
34652: FOR_TO
34653: IFFALSE 34770
// for _y = min_y to max_y do
34655: LD_ADDR_VAR 0 12
34659: PUSH
34660: DOUBLE
34661: LD_VAR 0 8
34665: DEC
34666: ST_TO_ADDR
34667: LD_VAR 0 10
34671: PUSH
34672: FOR_TO
34673: IFFALSE 34766
// begin if not ValidHex ( _x , _y ) then
34675: LD_VAR 0 11
34679: PPUSH
34680: LD_VAR 0 12
34684: PPUSH
34685: CALL_OW 488
34689: NOT
34690: IFFALSE 34694
// continue ;
34692: GO 34672
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34694: LD_VAR 0 11
34698: PPUSH
34699: LD_VAR 0 12
34703: PPUSH
34704: CALL_OW 351
34708: PUSH
34709: LD_VAR 0 11
34713: PPUSH
34714: LD_VAR 0 12
34718: PPUSH
34719: CALL_OW 554
34723: AND
34724: IFFALSE 34764
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34726: LD_ADDR_VAR 0 13
34730: PUSH
34731: LD_VAR 0 13
34735: PPUSH
34736: LD_VAR 0 13
34740: PUSH
34741: LD_INT 1
34743: PLUS
34744: PPUSH
34745: LD_VAR 0 11
34749: PUSH
34750: LD_VAR 0 12
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PPUSH
34759: CALL_OW 2
34763: ST_TO_ADDR
// end ;
34764: GO 34672
34766: POP
34767: POP
34768: GO 34652
34770: POP
34771: POP
// if not list then
34772: LD_VAR 0 13
34776: NOT
34777: IFFALSE 34781
// exit ;
34779: GO 34852
// for i in list do
34781: LD_ADDR_VAR 0 6
34785: PUSH
34786: LD_VAR 0 13
34790: PUSH
34791: FOR_IN
34792: IFFALSE 34850
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34794: LD_VAR 0 1
34798: PPUSH
34799: LD_STRING M
34801: PUSH
34802: LD_VAR 0 6
34806: PUSH
34807: LD_INT 1
34809: ARRAY
34810: PUSH
34811: LD_VAR 0 6
34815: PUSH
34816: LD_INT 2
34818: ARRAY
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: PUSH
34841: EMPTY
34842: LIST
34843: PPUSH
34844: CALL_OW 447
34848: GO 34791
34850: POP
34851: POP
// end ;
34852: LD_VAR 0 5
34856: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34857: LD_EXP 147
34861: NOT
34862: IFFALSE 34912
34864: GO 34866
34866: DISABLE
// begin initHack := true ;
34867: LD_ADDR_EXP 147
34871: PUSH
34872: LD_INT 1
34874: ST_TO_ADDR
// hackTanks := [ ] ;
34875: LD_ADDR_EXP 148
34879: PUSH
34880: EMPTY
34881: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34882: LD_ADDR_EXP 149
34886: PUSH
34887: EMPTY
34888: ST_TO_ADDR
// hackLimit := 3 ;
34889: LD_ADDR_EXP 150
34893: PUSH
34894: LD_INT 3
34896: ST_TO_ADDR
// hackDist := 12 ;
34897: LD_ADDR_EXP 151
34901: PUSH
34902: LD_INT 12
34904: ST_TO_ADDR
// hackCounter := [ ] ;
34905: LD_ADDR_EXP 152
34909: PUSH
34910: EMPTY
34911: ST_TO_ADDR
// end ;
34912: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34913: LD_EXP 147
34917: PUSH
34918: LD_INT 34
34920: PUSH
34921: LD_EXP 159
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PPUSH
34930: CALL_OW 69
34934: AND
34935: IFFALSE 35190
34937: GO 34939
34939: DISABLE
34940: LD_INT 0
34942: PPUSH
34943: PPUSH
// begin enable ;
34944: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34945: LD_ADDR_VAR 0 1
34949: PUSH
34950: LD_INT 34
34952: PUSH
34953: LD_EXP 159
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PPUSH
34962: CALL_OW 69
34966: PUSH
34967: FOR_IN
34968: IFFALSE 35188
// begin if not i in hackTanks then
34970: LD_VAR 0 1
34974: PUSH
34975: LD_EXP 148
34979: IN
34980: NOT
34981: IFFALSE 35064
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34983: LD_ADDR_EXP 148
34987: PUSH
34988: LD_EXP 148
34992: PPUSH
34993: LD_EXP 148
34997: PUSH
34998: LD_INT 1
35000: PLUS
35001: PPUSH
35002: LD_VAR 0 1
35006: PPUSH
35007: CALL_OW 1
35011: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35012: LD_ADDR_EXP 149
35016: PUSH
35017: LD_EXP 149
35021: PPUSH
35022: LD_EXP 149
35026: PUSH
35027: LD_INT 1
35029: PLUS
35030: PPUSH
35031: EMPTY
35032: PPUSH
35033: CALL_OW 1
35037: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35038: LD_ADDR_EXP 152
35042: PUSH
35043: LD_EXP 152
35047: PPUSH
35048: LD_EXP 152
35052: PUSH
35053: LD_INT 1
35055: PLUS
35056: PPUSH
35057: EMPTY
35058: PPUSH
35059: CALL_OW 1
35063: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35064: LD_VAR 0 1
35068: PPUSH
35069: CALL_OW 302
35073: NOT
35074: IFFALSE 35087
// begin HackUnlinkAll ( i ) ;
35076: LD_VAR 0 1
35080: PPUSH
35081: CALL 35193 0 1
// continue ;
35085: GO 34967
// end ; HackCheckCapturedStatus ( i ) ;
35087: LD_VAR 0 1
35091: PPUSH
35092: CALL 35636 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35096: LD_ADDR_VAR 0 2
35100: PUSH
35101: LD_INT 81
35103: PUSH
35104: LD_VAR 0 1
35108: PPUSH
35109: CALL_OW 255
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 33
35120: PUSH
35121: LD_INT 3
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 91
35130: PUSH
35131: LD_VAR 0 1
35135: PUSH
35136: LD_EXP 151
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 50
35148: PUSH
35149: EMPTY
35150: LIST
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: PPUSH
35158: CALL_OW 69
35162: ST_TO_ADDR
// if not tmp then
35163: LD_VAR 0 2
35167: NOT
35168: IFFALSE 35172
// continue ;
35170: GO 34967
// HackLink ( i , tmp ) ;
35172: LD_VAR 0 1
35176: PPUSH
35177: LD_VAR 0 2
35181: PPUSH
35182: CALL 35329 0 2
// end ;
35186: GO 34967
35188: POP
35189: POP
// end ;
35190: PPOPN 2
35192: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35193: LD_INT 0
35195: PPUSH
35196: PPUSH
35197: PPUSH
// if not hack in hackTanks then
35198: LD_VAR 0 1
35202: PUSH
35203: LD_EXP 148
35207: IN
35208: NOT
35209: IFFALSE 35213
// exit ;
35211: GO 35324
// index := GetElementIndex ( hackTanks , hack ) ;
35213: LD_ADDR_VAR 0 4
35217: PUSH
35218: LD_EXP 148
35222: PPUSH
35223: LD_VAR 0 1
35227: PPUSH
35228: CALL 42966 0 2
35232: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35233: LD_EXP 149
35237: PUSH
35238: LD_VAR 0 4
35242: ARRAY
35243: IFFALSE 35324
// begin for i in hackTanksCaptured [ index ] do
35245: LD_ADDR_VAR 0 3
35249: PUSH
35250: LD_EXP 149
35254: PUSH
35255: LD_VAR 0 4
35259: ARRAY
35260: PUSH
35261: FOR_IN
35262: IFFALSE 35288
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35264: LD_VAR 0 3
35268: PUSH
35269: LD_INT 1
35271: ARRAY
35272: PPUSH
35273: LD_VAR 0 3
35277: PUSH
35278: LD_INT 2
35280: ARRAY
35281: PPUSH
35282: CALL_OW 235
35286: GO 35261
35288: POP
35289: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35290: LD_ADDR_EXP 149
35294: PUSH
35295: LD_EXP 149
35299: PPUSH
35300: LD_VAR 0 4
35304: PPUSH
35305: EMPTY
35306: PPUSH
35307: CALL_OW 1
35311: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35312: LD_VAR 0 1
35316: PPUSH
35317: LD_INT 0
35319: PPUSH
35320: CALL_OW 505
// end ; end ;
35324: LD_VAR 0 2
35328: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35329: LD_INT 0
35331: PPUSH
35332: PPUSH
35333: PPUSH
// if not hack in hackTanks or not vehicles then
35334: LD_VAR 0 1
35338: PUSH
35339: LD_EXP 148
35343: IN
35344: NOT
35345: PUSH
35346: LD_VAR 0 2
35350: NOT
35351: OR
35352: IFFALSE 35356
// exit ;
35354: GO 35631
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35356: LD_ADDR_VAR 0 2
35360: PUSH
35361: LD_VAR 0 1
35365: PPUSH
35366: LD_VAR 0 2
35370: PPUSH
35371: LD_INT 1
35373: PPUSH
35374: LD_INT 1
35376: PPUSH
35377: CALL 43616 0 4
35381: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35382: LD_ADDR_VAR 0 5
35386: PUSH
35387: LD_EXP 148
35391: PPUSH
35392: LD_VAR 0 1
35396: PPUSH
35397: CALL 42966 0 2
35401: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35402: LD_EXP 149
35406: PUSH
35407: LD_VAR 0 5
35411: ARRAY
35412: PUSH
35413: LD_EXP 150
35417: LESS
35418: IFFALSE 35607
// begin for i := 1 to vehicles do
35420: LD_ADDR_VAR 0 4
35424: PUSH
35425: DOUBLE
35426: LD_INT 1
35428: DEC
35429: ST_TO_ADDR
35430: LD_VAR 0 2
35434: PUSH
35435: FOR_TO
35436: IFFALSE 35605
// begin if hackTanksCaptured [ index ] = hackLimit then
35438: LD_EXP 149
35442: PUSH
35443: LD_VAR 0 5
35447: ARRAY
35448: PUSH
35449: LD_EXP 150
35453: EQUAL
35454: IFFALSE 35458
// break ;
35456: GO 35605
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35458: LD_ADDR_EXP 152
35462: PUSH
35463: LD_EXP 152
35467: PPUSH
35468: LD_VAR 0 5
35472: PPUSH
35473: LD_EXP 152
35477: PUSH
35478: LD_VAR 0 5
35482: ARRAY
35483: PUSH
35484: LD_INT 1
35486: PLUS
35487: PPUSH
35488: CALL_OW 1
35492: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35493: LD_ADDR_EXP 149
35497: PUSH
35498: LD_EXP 149
35502: PPUSH
35503: LD_VAR 0 5
35507: PUSH
35508: LD_EXP 149
35512: PUSH
35513: LD_VAR 0 5
35517: ARRAY
35518: PUSH
35519: LD_INT 1
35521: PLUS
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PPUSH
35527: LD_VAR 0 2
35531: PUSH
35532: LD_VAR 0 4
35536: ARRAY
35537: PUSH
35538: LD_VAR 0 2
35542: PUSH
35543: LD_VAR 0 4
35547: ARRAY
35548: PPUSH
35549: CALL_OW 255
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PPUSH
35558: CALL 43181 0 3
35562: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35563: LD_VAR 0 2
35567: PUSH
35568: LD_VAR 0 4
35572: ARRAY
35573: PPUSH
35574: LD_VAR 0 1
35578: PPUSH
35579: CALL_OW 255
35583: PPUSH
35584: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35588: LD_VAR 0 2
35592: PUSH
35593: LD_VAR 0 4
35597: ARRAY
35598: PPUSH
35599: CALL_OW 141
// end ;
35603: GO 35435
35605: POP
35606: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35607: LD_VAR 0 1
35611: PPUSH
35612: LD_EXP 149
35616: PUSH
35617: LD_VAR 0 5
35621: ARRAY
35622: PUSH
35623: LD_INT 0
35625: PLUS
35626: PPUSH
35627: CALL_OW 505
// end ;
35631: LD_VAR 0 3
35635: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35636: LD_INT 0
35638: PPUSH
35639: PPUSH
35640: PPUSH
35641: PPUSH
// if not hack in hackTanks then
35642: LD_VAR 0 1
35646: PUSH
35647: LD_EXP 148
35651: IN
35652: NOT
35653: IFFALSE 35657
// exit ;
35655: GO 35897
// index := GetElementIndex ( hackTanks , hack ) ;
35657: LD_ADDR_VAR 0 4
35661: PUSH
35662: LD_EXP 148
35666: PPUSH
35667: LD_VAR 0 1
35671: PPUSH
35672: CALL 42966 0 2
35676: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35677: LD_ADDR_VAR 0 3
35681: PUSH
35682: DOUBLE
35683: LD_EXP 149
35687: PUSH
35688: LD_VAR 0 4
35692: ARRAY
35693: INC
35694: ST_TO_ADDR
35695: LD_INT 1
35697: PUSH
35698: FOR_DOWNTO
35699: IFFALSE 35871
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35701: LD_ADDR_VAR 0 5
35705: PUSH
35706: LD_EXP 149
35710: PUSH
35711: LD_VAR 0 4
35715: ARRAY
35716: PUSH
35717: LD_VAR 0 3
35721: ARRAY
35722: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35723: LD_VAR 0 5
35727: PUSH
35728: LD_INT 1
35730: ARRAY
35731: PPUSH
35732: CALL_OW 302
35736: NOT
35737: PUSH
35738: LD_VAR 0 5
35742: PUSH
35743: LD_INT 1
35745: ARRAY
35746: PPUSH
35747: CALL_OW 255
35751: PUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: CALL_OW 255
35761: NONEQUAL
35762: OR
35763: IFFALSE 35869
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35765: LD_VAR 0 5
35769: PUSH
35770: LD_INT 1
35772: ARRAY
35773: PPUSH
35774: CALL_OW 305
35778: PUSH
35779: LD_VAR 0 5
35783: PUSH
35784: LD_INT 1
35786: ARRAY
35787: PPUSH
35788: CALL_OW 255
35792: PUSH
35793: LD_VAR 0 1
35797: PPUSH
35798: CALL_OW 255
35802: EQUAL
35803: AND
35804: IFFALSE 35828
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35806: LD_VAR 0 5
35810: PUSH
35811: LD_INT 1
35813: ARRAY
35814: PPUSH
35815: LD_VAR 0 5
35819: PUSH
35820: LD_INT 2
35822: ARRAY
35823: PPUSH
35824: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35828: LD_ADDR_EXP 149
35832: PUSH
35833: LD_EXP 149
35837: PPUSH
35838: LD_VAR 0 4
35842: PPUSH
35843: LD_EXP 149
35847: PUSH
35848: LD_VAR 0 4
35852: ARRAY
35853: PPUSH
35854: LD_VAR 0 3
35858: PPUSH
35859: CALL_OW 3
35863: PPUSH
35864: CALL_OW 1
35868: ST_TO_ADDR
// end ; end ;
35869: GO 35698
35871: POP
35872: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35873: LD_VAR 0 1
35877: PPUSH
35878: LD_EXP 149
35882: PUSH
35883: LD_VAR 0 4
35887: ARRAY
35888: PUSH
35889: LD_INT 0
35891: PLUS
35892: PPUSH
35893: CALL_OW 505
// end ;
35897: LD_VAR 0 2
35901: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35902: LD_INT 0
35904: PPUSH
35905: PPUSH
35906: PPUSH
35907: PPUSH
// if not hack in hackTanks then
35908: LD_VAR 0 1
35912: PUSH
35913: LD_EXP 148
35917: IN
35918: NOT
35919: IFFALSE 35923
// exit ;
35921: GO 36008
// index := GetElementIndex ( hackTanks , hack ) ;
35923: LD_ADDR_VAR 0 5
35927: PUSH
35928: LD_EXP 148
35932: PPUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL 42966 0 2
35942: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35943: LD_ADDR_VAR 0 4
35947: PUSH
35948: DOUBLE
35949: LD_INT 1
35951: DEC
35952: ST_TO_ADDR
35953: LD_EXP 149
35957: PUSH
35958: LD_VAR 0 5
35962: ARRAY
35963: PUSH
35964: FOR_TO
35965: IFFALSE 36006
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35967: LD_EXP 149
35971: PUSH
35972: LD_VAR 0 5
35976: ARRAY
35977: PUSH
35978: LD_VAR 0 4
35982: ARRAY
35983: PUSH
35984: LD_INT 1
35986: ARRAY
35987: PUSH
35988: LD_VAR 0 2
35992: EQUAL
35993: IFFALSE 36004
// KillUnit ( vehicle ) ;
35995: LD_VAR 0 2
35999: PPUSH
36000: CALL_OW 66
36004: GO 35964
36006: POP
36007: POP
// end ;
36008: LD_VAR 0 3
36012: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36013: LD_EXP 153
36017: NOT
36018: IFFALSE 36053
36020: GO 36022
36022: DISABLE
// begin initMiner := true ;
36023: LD_ADDR_EXP 153
36027: PUSH
36028: LD_INT 1
36030: ST_TO_ADDR
// minersList := [ ] ;
36031: LD_ADDR_EXP 154
36035: PUSH
36036: EMPTY
36037: ST_TO_ADDR
// minerMinesList := [ ] ;
36038: LD_ADDR_EXP 155
36042: PUSH
36043: EMPTY
36044: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36045: LD_ADDR_EXP 156
36049: PUSH
36050: LD_INT 5
36052: ST_TO_ADDR
// end ;
36053: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36054: LD_EXP 153
36058: PUSH
36059: LD_INT 34
36061: PUSH
36062: LD_EXP 164
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PPUSH
36071: CALL_OW 69
36075: AND
36076: IFFALSE 36539
36078: GO 36080
36080: DISABLE
36081: LD_INT 0
36083: PPUSH
36084: PPUSH
36085: PPUSH
36086: PPUSH
// begin enable ;
36087: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36088: LD_ADDR_VAR 0 1
36092: PUSH
36093: LD_INT 34
36095: PUSH
36096: LD_EXP 164
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PPUSH
36105: CALL_OW 69
36109: PUSH
36110: FOR_IN
36111: IFFALSE 36183
// begin if not i in minersList then
36113: LD_VAR 0 1
36117: PUSH
36118: LD_EXP 154
36122: IN
36123: NOT
36124: IFFALSE 36181
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36126: LD_ADDR_EXP 154
36130: PUSH
36131: LD_EXP 154
36135: PPUSH
36136: LD_EXP 154
36140: PUSH
36141: LD_INT 1
36143: PLUS
36144: PPUSH
36145: LD_VAR 0 1
36149: PPUSH
36150: CALL_OW 1
36154: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36155: LD_ADDR_EXP 155
36159: PUSH
36160: LD_EXP 155
36164: PPUSH
36165: LD_EXP 155
36169: PUSH
36170: LD_INT 1
36172: PLUS
36173: PPUSH
36174: EMPTY
36175: PPUSH
36176: CALL_OW 1
36180: ST_TO_ADDR
// end end ;
36181: GO 36110
36183: POP
36184: POP
// for i := minerMinesList downto 1 do
36185: LD_ADDR_VAR 0 1
36189: PUSH
36190: DOUBLE
36191: LD_EXP 155
36195: INC
36196: ST_TO_ADDR
36197: LD_INT 1
36199: PUSH
36200: FOR_DOWNTO
36201: IFFALSE 36537
// begin if IsLive ( minersList [ i ] ) then
36203: LD_EXP 154
36207: PUSH
36208: LD_VAR 0 1
36212: ARRAY
36213: PPUSH
36214: CALL_OW 300
36218: IFFALSE 36246
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36220: LD_EXP 154
36224: PUSH
36225: LD_VAR 0 1
36229: ARRAY
36230: PPUSH
36231: LD_EXP 155
36235: PUSH
36236: LD_VAR 0 1
36240: ARRAY
36241: PPUSH
36242: CALL_OW 505
// if not minerMinesList [ i ] then
36246: LD_EXP 155
36250: PUSH
36251: LD_VAR 0 1
36255: ARRAY
36256: NOT
36257: IFFALSE 36261
// continue ;
36259: GO 36200
// for j := minerMinesList [ i ] downto 1 do
36261: LD_ADDR_VAR 0 2
36265: PUSH
36266: DOUBLE
36267: LD_EXP 155
36271: PUSH
36272: LD_VAR 0 1
36276: ARRAY
36277: INC
36278: ST_TO_ADDR
36279: LD_INT 1
36281: PUSH
36282: FOR_DOWNTO
36283: IFFALSE 36533
// begin side := GetSide ( minersList [ i ] ) ;
36285: LD_ADDR_VAR 0 3
36289: PUSH
36290: LD_EXP 154
36294: PUSH
36295: LD_VAR 0 1
36299: ARRAY
36300: PPUSH
36301: CALL_OW 255
36305: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36306: LD_ADDR_VAR 0 4
36310: PUSH
36311: LD_EXP 155
36315: PUSH
36316: LD_VAR 0 1
36320: ARRAY
36321: PUSH
36322: LD_VAR 0 2
36326: ARRAY
36327: PUSH
36328: LD_INT 1
36330: ARRAY
36331: PPUSH
36332: LD_EXP 155
36336: PUSH
36337: LD_VAR 0 1
36341: ARRAY
36342: PUSH
36343: LD_VAR 0 2
36347: ARRAY
36348: PUSH
36349: LD_INT 2
36351: ARRAY
36352: PPUSH
36353: CALL_OW 428
36357: ST_TO_ADDR
// if not tmp then
36358: LD_VAR 0 4
36362: NOT
36363: IFFALSE 36367
// continue ;
36365: GO 36282
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36367: LD_VAR 0 4
36371: PUSH
36372: LD_INT 81
36374: PUSH
36375: LD_VAR 0 3
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PPUSH
36384: CALL_OW 69
36388: IN
36389: PUSH
36390: LD_EXP 155
36394: PUSH
36395: LD_VAR 0 1
36399: ARRAY
36400: PUSH
36401: LD_VAR 0 2
36405: ARRAY
36406: PUSH
36407: LD_INT 1
36409: ARRAY
36410: PPUSH
36411: LD_EXP 155
36415: PUSH
36416: LD_VAR 0 1
36420: ARRAY
36421: PUSH
36422: LD_VAR 0 2
36426: ARRAY
36427: PUSH
36428: LD_INT 2
36430: ARRAY
36431: PPUSH
36432: CALL_OW 458
36436: AND
36437: IFFALSE 36531
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36439: LD_EXP 155
36443: PUSH
36444: LD_VAR 0 1
36448: ARRAY
36449: PUSH
36450: LD_VAR 0 2
36454: ARRAY
36455: PUSH
36456: LD_INT 1
36458: ARRAY
36459: PPUSH
36460: LD_EXP 155
36464: PUSH
36465: LD_VAR 0 1
36469: ARRAY
36470: PUSH
36471: LD_VAR 0 2
36475: ARRAY
36476: PUSH
36477: LD_INT 2
36479: ARRAY
36480: PPUSH
36481: LD_VAR 0 3
36485: PPUSH
36486: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36490: LD_ADDR_EXP 155
36494: PUSH
36495: LD_EXP 155
36499: PPUSH
36500: LD_VAR 0 1
36504: PPUSH
36505: LD_EXP 155
36509: PUSH
36510: LD_VAR 0 1
36514: ARRAY
36515: PPUSH
36516: LD_VAR 0 2
36520: PPUSH
36521: CALL_OW 3
36525: PPUSH
36526: CALL_OW 1
36530: ST_TO_ADDR
// end ; end ;
36531: GO 36282
36533: POP
36534: POP
// end ;
36535: GO 36200
36537: POP
36538: POP
// end ;
36539: PPOPN 4
36541: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36542: LD_INT 0
36544: PPUSH
36545: PPUSH
// result := false ;
36546: LD_ADDR_VAR 0 4
36550: PUSH
36551: LD_INT 0
36553: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36554: LD_VAR 0 1
36558: PPUSH
36559: CALL_OW 264
36563: PUSH
36564: LD_EXP 164
36568: EQUAL
36569: NOT
36570: IFFALSE 36574
// exit ;
36572: GO 36814
// index := GetElementIndex ( minersList , unit ) ;
36574: LD_ADDR_VAR 0 5
36578: PUSH
36579: LD_EXP 154
36583: PPUSH
36584: LD_VAR 0 1
36588: PPUSH
36589: CALL 42966 0 2
36593: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36594: LD_EXP 155
36598: PUSH
36599: LD_VAR 0 5
36603: ARRAY
36604: PUSH
36605: LD_EXP 156
36609: GREATEREQUAL
36610: IFFALSE 36614
// exit ;
36612: GO 36814
// ComMoveXY ( unit , x , y ) ;
36614: LD_VAR 0 1
36618: PPUSH
36619: LD_VAR 0 2
36623: PPUSH
36624: LD_VAR 0 3
36628: PPUSH
36629: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36633: LD_INT 35
36635: PPUSH
36636: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36640: LD_VAR 0 1
36644: PPUSH
36645: LD_VAR 0 2
36649: PPUSH
36650: LD_VAR 0 3
36654: PPUSH
36655: CALL 73738 0 3
36659: NOT
36660: PUSH
36661: LD_VAR 0 1
36665: PPUSH
36666: CALL_OW 314
36670: AND
36671: IFFALSE 36675
// exit ;
36673: GO 36814
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36675: LD_VAR 0 2
36679: PPUSH
36680: LD_VAR 0 3
36684: PPUSH
36685: CALL_OW 428
36689: PUSH
36690: LD_VAR 0 1
36694: EQUAL
36695: PUSH
36696: LD_VAR 0 1
36700: PPUSH
36701: CALL_OW 314
36705: NOT
36706: AND
36707: IFFALSE 36633
// PlaySoundXY ( x , y , PlantMine ) ;
36709: LD_VAR 0 2
36713: PPUSH
36714: LD_VAR 0 3
36718: PPUSH
36719: LD_STRING PlantMine
36721: PPUSH
36722: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36726: LD_VAR 0 2
36730: PPUSH
36731: LD_VAR 0 3
36735: PPUSH
36736: LD_VAR 0 1
36740: PPUSH
36741: CALL_OW 255
36745: PPUSH
36746: LD_INT 0
36748: PPUSH
36749: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36753: LD_ADDR_EXP 155
36757: PUSH
36758: LD_EXP 155
36762: PPUSH
36763: LD_VAR 0 5
36767: PUSH
36768: LD_EXP 155
36772: PUSH
36773: LD_VAR 0 5
36777: ARRAY
36778: PUSH
36779: LD_INT 1
36781: PLUS
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PPUSH
36787: LD_VAR 0 2
36791: PUSH
36792: LD_VAR 0 3
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PPUSH
36801: CALL 43181 0 3
36805: ST_TO_ADDR
// result := true ;
36806: LD_ADDR_VAR 0 4
36810: PUSH
36811: LD_INT 1
36813: ST_TO_ADDR
// end ;
36814: LD_VAR 0 4
36818: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36819: LD_INT 0
36821: PPUSH
36822: PPUSH
36823: PPUSH
// if not unit in minersList then
36824: LD_VAR 0 1
36828: PUSH
36829: LD_EXP 154
36833: IN
36834: NOT
36835: IFFALSE 36839
// exit ;
36837: GO 37231
// index := GetElementIndex ( minersList , unit ) ;
36839: LD_ADDR_VAR 0 6
36843: PUSH
36844: LD_EXP 154
36848: PPUSH
36849: LD_VAR 0 1
36853: PPUSH
36854: CALL 42966 0 2
36858: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36859: LD_ADDR_VAR 0 5
36863: PUSH
36864: DOUBLE
36865: LD_EXP 155
36869: PUSH
36870: LD_VAR 0 6
36874: ARRAY
36875: INC
36876: ST_TO_ADDR
36877: LD_INT 1
36879: PUSH
36880: FOR_DOWNTO
36881: IFFALSE 37042
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36883: LD_EXP 155
36887: PUSH
36888: LD_VAR 0 6
36892: ARRAY
36893: PUSH
36894: LD_VAR 0 5
36898: ARRAY
36899: PUSH
36900: LD_INT 1
36902: ARRAY
36903: PUSH
36904: LD_VAR 0 2
36908: EQUAL
36909: PUSH
36910: LD_EXP 155
36914: PUSH
36915: LD_VAR 0 6
36919: ARRAY
36920: PUSH
36921: LD_VAR 0 5
36925: ARRAY
36926: PUSH
36927: LD_INT 2
36929: ARRAY
36930: PUSH
36931: LD_VAR 0 3
36935: EQUAL
36936: AND
36937: IFFALSE 37040
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36939: LD_EXP 155
36943: PUSH
36944: LD_VAR 0 6
36948: ARRAY
36949: PUSH
36950: LD_VAR 0 5
36954: ARRAY
36955: PUSH
36956: LD_INT 1
36958: ARRAY
36959: PPUSH
36960: LD_EXP 155
36964: PUSH
36965: LD_VAR 0 6
36969: ARRAY
36970: PUSH
36971: LD_VAR 0 5
36975: ARRAY
36976: PUSH
36977: LD_INT 2
36979: ARRAY
36980: PPUSH
36981: LD_VAR 0 1
36985: PPUSH
36986: CALL_OW 255
36990: PPUSH
36991: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36995: LD_ADDR_EXP 155
36999: PUSH
37000: LD_EXP 155
37004: PPUSH
37005: LD_VAR 0 6
37009: PPUSH
37010: LD_EXP 155
37014: PUSH
37015: LD_VAR 0 6
37019: ARRAY
37020: PPUSH
37021: LD_VAR 0 5
37025: PPUSH
37026: CALL_OW 3
37030: PPUSH
37031: CALL_OW 1
37035: ST_TO_ADDR
// exit ;
37036: POP
37037: POP
37038: GO 37231
// end ; end ;
37040: GO 36880
37042: POP
37043: POP
// for i := minerMinesList [ index ] downto 1 do
37044: LD_ADDR_VAR 0 5
37048: PUSH
37049: DOUBLE
37050: LD_EXP 155
37054: PUSH
37055: LD_VAR 0 6
37059: ARRAY
37060: INC
37061: ST_TO_ADDR
37062: LD_INT 1
37064: PUSH
37065: FOR_DOWNTO
37066: IFFALSE 37229
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37068: LD_EXP 155
37072: PUSH
37073: LD_VAR 0 6
37077: ARRAY
37078: PUSH
37079: LD_VAR 0 5
37083: ARRAY
37084: PUSH
37085: LD_INT 1
37087: ARRAY
37088: PPUSH
37089: LD_EXP 155
37093: PUSH
37094: LD_VAR 0 6
37098: ARRAY
37099: PUSH
37100: LD_VAR 0 5
37104: ARRAY
37105: PUSH
37106: LD_INT 2
37108: ARRAY
37109: PPUSH
37110: LD_VAR 0 2
37114: PPUSH
37115: LD_VAR 0 3
37119: PPUSH
37120: CALL_OW 298
37124: PUSH
37125: LD_INT 6
37127: LESS
37128: IFFALSE 37227
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37130: LD_EXP 155
37134: PUSH
37135: LD_VAR 0 6
37139: ARRAY
37140: PUSH
37141: LD_VAR 0 5
37145: ARRAY
37146: PUSH
37147: LD_INT 1
37149: ARRAY
37150: PPUSH
37151: LD_EXP 155
37155: PUSH
37156: LD_VAR 0 6
37160: ARRAY
37161: PUSH
37162: LD_VAR 0 5
37166: ARRAY
37167: PUSH
37168: LD_INT 2
37170: ARRAY
37171: PPUSH
37172: LD_VAR 0 1
37176: PPUSH
37177: CALL_OW 255
37181: PPUSH
37182: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37186: LD_ADDR_EXP 155
37190: PUSH
37191: LD_EXP 155
37195: PPUSH
37196: LD_VAR 0 6
37200: PPUSH
37201: LD_EXP 155
37205: PUSH
37206: LD_VAR 0 6
37210: ARRAY
37211: PPUSH
37212: LD_VAR 0 5
37216: PPUSH
37217: CALL_OW 3
37221: PPUSH
37222: CALL_OW 1
37226: ST_TO_ADDR
// end ; end ;
37227: GO 37065
37229: POP
37230: POP
// end ;
37231: LD_VAR 0 4
37235: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37236: LD_INT 0
37238: PPUSH
37239: PPUSH
37240: PPUSH
37241: PPUSH
37242: PPUSH
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37247: LD_VAR 0 1
37251: PPUSH
37252: CALL_OW 264
37256: PUSH
37257: LD_EXP 164
37261: EQUAL
37262: NOT
37263: PUSH
37264: LD_VAR 0 1
37268: PUSH
37269: LD_EXP 154
37273: IN
37274: NOT
37275: OR
37276: IFFALSE 37280
// exit ;
37278: GO 37602
// index := GetElementIndex ( minersList , unit ) ;
37280: LD_ADDR_VAR 0 6
37284: PUSH
37285: LD_EXP 154
37289: PPUSH
37290: LD_VAR 0 1
37294: PPUSH
37295: CALL 42966 0 2
37299: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37300: LD_ADDR_VAR 0 8
37304: PUSH
37305: LD_EXP 156
37309: PUSH
37310: LD_EXP 155
37314: PUSH
37315: LD_VAR 0 6
37319: ARRAY
37320: MINUS
37321: ST_TO_ADDR
// if not minesFreeAmount then
37322: LD_VAR 0 8
37326: NOT
37327: IFFALSE 37331
// exit ;
37329: GO 37602
// tmp := [ ] ;
37331: LD_ADDR_VAR 0 7
37335: PUSH
37336: EMPTY
37337: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37338: LD_ADDR_VAR 0 5
37342: PUSH
37343: DOUBLE
37344: LD_INT 1
37346: DEC
37347: ST_TO_ADDR
37348: LD_VAR 0 8
37352: PUSH
37353: FOR_TO
37354: IFFALSE 37549
// begin _d := rand ( 0 , 5 ) ;
37356: LD_ADDR_VAR 0 11
37360: PUSH
37361: LD_INT 0
37363: PPUSH
37364: LD_INT 5
37366: PPUSH
37367: CALL_OW 12
37371: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37372: LD_ADDR_VAR 0 12
37376: PUSH
37377: LD_INT 2
37379: PPUSH
37380: LD_INT 6
37382: PPUSH
37383: CALL_OW 12
37387: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37388: LD_ADDR_VAR 0 9
37392: PUSH
37393: LD_VAR 0 2
37397: PPUSH
37398: LD_VAR 0 11
37402: PPUSH
37403: LD_VAR 0 12
37407: PPUSH
37408: CALL_OW 272
37412: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37413: LD_ADDR_VAR 0 10
37417: PUSH
37418: LD_VAR 0 3
37422: PPUSH
37423: LD_VAR 0 11
37427: PPUSH
37428: LD_VAR 0 12
37432: PPUSH
37433: CALL_OW 273
37437: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37438: LD_VAR 0 9
37442: PPUSH
37443: LD_VAR 0 10
37447: PPUSH
37448: CALL_OW 488
37452: PUSH
37453: LD_VAR 0 9
37457: PUSH
37458: LD_VAR 0 10
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_VAR 0 7
37471: IN
37472: NOT
37473: AND
37474: PUSH
37475: LD_VAR 0 9
37479: PPUSH
37480: LD_VAR 0 10
37484: PPUSH
37485: CALL_OW 458
37489: NOT
37490: AND
37491: IFFALSE 37533
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37493: LD_ADDR_VAR 0 7
37497: PUSH
37498: LD_VAR 0 7
37502: PPUSH
37503: LD_VAR 0 7
37507: PUSH
37508: LD_INT 1
37510: PLUS
37511: PPUSH
37512: LD_VAR 0 9
37516: PUSH
37517: LD_VAR 0 10
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PPUSH
37526: CALL_OW 1
37530: ST_TO_ADDR
37531: GO 37547
// i := i - 1 ;
37533: LD_ADDR_VAR 0 5
37537: PUSH
37538: LD_VAR 0 5
37542: PUSH
37543: LD_INT 1
37545: MINUS
37546: ST_TO_ADDR
// end ;
37547: GO 37353
37549: POP
37550: POP
// for i in tmp do
37551: LD_ADDR_VAR 0 5
37555: PUSH
37556: LD_VAR 0 7
37560: PUSH
37561: FOR_IN
37562: IFFALSE 37600
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37564: LD_VAR 0 1
37568: PPUSH
37569: LD_VAR 0 5
37573: PUSH
37574: LD_INT 1
37576: ARRAY
37577: PPUSH
37578: LD_VAR 0 5
37582: PUSH
37583: LD_INT 2
37585: ARRAY
37586: PPUSH
37587: CALL 36542 0 3
37591: NOT
37592: IFFALSE 37598
// exit ;
37594: POP
37595: POP
37596: GO 37602
37598: GO 37561
37600: POP
37601: POP
// end ;
37602: LD_VAR 0 4
37606: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37607: LD_INT 0
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
37614: PPUSH
37615: PPUSH
// if not GetClass ( unit ) = class_sniper then
37616: LD_VAR 0 1
37620: PPUSH
37621: CALL_OW 257
37625: PUSH
37626: LD_INT 5
37628: EQUAL
37629: NOT
37630: IFFALSE 37634
// exit ;
37632: GO 38022
// dist := 8 ;
37634: LD_ADDR_VAR 0 5
37638: PUSH
37639: LD_INT 8
37641: ST_TO_ADDR
// viewRange := 12 ;
37642: LD_ADDR_VAR 0 7
37646: PUSH
37647: LD_INT 12
37649: ST_TO_ADDR
// side := GetSide ( unit ) ;
37650: LD_ADDR_VAR 0 6
37654: PUSH
37655: LD_VAR 0 1
37659: PPUSH
37660: CALL_OW 255
37664: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37665: LD_INT 61
37667: PPUSH
37668: LD_VAR 0 6
37672: PPUSH
37673: CALL_OW 321
37677: PUSH
37678: LD_INT 2
37680: EQUAL
37681: IFFALSE 37691
// viewRange := 16 ;
37683: LD_ADDR_VAR 0 7
37687: PUSH
37688: LD_INT 16
37690: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37691: LD_VAR 0 1
37695: PPUSH
37696: LD_VAR 0 2
37700: PPUSH
37701: LD_VAR 0 3
37705: PPUSH
37706: CALL_OW 297
37710: PUSH
37711: LD_VAR 0 5
37715: GREATER
37716: IFFALSE 37795
// begin ComMoveXY ( unit , x , y ) ;
37718: LD_VAR 0 1
37722: PPUSH
37723: LD_VAR 0 2
37727: PPUSH
37728: LD_VAR 0 3
37732: PPUSH
37733: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37737: LD_INT 35
37739: PPUSH
37740: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37744: LD_VAR 0 1
37748: PPUSH
37749: LD_VAR 0 2
37753: PPUSH
37754: LD_VAR 0 3
37758: PPUSH
37759: CALL 73738 0 3
37763: NOT
37764: IFFALSE 37768
// exit ;
37766: GO 38022
// until GetDistUnitXY ( unit , x , y ) < dist ;
37768: LD_VAR 0 1
37772: PPUSH
37773: LD_VAR 0 2
37777: PPUSH
37778: LD_VAR 0 3
37782: PPUSH
37783: CALL_OW 297
37787: PUSH
37788: LD_VAR 0 5
37792: LESS
37793: IFFALSE 37737
// end ; ComTurnXY ( unit , x , y ) ;
37795: LD_VAR 0 1
37799: PPUSH
37800: LD_VAR 0 2
37804: PPUSH
37805: LD_VAR 0 3
37809: PPUSH
37810: CALL_OW 118
// wait ( 5 ) ;
37814: LD_INT 5
37816: PPUSH
37817: CALL_OW 67
// _d := GetDir ( unit ) ;
37821: LD_ADDR_VAR 0 10
37825: PUSH
37826: LD_VAR 0 1
37830: PPUSH
37831: CALL_OW 254
37835: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37836: LD_ADDR_VAR 0 8
37840: PUSH
37841: LD_VAR 0 1
37845: PPUSH
37846: CALL_OW 250
37850: PPUSH
37851: LD_VAR 0 10
37855: PPUSH
37856: LD_VAR 0 5
37860: PPUSH
37861: CALL_OW 272
37865: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37866: LD_ADDR_VAR 0 9
37870: PUSH
37871: LD_VAR 0 1
37875: PPUSH
37876: CALL_OW 251
37880: PPUSH
37881: LD_VAR 0 10
37885: PPUSH
37886: LD_VAR 0 5
37890: PPUSH
37891: CALL_OW 273
37895: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37896: LD_VAR 0 8
37900: PPUSH
37901: LD_VAR 0 9
37905: PPUSH
37906: CALL_OW 488
37910: NOT
37911: IFFALSE 37915
// exit ;
37913: GO 38022
// ComAnimCustom ( unit , 1 ) ;
37915: LD_VAR 0 1
37919: PPUSH
37920: LD_INT 1
37922: PPUSH
37923: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37927: LD_VAR 0 8
37931: PPUSH
37932: LD_VAR 0 9
37936: PPUSH
37937: LD_VAR 0 6
37941: PPUSH
37942: LD_VAR 0 7
37946: PPUSH
37947: CALL_OW 330
// repeat wait ( 1 ) ;
37951: LD_INT 1
37953: PPUSH
37954: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37958: LD_VAR 0 1
37962: PPUSH
37963: CALL_OW 316
37967: PUSH
37968: LD_VAR 0 1
37972: PPUSH
37973: CALL_OW 314
37977: OR
37978: PUSH
37979: LD_VAR 0 1
37983: PPUSH
37984: CALL_OW 302
37988: NOT
37989: OR
37990: PUSH
37991: LD_VAR 0 1
37995: PPUSH
37996: CALL_OW 301
38000: OR
38001: IFFALSE 37951
// RemoveSeeing ( _x , _y , side ) ;
38003: LD_VAR 0 8
38007: PPUSH
38008: LD_VAR 0 9
38012: PPUSH
38013: LD_VAR 0 6
38017: PPUSH
38018: CALL_OW 331
// end ; end_of_file
38022: LD_VAR 0 4
38026: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
38027: LD_INT 0
38029: PPUSH
// ar_miner := 81 ;
38030: LD_ADDR_EXP 164
38034: PUSH
38035: LD_INT 81
38037: ST_TO_ADDR
// ar_crane := 88 ;
38038: LD_ADDR_EXP 163
38042: PUSH
38043: LD_INT 88
38045: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
38046: LD_ADDR_EXP 158
38050: PUSH
38051: LD_INT 89
38053: ST_TO_ADDR
// us_hack := 99 ;
38054: LD_ADDR_EXP 159
38058: PUSH
38059: LD_INT 99
38061: ST_TO_ADDR
// us_artillery := 97 ;
38062: LD_ADDR_EXP 160
38066: PUSH
38067: LD_INT 97
38069: ST_TO_ADDR
// ar_bio_bomb := 91 ;
38070: LD_ADDR_EXP 161
38074: PUSH
38075: LD_INT 91
38077: ST_TO_ADDR
// ar_mortar := 92 ;
38078: LD_ADDR_EXP 162
38082: PUSH
38083: LD_INT 92
38085: ST_TO_ADDR
// ru_radar := 98 ;
38086: LD_ADDR_EXP 157
38090: PUSH
38091: LD_INT 98
38093: ST_TO_ADDR
// tech_Artillery := 80 ;
38094: LD_ADDR_EXP 165
38098: PUSH
38099: LD_INT 80
38101: ST_TO_ADDR
// tech_RadMat := 81 ;
38102: LD_ADDR_EXP 166
38106: PUSH
38107: LD_INT 81
38109: ST_TO_ADDR
// tech_BasicTools := 82 ;
38110: LD_ADDR_EXP 167
38114: PUSH
38115: LD_INT 82
38117: ST_TO_ADDR
// tech_Cargo := 83 ;
38118: LD_ADDR_EXP 168
38122: PUSH
38123: LD_INT 83
38125: ST_TO_ADDR
// tech_Track := 84 ;
38126: LD_ADDR_EXP 169
38130: PUSH
38131: LD_INT 84
38133: ST_TO_ADDR
// tech_Crane := 85 ;
38134: LD_ADDR_EXP 170
38138: PUSH
38139: LD_INT 85
38141: ST_TO_ADDR
// tech_Bulldozer := 86 ;
38142: LD_ADDR_EXP 171
38146: PUSH
38147: LD_INT 86
38149: ST_TO_ADDR
// tech_Hovercraft := 87 ;
38150: LD_ADDR_EXP 172
38154: PUSH
38155: LD_INT 87
38157: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
38158: LD_ADDR_EXP 173
38162: PUSH
38163: LD_INT 88
38165: ST_TO_ADDR
// class_mastodont := 31 ;
38166: LD_ADDR_EXP 174
38170: PUSH
38171: LD_INT 31
38173: ST_TO_ADDR
// class_horse := 21 ;
38174: LD_ADDR_EXP 175
38178: PUSH
38179: LD_INT 21
38181: ST_TO_ADDR
// end ;
38182: LD_VAR 0 1
38186: RET
// every 1 do
38187: GO 38189
38189: DISABLE
// InitGlobalVariables ; end_of_file
38190: CALL 38027 0 0
38194: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38195: LD_INT 0
38197: PPUSH
38198: PPUSH
// if exist_mode then
38199: LD_VAR 0 2
38203: IFFALSE 38228
// unit := CreateCharacter ( prefix & ident ) else
38205: LD_ADDR_VAR 0 5
38209: PUSH
38210: LD_VAR 0 3
38214: PUSH
38215: LD_VAR 0 1
38219: STR
38220: PPUSH
38221: CALL_OW 34
38225: ST_TO_ADDR
38226: GO 38243
// unit := NewCharacter ( ident ) ;
38228: LD_ADDR_VAR 0 5
38232: PUSH
38233: LD_VAR 0 1
38237: PPUSH
38238: CALL_OW 25
38242: ST_TO_ADDR
// result := unit ;
38243: LD_ADDR_VAR 0 4
38247: PUSH
38248: LD_VAR 0 5
38252: ST_TO_ADDR
// end ;
38253: LD_VAR 0 4
38257: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38258: LD_INT 0
38260: PPUSH
38261: PPUSH
// if not side or not nation then
38262: LD_VAR 0 1
38266: NOT
38267: PUSH
38268: LD_VAR 0 2
38272: NOT
38273: OR
38274: IFFALSE 38278
// exit ;
38276: GO 39046
// case nation of nation_american :
38278: LD_VAR 0 2
38282: PUSH
38283: LD_INT 1
38285: DOUBLE
38286: EQUAL
38287: IFTRUE 38291
38289: GO 38505
38291: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38292: LD_ADDR_VAR 0 4
38296: PUSH
38297: LD_INT 35
38299: PUSH
38300: LD_INT 45
38302: PUSH
38303: LD_INT 46
38305: PUSH
38306: LD_INT 47
38308: PUSH
38309: LD_INT 82
38311: PUSH
38312: LD_INT 83
38314: PUSH
38315: LD_INT 84
38317: PUSH
38318: LD_INT 85
38320: PUSH
38321: LD_INT 86
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: LD_INT 6
38332: PUSH
38333: LD_INT 15
38335: PUSH
38336: LD_INT 16
38338: PUSH
38339: LD_INT 7
38341: PUSH
38342: LD_INT 12
38344: PUSH
38345: LD_INT 13
38347: PUSH
38348: LD_INT 10
38350: PUSH
38351: LD_INT 14
38353: PUSH
38354: LD_INT 20
38356: PUSH
38357: LD_INT 21
38359: PUSH
38360: LD_INT 22
38362: PUSH
38363: LD_INT 25
38365: PUSH
38366: LD_INT 32
38368: PUSH
38369: LD_INT 27
38371: PUSH
38372: LD_INT 36
38374: PUSH
38375: LD_INT 69
38377: PUSH
38378: LD_INT 39
38380: PUSH
38381: LD_INT 34
38383: PUSH
38384: LD_INT 40
38386: PUSH
38387: LD_INT 48
38389: PUSH
38390: LD_INT 49
38392: PUSH
38393: LD_INT 50
38395: PUSH
38396: LD_INT 51
38398: PUSH
38399: LD_INT 52
38401: PUSH
38402: LD_INT 53
38404: PUSH
38405: LD_INT 54
38407: PUSH
38408: LD_INT 55
38410: PUSH
38411: LD_INT 56
38413: PUSH
38414: LD_INT 57
38416: PUSH
38417: LD_INT 58
38419: PUSH
38420: LD_INT 59
38422: PUSH
38423: LD_INT 60
38425: PUSH
38426: LD_INT 61
38428: PUSH
38429: LD_INT 62
38431: PUSH
38432: LD_INT 80
38434: PUSH
38435: LD_INT 82
38437: PUSH
38438: LD_INT 83
38440: PUSH
38441: LD_INT 84
38443: PUSH
38444: LD_INT 85
38446: PUSH
38447: LD_INT 86
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: ST_TO_ADDR
38503: GO 38970
38505: LD_INT 2
38507: DOUBLE
38508: EQUAL
38509: IFTRUE 38513
38511: GO 38739
38513: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38514: LD_ADDR_VAR 0 4
38518: PUSH
38519: LD_INT 35
38521: PUSH
38522: LD_INT 45
38524: PUSH
38525: LD_INT 46
38527: PUSH
38528: LD_INT 47
38530: PUSH
38531: LD_INT 82
38533: PUSH
38534: LD_INT 83
38536: PUSH
38537: LD_INT 84
38539: PUSH
38540: LD_INT 85
38542: PUSH
38543: LD_INT 87
38545: PUSH
38546: LD_INT 70
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 11
38554: PUSH
38555: LD_INT 3
38557: PUSH
38558: LD_INT 4
38560: PUSH
38561: LD_INT 5
38563: PUSH
38564: LD_INT 6
38566: PUSH
38567: LD_INT 15
38569: PUSH
38570: LD_INT 18
38572: PUSH
38573: LD_INT 7
38575: PUSH
38576: LD_INT 17
38578: PUSH
38579: LD_INT 8
38581: PUSH
38582: LD_INT 20
38584: PUSH
38585: LD_INT 21
38587: PUSH
38588: LD_INT 22
38590: PUSH
38591: LD_INT 72
38593: PUSH
38594: LD_INT 26
38596: PUSH
38597: LD_INT 69
38599: PUSH
38600: LD_INT 39
38602: PUSH
38603: LD_INT 40
38605: PUSH
38606: LD_INT 41
38608: PUSH
38609: LD_INT 42
38611: PUSH
38612: LD_INT 43
38614: PUSH
38615: LD_INT 48
38617: PUSH
38618: LD_INT 49
38620: PUSH
38621: LD_INT 50
38623: PUSH
38624: LD_INT 51
38626: PUSH
38627: LD_INT 52
38629: PUSH
38630: LD_INT 53
38632: PUSH
38633: LD_INT 54
38635: PUSH
38636: LD_INT 55
38638: PUSH
38639: LD_INT 56
38641: PUSH
38642: LD_INT 60
38644: PUSH
38645: LD_INT 61
38647: PUSH
38648: LD_INT 62
38650: PUSH
38651: LD_INT 66
38653: PUSH
38654: LD_INT 67
38656: PUSH
38657: LD_INT 68
38659: PUSH
38660: LD_INT 81
38662: PUSH
38663: LD_INT 82
38665: PUSH
38666: LD_INT 83
38668: PUSH
38669: LD_INT 84
38671: PUSH
38672: LD_INT 85
38674: PUSH
38675: LD_INT 87
38677: PUSH
38678: LD_INT 88
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: ST_TO_ADDR
38737: GO 38970
38739: LD_INT 3
38741: DOUBLE
38742: EQUAL
38743: IFTRUE 38747
38745: GO 38969
38747: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38748: LD_ADDR_VAR 0 4
38752: PUSH
38753: LD_INT 46
38755: PUSH
38756: LD_INT 47
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: LD_INT 82
38767: PUSH
38768: LD_INT 83
38770: PUSH
38771: LD_INT 84
38773: PUSH
38774: LD_INT 85
38776: PUSH
38777: LD_INT 86
38779: PUSH
38780: LD_INT 11
38782: PUSH
38783: LD_INT 9
38785: PUSH
38786: LD_INT 20
38788: PUSH
38789: LD_INT 19
38791: PUSH
38792: LD_INT 21
38794: PUSH
38795: LD_INT 24
38797: PUSH
38798: LD_INT 22
38800: PUSH
38801: LD_INT 25
38803: PUSH
38804: LD_INT 28
38806: PUSH
38807: LD_INT 29
38809: PUSH
38810: LD_INT 30
38812: PUSH
38813: LD_INT 31
38815: PUSH
38816: LD_INT 37
38818: PUSH
38819: LD_INT 38
38821: PUSH
38822: LD_INT 32
38824: PUSH
38825: LD_INT 27
38827: PUSH
38828: LD_INT 33
38830: PUSH
38831: LD_INT 69
38833: PUSH
38834: LD_INT 39
38836: PUSH
38837: LD_INT 34
38839: PUSH
38840: LD_INT 40
38842: PUSH
38843: LD_INT 71
38845: PUSH
38846: LD_INT 23
38848: PUSH
38849: LD_INT 44
38851: PUSH
38852: LD_INT 48
38854: PUSH
38855: LD_INT 49
38857: PUSH
38858: LD_INT 50
38860: PUSH
38861: LD_INT 51
38863: PUSH
38864: LD_INT 52
38866: PUSH
38867: LD_INT 53
38869: PUSH
38870: LD_INT 54
38872: PUSH
38873: LD_INT 55
38875: PUSH
38876: LD_INT 56
38878: PUSH
38879: LD_INT 57
38881: PUSH
38882: LD_INT 58
38884: PUSH
38885: LD_INT 59
38887: PUSH
38888: LD_INT 63
38890: PUSH
38891: LD_INT 64
38893: PUSH
38894: LD_INT 65
38896: PUSH
38897: LD_INT 82
38899: PUSH
38900: LD_INT 83
38902: PUSH
38903: LD_INT 84
38905: PUSH
38906: LD_INT 85
38908: PUSH
38909: LD_INT 86
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: ST_TO_ADDR
38967: GO 38970
38969: POP
// if state > - 1 and state < 3 then
38970: LD_VAR 0 3
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: GREATER
38979: PUSH
38980: LD_VAR 0 3
38984: PUSH
38985: LD_INT 3
38987: LESS
38988: AND
38989: IFFALSE 39046
// for i in result do
38991: LD_ADDR_VAR 0 5
38995: PUSH
38996: LD_VAR 0 4
39000: PUSH
39001: FOR_IN
39002: IFFALSE 39044
// if GetTech ( i , side ) <> state then
39004: LD_VAR 0 5
39008: PPUSH
39009: LD_VAR 0 1
39013: PPUSH
39014: CALL_OW 321
39018: PUSH
39019: LD_VAR 0 3
39023: NONEQUAL
39024: IFFALSE 39042
// result := result diff i ;
39026: LD_ADDR_VAR 0 4
39030: PUSH
39031: LD_VAR 0 4
39035: PUSH
39036: LD_VAR 0 5
39040: DIFF
39041: ST_TO_ADDR
39042: GO 39001
39044: POP
39045: POP
// end ;
39046: LD_VAR 0 4
39050: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39051: LD_INT 0
39053: PPUSH
39054: PPUSH
39055: PPUSH
// result := true ;
39056: LD_ADDR_VAR 0 3
39060: PUSH
39061: LD_INT 1
39063: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39064: LD_ADDR_VAR 0 5
39068: PUSH
39069: LD_VAR 0 2
39073: PPUSH
39074: CALL_OW 480
39078: ST_TO_ADDR
// if not tmp then
39079: LD_VAR 0 5
39083: NOT
39084: IFFALSE 39088
// exit ;
39086: GO 39137
// for i in tmp do
39088: LD_ADDR_VAR 0 4
39092: PUSH
39093: LD_VAR 0 5
39097: PUSH
39098: FOR_IN
39099: IFFALSE 39135
// if GetTech ( i , side ) <> state_researched then
39101: LD_VAR 0 4
39105: PPUSH
39106: LD_VAR 0 1
39110: PPUSH
39111: CALL_OW 321
39115: PUSH
39116: LD_INT 2
39118: NONEQUAL
39119: IFFALSE 39133
// begin result := false ;
39121: LD_ADDR_VAR 0 3
39125: PUSH
39126: LD_INT 0
39128: ST_TO_ADDR
// exit ;
39129: POP
39130: POP
39131: GO 39137
// end ;
39133: GO 39098
39135: POP
39136: POP
// end ;
39137: LD_VAR 0 3
39141: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39142: LD_INT 0
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39157: LD_VAR 0 1
39161: NOT
39162: PUSH
39163: LD_VAR 0 1
39167: PPUSH
39168: CALL_OW 257
39172: PUSH
39173: LD_INT 9
39175: NONEQUAL
39176: OR
39177: IFFALSE 39181
// exit ;
39179: GO 39754
// side := GetSide ( unit ) ;
39181: LD_ADDR_VAR 0 9
39185: PUSH
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 255
39195: ST_TO_ADDR
// tech_space := tech_spacanom ;
39196: LD_ADDR_VAR 0 12
39200: PUSH
39201: LD_INT 29
39203: ST_TO_ADDR
// tech_time := tech_taurad ;
39204: LD_ADDR_VAR 0 13
39208: PUSH
39209: LD_INT 28
39211: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39212: LD_ADDR_VAR 0 11
39216: PUSH
39217: LD_VAR 0 1
39221: PPUSH
39222: CALL_OW 310
39226: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39227: LD_VAR 0 11
39231: PPUSH
39232: CALL_OW 247
39236: PUSH
39237: LD_INT 2
39239: EQUAL
39240: IFFALSE 39244
// exit ;
39242: GO 39754
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39244: LD_ADDR_VAR 0 8
39248: PUSH
39249: LD_INT 81
39251: PUSH
39252: LD_VAR 0 9
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 3
39263: PUSH
39264: LD_INT 21
39266: PUSH
39267: LD_INT 3
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PPUSH
39282: CALL_OW 69
39286: ST_TO_ADDR
// if not tmp then
39287: LD_VAR 0 8
39291: NOT
39292: IFFALSE 39296
// exit ;
39294: GO 39754
// if in_unit then
39296: LD_VAR 0 11
39300: IFFALSE 39324
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39302: LD_ADDR_VAR 0 10
39306: PUSH
39307: LD_VAR 0 8
39311: PPUSH
39312: LD_VAR 0 11
39316: PPUSH
39317: CALL_OW 74
39321: ST_TO_ADDR
39322: GO 39344
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39324: LD_ADDR_VAR 0 10
39328: PUSH
39329: LD_VAR 0 8
39333: PPUSH
39334: LD_VAR 0 1
39338: PPUSH
39339: CALL_OW 74
39343: ST_TO_ADDR
// if not enemy then
39344: LD_VAR 0 10
39348: NOT
39349: IFFALSE 39353
// exit ;
39351: GO 39754
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39353: LD_VAR 0 11
39357: PUSH
39358: LD_VAR 0 11
39362: PPUSH
39363: LD_VAR 0 10
39367: PPUSH
39368: CALL_OW 296
39372: PUSH
39373: LD_INT 13
39375: GREATER
39376: AND
39377: PUSH
39378: LD_VAR 0 1
39382: PPUSH
39383: LD_VAR 0 10
39387: PPUSH
39388: CALL_OW 296
39392: PUSH
39393: LD_INT 12
39395: GREATER
39396: OR
39397: IFFALSE 39401
// exit ;
39399: GO 39754
// missile := [ 1 ] ;
39401: LD_ADDR_VAR 0 14
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: EMPTY
39410: LIST
39411: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39412: LD_VAR 0 9
39416: PPUSH
39417: LD_VAR 0 12
39421: PPUSH
39422: CALL_OW 325
39426: IFFALSE 39455
// missile := Insert ( missile , missile + 1 , 2 ) ;
39428: LD_ADDR_VAR 0 14
39432: PUSH
39433: LD_VAR 0 14
39437: PPUSH
39438: LD_VAR 0 14
39442: PUSH
39443: LD_INT 1
39445: PLUS
39446: PPUSH
39447: LD_INT 2
39449: PPUSH
39450: CALL_OW 2
39454: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39455: LD_VAR 0 9
39459: PPUSH
39460: LD_VAR 0 13
39464: PPUSH
39465: CALL_OW 325
39469: PUSH
39470: LD_VAR 0 10
39474: PPUSH
39475: CALL_OW 255
39479: PPUSH
39480: LD_VAR 0 13
39484: PPUSH
39485: CALL_OW 325
39489: NOT
39490: AND
39491: IFFALSE 39520
// missile := Insert ( missile , missile + 1 , 3 ) ;
39493: LD_ADDR_VAR 0 14
39497: PUSH
39498: LD_VAR 0 14
39502: PPUSH
39503: LD_VAR 0 14
39507: PUSH
39508: LD_INT 1
39510: PLUS
39511: PPUSH
39512: LD_INT 3
39514: PPUSH
39515: CALL_OW 2
39519: ST_TO_ADDR
// if missile < 2 then
39520: LD_VAR 0 14
39524: PUSH
39525: LD_INT 2
39527: LESS
39528: IFFALSE 39532
// exit ;
39530: GO 39754
// x := GetX ( enemy ) ;
39532: LD_ADDR_VAR 0 4
39536: PUSH
39537: LD_VAR 0 10
39541: PPUSH
39542: CALL_OW 250
39546: ST_TO_ADDR
// y := GetY ( enemy ) ;
39547: LD_ADDR_VAR 0 5
39551: PUSH
39552: LD_VAR 0 10
39556: PPUSH
39557: CALL_OW 251
39561: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39562: LD_ADDR_VAR 0 6
39566: PUSH
39567: LD_VAR 0 4
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PPUSH
39576: LD_INT 1
39578: PPUSH
39579: CALL_OW 12
39583: PLUS
39584: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39585: LD_ADDR_VAR 0 7
39589: PUSH
39590: LD_VAR 0 5
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PPUSH
39599: LD_INT 1
39601: PPUSH
39602: CALL_OW 12
39606: PLUS
39607: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39608: LD_VAR 0 6
39612: PPUSH
39613: LD_VAR 0 7
39617: PPUSH
39618: CALL_OW 488
39622: NOT
39623: IFFALSE 39645
// begin _x := x ;
39625: LD_ADDR_VAR 0 6
39629: PUSH
39630: LD_VAR 0 4
39634: ST_TO_ADDR
// _y := y ;
39635: LD_ADDR_VAR 0 7
39639: PUSH
39640: LD_VAR 0 5
39644: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39645: LD_ADDR_VAR 0 3
39649: PUSH
39650: LD_INT 1
39652: PPUSH
39653: LD_VAR 0 14
39657: PPUSH
39658: CALL_OW 12
39662: ST_TO_ADDR
// case i of 1 :
39663: LD_VAR 0 3
39667: PUSH
39668: LD_INT 1
39670: DOUBLE
39671: EQUAL
39672: IFTRUE 39676
39674: GO 39693
39676: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39677: LD_VAR 0 1
39681: PPUSH
39682: LD_VAR 0 10
39686: PPUSH
39687: CALL_OW 115
39691: GO 39754
39693: LD_INT 2
39695: DOUBLE
39696: EQUAL
39697: IFTRUE 39701
39699: GO 39723
39701: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39702: LD_VAR 0 1
39706: PPUSH
39707: LD_VAR 0 6
39711: PPUSH
39712: LD_VAR 0 7
39716: PPUSH
39717: CALL_OW 153
39721: GO 39754
39723: LD_INT 3
39725: DOUBLE
39726: EQUAL
39727: IFTRUE 39731
39729: GO 39753
39731: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39732: LD_VAR 0 1
39736: PPUSH
39737: LD_VAR 0 6
39741: PPUSH
39742: LD_VAR 0 7
39746: PPUSH
39747: CALL_OW 154
39751: GO 39754
39753: POP
// end ;
39754: LD_VAR 0 2
39758: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39759: LD_INT 0
39761: PPUSH
39762: PPUSH
39763: PPUSH
39764: PPUSH
39765: PPUSH
39766: PPUSH
// if not unit or not building then
39767: LD_VAR 0 1
39771: NOT
39772: PUSH
39773: LD_VAR 0 2
39777: NOT
39778: OR
39779: IFFALSE 39783
// exit ;
39781: GO 39941
// x := GetX ( building ) ;
39783: LD_ADDR_VAR 0 5
39787: PUSH
39788: LD_VAR 0 2
39792: PPUSH
39793: CALL_OW 250
39797: ST_TO_ADDR
// y := GetY ( building ) ;
39798: LD_ADDR_VAR 0 6
39802: PUSH
39803: LD_VAR 0 2
39807: PPUSH
39808: CALL_OW 251
39812: ST_TO_ADDR
// for i = 0 to 5 do
39813: LD_ADDR_VAR 0 4
39817: PUSH
39818: DOUBLE
39819: LD_INT 0
39821: DEC
39822: ST_TO_ADDR
39823: LD_INT 5
39825: PUSH
39826: FOR_TO
39827: IFFALSE 39939
// begin _x := ShiftX ( x , i , 3 ) ;
39829: LD_ADDR_VAR 0 7
39833: PUSH
39834: LD_VAR 0 5
39838: PPUSH
39839: LD_VAR 0 4
39843: PPUSH
39844: LD_INT 3
39846: PPUSH
39847: CALL_OW 272
39851: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39852: LD_ADDR_VAR 0 8
39856: PUSH
39857: LD_VAR 0 6
39861: PPUSH
39862: LD_VAR 0 4
39866: PPUSH
39867: LD_INT 3
39869: PPUSH
39870: CALL_OW 273
39874: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39875: LD_VAR 0 7
39879: PPUSH
39880: LD_VAR 0 8
39884: PPUSH
39885: CALL_OW 488
39889: NOT
39890: IFFALSE 39894
// continue ;
39892: GO 39826
// if HexInfo ( _x , _y ) = 0 then
39894: LD_VAR 0 7
39898: PPUSH
39899: LD_VAR 0 8
39903: PPUSH
39904: CALL_OW 428
39908: PUSH
39909: LD_INT 0
39911: EQUAL
39912: IFFALSE 39937
// begin ComMoveXY ( unit , _x , _y ) ;
39914: LD_VAR 0 1
39918: PPUSH
39919: LD_VAR 0 7
39923: PPUSH
39924: LD_VAR 0 8
39928: PPUSH
39929: CALL_OW 111
// exit ;
39933: POP
39934: POP
39935: GO 39941
// end ; end ;
39937: GO 39826
39939: POP
39940: POP
// end ;
39941: LD_VAR 0 3
39945: RET
// export function ScanBase ( side , base_area ) ; begin
39946: LD_INT 0
39948: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39949: LD_ADDR_VAR 0 3
39953: PUSH
39954: LD_VAR 0 2
39958: PPUSH
39959: LD_INT 81
39961: PUSH
39962: LD_VAR 0 1
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PPUSH
39971: CALL_OW 70
39975: ST_TO_ADDR
// end ;
39976: LD_VAR 0 3
39980: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39981: LD_INT 0
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
// result := false ;
39987: LD_ADDR_VAR 0 2
39991: PUSH
39992: LD_INT 0
39994: ST_TO_ADDR
// side := GetSide ( unit ) ;
39995: LD_ADDR_VAR 0 3
39999: PUSH
40000: LD_VAR 0 1
40004: PPUSH
40005: CALL_OW 255
40009: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40010: LD_ADDR_VAR 0 4
40014: PUSH
40015: LD_VAR 0 1
40019: PPUSH
40020: CALL_OW 248
40024: ST_TO_ADDR
// case nat of 1 :
40025: LD_VAR 0 4
40029: PUSH
40030: LD_INT 1
40032: DOUBLE
40033: EQUAL
40034: IFTRUE 40038
40036: GO 40049
40038: POP
// tech := tech_lassight ; 2 :
40039: LD_ADDR_VAR 0 5
40043: PUSH
40044: LD_INT 12
40046: ST_TO_ADDR
40047: GO 40088
40049: LD_INT 2
40051: DOUBLE
40052: EQUAL
40053: IFTRUE 40057
40055: GO 40068
40057: POP
// tech := tech_mortar ; 3 :
40058: LD_ADDR_VAR 0 5
40062: PUSH
40063: LD_INT 41
40065: ST_TO_ADDR
40066: GO 40088
40068: LD_INT 3
40070: DOUBLE
40071: EQUAL
40072: IFTRUE 40076
40074: GO 40087
40076: POP
// tech := tech_bazooka ; end ;
40077: LD_ADDR_VAR 0 5
40081: PUSH
40082: LD_INT 44
40084: ST_TO_ADDR
40085: GO 40088
40087: POP
// if Researched ( side , tech ) then
40088: LD_VAR 0 3
40092: PPUSH
40093: LD_VAR 0 5
40097: PPUSH
40098: CALL_OW 325
40102: IFFALSE 40129
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40104: LD_ADDR_VAR 0 2
40108: PUSH
40109: LD_INT 5
40111: PUSH
40112: LD_INT 8
40114: PUSH
40115: LD_INT 9
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: PUSH
40123: LD_VAR 0 4
40127: ARRAY
40128: ST_TO_ADDR
// end ;
40129: LD_VAR 0 2
40133: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40134: LD_INT 0
40136: PPUSH
40137: PPUSH
40138: PPUSH
// if not mines then
40139: LD_VAR 0 2
40143: NOT
40144: IFFALSE 40148
// exit ;
40146: GO 40292
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40148: LD_ADDR_VAR 0 5
40152: PUSH
40153: LD_INT 81
40155: PUSH
40156: LD_VAR 0 1
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 3
40167: PUSH
40168: LD_INT 21
40170: PUSH
40171: LD_INT 3
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PPUSH
40186: CALL_OW 69
40190: ST_TO_ADDR
// for i in mines do
40191: LD_ADDR_VAR 0 4
40195: PUSH
40196: LD_VAR 0 2
40200: PUSH
40201: FOR_IN
40202: IFFALSE 40290
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40204: LD_VAR 0 4
40208: PUSH
40209: LD_INT 1
40211: ARRAY
40212: PPUSH
40213: LD_VAR 0 4
40217: PUSH
40218: LD_INT 2
40220: ARRAY
40221: PPUSH
40222: CALL_OW 458
40226: NOT
40227: IFFALSE 40231
// continue ;
40229: GO 40201
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40231: LD_VAR 0 4
40235: PUSH
40236: LD_INT 1
40238: ARRAY
40239: PPUSH
40240: LD_VAR 0 4
40244: PUSH
40245: LD_INT 2
40247: ARRAY
40248: PPUSH
40249: CALL_OW 428
40253: PUSH
40254: LD_VAR 0 5
40258: IN
40259: IFFALSE 40288
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40261: LD_VAR 0 4
40265: PUSH
40266: LD_INT 1
40268: ARRAY
40269: PPUSH
40270: LD_VAR 0 4
40274: PUSH
40275: LD_INT 2
40277: ARRAY
40278: PPUSH
40279: LD_VAR 0 1
40283: PPUSH
40284: CALL_OW 456
// end ;
40288: GO 40201
40290: POP
40291: POP
// end ;
40292: LD_VAR 0 3
40296: RET
// export function Count ( array ) ; var i ; begin
40297: LD_INT 0
40299: PPUSH
40300: PPUSH
// result := 0 ;
40301: LD_ADDR_VAR 0 2
40305: PUSH
40306: LD_INT 0
40308: ST_TO_ADDR
// for i in array do
40309: LD_ADDR_VAR 0 3
40313: PUSH
40314: LD_VAR 0 1
40318: PUSH
40319: FOR_IN
40320: IFFALSE 40344
// if i then
40322: LD_VAR 0 3
40326: IFFALSE 40342
// result := result + 1 ;
40328: LD_ADDR_VAR 0 2
40332: PUSH
40333: LD_VAR 0 2
40337: PUSH
40338: LD_INT 1
40340: PLUS
40341: ST_TO_ADDR
40342: GO 40319
40344: POP
40345: POP
// end ;
40346: LD_VAR 0 2
40350: RET
// export function IsEmpty ( building ) ; begin
40351: LD_INT 0
40353: PPUSH
// if not building then
40354: LD_VAR 0 1
40358: NOT
40359: IFFALSE 40363
// exit ;
40361: GO 40406
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40363: LD_ADDR_VAR 0 2
40367: PUSH
40368: LD_VAR 0 1
40372: PUSH
40373: LD_INT 22
40375: PUSH
40376: LD_VAR 0 1
40380: PPUSH
40381: CALL_OW 255
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 58
40392: PUSH
40393: EMPTY
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PPUSH
40400: CALL_OW 69
40404: IN
40405: ST_TO_ADDR
// end ;
40406: LD_VAR 0 2
40410: RET
// export function IsNotFull ( building ) ; begin
40411: LD_INT 0
40413: PPUSH
// if not building then
40414: LD_VAR 0 1
40418: NOT
40419: IFFALSE 40423
// exit ;
40421: GO 40442
// result := UnitsInside ( building ) < 6 ;
40423: LD_ADDR_VAR 0 2
40427: PUSH
40428: LD_VAR 0 1
40432: PPUSH
40433: CALL_OW 313
40437: PUSH
40438: LD_INT 6
40440: LESS
40441: ST_TO_ADDR
// end ;
40442: LD_VAR 0 2
40446: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40447: LD_INT 0
40449: PPUSH
40450: PPUSH
40451: PPUSH
40452: PPUSH
// tmp := [ ] ;
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: EMPTY
40459: ST_TO_ADDR
// list := [ ] ;
40460: LD_ADDR_VAR 0 5
40464: PUSH
40465: EMPTY
40466: ST_TO_ADDR
// for i = 16 to 25 do
40467: LD_ADDR_VAR 0 4
40471: PUSH
40472: DOUBLE
40473: LD_INT 16
40475: DEC
40476: ST_TO_ADDR
40477: LD_INT 25
40479: PUSH
40480: FOR_TO
40481: IFFALSE 40554
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40483: LD_ADDR_VAR 0 3
40487: PUSH
40488: LD_VAR 0 3
40492: PUSH
40493: LD_INT 22
40495: PUSH
40496: LD_VAR 0 1
40500: PPUSH
40501: CALL_OW 255
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 91
40512: PUSH
40513: LD_VAR 0 1
40517: PUSH
40518: LD_INT 6
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 30
40528: PUSH
40529: LD_VAR 0 4
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: LIST
40542: PUSH
40543: EMPTY
40544: LIST
40545: PPUSH
40546: CALL_OW 69
40550: ADD
40551: ST_TO_ADDR
40552: GO 40480
40554: POP
40555: POP
// for i = 1 to tmp do
40556: LD_ADDR_VAR 0 4
40560: PUSH
40561: DOUBLE
40562: LD_INT 1
40564: DEC
40565: ST_TO_ADDR
40566: LD_VAR 0 3
40570: PUSH
40571: FOR_TO
40572: IFFALSE 40660
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40574: LD_ADDR_VAR 0 5
40578: PUSH
40579: LD_VAR 0 5
40583: PUSH
40584: LD_VAR 0 3
40588: PUSH
40589: LD_VAR 0 4
40593: ARRAY
40594: PPUSH
40595: CALL_OW 266
40599: PUSH
40600: LD_VAR 0 3
40604: PUSH
40605: LD_VAR 0 4
40609: ARRAY
40610: PPUSH
40611: CALL_OW 250
40615: PUSH
40616: LD_VAR 0 3
40620: PUSH
40621: LD_VAR 0 4
40625: ARRAY
40626: PPUSH
40627: CALL_OW 251
40631: PUSH
40632: LD_VAR 0 3
40636: PUSH
40637: LD_VAR 0 4
40641: ARRAY
40642: PPUSH
40643: CALL_OW 254
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: PUSH
40654: EMPTY
40655: LIST
40656: ADD
40657: ST_TO_ADDR
40658: GO 40571
40660: POP
40661: POP
// result := list ;
40662: LD_ADDR_VAR 0 2
40666: PUSH
40667: LD_VAR 0 5
40671: ST_TO_ADDR
// end ;
40672: LD_VAR 0 2
40676: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40677: LD_INT 0
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
// if not factory then
40686: LD_VAR 0 1
40690: NOT
40691: IFFALSE 40695
// exit ;
40693: GO 41288
// if control = control_apeman then
40695: LD_VAR 0 4
40699: PUSH
40700: LD_INT 5
40702: EQUAL
40703: IFFALSE 40812
// begin tmp := UnitsInside ( factory ) ;
40705: LD_ADDR_VAR 0 8
40709: PUSH
40710: LD_VAR 0 1
40714: PPUSH
40715: CALL_OW 313
40719: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40720: LD_VAR 0 8
40724: PPUSH
40725: LD_INT 25
40727: PUSH
40728: LD_INT 12
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PPUSH
40735: CALL_OW 72
40739: NOT
40740: IFFALSE 40750
// control := control_manual ;
40742: LD_ADDR_VAR 0 4
40746: PUSH
40747: LD_INT 1
40749: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40750: LD_ADDR_VAR 0 8
40754: PUSH
40755: LD_VAR 0 1
40759: PPUSH
40760: CALL 40447 0 1
40764: ST_TO_ADDR
// if tmp then
40765: LD_VAR 0 8
40769: IFFALSE 40812
// begin for i in tmp do
40771: LD_ADDR_VAR 0 7
40775: PUSH
40776: LD_VAR 0 8
40780: PUSH
40781: FOR_IN
40782: IFFALSE 40810
// if i [ 1 ] = b_ext_radio then
40784: LD_VAR 0 7
40788: PUSH
40789: LD_INT 1
40791: ARRAY
40792: PUSH
40793: LD_INT 22
40795: EQUAL
40796: IFFALSE 40808
// begin control := control_remote ;
40798: LD_ADDR_VAR 0 4
40802: PUSH
40803: LD_INT 2
40805: ST_TO_ADDR
// break ;
40806: GO 40810
// end ;
40808: GO 40781
40810: POP
40811: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40812: LD_VAR 0 1
40816: PPUSH
40817: LD_VAR 0 2
40821: PPUSH
40822: LD_VAR 0 3
40826: PPUSH
40827: LD_VAR 0 4
40831: PPUSH
40832: LD_VAR 0 5
40836: PPUSH
40837: CALL_OW 448
40841: IFFALSE 40876
// begin result := [ chassis , engine , control , weapon ] ;
40843: LD_ADDR_VAR 0 6
40847: PUSH
40848: LD_VAR 0 2
40852: PUSH
40853: LD_VAR 0 3
40857: PUSH
40858: LD_VAR 0 4
40862: PUSH
40863: LD_VAR 0 5
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: ST_TO_ADDR
// exit ;
40874: GO 41288
// end ; _chassis := AvailableChassisList ( factory ) ;
40876: LD_ADDR_VAR 0 9
40880: PUSH
40881: LD_VAR 0 1
40885: PPUSH
40886: CALL_OW 475
40890: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40891: LD_ADDR_VAR 0 11
40895: PUSH
40896: LD_VAR 0 1
40900: PPUSH
40901: CALL_OW 476
40905: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40906: LD_ADDR_VAR 0 12
40910: PUSH
40911: LD_VAR 0 1
40915: PPUSH
40916: CALL_OW 477
40920: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40921: LD_ADDR_VAR 0 10
40925: PUSH
40926: LD_VAR 0 1
40930: PPUSH
40931: CALL_OW 478
40935: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40936: LD_VAR 0 9
40940: NOT
40941: PUSH
40942: LD_VAR 0 11
40946: NOT
40947: OR
40948: PUSH
40949: LD_VAR 0 12
40953: NOT
40954: OR
40955: PUSH
40956: LD_VAR 0 10
40960: NOT
40961: OR
40962: IFFALSE 40997
// begin result := [ chassis , engine , control , weapon ] ;
40964: LD_ADDR_VAR 0 6
40968: PUSH
40969: LD_VAR 0 2
40973: PUSH
40974: LD_VAR 0 3
40978: PUSH
40979: LD_VAR 0 4
40983: PUSH
40984: LD_VAR 0 5
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: ST_TO_ADDR
// exit ;
40995: GO 41288
// end ; if not chassis in _chassis then
40997: LD_VAR 0 2
41001: PUSH
41002: LD_VAR 0 9
41006: IN
41007: NOT
41008: IFFALSE 41034
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41010: LD_ADDR_VAR 0 2
41014: PUSH
41015: LD_VAR 0 9
41019: PUSH
41020: LD_INT 1
41022: PPUSH
41023: LD_VAR 0 9
41027: PPUSH
41028: CALL_OW 12
41032: ARRAY
41033: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41034: LD_VAR 0 2
41038: PPUSH
41039: LD_VAR 0 3
41043: PPUSH
41044: CALL 41293 0 2
41048: NOT
41049: IFFALSE 41108
// repeat engine := _engine [ 1 ] ;
41051: LD_ADDR_VAR 0 3
41055: PUSH
41056: LD_VAR 0 11
41060: PUSH
41061: LD_INT 1
41063: ARRAY
41064: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41065: LD_ADDR_VAR 0 11
41069: PUSH
41070: LD_VAR 0 11
41074: PPUSH
41075: LD_INT 1
41077: PPUSH
41078: CALL_OW 3
41082: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41083: LD_VAR 0 2
41087: PPUSH
41088: LD_VAR 0 3
41092: PPUSH
41093: CALL 41293 0 2
41097: PUSH
41098: LD_VAR 0 11
41102: PUSH
41103: EMPTY
41104: EQUAL
41105: OR
41106: IFFALSE 41051
// if not control in _control then
41108: LD_VAR 0 4
41112: PUSH
41113: LD_VAR 0 12
41117: IN
41118: NOT
41119: IFFALSE 41145
// control := _control [ rand ( 1 , _control ) ] ;
41121: LD_ADDR_VAR 0 4
41125: PUSH
41126: LD_VAR 0 12
41130: PUSH
41131: LD_INT 1
41133: PPUSH
41134: LD_VAR 0 12
41138: PPUSH
41139: CALL_OW 12
41143: ARRAY
41144: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41145: LD_VAR 0 2
41149: PPUSH
41150: LD_VAR 0 5
41154: PPUSH
41155: CALL 41513 0 2
41159: NOT
41160: IFFALSE 41219
// repeat weapon := _weapon [ 1 ] ;
41162: LD_ADDR_VAR 0 5
41166: PUSH
41167: LD_VAR 0 10
41171: PUSH
41172: LD_INT 1
41174: ARRAY
41175: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41176: LD_ADDR_VAR 0 10
41180: PUSH
41181: LD_VAR 0 10
41185: PPUSH
41186: LD_INT 1
41188: PPUSH
41189: CALL_OW 3
41193: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41194: LD_VAR 0 2
41198: PPUSH
41199: LD_VAR 0 5
41203: PPUSH
41204: CALL 41513 0 2
41208: PUSH
41209: LD_VAR 0 10
41213: PUSH
41214: EMPTY
41215: EQUAL
41216: OR
41217: IFFALSE 41162
// result := [ ] ;
41219: LD_ADDR_VAR 0 6
41223: PUSH
41224: EMPTY
41225: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41226: LD_VAR 0 1
41230: PPUSH
41231: LD_VAR 0 2
41235: PPUSH
41236: LD_VAR 0 3
41240: PPUSH
41241: LD_VAR 0 4
41245: PPUSH
41246: LD_VAR 0 5
41250: PPUSH
41251: CALL_OW 448
41255: IFFALSE 41288
// result := [ chassis , engine , control , weapon ] ;
41257: LD_ADDR_VAR 0 6
41261: PUSH
41262: LD_VAR 0 2
41266: PUSH
41267: LD_VAR 0 3
41271: PUSH
41272: LD_VAR 0 4
41276: PUSH
41277: LD_VAR 0 5
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: ST_TO_ADDR
// end ;
41288: LD_VAR 0 6
41292: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41293: LD_INT 0
41295: PPUSH
// if not chassis or not engine then
41296: LD_VAR 0 1
41300: NOT
41301: PUSH
41302: LD_VAR 0 2
41306: NOT
41307: OR
41308: IFFALSE 41312
// exit ;
41310: GO 41508
// case engine of engine_solar :
41312: LD_VAR 0 2
41316: PUSH
41317: LD_INT 2
41319: DOUBLE
41320: EQUAL
41321: IFTRUE 41325
41323: GO 41363
41325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41326: LD_ADDR_VAR 0 3
41330: PUSH
41331: LD_INT 11
41333: PUSH
41334: LD_INT 12
41336: PUSH
41337: LD_INT 13
41339: PUSH
41340: LD_INT 14
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: LD_INT 3
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: ST_TO_ADDR
41361: GO 41492
41363: LD_INT 1
41365: DOUBLE
41366: EQUAL
41367: IFTRUE 41371
41369: GO 41433
41371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41372: LD_ADDR_VAR 0 3
41376: PUSH
41377: LD_INT 11
41379: PUSH
41380: LD_INT 12
41382: PUSH
41383: LD_INT 13
41385: PUSH
41386: LD_INT 14
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: LD_INT 2
41394: PUSH
41395: LD_INT 3
41397: PUSH
41398: LD_INT 4
41400: PUSH
41401: LD_INT 5
41403: PUSH
41404: LD_INT 21
41406: PUSH
41407: LD_INT 23
41409: PUSH
41410: LD_INT 22
41412: PUSH
41413: LD_INT 24
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: ST_TO_ADDR
41431: GO 41492
41433: LD_INT 3
41435: DOUBLE
41436: EQUAL
41437: IFTRUE 41441
41439: GO 41491
41441: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41442: LD_ADDR_VAR 0 3
41446: PUSH
41447: LD_INT 13
41449: PUSH
41450: LD_INT 14
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 3
41458: PUSH
41459: LD_INT 4
41461: PUSH
41462: LD_INT 5
41464: PUSH
41465: LD_INT 21
41467: PUSH
41468: LD_INT 22
41470: PUSH
41471: LD_INT 23
41473: PUSH
41474: LD_INT 24
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: ST_TO_ADDR
41489: GO 41492
41491: POP
// result := ( chassis in result ) ;
41492: LD_ADDR_VAR 0 3
41496: PUSH
41497: LD_VAR 0 1
41501: PUSH
41502: LD_VAR 0 3
41506: IN
41507: ST_TO_ADDR
// end ;
41508: LD_VAR 0 3
41512: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41513: LD_INT 0
41515: PPUSH
// if not chassis or not weapon then
41516: LD_VAR 0 1
41520: NOT
41521: PUSH
41522: LD_VAR 0 2
41526: NOT
41527: OR
41528: IFFALSE 41532
// exit ;
41530: GO 42594
// case weapon of us_machine_gun :
41532: LD_VAR 0 2
41536: PUSH
41537: LD_INT 2
41539: DOUBLE
41540: EQUAL
41541: IFTRUE 41545
41543: GO 41575
41545: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41546: LD_ADDR_VAR 0 3
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: LD_INT 3
41559: PUSH
41560: LD_INT 4
41562: PUSH
41563: LD_INT 5
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: ST_TO_ADDR
41573: GO 42578
41575: LD_INT 3
41577: DOUBLE
41578: EQUAL
41579: IFTRUE 41583
41581: GO 41613
41583: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41584: LD_ADDR_VAR 0 3
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: LD_INT 3
41597: PUSH
41598: LD_INT 4
41600: PUSH
41601: LD_INT 5
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: ST_TO_ADDR
41611: GO 42578
41613: LD_INT 11
41615: DOUBLE
41616: EQUAL
41617: IFTRUE 41621
41619: GO 41651
41621: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41622: LD_ADDR_VAR 0 3
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: LD_INT 2
41632: PUSH
41633: LD_INT 3
41635: PUSH
41636: LD_INT 4
41638: PUSH
41639: LD_INT 5
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: ST_TO_ADDR
41649: GO 42578
41651: LD_INT 4
41653: DOUBLE
41654: EQUAL
41655: IFTRUE 41659
41657: GO 41685
41659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: LD_INT 4
41673: PUSH
41674: LD_INT 5
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: ST_TO_ADDR
41683: GO 42578
41685: LD_INT 5
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41693
41691: GO 41719
41693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41694: LD_ADDR_VAR 0 3
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: LD_INT 3
41704: PUSH
41705: LD_INT 4
41707: PUSH
41708: LD_INT 5
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: ST_TO_ADDR
41717: GO 42578
41719: LD_INT 9
41721: DOUBLE
41722: EQUAL
41723: IFTRUE 41727
41725: GO 41753
41727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41728: LD_ADDR_VAR 0 3
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: LD_INT 3
41738: PUSH
41739: LD_INT 4
41741: PUSH
41742: LD_INT 5
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: ST_TO_ADDR
41751: GO 42578
41753: LD_INT 7
41755: DOUBLE
41756: EQUAL
41757: IFTRUE 41761
41759: GO 41787
41761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41762: LD_ADDR_VAR 0 3
41766: PUSH
41767: LD_INT 2
41769: PUSH
41770: LD_INT 3
41772: PUSH
41773: LD_INT 4
41775: PUSH
41776: LD_INT 5
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: ST_TO_ADDR
41785: GO 42578
41787: LD_INT 12
41789: DOUBLE
41790: EQUAL
41791: IFTRUE 41795
41793: GO 41821
41795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41796: LD_ADDR_VAR 0 3
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 3
41806: PUSH
41807: LD_INT 4
41809: PUSH
41810: LD_INT 5
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: ST_TO_ADDR
41819: GO 42578
41821: LD_INT 13
41823: DOUBLE
41824: EQUAL
41825: IFTRUE 41829
41827: GO 41855
41829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41830: LD_ADDR_VAR 0 3
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: LD_INT 3
41840: PUSH
41841: LD_INT 4
41843: PUSH
41844: LD_INT 5
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: ST_TO_ADDR
41853: GO 42578
41855: LD_INT 14
41857: DOUBLE
41858: EQUAL
41859: IFTRUE 41863
41861: GO 41881
41863: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41864: LD_ADDR_VAR 0 3
41868: PUSH
41869: LD_INT 4
41871: PUSH
41872: LD_INT 5
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: ST_TO_ADDR
41879: GO 42578
41881: LD_INT 6
41883: DOUBLE
41884: EQUAL
41885: IFTRUE 41889
41887: GO 41907
41889: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: LD_INT 4
41897: PUSH
41898: LD_INT 5
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: ST_TO_ADDR
41905: GO 42578
41907: LD_INT 10
41909: DOUBLE
41910: EQUAL
41911: IFTRUE 41915
41913: GO 41933
41915: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41916: LD_ADDR_VAR 0 3
41920: PUSH
41921: LD_INT 4
41923: PUSH
41924: LD_INT 5
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: ST_TO_ADDR
41931: GO 42578
41933: LD_INT 22
41935: DOUBLE
41936: EQUAL
41937: IFTRUE 41941
41939: GO 41967
41941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41942: LD_ADDR_VAR 0 3
41946: PUSH
41947: LD_INT 11
41949: PUSH
41950: LD_INT 12
41952: PUSH
41953: LD_INT 13
41955: PUSH
41956: LD_INT 14
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: ST_TO_ADDR
41965: GO 42578
41967: LD_INT 23
41969: DOUBLE
41970: EQUAL
41971: IFTRUE 41975
41973: GO 42001
41975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41976: LD_ADDR_VAR 0 3
41980: PUSH
41981: LD_INT 11
41983: PUSH
41984: LD_INT 12
41986: PUSH
41987: LD_INT 13
41989: PUSH
41990: LD_INT 14
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: ST_TO_ADDR
41999: GO 42578
42001: LD_INT 24
42003: DOUBLE
42004: EQUAL
42005: IFTRUE 42009
42007: GO 42035
42009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42010: LD_ADDR_VAR 0 3
42014: PUSH
42015: LD_INT 11
42017: PUSH
42018: LD_INT 12
42020: PUSH
42021: LD_INT 13
42023: PUSH
42024: LD_INT 14
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: ST_TO_ADDR
42033: GO 42578
42035: LD_INT 30
42037: DOUBLE
42038: EQUAL
42039: IFTRUE 42043
42041: GO 42069
42043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42044: LD_ADDR_VAR 0 3
42048: PUSH
42049: LD_INT 11
42051: PUSH
42052: LD_INT 12
42054: PUSH
42055: LD_INT 13
42057: PUSH
42058: LD_INT 14
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: ST_TO_ADDR
42067: GO 42578
42069: LD_INT 25
42071: DOUBLE
42072: EQUAL
42073: IFTRUE 42077
42075: GO 42095
42077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42078: LD_ADDR_VAR 0 3
42082: PUSH
42083: LD_INT 13
42085: PUSH
42086: LD_INT 14
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: ST_TO_ADDR
42093: GO 42578
42095: LD_INT 27
42097: DOUBLE
42098: EQUAL
42099: IFTRUE 42103
42101: GO 42121
42103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42104: LD_ADDR_VAR 0 3
42108: PUSH
42109: LD_INT 13
42111: PUSH
42112: LD_INT 14
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: ST_TO_ADDR
42119: GO 42578
42121: LD_EXP 162
42125: DOUBLE
42126: EQUAL
42127: IFTRUE 42131
42129: GO 42157
42131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42132: LD_ADDR_VAR 0 3
42136: PUSH
42137: LD_INT 11
42139: PUSH
42140: LD_INT 12
42142: PUSH
42143: LD_INT 13
42145: PUSH
42146: LD_INT 14
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: ST_TO_ADDR
42155: GO 42578
42157: LD_INT 28
42159: DOUBLE
42160: EQUAL
42161: IFTRUE 42165
42163: GO 42183
42165: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42166: LD_ADDR_VAR 0 3
42170: PUSH
42171: LD_INT 13
42173: PUSH
42174: LD_INT 14
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: ST_TO_ADDR
42181: GO 42578
42183: LD_INT 29
42185: DOUBLE
42186: EQUAL
42187: IFTRUE 42191
42189: GO 42209
42191: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42192: LD_ADDR_VAR 0 3
42196: PUSH
42197: LD_INT 13
42199: PUSH
42200: LD_INT 14
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: ST_TO_ADDR
42207: GO 42578
42209: LD_INT 31
42211: DOUBLE
42212: EQUAL
42213: IFTRUE 42217
42215: GO 42235
42217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42218: LD_ADDR_VAR 0 3
42222: PUSH
42223: LD_INT 13
42225: PUSH
42226: LD_INT 14
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: ST_TO_ADDR
42233: GO 42578
42235: LD_INT 26
42237: DOUBLE
42238: EQUAL
42239: IFTRUE 42243
42241: GO 42261
42243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42244: LD_ADDR_VAR 0 3
42248: PUSH
42249: LD_INT 13
42251: PUSH
42252: LD_INT 14
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: ST_TO_ADDR
42259: GO 42578
42261: LD_INT 42
42263: DOUBLE
42264: EQUAL
42265: IFTRUE 42269
42267: GO 42295
42269: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42270: LD_ADDR_VAR 0 3
42274: PUSH
42275: LD_INT 21
42277: PUSH
42278: LD_INT 22
42280: PUSH
42281: LD_INT 23
42283: PUSH
42284: LD_INT 24
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: ST_TO_ADDR
42293: GO 42578
42295: LD_INT 43
42297: DOUBLE
42298: EQUAL
42299: IFTRUE 42303
42301: GO 42329
42303: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42304: LD_ADDR_VAR 0 3
42308: PUSH
42309: LD_INT 21
42311: PUSH
42312: LD_INT 22
42314: PUSH
42315: LD_INT 23
42317: PUSH
42318: LD_INT 24
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: ST_TO_ADDR
42327: GO 42578
42329: LD_INT 44
42331: DOUBLE
42332: EQUAL
42333: IFTRUE 42337
42335: GO 42363
42337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42338: LD_ADDR_VAR 0 3
42342: PUSH
42343: LD_INT 21
42345: PUSH
42346: LD_INT 22
42348: PUSH
42349: LD_INT 23
42351: PUSH
42352: LD_INT 24
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: ST_TO_ADDR
42361: GO 42578
42363: LD_INT 45
42365: DOUBLE
42366: EQUAL
42367: IFTRUE 42371
42369: GO 42397
42371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42372: LD_ADDR_VAR 0 3
42376: PUSH
42377: LD_INT 21
42379: PUSH
42380: LD_INT 22
42382: PUSH
42383: LD_INT 23
42385: PUSH
42386: LD_INT 24
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: ST_TO_ADDR
42395: GO 42578
42397: LD_INT 49
42399: DOUBLE
42400: EQUAL
42401: IFTRUE 42405
42403: GO 42431
42405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42406: LD_ADDR_VAR 0 3
42410: PUSH
42411: LD_INT 21
42413: PUSH
42414: LD_INT 22
42416: PUSH
42417: LD_INT 23
42419: PUSH
42420: LD_INT 24
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: ST_TO_ADDR
42429: GO 42578
42431: LD_INT 51
42433: DOUBLE
42434: EQUAL
42435: IFTRUE 42439
42437: GO 42465
42439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42440: LD_ADDR_VAR 0 3
42444: PUSH
42445: LD_INT 21
42447: PUSH
42448: LD_INT 22
42450: PUSH
42451: LD_INT 23
42453: PUSH
42454: LD_INT 24
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: ST_TO_ADDR
42463: GO 42578
42465: LD_INT 52
42467: DOUBLE
42468: EQUAL
42469: IFTRUE 42473
42471: GO 42499
42473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42474: LD_ADDR_VAR 0 3
42478: PUSH
42479: LD_INT 21
42481: PUSH
42482: LD_INT 22
42484: PUSH
42485: LD_INT 23
42487: PUSH
42488: LD_INT 24
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: ST_TO_ADDR
42497: GO 42578
42499: LD_INT 53
42501: DOUBLE
42502: EQUAL
42503: IFTRUE 42507
42505: GO 42525
42507: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42508: LD_ADDR_VAR 0 3
42512: PUSH
42513: LD_INT 23
42515: PUSH
42516: LD_INT 24
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: ST_TO_ADDR
42523: GO 42578
42525: LD_INT 46
42527: DOUBLE
42528: EQUAL
42529: IFTRUE 42533
42531: GO 42551
42533: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42534: LD_ADDR_VAR 0 3
42538: PUSH
42539: LD_INT 23
42541: PUSH
42542: LD_INT 24
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: ST_TO_ADDR
42549: GO 42578
42551: LD_INT 47
42553: DOUBLE
42554: EQUAL
42555: IFTRUE 42559
42557: GO 42577
42559: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42560: LD_ADDR_VAR 0 3
42564: PUSH
42565: LD_INT 23
42567: PUSH
42568: LD_INT 24
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: ST_TO_ADDR
42575: GO 42578
42577: POP
// result := ( chassis in result ) ;
42578: LD_ADDR_VAR 0 3
42582: PUSH
42583: LD_VAR 0 1
42587: PUSH
42588: LD_VAR 0 3
42592: IN
42593: ST_TO_ADDR
// end ;
42594: LD_VAR 0 3
42598: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42599: LD_INT 0
42601: PPUSH
42602: PPUSH
42603: PPUSH
42604: PPUSH
42605: PPUSH
42606: PPUSH
42607: PPUSH
// result := array ;
42608: LD_ADDR_VAR 0 5
42612: PUSH
42613: LD_VAR 0 1
42617: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42618: LD_VAR 0 1
42622: NOT
42623: PUSH
42624: LD_VAR 0 2
42628: NOT
42629: OR
42630: PUSH
42631: LD_VAR 0 3
42635: NOT
42636: OR
42637: PUSH
42638: LD_VAR 0 2
42642: PUSH
42643: LD_VAR 0 1
42647: GREATER
42648: OR
42649: PUSH
42650: LD_VAR 0 3
42654: PUSH
42655: LD_VAR 0 1
42659: GREATER
42660: OR
42661: IFFALSE 42665
// exit ;
42663: GO 42961
// if direction then
42665: LD_VAR 0 4
42669: IFFALSE 42733
// begin d := 1 ;
42671: LD_ADDR_VAR 0 9
42675: PUSH
42676: LD_INT 1
42678: ST_TO_ADDR
// if i_from > i_to then
42679: LD_VAR 0 2
42683: PUSH
42684: LD_VAR 0 3
42688: GREATER
42689: IFFALSE 42715
// length := ( array - i_from ) + i_to else
42691: LD_ADDR_VAR 0 11
42695: PUSH
42696: LD_VAR 0 1
42700: PUSH
42701: LD_VAR 0 2
42705: MINUS
42706: PUSH
42707: LD_VAR 0 3
42711: PLUS
42712: ST_TO_ADDR
42713: GO 42731
// length := i_to - i_from ;
42715: LD_ADDR_VAR 0 11
42719: PUSH
42720: LD_VAR 0 3
42724: PUSH
42725: LD_VAR 0 2
42729: MINUS
42730: ST_TO_ADDR
// end else
42731: GO 42794
// begin d := - 1 ;
42733: LD_ADDR_VAR 0 9
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: ST_TO_ADDR
// if i_from > i_to then
42742: LD_VAR 0 2
42746: PUSH
42747: LD_VAR 0 3
42751: GREATER
42752: IFFALSE 42772
// length := i_from - i_to else
42754: LD_ADDR_VAR 0 11
42758: PUSH
42759: LD_VAR 0 2
42763: PUSH
42764: LD_VAR 0 3
42768: MINUS
42769: ST_TO_ADDR
42770: GO 42794
// length := ( array - i_to ) + i_from ;
42772: LD_ADDR_VAR 0 11
42776: PUSH
42777: LD_VAR 0 1
42781: PUSH
42782: LD_VAR 0 3
42786: MINUS
42787: PUSH
42788: LD_VAR 0 2
42792: PLUS
42793: ST_TO_ADDR
// end ; if not length then
42794: LD_VAR 0 11
42798: NOT
42799: IFFALSE 42803
// exit ;
42801: GO 42961
// tmp := array ;
42803: LD_ADDR_VAR 0 10
42807: PUSH
42808: LD_VAR 0 1
42812: ST_TO_ADDR
// for i = 1 to length do
42813: LD_ADDR_VAR 0 6
42817: PUSH
42818: DOUBLE
42819: LD_INT 1
42821: DEC
42822: ST_TO_ADDR
42823: LD_VAR 0 11
42827: PUSH
42828: FOR_TO
42829: IFFALSE 42949
// begin for j = 1 to array do
42831: LD_ADDR_VAR 0 7
42835: PUSH
42836: DOUBLE
42837: LD_INT 1
42839: DEC
42840: ST_TO_ADDR
42841: LD_VAR 0 1
42845: PUSH
42846: FOR_TO
42847: IFFALSE 42935
// begin k := j + d ;
42849: LD_ADDR_VAR 0 8
42853: PUSH
42854: LD_VAR 0 7
42858: PUSH
42859: LD_VAR 0 9
42863: PLUS
42864: ST_TO_ADDR
// if k > array then
42865: LD_VAR 0 8
42869: PUSH
42870: LD_VAR 0 1
42874: GREATER
42875: IFFALSE 42885
// k := 1 ;
42877: LD_ADDR_VAR 0 8
42881: PUSH
42882: LD_INT 1
42884: ST_TO_ADDR
// if not k then
42885: LD_VAR 0 8
42889: NOT
42890: IFFALSE 42902
// k := array ;
42892: LD_ADDR_VAR 0 8
42896: PUSH
42897: LD_VAR 0 1
42901: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42902: LD_ADDR_VAR 0 10
42906: PUSH
42907: LD_VAR 0 10
42911: PPUSH
42912: LD_VAR 0 8
42916: PPUSH
42917: LD_VAR 0 1
42921: PUSH
42922: LD_VAR 0 7
42926: ARRAY
42927: PPUSH
42928: CALL_OW 1
42932: ST_TO_ADDR
// end ;
42933: GO 42846
42935: POP
42936: POP
// array := tmp ;
42937: LD_ADDR_VAR 0 1
42941: PUSH
42942: LD_VAR 0 10
42946: ST_TO_ADDR
// end ;
42947: GO 42828
42949: POP
42950: POP
// result := array ;
42951: LD_ADDR_VAR 0 5
42955: PUSH
42956: LD_VAR 0 1
42960: ST_TO_ADDR
// end ;
42961: LD_VAR 0 5
42965: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42966: LD_INT 0
42968: PPUSH
42969: PPUSH
// result := 0 ;
42970: LD_ADDR_VAR 0 3
42974: PUSH
42975: LD_INT 0
42977: ST_TO_ADDR
// if not array or not value in array then
42978: LD_VAR 0 1
42982: NOT
42983: PUSH
42984: LD_VAR 0 2
42988: PUSH
42989: LD_VAR 0 1
42993: IN
42994: NOT
42995: OR
42996: IFFALSE 43000
// exit ;
42998: GO 43054
// for i = 1 to array do
43000: LD_ADDR_VAR 0 4
43004: PUSH
43005: DOUBLE
43006: LD_INT 1
43008: DEC
43009: ST_TO_ADDR
43010: LD_VAR 0 1
43014: PUSH
43015: FOR_TO
43016: IFFALSE 43052
// if value = array [ i ] then
43018: LD_VAR 0 2
43022: PUSH
43023: LD_VAR 0 1
43027: PUSH
43028: LD_VAR 0 4
43032: ARRAY
43033: EQUAL
43034: IFFALSE 43050
// begin result := i ;
43036: LD_ADDR_VAR 0 3
43040: PUSH
43041: LD_VAR 0 4
43045: ST_TO_ADDR
// exit ;
43046: POP
43047: POP
43048: GO 43054
// end ;
43050: GO 43015
43052: POP
43053: POP
// end ;
43054: LD_VAR 0 3
43058: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43059: LD_INT 0
43061: PPUSH
// vc_chassis := chassis ;
43062: LD_ADDR_OWVAR 37
43066: PUSH
43067: LD_VAR 0 1
43071: ST_TO_ADDR
// vc_engine := engine ;
43072: LD_ADDR_OWVAR 39
43076: PUSH
43077: LD_VAR 0 2
43081: ST_TO_ADDR
// vc_control := control ;
43082: LD_ADDR_OWVAR 38
43086: PUSH
43087: LD_VAR 0 3
43091: ST_TO_ADDR
// vc_weapon := weapon ;
43092: LD_ADDR_OWVAR 40
43096: PUSH
43097: LD_VAR 0 4
43101: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43102: LD_ADDR_OWVAR 41
43106: PUSH
43107: LD_VAR 0 5
43111: ST_TO_ADDR
// end ;
43112: LD_VAR 0 6
43116: RET
// export function WantPlant ( unit ) ; var task ; begin
43117: LD_INT 0
43119: PPUSH
43120: PPUSH
// result := false ;
43121: LD_ADDR_VAR 0 2
43125: PUSH
43126: LD_INT 0
43128: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43129: LD_ADDR_VAR 0 3
43133: PUSH
43134: LD_VAR 0 1
43138: PPUSH
43139: CALL_OW 437
43143: ST_TO_ADDR
// if task then
43144: LD_VAR 0 3
43148: IFFALSE 43176
// if task [ 1 ] [ 1 ] = p then
43150: LD_VAR 0 3
43154: PUSH
43155: LD_INT 1
43157: ARRAY
43158: PUSH
43159: LD_INT 1
43161: ARRAY
43162: PUSH
43163: LD_STRING p
43165: EQUAL
43166: IFFALSE 43176
// result := true ;
43168: LD_ADDR_VAR 0 2
43172: PUSH
43173: LD_INT 1
43175: ST_TO_ADDR
// end ;
43176: LD_VAR 0 2
43180: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43181: LD_INT 0
43183: PPUSH
43184: PPUSH
43185: PPUSH
43186: PPUSH
// if pos < 1 then
43187: LD_VAR 0 2
43191: PUSH
43192: LD_INT 1
43194: LESS
43195: IFFALSE 43199
// exit ;
43197: GO 43502
// if pos = 1 then
43199: LD_VAR 0 2
43203: PUSH
43204: LD_INT 1
43206: EQUAL
43207: IFFALSE 43240
// result := Replace ( arr , pos [ 1 ] , value ) else
43209: LD_ADDR_VAR 0 4
43213: PUSH
43214: LD_VAR 0 1
43218: PPUSH
43219: LD_VAR 0 2
43223: PUSH
43224: LD_INT 1
43226: ARRAY
43227: PPUSH
43228: LD_VAR 0 3
43232: PPUSH
43233: CALL_OW 1
43237: ST_TO_ADDR
43238: GO 43502
// begin tmp := arr ;
43240: LD_ADDR_VAR 0 6
43244: PUSH
43245: LD_VAR 0 1
43249: ST_TO_ADDR
// s_arr := [ tmp ] ;
43250: LD_ADDR_VAR 0 7
43254: PUSH
43255: LD_VAR 0 6
43259: PUSH
43260: EMPTY
43261: LIST
43262: ST_TO_ADDR
// for i = 1 to pos - 1 do
43263: LD_ADDR_VAR 0 5
43267: PUSH
43268: DOUBLE
43269: LD_INT 1
43271: DEC
43272: ST_TO_ADDR
43273: LD_VAR 0 2
43277: PUSH
43278: LD_INT 1
43280: MINUS
43281: PUSH
43282: FOR_TO
43283: IFFALSE 43328
// begin tmp := tmp [ pos [ i ] ] ;
43285: LD_ADDR_VAR 0 6
43289: PUSH
43290: LD_VAR 0 6
43294: PUSH
43295: LD_VAR 0 2
43299: PUSH
43300: LD_VAR 0 5
43304: ARRAY
43305: ARRAY
43306: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43307: LD_ADDR_VAR 0 7
43311: PUSH
43312: LD_VAR 0 7
43316: PUSH
43317: LD_VAR 0 6
43321: PUSH
43322: EMPTY
43323: LIST
43324: ADD
43325: ST_TO_ADDR
// end ;
43326: GO 43282
43328: POP
43329: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43330: LD_ADDR_VAR 0 6
43334: PUSH
43335: LD_VAR 0 6
43339: PPUSH
43340: LD_VAR 0 2
43344: PUSH
43345: LD_VAR 0 2
43349: ARRAY
43350: PPUSH
43351: LD_VAR 0 3
43355: PPUSH
43356: CALL_OW 1
43360: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43361: LD_ADDR_VAR 0 7
43365: PUSH
43366: LD_VAR 0 7
43370: PPUSH
43371: LD_VAR 0 7
43375: PPUSH
43376: LD_VAR 0 6
43380: PPUSH
43381: CALL_OW 1
43385: ST_TO_ADDR
// for i = s_arr downto 2 do
43386: LD_ADDR_VAR 0 5
43390: PUSH
43391: DOUBLE
43392: LD_VAR 0 7
43396: INC
43397: ST_TO_ADDR
43398: LD_INT 2
43400: PUSH
43401: FOR_DOWNTO
43402: IFFALSE 43486
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43404: LD_ADDR_VAR 0 6
43408: PUSH
43409: LD_VAR 0 7
43413: PUSH
43414: LD_VAR 0 5
43418: PUSH
43419: LD_INT 1
43421: MINUS
43422: ARRAY
43423: PPUSH
43424: LD_VAR 0 2
43428: PUSH
43429: LD_VAR 0 5
43433: PUSH
43434: LD_INT 1
43436: MINUS
43437: ARRAY
43438: PPUSH
43439: LD_VAR 0 7
43443: PUSH
43444: LD_VAR 0 5
43448: ARRAY
43449: PPUSH
43450: CALL_OW 1
43454: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43455: LD_ADDR_VAR 0 7
43459: PUSH
43460: LD_VAR 0 7
43464: PPUSH
43465: LD_VAR 0 5
43469: PUSH
43470: LD_INT 1
43472: MINUS
43473: PPUSH
43474: LD_VAR 0 6
43478: PPUSH
43479: CALL_OW 1
43483: ST_TO_ADDR
// end ;
43484: GO 43401
43486: POP
43487: POP
// result := s_arr [ 1 ] ;
43488: LD_ADDR_VAR 0 4
43492: PUSH
43493: LD_VAR 0 7
43497: PUSH
43498: LD_INT 1
43500: ARRAY
43501: ST_TO_ADDR
// end ; end ;
43502: LD_VAR 0 4
43506: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43507: LD_INT 0
43509: PPUSH
43510: PPUSH
// if not list then
43511: LD_VAR 0 1
43515: NOT
43516: IFFALSE 43520
// exit ;
43518: GO 43611
// i := list [ pos1 ] ;
43520: LD_ADDR_VAR 0 5
43524: PUSH
43525: LD_VAR 0 1
43529: PUSH
43530: LD_VAR 0 2
43534: ARRAY
43535: ST_TO_ADDR
// if not i then
43536: LD_VAR 0 5
43540: NOT
43541: IFFALSE 43545
// exit ;
43543: GO 43611
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43545: LD_ADDR_VAR 0 1
43549: PUSH
43550: LD_VAR 0 1
43554: PPUSH
43555: LD_VAR 0 2
43559: PPUSH
43560: LD_VAR 0 1
43564: PUSH
43565: LD_VAR 0 3
43569: ARRAY
43570: PPUSH
43571: CALL_OW 1
43575: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43576: LD_ADDR_VAR 0 1
43580: PUSH
43581: LD_VAR 0 1
43585: PPUSH
43586: LD_VAR 0 3
43590: PPUSH
43591: LD_VAR 0 5
43595: PPUSH
43596: CALL_OW 1
43600: ST_TO_ADDR
// result := list ;
43601: LD_ADDR_VAR 0 4
43605: PUSH
43606: LD_VAR 0 1
43610: ST_TO_ADDR
// end ;
43611: LD_VAR 0 4
43615: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43616: LD_INT 0
43618: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43619: LD_ADDR_VAR 0 5
43623: PUSH
43624: LD_VAR 0 1
43628: PPUSH
43629: CALL_OW 250
43633: PPUSH
43634: LD_VAR 0 1
43638: PPUSH
43639: CALL_OW 251
43643: PPUSH
43644: LD_VAR 0 2
43648: PPUSH
43649: LD_VAR 0 3
43653: PPUSH
43654: LD_VAR 0 4
43658: PPUSH
43659: CALL 43669 0 5
43663: ST_TO_ADDR
// end ;
43664: LD_VAR 0 5
43668: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43669: LD_INT 0
43671: PPUSH
43672: PPUSH
43673: PPUSH
43674: PPUSH
// if not list then
43675: LD_VAR 0 3
43679: NOT
43680: IFFALSE 43684
// exit ;
43682: GO 44072
// result := [ ] ;
43684: LD_ADDR_VAR 0 6
43688: PUSH
43689: EMPTY
43690: ST_TO_ADDR
// for i in list do
43691: LD_ADDR_VAR 0 7
43695: PUSH
43696: LD_VAR 0 3
43700: PUSH
43701: FOR_IN
43702: IFFALSE 43904
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43704: LD_ADDR_VAR 0 9
43708: PUSH
43709: LD_VAR 0 7
43713: PPUSH
43714: LD_VAR 0 1
43718: PPUSH
43719: LD_VAR 0 2
43723: PPUSH
43724: CALL_OW 297
43728: ST_TO_ADDR
// if not result then
43729: LD_VAR 0 6
43733: NOT
43734: IFFALSE 43760
// result := [ [ i , tmp ] ] else
43736: LD_ADDR_VAR 0 6
43740: PUSH
43741: LD_VAR 0 7
43745: PUSH
43746: LD_VAR 0 9
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: ST_TO_ADDR
43758: GO 43902
// begin if result [ result ] [ 2 ] < tmp then
43760: LD_VAR 0 6
43764: PUSH
43765: LD_VAR 0 6
43769: ARRAY
43770: PUSH
43771: LD_INT 2
43773: ARRAY
43774: PUSH
43775: LD_VAR 0 9
43779: LESS
43780: IFFALSE 43822
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43782: LD_ADDR_VAR 0 6
43786: PUSH
43787: LD_VAR 0 6
43791: PPUSH
43792: LD_VAR 0 6
43796: PUSH
43797: LD_INT 1
43799: PLUS
43800: PPUSH
43801: LD_VAR 0 7
43805: PUSH
43806: LD_VAR 0 9
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PPUSH
43815: CALL_OW 2
43819: ST_TO_ADDR
43820: GO 43902
// for j = 1 to result do
43822: LD_ADDR_VAR 0 8
43826: PUSH
43827: DOUBLE
43828: LD_INT 1
43830: DEC
43831: ST_TO_ADDR
43832: LD_VAR 0 6
43836: PUSH
43837: FOR_TO
43838: IFFALSE 43900
// begin if tmp < result [ j ] [ 2 ] then
43840: LD_VAR 0 9
43844: PUSH
43845: LD_VAR 0 6
43849: PUSH
43850: LD_VAR 0 8
43854: ARRAY
43855: PUSH
43856: LD_INT 2
43858: ARRAY
43859: LESS
43860: IFFALSE 43898
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43862: LD_ADDR_VAR 0 6
43866: PUSH
43867: LD_VAR 0 6
43871: PPUSH
43872: LD_VAR 0 8
43876: PPUSH
43877: LD_VAR 0 7
43881: PUSH
43882: LD_VAR 0 9
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PPUSH
43891: CALL_OW 2
43895: ST_TO_ADDR
// break ;
43896: GO 43900
// end ; end ;
43898: GO 43837
43900: POP
43901: POP
// end ; end ;
43902: GO 43701
43904: POP
43905: POP
// if result and not asc then
43906: LD_VAR 0 6
43910: PUSH
43911: LD_VAR 0 4
43915: NOT
43916: AND
43917: IFFALSE 43992
// begin tmp := result ;
43919: LD_ADDR_VAR 0 9
43923: PUSH
43924: LD_VAR 0 6
43928: ST_TO_ADDR
// for i = tmp downto 1 do
43929: LD_ADDR_VAR 0 7
43933: PUSH
43934: DOUBLE
43935: LD_VAR 0 9
43939: INC
43940: ST_TO_ADDR
43941: LD_INT 1
43943: PUSH
43944: FOR_DOWNTO
43945: IFFALSE 43990
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43947: LD_ADDR_VAR 0 6
43951: PUSH
43952: LD_VAR 0 6
43956: PPUSH
43957: LD_VAR 0 9
43961: PUSH
43962: LD_VAR 0 7
43966: MINUS
43967: PUSH
43968: LD_INT 1
43970: PLUS
43971: PPUSH
43972: LD_VAR 0 9
43976: PUSH
43977: LD_VAR 0 7
43981: ARRAY
43982: PPUSH
43983: CALL_OW 1
43987: ST_TO_ADDR
43988: GO 43944
43990: POP
43991: POP
// end ; tmp := [ ] ;
43992: LD_ADDR_VAR 0 9
43996: PUSH
43997: EMPTY
43998: ST_TO_ADDR
// if mode then
43999: LD_VAR 0 5
44003: IFFALSE 44072
// begin for i = 1 to result do
44005: LD_ADDR_VAR 0 7
44009: PUSH
44010: DOUBLE
44011: LD_INT 1
44013: DEC
44014: ST_TO_ADDR
44015: LD_VAR 0 6
44019: PUSH
44020: FOR_TO
44021: IFFALSE 44060
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44023: LD_ADDR_VAR 0 9
44027: PUSH
44028: LD_VAR 0 9
44032: PPUSH
44033: LD_VAR 0 7
44037: PPUSH
44038: LD_VAR 0 6
44042: PUSH
44043: LD_VAR 0 7
44047: ARRAY
44048: PUSH
44049: LD_INT 1
44051: ARRAY
44052: PPUSH
44053: CALL_OW 1
44057: ST_TO_ADDR
44058: GO 44020
44060: POP
44061: POP
// result := tmp ;
44062: LD_ADDR_VAR 0 6
44066: PUSH
44067: LD_VAR 0 9
44071: ST_TO_ADDR
// end ; end ;
44072: LD_VAR 0 6
44076: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44077: LD_INT 0
44079: PPUSH
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
44084: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44085: LD_ADDR_VAR 0 5
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: ST_TO_ADDR
// if not x or not y then
44107: LD_VAR 0 2
44111: NOT
44112: PUSH
44113: LD_VAR 0 3
44117: NOT
44118: OR
44119: IFFALSE 44123
// exit ;
44121: GO 45775
// if not range then
44123: LD_VAR 0 4
44127: NOT
44128: IFFALSE 44138
// range := 10 ;
44130: LD_ADDR_VAR 0 4
44134: PUSH
44135: LD_INT 10
44137: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44138: LD_ADDR_VAR 0 8
44142: PUSH
44143: LD_INT 81
44145: PUSH
44146: LD_VAR 0 1
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 92
44157: PUSH
44158: LD_VAR 0 2
44162: PUSH
44163: LD_VAR 0 3
44167: PUSH
44168: LD_VAR 0 4
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 3
44181: PUSH
44182: LD_INT 21
44184: PUSH
44185: LD_INT 3
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: LIST
44200: PPUSH
44201: CALL_OW 69
44205: ST_TO_ADDR
// if not tmp then
44206: LD_VAR 0 8
44210: NOT
44211: IFFALSE 44215
// exit ;
44213: GO 45775
// for i in tmp do
44215: LD_ADDR_VAR 0 6
44219: PUSH
44220: LD_VAR 0 8
44224: PUSH
44225: FOR_IN
44226: IFFALSE 45750
// begin points := [ 0 , 0 , 0 ] ;
44228: LD_ADDR_VAR 0 9
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
// bpoints := 1 ;
44247: LD_ADDR_VAR 0 10
44251: PUSH
44252: LD_INT 1
44254: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44255: LD_VAR 0 6
44259: PPUSH
44260: CALL_OW 247
44264: PUSH
44265: LD_INT 1
44267: DOUBLE
44268: EQUAL
44269: IFTRUE 44273
44271: GO 44851
44273: POP
// begin if GetClass ( i ) = 1 then
44274: LD_VAR 0 6
44278: PPUSH
44279: CALL_OW 257
44283: PUSH
44284: LD_INT 1
44286: EQUAL
44287: IFFALSE 44308
// points := [ 10 , 5 , 3 ] ;
44289: LD_ADDR_VAR 0 9
44293: PUSH
44294: LD_INT 10
44296: PUSH
44297: LD_INT 5
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44308: LD_VAR 0 6
44312: PPUSH
44313: CALL_OW 257
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: LD_INT 4
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: IN
44332: IFFALSE 44353
// points := [ 3 , 2 , 1 ] ;
44334: LD_ADDR_VAR 0 9
44338: PUSH
44339: LD_INT 3
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44353: LD_VAR 0 6
44357: PPUSH
44358: CALL_OW 257
44362: PUSH
44363: LD_INT 5
44365: EQUAL
44366: IFFALSE 44387
// points := [ 130 , 5 , 2 ] ;
44368: LD_ADDR_VAR 0 9
44372: PUSH
44373: LD_INT 130
44375: PUSH
44376: LD_INT 5
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44387: LD_VAR 0 6
44391: PPUSH
44392: CALL_OW 257
44396: PUSH
44397: LD_INT 8
44399: EQUAL
44400: IFFALSE 44421
// points := [ 35 , 35 , 30 ] ;
44402: LD_ADDR_VAR 0 9
44406: PUSH
44407: LD_INT 35
44409: PUSH
44410: LD_INT 35
44412: PUSH
44413: LD_INT 30
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: LIST
44420: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44421: LD_VAR 0 6
44425: PPUSH
44426: CALL_OW 257
44430: PUSH
44431: LD_INT 9
44433: EQUAL
44434: IFFALSE 44455
// points := [ 20 , 55 , 40 ] ;
44436: LD_ADDR_VAR 0 9
44440: PUSH
44441: LD_INT 20
44443: PUSH
44444: LD_INT 55
44446: PUSH
44447: LD_INT 40
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: LIST
44454: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44455: LD_VAR 0 6
44459: PPUSH
44460: CALL_OW 257
44464: PUSH
44465: LD_INT 12
44467: PUSH
44468: LD_INT 16
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: IN
44475: IFFALSE 44496
// points := [ 5 , 3 , 2 ] ;
44477: LD_ADDR_VAR 0 9
44481: PUSH
44482: LD_INT 5
44484: PUSH
44485: LD_INT 3
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44496: LD_VAR 0 6
44500: PPUSH
44501: CALL_OW 257
44505: PUSH
44506: LD_INT 17
44508: EQUAL
44509: IFFALSE 44530
// points := [ 100 , 50 , 75 ] ;
44511: LD_ADDR_VAR 0 9
44515: PUSH
44516: LD_INT 100
44518: PUSH
44519: LD_INT 50
44521: PUSH
44522: LD_INT 75
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44530: LD_VAR 0 6
44534: PPUSH
44535: CALL_OW 257
44539: PUSH
44540: LD_INT 15
44542: EQUAL
44543: IFFALSE 44564
// points := [ 10 , 5 , 3 ] ;
44545: LD_ADDR_VAR 0 9
44549: PUSH
44550: LD_INT 10
44552: PUSH
44553: LD_INT 5
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44564: LD_VAR 0 6
44568: PPUSH
44569: CALL_OW 257
44573: PUSH
44574: LD_INT 14
44576: EQUAL
44577: IFFALSE 44598
// points := [ 10 , 0 , 0 ] ;
44579: LD_ADDR_VAR 0 9
44583: PUSH
44584: LD_INT 10
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: LIST
44597: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44598: LD_VAR 0 6
44602: PPUSH
44603: CALL_OW 257
44607: PUSH
44608: LD_INT 11
44610: EQUAL
44611: IFFALSE 44632
// points := [ 30 , 10 , 5 ] ;
44613: LD_ADDR_VAR 0 9
44617: PUSH
44618: LD_INT 30
44620: PUSH
44621: LD_INT 10
44623: PUSH
44624: LD_INT 5
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44632: LD_VAR 0 1
44636: PPUSH
44637: LD_INT 5
44639: PPUSH
44640: CALL_OW 321
44644: PUSH
44645: LD_INT 2
44647: EQUAL
44648: IFFALSE 44665
// bpoints := bpoints * 1.8 ;
44650: LD_ADDR_VAR 0 10
44654: PUSH
44655: LD_VAR 0 10
44659: PUSH
44660: LD_REAL  1.80000000000000E+0000
44663: MUL
44664: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44665: LD_VAR 0 6
44669: PPUSH
44670: CALL_OW 257
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: LD_INT 3
44683: PUSH
44684: LD_INT 4
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: IN
44693: PUSH
44694: LD_VAR 0 1
44698: PPUSH
44699: LD_INT 51
44701: PPUSH
44702: CALL_OW 321
44706: PUSH
44707: LD_INT 2
44709: EQUAL
44710: AND
44711: IFFALSE 44728
// bpoints := bpoints * 1.2 ;
44713: LD_ADDR_VAR 0 10
44717: PUSH
44718: LD_VAR 0 10
44722: PUSH
44723: LD_REAL  1.20000000000000E+0000
44726: MUL
44727: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44728: LD_VAR 0 6
44732: PPUSH
44733: CALL_OW 257
44737: PUSH
44738: LD_INT 5
44740: PUSH
44741: LD_INT 7
44743: PUSH
44744: LD_INT 9
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: IN
44752: PUSH
44753: LD_VAR 0 1
44757: PPUSH
44758: LD_INT 52
44760: PPUSH
44761: CALL_OW 321
44765: PUSH
44766: LD_INT 2
44768: EQUAL
44769: AND
44770: IFFALSE 44787
// bpoints := bpoints * 1.5 ;
44772: LD_ADDR_VAR 0 10
44776: PUSH
44777: LD_VAR 0 10
44781: PUSH
44782: LD_REAL  1.50000000000000E+0000
44785: MUL
44786: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44787: LD_VAR 0 1
44791: PPUSH
44792: LD_INT 66
44794: PPUSH
44795: CALL_OW 321
44799: PUSH
44800: LD_INT 2
44802: EQUAL
44803: IFFALSE 44820
// bpoints := bpoints * 1.1 ;
44805: LD_ADDR_VAR 0 10
44809: PUSH
44810: LD_VAR 0 10
44814: PUSH
44815: LD_REAL  1.10000000000000E+0000
44818: MUL
44819: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44820: LD_ADDR_VAR 0 10
44824: PUSH
44825: LD_VAR 0 10
44829: PUSH
44830: LD_VAR 0 6
44834: PPUSH
44835: LD_INT 1
44837: PPUSH
44838: CALL_OW 259
44842: PUSH
44843: LD_REAL  1.15000000000000E+0000
44846: MUL
44847: MUL
44848: ST_TO_ADDR
// end ; unit_vehicle :
44849: GO 45679
44851: LD_INT 2
44853: DOUBLE
44854: EQUAL
44855: IFTRUE 44859
44857: GO 45667
44859: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44860: LD_VAR 0 6
44864: PPUSH
44865: CALL_OW 264
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 42
44875: PUSH
44876: LD_INT 24
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: IN
44884: IFFALSE 44905
// points := [ 25 , 5 , 3 ] ;
44886: LD_ADDR_VAR 0 9
44890: PUSH
44891: LD_INT 25
44893: PUSH
44894: LD_INT 5
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44905: LD_VAR 0 6
44909: PPUSH
44910: CALL_OW 264
44914: PUSH
44915: LD_INT 4
44917: PUSH
44918: LD_INT 43
44920: PUSH
44921: LD_INT 25
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: IN
44929: IFFALSE 44950
// points := [ 40 , 15 , 5 ] ;
44931: LD_ADDR_VAR 0 9
44935: PUSH
44936: LD_INT 40
44938: PUSH
44939: LD_INT 15
44941: PUSH
44942: LD_INT 5
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44950: LD_VAR 0 6
44954: PPUSH
44955: CALL_OW 264
44959: PUSH
44960: LD_INT 3
44962: PUSH
44963: LD_INT 23
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: IN
44970: IFFALSE 44991
// points := [ 7 , 25 , 8 ] ;
44972: LD_ADDR_VAR 0 9
44976: PUSH
44977: LD_INT 7
44979: PUSH
44980: LD_INT 25
44982: PUSH
44983: LD_INT 8
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: LIST
44990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44991: LD_VAR 0 6
44995: PPUSH
44996: CALL_OW 264
45000: PUSH
45001: LD_INT 5
45003: PUSH
45004: LD_INT 27
45006: PUSH
45007: LD_INT 44
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: LIST
45014: IN
45015: IFFALSE 45036
// points := [ 14 , 50 , 16 ] ;
45017: LD_ADDR_VAR 0 9
45021: PUSH
45022: LD_INT 14
45024: PUSH
45025: LD_INT 50
45027: PUSH
45028: LD_INT 16
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: LIST
45035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45036: LD_VAR 0 6
45040: PPUSH
45041: CALL_OW 264
45045: PUSH
45046: LD_INT 6
45048: PUSH
45049: LD_INT 46
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: IN
45056: IFFALSE 45077
// points := [ 32 , 120 , 70 ] ;
45058: LD_ADDR_VAR 0 9
45062: PUSH
45063: LD_INT 32
45065: PUSH
45066: LD_INT 120
45068: PUSH
45069: LD_INT 70
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: LIST
45076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45077: LD_VAR 0 6
45081: PPUSH
45082: CALL_OW 264
45086: PUSH
45087: LD_INT 7
45089: PUSH
45090: LD_INT 28
45092: PUSH
45093: LD_INT 45
45095: PUSH
45096: LD_EXP 162
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: IN
45107: IFFALSE 45128
// points := [ 35 , 20 , 45 ] ;
45109: LD_ADDR_VAR 0 9
45113: PUSH
45114: LD_INT 35
45116: PUSH
45117: LD_INT 20
45119: PUSH
45120: LD_INT 45
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: LIST
45127: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45128: LD_VAR 0 6
45132: PPUSH
45133: CALL_OW 264
45137: PUSH
45138: LD_INT 47
45140: PUSH
45141: EMPTY
45142: LIST
45143: IN
45144: IFFALSE 45165
// points := [ 67 , 45 , 75 ] ;
45146: LD_ADDR_VAR 0 9
45150: PUSH
45151: LD_INT 67
45153: PUSH
45154: LD_INT 45
45156: PUSH
45157: LD_INT 75
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: LIST
45164: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45165: LD_VAR 0 6
45169: PPUSH
45170: CALL_OW 264
45174: PUSH
45175: LD_INT 26
45177: PUSH
45178: EMPTY
45179: LIST
45180: IN
45181: IFFALSE 45202
// points := [ 120 , 30 , 80 ] ;
45183: LD_ADDR_VAR 0 9
45187: PUSH
45188: LD_INT 120
45190: PUSH
45191: LD_INT 30
45193: PUSH
45194: LD_INT 80
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45202: LD_VAR 0 6
45206: PPUSH
45207: CALL_OW 264
45211: PUSH
45212: LD_INT 22
45214: PUSH
45215: EMPTY
45216: LIST
45217: IN
45218: IFFALSE 45239
// points := [ 40 , 1 , 1 ] ;
45220: LD_ADDR_VAR 0 9
45224: PUSH
45225: LD_INT 40
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: LIST
45238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45239: LD_VAR 0 6
45243: PPUSH
45244: CALL_OW 264
45248: PUSH
45249: LD_INT 29
45251: PUSH
45252: EMPTY
45253: LIST
45254: IN
45255: IFFALSE 45276
// points := [ 70 , 200 , 400 ] ;
45257: LD_ADDR_VAR 0 9
45261: PUSH
45262: LD_INT 70
45264: PUSH
45265: LD_INT 200
45267: PUSH
45268: LD_INT 400
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: LIST
45275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45276: LD_VAR 0 6
45280: PPUSH
45281: CALL_OW 264
45285: PUSH
45286: LD_INT 14
45288: PUSH
45289: LD_INT 53
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: IN
45296: IFFALSE 45317
// points := [ 40 , 10 , 20 ] ;
45298: LD_ADDR_VAR 0 9
45302: PUSH
45303: LD_INT 40
45305: PUSH
45306: LD_INT 10
45308: PUSH
45309: LD_INT 20
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45317: LD_VAR 0 6
45321: PPUSH
45322: CALL_OW 264
45326: PUSH
45327: LD_INT 9
45329: PUSH
45330: EMPTY
45331: LIST
45332: IN
45333: IFFALSE 45354
// points := [ 5 , 70 , 20 ] ;
45335: LD_ADDR_VAR 0 9
45339: PUSH
45340: LD_INT 5
45342: PUSH
45343: LD_INT 70
45345: PUSH
45346: LD_INT 20
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: LIST
45353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45354: LD_VAR 0 6
45358: PPUSH
45359: CALL_OW 264
45363: PUSH
45364: LD_INT 10
45366: PUSH
45367: EMPTY
45368: LIST
45369: IN
45370: IFFALSE 45391
// points := [ 35 , 110 , 70 ] ;
45372: LD_ADDR_VAR 0 9
45376: PUSH
45377: LD_INT 35
45379: PUSH
45380: LD_INT 110
45382: PUSH
45383: LD_INT 70
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: LIST
45390: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45391: LD_VAR 0 6
45395: PPUSH
45396: CALL_OW 265
45400: PUSH
45401: LD_INT 25
45403: EQUAL
45404: IFFALSE 45425
// points := [ 80 , 65 , 100 ] ;
45406: LD_ADDR_VAR 0 9
45410: PUSH
45411: LD_INT 80
45413: PUSH
45414: LD_INT 65
45416: PUSH
45417: LD_INT 100
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45425: LD_VAR 0 6
45429: PPUSH
45430: CALL_OW 263
45434: PUSH
45435: LD_INT 1
45437: EQUAL
45438: IFFALSE 45473
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45440: LD_ADDR_VAR 0 10
45444: PUSH
45445: LD_VAR 0 10
45449: PUSH
45450: LD_VAR 0 6
45454: PPUSH
45455: CALL_OW 311
45459: PPUSH
45460: LD_INT 3
45462: PPUSH
45463: CALL_OW 259
45467: PUSH
45468: LD_INT 4
45470: MUL
45471: MUL
45472: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45473: LD_VAR 0 6
45477: PPUSH
45478: CALL_OW 263
45482: PUSH
45483: LD_INT 2
45485: EQUAL
45486: IFFALSE 45537
// begin j := IsControledBy ( i ) ;
45488: LD_ADDR_VAR 0 7
45492: PUSH
45493: LD_VAR 0 6
45497: PPUSH
45498: CALL_OW 312
45502: ST_TO_ADDR
// if j then
45503: LD_VAR 0 7
45507: IFFALSE 45537
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45509: LD_ADDR_VAR 0 10
45513: PUSH
45514: LD_VAR 0 10
45518: PUSH
45519: LD_VAR 0 7
45523: PPUSH
45524: LD_INT 3
45526: PPUSH
45527: CALL_OW 259
45531: PUSH
45532: LD_INT 3
45534: MUL
45535: MUL
45536: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45537: LD_VAR 0 6
45541: PPUSH
45542: CALL_OW 264
45546: PUSH
45547: LD_INT 5
45549: PUSH
45550: LD_INT 6
45552: PUSH
45553: LD_INT 46
45555: PUSH
45556: LD_INT 44
45558: PUSH
45559: LD_INT 47
45561: PUSH
45562: LD_INT 45
45564: PUSH
45565: LD_INT 28
45567: PUSH
45568: LD_INT 7
45570: PUSH
45571: LD_INT 27
45573: PUSH
45574: LD_INT 29
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: IN
45589: PUSH
45590: LD_VAR 0 1
45594: PPUSH
45595: LD_INT 52
45597: PPUSH
45598: CALL_OW 321
45602: PUSH
45603: LD_INT 2
45605: EQUAL
45606: AND
45607: IFFALSE 45624
// bpoints := bpoints * 1.2 ;
45609: LD_ADDR_VAR 0 10
45613: PUSH
45614: LD_VAR 0 10
45618: PUSH
45619: LD_REAL  1.20000000000000E+0000
45622: MUL
45623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45624: LD_VAR 0 6
45628: PPUSH
45629: CALL_OW 264
45633: PUSH
45634: LD_INT 6
45636: PUSH
45637: LD_INT 46
45639: PUSH
45640: LD_INT 47
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: IN
45648: IFFALSE 45665
// bpoints := bpoints * 1.2 ;
45650: LD_ADDR_VAR 0 10
45654: PUSH
45655: LD_VAR 0 10
45659: PUSH
45660: LD_REAL  1.20000000000000E+0000
45663: MUL
45664: ST_TO_ADDR
// end ; unit_building :
45665: GO 45679
45667: LD_INT 3
45669: DOUBLE
45670: EQUAL
45671: IFTRUE 45675
45673: GO 45678
45675: POP
// ; end ;
45676: GO 45679
45678: POP
// for j = 1 to 3 do
45679: LD_ADDR_VAR 0 7
45683: PUSH
45684: DOUBLE
45685: LD_INT 1
45687: DEC
45688: ST_TO_ADDR
45689: LD_INT 3
45691: PUSH
45692: FOR_TO
45693: IFFALSE 45746
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45695: LD_ADDR_VAR 0 5
45699: PUSH
45700: LD_VAR 0 5
45704: PPUSH
45705: LD_VAR 0 7
45709: PPUSH
45710: LD_VAR 0 5
45714: PUSH
45715: LD_VAR 0 7
45719: ARRAY
45720: PUSH
45721: LD_VAR 0 9
45725: PUSH
45726: LD_VAR 0 7
45730: ARRAY
45731: PUSH
45732: LD_VAR 0 10
45736: MUL
45737: PLUS
45738: PPUSH
45739: CALL_OW 1
45743: ST_TO_ADDR
45744: GO 45692
45746: POP
45747: POP
// end ;
45748: GO 44225
45750: POP
45751: POP
// result := Replace ( result , 4 , tmp ) ;
45752: LD_ADDR_VAR 0 5
45756: PUSH
45757: LD_VAR 0 5
45761: PPUSH
45762: LD_INT 4
45764: PPUSH
45765: LD_VAR 0 8
45769: PPUSH
45770: CALL_OW 1
45774: ST_TO_ADDR
// end ;
45775: LD_VAR 0 5
45779: RET
// export function DangerAtRange ( unit , range ) ; begin
45780: LD_INT 0
45782: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45783: LD_ADDR_VAR 0 3
45787: PUSH
45788: LD_VAR 0 1
45792: PPUSH
45793: CALL_OW 255
45797: PPUSH
45798: LD_VAR 0 1
45802: PPUSH
45803: CALL_OW 250
45807: PPUSH
45808: LD_VAR 0 1
45812: PPUSH
45813: CALL_OW 251
45817: PPUSH
45818: LD_VAR 0 2
45822: PPUSH
45823: CALL 44077 0 4
45827: ST_TO_ADDR
// end ;
45828: LD_VAR 0 3
45832: RET
// export function DangerInArea ( side , area ) ; begin
45833: LD_INT 0
45835: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45836: LD_ADDR_VAR 0 3
45840: PUSH
45841: LD_VAR 0 2
45845: PPUSH
45846: LD_INT 81
45848: PUSH
45849: LD_VAR 0 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PPUSH
45858: CALL_OW 70
45862: ST_TO_ADDR
// end ;
45863: LD_VAR 0 3
45867: RET
// export function IsExtension ( b ) ; begin
45868: LD_INT 0
45870: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45871: LD_ADDR_VAR 0 2
45875: PUSH
45876: LD_VAR 0 1
45880: PUSH
45881: LD_INT 23
45883: PUSH
45884: LD_INT 20
45886: PUSH
45887: LD_INT 22
45889: PUSH
45890: LD_INT 17
45892: PUSH
45893: LD_INT 24
45895: PUSH
45896: LD_INT 21
45898: PUSH
45899: LD_INT 19
45901: PUSH
45902: LD_INT 16
45904: PUSH
45905: LD_INT 25
45907: PUSH
45908: LD_INT 18
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: IN
45923: ST_TO_ADDR
// end ;
45924: LD_VAR 0 2
45928: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45929: LD_INT 0
45931: PPUSH
45932: PPUSH
45933: PPUSH
// result := [ ] ;
45934: LD_ADDR_VAR 0 4
45938: PUSH
45939: EMPTY
45940: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45941: LD_ADDR_VAR 0 5
45945: PUSH
45946: LD_VAR 0 2
45950: PPUSH
45951: LD_INT 21
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PPUSH
45961: CALL_OW 70
45965: ST_TO_ADDR
// if not tmp then
45966: LD_VAR 0 5
45970: NOT
45971: IFFALSE 45975
// exit ;
45973: GO 46039
// if checkLink then
45975: LD_VAR 0 3
45979: IFFALSE 46029
// begin for i in tmp do
45981: LD_ADDR_VAR 0 6
45985: PUSH
45986: LD_VAR 0 5
45990: PUSH
45991: FOR_IN
45992: IFFALSE 46027
// if GetBase ( i ) <> base then
45994: LD_VAR 0 6
45998: PPUSH
45999: CALL_OW 274
46003: PUSH
46004: LD_VAR 0 1
46008: NONEQUAL
46009: IFFALSE 46025
// ComLinkToBase ( base , i ) ;
46011: LD_VAR 0 1
46015: PPUSH
46016: LD_VAR 0 6
46020: PPUSH
46021: CALL_OW 169
46025: GO 45991
46027: POP
46028: POP
// end ; result := tmp ;
46029: LD_ADDR_VAR 0 4
46033: PUSH
46034: LD_VAR 0 5
46038: ST_TO_ADDR
// end ;
46039: LD_VAR 0 4
46043: RET
// export function ComComplete ( units , b ) ; var i ; begin
46044: LD_INT 0
46046: PPUSH
46047: PPUSH
// if not units then
46048: LD_VAR 0 1
46052: NOT
46053: IFFALSE 46057
// exit ;
46055: GO 46147
// for i in units do
46057: LD_ADDR_VAR 0 4
46061: PUSH
46062: LD_VAR 0 1
46066: PUSH
46067: FOR_IN
46068: IFFALSE 46145
// if BuildingStatus ( b ) = bs_build then
46070: LD_VAR 0 2
46074: PPUSH
46075: CALL_OW 461
46079: PUSH
46080: LD_INT 1
46082: EQUAL
46083: IFFALSE 46143
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46085: LD_VAR 0 4
46089: PPUSH
46090: LD_STRING h
46092: PUSH
46093: LD_VAR 0 2
46097: PPUSH
46098: CALL_OW 250
46102: PUSH
46103: LD_VAR 0 2
46107: PPUSH
46108: CALL_OW 251
46112: PUSH
46113: LD_VAR 0 2
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: PUSH
46136: EMPTY
46137: LIST
46138: PPUSH
46139: CALL_OW 446
46143: GO 46067
46145: POP
46146: POP
// end ;
46147: LD_VAR 0 3
46151: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46152: LD_INT 0
46154: PPUSH
46155: PPUSH
46156: PPUSH
46157: PPUSH
46158: PPUSH
46159: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46160: LD_VAR 0 1
46164: NOT
46165: PUSH
46166: LD_VAR 0 1
46170: PPUSH
46171: CALL_OW 263
46175: PUSH
46176: LD_INT 2
46178: NONEQUAL
46179: OR
46180: IFFALSE 46184
// exit ;
46182: GO 46500
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46184: LD_ADDR_VAR 0 6
46188: PUSH
46189: LD_INT 22
46191: PUSH
46192: LD_VAR 0 1
46196: PPUSH
46197: CALL_OW 255
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: LD_INT 30
46211: PUSH
46212: LD_INT 36
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 34
46221: PUSH
46222: LD_INT 31
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: LIST
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PPUSH
46238: CALL_OW 69
46242: ST_TO_ADDR
// if not tmp then
46243: LD_VAR 0 6
46247: NOT
46248: IFFALSE 46252
// exit ;
46250: GO 46500
// result := [ ] ;
46252: LD_ADDR_VAR 0 2
46256: PUSH
46257: EMPTY
46258: ST_TO_ADDR
// for i in tmp do
46259: LD_ADDR_VAR 0 3
46263: PUSH
46264: LD_VAR 0 6
46268: PUSH
46269: FOR_IN
46270: IFFALSE 46341
// begin t := UnitsInside ( i ) ;
46272: LD_ADDR_VAR 0 4
46276: PUSH
46277: LD_VAR 0 3
46281: PPUSH
46282: CALL_OW 313
46286: ST_TO_ADDR
// if t then
46287: LD_VAR 0 4
46291: IFFALSE 46339
// for j in t do
46293: LD_ADDR_VAR 0 7
46297: PUSH
46298: LD_VAR 0 4
46302: PUSH
46303: FOR_IN
46304: IFFALSE 46337
// result := Replace ( result , result + 1 , j ) ;
46306: LD_ADDR_VAR 0 2
46310: PUSH
46311: LD_VAR 0 2
46315: PPUSH
46316: LD_VAR 0 2
46320: PUSH
46321: LD_INT 1
46323: PLUS
46324: PPUSH
46325: LD_VAR 0 7
46329: PPUSH
46330: CALL_OW 1
46334: ST_TO_ADDR
46335: GO 46303
46337: POP
46338: POP
// end ;
46339: GO 46269
46341: POP
46342: POP
// if not result then
46343: LD_VAR 0 2
46347: NOT
46348: IFFALSE 46352
// exit ;
46350: GO 46500
// mech := result [ 1 ] ;
46352: LD_ADDR_VAR 0 5
46356: PUSH
46357: LD_VAR 0 2
46361: PUSH
46362: LD_INT 1
46364: ARRAY
46365: ST_TO_ADDR
// if result > 1 then
46366: LD_VAR 0 2
46370: PUSH
46371: LD_INT 1
46373: GREATER
46374: IFFALSE 46486
// begin for i = 2 to result do
46376: LD_ADDR_VAR 0 3
46380: PUSH
46381: DOUBLE
46382: LD_INT 2
46384: DEC
46385: ST_TO_ADDR
46386: LD_VAR 0 2
46390: PUSH
46391: FOR_TO
46392: IFFALSE 46484
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46394: LD_ADDR_VAR 0 4
46398: PUSH
46399: LD_VAR 0 2
46403: PUSH
46404: LD_VAR 0 3
46408: ARRAY
46409: PPUSH
46410: LD_INT 3
46412: PPUSH
46413: CALL_OW 259
46417: PUSH
46418: LD_VAR 0 2
46422: PUSH
46423: LD_VAR 0 3
46427: ARRAY
46428: PPUSH
46429: CALL_OW 432
46433: MINUS
46434: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46435: LD_VAR 0 4
46439: PUSH
46440: LD_VAR 0 5
46444: PPUSH
46445: LD_INT 3
46447: PPUSH
46448: CALL_OW 259
46452: PUSH
46453: LD_VAR 0 5
46457: PPUSH
46458: CALL_OW 432
46462: MINUS
46463: GREATEREQUAL
46464: IFFALSE 46482
// mech := result [ i ] ;
46466: LD_ADDR_VAR 0 5
46470: PUSH
46471: LD_VAR 0 2
46475: PUSH
46476: LD_VAR 0 3
46480: ARRAY
46481: ST_TO_ADDR
// end ;
46482: GO 46391
46484: POP
46485: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46486: LD_VAR 0 1
46490: PPUSH
46491: LD_VAR 0 5
46495: PPUSH
46496: CALL_OW 135
// end ;
46500: LD_VAR 0 2
46504: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46505: LD_INT 0
46507: PPUSH
46508: PPUSH
46509: PPUSH
46510: PPUSH
46511: PPUSH
46512: PPUSH
46513: PPUSH
46514: PPUSH
46515: PPUSH
46516: PPUSH
46517: PPUSH
46518: PPUSH
46519: PPUSH
// result := [ ] ;
46520: LD_ADDR_VAR 0 7
46524: PUSH
46525: EMPTY
46526: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46527: LD_VAR 0 1
46531: PPUSH
46532: CALL_OW 266
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: IN
46547: NOT
46548: IFFALSE 46552
// exit ;
46550: GO 48186
// if name then
46552: LD_VAR 0 3
46556: IFFALSE 46572
// SetBName ( base_dep , name ) ;
46558: LD_VAR 0 1
46562: PPUSH
46563: LD_VAR 0 3
46567: PPUSH
46568: CALL_OW 500
// base := GetBase ( base_dep ) ;
46572: LD_ADDR_VAR 0 15
46576: PUSH
46577: LD_VAR 0 1
46581: PPUSH
46582: CALL_OW 274
46586: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46587: LD_ADDR_VAR 0 16
46591: PUSH
46592: LD_VAR 0 1
46596: PPUSH
46597: CALL_OW 255
46601: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46602: LD_ADDR_VAR 0 17
46606: PUSH
46607: LD_VAR 0 1
46611: PPUSH
46612: CALL_OW 248
46616: ST_TO_ADDR
// if sources then
46617: LD_VAR 0 5
46621: IFFALSE 46668
// for i = 1 to 3 do
46623: LD_ADDR_VAR 0 8
46627: PUSH
46628: DOUBLE
46629: LD_INT 1
46631: DEC
46632: ST_TO_ADDR
46633: LD_INT 3
46635: PUSH
46636: FOR_TO
46637: IFFALSE 46666
// AddResourceType ( base , i , sources [ i ] ) ;
46639: LD_VAR 0 15
46643: PPUSH
46644: LD_VAR 0 8
46648: PPUSH
46649: LD_VAR 0 5
46653: PUSH
46654: LD_VAR 0 8
46658: ARRAY
46659: PPUSH
46660: CALL_OW 276
46664: GO 46636
46666: POP
46667: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46668: LD_ADDR_VAR 0 18
46672: PUSH
46673: LD_VAR 0 15
46677: PPUSH
46678: LD_VAR 0 2
46682: PPUSH
46683: LD_INT 1
46685: PPUSH
46686: CALL 45929 0 3
46690: ST_TO_ADDR
// InitHc ;
46691: CALL_OW 19
// InitUc ;
46695: CALL_OW 18
// uc_side := side ;
46699: LD_ADDR_OWVAR 20
46703: PUSH
46704: LD_VAR 0 16
46708: ST_TO_ADDR
// uc_nation := nation ;
46709: LD_ADDR_OWVAR 21
46713: PUSH
46714: LD_VAR 0 17
46718: ST_TO_ADDR
// if buildings then
46719: LD_VAR 0 18
46723: IFFALSE 48045
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46725: LD_ADDR_VAR 0 19
46729: PUSH
46730: LD_VAR 0 18
46734: PPUSH
46735: LD_INT 2
46737: PUSH
46738: LD_INT 30
46740: PUSH
46741: LD_INT 29
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 30
46750: PUSH
46751: LD_INT 30
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: PPUSH
46763: CALL_OW 72
46767: ST_TO_ADDR
// if tmp then
46768: LD_VAR 0 19
46772: IFFALSE 46820
// for i in tmp do
46774: LD_ADDR_VAR 0 8
46778: PUSH
46779: LD_VAR 0 19
46783: PUSH
46784: FOR_IN
46785: IFFALSE 46818
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46787: LD_VAR 0 8
46791: PPUSH
46792: CALL_OW 250
46796: PPUSH
46797: LD_VAR 0 8
46801: PPUSH
46802: CALL_OW 251
46806: PPUSH
46807: LD_VAR 0 16
46811: PPUSH
46812: CALL_OW 441
46816: GO 46784
46818: POP
46819: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46820: LD_VAR 0 18
46824: PPUSH
46825: LD_INT 2
46827: PUSH
46828: LD_INT 30
46830: PUSH
46831: LD_INT 32
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 30
46840: PUSH
46841: LD_INT 33
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: LIST
46852: PPUSH
46853: CALL_OW 72
46857: IFFALSE 46945
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46859: LD_ADDR_VAR 0 8
46863: PUSH
46864: LD_VAR 0 18
46868: PPUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 30
46874: PUSH
46875: LD_INT 32
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 30
46884: PUSH
46885: LD_INT 33
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: LIST
46896: PPUSH
46897: CALL_OW 72
46901: PUSH
46902: FOR_IN
46903: IFFALSE 46943
// begin if not GetBWeapon ( i ) then
46905: LD_VAR 0 8
46909: PPUSH
46910: CALL_OW 269
46914: NOT
46915: IFFALSE 46941
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46917: LD_VAR 0 8
46921: PPUSH
46922: LD_VAR 0 8
46926: PPUSH
46927: LD_VAR 0 2
46931: PPUSH
46932: CALL 48191 0 2
46936: PPUSH
46937: CALL_OW 431
// end ;
46941: GO 46902
46943: POP
46944: POP
// end ; for i = 1 to personel do
46945: LD_ADDR_VAR 0 8
46949: PUSH
46950: DOUBLE
46951: LD_INT 1
46953: DEC
46954: ST_TO_ADDR
46955: LD_VAR 0 6
46959: PUSH
46960: FOR_TO
46961: IFFALSE 48025
// begin if i > 4 then
46963: LD_VAR 0 8
46967: PUSH
46968: LD_INT 4
46970: GREATER
46971: IFFALSE 46975
// break ;
46973: GO 48025
// case i of 1 :
46975: LD_VAR 0 8
46979: PUSH
46980: LD_INT 1
46982: DOUBLE
46983: EQUAL
46984: IFTRUE 46988
46986: GO 47068
46988: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46989: LD_ADDR_VAR 0 12
46993: PUSH
46994: LD_VAR 0 18
46998: PPUSH
46999: LD_INT 22
47001: PUSH
47002: LD_VAR 0 16
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 58
47013: PUSH
47014: EMPTY
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: LD_INT 30
47022: PUSH
47023: LD_INT 32
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 30
47032: PUSH
47033: LD_INT 4
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 30
47042: PUSH
47043: LD_INT 5
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: LIST
47060: PPUSH
47061: CALL_OW 72
47065: ST_TO_ADDR
47066: GO 47290
47068: LD_INT 2
47070: DOUBLE
47071: EQUAL
47072: IFTRUE 47076
47074: GO 47138
47076: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47077: LD_ADDR_VAR 0 12
47081: PUSH
47082: LD_VAR 0 18
47086: PPUSH
47087: LD_INT 22
47089: PUSH
47090: LD_VAR 0 16
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: LD_INT 30
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 30
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: LIST
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PPUSH
47131: CALL_OW 72
47135: ST_TO_ADDR
47136: GO 47290
47138: LD_INT 3
47140: DOUBLE
47141: EQUAL
47142: IFTRUE 47146
47144: GO 47208
47146: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47147: LD_ADDR_VAR 0 12
47151: PUSH
47152: LD_VAR 0 18
47156: PPUSH
47157: LD_INT 22
47159: PUSH
47160: LD_VAR 0 16
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 30
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 30
47184: PUSH
47185: LD_INT 3
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: LIST
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PPUSH
47201: CALL_OW 72
47205: ST_TO_ADDR
47206: GO 47290
47208: LD_INT 4
47210: DOUBLE
47211: EQUAL
47212: IFTRUE 47216
47214: GO 47289
47216: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47217: LD_ADDR_VAR 0 12
47221: PUSH
47222: LD_VAR 0 18
47226: PPUSH
47227: LD_INT 22
47229: PUSH
47230: LD_VAR 0 16
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: LD_INT 30
47244: PUSH
47245: LD_INT 6
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 30
47254: PUSH
47255: LD_INT 7
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 30
47264: PUSH
47265: LD_INT 8
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PPUSH
47282: CALL_OW 72
47286: ST_TO_ADDR
47287: GO 47290
47289: POP
// if i = 1 then
47290: LD_VAR 0 8
47294: PUSH
47295: LD_INT 1
47297: EQUAL
47298: IFFALSE 47409
// begin tmp := [ ] ;
47300: LD_ADDR_VAR 0 19
47304: PUSH
47305: EMPTY
47306: ST_TO_ADDR
// for j in f do
47307: LD_ADDR_VAR 0 9
47311: PUSH
47312: LD_VAR 0 12
47316: PUSH
47317: FOR_IN
47318: IFFALSE 47391
// if GetBType ( j ) = b_bunker then
47320: LD_VAR 0 9
47324: PPUSH
47325: CALL_OW 266
47329: PUSH
47330: LD_INT 32
47332: EQUAL
47333: IFFALSE 47360
// tmp := Insert ( tmp , 1 , j ) else
47335: LD_ADDR_VAR 0 19
47339: PUSH
47340: LD_VAR 0 19
47344: PPUSH
47345: LD_INT 1
47347: PPUSH
47348: LD_VAR 0 9
47352: PPUSH
47353: CALL_OW 2
47357: ST_TO_ADDR
47358: GO 47389
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47360: LD_ADDR_VAR 0 19
47364: PUSH
47365: LD_VAR 0 19
47369: PPUSH
47370: LD_VAR 0 19
47374: PUSH
47375: LD_INT 1
47377: PLUS
47378: PPUSH
47379: LD_VAR 0 9
47383: PPUSH
47384: CALL_OW 2
47388: ST_TO_ADDR
47389: GO 47317
47391: POP
47392: POP
// if tmp then
47393: LD_VAR 0 19
47397: IFFALSE 47409
// f := tmp ;
47399: LD_ADDR_VAR 0 12
47403: PUSH
47404: LD_VAR 0 19
47408: ST_TO_ADDR
// end ; x := personel [ i ] ;
47409: LD_ADDR_VAR 0 13
47413: PUSH
47414: LD_VAR 0 6
47418: PUSH
47419: LD_VAR 0 8
47423: ARRAY
47424: ST_TO_ADDR
// if x = - 1 then
47425: LD_VAR 0 13
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: EQUAL
47434: IFFALSE 47643
// begin for j in f do
47436: LD_ADDR_VAR 0 9
47440: PUSH
47441: LD_VAR 0 12
47445: PUSH
47446: FOR_IN
47447: IFFALSE 47639
// repeat InitHc ;
47449: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47453: LD_VAR 0 9
47457: PPUSH
47458: CALL_OW 266
47462: PUSH
47463: LD_INT 5
47465: EQUAL
47466: IFFALSE 47536
// begin if UnitsInside ( j ) < 3 then
47468: LD_VAR 0 9
47472: PPUSH
47473: CALL_OW 313
47477: PUSH
47478: LD_INT 3
47480: LESS
47481: IFFALSE 47517
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47483: LD_INT 0
47485: PPUSH
47486: LD_INT 5
47488: PUSH
47489: LD_INT 8
47491: PUSH
47492: LD_INT 9
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: PUSH
47500: LD_VAR 0 17
47504: ARRAY
47505: PPUSH
47506: LD_VAR 0 4
47510: PPUSH
47511: CALL_OW 380
47515: GO 47534
// PrepareHuman ( false , i , skill ) ;
47517: LD_INT 0
47519: PPUSH
47520: LD_VAR 0 8
47524: PPUSH
47525: LD_VAR 0 4
47529: PPUSH
47530: CALL_OW 380
// end else
47534: GO 47553
// PrepareHuman ( false , i , skill ) ;
47536: LD_INT 0
47538: PPUSH
47539: LD_VAR 0 8
47543: PPUSH
47544: LD_VAR 0 4
47548: PPUSH
47549: CALL_OW 380
// un := CreateHuman ;
47553: LD_ADDR_VAR 0 14
47557: PUSH
47558: CALL_OW 44
47562: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47563: LD_ADDR_VAR 0 7
47567: PUSH
47568: LD_VAR 0 7
47572: PPUSH
47573: LD_INT 1
47575: PPUSH
47576: LD_VAR 0 14
47580: PPUSH
47581: CALL_OW 2
47585: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47586: LD_VAR 0 14
47590: PPUSH
47591: LD_VAR 0 9
47595: PPUSH
47596: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47600: LD_VAR 0 9
47604: PPUSH
47605: CALL_OW 313
47609: PUSH
47610: LD_INT 6
47612: EQUAL
47613: PUSH
47614: LD_VAR 0 9
47618: PPUSH
47619: CALL_OW 266
47623: PUSH
47624: LD_INT 32
47626: PUSH
47627: LD_INT 31
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: IN
47634: OR
47635: IFFALSE 47449
47637: GO 47446
47639: POP
47640: POP
// end else
47641: GO 48023
// for j = 1 to x do
47643: LD_ADDR_VAR 0 9
47647: PUSH
47648: DOUBLE
47649: LD_INT 1
47651: DEC
47652: ST_TO_ADDR
47653: LD_VAR 0 13
47657: PUSH
47658: FOR_TO
47659: IFFALSE 48021
// begin InitHc ;
47661: CALL_OW 19
// if not f then
47665: LD_VAR 0 12
47669: NOT
47670: IFFALSE 47759
// begin PrepareHuman ( false , i , skill ) ;
47672: LD_INT 0
47674: PPUSH
47675: LD_VAR 0 8
47679: PPUSH
47680: LD_VAR 0 4
47684: PPUSH
47685: CALL_OW 380
// un := CreateHuman ;
47689: LD_ADDR_VAR 0 14
47693: PUSH
47694: CALL_OW 44
47698: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47699: LD_ADDR_VAR 0 7
47703: PUSH
47704: LD_VAR 0 7
47708: PPUSH
47709: LD_INT 1
47711: PPUSH
47712: LD_VAR 0 14
47716: PPUSH
47717: CALL_OW 2
47721: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47722: LD_VAR 0 14
47726: PPUSH
47727: LD_VAR 0 1
47731: PPUSH
47732: CALL_OW 250
47736: PPUSH
47737: LD_VAR 0 1
47741: PPUSH
47742: CALL_OW 251
47746: PPUSH
47747: LD_INT 10
47749: PPUSH
47750: LD_INT 0
47752: PPUSH
47753: CALL_OW 50
// continue ;
47757: GO 47658
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47759: LD_VAR 0 12
47763: PUSH
47764: LD_INT 1
47766: ARRAY
47767: PPUSH
47768: CALL_OW 313
47772: PUSH
47773: LD_VAR 0 12
47777: PUSH
47778: LD_INT 1
47780: ARRAY
47781: PPUSH
47782: CALL_OW 266
47786: PUSH
47787: LD_INT 32
47789: PUSH
47790: LD_INT 31
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: IN
47797: AND
47798: PUSH
47799: LD_VAR 0 12
47803: PUSH
47804: LD_INT 1
47806: ARRAY
47807: PPUSH
47808: CALL_OW 313
47812: PUSH
47813: LD_INT 6
47815: EQUAL
47816: OR
47817: IFFALSE 47837
// f := Delete ( f , 1 ) ;
47819: LD_ADDR_VAR 0 12
47823: PUSH
47824: LD_VAR 0 12
47828: PPUSH
47829: LD_INT 1
47831: PPUSH
47832: CALL_OW 3
47836: ST_TO_ADDR
// if not f then
47837: LD_VAR 0 12
47841: NOT
47842: IFFALSE 47860
// begin x := x + 2 ;
47844: LD_ADDR_VAR 0 13
47848: PUSH
47849: LD_VAR 0 13
47853: PUSH
47854: LD_INT 2
47856: PLUS
47857: ST_TO_ADDR
// continue ;
47858: GO 47658
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47860: LD_VAR 0 12
47864: PUSH
47865: LD_INT 1
47867: ARRAY
47868: PPUSH
47869: CALL_OW 266
47873: PUSH
47874: LD_INT 5
47876: EQUAL
47877: IFFALSE 47951
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47879: LD_VAR 0 12
47883: PUSH
47884: LD_INT 1
47886: ARRAY
47887: PPUSH
47888: CALL_OW 313
47892: PUSH
47893: LD_INT 3
47895: LESS
47896: IFFALSE 47932
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47898: LD_INT 0
47900: PPUSH
47901: LD_INT 5
47903: PUSH
47904: LD_INT 8
47906: PUSH
47907: LD_INT 9
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: PUSH
47915: LD_VAR 0 17
47919: ARRAY
47920: PPUSH
47921: LD_VAR 0 4
47925: PPUSH
47926: CALL_OW 380
47930: GO 47949
// PrepareHuman ( false , i , skill ) ;
47932: LD_INT 0
47934: PPUSH
47935: LD_VAR 0 8
47939: PPUSH
47940: LD_VAR 0 4
47944: PPUSH
47945: CALL_OW 380
// end else
47949: GO 47968
// PrepareHuman ( false , i , skill ) ;
47951: LD_INT 0
47953: PPUSH
47954: LD_VAR 0 8
47958: PPUSH
47959: LD_VAR 0 4
47963: PPUSH
47964: CALL_OW 380
// un := CreateHuman ;
47968: LD_ADDR_VAR 0 14
47972: PUSH
47973: CALL_OW 44
47977: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47978: LD_ADDR_VAR 0 7
47982: PUSH
47983: LD_VAR 0 7
47987: PPUSH
47988: LD_INT 1
47990: PPUSH
47991: LD_VAR 0 14
47995: PPUSH
47996: CALL_OW 2
48000: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48001: LD_VAR 0 14
48005: PPUSH
48006: LD_VAR 0 12
48010: PUSH
48011: LD_INT 1
48013: ARRAY
48014: PPUSH
48015: CALL_OW 52
// end ;
48019: GO 47658
48021: POP
48022: POP
// end ;
48023: GO 46960
48025: POP
48026: POP
// result := result ^ buildings ;
48027: LD_ADDR_VAR 0 7
48031: PUSH
48032: LD_VAR 0 7
48036: PUSH
48037: LD_VAR 0 18
48041: ADD
48042: ST_TO_ADDR
// end else
48043: GO 48186
// begin for i = 1 to personel do
48045: LD_ADDR_VAR 0 8
48049: PUSH
48050: DOUBLE
48051: LD_INT 1
48053: DEC
48054: ST_TO_ADDR
48055: LD_VAR 0 6
48059: PUSH
48060: FOR_TO
48061: IFFALSE 48184
// begin if i > 4 then
48063: LD_VAR 0 8
48067: PUSH
48068: LD_INT 4
48070: GREATER
48071: IFFALSE 48075
// break ;
48073: GO 48184
// x := personel [ i ] ;
48075: LD_ADDR_VAR 0 13
48079: PUSH
48080: LD_VAR 0 6
48084: PUSH
48085: LD_VAR 0 8
48089: ARRAY
48090: ST_TO_ADDR
// if x = - 1 then
48091: LD_VAR 0 13
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: EQUAL
48100: IFFALSE 48104
// continue ;
48102: GO 48060
// PrepareHuman ( false , i , skill ) ;
48104: LD_INT 0
48106: PPUSH
48107: LD_VAR 0 8
48111: PPUSH
48112: LD_VAR 0 4
48116: PPUSH
48117: CALL_OW 380
// un := CreateHuman ;
48121: LD_ADDR_VAR 0 14
48125: PUSH
48126: CALL_OW 44
48130: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48131: LD_VAR 0 14
48135: PPUSH
48136: LD_VAR 0 1
48140: PPUSH
48141: CALL_OW 250
48145: PPUSH
48146: LD_VAR 0 1
48150: PPUSH
48151: CALL_OW 251
48155: PPUSH
48156: LD_INT 10
48158: PPUSH
48159: LD_INT 0
48161: PPUSH
48162: CALL_OW 50
// result := result ^ un ;
48166: LD_ADDR_VAR 0 7
48170: PUSH
48171: LD_VAR 0 7
48175: PUSH
48176: LD_VAR 0 14
48180: ADD
48181: ST_TO_ADDR
// end ;
48182: GO 48060
48184: POP
48185: POP
// end ; end ;
48186: LD_VAR 0 7
48190: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48191: LD_INT 0
48193: PPUSH
48194: PPUSH
48195: PPUSH
48196: PPUSH
48197: PPUSH
48198: PPUSH
48199: PPUSH
48200: PPUSH
48201: PPUSH
48202: PPUSH
48203: PPUSH
48204: PPUSH
48205: PPUSH
48206: PPUSH
48207: PPUSH
48208: PPUSH
// result := false ;
48209: LD_ADDR_VAR 0 3
48213: PUSH
48214: LD_INT 0
48216: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48217: LD_VAR 0 1
48221: NOT
48222: PUSH
48223: LD_VAR 0 1
48227: PPUSH
48228: CALL_OW 266
48232: PUSH
48233: LD_INT 32
48235: PUSH
48236: LD_INT 33
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: IN
48243: NOT
48244: OR
48245: IFFALSE 48249
// exit ;
48247: GO 49358
// nat := GetNation ( tower ) ;
48249: LD_ADDR_VAR 0 12
48253: PUSH
48254: LD_VAR 0 1
48258: PPUSH
48259: CALL_OW 248
48263: ST_TO_ADDR
// side := GetSide ( tower ) ;
48264: LD_ADDR_VAR 0 16
48268: PUSH
48269: LD_VAR 0 1
48273: PPUSH
48274: CALL_OW 255
48278: ST_TO_ADDR
// x := GetX ( tower ) ;
48279: LD_ADDR_VAR 0 10
48283: PUSH
48284: LD_VAR 0 1
48288: PPUSH
48289: CALL_OW 250
48293: ST_TO_ADDR
// y := GetY ( tower ) ;
48294: LD_ADDR_VAR 0 11
48298: PUSH
48299: LD_VAR 0 1
48303: PPUSH
48304: CALL_OW 251
48308: ST_TO_ADDR
// if not x or not y then
48309: LD_VAR 0 10
48313: NOT
48314: PUSH
48315: LD_VAR 0 11
48319: NOT
48320: OR
48321: IFFALSE 48325
// exit ;
48323: GO 49358
// weapon := 0 ;
48325: LD_ADDR_VAR 0 18
48329: PUSH
48330: LD_INT 0
48332: ST_TO_ADDR
// fac_list := [ ] ;
48333: LD_ADDR_VAR 0 17
48337: PUSH
48338: EMPTY
48339: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48340: LD_ADDR_VAR 0 6
48344: PUSH
48345: LD_VAR 0 1
48349: PPUSH
48350: CALL_OW 274
48354: PPUSH
48355: LD_VAR 0 2
48359: PPUSH
48360: LD_INT 0
48362: PPUSH
48363: CALL 45929 0 3
48367: PPUSH
48368: LD_INT 30
48370: PUSH
48371: LD_INT 3
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PPUSH
48378: CALL_OW 72
48382: ST_TO_ADDR
// if not factories then
48383: LD_VAR 0 6
48387: NOT
48388: IFFALSE 48392
// exit ;
48390: GO 49358
// for i in factories do
48392: LD_ADDR_VAR 0 8
48396: PUSH
48397: LD_VAR 0 6
48401: PUSH
48402: FOR_IN
48403: IFFALSE 48428
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48405: LD_ADDR_VAR 0 17
48409: PUSH
48410: LD_VAR 0 17
48414: PUSH
48415: LD_VAR 0 8
48419: PPUSH
48420: CALL_OW 478
48424: UNION
48425: ST_TO_ADDR
48426: GO 48402
48428: POP
48429: POP
// if not fac_list then
48430: LD_VAR 0 17
48434: NOT
48435: IFFALSE 48439
// exit ;
48437: GO 49358
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48439: LD_ADDR_VAR 0 5
48443: PUSH
48444: LD_INT 4
48446: PUSH
48447: LD_INT 5
48449: PUSH
48450: LD_INT 9
48452: PUSH
48453: LD_INT 10
48455: PUSH
48456: LD_INT 6
48458: PUSH
48459: LD_INT 7
48461: PUSH
48462: LD_INT 11
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 27
48476: PUSH
48477: LD_INT 28
48479: PUSH
48480: LD_INT 26
48482: PUSH
48483: LD_INT 30
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 43
48494: PUSH
48495: LD_INT 44
48497: PUSH
48498: LD_INT 46
48500: PUSH
48501: LD_INT 45
48503: PUSH
48504: LD_INT 47
48506: PUSH
48507: LD_INT 49
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: LIST
48522: PUSH
48523: LD_VAR 0 12
48527: ARRAY
48528: ST_TO_ADDR
// list := list isect fac_list ;
48529: LD_ADDR_VAR 0 5
48533: PUSH
48534: LD_VAR 0 5
48538: PUSH
48539: LD_VAR 0 17
48543: ISECT
48544: ST_TO_ADDR
// if not list then
48545: LD_VAR 0 5
48549: NOT
48550: IFFALSE 48554
// exit ;
48552: GO 49358
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48554: LD_VAR 0 12
48558: PUSH
48559: LD_INT 3
48561: EQUAL
48562: PUSH
48563: LD_INT 49
48565: PUSH
48566: LD_VAR 0 5
48570: IN
48571: AND
48572: PUSH
48573: LD_INT 31
48575: PPUSH
48576: LD_VAR 0 16
48580: PPUSH
48581: CALL_OW 321
48585: PUSH
48586: LD_INT 2
48588: EQUAL
48589: AND
48590: IFFALSE 48650
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48592: LD_INT 22
48594: PUSH
48595: LD_VAR 0 16
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 35
48606: PUSH
48607: LD_INT 49
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 91
48616: PUSH
48617: LD_VAR 0 1
48621: PUSH
48622: LD_INT 10
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: LIST
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: LIST
48634: PPUSH
48635: CALL_OW 69
48639: NOT
48640: IFFALSE 48650
// weapon := ru_time_lapser ;
48642: LD_ADDR_VAR 0 18
48646: PUSH
48647: LD_INT 49
48649: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48650: LD_VAR 0 12
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 2
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: IN
48665: PUSH
48666: LD_INT 11
48668: PUSH
48669: LD_VAR 0 5
48673: IN
48674: PUSH
48675: LD_INT 30
48677: PUSH
48678: LD_VAR 0 5
48682: IN
48683: OR
48684: AND
48685: PUSH
48686: LD_INT 6
48688: PPUSH
48689: LD_VAR 0 16
48693: PPUSH
48694: CALL_OW 321
48698: PUSH
48699: LD_INT 2
48701: EQUAL
48702: AND
48703: IFFALSE 48868
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48705: LD_INT 22
48707: PUSH
48708: LD_VAR 0 16
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: LD_INT 35
48722: PUSH
48723: LD_INT 11
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 35
48732: PUSH
48733: LD_INT 30
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 91
48747: PUSH
48748: LD_VAR 0 1
48752: PUSH
48753: LD_INT 18
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: LIST
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: LIST
48765: PPUSH
48766: CALL_OW 69
48770: NOT
48771: PUSH
48772: LD_INT 22
48774: PUSH
48775: LD_VAR 0 16
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 30
48789: PUSH
48790: LD_INT 32
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 30
48799: PUSH
48800: LD_INT 33
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 91
48814: PUSH
48815: LD_VAR 0 1
48819: PUSH
48820: LD_INT 12
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: LIST
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: LIST
48832: PUSH
48833: EMPTY
48834: LIST
48835: PPUSH
48836: CALL_OW 69
48840: PUSH
48841: LD_INT 2
48843: GREATER
48844: AND
48845: IFFALSE 48868
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48847: LD_ADDR_VAR 0 18
48851: PUSH
48852: LD_INT 11
48854: PUSH
48855: LD_INT 30
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_VAR 0 12
48866: ARRAY
48867: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48868: LD_VAR 0 18
48872: NOT
48873: PUSH
48874: LD_INT 40
48876: PPUSH
48877: LD_VAR 0 16
48881: PPUSH
48882: CALL_OW 321
48886: PUSH
48887: LD_INT 2
48889: EQUAL
48890: AND
48891: PUSH
48892: LD_INT 7
48894: PUSH
48895: LD_VAR 0 5
48899: IN
48900: PUSH
48901: LD_INT 28
48903: PUSH
48904: LD_VAR 0 5
48908: IN
48909: OR
48910: PUSH
48911: LD_INT 45
48913: PUSH
48914: LD_VAR 0 5
48918: IN
48919: OR
48920: AND
48921: IFFALSE 49175
// begin hex := GetHexInfo ( x , y ) ;
48923: LD_ADDR_VAR 0 4
48927: PUSH
48928: LD_VAR 0 10
48932: PPUSH
48933: LD_VAR 0 11
48937: PPUSH
48938: CALL_OW 546
48942: ST_TO_ADDR
// if hex [ 1 ] then
48943: LD_VAR 0 4
48947: PUSH
48948: LD_INT 1
48950: ARRAY
48951: IFFALSE 48955
// exit ;
48953: GO 49358
// height := hex [ 2 ] ;
48955: LD_ADDR_VAR 0 15
48959: PUSH
48960: LD_VAR 0 4
48964: PUSH
48965: LD_INT 2
48967: ARRAY
48968: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48969: LD_ADDR_VAR 0 14
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: LD_INT 5
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: ST_TO_ADDR
// for i in tmp do
48992: LD_ADDR_VAR 0 8
48996: PUSH
48997: LD_VAR 0 14
49001: PUSH
49002: FOR_IN
49003: IFFALSE 49173
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49005: LD_ADDR_VAR 0 9
49009: PUSH
49010: LD_VAR 0 10
49014: PPUSH
49015: LD_VAR 0 8
49019: PPUSH
49020: LD_INT 5
49022: PPUSH
49023: CALL_OW 272
49027: PUSH
49028: LD_VAR 0 11
49032: PPUSH
49033: LD_VAR 0 8
49037: PPUSH
49038: LD_INT 5
49040: PPUSH
49041: CALL_OW 273
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49050: LD_VAR 0 9
49054: PUSH
49055: LD_INT 1
49057: ARRAY
49058: PPUSH
49059: LD_VAR 0 9
49063: PUSH
49064: LD_INT 2
49066: ARRAY
49067: PPUSH
49068: CALL_OW 488
49072: IFFALSE 49171
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49074: LD_ADDR_VAR 0 4
49078: PUSH
49079: LD_VAR 0 9
49083: PUSH
49084: LD_INT 1
49086: ARRAY
49087: PPUSH
49088: LD_VAR 0 9
49092: PUSH
49093: LD_INT 2
49095: ARRAY
49096: PPUSH
49097: CALL_OW 546
49101: ST_TO_ADDR
// if hex [ 1 ] then
49102: LD_VAR 0 4
49106: PUSH
49107: LD_INT 1
49109: ARRAY
49110: IFFALSE 49114
// continue ;
49112: GO 49002
// h := hex [ 2 ] ;
49114: LD_ADDR_VAR 0 13
49118: PUSH
49119: LD_VAR 0 4
49123: PUSH
49124: LD_INT 2
49126: ARRAY
49127: ST_TO_ADDR
// if h + 7 < height then
49128: LD_VAR 0 13
49132: PUSH
49133: LD_INT 7
49135: PLUS
49136: PUSH
49137: LD_VAR 0 15
49141: LESS
49142: IFFALSE 49171
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49144: LD_ADDR_VAR 0 18
49148: PUSH
49149: LD_INT 7
49151: PUSH
49152: LD_INT 28
49154: PUSH
49155: LD_INT 45
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: LIST
49162: PUSH
49163: LD_VAR 0 12
49167: ARRAY
49168: ST_TO_ADDR
// break ;
49169: GO 49173
// end ; end ; end ;
49171: GO 49002
49173: POP
49174: POP
// end ; if not weapon then
49175: LD_VAR 0 18
49179: NOT
49180: IFFALSE 49240
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49182: LD_ADDR_VAR 0 5
49186: PUSH
49187: LD_VAR 0 5
49191: PUSH
49192: LD_INT 11
49194: PUSH
49195: LD_INT 30
49197: PUSH
49198: LD_INT 49
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: LIST
49205: DIFF
49206: ST_TO_ADDR
// if not list then
49207: LD_VAR 0 5
49211: NOT
49212: IFFALSE 49216
// exit ;
49214: GO 49358
// weapon := list [ rand ( 1 , list ) ] ;
49216: LD_ADDR_VAR 0 18
49220: PUSH
49221: LD_VAR 0 5
49225: PUSH
49226: LD_INT 1
49228: PPUSH
49229: LD_VAR 0 5
49233: PPUSH
49234: CALL_OW 12
49238: ARRAY
49239: ST_TO_ADDR
// end ; if weapon then
49240: LD_VAR 0 18
49244: IFFALSE 49358
// begin tmp := CostOfWeapon ( weapon ) ;
49246: LD_ADDR_VAR 0 14
49250: PUSH
49251: LD_VAR 0 18
49255: PPUSH
49256: CALL_OW 451
49260: ST_TO_ADDR
// j := GetBase ( tower ) ;
49261: LD_ADDR_VAR 0 9
49265: PUSH
49266: LD_VAR 0 1
49270: PPUSH
49271: CALL_OW 274
49275: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49276: LD_VAR 0 9
49280: PPUSH
49281: LD_INT 1
49283: PPUSH
49284: CALL_OW 275
49288: PUSH
49289: LD_VAR 0 14
49293: PUSH
49294: LD_INT 1
49296: ARRAY
49297: GREATEREQUAL
49298: PUSH
49299: LD_VAR 0 9
49303: PPUSH
49304: LD_INT 2
49306: PPUSH
49307: CALL_OW 275
49311: PUSH
49312: LD_VAR 0 14
49316: PUSH
49317: LD_INT 2
49319: ARRAY
49320: GREATEREQUAL
49321: AND
49322: PUSH
49323: LD_VAR 0 9
49327: PPUSH
49328: LD_INT 3
49330: PPUSH
49331: CALL_OW 275
49335: PUSH
49336: LD_VAR 0 14
49340: PUSH
49341: LD_INT 3
49343: ARRAY
49344: GREATEREQUAL
49345: AND
49346: IFFALSE 49358
// result := weapon ;
49348: LD_ADDR_VAR 0 3
49352: PUSH
49353: LD_VAR 0 18
49357: ST_TO_ADDR
// end ; end ;
49358: LD_VAR 0 3
49362: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49363: LD_INT 0
49365: PPUSH
49366: PPUSH
// result := true ;
49367: LD_ADDR_VAR 0 3
49371: PUSH
49372: LD_INT 1
49374: ST_TO_ADDR
// if array1 = array2 then
49375: LD_VAR 0 1
49379: PUSH
49380: LD_VAR 0 2
49384: EQUAL
49385: IFFALSE 49445
// begin for i = 1 to array1 do
49387: LD_ADDR_VAR 0 4
49391: PUSH
49392: DOUBLE
49393: LD_INT 1
49395: DEC
49396: ST_TO_ADDR
49397: LD_VAR 0 1
49401: PUSH
49402: FOR_TO
49403: IFFALSE 49441
// if array1 [ i ] <> array2 [ i ] then
49405: LD_VAR 0 1
49409: PUSH
49410: LD_VAR 0 4
49414: ARRAY
49415: PUSH
49416: LD_VAR 0 2
49420: PUSH
49421: LD_VAR 0 4
49425: ARRAY
49426: NONEQUAL
49427: IFFALSE 49439
// begin result := false ;
49429: LD_ADDR_VAR 0 3
49433: PUSH
49434: LD_INT 0
49436: ST_TO_ADDR
// break ;
49437: GO 49441
// end ;
49439: GO 49402
49441: POP
49442: POP
// end else
49443: GO 49453
// result := false ;
49445: LD_ADDR_VAR 0 3
49449: PUSH
49450: LD_INT 0
49452: ST_TO_ADDR
// end ;
49453: LD_VAR 0 3
49457: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49458: LD_INT 0
49460: PPUSH
49461: PPUSH
// if not array1 or not array2 then
49462: LD_VAR 0 1
49466: NOT
49467: PUSH
49468: LD_VAR 0 2
49472: NOT
49473: OR
49474: IFFALSE 49478
// exit ;
49476: GO 49542
// result := true ;
49478: LD_ADDR_VAR 0 3
49482: PUSH
49483: LD_INT 1
49485: ST_TO_ADDR
// for i = 1 to array1 do
49486: LD_ADDR_VAR 0 4
49490: PUSH
49491: DOUBLE
49492: LD_INT 1
49494: DEC
49495: ST_TO_ADDR
49496: LD_VAR 0 1
49500: PUSH
49501: FOR_TO
49502: IFFALSE 49540
// if array1 [ i ] <> array2 [ i ] then
49504: LD_VAR 0 1
49508: PUSH
49509: LD_VAR 0 4
49513: ARRAY
49514: PUSH
49515: LD_VAR 0 2
49519: PUSH
49520: LD_VAR 0 4
49524: ARRAY
49525: NONEQUAL
49526: IFFALSE 49538
// begin result := false ;
49528: LD_ADDR_VAR 0 3
49532: PUSH
49533: LD_INT 0
49535: ST_TO_ADDR
// break ;
49536: GO 49540
// end ;
49538: GO 49501
49540: POP
49541: POP
// end ;
49542: LD_VAR 0 3
49546: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49547: LD_INT 0
49549: PPUSH
49550: PPUSH
49551: PPUSH
// pom := GetBase ( fac ) ;
49552: LD_ADDR_VAR 0 5
49556: PUSH
49557: LD_VAR 0 1
49561: PPUSH
49562: CALL_OW 274
49566: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49567: LD_ADDR_VAR 0 4
49571: PUSH
49572: LD_VAR 0 2
49576: PUSH
49577: LD_INT 1
49579: ARRAY
49580: PPUSH
49581: LD_VAR 0 2
49585: PUSH
49586: LD_INT 2
49588: ARRAY
49589: PPUSH
49590: LD_VAR 0 2
49594: PUSH
49595: LD_INT 3
49597: ARRAY
49598: PPUSH
49599: LD_VAR 0 2
49603: PUSH
49604: LD_INT 4
49606: ARRAY
49607: PPUSH
49608: CALL_OW 449
49612: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49613: LD_ADDR_VAR 0 3
49617: PUSH
49618: LD_VAR 0 5
49622: PPUSH
49623: LD_INT 1
49625: PPUSH
49626: CALL_OW 275
49630: PUSH
49631: LD_VAR 0 4
49635: PUSH
49636: LD_INT 1
49638: ARRAY
49639: GREATEREQUAL
49640: PUSH
49641: LD_VAR 0 5
49645: PPUSH
49646: LD_INT 2
49648: PPUSH
49649: CALL_OW 275
49653: PUSH
49654: LD_VAR 0 4
49658: PUSH
49659: LD_INT 2
49661: ARRAY
49662: GREATEREQUAL
49663: AND
49664: PUSH
49665: LD_VAR 0 5
49669: PPUSH
49670: LD_INT 3
49672: PPUSH
49673: CALL_OW 275
49677: PUSH
49678: LD_VAR 0 4
49682: PUSH
49683: LD_INT 3
49685: ARRAY
49686: GREATEREQUAL
49687: AND
49688: ST_TO_ADDR
// end ;
49689: LD_VAR 0 3
49693: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49694: LD_INT 0
49696: PPUSH
49697: PPUSH
49698: PPUSH
49699: PPUSH
// pom := GetBase ( building ) ;
49700: LD_ADDR_VAR 0 3
49704: PUSH
49705: LD_VAR 0 1
49709: PPUSH
49710: CALL_OW 274
49714: ST_TO_ADDR
// if not pom then
49715: LD_VAR 0 3
49719: NOT
49720: IFFALSE 49724
// exit ;
49722: GO 49894
// btype := GetBType ( building ) ;
49724: LD_ADDR_VAR 0 5
49728: PUSH
49729: LD_VAR 0 1
49733: PPUSH
49734: CALL_OW 266
49738: ST_TO_ADDR
// if btype = b_armoury then
49739: LD_VAR 0 5
49743: PUSH
49744: LD_INT 4
49746: EQUAL
49747: IFFALSE 49757
// btype := b_barracks ;
49749: LD_ADDR_VAR 0 5
49753: PUSH
49754: LD_INT 5
49756: ST_TO_ADDR
// if btype = b_depot then
49757: LD_VAR 0 5
49761: PUSH
49762: LD_INT 0
49764: EQUAL
49765: IFFALSE 49775
// btype := b_warehouse ;
49767: LD_ADDR_VAR 0 5
49771: PUSH
49772: LD_INT 1
49774: ST_TO_ADDR
// if btype = b_workshop then
49775: LD_VAR 0 5
49779: PUSH
49780: LD_INT 2
49782: EQUAL
49783: IFFALSE 49793
// btype := b_factory ;
49785: LD_ADDR_VAR 0 5
49789: PUSH
49790: LD_INT 3
49792: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49793: LD_ADDR_VAR 0 4
49797: PUSH
49798: LD_VAR 0 5
49802: PPUSH
49803: LD_VAR 0 1
49807: PPUSH
49808: CALL_OW 248
49812: PPUSH
49813: CALL_OW 450
49817: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49818: LD_ADDR_VAR 0 2
49822: PUSH
49823: LD_VAR 0 3
49827: PPUSH
49828: LD_INT 1
49830: PPUSH
49831: CALL_OW 275
49835: PUSH
49836: LD_VAR 0 4
49840: PUSH
49841: LD_INT 1
49843: ARRAY
49844: GREATEREQUAL
49845: PUSH
49846: LD_VAR 0 3
49850: PPUSH
49851: LD_INT 2
49853: PPUSH
49854: CALL_OW 275
49858: PUSH
49859: LD_VAR 0 4
49863: PUSH
49864: LD_INT 2
49866: ARRAY
49867: GREATEREQUAL
49868: AND
49869: PUSH
49870: LD_VAR 0 3
49874: PPUSH
49875: LD_INT 3
49877: PPUSH
49878: CALL_OW 275
49882: PUSH
49883: LD_VAR 0 4
49887: PUSH
49888: LD_INT 3
49890: ARRAY
49891: GREATEREQUAL
49892: AND
49893: ST_TO_ADDR
// end ;
49894: LD_VAR 0 2
49898: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49899: LD_INT 0
49901: PPUSH
49902: PPUSH
49903: PPUSH
// pom := GetBase ( building ) ;
49904: LD_ADDR_VAR 0 4
49908: PUSH
49909: LD_VAR 0 1
49913: PPUSH
49914: CALL_OW 274
49918: ST_TO_ADDR
// if not pom then
49919: LD_VAR 0 4
49923: NOT
49924: IFFALSE 49928
// exit ;
49926: GO 50029
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49928: LD_ADDR_VAR 0 5
49932: PUSH
49933: LD_VAR 0 2
49937: PPUSH
49938: LD_VAR 0 1
49942: PPUSH
49943: CALL_OW 248
49947: PPUSH
49948: CALL_OW 450
49952: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49953: LD_ADDR_VAR 0 3
49957: PUSH
49958: LD_VAR 0 4
49962: PPUSH
49963: LD_INT 1
49965: PPUSH
49966: CALL_OW 275
49970: PUSH
49971: LD_VAR 0 5
49975: PUSH
49976: LD_INT 1
49978: ARRAY
49979: GREATEREQUAL
49980: PUSH
49981: LD_VAR 0 4
49985: PPUSH
49986: LD_INT 2
49988: PPUSH
49989: CALL_OW 275
49993: PUSH
49994: LD_VAR 0 5
49998: PUSH
49999: LD_INT 2
50001: ARRAY
50002: GREATEREQUAL
50003: AND
50004: PUSH
50005: LD_VAR 0 4
50009: PPUSH
50010: LD_INT 3
50012: PPUSH
50013: CALL_OW 275
50017: PUSH
50018: LD_VAR 0 5
50022: PUSH
50023: LD_INT 3
50025: ARRAY
50026: GREATEREQUAL
50027: AND
50028: ST_TO_ADDR
// end ;
50029: LD_VAR 0 3
50033: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50034: LD_INT 0
50036: PPUSH
50037: PPUSH
50038: PPUSH
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
50043: PPUSH
50044: PPUSH
50045: PPUSH
50046: PPUSH
// result := false ;
50047: LD_ADDR_VAR 0 8
50051: PUSH
50052: LD_INT 0
50054: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50055: LD_VAR 0 5
50059: NOT
50060: PUSH
50061: LD_VAR 0 1
50065: NOT
50066: OR
50067: PUSH
50068: LD_VAR 0 2
50072: NOT
50073: OR
50074: PUSH
50075: LD_VAR 0 3
50079: NOT
50080: OR
50081: IFFALSE 50085
// exit ;
50083: GO 50899
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50085: LD_ADDR_VAR 0 14
50089: PUSH
50090: LD_VAR 0 1
50094: PPUSH
50095: LD_VAR 0 2
50099: PPUSH
50100: LD_VAR 0 3
50104: PPUSH
50105: LD_VAR 0 4
50109: PPUSH
50110: LD_VAR 0 5
50114: PUSH
50115: LD_INT 1
50117: ARRAY
50118: PPUSH
50119: CALL_OW 248
50123: PPUSH
50124: LD_INT 0
50126: PPUSH
50127: CALL 52136 0 6
50131: ST_TO_ADDR
// if not hexes then
50132: LD_VAR 0 14
50136: NOT
50137: IFFALSE 50141
// exit ;
50139: GO 50899
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50141: LD_ADDR_VAR 0 17
50145: PUSH
50146: LD_VAR 0 5
50150: PPUSH
50151: LD_INT 22
50153: PUSH
50154: LD_VAR 0 13
50158: PPUSH
50159: CALL_OW 255
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: LD_INT 30
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 30
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: LIST
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PPUSH
50200: CALL_OW 72
50204: ST_TO_ADDR
// for i = 1 to hexes do
50205: LD_ADDR_VAR 0 9
50209: PUSH
50210: DOUBLE
50211: LD_INT 1
50213: DEC
50214: ST_TO_ADDR
50215: LD_VAR 0 14
50219: PUSH
50220: FOR_TO
50221: IFFALSE 50897
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50223: LD_ADDR_VAR 0 13
50227: PUSH
50228: LD_VAR 0 14
50232: PUSH
50233: LD_VAR 0 9
50237: ARRAY
50238: PUSH
50239: LD_INT 1
50241: ARRAY
50242: PPUSH
50243: LD_VAR 0 14
50247: PUSH
50248: LD_VAR 0 9
50252: ARRAY
50253: PUSH
50254: LD_INT 2
50256: ARRAY
50257: PPUSH
50258: CALL_OW 428
50262: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50263: LD_VAR 0 14
50267: PUSH
50268: LD_VAR 0 9
50272: ARRAY
50273: PUSH
50274: LD_INT 1
50276: ARRAY
50277: PPUSH
50278: LD_VAR 0 14
50282: PUSH
50283: LD_VAR 0 9
50287: ARRAY
50288: PUSH
50289: LD_INT 2
50291: ARRAY
50292: PPUSH
50293: CALL_OW 351
50297: PUSH
50298: LD_VAR 0 14
50302: PUSH
50303: LD_VAR 0 9
50307: ARRAY
50308: PUSH
50309: LD_INT 1
50311: ARRAY
50312: PPUSH
50313: LD_VAR 0 14
50317: PUSH
50318: LD_VAR 0 9
50322: ARRAY
50323: PUSH
50324: LD_INT 2
50326: ARRAY
50327: PPUSH
50328: CALL_OW 488
50332: NOT
50333: OR
50334: PUSH
50335: LD_VAR 0 13
50339: PPUSH
50340: CALL_OW 247
50344: PUSH
50345: LD_INT 3
50347: EQUAL
50348: OR
50349: IFFALSE 50355
// exit ;
50351: POP
50352: POP
50353: GO 50899
// if not tmp then
50355: LD_VAR 0 13
50359: NOT
50360: IFFALSE 50364
// continue ;
50362: GO 50220
// result := true ;
50364: LD_ADDR_VAR 0 8
50368: PUSH
50369: LD_INT 1
50371: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50372: LD_VAR 0 6
50376: PUSH
50377: LD_VAR 0 13
50381: PPUSH
50382: CALL_OW 247
50386: PUSH
50387: LD_INT 2
50389: EQUAL
50390: AND
50391: PUSH
50392: LD_VAR 0 13
50396: PPUSH
50397: CALL_OW 263
50401: PUSH
50402: LD_INT 1
50404: EQUAL
50405: AND
50406: IFFALSE 50570
// begin if IsDrivenBy ( tmp ) then
50408: LD_VAR 0 13
50412: PPUSH
50413: CALL_OW 311
50417: IFFALSE 50421
// continue ;
50419: GO 50220
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50421: LD_VAR 0 6
50425: PPUSH
50426: LD_INT 3
50428: PUSH
50429: LD_INT 60
50431: PUSH
50432: EMPTY
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 3
50441: PUSH
50442: LD_INT 55
50444: PUSH
50445: EMPTY
50446: LIST
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PPUSH
50456: CALL_OW 72
50460: IFFALSE 50568
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50462: LD_ADDR_VAR 0 18
50466: PUSH
50467: LD_VAR 0 6
50471: PPUSH
50472: LD_INT 3
50474: PUSH
50475: LD_INT 60
50477: PUSH
50478: EMPTY
50479: LIST
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 3
50487: PUSH
50488: LD_INT 55
50490: PUSH
50491: EMPTY
50492: LIST
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PPUSH
50502: CALL_OW 72
50506: PUSH
50507: LD_INT 1
50509: ARRAY
50510: ST_TO_ADDR
// if IsInUnit ( driver ) then
50511: LD_VAR 0 18
50515: PPUSH
50516: CALL_OW 310
50520: IFFALSE 50531
// ComExit ( driver ) ;
50522: LD_VAR 0 18
50526: PPUSH
50527: CALL 75320 0 1
// AddComEnterUnit ( driver , tmp ) ;
50531: LD_VAR 0 18
50535: PPUSH
50536: LD_VAR 0 13
50540: PPUSH
50541: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50545: LD_VAR 0 18
50549: PPUSH
50550: LD_VAR 0 7
50554: PPUSH
50555: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50559: LD_VAR 0 18
50563: PPUSH
50564: CALL_OW 181
// end ; continue ;
50568: GO 50220
// end ; if not cleaners or not tmp in cleaners then
50570: LD_VAR 0 6
50574: NOT
50575: PUSH
50576: LD_VAR 0 13
50580: PUSH
50581: LD_VAR 0 6
50585: IN
50586: NOT
50587: OR
50588: IFFALSE 50895
// begin if dep then
50590: LD_VAR 0 17
50594: IFFALSE 50730
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50596: LD_ADDR_VAR 0 16
50600: PUSH
50601: LD_VAR 0 17
50605: PUSH
50606: LD_INT 1
50608: ARRAY
50609: PPUSH
50610: CALL_OW 250
50614: PPUSH
50615: LD_VAR 0 17
50619: PUSH
50620: LD_INT 1
50622: ARRAY
50623: PPUSH
50624: CALL_OW 254
50628: PPUSH
50629: LD_INT 5
50631: PPUSH
50632: CALL_OW 272
50636: PUSH
50637: LD_VAR 0 17
50641: PUSH
50642: LD_INT 1
50644: ARRAY
50645: PPUSH
50646: CALL_OW 251
50650: PPUSH
50651: LD_VAR 0 17
50655: PUSH
50656: LD_INT 1
50658: ARRAY
50659: PPUSH
50660: CALL_OW 254
50664: PPUSH
50665: LD_INT 5
50667: PPUSH
50668: CALL_OW 273
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50677: LD_VAR 0 16
50681: PUSH
50682: LD_INT 1
50684: ARRAY
50685: PPUSH
50686: LD_VAR 0 16
50690: PUSH
50691: LD_INT 2
50693: ARRAY
50694: PPUSH
50695: CALL_OW 488
50699: IFFALSE 50730
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50701: LD_VAR 0 13
50705: PPUSH
50706: LD_VAR 0 16
50710: PUSH
50711: LD_INT 1
50713: ARRAY
50714: PPUSH
50715: LD_VAR 0 16
50719: PUSH
50720: LD_INT 2
50722: ARRAY
50723: PPUSH
50724: CALL_OW 111
// continue ;
50728: GO 50220
// end ; end ; r := GetDir ( tmp ) ;
50730: LD_ADDR_VAR 0 15
50734: PUSH
50735: LD_VAR 0 13
50739: PPUSH
50740: CALL_OW 254
50744: ST_TO_ADDR
// if r = 5 then
50745: LD_VAR 0 15
50749: PUSH
50750: LD_INT 5
50752: EQUAL
50753: IFFALSE 50763
// r := 0 ;
50755: LD_ADDR_VAR 0 15
50759: PUSH
50760: LD_INT 0
50762: ST_TO_ADDR
// for j = r to 5 do
50763: LD_ADDR_VAR 0 10
50767: PUSH
50768: DOUBLE
50769: LD_VAR 0 15
50773: DEC
50774: ST_TO_ADDR
50775: LD_INT 5
50777: PUSH
50778: FOR_TO
50779: IFFALSE 50893
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50781: LD_ADDR_VAR 0 11
50785: PUSH
50786: LD_VAR 0 13
50790: PPUSH
50791: CALL_OW 250
50795: PPUSH
50796: LD_VAR 0 10
50800: PPUSH
50801: LD_INT 2
50803: PPUSH
50804: CALL_OW 272
50808: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50809: LD_ADDR_VAR 0 12
50813: PUSH
50814: LD_VAR 0 13
50818: PPUSH
50819: CALL_OW 251
50823: PPUSH
50824: LD_VAR 0 10
50828: PPUSH
50829: LD_INT 2
50831: PPUSH
50832: CALL_OW 273
50836: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50837: LD_VAR 0 11
50841: PPUSH
50842: LD_VAR 0 12
50846: PPUSH
50847: CALL_OW 488
50851: PUSH
50852: LD_VAR 0 11
50856: PPUSH
50857: LD_VAR 0 12
50861: PPUSH
50862: CALL_OW 428
50866: NOT
50867: AND
50868: IFFALSE 50891
// begin ComMoveXY ( tmp , _x , _y ) ;
50870: LD_VAR 0 13
50874: PPUSH
50875: LD_VAR 0 11
50879: PPUSH
50880: LD_VAR 0 12
50884: PPUSH
50885: CALL_OW 111
// break ;
50889: GO 50893
// end ; end ;
50891: GO 50778
50893: POP
50894: POP
// end ; end ;
50895: GO 50220
50897: POP
50898: POP
// end ;
50899: LD_VAR 0 8
50903: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50904: LD_INT 0
50906: PPUSH
// result := true ;
50907: LD_ADDR_VAR 0 3
50911: PUSH
50912: LD_INT 1
50914: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50915: LD_VAR 0 2
50919: PUSH
50920: LD_INT 24
50922: DOUBLE
50923: EQUAL
50924: IFTRUE 50934
50926: LD_INT 33
50928: DOUBLE
50929: EQUAL
50930: IFTRUE 50934
50932: GO 50959
50934: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50935: LD_ADDR_VAR 0 3
50939: PUSH
50940: LD_INT 32
50942: PPUSH
50943: LD_VAR 0 1
50947: PPUSH
50948: CALL_OW 321
50952: PUSH
50953: LD_INT 2
50955: EQUAL
50956: ST_TO_ADDR
50957: GO 51279
50959: LD_INT 20
50961: DOUBLE
50962: EQUAL
50963: IFTRUE 50967
50965: GO 50992
50967: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50968: LD_ADDR_VAR 0 3
50972: PUSH
50973: LD_INT 6
50975: PPUSH
50976: LD_VAR 0 1
50980: PPUSH
50981: CALL_OW 321
50985: PUSH
50986: LD_INT 2
50988: EQUAL
50989: ST_TO_ADDR
50990: GO 51279
50992: LD_INT 22
50994: DOUBLE
50995: EQUAL
50996: IFTRUE 51006
50998: LD_INT 36
51000: DOUBLE
51001: EQUAL
51002: IFTRUE 51006
51004: GO 51031
51006: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51007: LD_ADDR_VAR 0 3
51011: PUSH
51012: LD_INT 15
51014: PPUSH
51015: LD_VAR 0 1
51019: PPUSH
51020: CALL_OW 321
51024: PUSH
51025: LD_INT 2
51027: EQUAL
51028: ST_TO_ADDR
51029: GO 51279
51031: LD_INT 30
51033: DOUBLE
51034: EQUAL
51035: IFTRUE 51039
51037: GO 51064
51039: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51040: LD_ADDR_VAR 0 3
51044: PUSH
51045: LD_INT 20
51047: PPUSH
51048: LD_VAR 0 1
51052: PPUSH
51053: CALL_OW 321
51057: PUSH
51058: LD_INT 2
51060: EQUAL
51061: ST_TO_ADDR
51062: GO 51279
51064: LD_INT 28
51066: DOUBLE
51067: EQUAL
51068: IFTRUE 51078
51070: LD_INT 21
51072: DOUBLE
51073: EQUAL
51074: IFTRUE 51078
51076: GO 51103
51078: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51079: LD_ADDR_VAR 0 3
51083: PUSH
51084: LD_INT 21
51086: PPUSH
51087: LD_VAR 0 1
51091: PPUSH
51092: CALL_OW 321
51096: PUSH
51097: LD_INT 2
51099: EQUAL
51100: ST_TO_ADDR
51101: GO 51279
51103: LD_INT 16
51105: DOUBLE
51106: EQUAL
51107: IFTRUE 51111
51109: GO 51138
51111: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51112: LD_ADDR_VAR 0 3
51116: PUSH
51117: LD_EXP 169
51121: PPUSH
51122: LD_VAR 0 1
51126: PPUSH
51127: CALL_OW 321
51131: PUSH
51132: LD_INT 2
51134: EQUAL
51135: ST_TO_ADDR
51136: GO 51279
51138: LD_INT 19
51140: DOUBLE
51141: EQUAL
51142: IFTRUE 51152
51144: LD_INT 23
51146: DOUBLE
51147: EQUAL
51148: IFTRUE 51152
51150: GO 51179
51152: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51153: LD_ADDR_VAR 0 3
51157: PUSH
51158: LD_EXP 168
51162: PPUSH
51163: LD_VAR 0 1
51167: PPUSH
51168: CALL_OW 321
51172: PUSH
51173: LD_INT 2
51175: EQUAL
51176: ST_TO_ADDR
51177: GO 51279
51179: LD_INT 17
51181: DOUBLE
51182: EQUAL
51183: IFTRUE 51187
51185: GO 51212
51187: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51188: LD_ADDR_VAR 0 3
51192: PUSH
51193: LD_INT 39
51195: PPUSH
51196: LD_VAR 0 1
51200: PPUSH
51201: CALL_OW 321
51205: PUSH
51206: LD_INT 2
51208: EQUAL
51209: ST_TO_ADDR
51210: GO 51279
51212: LD_INT 18
51214: DOUBLE
51215: EQUAL
51216: IFTRUE 51220
51218: GO 51245
51220: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51221: LD_ADDR_VAR 0 3
51225: PUSH
51226: LD_INT 40
51228: PPUSH
51229: LD_VAR 0 1
51233: PPUSH
51234: CALL_OW 321
51238: PUSH
51239: LD_INT 2
51241: EQUAL
51242: ST_TO_ADDR
51243: GO 51279
51245: LD_INT 27
51247: DOUBLE
51248: EQUAL
51249: IFTRUE 51253
51251: GO 51278
51253: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51254: LD_ADDR_VAR 0 3
51258: PUSH
51259: LD_INT 35
51261: PPUSH
51262: LD_VAR 0 1
51266: PPUSH
51267: CALL_OW 321
51271: PUSH
51272: LD_INT 2
51274: EQUAL
51275: ST_TO_ADDR
51276: GO 51279
51278: POP
// end ;
51279: LD_VAR 0 3
51283: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51284: LD_INT 0
51286: PPUSH
51287: PPUSH
51288: PPUSH
51289: PPUSH
51290: PPUSH
51291: PPUSH
51292: PPUSH
51293: PPUSH
51294: PPUSH
51295: PPUSH
51296: PPUSH
// result := false ;
51297: LD_ADDR_VAR 0 6
51301: PUSH
51302: LD_INT 0
51304: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51305: LD_VAR 0 1
51309: NOT
51310: PUSH
51311: LD_VAR 0 1
51315: PPUSH
51316: CALL_OW 266
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: IN
51331: NOT
51332: OR
51333: PUSH
51334: LD_VAR 0 2
51338: NOT
51339: OR
51340: PUSH
51341: LD_VAR 0 5
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: LD_INT 4
51360: PUSH
51361: LD_INT 5
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: IN
51372: NOT
51373: OR
51374: PUSH
51375: LD_VAR 0 3
51379: PPUSH
51380: LD_VAR 0 4
51384: PPUSH
51385: CALL_OW 488
51389: NOT
51390: OR
51391: IFFALSE 51395
// exit ;
51393: GO 52131
// side := GetSide ( depot ) ;
51395: LD_ADDR_VAR 0 9
51399: PUSH
51400: LD_VAR 0 1
51404: PPUSH
51405: CALL_OW 255
51409: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51410: LD_VAR 0 9
51414: PPUSH
51415: LD_VAR 0 2
51419: PPUSH
51420: CALL 50904 0 2
51424: NOT
51425: IFFALSE 51429
// exit ;
51427: GO 52131
// pom := GetBase ( depot ) ;
51429: LD_ADDR_VAR 0 10
51433: PUSH
51434: LD_VAR 0 1
51438: PPUSH
51439: CALL_OW 274
51443: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51444: LD_ADDR_VAR 0 11
51448: PUSH
51449: LD_VAR 0 2
51453: PPUSH
51454: LD_VAR 0 1
51458: PPUSH
51459: CALL_OW 248
51463: PPUSH
51464: CALL_OW 450
51468: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51469: LD_VAR 0 10
51473: PPUSH
51474: LD_INT 1
51476: PPUSH
51477: CALL_OW 275
51481: PUSH
51482: LD_VAR 0 11
51486: PUSH
51487: LD_INT 1
51489: ARRAY
51490: GREATEREQUAL
51491: PUSH
51492: LD_VAR 0 10
51496: PPUSH
51497: LD_INT 2
51499: PPUSH
51500: CALL_OW 275
51504: PUSH
51505: LD_VAR 0 11
51509: PUSH
51510: LD_INT 2
51512: ARRAY
51513: GREATEREQUAL
51514: AND
51515: PUSH
51516: LD_VAR 0 10
51520: PPUSH
51521: LD_INT 3
51523: PPUSH
51524: CALL_OW 275
51528: PUSH
51529: LD_VAR 0 11
51533: PUSH
51534: LD_INT 3
51536: ARRAY
51537: GREATEREQUAL
51538: AND
51539: NOT
51540: IFFALSE 51544
// exit ;
51542: GO 52131
// if GetBType ( depot ) = b_depot then
51544: LD_VAR 0 1
51548: PPUSH
51549: CALL_OW 266
51553: PUSH
51554: LD_INT 0
51556: EQUAL
51557: IFFALSE 51569
// dist := 28 else
51559: LD_ADDR_VAR 0 14
51563: PUSH
51564: LD_INT 28
51566: ST_TO_ADDR
51567: GO 51577
// dist := 36 ;
51569: LD_ADDR_VAR 0 14
51573: PUSH
51574: LD_INT 36
51576: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51577: LD_VAR 0 1
51581: PPUSH
51582: LD_VAR 0 3
51586: PPUSH
51587: LD_VAR 0 4
51591: PPUSH
51592: CALL_OW 297
51596: PUSH
51597: LD_VAR 0 14
51601: GREATER
51602: IFFALSE 51606
// exit ;
51604: GO 52131
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51606: LD_ADDR_VAR 0 12
51610: PUSH
51611: LD_VAR 0 2
51615: PPUSH
51616: LD_VAR 0 3
51620: PPUSH
51621: LD_VAR 0 4
51625: PPUSH
51626: LD_VAR 0 5
51630: PPUSH
51631: LD_VAR 0 1
51635: PPUSH
51636: CALL_OW 248
51640: PPUSH
51641: LD_INT 0
51643: PPUSH
51644: CALL 52136 0 6
51648: ST_TO_ADDR
// if not hexes then
51649: LD_VAR 0 12
51653: NOT
51654: IFFALSE 51658
// exit ;
51656: GO 52131
// hex := GetHexInfo ( x , y ) ;
51658: LD_ADDR_VAR 0 15
51662: PUSH
51663: LD_VAR 0 3
51667: PPUSH
51668: LD_VAR 0 4
51672: PPUSH
51673: CALL_OW 546
51677: ST_TO_ADDR
// if hex [ 1 ] then
51678: LD_VAR 0 15
51682: PUSH
51683: LD_INT 1
51685: ARRAY
51686: IFFALSE 51690
// exit ;
51688: GO 52131
// height := hex [ 2 ] ;
51690: LD_ADDR_VAR 0 13
51694: PUSH
51695: LD_VAR 0 15
51699: PUSH
51700: LD_INT 2
51702: ARRAY
51703: ST_TO_ADDR
// for i = 1 to hexes do
51704: LD_ADDR_VAR 0 7
51708: PUSH
51709: DOUBLE
51710: LD_INT 1
51712: DEC
51713: ST_TO_ADDR
51714: LD_VAR 0 12
51718: PUSH
51719: FOR_TO
51720: IFFALSE 52050
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51722: LD_VAR 0 12
51726: PUSH
51727: LD_VAR 0 7
51731: ARRAY
51732: PUSH
51733: LD_INT 1
51735: ARRAY
51736: PPUSH
51737: LD_VAR 0 12
51741: PUSH
51742: LD_VAR 0 7
51746: ARRAY
51747: PUSH
51748: LD_INT 2
51750: ARRAY
51751: PPUSH
51752: CALL_OW 488
51756: NOT
51757: PUSH
51758: LD_VAR 0 12
51762: PUSH
51763: LD_VAR 0 7
51767: ARRAY
51768: PUSH
51769: LD_INT 1
51771: ARRAY
51772: PPUSH
51773: LD_VAR 0 12
51777: PUSH
51778: LD_VAR 0 7
51782: ARRAY
51783: PUSH
51784: LD_INT 2
51786: ARRAY
51787: PPUSH
51788: CALL_OW 428
51792: PUSH
51793: LD_INT 0
51795: GREATER
51796: OR
51797: PUSH
51798: LD_VAR 0 12
51802: PUSH
51803: LD_VAR 0 7
51807: ARRAY
51808: PUSH
51809: LD_INT 1
51811: ARRAY
51812: PPUSH
51813: LD_VAR 0 12
51817: PUSH
51818: LD_VAR 0 7
51822: ARRAY
51823: PUSH
51824: LD_INT 2
51826: ARRAY
51827: PPUSH
51828: CALL_OW 351
51832: OR
51833: IFFALSE 51839
// exit ;
51835: POP
51836: POP
51837: GO 52131
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51839: LD_ADDR_VAR 0 8
51843: PUSH
51844: LD_VAR 0 12
51848: PUSH
51849: LD_VAR 0 7
51853: ARRAY
51854: PUSH
51855: LD_INT 1
51857: ARRAY
51858: PPUSH
51859: LD_VAR 0 12
51863: PUSH
51864: LD_VAR 0 7
51868: ARRAY
51869: PUSH
51870: LD_INT 2
51872: ARRAY
51873: PPUSH
51874: CALL_OW 546
51878: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51879: LD_VAR 0 8
51883: PUSH
51884: LD_INT 1
51886: ARRAY
51887: PUSH
51888: LD_VAR 0 8
51892: PUSH
51893: LD_INT 2
51895: ARRAY
51896: PUSH
51897: LD_VAR 0 13
51901: PUSH
51902: LD_INT 2
51904: PLUS
51905: GREATER
51906: OR
51907: PUSH
51908: LD_VAR 0 8
51912: PUSH
51913: LD_INT 2
51915: ARRAY
51916: PUSH
51917: LD_VAR 0 13
51921: PUSH
51922: LD_INT 2
51924: MINUS
51925: LESS
51926: OR
51927: PUSH
51928: LD_VAR 0 8
51932: PUSH
51933: LD_INT 3
51935: ARRAY
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 8
51942: PUSH
51943: LD_INT 9
51945: PUSH
51946: LD_INT 10
51948: PUSH
51949: LD_INT 11
51951: PUSH
51952: LD_INT 12
51954: PUSH
51955: LD_INT 13
51957: PUSH
51958: LD_INT 16
51960: PUSH
51961: LD_INT 17
51963: PUSH
51964: LD_INT 18
51966: PUSH
51967: LD_INT 19
51969: PUSH
51970: LD_INT 20
51972: PUSH
51973: LD_INT 21
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: IN
51991: NOT
51992: OR
51993: PUSH
51994: LD_VAR 0 8
51998: PUSH
51999: LD_INT 5
52001: ARRAY
52002: NOT
52003: OR
52004: PUSH
52005: LD_VAR 0 8
52009: PUSH
52010: LD_INT 6
52012: ARRAY
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: LD_INT 7
52022: PUSH
52023: LD_INT 9
52025: PUSH
52026: LD_INT 10
52028: PUSH
52029: LD_INT 11
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: IN
52040: NOT
52041: OR
52042: IFFALSE 52048
// exit ;
52044: POP
52045: POP
52046: GO 52131
// end ;
52048: GO 51719
52050: POP
52051: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52052: LD_VAR 0 9
52056: PPUSH
52057: LD_VAR 0 3
52061: PPUSH
52062: LD_VAR 0 4
52066: PPUSH
52067: LD_INT 20
52069: PPUSH
52070: CALL 44077 0 4
52074: PUSH
52075: LD_INT 4
52077: ARRAY
52078: IFFALSE 52082
// exit ;
52080: GO 52131
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52082: LD_VAR 0 2
52086: PUSH
52087: LD_INT 29
52089: PUSH
52090: LD_INT 30
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: IN
52097: PUSH
52098: LD_VAR 0 3
52102: PPUSH
52103: LD_VAR 0 4
52107: PPUSH
52108: LD_VAR 0 9
52112: PPUSH
52113: CALL_OW 440
52117: NOT
52118: AND
52119: IFFALSE 52123
// exit ;
52121: GO 52131
// result := true ;
52123: LD_ADDR_VAR 0 6
52127: PUSH
52128: LD_INT 1
52130: ST_TO_ADDR
// end ;
52131: LD_VAR 0 6
52135: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52136: LD_INT 0
52138: PPUSH
52139: PPUSH
52140: PPUSH
52141: PPUSH
52142: PPUSH
52143: PPUSH
52144: PPUSH
52145: PPUSH
52146: PPUSH
52147: PPUSH
52148: PPUSH
52149: PPUSH
52150: PPUSH
52151: PPUSH
52152: PPUSH
52153: PPUSH
52154: PPUSH
52155: PPUSH
52156: PPUSH
52157: PPUSH
52158: PPUSH
52159: PPUSH
52160: PPUSH
52161: PPUSH
52162: PPUSH
52163: PPUSH
52164: PPUSH
52165: PPUSH
52166: PPUSH
52167: PPUSH
52168: PPUSH
52169: PPUSH
52170: PPUSH
52171: PPUSH
52172: PPUSH
52173: PPUSH
52174: PPUSH
52175: PPUSH
52176: PPUSH
52177: PPUSH
52178: PPUSH
52179: PPUSH
52180: PPUSH
52181: PPUSH
52182: PPUSH
52183: PPUSH
52184: PPUSH
52185: PPUSH
52186: PPUSH
52187: PPUSH
52188: PPUSH
52189: PPUSH
52190: PPUSH
52191: PPUSH
52192: PPUSH
52193: PPUSH
52194: PPUSH
52195: PPUSH
// result = [ ] ;
52196: LD_ADDR_VAR 0 7
52200: PUSH
52201: EMPTY
52202: ST_TO_ADDR
// temp_list = [ ] ;
52203: LD_ADDR_VAR 0 9
52207: PUSH
52208: EMPTY
52209: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52210: LD_VAR 0 4
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: LD_INT 3
52226: PUSH
52227: LD_INT 4
52229: PUSH
52230: LD_INT 5
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: IN
52241: NOT
52242: PUSH
52243: LD_VAR 0 1
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: IN
52258: PUSH
52259: LD_VAR 0 5
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: LD_INT 3
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: IN
52278: NOT
52279: AND
52280: OR
52281: IFFALSE 52285
// exit ;
52283: GO 70676
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52285: LD_VAR 0 1
52289: PUSH
52290: LD_INT 6
52292: PUSH
52293: LD_INT 7
52295: PUSH
52296: LD_INT 8
52298: PUSH
52299: LD_INT 13
52301: PUSH
52302: LD_INT 12
52304: PUSH
52305: LD_INT 15
52307: PUSH
52308: LD_INT 11
52310: PUSH
52311: LD_INT 14
52313: PUSH
52314: LD_INT 10
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: IN
52328: IFFALSE 52338
// btype = b_lab ;
52330: LD_ADDR_VAR 0 1
52334: PUSH
52335: LD_INT 6
52337: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52338: LD_VAR 0 6
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: LIST
52356: IN
52357: NOT
52358: PUSH
52359: LD_VAR 0 1
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: LD_INT 6
52378: PUSH
52379: LD_INT 36
52381: PUSH
52382: LD_INT 4
52384: PUSH
52385: LD_INT 5
52387: PUSH
52388: LD_INT 31
52390: PUSH
52391: LD_INT 32
52393: PUSH
52394: LD_INT 33
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: IN
52410: NOT
52411: PUSH
52412: LD_VAR 0 6
52416: PUSH
52417: LD_INT 1
52419: EQUAL
52420: AND
52421: OR
52422: PUSH
52423: LD_VAR 0 1
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: LD_INT 3
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: IN
52438: NOT
52439: PUSH
52440: LD_VAR 0 6
52444: PUSH
52445: LD_INT 2
52447: EQUAL
52448: AND
52449: OR
52450: IFFALSE 52460
// mode = 0 ;
52452: LD_ADDR_VAR 0 6
52456: PUSH
52457: LD_INT 0
52459: ST_TO_ADDR
// case mode of 0 :
52460: LD_VAR 0 6
52464: PUSH
52465: LD_INT 0
52467: DOUBLE
52468: EQUAL
52469: IFTRUE 52473
52471: GO 63926
52473: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52474: LD_ADDR_VAR 0 11
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 3
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52667: LD_ADDR_VAR 0 12
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 3
52824: NEG
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52863: LD_ADDR_VAR 0 13
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: LD_INT 2
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 3
53022: NEG
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: LD_INT 3
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53062: LD_ADDR_VAR 0 14
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53258: LD_ADDR_VAR 0 15
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 3
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53451: LD_ADDR_VAR 0 16
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 2
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 3
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 3
53608: PUSH
53609: LD_INT 3
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: LD_INT 3
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53644: LD_ADDR_VAR 0 17
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: NEG
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53874: LD_ADDR_VAR 0 18
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54104: LD_ADDR_VAR 0 19
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54334: LD_ADDR_VAR 0 20
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 2
54521: NEG
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54564: LD_ADDR_VAR 0 21
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54794: LD_ADDR_VAR 0 22
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: LD_INT 2
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55024: LD_ADDR_VAR 0 23
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: NEG
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 2
55211: NEG
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 3
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55304: LD_ADDR_VAR 0 24
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 2
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: NEG
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 3
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 3
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55580: LD_ADDR_VAR 0 25
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 2
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: LD_INT 3
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: LD_INT 3
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55854: LD_ADDR_VAR 0 26
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 2
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 2
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 3
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 2
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56130: LD_ADDR_VAR 0 27
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 2
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 2
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 3
56363: NEG
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 3
56375: NEG
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56410: LD_ADDR_VAR 0 28
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 2
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: NEG
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 3
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56692: LD_ADDR_VAR 0 29
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 0
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: NEG
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: LD_INT 3
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56971: LD_ADDR_VAR 0 30
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 2
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: LD_INT 2
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 3
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57249: LD_ADDR_VAR 0 31
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 2
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 2
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: LD_INT 1
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 3
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57527: LD_ADDR_VAR 0 32
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: LD_INT 3
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57805: LD_ADDR_VAR 0 33
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 2
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: LD_INT 3
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 3
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: LD_INT 2
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58084: LD_ADDR_VAR 0 34
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58364: LD_ADDR_VAR 0 35
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58476: LD_ADDR_VAR 0 36
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58588: LD_ADDR_VAR 0 37
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58700: LD_ADDR_VAR 0 38
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58812: LD_ADDR_VAR 0 39
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: LD_INT 2
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58924: LD_ADDR_VAR 0 40
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59036: LD_ADDR_VAR 0 41
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: NEG
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: LD_INT 2
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: LD_INT 3
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 3
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 3
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 3
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: LD_INT 3
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: LD_INT 3
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: NEG
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59386: LD_ADDR_VAR 0 42
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: LD_INT 2
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: LD_INT 3
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: LD_INT 3
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 3
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 3
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: LD_INT 3
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 3
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: LD_INT 3
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 3
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 3
59683: NEG
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 3
59695: NEG
59696: PUSH
59697: LD_INT 3
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59736: LD_ADDR_VAR 0 43
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: NEG
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: LD_INT 3
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 3
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 3
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 3
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: LD_INT 3
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 3
60032: NEG
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 3
60043: NEG
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60084: LD_ADDR_VAR 0 44
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 2
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 2
60262: NEG
60263: PUSH
60264: LD_INT 2
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: NEG
60275: PUSH
60276: LD_INT 3
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 3
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: LD_INT 3
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: LD_INT 3
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 3
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 3
60393: NEG
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60434: LD_ADDR_VAR 0 45
60438: PUSH
60439: LD_INT 0
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 2
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 2
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: NEG
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: LD_INT 2
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: LD_INT 3
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: NEG
60637: PUSH
60638: LD_INT 3
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 3
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: LD_INT 3
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: LD_INT 3
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: LD_INT 3
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 3
60731: NEG
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 3
60743: NEG
60744: PUSH
60745: LD_INT 3
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60784: LD_ADDR_VAR 0 46
60788: PUSH
60789: LD_INT 0
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 1
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 2
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: LD_INT 2
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 3
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 3
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 3
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 3
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: LD_INT 3
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 3
61091: NEG
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61132: LD_ADDR_VAR 0 47
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 1
61205: NEG
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: LD_INT 2
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: LD_INT 2
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 1
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: LD_INT 1
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: LD_INT 2
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61283: LD_ADDR_VAR 0 48
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61430: LD_ADDR_VAR 0 49
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: LD_INT 0
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 2
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 2
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61574: LD_ADDR_VAR 0 50
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: LD_INT 1
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: LD_INT 1
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 1
61632: NEG
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: LD_INT 2
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61718: LD_ADDR_VAR 0 51
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 2
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 2
61830: NEG
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61865: LD_ADDR_VAR 0 52
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 1
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: NEG
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: NEG
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 2
61980: NEG
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62016: LD_ADDR_VAR 0 53
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: LD_INT 2
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 2
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 2
62151: PUSH
62152: LD_INT 2
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: LD_INT 2
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 2
62192: NEG
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: NEG
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62246: LD_ADDR_VAR 0 54
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: LD_INT 1
62266: NEG
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: NEG
62328: PUSH
62329: LD_INT 2
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 2
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 2
62445: NEG
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62476: LD_ADDR_VAR 0 55
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: NEG
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 2
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 2
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 2
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: LD_INT 2
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 2
62652: NEG
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 2
62663: NEG
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 2
62675: NEG
62676: PUSH
62677: LD_INT 2
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62706: LD_ADDR_VAR 0 56
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: LD_INT 1
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 2
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 2
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 2
62882: NEG
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 2
62893: NEG
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 2
62905: NEG
62906: PUSH
62907: LD_INT 2
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62936: LD_ADDR_VAR 0 57
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: LD_INT 2
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: LD_INT 2
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: LD_INT 2
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: NEG
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 2
63123: NEG
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 2
63135: NEG
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63166: LD_ADDR_VAR 0 58
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: LD_INT 0
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 2
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: LD_INT 1
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 2
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 2
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 2
63301: PUSH
63302: LD_INT 2
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 2
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 2
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 2
63342: NEG
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 2
63353: NEG
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 2
63365: NEG
63366: PUSH
63367: LD_INT 2
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63396: LD_ADDR_VAR 0 59
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 1
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: LD_INT 1
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63484: LD_ADDR_VAR 0 60
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: LD_INT 1
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: LD_INT 1
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63572: LD_ADDR_VAR 0 61
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 1
63610: PUSH
63611: LD_INT 1
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 0
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: NEG
63631: PUSH
63632: LD_INT 0
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63660: LD_ADDR_VAR 0 62
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: LD_INT 1
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: LD_INT 0
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: LD_INT 1
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63748: LD_ADDR_VAR 0 63
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63836: LD_ADDR_VAR 0 64
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: ST_TO_ADDR
// end ; 1 :
63924: GO 69821
63926: LD_INT 1
63928: DOUBLE
63929: EQUAL
63930: IFTRUE 63934
63932: GO 66557
63934: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63935: LD_ADDR_VAR 0 11
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: LD_INT 3
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 3
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: LD_INT 2
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63979: LD_ADDR_VAR 0 12
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 3
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 3
64007: PUSH
64008: LD_INT 1
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: LIST
64019: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64020: LD_ADDR_VAR 0 13
64024: PUSH
64025: LD_INT 3
64027: PUSH
64028: LD_INT 2
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: LD_INT 3
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 2
64047: PUSH
64048: LD_INT 3
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: LIST
64059: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64060: LD_ADDR_VAR 0 14
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 3
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64101: LD_ADDR_VAR 0 15
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: LD_INT 1
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 3
64119: NEG
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 3
64130: NEG
64131: PUSH
64132: LD_INT 1
64134: NEG
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: LIST
64144: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64145: LD_ADDR_VAR 0 16
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: LD_INT 3
64156: NEG
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 3
64164: NEG
64165: PUSH
64166: LD_INT 2
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 3
64176: NEG
64177: PUSH
64178: LD_INT 3
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: LIST
64190: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64191: LD_ADDR_VAR 0 17
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: LD_INT 3
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 3
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: PUSH
64222: LD_INT 2
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: LIST
64234: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64235: LD_ADDR_VAR 0 18
64239: PUSH
64240: LD_INT 2
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 3
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 3
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64276: LD_ADDR_VAR 0 19
64280: PUSH
64281: LD_INT 3
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 3
64293: PUSH
64294: LD_INT 3
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: LD_INT 3
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: LIST
64315: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64316: LD_ADDR_VAR 0 20
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: LD_INT 3
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: LD_INT 3
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 1
64343: NEG
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: LIST
64356: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64357: LD_ADDR_VAR 0 21
64361: PUSH
64362: LD_INT 2
64364: NEG
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 3
64375: NEG
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 3
64386: NEG
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: LIST
64400: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64401: LD_ADDR_VAR 0 22
64405: PUSH
64406: LD_INT 2
64408: NEG
64409: PUSH
64410: LD_INT 3
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 3
64420: NEG
64421: PUSH
64422: LD_INT 2
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 3
64432: NEG
64433: PUSH
64434: LD_INT 3
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: LIST
64446: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64447: LD_ADDR_VAR 0 23
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: LD_INT 3
64457: NEG
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 1
64465: NEG
64466: PUSH
64467: LD_INT 4
64469: NEG
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 1
64477: PUSH
64478: LD_INT 3
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: LIST
64490: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64491: LD_ADDR_VAR 0 24
64495: PUSH
64496: LD_INT 3
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 3
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 4
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: LIST
64531: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64532: LD_ADDR_VAR 0 25
64536: PUSH
64537: LD_INT 3
64539: PUSH
64540: LD_INT 3
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 4
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 3
64559: PUSH
64560: LD_INT 4
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: LIST
64571: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64572: LD_ADDR_VAR 0 26
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 3
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: PUSH
64590: LD_INT 4
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 1
64599: NEG
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64613: LD_ADDR_VAR 0 27
64617: PUSH
64618: LD_INT 3
64620: NEG
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 3
64631: NEG
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 4
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64657: LD_ADDR_VAR 0 28
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: LD_INT 3
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 3
64676: NEG
64677: PUSH
64678: LD_INT 4
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 4
64688: NEG
64689: PUSH
64690: LD_INT 3
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64703: LD_ADDR_VAR 0 29
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: LD_INT 3
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 3
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 1
64733: PUSH
64734: LD_INT 2
64736: NEG
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: LD_INT 4
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: LD_INT 4
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: LD_INT 3
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: LD_INT 5
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: LD_INT 5
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: LD_INT 4
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: LD_INT 6
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 6
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: LD_INT 5
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64858: LD_ADDR_VAR 0 30
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 3
64876: PUSH
64877: LD_INT 0
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: LD_INT 1
64899: NEG
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 4
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 4
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 4
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 5
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 5
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 5
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 6
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 6
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65001: LD_ADDR_VAR 0 31
65005: PUSH
65006: LD_INT 3
65008: PUSH
65009: LD_INT 2
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 3
65018: PUSH
65019: LD_INT 3
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: LD_INT 3
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 4
65038: PUSH
65039: LD_INT 3
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 4
65048: PUSH
65049: LD_INT 4
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 3
65058: PUSH
65059: LD_INT 4
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 5
65068: PUSH
65069: LD_INT 4
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 5
65078: PUSH
65079: LD_INT 5
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 4
65088: PUSH
65089: LD_INT 5
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 6
65098: PUSH
65099: LD_INT 5
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 6
65108: PUSH
65109: LD_INT 6
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 5
65118: PUSH
65119: LD_INT 6
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65140: LD_ADDR_VAR 0 32
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: LD_INT 3
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 3
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 1
65167: NEG
65168: PUSH
65169: LD_INT 2
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: LD_INT 4
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: LD_INT 4
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: LD_INT 3
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 1
65209: PUSH
65210: LD_INT 5
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: LD_INT 5
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: LD_INT 4
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: LD_INT 6
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: LD_INT 6
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: PUSH
65262: LD_INT 5
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65283: LD_ADDR_VAR 0 33
65287: PUSH
65288: LD_INT 2
65290: NEG
65291: PUSH
65292: LD_INT 1
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 3
65301: NEG
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 3
65312: NEG
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 3
65324: NEG
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 4
65335: NEG
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 4
65346: NEG
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 4
65358: NEG
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 5
65369: NEG
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 5
65380: NEG
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 5
65392: NEG
65393: PUSH
65394: LD_INT 1
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 6
65403: NEG
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 6
65414: NEG
65415: PUSH
65416: LD_INT 1
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65438: LD_ADDR_VAR 0 34
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: LD_INT 3
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 3
65457: NEG
65458: PUSH
65459: LD_INT 2
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 3
65469: NEG
65470: PUSH
65471: LD_INT 3
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 3
65481: NEG
65482: PUSH
65483: LD_INT 4
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 4
65493: NEG
65494: PUSH
65495: LD_INT 3
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 4
65505: NEG
65506: PUSH
65507: LD_INT 4
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 4
65517: NEG
65518: PUSH
65519: LD_INT 5
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 5
65529: NEG
65530: PUSH
65531: LD_INT 4
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 5
65541: NEG
65542: PUSH
65543: LD_INT 5
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 5
65553: NEG
65554: PUSH
65555: LD_INT 6
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 6
65565: NEG
65566: PUSH
65567: LD_INT 5
65569: NEG
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 6
65577: NEG
65578: PUSH
65579: LD_INT 6
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65601: LD_ADDR_VAR 0 41
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: LD_INT 2
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: LD_INT 3
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 1
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: LIST
65644: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65645: LD_ADDR_VAR 0 42
65649: PUSH
65650: LD_INT 2
65652: PUSH
65653: LD_INT 0
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: LD_INT 1
65665: NEG
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 3
65673: PUSH
65674: LD_INT 1
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65686: LD_ADDR_VAR 0 43
65690: PUSH
65691: LD_INT 2
65693: PUSH
65694: LD_INT 2
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 3
65703: PUSH
65704: LD_INT 2
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 2
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: LIST
65725: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65726: LD_ADDR_VAR 0 44
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: LD_INT 2
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 1
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: LD_INT 2
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: LIST
65766: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65767: LD_ADDR_VAR 0 45
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 2
65785: NEG
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 3
65796: NEG
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: LIST
65810: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65811: LD_ADDR_VAR 0 46
65815: PUSH
65816: LD_INT 2
65818: NEG
65819: PUSH
65820: LD_INT 2
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 2
65830: NEG
65831: PUSH
65832: LD_INT 3
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 3
65842: NEG
65843: PUSH
65844: LD_INT 2
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: LIST
65856: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65857: LD_ADDR_VAR 0 47
65861: PUSH
65862: LD_INT 2
65864: NEG
65865: PUSH
65866: LD_INT 3
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 1
65876: NEG
65877: PUSH
65878: LD_INT 3
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65890: LD_ADDR_VAR 0 48
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: LD_INT 2
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 2
65908: PUSH
65909: LD_INT 1
65911: NEG
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65921: LD_ADDR_VAR 0 49
65925: PUSH
65926: LD_INT 3
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: LD_INT 2
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65950: LD_ADDR_VAR 0 50
65954: PUSH
65955: LD_INT 2
65957: PUSH
65958: LD_INT 3
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 1
65967: PUSH
65968: LD_INT 3
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65979: LD_ADDR_VAR 0 51
65983: PUSH
65984: LD_INT 1
65986: NEG
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 2
65997: NEG
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66010: LD_ADDR_VAR 0 52
66014: PUSH
66015: LD_INT 3
66017: NEG
66018: PUSH
66019: LD_INT 1
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 3
66029: NEG
66030: PUSH
66031: LD_INT 2
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66043: LD_ADDR_VAR 0 53
66047: PUSH
66048: LD_INT 1
66050: NEG
66051: PUSH
66052: LD_INT 3
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 3
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66087: LD_ADDR_VAR 0 54
66091: PUSH
66092: LD_INT 2
66094: PUSH
66095: LD_INT 1
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 3
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 3
66115: PUSH
66116: LD_INT 1
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: LIST
66127: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66128: LD_ADDR_VAR 0 55
66132: PUSH
66133: LD_INT 3
66135: PUSH
66136: LD_INT 2
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 3
66145: PUSH
66146: LD_INT 3
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 2
66155: PUSH
66156: LD_INT 3
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: LIST
66167: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66168: LD_ADDR_VAR 0 56
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: LD_INT 3
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: LD_INT 3
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 1
66195: NEG
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: LIST
66208: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66209: LD_ADDR_VAR 0 57
66213: PUSH
66214: LD_INT 2
66216: NEG
66217: PUSH
66218: LD_INT 1
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 3
66227: NEG
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 3
66238: NEG
66239: PUSH
66240: LD_INT 1
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: LIST
66252: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66253: LD_ADDR_VAR 0 58
66257: PUSH
66258: LD_INT 2
66260: NEG
66261: PUSH
66262: LD_INT 3
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 3
66272: NEG
66273: PUSH
66274: LD_INT 2
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 3
66284: NEG
66285: PUSH
66286: LD_INT 3
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: LIST
66298: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66299: LD_ADDR_VAR 0 59
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: LD_INT 2
66310: NEG
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 0
66318: PUSH
66319: LD_INT 2
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 1
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66343: LD_ADDR_VAR 0 60
66347: PUSH
66348: LD_INT 1
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 2
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 2
66371: PUSH
66372: LD_INT 1
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66384: LD_ADDR_VAR 0 61
66388: PUSH
66389: LD_INT 2
66391: PUSH
66392: LD_INT 1
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 2
66401: PUSH
66402: LD_INT 2
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 1
66411: PUSH
66412: LD_INT 2
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: LIST
66423: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66424: LD_ADDR_VAR 0 62
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: LD_INT 2
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 0
66441: PUSH
66442: LD_INT 2
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 1
66451: NEG
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: LIST
66464: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66465: LD_ADDR_VAR 0 63
66469: PUSH
66470: LD_INT 1
66472: NEG
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 2
66483: NEG
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 2
66494: NEG
66495: PUSH
66496: LD_INT 1
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66509: LD_ADDR_VAR 0 64
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: LD_INT 2
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: NEG
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: LD_INT 2
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: LIST
66554: ST_TO_ADDR
// end ; 2 :
66555: GO 69821
66557: LD_INT 2
66559: DOUBLE
66560: EQUAL
66561: IFTRUE 66565
66563: GO 69820
66565: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66566: LD_ADDR_VAR 0 29
66570: PUSH
66571: LD_INT 4
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 4
66583: PUSH
66584: LD_INT 1
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 5
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 5
66604: PUSH
66605: LD_INT 1
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 4
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 3
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 3
66634: PUSH
66635: LD_INT 1
66637: NEG
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 3
66645: PUSH
66646: LD_INT 2
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 5
66656: PUSH
66657: LD_INT 2
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 3
66666: PUSH
66667: LD_INT 3
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 3
66676: PUSH
66677: LD_INT 2
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 4
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 4
66696: PUSH
66697: LD_INT 4
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 3
66706: PUSH
66707: LD_INT 4
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 2
66716: PUSH
66717: LD_INT 3
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 2
66726: PUSH
66727: LD_INT 2
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 4
66736: PUSH
66737: LD_INT 2
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 2
66746: PUSH
66747: LD_INT 4
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: LD_INT 4
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: LD_INT 3
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 1
66776: PUSH
66777: LD_INT 4
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 1
66786: PUSH
66787: LD_INT 5
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 0
66796: PUSH
66797: LD_INT 5
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 1
66806: NEG
66807: PUSH
66808: LD_INT 4
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 1
66817: NEG
66818: PUSH
66819: LD_INT 3
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 2
66828: PUSH
66829: LD_INT 5
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 2
66838: NEG
66839: PUSH
66840: LD_INT 3
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 3
66849: NEG
66850: PUSH
66851: LD_INT 0
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 3
66860: NEG
66861: PUSH
66862: LD_INT 1
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 2
66872: NEG
66873: PUSH
66874: LD_INT 0
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 2
66883: NEG
66884: PUSH
66885: LD_INT 1
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 3
66894: NEG
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 4
66905: NEG
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 4
66916: NEG
66917: PUSH
66918: LD_INT 1
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 4
66928: NEG
66929: PUSH
66930: LD_INT 2
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 2
66940: NEG
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 4
66951: NEG
66952: PUSH
66953: LD_INT 4
66955: NEG
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 4
66963: NEG
66964: PUSH
66965: LD_INT 5
66967: NEG
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 3
66975: NEG
66976: PUSH
66977: LD_INT 4
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 3
66987: NEG
66988: PUSH
66989: LD_INT 3
66991: NEG
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 4
66999: NEG
67000: PUSH
67001: LD_INT 3
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 5
67011: NEG
67012: PUSH
67013: LD_INT 4
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 5
67023: NEG
67024: PUSH
67025: LD_INT 5
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 3
67035: NEG
67036: PUSH
67037: LD_INT 5
67039: NEG
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 5
67047: NEG
67048: PUSH
67049: LD_INT 3
67051: NEG
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67104: LD_ADDR_VAR 0 30
67108: PUSH
67109: LD_INT 4
67111: PUSH
67112: LD_INT 4
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 4
67121: PUSH
67122: LD_INT 3
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 5
67131: PUSH
67132: LD_INT 4
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 5
67141: PUSH
67142: LD_INT 5
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 4
67151: PUSH
67152: LD_INT 5
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 3
67161: PUSH
67162: LD_INT 4
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 3
67171: PUSH
67172: LD_INT 3
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 5
67181: PUSH
67182: LD_INT 3
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 3
67191: PUSH
67192: LD_INT 5
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: LD_INT 3
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 0
67211: PUSH
67212: LD_INT 2
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 1
67221: PUSH
67222: LD_INT 3
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 1
67231: PUSH
67232: LD_INT 4
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 0
67241: PUSH
67242: LD_INT 4
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 1
67251: NEG
67252: PUSH
67253: LD_INT 3
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 1
67262: NEG
67263: PUSH
67264: LD_INT 2
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 2
67273: PUSH
67274: LD_INT 4
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 2
67283: NEG
67284: PUSH
67285: LD_INT 2
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 4
67294: NEG
67295: PUSH
67296: LD_INT 0
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 4
67305: NEG
67306: PUSH
67307: LD_INT 1
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 3
67317: NEG
67318: PUSH
67319: LD_INT 0
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 3
67328: NEG
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 4
67339: NEG
67340: PUSH
67341: LD_INT 1
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 5
67350: NEG
67351: PUSH
67352: LD_INT 0
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 5
67361: NEG
67362: PUSH
67363: LD_INT 1
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 5
67373: NEG
67374: PUSH
67375: LD_INT 2
67377: NEG
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 3
67385: NEG
67386: PUSH
67387: LD_INT 2
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 3
67396: NEG
67397: PUSH
67398: LD_INT 3
67400: NEG
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 3
67408: NEG
67409: PUSH
67410: LD_INT 4
67412: NEG
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 2
67420: NEG
67421: PUSH
67422: LD_INT 3
67424: NEG
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 2
67432: NEG
67433: PUSH
67434: LD_INT 2
67436: NEG
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 3
67444: NEG
67445: PUSH
67446: LD_INT 2
67448: NEG
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 4
67456: NEG
67457: PUSH
67458: LD_INT 3
67460: NEG
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 4
67468: NEG
67469: PUSH
67470: LD_INT 4
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 2
67480: NEG
67481: PUSH
67482: LD_INT 4
67484: NEG
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 4
67492: NEG
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: LD_INT 4
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: LD_INT 5
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 1
67526: PUSH
67527: LD_INT 4
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 1
67537: PUSH
67538: LD_INT 3
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 0
67548: PUSH
67549: LD_INT 3
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 1
67559: NEG
67560: PUSH
67561: LD_INT 4
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 1
67571: NEG
67572: PUSH
67573: LD_INT 5
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 2
67583: PUSH
67584: LD_INT 3
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 2
67594: NEG
67595: PUSH
67596: LD_INT 5
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67651: LD_ADDR_VAR 0 31
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: LD_INT 4
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 0
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: PUSH
67679: LD_INT 4
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 1
67688: PUSH
67689: LD_INT 5
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 0
67698: PUSH
67699: LD_INT 5
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 1
67708: NEG
67709: PUSH
67710: LD_INT 4
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 1
67719: NEG
67720: PUSH
67721: LD_INT 3
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 2
67730: PUSH
67731: LD_INT 5
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 2
67740: NEG
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 3
67751: NEG
67752: PUSH
67753: LD_INT 0
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 3
67762: NEG
67763: PUSH
67764: LD_INT 1
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 2
67774: NEG
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 2
67785: NEG
67786: PUSH
67787: LD_INT 1
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 3
67796: NEG
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 4
67807: NEG
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 4
67818: NEG
67819: PUSH
67820: LD_INT 1
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 4
67830: NEG
67831: PUSH
67832: LD_INT 2
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 2
67842: NEG
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 4
67853: NEG
67854: PUSH
67855: LD_INT 4
67857: NEG
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 4
67865: NEG
67866: PUSH
67867: LD_INT 5
67869: NEG
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 3
67877: NEG
67878: PUSH
67879: LD_INT 4
67881: NEG
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 3
67889: NEG
67890: PUSH
67891: LD_INT 3
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 4
67901: NEG
67902: PUSH
67903: LD_INT 3
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 5
67913: NEG
67914: PUSH
67915: LD_INT 4
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 5
67925: NEG
67926: PUSH
67927: LD_INT 5
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 3
67937: NEG
67938: PUSH
67939: LD_INT 5
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 5
67949: NEG
67950: PUSH
67951: LD_INT 3
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: LD_INT 3
67964: NEG
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 0
67972: PUSH
67973: LD_INT 4
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 1
67983: PUSH
67984: LD_INT 3
67986: NEG
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 1
67994: PUSH
67995: LD_INT 2
67997: NEG
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: LD_INT 2
68008: NEG
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 1
68016: NEG
68017: PUSH
68018: LD_INT 3
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: NEG
68029: PUSH
68030: LD_INT 4
68032: NEG
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 2
68040: PUSH
68041: LD_INT 2
68043: NEG
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 2
68051: NEG
68052: PUSH
68053: LD_INT 4
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 4
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 4
68073: PUSH
68074: LD_INT 1
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 5
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 5
68094: PUSH
68095: LD_INT 1
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 4
68104: PUSH
68105: LD_INT 1
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 3
68114: PUSH
68115: LD_INT 0
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 3
68124: PUSH
68125: LD_INT 1
68127: NEG
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 3
68135: PUSH
68136: LD_INT 2
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 5
68146: PUSH
68147: LD_INT 2
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68201: LD_ADDR_VAR 0 32
68205: PUSH
68206: LD_INT 4
68208: NEG
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 4
68219: NEG
68220: PUSH
68221: LD_INT 1
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 3
68231: NEG
68232: PUSH
68233: LD_INT 0
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 3
68242: NEG
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 4
68253: NEG
68254: PUSH
68255: LD_INT 1
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 5
68264: NEG
68265: PUSH
68266: LD_INT 0
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 5
68275: NEG
68276: PUSH
68277: LD_INT 1
68279: NEG
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 5
68287: NEG
68288: PUSH
68289: LD_INT 2
68291: NEG
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 3
68299: NEG
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 3
68310: NEG
68311: PUSH
68312: LD_INT 3
68314: NEG
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 3
68322: NEG
68323: PUSH
68324: LD_INT 4
68326: NEG
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 2
68334: NEG
68335: PUSH
68336: LD_INT 3
68338: NEG
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 2
68346: NEG
68347: PUSH
68348: LD_INT 2
68350: NEG
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 3
68358: NEG
68359: PUSH
68360: LD_INT 2
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 4
68370: NEG
68371: PUSH
68372: LD_INT 3
68374: NEG
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 4
68382: NEG
68383: PUSH
68384: LD_INT 4
68386: NEG
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 2
68394: NEG
68395: PUSH
68396: LD_INT 4
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 4
68406: NEG
68407: PUSH
68408: LD_INT 2
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 0
68418: PUSH
68419: LD_INT 4
68421: NEG
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 0
68429: PUSH
68430: LD_INT 5
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 1
68440: PUSH
68441: LD_INT 4
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 1
68451: PUSH
68452: LD_INT 3
68454: NEG
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 0
68462: PUSH
68463: LD_INT 3
68465: NEG
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 1
68473: NEG
68474: PUSH
68475: LD_INT 4
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: LD_INT 5
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 2
68497: PUSH
68498: LD_INT 3
68500: NEG
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 2
68508: NEG
68509: PUSH
68510: LD_INT 5
68512: NEG
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 3
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 3
68530: PUSH
68531: LD_INT 1
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 4
68541: PUSH
68542: LD_INT 0
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 4
68551: PUSH
68552: LD_INT 1
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 3
68561: PUSH
68562: LD_INT 1
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 2
68571: PUSH
68572: LD_INT 0
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 2
68581: PUSH
68582: LD_INT 1
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 2
68592: PUSH
68593: LD_INT 2
68595: NEG
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 4
68603: PUSH
68604: LD_INT 2
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 4
68613: PUSH
68614: LD_INT 4
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 4
68623: PUSH
68624: LD_INT 3
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 5
68633: PUSH
68634: LD_INT 4
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 5
68643: PUSH
68644: LD_INT 5
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 4
68653: PUSH
68654: LD_INT 5
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 3
68663: PUSH
68664: LD_INT 4
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 3
68673: PUSH
68674: LD_INT 3
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 5
68683: PUSH
68684: LD_INT 3
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 3
68693: PUSH
68694: LD_INT 5
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68748: LD_ADDR_VAR 0 33
68752: PUSH
68753: LD_INT 4
68755: NEG
68756: PUSH
68757: LD_INT 4
68759: NEG
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 4
68767: NEG
68768: PUSH
68769: LD_INT 5
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 3
68779: NEG
68780: PUSH
68781: LD_INT 4
68783: NEG
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 3
68791: NEG
68792: PUSH
68793: LD_INT 3
68795: NEG
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 4
68803: NEG
68804: PUSH
68805: LD_INT 3
68807: NEG
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 5
68815: NEG
68816: PUSH
68817: LD_INT 4
68819: NEG
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 5
68827: NEG
68828: PUSH
68829: LD_INT 5
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 3
68839: NEG
68840: PUSH
68841: LD_INT 5
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 5
68851: NEG
68852: PUSH
68853: LD_INT 3
68855: NEG
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 0
68863: PUSH
68864: LD_INT 3
68866: NEG
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: LD_INT 4
68877: NEG
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 1
68885: PUSH
68886: LD_INT 3
68888: NEG
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 1
68896: PUSH
68897: LD_INT 2
68899: NEG
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 0
68907: PUSH
68908: LD_INT 2
68910: NEG
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 1
68918: NEG
68919: PUSH
68920: LD_INT 3
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 1
68930: NEG
68931: PUSH
68932: LD_INT 4
68934: NEG
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 2
68942: PUSH
68943: LD_INT 2
68945: NEG
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 2
68953: NEG
68954: PUSH
68955: LD_INT 4
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 4
68965: PUSH
68966: LD_INT 0
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 4
68975: PUSH
68976: LD_INT 1
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 5
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 5
68996: PUSH
68997: LD_INT 1
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 4
69006: PUSH
69007: LD_INT 1
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 3
69016: PUSH
69017: LD_INT 0
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 3
69026: PUSH
69027: LD_INT 1
69029: NEG
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 3
69037: PUSH
69038: LD_INT 2
69040: NEG
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 5
69048: PUSH
69049: LD_INT 2
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 3
69058: PUSH
69059: LD_INT 3
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 3
69068: PUSH
69069: LD_INT 2
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 4
69078: PUSH
69079: LD_INT 3
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 4
69088: PUSH
69089: LD_INT 4
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 3
69098: PUSH
69099: LD_INT 4
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 2
69108: PUSH
69109: LD_INT 3
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 2
69118: PUSH
69119: LD_INT 2
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 4
69128: PUSH
69129: LD_INT 2
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 2
69138: PUSH
69139: LD_INT 4
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 0
69148: PUSH
69149: LD_INT 4
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 0
69158: PUSH
69159: LD_INT 3
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 1
69168: PUSH
69169: LD_INT 4
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 1
69178: PUSH
69179: LD_INT 5
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: LD_INT 5
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 1
69198: NEG
69199: PUSH
69200: LD_INT 4
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 1
69209: NEG
69210: PUSH
69211: LD_INT 3
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 2
69220: PUSH
69221: LD_INT 5
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 2
69230: NEG
69231: PUSH
69232: LD_INT 3
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69286: LD_ADDR_VAR 0 34
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: LD_INT 4
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 0
69304: PUSH
69305: LD_INT 5
69307: NEG
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 1
69315: PUSH
69316: LD_INT 4
69318: NEG
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 1
69326: PUSH
69327: LD_INT 3
69329: NEG
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 0
69337: PUSH
69338: LD_INT 3
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 1
69348: NEG
69349: PUSH
69350: LD_INT 4
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 1
69360: NEG
69361: PUSH
69362: LD_INT 5
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 2
69372: PUSH
69373: LD_INT 3
69375: NEG
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 2
69383: NEG
69384: PUSH
69385: LD_INT 5
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 3
69395: PUSH
69396: LD_INT 0
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 3
69405: PUSH
69406: LD_INT 1
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 4
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 4
69426: PUSH
69427: LD_INT 1
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 3
69436: PUSH
69437: LD_INT 1
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 2
69446: PUSH
69447: LD_INT 0
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 2
69456: PUSH
69457: LD_INT 1
69459: NEG
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 2
69467: PUSH
69468: LD_INT 2
69470: NEG
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 4
69478: PUSH
69479: LD_INT 2
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 4
69488: PUSH
69489: LD_INT 4
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 4
69498: PUSH
69499: LD_INT 3
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 5
69508: PUSH
69509: LD_INT 4
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 5
69518: PUSH
69519: LD_INT 5
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 4
69528: PUSH
69529: LD_INT 5
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 3
69538: PUSH
69539: LD_INT 4
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 3
69548: PUSH
69549: LD_INT 3
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 5
69558: PUSH
69559: LD_INT 3
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: LD_INT 5
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 0
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 0
69588: PUSH
69589: LD_INT 2
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 1
69598: PUSH
69599: LD_INT 3
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 1
69608: PUSH
69609: LD_INT 4
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 0
69618: PUSH
69619: LD_INT 4
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 1
69628: NEG
69629: PUSH
69630: LD_INT 3
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 1
69639: NEG
69640: PUSH
69641: LD_INT 2
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 2
69650: PUSH
69651: LD_INT 4
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 2
69660: NEG
69661: PUSH
69662: LD_INT 2
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 4
69671: NEG
69672: PUSH
69673: LD_INT 0
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 4
69682: NEG
69683: PUSH
69684: LD_INT 1
69686: NEG
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 3
69694: NEG
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 3
69705: NEG
69706: PUSH
69707: LD_INT 1
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 4
69716: NEG
69717: PUSH
69718: LD_INT 1
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 5
69727: NEG
69728: PUSH
69729: LD_INT 0
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: LD_INT 5
69738: NEG
69739: PUSH
69740: LD_INT 1
69742: NEG
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 5
69750: NEG
69751: PUSH
69752: LD_INT 2
69754: NEG
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 3
69762: NEG
69763: PUSH
69764: LD_INT 2
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: ST_TO_ADDR
// end ; end ;
69818: GO 69821
69820: POP
// case btype of b_depot , b_warehouse :
69821: LD_VAR 0 1
69825: PUSH
69826: LD_INT 0
69828: DOUBLE
69829: EQUAL
69830: IFTRUE 69840
69832: LD_INT 1
69834: DOUBLE
69835: EQUAL
69836: IFTRUE 69840
69838: GO 70041
69840: POP
// case nation of nation_american :
69841: LD_VAR 0 5
69845: PUSH
69846: LD_INT 1
69848: DOUBLE
69849: EQUAL
69850: IFTRUE 69854
69852: GO 69910
69854: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69855: LD_ADDR_VAR 0 9
69859: PUSH
69860: LD_VAR 0 11
69864: PUSH
69865: LD_VAR 0 12
69869: PUSH
69870: LD_VAR 0 13
69874: PUSH
69875: LD_VAR 0 14
69879: PUSH
69880: LD_VAR 0 15
69884: PUSH
69885: LD_VAR 0 16
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: PUSH
69898: LD_VAR 0 4
69902: PUSH
69903: LD_INT 1
69905: PLUS
69906: ARRAY
69907: ST_TO_ADDR
69908: GO 70039
69910: LD_INT 2
69912: DOUBLE
69913: EQUAL
69914: IFTRUE 69918
69916: GO 69974
69918: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69919: LD_ADDR_VAR 0 9
69923: PUSH
69924: LD_VAR 0 17
69928: PUSH
69929: LD_VAR 0 18
69933: PUSH
69934: LD_VAR 0 19
69938: PUSH
69939: LD_VAR 0 20
69943: PUSH
69944: LD_VAR 0 21
69948: PUSH
69949: LD_VAR 0 22
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: PUSH
69962: LD_VAR 0 4
69966: PUSH
69967: LD_INT 1
69969: PLUS
69970: ARRAY
69971: ST_TO_ADDR
69972: GO 70039
69974: LD_INT 3
69976: DOUBLE
69977: EQUAL
69978: IFTRUE 69982
69980: GO 70038
69982: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69983: LD_ADDR_VAR 0 9
69987: PUSH
69988: LD_VAR 0 23
69992: PUSH
69993: LD_VAR 0 24
69997: PUSH
69998: LD_VAR 0 25
70002: PUSH
70003: LD_VAR 0 26
70007: PUSH
70008: LD_VAR 0 27
70012: PUSH
70013: LD_VAR 0 28
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: PUSH
70026: LD_VAR 0 4
70030: PUSH
70031: LD_INT 1
70033: PLUS
70034: ARRAY
70035: ST_TO_ADDR
70036: GO 70039
70038: POP
70039: GO 70594
70041: LD_INT 2
70043: DOUBLE
70044: EQUAL
70045: IFTRUE 70055
70047: LD_INT 3
70049: DOUBLE
70050: EQUAL
70051: IFTRUE 70055
70053: GO 70111
70055: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70056: LD_ADDR_VAR 0 9
70060: PUSH
70061: LD_VAR 0 29
70065: PUSH
70066: LD_VAR 0 30
70070: PUSH
70071: LD_VAR 0 31
70075: PUSH
70076: LD_VAR 0 32
70080: PUSH
70081: LD_VAR 0 33
70085: PUSH
70086: LD_VAR 0 34
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: PUSH
70099: LD_VAR 0 4
70103: PUSH
70104: LD_INT 1
70106: PLUS
70107: ARRAY
70108: ST_TO_ADDR
70109: GO 70594
70111: LD_INT 16
70113: DOUBLE
70114: EQUAL
70115: IFTRUE 70173
70117: LD_INT 17
70119: DOUBLE
70120: EQUAL
70121: IFTRUE 70173
70123: LD_INT 18
70125: DOUBLE
70126: EQUAL
70127: IFTRUE 70173
70129: LD_INT 19
70131: DOUBLE
70132: EQUAL
70133: IFTRUE 70173
70135: LD_INT 22
70137: DOUBLE
70138: EQUAL
70139: IFTRUE 70173
70141: LD_INT 20
70143: DOUBLE
70144: EQUAL
70145: IFTRUE 70173
70147: LD_INT 21
70149: DOUBLE
70150: EQUAL
70151: IFTRUE 70173
70153: LD_INT 23
70155: DOUBLE
70156: EQUAL
70157: IFTRUE 70173
70159: LD_INT 24
70161: DOUBLE
70162: EQUAL
70163: IFTRUE 70173
70165: LD_INT 25
70167: DOUBLE
70168: EQUAL
70169: IFTRUE 70173
70171: GO 70229
70173: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70174: LD_ADDR_VAR 0 9
70178: PUSH
70179: LD_VAR 0 35
70183: PUSH
70184: LD_VAR 0 36
70188: PUSH
70189: LD_VAR 0 37
70193: PUSH
70194: LD_VAR 0 38
70198: PUSH
70199: LD_VAR 0 39
70203: PUSH
70204: LD_VAR 0 40
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: PUSH
70217: LD_VAR 0 4
70221: PUSH
70222: LD_INT 1
70224: PLUS
70225: ARRAY
70226: ST_TO_ADDR
70227: GO 70594
70229: LD_INT 6
70231: DOUBLE
70232: EQUAL
70233: IFTRUE 70285
70235: LD_INT 7
70237: DOUBLE
70238: EQUAL
70239: IFTRUE 70285
70241: LD_INT 8
70243: DOUBLE
70244: EQUAL
70245: IFTRUE 70285
70247: LD_INT 13
70249: DOUBLE
70250: EQUAL
70251: IFTRUE 70285
70253: LD_INT 12
70255: DOUBLE
70256: EQUAL
70257: IFTRUE 70285
70259: LD_INT 15
70261: DOUBLE
70262: EQUAL
70263: IFTRUE 70285
70265: LD_INT 11
70267: DOUBLE
70268: EQUAL
70269: IFTRUE 70285
70271: LD_INT 14
70273: DOUBLE
70274: EQUAL
70275: IFTRUE 70285
70277: LD_INT 10
70279: DOUBLE
70280: EQUAL
70281: IFTRUE 70285
70283: GO 70341
70285: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70286: LD_ADDR_VAR 0 9
70290: PUSH
70291: LD_VAR 0 41
70295: PUSH
70296: LD_VAR 0 42
70300: PUSH
70301: LD_VAR 0 43
70305: PUSH
70306: LD_VAR 0 44
70310: PUSH
70311: LD_VAR 0 45
70315: PUSH
70316: LD_VAR 0 46
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: PUSH
70329: LD_VAR 0 4
70333: PUSH
70334: LD_INT 1
70336: PLUS
70337: ARRAY
70338: ST_TO_ADDR
70339: GO 70594
70341: LD_INT 36
70343: DOUBLE
70344: EQUAL
70345: IFTRUE 70349
70347: GO 70405
70349: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70350: LD_ADDR_VAR 0 9
70354: PUSH
70355: LD_VAR 0 47
70359: PUSH
70360: LD_VAR 0 48
70364: PUSH
70365: LD_VAR 0 49
70369: PUSH
70370: LD_VAR 0 50
70374: PUSH
70375: LD_VAR 0 51
70379: PUSH
70380: LD_VAR 0 52
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: PUSH
70393: LD_VAR 0 4
70397: PUSH
70398: LD_INT 1
70400: PLUS
70401: ARRAY
70402: ST_TO_ADDR
70403: GO 70594
70405: LD_INT 4
70407: DOUBLE
70408: EQUAL
70409: IFTRUE 70431
70411: LD_INT 5
70413: DOUBLE
70414: EQUAL
70415: IFTRUE 70431
70417: LD_INT 34
70419: DOUBLE
70420: EQUAL
70421: IFTRUE 70431
70423: LD_INT 37
70425: DOUBLE
70426: EQUAL
70427: IFTRUE 70431
70429: GO 70487
70431: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70432: LD_ADDR_VAR 0 9
70436: PUSH
70437: LD_VAR 0 53
70441: PUSH
70442: LD_VAR 0 54
70446: PUSH
70447: LD_VAR 0 55
70451: PUSH
70452: LD_VAR 0 56
70456: PUSH
70457: LD_VAR 0 57
70461: PUSH
70462: LD_VAR 0 58
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: PUSH
70475: LD_VAR 0 4
70479: PUSH
70480: LD_INT 1
70482: PLUS
70483: ARRAY
70484: ST_TO_ADDR
70485: GO 70594
70487: LD_INT 31
70489: DOUBLE
70490: EQUAL
70491: IFTRUE 70537
70493: LD_INT 32
70495: DOUBLE
70496: EQUAL
70497: IFTRUE 70537
70499: LD_INT 33
70501: DOUBLE
70502: EQUAL
70503: IFTRUE 70537
70505: LD_INT 27
70507: DOUBLE
70508: EQUAL
70509: IFTRUE 70537
70511: LD_INT 26
70513: DOUBLE
70514: EQUAL
70515: IFTRUE 70537
70517: LD_INT 28
70519: DOUBLE
70520: EQUAL
70521: IFTRUE 70537
70523: LD_INT 29
70525: DOUBLE
70526: EQUAL
70527: IFTRUE 70537
70529: LD_INT 30
70531: DOUBLE
70532: EQUAL
70533: IFTRUE 70537
70535: GO 70593
70537: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70538: LD_ADDR_VAR 0 9
70542: PUSH
70543: LD_VAR 0 59
70547: PUSH
70548: LD_VAR 0 60
70552: PUSH
70553: LD_VAR 0 61
70557: PUSH
70558: LD_VAR 0 62
70562: PUSH
70563: LD_VAR 0 63
70567: PUSH
70568: LD_VAR 0 64
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: PUSH
70581: LD_VAR 0 4
70585: PUSH
70586: LD_INT 1
70588: PLUS
70589: ARRAY
70590: ST_TO_ADDR
70591: GO 70594
70593: POP
// temp_list2 = [ ] ;
70594: LD_ADDR_VAR 0 10
70598: PUSH
70599: EMPTY
70600: ST_TO_ADDR
// for i in temp_list do
70601: LD_ADDR_VAR 0 8
70605: PUSH
70606: LD_VAR 0 9
70610: PUSH
70611: FOR_IN
70612: IFFALSE 70664
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70614: LD_ADDR_VAR 0 10
70618: PUSH
70619: LD_VAR 0 10
70623: PUSH
70624: LD_VAR 0 8
70628: PUSH
70629: LD_INT 1
70631: ARRAY
70632: PUSH
70633: LD_VAR 0 2
70637: PLUS
70638: PUSH
70639: LD_VAR 0 8
70643: PUSH
70644: LD_INT 2
70646: ARRAY
70647: PUSH
70648: LD_VAR 0 3
70652: PLUS
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: EMPTY
70659: LIST
70660: ADD
70661: ST_TO_ADDR
70662: GO 70611
70664: POP
70665: POP
// result = temp_list2 ;
70666: LD_ADDR_VAR 0 7
70670: PUSH
70671: LD_VAR 0 10
70675: ST_TO_ADDR
// end ;
70676: LD_VAR 0 7
70680: RET
// export function EnemyInRange ( unit , dist ) ; begin
70681: LD_INT 0
70683: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70684: LD_ADDR_VAR 0 3
70688: PUSH
70689: LD_VAR 0 1
70693: PPUSH
70694: CALL_OW 255
70698: PPUSH
70699: LD_VAR 0 1
70703: PPUSH
70704: CALL_OW 250
70708: PPUSH
70709: LD_VAR 0 1
70713: PPUSH
70714: CALL_OW 251
70718: PPUSH
70719: LD_VAR 0 2
70723: PPUSH
70724: CALL 44077 0 4
70728: PUSH
70729: LD_INT 4
70731: ARRAY
70732: ST_TO_ADDR
// end ;
70733: LD_VAR 0 3
70737: RET
// export function PlayerSeeMe ( unit ) ; begin
70738: LD_INT 0
70740: PPUSH
// result := See ( your_side , unit ) ;
70741: LD_ADDR_VAR 0 2
70745: PUSH
70746: LD_OWVAR 2
70750: PPUSH
70751: LD_VAR 0 1
70755: PPUSH
70756: CALL_OW 292
70760: ST_TO_ADDR
// end ;
70761: LD_VAR 0 2
70765: RET
// export function ReverseDir ( unit ) ; begin
70766: LD_INT 0
70768: PPUSH
// if not unit then
70769: LD_VAR 0 1
70773: NOT
70774: IFFALSE 70778
// exit ;
70776: GO 70801
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70778: LD_ADDR_VAR 0 2
70782: PUSH
70783: LD_VAR 0 1
70787: PPUSH
70788: CALL_OW 254
70792: PUSH
70793: LD_INT 3
70795: PLUS
70796: PUSH
70797: LD_INT 6
70799: MOD
70800: ST_TO_ADDR
// end ;
70801: LD_VAR 0 2
70805: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70806: LD_INT 0
70808: PPUSH
70809: PPUSH
70810: PPUSH
70811: PPUSH
70812: PPUSH
// if not hexes then
70813: LD_VAR 0 2
70817: NOT
70818: IFFALSE 70822
// exit ;
70820: GO 70970
// dist := 9999 ;
70822: LD_ADDR_VAR 0 5
70826: PUSH
70827: LD_INT 9999
70829: ST_TO_ADDR
// for i = 1 to hexes do
70830: LD_ADDR_VAR 0 4
70834: PUSH
70835: DOUBLE
70836: LD_INT 1
70838: DEC
70839: ST_TO_ADDR
70840: LD_VAR 0 2
70844: PUSH
70845: FOR_TO
70846: IFFALSE 70958
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70848: LD_VAR 0 1
70852: PPUSH
70853: LD_VAR 0 2
70857: PUSH
70858: LD_VAR 0 4
70862: ARRAY
70863: PUSH
70864: LD_INT 1
70866: ARRAY
70867: PPUSH
70868: LD_VAR 0 2
70872: PUSH
70873: LD_VAR 0 4
70877: ARRAY
70878: PUSH
70879: LD_INT 2
70881: ARRAY
70882: PPUSH
70883: CALL_OW 297
70887: PUSH
70888: LD_VAR 0 5
70892: LESS
70893: IFFALSE 70956
// begin hex := hexes [ i ] ;
70895: LD_ADDR_VAR 0 7
70899: PUSH
70900: LD_VAR 0 2
70904: PUSH
70905: LD_VAR 0 4
70909: ARRAY
70910: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70911: LD_ADDR_VAR 0 5
70915: PUSH
70916: LD_VAR 0 1
70920: PPUSH
70921: LD_VAR 0 2
70925: PUSH
70926: LD_VAR 0 4
70930: ARRAY
70931: PUSH
70932: LD_INT 1
70934: ARRAY
70935: PPUSH
70936: LD_VAR 0 2
70940: PUSH
70941: LD_VAR 0 4
70945: ARRAY
70946: PUSH
70947: LD_INT 2
70949: ARRAY
70950: PPUSH
70951: CALL_OW 297
70955: ST_TO_ADDR
// end ; end ;
70956: GO 70845
70958: POP
70959: POP
// result := hex ;
70960: LD_ADDR_VAR 0 3
70964: PUSH
70965: LD_VAR 0 7
70969: ST_TO_ADDR
// end ;
70970: LD_VAR 0 3
70974: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70975: LD_INT 0
70977: PPUSH
70978: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70979: LD_VAR 0 1
70983: NOT
70984: PUSH
70985: LD_VAR 0 1
70989: PUSH
70990: LD_INT 21
70992: PUSH
70993: LD_INT 2
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 23
71002: PUSH
71003: LD_INT 2
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PPUSH
71014: CALL_OW 69
71018: IN
71019: NOT
71020: OR
71021: IFFALSE 71025
// exit ;
71023: GO 71072
// for i = 1 to 3 do
71025: LD_ADDR_VAR 0 3
71029: PUSH
71030: DOUBLE
71031: LD_INT 1
71033: DEC
71034: ST_TO_ADDR
71035: LD_INT 3
71037: PUSH
71038: FOR_TO
71039: IFFALSE 71070
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71041: LD_VAR 0 1
71045: PPUSH
71046: CALL_OW 250
71050: PPUSH
71051: LD_VAR 0 1
71055: PPUSH
71056: CALL_OW 251
71060: PPUSH
71061: LD_INT 1
71063: PPUSH
71064: CALL_OW 453
71068: GO 71038
71070: POP
71071: POP
// end ;
71072: LD_VAR 0 2
71076: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71077: LD_INT 0
71079: PPUSH
71080: PPUSH
71081: PPUSH
71082: PPUSH
71083: PPUSH
71084: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71085: LD_VAR 0 1
71089: NOT
71090: PUSH
71091: LD_VAR 0 2
71095: NOT
71096: OR
71097: PUSH
71098: LD_VAR 0 1
71102: PPUSH
71103: CALL_OW 314
71107: OR
71108: IFFALSE 71112
// exit ;
71110: GO 71553
// x := GetX ( enemy_unit ) ;
71112: LD_ADDR_VAR 0 7
71116: PUSH
71117: LD_VAR 0 2
71121: PPUSH
71122: CALL_OW 250
71126: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71127: LD_ADDR_VAR 0 8
71131: PUSH
71132: LD_VAR 0 2
71136: PPUSH
71137: CALL_OW 251
71141: ST_TO_ADDR
// if not x or not y then
71142: LD_VAR 0 7
71146: NOT
71147: PUSH
71148: LD_VAR 0 8
71152: NOT
71153: OR
71154: IFFALSE 71158
// exit ;
71156: GO 71553
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71158: LD_ADDR_VAR 0 6
71162: PUSH
71163: LD_VAR 0 7
71167: PPUSH
71168: LD_INT 0
71170: PPUSH
71171: LD_INT 4
71173: PPUSH
71174: CALL_OW 272
71178: PUSH
71179: LD_VAR 0 8
71183: PPUSH
71184: LD_INT 0
71186: PPUSH
71187: LD_INT 4
71189: PPUSH
71190: CALL_OW 273
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_VAR 0 7
71203: PPUSH
71204: LD_INT 1
71206: PPUSH
71207: LD_INT 4
71209: PPUSH
71210: CALL_OW 272
71214: PUSH
71215: LD_VAR 0 8
71219: PPUSH
71220: LD_INT 1
71222: PPUSH
71223: LD_INT 4
71225: PPUSH
71226: CALL_OW 273
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_VAR 0 7
71239: PPUSH
71240: LD_INT 2
71242: PPUSH
71243: LD_INT 4
71245: PPUSH
71246: CALL_OW 272
71250: PUSH
71251: LD_VAR 0 8
71255: PPUSH
71256: LD_INT 2
71258: PPUSH
71259: LD_INT 4
71261: PPUSH
71262: CALL_OW 273
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_VAR 0 7
71275: PPUSH
71276: LD_INT 3
71278: PPUSH
71279: LD_INT 4
71281: PPUSH
71282: CALL_OW 272
71286: PUSH
71287: LD_VAR 0 8
71291: PPUSH
71292: LD_INT 3
71294: PPUSH
71295: LD_INT 4
71297: PPUSH
71298: CALL_OW 273
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_VAR 0 7
71311: PPUSH
71312: LD_INT 4
71314: PPUSH
71315: LD_INT 4
71317: PPUSH
71318: CALL_OW 272
71322: PUSH
71323: LD_VAR 0 8
71327: PPUSH
71328: LD_INT 4
71330: PPUSH
71331: LD_INT 4
71333: PPUSH
71334: CALL_OW 273
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_VAR 0 7
71347: PPUSH
71348: LD_INT 5
71350: PPUSH
71351: LD_INT 4
71353: PPUSH
71354: CALL_OW 272
71358: PUSH
71359: LD_VAR 0 8
71363: PPUSH
71364: LD_INT 5
71366: PPUSH
71367: LD_INT 4
71369: PPUSH
71370: CALL_OW 273
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: ST_TO_ADDR
// for i = tmp downto 1 do
71387: LD_ADDR_VAR 0 4
71391: PUSH
71392: DOUBLE
71393: LD_VAR 0 6
71397: INC
71398: ST_TO_ADDR
71399: LD_INT 1
71401: PUSH
71402: FOR_DOWNTO
71403: IFFALSE 71504
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71405: LD_VAR 0 6
71409: PUSH
71410: LD_VAR 0 4
71414: ARRAY
71415: PUSH
71416: LD_INT 1
71418: ARRAY
71419: PPUSH
71420: LD_VAR 0 6
71424: PUSH
71425: LD_VAR 0 4
71429: ARRAY
71430: PUSH
71431: LD_INT 2
71433: ARRAY
71434: PPUSH
71435: CALL_OW 488
71439: NOT
71440: PUSH
71441: LD_VAR 0 6
71445: PUSH
71446: LD_VAR 0 4
71450: ARRAY
71451: PUSH
71452: LD_INT 1
71454: ARRAY
71455: PPUSH
71456: LD_VAR 0 6
71460: PUSH
71461: LD_VAR 0 4
71465: ARRAY
71466: PUSH
71467: LD_INT 2
71469: ARRAY
71470: PPUSH
71471: CALL_OW 428
71475: PUSH
71476: LD_INT 0
71478: NONEQUAL
71479: OR
71480: IFFALSE 71502
// tmp := Delete ( tmp , i ) ;
71482: LD_ADDR_VAR 0 6
71486: PUSH
71487: LD_VAR 0 6
71491: PPUSH
71492: LD_VAR 0 4
71496: PPUSH
71497: CALL_OW 3
71501: ST_TO_ADDR
71502: GO 71402
71504: POP
71505: POP
// j := GetClosestHex ( unit , tmp ) ;
71506: LD_ADDR_VAR 0 5
71510: PUSH
71511: LD_VAR 0 1
71515: PPUSH
71516: LD_VAR 0 6
71520: PPUSH
71521: CALL 70806 0 2
71525: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71526: LD_VAR 0 1
71530: PPUSH
71531: LD_VAR 0 5
71535: PUSH
71536: LD_INT 1
71538: ARRAY
71539: PPUSH
71540: LD_VAR 0 5
71544: PUSH
71545: LD_INT 2
71547: ARRAY
71548: PPUSH
71549: CALL_OW 111
// end ;
71553: LD_VAR 0 3
71557: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71558: LD_INT 0
71560: PPUSH
71561: PPUSH
71562: PPUSH
// uc_side = 0 ;
71563: LD_ADDR_OWVAR 20
71567: PUSH
71568: LD_INT 0
71570: ST_TO_ADDR
// uc_nation = 0 ;
71571: LD_ADDR_OWVAR 21
71575: PUSH
71576: LD_INT 0
71578: ST_TO_ADDR
// InitHc_All ( ) ;
71579: CALL_OW 584
// InitVc ;
71583: CALL_OW 20
// if mastodonts then
71587: LD_VAR 0 6
71591: IFFALSE 71658
// for i = 1 to mastodonts do
71593: LD_ADDR_VAR 0 11
71597: PUSH
71598: DOUBLE
71599: LD_INT 1
71601: DEC
71602: ST_TO_ADDR
71603: LD_VAR 0 6
71607: PUSH
71608: FOR_TO
71609: IFFALSE 71656
// begin vc_chassis := 31 ;
71611: LD_ADDR_OWVAR 37
71615: PUSH
71616: LD_INT 31
71618: ST_TO_ADDR
// vc_control := control_rider ;
71619: LD_ADDR_OWVAR 38
71623: PUSH
71624: LD_INT 4
71626: ST_TO_ADDR
// animal := CreateVehicle ;
71627: LD_ADDR_VAR 0 12
71631: PUSH
71632: CALL_OW 45
71636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71637: LD_VAR 0 12
71641: PPUSH
71642: LD_VAR 0 8
71646: PPUSH
71647: LD_INT 0
71649: PPUSH
71650: CALL 73846 0 3
// end ;
71654: GO 71608
71656: POP
71657: POP
// if horses then
71658: LD_VAR 0 5
71662: IFFALSE 71729
// for i = 1 to horses do
71664: LD_ADDR_VAR 0 11
71668: PUSH
71669: DOUBLE
71670: LD_INT 1
71672: DEC
71673: ST_TO_ADDR
71674: LD_VAR 0 5
71678: PUSH
71679: FOR_TO
71680: IFFALSE 71727
// begin hc_class := 21 ;
71682: LD_ADDR_OWVAR 28
71686: PUSH
71687: LD_INT 21
71689: ST_TO_ADDR
// hc_gallery :=  ;
71690: LD_ADDR_OWVAR 33
71694: PUSH
71695: LD_STRING 
71697: ST_TO_ADDR
// animal := CreateHuman ;
71698: LD_ADDR_VAR 0 12
71702: PUSH
71703: CALL_OW 44
71707: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71708: LD_VAR 0 12
71712: PPUSH
71713: LD_VAR 0 8
71717: PPUSH
71718: LD_INT 0
71720: PPUSH
71721: CALL 73846 0 3
// end ;
71725: GO 71679
71727: POP
71728: POP
// if birds then
71729: LD_VAR 0 1
71733: IFFALSE 71800
// for i = 1 to birds do
71735: LD_ADDR_VAR 0 11
71739: PUSH
71740: DOUBLE
71741: LD_INT 1
71743: DEC
71744: ST_TO_ADDR
71745: LD_VAR 0 1
71749: PUSH
71750: FOR_TO
71751: IFFALSE 71798
// begin hc_class = 18 ;
71753: LD_ADDR_OWVAR 28
71757: PUSH
71758: LD_INT 18
71760: ST_TO_ADDR
// hc_gallery =  ;
71761: LD_ADDR_OWVAR 33
71765: PUSH
71766: LD_STRING 
71768: ST_TO_ADDR
// animal := CreateHuman ;
71769: LD_ADDR_VAR 0 12
71773: PUSH
71774: CALL_OW 44
71778: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71779: LD_VAR 0 12
71783: PPUSH
71784: LD_VAR 0 8
71788: PPUSH
71789: LD_INT 0
71791: PPUSH
71792: CALL 73846 0 3
// end ;
71796: GO 71750
71798: POP
71799: POP
// if tigers then
71800: LD_VAR 0 2
71804: IFFALSE 71888
// for i = 1 to tigers do
71806: LD_ADDR_VAR 0 11
71810: PUSH
71811: DOUBLE
71812: LD_INT 1
71814: DEC
71815: ST_TO_ADDR
71816: LD_VAR 0 2
71820: PUSH
71821: FOR_TO
71822: IFFALSE 71886
// begin hc_class = class_tiger ;
71824: LD_ADDR_OWVAR 28
71828: PUSH
71829: LD_INT 14
71831: ST_TO_ADDR
// hc_gallery =  ;
71832: LD_ADDR_OWVAR 33
71836: PUSH
71837: LD_STRING 
71839: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71840: LD_ADDR_OWVAR 35
71844: PUSH
71845: LD_INT 7
71847: NEG
71848: PPUSH
71849: LD_INT 7
71851: PPUSH
71852: CALL_OW 12
71856: ST_TO_ADDR
// animal := CreateHuman ;
71857: LD_ADDR_VAR 0 12
71861: PUSH
71862: CALL_OW 44
71866: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71867: LD_VAR 0 12
71871: PPUSH
71872: LD_VAR 0 8
71876: PPUSH
71877: LD_INT 0
71879: PPUSH
71880: CALL 73846 0 3
// end ;
71884: GO 71821
71886: POP
71887: POP
// if apemans then
71888: LD_VAR 0 3
71892: IFFALSE 72015
// for i = 1 to apemans do
71894: LD_ADDR_VAR 0 11
71898: PUSH
71899: DOUBLE
71900: LD_INT 1
71902: DEC
71903: ST_TO_ADDR
71904: LD_VAR 0 3
71908: PUSH
71909: FOR_TO
71910: IFFALSE 72013
// begin hc_class = class_apeman ;
71912: LD_ADDR_OWVAR 28
71916: PUSH
71917: LD_INT 12
71919: ST_TO_ADDR
// hc_gallery =  ;
71920: LD_ADDR_OWVAR 33
71924: PUSH
71925: LD_STRING 
71927: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71928: LD_ADDR_OWVAR 35
71932: PUSH
71933: LD_INT 2
71935: NEG
71936: PPUSH
71937: LD_INT 2
71939: PPUSH
71940: CALL_OW 12
71944: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71945: LD_ADDR_OWVAR 31
71949: PUSH
71950: LD_INT 1
71952: PPUSH
71953: LD_INT 3
71955: PPUSH
71956: CALL_OW 12
71960: PUSH
71961: LD_INT 1
71963: PPUSH
71964: LD_INT 3
71966: PPUSH
71967: CALL_OW 12
71971: PUSH
71972: LD_INT 0
71974: PUSH
71975: LD_INT 0
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: ST_TO_ADDR
// animal := CreateHuman ;
71984: LD_ADDR_VAR 0 12
71988: PUSH
71989: CALL_OW 44
71993: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71994: LD_VAR 0 12
71998: PPUSH
71999: LD_VAR 0 8
72003: PPUSH
72004: LD_INT 0
72006: PPUSH
72007: CALL 73846 0 3
// end ;
72011: GO 71909
72013: POP
72014: POP
// if enchidnas then
72015: LD_VAR 0 4
72019: IFFALSE 72086
// for i = 1 to enchidnas do
72021: LD_ADDR_VAR 0 11
72025: PUSH
72026: DOUBLE
72027: LD_INT 1
72029: DEC
72030: ST_TO_ADDR
72031: LD_VAR 0 4
72035: PUSH
72036: FOR_TO
72037: IFFALSE 72084
// begin hc_class = 13 ;
72039: LD_ADDR_OWVAR 28
72043: PUSH
72044: LD_INT 13
72046: ST_TO_ADDR
// hc_gallery =  ;
72047: LD_ADDR_OWVAR 33
72051: PUSH
72052: LD_STRING 
72054: ST_TO_ADDR
// animal := CreateHuman ;
72055: LD_ADDR_VAR 0 12
72059: PUSH
72060: CALL_OW 44
72064: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72065: LD_VAR 0 12
72069: PPUSH
72070: LD_VAR 0 8
72074: PPUSH
72075: LD_INT 0
72077: PPUSH
72078: CALL 73846 0 3
// end ;
72082: GO 72036
72084: POP
72085: POP
// if fishes then
72086: LD_VAR 0 7
72090: IFFALSE 72157
// for i = 1 to fishes do
72092: LD_ADDR_VAR 0 11
72096: PUSH
72097: DOUBLE
72098: LD_INT 1
72100: DEC
72101: ST_TO_ADDR
72102: LD_VAR 0 7
72106: PUSH
72107: FOR_TO
72108: IFFALSE 72155
// begin hc_class = 20 ;
72110: LD_ADDR_OWVAR 28
72114: PUSH
72115: LD_INT 20
72117: ST_TO_ADDR
// hc_gallery =  ;
72118: LD_ADDR_OWVAR 33
72122: PUSH
72123: LD_STRING 
72125: ST_TO_ADDR
// animal := CreateHuman ;
72126: LD_ADDR_VAR 0 12
72130: PUSH
72131: CALL_OW 44
72135: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72136: LD_VAR 0 12
72140: PPUSH
72141: LD_VAR 0 9
72145: PPUSH
72146: LD_INT 0
72148: PPUSH
72149: CALL 73846 0 3
// end ;
72153: GO 72107
72155: POP
72156: POP
// end ;
72157: LD_VAR 0 10
72161: RET
// export function WantHeal ( sci , unit ) ; begin
72162: LD_INT 0
72164: PPUSH
// if GetTaskList ( sci ) > 0 then
72165: LD_VAR 0 1
72169: PPUSH
72170: CALL_OW 437
72174: PUSH
72175: LD_INT 0
72177: GREATER
72178: IFFALSE 72248
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72180: LD_VAR 0 1
72184: PPUSH
72185: CALL_OW 437
72189: PUSH
72190: LD_INT 1
72192: ARRAY
72193: PUSH
72194: LD_INT 1
72196: ARRAY
72197: PUSH
72198: LD_STRING l
72200: EQUAL
72201: PUSH
72202: LD_VAR 0 1
72206: PPUSH
72207: CALL_OW 437
72211: PUSH
72212: LD_INT 1
72214: ARRAY
72215: PUSH
72216: LD_INT 4
72218: ARRAY
72219: PUSH
72220: LD_VAR 0 2
72224: EQUAL
72225: AND
72226: IFFALSE 72238
// result := true else
72228: LD_ADDR_VAR 0 3
72232: PUSH
72233: LD_INT 1
72235: ST_TO_ADDR
72236: GO 72246
// result := false ;
72238: LD_ADDR_VAR 0 3
72242: PUSH
72243: LD_INT 0
72245: ST_TO_ADDR
// end else
72246: GO 72256
// result := false ;
72248: LD_ADDR_VAR 0 3
72252: PUSH
72253: LD_INT 0
72255: ST_TO_ADDR
// end ;
72256: LD_VAR 0 3
72260: RET
// export function HealTarget ( sci ) ; begin
72261: LD_INT 0
72263: PPUSH
// if not sci then
72264: LD_VAR 0 1
72268: NOT
72269: IFFALSE 72273
// exit ;
72271: GO 72338
// result := 0 ;
72273: LD_ADDR_VAR 0 2
72277: PUSH
72278: LD_INT 0
72280: ST_TO_ADDR
// if GetTaskList ( sci ) then
72281: LD_VAR 0 1
72285: PPUSH
72286: CALL_OW 437
72290: IFFALSE 72338
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72292: LD_VAR 0 1
72296: PPUSH
72297: CALL_OW 437
72301: PUSH
72302: LD_INT 1
72304: ARRAY
72305: PUSH
72306: LD_INT 1
72308: ARRAY
72309: PUSH
72310: LD_STRING l
72312: EQUAL
72313: IFFALSE 72338
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72315: LD_ADDR_VAR 0 2
72319: PUSH
72320: LD_VAR 0 1
72324: PPUSH
72325: CALL_OW 437
72329: PUSH
72330: LD_INT 1
72332: ARRAY
72333: PUSH
72334: LD_INT 4
72336: ARRAY
72337: ST_TO_ADDR
// end ;
72338: LD_VAR 0 2
72342: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72343: LD_INT 0
72345: PPUSH
72346: PPUSH
72347: PPUSH
72348: PPUSH
// if not base_units then
72349: LD_VAR 0 1
72353: NOT
72354: IFFALSE 72358
// exit ;
72356: GO 72445
// result := false ;
72358: LD_ADDR_VAR 0 2
72362: PUSH
72363: LD_INT 0
72365: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72366: LD_ADDR_VAR 0 5
72370: PUSH
72371: LD_VAR 0 1
72375: PPUSH
72376: LD_INT 21
72378: PUSH
72379: LD_INT 3
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PPUSH
72386: CALL_OW 72
72390: ST_TO_ADDR
// if not tmp then
72391: LD_VAR 0 5
72395: NOT
72396: IFFALSE 72400
// exit ;
72398: GO 72445
// for i in tmp do
72400: LD_ADDR_VAR 0 3
72404: PUSH
72405: LD_VAR 0 5
72409: PUSH
72410: FOR_IN
72411: IFFALSE 72443
// begin result := EnemyInRange ( i , 22 ) ;
72413: LD_ADDR_VAR 0 2
72417: PUSH
72418: LD_VAR 0 3
72422: PPUSH
72423: LD_INT 22
72425: PPUSH
72426: CALL 70681 0 2
72430: ST_TO_ADDR
// if result then
72431: LD_VAR 0 2
72435: IFFALSE 72441
// exit ;
72437: POP
72438: POP
72439: GO 72445
// end ;
72441: GO 72410
72443: POP
72444: POP
// end ;
72445: LD_VAR 0 2
72449: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
72450: LD_INT 0
72452: PPUSH
72453: PPUSH
// if not units then
72454: LD_VAR 0 1
72458: NOT
72459: IFFALSE 72463
// exit ;
72461: GO 72533
// result := [ ] ;
72463: LD_ADDR_VAR 0 3
72467: PUSH
72468: EMPTY
72469: ST_TO_ADDR
// for i in units do
72470: LD_ADDR_VAR 0 4
72474: PUSH
72475: LD_VAR 0 1
72479: PUSH
72480: FOR_IN
72481: IFFALSE 72531
// if GetTag ( i ) = tag then
72483: LD_VAR 0 4
72487: PPUSH
72488: CALL_OW 110
72492: PUSH
72493: LD_VAR 0 2
72497: EQUAL
72498: IFFALSE 72529
// result := Replace ( result , result + 1 , i ) ;
72500: LD_ADDR_VAR 0 3
72504: PUSH
72505: LD_VAR 0 3
72509: PPUSH
72510: LD_VAR 0 3
72514: PUSH
72515: LD_INT 1
72517: PLUS
72518: PPUSH
72519: LD_VAR 0 4
72523: PPUSH
72524: CALL_OW 1
72528: ST_TO_ADDR
72529: GO 72480
72531: POP
72532: POP
// end ;
72533: LD_VAR 0 3
72537: RET
// export function IsDriver ( un ) ; begin
72538: LD_INT 0
72540: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72541: LD_ADDR_VAR 0 2
72545: PUSH
72546: LD_VAR 0 1
72550: PUSH
72551: LD_INT 55
72553: PUSH
72554: EMPTY
72555: LIST
72556: PPUSH
72557: CALL_OW 69
72561: IN
72562: ST_TO_ADDR
// end ;
72563: LD_VAR 0 2
72567: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72568: LD_INT 0
72570: PPUSH
72571: PPUSH
// list := [ ] ;
72572: LD_ADDR_VAR 0 5
72576: PUSH
72577: EMPTY
72578: ST_TO_ADDR
// case d of 0 :
72579: LD_VAR 0 3
72583: PUSH
72584: LD_INT 0
72586: DOUBLE
72587: EQUAL
72588: IFTRUE 72592
72590: GO 72725
72592: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72593: LD_ADDR_VAR 0 5
72597: PUSH
72598: LD_VAR 0 1
72602: PUSH
72603: LD_INT 4
72605: MINUS
72606: PUSH
72607: LD_VAR 0 2
72611: PUSH
72612: LD_INT 4
72614: MINUS
72615: PUSH
72616: LD_INT 2
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: LIST
72623: PUSH
72624: LD_VAR 0 1
72628: PUSH
72629: LD_INT 3
72631: MINUS
72632: PUSH
72633: LD_VAR 0 2
72637: PUSH
72638: LD_INT 1
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: LIST
72645: PUSH
72646: LD_VAR 0 1
72650: PUSH
72651: LD_INT 4
72653: PLUS
72654: PUSH
72655: LD_VAR 0 2
72659: PUSH
72660: LD_INT 4
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: PUSH
72668: LD_VAR 0 1
72672: PUSH
72673: LD_INT 3
72675: PLUS
72676: PUSH
72677: LD_VAR 0 2
72681: PUSH
72682: LD_INT 3
72684: PLUS
72685: PUSH
72686: LD_INT 5
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: LIST
72693: PUSH
72694: LD_VAR 0 1
72698: PUSH
72699: LD_VAR 0 2
72703: PUSH
72704: LD_INT 4
72706: PLUS
72707: PUSH
72708: LD_INT 0
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: LIST
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: ST_TO_ADDR
// end ; 1 :
72723: GO 73423
72725: LD_INT 1
72727: DOUBLE
72728: EQUAL
72729: IFTRUE 72733
72731: GO 72866
72733: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72734: LD_ADDR_VAR 0 5
72738: PUSH
72739: LD_VAR 0 1
72743: PUSH
72744: LD_VAR 0 2
72748: PUSH
72749: LD_INT 4
72751: MINUS
72752: PUSH
72753: LD_INT 3
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: LIST
72760: PUSH
72761: LD_VAR 0 1
72765: PUSH
72766: LD_INT 3
72768: MINUS
72769: PUSH
72770: LD_VAR 0 2
72774: PUSH
72775: LD_INT 3
72777: MINUS
72778: PUSH
72779: LD_INT 2
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: LIST
72786: PUSH
72787: LD_VAR 0 1
72791: PUSH
72792: LD_INT 4
72794: MINUS
72795: PUSH
72796: LD_VAR 0 2
72800: PUSH
72801: LD_INT 1
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: LIST
72808: PUSH
72809: LD_VAR 0 1
72813: PUSH
72814: LD_VAR 0 2
72818: PUSH
72819: LD_INT 3
72821: PLUS
72822: PUSH
72823: LD_INT 0
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: LIST
72830: PUSH
72831: LD_VAR 0 1
72835: PUSH
72836: LD_INT 4
72838: PLUS
72839: PUSH
72840: LD_VAR 0 2
72844: PUSH
72845: LD_INT 4
72847: PLUS
72848: PUSH
72849: LD_INT 5
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: LIST
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: ST_TO_ADDR
// end ; 2 :
72864: GO 73423
72866: LD_INT 2
72868: DOUBLE
72869: EQUAL
72870: IFTRUE 72874
72872: GO 73003
72874: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72875: LD_ADDR_VAR 0 5
72879: PUSH
72880: LD_VAR 0 1
72884: PUSH
72885: LD_VAR 0 2
72889: PUSH
72890: LD_INT 3
72892: MINUS
72893: PUSH
72894: LD_INT 3
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: LIST
72901: PUSH
72902: LD_VAR 0 1
72906: PUSH
72907: LD_INT 4
72909: PLUS
72910: PUSH
72911: LD_VAR 0 2
72915: PUSH
72916: LD_INT 4
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: LIST
72923: PUSH
72924: LD_VAR 0 1
72928: PUSH
72929: LD_VAR 0 2
72933: PUSH
72934: LD_INT 4
72936: PLUS
72937: PUSH
72938: LD_INT 0
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: LIST
72945: PUSH
72946: LD_VAR 0 1
72950: PUSH
72951: LD_INT 3
72953: MINUS
72954: PUSH
72955: LD_VAR 0 2
72959: PUSH
72960: LD_INT 1
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: LIST
72967: PUSH
72968: LD_VAR 0 1
72972: PUSH
72973: LD_INT 4
72975: MINUS
72976: PUSH
72977: LD_VAR 0 2
72981: PUSH
72982: LD_INT 4
72984: MINUS
72985: PUSH
72986: LD_INT 2
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: LIST
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: ST_TO_ADDR
// end ; 3 :
73001: GO 73423
73003: LD_INT 3
73005: DOUBLE
73006: EQUAL
73007: IFTRUE 73011
73009: GO 73144
73011: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73012: LD_ADDR_VAR 0 5
73016: PUSH
73017: LD_VAR 0 1
73021: PUSH
73022: LD_INT 3
73024: PLUS
73025: PUSH
73026: LD_VAR 0 2
73030: PUSH
73031: LD_INT 4
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: LIST
73038: PUSH
73039: LD_VAR 0 1
73043: PUSH
73044: LD_INT 4
73046: PLUS
73047: PUSH
73048: LD_VAR 0 2
73052: PUSH
73053: LD_INT 4
73055: PLUS
73056: PUSH
73057: LD_INT 5
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: LIST
73064: PUSH
73065: LD_VAR 0 1
73069: PUSH
73070: LD_INT 4
73072: MINUS
73073: PUSH
73074: LD_VAR 0 2
73078: PUSH
73079: LD_INT 1
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: LIST
73086: PUSH
73087: LD_VAR 0 1
73091: PUSH
73092: LD_VAR 0 2
73096: PUSH
73097: LD_INT 4
73099: MINUS
73100: PUSH
73101: LD_INT 3
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: LIST
73108: PUSH
73109: LD_VAR 0 1
73113: PUSH
73114: LD_INT 3
73116: MINUS
73117: PUSH
73118: LD_VAR 0 2
73122: PUSH
73123: LD_INT 3
73125: MINUS
73126: PUSH
73127: LD_INT 2
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: LIST
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: ST_TO_ADDR
// end ; 4 :
73142: GO 73423
73144: LD_INT 4
73146: DOUBLE
73147: EQUAL
73148: IFTRUE 73152
73150: GO 73285
73152: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73153: LD_ADDR_VAR 0 5
73157: PUSH
73158: LD_VAR 0 1
73162: PUSH
73163: LD_VAR 0 2
73167: PUSH
73168: LD_INT 4
73170: PLUS
73171: PUSH
73172: LD_INT 0
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: LIST
73179: PUSH
73180: LD_VAR 0 1
73184: PUSH
73185: LD_INT 3
73187: PLUS
73188: PUSH
73189: LD_VAR 0 2
73193: PUSH
73194: LD_INT 3
73196: PLUS
73197: PUSH
73198: LD_INT 5
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: LIST
73205: PUSH
73206: LD_VAR 0 1
73210: PUSH
73211: LD_INT 4
73213: PLUS
73214: PUSH
73215: LD_VAR 0 2
73219: PUSH
73220: LD_INT 4
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: LIST
73227: PUSH
73228: LD_VAR 0 1
73232: PUSH
73233: LD_VAR 0 2
73237: PUSH
73238: LD_INT 3
73240: MINUS
73241: PUSH
73242: LD_INT 3
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: LIST
73249: PUSH
73250: LD_VAR 0 1
73254: PUSH
73255: LD_INT 4
73257: MINUS
73258: PUSH
73259: LD_VAR 0 2
73263: PUSH
73264: LD_INT 4
73266: MINUS
73267: PUSH
73268: LD_INT 2
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: LIST
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: ST_TO_ADDR
// end ; 5 :
73283: GO 73423
73285: LD_INT 5
73287: DOUBLE
73288: EQUAL
73289: IFTRUE 73293
73291: GO 73422
73293: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73294: LD_ADDR_VAR 0 5
73298: PUSH
73299: LD_VAR 0 1
73303: PUSH
73304: LD_INT 4
73306: MINUS
73307: PUSH
73308: LD_VAR 0 2
73312: PUSH
73313: LD_INT 1
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: LIST
73320: PUSH
73321: LD_VAR 0 1
73325: PUSH
73326: LD_VAR 0 2
73330: PUSH
73331: LD_INT 4
73333: MINUS
73334: PUSH
73335: LD_INT 3
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: LIST
73342: PUSH
73343: LD_VAR 0 1
73347: PUSH
73348: LD_INT 4
73350: PLUS
73351: PUSH
73352: LD_VAR 0 2
73356: PUSH
73357: LD_INT 4
73359: PLUS
73360: PUSH
73361: LD_INT 5
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: LIST
73368: PUSH
73369: LD_VAR 0 1
73373: PUSH
73374: LD_INT 3
73376: PLUS
73377: PUSH
73378: LD_VAR 0 2
73382: PUSH
73383: LD_INT 4
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: LIST
73390: PUSH
73391: LD_VAR 0 1
73395: PUSH
73396: LD_VAR 0 2
73400: PUSH
73401: LD_INT 3
73403: PLUS
73404: PUSH
73405: LD_INT 0
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: LIST
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: ST_TO_ADDR
// end ; end ;
73420: GO 73423
73422: POP
// result := list ;
73423: LD_ADDR_VAR 0 4
73427: PUSH
73428: LD_VAR 0 5
73432: ST_TO_ADDR
// end ;
73433: LD_VAR 0 4
73437: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73438: LD_INT 0
73440: PPUSH
73441: PPUSH
73442: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73443: LD_VAR 0 1
73447: NOT
73448: PUSH
73449: LD_VAR 0 2
73453: PUSH
73454: LD_INT 1
73456: PUSH
73457: LD_INT 2
73459: PUSH
73460: LD_INT 3
73462: PUSH
73463: LD_INT 4
73465: PUSH
73466: EMPTY
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: IN
73472: NOT
73473: OR
73474: IFFALSE 73478
// exit ;
73476: GO 73570
// tmp := [ ] ;
73478: LD_ADDR_VAR 0 5
73482: PUSH
73483: EMPTY
73484: ST_TO_ADDR
// for i in units do
73485: LD_ADDR_VAR 0 4
73489: PUSH
73490: LD_VAR 0 1
73494: PUSH
73495: FOR_IN
73496: IFFALSE 73539
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73498: LD_ADDR_VAR 0 5
73502: PUSH
73503: LD_VAR 0 5
73507: PPUSH
73508: LD_VAR 0 5
73512: PUSH
73513: LD_INT 1
73515: PLUS
73516: PPUSH
73517: LD_VAR 0 4
73521: PPUSH
73522: LD_VAR 0 2
73526: PPUSH
73527: CALL_OW 259
73531: PPUSH
73532: CALL_OW 2
73536: ST_TO_ADDR
73537: GO 73495
73539: POP
73540: POP
// if not tmp then
73541: LD_VAR 0 5
73545: NOT
73546: IFFALSE 73550
// exit ;
73548: GO 73570
// result := SortListByListDesc ( units , tmp ) ;
73550: LD_ADDR_VAR 0 3
73554: PUSH
73555: LD_VAR 0 1
73559: PPUSH
73560: LD_VAR 0 5
73564: PPUSH
73565: CALL_OW 77
73569: ST_TO_ADDR
// end ;
73570: LD_VAR 0 3
73574: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73575: LD_INT 0
73577: PPUSH
73578: PPUSH
73579: PPUSH
// result := false ;
73580: LD_ADDR_VAR 0 3
73584: PUSH
73585: LD_INT 0
73587: ST_TO_ADDR
// x := GetX ( building ) ;
73588: LD_ADDR_VAR 0 4
73592: PUSH
73593: LD_VAR 0 2
73597: PPUSH
73598: CALL_OW 250
73602: ST_TO_ADDR
// y := GetY ( building ) ;
73603: LD_ADDR_VAR 0 5
73607: PUSH
73608: LD_VAR 0 2
73612: PPUSH
73613: CALL_OW 251
73617: ST_TO_ADDR
// if not building or not x or not y then
73618: LD_VAR 0 2
73622: NOT
73623: PUSH
73624: LD_VAR 0 4
73628: NOT
73629: OR
73630: PUSH
73631: LD_VAR 0 5
73635: NOT
73636: OR
73637: IFFALSE 73641
// exit ;
73639: GO 73733
// if GetTaskList ( unit ) then
73641: LD_VAR 0 1
73645: PPUSH
73646: CALL_OW 437
73650: IFFALSE 73733
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73652: LD_STRING e
73654: PUSH
73655: LD_VAR 0 1
73659: PPUSH
73660: CALL_OW 437
73664: PUSH
73665: LD_INT 1
73667: ARRAY
73668: PUSH
73669: LD_INT 1
73671: ARRAY
73672: EQUAL
73673: PUSH
73674: LD_VAR 0 4
73678: PUSH
73679: LD_VAR 0 1
73683: PPUSH
73684: CALL_OW 437
73688: PUSH
73689: LD_INT 1
73691: ARRAY
73692: PUSH
73693: LD_INT 2
73695: ARRAY
73696: EQUAL
73697: AND
73698: PUSH
73699: LD_VAR 0 5
73703: PUSH
73704: LD_VAR 0 1
73708: PPUSH
73709: CALL_OW 437
73713: PUSH
73714: LD_INT 1
73716: ARRAY
73717: PUSH
73718: LD_INT 3
73720: ARRAY
73721: EQUAL
73722: AND
73723: IFFALSE 73733
// result := true end ;
73725: LD_ADDR_VAR 0 3
73729: PUSH
73730: LD_INT 1
73732: ST_TO_ADDR
// end ;
73733: LD_VAR 0 3
73737: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73738: LD_INT 0
73740: PPUSH
// result := false ;
73741: LD_ADDR_VAR 0 4
73745: PUSH
73746: LD_INT 0
73748: ST_TO_ADDR
// if GetTaskList ( unit ) then
73749: LD_VAR 0 1
73753: PPUSH
73754: CALL_OW 437
73758: IFFALSE 73841
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73760: LD_STRING M
73762: PUSH
73763: LD_VAR 0 1
73767: PPUSH
73768: CALL_OW 437
73772: PUSH
73773: LD_INT 1
73775: ARRAY
73776: PUSH
73777: LD_INT 1
73779: ARRAY
73780: EQUAL
73781: PUSH
73782: LD_VAR 0 2
73786: PUSH
73787: LD_VAR 0 1
73791: PPUSH
73792: CALL_OW 437
73796: PUSH
73797: LD_INT 1
73799: ARRAY
73800: PUSH
73801: LD_INT 2
73803: ARRAY
73804: EQUAL
73805: AND
73806: PUSH
73807: LD_VAR 0 3
73811: PUSH
73812: LD_VAR 0 1
73816: PPUSH
73817: CALL_OW 437
73821: PUSH
73822: LD_INT 1
73824: ARRAY
73825: PUSH
73826: LD_INT 3
73828: ARRAY
73829: EQUAL
73830: AND
73831: IFFALSE 73841
// result := true ;
73833: LD_ADDR_VAR 0 4
73837: PUSH
73838: LD_INT 1
73840: ST_TO_ADDR
// end ; end ;
73841: LD_VAR 0 4
73845: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73846: LD_INT 0
73848: PPUSH
73849: PPUSH
73850: PPUSH
73851: PPUSH
// if not unit or not area then
73852: LD_VAR 0 1
73856: NOT
73857: PUSH
73858: LD_VAR 0 2
73862: NOT
73863: OR
73864: IFFALSE 73868
// exit ;
73866: GO 74032
// tmp := AreaToList ( area , i ) ;
73868: LD_ADDR_VAR 0 6
73872: PUSH
73873: LD_VAR 0 2
73877: PPUSH
73878: LD_VAR 0 5
73882: PPUSH
73883: CALL_OW 517
73887: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73888: LD_ADDR_VAR 0 5
73892: PUSH
73893: DOUBLE
73894: LD_INT 1
73896: DEC
73897: ST_TO_ADDR
73898: LD_VAR 0 6
73902: PUSH
73903: LD_INT 1
73905: ARRAY
73906: PUSH
73907: FOR_TO
73908: IFFALSE 74030
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73910: LD_ADDR_VAR 0 7
73914: PUSH
73915: LD_VAR 0 6
73919: PUSH
73920: LD_INT 1
73922: ARRAY
73923: PUSH
73924: LD_VAR 0 5
73928: ARRAY
73929: PUSH
73930: LD_VAR 0 6
73934: PUSH
73935: LD_INT 2
73937: ARRAY
73938: PUSH
73939: LD_VAR 0 5
73943: ARRAY
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73949: LD_VAR 0 7
73953: PUSH
73954: LD_INT 1
73956: ARRAY
73957: PPUSH
73958: LD_VAR 0 7
73962: PUSH
73963: LD_INT 2
73965: ARRAY
73966: PPUSH
73967: CALL_OW 428
73971: PUSH
73972: LD_INT 0
73974: EQUAL
73975: IFFALSE 74028
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73977: LD_VAR 0 1
73981: PPUSH
73982: LD_VAR 0 7
73986: PUSH
73987: LD_INT 1
73989: ARRAY
73990: PPUSH
73991: LD_VAR 0 7
73995: PUSH
73996: LD_INT 2
73998: ARRAY
73999: PPUSH
74000: LD_VAR 0 3
74004: PPUSH
74005: CALL_OW 48
// result := IsPlaced ( unit ) ;
74009: LD_ADDR_VAR 0 4
74013: PUSH
74014: LD_VAR 0 1
74018: PPUSH
74019: CALL_OW 305
74023: ST_TO_ADDR
// exit ;
74024: POP
74025: POP
74026: GO 74032
// end ; end ;
74028: GO 73907
74030: POP
74031: POP
// end ;
74032: LD_VAR 0 4
74036: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74037: LD_INT 0
74039: PPUSH
74040: PPUSH
74041: PPUSH
// if not side or side > 8 then
74042: LD_VAR 0 1
74046: NOT
74047: PUSH
74048: LD_VAR 0 1
74052: PUSH
74053: LD_INT 8
74055: GREATER
74056: OR
74057: IFFALSE 74061
// exit ;
74059: GO 74248
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74061: LD_ADDR_VAR 0 4
74065: PUSH
74066: LD_INT 22
74068: PUSH
74069: LD_VAR 0 1
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: PUSH
74078: LD_INT 21
74080: PUSH
74081: LD_INT 3
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PPUSH
74092: CALL_OW 69
74096: ST_TO_ADDR
// if not tmp then
74097: LD_VAR 0 4
74101: NOT
74102: IFFALSE 74106
// exit ;
74104: GO 74248
// enable_addtolog := true ;
74106: LD_ADDR_OWVAR 81
74110: PUSH
74111: LD_INT 1
74113: ST_TO_ADDR
// AddToLog ( [ ) ;
74114: LD_STRING [
74116: PPUSH
74117: CALL_OW 561
// for i in tmp do
74121: LD_ADDR_VAR 0 3
74125: PUSH
74126: LD_VAR 0 4
74130: PUSH
74131: FOR_IN
74132: IFFALSE 74239
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74134: LD_STRING [
74136: PUSH
74137: LD_VAR 0 3
74141: PPUSH
74142: CALL_OW 266
74146: STR
74147: PUSH
74148: LD_STRING , 
74150: STR
74151: PUSH
74152: LD_VAR 0 3
74156: PPUSH
74157: CALL_OW 250
74161: STR
74162: PUSH
74163: LD_STRING , 
74165: STR
74166: PUSH
74167: LD_VAR 0 3
74171: PPUSH
74172: CALL_OW 251
74176: STR
74177: PUSH
74178: LD_STRING , 
74180: STR
74181: PUSH
74182: LD_VAR 0 3
74186: PPUSH
74187: CALL_OW 254
74191: STR
74192: PUSH
74193: LD_STRING , 
74195: STR
74196: PUSH
74197: LD_VAR 0 3
74201: PPUSH
74202: LD_INT 1
74204: PPUSH
74205: CALL_OW 268
74209: STR
74210: PUSH
74211: LD_STRING , 
74213: STR
74214: PUSH
74215: LD_VAR 0 3
74219: PPUSH
74220: LD_INT 2
74222: PPUSH
74223: CALL_OW 268
74227: STR
74228: PUSH
74229: LD_STRING ],
74231: STR
74232: PPUSH
74233: CALL_OW 561
// end ;
74237: GO 74131
74239: POP
74240: POP
// AddToLog ( ]; ) ;
74241: LD_STRING ];
74243: PPUSH
74244: CALL_OW 561
// end ;
74248: LD_VAR 0 2
74252: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74253: LD_INT 0
74255: PPUSH
74256: PPUSH
74257: PPUSH
74258: PPUSH
74259: PPUSH
// if not area or not rate or not max then
74260: LD_VAR 0 1
74264: NOT
74265: PUSH
74266: LD_VAR 0 2
74270: NOT
74271: OR
74272: PUSH
74273: LD_VAR 0 4
74277: NOT
74278: OR
74279: IFFALSE 74283
// exit ;
74281: GO 74475
// while 1 do
74283: LD_INT 1
74285: IFFALSE 74475
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74287: LD_ADDR_VAR 0 9
74291: PUSH
74292: LD_VAR 0 1
74296: PPUSH
74297: LD_INT 1
74299: PPUSH
74300: CALL_OW 287
74304: PUSH
74305: LD_INT 10
74307: MUL
74308: ST_TO_ADDR
// r := rate / 10 ;
74309: LD_ADDR_VAR 0 7
74313: PUSH
74314: LD_VAR 0 2
74318: PUSH
74319: LD_INT 10
74321: DIVREAL
74322: ST_TO_ADDR
// time := 1 1$00 ;
74323: LD_ADDR_VAR 0 8
74327: PUSH
74328: LD_INT 2100
74330: ST_TO_ADDR
// if amount < min then
74331: LD_VAR 0 9
74335: PUSH
74336: LD_VAR 0 3
74340: LESS
74341: IFFALSE 74359
// r := r * 2 else
74343: LD_ADDR_VAR 0 7
74347: PUSH
74348: LD_VAR 0 7
74352: PUSH
74353: LD_INT 2
74355: MUL
74356: ST_TO_ADDR
74357: GO 74385
// if amount > max then
74359: LD_VAR 0 9
74363: PUSH
74364: LD_VAR 0 4
74368: GREATER
74369: IFFALSE 74385
// r := r / 2 ;
74371: LD_ADDR_VAR 0 7
74375: PUSH
74376: LD_VAR 0 7
74380: PUSH
74381: LD_INT 2
74383: DIVREAL
74384: ST_TO_ADDR
// time := time / r ;
74385: LD_ADDR_VAR 0 8
74389: PUSH
74390: LD_VAR 0 8
74394: PUSH
74395: LD_VAR 0 7
74399: DIVREAL
74400: ST_TO_ADDR
// if time < 0 then
74401: LD_VAR 0 8
74405: PUSH
74406: LD_INT 0
74408: LESS
74409: IFFALSE 74426
// time := time * - 1 ;
74411: LD_ADDR_VAR 0 8
74415: PUSH
74416: LD_VAR 0 8
74420: PUSH
74421: LD_INT 1
74423: NEG
74424: MUL
74425: ST_TO_ADDR
// wait ( time ) ;
74426: LD_VAR 0 8
74430: PPUSH
74431: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
74435: LD_INT 35
74437: PPUSH
74438: LD_INT 875
74440: PPUSH
74441: CALL_OW 12
74445: PPUSH
74446: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74450: LD_INT 1
74452: PPUSH
74453: LD_INT 5
74455: PPUSH
74456: CALL_OW 12
74460: PPUSH
74461: LD_VAR 0 1
74465: PPUSH
74466: LD_INT 1
74468: PPUSH
74469: CALL_OW 55
// end ;
74473: GO 74283
// end ;
74475: LD_VAR 0 5
74479: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74480: LD_INT 0
74482: PPUSH
74483: PPUSH
74484: PPUSH
74485: PPUSH
74486: PPUSH
74487: PPUSH
74488: PPUSH
74489: PPUSH
// if not turrets or not factories then
74490: LD_VAR 0 1
74494: NOT
74495: PUSH
74496: LD_VAR 0 2
74500: NOT
74501: OR
74502: IFFALSE 74506
// exit ;
74504: GO 74813
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74506: LD_ADDR_VAR 0 10
74510: PUSH
74511: LD_INT 5
74513: PUSH
74514: LD_INT 6
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: PUSH
74521: LD_INT 2
74523: PUSH
74524: LD_INT 4
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: PUSH
74531: LD_INT 3
74533: PUSH
74534: LD_INT 5
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: LIST
74545: PUSH
74546: LD_INT 24
74548: PUSH
74549: LD_INT 25
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: LD_INT 23
74558: PUSH
74559: LD_INT 27
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: PUSH
74570: LD_INT 42
74572: PUSH
74573: LD_INT 43
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: LD_INT 44
74582: PUSH
74583: LD_INT 46
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: PUSH
74590: LD_INT 45
74592: PUSH
74593: LD_INT 47
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: LIST
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: LIST
74609: ST_TO_ADDR
// result := [ ] ;
74610: LD_ADDR_VAR 0 3
74614: PUSH
74615: EMPTY
74616: ST_TO_ADDR
// for i in turrets do
74617: LD_ADDR_VAR 0 4
74621: PUSH
74622: LD_VAR 0 1
74626: PUSH
74627: FOR_IN
74628: IFFALSE 74811
// begin nat := GetNation ( i ) ;
74630: LD_ADDR_VAR 0 7
74634: PUSH
74635: LD_VAR 0 4
74639: PPUSH
74640: CALL_OW 248
74644: ST_TO_ADDR
// weapon := 0 ;
74645: LD_ADDR_VAR 0 8
74649: PUSH
74650: LD_INT 0
74652: ST_TO_ADDR
// if not nat then
74653: LD_VAR 0 7
74657: NOT
74658: IFFALSE 74662
// continue ;
74660: GO 74627
// for j in list [ nat ] do
74662: LD_ADDR_VAR 0 5
74666: PUSH
74667: LD_VAR 0 10
74671: PUSH
74672: LD_VAR 0 7
74676: ARRAY
74677: PUSH
74678: FOR_IN
74679: IFFALSE 74720
// if GetBWeapon ( i ) = j [ 1 ] then
74681: LD_VAR 0 4
74685: PPUSH
74686: CALL_OW 269
74690: PUSH
74691: LD_VAR 0 5
74695: PUSH
74696: LD_INT 1
74698: ARRAY
74699: EQUAL
74700: IFFALSE 74718
// begin weapon := j [ 2 ] ;
74702: LD_ADDR_VAR 0 8
74706: PUSH
74707: LD_VAR 0 5
74711: PUSH
74712: LD_INT 2
74714: ARRAY
74715: ST_TO_ADDR
// break ;
74716: GO 74720
// end ;
74718: GO 74678
74720: POP
74721: POP
// if not weapon then
74722: LD_VAR 0 8
74726: NOT
74727: IFFALSE 74731
// continue ;
74729: GO 74627
// for k in factories do
74731: LD_ADDR_VAR 0 6
74735: PUSH
74736: LD_VAR 0 2
74740: PUSH
74741: FOR_IN
74742: IFFALSE 74807
// begin weapons := AvailableWeaponList ( k ) ;
74744: LD_ADDR_VAR 0 9
74748: PUSH
74749: LD_VAR 0 6
74753: PPUSH
74754: CALL_OW 478
74758: ST_TO_ADDR
// if not weapons then
74759: LD_VAR 0 9
74763: NOT
74764: IFFALSE 74768
// continue ;
74766: GO 74741
// if weapon in weapons then
74768: LD_VAR 0 8
74772: PUSH
74773: LD_VAR 0 9
74777: IN
74778: IFFALSE 74805
// begin result := [ i , weapon ] ;
74780: LD_ADDR_VAR 0 3
74784: PUSH
74785: LD_VAR 0 4
74789: PUSH
74790: LD_VAR 0 8
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: ST_TO_ADDR
// exit ;
74799: POP
74800: POP
74801: POP
74802: POP
74803: GO 74813
// end ; end ;
74805: GO 74741
74807: POP
74808: POP
// end ;
74809: GO 74627
74811: POP
74812: POP
// end ;
74813: LD_VAR 0 3
74817: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74818: LD_INT 0
74820: PPUSH
// if not side or side > 8 then
74821: LD_VAR 0 3
74825: NOT
74826: PUSH
74827: LD_VAR 0 3
74831: PUSH
74832: LD_INT 8
74834: GREATER
74835: OR
74836: IFFALSE 74840
// exit ;
74838: GO 74899
// if not range then
74840: LD_VAR 0 4
74844: NOT
74845: IFFALSE 74856
// range := - 12 ;
74847: LD_ADDR_VAR 0 4
74851: PUSH
74852: LD_INT 12
74854: NEG
74855: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74856: LD_VAR 0 1
74860: PPUSH
74861: LD_VAR 0 2
74865: PPUSH
74866: LD_VAR 0 3
74870: PPUSH
74871: LD_VAR 0 4
74875: PPUSH
74876: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74880: LD_VAR 0 1
74884: PPUSH
74885: LD_VAR 0 2
74889: PPUSH
74890: LD_VAR 0 3
74894: PPUSH
74895: CALL_OW 331
// end ;
74899: LD_VAR 0 5
74903: RET
// export function Video ( mode ) ; begin
74904: LD_INT 0
74906: PPUSH
// ingame_video = mode ;
74907: LD_ADDR_OWVAR 52
74911: PUSH
74912: LD_VAR 0 1
74916: ST_TO_ADDR
// interface_hidden = mode ;
74917: LD_ADDR_OWVAR 54
74921: PUSH
74922: LD_VAR 0 1
74926: ST_TO_ADDR
// end ;
74927: LD_VAR 0 2
74931: RET
// export function Join ( array , element ) ; begin
74932: LD_INT 0
74934: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74935: LD_ADDR_VAR 0 3
74939: PUSH
74940: LD_VAR 0 1
74944: PPUSH
74945: LD_VAR 0 1
74949: PUSH
74950: LD_INT 1
74952: PLUS
74953: PPUSH
74954: LD_VAR 0 2
74958: PPUSH
74959: CALL_OW 1
74963: ST_TO_ADDR
// end ;
74964: LD_VAR 0 3
74968: RET
// export function JoinUnion ( array , element ) ; begin
74969: LD_INT 0
74971: PPUSH
// result := array union element ;
74972: LD_ADDR_VAR 0 3
74976: PUSH
74977: LD_VAR 0 1
74981: PUSH
74982: LD_VAR 0 2
74986: UNION
74987: ST_TO_ADDR
// end ;
74988: LD_VAR 0 3
74992: RET
// export function GetBehemoths ( side ) ; begin
74993: LD_INT 0
74995: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74996: LD_ADDR_VAR 0 2
75000: PUSH
75001: LD_INT 22
75003: PUSH
75004: LD_VAR 0 1
75008: PUSH
75009: EMPTY
75010: LIST
75011: LIST
75012: PUSH
75013: LD_INT 31
75015: PUSH
75016: LD_INT 25
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: PPUSH
75027: CALL_OW 69
75031: ST_TO_ADDR
// end ;
75032: LD_VAR 0 2
75036: RET
// export function Shuffle ( array ) ; var i , index ; begin
75037: LD_INT 0
75039: PPUSH
75040: PPUSH
75041: PPUSH
// result := [ ] ;
75042: LD_ADDR_VAR 0 2
75046: PUSH
75047: EMPTY
75048: ST_TO_ADDR
// if not array then
75049: LD_VAR 0 1
75053: NOT
75054: IFFALSE 75058
// exit ;
75056: GO 75157
// Randomize ;
75058: CALL_OW 10
// for i = array downto 1 do
75062: LD_ADDR_VAR 0 3
75066: PUSH
75067: DOUBLE
75068: LD_VAR 0 1
75072: INC
75073: ST_TO_ADDR
75074: LD_INT 1
75076: PUSH
75077: FOR_DOWNTO
75078: IFFALSE 75155
// begin index := rand ( 1 , array ) ;
75080: LD_ADDR_VAR 0 4
75084: PUSH
75085: LD_INT 1
75087: PPUSH
75088: LD_VAR 0 1
75092: PPUSH
75093: CALL_OW 12
75097: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75098: LD_ADDR_VAR 0 2
75102: PUSH
75103: LD_VAR 0 2
75107: PPUSH
75108: LD_VAR 0 2
75112: PUSH
75113: LD_INT 1
75115: PLUS
75116: PPUSH
75117: LD_VAR 0 1
75121: PUSH
75122: LD_VAR 0 4
75126: ARRAY
75127: PPUSH
75128: CALL_OW 2
75132: ST_TO_ADDR
// array := Delete ( array , index ) ;
75133: LD_ADDR_VAR 0 1
75137: PUSH
75138: LD_VAR 0 1
75142: PPUSH
75143: LD_VAR 0 4
75147: PPUSH
75148: CALL_OW 3
75152: ST_TO_ADDR
// end ;
75153: GO 75077
75155: POP
75156: POP
// end ;
75157: LD_VAR 0 2
75161: RET
// export function GetBaseMaterials ( base ) ; begin
75162: LD_INT 0
75164: PPUSH
// result := [ 0 , 0 , 0 ] ;
75165: LD_ADDR_VAR 0 2
75169: PUSH
75170: LD_INT 0
75172: PUSH
75173: LD_INT 0
75175: PUSH
75176: LD_INT 0
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: LIST
75183: ST_TO_ADDR
// if not base then
75184: LD_VAR 0 1
75188: NOT
75189: IFFALSE 75193
// exit ;
75191: GO 75242
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75193: LD_ADDR_VAR 0 2
75197: PUSH
75198: LD_VAR 0 1
75202: PPUSH
75203: LD_INT 1
75205: PPUSH
75206: CALL_OW 275
75210: PUSH
75211: LD_VAR 0 1
75215: PPUSH
75216: LD_INT 2
75218: PPUSH
75219: CALL_OW 275
75223: PUSH
75224: LD_VAR 0 1
75228: PPUSH
75229: LD_INT 3
75231: PPUSH
75232: CALL_OW 275
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: LIST
75241: ST_TO_ADDR
// end ;
75242: LD_VAR 0 2
75246: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75247: LD_INT 0
75249: PPUSH
75250: PPUSH
// result := array ;
75251: LD_ADDR_VAR 0 3
75255: PUSH
75256: LD_VAR 0 1
75260: ST_TO_ADDR
// if size > 0 then
75261: LD_VAR 0 2
75265: PUSH
75266: LD_INT 0
75268: GREATER
75269: IFFALSE 75315
// for i := array downto size do
75271: LD_ADDR_VAR 0 4
75275: PUSH
75276: DOUBLE
75277: LD_VAR 0 1
75281: INC
75282: ST_TO_ADDR
75283: LD_VAR 0 2
75287: PUSH
75288: FOR_DOWNTO
75289: IFFALSE 75313
// result := Delete ( result , result ) ;
75291: LD_ADDR_VAR 0 3
75295: PUSH
75296: LD_VAR 0 3
75300: PPUSH
75301: LD_VAR 0 3
75305: PPUSH
75306: CALL_OW 3
75310: ST_TO_ADDR
75311: GO 75288
75313: POP
75314: POP
// end ;
75315: LD_VAR 0 3
75319: RET
// export function ComExit ( unit ) ; var tmp ; begin
75320: LD_INT 0
75322: PPUSH
75323: PPUSH
// if not IsInUnit ( unit ) then
75324: LD_VAR 0 1
75328: PPUSH
75329: CALL_OW 310
75333: NOT
75334: IFFALSE 75338
// exit ;
75336: GO 75398
// tmp := IsInUnit ( unit ) ;
75338: LD_ADDR_VAR 0 3
75342: PUSH
75343: LD_VAR 0 1
75347: PPUSH
75348: CALL_OW 310
75352: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75353: LD_VAR 0 3
75357: PPUSH
75358: CALL_OW 247
75362: PUSH
75363: LD_INT 2
75365: EQUAL
75366: IFFALSE 75379
// ComExitVehicle ( unit ) else
75368: LD_VAR 0 1
75372: PPUSH
75373: CALL_OW 121
75377: GO 75388
// ComExitBuilding ( unit ) ;
75379: LD_VAR 0 1
75383: PPUSH
75384: CALL_OW 122
// result := tmp ;
75388: LD_ADDR_VAR 0 2
75392: PUSH
75393: LD_VAR 0 3
75397: ST_TO_ADDR
// end ;
75398: LD_VAR 0 2
75402: RET
// export function ComExitAll ( units ) ; var i ; begin
75403: LD_INT 0
75405: PPUSH
75406: PPUSH
// if not units then
75407: LD_VAR 0 1
75411: NOT
75412: IFFALSE 75416
// exit ;
75414: GO 75442
// for i in units do
75416: LD_ADDR_VAR 0 3
75420: PUSH
75421: LD_VAR 0 1
75425: PUSH
75426: FOR_IN
75427: IFFALSE 75440
// ComExit ( i ) ;
75429: LD_VAR 0 3
75433: PPUSH
75434: CALL 75320 0 1
75438: GO 75426
75440: POP
75441: POP
// end ;
75442: LD_VAR 0 2
75446: RET
// export function ResetHc ; begin
75447: LD_INT 0
75449: PPUSH
// InitHc ;
75450: CALL_OW 19
// hc_importance := 0 ;
75454: LD_ADDR_OWVAR 32
75458: PUSH
75459: LD_INT 0
75461: ST_TO_ADDR
// end ;
75462: LD_VAR 0 1
75466: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75467: LD_INT 0
75469: PPUSH
75470: PPUSH
75471: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75472: LD_ADDR_VAR 0 6
75476: PUSH
75477: LD_VAR 0 1
75481: PUSH
75482: LD_VAR 0 3
75486: PLUS
75487: PUSH
75488: LD_INT 2
75490: DIV
75491: ST_TO_ADDR
// if _x < 0 then
75492: LD_VAR 0 6
75496: PUSH
75497: LD_INT 0
75499: LESS
75500: IFFALSE 75517
// _x := _x * - 1 ;
75502: LD_ADDR_VAR 0 6
75506: PUSH
75507: LD_VAR 0 6
75511: PUSH
75512: LD_INT 1
75514: NEG
75515: MUL
75516: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75517: LD_ADDR_VAR 0 7
75521: PUSH
75522: LD_VAR 0 2
75526: PUSH
75527: LD_VAR 0 4
75531: PLUS
75532: PUSH
75533: LD_INT 2
75535: DIV
75536: ST_TO_ADDR
// if _y < 0 then
75537: LD_VAR 0 7
75541: PUSH
75542: LD_INT 0
75544: LESS
75545: IFFALSE 75562
// _y := _y * - 1 ;
75547: LD_ADDR_VAR 0 7
75551: PUSH
75552: LD_VAR 0 7
75556: PUSH
75557: LD_INT 1
75559: NEG
75560: MUL
75561: ST_TO_ADDR
// result := [ _x , _y ] ;
75562: LD_ADDR_VAR 0 5
75566: PUSH
75567: LD_VAR 0 6
75571: PUSH
75572: LD_VAR 0 7
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: ST_TO_ADDR
// end ;
75581: LD_VAR 0 5
75585: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75586: LD_INT 0
75588: PPUSH
75589: PPUSH
75590: PPUSH
75591: PPUSH
// task := GetTaskList ( unit ) ;
75592: LD_ADDR_VAR 0 7
75596: PUSH
75597: LD_VAR 0 1
75601: PPUSH
75602: CALL_OW 437
75606: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75607: LD_VAR 0 7
75611: NOT
75612: PUSH
75613: LD_VAR 0 1
75617: PPUSH
75618: LD_VAR 0 2
75622: PPUSH
75623: CALL_OW 308
75627: NOT
75628: AND
75629: IFFALSE 75633
// exit ;
75631: GO 75751
// if IsInArea ( unit , area ) then
75633: LD_VAR 0 1
75637: PPUSH
75638: LD_VAR 0 2
75642: PPUSH
75643: CALL_OW 308
75647: IFFALSE 75665
// begin ComMoveToArea ( unit , goAway ) ;
75649: LD_VAR 0 1
75653: PPUSH
75654: LD_VAR 0 3
75658: PPUSH
75659: CALL_OW 113
// exit ;
75663: GO 75751
// end ; if task [ 1 ] [ 1 ] <> M then
75665: LD_VAR 0 7
75669: PUSH
75670: LD_INT 1
75672: ARRAY
75673: PUSH
75674: LD_INT 1
75676: ARRAY
75677: PUSH
75678: LD_STRING M
75680: NONEQUAL
75681: IFFALSE 75685
// exit ;
75683: GO 75751
// x := task [ 1 ] [ 2 ] ;
75685: LD_ADDR_VAR 0 5
75689: PUSH
75690: LD_VAR 0 7
75694: PUSH
75695: LD_INT 1
75697: ARRAY
75698: PUSH
75699: LD_INT 2
75701: ARRAY
75702: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75703: LD_ADDR_VAR 0 6
75707: PUSH
75708: LD_VAR 0 7
75712: PUSH
75713: LD_INT 1
75715: ARRAY
75716: PUSH
75717: LD_INT 3
75719: ARRAY
75720: ST_TO_ADDR
// if InArea ( x , y , area ) then
75721: LD_VAR 0 5
75725: PPUSH
75726: LD_VAR 0 6
75730: PPUSH
75731: LD_VAR 0 2
75735: PPUSH
75736: CALL_OW 309
75740: IFFALSE 75751
// ComStop ( unit ) ;
75742: LD_VAR 0 1
75746: PPUSH
75747: CALL_OW 141
// end ;
75751: LD_VAR 0 4
75755: RET
// export function Abs ( value ) ; begin
75756: LD_INT 0
75758: PPUSH
// result := value ;
75759: LD_ADDR_VAR 0 2
75763: PUSH
75764: LD_VAR 0 1
75768: ST_TO_ADDR
// if value < 0 then
75769: LD_VAR 0 1
75773: PUSH
75774: LD_INT 0
75776: LESS
75777: IFFALSE 75794
// result := value * - 1 ;
75779: LD_ADDR_VAR 0 2
75783: PUSH
75784: LD_VAR 0 1
75788: PUSH
75789: LD_INT 1
75791: NEG
75792: MUL
75793: ST_TO_ADDR
// end ;
75794: LD_VAR 0 2
75798: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75799: LD_INT 0
75801: PPUSH
75802: PPUSH
75803: PPUSH
75804: PPUSH
75805: PPUSH
75806: PPUSH
75807: PPUSH
75808: PPUSH
// if not unit or not building then
75809: LD_VAR 0 1
75813: NOT
75814: PUSH
75815: LD_VAR 0 2
75819: NOT
75820: OR
75821: IFFALSE 75825
// exit ;
75823: GO 76051
// x := GetX ( building ) ;
75825: LD_ADDR_VAR 0 4
75829: PUSH
75830: LD_VAR 0 2
75834: PPUSH
75835: CALL_OW 250
75839: ST_TO_ADDR
// y := GetY ( building ) ;
75840: LD_ADDR_VAR 0 6
75844: PUSH
75845: LD_VAR 0 2
75849: PPUSH
75850: CALL_OW 251
75854: ST_TO_ADDR
// d := GetDir ( building ) ;
75855: LD_ADDR_VAR 0 8
75859: PUSH
75860: LD_VAR 0 2
75864: PPUSH
75865: CALL_OW 254
75869: ST_TO_ADDR
// r := 4 ;
75870: LD_ADDR_VAR 0 9
75874: PUSH
75875: LD_INT 4
75877: ST_TO_ADDR
// for i := 1 to 5 do
75878: LD_ADDR_VAR 0 10
75882: PUSH
75883: DOUBLE
75884: LD_INT 1
75886: DEC
75887: ST_TO_ADDR
75888: LD_INT 5
75890: PUSH
75891: FOR_TO
75892: IFFALSE 76049
// begin _x := ShiftX ( x , d , r + i ) ;
75894: LD_ADDR_VAR 0 5
75898: PUSH
75899: LD_VAR 0 4
75903: PPUSH
75904: LD_VAR 0 8
75908: PPUSH
75909: LD_VAR 0 9
75913: PUSH
75914: LD_VAR 0 10
75918: PLUS
75919: PPUSH
75920: CALL_OW 272
75924: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75925: LD_ADDR_VAR 0 7
75929: PUSH
75930: LD_VAR 0 6
75934: PPUSH
75935: LD_VAR 0 8
75939: PPUSH
75940: LD_VAR 0 9
75944: PUSH
75945: LD_VAR 0 10
75949: PLUS
75950: PPUSH
75951: CALL_OW 273
75955: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75956: LD_VAR 0 5
75960: PPUSH
75961: LD_VAR 0 7
75965: PPUSH
75966: CALL_OW 488
75970: PUSH
75971: LD_VAR 0 5
75975: PPUSH
75976: LD_VAR 0 7
75980: PPUSH
75981: CALL_OW 428
75985: PPUSH
75986: CALL_OW 247
75990: PUSH
75991: LD_INT 3
75993: PUSH
75994: LD_INT 2
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: IN
76001: NOT
76002: AND
76003: IFFALSE 76047
// begin ComMoveXY ( unit , _x , _y ) ;
76005: LD_VAR 0 1
76009: PPUSH
76010: LD_VAR 0 5
76014: PPUSH
76015: LD_VAR 0 7
76019: PPUSH
76020: CALL_OW 111
// result := [ _x , _y ] ;
76024: LD_ADDR_VAR 0 3
76028: PUSH
76029: LD_VAR 0 5
76033: PUSH
76034: LD_VAR 0 7
76038: PUSH
76039: EMPTY
76040: LIST
76041: LIST
76042: ST_TO_ADDR
// exit ;
76043: POP
76044: POP
76045: GO 76051
// end ; end ;
76047: GO 75891
76049: POP
76050: POP
// end ;
76051: LD_VAR 0 3
76055: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76056: LD_INT 0
76058: PPUSH
76059: PPUSH
76060: PPUSH
// result := 0 ;
76061: LD_ADDR_VAR 0 3
76065: PUSH
76066: LD_INT 0
76068: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76069: LD_VAR 0 1
76073: PUSH
76074: LD_INT 0
76076: LESS
76077: PUSH
76078: LD_VAR 0 1
76082: PUSH
76083: LD_INT 8
76085: GREATER
76086: OR
76087: PUSH
76088: LD_VAR 0 2
76092: PUSH
76093: LD_INT 0
76095: LESS
76096: OR
76097: PUSH
76098: LD_VAR 0 2
76102: PUSH
76103: LD_INT 8
76105: GREATER
76106: OR
76107: IFFALSE 76111
// exit ;
76109: GO 76186
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76111: LD_ADDR_VAR 0 4
76115: PUSH
76116: LD_INT 22
76118: PUSH
76119: LD_VAR 0 2
76123: PUSH
76124: EMPTY
76125: LIST
76126: LIST
76127: PPUSH
76128: CALL_OW 69
76132: PUSH
76133: FOR_IN
76134: IFFALSE 76184
// begin un := UnitShoot ( i ) ;
76136: LD_ADDR_VAR 0 5
76140: PUSH
76141: LD_VAR 0 4
76145: PPUSH
76146: CALL_OW 504
76150: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76151: LD_VAR 0 5
76155: PPUSH
76156: CALL_OW 255
76160: PUSH
76161: LD_VAR 0 1
76165: EQUAL
76166: IFFALSE 76182
// begin result := un ;
76168: LD_ADDR_VAR 0 3
76172: PUSH
76173: LD_VAR 0 5
76177: ST_TO_ADDR
// exit ;
76178: POP
76179: POP
76180: GO 76186
// end ; end ;
76182: GO 76133
76184: POP
76185: POP
// end ;
76186: LD_VAR 0 3
76190: RET
// export function GetCargoBay ( units ) ; begin
76191: LD_INT 0
76193: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76194: LD_ADDR_VAR 0 2
76198: PUSH
76199: LD_VAR 0 1
76203: PPUSH
76204: LD_INT 2
76206: PUSH
76207: LD_INT 34
76209: PUSH
76210: LD_INT 12
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: PUSH
76217: LD_INT 34
76219: PUSH
76220: LD_INT 51
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: PUSH
76227: LD_INT 34
76229: PUSH
76230: LD_INT 32
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: PUSH
76237: LD_INT 34
76239: PUSH
76240: LD_EXP 158
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: PUSH
76249: EMPTY
76250: LIST
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: PPUSH
76256: CALL_OW 72
76260: ST_TO_ADDR
// end ;
76261: LD_VAR 0 2
76265: RET
// export function Negate ( value ) ; begin
76266: LD_INT 0
76268: PPUSH
// result := not value ;
76269: LD_ADDR_VAR 0 2
76273: PUSH
76274: LD_VAR 0 1
76278: NOT
76279: ST_TO_ADDR
// end ;
76280: LD_VAR 0 2
76284: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
76285: LD_INT 0
76287: PPUSH
// if x1 = x2 then
76288: LD_VAR 0 1
76292: PUSH
76293: LD_VAR 0 3
76297: EQUAL
76298: IFFALSE 76332
// begin if y1 > y2 then
76300: LD_VAR 0 2
76304: PUSH
76305: LD_VAR 0 4
76309: GREATER
76310: IFFALSE 76322
// result := 0 else
76312: LD_ADDR_VAR 0 5
76316: PUSH
76317: LD_INT 0
76319: ST_TO_ADDR
76320: GO 76330
// result := 3 ;
76322: LD_ADDR_VAR 0 5
76326: PUSH
76327: LD_INT 3
76329: ST_TO_ADDR
// exit ;
76330: GO 76418
// end ; if y1 = y2 then
76332: LD_VAR 0 2
76336: PUSH
76337: LD_VAR 0 4
76341: EQUAL
76342: IFFALSE 76376
// begin if x1 > x2 then
76344: LD_VAR 0 1
76348: PUSH
76349: LD_VAR 0 3
76353: GREATER
76354: IFFALSE 76366
// result := 1 else
76356: LD_ADDR_VAR 0 5
76360: PUSH
76361: LD_INT 1
76363: ST_TO_ADDR
76364: GO 76374
// result := 4 ;
76366: LD_ADDR_VAR 0 5
76370: PUSH
76371: LD_INT 4
76373: ST_TO_ADDR
// exit ;
76374: GO 76418
// end ; if x1 > x2 and y1 > y2 then
76376: LD_VAR 0 1
76380: PUSH
76381: LD_VAR 0 3
76385: GREATER
76386: PUSH
76387: LD_VAR 0 2
76391: PUSH
76392: LD_VAR 0 4
76396: GREATER
76397: AND
76398: IFFALSE 76410
// result := 2 else
76400: LD_ADDR_VAR 0 5
76404: PUSH
76405: LD_INT 2
76407: ST_TO_ADDR
76408: GO 76418
// result := 5 ;
76410: LD_ADDR_VAR 0 5
76414: PUSH
76415: LD_INT 5
76417: ST_TO_ADDR
// end ;
76418: LD_VAR 0 5
76422: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76423: LD_INT 0
76425: PPUSH
76426: PPUSH
// if not driver or not IsInUnit ( driver ) then
76427: LD_VAR 0 1
76431: NOT
76432: PUSH
76433: LD_VAR 0 1
76437: PPUSH
76438: CALL_OW 310
76442: NOT
76443: OR
76444: IFFALSE 76448
// exit ;
76446: GO 76538
// vehicle := IsInUnit ( driver ) ;
76448: LD_ADDR_VAR 0 3
76452: PUSH
76453: LD_VAR 0 1
76457: PPUSH
76458: CALL_OW 310
76462: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76463: LD_VAR 0 1
76467: PPUSH
76468: LD_STRING \
76470: PUSH
76471: LD_INT 0
76473: PUSH
76474: LD_INT 0
76476: PUSH
76477: LD_INT 0
76479: PUSH
76480: LD_INT 0
76482: PUSH
76483: LD_INT 0
76485: PUSH
76486: LD_INT 0
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: PUSH
76498: LD_STRING E
76500: PUSH
76501: LD_INT 0
76503: PUSH
76504: LD_INT 0
76506: PUSH
76507: LD_VAR 0 3
76511: PUSH
76512: LD_INT 0
76514: PUSH
76515: LD_INT 0
76517: PUSH
76518: LD_INT 0
76520: PUSH
76521: EMPTY
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: PUSH
76530: EMPTY
76531: LIST
76532: LIST
76533: PPUSH
76534: CALL_OW 446
// end ;
76538: LD_VAR 0 2
76542: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76543: LD_INT 0
76545: PPUSH
76546: PPUSH
// if not driver or not IsInUnit ( driver ) then
76547: LD_VAR 0 1
76551: NOT
76552: PUSH
76553: LD_VAR 0 1
76557: PPUSH
76558: CALL_OW 310
76562: NOT
76563: OR
76564: IFFALSE 76568
// exit ;
76566: GO 76658
// vehicle := IsInUnit ( driver ) ;
76568: LD_ADDR_VAR 0 3
76572: PUSH
76573: LD_VAR 0 1
76577: PPUSH
76578: CALL_OW 310
76582: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76583: LD_VAR 0 1
76587: PPUSH
76588: LD_STRING \
76590: PUSH
76591: LD_INT 0
76593: PUSH
76594: LD_INT 0
76596: PUSH
76597: LD_INT 0
76599: PUSH
76600: LD_INT 0
76602: PUSH
76603: LD_INT 0
76605: PUSH
76606: LD_INT 0
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: PUSH
76618: LD_STRING E
76620: PUSH
76621: LD_INT 0
76623: PUSH
76624: LD_INT 0
76626: PUSH
76627: LD_VAR 0 3
76631: PUSH
76632: LD_INT 0
76634: PUSH
76635: LD_INT 0
76637: PUSH
76638: LD_INT 0
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: LIST
76647: LIST
76648: LIST
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PPUSH
76654: CALL_OW 447
// end ;
76658: LD_VAR 0 2
76662: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76663: LD_INT 0
76665: PPUSH
76666: PPUSH
76667: PPUSH
// tmp := [ ] ;
76668: LD_ADDR_VAR 0 5
76672: PUSH
76673: EMPTY
76674: ST_TO_ADDR
// for i in units do
76675: LD_ADDR_VAR 0 4
76679: PUSH
76680: LD_VAR 0 1
76684: PUSH
76685: FOR_IN
76686: IFFALSE 76724
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76688: LD_ADDR_VAR 0 5
76692: PUSH
76693: LD_VAR 0 5
76697: PPUSH
76698: LD_VAR 0 5
76702: PUSH
76703: LD_INT 1
76705: PLUS
76706: PPUSH
76707: LD_VAR 0 4
76711: PPUSH
76712: CALL_OW 256
76716: PPUSH
76717: CALL_OW 2
76721: ST_TO_ADDR
76722: GO 76685
76724: POP
76725: POP
// if not tmp then
76726: LD_VAR 0 5
76730: NOT
76731: IFFALSE 76735
// exit ;
76733: GO 76783
// if asc then
76735: LD_VAR 0 2
76739: IFFALSE 76763
// result := SortListByListAsc ( units , tmp ) else
76741: LD_ADDR_VAR 0 3
76745: PUSH
76746: LD_VAR 0 1
76750: PPUSH
76751: LD_VAR 0 5
76755: PPUSH
76756: CALL_OW 76
76760: ST_TO_ADDR
76761: GO 76783
// result := SortListByListDesc ( units , tmp ) ;
76763: LD_ADDR_VAR 0 3
76767: PUSH
76768: LD_VAR 0 1
76772: PPUSH
76773: LD_VAR 0 5
76777: PPUSH
76778: CALL_OW 77
76782: ST_TO_ADDR
// end ;
76783: LD_VAR 0 3
76787: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76788: LD_INT 0
76790: PPUSH
76791: PPUSH
// task := GetTaskList ( mech ) ;
76792: LD_ADDR_VAR 0 4
76796: PUSH
76797: LD_VAR 0 1
76801: PPUSH
76802: CALL_OW 437
76806: ST_TO_ADDR
// if not task then
76807: LD_VAR 0 4
76811: NOT
76812: IFFALSE 76816
// exit ;
76814: GO 76858
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76816: LD_ADDR_VAR 0 3
76820: PUSH
76821: LD_VAR 0 4
76825: PUSH
76826: LD_INT 1
76828: ARRAY
76829: PUSH
76830: LD_INT 1
76832: ARRAY
76833: PUSH
76834: LD_STRING r
76836: EQUAL
76837: PUSH
76838: LD_VAR 0 4
76842: PUSH
76843: LD_INT 1
76845: ARRAY
76846: PUSH
76847: LD_INT 4
76849: ARRAY
76850: PUSH
76851: LD_VAR 0 2
76855: EQUAL
76856: AND
76857: ST_TO_ADDR
// end ;
76858: LD_VAR 0 3
76862: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76863: LD_INT 0
76865: PPUSH
// SetDir ( unit , d ) ;
76866: LD_VAR 0 1
76870: PPUSH
76871: LD_VAR 0 4
76875: PPUSH
76876: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76880: LD_VAR 0 1
76884: PPUSH
76885: LD_VAR 0 2
76889: PPUSH
76890: LD_VAR 0 3
76894: PPUSH
76895: LD_VAR 0 5
76899: PPUSH
76900: CALL_OW 48
// end ;
76904: LD_VAR 0 6
76908: RET
// export function ToNaturalNumber ( number ) ; begin
76909: LD_INT 0
76911: PPUSH
// result := number div 1 ;
76912: LD_ADDR_VAR 0 2
76916: PUSH
76917: LD_VAR 0 1
76921: PUSH
76922: LD_INT 1
76924: DIV
76925: ST_TO_ADDR
// if number < 0 then
76926: LD_VAR 0 1
76930: PUSH
76931: LD_INT 0
76933: LESS
76934: IFFALSE 76944
// result := 0 ;
76936: LD_ADDR_VAR 0 2
76940: PUSH
76941: LD_INT 0
76943: ST_TO_ADDR
// end ;
76944: LD_VAR 0 2
76948: RET
// export function SortByClass ( units , class ) ; var un ; begin
76949: LD_INT 0
76951: PPUSH
76952: PPUSH
// if not units or not class then
76953: LD_VAR 0 1
76957: NOT
76958: PUSH
76959: LD_VAR 0 2
76963: NOT
76964: OR
76965: IFFALSE 76969
// exit ;
76967: GO 77064
// result := [ ] ;
76969: LD_ADDR_VAR 0 3
76973: PUSH
76974: EMPTY
76975: ST_TO_ADDR
// for un in units do
76976: LD_ADDR_VAR 0 4
76980: PUSH
76981: LD_VAR 0 1
76985: PUSH
76986: FOR_IN
76987: IFFALSE 77062
// if GetClass ( un ) = class then
76989: LD_VAR 0 4
76993: PPUSH
76994: CALL_OW 257
76998: PUSH
76999: LD_VAR 0 2
77003: EQUAL
77004: IFFALSE 77031
// result := Insert ( result , 1 , un ) else
77006: LD_ADDR_VAR 0 3
77010: PUSH
77011: LD_VAR 0 3
77015: PPUSH
77016: LD_INT 1
77018: PPUSH
77019: LD_VAR 0 4
77023: PPUSH
77024: CALL_OW 2
77028: ST_TO_ADDR
77029: GO 77060
// result := Replace ( result , result + 1 , un ) ;
77031: LD_ADDR_VAR 0 3
77035: PUSH
77036: LD_VAR 0 3
77040: PPUSH
77041: LD_VAR 0 3
77045: PUSH
77046: LD_INT 1
77048: PLUS
77049: PPUSH
77050: LD_VAR 0 4
77054: PPUSH
77055: CALL_OW 1
77059: ST_TO_ADDR
77060: GO 76986
77062: POP
77063: POP
// end ;
77064: LD_VAR 0 3
77068: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77069: LD_INT 0
77071: PPUSH
77072: PPUSH
77073: PPUSH
77074: PPUSH
77075: PPUSH
77076: PPUSH
77077: PPUSH
// result := [ ] ;
77078: LD_ADDR_VAR 0 4
77082: PUSH
77083: EMPTY
77084: ST_TO_ADDR
// if x - r < 0 then
77085: LD_VAR 0 1
77089: PUSH
77090: LD_VAR 0 3
77094: MINUS
77095: PUSH
77096: LD_INT 0
77098: LESS
77099: IFFALSE 77111
// min_x := 0 else
77101: LD_ADDR_VAR 0 8
77105: PUSH
77106: LD_INT 0
77108: ST_TO_ADDR
77109: GO 77127
// min_x := x - r ;
77111: LD_ADDR_VAR 0 8
77115: PUSH
77116: LD_VAR 0 1
77120: PUSH
77121: LD_VAR 0 3
77125: MINUS
77126: ST_TO_ADDR
// if y - r < 0 then
77127: LD_VAR 0 2
77131: PUSH
77132: LD_VAR 0 3
77136: MINUS
77137: PUSH
77138: LD_INT 0
77140: LESS
77141: IFFALSE 77153
// min_y := 0 else
77143: LD_ADDR_VAR 0 7
77147: PUSH
77148: LD_INT 0
77150: ST_TO_ADDR
77151: GO 77169
// min_y := y - r ;
77153: LD_ADDR_VAR 0 7
77157: PUSH
77158: LD_VAR 0 2
77162: PUSH
77163: LD_VAR 0 3
77167: MINUS
77168: ST_TO_ADDR
// max_x := x + r ;
77169: LD_ADDR_VAR 0 9
77173: PUSH
77174: LD_VAR 0 1
77178: PUSH
77179: LD_VAR 0 3
77183: PLUS
77184: ST_TO_ADDR
// max_y := y + r ;
77185: LD_ADDR_VAR 0 10
77189: PUSH
77190: LD_VAR 0 2
77194: PUSH
77195: LD_VAR 0 3
77199: PLUS
77200: ST_TO_ADDR
// for _x = min_x to max_x do
77201: LD_ADDR_VAR 0 5
77205: PUSH
77206: DOUBLE
77207: LD_VAR 0 8
77211: DEC
77212: ST_TO_ADDR
77213: LD_VAR 0 9
77217: PUSH
77218: FOR_TO
77219: IFFALSE 77320
// for _y = min_y to max_y do
77221: LD_ADDR_VAR 0 6
77225: PUSH
77226: DOUBLE
77227: LD_VAR 0 7
77231: DEC
77232: ST_TO_ADDR
77233: LD_VAR 0 10
77237: PUSH
77238: FOR_TO
77239: IFFALSE 77316
// begin if not ValidHex ( _x , _y ) then
77241: LD_VAR 0 5
77245: PPUSH
77246: LD_VAR 0 6
77250: PPUSH
77251: CALL_OW 488
77255: NOT
77256: IFFALSE 77260
// continue ;
77258: GO 77238
// if GetResourceTypeXY ( _x , _y ) then
77260: LD_VAR 0 5
77264: PPUSH
77265: LD_VAR 0 6
77269: PPUSH
77270: CALL_OW 283
77274: IFFALSE 77314
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77276: LD_ADDR_VAR 0 4
77280: PUSH
77281: LD_VAR 0 4
77285: PPUSH
77286: LD_VAR 0 4
77290: PUSH
77291: LD_INT 1
77293: PLUS
77294: PPUSH
77295: LD_VAR 0 5
77299: PUSH
77300: LD_VAR 0 6
77304: PUSH
77305: EMPTY
77306: LIST
77307: LIST
77308: PPUSH
77309: CALL_OW 1
77313: ST_TO_ADDR
// end ;
77314: GO 77238
77316: POP
77317: POP
77318: GO 77218
77320: POP
77321: POP
// end ;
77322: LD_VAR 0 4
77326: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
77327: LD_INT 0
77329: PPUSH
77330: PPUSH
77331: PPUSH
77332: PPUSH
77333: PPUSH
77334: PPUSH
// if not units then
77335: LD_VAR 0 1
77339: NOT
77340: IFFALSE 77344
// exit ;
77342: GO 77745
// result := UnitFilter ( units , [ f_ok ] ) ;
77344: LD_ADDR_VAR 0 3
77348: PUSH
77349: LD_VAR 0 1
77353: PPUSH
77354: LD_INT 50
77356: PUSH
77357: EMPTY
77358: LIST
77359: PPUSH
77360: CALL_OW 72
77364: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77365: LD_ADDR_VAR 0 7
77369: PUSH
77370: LD_VAR 0 1
77374: PUSH
77375: LD_INT 1
77377: ARRAY
77378: PPUSH
77379: CALL_OW 255
77383: ST_TO_ADDR
// if not result then
77384: LD_VAR 0 3
77388: NOT
77389: IFFALSE 77393
// exit ;
77391: GO 77745
// for i in result do
77393: LD_ADDR_VAR 0 4
77397: PUSH
77398: LD_VAR 0 3
77402: PUSH
77403: FOR_IN
77404: IFFALSE 77743
// begin tag := GetTag ( i ) + 1 ;
77406: LD_ADDR_VAR 0 8
77410: PUSH
77411: LD_VAR 0 4
77415: PPUSH
77416: CALL_OW 110
77420: PUSH
77421: LD_INT 1
77423: PLUS
77424: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77425: LD_ADDR_VAR 0 6
77429: PUSH
77430: LD_VAR 0 4
77434: PPUSH
77435: CALL_OW 250
77439: PPUSH
77440: LD_VAR 0 4
77444: PPUSH
77445: CALL_OW 251
77449: PPUSH
77450: LD_INT 6
77452: PPUSH
77453: CALL 77069 0 3
77457: ST_TO_ADDR
// if cr then
77458: LD_VAR 0 6
77462: IFFALSE 77501
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77464: LD_VAR 0 4
77468: PPUSH
77469: LD_VAR 0 6
77473: PUSH
77474: LD_INT 1
77476: ARRAY
77477: PUSH
77478: LD_INT 1
77480: ARRAY
77481: PPUSH
77482: LD_VAR 0 6
77486: PUSH
77487: LD_INT 1
77489: ARRAY
77490: PUSH
77491: LD_INT 2
77493: ARRAY
77494: PPUSH
77495: CALL_OW 116
77499: GO 77741
// if path > tag then
77501: LD_VAR 0 2
77505: PUSH
77506: LD_VAR 0 8
77510: GREATER
77511: IFFALSE 77689
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
77513: LD_ADDR_VAR 0 5
77517: PUSH
77518: LD_INT 81
77520: PUSH
77521: LD_VAR 0 7
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: LD_INT 91
77532: PUSH
77533: LD_VAR 0 4
77537: PUSH
77538: LD_INT 12
77540: PUSH
77541: EMPTY
77542: LIST
77543: LIST
77544: LIST
77545: PUSH
77546: EMPTY
77547: LIST
77548: LIST
77549: PPUSH
77550: CALL_OW 69
77554: ST_TO_ADDR
// if enemy then
77555: LD_VAR 0 5
77559: IFFALSE 77587
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77561: LD_VAR 0 4
77565: PPUSH
77566: LD_VAR 0 5
77570: PPUSH
77571: LD_VAR 0 4
77575: PPUSH
77576: CALL_OW 74
77580: PPUSH
77581: CALL_OW 115
77585: GO 77687
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77587: LD_VAR 0 4
77591: PPUSH
77592: LD_VAR 0 2
77596: PUSH
77597: LD_VAR 0 8
77601: ARRAY
77602: PUSH
77603: LD_INT 1
77605: ARRAY
77606: PPUSH
77607: LD_VAR 0 2
77611: PUSH
77612: LD_VAR 0 8
77616: ARRAY
77617: PUSH
77618: LD_INT 2
77620: ARRAY
77621: PPUSH
77622: CALL_OW 297
77626: PUSH
77627: LD_INT 6
77629: GREATER
77630: IFFALSE 77673
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77632: LD_VAR 0 4
77636: PPUSH
77637: LD_VAR 0 2
77641: PUSH
77642: LD_VAR 0 8
77646: ARRAY
77647: PUSH
77648: LD_INT 1
77650: ARRAY
77651: PPUSH
77652: LD_VAR 0 2
77656: PUSH
77657: LD_VAR 0 8
77661: ARRAY
77662: PUSH
77663: LD_INT 2
77665: ARRAY
77666: PPUSH
77667: CALL_OW 114
77671: GO 77687
// SetTag ( i , tag ) ;
77673: LD_VAR 0 4
77677: PPUSH
77678: LD_VAR 0 8
77682: PPUSH
77683: CALL_OW 109
// end else
77687: GO 77741
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77689: LD_ADDR_VAR 0 5
77693: PUSH
77694: LD_INT 81
77696: PUSH
77697: LD_VAR 0 7
77701: PUSH
77702: EMPTY
77703: LIST
77704: LIST
77705: PPUSH
77706: CALL_OW 69
77710: ST_TO_ADDR
// if enemy then
77711: LD_VAR 0 5
77715: IFFALSE 77741
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77717: LD_VAR 0 4
77721: PPUSH
77722: LD_VAR 0 5
77726: PPUSH
77727: LD_VAR 0 4
77731: PPUSH
77732: CALL_OW 74
77736: PPUSH
77737: CALL_OW 115
// end ; end ;
77741: GO 77403
77743: POP
77744: POP
// end ; end_of_file
77745: LD_VAR 0 3
77749: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77750: LD_VAR 0 1
77754: PUSH
77755: LD_INT 200
77757: DOUBLE
77758: GREATEREQUAL
77759: IFFALSE 77767
77761: LD_INT 299
77763: DOUBLE
77764: LESSEQUAL
77765: IFTRUE 77769
77767: GO 77801
77769: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77770: LD_VAR 0 1
77774: PPUSH
77775: LD_VAR 0 2
77779: PPUSH
77780: LD_VAR 0 3
77784: PPUSH
77785: LD_VAR 0 4
77789: PPUSH
77790: LD_VAR 0 5
77794: PPUSH
77795: CALL 34144 0 5
77799: GO 77878
77801: LD_INT 300
77803: DOUBLE
77804: GREATEREQUAL
77805: IFFALSE 77813
77807: LD_INT 399
77809: DOUBLE
77810: LESSEQUAL
77811: IFTRUE 77815
77813: GO 77877
77815: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77816: LD_VAR 0 1
77820: PPUSH
77821: LD_VAR 0 2
77825: PPUSH
77826: LD_VAR 0 3
77830: PPUSH
77831: LD_VAR 0 4
77835: PPUSH
77836: LD_VAR 0 5
77840: PPUSH
77841: LD_VAR 0 6
77845: PPUSH
77846: LD_VAR 0 7
77850: PPUSH
77851: LD_VAR 0 8
77855: PPUSH
77856: LD_VAR 0 9
77860: PPUSH
77861: LD_VAR 0 10
77865: PPUSH
77866: LD_VAR 0 11
77870: PPUSH
77871: CALL 32032 0 11
77875: GO 77878
77877: POP
// end ;
77878: PPOPN 11
77880: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77881: LD_VAR 0 1
77885: PPUSH
77886: LD_VAR 0 2
77890: PPUSH
77891: LD_VAR 0 3
77895: PPUSH
77896: LD_VAR 0 4
77900: PPUSH
77901: LD_VAR 0 5
77905: PPUSH
77906: CALL 34126 0 5
// end ;
77910: PPOPN 5
77912: END
