// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 50943 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5840 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := 1 ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 57405 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 57405 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16932 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16932 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16932 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16932 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1670
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_EXP 43
1461: PPUSH
1462: LD_INT 25
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 72
1476: ST_TO_ADDR
// if not tmp then
1477: LD_VAR 0 1
1481: NOT
1482: IFFALSE 1486
// exit ;
1484: GO 1670
// wait ( 0 0$5 ) ;
1486: LD_INT 175
1488: PPUSH
1489: CALL_OW 67
// ComExit ( tmp ) ;
1493: LD_VAR 0 1
1497: PPUSH
1498: CALL 54651 0 1
// for i := 1 to 2 do
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: DOUBLE
1508: LD_INT 1
1510: DEC
1511: ST_TO_ADDR
1512: LD_INT 2
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1559
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1518: LD_VAR 0 1
1522: PPUSH
1523: LD_INT 71
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1533: LD_VAR 0 1
1537: PPUSH
1538: LD_INT 121
1540: PPUSH
1541: LD_INT 111
1543: PPUSH
1544: CALL_OW 171
// AddComUnload ( tmp ) ;
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 219
// end ;
1557: GO 1515
1559: POP
1560: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1561: LD_VAR 0 1
1565: PPUSH
1566: LD_INT 2
1568: PPUSH
1569: LD_INT 113
1571: PPUSH
1572: LD_INT 113
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1582: LD_INT 83
1584: PPUSH
1585: LD_INT 46
1587: PPUSH
1588: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1592: LD_INT 83
1594: PPUSH
1595: LD_INT 47
1597: PPUSH
1598: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1602: LD_INT 83
1604: PPUSH
1605: LD_INT 48
1607: PPUSH
1608: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1612: LD_VAR 0 1
1616: PPUSH
1617: LD_INT 26
1619: PPUSH
1620: LD_INT 116
1622: PPUSH
1623: LD_INT 98
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1633: LD_INT 35
1635: PPUSH
1636: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1640: LD_VAR 0 1
1644: PPUSH
1645: LD_INT 60
1647: PUSH
1648: EMPTY
1649: LIST
1650: PPUSH
1651: CALL_OW 72
1655: NOT
1656: IFFALSE 1633
// ComEnterUnit ( tmp , kirov ) ;
1658: LD_VAR 0 1
1662: PPUSH
1663: LD_INT 71
1665: PPUSH
1666: CALL_OW 120
// end ;
1670: PPOPN 2
1672: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1673: LD_INT 0
1675: PPUSH
1676: PPUSH
1677: PPUSH
1678: PPUSH
1679: PPUSH
1680: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1681: LD_ADDR_VAR 0 3
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 6
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 21
1698: PUSH
1699: LD_INT 2
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PPUSH
1710: CALL_OW 69
1714: ST_TO_ADDR
// if not belkovTank then
1715: LD_VAR 0 3
1719: NOT
1720: IFFALSE 1813
// begin uc_side := 6 ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_INT 6
1729: ST_TO_ADDR
// uc_nation := 3 ;
1730: LD_ADDR_OWVAR 21
1734: PUSH
1735: LD_INT 3
1737: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1738: LD_INT 21
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 1
1746: PPUSH
1747: LD_INT 42
1749: PPUSH
1750: LD_INT 100
1752: PPUSH
1753: CALL 21772 0 5
// belkovTank := CreateVehicle ;
1757: LD_ADDR_VAR 0 3
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 5
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1779: LD_VAR 0 3
1783: PPUSH
1784: LD_INT 127
1786: PPUSH
1787: LD_INT 118
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1797: LD_EXP 36
1801: PPUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 120
// end else
1811: GO 1827
// begin belkovTank := belkovTank [ 1 ] ;
1813: LD_ADDR_VAR 0 3
1817: PUSH
1818: LD_VAR 0 3
1822: PUSH
1823: LD_INT 1
1825: ARRAY
1826: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 71
1834: PPUSH
1835: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1839: LD_VAR 0 3
1843: PPUSH
1844: LD_INT 71
1846: PPUSH
1847: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 256
1860: PUSH
1861: LD_INT 1000
1863: LESS
1864: IFFALSE 1977
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1866: LD_ADDR_VAR 0 4
1870: PUSH
1871: LD_EXP 43
1875: PPUSH
1876: LD_INT 25
1878: PUSH
1879: LD_INT 3
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PPUSH
1886: CALL_OW 72
1890: ST_TO_ADDR
// if not mech then
1891: LD_VAR 0 4
1895: NOT
1896: IFFALSE 1912
// SetLives ( belkovTank , 1000 ) else
1898: LD_VAR 0 3
1902: PPUSH
1903: LD_INT 1000
1905: PPUSH
1906: CALL_OW 234
1910: GO 1977
// begin ComExit ( mech ) ;
1912: LD_VAR 0 4
1916: PPUSH
1917: CALL 54651 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1921: LD_VAR 0 4
1925: PPUSH
1926: LD_VAR 0 3
1930: PPUSH
1931: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1935: LD_VAR 0 4
1939: PPUSH
1940: LD_INT 22
1942: PUSH
1943: LD_INT 6
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: PUSH
1950: LD_INT 30
1952: PUSH
1953: LD_INT 2
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 69
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1977: LD_INT 70
1979: PPUSH
1980: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1984: LD_VAR 0 3
1988: PPUSH
1989: CALL_OW 256
1993: PUSH
1994: LD_INT 1000
1996: EQUAL
1997: IFFALSE 1977
// if mech then
1999: LD_VAR 0 4
2003: IFFALSE 2047
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 6
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 30
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2047: LD_EXP 36
2051: PPUSH
2052: LD_INT 107
2054: PPUSH
2055: LD_INT 104
2057: PPUSH
2058: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2062: LD_EXP 36
2066: PPUSH
2067: LD_INT 95
2069: PPUSH
2070: LD_INT 101
2072: PPUSH
2073: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2077: LD_EXP 36
2081: PPUSH
2082: LD_INT 89
2084: PPUSH
2085: LD_INT 100
2087: PPUSH
2088: CALL_OW 171
// wait ( 0 0$2 ) ;
2092: LD_INT 70
2094: PPUSH
2095: CALL_OW 67
// for i in belkovTeam do
2099: LD_ADDR_VAR 0 2
2103: PUSH
2104: LD_EXP 45
2108: PUSH
2109: FOR_IN
2110: IFFALSE 2138
// begin ComExit ( i ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: CALL 54651 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: LD_INT 89
2128: PPUSH
2129: LD_INT 100
2131: PPUSH
2132: CALL_OW 171
// end ;
2136: GO 2109
2138: POP
2139: POP
// tmp := Belkov union belkovTeam ;
2140: LD_ADDR_VAR 0 5
2144: PUSH
2145: LD_EXP 36
2149: PUSH
2150: LD_EXP 45
2154: UNION
2155: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2156: LD_INT 35
2158: PPUSH
2159: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2163: LD_VAR 0 5
2167: PPUSH
2168: LD_INT 60
2170: PUSH
2171: EMPTY
2172: LIST
2173: PPUSH
2174: CALL_OW 72
2178: NOT
2179: IFFALSE 2156
// ComMoveXY ( tmp , 71 , 65 ) ;
2181: LD_VAR 0 5
2185: PPUSH
2186: LD_INT 71
2188: PPUSH
2189: LD_INT 65
2191: PPUSH
2192: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2196: LD_VAR 0 5
2200: PPUSH
2201: LD_INT 61
2203: PPUSH
2204: LD_INT 37
2206: PPUSH
2207: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2211: LD_VAR 0 5
2215: PPUSH
2216: LD_INT 67
2218: PPUSH
2219: LD_INT 17
2221: PPUSH
2222: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2226: LD_VAR 0 5
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2238: LD_EXP 36
2242: PPUSH
2243: LD_INT 63
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2253: LD_EXP 36
2257: PPUSH
2258: LD_INT 105
2260: PPUSH
2261: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2265: LD_EXP 36
2269: PPUSH
2270: LD_INT 86
2272: PPUSH
2273: LD_INT 37
2275: PPUSH
2276: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2280: LD_EXP 36
2284: PPUSH
2285: LD_INT 105
2287: PPUSH
2288: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2292: LD_VAR 0 5
2296: PPUSH
2297: LD_INT 88
2299: PPUSH
2300: LD_INT 29
2302: PPUSH
2303: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2307: LD_INT 35
2309: PPUSH
2310: CALL_OW 67
// for i in tmp do
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 5
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2356
// if not HasTask ( i ) then
2327: LD_VAR 0 2
2331: PPUSH
2332: CALL_OW 314
2336: NOT
2337: IFFALSE 2354
// AddComMoveXY ( tmp , 88 , 29 ) ;
2339: LD_VAR 0 5
2343: PPUSH
2344: LD_INT 88
2346: PPUSH
2347: LD_INT 29
2349: PPUSH
2350: CALL_OW 171
2354: GO 2324
2356: POP
2357: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2358: LD_VAR 0 5
2362: PPUSH
2363: LD_INT 95
2365: PUSH
2366: LD_INT 6
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PPUSH
2373: CALL_OW 72
2377: IFFALSE 2471
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2379: LD_ADDR_VAR 0 2
2383: PUSH
2384: LD_VAR 0 5
2388: PPUSH
2389: LD_INT 95
2391: PUSH
2392: LD_INT 6
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PPUSH
2399: CALL_OW 72
2403: PUSH
2404: FOR_IN
2405: IFFALSE 2469
// begin if i = Belkov then
2407: LD_VAR 0 2
2411: PUSH
2412: LD_EXP 36
2416: EQUAL
2417: IFFALSE 2458
// begin belkovTank := IsInUnit ( Belkov ) ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_EXP 36
2428: PPUSH
2429: CALL_OW 310
2433: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2434: LD_ADDR_VAR 0 6
2438: PUSH
2439: LD_VAR 0 3
2443: PPUSH
2444: CALL_OW 261
2448: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2449: LD_VAR 0 3
2453: PPUSH
2454: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: CALL_OW 64
// end ;
2467: GO 2404
2469: POP
2470: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2471: LD_VAR 0 5
2475: PPUSH
2476: LD_INT 52
2478: PUSH
2479: EMPTY
2480: LIST
2481: PPUSH
2482: CALL_OW 72
2486: NOT
2487: IFFALSE 2307
// wait ( 1 1$20 ) ;
2489: LD_INT 2800
2491: PPUSH
2492: CALL_OW 67
// if fuel < 50 then
2496: LD_VAR 0 6
2500: PUSH
2501: LD_INT 50
2503: LESS
2504: IFFALSE 2514
// fuel := 50 ;
2506: LD_ADDR_VAR 0 6
2510: PUSH
2511: LD_INT 50
2513: ST_TO_ADDR
// uc_side := 6 ;
2514: LD_ADDR_OWVAR 20
2518: PUSH
2519: LD_INT 6
2521: ST_TO_ADDR
// uc_nation := 3 ;
2522: LD_ADDR_OWVAR 21
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2530: LD_INT 21
2532: PPUSH
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: LD_INT 42
2541: PPUSH
2542: LD_VAR 0 6
2546: PUSH
2547: LD_INT 5
2549: MINUS
2550: PPUSH
2551: CALL 21772 0 5
// belkovTank := CreateVehicle ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 45
2564: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2577: LD_VAR 0 3
2581: PPUSH
2582: LD_INT 60
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2595: LD_EXP 36
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2609: LD_EXP 36
2613: PPUSH
2614: LD_INT 72
2616: PPUSH
2617: LD_INT 26
2619: PPUSH
2620: CALL_OW 111
// wait ( 0 0$2 ) ;
2624: LD_INT 70
2626: PPUSH
2627: CALL_OW 67
// for i in belkovTeam do
2631: LD_ADDR_VAR 0 2
2635: PUSH
2636: LD_EXP 45
2640: PUSH
2641: FOR_IN
2642: IFFALSE 2686
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2644: LD_VAR 0 2
2648: PPUSH
2649: LD_INT 60
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 0
2657: PPUSH
2658: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_INT 65
2669: PPUSH
2670: LD_INT 18
2672: PPUSH
2673: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2677: LD_INT 28
2679: PPUSH
2680: CALL_OW 67
// end ;
2684: GO 2641
2686: POP
2687: POP
// repeat wait ( 0 0$1 ) ;
2688: LD_INT 35
2690: PPUSH
2691: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2695: LD_EXP 14
2699: PUSH
2700: LD_EXP 45
2704: PPUSH
2705: LD_INT 60
2707: PUSH
2708: EMPTY
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: NOT
2716: AND
2717: IFFALSE 2688
// americanTrap := true ;
2719: LD_ADDR_EXP 17
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// end ;
2727: LD_VAR 0 1
2731: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2732: LD_EXP 4
2736: PUSH
2737: LD_EXP 40
2741: PPUSH
2742: CALL_OW 302
2746: AND
2747: IFFALSE 3067
2749: GO 2751
2751: DISABLE
2752: LD_INT 0
2754: PPUSH
2755: PPUSH
2756: PPUSH
2757: PPUSH
// begin enable ;
2758: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2759: LD_EXP 8
2763: PUSH
2764: LD_INT 0
2766: GREATER
2767: PUSH
2768: LD_EXP 40
2772: PPUSH
2773: CALL_OW 314
2777: NOT
2778: AND
2779: IFFALSE 2948
// begin dir := rand ( 0 , 5 ) ;
2781: LD_ADDR_VAR 0 4
2785: PUSH
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 5
2791: PPUSH
2792: CALL_OW 12
2796: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2797: LD_ADDR_VAR 0 1
2801: PUSH
2802: LD_EXP 40
2806: PPUSH
2807: CALL_OW 250
2811: PPUSH
2812: LD_VAR 0 4
2816: PPUSH
2817: LD_INT 5
2819: PPUSH
2820: CALL_OW 272
2824: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2825: LD_ADDR_VAR 0 2
2829: PUSH
2830: LD_EXP 40
2834: PPUSH
2835: CALL_OW 251
2839: PPUSH
2840: LD_VAR 0 4
2844: PPUSH
2845: LD_INT 5
2847: PPUSH
2848: CALL_OW 273
2852: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2853: LD_VAR 0 1
2857: PPUSH
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 488
2867: PUSH
2868: LD_INT 106
2870: PPUSH
2871: LD_VAR 0 1
2875: PPUSH
2876: LD_VAR 0 2
2880: PPUSH
2881: CALL_OW 297
2885: PUSH
2886: LD_INT 26
2888: LESS
2889: AND
2890: IFFALSE 2913
// AddComMoveXY ( Platonov , x , y ) else
2892: LD_EXP 40
2896: PPUSH
2897: LD_VAR 0 1
2901: PPUSH
2902: LD_VAR 0 2
2906: PPUSH
2907: CALL_OW 171
2911: GO 2928
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2913: LD_EXP 40
2917: PPUSH
2918: LD_INT 64
2920: PPUSH
2921: LD_INT 96
2923: PPUSH
2924: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2928: LD_EXP 40
2932: PPUSH
2933: LD_INT 105
2935: PPUSH
2936: LD_INT 315
2938: PPUSH
2939: CALL_OW 12
2943: PPUSH
2944: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2948: LD_EXP 8
2952: PUSH
2953: LD_INT 0
2955: LESSEQUAL
2956: IFFALSE 3002
// begin if not IsAt ( Platonov , 64 , 96 ) then
2958: LD_EXP 40
2962: PPUSH
2963: LD_INT 64
2965: PPUSH
2966: LD_INT 96
2968: PPUSH
2969: CALL_OW 307
2973: NOT
2974: IFFALSE 3000
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2976: LD_EXP 40
2980: PPUSH
2981: LD_INT 64
2983: PPUSH
2984: LD_INT 96
2986: PPUSH
2987: CALL_OW 111
// AddComHold ( Platonov ) ;
2991: LD_EXP 40
2995: PPUSH
2996: CALL_OW 200
// end ; end else
3000: GO 3067
// if tick mod 0 0$75 = 0 0$00 then
3002: LD_OWVAR 1
3006: PUSH
3007: LD_INT 2625
3009: MOD
3010: PUSH
3011: LD_INT 0
3013: EQUAL
3014: IFFALSE 3067
// begin amount := rand ( 2 , 5 ) ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: LD_INT 2
3023: PPUSH
3024: LD_INT 5
3026: PPUSH
3027: CALL_OW 12
3031: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_EXP 8
3041: PUSH
3042: LD_VAR 0 3
3046: PUSH
3047: LD_INT 10
3049: MUL
3050: MINUS
3051: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 55
// end ; end ;
3067: PPOPN 4
3069: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3070: LD_INT 106
3072: PPUSH
3073: CALL_OW 274
3077: PPUSH
3078: LD_INT 2
3080: PPUSH
3081: CALL_OW 275
3085: PUSH
3086: LD_INT 30
3088: LESS
3089: IFFALSE 3299
3091: GO 3093
3093: DISABLE
3094: LD_INT 0
3096: PPUSH
3097: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3098: LD_ADDR_VAR 0 2
3102: PUSH
3103: LD_EXP 43
3107: PPUSH
3108: LD_INT 3
3110: PUSH
3111: LD_INT 60
3113: PUSH
3114: EMPTY
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 2
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 72
3139: ST_TO_ADDR
// if not eng then
3140: LD_VAR 0 2
3144: NOT
3145: IFFALSE 3149
// exit ;
3147: GO 3299
// ComExit ( eng ) ;
3149: LD_VAR 0 2
3153: PPUSH
3154: CALL 54651 0 1
// i := 5 ;
3158: LD_ADDR_VAR 0 1
3162: PUSH
3163: LD_INT 5
3165: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3166: LD_INT 35
3168: PPUSH
3169: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: NOT
3189: PUSH
3190: LD_VAR 0 2
3194: AND
3195: IFFALSE 3265
// begin ComTransport ( eng , kirov , mat_oil ) ;
3197: LD_VAR 0 2
3201: PPUSH
3202: LD_INT 71
3204: PPUSH
3205: LD_INT 2
3207: PPUSH
3208: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3212: LD_VAR 0 2
3216: PPUSH
3217: LD_INT 67
3219: PPUSH
3220: LD_INT 99
3222: PPUSH
3223: CALL_OW 171
// AddComUnload ( eng ) ;
3227: LD_VAR 0 2
3231: PPUSH
3232: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 107
3243: PPUSH
3244: LD_INT 104
3246: PPUSH
3247: CALL_OW 171
// i := i - 1 ;
3251: LD_ADDR_VAR 0 1
3255: PUSH
3256: LD_VAR 0 1
3260: PUSH
3261: LD_INT 1
3263: MINUS
3264: ST_TO_ADDR
// end ; until i = 0 ;
3265: LD_VAR 0 1
3269: PUSH
3270: LD_INT 0
3272: EQUAL
3273: IFFALSE 3166
// AddComMoveUnit ( eng , kirov ) ;
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 71
3282: PPUSH
3283: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3287: LD_VAR 0 2
3291: PPUSH
3292: LD_INT 71
3294: PPUSH
3295: CALL_OW 180
// end ;
3299: PPOPN 2
3301: END
// export function SendReinforcements ; var i ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
// reinforcementsGained := true ;
3306: LD_ADDR_EXP 25
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// for i := 1 to 2 do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: DOUBLE
3320: LD_INT 1
3322: DEC
3323: ST_TO_ADDR
3324: LD_INT 2
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3410
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3330: LD_EXP 44
3334: PUSH
3335: LD_VAR 0 2
3339: ARRAY
3340: PPUSH
3341: CALL 54651 0 1
3345: IFFALSE 3354
// wait ( 0 0$0.3 ) ;
3347: LD_INT 10
3349: PPUSH
3350: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3354: LD_EXP 44
3358: PUSH
3359: LD_VAR 0 2
3363: ARRAY
3364: PPUSH
3365: LD_INT 75
3367: PPUSH
3368: LD_INT 84
3370: PPUSH
3371: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3375: LD_EXP 44
3379: PUSH
3380: LD_VAR 0 2
3384: ARRAY
3385: PPUSH
3386: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3390: LD_EXP 44
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 3
3403: PPUSH
3404: CALL_OW 235
// end ;
3408: GO 3327
3410: POP
3411: POP
// end ;
3412: LD_VAR 0 1
3416: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3417: LD_EXP 21
3421: PUSH
3422: LD_EXP 18
3426: AND
3427: PUSH
3428: LD_EXP 43
3432: PPUSH
3433: LD_INT 25
3435: PUSH
3436: LD_INT 3
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 72
3447: AND
3448: IFFALSE 3605
3450: GO 3452
3452: DISABLE
3453: LD_INT 0
3455: PPUSH
3456: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3457: LD_ADDR_VAR 0 1
3461: PUSH
3462: LD_EXP 43
3466: PPUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 72
3481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 22
3489: PUSH
3490: LD_INT 6
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 30
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: ST_TO_ADDR
// if not fac then
3516: LD_VAR 0 2
3520: NOT
3521: IFFALSE 3525
// exit ;
3523: GO 3605
// fac := fac [ 1 ] ;
3525: LD_ADDR_VAR 0 2
3529: PUSH
3530: LD_VAR 0 2
3534: PUSH
3535: LD_INT 1
3537: ARRAY
3538: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3539: LD_VAR 0 2
3543: PPUSH
3544: CALL_OW 313
3548: PUSH
3549: LD_INT 0
3551: EQUAL
3552: IFFALSE 3584
// begin ComExit ( mech ) ;
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL 54651 0 1
// wait ( 3 ) ;
3563: LD_INT 3
3565: PPUSH
3566: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_VAR 0 2
3579: PPUSH
3580: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3584: LD_VAR 0 2
3588: PPUSH
3589: LD_INT 21
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 1
3597: PPUSH
3598: LD_INT 42
3600: PPUSH
3601: CALL_OW 125
// end ;
3605: PPOPN 2
3607: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3608: LD_INT 0
3610: PPUSH
3611: PPUSH
3612: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: LD_INT 90
3620: PPUSH
3621: LD_INT 100
3623: PPUSH
3624: CALL_OW 111
// wait ( 0 0$10 ) ;
3628: LD_INT 350
3630: PPUSH
3631: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3635: LD_VAR 0 1
3639: PPUSH
3640: LD_INT 0
3642: PPUSH
3643: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3654: LD_ADDR_VAR 0 4
3658: PUSH
3659: LD_VAR 0 1
3663: PPUSH
3664: CALL_OW 110
3668: ST_TO_ADDR
// if tag = 0 then
3669: LD_VAR 0 4
3673: PUSH
3674: LD_INT 0
3676: EQUAL
3677: IFFALSE 3748
// begin if not HasTask ( vehicle ) then
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL_OW 314
3688: NOT
3689: IFFALSE 3706
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3691: LD_VAR 0 1
3695: PPUSH
3696: LD_INT 83
3698: PPUSH
3699: LD_INT 68
3701: PPUSH
3702: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3706: LD_VAR 0 1
3710: PPUSH
3711: CALL_OW 256
3715: PUSH
3716: LD_INT 750
3718: LESS
3719: IFFALSE 3748
// begin SetTag ( vehicle , 1 ) ;
3721: LD_VAR 0 1
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 93
3740: PPUSH
3741: LD_INT 102
3743: PPUSH
3744: CALL_OW 111
// end ; end ; if tag = 1 then
3748: LD_VAR 0 4
3752: PUSH
3753: LD_INT 1
3755: EQUAL
3756: IFFALSE 3846
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3758: LD_VAR 0 1
3762: PPUSH
3763: LD_INT 113
3765: PPUSH
3766: LD_INT 106
3768: PPUSH
3769: CALL_OW 307
3773: NOT
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: CALL_OW 314
3784: NOT
3785: AND
3786: IFFALSE 3803
// ComMoveXY ( vehicle , 113 , 106 ) ;
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_INT 113
3795: PPUSH
3796: LD_INT 106
3798: PPUSH
3799: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3803: LD_VAR 0 1
3807: PPUSH
3808: LD_INT 113
3810: PPUSH
3811: LD_INT 106
3813: PPUSH
3814: CALL_OW 307
3818: IFFALSE 3846
// begin SetTag ( vehicle , 2 ) ;
3820: LD_VAR 0 1
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3832: LD_VAR 0 1
3836: PPUSH
3837: CALL_OW 311
3841: PPUSH
3842: CALL 55953 0 1
// end ; end ; if tag = 2 then
3846: LD_VAR 0 4
3850: PUSH
3851: LD_INT 2
3853: EQUAL
3854: IFFALSE 3918
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3856: LD_VAR 0 1
3860: PPUSH
3861: CALL_OW 256
3865: PUSH
3866: LD_INT 1000
3868: EQUAL
3869: PUSH
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 311
3879: AND
3880: IFFALSE 3918
// begin ComMoveUnit ( vehicle , kirov ) ;
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 71
3889: PPUSH
3890: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_INT 71
3901: PPUSH
3902: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3906: LD_VAR 0 1
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 301
3927: PUSH
3928: LD_EXP 23
3932: OR
3933: IFFALSE 3647
// if eastOutpostDestroyed then
3935: LD_EXP 23
3939: IFFALSE 3956
// ComMoveXY ( vehicle , 111 , 105 ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 111
3948: PPUSH
3949: LD_INT 105
3951: PPUSH
3952: CALL_OW 111
// end ; end_of_file
3956: LD_VAR 0 2
3960: RET
// export usWestForces , usEastForces , usTrapForces ; export function PrepareAmerican ; var i , un , tmp ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
// uc_side := 1 ;
3967: LD_ADDR_OWVAR 20
3971: PUSH
3972: LD_INT 1
3974: ST_TO_ADDR
// uc_nation := 1 ;
3975: LD_ADDR_OWVAR 21
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// usWestForces := [ ] ;
3983: LD_ADDR_EXP 46
3987: PUSH
3988: EMPTY
3989: ST_TO_ADDR
// usEastForces := [ ] ;
3990: LD_ADDR_EXP 47
3994: PUSH
3995: EMPTY
3996: ST_TO_ADDR
// bc_type := b_depot ;
3997: LD_ADDR_OWVAR 42
4001: PUSH
4002: LD_INT 0
4004: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4005: LD_ADDR_OWVAR 43
4009: PUSH
4010: LD_OWVAR 67
4014: PUSH
4015: LD_INT 1
4017: MINUS
4018: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4019: LD_INT 48
4021: PPUSH
4022: LD_INT 54
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4032: LD_ADDR_VAR 0 4
4036: PUSH
4037: LD_INT 55
4039: PUSH
4040: LD_INT 55
4042: PUSH
4043: LD_INT 4
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 59
4053: PUSH
4054: LD_INT 61
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: ST_TO_ADDR
// if Difficulty > 1 then
4069: LD_OWVAR 67
4073: PUSH
4074: LD_INT 1
4076: GREATER
4077: IFFALSE 4113
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4079: LD_ADDR_VAR 0 4
4083: PUSH
4084: LD_VAR 0 4
4088: PPUSH
4089: LD_VAR 0 4
4093: PPUSH
4094: LD_INT 46
4096: PUSH
4097: LD_INT 64
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 2
4112: ST_TO_ADDR
// if Difficulty > 2 then
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 2
4120: GREATER
4121: IFFALSE 4157
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4123: LD_ADDR_VAR 0 4
4127: PUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_VAR 0 4
4137: PPUSH
4138: LD_INT 36
4140: PUSH
4141: LD_INT 48
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 2
4156: ST_TO_ADDR
// bc_type := b_breastwork ;
4157: LD_ADDR_OWVAR 42
4161: PUSH
4162: LD_INT 31
4164: ST_TO_ADDR
// InitHC_All ( ) ;
4165: CALL_OW 584
// for i in tmp do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_VAR 0 4
4178: PUSH
4179: FOR_IN
4180: IFFALSE 4324
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4182: LD_VAR 0 2
4186: PUSH
4187: LD_INT 1
4189: ARRAY
4190: PPUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 2
4198: ARRAY
4199: PPUSH
4200: LD_VAR 0 2
4204: PUSH
4205: LD_INT 3
4207: ARRAY
4208: PPUSH
4209: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_OWVAR 67
4220: PPUSH
4221: CALL_OW 381
// un := CreateHuman ;
4225: LD_ADDR_VAR 0 3
4229: PUSH
4230: CALL_OW 44
4234: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4235: LD_ADDR_EXP 46
4239: PUSH
4240: LD_EXP 46
4244: PPUSH
4245: LD_EXP 46
4249: PUSH
4250: LD_INT 1
4252: PLUS
4253: PPUSH
4254: LD_VAR 0 3
4258: PPUSH
4259: CALL_OW 1
4263: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_VAR 0 2
4273: PUSH
4274: LD_INT 3
4276: ARRAY
4277: PUSH
4278: LD_INT 3
4280: PLUS
4281: PUSH
4282: LD_INT 6
4284: MOD
4285: PPUSH
4286: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4290: LD_VAR 0 3
4294: PPUSH
4295: LD_VAR 0 2
4299: PUSH
4300: LD_INT 1
4302: ARRAY
4303: PPUSH
4304: LD_VAR 0 2
4308: PUSH
4309: LD_INT 2
4311: ARRAY
4312: PPUSH
4313: CALL_OW 428
4317: PPUSH
4318: CALL_OW 52
// end ;
4322: GO 4179
4324: POP
4325: POP
// for i := 1 to 2 do
4326: LD_ADDR_VAR 0 2
4330: PUSH
4331: DOUBLE
4332: LD_INT 1
4334: DEC
4335: ST_TO_ADDR
4336: LD_INT 2
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4416
// begin PrepareEngineer ( false , Difficulty ) ;
4342: LD_INT 0
4344: PPUSH
4345: LD_OWVAR 67
4349: PPUSH
4350: CALL_OW 382
// un := CreateHuman ;
4354: LD_ADDR_VAR 0 3
4358: PUSH
4359: CALL_OW 44
4363: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4364: LD_ADDR_EXP 46
4368: PUSH
4369: LD_EXP 46
4373: PPUSH
4374: LD_EXP 46
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: PPUSH
4383: LD_VAR 0 3
4387: PPUSH
4388: CALL_OW 1
4392: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4393: LD_VAR 0 3
4397: PPUSH
4398: LD_INT 54
4400: PPUSH
4401: LD_INT 58
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 50
// end ;
4414: GO 4339
4416: POP
4417: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4418: LD_ADDR_VAR 0 4
4422: PUSH
4423: LD_INT 87
4425: PUSH
4426: LD_INT 62
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 89
4439: PUSH
4440: LD_INT 67
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// if Difficulty > 2 then
4455: LD_OWVAR 67
4459: PUSH
4460: LD_INT 2
4462: GREATER
4463: IFFALSE 4499
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4465: LD_ADDR_VAR 0 4
4469: PUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_INT 88
4482: PUSH
4483: LD_INT 53
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 2
4498: ST_TO_ADDR
// bc_type := b_breastwork ;
4499: LD_ADDR_OWVAR 42
4503: PUSH
4504: LD_INT 31
4506: ST_TO_ADDR
// for i in tmp do
4507: LD_ADDR_VAR 0 2
4511: PUSH
4512: LD_VAR 0 4
4516: PUSH
4517: FOR_IN
4518: IFFALSE 4662
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4520: LD_VAR 0 2
4524: PUSH
4525: LD_INT 1
4527: ARRAY
4528: PPUSH
4529: LD_VAR 0 2
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: PPUSH
4538: LD_VAR 0 2
4542: PUSH
4543: LD_INT 3
4545: ARRAY
4546: PPUSH
4547: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_OWVAR 67
4558: PPUSH
4559: CALL_OW 381
// un := CreateHuman ;
4563: LD_ADDR_VAR 0 3
4567: PUSH
4568: CALL_OW 44
4572: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4573: LD_ADDR_EXP 47
4577: PUSH
4578: LD_EXP 47
4582: PPUSH
4583: LD_EXP 47
4587: PUSH
4588: LD_INT 1
4590: PLUS
4591: PPUSH
4592: LD_VAR 0 3
4596: PPUSH
4597: CALL_OW 1
4601: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4602: LD_VAR 0 3
4606: PPUSH
4607: LD_VAR 0 2
4611: PUSH
4612: LD_INT 3
4614: ARRAY
4615: PUSH
4616: LD_INT 3
4618: PLUS
4619: PUSH
4620: LD_INT 6
4622: MOD
4623: PPUSH
4624: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4628: LD_VAR 0 3
4632: PPUSH
4633: LD_VAR 0 2
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: PPUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_INT 2
4649: ARRAY
4650: PPUSH
4651: CALL_OW 428
4655: PPUSH
4656: CALL_OW 52
// end ;
4660: GO 4517
4662: POP
4663: POP
// for i := 1 to 2 do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_INT 2
4676: PUSH
4677: FOR_TO
4678: IFFALSE 4754
// begin PrepareEngineer ( false , Difficulty ) ;
4680: LD_INT 0
4682: PPUSH
4683: LD_OWVAR 67
4687: PPUSH
4688: CALL_OW 382
// un := CreateHuman ;
4692: LD_ADDR_VAR 0 3
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4702: LD_ADDR_EXP 47
4706: PUSH
4707: LD_EXP 47
4711: PPUSH
4712: LD_EXP 47
4716: PUSH
4717: LD_INT 1
4719: PLUS
4720: PPUSH
4721: LD_VAR 0 3
4725: PPUSH
4726: CALL_OW 1
4730: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 95
4738: PPUSH
4739: LD_INT 65
4741: PPUSH
4742: LD_INT 2
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 50
// end ;
4752: GO 4677
4754: POP
4755: POP
// end ;
4756: LD_VAR 0 1
4760: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4761: LD_INT 0
4763: PPUSH
4764: PPUSH
4765: PPUSH
// usTrapForces := [ ] ;
4766: LD_ADDR_EXP 48
4770: PUSH
4771: EMPTY
4772: ST_TO_ADDR
// uc_side := 1 ;
4773: LD_ADDR_OWVAR 20
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// uc_nation := 1 ;
4781: LD_ADDR_OWVAR 21
4785: PUSH
4786: LD_INT 1
4788: ST_TO_ADDR
// InitHC_All ( ) ;
4789: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4793: LD_INT 1
4795: PPUSH
4796: LD_OWVAR 67
4800: PPUSH
4801: CALL_OW 381
// un := CreateHuman ;
4805: LD_ADDR_VAR 0 3
4809: PUSH
4810: CALL_OW 44
4814: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4815: LD_ADDR_EXP 48
4819: PUSH
4820: LD_EXP 48
4824: PPUSH
4825: LD_VAR 0 3
4829: PPUSH
4830: CALL 54253 0 2
4834: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4835: LD_ADDR_VAR 0 2
4839: PUSH
4840: DOUBLE
4841: LD_INT 1
4843: DEC
4844: ST_TO_ADDR
4845: LD_INT 5
4847: PUSH
4848: LD_INT 6
4850: PUSH
4851: LD_INT 7
4853: PUSH
4854: LD_INT 8
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_OWVAR 67
4867: ARRAY
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4916
// begin PrepareSoldier ( false , Difficulty ) ;
4872: LD_INT 0
4874: PPUSH
4875: LD_OWVAR 67
4879: PPUSH
4880: CALL_OW 381
// un := CreateHuman ;
4884: LD_ADDR_VAR 0 3
4888: PUSH
4889: CALL_OW 44
4893: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4894: LD_ADDR_EXP 48
4898: PUSH
4899: LD_EXP 48
4903: PPUSH
4904: LD_VAR 0 3
4908: PPUSH
4909: CALL 54253 0 2
4913: ST_TO_ADDR
// end ;
4914: GO 4869
4916: POP
4917: POP
// for i := 1 to 2 do
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: DOUBLE
4924: LD_INT 1
4926: DEC
4927: ST_TO_ADDR
4928: LD_INT 2
4930: PUSH
4931: FOR_TO
4932: IFFALSE 4978
// begin PrepareScientist ( false , Difficulty ) ;
4934: LD_INT 0
4936: PPUSH
4937: LD_OWVAR 67
4941: PPUSH
4942: CALL_OW 384
// un := CreateHuman ;
4946: LD_ADDR_VAR 0 3
4950: PUSH
4951: CALL_OW 44
4955: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4956: LD_ADDR_EXP 48
4960: PUSH
4961: LD_EXP 48
4965: PPUSH
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL 54253 0 2
4975: ST_TO_ADDR
// end ;
4976: GO 4931
4978: POP
4979: POP
// end ;
4980: LD_VAR 0 1
4984: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4985: LD_EXP 46
4989: IFFALSE 5559
4991: GO 4993
4993: DISABLE
4994: LD_INT 0
4996: PPUSH
4997: PPUSH
4998: PPUSH
4999: PPUSH
5000: PPUSH
// begin enable ;
5001: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5002: LD_ADDR_VAR 0 3
5006: PUSH
5007: LD_INT 8
5009: PPUSH
5010: LD_INT 22
5012: PUSH
5013: LD_INT 1
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 21
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PPUSH
5034: CALL_OW 70
5038: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5039: LD_ADDR_VAR 0 4
5043: PUSH
5044: LD_EXP 46
5048: PPUSH
5049: LD_INT 25
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 72
5063: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5064: LD_ADDR_VAR 0 5
5068: PUSH
5069: LD_EXP 46
5073: PPUSH
5074: LD_INT 25
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: CALL_OW 72
5088: ST_TO_ADDR
// if eng then
5089: LD_VAR 0 4
5093: IFFALSE 5287
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5095: LD_VAR 0 3
5099: PPUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 24
5105: PUSH
5106: LD_INT 1000
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 72
5121: IFFALSE 5233
// begin for i in eng do
5123: LD_ADDR_VAR 0 1
5127: PUSH
5128: LD_VAR 0 4
5132: PUSH
5133: FOR_IN
5134: IFFALSE 5229
// if IsInUnit ( i ) then
5136: LD_VAR 0 1
5140: PPUSH
5141: CALL_OW 310
5145: IFFALSE 5158
// ComExit ( i ) else
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL 54651 0 1
5156: GO 5227
// if IsOk ( i ) and not HasTask ( i ) then
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 302
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 314
5177: NOT
5178: AND
5179: IFFALSE 5227
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5181: LD_VAR 0 1
5185: PPUSH
5186: LD_VAR 0 3
5190: PPUSH
5191: LD_INT 3
5193: PUSH
5194: LD_INT 24
5196: PUSH
5197: LD_INT 1000
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 72
5212: PPUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: CALL_OW 74
5222: PPUSH
5223: CALL_OW 130
5227: GO 5133
5229: POP
5230: POP
// end else
5231: GO 5287
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_INT 30
5240: PUSH
5241: LD_INT 0
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 72
5252: IFFALSE 5287
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5254: LD_VAR 0 4
5258: PPUSH
5259: LD_VAR 0 3
5263: PPUSH
5264: LD_INT 30
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL_OW 72
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5287: LD_VAR 0 5
5291: PPUSH
5292: LD_INT 50
5294: PUSH
5295: EMPTY
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: PUSH
5303: LD_INT 18
5305: PPUSH
5306: LD_INT 81
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: CALL_OW 70
5320: PUSH
5321: LD_INT 1
5323: GREATER
5324: AND
5325: PUSH
5326: LD_INT 18
5328: PPUSH
5329: LD_INT 22
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 70
5343: NOT
5344: AND
5345: IFFALSE 5399
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5347: LD_ADDR_VAR 0 1
5351: PUSH
5352: LD_VAR 0 5
5356: PPUSH
5357: LD_INT 50
5359: PUSH
5360: EMPTY
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: PUSH
5368: FOR_IN
5369: IFFALSE 5397
// begin ComExit ( i ) ;
5371: LD_VAR 0 1
5375: PPUSH
5376: CALL 54651 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 46
5387: PPUSH
5388: LD_INT 62
5390: PPUSH
5391: CALL_OW 174
// end ;
5395: GO 5368
5397: POP
5398: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5399: LD_INT 18
5401: PPUSH
5402: LD_INT 81
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 70
5416: NOT
5417: PUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 54
5428: PUSH
5429: EMPTY
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 50
5438: PUSH
5439: EMPTY
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 72
5450: AND
5451: PUSH
5452: LD_VAR 0 3
5456: PPUSH
5457: LD_INT 30
5459: PUSH
5460: LD_INT 31
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 58
5469: PUSH
5470: EMPTY
5471: LIST
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL_OW 72
5481: AND
5482: IFFALSE 5559
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5484: LD_VAR 0 5
5488: PPUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 50
5504: PUSH
5505: EMPTY
5506: LIST
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PPUSH
5512: CALL_OW 72
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 31
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 58
5538: PUSH
5539: EMPTY
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PPUSH
5546: CALL_OW 72
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: CALL_OW 120
// end ;
5559: PPOPN 5
5561: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5562: LD_EXP 47
5566: IFFALSE 5837
5568: GO 5570
5570: DISABLE
5571: LD_INT 0
5573: PPUSH
5574: PPUSH
5575: PPUSH
// begin enable ;
5576: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: LD_INT 15
5584: PPUSH
5585: LD_INT 22
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 21
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PPUSH
5609: CALL_OW 70
5613: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5614: LD_ADDR_VAR 0 3
5618: PUSH
5619: LD_EXP 47
5623: PPUSH
5624: LD_INT 25
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PPUSH
5634: CALL_OW 72
5638: ST_TO_ADDR
// if eng then
5639: LD_VAR 0 3
5643: IFFALSE 5837
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 3
5652: PUSH
5653: LD_INT 24
5655: PUSH
5656: LD_INT 1000
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PPUSH
5667: CALL_OW 72
5671: IFFALSE 5783
// begin for i in eng do
5673: LD_ADDR_VAR 0 1
5677: PUSH
5678: LD_VAR 0 3
5682: PUSH
5683: FOR_IN
5684: IFFALSE 5779
// if IsInUnit ( i ) then
5686: LD_VAR 0 1
5690: PPUSH
5691: CALL_OW 310
5695: IFFALSE 5708
// ComExit ( i ) else
5697: LD_VAR 0 1
5701: PPUSH
5702: CALL 54651 0 1
5706: GO 5777
// if IsOk ( i ) and not HasTask ( i ) then
5708: LD_VAR 0 1
5712: PPUSH
5713: CALL_OW 302
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 314
5727: NOT
5728: AND
5729: IFFALSE 5777
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 24
5746: PUSH
5747: LD_INT 1000
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PPUSH
5758: CALL_OW 72
5762: PPUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: CALL_OW 74
5772: PPUSH
5773: CALL_OW 130
5777: GO 5683
5779: POP
5780: POP
// end else
5781: GO 5837
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_INT 30
5790: PUSH
5791: LD_INT 0
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 72
5802: IFFALSE 5837
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5804: LD_VAR 0 3
5808: PPUSH
5809: LD_VAR 0 2
5813: PPUSH
5814: LD_INT 30
5816: PUSH
5817: LD_INT 0
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 72
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 120
// end ; end_of_file
5837: PPOPN 3
5839: END
// export function Action ; var i , tmp ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
// InGameOn ;
5845: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5849: LD_INT 112
5851: PPUSH
5852: LD_INT 107
5854: PPUSH
5855: LD_INT 3
5857: PPUSH
5858: LD_INT 12
5860: NEG
5861: PPUSH
5862: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5866: LD_INT 121
5868: PPUSH
5869: LD_INT 113
5871: PPUSH
5872: CALL_OW 86
// tmp := PrepareBurlak ;
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: CALL 1244 0 0
5885: ST_TO_ADDR
// for i in tmp do
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_VAR 0 3
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5950
// begin SetDir ( i , 5 ) ;
5899: LD_VAR 0 2
5903: PPUSH
5904: LD_INT 5
5906: PPUSH
5907: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5911: LD_VAR 0 2
5915: PPUSH
5916: LD_INT 3
5918: PPUSH
5919: LD_INT 0
5921: PPUSH
5922: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5926: LD_VAR 0 2
5930: PPUSH
5931: LD_INT 121
5933: PPUSH
5934: LD_INT 111
5936: PPUSH
5937: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5941: LD_INT 28
5943: PPUSH
5944: CALL_OW 67
// end ;
5948: GO 5896
5950: POP
5951: POP
// CenterOnUnits ( Kurin ) ;
5952: LD_EXP 38
5956: PPUSH
5957: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5961: LD_EXP 34
5965: PPUSH
5966: LD_EXP 38
5970: PPUSH
5971: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5975: LD_INT 35
5977: PPUSH
5978: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5982: LD_EXP 34
5986: PPUSH
5987: LD_EXP 38
5991: PPUSH
5992: CALL_OW 296
5996: PUSH
5997: LD_INT 6
5999: LESS
6000: IFFALSE 5975
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6002: LD_EXP 34
6006: PUSH
6007: LD_EXP 35
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PPUSH
6016: LD_EXP 38
6020: PPUSH
6021: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_VAR 0 3
6034: PUSH
6035: LD_EXP 34
6039: PUSH
6040: LD_EXP 35
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: DIFF
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6117
// if GetClass ( i ) = class_soldier then
6053: LD_VAR 0 2
6057: PPUSH
6058: CALL_OW 257
6062: PUSH
6063: LD_INT 1
6065: EQUAL
6066: IFFALSE 6103
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 95
6075: PUSH
6076: LD_INT 209
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: LD_INT 2
6090: MOD
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: ARRAY
6096: PPUSH
6097: CALL_OW 120
6101: GO 6115
// ComEnterUnit ( i , ru_lab ) ;
6103: LD_VAR 0 2
6107: PPUSH
6108: LD_INT 83
6110: PPUSH
6111: CALL_OW 120
6115: GO 6050
6117: POP
6118: POP
// Say ( Kurin , D1-Kur-1 ) ;
6119: LD_EXP 38
6123: PPUSH
6124: LD_STRING D1-Kur-1
6126: PPUSH
6127: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6131: LD_EXP 34
6135: PPUSH
6136: LD_STRING D1-Bur-1
6138: PPUSH
6139: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6143: LD_INT 10
6145: PPUSH
6146: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6150: LD_EXP 38
6154: PPUSH
6155: LD_STRING D1-Kur-2
6157: PPUSH
6158: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6162: LD_EXP 39
6166: PPUSH
6167: CALL 54651 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6171: LD_EXP 39
6175: PPUSH
6176: LD_INT 115
6178: PPUSH
6179: LD_INT 108
6181: PPUSH
6182: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6186: LD_EXP 39
6190: PPUSH
6191: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6195: LD_EXP 34
6199: PPUSH
6200: LD_STRING D1-Bur-2
6202: PPUSH
6203: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6207: LD_EXP 38
6211: PPUSH
6212: LD_STRING D1-Kur-3
6214: PPUSH
6215: CALL_OW 88
// if Gnyevko then
6219: LD_EXP 35
6223: IFFALSE 6237
// Say ( Kurin , D1-Kur-3a ) ;
6225: LD_EXP 38
6229: PPUSH
6230: LD_STRING D1-Kur-3a
6232: PPUSH
6233: CALL_OW 88
// InGameOff ;
6237: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6241: LD_STRING M1
6243: PPUSH
6244: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6248: LD_INT 112
6250: PPUSH
6251: LD_INT 107
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6261: LD_INT 66
6263: PPUSH
6264: LD_INT 99
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 7
6272: NEG
6273: PPUSH
6274: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6278: LD_INT 66
6280: PPUSH
6281: LD_INT 99
6283: PPUSH
6284: LD_INT 3
6286: PPUSH
6287: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6291: LD_EXP 39
6295: PPUSH
6296: LD_INT 3
6298: PPUSH
6299: CALL_OW 235
// if Gnyevko then
6303: LD_EXP 35
6307: IFFALSE 6321
// SetSide ( Gnyevko , 3 ) ;
6309: LD_EXP 35
6313: PPUSH
6314: LD_INT 3
6316: PPUSH
6317: CALL_OW 235
// SaveForQuickRestart ;
6321: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6325: LD_EXP 38
6329: PPUSH
6330: LD_INT 71
6332: PPUSH
6333: CALL_OW 120
// wait ( 0 0$2 ) ;
6337: LD_INT 70
6339: PPUSH
6340: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6344: LD_EXP 43
6348: PUSH
6349: LD_INT 2
6351: ARRAY
6352: PPUSH
6353: CALL 54651 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6357: LD_EXP 43
6361: PUSH
6362: LD_INT 2
6364: ARRAY
6365: PPUSH
6366: LD_INT 98
6368: PPUSH
6369: LD_INT 98
6371: PPUSH
6372: CALL_OW 428
6376: PPUSH
6377: CALL_OW 180
// wait ( 0 0$12 ) ;
6381: LD_INT 420
6383: PPUSH
6384: CALL_OW 67
// kurinDontWannaTalk := true ;
6388: LD_ADDR_EXP 5
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// end ;
6396: LD_VAR 0 1
6400: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6401: LD_EXP 5
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 91
6418: PUSH
6419: LD_INT 71
6421: PUSH
6422: LD_INT 8
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PPUSH
6434: CALL_OW 69
6438: AND
6439: IFFALSE 6626
6441: GO 6443
6443: DISABLE
6444: LD_INT 0
6446: PPUSH
6447: PPUSH
// begin enable ;
6448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_INT 22
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 91
6466: PUSH
6467: LD_INT 71
6469: PUSH
6470: LD_INT 14
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 69
6486: ST_TO_ADDR
// InGameOn ;
6487: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6491: LD_INT 116
6493: PPUSH
6494: LD_INT 107
6496: PPUSH
6497: LD_INT 3
6499: PPUSH
6500: LD_INT 3
6502: PPUSH
6503: CALL_OW 330
// ComExit ( Kurin ) ;
6507: LD_EXP 38
6511: PPUSH
6512: CALL 54651 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6516: LD_EXP 38
6520: PPUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 1
6528: ARRAY
6529: PPUSH
6530: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6534: LD_EXP 38
6538: PPUSH
6539: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6543: LD_VAR 0 2
6547: PPUSH
6548: LD_INT 87
6550: PPUSH
6551: LD_INT 99
6553: PPUSH
6554: CALL_OW 111
// if kirovHasTank then
6558: LD_EXP 6
6562: IFFALSE 6578
// Say ( Kurin , D1a-Kur-1a ) else
6564: LD_EXP 38
6568: PPUSH
6569: LD_STRING D1a-Kur-1a
6571: PPUSH
6572: CALL_OW 88
6576: GO 6590
// Say ( Kurin , D1a-Kur-1 ) ;
6578: LD_EXP 38
6582: PPUSH
6583: LD_STRING D1a-Kur-1
6585: PPUSH
6586: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6590: LD_EXP 38
6594: PPUSH
6595: LD_INT 71
6597: PPUSH
6598: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6602: LD_INT 116
6604: PPUSH
6605: LD_INT 107
6607: PPUSH
6608: LD_INT 3
6610: PPUSH
6611: CALL_OW 331
// wait ( 0 0$3 ) ;
6615: LD_INT 105
6617: PPUSH
6618: CALL_OW 67
// InGameOff ;
6622: CALL_OW 9
// end ;
6626: PPOPN 2
6628: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6629: LD_INT 22
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 95
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 69
6657: PUSH
6658: LD_EXP 7
6662: AND
6663: IFFALSE 7002
6665: GO 6667
6667: DISABLE
6668: LD_INT 0
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
// begin enable ;
6675: ENABLE
// blockNorth := false ;
6676: LD_ADDR_EXP 7
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// InGameOn ;
6684: CALL_OW 8
// DialogueOn ;
6688: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6692: LD_ADDR_VAR 0 2
6696: PUSH
6697: LD_INT 22
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 95
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6726: LD_EXP 39
6730: PUSH
6731: LD_VAR 0 2
6735: IN
6736: PUSH
6737: LD_EXP 39
6741: PPUSH
6742: CALL_OW 302
6746: AND
6747: IFFALSE 6763
// Say ( Kovalyuk , D1b-Kov-1 ) else
6749: LD_EXP 39
6753: PPUSH
6754: LD_STRING D1b-Kov-1
6756: PPUSH
6757: CALL_OW 88
6761: GO 6798
// if Burlak in tmp and IsOk ( Burlak ) then
6763: LD_EXP 34
6767: PUSH
6768: LD_VAR 0 2
6772: IN
6773: PUSH
6774: LD_EXP 34
6778: PPUSH
6779: CALL_OW 302
6783: AND
6784: IFFALSE 6798
// Say ( Burlak , D1b-Bur-1 ) ;
6786: LD_EXP 34
6790: PPUSH
6791: LD_STRING D1b-Bur-1
6793: PPUSH
6794: CALL_OW 88
// DialogueOff ;
6798: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6802: LD_INT 22
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 3
6814: PUSH
6815: LD_INT 21
6817: PUSH
6818: LD_INT 3
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PPUSH
6838: CALL_OW 141
// for i in tmp do
6842: LD_ADDR_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: FOR_IN
6853: IFFALSE 6981
// begin d := rand ( 2 , 3 ) ;
6855: LD_ADDR_VAR 0 5
6859: PUSH
6860: LD_INT 2
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: CALL_OW 12
6870: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: LD_VAR 0 1
6880: PPUSH
6881: CALL_OW 250
6885: PPUSH
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_INT 6
6893: PPUSH
6894: CALL_OW 272
6898: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6899: LD_ADDR_VAR 0 4
6903: PUSH
6904: LD_VAR 0 1
6908: PPUSH
6909: CALL_OW 251
6913: PPUSH
6914: LD_VAR 0 5
6918: PPUSH
6919: LD_INT 6
6921: PPUSH
6922: CALL_OW 273
6926: ST_TO_ADDR
// if ValidHex ( x , y ) then
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_VAR 0 4
6936: PPUSH
6937: CALL_OW 488
6941: IFFALSE 6964
// ComMoveXY ( i , x , y ) else
6943: LD_VAR 0 1
6947: PPUSH
6948: LD_VAR 0 3
6952: PPUSH
6953: LD_VAR 0 4
6957: PPUSH
6958: CALL_OW 111
6962: GO 6979
// ComMoveXY ( i , 79 , 85 ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_INT 79
6971: PPUSH
6972: LD_INT 85
6974: PPUSH
6975: CALL_OW 111
// end ;
6979: GO 6852
6981: POP
6982: POP
// wait ( 0 0$5 ) ;
6983: LD_INT 175
6985: PPUSH
6986: CALL_OW 67
// InGameOff ;
6990: CALL_OW 9
// blockNorth := true ;
6994: LD_ADDR_EXP 7
6998: PUSH
6999: LD_INT 1
7001: ST_TO_ADDR
// end ;
7002: PPOPN 5
7004: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7005: LD_EXP 44
7009: PPUSH
7010: LD_INT 101
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PPUSH
7020: CALL_OW 72
7024: PUSH
7025: LD_EXP 4
7029: NOT
7030: AND
7031: IFFALSE 7433
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7043: LD_ADDR_VAR 0 5
7047: PUSH
7048: LD_EXP 44
7052: PPUSH
7053: LD_EXP 34
7057: PPUSH
7058: CALL_OW 74
7062: ST_TO_ADDR
// InGameOn ;
7063: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7067: LD_VAR 0 5
7071: PPUSH
7072: CALL_OW 250
7076: PPUSH
7077: LD_VAR 0 5
7081: PPUSH
7082: CALL_OW 251
7086: PPUSH
7087: LD_INT 3
7089: PPUSH
7090: LD_INT 6
7092: PPUSH
7093: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7097: LD_VAR 0 5
7101: PPUSH
7102: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7106: LD_VAR 0 5
7110: PPUSH
7111: LD_EXP 34
7115: PPUSH
7116: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7120: LD_VAR 0 5
7124: PPUSH
7125: LD_STRING D2-RSol1-1
7127: PPUSH
7128: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 5
7141: PPUSH
7142: CALL_OW 250
7146: PPUSH
7147: LD_VAR 0 5
7151: PPUSH
7152: CALL_OW 254
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: CALL_OW 272
7164: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7165: LD_ADDR_VAR 0 4
7169: PUSH
7170: LD_VAR 0 5
7174: PPUSH
7175: CALL_OW 251
7179: PPUSH
7180: LD_VAR 0 5
7184: PPUSH
7185: CALL_OW 254
7189: PPUSH
7190: LD_INT 3
7192: PPUSH
7193: CALL_OW 273
7197: ST_TO_ADDR
// if ValidHex ( x , y ) then
7198: LD_VAR 0 3
7202: PPUSH
7203: LD_VAR 0 4
7207: PPUSH
7208: CALL_OW 488
7212: IFFALSE 7244
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7214: LD_EXP 35
7218: PUSH
7219: LD_EXP 39
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: LD_VAR 0 4
7237: PPUSH
7238: CALL_OW 111
7242: GO 7267
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7244: LD_EXP 35
7248: PUSH
7249: LD_EXP 39
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7267: LD_EXP 34
7271: PPUSH
7272: LD_VAR 0 5
7276: PPUSH
7277: CALL_OW 112
// p := 0 ;
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7289: LD_INT 35
7291: PPUSH
7292: CALL_OW 67
// p := p + 1 ;
7296: LD_ADDR_VAR 0 2
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_INT 1
7308: PLUS
7309: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 10
7317: GREATER
7318: PUSH
7319: LD_EXP 34
7323: PPUSH
7324: LD_VAR 0 5
7328: PPUSH
7329: CALL_OW 296
7333: PUSH
7334: LD_INT 6
7336: LESS
7337: OR
7338: IFFALSE 7289
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7340: LD_EXP 34
7344: PUSH
7345: LD_EXP 35
7349: PUSH
7350: LD_EXP 39
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: PPUSH
7360: LD_VAR 0 5
7364: PPUSH
7365: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7369: LD_EXP 34
7373: PPUSH
7374: LD_STRING D2-Bur-1
7376: PPUSH
7377: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7381: LD_VAR 0 5
7385: PPUSH
7386: LD_STRING D2-RSol1-2
7388: PPUSH
7389: CALL_OW 88
// ComHold ( nearestGuard ) ;
7393: LD_VAR 0 5
7397: PPUSH
7398: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7402: LD_VAR 0 5
7406: PPUSH
7407: CALL_OW 250
7411: PPUSH
7412: LD_VAR 0 5
7416: PPUSH
7417: CALL_OW 251
7421: PPUSH
7422: LD_INT 3
7424: PPUSH
7425: CALL_OW 331
// InGameOff ;
7429: CALL_OW 9
// end ;
7433: PPOPN 5
7435: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7436: LD_EXP 34
7440: PPUSH
7441: LD_EXP 40
7445: PPUSH
7446: CALL_OW 296
7450: PUSH
7451: LD_INT 10
7453: LESS
7454: PUSH
7455: LD_INT 3
7457: PPUSH
7458: LD_EXP 40
7462: PPUSH
7463: CALL_OW 292
7467: AND
7468: IFFALSE 7824
7470: GO 7472
7472: DISABLE
7473: LD_INT 0
7475: PPUSH
// begin InGameOn ;
7476: CALL_OW 8
// beriaVisited := true ;
7480: LD_ADDR_EXP 4
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7488: LD_EXP 34
7492: PPUSH
7493: LD_EXP 40
7497: PPUSH
7498: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7502: LD_EXP 35
7506: PUSH
7507: LD_EXP 39
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: LD_INT 68
7518: PPUSH
7519: LD_INT 99
7521: PPUSH
7522: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7526: LD_EXP 40
7530: PPUSH
7531: LD_EXP 34
7535: PPUSH
7536: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7540: LD_EXP 40
7544: PPUSH
7545: LD_STRING D2-Pla-2
7547: PPUSH
7548: CALL_OW 88
// p := 0 ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7560: LD_INT 35
7562: PPUSH
7563: CALL_OW 67
// p := p + 1 ;
7567: LD_ADDR_VAR 0 1
7571: PUSH
7572: LD_VAR 0 1
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7581: LD_EXP 34
7585: PPUSH
7586: LD_EXP 40
7590: PPUSH
7591: CALL_OW 296
7595: PUSH
7596: LD_INT 6
7598: LESS
7599: PUSH
7600: LD_VAR 0 1
7604: PUSH
7605: LD_INT 8
7607: GREATER
7608: OR
7609: IFFALSE 7560
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7611: LD_EXP 34
7615: PUSH
7616: LD_EXP 35
7620: PUSH
7621: LD_EXP 39
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: PPUSH
7631: LD_EXP 40
7635: PPUSH
7636: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7640: LD_EXP 34
7644: PPUSH
7645: LD_STRING D2-Bur-2
7647: PPUSH
7648: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7652: LD_INT 6
7654: PPUSH
7655: LD_INT 3
7657: PPUSH
7658: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7662: LD_EXP 40
7666: PPUSH
7667: LD_STRING D2-Pla-3
7669: PPUSH
7670: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7674: LD_EXP 34
7678: PPUSH
7679: LD_STRING D2-Bur-3
7681: PPUSH
7682: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7686: LD_EXP 40
7690: PPUSH
7691: LD_STRING D2-Pla-4
7693: PPUSH
7694: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7698: LD_EXP 34
7702: PPUSH
7703: LD_STRING D2-Bur-4
7705: PPUSH
7706: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7710: LD_EXP 40
7714: PPUSH
7715: LD_STRING D2-Pla-5
7717: PPUSH
7718: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7722: LD_INT 1
7724: PUSH
7725: LD_INT 2
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: LD_INT 4
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL 7827 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7744: LD_EXP 40
7748: PPUSH
7749: LD_STRING D3-Pla-1
7751: PPUSH
7752: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7756: LD_EXP 34
7760: PPUSH
7761: LD_STRING D3-Bur-1
7763: PPUSH
7764: CALL_OW 88
// InGameOff ;
7768: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7772: LD_STRING M2a
7774: PPUSH
7775: CALL_OW 337
// SetSide ( beria , 3 ) ;
7779: LD_INT 106
7781: PPUSH
7782: LD_INT 3
7784: PPUSH
7785: CALL_OW 235
// if not Gnyevko then
7789: LD_EXP 35
7793: NOT
7794: IFFALSE 7815
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7796: LD_INT 106
7798: PPUSH
7799: CALL_OW 313
7803: PUSH
7804: LD_INT 1
7806: ARRAY
7807: PPUSH
7808: LD_INT 3
7810: PPUSH
7811: CALL_OW 235
// ComFree ( Platonov ) ;
7815: LD_EXP 40
7819: PPUSH
7820: CALL_OW 139
// end ;
7824: PPOPN 1
7826: END
// function AskPlatonov ( questions ) ; var q ; begin
7827: LD_INT 0
7829: PPUSH
7830: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7831: LD_ADDR_VAR 0 3
7835: PUSH
7836: LD_STRING QMoreInfo
7838: PPUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 98
7848: ST_TO_ADDR
// case q of 1 :
7849: LD_VAR 0 3
7853: PUSH
7854: LD_INT 1
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7889
7862: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7863: LD_EXP 34
7867: PPUSH
7868: LD_STRING D2a-Bur-1
7870: PPUSH
7871: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7875: LD_EXP 40
7879: PPUSH
7880: LD_STRING D2a-Pla-1
7882: PPUSH
7883: CALL_OW 88
// end ; 2 :
7887: GO 7960
7889: LD_INT 2
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 7924
7897: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7898: LD_EXP 34
7902: PPUSH
7903: LD_STRING D2b-Bur-1
7905: PPUSH
7906: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7910: LD_EXP 40
7914: PPUSH
7915: LD_STRING D2b-Pla-1
7917: PPUSH
7918: CALL_OW 88
// end ; 3 :
7922: GO 7960
7924: LD_INT 3
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7959
7932: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7933: LD_EXP 34
7937: PPUSH
7938: LD_STRING D2c-Bur-1
7940: PPUSH
7941: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7945: LD_EXP 40
7949: PPUSH
7950: LD_STRING D2c-Pla-1
7952: PPUSH
7953: CALL_OW 88
// end ; end ;
7957: GO 7960
7959: POP
// if q < 4 and questions > 2 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 4
7967: LESS
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: LD_INT 2
7976: GREATER
7977: AND
7978: IFFALSE 7995
// AskPlatonov ( questions diff q ) ;
7980: LD_VAR 0 1
7984: PUSH
7985: LD_VAR 0 3
7989: DIFF
7990: PPUSH
7991: CALL 7827 0 1
// end ;
7995: LD_VAR 0 2
7999: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8000: LD_INT 0
8002: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8003: LD_EXP 40
8007: PPUSH
8008: LD_VAR 0 1
8012: PPUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8022: LD_INT 35
8024: PPUSH
8025: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8029: LD_EXP 40
8033: PPUSH
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL_OW 297
8048: PUSH
8049: LD_INT 5
8051: LESS
8052: PUSH
8053: LD_VAR 0 1
8057: PPUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 283
8067: PUSH
8068: LD_INT 1
8070: EQUAL
8071: AND
8072: IFFALSE 8022
// ComStop ( Platonov ) ;
8074: LD_EXP 40
8078: PPUSH
8079: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8083: LD_EXP 40
8087: PPUSH
8088: LD_STRING D4-Pla-1
8090: PPUSH
8091: CALL_OW 88
// end ;
8095: LD_VAR 0 3
8099: RET
// every 0 0$2 trigger hasLab do
8100: LD_EXP 9
8104: IFFALSE 8168
8106: GO 8108
8108: DISABLE
// begin DialogueOn ;
8109: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8113: LD_EXP 34
8117: PPUSH
8118: LD_STRING D5a-Bur-1
8120: PPUSH
8121: CALL_OW 88
// if hasWorkshop then
8125: LD_EXP 10
8129: IFFALSE 8145
// Say ( Platonov , D5a-Pla-1 ) else
8131: LD_EXP 40
8135: PPUSH
8136: LD_STRING D5a-Pla-1
8138: PPUSH
8139: CALL_OW 88
8143: GO 8157
// Say ( Platonov , D5a-Pla-1a ) ;
8145: LD_EXP 40
8149: PPUSH
8150: LD_STRING D5a-Pla-1a
8152: PPUSH
8153: CALL_OW 88
// DialogueOff ;
8157: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8161: LD_STRING M2b
8163: PPUSH
8164: CALL_OW 337
// end ;
8168: END
// every 0 0$2 trigger hasWorkshop do
8169: LD_EXP 10
8173: IFFALSE 8237
8175: GO 8177
8177: DISABLE
// begin DialogueOn ;
8178: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8182: LD_EXP 34
8186: PPUSH
8187: LD_STRING D5b-Bur-1
8189: PPUSH
8190: CALL_OW 88
// if hasLab then
8194: LD_EXP 9
8198: IFFALSE 8214
// Say ( Platonov , D5b-Pla-1 ) else
8200: LD_EXP 40
8204: PPUSH
8205: LD_STRING D5b-Pla-1
8207: PPUSH
8208: CALL_OW 88
8212: GO 8226
// Say ( Platonov , D5b-Pla-1a ) ;
8214: LD_EXP 40
8218: PPUSH
8219: LD_STRING D5b-Pla-1a
8221: PPUSH
8222: CALL_OW 88
// DialogueOff ;
8226: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8230: LD_STRING M2c
8232: PPUSH
8233: CALL_OW 337
// end ;
8237: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8238: LD_EXP 9
8242: PUSH
8243: LD_EXP 10
8247: AND
8248: IFFALSE 8342
8250: GO 8252
8252: DISABLE
// begin DialogueOn ;
8253: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8257: LD_INT 47
8259: PPUSH
8260: LD_INT 3
8262: PPUSH
8263: CALL_OW 321
8267: PUSH
8268: LD_INT 2
8270: EQUAL
8271: IFFALSE 8299
// begin Say ( Burlak , D7b-Bur-1 ) ;
8273: LD_EXP 34
8277: PPUSH
8278: LD_STRING D7b-Bur-1
8280: PPUSH
8281: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8285: LD_EXP 40
8289: PPUSH
8290: LD_STRING D7b-Pla-1
8292: PPUSH
8293: CALL_OW 88
// end else
8297: GO 8323
// begin Say ( Burlak , D7a-Bur-1 ) ;
8299: LD_EXP 34
8303: PPUSH
8304: LD_STRING D7a-Bur-1
8306: PPUSH
8307: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8311: LD_EXP 40
8315: PPUSH
8316: LD_STRING D7a-Pla-1
8318: PPUSH
8319: CALL_OW 88
// end ; DialogueOff ;
8323: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8327: LD_STRING M2
8329: PPUSH
8330: CALL_OW 337
// hasToBuildTank := true ;
8334: LD_ADDR_EXP 11
8338: PUSH
8339: LD_INT 1
8341: ST_TO_ADDR
// end ;
8342: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8343: LD_EXP 4
8347: PUSH
8348: LD_EXP 9
8352: NOT
8353: PUSH
8354: LD_EXP 10
8358: NOT
8359: OR
8360: PUSH
8361: LD_EXP 11
8365: OR
8366: AND
8367: PUSH
8368: LD_INT 22
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 91
8383: PUSH
8384: LD_INT 106
8386: PUSH
8387: LD_INT 32
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 69
8407: AND
8408: IFFALSE 8517
8410: GO 8412
8412: DISABLE
8413: LD_INT 0
8415: PPUSH
// begin enable ;
8416: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8417: LD_ADDR_VAR 0 1
8421: PUSH
8422: LD_INT 22
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 91
8437: PUSH
8438: LD_INT 106
8440: PUSH
8441: LD_INT 32
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: ST_TO_ADDR
// InGameOn ;
8462: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 1
8473: ARRAY
8474: PPUSH
8475: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8479: LD_VAR 0 1
8483: PPUSH
8484: LD_INT 66
8486: PPUSH
8487: LD_INT 99
8489: PPUSH
8490: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8494: LD_EXP 40
8498: PPUSH
8499: LD_STRING D8-Pla-1
8501: PPUSH
8502: CALL_OW 88
// wait ( 0 0$3 ) ;
8506: LD_INT 105
8508: PPUSH
8509: CALL_OW 67
// InGameOff ;
8513: CALL_OW 9
// end ;
8517: PPOPN 1
8519: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8520: LD_INT 21
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 23
8535: PUSH
8536: LD_INT 3
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: LD_INT 30
8548: PUSH
8549: LD_INT 4
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 30
8558: PUSH
8559: LD_INT 31
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 70
8580: PUSH
8581: LD_EXP 31
8585: NOT
8586: AND
8587: IFFALSE 8798
8589: GO 8591
8591: DISABLE
8592: LD_INT 0
8594: PPUSH
// begin enable ;
8595: ENABLE
// InGameOn ;
8596: CALL_OW 8
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8600: LD_ADDR_VAR 0 1
8604: PUSH
8605: LD_INT 21
8607: PPUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 3
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 23
8620: PUSH
8621: LD_INT 3
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 2
8630: PUSH
8631: LD_INT 30
8633: PUSH
8634: LD_INT 4
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 30
8643: PUSH
8644: LD_INT 31
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: PPUSH
8661: CALL_OW 70
8665: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
8666: LD_EXP 40
8670: PPUSH
8671: LD_VAR 0 1
8675: PUSH
8676: LD_INT 1
8678: ARRAY
8679: PPUSH
8680: CALL_OW 112
// wait ( 0 0$2 ) ;
8684: LD_INT 70
8686: PPUSH
8687: CALL_OW 67
// ComHold ( Platonov ) ;
8691: LD_EXP 40
8695: PPUSH
8696: CALL_OW 140
// Say ( Platonov , D6-Pla-1 ) ;
8700: LD_EXP 40
8704: PPUSH
8705: LD_STRING D6-Pla-1
8707: PPUSH
8708: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8712: LD_EXP 34
8716: PPUSH
8717: LD_STRING D6-Bur-1
8719: PPUSH
8720: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8724: LD_VAR 0 1
8728: PUSH
8729: LD_INT 1
8731: ARRAY
8732: PPUSH
8733: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8737: LD_VAR 0 1
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PPUSH
8746: CALL_OW 266
8750: PUSH
8751: LD_INT 31
8753: EQUAL
8754: IFFALSE 8776
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8756: LD_INT 106
8758: PPUSH
8759: CALL_OW 274
8763: PPUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_INT 10
8769: PPUSH
8770: CALL_OW 276
8774: GO 8794
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8776: LD_INT 106
8778: PPUSH
8779: CALL_OW 274
8783: PPUSH
8784: LD_INT 1
8786: PPUSH
8787: LD_INT 30
8789: PPUSH
8790: CALL_OW 276
// InGameOff ;
8794: CALL_OW 9
// end ;
8798: PPOPN 1
8800: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8801: LD_EXP 4
8805: PUSH
8806: LD_INT 21
8808: PPUSH
8809: LD_INT 22
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 23
8821: PUSH
8822: LD_INT 3
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 21
8831: PUSH
8832: LD_INT 3
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: PPUSH
8844: CALL_OW 71
8848: AND
8849: IFFALSE 9106
8851: GO 8853
8853: DISABLE
8854: LD_INT 0
8856: PPUSH
8857: PPUSH
// begin enable ;
8858: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8859: LD_ADDR_VAR 0 1
8863: PUSH
8864: LD_INT 21
8866: PPUSH
8867: LD_INT 22
8869: PUSH
8870: LD_INT 3
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 23
8879: PUSH
8880: LD_INT 3
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 21
8889: PUSH
8890: LD_INT 3
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: PPUSH
8902: CALL_OW 71
8906: PUSH
8907: LD_INT 1
8909: ARRAY
8910: ST_TO_ADDR
// InGameOn ;
8911: CALL_OW 8
// ComMoveUnit ( Platonov , tmp ) ;
8915: LD_EXP 40
8919: PPUSH
8920: LD_VAR 0 1
8924: PPUSH
8925: CALL_OW 112
// Say ( Platonov , DPlatAngry ) ;
8929: LD_EXP 40
8933: PPUSH
8934: LD_STRING DPlatAngry
8936: PPUSH
8937: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8941: LD_EXP 34
8945: PPUSH
8946: LD_STRING D6-Bur-1
8948: PPUSH
8949: CALL_OW 88
// RemoveUnit ( tmp ) ;
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 64
// InGameOff ;
8962: CALL_OW 9
// amount := 0 ;
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: LD_INT 0
8973: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
8974: LD_VAR 0 1
8978: PPUSH
8979: CALL_OW 266
8983: PUSH
8984: LD_INT 31
8986: DOUBLE
8987: EQUAL
8988: IFTRUE 8992
8990: GO 9003
8992: POP
// amount := 10 ; b_lab :
8993: LD_ADDR_VAR 0 2
8997: PUSH
8998: LD_INT 10
9000: ST_TO_ADDR
9001: GO 9080
9003: LD_INT 6
9005: DOUBLE
9006: EQUAL
9007: IFTRUE 9011
9009: GO 9022
9011: POP
// amount := 20 ; b_armoury :
9012: LD_ADDR_VAR 0 2
9016: PUSH
9017: LD_INT 20
9019: ST_TO_ADDR
9020: GO 9080
9022: LD_INT 4
9024: DOUBLE
9025: EQUAL
9026: IFTRUE 9030
9028: GO 9041
9030: POP
// amount := 30 ; b_workshop :
9031: LD_ADDR_VAR 0 2
9035: PUSH
9036: LD_INT 30
9038: ST_TO_ADDR
9039: GO 9080
9041: LD_INT 2
9043: DOUBLE
9044: EQUAL
9045: IFTRUE 9049
9047: GO 9060
9049: POP
// amount := 40 ; b_oil_power :
9050: LD_ADDR_VAR 0 2
9054: PUSH
9055: LD_INT 40
9057: ST_TO_ADDR
9058: GO 9080
9060: LD_INT 26
9062: DOUBLE
9063: EQUAL
9064: IFTRUE 9068
9066: GO 9079
9068: POP
// amount := 20 ; end ;
9069: LD_ADDR_VAR 0 2
9073: PUSH
9074: LD_INT 20
9076: ST_TO_ADDR
9077: GO 9080
9079: POP
// if amount then
9080: LD_VAR 0 2
9084: IFFALSE 9106
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9086: LD_INT 106
9088: PPUSH
9089: CALL_OW 274
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: LD_VAR 0 2
9101: PPUSH
9102: CALL_OW 276
// end ;
9106: PPOPN 2
9108: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do var Dickens ;
9109: LD_INT 22
9111: PUSH
9112: LD_INT 3
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: LD_INT 92
9121: PUSH
9122: LD_INT 112
9124: PUSH
9125: LD_INT 155
9127: PUSH
9128: LD_INT 8
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 69
9145: PUSH
9146: LD_INT 2
9148: LESS
9149: PUSH
9150: LD_EXP 34
9154: PPUSH
9155: LD_INT 112
9157: PPUSH
9158: LD_INT 155
9160: PPUSH
9161: CALL_OW 297
9165: PUSH
9166: LD_INT 8
9168: LESS
9169: AND
9170: IFFALSE 9404
9172: GO 9174
9174: DISABLE
9175: LD_INT 0
9177: PPUSH
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9178: LD_INT 112
9180: PPUSH
9181: LD_INT 155
9183: PPUSH
9184: LD_INT 3
9186: PPUSH
9187: LD_INT 4
9189: NEG
9190: PPUSH
9191: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9195: LD_INT 1
9197: PPUSH
9198: LD_EXP 34
9202: PPUSH
9203: CALL_OW 471
// uc_side := 1 ;
9207: LD_ADDR_OWVAR 20
9211: PUSH
9212: LD_INT 1
9214: ST_TO_ADDR
// uc_nation := 1 ;
9215: LD_ADDR_OWVAR 21
9219: PUSH
9220: LD_INT 1
9222: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9223: LD_ADDR_VAR 0 1
9227: PUSH
9228: LD_STRING Dickens
9230: PPUSH
9231: CALL_OW 25
9235: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9236: LD_VAR 0 1
9240: PPUSH
9241: LD_INT 112
9243: PPUSH
9244: LD_INT 155
9246: PPUSH
9247: LD_INT 1
9249: PPUSH
9250: CALL_OW 48
// wait ( 0 0$2 ) ;
9254: LD_INT 70
9256: PPUSH
9257: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9261: LD_VAR 0 1
9265: PPUSH
9266: LD_EXP 34
9270: PPUSH
9271: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9275: LD_VAR 0 1
9279: PPUSH
9280: LD_STRING DUsSpawnSol
9282: PPUSH
9283: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9287: LD_INT 1
9289: PPUSH
9290: LD_EXP 34
9294: PPUSH
9295: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9299: LD_INT 112
9301: PPUSH
9302: LD_INT 155
9304: PPUSH
9305: LD_INT 3
9307: PPUSH
9308: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9312: LD_VAR 0 1
9316: PPUSH
9317: LD_INT 77
9319: PPUSH
9320: LD_INT 152
9322: PPUSH
9323: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9327: LD_INT 35
9329: PPUSH
9330: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9334: LD_VAR 0 1
9338: PPUSH
9339: CALL_OW 302
9343: NOT
9344: PUSH
9345: LD_VAR 0 1
9349: PPUSH
9350: LD_INT 77
9352: PPUSH
9353: LD_INT 152
9355: PPUSH
9356: CALL_OW 307
9360: OR
9361: IFFALSE 9327
// if not IsOk ( Dickens ) then
9363: LD_VAR 0 1
9367: PPUSH
9368: CALL_OW 302
9372: NOT
9373: IFFALSE 9377
// exit ;
9375: GO 9404
// RemoveUnit ( Dickens ) ;
9377: LD_VAR 0 1
9381: PPUSH
9382: CALL_OW 64
// SaveCharacters ( Dickens , currentMissionPrefix & Dickens ) ;
9386: LD_VAR 0 1
9390: PPUSH
9391: LD_EXP 3
9395: PUSH
9396: LD_STRING Dickens
9398: STR
9399: PPUSH
9400: CALL_OW 38
// end ;
9404: PPOPN 1
9406: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9407: LD_EXP 34
9411: PPUSH
9412: CALL_OW 256
9416: PUSH
9417: LD_INT 600
9419: LESS
9420: IFFALSE 9437
9422: GO 9424
9424: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9425: LD_EXP 34
9429: PPUSH
9430: LD_STRING DUsSpawnBur
9432: PPUSH
9433: CALL_OW 88
9437: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9438: LD_EXP 12
9442: IFFALSE 10504
9444: GO 9446
9446: DISABLE
9447: LD_INT 0
9449: PPUSH
9450: PPUSH
9451: PPUSH
9452: PPUSH
// begin hasToBuildTank := false ;
9453: LD_ADDR_EXP 11
9457: PUSH
9458: LD_INT 0
9460: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9461: LD_ADDR_EXP 5
9465: PUSH
9466: LD_INT 0
9468: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9469: LD_ADDR_VAR 0 2
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 3
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 21
9486: PUSH
9487: LD_INT 2
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PPUSH
9498: CALL_OW 69
9502: ST_TO_ADDR
// InGameOn ;
9503: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 1
9514: ARRAY
9515: PPUSH
9516: CALL_OW 85
// wait ( 0 0$1 ) ;
9520: LD_INT 35
9522: PPUSH
9523: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9527: LD_EXP 34
9531: PPUSH
9532: LD_STRING D9-Bur-1
9534: PPUSH
9535: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9539: LD_EXP 40
9543: PPUSH
9544: LD_VAR 0 2
9548: PUSH
9549: LD_INT 1
9551: ARRAY
9552: PPUSH
9553: CALL_OW 112
// p := 0 ;
9557: LD_ADDR_VAR 0 3
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9565: LD_INT 35
9567: PPUSH
9568: CALL_OW 67
// p := p + 1 ;
9572: LD_ADDR_VAR 0 3
9576: PUSH
9577: LD_VAR 0 3
9581: PUSH
9582: LD_INT 1
9584: PLUS
9585: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9586: LD_EXP 40
9590: PPUSH
9591: LD_VAR 0 2
9595: PUSH
9596: LD_INT 1
9598: ARRAY
9599: PPUSH
9600: CALL_OW 296
9604: PUSH
9605: LD_INT 8
9607: LESS
9608: PUSH
9609: LD_VAR 0 3
9613: PUSH
9614: LD_INT 8
9616: GREATER
9617: OR
9618: IFFALSE 9565
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9620: LD_EXP 40
9624: PPUSH
9625: LD_VAR 0 2
9629: PUSH
9630: LD_INT 1
9632: ARRAY
9633: PPUSH
9634: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9638: LD_EXP 40
9642: PPUSH
9643: LD_STRING D9-Pla-1
9645: PPUSH
9646: CALL_OW 88
// ComFree ( Platonov ) ;
9650: LD_EXP 40
9654: PPUSH
9655: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_INT 64
9666: PPUSH
9667: LD_INT 98
9669: PPUSH
9670: CALL_OW 171
// InGameOff ;
9674: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9678: LD_STRING M3
9680: PPUSH
9681: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9685: LD_EXP 41
9689: PPUSH
9690: LD_INT 70
9692: PPUSH
9693: LD_INT 108
9695: PPUSH
9696: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9700: LD_EXP 41
9704: PPUSH
9705: CALL_OW 200
// wait ( 1 ) ;
9709: LD_INT 1
9711: PPUSH
9712: CALL_OW 67
// ComExit ( Belkov ) ;
9716: LD_EXP 36
9720: PPUSH
9721: CALL 54651 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9725: LD_EXP 36
9729: PPUSH
9730: LD_INT 113
9732: PPUSH
9733: LD_INT 104
9735: PPUSH
9736: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9740: LD_EXP 36
9744: PPUSH
9745: LD_INT 116
9747: PPUSH
9748: LD_INT 108
9750: PPUSH
9751: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9755: LD_INT 35
9757: PPUSH
9758: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9762: LD_INT 22
9764: PUSH
9765: LD_INT 3
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 21
9774: PUSH
9775: LD_INT 2
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 91
9784: PUSH
9785: LD_INT 71
9787: PUSH
9788: LD_INT 8
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: IFFALSE 9755
// InGameOn ;
9807: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9811: LD_ADDR_VAR 0 2
9815: PUSH
9816: LD_INT 22
9818: PUSH
9819: LD_INT 3
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 21
9828: PUSH
9829: LD_INT 2
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 91
9838: PUSH
9839: LD_INT 71
9841: PUSH
9842: LD_INT 8
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 69
9859: ST_TO_ADDR
// if belkovTeam < 3 then
9860: LD_EXP 45
9864: PUSH
9865: LD_INT 3
9867: LESS
9868: IFFALSE 9953
// begin for i := belkovTeam to 3 do
9870: LD_ADDR_VAR 0 1
9874: PUSH
9875: DOUBLE
9876: LD_EXP 45
9880: DEC
9881: ST_TO_ADDR
9882: LD_INT 3
9884: PUSH
9885: FOR_TO
9886: IFFALSE 9951
// begin un := kirovBaseSquad [ 1 ] ;
9888: LD_ADDR_VAR 0 4
9892: PUSH
9893: LD_EXP 43
9897: PUSH
9898: LD_INT 1
9900: ARRAY
9901: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9902: LD_ADDR_EXP 43
9906: PUSH
9907: LD_EXP 43
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: CALL_OW 3
9919: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9920: LD_ADDR_EXP 45
9924: PUSH
9925: LD_EXP 45
9929: PPUSH
9930: LD_EXP 45
9934: PUSH
9935: LD_INT 1
9937: PLUS
9938: PPUSH
9939: LD_VAR 0 4
9943: PPUSH
9944: CALL_OW 1
9948: ST_TO_ADDR
// end ;
9949: GO 9885
9951: POP
9952: POP
// end ; if Kirilenkova then
9953: LD_EXP 37
9957: IFFALSE 9981
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
9959: LD_ADDR_EXP 45
9963: PUSH
9964: LD_EXP 45
9968: PPUSH
9969: LD_EXP 37
9973: PPUSH
9974: CALL 54253 0 2
9978: ST_TO_ADDR
9979: GO 10020
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
9981: LD_ADDR_EXP 45
9985: PUSH
9986: LD_EXP 45
9990: PPUSH
9991: LD_EXP 43
9995: PPUSH
9996: LD_INT 25
9998: PUSH
9999: LD_INT 4
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PPUSH
10006: CALL_OW 72
10010: PUSH
10011: LD_INT 1
10013: ARRAY
10014: PPUSH
10015: CALL 54253 0 2
10019: ST_TO_ADDR
// ComExit ( Kurin ) ;
10020: LD_EXP 38
10024: PPUSH
10025: CALL 54651 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10029: LD_EXP 38
10033: PPUSH
10034: LD_VAR 0 2
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PPUSH
10043: CALL_OW 179
// wait ( 0 0$1 ) ;
10047: LD_INT 35
10049: PPUSH
10050: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10054: LD_VAR 0 2
10058: PUSH
10059: LD_INT 1
10061: ARRAY
10062: PPUSH
10063: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10067: LD_ADDR_VAR 0 4
10071: PUSH
10072: LD_VAR 0 2
10076: PUSH
10077: LD_INT 1
10079: ARRAY
10080: PPUSH
10081: CALL_OW 311
10085: ST_TO_ADDR
// ComExit ( un ) ;
10086: LD_VAR 0 4
10090: PPUSH
10091: CALL 54651 0 1
// wait ( 0 0$1 ) ;
10095: LD_INT 35
10097: PPUSH
10098: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10102: LD_VAR 0 4
10106: PPUSH
10107: LD_EXP 38
10111: PPUSH
10112: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10116: LD_EXP 36
10120: PPUSH
10121: LD_VAR 0 2
10125: PUSH
10126: LD_INT 1
10128: ARRAY
10129: PPUSH
10130: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10134: LD_INT 10
10136: PPUSH
10137: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10141: LD_EXP 38
10145: PPUSH
10146: LD_STRING D10-Kur-1
10148: PPUSH
10149: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10153: LD_EXP 36
10157: PPUSH
10158: LD_INT 122
10160: PPUSH
10161: LD_INT 112
10163: PPUSH
10164: CALL_OW 176
// wait ( 0 0$2 ) ;
10168: LD_INT 70
10170: PPUSH
10171: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10175: LD_EXP 36
10179: PPUSH
10180: LD_STRING D10-Bel-1
10182: PPUSH
10183: CALL_OW 88
// if belkovBrother then
10187: LD_EXP 32
10191: IFFALSE 10243
// begin Say ( Burlak , D10-Bur-1 ) ;
10193: LD_EXP 34
10197: PPUSH
10198: LD_STRING D10-Bur-1
10200: PPUSH
10201: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10205: LD_EXP 36
10209: PPUSH
10210: LD_STRING D10-Bel-2
10212: PPUSH
10213: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10217: LD_EXP 34
10221: PPUSH
10222: LD_STRING D10-Bur-2
10224: PPUSH
10225: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10229: LD_EXP 38
10233: PPUSH
10234: LD_STRING D10-Kur-2a
10236: PPUSH
10237: CALL_OW 88
// end else
10241: GO 10255
// begin Say ( Kurin , D10-Kur-2 ) end ;
10243: LD_EXP 38
10247: PPUSH
10248: LD_STRING D10-Kur-2
10250: PPUSH
10251: CALL_OW 88
// wait ( 0 0$2 ) ;
10255: LD_INT 70
10257: PPUSH
10258: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10262: LD_EXP 38
10266: PPUSH
10267: LD_STRING D10-Kur-2b
10269: PPUSH
10270: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10274: LD_VAR 0 4
10278: PPUSH
10279: LD_INT 66
10281: PPUSH
10282: LD_INT 97
10284: PPUSH
10285: CALL_OW 111
// wait ( 0 0$5 ) ;
10289: LD_INT 175
10291: PPUSH
10292: CALL_OW 67
// InGameOff ;
10296: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10300: LD_EXP 33
10304: PPUSH
10305: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10309: LD_STRING M4
10311: PPUSH
10312: CALL_OW 337
// wait ( 0 0$6 ) ;
10316: LD_INT 210
10318: PPUSH
10319: CALL_OW 67
// kurinDontWannaTalk := true ;
10323: LD_ADDR_EXP 5
10327: PUSH
10328: LD_INT 1
10330: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10331: LD_INT 140
10333: PPUSH
10334: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10338: LD_INT 35
10340: PPUSH
10341: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10345: LD_EXP 34
10349: PPUSH
10350: CALL_OW 310
10354: PUSH
10355: LD_EXP 34
10359: PPUSH
10360: LD_INT 106
10362: PPUSH
10363: CALL_OW 296
10367: PUSH
10368: LD_INT 12
10370: LESS
10371: OR
10372: IFFALSE 10338
// DialogueOn ;
10374: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10378: LD_EXP 40
10382: PPUSH
10383: LD_STRING D11-Pla-1
10385: PPUSH
10386: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10390: LD_EXP 34
10394: PPUSH
10395: LD_STRING D11-Bur-1
10397: PPUSH
10398: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: PUSH
10431: LD_INT 1
10433: GREATER
10434: IFFALSE 10448
// Say ( Burlak , D11-Bur-1a ) ;
10436: LD_EXP 34
10440: PPUSH
10441: LD_STRING D11-Bur-1a
10443: PPUSH
10444: CALL_OW 88
// DialogueOff ;
10448: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10452: LD_ADDR_EXP 8
10456: PUSH
10457: LD_INT 160
10459: PUSH
10460: LD_INT 150
10462: PUSH
10463: LD_INT 140
10465: PUSH
10466: LD_INT 120
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: PUSH
10475: LD_OWVAR 67
10479: ARRAY
10480: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10481: LD_STRING M5
10483: PPUSH
10484: CALL_OW 337
// kirovHasTank := true ;
10488: LD_ADDR_EXP 6
10492: PUSH
10493: LD_INT 1
10495: ST_TO_ADDR
// hasToBuildTank := true ;
10496: LD_ADDR_EXP 11
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// end ;
10504: PPOPN 4
10506: END
// every 0 0$2 trigger allianceAttacked do
10507: LD_EXP 13
10511: IFFALSE 10550
10513: GO 10515
10515: DISABLE
// begin DialogueOn ;
10516: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10520: LD_EXP 38
10524: PPUSH
10525: LD_STRING DArestKur
10527: PPUSH
10528: CALL_OW 88
// dwait ( 0 0$1 ) ;
10532: LD_INT 35
10534: PPUSH
10535: CALL_OW 68
// YouLost ( SelfAttack ) ;
10539: LD_STRING SelfAttack
10541: PPUSH
10542: CALL_OW 104
// DialogueOff ;
10546: CALL_OW 7
// end ;
10550: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10551: LD_INT 22
10553: PUSH
10554: LD_INT 3
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 21
10563: PUSH
10564: LD_INT 2
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PPUSH
10575: CALL_OW 69
10579: PUSH
10580: LD_INT 22
10582: PUSH
10583: LD_INT 3
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 21
10592: PUSH
10593: LD_INT 1
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PPUSH
10604: CALL_OW 69
10608: GREATEREQUAL
10609: PUSH
10610: LD_EXP 6
10614: AND
10615: IFFALSE 10785
10617: GO 10619
10619: DISABLE
// begin hasToBuildTank := false ;
10620: LD_ADDR_EXP 11
10624: PUSH
10625: LD_INT 0
10627: ST_TO_ADDR
// blockNorth := false ;
10628: LD_ADDR_EXP 7
10632: PUSH
10633: LD_INT 0
10635: ST_TO_ADDR
// InGameOn ;
10636: CALL_OW 8
// wait ( 0 0$2 ) ;
10640: LD_INT 70
10642: PPUSH
10643: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10647: LD_INT 106
10649: PPUSH
10650: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10654: LD_EXP 40
10658: PPUSH
10659: LD_INT 65
10661: PPUSH
10662: LD_INT 97
10664: PPUSH
10665: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10669: LD_EXP 40
10673: PPUSH
10674: LD_EXP 34
10678: PPUSH
10679: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10683: LD_EXP 34
10687: PPUSH
10688: LD_STRING D12-Bur-1
10690: PPUSH
10691: CALL_OW 88
// wait ( 0 0$1 ) ;
10695: LD_INT 35
10697: PPUSH
10698: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10702: LD_EXP 40
10706: PPUSH
10707: LD_STRING D12-Pla-1
10709: PPUSH
10710: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10714: LD_EXP 34
10718: PPUSH
10719: LD_STRING D12-Bur-2
10721: PPUSH
10722: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10726: LD_EXP 40
10730: PPUSH
10731: LD_STRING D12-Pla-2
10733: PPUSH
10734: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10738: LD_EXP 34
10742: PPUSH
10743: LD_STRING D12-Bur-3
10745: PPUSH
10746: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10750: LD_EXP 40
10754: PPUSH
10755: LD_STRING D12-Pla-3
10757: PPUSH
10758: CALL_OW 88
// hasAllTanks := true ;
10762: LD_ADDR_EXP 14
10766: PUSH
10767: LD_INT 1
10769: ST_TO_ADDR
// InGameOff ;
10770: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10774: LD_STRING M6
10776: PPUSH
10777: CALL_OW 337
// PrepareAmerican ;
10781: CALL 3961 0 0
// end ;
10785: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10786: LD_EXP 17
10790: IFFALSE 12554
10792: GO 10794
10794: DISABLE
10795: LD_INT 0
10797: PPUSH
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
// begin PrepareAmericanTrap ;
10804: CALL 4761 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10808: LD_ADDR_VAR 0 2
10812: PUSH
10813: LD_EXP 48
10817: PPUSH
10818: LD_INT 26
10820: PUSH
10821: LD_INT 1
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PPUSH
10828: CALL_OW 72
10832: PUSH
10833: LD_INT 1
10835: ARRAY
10836: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
10837: LD_INT 22
10839: PUSH
10840: LD_INT 3
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 3
10849: PUSH
10850: LD_INT 21
10852: PUSH
10853: LD_INT 3
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 60
10866: PUSH
10867: EMPTY
10868: LIST
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: LIST
10874: PPUSH
10875: CALL_OW 69
10879: PPUSH
10880: CALL_OW 141
// InGameOn ;
10884: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10888: LD_INT 69
10890: PPUSH
10891: LD_INT 22
10893: PPUSH
10894: CALL_OW 86
// wait ( 0 0$1 ) ;
10898: LD_INT 35
10900: PPUSH
10901: CALL_OW 67
// DialogueOn ;
10905: CALL_OW 6
// game_speed := 4 ;
10909: LD_ADDR_OWVAR 65
10913: PUSH
10914: LD_INT 4
10916: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
10917: LD_VAR 0 2
10921: PPUSH
10922: LD_STRING D13-Sol1-1
10924: PPUSH
10925: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
10929: LD_EXP 36
10933: PPUSH
10934: LD_STRING D13-Bel-1
10936: PPUSH
10937: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10941: LD_EXP 38
10945: PPUSH
10946: LD_STRING D13-Kur-1
10948: PPUSH
10949: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10953: LD_INT 10
10955: PPUSH
10956: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10960: LD_EXP 36
10964: PPUSH
10965: LD_STRING D13-Bel-2
10967: PPUSH
10968: CALL_OW 94
// DialogueOff ;
10972: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
10976: LD_EXP 36
10980: PPUSH
10981: LD_INT 76
10983: PPUSH
10984: LD_INT 20
10986: PPUSH
10987: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
10991: LD_EXP 45
10995: PPUSH
10996: LD_INT 72
10998: PPUSH
10999: LD_INT 20
11001: PPUSH
11002: CALL_OW 111
// wait ( 0 0$2 ) ;
11006: LD_INT 70
11008: PPUSH
11009: CALL_OW 67
// for i in usTrapForces do
11013: LD_ADDR_VAR 0 1
11017: PUSH
11018: LD_EXP 48
11022: PUSH
11023: FOR_IN
11024: IFFALSE 11057
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11026: LD_VAR 0 1
11030: PPUSH
11031: LD_INT 7
11033: PPUSH
11034: LD_INT 0
11036: PPUSH
11037: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: LD_EXP 36
11050: PPUSH
11051: CALL_OW 119
// end ;
11055: GO 11023
11057: POP
11058: POP
// wait ( 0 0$0.3 ) ;
11059: LD_INT 10
11061: PPUSH
11062: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11066: LD_EXP 48
11070: PPUSH
11071: LD_INT 65
11073: PPUSH
11074: LD_INT 18
11076: PPUSH
11077: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11081: LD_INT 70
11083: PPUSH
11084: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11088: LD_EXP 48
11092: PPUSH
11093: LD_INT 101
11095: PUSH
11096: LD_INT 3
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PPUSH
11103: CALL_OW 72
11107: PUSH
11108: LD_INT 3
11110: GREATER
11111: IFFALSE 11081
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11113: LD_INT 65
11115: PPUSH
11116: LD_INT 18
11118: PPUSH
11119: LD_INT 3
11121: PPUSH
11122: LD_INT 26
11124: NEG
11125: PPUSH
11126: CALL_OW 330
// DialogueOn ;
11130: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11134: LD_VAR 0 2
11138: PPUSH
11139: LD_STRING D14-Sol1-1
11141: PPUSH
11142: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11146: LD_EXP 36
11150: PPUSH
11151: LD_STRING D14-Bel-1
11153: PPUSH
11154: CALL_OW 88
// DialogueOff ;
11158: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11162: LD_INT 65
11164: PPUSH
11165: LD_INT 18
11167: PPUSH
11168: LD_INT 3
11170: PPUSH
11171: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11175: LD_EXP 45
11179: PPUSH
11180: LD_INT 31
11182: PPUSH
11183: LD_INT 9
11185: PPUSH
11186: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11190: LD_EXP 48
11194: PPUSH
11195: LD_INT 50
11197: PPUSH
11198: LD_INT 16
11200: PPUSH
11201: CALL_OW 174
// wait ( 0 0$2 ) ;
11205: LD_INT 70
11207: PPUSH
11208: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11212: LD_ADDR_VAR 0 6
11216: PUSH
11217: LD_EXP 36
11221: PPUSH
11222: CALL_OW 310
11226: ST_TO_ADDR
// if not belkovTank then
11227: LD_VAR 0 6
11231: NOT
11232: IFFALSE 11272
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11234: LD_ADDR_VAR 0 6
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_INT 6
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 21
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PPUSH
11263: CALL_OW 69
11267: PUSH
11268: LD_INT 1
11270: ARRAY
11271: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11272: LD_EXP 36
11276: PPUSH
11277: LD_INT 58
11279: PPUSH
11280: LD_INT 21
11282: PPUSH
11283: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11287: LD_EXP 36
11291: PPUSH
11292: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11296: LD_EXP 36
11300: PPUSH
11301: LD_INT 53
11303: PPUSH
11304: LD_INT 18
11306: PPUSH
11307: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11311: LD_EXP 36
11315: PPUSH
11316: LD_INT 31
11318: PPUSH
11319: LD_INT 9
11321: PPUSH
11322: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11326: LD_INT 35
11328: PPUSH
11329: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_EXP 36
11342: PUSH
11343: LD_EXP 45
11347: UNION
11348: PUSH
11349: LD_VAR 0 6
11353: UNION
11354: PUSH
11355: FOR_IN
11356: IFFALSE 11387
// if GetLives ( i ) < 800 then
11358: LD_VAR 0 1
11362: PPUSH
11363: CALL_OW 256
11367: PUSH
11368: LD_INT 800
11370: LESS
11371: IFFALSE 11385
// SetLives ( i , 800 ) ;
11373: LD_VAR 0 1
11377: PPUSH
11378: LD_INT 800
11380: PPUSH
11381: CALL_OW 234
11385: GO 11355
11387: POP
11388: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11389: LD_EXP 36
11393: PPUSH
11394: LD_INT 31
11396: PPUSH
11397: LD_INT 9
11399: PPUSH
11400: CALL_OW 297
11404: PUSH
11405: LD_INT 4
11407: LESS
11408: IFFALSE 11326
// for i := 1 to Difficulty do
11410: LD_ADDR_VAR 0 1
11414: PUSH
11415: DOUBLE
11416: LD_INT 1
11418: DEC
11419: ST_TO_ADDR
11420: LD_OWVAR 67
11424: PUSH
11425: FOR_TO
11426: IFFALSE 11468
// if i <= belkovTeam then
11428: LD_VAR 0 1
11432: PUSH
11433: LD_EXP 45
11437: LESSEQUAL
11438: IFFALSE 11466
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11440: LD_EXP 45
11444: PUSH
11445: LD_VAR 0 1
11449: ARRAY
11450: PPUSH
11451: LD_INT 600
11453: PPUSH
11454: LD_INT 800
11456: PPUSH
11457: CALL_OW 12
11461: PPUSH
11462: CALL_OW 234
11466: GO 11425
11468: POP
11469: POP
// SetLives ( Belkov , 820 ) ;
11470: LD_EXP 36
11474: PPUSH
11475: LD_INT 820
11477: PPUSH
11478: CALL_OW 234
// InGameOff ;
11482: CALL_OW 9
// DialogueOn ;
11486: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11490: LD_EXP 36
11494: PPUSH
11495: LD_STRING D14-Bel-1a
11497: PPUSH
11498: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11502: LD_EXP 38
11506: PPUSH
11507: LD_STRING D14-Kur-1
11509: PPUSH
11510: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11514: LD_EXP 36
11518: PPUSH
11519: LD_STRING D14-Bel-2
11521: PPUSH
11522: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11526: LD_EXP 38
11530: PPUSH
11531: LD_STRING D14-Kur-2
11533: PPUSH
11534: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11538: LD_EXP 34
11542: PPUSH
11543: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11547: LD_EXP 34
11551: PPUSH
11552: LD_STRING D14a-Bur-1
11554: PPUSH
11555: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11559: LD_EXP 40
11563: PPUSH
11564: LD_STRING D14a-Pla-1
11566: PPUSH
11567: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11571: LD_EXP 34
11575: PPUSH
11576: LD_STRING D14a-Bur-2
11578: PPUSH
11579: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11583: LD_EXP 40
11587: PPUSH
11588: LD_STRING D14a-Pla-2
11590: PPUSH
11591: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11595: LD_EXP 34
11599: PPUSH
11600: LD_STRING D14a-Bur-3
11602: PPUSH
11603: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11607: LD_EXP 40
11611: PPUSH
11612: LD_STRING D14a-Pla-3
11614: PPUSH
11615: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11619: LD_EXP 34
11623: PPUSH
11624: LD_STRING D14a-Bur-4
11626: PPUSH
11627: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11631: LD_EXP 40
11635: PPUSH
11636: LD_STRING D14a-Pla-4
11638: PPUSH
11639: CALL_OW 88
// DialogueOff ;
11643: CALL_OW 7
// belkovTrapped := true ;
11647: LD_ADDR_EXP 18
11651: PUSH
11652: LD_INT 1
11654: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11655: LD_EXP 48
11659: PPUSH
11660: LD_INT 68
11662: PPUSH
11663: LD_INT 16
11665: PPUSH
11666: CALL_OW 111
// if belkovTank then
11670: LD_VAR 0 6
11674: IFFALSE 11713
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11676: LD_EXP 48
11680: PUSH
11681: LD_INT 1
11683: ARRAY
11684: PPUSH
11685: LD_VAR 0 6
11689: PPUSH
11690: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11694: LD_EXP 48
11698: PUSH
11699: LD_INT 1
11701: ARRAY
11702: PPUSH
11703: LD_INT 69
11705: PPUSH
11706: LD_INT 20
11708: PPUSH
11709: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11713: LD_EXP 36
11717: PPUSH
11718: LD_INT 40
11720: PPUSH
11721: LD_INT 17
11723: PPUSH
11724: CALL_OW 111
// AddComHold ( Belkov ) ;
11728: LD_EXP 36
11732: PPUSH
11733: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11737: LD_ADDR_VAR 0 3
11741: PUSH
11742: LD_INT 44
11744: PUSH
11745: LD_INT 18
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 42
11754: PUSH
11755: LD_INT 16
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 40
11764: PUSH
11765: LD_INT 15
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 44
11774: PUSH
11775: LD_INT 20
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 42
11784: PUSH
11785: LD_INT 20
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 42
11794: PUSH
11795: LD_INT 12
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 42
11804: PUSH
11805: LD_INT 8
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11821: LD_ADDR_VAR 0 1
11825: PUSH
11826: LD_EXP 45
11830: PPUSH
11831: LD_INT 25
11833: PUSH
11834: LD_INT 1
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PPUSH
11841: CALL_OW 72
11845: PUSH
11846: FOR_IN
11847: IFFALSE 11913
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11849: LD_VAR 0 1
11853: PPUSH
11854: LD_VAR 0 3
11858: PUSH
11859: LD_INT 1
11861: ARRAY
11862: PUSH
11863: LD_INT 1
11865: ARRAY
11866: PPUSH
11867: LD_VAR 0 3
11871: PUSH
11872: LD_INT 1
11874: ARRAY
11875: PUSH
11876: LD_INT 2
11878: ARRAY
11879: PPUSH
11880: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11884: LD_ADDR_VAR 0 3
11888: PUSH
11889: LD_VAR 0 3
11893: PPUSH
11894: LD_INT 1
11896: PPUSH
11897: CALL_OW 3
11901: ST_TO_ADDR
// AddComCrawl ( i ) ;
11902: LD_VAR 0 1
11906: PPUSH
11907: CALL_OW 197
// end ;
11911: GO 11846
11913: POP
11914: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11915: LD_EXP 45
11919: PPUSH
11920: LD_INT 25
11922: PUSH
11923: LD_INT 4
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 72
11934: IFFALSE 11966
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11936: LD_EXP 45
11940: PPUSH
11941: LD_INT 25
11943: PUSH
11944: LD_INT 4
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PPUSH
11951: CALL_OW 72
11955: PPUSH
11956: LD_INT 38
11958: PPUSH
11959: LD_INT 18
11961: PPUSH
11962: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
11966: LD_ADDR_VAR 0 7
11970: PUSH
11971: LD_INT 9450
11973: PUSH
11974: LD_INT 8400
11976: PUSH
11977: LD_INT 6650
11979: PUSH
11980: LD_INT 5250
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: PUSH
11989: LD_OWVAR 67
11993: ARRAY
11994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11995: LD_INT 35
11997: PPUSH
11998: CALL_OW 67
// timer := timer - 0 0$1 ;
12002: LD_ADDR_VAR 0 7
12006: PUSH
12007: LD_VAR 0 7
12011: PUSH
12012: LD_INT 35
12014: MINUS
12015: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12016: LD_INT 19
12018: PPUSH
12019: LD_INT 22
12021: PUSH
12022: LD_INT 3
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 70
12033: IFFALSE 12043
// timer := 0 0$0 ;
12035: LD_ADDR_VAR 0 7
12039: PUSH
12040: LD_INT 0
12042: ST_TO_ADDR
// until timer <= 0 ;
12043: LD_VAR 0 7
12047: PUSH
12048: LD_INT 0
12050: LESSEQUAL
12051: IFFALSE 11995
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12053: LD_EXP 48
12057: PPUSH
12058: LD_INT 50
12060: PUSH
12061: EMPTY
12062: LIST
12063: PPUSH
12064: CALL_OW 72
12068: NOT
12069: IFFALSE 12073
// exit ;
12071: GO 12554
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12073: LD_ADDR_VAR 0 4
12077: PUSH
12078: LD_EXP 48
12082: PPUSH
12083: LD_INT 25
12085: PUSH
12086: LD_INT 1
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: LD_INT 54
12098: PUSH
12099: EMPTY
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 72
12114: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12115: LD_ADDR_VAR 0 5
12119: PUSH
12120: LD_EXP 48
12124: PPUSH
12125: LD_INT 25
12127: PUSH
12128: LD_INT 4
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: LD_INT 54
12140: PUSH
12141: EMPTY
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PPUSH
12152: CALL_OW 72
12156: ST_TO_ADDR
// for i in sol do
12157: LD_ADDR_VAR 0 1
12161: PUSH
12162: LD_VAR 0 4
12166: PUSH
12167: FOR_IN
12168: IFFALSE 12184
// SetTag ( i , 0 ) ;
12170: LD_VAR 0 1
12174: PPUSH
12175: LD_INT 0
12177: PPUSH
12178: CALL_OW 109
12182: GO 12167
12184: POP
12185: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12186: LD_VAR 0 5
12190: PPUSH
12191: LD_INT 60
12193: PPUSH
12194: LD_INT 8
12196: PPUSH
12197: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12201: LD_INT 22
12203: PUSH
12204: LD_INT 1
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 21
12213: PUSH
12214: LD_INT 2
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 69
12229: IFFALSE 12270
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12231: LD_INT 22
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 21
12243: PUSH
12244: LD_INT 2
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: PPUSH
12260: LD_INT 53
12262: PPUSH
12263: LD_INT 24
12265: PPUSH
12266: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12270: LD_INT 18
12272: PPUSH
12273: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12277: LD_ADDR_VAR 0 4
12281: PUSH
12282: LD_EXP 48
12286: PPUSH
12287: LD_INT 25
12289: PUSH
12290: LD_INT 1
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 50
12299: PUSH
12300: EMPTY
12301: LIST
12302: PUSH
12303: LD_INT 3
12305: PUSH
12306: LD_INT 54
12308: PUSH
12309: EMPTY
12310: LIST
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: PPUSH
12321: CALL_OW 72
12325: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12326: LD_VAR 0 4
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: CALL 51835 0 2
12338: PUSH
12339: LD_VAR 0 4
12343: EQUAL
12344: IFFALSE 12383
// begin wait ( 0 0$3 ) ;
12346: LD_INT 105
12348: PPUSH
12349: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12353: LD_VAR 0 4
12357: PPUSH
12358: LD_INT 41
12360: PPUSH
12361: LD_INT 18
12363: PPUSH
12364: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12368: LD_VAR 0 5
12372: PPUSH
12373: LD_INT 60
12375: PPUSH
12376: LD_INT 8
12378: PPUSH
12379: CALL_OW 111
// end ; for i in sol do
12383: LD_ADDR_VAR 0 1
12387: PUSH
12388: LD_VAR 0 4
12392: PUSH
12393: FOR_IN
12394: IFFALSE 12469
// if GetLives ( i ) < 800 then
12396: LD_VAR 0 1
12400: PPUSH
12401: CALL_OW 256
12405: PUSH
12406: LD_INT 800
12408: LESS
12409: IFFALSE 12440
// begin SetTag ( i , 1 ) ;
12411: LD_VAR 0 1
12415: PPUSH
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12423: LD_VAR 0 1
12427: PPUSH
12428: LD_INT 60
12430: PPUSH
12431: LD_INT 8
12433: PPUSH
12434: CALL_OW 111
// end else
12438: GO 12467
// if GetLives ( i ) = 1000 then
12440: LD_VAR 0 1
12444: PPUSH
12445: CALL_OW 256
12449: PUSH
12450: LD_INT 1000
12452: EQUAL
12453: IFFALSE 12467
// SetTag ( i , 0 ) ;
12455: LD_VAR 0 1
12459: PPUSH
12460: LD_INT 0
12462: PPUSH
12463: CALL_OW 109
12467: GO 12393
12469: POP
12470: POP
// until belkovDied or not sol ;
12471: LD_EXP 19
12475: PUSH
12476: LD_VAR 0 4
12480: NOT
12481: OR
12482: IFFALSE 12270
// if not sol then
12484: LD_VAR 0 4
12488: NOT
12489: IFFALSE 12493
// exit ;
12491: GO 12554
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12493: LD_VAR 0 4
12497: PUSH
12498: LD_VAR 0 5
12502: ADD
12503: PPUSH
12504: LD_INT 56
12506: PPUSH
12507: LD_INT 25
12509: PPUSH
12510: CALL_OW 111
// wait ( 0 0$30 ) ;
12514: LD_INT 1050
12516: PPUSH
12517: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12521: LD_EXP 48
12525: PPUSH
12526: LD_INT 66
12528: PPUSH
12529: LD_INT 96
12531: PPUSH
12532: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12536: LD_VAR 0 5
12540: PPUSH
12541: LD_VAR 0 4
12545: PUSH
12546: LD_INT 1
12548: ARRAY
12549: PPUSH
12550: CALL_OW 112
// end ;
12554: PPOPN 7
12556: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12557: LD_EXP 18
12561: PUSH
12562: LD_EXP 19
12566: NOT
12567: AND
12568: PUSH
12569: LD_INT 9
12571: PPUSH
12572: LD_INT 22
12574: PUSH
12575: LD_INT 3
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PPUSH
12582: CALL_OW 70
12586: AND
12587: IFFALSE 12907
12589: GO 12591
12591: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12592: LD_STRING QAttackAm
12594: PPUSH
12595: CALL_OW 97
12599: PUSH
12600: LD_INT 1
12602: DOUBLE
12603: EQUAL
12604: IFTRUE 12608
12606: GO 12675
12608: POP
// begin initiative := true ;
12609: LD_ADDR_EXP 31
12613: PUSH
12614: LD_INT 1
12616: ST_TO_ADDR
// DialogueOn ;
12617: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12621: LD_EXP 34
12625: PPUSH
12626: LD_STRING D17-Bur-1
12628: PPUSH
12629: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12633: LD_EXP 40
12637: PPUSH
12638: LD_STRING D17-Pla-1
12640: PPUSH
12641: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12645: LD_EXP 34
12649: PPUSH
12650: LD_STRING D17-Bur-2
12652: PPUSH
12653: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12657: LD_EXP 40
12661: PPUSH
12662: LD_STRING D17-Pla-2
12664: PPUSH
12665: CALL_OW 94
// DialogueOff ;
12669: CALL_OW 7
// end ; 2 :
12673: GO 12837
12675: LD_INT 2
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12775
12683: POP
// begin initiative := true ;
12684: LD_ADDR_EXP 31
12688: PUSH
12689: LD_INT 1
12691: ST_TO_ADDR
// DialogueOn ;
12692: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12696: LD_EXP 34
12700: PPUSH
12701: LD_STRING D18-Bur-1
12703: PPUSH
12704: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12708: LD_EXP 40
12712: PPUSH
12713: LD_STRING D18-Pla-1
12715: PPUSH
12716: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12720: LD_EXP 34
12724: PPUSH
12725: LD_STRING D18-Bur-2
12727: PPUSH
12728: CALL_OW 88
// if not reinforcementsGained then
12732: LD_EXP 25
12736: NOT
12737: IFFALSE 12757
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12739: LD_EXP 40
12743: PPUSH
12744: LD_STRING D18-Pla-2
12746: PPUSH
12747: CALL_OW 94
// SendReinforcements ;
12751: CALL 3302 0 0
// end else
12755: GO 12769
// SayRadio ( Platonov , D22-Pla-1b ) ;
12757: LD_EXP 40
12761: PPUSH
12762: LD_STRING D22-Pla-1b
12764: PPUSH
12765: CALL_OW 94
// DialogueOff ;
12769: CALL_OW 7
// end ; 3 :
12773: GO 12837
12775: LD_INT 3
12777: DOUBLE
12778: EQUAL
12779: IFTRUE 12783
12781: GO 12836
12783: POP
// begin if IsOk ( Gnyevko ) then
12784: LD_EXP 35
12788: PPUSH
12789: CALL_OW 302
12793: IFFALSE 12809
// Say ( Gnyevko , D19A-Gny-1 ) else
12795: LD_EXP 35
12799: PPUSH
12800: LD_STRING D19A-Gny-1
12802: PPUSH
12803: CALL_OW 88
12807: GO 12832
// if IsOk ( Kovalyuk ) then
12809: LD_EXP 39
12813: PPUSH
12814: CALL_OW 302
12818: IFFALSE 12832
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12820: LD_EXP 39
12824: PPUSH
12825: LD_STRING D19A-Kov-1
12827: PPUSH
12828: CALL_OW 88
// exit ;
12832: GO 12907
// end ; end ;
12834: GO 12837
12836: POP
// if IsOk ( Gnyevko ) then
12837: LD_EXP 35
12841: PPUSH
12842: CALL_OW 302
12846: IFFALSE 12872
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12848: LD_EXP 35
12852: PPUSH
12853: LD_STRING D19-Gny-1
12855: PPUSH
12856: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12860: LD_EXP 34
12864: PPUSH
12865: LD_STRING D19-Bur-1
12867: PPUSH
12868: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12872: LD_EXP 39
12876: PPUSH
12877: CALL_OW 302
12881: IFFALSE 12907
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12883: LD_EXP 39
12887: PPUSH
12888: LD_STRING D19-Kov-1
12890: PPUSH
12891: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12895: LD_EXP 34
12899: PPUSH
12900: LD_STRING D19-Bur-2
12902: PPUSH
12903: CALL_OW 88
// end ; end ;
12907: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12908: LD_EXP 18
12912: PUSH
12913: LD_EXP 19
12917: NOT
12918: AND
12919: PUSH
12920: LD_INT 16
12922: PPUSH
12923: LD_INT 22
12925: PUSH
12926: LD_INT 3
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PPUSH
12933: CALL_OW 70
12937: AND
12938: IFFALSE 13166
12940: GO 12942
12942: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12943: LD_STRING QAttackBw
12945: PPUSH
12946: CALL_OW 97
12950: PUSH
12951: LD_INT 1
12953: DOUBLE
12954: EQUAL
12955: IFTRUE 12959
12957: GO 13002
12959: POP
// begin initiative := true ;
12960: LD_ADDR_EXP 31
12964: PUSH
12965: LD_INT 1
12967: ST_TO_ADDR
// DialogueOn ;
12968: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12972: LD_EXP 34
12976: PPUSH
12977: LD_STRING D21-Bur-1
12979: PPUSH
12980: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12984: LD_EXP 40
12988: PPUSH
12989: LD_STRING D21-Pla-1
12991: PPUSH
12992: CALL_OW 94
// DialogueOff ;
12996: CALL_OW 7
// end ; 2 :
13000: GO 13117
13002: LD_INT 2
13004: DOUBLE
13005: EQUAL
13006: IFTRUE 13010
13008: GO 13105
13010: POP
// begin initiative := true ;
13011: LD_ADDR_EXP 31
13015: PUSH
13016: LD_INT 1
13018: ST_TO_ADDR
// DialogueOn ;
13019: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13023: LD_EXP 34
13027: PPUSH
13028: LD_STRING D22-Bur-1
13030: PPUSH
13031: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13035: LD_EXP 25
13039: NOT
13040: PUSH
13041: LD_EXP 22
13045: AND
13046: IFFALSE 13066
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13048: LD_EXP 40
13052: PPUSH
13053: LD_STRING D22-Pla-1
13055: PPUSH
13056: CALL_OW 94
// SendReinforcements ;
13060: CALL 3302 0 0
// end else
13064: GO 13099
// if not westOutpostDestroyed then
13066: LD_EXP 22
13070: NOT
13071: IFFALSE 13087
// SayRadio ( Platonov , D22-Pla-1a ) else
13073: LD_EXP 40
13077: PPUSH
13078: LD_STRING D22-Pla-1a
13080: PPUSH
13081: CALL_OW 94
13085: GO 13099
// SayRadio ( Platonov , D22-Pla-1b ) ;
13087: LD_EXP 40
13091: PPUSH
13092: LD_STRING D22-Pla-1b
13094: PPUSH
13095: CALL_OW 94
// DialogueOff ;
13099: CALL_OW 7
// end ; 3 :
13103: GO 13117
13105: LD_INT 3
13107: DOUBLE
13108: EQUAL
13109: IFTRUE 13113
13111: GO 13116
13113: POP
// begin end ; end ;
13114: GO 13117
13116: POP
// ChangeMissionObjectives ( M9 ) ;
13117: LD_STRING M9
13119: PPUSH
13120: CALL_OW 337
// wait ( 0 0$1 ) ;
13124: LD_INT 35
13126: PPUSH
13127: CALL_OW 67
// if IsOk ( Gnyevko ) then
13131: LD_EXP 35
13135: PPUSH
13136: CALL_OW 302
13140: IFFALSE 13166
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13142: LD_EXP 35
13146: PPUSH
13147: LD_STRING D23-Gny-1
13149: PPUSH
13150: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13154: LD_EXP 34
13158: PPUSH
13159: LD_STRING D23-Bur-1
13161: PPUSH
13162: CALL_OW 88
// end ; end ;
13166: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13167: LD_EXP 18
13171: PUSH
13172: LD_EXP 19
13176: AND
13177: PUSH
13178: LD_EXP 28
13182: NOT
13183: AND
13184: PUSH
13185: LD_EXP 45
13189: PPUSH
13190: LD_INT 91
13192: PUSH
13193: LD_EXP 34
13197: PUSH
13198: LD_INT 8
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 72
13210: AND
13211: IFFALSE 13255
13213: GO 13215
13215: DISABLE
13216: LD_INT 0
13218: PPUSH
// begin for i in belkovTeam do
13219: LD_ADDR_VAR 0 1
13223: PUSH
13224: LD_EXP 45
13228: PUSH
13229: FOR_IN
13230: IFFALSE 13246
// SetSide ( i , 3 ) ;
13232: LD_VAR 0 1
13236: PPUSH
13237: LD_INT 3
13239: PPUSH
13240: CALL_OW 235
13244: GO 13229
13246: POP
13247: POP
// ChangeMissionObjectives ( M9a ) ;
13248: LD_STRING M9a
13250: PPUSH
13251: CALL_OW 337
// end ;
13255: PPOPN 1
13257: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13258: LD_EXP 34
13262: PPUSH
13263: LD_EXP 36
13267: PPUSH
13268: CALL_OW 296
13272: PUSH
13273: LD_INT 6
13275: LESS
13276: PUSH
13277: LD_EXP 18
13281: AND
13282: PUSH
13283: LD_EXP 36
13287: PPUSH
13288: CALL_OW 302
13292: AND
13293: PUSH
13294: LD_INT 3
13296: PPUSH
13297: CALL_OW 463
13301: NOT
13302: AND
13303: IFFALSE 13618
13305: GO 13307
13307: DISABLE
13308: LD_INT 0
13310: PPUSH
13311: PPUSH
// begin InGameOn ;
13312: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13316: LD_EXP 34
13320: PPUSH
13321: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13325: LD_EXP 34
13329: PPUSH
13330: LD_INT 37
13332: PPUSH
13333: LD_INT 17
13335: PPUSH
13336: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13340: LD_EXP 34
13344: PPUSH
13345: LD_EXP 36
13349: PPUSH
13350: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13354: LD_EXP 36
13358: PPUSH
13359: LD_EXP 34
13363: PPUSH
13364: CALL_OW 119
// p := 0 ;
13368: LD_ADDR_VAR 0 2
13372: PUSH
13373: LD_INT 0
13375: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13376: LD_INT 35
13378: PPUSH
13379: CALL_OW 67
// p := p + 1 ;
13383: LD_ADDR_VAR 0 2
13387: PUSH
13388: LD_VAR 0 2
13392: PUSH
13393: LD_INT 1
13395: PLUS
13396: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13397: LD_EXP 34
13401: PPUSH
13402: LD_EXP 36
13406: PPUSH
13407: CALL_OW 296
13411: PUSH
13412: LD_INT 4
13414: LESS
13415: PUSH
13416: LD_VAR 0 2
13420: PUSH
13421: LD_INT 6
13423: GREATER
13424: OR
13425: IFFALSE 13376
// ComTurnUnit ( Burlak , Belkov ) ;
13427: LD_EXP 34
13431: PPUSH
13432: LD_EXP 36
13436: PPUSH
13437: CALL_OW 119
// DialogueOn ;
13441: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13445: LD_EXP 36
13449: PPUSH
13450: LD_STRING D24-Bel-1
13452: PPUSH
13453: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13457: LD_EXP 34
13461: PPUSH
13462: LD_STRING D24-Bur-1
13464: PPUSH
13465: CALL_OW 88
// if belkovBrother then
13469: LD_EXP 32
13473: IFFALSE 13487
// Say ( Burlak , D24-Bur-1a ) ;
13475: LD_EXP 34
13479: PPUSH
13480: LD_STRING D24-Bur-1a
13482: PPUSH
13483: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13487: LD_EXP 36
13491: PPUSH
13492: LD_STRING D24-Bel-2
13494: PPUSH
13495: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13499: LD_EXP 34
13503: PPUSH
13504: LD_STRING D24-Bur-2
13506: PPUSH
13507: CALL_OW 88
// if vehCaptured then
13511: LD_EXP 16
13515: IFFALSE 13529
// Say ( Burlak , D24-Bur-2a ) ;
13517: LD_EXP 34
13521: PPUSH
13522: LD_STRING D24-Bur-2a
13524: PPUSH
13525: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13529: LD_EXP 40
13533: PPUSH
13534: LD_STRING D24-Pla-2
13536: PPUSH
13537: CALL_OW 94
// if not westOutpostDestroyed then
13541: LD_EXP 22
13545: NOT
13546: IFFALSE 13560
// SayRadio ( Platonov , D24-Pla-2a ) ;
13548: LD_EXP 40
13552: PPUSH
13553: LD_STRING D24-Pla-2a
13555: PPUSH
13556: CALL_OW 94
// DialogueOff ;
13560: CALL_OW 7
// InGameOff ;
13564: CALL_OW 9
// belkovSaved := true ;
13568: LD_ADDR_EXP 28
13572: PUSH
13573: LD_INT 1
13575: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_EXP 45
13585: PUSH
13586: LD_EXP 36
13590: UNION
13591: PUSH
13592: FOR_IN
13593: IFFALSE 13609
// SetSide ( i , 3 ) ;
13595: LD_VAR 0 1
13599: PPUSH
13600: LD_INT 3
13602: PPUSH
13603: CALL_OW 235
13607: GO 13592
13609: POP
13610: POP
// ChangeMissionObjectives ( M9a ) ;
13611: LD_STRING M9a
13613: PPUSH
13614: CALL_OW 337
// end ;
13618: PPOPN 2
13620: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13621: LD_INT 3
13623: PPUSH
13624: LD_INT 22
13626: PUSH
13627: LD_INT 1
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 95
13636: PUSH
13637: LD_INT 8
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 69
13652: PPUSH
13653: CALL 57526 0 2
13657: IFFALSE 13842
13659: GO 13661
13661: DISABLE
// begin DialogueOn ;
13662: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13666: LD_INT 49
13668: PPUSH
13669: LD_INT 57
13671: PPUSH
13672: LD_INT 3
13674: PPUSH
13675: LD_INT 12
13677: NEG
13678: PPUSH
13679: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13683: LD_INT 49
13685: PPUSH
13686: LD_INT 57
13688: PPUSH
13689: LD_INT 3
13691: PPUSH
13692: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13696: LD_INT 49
13698: PPUSH
13699: LD_INT 57
13701: PPUSH
13702: CALL_OW 84
// if not eastOutpostDiscovered then
13706: LD_EXP 21
13710: NOT
13711: IFFALSE 13751
// begin Say ( Burlak , D15-Bur-1 ) ;
13713: LD_EXP 34
13717: PPUSH
13718: LD_STRING D15-Bur-1
13720: PPUSH
13721: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13725: LD_EXP 35
13729: PPUSH
13730: LD_STRING D15-Gny-1
13732: PPUSH
13733: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13737: LD_EXP 39
13741: PPUSH
13742: LD_STRING D15-Kov-1
13744: PPUSH
13745: CALL_OW 88
// end else
13749: GO 13787
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13751: LD_EXP 39
13755: PPUSH
13756: LD_STRING D16-Kov-1
13758: PPUSH
13759: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13763: LD_EXP 34
13767: PPUSH
13768: LD_STRING D16-Bur-1
13770: PPUSH
13771: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13775: LD_EXP 35
13779: PPUSH
13780: LD_STRING D16-Gny-1
13782: PPUSH
13783: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13787: LD_EXP 34
13791: PPUSH
13792: LD_STRING D15-Bur-2
13794: PPUSH
13795: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13799: LD_EXP 39
13803: PPUSH
13804: LD_STRING D15-Kov-2
13806: PPUSH
13807: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13811: LD_EXP 34
13815: PPUSH
13816: LD_STRING D15-Bur-3
13818: PPUSH
13819: CALL_OW 88
// DialogueOff ;
13823: CALL_OW 7
// westOutpostDiscovered := true ;
13827: LD_ADDR_EXP 20
13831: PUSH
13832: LD_INT 1
13834: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13835: LD_STRING M7
13837: PPUSH
13838: CALL_OW 337
// end ;
13842: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13843: LD_INT 3
13845: PPUSH
13846: LD_INT 22
13848: PUSH
13849: LD_INT 1
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 95
13858: PUSH
13859: LD_INT 15
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PPUSH
13870: CALL_OW 69
13874: PPUSH
13875: CALL 57526 0 2
13879: IFFALSE 14020
13881: GO 13883
13883: DISABLE
// begin DialogueOn ;
13884: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13888: LD_INT 95
13890: PPUSH
13891: LD_INT 65
13893: PPUSH
13894: LD_INT 3
13896: PPUSH
13897: LD_INT 12
13899: NEG
13900: PPUSH
13901: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13905: LD_INT 95
13907: PPUSH
13908: LD_INT 65
13910: PPUSH
13911: LD_INT 3
13913: PPUSH
13914: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13918: LD_INT 95
13920: PPUSH
13921: LD_INT 65
13923: PPUSH
13924: CALL_OW 84
// if westOutpostDiscovered then
13928: LD_EXP 20
13932: IFFALSE 13972
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13934: LD_EXP 39
13938: PPUSH
13939: LD_STRING D16-Kov-1
13941: PPUSH
13942: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13946: LD_EXP 34
13950: PPUSH
13951: LD_STRING D16-Bur-1
13953: PPUSH
13954: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13958: LD_EXP 35
13962: PPUSH
13963: LD_STRING D16-Gny-1
13965: PPUSH
13966: CALL_OW 88
// end else
13970: GO 14008
// begin Say ( Burlak , D15-Bur-1 ) ;
13972: LD_EXP 34
13976: PPUSH
13977: LD_STRING D15-Bur-1
13979: PPUSH
13980: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13984: LD_EXP 35
13988: PPUSH
13989: LD_STRING D15-Gny-1
13991: PPUSH
13992: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13996: LD_EXP 39
14000: PPUSH
14001: LD_STRING D15-Kov-1
14003: PPUSH
14004: CALL_OW 88
// end ; DialogueOff ;
14008: CALL_OW 7
// eastOutpostDiscovered := true ;
14012: LD_ADDR_EXP 21
14016: PUSH
14017: LD_INT 1
14019: ST_TO_ADDR
// end ;
14020: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14021: LD_INT 8
14023: PPUSH
14024: LD_INT 22
14026: PUSH
14027: LD_INT 1
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 50
14036: PUSH
14037: EMPTY
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 70
14048: PUSH
14049: LD_INT 0
14051: EQUAL
14052: PUSH
14053: LD_EXP 20
14057: AND
14058: IFFALSE 14102
14060: GO 14062
14062: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14063: LD_EXP 34
14067: PPUSH
14068: LD_STRING D20-Bur-1
14070: PPUSH
14071: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14075: LD_EXP 40
14079: PPUSH
14080: LD_STRING D20-Pla-1
14082: PPUSH
14083: CALL_OW 94
// westOutpostDestroyed := true ;
14087: LD_ADDR_EXP 22
14091: PUSH
14092: LD_INT 1
14094: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14095: LD_STRING M8
14097: PPUSH
14098: CALL_OW 337
// end ;
14102: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14103: LD_INT 15
14105: PPUSH
14106: LD_INT 22
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 50
14118: PUSH
14119: EMPTY
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PPUSH
14126: CALL_OW 70
14130: PUSH
14131: LD_INT 0
14133: EQUAL
14134: PUSH
14135: LD_EXP 21
14139: AND
14140: IFFALSE 14270
14142: GO 14144
14144: DISABLE
14145: LD_INT 0
14147: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14148: LD_EXP 34
14152: PPUSH
14153: LD_STRING D20-Bur-1
14155: PPUSH
14156: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14160: LD_EXP 40
14164: PPUSH
14165: LD_STRING D20-Pla-1
14167: PPUSH
14168: CALL_OW 94
// eastOutpostDestroyed := true ;
14172: LD_ADDR_EXP 23
14176: PUSH
14177: LD_INT 1
14179: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14180: LD_INT 35
14182: PPUSH
14183: CALL_OW 67
// stop_talking := true ;
14187: LD_ADDR_OWVAR 56
14191: PUSH
14192: LD_INT 1
14194: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14195: LD_ADDR_VAR 0 1
14199: PUSH
14200: LD_INT 22
14202: PUSH
14203: LD_INT 3
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 23
14212: PUSH
14213: LD_INT 3
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 21
14222: PUSH
14223: LD_INT 1
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: LIST
14234: PPUSH
14235: CALL_OW 69
14239: PUSH
14240: FOR_IN
14241: IFFALSE 14260
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14243: LD_VAR 0 1
14247: PPUSH
14248: LD_INT 1
14250: PPUSH
14251: LD_INT 1500
14253: PPUSH
14254: CALL_OW 591
14258: GO 14240
14260: POP
14261: POP
// stop_talking := false ;
14262: LD_ADDR_OWVAR 56
14266: PUSH
14267: LD_INT 0
14269: ST_TO_ADDR
// end ;
14270: PPOPN 1
14272: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14273: LD_INT 19
14275: PPUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PPUSH
14300: CALL_OW 70
14304: IFFALSE 14412
14306: GO 14308
14308: DISABLE
// begin DialogueOn ;
14309: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14313: LD_INT 19
14315: PPUSH
14316: LD_INT 22
14318: PUSH
14319: LD_INT 3
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 21
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PPUSH
14340: CALL_OW 70
14344: PPUSH
14345: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14349: LD_EXP 34
14353: PPUSH
14354: LD_STRING D26-Bur-1
14356: PPUSH
14357: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14361: LD_EXP 39
14365: PPUSH
14366: LD_STRING D26-Kov-1
14368: PPUSH
14369: CALL_OW 88
// if IsOk ( Gnyevko ) then
14373: LD_EXP 35
14377: PPUSH
14378: CALL_OW 302
14382: IFFALSE 14408
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14384: LD_EXP 35
14388: PPUSH
14389: LD_STRING D26-Gny-1
14391: PPUSH
14392: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14396: LD_EXP 34
14400: PPUSH
14401: LD_STRING D26-Bur-2
14403: PPUSH
14404: CALL_OW 88
// end ; DialogueOff ;
14408: CALL_OW 7
// end ;
14412: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14413: LD_EXP 21
14417: PUSH
14418: LD_EXP 23
14422: NOT
14423: AND
14424: PUSH
14425: LD_INT 17
14427: PPUSH
14428: LD_INT 22
14430: PUSH
14431: LD_INT 3
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 3
14440: PUSH
14441: LD_INT 24
14443: PUSH
14444: LD_INT 1000
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 70
14463: PUSH
14464: LD_INT 1
14466: GREATER
14467: AND
14468: IFFALSE 14531
14470: GO 14472
14472: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14473: LD_EXP 35
14477: PPUSH
14478: LD_STRING D16A-Gny-1
14480: PPUSH
14481: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D16A-Kov-1
14492: PPUSH
14493: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14497: LD_EXP 35
14501: PPUSH
14502: CALL_OW 302
14506: PUSH
14507: LD_EXP 39
14511: PPUSH
14512: CALL_OW 302
14516: OR
14517: IFFALSE 14531
// Say ( Burlak , D16A-Bur-1 ) ;
14519: LD_EXP 34
14523: PPUSH
14524: LD_STRING D16A-Bur-1
14526: PPUSH
14527: CALL_OW 88
// end ;
14531: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14532: LD_INT 3
14534: PPUSH
14535: LD_INT 9
14537: PPUSH
14538: CALL_OW 294
14542: IFFALSE 14555
14544: GO 14546
14546: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14547: LD_ADDR_EXP 24
14551: PUSH
14552: LD_INT 1
14554: ST_TO_ADDR
// end ;
14555: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14556: LD_INT 3
14558: PPUSH
14559: LD_INT 10
14561: PPUSH
14562: CALL_OW 294
14566: IFFALSE 14586
14568: GO 14570
14570: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14571: LD_ADDR_EXP 27
14575: PUSH
14576: LD_EXP 27
14580: PPUSH
14581: CALL 55614 0 1
14585: ST_TO_ADDR
14586: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14587: LD_INT 3
14589: PPUSH
14590: LD_INT 11
14592: PPUSH
14593: CALL_OW 294
14597: IFFALSE 14617
14599: GO 14601
14601: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14602: LD_ADDR_EXP 27
14606: PUSH
14607: LD_EXP 27
14611: PPUSH
14612: CALL 55614 0 1
14616: ST_TO_ADDR
14617: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14618: LD_INT 3
14620: PPUSH
14621: LD_INT 12
14623: PPUSH
14624: CALL_OW 294
14628: IFFALSE 14648
14630: GO 14632
14632: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14633: LD_ADDR_EXP 27
14637: PUSH
14638: LD_EXP 27
14642: PPUSH
14643: CALL 55614 0 1
14647: ST_TO_ADDR
14648: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14649: LD_INT 3
14651: PPUSH
14652: LD_INT 13
14654: PPUSH
14655: CALL_OW 294
14659: IFFALSE 14679
14661: GO 14663
14663: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14664: LD_ADDR_EXP 27
14668: PUSH
14669: LD_EXP 27
14673: PPUSH
14674: CALL 55614 0 1
14678: ST_TO_ADDR
14679: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14680: LD_INT 3
14682: PPUSH
14683: LD_INT 14
14685: PPUSH
14686: CALL_OW 294
14690: IFFALSE 14710
14692: GO 14694
14694: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14695: LD_ADDR_EXP 27
14699: PUSH
14700: LD_EXP 27
14704: PPUSH
14705: CALL 55614 0 1
14709: ST_TO_ADDR
14710: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14711: LD_EXP 27
14715: PUSH
14716: LD_INT 5
14718: GREATEREQUAL
14719: PUSH
14720: LD_EXP 14
14724: AND
14725: IFFALSE 14745
14727: GO 14729
14729: DISABLE
// begin allMapPointsSpotted := true ;
14730: LD_ADDR_EXP 26
14734: PUSH
14735: LD_INT 1
14737: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14738: LD_STRING M10
14740: PPUSH
14741: CALL_OW 337
// end ;
14745: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14746: LD_EXP 26
14750: PUSH
14751: LD_EXP 22
14755: AND
14756: IFFALSE 14768
14758: GO 14760
14760: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14761: LD_STRING M10a
14763: PPUSH
14764: CALL_OW 337
// end ;
14768: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14769: LD_EXP 14
14773: IFFALSE 15406
14775: GO 14777
14777: DISABLE
14778: LD_INT 0
14780: PPUSH
14781: PPUSH
14782: PPUSH
14783: PPUSH
14784: PPUSH
// begin wasOutsideBeria := false ;
14785: LD_ADDR_VAR 0 3
14789: PUSH
14790: LD_INT 0
14792: ST_TO_ADDR
// wantToTalk := false ;
14793: LD_ADDR_VAR 0 2
14797: PUSH
14798: LD_INT 0
14800: ST_TO_ADDR
// westOutpostReported := false ;
14801: LD_ADDR_VAR 0 4
14805: PUSH
14806: LD_INT 0
14808: ST_TO_ADDR
// eastOutpostReported := false ;
14809: LD_ADDR_VAR 0 5
14813: PUSH
14814: LD_INT 0
14816: ST_TO_ADDR
// timer := 0 0$0 ;
14817: LD_ADDR_VAR 0 1
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14825: LD_INT 70
14827: PPUSH
14828: CALL_OW 67
// timer := timer + 0 0$2 ;
14832: LD_ADDR_VAR 0 1
14836: PUSH
14837: LD_VAR 0 1
14841: PUSH
14842: LD_INT 70
14844: PLUS
14845: ST_TO_ADDR
// if timer >= 0 0$30 then
14846: LD_VAR 0 1
14850: PUSH
14851: LD_INT 1050
14853: GREATEREQUAL
14854: IFFALSE 14864
// wantToTalk := true ;
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: LD_INT 1
14863: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 then
14864: LD_EXP 34
14868: PPUSH
14869: LD_EXP 40
14873: PPUSH
14874: CALL_OW 296
14878: PUSH
14879: LD_INT 9
14881: GREATER
14882: IFFALSE 14892
// wasOutsideBeria := true ;
14884: LD_ADDR_VAR 0 3
14888: PUSH
14889: LD_INT 1
14891: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14892: LD_VAR 0 2
14896: PUSH
14897: LD_VAR 0 3
14901: AND
14902: PUSH
14903: LD_EXP 34
14907: PPUSH
14908: LD_EXP 40
14912: PPUSH
14913: CALL_OW 296
14917: PUSH
14918: LD_INT 8
14920: LESS
14921: PUSH
14922: LD_EXP 34
14926: PPUSH
14927: CALL_OW 310
14931: PPUSH
14932: LD_EXP 40
14936: PPUSH
14937: CALL_OW 296
14941: PUSH
14942: LD_INT 8
14944: LESS
14945: OR
14946: AND
14947: IFFALSE 15295
// begin timer := 0 0$0 ;
14949: LD_ADDR_VAR 0 1
14953: PUSH
14954: LD_INT 0
14956: ST_TO_ADDR
// wantToTalk := false ;
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 0
14964: ST_TO_ADDR
// wasOutsideBeria := false ;
14965: LD_ADDR_VAR 0 3
14969: PUSH
14970: LD_INT 0
14972: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
14973: LD_EXP 40
14977: PPUSH
14978: CALL_OW 87
// DialogueOn ;
14982: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
14986: LD_EXP 40
14990: PPUSH
14991: LD_STRING D25-Pla-1
14993: PPUSH
14994: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
14998: LD_VAR 0 4
15002: NOT
15003: PUSH
15004: LD_VAR 0 5
15008: NOT
15009: AND
15010: PUSH
15011: LD_EXP 20
15015: AND
15016: PUSH
15017: LD_EXP 21
15021: AND
15022: IFFALSE 15102
// begin westOutpostReported := true ;
15024: LD_ADDR_VAR 0 4
15028: PUSH
15029: LD_INT 1
15031: ST_TO_ADDR
// eastOutpostReported := true ;
15032: LD_ADDR_VAR 0 5
15036: PUSH
15037: LD_INT 1
15039: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15040: LD_EXP 34
15044: PPUSH
15045: LD_STRING D25-Bur-1
15047: PPUSH
15048: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15052: LD_EXP 24
15056: PUSH
15057: LD_EXP 22
15061: NOT
15062: AND
15063: IFFALSE 15100
// begin Say ( Burlak , D25b-Bur-1 ) ;
15065: LD_EXP 34
15069: PPUSH
15070: LD_STRING D25b-Bur-1
15072: PPUSH
15073: CALL_OW 88
// if not reinforcementsGained then
15077: LD_EXP 25
15081: NOT
15082: IFFALSE 15100
// begin Say ( Platonov , D25b-Pla-1 ) ;
15084: LD_EXP 40
15088: PPUSH
15089: LD_STRING D25b-Pla-1
15091: PPUSH
15092: CALL_OW 88
// SendReinforcements ( ) ;
15096: CALL 3302 0 0
// end ; end ; end else
15100: GO 15291
// if not westOutpostReported and westOutpostDiscovered then
15102: LD_VAR 0 4
15106: NOT
15107: PUSH
15108: LD_EXP 20
15112: AND
15113: IFFALSE 15185
// begin westOutpostReported := true ;
15115: LD_ADDR_VAR 0 4
15119: PUSH
15120: LD_INT 1
15122: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15123: LD_EXP 34
15127: PPUSH
15128: LD_STRING D25a-Bur-1b
15130: PPUSH
15131: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15135: LD_EXP 24
15139: PUSH
15140: LD_EXP 22
15144: NOT
15145: AND
15146: IFFALSE 15183
// begin Say ( Burlak , D25b-Bur-1 ) ;
15148: LD_EXP 34
15152: PPUSH
15153: LD_STRING D25b-Bur-1
15155: PPUSH
15156: CALL_OW 88
// if not reinforcementsGained then
15160: LD_EXP 25
15164: NOT
15165: IFFALSE 15183
// begin Say ( Platonov , D25b-Pla-1 ) ;
15167: LD_EXP 40
15171: PPUSH
15172: LD_STRING D25b-Pla-1
15174: PPUSH
15175: CALL_OW 88
// SendReinforcements ( ) ;
15179: CALL 3302 0 0
// end ; end ; end else
15183: GO 15291
// if not eastOutpostReported and eastOutpostDiscovered then
15185: LD_VAR 0 5
15189: NOT
15190: PUSH
15191: LD_EXP 21
15195: AND
15196: IFFALSE 15220
// begin eastOutpostReported := true ;
15198: LD_ADDR_VAR 0 5
15202: PUSH
15203: LD_INT 1
15205: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15206: LD_EXP 34
15210: PPUSH
15211: LD_STRING D25a-Bur-1a
15213: PPUSH
15214: CALL_OW 88
// end else
15218: GO 15291
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15220: LD_EXP 20
15224: NOT
15225: PUSH
15226: LD_EXP 21
15230: NOT
15231: OR
15232: IFFALSE 15260
// begin Say ( Burlak , D25a-Bur-1 ) ;
15234: LD_EXP 34
15238: PPUSH
15239: LD_STRING D25a-Bur-1
15241: PPUSH
15242: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15246: LD_EXP 40
15250: PPUSH
15251: LD_STRING D25c-Pla-1
15253: PPUSH
15254: CALL_OW 88
// end else
15258: GO 15291
// if not allMapPointsSpotted then
15260: LD_EXP 26
15264: NOT
15265: IFFALSE 15291
// begin Say ( Burlak , D25a-Bur-1 ) ;
15267: LD_EXP 34
15271: PPUSH
15272: LD_STRING D25a-Bur-1
15274: PPUSH
15275: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15279: LD_EXP 40
15283: PPUSH
15284: LD_STRING D25c-Pla-1a
15286: PPUSH
15287: CALL_OW 88
// end ; DialogueOff ;
15291: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15295: LD_EXP 26
15299: PUSH
15300: LD_EXP 22
15304: AND
15305: IFFALSE 14825
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15307: LD_INT 22
15309: PUSH
15310: LD_INT 3
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 21
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 91
15329: PUSH
15330: LD_EXP 40
15334: PUSH
15335: LD_INT 10
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: PPUSH
15348: CALL_OW 69
15352: IFFALSE 15395
// begin if not belkovDied and not belkovSaved then
15354: LD_EXP 19
15358: NOT
15359: PUSH
15360: LD_EXP 28
15364: NOT
15365: AND
15366: IFFALSE 15389
// begin if Query ( QContMission ) = 1 then
15368: LD_STRING QContMission
15370: PPUSH
15371: CALL_OW 97
15375: PUSH
15376: LD_INT 1
15378: EQUAL
15379: IFFALSE 15387
// begin EndMission ;
15381: CALL 15409 0 0
// exit ;
15385: GO 15406
// end ; end else
15387: GO 15395
// begin EndMission ;
15389: CALL 15409 0 0
// exit ;
15393: GO 15406
// end ; end ; wait ( 0 0$10 ) ;
15395: LD_INT 350
15397: PPUSH
15398: CALL_OW 67
// until false ;
15402: LD_INT 0
15404: IFFALSE 15307
// end ;
15406: PPOPN 5
15408: END
// function EndMission ; var i , tmp ; begin
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// if initiative then
15414: LD_EXP 31
15418: IFFALSE 15432
// AddMedal ( Initiative , 1 ) else
15420: LD_STRING Initiative
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: CALL_OW 101
15430: GO 15463
// if not eastOutpostDestroyed then
15432: LD_EXP 23
15436: NOT
15437: IFFALSE 15452
// AddMedal ( Initiative , - 2 ) else
15439: LD_STRING Initiative
15441: PPUSH
15442: LD_INT 2
15444: NEG
15445: PPUSH
15446: CALL_OW 101
15450: GO 15463
// AddMedal ( Initiative , - 1 ) ;
15452: LD_STRING Initiative
15454: PPUSH
15455: LD_INT 1
15457: NEG
15458: PPUSH
15459: CALL_OW 101
// if not belkovDied and belkovSaved then
15463: LD_EXP 19
15467: NOT
15468: PUSH
15469: LD_EXP 28
15473: AND
15474: IFFALSE 15488
// AddMedal ( Belkov , 1 ) else
15476: LD_STRING Belkov
15478: PPUSH
15479: LD_INT 1
15481: PPUSH
15482: CALL_OW 101
15486: GO 15583
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15488: LD_EXP 45
15492: PPUSH
15493: LD_INT 22
15495: PUSH
15496: LD_INT 3
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PPUSH
15503: CALL_OW 72
15507: IFFALSE 15521
// AddMedal ( Belkov , 2 ) else
15509: LD_STRING Belkov
15511: PPUSH
15512: LD_INT 2
15514: PPUSH
15515: CALL_OW 101
15519: GO 15583
// if belkovDied then
15521: LD_EXP 19
15525: IFFALSE 15540
// AddMedal ( Belkov , - 1 ) else
15527: LD_STRING Belkov
15529: PPUSH
15530: LD_INT 1
15532: NEG
15533: PPUSH
15534: CALL_OW 101
15538: GO 15583
// if not belkovSaved then
15540: LD_EXP 28
15544: NOT
15545: IFFALSE 15560
// AddMedal ( Belkov , - 2 ) else
15547: LD_STRING Belkov
15549: PPUSH
15550: LD_INT 2
15552: NEG
15553: PPUSH
15554: CALL_OW 101
15558: GO 15583
// if belkovDied and belkovSaved then
15560: LD_EXP 19
15564: PUSH
15565: LD_EXP 28
15569: AND
15570: IFFALSE 15583
// AddMedal ( Belkov , - 3 ) ;
15572: LD_STRING Belkov
15574: PPUSH
15575: LD_INT 3
15577: NEG
15578: PPUSH
15579: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15583: LD_EXP 30
15587: PUSH
15588: LD_INT 0
15590: EQUAL
15591: IFFALSE 15605
// AddMedal ( NoLosses , 1 ) else
15593: LD_STRING NoLosses
15595: PPUSH
15596: LD_INT 1
15598: PPUSH
15599: CALL_OW 101
15603: GO 15616
// AddMedal ( NoLosses , - 1 ) ;
15605: LD_STRING NoLosses
15607: PPUSH
15608: LD_INT 1
15610: NEG
15611: PPUSH
15612: CALL_OW 101
// GiveMedals ( Main ) ;
15616: LD_STRING Main
15618: PPUSH
15619: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15623: LD_INT 22
15625: PUSH
15626: LD_INT 3
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 23
15635: PUSH
15636: LD_INT 3
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 21
15645: PUSH
15646: LD_INT 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 69
15662: PPUSH
15663: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15667: LD_EXP 34
15671: PPUSH
15672: LD_EXP 3
15676: PUSH
15677: LD_STRING Burlak
15679: STR
15680: PPUSH
15681: CALL_OW 38
// if IsLive ( Gnyevko ) then
15685: LD_EXP 35
15689: PPUSH
15690: CALL_OW 300
15694: IFFALSE 15714
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15696: LD_EXP 35
15700: PPUSH
15701: LD_EXP 3
15705: PUSH
15706: LD_STRING Gnyevko
15708: STR
15709: PPUSH
15710: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15714: LD_EXP 39
15718: PPUSH
15719: CALL_OW 300
15723: IFFALSE 15743
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15725: LD_EXP 39
15729: PPUSH
15730: LD_EXP 3
15734: PUSH
15735: LD_STRING Kovalyuk
15737: STR
15738: PPUSH
15739: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15743: LD_EXP 36
15747: PPUSH
15748: CALL_OW 300
15752: PUSH
15753: LD_EXP 28
15757: AND
15758: IFFALSE 15778
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15760: LD_EXP 36
15764: PPUSH
15765: LD_EXP 3
15769: PUSH
15770: LD_STRING Belkov
15772: STR
15773: PPUSH
15774: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15778: LD_EXP 37
15782: PPUSH
15783: CALL_OW 300
15787: IFFALSE 15807
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15789: LD_EXP 37
15793: PPUSH
15794: LD_EXP 3
15798: PUSH
15799: LD_STRING Kirilenkova
15801: STR
15802: PPUSH
15803: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15807: LD_INT 22
15809: PUSH
15810: LD_INT 3
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 23
15819: PUSH
15820: LD_INT 3
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 21
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 69
15846: PUSH
15847: LD_EXP 34
15851: PUSH
15852: LD_EXP 35
15856: PUSH
15857: LD_EXP 39
15861: PUSH
15862: LD_EXP 36
15866: PUSH
15867: LD_EXP 37
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: DIFF
15879: PPUSH
15880: LD_EXP 3
15884: PUSH
15885: LD_STRING burlakTeam
15887: STR
15888: PPUSH
15889: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15893: LD_INT 22
15895: PUSH
15896: LD_INT 6
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 23
15905: PUSH
15906: LD_INT 3
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 21
15915: PUSH
15916: LD_INT 1
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 69
15932: PUSH
15933: LD_EXP 40
15937: PUSH
15938: LD_EXP 38
15942: PUSH
15943: LD_EXP 36
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: LD_EXP 45
15957: UNION
15958: DIFF
15959: PPUSH
15960: LD_EXP 3
15964: PUSH
15965: LD_STRING kirovTeam
15967: STR
15968: PPUSH
15969: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
15973: LD_EXP 23
15977: PPUSH
15978: LD_STRING 02_EasternOutpostDestroyed
15980: PPUSH
15981: CALL_OW 39
// tmp := [ ] ;
15985: LD_ADDR_VAR 0 3
15989: PUSH
15990: EMPTY
15991: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
15992: LD_ADDR_VAR 0 2
15996: PUSH
15997: LD_INT 22
15999: PUSH
16000: LD_INT 3
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 21
16009: PUSH
16010: LD_INT 3
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PPUSH
16021: CALL_OW 69
16025: PUSH
16026: FOR_IN
16027: IFFALSE 16103
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16029: LD_ADDR_VAR 0 3
16033: PUSH
16034: LD_VAR 0 3
16038: PPUSH
16039: LD_VAR 0 2
16043: PPUSH
16044: CALL_OW 266
16048: PUSH
16049: LD_VAR 0 2
16053: PPUSH
16054: CALL_OW 267
16058: PUSH
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL_OW 250
16068: PUSH
16069: LD_VAR 0 2
16073: PPUSH
16074: CALL_OW 251
16078: PUSH
16079: LD_VAR 0 2
16083: PPUSH
16084: CALL_OW 254
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL 54253 0 2
16100: ST_TO_ADDR
16101: GO 16026
16103: POP
16104: POP
// SaveVariable ( tmp , 02_Beria ) ;
16105: LD_VAR 0 3
16109: PPUSH
16110: LD_STRING 02_Beria
16112: PPUSH
16113: CALL_OW 39
// tmp := [ ] ;
16117: LD_ADDR_VAR 0 3
16121: PUSH
16122: EMPTY
16123: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16124: LD_ADDR_VAR 0 2
16128: PUSH
16129: LD_INT 22
16131: PUSH
16132: LD_INT 6
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 21
16141: PUSH
16142: LD_INT 3
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PPUSH
16153: CALL_OW 69
16157: PUSH
16158: FOR_IN
16159: IFFALSE 16235
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16161: LD_ADDR_VAR 0 3
16165: PUSH
16166: LD_VAR 0 3
16170: PPUSH
16171: LD_VAR 0 2
16175: PPUSH
16176: CALL_OW 266
16180: PUSH
16181: LD_VAR 0 2
16185: PPUSH
16186: CALL_OW 267
16190: PUSH
16191: LD_VAR 0 2
16195: PPUSH
16196: CALL_OW 250
16200: PUSH
16201: LD_VAR 0 2
16205: PPUSH
16206: CALL_OW 251
16210: PUSH
16211: LD_VAR 0 2
16215: PPUSH
16216: CALL_OW 254
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL 54253 0 2
16232: ST_TO_ADDR
16233: GO 16158
16235: POP
16236: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_STRING 02_Kirov
16244: PPUSH
16245: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16249: LD_INT 22
16251: PUSH
16252: LD_INT 3
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PPUSH
16273: CALL_OW 69
16277: PPUSH
16278: CALL 19034 0 1
16282: PPUSH
16283: LD_STRING 02_VehiclesCount
16285: PPUSH
16286: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16290: LD_INT 22
16292: PUSH
16293: LD_INT 6
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 21
16302: PUSH
16303: LD_INT 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PPUSH
16314: CALL_OW 69
16318: PPUSH
16319: CALL 19034 0 1
16323: PPUSH
16324: LD_STRING 02_KirovVehiclesCount
16326: PPUSH
16327: CALL_OW 39
// YouWin ;
16331: CALL_OW 103
// end ; end_of_file
16335: LD_VAR 0 1
16339: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16340: LD_INT 420
16342: PPUSH
16343: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16347: LD_VAR 0 2
16351: PPUSH
16352: LD_VAR 0 3
16356: PPUSH
16357: CALL 8000 0 2
// end ;
16361: PPOPN 5
16363: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16364: LD_VAR 0 1
16368: PPUSH
16369: CALL 74499 0 1
// if un = Burlak then
16373: LD_VAR 0 1
16377: PUSH
16378: LD_EXP 34
16382: EQUAL
16383: IFFALSE 16392
// YouLost ( Burlak ) ;
16385: LD_STRING Burlak
16387: PPUSH
16388: CALL_OW 104
// if un = Platonov then
16392: LD_VAR 0 1
16396: PUSH
16397: LD_EXP 40
16401: EQUAL
16402: IFFALSE 16411
// YouLost ( Platonov ) ;
16404: LD_STRING Platonov
16406: PPUSH
16407: CALL_OW 104
// if un = Kurin then
16411: LD_VAR 0 1
16415: PUSH
16416: LD_EXP 38
16420: EQUAL
16421: IFFALSE 16430
// YouLost ( Kurin ) ;
16423: LD_STRING Kurin
16425: PPUSH
16426: CALL_OW 104
// if un = Belkov then
16430: LD_VAR 0 1
16434: PUSH
16435: LD_EXP 36
16439: EQUAL
16440: IFFALSE 16450
// belkovDied := true ;
16442: LD_ADDR_EXP 19
16446: PUSH
16447: LD_INT 1
16449: ST_TO_ADDR
// if un in belkovTeam then
16450: LD_VAR 0 1
16454: PUSH
16455: LD_EXP 45
16459: IN
16460: IFFALSE 16493
// begin belkovTeam := belkovTeam diff un ;
16462: LD_ADDR_EXP 45
16466: PUSH
16467: LD_EXP 45
16471: PUSH
16472: LD_VAR 0 1
16476: DIFF
16477: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16478: LD_ADDR_EXP 29
16482: PUSH
16483: LD_EXP 29
16487: PPUSH
16488: CALL 55614 0 1
16492: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16493: LD_VAR 0 1
16497: PUSH
16498: LD_INT 22
16500: PUSH
16501: LD_INT 3
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 21
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 23
16520: PUSH
16521: LD_INT 3
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: PPUSH
16533: CALL_OW 69
16537: IN
16538: IFFALSE 16555
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16540: LD_ADDR_EXP 30
16544: PUSH
16545: LD_EXP 30
16549: PPUSH
16550: CALL 55614 0 1
16554: ST_TO_ADDR
// if un in usWestForces then
16555: LD_VAR 0 1
16559: PUSH
16560: LD_EXP 46
16564: IN
16565: IFFALSE 16583
// usWestForces := usWestForces diff un ;
16567: LD_ADDR_EXP 46
16571: PUSH
16572: LD_EXP 46
16576: PUSH
16577: LD_VAR 0 1
16581: DIFF
16582: ST_TO_ADDR
// if un in usEastForces then
16583: LD_VAR 0 1
16587: PUSH
16588: LD_EXP 47
16592: IN
16593: IFFALSE 16611
// usEastForces := usEastForces diff un ;
16595: LD_ADDR_EXP 47
16599: PUSH
16600: LD_EXP 47
16604: PUSH
16605: LD_VAR 0 1
16609: DIFF
16610: ST_TO_ADDR
// end ;
16611: PPOPN 1
16613: END
// on BuildingComplete ( b ) do var mech ;
16614: LD_INT 0
16616: PPUSH
// begin if GetSide ( b ) = 3 then
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 255
16626: PUSH
16627: LD_INT 3
16629: EQUAL
16630: IFFALSE 16689
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16632: LD_VAR 0 1
16636: PPUSH
16637: CALL_OW 266
16641: PUSH
16642: LD_INT 6
16644: PUSH
16645: LD_INT 7
16647: PUSH
16648: LD_INT 8
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: IN
16656: IFFALSE 16666
// hasLab := true ;
16658: LD_ADDR_EXP 9
16662: PUSH
16663: LD_INT 1
16665: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 266
16675: PUSH
16676: LD_INT 2
16678: EQUAL
16679: IFFALSE 16689
// hasWorkshop := true ;
16681: LD_ADDR_EXP 10
16685: PUSH
16686: LD_INT 1
16688: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 255
16698: PUSH
16699: LD_INT 6
16701: EQUAL
16702: IFFALSE 16776
// begin if GetBType ( b ) = b_workshop then
16704: LD_VAR 0 1
16708: PPUSH
16709: CALL_OW 266
16713: PUSH
16714: LD_INT 2
16716: EQUAL
16717: IFFALSE 16776
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16719: LD_ADDR_VAR 0 2
16723: PUSH
16724: LD_EXP 43
16728: PPUSH
16729: LD_INT 25
16731: PUSH
16732: LD_INT 3
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PPUSH
16739: CALL_OW 72
16743: ST_TO_ADDR
// if not mech then
16744: LD_VAR 0 2
16748: NOT
16749: IFFALSE 16753
// exit ;
16751: GO 16776
// ComExit ( mech ) ;
16753: LD_VAR 0 2
16757: PPUSH
16758: CALL 54651 0 1
// AddComEnterUnit ( mech , b ) ;
16762: LD_VAR 0 2
16766: PPUSH
16767: LD_VAR 0 1
16771: PPUSH
16772: CALL_OW 180
// end ; end ; end ;
16776: PPOPN 2
16778: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16779: LD_VAR 0 1
16783: PPUSH
16784: LD_VAR 0 2
16788: PPUSH
16789: CALL 74619 0 2
// if GetSide ( vehicle ) = 3 then
16793: LD_VAR 0 1
16797: PPUSH
16798: CALL_OW 255
16802: PUSH
16803: LD_INT 3
16805: EQUAL
16806: IFFALSE 16831
// begin hasTank := true ;
16808: LD_ADDR_EXP 12
16812: PUSH
16813: LD_INT 1
16815: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16816: LD_ADDR_EXP 15
16820: PUSH
16821: LD_EXP 15
16825: PPUSH
16826: CALL 55614 0 1
16830: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16831: LD_VAR 0 1
16835: PPUSH
16836: CALL_OW 255
16840: PUSH
16841: LD_INT 6
16843: EQUAL
16844: IFFALSE 16855
// KirovAttack ( vehicle ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: CALL 3608 0 1
// end ;
16855: PPOPN 2
16857: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16858: LD_VAR 0 1
16862: PUSH
16863: LD_EXP 33
16867: EQUAL
16868: IFFALSE 16874
// BelkovAttackScript ;
16870: CALL 1673 0 0
// end ;
16874: PPOPN 1
16876: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16877: LD_INT 0
16879: PPUSH
// begin if side = 1 then
16880: LD_VAR 0 3
16884: PUSH
16885: LD_INT 1
16887: EQUAL
16888: IFFALSE 16898
// vehCaptured := true ;
16890: LD_ADDR_EXP 16
16894: PUSH
16895: LD_INT 1
16897: ST_TO_ADDR
// end ;
16898: PPOPN 5
16900: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16901: LD_VAR 0 1
16905: PUSH
16906: LD_INT 3
16908: EQUAL
16909: PUSH
16910: LD_VAR 0 2
16914: PUSH
16915: LD_INT 6
16917: EQUAL
16918: AND
16919: IFFALSE 16929
// allianceAttacked := true ;
16921: LD_ADDR_EXP 13
16925: PUSH
16926: LD_INT 1
16928: ST_TO_ADDR
// end ; end_of_file
16929: PPOPN 2
16931: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16932: LD_INT 0
16934: PPUSH
16935: PPUSH
// if exist_mode then
16936: LD_VAR 0 2
16940: IFFALSE 16965
// unit := CreateCharacter ( prefix & ident ) else
16942: LD_ADDR_VAR 0 5
16946: PUSH
16947: LD_VAR 0 3
16951: PUSH
16952: LD_VAR 0 1
16956: STR
16957: PPUSH
16958: CALL_OW 34
16962: ST_TO_ADDR
16963: GO 16980
// unit := NewCharacter ( ident ) ;
16965: LD_ADDR_VAR 0 5
16969: PUSH
16970: LD_VAR 0 1
16974: PPUSH
16975: CALL_OW 25
16979: ST_TO_ADDR
// result := unit ;
16980: LD_ADDR_VAR 0 4
16984: PUSH
16985: LD_VAR 0 5
16989: ST_TO_ADDR
// end ;
16990: LD_VAR 0 4
16994: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16995: LD_INT 0
16997: PPUSH
16998: PPUSH
// if not side or not nation then
16999: LD_VAR 0 1
17003: NOT
17004: PUSH
17005: LD_VAR 0 2
17009: NOT
17010: OR
17011: IFFALSE 17015
// exit ;
17013: GO 17783
// case nation of nation_american :
17015: LD_VAR 0 2
17019: PUSH
17020: LD_INT 1
17022: DOUBLE
17023: EQUAL
17024: IFTRUE 17028
17026: GO 17242
17028: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17029: LD_ADDR_VAR 0 4
17033: PUSH
17034: LD_INT 35
17036: PUSH
17037: LD_INT 45
17039: PUSH
17040: LD_INT 46
17042: PUSH
17043: LD_INT 47
17045: PUSH
17046: LD_INT 82
17048: PUSH
17049: LD_INT 83
17051: PUSH
17052: LD_INT 84
17054: PUSH
17055: LD_INT 85
17057: PUSH
17058: LD_INT 86
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: LD_INT 2
17066: PUSH
17067: LD_INT 6
17069: PUSH
17070: LD_INT 15
17072: PUSH
17073: LD_INT 16
17075: PUSH
17076: LD_INT 7
17078: PUSH
17079: LD_INT 12
17081: PUSH
17082: LD_INT 13
17084: PUSH
17085: LD_INT 10
17087: PUSH
17088: LD_INT 14
17090: PUSH
17091: LD_INT 20
17093: PUSH
17094: LD_INT 21
17096: PUSH
17097: LD_INT 22
17099: PUSH
17100: LD_INT 25
17102: PUSH
17103: LD_INT 32
17105: PUSH
17106: LD_INT 27
17108: PUSH
17109: LD_INT 36
17111: PUSH
17112: LD_INT 69
17114: PUSH
17115: LD_INT 39
17117: PUSH
17118: LD_INT 34
17120: PUSH
17121: LD_INT 40
17123: PUSH
17124: LD_INT 48
17126: PUSH
17127: LD_INT 49
17129: PUSH
17130: LD_INT 50
17132: PUSH
17133: LD_INT 51
17135: PUSH
17136: LD_INT 52
17138: PUSH
17139: LD_INT 53
17141: PUSH
17142: LD_INT 54
17144: PUSH
17145: LD_INT 55
17147: PUSH
17148: LD_INT 56
17150: PUSH
17151: LD_INT 57
17153: PUSH
17154: LD_INT 58
17156: PUSH
17157: LD_INT 59
17159: PUSH
17160: LD_INT 60
17162: PUSH
17163: LD_INT 61
17165: PUSH
17166: LD_INT 62
17168: PUSH
17169: LD_INT 80
17171: PUSH
17172: LD_INT 82
17174: PUSH
17175: LD_INT 83
17177: PUSH
17178: LD_INT 84
17180: PUSH
17181: LD_INT 85
17183: PUSH
17184: LD_INT 86
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: ST_TO_ADDR
17240: GO 17707
17242: LD_INT 2
17244: DOUBLE
17245: EQUAL
17246: IFTRUE 17250
17248: GO 17476
17250: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17251: LD_ADDR_VAR 0 4
17255: PUSH
17256: LD_INT 35
17258: PUSH
17259: LD_INT 45
17261: PUSH
17262: LD_INT 46
17264: PUSH
17265: LD_INT 47
17267: PUSH
17268: LD_INT 82
17270: PUSH
17271: LD_INT 83
17273: PUSH
17274: LD_INT 84
17276: PUSH
17277: LD_INT 85
17279: PUSH
17280: LD_INT 87
17282: PUSH
17283: LD_INT 70
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 11
17291: PUSH
17292: LD_INT 3
17294: PUSH
17295: LD_INT 4
17297: PUSH
17298: LD_INT 5
17300: PUSH
17301: LD_INT 6
17303: PUSH
17304: LD_INT 15
17306: PUSH
17307: LD_INT 18
17309: PUSH
17310: LD_INT 7
17312: PUSH
17313: LD_INT 17
17315: PUSH
17316: LD_INT 8
17318: PUSH
17319: LD_INT 20
17321: PUSH
17322: LD_INT 21
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_INT 72
17330: PUSH
17331: LD_INT 26
17333: PUSH
17334: LD_INT 69
17336: PUSH
17337: LD_INT 39
17339: PUSH
17340: LD_INT 40
17342: PUSH
17343: LD_INT 41
17345: PUSH
17346: LD_INT 42
17348: PUSH
17349: LD_INT 43
17351: PUSH
17352: LD_INT 48
17354: PUSH
17355: LD_INT 49
17357: PUSH
17358: LD_INT 50
17360: PUSH
17361: LD_INT 51
17363: PUSH
17364: LD_INT 52
17366: PUSH
17367: LD_INT 53
17369: PUSH
17370: LD_INT 54
17372: PUSH
17373: LD_INT 55
17375: PUSH
17376: LD_INT 56
17378: PUSH
17379: LD_INT 60
17381: PUSH
17382: LD_INT 61
17384: PUSH
17385: LD_INT 62
17387: PUSH
17388: LD_INT 66
17390: PUSH
17391: LD_INT 67
17393: PUSH
17394: LD_INT 68
17396: PUSH
17397: LD_INT 81
17399: PUSH
17400: LD_INT 82
17402: PUSH
17403: LD_INT 83
17405: PUSH
17406: LD_INT 84
17408: PUSH
17409: LD_INT 85
17411: PUSH
17412: LD_INT 87
17414: PUSH
17415: LD_INT 88
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: ST_TO_ADDR
17474: GO 17707
17476: LD_INT 3
17478: DOUBLE
17479: EQUAL
17480: IFTRUE 17484
17482: GO 17706
17484: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17485: LD_ADDR_VAR 0 4
17489: PUSH
17490: LD_INT 46
17492: PUSH
17493: LD_INT 47
17495: PUSH
17496: LD_INT 1
17498: PUSH
17499: LD_INT 2
17501: PUSH
17502: LD_INT 82
17504: PUSH
17505: LD_INT 83
17507: PUSH
17508: LD_INT 84
17510: PUSH
17511: LD_INT 85
17513: PUSH
17514: LD_INT 86
17516: PUSH
17517: LD_INT 11
17519: PUSH
17520: LD_INT 9
17522: PUSH
17523: LD_INT 20
17525: PUSH
17526: LD_INT 19
17528: PUSH
17529: LD_INT 21
17531: PUSH
17532: LD_INT 24
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_INT 25
17540: PUSH
17541: LD_INT 28
17543: PUSH
17544: LD_INT 29
17546: PUSH
17547: LD_INT 30
17549: PUSH
17550: LD_INT 31
17552: PUSH
17553: LD_INT 37
17555: PUSH
17556: LD_INT 38
17558: PUSH
17559: LD_INT 32
17561: PUSH
17562: LD_INT 27
17564: PUSH
17565: LD_INT 33
17567: PUSH
17568: LD_INT 69
17570: PUSH
17571: LD_INT 39
17573: PUSH
17574: LD_INT 34
17576: PUSH
17577: LD_INT 40
17579: PUSH
17580: LD_INT 71
17582: PUSH
17583: LD_INT 23
17585: PUSH
17586: LD_INT 44
17588: PUSH
17589: LD_INT 48
17591: PUSH
17592: LD_INT 49
17594: PUSH
17595: LD_INT 50
17597: PUSH
17598: LD_INT 51
17600: PUSH
17601: LD_INT 52
17603: PUSH
17604: LD_INT 53
17606: PUSH
17607: LD_INT 54
17609: PUSH
17610: LD_INT 55
17612: PUSH
17613: LD_INT 56
17615: PUSH
17616: LD_INT 57
17618: PUSH
17619: LD_INT 58
17621: PUSH
17622: LD_INT 59
17624: PUSH
17625: LD_INT 63
17627: PUSH
17628: LD_INT 64
17630: PUSH
17631: LD_INT 65
17633: PUSH
17634: LD_INT 82
17636: PUSH
17637: LD_INT 83
17639: PUSH
17640: LD_INT 84
17642: PUSH
17643: LD_INT 85
17645: PUSH
17646: LD_INT 86
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: ST_TO_ADDR
17704: GO 17707
17706: POP
// if state > - 1 and state < 3 then
17707: LD_VAR 0 3
17711: PUSH
17712: LD_INT 1
17714: NEG
17715: GREATER
17716: PUSH
17717: LD_VAR 0 3
17721: PUSH
17722: LD_INT 3
17724: LESS
17725: AND
17726: IFFALSE 17783
// for i in result do
17728: LD_ADDR_VAR 0 5
17732: PUSH
17733: LD_VAR 0 4
17737: PUSH
17738: FOR_IN
17739: IFFALSE 17781
// if GetTech ( i , side ) <> state then
17741: LD_VAR 0 5
17745: PPUSH
17746: LD_VAR 0 1
17750: PPUSH
17751: CALL_OW 321
17755: PUSH
17756: LD_VAR 0 3
17760: NONEQUAL
17761: IFFALSE 17779
// result := result diff i ;
17763: LD_ADDR_VAR 0 4
17767: PUSH
17768: LD_VAR 0 4
17772: PUSH
17773: LD_VAR 0 5
17777: DIFF
17778: ST_TO_ADDR
17779: GO 17738
17781: POP
17782: POP
// end ;
17783: LD_VAR 0 4
17787: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17788: LD_INT 0
17790: PPUSH
17791: PPUSH
17792: PPUSH
// result := true ;
17793: LD_ADDR_VAR 0 3
17797: PUSH
17798: LD_INT 1
17800: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17801: LD_ADDR_VAR 0 5
17805: PUSH
17806: LD_VAR 0 2
17810: PPUSH
17811: CALL_OW 480
17815: ST_TO_ADDR
// if not tmp then
17816: LD_VAR 0 5
17820: NOT
17821: IFFALSE 17825
// exit ;
17823: GO 17874
// for i in tmp do
17825: LD_ADDR_VAR 0 4
17829: PUSH
17830: LD_VAR 0 5
17834: PUSH
17835: FOR_IN
17836: IFFALSE 17872
// if GetTech ( i , side ) <> state_researched then
17838: LD_VAR 0 4
17842: PPUSH
17843: LD_VAR 0 1
17847: PPUSH
17848: CALL_OW 321
17852: PUSH
17853: LD_INT 2
17855: NONEQUAL
17856: IFFALSE 17870
// begin result := false ;
17858: LD_ADDR_VAR 0 3
17862: PUSH
17863: LD_INT 0
17865: ST_TO_ADDR
// exit ;
17866: POP
17867: POP
17868: GO 17874
// end ;
17870: GO 17835
17872: POP
17873: POP
// end ;
17874: LD_VAR 0 3
17878: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
17886: PPUSH
17887: PPUSH
17888: PPUSH
17889: PPUSH
17890: PPUSH
17891: PPUSH
17892: PPUSH
17893: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17894: LD_VAR 0 1
17898: NOT
17899: PUSH
17900: LD_VAR 0 1
17904: PPUSH
17905: CALL_OW 257
17909: PUSH
17910: LD_INT 9
17912: NONEQUAL
17913: OR
17914: IFFALSE 17918
// exit ;
17916: GO 18491
// side := GetSide ( unit ) ;
17918: LD_ADDR_VAR 0 9
17922: PUSH
17923: LD_VAR 0 1
17927: PPUSH
17928: CALL_OW 255
17932: ST_TO_ADDR
// tech_space := tech_spacanom ;
17933: LD_ADDR_VAR 0 12
17937: PUSH
17938: LD_INT 29
17940: ST_TO_ADDR
// tech_time := tech_taurad ;
17941: LD_ADDR_VAR 0 13
17945: PUSH
17946: LD_INT 28
17948: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17949: LD_ADDR_VAR 0 11
17953: PUSH
17954: LD_VAR 0 1
17958: PPUSH
17959: CALL_OW 310
17963: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17964: LD_VAR 0 11
17968: PPUSH
17969: CALL_OW 247
17973: PUSH
17974: LD_INT 2
17976: EQUAL
17977: IFFALSE 17981
// exit ;
17979: GO 18491
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17981: LD_ADDR_VAR 0 8
17985: PUSH
17986: LD_INT 81
17988: PUSH
17989: LD_VAR 0 9
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: LD_INT 21
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PPUSH
18019: CALL_OW 69
18023: ST_TO_ADDR
// if not tmp then
18024: LD_VAR 0 8
18028: NOT
18029: IFFALSE 18033
// exit ;
18031: GO 18491
// if in_unit then
18033: LD_VAR 0 11
18037: IFFALSE 18061
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18039: LD_ADDR_VAR 0 10
18043: PUSH
18044: LD_VAR 0 8
18048: PPUSH
18049: LD_VAR 0 11
18053: PPUSH
18054: CALL_OW 74
18058: ST_TO_ADDR
18059: GO 18081
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18061: LD_ADDR_VAR 0 10
18065: PUSH
18066: LD_VAR 0 8
18070: PPUSH
18071: LD_VAR 0 1
18075: PPUSH
18076: CALL_OW 74
18080: ST_TO_ADDR
// if not enemy then
18081: LD_VAR 0 10
18085: NOT
18086: IFFALSE 18090
// exit ;
18088: GO 18491
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18090: LD_VAR 0 11
18094: PUSH
18095: LD_VAR 0 11
18099: PPUSH
18100: LD_VAR 0 10
18104: PPUSH
18105: CALL_OW 296
18109: PUSH
18110: LD_INT 13
18112: GREATER
18113: AND
18114: PUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: LD_VAR 0 10
18124: PPUSH
18125: CALL_OW 296
18129: PUSH
18130: LD_INT 12
18132: GREATER
18133: OR
18134: IFFALSE 18138
// exit ;
18136: GO 18491
// missile := [ 1 ] ;
18138: LD_ADDR_VAR 0 14
18142: PUSH
18143: LD_INT 1
18145: PUSH
18146: EMPTY
18147: LIST
18148: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18149: LD_VAR 0 9
18153: PPUSH
18154: LD_VAR 0 12
18158: PPUSH
18159: CALL_OW 325
18163: IFFALSE 18192
// missile := Replace ( missile , missile + 1 , 2 ) ;
18165: LD_ADDR_VAR 0 14
18169: PUSH
18170: LD_VAR 0 14
18174: PPUSH
18175: LD_VAR 0 14
18179: PUSH
18180: LD_INT 1
18182: PLUS
18183: PPUSH
18184: LD_INT 2
18186: PPUSH
18187: CALL_OW 1
18191: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18192: LD_VAR 0 9
18196: PPUSH
18197: LD_VAR 0 13
18201: PPUSH
18202: CALL_OW 325
18206: PUSH
18207: LD_VAR 0 10
18211: PPUSH
18212: CALL_OW 255
18216: PPUSH
18217: LD_VAR 0 13
18221: PPUSH
18222: CALL_OW 325
18226: NOT
18227: AND
18228: IFFALSE 18257
// missile := Replace ( missile , missile + 1 , 3 ) ;
18230: LD_ADDR_VAR 0 14
18234: PUSH
18235: LD_VAR 0 14
18239: PPUSH
18240: LD_VAR 0 14
18244: PUSH
18245: LD_INT 1
18247: PLUS
18248: PPUSH
18249: LD_INT 3
18251: PPUSH
18252: CALL_OW 1
18256: ST_TO_ADDR
// if missile < 2 then
18257: LD_VAR 0 14
18261: PUSH
18262: LD_INT 2
18264: LESS
18265: IFFALSE 18269
// exit ;
18267: GO 18491
// x := GetX ( enemy ) ;
18269: LD_ADDR_VAR 0 4
18273: PUSH
18274: LD_VAR 0 10
18278: PPUSH
18279: CALL_OW 250
18283: ST_TO_ADDR
// y := GetY ( enemy ) ;
18284: LD_ADDR_VAR 0 5
18288: PUSH
18289: LD_VAR 0 10
18293: PPUSH
18294: CALL_OW 251
18298: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18299: LD_ADDR_VAR 0 6
18303: PUSH
18304: LD_VAR 0 4
18308: PUSH
18309: LD_INT 1
18311: NEG
18312: PPUSH
18313: LD_INT 1
18315: PPUSH
18316: CALL_OW 12
18320: PLUS
18321: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18322: LD_ADDR_VAR 0 7
18326: PUSH
18327: LD_VAR 0 5
18331: PUSH
18332: LD_INT 1
18334: NEG
18335: PPUSH
18336: LD_INT 1
18338: PPUSH
18339: CALL_OW 12
18343: PLUS
18344: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18345: LD_VAR 0 6
18349: PPUSH
18350: LD_VAR 0 7
18354: PPUSH
18355: CALL_OW 488
18359: NOT
18360: IFFALSE 18382
// begin _x := x ;
18362: LD_ADDR_VAR 0 6
18366: PUSH
18367: LD_VAR 0 4
18371: ST_TO_ADDR
// _y := y ;
18372: LD_ADDR_VAR 0 7
18376: PUSH
18377: LD_VAR 0 5
18381: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18382: LD_ADDR_VAR 0 3
18386: PUSH
18387: LD_INT 1
18389: PPUSH
18390: LD_VAR 0 14
18394: PPUSH
18395: CALL_OW 12
18399: ST_TO_ADDR
// case i of 1 :
18400: LD_VAR 0 3
18404: PUSH
18405: LD_INT 1
18407: DOUBLE
18408: EQUAL
18409: IFTRUE 18413
18411: GO 18430
18413: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18414: LD_VAR 0 1
18418: PPUSH
18419: LD_VAR 0 10
18423: PPUSH
18424: CALL_OW 115
18428: GO 18491
18430: LD_INT 2
18432: DOUBLE
18433: EQUAL
18434: IFTRUE 18438
18436: GO 18460
18438: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18439: LD_VAR 0 1
18443: PPUSH
18444: LD_VAR 0 6
18448: PPUSH
18449: LD_VAR 0 7
18453: PPUSH
18454: CALL_OW 153
18458: GO 18491
18460: LD_INT 3
18462: DOUBLE
18463: EQUAL
18464: IFTRUE 18468
18466: GO 18490
18468: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18469: LD_VAR 0 1
18473: PPUSH
18474: LD_VAR 0 6
18478: PPUSH
18479: LD_VAR 0 7
18483: PPUSH
18484: CALL_OW 154
18488: GO 18491
18490: POP
// end ;
18491: LD_VAR 0 2
18495: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18496: LD_INT 0
18498: PPUSH
18499: PPUSH
18500: PPUSH
18501: PPUSH
18502: PPUSH
18503: PPUSH
// if not unit or not building then
18504: LD_VAR 0 1
18508: NOT
18509: PUSH
18510: LD_VAR 0 2
18514: NOT
18515: OR
18516: IFFALSE 18520
// exit ;
18518: GO 18678
// x := GetX ( building ) ;
18520: LD_ADDR_VAR 0 5
18524: PUSH
18525: LD_VAR 0 2
18529: PPUSH
18530: CALL_OW 250
18534: ST_TO_ADDR
// y := GetY ( building ) ;
18535: LD_ADDR_VAR 0 6
18539: PUSH
18540: LD_VAR 0 2
18544: PPUSH
18545: CALL_OW 251
18549: ST_TO_ADDR
// for i = 0 to 5 do
18550: LD_ADDR_VAR 0 4
18554: PUSH
18555: DOUBLE
18556: LD_INT 0
18558: DEC
18559: ST_TO_ADDR
18560: LD_INT 5
18562: PUSH
18563: FOR_TO
18564: IFFALSE 18676
// begin _x := ShiftX ( x , i , 3 ) ;
18566: LD_ADDR_VAR 0 7
18570: PUSH
18571: LD_VAR 0 5
18575: PPUSH
18576: LD_VAR 0 4
18580: PPUSH
18581: LD_INT 3
18583: PPUSH
18584: CALL_OW 272
18588: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18589: LD_ADDR_VAR 0 8
18593: PUSH
18594: LD_VAR 0 6
18598: PPUSH
18599: LD_VAR 0 4
18603: PPUSH
18604: LD_INT 3
18606: PPUSH
18607: CALL_OW 273
18611: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18612: LD_VAR 0 7
18616: PPUSH
18617: LD_VAR 0 8
18621: PPUSH
18622: CALL_OW 488
18626: NOT
18627: IFFALSE 18631
// continue ;
18629: GO 18563
// if HexInfo ( _x , _y ) = 0 then
18631: LD_VAR 0 7
18635: PPUSH
18636: LD_VAR 0 8
18640: PPUSH
18641: CALL_OW 428
18645: PUSH
18646: LD_INT 0
18648: EQUAL
18649: IFFALSE 18674
// begin ComMoveXY ( unit , _x , _y ) ;
18651: LD_VAR 0 1
18655: PPUSH
18656: LD_VAR 0 7
18660: PPUSH
18661: LD_VAR 0 8
18665: PPUSH
18666: CALL_OW 111
// exit ;
18670: POP
18671: POP
18672: GO 18678
// end ; end ;
18674: GO 18563
18676: POP
18677: POP
// end ;
18678: LD_VAR 0 3
18682: RET
// export function ScanBase ( side , base_area ) ; begin
18683: LD_INT 0
18685: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18686: LD_ADDR_VAR 0 3
18690: PUSH
18691: LD_VAR 0 2
18695: PPUSH
18696: LD_INT 81
18698: PUSH
18699: LD_VAR 0 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 70
18712: ST_TO_ADDR
// end ;
18713: LD_VAR 0 3
18717: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18718: LD_INT 0
18720: PPUSH
18721: PPUSH
18722: PPUSH
18723: PPUSH
// result := false ;
18724: LD_ADDR_VAR 0 2
18728: PUSH
18729: LD_INT 0
18731: ST_TO_ADDR
// side := GetSide ( unit ) ;
18732: LD_ADDR_VAR 0 3
18736: PUSH
18737: LD_VAR 0 1
18741: PPUSH
18742: CALL_OW 255
18746: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18747: LD_ADDR_VAR 0 4
18751: PUSH
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 248
18761: ST_TO_ADDR
// case nat of 1 :
18762: LD_VAR 0 4
18766: PUSH
18767: LD_INT 1
18769: DOUBLE
18770: EQUAL
18771: IFTRUE 18775
18773: GO 18786
18775: POP
// tech := tech_lassight ; 2 :
18776: LD_ADDR_VAR 0 5
18780: PUSH
18781: LD_INT 12
18783: ST_TO_ADDR
18784: GO 18825
18786: LD_INT 2
18788: DOUBLE
18789: EQUAL
18790: IFTRUE 18794
18792: GO 18805
18794: POP
// tech := tech_mortar ; 3 :
18795: LD_ADDR_VAR 0 5
18799: PUSH
18800: LD_INT 41
18802: ST_TO_ADDR
18803: GO 18825
18805: LD_INT 3
18807: DOUBLE
18808: EQUAL
18809: IFTRUE 18813
18811: GO 18824
18813: POP
// tech := tech_bazooka ; end ;
18814: LD_ADDR_VAR 0 5
18818: PUSH
18819: LD_INT 44
18821: ST_TO_ADDR
18822: GO 18825
18824: POP
// if Researched ( side , tech ) then
18825: LD_VAR 0 3
18829: PPUSH
18830: LD_VAR 0 5
18834: PPUSH
18835: CALL_OW 325
18839: IFFALSE 18866
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18841: LD_ADDR_VAR 0 2
18845: PUSH
18846: LD_INT 5
18848: PUSH
18849: LD_INT 8
18851: PUSH
18852: LD_INT 9
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: LIST
18859: PUSH
18860: LD_VAR 0 4
18864: ARRAY
18865: ST_TO_ADDR
// end ;
18866: LD_VAR 0 2
18870: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18871: LD_INT 0
18873: PPUSH
18874: PPUSH
18875: PPUSH
// if not mines then
18876: LD_VAR 0 2
18880: NOT
18881: IFFALSE 18885
// exit ;
18883: GO 19029
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18885: LD_ADDR_VAR 0 5
18889: PUSH
18890: LD_INT 81
18892: PUSH
18893: LD_VAR 0 1
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: LD_INT 21
18907: PUSH
18908: LD_INT 3
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PPUSH
18923: CALL_OW 69
18927: ST_TO_ADDR
// for i in mines do
18928: LD_ADDR_VAR 0 4
18932: PUSH
18933: LD_VAR 0 2
18937: PUSH
18938: FOR_IN
18939: IFFALSE 19027
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18941: LD_VAR 0 4
18945: PUSH
18946: LD_INT 1
18948: ARRAY
18949: PPUSH
18950: LD_VAR 0 4
18954: PUSH
18955: LD_INT 2
18957: ARRAY
18958: PPUSH
18959: CALL_OW 458
18963: NOT
18964: IFFALSE 18968
// continue ;
18966: GO 18938
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18968: LD_VAR 0 4
18972: PUSH
18973: LD_INT 1
18975: ARRAY
18976: PPUSH
18977: LD_VAR 0 4
18981: PUSH
18982: LD_INT 2
18984: ARRAY
18985: PPUSH
18986: CALL_OW 428
18990: PUSH
18991: LD_VAR 0 5
18995: IN
18996: IFFALSE 19025
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18998: LD_VAR 0 4
19002: PUSH
19003: LD_INT 1
19005: ARRAY
19006: PPUSH
19007: LD_VAR 0 4
19011: PUSH
19012: LD_INT 2
19014: ARRAY
19015: PPUSH
19016: LD_VAR 0 1
19020: PPUSH
19021: CALL_OW 456
// end ;
19025: GO 18938
19027: POP
19028: POP
// end ;
19029: LD_VAR 0 3
19033: RET
// export function Count ( array ) ; begin
19034: LD_INT 0
19036: PPUSH
// result := array + 0 ;
19037: LD_ADDR_VAR 0 2
19041: PUSH
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 0
19049: PLUS
19050: ST_TO_ADDR
// end ;
19051: LD_VAR 0 2
19055: RET
// export function IsEmpty ( building ) ; begin
19056: LD_INT 0
19058: PPUSH
// if not building then
19059: LD_VAR 0 1
19063: NOT
19064: IFFALSE 19068
// exit ;
19066: GO 19111
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19068: LD_ADDR_VAR 0 2
19072: PUSH
19073: LD_VAR 0 1
19077: PUSH
19078: LD_INT 22
19080: PUSH
19081: LD_VAR 0 1
19085: PPUSH
19086: CALL_OW 255
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 58
19097: PUSH
19098: EMPTY
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 69
19109: IN
19110: ST_TO_ADDR
// end ;
19111: LD_VAR 0 2
19115: RET
// export function IsNotFull ( building ) ; var places ; begin
19116: LD_INT 0
19118: PPUSH
19119: PPUSH
// if not building then
19120: LD_VAR 0 1
19124: NOT
19125: IFFALSE 19129
// exit ;
19127: GO 19157
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19129: LD_ADDR_VAR 0 2
19133: PUSH
19134: LD_VAR 0 1
19138: PPUSH
19139: LD_INT 3
19141: PUSH
19142: LD_INT 62
19144: PUSH
19145: EMPTY
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PPUSH
19152: CALL_OW 72
19156: ST_TO_ADDR
// end ;
19157: LD_VAR 0 2
19161: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19162: LD_INT 0
19164: PPUSH
19165: PPUSH
19166: PPUSH
19167: PPUSH
// tmp := [ ] ;
19168: LD_ADDR_VAR 0 3
19172: PUSH
19173: EMPTY
19174: ST_TO_ADDR
// list := [ ] ;
19175: LD_ADDR_VAR 0 5
19179: PUSH
19180: EMPTY
19181: ST_TO_ADDR
// for i = 16 to 25 do
19182: LD_ADDR_VAR 0 4
19186: PUSH
19187: DOUBLE
19188: LD_INT 16
19190: DEC
19191: ST_TO_ADDR
19192: LD_INT 25
19194: PUSH
19195: FOR_TO
19196: IFFALSE 19269
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19198: LD_ADDR_VAR 0 3
19202: PUSH
19203: LD_VAR 0 3
19207: PUSH
19208: LD_INT 22
19210: PUSH
19211: LD_VAR 0 1
19215: PPUSH
19216: CALL_OW 255
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 91
19227: PUSH
19228: LD_VAR 0 1
19232: PUSH
19233: LD_INT 6
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 30
19243: PUSH
19244: LD_VAR 0 4
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: PPUSH
19261: CALL_OW 69
19265: ADD
19266: ST_TO_ADDR
19267: GO 19195
19269: POP
19270: POP
// for i = 1 to tmp do
19271: LD_ADDR_VAR 0 4
19275: PUSH
19276: DOUBLE
19277: LD_INT 1
19279: DEC
19280: ST_TO_ADDR
19281: LD_VAR 0 3
19285: PUSH
19286: FOR_TO
19287: IFFALSE 19375
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19289: LD_ADDR_VAR 0 5
19293: PUSH
19294: LD_VAR 0 5
19298: PUSH
19299: LD_VAR 0 3
19303: PUSH
19304: LD_VAR 0 4
19308: ARRAY
19309: PPUSH
19310: CALL_OW 266
19314: PUSH
19315: LD_VAR 0 3
19319: PUSH
19320: LD_VAR 0 4
19324: ARRAY
19325: PPUSH
19326: CALL_OW 250
19330: PUSH
19331: LD_VAR 0 3
19335: PUSH
19336: LD_VAR 0 4
19340: ARRAY
19341: PPUSH
19342: CALL_OW 251
19346: PUSH
19347: LD_VAR 0 3
19351: PUSH
19352: LD_VAR 0 4
19356: ARRAY
19357: PPUSH
19358: CALL_OW 254
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: ADD
19372: ST_TO_ADDR
19373: GO 19286
19375: POP
19376: POP
// result := list ;
19377: LD_ADDR_VAR 0 2
19381: PUSH
19382: LD_VAR 0 5
19386: ST_TO_ADDR
// end ;
19387: LD_VAR 0 2
19391: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19392: LD_INT 0
19394: PPUSH
19395: PPUSH
19396: PPUSH
19397: PPUSH
19398: PPUSH
19399: PPUSH
19400: PPUSH
// if not factory then
19401: LD_VAR 0 1
19405: NOT
19406: IFFALSE 19410
// exit ;
19408: GO 20003
// if control = control_apeman then
19410: LD_VAR 0 4
19414: PUSH
19415: LD_INT 5
19417: EQUAL
19418: IFFALSE 19527
// begin tmp := UnitsInside ( factory ) ;
19420: LD_ADDR_VAR 0 8
19424: PUSH
19425: LD_VAR 0 1
19429: PPUSH
19430: CALL_OW 313
19434: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19435: LD_VAR 0 8
19439: PPUSH
19440: LD_INT 25
19442: PUSH
19443: LD_INT 12
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PPUSH
19450: CALL_OW 72
19454: NOT
19455: IFFALSE 19465
// control := control_manual ;
19457: LD_ADDR_VAR 0 4
19461: PUSH
19462: LD_INT 1
19464: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19465: LD_ADDR_VAR 0 8
19469: PUSH
19470: LD_VAR 0 1
19474: PPUSH
19475: CALL 19162 0 1
19479: ST_TO_ADDR
// if tmp then
19480: LD_VAR 0 8
19484: IFFALSE 19527
// begin for i in tmp do
19486: LD_ADDR_VAR 0 7
19490: PUSH
19491: LD_VAR 0 8
19495: PUSH
19496: FOR_IN
19497: IFFALSE 19525
// if i [ 1 ] = b_ext_radio then
19499: LD_VAR 0 7
19503: PUSH
19504: LD_INT 1
19506: ARRAY
19507: PUSH
19508: LD_INT 22
19510: EQUAL
19511: IFFALSE 19523
// begin control := control_remote ;
19513: LD_ADDR_VAR 0 4
19517: PUSH
19518: LD_INT 2
19520: ST_TO_ADDR
// break ;
19521: GO 19525
// end ;
19523: GO 19496
19525: POP
19526: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19527: LD_VAR 0 1
19531: PPUSH
19532: LD_VAR 0 2
19536: PPUSH
19537: LD_VAR 0 3
19541: PPUSH
19542: LD_VAR 0 4
19546: PPUSH
19547: LD_VAR 0 5
19551: PPUSH
19552: CALL_OW 448
19556: IFFALSE 19591
// begin result := [ chassis , engine , control , weapon ] ;
19558: LD_ADDR_VAR 0 6
19562: PUSH
19563: LD_VAR 0 2
19567: PUSH
19568: LD_VAR 0 3
19572: PUSH
19573: LD_VAR 0 4
19577: PUSH
19578: LD_VAR 0 5
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: ST_TO_ADDR
// exit ;
19589: GO 20003
// end ; _chassis := AvailableChassisList ( factory ) ;
19591: LD_ADDR_VAR 0 9
19595: PUSH
19596: LD_VAR 0 1
19600: PPUSH
19601: CALL_OW 475
19605: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19606: LD_ADDR_VAR 0 11
19610: PUSH
19611: LD_VAR 0 1
19615: PPUSH
19616: CALL_OW 476
19620: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19621: LD_ADDR_VAR 0 12
19625: PUSH
19626: LD_VAR 0 1
19630: PPUSH
19631: CALL_OW 477
19635: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19636: LD_ADDR_VAR 0 10
19640: PUSH
19641: LD_VAR 0 1
19645: PPUSH
19646: CALL_OW 478
19650: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19651: LD_VAR 0 9
19655: NOT
19656: PUSH
19657: LD_VAR 0 11
19661: NOT
19662: OR
19663: PUSH
19664: LD_VAR 0 12
19668: NOT
19669: OR
19670: PUSH
19671: LD_VAR 0 10
19675: NOT
19676: OR
19677: IFFALSE 19712
// begin result := [ chassis , engine , control , weapon ] ;
19679: LD_ADDR_VAR 0 6
19683: PUSH
19684: LD_VAR 0 2
19688: PUSH
19689: LD_VAR 0 3
19693: PUSH
19694: LD_VAR 0 4
19698: PUSH
19699: LD_VAR 0 5
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: ST_TO_ADDR
// exit ;
19710: GO 20003
// end ; if not chassis in _chassis then
19712: LD_VAR 0 2
19716: PUSH
19717: LD_VAR 0 9
19721: IN
19722: NOT
19723: IFFALSE 19749
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19725: LD_ADDR_VAR 0 2
19729: PUSH
19730: LD_VAR 0 9
19734: PUSH
19735: LD_INT 1
19737: PPUSH
19738: LD_VAR 0 9
19742: PPUSH
19743: CALL_OW 12
19747: ARRAY
19748: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19749: LD_VAR 0 2
19753: PPUSH
19754: LD_VAR 0 3
19758: PPUSH
19759: CALL 20008 0 2
19763: NOT
19764: IFFALSE 19823
// repeat engine := _engine [ 1 ] ;
19766: LD_ADDR_VAR 0 3
19770: PUSH
19771: LD_VAR 0 11
19775: PUSH
19776: LD_INT 1
19778: ARRAY
19779: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19780: LD_ADDR_VAR 0 11
19784: PUSH
19785: LD_VAR 0 11
19789: PPUSH
19790: LD_INT 1
19792: PPUSH
19793: CALL_OW 3
19797: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19798: LD_VAR 0 2
19802: PPUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: CALL 20008 0 2
19812: PUSH
19813: LD_VAR 0 11
19817: PUSH
19818: EMPTY
19819: EQUAL
19820: OR
19821: IFFALSE 19766
// if not control in _control then
19823: LD_VAR 0 4
19827: PUSH
19828: LD_VAR 0 12
19832: IN
19833: NOT
19834: IFFALSE 19860
// control := _control [ rand ( 1 , _control ) ] ;
19836: LD_ADDR_VAR 0 4
19840: PUSH
19841: LD_VAR 0 12
19845: PUSH
19846: LD_INT 1
19848: PPUSH
19849: LD_VAR 0 12
19853: PPUSH
19854: CALL_OW 12
19858: ARRAY
19859: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19860: LD_VAR 0 2
19864: PPUSH
19865: LD_VAR 0 5
19869: PPUSH
19870: CALL 20228 0 2
19874: NOT
19875: IFFALSE 19934
// repeat weapon := _weapon [ 1 ] ;
19877: LD_ADDR_VAR 0 5
19881: PUSH
19882: LD_VAR 0 10
19886: PUSH
19887: LD_INT 1
19889: ARRAY
19890: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19891: LD_ADDR_VAR 0 10
19895: PUSH
19896: LD_VAR 0 10
19900: PPUSH
19901: LD_INT 1
19903: PPUSH
19904: CALL_OW 3
19908: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19909: LD_VAR 0 2
19913: PPUSH
19914: LD_VAR 0 5
19918: PPUSH
19919: CALL 20228 0 2
19923: PUSH
19924: LD_VAR 0 10
19928: PUSH
19929: EMPTY
19930: EQUAL
19931: OR
19932: IFFALSE 19877
// result := [ ] ;
19934: LD_ADDR_VAR 0 6
19938: PUSH
19939: EMPTY
19940: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19941: LD_VAR 0 1
19945: PPUSH
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_VAR 0 4
19960: PPUSH
19961: LD_VAR 0 5
19965: PPUSH
19966: CALL_OW 448
19970: IFFALSE 20003
// result := [ chassis , engine , control , weapon ] ;
19972: LD_ADDR_VAR 0 6
19976: PUSH
19977: LD_VAR 0 2
19981: PUSH
19982: LD_VAR 0 3
19986: PUSH
19987: LD_VAR 0 4
19991: PUSH
19992: LD_VAR 0 5
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: ST_TO_ADDR
// end ;
20003: LD_VAR 0 6
20007: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20008: LD_INT 0
20010: PPUSH
// if not chassis or not engine then
20011: LD_VAR 0 1
20015: NOT
20016: PUSH
20017: LD_VAR 0 2
20021: NOT
20022: OR
20023: IFFALSE 20027
// exit ;
20025: GO 20223
// case engine of engine_solar :
20027: LD_VAR 0 2
20031: PUSH
20032: LD_INT 2
20034: DOUBLE
20035: EQUAL
20036: IFTRUE 20040
20038: GO 20078
20040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20041: LD_ADDR_VAR 0 3
20045: PUSH
20046: LD_INT 11
20048: PUSH
20049: LD_INT 12
20051: PUSH
20052: LD_INT 13
20054: PUSH
20055: LD_INT 14
20057: PUSH
20058: LD_INT 1
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: LD_INT 3
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: ST_TO_ADDR
20076: GO 20207
20078: LD_INT 1
20080: DOUBLE
20081: EQUAL
20082: IFTRUE 20086
20084: GO 20148
20086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20087: LD_ADDR_VAR 0 3
20091: PUSH
20092: LD_INT 11
20094: PUSH
20095: LD_INT 12
20097: PUSH
20098: LD_INT 13
20100: PUSH
20101: LD_INT 14
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: LD_INT 2
20109: PUSH
20110: LD_INT 3
20112: PUSH
20113: LD_INT 4
20115: PUSH
20116: LD_INT 5
20118: PUSH
20119: LD_INT 21
20121: PUSH
20122: LD_INT 23
20124: PUSH
20125: LD_INT 22
20127: PUSH
20128: LD_INT 24
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: ST_TO_ADDR
20146: GO 20207
20148: LD_INT 3
20150: DOUBLE
20151: EQUAL
20152: IFTRUE 20156
20154: GO 20206
20156: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20157: LD_ADDR_VAR 0 3
20161: PUSH
20162: LD_INT 13
20164: PUSH
20165: LD_INT 14
20167: PUSH
20168: LD_INT 2
20170: PUSH
20171: LD_INT 3
20173: PUSH
20174: LD_INT 4
20176: PUSH
20177: LD_INT 5
20179: PUSH
20180: LD_INT 21
20182: PUSH
20183: LD_INT 22
20185: PUSH
20186: LD_INT 23
20188: PUSH
20189: LD_INT 24
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: ST_TO_ADDR
20204: GO 20207
20206: POP
// result := ( chassis in result ) ;
20207: LD_ADDR_VAR 0 3
20211: PUSH
20212: LD_VAR 0 1
20216: PUSH
20217: LD_VAR 0 3
20221: IN
20222: ST_TO_ADDR
// end ;
20223: LD_VAR 0 3
20227: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20228: LD_INT 0
20230: PPUSH
// if not chassis or not weapon then
20231: LD_VAR 0 1
20235: NOT
20236: PUSH
20237: LD_VAR 0 2
20241: NOT
20242: OR
20243: IFFALSE 20247
// exit ;
20245: GO 21307
// case weapon of us_machine_gun :
20247: LD_VAR 0 2
20251: PUSH
20252: LD_INT 2
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20290
20260: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20261: LD_ADDR_VAR 0 3
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 3
20274: PUSH
20275: LD_INT 4
20277: PUSH
20278: LD_INT 5
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: ST_TO_ADDR
20288: GO 21291
20290: LD_INT 3
20292: DOUBLE
20293: EQUAL
20294: IFTRUE 20298
20296: GO 20328
20298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20299: LD_ADDR_VAR 0 3
20303: PUSH
20304: LD_INT 1
20306: PUSH
20307: LD_INT 2
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: LD_INT 4
20315: PUSH
20316: LD_INT 5
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: ST_TO_ADDR
20326: GO 21291
20328: LD_INT 11
20330: DOUBLE
20331: EQUAL
20332: IFTRUE 20336
20334: GO 20366
20336: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20337: LD_ADDR_VAR 0 3
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: LD_INT 3
20350: PUSH
20351: LD_INT 4
20353: PUSH
20354: LD_INT 5
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: ST_TO_ADDR
20364: GO 21291
20366: LD_INT 4
20368: DOUBLE
20369: EQUAL
20370: IFTRUE 20374
20372: GO 20400
20374: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20375: LD_ADDR_VAR 0 3
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: LD_INT 3
20385: PUSH
20386: LD_INT 4
20388: PUSH
20389: LD_INT 5
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: ST_TO_ADDR
20398: GO 21291
20400: LD_INT 5
20402: DOUBLE
20403: EQUAL
20404: IFTRUE 20408
20406: GO 20434
20408: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20409: LD_ADDR_VAR 0 3
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: LD_INT 3
20419: PUSH
20420: LD_INT 4
20422: PUSH
20423: LD_INT 5
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: ST_TO_ADDR
20432: GO 21291
20434: LD_INT 9
20436: DOUBLE
20437: EQUAL
20438: IFTRUE 20442
20440: GO 20468
20442: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20443: LD_ADDR_VAR 0 3
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: LD_INT 3
20453: PUSH
20454: LD_INT 4
20456: PUSH
20457: LD_INT 5
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: ST_TO_ADDR
20466: GO 21291
20468: LD_INT 7
20470: DOUBLE
20471: EQUAL
20472: IFTRUE 20476
20474: GO 20502
20476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20477: LD_ADDR_VAR 0 3
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 3
20487: PUSH
20488: LD_INT 4
20490: PUSH
20491: LD_INT 5
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: ST_TO_ADDR
20500: GO 21291
20502: LD_INT 12
20504: DOUBLE
20505: EQUAL
20506: IFTRUE 20510
20508: GO 20536
20510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20511: LD_ADDR_VAR 0 3
20515: PUSH
20516: LD_INT 2
20518: PUSH
20519: LD_INT 3
20521: PUSH
20522: LD_INT 4
20524: PUSH
20525: LD_INT 5
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: ST_TO_ADDR
20534: GO 21291
20536: LD_INT 13
20538: DOUBLE
20539: EQUAL
20540: IFTRUE 20544
20542: GO 20570
20544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20545: LD_ADDR_VAR 0 3
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: LD_INT 3
20555: PUSH
20556: LD_INT 4
20558: PUSH
20559: LD_INT 5
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: ST_TO_ADDR
20568: GO 21291
20570: LD_INT 14
20572: DOUBLE
20573: EQUAL
20574: IFTRUE 20578
20576: GO 20596
20578: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_INT 4
20586: PUSH
20587: LD_INT 5
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: ST_TO_ADDR
20594: GO 21291
20596: LD_INT 6
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20622
20604: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20605: LD_ADDR_VAR 0 3
20609: PUSH
20610: LD_INT 4
20612: PUSH
20613: LD_INT 5
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: ST_TO_ADDR
20620: GO 21291
20622: LD_INT 10
20624: DOUBLE
20625: EQUAL
20626: IFTRUE 20630
20628: GO 20648
20630: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20631: LD_ADDR_VAR 0 3
20635: PUSH
20636: LD_INT 4
20638: PUSH
20639: LD_INT 5
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: ST_TO_ADDR
20646: GO 21291
20648: LD_INT 22
20650: DOUBLE
20651: EQUAL
20652: IFTRUE 20656
20654: GO 20682
20656: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_INT 11
20664: PUSH
20665: LD_INT 12
20667: PUSH
20668: LD_INT 13
20670: PUSH
20671: LD_INT 14
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: ST_TO_ADDR
20680: GO 21291
20682: LD_INT 23
20684: DOUBLE
20685: EQUAL
20686: IFTRUE 20690
20688: GO 20716
20690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20691: LD_ADDR_VAR 0 3
20695: PUSH
20696: LD_INT 11
20698: PUSH
20699: LD_INT 12
20701: PUSH
20702: LD_INT 13
20704: PUSH
20705: LD_INT 14
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: ST_TO_ADDR
20714: GO 21291
20716: LD_INT 24
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20750
20724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20725: LD_ADDR_VAR 0 3
20729: PUSH
20730: LD_INT 11
20732: PUSH
20733: LD_INT 12
20735: PUSH
20736: LD_INT 13
20738: PUSH
20739: LD_INT 14
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: ST_TO_ADDR
20748: GO 21291
20750: LD_INT 30
20752: DOUBLE
20753: EQUAL
20754: IFTRUE 20758
20756: GO 20784
20758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20759: LD_ADDR_VAR 0 3
20763: PUSH
20764: LD_INT 11
20766: PUSH
20767: LD_INT 12
20769: PUSH
20770: LD_INT 13
20772: PUSH
20773: LD_INT 14
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: ST_TO_ADDR
20782: GO 21291
20784: LD_INT 25
20786: DOUBLE
20787: EQUAL
20788: IFTRUE 20792
20790: GO 20810
20792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20793: LD_ADDR_VAR 0 3
20797: PUSH
20798: LD_INT 13
20800: PUSH
20801: LD_INT 14
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: ST_TO_ADDR
20808: GO 21291
20810: LD_INT 27
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20818
20816: GO 20836
20818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20819: LD_ADDR_VAR 0 3
20823: PUSH
20824: LD_INT 13
20826: PUSH
20827: LD_INT 14
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: ST_TO_ADDR
20834: GO 21291
20836: LD_INT 92
20838: DOUBLE
20839: EQUAL
20840: IFTRUE 20844
20842: GO 20870
20844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20845: LD_ADDR_VAR 0 3
20849: PUSH
20850: LD_INT 11
20852: PUSH
20853: LD_INT 12
20855: PUSH
20856: LD_INT 13
20858: PUSH
20859: LD_INT 14
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: ST_TO_ADDR
20868: GO 21291
20870: LD_INT 28
20872: DOUBLE
20873: EQUAL
20874: IFTRUE 20878
20876: GO 20896
20878: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20879: LD_ADDR_VAR 0 3
20883: PUSH
20884: LD_INT 13
20886: PUSH
20887: LD_INT 14
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: ST_TO_ADDR
20894: GO 21291
20896: LD_INT 29
20898: DOUBLE
20899: EQUAL
20900: IFTRUE 20904
20902: GO 20922
20904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20905: LD_ADDR_VAR 0 3
20909: PUSH
20910: LD_INT 13
20912: PUSH
20913: LD_INT 14
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: ST_TO_ADDR
20920: GO 21291
20922: LD_INT 31
20924: DOUBLE
20925: EQUAL
20926: IFTRUE 20930
20928: GO 20948
20930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20931: LD_ADDR_VAR 0 3
20935: PUSH
20936: LD_INT 13
20938: PUSH
20939: LD_INT 14
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: ST_TO_ADDR
20946: GO 21291
20948: LD_INT 26
20950: DOUBLE
20951: EQUAL
20952: IFTRUE 20956
20954: GO 20974
20956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20957: LD_ADDR_VAR 0 3
20961: PUSH
20962: LD_INT 13
20964: PUSH
20965: LD_INT 14
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: ST_TO_ADDR
20972: GO 21291
20974: LD_INT 42
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 21008
20982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20983: LD_ADDR_VAR 0 3
20987: PUSH
20988: LD_INT 21
20990: PUSH
20991: LD_INT 22
20993: PUSH
20994: LD_INT 23
20996: PUSH
20997: LD_INT 24
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: ST_TO_ADDR
21006: GO 21291
21008: LD_INT 43
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21042
21016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21017: LD_ADDR_VAR 0 3
21021: PUSH
21022: LD_INT 21
21024: PUSH
21025: LD_INT 22
21027: PUSH
21028: LD_INT 23
21030: PUSH
21031: LD_INT 24
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: ST_TO_ADDR
21040: GO 21291
21042: LD_INT 44
21044: DOUBLE
21045: EQUAL
21046: IFTRUE 21050
21048: GO 21076
21050: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21051: LD_ADDR_VAR 0 3
21055: PUSH
21056: LD_INT 21
21058: PUSH
21059: LD_INT 22
21061: PUSH
21062: LD_INT 23
21064: PUSH
21065: LD_INT 24
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: ST_TO_ADDR
21074: GO 21291
21076: LD_INT 45
21078: DOUBLE
21079: EQUAL
21080: IFTRUE 21084
21082: GO 21110
21084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21085: LD_ADDR_VAR 0 3
21089: PUSH
21090: LD_INT 21
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 23
21098: PUSH
21099: LD_INT 24
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: ST_TO_ADDR
21108: GO 21291
21110: LD_INT 49
21112: DOUBLE
21113: EQUAL
21114: IFTRUE 21118
21116: GO 21144
21118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21119: LD_ADDR_VAR 0 3
21123: PUSH
21124: LD_INT 21
21126: PUSH
21127: LD_INT 22
21129: PUSH
21130: LD_INT 23
21132: PUSH
21133: LD_INT 24
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: ST_TO_ADDR
21142: GO 21291
21144: LD_INT 51
21146: DOUBLE
21147: EQUAL
21148: IFTRUE 21152
21150: GO 21178
21152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21153: LD_ADDR_VAR 0 3
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 22
21163: PUSH
21164: LD_INT 23
21166: PUSH
21167: LD_INT 24
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: ST_TO_ADDR
21176: GO 21291
21178: LD_INT 52
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21212
21186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21187: LD_ADDR_VAR 0 3
21191: PUSH
21192: LD_INT 21
21194: PUSH
21195: LD_INT 22
21197: PUSH
21198: LD_INT 23
21200: PUSH
21201: LD_INT 24
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: ST_TO_ADDR
21210: GO 21291
21212: LD_INT 53
21214: DOUBLE
21215: EQUAL
21216: IFTRUE 21220
21218: GO 21238
21220: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21221: LD_ADDR_VAR 0 3
21225: PUSH
21226: LD_INT 23
21228: PUSH
21229: LD_INT 24
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: ST_TO_ADDR
21236: GO 21291
21238: LD_INT 46
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21264
21246: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21247: LD_ADDR_VAR 0 3
21251: PUSH
21252: LD_INT 23
21254: PUSH
21255: LD_INT 24
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: ST_TO_ADDR
21262: GO 21291
21264: LD_INT 47
21266: DOUBLE
21267: EQUAL
21268: IFTRUE 21272
21270: GO 21290
21272: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21273: LD_ADDR_VAR 0 3
21277: PUSH
21278: LD_INT 23
21280: PUSH
21281: LD_INT 24
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: ST_TO_ADDR
21288: GO 21291
21290: POP
// result := ( chassis in result ) ;
21291: LD_ADDR_VAR 0 3
21295: PUSH
21296: LD_VAR 0 1
21300: PUSH
21301: LD_VAR 0 3
21305: IN
21306: ST_TO_ADDR
// end ;
21307: LD_VAR 0 3
21311: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21312: LD_INT 0
21314: PPUSH
21315: PPUSH
21316: PPUSH
21317: PPUSH
21318: PPUSH
21319: PPUSH
21320: PPUSH
// result := array ;
21321: LD_ADDR_VAR 0 5
21325: PUSH
21326: LD_VAR 0 1
21330: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21331: LD_VAR 0 1
21335: NOT
21336: PUSH
21337: LD_VAR 0 2
21341: NOT
21342: OR
21343: PUSH
21344: LD_VAR 0 3
21348: NOT
21349: OR
21350: PUSH
21351: LD_VAR 0 2
21355: PUSH
21356: LD_VAR 0 1
21360: GREATER
21361: OR
21362: PUSH
21363: LD_VAR 0 3
21367: PUSH
21368: LD_VAR 0 1
21372: GREATER
21373: OR
21374: IFFALSE 21378
// exit ;
21376: GO 21674
// if direction then
21378: LD_VAR 0 4
21382: IFFALSE 21446
// begin d := 1 ;
21384: LD_ADDR_VAR 0 9
21388: PUSH
21389: LD_INT 1
21391: ST_TO_ADDR
// if i_from > i_to then
21392: LD_VAR 0 2
21396: PUSH
21397: LD_VAR 0 3
21401: GREATER
21402: IFFALSE 21428
// length := ( array - i_from ) + i_to else
21404: LD_ADDR_VAR 0 11
21408: PUSH
21409: LD_VAR 0 1
21413: PUSH
21414: LD_VAR 0 2
21418: MINUS
21419: PUSH
21420: LD_VAR 0 3
21424: PLUS
21425: ST_TO_ADDR
21426: GO 21444
// length := i_to - i_from ;
21428: LD_ADDR_VAR 0 11
21432: PUSH
21433: LD_VAR 0 3
21437: PUSH
21438: LD_VAR 0 2
21442: MINUS
21443: ST_TO_ADDR
// end else
21444: GO 21507
// begin d := - 1 ;
21446: LD_ADDR_VAR 0 9
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: ST_TO_ADDR
// if i_from > i_to then
21455: LD_VAR 0 2
21459: PUSH
21460: LD_VAR 0 3
21464: GREATER
21465: IFFALSE 21485
// length := i_from - i_to else
21467: LD_ADDR_VAR 0 11
21471: PUSH
21472: LD_VAR 0 2
21476: PUSH
21477: LD_VAR 0 3
21481: MINUS
21482: ST_TO_ADDR
21483: GO 21507
// length := ( array - i_to ) + i_from ;
21485: LD_ADDR_VAR 0 11
21489: PUSH
21490: LD_VAR 0 1
21494: PUSH
21495: LD_VAR 0 3
21499: MINUS
21500: PUSH
21501: LD_VAR 0 2
21505: PLUS
21506: ST_TO_ADDR
// end ; if not length then
21507: LD_VAR 0 11
21511: NOT
21512: IFFALSE 21516
// exit ;
21514: GO 21674
// tmp := array ;
21516: LD_ADDR_VAR 0 10
21520: PUSH
21521: LD_VAR 0 1
21525: ST_TO_ADDR
// for i = 1 to length do
21526: LD_ADDR_VAR 0 6
21530: PUSH
21531: DOUBLE
21532: LD_INT 1
21534: DEC
21535: ST_TO_ADDR
21536: LD_VAR 0 11
21540: PUSH
21541: FOR_TO
21542: IFFALSE 21662
// begin for j = 1 to array do
21544: LD_ADDR_VAR 0 7
21548: PUSH
21549: DOUBLE
21550: LD_INT 1
21552: DEC
21553: ST_TO_ADDR
21554: LD_VAR 0 1
21558: PUSH
21559: FOR_TO
21560: IFFALSE 21648
// begin k := j + d ;
21562: LD_ADDR_VAR 0 8
21566: PUSH
21567: LD_VAR 0 7
21571: PUSH
21572: LD_VAR 0 9
21576: PLUS
21577: ST_TO_ADDR
// if k > array then
21578: LD_VAR 0 8
21582: PUSH
21583: LD_VAR 0 1
21587: GREATER
21588: IFFALSE 21598
// k := 1 ;
21590: LD_ADDR_VAR 0 8
21594: PUSH
21595: LD_INT 1
21597: ST_TO_ADDR
// if not k then
21598: LD_VAR 0 8
21602: NOT
21603: IFFALSE 21615
// k := array ;
21605: LD_ADDR_VAR 0 8
21609: PUSH
21610: LD_VAR 0 1
21614: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21615: LD_ADDR_VAR 0 10
21619: PUSH
21620: LD_VAR 0 10
21624: PPUSH
21625: LD_VAR 0 8
21629: PPUSH
21630: LD_VAR 0 1
21634: PUSH
21635: LD_VAR 0 7
21639: ARRAY
21640: PPUSH
21641: CALL_OW 1
21645: ST_TO_ADDR
// end ;
21646: GO 21559
21648: POP
21649: POP
// array := tmp ;
21650: LD_ADDR_VAR 0 1
21654: PUSH
21655: LD_VAR 0 10
21659: ST_TO_ADDR
// end ;
21660: GO 21541
21662: POP
21663: POP
// result := array ;
21664: LD_ADDR_VAR 0 5
21668: PUSH
21669: LD_VAR 0 1
21673: ST_TO_ADDR
// end ;
21674: LD_VAR 0 5
21678: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21679: LD_INT 0
21681: PPUSH
21682: PPUSH
// result := 0 ;
21683: LD_ADDR_VAR 0 3
21687: PUSH
21688: LD_INT 0
21690: ST_TO_ADDR
// if not array or not value in array then
21691: LD_VAR 0 1
21695: NOT
21696: PUSH
21697: LD_VAR 0 2
21701: PUSH
21702: LD_VAR 0 1
21706: IN
21707: NOT
21708: OR
21709: IFFALSE 21713
// exit ;
21711: GO 21767
// for i = 1 to array do
21713: LD_ADDR_VAR 0 4
21717: PUSH
21718: DOUBLE
21719: LD_INT 1
21721: DEC
21722: ST_TO_ADDR
21723: LD_VAR 0 1
21727: PUSH
21728: FOR_TO
21729: IFFALSE 21765
// if value = array [ i ] then
21731: LD_VAR 0 2
21735: PUSH
21736: LD_VAR 0 1
21740: PUSH
21741: LD_VAR 0 4
21745: ARRAY
21746: EQUAL
21747: IFFALSE 21763
// begin result := i ;
21749: LD_ADDR_VAR 0 3
21753: PUSH
21754: LD_VAR 0 4
21758: ST_TO_ADDR
// exit ;
21759: POP
21760: POP
21761: GO 21767
// end ;
21763: GO 21728
21765: POP
21766: POP
// end ;
21767: LD_VAR 0 3
21771: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21772: LD_INT 0
21774: PPUSH
// vc_chassis := chassis ;
21775: LD_ADDR_OWVAR 37
21779: PUSH
21780: LD_VAR 0 1
21784: ST_TO_ADDR
// vc_engine := engine ;
21785: LD_ADDR_OWVAR 39
21789: PUSH
21790: LD_VAR 0 2
21794: ST_TO_ADDR
// vc_control := control ;
21795: LD_ADDR_OWVAR 38
21799: PUSH
21800: LD_VAR 0 3
21804: ST_TO_ADDR
// vc_weapon := weapon ;
21805: LD_ADDR_OWVAR 40
21809: PUSH
21810: LD_VAR 0 4
21814: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21815: LD_ADDR_OWVAR 41
21819: PUSH
21820: LD_VAR 0 5
21824: ST_TO_ADDR
// end ;
21825: LD_VAR 0 6
21829: RET
// export function WantPlant ( unit ) ; var task ; begin
21830: LD_INT 0
21832: PPUSH
21833: PPUSH
// result := false ;
21834: LD_ADDR_VAR 0 2
21838: PUSH
21839: LD_INT 0
21841: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21842: LD_ADDR_VAR 0 3
21846: PUSH
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL_OW 437
21856: ST_TO_ADDR
// if task then
21857: LD_VAR 0 3
21861: IFFALSE 21889
// if task [ 1 ] [ 1 ] = p then
21863: LD_VAR 0 3
21867: PUSH
21868: LD_INT 1
21870: ARRAY
21871: PUSH
21872: LD_INT 1
21874: ARRAY
21875: PUSH
21876: LD_STRING p
21878: EQUAL
21879: IFFALSE 21889
// result := true ;
21881: LD_ADDR_VAR 0 2
21885: PUSH
21886: LD_INT 1
21888: ST_TO_ADDR
// end ;
21889: LD_VAR 0 2
21893: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21894: LD_INT 0
21896: PPUSH
21897: PPUSH
21898: PPUSH
21899: PPUSH
// if pos < 1 then
21900: LD_VAR 0 2
21904: PUSH
21905: LD_INT 1
21907: LESS
21908: IFFALSE 21912
// exit ;
21910: GO 22215
// if pos = 1 then
21912: LD_VAR 0 2
21916: PUSH
21917: LD_INT 1
21919: EQUAL
21920: IFFALSE 21953
// result := Replace ( arr , pos [ 1 ] , value ) else
21922: LD_ADDR_VAR 0 4
21926: PUSH
21927: LD_VAR 0 1
21931: PPUSH
21932: LD_VAR 0 2
21936: PUSH
21937: LD_INT 1
21939: ARRAY
21940: PPUSH
21941: LD_VAR 0 3
21945: PPUSH
21946: CALL_OW 1
21950: ST_TO_ADDR
21951: GO 22215
// begin tmp := arr ;
21953: LD_ADDR_VAR 0 6
21957: PUSH
21958: LD_VAR 0 1
21962: ST_TO_ADDR
// s_arr := [ tmp ] ;
21963: LD_ADDR_VAR 0 7
21967: PUSH
21968: LD_VAR 0 6
21972: PUSH
21973: EMPTY
21974: LIST
21975: ST_TO_ADDR
// for i = 1 to pos - 1 do
21976: LD_ADDR_VAR 0 5
21980: PUSH
21981: DOUBLE
21982: LD_INT 1
21984: DEC
21985: ST_TO_ADDR
21986: LD_VAR 0 2
21990: PUSH
21991: LD_INT 1
21993: MINUS
21994: PUSH
21995: FOR_TO
21996: IFFALSE 22041
// begin tmp := tmp [ pos [ i ] ] ;
21998: LD_ADDR_VAR 0 6
22002: PUSH
22003: LD_VAR 0 6
22007: PUSH
22008: LD_VAR 0 2
22012: PUSH
22013: LD_VAR 0 5
22017: ARRAY
22018: ARRAY
22019: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22020: LD_ADDR_VAR 0 7
22024: PUSH
22025: LD_VAR 0 7
22029: PUSH
22030: LD_VAR 0 6
22034: PUSH
22035: EMPTY
22036: LIST
22037: ADD
22038: ST_TO_ADDR
// end ;
22039: GO 21995
22041: POP
22042: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22043: LD_ADDR_VAR 0 6
22047: PUSH
22048: LD_VAR 0 6
22052: PPUSH
22053: LD_VAR 0 2
22057: PUSH
22058: LD_VAR 0 2
22062: ARRAY
22063: PPUSH
22064: LD_VAR 0 3
22068: PPUSH
22069: CALL_OW 1
22073: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22074: LD_ADDR_VAR 0 7
22078: PUSH
22079: LD_VAR 0 7
22083: PPUSH
22084: LD_VAR 0 7
22088: PPUSH
22089: LD_VAR 0 6
22093: PPUSH
22094: CALL_OW 1
22098: ST_TO_ADDR
// for i = s_arr downto 2 do
22099: LD_ADDR_VAR 0 5
22103: PUSH
22104: DOUBLE
22105: LD_VAR 0 7
22109: INC
22110: ST_TO_ADDR
22111: LD_INT 2
22113: PUSH
22114: FOR_DOWNTO
22115: IFFALSE 22199
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22117: LD_ADDR_VAR 0 6
22121: PUSH
22122: LD_VAR 0 7
22126: PUSH
22127: LD_VAR 0 5
22131: PUSH
22132: LD_INT 1
22134: MINUS
22135: ARRAY
22136: PPUSH
22137: LD_VAR 0 2
22141: PUSH
22142: LD_VAR 0 5
22146: PUSH
22147: LD_INT 1
22149: MINUS
22150: ARRAY
22151: PPUSH
22152: LD_VAR 0 7
22156: PUSH
22157: LD_VAR 0 5
22161: ARRAY
22162: PPUSH
22163: CALL_OW 1
22167: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22168: LD_ADDR_VAR 0 7
22172: PUSH
22173: LD_VAR 0 7
22177: PPUSH
22178: LD_VAR 0 5
22182: PUSH
22183: LD_INT 1
22185: MINUS
22186: PPUSH
22187: LD_VAR 0 6
22191: PPUSH
22192: CALL_OW 1
22196: ST_TO_ADDR
// end ;
22197: GO 22114
22199: POP
22200: POP
// result := s_arr [ 1 ] ;
22201: LD_ADDR_VAR 0 4
22205: PUSH
22206: LD_VAR 0 7
22210: PUSH
22211: LD_INT 1
22213: ARRAY
22214: ST_TO_ADDR
// end ; end ;
22215: LD_VAR 0 4
22219: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22220: LD_INT 0
22222: PPUSH
22223: PPUSH
// if not list then
22224: LD_VAR 0 1
22228: NOT
22229: IFFALSE 22233
// exit ;
22231: GO 22324
// i := list [ pos1 ] ;
22233: LD_ADDR_VAR 0 5
22237: PUSH
22238: LD_VAR 0 1
22242: PUSH
22243: LD_VAR 0 2
22247: ARRAY
22248: ST_TO_ADDR
// if not i then
22249: LD_VAR 0 5
22253: NOT
22254: IFFALSE 22258
// exit ;
22256: GO 22324
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22258: LD_ADDR_VAR 0 1
22262: PUSH
22263: LD_VAR 0 1
22267: PPUSH
22268: LD_VAR 0 2
22272: PPUSH
22273: LD_VAR 0 1
22277: PUSH
22278: LD_VAR 0 3
22282: ARRAY
22283: PPUSH
22284: CALL_OW 1
22288: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22289: LD_ADDR_VAR 0 1
22293: PUSH
22294: LD_VAR 0 1
22298: PPUSH
22299: LD_VAR 0 3
22303: PPUSH
22304: LD_VAR 0 5
22308: PPUSH
22309: CALL_OW 1
22313: ST_TO_ADDR
// result := list ;
22314: LD_ADDR_VAR 0 4
22318: PUSH
22319: LD_VAR 0 1
22323: ST_TO_ADDR
// end ;
22324: LD_VAR 0 4
22328: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22329: LD_INT 0
22331: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22332: LD_ADDR_VAR 0 5
22336: PUSH
22337: LD_VAR 0 1
22341: PPUSH
22342: CALL_OW 250
22346: PPUSH
22347: LD_VAR 0 1
22351: PPUSH
22352: CALL_OW 251
22356: PPUSH
22357: LD_VAR 0 2
22361: PPUSH
22362: LD_VAR 0 3
22366: PPUSH
22367: LD_VAR 0 4
22371: PPUSH
22372: CALL 22382 0 5
22376: ST_TO_ADDR
// end ;
22377: LD_VAR 0 5
22381: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22382: LD_INT 0
22384: PPUSH
22385: PPUSH
22386: PPUSH
22387: PPUSH
// if not list then
22388: LD_VAR 0 3
22392: NOT
22393: IFFALSE 22397
// exit ;
22395: GO 22785
// result := [ ] ;
22397: LD_ADDR_VAR 0 6
22401: PUSH
22402: EMPTY
22403: ST_TO_ADDR
// for i in list do
22404: LD_ADDR_VAR 0 7
22408: PUSH
22409: LD_VAR 0 3
22413: PUSH
22414: FOR_IN
22415: IFFALSE 22617
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22417: LD_ADDR_VAR 0 9
22421: PUSH
22422: LD_VAR 0 7
22426: PPUSH
22427: LD_VAR 0 1
22431: PPUSH
22432: LD_VAR 0 2
22436: PPUSH
22437: CALL_OW 297
22441: ST_TO_ADDR
// if not result then
22442: LD_VAR 0 6
22446: NOT
22447: IFFALSE 22473
// result := [ [ i , tmp ] ] else
22449: LD_ADDR_VAR 0 6
22453: PUSH
22454: LD_VAR 0 7
22458: PUSH
22459: LD_VAR 0 9
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: EMPTY
22469: LIST
22470: ST_TO_ADDR
22471: GO 22615
// begin if result [ result ] [ 2 ] < tmp then
22473: LD_VAR 0 6
22477: PUSH
22478: LD_VAR 0 6
22482: ARRAY
22483: PUSH
22484: LD_INT 2
22486: ARRAY
22487: PUSH
22488: LD_VAR 0 9
22492: LESS
22493: IFFALSE 22535
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22495: LD_ADDR_VAR 0 6
22499: PUSH
22500: LD_VAR 0 6
22504: PPUSH
22505: LD_VAR 0 6
22509: PUSH
22510: LD_INT 1
22512: PLUS
22513: PPUSH
22514: LD_VAR 0 7
22518: PUSH
22519: LD_VAR 0 9
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PPUSH
22528: CALL_OW 2
22532: ST_TO_ADDR
22533: GO 22615
// for j = 1 to result do
22535: LD_ADDR_VAR 0 8
22539: PUSH
22540: DOUBLE
22541: LD_INT 1
22543: DEC
22544: ST_TO_ADDR
22545: LD_VAR 0 6
22549: PUSH
22550: FOR_TO
22551: IFFALSE 22613
// begin if tmp < result [ j ] [ 2 ] then
22553: LD_VAR 0 9
22557: PUSH
22558: LD_VAR 0 6
22562: PUSH
22563: LD_VAR 0 8
22567: ARRAY
22568: PUSH
22569: LD_INT 2
22571: ARRAY
22572: LESS
22573: IFFALSE 22611
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22575: LD_ADDR_VAR 0 6
22579: PUSH
22580: LD_VAR 0 6
22584: PPUSH
22585: LD_VAR 0 8
22589: PPUSH
22590: LD_VAR 0 7
22594: PUSH
22595: LD_VAR 0 9
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 2
22608: ST_TO_ADDR
// break ;
22609: GO 22613
// end ; end ;
22611: GO 22550
22613: POP
22614: POP
// end ; end ;
22615: GO 22414
22617: POP
22618: POP
// if result and not asc then
22619: LD_VAR 0 6
22623: PUSH
22624: LD_VAR 0 4
22628: NOT
22629: AND
22630: IFFALSE 22705
// begin tmp := result ;
22632: LD_ADDR_VAR 0 9
22636: PUSH
22637: LD_VAR 0 6
22641: ST_TO_ADDR
// for i = tmp downto 1 do
22642: LD_ADDR_VAR 0 7
22646: PUSH
22647: DOUBLE
22648: LD_VAR 0 9
22652: INC
22653: ST_TO_ADDR
22654: LD_INT 1
22656: PUSH
22657: FOR_DOWNTO
22658: IFFALSE 22703
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22660: LD_ADDR_VAR 0 6
22664: PUSH
22665: LD_VAR 0 6
22669: PPUSH
22670: LD_VAR 0 9
22674: PUSH
22675: LD_VAR 0 7
22679: MINUS
22680: PUSH
22681: LD_INT 1
22683: PLUS
22684: PPUSH
22685: LD_VAR 0 9
22689: PUSH
22690: LD_VAR 0 7
22694: ARRAY
22695: PPUSH
22696: CALL_OW 1
22700: ST_TO_ADDR
22701: GO 22657
22703: POP
22704: POP
// end ; tmp := [ ] ;
22705: LD_ADDR_VAR 0 9
22709: PUSH
22710: EMPTY
22711: ST_TO_ADDR
// if mode then
22712: LD_VAR 0 5
22716: IFFALSE 22785
// begin for i = 1 to result do
22718: LD_ADDR_VAR 0 7
22722: PUSH
22723: DOUBLE
22724: LD_INT 1
22726: DEC
22727: ST_TO_ADDR
22728: LD_VAR 0 6
22732: PUSH
22733: FOR_TO
22734: IFFALSE 22773
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22736: LD_ADDR_VAR 0 9
22740: PUSH
22741: LD_VAR 0 9
22745: PPUSH
22746: LD_VAR 0 7
22750: PPUSH
22751: LD_VAR 0 6
22755: PUSH
22756: LD_VAR 0 7
22760: ARRAY
22761: PUSH
22762: LD_INT 1
22764: ARRAY
22765: PPUSH
22766: CALL_OW 1
22770: ST_TO_ADDR
22771: GO 22733
22773: POP
22774: POP
// result := tmp ;
22775: LD_ADDR_VAR 0 6
22779: PUSH
22780: LD_VAR 0 9
22784: ST_TO_ADDR
// end ; end ;
22785: LD_VAR 0 6
22789: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22790: LD_INT 0
22792: PPUSH
22793: PPUSH
22794: PPUSH
22795: PPUSH
22796: PPUSH
22797: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22798: LD_ADDR_VAR 0 5
22802: PUSH
22803: LD_INT 0
22805: PUSH
22806: LD_INT 0
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: EMPTY
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: ST_TO_ADDR
// if not x or not y then
22820: LD_VAR 0 2
22824: NOT
22825: PUSH
22826: LD_VAR 0 3
22830: NOT
22831: OR
22832: IFFALSE 22836
// exit ;
22834: GO 24486
// if not range then
22836: LD_VAR 0 4
22840: NOT
22841: IFFALSE 22851
// range := 10 ;
22843: LD_ADDR_VAR 0 4
22847: PUSH
22848: LD_INT 10
22850: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22851: LD_ADDR_VAR 0 8
22855: PUSH
22856: LD_INT 81
22858: PUSH
22859: LD_VAR 0 1
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 92
22870: PUSH
22871: LD_VAR 0 2
22875: PUSH
22876: LD_VAR 0 3
22880: PUSH
22881: LD_VAR 0 4
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 3
22894: PUSH
22895: LD_INT 21
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: PPUSH
22914: CALL_OW 69
22918: ST_TO_ADDR
// if not tmp then
22919: LD_VAR 0 8
22923: NOT
22924: IFFALSE 22928
// exit ;
22926: GO 24486
// for i in tmp do
22928: LD_ADDR_VAR 0 6
22932: PUSH
22933: LD_VAR 0 8
22937: PUSH
22938: FOR_IN
22939: IFFALSE 24461
// begin points := [ 0 , 0 , 0 ] ;
22941: LD_ADDR_VAR 0 9
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: LD_INT 0
22951: PUSH
22952: LD_INT 0
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: LIST
22959: ST_TO_ADDR
// bpoints := 1 ;
22960: LD_ADDR_VAR 0 10
22964: PUSH
22965: LD_INT 1
22967: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22968: LD_VAR 0 6
22972: PPUSH
22973: CALL_OW 247
22977: PUSH
22978: LD_INT 1
22980: DOUBLE
22981: EQUAL
22982: IFTRUE 22986
22984: GO 23564
22986: POP
// begin if GetClass ( i ) = 1 then
22987: LD_VAR 0 6
22991: PPUSH
22992: CALL_OW 257
22996: PUSH
22997: LD_INT 1
22999: EQUAL
23000: IFFALSE 23021
// points := [ 10 , 5 , 3 ] ;
23002: LD_ADDR_VAR 0 9
23006: PUSH
23007: LD_INT 10
23009: PUSH
23010: LD_INT 5
23012: PUSH
23013: LD_INT 3
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23021: LD_VAR 0 6
23025: PPUSH
23026: CALL_OW 257
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: LD_INT 4
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: LIST
23044: IN
23045: IFFALSE 23066
// points := [ 3 , 2 , 1 ] ;
23047: LD_ADDR_VAR 0 9
23051: PUSH
23052: LD_INT 3
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: LIST
23065: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23066: LD_VAR 0 6
23070: PPUSH
23071: CALL_OW 257
23075: PUSH
23076: LD_INT 5
23078: EQUAL
23079: IFFALSE 23100
// points := [ 130 , 5 , 2 ] ;
23081: LD_ADDR_VAR 0 9
23085: PUSH
23086: LD_INT 130
23088: PUSH
23089: LD_INT 5
23091: PUSH
23092: LD_INT 2
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: LIST
23099: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23100: LD_VAR 0 6
23104: PPUSH
23105: CALL_OW 257
23109: PUSH
23110: LD_INT 8
23112: EQUAL
23113: IFFALSE 23134
// points := [ 35 , 35 , 30 ] ;
23115: LD_ADDR_VAR 0 9
23119: PUSH
23120: LD_INT 35
23122: PUSH
23123: LD_INT 35
23125: PUSH
23126: LD_INT 30
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23134: LD_VAR 0 6
23138: PPUSH
23139: CALL_OW 257
23143: PUSH
23144: LD_INT 9
23146: EQUAL
23147: IFFALSE 23168
// points := [ 20 , 55 , 40 ] ;
23149: LD_ADDR_VAR 0 9
23153: PUSH
23154: LD_INT 20
23156: PUSH
23157: LD_INT 55
23159: PUSH
23160: LD_INT 40
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23168: LD_VAR 0 6
23172: PPUSH
23173: CALL_OW 257
23177: PUSH
23178: LD_INT 12
23180: PUSH
23181: LD_INT 16
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: IN
23188: IFFALSE 23209
// points := [ 5 , 3 , 2 ] ;
23190: LD_ADDR_VAR 0 9
23194: PUSH
23195: LD_INT 5
23197: PUSH
23198: LD_INT 3
23200: PUSH
23201: LD_INT 2
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: LIST
23208: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23209: LD_VAR 0 6
23213: PPUSH
23214: CALL_OW 257
23218: PUSH
23219: LD_INT 17
23221: EQUAL
23222: IFFALSE 23243
// points := [ 100 , 50 , 75 ] ;
23224: LD_ADDR_VAR 0 9
23228: PUSH
23229: LD_INT 100
23231: PUSH
23232: LD_INT 50
23234: PUSH
23235: LD_INT 75
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: LIST
23242: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23243: LD_VAR 0 6
23247: PPUSH
23248: CALL_OW 257
23252: PUSH
23253: LD_INT 15
23255: EQUAL
23256: IFFALSE 23277
// points := [ 10 , 5 , 3 ] ;
23258: LD_ADDR_VAR 0 9
23262: PUSH
23263: LD_INT 10
23265: PUSH
23266: LD_INT 5
23268: PUSH
23269: LD_INT 3
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: LIST
23276: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23277: LD_VAR 0 6
23281: PPUSH
23282: CALL_OW 257
23286: PUSH
23287: LD_INT 14
23289: EQUAL
23290: IFFALSE 23311
// points := [ 10 , 0 , 0 ] ;
23292: LD_ADDR_VAR 0 9
23296: PUSH
23297: LD_INT 10
23299: PUSH
23300: LD_INT 0
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: LIST
23310: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23311: LD_VAR 0 6
23315: PPUSH
23316: CALL_OW 257
23320: PUSH
23321: LD_INT 11
23323: EQUAL
23324: IFFALSE 23345
// points := [ 30 , 10 , 5 ] ;
23326: LD_ADDR_VAR 0 9
23330: PUSH
23331: LD_INT 30
23333: PUSH
23334: LD_INT 10
23336: PUSH
23337: LD_INT 5
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: LIST
23344: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23345: LD_VAR 0 1
23349: PPUSH
23350: LD_INT 5
23352: PPUSH
23353: CALL_OW 321
23357: PUSH
23358: LD_INT 2
23360: EQUAL
23361: IFFALSE 23378
// bpoints := bpoints * 1.8 ;
23363: LD_ADDR_VAR 0 10
23367: PUSH
23368: LD_VAR 0 10
23372: PUSH
23373: LD_REAL  1.80000000000000E+0000
23376: MUL
23377: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23378: LD_VAR 0 6
23382: PPUSH
23383: CALL_OW 257
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: LD_INT 2
23393: PUSH
23394: LD_INT 3
23396: PUSH
23397: LD_INT 4
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: IN
23406: PUSH
23407: LD_VAR 0 1
23411: PPUSH
23412: LD_INT 51
23414: PPUSH
23415: CALL_OW 321
23419: PUSH
23420: LD_INT 2
23422: EQUAL
23423: AND
23424: IFFALSE 23441
// bpoints := bpoints * 1.2 ;
23426: LD_ADDR_VAR 0 10
23430: PUSH
23431: LD_VAR 0 10
23435: PUSH
23436: LD_REAL  1.20000000000000E+0000
23439: MUL
23440: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23441: LD_VAR 0 6
23445: PPUSH
23446: CALL_OW 257
23450: PUSH
23451: LD_INT 5
23453: PUSH
23454: LD_INT 7
23456: PUSH
23457: LD_INT 9
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: IN
23465: PUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: LD_INT 52
23473: PPUSH
23474: CALL_OW 321
23478: PUSH
23479: LD_INT 2
23481: EQUAL
23482: AND
23483: IFFALSE 23500
// bpoints := bpoints * 1.5 ;
23485: LD_ADDR_VAR 0 10
23489: PUSH
23490: LD_VAR 0 10
23494: PUSH
23495: LD_REAL  1.50000000000000E+0000
23498: MUL
23499: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23500: LD_VAR 0 1
23504: PPUSH
23505: LD_INT 66
23507: PPUSH
23508: CALL_OW 321
23512: PUSH
23513: LD_INT 2
23515: EQUAL
23516: IFFALSE 23533
// bpoints := bpoints * 1.1 ;
23518: LD_ADDR_VAR 0 10
23522: PUSH
23523: LD_VAR 0 10
23527: PUSH
23528: LD_REAL  1.10000000000000E+0000
23531: MUL
23532: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23533: LD_ADDR_VAR 0 10
23537: PUSH
23538: LD_VAR 0 10
23542: PUSH
23543: LD_VAR 0 6
23547: PPUSH
23548: LD_INT 1
23550: PPUSH
23551: CALL_OW 259
23555: PUSH
23556: LD_REAL  1.15000000000000E+0000
23559: MUL
23560: MUL
23561: ST_TO_ADDR
// end ; unit_vehicle :
23562: GO 24390
23564: LD_INT 2
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 24378
23572: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23573: LD_VAR 0 6
23577: PPUSH
23578: CALL_OW 264
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: LD_INT 42
23588: PUSH
23589: LD_INT 24
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: LIST
23596: IN
23597: IFFALSE 23618
// points := [ 25 , 5 , 3 ] ;
23599: LD_ADDR_VAR 0 9
23603: PUSH
23604: LD_INT 25
23606: PUSH
23607: LD_INT 5
23609: PUSH
23610: LD_INT 3
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: LIST
23617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23618: LD_VAR 0 6
23622: PPUSH
23623: CALL_OW 264
23627: PUSH
23628: LD_INT 4
23630: PUSH
23631: LD_INT 43
23633: PUSH
23634: LD_INT 25
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: IN
23642: IFFALSE 23663
// points := [ 40 , 15 , 5 ] ;
23644: LD_ADDR_VAR 0 9
23648: PUSH
23649: LD_INT 40
23651: PUSH
23652: LD_INT 15
23654: PUSH
23655: LD_INT 5
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23663: LD_VAR 0 6
23667: PPUSH
23668: CALL_OW 264
23672: PUSH
23673: LD_INT 3
23675: PUSH
23676: LD_INT 23
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: IN
23683: IFFALSE 23704
// points := [ 7 , 25 , 8 ] ;
23685: LD_ADDR_VAR 0 9
23689: PUSH
23690: LD_INT 7
23692: PUSH
23693: LD_INT 25
23695: PUSH
23696: LD_INT 8
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23704: LD_VAR 0 6
23708: PPUSH
23709: CALL_OW 264
23713: PUSH
23714: LD_INT 5
23716: PUSH
23717: LD_INT 27
23719: PUSH
23720: LD_INT 44
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: IN
23728: IFFALSE 23749
// points := [ 14 , 50 , 16 ] ;
23730: LD_ADDR_VAR 0 9
23734: PUSH
23735: LD_INT 14
23737: PUSH
23738: LD_INT 50
23740: PUSH
23741: LD_INT 16
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: LIST
23748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23749: LD_VAR 0 6
23753: PPUSH
23754: CALL_OW 264
23758: PUSH
23759: LD_INT 6
23761: PUSH
23762: LD_INT 46
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: IN
23769: IFFALSE 23790
// points := [ 32 , 120 , 70 ] ;
23771: LD_ADDR_VAR 0 9
23775: PUSH
23776: LD_INT 32
23778: PUSH
23779: LD_INT 120
23781: PUSH
23782: LD_INT 70
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23790: LD_VAR 0 6
23794: PPUSH
23795: CALL_OW 264
23799: PUSH
23800: LD_INT 7
23802: PUSH
23803: LD_INT 28
23805: PUSH
23806: LD_INT 45
23808: PUSH
23809: LD_INT 92
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: IN
23818: IFFALSE 23839
// points := [ 35 , 20 , 45 ] ;
23820: LD_ADDR_VAR 0 9
23824: PUSH
23825: LD_INT 35
23827: PUSH
23828: LD_INT 20
23830: PUSH
23831: LD_INT 45
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: LIST
23838: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23839: LD_VAR 0 6
23843: PPUSH
23844: CALL_OW 264
23848: PUSH
23849: LD_INT 47
23851: PUSH
23852: EMPTY
23853: LIST
23854: IN
23855: IFFALSE 23876
// points := [ 67 , 45 , 75 ] ;
23857: LD_ADDR_VAR 0 9
23861: PUSH
23862: LD_INT 67
23864: PUSH
23865: LD_INT 45
23867: PUSH
23868: LD_INT 75
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23876: LD_VAR 0 6
23880: PPUSH
23881: CALL_OW 264
23885: PUSH
23886: LD_INT 26
23888: PUSH
23889: EMPTY
23890: LIST
23891: IN
23892: IFFALSE 23913
// points := [ 120 , 30 , 80 ] ;
23894: LD_ADDR_VAR 0 9
23898: PUSH
23899: LD_INT 120
23901: PUSH
23902: LD_INT 30
23904: PUSH
23905: LD_INT 80
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: LIST
23912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23913: LD_VAR 0 6
23917: PPUSH
23918: CALL_OW 264
23922: PUSH
23923: LD_INT 22
23925: PUSH
23926: EMPTY
23927: LIST
23928: IN
23929: IFFALSE 23950
// points := [ 40 , 1 , 1 ] ;
23931: LD_ADDR_VAR 0 9
23935: PUSH
23936: LD_INT 40
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23950: LD_VAR 0 6
23954: PPUSH
23955: CALL_OW 264
23959: PUSH
23960: LD_INT 29
23962: PUSH
23963: EMPTY
23964: LIST
23965: IN
23966: IFFALSE 23987
// points := [ 70 , 200 , 400 ] ;
23968: LD_ADDR_VAR 0 9
23972: PUSH
23973: LD_INT 70
23975: PUSH
23976: LD_INT 200
23978: PUSH
23979: LD_INT 400
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23987: LD_VAR 0 6
23991: PPUSH
23992: CALL_OW 264
23996: PUSH
23997: LD_INT 14
23999: PUSH
24000: LD_INT 53
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: IN
24007: IFFALSE 24028
// points := [ 40 , 10 , 20 ] ;
24009: LD_ADDR_VAR 0 9
24013: PUSH
24014: LD_INT 40
24016: PUSH
24017: LD_INT 10
24019: PUSH
24020: LD_INT 20
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24028: LD_VAR 0 6
24032: PPUSH
24033: CALL_OW 264
24037: PUSH
24038: LD_INT 9
24040: PUSH
24041: EMPTY
24042: LIST
24043: IN
24044: IFFALSE 24065
// points := [ 5 , 70 , 20 ] ;
24046: LD_ADDR_VAR 0 9
24050: PUSH
24051: LD_INT 5
24053: PUSH
24054: LD_INT 70
24056: PUSH
24057: LD_INT 20
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24065: LD_VAR 0 6
24069: PPUSH
24070: CALL_OW 264
24074: PUSH
24075: LD_INT 10
24077: PUSH
24078: EMPTY
24079: LIST
24080: IN
24081: IFFALSE 24102
// points := [ 35 , 110 , 70 ] ;
24083: LD_ADDR_VAR 0 9
24087: PUSH
24088: LD_INT 35
24090: PUSH
24091: LD_INT 110
24093: PUSH
24094: LD_INT 70
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: LIST
24101: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24102: LD_VAR 0 6
24106: PPUSH
24107: CALL_OW 265
24111: PUSH
24112: LD_INT 25
24114: EQUAL
24115: IFFALSE 24136
// points := [ 80 , 65 , 100 ] ;
24117: LD_ADDR_VAR 0 9
24121: PUSH
24122: LD_INT 80
24124: PUSH
24125: LD_INT 65
24127: PUSH
24128: LD_INT 100
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24136: LD_VAR 0 6
24140: PPUSH
24141: CALL_OW 263
24145: PUSH
24146: LD_INT 1
24148: EQUAL
24149: IFFALSE 24184
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24151: LD_ADDR_VAR 0 10
24155: PUSH
24156: LD_VAR 0 10
24160: PUSH
24161: LD_VAR 0 6
24165: PPUSH
24166: CALL_OW 311
24170: PPUSH
24171: LD_INT 3
24173: PPUSH
24174: CALL_OW 259
24178: PUSH
24179: LD_INT 4
24181: MUL
24182: MUL
24183: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24184: LD_VAR 0 6
24188: PPUSH
24189: CALL_OW 263
24193: PUSH
24194: LD_INT 2
24196: EQUAL
24197: IFFALSE 24248
// begin j := IsControledBy ( i ) ;
24199: LD_ADDR_VAR 0 7
24203: PUSH
24204: LD_VAR 0 6
24208: PPUSH
24209: CALL_OW 312
24213: ST_TO_ADDR
// if j then
24214: LD_VAR 0 7
24218: IFFALSE 24248
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24220: LD_ADDR_VAR 0 10
24224: PUSH
24225: LD_VAR 0 10
24229: PUSH
24230: LD_VAR 0 7
24234: PPUSH
24235: LD_INT 3
24237: PPUSH
24238: CALL_OW 259
24242: PUSH
24243: LD_INT 3
24245: MUL
24246: MUL
24247: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24248: LD_VAR 0 6
24252: PPUSH
24253: CALL_OW 264
24257: PUSH
24258: LD_INT 5
24260: PUSH
24261: LD_INT 6
24263: PUSH
24264: LD_INT 46
24266: PUSH
24267: LD_INT 44
24269: PUSH
24270: LD_INT 47
24272: PUSH
24273: LD_INT 45
24275: PUSH
24276: LD_INT 28
24278: PUSH
24279: LD_INT 7
24281: PUSH
24282: LD_INT 27
24284: PUSH
24285: LD_INT 29
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: IN
24300: PUSH
24301: LD_VAR 0 1
24305: PPUSH
24306: LD_INT 52
24308: PPUSH
24309: CALL_OW 321
24313: PUSH
24314: LD_INT 2
24316: EQUAL
24317: AND
24318: IFFALSE 24335
// bpoints := bpoints * 1.2 ;
24320: LD_ADDR_VAR 0 10
24324: PUSH
24325: LD_VAR 0 10
24329: PUSH
24330: LD_REAL  1.20000000000000E+0000
24333: MUL
24334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24335: LD_VAR 0 6
24339: PPUSH
24340: CALL_OW 264
24344: PUSH
24345: LD_INT 6
24347: PUSH
24348: LD_INT 46
24350: PUSH
24351: LD_INT 47
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: LIST
24358: IN
24359: IFFALSE 24376
// bpoints := bpoints * 1.2 ;
24361: LD_ADDR_VAR 0 10
24365: PUSH
24366: LD_VAR 0 10
24370: PUSH
24371: LD_REAL  1.20000000000000E+0000
24374: MUL
24375: ST_TO_ADDR
// end ; unit_building :
24376: GO 24390
24378: LD_INT 3
24380: DOUBLE
24381: EQUAL
24382: IFTRUE 24386
24384: GO 24389
24386: POP
// ; end ;
24387: GO 24390
24389: POP
// for j = 1 to 3 do
24390: LD_ADDR_VAR 0 7
24394: PUSH
24395: DOUBLE
24396: LD_INT 1
24398: DEC
24399: ST_TO_ADDR
24400: LD_INT 3
24402: PUSH
24403: FOR_TO
24404: IFFALSE 24457
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24406: LD_ADDR_VAR 0 5
24410: PUSH
24411: LD_VAR 0 5
24415: PPUSH
24416: LD_VAR 0 7
24420: PPUSH
24421: LD_VAR 0 5
24425: PUSH
24426: LD_VAR 0 7
24430: ARRAY
24431: PUSH
24432: LD_VAR 0 9
24436: PUSH
24437: LD_VAR 0 7
24441: ARRAY
24442: PUSH
24443: LD_VAR 0 10
24447: MUL
24448: PLUS
24449: PPUSH
24450: CALL_OW 1
24454: ST_TO_ADDR
24455: GO 24403
24457: POP
24458: POP
// end ;
24459: GO 22938
24461: POP
24462: POP
// result := Replace ( result , 4 , tmp ) ;
24463: LD_ADDR_VAR 0 5
24467: PUSH
24468: LD_VAR 0 5
24472: PPUSH
24473: LD_INT 4
24475: PPUSH
24476: LD_VAR 0 8
24480: PPUSH
24481: CALL_OW 1
24485: ST_TO_ADDR
// end ;
24486: LD_VAR 0 5
24490: RET
// export function DangerAtRange ( unit , range ) ; begin
24491: LD_INT 0
24493: PPUSH
// if not unit then
24494: LD_VAR 0 1
24498: NOT
24499: IFFALSE 24503
// exit ;
24501: GO 24548
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24503: LD_ADDR_VAR 0 3
24507: PUSH
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 255
24517: PPUSH
24518: LD_VAR 0 1
24522: PPUSH
24523: CALL_OW 250
24527: PPUSH
24528: LD_VAR 0 1
24532: PPUSH
24533: CALL_OW 251
24537: PPUSH
24538: LD_VAR 0 2
24542: PPUSH
24543: CALL 22790 0 4
24547: ST_TO_ADDR
// end ;
24548: LD_VAR 0 3
24552: RET
// export function DangerInArea ( side , area ) ; begin
24553: LD_INT 0
24555: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24556: LD_ADDR_VAR 0 3
24560: PUSH
24561: LD_VAR 0 2
24565: PPUSH
24566: LD_INT 81
24568: PUSH
24569: LD_VAR 0 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PPUSH
24578: CALL_OW 70
24582: ST_TO_ADDR
// end ;
24583: LD_VAR 0 3
24587: RET
// export function IsExtension ( b ) ; begin
24588: LD_INT 0
24590: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24591: LD_ADDR_VAR 0 2
24595: PUSH
24596: LD_VAR 0 1
24600: PUSH
24601: LD_INT 23
24603: PUSH
24604: LD_INT 20
24606: PUSH
24607: LD_INT 22
24609: PUSH
24610: LD_INT 17
24612: PUSH
24613: LD_INT 24
24615: PUSH
24616: LD_INT 21
24618: PUSH
24619: LD_INT 19
24621: PUSH
24622: LD_INT 16
24624: PUSH
24625: LD_INT 25
24627: PUSH
24628: LD_INT 18
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: IN
24643: ST_TO_ADDR
// end ;
24644: LD_VAR 0 2
24648: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24649: LD_INT 0
24651: PPUSH
24652: PPUSH
24653: PPUSH
// result := [ ] ;
24654: LD_ADDR_VAR 0 4
24658: PUSH
24659: EMPTY
24660: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24661: LD_ADDR_VAR 0 5
24665: PUSH
24666: LD_VAR 0 2
24670: PPUSH
24671: LD_INT 21
24673: PUSH
24674: LD_INT 3
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PPUSH
24681: CALL_OW 70
24685: ST_TO_ADDR
// if not tmp then
24686: LD_VAR 0 5
24690: NOT
24691: IFFALSE 24695
// exit ;
24693: GO 24759
// if checkLink then
24695: LD_VAR 0 3
24699: IFFALSE 24749
// begin for i in tmp do
24701: LD_ADDR_VAR 0 6
24705: PUSH
24706: LD_VAR 0 5
24710: PUSH
24711: FOR_IN
24712: IFFALSE 24747
// if GetBase ( i ) <> base then
24714: LD_VAR 0 6
24718: PPUSH
24719: CALL_OW 274
24723: PUSH
24724: LD_VAR 0 1
24728: NONEQUAL
24729: IFFALSE 24745
// ComLinkToBase ( base , i ) ;
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_VAR 0 6
24740: PPUSH
24741: CALL_OW 169
24745: GO 24711
24747: POP
24748: POP
// end ; result := tmp ;
24749: LD_ADDR_VAR 0 4
24753: PUSH
24754: LD_VAR 0 5
24758: ST_TO_ADDR
// end ;
24759: LD_VAR 0 4
24763: RET
// export function ComComplete ( units , b ) ; var i ; begin
24764: LD_INT 0
24766: PPUSH
24767: PPUSH
// if not units then
24768: LD_VAR 0 1
24772: NOT
24773: IFFALSE 24777
// exit ;
24775: GO 24867
// for i in units do
24777: LD_ADDR_VAR 0 4
24781: PUSH
24782: LD_VAR 0 1
24786: PUSH
24787: FOR_IN
24788: IFFALSE 24865
// if BuildingStatus ( b ) = bs_build then
24790: LD_VAR 0 2
24794: PPUSH
24795: CALL_OW 461
24799: PUSH
24800: LD_INT 1
24802: EQUAL
24803: IFFALSE 24863
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24805: LD_VAR 0 4
24809: PPUSH
24810: LD_STRING h
24812: PUSH
24813: LD_VAR 0 2
24817: PPUSH
24818: CALL_OW 250
24822: PUSH
24823: LD_VAR 0 2
24827: PPUSH
24828: CALL_OW 251
24832: PUSH
24833: LD_VAR 0 2
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: LD_INT 0
24843: PUSH
24844: LD_INT 0
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: PUSH
24856: EMPTY
24857: LIST
24858: PPUSH
24859: CALL_OW 446
24863: GO 24787
24865: POP
24866: POP
// end ;
24867: LD_VAR 0 3
24871: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24872: LD_INT 0
24874: PPUSH
24875: PPUSH
24876: PPUSH
24877: PPUSH
24878: PPUSH
24879: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24880: LD_VAR 0 1
24884: NOT
24885: PUSH
24886: LD_VAR 0 1
24890: PPUSH
24891: CALL_OW 263
24895: PUSH
24896: LD_INT 2
24898: NONEQUAL
24899: OR
24900: IFFALSE 24904
// exit ;
24902: GO 25220
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24904: LD_ADDR_VAR 0 6
24908: PUSH
24909: LD_INT 22
24911: PUSH
24912: LD_VAR 0 1
24916: PPUSH
24917: CALL_OW 255
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 30
24931: PUSH
24932: LD_INT 36
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 34
24941: PUSH
24942: LD_INT 31
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: LIST
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PPUSH
24958: CALL_OW 69
24962: ST_TO_ADDR
// if not tmp then
24963: LD_VAR 0 6
24967: NOT
24968: IFFALSE 24972
// exit ;
24970: GO 25220
// result := [ ] ;
24972: LD_ADDR_VAR 0 2
24976: PUSH
24977: EMPTY
24978: ST_TO_ADDR
// for i in tmp do
24979: LD_ADDR_VAR 0 3
24983: PUSH
24984: LD_VAR 0 6
24988: PUSH
24989: FOR_IN
24990: IFFALSE 25061
// begin t := UnitsInside ( i ) ;
24992: LD_ADDR_VAR 0 4
24996: PUSH
24997: LD_VAR 0 3
25001: PPUSH
25002: CALL_OW 313
25006: ST_TO_ADDR
// if t then
25007: LD_VAR 0 4
25011: IFFALSE 25059
// for j in t do
25013: LD_ADDR_VAR 0 7
25017: PUSH
25018: LD_VAR 0 4
25022: PUSH
25023: FOR_IN
25024: IFFALSE 25057
// result := Replace ( result , result + 1 , j ) ;
25026: LD_ADDR_VAR 0 2
25030: PUSH
25031: LD_VAR 0 2
25035: PPUSH
25036: LD_VAR 0 2
25040: PUSH
25041: LD_INT 1
25043: PLUS
25044: PPUSH
25045: LD_VAR 0 7
25049: PPUSH
25050: CALL_OW 1
25054: ST_TO_ADDR
25055: GO 25023
25057: POP
25058: POP
// end ;
25059: GO 24989
25061: POP
25062: POP
// if not result then
25063: LD_VAR 0 2
25067: NOT
25068: IFFALSE 25072
// exit ;
25070: GO 25220
// mech := result [ 1 ] ;
25072: LD_ADDR_VAR 0 5
25076: PUSH
25077: LD_VAR 0 2
25081: PUSH
25082: LD_INT 1
25084: ARRAY
25085: ST_TO_ADDR
// if result > 1 then
25086: LD_VAR 0 2
25090: PUSH
25091: LD_INT 1
25093: GREATER
25094: IFFALSE 25206
// begin for i = 2 to result do
25096: LD_ADDR_VAR 0 3
25100: PUSH
25101: DOUBLE
25102: LD_INT 2
25104: DEC
25105: ST_TO_ADDR
25106: LD_VAR 0 2
25110: PUSH
25111: FOR_TO
25112: IFFALSE 25204
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25114: LD_ADDR_VAR 0 4
25118: PUSH
25119: LD_VAR 0 2
25123: PUSH
25124: LD_VAR 0 3
25128: ARRAY
25129: PPUSH
25130: LD_INT 3
25132: PPUSH
25133: CALL_OW 259
25137: PUSH
25138: LD_VAR 0 2
25142: PUSH
25143: LD_VAR 0 3
25147: ARRAY
25148: PPUSH
25149: CALL_OW 432
25153: MINUS
25154: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25155: LD_VAR 0 4
25159: PUSH
25160: LD_VAR 0 5
25164: PPUSH
25165: LD_INT 3
25167: PPUSH
25168: CALL_OW 259
25172: PUSH
25173: LD_VAR 0 5
25177: PPUSH
25178: CALL_OW 432
25182: MINUS
25183: GREATEREQUAL
25184: IFFALSE 25202
// mech := result [ i ] ;
25186: LD_ADDR_VAR 0 5
25190: PUSH
25191: LD_VAR 0 2
25195: PUSH
25196: LD_VAR 0 3
25200: ARRAY
25201: ST_TO_ADDR
// end ;
25202: GO 25111
25204: POP
25205: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25206: LD_VAR 0 1
25210: PPUSH
25211: LD_VAR 0 5
25215: PPUSH
25216: CALL_OW 135
// end ;
25220: LD_VAR 0 2
25224: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25225: LD_INT 0
25227: PPUSH
25228: PPUSH
25229: PPUSH
25230: PPUSH
25231: PPUSH
25232: PPUSH
25233: PPUSH
25234: PPUSH
25235: PPUSH
25236: PPUSH
25237: PPUSH
25238: PPUSH
25239: PPUSH
// result := [ ] ;
25240: LD_ADDR_VAR 0 7
25244: PUSH
25245: EMPTY
25246: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25247: LD_VAR 0 1
25251: PPUSH
25252: CALL_OW 266
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: IN
25267: NOT
25268: IFFALSE 25272
// exit ;
25270: GO 26906
// if name then
25272: LD_VAR 0 3
25276: IFFALSE 25292
// SetBName ( base_dep , name ) ;
25278: LD_VAR 0 1
25282: PPUSH
25283: LD_VAR 0 3
25287: PPUSH
25288: CALL_OW 500
// base := GetBase ( base_dep ) ;
25292: LD_ADDR_VAR 0 15
25296: PUSH
25297: LD_VAR 0 1
25301: PPUSH
25302: CALL_OW 274
25306: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25307: LD_ADDR_VAR 0 16
25311: PUSH
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL_OW 255
25321: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25322: LD_ADDR_VAR 0 17
25326: PUSH
25327: LD_VAR 0 1
25331: PPUSH
25332: CALL_OW 248
25336: ST_TO_ADDR
// if sources then
25337: LD_VAR 0 5
25341: IFFALSE 25388
// for i = 1 to 3 do
25343: LD_ADDR_VAR 0 8
25347: PUSH
25348: DOUBLE
25349: LD_INT 1
25351: DEC
25352: ST_TO_ADDR
25353: LD_INT 3
25355: PUSH
25356: FOR_TO
25357: IFFALSE 25386
// AddResourceType ( base , i , sources [ i ] ) ;
25359: LD_VAR 0 15
25363: PPUSH
25364: LD_VAR 0 8
25368: PPUSH
25369: LD_VAR 0 5
25373: PUSH
25374: LD_VAR 0 8
25378: ARRAY
25379: PPUSH
25380: CALL_OW 276
25384: GO 25356
25386: POP
25387: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25388: LD_ADDR_VAR 0 18
25392: PUSH
25393: LD_VAR 0 15
25397: PPUSH
25398: LD_VAR 0 2
25402: PPUSH
25403: LD_INT 1
25405: PPUSH
25406: CALL 24649 0 3
25410: ST_TO_ADDR
// InitHc ;
25411: CALL_OW 19
// InitUc ;
25415: CALL_OW 18
// uc_side := side ;
25419: LD_ADDR_OWVAR 20
25423: PUSH
25424: LD_VAR 0 16
25428: ST_TO_ADDR
// uc_nation := nation ;
25429: LD_ADDR_OWVAR 21
25433: PUSH
25434: LD_VAR 0 17
25438: ST_TO_ADDR
// if buildings then
25439: LD_VAR 0 18
25443: IFFALSE 26765
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25445: LD_ADDR_VAR 0 19
25449: PUSH
25450: LD_VAR 0 18
25454: PPUSH
25455: LD_INT 2
25457: PUSH
25458: LD_INT 30
25460: PUSH
25461: LD_INT 29
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 30
25470: PUSH
25471: LD_INT 30
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: PPUSH
25483: CALL_OW 72
25487: ST_TO_ADDR
// if tmp then
25488: LD_VAR 0 19
25492: IFFALSE 25540
// for i in tmp do
25494: LD_ADDR_VAR 0 8
25498: PUSH
25499: LD_VAR 0 19
25503: PUSH
25504: FOR_IN
25505: IFFALSE 25538
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25507: LD_VAR 0 8
25511: PPUSH
25512: CALL_OW 250
25516: PPUSH
25517: LD_VAR 0 8
25521: PPUSH
25522: CALL_OW 251
25526: PPUSH
25527: LD_VAR 0 16
25531: PPUSH
25532: CALL_OW 441
25536: GO 25504
25538: POP
25539: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25540: LD_VAR 0 18
25544: PPUSH
25545: LD_INT 2
25547: PUSH
25548: LD_INT 30
25550: PUSH
25551: LD_INT 32
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 30
25560: PUSH
25561: LD_INT 33
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: LIST
25572: PPUSH
25573: CALL_OW 72
25577: IFFALSE 25665
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25579: LD_ADDR_VAR 0 8
25583: PUSH
25584: LD_VAR 0 18
25588: PPUSH
25589: LD_INT 2
25591: PUSH
25592: LD_INT 30
25594: PUSH
25595: LD_INT 32
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 30
25604: PUSH
25605: LD_INT 33
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: LIST
25616: PPUSH
25617: CALL_OW 72
25621: PUSH
25622: FOR_IN
25623: IFFALSE 25663
// begin if not GetBWeapon ( i ) then
25625: LD_VAR 0 8
25629: PPUSH
25630: CALL_OW 269
25634: NOT
25635: IFFALSE 25661
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25637: LD_VAR 0 8
25641: PPUSH
25642: LD_VAR 0 8
25646: PPUSH
25647: LD_VAR 0 2
25651: PPUSH
25652: CALL 26911 0 2
25656: PPUSH
25657: CALL_OW 431
// end ;
25661: GO 25622
25663: POP
25664: POP
// end ; for i = 1 to personel do
25665: LD_ADDR_VAR 0 8
25669: PUSH
25670: DOUBLE
25671: LD_INT 1
25673: DEC
25674: ST_TO_ADDR
25675: LD_VAR 0 6
25679: PUSH
25680: FOR_TO
25681: IFFALSE 26745
// begin if i > 4 then
25683: LD_VAR 0 8
25687: PUSH
25688: LD_INT 4
25690: GREATER
25691: IFFALSE 25695
// break ;
25693: GO 26745
// case i of 1 :
25695: LD_VAR 0 8
25699: PUSH
25700: LD_INT 1
25702: DOUBLE
25703: EQUAL
25704: IFTRUE 25708
25706: GO 25788
25708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25709: LD_ADDR_VAR 0 12
25713: PUSH
25714: LD_VAR 0 18
25718: PPUSH
25719: LD_INT 22
25721: PUSH
25722: LD_VAR 0 16
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 58
25733: PUSH
25734: EMPTY
25735: LIST
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: LD_INT 30
25742: PUSH
25743: LD_INT 32
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 30
25752: PUSH
25753: LD_INT 4
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 30
25762: PUSH
25763: LD_INT 5
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: LIST
25780: PPUSH
25781: CALL_OW 72
25785: ST_TO_ADDR
25786: GO 26010
25788: LD_INT 2
25790: DOUBLE
25791: EQUAL
25792: IFTRUE 25796
25794: GO 25858
25796: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25797: LD_ADDR_VAR 0 12
25801: PUSH
25802: LD_VAR 0 18
25806: PPUSH
25807: LD_INT 22
25809: PUSH
25810: LD_VAR 0 16
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: PUSH
25822: LD_INT 30
25824: PUSH
25825: LD_INT 0
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 30
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: LIST
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PPUSH
25851: CALL_OW 72
25855: ST_TO_ADDR
25856: GO 26010
25858: LD_INT 3
25860: DOUBLE
25861: EQUAL
25862: IFTRUE 25866
25864: GO 25928
25866: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25867: LD_ADDR_VAR 0 12
25871: PUSH
25872: LD_VAR 0 18
25876: PPUSH
25877: LD_INT 22
25879: PUSH
25880: LD_VAR 0 16
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: LD_INT 30
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 30
25904: PUSH
25905: LD_INT 3
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PPUSH
25921: CALL_OW 72
25925: ST_TO_ADDR
25926: GO 26010
25928: LD_INT 4
25930: DOUBLE
25931: EQUAL
25932: IFTRUE 25936
25934: GO 26009
25936: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25937: LD_ADDR_VAR 0 12
25941: PUSH
25942: LD_VAR 0 18
25946: PPUSH
25947: LD_INT 22
25949: PUSH
25950: LD_VAR 0 16
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 2
25961: PUSH
25962: LD_INT 30
25964: PUSH
25965: LD_INT 6
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 30
25974: PUSH
25975: LD_INT 7
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 30
25984: PUSH
25985: LD_INT 8
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PPUSH
26002: CALL_OW 72
26006: ST_TO_ADDR
26007: GO 26010
26009: POP
// if i = 1 then
26010: LD_VAR 0 8
26014: PUSH
26015: LD_INT 1
26017: EQUAL
26018: IFFALSE 26129
// begin tmp := [ ] ;
26020: LD_ADDR_VAR 0 19
26024: PUSH
26025: EMPTY
26026: ST_TO_ADDR
// for j in f do
26027: LD_ADDR_VAR 0 9
26031: PUSH
26032: LD_VAR 0 12
26036: PUSH
26037: FOR_IN
26038: IFFALSE 26111
// if GetBType ( j ) = b_bunker then
26040: LD_VAR 0 9
26044: PPUSH
26045: CALL_OW 266
26049: PUSH
26050: LD_INT 32
26052: EQUAL
26053: IFFALSE 26080
// tmp := Insert ( tmp , 1 , j ) else
26055: LD_ADDR_VAR 0 19
26059: PUSH
26060: LD_VAR 0 19
26064: PPUSH
26065: LD_INT 1
26067: PPUSH
26068: LD_VAR 0 9
26072: PPUSH
26073: CALL_OW 2
26077: ST_TO_ADDR
26078: GO 26109
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26080: LD_ADDR_VAR 0 19
26084: PUSH
26085: LD_VAR 0 19
26089: PPUSH
26090: LD_VAR 0 19
26094: PUSH
26095: LD_INT 1
26097: PLUS
26098: PPUSH
26099: LD_VAR 0 9
26103: PPUSH
26104: CALL_OW 2
26108: ST_TO_ADDR
26109: GO 26037
26111: POP
26112: POP
// if tmp then
26113: LD_VAR 0 19
26117: IFFALSE 26129
// f := tmp ;
26119: LD_ADDR_VAR 0 12
26123: PUSH
26124: LD_VAR 0 19
26128: ST_TO_ADDR
// end ; x := personel [ i ] ;
26129: LD_ADDR_VAR 0 13
26133: PUSH
26134: LD_VAR 0 6
26138: PUSH
26139: LD_VAR 0 8
26143: ARRAY
26144: ST_TO_ADDR
// if x = - 1 then
26145: LD_VAR 0 13
26149: PUSH
26150: LD_INT 1
26152: NEG
26153: EQUAL
26154: IFFALSE 26363
// begin for j in f do
26156: LD_ADDR_VAR 0 9
26160: PUSH
26161: LD_VAR 0 12
26165: PUSH
26166: FOR_IN
26167: IFFALSE 26359
// repeat InitHc ;
26169: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26173: LD_VAR 0 9
26177: PPUSH
26178: CALL_OW 266
26182: PUSH
26183: LD_INT 5
26185: EQUAL
26186: IFFALSE 26256
// begin if UnitsInside ( j ) < 3 then
26188: LD_VAR 0 9
26192: PPUSH
26193: CALL_OW 313
26197: PUSH
26198: LD_INT 3
26200: LESS
26201: IFFALSE 26237
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26203: LD_INT 0
26205: PPUSH
26206: LD_INT 5
26208: PUSH
26209: LD_INT 8
26211: PUSH
26212: LD_INT 9
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: PUSH
26220: LD_VAR 0 17
26224: ARRAY
26225: PPUSH
26226: LD_VAR 0 4
26230: PPUSH
26231: CALL_OW 380
26235: GO 26254
// PrepareHuman ( false , i , skill ) ;
26237: LD_INT 0
26239: PPUSH
26240: LD_VAR 0 8
26244: PPUSH
26245: LD_VAR 0 4
26249: PPUSH
26250: CALL_OW 380
// end else
26254: GO 26273
// PrepareHuman ( false , i , skill ) ;
26256: LD_INT 0
26258: PPUSH
26259: LD_VAR 0 8
26263: PPUSH
26264: LD_VAR 0 4
26268: PPUSH
26269: CALL_OW 380
// un := CreateHuman ;
26273: LD_ADDR_VAR 0 14
26277: PUSH
26278: CALL_OW 44
26282: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26283: LD_ADDR_VAR 0 7
26287: PUSH
26288: LD_VAR 0 7
26292: PPUSH
26293: LD_INT 1
26295: PPUSH
26296: LD_VAR 0 14
26300: PPUSH
26301: CALL_OW 2
26305: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26306: LD_VAR 0 14
26310: PPUSH
26311: LD_VAR 0 9
26315: PPUSH
26316: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26320: LD_VAR 0 9
26324: PPUSH
26325: CALL_OW 313
26329: PUSH
26330: LD_INT 6
26332: EQUAL
26333: PUSH
26334: LD_VAR 0 9
26338: PPUSH
26339: CALL_OW 266
26343: PUSH
26344: LD_INT 32
26346: PUSH
26347: LD_INT 31
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: IN
26354: OR
26355: IFFALSE 26169
26357: GO 26166
26359: POP
26360: POP
// end else
26361: GO 26743
// for j = 1 to x do
26363: LD_ADDR_VAR 0 9
26367: PUSH
26368: DOUBLE
26369: LD_INT 1
26371: DEC
26372: ST_TO_ADDR
26373: LD_VAR 0 13
26377: PUSH
26378: FOR_TO
26379: IFFALSE 26741
// begin InitHc ;
26381: CALL_OW 19
// if not f then
26385: LD_VAR 0 12
26389: NOT
26390: IFFALSE 26479
// begin PrepareHuman ( false , i , skill ) ;
26392: LD_INT 0
26394: PPUSH
26395: LD_VAR 0 8
26399: PPUSH
26400: LD_VAR 0 4
26404: PPUSH
26405: CALL_OW 380
// un := CreateHuman ;
26409: LD_ADDR_VAR 0 14
26413: PUSH
26414: CALL_OW 44
26418: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26419: LD_ADDR_VAR 0 7
26423: PUSH
26424: LD_VAR 0 7
26428: PPUSH
26429: LD_INT 1
26431: PPUSH
26432: LD_VAR 0 14
26436: PPUSH
26437: CALL_OW 2
26441: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26442: LD_VAR 0 14
26446: PPUSH
26447: LD_VAR 0 1
26451: PPUSH
26452: CALL_OW 250
26456: PPUSH
26457: LD_VAR 0 1
26461: PPUSH
26462: CALL_OW 251
26466: PPUSH
26467: LD_INT 10
26469: PPUSH
26470: LD_INT 0
26472: PPUSH
26473: CALL_OW 50
// continue ;
26477: GO 26378
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26479: LD_VAR 0 12
26483: PUSH
26484: LD_INT 1
26486: ARRAY
26487: PPUSH
26488: CALL_OW 313
26492: PUSH
26493: LD_VAR 0 12
26497: PUSH
26498: LD_INT 1
26500: ARRAY
26501: PPUSH
26502: CALL_OW 266
26506: PUSH
26507: LD_INT 32
26509: PUSH
26510: LD_INT 31
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: IN
26517: AND
26518: PUSH
26519: LD_VAR 0 12
26523: PUSH
26524: LD_INT 1
26526: ARRAY
26527: PPUSH
26528: CALL_OW 313
26532: PUSH
26533: LD_INT 6
26535: EQUAL
26536: OR
26537: IFFALSE 26557
// f := Delete ( f , 1 ) ;
26539: LD_ADDR_VAR 0 12
26543: PUSH
26544: LD_VAR 0 12
26548: PPUSH
26549: LD_INT 1
26551: PPUSH
26552: CALL_OW 3
26556: ST_TO_ADDR
// if not f then
26557: LD_VAR 0 12
26561: NOT
26562: IFFALSE 26580
// begin x := x + 2 ;
26564: LD_ADDR_VAR 0 13
26568: PUSH
26569: LD_VAR 0 13
26573: PUSH
26574: LD_INT 2
26576: PLUS
26577: ST_TO_ADDR
// continue ;
26578: GO 26378
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26580: LD_VAR 0 12
26584: PUSH
26585: LD_INT 1
26587: ARRAY
26588: PPUSH
26589: CALL_OW 266
26593: PUSH
26594: LD_INT 5
26596: EQUAL
26597: IFFALSE 26671
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26599: LD_VAR 0 12
26603: PUSH
26604: LD_INT 1
26606: ARRAY
26607: PPUSH
26608: CALL_OW 313
26612: PUSH
26613: LD_INT 3
26615: LESS
26616: IFFALSE 26652
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26618: LD_INT 0
26620: PPUSH
26621: LD_INT 5
26623: PUSH
26624: LD_INT 8
26626: PUSH
26627: LD_INT 9
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: LIST
26634: PUSH
26635: LD_VAR 0 17
26639: ARRAY
26640: PPUSH
26641: LD_VAR 0 4
26645: PPUSH
26646: CALL_OW 380
26650: GO 26669
// PrepareHuman ( false , i , skill ) ;
26652: LD_INT 0
26654: PPUSH
26655: LD_VAR 0 8
26659: PPUSH
26660: LD_VAR 0 4
26664: PPUSH
26665: CALL_OW 380
// end else
26669: GO 26688
// PrepareHuman ( false , i , skill ) ;
26671: LD_INT 0
26673: PPUSH
26674: LD_VAR 0 8
26678: PPUSH
26679: LD_VAR 0 4
26683: PPUSH
26684: CALL_OW 380
// un := CreateHuman ;
26688: LD_ADDR_VAR 0 14
26692: PUSH
26693: CALL_OW 44
26697: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26698: LD_ADDR_VAR 0 7
26702: PUSH
26703: LD_VAR 0 7
26707: PPUSH
26708: LD_INT 1
26710: PPUSH
26711: LD_VAR 0 14
26715: PPUSH
26716: CALL_OW 2
26720: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26721: LD_VAR 0 14
26725: PPUSH
26726: LD_VAR 0 12
26730: PUSH
26731: LD_INT 1
26733: ARRAY
26734: PPUSH
26735: CALL_OW 52
// end ;
26739: GO 26378
26741: POP
26742: POP
// end ;
26743: GO 25680
26745: POP
26746: POP
// result := result ^ buildings ;
26747: LD_ADDR_VAR 0 7
26751: PUSH
26752: LD_VAR 0 7
26756: PUSH
26757: LD_VAR 0 18
26761: ADD
26762: ST_TO_ADDR
// end else
26763: GO 26906
// begin for i = 1 to personel do
26765: LD_ADDR_VAR 0 8
26769: PUSH
26770: DOUBLE
26771: LD_INT 1
26773: DEC
26774: ST_TO_ADDR
26775: LD_VAR 0 6
26779: PUSH
26780: FOR_TO
26781: IFFALSE 26904
// begin if i > 4 then
26783: LD_VAR 0 8
26787: PUSH
26788: LD_INT 4
26790: GREATER
26791: IFFALSE 26795
// break ;
26793: GO 26904
// x := personel [ i ] ;
26795: LD_ADDR_VAR 0 13
26799: PUSH
26800: LD_VAR 0 6
26804: PUSH
26805: LD_VAR 0 8
26809: ARRAY
26810: ST_TO_ADDR
// if x = - 1 then
26811: LD_VAR 0 13
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: EQUAL
26820: IFFALSE 26824
// continue ;
26822: GO 26780
// PrepareHuman ( false , i , skill ) ;
26824: LD_INT 0
26826: PPUSH
26827: LD_VAR 0 8
26831: PPUSH
26832: LD_VAR 0 4
26836: PPUSH
26837: CALL_OW 380
// un := CreateHuman ;
26841: LD_ADDR_VAR 0 14
26845: PUSH
26846: CALL_OW 44
26850: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26851: LD_VAR 0 14
26855: PPUSH
26856: LD_VAR 0 1
26860: PPUSH
26861: CALL_OW 250
26865: PPUSH
26866: LD_VAR 0 1
26870: PPUSH
26871: CALL_OW 251
26875: PPUSH
26876: LD_INT 10
26878: PPUSH
26879: LD_INT 0
26881: PPUSH
26882: CALL_OW 50
// result := result ^ un ;
26886: LD_ADDR_VAR 0 7
26890: PUSH
26891: LD_VAR 0 7
26895: PUSH
26896: LD_VAR 0 14
26900: ADD
26901: ST_TO_ADDR
// end ;
26902: GO 26780
26904: POP
26905: POP
// end ; end ;
26906: LD_VAR 0 7
26910: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26911: LD_INT 0
26913: PPUSH
26914: PPUSH
26915: PPUSH
26916: PPUSH
26917: PPUSH
26918: PPUSH
26919: PPUSH
26920: PPUSH
26921: PPUSH
26922: PPUSH
26923: PPUSH
26924: PPUSH
26925: PPUSH
26926: PPUSH
26927: PPUSH
26928: PPUSH
// result := false ;
26929: LD_ADDR_VAR 0 3
26933: PUSH
26934: LD_INT 0
26936: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26937: LD_VAR 0 1
26941: NOT
26942: PUSH
26943: LD_VAR 0 1
26947: PPUSH
26948: CALL_OW 266
26952: PUSH
26953: LD_INT 32
26955: PUSH
26956: LD_INT 33
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: IN
26963: NOT
26964: OR
26965: IFFALSE 26969
// exit ;
26967: GO 28078
// nat := GetNation ( tower ) ;
26969: LD_ADDR_VAR 0 12
26973: PUSH
26974: LD_VAR 0 1
26978: PPUSH
26979: CALL_OW 248
26983: ST_TO_ADDR
// side := GetSide ( tower ) ;
26984: LD_ADDR_VAR 0 16
26988: PUSH
26989: LD_VAR 0 1
26993: PPUSH
26994: CALL_OW 255
26998: ST_TO_ADDR
// x := GetX ( tower ) ;
26999: LD_ADDR_VAR 0 10
27003: PUSH
27004: LD_VAR 0 1
27008: PPUSH
27009: CALL_OW 250
27013: ST_TO_ADDR
// y := GetY ( tower ) ;
27014: LD_ADDR_VAR 0 11
27018: PUSH
27019: LD_VAR 0 1
27023: PPUSH
27024: CALL_OW 251
27028: ST_TO_ADDR
// if not x or not y then
27029: LD_VAR 0 10
27033: NOT
27034: PUSH
27035: LD_VAR 0 11
27039: NOT
27040: OR
27041: IFFALSE 27045
// exit ;
27043: GO 28078
// weapon := 0 ;
27045: LD_ADDR_VAR 0 18
27049: PUSH
27050: LD_INT 0
27052: ST_TO_ADDR
// fac_list := [ ] ;
27053: LD_ADDR_VAR 0 17
27057: PUSH
27058: EMPTY
27059: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27060: LD_ADDR_VAR 0 6
27064: PUSH
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 274
27074: PPUSH
27075: LD_VAR 0 2
27079: PPUSH
27080: LD_INT 0
27082: PPUSH
27083: CALL 24649 0 3
27087: PPUSH
27088: LD_INT 30
27090: PUSH
27091: LD_INT 3
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PPUSH
27098: CALL_OW 72
27102: ST_TO_ADDR
// if not factories then
27103: LD_VAR 0 6
27107: NOT
27108: IFFALSE 27112
// exit ;
27110: GO 28078
// for i in factories do
27112: LD_ADDR_VAR 0 8
27116: PUSH
27117: LD_VAR 0 6
27121: PUSH
27122: FOR_IN
27123: IFFALSE 27148
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27125: LD_ADDR_VAR 0 17
27129: PUSH
27130: LD_VAR 0 17
27134: PUSH
27135: LD_VAR 0 8
27139: PPUSH
27140: CALL_OW 478
27144: UNION
27145: ST_TO_ADDR
27146: GO 27122
27148: POP
27149: POP
// if not fac_list then
27150: LD_VAR 0 17
27154: NOT
27155: IFFALSE 27159
// exit ;
27157: GO 28078
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27159: LD_ADDR_VAR 0 5
27163: PUSH
27164: LD_INT 4
27166: PUSH
27167: LD_INT 5
27169: PUSH
27170: LD_INT 9
27172: PUSH
27173: LD_INT 10
27175: PUSH
27176: LD_INT 6
27178: PUSH
27179: LD_INT 7
27181: PUSH
27182: LD_INT 11
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 27
27196: PUSH
27197: LD_INT 28
27199: PUSH
27200: LD_INT 26
27202: PUSH
27203: LD_INT 30
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 43
27214: PUSH
27215: LD_INT 44
27217: PUSH
27218: LD_INT 46
27220: PUSH
27221: LD_INT 45
27223: PUSH
27224: LD_INT 47
27226: PUSH
27227: LD_INT 49
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: PUSH
27243: LD_VAR 0 12
27247: ARRAY
27248: ST_TO_ADDR
// list := list isect fac_list ;
27249: LD_ADDR_VAR 0 5
27253: PUSH
27254: LD_VAR 0 5
27258: PUSH
27259: LD_VAR 0 17
27263: ISECT
27264: ST_TO_ADDR
// if not list then
27265: LD_VAR 0 5
27269: NOT
27270: IFFALSE 27274
// exit ;
27272: GO 28078
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27274: LD_VAR 0 12
27278: PUSH
27279: LD_INT 3
27281: EQUAL
27282: PUSH
27283: LD_INT 49
27285: PUSH
27286: LD_VAR 0 5
27290: IN
27291: AND
27292: PUSH
27293: LD_INT 31
27295: PPUSH
27296: LD_VAR 0 16
27300: PPUSH
27301: CALL_OW 321
27305: PUSH
27306: LD_INT 2
27308: EQUAL
27309: AND
27310: IFFALSE 27370
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27312: LD_INT 22
27314: PUSH
27315: LD_VAR 0 16
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 35
27326: PUSH
27327: LD_INT 49
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 91
27336: PUSH
27337: LD_VAR 0 1
27341: PUSH
27342: LD_INT 10
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: PPUSH
27355: CALL_OW 69
27359: NOT
27360: IFFALSE 27370
// weapon := ru_time_lapser ;
27362: LD_ADDR_VAR 0 18
27366: PUSH
27367: LD_INT 49
27369: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27370: LD_VAR 0 12
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: IN
27385: PUSH
27386: LD_INT 11
27388: PUSH
27389: LD_VAR 0 5
27393: IN
27394: PUSH
27395: LD_INT 30
27397: PUSH
27398: LD_VAR 0 5
27402: IN
27403: OR
27404: AND
27405: PUSH
27406: LD_INT 6
27408: PPUSH
27409: LD_VAR 0 16
27413: PPUSH
27414: CALL_OW 321
27418: PUSH
27419: LD_INT 2
27421: EQUAL
27422: AND
27423: IFFALSE 27588
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27425: LD_INT 22
27427: PUSH
27428: LD_VAR 0 16
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: PUSH
27440: LD_INT 35
27442: PUSH
27443: LD_INT 11
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 35
27452: PUSH
27453: LD_INT 30
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 91
27467: PUSH
27468: LD_VAR 0 1
27472: PUSH
27473: LD_INT 18
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: LIST
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: LIST
27485: PPUSH
27486: CALL_OW 69
27490: NOT
27491: PUSH
27492: LD_INT 22
27494: PUSH
27495: LD_VAR 0 16
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 2
27506: PUSH
27507: LD_INT 30
27509: PUSH
27510: LD_INT 32
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 30
27519: PUSH
27520: LD_INT 33
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 91
27534: PUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_INT 12
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: LIST
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: LIST
27552: PUSH
27553: EMPTY
27554: LIST
27555: PPUSH
27556: CALL_OW 69
27560: PUSH
27561: LD_INT 2
27563: GREATER
27564: AND
27565: IFFALSE 27588
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27567: LD_ADDR_VAR 0 18
27571: PUSH
27572: LD_INT 11
27574: PUSH
27575: LD_INT 30
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_VAR 0 12
27586: ARRAY
27587: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27588: LD_VAR 0 18
27592: NOT
27593: PUSH
27594: LD_INT 40
27596: PPUSH
27597: LD_VAR 0 16
27601: PPUSH
27602: CALL_OW 321
27606: PUSH
27607: LD_INT 2
27609: EQUAL
27610: AND
27611: PUSH
27612: LD_INT 7
27614: PUSH
27615: LD_VAR 0 5
27619: IN
27620: PUSH
27621: LD_INT 28
27623: PUSH
27624: LD_VAR 0 5
27628: IN
27629: OR
27630: PUSH
27631: LD_INT 45
27633: PUSH
27634: LD_VAR 0 5
27638: IN
27639: OR
27640: AND
27641: IFFALSE 27895
// begin hex := GetHexInfo ( x , y ) ;
27643: LD_ADDR_VAR 0 4
27647: PUSH
27648: LD_VAR 0 10
27652: PPUSH
27653: LD_VAR 0 11
27657: PPUSH
27658: CALL_OW 546
27662: ST_TO_ADDR
// if hex [ 1 ] then
27663: LD_VAR 0 4
27667: PUSH
27668: LD_INT 1
27670: ARRAY
27671: IFFALSE 27675
// exit ;
27673: GO 28078
// height := hex [ 2 ] ;
27675: LD_ADDR_VAR 0 15
27679: PUSH
27680: LD_VAR 0 4
27684: PUSH
27685: LD_INT 2
27687: ARRAY
27688: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27689: LD_ADDR_VAR 0 14
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: LD_INT 3
27702: PUSH
27703: LD_INT 5
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: ST_TO_ADDR
// for i in tmp do
27712: LD_ADDR_VAR 0 8
27716: PUSH
27717: LD_VAR 0 14
27721: PUSH
27722: FOR_IN
27723: IFFALSE 27893
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27725: LD_ADDR_VAR 0 9
27729: PUSH
27730: LD_VAR 0 10
27734: PPUSH
27735: LD_VAR 0 8
27739: PPUSH
27740: LD_INT 5
27742: PPUSH
27743: CALL_OW 272
27747: PUSH
27748: LD_VAR 0 11
27752: PPUSH
27753: LD_VAR 0 8
27757: PPUSH
27758: LD_INT 5
27760: PPUSH
27761: CALL_OW 273
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27770: LD_VAR 0 9
27774: PUSH
27775: LD_INT 1
27777: ARRAY
27778: PPUSH
27779: LD_VAR 0 9
27783: PUSH
27784: LD_INT 2
27786: ARRAY
27787: PPUSH
27788: CALL_OW 488
27792: IFFALSE 27891
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27794: LD_ADDR_VAR 0 4
27798: PUSH
27799: LD_VAR 0 9
27803: PUSH
27804: LD_INT 1
27806: ARRAY
27807: PPUSH
27808: LD_VAR 0 9
27812: PUSH
27813: LD_INT 2
27815: ARRAY
27816: PPUSH
27817: CALL_OW 546
27821: ST_TO_ADDR
// if hex [ 1 ] then
27822: LD_VAR 0 4
27826: PUSH
27827: LD_INT 1
27829: ARRAY
27830: IFFALSE 27834
// continue ;
27832: GO 27722
// h := hex [ 2 ] ;
27834: LD_ADDR_VAR 0 13
27838: PUSH
27839: LD_VAR 0 4
27843: PUSH
27844: LD_INT 2
27846: ARRAY
27847: ST_TO_ADDR
// if h + 7 < height then
27848: LD_VAR 0 13
27852: PUSH
27853: LD_INT 7
27855: PLUS
27856: PUSH
27857: LD_VAR 0 15
27861: LESS
27862: IFFALSE 27891
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27864: LD_ADDR_VAR 0 18
27868: PUSH
27869: LD_INT 7
27871: PUSH
27872: LD_INT 28
27874: PUSH
27875: LD_INT 45
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: PUSH
27883: LD_VAR 0 12
27887: ARRAY
27888: ST_TO_ADDR
// break ;
27889: GO 27893
// end ; end ; end ;
27891: GO 27722
27893: POP
27894: POP
// end ; if not weapon then
27895: LD_VAR 0 18
27899: NOT
27900: IFFALSE 27960
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27902: LD_ADDR_VAR 0 5
27906: PUSH
27907: LD_VAR 0 5
27911: PUSH
27912: LD_INT 11
27914: PUSH
27915: LD_INT 30
27917: PUSH
27918: LD_INT 49
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: DIFF
27926: ST_TO_ADDR
// if not list then
27927: LD_VAR 0 5
27931: NOT
27932: IFFALSE 27936
// exit ;
27934: GO 28078
// weapon := list [ rand ( 1 , list ) ] ;
27936: LD_ADDR_VAR 0 18
27940: PUSH
27941: LD_VAR 0 5
27945: PUSH
27946: LD_INT 1
27948: PPUSH
27949: LD_VAR 0 5
27953: PPUSH
27954: CALL_OW 12
27958: ARRAY
27959: ST_TO_ADDR
// end ; if weapon then
27960: LD_VAR 0 18
27964: IFFALSE 28078
// begin tmp := CostOfWeapon ( weapon ) ;
27966: LD_ADDR_VAR 0 14
27970: PUSH
27971: LD_VAR 0 18
27975: PPUSH
27976: CALL_OW 451
27980: ST_TO_ADDR
// j := GetBase ( tower ) ;
27981: LD_ADDR_VAR 0 9
27985: PUSH
27986: LD_VAR 0 1
27990: PPUSH
27991: CALL_OW 274
27995: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27996: LD_VAR 0 9
28000: PPUSH
28001: LD_INT 1
28003: PPUSH
28004: CALL_OW 275
28008: PUSH
28009: LD_VAR 0 14
28013: PUSH
28014: LD_INT 1
28016: ARRAY
28017: GREATEREQUAL
28018: PUSH
28019: LD_VAR 0 9
28023: PPUSH
28024: LD_INT 2
28026: PPUSH
28027: CALL_OW 275
28031: PUSH
28032: LD_VAR 0 14
28036: PUSH
28037: LD_INT 2
28039: ARRAY
28040: GREATEREQUAL
28041: AND
28042: PUSH
28043: LD_VAR 0 9
28047: PPUSH
28048: LD_INT 3
28050: PPUSH
28051: CALL_OW 275
28055: PUSH
28056: LD_VAR 0 14
28060: PUSH
28061: LD_INT 3
28063: ARRAY
28064: GREATEREQUAL
28065: AND
28066: IFFALSE 28078
// result := weapon ;
28068: LD_ADDR_VAR 0 3
28072: PUSH
28073: LD_VAR 0 18
28077: ST_TO_ADDR
// end ; end ;
28078: LD_VAR 0 3
28082: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28083: LD_INT 0
28085: PPUSH
28086: PPUSH
// result := true ;
28087: LD_ADDR_VAR 0 3
28091: PUSH
28092: LD_INT 1
28094: ST_TO_ADDR
// if array1 = array2 then
28095: LD_VAR 0 1
28099: PUSH
28100: LD_VAR 0 2
28104: EQUAL
28105: IFFALSE 28165
// begin for i = 1 to array1 do
28107: LD_ADDR_VAR 0 4
28111: PUSH
28112: DOUBLE
28113: LD_INT 1
28115: DEC
28116: ST_TO_ADDR
28117: LD_VAR 0 1
28121: PUSH
28122: FOR_TO
28123: IFFALSE 28161
// if array1 [ i ] <> array2 [ i ] then
28125: LD_VAR 0 1
28129: PUSH
28130: LD_VAR 0 4
28134: ARRAY
28135: PUSH
28136: LD_VAR 0 2
28140: PUSH
28141: LD_VAR 0 4
28145: ARRAY
28146: NONEQUAL
28147: IFFALSE 28159
// begin result := false ;
28149: LD_ADDR_VAR 0 3
28153: PUSH
28154: LD_INT 0
28156: ST_TO_ADDR
// break ;
28157: GO 28161
// end ;
28159: GO 28122
28161: POP
28162: POP
// end else
28163: GO 28173
// result := false ;
28165: LD_ADDR_VAR 0 3
28169: PUSH
28170: LD_INT 0
28172: ST_TO_ADDR
// end ;
28173: LD_VAR 0 3
28177: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28178: LD_INT 0
28180: PPUSH
28181: PPUSH
// if not array1 or not array2 then
28182: LD_VAR 0 1
28186: NOT
28187: PUSH
28188: LD_VAR 0 2
28192: NOT
28193: OR
28194: IFFALSE 28198
// exit ;
28196: GO 28262
// result := true ;
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: LD_INT 1
28205: ST_TO_ADDR
// for i = 1 to array1 do
28206: LD_ADDR_VAR 0 4
28210: PUSH
28211: DOUBLE
28212: LD_INT 1
28214: DEC
28215: ST_TO_ADDR
28216: LD_VAR 0 1
28220: PUSH
28221: FOR_TO
28222: IFFALSE 28260
// if array1 [ i ] <> array2 [ i ] then
28224: LD_VAR 0 1
28228: PUSH
28229: LD_VAR 0 4
28233: ARRAY
28234: PUSH
28235: LD_VAR 0 2
28239: PUSH
28240: LD_VAR 0 4
28244: ARRAY
28245: NONEQUAL
28246: IFFALSE 28258
// begin result := false ;
28248: LD_ADDR_VAR 0 3
28252: PUSH
28253: LD_INT 0
28255: ST_TO_ADDR
// break ;
28256: GO 28260
// end ;
28258: GO 28221
28260: POP
28261: POP
// end ;
28262: LD_VAR 0 3
28266: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28267: LD_INT 0
28269: PPUSH
28270: PPUSH
28271: PPUSH
// pom := GetBase ( fac ) ;
28272: LD_ADDR_VAR 0 5
28276: PUSH
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL_OW 274
28286: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28287: LD_ADDR_VAR 0 4
28291: PUSH
28292: LD_VAR 0 2
28296: PUSH
28297: LD_INT 1
28299: ARRAY
28300: PPUSH
28301: LD_VAR 0 2
28305: PUSH
28306: LD_INT 2
28308: ARRAY
28309: PPUSH
28310: LD_VAR 0 2
28314: PUSH
28315: LD_INT 3
28317: ARRAY
28318: PPUSH
28319: LD_VAR 0 2
28323: PUSH
28324: LD_INT 4
28326: ARRAY
28327: PPUSH
28328: CALL_OW 449
28332: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28333: LD_ADDR_VAR 0 3
28337: PUSH
28338: LD_VAR 0 5
28342: PPUSH
28343: LD_INT 1
28345: PPUSH
28346: CALL_OW 275
28350: PUSH
28351: LD_VAR 0 4
28355: PUSH
28356: LD_INT 1
28358: ARRAY
28359: GREATEREQUAL
28360: PUSH
28361: LD_VAR 0 5
28365: PPUSH
28366: LD_INT 2
28368: PPUSH
28369: CALL_OW 275
28373: PUSH
28374: LD_VAR 0 4
28378: PUSH
28379: LD_INT 2
28381: ARRAY
28382: GREATEREQUAL
28383: AND
28384: PUSH
28385: LD_VAR 0 5
28389: PPUSH
28390: LD_INT 3
28392: PPUSH
28393: CALL_OW 275
28397: PUSH
28398: LD_VAR 0 4
28402: PUSH
28403: LD_INT 3
28405: ARRAY
28406: GREATEREQUAL
28407: AND
28408: ST_TO_ADDR
// end ;
28409: LD_VAR 0 3
28413: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28414: LD_INT 0
28416: PPUSH
28417: PPUSH
28418: PPUSH
28419: PPUSH
// pom := GetBase ( building ) ;
28420: LD_ADDR_VAR 0 3
28424: PUSH
28425: LD_VAR 0 1
28429: PPUSH
28430: CALL_OW 274
28434: ST_TO_ADDR
// if not pom then
28435: LD_VAR 0 3
28439: NOT
28440: IFFALSE 28444
// exit ;
28442: GO 28614
// btype := GetBType ( building ) ;
28444: LD_ADDR_VAR 0 5
28448: PUSH
28449: LD_VAR 0 1
28453: PPUSH
28454: CALL_OW 266
28458: ST_TO_ADDR
// if btype = b_armoury then
28459: LD_VAR 0 5
28463: PUSH
28464: LD_INT 4
28466: EQUAL
28467: IFFALSE 28477
// btype := b_barracks ;
28469: LD_ADDR_VAR 0 5
28473: PUSH
28474: LD_INT 5
28476: ST_TO_ADDR
// if btype = b_depot then
28477: LD_VAR 0 5
28481: PUSH
28482: LD_INT 0
28484: EQUAL
28485: IFFALSE 28495
// btype := b_warehouse ;
28487: LD_ADDR_VAR 0 5
28491: PUSH
28492: LD_INT 1
28494: ST_TO_ADDR
// if btype = b_workshop then
28495: LD_VAR 0 5
28499: PUSH
28500: LD_INT 2
28502: EQUAL
28503: IFFALSE 28513
// btype := b_factory ;
28505: LD_ADDR_VAR 0 5
28509: PUSH
28510: LD_INT 3
28512: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28513: LD_ADDR_VAR 0 4
28517: PUSH
28518: LD_VAR 0 5
28522: PPUSH
28523: LD_VAR 0 1
28527: PPUSH
28528: CALL_OW 248
28532: PPUSH
28533: CALL_OW 450
28537: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28538: LD_ADDR_VAR 0 2
28542: PUSH
28543: LD_VAR 0 3
28547: PPUSH
28548: LD_INT 1
28550: PPUSH
28551: CALL_OW 275
28555: PUSH
28556: LD_VAR 0 4
28560: PUSH
28561: LD_INT 1
28563: ARRAY
28564: GREATEREQUAL
28565: PUSH
28566: LD_VAR 0 3
28570: PPUSH
28571: LD_INT 2
28573: PPUSH
28574: CALL_OW 275
28578: PUSH
28579: LD_VAR 0 4
28583: PUSH
28584: LD_INT 2
28586: ARRAY
28587: GREATEREQUAL
28588: AND
28589: PUSH
28590: LD_VAR 0 3
28594: PPUSH
28595: LD_INT 3
28597: PPUSH
28598: CALL_OW 275
28602: PUSH
28603: LD_VAR 0 4
28607: PUSH
28608: LD_INT 3
28610: ARRAY
28611: GREATEREQUAL
28612: AND
28613: ST_TO_ADDR
// end ;
28614: LD_VAR 0 2
28618: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28619: LD_INT 0
28621: PPUSH
28622: PPUSH
28623: PPUSH
// pom := GetBase ( building ) ;
28624: LD_ADDR_VAR 0 4
28628: PUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 274
28638: ST_TO_ADDR
// if not pom then
28639: LD_VAR 0 4
28643: NOT
28644: IFFALSE 28648
// exit ;
28646: GO 28749
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28648: LD_ADDR_VAR 0 5
28652: PUSH
28653: LD_VAR 0 2
28657: PPUSH
28658: LD_VAR 0 1
28662: PPUSH
28663: CALL_OW 248
28667: PPUSH
28668: CALL_OW 450
28672: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28673: LD_ADDR_VAR 0 3
28677: PUSH
28678: LD_VAR 0 4
28682: PPUSH
28683: LD_INT 1
28685: PPUSH
28686: CALL_OW 275
28690: PUSH
28691: LD_VAR 0 5
28695: PUSH
28696: LD_INT 1
28698: ARRAY
28699: GREATEREQUAL
28700: PUSH
28701: LD_VAR 0 4
28705: PPUSH
28706: LD_INT 2
28708: PPUSH
28709: CALL_OW 275
28713: PUSH
28714: LD_VAR 0 5
28718: PUSH
28719: LD_INT 2
28721: ARRAY
28722: GREATEREQUAL
28723: AND
28724: PUSH
28725: LD_VAR 0 4
28729: PPUSH
28730: LD_INT 3
28732: PPUSH
28733: CALL_OW 275
28737: PUSH
28738: LD_VAR 0 5
28742: PUSH
28743: LD_INT 3
28745: ARRAY
28746: GREATEREQUAL
28747: AND
28748: ST_TO_ADDR
// end ;
28749: LD_VAR 0 3
28753: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28754: LD_INT 0
28756: PPUSH
28757: PPUSH
28758: PPUSH
28759: PPUSH
28760: PPUSH
28761: PPUSH
28762: PPUSH
28763: PPUSH
28764: PPUSH
28765: PPUSH
28766: PPUSH
// result := false ;
28767: LD_ADDR_VAR 0 8
28771: PUSH
28772: LD_INT 0
28774: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28775: LD_VAR 0 5
28779: NOT
28780: PUSH
28781: LD_VAR 0 1
28785: NOT
28786: OR
28787: PUSH
28788: LD_VAR 0 2
28792: NOT
28793: OR
28794: PUSH
28795: LD_VAR 0 3
28799: NOT
28800: OR
28801: IFFALSE 28805
// exit ;
28803: GO 29619
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28805: LD_ADDR_VAR 0 14
28809: PUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: LD_VAR 0 2
28819: PPUSH
28820: LD_VAR 0 3
28824: PPUSH
28825: LD_VAR 0 4
28829: PPUSH
28830: LD_VAR 0 5
28834: PUSH
28835: LD_INT 1
28837: ARRAY
28838: PPUSH
28839: CALL_OW 248
28843: PPUSH
28844: LD_INT 0
28846: PPUSH
28847: CALL 30872 0 6
28851: ST_TO_ADDR
// if not hexes then
28852: LD_VAR 0 14
28856: NOT
28857: IFFALSE 28861
// exit ;
28859: GO 29619
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28861: LD_ADDR_VAR 0 17
28865: PUSH
28866: LD_VAR 0 5
28870: PPUSH
28871: LD_INT 22
28873: PUSH
28874: LD_VAR 0 13
28878: PPUSH
28879: CALL_OW 255
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 2
28890: PUSH
28891: LD_INT 30
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 30
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PPUSH
28920: CALL_OW 72
28924: ST_TO_ADDR
// for i = 1 to hexes do
28925: LD_ADDR_VAR 0 9
28929: PUSH
28930: DOUBLE
28931: LD_INT 1
28933: DEC
28934: ST_TO_ADDR
28935: LD_VAR 0 14
28939: PUSH
28940: FOR_TO
28941: IFFALSE 29617
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28943: LD_ADDR_VAR 0 13
28947: PUSH
28948: LD_VAR 0 14
28952: PUSH
28953: LD_VAR 0 9
28957: ARRAY
28958: PUSH
28959: LD_INT 1
28961: ARRAY
28962: PPUSH
28963: LD_VAR 0 14
28967: PUSH
28968: LD_VAR 0 9
28972: ARRAY
28973: PUSH
28974: LD_INT 2
28976: ARRAY
28977: PPUSH
28978: CALL_OW 428
28982: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28983: LD_VAR 0 14
28987: PUSH
28988: LD_VAR 0 9
28992: ARRAY
28993: PUSH
28994: LD_INT 1
28996: ARRAY
28997: PPUSH
28998: LD_VAR 0 14
29002: PUSH
29003: LD_VAR 0 9
29007: ARRAY
29008: PUSH
29009: LD_INT 2
29011: ARRAY
29012: PPUSH
29013: CALL_OW 351
29017: PUSH
29018: LD_VAR 0 14
29022: PUSH
29023: LD_VAR 0 9
29027: ARRAY
29028: PUSH
29029: LD_INT 1
29031: ARRAY
29032: PPUSH
29033: LD_VAR 0 14
29037: PUSH
29038: LD_VAR 0 9
29042: ARRAY
29043: PUSH
29044: LD_INT 2
29046: ARRAY
29047: PPUSH
29048: CALL_OW 488
29052: NOT
29053: OR
29054: PUSH
29055: LD_VAR 0 13
29059: PPUSH
29060: CALL_OW 247
29064: PUSH
29065: LD_INT 3
29067: EQUAL
29068: OR
29069: IFFALSE 29075
// exit ;
29071: POP
29072: POP
29073: GO 29619
// if not tmp then
29075: LD_VAR 0 13
29079: NOT
29080: IFFALSE 29084
// continue ;
29082: GO 28940
// result := true ;
29084: LD_ADDR_VAR 0 8
29088: PUSH
29089: LD_INT 1
29091: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29092: LD_VAR 0 6
29096: PUSH
29097: LD_VAR 0 13
29101: PPUSH
29102: CALL_OW 247
29106: PUSH
29107: LD_INT 2
29109: EQUAL
29110: AND
29111: PUSH
29112: LD_VAR 0 13
29116: PPUSH
29117: CALL_OW 263
29121: PUSH
29122: LD_INT 1
29124: EQUAL
29125: AND
29126: IFFALSE 29290
// begin if IsDrivenBy ( tmp ) then
29128: LD_VAR 0 13
29132: PPUSH
29133: CALL_OW 311
29137: IFFALSE 29141
// continue ;
29139: GO 28940
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29141: LD_VAR 0 6
29145: PPUSH
29146: LD_INT 3
29148: PUSH
29149: LD_INT 60
29151: PUSH
29152: EMPTY
29153: LIST
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: LD_INT 55
29164: PUSH
29165: EMPTY
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PPUSH
29176: CALL_OW 72
29180: IFFALSE 29288
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29182: LD_ADDR_VAR 0 18
29186: PUSH
29187: LD_VAR 0 6
29191: PPUSH
29192: LD_INT 3
29194: PUSH
29195: LD_INT 60
29197: PUSH
29198: EMPTY
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 3
29207: PUSH
29208: LD_INT 55
29210: PUSH
29211: EMPTY
29212: LIST
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PPUSH
29222: CALL_OW 72
29226: PUSH
29227: LD_INT 1
29229: ARRAY
29230: ST_TO_ADDR
// if IsInUnit ( driver ) then
29231: LD_VAR 0 18
29235: PPUSH
29236: CALL_OW 310
29240: IFFALSE 29251
// ComExit ( driver ) ;
29242: LD_VAR 0 18
29246: PPUSH
29247: CALL 54651 0 1
// AddComEnterUnit ( driver , tmp ) ;
29251: LD_VAR 0 18
29255: PPUSH
29256: LD_VAR 0 13
29260: PPUSH
29261: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29265: LD_VAR 0 18
29269: PPUSH
29270: LD_VAR 0 7
29274: PPUSH
29275: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29279: LD_VAR 0 18
29283: PPUSH
29284: CALL_OW 181
// end ; continue ;
29288: GO 28940
// end ; if not cleaners or not tmp in cleaners then
29290: LD_VAR 0 6
29294: NOT
29295: PUSH
29296: LD_VAR 0 13
29300: PUSH
29301: LD_VAR 0 6
29305: IN
29306: NOT
29307: OR
29308: IFFALSE 29615
// begin if dep then
29310: LD_VAR 0 17
29314: IFFALSE 29450
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29316: LD_ADDR_VAR 0 16
29320: PUSH
29321: LD_VAR 0 17
29325: PUSH
29326: LD_INT 1
29328: ARRAY
29329: PPUSH
29330: CALL_OW 250
29334: PPUSH
29335: LD_VAR 0 17
29339: PUSH
29340: LD_INT 1
29342: ARRAY
29343: PPUSH
29344: CALL_OW 254
29348: PPUSH
29349: LD_INT 5
29351: PPUSH
29352: CALL_OW 272
29356: PUSH
29357: LD_VAR 0 17
29361: PUSH
29362: LD_INT 1
29364: ARRAY
29365: PPUSH
29366: CALL_OW 251
29370: PPUSH
29371: LD_VAR 0 17
29375: PUSH
29376: LD_INT 1
29378: ARRAY
29379: PPUSH
29380: CALL_OW 254
29384: PPUSH
29385: LD_INT 5
29387: PPUSH
29388: CALL_OW 273
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29397: LD_VAR 0 16
29401: PUSH
29402: LD_INT 1
29404: ARRAY
29405: PPUSH
29406: LD_VAR 0 16
29410: PUSH
29411: LD_INT 2
29413: ARRAY
29414: PPUSH
29415: CALL_OW 488
29419: IFFALSE 29450
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29421: LD_VAR 0 13
29425: PPUSH
29426: LD_VAR 0 16
29430: PUSH
29431: LD_INT 1
29433: ARRAY
29434: PPUSH
29435: LD_VAR 0 16
29439: PUSH
29440: LD_INT 2
29442: ARRAY
29443: PPUSH
29444: CALL_OW 111
// continue ;
29448: GO 28940
// end ; end ; r := GetDir ( tmp ) ;
29450: LD_ADDR_VAR 0 15
29454: PUSH
29455: LD_VAR 0 13
29459: PPUSH
29460: CALL_OW 254
29464: ST_TO_ADDR
// if r = 5 then
29465: LD_VAR 0 15
29469: PUSH
29470: LD_INT 5
29472: EQUAL
29473: IFFALSE 29483
// r := 0 ;
29475: LD_ADDR_VAR 0 15
29479: PUSH
29480: LD_INT 0
29482: ST_TO_ADDR
// for j = r to 5 do
29483: LD_ADDR_VAR 0 10
29487: PUSH
29488: DOUBLE
29489: LD_VAR 0 15
29493: DEC
29494: ST_TO_ADDR
29495: LD_INT 5
29497: PUSH
29498: FOR_TO
29499: IFFALSE 29613
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29501: LD_ADDR_VAR 0 11
29505: PUSH
29506: LD_VAR 0 13
29510: PPUSH
29511: CALL_OW 250
29515: PPUSH
29516: LD_VAR 0 10
29520: PPUSH
29521: LD_INT 2
29523: PPUSH
29524: CALL_OW 272
29528: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29529: LD_ADDR_VAR 0 12
29533: PUSH
29534: LD_VAR 0 13
29538: PPUSH
29539: CALL_OW 251
29543: PPUSH
29544: LD_VAR 0 10
29548: PPUSH
29549: LD_INT 2
29551: PPUSH
29552: CALL_OW 273
29556: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29557: LD_VAR 0 11
29561: PPUSH
29562: LD_VAR 0 12
29566: PPUSH
29567: CALL_OW 488
29571: PUSH
29572: LD_VAR 0 11
29576: PPUSH
29577: LD_VAR 0 12
29581: PPUSH
29582: CALL_OW 428
29586: NOT
29587: AND
29588: IFFALSE 29611
// begin ComMoveXY ( tmp , _x , _y ) ;
29590: LD_VAR 0 13
29594: PPUSH
29595: LD_VAR 0 11
29599: PPUSH
29600: LD_VAR 0 12
29604: PPUSH
29605: CALL_OW 111
// break ;
29609: GO 29613
// end ; end ;
29611: GO 29498
29613: POP
29614: POP
// end ; end ;
29615: GO 28940
29617: POP
29618: POP
// end ;
29619: LD_VAR 0 8
29623: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29624: LD_INT 0
29626: PPUSH
// result := true ;
29627: LD_ADDR_VAR 0 3
29631: PUSH
29632: LD_INT 1
29634: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29635: LD_VAR 0 2
29639: PUSH
29640: LD_INT 24
29642: DOUBLE
29643: EQUAL
29644: IFTRUE 29654
29646: LD_INT 33
29648: DOUBLE
29649: EQUAL
29650: IFTRUE 29654
29652: GO 29679
29654: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29655: LD_ADDR_VAR 0 3
29659: PUSH
29660: LD_INT 32
29662: PPUSH
29663: LD_VAR 0 1
29667: PPUSH
29668: CALL_OW 321
29672: PUSH
29673: LD_INT 2
29675: EQUAL
29676: ST_TO_ADDR
29677: GO 29995
29679: LD_INT 20
29681: DOUBLE
29682: EQUAL
29683: IFTRUE 29687
29685: GO 29712
29687: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29688: LD_ADDR_VAR 0 3
29692: PUSH
29693: LD_INT 6
29695: PPUSH
29696: LD_VAR 0 1
29700: PPUSH
29701: CALL_OW 321
29705: PUSH
29706: LD_INT 2
29708: EQUAL
29709: ST_TO_ADDR
29710: GO 29995
29712: LD_INT 22
29714: DOUBLE
29715: EQUAL
29716: IFTRUE 29726
29718: LD_INT 36
29720: DOUBLE
29721: EQUAL
29722: IFTRUE 29726
29724: GO 29751
29726: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29727: LD_ADDR_VAR 0 3
29731: PUSH
29732: LD_INT 15
29734: PPUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 321
29744: PUSH
29745: LD_INT 2
29747: EQUAL
29748: ST_TO_ADDR
29749: GO 29995
29751: LD_INT 30
29753: DOUBLE
29754: EQUAL
29755: IFTRUE 29759
29757: GO 29784
29759: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29760: LD_ADDR_VAR 0 3
29764: PUSH
29765: LD_INT 20
29767: PPUSH
29768: LD_VAR 0 1
29772: PPUSH
29773: CALL_OW 321
29777: PUSH
29778: LD_INT 2
29780: EQUAL
29781: ST_TO_ADDR
29782: GO 29995
29784: LD_INT 28
29786: DOUBLE
29787: EQUAL
29788: IFTRUE 29798
29790: LD_INT 21
29792: DOUBLE
29793: EQUAL
29794: IFTRUE 29798
29796: GO 29823
29798: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29799: LD_ADDR_VAR 0 3
29803: PUSH
29804: LD_INT 21
29806: PPUSH
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL_OW 321
29816: PUSH
29817: LD_INT 2
29819: EQUAL
29820: ST_TO_ADDR
29821: GO 29995
29823: LD_INT 16
29825: DOUBLE
29826: EQUAL
29827: IFTRUE 29831
29829: GO 29856
29831: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29832: LD_ADDR_VAR 0 3
29836: PUSH
29837: LD_INT 84
29839: PPUSH
29840: LD_VAR 0 1
29844: PPUSH
29845: CALL_OW 321
29849: PUSH
29850: LD_INT 2
29852: EQUAL
29853: ST_TO_ADDR
29854: GO 29995
29856: LD_INT 19
29858: DOUBLE
29859: EQUAL
29860: IFTRUE 29870
29862: LD_INT 23
29864: DOUBLE
29865: EQUAL
29866: IFTRUE 29870
29868: GO 29895
29870: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29871: LD_ADDR_VAR 0 3
29875: PUSH
29876: LD_INT 83
29878: PPUSH
29879: LD_VAR 0 1
29883: PPUSH
29884: CALL_OW 321
29888: PUSH
29889: LD_INT 2
29891: EQUAL
29892: ST_TO_ADDR
29893: GO 29995
29895: LD_INT 17
29897: DOUBLE
29898: EQUAL
29899: IFTRUE 29903
29901: GO 29928
29903: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29904: LD_ADDR_VAR 0 3
29908: PUSH
29909: LD_INT 39
29911: PPUSH
29912: LD_VAR 0 1
29916: PPUSH
29917: CALL_OW 321
29921: PUSH
29922: LD_INT 2
29924: EQUAL
29925: ST_TO_ADDR
29926: GO 29995
29928: LD_INT 18
29930: DOUBLE
29931: EQUAL
29932: IFTRUE 29936
29934: GO 29961
29936: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29937: LD_ADDR_VAR 0 3
29941: PUSH
29942: LD_INT 40
29944: PPUSH
29945: LD_VAR 0 1
29949: PPUSH
29950: CALL_OW 321
29954: PUSH
29955: LD_INT 2
29957: EQUAL
29958: ST_TO_ADDR
29959: GO 29995
29961: LD_INT 27
29963: DOUBLE
29964: EQUAL
29965: IFTRUE 29969
29967: GO 29994
29969: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29970: LD_ADDR_VAR 0 3
29974: PUSH
29975: LD_INT 35
29977: PPUSH
29978: LD_VAR 0 1
29982: PPUSH
29983: CALL_OW 321
29987: PUSH
29988: LD_INT 2
29990: EQUAL
29991: ST_TO_ADDR
29992: GO 29995
29994: POP
// end ;
29995: LD_VAR 0 3
29999: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30000: LD_INT 0
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
30012: PPUSH
// result := false ;
30013: LD_ADDR_VAR 0 6
30017: PUSH
30018: LD_INT 0
30020: ST_TO_ADDR
// if btype = b_depot then
30021: LD_VAR 0 2
30025: PUSH
30026: LD_INT 0
30028: EQUAL
30029: IFFALSE 30041
// begin result := true ;
30031: LD_ADDR_VAR 0 6
30035: PUSH
30036: LD_INT 1
30038: ST_TO_ADDR
// exit ;
30039: GO 30867
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30041: LD_VAR 0 1
30045: NOT
30046: PUSH
30047: LD_VAR 0 1
30051: PPUSH
30052: CALL_OW 266
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: IN
30067: NOT
30068: OR
30069: PUSH
30070: LD_VAR 0 2
30074: NOT
30075: OR
30076: PUSH
30077: LD_VAR 0 5
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 3
30093: PUSH
30094: LD_INT 4
30096: PUSH
30097: LD_INT 5
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: IN
30108: NOT
30109: OR
30110: PUSH
30111: LD_VAR 0 3
30115: PPUSH
30116: LD_VAR 0 4
30120: PPUSH
30121: CALL_OW 488
30125: NOT
30126: OR
30127: IFFALSE 30131
// exit ;
30129: GO 30867
// side := GetSide ( depot ) ;
30131: LD_ADDR_VAR 0 9
30135: PUSH
30136: LD_VAR 0 1
30140: PPUSH
30141: CALL_OW 255
30145: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30146: LD_VAR 0 9
30150: PPUSH
30151: LD_VAR 0 2
30155: PPUSH
30156: CALL 29624 0 2
30160: NOT
30161: IFFALSE 30165
// exit ;
30163: GO 30867
// pom := GetBase ( depot ) ;
30165: LD_ADDR_VAR 0 10
30169: PUSH
30170: LD_VAR 0 1
30174: PPUSH
30175: CALL_OW 274
30179: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30180: LD_ADDR_VAR 0 11
30184: PUSH
30185: LD_VAR 0 2
30189: PPUSH
30190: LD_VAR 0 1
30194: PPUSH
30195: CALL_OW 248
30199: PPUSH
30200: CALL_OW 450
30204: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30205: LD_VAR 0 10
30209: PPUSH
30210: LD_INT 1
30212: PPUSH
30213: CALL_OW 275
30217: PUSH
30218: LD_VAR 0 11
30222: PUSH
30223: LD_INT 1
30225: ARRAY
30226: GREATEREQUAL
30227: PUSH
30228: LD_VAR 0 10
30232: PPUSH
30233: LD_INT 2
30235: PPUSH
30236: CALL_OW 275
30240: PUSH
30241: LD_VAR 0 11
30245: PUSH
30246: LD_INT 2
30248: ARRAY
30249: GREATEREQUAL
30250: AND
30251: PUSH
30252: LD_VAR 0 10
30256: PPUSH
30257: LD_INT 3
30259: PPUSH
30260: CALL_OW 275
30264: PUSH
30265: LD_VAR 0 11
30269: PUSH
30270: LD_INT 3
30272: ARRAY
30273: GREATEREQUAL
30274: AND
30275: NOT
30276: IFFALSE 30280
// exit ;
30278: GO 30867
// if GetBType ( depot ) = b_depot then
30280: LD_VAR 0 1
30284: PPUSH
30285: CALL_OW 266
30289: PUSH
30290: LD_INT 0
30292: EQUAL
30293: IFFALSE 30305
// dist := 28 else
30295: LD_ADDR_VAR 0 14
30299: PUSH
30300: LD_INT 28
30302: ST_TO_ADDR
30303: GO 30313
// dist := 36 ;
30305: LD_ADDR_VAR 0 14
30309: PUSH
30310: LD_INT 36
30312: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30313: LD_VAR 0 1
30317: PPUSH
30318: LD_VAR 0 3
30322: PPUSH
30323: LD_VAR 0 4
30327: PPUSH
30328: CALL_OW 297
30332: PUSH
30333: LD_VAR 0 14
30337: GREATER
30338: IFFALSE 30342
// exit ;
30340: GO 30867
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30342: LD_ADDR_VAR 0 12
30346: PUSH
30347: LD_VAR 0 2
30351: PPUSH
30352: LD_VAR 0 3
30356: PPUSH
30357: LD_VAR 0 4
30361: PPUSH
30362: LD_VAR 0 5
30366: PPUSH
30367: LD_VAR 0 1
30371: PPUSH
30372: CALL_OW 248
30376: PPUSH
30377: LD_INT 0
30379: PPUSH
30380: CALL 30872 0 6
30384: ST_TO_ADDR
// if not hexes then
30385: LD_VAR 0 12
30389: NOT
30390: IFFALSE 30394
// exit ;
30392: GO 30867
// hex := GetHexInfo ( x , y ) ;
30394: LD_ADDR_VAR 0 15
30398: PUSH
30399: LD_VAR 0 3
30403: PPUSH
30404: LD_VAR 0 4
30408: PPUSH
30409: CALL_OW 546
30413: ST_TO_ADDR
// if hex [ 1 ] then
30414: LD_VAR 0 15
30418: PUSH
30419: LD_INT 1
30421: ARRAY
30422: IFFALSE 30426
// exit ;
30424: GO 30867
// height := hex [ 2 ] ;
30426: LD_ADDR_VAR 0 13
30430: PUSH
30431: LD_VAR 0 15
30435: PUSH
30436: LD_INT 2
30438: ARRAY
30439: ST_TO_ADDR
// for i = 1 to hexes do
30440: LD_ADDR_VAR 0 7
30444: PUSH
30445: DOUBLE
30446: LD_INT 1
30448: DEC
30449: ST_TO_ADDR
30450: LD_VAR 0 12
30454: PUSH
30455: FOR_TO
30456: IFFALSE 30786
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30458: LD_VAR 0 12
30462: PUSH
30463: LD_VAR 0 7
30467: ARRAY
30468: PUSH
30469: LD_INT 1
30471: ARRAY
30472: PPUSH
30473: LD_VAR 0 12
30477: PUSH
30478: LD_VAR 0 7
30482: ARRAY
30483: PUSH
30484: LD_INT 2
30486: ARRAY
30487: PPUSH
30488: CALL_OW 488
30492: NOT
30493: PUSH
30494: LD_VAR 0 12
30498: PUSH
30499: LD_VAR 0 7
30503: ARRAY
30504: PUSH
30505: LD_INT 1
30507: ARRAY
30508: PPUSH
30509: LD_VAR 0 12
30513: PUSH
30514: LD_VAR 0 7
30518: ARRAY
30519: PUSH
30520: LD_INT 2
30522: ARRAY
30523: PPUSH
30524: CALL_OW 428
30528: PUSH
30529: LD_INT 0
30531: GREATER
30532: OR
30533: PUSH
30534: LD_VAR 0 12
30538: PUSH
30539: LD_VAR 0 7
30543: ARRAY
30544: PUSH
30545: LD_INT 1
30547: ARRAY
30548: PPUSH
30549: LD_VAR 0 12
30553: PUSH
30554: LD_VAR 0 7
30558: ARRAY
30559: PUSH
30560: LD_INT 2
30562: ARRAY
30563: PPUSH
30564: CALL_OW 351
30568: OR
30569: IFFALSE 30575
// exit ;
30571: POP
30572: POP
30573: GO 30867
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30575: LD_ADDR_VAR 0 8
30579: PUSH
30580: LD_VAR 0 12
30584: PUSH
30585: LD_VAR 0 7
30589: ARRAY
30590: PUSH
30591: LD_INT 1
30593: ARRAY
30594: PPUSH
30595: LD_VAR 0 12
30599: PUSH
30600: LD_VAR 0 7
30604: ARRAY
30605: PUSH
30606: LD_INT 2
30608: ARRAY
30609: PPUSH
30610: CALL_OW 546
30614: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30615: LD_VAR 0 8
30619: PUSH
30620: LD_INT 1
30622: ARRAY
30623: PUSH
30624: LD_VAR 0 8
30628: PUSH
30629: LD_INT 2
30631: ARRAY
30632: PUSH
30633: LD_VAR 0 13
30637: PUSH
30638: LD_INT 2
30640: PLUS
30641: GREATER
30642: OR
30643: PUSH
30644: LD_VAR 0 8
30648: PUSH
30649: LD_INT 2
30651: ARRAY
30652: PUSH
30653: LD_VAR 0 13
30657: PUSH
30658: LD_INT 2
30660: MINUS
30661: LESS
30662: OR
30663: PUSH
30664: LD_VAR 0 8
30668: PUSH
30669: LD_INT 3
30671: ARRAY
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 8
30678: PUSH
30679: LD_INT 9
30681: PUSH
30682: LD_INT 10
30684: PUSH
30685: LD_INT 11
30687: PUSH
30688: LD_INT 12
30690: PUSH
30691: LD_INT 13
30693: PUSH
30694: LD_INT 16
30696: PUSH
30697: LD_INT 17
30699: PUSH
30700: LD_INT 18
30702: PUSH
30703: LD_INT 19
30705: PUSH
30706: LD_INT 20
30708: PUSH
30709: LD_INT 21
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: IN
30727: NOT
30728: OR
30729: PUSH
30730: LD_VAR 0 8
30734: PUSH
30735: LD_INT 5
30737: ARRAY
30738: NOT
30739: OR
30740: PUSH
30741: LD_VAR 0 8
30745: PUSH
30746: LD_INT 6
30748: ARRAY
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: LD_INT 2
30755: PUSH
30756: LD_INT 7
30758: PUSH
30759: LD_INT 9
30761: PUSH
30762: LD_INT 10
30764: PUSH
30765: LD_INT 11
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: IN
30776: NOT
30777: OR
30778: IFFALSE 30784
// exit ;
30780: POP
30781: POP
30782: GO 30867
// end ;
30784: GO 30455
30786: POP
30787: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30788: LD_VAR 0 9
30792: PPUSH
30793: LD_VAR 0 3
30797: PPUSH
30798: LD_VAR 0 4
30802: PPUSH
30803: LD_INT 20
30805: PPUSH
30806: CALL 22790 0 4
30810: PUSH
30811: LD_INT 4
30813: ARRAY
30814: IFFALSE 30818
// exit ;
30816: GO 30867
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30818: LD_VAR 0 2
30822: PUSH
30823: LD_INT 29
30825: PUSH
30826: LD_INT 30
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: IN
30833: PUSH
30834: LD_VAR 0 3
30838: PPUSH
30839: LD_VAR 0 4
30843: PPUSH
30844: LD_VAR 0 9
30848: PPUSH
30849: CALL_OW 440
30853: NOT
30854: AND
30855: IFFALSE 30859
// exit ;
30857: GO 30867
// result := true ;
30859: LD_ADDR_VAR 0 6
30863: PUSH
30864: LD_INT 1
30866: ST_TO_ADDR
// end ;
30867: LD_VAR 0 6
30871: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30872: LD_INT 0
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
30887: PPUSH
30888: PPUSH
30889: PPUSH
30890: PPUSH
30891: PPUSH
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
30904: PPUSH
30905: PPUSH
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
30917: PPUSH
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
30922: PPUSH
30923: PPUSH
30924: PPUSH
30925: PPUSH
30926: PPUSH
30927: PPUSH
30928: PPUSH
30929: PPUSH
30930: PPUSH
30931: PPUSH
// result = [ ] ;
30932: LD_ADDR_VAR 0 7
30936: PUSH
30937: EMPTY
30938: ST_TO_ADDR
// temp_list = [ ] ;
30939: LD_ADDR_VAR 0 9
30943: PUSH
30944: EMPTY
30945: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30946: LD_VAR 0 4
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: LD_INT 4
30965: PUSH
30966: LD_INT 5
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: IN
30977: NOT
30978: PUSH
30979: LD_VAR 0 1
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: IN
30994: PUSH
30995: LD_VAR 0 5
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: LD_INT 2
31005: PUSH
31006: LD_INT 3
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: LIST
31013: IN
31014: NOT
31015: AND
31016: OR
31017: IFFALSE 31021
// exit ;
31019: GO 49412
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31021: LD_VAR 0 1
31025: PUSH
31026: LD_INT 6
31028: PUSH
31029: LD_INT 7
31031: PUSH
31032: LD_INT 8
31034: PUSH
31035: LD_INT 13
31037: PUSH
31038: LD_INT 12
31040: PUSH
31041: LD_INT 15
31043: PUSH
31044: LD_INT 11
31046: PUSH
31047: LD_INT 14
31049: PUSH
31050: LD_INT 10
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: IN
31064: IFFALSE 31074
// btype = b_lab ;
31066: LD_ADDR_VAR 0 1
31070: PUSH
31071: LD_INT 6
31073: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31074: LD_VAR 0 6
31078: PUSH
31079: LD_INT 0
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: IN
31093: NOT
31094: PUSH
31095: LD_VAR 0 1
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 3
31111: PUSH
31112: LD_INT 6
31114: PUSH
31115: LD_INT 36
31117: PUSH
31118: LD_INT 4
31120: PUSH
31121: LD_INT 5
31123: PUSH
31124: LD_INT 31
31126: PUSH
31127: LD_INT 32
31129: PUSH
31130: LD_INT 33
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: IN
31146: NOT
31147: PUSH
31148: LD_VAR 0 6
31152: PUSH
31153: LD_INT 1
31155: EQUAL
31156: AND
31157: OR
31158: PUSH
31159: LD_VAR 0 1
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: IN
31174: NOT
31175: PUSH
31176: LD_VAR 0 6
31180: PUSH
31181: LD_INT 2
31183: EQUAL
31184: AND
31185: OR
31186: IFFALSE 31196
// mode = 0 ;
31188: LD_ADDR_VAR 0 6
31192: PUSH
31193: LD_INT 0
31195: ST_TO_ADDR
// case mode of 0 :
31196: LD_VAR 0 6
31200: PUSH
31201: LD_INT 0
31203: DOUBLE
31204: EQUAL
31205: IFTRUE 31209
31207: GO 42662
31209: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31210: LD_ADDR_VAR 0 11
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: LD_INT 0
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 1
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: LD_INT 1
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: LD_INT 0
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 1
31291: NEG
31292: PUSH
31293: LD_INT 2
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: LD_INT 2
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: LD_INT 2
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: LD_INT 3
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: LD_INT 3
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: LD_INT 2
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31403: LD_ADDR_VAR 0 12
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 0
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: LD_INT 0
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 1
31461: NEG
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: LD_INT 1
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 0
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: LD_INT 1
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 3
31560: NEG
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 3
31571: NEG
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31599: LD_ADDR_VAR 0 13
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 1
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: LD_INT 1
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: NEG
31681: PUSH
31682: LD_INT 2
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: LD_INT 2
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: NEG
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: NEG
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: LD_INT 3
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 3
31758: NEG
31759: PUSH
31760: LD_INT 2
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 3
31770: NEG
31771: PUSH
31772: LD_INT 3
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31798: LD_ADDR_VAR 0 14
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: LD_INT 1
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: LD_INT 2
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: LD_INT 2
31894: NEG
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 1
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: LD_INT 3
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: LD_INT 3
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: LD_INT 2
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31994: LD_ADDR_VAR 0 15
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 2
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: NEG
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: NEG
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 2
32128: NEG
32129: PUSH
32130: LD_INT 1
32132: NEG
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: LD_INT 1
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 3
32161: PUSH
32162: LD_INT 1
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32187: LD_ADDR_VAR 0 16
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: LD_INT 1
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 1
32256: NEG
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: PUSH
32270: LD_INT 2
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 2
32310: NEG
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 2
32322: NEG
32323: PUSH
32324: LD_INT 2
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 3
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 3
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: LD_INT 3
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32380: LD_ADDR_VAR 0 17
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: LD_INT 1
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 1
32461: NEG
32462: PUSH
32463: LD_INT 2
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 2
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 2
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: LD_INT 2
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: PUSH
32526: LD_INT 2
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 1
32545: NEG
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 2
32556: NEG
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: NEG
32568: PUSH
32569: LD_INT 1
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: NEG
32580: PUSH
32581: LD_INT 2
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32610: LD_ADDR_VAR 0 18
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: LD_INT 0
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: LD_INT 1
32630: NEG
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 1
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 0
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: NEG
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 1
32691: NEG
32692: PUSH
32693: LD_INT 2
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 2
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 1
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 2
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: NEG
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32840: LD_ADDR_VAR 0 19
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: LD_INT 0
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: LD_INT 1
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 1
32898: NEG
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 1
32909: NEG
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: LD_INT 2
32925: NEG
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: LD_INT 2
32936: NEG
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: LD_INT 0
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: LD_INT 1
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: LD_INT 2
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 1
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 2
33016: NEG
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 2
33027: NEG
33028: PUSH
33029: LD_INT 1
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 2
33039: NEG
33040: PUSH
33041: LD_INT 2
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33070: LD_ADDR_VAR 0 20
33074: PUSH
33075: LD_INT 0
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: LD_INT 1
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 1
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 1
33128: NEG
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 1
33139: NEG
33140: PUSH
33141: LD_INT 1
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: LD_INT 2
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: LD_INT 2
33166: NEG
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: LD_INT 1
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 2
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 2
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: LD_INT 2
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: LD_INT 2
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 2
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: LD_INT 1
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 2
33246: NEG
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: NEG
33258: PUSH
33259: LD_INT 1
33261: NEG
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 2
33269: NEG
33270: PUSH
33271: LD_INT 2
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33300: LD_ADDR_VAR 0 21
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 0
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: NEG
33382: PUSH
33383: LD_INT 2
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: LD_INT 2
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: LD_INT 1
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 2
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 2
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: LD_INT 2
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: LD_INT 2
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: LD_INT 2
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: LD_INT 2
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33530: LD_ADDR_VAR 0 22
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: LD_INT 0
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 0
33547: PUSH
33548: LD_INT 1
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 1
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 1
33568: PUSH
33569: LD_INT 1
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: LD_INT 2
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 2
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 2
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 2
33665: PUSH
33666: LD_INT 2
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: LD_INT 2
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: LD_INT 1
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 2
33717: NEG
33718: PUSH
33719: LD_INT 1
33721: NEG
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: LD_INT 2
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33760: LD_ADDR_VAR 0 23
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 0
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 0
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: LD_INT 1
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: NEG
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: LD_INT 2
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: LD_INT 1
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 2
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: LD_INT 2
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 1
33925: NEG
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 2
33936: NEG
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 2
33947: NEG
33948: PUSH
33949: LD_INT 1
33951: NEG
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 2
33959: NEG
33960: PUSH
33961: LD_INT 2
33963: NEG
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 2
33971: NEG
33972: PUSH
33973: LD_INT 3
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: LD_INT 3
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34040: LD_ADDR_VAR 0 24
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 1
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: LD_INT 1
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: LD_INT 2
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: LD_INT 2
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 2
34165: PUSH
34166: LD_INT 1
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 2
34175: PUSH
34176: LD_INT 2
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: LD_INT 2
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 1
34205: NEG
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 2
34216: NEG
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 2
34227: NEG
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 2
34239: NEG
34240: PUSH
34241: LD_INT 2
34243: NEG
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 1
34251: PUSH
34252: LD_INT 2
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 3
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 3
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34316: LD_ADDR_VAR 0 25
34320: PUSH
34321: LD_INT 0
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: LD_INT 2
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 2
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: LD_INT 2
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: LD_INT 2
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 2
34492: NEG
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 2
34503: NEG
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 2
34515: NEG
34516: PUSH
34517: LD_INT 2
34519: NEG
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 3
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 2
34547: PUSH
34548: LD_INT 3
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: LD_INT 3
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34590: LD_ADDR_VAR 0 26
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 1
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 1
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 1
34659: NEG
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: NEG
34672: PUSH
34673: LD_INT 2
34675: NEG
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: LD_INT 2
34686: NEG
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: LD_INT 1
34697: NEG
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: LD_INT 2
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 2
34766: NEG
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 2
34777: NEG
34778: PUSH
34779: LD_INT 1
34781: NEG
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 2
34789: NEG
34790: PUSH
34791: LD_INT 2
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: LD_INT 3
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: LD_INT 3
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: LD_INT 2
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 2
34832: NEG
34833: PUSH
34834: LD_INT 1
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34866: LD_ADDR_VAR 0 27
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: LD_INT 1
34886: NEG
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 1
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: LD_INT 1
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 1
34947: NEG
34948: PUSH
34949: LD_INT 2
34951: NEG
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 2
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: LD_INT 1
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: PUSH
34992: LD_INT 1
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 2
35042: NEG
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 2
35053: NEG
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 2
35065: NEG
35066: PUSH
35067: LD_INT 2
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 2
35088: NEG
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 3
35099: NEG
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 3
35111: NEG
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35146: LD_ADDR_VAR 0 28
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: LD_INT 1
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: NEG
35228: PUSH
35229: LD_INT 2
35231: NEG
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 0
35239: PUSH
35240: LD_INT 2
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 2
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: LD_INT 1
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 2
35322: NEG
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: NEG
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 2
35345: NEG
35346: PUSH
35347: LD_INT 2
35349: NEG
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 2
35357: NEG
35358: PUSH
35359: LD_INT 3
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: LD_INT 3
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 3
35381: NEG
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 3
35393: NEG
35394: PUSH
35395: LD_INT 2
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35428: LD_ADDR_VAR 0 29
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: LD_INT 1
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: LD_INT 2
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: LD_INT 1
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 2
35594: NEG
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: LD_INT 2
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 2
35618: NEG
35619: PUSH
35620: LD_INT 3
35622: NEG
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 2
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 3
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 3
35672: NEG
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35707: LD_ADDR_VAR 0 30
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: LD_INT 1
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: NEG
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: LD_INT 2
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 0
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: LD_INT 2
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 2
35873: NEG
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 2
35884: NEG
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: NEG
35897: PUSH
35898: LD_INT 3
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 2
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 3
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: LD_INT 3
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 3
35950: NEG
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35985: LD_ADDR_VAR 0 31
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 2
36109: PUSH
36110: LD_INT 2
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: LD_INT 2
36166: NEG
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 2
36174: NEG
36175: PUSH
36176: LD_INT 3
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 2
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 3
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 1
36207: PUSH
36208: LD_INT 3
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 2
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 3
36228: NEG
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36263: LD_ADDR_VAR 0 32
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: LD_INT 1
36336: NEG
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: LD_INT 2
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 2
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: PUSH
36399: LD_INT 2
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: LD_INT 3
36456: NEG
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 2
36467: NEG
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 3
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 2
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: NEG
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 3
36506: NEG
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36541: LD_ADDR_VAR 0 33
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: LD_INT 1
36561: NEG
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 2
36696: NEG
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 2
36707: NEG
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 2
36719: NEG
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 2
36731: NEG
36732: PUSH
36733: LD_INT 3
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 3
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 3
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: LD_INT 2
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 3
36785: NEG
36786: PUSH
36787: LD_INT 2
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36820: LD_ADDR_VAR 0 34
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 1
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: LD_INT 1
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: LD_INT 2
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: LD_INT 1
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 2
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 2
36945: PUSH
36946: LD_INT 2
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 2
36976: NEG
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 2
36987: NEG
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 2
36999: NEG
37000: PUSH
37001: LD_INT 2
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: NEG
37012: PUSH
37013: LD_INT 3
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 2
37026: NEG
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 3
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: LD_INT 3
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 2
37054: NEG
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 3
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37100: LD_ADDR_VAR 0 35
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 2
37191: NEG
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37212: LD_ADDR_VAR 0 36
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: NEG
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: LD_INT 2
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37324: LD_ADDR_VAR 0 37
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: NEG
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37436: LD_ADDR_VAR 0 38
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: NEG
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: NEG
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37548: LD_ADDR_VAR 0 39
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37660: LD_ADDR_VAR 0 40
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37772: LD_ADDR_VAR 0 41
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 1
37853: NEG
37854: PUSH
37855: LD_INT 2
37857: NEG
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 2
37896: PUSH
37897: LD_INT 2
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 2
37938: NEG
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 2
37950: NEG
37951: PUSH
37952: LD_INT 2
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 2
37962: NEG
37963: PUSH
37964: LD_INT 3
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 3
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 3
38005: PUSH
38006: LD_INT 2
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 3
38015: PUSH
38016: LD_INT 3
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: LD_INT 3
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 2
38035: NEG
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 3
38046: NEG
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 3
38057: NEG
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 3
38069: NEG
38070: PUSH
38071: LD_INT 2
38073: NEG
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 3
38081: NEG
38082: PUSH
38083: LD_INT 3
38085: NEG
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38122: LD_ADDR_VAR 0 42
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: LD_INT 2
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: LD_INT 2
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 2
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: LD_INT 2
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: NEG
38313: PUSH
38314: LD_INT 3
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: LD_INT 3
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: LD_INT 3
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 3
38358: PUSH
38359: LD_INT 2
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 3
38368: PUSH
38369: LD_INT 3
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 3
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: LD_INT 3
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 3
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 3
38419: NEG
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 3
38431: NEG
38432: PUSH
38433: LD_INT 3
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38472: LD_ADDR_VAR 0 43
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: LD_INT 2
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: LD_INT 0
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 2
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: LD_INT 2
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 2
38638: NEG
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 2
38649: NEG
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 3
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 3
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: LD_INT 2
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 3
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: LD_INT 3
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: LD_INT 3
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 3
38768: NEG
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 3
38779: NEG
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38820: LD_ADDR_VAR 0 44
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: LD_INT 1
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: LD_INT 1
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: LD_INT 2
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 2
38944: PUSH
38945: LD_INT 2
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: NEG
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: LD_INT 3
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 3
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 3
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 3
39053: PUSH
39054: LD_INT 2
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 3
39063: PUSH
39064: LD_INT 3
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: LD_INT 3
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: NEG
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 3
39105: NEG
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 3
39117: NEG
39118: PUSH
39119: LD_INT 2
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 3
39129: NEG
39130: PUSH
39131: LD_INT 3
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39170: LD_ADDR_VAR 0 45
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: LD_INT 2
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 2
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 2
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 2
39336: NEG
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 2
39360: NEG
39361: PUSH
39362: LD_INT 3
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: LD_INT 3
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 3
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 3
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: PUSH
39417: LD_INT 3
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: LD_INT 3
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: LD_INT 3
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: LD_INT 2
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 3
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 3
39479: NEG
39480: PUSH
39481: LD_INT 3
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39520: LD_ADDR_VAR 0 46
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 2
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 2
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 2
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 2
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: NEG
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: NEG
39710: PUSH
39711: LD_INT 3
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: LD_INT 3
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 3
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 3
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 3
39816: NEG
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 3
39827: NEG
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39868: LD_ADDR_VAR 0 47
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: NEG
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 2
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 2
39983: NEG
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: LD_INT 2
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40019: LD_ADDR_VAR 0 48
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40166: LD_ADDR_VAR 0 49
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40310: LD_ADDR_VAR 0 50
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 2
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40454: LD_ADDR_VAR 0 51
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40601: LD_ADDR_VAR 0 52
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 2
40705: NEG
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 2
40716: NEG
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: LD_INT 2
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40752: LD_ADDR_VAR 0 53
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: LD_INT 2
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: NEG
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40982: LD_ADDR_VAR 0 54
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 2
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 2
41117: PUSH
41118: LD_INT 2
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41212: LD_ADDR_VAR 0 55
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: LD_INT 2
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 2
41399: NEG
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: LD_INT 2
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41442: LD_ADDR_VAR 0 56
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 1
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: LD_INT 2
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 2
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 2
41618: NEG
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41672: LD_ADDR_VAR 0 57
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 2
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 2
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41902: LD_ADDR_VAR 0 58
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: LD_INT 2
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 2
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42132: LD_ADDR_VAR 0 59
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42220: LD_ADDR_VAR 0 60
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42308: LD_ADDR_VAR 0 61
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42396: LD_ADDR_VAR 0 62
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42484: LD_ADDR_VAR 0 63
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42572: LD_ADDR_VAR 0 64
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: ST_TO_ADDR
// end ; 1 :
42660: GO 48557
42662: LD_INT 1
42664: DOUBLE
42665: EQUAL
42666: IFTRUE 42670
42668: GO 45293
42670: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42671: LD_ADDR_VAR 0 11
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: LD_INT 3
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 3
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: LIST
42714: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42715: LD_ADDR_VAR 0 12
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42756: LD_ADDR_VAR 0 13
42760: PUSH
42761: LD_INT 3
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 3
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: LIST
42795: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42796: LD_ADDR_VAR 0 14
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 3
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42837: LD_ADDR_VAR 0 15
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: NEG
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42881: LD_ADDR_VAR 0 16
42885: PUSH
42886: LD_INT 2
42888: NEG
42889: PUSH
42890: LD_INT 3
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 3
42900: NEG
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 3
42912: NEG
42913: PUSH
42914: LD_INT 3
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42927: LD_ADDR_VAR 0 17
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 3
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 3
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: LIST
42970: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42971: LD_ADDR_VAR 0 18
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 3
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 3
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: LIST
43011: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43012: LD_ADDR_VAR 0 19
43016: PUSH
43017: LD_INT 3
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 3
43029: PUSH
43030: LD_INT 3
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: LD_INT 3
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43052: LD_ADDR_VAR 0 20
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 3
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: LIST
43092: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43093: LD_ADDR_VAR 0 21
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 3
43111: NEG
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 3
43122: NEG
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: LIST
43136: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43137: LD_ADDR_VAR 0 22
43141: PUSH
43142: LD_INT 2
43144: NEG
43145: PUSH
43146: LD_INT 3
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 3
43156: NEG
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 3
43168: NEG
43169: PUSH
43170: LD_INT 3
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43183: LD_ADDR_VAR 0 23
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 4
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 3
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: LIST
43226: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43227: LD_ADDR_VAR 0 24
43231: PUSH
43232: LD_INT 3
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 3
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 4
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43268: LD_ADDR_VAR 0 25
43272: PUSH
43273: LD_INT 3
43275: PUSH
43276: LD_INT 3
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 4
43285: PUSH
43286: LD_INT 3
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 3
43295: PUSH
43296: LD_INT 4
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: LIST
43307: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43308: LD_ADDR_VAR 0 26
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 3
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: LD_INT 4
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 3
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: LIST
43348: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43349: LD_ADDR_VAR 0 27
43353: PUSH
43354: LD_INT 3
43356: NEG
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 3
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 4
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: LIST
43392: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43393: LD_ADDR_VAR 0 28
43397: PUSH
43398: LD_INT 3
43400: NEG
43401: PUSH
43402: LD_INT 3
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 3
43412: NEG
43413: PUSH
43414: LD_INT 4
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 4
43424: NEG
43425: PUSH
43426: LD_INT 3
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: LIST
43438: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43439: LD_ADDR_VAR 0 29
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: LD_INT 3
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 3
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 4
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 4
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 3
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: LD_INT 5
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 5
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 4
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: LD_INT 6
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 6
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 5
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43594: LD_ADDR_VAR 0 30
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 3
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 3
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 3
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 4
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 4
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 4
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 5
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 5
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 5
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 6
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 6
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43737: LD_ADDR_VAR 0 31
43741: PUSH
43742: LD_INT 3
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 3
43754: PUSH
43755: LD_INT 3
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 4
43774: PUSH
43775: LD_INT 3
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 4
43784: PUSH
43785: LD_INT 4
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: LD_INT 4
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 5
43804: PUSH
43805: LD_INT 4
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 5
43814: PUSH
43815: LD_INT 5
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 4
43824: PUSH
43825: LD_INT 5
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 6
43834: PUSH
43835: LD_INT 5
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 6
43844: PUSH
43845: LD_INT 6
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 5
43854: PUSH
43855: LD_INT 6
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43876: LD_ADDR_VAR 0 32
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 3
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 3
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: LD_INT 4
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 4
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: LD_INT 3
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 5
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 5
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 4
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 6
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: LD_INT 6
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 5
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44019: LD_ADDR_VAR 0 33
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 3
44037: NEG
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 3
44048: NEG
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 3
44060: NEG
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 4
44071: NEG
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 4
44082: NEG
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 4
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 5
44105: NEG
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 5
44116: NEG
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 5
44128: NEG
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 6
44139: NEG
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 6
44150: NEG
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44174: LD_ADDR_VAR 0 34
44178: PUSH
44179: LD_INT 2
44181: NEG
44182: PUSH
44183: LD_INT 3
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 3
44193: NEG
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 3
44205: NEG
44206: PUSH
44207: LD_INT 3
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 3
44217: NEG
44218: PUSH
44219: LD_INT 4
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 4
44229: NEG
44230: PUSH
44231: LD_INT 3
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 4
44241: NEG
44242: PUSH
44243: LD_INT 4
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 4
44253: NEG
44254: PUSH
44255: LD_INT 5
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 5
44265: NEG
44266: PUSH
44267: LD_INT 4
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 5
44277: NEG
44278: PUSH
44279: LD_INT 5
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 5
44289: NEG
44290: PUSH
44291: LD_INT 6
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 6
44301: NEG
44302: PUSH
44303: LD_INT 5
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 6
44313: NEG
44314: PUSH
44315: LD_INT 6
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44337: LD_ADDR_VAR 0 41
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 3
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44381: LD_ADDR_VAR 0 42
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 3
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: LIST
44421: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44422: LD_ADDR_VAR 0 43
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 3
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44462: LD_ADDR_VAR 0 44
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44503: LD_ADDR_VAR 0 45
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 3
44532: NEG
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: LIST
44546: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44547: LD_ADDR_VAR 0 46
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: LD_INT 3
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 3
44578: NEG
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: LIST
44592: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44593: LD_ADDR_VAR 0 47
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 3
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: LD_INT 3
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44626: LD_ADDR_VAR 0 48
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44657: LD_ADDR_VAR 0 49
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 3
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44686: LD_ADDR_VAR 0 50
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: LD_INT 3
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 3
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44715: LD_ADDR_VAR 0 51
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44746: LD_ADDR_VAR 0 52
44750: PUSH
44751: LD_INT 3
44753: NEG
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 3
44765: NEG
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44779: LD_ADDR_VAR 0 53
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 3
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 3
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: LIST
44822: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44823: LD_ADDR_VAR 0 54
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 3
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44864: LD_ADDR_VAR 0 55
44868: PUSH
44869: LD_INT 3
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: LD_INT 3
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44904: LD_ADDR_VAR 0 56
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 3
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 3
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44945: LD_ADDR_VAR 0 57
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 3
44963: NEG
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 3
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: LIST
44988: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44989: LD_ADDR_VAR 0 58
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 3
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 3
45008: NEG
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 3
45020: NEG
45021: PUSH
45022: LD_INT 3
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: LIST
45034: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45035: LD_ADDR_VAR 0 59
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: LIST
45078: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45079: LD_ADDR_VAR 0 60
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45120: LD_ADDR_VAR 0 61
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45160: LD_ADDR_VAR 0 62
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45201: LD_ADDR_VAR 0 63
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45245: LD_ADDR_VAR 0 64
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: LIST
45290: ST_TO_ADDR
// end ; 2 :
45291: GO 48557
45293: LD_INT 2
45295: DOUBLE
45296: EQUAL
45297: IFTRUE 45301
45299: GO 48556
45301: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45302: LD_ADDR_VAR 0 29
45306: PUSH
45307: LD_INT 4
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 4
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 5
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 5
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 4
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 3
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 5
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 3
45402: PUSH
45403: LD_INT 3
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 3
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 4
45422: PUSH
45423: LD_INT 3
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 4
45432: PUSH
45433: LD_INT 4
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 3
45442: PUSH
45443: LD_INT 4
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 4
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: LD_INT 4
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 4
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 3
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: LD_INT 4
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: LD_INT 5
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 5
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 4
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: LD_INT 3
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 5
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: LD_INT 3
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 3
45585: NEG
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 3
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 3
45630: NEG
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 4
45641: NEG
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 4
45652: NEG
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 4
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 4
45687: NEG
45688: PUSH
45689: LD_INT 4
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 4
45699: NEG
45700: PUSH
45701: LD_INT 5
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 3
45711: NEG
45712: PUSH
45713: LD_INT 4
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 3
45723: NEG
45724: PUSH
45725: LD_INT 3
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 4
45735: NEG
45736: PUSH
45737: LD_INT 3
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 5
45747: NEG
45748: PUSH
45749: LD_INT 4
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 5
45759: NEG
45760: PUSH
45761: LD_INT 5
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 3
45771: NEG
45772: PUSH
45773: LD_INT 5
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 5
45783: NEG
45784: PUSH
45785: LD_INT 3
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45840: LD_ADDR_VAR 0 30
45844: PUSH
45845: LD_INT 4
45847: PUSH
45848: LD_INT 4
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 4
45857: PUSH
45858: LD_INT 3
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 5
45867: PUSH
45868: LD_INT 4
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 5
45877: PUSH
45878: LD_INT 5
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 4
45887: PUSH
45888: LD_INT 5
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 3
45897: PUSH
45898: LD_INT 4
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: PUSH
45908: LD_INT 3
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 5
45917: PUSH
45918: LD_INT 3
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 3
45927: PUSH
45928: LD_INT 5
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 3
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 4
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 4
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 3
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 4
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 4
46030: NEG
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 4
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 3
46053: NEG
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 3
46064: NEG
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 4
46075: NEG
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 5
46086: NEG
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 5
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 5
46109: NEG
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 3
46121: NEG
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: NEG
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 3
46144: NEG
46145: PUSH
46146: LD_INT 4
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 3
46180: NEG
46181: PUSH
46182: LD_INT 2
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 4
46192: NEG
46193: PUSH
46194: LD_INT 3
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 4
46204: NEG
46205: PUSH
46206: LD_INT 4
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: LD_INT 4
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 4
46228: NEG
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 4
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 5
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 4
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 3
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 3
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 4
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 5
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 3
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: LD_INT 5
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46387: LD_ADDR_VAR 0 31
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 4
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 3
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 4
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 5
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 5
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 4
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: LD_INT 5
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: LD_INT 3
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 3
46487: NEG
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 3
46498: NEG
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 3
46532: NEG
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 4
46543: NEG
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 4
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 4
46566: NEG
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 4
46589: NEG
46590: PUSH
46591: LD_INT 4
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 4
46601: NEG
46602: PUSH
46603: LD_INT 5
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 3
46613: NEG
46614: PUSH
46615: LD_INT 4
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 3
46625: NEG
46626: PUSH
46627: LD_INT 3
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 4
46637: NEG
46638: PUSH
46639: LD_INT 3
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 5
46649: NEG
46650: PUSH
46651: LD_INT 4
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 5
46661: NEG
46662: PUSH
46663: LD_INT 5
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: LD_INT 5
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 5
46685: NEG
46686: PUSH
46687: LD_INT 3
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 3
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 4
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: LD_INT 3
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: LD_INT 3
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 4
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 2
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: LD_INT 4
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 4
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 4
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 5
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 5
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 4
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 3
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 5
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46937: LD_ADDR_VAR 0 32
46941: PUSH
46942: LD_INT 4
46944: NEG
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 4
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 4
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 5
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 5
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 5
47023: NEG
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 3
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 3
47046: NEG
47047: PUSH
47048: LD_INT 3
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 3
47058: NEG
47059: PUSH
47060: LD_INT 4
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: NEG
47071: PUSH
47072: LD_INT 3
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 4
47106: NEG
47107: PUSH
47108: LD_INT 3
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 4
47118: NEG
47119: PUSH
47120: LD_INT 4
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: LD_INT 4
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 4
47142: NEG
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 4
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 5
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 4
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 3
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: LD_INT 3
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 4
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 5
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: LD_INT 5
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 3
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 3
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 4
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 4
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: LD_INT 2
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 4
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 4
47349: PUSH
47350: LD_INT 4
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 4
47359: PUSH
47360: LD_INT 3
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 5
47369: PUSH
47370: LD_INT 4
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 5
47379: PUSH
47380: LD_INT 5
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 4
47389: PUSH
47390: LD_INT 5
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 3
47399: PUSH
47400: LD_INT 4
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: LD_INT 3
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 5
47419: PUSH
47420: LD_INT 3
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 3
47429: PUSH
47430: LD_INT 5
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47484: LD_ADDR_VAR 0 33
47488: PUSH
47489: LD_INT 4
47491: NEG
47492: PUSH
47493: LD_INT 4
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 4
47503: NEG
47504: PUSH
47505: LD_INT 5
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: NEG
47516: PUSH
47517: LD_INT 4
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: LD_INT 3
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 4
47539: NEG
47540: PUSH
47541: LD_INT 3
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 5
47551: NEG
47552: PUSH
47553: LD_INT 4
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 5
47563: NEG
47564: PUSH
47565: LD_INT 5
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 3
47575: NEG
47576: PUSH
47577: LD_INT 5
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 5
47587: NEG
47588: PUSH
47589: LD_INT 3
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 3
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 4
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 3
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 3
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: LD_INT 4
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: LD_INT 4
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 4
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 4
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 5
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 5
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 4
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 5
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 3
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 4
47814: PUSH
47815: LD_INT 3
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 4
47824: PUSH
47825: LD_INT 4
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 3
47834: PUSH
47835: LD_INT 4
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 4
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 4
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 4
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 3
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 4
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 5
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 5
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 4
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 3
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: LD_INT 5
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: LD_INT 3
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48022: LD_ADDR_VAR 0 34
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 4
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 5
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: LD_INT 4
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 3
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 3
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: LD_INT 4
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 5
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: LD_INT 3
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: LD_INT 5
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 3
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 3
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 4
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 4
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 4
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 4
48224: PUSH
48225: LD_INT 4
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 4
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 5
48244: PUSH
48245: LD_INT 4
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 5
48254: PUSH
48255: LD_INT 5
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 4
48264: PUSH
48265: LD_INT 5
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: PUSH
48275: LD_INT 4
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 3
48284: PUSH
48285: LD_INT 3
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 5
48294: PUSH
48295: LD_INT 3
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: PUSH
48305: LD_INT 5
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 3
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 4
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 4
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 3
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: LD_INT 4
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 4
48407: NEG
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 4
48418: NEG
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 3
48430: NEG
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 3
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 4
48452: NEG
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 5
48463: NEG
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 5
48474: NEG
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 5
48486: NEG
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: NEG
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: ST_TO_ADDR
// end ; end ;
48554: GO 48557
48556: POP
// case btype of b_depot , b_warehouse :
48557: LD_VAR 0 1
48561: PUSH
48562: LD_INT 0
48564: DOUBLE
48565: EQUAL
48566: IFTRUE 48576
48568: LD_INT 1
48570: DOUBLE
48571: EQUAL
48572: IFTRUE 48576
48574: GO 48777
48576: POP
// case nation of nation_american :
48577: LD_VAR 0 5
48581: PUSH
48582: LD_INT 1
48584: DOUBLE
48585: EQUAL
48586: IFTRUE 48590
48588: GO 48646
48590: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48591: LD_ADDR_VAR 0 9
48595: PUSH
48596: LD_VAR 0 11
48600: PUSH
48601: LD_VAR 0 12
48605: PUSH
48606: LD_VAR 0 13
48610: PUSH
48611: LD_VAR 0 14
48615: PUSH
48616: LD_VAR 0 15
48620: PUSH
48621: LD_VAR 0 16
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: PUSH
48634: LD_VAR 0 4
48638: PUSH
48639: LD_INT 1
48641: PLUS
48642: ARRAY
48643: ST_TO_ADDR
48644: GO 48775
48646: LD_INT 2
48648: DOUBLE
48649: EQUAL
48650: IFTRUE 48654
48652: GO 48710
48654: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48655: LD_ADDR_VAR 0 9
48659: PUSH
48660: LD_VAR 0 17
48664: PUSH
48665: LD_VAR 0 18
48669: PUSH
48670: LD_VAR 0 19
48674: PUSH
48675: LD_VAR 0 20
48679: PUSH
48680: LD_VAR 0 21
48684: PUSH
48685: LD_VAR 0 22
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: PUSH
48698: LD_VAR 0 4
48702: PUSH
48703: LD_INT 1
48705: PLUS
48706: ARRAY
48707: ST_TO_ADDR
48708: GO 48775
48710: LD_INT 3
48712: DOUBLE
48713: EQUAL
48714: IFTRUE 48718
48716: GO 48774
48718: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48719: LD_ADDR_VAR 0 9
48723: PUSH
48724: LD_VAR 0 23
48728: PUSH
48729: LD_VAR 0 24
48733: PUSH
48734: LD_VAR 0 25
48738: PUSH
48739: LD_VAR 0 26
48743: PUSH
48744: LD_VAR 0 27
48748: PUSH
48749: LD_VAR 0 28
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: PUSH
48762: LD_VAR 0 4
48766: PUSH
48767: LD_INT 1
48769: PLUS
48770: ARRAY
48771: ST_TO_ADDR
48772: GO 48775
48774: POP
48775: GO 49330
48777: LD_INT 2
48779: DOUBLE
48780: EQUAL
48781: IFTRUE 48791
48783: LD_INT 3
48785: DOUBLE
48786: EQUAL
48787: IFTRUE 48791
48789: GO 48847
48791: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48792: LD_ADDR_VAR 0 9
48796: PUSH
48797: LD_VAR 0 29
48801: PUSH
48802: LD_VAR 0 30
48806: PUSH
48807: LD_VAR 0 31
48811: PUSH
48812: LD_VAR 0 32
48816: PUSH
48817: LD_VAR 0 33
48821: PUSH
48822: LD_VAR 0 34
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: PUSH
48835: LD_VAR 0 4
48839: PUSH
48840: LD_INT 1
48842: PLUS
48843: ARRAY
48844: ST_TO_ADDR
48845: GO 49330
48847: LD_INT 16
48849: DOUBLE
48850: EQUAL
48851: IFTRUE 48909
48853: LD_INT 17
48855: DOUBLE
48856: EQUAL
48857: IFTRUE 48909
48859: LD_INT 18
48861: DOUBLE
48862: EQUAL
48863: IFTRUE 48909
48865: LD_INT 19
48867: DOUBLE
48868: EQUAL
48869: IFTRUE 48909
48871: LD_INT 22
48873: DOUBLE
48874: EQUAL
48875: IFTRUE 48909
48877: LD_INT 20
48879: DOUBLE
48880: EQUAL
48881: IFTRUE 48909
48883: LD_INT 21
48885: DOUBLE
48886: EQUAL
48887: IFTRUE 48909
48889: LD_INT 23
48891: DOUBLE
48892: EQUAL
48893: IFTRUE 48909
48895: LD_INT 24
48897: DOUBLE
48898: EQUAL
48899: IFTRUE 48909
48901: LD_INT 25
48903: DOUBLE
48904: EQUAL
48905: IFTRUE 48909
48907: GO 48965
48909: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48910: LD_ADDR_VAR 0 9
48914: PUSH
48915: LD_VAR 0 35
48919: PUSH
48920: LD_VAR 0 36
48924: PUSH
48925: LD_VAR 0 37
48929: PUSH
48930: LD_VAR 0 38
48934: PUSH
48935: LD_VAR 0 39
48939: PUSH
48940: LD_VAR 0 40
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: PUSH
48953: LD_VAR 0 4
48957: PUSH
48958: LD_INT 1
48960: PLUS
48961: ARRAY
48962: ST_TO_ADDR
48963: GO 49330
48965: LD_INT 6
48967: DOUBLE
48968: EQUAL
48969: IFTRUE 49021
48971: LD_INT 7
48973: DOUBLE
48974: EQUAL
48975: IFTRUE 49021
48977: LD_INT 8
48979: DOUBLE
48980: EQUAL
48981: IFTRUE 49021
48983: LD_INT 13
48985: DOUBLE
48986: EQUAL
48987: IFTRUE 49021
48989: LD_INT 12
48991: DOUBLE
48992: EQUAL
48993: IFTRUE 49021
48995: LD_INT 15
48997: DOUBLE
48998: EQUAL
48999: IFTRUE 49021
49001: LD_INT 11
49003: DOUBLE
49004: EQUAL
49005: IFTRUE 49021
49007: LD_INT 14
49009: DOUBLE
49010: EQUAL
49011: IFTRUE 49021
49013: LD_INT 10
49015: DOUBLE
49016: EQUAL
49017: IFTRUE 49021
49019: GO 49077
49021: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49022: LD_ADDR_VAR 0 9
49026: PUSH
49027: LD_VAR 0 41
49031: PUSH
49032: LD_VAR 0 42
49036: PUSH
49037: LD_VAR 0 43
49041: PUSH
49042: LD_VAR 0 44
49046: PUSH
49047: LD_VAR 0 45
49051: PUSH
49052: LD_VAR 0 46
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: PUSH
49065: LD_VAR 0 4
49069: PUSH
49070: LD_INT 1
49072: PLUS
49073: ARRAY
49074: ST_TO_ADDR
49075: GO 49330
49077: LD_INT 36
49079: DOUBLE
49080: EQUAL
49081: IFTRUE 49085
49083: GO 49141
49085: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49086: LD_ADDR_VAR 0 9
49090: PUSH
49091: LD_VAR 0 47
49095: PUSH
49096: LD_VAR 0 48
49100: PUSH
49101: LD_VAR 0 49
49105: PUSH
49106: LD_VAR 0 50
49110: PUSH
49111: LD_VAR 0 51
49115: PUSH
49116: LD_VAR 0 52
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: PUSH
49129: LD_VAR 0 4
49133: PUSH
49134: LD_INT 1
49136: PLUS
49137: ARRAY
49138: ST_TO_ADDR
49139: GO 49330
49141: LD_INT 4
49143: DOUBLE
49144: EQUAL
49145: IFTRUE 49167
49147: LD_INT 5
49149: DOUBLE
49150: EQUAL
49151: IFTRUE 49167
49153: LD_INT 34
49155: DOUBLE
49156: EQUAL
49157: IFTRUE 49167
49159: LD_INT 37
49161: DOUBLE
49162: EQUAL
49163: IFTRUE 49167
49165: GO 49223
49167: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49168: LD_ADDR_VAR 0 9
49172: PUSH
49173: LD_VAR 0 53
49177: PUSH
49178: LD_VAR 0 54
49182: PUSH
49183: LD_VAR 0 55
49187: PUSH
49188: LD_VAR 0 56
49192: PUSH
49193: LD_VAR 0 57
49197: PUSH
49198: LD_VAR 0 58
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: PUSH
49211: LD_VAR 0 4
49215: PUSH
49216: LD_INT 1
49218: PLUS
49219: ARRAY
49220: ST_TO_ADDR
49221: GO 49330
49223: LD_INT 31
49225: DOUBLE
49226: EQUAL
49227: IFTRUE 49273
49229: LD_INT 32
49231: DOUBLE
49232: EQUAL
49233: IFTRUE 49273
49235: LD_INT 33
49237: DOUBLE
49238: EQUAL
49239: IFTRUE 49273
49241: LD_INT 27
49243: DOUBLE
49244: EQUAL
49245: IFTRUE 49273
49247: LD_INT 26
49249: DOUBLE
49250: EQUAL
49251: IFTRUE 49273
49253: LD_INT 28
49255: DOUBLE
49256: EQUAL
49257: IFTRUE 49273
49259: LD_INT 29
49261: DOUBLE
49262: EQUAL
49263: IFTRUE 49273
49265: LD_INT 30
49267: DOUBLE
49268: EQUAL
49269: IFTRUE 49273
49271: GO 49329
49273: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49274: LD_ADDR_VAR 0 9
49278: PUSH
49279: LD_VAR 0 59
49283: PUSH
49284: LD_VAR 0 60
49288: PUSH
49289: LD_VAR 0 61
49293: PUSH
49294: LD_VAR 0 62
49298: PUSH
49299: LD_VAR 0 63
49303: PUSH
49304: LD_VAR 0 64
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: PUSH
49317: LD_VAR 0 4
49321: PUSH
49322: LD_INT 1
49324: PLUS
49325: ARRAY
49326: ST_TO_ADDR
49327: GO 49330
49329: POP
// temp_list2 = [ ] ;
49330: LD_ADDR_VAR 0 10
49334: PUSH
49335: EMPTY
49336: ST_TO_ADDR
// for i in temp_list do
49337: LD_ADDR_VAR 0 8
49341: PUSH
49342: LD_VAR 0 9
49346: PUSH
49347: FOR_IN
49348: IFFALSE 49400
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49350: LD_ADDR_VAR 0 10
49354: PUSH
49355: LD_VAR 0 10
49359: PUSH
49360: LD_VAR 0 8
49364: PUSH
49365: LD_INT 1
49367: ARRAY
49368: PUSH
49369: LD_VAR 0 2
49373: PLUS
49374: PUSH
49375: LD_VAR 0 8
49379: PUSH
49380: LD_INT 2
49382: ARRAY
49383: PUSH
49384: LD_VAR 0 3
49388: PLUS
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: EMPTY
49395: LIST
49396: ADD
49397: ST_TO_ADDR
49398: GO 49347
49400: POP
49401: POP
// result = temp_list2 ;
49402: LD_ADDR_VAR 0 7
49406: PUSH
49407: LD_VAR 0 10
49411: ST_TO_ADDR
// end ;
49412: LD_VAR 0 7
49416: RET
// export function EnemyInRange ( unit , dist ) ; begin
49417: LD_INT 0
49419: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49420: LD_ADDR_VAR 0 3
49424: PUSH
49425: LD_VAR 0 1
49429: PPUSH
49430: CALL_OW 255
49434: PPUSH
49435: LD_VAR 0 1
49439: PPUSH
49440: CALL_OW 250
49444: PPUSH
49445: LD_VAR 0 1
49449: PPUSH
49450: CALL_OW 251
49454: PPUSH
49455: LD_VAR 0 2
49459: PPUSH
49460: CALL 22790 0 4
49464: PUSH
49465: LD_INT 4
49467: ARRAY
49468: ST_TO_ADDR
// end ;
49469: LD_VAR 0 3
49473: RET
// export function PlayerSeeMe ( unit ) ; begin
49474: LD_INT 0
49476: PPUSH
// result := See ( your_side , unit ) ;
49477: LD_ADDR_VAR 0 2
49481: PUSH
49482: LD_OWVAR 2
49486: PPUSH
49487: LD_VAR 0 1
49491: PPUSH
49492: CALL_OW 292
49496: ST_TO_ADDR
// end ;
49497: LD_VAR 0 2
49501: RET
// export function ReverseDir ( unit ) ; begin
49502: LD_INT 0
49504: PPUSH
// if not unit then
49505: LD_VAR 0 1
49509: NOT
49510: IFFALSE 49514
// exit ;
49512: GO 49537
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49514: LD_ADDR_VAR 0 2
49518: PUSH
49519: LD_VAR 0 1
49523: PPUSH
49524: CALL_OW 254
49528: PUSH
49529: LD_INT 3
49531: PLUS
49532: PUSH
49533: LD_INT 6
49535: MOD
49536: ST_TO_ADDR
// end ;
49537: LD_VAR 0 2
49541: RET
// export function ReverseArray ( array ) ; var i ; begin
49542: LD_INT 0
49544: PPUSH
49545: PPUSH
// if not array then
49546: LD_VAR 0 1
49550: NOT
49551: IFFALSE 49555
// exit ;
49553: GO 49610
// result := [ ] ;
49555: LD_ADDR_VAR 0 2
49559: PUSH
49560: EMPTY
49561: ST_TO_ADDR
// for i := array downto 1 do
49562: LD_ADDR_VAR 0 3
49566: PUSH
49567: DOUBLE
49568: LD_VAR 0 1
49572: INC
49573: ST_TO_ADDR
49574: LD_INT 1
49576: PUSH
49577: FOR_DOWNTO
49578: IFFALSE 49608
// result := Join ( result , array [ i ] ) ;
49580: LD_ADDR_VAR 0 2
49584: PUSH
49585: LD_VAR 0 2
49589: PPUSH
49590: LD_VAR 0 1
49594: PUSH
49595: LD_VAR 0 3
49599: ARRAY
49600: PPUSH
49601: CALL 54253 0 2
49605: ST_TO_ADDR
49606: GO 49577
49608: POP
49609: POP
// end ;
49610: LD_VAR 0 2
49614: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49615: LD_INT 0
49617: PPUSH
49618: PPUSH
49619: PPUSH
49620: PPUSH
49621: PPUSH
49622: PPUSH
// if not unit or not hexes then
49623: LD_VAR 0 1
49627: NOT
49628: PUSH
49629: LD_VAR 0 2
49633: NOT
49634: OR
49635: IFFALSE 49639
// exit ;
49637: GO 49762
// dist := 9999 ;
49639: LD_ADDR_VAR 0 5
49643: PUSH
49644: LD_INT 9999
49646: ST_TO_ADDR
// for i = 1 to hexes do
49647: LD_ADDR_VAR 0 4
49651: PUSH
49652: DOUBLE
49653: LD_INT 1
49655: DEC
49656: ST_TO_ADDR
49657: LD_VAR 0 2
49661: PUSH
49662: FOR_TO
49663: IFFALSE 49750
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49665: LD_ADDR_VAR 0 6
49669: PUSH
49670: LD_VAR 0 1
49674: PPUSH
49675: LD_VAR 0 2
49679: PUSH
49680: LD_VAR 0 4
49684: ARRAY
49685: PUSH
49686: LD_INT 1
49688: ARRAY
49689: PPUSH
49690: LD_VAR 0 2
49694: PUSH
49695: LD_VAR 0 4
49699: ARRAY
49700: PUSH
49701: LD_INT 2
49703: ARRAY
49704: PPUSH
49705: CALL_OW 297
49709: ST_TO_ADDR
// if tdist < dist then
49710: LD_VAR 0 6
49714: PUSH
49715: LD_VAR 0 5
49719: LESS
49720: IFFALSE 49748
// begin hex := hexes [ i ] ;
49722: LD_ADDR_VAR 0 8
49726: PUSH
49727: LD_VAR 0 2
49731: PUSH
49732: LD_VAR 0 4
49736: ARRAY
49737: ST_TO_ADDR
// dist := tdist ;
49738: LD_ADDR_VAR 0 5
49742: PUSH
49743: LD_VAR 0 6
49747: ST_TO_ADDR
// end ; end ;
49748: GO 49662
49750: POP
49751: POP
// result := hex ;
49752: LD_ADDR_VAR 0 3
49756: PUSH
49757: LD_VAR 0 8
49761: ST_TO_ADDR
// end ;
49762: LD_VAR 0 3
49766: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49767: LD_INT 0
49769: PPUSH
49770: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49771: LD_VAR 0 1
49775: NOT
49776: PUSH
49777: LD_VAR 0 1
49781: PUSH
49782: LD_INT 21
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 23
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PPUSH
49806: CALL_OW 69
49810: IN
49811: NOT
49812: OR
49813: IFFALSE 49817
// exit ;
49815: GO 49864
// for i = 1 to 3 do
49817: LD_ADDR_VAR 0 3
49821: PUSH
49822: DOUBLE
49823: LD_INT 1
49825: DEC
49826: ST_TO_ADDR
49827: LD_INT 3
49829: PUSH
49830: FOR_TO
49831: IFFALSE 49862
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49833: LD_VAR 0 1
49837: PPUSH
49838: CALL_OW 250
49842: PPUSH
49843: LD_VAR 0 1
49847: PPUSH
49848: CALL_OW 251
49852: PPUSH
49853: LD_INT 1
49855: PPUSH
49856: CALL_OW 453
49860: GO 49830
49862: POP
49863: POP
// end ;
49864: LD_VAR 0 2
49868: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49869: LD_INT 0
49871: PPUSH
49872: PPUSH
49873: PPUSH
49874: PPUSH
49875: PPUSH
49876: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49877: LD_VAR 0 1
49881: NOT
49882: PUSH
49883: LD_VAR 0 2
49887: NOT
49888: OR
49889: PUSH
49890: LD_VAR 0 1
49894: PPUSH
49895: CALL_OW 314
49899: OR
49900: IFFALSE 49904
// exit ;
49902: GO 50371
// if GetLives ( i ) < 250 then
49904: LD_VAR 0 4
49908: PPUSH
49909: CALL_OW 256
49913: PUSH
49914: LD_INT 250
49916: LESS
49917: IFFALSE 49930
// begin ComAutodestruct ( i ) ;
49919: LD_VAR 0 4
49923: PPUSH
49924: CALL 49767 0 1
// exit ;
49928: GO 50371
// end ; x := GetX ( enemy_unit ) ;
49930: LD_ADDR_VAR 0 7
49934: PUSH
49935: LD_VAR 0 2
49939: PPUSH
49940: CALL_OW 250
49944: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49945: LD_ADDR_VAR 0 8
49949: PUSH
49950: LD_VAR 0 2
49954: PPUSH
49955: CALL_OW 251
49959: ST_TO_ADDR
// if not x or not y then
49960: LD_VAR 0 7
49964: NOT
49965: PUSH
49966: LD_VAR 0 8
49970: NOT
49971: OR
49972: IFFALSE 49976
// exit ;
49974: GO 50371
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49976: LD_ADDR_VAR 0 6
49980: PUSH
49981: LD_VAR 0 7
49985: PPUSH
49986: LD_INT 0
49988: PPUSH
49989: LD_INT 4
49991: PPUSH
49992: CALL_OW 272
49996: PUSH
49997: LD_VAR 0 8
50001: PPUSH
50002: LD_INT 0
50004: PPUSH
50005: LD_INT 4
50007: PPUSH
50008: CALL_OW 273
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_VAR 0 7
50021: PPUSH
50022: LD_INT 1
50024: PPUSH
50025: LD_INT 4
50027: PPUSH
50028: CALL_OW 272
50032: PUSH
50033: LD_VAR 0 8
50037: PPUSH
50038: LD_INT 1
50040: PPUSH
50041: LD_INT 4
50043: PPUSH
50044: CALL_OW 273
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_VAR 0 7
50057: PPUSH
50058: LD_INT 2
50060: PPUSH
50061: LD_INT 4
50063: PPUSH
50064: CALL_OW 272
50068: PUSH
50069: LD_VAR 0 8
50073: PPUSH
50074: LD_INT 2
50076: PPUSH
50077: LD_INT 4
50079: PPUSH
50080: CALL_OW 273
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_VAR 0 7
50093: PPUSH
50094: LD_INT 3
50096: PPUSH
50097: LD_INT 4
50099: PPUSH
50100: CALL_OW 272
50104: PUSH
50105: LD_VAR 0 8
50109: PPUSH
50110: LD_INT 3
50112: PPUSH
50113: LD_INT 4
50115: PPUSH
50116: CALL_OW 273
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_VAR 0 7
50129: PPUSH
50130: LD_INT 4
50132: PPUSH
50133: LD_INT 4
50135: PPUSH
50136: CALL_OW 272
50140: PUSH
50141: LD_VAR 0 8
50145: PPUSH
50146: LD_INT 4
50148: PPUSH
50149: LD_INT 4
50151: PPUSH
50152: CALL_OW 273
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_VAR 0 7
50165: PPUSH
50166: LD_INT 5
50168: PPUSH
50169: LD_INT 4
50171: PPUSH
50172: CALL_OW 272
50176: PUSH
50177: LD_VAR 0 8
50181: PPUSH
50182: LD_INT 5
50184: PPUSH
50185: LD_INT 4
50187: PPUSH
50188: CALL_OW 273
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// for i = tmp downto 1 do
50205: LD_ADDR_VAR 0 4
50209: PUSH
50210: DOUBLE
50211: LD_VAR 0 6
50215: INC
50216: ST_TO_ADDR
50217: LD_INT 1
50219: PUSH
50220: FOR_DOWNTO
50221: IFFALSE 50322
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50223: LD_VAR 0 6
50227: PUSH
50228: LD_VAR 0 4
50232: ARRAY
50233: PUSH
50234: LD_INT 1
50236: ARRAY
50237: PPUSH
50238: LD_VAR 0 6
50242: PUSH
50243: LD_VAR 0 4
50247: ARRAY
50248: PUSH
50249: LD_INT 2
50251: ARRAY
50252: PPUSH
50253: CALL_OW 488
50257: NOT
50258: PUSH
50259: LD_VAR 0 6
50263: PUSH
50264: LD_VAR 0 4
50268: ARRAY
50269: PUSH
50270: LD_INT 1
50272: ARRAY
50273: PPUSH
50274: LD_VAR 0 6
50278: PUSH
50279: LD_VAR 0 4
50283: ARRAY
50284: PUSH
50285: LD_INT 2
50287: ARRAY
50288: PPUSH
50289: CALL_OW 428
50293: PUSH
50294: LD_INT 0
50296: NONEQUAL
50297: OR
50298: IFFALSE 50320
// tmp := Delete ( tmp , i ) ;
50300: LD_ADDR_VAR 0 6
50304: PUSH
50305: LD_VAR 0 6
50309: PPUSH
50310: LD_VAR 0 4
50314: PPUSH
50315: CALL_OW 3
50319: ST_TO_ADDR
50320: GO 50220
50322: POP
50323: POP
// j := GetClosestHex ( unit , tmp ) ;
50324: LD_ADDR_VAR 0 5
50328: PUSH
50329: LD_VAR 0 1
50333: PPUSH
50334: LD_VAR 0 6
50338: PPUSH
50339: CALL 49615 0 2
50343: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50344: LD_VAR 0 1
50348: PPUSH
50349: LD_VAR 0 5
50353: PUSH
50354: LD_INT 1
50356: ARRAY
50357: PPUSH
50358: LD_VAR 0 5
50362: PUSH
50363: LD_INT 2
50365: ARRAY
50366: PPUSH
50367: CALL_OW 111
// end ;
50371: LD_VAR 0 3
50375: RET
// export function PrepareApemanSoldier ( ) ; begin
50376: LD_INT 0
50378: PPUSH
// uc_nation := 0 ;
50379: LD_ADDR_OWVAR 21
50383: PUSH
50384: LD_INT 0
50386: ST_TO_ADDR
// hc_sex := sex_male ;
50387: LD_ADDR_OWVAR 27
50391: PUSH
50392: LD_INT 1
50394: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50395: LD_ADDR_OWVAR 28
50399: PUSH
50400: LD_INT 15
50402: ST_TO_ADDR
// hc_gallery :=  ;
50403: LD_ADDR_OWVAR 33
50407: PUSH
50408: LD_STRING 
50410: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50411: LD_ADDR_OWVAR 31
50415: PUSH
50416: LD_INT 0
50418: PPUSH
50419: LD_INT 3
50421: PPUSH
50422: CALL_OW 12
50426: PUSH
50427: LD_INT 0
50429: PPUSH
50430: LD_INT 3
50432: PPUSH
50433: CALL_OW 12
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: ST_TO_ADDR
// end ;
50450: LD_VAR 0 1
50454: RET
// export function PrepareApemanEngineer ( ) ; begin
50455: LD_INT 0
50457: PPUSH
// uc_nation := 0 ;
50458: LD_ADDR_OWVAR 21
50462: PUSH
50463: LD_INT 0
50465: ST_TO_ADDR
// hc_sex := sex_male ;
50466: LD_ADDR_OWVAR 27
50470: PUSH
50471: LD_INT 1
50473: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50474: LD_ADDR_OWVAR 28
50478: PUSH
50479: LD_INT 16
50481: ST_TO_ADDR
// hc_gallery :=  ;
50482: LD_ADDR_OWVAR 33
50486: PUSH
50487: LD_STRING 
50489: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50490: LD_ADDR_OWVAR 31
50494: PUSH
50495: LD_INT 0
50497: PPUSH
50498: LD_INT 3
50500: PPUSH
50501: CALL_OW 12
50505: PUSH
50506: LD_INT 0
50508: PPUSH
50509: LD_INT 3
50511: PPUSH
50512: CALL_OW 12
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: ST_TO_ADDR
// end ;
50529: LD_VAR 0 1
50533: RET
// export function PrepareApeman ( agressivity ) ; begin
50534: LD_INT 0
50536: PPUSH
// uc_side := 0 ;
50537: LD_ADDR_OWVAR 20
50541: PUSH
50542: LD_INT 0
50544: ST_TO_ADDR
// uc_nation := 0 ;
50545: LD_ADDR_OWVAR 21
50549: PUSH
50550: LD_INT 0
50552: ST_TO_ADDR
// hc_sex := sex_male ;
50553: LD_ADDR_OWVAR 27
50557: PUSH
50558: LD_INT 1
50560: ST_TO_ADDR
// hc_class := class_apeman ;
50561: LD_ADDR_OWVAR 28
50565: PUSH
50566: LD_INT 12
50568: ST_TO_ADDR
// hc_gallery :=  ;
50569: LD_ADDR_OWVAR 33
50573: PUSH
50574: LD_STRING 
50576: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50577: LD_ADDR_OWVAR 35
50581: PUSH
50582: LD_VAR 0 1
50586: NEG
50587: PPUSH
50588: LD_VAR 0 1
50592: PPUSH
50593: CALL_OW 12
50597: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50598: LD_ADDR_OWVAR 31
50602: PUSH
50603: LD_INT 0
50605: PPUSH
50606: LD_INT 3
50608: PPUSH
50609: CALL_OW 12
50613: PUSH
50614: LD_INT 0
50616: PPUSH
50617: LD_INT 3
50619: PPUSH
50620: CALL_OW 12
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: ST_TO_ADDR
// end ;
50637: LD_VAR 0 2
50641: RET
// export function PrepareTiger ( agressivity ) ; begin
50642: LD_INT 0
50644: PPUSH
// uc_side := 0 ;
50645: LD_ADDR_OWVAR 20
50649: PUSH
50650: LD_INT 0
50652: ST_TO_ADDR
// uc_nation := 0 ;
50653: LD_ADDR_OWVAR 21
50657: PUSH
50658: LD_INT 0
50660: ST_TO_ADDR
// hc_class := class_tiger ;
50661: LD_ADDR_OWVAR 28
50665: PUSH
50666: LD_INT 14
50668: ST_TO_ADDR
// hc_gallery :=  ;
50669: LD_ADDR_OWVAR 33
50673: PUSH
50674: LD_STRING 
50676: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50677: LD_ADDR_OWVAR 35
50681: PUSH
50682: LD_VAR 0 1
50686: NEG
50687: PPUSH
50688: LD_VAR 0 1
50692: PPUSH
50693: CALL_OW 12
50697: ST_TO_ADDR
// end ;
50698: LD_VAR 0 2
50702: RET
// export function PrepareEnchidna ( ) ; begin
50703: LD_INT 0
50705: PPUSH
// uc_side := 0 ;
50706: LD_ADDR_OWVAR 20
50710: PUSH
50711: LD_INT 0
50713: ST_TO_ADDR
// uc_nation := 0 ;
50714: LD_ADDR_OWVAR 21
50718: PUSH
50719: LD_INT 0
50721: ST_TO_ADDR
// hc_class := class_baggie ;
50722: LD_ADDR_OWVAR 28
50726: PUSH
50727: LD_INT 13
50729: ST_TO_ADDR
// hc_gallery :=  ;
50730: LD_ADDR_OWVAR 33
50734: PUSH
50735: LD_STRING 
50737: ST_TO_ADDR
// end ;
50738: LD_VAR 0 1
50742: RET
// export function PrepareFrog ( ) ; begin
50743: LD_INT 0
50745: PPUSH
// uc_side := 0 ;
50746: LD_ADDR_OWVAR 20
50750: PUSH
50751: LD_INT 0
50753: ST_TO_ADDR
// uc_nation := 0 ;
50754: LD_ADDR_OWVAR 21
50758: PUSH
50759: LD_INT 0
50761: ST_TO_ADDR
// hc_class := class_frog ;
50762: LD_ADDR_OWVAR 28
50766: PUSH
50767: LD_INT 19
50769: ST_TO_ADDR
// hc_gallery :=  ;
50770: LD_ADDR_OWVAR 33
50774: PUSH
50775: LD_STRING 
50777: ST_TO_ADDR
// end ;
50778: LD_VAR 0 1
50782: RET
// export function PrepareFish ( ) ; begin
50783: LD_INT 0
50785: PPUSH
// uc_side := 0 ;
50786: LD_ADDR_OWVAR 20
50790: PUSH
50791: LD_INT 0
50793: ST_TO_ADDR
// uc_nation := 0 ;
50794: LD_ADDR_OWVAR 21
50798: PUSH
50799: LD_INT 0
50801: ST_TO_ADDR
// hc_class := class_fish ;
50802: LD_ADDR_OWVAR 28
50806: PUSH
50807: LD_INT 20
50809: ST_TO_ADDR
// hc_gallery :=  ;
50810: LD_ADDR_OWVAR 33
50814: PUSH
50815: LD_STRING 
50817: ST_TO_ADDR
// end ;
50818: LD_VAR 0 1
50822: RET
// export function PrepareBird ( ) ; begin
50823: LD_INT 0
50825: PPUSH
// uc_side := 0 ;
50826: LD_ADDR_OWVAR 20
50830: PUSH
50831: LD_INT 0
50833: ST_TO_ADDR
// uc_nation := 0 ;
50834: LD_ADDR_OWVAR 21
50838: PUSH
50839: LD_INT 0
50841: ST_TO_ADDR
// hc_class := class_phororhacos ;
50842: LD_ADDR_OWVAR 28
50846: PUSH
50847: LD_INT 18
50849: ST_TO_ADDR
// hc_gallery :=  ;
50850: LD_ADDR_OWVAR 33
50854: PUSH
50855: LD_STRING 
50857: ST_TO_ADDR
// end ;
50858: LD_VAR 0 1
50862: RET
// export function PrepareHorse ( ) ; begin
50863: LD_INT 0
50865: PPUSH
// uc_side := 0 ;
50866: LD_ADDR_OWVAR 20
50870: PUSH
50871: LD_INT 0
50873: ST_TO_ADDR
// uc_nation := 0 ;
50874: LD_ADDR_OWVAR 21
50878: PUSH
50879: LD_INT 0
50881: ST_TO_ADDR
// hc_class := class_horse ;
50882: LD_ADDR_OWVAR 28
50886: PUSH
50887: LD_INT 21
50889: ST_TO_ADDR
// hc_gallery :=  ;
50890: LD_ADDR_OWVAR 33
50894: PUSH
50895: LD_STRING 
50897: ST_TO_ADDR
// end ;
50898: LD_VAR 0 1
50902: RET
// export function PrepareMastodont ( ) ; begin
50903: LD_INT 0
50905: PPUSH
// uc_side := 0 ;
50906: LD_ADDR_OWVAR 20
50910: PUSH
50911: LD_INT 0
50913: ST_TO_ADDR
// uc_nation := 0 ;
50914: LD_ADDR_OWVAR 21
50918: PUSH
50919: LD_INT 0
50921: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50922: LD_ADDR_OWVAR 37
50926: PUSH
50927: LD_INT 31
50929: ST_TO_ADDR
// vc_control := control_rider ;
50930: LD_ADDR_OWVAR 38
50934: PUSH
50935: LD_INT 4
50937: ST_TO_ADDR
// end ;
50938: LD_VAR 0 1
50942: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50943: LD_INT 0
50945: PPUSH
50946: PPUSH
50947: PPUSH
// uc_side = 0 ;
50948: LD_ADDR_OWVAR 20
50952: PUSH
50953: LD_INT 0
50955: ST_TO_ADDR
// uc_nation = 0 ;
50956: LD_ADDR_OWVAR 21
50960: PUSH
50961: LD_INT 0
50963: ST_TO_ADDR
// InitHc_All ( ) ;
50964: CALL_OW 584
// InitVc ;
50968: CALL_OW 20
// if mastodonts then
50972: LD_VAR 0 6
50976: IFFALSE 51043
// for i = 1 to mastodonts do
50978: LD_ADDR_VAR 0 11
50982: PUSH
50983: DOUBLE
50984: LD_INT 1
50986: DEC
50987: ST_TO_ADDR
50988: LD_VAR 0 6
50992: PUSH
50993: FOR_TO
50994: IFFALSE 51041
// begin vc_chassis := 31 ;
50996: LD_ADDR_OWVAR 37
51000: PUSH
51001: LD_INT 31
51003: ST_TO_ADDR
// vc_control := control_rider ;
51004: LD_ADDR_OWVAR 38
51008: PUSH
51009: LD_INT 4
51011: ST_TO_ADDR
// animal := CreateVehicle ;
51012: LD_ADDR_VAR 0 12
51016: PUSH
51017: CALL_OW 45
51021: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51022: LD_VAR 0 12
51026: PPUSH
51027: LD_VAR 0 8
51031: PPUSH
51032: LD_INT 0
51034: PPUSH
51035: CALL 53171 0 3
// end ;
51039: GO 50993
51041: POP
51042: POP
// if horses then
51043: LD_VAR 0 5
51047: IFFALSE 51114
// for i = 1 to horses do
51049: LD_ADDR_VAR 0 11
51053: PUSH
51054: DOUBLE
51055: LD_INT 1
51057: DEC
51058: ST_TO_ADDR
51059: LD_VAR 0 5
51063: PUSH
51064: FOR_TO
51065: IFFALSE 51112
// begin hc_class := 21 ;
51067: LD_ADDR_OWVAR 28
51071: PUSH
51072: LD_INT 21
51074: ST_TO_ADDR
// hc_gallery :=  ;
51075: LD_ADDR_OWVAR 33
51079: PUSH
51080: LD_STRING 
51082: ST_TO_ADDR
// animal := CreateHuman ;
51083: LD_ADDR_VAR 0 12
51087: PUSH
51088: CALL_OW 44
51092: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51093: LD_VAR 0 12
51097: PPUSH
51098: LD_VAR 0 8
51102: PPUSH
51103: LD_INT 0
51105: PPUSH
51106: CALL 53171 0 3
// end ;
51110: GO 51064
51112: POP
51113: POP
// if birds then
51114: LD_VAR 0 1
51118: IFFALSE 51185
// for i = 1 to birds do
51120: LD_ADDR_VAR 0 11
51124: PUSH
51125: DOUBLE
51126: LD_INT 1
51128: DEC
51129: ST_TO_ADDR
51130: LD_VAR 0 1
51134: PUSH
51135: FOR_TO
51136: IFFALSE 51183
// begin hc_class := 18 ;
51138: LD_ADDR_OWVAR 28
51142: PUSH
51143: LD_INT 18
51145: ST_TO_ADDR
// hc_gallery =  ;
51146: LD_ADDR_OWVAR 33
51150: PUSH
51151: LD_STRING 
51153: ST_TO_ADDR
// animal := CreateHuman ;
51154: LD_ADDR_VAR 0 12
51158: PUSH
51159: CALL_OW 44
51163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51164: LD_VAR 0 12
51168: PPUSH
51169: LD_VAR 0 8
51173: PPUSH
51174: LD_INT 0
51176: PPUSH
51177: CALL 53171 0 3
// end ;
51181: GO 51135
51183: POP
51184: POP
// if tigers then
51185: LD_VAR 0 2
51189: IFFALSE 51273
// for i = 1 to tigers do
51191: LD_ADDR_VAR 0 11
51195: PUSH
51196: DOUBLE
51197: LD_INT 1
51199: DEC
51200: ST_TO_ADDR
51201: LD_VAR 0 2
51205: PUSH
51206: FOR_TO
51207: IFFALSE 51271
// begin hc_class = class_tiger ;
51209: LD_ADDR_OWVAR 28
51213: PUSH
51214: LD_INT 14
51216: ST_TO_ADDR
// hc_gallery =  ;
51217: LD_ADDR_OWVAR 33
51221: PUSH
51222: LD_STRING 
51224: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51225: LD_ADDR_OWVAR 35
51229: PUSH
51230: LD_INT 7
51232: NEG
51233: PPUSH
51234: LD_INT 7
51236: PPUSH
51237: CALL_OW 12
51241: ST_TO_ADDR
// animal := CreateHuman ;
51242: LD_ADDR_VAR 0 12
51246: PUSH
51247: CALL_OW 44
51251: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51252: LD_VAR 0 12
51256: PPUSH
51257: LD_VAR 0 8
51261: PPUSH
51262: LD_INT 0
51264: PPUSH
51265: CALL 53171 0 3
// end ;
51269: GO 51206
51271: POP
51272: POP
// if apemans then
51273: LD_VAR 0 3
51277: IFFALSE 51400
// for i = 1 to apemans do
51279: LD_ADDR_VAR 0 11
51283: PUSH
51284: DOUBLE
51285: LD_INT 1
51287: DEC
51288: ST_TO_ADDR
51289: LD_VAR 0 3
51293: PUSH
51294: FOR_TO
51295: IFFALSE 51398
// begin hc_class = class_apeman ;
51297: LD_ADDR_OWVAR 28
51301: PUSH
51302: LD_INT 12
51304: ST_TO_ADDR
// hc_gallery =  ;
51305: LD_ADDR_OWVAR 33
51309: PUSH
51310: LD_STRING 
51312: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51313: LD_ADDR_OWVAR 35
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PPUSH
51322: LD_INT 2
51324: PPUSH
51325: CALL_OW 12
51329: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51330: LD_ADDR_OWVAR 31
51334: PUSH
51335: LD_INT 1
51337: PPUSH
51338: LD_INT 3
51340: PPUSH
51341: CALL_OW 12
51345: PUSH
51346: LD_INT 1
51348: PPUSH
51349: LD_INT 3
51351: PPUSH
51352: CALL_OW 12
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: ST_TO_ADDR
// animal := CreateHuman ;
51369: LD_ADDR_VAR 0 12
51373: PUSH
51374: CALL_OW 44
51378: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51379: LD_VAR 0 12
51383: PPUSH
51384: LD_VAR 0 8
51388: PPUSH
51389: LD_INT 0
51391: PPUSH
51392: CALL 53171 0 3
// end ;
51396: GO 51294
51398: POP
51399: POP
// if enchidnas then
51400: LD_VAR 0 4
51404: IFFALSE 51471
// for i = 1 to enchidnas do
51406: LD_ADDR_VAR 0 11
51410: PUSH
51411: DOUBLE
51412: LD_INT 1
51414: DEC
51415: ST_TO_ADDR
51416: LD_VAR 0 4
51420: PUSH
51421: FOR_TO
51422: IFFALSE 51469
// begin hc_class = 13 ;
51424: LD_ADDR_OWVAR 28
51428: PUSH
51429: LD_INT 13
51431: ST_TO_ADDR
// hc_gallery =  ;
51432: LD_ADDR_OWVAR 33
51436: PUSH
51437: LD_STRING 
51439: ST_TO_ADDR
// animal := CreateHuman ;
51440: LD_ADDR_VAR 0 12
51444: PUSH
51445: CALL_OW 44
51449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51450: LD_VAR 0 12
51454: PPUSH
51455: LD_VAR 0 8
51459: PPUSH
51460: LD_INT 0
51462: PPUSH
51463: CALL 53171 0 3
// end ;
51467: GO 51421
51469: POP
51470: POP
// if fishes then
51471: LD_VAR 0 7
51475: IFFALSE 51542
// for i = 1 to fishes do
51477: LD_ADDR_VAR 0 11
51481: PUSH
51482: DOUBLE
51483: LD_INT 1
51485: DEC
51486: ST_TO_ADDR
51487: LD_VAR 0 7
51491: PUSH
51492: FOR_TO
51493: IFFALSE 51540
// begin hc_class = 20 ;
51495: LD_ADDR_OWVAR 28
51499: PUSH
51500: LD_INT 20
51502: ST_TO_ADDR
// hc_gallery =  ;
51503: LD_ADDR_OWVAR 33
51507: PUSH
51508: LD_STRING 
51510: ST_TO_ADDR
// animal := CreateHuman ;
51511: LD_ADDR_VAR 0 12
51515: PUSH
51516: CALL_OW 44
51520: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51521: LD_VAR 0 12
51525: PPUSH
51526: LD_VAR 0 9
51530: PPUSH
51531: LD_INT 0
51533: PPUSH
51534: CALL 53171 0 3
// end ;
51538: GO 51492
51540: POP
51541: POP
// end ;
51542: LD_VAR 0 10
51546: RET
// export function WantHeal ( sci , unit ) ; begin
51547: LD_INT 0
51549: PPUSH
// if GetTaskList ( sci ) > 0 then
51550: LD_VAR 0 1
51554: PPUSH
51555: CALL_OW 437
51559: PUSH
51560: LD_INT 0
51562: GREATER
51563: IFFALSE 51633
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51565: LD_VAR 0 1
51569: PPUSH
51570: CALL_OW 437
51574: PUSH
51575: LD_INT 1
51577: ARRAY
51578: PUSH
51579: LD_INT 1
51581: ARRAY
51582: PUSH
51583: LD_STRING l
51585: EQUAL
51586: PUSH
51587: LD_VAR 0 1
51591: PPUSH
51592: CALL_OW 437
51596: PUSH
51597: LD_INT 1
51599: ARRAY
51600: PUSH
51601: LD_INT 4
51603: ARRAY
51604: PUSH
51605: LD_VAR 0 2
51609: EQUAL
51610: AND
51611: IFFALSE 51623
// result := true else
51613: LD_ADDR_VAR 0 3
51617: PUSH
51618: LD_INT 1
51620: ST_TO_ADDR
51621: GO 51631
// result := false ;
51623: LD_ADDR_VAR 0 3
51627: PUSH
51628: LD_INT 0
51630: ST_TO_ADDR
// end else
51631: GO 51641
// result := false ;
51633: LD_ADDR_VAR 0 3
51637: PUSH
51638: LD_INT 0
51640: ST_TO_ADDR
// end ;
51641: LD_VAR 0 3
51645: RET
// export function HealTarget ( sci ) ; begin
51646: LD_INT 0
51648: PPUSH
// if not sci then
51649: LD_VAR 0 1
51653: NOT
51654: IFFALSE 51658
// exit ;
51656: GO 51723
// result := 0 ;
51658: LD_ADDR_VAR 0 2
51662: PUSH
51663: LD_INT 0
51665: ST_TO_ADDR
// if GetTaskList ( sci ) then
51666: LD_VAR 0 1
51670: PPUSH
51671: CALL_OW 437
51675: IFFALSE 51723
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51677: LD_VAR 0 1
51681: PPUSH
51682: CALL_OW 437
51686: PUSH
51687: LD_INT 1
51689: ARRAY
51690: PUSH
51691: LD_INT 1
51693: ARRAY
51694: PUSH
51695: LD_STRING l
51697: EQUAL
51698: IFFALSE 51723
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51700: LD_ADDR_VAR 0 2
51704: PUSH
51705: LD_VAR 0 1
51709: PPUSH
51710: CALL_OW 437
51714: PUSH
51715: LD_INT 1
51717: ARRAY
51718: PUSH
51719: LD_INT 4
51721: ARRAY
51722: ST_TO_ADDR
// end ;
51723: LD_VAR 0 2
51727: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51728: LD_INT 0
51730: PPUSH
51731: PPUSH
51732: PPUSH
51733: PPUSH
// if not base_units then
51734: LD_VAR 0 1
51738: NOT
51739: IFFALSE 51743
// exit ;
51741: GO 51830
// result := false ;
51743: LD_ADDR_VAR 0 2
51747: PUSH
51748: LD_INT 0
51750: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51751: LD_ADDR_VAR 0 5
51755: PUSH
51756: LD_VAR 0 1
51760: PPUSH
51761: LD_INT 21
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PPUSH
51771: CALL_OW 72
51775: ST_TO_ADDR
// if not tmp then
51776: LD_VAR 0 5
51780: NOT
51781: IFFALSE 51785
// exit ;
51783: GO 51830
// for i in tmp do
51785: LD_ADDR_VAR 0 3
51789: PUSH
51790: LD_VAR 0 5
51794: PUSH
51795: FOR_IN
51796: IFFALSE 51828
// begin result := EnemyInRange ( i , 22 ) ;
51798: LD_ADDR_VAR 0 2
51802: PUSH
51803: LD_VAR 0 3
51807: PPUSH
51808: LD_INT 22
51810: PPUSH
51811: CALL 49417 0 2
51815: ST_TO_ADDR
// if result then
51816: LD_VAR 0 2
51820: IFFALSE 51826
// exit ;
51822: POP
51823: POP
51824: GO 51830
// end ;
51826: GO 51795
51828: POP
51829: POP
// end ;
51830: LD_VAR 0 2
51834: RET
// export function FilterByTag ( units , tag ) ; begin
51835: LD_INT 0
51837: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51838: LD_ADDR_VAR 0 3
51842: PUSH
51843: LD_VAR 0 1
51847: PPUSH
51848: LD_INT 120
51850: PUSH
51851: LD_VAR 0 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PPUSH
51860: CALL_OW 72
51864: ST_TO_ADDR
// end ;
51865: LD_VAR 0 3
51869: RET
// export function IsDriver ( un ) ; begin
51870: LD_INT 0
51872: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51873: LD_ADDR_VAR 0 2
51877: PUSH
51878: LD_VAR 0 1
51882: PUSH
51883: LD_INT 55
51885: PUSH
51886: EMPTY
51887: LIST
51888: PPUSH
51889: CALL_OW 69
51893: IN
51894: ST_TO_ADDR
// end ;
51895: LD_VAR 0 2
51899: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51900: LD_INT 0
51902: PPUSH
51903: PPUSH
// list := [ ] ;
51904: LD_ADDR_VAR 0 5
51908: PUSH
51909: EMPTY
51910: ST_TO_ADDR
// case d of 0 :
51911: LD_VAR 0 3
51915: PUSH
51916: LD_INT 0
51918: DOUBLE
51919: EQUAL
51920: IFTRUE 51924
51922: GO 52057
51924: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51925: LD_ADDR_VAR 0 5
51929: PUSH
51930: LD_VAR 0 1
51934: PUSH
51935: LD_INT 4
51937: MINUS
51938: PUSH
51939: LD_VAR 0 2
51943: PUSH
51944: LD_INT 4
51946: MINUS
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: LIST
51955: PUSH
51956: LD_VAR 0 1
51960: PUSH
51961: LD_INT 3
51963: MINUS
51964: PUSH
51965: LD_VAR 0 2
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: LIST
51977: PUSH
51978: LD_VAR 0 1
51982: PUSH
51983: LD_INT 4
51985: PLUS
51986: PUSH
51987: LD_VAR 0 2
51991: PUSH
51992: LD_INT 4
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: LIST
51999: PUSH
52000: LD_VAR 0 1
52004: PUSH
52005: LD_INT 3
52007: PLUS
52008: PUSH
52009: LD_VAR 0 2
52013: PUSH
52014: LD_INT 3
52016: PLUS
52017: PUSH
52018: LD_INT 5
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: LIST
52025: PUSH
52026: LD_VAR 0 1
52030: PUSH
52031: LD_VAR 0 2
52035: PUSH
52036: LD_INT 4
52038: PLUS
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: ST_TO_ADDR
// end ; 1 :
52055: GO 52755
52057: LD_INT 1
52059: DOUBLE
52060: EQUAL
52061: IFTRUE 52065
52063: GO 52198
52065: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52066: LD_ADDR_VAR 0 5
52070: PUSH
52071: LD_VAR 0 1
52075: PUSH
52076: LD_VAR 0 2
52080: PUSH
52081: LD_INT 4
52083: MINUS
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: PUSH
52093: LD_VAR 0 1
52097: PUSH
52098: LD_INT 3
52100: MINUS
52101: PUSH
52102: LD_VAR 0 2
52106: PUSH
52107: LD_INT 3
52109: MINUS
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: LIST
52118: PUSH
52119: LD_VAR 0 1
52123: PUSH
52124: LD_INT 4
52126: MINUS
52127: PUSH
52128: LD_VAR 0 2
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: LIST
52140: PUSH
52141: LD_VAR 0 1
52145: PUSH
52146: LD_VAR 0 2
52150: PUSH
52151: LD_INT 3
52153: PLUS
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: PUSH
52163: LD_VAR 0 1
52167: PUSH
52168: LD_INT 4
52170: PLUS
52171: PUSH
52172: LD_VAR 0 2
52176: PUSH
52177: LD_INT 4
52179: PLUS
52180: PUSH
52181: LD_INT 5
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: ST_TO_ADDR
// end ; 2 :
52196: GO 52755
52198: LD_INT 2
52200: DOUBLE
52201: EQUAL
52202: IFTRUE 52206
52204: GO 52335
52206: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52207: LD_ADDR_VAR 0 5
52211: PUSH
52212: LD_VAR 0 1
52216: PUSH
52217: LD_VAR 0 2
52221: PUSH
52222: LD_INT 3
52224: MINUS
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: LIST
52233: PUSH
52234: LD_VAR 0 1
52238: PUSH
52239: LD_INT 4
52241: PLUS
52242: PUSH
52243: LD_VAR 0 2
52247: PUSH
52248: LD_INT 4
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: LIST
52255: PUSH
52256: LD_VAR 0 1
52260: PUSH
52261: LD_VAR 0 2
52265: PUSH
52266: LD_INT 4
52268: PLUS
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: PUSH
52278: LD_VAR 0 1
52282: PUSH
52283: LD_INT 3
52285: MINUS
52286: PUSH
52287: LD_VAR 0 2
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: LIST
52299: PUSH
52300: LD_VAR 0 1
52304: PUSH
52305: LD_INT 4
52307: MINUS
52308: PUSH
52309: LD_VAR 0 2
52313: PUSH
52314: LD_INT 4
52316: MINUS
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: LIST
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// end ; 3 :
52333: GO 52755
52335: LD_INT 3
52337: DOUBLE
52338: EQUAL
52339: IFTRUE 52343
52341: GO 52476
52343: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52344: LD_ADDR_VAR 0 5
52348: PUSH
52349: LD_VAR 0 1
52353: PUSH
52354: LD_INT 3
52356: PLUS
52357: PUSH
52358: LD_VAR 0 2
52362: PUSH
52363: LD_INT 4
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: LIST
52370: PUSH
52371: LD_VAR 0 1
52375: PUSH
52376: LD_INT 4
52378: PLUS
52379: PUSH
52380: LD_VAR 0 2
52384: PUSH
52385: LD_INT 4
52387: PLUS
52388: PUSH
52389: LD_INT 5
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: PUSH
52397: LD_VAR 0 1
52401: PUSH
52402: LD_INT 4
52404: MINUS
52405: PUSH
52406: LD_VAR 0 2
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: LIST
52418: PUSH
52419: LD_VAR 0 1
52423: PUSH
52424: LD_VAR 0 2
52428: PUSH
52429: LD_INT 4
52431: MINUS
52432: PUSH
52433: LD_INT 3
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: PUSH
52441: LD_VAR 0 1
52445: PUSH
52446: LD_INT 3
52448: MINUS
52449: PUSH
52450: LD_VAR 0 2
52454: PUSH
52455: LD_INT 3
52457: MINUS
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: ST_TO_ADDR
// end ; 4 :
52474: GO 52755
52476: LD_INT 4
52478: DOUBLE
52479: EQUAL
52480: IFTRUE 52484
52482: GO 52617
52484: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52485: LD_ADDR_VAR 0 5
52489: PUSH
52490: LD_VAR 0 1
52494: PUSH
52495: LD_VAR 0 2
52499: PUSH
52500: LD_INT 4
52502: PLUS
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: LIST
52511: PUSH
52512: LD_VAR 0 1
52516: PUSH
52517: LD_INT 3
52519: PLUS
52520: PUSH
52521: LD_VAR 0 2
52525: PUSH
52526: LD_INT 3
52528: PLUS
52529: PUSH
52530: LD_INT 5
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: LIST
52537: PUSH
52538: LD_VAR 0 1
52542: PUSH
52543: LD_INT 4
52545: PLUS
52546: PUSH
52547: LD_VAR 0 2
52551: PUSH
52552: LD_INT 4
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: LIST
52559: PUSH
52560: LD_VAR 0 1
52564: PUSH
52565: LD_VAR 0 2
52569: PUSH
52570: LD_INT 3
52572: MINUS
52573: PUSH
52574: LD_INT 3
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: PUSH
52582: LD_VAR 0 1
52586: PUSH
52587: LD_INT 4
52589: MINUS
52590: PUSH
52591: LD_VAR 0 2
52595: PUSH
52596: LD_INT 4
52598: MINUS
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: LIST
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: ST_TO_ADDR
// end ; 5 :
52615: GO 52755
52617: LD_INT 5
52619: DOUBLE
52620: EQUAL
52621: IFTRUE 52625
52623: GO 52754
52625: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52626: LD_ADDR_VAR 0 5
52630: PUSH
52631: LD_VAR 0 1
52635: PUSH
52636: LD_INT 4
52638: MINUS
52639: PUSH
52640: LD_VAR 0 2
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: PUSH
52653: LD_VAR 0 1
52657: PUSH
52658: LD_VAR 0 2
52662: PUSH
52663: LD_INT 4
52665: MINUS
52666: PUSH
52667: LD_INT 3
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: PUSH
52675: LD_VAR 0 1
52679: PUSH
52680: LD_INT 4
52682: PLUS
52683: PUSH
52684: LD_VAR 0 2
52688: PUSH
52689: LD_INT 4
52691: PLUS
52692: PUSH
52693: LD_INT 5
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: PUSH
52701: LD_VAR 0 1
52705: PUSH
52706: LD_INT 3
52708: PLUS
52709: PUSH
52710: LD_VAR 0 2
52714: PUSH
52715: LD_INT 4
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: LIST
52722: PUSH
52723: LD_VAR 0 1
52727: PUSH
52728: LD_VAR 0 2
52732: PUSH
52733: LD_INT 3
52735: PLUS
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: ST_TO_ADDR
// end ; end ;
52752: GO 52755
52754: POP
// result := list ;
52755: LD_ADDR_VAR 0 4
52759: PUSH
52760: LD_VAR 0 5
52764: ST_TO_ADDR
// end ;
52765: LD_VAR 0 4
52769: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52770: LD_INT 0
52772: PPUSH
52773: PPUSH
52774: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52775: LD_VAR 0 1
52779: NOT
52780: PUSH
52781: LD_VAR 0 2
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: LD_INT 3
52794: PUSH
52795: LD_INT 4
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: IN
52804: NOT
52805: OR
52806: IFFALSE 52810
// exit ;
52808: GO 52893
// tmp := [ ] ;
52810: LD_ADDR_VAR 0 5
52814: PUSH
52815: EMPTY
52816: ST_TO_ADDR
// for i in units do
52817: LD_ADDR_VAR 0 4
52821: PUSH
52822: LD_VAR 0 1
52826: PUSH
52827: FOR_IN
52828: IFFALSE 52862
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52830: LD_ADDR_VAR 0 5
52834: PUSH
52835: LD_VAR 0 5
52839: PPUSH
52840: LD_VAR 0 4
52844: PPUSH
52845: LD_VAR 0 2
52849: PPUSH
52850: CALL_OW 259
52854: PPUSH
52855: CALL 54253 0 2
52859: ST_TO_ADDR
52860: GO 52827
52862: POP
52863: POP
// if not tmp then
52864: LD_VAR 0 5
52868: NOT
52869: IFFALSE 52873
// exit ;
52871: GO 52893
// result := SortListByListDesc ( units , tmp ) ;
52873: LD_ADDR_VAR 0 3
52877: PUSH
52878: LD_VAR 0 1
52882: PPUSH
52883: LD_VAR 0 5
52887: PPUSH
52888: CALL_OW 77
52892: ST_TO_ADDR
// end ;
52893: LD_VAR 0 3
52897: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52898: LD_INT 0
52900: PPUSH
52901: PPUSH
52902: PPUSH
// result := false ;
52903: LD_ADDR_VAR 0 3
52907: PUSH
52908: LD_INT 0
52910: ST_TO_ADDR
// if not building then
52911: LD_VAR 0 2
52915: NOT
52916: IFFALSE 52920
// exit ;
52918: GO 53058
// x := GetX ( building ) ;
52920: LD_ADDR_VAR 0 4
52924: PUSH
52925: LD_VAR 0 2
52929: PPUSH
52930: CALL_OW 250
52934: ST_TO_ADDR
// y := GetY ( building ) ;
52935: LD_ADDR_VAR 0 5
52939: PUSH
52940: LD_VAR 0 2
52944: PPUSH
52945: CALL_OW 251
52949: ST_TO_ADDR
// if not x or not y then
52950: LD_VAR 0 4
52954: NOT
52955: PUSH
52956: LD_VAR 0 5
52960: NOT
52961: OR
52962: IFFALSE 52966
// exit ;
52964: GO 53058
// if GetTaskList ( unit ) then
52966: LD_VAR 0 1
52970: PPUSH
52971: CALL_OW 437
52975: IFFALSE 53058
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52977: LD_STRING e
52979: PUSH
52980: LD_VAR 0 1
52984: PPUSH
52985: CALL_OW 437
52989: PUSH
52990: LD_INT 1
52992: ARRAY
52993: PUSH
52994: LD_INT 1
52996: ARRAY
52997: EQUAL
52998: PUSH
52999: LD_VAR 0 4
53003: PUSH
53004: LD_VAR 0 1
53008: PPUSH
53009: CALL_OW 437
53013: PUSH
53014: LD_INT 1
53016: ARRAY
53017: PUSH
53018: LD_INT 2
53020: ARRAY
53021: EQUAL
53022: AND
53023: PUSH
53024: LD_VAR 0 5
53028: PUSH
53029: LD_VAR 0 1
53033: PPUSH
53034: CALL_OW 437
53038: PUSH
53039: LD_INT 1
53041: ARRAY
53042: PUSH
53043: LD_INT 3
53045: ARRAY
53046: EQUAL
53047: AND
53048: IFFALSE 53058
// result := true end ;
53050: LD_ADDR_VAR 0 3
53054: PUSH
53055: LD_INT 1
53057: ST_TO_ADDR
// end ;
53058: LD_VAR 0 3
53062: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53063: LD_INT 0
53065: PPUSH
// result := false ;
53066: LD_ADDR_VAR 0 4
53070: PUSH
53071: LD_INT 0
53073: ST_TO_ADDR
// if GetTaskList ( unit ) then
53074: LD_VAR 0 1
53078: PPUSH
53079: CALL_OW 437
53083: IFFALSE 53166
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53085: LD_STRING M
53087: PUSH
53088: LD_VAR 0 1
53092: PPUSH
53093: CALL_OW 437
53097: PUSH
53098: LD_INT 1
53100: ARRAY
53101: PUSH
53102: LD_INT 1
53104: ARRAY
53105: EQUAL
53106: PUSH
53107: LD_VAR 0 2
53111: PUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: CALL_OW 437
53121: PUSH
53122: LD_INT 1
53124: ARRAY
53125: PUSH
53126: LD_INT 2
53128: ARRAY
53129: EQUAL
53130: AND
53131: PUSH
53132: LD_VAR 0 3
53136: PUSH
53137: LD_VAR 0 1
53141: PPUSH
53142: CALL_OW 437
53146: PUSH
53147: LD_INT 1
53149: ARRAY
53150: PUSH
53151: LD_INT 3
53153: ARRAY
53154: EQUAL
53155: AND
53156: IFFALSE 53166
// result := true ;
53158: LD_ADDR_VAR 0 4
53162: PUSH
53163: LD_INT 1
53165: ST_TO_ADDR
// end ; end ;
53166: LD_VAR 0 4
53170: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53171: LD_INT 0
53173: PPUSH
53174: PPUSH
53175: PPUSH
53176: PPUSH
// if not unit or not area then
53177: LD_VAR 0 1
53181: NOT
53182: PUSH
53183: LD_VAR 0 2
53187: NOT
53188: OR
53189: IFFALSE 53193
// exit ;
53191: GO 53356
// tmp := AreaToList ( area , i ) ;
53193: LD_ADDR_VAR 0 6
53197: PUSH
53198: LD_VAR 0 2
53202: PPUSH
53203: LD_VAR 0 5
53207: PPUSH
53208: CALL_OW 517
53212: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53213: LD_ADDR_VAR 0 5
53217: PUSH
53218: DOUBLE
53219: LD_INT 1
53221: DEC
53222: ST_TO_ADDR
53223: LD_VAR 0 6
53227: PUSH
53228: LD_INT 1
53230: ARRAY
53231: PUSH
53232: FOR_TO
53233: IFFALSE 53354
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53235: LD_ADDR_VAR 0 7
53239: PUSH
53240: LD_VAR 0 6
53244: PUSH
53245: LD_INT 1
53247: ARRAY
53248: PUSH
53249: LD_VAR 0 5
53253: ARRAY
53254: PUSH
53255: LD_VAR 0 6
53259: PUSH
53260: LD_INT 2
53262: ARRAY
53263: PUSH
53264: LD_VAR 0 5
53268: ARRAY
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
53274: LD_INT 92
53276: PUSH
53277: LD_VAR 0 7
53281: PUSH
53282: LD_INT 1
53284: ARRAY
53285: PUSH
53286: LD_VAR 0 7
53290: PUSH
53291: LD_INT 2
53293: ARRAY
53294: PUSH
53295: LD_INT 3
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: PPUSH
53304: CALL_OW 69
53308: PUSH
53309: LD_INT 0
53311: EQUAL
53312: IFFALSE 53352
// begin PlaceUnitArea ( unit , area , mode ) ;
53314: LD_VAR 0 1
53318: PPUSH
53319: LD_VAR 0 2
53323: PPUSH
53324: LD_VAR 0 3
53328: PPUSH
53329: CALL_OW 49
// result := IsPlaced ( unit ) ;
53333: LD_ADDR_VAR 0 4
53337: PUSH
53338: LD_VAR 0 1
53342: PPUSH
53343: CALL_OW 305
53347: ST_TO_ADDR
// exit ;
53348: POP
53349: POP
53350: GO 53356
// end ; end ;
53352: GO 53232
53354: POP
53355: POP
// end ;
53356: LD_VAR 0 4
53360: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53361: LD_INT 0
53363: PPUSH
53364: PPUSH
53365: PPUSH
// if not side or side > 8 then
53366: LD_VAR 0 1
53370: NOT
53371: PUSH
53372: LD_VAR 0 1
53376: PUSH
53377: LD_INT 8
53379: GREATER
53380: OR
53381: IFFALSE 53385
// exit ;
53383: GO 53572
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53385: LD_ADDR_VAR 0 4
53389: PUSH
53390: LD_INT 22
53392: PUSH
53393: LD_VAR 0 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 21
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PPUSH
53416: CALL_OW 69
53420: ST_TO_ADDR
// if not tmp then
53421: LD_VAR 0 4
53425: NOT
53426: IFFALSE 53430
// exit ;
53428: GO 53572
// enable_addtolog := true ;
53430: LD_ADDR_OWVAR 81
53434: PUSH
53435: LD_INT 1
53437: ST_TO_ADDR
// AddToLog ( [ ) ;
53438: LD_STRING [
53440: PPUSH
53441: CALL_OW 561
// for i in tmp do
53445: LD_ADDR_VAR 0 3
53449: PUSH
53450: LD_VAR 0 4
53454: PUSH
53455: FOR_IN
53456: IFFALSE 53563
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53458: LD_STRING [
53460: PUSH
53461: LD_VAR 0 3
53465: PPUSH
53466: CALL_OW 266
53470: STR
53471: PUSH
53472: LD_STRING , 
53474: STR
53475: PUSH
53476: LD_VAR 0 3
53480: PPUSH
53481: CALL_OW 250
53485: STR
53486: PUSH
53487: LD_STRING , 
53489: STR
53490: PUSH
53491: LD_VAR 0 3
53495: PPUSH
53496: CALL_OW 251
53500: STR
53501: PUSH
53502: LD_STRING , 
53504: STR
53505: PUSH
53506: LD_VAR 0 3
53510: PPUSH
53511: CALL_OW 254
53515: STR
53516: PUSH
53517: LD_STRING , 
53519: STR
53520: PUSH
53521: LD_VAR 0 3
53525: PPUSH
53526: LD_INT 1
53528: PPUSH
53529: CALL_OW 268
53533: STR
53534: PUSH
53535: LD_STRING , 
53537: STR
53538: PUSH
53539: LD_VAR 0 3
53543: PPUSH
53544: LD_INT 2
53546: PPUSH
53547: CALL_OW 268
53551: STR
53552: PUSH
53553: LD_STRING ],
53555: STR
53556: PPUSH
53557: CALL_OW 561
// end ;
53561: GO 53455
53563: POP
53564: POP
// AddToLog ( ]; ) ;
53565: LD_STRING ];
53567: PPUSH
53568: CALL_OW 561
// end ;
53572: LD_VAR 0 2
53576: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53577: LD_INT 0
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
53583: PPUSH
// if not area or not rate or not max then
53584: LD_VAR 0 1
53588: NOT
53589: PUSH
53590: LD_VAR 0 2
53594: NOT
53595: OR
53596: PUSH
53597: LD_VAR 0 4
53601: NOT
53602: OR
53603: IFFALSE 53607
// exit ;
53605: GO 53796
// while 1 do
53607: LD_INT 1
53609: IFFALSE 53796
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53611: LD_ADDR_VAR 0 9
53615: PUSH
53616: LD_VAR 0 1
53620: PPUSH
53621: LD_INT 1
53623: PPUSH
53624: CALL_OW 287
53628: PUSH
53629: LD_INT 10
53631: MUL
53632: ST_TO_ADDR
// r := rate / 10 ;
53633: LD_ADDR_VAR 0 7
53637: PUSH
53638: LD_VAR 0 2
53642: PUSH
53643: LD_INT 10
53645: DIVREAL
53646: ST_TO_ADDR
// time := 1 1$00 ;
53647: LD_ADDR_VAR 0 8
53651: PUSH
53652: LD_INT 2100
53654: ST_TO_ADDR
// if amount < min then
53655: LD_VAR 0 9
53659: PUSH
53660: LD_VAR 0 3
53664: LESS
53665: IFFALSE 53683
// r := r * 2 else
53667: LD_ADDR_VAR 0 7
53671: PUSH
53672: LD_VAR 0 7
53676: PUSH
53677: LD_INT 2
53679: MUL
53680: ST_TO_ADDR
53681: GO 53709
// if amount > max then
53683: LD_VAR 0 9
53687: PUSH
53688: LD_VAR 0 4
53692: GREATER
53693: IFFALSE 53709
// r := r / 2 ;
53695: LD_ADDR_VAR 0 7
53699: PUSH
53700: LD_VAR 0 7
53704: PUSH
53705: LD_INT 2
53707: DIVREAL
53708: ST_TO_ADDR
// time := time / r ;
53709: LD_ADDR_VAR 0 8
53713: PUSH
53714: LD_VAR 0 8
53718: PUSH
53719: LD_VAR 0 7
53723: DIVREAL
53724: ST_TO_ADDR
// if time < 0 then
53725: LD_VAR 0 8
53729: PUSH
53730: LD_INT 0
53732: LESS
53733: IFFALSE 53750
// time := time * - 1 ;
53735: LD_ADDR_VAR 0 8
53739: PUSH
53740: LD_VAR 0 8
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: MUL
53749: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53750: LD_VAR 0 8
53754: PUSH
53755: LD_INT 35
53757: PPUSH
53758: LD_INT 875
53760: PPUSH
53761: CALL_OW 12
53765: PLUS
53766: PPUSH
53767: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53771: LD_INT 1
53773: PPUSH
53774: LD_INT 5
53776: PPUSH
53777: CALL_OW 12
53781: PPUSH
53782: LD_VAR 0 1
53786: PPUSH
53787: LD_INT 1
53789: PPUSH
53790: CALL_OW 55
// end ;
53794: GO 53607
// end ;
53796: LD_VAR 0 5
53800: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53801: LD_INT 0
53803: PPUSH
53804: PPUSH
53805: PPUSH
53806: PPUSH
53807: PPUSH
53808: PPUSH
53809: PPUSH
53810: PPUSH
// if not turrets or not factories then
53811: LD_VAR 0 1
53815: NOT
53816: PUSH
53817: LD_VAR 0 2
53821: NOT
53822: OR
53823: IFFALSE 53827
// exit ;
53825: GO 54134
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53827: LD_ADDR_VAR 0 10
53831: PUSH
53832: LD_INT 5
53834: PUSH
53835: LD_INT 6
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: LD_INT 4
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: LD_INT 5
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 24
53869: PUSH
53870: LD_INT 25
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 23
53879: PUSH
53880: LD_INT 27
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 42
53893: PUSH
53894: LD_INT 43
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 44
53903: PUSH
53904: LD_INT 46
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 45
53913: PUSH
53914: LD_INT 47
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: ST_TO_ADDR
// result := [ ] ;
53931: LD_ADDR_VAR 0 3
53935: PUSH
53936: EMPTY
53937: ST_TO_ADDR
// for i in turrets do
53938: LD_ADDR_VAR 0 4
53942: PUSH
53943: LD_VAR 0 1
53947: PUSH
53948: FOR_IN
53949: IFFALSE 54132
// begin nat := GetNation ( i ) ;
53951: LD_ADDR_VAR 0 7
53955: PUSH
53956: LD_VAR 0 4
53960: PPUSH
53961: CALL_OW 248
53965: ST_TO_ADDR
// weapon := 0 ;
53966: LD_ADDR_VAR 0 8
53970: PUSH
53971: LD_INT 0
53973: ST_TO_ADDR
// if not nat then
53974: LD_VAR 0 7
53978: NOT
53979: IFFALSE 53983
// continue ;
53981: GO 53948
// for j in list [ nat ] do
53983: LD_ADDR_VAR 0 5
53987: PUSH
53988: LD_VAR 0 10
53992: PUSH
53993: LD_VAR 0 7
53997: ARRAY
53998: PUSH
53999: FOR_IN
54000: IFFALSE 54041
// if GetBWeapon ( i ) = j [ 1 ] then
54002: LD_VAR 0 4
54006: PPUSH
54007: CALL_OW 269
54011: PUSH
54012: LD_VAR 0 5
54016: PUSH
54017: LD_INT 1
54019: ARRAY
54020: EQUAL
54021: IFFALSE 54039
// begin weapon := j [ 2 ] ;
54023: LD_ADDR_VAR 0 8
54027: PUSH
54028: LD_VAR 0 5
54032: PUSH
54033: LD_INT 2
54035: ARRAY
54036: ST_TO_ADDR
// break ;
54037: GO 54041
// end ;
54039: GO 53999
54041: POP
54042: POP
// if not weapon then
54043: LD_VAR 0 8
54047: NOT
54048: IFFALSE 54052
// continue ;
54050: GO 53948
// for k in factories do
54052: LD_ADDR_VAR 0 6
54056: PUSH
54057: LD_VAR 0 2
54061: PUSH
54062: FOR_IN
54063: IFFALSE 54128
// begin weapons := AvailableWeaponList ( k ) ;
54065: LD_ADDR_VAR 0 9
54069: PUSH
54070: LD_VAR 0 6
54074: PPUSH
54075: CALL_OW 478
54079: ST_TO_ADDR
// if not weapons then
54080: LD_VAR 0 9
54084: NOT
54085: IFFALSE 54089
// continue ;
54087: GO 54062
// if weapon in weapons then
54089: LD_VAR 0 8
54093: PUSH
54094: LD_VAR 0 9
54098: IN
54099: IFFALSE 54126
// begin result := [ i , weapon ] ;
54101: LD_ADDR_VAR 0 3
54105: PUSH
54106: LD_VAR 0 4
54110: PUSH
54111: LD_VAR 0 8
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// exit ;
54120: POP
54121: POP
54122: POP
54123: POP
54124: GO 54134
// end ; end ;
54126: GO 54062
54128: POP
54129: POP
// end ;
54130: GO 53948
54132: POP
54133: POP
// end ;
54134: LD_VAR 0 3
54138: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54139: LD_INT 0
54141: PPUSH
// if not side or side > 8 then
54142: LD_VAR 0 3
54146: NOT
54147: PUSH
54148: LD_VAR 0 3
54152: PUSH
54153: LD_INT 8
54155: GREATER
54156: OR
54157: IFFALSE 54161
// exit ;
54159: GO 54220
// if not range then
54161: LD_VAR 0 4
54165: NOT
54166: IFFALSE 54177
// range := - 12 ;
54168: LD_ADDR_VAR 0 4
54172: PUSH
54173: LD_INT 12
54175: NEG
54176: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54177: LD_VAR 0 1
54181: PPUSH
54182: LD_VAR 0 2
54186: PPUSH
54187: LD_VAR 0 3
54191: PPUSH
54192: LD_VAR 0 4
54196: PPUSH
54197: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54201: LD_VAR 0 1
54205: PPUSH
54206: LD_VAR 0 2
54210: PPUSH
54211: LD_VAR 0 3
54215: PPUSH
54216: CALL_OW 331
// end ;
54220: LD_VAR 0 5
54224: RET
// export function Video ( mode ) ; begin
54225: LD_INT 0
54227: PPUSH
// ingame_video = mode ;
54228: LD_ADDR_OWVAR 52
54232: PUSH
54233: LD_VAR 0 1
54237: ST_TO_ADDR
// interface_hidden = mode ;
54238: LD_ADDR_OWVAR 54
54242: PUSH
54243: LD_VAR 0 1
54247: ST_TO_ADDR
// end ;
54248: LD_VAR 0 2
54252: RET
// export function Join ( array , element ) ; begin
54253: LD_INT 0
54255: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54256: LD_ADDR_VAR 0 3
54260: PUSH
54261: LD_VAR 0 1
54265: PPUSH
54266: LD_VAR 0 1
54270: PUSH
54271: LD_INT 1
54273: PLUS
54274: PPUSH
54275: LD_VAR 0 2
54279: PPUSH
54280: CALL_OW 1
54284: ST_TO_ADDR
// end ;
54285: LD_VAR 0 3
54289: RET
// export function JoinUnion ( array , element ) ; begin
54290: LD_INT 0
54292: PPUSH
// result := array union element ;
54293: LD_ADDR_VAR 0 3
54297: PUSH
54298: LD_VAR 0 1
54302: PUSH
54303: LD_VAR 0 2
54307: UNION
54308: ST_TO_ADDR
// end ;
54309: LD_VAR 0 3
54313: RET
// export function GetBehemoths ( side ) ; begin
54314: LD_INT 0
54316: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54317: LD_ADDR_VAR 0 2
54321: PUSH
54322: LD_INT 22
54324: PUSH
54325: LD_VAR 0 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 31
54336: PUSH
54337: LD_INT 25
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PPUSH
54348: CALL_OW 69
54352: ST_TO_ADDR
// end ;
54353: LD_VAR 0 2
54357: RET
// export function Shuffle ( array ) ; var i , index ; begin
54358: LD_INT 0
54360: PPUSH
54361: PPUSH
54362: PPUSH
// result := [ ] ;
54363: LD_ADDR_VAR 0 2
54367: PUSH
54368: EMPTY
54369: ST_TO_ADDR
// if not array then
54370: LD_VAR 0 1
54374: NOT
54375: IFFALSE 54379
// exit ;
54377: GO 54478
// Randomize ;
54379: CALL_OW 10
// for i = array downto 1 do
54383: LD_ADDR_VAR 0 3
54387: PUSH
54388: DOUBLE
54389: LD_VAR 0 1
54393: INC
54394: ST_TO_ADDR
54395: LD_INT 1
54397: PUSH
54398: FOR_DOWNTO
54399: IFFALSE 54476
// begin index := rand ( 1 , array ) ;
54401: LD_ADDR_VAR 0 4
54405: PUSH
54406: LD_INT 1
54408: PPUSH
54409: LD_VAR 0 1
54413: PPUSH
54414: CALL_OW 12
54418: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54419: LD_ADDR_VAR 0 2
54423: PUSH
54424: LD_VAR 0 2
54428: PPUSH
54429: LD_VAR 0 2
54433: PUSH
54434: LD_INT 1
54436: PLUS
54437: PPUSH
54438: LD_VAR 0 1
54442: PUSH
54443: LD_VAR 0 4
54447: ARRAY
54448: PPUSH
54449: CALL_OW 2
54453: ST_TO_ADDR
// array := Delete ( array , index ) ;
54454: LD_ADDR_VAR 0 1
54458: PUSH
54459: LD_VAR 0 1
54463: PPUSH
54464: LD_VAR 0 4
54468: PPUSH
54469: CALL_OW 3
54473: ST_TO_ADDR
// end ;
54474: GO 54398
54476: POP
54477: POP
// end ;
54478: LD_VAR 0 2
54482: RET
// export function GetBaseMaterials ( base ) ; begin
54483: LD_INT 0
54485: PPUSH
// result := [ 0 , 0 , 0 ] ;
54486: LD_ADDR_VAR 0 2
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: ST_TO_ADDR
// if not base then
54505: LD_VAR 0 1
54509: NOT
54510: IFFALSE 54514
// exit ;
54512: GO 54563
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54514: LD_ADDR_VAR 0 2
54518: PUSH
54519: LD_VAR 0 1
54523: PPUSH
54524: LD_INT 1
54526: PPUSH
54527: CALL_OW 275
54531: PUSH
54532: LD_VAR 0 1
54536: PPUSH
54537: LD_INT 2
54539: PPUSH
54540: CALL_OW 275
54544: PUSH
54545: LD_VAR 0 1
54549: PPUSH
54550: LD_INT 3
54552: PPUSH
54553: CALL_OW 275
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: ST_TO_ADDR
// end ;
54563: LD_VAR 0 2
54567: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54568: LD_INT 0
54570: PPUSH
54571: PPUSH
// result := array ;
54572: LD_ADDR_VAR 0 3
54576: PUSH
54577: LD_VAR 0 1
54581: ST_TO_ADDR
// if size >= result then
54582: LD_VAR 0 2
54586: PUSH
54587: LD_VAR 0 3
54591: GREATEREQUAL
54592: IFFALSE 54596
// exit ;
54594: GO 54646
// if size then
54596: LD_VAR 0 2
54600: IFFALSE 54646
// for i := array downto size do
54602: LD_ADDR_VAR 0 4
54606: PUSH
54607: DOUBLE
54608: LD_VAR 0 1
54612: INC
54613: ST_TO_ADDR
54614: LD_VAR 0 2
54618: PUSH
54619: FOR_DOWNTO
54620: IFFALSE 54644
// result := Delete ( result , result ) ;
54622: LD_ADDR_VAR 0 3
54626: PUSH
54627: LD_VAR 0 3
54631: PPUSH
54632: LD_VAR 0 3
54636: PPUSH
54637: CALL_OW 3
54641: ST_TO_ADDR
54642: GO 54619
54644: POP
54645: POP
// end ;
54646: LD_VAR 0 3
54650: RET
// export function ComExit ( unit ) ; var tmp ; begin
54651: LD_INT 0
54653: PPUSH
54654: PPUSH
// if not IsInUnit ( unit ) then
54655: LD_VAR 0 1
54659: PPUSH
54660: CALL_OW 310
54664: NOT
54665: IFFALSE 54669
// exit ;
54667: GO 54729
// tmp := IsInUnit ( unit ) ;
54669: LD_ADDR_VAR 0 3
54673: PUSH
54674: LD_VAR 0 1
54678: PPUSH
54679: CALL_OW 310
54683: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54684: LD_VAR 0 3
54688: PPUSH
54689: CALL_OW 247
54693: PUSH
54694: LD_INT 2
54696: EQUAL
54697: IFFALSE 54710
// ComExitVehicle ( unit ) else
54699: LD_VAR 0 1
54703: PPUSH
54704: CALL_OW 121
54708: GO 54719
// ComExitBuilding ( unit ) ;
54710: LD_VAR 0 1
54714: PPUSH
54715: CALL_OW 122
// result := tmp ;
54719: LD_ADDR_VAR 0 2
54723: PUSH
54724: LD_VAR 0 3
54728: ST_TO_ADDR
// end ;
54729: LD_VAR 0 2
54733: RET
// export function ComExitAll ( units ) ; var i ; begin
54734: LD_INT 0
54736: PPUSH
54737: PPUSH
// if not units then
54738: LD_VAR 0 1
54742: NOT
54743: IFFALSE 54747
// exit ;
54745: GO 54773
// for i in units do
54747: LD_ADDR_VAR 0 3
54751: PUSH
54752: LD_VAR 0 1
54756: PUSH
54757: FOR_IN
54758: IFFALSE 54771
// ComExit ( i ) ;
54760: LD_VAR 0 3
54764: PPUSH
54765: CALL 54651 0 1
54769: GO 54757
54771: POP
54772: POP
// end ;
54773: LD_VAR 0 2
54777: RET
// export function ResetHc ; begin
54778: LD_INT 0
54780: PPUSH
// InitHc ;
54781: CALL_OW 19
// hc_importance := 0 ;
54785: LD_ADDR_OWVAR 32
54789: PUSH
54790: LD_INT 0
54792: ST_TO_ADDR
// end ;
54793: LD_VAR 0 1
54797: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54798: LD_INT 0
54800: PPUSH
54801: PPUSH
54802: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54803: LD_ADDR_VAR 0 6
54807: PUSH
54808: LD_VAR 0 1
54812: PUSH
54813: LD_VAR 0 3
54817: PLUS
54818: PUSH
54819: LD_INT 2
54821: DIV
54822: ST_TO_ADDR
// if _x < 0 then
54823: LD_VAR 0 6
54827: PUSH
54828: LD_INT 0
54830: LESS
54831: IFFALSE 54848
// _x := _x * - 1 ;
54833: LD_ADDR_VAR 0 6
54837: PUSH
54838: LD_VAR 0 6
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: MUL
54847: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54848: LD_ADDR_VAR 0 7
54852: PUSH
54853: LD_VAR 0 2
54857: PUSH
54858: LD_VAR 0 4
54862: PLUS
54863: PUSH
54864: LD_INT 2
54866: DIV
54867: ST_TO_ADDR
// if _y < 0 then
54868: LD_VAR 0 7
54872: PUSH
54873: LD_INT 0
54875: LESS
54876: IFFALSE 54893
// _y := _y * - 1 ;
54878: LD_ADDR_VAR 0 7
54882: PUSH
54883: LD_VAR 0 7
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: MUL
54892: ST_TO_ADDR
// result := [ _x , _y ] ;
54893: LD_ADDR_VAR 0 5
54897: PUSH
54898: LD_VAR 0 6
54902: PUSH
54903: LD_VAR 0 7
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: ST_TO_ADDR
// end ;
54912: LD_VAR 0 5
54916: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54917: LD_INT 0
54919: PPUSH
54920: PPUSH
54921: PPUSH
54922: PPUSH
// task := GetTaskList ( unit ) ;
54923: LD_ADDR_VAR 0 7
54927: PUSH
54928: LD_VAR 0 1
54932: PPUSH
54933: CALL_OW 437
54937: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54938: LD_VAR 0 7
54942: NOT
54943: PUSH
54944: LD_VAR 0 1
54948: PPUSH
54949: LD_VAR 0 2
54953: PPUSH
54954: CALL_OW 308
54958: NOT
54959: AND
54960: IFFALSE 54964
// exit ;
54962: GO 55082
// if IsInArea ( unit , area ) then
54964: LD_VAR 0 1
54968: PPUSH
54969: LD_VAR 0 2
54973: PPUSH
54974: CALL_OW 308
54978: IFFALSE 54996
// begin ComMoveToArea ( unit , goAway ) ;
54980: LD_VAR 0 1
54984: PPUSH
54985: LD_VAR 0 3
54989: PPUSH
54990: CALL_OW 113
// exit ;
54994: GO 55082
// end ; if task [ 1 ] [ 1 ] <> M then
54996: LD_VAR 0 7
55000: PUSH
55001: LD_INT 1
55003: ARRAY
55004: PUSH
55005: LD_INT 1
55007: ARRAY
55008: PUSH
55009: LD_STRING M
55011: NONEQUAL
55012: IFFALSE 55016
// exit ;
55014: GO 55082
// x := task [ 1 ] [ 2 ] ;
55016: LD_ADDR_VAR 0 5
55020: PUSH
55021: LD_VAR 0 7
55025: PUSH
55026: LD_INT 1
55028: ARRAY
55029: PUSH
55030: LD_INT 2
55032: ARRAY
55033: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55034: LD_ADDR_VAR 0 6
55038: PUSH
55039: LD_VAR 0 7
55043: PUSH
55044: LD_INT 1
55046: ARRAY
55047: PUSH
55048: LD_INT 3
55050: ARRAY
55051: ST_TO_ADDR
// if InArea ( x , y , area ) then
55052: LD_VAR 0 5
55056: PPUSH
55057: LD_VAR 0 6
55061: PPUSH
55062: LD_VAR 0 2
55066: PPUSH
55067: CALL_OW 309
55071: IFFALSE 55082
// ComStop ( unit ) ;
55073: LD_VAR 0 1
55077: PPUSH
55078: CALL_OW 141
// end ;
55082: LD_VAR 0 4
55086: RET
// export function Abs ( value ) ; begin
55087: LD_INT 0
55089: PPUSH
// result := value ;
55090: LD_ADDR_VAR 0 2
55094: PUSH
55095: LD_VAR 0 1
55099: ST_TO_ADDR
// if value < 0 then
55100: LD_VAR 0 1
55104: PUSH
55105: LD_INT 0
55107: LESS
55108: IFFALSE 55125
// result := value * - 1 ;
55110: LD_ADDR_VAR 0 2
55114: PUSH
55115: LD_VAR 0 1
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: MUL
55124: ST_TO_ADDR
// end ;
55125: LD_VAR 0 2
55129: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55130: LD_INT 0
55132: PPUSH
55133: PPUSH
55134: PPUSH
55135: PPUSH
55136: PPUSH
55137: PPUSH
55138: PPUSH
55139: PPUSH
// if not unit or not building then
55140: LD_VAR 0 1
55144: NOT
55145: PUSH
55146: LD_VAR 0 2
55150: NOT
55151: OR
55152: IFFALSE 55156
// exit ;
55154: GO 55382
// x := GetX ( building ) ;
55156: LD_ADDR_VAR 0 4
55160: PUSH
55161: LD_VAR 0 2
55165: PPUSH
55166: CALL_OW 250
55170: ST_TO_ADDR
// y := GetY ( building ) ;
55171: LD_ADDR_VAR 0 6
55175: PUSH
55176: LD_VAR 0 2
55180: PPUSH
55181: CALL_OW 251
55185: ST_TO_ADDR
// d := GetDir ( building ) ;
55186: LD_ADDR_VAR 0 8
55190: PUSH
55191: LD_VAR 0 2
55195: PPUSH
55196: CALL_OW 254
55200: ST_TO_ADDR
// r := 4 ;
55201: LD_ADDR_VAR 0 9
55205: PUSH
55206: LD_INT 4
55208: ST_TO_ADDR
// for i := 1 to 5 do
55209: LD_ADDR_VAR 0 10
55213: PUSH
55214: DOUBLE
55215: LD_INT 1
55217: DEC
55218: ST_TO_ADDR
55219: LD_INT 5
55221: PUSH
55222: FOR_TO
55223: IFFALSE 55380
// begin _x := ShiftX ( x , d , r + i ) ;
55225: LD_ADDR_VAR 0 5
55229: PUSH
55230: LD_VAR 0 4
55234: PPUSH
55235: LD_VAR 0 8
55239: PPUSH
55240: LD_VAR 0 9
55244: PUSH
55245: LD_VAR 0 10
55249: PLUS
55250: PPUSH
55251: CALL_OW 272
55255: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55256: LD_ADDR_VAR 0 7
55260: PUSH
55261: LD_VAR 0 6
55265: PPUSH
55266: LD_VAR 0 8
55270: PPUSH
55271: LD_VAR 0 9
55275: PUSH
55276: LD_VAR 0 10
55280: PLUS
55281: PPUSH
55282: CALL_OW 273
55286: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55287: LD_VAR 0 5
55291: PPUSH
55292: LD_VAR 0 7
55296: PPUSH
55297: CALL_OW 488
55301: PUSH
55302: LD_VAR 0 5
55306: PPUSH
55307: LD_VAR 0 7
55311: PPUSH
55312: CALL_OW 428
55316: PPUSH
55317: CALL_OW 247
55321: PUSH
55322: LD_INT 3
55324: PUSH
55325: LD_INT 2
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: IN
55332: NOT
55333: AND
55334: IFFALSE 55378
// begin ComMoveXY ( unit , _x , _y ) ;
55336: LD_VAR 0 1
55340: PPUSH
55341: LD_VAR 0 5
55345: PPUSH
55346: LD_VAR 0 7
55350: PPUSH
55351: CALL_OW 111
// result := [ _x , _y ] ;
55355: LD_ADDR_VAR 0 3
55359: PUSH
55360: LD_VAR 0 5
55364: PUSH
55365: LD_VAR 0 7
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: ST_TO_ADDR
// exit ;
55374: POP
55375: POP
55376: GO 55382
// end ; end ;
55378: GO 55222
55380: POP
55381: POP
// end ;
55382: LD_VAR 0 3
55386: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55387: LD_INT 0
55389: PPUSH
55390: PPUSH
55391: PPUSH
// result := 0 ;
55392: LD_ADDR_VAR 0 3
55396: PUSH
55397: LD_INT 0
55399: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55400: LD_VAR 0 1
55404: PUSH
55405: LD_INT 0
55407: LESS
55408: PUSH
55409: LD_VAR 0 1
55413: PUSH
55414: LD_INT 8
55416: GREATER
55417: OR
55418: PUSH
55419: LD_VAR 0 2
55423: PUSH
55424: LD_INT 0
55426: LESS
55427: OR
55428: PUSH
55429: LD_VAR 0 2
55433: PUSH
55434: LD_INT 8
55436: GREATER
55437: OR
55438: IFFALSE 55442
// exit ;
55440: GO 55517
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55442: LD_ADDR_VAR 0 4
55446: PUSH
55447: LD_INT 22
55449: PUSH
55450: LD_VAR 0 2
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PPUSH
55459: CALL_OW 69
55463: PUSH
55464: FOR_IN
55465: IFFALSE 55515
// begin un := UnitShoot ( i ) ;
55467: LD_ADDR_VAR 0 5
55471: PUSH
55472: LD_VAR 0 4
55476: PPUSH
55477: CALL_OW 504
55481: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55482: LD_VAR 0 5
55486: PPUSH
55487: CALL_OW 255
55491: PUSH
55492: LD_VAR 0 1
55496: EQUAL
55497: IFFALSE 55513
// begin result := un ;
55499: LD_ADDR_VAR 0 3
55503: PUSH
55504: LD_VAR 0 5
55508: ST_TO_ADDR
// exit ;
55509: POP
55510: POP
55511: GO 55517
// end ; end ;
55513: GO 55464
55515: POP
55516: POP
// end ;
55517: LD_VAR 0 3
55521: RET
// export function GetCargoBay ( units ) ; begin
55522: LD_INT 0
55524: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55525: LD_ADDR_VAR 0 2
55529: PUSH
55530: LD_VAR 0 1
55534: PPUSH
55535: LD_INT 2
55537: PUSH
55538: LD_INT 34
55540: PUSH
55541: LD_INT 12
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 34
55550: PUSH
55551: LD_INT 51
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 34
55560: PUSH
55561: LD_INT 32
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 34
55570: PUSH
55571: LD_INT 89
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: PPUSH
55585: CALL_OW 72
55589: ST_TO_ADDR
// end ;
55590: LD_VAR 0 2
55594: RET
// export function Negate ( value ) ; begin
55595: LD_INT 0
55597: PPUSH
// result := not value ;
55598: LD_ADDR_VAR 0 2
55602: PUSH
55603: LD_VAR 0 1
55607: NOT
55608: ST_TO_ADDR
// end ;
55609: LD_VAR 0 2
55613: RET
// export function Inc ( value ) ; begin
55614: LD_INT 0
55616: PPUSH
// result := value + 1 ;
55617: LD_ADDR_VAR 0 2
55621: PUSH
55622: LD_VAR 0 1
55626: PUSH
55627: LD_INT 1
55629: PLUS
55630: ST_TO_ADDR
// end ;
55631: LD_VAR 0 2
55635: RET
// export function Dec ( value ) ; begin
55636: LD_INT 0
55638: PPUSH
// result := value - 1 ;
55639: LD_ADDR_VAR 0 2
55643: PUSH
55644: LD_VAR 0 1
55648: PUSH
55649: LD_INT 1
55651: MINUS
55652: ST_TO_ADDR
// end ;
55653: LD_VAR 0 2
55657: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55658: LD_INT 0
55660: PPUSH
55661: PPUSH
55662: PPUSH
55663: PPUSH
55664: PPUSH
55665: PPUSH
55666: PPUSH
55667: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55668: LD_VAR 0 1
55672: PPUSH
55673: LD_VAR 0 2
55677: PPUSH
55678: CALL_OW 488
55682: NOT
55683: PUSH
55684: LD_VAR 0 3
55688: PPUSH
55689: LD_VAR 0 4
55693: PPUSH
55694: CALL_OW 488
55698: NOT
55699: OR
55700: IFFALSE 55713
// begin result := - 1 ;
55702: LD_ADDR_VAR 0 5
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: ST_TO_ADDR
// exit ;
55711: GO 55948
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55713: LD_ADDR_VAR 0 12
55717: PUSH
55718: LD_VAR 0 1
55722: PPUSH
55723: LD_VAR 0 2
55727: PPUSH
55728: LD_VAR 0 3
55732: PPUSH
55733: LD_VAR 0 4
55737: PPUSH
55738: CALL 54798 0 4
55742: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55743: LD_ADDR_VAR 0 11
55747: PUSH
55748: LD_VAR 0 1
55752: PPUSH
55753: LD_VAR 0 2
55757: PPUSH
55758: LD_VAR 0 12
55762: PUSH
55763: LD_INT 1
55765: ARRAY
55766: PPUSH
55767: LD_VAR 0 12
55771: PUSH
55772: LD_INT 2
55774: ARRAY
55775: PPUSH
55776: CALL_OW 298
55780: ST_TO_ADDR
// distance := 9999 ;
55781: LD_ADDR_VAR 0 10
55785: PUSH
55786: LD_INT 9999
55788: ST_TO_ADDR
// for i := 0 to 5 do
55789: LD_ADDR_VAR 0 6
55793: PUSH
55794: DOUBLE
55795: LD_INT 0
55797: DEC
55798: ST_TO_ADDR
55799: LD_INT 5
55801: PUSH
55802: FOR_TO
55803: IFFALSE 55946
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55805: LD_ADDR_VAR 0 7
55809: PUSH
55810: LD_VAR 0 1
55814: PPUSH
55815: LD_VAR 0 6
55819: PPUSH
55820: LD_VAR 0 11
55824: PPUSH
55825: CALL_OW 272
55829: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55830: LD_ADDR_VAR 0 8
55834: PUSH
55835: LD_VAR 0 2
55839: PPUSH
55840: LD_VAR 0 6
55844: PPUSH
55845: LD_VAR 0 11
55849: PPUSH
55850: CALL_OW 273
55854: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55855: LD_VAR 0 7
55859: PPUSH
55860: LD_VAR 0 8
55864: PPUSH
55865: CALL_OW 488
55869: NOT
55870: IFFALSE 55874
// continue ;
55872: GO 55802
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55874: LD_ADDR_VAR 0 9
55878: PUSH
55879: LD_VAR 0 12
55883: PUSH
55884: LD_INT 1
55886: ARRAY
55887: PPUSH
55888: LD_VAR 0 12
55892: PUSH
55893: LD_INT 2
55895: ARRAY
55896: PPUSH
55897: LD_VAR 0 7
55901: PPUSH
55902: LD_VAR 0 8
55906: PPUSH
55907: CALL_OW 298
55911: ST_TO_ADDR
// if tmp < distance then
55912: LD_VAR 0 9
55916: PUSH
55917: LD_VAR 0 10
55921: LESS
55922: IFFALSE 55944
// begin result := i ;
55924: LD_ADDR_VAR 0 5
55928: PUSH
55929: LD_VAR 0 6
55933: ST_TO_ADDR
// distance := tmp ;
55934: LD_ADDR_VAR 0 10
55938: PUSH
55939: LD_VAR 0 9
55943: ST_TO_ADDR
// end ; end ;
55944: GO 55802
55946: POP
55947: POP
// end ;
55948: LD_VAR 0 5
55952: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55953: LD_INT 0
55955: PPUSH
55956: PPUSH
// if not driver or not IsInUnit ( driver ) then
55957: LD_VAR 0 1
55961: NOT
55962: PUSH
55963: LD_VAR 0 1
55967: PPUSH
55968: CALL_OW 310
55972: NOT
55973: OR
55974: IFFALSE 55978
// exit ;
55976: GO 56068
// vehicle := IsInUnit ( driver ) ;
55978: LD_ADDR_VAR 0 3
55982: PUSH
55983: LD_VAR 0 1
55987: PPUSH
55988: CALL_OW 310
55992: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55993: LD_VAR 0 1
55997: PPUSH
55998: LD_STRING \
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: PUSH
56028: LD_STRING E
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_VAR 0 3
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PPUSH
56064: CALL_OW 446
// end ;
56068: LD_VAR 0 2
56072: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56073: LD_INT 0
56075: PPUSH
56076: PPUSH
// if not driver or not IsInUnit ( driver ) then
56077: LD_VAR 0 1
56081: NOT
56082: PUSH
56083: LD_VAR 0 1
56087: PPUSH
56088: CALL_OW 310
56092: NOT
56093: OR
56094: IFFALSE 56098
// exit ;
56096: GO 56188
// vehicle := IsInUnit ( driver ) ;
56098: LD_ADDR_VAR 0 3
56102: PUSH
56103: LD_VAR 0 1
56107: PPUSH
56108: CALL_OW 310
56112: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56113: LD_VAR 0 1
56117: PPUSH
56118: LD_STRING \
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: PUSH
56148: LD_STRING E
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_VAR 0 3
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PPUSH
56184: CALL_OW 447
// end ;
56188: LD_VAR 0 2
56192: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56193: LD_INT 0
56195: PPUSH
56196: PPUSH
56197: PPUSH
// tmp := [ ] ;
56198: LD_ADDR_VAR 0 5
56202: PUSH
56203: EMPTY
56204: ST_TO_ADDR
// for i in units do
56205: LD_ADDR_VAR 0 4
56209: PUSH
56210: LD_VAR 0 1
56214: PUSH
56215: FOR_IN
56216: IFFALSE 56254
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56218: LD_ADDR_VAR 0 5
56222: PUSH
56223: LD_VAR 0 5
56227: PPUSH
56228: LD_VAR 0 5
56232: PUSH
56233: LD_INT 1
56235: PLUS
56236: PPUSH
56237: LD_VAR 0 4
56241: PPUSH
56242: CALL_OW 256
56246: PPUSH
56247: CALL_OW 2
56251: ST_TO_ADDR
56252: GO 56215
56254: POP
56255: POP
// if not tmp then
56256: LD_VAR 0 5
56260: NOT
56261: IFFALSE 56265
// exit ;
56263: GO 56313
// if asc then
56265: LD_VAR 0 2
56269: IFFALSE 56293
// result := SortListByListAsc ( units , tmp ) else
56271: LD_ADDR_VAR 0 3
56275: PUSH
56276: LD_VAR 0 1
56280: PPUSH
56281: LD_VAR 0 5
56285: PPUSH
56286: CALL_OW 76
56290: ST_TO_ADDR
56291: GO 56313
// result := SortListByListDesc ( units , tmp ) ;
56293: LD_ADDR_VAR 0 3
56297: PUSH
56298: LD_VAR 0 1
56302: PPUSH
56303: LD_VAR 0 5
56307: PPUSH
56308: CALL_OW 77
56312: ST_TO_ADDR
// end ;
56313: LD_VAR 0 3
56317: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56318: LD_INT 0
56320: PPUSH
56321: PPUSH
// task := GetTaskList ( mech ) ;
56322: LD_ADDR_VAR 0 4
56326: PUSH
56327: LD_VAR 0 1
56331: PPUSH
56332: CALL_OW 437
56336: ST_TO_ADDR
// if not task then
56337: LD_VAR 0 4
56341: NOT
56342: IFFALSE 56346
// exit ;
56344: GO 56388
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56346: LD_ADDR_VAR 0 3
56350: PUSH
56351: LD_VAR 0 4
56355: PUSH
56356: LD_INT 1
56358: ARRAY
56359: PUSH
56360: LD_INT 1
56362: ARRAY
56363: PUSH
56364: LD_STRING r
56366: EQUAL
56367: PUSH
56368: LD_VAR 0 4
56372: PUSH
56373: LD_INT 1
56375: ARRAY
56376: PUSH
56377: LD_INT 4
56379: ARRAY
56380: PUSH
56381: LD_VAR 0 2
56385: EQUAL
56386: AND
56387: ST_TO_ADDR
// end ;
56388: LD_VAR 0 3
56392: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56393: LD_INT 0
56395: PPUSH
// SetDir ( unit , d ) ;
56396: LD_VAR 0 1
56400: PPUSH
56401: LD_VAR 0 4
56405: PPUSH
56406: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56410: LD_VAR 0 1
56414: PPUSH
56415: LD_VAR 0 2
56419: PPUSH
56420: LD_VAR 0 3
56424: PPUSH
56425: LD_VAR 0 5
56429: PPUSH
56430: CALL_OW 48
// end ;
56434: LD_VAR 0 6
56438: RET
// export function ToNaturalNumber ( number ) ; begin
56439: LD_INT 0
56441: PPUSH
// result := number div 1 ;
56442: LD_ADDR_VAR 0 2
56446: PUSH
56447: LD_VAR 0 1
56451: PUSH
56452: LD_INT 1
56454: DIV
56455: ST_TO_ADDR
// if number < 0 then
56456: LD_VAR 0 1
56460: PUSH
56461: LD_INT 0
56463: LESS
56464: IFFALSE 56474
// result := 0 ;
56466: LD_ADDR_VAR 0 2
56470: PUSH
56471: LD_INT 0
56473: ST_TO_ADDR
// end ;
56474: LD_VAR 0 2
56478: RET
// export function SortByClass ( units , class ) ; var un ; begin
56479: LD_INT 0
56481: PPUSH
56482: PPUSH
// if not units or not class then
56483: LD_VAR 0 1
56487: NOT
56488: PUSH
56489: LD_VAR 0 2
56493: NOT
56494: OR
56495: IFFALSE 56499
// exit ;
56497: GO 56594
// result := [ ] ;
56499: LD_ADDR_VAR 0 3
56503: PUSH
56504: EMPTY
56505: ST_TO_ADDR
// for un in units do
56506: LD_ADDR_VAR 0 4
56510: PUSH
56511: LD_VAR 0 1
56515: PUSH
56516: FOR_IN
56517: IFFALSE 56592
// if GetClass ( un ) = class then
56519: LD_VAR 0 4
56523: PPUSH
56524: CALL_OW 257
56528: PUSH
56529: LD_VAR 0 2
56533: EQUAL
56534: IFFALSE 56561
// result := Insert ( result , 1 , un ) else
56536: LD_ADDR_VAR 0 3
56540: PUSH
56541: LD_VAR 0 3
56545: PPUSH
56546: LD_INT 1
56548: PPUSH
56549: LD_VAR 0 4
56553: PPUSH
56554: CALL_OW 2
56558: ST_TO_ADDR
56559: GO 56590
// result := Replace ( result , result + 1 , un ) ;
56561: LD_ADDR_VAR 0 3
56565: PUSH
56566: LD_VAR 0 3
56570: PPUSH
56571: LD_VAR 0 3
56575: PUSH
56576: LD_INT 1
56578: PLUS
56579: PPUSH
56580: LD_VAR 0 4
56584: PPUSH
56585: CALL_OW 1
56589: ST_TO_ADDR
56590: GO 56516
56592: POP
56593: POP
// end ;
56594: LD_VAR 0 3
56598: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56599: LD_INT 0
56601: PPUSH
56602: PPUSH
56603: PPUSH
56604: PPUSH
56605: PPUSH
56606: PPUSH
56607: PPUSH
// result := [ ] ;
56608: LD_ADDR_VAR 0 4
56612: PUSH
56613: EMPTY
56614: ST_TO_ADDR
// if x - r < 0 then
56615: LD_VAR 0 1
56619: PUSH
56620: LD_VAR 0 3
56624: MINUS
56625: PUSH
56626: LD_INT 0
56628: LESS
56629: IFFALSE 56641
// min_x := 0 else
56631: LD_ADDR_VAR 0 8
56635: PUSH
56636: LD_INT 0
56638: ST_TO_ADDR
56639: GO 56657
// min_x := x - r ;
56641: LD_ADDR_VAR 0 8
56645: PUSH
56646: LD_VAR 0 1
56650: PUSH
56651: LD_VAR 0 3
56655: MINUS
56656: ST_TO_ADDR
// if y - r < 0 then
56657: LD_VAR 0 2
56661: PUSH
56662: LD_VAR 0 3
56666: MINUS
56667: PUSH
56668: LD_INT 0
56670: LESS
56671: IFFALSE 56683
// min_y := 0 else
56673: LD_ADDR_VAR 0 7
56677: PUSH
56678: LD_INT 0
56680: ST_TO_ADDR
56681: GO 56699
// min_y := y - r ;
56683: LD_ADDR_VAR 0 7
56687: PUSH
56688: LD_VAR 0 2
56692: PUSH
56693: LD_VAR 0 3
56697: MINUS
56698: ST_TO_ADDR
// max_x := x + r ;
56699: LD_ADDR_VAR 0 9
56703: PUSH
56704: LD_VAR 0 1
56708: PUSH
56709: LD_VAR 0 3
56713: PLUS
56714: ST_TO_ADDR
// max_y := y + r ;
56715: LD_ADDR_VAR 0 10
56719: PUSH
56720: LD_VAR 0 2
56724: PUSH
56725: LD_VAR 0 3
56729: PLUS
56730: ST_TO_ADDR
// for _x = min_x to max_x do
56731: LD_ADDR_VAR 0 5
56735: PUSH
56736: DOUBLE
56737: LD_VAR 0 8
56741: DEC
56742: ST_TO_ADDR
56743: LD_VAR 0 9
56747: PUSH
56748: FOR_TO
56749: IFFALSE 56850
// for _y = min_y to max_y do
56751: LD_ADDR_VAR 0 6
56755: PUSH
56756: DOUBLE
56757: LD_VAR 0 7
56761: DEC
56762: ST_TO_ADDR
56763: LD_VAR 0 10
56767: PUSH
56768: FOR_TO
56769: IFFALSE 56846
// begin if not ValidHex ( _x , _y ) then
56771: LD_VAR 0 5
56775: PPUSH
56776: LD_VAR 0 6
56780: PPUSH
56781: CALL_OW 488
56785: NOT
56786: IFFALSE 56790
// continue ;
56788: GO 56768
// if GetResourceTypeXY ( _x , _y ) then
56790: LD_VAR 0 5
56794: PPUSH
56795: LD_VAR 0 6
56799: PPUSH
56800: CALL_OW 283
56804: IFFALSE 56844
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56806: LD_ADDR_VAR 0 4
56810: PUSH
56811: LD_VAR 0 4
56815: PPUSH
56816: LD_VAR 0 4
56820: PUSH
56821: LD_INT 1
56823: PLUS
56824: PPUSH
56825: LD_VAR 0 5
56829: PUSH
56830: LD_VAR 0 6
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PPUSH
56839: CALL_OW 1
56843: ST_TO_ADDR
// end ;
56844: GO 56768
56846: POP
56847: POP
56848: GO 56748
56850: POP
56851: POP
// end ;
56852: LD_VAR 0 4
56856: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56857: LD_INT 0
56859: PPUSH
56860: PPUSH
56861: PPUSH
56862: PPUSH
56863: PPUSH
56864: PPUSH
56865: PPUSH
56866: PPUSH
// if not units then
56867: LD_VAR 0 1
56871: NOT
56872: IFFALSE 56876
// exit ;
56874: GO 57400
// result := UnitFilter ( units , [ f_ok ] ) ;
56876: LD_ADDR_VAR 0 3
56880: PUSH
56881: LD_VAR 0 1
56885: PPUSH
56886: LD_INT 50
56888: PUSH
56889: EMPTY
56890: LIST
56891: PPUSH
56892: CALL_OW 72
56896: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56897: LD_ADDR_VAR 0 8
56901: PUSH
56902: LD_VAR 0 1
56906: PUSH
56907: LD_INT 1
56909: ARRAY
56910: PPUSH
56911: CALL_OW 255
56915: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56916: LD_ADDR_VAR 0 10
56920: PUSH
56921: LD_INT 29
56923: PUSH
56924: LD_INT 91
56926: PUSH
56927: LD_INT 49
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: ST_TO_ADDR
// if not result then
56935: LD_VAR 0 3
56939: NOT
56940: IFFALSE 56944
// exit ;
56942: GO 57400
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56944: LD_ADDR_VAR 0 5
56948: PUSH
56949: LD_INT 81
56951: PUSH
56952: LD_VAR 0 8
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PPUSH
56961: CALL_OW 69
56965: ST_TO_ADDR
// for i in result do
56966: LD_ADDR_VAR 0 4
56970: PUSH
56971: LD_VAR 0 3
56975: PUSH
56976: FOR_IN
56977: IFFALSE 57398
// begin tag := GetTag ( i ) + 1 ;
56979: LD_ADDR_VAR 0 9
56983: PUSH
56984: LD_VAR 0 4
56988: PPUSH
56989: CALL_OW 110
56993: PUSH
56994: LD_INT 1
56996: PLUS
56997: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56998: LD_ADDR_VAR 0 7
57002: PUSH
57003: LD_VAR 0 4
57007: PPUSH
57008: CALL_OW 250
57012: PPUSH
57013: LD_VAR 0 4
57017: PPUSH
57018: CALL_OW 251
57022: PPUSH
57023: LD_INT 6
57025: PPUSH
57026: CALL 56599 0 3
57030: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57031: LD_VAR 0 4
57035: PPUSH
57036: CALL_OW 247
57040: PUSH
57041: LD_INT 2
57043: EQUAL
57044: PUSH
57045: LD_VAR 0 7
57049: AND
57050: PUSH
57051: LD_VAR 0 4
57055: PPUSH
57056: CALL_OW 264
57060: PUSH
57061: LD_VAR 0 10
57065: IN
57066: NOT
57067: AND
57068: IFFALSE 57107
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57070: LD_VAR 0 4
57074: PPUSH
57075: LD_VAR 0 7
57079: PUSH
57080: LD_INT 1
57082: ARRAY
57083: PUSH
57084: LD_INT 1
57086: ARRAY
57087: PPUSH
57088: LD_VAR 0 7
57092: PUSH
57093: LD_INT 1
57095: ARRAY
57096: PUSH
57097: LD_INT 2
57099: ARRAY
57100: PPUSH
57101: CALL_OW 116
57105: GO 57396
// if path > tag then
57107: LD_VAR 0 2
57111: PUSH
57112: LD_VAR 0 9
57116: GREATER
57117: IFFALSE 57325
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57119: LD_ADDR_VAR 0 6
57123: PUSH
57124: LD_VAR 0 5
57128: PPUSH
57129: LD_INT 91
57131: PUSH
57132: LD_VAR 0 4
57136: PUSH
57137: LD_INT 8
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: PPUSH
57145: CALL_OW 72
57149: ST_TO_ADDR
// if nearEnemy then
57150: LD_VAR 0 6
57154: IFFALSE 57223
// begin if GetWeapon ( i ) = ru_time_lapser then
57156: LD_VAR 0 4
57160: PPUSH
57161: CALL_OW 264
57165: PUSH
57166: LD_INT 49
57168: EQUAL
57169: IFFALSE 57197
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57171: LD_VAR 0 4
57175: PPUSH
57176: LD_VAR 0 6
57180: PPUSH
57181: LD_VAR 0 4
57185: PPUSH
57186: CALL_OW 74
57190: PPUSH
57191: CALL_OW 112
57195: GO 57221
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57197: LD_VAR 0 4
57201: PPUSH
57202: LD_VAR 0 6
57206: PPUSH
57207: LD_VAR 0 4
57211: PPUSH
57212: CALL_OW 74
57216: PPUSH
57217: CALL 58325 0 2
// end else
57221: GO 57323
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57223: LD_VAR 0 4
57227: PPUSH
57228: LD_VAR 0 2
57232: PUSH
57233: LD_VAR 0 9
57237: ARRAY
57238: PUSH
57239: LD_INT 1
57241: ARRAY
57242: PPUSH
57243: LD_VAR 0 2
57247: PUSH
57248: LD_VAR 0 9
57252: ARRAY
57253: PUSH
57254: LD_INT 2
57256: ARRAY
57257: PPUSH
57258: CALL_OW 297
57262: PUSH
57263: LD_INT 6
57265: GREATER
57266: IFFALSE 57309
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57268: LD_VAR 0 4
57272: PPUSH
57273: LD_VAR 0 2
57277: PUSH
57278: LD_VAR 0 9
57282: ARRAY
57283: PUSH
57284: LD_INT 1
57286: ARRAY
57287: PPUSH
57288: LD_VAR 0 2
57292: PUSH
57293: LD_VAR 0 9
57297: ARRAY
57298: PUSH
57299: LD_INT 2
57301: ARRAY
57302: PPUSH
57303: CALL_OW 114
57307: GO 57323
// SetTag ( i , tag ) ;
57309: LD_VAR 0 4
57313: PPUSH
57314: LD_VAR 0 9
57318: PPUSH
57319: CALL_OW 109
// end else
57323: GO 57396
// if enemy then
57325: LD_VAR 0 5
57329: IFFALSE 57396
// begin if GetWeapon ( i ) = ru_time_lapser then
57331: LD_VAR 0 4
57335: PPUSH
57336: CALL_OW 264
57340: PUSH
57341: LD_INT 49
57343: EQUAL
57344: IFFALSE 57372
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57346: LD_VAR 0 4
57350: PPUSH
57351: LD_VAR 0 5
57355: PPUSH
57356: LD_VAR 0 4
57360: PPUSH
57361: CALL_OW 74
57365: PPUSH
57366: CALL_OW 112
57370: GO 57396
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57372: LD_VAR 0 4
57376: PPUSH
57377: LD_VAR 0 5
57381: PPUSH
57382: LD_VAR 0 4
57386: PPUSH
57387: CALL_OW 74
57391: PPUSH
57392: CALL 58325 0 2
// end ; end ;
57396: GO 56976
57398: POP
57399: POP
// end ;
57400: LD_VAR 0 3
57404: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57405: LD_INT 0
57407: PPUSH
57408: PPUSH
57409: PPUSH
// if not unit or IsInUnit ( unit ) then
57410: LD_VAR 0 1
57414: NOT
57415: PUSH
57416: LD_VAR 0 1
57420: PPUSH
57421: CALL_OW 310
57425: OR
57426: IFFALSE 57430
// exit ;
57428: GO 57521
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57430: LD_ADDR_VAR 0 4
57434: PUSH
57435: LD_VAR 0 1
57439: PPUSH
57440: CALL_OW 250
57444: PPUSH
57445: LD_VAR 0 2
57449: PPUSH
57450: LD_INT 1
57452: PPUSH
57453: CALL_OW 272
57457: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57458: LD_ADDR_VAR 0 5
57462: PUSH
57463: LD_VAR 0 1
57467: PPUSH
57468: CALL_OW 251
57472: PPUSH
57473: LD_VAR 0 2
57477: PPUSH
57478: LD_INT 1
57480: PPUSH
57481: CALL_OW 273
57485: ST_TO_ADDR
// if ValidHex ( x , y ) then
57486: LD_VAR 0 4
57490: PPUSH
57491: LD_VAR 0 5
57495: PPUSH
57496: CALL_OW 488
57500: IFFALSE 57521
// ComTurnXY ( unit , x , y ) ;
57502: LD_VAR 0 1
57506: PPUSH
57507: LD_VAR 0 4
57511: PPUSH
57512: LD_VAR 0 5
57516: PPUSH
57517: CALL_OW 118
// end ;
57521: LD_VAR 0 3
57525: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57526: LD_INT 0
57528: PPUSH
57529: PPUSH
// result := false ;
57530: LD_ADDR_VAR 0 3
57534: PUSH
57535: LD_INT 0
57537: ST_TO_ADDR
// if not units then
57538: LD_VAR 0 2
57542: NOT
57543: IFFALSE 57547
// exit ;
57545: GO 57592
// for i in units do
57547: LD_ADDR_VAR 0 4
57551: PUSH
57552: LD_VAR 0 2
57556: PUSH
57557: FOR_IN
57558: IFFALSE 57590
// if See ( side , i ) then
57560: LD_VAR 0 1
57564: PPUSH
57565: LD_VAR 0 4
57569: PPUSH
57570: CALL_OW 292
57574: IFFALSE 57588
// begin result := true ;
57576: LD_ADDR_VAR 0 3
57580: PUSH
57581: LD_INT 1
57583: ST_TO_ADDR
// exit ;
57584: POP
57585: POP
57586: GO 57592
// end ;
57588: GO 57557
57590: POP
57591: POP
// end ;
57592: LD_VAR 0 3
57596: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57597: LD_INT 0
57599: PPUSH
57600: PPUSH
57601: PPUSH
57602: PPUSH
// if not unit or not points then
57603: LD_VAR 0 1
57607: NOT
57608: PUSH
57609: LD_VAR 0 2
57613: NOT
57614: OR
57615: IFFALSE 57619
// exit ;
57617: GO 57709
// dist := 99999 ;
57619: LD_ADDR_VAR 0 5
57623: PUSH
57624: LD_INT 99999
57626: ST_TO_ADDR
// for i in points do
57627: LD_ADDR_VAR 0 4
57631: PUSH
57632: LD_VAR 0 2
57636: PUSH
57637: FOR_IN
57638: IFFALSE 57707
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57640: LD_ADDR_VAR 0 6
57644: PUSH
57645: LD_VAR 0 1
57649: PPUSH
57650: LD_VAR 0 4
57654: PUSH
57655: LD_INT 1
57657: ARRAY
57658: PPUSH
57659: LD_VAR 0 4
57663: PUSH
57664: LD_INT 2
57666: ARRAY
57667: PPUSH
57668: CALL_OW 297
57672: ST_TO_ADDR
// if tmpDist < dist then
57673: LD_VAR 0 6
57677: PUSH
57678: LD_VAR 0 5
57682: LESS
57683: IFFALSE 57705
// begin result := i ;
57685: LD_ADDR_VAR 0 3
57689: PUSH
57690: LD_VAR 0 4
57694: ST_TO_ADDR
// dist := tmpDist ;
57695: LD_ADDR_VAR 0 5
57699: PUSH
57700: LD_VAR 0 6
57704: ST_TO_ADDR
// end ; end ;
57705: GO 57637
57707: POP
57708: POP
// end ;
57709: LD_VAR 0 3
57713: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57714: LD_INT 0
57716: PPUSH
// uc_side := side ;
57717: LD_ADDR_OWVAR 20
57721: PUSH
57722: LD_VAR 0 1
57726: ST_TO_ADDR
// uc_nation := 3 ;
57727: LD_ADDR_OWVAR 21
57731: PUSH
57732: LD_INT 3
57734: ST_TO_ADDR
// vc_chassis := 25 ;
57735: LD_ADDR_OWVAR 37
57739: PUSH
57740: LD_INT 25
57742: ST_TO_ADDR
// vc_engine := engine_siberite ;
57743: LD_ADDR_OWVAR 39
57747: PUSH
57748: LD_INT 3
57750: ST_TO_ADDR
// vc_control := control_computer ;
57751: LD_ADDR_OWVAR 38
57755: PUSH
57756: LD_INT 3
57758: ST_TO_ADDR
// vc_weapon := 59 ;
57759: LD_ADDR_OWVAR 40
57763: PUSH
57764: LD_INT 59
57766: ST_TO_ADDR
// result := CreateVehicle ;
57767: LD_ADDR_VAR 0 5
57771: PUSH
57772: CALL_OW 45
57776: ST_TO_ADDR
// SetDir ( result , d ) ;
57777: LD_VAR 0 5
57781: PPUSH
57782: LD_VAR 0 4
57786: PPUSH
57787: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57791: LD_VAR 0 5
57795: PPUSH
57796: LD_VAR 0 2
57800: PPUSH
57801: LD_VAR 0 3
57805: PPUSH
57806: LD_INT 0
57808: PPUSH
57809: CALL_OW 48
// end ;
57813: LD_VAR 0 5
57817: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57818: LD_INT 0
57820: PPUSH
57821: PPUSH
57822: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57823: LD_ADDR_VAR 0 2
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57846: LD_VAR 0 1
57850: NOT
57851: PUSH
57852: LD_VAR 0 1
57856: PPUSH
57857: CALL_OW 264
57861: PUSH
57862: LD_INT 12
57864: PUSH
57865: LD_INT 51
57867: PUSH
57868: LD_INT 32
57870: PUSH
57871: LD_INT 89
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: IN
57880: NOT
57881: OR
57882: IFFALSE 57886
// exit ;
57884: GO 57984
// for i := 1 to 3 do
57886: LD_ADDR_VAR 0 3
57890: PUSH
57891: DOUBLE
57892: LD_INT 1
57894: DEC
57895: ST_TO_ADDR
57896: LD_INT 3
57898: PUSH
57899: FOR_TO
57900: IFFALSE 57982
// begin tmp := GetCargo ( cargo , i ) ;
57902: LD_ADDR_VAR 0 4
57906: PUSH
57907: LD_VAR 0 1
57911: PPUSH
57912: LD_VAR 0 3
57916: PPUSH
57917: CALL_OW 289
57921: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57922: LD_ADDR_VAR 0 2
57926: PUSH
57927: LD_VAR 0 2
57931: PPUSH
57932: LD_VAR 0 3
57936: PPUSH
57937: LD_VAR 0 4
57941: PPUSH
57942: CALL_OW 1
57946: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57947: LD_ADDR_VAR 0 2
57951: PUSH
57952: LD_VAR 0 2
57956: PPUSH
57957: LD_INT 4
57959: PPUSH
57960: LD_VAR 0 2
57964: PUSH
57965: LD_INT 4
57967: ARRAY
57968: PUSH
57969: LD_VAR 0 4
57973: PLUS
57974: PPUSH
57975: CALL_OW 1
57979: ST_TO_ADDR
// end ;
57980: GO 57899
57982: POP
57983: POP
// end ;
57984: LD_VAR 0 2
57988: RET
// export function Length ( array ) ; begin
57989: LD_INT 0
57991: PPUSH
// result := array + 0 ;
57992: LD_ADDR_VAR 0 2
57996: PUSH
57997: LD_VAR 0 1
58001: PUSH
58002: LD_INT 0
58004: PLUS
58005: ST_TO_ADDR
// end ;
58006: LD_VAR 0 2
58010: RET
// export function PrepareArray ( array ) ; begin
58011: LD_INT 0
58013: PPUSH
// result := array diff 0 ;
58014: LD_ADDR_VAR 0 2
58018: PUSH
58019: LD_VAR 0 1
58023: PUSH
58024: LD_INT 0
58026: DIFF
58027: ST_TO_ADDR
// if not result [ 1 ] then
58028: LD_VAR 0 2
58032: PUSH
58033: LD_INT 1
58035: ARRAY
58036: NOT
58037: IFFALSE 58057
// result := Delete ( result , 1 ) ;
58039: LD_ADDR_VAR 0 2
58043: PUSH
58044: LD_VAR 0 2
58048: PPUSH
58049: LD_INT 1
58051: PPUSH
58052: CALL_OW 3
58056: ST_TO_ADDR
// end ;
58057: LD_VAR 0 2
58061: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58062: LD_INT 0
58064: PPUSH
58065: PPUSH
58066: PPUSH
58067: PPUSH
// sibRocketRange := 25 ;
58068: LD_ADDR_VAR 0 6
58072: PUSH
58073: LD_INT 25
58075: ST_TO_ADDR
// result := false ;
58076: LD_ADDR_VAR 0 4
58080: PUSH
58081: LD_INT 0
58083: ST_TO_ADDR
// for i := 0 to 5 do
58084: LD_ADDR_VAR 0 5
58088: PUSH
58089: DOUBLE
58090: LD_INT 0
58092: DEC
58093: ST_TO_ADDR
58094: LD_INT 5
58096: PUSH
58097: FOR_TO
58098: IFFALSE 58165
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58100: LD_VAR 0 1
58104: PPUSH
58105: LD_VAR 0 5
58109: PPUSH
58110: LD_VAR 0 6
58114: PPUSH
58115: CALL_OW 272
58119: PPUSH
58120: LD_VAR 0 2
58124: PPUSH
58125: LD_VAR 0 5
58129: PPUSH
58130: LD_VAR 0 6
58134: PPUSH
58135: CALL_OW 273
58139: PPUSH
58140: LD_VAR 0 3
58144: PPUSH
58145: CALL_OW 309
58149: IFFALSE 58163
// begin result := true ;
58151: LD_ADDR_VAR 0 4
58155: PUSH
58156: LD_INT 1
58158: ST_TO_ADDR
// exit ;
58159: POP
58160: POP
58161: GO 58167
// end ;
58163: GO 58097
58165: POP
58166: POP
// end ;
58167: LD_VAR 0 4
58171: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58172: LD_INT 0
58174: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58175: LD_VAR 0 1
58179: PPUSH
58180: LD_VAR 0 2
58184: PPUSH
58185: LD_INT 0
58187: PPUSH
58188: LD_INT 0
58190: PPUSH
58191: LD_INT 1
58193: PPUSH
58194: LD_INT 0
58196: PPUSH
58197: CALL_OW 587
// end ;
58201: LD_VAR 0 3
58205: RET
// export function CenterOnNow ( unit ) ; begin
58206: LD_INT 0
58208: PPUSH
// result := IsInUnit ( unit ) ;
58209: LD_ADDR_VAR 0 2
58213: PUSH
58214: LD_VAR 0 1
58218: PPUSH
58219: CALL_OW 310
58223: ST_TO_ADDR
// if not result then
58224: LD_VAR 0 2
58228: NOT
58229: IFFALSE 58241
// result := unit ;
58231: LD_ADDR_VAR 0 2
58235: PUSH
58236: LD_VAR 0 1
58240: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58241: LD_VAR 0 1
58245: PPUSH
58246: CALL_OW 87
// end ;
58250: LD_VAR 0 2
58254: RET
// export function ComMoveHex ( unit , hex ) ; begin
58255: LD_INT 0
58257: PPUSH
// if not hex then
58258: LD_VAR 0 2
58262: NOT
58263: IFFALSE 58267
// exit ;
58265: GO 58320
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58267: LD_VAR 0 2
58271: PUSH
58272: LD_INT 1
58274: ARRAY
58275: PPUSH
58276: LD_VAR 0 2
58280: PUSH
58281: LD_INT 2
58283: ARRAY
58284: PPUSH
58285: CALL_OW 428
58289: IFFALSE 58293
// exit ;
58291: GO 58320
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58293: LD_VAR 0 1
58297: PPUSH
58298: LD_VAR 0 2
58302: PUSH
58303: LD_INT 1
58305: ARRAY
58306: PPUSH
58307: LD_VAR 0 2
58311: PUSH
58312: LD_INT 2
58314: ARRAY
58315: PPUSH
58316: CALL_OW 111
// end ;
58320: LD_VAR 0 3
58324: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58325: LD_INT 0
58327: PPUSH
58328: PPUSH
58329: PPUSH
// if not unit or not enemy then
58330: LD_VAR 0 1
58334: NOT
58335: PUSH
58336: LD_VAR 0 2
58340: NOT
58341: OR
58342: IFFALSE 58346
// exit ;
58344: GO 58470
// x := GetX ( enemy ) ;
58346: LD_ADDR_VAR 0 4
58350: PUSH
58351: LD_VAR 0 2
58355: PPUSH
58356: CALL_OW 250
58360: ST_TO_ADDR
// y := GetY ( enemy ) ;
58361: LD_ADDR_VAR 0 5
58365: PUSH
58366: LD_VAR 0 2
58370: PPUSH
58371: CALL_OW 251
58375: ST_TO_ADDR
// if ValidHex ( x , y ) then
58376: LD_VAR 0 4
58380: PPUSH
58381: LD_VAR 0 5
58385: PPUSH
58386: CALL_OW 488
58390: IFFALSE 58470
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
58392: LD_VAR 0 2
58396: PPUSH
58397: CALL_OW 247
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: IN
58412: PUSH
58413: LD_VAR 0 1
58417: PPUSH
58418: CALL_OW 255
58422: PPUSH
58423: LD_VAR 0 2
58427: PPUSH
58428: CALL_OW 292
58432: AND
58433: IFFALSE 58451
// ComAttackUnit ( unit , enemy ) else
58435: LD_VAR 0 1
58439: PPUSH
58440: LD_VAR 0 2
58444: PPUSH
58445: CALL_OW 115
58449: GO 58470
// ComAgressiveMove ( unit , x , y ) ;
58451: LD_VAR 0 1
58455: PPUSH
58456: LD_VAR 0 4
58460: PPUSH
58461: LD_VAR 0 5
58465: PPUSH
58466: CALL_OW 114
// end ; end_of_file
58470: LD_VAR 0 3
58474: RET
// export globalGameSaveCounter ; every 0 0$1 do
58475: GO 58477
58477: DISABLE
// begin enable ;
58478: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
58479: LD_STRING updateTimer(
58481: PUSH
58482: LD_OWVAR 1
58486: STR
58487: PUSH
58488: LD_STRING );
58490: STR
58491: PPUSH
58492: CALL_OW 559
// end ;
58496: END
// every 0 0$1 do
58497: GO 58499
58499: DISABLE
// begin globalGameSaveCounter := 0 ;
58500: LD_ADDR_EXP 49
58504: PUSH
58505: LD_INT 0
58507: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
58508: LD_STRING setGameSaveCounter(0)
58510: PPUSH
58511: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
58515: LD_STRING initStreamRollete();
58517: PPUSH
58518: CALL_OW 559
// InitStreamMode ;
58522: CALL 59848 0 0
// DefineStreamItems ( false ) ;
58526: LD_INT 0
58528: PPUSH
58529: CALL 60312 0 1
// end ;
58533: END
// export function SOS_MapStart ( ) ; begin
58534: LD_INT 0
58536: PPUSH
// if streamModeActive then
58537: LD_EXP 50
58541: IFFALSE 58550
// DefineStreamItems ( true ) ;
58543: LD_INT 1
58545: PPUSH
58546: CALL 60312 0 1
// UpdateLuaVariables ( ) ;
58550: CALL 58567 0 0
// UpdateFactoryWaypoints ( ) ;
58554: CALL 73181 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58558: CALL 73438 0 0
// end ;
58562: LD_VAR 0 1
58566: RET
// function UpdateLuaVariables ( ) ; begin
58567: LD_INT 0
58569: PPUSH
// if globalGameSaveCounter then
58570: LD_EXP 49
58574: IFFALSE 58608
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
58576: LD_ADDR_EXP 49
58580: PUSH
58581: LD_EXP 49
58585: PPUSH
58586: CALL 55614 0 1
58590: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58591: LD_STRING setGameSaveCounter(
58593: PUSH
58594: LD_EXP 49
58598: STR
58599: PUSH
58600: LD_STRING )
58602: STR
58603: PPUSH
58604: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58608: LD_STRING setGameDifficulty(
58610: PUSH
58611: LD_OWVAR 67
58615: STR
58616: PUSH
58617: LD_STRING )
58619: STR
58620: PPUSH
58621: CALL_OW 559
// end ;
58625: LD_VAR 0 1
58629: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58630: LD_INT 0
58632: PPUSH
// if p2 = stream_mode then
58633: LD_VAR 0 2
58637: PUSH
58638: LD_INT 100
58640: EQUAL
58641: IFFALSE 59644
// begin if not StreamModeActive then
58643: LD_EXP 50
58647: NOT
58648: IFFALSE 58658
// StreamModeActive := true ;
58650: LD_ADDR_EXP 50
58654: PUSH
58655: LD_INT 1
58657: ST_TO_ADDR
// if p3 = 0 then
58658: LD_VAR 0 3
58662: PUSH
58663: LD_INT 0
58665: EQUAL
58666: IFFALSE 58672
// InitStreamMode ;
58668: CALL 59848 0 0
// if p3 = 1 then
58672: LD_VAR 0 3
58676: PUSH
58677: LD_INT 1
58679: EQUAL
58680: IFFALSE 58690
// sRocket := true ;
58682: LD_ADDR_EXP 55
58686: PUSH
58687: LD_INT 1
58689: ST_TO_ADDR
// if p3 = 2 then
58690: LD_VAR 0 3
58694: PUSH
58695: LD_INT 2
58697: EQUAL
58698: IFFALSE 58708
// sSpeed := true ;
58700: LD_ADDR_EXP 54
58704: PUSH
58705: LD_INT 1
58707: ST_TO_ADDR
// if p3 = 3 then
58708: LD_VAR 0 3
58712: PUSH
58713: LD_INT 3
58715: EQUAL
58716: IFFALSE 58726
// sEngine := true ;
58718: LD_ADDR_EXP 56
58722: PUSH
58723: LD_INT 1
58725: ST_TO_ADDR
// if p3 = 4 then
58726: LD_VAR 0 3
58730: PUSH
58731: LD_INT 4
58733: EQUAL
58734: IFFALSE 58744
// sSpec := true ;
58736: LD_ADDR_EXP 53
58740: PUSH
58741: LD_INT 1
58743: ST_TO_ADDR
// if p3 = 5 then
58744: LD_VAR 0 3
58748: PUSH
58749: LD_INT 5
58751: EQUAL
58752: IFFALSE 58762
// sLevel := true ;
58754: LD_ADDR_EXP 57
58758: PUSH
58759: LD_INT 1
58761: ST_TO_ADDR
// if p3 = 6 then
58762: LD_VAR 0 3
58766: PUSH
58767: LD_INT 6
58769: EQUAL
58770: IFFALSE 58780
// sArmoury := true ;
58772: LD_ADDR_EXP 58
58776: PUSH
58777: LD_INT 1
58779: ST_TO_ADDR
// if p3 = 7 then
58780: LD_VAR 0 3
58784: PUSH
58785: LD_INT 7
58787: EQUAL
58788: IFFALSE 58798
// sRadar := true ;
58790: LD_ADDR_EXP 59
58794: PUSH
58795: LD_INT 1
58797: ST_TO_ADDR
// if p3 = 8 then
58798: LD_VAR 0 3
58802: PUSH
58803: LD_INT 8
58805: EQUAL
58806: IFFALSE 58816
// sBunker := true ;
58808: LD_ADDR_EXP 60
58812: PUSH
58813: LD_INT 1
58815: ST_TO_ADDR
// if p3 = 9 then
58816: LD_VAR 0 3
58820: PUSH
58821: LD_INT 9
58823: EQUAL
58824: IFFALSE 58834
// sHack := true ;
58826: LD_ADDR_EXP 61
58830: PUSH
58831: LD_INT 1
58833: ST_TO_ADDR
// if p3 = 10 then
58834: LD_VAR 0 3
58838: PUSH
58839: LD_INT 10
58841: EQUAL
58842: IFFALSE 58852
// sFire := true ;
58844: LD_ADDR_EXP 62
58848: PUSH
58849: LD_INT 1
58851: ST_TO_ADDR
// if p3 = 11 then
58852: LD_VAR 0 3
58856: PUSH
58857: LD_INT 11
58859: EQUAL
58860: IFFALSE 58870
// sRefresh := true ;
58862: LD_ADDR_EXP 63
58866: PUSH
58867: LD_INT 1
58869: ST_TO_ADDR
// if p3 = 12 then
58870: LD_VAR 0 3
58874: PUSH
58875: LD_INT 12
58877: EQUAL
58878: IFFALSE 58888
// sExp := true ;
58880: LD_ADDR_EXP 64
58884: PUSH
58885: LD_INT 1
58887: ST_TO_ADDR
// if p3 = 13 then
58888: LD_VAR 0 3
58892: PUSH
58893: LD_INT 13
58895: EQUAL
58896: IFFALSE 58906
// sDepot := true ;
58898: LD_ADDR_EXP 65
58902: PUSH
58903: LD_INT 1
58905: ST_TO_ADDR
// if p3 = 14 then
58906: LD_VAR 0 3
58910: PUSH
58911: LD_INT 14
58913: EQUAL
58914: IFFALSE 58924
// sFlag := true ;
58916: LD_ADDR_EXP 66
58920: PUSH
58921: LD_INT 1
58923: ST_TO_ADDR
// if p3 = 15 then
58924: LD_VAR 0 3
58928: PUSH
58929: LD_INT 15
58931: EQUAL
58932: IFFALSE 58942
// sKamikadze := true ;
58934: LD_ADDR_EXP 74
58938: PUSH
58939: LD_INT 1
58941: ST_TO_ADDR
// if p3 = 16 then
58942: LD_VAR 0 3
58946: PUSH
58947: LD_INT 16
58949: EQUAL
58950: IFFALSE 58960
// sTroll := true ;
58952: LD_ADDR_EXP 75
58956: PUSH
58957: LD_INT 1
58959: ST_TO_ADDR
// if p3 = 17 then
58960: LD_VAR 0 3
58964: PUSH
58965: LD_INT 17
58967: EQUAL
58968: IFFALSE 58978
// sSlow := true ;
58970: LD_ADDR_EXP 76
58974: PUSH
58975: LD_INT 1
58977: ST_TO_ADDR
// if p3 = 18 then
58978: LD_VAR 0 3
58982: PUSH
58983: LD_INT 18
58985: EQUAL
58986: IFFALSE 58996
// sLack := true ;
58988: LD_ADDR_EXP 77
58992: PUSH
58993: LD_INT 1
58995: ST_TO_ADDR
// if p3 = 19 then
58996: LD_VAR 0 3
59000: PUSH
59001: LD_INT 19
59003: EQUAL
59004: IFFALSE 59014
// sTank := true ;
59006: LD_ADDR_EXP 79
59010: PUSH
59011: LD_INT 1
59013: ST_TO_ADDR
// if p3 = 20 then
59014: LD_VAR 0 3
59018: PUSH
59019: LD_INT 20
59021: EQUAL
59022: IFFALSE 59032
// sRemote := true ;
59024: LD_ADDR_EXP 80
59028: PUSH
59029: LD_INT 1
59031: ST_TO_ADDR
// if p3 = 21 then
59032: LD_VAR 0 3
59036: PUSH
59037: LD_INT 21
59039: EQUAL
59040: IFFALSE 59050
// sPowell := true ;
59042: LD_ADDR_EXP 81
59046: PUSH
59047: LD_INT 1
59049: ST_TO_ADDR
// if p3 = 22 then
59050: LD_VAR 0 3
59054: PUSH
59055: LD_INT 22
59057: EQUAL
59058: IFFALSE 59068
// sTeleport := true ;
59060: LD_ADDR_EXP 84
59064: PUSH
59065: LD_INT 1
59067: ST_TO_ADDR
// if p3 = 23 then
59068: LD_VAR 0 3
59072: PUSH
59073: LD_INT 23
59075: EQUAL
59076: IFFALSE 59086
// sOilTower := true ;
59078: LD_ADDR_EXP 86
59082: PUSH
59083: LD_INT 1
59085: ST_TO_ADDR
// if p3 = 24 then
59086: LD_VAR 0 3
59090: PUSH
59091: LD_INT 24
59093: EQUAL
59094: IFFALSE 59104
// sShovel := true ;
59096: LD_ADDR_EXP 87
59100: PUSH
59101: LD_INT 1
59103: ST_TO_ADDR
// if p3 = 25 then
59104: LD_VAR 0 3
59108: PUSH
59109: LD_INT 25
59111: EQUAL
59112: IFFALSE 59122
// sSheik := true ;
59114: LD_ADDR_EXP 88
59118: PUSH
59119: LD_INT 1
59121: ST_TO_ADDR
// if p3 = 26 then
59122: LD_VAR 0 3
59126: PUSH
59127: LD_INT 26
59129: EQUAL
59130: IFFALSE 59140
// sEarthquake := true ;
59132: LD_ADDR_EXP 90
59136: PUSH
59137: LD_INT 1
59139: ST_TO_ADDR
// if p3 = 27 then
59140: LD_VAR 0 3
59144: PUSH
59145: LD_INT 27
59147: EQUAL
59148: IFFALSE 59158
// sAI := true ;
59150: LD_ADDR_EXP 91
59154: PUSH
59155: LD_INT 1
59157: ST_TO_ADDR
// if p3 = 28 then
59158: LD_VAR 0 3
59162: PUSH
59163: LD_INT 28
59165: EQUAL
59166: IFFALSE 59176
// sCargo := true ;
59168: LD_ADDR_EXP 94
59172: PUSH
59173: LD_INT 1
59175: ST_TO_ADDR
// if p3 = 29 then
59176: LD_VAR 0 3
59180: PUSH
59181: LD_INT 29
59183: EQUAL
59184: IFFALSE 59194
// sDLaser := true ;
59186: LD_ADDR_EXP 95
59190: PUSH
59191: LD_INT 1
59193: ST_TO_ADDR
// if p3 = 30 then
59194: LD_VAR 0 3
59198: PUSH
59199: LD_INT 30
59201: EQUAL
59202: IFFALSE 59212
// sExchange := true ;
59204: LD_ADDR_EXP 96
59208: PUSH
59209: LD_INT 1
59211: ST_TO_ADDR
// if p3 = 31 then
59212: LD_VAR 0 3
59216: PUSH
59217: LD_INT 31
59219: EQUAL
59220: IFFALSE 59230
// sFac := true ;
59222: LD_ADDR_EXP 97
59226: PUSH
59227: LD_INT 1
59229: ST_TO_ADDR
// if p3 = 32 then
59230: LD_VAR 0 3
59234: PUSH
59235: LD_INT 32
59237: EQUAL
59238: IFFALSE 59248
// sPower := true ;
59240: LD_ADDR_EXP 98
59244: PUSH
59245: LD_INT 1
59247: ST_TO_ADDR
// if p3 = 33 then
59248: LD_VAR 0 3
59252: PUSH
59253: LD_INT 33
59255: EQUAL
59256: IFFALSE 59266
// sRandom := true ;
59258: LD_ADDR_EXP 99
59262: PUSH
59263: LD_INT 1
59265: ST_TO_ADDR
// if p3 = 34 then
59266: LD_VAR 0 3
59270: PUSH
59271: LD_INT 34
59273: EQUAL
59274: IFFALSE 59284
// sShield := true ;
59276: LD_ADDR_EXP 100
59280: PUSH
59281: LD_INT 1
59283: ST_TO_ADDR
// if p3 = 35 then
59284: LD_VAR 0 3
59288: PUSH
59289: LD_INT 35
59291: EQUAL
59292: IFFALSE 59302
// sTime := true ;
59294: LD_ADDR_EXP 101
59298: PUSH
59299: LD_INT 1
59301: ST_TO_ADDR
// if p3 = 36 then
59302: LD_VAR 0 3
59306: PUSH
59307: LD_INT 36
59309: EQUAL
59310: IFFALSE 59320
// sTools := true ;
59312: LD_ADDR_EXP 102
59316: PUSH
59317: LD_INT 1
59319: ST_TO_ADDR
// if p3 = 101 then
59320: LD_VAR 0 3
59324: PUSH
59325: LD_INT 101
59327: EQUAL
59328: IFFALSE 59338
// sSold := true ;
59330: LD_ADDR_EXP 67
59334: PUSH
59335: LD_INT 1
59337: ST_TO_ADDR
// if p3 = 102 then
59338: LD_VAR 0 3
59342: PUSH
59343: LD_INT 102
59345: EQUAL
59346: IFFALSE 59356
// sDiff := true ;
59348: LD_ADDR_EXP 68
59352: PUSH
59353: LD_INT 1
59355: ST_TO_ADDR
// if p3 = 103 then
59356: LD_VAR 0 3
59360: PUSH
59361: LD_INT 103
59363: EQUAL
59364: IFFALSE 59374
// sFog := true ;
59366: LD_ADDR_EXP 71
59370: PUSH
59371: LD_INT 1
59373: ST_TO_ADDR
// if p3 = 104 then
59374: LD_VAR 0 3
59378: PUSH
59379: LD_INT 104
59381: EQUAL
59382: IFFALSE 59392
// sReset := true ;
59384: LD_ADDR_EXP 72
59388: PUSH
59389: LD_INT 1
59391: ST_TO_ADDR
// if p3 = 105 then
59392: LD_VAR 0 3
59396: PUSH
59397: LD_INT 105
59399: EQUAL
59400: IFFALSE 59410
// sSun := true ;
59402: LD_ADDR_EXP 73
59406: PUSH
59407: LD_INT 1
59409: ST_TO_ADDR
// if p3 = 106 then
59410: LD_VAR 0 3
59414: PUSH
59415: LD_INT 106
59417: EQUAL
59418: IFFALSE 59428
// sTiger := true ;
59420: LD_ADDR_EXP 69
59424: PUSH
59425: LD_INT 1
59427: ST_TO_ADDR
// if p3 = 107 then
59428: LD_VAR 0 3
59432: PUSH
59433: LD_INT 107
59435: EQUAL
59436: IFFALSE 59446
// sBomb := true ;
59438: LD_ADDR_EXP 70
59442: PUSH
59443: LD_INT 1
59445: ST_TO_ADDR
// if p3 = 108 then
59446: LD_VAR 0 3
59450: PUSH
59451: LD_INT 108
59453: EQUAL
59454: IFFALSE 59464
// sWound := true ;
59456: LD_ADDR_EXP 78
59460: PUSH
59461: LD_INT 1
59463: ST_TO_ADDR
// if p3 = 109 then
59464: LD_VAR 0 3
59468: PUSH
59469: LD_INT 109
59471: EQUAL
59472: IFFALSE 59482
// sBetray := true ;
59474: LD_ADDR_EXP 82
59478: PUSH
59479: LD_INT 1
59481: ST_TO_ADDR
// if p3 = 110 then
59482: LD_VAR 0 3
59486: PUSH
59487: LD_INT 110
59489: EQUAL
59490: IFFALSE 59500
// sContamin := true ;
59492: LD_ADDR_EXP 83
59496: PUSH
59497: LD_INT 1
59499: ST_TO_ADDR
// if p3 = 111 then
59500: LD_VAR 0 3
59504: PUSH
59505: LD_INT 111
59507: EQUAL
59508: IFFALSE 59518
// sOil := true ;
59510: LD_ADDR_EXP 85
59514: PUSH
59515: LD_INT 1
59517: ST_TO_ADDR
// if p3 = 112 then
59518: LD_VAR 0 3
59522: PUSH
59523: LD_INT 112
59525: EQUAL
59526: IFFALSE 59536
// sStu := true ;
59528: LD_ADDR_EXP 89
59532: PUSH
59533: LD_INT 1
59535: ST_TO_ADDR
// if p3 = 113 then
59536: LD_VAR 0 3
59540: PUSH
59541: LD_INT 113
59543: EQUAL
59544: IFFALSE 59554
// sBazooka := true ;
59546: LD_ADDR_EXP 92
59550: PUSH
59551: LD_INT 1
59553: ST_TO_ADDR
// if p3 = 114 then
59554: LD_VAR 0 3
59558: PUSH
59559: LD_INT 114
59561: EQUAL
59562: IFFALSE 59572
// sMortar := true ;
59564: LD_ADDR_EXP 93
59568: PUSH
59569: LD_INT 1
59571: ST_TO_ADDR
// if p3 = 115 then
59572: LD_VAR 0 3
59576: PUSH
59577: LD_INT 115
59579: EQUAL
59580: IFFALSE 59590
// sRanger := true ;
59582: LD_ADDR_EXP 103
59586: PUSH
59587: LD_INT 1
59589: ST_TO_ADDR
// if p3 = 116 then
59590: LD_VAR 0 3
59594: PUSH
59595: LD_INT 116
59597: EQUAL
59598: IFFALSE 59608
// sComputer := true ;
59600: LD_ADDR_EXP 104
59604: PUSH
59605: LD_INT 1
59607: ST_TO_ADDR
// if p3 = 117 then
59608: LD_VAR 0 3
59612: PUSH
59613: LD_INT 117
59615: EQUAL
59616: IFFALSE 59626
// s30 := true ;
59618: LD_ADDR_EXP 105
59622: PUSH
59623: LD_INT 1
59625: ST_TO_ADDR
// if p3 = 118 then
59626: LD_VAR 0 3
59630: PUSH
59631: LD_INT 118
59633: EQUAL
59634: IFFALSE 59644
// s60 := true ;
59636: LD_ADDR_EXP 106
59640: PUSH
59641: LD_INT 1
59643: ST_TO_ADDR
// end ; if p2 = hack_mode then
59644: LD_VAR 0 2
59648: PUSH
59649: LD_INT 101
59651: EQUAL
59652: IFFALSE 59780
// begin case p3 of 1 :
59654: LD_VAR 0 3
59658: PUSH
59659: LD_INT 1
59661: DOUBLE
59662: EQUAL
59663: IFTRUE 59667
59665: GO 59674
59667: POP
// hHackUnlimitedResources ; 2 :
59668: CALL 71927 0 0
59672: GO 59780
59674: LD_INT 2
59676: DOUBLE
59677: EQUAL
59678: IFTRUE 59682
59680: GO 59689
59682: POP
// hHackSetLevel10 ; 3 :
59683: CALL 72060 0 0
59687: GO 59780
59689: LD_INT 3
59691: DOUBLE
59692: EQUAL
59693: IFTRUE 59697
59695: GO 59704
59697: POP
// hHackSetLevel10YourUnits ; 4 :
59698: CALL 72145 0 0
59702: GO 59780
59704: LD_INT 4
59706: DOUBLE
59707: EQUAL
59708: IFTRUE 59712
59710: GO 59719
59712: POP
// hHackInvincible ; 5 :
59713: CALL 72593 0 0
59717: GO 59780
59719: LD_INT 5
59721: DOUBLE
59722: EQUAL
59723: IFTRUE 59727
59725: GO 59734
59727: POP
// hHackInvisible ; 6 :
59728: CALL 72704 0 0
59732: GO 59780
59734: LD_INT 6
59736: DOUBLE
59737: EQUAL
59738: IFTRUE 59742
59740: GO 59749
59742: POP
// hHackChangeYourSide ; 7 :
59743: CALL 72761 0 0
59747: GO 59780
59749: LD_INT 7
59751: DOUBLE
59752: EQUAL
59753: IFTRUE 59757
59755: GO 59764
59757: POP
// hHackChangeUnitSide ; 8 :
59758: CALL 72803 0 0
59762: GO 59780
59764: LD_INT 8
59766: DOUBLE
59767: EQUAL
59768: IFTRUE 59772
59770: GO 59779
59772: POP
// hHackFog ; end ;
59773: CALL 72904 0 0
59777: GO 59780
59779: POP
// end ; if p2 = game_save_mode then
59780: LD_VAR 0 2
59784: PUSH
59785: LD_INT 102
59787: EQUAL
59788: IFFALSE 59843
// begin if p3 = 1 then
59790: LD_VAR 0 3
59794: PUSH
59795: LD_INT 1
59797: EQUAL
59798: IFFALSE 59810
// globalGameSaveCounter := p4 ;
59800: LD_ADDR_EXP 49
59804: PUSH
59805: LD_VAR 0 4
59809: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59810: LD_VAR 0 3
59814: PUSH
59815: LD_INT 2
59817: EQUAL
59818: PUSH
59819: LD_EXP 49
59823: AND
59824: IFFALSE 59843
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59826: LD_STRING setGameSaveCounter(
59828: PUSH
59829: LD_EXP 49
59833: STR
59834: PUSH
59835: LD_STRING )
59837: STR
59838: PPUSH
59839: CALL_OW 559
// end ; end ;
59843: LD_VAR 0 7
59847: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59848: LD_INT 0
59850: PPUSH
// streamModeActive := false ;
59851: LD_ADDR_EXP 50
59855: PUSH
59856: LD_INT 0
59858: ST_TO_ADDR
// normalCounter := 36 ;
59859: LD_ADDR_EXP 51
59863: PUSH
59864: LD_INT 36
59866: ST_TO_ADDR
// hardcoreCounter := 18 ;
59867: LD_ADDR_EXP 52
59871: PUSH
59872: LD_INT 18
59874: ST_TO_ADDR
// sRocket := false ;
59875: LD_ADDR_EXP 55
59879: PUSH
59880: LD_INT 0
59882: ST_TO_ADDR
// sSpeed := false ;
59883: LD_ADDR_EXP 54
59887: PUSH
59888: LD_INT 0
59890: ST_TO_ADDR
// sEngine := false ;
59891: LD_ADDR_EXP 56
59895: PUSH
59896: LD_INT 0
59898: ST_TO_ADDR
// sSpec := false ;
59899: LD_ADDR_EXP 53
59903: PUSH
59904: LD_INT 0
59906: ST_TO_ADDR
// sLevel := false ;
59907: LD_ADDR_EXP 57
59911: PUSH
59912: LD_INT 0
59914: ST_TO_ADDR
// sArmoury := false ;
59915: LD_ADDR_EXP 58
59919: PUSH
59920: LD_INT 0
59922: ST_TO_ADDR
// sRadar := false ;
59923: LD_ADDR_EXP 59
59927: PUSH
59928: LD_INT 0
59930: ST_TO_ADDR
// sBunker := false ;
59931: LD_ADDR_EXP 60
59935: PUSH
59936: LD_INT 0
59938: ST_TO_ADDR
// sHack := false ;
59939: LD_ADDR_EXP 61
59943: PUSH
59944: LD_INT 0
59946: ST_TO_ADDR
// sFire := false ;
59947: LD_ADDR_EXP 62
59951: PUSH
59952: LD_INT 0
59954: ST_TO_ADDR
// sRefresh := false ;
59955: LD_ADDR_EXP 63
59959: PUSH
59960: LD_INT 0
59962: ST_TO_ADDR
// sExp := false ;
59963: LD_ADDR_EXP 64
59967: PUSH
59968: LD_INT 0
59970: ST_TO_ADDR
// sDepot := false ;
59971: LD_ADDR_EXP 65
59975: PUSH
59976: LD_INT 0
59978: ST_TO_ADDR
// sFlag := false ;
59979: LD_ADDR_EXP 66
59983: PUSH
59984: LD_INT 0
59986: ST_TO_ADDR
// sKamikadze := false ;
59987: LD_ADDR_EXP 74
59991: PUSH
59992: LD_INT 0
59994: ST_TO_ADDR
// sTroll := false ;
59995: LD_ADDR_EXP 75
59999: PUSH
60000: LD_INT 0
60002: ST_TO_ADDR
// sSlow := false ;
60003: LD_ADDR_EXP 76
60007: PUSH
60008: LD_INT 0
60010: ST_TO_ADDR
// sLack := false ;
60011: LD_ADDR_EXP 77
60015: PUSH
60016: LD_INT 0
60018: ST_TO_ADDR
// sTank := false ;
60019: LD_ADDR_EXP 79
60023: PUSH
60024: LD_INT 0
60026: ST_TO_ADDR
// sRemote := false ;
60027: LD_ADDR_EXP 80
60031: PUSH
60032: LD_INT 0
60034: ST_TO_ADDR
// sPowell := false ;
60035: LD_ADDR_EXP 81
60039: PUSH
60040: LD_INT 0
60042: ST_TO_ADDR
// sTeleport := false ;
60043: LD_ADDR_EXP 84
60047: PUSH
60048: LD_INT 0
60050: ST_TO_ADDR
// sOilTower := false ;
60051: LD_ADDR_EXP 86
60055: PUSH
60056: LD_INT 0
60058: ST_TO_ADDR
// sShovel := false ;
60059: LD_ADDR_EXP 87
60063: PUSH
60064: LD_INT 0
60066: ST_TO_ADDR
// sSheik := false ;
60067: LD_ADDR_EXP 88
60071: PUSH
60072: LD_INT 0
60074: ST_TO_ADDR
// sEarthquake := false ;
60075: LD_ADDR_EXP 90
60079: PUSH
60080: LD_INT 0
60082: ST_TO_ADDR
// sAI := false ;
60083: LD_ADDR_EXP 91
60087: PUSH
60088: LD_INT 0
60090: ST_TO_ADDR
// sCargo := false ;
60091: LD_ADDR_EXP 94
60095: PUSH
60096: LD_INT 0
60098: ST_TO_ADDR
// sDLaser := false ;
60099: LD_ADDR_EXP 95
60103: PUSH
60104: LD_INT 0
60106: ST_TO_ADDR
// sExchange := false ;
60107: LD_ADDR_EXP 96
60111: PUSH
60112: LD_INT 0
60114: ST_TO_ADDR
// sFac := false ;
60115: LD_ADDR_EXP 97
60119: PUSH
60120: LD_INT 0
60122: ST_TO_ADDR
// sPower := false ;
60123: LD_ADDR_EXP 98
60127: PUSH
60128: LD_INT 0
60130: ST_TO_ADDR
// sRandom := false ;
60131: LD_ADDR_EXP 99
60135: PUSH
60136: LD_INT 0
60138: ST_TO_ADDR
// sShield := false ;
60139: LD_ADDR_EXP 100
60143: PUSH
60144: LD_INT 0
60146: ST_TO_ADDR
// sTime := false ;
60147: LD_ADDR_EXP 101
60151: PUSH
60152: LD_INT 0
60154: ST_TO_ADDR
// sTools := false ;
60155: LD_ADDR_EXP 102
60159: PUSH
60160: LD_INT 0
60162: ST_TO_ADDR
// sSold := false ;
60163: LD_ADDR_EXP 67
60167: PUSH
60168: LD_INT 0
60170: ST_TO_ADDR
// sDiff := false ;
60171: LD_ADDR_EXP 68
60175: PUSH
60176: LD_INT 0
60178: ST_TO_ADDR
// sFog := false ;
60179: LD_ADDR_EXP 71
60183: PUSH
60184: LD_INT 0
60186: ST_TO_ADDR
// sReset := false ;
60187: LD_ADDR_EXP 72
60191: PUSH
60192: LD_INT 0
60194: ST_TO_ADDR
// sSun := false ;
60195: LD_ADDR_EXP 73
60199: PUSH
60200: LD_INT 0
60202: ST_TO_ADDR
// sTiger := false ;
60203: LD_ADDR_EXP 69
60207: PUSH
60208: LD_INT 0
60210: ST_TO_ADDR
// sBomb := false ;
60211: LD_ADDR_EXP 70
60215: PUSH
60216: LD_INT 0
60218: ST_TO_ADDR
// sWound := false ;
60219: LD_ADDR_EXP 78
60223: PUSH
60224: LD_INT 0
60226: ST_TO_ADDR
// sBetray := false ;
60227: LD_ADDR_EXP 82
60231: PUSH
60232: LD_INT 0
60234: ST_TO_ADDR
// sContamin := false ;
60235: LD_ADDR_EXP 83
60239: PUSH
60240: LD_INT 0
60242: ST_TO_ADDR
// sOil := false ;
60243: LD_ADDR_EXP 85
60247: PUSH
60248: LD_INT 0
60250: ST_TO_ADDR
// sStu := false ;
60251: LD_ADDR_EXP 89
60255: PUSH
60256: LD_INT 0
60258: ST_TO_ADDR
// sBazooka := false ;
60259: LD_ADDR_EXP 92
60263: PUSH
60264: LD_INT 0
60266: ST_TO_ADDR
// sMortar := false ;
60267: LD_ADDR_EXP 93
60271: PUSH
60272: LD_INT 0
60274: ST_TO_ADDR
// sRanger := false ;
60275: LD_ADDR_EXP 103
60279: PUSH
60280: LD_INT 0
60282: ST_TO_ADDR
// sComputer := false ;
60283: LD_ADDR_EXP 104
60287: PUSH
60288: LD_INT 0
60290: ST_TO_ADDR
// s30 := false ;
60291: LD_ADDR_EXP 105
60295: PUSH
60296: LD_INT 0
60298: ST_TO_ADDR
// s60 := false ;
60299: LD_ADDR_EXP 106
60303: PUSH
60304: LD_INT 0
60306: ST_TO_ADDR
// end ;
60307: LD_VAR 0 1
60311: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
60312: LD_INT 0
60314: PPUSH
60315: PPUSH
60316: PPUSH
60317: PPUSH
60318: PPUSH
60319: PPUSH
60320: PPUSH
// result := [ ] ;
60321: LD_ADDR_VAR 0 2
60325: PUSH
60326: EMPTY
60327: ST_TO_ADDR
// if campaign_id = 1 then
60328: LD_OWVAR 69
60332: PUSH
60333: LD_INT 1
60335: EQUAL
60336: IFFALSE 63502
// begin case mission_number of 1 :
60338: LD_OWVAR 70
60342: PUSH
60343: LD_INT 1
60345: DOUBLE
60346: EQUAL
60347: IFTRUE 60351
60349: GO 60427
60351: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
60352: LD_ADDR_VAR 0 2
60356: PUSH
60357: LD_INT 2
60359: PUSH
60360: LD_INT 4
60362: PUSH
60363: LD_INT 11
60365: PUSH
60366: LD_INT 12
60368: PUSH
60369: LD_INT 15
60371: PUSH
60372: LD_INT 16
60374: PUSH
60375: LD_INT 22
60377: PUSH
60378: LD_INT 23
60380: PUSH
60381: LD_INT 26
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 101
60397: PUSH
60398: LD_INT 102
60400: PUSH
60401: LD_INT 106
60403: PUSH
60404: LD_INT 116
60406: PUSH
60407: LD_INT 117
60409: PUSH
60410: LD_INT 118
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: ST_TO_ADDR
60425: GO 63500
60427: LD_INT 2
60429: DOUBLE
60430: EQUAL
60431: IFTRUE 60435
60433: GO 60519
60435: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
60436: LD_ADDR_VAR 0 2
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: LD_INT 4
60446: PUSH
60447: LD_INT 11
60449: PUSH
60450: LD_INT 12
60452: PUSH
60453: LD_INT 15
60455: PUSH
60456: LD_INT 16
60458: PUSH
60459: LD_INT 22
60461: PUSH
60462: LD_INT 23
60464: PUSH
60465: LD_INT 26
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 101
60481: PUSH
60482: LD_INT 102
60484: PUSH
60485: LD_INT 105
60487: PUSH
60488: LD_INT 106
60490: PUSH
60491: LD_INT 108
60493: PUSH
60494: LD_INT 116
60496: PUSH
60497: LD_INT 117
60499: PUSH
60500: LD_INT 118
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: ST_TO_ADDR
60517: GO 63500
60519: LD_INT 3
60521: DOUBLE
60522: EQUAL
60523: IFTRUE 60527
60525: GO 60615
60527: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60528: LD_ADDR_VAR 0 2
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: LD_INT 4
60538: PUSH
60539: LD_INT 5
60541: PUSH
60542: LD_INT 11
60544: PUSH
60545: LD_INT 12
60547: PUSH
60548: LD_INT 15
60550: PUSH
60551: LD_INT 16
60553: PUSH
60554: LD_INT 22
60556: PUSH
60557: LD_INT 26
60559: PUSH
60560: LD_INT 36
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 101
60577: PUSH
60578: LD_INT 102
60580: PUSH
60581: LD_INT 105
60583: PUSH
60584: LD_INT 106
60586: PUSH
60587: LD_INT 108
60589: PUSH
60590: LD_INT 116
60592: PUSH
60593: LD_INT 117
60595: PUSH
60596: LD_INT 118
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: ST_TO_ADDR
60613: GO 63500
60615: LD_INT 4
60617: DOUBLE
60618: EQUAL
60619: IFTRUE 60623
60621: GO 60719
60623: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60624: LD_ADDR_VAR 0 2
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: LD_INT 4
60634: PUSH
60635: LD_INT 5
60637: PUSH
60638: LD_INT 8
60640: PUSH
60641: LD_INT 11
60643: PUSH
60644: LD_INT 12
60646: PUSH
60647: LD_INT 15
60649: PUSH
60650: LD_INT 16
60652: PUSH
60653: LD_INT 22
60655: PUSH
60656: LD_INT 23
60658: PUSH
60659: LD_INT 26
60661: PUSH
60662: LD_INT 36
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 101
60681: PUSH
60682: LD_INT 102
60684: PUSH
60685: LD_INT 105
60687: PUSH
60688: LD_INT 106
60690: PUSH
60691: LD_INT 108
60693: PUSH
60694: LD_INT 116
60696: PUSH
60697: LD_INT 117
60699: PUSH
60700: LD_INT 118
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: ST_TO_ADDR
60717: GO 63500
60719: LD_INT 5
60721: DOUBLE
60722: EQUAL
60723: IFTRUE 60727
60725: GO 60839
60727: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60728: LD_ADDR_VAR 0 2
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: LD_INT 4
60738: PUSH
60739: LD_INT 5
60741: PUSH
60742: LD_INT 6
60744: PUSH
60745: LD_INT 8
60747: PUSH
60748: LD_INT 11
60750: PUSH
60751: LD_INT 12
60753: PUSH
60754: LD_INT 15
60756: PUSH
60757: LD_INT 16
60759: PUSH
60760: LD_INT 22
60762: PUSH
60763: LD_INT 23
60765: PUSH
60766: LD_INT 25
60768: PUSH
60769: LD_INT 26
60771: PUSH
60772: LD_INT 36
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 101
60793: PUSH
60794: LD_INT 102
60796: PUSH
60797: LD_INT 105
60799: PUSH
60800: LD_INT 106
60802: PUSH
60803: LD_INT 108
60805: PUSH
60806: LD_INT 109
60808: PUSH
60809: LD_INT 112
60811: PUSH
60812: LD_INT 116
60814: PUSH
60815: LD_INT 117
60817: PUSH
60818: LD_INT 118
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: ST_TO_ADDR
60837: GO 63500
60839: LD_INT 6
60841: DOUBLE
60842: EQUAL
60843: IFTRUE 60847
60845: GO 60979
60847: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60848: LD_ADDR_VAR 0 2
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: LD_INT 4
60858: PUSH
60859: LD_INT 5
60861: PUSH
60862: LD_INT 6
60864: PUSH
60865: LD_INT 8
60867: PUSH
60868: LD_INT 11
60870: PUSH
60871: LD_INT 12
60873: PUSH
60874: LD_INT 15
60876: PUSH
60877: LD_INT 16
60879: PUSH
60880: LD_INT 20
60882: PUSH
60883: LD_INT 21
60885: PUSH
60886: LD_INT 22
60888: PUSH
60889: LD_INT 23
60891: PUSH
60892: LD_INT 25
60894: PUSH
60895: LD_INT 26
60897: PUSH
60898: LD_INT 30
60900: PUSH
60901: LD_INT 31
60903: PUSH
60904: LD_INT 32
60906: PUSH
60907: LD_INT 36
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 101
60933: PUSH
60934: LD_INT 102
60936: PUSH
60937: LD_INT 105
60939: PUSH
60940: LD_INT 106
60942: PUSH
60943: LD_INT 108
60945: PUSH
60946: LD_INT 109
60948: PUSH
60949: LD_INT 112
60951: PUSH
60952: LD_INT 116
60954: PUSH
60955: LD_INT 117
60957: PUSH
60958: LD_INT 118
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: ST_TO_ADDR
60977: GO 63500
60979: LD_INT 7
60981: DOUBLE
60982: EQUAL
60983: IFTRUE 60987
60985: GO 61099
60987: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60988: LD_ADDR_VAR 0 2
60992: PUSH
60993: LD_INT 2
60995: PUSH
60996: LD_INT 4
60998: PUSH
60999: LD_INT 5
61001: PUSH
61002: LD_INT 7
61004: PUSH
61005: LD_INT 11
61007: PUSH
61008: LD_INT 12
61010: PUSH
61011: LD_INT 15
61013: PUSH
61014: LD_INT 16
61016: PUSH
61017: LD_INT 20
61019: PUSH
61020: LD_INT 21
61022: PUSH
61023: LD_INT 22
61025: PUSH
61026: LD_INT 23
61028: PUSH
61029: LD_INT 25
61031: PUSH
61032: LD_INT 26
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 101
61053: PUSH
61054: LD_INT 102
61056: PUSH
61057: LD_INT 103
61059: PUSH
61060: LD_INT 105
61062: PUSH
61063: LD_INT 106
61065: PUSH
61066: LD_INT 108
61068: PUSH
61069: LD_INT 112
61071: PUSH
61072: LD_INT 116
61074: PUSH
61075: LD_INT 117
61077: PUSH
61078: LD_INT 118
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: ST_TO_ADDR
61097: GO 63500
61099: LD_INT 8
61101: DOUBLE
61102: EQUAL
61103: IFTRUE 61107
61105: GO 61247
61107: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
61108: LD_ADDR_VAR 0 2
61112: PUSH
61113: LD_INT 2
61115: PUSH
61116: LD_INT 4
61118: PUSH
61119: LD_INT 5
61121: PUSH
61122: LD_INT 6
61124: PUSH
61125: LD_INT 7
61127: PUSH
61128: LD_INT 8
61130: PUSH
61131: LD_INT 11
61133: PUSH
61134: LD_INT 12
61136: PUSH
61137: LD_INT 15
61139: PUSH
61140: LD_INT 16
61142: PUSH
61143: LD_INT 20
61145: PUSH
61146: LD_INT 21
61148: PUSH
61149: LD_INT 22
61151: PUSH
61152: LD_INT 23
61154: PUSH
61155: LD_INT 25
61157: PUSH
61158: LD_INT 26
61160: PUSH
61161: LD_INT 30
61163: PUSH
61164: LD_INT 31
61166: PUSH
61167: LD_INT 32
61169: PUSH
61170: LD_INT 36
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 101
61197: PUSH
61198: LD_INT 102
61200: PUSH
61201: LD_INT 103
61203: PUSH
61204: LD_INT 105
61206: PUSH
61207: LD_INT 106
61209: PUSH
61210: LD_INT 108
61212: PUSH
61213: LD_INT 109
61215: PUSH
61216: LD_INT 112
61218: PUSH
61219: LD_INT 116
61221: PUSH
61222: LD_INT 117
61224: PUSH
61225: LD_INT 118
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: ST_TO_ADDR
61245: GO 63500
61247: LD_INT 9
61249: DOUBLE
61250: EQUAL
61251: IFTRUE 61255
61253: GO 61403
61255: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
61256: LD_ADDR_VAR 0 2
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: LD_INT 4
61266: PUSH
61267: LD_INT 5
61269: PUSH
61270: LD_INT 6
61272: PUSH
61273: LD_INT 7
61275: PUSH
61276: LD_INT 8
61278: PUSH
61279: LD_INT 11
61281: PUSH
61282: LD_INT 12
61284: PUSH
61285: LD_INT 15
61287: PUSH
61288: LD_INT 16
61290: PUSH
61291: LD_INT 20
61293: PUSH
61294: LD_INT 21
61296: PUSH
61297: LD_INT 22
61299: PUSH
61300: LD_INT 23
61302: PUSH
61303: LD_INT 25
61305: PUSH
61306: LD_INT 26
61308: PUSH
61309: LD_INT 28
61311: PUSH
61312: LD_INT 30
61314: PUSH
61315: LD_INT 31
61317: PUSH
61318: LD_INT 32
61320: PUSH
61321: LD_INT 36
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 101
61349: PUSH
61350: LD_INT 102
61352: PUSH
61353: LD_INT 103
61355: PUSH
61356: LD_INT 105
61358: PUSH
61359: LD_INT 106
61361: PUSH
61362: LD_INT 108
61364: PUSH
61365: LD_INT 109
61367: PUSH
61368: LD_INT 112
61370: PUSH
61371: LD_INT 114
61373: PUSH
61374: LD_INT 116
61376: PUSH
61377: LD_INT 117
61379: PUSH
61380: LD_INT 118
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: ST_TO_ADDR
61401: GO 63500
61403: LD_INT 10
61405: DOUBLE
61406: EQUAL
61407: IFTRUE 61411
61409: GO 61607
61411: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
61412: LD_ADDR_VAR 0 2
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: LD_INT 4
61422: PUSH
61423: LD_INT 5
61425: PUSH
61426: LD_INT 6
61428: PUSH
61429: LD_INT 7
61431: PUSH
61432: LD_INT 8
61434: PUSH
61435: LD_INT 9
61437: PUSH
61438: LD_INT 10
61440: PUSH
61441: LD_INT 11
61443: PUSH
61444: LD_INT 12
61446: PUSH
61447: LD_INT 13
61449: PUSH
61450: LD_INT 14
61452: PUSH
61453: LD_INT 15
61455: PUSH
61456: LD_INT 16
61458: PUSH
61459: LD_INT 17
61461: PUSH
61462: LD_INT 18
61464: PUSH
61465: LD_INT 19
61467: PUSH
61468: LD_INT 20
61470: PUSH
61471: LD_INT 21
61473: PUSH
61474: LD_INT 22
61476: PUSH
61477: LD_INT 23
61479: PUSH
61480: LD_INT 24
61482: PUSH
61483: LD_INT 25
61485: PUSH
61486: LD_INT 26
61488: PUSH
61489: LD_INT 28
61491: PUSH
61492: LD_INT 30
61494: PUSH
61495: LD_INT 31
61497: PUSH
61498: LD_INT 32
61500: PUSH
61501: LD_INT 36
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 101
61537: PUSH
61538: LD_INT 102
61540: PUSH
61541: LD_INT 103
61543: PUSH
61544: LD_INT 104
61546: PUSH
61547: LD_INT 105
61549: PUSH
61550: LD_INT 106
61552: PUSH
61553: LD_INT 107
61555: PUSH
61556: LD_INT 108
61558: PUSH
61559: LD_INT 109
61561: PUSH
61562: LD_INT 110
61564: PUSH
61565: LD_INT 111
61567: PUSH
61568: LD_INT 112
61570: PUSH
61571: LD_INT 114
61573: PUSH
61574: LD_INT 116
61576: PUSH
61577: LD_INT 117
61579: PUSH
61580: LD_INT 118
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: ST_TO_ADDR
61605: GO 63500
61607: LD_INT 11
61609: DOUBLE
61610: EQUAL
61611: IFTRUE 61615
61613: GO 61819
61615: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61616: LD_ADDR_VAR 0 2
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: LD_INT 4
61629: PUSH
61630: LD_INT 5
61632: PUSH
61633: LD_INT 6
61635: PUSH
61636: LD_INT 7
61638: PUSH
61639: LD_INT 8
61641: PUSH
61642: LD_INT 9
61644: PUSH
61645: LD_INT 10
61647: PUSH
61648: LD_INT 11
61650: PUSH
61651: LD_INT 12
61653: PUSH
61654: LD_INT 13
61656: PUSH
61657: LD_INT 14
61659: PUSH
61660: LD_INT 15
61662: PUSH
61663: LD_INT 16
61665: PUSH
61666: LD_INT 17
61668: PUSH
61669: LD_INT 18
61671: PUSH
61672: LD_INT 19
61674: PUSH
61675: LD_INT 20
61677: PUSH
61678: LD_INT 21
61680: PUSH
61681: LD_INT 22
61683: PUSH
61684: LD_INT 23
61686: PUSH
61687: LD_INT 24
61689: PUSH
61690: LD_INT 25
61692: PUSH
61693: LD_INT 26
61695: PUSH
61696: LD_INT 28
61698: PUSH
61699: LD_INT 30
61701: PUSH
61702: LD_INT 31
61704: PUSH
61705: LD_INT 32
61707: PUSH
61708: LD_INT 34
61710: PUSH
61711: LD_INT 36
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 101
61749: PUSH
61750: LD_INT 102
61752: PUSH
61753: LD_INT 103
61755: PUSH
61756: LD_INT 104
61758: PUSH
61759: LD_INT 105
61761: PUSH
61762: LD_INT 106
61764: PUSH
61765: LD_INT 107
61767: PUSH
61768: LD_INT 108
61770: PUSH
61771: LD_INT 109
61773: PUSH
61774: LD_INT 110
61776: PUSH
61777: LD_INT 111
61779: PUSH
61780: LD_INT 112
61782: PUSH
61783: LD_INT 114
61785: PUSH
61786: LD_INT 116
61788: PUSH
61789: LD_INT 117
61791: PUSH
61792: LD_INT 118
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: ST_TO_ADDR
61817: GO 63500
61819: LD_INT 12
61821: DOUBLE
61822: EQUAL
61823: IFTRUE 61827
61825: GO 62047
61827: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61828: LD_ADDR_VAR 0 2
61832: PUSH
61833: LD_INT 1
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: LD_INT 3
61841: PUSH
61842: LD_INT 4
61844: PUSH
61845: LD_INT 5
61847: PUSH
61848: LD_INT 6
61850: PUSH
61851: LD_INT 7
61853: PUSH
61854: LD_INT 8
61856: PUSH
61857: LD_INT 9
61859: PUSH
61860: LD_INT 10
61862: PUSH
61863: LD_INT 11
61865: PUSH
61866: LD_INT 12
61868: PUSH
61869: LD_INT 13
61871: PUSH
61872: LD_INT 14
61874: PUSH
61875: LD_INT 15
61877: PUSH
61878: LD_INT 16
61880: PUSH
61881: LD_INT 17
61883: PUSH
61884: LD_INT 18
61886: PUSH
61887: LD_INT 19
61889: PUSH
61890: LD_INT 20
61892: PUSH
61893: LD_INT 21
61895: PUSH
61896: LD_INT 22
61898: PUSH
61899: LD_INT 23
61901: PUSH
61902: LD_INT 24
61904: PUSH
61905: LD_INT 25
61907: PUSH
61908: LD_INT 26
61910: PUSH
61911: LD_INT 27
61913: PUSH
61914: LD_INT 28
61916: PUSH
61917: LD_INT 30
61919: PUSH
61920: LD_INT 31
61922: PUSH
61923: LD_INT 32
61925: PUSH
61926: LD_INT 33
61928: PUSH
61929: LD_INT 34
61931: PUSH
61932: LD_INT 36
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 101
61973: PUSH
61974: LD_INT 102
61976: PUSH
61977: LD_INT 103
61979: PUSH
61980: LD_INT 104
61982: PUSH
61983: LD_INT 105
61985: PUSH
61986: LD_INT 106
61988: PUSH
61989: LD_INT 107
61991: PUSH
61992: LD_INT 108
61994: PUSH
61995: LD_INT 109
61997: PUSH
61998: LD_INT 110
62000: PUSH
62001: LD_INT 111
62003: PUSH
62004: LD_INT 112
62006: PUSH
62007: LD_INT 113
62009: PUSH
62010: LD_INT 114
62012: PUSH
62013: LD_INT 116
62015: PUSH
62016: LD_INT 117
62018: PUSH
62019: LD_INT 118
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: ST_TO_ADDR
62045: GO 63500
62047: LD_INT 13
62049: DOUBLE
62050: EQUAL
62051: IFTRUE 62055
62053: GO 62263
62055: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
62056: LD_ADDR_VAR 0 2
62060: PUSH
62061: LD_INT 1
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: LD_INT 4
62072: PUSH
62073: LD_INT 5
62075: PUSH
62076: LD_INT 8
62078: PUSH
62079: LD_INT 9
62081: PUSH
62082: LD_INT 10
62084: PUSH
62085: LD_INT 11
62087: PUSH
62088: LD_INT 12
62090: PUSH
62091: LD_INT 14
62093: PUSH
62094: LD_INT 15
62096: PUSH
62097: LD_INT 16
62099: PUSH
62100: LD_INT 17
62102: PUSH
62103: LD_INT 18
62105: PUSH
62106: LD_INT 19
62108: PUSH
62109: LD_INT 20
62111: PUSH
62112: LD_INT 21
62114: PUSH
62115: LD_INT 22
62117: PUSH
62118: LD_INT 23
62120: PUSH
62121: LD_INT 24
62123: PUSH
62124: LD_INT 25
62126: PUSH
62127: LD_INT 26
62129: PUSH
62130: LD_INT 27
62132: PUSH
62133: LD_INT 28
62135: PUSH
62136: LD_INT 30
62138: PUSH
62139: LD_INT 31
62141: PUSH
62142: LD_INT 32
62144: PUSH
62145: LD_INT 33
62147: PUSH
62148: LD_INT 34
62150: PUSH
62151: LD_INT 36
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 101
62189: PUSH
62190: LD_INT 102
62192: PUSH
62193: LD_INT 103
62195: PUSH
62196: LD_INT 104
62198: PUSH
62199: LD_INT 105
62201: PUSH
62202: LD_INT 106
62204: PUSH
62205: LD_INT 107
62207: PUSH
62208: LD_INT 108
62210: PUSH
62211: LD_INT 109
62213: PUSH
62214: LD_INT 110
62216: PUSH
62217: LD_INT 111
62219: PUSH
62220: LD_INT 112
62222: PUSH
62223: LD_INT 113
62225: PUSH
62226: LD_INT 114
62228: PUSH
62229: LD_INT 116
62231: PUSH
62232: LD_INT 117
62234: PUSH
62235: LD_INT 118
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: ST_TO_ADDR
62261: GO 63500
62263: LD_INT 14
62265: DOUBLE
62266: EQUAL
62267: IFTRUE 62271
62269: GO 62495
62271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
62272: LD_ADDR_VAR 0 2
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: LD_INT 2
62282: PUSH
62283: LD_INT 3
62285: PUSH
62286: LD_INT 4
62288: PUSH
62289: LD_INT 5
62291: PUSH
62292: LD_INT 6
62294: PUSH
62295: LD_INT 7
62297: PUSH
62298: LD_INT 8
62300: PUSH
62301: LD_INT 9
62303: PUSH
62304: LD_INT 10
62306: PUSH
62307: LD_INT 11
62309: PUSH
62310: LD_INT 12
62312: PUSH
62313: LD_INT 13
62315: PUSH
62316: LD_INT 14
62318: PUSH
62319: LD_INT 15
62321: PUSH
62322: LD_INT 16
62324: PUSH
62325: LD_INT 17
62327: PUSH
62328: LD_INT 18
62330: PUSH
62331: LD_INT 19
62333: PUSH
62334: LD_INT 20
62336: PUSH
62337: LD_INT 21
62339: PUSH
62340: LD_INT 22
62342: PUSH
62343: LD_INT 23
62345: PUSH
62346: LD_INT 24
62348: PUSH
62349: LD_INT 25
62351: PUSH
62352: LD_INT 26
62354: PUSH
62355: LD_INT 27
62357: PUSH
62358: LD_INT 28
62360: PUSH
62361: LD_INT 29
62363: PUSH
62364: LD_INT 30
62366: PUSH
62367: LD_INT 31
62369: PUSH
62370: LD_INT 32
62372: PUSH
62373: LD_INT 33
62375: PUSH
62376: LD_INT 34
62378: PUSH
62379: LD_INT 36
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 101
62421: PUSH
62422: LD_INT 102
62424: PUSH
62425: LD_INT 103
62427: PUSH
62428: LD_INT 104
62430: PUSH
62431: LD_INT 105
62433: PUSH
62434: LD_INT 106
62436: PUSH
62437: LD_INT 107
62439: PUSH
62440: LD_INT 108
62442: PUSH
62443: LD_INT 109
62445: PUSH
62446: LD_INT 110
62448: PUSH
62449: LD_INT 111
62451: PUSH
62452: LD_INT 112
62454: PUSH
62455: LD_INT 113
62457: PUSH
62458: LD_INT 114
62460: PUSH
62461: LD_INT 116
62463: PUSH
62464: LD_INT 117
62466: PUSH
62467: LD_INT 118
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: ST_TO_ADDR
62493: GO 63500
62495: LD_INT 15
62497: DOUBLE
62498: EQUAL
62499: IFTRUE 62503
62501: GO 62727
62503: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
62504: LD_ADDR_VAR 0 2
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: LD_INT 3
62517: PUSH
62518: LD_INT 4
62520: PUSH
62521: LD_INT 5
62523: PUSH
62524: LD_INT 6
62526: PUSH
62527: LD_INT 7
62529: PUSH
62530: LD_INT 8
62532: PUSH
62533: LD_INT 9
62535: PUSH
62536: LD_INT 10
62538: PUSH
62539: LD_INT 11
62541: PUSH
62542: LD_INT 12
62544: PUSH
62545: LD_INT 13
62547: PUSH
62548: LD_INT 14
62550: PUSH
62551: LD_INT 15
62553: PUSH
62554: LD_INT 16
62556: PUSH
62557: LD_INT 17
62559: PUSH
62560: LD_INT 18
62562: PUSH
62563: LD_INT 19
62565: PUSH
62566: LD_INT 20
62568: PUSH
62569: LD_INT 21
62571: PUSH
62572: LD_INT 22
62574: PUSH
62575: LD_INT 23
62577: PUSH
62578: LD_INT 24
62580: PUSH
62581: LD_INT 25
62583: PUSH
62584: LD_INT 26
62586: PUSH
62587: LD_INT 27
62589: PUSH
62590: LD_INT 28
62592: PUSH
62593: LD_INT 29
62595: PUSH
62596: LD_INT 30
62598: PUSH
62599: LD_INT 31
62601: PUSH
62602: LD_INT 32
62604: PUSH
62605: LD_INT 33
62607: PUSH
62608: LD_INT 34
62610: PUSH
62611: LD_INT 36
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 101
62653: PUSH
62654: LD_INT 102
62656: PUSH
62657: LD_INT 103
62659: PUSH
62660: LD_INT 104
62662: PUSH
62663: LD_INT 105
62665: PUSH
62666: LD_INT 106
62668: PUSH
62669: LD_INT 107
62671: PUSH
62672: LD_INT 108
62674: PUSH
62675: LD_INT 109
62677: PUSH
62678: LD_INT 110
62680: PUSH
62681: LD_INT 111
62683: PUSH
62684: LD_INT 112
62686: PUSH
62687: LD_INT 113
62689: PUSH
62690: LD_INT 114
62692: PUSH
62693: LD_INT 116
62695: PUSH
62696: LD_INT 117
62698: PUSH
62699: LD_INT 118
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: ST_TO_ADDR
62725: GO 63500
62727: LD_INT 16
62729: DOUBLE
62730: EQUAL
62731: IFTRUE 62735
62733: GO 62871
62735: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62736: LD_ADDR_VAR 0 2
62740: PUSH
62741: LD_INT 2
62743: PUSH
62744: LD_INT 4
62746: PUSH
62747: LD_INT 5
62749: PUSH
62750: LD_INT 7
62752: PUSH
62753: LD_INT 11
62755: PUSH
62756: LD_INT 12
62758: PUSH
62759: LD_INT 15
62761: PUSH
62762: LD_INT 16
62764: PUSH
62765: LD_INT 20
62767: PUSH
62768: LD_INT 21
62770: PUSH
62771: LD_INT 22
62773: PUSH
62774: LD_INT 23
62776: PUSH
62777: LD_INT 25
62779: PUSH
62780: LD_INT 26
62782: PUSH
62783: LD_INT 30
62785: PUSH
62786: LD_INT 31
62788: PUSH
62789: LD_INT 32
62791: PUSH
62792: LD_INT 33
62794: PUSH
62795: LD_INT 34
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 101
62821: PUSH
62822: LD_INT 102
62824: PUSH
62825: LD_INT 103
62827: PUSH
62828: LD_INT 106
62830: PUSH
62831: LD_INT 108
62833: PUSH
62834: LD_INT 112
62836: PUSH
62837: LD_INT 113
62839: PUSH
62840: LD_INT 114
62842: PUSH
62843: LD_INT 116
62845: PUSH
62846: LD_INT 117
62848: PUSH
62849: LD_INT 118
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: ST_TO_ADDR
62869: GO 63500
62871: LD_INT 17
62873: DOUBLE
62874: EQUAL
62875: IFTRUE 62879
62877: GO 63103
62879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62880: LD_ADDR_VAR 0 2
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: LD_INT 2
62890: PUSH
62891: LD_INT 3
62893: PUSH
62894: LD_INT 4
62896: PUSH
62897: LD_INT 5
62899: PUSH
62900: LD_INT 6
62902: PUSH
62903: LD_INT 7
62905: PUSH
62906: LD_INT 8
62908: PUSH
62909: LD_INT 9
62911: PUSH
62912: LD_INT 10
62914: PUSH
62915: LD_INT 11
62917: PUSH
62918: LD_INT 12
62920: PUSH
62921: LD_INT 13
62923: PUSH
62924: LD_INT 14
62926: PUSH
62927: LD_INT 15
62929: PUSH
62930: LD_INT 16
62932: PUSH
62933: LD_INT 17
62935: PUSH
62936: LD_INT 18
62938: PUSH
62939: LD_INT 19
62941: PUSH
62942: LD_INT 20
62944: PUSH
62945: LD_INT 21
62947: PUSH
62948: LD_INT 22
62950: PUSH
62951: LD_INT 23
62953: PUSH
62954: LD_INT 24
62956: PUSH
62957: LD_INT 25
62959: PUSH
62960: LD_INT 26
62962: PUSH
62963: LD_INT 27
62965: PUSH
62966: LD_INT 28
62968: PUSH
62969: LD_INT 29
62971: PUSH
62972: LD_INT 30
62974: PUSH
62975: LD_INT 31
62977: PUSH
62978: LD_INT 32
62980: PUSH
62981: LD_INT 33
62983: PUSH
62984: LD_INT 34
62986: PUSH
62987: LD_INT 36
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 101
63029: PUSH
63030: LD_INT 102
63032: PUSH
63033: LD_INT 103
63035: PUSH
63036: LD_INT 104
63038: PUSH
63039: LD_INT 105
63041: PUSH
63042: LD_INT 106
63044: PUSH
63045: LD_INT 107
63047: PUSH
63048: LD_INT 108
63050: PUSH
63051: LD_INT 109
63053: PUSH
63054: LD_INT 110
63056: PUSH
63057: LD_INT 111
63059: PUSH
63060: LD_INT 112
63062: PUSH
63063: LD_INT 113
63065: PUSH
63066: LD_INT 114
63068: PUSH
63069: LD_INT 116
63071: PUSH
63072: LD_INT 117
63074: PUSH
63075: LD_INT 118
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: ST_TO_ADDR
63101: GO 63500
63103: LD_INT 18
63105: DOUBLE
63106: EQUAL
63107: IFTRUE 63111
63109: GO 63259
63111: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
63112: LD_ADDR_VAR 0 2
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: LD_INT 4
63122: PUSH
63123: LD_INT 5
63125: PUSH
63126: LD_INT 7
63128: PUSH
63129: LD_INT 11
63131: PUSH
63132: LD_INT 12
63134: PUSH
63135: LD_INT 15
63137: PUSH
63138: LD_INT 16
63140: PUSH
63141: LD_INT 20
63143: PUSH
63144: LD_INT 21
63146: PUSH
63147: LD_INT 22
63149: PUSH
63150: LD_INT 23
63152: PUSH
63153: LD_INT 25
63155: PUSH
63156: LD_INT 26
63158: PUSH
63159: LD_INT 30
63161: PUSH
63162: LD_INT 31
63164: PUSH
63165: LD_INT 32
63167: PUSH
63168: LD_INT 33
63170: PUSH
63171: LD_INT 34
63173: PUSH
63174: LD_INT 35
63176: PUSH
63177: LD_INT 36
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 101
63205: PUSH
63206: LD_INT 102
63208: PUSH
63209: LD_INT 103
63211: PUSH
63212: LD_INT 106
63214: PUSH
63215: LD_INT 108
63217: PUSH
63218: LD_INT 112
63220: PUSH
63221: LD_INT 113
63223: PUSH
63224: LD_INT 114
63226: PUSH
63227: LD_INT 115
63229: PUSH
63230: LD_INT 116
63232: PUSH
63233: LD_INT 117
63235: PUSH
63236: LD_INT 118
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: ST_TO_ADDR
63257: GO 63500
63259: LD_INT 19
63261: DOUBLE
63262: EQUAL
63263: IFTRUE 63267
63265: GO 63499
63267: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
63268: LD_ADDR_VAR 0 2
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: LD_INT 3
63281: PUSH
63282: LD_INT 4
63284: PUSH
63285: LD_INT 5
63287: PUSH
63288: LD_INT 6
63290: PUSH
63291: LD_INT 7
63293: PUSH
63294: LD_INT 8
63296: PUSH
63297: LD_INT 9
63299: PUSH
63300: LD_INT 10
63302: PUSH
63303: LD_INT 11
63305: PUSH
63306: LD_INT 12
63308: PUSH
63309: LD_INT 13
63311: PUSH
63312: LD_INT 14
63314: PUSH
63315: LD_INT 15
63317: PUSH
63318: LD_INT 16
63320: PUSH
63321: LD_INT 17
63323: PUSH
63324: LD_INT 18
63326: PUSH
63327: LD_INT 19
63329: PUSH
63330: LD_INT 20
63332: PUSH
63333: LD_INT 21
63335: PUSH
63336: LD_INT 22
63338: PUSH
63339: LD_INT 23
63341: PUSH
63342: LD_INT 24
63344: PUSH
63345: LD_INT 25
63347: PUSH
63348: LD_INT 26
63350: PUSH
63351: LD_INT 27
63353: PUSH
63354: LD_INT 28
63356: PUSH
63357: LD_INT 29
63359: PUSH
63360: LD_INT 30
63362: PUSH
63363: LD_INT 31
63365: PUSH
63366: LD_INT 32
63368: PUSH
63369: LD_INT 33
63371: PUSH
63372: LD_INT 34
63374: PUSH
63375: LD_INT 35
63377: PUSH
63378: LD_INT 36
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 101
63421: PUSH
63422: LD_INT 102
63424: PUSH
63425: LD_INT 103
63427: PUSH
63428: LD_INT 104
63430: PUSH
63431: LD_INT 105
63433: PUSH
63434: LD_INT 106
63436: PUSH
63437: LD_INT 107
63439: PUSH
63440: LD_INT 108
63442: PUSH
63443: LD_INT 109
63445: PUSH
63446: LD_INT 110
63448: PUSH
63449: LD_INT 111
63451: PUSH
63452: LD_INT 112
63454: PUSH
63455: LD_INT 113
63457: PUSH
63458: LD_INT 114
63460: PUSH
63461: LD_INT 115
63463: PUSH
63464: LD_INT 116
63466: PUSH
63467: LD_INT 117
63469: PUSH
63470: LD_INT 118
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: ST_TO_ADDR
63497: GO 63500
63499: POP
// end else
63500: GO 63731
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
63502: LD_ADDR_VAR 0 2
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: LD_INT 2
63512: PUSH
63513: LD_INT 3
63515: PUSH
63516: LD_INT 4
63518: PUSH
63519: LD_INT 5
63521: PUSH
63522: LD_INT 6
63524: PUSH
63525: LD_INT 7
63527: PUSH
63528: LD_INT 8
63530: PUSH
63531: LD_INT 9
63533: PUSH
63534: LD_INT 10
63536: PUSH
63537: LD_INT 11
63539: PUSH
63540: LD_INT 12
63542: PUSH
63543: LD_INT 13
63545: PUSH
63546: LD_INT 14
63548: PUSH
63549: LD_INT 15
63551: PUSH
63552: LD_INT 16
63554: PUSH
63555: LD_INT 17
63557: PUSH
63558: LD_INT 18
63560: PUSH
63561: LD_INT 19
63563: PUSH
63564: LD_INT 20
63566: PUSH
63567: LD_INT 21
63569: PUSH
63570: LD_INT 22
63572: PUSH
63573: LD_INT 23
63575: PUSH
63576: LD_INT 24
63578: PUSH
63579: LD_INT 25
63581: PUSH
63582: LD_INT 26
63584: PUSH
63585: LD_INT 27
63587: PUSH
63588: LD_INT 28
63590: PUSH
63591: LD_INT 29
63593: PUSH
63594: LD_INT 30
63596: PUSH
63597: LD_INT 31
63599: PUSH
63600: LD_INT 32
63602: PUSH
63603: LD_INT 33
63605: PUSH
63606: LD_INT 34
63608: PUSH
63609: LD_INT 35
63611: PUSH
63612: LD_INT 36
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 101
63655: PUSH
63656: LD_INT 102
63658: PUSH
63659: LD_INT 103
63661: PUSH
63662: LD_INT 104
63664: PUSH
63665: LD_INT 105
63667: PUSH
63668: LD_INT 106
63670: PUSH
63671: LD_INT 107
63673: PUSH
63674: LD_INT 108
63676: PUSH
63677: LD_INT 109
63679: PUSH
63680: LD_INT 110
63682: PUSH
63683: LD_INT 111
63685: PUSH
63686: LD_INT 112
63688: PUSH
63689: LD_INT 113
63691: PUSH
63692: LD_INT 114
63694: PUSH
63695: LD_INT 115
63697: PUSH
63698: LD_INT 116
63700: PUSH
63701: LD_INT 117
63703: PUSH
63704: LD_INT 118
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: ST_TO_ADDR
// if result then
63731: LD_VAR 0 2
63735: IFFALSE 64521
// begin normal :=  ;
63737: LD_ADDR_VAR 0 5
63741: PUSH
63742: LD_STRING 
63744: ST_TO_ADDR
// hardcore :=  ;
63745: LD_ADDR_VAR 0 6
63749: PUSH
63750: LD_STRING 
63752: ST_TO_ADDR
// active :=  ;
63753: LD_ADDR_VAR 0 7
63757: PUSH
63758: LD_STRING 
63760: ST_TO_ADDR
// for i = 1 to normalCounter do
63761: LD_ADDR_VAR 0 8
63765: PUSH
63766: DOUBLE
63767: LD_INT 1
63769: DEC
63770: ST_TO_ADDR
63771: LD_EXP 51
63775: PUSH
63776: FOR_TO
63777: IFFALSE 63878
// begin tmp := 0 ;
63779: LD_ADDR_VAR 0 3
63783: PUSH
63784: LD_STRING 0
63786: ST_TO_ADDR
// if result [ 1 ] then
63787: LD_VAR 0 2
63791: PUSH
63792: LD_INT 1
63794: ARRAY
63795: IFFALSE 63860
// if result [ 1 ] [ 1 ] = i then
63797: LD_VAR 0 2
63801: PUSH
63802: LD_INT 1
63804: ARRAY
63805: PUSH
63806: LD_INT 1
63808: ARRAY
63809: PUSH
63810: LD_VAR 0 8
63814: EQUAL
63815: IFFALSE 63860
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63817: LD_ADDR_VAR 0 2
63821: PUSH
63822: LD_VAR 0 2
63826: PPUSH
63827: LD_INT 1
63829: PPUSH
63830: LD_VAR 0 2
63834: PUSH
63835: LD_INT 1
63837: ARRAY
63838: PPUSH
63839: LD_INT 1
63841: PPUSH
63842: CALL_OW 3
63846: PPUSH
63847: CALL_OW 1
63851: ST_TO_ADDR
// tmp := 1 ;
63852: LD_ADDR_VAR 0 3
63856: PUSH
63857: LD_STRING 1
63859: ST_TO_ADDR
// end ; normal := normal & tmp ;
63860: LD_ADDR_VAR 0 5
63864: PUSH
63865: LD_VAR 0 5
63869: PUSH
63870: LD_VAR 0 3
63874: STR
63875: ST_TO_ADDR
// end ;
63876: GO 63776
63878: POP
63879: POP
// for i = 1 to hardcoreCounter do
63880: LD_ADDR_VAR 0 8
63884: PUSH
63885: DOUBLE
63886: LD_INT 1
63888: DEC
63889: ST_TO_ADDR
63890: LD_EXP 52
63894: PUSH
63895: FOR_TO
63896: IFFALSE 64001
// begin tmp := 0 ;
63898: LD_ADDR_VAR 0 3
63902: PUSH
63903: LD_STRING 0
63905: ST_TO_ADDR
// if result [ 2 ] then
63906: LD_VAR 0 2
63910: PUSH
63911: LD_INT 2
63913: ARRAY
63914: IFFALSE 63983
// if result [ 2 ] [ 1 ] = 100 + i then
63916: LD_VAR 0 2
63920: PUSH
63921: LD_INT 2
63923: ARRAY
63924: PUSH
63925: LD_INT 1
63927: ARRAY
63928: PUSH
63929: LD_INT 100
63931: PUSH
63932: LD_VAR 0 8
63936: PLUS
63937: EQUAL
63938: IFFALSE 63983
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63940: LD_ADDR_VAR 0 2
63944: PUSH
63945: LD_VAR 0 2
63949: PPUSH
63950: LD_INT 2
63952: PPUSH
63953: LD_VAR 0 2
63957: PUSH
63958: LD_INT 2
63960: ARRAY
63961: PPUSH
63962: LD_INT 1
63964: PPUSH
63965: CALL_OW 3
63969: PPUSH
63970: CALL_OW 1
63974: ST_TO_ADDR
// tmp := 1 ;
63975: LD_ADDR_VAR 0 3
63979: PUSH
63980: LD_STRING 1
63982: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63983: LD_ADDR_VAR 0 6
63987: PUSH
63988: LD_VAR 0 6
63992: PUSH
63993: LD_VAR 0 3
63997: STR
63998: ST_TO_ADDR
// end ;
63999: GO 63895
64001: POP
64002: POP
// if isGameLoad then
64003: LD_VAR 0 1
64007: IFFALSE 64482
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
64009: LD_ADDR_VAR 0 4
64013: PUSH
64014: LD_EXP 55
64018: PUSH
64019: LD_EXP 54
64023: PUSH
64024: LD_EXP 56
64028: PUSH
64029: LD_EXP 53
64033: PUSH
64034: LD_EXP 57
64038: PUSH
64039: LD_EXP 58
64043: PUSH
64044: LD_EXP 59
64048: PUSH
64049: LD_EXP 60
64053: PUSH
64054: LD_EXP 61
64058: PUSH
64059: LD_EXP 62
64063: PUSH
64064: LD_EXP 63
64068: PUSH
64069: LD_EXP 64
64073: PUSH
64074: LD_EXP 65
64078: PUSH
64079: LD_EXP 66
64083: PUSH
64084: LD_EXP 74
64088: PUSH
64089: LD_EXP 75
64093: PUSH
64094: LD_EXP 76
64098: PUSH
64099: LD_EXP 77
64103: PUSH
64104: LD_EXP 79
64108: PUSH
64109: LD_EXP 80
64113: PUSH
64114: LD_EXP 81
64118: PUSH
64119: LD_EXP 84
64123: PUSH
64124: LD_EXP 86
64128: PUSH
64129: LD_EXP 87
64133: PUSH
64134: LD_EXP 88
64138: PUSH
64139: LD_EXP 90
64143: PUSH
64144: LD_EXP 91
64148: PUSH
64149: LD_EXP 94
64153: PUSH
64154: LD_EXP 95
64158: PUSH
64159: LD_EXP 96
64163: PUSH
64164: LD_EXP 97
64168: PUSH
64169: LD_EXP 98
64173: PUSH
64174: LD_EXP 99
64178: PUSH
64179: LD_EXP 100
64183: PUSH
64184: LD_EXP 101
64188: PUSH
64189: LD_EXP 102
64193: PUSH
64194: LD_EXP 67
64198: PUSH
64199: LD_EXP 68
64203: PUSH
64204: LD_EXP 71
64208: PUSH
64209: LD_EXP 72
64213: PUSH
64214: LD_EXP 73
64218: PUSH
64219: LD_EXP 69
64223: PUSH
64224: LD_EXP 70
64228: PUSH
64229: LD_EXP 78
64233: PUSH
64234: LD_EXP 82
64238: PUSH
64239: LD_EXP 83
64243: PUSH
64244: LD_EXP 85
64248: PUSH
64249: LD_EXP 89
64253: PUSH
64254: LD_EXP 92
64258: PUSH
64259: LD_EXP 93
64263: PUSH
64264: LD_EXP 103
64268: PUSH
64269: LD_EXP 104
64273: PUSH
64274: LD_EXP 105
64278: PUSH
64279: LD_EXP 106
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: ST_TO_ADDR
// tmp :=  ;
64340: LD_ADDR_VAR 0 3
64344: PUSH
64345: LD_STRING 
64347: ST_TO_ADDR
// for i = 1 to normalCounter do
64348: LD_ADDR_VAR 0 8
64352: PUSH
64353: DOUBLE
64354: LD_INT 1
64356: DEC
64357: ST_TO_ADDR
64358: LD_EXP 51
64362: PUSH
64363: FOR_TO
64364: IFFALSE 64400
// begin if flags [ i ] then
64366: LD_VAR 0 4
64370: PUSH
64371: LD_VAR 0 8
64375: ARRAY
64376: IFFALSE 64398
// tmp := tmp & i & ; ;
64378: LD_ADDR_VAR 0 3
64382: PUSH
64383: LD_VAR 0 3
64387: PUSH
64388: LD_VAR 0 8
64392: STR
64393: PUSH
64394: LD_STRING ;
64396: STR
64397: ST_TO_ADDR
// end ;
64398: GO 64363
64400: POP
64401: POP
// for i = 1 to hardcoreCounter do
64402: LD_ADDR_VAR 0 8
64406: PUSH
64407: DOUBLE
64408: LD_INT 1
64410: DEC
64411: ST_TO_ADDR
64412: LD_EXP 52
64416: PUSH
64417: FOR_TO
64418: IFFALSE 64464
// begin if flags [ normalCounter + i ] then
64420: LD_VAR 0 4
64424: PUSH
64425: LD_EXP 51
64429: PUSH
64430: LD_VAR 0 8
64434: PLUS
64435: ARRAY
64436: IFFALSE 64462
// tmp := tmp & ( 100 + i ) & ; ;
64438: LD_ADDR_VAR 0 3
64442: PUSH
64443: LD_VAR 0 3
64447: PUSH
64448: LD_INT 100
64450: PUSH
64451: LD_VAR 0 8
64455: PLUS
64456: STR
64457: PUSH
64458: LD_STRING ;
64460: STR
64461: ST_TO_ADDR
// end ;
64462: GO 64417
64464: POP
64465: POP
// if tmp then
64466: LD_VAR 0 3
64470: IFFALSE 64482
// active := tmp ;
64472: LD_ADDR_VAR 0 7
64476: PUSH
64477: LD_VAR 0 3
64481: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
64482: LD_STRING getStreamItemsFromMission("
64484: PUSH
64485: LD_VAR 0 5
64489: STR
64490: PUSH
64491: LD_STRING ","
64493: STR
64494: PUSH
64495: LD_VAR 0 6
64499: STR
64500: PUSH
64501: LD_STRING ","
64503: STR
64504: PUSH
64505: LD_VAR 0 7
64509: STR
64510: PUSH
64511: LD_STRING ")
64513: STR
64514: PPUSH
64515: CALL_OW 559
// end else
64519: GO 64528
// ToLua ( getStreamItemsFromMission("","","") ) ;
64521: LD_STRING getStreamItemsFromMission("","","")
64523: PPUSH
64524: CALL_OW 559
// end ;
64528: LD_VAR 0 2
64532: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64533: LD_EXP 50
64537: PUSH
64538: LD_EXP 55
64542: AND
64543: IFFALSE 64667
64545: GO 64547
64547: DISABLE
64548: LD_INT 0
64550: PPUSH
64551: PPUSH
// begin enable ;
64552: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64553: LD_ADDR_VAR 0 2
64557: PUSH
64558: LD_INT 22
64560: PUSH
64561: LD_OWVAR 2
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 2
64572: PUSH
64573: LD_INT 34
64575: PUSH
64576: LD_INT 7
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 34
64585: PUSH
64586: LD_INT 45
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 34
64595: PUSH
64596: LD_INT 28
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 34
64605: PUSH
64606: LD_INT 47
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PPUSH
64624: CALL_OW 69
64628: ST_TO_ADDR
// if not tmp then
64629: LD_VAR 0 2
64633: NOT
64634: IFFALSE 64638
// exit ;
64636: GO 64667
// for i in tmp do
64638: LD_ADDR_VAR 0 1
64642: PUSH
64643: LD_VAR 0 2
64647: PUSH
64648: FOR_IN
64649: IFFALSE 64665
// begin SetLives ( i , 0 ) ;
64651: LD_VAR 0 1
64655: PPUSH
64656: LD_INT 0
64658: PPUSH
64659: CALL_OW 234
// end ;
64663: GO 64648
64665: POP
64666: POP
// end ;
64667: PPOPN 2
64669: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64670: LD_EXP 50
64674: PUSH
64675: LD_EXP 56
64679: AND
64680: IFFALSE 64764
64682: GO 64684
64684: DISABLE
64685: LD_INT 0
64687: PPUSH
64688: PPUSH
// begin enable ;
64689: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64690: LD_ADDR_VAR 0 2
64694: PUSH
64695: LD_INT 22
64697: PUSH
64698: LD_OWVAR 2
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 32
64709: PUSH
64710: LD_INT 3
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PPUSH
64721: CALL_OW 69
64725: ST_TO_ADDR
// if not tmp then
64726: LD_VAR 0 2
64730: NOT
64731: IFFALSE 64735
// exit ;
64733: GO 64764
// for i in tmp do
64735: LD_ADDR_VAR 0 1
64739: PUSH
64740: LD_VAR 0 2
64744: PUSH
64745: FOR_IN
64746: IFFALSE 64762
// begin SetLives ( i , 0 ) ;
64748: LD_VAR 0 1
64752: PPUSH
64753: LD_INT 0
64755: PPUSH
64756: CALL_OW 234
// end ;
64760: GO 64745
64762: POP
64763: POP
// end ;
64764: PPOPN 2
64766: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64767: LD_EXP 50
64771: PUSH
64772: LD_EXP 53
64776: AND
64777: IFFALSE 64870
64779: GO 64781
64781: DISABLE
64782: LD_INT 0
64784: PPUSH
// begin enable ;
64785: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64786: LD_ADDR_VAR 0 1
64790: PUSH
64791: LD_INT 22
64793: PUSH
64794: LD_OWVAR 2
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: LD_INT 25
64808: PUSH
64809: LD_INT 5
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 25
64818: PUSH
64819: LD_INT 9
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 25
64828: PUSH
64829: LD_INT 8
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PPUSH
64846: CALL_OW 69
64850: PUSH
64851: FOR_IN
64852: IFFALSE 64868
// begin SetClass ( i , 1 ) ;
64854: LD_VAR 0 1
64858: PPUSH
64859: LD_INT 1
64861: PPUSH
64862: CALL_OW 336
// end ;
64866: GO 64851
64868: POP
64869: POP
// end ;
64870: PPOPN 1
64872: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64873: LD_EXP 50
64877: PUSH
64878: LD_EXP 54
64882: AND
64883: PUSH
64884: LD_OWVAR 65
64888: PUSH
64889: LD_INT 7
64891: LESS
64892: AND
64893: IFFALSE 64907
64895: GO 64897
64897: DISABLE
// begin enable ;
64898: ENABLE
// game_speed := 7 ;
64899: LD_ADDR_OWVAR 65
64903: PUSH
64904: LD_INT 7
64906: ST_TO_ADDR
// end ;
64907: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64908: LD_EXP 50
64912: PUSH
64913: LD_EXP 57
64917: AND
64918: IFFALSE 65120
64920: GO 64922
64922: DISABLE
64923: LD_INT 0
64925: PPUSH
64926: PPUSH
64927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64928: LD_ADDR_VAR 0 3
64932: PUSH
64933: LD_INT 81
64935: PUSH
64936: LD_OWVAR 2
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 21
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PPUSH
64959: CALL_OW 69
64963: ST_TO_ADDR
// if not tmp then
64964: LD_VAR 0 3
64968: NOT
64969: IFFALSE 64973
// exit ;
64971: GO 65120
// if tmp > 5 then
64973: LD_VAR 0 3
64977: PUSH
64978: LD_INT 5
64980: GREATER
64981: IFFALSE 64993
// k := 5 else
64983: LD_ADDR_VAR 0 2
64987: PUSH
64988: LD_INT 5
64990: ST_TO_ADDR
64991: GO 65003
// k := tmp ;
64993: LD_ADDR_VAR 0 2
64997: PUSH
64998: LD_VAR 0 3
65002: ST_TO_ADDR
// for i := 1 to k do
65003: LD_ADDR_VAR 0 1
65007: PUSH
65008: DOUBLE
65009: LD_INT 1
65011: DEC
65012: ST_TO_ADDR
65013: LD_VAR 0 2
65017: PUSH
65018: FOR_TO
65019: IFFALSE 65118
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
65021: LD_VAR 0 3
65025: PUSH
65026: LD_VAR 0 1
65030: ARRAY
65031: PPUSH
65032: LD_VAR 0 1
65036: PUSH
65037: LD_INT 4
65039: MOD
65040: PUSH
65041: LD_INT 1
65043: PLUS
65044: PPUSH
65045: CALL_OW 259
65049: PUSH
65050: LD_INT 10
65052: LESS
65053: IFFALSE 65116
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
65055: LD_VAR 0 3
65059: PUSH
65060: LD_VAR 0 1
65064: ARRAY
65065: PPUSH
65066: LD_VAR 0 1
65070: PUSH
65071: LD_INT 4
65073: MOD
65074: PUSH
65075: LD_INT 1
65077: PLUS
65078: PPUSH
65079: LD_VAR 0 3
65083: PUSH
65084: LD_VAR 0 1
65088: ARRAY
65089: PPUSH
65090: LD_VAR 0 1
65094: PUSH
65095: LD_INT 4
65097: MOD
65098: PUSH
65099: LD_INT 1
65101: PLUS
65102: PPUSH
65103: CALL_OW 259
65107: PUSH
65108: LD_INT 1
65110: PLUS
65111: PPUSH
65112: CALL_OW 237
65116: GO 65018
65118: POP
65119: POP
// end ;
65120: PPOPN 3
65122: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65123: LD_EXP 50
65127: PUSH
65128: LD_EXP 58
65132: AND
65133: IFFALSE 65153
65135: GO 65137
65137: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
65138: LD_INT 4
65140: PPUSH
65141: LD_OWVAR 2
65145: PPUSH
65146: LD_INT 0
65148: PPUSH
65149: CALL_OW 324
65153: END
// every 0 0$1 trigger StreamModeActive and sShovel do
65154: LD_EXP 50
65158: PUSH
65159: LD_EXP 87
65163: AND
65164: IFFALSE 65184
65166: GO 65168
65168: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
65169: LD_INT 19
65171: PPUSH
65172: LD_OWVAR 2
65176: PPUSH
65177: LD_INT 0
65179: PPUSH
65180: CALL_OW 324
65184: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
65185: LD_EXP 50
65189: PUSH
65190: LD_EXP 59
65194: AND
65195: IFFALSE 65297
65197: GO 65199
65199: DISABLE
65200: LD_INT 0
65202: PPUSH
65203: PPUSH
// begin enable ;
65204: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
65205: LD_ADDR_VAR 0 2
65209: PUSH
65210: LD_INT 22
65212: PUSH
65213: LD_OWVAR 2
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: LD_INT 34
65227: PUSH
65228: LD_INT 11
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 34
65237: PUSH
65238: LD_INT 30
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PPUSH
65254: CALL_OW 69
65258: ST_TO_ADDR
// if not tmp then
65259: LD_VAR 0 2
65263: NOT
65264: IFFALSE 65268
// exit ;
65266: GO 65297
// for i in tmp do
65268: LD_ADDR_VAR 0 1
65272: PUSH
65273: LD_VAR 0 2
65277: PUSH
65278: FOR_IN
65279: IFFALSE 65295
// begin SetLives ( i , 0 ) ;
65281: LD_VAR 0 1
65285: PPUSH
65286: LD_INT 0
65288: PPUSH
65289: CALL_OW 234
// end ;
65293: GO 65278
65295: POP
65296: POP
// end ;
65297: PPOPN 2
65299: END
// every 0 0$1 trigger StreamModeActive and sBunker do
65300: LD_EXP 50
65304: PUSH
65305: LD_EXP 60
65309: AND
65310: IFFALSE 65330
65312: GO 65314
65314: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
65315: LD_INT 32
65317: PPUSH
65318: LD_OWVAR 2
65322: PPUSH
65323: LD_INT 0
65325: PPUSH
65326: CALL_OW 324
65330: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
65331: LD_EXP 50
65335: PUSH
65336: LD_EXP 61
65340: AND
65341: IFFALSE 65522
65343: GO 65345
65345: DISABLE
65346: LD_INT 0
65348: PPUSH
65349: PPUSH
65350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
65351: LD_ADDR_VAR 0 2
65355: PUSH
65356: LD_INT 22
65358: PUSH
65359: LD_OWVAR 2
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 33
65370: PUSH
65371: LD_INT 3
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PPUSH
65382: CALL_OW 69
65386: ST_TO_ADDR
// if not tmp then
65387: LD_VAR 0 2
65391: NOT
65392: IFFALSE 65396
// exit ;
65394: GO 65522
// side := 0 ;
65396: LD_ADDR_VAR 0 3
65400: PUSH
65401: LD_INT 0
65403: ST_TO_ADDR
// for i := 1 to 8 do
65404: LD_ADDR_VAR 0 1
65408: PUSH
65409: DOUBLE
65410: LD_INT 1
65412: DEC
65413: ST_TO_ADDR
65414: LD_INT 8
65416: PUSH
65417: FOR_TO
65418: IFFALSE 65466
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
65420: LD_OWVAR 2
65424: PUSH
65425: LD_VAR 0 1
65429: NONEQUAL
65430: PUSH
65431: LD_OWVAR 2
65435: PPUSH
65436: LD_VAR 0 1
65440: PPUSH
65441: CALL_OW 81
65445: PUSH
65446: LD_INT 2
65448: EQUAL
65449: AND
65450: IFFALSE 65464
// begin side := i ;
65452: LD_ADDR_VAR 0 3
65456: PUSH
65457: LD_VAR 0 1
65461: ST_TO_ADDR
// break ;
65462: GO 65466
// end ;
65464: GO 65417
65466: POP
65467: POP
// if not side then
65468: LD_VAR 0 3
65472: NOT
65473: IFFALSE 65477
// exit ;
65475: GO 65522
// for i := 1 to tmp do
65477: LD_ADDR_VAR 0 1
65481: PUSH
65482: DOUBLE
65483: LD_INT 1
65485: DEC
65486: ST_TO_ADDR
65487: LD_VAR 0 2
65491: PUSH
65492: FOR_TO
65493: IFFALSE 65520
// if Prob ( 60 ) then
65495: LD_INT 60
65497: PPUSH
65498: CALL_OW 13
65502: IFFALSE 65518
// SetSide ( i , side ) ;
65504: LD_VAR 0 1
65508: PPUSH
65509: LD_VAR 0 3
65513: PPUSH
65514: CALL_OW 235
65518: GO 65492
65520: POP
65521: POP
// end ;
65522: PPOPN 3
65524: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65525: LD_EXP 50
65529: PUSH
65530: LD_EXP 63
65534: AND
65535: IFFALSE 65654
65537: GO 65539
65539: DISABLE
65540: LD_INT 0
65542: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65543: LD_ADDR_VAR 0 1
65547: PUSH
65548: LD_INT 22
65550: PUSH
65551: LD_OWVAR 2
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 21
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 3
65572: PUSH
65573: LD_INT 23
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: PPUSH
65592: CALL_OW 69
65596: PUSH
65597: FOR_IN
65598: IFFALSE 65652
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65600: LD_VAR 0 1
65604: PPUSH
65605: CALL_OW 257
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: LD_INT 2
65615: PUSH
65616: LD_INT 3
65618: PUSH
65619: LD_INT 4
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: IN
65628: IFFALSE 65650
// SetClass ( un , rand ( 1 , 4 ) ) ;
65630: LD_VAR 0 1
65634: PPUSH
65635: LD_INT 1
65637: PPUSH
65638: LD_INT 4
65640: PPUSH
65641: CALL_OW 12
65645: PPUSH
65646: CALL_OW 336
65650: GO 65597
65652: POP
65653: POP
// end ;
65654: PPOPN 1
65656: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65657: LD_EXP 50
65661: PUSH
65662: LD_EXP 62
65666: AND
65667: IFFALSE 65746
65669: GO 65671
65671: DISABLE
65672: LD_INT 0
65674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65675: LD_ADDR_VAR 0 1
65679: PUSH
65680: LD_INT 22
65682: PUSH
65683: LD_OWVAR 2
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 21
65694: PUSH
65695: LD_INT 3
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PPUSH
65706: CALL_OW 69
65710: ST_TO_ADDR
// if not tmp then
65711: LD_VAR 0 1
65715: NOT
65716: IFFALSE 65720
// exit ;
65718: GO 65746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65720: LD_VAR 0 1
65724: PUSH
65725: LD_INT 1
65727: PPUSH
65728: LD_VAR 0 1
65732: PPUSH
65733: CALL_OW 12
65737: ARRAY
65738: PPUSH
65739: LD_INT 100
65741: PPUSH
65742: CALL_OW 234
// end ;
65746: PPOPN 1
65748: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65749: LD_EXP 50
65753: PUSH
65754: LD_EXP 64
65758: AND
65759: IFFALSE 65857
65761: GO 65763
65763: DISABLE
65764: LD_INT 0
65766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65767: LD_ADDR_VAR 0 1
65771: PUSH
65772: LD_INT 22
65774: PUSH
65775: LD_OWVAR 2
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 21
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PPUSH
65798: CALL_OW 69
65802: ST_TO_ADDR
// if not tmp then
65803: LD_VAR 0 1
65807: NOT
65808: IFFALSE 65812
// exit ;
65810: GO 65857
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65812: LD_VAR 0 1
65816: PUSH
65817: LD_INT 1
65819: PPUSH
65820: LD_VAR 0 1
65824: PPUSH
65825: CALL_OW 12
65829: ARRAY
65830: PPUSH
65831: LD_INT 1
65833: PPUSH
65834: LD_INT 4
65836: PPUSH
65837: CALL_OW 12
65841: PPUSH
65842: LD_INT 3000
65844: PPUSH
65845: LD_INT 9000
65847: PPUSH
65848: CALL_OW 12
65852: PPUSH
65853: CALL_OW 492
// end ;
65857: PPOPN 1
65859: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65860: LD_EXP 50
65864: PUSH
65865: LD_EXP 65
65869: AND
65870: IFFALSE 65890
65872: GO 65874
65874: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65875: LD_INT 1
65877: PPUSH
65878: LD_OWVAR 2
65882: PPUSH
65883: LD_INT 0
65885: PPUSH
65886: CALL_OW 324
65890: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65891: LD_EXP 50
65895: PUSH
65896: LD_EXP 66
65900: AND
65901: IFFALSE 65984
65903: GO 65905
65905: DISABLE
65906: LD_INT 0
65908: PPUSH
65909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65910: LD_ADDR_VAR 0 2
65914: PUSH
65915: LD_INT 22
65917: PUSH
65918: LD_OWVAR 2
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 21
65929: PUSH
65930: LD_INT 3
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PPUSH
65941: CALL_OW 69
65945: ST_TO_ADDR
// if not tmp then
65946: LD_VAR 0 2
65950: NOT
65951: IFFALSE 65955
// exit ;
65953: GO 65984
// for i in tmp do
65955: LD_ADDR_VAR 0 1
65959: PUSH
65960: LD_VAR 0 2
65964: PUSH
65965: FOR_IN
65966: IFFALSE 65982
// SetBLevel ( i , 10 ) ;
65968: LD_VAR 0 1
65972: PPUSH
65973: LD_INT 10
65975: PPUSH
65976: CALL_OW 241
65980: GO 65965
65982: POP
65983: POP
// end ;
65984: PPOPN 2
65986: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65987: LD_EXP 50
65991: PUSH
65992: LD_EXP 67
65996: AND
65997: IFFALSE 66108
65999: GO 66001
66001: DISABLE
66002: LD_INT 0
66004: PPUSH
66005: PPUSH
66006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66007: LD_ADDR_VAR 0 3
66011: PUSH
66012: LD_INT 22
66014: PUSH
66015: LD_OWVAR 2
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 25
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PPUSH
66038: CALL_OW 69
66042: ST_TO_ADDR
// if not tmp then
66043: LD_VAR 0 3
66047: NOT
66048: IFFALSE 66052
// exit ;
66050: GO 66108
// un := tmp [ rand ( 1 , tmp ) ] ;
66052: LD_ADDR_VAR 0 2
66056: PUSH
66057: LD_VAR 0 3
66061: PUSH
66062: LD_INT 1
66064: PPUSH
66065: LD_VAR 0 3
66069: PPUSH
66070: CALL_OW 12
66074: ARRAY
66075: ST_TO_ADDR
// if Crawls ( un ) then
66076: LD_VAR 0 2
66080: PPUSH
66081: CALL_OW 318
66085: IFFALSE 66096
// ComWalk ( un ) ;
66087: LD_VAR 0 2
66091: PPUSH
66092: CALL_OW 138
// SetClass ( un , class_sniper ) ;
66096: LD_VAR 0 2
66100: PPUSH
66101: LD_INT 5
66103: PPUSH
66104: CALL_OW 336
// end ;
66108: PPOPN 3
66110: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
66111: LD_EXP 50
66115: PUSH
66116: LD_EXP 68
66120: AND
66121: PUSH
66122: LD_OWVAR 67
66126: PUSH
66127: LD_INT 4
66129: LESS
66130: AND
66131: IFFALSE 66150
66133: GO 66135
66135: DISABLE
// begin Difficulty := Difficulty + 1 ;
66136: LD_ADDR_OWVAR 67
66140: PUSH
66141: LD_OWVAR 67
66145: PUSH
66146: LD_INT 1
66148: PLUS
66149: ST_TO_ADDR
// end ;
66150: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
66151: LD_EXP 50
66155: PUSH
66156: LD_EXP 69
66160: AND
66161: IFFALSE 66264
66163: GO 66165
66165: DISABLE
66166: LD_INT 0
66168: PPUSH
// begin for i := 1 to 5 do
66169: LD_ADDR_VAR 0 1
66173: PUSH
66174: DOUBLE
66175: LD_INT 1
66177: DEC
66178: ST_TO_ADDR
66179: LD_INT 5
66181: PUSH
66182: FOR_TO
66183: IFFALSE 66262
// begin uc_nation := nation_nature ;
66185: LD_ADDR_OWVAR 21
66189: PUSH
66190: LD_INT 0
66192: ST_TO_ADDR
// uc_side := 0 ;
66193: LD_ADDR_OWVAR 20
66197: PUSH
66198: LD_INT 0
66200: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66201: LD_ADDR_OWVAR 29
66205: PUSH
66206: LD_INT 12
66208: PUSH
66209: LD_INT 12
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: ST_TO_ADDR
// hc_agressivity := 20 ;
66216: LD_ADDR_OWVAR 35
66220: PUSH
66221: LD_INT 20
66223: ST_TO_ADDR
// hc_class := class_tiger ;
66224: LD_ADDR_OWVAR 28
66228: PUSH
66229: LD_INT 14
66231: ST_TO_ADDR
// hc_gallery :=  ;
66232: LD_ADDR_OWVAR 33
66236: PUSH
66237: LD_STRING 
66239: ST_TO_ADDR
// hc_name :=  ;
66240: LD_ADDR_OWVAR 26
66244: PUSH
66245: LD_STRING 
66247: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
66248: CALL_OW 44
66252: PPUSH
66253: LD_INT 0
66255: PPUSH
66256: CALL_OW 51
// end ;
66260: GO 66182
66262: POP
66263: POP
// end ;
66264: PPOPN 1
66266: END
// every 0 0$1 trigger StreamModeActive and sBomb do
66267: LD_EXP 50
66271: PUSH
66272: LD_EXP 70
66276: AND
66277: IFFALSE 66286
66279: GO 66281
66281: DISABLE
// StreamSibBomb ;
66282: CALL 66287 0 0
66286: END
// export function StreamSibBomb ; var i , x , y ; begin
66287: LD_INT 0
66289: PPUSH
66290: PPUSH
66291: PPUSH
66292: PPUSH
// result := false ;
66293: LD_ADDR_VAR 0 1
66297: PUSH
66298: LD_INT 0
66300: ST_TO_ADDR
// for i := 1 to 16 do
66301: LD_ADDR_VAR 0 2
66305: PUSH
66306: DOUBLE
66307: LD_INT 1
66309: DEC
66310: ST_TO_ADDR
66311: LD_INT 16
66313: PUSH
66314: FOR_TO
66315: IFFALSE 66514
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66317: LD_ADDR_VAR 0 3
66321: PUSH
66322: LD_INT 10
66324: PUSH
66325: LD_INT 20
66327: PUSH
66328: LD_INT 30
66330: PUSH
66331: LD_INT 40
66333: PUSH
66334: LD_INT 50
66336: PUSH
66337: LD_INT 60
66339: PUSH
66340: LD_INT 70
66342: PUSH
66343: LD_INT 80
66345: PUSH
66346: LD_INT 90
66348: PUSH
66349: LD_INT 100
66351: PUSH
66352: LD_INT 110
66354: PUSH
66355: LD_INT 120
66357: PUSH
66358: LD_INT 130
66360: PUSH
66361: LD_INT 140
66363: PUSH
66364: LD_INT 150
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 1
66386: PPUSH
66387: LD_INT 15
66389: PPUSH
66390: CALL_OW 12
66394: ARRAY
66395: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
66396: LD_ADDR_VAR 0 4
66400: PUSH
66401: LD_INT 10
66403: PUSH
66404: LD_INT 20
66406: PUSH
66407: LD_INT 30
66409: PUSH
66410: LD_INT 40
66412: PUSH
66413: LD_INT 50
66415: PUSH
66416: LD_INT 60
66418: PUSH
66419: LD_INT 70
66421: PUSH
66422: LD_INT 80
66424: PUSH
66425: LD_INT 90
66427: PUSH
66428: LD_INT 100
66430: PUSH
66431: LD_INT 110
66433: PUSH
66434: LD_INT 120
66436: PUSH
66437: LD_INT 130
66439: PUSH
66440: LD_INT 140
66442: PUSH
66443: LD_INT 150
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: PPUSH
66466: LD_INT 15
66468: PPUSH
66469: CALL_OW 12
66473: ARRAY
66474: ST_TO_ADDR
// if ValidHex ( x , y ) then
66475: LD_VAR 0 3
66479: PPUSH
66480: LD_VAR 0 4
66484: PPUSH
66485: CALL_OW 488
66489: IFFALSE 66512
// begin result := [ x , y ] ;
66491: LD_ADDR_VAR 0 1
66495: PUSH
66496: LD_VAR 0 3
66500: PUSH
66501: LD_VAR 0 4
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: ST_TO_ADDR
// break ;
66510: GO 66514
// end ; end ;
66512: GO 66314
66514: POP
66515: POP
// if result then
66516: LD_VAR 0 1
66520: IFFALSE 66580
// begin ToLua ( playSibBomb() ) ;
66522: LD_STRING playSibBomb()
66524: PPUSH
66525: CALL_OW 559
// wait ( 0 0$14 ) ;
66529: LD_INT 490
66531: PPUSH
66532: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66536: LD_VAR 0 1
66540: PUSH
66541: LD_INT 1
66543: ARRAY
66544: PPUSH
66545: LD_VAR 0 1
66549: PUSH
66550: LD_INT 2
66552: ARRAY
66553: PPUSH
66554: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66558: LD_VAR 0 1
66562: PUSH
66563: LD_INT 1
66565: ARRAY
66566: PPUSH
66567: LD_VAR 0 1
66571: PUSH
66572: LD_INT 2
66574: ARRAY
66575: PPUSH
66576: CALL_OW 429
// end ; end ;
66580: LD_VAR 0 1
66584: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66585: LD_EXP 50
66589: PUSH
66590: LD_EXP 72
66594: AND
66595: IFFALSE 66607
66597: GO 66599
66599: DISABLE
// YouLost (  ) ;
66600: LD_STRING 
66602: PPUSH
66603: CALL_OW 104
66607: END
// every 0 0$1 trigger StreamModeActive and sFog do
66608: LD_EXP 50
66612: PUSH
66613: LD_EXP 71
66617: AND
66618: IFFALSE 66632
66620: GO 66622
66622: DISABLE
// FogOff ( your_side ) ;
66623: LD_OWVAR 2
66627: PPUSH
66628: CALL_OW 344
66632: END
// every 0 0$1 trigger StreamModeActive and sSun do
66633: LD_EXP 50
66637: PUSH
66638: LD_EXP 73
66642: AND
66643: IFFALSE 66671
66645: GO 66647
66647: DISABLE
// begin solar_recharge_percent := 0 ;
66648: LD_ADDR_OWVAR 79
66652: PUSH
66653: LD_INT 0
66655: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66656: LD_INT 10500
66658: PPUSH
66659: CALL_OW 67
// solar_recharge_percent := 100 ;
66663: LD_ADDR_OWVAR 79
66667: PUSH
66668: LD_INT 100
66670: ST_TO_ADDR
// end ;
66671: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66672: LD_EXP 50
66676: PUSH
66677: LD_EXP 74
66681: AND
66682: IFFALSE 66921
66684: GO 66686
66686: DISABLE
66687: LD_INT 0
66689: PPUSH
66690: PPUSH
66691: PPUSH
// begin tmp := [ ] ;
66692: LD_ADDR_VAR 0 3
66696: PUSH
66697: EMPTY
66698: ST_TO_ADDR
// for i := 1 to 6 do
66699: LD_ADDR_VAR 0 1
66703: PUSH
66704: DOUBLE
66705: LD_INT 1
66707: DEC
66708: ST_TO_ADDR
66709: LD_INT 6
66711: PUSH
66712: FOR_TO
66713: IFFALSE 66818
// begin uc_nation := nation_nature ;
66715: LD_ADDR_OWVAR 21
66719: PUSH
66720: LD_INT 0
66722: ST_TO_ADDR
// uc_side := 0 ;
66723: LD_ADDR_OWVAR 20
66727: PUSH
66728: LD_INT 0
66730: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66731: LD_ADDR_OWVAR 29
66735: PUSH
66736: LD_INT 12
66738: PUSH
66739: LD_INT 12
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: ST_TO_ADDR
// hc_agressivity := 20 ;
66746: LD_ADDR_OWVAR 35
66750: PUSH
66751: LD_INT 20
66753: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66754: LD_ADDR_OWVAR 28
66758: PUSH
66759: LD_INT 17
66761: ST_TO_ADDR
// hc_gallery :=  ;
66762: LD_ADDR_OWVAR 33
66766: PUSH
66767: LD_STRING 
66769: ST_TO_ADDR
// hc_name :=  ;
66770: LD_ADDR_OWVAR 26
66774: PUSH
66775: LD_STRING 
66777: ST_TO_ADDR
// un := CreateHuman ;
66778: LD_ADDR_VAR 0 2
66782: PUSH
66783: CALL_OW 44
66787: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66788: LD_VAR 0 2
66792: PPUSH
66793: LD_INT 1
66795: PPUSH
66796: CALL_OW 51
// tmp := tmp ^ un ;
66800: LD_ADDR_VAR 0 3
66804: PUSH
66805: LD_VAR 0 3
66809: PUSH
66810: LD_VAR 0 2
66814: ADD
66815: ST_TO_ADDR
// end ;
66816: GO 66712
66818: POP
66819: POP
// repeat wait ( 0 0$1 ) ;
66820: LD_INT 35
66822: PPUSH
66823: CALL_OW 67
// for un in tmp do
66827: LD_ADDR_VAR 0 2
66831: PUSH
66832: LD_VAR 0 3
66836: PUSH
66837: FOR_IN
66838: IFFALSE 66912
// begin if IsDead ( un ) then
66840: LD_VAR 0 2
66844: PPUSH
66845: CALL_OW 301
66849: IFFALSE 66869
// begin tmp := tmp diff un ;
66851: LD_ADDR_VAR 0 3
66855: PUSH
66856: LD_VAR 0 3
66860: PUSH
66861: LD_VAR 0 2
66865: DIFF
66866: ST_TO_ADDR
// continue ;
66867: GO 66837
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66869: LD_VAR 0 2
66873: PPUSH
66874: LD_INT 3
66876: PUSH
66877: LD_INT 22
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PPUSH
66891: CALL_OW 69
66895: PPUSH
66896: LD_VAR 0 2
66900: PPUSH
66901: CALL_OW 74
66905: PPUSH
66906: CALL_OW 115
// end ;
66910: GO 66837
66912: POP
66913: POP
// until not tmp ;
66914: LD_VAR 0 3
66918: NOT
66919: IFFALSE 66820
// end ;
66921: PPOPN 3
66923: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66924: LD_EXP 50
66928: PUSH
66929: LD_EXP 75
66933: AND
66934: IFFALSE 66988
66936: GO 66938
66938: DISABLE
// begin ToLua ( displayTroll(); ) ;
66939: LD_STRING displayTroll();
66941: PPUSH
66942: CALL_OW 559
// wait ( 3 3$00 ) ;
66946: LD_INT 6300
66948: PPUSH
66949: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66953: LD_STRING hideTroll();
66955: PPUSH
66956: CALL_OW 559
// wait ( 1 1$00 ) ;
66960: LD_INT 2100
66962: PPUSH
66963: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66967: LD_STRING displayTroll();
66969: PPUSH
66970: CALL_OW 559
// wait ( 1 1$00 ) ;
66974: LD_INT 2100
66976: PPUSH
66977: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66981: LD_STRING hideTroll();
66983: PPUSH
66984: CALL_OW 559
// end ;
66988: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66989: LD_EXP 50
66993: PUSH
66994: LD_EXP 76
66998: AND
66999: IFFALSE 67062
67001: GO 67003
67003: DISABLE
67004: LD_INT 0
67006: PPUSH
// begin p := 0 ;
67007: LD_ADDR_VAR 0 1
67011: PUSH
67012: LD_INT 0
67014: ST_TO_ADDR
// repeat game_speed := 1 ;
67015: LD_ADDR_OWVAR 65
67019: PUSH
67020: LD_INT 1
67022: ST_TO_ADDR
// wait ( 0 0$1 ) ;
67023: LD_INT 35
67025: PPUSH
67026: CALL_OW 67
// p := p + 1 ;
67030: LD_ADDR_VAR 0 1
67034: PUSH
67035: LD_VAR 0 1
67039: PUSH
67040: LD_INT 1
67042: PLUS
67043: ST_TO_ADDR
// until p >= 60 ;
67044: LD_VAR 0 1
67048: PUSH
67049: LD_INT 60
67051: GREATEREQUAL
67052: IFFALSE 67015
// game_speed := 4 ;
67054: LD_ADDR_OWVAR 65
67058: PUSH
67059: LD_INT 4
67061: ST_TO_ADDR
// end ;
67062: PPOPN 1
67064: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
67065: LD_EXP 50
67069: PUSH
67070: LD_EXP 77
67074: AND
67075: IFFALSE 67221
67077: GO 67079
67079: DISABLE
67080: LD_INT 0
67082: PPUSH
67083: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67084: LD_ADDR_VAR 0 1
67088: PUSH
67089: LD_INT 22
67091: PUSH
67092: LD_OWVAR 2
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 2
67103: PUSH
67104: LD_INT 30
67106: PUSH
67107: LD_INT 0
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 30
67116: PUSH
67117: LD_INT 1
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: LIST
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PPUSH
67133: CALL_OW 69
67137: ST_TO_ADDR
// if not depot then
67138: LD_VAR 0 1
67142: NOT
67143: IFFALSE 67147
// exit ;
67145: GO 67221
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
67147: LD_ADDR_VAR 0 2
67151: PUSH
67152: LD_VAR 0 1
67156: PUSH
67157: LD_INT 1
67159: PPUSH
67160: LD_VAR 0 1
67164: PPUSH
67165: CALL_OW 12
67169: ARRAY
67170: PPUSH
67171: CALL_OW 274
67175: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
67176: LD_VAR 0 2
67180: PPUSH
67181: LD_INT 1
67183: PPUSH
67184: LD_INT 0
67186: PPUSH
67187: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
67191: LD_VAR 0 2
67195: PPUSH
67196: LD_INT 2
67198: PPUSH
67199: LD_INT 0
67201: PPUSH
67202: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
67206: LD_VAR 0 2
67210: PPUSH
67211: LD_INT 3
67213: PPUSH
67214: LD_INT 0
67216: PPUSH
67217: CALL_OW 277
// end ;
67221: PPOPN 2
67223: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
67224: LD_EXP 50
67228: PUSH
67229: LD_EXP 78
67233: AND
67234: IFFALSE 67331
67236: GO 67238
67238: DISABLE
67239: LD_INT 0
67241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67242: LD_ADDR_VAR 0 1
67246: PUSH
67247: LD_INT 22
67249: PUSH
67250: LD_OWVAR 2
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 21
67261: PUSH
67262: LD_INT 1
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: LD_INT 23
67274: PUSH
67275: LD_INT 0
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: LIST
67290: PPUSH
67291: CALL_OW 69
67295: ST_TO_ADDR
// if not tmp then
67296: LD_VAR 0 1
67300: NOT
67301: IFFALSE 67305
// exit ;
67303: GO 67331
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
67305: LD_VAR 0 1
67309: PUSH
67310: LD_INT 1
67312: PPUSH
67313: LD_VAR 0 1
67317: PPUSH
67318: CALL_OW 12
67322: ARRAY
67323: PPUSH
67324: LD_INT 200
67326: PPUSH
67327: CALL_OW 234
// end ;
67331: PPOPN 1
67333: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
67334: LD_EXP 50
67338: PUSH
67339: LD_EXP 79
67343: AND
67344: IFFALSE 67423
67346: GO 67348
67348: DISABLE
67349: LD_INT 0
67351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
67352: LD_ADDR_VAR 0 1
67356: PUSH
67357: LD_INT 22
67359: PUSH
67360: LD_OWVAR 2
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 21
67371: PUSH
67372: LD_INT 2
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PPUSH
67383: CALL_OW 69
67387: ST_TO_ADDR
// if not tmp then
67388: LD_VAR 0 1
67392: NOT
67393: IFFALSE 67397
// exit ;
67395: GO 67423
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
67397: LD_VAR 0 1
67401: PUSH
67402: LD_INT 1
67404: PPUSH
67405: LD_VAR 0 1
67409: PPUSH
67410: CALL_OW 12
67414: ARRAY
67415: PPUSH
67416: LD_INT 60
67418: PPUSH
67419: CALL_OW 234
// end ;
67423: PPOPN 1
67425: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
67426: LD_EXP 50
67430: PUSH
67431: LD_EXP 80
67435: AND
67436: IFFALSE 67535
67438: GO 67440
67440: DISABLE
67441: LD_INT 0
67443: PPUSH
67444: PPUSH
// begin enable ;
67445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
67446: LD_ADDR_VAR 0 1
67450: PUSH
67451: LD_INT 22
67453: PUSH
67454: LD_OWVAR 2
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 61
67465: PUSH
67466: EMPTY
67467: LIST
67468: PUSH
67469: LD_INT 33
67471: PUSH
67472: LD_INT 2
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: PPUSH
67484: CALL_OW 69
67488: ST_TO_ADDR
// if not tmp then
67489: LD_VAR 0 1
67493: NOT
67494: IFFALSE 67498
// exit ;
67496: GO 67535
// for i in tmp do
67498: LD_ADDR_VAR 0 2
67502: PUSH
67503: LD_VAR 0 1
67507: PUSH
67508: FOR_IN
67509: IFFALSE 67533
// if IsControledBy ( i ) then
67511: LD_VAR 0 2
67515: PPUSH
67516: CALL_OW 312
67520: IFFALSE 67531
// ComUnlink ( i ) ;
67522: LD_VAR 0 2
67526: PPUSH
67527: CALL_OW 136
67531: GO 67508
67533: POP
67534: POP
// end ;
67535: PPOPN 2
67537: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67538: LD_EXP 50
67542: PUSH
67543: LD_EXP 81
67547: AND
67548: IFFALSE 67688
67550: GO 67552
67552: DISABLE
67553: LD_INT 0
67555: PPUSH
67556: PPUSH
// begin ToLua ( displayPowell(); ) ;
67557: LD_STRING displayPowell();
67559: PPUSH
67560: CALL_OW 559
// uc_side := 0 ;
67564: LD_ADDR_OWVAR 20
67568: PUSH
67569: LD_INT 0
67571: ST_TO_ADDR
// uc_nation := 2 ;
67572: LD_ADDR_OWVAR 21
67576: PUSH
67577: LD_INT 2
67579: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67580: LD_ADDR_OWVAR 37
67584: PUSH
67585: LD_INT 14
67587: ST_TO_ADDR
// vc_engine := engine_siberite ;
67588: LD_ADDR_OWVAR 39
67592: PUSH
67593: LD_INT 3
67595: ST_TO_ADDR
// vc_control := control_apeman ;
67596: LD_ADDR_OWVAR 38
67600: PUSH
67601: LD_INT 5
67603: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67604: LD_ADDR_OWVAR 40
67608: PUSH
67609: LD_INT 29
67611: ST_TO_ADDR
// un := CreateVehicle ;
67612: LD_ADDR_VAR 0 2
67616: PUSH
67617: CALL_OW 45
67621: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67622: LD_VAR 0 2
67626: PPUSH
67627: LD_INT 1
67629: PPUSH
67630: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67634: LD_INT 35
67636: PPUSH
67637: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67641: LD_VAR 0 2
67645: PPUSH
67646: LD_INT 22
67648: PUSH
67649: LD_OWVAR 2
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PPUSH
67658: CALL_OW 69
67662: PPUSH
67663: LD_VAR 0 2
67667: PPUSH
67668: CALL_OW 74
67672: PPUSH
67673: CALL_OW 115
// until IsDead ( un ) ;
67677: LD_VAR 0 2
67681: PPUSH
67682: CALL_OW 301
67686: IFFALSE 67634
// end ;
67688: PPOPN 2
67690: END
// every 0 0$1 trigger StreamModeActive and sStu do
67691: LD_EXP 50
67695: PUSH
67696: LD_EXP 89
67700: AND
67701: IFFALSE 67717
67703: GO 67705
67705: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67706: LD_STRING displayStucuk();
67708: PPUSH
67709: CALL_OW 559
// ResetFog ;
67713: CALL_OW 335
// end ;
67717: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67718: LD_EXP 50
67722: PUSH
67723: LD_EXP 82
67727: AND
67728: IFFALSE 67869
67730: GO 67732
67732: DISABLE
67733: LD_INT 0
67735: PPUSH
67736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67737: LD_ADDR_VAR 0 2
67741: PUSH
67742: LD_INT 22
67744: PUSH
67745: LD_OWVAR 2
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 21
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PPUSH
67768: CALL_OW 69
67772: ST_TO_ADDR
// if not tmp then
67773: LD_VAR 0 2
67777: NOT
67778: IFFALSE 67782
// exit ;
67780: GO 67869
// un := tmp [ rand ( 1 , tmp ) ] ;
67782: LD_ADDR_VAR 0 1
67786: PUSH
67787: LD_VAR 0 2
67791: PUSH
67792: LD_INT 1
67794: PPUSH
67795: LD_VAR 0 2
67799: PPUSH
67800: CALL_OW 12
67804: ARRAY
67805: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67806: LD_VAR 0 1
67810: PPUSH
67811: LD_INT 0
67813: PPUSH
67814: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67818: LD_VAR 0 1
67822: PPUSH
67823: LD_OWVAR 3
67827: PUSH
67828: LD_VAR 0 1
67832: DIFF
67833: PPUSH
67834: LD_VAR 0 1
67838: PPUSH
67839: CALL_OW 74
67843: PPUSH
67844: CALL_OW 115
// wait ( 0 0$20 ) ;
67848: LD_INT 700
67850: PPUSH
67851: CALL_OW 67
// SetSide ( un , your_side ) ;
67855: LD_VAR 0 1
67859: PPUSH
67860: LD_OWVAR 2
67864: PPUSH
67865: CALL_OW 235
// end ;
67869: PPOPN 2
67871: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67872: LD_EXP 50
67876: PUSH
67877: LD_EXP 83
67881: AND
67882: IFFALSE 67988
67884: GO 67886
67886: DISABLE
67887: LD_INT 0
67889: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67890: LD_ADDR_VAR 0 1
67894: PUSH
67895: LD_INT 22
67897: PUSH
67898: LD_OWVAR 2
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: LD_INT 30
67912: PUSH
67913: LD_INT 0
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 30
67922: PUSH
67923: LD_INT 1
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: LIST
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PPUSH
67939: CALL_OW 69
67943: ST_TO_ADDR
// if not depot then
67944: LD_VAR 0 1
67948: NOT
67949: IFFALSE 67953
// exit ;
67951: GO 67988
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67953: LD_VAR 0 1
67957: PUSH
67958: LD_INT 1
67960: ARRAY
67961: PPUSH
67962: CALL_OW 250
67966: PPUSH
67967: LD_VAR 0 1
67971: PUSH
67972: LD_INT 1
67974: ARRAY
67975: PPUSH
67976: CALL_OW 251
67980: PPUSH
67981: LD_INT 70
67983: PPUSH
67984: CALL_OW 495
// end ;
67988: PPOPN 1
67990: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67991: LD_EXP 50
67995: PUSH
67996: LD_EXP 84
68000: AND
68001: IFFALSE 68212
68003: GO 68005
68005: DISABLE
68006: LD_INT 0
68008: PPUSH
68009: PPUSH
68010: PPUSH
68011: PPUSH
68012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68013: LD_ADDR_VAR 0 5
68017: PUSH
68018: LD_INT 22
68020: PUSH
68021: LD_OWVAR 2
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 21
68032: PUSH
68033: LD_INT 1
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PPUSH
68044: CALL_OW 69
68048: ST_TO_ADDR
// if not tmp then
68049: LD_VAR 0 5
68053: NOT
68054: IFFALSE 68058
// exit ;
68056: GO 68212
// for i in tmp do
68058: LD_ADDR_VAR 0 1
68062: PUSH
68063: LD_VAR 0 5
68067: PUSH
68068: FOR_IN
68069: IFFALSE 68210
// begin d := rand ( 0 , 5 ) ;
68071: LD_ADDR_VAR 0 4
68075: PUSH
68076: LD_INT 0
68078: PPUSH
68079: LD_INT 5
68081: PPUSH
68082: CALL_OW 12
68086: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
68087: LD_ADDR_VAR 0 2
68091: PUSH
68092: LD_VAR 0 1
68096: PPUSH
68097: CALL_OW 250
68101: PPUSH
68102: LD_VAR 0 4
68106: PPUSH
68107: LD_INT 3
68109: PPUSH
68110: LD_INT 12
68112: PPUSH
68113: CALL_OW 12
68117: PPUSH
68118: CALL_OW 272
68122: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
68123: LD_ADDR_VAR 0 3
68127: PUSH
68128: LD_VAR 0 1
68132: PPUSH
68133: CALL_OW 251
68137: PPUSH
68138: LD_VAR 0 4
68142: PPUSH
68143: LD_INT 3
68145: PPUSH
68146: LD_INT 12
68148: PPUSH
68149: CALL_OW 12
68153: PPUSH
68154: CALL_OW 273
68158: ST_TO_ADDR
// if ValidHex ( x , y ) then
68159: LD_VAR 0 2
68163: PPUSH
68164: LD_VAR 0 3
68168: PPUSH
68169: CALL_OW 488
68173: IFFALSE 68208
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
68175: LD_VAR 0 1
68179: PPUSH
68180: LD_VAR 0 2
68184: PPUSH
68185: LD_VAR 0 3
68189: PPUSH
68190: LD_INT 3
68192: PPUSH
68193: LD_INT 6
68195: PPUSH
68196: CALL_OW 12
68200: PPUSH
68201: LD_INT 1
68203: PPUSH
68204: CALL_OW 483
// end ;
68208: GO 68068
68210: POP
68211: POP
// end ;
68212: PPOPN 5
68214: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
68215: LD_EXP 50
68219: PUSH
68220: LD_EXP 85
68224: AND
68225: IFFALSE 68319
68227: GO 68229
68229: DISABLE
68230: LD_INT 0
68232: PPUSH
68233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
68234: LD_ADDR_VAR 0 2
68238: PUSH
68239: LD_INT 22
68241: PUSH
68242: LD_OWVAR 2
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 32
68253: PUSH
68254: LD_INT 1
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 21
68263: PUSH
68264: LD_INT 2
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: LIST
68275: PPUSH
68276: CALL_OW 69
68280: ST_TO_ADDR
// if not tmp then
68281: LD_VAR 0 2
68285: NOT
68286: IFFALSE 68290
// exit ;
68288: GO 68319
// for i in tmp do
68290: LD_ADDR_VAR 0 1
68294: PUSH
68295: LD_VAR 0 2
68299: PUSH
68300: FOR_IN
68301: IFFALSE 68317
// SetFuel ( i , 0 ) ;
68303: LD_VAR 0 1
68307: PPUSH
68308: LD_INT 0
68310: PPUSH
68311: CALL_OW 240
68315: GO 68300
68317: POP
68318: POP
// end ;
68319: PPOPN 2
68321: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
68322: LD_EXP 50
68326: PUSH
68327: LD_EXP 86
68331: AND
68332: IFFALSE 68398
68334: GO 68336
68336: DISABLE
68337: LD_INT 0
68339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68340: LD_ADDR_VAR 0 1
68344: PUSH
68345: LD_INT 22
68347: PUSH
68348: LD_OWVAR 2
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 30
68359: PUSH
68360: LD_INT 29
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PPUSH
68371: CALL_OW 69
68375: ST_TO_ADDR
// if not tmp then
68376: LD_VAR 0 1
68380: NOT
68381: IFFALSE 68385
// exit ;
68383: GO 68398
// DestroyUnit ( tmp [ 1 ] ) ;
68385: LD_VAR 0 1
68389: PUSH
68390: LD_INT 1
68392: ARRAY
68393: PPUSH
68394: CALL_OW 65
// end ;
68398: PPOPN 1
68400: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
68401: LD_EXP 50
68405: PUSH
68406: LD_EXP 88
68410: AND
68411: IFFALSE 68540
68413: GO 68415
68415: DISABLE
68416: LD_INT 0
68418: PPUSH
// begin uc_side := 0 ;
68419: LD_ADDR_OWVAR 20
68423: PUSH
68424: LD_INT 0
68426: ST_TO_ADDR
// uc_nation := nation_arabian ;
68427: LD_ADDR_OWVAR 21
68431: PUSH
68432: LD_INT 2
68434: ST_TO_ADDR
// hc_gallery :=  ;
68435: LD_ADDR_OWVAR 33
68439: PUSH
68440: LD_STRING 
68442: ST_TO_ADDR
// hc_name :=  ;
68443: LD_ADDR_OWVAR 26
68447: PUSH
68448: LD_STRING 
68450: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
68451: LD_INT 1
68453: PPUSH
68454: LD_INT 11
68456: PPUSH
68457: LD_INT 10
68459: PPUSH
68460: CALL_OW 380
// un := CreateHuman ;
68464: LD_ADDR_VAR 0 1
68468: PUSH
68469: CALL_OW 44
68473: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68474: LD_VAR 0 1
68478: PPUSH
68479: LD_INT 1
68481: PPUSH
68482: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68486: LD_INT 35
68488: PPUSH
68489: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68493: LD_VAR 0 1
68497: PPUSH
68498: LD_INT 22
68500: PUSH
68501: LD_OWVAR 2
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PPUSH
68510: CALL_OW 69
68514: PPUSH
68515: LD_VAR 0 1
68519: PPUSH
68520: CALL_OW 74
68524: PPUSH
68525: CALL_OW 115
// until IsDead ( un ) ;
68529: LD_VAR 0 1
68533: PPUSH
68534: CALL_OW 301
68538: IFFALSE 68486
// end ;
68540: PPOPN 1
68542: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68543: LD_EXP 50
68547: PUSH
68548: LD_EXP 90
68552: AND
68553: IFFALSE 68565
68555: GO 68557
68557: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68558: LD_STRING earthquake(getX(game), 0, 32)
68560: PPUSH
68561: CALL_OW 559
68565: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68566: LD_EXP 50
68570: PUSH
68571: LD_EXP 91
68575: AND
68576: IFFALSE 68667
68578: GO 68580
68580: DISABLE
68581: LD_INT 0
68583: PPUSH
// begin enable ;
68584: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68585: LD_ADDR_VAR 0 1
68589: PUSH
68590: LD_INT 22
68592: PUSH
68593: LD_OWVAR 2
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 21
68604: PUSH
68605: LD_INT 2
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 33
68614: PUSH
68615: LD_INT 3
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: LIST
68626: PPUSH
68627: CALL_OW 69
68631: ST_TO_ADDR
// if not tmp then
68632: LD_VAR 0 1
68636: NOT
68637: IFFALSE 68641
// exit ;
68639: GO 68667
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68641: LD_VAR 0 1
68645: PUSH
68646: LD_INT 1
68648: PPUSH
68649: LD_VAR 0 1
68653: PPUSH
68654: CALL_OW 12
68658: ARRAY
68659: PPUSH
68660: LD_INT 1
68662: PPUSH
68663: CALL_OW 234
// end ;
68667: PPOPN 1
68669: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68670: LD_EXP 50
68674: PUSH
68675: LD_EXP 92
68679: AND
68680: IFFALSE 68821
68682: GO 68684
68684: DISABLE
68685: LD_INT 0
68687: PPUSH
68688: PPUSH
68689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68690: LD_ADDR_VAR 0 3
68694: PUSH
68695: LD_INT 22
68697: PUSH
68698: LD_OWVAR 2
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 25
68709: PUSH
68710: LD_INT 1
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PPUSH
68721: CALL_OW 69
68725: ST_TO_ADDR
// if not tmp then
68726: LD_VAR 0 3
68730: NOT
68731: IFFALSE 68735
// exit ;
68733: GO 68821
// un := tmp [ rand ( 1 , tmp ) ] ;
68735: LD_ADDR_VAR 0 2
68739: PUSH
68740: LD_VAR 0 3
68744: PUSH
68745: LD_INT 1
68747: PPUSH
68748: LD_VAR 0 3
68752: PPUSH
68753: CALL_OW 12
68757: ARRAY
68758: ST_TO_ADDR
// if Crawls ( un ) then
68759: LD_VAR 0 2
68763: PPUSH
68764: CALL_OW 318
68768: IFFALSE 68779
// ComWalk ( un ) ;
68770: LD_VAR 0 2
68774: PPUSH
68775: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68779: LD_VAR 0 2
68783: PPUSH
68784: LD_INT 9
68786: PPUSH
68787: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68791: LD_INT 28
68793: PPUSH
68794: LD_OWVAR 2
68798: PPUSH
68799: LD_INT 2
68801: PPUSH
68802: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68806: LD_INT 29
68808: PPUSH
68809: LD_OWVAR 2
68813: PPUSH
68814: LD_INT 2
68816: PPUSH
68817: CALL_OW 322
// end ;
68821: PPOPN 3
68823: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68824: LD_EXP 50
68828: PUSH
68829: LD_EXP 93
68833: AND
68834: IFFALSE 68945
68836: GO 68838
68838: DISABLE
68839: LD_INT 0
68841: PPUSH
68842: PPUSH
68843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68844: LD_ADDR_VAR 0 3
68848: PUSH
68849: LD_INT 22
68851: PUSH
68852: LD_OWVAR 2
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 25
68863: PUSH
68864: LD_INT 1
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PPUSH
68875: CALL_OW 69
68879: ST_TO_ADDR
// if not tmp then
68880: LD_VAR 0 3
68884: NOT
68885: IFFALSE 68889
// exit ;
68887: GO 68945
// un := tmp [ rand ( 1 , tmp ) ] ;
68889: LD_ADDR_VAR 0 2
68893: PUSH
68894: LD_VAR 0 3
68898: PUSH
68899: LD_INT 1
68901: PPUSH
68902: LD_VAR 0 3
68906: PPUSH
68907: CALL_OW 12
68911: ARRAY
68912: ST_TO_ADDR
// if Crawls ( un ) then
68913: LD_VAR 0 2
68917: PPUSH
68918: CALL_OW 318
68922: IFFALSE 68933
// ComWalk ( un ) ;
68924: LD_VAR 0 2
68928: PPUSH
68929: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68933: LD_VAR 0 2
68937: PPUSH
68938: LD_INT 8
68940: PPUSH
68941: CALL_OW 336
// end ;
68945: PPOPN 3
68947: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68948: LD_EXP 50
68952: PUSH
68953: LD_EXP 94
68957: AND
68958: IFFALSE 69102
68960: GO 68962
68962: DISABLE
68963: LD_INT 0
68965: PPUSH
68966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68967: LD_ADDR_VAR 0 2
68971: PUSH
68972: LD_INT 22
68974: PUSH
68975: LD_OWVAR 2
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 21
68986: PUSH
68987: LD_INT 2
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 2
68996: PUSH
68997: LD_INT 34
68999: PUSH
69000: LD_INT 12
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 34
69009: PUSH
69010: LD_INT 51
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 34
69019: PUSH
69020: LD_INT 32
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: LIST
69037: PPUSH
69038: CALL_OW 69
69042: ST_TO_ADDR
// if not tmp then
69043: LD_VAR 0 2
69047: NOT
69048: IFFALSE 69052
// exit ;
69050: GO 69102
// for i in tmp do
69052: LD_ADDR_VAR 0 1
69056: PUSH
69057: LD_VAR 0 2
69061: PUSH
69062: FOR_IN
69063: IFFALSE 69100
// if GetCargo ( i , mat_artifact ) = 0 then
69065: LD_VAR 0 1
69069: PPUSH
69070: LD_INT 4
69072: PPUSH
69073: CALL_OW 289
69077: PUSH
69078: LD_INT 0
69080: EQUAL
69081: IFFALSE 69098
// SetCargo ( i , mat_siberit , 100 ) ;
69083: LD_VAR 0 1
69087: PPUSH
69088: LD_INT 3
69090: PPUSH
69091: LD_INT 100
69093: PPUSH
69094: CALL_OW 290
69098: GO 69062
69100: POP
69101: POP
// end ;
69102: PPOPN 2
69104: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
69105: LD_EXP 50
69109: PUSH
69110: LD_EXP 95
69114: AND
69115: IFFALSE 69298
69117: GO 69119
69119: DISABLE
69120: LD_INT 0
69122: PPUSH
69123: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69124: LD_ADDR_VAR 0 2
69128: PUSH
69129: LD_INT 22
69131: PUSH
69132: LD_OWVAR 2
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PPUSH
69141: CALL_OW 69
69145: ST_TO_ADDR
// if not tmp then
69146: LD_VAR 0 2
69150: NOT
69151: IFFALSE 69155
// exit ;
69153: GO 69298
// for i := 1 to 2 do
69155: LD_ADDR_VAR 0 1
69159: PUSH
69160: DOUBLE
69161: LD_INT 1
69163: DEC
69164: ST_TO_ADDR
69165: LD_INT 2
69167: PUSH
69168: FOR_TO
69169: IFFALSE 69296
// begin uc_side := your_side ;
69171: LD_ADDR_OWVAR 20
69175: PUSH
69176: LD_OWVAR 2
69180: ST_TO_ADDR
// uc_nation := nation_american ;
69181: LD_ADDR_OWVAR 21
69185: PUSH
69186: LD_INT 1
69188: ST_TO_ADDR
// vc_chassis := us_morphling ;
69189: LD_ADDR_OWVAR 37
69193: PUSH
69194: LD_INT 5
69196: ST_TO_ADDR
// vc_engine := engine_siberite ;
69197: LD_ADDR_OWVAR 39
69201: PUSH
69202: LD_INT 3
69204: ST_TO_ADDR
// vc_control := control_computer ;
69205: LD_ADDR_OWVAR 38
69209: PUSH
69210: LD_INT 3
69212: ST_TO_ADDR
// vc_weapon := us_double_laser ;
69213: LD_ADDR_OWVAR 40
69217: PUSH
69218: LD_INT 10
69220: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
69221: LD_VAR 0 2
69225: PUSH
69226: LD_INT 1
69228: ARRAY
69229: PPUSH
69230: CALL_OW 310
69234: NOT
69235: IFFALSE 69282
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
69237: CALL_OW 45
69241: PPUSH
69242: LD_VAR 0 2
69246: PUSH
69247: LD_INT 1
69249: ARRAY
69250: PPUSH
69251: CALL_OW 250
69255: PPUSH
69256: LD_VAR 0 2
69260: PUSH
69261: LD_INT 1
69263: ARRAY
69264: PPUSH
69265: CALL_OW 251
69269: PPUSH
69270: LD_INT 12
69272: PPUSH
69273: LD_INT 1
69275: PPUSH
69276: CALL_OW 50
69280: GO 69294
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
69282: CALL_OW 45
69286: PPUSH
69287: LD_INT 1
69289: PPUSH
69290: CALL_OW 51
// end ;
69294: GO 69168
69296: POP
69297: POP
// end ;
69298: PPOPN 2
69300: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
69301: LD_EXP 50
69305: PUSH
69306: LD_EXP 96
69310: AND
69311: IFFALSE 69533
69313: GO 69315
69315: DISABLE
69316: LD_INT 0
69318: PPUSH
69319: PPUSH
69320: PPUSH
69321: PPUSH
69322: PPUSH
69323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69324: LD_ADDR_VAR 0 6
69328: PUSH
69329: LD_INT 22
69331: PUSH
69332: LD_OWVAR 2
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 21
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 3
69353: PUSH
69354: LD_INT 23
69356: PUSH
69357: LD_INT 0
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: LIST
69372: PPUSH
69373: CALL_OW 69
69377: ST_TO_ADDR
// if not tmp then
69378: LD_VAR 0 6
69382: NOT
69383: IFFALSE 69387
// exit ;
69385: GO 69533
// s1 := rand ( 1 , 4 ) ;
69387: LD_ADDR_VAR 0 2
69391: PUSH
69392: LD_INT 1
69394: PPUSH
69395: LD_INT 4
69397: PPUSH
69398: CALL_OW 12
69402: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
69403: LD_ADDR_VAR 0 4
69407: PUSH
69408: LD_VAR 0 6
69412: PUSH
69413: LD_INT 1
69415: ARRAY
69416: PPUSH
69417: LD_VAR 0 2
69421: PPUSH
69422: CALL_OW 259
69426: ST_TO_ADDR
// if s1 = 1 then
69427: LD_VAR 0 2
69431: PUSH
69432: LD_INT 1
69434: EQUAL
69435: IFFALSE 69455
// s2 := rand ( 2 , 4 ) else
69437: LD_ADDR_VAR 0 3
69441: PUSH
69442: LD_INT 2
69444: PPUSH
69445: LD_INT 4
69447: PPUSH
69448: CALL_OW 12
69452: ST_TO_ADDR
69453: GO 69463
// s2 := 1 ;
69455: LD_ADDR_VAR 0 3
69459: PUSH
69460: LD_INT 1
69462: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
69463: LD_ADDR_VAR 0 5
69467: PUSH
69468: LD_VAR 0 6
69472: PUSH
69473: LD_INT 1
69475: ARRAY
69476: PPUSH
69477: LD_VAR 0 3
69481: PPUSH
69482: CALL_OW 259
69486: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
69487: LD_VAR 0 6
69491: PUSH
69492: LD_INT 1
69494: ARRAY
69495: PPUSH
69496: LD_VAR 0 2
69500: PPUSH
69501: LD_VAR 0 5
69505: PPUSH
69506: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69510: LD_VAR 0 6
69514: PUSH
69515: LD_INT 1
69517: ARRAY
69518: PPUSH
69519: LD_VAR 0 3
69523: PPUSH
69524: LD_VAR 0 4
69528: PPUSH
69529: CALL_OW 237
// end ;
69533: PPOPN 6
69535: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69536: LD_EXP 50
69540: PUSH
69541: LD_EXP 97
69545: AND
69546: IFFALSE 69625
69548: GO 69550
69550: DISABLE
69551: LD_INT 0
69553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69554: LD_ADDR_VAR 0 1
69558: PUSH
69559: LD_INT 22
69561: PUSH
69562: LD_OWVAR 2
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 30
69573: PUSH
69574: LD_INT 3
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PPUSH
69585: CALL_OW 69
69589: ST_TO_ADDR
// if not tmp then
69590: LD_VAR 0 1
69594: NOT
69595: IFFALSE 69599
// exit ;
69597: GO 69625
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69599: LD_VAR 0 1
69603: PUSH
69604: LD_INT 1
69606: PPUSH
69607: LD_VAR 0 1
69611: PPUSH
69612: CALL_OW 12
69616: ARRAY
69617: PPUSH
69618: LD_INT 1
69620: PPUSH
69621: CALL_OW 234
// end ;
69625: PPOPN 1
69627: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69628: LD_EXP 50
69632: PUSH
69633: LD_EXP 98
69637: AND
69638: IFFALSE 69750
69640: GO 69642
69642: DISABLE
69643: LD_INT 0
69645: PPUSH
69646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69647: LD_ADDR_VAR 0 2
69651: PUSH
69652: LD_INT 22
69654: PUSH
69655: LD_OWVAR 2
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 2
69666: PUSH
69667: LD_INT 30
69669: PUSH
69670: LD_INT 27
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 30
69679: PUSH
69680: LD_INT 26
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 30
69689: PUSH
69690: LD_INT 28
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PPUSH
69707: CALL_OW 69
69711: ST_TO_ADDR
// if not tmp then
69712: LD_VAR 0 2
69716: NOT
69717: IFFALSE 69721
// exit ;
69719: GO 69750
// for i in tmp do
69721: LD_ADDR_VAR 0 1
69725: PUSH
69726: LD_VAR 0 2
69730: PUSH
69731: FOR_IN
69732: IFFALSE 69748
// SetLives ( i , 1 ) ;
69734: LD_VAR 0 1
69738: PPUSH
69739: LD_INT 1
69741: PPUSH
69742: CALL_OW 234
69746: GO 69731
69748: POP
69749: POP
// end ;
69750: PPOPN 2
69752: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69753: LD_EXP 50
69757: PUSH
69758: LD_EXP 99
69762: AND
69763: IFFALSE 70050
69765: GO 69767
69767: DISABLE
69768: LD_INT 0
69770: PPUSH
69771: PPUSH
69772: PPUSH
// begin i := rand ( 1 , 7 ) ;
69773: LD_ADDR_VAR 0 1
69777: PUSH
69778: LD_INT 1
69780: PPUSH
69781: LD_INT 7
69783: PPUSH
69784: CALL_OW 12
69788: ST_TO_ADDR
// case i of 1 :
69789: LD_VAR 0 1
69793: PUSH
69794: LD_INT 1
69796: DOUBLE
69797: EQUAL
69798: IFTRUE 69802
69800: GO 69812
69802: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69803: LD_STRING earthquake(getX(game), 0, 32)
69805: PPUSH
69806: CALL_OW 559
69810: GO 70050
69812: LD_INT 2
69814: DOUBLE
69815: EQUAL
69816: IFTRUE 69820
69818: GO 69834
69820: POP
// begin ToLua ( displayStucuk(); ) ;
69821: LD_STRING displayStucuk();
69823: PPUSH
69824: CALL_OW 559
// ResetFog ;
69828: CALL_OW 335
// end ; 3 :
69832: GO 70050
69834: LD_INT 3
69836: DOUBLE
69837: EQUAL
69838: IFTRUE 69842
69840: GO 69946
69842: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69843: LD_ADDR_VAR 0 2
69847: PUSH
69848: LD_INT 22
69850: PUSH
69851: LD_OWVAR 2
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 25
69862: PUSH
69863: LD_INT 1
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PPUSH
69874: CALL_OW 69
69878: ST_TO_ADDR
// if not tmp then
69879: LD_VAR 0 2
69883: NOT
69884: IFFALSE 69888
// exit ;
69886: GO 70050
// un := tmp [ rand ( 1 , tmp ) ] ;
69888: LD_ADDR_VAR 0 3
69892: PUSH
69893: LD_VAR 0 2
69897: PUSH
69898: LD_INT 1
69900: PPUSH
69901: LD_VAR 0 2
69905: PPUSH
69906: CALL_OW 12
69910: ARRAY
69911: ST_TO_ADDR
// if Crawls ( un ) then
69912: LD_VAR 0 3
69916: PPUSH
69917: CALL_OW 318
69921: IFFALSE 69932
// ComWalk ( un ) ;
69923: LD_VAR 0 3
69927: PPUSH
69928: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69932: LD_VAR 0 3
69936: PPUSH
69937: LD_INT 8
69939: PPUSH
69940: CALL_OW 336
// end ; 4 :
69944: GO 70050
69946: LD_INT 4
69948: DOUBLE
69949: EQUAL
69950: IFTRUE 69954
69952: GO 70028
69954: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69955: LD_ADDR_VAR 0 2
69959: PUSH
69960: LD_INT 22
69962: PUSH
69963: LD_OWVAR 2
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 30
69974: PUSH
69975: LD_INT 29
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PPUSH
69986: CALL_OW 69
69990: ST_TO_ADDR
// if not tmp then
69991: LD_VAR 0 2
69995: NOT
69996: IFFALSE 70000
// exit ;
69998: GO 70050
// CenterNowOnUnits ( tmp [ 1 ] ) ;
70000: LD_VAR 0 2
70004: PUSH
70005: LD_INT 1
70007: ARRAY
70008: PPUSH
70009: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
70013: LD_VAR 0 2
70017: PUSH
70018: LD_INT 1
70020: ARRAY
70021: PPUSH
70022: CALL_OW 65
// end ; 5 .. 7 :
70026: GO 70050
70028: LD_INT 5
70030: DOUBLE
70031: GREATEREQUAL
70032: IFFALSE 70040
70034: LD_INT 7
70036: DOUBLE
70037: LESSEQUAL
70038: IFTRUE 70042
70040: GO 70049
70042: POP
// StreamSibBomb ; end ;
70043: CALL 66287 0 0
70047: GO 70050
70049: POP
// end ;
70050: PPOPN 3
70052: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
70053: LD_EXP 50
70057: PUSH
70058: LD_EXP 100
70062: AND
70063: IFFALSE 70219
70065: GO 70067
70067: DISABLE
70068: LD_INT 0
70070: PPUSH
70071: PPUSH
70072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
70073: LD_ADDR_VAR 0 2
70077: PUSH
70078: LD_INT 81
70080: PUSH
70081: LD_OWVAR 2
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 2
70092: PUSH
70093: LD_INT 21
70095: PUSH
70096: LD_INT 1
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 21
70105: PUSH
70106: LD_INT 2
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: LIST
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PPUSH
70122: CALL_OW 69
70126: ST_TO_ADDR
// if not tmp then
70127: LD_VAR 0 2
70131: NOT
70132: IFFALSE 70136
// exit ;
70134: GO 70219
// p := 0 ;
70136: LD_ADDR_VAR 0 3
70140: PUSH
70141: LD_INT 0
70143: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70144: LD_INT 35
70146: PPUSH
70147: CALL_OW 67
// p := p + 1 ;
70151: LD_ADDR_VAR 0 3
70155: PUSH
70156: LD_VAR 0 3
70160: PUSH
70161: LD_INT 1
70163: PLUS
70164: ST_TO_ADDR
// for i in tmp do
70165: LD_ADDR_VAR 0 1
70169: PUSH
70170: LD_VAR 0 2
70174: PUSH
70175: FOR_IN
70176: IFFALSE 70207
// if GetLives ( i ) < 1000 then
70178: LD_VAR 0 1
70182: PPUSH
70183: CALL_OW 256
70187: PUSH
70188: LD_INT 1000
70190: LESS
70191: IFFALSE 70205
// SetLives ( i , 1000 ) ;
70193: LD_VAR 0 1
70197: PPUSH
70198: LD_INT 1000
70200: PPUSH
70201: CALL_OW 234
70205: GO 70175
70207: POP
70208: POP
// until p > 20 ;
70209: LD_VAR 0 3
70213: PUSH
70214: LD_INT 20
70216: GREATER
70217: IFFALSE 70144
// end ;
70219: PPOPN 3
70221: END
// every 0 0$1 trigger StreamModeActive and sTime do
70222: LD_EXP 50
70226: PUSH
70227: LD_EXP 101
70231: AND
70232: IFFALSE 70267
70234: GO 70236
70236: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
70237: LD_INT 28
70239: PPUSH
70240: LD_OWVAR 2
70244: PPUSH
70245: LD_INT 2
70247: PPUSH
70248: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
70252: LD_INT 30
70254: PPUSH
70255: LD_OWVAR 2
70259: PPUSH
70260: LD_INT 2
70262: PPUSH
70263: CALL_OW 322
// end ;
70267: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
70268: LD_EXP 50
70272: PUSH
70273: LD_EXP 102
70277: AND
70278: IFFALSE 70399
70280: GO 70282
70282: DISABLE
70283: LD_INT 0
70285: PPUSH
70286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70287: LD_ADDR_VAR 0 2
70291: PUSH
70292: LD_INT 22
70294: PUSH
70295: LD_OWVAR 2
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 21
70306: PUSH
70307: LD_INT 1
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 3
70316: PUSH
70317: LD_INT 23
70319: PUSH
70320: LD_INT 0
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: LIST
70335: PPUSH
70336: CALL_OW 69
70340: ST_TO_ADDR
// if not tmp then
70341: LD_VAR 0 2
70345: NOT
70346: IFFALSE 70350
// exit ;
70348: GO 70399
// for i in tmp do
70350: LD_ADDR_VAR 0 1
70354: PUSH
70355: LD_VAR 0 2
70359: PUSH
70360: FOR_IN
70361: IFFALSE 70397
// begin if Crawls ( i ) then
70363: LD_VAR 0 1
70367: PPUSH
70368: CALL_OW 318
70372: IFFALSE 70383
// ComWalk ( i ) ;
70374: LD_VAR 0 1
70378: PPUSH
70379: CALL_OW 138
// SetClass ( i , 2 ) ;
70383: LD_VAR 0 1
70387: PPUSH
70388: LD_INT 2
70390: PPUSH
70391: CALL_OW 336
// end ;
70395: GO 70360
70397: POP
70398: POP
// end ;
70399: PPOPN 2
70401: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
70402: LD_EXP 50
70406: PUSH
70407: LD_EXP 103
70411: AND
70412: IFFALSE 70700
70414: GO 70416
70416: DISABLE
70417: LD_INT 0
70419: PPUSH
70420: PPUSH
70421: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
70422: LD_OWVAR 2
70426: PPUSH
70427: LD_INT 9
70429: PPUSH
70430: LD_INT 1
70432: PPUSH
70433: LD_INT 1
70435: PPUSH
70436: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
70440: LD_INT 9
70442: PPUSH
70443: LD_OWVAR 2
70447: PPUSH
70448: CALL_OW 343
// uc_side := 9 ;
70452: LD_ADDR_OWVAR 20
70456: PUSH
70457: LD_INT 9
70459: ST_TO_ADDR
// uc_nation := 2 ;
70460: LD_ADDR_OWVAR 21
70464: PUSH
70465: LD_INT 2
70467: ST_TO_ADDR
// hc_name := Dark Warrior ;
70468: LD_ADDR_OWVAR 26
70472: PUSH
70473: LD_STRING Dark Warrior
70475: ST_TO_ADDR
// hc_gallery :=  ;
70476: LD_ADDR_OWVAR 33
70480: PUSH
70481: LD_STRING 
70483: ST_TO_ADDR
// hc_noskilllimit := true ;
70484: LD_ADDR_OWVAR 76
70488: PUSH
70489: LD_INT 1
70491: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
70492: LD_ADDR_OWVAR 31
70496: PUSH
70497: LD_INT 30
70499: PUSH
70500: LD_INT 30
70502: PUSH
70503: LD_INT 30
70505: PUSH
70506: LD_INT 30
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: ST_TO_ADDR
// un := CreateHuman ;
70515: LD_ADDR_VAR 0 3
70519: PUSH
70520: CALL_OW 44
70524: ST_TO_ADDR
// hc_noskilllimit := false ;
70525: LD_ADDR_OWVAR 76
70529: PUSH
70530: LD_INT 0
70532: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70533: LD_VAR 0 3
70537: PPUSH
70538: LD_INT 1
70540: PPUSH
70541: CALL_OW 51
// ToLua ( playRanger() ) ;
70545: LD_STRING playRanger()
70547: PPUSH
70548: CALL_OW 559
// p := 0 ;
70552: LD_ADDR_VAR 0 2
70556: PUSH
70557: LD_INT 0
70559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70560: LD_INT 35
70562: PPUSH
70563: CALL_OW 67
// p := p + 1 ;
70567: LD_ADDR_VAR 0 2
70571: PUSH
70572: LD_VAR 0 2
70576: PUSH
70577: LD_INT 1
70579: PLUS
70580: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70581: LD_VAR 0 3
70585: PPUSH
70586: CALL_OW 256
70590: PUSH
70591: LD_INT 1000
70593: LESS
70594: IFFALSE 70608
// SetLives ( un , 1000 ) ;
70596: LD_VAR 0 3
70600: PPUSH
70601: LD_INT 1000
70603: PPUSH
70604: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70608: LD_VAR 0 3
70612: PPUSH
70613: LD_INT 81
70615: PUSH
70616: LD_OWVAR 2
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 91
70627: PUSH
70628: LD_VAR 0 3
70632: PUSH
70633: LD_INT 30
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: LIST
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PPUSH
70645: CALL_OW 69
70649: PPUSH
70650: LD_VAR 0 3
70654: PPUSH
70655: CALL_OW 74
70659: PPUSH
70660: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70664: LD_VAR 0 2
70668: PUSH
70669: LD_INT 80
70671: GREATER
70672: PUSH
70673: LD_VAR 0 3
70677: PPUSH
70678: CALL_OW 301
70682: OR
70683: IFFALSE 70560
// if un then
70685: LD_VAR 0 3
70689: IFFALSE 70700
// RemoveUnit ( un ) ;
70691: LD_VAR 0 3
70695: PPUSH
70696: CALL_OW 64
// end ;
70700: PPOPN 3
70702: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70703: LD_EXP 104
70707: IFFALSE 70823
70709: GO 70711
70711: DISABLE
70712: LD_INT 0
70714: PPUSH
70715: PPUSH
70716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70717: LD_ADDR_VAR 0 2
70721: PUSH
70722: LD_INT 81
70724: PUSH
70725: LD_OWVAR 2
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 21
70736: PUSH
70737: LD_INT 1
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PPUSH
70748: CALL_OW 69
70752: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70753: LD_STRING playComputer()
70755: PPUSH
70756: CALL_OW 559
// if not tmp then
70760: LD_VAR 0 2
70764: NOT
70765: IFFALSE 70769
// exit ;
70767: GO 70823
// for i in tmp do
70769: LD_ADDR_VAR 0 1
70773: PUSH
70774: LD_VAR 0 2
70778: PUSH
70779: FOR_IN
70780: IFFALSE 70821
// for j := 1 to 4 do
70782: LD_ADDR_VAR 0 3
70786: PUSH
70787: DOUBLE
70788: LD_INT 1
70790: DEC
70791: ST_TO_ADDR
70792: LD_INT 4
70794: PUSH
70795: FOR_TO
70796: IFFALSE 70817
// SetSkill ( i , j , 10 ) ;
70798: LD_VAR 0 1
70802: PPUSH
70803: LD_VAR 0 3
70807: PPUSH
70808: LD_INT 10
70810: PPUSH
70811: CALL_OW 237
70815: GO 70795
70817: POP
70818: POP
70819: GO 70779
70821: POP
70822: POP
// end ;
70823: PPOPN 3
70825: END
// every 0 0$1 trigger s30 do var i , tmp ;
70826: LD_EXP 105
70830: IFFALSE 70899
70832: GO 70834
70834: DISABLE
70835: LD_INT 0
70837: PPUSH
70838: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70839: LD_ADDR_VAR 0 2
70843: PUSH
70844: LD_INT 22
70846: PUSH
70847: LD_OWVAR 2
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PPUSH
70856: CALL_OW 69
70860: ST_TO_ADDR
// if not tmp then
70861: LD_VAR 0 2
70865: NOT
70866: IFFALSE 70870
// exit ;
70868: GO 70899
// for i in tmp do
70870: LD_ADDR_VAR 0 1
70874: PUSH
70875: LD_VAR 0 2
70879: PUSH
70880: FOR_IN
70881: IFFALSE 70897
// SetLives ( i , 300 ) ;
70883: LD_VAR 0 1
70887: PPUSH
70888: LD_INT 300
70890: PPUSH
70891: CALL_OW 234
70895: GO 70880
70897: POP
70898: POP
// end ;
70899: PPOPN 2
70901: END
// every 0 0$1 trigger s60 do var i , tmp ;
70902: LD_EXP 106
70906: IFFALSE 70975
70908: GO 70910
70910: DISABLE
70911: LD_INT 0
70913: PPUSH
70914: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70915: LD_ADDR_VAR 0 2
70919: PUSH
70920: LD_INT 22
70922: PUSH
70923: LD_OWVAR 2
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PPUSH
70932: CALL_OW 69
70936: ST_TO_ADDR
// if not tmp then
70937: LD_VAR 0 2
70941: NOT
70942: IFFALSE 70946
// exit ;
70944: GO 70975
// for i in tmp do
70946: LD_ADDR_VAR 0 1
70950: PUSH
70951: LD_VAR 0 2
70955: PUSH
70956: FOR_IN
70957: IFFALSE 70973
// SetLives ( i , 600 ) ;
70959: LD_VAR 0 1
70963: PPUSH
70964: LD_INT 600
70966: PPUSH
70967: CALL_OW 234
70971: GO 70956
70973: POP
70974: POP
// end ;
70975: PPOPN 2
70977: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70978: LD_INT 0
70980: PPUSH
// case cmd of 301 :
70981: LD_VAR 0 1
70985: PUSH
70986: LD_INT 301
70988: DOUBLE
70989: EQUAL
70990: IFTRUE 70994
70992: GO 71026
70994: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70995: LD_VAR 0 6
70999: PPUSH
71000: LD_VAR 0 7
71004: PPUSH
71005: LD_VAR 0 8
71009: PPUSH
71010: LD_VAR 0 4
71014: PPUSH
71015: LD_VAR 0 5
71019: PPUSH
71020: CALL 72235 0 5
71024: GO 71147
71026: LD_INT 302
71028: DOUBLE
71029: EQUAL
71030: IFTRUE 71034
71032: GO 71071
71034: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
71035: LD_VAR 0 6
71039: PPUSH
71040: LD_VAR 0 7
71044: PPUSH
71045: LD_VAR 0 8
71049: PPUSH
71050: LD_VAR 0 9
71054: PPUSH
71055: LD_VAR 0 4
71059: PPUSH
71060: LD_VAR 0 5
71064: PPUSH
71065: CALL 72326 0 6
71069: GO 71147
71071: LD_INT 303
71073: DOUBLE
71074: EQUAL
71075: IFTRUE 71079
71077: GO 71116
71079: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
71080: LD_VAR 0 6
71084: PPUSH
71085: LD_VAR 0 7
71089: PPUSH
71090: LD_VAR 0 8
71094: PPUSH
71095: LD_VAR 0 9
71099: PPUSH
71100: LD_VAR 0 4
71104: PPUSH
71105: LD_VAR 0 5
71109: PPUSH
71110: CALL 71152 0 6
71114: GO 71147
71116: LD_INT 304
71118: DOUBLE
71119: EQUAL
71120: IFTRUE 71124
71122: GO 71146
71124: POP
// hHackTeleport ( unit , x , y ) ; end ;
71125: LD_VAR 0 2
71129: PPUSH
71130: LD_VAR 0 4
71134: PPUSH
71135: LD_VAR 0 5
71139: PPUSH
71140: CALL 72919 0 3
71144: GO 71147
71146: POP
// end ;
71147: LD_VAR 0 12
71151: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
71152: LD_INT 0
71154: PPUSH
71155: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
71156: LD_VAR 0 1
71160: PUSH
71161: LD_INT 1
71163: LESS
71164: PUSH
71165: LD_VAR 0 1
71169: PUSH
71170: LD_INT 3
71172: GREATER
71173: OR
71174: PUSH
71175: LD_VAR 0 5
71179: PPUSH
71180: LD_VAR 0 6
71184: PPUSH
71185: CALL_OW 428
71189: OR
71190: IFFALSE 71194
// exit ;
71192: GO 71922
// uc_side := your_side ;
71194: LD_ADDR_OWVAR 20
71198: PUSH
71199: LD_OWVAR 2
71203: ST_TO_ADDR
// uc_nation := nation ;
71204: LD_ADDR_OWVAR 21
71208: PUSH
71209: LD_VAR 0 1
71213: ST_TO_ADDR
// bc_level = 1 ;
71214: LD_ADDR_OWVAR 43
71218: PUSH
71219: LD_INT 1
71221: ST_TO_ADDR
// case btype of 1 :
71222: LD_VAR 0 2
71226: PUSH
71227: LD_INT 1
71229: DOUBLE
71230: EQUAL
71231: IFTRUE 71235
71233: GO 71246
71235: POP
// bc_type := b_depot ; 2 :
71236: LD_ADDR_OWVAR 42
71240: PUSH
71241: LD_INT 0
71243: ST_TO_ADDR
71244: GO 71866
71246: LD_INT 2
71248: DOUBLE
71249: EQUAL
71250: IFTRUE 71254
71252: GO 71265
71254: POP
// bc_type := b_warehouse ; 3 :
71255: LD_ADDR_OWVAR 42
71259: PUSH
71260: LD_INT 1
71262: ST_TO_ADDR
71263: GO 71866
71265: LD_INT 3
71267: DOUBLE
71268: EQUAL
71269: IFTRUE 71273
71271: GO 71284
71273: POP
// bc_type := b_lab ; 4 .. 9 :
71274: LD_ADDR_OWVAR 42
71278: PUSH
71279: LD_INT 6
71281: ST_TO_ADDR
71282: GO 71866
71284: LD_INT 4
71286: DOUBLE
71287: GREATEREQUAL
71288: IFFALSE 71296
71290: LD_INT 9
71292: DOUBLE
71293: LESSEQUAL
71294: IFTRUE 71298
71296: GO 71358
71298: POP
// begin bc_type := b_lab_half ;
71299: LD_ADDR_OWVAR 42
71303: PUSH
71304: LD_INT 7
71306: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
71307: LD_ADDR_OWVAR 44
71311: PUSH
71312: LD_INT 10
71314: PUSH
71315: LD_INT 11
71317: PUSH
71318: LD_INT 12
71320: PUSH
71321: LD_INT 15
71323: PUSH
71324: LD_INT 14
71326: PUSH
71327: LD_INT 13
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: PUSH
71338: LD_VAR 0 2
71342: PUSH
71343: LD_INT 3
71345: MINUS
71346: ARRAY
71347: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
71348: LD_ADDR_OWVAR 45
71352: PUSH
71353: LD_INT 9
71355: ST_TO_ADDR
// end ; 10 .. 13 :
71356: GO 71866
71358: LD_INT 10
71360: DOUBLE
71361: GREATEREQUAL
71362: IFFALSE 71370
71364: LD_INT 13
71366: DOUBLE
71367: LESSEQUAL
71368: IFTRUE 71372
71370: GO 71449
71372: POP
// begin bc_type := b_lab_full ;
71373: LD_ADDR_OWVAR 42
71377: PUSH
71378: LD_INT 8
71380: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
71381: LD_ADDR_OWVAR 44
71385: PUSH
71386: LD_INT 10
71388: PUSH
71389: LD_INT 12
71391: PUSH
71392: LD_INT 14
71394: PUSH
71395: LD_INT 13
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: PUSH
71404: LD_VAR 0 2
71408: PUSH
71409: LD_INT 9
71411: MINUS
71412: ARRAY
71413: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
71414: LD_ADDR_OWVAR 45
71418: PUSH
71419: LD_INT 11
71421: PUSH
71422: LD_INT 15
71424: PUSH
71425: LD_INT 12
71427: PUSH
71428: LD_INT 15
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: PUSH
71437: LD_VAR 0 2
71441: PUSH
71442: LD_INT 9
71444: MINUS
71445: ARRAY
71446: ST_TO_ADDR
// end ; 14 :
71447: GO 71866
71449: LD_INT 14
71451: DOUBLE
71452: EQUAL
71453: IFTRUE 71457
71455: GO 71468
71457: POP
// bc_type := b_workshop ; 15 :
71458: LD_ADDR_OWVAR 42
71462: PUSH
71463: LD_INT 2
71465: ST_TO_ADDR
71466: GO 71866
71468: LD_INT 15
71470: DOUBLE
71471: EQUAL
71472: IFTRUE 71476
71474: GO 71487
71476: POP
// bc_type := b_factory ; 16 :
71477: LD_ADDR_OWVAR 42
71481: PUSH
71482: LD_INT 3
71484: ST_TO_ADDR
71485: GO 71866
71487: LD_INT 16
71489: DOUBLE
71490: EQUAL
71491: IFTRUE 71495
71493: GO 71506
71495: POP
// bc_type := b_ext_gun ; 17 :
71496: LD_ADDR_OWVAR 42
71500: PUSH
71501: LD_INT 17
71503: ST_TO_ADDR
71504: GO 71866
71506: LD_INT 17
71508: DOUBLE
71509: EQUAL
71510: IFTRUE 71514
71512: GO 71542
71514: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
71515: LD_ADDR_OWVAR 42
71519: PUSH
71520: LD_INT 19
71522: PUSH
71523: LD_INT 23
71525: PUSH
71526: LD_INT 19
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: LIST
71533: PUSH
71534: LD_VAR 0 1
71538: ARRAY
71539: ST_TO_ADDR
71540: GO 71866
71542: LD_INT 18
71544: DOUBLE
71545: EQUAL
71546: IFTRUE 71550
71548: GO 71561
71550: POP
// bc_type := b_ext_radar ; 19 :
71551: LD_ADDR_OWVAR 42
71555: PUSH
71556: LD_INT 20
71558: ST_TO_ADDR
71559: GO 71866
71561: LD_INT 19
71563: DOUBLE
71564: EQUAL
71565: IFTRUE 71569
71567: GO 71580
71569: POP
// bc_type := b_ext_radio ; 20 :
71570: LD_ADDR_OWVAR 42
71574: PUSH
71575: LD_INT 22
71577: ST_TO_ADDR
71578: GO 71866
71580: LD_INT 20
71582: DOUBLE
71583: EQUAL
71584: IFTRUE 71588
71586: GO 71599
71588: POP
// bc_type := b_ext_siberium ; 21 :
71589: LD_ADDR_OWVAR 42
71593: PUSH
71594: LD_INT 21
71596: ST_TO_ADDR
71597: GO 71866
71599: LD_INT 21
71601: DOUBLE
71602: EQUAL
71603: IFTRUE 71607
71605: GO 71618
71607: POP
// bc_type := b_ext_computer ; 22 :
71608: LD_ADDR_OWVAR 42
71612: PUSH
71613: LD_INT 24
71615: ST_TO_ADDR
71616: GO 71866
71618: LD_INT 22
71620: DOUBLE
71621: EQUAL
71622: IFTRUE 71626
71624: GO 71637
71626: POP
// bc_type := b_ext_track ; 23 :
71627: LD_ADDR_OWVAR 42
71631: PUSH
71632: LD_INT 16
71634: ST_TO_ADDR
71635: GO 71866
71637: LD_INT 23
71639: DOUBLE
71640: EQUAL
71641: IFTRUE 71645
71643: GO 71656
71645: POP
// bc_type := b_ext_laser ; 24 :
71646: LD_ADDR_OWVAR 42
71650: PUSH
71651: LD_INT 25
71653: ST_TO_ADDR
71654: GO 71866
71656: LD_INT 24
71658: DOUBLE
71659: EQUAL
71660: IFTRUE 71664
71662: GO 71675
71664: POP
// bc_type := b_control_tower ; 25 :
71665: LD_ADDR_OWVAR 42
71669: PUSH
71670: LD_INT 36
71672: ST_TO_ADDR
71673: GO 71866
71675: LD_INT 25
71677: DOUBLE
71678: EQUAL
71679: IFTRUE 71683
71681: GO 71694
71683: POP
// bc_type := b_breastwork ; 26 :
71684: LD_ADDR_OWVAR 42
71688: PUSH
71689: LD_INT 31
71691: ST_TO_ADDR
71692: GO 71866
71694: LD_INT 26
71696: DOUBLE
71697: EQUAL
71698: IFTRUE 71702
71700: GO 71713
71702: POP
// bc_type := b_bunker ; 27 :
71703: LD_ADDR_OWVAR 42
71707: PUSH
71708: LD_INT 32
71710: ST_TO_ADDR
71711: GO 71866
71713: LD_INT 27
71715: DOUBLE
71716: EQUAL
71717: IFTRUE 71721
71719: GO 71732
71721: POP
// bc_type := b_turret ; 28 :
71722: LD_ADDR_OWVAR 42
71726: PUSH
71727: LD_INT 33
71729: ST_TO_ADDR
71730: GO 71866
71732: LD_INT 28
71734: DOUBLE
71735: EQUAL
71736: IFTRUE 71740
71738: GO 71751
71740: POP
// bc_type := b_armoury ; 29 :
71741: LD_ADDR_OWVAR 42
71745: PUSH
71746: LD_INT 4
71748: ST_TO_ADDR
71749: GO 71866
71751: LD_INT 29
71753: DOUBLE
71754: EQUAL
71755: IFTRUE 71759
71757: GO 71770
71759: POP
// bc_type := b_barracks ; 30 :
71760: LD_ADDR_OWVAR 42
71764: PUSH
71765: LD_INT 5
71767: ST_TO_ADDR
71768: GO 71866
71770: LD_INT 30
71772: DOUBLE
71773: EQUAL
71774: IFTRUE 71778
71776: GO 71789
71778: POP
// bc_type := b_solar_power ; 31 :
71779: LD_ADDR_OWVAR 42
71783: PUSH
71784: LD_INT 27
71786: ST_TO_ADDR
71787: GO 71866
71789: LD_INT 31
71791: DOUBLE
71792: EQUAL
71793: IFTRUE 71797
71795: GO 71808
71797: POP
// bc_type := b_oil_power ; 32 :
71798: LD_ADDR_OWVAR 42
71802: PUSH
71803: LD_INT 26
71805: ST_TO_ADDR
71806: GO 71866
71808: LD_INT 32
71810: DOUBLE
71811: EQUAL
71812: IFTRUE 71816
71814: GO 71827
71816: POP
// bc_type := b_siberite_power ; 33 :
71817: LD_ADDR_OWVAR 42
71821: PUSH
71822: LD_INT 28
71824: ST_TO_ADDR
71825: GO 71866
71827: LD_INT 33
71829: DOUBLE
71830: EQUAL
71831: IFTRUE 71835
71833: GO 71846
71835: POP
// bc_type := b_oil_mine ; 34 :
71836: LD_ADDR_OWVAR 42
71840: PUSH
71841: LD_INT 29
71843: ST_TO_ADDR
71844: GO 71866
71846: LD_INT 34
71848: DOUBLE
71849: EQUAL
71850: IFTRUE 71854
71852: GO 71865
71854: POP
// bc_type := b_siberite_mine ; end ;
71855: LD_ADDR_OWVAR 42
71859: PUSH
71860: LD_INT 30
71862: ST_TO_ADDR
71863: GO 71866
71865: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71866: LD_ADDR_VAR 0 8
71870: PUSH
71871: LD_VAR 0 5
71875: PPUSH
71876: LD_VAR 0 6
71880: PPUSH
71881: LD_VAR 0 3
71885: PPUSH
71886: CALL_OW 47
71890: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71891: LD_OWVAR 42
71895: PUSH
71896: LD_INT 32
71898: PUSH
71899: LD_INT 33
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: IN
71906: IFFALSE 71922
// PlaceWeaponTurret ( b , weapon ) ;
71908: LD_VAR 0 8
71912: PPUSH
71913: LD_VAR 0 4
71917: PPUSH
71918: CALL_OW 431
// end ;
71922: LD_VAR 0 7
71926: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71927: LD_INT 0
71929: PPUSH
71930: PPUSH
71931: PPUSH
71932: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71933: LD_ADDR_VAR 0 4
71937: PUSH
71938: LD_INT 22
71940: PUSH
71941: LD_OWVAR 2
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 2
71952: PUSH
71953: LD_INT 30
71955: PUSH
71956: LD_INT 0
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 30
71965: PUSH
71966: LD_INT 1
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: LIST
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PPUSH
71982: CALL_OW 69
71986: ST_TO_ADDR
// if not tmp then
71987: LD_VAR 0 4
71991: NOT
71992: IFFALSE 71996
// exit ;
71994: GO 72055
// for i in tmp do
71996: LD_ADDR_VAR 0 2
72000: PUSH
72001: LD_VAR 0 4
72005: PUSH
72006: FOR_IN
72007: IFFALSE 72053
// for j = 1 to 3 do
72009: LD_ADDR_VAR 0 3
72013: PUSH
72014: DOUBLE
72015: LD_INT 1
72017: DEC
72018: ST_TO_ADDR
72019: LD_INT 3
72021: PUSH
72022: FOR_TO
72023: IFFALSE 72049
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
72025: LD_VAR 0 2
72029: PPUSH
72030: CALL_OW 274
72034: PPUSH
72035: LD_VAR 0 3
72039: PPUSH
72040: LD_INT 99999
72042: PPUSH
72043: CALL_OW 277
72047: GO 72022
72049: POP
72050: POP
72051: GO 72006
72053: POP
72054: POP
// end ;
72055: LD_VAR 0 1
72059: RET
// export function hHackSetLevel10 ; var i , j ; begin
72060: LD_INT 0
72062: PPUSH
72063: PPUSH
72064: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72065: LD_ADDR_VAR 0 2
72069: PUSH
72070: LD_INT 21
72072: PUSH
72073: LD_INT 1
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PPUSH
72080: CALL_OW 69
72084: PUSH
72085: FOR_IN
72086: IFFALSE 72138
// if IsSelected ( i ) then
72088: LD_VAR 0 2
72092: PPUSH
72093: CALL_OW 306
72097: IFFALSE 72136
// begin for j := 1 to 4 do
72099: LD_ADDR_VAR 0 3
72103: PUSH
72104: DOUBLE
72105: LD_INT 1
72107: DEC
72108: ST_TO_ADDR
72109: LD_INT 4
72111: PUSH
72112: FOR_TO
72113: IFFALSE 72134
// SetSkill ( i , j , 10 ) ;
72115: LD_VAR 0 2
72119: PPUSH
72120: LD_VAR 0 3
72124: PPUSH
72125: LD_INT 10
72127: PPUSH
72128: CALL_OW 237
72132: GO 72112
72134: POP
72135: POP
// end ;
72136: GO 72085
72138: POP
72139: POP
// end ;
72140: LD_VAR 0 1
72144: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
72145: LD_INT 0
72147: PPUSH
72148: PPUSH
72149: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
72150: LD_ADDR_VAR 0 2
72154: PUSH
72155: LD_INT 22
72157: PUSH
72158: LD_OWVAR 2
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 21
72169: PUSH
72170: LD_INT 1
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PPUSH
72181: CALL_OW 69
72185: PUSH
72186: FOR_IN
72187: IFFALSE 72228
// begin for j := 1 to 4 do
72189: LD_ADDR_VAR 0 3
72193: PUSH
72194: DOUBLE
72195: LD_INT 1
72197: DEC
72198: ST_TO_ADDR
72199: LD_INT 4
72201: PUSH
72202: FOR_TO
72203: IFFALSE 72224
// SetSkill ( i , j , 10 ) ;
72205: LD_VAR 0 2
72209: PPUSH
72210: LD_VAR 0 3
72214: PPUSH
72215: LD_INT 10
72217: PPUSH
72218: CALL_OW 237
72222: GO 72202
72224: POP
72225: POP
// end ;
72226: GO 72186
72228: POP
72229: POP
// end ;
72230: LD_VAR 0 1
72234: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
72235: LD_INT 0
72237: PPUSH
// uc_side := your_side ;
72238: LD_ADDR_OWVAR 20
72242: PUSH
72243: LD_OWVAR 2
72247: ST_TO_ADDR
// uc_nation := nation ;
72248: LD_ADDR_OWVAR 21
72252: PUSH
72253: LD_VAR 0 1
72257: ST_TO_ADDR
// InitHc ;
72258: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
72262: LD_INT 0
72264: PPUSH
72265: LD_VAR 0 2
72269: PPUSH
72270: LD_VAR 0 3
72274: PPUSH
72275: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
72279: LD_VAR 0 4
72283: PPUSH
72284: LD_VAR 0 5
72288: PPUSH
72289: CALL_OW 428
72293: PUSH
72294: LD_INT 0
72296: EQUAL
72297: IFFALSE 72321
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
72299: CALL_OW 44
72303: PPUSH
72304: LD_VAR 0 4
72308: PPUSH
72309: LD_VAR 0 5
72313: PPUSH
72314: LD_INT 1
72316: PPUSH
72317: CALL_OW 48
// end ;
72321: LD_VAR 0 6
72325: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
72326: LD_INT 0
72328: PPUSH
72329: PPUSH
// uc_side := your_side ;
72330: LD_ADDR_OWVAR 20
72334: PUSH
72335: LD_OWVAR 2
72339: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
72340: LD_VAR 0 1
72344: PUSH
72345: LD_INT 1
72347: PUSH
72348: LD_INT 2
72350: PUSH
72351: LD_INT 3
72353: PUSH
72354: LD_INT 4
72356: PUSH
72357: LD_INT 5
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: IN
72367: IFFALSE 72379
// uc_nation := nation_american else
72369: LD_ADDR_OWVAR 21
72373: PUSH
72374: LD_INT 1
72376: ST_TO_ADDR
72377: GO 72422
// if chassis in [ 11 , 12 , 13 , 14 ] then
72379: LD_VAR 0 1
72383: PUSH
72384: LD_INT 11
72386: PUSH
72387: LD_INT 12
72389: PUSH
72390: LD_INT 13
72392: PUSH
72393: LD_INT 14
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: IN
72402: IFFALSE 72414
// uc_nation := nation_arabian else
72404: LD_ADDR_OWVAR 21
72408: PUSH
72409: LD_INT 2
72411: ST_TO_ADDR
72412: GO 72422
// uc_nation := nation_russian ;
72414: LD_ADDR_OWVAR 21
72418: PUSH
72419: LD_INT 3
72421: ST_TO_ADDR
// vc_chassis := chassis ;
72422: LD_ADDR_OWVAR 37
72426: PUSH
72427: LD_VAR 0 1
72431: ST_TO_ADDR
// vc_engine := engine ;
72432: LD_ADDR_OWVAR 39
72436: PUSH
72437: LD_VAR 0 2
72441: ST_TO_ADDR
// vc_control := control ;
72442: LD_ADDR_OWVAR 38
72446: PUSH
72447: LD_VAR 0 3
72451: ST_TO_ADDR
// vc_weapon := weapon ;
72452: LD_ADDR_OWVAR 40
72456: PUSH
72457: LD_VAR 0 4
72461: ST_TO_ADDR
// un := CreateVehicle ;
72462: LD_ADDR_VAR 0 8
72466: PUSH
72467: CALL_OW 45
72471: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
72472: LD_VAR 0 8
72476: PPUSH
72477: LD_INT 0
72479: PPUSH
72480: LD_INT 5
72482: PPUSH
72483: CALL_OW 12
72487: PPUSH
72488: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
72492: LD_VAR 0 8
72496: PPUSH
72497: LD_VAR 0 5
72501: PPUSH
72502: LD_VAR 0 6
72506: PPUSH
72507: LD_INT 1
72509: PPUSH
72510: CALL_OW 48
// end ;
72514: LD_VAR 0 7
72518: RET
// export hInvincible ; every 1 do
72519: GO 72521
72521: DISABLE
// hInvincible := [ ] ;
72522: LD_ADDR_EXP 107
72526: PUSH
72527: EMPTY
72528: ST_TO_ADDR
72529: END
// every 10 do var i ;
72530: GO 72532
72532: DISABLE
72533: LD_INT 0
72535: PPUSH
// begin enable ;
72536: ENABLE
// if not hInvincible then
72537: LD_EXP 107
72541: NOT
72542: IFFALSE 72546
// exit ;
72544: GO 72590
// for i in hInvincible do
72546: LD_ADDR_VAR 0 1
72550: PUSH
72551: LD_EXP 107
72555: PUSH
72556: FOR_IN
72557: IFFALSE 72588
// if GetLives ( i ) < 1000 then
72559: LD_VAR 0 1
72563: PPUSH
72564: CALL_OW 256
72568: PUSH
72569: LD_INT 1000
72571: LESS
72572: IFFALSE 72586
// SetLives ( i , 1000 ) ;
72574: LD_VAR 0 1
72578: PPUSH
72579: LD_INT 1000
72581: PPUSH
72582: CALL_OW 234
72586: GO 72556
72588: POP
72589: POP
// end ;
72590: PPOPN 1
72592: END
// export function hHackInvincible ; var i ; begin
72593: LD_INT 0
72595: PPUSH
72596: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72597: LD_ADDR_VAR 0 2
72601: PUSH
72602: LD_INT 2
72604: PUSH
72605: LD_INT 21
72607: PUSH
72608: LD_INT 1
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 21
72617: PUSH
72618: LD_INT 2
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: LIST
72629: PPUSH
72630: CALL_OW 69
72634: PUSH
72635: FOR_IN
72636: IFFALSE 72697
// if IsSelected ( i ) then
72638: LD_VAR 0 2
72642: PPUSH
72643: CALL_OW 306
72647: IFFALSE 72695
// begin if i in hInvincible then
72649: LD_VAR 0 2
72653: PUSH
72654: LD_EXP 107
72658: IN
72659: IFFALSE 72679
// hInvincible := hInvincible diff i else
72661: LD_ADDR_EXP 107
72665: PUSH
72666: LD_EXP 107
72670: PUSH
72671: LD_VAR 0 2
72675: DIFF
72676: ST_TO_ADDR
72677: GO 72695
// hInvincible := hInvincible union i ;
72679: LD_ADDR_EXP 107
72683: PUSH
72684: LD_EXP 107
72688: PUSH
72689: LD_VAR 0 2
72693: UNION
72694: ST_TO_ADDR
// end ;
72695: GO 72635
72697: POP
72698: POP
// end ;
72699: LD_VAR 0 1
72703: RET
// export function hHackInvisible ; var i , j ; begin
72704: LD_INT 0
72706: PPUSH
72707: PPUSH
72708: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72709: LD_ADDR_VAR 0 2
72713: PUSH
72714: LD_INT 21
72716: PUSH
72717: LD_INT 1
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PPUSH
72724: CALL_OW 69
72728: PUSH
72729: FOR_IN
72730: IFFALSE 72754
// if IsSelected ( i ) then
72732: LD_VAR 0 2
72736: PPUSH
72737: CALL_OW 306
72741: IFFALSE 72752
// ComForceInvisible ( i ) ;
72743: LD_VAR 0 2
72747: PPUSH
72748: CALL_OW 496
72752: GO 72729
72754: POP
72755: POP
// end ;
72756: LD_VAR 0 1
72760: RET
// export function hHackChangeYourSide ; begin
72761: LD_INT 0
72763: PPUSH
// if your_side = 8 then
72764: LD_OWVAR 2
72768: PUSH
72769: LD_INT 8
72771: EQUAL
72772: IFFALSE 72784
// your_side := 0 else
72774: LD_ADDR_OWVAR 2
72778: PUSH
72779: LD_INT 0
72781: ST_TO_ADDR
72782: GO 72798
// your_side := your_side + 1 ;
72784: LD_ADDR_OWVAR 2
72788: PUSH
72789: LD_OWVAR 2
72793: PUSH
72794: LD_INT 1
72796: PLUS
72797: ST_TO_ADDR
// end ;
72798: LD_VAR 0 1
72802: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72803: LD_INT 0
72805: PPUSH
72806: PPUSH
72807: PPUSH
// for i in all_units do
72808: LD_ADDR_VAR 0 2
72812: PUSH
72813: LD_OWVAR 3
72817: PUSH
72818: FOR_IN
72819: IFFALSE 72897
// if IsSelected ( i ) then
72821: LD_VAR 0 2
72825: PPUSH
72826: CALL_OW 306
72830: IFFALSE 72895
// begin j := GetSide ( i ) ;
72832: LD_ADDR_VAR 0 3
72836: PUSH
72837: LD_VAR 0 2
72841: PPUSH
72842: CALL_OW 255
72846: ST_TO_ADDR
// if j = 8 then
72847: LD_VAR 0 3
72851: PUSH
72852: LD_INT 8
72854: EQUAL
72855: IFFALSE 72867
// j := 0 else
72857: LD_ADDR_VAR 0 3
72861: PUSH
72862: LD_INT 0
72864: ST_TO_ADDR
72865: GO 72881
// j := j + 1 ;
72867: LD_ADDR_VAR 0 3
72871: PUSH
72872: LD_VAR 0 3
72876: PUSH
72877: LD_INT 1
72879: PLUS
72880: ST_TO_ADDR
// SetSide ( i , j ) ;
72881: LD_VAR 0 2
72885: PPUSH
72886: LD_VAR 0 3
72890: PPUSH
72891: CALL_OW 235
// end ;
72895: GO 72818
72897: POP
72898: POP
// end ;
72899: LD_VAR 0 1
72903: RET
// export function hHackFog ; begin
72904: LD_INT 0
72906: PPUSH
// FogOff ( true ) ;
72907: LD_INT 1
72909: PPUSH
72910: CALL_OW 344
// end ;
72914: LD_VAR 0 1
72918: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72919: LD_INT 0
72921: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72922: LD_VAR 0 1
72926: PPUSH
72927: LD_VAR 0 2
72931: PPUSH
72932: LD_VAR 0 3
72936: PPUSH
72937: LD_INT 1
72939: PPUSH
72940: LD_INT 1
72942: PPUSH
72943: CALL_OW 483
// CenterOnXY ( x , y ) ;
72947: LD_VAR 0 2
72951: PPUSH
72952: LD_VAR 0 3
72956: PPUSH
72957: CALL_OW 84
// end ;
72961: LD_VAR 0 4
72965: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72966: LD_INT 0
72968: PPUSH
72969: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72970: LD_VAR 0 1
72974: NOT
72975: PUSH
72976: LD_VAR 0 2
72980: PPUSH
72981: LD_VAR 0 3
72985: PPUSH
72986: CALL_OW 488
72990: NOT
72991: OR
72992: PUSH
72993: LD_VAR 0 1
72997: PPUSH
72998: CALL_OW 266
73002: PUSH
73003: LD_INT 3
73005: NONEQUAL
73006: PUSH
73007: LD_VAR 0 1
73011: PPUSH
73012: CALL_OW 247
73016: PUSH
73017: LD_INT 1
73019: EQUAL
73020: NOT
73021: AND
73022: OR
73023: IFFALSE 73027
// exit ;
73025: GO 73176
// if GetType ( factory ) = unit_human then
73027: LD_VAR 0 1
73031: PPUSH
73032: CALL_OW 247
73036: PUSH
73037: LD_INT 1
73039: EQUAL
73040: IFFALSE 73057
// factory := IsInUnit ( factory ) ;
73042: LD_ADDR_VAR 0 1
73046: PUSH
73047: LD_VAR 0 1
73051: PPUSH
73052: CALL_OW 310
73056: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
73057: LD_VAR 0 1
73061: PPUSH
73062: CALL_OW 266
73066: PUSH
73067: LD_INT 3
73069: NONEQUAL
73070: IFFALSE 73074
// exit ;
73072: GO 73176
// if HexInfo ( x , y ) = factory then
73074: LD_VAR 0 2
73078: PPUSH
73079: LD_VAR 0 3
73083: PPUSH
73084: CALL_OW 428
73088: PUSH
73089: LD_VAR 0 1
73093: EQUAL
73094: IFFALSE 73121
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
73096: LD_ADDR_EXP 108
73100: PUSH
73101: LD_EXP 108
73105: PPUSH
73106: LD_VAR 0 1
73110: PPUSH
73111: LD_INT 0
73113: PPUSH
73114: CALL_OW 1
73118: ST_TO_ADDR
73119: GO 73172
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
73121: LD_ADDR_EXP 108
73125: PUSH
73126: LD_EXP 108
73130: PPUSH
73131: LD_VAR 0 1
73135: PPUSH
73136: LD_VAR 0 1
73140: PPUSH
73141: CALL_OW 255
73145: PUSH
73146: LD_VAR 0 1
73150: PUSH
73151: LD_VAR 0 2
73155: PUSH
73156: LD_VAR 0 3
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: PPUSH
73167: CALL_OW 1
73171: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73172: CALL 73181 0 0
// end ;
73176: LD_VAR 0 4
73180: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
73181: LD_INT 0
73183: PPUSH
73184: PPUSH
73185: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
73186: LD_STRING resetFactoryWaypoint();
73188: PPUSH
73189: CALL_OW 559
// if factoryWaypoints then
73193: LD_EXP 108
73197: IFFALSE 73323
// begin list := PrepareArray ( factoryWaypoints ) ;
73199: LD_ADDR_VAR 0 3
73203: PUSH
73204: LD_EXP 108
73208: PPUSH
73209: CALL 58011 0 1
73213: ST_TO_ADDR
// for i := 1 to list do
73214: LD_ADDR_VAR 0 2
73218: PUSH
73219: DOUBLE
73220: LD_INT 1
73222: DEC
73223: ST_TO_ADDR
73224: LD_VAR 0 3
73228: PUSH
73229: FOR_TO
73230: IFFALSE 73321
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73232: LD_STRING setFactoryWaypointXY(
73234: PUSH
73235: LD_VAR 0 3
73239: PUSH
73240: LD_VAR 0 2
73244: ARRAY
73245: PUSH
73246: LD_INT 1
73248: ARRAY
73249: STR
73250: PUSH
73251: LD_STRING ,
73253: STR
73254: PUSH
73255: LD_VAR 0 3
73259: PUSH
73260: LD_VAR 0 2
73264: ARRAY
73265: PUSH
73266: LD_INT 2
73268: ARRAY
73269: STR
73270: PUSH
73271: LD_STRING ,
73273: STR
73274: PUSH
73275: LD_VAR 0 3
73279: PUSH
73280: LD_VAR 0 2
73284: ARRAY
73285: PUSH
73286: LD_INT 3
73288: ARRAY
73289: STR
73290: PUSH
73291: LD_STRING ,
73293: STR
73294: PUSH
73295: LD_VAR 0 3
73299: PUSH
73300: LD_VAR 0 2
73304: ARRAY
73305: PUSH
73306: LD_INT 4
73308: ARRAY
73309: STR
73310: PUSH
73311: LD_STRING )
73313: STR
73314: PPUSH
73315: CALL_OW 559
73319: GO 73229
73321: POP
73322: POP
// end ; end ;
73323: LD_VAR 0 1
73327: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
73328: LD_INT 0
73330: PPUSH
// if HexInfo ( x , y ) = warehouse then
73331: LD_VAR 0 2
73335: PPUSH
73336: LD_VAR 0 3
73340: PPUSH
73341: CALL_OW 428
73345: PUSH
73346: LD_VAR 0 1
73350: EQUAL
73351: IFFALSE 73378
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
73353: LD_ADDR_EXP 109
73357: PUSH
73358: LD_EXP 109
73362: PPUSH
73363: LD_VAR 0 1
73367: PPUSH
73368: LD_INT 0
73370: PPUSH
73371: CALL_OW 1
73375: ST_TO_ADDR
73376: GO 73429
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
73378: LD_ADDR_EXP 109
73382: PUSH
73383: LD_EXP 109
73387: PPUSH
73388: LD_VAR 0 1
73392: PPUSH
73393: LD_VAR 0 1
73397: PPUSH
73398: CALL_OW 255
73402: PUSH
73403: LD_VAR 0 1
73407: PUSH
73408: LD_VAR 0 2
73412: PUSH
73413: LD_VAR 0 3
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: PPUSH
73424: CALL_OW 1
73428: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
73429: CALL 73438 0 0
// end ;
73433: LD_VAR 0 4
73437: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
73438: LD_INT 0
73440: PPUSH
73441: PPUSH
73442: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
73443: LD_STRING resetWarehouseGatheringPoints();
73445: PPUSH
73446: CALL_OW 559
// if warehouseGatheringPoints then
73450: LD_EXP 109
73454: IFFALSE 73580
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
73456: LD_ADDR_VAR 0 3
73460: PUSH
73461: LD_EXP 109
73465: PPUSH
73466: CALL 58011 0 1
73470: ST_TO_ADDR
// for i := 1 to list do
73471: LD_ADDR_VAR 0 2
73475: PUSH
73476: DOUBLE
73477: LD_INT 1
73479: DEC
73480: ST_TO_ADDR
73481: LD_VAR 0 3
73485: PUSH
73486: FOR_TO
73487: IFFALSE 73578
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73489: LD_STRING setWarehouseGatheringPointXY(
73491: PUSH
73492: LD_VAR 0 3
73496: PUSH
73497: LD_VAR 0 2
73501: ARRAY
73502: PUSH
73503: LD_INT 1
73505: ARRAY
73506: STR
73507: PUSH
73508: LD_STRING ,
73510: STR
73511: PUSH
73512: LD_VAR 0 3
73516: PUSH
73517: LD_VAR 0 2
73521: ARRAY
73522: PUSH
73523: LD_INT 2
73525: ARRAY
73526: STR
73527: PUSH
73528: LD_STRING ,
73530: STR
73531: PUSH
73532: LD_VAR 0 3
73536: PUSH
73537: LD_VAR 0 2
73541: ARRAY
73542: PUSH
73543: LD_INT 3
73545: ARRAY
73546: STR
73547: PUSH
73548: LD_STRING ,
73550: STR
73551: PUSH
73552: LD_VAR 0 3
73556: PUSH
73557: LD_VAR 0 2
73561: ARRAY
73562: PUSH
73563: LD_INT 4
73565: ARRAY
73566: STR
73567: PUSH
73568: LD_STRING )
73570: STR
73571: PPUSH
73572: CALL_OW 559
73576: GO 73486
73578: POP
73579: POP
// end ; end ;
73580: LD_VAR 0 1
73584: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73585: LD_EXP 109
73589: IFFALSE 74274
73591: GO 73593
73593: DISABLE
73594: LD_INT 0
73596: PPUSH
73597: PPUSH
73598: PPUSH
73599: PPUSH
73600: PPUSH
73601: PPUSH
73602: PPUSH
73603: PPUSH
73604: PPUSH
// begin enable ;
73605: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73606: LD_ADDR_VAR 0 3
73610: PUSH
73611: LD_EXP 109
73615: PPUSH
73616: CALL 58011 0 1
73620: ST_TO_ADDR
// if not list then
73621: LD_VAR 0 3
73625: NOT
73626: IFFALSE 73630
// exit ;
73628: GO 74274
// for i := 1 to list do
73630: LD_ADDR_VAR 0 1
73634: PUSH
73635: DOUBLE
73636: LD_INT 1
73638: DEC
73639: ST_TO_ADDR
73640: LD_VAR 0 3
73644: PUSH
73645: FOR_TO
73646: IFFALSE 74272
// begin depot := list [ i ] [ 2 ] ;
73648: LD_ADDR_VAR 0 8
73652: PUSH
73653: LD_VAR 0 3
73657: PUSH
73658: LD_VAR 0 1
73662: ARRAY
73663: PUSH
73664: LD_INT 2
73666: ARRAY
73667: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73668: LD_ADDR_VAR 0 5
73672: PUSH
73673: LD_VAR 0 3
73677: PUSH
73678: LD_VAR 0 1
73682: ARRAY
73683: PUSH
73684: LD_INT 1
73686: ARRAY
73687: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73688: LD_VAR 0 8
73692: PPUSH
73693: CALL_OW 301
73697: PUSH
73698: LD_VAR 0 5
73702: PUSH
73703: LD_VAR 0 8
73707: PPUSH
73708: CALL_OW 255
73712: NONEQUAL
73713: OR
73714: IFFALSE 73743
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73716: LD_ADDR_EXP 109
73720: PUSH
73721: LD_EXP 109
73725: PPUSH
73726: LD_VAR 0 8
73730: PPUSH
73731: LD_INT 0
73733: PPUSH
73734: CALL_OW 1
73738: ST_TO_ADDR
// exit ;
73739: POP
73740: POP
73741: GO 74274
// end ; x := list [ i ] [ 3 ] ;
73743: LD_ADDR_VAR 0 6
73747: PUSH
73748: LD_VAR 0 3
73752: PUSH
73753: LD_VAR 0 1
73757: ARRAY
73758: PUSH
73759: LD_INT 3
73761: ARRAY
73762: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73763: LD_ADDR_VAR 0 7
73767: PUSH
73768: LD_VAR 0 3
73772: PUSH
73773: LD_VAR 0 1
73777: ARRAY
73778: PUSH
73779: LD_INT 4
73781: ARRAY
73782: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73783: LD_ADDR_VAR 0 9
73787: PUSH
73788: LD_VAR 0 6
73792: PPUSH
73793: LD_VAR 0 7
73797: PPUSH
73798: LD_INT 16
73800: PPUSH
73801: CALL 56599 0 3
73805: ST_TO_ADDR
// if not cratesNearbyPoint then
73806: LD_VAR 0 9
73810: NOT
73811: IFFALSE 73817
// exit ;
73813: POP
73814: POP
73815: GO 74274
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73817: LD_ADDR_VAR 0 4
73821: PUSH
73822: LD_INT 22
73824: PUSH
73825: LD_VAR 0 5
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: LD_INT 3
73836: PUSH
73837: LD_INT 60
73839: PUSH
73840: EMPTY
73841: LIST
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: LD_INT 91
73849: PUSH
73850: LD_VAR 0 8
73854: PUSH
73855: LD_INT 6
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: LIST
73862: PUSH
73863: LD_INT 2
73865: PUSH
73866: LD_INT 25
73868: PUSH
73869: LD_INT 2
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: PUSH
73876: LD_INT 25
73878: PUSH
73879: LD_INT 16
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PUSH
73886: EMPTY
73887: LIST
73888: LIST
73889: LIST
73890: PUSH
73891: EMPTY
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: PPUSH
73897: CALL_OW 69
73901: PUSH
73902: LD_VAR 0 8
73906: PPUSH
73907: CALL_OW 313
73911: PPUSH
73912: LD_INT 3
73914: PUSH
73915: LD_INT 60
73917: PUSH
73918: EMPTY
73919: LIST
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: LD_INT 2
73927: PUSH
73928: LD_INT 25
73930: PUSH
73931: LD_INT 2
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: LD_INT 25
73940: PUSH
73941: LD_INT 16
73943: PUSH
73944: EMPTY
73945: LIST
73946: LIST
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: LIST
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PPUSH
73957: CALL_OW 72
73961: UNION
73962: ST_TO_ADDR
// if tmp then
73963: LD_VAR 0 4
73967: IFFALSE 74047
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73969: LD_ADDR_VAR 0 4
73973: PUSH
73974: LD_VAR 0 4
73978: PPUSH
73979: LD_INT 3
73981: PPUSH
73982: CALL 54568 0 2
73986: ST_TO_ADDR
// for j in tmp do
73987: LD_ADDR_VAR 0 2
73991: PUSH
73992: LD_VAR 0 4
73996: PUSH
73997: FOR_IN
73998: IFFALSE 74041
// begin if IsInUnit ( j ) then
74000: LD_VAR 0 2
74004: PPUSH
74005: CALL_OW 310
74009: IFFALSE 74020
// ComExit ( j ) ;
74011: LD_VAR 0 2
74015: PPUSH
74016: CALL 54651 0 1
// AddComCollect ( j , x , y ) ;
74020: LD_VAR 0 2
74024: PPUSH
74025: LD_VAR 0 6
74029: PPUSH
74030: LD_VAR 0 7
74034: PPUSH
74035: CALL_OW 177
// end ;
74039: GO 73997
74041: POP
74042: POP
// exit ;
74043: POP
74044: POP
74045: GO 74274
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
74047: LD_ADDR_VAR 0 4
74051: PUSH
74052: LD_INT 22
74054: PUSH
74055: LD_VAR 0 5
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 91
74066: PUSH
74067: LD_VAR 0 8
74071: PUSH
74072: LD_INT 8
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: LIST
74079: PUSH
74080: LD_INT 2
74082: PUSH
74083: LD_INT 34
74085: PUSH
74086: LD_INT 12
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PUSH
74093: LD_INT 34
74095: PUSH
74096: LD_INT 51
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: LD_INT 34
74105: PUSH
74106: LD_INT 32
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: LD_INT 34
74115: PUSH
74116: LD_INT 89
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: LIST
74134: PPUSH
74135: CALL_OW 69
74139: ST_TO_ADDR
// if tmp then
74140: LD_VAR 0 4
74144: IFFALSE 74270
// begin for j in tmp do
74146: LD_ADDR_VAR 0 2
74150: PUSH
74151: LD_VAR 0 4
74155: PUSH
74156: FOR_IN
74157: IFFALSE 74268
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
74159: LD_VAR 0 2
74163: PPUSH
74164: CALL_OW 262
74168: PUSH
74169: LD_INT 3
74171: EQUAL
74172: PUSH
74173: LD_VAR 0 2
74177: PPUSH
74178: CALL_OW 261
74182: PUSH
74183: LD_INT 20
74185: GREATER
74186: OR
74187: PUSH
74188: LD_VAR 0 2
74192: PPUSH
74193: CALL_OW 314
74197: NOT
74198: AND
74199: PUSH
74200: LD_VAR 0 2
74204: PPUSH
74205: CALL_OW 263
74209: PUSH
74210: LD_INT 1
74212: NONEQUAL
74213: PUSH
74214: LD_VAR 0 2
74218: PPUSH
74219: CALL_OW 311
74223: OR
74224: AND
74225: IFFALSE 74266
// begin ComCollect ( j , x , y ) ;
74227: LD_VAR 0 2
74231: PPUSH
74232: LD_VAR 0 6
74236: PPUSH
74237: LD_VAR 0 7
74241: PPUSH
74242: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
74246: LD_VAR 0 2
74250: PPUSH
74251: LD_VAR 0 8
74255: PPUSH
74256: CALL_OW 172
// exit ;
74260: POP
74261: POP
74262: POP
74263: POP
74264: GO 74274
// end ;
74266: GO 74156
74268: POP
74269: POP
// end ; end ;
74270: GO 73645
74272: POP
74273: POP
// end ; end_of_file
74274: PPOPN 9
74276: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74277: LD_VAR 0 1
74281: PPUSH
74282: LD_VAR 0 2
74286: PPUSH
74287: LD_VAR 0 3
74291: PPUSH
74292: LD_VAR 0 4
74296: PPUSH
74297: LD_VAR 0 5
74301: PPUSH
74302: LD_VAR 0 6
74306: PPUSH
74307: CALL 58630 0 6
// end ;
74311: PPOPN 6
74313: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74314: LD_INT 0
74316: PPUSH
// begin if not units then
74317: LD_VAR 0 1
74321: NOT
74322: IFFALSE 74326
// exit ;
74324: GO 74326
// end ;
74326: PPOPN 7
74328: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74329: CALL 58534 0 0
// end ; end_of_file
74333: PPOPN 1
74335: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74336: LD_VAR 0 1
74340: PUSH
74341: LD_INT 200
74343: DOUBLE
74344: GREATEREQUAL
74345: IFFALSE 74353
74347: LD_INT 299
74349: DOUBLE
74350: LESSEQUAL
74351: IFTRUE 74355
74353: GO 74387
74355: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74356: LD_VAR 0 1
74360: PPUSH
74361: LD_VAR 0 2
74365: PPUSH
74366: LD_VAR 0 3
74370: PPUSH
74371: LD_VAR 0 4
74375: PPUSH
74376: LD_VAR 0 5
74380: PPUSH
74381: CALL 74875 0 5
74385: GO 74464
74387: LD_INT 300
74389: DOUBLE
74390: GREATEREQUAL
74391: IFFALSE 74399
74393: LD_INT 399
74395: DOUBLE
74396: LESSEQUAL
74397: IFTRUE 74401
74399: GO 74463
74401: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74402: LD_VAR 0 1
74406: PPUSH
74407: LD_VAR 0 2
74411: PPUSH
74412: LD_VAR 0 3
74416: PPUSH
74417: LD_VAR 0 4
74421: PPUSH
74422: LD_VAR 0 5
74426: PPUSH
74427: LD_VAR 0 6
74431: PPUSH
74432: LD_VAR 0 7
74436: PPUSH
74437: LD_VAR 0 8
74441: PPUSH
74442: LD_VAR 0 9
74446: PPUSH
74447: LD_VAR 0 10
74451: PPUSH
74452: LD_VAR 0 11
74456: PPUSH
74457: CALL 70978 0 11
74461: GO 74464
74463: POP
// end ;
74464: PPOPN 11
74466: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74467: LD_VAR 0 1
74471: PPUSH
74472: LD_VAR 0 2
74476: PPUSH
74477: LD_VAR 0 3
74481: PPUSH
74482: LD_VAR 0 4
74486: PPUSH
74487: LD_VAR 0 5
74491: PPUSH
74492: CALL 74611 0 5
// end ; end_of_file
74496: PPOPN 5
74498: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
74499: LD_INT 0
74501: PPUSH
74502: PPUSH
74503: PPUSH
74504: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
74505: LD_VAR 0 1
74509: PPUSH
74510: CALL_OW 264
74514: PUSH
74515: LD_INT 91
74517: EQUAL
74518: IFFALSE 74590
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
74520: LD_INT 68
74522: PPUSH
74523: LD_VAR 0 1
74527: PPUSH
74528: CALL_OW 255
74532: PPUSH
74533: CALL_OW 321
74537: PUSH
74538: LD_INT 2
74540: EQUAL
74541: IFFALSE 74553
// eff := 70 else
74543: LD_ADDR_VAR 0 4
74547: PUSH
74548: LD_INT 70
74550: ST_TO_ADDR
74551: GO 74561
// eff := 30 ;
74553: LD_ADDR_VAR 0 4
74557: PUSH
74558: LD_INT 30
74560: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
74561: LD_VAR 0 1
74565: PPUSH
74566: CALL_OW 250
74570: PPUSH
74571: LD_VAR 0 1
74575: PPUSH
74576: CALL_OW 251
74580: PPUSH
74581: LD_VAR 0 4
74585: PPUSH
74586: CALL_OW 495
// end ; end ;
74590: LD_VAR 0 2
74594: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
74595: LD_INT 0
74597: PPUSH
// end ;
74598: LD_VAR 0 4
74602: RET
// export function SOS_Command ( cmd ) ; begin
74603: LD_INT 0
74605: PPUSH
// end ;
74606: LD_VAR 0 2
74610: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
74611: LD_INT 0
74613: PPUSH
// end ;
74614: LD_VAR 0 6
74618: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
74619: LD_INT 0
74621: PPUSH
74622: PPUSH
// if not vehicle or not factory then
74623: LD_VAR 0 1
74627: NOT
74628: PUSH
74629: LD_VAR 0 2
74633: NOT
74634: OR
74635: IFFALSE 74639
// exit ;
74637: GO 74870
// if factoryWaypoints >= factory then
74639: LD_EXP 108
74643: PUSH
74644: LD_VAR 0 2
74648: GREATEREQUAL
74649: IFFALSE 74870
// if factoryWaypoints [ factory ] then
74651: LD_EXP 108
74655: PUSH
74656: LD_VAR 0 2
74660: ARRAY
74661: IFFALSE 74870
// begin if GetControl ( vehicle ) = control_manual then
74663: LD_VAR 0 1
74667: PPUSH
74668: CALL_OW 263
74672: PUSH
74673: LD_INT 1
74675: EQUAL
74676: IFFALSE 74757
// begin driver := IsDrivenBy ( vehicle ) ;
74678: LD_ADDR_VAR 0 4
74682: PUSH
74683: LD_VAR 0 1
74687: PPUSH
74688: CALL_OW 311
74692: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74693: LD_VAR 0 4
74697: PPUSH
74698: LD_EXP 108
74702: PUSH
74703: LD_VAR 0 2
74707: ARRAY
74708: PUSH
74709: LD_INT 3
74711: ARRAY
74712: PPUSH
74713: LD_EXP 108
74717: PUSH
74718: LD_VAR 0 2
74722: ARRAY
74723: PUSH
74724: LD_INT 4
74726: ARRAY
74727: PPUSH
74728: CALL_OW 171
// AddComExitVehicle ( driver ) ;
74732: LD_VAR 0 4
74736: PPUSH
74737: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
74741: LD_VAR 0 4
74745: PPUSH
74746: LD_VAR 0 2
74750: PPUSH
74751: CALL_OW 180
// end else
74755: GO 74870
// if GetControl ( vehicle ) = control_remote then
74757: LD_VAR 0 1
74761: PPUSH
74762: CALL_OW 263
74766: PUSH
74767: LD_INT 2
74769: EQUAL
74770: IFFALSE 74831
// begin wait ( 0 0$2 ) ;
74772: LD_INT 70
74774: PPUSH
74775: CALL_OW 67
// if Connect ( vehicle ) then
74779: LD_VAR 0 1
74783: PPUSH
74784: CALL 24872 0 1
74788: IFFALSE 74829
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74790: LD_VAR 0 1
74794: PPUSH
74795: LD_EXP 108
74799: PUSH
74800: LD_VAR 0 2
74804: ARRAY
74805: PUSH
74806: LD_INT 3
74808: ARRAY
74809: PPUSH
74810: LD_EXP 108
74814: PUSH
74815: LD_VAR 0 2
74819: ARRAY
74820: PUSH
74821: LD_INT 4
74823: ARRAY
74824: PPUSH
74825: CALL_OW 171
// end else
74829: GO 74870
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74831: LD_VAR 0 1
74835: PPUSH
74836: LD_EXP 108
74840: PUSH
74841: LD_VAR 0 2
74845: ARRAY
74846: PUSH
74847: LD_INT 3
74849: ARRAY
74850: PPUSH
74851: LD_EXP 108
74855: PUSH
74856: LD_VAR 0 2
74860: ARRAY
74861: PUSH
74862: LD_INT 4
74864: ARRAY
74865: PPUSH
74866: CALL_OW 171
// end ; end ;
74870: LD_VAR 0 3
74874: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74875: LD_INT 0
74877: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74878: LD_VAR 0 1
74882: PUSH
74883: LD_INT 250
74885: EQUAL
74886: PUSH
74887: LD_VAR 0 2
74891: PPUSH
74892: CALL_OW 264
74896: PUSH
74897: LD_INT 81
74899: EQUAL
74900: AND
74901: IFFALSE 74922
// MinerPlaceMine ( unit , x , y ) ;
74903: LD_VAR 0 2
74907: PPUSH
74908: LD_VAR 0 4
74912: PPUSH
74913: LD_VAR 0 5
74917: PPUSH
74918: CALL 77307 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74922: LD_VAR 0 1
74926: PUSH
74927: LD_INT 251
74929: EQUAL
74930: PUSH
74931: LD_VAR 0 2
74935: PPUSH
74936: CALL_OW 264
74940: PUSH
74941: LD_INT 81
74943: EQUAL
74944: AND
74945: IFFALSE 74966
// MinerDetonateMine ( unit , x , y ) ;
74947: LD_VAR 0 2
74951: PPUSH
74952: LD_VAR 0 4
74956: PPUSH
74957: LD_VAR 0 5
74961: PPUSH
74962: CALL 77582 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74966: LD_VAR 0 1
74970: PUSH
74971: LD_INT 252
74973: EQUAL
74974: PUSH
74975: LD_VAR 0 2
74979: PPUSH
74980: CALL_OW 264
74984: PUSH
74985: LD_INT 81
74987: EQUAL
74988: AND
74989: IFFALSE 75010
// MinerCreateMinefield ( unit , x , y ) ;
74991: LD_VAR 0 2
74995: PPUSH
74996: LD_VAR 0 4
75000: PPUSH
75001: LD_VAR 0 5
75005: PPUSH
75006: CALL 77999 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
75010: LD_VAR 0 1
75014: PUSH
75015: LD_INT 253
75017: EQUAL
75018: PUSH
75019: LD_VAR 0 2
75023: PPUSH
75024: CALL_OW 257
75028: PUSH
75029: LD_INT 5
75031: EQUAL
75032: AND
75033: IFFALSE 75054
// ComBinocular ( unit , x , y ) ;
75035: LD_VAR 0 2
75039: PPUSH
75040: LD_VAR 0 4
75044: PPUSH
75045: LD_VAR 0 5
75049: PPUSH
75050: CALL 78368 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
75054: LD_VAR 0 1
75058: PUSH
75059: LD_INT 254
75061: EQUAL
75062: PUSH
75063: LD_VAR 0 2
75067: PPUSH
75068: CALL_OW 264
75072: PUSH
75073: LD_INT 99
75075: EQUAL
75076: AND
75077: PUSH
75078: LD_VAR 0 3
75082: PPUSH
75083: CALL_OW 263
75087: PUSH
75088: LD_INT 3
75090: EQUAL
75091: AND
75092: IFFALSE 75108
// HackDestroyVehicle ( unit , selectedUnit ) ;
75094: LD_VAR 0 2
75098: PPUSH
75099: LD_VAR 0 3
75103: PPUSH
75104: CALL 76671 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
75108: LD_VAR 0 1
75112: PUSH
75113: LD_INT 255
75115: EQUAL
75116: PUSH
75117: LD_VAR 0 2
75121: PPUSH
75122: CALL_OW 264
75126: PUSH
75127: LD_INT 14
75129: PUSH
75130: LD_INT 53
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: IN
75137: AND
75138: PUSH
75139: LD_VAR 0 4
75143: PPUSH
75144: LD_VAR 0 5
75148: PPUSH
75149: CALL_OW 488
75153: AND
75154: IFFALSE 75178
// CutTreeXYR ( unit , x , y , 12 ) ;
75156: LD_VAR 0 2
75160: PPUSH
75161: LD_VAR 0 4
75165: PPUSH
75166: LD_VAR 0 5
75170: PPUSH
75171: LD_INT 12
75173: PPUSH
75174: CALL 75241 0 4
// if cmd = 256 then
75178: LD_VAR 0 1
75182: PUSH
75183: LD_INT 256
75185: EQUAL
75186: IFFALSE 75207
// SetFactoryWaypoint ( unit , x , y ) ;
75188: LD_VAR 0 2
75192: PPUSH
75193: LD_VAR 0 4
75197: PPUSH
75198: LD_VAR 0 5
75202: PPUSH
75203: CALL 72966 0 3
// if cmd = 257 then
75207: LD_VAR 0 1
75211: PUSH
75212: LD_INT 257
75214: EQUAL
75215: IFFALSE 75236
// SetWarehouseGatheringPoint ( unit , x , y ) ;
75217: LD_VAR 0 2
75221: PPUSH
75222: LD_VAR 0 4
75226: PPUSH
75227: LD_VAR 0 5
75231: PPUSH
75232: CALL 73328 0 3
// end ;
75236: LD_VAR 0 6
75240: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
75241: LD_INT 0
75243: PPUSH
75244: PPUSH
75245: PPUSH
75246: PPUSH
75247: PPUSH
75248: PPUSH
75249: PPUSH
75250: PPUSH
75251: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
75252: LD_VAR 0 1
75256: NOT
75257: PUSH
75258: LD_VAR 0 2
75262: PPUSH
75263: LD_VAR 0 3
75267: PPUSH
75268: CALL_OW 488
75272: NOT
75273: OR
75274: PUSH
75275: LD_VAR 0 4
75279: NOT
75280: OR
75281: IFFALSE 75285
// exit ;
75283: GO 75625
// list := [ ] ;
75285: LD_ADDR_VAR 0 13
75289: PUSH
75290: EMPTY
75291: ST_TO_ADDR
// if x - r < 0 then
75292: LD_VAR 0 2
75296: PUSH
75297: LD_VAR 0 4
75301: MINUS
75302: PUSH
75303: LD_INT 0
75305: LESS
75306: IFFALSE 75318
// min_x := 0 else
75308: LD_ADDR_VAR 0 7
75312: PUSH
75313: LD_INT 0
75315: ST_TO_ADDR
75316: GO 75334
// min_x := x - r ;
75318: LD_ADDR_VAR 0 7
75322: PUSH
75323: LD_VAR 0 2
75327: PUSH
75328: LD_VAR 0 4
75332: MINUS
75333: ST_TO_ADDR
// if y - r < 0 then
75334: LD_VAR 0 3
75338: PUSH
75339: LD_VAR 0 4
75343: MINUS
75344: PUSH
75345: LD_INT 0
75347: LESS
75348: IFFALSE 75360
// min_y := 0 else
75350: LD_ADDR_VAR 0 8
75354: PUSH
75355: LD_INT 0
75357: ST_TO_ADDR
75358: GO 75376
// min_y := y - r ;
75360: LD_ADDR_VAR 0 8
75364: PUSH
75365: LD_VAR 0 3
75369: PUSH
75370: LD_VAR 0 4
75374: MINUS
75375: ST_TO_ADDR
// max_x := x + r ;
75376: LD_ADDR_VAR 0 9
75380: PUSH
75381: LD_VAR 0 2
75385: PUSH
75386: LD_VAR 0 4
75390: PLUS
75391: ST_TO_ADDR
// max_y := y + r ;
75392: LD_ADDR_VAR 0 10
75396: PUSH
75397: LD_VAR 0 3
75401: PUSH
75402: LD_VAR 0 4
75406: PLUS
75407: ST_TO_ADDR
// for _x = min_x to max_x do
75408: LD_ADDR_VAR 0 11
75412: PUSH
75413: DOUBLE
75414: LD_VAR 0 7
75418: DEC
75419: ST_TO_ADDR
75420: LD_VAR 0 9
75424: PUSH
75425: FOR_TO
75426: IFFALSE 75543
// for _y = min_y to max_y do
75428: LD_ADDR_VAR 0 12
75432: PUSH
75433: DOUBLE
75434: LD_VAR 0 8
75438: DEC
75439: ST_TO_ADDR
75440: LD_VAR 0 10
75444: PUSH
75445: FOR_TO
75446: IFFALSE 75539
// begin if not ValidHex ( _x , _y ) then
75448: LD_VAR 0 11
75452: PPUSH
75453: LD_VAR 0 12
75457: PPUSH
75458: CALL_OW 488
75462: NOT
75463: IFFALSE 75467
// continue ;
75465: GO 75445
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75467: LD_VAR 0 11
75471: PPUSH
75472: LD_VAR 0 12
75476: PPUSH
75477: CALL_OW 351
75481: PUSH
75482: LD_VAR 0 11
75486: PPUSH
75487: LD_VAR 0 12
75491: PPUSH
75492: CALL_OW 554
75496: AND
75497: IFFALSE 75537
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75499: LD_ADDR_VAR 0 13
75503: PUSH
75504: LD_VAR 0 13
75508: PPUSH
75509: LD_VAR 0 13
75513: PUSH
75514: LD_INT 1
75516: PLUS
75517: PPUSH
75518: LD_VAR 0 11
75522: PUSH
75523: LD_VAR 0 12
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: PPUSH
75532: CALL_OW 2
75536: ST_TO_ADDR
// end ;
75537: GO 75445
75539: POP
75540: POP
75541: GO 75425
75543: POP
75544: POP
// if not list then
75545: LD_VAR 0 13
75549: NOT
75550: IFFALSE 75554
// exit ;
75552: GO 75625
// for i in list do
75554: LD_ADDR_VAR 0 6
75558: PUSH
75559: LD_VAR 0 13
75563: PUSH
75564: FOR_IN
75565: IFFALSE 75623
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
75567: LD_VAR 0 1
75571: PPUSH
75572: LD_STRING M
75574: PUSH
75575: LD_VAR 0 6
75579: PUSH
75580: LD_INT 1
75582: ARRAY
75583: PUSH
75584: LD_VAR 0 6
75588: PUSH
75589: LD_INT 2
75591: ARRAY
75592: PUSH
75593: LD_INT 0
75595: PUSH
75596: LD_INT 0
75598: PUSH
75599: LD_INT 0
75601: PUSH
75602: LD_INT 0
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: PUSH
75614: EMPTY
75615: LIST
75616: PPUSH
75617: CALL_OW 447
75621: GO 75564
75623: POP
75624: POP
// end ;
75625: LD_VAR 0 5
75629: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75630: LD_EXP 111
75634: NOT
75635: IFFALSE 75685
75637: GO 75639
75639: DISABLE
// begin initHack := true ;
75640: LD_ADDR_EXP 111
75644: PUSH
75645: LD_INT 1
75647: ST_TO_ADDR
// hackTanks := [ ] ;
75648: LD_ADDR_EXP 112
75652: PUSH
75653: EMPTY
75654: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75655: LD_ADDR_EXP 113
75659: PUSH
75660: EMPTY
75661: ST_TO_ADDR
// hackLimit := 3 ;
75662: LD_ADDR_EXP 114
75666: PUSH
75667: LD_INT 3
75669: ST_TO_ADDR
// hackDist := 12 ;
75670: LD_ADDR_EXP 115
75674: PUSH
75675: LD_INT 12
75677: ST_TO_ADDR
// hackCounter := [ ] ;
75678: LD_ADDR_EXP 116
75682: PUSH
75683: EMPTY
75684: ST_TO_ADDR
// end ;
75685: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75686: LD_EXP 111
75690: PUSH
75691: LD_INT 34
75693: PUSH
75694: LD_INT 99
75696: PUSH
75697: EMPTY
75698: LIST
75699: LIST
75700: PPUSH
75701: CALL_OW 69
75705: AND
75706: IFFALSE 75959
75708: GO 75710
75710: DISABLE
75711: LD_INT 0
75713: PPUSH
75714: PPUSH
// begin enable ;
75715: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75716: LD_ADDR_VAR 0 1
75720: PUSH
75721: LD_INT 34
75723: PUSH
75724: LD_INT 99
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: PPUSH
75731: CALL_OW 69
75735: PUSH
75736: FOR_IN
75737: IFFALSE 75957
// begin if not i in hackTanks then
75739: LD_VAR 0 1
75743: PUSH
75744: LD_EXP 112
75748: IN
75749: NOT
75750: IFFALSE 75833
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75752: LD_ADDR_EXP 112
75756: PUSH
75757: LD_EXP 112
75761: PPUSH
75762: LD_EXP 112
75766: PUSH
75767: LD_INT 1
75769: PLUS
75770: PPUSH
75771: LD_VAR 0 1
75775: PPUSH
75776: CALL_OW 1
75780: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75781: LD_ADDR_EXP 113
75785: PUSH
75786: LD_EXP 113
75790: PPUSH
75791: LD_EXP 113
75795: PUSH
75796: LD_INT 1
75798: PLUS
75799: PPUSH
75800: EMPTY
75801: PPUSH
75802: CALL_OW 1
75806: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75807: LD_ADDR_EXP 116
75811: PUSH
75812: LD_EXP 116
75816: PPUSH
75817: LD_EXP 116
75821: PUSH
75822: LD_INT 1
75824: PLUS
75825: PPUSH
75826: EMPTY
75827: PPUSH
75828: CALL_OW 1
75832: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75833: LD_VAR 0 1
75837: PPUSH
75838: CALL_OW 302
75842: NOT
75843: IFFALSE 75856
// begin HackUnlinkAll ( i ) ;
75845: LD_VAR 0 1
75849: PPUSH
75850: CALL 75962 0 1
// continue ;
75854: GO 75736
// end ; HackCheckCapturedStatus ( i ) ;
75856: LD_VAR 0 1
75860: PPUSH
75861: CALL 76405 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75865: LD_ADDR_VAR 0 2
75869: PUSH
75870: LD_INT 81
75872: PUSH
75873: LD_VAR 0 1
75877: PPUSH
75878: CALL_OW 255
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PUSH
75887: LD_INT 33
75889: PUSH
75890: LD_INT 3
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: PUSH
75897: LD_INT 91
75899: PUSH
75900: LD_VAR 0 1
75904: PUSH
75905: LD_EXP 115
75909: PUSH
75910: EMPTY
75911: LIST
75912: LIST
75913: LIST
75914: PUSH
75915: LD_INT 50
75917: PUSH
75918: EMPTY
75919: LIST
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: LIST
75925: LIST
75926: PPUSH
75927: CALL_OW 69
75931: ST_TO_ADDR
// if not tmp then
75932: LD_VAR 0 2
75936: NOT
75937: IFFALSE 75941
// continue ;
75939: GO 75736
// HackLink ( i , tmp ) ;
75941: LD_VAR 0 1
75945: PPUSH
75946: LD_VAR 0 2
75950: PPUSH
75951: CALL 76098 0 2
// end ;
75955: GO 75736
75957: POP
75958: POP
// end ;
75959: PPOPN 2
75961: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75962: LD_INT 0
75964: PPUSH
75965: PPUSH
75966: PPUSH
// if not hack in hackTanks then
75967: LD_VAR 0 1
75971: PUSH
75972: LD_EXP 112
75976: IN
75977: NOT
75978: IFFALSE 75982
// exit ;
75980: GO 76093
// index := GetElementIndex ( hackTanks , hack ) ;
75982: LD_ADDR_VAR 0 4
75986: PUSH
75987: LD_EXP 112
75991: PPUSH
75992: LD_VAR 0 1
75996: PPUSH
75997: CALL 21679 0 2
76001: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
76002: LD_EXP 113
76006: PUSH
76007: LD_VAR 0 4
76011: ARRAY
76012: IFFALSE 76093
// begin for i in hackTanksCaptured [ index ] do
76014: LD_ADDR_VAR 0 3
76018: PUSH
76019: LD_EXP 113
76023: PUSH
76024: LD_VAR 0 4
76028: ARRAY
76029: PUSH
76030: FOR_IN
76031: IFFALSE 76057
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
76033: LD_VAR 0 3
76037: PUSH
76038: LD_INT 1
76040: ARRAY
76041: PPUSH
76042: LD_VAR 0 3
76046: PUSH
76047: LD_INT 2
76049: ARRAY
76050: PPUSH
76051: CALL_OW 235
76055: GO 76030
76057: POP
76058: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
76059: LD_ADDR_EXP 113
76063: PUSH
76064: LD_EXP 113
76068: PPUSH
76069: LD_VAR 0 4
76073: PPUSH
76074: EMPTY
76075: PPUSH
76076: CALL_OW 1
76080: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
76081: LD_VAR 0 1
76085: PPUSH
76086: LD_INT 0
76088: PPUSH
76089: CALL_OW 505
// end ; end ;
76093: LD_VAR 0 2
76097: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
76098: LD_INT 0
76100: PPUSH
76101: PPUSH
76102: PPUSH
// if not hack in hackTanks or not vehicles then
76103: LD_VAR 0 1
76107: PUSH
76108: LD_EXP 112
76112: IN
76113: NOT
76114: PUSH
76115: LD_VAR 0 2
76119: NOT
76120: OR
76121: IFFALSE 76125
// exit ;
76123: GO 76400
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
76125: LD_ADDR_VAR 0 2
76129: PUSH
76130: LD_VAR 0 1
76134: PPUSH
76135: LD_VAR 0 2
76139: PPUSH
76140: LD_INT 1
76142: PPUSH
76143: LD_INT 1
76145: PPUSH
76146: CALL 22329 0 4
76150: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
76151: LD_ADDR_VAR 0 5
76155: PUSH
76156: LD_EXP 112
76160: PPUSH
76161: LD_VAR 0 1
76165: PPUSH
76166: CALL 21679 0 2
76170: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
76171: LD_EXP 113
76175: PUSH
76176: LD_VAR 0 5
76180: ARRAY
76181: PUSH
76182: LD_EXP 114
76186: LESS
76187: IFFALSE 76376
// begin for i := 1 to vehicles do
76189: LD_ADDR_VAR 0 4
76193: PUSH
76194: DOUBLE
76195: LD_INT 1
76197: DEC
76198: ST_TO_ADDR
76199: LD_VAR 0 2
76203: PUSH
76204: FOR_TO
76205: IFFALSE 76374
// begin if hackTanksCaptured [ index ] = hackLimit then
76207: LD_EXP 113
76211: PUSH
76212: LD_VAR 0 5
76216: ARRAY
76217: PUSH
76218: LD_EXP 114
76222: EQUAL
76223: IFFALSE 76227
// break ;
76225: GO 76374
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
76227: LD_ADDR_EXP 116
76231: PUSH
76232: LD_EXP 116
76236: PPUSH
76237: LD_VAR 0 5
76241: PPUSH
76242: LD_EXP 116
76246: PUSH
76247: LD_VAR 0 5
76251: ARRAY
76252: PUSH
76253: LD_INT 1
76255: PLUS
76256: PPUSH
76257: CALL_OW 1
76261: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
76262: LD_ADDR_EXP 113
76266: PUSH
76267: LD_EXP 113
76271: PPUSH
76272: LD_VAR 0 5
76276: PUSH
76277: LD_EXP 113
76281: PUSH
76282: LD_VAR 0 5
76286: ARRAY
76287: PUSH
76288: LD_INT 1
76290: PLUS
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PPUSH
76296: LD_VAR 0 2
76300: PUSH
76301: LD_VAR 0 4
76305: ARRAY
76306: PUSH
76307: LD_VAR 0 2
76311: PUSH
76312: LD_VAR 0 4
76316: ARRAY
76317: PPUSH
76318: CALL_OW 255
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: PPUSH
76327: CALL 21894 0 3
76331: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76332: LD_VAR 0 2
76336: PUSH
76337: LD_VAR 0 4
76341: ARRAY
76342: PPUSH
76343: LD_VAR 0 1
76347: PPUSH
76348: CALL_OW 255
76352: PPUSH
76353: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76357: LD_VAR 0 2
76361: PUSH
76362: LD_VAR 0 4
76366: ARRAY
76367: PPUSH
76368: CALL_OW 141
// end ;
76372: GO 76204
76374: POP
76375: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76376: LD_VAR 0 1
76380: PPUSH
76381: LD_EXP 113
76385: PUSH
76386: LD_VAR 0 5
76390: ARRAY
76391: PUSH
76392: LD_INT 0
76394: PLUS
76395: PPUSH
76396: CALL_OW 505
// end ;
76400: LD_VAR 0 3
76404: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76405: LD_INT 0
76407: PPUSH
76408: PPUSH
76409: PPUSH
76410: PPUSH
// if not hack in hackTanks then
76411: LD_VAR 0 1
76415: PUSH
76416: LD_EXP 112
76420: IN
76421: NOT
76422: IFFALSE 76426
// exit ;
76424: GO 76666
// index := GetElementIndex ( hackTanks , hack ) ;
76426: LD_ADDR_VAR 0 4
76430: PUSH
76431: LD_EXP 112
76435: PPUSH
76436: LD_VAR 0 1
76440: PPUSH
76441: CALL 21679 0 2
76445: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76446: LD_ADDR_VAR 0 3
76450: PUSH
76451: DOUBLE
76452: LD_EXP 113
76456: PUSH
76457: LD_VAR 0 4
76461: ARRAY
76462: INC
76463: ST_TO_ADDR
76464: LD_INT 1
76466: PUSH
76467: FOR_DOWNTO
76468: IFFALSE 76640
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76470: LD_ADDR_VAR 0 5
76474: PUSH
76475: LD_EXP 113
76479: PUSH
76480: LD_VAR 0 4
76484: ARRAY
76485: PUSH
76486: LD_VAR 0 3
76490: ARRAY
76491: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76492: LD_VAR 0 5
76496: PUSH
76497: LD_INT 1
76499: ARRAY
76500: PPUSH
76501: CALL_OW 302
76505: NOT
76506: PUSH
76507: LD_VAR 0 5
76511: PUSH
76512: LD_INT 1
76514: ARRAY
76515: PPUSH
76516: CALL_OW 255
76520: PUSH
76521: LD_VAR 0 1
76525: PPUSH
76526: CALL_OW 255
76530: NONEQUAL
76531: OR
76532: IFFALSE 76638
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76534: LD_VAR 0 5
76538: PUSH
76539: LD_INT 1
76541: ARRAY
76542: PPUSH
76543: CALL_OW 305
76547: PUSH
76548: LD_VAR 0 5
76552: PUSH
76553: LD_INT 1
76555: ARRAY
76556: PPUSH
76557: CALL_OW 255
76561: PUSH
76562: LD_VAR 0 1
76566: PPUSH
76567: CALL_OW 255
76571: EQUAL
76572: AND
76573: IFFALSE 76597
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76575: LD_VAR 0 5
76579: PUSH
76580: LD_INT 1
76582: ARRAY
76583: PPUSH
76584: LD_VAR 0 5
76588: PUSH
76589: LD_INT 2
76591: ARRAY
76592: PPUSH
76593: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76597: LD_ADDR_EXP 113
76601: PUSH
76602: LD_EXP 113
76606: PPUSH
76607: LD_VAR 0 4
76611: PPUSH
76612: LD_EXP 113
76616: PUSH
76617: LD_VAR 0 4
76621: ARRAY
76622: PPUSH
76623: LD_VAR 0 3
76627: PPUSH
76628: CALL_OW 3
76632: PPUSH
76633: CALL_OW 1
76637: ST_TO_ADDR
// end ; end ;
76638: GO 76467
76640: POP
76641: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76642: LD_VAR 0 1
76646: PPUSH
76647: LD_EXP 113
76651: PUSH
76652: LD_VAR 0 4
76656: ARRAY
76657: PUSH
76658: LD_INT 0
76660: PLUS
76661: PPUSH
76662: CALL_OW 505
// end ;
76666: LD_VAR 0 2
76670: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76671: LD_INT 0
76673: PPUSH
76674: PPUSH
76675: PPUSH
76676: PPUSH
// if not hack in hackTanks then
76677: LD_VAR 0 1
76681: PUSH
76682: LD_EXP 112
76686: IN
76687: NOT
76688: IFFALSE 76692
// exit ;
76690: GO 76777
// index := GetElementIndex ( hackTanks , hack ) ;
76692: LD_ADDR_VAR 0 5
76696: PUSH
76697: LD_EXP 112
76701: PPUSH
76702: LD_VAR 0 1
76706: PPUSH
76707: CALL 21679 0 2
76711: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76712: LD_ADDR_VAR 0 4
76716: PUSH
76717: DOUBLE
76718: LD_INT 1
76720: DEC
76721: ST_TO_ADDR
76722: LD_EXP 113
76726: PUSH
76727: LD_VAR 0 5
76731: ARRAY
76732: PUSH
76733: FOR_TO
76734: IFFALSE 76775
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76736: LD_EXP 113
76740: PUSH
76741: LD_VAR 0 5
76745: ARRAY
76746: PUSH
76747: LD_VAR 0 4
76751: ARRAY
76752: PUSH
76753: LD_INT 1
76755: ARRAY
76756: PUSH
76757: LD_VAR 0 2
76761: EQUAL
76762: IFFALSE 76773
// KillUnit ( vehicle ) ;
76764: LD_VAR 0 2
76768: PPUSH
76769: CALL_OW 66
76773: GO 76733
76775: POP
76776: POP
// end ;
76777: LD_VAR 0 3
76781: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76782: LD_EXP 117
76786: NOT
76787: IFFALSE 76822
76789: GO 76791
76791: DISABLE
// begin initMiner := true ;
76792: LD_ADDR_EXP 117
76796: PUSH
76797: LD_INT 1
76799: ST_TO_ADDR
// minersList := [ ] ;
76800: LD_ADDR_EXP 118
76804: PUSH
76805: EMPTY
76806: ST_TO_ADDR
// minerMinesList := [ ] ;
76807: LD_ADDR_EXP 119
76811: PUSH
76812: EMPTY
76813: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76814: LD_ADDR_EXP 120
76818: PUSH
76819: LD_INT 5
76821: ST_TO_ADDR
// end ;
76822: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76823: LD_EXP 117
76827: PUSH
76828: LD_INT 34
76830: PUSH
76831: LD_INT 81
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: PPUSH
76838: CALL_OW 69
76842: AND
76843: IFFALSE 77304
76845: GO 76847
76847: DISABLE
76848: LD_INT 0
76850: PPUSH
76851: PPUSH
76852: PPUSH
76853: PPUSH
// begin enable ;
76854: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76855: LD_ADDR_VAR 0 1
76859: PUSH
76860: LD_INT 34
76862: PUSH
76863: LD_INT 81
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: PPUSH
76870: CALL_OW 69
76874: PUSH
76875: FOR_IN
76876: IFFALSE 76948
// begin if not i in minersList then
76878: LD_VAR 0 1
76882: PUSH
76883: LD_EXP 118
76887: IN
76888: NOT
76889: IFFALSE 76946
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76891: LD_ADDR_EXP 118
76895: PUSH
76896: LD_EXP 118
76900: PPUSH
76901: LD_EXP 118
76905: PUSH
76906: LD_INT 1
76908: PLUS
76909: PPUSH
76910: LD_VAR 0 1
76914: PPUSH
76915: CALL_OW 1
76919: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76920: LD_ADDR_EXP 119
76924: PUSH
76925: LD_EXP 119
76929: PPUSH
76930: LD_EXP 119
76934: PUSH
76935: LD_INT 1
76937: PLUS
76938: PPUSH
76939: EMPTY
76940: PPUSH
76941: CALL_OW 1
76945: ST_TO_ADDR
// end end ;
76946: GO 76875
76948: POP
76949: POP
// for i := minerMinesList downto 1 do
76950: LD_ADDR_VAR 0 1
76954: PUSH
76955: DOUBLE
76956: LD_EXP 119
76960: INC
76961: ST_TO_ADDR
76962: LD_INT 1
76964: PUSH
76965: FOR_DOWNTO
76966: IFFALSE 77302
// begin if IsLive ( minersList [ i ] ) then
76968: LD_EXP 118
76972: PUSH
76973: LD_VAR 0 1
76977: ARRAY
76978: PPUSH
76979: CALL_OW 300
76983: IFFALSE 77011
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76985: LD_EXP 118
76989: PUSH
76990: LD_VAR 0 1
76994: ARRAY
76995: PPUSH
76996: LD_EXP 119
77000: PUSH
77001: LD_VAR 0 1
77005: ARRAY
77006: PPUSH
77007: CALL_OW 505
// if not minerMinesList [ i ] then
77011: LD_EXP 119
77015: PUSH
77016: LD_VAR 0 1
77020: ARRAY
77021: NOT
77022: IFFALSE 77026
// continue ;
77024: GO 76965
// for j := minerMinesList [ i ] downto 1 do
77026: LD_ADDR_VAR 0 2
77030: PUSH
77031: DOUBLE
77032: LD_EXP 119
77036: PUSH
77037: LD_VAR 0 1
77041: ARRAY
77042: INC
77043: ST_TO_ADDR
77044: LD_INT 1
77046: PUSH
77047: FOR_DOWNTO
77048: IFFALSE 77298
// begin side := GetSide ( minersList [ i ] ) ;
77050: LD_ADDR_VAR 0 3
77054: PUSH
77055: LD_EXP 118
77059: PUSH
77060: LD_VAR 0 1
77064: ARRAY
77065: PPUSH
77066: CALL_OW 255
77070: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
77071: LD_ADDR_VAR 0 4
77075: PUSH
77076: LD_EXP 119
77080: PUSH
77081: LD_VAR 0 1
77085: ARRAY
77086: PUSH
77087: LD_VAR 0 2
77091: ARRAY
77092: PUSH
77093: LD_INT 1
77095: ARRAY
77096: PPUSH
77097: LD_EXP 119
77101: PUSH
77102: LD_VAR 0 1
77106: ARRAY
77107: PUSH
77108: LD_VAR 0 2
77112: ARRAY
77113: PUSH
77114: LD_INT 2
77116: ARRAY
77117: PPUSH
77118: CALL_OW 428
77122: ST_TO_ADDR
// if not tmp then
77123: LD_VAR 0 4
77127: NOT
77128: IFFALSE 77132
// continue ;
77130: GO 77047
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
77132: LD_VAR 0 4
77136: PUSH
77137: LD_INT 81
77139: PUSH
77140: LD_VAR 0 3
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PPUSH
77149: CALL_OW 69
77153: IN
77154: PUSH
77155: LD_EXP 119
77159: PUSH
77160: LD_VAR 0 1
77164: ARRAY
77165: PUSH
77166: LD_VAR 0 2
77170: ARRAY
77171: PUSH
77172: LD_INT 1
77174: ARRAY
77175: PPUSH
77176: LD_EXP 119
77180: PUSH
77181: LD_VAR 0 1
77185: ARRAY
77186: PUSH
77187: LD_VAR 0 2
77191: ARRAY
77192: PUSH
77193: LD_INT 2
77195: ARRAY
77196: PPUSH
77197: CALL_OW 458
77201: AND
77202: IFFALSE 77296
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
77204: LD_EXP 119
77208: PUSH
77209: LD_VAR 0 1
77213: ARRAY
77214: PUSH
77215: LD_VAR 0 2
77219: ARRAY
77220: PUSH
77221: LD_INT 1
77223: ARRAY
77224: PPUSH
77225: LD_EXP 119
77229: PUSH
77230: LD_VAR 0 1
77234: ARRAY
77235: PUSH
77236: LD_VAR 0 2
77240: ARRAY
77241: PUSH
77242: LD_INT 2
77244: ARRAY
77245: PPUSH
77246: LD_VAR 0 3
77250: PPUSH
77251: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
77255: LD_ADDR_EXP 119
77259: PUSH
77260: LD_EXP 119
77264: PPUSH
77265: LD_VAR 0 1
77269: PPUSH
77270: LD_EXP 119
77274: PUSH
77275: LD_VAR 0 1
77279: ARRAY
77280: PPUSH
77281: LD_VAR 0 2
77285: PPUSH
77286: CALL_OW 3
77290: PPUSH
77291: CALL_OW 1
77295: ST_TO_ADDR
// end ; end ;
77296: GO 77047
77298: POP
77299: POP
// end ;
77300: GO 76965
77302: POP
77303: POP
// end ;
77304: PPOPN 4
77306: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77307: LD_INT 0
77309: PPUSH
77310: PPUSH
// result := false ;
77311: LD_ADDR_VAR 0 4
77315: PUSH
77316: LD_INT 0
77318: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77319: LD_VAR 0 1
77323: PPUSH
77324: CALL_OW 264
77328: PUSH
77329: LD_INT 81
77331: EQUAL
77332: NOT
77333: IFFALSE 77337
// exit ;
77335: GO 77577
// index := GetElementIndex ( minersList , unit ) ;
77337: LD_ADDR_VAR 0 5
77341: PUSH
77342: LD_EXP 118
77346: PPUSH
77347: LD_VAR 0 1
77351: PPUSH
77352: CALL 21679 0 2
77356: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77357: LD_EXP 119
77361: PUSH
77362: LD_VAR 0 5
77366: ARRAY
77367: PUSH
77368: LD_EXP 120
77372: GREATEREQUAL
77373: IFFALSE 77377
// exit ;
77375: GO 77577
// ComMoveXY ( unit , x , y ) ;
77377: LD_VAR 0 1
77381: PPUSH
77382: LD_VAR 0 2
77386: PPUSH
77387: LD_VAR 0 3
77391: PPUSH
77392: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77396: LD_INT 35
77398: PPUSH
77399: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77403: LD_VAR 0 1
77407: PPUSH
77408: LD_VAR 0 2
77412: PPUSH
77413: LD_VAR 0 3
77417: PPUSH
77418: CALL 53063 0 3
77422: NOT
77423: PUSH
77424: LD_VAR 0 1
77428: PPUSH
77429: CALL_OW 314
77433: AND
77434: IFFALSE 77438
// exit ;
77436: GO 77577
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77438: LD_VAR 0 2
77442: PPUSH
77443: LD_VAR 0 3
77447: PPUSH
77448: CALL_OW 428
77452: PUSH
77453: LD_VAR 0 1
77457: EQUAL
77458: PUSH
77459: LD_VAR 0 1
77463: PPUSH
77464: CALL_OW 314
77468: NOT
77469: AND
77470: IFFALSE 77396
// PlaySoundXY ( x , y , PlantMine ) ;
77472: LD_VAR 0 2
77476: PPUSH
77477: LD_VAR 0 3
77481: PPUSH
77482: LD_STRING PlantMine
77484: PPUSH
77485: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77489: LD_VAR 0 2
77493: PPUSH
77494: LD_VAR 0 3
77498: PPUSH
77499: LD_VAR 0 1
77503: PPUSH
77504: CALL_OW 255
77508: PPUSH
77509: LD_INT 0
77511: PPUSH
77512: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77516: LD_ADDR_EXP 119
77520: PUSH
77521: LD_EXP 119
77525: PPUSH
77526: LD_VAR 0 5
77530: PUSH
77531: LD_EXP 119
77535: PUSH
77536: LD_VAR 0 5
77540: ARRAY
77541: PUSH
77542: LD_INT 1
77544: PLUS
77545: PUSH
77546: EMPTY
77547: LIST
77548: LIST
77549: PPUSH
77550: LD_VAR 0 2
77554: PUSH
77555: LD_VAR 0 3
77559: PUSH
77560: EMPTY
77561: LIST
77562: LIST
77563: PPUSH
77564: CALL 21894 0 3
77568: ST_TO_ADDR
// result := true ;
77569: LD_ADDR_VAR 0 4
77573: PUSH
77574: LD_INT 1
77576: ST_TO_ADDR
// end ;
77577: LD_VAR 0 4
77581: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77582: LD_INT 0
77584: PPUSH
77585: PPUSH
77586: PPUSH
// if not unit in minersList then
77587: LD_VAR 0 1
77591: PUSH
77592: LD_EXP 118
77596: IN
77597: NOT
77598: IFFALSE 77602
// exit ;
77600: GO 77994
// index := GetElementIndex ( minersList , unit ) ;
77602: LD_ADDR_VAR 0 6
77606: PUSH
77607: LD_EXP 118
77611: PPUSH
77612: LD_VAR 0 1
77616: PPUSH
77617: CALL 21679 0 2
77621: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77622: LD_ADDR_VAR 0 5
77626: PUSH
77627: DOUBLE
77628: LD_EXP 119
77632: PUSH
77633: LD_VAR 0 6
77637: ARRAY
77638: INC
77639: ST_TO_ADDR
77640: LD_INT 1
77642: PUSH
77643: FOR_DOWNTO
77644: IFFALSE 77805
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77646: LD_EXP 119
77650: PUSH
77651: LD_VAR 0 6
77655: ARRAY
77656: PUSH
77657: LD_VAR 0 5
77661: ARRAY
77662: PUSH
77663: LD_INT 1
77665: ARRAY
77666: PUSH
77667: LD_VAR 0 2
77671: EQUAL
77672: PUSH
77673: LD_EXP 119
77677: PUSH
77678: LD_VAR 0 6
77682: ARRAY
77683: PUSH
77684: LD_VAR 0 5
77688: ARRAY
77689: PUSH
77690: LD_INT 2
77692: ARRAY
77693: PUSH
77694: LD_VAR 0 3
77698: EQUAL
77699: AND
77700: IFFALSE 77803
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77702: LD_EXP 119
77706: PUSH
77707: LD_VAR 0 6
77711: ARRAY
77712: PUSH
77713: LD_VAR 0 5
77717: ARRAY
77718: PUSH
77719: LD_INT 1
77721: ARRAY
77722: PPUSH
77723: LD_EXP 119
77727: PUSH
77728: LD_VAR 0 6
77732: ARRAY
77733: PUSH
77734: LD_VAR 0 5
77738: ARRAY
77739: PUSH
77740: LD_INT 2
77742: ARRAY
77743: PPUSH
77744: LD_VAR 0 1
77748: PPUSH
77749: CALL_OW 255
77753: PPUSH
77754: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77758: LD_ADDR_EXP 119
77762: PUSH
77763: LD_EXP 119
77767: PPUSH
77768: LD_VAR 0 6
77772: PPUSH
77773: LD_EXP 119
77777: PUSH
77778: LD_VAR 0 6
77782: ARRAY
77783: PPUSH
77784: LD_VAR 0 5
77788: PPUSH
77789: CALL_OW 3
77793: PPUSH
77794: CALL_OW 1
77798: ST_TO_ADDR
// exit ;
77799: POP
77800: POP
77801: GO 77994
// end ; end ;
77803: GO 77643
77805: POP
77806: POP
// for i := minerMinesList [ index ] downto 1 do
77807: LD_ADDR_VAR 0 5
77811: PUSH
77812: DOUBLE
77813: LD_EXP 119
77817: PUSH
77818: LD_VAR 0 6
77822: ARRAY
77823: INC
77824: ST_TO_ADDR
77825: LD_INT 1
77827: PUSH
77828: FOR_DOWNTO
77829: IFFALSE 77992
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77831: LD_EXP 119
77835: PUSH
77836: LD_VAR 0 6
77840: ARRAY
77841: PUSH
77842: LD_VAR 0 5
77846: ARRAY
77847: PUSH
77848: LD_INT 1
77850: ARRAY
77851: PPUSH
77852: LD_EXP 119
77856: PUSH
77857: LD_VAR 0 6
77861: ARRAY
77862: PUSH
77863: LD_VAR 0 5
77867: ARRAY
77868: PUSH
77869: LD_INT 2
77871: ARRAY
77872: PPUSH
77873: LD_VAR 0 2
77877: PPUSH
77878: LD_VAR 0 3
77882: PPUSH
77883: CALL_OW 298
77887: PUSH
77888: LD_INT 6
77890: LESS
77891: IFFALSE 77990
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77893: LD_EXP 119
77897: PUSH
77898: LD_VAR 0 6
77902: ARRAY
77903: PUSH
77904: LD_VAR 0 5
77908: ARRAY
77909: PUSH
77910: LD_INT 1
77912: ARRAY
77913: PPUSH
77914: LD_EXP 119
77918: PUSH
77919: LD_VAR 0 6
77923: ARRAY
77924: PUSH
77925: LD_VAR 0 5
77929: ARRAY
77930: PUSH
77931: LD_INT 2
77933: ARRAY
77934: PPUSH
77935: LD_VAR 0 1
77939: PPUSH
77940: CALL_OW 255
77944: PPUSH
77945: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77949: LD_ADDR_EXP 119
77953: PUSH
77954: LD_EXP 119
77958: PPUSH
77959: LD_VAR 0 6
77963: PPUSH
77964: LD_EXP 119
77968: PUSH
77969: LD_VAR 0 6
77973: ARRAY
77974: PPUSH
77975: LD_VAR 0 5
77979: PPUSH
77980: CALL_OW 3
77984: PPUSH
77985: CALL_OW 1
77989: ST_TO_ADDR
// end ; end ;
77990: GO 77828
77992: POP
77993: POP
// end ;
77994: LD_VAR 0 4
77998: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77999: LD_INT 0
78001: PPUSH
78002: PPUSH
78003: PPUSH
78004: PPUSH
78005: PPUSH
78006: PPUSH
78007: PPUSH
78008: PPUSH
78009: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
78010: LD_VAR 0 1
78014: PPUSH
78015: CALL_OW 264
78019: PUSH
78020: LD_INT 81
78022: EQUAL
78023: NOT
78024: PUSH
78025: LD_VAR 0 1
78029: PUSH
78030: LD_EXP 118
78034: IN
78035: NOT
78036: OR
78037: IFFALSE 78041
// exit ;
78039: GO 78363
// index := GetElementIndex ( minersList , unit ) ;
78041: LD_ADDR_VAR 0 6
78045: PUSH
78046: LD_EXP 118
78050: PPUSH
78051: LD_VAR 0 1
78055: PPUSH
78056: CALL 21679 0 2
78060: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
78061: LD_ADDR_VAR 0 8
78065: PUSH
78066: LD_EXP 120
78070: PUSH
78071: LD_EXP 119
78075: PUSH
78076: LD_VAR 0 6
78080: ARRAY
78081: MINUS
78082: ST_TO_ADDR
// if not minesFreeAmount then
78083: LD_VAR 0 8
78087: NOT
78088: IFFALSE 78092
// exit ;
78090: GO 78363
// tmp := [ ] ;
78092: LD_ADDR_VAR 0 7
78096: PUSH
78097: EMPTY
78098: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
78099: LD_ADDR_VAR 0 5
78103: PUSH
78104: DOUBLE
78105: LD_INT 1
78107: DEC
78108: ST_TO_ADDR
78109: LD_VAR 0 8
78113: PUSH
78114: FOR_TO
78115: IFFALSE 78310
// begin _d := rand ( 0 , 5 ) ;
78117: LD_ADDR_VAR 0 11
78121: PUSH
78122: LD_INT 0
78124: PPUSH
78125: LD_INT 5
78127: PPUSH
78128: CALL_OW 12
78132: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
78133: LD_ADDR_VAR 0 12
78137: PUSH
78138: LD_INT 2
78140: PPUSH
78141: LD_INT 6
78143: PPUSH
78144: CALL_OW 12
78148: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
78149: LD_ADDR_VAR 0 9
78153: PUSH
78154: LD_VAR 0 2
78158: PPUSH
78159: LD_VAR 0 11
78163: PPUSH
78164: LD_VAR 0 12
78168: PPUSH
78169: CALL_OW 272
78173: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
78174: LD_ADDR_VAR 0 10
78178: PUSH
78179: LD_VAR 0 3
78183: PPUSH
78184: LD_VAR 0 11
78188: PPUSH
78189: LD_VAR 0 12
78193: PPUSH
78194: CALL_OW 273
78198: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
78199: LD_VAR 0 9
78203: PPUSH
78204: LD_VAR 0 10
78208: PPUSH
78209: CALL_OW 488
78213: PUSH
78214: LD_VAR 0 9
78218: PUSH
78219: LD_VAR 0 10
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: PUSH
78228: LD_VAR 0 7
78232: IN
78233: NOT
78234: AND
78235: PUSH
78236: LD_VAR 0 9
78240: PPUSH
78241: LD_VAR 0 10
78245: PPUSH
78246: CALL_OW 458
78250: NOT
78251: AND
78252: IFFALSE 78294
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
78254: LD_ADDR_VAR 0 7
78258: PUSH
78259: LD_VAR 0 7
78263: PPUSH
78264: LD_VAR 0 7
78268: PUSH
78269: LD_INT 1
78271: PLUS
78272: PPUSH
78273: LD_VAR 0 9
78277: PUSH
78278: LD_VAR 0 10
78282: PUSH
78283: EMPTY
78284: LIST
78285: LIST
78286: PPUSH
78287: CALL_OW 1
78291: ST_TO_ADDR
78292: GO 78308
// i := i - 1 ;
78294: LD_ADDR_VAR 0 5
78298: PUSH
78299: LD_VAR 0 5
78303: PUSH
78304: LD_INT 1
78306: MINUS
78307: ST_TO_ADDR
// end ;
78308: GO 78114
78310: POP
78311: POP
// for i in tmp do
78312: LD_ADDR_VAR 0 5
78316: PUSH
78317: LD_VAR 0 7
78321: PUSH
78322: FOR_IN
78323: IFFALSE 78361
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78325: LD_VAR 0 1
78329: PPUSH
78330: LD_VAR 0 5
78334: PUSH
78335: LD_INT 1
78337: ARRAY
78338: PPUSH
78339: LD_VAR 0 5
78343: PUSH
78344: LD_INT 2
78346: ARRAY
78347: PPUSH
78348: CALL 77307 0 3
78352: NOT
78353: IFFALSE 78359
// exit ;
78355: POP
78356: POP
78357: GO 78363
78359: GO 78322
78361: POP
78362: POP
// end ;
78363: LD_VAR 0 4
78367: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78368: LD_INT 0
78370: PPUSH
78371: PPUSH
78372: PPUSH
78373: PPUSH
78374: PPUSH
78375: PPUSH
78376: PPUSH
// if not GetClass ( unit ) = class_sniper then
78377: LD_VAR 0 1
78381: PPUSH
78382: CALL_OW 257
78386: PUSH
78387: LD_INT 5
78389: EQUAL
78390: NOT
78391: IFFALSE 78395
// exit ;
78393: GO 78783
// dist := 8 ;
78395: LD_ADDR_VAR 0 5
78399: PUSH
78400: LD_INT 8
78402: ST_TO_ADDR
// viewRange := 12 ;
78403: LD_ADDR_VAR 0 7
78407: PUSH
78408: LD_INT 12
78410: ST_TO_ADDR
// side := GetSide ( unit ) ;
78411: LD_ADDR_VAR 0 6
78415: PUSH
78416: LD_VAR 0 1
78420: PPUSH
78421: CALL_OW 255
78425: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78426: LD_INT 61
78428: PPUSH
78429: LD_VAR 0 6
78433: PPUSH
78434: CALL_OW 321
78438: PUSH
78439: LD_INT 2
78441: EQUAL
78442: IFFALSE 78452
// viewRange := 16 ;
78444: LD_ADDR_VAR 0 7
78448: PUSH
78449: LD_INT 16
78451: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78452: LD_VAR 0 1
78456: PPUSH
78457: LD_VAR 0 2
78461: PPUSH
78462: LD_VAR 0 3
78466: PPUSH
78467: CALL_OW 297
78471: PUSH
78472: LD_VAR 0 5
78476: GREATER
78477: IFFALSE 78556
// begin ComMoveXY ( unit , x , y ) ;
78479: LD_VAR 0 1
78483: PPUSH
78484: LD_VAR 0 2
78488: PPUSH
78489: LD_VAR 0 3
78493: PPUSH
78494: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78498: LD_INT 35
78500: PPUSH
78501: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78505: LD_VAR 0 1
78509: PPUSH
78510: LD_VAR 0 2
78514: PPUSH
78515: LD_VAR 0 3
78519: PPUSH
78520: CALL 53063 0 3
78524: NOT
78525: IFFALSE 78529
// exit ;
78527: GO 78783
// until GetDistUnitXY ( unit , x , y ) < dist ;
78529: LD_VAR 0 1
78533: PPUSH
78534: LD_VAR 0 2
78538: PPUSH
78539: LD_VAR 0 3
78543: PPUSH
78544: CALL_OW 297
78548: PUSH
78549: LD_VAR 0 5
78553: LESS
78554: IFFALSE 78498
// end ; ComTurnXY ( unit , x , y ) ;
78556: LD_VAR 0 1
78560: PPUSH
78561: LD_VAR 0 2
78565: PPUSH
78566: LD_VAR 0 3
78570: PPUSH
78571: CALL_OW 118
// wait ( 5 ) ;
78575: LD_INT 5
78577: PPUSH
78578: CALL_OW 67
// _d := GetDir ( unit ) ;
78582: LD_ADDR_VAR 0 10
78586: PUSH
78587: LD_VAR 0 1
78591: PPUSH
78592: CALL_OW 254
78596: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78597: LD_ADDR_VAR 0 8
78601: PUSH
78602: LD_VAR 0 1
78606: PPUSH
78607: CALL_OW 250
78611: PPUSH
78612: LD_VAR 0 10
78616: PPUSH
78617: LD_VAR 0 5
78621: PPUSH
78622: CALL_OW 272
78626: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78627: LD_ADDR_VAR 0 9
78631: PUSH
78632: LD_VAR 0 1
78636: PPUSH
78637: CALL_OW 251
78641: PPUSH
78642: LD_VAR 0 10
78646: PPUSH
78647: LD_VAR 0 5
78651: PPUSH
78652: CALL_OW 273
78656: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78657: LD_VAR 0 8
78661: PPUSH
78662: LD_VAR 0 9
78666: PPUSH
78667: CALL_OW 488
78671: NOT
78672: IFFALSE 78676
// exit ;
78674: GO 78783
// ComAnimCustom ( unit , 1 ) ;
78676: LD_VAR 0 1
78680: PPUSH
78681: LD_INT 1
78683: PPUSH
78684: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78688: LD_VAR 0 8
78692: PPUSH
78693: LD_VAR 0 9
78697: PPUSH
78698: LD_VAR 0 6
78702: PPUSH
78703: LD_VAR 0 7
78707: PPUSH
78708: CALL_OW 330
// repeat wait ( 1 ) ;
78712: LD_INT 1
78714: PPUSH
78715: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78719: LD_VAR 0 1
78723: PPUSH
78724: CALL_OW 316
78728: PUSH
78729: LD_VAR 0 1
78733: PPUSH
78734: CALL_OW 314
78738: OR
78739: PUSH
78740: LD_VAR 0 1
78744: PPUSH
78745: CALL_OW 302
78749: NOT
78750: OR
78751: PUSH
78752: LD_VAR 0 1
78756: PPUSH
78757: CALL_OW 301
78761: OR
78762: IFFALSE 78712
// RemoveSeeing ( _x , _y , side ) ;
78764: LD_VAR 0 8
78768: PPUSH
78769: LD_VAR 0 9
78773: PPUSH
78774: LD_VAR 0 6
78778: PPUSH
78779: CALL_OW 331
// end ; end_of_file
78783: LD_VAR 0 4
78787: RET
