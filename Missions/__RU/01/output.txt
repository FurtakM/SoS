// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareRussian ;
   8: CALL 98 0 0
// Action ;
  12: CALL 1256 0 0
// end ;
  16: END
// function Init ; begin
  17: LD_INT 0
  19: PPUSH
// game_speed := 5 ;
  20: LD_ADDR_OWVAR 65
  24: PUSH
  25: LD_INT 5
  27: ST_TO_ADDR
// music_class := 5 ;
  28: LD_ADDR_OWVAR 72
  32: PUSH
  33: LD_INT 5
  35: ST_TO_ADDR
// PlaceSeeing ( 1 , 1 , 3 , - 32967 ) ;
  36: LD_INT 1
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 32967
  47: NEG
  48: PPUSH
  49: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 3 ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_INT 1
  58: PPUSH
  59: LD_INT 3
  61: PPUSH
  62: CALL_OW 331
// PlaceSeeing ( 172 , 50 , 3 , - 32 ) ;
  66: LD_INT 172
  68: PPUSH
  69: LD_INT 50
  71: PPUSH
  72: LD_INT 3
  74: PPUSH
  75: LD_INT 32
  77: NEG
  78: PPUSH
  79: CALL_OW 330
// CenterNowOnXY ( 109 , 159 ) ;
  83: LD_INT 109
  85: PPUSH
  86: LD_INT 159
  88: PPUSH
  89: CALL_OW 86
// end ; end_of_file
  93: LD_VAR 0 1
  97: RET
// export Botvinov , Szyski , Burlak ; export group1 , group2 , group3 ; export function PrepareRussian ; var i , un ; begin
  98: LD_INT 0
 100: PPUSH
 101: PPUSH
 102: PPUSH
// uc_side := 3 ;
 103: LD_ADDR_OWVAR 20
 107: PUSH
 108: LD_INT 3
 110: ST_TO_ADDR
// uc_nation := 3 ;
 111: LD_ADDR_OWVAR 21
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// InitHc ;
 119: CALL_OW 19
// PrepareSoldier ( sex_male , 1 ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 1
 128: PPUSH
 129: CALL_OW 381
// hc_name := Botvinov ;
 133: LD_ADDR_OWVAR 26
 137: PUSH
 138: LD_STRING Botvinov
 140: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 141: LD_ADDR_OWVAR 33
 145: PUSH
 146: LD_STRING SecondCharsGal
 148: ST_TO_ADDR
// hc_face_number := 84 ;
 149: LD_ADDR_OWVAR 34
 153: PUSH
 154: LD_INT 84
 156: ST_TO_ADDR
// Botvinov := CreateHuman ;
 157: LD_ADDR_EXP 1
 161: PUSH
 162: CALL_OW 44
 166: ST_TO_ADDR
// PlaceUnitArea ( Botvinov , botvinovArea , false ) ;
 167: LD_EXP 1
 171: PPUSH
 172: LD_INT 2
 174: PPUSH
 175: LD_INT 0
 177: PPUSH
 178: CALL_OW 49
// ComLookAtDir ( Botvinov , 4 ) ;
 182: LD_EXP 1
 186: PPUSH
 187: LD_INT 4
 189: PPUSH
 190: CALL 42743 0 2
// hc_name := Szyski ;
 194: LD_ADDR_OWVAR 26
 198: PUSH
 199: LD_STRING Szyski
 201: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING SecondCharsGal
 209: ST_TO_ADDR
// hc_face_number := 86 ;
 210: LD_ADDR_OWVAR 34
 214: PUSH
 215: LD_INT 86
 217: ST_TO_ADDR
// Szyski := CreateHuman ;
 218: LD_ADDR_EXP 2
 222: PUSH
 223: CALL_OW 44
 227: ST_TO_ADDR
// PlaceUnitArea ( Szyski , szyskiArea , false ) ;
 228: LD_EXP 2
 232: PPUSH
 233: LD_INT 3
 235: PPUSH
 236: LD_INT 0
 238: PPUSH
 239: CALL_OW 49
// ComLookAtDir ( Szyski , 4 ) ;
 243: LD_EXP 2
 247: PPUSH
 248: LD_INT 4
 250: PPUSH
 251: CALL 42743 0 2
// InitHC_All ( ) ;
 255: CALL_OW 584
// for i := 1 to 3 do
 259: LD_ADDR_VAR 0 2
 263: PUSH
 264: DOUBLE
 265: LD_INT 1
 267: DEC
 268: ST_TO_ADDR
 269: LD_INT 3
 271: PUSH
 272: FOR_TO
 273: IFFALSE 324
// begin PrepareSoldier ( sex_male , 1 ) ;
 275: LD_INT 1
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 381
// un := CreateHuman ;
 285: LD_ADDR_VAR 0 3
 289: PUSH
 290: CALL_OW 44
 294: ST_TO_ADDR
// PlaceUnitArea ( un , officerArea , false ) ;
 295: LD_VAR 0 3
 299: PPUSH
 300: LD_INT 4
 302: PPUSH
 303: LD_INT 0
 305: PPUSH
 306: CALL_OW 49
// ComLookAtDir ( un , 2 ) ;
 310: LD_VAR 0 3
 314: PPUSH
 315: LD_INT 2
 317: PPUSH
 318: CALL 42743 0 2
// end ;
 322: GO 272
 324: POP
 325: POP
// for i := 1 to 3 do
 326: LD_ADDR_VAR 0 2
 330: PUSH
 331: DOUBLE
 332: LD_INT 1
 334: DEC
 335: ST_TO_ADDR
 336: LD_INT 3
 338: PUSH
 339: FOR_TO
 340: IFFALSE 391
// begin PrepareSoldier ( sex_male , 1 ) ;
 342: LD_INT 1
 344: PPUSH
 345: LD_INT 1
 347: PPUSH
 348: CALL_OW 381
// un := CreateHuman ;
 352: LD_ADDR_VAR 0 3
 356: PUSH
 357: CALL_OW 44
 361: ST_TO_ADDR
// PlaceUnitArea ( un , officer2Area , false ) ;
 362: LD_VAR 0 3
 366: PPUSH
 367: LD_INT 5
 369: PPUSH
 370: LD_INT 0
 372: PPUSH
 373: CALL_OW 49
// ComLookAtDir ( un , 5 ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_INT 5
 384: PPUSH
 385: CALL 42743 0 2
// end ;
 389: GO 339
 391: POP
 392: POP
// Burlak := NewCharacter ( Burlak ) ;
 393: LD_ADDR_EXP 3
 397: PUSH
 398: LD_STRING Burlak
 400: PPUSH
 401: CALL_OW 25
 405: ST_TO_ADDR
// InitHc_All ( ) ;
 406: CALL_OW 584
// group1 := PrepareGroup ;
 410: LD_ADDR_EXP 4
 414: PUSH
 415: CALL 595 0 0
 419: ST_TO_ADDR
// group1 := Replace ( group1 , 5 , Burlak ) ;
 420: LD_ADDR_EXP 4
 424: PUSH
 425: LD_EXP 4
 429: PPUSH
 430: LD_INT 5
 432: PPUSH
 433: LD_EXP 3
 437: PPUSH
 438: CALL_OW 1
 442: ST_TO_ADDR
// group2 := PrepareGroup ;
 443: LD_ADDR_EXP 5
 447: PUSH
 448: CALL 595 0 0
 452: ST_TO_ADDR
// group3 := PrepareGroup ;
 453: LD_ADDR_EXP 6
 457: PUSH
 458: CALL 595 0 0
 462: ST_TO_ADDR
// for un in group1 ^ group2 ^ group3 do
 463: LD_ADDR_VAR 0 3
 467: PUSH
 468: LD_EXP 4
 472: PUSH
 473: LD_EXP 5
 477: ADD
 478: PUSH
 479: LD_EXP 6
 483: ADD
 484: PUSH
 485: FOR_IN
 486: IFFALSE 588
// begin case GetClass ( un ) of 1 :
 488: LD_VAR 0 3
 492: PPUSH
 493: CALL_OW 257
 497: PUSH
 498: LD_INT 1
 500: DOUBLE
 501: EQUAL
 502: IFTRUE 506
 504: GO 524
 506: POP
// PlaceUnitArea ( un , firstLineArea , false ) ; 3 :
 507: LD_VAR 0 3
 511: PPUSH
 512: LD_INT 6
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL_OW 49
 522: GO 577
 524: LD_INT 3
 526: DOUBLE
 527: EQUAL
 528: IFTRUE 532
 530: GO 550
 532: POP
// PlaceUnitArea ( un , secondLineArea , false ) ; 4 :
 533: LD_VAR 0 3
 537: PPUSH
 538: LD_INT 7
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 49
 548: GO 577
 550: LD_INT 4
 552: DOUBLE
 553: EQUAL
 554: IFTRUE 558
 556: GO 576
 558: POP
// PlaceUnitArea ( un , thirdLineArea , false ) ; end ;
 559: LD_VAR 0 3
 563: PPUSH
 564: LD_INT 8
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 49
 574: GO 577
 576: POP
// ComHold ( un ) ;
 577: LD_VAR 0 3
 581: PPUSH
 582: CALL_OW 140
// end ;
 586: GO 485
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 1
 594: RET
// function PrepareGroup ; var i , j , tmp ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
 599: PPUSH
 600: PPUSH
// result := [ ] ;
 601: LD_ADDR_VAR 0 1
 605: PUSH
 606: EMPTY
 607: ST_TO_ADDR
// tmp := [ 4 , 0 , 2 , 1 ] ;
 608: LD_ADDR_VAR 0 4
 612: PUSH
 613: LD_INT 4
 615: PUSH
 616: LD_INT 0
 618: PUSH
 619: LD_INT 2
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: ST_TO_ADDR
// for i := 1 to tmp do
 631: LD_ADDR_VAR 0 2
 635: PUSH
 636: DOUBLE
 637: LD_INT 1
 639: DEC
 640: ST_TO_ADDR
 641: LD_VAR 0 4
 645: PUSH
 646: FOR_TO
 647: IFFALSE 726
// if tmp [ i ] then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_VAR 0 2
 658: ARRAY
 659: IFFALSE 724
// for j := 1 to tmp [ i ] do
 661: LD_ADDR_VAR 0 3
 665: PUSH
 666: DOUBLE
 667: LD_INT 1
 669: DEC
 670: ST_TO_ADDR
 671: LD_VAR 0 4
 675: PUSH
 676: LD_VAR 0 2
 680: ARRAY
 681: PUSH
 682: FOR_TO
 683: IFFALSE 722
// begin PrepareHuman ( false , i , 1 ) ;
 685: LD_INT 0
 687: PPUSH
 688: LD_VAR 0 2
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
 700: LD_ADDR_VAR 0 1
 704: PUSH
 705: LD_VAR 0 1
 709: PPUSH
 710: CALL_OW 44
 714: PPUSH
 715: CALL 39581 0 2
 719: ST_TO_ADDR
// end ;
 720: GO 682
 722: POP
 723: POP
 724: GO 646
 726: POP
 727: POP
// end ;
 728: LD_VAR 0 1
 732: RET
// export function FormGroup ( group , soldArea , mechArea , sciArea ) ; var i , class , hexesS , hexesM , hexesSc ; begin
 733: LD_INT 0
 735: PPUSH
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not group then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1251
// hexesS := AreaToList ( soldArea , 0 ) ;
 750: LD_ADDR_VAR 0 8
 754: PUSH
 755: LD_VAR 0 2
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL_OW 517
 767: ST_TO_ADDR
// hexesM := AreaToList ( mechArea , 0 ) ;
 768: LD_ADDR_VAR 0 9
 772: PUSH
 773: LD_VAR 0 3
 777: PPUSH
 778: LD_INT 0
 780: PPUSH
 781: CALL_OW 517
 785: ST_TO_ADDR
// hexesSc := AreaToList ( sciArea , 0 ) ;
 786: LD_ADDR_VAR 0 10
 790: PUSH
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: CALL_OW 517
 803: ST_TO_ADDR
// for i := 1 to Count ( group ) do
 804: LD_ADDR_VAR 0 6
 808: PUSH
 809: DOUBLE
 810: LD_INT 1
 812: DEC
 813: ST_TO_ADDR
 814: LD_VAR 0 1
 818: PPUSH
 819: CALL 3900 0 1
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1249
// begin class := GetClass ( group [ i ] ) ;
 827: LD_ADDR_VAR 0 7
 831: PUSH
 832: LD_VAR 0 1
 836: PUSH
 837: LD_VAR 0 6
 841: ARRAY
 842: PPUSH
 843: CALL_OW 257
 847: ST_TO_ADDR
// if class = 1 then
 848: LD_VAR 0 7
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: IFFALSE 981
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesS [ 1 ] [ 1 ] , hexesS [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
 858: LD_INT 1
 860: PPUSH
 861: LD_VAR 0 1
 865: PUSH
 866: LD_VAR 0 6
 870: ARRAY
 871: PPUSH
 872: LD_VAR 0 8
 876: PUSH
 877: LD_INT 1
 879: ARRAY
 880: PUSH
 881: LD_INT 1
 883: ARRAY
 884: PPUSH
 885: LD_VAR 0 8
 889: PUSH
 890: LD_INT 2
 892: ARRAY
 893: PUSH
 894: LD_INT 1
 896: ARRAY
 897: PPUSH
 898: LD_INT 202
 900: PPUSH
 901: LD_INT 49
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: CALL_OW 595
// hexesS := Replace ( hexesS , 1 , Delete ( hexesS [ 1 ] , 1 ) ) ;
 911: LD_ADDR_VAR 0 8
 915: PUSH
 916: LD_VAR 0 8
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: LD_VAR 0 8
 928: PUSH
 929: LD_INT 1
 931: ARRAY
 932: PPUSH
 933: LD_INT 1
 935: PPUSH
 936: CALL_OW 3
 940: PPUSH
 941: CALL_OW 1
 945: ST_TO_ADDR
// hexesS := Replace ( hexesS , 2 , Delete ( hexesS [ 2 ] , 1 ) ) ;
 946: LD_ADDR_VAR 0 8
 950: PUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: LD_INT 2
 958: PPUSH
 959: LD_VAR 0 8
 963: PUSH
 964: LD_INT 2
 966: ARRAY
 967: PPUSH
 968: LD_INT 1
 970: PPUSH
 971: CALL_OW 3
 975: PPUSH
 976: CALL_OW 1
 980: ST_TO_ADDR
// end ; if class = 3 then
 981: LD_VAR 0 7
 985: PUSH
 986: LD_INT 3
 988: EQUAL
 989: IFFALSE 1114
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesM [ 1 ] [ 1 ] , hexesM [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
 991: LD_INT 1
 993: PPUSH
 994: LD_VAR 0 1
 998: PUSH
 999: LD_VAR 0 6
1003: ARRAY
1004: PPUSH
1005: LD_VAR 0 9
1009: PUSH
1010: LD_INT 1
1012: ARRAY
1013: PUSH
1014: LD_INT 1
1016: ARRAY
1017: PPUSH
1018: LD_VAR 0 9
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: PUSH
1027: LD_INT 1
1029: ARRAY
1030: PPUSH
1031: LD_INT 202
1033: PPUSH
1034: LD_INT 49
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 595
// hexesM := Replace ( hexesM , 1 , Delete ( hexesM [ 1 ] , 1 ) ) ;
1044: LD_ADDR_VAR 0 9
1048: PUSH
1049: LD_VAR 0 9
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_VAR 0 9
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL_OW 3
1073: PPUSH
1074: CALL_OW 1
1078: ST_TO_ADDR
// hexesM := Replace ( hexesM , 2 , Delete ( hexesM [ 2 ] , 1 ) ) ;
1079: LD_ADDR_VAR 0 9
1083: PUSH
1084: LD_VAR 0 9
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_VAR 0 9
1096: PUSH
1097: LD_INT 2
1099: ARRAY
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: CALL_OW 3
1108: PPUSH
1109: CALL_OW 1
1113: ST_TO_ADDR
// end ; if class = 4 then
1114: LD_VAR 0 7
1118: PUSH
1119: LD_INT 4
1121: EQUAL
1122: IFFALSE 1247
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesSc [ 1 ] [ 1 ] , hexesSc [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1124: LD_INT 1
1126: PPUSH
1127: LD_VAR 0 1
1131: PUSH
1132: LD_VAR 0 6
1136: ARRAY
1137: PPUSH
1138: LD_VAR 0 10
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: LD_VAR 0 10
1155: PUSH
1156: LD_INT 2
1158: ARRAY
1159: PUSH
1160: LD_INT 1
1162: ARRAY
1163: PPUSH
1164: LD_INT 202
1166: PPUSH
1167: LD_INT 49
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 595
// hexesSc := Replace ( hexesSc , 1 , Delete ( hexesSc [ 1 ] , 1 ) ) ;
1177: LD_ADDR_VAR 0 10
1181: PUSH
1182: LD_VAR 0 10
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_VAR 0 10
1194: PUSH
1195: LD_INT 1
1197: ARRAY
1198: PPUSH
1199: LD_INT 1
1201: PPUSH
1202: CALL_OW 3
1206: PPUSH
1207: CALL_OW 1
1211: ST_TO_ADDR
// hexesSc := Replace ( hexesSc , 2 , Delete ( hexesSc [ 2 ] , 1 ) ) ;
1212: LD_ADDR_VAR 0 10
1216: PUSH
1217: LD_VAR 0 10
1221: PPUSH
1222: LD_INT 2
1224: PPUSH
1225: LD_VAR 0 10
1229: PUSH
1230: LD_INT 2
1232: ARRAY
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: CALL_OW 3
1241: PPUSH
1242: CALL_OW 1
1246: ST_TO_ADDR
// end ; end ;
1247: GO 824
1249: POP
1250: POP
// end ; end_of_file
1251: LD_VAR 0 5
1255: RET
// export function Action ; var i ; begin
1256: LD_INT 0
1258: PPUSH
1259: PPUSH
// Video ( true ) ;
1260: LD_INT 1
1262: PPUSH
1263: CALL 39553 0 1
// wait ( 0 0$2 ) ;
1267: LD_INT 70
1269: PPUSH
1270: CALL_OW 67
// CenterOnXY ( 106 , 151 ) ;
1274: LD_INT 106
1276: PPUSH
1277: LD_INT 151
1279: PPUSH
1280: CALL_OW 84
// wait ( 0 0$2 ) ;
1284: LD_INT 70
1286: PPUSH
1287: CALL_OW 67
// CenterOnXY ( 62 , 83 ) ;
1291: LD_INT 62
1293: PPUSH
1294: LD_INT 83
1296: PPUSH
1297: CALL_OW 84
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// CenterOnXY ( 128 , 16 ) ;
1308: LD_INT 128
1310: PPUSH
1311: LD_INT 16
1313: PPUSH
1314: CALL_OW 84
// wait ( 60 ) ;
1318: LD_INT 60
1320: PPUSH
1321: CALL_OW 67
// CenterOnXY ( 172 , 47 ) ;
1325: LD_INT 172
1327: PPUSH
1328: LD_INT 47
1330: PPUSH
1331: CALL_OW 84
// stop_talking := true ;
1335: LD_ADDR_OWVAR 56
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// Say ( Botvinov , D1i-Off1-1 ) ;
1343: LD_EXP 1
1347: PPUSH
1348: LD_STRING D1i-Off1-1
1350: PPUSH
1351: CALL_OW 88
// for i in group1 ^ group2 ^ group3 do
1355: LD_ADDR_VAR 0 2
1359: PUSH
1360: LD_EXP 4
1364: PUSH
1365: LD_EXP 5
1369: ADD
1370: PUSH
1371: LD_EXP 6
1375: ADD
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1397
// ComTurnXY ( i , 202 , 49 ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_INT 202
1387: PPUSH
1388: LD_INT 49
1390: PPUSH
1391: CALL_OW 118
1395: GO 1377
1397: POP
1398: POP
// wait ( 10 ) ;
1399: LD_INT 10
1401: PPUSH
1402: CALL_OW 67
// Say ( Szyski , D1i-Off2-1 ) ;
1406: LD_EXP 2
1410: PPUSH
1411: LD_STRING D1i-Off2-1
1413: PPUSH
1414: CALL_OW 88
// Say ( Botvinov , D1i-Off1-2 ) ;
1418: LD_EXP 1
1422: PPUSH
1423: LD_STRING D1i-Off1-2
1425: PPUSH
1426: CALL_OW 88
// FormGroup ( group1 , gs1 , gm1 , gsc1 ) ;
1430: LD_EXP 4
1434: PPUSH
1435: LD_INT 9
1437: PPUSH
1438: LD_INT 12
1440: PPUSH
1441: LD_INT 15
1443: PPUSH
1444: CALL 733 0 4
// FormGroup ( group2 , gs2 , gm2 , gsc2 ) ;
1448: LD_EXP 5
1452: PPUSH
1453: LD_INT 10
1455: PPUSH
1456: LD_INT 13
1458: PPUSH
1459: LD_INT 16
1461: PPUSH
1462: CALL 733 0 4
// FormGroup ( group3 , gs3 , gm3 , gsc3 ) ;
1466: LD_EXP 6
1470: PPUSH
1471: LD_INT 11
1473: PPUSH
1474: LD_INT 14
1476: PPUSH
1477: LD_INT 17
1479: PPUSH
1480: CALL 733 0 4
// wait ( 0 0$5 ) ;
1484: LD_INT 175
1486: PPUSH
1487: CALL_OW 67
// Say ( Szyski , D1i-Off2-2 ) ;
1491: LD_EXP 2
1495: PPUSH
1496: LD_STRING D1i-Off2-2
1498: PPUSH
1499: CALL_OW 88
// Say ( Botvinov , D1i-Off1-3 ) ;
1503: LD_EXP 1
1507: PPUSH
1508: LD_STRING D1i-Off1-3
1510: PPUSH
1511: CALL_OW 88
// SayEffect ( DStart-All ) ;
1515: LD_STRING DStart-All
1517: PPUSH
1518: CALL_OW 96
// wait ( 50 ) ;
1522: LD_INT 50
1524: PPUSH
1525: CALL_OW 67
// stop_talking := false ;
1529: LD_ADDR_OWVAR 56
1533: PUSH
1534: LD_INT 0
1536: ST_TO_ADDR
// for i in SortByDistanceUnit ( eon , group1 , true , true ) do
1537: LD_ADDR_VAR 0 2
1541: PUSH
1542: LD_INT 4
1544: PPUSH
1545: LD_EXP 4
1549: PPUSH
1550: LD_INT 1
1552: PPUSH
1553: LD_INT 1
1555: PPUSH
1556: CALL 7195 0 4
1560: PUSH
1561: FOR_IN
1562: IFFALSE 1585
// begin ComEnterUnit ( i , eon ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: LD_INT 4
1571: PPUSH
1572: CALL_OW 120
// wait ( 55 ) ;
1576: LD_INT 55
1578: PPUSH
1579: CALL_OW 67
// end ;
1583: GO 1561
1585: POP
1586: POP
// end ; end_of_file
1587: LD_VAR 0 1
1591: RET
// on SailEventCustom ( e , p1 , p2 , p3 , p4 , p5 , p6 ) do begin repeat ComMoveXY ( p1 , p2 , p3 ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: LD_VAR 0 3
1601: PPUSH
1602: LD_VAR 0 4
1606: PPUSH
1607: CALL_OW 111
// wait ( 3 ) ;
1611: LD_INT 3
1613: PPUSH
1614: CALL_OW 67
// until IsAt ( p1 , p2 , p3 ) ;
1618: LD_VAR 0 2
1622: PPUSH
1623: LD_VAR 0 3
1627: PPUSH
1628: LD_VAR 0 4
1632: PPUSH
1633: CALL_OW 307
1637: IFFALSE 1592
// ComTurnXY ( p1 , p4 , p5 ) ;
1639: LD_VAR 0 2
1643: PPUSH
1644: LD_VAR 0 5
1648: PPUSH
1649: LD_VAR 0 6
1653: PPUSH
1654: CALL_OW 118
// end ;
1658: PPOPN 7
1660: END
// on EnterBuilding ( building , unit ) do begin if unit = Burlak then
1661: LD_VAR 0 2
1665: PUSH
1666: LD_EXP 3
1670: EQUAL
1671: IFFALSE 1690
// begin wait ( 20 ) ;
1673: LD_INT 20
1675: PPUSH
1676: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1680: LD_INT 1
1682: PPUSH
1683: LD_STRING %_cont
1685: PPUSH
1686: CALL_OW 340
// end ; end ;
1690: PPOPN 2
1692: END
// on DialogueSkipped ( value ) do begin stop_talking := false ;
1693: LD_ADDR_OWVAR 56
1697: PUSH
1698: LD_INT 0
1700: ST_TO_ADDR
// ChangeMap ( 1 , %_cont ) ;
1701: LD_INT 1
1703: PPUSH
1704: LD_STRING %_cont
1706: PPUSH
1707: CALL_OW 340
// end ; end_of_file
1711: PPOPN 1
1713: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1714: LD_INT 0
1716: PPUSH
1717: PPUSH
// if exist_mode then
1718: LD_VAR 0 2
1722: IFFALSE 1768
// begin unit := CreateCharacter ( prefix & ident ) ;
1724: LD_ADDR_VAR 0 5
1728: PUSH
1729: LD_VAR 0 3
1733: PUSH
1734: LD_VAR 0 1
1738: STR
1739: PPUSH
1740: CALL_OW 34
1744: ST_TO_ADDR
// if unit then
1745: LD_VAR 0 5
1749: IFFALSE 1766
// DeleteCharacters ( prefix & ident ) ;
1751: LD_VAR 0 3
1755: PUSH
1756: LD_VAR 0 1
1760: STR
1761: PPUSH
1762: CALL_OW 40
// end else
1766: GO 1783
// unit := NewCharacter ( ident ) ;
1768: LD_ADDR_VAR 0 5
1772: PUSH
1773: LD_VAR 0 1
1777: PPUSH
1778: CALL_OW 25
1782: ST_TO_ADDR
// result := unit ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_VAR 0 5
1792: ST_TO_ADDR
// end ;
1793: LD_VAR 0 4
1797: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1798: LD_INT 0
1800: PPUSH
1801: PPUSH
// if exist_mode then
1802: LD_VAR 0 2
1806: IFFALSE 1831
// unit := CreateCharacter ( prefix & ident ) else
1808: LD_ADDR_VAR 0 5
1812: PUSH
1813: LD_VAR 0 3
1817: PUSH
1818: LD_VAR 0 1
1822: STR
1823: PPUSH
1824: CALL_OW 34
1828: ST_TO_ADDR
1829: GO 1846
// unit := NewCharacter ( ident ) ;
1831: LD_ADDR_VAR 0 5
1835: PUSH
1836: LD_VAR 0 1
1840: PPUSH
1841: CALL_OW 25
1845: ST_TO_ADDR
// result := unit ;
1846: LD_ADDR_VAR 0 4
1850: PUSH
1851: LD_VAR 0 5
1855: ST_TO_ADDR
// end ;
1856: LD_VAR 0 4
1860: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1861: LD_INT 0
1863: PPUSH
1864: PPUSH
// if not side or not nation then
1865: LD_VAR 0 1
1869: NOT
1870: PUSH
1871: LD_VAR 0 2
1875: NOT
1876: OR
1877: IFFALSE 1881
// exit ;
1879: GO 2649
// case nation of nation_american :
1881: LD_VAR 0 2
1885: PUSH
1886: LD_INT 1
1888: DOUBLE
1889: EQUAL
1890: IFTRUE 1894
1892: GO 2108
1894: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1895: LD_ADDR_VAR 0 4
1899: PUSH
1900: LD_INT 35
1902: PUSH
1903: LD_INT 45
1905: PUSH
1906: LD_INT 46
1908: PUSH
1909: LD_INT 47
1911: PUSH
1912: LD_INT 82
1914: PUSH
1915: LD_INT 83
1917: PUSH
1918: LD_INT 84
1920: PUSH
1921: LD_INT 85
1923: PUSH
1924: LD_INT 86
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 6
1935: PUSH
1936: LD_INT 15
1938: PUSH
1939: LD_INT 16
1941: PUSH
1942: LD_INT 7
1944: PUSH
1945: LD_INT 12
1947: PUSH
1948: LD_INT 13
1950: PUSH
1951: LD_INT 10
1953: PUSH
1954: LD_INT 14
1956: PUSH
1957: LD_INT 20
1959: PUSH
1960: LD_INT 21
1962: PUSH
1963: LD_INT 22
1965: PUSH
1966: LD_INT 25
1968: PUSH
1969: LD_INT 32
1971: PUSH
1972: LD_INT 27
1974: PUSH
1975: LD_INT 36
1977: PUSH
1978: LD_INT 69
1980: PUSH
1981: LD_INT 39
1983: PUSH
1984: LD_INT 34
1986: PUSH
1987: LD_INT 40
1989: PUSH
1990: LD_INT 48
1992: PUSH
1993: LD_INT 49
1995: PUSH
1996: LD_INT 50
1998: PUSH
1999: LD_INT 51
2001: PUSH
2002: LD_INT 52
2004: PUSH
2005: LD_INT 53
2007: PUSH
2008: LD_INT 54
2010: PUSH
2011: LD_INT 55
2013: PUSH
2014: LD_INT 56
2016: PUSH
2017: LD_INT 57
2019: PUSH
2020: LD_INT 58
2022: PUSH
2023: LD_INT 59
2025: PUSH
2026: LD_INT 60
2028: PUSH
2029: LD_INT 61
2031: PUSH
2032: LD_INT 62
2034: PUSH
2035: LD_INT 80
2037: PUSH
2038: LD_INT 82
2040: PUSH
2041: LD_INT 83
2043: PUSH
2044: LD_INT 84
2046: PUSH
2047: LD_INT 85
2049: PUSH
2050: LD_INT 86
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: ST_TO_ADDR
2106: GO 2573
2108: LD_INT 2
2110: DOUBLE
2111: EQUAL
2112: IFTRUE 2116
2114: GO 2342
2116: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2117: LD_ADDR_VAR 0 4
2121: PUSH
2122: LD_INT 35
2124: PUSH
2125: LD_INT 45
2127: PUSH
2128: LD_INT 46
2130: PUSH
2131: LD_INT 47
2133: PUSH
2134: LD_INT 82
2136: PUSH
2137: LD_INT 83
2139: PUSH
2140: LD_INT 84
2142: PUSH
2143: LD_INT 85
2145: PUSH
2146: LD_INT 87
2148: PUSH
2149: LD_INT 70
2151: PUSH
2152: LD_INT 1
2154: PUSH
2155: LD_INT 11
2157: PUSH
2158: LD_INT 3
2160: PUSH
2161: LD_INT 4
2163: PUSH
2164: LD_INT 5
2166: PUSH
2167: LD_INT 6
2169: PUSH
2170: LD_INT 15
2172: PUSH
2173: LD_INT 18
2175: PUSH
2176: LD_INT 7
2178: PUSH
2179: LD_INT 17
2181: PUSH
2182: LD_INT 8
2184: PUSH
2185: LD_INT 20
2187: PUSH
2188: LD_INT 21
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 72
2196: PUSH
2197: LD_INT 26
2199: PUSH
2200: LD_INT 69
2202: PUSH
2203: LD_INT 39
2205: PUSH
2206: LD_INT 40
2208: PUSH
2209: LD_INT 41
2211: PUSH
2212: LD_INT 42
2214: PUSH
2215: LD_INT 43
2217: PUSH
2218: LD_INT 48
2220: PUSH
2221: LD_INT 49
2223: PUSH
2224: LD_INT 50
2226: PUSH
2227: LD_INT 51
2229: PUSH
2230: LD_INT 52
2232: PUSH
2233: LD_INT 53
2235: PUSH
2236: LD_INT 54
2238: PUSH
2239: LD_INT 55
2241: PUSH
2242: LD_INT 56
2244: PUSH
2245: LD_INT 60
2247: PUSH
2248: LD_INT 61
2250: PUSH
2251: LD_INT 62
2253: PUSH
2254: LD_INT 66
2256: PUSH
2257: LD_INT 67
2259: PUSH
2260: LD_INT 68
2262: PUSH
2263: LD_INT 81
2265: PUSH
2266: LD_INT 82
2268: PUSH
2269: LD_INT 83
2271: PUSH
2272: LD_INT 84
2274: PUSH
2275: LD_INT 85
2277: PUSH
2278: LD_INT 87
2280: PUSH
2281: LD_INT 88
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: ST_TO_ADDR
2340: GO 2573
2342: LD_INT 3
2344: DOUBLE
2345: EQUAL
2346: IFTRUE 2350
2348: GO 2572
2350: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2351: LD_ADDR_VAR 0 4
2355: PUSH
2356: LD_INT 46
2358: PUSH
2359: LD_INT 47
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: LD_INT 2
2367: PUSH
2368: LD_INT 82
2370: PUSH
2371: LD_INT 83
2373: PUSH
2374: LD_INT 84
2376: PUSH
2377: LD_INT 85
2379: PUSH
2380: LD_INT 86
2382: PUSH
2383: LD_INT 11
2385: PUSH
2386: LD_INT 9
2388: PUSH
2389: LD_INT 20
2391: PUSH
2392: LD_INT 19
2394: PUSH
2395: LD_INT 21
2397: PUSH
2398: LD_INT 24
2400: PUSH
2401: LD_INT 22
2403: PUSH
2404: LD_INT 25
2406: PUSH
2407: LD_INT 28
2409: PUSH
2410: LD_INT 29
2412: PUSH
2413: LD_INT 30
2415: PUSH
2416: LD_INT 31
2418: PUSH
2419: LD_INT 37
2421: PUSH
2422: LD_INT 38
2424: PUSH
2425: LD_INT 32
2427: PUSH
2428: LD_INT 27
2430: PUSH
2431: LD_INT 33
2433: PUSH
2434: LD_INT 69
2436: PUSH
2437: LD_INT 39
2439: PUSH
2440: LD_INT 34
2442: PUSH
2443: LD_INT 40
2445: PUSH
2446: LD_INT 71
2448: PUSH
2449: LD_INT 23
2451: PUSH
2452: LD_INT 44
2454: PUSH
2455: LD_INT 48
2457: PUSH
2458: LD_INT 49
2460: PUSH
2461: LD_INT 50
2463: PUSH
2464: LD_INT 51
2466: PUSH
2467: LD_INT 52
2469: PUSH
2470: LD_INT 53
2472: PUSH
2473: LD_INT 54
2475: PUSH
2476: LD_INT 55
2478: PUSH
2479: LD_INT 56
2481: PUSH
2482: LD_INT 57
2484: PUSH
2485: LD_INT 58
2487: PUSH
2488: LD_INT 59
2490: PUSH
2491: LD_INT 63
2493: PUSH
2494: LD_INT 64
2496: PUSH
2497: LD_INT 65
2499: PUSH
2500: LD_INT 82
2502: PUSH
2503: LD_INT 83
2505: PUSH
2506: LD_INT 84
2508: PUSH
2509: LD_INT 85
2511: PUSH
2512: LD_INT 86
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: ST_TO_ADDR
2570: GO 2573
2572: POP
// if state > - 1 and state < 3 then
2573: LD_VAR 0 3
2577: PUSH
2578: LD_INT 1
2580: NEG
2581: GREATER
2582: PUSH
2583: LD_VAR 0 3
2587: PUSH
2588: LD_INT 3
2590: LESS
2591: AND
2592: IFFALSE 2649
// for i in result do
2594: LD_ADDR_VAR 0 5
2598: PUSH
2599: LD_VAR 0 4
2603: PUSH
2604: FOR_IN
2605: IFFALSE 2647
// if GetTech ( i , side ) <> state then
2607: LD_VAR 0 5
2611: PPUSH
2612: LD_VAR 0 1
2616: PPUSH
2617: CALL_OW 321
2621: PUSH
2622: LD_VAR 0 3
2626: NONEQUAL
2627: IFFALSE 2645
// result := result diff i ;
2629: LD_ADDR_VAR 0 4
2633: PUSH
2634: LD_VAR 0 4
2638: PUSH
2639: LD_VAR 0 5
2643: DIFF
2644: ST_TO_ADDR
2645: GO 2604
2647: POP
2648: POP
// end ;
2649: LD_VAR 0 4
2653: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2654: LD_INT 0
2656: PPUSH
2657: PPUSH
2658: PPUSH
// result := true ;
2659: LD_ADDR_VAR 0 3
2663: PUSH
2664: LD_INT 1
2666: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2667: LD_ADDR_VAR 0 5
2671: PUSH
2672: LD_VAR 0 2
2676: PPUSH
2677: CALL_OW 480
2681: ST_TO_ADDR
// if not tmp then
2682: LD_VAR 0 5
2686: NOT
2687: IFFALSE 2691
// exit ;
2689: GO 2740
// for i in tmp do
2691: LD_ADDR_VAR 0 4
2695: PUSH
2696: LD_VAR 0 5
2700: PUSH
2701: FOR_IN
2702: IFFALSE 2738
// if GetTech ( i , side ) <> state_researched then
2704: LD_VAR 0 4
2708: PPUSH
2709: LD_VAR 0 1
2713: PPUSH
2714: CALL_OW 321
2718: PUSH
2719: LD_INT 2
2721: NONEQUAL
2722: IFFALSE 2736
// begin result := false ;
2724: LD_ADDR_VAR 0 3
2728: PUSH
2729: LD_INT 0
2731: ST_TO_ADDR
// exit ;
2732: POP
2733: POP
2734: GO 2740
// end ;
2736: GO 2701
2738: POP
2739: POP
// end ;
2740: LD_VAR 0 3
2744: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2745: LD_INT 0
2747: PPUSH
2748: PPUSH
2749: PPUSH
2750: PPUSH
2751: PPUSH
2752: PPUSH
2753: PPUSH
2754: PPUSH
2755: PPUSH
2756: PPUSH
2757: PPUSH
2758: PPUSH
2759: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2760: LD_VAR 0 1
2764: NOT
2765: PUSH
2766: LD_VAR 0 1
2770: PPUSH
2771: CALL_OW 257
2775: PUSH
2776: LD_INT 9
2778: NONEQUAL
2779: OR
2780: IFFALSE 2784
// exit ;
2782: GO 3357
// side := GetSide ( unit ) ;
2784: LD_ADDR_VAR 0 9
2788: PUSH
2789: LD_VAR 0 1
2793: PPUSH
2794: CALL_OW 255
2798: ST_TO_ADDR
// tech_space := tech_spacanom ;
2799: LD_ADDR_VAR 0 12
2803: PUSH
2804: LD_INT 29
2806: ST_TO_ADDR
// tech_time := tech_taurad ;
2807: LD_ADDR_VAR 0 13
2811: PUSH
2812: LD_INT 28
2814: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2815: LD_ADDR_VAR 0 11
2819: PUSH
2820: LD_VAR 0 1
2824: PPUSH
2825: CALL_OW 310
2829: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2830: LD_VAR 0 11
2834: PPUSH
2835: CALL_OW 247
2839: PUSH
2840: LD_INT 2
2842: EQUAL
2843: IFFALSE 2847
// exit ;
2845: GO 3357
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2847: LD_ADDR_VAR 0 8
2851: PUSH
2852: LD_INT 81
2854: PUSH
2855: LD_VAR 0 9
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 3
2866: PUSH
2867: LD_INT 21
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 69
2889: ST_TO_ADDR
// if not tmp then
2890: LD_VAR 0 8
2894: NOT
2895: IFFALSE 2899
// exit ;
2897: GO 3357
// if in_unit then
2899: LD_VAR 0 11
2903: IFFALSE 2927
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2905: LD_ADDR_VAR 0 10
2909: PUSH
2910: LD_VAR 0 8
2914: PPUSH
2915: LD_VAR 0 11
2919: PPUSH
2920: CALL_OW 74
2924: ST_TO_ADDR
2925: GO 2947
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2927: LD_ADDR_VAR 0 10
2931: PUSH
2932: LD_VAR 0 8
2936: PPUSH
2937: LD_VAR 0 1
2941: PPUSH
2942: CALL_OW 74
2946: ST_TO_ADDR
// if not enemy then
2947: LD_VAR 0 10
2951: NOT
2952: IFFALSE 2956
// exit ;
2954: GO 3357
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2956: LD_VAR 0 11
2960: PUSH
2961: LD_VAR 0 11
2965: PPUSH
2966: LD_VAR 0 10
2970: PPUSH
2971: CALL_OW 296
2975: PUSH
2976: LD_INT 13
2978: GREATER
2979: AND
2980: PUSH
2981: LD_VAR 0 1
2985: PPUSH
2986: LD_VAR 0 10
2990: PPUSH
2991: CALL_OW 296
2995: PUSH
2996: LD_INT 12
2998: GREATER
2999: OR
3000: IFFALSE 3004
// exit ;
3002: GO 3357
// missile := [ 1 ] ;
3004: LD_ADDR_VAR 0 14
3008: PUSH
3009: LD_INT 1
3011: PUSH
3012: EMPTY
3013: LIST
3014: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3015: LD_VAR 0 9
3019: PPUSH
3020: LD_VAR 0 12
3024: PPUSH
3025: CALL_OW 325
3029: IFFALSE 3058
// missile := Replace ( missile , missile + 1 , 2 ) ;
3031: LD_ADDR_VAR 0 14
3035: PUSH
3036: LD_VAR 0 14
3040: PPUSH
3041: LD_VAR 0 14
3045: PUSH
3046: LD_INT 1
3048: PLUS
3049: PPUSH
3050: LD_INT 2
3052: PPUSH
3053: CALL_OW 1
3057: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3058: LD_VAR 0 9
3062: PPUSH
3063: LD_VAR 0 13
3067: PPUSH
3068: CALL_OW 325
3072: PUSH
3073: LD_VAR 0 10
3077: PPUSH
3078: CALL_OW 255
3082: PPUSH
3083: LD_VAR 0 13
3087: PPUSH
3088: CALL_OW 325
3092: NOT
3093: AND
3094: IFFALSE 3123
// missile := Replace ( missile , missile + 1 , 3 ) ;
3096: LD_ADDR_VAR 0 14
3100: PUSH
3101: LD_VAR 0 14
3105: PPUSH
3106: LD_VAR 0 14
3110: PUSH
3111: LD_INT 1
3113: PLUS
3114: PPUSH
3115: LD_INT 3
3117: PPUSH
3118: CALL_OW 1
3122: ST_TO_ADDR
// if missile < 2 then
3123: LD_VAR 0 14
3127: PUSH
3128: LD_INT 2
3130: LESS
3131: IFFALSE 3135
// exit ;
3133: GO 3357
// x := GetX ( enemy ) ;
3135: LD_ADDR_VAR 0 4
3139: PUSH
3140: LD_VAR 0 10
3144: PPUSH
3145: CALL_OW 250
3149: ST_TO_ADDR
// y := GetY ( enemy ) ;
3150: LD_ADDR_VAR 0 5
3154: PUSH
3155: LD_VAR 0 10
3159: PPUSH
3160: CALL_OW 251
3164: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3165: LD_ADDR_VAR 0 6
3169: PUSH
3170: LD_VAR 0 4
3174: PUSH
3175: LD_INT 1
3177: NEG
3178: PPUSH
3179: LD_INT 1
3181: PPUSH
3182: CALL_OW 12
3186: PLUS
3187: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3188: LD_ADDR_VAR 0 7
3192: PUSH
3193: LD_VAR 0 5
3197: PUSH
3198: LD_INT 1
3200: NEG
3201: PPUSH
3202: LD_INT 1
3204: PPUSH
3205: CALL_OW 12
3209: PLUS
3210: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3211: LD_VAR 0 6
3215: PPUSH
3216: LD_VAR 0 7
3220: PPUSH
3221: CALL_OW 488
3225: NOT
3226: IFFALSE 3248
// begin _x := x ;
3228: LD_ADDR_VAR 0 6
3232: PUSH
3233: LD_VAR 0 4
3237: ST_TO_ADDR
// _y := y ;
3238: LD_ADDR_VAR 0 7
3242: PUSH
3243: LD_VAR 0 5
3247: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3248: LD_ADDR_VAR 0 3
3252: PUSH
3253: LD_INT 1
3255: PPUSH
3256: LD_VAR 0 14
3260: PPUSH
3261: CALL_OW 12
3265: ST_TO_ADDR
// case i of 1 :
3266: LD_VAR 0 3
3270: PUSH
3271: LD_INT 1
3273: DOUBLE
3274: EQUAL
3275: IFTRUE 3279
3277: GO 3296
3279: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3280: LD_VAR 0 1
3284: PPUSH
3285: LD_VAR 0 10
3289: PPUSH
3290: CALL_OW 115
3294: GO 3357
3296: LD_INT 2
3298: DOUBLE
3299: EQUAL
3300: IFTRUE 3304
3302: GO 3326
3304: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3305: LD_VAR 0 1
3309: PPUSH
3310: LD_VAR 0 6
3314: PPUSH
3315: LD_VAR 0 7
3319: PPUSH
3320: CALL_OW 153
3324: GO 3357
3326: LD_INT 3
3328: DOUBLE
3329: EQUAL
3330: IFTRUE 3334
3332: GO 3356
3334: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3335: LD_VAR 0 1
3339: PPUSH
3340: LD_VAR 0 6
3344: PPUSH
3345: LD_VAR 0 7
3349: PPUSH
3350: CALL_OW 154
3354: GO 3357
3356: POP
// end ;
3357: LD_VAR 0 2
3361: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3362: LD_INT 0
3364: PPUSH
3365: PPUSH
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
// if not unit or not building then
3370: LD_VAR 0 1
3374: NOT
3375: PUSH
3376: LD_VAR 0 2
3380: NOT
3381: OR
3382: IFFALSE 3386
// exit ;
3384: GO 3544
// x := GetX ( building ) ;
3386: LD_ADDR_VAR 0 5
3390: PUSH
3391: LD_VAR 0 2
3395: PPUSH
3396: CALL_OW 250
3400: ST_TO_ADDR
// y := GetY ( building ) ;
3401: LD_ADDR_VAR 0 6
3405: PUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 251
3415: ST_TO_ADDR
// for i = 0 to 5 do
3416: LD_ADDR_VAR 0 4
3420: PUSH
3421: DOUBLE
3422: LD_INT 0
3424: DEC
3425: ST_TO_ADDR
3426: LD_INT 5
3428: PUSH
3429: FOR_TO
3430: IFFALSE 3542
// begin _x := ShiftX ( x , i , 3 ) ;
3432: LD_ADDR_VAR 0 7
3436: PUSH
3437: LD_VAR 0 5
3441: PPUSH
3442: LD_VAR 0 4
3446: PPUSH
3447: LD_INT 3
3449: PPUSH
3450: CALL_OW 272
3454: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3455: LD_ADDR_VAR 0 8
3459: PUSH
3460: LD_VAR 0 6
3464: PPUSH
3465: LD_VAR 0 4
3469: PPUSH
3470: LD_INT 3
3472: PPUSH
3473: CALL_OW 273
3477: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3478: LD_VAR 0 7
3482: PPUSH
3483: LD_VAR 0 8
3487: PPUSH
3488: CALL_OW 488
3492: NOT
3493: IFFALSE 3497
// continue ;
3495: GO 3429
// if HexInfo ( _x , _y ) = 0 then
3497: LD_VAR 0 7
3501: PPUSH
3502: LD_VAR 0 8
3506: PPUSH
3507: CALL_OW 428
3511: PUSH
3512: LD_INT 0
3514: EQUAL
3515: IFFALSE 3540
// begin ComMoveXY ( unit , _x , _y ) ;
3517: LD_VAR 0 1
3521: PPUSH
3522: LD_VAR 0 7
3526: PPUSH
3527: LD_VAR 0 8
3531: PPUSH
3532: CALL_OW 111
// exit ;
3536: POP
3537: POP
3538: GO 3544
// end ; end ;
3540: GO 3429
3542: POP
3543: POP
// end ;
3544: LD_VAR 0 3
3548: RET
// export function ScanBase ( side , base_area ) ; begin
3549: LD_INT 0
3551: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3552: LD_ADDR_VAR 0 3
3556: PUSH
3557: LD_VAR 0 2
3561: PPUSH
3562: LD_INT 81
3564: PUSH
3565: LD_VAR 0 1
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PPUSH
3574: CALL_OW 70
3578: ST_TO_ADDR
// end ;
3579: LD_VAR 0 3
3583: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3584: LD_INT 0
3586: PPUSH
3587: PPUSH
3588: PPUSH
3589: PPUSH
// result := false ;
3590: LD_ADDR_VAR 0 2
3594: PUSH
3595: LD_INT 0
3597: ST_TO_ADDR
// side := GetSide ( unit ) ;
3598: LD_ADDR_VAR 0 3
3602: PUSH
3603: LD_VAR 0 1
3607: PPUSH
3608: CALL_OW 255
3612: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3613: LD_ADDR_VAR 0 4
3617: PUSH
3618: LD_VAR 0 1
3622: PPUSH
3623: CALL_OW 248
3627: ST_TO_ADDR
// case nat of 1 :
3628: LD_VAR 0 4
3632: PUSH
3633: LD_INT 1
3635: DOUBLE
3636: EQUAL
3637: IFTRUE 3641
3639: GO 3652
3641: POP
// tech := tech_lassight ; 2 :
3642: LD_ADDR_VAR 0 5
3646: PUSH
3647: LD_INT 12
3649: ST_TO_ADDR
3650: GO 3691
3652: LD_INT 2
3654: DOUBLE
3655: EQUAL
3656: IFTRUE 3660
3658: GO 3671
3660: POP
// tech := tech_mortar ; 3 :
3661: LD_ADDR_VAR 0 5
3665: PUSH
3666: LD_INT 41
3668: ST_TO_ADDR
3669: GO 3691
3671: LD_INT 3
3673: DOUBLE
3674: EQUAL
3675: IFTRUE 3679
3677: GO 3690
3679: POP
// tech := tech_bazooka ; end ;
3680: LD_ADDR_VAR 0 5
3684: PUSH
3685: LD_INT 44
3687: ST_TO_ADDR
3688: GO 3691
3690: POP
// if Researched ( side , tech ) then
3691: LD_VAR 0 3
3695: PPUSH
3696: LD_VAR 0 5
3700: PPUSH
3701: CALL_OW 325
3705: IFFALSE 3732
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3707: LD_ADDR_VAR 0 2
3711: PUSH
3712: LD_INT 5
3714: PUSH
3715: LD_INT 8
3717: PUSH
3718: LD_INT 9
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: LIST
3725: PUSH
3726: LD_VAR 0 4
3730: ARRAY
3731: ST_TO_ADDR
// end ;
3732: LD_VAR 0 2
3736: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3737: LD_INT 0
3739: PPUSH
3740: PPUSH
3741: PPUSH
// if not mines then
3742: LD_VAR 0 2
3746: NOT
3747: IFFALSE 3751
// exit ;
3749: GO 3895
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_INT 81
3758: PUSH
3759: LD_VAR 0 1
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PUSH
3768: LD_INT 3
3770: PUSH
3771: LD_INT 21
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PPUSH
3789: CALL_OW 69
3793: ST_TO_ADDR
// for i in mines do
3794: LD_ADDR_VAR 0 4
3798: PUSH
3799: LD_VAR 0 2
3803: PUSH
3804: FOR_IN
3805: IFFALSE 3893
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3807: LD_VAR 0 4
3811: PUSH
3812: LD_INT 1
3814: ARRAY
3815: PPUSH
3816: LD_VAR 0 4
3820: PUSH
3821: LD_INT 2
3823: ARRAY
3824: PPUSH
3825: CALL_OW 458
3829: NOT
3830: IFFALSE 3834
// continue ;
3832: GO 3804
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3834: LD_VAR 0 4
3838: PUSH
3839: LD_INT 1
3841: ARRAY
3842: PPUSH
3843: LD_VAR 0 4
3847: PUSH
3848: LD_INT 2
3850: ARRAY
3851: PPUSH
3852: CALL_OW 428
3856: PUSH
3857: LD_VAR 0 5
3861: IN
3862: IFFALSE 3891
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3864: LD_VAR 0 4
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: PPUSH
3873: LD_VAR 0 4
3877: PUSH
3878: LD_INT 2
3880: ARRAY
3881: PPUSH
3882: LD_VAR 0 1
3886: PPUSH
3887: CALL_OW 456
// end ;
3891: GO 3804
3893: POP
3894: POP
// end ;
3895: LD_VAR 0 3
3899: RET
// export function Count ( array ) ; begin
3900: LD_INT 0
3902: PPUSH
// result := array + 0 ;
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: LD_VAR 0 1
3912: PUSH
3913: LD_INT 0
3915: PLUS
3916: ST_TO_ADDR
// end ;
3917: LD_VAR 0 2
3921: RET
// export function IsEmpty ( building ) ; begin
3922: LD_INT 0
3924: PPUSH
// if not building then
3925: LD_VAR 0 1
3929: NOT
3930: IFFALSE 3934
// exit ;
3932: GO 3977
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: LD_VAR 0 1
3943: PUSH
3944: LD_INT 22
3946: PUSH
3947: LD_VAR 0 1
3951: PPUSH
3952: CALL_OW 255
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: PUSH
3961: LD_INT 58
3963: PUSH
3964: EMPTY
3965: LIST
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: PPUSH
3971: CALL_OW 69
3975: IN
3976: ST_TO_ADDR
// end ;
3977: LD_VAR 0 2
3981: RET
// export function IsNotFull ( building ) ; var places ; begin
3982: LD_INT 0
3984: PPUSH
3985: PPUSH
// if not building then
3986: LD_VAR 0 1
3990: NOT
3991: IFFALSE 3995
// exit ;
3993: GO 4023
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: LD_VAR 0 1
4004: PPUSH
4005: LD_INT 3
4007: PUSH
4008: LD_INT 62
4010: PUSH
4011: EMPTY
4012: LIST
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: PPUSH
4018: CALL_OW 72
4022: ST_TO_ADDR
// end ;
4023: LD_VAR 0 2
4027: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4028: LD_INT 0
4030: PPUSH
4031: PPUSH
4032: PPUSH
4033: PPUSH
// tmp := [ ] ;
4034: LD_ADDR_VAR 0 3
4038: PUSH
4039: EMPTY
4040: ST_TO_ADDR
// list := [ ] ;
4041: LD_ADDR_VAR 0 5
4045: PUSH
4046: EMPTY
4047: ST_TO_ADDR
// for i = 16 to 25 do
4048: LD_ADDR_VAR 0 4
4052: PUSH
4053: DOUBLE
4054: LD_INT 16
4056: DEC
4057: ST_TO_ADDR
4058: LD_INT 25
4060: PUSH
4061: FOR_TO
4062: IFFALSE 4135
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4064: LD_ADDR_VAR 0 3
4068: PUSH
4069: LD_VAR 0 3
4073: PUSH
4074: LD_INT 22
4076: PUSH
4077: LD_VAR 0 1
4081: PPUSH
4082: CALL_OW 255
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PUSH
4091: LD_INT 91
4093: PUSH
4094: LD_VAR 0 1
4098: PUSH
4099: LD_INT 6
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: LD_INT 30
4109: PUSH
4110: LD_VAR 0 4
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: LIST
4123: PUSH
4124: EMPTY
4125: LIST
4126: PPUSH
4127: CALL_OW 69
4131: ADD
4132: ST_TO_ADDR
4133: GO 4061
4135: POP
4136: POP
// for i = 1 to tmp do
4137: LD_ADDR_VAR 0 4
4141: PUSH
4142: DOUBLE
4143: LD_INT 1
4145: DEC
4146: ST_TO_ADDR
4147: LD_VAR 0 3
4151: PUSH
4152: FOR_TO
4153: IFFALSE 4241
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4155: LD_ADDR_VAR 0 5
4159: PUSH
4160: LD_VAR 0 5
4164: PUSH
4165: LD_VAR 0 3
4169: PUSH
4170: LD_VAR 0 4
4174: ARRAY
4175: PPUSH
4176: CALL_OW 266
4180: PUSH
4181: LD_VAR 0 3
4185: PUSH
4186: LD_VAR 0 4
4190: ARRAY
4191: PPUSH
4192: CALL_OW 250
4196: PUSH
4197: LD_VAR 0 3
4201: PUSH
4202: LD_VAR 0 4
4206: ARRAY
4207: PPUSH
4208: CALL_OW 251
4212: PUSH
4213: LD_VAR 0 3
4217: PUSH
4218: LD_VAR 0 4
4222: ARRAY
4223: PPUSH
4224: CALL_OW 254
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: PUSH
4235: EMPTY
4236: LIST
4237: ADD
4238: ST_TO_ADDR
4239: GO 4152
4241: POP
4242: POP
// result := list ;
4243: LD_ADDR_VAR 0 2
4247: PUSH
4248: LD_VAR 0 5
4252: ST_TO_ADDR
// end ;
4253: LD_VAR 0 2
4257: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4258: LD_INT 0
4260: PPUSH
4261: PPUSH
4262: PPUSH
4263: PPUSH
4264: PPUSH
4265: PPUSH
4266: PPUSH
// if not factory then
4267: LD_VAR 0 1
4271: NOT
4272: IFFALSE 4276
// exit ;
4274: GO 4869
// if control = control_apeman then
4276: LD_VAR 0 4
4280: PUSH
4281: LD_INT 5
4283: EQUAL
4284: IFFALSE 4393
// begin tmp := UnitsInside ( factory ) ;
4286: LD_ADDR_VAR 0 8
4290: PUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: CALL_OW 313
4300: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4301: LD_VAR 0 8
4305: PPUSH
4306: LD_INT 25
4308: PUSH
4309: LD_INT 12
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PPUSH
4316: CALL_OW 72
4320: NOT
4321: IFFALSE 4331
// control := control_manual ;
4323: LD_ADDR_VAR 0 4
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4331: LD_ADDR_VAR 0 8
4335: PUSH
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL 4028 0 1
4345: ST_TO_ADDR
// if tmp then
4346: LD_VAR 0 8
4350: IFFALSE 4393
// begin for i in tmp do
4352: LD_ADDR_VAR 0 7
4356: PUSH
4357: LD_VAR 0 8
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4391
// if i [ 1 ] = b_ext_radio then
4365: LD_VAR 0 7
4369: PUSH
4370: LD_INT 1
4372: ARRAY
4373: PUSH
4374: LD_INT 22
4376: EQUAL
4377: IFFALSE 4389
// begin control := control_remote ;
4379: LD_ADDR_VAR 0 4
4383: PUSH
4384: LD_INT 2
4386: ST_TO_ADDR
// break ;
4387: GO 4391
// end ;
4389: GO 4362
4391: POP
4392: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4393: LD_VAR 0 1
4397: PPUSH
4398: LD_VAR 0 2
4402: PPUSH
4403: LD_VAR 0 3
4407: PPUSH
4408: LD_VAR 0 4
4412: PPUSH
4413: LD_VAR 0 5
4417: PPUSH
4418: CALL_OW 448
4422: IFFALSE 4457
// begin result := [ chassis , engine , control , weapon ] ;
4424: LD_ADDR_VAR 0 6
4428: PUSH
4429: LD_VAR 0 2
4433: PUSH
4434: LD_VAR 0 3
4438: PUSH
4439: LD_VAR 0 4
4443: PUSH
4444: LD_VAR 0 5
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// exit ;
4455: GO 4869
// end ; _chassis := AvailableChassisList ( factory ) ;
4457: LD_ADDR_VAR 0 9
4461: PUSH
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 475
4471: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4472: LD_ADDR_VAR 0 11
4476: PUSH
4477: LD_VAR 0 1
4481: PPUSH
4482: CALL_OW 476
4486: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4487: LD_ADDR_VAR 0 12
4491: PUSH
4492: LD_VAR 0 1
4496: PPUSH
4497: CALL_OW 477
4501: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4502: LD_ADDR_VAR 0 10
4506: PUSH
4507: LD_VAR 0 1
4511: PPUSH
4512: CALL_OW 478
4516: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4517: LD_VAR 0 9
4521: NOT
4522: PUSH
4523: LD_VAR 0 11
4527: NOT
4528: OR
4529: PUSH
4530: LD_VAR 0 12
4534: NOT
4535: OR
4536: PUSH
4537: LD_VAR 0 10
4541: NOT
4542: OR
4543: IFFALSE 4578
// begin result := [ chassis , engine , control , weapon ] ;
4545: LD_ADDR_VAR 0 6
4549: PUSH
4550: LD_VAR 0 2
4554: PUSH
4555: LD_VAR 0 3
4559: PUSH
4560: LD_VAR 0 4
4564: PUSH
4565: LD_VAR 0 5
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: ST_TO_ADDR
// exit ;
4576: GO 4869
// end ; if not chassis in _chassis then
4578: LD_VAR 0 2
4582: PUSH
4583: LD_VAR 0 9
4587: IN
4588: NOT
4589: IFFALSE 4615
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4591: LD_ADDR_VAR 0 2
4595: PUSH
4596: LD_VAR 0 9
4600: PUSH
4601: LD_INT 1
4603: PPUSH
4604: LD_VAR 0 9
4608: PPUSH
4609: CALL_OW 12
4613: ARRAY
4614: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 3
4624: PPUSH
4625: CALL 4874 0 2
4629: NOT
4630: IFFALSE 4689
// repeat engine := _engine [ 1 ] ;
4632: LD_ADDR_VAR 0 3
4636: PUSH
4637: LD_VAR 0 11
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4646: LD_ADDR_VAR 0 11
4650: PUSH
4651: LD_VAR 0 11
4655: PPUSH
4656: LD_INT 1
4658: PPUSH
4659: CALL_OW 3
4663: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4664: LD_VAR 0 2
4668: PPUSH
4669: LD_VAR 0 3
4673: PPUSH
4674: CALL 4874 0 2
4678: PUSH
4679: LD_VAR 0 11
4683: PUSH
4684: EMPTY
4685: EQUAL
4686: OR
4687: IFFALSE 4632
// if not control in _control then
4689: LD_VAR 0 4
4693: PUSH
4694: LD_VAR 0 12
4698: IN
4699: NOT
4700: IFFALSE 4726
// control := _control [ rand ( 1 , _control ) ] ;
4702: LD_ADDR_VAR 0 4
4706: PUSH
4707: LD_VAR 0 12
4711: PUSH
4712: LD_INT 1
4714: PPUSH
4715: LD_VAR 0 12
4719: PPUSH
4720: CALL_OW 12
4724: ARRAY
4725: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4726: LD_VAR 0 2
4730: PPUSH
4731: LD_VAR 0 5
4735: PPUSH
4736: CALL 5094 0 2
4740: NOT
4741: IFFALSE 4800
// repeat weapon := _weapon [ 1 ] ;
4743: LD_ADDR_VAR 0 5
4747: PUSH
4748: LD_VAR 0 10
4752: PUSH
4753: LD_INT 1
4755: ARRAY
4756: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4757: LD_ADDR_VAR 0 10
4761: PUSH
4762: LD_VAR 0 10
4766: PPUSH
4767: LD_INT 1
4769: PPUSH
4770: CALL_OW 3
4774: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4775: LD_VAR 0 2
4779: PPUSH
4780: LD_VAR 0 5
4784: PPUSH
4785: CALL 5094 0 2
4789: PUSH
4790: LD_VAR 0 10
4794: PUSH
4795: EMPTY
4796: EQUAL
4797: OR
4798: IFFALSE 4743
// result := [ ] ;
4800: LD_ADDR_VAR 0 6
4804: PUSH
4805: EMPTY
4806: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4807: LD_VAR 0 1
4811: PPUSH
4812: LD_VAR 0 2
4816: PPUSH
4817: LD_VAR 0 3
4821: PPUSH
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_VAR 0 5
4831: PPUSH
4832: CALL_OW 448
4836: IFFALSE 4869
// result := [ chassis , engine , control , weapon ] ;
4838: LD_ADDR_VAR 0 6
4842: PUSH
4843: LD_VAR 0 2
4847: PUSH
4848: LD_VAR 0 3
4852: PUSH
4853: LD_VAR 0 4
4857: PUSH
4858: LD_VAR 0 5
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: ST_TO_ADDR
// end ;
4869: LD_VAR 0 6
4873: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4874: LD_INT 0
4876: PPUSH
// if not chassis or not engine then
4877: LD_VAR 0 1
4881: NOT
4882: PUSH
4883: LD_VAR 0 2
4887: NOT
4888: OR
4889: IFFALSE 4893
// exit ;
4891: GO 5089
// case engine of engine_solar :
4893: LD_VAR 0 2
4897: PUSH
4898: LD_INT 2
4900: DOUBLE
4901: EQUAL
4902: IFTRUE 4906
4904: GO 4944
4906: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4907: LD_ADDR_VAR 0 3
4911: PUSH
4912: LD_INT 11
4914: PUSH
4915: LD_INT 12
4917: PUSH
4918: LD_INT 13
4920: PUSH
4921: LD_INT 14
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: LD_INT 2
4929: PUSH
4930: LD_INT 3
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: ST_TO_ADDR
4942: GO 5073
4944: LD_INT 1
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 4952
4950: GO 5014
4952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4953: LD_ADDR_VAR 0 3
4957: PUSH
4958: LD_INT 11
4960: PUSH
4961: LD_INT 12
4963: PUSH
4964: LD_INT 13
4966: PUSH
4967: LD_INT 14
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: LD_INT 3
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: LD_INT 5
4984: PUSH
4985: LD_INT 21
4987: PUSH
4988: LD_INT 23
4990: PUSH
4991: LD_INT 22
4993: PUSH
4994: LD_INT 24
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: ST_TO_ADDR
5012: GO 5073
5014: LD_INT 3
5016: DOUBLE
5017: EQUAL
5018: IFTRUE 5022
5020: GO 5072
5022: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5023: LD_ADDR_VAR 0 3
5027: PUSH
5028: LD_INT 13
5030: PUSH
5031: LD_INT 14
5033: PUSH
5034: LD_INT 2
5036: PUSH
5037: LD_INT 3
5039: PUSH
5040: LD_INT 4
5042: PUSH
5043: LD_INT 5
5045: PUSH
5046: LD_INT 21
5048: PUSH
5049: LD_INT 22
5051: PUSH
5052: LD_INT 23
5054: PUSH
5055: LD_INT 24
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: ST_TO_ADDR
5070: GO 5073
5072: POP
// result := ( chassis in result ) ;
5073: LD_ADDR_VAR 0 3
5077: PUSH
5078: LD_VAR 0 1
5082: PUSH
5083: LD_VAR 0 3
5087: IN
5088: ST_TO_ADDR
// end ;
5089: LD_VAR 0 3
5093: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5094: LD_INT 0
5096: PPUSH
// if not chassis or not weapon then
5097: LD_VAR 0 1
5101: NOT
5102: PUSH
5103: LD_VAR 0 2
5107: NOT
5108: OR
5109: IFFALSE 5113
// exit ;
5111: GO 6173
// case weapon of us_machine_gun :
5113: LD_VAR 0 2
5117: PUSH
5118: LD_INT 2
5120: DOUBLE
5121: EQUAL
5122: IFTRUE 5126
5124: GO 5156
5126: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5127: LD_ADDR_VAR 0 3
5131: PUSH
5132: LD_INT 1
5134: PUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 3
5140: PUSH
5141: LD_INT 4
5143: PUSH
5144: LD_INT 5
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: ST_TO_ADDR
5154: GO 6157
5156: LD_INT 3
5158: DOUBLE
5159: EQUAL
5160: IFTRUE 5164
5162: GO 5194
5164: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5165: LD_ADDR_VAR 0 3
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: LD_INT 2
5175: PUSH
5176: LD_INT 3
5178: PUSH
5179: LD_INT 4
5181: PUSH
5182: LD_INT 5
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: ST_TO_ADDR
5192: GO 6157
5194: LD_INT 11
5196: DOUBLE
5197: EQUAL
5198: IFTRUE 5202
5200: GO 5232
5202: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5203: LD_ADDR_VAR 0 3
5207: PUSH
5208: LD_INT 1
5210: PUSH
5211: LD_INT 2
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: LD_INT 4
5219: PUSH
5220: LD_INT 5
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: ST_TO_ADDR
5230: GO 6157
5232: LD_INT 4
5234: DOUBLE
5235: EQUAL
5236: IFTRUE 5240
5238: GO 5266
5240: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5241: LD_ADDR_VAR 0 3
5245: PUSH
5246: LD_INT 2
5248: PUSH
5249: LD_INT 3
5251: PUSH
5252: LD_INT 4
5254: PUSH
5255: LD_INT 5
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: ST_TO_ADDR
5264: GO 6157
5266: LD_INT 5
5268: DOUBLE
5269: EQUAL
5270: IFTRUE 5274
5272: GO 5300
5274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5275: LD_ADDR_VAR 0 3
5279: PUSH
5280: LD_INT 2
5282: PUSH
5283: LD_INT 3
5285: PUSH
5286: LD_INT 4
5288: PUSH
5289: LD_INT 5
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: ST_TO_ADDR
5298: GO 6157
5300: LD_INT 9
5302: DOUBLE
5303: EQUAL
5304: IFTRUE 5308
5306: GO 5334
5308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5309: LD_ADDR_VAR 0 3
5313: PUSH
5314: LD_INT 2
5316: PUSH
5317: LD_INT 3
5319: PUSH
5320: LD_INT 4
5322: PUSH
5323: LD_INT 5
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: ST_TO_ADDR
5332: GO 6157
5334: LD_INT 7
5336: DOUBLE
5337: EQUAL
5338: IFTRUE 5342
5340: GO 5368
5342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5343: LD_ADDR_VAR 0 3
5347: PUSH
5348: LD_INT 2
5350: PUSH
5351: LD_INT 3
5353: PUSH
5354: LD_INT 4
5356: PUSH
5357: LD_INT 5
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: ST_TO_ADDR
5366: GO 6157
5368: LD_INT 12
5370: DOUBLE
5371: EQUAL
5372: IFTRUE 5376
5374: GO 5402
5376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: LD_INT 2
5384: PUSH
5385: LD_INT 3
5387: PUSH
5388: LD_INT 4
5390: PUSH
5391: LD_INT 5
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: ST_TO_ADDR
5400: GO 6157
5402: LD_INT 13
5404: DOUBLE
5405: EQUAL
5406: IFTRUE 5410
5408: GO 5436
5410: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5411: LD_ADDR_VAR 0 3
5415: PUSH
5416: LD_INT 2
5418: PUSH
5419: LD_INT 3
5421: PUSH
5422: LD_INT 4
5424: PUSH
5425: LD_INT 5
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: ST_TO_ADDR
5434: GO 6157
5436: LD_INT 14
5438: DOUBLE
5439: EQUAL
5440: IFTRUE 5444
5442: GO 5462
5444: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5445: LD_ADDR_VAR 0 3
5449: PUSH
5450: LD_INT 4
5452: PUSH
5453: LD_INT 5
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: ST_TO_ADDR
5460: GO 6157
5462: LD_INT 6
5464: DOUBLE
5465: EQUAL
5466: IFTRUE 5470
5468: GO 5488
5470: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5471: LD_ADDR_VAR 0 3
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: LD_INT 5
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: ST_TO_ADDR
5486: GO 6157
5488: LD_INT 10
5490: DOUBLE
5491: EQUAL
5492: IFTRUE 5496
5494: GO 5514
5496: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5497: LD_ADDR_VAR 0 3
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: LD_INT 5
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: ST_TO_ADDR
5512: GO 6157
5514: LD_INT 22
5516: DOUBLE
5517: EQUAL
5518: IFTRUE 5522
5520: GO 5548
5522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5523: LD_ADDR_VAR 0 3
5527: PUSH
5528: LD_INT 11
5530: PUSH
5531: LD_INT 12
5533: PUSH
5534: LD_INT 13
5536: PUSH
5537: LD_INT 14
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: ST_TO_ADDR
5546: GO 6157
5548: LD_INT 23
5550: DOUBLE
5551: EQUAL
5552: IFTRUE 5556
5554: GO 5582
5556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5557: LD_ADDR_VAR 0 3
5561: PUSH
5562: LD_INT 11
5564: PUSH
5565: LD_INT 12
5567: PUSH
5568: LD_INT 13
5570: PUSH
5571: LD_INT 14
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: ST_TO_ADDR
5580: GO 6157
5582: LD_INT 24
5584: DOUBLE
5585: EQUAL
5586: IFTRUE 5590
5588: GO 5616
5590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5591: LD_ADDR_VAR 0 3
5595: PUSH
5596: LD_INT 11
5598: PUSH
5599: LD_INT 12
5601: PUSH
5602: LD_INT 13
5604: PUSH
5605: LD_INT 14
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: ST_TO_ADDR
5614: GO 6157
5616: LD_INT 30
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5624
5622: GO 5650
5624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5625: LD_ADDR_VAR 0 3
5629: PUSH
5630: LD_INT 11
5632: PUSH
5633: LD_INT 12
5635: PUSH
5636: LD_INT 13
5638: PUSH
5639: LD_INT 14
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: ST_TO_ADDR
5648: GO 6157
5650: LD_INT 25
5652: DOUBLE
5653: EQUAL
5654: IFTRUE 5658
5656: GO 5676
5658: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5659: LD_ADDR_VAR 0 3
5663: PUSH
5664: LD_INT 13
5666: PUSH
5667: LD_INT 14
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: ST_TO_ADDR
5674: GO 6157
5676: LD_INT 27
5678: DOUBLE
5679: EQUAL
5680: IFTRUE 5684
5682: GO 5702
5684: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5685: LD_ADDR_VAR 0 3
5689: PUSH
5690: LD_INT 13
5692: PUSH
5693: LD_INT 14
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: ST_TO_ADDR
5700: GO 6157
5702: LD_INT 92
5704: DOUBLE
5705: EQUAL
5706: IFTRUE 5710
5708: GO 5736
5710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5711: LD_ADDR_VAR 0 3
5715: PUSH
5716: LD_INT 11
5718: PUSH
5719: LD_INT 12
5721: PUSH
5722: LD_INT 13
5724: PUSH
5725: LD_INT 14
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: ST_TO_ADDR
5734: GO 6157
5736: LD_INT 28
5738: DOUBLE
5739: EQUAL
5740: IFTRUE 5744
5742: GO 5762
5744: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5745: LD_ADDR_VAR 0 3
5749: PUSH
5750: LD_INT 13
5752: PUSH
5753: LD_INT 14
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: ST_TO_ADDR
5760: GO 6157
5762: LD_INT 29
5764: DOUBLE
5765: EQUAL
5766: IFTRUE 5770
5768: GO 5788
5770: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5771: LD_ADDR_VAR 0 3
5775: PUSH
5776: LD_INT 13
5778: PUSH
5779: LD_INT 14
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: ST_TO_ADDR
5786: GO 6157
5788: LD_INT 31
5790: DOUBLE
5791: EQUAL
5792: IFTRUE 5796
5794: GO 5814
5796: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 13
5804: PUSH
5805: LD_INT 14
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: ST_TO_ADDR
5812: GO 6157
5814: LD_INT 26
5816: DOUBLE
5817: EQUAL
5818: IFTRUE 5822
5820: GO 5840
5822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5823: LD_ADDR_VAR 0 3
5827: PUSH
5828: LD_INT 13
5830: PUSH
5831: LD_INT 14
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: ST_TO_ADDR
5838: GO 6157
5840: LD_INT 42
5842: DOUBLE
5843: EQUAL
5844: IFTRUE 5848
5846: GO 5874
5848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5849: LD_ADDR_VAR 0 3
5853: PUSH
5854: LD_INT 21
5856: PUSH
5857: LD_INT 22
5859: PUSH
5860: LD_INT 23
5862: PUSH
5863: LD_INT 24
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: ST_TO_ADDR
5872: GO 6157
5874: LD_INT 43
5876: DOUBLE
5877: EQUAL
5878: IFTRUE 5882
5880: GO 5908
5882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5883: LD_ADDR_VAR 0 3
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 22
5893: PUSH
5894: LD_INT 23
5896: PUSH
5897: LD_INT 24
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: ST_TO_ADDR
5906: GO 6157
5908: LD_INT 44
5910: DOUBLE
5911: EQUAL
5912: IFTRUE 5916
5914: GO 5942
5916: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5917: LD_ADDR_VAR 0 3
5921: PUSH
5922: LD_INT 21
5924: PUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 23
5930: PUSH
5931: LD_INT 24
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: ST_TO_ADDR
5940: GO 6157
5942: LD_INT 45
5944: DOUBLE
5945: EQUAL
5946: IFTRUE 5950
5948: GO 5976
5950: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5951: LD_ADDR_VAR 0 3
5955: PUSH
5956: LD_INT 21
5958: PUSH
5959: LD_INT 22
5961: PUSH
5962: LD_INT 23
5964: PUSH
5965: LD_INT 24
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: ST_TO_ADDR
5974: GO 6157
5976: LD_INT 49
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 5984
5982: GO 6010
5984: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5985: LD_ADDR_VAR 0 3
5989: PUSH
5990: LD_INT 21
5992: PUSH
5993: LD_INT 22
5995: PUSH
5996: LD_INT 23
5998: PUSH
5999: LD_INT 24
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: ST_TO_ADDR
6008: GO 6157
6010: LD_INT 51
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6044
6018: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6019: LD_ADDR_VAR 0 3
6023: PUSH
6024: LD_INT 21
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_INT 23
6032: PUSH
6033: LD_INT 24
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: ST_TO_ADDR
6042: GO 6157
6044: LD_INT 52
6046: DOUBLE
6047: EQUAL
6048: IFTRUE 6052
6050: GO 6078
6052: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: LD_INT 21
6060: PUSH
6061: LD_INT 22
6063: PUSH
6064: LD_INT 23
6066: PUSH
6067: LD_INT 24
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: ST_TO_ADDR
6076: GO 6157
6078: LD_INT 53
6080: DOUBLE
6081: EQUAL
6082: IFTRUE 6086
6084: GO 6104
6086: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6087: LD_ADDR_VAR 0 3
6091: PUSH
6092: LD_INT 23
6094: PUSH
6095: LD_INT 24
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: ST_TO_ADDR
6102: GO 6157
6104: LD_INT 46
6106: DOUBLE
6107: EQUAL
6108: IFTRUE 6112
6110: GO 6130
6112: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6113: LD_ADDR_VAR 0 3
6117: PUSH
6118: LD_INT 23
6120: PUSH
6121: LD_INT 24
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: ST_TO_ADDR
6128: GO 6157
6130: LD_INT 47
6132: DOUBLE
6133: EQUAL
6134: IFTRUE 6138
6136: GO 6156
6138: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6139: LD_ADDR_VAR 0 3
6143: PUSH
6144: LD_INT 23
6146: PUSH
6147: LD_INT 24
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: ST_TO_ADDR
6154: GO 6157
6156: POP
// result := ( chassis in result ) ;
6157: LD_ADDR_VAR 0 3
6161: PUSH
6162: LD_VAR 0 1
6166: PUSH
6167: LD_VAR 0 3
6171: IN
6172: ST_TO_ADDR
// end ;
6173: LD_VAR 0 3
6177: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6178: LD_INT 0
6180: PPUSH
6181: PPUSH
6182: PPUSH
6183: PPUSH
6184: PPUSH
6185: PPUSH
6186: PPUSH
// result := array ;
6187: LD_ADDR_VAR 0 5
6191: PUSH
6192: LD_VAR 0 1
6196: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6197: LD_VAR 0 1
6201: NOT
6202: PUSH
6203: LD_VAR 0 2
6207: NOT
6208: OR
6209: PUSH
6210: LD_VAR 0 3
6214: NOT
6215: OR
6216: PUSH
6217: LD_VAR 0 2
6221: PUSH
6222: LD_VAR 0 1
6226: GREATER
6227: OR
6228: PUSH
6229: LD_VAR 0 3
6233: PUSH
6234: LD_VAR 0 1
6238: GREATER
6239: OR
6240: IFFALSE 6244
// exit ;
6242: GO 6540
// if direction then
6244: LD_VAR 0 4
6248: IFFALSE 6312
// begin d := 1 ;
6250: LD_ADDR_VAR 0 9
6254: PUSH
6255: LD_INT 1
6257: ST_TO_ADDR
// if i_from > i_to then
6258: LD_VAR 0 2
6262: PUSH
6263: LD_VAR 0 3
6267: GREATER
6268: IFFALSE 6294
// length := ( array - i_from ) + i_to else
6270: LD_ADDR_VAR 0 11
6274: PUSH
6275: LD_VAR 0 1
6279: PUSH
6280: LD_VAR 0 2
6284: MINUS
6285: PUSH
6286: LD_VAR 0 3
6290: PLUS
6291: ST_TO_ADDR
6292: GO 6310
// length := i_to - i_from ;
6294: LD_ADDR_VAR 0 11
6298: PUSH
6299: LD_VAR 0 3
6303: PUSH
6304: LD_VAR 0 2
6308: MINUS
6309: ST_TO_ADDR
// end else
6310: GO 6373
// begin d := - 1 ;
6312: LD_ADDR_VAR 0 9
6316: PUSH
6317: LD_INT 1
6319: NEG
6320: ST_TO_ADDR
// if i_from > i_to then
6321: LD_VAR 0 2
6325: PUSH
6326: LD_VAR 0 3
6330: GREATER
6331: IFFALSE 6351
// length := i_from - i_to else
6333: LD_ADDR_VAR 0 11
6337: PUSH
6338: LD_VAR 0 2
6342: PUSH
6343: LD_VAR 0 3
6347: MINUS
6348: ST_TO_ADDR
6349: GO 6373
// length := ( array - i_to ) + i_from ;
6351: LD_ADDR_VAR 0 11
6355: PUSH
6356: LD_VAR 0 1
6360: PUSH
6361: LD_VAR 0 3
6365: MINUS
6366: PUSH
6367: LD_VAR 0 2
6371: PLUS
6372: ST_TO_ADDR
// end ; if not length then
6373: LD_VAR 0 11
6377: NOT
6378: IFFALSE 6382
// exit ;
6380: GO 6540
// tmp := array ;
6382: LD_ADDR_VAR 0 10
6386: PUSH
6387: LD_VAR 0 1
6391: ST_TO_ADDR
// for i = 1 to length do
6392: LD_ADDR_VAR 0 6
6396: PUSH
6397: DOUBLE
6398: LD_INT 1
6400: DEC
6401: ST_TO_ADDR
6402: LD_VAR 0 11
6406: PUSH
6407: FOR_TO
6408: IFFALSE 6528
// begin for j = 1 to array do
6410: LD_ADDR_VAR 0 7
6414: PUSH
6415: DOUBLE
6416: LD_INT 1
6418: DEC
6419: ST_TO_ADDR
6420: LD_VAR 0 1
6424: PUSH
6425: FOR_TO
6426: IFFALSE 6514
// begin k := j + d ;
6428: LD_ADDR_VAR 0 8
6432: PUSH
6433: LD_VAR 0 7
6437: PUSH
6438: LD_VAR 0 9
6442: PLUS
6443: ST_TO_ADDR
// if k > array then
6444: LD_VAR 0 8
6448: PUSH
6449: LD_VAR 0 1
6453: GREATER
6454: IFFALSE 6464
// k := 1 ;
6456: LD_ADDR_VAR 0 8
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// if not k then
6464: LD_VAR 0 8
6468: NOT
6469: IFFALSE 6481
// k := array ;
6471: LD_ADDR_VAR 0 8
6475: PUSH
6476: LD_VAR 0 1
6480: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6481: LD_ADDR_VAR 0 10
6485: PUSH
6486: LD_VAR 0 10
6490: PPUSH
6491: LD_VAR 0 8
6495: PPUSH
6496: LD_VAR 0 1
6500: PUSH
6501: LD_VAR 0 7
6505: ARRAY
6506: PPUSH
6507: CALL_OW 1
6511: ST_TO_ADDR
// end ;
6512: GO 6425
6514: POP
6515: POP
// array := tmp ;
6516: LD_ADDR_VAR 0 1
6520: PUSH
6521: LD_VAR 0 10
6525: ST_TO_ADDR
// end ;
6526: GO 6407
6528: POP
6529: POP
// result := array ;
6530: LD_ADDR_VAR 0 5
6534: PUSH
6535: LD_VAR 0 1
6539: ST_TO_ADDR
// end ;
6540: LD_VAR 0 5
6544: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6545: LD_INT 0
6547: PPUSH
6548: PPUSH
// result := 0 ;
6549: LD_ADDR_VAR 0 3
6553: PUSH
6554: LD_INT 0
6556: ST_TO_ADDR
// if not array or not value in array then
6557: LD_VAR 0 1
6561: NOT
6562: PUSH
6563: LD_VAR 0 2
6567: PUSH
6568: LD_VAR 0 1
6572: IN
6573: NOT
6574: OR
6575: IFFALSE 6579
// exit ;
6577: GO 6633
// for i = 1 to array do
6579: LD_ADDR_VAR 0 4
6583: PUSH
6584: DOUBLE
6585: LD_INT 1
6587: DEC
6588: ST_TO_ADDR
6589: LD_VAR 0 1
6593: PUSH
6594: FOR_TO
6595: IFFALSE 6631
// if value = array [ i ] then
6597: LD_VAR 0 2
6601: PUSH
6602: LD_VAR 0 1
6606: PUSH
6607: LD_VAR 0 4
6611: ARRAY
6612: EQUAL
6613: IFFALSE 6629
// begin result := i ;
6615: LD_ADDR_VAR 0 3
6619: PUSH
6620: LD_VAR 0 4
6624: ST_TO_ADDR
// exit ;
6625: POP
6626: POP
6627: GO 6633
// end ;
6629: GO 6594
6631: POP
6632: POP
// end ;
6633: LD_VAR 0 3
6637: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6638: LD_INT 0
6640: PPUSH
// vc_chassis := chassis ;
6641: LD_ADDR_OWVAR 37
6645: PUSH
6646: LD_VAR 0 1
6650: ST_TO_ADDR
// vc_engine := engine ;
6651: LD_ADDR_OWVAR 39
6655: PUSH
6656: LD_VAR 0 2
6660: ST_TO_ADDR
// vc_control := control ;
6661: LD_ADDR_OWVAR 38
6665: PUSH
6666: LD_VAR 0 3
6670: ST_TO_ADDR
// vc_weapon := weapon ;
6671: LD_ADDR_OWVAR 40
6675: PUSH
6676: LD_VAR 0 4
6680: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6681: LD_ADDR_OWVAR 41
6685: PUSH
6686: LD_VAR 0 5
6690: ST_TO_ADDR
// end ;
6691: LD_VAR 0 6
6695: RET
// export function WantPlant ( unit ) ; var task ; begin
6696: LD_INT 0
6698: PPUSH
6699: PPUSH
// result := false ;
6700: LD_ADDR_VAR 0 2
6704: PUSH
6705: LD_INT 0
6707: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6708: LD_ADDR_VAR 0 3
6712: PUSH
6713: LD_VAR 0 1
6717: PPUSH
6718: CALL_OW 437
6722: ST_TO_ADDR
// if task then
6723: LD_VAR 0 3
6727: IFFALSE 6755
// if task [ 1 ] [ 1 ] = p then
6729: LD_VAR 0 3
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PUSH
6738: LD_INT 1
6740: ARRAY
6741: PUSH
6742: LD_STRING p
6744: EQUAL
6745: IFFALSE 6755
// result := true ;
6747: LD_ADDR_VAR 0 2
6751: PUSH
6752: LD_INT 1
6754: ST_TO_ADDR
// end ;
6755: LD_VAR 0 2
6759: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6760: LD_INT 0
6762: PPUSH
6763: PPUSH
6764: PPUSH
6765: PPUSH
// if pos < 1 then
6766: LD_VAR 0 2
6770: PUSH
6771: LD_INT 1
6773: LESS
6774: IFFALSE 6778
// exit ;
6776: GO 7081
// if pos = 1 then
6778: LD_VAR 0 2
6782: PUSH
6783: LD_INT 1
6785: EQUAL
6786: IFFALSE 6819
// result := Replace ( arr , pos [ 1 ] , value ) else
6788: LD_ADDR_VAR 0 4
6792: PUSH
6793: LD_VAR 0 1
6797: PPUSH
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 1
6805: ARRAY
6806: PPUSH
6807: LD_VAR 0 3
6811: PPUSH
6812: CALL_OW 1
6816: ST_TO_ADDR
6817: GO 7081
// begin tmp := arr ;
6819: LD_ADDR_VAR 0 6
6823: PUSH
6824: LD_VAR 0 1
6828: ST_TO_ADDR
// s_arr := [ tmp ] ;
6829: LD_ADDR_VAR 0 7
6833: PUSH
6834: LD_VAR 0 6
6838: PUSH
6839: EMPTY
6840: LIST
6841: ST_TO_ADDR
// for i = 1 to pos - 1 do
6842: LD_ADDR_VAR 0 5
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_VAR 0 2
6856: PUSH
6857: LD_INT 1
6859: MINUS
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6907
// begin tmp := tmp [ pos [ i ] ] ;
6864: LD_ADDR_VAR 0 6
6868: PUSH
6869: LD_VAR 0 6
6873: PUSH
6874: LD_VAR 0 2
6878: PUSH
6879: LD_VAR 0 5
6883: ARRAY
6884: ARRAY
6885: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6886: LD_ADDR_VAR 0 7
6890: PUSH
6891: LD_VAR 0 7
6895: PUSH
6896: LD_VAR 0 6
6900: PUSH
6901: EMPTY
6902: LIST
6903: ADD
6904: ST_TO_ADDR
// end ;
6905: GO 6861
6907: POP
6908: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6909: LD_ADDR_VAR 0 6
6913: PUSH
6914: LD_VAR 0 6
6918: PPUSH
6919: LD_VAR 0 2
6923: PUSH
6924: LD_VAR 0 2
6928: ARRAY
6929: PPUSH
6930: LD_VAR 0 3
6934: PPUSH
6935: CALL_OW 1
6939: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6940: LD_ADDR_VAR 0 7
6944: PUSH
6945: LD_VAR 0 7
6949: PPUSH
6950: LD_VAR 0 7
6954: PPUSH
6955: LD_VAR 0 6
6959: PPUSH
6960: CALL_OW 1
6964: ST_TO_ADDR
// for i = s_arr downto 2 do
6965: LD_ADDR_VAR 0 5
6969: PUSH
6970: DOUBLE
6971: LD_VAR 0 7
6975: INC
6976: ST_TO_ADDR
6977: LD_INT 2
6979: PUSH
6980: FOR_DOWNTO
6981: IFFALSE 7065
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6983: LD_ADDR_VAR 0 6
6987: PUSH
6988: LD_VAR 0 7
6992: PUSH
6993: LD_VAR 0 5
6997: PUSH
6998: LD_INT 1
7000: MINUS
7001: ARRAY
7002: PPUSH
7003: LD_VAR 0 2
7007: PUSH
7008: LD_VAR 0 5
7012: PUSH
7013: LD_INT 1
7015: MINUS
7016: ARRAY
7017: PPUSH
7018: LD_VAR 0 7
7022: PUSH
7023: LD_VAR 0 5
7027: ARRAY
7028: PPUSH
7029: CALL_OW 1
7033: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7034: LD_ADDR_VAR 0 7
7038: PUSH
7039: LD_VAR 0 7
7043: PPUSH
7044: LD_VAR 0 5
7048: PUSH
7049: LD_INT 1
7051: MINUS
7052: PPUSH
7053: LD_VAR 0 6
7057: PPUSH
7058: CALL_OW 1
7062: ST_TO_ADDR
// end ;
7063: GO 6980
7065: POP
7066: POP
// result := s_arr [ 1 ] ;
7067: LD_ADDR_VAR 0 4
7071: PUSH
7072: LD_VAR 0 7
7076: PUSH
7077: LD_INT 1
7079: ARRAY
7080: ST_TO_ADDR
// end ; end ;
7081: LD_VAR 0 4
7085: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7086: LD_INT 0
7088: PPUSH
7089: PPUSH
// if not list then
7090: LD_VAR 0 1
7094: NOT
7095: IFFALSE 7099
// exit ;
7097: GO 7190
// i := list [ pos1 ] ;
7099: LD_ADDR_VAR 0 5
7103: PUSH
7104: LD_VAR 0 1
7108: PUSH
7109: LD_VAR 0 2
7113: ARRAY
7114: ST_TO_ADDR
// if not i then
7115: LD_VAR 0 5
7119: NOT
7120: IFFALSE 7124
// exit ;
7122: GO 7190
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7124: LD_ADDR_VAR 0 1
7128: PUSH
7129: LD_VAR 0 1
7133: PPUSH
7134: LD_VAR 0 2
7138: PPUSH
7139: LD_VAR 0 1
7143: PUSH
7144: LD_VAR 0 3
7148: ARRAY
7149: PPUSH
7150: CALL_OW 1
7154: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7155: LD_ADDR_VAR 0 1
7159: PUSH
7160: LD_VAR 0 1
7164: PPUSH
7165: LD_VAR 0 3
7169: PPUSH
7170: LD_VAR 0 5
7174: PPUSH
7175: CALL_OW 1
7179: ST_TO_ADDR
// result := list ;
7180: LD_ADDR_VAR 0 4
7184: PUSH
7185: LD_VAR 0 1
7189: ST_TO_ADDR
// end ;
7190: LD_VAR 0 4
7194: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7195: LD_INT 0
7197: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7198: LD_ADDR_VAR 0 5
7202: PUSH
7203: LD_VAR 0 1
7207: PPUSH
7208: CALL_OW 250
7212: PPUSH
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 251
7222: PPUSH
7223: LD_VAR 0 2
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: LD_VAR 0 4
7237: PPUSH
7238: CALL 7616 0 5
7242: ST_TO_ADDR
// end ;
7243: LD_VAR 0 5
7247: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7248: LD_INT 0
7250: PPUSH
7251: PPUSH
7252: PPUSH
7253: PPUSH
// if not list or not unit then
7254: LD_VAR 0 2
7258: NOT
7259: PUSH
7260: LD_VAR 0 1
7264: NOT
7265: OR
7266: IFFALSE 7270
// exit ;
7268: GO 7611
// result := [ ] ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: EMPTY
7276: ST_TO_ADDR
// for i in list do
7277: LD_ADDR_VAR 0 6
7281: PUSH
7282: LD_VAR 0 2
7286: PUSH
7287: FOR_IN
7288: IFFALSE 7506
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7290: LD_ADDR_VAR 0 8
7294: PUSH
7295: LD_VAR 0 1
7299: PPUSH
7300: LD_VAR 0 6
7304: PUSH
7305: LD_INT 1
7307: ARRAY
7308: PPUSH
7309: LD_VAR 0 6
7313: PUSH
7314: LD_INT 2
7316: ARRAY
7317: PPUSH
7318: CALL_OW 297
7322: ST_TO_ADDR
// if not Count ( result ) then
7323: LD_VAR 0 5
7327: PPUSH
7328: CALL 3900 0 1
7332: NOT
7333: IFFALSE 7366
// begin result := Join ( result , [ i , tmp ] ) ;
7335: LD_ADDR_VAR 0 5
7339: PUSH
7340: LD_VAR 0 5
7344: PPUSH
7345: LD_VAR 0 6
7349: PUSH
7350: LD_VAR 0 8
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PPUSH
7359: CALL 39581 0 2
7363: ST_TO_ADDR
// continue ;
7364: GO 7287
// end ; if result [ result ] [ 2 ] <= tmp then
7366: LD_VAR 0 5
7370: PUSH
7371: LD_VAR 0 5
7375: ARRAY
7376: PUSH
7377: LD_INT 2
7379: ARRAY
7380: PUSH
7381: LD_VAR 0 8
7385: LESSEQUAL
7386: IFFALSE 7419
// result := Join ( result , [ i , tmp ] ) else
7388: LD_ADDR_VAR 0 5
7392: PUSH
7393: LD_VAR 0 5
7397: PPUSH
7398: LD_VAR 0 6
7402: PUSH
7403: LD_VAR 0 8
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PPUSH
7412: CALL 39581 0 2
7416: ST_TO_ADDR
7417: GO 7504
// begin for j := 1 to Count ( result ) do
7419: LD_ADDR_VAR 0 7
7423: PUSH
7424: DOUBLE
7425: LD_INT 1
7427: DEC
7428: ST_TO_ADDR
7429: LD_VAR 0 5
7433: PPUSH
7434: CALL 3900 0 1
7438: PUSH
7439: FOR_TO
7440: IFFALSE 7502
// begin if tmp < result [ j ] [ 2 ] then
7442: LD_VAR 0 8
7446: PUSH
7447: LD_VAR 0 5
7451: PUSH
7452: LD_VAR 0 7
7456: ARRAY
7457: PUSH
7458: LD_INT 2
7460: ARRAY
7461: LESS
7462: IFFALSE 7500
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7464: LD_ADDR_VAR 0 5
7468: PUSH
7469: LD_VAR 0 5
7473: PPUSH
7474: LD_VAR 0 7
7478: PPUSH
7479: LD_VAR 0 6
7483: PUSH
7484: LD_VAR 0 8
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 2
7497: ST_TO_ADDR
// break ;
7498: GO 7502
// end ; end ;
7500: GO 7439
7502: POP
7503: POP
// end ; end ;
7504: GO 7287
7506: POP
7507: POP
// if result and not asc then
7508: LD_VAR 0 5
7512: PUSH
7513: LD_VAR 0 3
7517: NOT
7518: AND
7519: IFFALSE 7536
// result := ReverseArray ( result ) ;
7521: LD_ADDR_VAR 0 5
7525: PUSH
7526: LD_VAR 0 5
7530: PPUSH
7531: CALL 34776 0 1
7535: ST_TO_ADDR
// tmp := [ ] ;
7536: LD_ADDR_VAR 0 8
7540: PUSH
7541: EMPTY
7542: ST_TO_ADDR
// if mode then
7543: LD_VAR 0 4
7547: IFFALSE 7611
// begin for i := 1 to result do
7549: LD_ADDR_VAR 0 6
7553: PUSH
7554: DOUBLE
7555: LD_INT 1
7557: DEC
7558: ST_TO_ADDR
7559: LD_VAR 0 5
7563: PUSH
7564: FOR_TO
7565: IFFALSE 7599
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7567: LD_ADDR_VAR 0 8
7571: PUSH
7572: LD_VAR 0 8
7576: PPUSH
7577: LD_VAR 0 5
7581: PUSH
7582: LD_VAR 0 6
7586: ARRAY
7587: PUSH
7588: LD_INT 1
7590: ARRAY
7591: PPUSH
7592: CALL 39581 0 2
7596: ST_TO_ADDR
7597: GO 7564
7599: POP
7600: POP
// result := tmp ;
7601: LD_ADDR_VAR 0 5
7605: PUSH
7606: LD_VAR 0 8
7610: ST_TO_ADDR
// end ; end ;
7611: LD_VAR 0 5
7615: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7616: LD_INT 0
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
// if not list then
7622: LD_VAR 0 3
7626: NOT
7627: IFFALSE 7631
// exit ;
7629: GO 8019
// result := [ ] ;
7631: LD_ADDR_VAR 0 6
7635: PUSH
7636: EMPTY
7637: ST_TO_ADDR
// for i in list do
7638: LD_ADDR_VAR 0 7
7642: PUSH
7643: LD_VAR 0 3
7647: PUSH
7648: FOR_IN
7649: IFFALSE 7851
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7651: LD_ADDR_VAR 0 9
7655: PUSH
7656: LD_VAR 0 7
7660: PPUSH
7661: LD_VAR 0 1
7665: PPUSH
7666: LD_VAR 0 2
7670: PPUSH
7671: CALL_OW 297
7675: ST_TO_ADDR
// if not result then
7676: LD_VAR 0 6
7680: NOT
7681: IFFALSE 7707
// result := [ [ i , tmp ] ] else
7683: LD_ADDR_VAR 0 6
7687: PUSH
7688: LD_VAR 0 7
7692: PUSH
7693: LD_VAR 0 9
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: EMPTY
7703: LIST
7704: ST_TO_ADDR
7705: GO 7849
// begin if result [ result ] [ 2 ] <= tmp then
7707: LD_VAR 0 6
7711: PUSH
7712: LD_VAR 0 6
7716: ARRAY
7717: PUSH
7718: LD_INT 2
7720: ARRAY
7721: PUSH
7722: LD_VAR 0 9
7726: LESSEQUAL
7727: IFFALSE 7769
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7729: LD_ADDR_VAR 0 6
7733: PUSH
7734: LD_VAR 0 6
7738: PPUSH
7739: LD_VAR 0 6
7743: PUSH
7744: LD_INT 1
7746: PLUS
7747: PPUSH
7748: LD_VAR 0 7
7752: PUSH
7753: LD_VAR 0 9
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PPUSH
7762: CALL_OW 2
7766: ST_TO_ADDR
7767: GO 7849
// for j := 1 to result do
7769: LD_ADDR_VAR 0 8
7773: PUSH
7774: DOUBLE
7775: LD_INT 1
7777: DEC
7778: ST_TO_ADDR
7779: LD_VAR 0 6
7783: PUSH
7784: FOR_TO
7785: IFFALSE 7847
// begin if tmp < result [ j ] [ 2 ] then
7787: LD_VAR 0 9
7791: PUSH
7792: LD_VAR 0 6
7796: PUSH
7797: LD_VAR 0 8
7801: ARRAY
7802: PUSH
7803: LD_INT 2
7805: ARRAY
7806: LESS
7807: IFFALSE 7845
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7809: LD_ADDR_VAR 0 6
7813: PUSH
7814: LD_VAR 0 6
7818: PPUSH
7819: LD_VAR 0 8
7823: PPUSH
7824: LD_VAR 0 7
7828: PUSH
7829: LD_VAR 0 9
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 2
7842: ST_TO_ADDR
// break ;
7843: GO 7847
// end ; end ;
7845: GO 7784
7847: POP
7848: POP
// end ; end ;
7849: GO 7648
7851: POP
7852: POP
// if result and not asc then
7853: LD_VAR 0 6
7857: PUSH
7858: LD_VAR 0 4
7862: NOT
7863: AND
7864: IFFALSE 7939
// begin tmp := result ;
7866: LD_ADDR_VAR 0 9
7870: PUSH
7871: LD_VAR 0 6
7875: ST_TO_ADDR
// for i = tmp downto 1 do
7876: LD_ADDR_VAR 0 7
7880: PUSH
7881: DOUBLE
7882: LD_VAR 0 9
7886: INC
7887: ST_TO_ADDR
7888: LD_INT 1
7890: PUSH
7891: FOR_DOWNTO
7892: IFFALSE 7937
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7894: LD_ADDR_VAR 0 6
7898: PUSH
7899: LD_VAR 0 6
7903: PPUSH
7904: LD_VAR 0 9
7908: PUSH
7909: LD_VAR 0 7
7913: MINUS
7914: PUSH
7915: LD_INT 1
7917: PLUS
7918: PPUSH
7919: LD_VAR 0 9
7923: PUSH
7924: LD_VAR 0 7
7928: ARRAY
7929: PPUSH
7930: CALL_OW 1
7934: ST_TO_ADDR
7935: GO 7891
7937: POP
7938: POP
// end ; tmp := [ ] ;
7939: LD_ADDR_VAR 0 9
7943: PUSH
7944: EMPTY
7945: ST_TO_ADDR
// if mode then
7946: LD_VAR 0 5
7950: IFFALSE 8019
// begin for i = 1 to result do
7952: LD_ADDR_VAR 0 7
7956: PUSH
7957: DOUBLE
7958: LD_INT 1
7960: DEC
7961: ST_TO_ADDR
7962: LD_VAR 0 6
7966: PUSH
7967: FOR_TO
7968: IFFALSE 8007
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7970: LD_ADDR_VAR 0 9
7974: PUSH
7975: LD_VAR 0 9
7979: PPUSH
7980: LD_VAR 0 7
7984: PPUSH
7985: LD_VAR 0 6
7989: PUSH
7990: LD_VAR 0 7
7994: ARRAY
7995: PUSH
7996: LD_INT 1
7998: ARRAY
7999: PPUSH
8000: CALL_OW 1
8004: ST_TO_ADDR
8005: GO 7967
8007: POP
8008: POP
// result := tmp ;
8009: LD_ADDR_VAR 0 6
8013: PUSH
8014: LD_VAR 0 9
8018: ST_TO_ADDR
// end ; end ;
8019: LD_VAR 0 6
8023: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8024: LD_INT 0
8026: PPUSH
8027: PPUSH
8028: PPUSH
8029: PPUSH
8030: PPUSH
8031: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8032: LD_ADDR_VAR 0 5
8036: PUSH
8037: LD_INT 0
8039: PUSH
8040: LD_INT 0
8042: PUSH
8043: LD_INT 0
8045: PUSH
8046: EMPTY
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: ST_TO_ADDR
// if not x or not y then
8054: LD_VAR 0 2
8058: NOT
8059: PUSH
8060: LD_VAR 0 3
8064: NOT
8065: OR
8066: IFFALSE 8070
// exit ;
8068: GO 9720
// if not range then
8070: LD_VAR 0 4
8074: NOT
8075: IFFALSE 8085
// range := 10 ;
8077: LD_ADDR_VAR 0 4
8081: PUSH
8082: LD_INT 10
8084: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8085: LD_ADDR_VAR 0 8
8089: PUSH
8090: LD_INT 81
8092: PUSH
8093: LD_VAR 0 1
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 92
8104: PUSH
8105: LD_VAR 0 2
8109: PUSH
8110: LD_VAR 0 3
8114: PUSH
8115: LD_VAR 0 4
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 3
8128: PUSH
8129: LD_INT 21
8131: PUSH
8132: LD_INT 3
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: LIST
8147: PPUSH
8148: CALL_OW 69
8152: ST_TO_ADDR
// if not tmp then
8153: LD_VAR 0 8
8157: NOT
8158: IFFALSE 8162
// exit ;
8160: GO 9720
// for i in tmp do
8162: LD_ADDR_VAR 0 6
8166: PUSH
8167: LD_VAR 0 8
8171: PUSH
8172: FOR_IN
8173: IFFALSE 9695
// begin points := [ 0 , 0 , 0 ] ;
8175: LD_ADDR_VAR 0 9
8179: PUSH
8180: LD_INT 0
8182: PUSH
8183: LD_INT 0
8185: PUSH
8186: LD_INT 0
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: LIST
8193: ST_TO_ADDR
// bpoints := 1 ;
8194: LD_ADDR_VAR 0 10
8198: PUSH
8199: LD_INT 1
8201: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8202: LD_VAR 0 6
8206: PPUSH
8207: CALL_OW 247
8211: PUSH
8212: LD_INT 1
8214: DOUBLE
8215: EQUAL
8216: IFTRUE 8220
8218: GO 8798
8220: POP
// begin if GetClass ( i ) = 1 then
8221: LD_VAR 0 6
8225: PPUSH
8226: CALL_OW 257
8230: PUSH
8231: LD_INT 1
8233: EQUAL
8234: IFFALSE 8255
// points := [ 10 , 5 , 3 ] ;
8236: LD_ADDR_VAR 0 9
8240: PUSH
8241: LD_INT 10
8243: PUSH
8244: LD_INT 5
8246: PUSH
8247: LD_INT 3
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8255: LD_VAR 0 6
8259: PPUSH
8260: CALL_OW 257
8264: PUSH
8265: LD_INT 2
8267: PUSH
8268: LD_INT 3
8270: PUSH
8271: LD_INT 4
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: LIST
8278: IN
8279: IFFALSE 8300
// points := [ 3 , 2 , 1 ] ;
8281: LD_ADDR_VAR 0 9
8285: PUSH
8286: LD_INT 3
8288: PUSH
8289: LD_INT 2
8291: PUSH
8292: LD_INT 1
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8300: LD_VAR 0 6
8304: PPUSH
8305: CALL_OW 257
8309: PUSH
8310: LD_INT 5
8312: EQUAL
8313: IFFALSE 8334
// points := [ 130 , 5 , 2 ] ;
8315: LD_ADDR_VAR 0 9
8319: PUSH
8320: LD_INT 130
8322: PUSH
8323: LD_INT 5
8325: PUSH
8326: LD_INT 2
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8334: LD_VAR 0 6
8338: PPUSH
8339: CALL_OW 257
8343: PUSH
8344: LD_INT 8
8346: EQUAL
8347: IFFALSE 8368
// points := [ 35 , 35 , 30 ] ;
8349: LD_ADDR_VAR 0 9
8353: PUSH
8354: LD_INT 35
8356: PUSH
8357: LD_INT 35
8359: PUSH
8360: LD_INT 30
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8368: LD_VAR 0 6
8372: PPUSH
8373: CALL_OW 257
8377: PUSH
8378: LD_INT 9
8380: EQUAL
8381: IFFALSE 8402
// points := [ 20 , 55 , 40 ] ;
8383: LD_ADDR_VAR 0 9
8387: PUSH
8388: LD_INT 20
8390: PUSH
8391: LD_INT 55
8393: PUSH
8394: LD_INT 40
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8402: LD_VAR 0 6
8406: PPUSH
8407: CALL_OW 257
8411: PUSH
8412: LD_INT 12
8414: PUSH
8415: LD_INT 16
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: IN
8422: IFFALSE 8443
// points := [ 5 , 3 , 2 ] ;
8424: LD_ADDR_VAR 0 9
8428: PUSH
8429: LD_INT 5
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: LIST
8442: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8443: LD_VAR 0 6
8447: PPUSH
8448: CALL_OW 257
8452: PUSH
8453: LD_INT 17
8455: EQUAL
8456: IFFALSE 8477
// points := [ 100 , 50 , 75 ] ;
8458: LD_ADDR_VAR 0 9
8462: PUSH
8463: LD_INT 100
8465: PUSH
8466: LD_INT 50
8468: PUSH
8469: LD_INT 75
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: LIST
8476: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8477: LD_VAR 0 6
8481: PPUSH
8482: CALL_OW 257
8486: PUSH
8487: LD_INT 15
8489: EQUAL
8490: IFFALSE 8511
// points := [ 10 , 5 , 3 ] ;
8492: LD_ADDR_VAR 0 9
8496: PUSH
8497: LD_INT 10
8499: PUSH
8500: LD_INT 5
8502: PUSH
8503: LD_INT 3
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8511: LD_VAR 0 6
8515: PPUSH
8516: CALL_OW 257
8520: PUSH
8521: LD_INT 14
8523: EQUAL
8524: IFFALSE 8545
// points := [ 10 , 0 , 0 ] ;
8526: LD_ADDR_VAR 0 9
8530: PUSH
8531: LD_INT 10
8533: PUSH
8534: LD_INT 0
8536: PUSH
8537: LD_INT 0
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: LIST
8544: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8545: LD_VAR 0 6
8549: PPUSH
8550: CALL_OW 257
8554: PUSH
8555: LD_INT 11
8557: EQUAL
8558: IFFALSE 8579
// points := [ 30 , 10 , 5 ] ;
8560: LD_ADDR_VAR 0 9
8564: PUSH
8565: LD_INT 30
8567: PUSH
8568: LD_INT 10
8570: PUSH
8571: LD_INT 5
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: LIST
8578: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8579: LD_VAR 0 1
8583: PPUSH
8584: LD_INT 5
8586: PPUSH
8587: CALL_OW 321
8591: PUSH
8592: LD_INT 2
8594: EQUAL
8595: IFFALSE 8612
// bpoints := bpoints * 1.8 ;
8597: LD_ADDR_VAR 0 10
8601: PUSH
8602: LD_VAR 0 10
8606: PUSH
8607: LD_REAL  1.80000000000000E+0000
8610: MUL
8611: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8612: LD_VAR 0 6
8616: PPUSH
8617: CALL_OW 257
8621: PUSH
8622: LD_INT 1
8624: PUSH
8625: LD_INT 2
8627: PUSH
8628: LD_INT 3
8630: PUSH
8631: LD_INT 4
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: IN
8640: PUSH
8641: LD_VAR 0 1
8645: PPUSH
8646: LD_INT 51
8648: PPUSH
8649: CALL_OW 321
8653: PUSH
8654: LD_INT 2
8656: EQUAL
8657: AND
8658: IFFALSE 8675
// bpoints := bpoints * 1.2 ;
8660: LD_ADDR_VAR 0 10
8664: PUSH
8665: LD_VAR 0 10
8669: PUSH
8670: LD_REAL  1.20000000000000E+0000
8673: MUL
8674: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8675: LD_VAR 0 6
8679: PPUSH
8680: CALL_OW 257
8684: PUSH
8685: LD_INT 5
8687: PUSH
8688: LD_INT 7
8690: PUSH
8691: LD_INT 9
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: IN
8699: PUSH
8700: LD_VAR 0 1
8704: PPUSH
8705: LD_INT 52
8707: PPUSH
8708: CALL_OW 321
8712: PUSH
8713: LD_INT 2
8715: EQUAL
8716: AND
8717: IFFALSE 8734
// bpoints := bpoints * 1.5 ;
8719: LD_ADDR_VAR 0 10
8723: PUSH
8724: LD_VAR 0 10
8728: PUSH
8729: LD_REAL  1.50000000000000E+0000
8732: MUL
8733: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8734: LD_VAR 0 1
8738: PPUSH
8739: LD_INT 66
8741: PPUSH
8742: CALL_OW 321
8746: PUSH
8747: LD_INT 2
8749: EQUAL
8750: IFFALSE 8767
// bpoints := bpoints * 1.1 ;
8752: LD_ADDR_VAR 0 10
8756: PUSH
8757: LD_VAR 0 10
8761: PUSH
8762: LD_REAL  1.10000000000000E+0000
8765: MUL
8766: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8767: LD_ADDR_VAR 0 10
8771: PUSH
8772: LD_VAR 0 10
8776: PUSH
8777: LD_VAR 0 6
8781: PPUSH
8782: LD_INT 1
8784: PPUSH
8785: CALL_OW 259
8789: PUSH
8790: LD_REAL  1.15000000000000E+0000
8793: MUL
8794: MUL
8795: ST_TO_ADDR
// end ; unit_vehicle :
8796: GO 9624
8798: LD_INT 2
8800: DOUBLE
8801: EQUAL
8802: IFTRUE 8806
8804: GO 9612
8806: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8807: LD_VAR 0 6
8811: PPUSH
8812: CALL_OW 264
8816: PUSH
8817: LD_INT 2
8819: PUSH
8820: LD_INT 42
8822: PUSH
8823: LD_INT 24
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: LIST
8830: IN
8831: IFFALSE 8852
// points := [ 25 , 5 , 3 ] ;
8833: LD_ADDR_VAR 0 9
8837: PUSH
8838: LD_INT 25
8840: PUSH
8841: LD_INT 5
8843: PUSH
8844: LD_INT 3
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8852: LD_VAR 0 6
8856: PPUSH
8857: CALL_OW 264
8861: PUSH
8862: LD_INT 4
8864: PUSH
8865: LD_INT 43
8867: PUSH
8868: LD_INT 25
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: LIST
8875: IN
8876: IFFALSE 8897
// points := [ 40 , 15 , 5 ] ;
8878: LD_ADDR_VAR 0 9
8882: PUSH
8883: LD_INT 40
8885: PUSH
8886: LD_INT 15
8888: PUSH
8889: LD_INT 5
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: LIST
8896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8897: LD_VAR 0 6
8901: PPUSH
8902: CALL_OW 264
8906: PUSH
8907: LD_INT 3
8909: PUSH
8910: LD_INT 23
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: IN
8917: IFFALSE 8938
// points := [ 7 , 25 , 8 ] ;
8919: LD_ADDR_VAR 0 9
8923: PUSH
8924: LD_INT 7
8926: PUSH
8927: LD_INT 25
8929: PUSH
8930: LD_INT 8
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: LIST
8937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8938: LD_VAR 0 6
8942: PPUSH
8943: CALL_OW 264
8947: PUSH
8948: LD_INT 5
8950: PUSH
8951: LD_INT 27
8953: PUSH
8954: LD_INT 44
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: LIST
8961: IN
8962: IFFALSE 8983
// points := [ 14 , 50 , 16 ] ;
8964: LD_ADDR_VAR 0 9
8968: PUSH
8969: LD_INT 14
8971: PUSH
8972: LD_INT 50
8974: PUSH
8975: LD_INT 16
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: LIST
8982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8983: LD_VAR 0 6
8987: PPUSH
8988: CALL_OW 264
8992: PUSH
8993: LD_INT 6
8995: PUSH
8996: LD_INT 46
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: IN
9003: IFFALSE 9024
// points := [ 32 , 120 , 70 ] ;
9005: LD_ADDR_VAR 0 9
9009: PUSH
9010: LD_INT 32
9012: PUSH
9013: LD_INT 120
9015: PUSH
9016: LD_INT 70
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9024: LD_VAR 0 6
9028: PPUSH
9029: CALL_OW 264
9033: PUSH
9034: LD_INT 7
9036: PUSH
9037: LD_INT 28
9039: PUSH
9040: LD_INT 45
9042: PUSH
9043: LD_INT 92
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: IN
9052: IFFALSE 9073
// points := [ 35 , 20 , 45 ] ;
9054: LD_ADDR_VAR 0 9
9058: PUSH
9059: LD_INT 35
9061: PUSH
9062: LD_INT 20
9064: PUSH
9065: LD_INT 45
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9073: LD_VAR 0 6
9077: PPUSH
9078: CALL_OW 264
9082: PUSH
9083: LD_INT 47
9085: PUSH
9086: EMPTY
9087: LIST
9088: IN
9089: IFFALSE 9110
// points := [ 67 , 45 , 75 ] ;
9091: LD_ADDR_VAR 0 9
9095: PUSH
9096: LD_INT 67
9098: PUSH
9099: LD_INT 45
9101: PUSH
9102: LD_INT 75
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9110: LD_VAR 0 6
9114: PPUSH
9115: CALL_OW 264
9119: PUSH
9120: LD_INT 26
9122: PUSH
9123: EMPTY
9124: LIST
9125: IN
9126: IFFALSE 9147
// points := [ 120 , 30 , 80 ] ;
9128: LD_ADDR_VAR 0 9
9132: PUSH
9133: LD_INT 120
9135: PUSH
9136: LD_INT 30
9138: PUSH
9139: LD_INT 80
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9147: LD_VAR 0 6
9151: PPUSH
9152: CALL_OW 264
9156: PUSH
9157: LD_INT 22
9159: PUSH
9160: EMPTY
9161: LIST
9162: IN
9163: IFFALSE 9184
// points := [ 40 , 1 , 1 ] ;
9165: LD_ADDR_VAR 0 9
9169: PUSH
9170: LD_INT 40
9172: PUSH
9173: LD_INT 1
9175: PUSH
9176: LD_INT 1
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: LIST
9183: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9184: LD_VAR 0 6
9188: PPUSH
9189: CALL_OW 264
9193: PUSH
9194: LD_INT 29
9196: PUSH
9197: EMPTY
9198: LIST
9199: IN
9200: IFFALSE 9221
// points := [ 70 , 200 , 400 ] ;
9202: LD_ADDR_VAR 0 9
9206: PUSH
9207: LD_INT 70
9209: PUSH
9210: LD_INT 200
9212: PUSH
9213: LD_INT 400
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9221: LD_VAR 0 6
9225: PPUSH
9226: CALL_OW 264
9230: PUSH
9231: LD_INT 14
9233: PUSH
9234: LD_INT 53
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: IN
9241: IFFALSE 9262
// points := [ 40 , 10 , 20 ] ;
9243: LD_ADDR_VAR 0 9
9247: PUSH
9248: LD_INT 40
9250: PUSH
9251: LD_INT 10
9253: PUSH
9254: LD_INT 20
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: LIST
9261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9262: LD_VAR 0 6
9266: PPUSH
9267: CALL_OW 264
9271: PUSH
9272: LD_INT 9
9274: PUSH
9275: EMPTY
9276: LIST
9277: IN
9278: IFFALSE 9299
// points := [ 5 , 70 , 20 ] ;
9280: LD_ADDR_VAR 0 9
9284: PUSH
9285: LD_INT 5
9287: PUSH
9288: LD_INT 70
9290: PUSH
9291: LD_INT 20
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9299: LD_VAR 0 6
9303: PPUSH
9304: CALL_OW 264
9308: PUSH
9309: LD_INT 10
9311: PUSH
9312: EMPTY
9313: LIST
9314: IN
9315: IFFALSE 9336
// points := [ 35 , 110 , 70 ] ;
9317: LD_ADDR_VAR 0 9
9321: PUSH
9322: LD_INT 35
9324: PUSH
9325: LD_INT 110
9327: PUSH
9328: LD_INT 70
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9336: LD_VAR 0 6
9340: PPUSH
9341: CALL_OW 265
9345: PUSH
9346: LD_INT 25
9348: EQUAL
9349: IFFALSE 9370
// points := [ 80 , 65 , 100 ] ;
9351: LD_ADDR_VAR 0 9
9355: PUSH
9356: LD_INT 80
9358: PUSH
9359: LD_INT 65
9361: PUSH
9362: LD_INT 100
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9370: LD_VAR 0 6
9374: PPUSH
9375: CALL_OW 263
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: IFFALSE 9418
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9385: LD_ADDR_VAR 0 10
9389: PUSH
9390: LD_VAR 0 10
9394: PUSH
9395: LD_VAR 0 6
9399: PPUSH
9400: CALL_OW 311
9404: PPUSH
9405: LD_INT 3
9407: PPUSH
9408: CALL_OW 259
9412: PUSH
9413: LD_INT 4
9415: MUL
9416: MUL
9417: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9418: LD_VAR 0 6
9422: PPUSH
9423: CALL_OW 263
9427: PUSH
9428: LD_INT 2
9430: EQUAL
9431: IFFALSE 9482
// begin j := IsControledBy ( i ) ;
9433: LD_ADDR_VAR 0 7
9437: PUSH
9438: LD_VAR 0 6
9442: PPUSH
9443: CALL_OW 312
9447: ST_TO_ADDR
// if j then
9448: LD_VAR 0 7
9452: IFFALSE 9482
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9454: LD_ADDR_VAR 0 10
9458: PUSH
9459: LD_VAR 0 10
9463: PUSH
9464: LD_VAR 0 7
9468: PPUSH
9469: LD_INT 3
9471: PPUSH
9472: CALL_OW 259
9476: PUSH
9477: LD_INT 3
9479: MUL
9480: MUL
9481: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9482: LD_VAR 0 6
9486: PPUSH
9487: CALL_OW 264
9491: PUSH
9492: LD_INT 5
9494: PUSH
9495: LD_INT 6
9497: PUSH
9498: LD_INT 46
9500: PUSH
9501: LD_INT 44
9503: PUSH
9504: LD_INT 47
9506: PUSH
9507: LD_INT 45
9509: PUSH
9510: LD_INT 28
9512: PUSH
9513: LD_INT 7
9515: PUSH
9516: LD_INT 27
9518: PUSH
9519: LD_INT 29
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: IN
9534: PUSH
9535: LD_VAR 0 1
9539: PPUSH
9540: LD_INT 52
9542: PPUSH
9543: CALL_OW 321
9547: PUSH
9548: LD_INT 2
9550: EQUAL
9551: AND
9552: IFFALSE 9569
// bpoints := bpoints * 1.2 ;
9554: LD_ADDR_VAR 0 10
9558: PUSH
9559: LD_VAR 0 10
9563: PUSH
9564: LD_REAL  1.20000000000000E+0000
9567: MUL
9568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9569: LD_VAR 0 6
9573: PPUSH
9574: CALL_OW 264
9578: PUSH
9579: LD_INT 6
9581: PUSH
9582: LD_INT 46
9584: PUSH
9585: LD_INT 47
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: IN
9593: IFFALSE 9610
// bpoints := bpoints * 1.2 ;
9595: LD_ADDR_VAR 0 10
9599: PUSH
9600: LD_VAR 0 10
9604: PUSH
9605: LD_REAL  1.20000000000000E+0000
9608: MUL
9609: ST_TO_ADDR
// end ; unit_building :
9610: GO 9624
9612: LD_INT 3
9614: DOUBLE
9615: EQUAL
9616: IFTRUE 9620
9618: GO 9623
9620: POP
// ; end ;
9621: GO 9624
9623: POP
// for j = 1 to 3 do
9624: LD_ADDR_VAR 0 7
9628: PUSH
9629: DOUBLE
9630: LD_INT 1
9632: DEC
9633: ST_TO_ADDR
9634: LD_INT 3
9636: PUSH
9637: FOR_TO
9638: IFFALSE 9691
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9640: LD_ADDR_VAR 0 5
9644: PUSH
9645: LD_VAR 0 5
9649: PPUSH
9650: LD_VAR 0 7
9654: PPUSH
9655: LD_VAR 0 5
9659: PUSH
9660: LD_VAR 0 7
9664: ARRAY
9665: PUSH
9666: LD_VAR 0 9
9670: PUSH
9671: LD_VAR 0 7
9675: ARRAY
9676: PUSH
9677: LD_VAR 0 10
9681: MUL
9682: PLUS
9683: PPUSH
9684: CALL_OW 1
9688: ST_TO_ADDR
9689: GO 9637
9691: POP
9692: POP
// end ;
9693: GO 8172
9695: POP
9696: POP
// result := Replace ( result , 4 , tmp ) ;
9697: LD_ADDR_VAR 0 5
9701: PUSH
9702: LD_VAR 0 5
9706: PPUSH
9707: LD_INT 4
9709: PPUSH
9710: LD_VAR 0 8
9714: PPUSH
9715: CALL_OW 1
9719: ST_TO_ADDR
// end ;
9720: LD_VAR 0 5
9724: RET
// export function DangerAtRange ( unit , range ) ; begin
9725: LD_INT 0
9727: PPUSH
// if not unit then
9728: LD_VAR 0 1
9732: NOT
9733: IFFALSE 9737
// exit ;
9735: GO 9782
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9737: LD_ADDR_VAR 0 3
9741: PUSH
9742: LD_VAR 0 1
9746: PPUSH
9747: CALL_OW 255
9751: PPUSH
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 250
9761: PPUSH
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 251
9771: PPUSH
9772: LD_VAR 0 2
9776: PPUSH
9777: CALL 8024 0 4
9781: ST_TO_ADDR
// end ;
9782: LD_VAR 0 3
9786: RET
// export function DangerInArea ( side , area ) ; begin
9787: LD_INT 0
9789: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9790: LD_ADDR_VAR 0 3
9794: PUSH
9795: LD_VAR 0 2
9799: PPUSH
9800: LD_INT 81
9802: PUSH
9803: LD_VAR 0 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PPUSH
9812: CALL_OW 70
9816: ST_TO_ADDR
// end ;
9817: LD_VAR 0 3
9821: RET
// export function IsExtension ( b ) ; begin
9822: LD_INT 0
9824: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9825: LD_ADDR_VAR 0 2
9829: PUSH
9830: LD_VAR 0 1
9834: PUSH
9835: LD_INT 23
9837: PUSH
9838: LD_INT 20
9840: PUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 17
9846: PUSH
9847: LD_INT 24
9849: PUSH
9850: LD_INT 21
9852: PUSH
9853: LD_INT 19
9855: PUSH
9856: LD_INT 16
9858: PUSH
9859: LD_INT 25
9861: PUSH
9862: LD_INT 18
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: IN
9877: ST_TO_ADDR
// end ;
9878: LD_VAR 0 2
9882: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9883: LD_INT 0
9885: PPUSH
9886: PPUSH
9887: PPUSH
// result := [ ] ;
9888: LD_ADDR_VAR 0 4
9892: PUSH
9893: EMPTY
9894: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9895: LD_ADDR_VAR 0 5
9899: PUSH
9900: LD_VAR 0 2
9904: PPUSH
9905: LD_INT 21
9907: PUSH
9908: LD_INT 3
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: CALL_OW 70
9919: ST_TO_ADDR
// if not tmp then
9920: LD_VAR 0 5
9924: NOT
9925: IFFALSE 9929
// exit ;
9927: GO 9993
// if checkLink then
9929: LD_VAR 0 3
9933: IFFALSE 9983
// begin for i in tmp do
9935: LD_ADDR_VAR 0 6
9939: PUSH
9940: LD_VAR 0 5
9944: PUSH
9945: FOR_IN
9946: IFFALSE 9981
// if GetBase ( i ) <> base then
9948: LD_VAR 0 6
9952: PPUSH
9953: CALL_OW 274
9957: PUSH
9958: LD_VAR 0 1
9962: NONEQUAL
9963: IFFALSE 9979
// ComLinkToBase ( base , i ) ;
9965: LD_VAR 0 1
9969: PPUSH
9970: LD_VAR 0 6
9974: PPUSH
9975: CALL_OW 169
9979: GO 9945
9981: POP
9982: POP
// end ; result := tmp ;
9983: LD_ADDR_VAR 0 4
9987: PUSH
9988: LD_VAR 0 5
9992: ST_TO_ADDR
// end ;
9993: LD_VAR 0 4
9997: RET
// export function ComComplete ( units , b ) ; var i ; begin
9998: LD_INT 0
10000: PPUSH
10001: PPUSH
// if not units then
10002: LD_VAR 0 1
10006: NOT
10007: IFFALSE 10011
// exit ;
10009: GO 10101
// for i in units do
10011: LD_ADDR_VAR 0 4
10015: PUSH
10016: LD_VAR 0 1
10020: PUSH
10021: FOR_IN
10022: IFFALSE 10099
// if BuildingStatus ( b ) = bs_build then
10024: LD_VAR 0 2
10028: PPUSH
10029: CALL_OW 461
10033: PUSH
10034: LD_INT 1
10036: EQUAL
10037: IFFALSE 10097
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10039: LD_VAR 0 4
10043: PPUSH
10044: LD_STRING h
10046: PUSH
10047: LD_VAR 0 2
10051: PPUSH
10052: CALL_OW 250
10056: PUSH
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL_OW 251
10066: PUSH
10067: LD_VAR 0 2
10071: PUSH
10072: LD_INT 0
10074: PUSH
10075: LD_INT 0
10077: PUSH
10078: LD_INT 0
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: PUSH
10090: EMPTY
10091: LIST
10092: PPUSH
10093: CALL_OW 446
10097: GO 10021
10099: POP
10100: POP
// end ;
10101: LD_VAR 0 3
10105: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10106: LD_INT 0
10108: PPUSH
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
10113: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10114: LD_VAR 0 1
10118: NOT
10119: PUSH
10120: LD_VAR 0 1
10124: PPUSH
10125: CALL_OW 263
10129: PUSH
10130: LD_INT 2
10132: NONEQUAL
10133: OR
10134: IFFALSE 10138
// exit ;
10136: GO 10454
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10138: LD_ADDR_VAR 0 6
10142: PUSH
10143: LD_INT 22
10145: PUSH
10146: LD_VAR 0 1
10150: PPUSH
10151: CALL_OW 255
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PUSH
10160: LD_INT 2
10162: PUSH
10163: LD_INT 30
10165: PUSH
10166: LD_INT 36
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 34
10175: PUSH
10176: LD_INT 31
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PPUSH
10192: CALL_OW 69
10196: ST_TO_ADDR
// if not tmp then
10197: LD_VAR 0 6
10201: NOT
10202: IFFALSE 10206
// exit ;
10204: GO 10454
// result := [ ] ;
10206: LD_ADDR_VAR 0 2
10210: PUSH
10211: EMPTY
10212: ST_TO_ADDR
// for i in tmp do
10213: LD_ADDR_VAR 0 3
10217: PUSH
10218: LD_VAR 0 6
10222: PUSH
10223: FOR_IN
10224: IFFALSE 10295
// begin t := UnitsInside ( i ) ;
10226: LD_ADDR_VAR 0 4
10230: PUSH
10231: LD_VAR 0 3
10235: PPUSH
10236: CALL_OW 313
10240: ST_TO_ADDR
// if t then
10241: LD_VAR 0 4
10245: IFFALSE 10293
// for j in t do
10247: LD_ADDR_VAR 0 7
10251: PUSH
10252: LD_VAR 0 4
10256: PUSH
10257: FOR_IN
10258: IFFALSE 10291
// result := Replace ( result , result + 1 , j ) ;
10260: LD_ADDR_VAR 0 2
10264: PUSH
10265: LD_VAR 0 2
10269: PPUSH
10270: LD_VAR 0 2
10274: PUSH
10275: LD_INT 1
10277: PLUS
10278: PPUSH
10279: LD_VAR 0 7
10283: PPUSH
10284: CALL_OW 1
10288: ST_TO_ADDR
10289: GO 10257
10291: POP
10292: POP
// end ;
10293: GO 10223
10295: POP
10296: POP
// if not result then
10297: LD_VAR 0 2
10301: NOT
10302: IFFALSE 10306
// exit ;
10304: GO 10454
// mech := result [ 1 ] ;
10306: LD_ADDR_VAR 0 5
10310: PUSH
10311: LD_VAR 0 2
10315: PUSH
10316: LD_INT 1
10318: ARRAY
10319: ST_TO_ADDR
// if result > 1 then
10320: LD_VAR 0 2
10324: PUSH
10325: LD_INT 1
10327: GREATER
10328: IFFALSE 10440
// begin for i = 2 to result do
10330: LD_ADDR_VAR 0 3
10334: PUSH
10335: DOUBLE
10336: LD_INT 2
10338: DEC
10339: ST_TO_ADDR
10340: LD_VAR 0 2
10344: PUSH
10345: FOR_TO
10346: IFFALSE 10438
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10348: LD_ADDR_VAR 0 4
10352: PUSH
10353: LD_VAR 0 2
10357: PUSH
10358: LD_VAR 0 3
10362: ARRAY
10363: PPUSH
10364: LD_INT 3
10366: PPUSH
10367: CALL_OW 259
10371: PUSH
10372: LD_VAR 0 2
10376: PUSH
10377: LD_VAR 0 3
10381: ARRAY
10382: PPUSH
10383: CALL_OW 432
10387: MINUS
10388: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10389: LD_VAR 0 4
10393: PUSH
10394: LD_VAR 0 5
10398: PPUSH
10399: LD_INT 3
10401: PPUSH
10402: CALL_OW 259
10406: PUSH
10407: LD_VAR 0 5
10411: PPUSH
10412: CALL_OW 432
10416: MINUS
10417: GREATEREQUAL
10418: IFFALSE 10436
// mech := result [ i ] ;
10420: LD_ADDR_VAR 0 5
10424: PUSH
10425: LD_VAR 0 2
10429: PUSH
10430: LD_VAR 0 3
10434: ARRAY
10435: ST_TO_ADDR
// end ;
10436: GO 10345
10438: POP
10439: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10440: LD_VAR 0 1
10444: PPUSH
10445: LD_VAR 0 5
10449: PPUSH
10450: CALL_OW 135
// end ;
10454: LD_VAR 0 2
10458: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10459: LD_INT 0
10461: PPUSH
10462: PPUSH
10463: PPUSH
10464: PPUSH
10465: PPUSH
10466: PPUSH
10467: PPUSH
10468: PPUSH
10469: PPUSH
10470: PPUSH
10471: PPUSH
10472: PPUSH
10473: PPUSH
// result := [ ] ;
10474: LD_ADDR_VAR 0 7
10478: PUSH
10479: EMPTY
10480: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10481: LD_VAR 0 1
10485: PPUSH
10486: CALL_OW 266
10490: PUSH
10491: LD_INT 0
10493: PUSH
10494: LD_INT 1
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: IN
10501: NOT
10502: IFFALSE 10506
// exit ;
10504: GO 12140
// if name then
10506: LD_VAR 0 3
10510: IFFALSE 10526
// SetBName ( base_dep , name ) ;
10512: LD_VAR 0 1
10516: PPUSH
10517: LD_VAR 0 3
10521: PPUSH
10522: CALL_OW 500
// base := GetBase ( base_dep ) ;
10526: LD_ADDR_VAR 0 15
10530: PUSH
10531: LD_VAR 0 1
10535: PPUSH
10536: CALL_OW 274
10540: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10541: LD_ADDR_VAR 0 16
10545: PUSH
10546: LD_VAR 0 1
10550: PPUSH
10551: CALL_OW 255
10555: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10556: LD_ADDR_VAR 0 17
10560: PUSH
10561: LD_VAR 0 1
10565: PPUSH
10566: CALL_OW 248
10570: ST_TO_ADDR
// if sources then
10571: LD_VAR 0 5
10575: IFFALSE 10622
// for i = 1 to 3 do
10577: LD_ADDR_VAR 0 8
10581: PUSH
10582: DOUBLE
10583: LD_INT 1
10585: DEC
10586: ST_TO_ADDR
10587: LD_INT 3
10589: PUSH
10590: FOR_TO
10591: IFFALSE 10620
// AddResourceType ( base , i , sources [ i ] ) ;
10593: LD_VAR 0 15
10597: PPUSH
10598: LD_VAR 0 8
10602: PPUSH
10603: LD_VAR 0 5
10607: PUSH
10608: LD_VAR 0 8
10612: ARRAY
10613: PPUSH
10614: CALL_OW 276
10618: GO 10590
10620: POP
10621: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10622: LD_ADDR_VAR 0 18
10626: PUSH
10627: LD_VAR 0 15
10631: PPUSH
10632: LD_VAR 0 2
10636: PPUSH
10637: LD_INT 1
10639: PPUSH
10640: CALL 9883 0 3
10644: ST_TO_ADDR
// InitHc ;
10645: CALL_OW 19
// InitUc ;
10649: CALL_OW 18
// uc_side := side ;
10653: LD_ADDR_OWVAR 20
10657: PUSH
10658: LD_VAR 0 16
10662: ST_TO_ADDR
// uc_nation := nation ;
10663: LD_ADDR_OWVAR 21
10667: PUSH
10668: LD_VAR 0 17
10672: ST_TO_ADDR
// if buildings then
10673: LD_VAR 0 18
10677: IFFALSE 11999
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10679: LD_ADDR_VAR 0 19
10683: PUSH
10684: LD_VAR 0 18
10688: PPUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 30
10694: PUSH
10695: LD_INT 29
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 30
10704: PUSH
10705: LD_INT 30
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: PPUSH
10717: CALL_OW 72
10721: ST_TO_ADDR
// if tmp then
10722: LD_VAR 0 19
10726: IFFALSE 10774
// for i in tmp do
10728: LD_ADDR_VAR 0 8
10732: PUSH
10733: LD_VAR 0 19
10737: PUSH
10738: FOR_IN
10739: IFFALSE 10772
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10741: LD_VAR 0 8
10745: PPUSH
10746: CALL_OW 250
10750: PPUSH
10751: LD_VAR 0 8
10755: PPUSH
10756: CALL_OW 251
10760: PPUSH
10761: LD_VAR 0 16
10765: PPUSH
10766: CALL_OW 441
10770: GO 10738
10772: POP
10773: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10774: LD_VAR 0 18
10778: PPUSH
10779: LD_INT 2
10781: PUSH
10782: LD_INT 30
10784: PUSH
10785: LD_INT 32
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 30
10794: PUSH
10795: LD_INT 33
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: PPUSH
10807: CALL_OW 72
10811: IFFALSE 10899
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10813: LD_ADDR_VAR 0 8
10817: PUSH
10818: LD_VAR 0 18
10822: PPUSH
10823: LD_INT 2
10825: PUSH
10826: LD_INT 30
10828: PUSH
10829: LD_INT 32
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 30
10838: PUSH
10839: LD_INT 33
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: PPUSH
10851: CALL_OW 72
10855: PUSH
10856: FOR_IN
10857: IFFALSE 10897
// begin if not GetBWeapon ( i ) then
10859: LD_VAR 0 8
10863: PPUSH
10864: CALL_OW 269
10868: NOT
10869: IFFALSE 10895
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10871: LD_VAR 0 8
10875: PPUSH
10876: LD_VAR 0 8
10880: PPUSH
10881: LD_VAR 0 2
10885: PPUSH
10886: CALL 12145 0 2
10890: PPUSH
10891: CALL_OW 431
// end ;
10895: GO 10856
10897: POP
10898: POP
// end ; for i = 1 to personel do
10899: LD_ADDR_VAR 0 8
10903: PUSH
10904: DOUBLE
10905: LD_INT 1
10907: DEC
10908: ST_TO_ADDR
10909: LD_VAR 0 6
10913: PUSH
10914: FOR_TO
10915: IFFALSE 11979
// begin if i > 4 then
10917: LD_VAR 0 8
10921: PUSH
10922: LD_INT 4
10924: GREATER
10925: IFFALSE 10929
// break ;
10927: GO 11979
// case i of 1 :
10929: LD_VAR 0 8
10933: PUSH
10934: LD_INT 1
10936: DOUBLE
10937: EQUAL
10938: IFTRUE 10942
10940: GO 11022
10942: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10943: LD_ADDR_VAR 0 12
10947: PUSH
10948: LD_VAR 0 18
10952: PPUSH
10953: LD_INT 22
10955: PUSH
10956: LD_VAR 0 16
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 58
10967: PUSH
10968: EMPTY
10969: LIST
10970: PUSH
10971: LD_INT 2
10973: PUSH
10974: LD_INT 30
10976: PUSH
10977: LD_INT 32
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 30
10986: PUSH
10987: LD_INT 4
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 30
10996: PUSH
10997: LD_INT 5
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: PPUSH
11015: CALL_OW 72
11019: ST_TO_ADDR
11020: GO 11244
11022: LD_INT 2
11024: DOUBLE
11025: EQUAL
11026: IFTRUE 11030
11028: GO 11092
11030: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11031: LD_ADDR_VAR 0 12
11035: PUSH
11036: LD_VAR 0 18
11040: PPUSH
11041: LD_INT 22
11043: PUSH
11044: LD_VAR 0 16
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 2
11055: PUSH
11056: LD_INT 30
11058: PUSH
11059: LD_INT 0
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 30
11068: PUSH
11069: LD_INT 1
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PPUSH
11085: CALL_OW 72
11089: ST_TO_ADDR
11090: GO 11244
11092: LD_INT 3
11094: DOUBLE
11095: EQUAL
11096: IFTRUE 11100
11098: GO 11162
11100: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11101: LD_ADDR_VAR 0 12
11105: PUSH
11106: LD_VAR 0 18
11110: PPUSH
11111: LD_INT 22
11113: PUSH
11114: LD_VAR 0 16
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 2
11125: PUSH
11126: LD_INT 30
11128: PUSH
11129: LD_INT 2
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 30
11138: PUSH
11139: LD_INT 3
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PPUSH
11155: CALL_OW 72
11159: ST_TO_ADDR
11160: GO 11244
11162: LD_INT 4
11164: DOUBLE
11165: EQUAL
11166: IFTRUE 11170
11168: GO 11243
11170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11171: LD_ADDR_VAR 0 12
11175: PUSH
11176: LD_VAR 0 18
11180: PPUSH
11181: LD_INT 22
11183: PUSH
11184: LD_VAR 0 16
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 2
11195: PUSH
11196: LD_INT 30
11198: PUSH
11199: LD_INT 6
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 30
11208: PUSH
11209: LD_INT 7
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 30
11218: PUSH
11219: LD_INT 8
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 72
11240: ST_TO_ADDR
11241: GO 11244
11243: POP
// if i = 1 then
11244: LD_VAR 0 8
11248: PUSH
11249: LD_INT 1
11251: EQUAL
11252: IFFALSE 11363
// begin tmp := [ ] ;
11254: LD_ADDR_VAR 0 19
11258: PUSH
11259: EMPTY
11260: ST_TO_ADDR
// for j in f do
11261: LD_ADDR_VAR 0 9
11265: PUSH
11266: LD_VAR 0 12
11270: PUSH
11271: FOR_IN
11272: IFFALSE 11345
// if GetBType ( j ) = b_bunker then
11274: LD_VAR 0 9
11278: PPUSH
11279: CALL_OW 266
11283: PUSH
11284: LD_INT 32
11286: EQUAL
11287: IFFALSE 11314
// tmp := Insert ( tmp , 1 , j ) else
11289: LD_ADDR_VAR 0 19
11293: PUSH
11294: LD_VAR 0 19
11298: PPUSH
11299: LD_INT 1
11301: PPUSH
11302: LD_VAR 0 9
11306: PPUSH
11307: CALL_OW 2
11311: ST_TO_ADDR
11312: GO 11343
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11314: LD_ADDR_VAR 0 19
11318: PUSH
11319: LD_VAR 0 19
11323: PPUSH
11324: LD_VAR 0 19
11328: PUSH
11329: LD_INT 1
11331: PLUS
11332: PPUSH
11333: LD_VAR 0 9
11337: PPUSH
11338: CALL_OW 2
11342: ST_TO_ADDR
11343: GO 11271
11345: POP
11346: POP
// if tmp then
11347: LD_VAR 0 19
11351: IFFALSE 11363
// f := tmp ;
11353: LD_ADDR_VAR 0 12
11357: PUSH
11358: LD_VAR 0 19
11362: ST_TO_ADDR
// end ; x := personel [ i ] ;
11363: LD_ADDR_VAR 0 13
11367: PUSH
11368: LD_VAR 0 6
11372: PUSH
11373: LD_VAR 0 8
11377: ARRAY
11378: ST_TO_ADDR
// if x = - 1 then
11379: LD_VAR 0 13
11383: PUSH
11384: LD_INT 1
11386: NEG
11387: EQUAL
11388: IFFALSE 11597
// begin for j in f do
11390: LD_ADDR_VAR 0 9
11394: PUSH
11395: LD_VAR 0 12
11399: PUSH
11400: FOR_IN
11401: IFFALSE 11593
// repeat InitHc ;
11403: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11407: LD_VAR 0 9
11411: PPUSH
11412: CALL_OW 266
11416: PUSH
11417: LD_INT 5
11419: EQUAL
11420: IFFALSE 11490
// begin if UnitsInside ( j ) < 3 then
11422: LD_VAR 0 9
11426: PPUSH
11427: CALL_OW 313
11431: PUSH
11432: LD_INT 3
11434: LESS
11435: IFFALSE 11471
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11437: LD_INT 0
11439: PPUSH
11440: LD_INT 5
11442: PUSH
11443: LD_INT 8
11445: PUSH
11446: LD_INT 9
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: PUSH
11454: LD_VAR 0 17
11458: ARRAY
11459: PPUSH
11460: LD_VAR 0 4
11464: PPUSH
11465: CALL_OW 380
11469: GO 11488
// PrepareHuman ( false , i , skill ) ;
11471: LD_INT 0
11473: PPUSH
11474: LD_VAR 0 8
11478: PPUSH
11479: LD_VAR 0 4
11483: PPUSH
11484: CALL_OW 380
// end else
11488: GO 11507
// PrepareHuman ( false , i , skill ) ;
11490: LD_INT 0
11492: PPUSH
11493: LD_VAR 0 8
11497: PPUSH
11498: LD_VAR 0 4
11502: PPUSH
11503: CALL_OW 380
// un := CreateHuman ;
11507: LD_ADDR_VAR 0 14
11511: PUSH
11512: CALL_OW 44
11516: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11517: LD_ADDR_VAR 0 7
11521: PUSH
11522: LD_VAR 0 7
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: LD_VAR 0 14
11534: PPUSH
11535: CALL_OW 2
11539: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11540: LD_VAR 0 14
11544: PPUSH
11545: LD_VAR 0 9
11549: PPUSH
11550: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11554: LD_VAR 0 9
11558: PPUSH
11559: CALL_OW 313
11563: PUSH
11564: LD_INT 6
11566: EQUAL
11567: PUSH
11568: LD_VAR 0 9
11572: PPUSH
11573: CALL_OW 266
11577: PUSH
11578: LD_INT 32
11580: PUSH
11581: LD_INT 31
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: IN
11588: OR
11589: IFFALSE 11403
11591: GO 11400
11593: POP
11594: POP
// end else
11595: GO 11977
// for j = 1 to x do
11597: LD_ADDR_VAR 0 9
11601: PUSH
11602: DOUBLE
11603: LD_INT 1
11605: DEC
11606: ST_TO_ADDR
11607: LD_VAR 0 13
11611: PUSH
11612: FOR_TO
11613: IFFALSE 11975
// begin InitHc ;
11615: CALL_OW 19
// if not f then
11619: LD_VAR 0 12
11623: NOT
11624: IFFALSE 11713
// begin PrepareHuman ( false , i , skill ) ;
11626: LD_INT 0
11628: PPUSH
11629: LD_VAR 0 8
11633: PPUSH
11634: LD_VAR 0 4
11638: PPUSH
11639: CALL_OW 380
// un := CreateHuman ;
11643: LD_ADDR_VAR 0 14
11647: PUSH
11648: CALL_OW 44
11652: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11653: LD_ADDR_VAR 0 7
11657: PUSH
11658: LD_VAR 0 7
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: LD_VAR 0 14
11670: PPUSH
11671: CALL_OW 2
11675: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11676: LD_VAR 0 14
11680: PPUSH
11681: LD_VAR 0 1
11685: PPUSH
11686: CALL_OW 250
11690: PPUSH
11691: LD_VAR 0 1
11695: PPUSH
11696: CALL_OW 251
11700: PPUSH
11701: LD_INT 10
11703: PPUSH
11704: LD_INT 0
11706: PPUSH
11707: CALL_OW 50
// continue ;
11711: GO 11612
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11713: LD_VAR 0 12
11717: PUSH
11718: LD_INT 1
11720: ARRAY
11721: PPUSH
11722: CALL_OW 313
11726: PUSH
11727: LD_VAR 0 12
11731: PUSH
11732: LD_INT 1
11734: ARRAY
11735: PPUSH
11736: CALL_OW 266
11740: PUSH
11741: LD_INT 32
11743: PUSH
11744: LD_INT 31
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: IN
11751: AND
11752: PUSH
11753: LD_VAR 0 12
11757: PUSH
11758: LD_INT 1
11760: ARRAY
11761: PPUSH
11762: CALL_OW 313
11766: PUSH
11767: LD_INT 6
11769: EQUAL
11770: OR
11771: IFFALSE 11791
// f := Delete ( f , 1 ) ;
11773: LD_ADDR_VAR 0 12
11777: PUSH
11778: LD_VAR 0 12
11782: PPUSH
11783: LD_INT 1
11785: PPUSH
11786: CALL_OW 3
11790: ST_TO_ADDR
// if not f then
11791: LD_VAR 0 12
11795: NOT
11796: IFFALSE 11814
// begin x := x + 2 ;
11798: LD_ADDR_VAR 0 13
11802: PUSH
11803: LD_VAR 0 13
11807: PUSH
11808: LD_INT 2
11810: PLUS
11811: ST_TO_ADDR
// continue ;
11812: GO 11612
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11814: LD_VAR 0 12
11818: PUSH
11819: LD_INT 1
11821: ARRAY
11822: PPUSH
11823: CALL_OW 266
11827: PUSH
11828: LD_INT 5
11830: EQUAL
11831: IFFALSE 11905
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11833: LD_VAR 0 12
11837: PUSH
11838: LD_INT 1
11840: ARRAY
11841: PPUSH
11842: CALL_OW 313
11846: PUSH
11847: LD_INT 3
11849: LESS
11850: IFFALSE 11886
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11852: LD_INT 0
11854: PPUSH
11855: LD_INT 5
11857: PUSH
11858: LD_INT 8
11860: PUSH
11861: LD_INT 9
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: LD_VAR 0 17
11873: ARRAY
11874: PPUSH
11875: LD_VAR 0 4
11879: PPUSH
11880: CALL_OW 380
11884: GO 11903
// PrepareHuman ( false , i , skill ) ;
11886: LD_INT 0
11888: PPUSH
11889: LD_VAR 0 8
11893: PPUSH
11894: LD_VAR 0 4
11898: PPUSH
11899: CALL_OW 380
// end else
11903: GO 11922
// PrepareHuman ( false , i , skill ) ;
11905: LD_INT 0
11907: PPUSH
11908: LD_VAR 0 8
11912: PPUSH
11913: LD_VAR 0 4
11917: PPUSH
11918: CALL_OW 380
// un := CreateHuman ;
11922: LD_ADDR_VAR 0 14
11926: PUSH
11927: CALL_OW 44
11931: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11932: LD_ADDR_VAR 0 7
11936: PUSH
11937: LD_VAR 0 7
11941: PPUSH
11942: LD_INT 1
11944: PPUSH
11945: LD_VAR 0 14
11949: PPUSH
11950: CALL_OW 2
11954: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11955: LD_VAR 0 14
11959: PPUSH
11960: LD_VAR 0 12
11964: PUSH
11965: LD_INT 1
11967: ARRAY
11968: PPUSH
11969: CALL_OW 52
// end ;
11973: GO 11612
11975: POP
11976: POP
// end ;
11977: GO 10914
11979: POP
11980: POP
// result := result ^ buildings ;
11981: LD_ADDR_VAR 0 7
11985: PUSH
11986: LD_VAR 0 7
11990: PUSH
11991: LD_VAR 0 18
11995: ADD
11996: ST_TO_ADDR
// end else
11997: GO 12140
// begin for i = 1 to personel do
11999: LD_ADDR_VAR 0 8
12003: PUSH
12004: DOUBLE
12005: LD_INT 1
12007: DEC
12008: ST_TO_ADDR
12009: LD_VAR 0 6
12013: PUSH
12014: FOR_TO
12015: IFFALSE 12138
// begin if i > 4 then
12017: LD_VAR 0 8
12021: PUSH
12022: LD_INT 4
12024: GREATER
12025: IFFALSE 12029
// break ;
12027: GO 12138
// x := personel [ i ] ;
12029: LD_ADDR_VAR 0 13
12033: PUSH
12034: LD_VAR 0 6
12038: PUSH
12039: LD_VAR 0 8
12043: ARRAY
12044: ST_TO_ADDR
// if x = - 1 then
12045: LD_VAR 0 13
12049: PUSH
12050: LD_INT 1
12052: NEG
12053: EQUAL
12054: IFFALSE 12058
// continue ;
12056: GO 12014
// PrepareHuman ( false , i , skill ) ;
12058: LD_INT 0
12060: PPUSH
12061: LD_VAR 0 8
12065: PPUSH
12066: LD_VAR 0 4
12070: PPUSH
12071: CALL_OW 380
// un := CreateHuman ;
12075: LD_ADDR_VAR 0 14
12079: PUSH
12080: CALL_OW 44
12084: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12085: LD_VAR 0 14
12089: PPUSH
12090: LD_VAR 0 1
12094: PPUSH
12095: CALL_OW 250
12099: PPUSH
12100: LD_VAR 0 1
12104: PPUSH
12105: CALL_OW 251
12109: PPUSH
12110: LD_INT 10
12112: PPUSH
12113: LD_INT 0
12115: PPUSH
12116: CALL_OW 50
// result := result ^ un ;
12120: LD_ADDR_VAR 0 7
12124: PUSH
12125: LD_VAR 0 7
12129: PUSH
12130: LD_VAR 0 14
12134: ADD
12135: ST_TO_ADDR
// end ;
12136: GO 12014
12138: POP
12139: POP
// end ; end ;
12140: LD_VAR 0 7
12144: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12145: LD_INT 0
12147: PPUSH
12148: PPUSH
12149: PPUSH
12150: PPUSH
12151: PPUSH
12152: PPUSH
12153: PPUSH
12154: PPUSH
12155: PPUSH
12156: PPUSH
12157: PPUSH
12158: PPUSH
12159: PPUSH
12160: PPUSH
12161: PPUSH
12162: PPUSH
// result := false ;
12163: LD_ADDR_VAR 0 3
12167: PUSH
12168: LD_INT 0
12170: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12171: LD_VAR 0 1
12175: NOT
12176: PUSH
12177: LD_VAR 0 1
12181: PPUSH
12182: CALL_OW 266
12186: PUSH
12187: LD_INT 32
12189: PUSH
12190: LD_INT 33
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: IN
12197: NOT
12198: OR
12199: IFFALSE 12203
// exit ;
12201: GO 13312
// nat := GetNation ( tower ) ;
12203: LD_ADDR_VAR 0 12
12207: PUSH
12208: LD_VAR 0 1
12212: PPUSH
12213: CALL_OW 248
12217: ST_TO_ADDR
// side := GetSide ( tower ) ;
12218: LD_ADDR_VAR 0 16
12222: PUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 255
12232: ST_TO_ADDR
// x := GetX ( tower ) ;
12233: LD_ADDR_VAR 0 10
12237: PUSH
12238: LD_VAR 0 1
12242: PPUSH
12243: CALL_OW 250
12247: ST_TO_ADDR
// y := GetY ( tower ) ;
12248: LD_ADDR_VAR 0 11
12252: PUSH
12253: LD_VAR 0 1
12257: PPUSH
12258: CALL_OW 251
12262: ST_TO_ADDR
// if not x or not y then
12263: LD_VAR 0 10
12267: NOT
12268: PUSH
12269: LD_VAR 0 11
12273: NOT
12274: OR
12275: IFFALSE 12279
// exit ;
12277: GO 13312
// weapon := 0 ;
12279: LD_ADDR_VAR 0 18
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// fac_list := [ ] ;
12287: LD_ADDR_VAR 0 17
12291: PUSH
12292: EMPTY
12293: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12294: LD_ADDR_VAR 0 6
12298: PUSH
12299: LD_VAR 0 1
12303: PPUSH
12304: CALL_OW 274
12308: PPUSH
12309: LD_VAR 0 2
12313: PPUSH
12314: LD_INT 0
12316: PPUSH
12317: CALL 9883 0 3
12321: PPUSH
12322: LD_INT 30
12324: PUSH
12325: LD_INT 3
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 72
12336: ST_TO_ADDR
// if not factories then
12337: LD_VAR 0 6
12341: NOT
12342: IFFALSE 12346
// exit ;
12344: GO 13312
// for i in factories do
12346: LD_ADDR_VAR 0 8
12350: PUSH
12351: LD_VAR 0 6
12355: PUSH
12356: FOR_IN
12357: IFFALSE 12382
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12359: LD_ADDR_VAR 0 17
12363: PUSH
12364: LD_VAR 0 17
12368: PUSH
12369: LD_VAR 0 8
12373: PPUSH
12374: CALL_OW 478
12378: UNION
12379: ST_TO_ADDR
12380: GO 12356
12382: POP
12383: POP
// if not fac_list then
12384: LD_VAR 0 17
12388: NOT
12389: IFFALSE 12393
// exit ;
12391: GO 13312
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12393: LD_ADDR_VAR 0 5
12397: PUSH
12398: LD_INT 4
12400: PUSH
12401: LD_INT 5
12403: PUSH
12404: LD_INT 9
12406: PUSH
12407: LD_INT 10
12409: PUSH
12410: LD_INT 6
12412: PUSH
12413: LD_INT 7
12415: PUSH
12416: LD_INT 11
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 27
12430: PUSH
12431: LD_INT 28
12433: PUSH
12434: LD_INT 26
12436: PUSH
12437: LD_INT 30
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 43
12448: PUSH
12449: LD_INT 44
12451: PUSH
12452: LD_INT 46
12454: PUSH
12455: LD_INT 45
12457: PUSH
12458: LD_INT 47
12460: PUSH
12461: LD_INT 49
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: PUSH
12477: LD_VAR 0 12
12481: ARRAY
12482: ST_TO_ADDR
// list := list isect fac_list ;
12483: LD_ADDR_VAR 0 5
12487: PUSH
12488: LD_VAR 0 5
12492: PUSH
12493: LD_VAR 0 17
12497: ISECT
12498: ST_TO_ADDR
// if not list then
12499: LD_VAR 0 5
12503: NOT
12504: IFFALSE 12508
// exit ;
12506: GO 13312
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12508: LD_VAR 0 12
12512: PUSH
12513: LD_INT 3
12515: EQUAL
12516: PUSH
12517: LD_INT 49
12519: PUSH
12520: LD_VAR 0 5
12524: IN
12525: AND
12526: PUSH
12527: LD_INT 31
12529: PPUSH
12530: LD_VAR 0 16
12534: PPUSH
12535: CALL_OW 321
12539: PUSH
12540: LD_INT 2
12542: EQUAL
12543: AND
12544: IFFALSE 12604
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12546: LD_INT 22
12548: PUSH
12549: LD_VAR 0 16
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 35
12560: PUSH
12561: LD_INT 49
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 91
12570: PUSH
12571: LD_VAR 0 1
12575: PUSH
12576: LD_INT 10
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: PPUSH
12589: CALL_OW 69
12593: NOT
12594: IFFALSE 12604
// weapon := ru_time_lapser ;
12596: LD_ADDR_VAR 0 18
12600: PUSH
12601: LD_INT 49
12603: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12604: LD_VAR 0 12
12608: PUSH
12609: LD_INT 1
12611: PUSH
12612: LD_INT 2
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: IN
12619: PUSH
12620: LD_INT 11
12622: PUSH
12623: LD_VAR 0 5
12627: IN
12628: PUSH
12629: LD_INT 30
12631: PUSH
12632: LD_VAR 0 5
12636: IN
12637: OR
12638: AND
12639: PUSH
12640: LD_INT 6
12642: PPUSH
12643: LD_VAR 0 16
12647: PPUSH
12648: CALL_OW 321
12652: PUSH
12653: LD_INT 2
12655: EQUAL
12656: AND
12657: IFFALSE 12822
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12659: LD_INT 22
12661: PUSH
12662: LD_VAR 0 16
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 2
12673: PUSH
12674: LD_INT 35
12676: PUSH
12677: LD_INT 11
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 35
12686: PUSH
12687: LD_INT 30
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 91
12701: PUSH
12702: LD_VAR 0 1
12706: PUSH
12707: LD_INT 18
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: PPUSH
12720: CALL_OW 69
12724: NOT
12725: PUSH
12726: LD_INT 22
12728: PUSH
12729: LD_VAR 0 16
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: LD_INT 2
12740: PUSH
12741: LD_INT 30
12743: PUSH
12744: LD_INT 32
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 30
12753: PUSH
12754: LD_INT 33
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 91
12768: PUSH
12769: LD_VAR 0 1
12773: PUSH
12774: LD_INT 12
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: PPUSH
12790: CALL_OW 69
12794: PUSH
12795: LD_INT 2
12797: GREATER
12798: AND
12799: IFFALSE 12822
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12801: LD_ADDR_VAR 0 18
12805: PUSH
12806: LD_INT 11
12808: PUSH
12809: LD_INT 30
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: LD_VAR 0 12
12820: ARRAY
12821: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12822: LD_VAR 0 18
12826: NOT
12827: PUSH
12828: LD_INT 40
12830: PPUSH
12831: LD_VAR 0 16
12835: PPUSH
12836: CALL_OW 321
12840: PUSH
12841: LD_INT 2
12843: EQUAL
12844: AND
12845: PUSH
12846: LD_INT 7
12848: PUSH
12849: LD_VAR 0 5
12853: IN
12854: PUSH
12855: LD_INT 28
12857: PUSH
12858: LD_VAR 0 5
12862: IN
12863: OR
12864: PUSH
12865: LD_INT 45
12867: PUSH
12868: LD_VAR 0 5
12872: IN
12873: OR
12874: AND
12875: IFFALSE 13129
// begin hex := GetHexInfo ( x , y ) ;
12877: LD_ADDR_VAR 0 4
12881: PUSH
12882: LD_VAR 0 10
12886: PPUSH
12887: LD_VAR 0 11
12891: PPUSH
12892: CALL_OW 546
12896: ST_TO_ADDR
// if hex [ 1 ] then
12897: LD_VAR 0 4
12901: PUSH
12902: LD_INT 1
12904: ARRAY
12905: IFFALSE 12909
// exit ;
12907: GO 13312
// height := hex [ 2 ] ;
12909: LD_ADDR_VAR 0 15
12913: PUSH
12914: LD_VAR 0 4
12918: PUSH
12919: LD_INT 2
12921: ARRAY
12922: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12923: LD_ADDR_VAR 0 14
12927: PUSH
12928: LD_INT 0
12930: PUSH
12931: LD_INT 2
12933: PUSH
12934: LD_INT 3
12936: PUSH
12937: LD_INT 5
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: ST_TO_ADDR
// for i in tmp do
12946: LD_ADDR_VAR 0 8
12950: PUSH
12951: LD_VAR 0 14
12955: PUSH
12956: FOR_IN
12957: IFFALSE 13127
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12959: LD_ADDR_VAR 0 9
12963: PUSH
12964: LD_VAR 0 10
12968: PPUSH
12969: LD_VAR 0 8
12973: PPUSH
12974: LD_INT 5
12976: PPUSH
12977: CALL_OW 272
12981: PUSH
12982: LD_VAR 0 11
12986: PPUSH
12987: LD_VAR 0 8
12991: PPUSH
12992: LD_INT 5
12994: PPUSH
12995: CALL_OW 273
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13004: LD_VAR 0 9
13008: PUSH
13009: LD_INT 1
13011: ARRAY
13012: PPUSH
13013: LD_VAR 0 9
13017: PUSH
13018: LD_INT 2
13020: ARRAY
13021: PPUSH
13022: CALL_OW 488
13026: IFFALSE 13125
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13028: LD_ADDR_VAR 0 4
13032: PUSH
13033: LD_VAR 0 9
13037: PUSH
13038: LD_INT 1
13040: ARRAY
13041: PPUSH
13042: LD_VAR 0 9
13046: PUSH
13047: LD_INT 2
13049: ARRAY
13050: PPUSH
13051: CALL_OW 546
13055: ST_TO_ADDR
// if hex [ 1 ] then
13056: LD_VAR 0 4
13060: PUSH
13061: LD_INT 1
13063: ARRAY
13064: IFFALSE 13068
// continue ;
13066: GO 12956
// h := hex [ 2 ] ;
13068: LD_ADDR_VAR 0 13
13072: PUSH
13073: LD_VAR 0 4
13077: PUSH
13078: LD_INT 2
13080: ARRAY
13081: ST_TO_ADDR
// if h + 7 < height then
13082: LD_VAR 0 13
13086: PUSH
13087: LD_INT 7
13089: PLUS
13090: PUSH
13091: LD_VAR 0 15
13095: LESS
13096: IFFALSE 13125
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13098: LD_ADDR_VAR 0 18
13102: PUSH
13103: LD_INT 7
13105: PUSH
13106: LD_INT 28
13108: PUSH
13109: LD_INT 45
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: LIST
13116: PUSH
13117: LD_VAR 0 12
13121: ARRAY
13122: ST_TO_ADDR
// break ;
13123: GO 13127
// end ; end ; end ;
13125: GO 12956
13127: POP
13128: POP
// end ; if not weapon then
13129: LD_VAR 0 18
13133: NOT
13134: IFFALSE 13194
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13136: LD_ADDR_VAR 0 5
13140: PUSH
13141: LD_VAR 0 5
13145: PUSH
13146: LD_INT 11
13148: PUSH
13149: LD_INT 30
13151: PUSH
13152: LD_INT 49
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: DIFF
13160: ST_TO_ADDR
// if not list then
13161: LD_VAR 0 5
13165: NOT
13166: IFFALSE 13170
// exit ;
13168: GO 13312
// weapon := list [ rand ( 1 , list ) ] ;
13170: LD_ADDR_VAR 0 18
13174: PUSH
13175: LD_VAR 0 5
13179: PUSH
13180: LD_INT 1
13182: PPUSH
13183: LD_VAR 0 5
13187: PPUSH
13188: CALL_OW 12
13192: ARRAY
13193: ST_TO_ADDR
// end ; if weapon then
13194: LD_VAR 0 18
13198: IFFALSE 13312
// begin tmp := CostOfWeapon ( weapon ) ;
13200: LD_ADDR_VAR 0 14
13204: PUSH
13205: LD_VAR 0 18
13209: PPUSH
13210: CALL_OW 451
13214: ST_TO_ADDR
// j := GetBase ( tower ) ;
13215: LD_ADDR_VAR 0 9
13219: PUSH
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL_OW 274
13229: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13230: LD_VAR 0 9
13234: PPUSH
13235: LD_INT 1
13237: PPUSH
13238: CALL_OW 275
13242: PUSH
13243: LD_VAR 0 14
13247: PUSH
13248: LD_INT 1
13250: ARRAY
13251: GREATEREQUAL
13252: PUSH
13253: LD_VAR 0 9
13257: PPUSH
13258: LD_INT 2
13260: PPUSH
13261: CALL_OW 275
13265: PUSH
13266: LD_VAR 0 14
13270: PUSH
13271: LD_INT 2
13273: ARRAY
13274: GREATEREQUAL
13275: AND
13276: PUSH
13277: LD_VAR 0 9
13281: PPUSH
13282: LD_INT 3
13284: PPUSH
13285: CALL_OW 275
13289: PUSH
13290: LD_VAR 0 14
13294: PUSH
13295: LD_INT 3
13297: ARRAY
13298: GREATEREQUAL
13299: AND
13300: IFFALSE 13312
// result := weapon ;
13302: LD_ADDR_VAR 0 3
13306: PUSH
13307: LD_VAR 0 18
13311: ST_TO_ADDR
// end ; end ;
13312: LD_VAR 0 3
13316: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13317: LD_INT 0
13319: PPUSH
13320: PPUSH
// result := true ;
13321: LD_ADDR_VAR 0 3
13325: PUSH
13326: LD_INT 1
13328: ST_TO_ADDR
// if array1 = array2 then
13329: LD_VAR 0 1
13333: PUSH
13334: LD_VAR 0 2
13338: EQUAL
13339: IFFALSE 13399
// begin for i = 1 to array1 do
13341: LD_ADDR_VAR 0 4
13345: PUSH
13346: DOUBLE
13347: LD_INT 1
13349: DEC
13350: ST_TO_ADDR
13351: LD_VAR 0 1
13355: PUSH
13356: FOR_TO
13357: IFFALSE 13395
// if array1 [ i ] <> array2 [ i ] then
13359: LD_VAR 0 1
13363: PUSH
13364: LD_VAR 0 4
13368: ARRAY
13369: PUSH
13370: LD_VAR 0 2
13374: PUSH
13375: LD_VAR 0 4
13379: ARRAY
13380: NONEQUAL
13381: IFFALSE 13393
// begin result := false ;
13383: LD_ADDR_VAR 0 3
13387: PUSH
13388: LD_INT 0
13390: ST_TO_ADDR
// break ;
13391: GO 13395
// end ;
13393: GO 13356
13395: POP
13396: POP
// end else
13397: GO 13407
// result := false ;
13399: LD_ADDR_VAR 0 3
13403: PUSH
13404: LD_INT 0
13406: ST_TO_ADDR
// end ;
13407: LD_VAR 0 3
13411: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13412: LD_INT 0
13414: PPUSH
13415: PPUSH
// if not array1 or not array2 then
13416: LD_VAR 0 1
13420: NOT
13421: PUSH
13422: LD_VAR 0 2
13426: NOT
13427: OR
13428: IFFALSE 13432
// exit ;
13430: GO 13496
// result := true ;
13432: LD_ADDR_VAR 0 3
13436: PUSH
13437: LD_INT 1
13439: ST_TO_ADDR
// for i = 1 to array1 do
13440: LD_ADDR_VAR 0 4
13444: PUSH
13445: DOUBLE
13446: LD_INT 1
13448: DEC
13449: ST_TO_ADDR
13450: LD_VAR 0 1
13454: PUSH
13455: FOR_TO
13456: IFFALSE 13494
// if array1 [ i ] <> array2 [ i ] then
13458: LD_VAR 0 1
13462: PUSH
13463: LD_VAR 0 4
13467: ARRAY
13468: PUSH
13469: LD_VAR 0 2
13473: PUSH
13474: LD_VAR 0 4
13478: ARRAY
13479: NONEQUAL
13480: IFFALSE 13492
// begin result := false ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: LD_INT 0
13489: ST_TO_ADDR
// break ;
13490: GO 13494
// end ;
13492: GO 13455
13494: POP
13495: POP
// end ;
13496: LD_VAR 0 3
13500: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13501: LD_INT 0
13503: PPUSH
13504: PPUSH
13505: PPUSH
// pom := GetBase ( fac ) ;
13506: LD_ADDR_VAR 0 5
13510: PUSH
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL_OW 274
13520: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13521: LD_ADDR_VAR 0 4
13525: PUSH
13526: LD_VAR 0 2
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: LD_VAR 0 2
13539: PUSH
13540: LD_INT 2
13542: ARRAY
13543: PPUSH
13544: LD_VAR 0 2
13548: PUSH
13549: LD_INT 3
13551: ARRAY
13552: PPUSH
13553: LD_VAR 0 2
13557: PUSH
13558: LD_INT 4
13560: ARRAY
13561: PPUSH
13562: CALL_OW 449
13566: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13567: LD_ADDR_VAR 0 3
13571: PUSH
13572: LD_VAR 0 5
13576: PPUSH
13577: LD_INT 1
13579: PPUSH
13580: CALL_OW 275
13584: PUSH
13585: LD_VAR 0 4
13589: PUSH
13590: LD_INT 1
13592: ARRAY
13593: GREATEREQUAL
13594: PUSH
13595: LD_VAR 0 5
13599: PPUSH
13600: LD_INT 2
13602: PPUSH
13603: CALL_OW 275
13607: PUSH
13608: LD_VAR 0 4
13612: PUSH
13613: LD_INT 2
13615: ARRAY
13616: GREATEREQUAL
13617: AND
13618: PUSH
13619: LD_VAR 0 5
13623: PPUSH
13624: LD_INT 3
13626: PPUSH
13627: CALL_OW 275
13631: PUSH
13632: LD_VAR 0 4
13636: PUSH
13637: LD_INT 3
13639: ARRAY
13640: GREATEREQUAL
13641: AND
13642: ST_TO_ADDR
// end ;
13643: LD_VAR 0 3
13647: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13648: LD_INT 0
13650: PPUSH
13651: PPUSH
13652: PPUSH
13653: PPUSH
// pom := GetBase ( building ) ;
13654: LD_ADDR_VAR 0 3
13658: PUSH
13659: LD_VAR 0 1
13663: PPUSH
13664: CALL_OW 274
13668: ST_TO_ADDR
// if not pom then
13669: LD_VAR 0 3
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 13848
// btype := GetBType ( building ) ;
13678: LD_ADDR_VAR 0 5
13682: PUSH
13683: LD_VAR 0 1
13687: PPUSH
13688: CALL_OW 266
13692: ST_TO_ADDR
// if btype = b_armoury then
13693: LD_VAR 0 5
13697: PUSH
13698: LD_INT 4
13700: EQUAL
13701: IFFALSE 13711
// btype := b_barracks ;
13703: LD_ADDR_VAR 0 5
13707: PUSH
13708: LD_INT 5
13710: ST_TO_ADDR
// if btype = b_depot then
13711: LD_VAR 0 5
13715: PUSH
13716: LD_INT 0
13718: EQUAL
13719: IFFALSE 13729
// btype := b_warehouse ;
13721: LD_ADDR_VAR 0 5
13725: PUSH
13726: LD_INT 1
13728: ST_TO_ADDR
// if btype = b_workshop then
13729: LD_VAR 0 5
13733: PUSH
13734: LD_INT 2
13736: EQUAL
13737: IFFALSE 13747
// btype := b_factory ;
13739: LD_ADDR_VAR 0 5
13743: PUSH
13744: LD_INT 3
13746: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13747: LD_ADDR_VAR 0 4
13751: PUSH
13752: LD_VAR 0 5
13756: PPUSH
13757: LD_VAR 0 1
13761: PPUSH
13762: CALL_OW 248
13766: PPUSH
13767: CALL_OW 450
13771: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13772: LD_ADDR_VAR 0 2
13776: PUSH
13777: LD_VAR 0 3
13781: PPUSH
13782: LD_INT 1
13784: PPUSH
13785: CALL_OW 275
13789: PUSH
13790: LD_VAR 0 4
13794: PUSH
13795: LD_INT 1
13797: ARRAY
13798: GREATEREQUAL
13799: PUSH
13800: LD_VAR 0 3
13804: PPUSH
13805: LD_INT 2
13807: PPUSH
13808: CALL_OW 275
13812: PUSH
13813: LD_VAR 0 4
13817: PUSH
13818: LD_INT 2
13820: ARRAY
13821: GREATEREQUAL
13822: AND
13823: PUSH
13824: LD_VAR 0 3
13828: PPUSH
13829: LD_INT 3
13831: PPUSH
13832: CALL_OW 275
13836: PUSH
13837: LD_VAR 0 4
13841: PUSH
13842: LD_INT 3
13844: ARRAY
13845: GREATEREQUAL
13846: AND
13847: ST_TO_ADDR
// end ;
13848: LD_VAR 0 2
13852: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13853: LD_INT 0
13855: PPUSH
13856: PPUSH
13857: PPUSH
// pom := GetBase ( building ) ;
13858: LD_ADDR_VAR 0 4
13862: PUSH
13863: LD_VAR 0 1
13867: PPUSH
13868: CALL_OW 274
13872: ST_TO_ADDR
// if not pom then
13873: LD_VAR 0 4
13877: NOT
13878: IFFALSE 13882
// exit ;
13880: GO 13983
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13882: LD_ADDR_VAR 0 5
13886: PUSH
13887: LD_VAR 0 2
13891: PPUSH
13892: LD_VAR 0 1
13896: PPUSH
13897: CALL_OW 248
13901: PPUSH
13902: CALL_OW 450
13906: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13907: LD_ADDR_VAR 0 3
13911: PUSH
13912: LD_VAR 0 4
13916: PPUSH
13917: LD_INT 1
13919: PPUSH
13920: CALL_OW 275
13924: PUSH
13925: LD_VAR 0 5
13929: PUSH
13930: LD_INT 1
13932: ARRAY
13933: GREATEREQUAL
13934: PUSH
13935: LD_VAR 0 4
13939: PPUSH
13940: LD_INT 2
13942: PPUSH
13943: CALL_OW 275
13947: PUSH
13948: LD_VAR 0 5
13952: PUSH
13953: LD_INT 2
13955: ARRAY
13956: GREATEREQUAL
13957: AND
13958: PUSH
13959: LD_VAR 0 4
13963: PPUSH
13964: LD_INT 3
13966: PPUSH
13967: CALL_OW 275
13971: PUSH
13972: LD_VAR 0 5
13976: PUSH
13977: LD_INT 3
13979: ARRAY
13980: GREATEREQUAL
13981: AND
13982: ST_TO_ADDR
// end ;
13983: LD_VAR 0 3
13987: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13988: LD_INT 0
13990: PPUSH
13991: PPUSH
13992: PPUSH
13993: PPUSH
13994: PPUSH
13995: PPUSH
13996: PPUSH
13997: PPUSH
13998: PPUSH
13999: PPUSH
14000: PPUSH
// result := false ;
14001: LD_ADDR_VAR 0 8
14005: PUSH
14006: LD_INT 0
14008: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14009: LD_VAR 0 5
14013: NOT
14014: PUSH
14015: LD_VAR 0 1
14019: NOT
14020: OR
14021: PUSH
14022: LD_VAR 0 2
14026: NOT
14027: OR
14028: PUSH
14029: LD_VAR 0 3
14033: NOT
14034: OR
14035: IFFALSE 14039
// exit ;
14037: GO 14853
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14039: LD_ADDR_VAR 0 14
14043: PUSH
14044: LD_VAR 0 1
14048: PPUSH
14049: LD_VAR 0 2
14053: PPUSH
14054: LD_VAR 0 3
14058: PPUSH
14059: LD_VAR 0 4
14063: PPUSH
14064: LD_VAR 0 5
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PPUSH
14073: CALL_OW 248
14077: PPUSH
14078: LD_INT 0
14080: PPUSH
14081: CALL 16106 0 6
14085: ST_TO_ADDR
// if not hexes then
14086: LD_VAR 0 14
14090: NOT
14091: IFFALSE 14095
// exit ;
14093: GO 14853
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14095: LD_ADDR_VAR 0 17
14099: PUSH
14100: LD_VAR 0 5
14104: PPUSH
14105: LD_INT 22
14107: PUSH
14108: LD_VAR 0 13
14112: PPUSH
14113: CALL_OW 255
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 2
14124: PUSH
14125: LD_INT 30
14127: PUSH
14128: LD_INT 0
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: LD_INT 30
14137: PUSH
14138: LD_INT 1
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PPUSH
14154: CALL_OW 72
14158: ST_TO_ADDR
// for i = 1 to hexes do
14159: LD_ADDR_VAR 0 9
14163: PUSH
14164: DOUBLE
14165: LD_INT 1
14167: DEC
14168: ST_TO_ADDR
14169: LD_VAR 0 14
14173: PUSH
14174: FOR_TO
14175: IFFALSE 14851
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14177: LD_ADDR_VAR 0 13
14181: PUSH
14182: LD_VAR 0 14
14186: PUSH
14187: LD_VAR 0 9
14191: ARRAY
14192: PUSH
14193: LD_INT 1
14195: ARRAY
14196: PPUSH
14197: LD_VAR 0 14
14201: PUSH
14202: LD_VAR 0 9
14206: ARRAY
14207: PUSH
14208: LD_INT 2
14210: ARRAY
14211: PPUSH
14212: CALL_OW 428
14216: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14217: LD_VAR 0 14
14221: PUSH
14222: LD_VAR 0 9
14226: ARRAY
14227: PUSH
14228: LD_INT 1
14230: ARRAY
14231: PPUSH
14232: LD_VAR 0 14
14236: PUSH
14237: LD_VAR 0 9
14241: ARRAY
14242: PUSH
14243: LD_INT 2
14245: ARRAY
14246: PPUSH
14247: CALL_OW 351
14251: PUSH
14252: LD_VAR 0 14
14256: PUSH
14257: LD_VAR 0 9
14261: ARRAY
14262: PUSH
14263: LD_INT 1
14265: ARRAY
14266: PPUSH
14267: LD_VAR 0 14
14271: PUSH
14272: LD_VAR 0 9
14276: ARRAY
14277: PUSH
14278: LD_INT 2
14280: ARRAY
14281: PPUSH
14282: CALL_OW 488
14286: NOT
14287: OR
14288: PUSH
14289: LD_VAR 0 13
14293: PPUSH
14294: CALL_OW 247
14298: PUSH
14299: LD_INT 3
14301: EQUAL
14302: OR
14303: IFFALSE 14309
// exit ;
14305: POP
14306: POP
14307: GO 14853
// if not tmp then
14309: LD_VAR 0 13
14313: NOT
14314: IFFALSE 14318
// continue ;
14316: GO 14174
// result := true ;
14318: LD_ADDR_VAR 0 8
14322: PUSH
14323: LD_INT 1
14325: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14326: LD_VAR 0 6
14330: PUSH
14331: LD_VAR 0 13
14335: PPUSH
14336: CALL_OW 247
14340: PUSH
14341: LD_INT 2
14343: EQUAL
14344: AND
14345: PUSH
14346: LD_VAR 0 13
14350: PPUSH
14351: CALL_OW 263
14355: PUSH
14356: LD_INT 1
14358: EQUAL
14359: AND
14360: IFFALSE 14524
// begin if IsDrivenBy ( tmp ) then
14362: LD_VAR 0 13
14366: PPUSH
14367: CALL_OW 311
14371: IFFALSE 14375
// continue ;
14373: GO 14174
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14375: LD_VAR 0 6
14379: PPUSH
14380: LD_INT 3
14382: PUSH
14383: LD_INT 60
14385: PUSH
14386: EMPTY
14387: LIST
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 3
14395: PUSH
14396: LD_INT 55
14398: PUSH
14399: EMPTY
14400: LIST
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 72
14414: IFFALSE 14522
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14416: LD_ADDR_VAR 0 18
14420: PUSH
14421: LD_VAR 0 6
14425: PPUSH
14426: LD_INT 3
14428: PUSH
14429: LD_INT 60
14431: PUSH
14432: EMPTY
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 3
14441: PUSH
14442: LD_INT 55
14444: PUSH
14445: EMPTY
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PPUSH
14456: CALL_OW 72
14460: PUSH
14461: LD_INT 1
14463: ARRAY
14464: ST_TO_ADDR
// if IsInUnit ( driver ) then
14465: LD_VAR 0 18
14469: PPUSH
14470: CALL_OW 310
14474: IFFALSE 14485
// ComExit ( driver ) ;
14476: LD_VAR 0 18
14480: PPUSH
14481: CALL 39979 0 1
// AddComEnterUnit ( driver , tmp ) ;
14485: LD_VAR 0 18
14489: PPUSH
14490: LD_VAR 0 13
14494: PPUSH
14495: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14499: LD_VAR 0 18
14503: PPUSH
14504: LD_VAR 0 7
14508: PPUSH
14509: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14513: LD_VAR 0 18
14517: PPUSH
14518: CALL_OW 181
// end ; continue ;
14522: GO 14174
// end ; if not cleaners or not tmp in cleaners then
14524: LD_VAR 0 6
14528: NOT
14529: PUSH
14530: LD_VAR 0 13
14534: PUSH
14535: LD_VAR 0 6
14539: IN
14540: NOT
14541: OR
14542: IFFALSE 14849
// begin if dep then
14544: LD_VAR 0 17
14548: IFFALSE 14684
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14550: LD_ADDR_VAR 0 16
14554: PUSH
14555: LD_VAR 0 17
14559: PUSH
14560: LD_INT 1
14562: ARRAY
14563: PPUSH
14564: CALL_OW 250
14568: PPUSH
14569: LD_VAR 0 17
14573: PUSH
14574: LD_INT 1
14576: ARRAY
14577: PPUSH
14578: CALL_OW 254
14582: PPUSH
14583: LD_INT 5
14585: PPUSH
14586: CALL_OW 272
14590: PUSH
14591: LD_VAR 0 17
14595: PUSH
14596: LD_INT 1
14598: ARRAY
14599: PPUSH
14600: CALL_OW 251
14604: PPUSH
14605: LD_VAR 0 17
14609: PUSH
14610: LD_INT 1
14612: ARRAY
14613: PPUSH
14614: CALL_OW 254
14618: PPUSH
14619: LD_INT 5
14621: PPUSH
14622: CALL_OW 273
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14631: LD_VAR 0 16
14635: PUSH
14636: LD_INT 1
14638: ARRAY
14639: PPUSH
14640: LD_VAR 0 16
14644: PUSH
14645: LD_INT 2
14647: ARRAY
14648: PPUSH
14649: CALL_OW 488
14653: IFFALSE 14684
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14655: LD_VAR 0 13
14659: PPUSH
14660: LD_VAR 0 16
14664: PUSH
14665: LD_INT 1
14667: ARRAY
14668: PPUSH
14669: LD_VAR 0 16
14673: PUSH
14674: LD_INT 2
14676: ARRAY
14677: PPUSH
14678: CALL_OW 111
// continue ;
14682: GO 14174
// end ; end ; r := GetDir ( tmp ) ;
14684: LD_ADDR_VAR 0 15
14688: PUSH
14689: LD_VAR 0 13
14693: PPUSH
14694: CALL_OW 254
14698: ST_TO_ADDR
// if r = 5 then
14699: LD_VAR 0 15
14703: PUSH
14704: LD_INT 5
14706: EQUAL
14707: IFFALSE 14717
// r := 0 ;
14709: LD_ADDR_VAR 0 15
14713: PUSH
14714: LD_INT 0
14716: ST_TO_ADDR
// for j = r to 5 do
14717: LD_ADDR_VAR 0 10
14721: PUSH
14722: DOUBLE
14723: LD_VAR 0 15
14727: DEC
14728: ST_TO_ADDR
14729: LD_INT 5
14731: PUSH
14732: FOR_TO
14733: IFFALSE 14847
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14735: LD_ADDR_VAR 0 11
14739: PUSH
14740: LD_VAR 0 13
14744: PPUSH
14745: CALL_OW 250
14749: PPUSH
14750: LD_VAR 0 10
14754: PPUSH
14755: LD_INT 2
14757: PPUSH
14758: CALL_OW 272
14762: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14763: LD_ADDR_VAR 0 12
14767: PUSH
14768: LD_VAR 0 13
14772: PPUSH
14773: CALL_OW 251
14777: PPUSH
14778: LD_VAR 0 10
14782: PPUSH
14783: LD_INT 2
14785: PPUSH
14786: CALL_OW 273
14790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14791: LD_VAR 0 11
14795: PPUSH
14796: LD_VAR 0 12
14800: PPUSH
14801: CALL_OW 488
14805: PUSH
14806: LD_VAR 0 11
14810: PPUSH
14811: LD_VAR 0 12
14815: PPUSH
14816: CALL_OW 428
14820: NOT
14821: AND
14822: IFFALSE 14845
// begin ComMoveXY ( tmp , _x , _y ) ;
14824: LD_VAR 0 13
14828: PPUSH
14829: LD_VAR 0 11
14833: PPUSH
14834: LD_VAR 0 12
14838: PPUSH
14839: CALL_OW 111
// break ;
14843: GO 14847
// end ; end ;
14845: GO 14732
14847: POP
14848: POP
// end ; end ;
14849: GO 14174
14851: POP
14852: POP
// end ;
14853: LD_VAR 0 8
14857: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14858: LD_INT 0
14860: PPUSH
// result := true ;
14861: LD_ADDR_VAR 0 3
14865: PUSH
14866: LD_INT 1
14868: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14869: LD_VAR 0 2
14873: PUSH
14874: LD_INT 24
14876: DOUBLE
14877: EQUAL
14878: IFTRUE 14888
14880: LD_INT 33
14882: DOUBLE
14883: EQUAL
14884: IFTRUE 14888
14886: GO 14913
14888: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14889: LD_ADDR_VAR 0 3
14893: PUSH
14894: LD_INT 32
14896: PPUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 321
14906: PUSH
14907: LD_INT 2
14909: EQUAL
14910: ST_TO_ADDR
14911: GO 15229
14913: LD_INT 20
14915: DOUBLE
14916: EQUAL
14917: IFTRUE 14921
14919: GO 14946
14921: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14922: LD_ADDR_VAR 0 3
14926: PUSH
14927: LD_INT 6
14929: PPUSH
14930: LD_VAR 0 1
14934: PPUSH
14935: CALL_OW 321
14939: PUSH
14940: LD_INT 2
14942: EQUAL
14943: ST_TO_ADDR
14944: GO 15229
14946: LD_INT 22
14948: DOUBLE
14949: EQUAL
14950: IFTRUE 14960
14952: LD_INT 36
14954: DOUBLE
14955: EQUAL
14956: IFTRUE 14960
14958: GO 14985
14960: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14961: LD_ADDR_VAR 0 3
14965: PUSH
14966: LD_INT 15
14968: PPUSH
14969: LD_VAR 0 1
14973: PPUSH
14974: CALL_OW 321
14978: PUSH
14979: LD_INT 2
14981: EQUAL
14982: ST_TO_ADDR
14983: GO 15229
14985: LD_INT 30
14987: DOUBLE
14988: EQUAL
14989: IFTRUE 14993
14991: GO 15018
14993: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14994: LD_ADDR_VAR 0 3
14998: PUSH
14999: LD_INT 20
15001: PPUSH
15002: LD_VAR 0 1
15006: PPUSH
15007: CALL_OW 321
15011: PUSH
15012: LD_INT 2
15014: EQUAL
15015: ST_TO_ADDR
15016: GO 15229
15018: LD_INT 28
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15032
15024: LD_INT 21
15026: DOUBLE
15027: EQUAL
15028: IFTRUE 15032
15030: GO 15057
15032: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15033: LD_ADDR_VAR 0 3
15037: PUSH
15038: LD_INT 21
15040: PPUSH
15041: LD_VAR 0 1
15045: PPUSH
15046: CALL_OW 321
15050: PUSH
15051: LD_INT 2
15053: EQUAL
15054: ST_TO_ADDR
15055: GO 15229
15057: LD_INT 16
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15090
15065: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15066: LD_ADDR_VAR 0 3
15070: PUSH
15071: LD_INT 84
15073: PPUSH
15074: LD_VAR 0 1
15078: PPUSH
15079: CALL_OW 321
15083: PUSH
15084: LD_INT 2
15086: EQUAL
15087: ST_TO_ADDR
15088: GO 15229
15090: LD_INT 19
15092: DOUBLE
15093: EQUAL
15094: IFTRUE 15104
15096: LD_INT 23
15098: DOUBLE
15099: EQUAL
15100: IFTRUE 15104
15102: GO 15129
15104: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_INT 83
15112: PPUSH
15113: LD_VAR 0 1
15117: PPUSH
15118: CALL_OW 321
15122: PUSH
15123: LD_INT 2
15125: EQUAL
15126: ST_TO_ADDR
15127: GO 15229
15129: LD_INT 17
15131: DOUBLE
15132: EQUAL
15133: IFTRUE 15137
15135: GO 15162
15137: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15138: LD_ADDR_VAR 0 3
15142: PUSH
15143: LD_INT 39
15145: PPUSH
15146: LD_VAR 0 1
15150: PPUSH
15151: CALL_OW 321
15155: PUSH
15156: LD_INT 2
15158: EQUAL
15159: ST_TO_ADDR
15160: GO 15229
15162: LD_INT 18
15164: DOUBLE
15165: EQUAL
15166: IFTRUE 15170
15168: GO 15195
15170: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15171: LD_ADDR_VAR 0 3
15175: PUSH
15176: LD_INT 40
15178: PPUSH
15179: LD_VAR 0 1
15183: PPUSH
15184: CALL_OW 321
15188: PUSH
15189: LD_INT 2
15191: EQUAL
15192: ST_TO_ADDR
15193: GO 15229
15195: LD_INT 27
15197: DOUBLE
15198: EQUAL
15199: IFTRUE 15203
15201: GO 15228
15203: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15204: LD_ADDR_VAR 0 3
15208: PUSH
15209: LD_INT 35
15211: PPUSH
15212: LD_VAR 0 1
15216: PPUSH
15217: CALL_OW 321
15221: PUSH
15222: LD_INT 2
15224: EQUAL
15225: ST_TO_ADDR
15226: GO 15229
15228: POP
// end ;
15229: LD_VAR 0 3
15233: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15234: LD_INT 0
15236: PPUSH
15237: PPUSH
15238: PPUSH
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
// result := false ;
15247: LD_ADDR_VAR 0 6
15251: PUSH
15252: LD_INT 0
15254: ST_TO_ADDR
// if btype = b_depot then
15255: LD_VAR 0 2
15259: PUSH
15260: LD_INT 0
15262: EQUAL
15263: IFFALSE 15275
// begin result := true ;
15265: LD_ADDR_VAR 0 6
15269: PUSH
15270: LD_INT 1
15272: ST_TO_ADDR
// exit ;
15273: GO 16101
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15275: LD_VAR 0 1
15279: NOT
15280: PUSH
15281: LD_VAR 0 1
15285: PPUSH
15286: CALL_OW 266
15290: PUSH
15291: LD_INT 0
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: IN
15301: NOT
15302: OR
15303: PUSH
15304: LD_VAR 0 2
15308: NOT
15309: OR
15310: PUSH
15311: LD_VAR 0 5
15315: PUSH
15316: LD_INT 0
15318: PUSH
15319: LD_INT 1
15321: PUSH
15322: LD_INT 2
15324: PUSH
15325: LD_INT 3
15327: PUSH
15328: LD_INT 4
15330: PUSH
15331: LD_INT 5
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: IN
15342: NOT
15343: OR
15344: PUSH
15345: LD_VAR 0 3
15349: PPUSH
15350: LD_VAR 0 4
15354: PPUSH
15355: CALL_OW 488
15359: NOT
15360: OR
15361: IFFALSE 15365
// exit ;
15363: GO 16101
// side := GetSide ( depot ) ;
15365: LD_ADDR_VAR 0 9
15369: PUSH
15370: LD_VAR 0 1
15374: PPUSH
15375: CALL_OW 255
15379: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15380: LD_VAR 0 9
15384: PPUSH
15385: LD_VAR 0 2
15389: PPUSH
15390: CALL 14858 0 2
15394: NOT
15395: IFFALSE 15399
// exit ;
15397: GO 16101
// pom := GetBase ( depot ) ;
15399: LD_ADDR_VAR 0 10
15403: PUSH
15404: LD_VAR 0 1
15408: PPUSH
15409: CALL_OW 274
15413: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15414: LD_ADDR_VAR 0 11
15418: PUSH
15419: LD_VAR 0 2
15423: PPUSH
15424: LD_VAR 0 1
15428: PPUSH
15429: CALL_OW 248
15433: PPUSH
15434: CALL_OW 450
15438: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15439: LD_VAR 0 10
15443: PPUSH
15444: LD_INT 1
15446: PPUSH
15447: CALL_OW 275
15451: PUSH
15452: LD_VAR 0 11
15456: PUSH
15457: LD_INT 1
15459: ARRAY
15460: GREATEREQUAL
15461: PUSH
15462: LD_VAR 0 10
15466: PPUSH
15467: LD_INT 2
15469: PPUSH
15470: CALL_OW 275
15474: PUSH
15475: LD_VAR 0 11
15479: PUSH
15480: LD_INT 2
15482: ARRAY
15483: GREATEREQUAL
15484: AND
15485: PUSH
15486: LD_VAR 0 10
15490: PPUSH
15491: LD_INT 3
15493: PPUSH
15494: CALL_OW 275
15498: PUSH
15499: LD_VAR 0 11
15503: PUSH
15504: LD_INT 3
15506: ARRAY
15507: GREATEREQUAL
15508: AND
15509: NOT
15510: IFFALSE 15514
// exit ;
15512: GO 16101
// if GetBType ( depot ) = b_depot then
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 266
15523: PUSH
15524: LD_INT 0
15526: EQUAL
15527: IFFALSE 15539
// dist := 28 else
15529: LD_ADDR_VAR 0 14
15533: PUSH
15534: LD_INT 28
15536: ST_TO_ADDR
15537: GO 15547
// dist := 36 ;
15539: LD_ADDR_VAR 0 14
15543: PUSH
15544: LD_INT 36
15546: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15547: LD_VAR 0 1
15551: PPUSH
15552: LD_VAR 0 3
15556: PPUSH
15557: LD_VAR 0 4
15561: PPUSH
15562: CALL_OW 297
15566: PUSH
15567: LD_VAR 0 14
15571: GREATER
15572: IFFALSE 15576
// exit ;
15574: GO 16101
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15576: LD_ADDR_VAR 0 12
15580: PUSH
15581: LD_VAR 0 2
15585: PPUSH
15586: LD_VAR 0 3
15590: PPUSH
15591: LD_VAR 0 4
15595: PPUSH
15596: LD_VAR 0 5
15600: PPUSH
15601: LD_VAR 0 1
15605: PPUSH
15606: CALL_OW 248
15610: PPUSH
15611: LD_INT 0
15613: PPUSH
15614: CALL 16106 0 6
15618: ST_TO_ADDR
// if not hexes then
15619: LD_VAR 0 12
15623: NOT
15624: IFFALSE 15628
// exit ;
15626: GO 16101
// hex := GetHexInfo ( x , y ) ;
15628: LD_ADDR_VAR 0 15
15632: PUSH
15633: LD_VAR 0 3
15637: PPUSH
15638: LD_VAR 0 4
15642: PPUSH
15643: CALL_OW 546
15647: ST_TO_ADDR
// if hex [ 1 ] then
15648: LD_VAR 0 15
15652: PUSH
15653: LD_INT 1
15655: ARRAY
15656: IFFALSE 15660
// exit ;
15658: GO 16101
// height := hex [ 2 ] ;
15660: LD_ADDR_VAR 0 13
15664: PUSH
15665: LD_VAR 0 15
15669: PUSH
15670: LD_INT 2
15672: ARRAY
15673: ST_TO_ADDR
// for i = 1 to hexes do
15674: LD_ADDR_VAR 0 7
15678: PUSH
15679: DOUBLE
15680: LD_INT 1
15682: DEC
15683: ST_TO_ADDR
15684: LD_VAR 0 12
15688: PUSH
15689: FOR_TO
15690: IFFALSE 16020
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15692: LD_VAR 0 12
15696: PUSH
15697: LD_VAR 0 7
15701: ARRAY
15702: PUSH
15703: LD_INT 1
15705: ARRAY
15706: PPUSH
15707: LD_VAR 0 12
15711: PUSH
15712: LD_VAR 0 7
15716: ARRAY
15717: PUSH
15718: LD_INT 2
15720: ARRAY
15721: PPUSH
15722: CALL_OW 488
15726: NOT
15727: PUSH
15728: LD_VAR 0 12
15732: PUSH
15733: LD_VAR 0 7
15737: ARRAY
15738: PUSH
15739: LD_INT 1
15741: ARRAY
15742: PPUSH
15743: LD_VAR 0 12
15747: PUSH
15748: LD_VAR 0 7
15752: ARRAY
15753: PUSH
15754: LD_INT 2
15756: ARRAY
15757: PPUSH
15758: CALL_OW 428
15762: PUSH
15763: LD_INT 0
15765: GREATER
15766: OR
15767: PUSH
15768: LD_VAR 0 12
15772: PUSH
15773: LD_VAR 0 7
15777: ARRAY
15778: PUSH
15779: LD_INT 1
15781: ARRAY
15782: PPUSH
15783: LD_VAR 0 12
15787: PUSH
15788: LD_VAR 0 7
15792: ARRAY
15793: PUSH
15794: LD_INT 2
15796: ARRAY
15797: PPUSH
15798: CALL_OW 351
15802: OR
15803: IFFALSE 15809
// exit ;
15805: POP
15806: POP
15807: GO 16101
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15809: LD_ADDR_VAR 0 8
15813: PUSH
15814: LD_VAR 0 12
15818: PUSH
15819: LD_VAR 0 7
15823: ARRAY
15824: PUSH
15825: LD_INT 1
15827: ARRAY
15828: PPUSH
15829: LD_VAR 0 12
15833: PUSH
15834: LD_VAR 0 7
15838: ARRAY
15839: PUSH
15840: LD_INT 2
15842: ARRAY
15843: PPUSH
15844: CALL_OW 546
15848: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15849: LD_VAR 0 8
15853: PUSH
15854: LD_INT 1
15856: ARRAY
15857: PUSH
15858: LD_VAR 0 8
15862: PUSH
15863: LD_INT 2
15865: ARRAY
15866: PUSH
15867: LD_VAR 0 13
15871: PUSH
15872: LD_INT 2
15874: PLUS
15875: GREATER
15876: OR
15877: PUSH
15878: LD_VAR 0 8
15882: PUSH
15883: LD_INT 2
15885: ARRAY
15886: PUSH
15887: LD_VAR 0 13
15891: PUSH
15892: LD_INT 2
15894: MINUS
15895: LESS
15896: OR
15897: PUSH
15898: LD_VAR 0 8
15902: PUSH
15903: LD_INT 3
15905: ARRAY
15906: PUSH
15907: LD_INT 0
15909: PUSH
15910: LD_INT 8
15912: PUSH
15913: LD_INT 9
15915: PUSH
15916: LD_INT 10
15918: PUSH
15919: LD_INT 11
15921: PUSH
15922: LD_INT 12
15924: PUSH
15925: LD_INT 13
15927: PUSH
15928: LD_INT 16
15930: PUSH
15931: LD_INT 17
15933: PUSH
15934: LD_INT 18
15936: PUSH
15937: LD_INT 19
15939: PUSH
15940: LD_INT 20
15942: PUSH
15943: LD_INT 21
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: IN
15961: NOT
15962: OR
15963: PUSH
15964: LD_VAR 0 8
15968: PUSH
15969: LD_INT 5
15971: ARRAY
15972: NOT
15973: OR
15974: PUSH
15975: LD_VAR 0 8
15979: PUSH
15980: LD_INT 6
15982: ARRAY
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: LD_INT 2
15989: PUSH
15990: LD_INT 7
15992: PUSH
15993: LD_INT 9
15995: PUSH
15996: LD_INT 10
15998: PUSH
15999: LD_INT 11
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: IN
16010: NOT
16011: OR
16012: IFFALSE 16018
// exit ;
16014: POP
16015: POP
16016: GO 16101
// end ;
16018: GO 15689
16020: POP
16021: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16022: LD_VAR 0 9
16026: PPUSH
16027: LD_VAR 0 3
16031: PPUSH
16032: LD_VAR 0 4
16036: PPUSH
16037: LD_INT 20
16039: PPUSH
16040: CALL 8024 0 4
16044: PUSH
16045: LD_INT 4
16047: ARRAY
16048: IFFALSE 16052
// exit ;
16050: GO 16101
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16052: LD_VAR 0 2
16056: PUSH
16057: LD_INT 29
16059: PUSH
16060: LD_INT 30
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: IN
16067: PUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: LD_VAR 0 4
16077: PPUSH
16078: LD_VAR 0 9
16082: PPUSH
16083: CALL_OW 440
16087: NOT
16088: AND
16089: IFFALSE 16093
// exit ;
16091: GO 16101
// result := true ;
16093: LD_ADDR_VAR 0 6
16097: PUSH
16098: LD_INT 1
16100: ST_TO_ADDR
// end ;
16101: LD_VAR 0 6
16105: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16106: LD_INT 0
16108: PPUSH
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
16118: PPUSH
16119: PPUSH
16120: PPUSH
16121: PPUSH
16122: PPUSH
16123: PPUSH
16124: PPUSH
16125: PPUSH
16126: PPUSH
16127: PPUSH
16128: PPUSH
16129: PPUSH
16130: PPUSH
16131: PPUSH
16132: PPUSH
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
16141: PPUSH
16142: PPUSH
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
16149: PPUSH
16150: PPUSH
16151: PPUSH
16152: PPUSH
16153: PPUSH
16154: PPUSH
16155: PPUSH
16156: PPUSH
16157: PPUSH
16158: PPUSH
16159: PPUSH
16160: PPUSH
16161: PPUSH
16162: PPUSH
16163: PPUSH
16164: PPUSH
16165: PPUSH
// result = [ ] ;
16166: LD_ADDR_VAR 0 7
16170: PUSH
16171: EMPTY
16172: ST_TO_ADDR
// temp_list = [ ] ;
16173: LD_ADDR_VAR 0 9
16177: PUSH
16178: EMPTY
16179: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16180: LD_VAR 0 4
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: LD_INT 2
16193: PUSH
16194: LD_INT 3
16196: PUSH
16197: LD_INT 4
16199: PUSH
16200: LD_INT 5
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: IN
16211: NOT
16212: PUSH
16213: LD_VAR 0 1
16217: PUSH
16218: LD_INT 0
16220: PUSH
16221: LD_INT 1
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: IN
16228: PUSH
16229: LD_VAR 0 5
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: LD_INT 2
16239: PUSH
16240: LD_INT 3
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: IN
16248: NOT
16249: AND
16250: OR
16251: IFFALSE 16255
// exit ;
16253: GO 34646
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16255: LD_VAR 0 1
16259: PUSH
16260: LD_INT 6
16262: PUSH
16263: LD_INT 7
16265: PUSH
16266: LD_INT 8
16268: PUSH
16269: LD_INT 13
16271: PUSH
16272: LD_INT 12
16274: PUSH
16275: LD_INT 15
16277: PUSH
16278: LD_INT 11
16280: PUSH
16281: LD_INT 14
16283: PUSH
16284: LD_INT 10
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: IN
16298: IFFALSE 16308
// btype = b_lab ;
16300: LD_ADDR_VAR 0 1
16304: PUSH
16305: LD_INT 6
16307: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16308: LD_VAR 0 6
16312: PUSH
16313: LD_INT 0
16315: PUSH
16316: LD_INT 1
16318: PUSH
16319: LD_INT 2
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: LIST
16326: IN
16327: NOT
16328: PUSH
16329: LD_VAR 0 1
16333: PUSH
16334: LD_INT 0
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: LD_INT 2
16342: PUSH
16343: LD_INT 3
16345: PUSH
16346: LD_INT 6
16348: PUSH
16349: LD_INT 36
16351: PUSH
16352: LD_INT 4
16354: PUSH
16355: LD_INT 5
16357: PUSH
16358: LD_INT 31
16360: PUSH
16361: LD_INT 32
16363: PUSH
16364: LD_INT 33
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: IN
16380: NOT
16381: PUSH
16382: LD_VAR 0 6
16386: PUSH
16387: LD_INT 1
16389: EQUAL
16390: AND
16391: OR
16392: PUSH
16393: LD_VAR 0 1
16397: PUSH
16398: LD_INT 2
16400: PUSH
16401: LD_INT 3
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: IN
16408: NOT
16409: PUSH
16410: LD_VAR 0 6
16414: PUSH
16415: LD_INT 2
16417: EQUAL
16418: AND
16419: OR
16420: IFFALSE 16430
// mode = 0 ;
16422: LD_ADDR_VAR 0 6
16426: PUSH
16427: LD_INT 0
16429: ST_TO_ADDR
// case mode of 0 :
16430: LD_VAR 0 6
16434: PUSH
16435: LD_INT 0
16437: DOUBLE
16438: EQUAL
16439: IFTRUE 16443
16441: GO 27896
16443: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16444: LD_ADDR_VAR 0 11
16448: PUSH
16449: LD_INT 0
16451: PUSH
16452: LD_INT 0
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 0
16461: PUSH
16462: LD_INT 1
16464: NEG
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 1
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 1
16482: PUSH
16483: LD_INT 1
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 0
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 1
16502: NEG
16503: PUSH
16504: LD_INT 0
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 1
16513: NEG
16514: PUSH
16515: LD_INT 1
16517: NEG
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 1
16525: NEG
16526: PUSH
16527: LD_INT 2
16529: NEG
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 0
16537: PUSH
16538: LD_INT 2
16540: NEG
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 1
16548: PUSH
16549: LD_INT 1
16551: NEG
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 1
16559: PUSH
16560: LD_INT 2
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 0
16569: PUSH
16570: LD_INT 2
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 1
16579: NEG
16580: PUSH
16581: LD_INT 1
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: LD_INT 3
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 0
16600: PUSH
16601: LD_INT 3
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: NEG
16611: PUSH
16612: LD_INT 2
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16637: LD_ADDR_VAR 0 12
16641: PUSH
16642: LD_INT 0
16644: PUSH
16645: LD_INT 0
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 0
16654: PUSH
16655: LD_INT 1
16657: NEG
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: LD_INT 0
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 1
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 0
16685: PUSH
16686: LD_INT 1
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 1
16695: NEG
16696: PUSH
16697: LD_INT 0
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 1
16706: NEG
16707: PUSH
16708: LD_INT 1
16710: NEG
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 1
16718: PUSH
16719: LD_INT 1
16721: NEG
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 2
16729: PUSH
16730: LD_INT 0
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 1
16749: NEG
16750: PUSH
16751: LD_INT 1
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 2
16760: NEG
16761: PUSH
16762: LD_INT 0
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 2
16771: NEG
16772: PUSH
16773: LD_INT 1
16775: NEG
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 2
16783: NEG
16784: PUSH
16785: LD_INT 1
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 3
16794: NEG
16795: PUSH
16796: LD_INT 0
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 3
16805: NEG
16806: PUSH
16807: LD_INT 1
16809: NEG
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16833: LD_ADDR_VAR 0 13
16837: PUSH
16838: LD_INT 0
16840: PUSH
16841: LD_INT 0
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 0
16850: PUSH
16851: LD_INT 1
16853: NEG
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 1
16861: PUSH
16862: LD_INT 0
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 1
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 0
16881: PUSH
16882: LD_INT 1
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 1
16891: NEG
16892: PUSH
16893: LD_INT 0
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 1
16902: NEG
16903: PUSH
16904: LD_INT 1
16906: NEG
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 1
16914: NEG
16915: PUSH
16916: LD_INT 2
16918: NEG
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 2
16926: PUSH
16927: LD_INT 1
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 2
16936: PUSH
16937: LD_INT 2
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 2
16956: NEG
16957: PUSH
16958: LD_INT 1
16960: NEG
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 2
16968: NEG
16969: PUSH
16970: LD_INT 2
16972: NEG
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 2
16980: NEG
16981: PUSH
16982: LD_INT 3
16984: NEG
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 3
16992: NEG
16993: PUSH
16994: LD_INT 2
16996: NEG
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 3
17004: NEG
17005: PUSH
17006: LD_INT 3
17008: NEG
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17032: LD_ADDR_VAR 0 14
17036: PUSH
17037: LD_INT 0
17039: PUSH
17040: LD_INT 0
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: LD_INT 1
17052: NEG
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: LD_INT 0
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 1
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 0
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 1
17090: NEG
17091: PUSH
17092: LD_INT 0
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 1
17101: NEG
17102: PUSH
17103: LD_INT 1
17105: NEG
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 1
17113: NEG
17114: PUSH
17115: LD_INT 2
17117: NEG
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 0
17125: PUSH
17126: LD_INT 2
17128: NEG
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 1
17136: PUSH
17137: LD_INT 1
17139: NEG
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 0
17157: PUSH
17158: LD_INT 2
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 1
17167: NEG
17168: PUSH
17169: LD_INT 1
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 1
17178: NEG
17179: PUSH
17180: LD_INT 3
17182: NEG
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 0
17190: PUSH
17191: LD_INT 3
17193: NEG
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: LD_INT 2
17204: NEG
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17228: LD_ADDR_VAR 0 15
17232: PUSH
17233: LD_INT 0
17235: PUSH
17236: LD_INT 0
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 0
17245: PUSH
17246: LD_INT 1
17248: NEG
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 1
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 1
17266: PUSH
17267: LD_INT 1
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 0
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 1
17286: NEG
17287: PUSH
17288: LD_INT 0
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 1
17297: NEG
17298: PUSH
17299: LD_INT 1
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 1
17309: PUSH
17310: LD_INT 1
17312: NEG
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 2
17320: PUSH
17321: LD_INT 0
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 2
17330: PUSH
17331: LD_INT 1
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 1
17340: NEG
17341: PUSH
17342: LD_INT 1
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 2
17351: NEG
17352: PUSH
17353: LD_INT 0
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 2
17362: NEG
17363: PUSH
17364: LD_INT 1
17366: NEG
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 2
17374: PUSH
17375: LD_INT 1
17377: NEG
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 3
17385: PUSH
17386: LD_INT 0
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 3
17395: PUSH
17396: LD_INT 1
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17421: LD_ADDR_VAR 0 16
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: LD_INT 0
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 0
17438: PUSH
17439: LD_INT 1
17441: NEG
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: LD_INT 0
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 1
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 0
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 1
17479: NEG
17480: PUSH
17481: LD_INT 0
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 1
17490: NEG
17491: PUSH
17492: LD_INT 1
17494: NEG
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: LD_INT 2
17506: NEG
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 1
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 2
17524: PUSH
17525: LD_INT 2
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: LD_INT 2
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 2
17544: NEG
17545: PUSH
17546: LD_INT 1
17548: NEG
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 2
17556: NEG
17557: PUSH
17558: LD_INT 2
17560: NEG
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 3
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 3
17578: PUSH
17579: LD_INT 3
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 2
17588: PUSH
17589: LD_INT 3
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17614: LD_ADDR_VAR 0 17
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: LD_INT 0
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 0
17631: PUSH
17632: LD_INT 1
17634: NEG
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: LD_INT 0
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 1
17652: PUSH
17653: LD_INT 1
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 0
17662: PUSH
17663: LD_INT 1
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 1
17672: NEG
17673: PUSH
17674: LD_INT 0
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 1
17683: NEG
17684: PUSH
17685: LD_INT 1
17687: NEG
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 1
17695: NEG
17696: PUSH
17697: LD_INT 2
17699: NEG
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 0
17707: PUSH
17708: LD_INT 2
17710: NEG
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 2
17729: PUSH
17730: LD_INT 0
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: LD_INT 2
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: LD_INT 2
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 1
17779: NEG
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 2
17790: NEG
17791: PUSH
17792: LD_INT 0
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 2
17801: NEG
17802: PUSH
17803: LD_INT 1
17805: NEG
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 2
17813: NEG
17814: PUSH
17815: LD_INT 2
17817: NEG
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17844: LD_ADDR_VAR 0 18
17848: PUSH
17849: LD_INT 0
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 0
17861: PUSH
17862: LD_INT 1
17864: NEG
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: LD_INT 0
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: LD_INT 1
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: LD_INT 1
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: NEG
17903: PUSH
17904: LD_INT 0
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 1
17913: NEG
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 1
17925: NEG
17926: PUSH
17927: LD_INT 2
17929: NEG
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 0
17937: PUSH
17938: LD_INT 2
17940: NEG
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 1
17948: PUSH
17949: LD_INT 1
17951: NEG
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: LD_INT 0
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 2
17969: PUSH
17970: LD_INT 1
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 2
17979: PUSH
17980: LD_INT 2
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: LD_INT 2
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: LD_INT 2
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 1
18009: NEG
18010: PUSH
18011: LD_INT 1
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 2
18020: NEG
18021: PUSH
18022: LD_INT 0
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 2
18031: NEG
18032: PUSH
18033: LD_INT 1
18035: NEG
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 2
18043: NEG
18044: PUSH
18045: LD_INT 2
18047: NEG
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18074: LD_ADDR_VAR 0 19
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: LD_INT 0
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 0
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 1
18102: PUSH
18103: LD_INT 0
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 0
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 1
18132: NEG
18133: PUSH
18134: LD_INT 0
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 1
18143: NEG
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 1
18155: NEG
18156: PUSH
18157: LD_INT 2
18159: NEG
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 2
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: LD_INT 1
18181: NEG
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 2
18189: PUSH
18190: LD_INT 0
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 2
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 2
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: LD_INT 2
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 1
18239: NEG
18240: PUSH
18241: LD_INT 1
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 2
18250: NEG
18251: PUSH
18252: LD_INT 0
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 2
18261: NEG
18262: PUSH
18263: LD_INT 1
18265: NEG
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: LD_INT 2
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18304: LD_ADDR_VAR 0 20
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: LD_INT 0
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 0
18321: PUSH
18322: LD_INT 1
18324: NEG
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 1
18332: PUSH
18333: LD_INT 0
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: LD_INT 1
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 0
18352: PUSH
18353: LD_INT 1
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 1
18362: NEG
18363: PUSH
18364: LD_INT 0
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 1
18373: NEG
18374: PUSH
18375: LD_INT 1
18377: NEG
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 1
18385: NEG
18386: PUSH
18387: LD_INT 2
18389: NEG
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 0
18397: PUSH
18398: LD_INT 2
18400: NEG
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: LD_INT 1
18411: NEG
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 2
18419: PUSH
18420: LD_INT 0
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 2
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: LD_INT 2
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: LD_INT 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: LD_INT 2
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 1
18469: NEG
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 2
18480: NEG
18481: PUSH
18482: LD_INT 0
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 2
18491: NEG
18492: PUSH
18493: LD_INT 1
18495: NEG
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 2
18503: NEG
18504: PUSH
18505: LD_INT 2
18507: NEG
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18534: LD_ADDR_VAR 0 21
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: LD_INT 1
18554: NEG
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: LD_INT 0
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: LD_INT 1
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 0
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 1
18592: NEG
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 1
18603: NEG
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 1
18615: NEG
18616: PUSH
18617: LD_INT 2
18619: NEG
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: LD_INT 2
18630: NEG
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: LD_INT 1
18641: NEG
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 2
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 1
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 0
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 1
18699: NEG
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 2
18710: NEG
18711: PUSH
18712: LD_INT 0
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 2
18721: NEG
18722: PUSH
18723: LD_INT 1
18725: NEG
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 2
18733: NEG
18734: PUSH
18735: LD_INT 2
18737: NEG
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18764: LD_ADDR_VAR 0 22
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 0
18781: PUSH
18782: LD_INT 1
18784: NEG
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: LD_INT 0
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 0
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 1
18822: NEG
18823: PUSH
18824: LD_INT 0
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 1
18833: NEG
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 1
18845: NEG
18846: PUSH
18847: LD_INT 2
18849: NEG
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 0
18857: PUSH
18858: LD_INT 2
18860: NEG
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: LD_INT 1
18871: NEG
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: LD_INT 2
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: LD_INT 2
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 2
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 1
18929: NEG
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 2
18940: NEG
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 2
18951: NEG
18952: PUSH
18953: LD_INT 1
18955: NEG
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 2
18963: NEG
18964: PUSH
18965: LD_INT 2
18967: NEG
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18994: LD_ADDR_VAR 0 23
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: LD_INT 0
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: LD_INT 1
19014: NEG
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 1
19022: PUSH
19023: LD_INT 0
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: PUSH
19033: LD_INT 1
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 0
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 1
19052: NEG
19053: PUSH
19054: LD_INT 0
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 1
19063: NEG
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 1
19075: NEG
19076: PUSH
19077: LD_INT 2
19079: NEG
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 0
19087: PUSH
19088: LD_INT 2
19090: NEG
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: LD_INT 1
19101: NEG
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 2
19129: PUSH
19130: LD_INT 2
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: LD_INT 2
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 0
19149: PUSH
19150: LD_INT 2
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: NEG
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 2
19170: NEG
19171: PUSH
19172: LD_INT 0
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 2
19181: NEG
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 2
19193: NEG
19194: PUSH
19195: LD_INT 2
19197: NEG
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 2
19205: NEG
19206: PUSH
19207: LD_INT 3
19209: NEG
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 1
19217: NEG
19218: PUSH
19219: LD_INT 3
19221: NEG
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: LD_INT 2
19232: NEG
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: LD_INT 1
19243: NEG
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19274: LD_ADDR_VAR 0 24
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: LD_INT 1
19294: NEG
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 0
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: LD_INT 0
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 1
19343: NEG
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: LD_INT 2
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: LD_INT 2
19370: NEG
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: LD_INT 1
19381: NEG
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 2
19389: PUSH
19390: LD_INT 0
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 2
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: LD_INT 2
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 0
19429: PUSH
19430: LD_INT 2
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 1
19439: NEG
19440: PUSH
19441: LD_INT 1
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 2
19450: NEG
19451: PUSH
19452: LD_INT 0
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 2
19461: NEG
19462: PUSH
19463: LD_INT 1
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: NEG
19474: PUSH
19475: LD_INT 2
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: LD_INT 2
19488: NEG
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: LD_INT 1
19499: NEG
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 3
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 3
19517: PUSH
19518: LD_INT 2
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19550: LD_ADDR_VAR 0 25
19554: PUSH
19555: LD_INT 0
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: LD_INT 1
19570: NEG
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: NEG
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: LD_INT 2
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 0
19643: PUSH
19644: LD_INT 2
19646: NEG
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: PUSH
19655: LD_INT 1
19657: NEG
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: LD_INT 0
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 2
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 2
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 0
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 1
19715: NEG
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 2
19726: NEG
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 2
19737: NEG
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 2
19749: NEG
19750: PUSH
19751: LD_INT 2
19753: NEG
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 3
19761: PUSH
19762: LD_INT 1
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 3
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 2
19781: PUSH
19782: LD_INT 3
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: LD_INT 3
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19824: LD_ADDR_VAR 0 26
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 0
19841: PUSH
19842: LD_INT 1
19844: NEG
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: LD_INT 1
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 1
19882: NEG
19883: PUSH
19884: LD_INT 0
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 1
19893: NEG
19894: PUSH
19895: LD_INT 1
19897: NEG
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 1
19905: NEG
19906: PUSH
19907: LD_INT 2
19909: NEG
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 0
19917: PUSH
19918: LD_INT 2
19920: NEG
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 2
19939: PUSH
19940: LD_INT 0
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 2
19949: PUSH
19950: LD_INT 1
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 2
19959: PUSH
19960: LD_INT 2
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 1
19969: PUSH
19970: LD_INT 2
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 0
19979: PUSH
19980: LD_INT 2
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 1
19989: NEG
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 2
20000: NEG
20001: PUSH
20002: LD_INT 0
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 2
20011: NEG
20012: PUSH
20013: LD_INT 1
20015: NEG
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 2
20023: NEG
20024: PUSH
20025: LD_INT 2
20027: NEG
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 2
20035: PUSH
20036: LD_INT 3
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 1
20045: PUSH
20046: LD_INT 3
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 1
20055: NEG
20056: PUSH
20057: LD_INT 2
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 2
20066: NEG
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20100: LD_ADDR_VAR 0 27
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: LD_INT 0
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: LD_INT 1
20173: NEG
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 1
20181: NEG
20182: PUSH
20183: LD_INT 2
20185: NEG
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: LD_INT 2
20196: NEG
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: LD_INT 1
20207: NEG
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: PUSH
20216: LD_INT 0
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 2
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 0
20255: PUSH
20256: LD_INT 2
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 1
20265: NEG
20266: PUSH
20267: LD_INT 1
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 2
20276: NEG
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 2
20287: NEG
20288: PUSH
20289: LD_INT 1
20291: NEG
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 2
20299: NEG
20300: PUSH
20301: LD_INT 2
20303: NEG
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 1
20311: NEG
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 2
20322: NEG
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 3
20333: NEG
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 3
20345: NEG
20346: PUSH
20347: LD_INT 2
20349: NEG
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20380: LD_ADDR_VAR 0 28
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: LD_INT 0
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: LD_INT 1
20400: NEG
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: PUSH
20409: LD_INT 0
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 1
20438: NEG
20439: PUSH
20440: LD_INT 0
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: LD_INT 1
20453: NEG
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 1
20461: NEG
20462: PUSH
20463: LD_INT 2
20465: NEG
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 0
20473: PUSH
20474: LD_INT 2
20476: NEG
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: LD_INT 1
20487: NEG
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 2
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: LD_INT 1
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 2
20515: PUSH
20516: LD_INT 2
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 0
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: NEG
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: LD_INT 2
20556: NEG
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 2
20567: NEG
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 2
20579: NEG
20580: PUSH
20581: LD_INT 2
20583: NEG
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 2
20591: NEG
20592: PUSH
20593: LD_INT 3
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: LD_INT 3
20607: NEG
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 3
20615: NEG
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 3
20627: NEG
20628: PUSH
20629: LD_INT 2
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20662: LD_ADDR_VAR 0 29
20666: PUSH
20667: LD_INT 0
20669: PUSH
20670: LD_INT 0
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: LD_INT 1
20682: NEG
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 1
20720: NEG
20721: PUSH
20722: LD_INT 0
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 1
20731: NEG
20732: PUSH
20733: LD_INT 1
20735: NEG
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: LD_INT 2
20747: NEG
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: LD_INT 2
20758: NEG
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: LD_INT 1
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 1
20797: PUSH
20798: LD_INT 2
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 0
20807: PUSH
20808: LD_INT 2
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 1
20817: NEG
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 2
20828: NEG
20829: PUSH
20830: LD_INT 1
20832: NEG
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 2
20840: NEG
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 2
20852: NEG
20853: PUSH
20854: LD_INT 3
20856: NEG
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 2
20864: PUSH
20865: LD_INT 1
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 3
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: LD_INT 3
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: NEG
20896: PUSH
20897: LD_INT 2
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 3
20906: NEG
20907: PUSH
20908: LD_INT 2
20910: NEG
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20941: LD_ADDR_VAR 0 30
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 0
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: LD_INT 0
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: LD_INT 0
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: NEG
21011: PUSH
21012: LD_INT 1
21014: NEG
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: LD_INT 2
21026: NEG
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 0
21034: PUSH
21035: LD_INT 2
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 1
21045: PUSH
21046: LD_INT 1
21048: NEG
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: LD_INT 1
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 2
21076: PUSH
21077: LD_INT 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: LD_INT 2
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 1
21096: NEG
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 2
21107: NEG
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 2
21118: NEG
21119: PUSH
21120: LD_INT 1
21122: NEG
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: PUSH
21132: LD_INT 3
21134: NEG
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: LD_INT 2
21145: NEG
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 3
21153: PUSH
21154: LD_INT 2
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 2
21173: NEG
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 3
21184: NEG
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21219: LD_ADDR_VAR 0 31
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: LD_INT 0
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: LD_INT 1
21239: NEG
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: LD_INT 1
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: NEG
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: LD_INT 1
21292: NEG
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 1
21300: NEG
21301: PUSH
21302: LD_INT 2
21304: NEG
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: LD_INT 1
21315: NEG
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 2
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 2
21384: NEG
21385: PUSH
21386: LD_INT 1
21388: NEG
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 2
21396: NEG
21397: PUSH
21398: LD_INT 2
21400: NEG
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 2
21408: NEG
21409: PUSH
21410: LD_INT 3
21412: NEG
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 2
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 3
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: LD_INT 3
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: NEG
21452: PUSH
21453: LD_INT 2
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 3
21462: NEG
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21497: LD_ADDR_VAR 0 32
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 0
21514: PUSH
21515: LD_INT 1
21517: NEG
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: LD_INT 0
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 1
21555: NEG
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: LD_INT 1
21570: NEG
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: LD_INT 2
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 0
21590: PUSH
21591: LD_INT 2
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 2
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 1
21632: PUSH
21633: LD_INT 2
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 0
21642: PUSH
21643: LD_INT 2
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 2
21663: NEG
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 2
21674: NEG
21675: PUSH
21676: LD_INT 1
21678: NEG
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 1
21686: NEG
21687: PUSH
21688: LD_INT 3
21690: NEG
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: LD_INT 2
21701: NEG
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 3
21709: PUSH
21710: LD_INT 2
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: PUSH
21720: LD_INT 3
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 2
21729: NEG
21730: PUSH
21731: LD_INT 1
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 3
21740: NEG
21741: PUSH
21742: LD_INT 1
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21775: LD_ADDR_VAR 0 33
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 0
21792: PUSH
21793: LD_INT 1
21795: NEG
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 1
21813: PUSH
21814: LD_INT 1
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 0
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 1
21833: NEG
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 1
21844: NEG
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: NEG
21857: PUSH
21858: LD_INT 2
21860: NEG
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 1
21868: PUSH
21869: LD_INT 1
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: LD_INT 2
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 0
21909: PUSH
21910: LD_INT 2
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 1
21919: NEG
21920: PUSH
21921: LD_INT 1
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 2
21930: NEG
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 2
21941: NEG
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 2
21953: NEG
21954: PUSH
21955: LD_INT 2
21957: NEG
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 2
21965: NEG
21966: PUSH
21967: LD_INT 3
21969: NEG
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 2
21977: PUSH
21978: LD_INT 1
21980: NEG
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 3
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 1
21998: PUSH
21999: LD_INT 3
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: LD_INT 2
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 3
22019: NEG
22020: PUSH
22021: LD_INT 2
22023: NEG
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22054: LD_ADDR_VAR 0 34
22058: PUSH
22059: LD_INT 0
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 0
22071: PUSH
22072: LD_INT 1
22074: NEG
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 1
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: NEG
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 1
22135: NEG
22136: PUSH
22137: LD_INT 2
22139: NEG
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: LD_INT 2
22150: NEG
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: LD_INT 1
22161: NEG
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: LD_INT 1
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: LD_INT 2
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 1
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 1
22199: NEG
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: NEG
22211: PUSH
22212: LD_INT 0
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 2
22221: NEG
22222: PUSH
22223: LD_INT 1
22225: NEG
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 2
22233: NEG
22234: PUSH
22235: LD_INT 2
22237: NEG
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 1
22245: NEG
22246: PUSH
22247: LD_INT 3
22249: NEG
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: LD_INT 2
22260: NEG
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 3
22268: PUSH
22269: LD_INT 2
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: LD_INT 3
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 2
22288: NEG
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 3
22299: NEG
22300: PUSH
22301: LD_INT 1
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22334: LD_ADDR_VAR 0 35
22338: PUSH
22339: LD_INT 0
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 0
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 1
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 0
22382: PUSH
22383: LD_INT 1
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: NEG
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 1
22403: NEG
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 2
22415: PUSH
22416: LD_INT 1
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: LD_INT 1
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22446: LD_ADDR_VAR 0 36
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 0
22463: PUSH
22464: LD_INT 1
22466: NEG
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: LD_INT 0
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 1
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 0
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: LD_INT 0
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 1
22515: NEG
22516: PUSH
22517: LD_INT 1
22519: NEG
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: LD_INT 2
22531: NEG
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 1
22539: PUSH
22540: LD_INT 2
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22558: LD_ADDR_VAR 0 37
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: LD_INT 0
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 0
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 1
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 0
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: LD_INT 0
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22670: LD_ADDR_VAR 0 38
22674: PUSH
22675: LD_INT 0
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: LD_INT 1
22690: NEG
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 1
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 1
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 1
22728: NEG
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: NEG
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 2
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 2
22761: NEG
22762: PUSH
22763: LD_INT 1
22765: NEG
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22782: LD_ADDR_VAR 0 39
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: LD_INT 1
22802: NEG
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: LD_INT 0
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: LD_INT 1
22855: NEG
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 1
22863: NEG
22864: PUSH
22865: LD_INT 2
22867: NEG
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: LD_INT 2
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22894: LD_ADDR_VAR 0 40
22898: PUSH
22899: LD_INT 0
22901: PUSH
22902: LD_INT 0
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 0
22911: PUSH
22912: LD_INT 1
22914: NEG
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: LD_INT 0
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: LD_INT 1
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 0
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 1
22952: NEG
22953: PUSH
22954: LD_INT 0
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 1
22963: NEG
22964: PUSH
22965: LD_INT 1
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: LD_INT 1
22978: NEG
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: LD_INT 1
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23006: LD_ADDR_VAR 0 41
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: LD_INT 0
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 0
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 1
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: LD_INT 1
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: LD_INT 0
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 1
23075: NEG
23076: PUSH
23077: LD_INT 1
23079: NEG
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: NEG
23088: PUSH
23089: LD_INT 2
23091: NEG
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 2
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 2
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: LD_INT 2
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: LD_INT 2
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 1
23150: NEG
23151: PUSH
23152: LD_INT 1
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 2
23161: NEG
23162: PUSH
23163: LD_INT 0
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 2
23172: NEG
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 2
23184: NEG
23185: PUSH
23186: LD_INT 2
23188: NEG
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 2
23196: NEG
23197: PUSH
23198: LD_INT 3
23200: NEG
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 2
23208: PUSH
23209: LD_INT 1
23211: NEG
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 3
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 3
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 3
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 3
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: LD_INT 3
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 2
23269: NEG
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 3
23280: NEG
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 3
23291: NEG
23292: PUSH
23293: LD_INT 1
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 3
23303: NEG
23304: PUSH
23305: LD_INT 2
23307: NEG
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 3
23315: NEG
23316: PUSH
23317: LD_INT 3
23319: NEG
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23356: LD_ADDR_VAR 0 42
23360: PUSH
23361: LD_INT 0
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 1
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: LD_INT 1
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: NEG
23438: PUSH
23439: LD_INT 2
23441: NEG
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: LD_INT 2
23452: NEG
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: LD_INT 1
23463: NEG
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 2
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 2
23481: PUSH
23482: LD_INT 2
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 1
23491: PUSH
23492: LD_INT 2
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 0
23501: PUSH
23502: LD_INT 2
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: NEG
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: LD_INT 1
23526: NEG
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 2
23534: NEG
23535: PUSH
23536: LD_INT 2
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 2
23546: NEG
23547: PUSH
23548: LD_INT 3
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: NEG
23559: PUSH
23560: LD_INT 3
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 0
23570: PUSH
23571: LD_INT 3
23573: NEG
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: LD_INT 2
23584: NEG
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 3
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 3
23602: PUSH
23603: LD_INT 3
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: LD_INT 3
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: LD_INT 3
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 0
23632: PUSH
23633: LD_INT 3
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: NEG
23643: PUSH
23644: LD_INT 2
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 3
23653: NEG
23654: PUSH
23655: LD_INT 2
23657: NEG
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 3
23665: NEG
23666: PUSH
23667: LD_INT 3
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23706: LD_ADDR_VAR 0 43
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: LD_INT 0
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 1
23764: NEG
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: LD_INT 2
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: LD_INT 2
23802: NEG
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: LD_INT 1
23813: NEG
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 2
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: LD_INT 2
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 2
23872: NEG
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 2
23883: NEG
23884: PUSH
23885: LD_INT 1
23887: NEG
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 1
23895: NEG
23896: PUSH
23897: LD_INT 3
23899: NEG
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 0
23907: PUSH
23908: LD_INT 3
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: LD_INT 2
23921: NEG
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 2
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 3
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 3
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: LD_INT 3
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 0
23970: PUSH
23971: LD_INT 3
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: NEG
23981: PUSH
23982: LD_INT 2
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 2
23991: NEG
23992: PUSH
23993: LD_INT 1
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 3
24002: NEG
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 3
24013: NEG
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24054: LD_ADDR_VAR 0 44
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: LD_INT 1
24127: NEG
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: LD_INT 2
24139: NEG
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: LD_INT 1
24150: NEG
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 2
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 2
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 2
24178: PUSH
24179: LD_INT 2
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: NEG
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 2
24209: NEG
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 2
24220: NEG
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 2
24232: NEG
24233: PUSH
24234: LD_INT 2
24236: NEG
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 2
24244: NEG
24245: PUSH
24246: LD_INT 3
24248: NEG
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 2
24256: PUSH
24257: LD_INT 1
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 3
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 3
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 3
24287: PUSH
24288: LD_INT 2
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 3
24297: PUSH
24298: LD_INT 3
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 2
24307: PUSH
24308: LD_INT 3
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 2
24317: NEG
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 3
24328: NEG
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 3
24339: NEG
24340: PUSH
24341: LD_INT 1
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 3
24351: NEG
24352: PUSH
24353: LD_INT 2
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 3
24363: NEG
24364: PUSH
24365: LD_INT 3
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24404: LD_ADDR_VAR 0 45
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: LD_INT 1
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: LD_INT 1
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 1
24462: NEG
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: NEG
24486: PUSH
24487: LD_INT 2
24489: NEG
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: LD_INT 2
24500: NEG
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: LD_INT 1
24511: NEG
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 2
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: LD_INT 2
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: LD_INT 2
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 2
24570: NEG
24571: PUSH
24572: LD_INT 1
24574: NEG
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 2
24582: NEG
24583: PUSH
24584: LD_INT 2
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: NEG
24595: PUSH
24596: LD_INT 3
24598: NEG
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 1
24606: NEG
24607: PUSH
24608: LD_INT 3
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: LD_INT 3
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: LD_INT 2
24632: NEG
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 3
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: LD_INT 3
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 2
24660: PUSH
24661: LD_INT 3
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: LD_INT 3
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: LD_INT 3
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 1
24690: NEG
24691: PUSH
24692: LD_INT 2
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 3
24701: NEG
24702: PUSH
24703: LD_INT 2
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 3
24713: NEG
24714: PUSH
24715: LD_INT 3
24717: NEG
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24754: LD_ADDR_VAR 0 46
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: LD_INT 0
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 0
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 1
24812: NEG
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: LD_INT 1
24827: NEG
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 1
24835: NEG
24836: PUSH
24837: LD_INT 2
24839: NEG
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: LD_INT 2
24850: NEG
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: LD_INT 1
24861: NEG
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: LD_INT 1
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: NEG
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: NEG
24944: PUSH
24945: LD_INT 3
24947: NEG
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: LD_INT 3
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: LD_INT 2
24969: NEG
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 3
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 3
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: LD_INT 3
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: LD_INT 3
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: LD_INT 2
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 2
25039: NEG
25040: PUSH
25041: LD_INT 1
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 3
25050: NEG
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 3
25061: NEG
25062: PUSH
25063: LD_INT 1
25065: NEG
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25102: LD_ADDR_VAR 0 47
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: LD_INT 2
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: LD_INT 2
25198: NEG
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 2
25217: NEG
25218: PUSH
25219: LD_INT 1
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: NEG
25230: PUSH
25231: LD_INT 2
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25253: LD_ADDR_VAR 0 48
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 1
25322: NEG
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 1
25334: NEG
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: LD_INT 2
25349: NEG
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: LD_INT 1
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 2
25378: PUSH
25379: LD_INT 1
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25400: LD_ADDR_VAR 0 49
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: NEG
25470: PUSH
25471: LD_INT 1
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 1
25484: NEG
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 2
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25544: LD_ADDR_VAR 0 50
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 0
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 1
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: LD_INT 1
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: NEG
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 2
25635: PUSH
25636: LD_INT 2
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: LD_INT 2
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: LD_INT 2
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25688: LD_ADDR_VAR 0 51
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 0
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: LD_INT 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 2
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25835: LD_ADDR_VAR 0 52
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 0
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: LD_INT 2
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 2
25939: NEG
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 2
25950: NEG
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 2
25962: NEG
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25986: LD_ADDR_VAR 0 53
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: NEG
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 1
26067: NEG
26068: PUSH
26069: LD_INT 2
26071: NEG
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: LD_INT 2
26082: NEG
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 2
26101: PUSH
26102: LD_INT 0
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 2
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 2
26121: PUSH
26122: LD_INT 2
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: LD_INT 2
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: LD_INT 2
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: NEG
26152: PUSH
26153: LD_INT 1
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 2
26162: NEG
26163: PUSH
26164: LD_INT 0
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 2
26173: NEG
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 2
26185: NEG
26186: PUSH
26187: LD_INT 2
26189: NEG
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26216: LD_ADDR_VAR 0 54
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: LD_INT 1
26236: NEG
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: NEG
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: NEG
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: LD_INT 2
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: LD_INT 2
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 2
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 2
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: LD_INT 2
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 1
26361: PUSH
26362: LD_INT 2
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 0
26371: PUSH
26372: LD_INT 2
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 1
26381: NEG
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 2
26392: NEG
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 2
26403: NEG
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 2
26415: NEG
26416: PUSH
26417: LD_INT 2
26419: NEG
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26446: LD_ADDR_VAR 0 55
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 0
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 0
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: LD_INT 2
26531: NEG
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 2
26542: NEG
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 2
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 2
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 2
26581: PUSH
26582: LD_INT 2
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: LD_INT 2
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: NEG
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 2
26622: NEG
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 2
26633: NEG
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 2
26645: NEG
26646: PUSH
26647: LD_INT 2
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26676: LD_ADDR_VAR 0 56
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: LD_INT 2
26761: NEG
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: LD_INT 2
26772: NEG
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 2
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 2
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: LD_INT 2
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: LD_INT 2
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 2
26852: NEG
26853: PUSH
26854: LD_INT 0
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 2
26863: NEG
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 2
26875: NEG
26876: PUSH
26877: LD_INT 2
26879: NEG
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26906: LD_ADDR_VAR 0 57
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: NEG
26988: PUSH
26989: LD_INT 2
26991: NEG
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: LD_INT 2
27002: NEG
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 2
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: LD_INT 2
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: LD_INT 2
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: LD_INT 2
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 2
27082: NEG
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 2
27093: NEG
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 2
27105: NEG
27106: PUSH
27107: LD_INT 2
27109: NEG
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27136: LD_ADDR_VAR 0 58
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: LD_INT 1
27156: NEG
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: LD_INT 1
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 1
27217: NEG
27218: PUSH
27219: LD_INT 2
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: LD_INT 2
27232: NEG
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 2
27271: PUSH
27272: LD_INT 2
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: LD_INT 2
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 2
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 2
27312: NEG
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: NEG
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 2
27335: NEG
27336: PUSH
27337: LD_INT 2
27339: NEG
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27366: LD_ADDR_VAR 0 59
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27454: LD_ADDR_VAR 0 60
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: LD_INT 1
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27542: LD_ADDR_VAR 0 61
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: LD_INT 1
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: LD_INT 1
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 1
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27630: LD_ADDR_VAR 0 62
27634: PUSH
27635: LD_INT 0
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 1
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: NEG
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: NEG
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27718: LD_ADDR_VAR 0 63
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: NEG
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27806: LD_ADDR_VAR 0 64
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 1
27864: NEG
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: ST_TO_ADDR
// end ; 1 :
27894: GO 33791
27896: LD_INT 1
27898: DOUBLE
27899: EQUAL
27900: IFTRUE 27904
27902: GO 30527
27904: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27905: LD_ADDR_VAR 0 11
27909: PUSH
27910: LD_INT 1
27912: NEG
27913: PUSH
27914: LD_INT 3
27916: NEG
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 0
27924: PUSH
27925: LD_INT 3
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 1
27935: PUSH
27936: LD_INT 2
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: LIST
27948: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27949: LD_ADDR_VAR 0 12
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 3
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 3
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: LIST
27989: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27990: LD_ADDR_VAR 0 13
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 3
28007: PUSH
28008: LD_INT 3
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: LD_INT 3
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: LIST
28029: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28030: LD_ADDR_VAR 0 14
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: LD_INT 3
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: LD_INT 3
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: LIST
28070: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28071: LD_ADDR_VAR 0 15
28075: PUSH
28076: LD_INT 2
28078: NEG
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 3
28089: NEG
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 3
28100: NEG
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: LIST
28114: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28115: LD_ADDR_VAR 0 16
28119: PUSH
28120: LD_INT 2
28122: NEG
28123: PUSH
28124: LD_INT 3
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 3
28134: NEG
28135: PUSH
28136: LD_INT 2
28138: NEG
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 3
28146: NEG
28147: PUSH
28148: LD_INT 3
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: LIST
28160: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28161: LD_ADDR_VAR 0 17
28165: PUSH
28166: LD_INT 1
28168: NEG
28169: PUSH
28170: LD_INT 3
28172: NEG
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: LD_INT 3
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: LD_INT 2
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: LIST
28204: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28205: LD_ADDR_VAR 0 18
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 3
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 3
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: LIST
28245: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28246: LD_ADDR_VAR 0 19
28250: PUSH
28251: LD_INT 3
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 3
28263: PUSH
28264: LD_INT 3
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: LD_INT 3
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28286: LD_ADDR_VAR 0 20
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 3
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: LD_INT 3
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: LIST
28326: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28327: LD_ADDR_VAR 0 21
28331: PUSH
28332: LD_INT 2
28334: NEG
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 3
28345: NEG
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 3
28356: NEG
28357: PUSH
28358: LD_INT 1
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: LIST
28370: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28371: LD_ADDR_VAR 0 22
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: LD_INT 3
28382: NEG
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 3
28390: NEG
28391: PUSH
28392: LD_INT 2
28394: NEG
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 3
28402: NEG
28403: PUSH
28404: LD_INT 3
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: LIST
28416: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28417: LD_ADDR_VAR 0 23
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: LD_INT 3
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: LD_INT 4
28439: NEG
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 3
28450: NEG
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: LIST
28460: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28461: LD_ADDR_VAR 0 24
28465: PUSH
28466: LD_INT 3
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 3
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 4
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: LIST
28501: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28502: LD_ADDR_VAR 0 25
28506: PUSH
28507: LD_INT 3
28509: PUSH
28510: LD_INT 3
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 4
28519: PUSH
28520: LD_INT 3
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 3
28529: PUSH
28530: LD_INT 4
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: LIST
28541: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28542: LD_ADDR_VAR 0 26
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: LD_INT 3
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: LD_INT 4
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: LD_INT 3
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: LIST
28582: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28583: LD_ADDR_VAR 0 27
28587: PUSH
28588: LD_INT 3
28590: NEG
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 3
28601: NEG
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 4
28612: NEG
28613: PUSH
28614: LD_INT 1
28616: NEG
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: LIST
28626: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28627: LD_ADDR_VAR 0 28
28631: PUSH
28632: LD_INT 3
28634: NEG
28635: PUSH
28636: LD_INT 3
28638: NEG
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 3
28646: NEG
28647: PUSH
28648: LD_INT 4
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 4
28658: NEG
28659: PUSH
28660: LD_INT 3
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: LIST
28672: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28673: LD_ADDR_VAR 0 29
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: LD_INT 3
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: LD_INT 3
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: LD_INT 2
28706: NEG
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 1
28714: NEG
28715: PUSH
28716: LD_INT 4
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: LD_INT 4
28729: NEG
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: LD_INT 3
28740: NEG
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 1
28748: NEG
28749: PUSH
28750: LD_INT 5
28752: NEG
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 0
28760: PUSH
28761: LD_INT 5
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: LD_INT 4
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: LD_INT 6
28786: NEG
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: LD_INT 6
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: LD_INT 5
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28828: LD_ADDR_VAR 0 30
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 3
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 3
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 3
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 4
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 4
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 4
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 5
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 5
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 5
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 6
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 6
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28971: LD_ADDR_VAR 0 31
28975: PUSH
28976: LD_INT 3
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 3
28988: PUSH
28989: LD_INT 3
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: LD_INT 3
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 4
29008: PUSH
29009: LD_INT 3
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 4
29018: PUSH
29019: LD_INT 4
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 4
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 5
29038: PUSH
29039: LD_INT 4
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 5
29048: PUSH
29049: LD_INT 5
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 4
29058: PUSH
29059: LD_INT 5
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 6
29068: PUSH
29069: LD_INT 5
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 6
29078: PUSH
29079: LD_INT 6
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 5
29088: PUSH
29089: LD_INT 6
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29110: LD_ADDR_VAR 0 32
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: LD_INT 3
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: LD_INT 3
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 1
29137: NEG
29138: PUSH
29139: LD_INT 2
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: LD_INT 4
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 0
29158: PUSH
29159: LD_INT 4
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 1
29168: NEG
29169: PUSH
29170: LD_INT 3
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: LD_INT 5
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: LD_INT 5
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: PUSH
29201: LD_INT 4
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: LD_INT 6
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: LD_INT 6
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 1
29230: NEG
29231: PUSH
29232: LD_INT 5
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29253: LD_ADDR_VAR 0 33
29257: PUSH
29258: LD_INT 2
29260: NEG
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 3
29271: NEG
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 3
29282: NEG
29283: PUSH
29284: LD_INT 1
29286: NEG
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 3
29294: NEG
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 4
29305: NEG
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 4
29316: NEG
29317: PUSH
29318: LD_INT 1
29320: NEG
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 4
29328: NEG
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 5
29339: NEG
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 5
29350: NEG
29351: PUSH
29352: LD_INT 1
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 5
29362: NEG
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 6
29373: NEG
29374: PUSH
29375: LD_INT 0
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 6
29384: NEG
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29408: LD_ADDR_VAR 0 34
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: LD_INT 3
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 3
29427: NEG
29428: PUSH
29429: LD_INT 2
29431: NEG
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 3
29439: NEG
29440: PUSH
29441: LD_INT 3
29443: NEG
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 3
29451: NEG
29452: PUSH
29453: LD_INT 4
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 4
29463: NEG
29464: PUSH
29465: LD_INT 3
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 4
29475: NEG
29476: PUSH
29477: LD_INT 4
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 4
29487: NEG
29488: PUSH
29489: LD_INT 5
29491: NEG
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 5
29499: NEG
29500: PUSH
29501: LD_INT 4
29503: NEG
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 5
29511: NEG
29512: PUSH
29513: LD_INT 5
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 5
29523: NEG
29524: PUSH
29525: LD_INT 6
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 6
29535: NEG
29536: PUSH
29537: LD_INT 5
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 6
29547: NEG
29548: PUSH
29549: LD_INT 6
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29571: LD_ADDR_VAR 0 41
29575: PUSH
29576: LD_INT 0
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 1
29589: NEG
29590: PUSH
29591: LD_INT 3
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 1
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: LIST
29614: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29615: LD_ADDR_VAR 0 42
29619: PUSH
29620: LD_INT 2
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 2
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 3
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: LIST
29655: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29656: LD_ADDR_VAR 0 43
29660: PUSH
29661: LD_INT 2
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 2
29683: PUSH
29684: LD_INT 3
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29696: LD_ADDR_VAR 0 44
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: LD_INT 2
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 3
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29737: LD_ADDR_VAR 0 45
29741: PUSH
29742: LD_INT 2
29744: NEG
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 2
29755: NEG
29756: PUSH
29757: LD_INT 1
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 3
29766: NEG
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: LIST
29780: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29781: LD_ADDR_VAR 0 46
29785: PUSH
29786: LD_INT 2
29788: NEG
29789: PUSH
29790: LD_INT 2
29792: NEG
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 2
29800: NEG
29801: PUSH
29802: LD_INT 3
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 3
29812: NEG
29813: PUSH
29814: LD_INT 2
29816: NEG
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29827: LD_ADDR_VAR 0 47
29831: PUSH
29832: LD_INT 2
29834: NEG
29835: PUSH
29836: LD_INT 3
29838: NEG
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: LD_INT 3
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29860: LD_ADDR_VAR 0 48
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: LD_INT 2
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 2
29878: PUSH
29879: LD_INT 1
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29891: LD_ADDR_VAR 0 49
29895: PUSH
29896: LD_INT 3
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 3
29908: PUSH
29909: LD_INT 2
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29920: LD_ADDR_VAR 0 50
29924: PUSH
29925: LD_INT 2
29927: PUSH
29928: LD_INT 3
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29949: LD_ADDR_VAR 0 51
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 2
29967: NEG
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29980: LD_ADDR_VAR 0 52
29984: PUSH
29985: LD_INT 3
29987: NEG
29988: PUSH
29989: LD_INT 1
29991: NEG
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 3
29999: NEG
30000: PUSH
30001: LD_INT 2
30003: NEG
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30013: LD_ADDR_VAR 0 53
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: LD_INT 3
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: LD_INT 3
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: LD_INT 2
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30057: LD_ADDR_VAR 0 54
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 3
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30098: LD_ADDR_VAR 0 55
30102: PUSH
30103: LD_INT 3
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 3
30115: PUSH
30116: LD_INT 3
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: LD_INT 3
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: LIST
30137: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30138: LD_ADDR_VAR 0 56
30142: PUSH
30143: LD_INT 1
30145: PUSH
30146: LD_INT 3
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: LD_INT 3
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: NEG
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30179: LD_ADDR_VAR 0 57
30183: PUSH
30184: LD_INT 2
30186: NEG
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 3
30197: NEG
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 3
30208: NEG
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: LIST
30222: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30223: LD_ADDR_VAR 0 58
30227: PUSH
30228: LD_INT 2
30230: NEG
30231: PUSH
30232: LD_INT 3
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 3
30242: NEG
30243: PUSH
30244: LD_INT 2
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: LD_INT 3
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30269: LD_ADDR_VAR 0 59
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: LD_INT 2
30280: NEG
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: LD_INT 2
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30313: LD_ADDR_VAR 0 60
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: LIST
30353: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30354: LD_ADDR_VAR 0 61
30358: PUSH
30359: LD_INT 2
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: LD_INT 2
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: LD_INT 2
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30394: LD_ADDR_VAR 0 62
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: LD_INT 2
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: LIST
30434: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30435: LD_ADDR_VAR 0 63
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 2
30453: NEG
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: NEG
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: LIST
30478: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30479: LD_ADDR_VAR 0 64
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: LD_INT 2
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 2
30498: NEG
30499: PUSH
30500: LD_INT 1
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: ST_TO_ADDR
// end ; 2 :
30525: GO 33791
30527: LD_INT 2
30529: DOUBLE
30530: EQUAL
30531: IFTRUE 30535
30533: GO 33790
30535: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30536: LD_ADDR_VAR 0 29
30540: PUSH
30541: LD_INT 4
30543: PUSH
30544: LD_INT 0
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 4
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 5
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 5
30574: PUSH
30575: LD_INT 1
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 4
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 3
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 3
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: LD_INT 2
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 5
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 3
30636: PUSH
30637: LD_INT 3
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 3
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 4
30656: PUSH
30657: LD_INT 3
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 4
30666: PUSH
30667: LD_INT 4
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: LD_INT 4
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 2
30686: PUSH
30687: LD_INT 3
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: LD_INT 2
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 4
30706: PUSH
30707: LD_INT 2
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 4
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: LD_INT 4
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: LD_INT 3
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: LD_INT 4
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: LD_INT 5
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: LD_INT 5
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: LD_INT 4
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 2
30798: PUSH
30799: LD_INT 5
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 2
30808: NEG
30809: PUSH
30810: LD_INT 3
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 3
30819: NEG
30820: PUSH
30821: LD_INT 0
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 3
30830: NEG
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 2
30842: NEG
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 2
30853: NEG
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 3
30864: NEG
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 4
30886: NEG
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 4
30898: NEG
30899: PUSH
30900: LD_INT 2
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 2
30910: NEG
30911: PUSH
30912: LD_INT 2
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 4
30921: NEG
30922: PUSH
30923: LD_INT 4
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 4
30933: NEG
30934: PUSH
30935: LD_INT 5
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 3
30945: NEG
30946: PUSH
30947: LD_INT 4
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 3
30957: NEG
30958: PUSH
30959: LD_INT 3
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 4
30969: NEG
30970: PUSH
30971: LD_INT 3
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 5
30981: NEG
30982: PUSH
30983: LD_INT 4
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 5
30993: NEG
30994: PUSH
30995: LD_INT 5
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 3
31005: NEG
31006: PUSH
31007: LD_INT 5
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 5
31017: NEG
31018: PUSH
31019: LD_INT 3
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31074: LD_ADDR_VAR 0 30
31078: PUSH
31079: LD_INT 4
31081: PUSH
31082: LD_INT 4
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 4
31091: PUSH
31092: LD_INT 3
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 5
31101: PUSH
31102: LD_INT 4
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 5
31111: PUSH
31112: LD_INT 5
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 4
31121: PUSH
31122: LD_INT 5
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 3
31131: PUSH
31132: LD_INT 4
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: LD_INT 3
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 5
31151: PUSH
31152: LD_INT 3
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 3
31161: PUSH
31162: LD_INT 5
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 3
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: LD_INT 2
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: LD_INT 3
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: LD_INT 4
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: LD_INT 4
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: LD_INT 3
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 2
31243: PUSH
31244: LD_INT 4
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 2
31253: NEG
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 4
31264: NEG
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 4
31275: NEG
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 3
31287: NEG
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 3
31298: NEG
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 4
31309: NEG
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 5
31320: NEG
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 5
31331: NEG
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 5
31343: NEG
31344: PUSH
31345: LD_INT 2
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 3
31355: NEG
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 3
31366: NEG
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 3
31378: NEG
31379: PUSH
31380: LD_INT 4
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: NEG
31391: PUSH
31392: LD_INT 3
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 2
31402: NEG
31403: PUSH
31404: LD_INT 2
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 3
31414: NEG
31415: PUSH
31416: LD_INT 2
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 4
31426: NEG
31427: PUSH
31428: LD_INT 3
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 4
31438: NEG
31439: PUSH
31440: LD_INT 4
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: LD_INT 4
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 4
31462: NEG
31463: PUSH
31464: LD_INT 2
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: LD_INT 4
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: LD_INT 5
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: PUSH
31497: LD_INT 4
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: LD_INT 3
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 3
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: LD_INT 4
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 1
31541: NEG
31542: PUSH
31543: LD_INT 5
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: LD_INT 3
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 2
31564: NEG
31565: PUSH
31566: LD_INT 5
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31621: LD_ADDR_VAR 0 31
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: LD_INT 4
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 0
31638: PUSH
31639: LD_INT 3
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: LD_INT 4
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: LD_INT 5
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: LD_INT 5
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: LD_INT 4
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: LD_INT 3
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 5
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 3
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 3
31721: NEG
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 3
31732: NEG
31733: PUSH
31734: LD_INT 1
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: NEG
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 2
31755: NEG
31756: PUSH
31757: LD_INT 1
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 3
31766: NEG
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 4
31777: NEG
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 4
31788: NEG
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 4
31800: NEG
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 2
31812: NEG
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 4
31823: NEG
31824: PUSH
31825: LD_INT 4
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 4
31835: NEG
31836: PUSH
31837: LD_INT 5
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 3
31847: NEG
31848: PUSH
31849: LD_INT 4
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 3
31859: NEG
31860: PUSH
31861: LD_INT 3
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 4
31871: NEG
31872: PUSH
31873: LD_INT 3
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 5
31883: NEG
31884: PUSH
31885: LD_INT 4
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 5
31895: NEG
31896: PUSH
31897: LD_INT 5
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 3
31907: NEG
31908: PUSH
31909: LD_INT 5
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 5
31919: NEG
31920: PUSH
31921: LD_INT 3
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: LD_INT 3
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: LD_INT 4
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: LD_INT 3
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 1
31964: PUSH
31965: LD_INT 2
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: LD_INT 2
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: LD_INT 3
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: LD_INT 4
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: LD_INT 2
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 2
32021: NEG
32022: PUSH
32023: LD_INT 4
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 4
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 4
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 5
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 5
32064: PUSH
32065: LD_INT 1
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 4
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: LD_INT 0
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 3
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 3
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 5
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32171: LD_ADDR_VAR 0 32
32175: PUSH
32176: LD_INT 4
32178: NEG
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 4
32189: NEG
32190: PUSH
32191: LD_INT 1
32193: NEG
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 3
32201: NEG
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 3
32212: NEG
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 4
32223: NEG
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 5
32234: NEG
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 5
32245: NEG
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 5
32257: NEG
32258: PUSH
32259: LD_INT 2
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 3
32269: NEG
32270: PUSH
32271: LD_INT 2
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 3
32280: NEG
32281: PUSH
32282: LD_INT 3
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 3
32292: NEG
32293: PUSH
32294: LD_INT 4
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: LD_INT 3
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: LD_INT 2
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 4
32340: NEG
32341: PUSH
32342: LD_INT 3
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 4
32352: NEG
32353: PUSH
32354: LD_INT 4
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 2
32364: NEG
32365: PUSH
32366: LD_INT 4
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 4
32376: NEG
32377: PUSH
32378: LD_INT 2
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 4
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 5
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: LD_INT 4
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: LD_INT 3
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 3
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: LD_INT 4
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 5
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 3
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: NEG
32479: PUSH
32480: LD_INT 5
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 3
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: LD_INT 1
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 4
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 4
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 3
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: LD_INT 1
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 2
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 4
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 4
32583: PUSH
32584: LD_INT 4
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 4
32593: PUSH
32594: LD_INT 3
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 5
32603: PUSH
32604: LD_INT 4
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 5
32613: PUSH
32614: LD_INT 5
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 4
32623: PUSH
32624: LD_INT 5
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 3
32633: PUSH
32634: LD_INT 4
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 3
32643: PUSH
32644: LD_INT 3
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 5
32653: PUSH
32654: LD_INT 3
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 3
32663: PUSH
32664: LD_INT 5
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32718: LD_ADDR_VAR 0 33
32722: PUSH
32723: LD_INT 4
32725: NEG
32726: PUSH
32727: LD_INT 4
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 4
32737: NEG
32738: PUSH
32739: LD_INT 5
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: LD_INT 4
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 3
32761: NEG
32762: PUSH
32763: LD_INT 3
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 4
32773: NEG
32774: PUSH
32775: LD_INT 3
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 5
32785: NEG
32786: PUSH
32787: LD_INT 4
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 5
32797: NEG
32798: PUSH
32799: LD_INT 5
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 3
32809: NEG
32810: PUSH
32811: LD_INT 5
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 5
32821: NEG
32822: PUSH
32823: LD_INT 3
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: LD_INT 3
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: LD_INT 4
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: LD_INT 3
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: LD_INT 3
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: LD_INT 4
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: LD_INT 2
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 2
32923: NEG
32924: PUSH
32925: LD_INT 4
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 4
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 4
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 5
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 5
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 4
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 3
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 3
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 3
33007: PUSH
33008: LD_INT 2
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 5
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 3
33028: PUSH
33029: LD_INT 3
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: LD_INT 2
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 4
33048: PUSH
33049: LD_INT 3
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 4
33058: PUSH
33059: LD_INT 4
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 3
33068: PUSH
33069: LD_INT 4
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 2
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 4
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: LD_INT 4
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: LD_INT 4
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 3
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: LD_INT 4
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: PUSH
33149: LD_INT 5
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: LD_INT 5
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: LD_INT 4
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: LD_INT 3
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: LD_INT 5
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: LD_INT 3
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33256: LD_ADDR_VAR 0 34
33260: PUSH
33261: LD_INT 0
33263: PUSH
33264: LD_INT 4
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: LD_INT 5
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 1
33285: PUSH
33286: LD_INT 4
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 3
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: LD_INT 3
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: LD_INT 4
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: NEG
33331: PUSH
33332: LD_INT 5
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: LD_INT 3
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: LD_INT 5
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 3
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 3
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 4
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 4
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 3
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 2
33426: PUSH
33427: LD_INT 1
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 2
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 4
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 4
33458: PUSH
33459: LD_INT 4
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 4
33468: PUSH
33469: LD_INT 3
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 5
33478: PUSH
33479: LD_INT 4
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 5
33488: PUSH
33489: LD_INT 5
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 4
33498: PUSH
33499: LD_INT 5
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 3
33508: PUSH
33509: LD_INT 4
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 3
33518: PUSH
33519: LD_INT 3
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 5
33528: PUSH
33529: LD_INT 3
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: LD_INT 5
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: LD_INT 3
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 1
33568: PUSH
33569: LD_INT 3
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: LD_INT 4
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: LD_INT 4
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: LD_INT 3
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 2
33620: PUSH
33621: LD_INT 4
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 4
33641: NEG
33642: PUSH
33643: LD_INT 0
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 4
33652: NEG
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 3
33664: NEG
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 3
33675: NEG
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 4
33686: NEG
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 5
33697: NEG
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 5
33708: NEG
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 5
33720: NEG
33721: PUSH
33722: LD_INT 2
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 3
33732: NEG
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: ST_TO_ADDR
// end ; end ;
33788: GO 33791
33790: POP
// case btype of b_depot , b_warehouse :
33791: LD_VAR 0 1
33795: PUSH
33796: LD_INT 0
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33810
33802: LD_INT 1
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33810
33808: GO 34011
33810: POP
// case nation of nation_american :
33811: LD_VAR 0 5
33815: PUSH
33816: LD_INT 1
33818: DOUBLE
33819: EQUAL
33820: IFTRUE 33824
33822: GO 33880
33824: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33825: LD_ADDR_VAR 0 9
33829: PUSH
33830: LD_VAR 0 11
33834: PUSH
33835: LD_VAR 0 12
33839: PUSH
33840: LD_VAR 0 13
33844: PUSH
33845: LD_VAR 0 14
33849: PUSH
33850: LD_VAR 0 15
33854: PUSH
33855: LD_VAR 0 16
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: PUSH
33868: LD_VAR 0 4
33872: PUSH
33873: LD_INT 1
33875: PLUS
33876: ARRAY
33877: ST_TO_ADDR
33878: GO 34009
33880: LD_INT 2
33882: DOUBLE
33883: EQUAL
33884: IFTRUE 33888
33886: GO 33944
33888: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33889: LD_ADDR_VAR 0 9
33893: PUSH
33894: LD_VAR 0 17
33898: PUSH
33899: LD_VAR 0 18
33903: PUSH
33904: LD_VAR 0 19
33908: PUSH
33909: LD_VAR 0 20
33913: PUSH
33914: LD_VAR 0 21
33918: PUSH
33919: LD_VAR 0 22
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: PUSH
33932: LD_VAR 0 4
33936: PUSH
33937: LD_INT 1
33939: PLUS
33940: ARRAY
33941: ST_TO_ADDR
33942: GO 34009
33944: LD_INT 3
33946: DOUBLE
33947: EQUAL
33948: IFTRUE 33952
33950: GO 34008
33952: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33953: LD_ADDR_VAR 0 9
33957: PUSH
33958: LD_VAR 0 23
33962: PUSH
33963: LD_VAR 0 24
33967: PUSH
33968: LD_VAR 0 25
33972: PUSH
33973: LD_VAR 0 26
33977: PUSH
33978: LD_VAR 0 27
33982: PUSH
33983: LD_VAR 0 28
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: PUSH
33996: LD_VAR 0 4
34000: PUSH
34001: LD_INT 1
34003: PLUS
34004: ARRAY
34005: ST_TO_ADDR
34006: GO 34009
34008: POP
34009: GO 34564
34011: LD_INT 2
34013: DOUBLE
34014: EQUAL
34015: IFTRUE 34025
34017: LD_INT 3
34019: DOUBLE
34020: EQUAL
34021: IFTRUE 34025
34023: GO 34081
34025: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34026: LD_ADDR_VAR 0 9
34030: PUSH
34031: LD_VAR 0 29
34035: PUSH
34036: LD_VAR 0 30
34040: PUSH
34041: LD_VAR 0 31
34045: PUSH
34046: LD_VAR 0 32
34050: PUSH
34051: LD_VAR 0 33
34055: PUSH
34056: LD_VAR 0 34
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: PUSH
34069: LD_VAR 0 4
34073: PUSH
34074: LD_INT 1
34076: PLUS
34077: ARRAY
34078: ST_TO_ADDR
34079: GO 34564
34081: LD_INT 16
34083: DOUBLE
34084: EQUAL
34085: IFTRUE 34143
34087: LD_INT 17
34089: DOUBLE
34090: EQUAL
34091: IFTRUE 34143
34093: LD_INT 18
34095: DOUBLE
34096: EQUAL
34097: IFTRUE 34143
34099: LD_INT 19
34101: DOUBLE
34102: EQUAL
34103: IFTRUE 34143
34105: LD_INT 22
34107: DOUBLE
34108: EQUAL
34109: IFTRUE 34143
34111: LD_INT 20
34113: DOUBLE
34114: EQUAL
34115: IFTRUE 34143
34117: LD_INT 21
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34143
34123: LD_INT 23
34125: DOUBLE
34126: EQUAL
34127: IFTRUE 34143
34129: LD_INT 24
34131: DOUBLE
34132: EQUAL
34133: IFTRUE 34143
34135: LD_INT 25
34137: DOUBLE
34138: EQUAL
34139: IFTRUE 34143
34141: GO 34199
34143: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34144: LD_ADDR_VAR 0 9
34148: PUSH
34149: LD_VAR 0 35
34153: PUSH
34154: LD_VAR 0 36
34158: PUSH
34159: LD_VAR 0 37
34163: PUSH
34164: LD_VAR 0 38
34168: PUSH
34169: LD_VAR 0 39
34173: PUSH
34174: LD_VAR 0 40
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: PUSH
34187: LD_VAR 0 4
34191: PUSH
34192: LD_INT 1
34194: PLUS
34195: ARRAY
34196: ST_TO_ADDR
34197: GO 34564
34199: LD_INT 6
34201: DOUBLE
34202: EQUAL
34203: IFTRUE 34255
34205: LD_INT 7
34207: DOUBLE
34208: EQUAL
34209: IFTRUE 34255
34211: LD_INT 8
34213: DOUBLE
34214: EQUAL
34215: IFTRUE 34255
34217: LD_INT 13
34219: DOUBLE
34220: EQUAL
34221: IFTRUE 34255
34223: LD_INT 12
34225: DOUBLE
34226: EQUAL
34227: IFTRUE 34255
34229: LD_INT 15
34231: DOUBLE
34232: EQUAL
34233: IFTRUE 34255
34235: LD_INT 11
34237: DOUBLE
34238: EQUAL
34239: IFTRUE 34255
34241: LD_INT 14
34243: DOUBLE
34244: EQUAL
34245: IFTRUE 34255
34247: LD_INT 10
34249: DOUBLE
34250: EQUAL
34251: IFTRUE 34255
34253: GO 34311
34255: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34256: LD_ADDR_VAR 0 9
34260: PUSH
34261: LD_VAR 0 41
34265: PUSH
34266: LD_VAR 0 42
34270: PUSH
34271: LD_VAR 0 43
34275: PUSH
34276: LD_VAR 0 44
34280: PUSH
34281: LD_VAR 0 45
34285: PUSH
34286: LD_VAR 0 46
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: PUSH
34299: LD_VAR 0 4
34303: PUSH
34304: LD_INT 1
34306: PLUS
34307: ARRAY
34308: ST_TO_ADDR
34309: GO 34564
34311: LD_INT 36
34313: DOUBLE
34314: EQUAL
34315: IFTRUE 34319
34317: GO 34375
34319: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34320: LD_ADDR_VAR 0 9
34324: PUSH
34325: LD_VAR 0 47
34329: PUSH
34330: LD_VAR 0 48
34334: PUSH
34335: LD_VAR 0 49
34339: PUSH
34340: LD_VAR 0 50
34344: PUSH
34345: LD_VAR 0 51
34349: PUSH
34350: LD_VAR 0 52
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: PUSH
34363: LD_VAR 0 4
34367: PUSH
34368: LD_INT 1
34370: PLUS
34371: ARRAY
34372: ST_TO_ADDR
34373: GO 34564
34375: LD_INT 4
34377: DOUBLE
34378: EQUAL
34379: IFTRUE 34401
34381: LD_INT 5
34383: DOUBLE
34384: EQUAL
34385: IFTRUE 34401
34387: LD_INT 34
34389: DOUBLE
34390: EQUAL
34391: IFTRUE 34401
34393: LD_INT 37
34395: DOUBLE
34396: EQUAL
34397: IFTRUE 34401
34399: GO 34457
34401: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34402: LD_ADDR_VAR 0 9
34406: PUSH
34407: LD_VAR 0 53
34411: PUSH
34412: LD_VAR 0 54
34416: PUSH
34417: LD_VAR 0 55
34421: PUSH
34422: LD_VAR 0 56
34426: PUSH
34427: LD_VAR 0 57
34431: PUSH
34432: LD_VAR 0 58
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: PUSH
34445: LD_VAR 0 4
34449: PUSH
34450: LD_INT 1
34452: PLUS
34453: ARRAY
34454: ST_TO_ADDR
34455: GO 34564
34457: LD_INT 31
34459: DOUBLE
34460: EQUAL
34461: IFTRUE 34507
34463: LD_INT 32
34465: DOUBLE
34466: EQUAL
34467: IFTRUE 34507
34469: LD_INT 33
34471: DOUBLE
34472: EQUAL
34473: IFTRUE 34507
34475: LD_INT 27
34477: DOUBLE
34478: EQUAL
34479: IFTRUE 34507
34481: LD_INT 26
34483: DOUBLE
34484: EQUAL
34485: IFTRUE 34507
34487: LD_INT 28
34489: DOUBLE
34490: EQUAL
34491: IFTRUE 34507
34493: LD_INT 29
34495: DOUBLE
34496: EQUAL
34497: IFTRUE 34507
34499: LD_INT 30
34501: DOUBLE
34502: EQUAL
34503: IFTRUE 34507
34505: GO 34563
34507: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34508: LD_ADDR_VAR 0 9
34512: PUSH
34513: LD_VAR 0 59
34517: PUSH
34518: LD_VAR 0 60
34522: PUSH
34523: LD_VAR 0 61
34527: PUSH
34528: LD_VAR 0 62
34532: PUSH
34533: LD_VAR 0 63
34537: PUSH
34538: LD_VAR 0 64
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: PUSH
34551: LD_VAR 0 4
34555: PUSH
34556: LD_INT 1
34558: PLUS
34559: ARRAY
34560: ST_TO_ADDR
34561: GO 34564
34563: POP
// temp_list2 = [ ] ;
34564: LD_ADDR_VAR 0 10
34568: PUSH
34569: EMPTY
34570: ST_TO_ADDR
// for i in temp_list do
34571: LD_ADDR_VAR 0 8
34575: PUSH
34576: LD_VAR 0 9
34580: PUSH
34581: FOR_IN
34582: IFFALSE 34634
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34584: LD_ADDR_VAR 0 10
34588: PUSH
34589: LD_VAR 0 10
34593: PUSH
34594: LD_VAR 0 8
34598: PUSH
34599: LD_INT 1
34601: ARRAY
34602: PUSH
34603: LD_VAR 0 2
34607: PLUS
34608: PUSH
34609: LD_VAR 0 8
34613: PUSH
34614: LD_INT 2
34616: ARRAY
34617: PUSH
34618: LD_VAR 0 3
34622: PLUS
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: EMPTY
34629: LIST
34630: ADD
34631: ST_TO_ADDR
34632: GO 34581
34634: POP
34635: POP
// result = temp_list2 ;
34636: LD_ADDR_VAR 0 7
34640: PUSH
34641: LD_VAR 0 10
34645: ST_TO_ADDR
// end ;
34646: LD_VAR 0 7
34650: RET
// export function EnemyInRange ( unit , dist ) ; begin
34651: LD_INT 0
34653: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34654: LD_ADDR_VAR 0 3
34658: PUSH
34659: LD_VAR 0 1
34663: PPUSH
34664: CALL_OW 255
34668: PPUSH
34669: LD_VAR 0 1
34673: PPUSH
34674: CALL_OW 250
34678: PPUSH
34679: LD_VAR 0 1
34683: PPUSH
34684: CALL_OW 251
34688: PPUSH
34689: LD_VAR 0 2
34693: PPUSH
34694: CALL 8024 0 4
34698: PUSH
34699: LD_INT 4
34701: ARRAY
34702: ST_TO_ADDR
// end ;
34703: LD_VAR 0 3
34707: RET
// export function PlayerSeeMe ( unit ) ; begin
34708: LD_INT 0
34710: PPUSH
// result := See ( your_side , unit ) ;
34711: LD_ADDR_VAR 0 2
34715: PUSH
34716: LD_OWVAR 2
34720: PPUSH
34721: LD_VAR 0 1
34725: PPUSH
34726: CALL_OW 292
34730: ST_TO_ADDR
// end ;
34731: LD_VAR 0 2
34735: RET
// export function ReverseDir ( unit ) ; begin
34736: LD_INT 0
34738: PPUSH
// if not unit then
34739: LD_VAR 0 1
34743: NOT
34744: IFFALSE 34748
// exit ;
34746: GO 34771
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34748: LD_ADDR_VAR 0 2
34752: PUSH
34753: LD_VAR 0 1
34757: PPUSH
34758: CALL_OW 254
34762: PUSH
34763: LD_INT 3
34765: PLUS
34766: PUSH
34767: LD_INT 6
34769: MOD
34770: ST_TO_ADDR
// end ;
34771: LD_VAR 0 2
34775: RET
// export function ReverseArray ( array ) ; var i ; begin
34776: LD_INT 0
34778: PPUSH
34779: PPUSH
// if not array then
34780: LD_VAR 0 1
34784: NOT
34785: IFFALSE 34789
// exit ;
34787: GO 34844
// result := [ ] ;
34789: LD_ADDR_VAR 0 2
34793: PUSH
34794: EMPTY
34795: ST_TO_ADDR
// for i := array downto 1 do
34796: LD_ADDR_VAR 0 3
34800: PUSH
34801: DOUBLE
34802: LD_VAR 0 1
34806: INC
34807: ST_TO_ADDR
34808: LD_INT 1
34810: PUSH
34811: FOR_DOWNTO
34812: IFFALSE 34842
// result := Join ( result , array [ i ] ) ;
34814: LD_ADDR_VAR 0 2
34818: PUSH
34819: LD_VAR 0 2
34823: PPUSH
34824: LD_VAR 0 1
34828: PUSH
34829: LD_VAR 0 3
34833: ARRAY
34834: PPUSH
34835: CALL 39581 0 2
34839: ST_TO_ADDR
34840: GO 34811
34842: POP
34843: POP
// end ;
34844: LD_VAR 0 2
34848: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34849: LD_INT 0
34851: PPUSH
34852: PPUSH
34853: PPUSH
34854: PPUSH
34855: PPUSH
34856: PPUSH
// if not unit or not hexes then
34857: LD_VAR 0 1
34861: NOT
34862: PUSH
34863: LD_VAR 0 2
34867: NOT
34868: OR
34869: IFFALSE 34873
// exit ;
34871: GO 34996
// dist := 9999 ;
34873: LD_ADDR_VAR 0 5
34877: PUSH
34878: LD_INT 9999
34880: ST_TO_ADDR
// for i = 1 to hexes do
34881: LD_ADDR_VAR 0 4
34885: PUSH
34886: DOUBLE
34887: LD_INT 1
34889: DEC
34890: ST_TO_ADDR
34891: LD_VAR 0 2
34895: PUSH
34896: FOR_TO
34897: IFFALSE 34984
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34899: LD_ADDR_VAR 0 6
34903: PUSH
34904: LD_VAR 0 1
34908: PPUSH
34909: LD_VAR 0 2
34913: PUSH
34914: LD_VAR 0 4
34918: ARRAY
34919: PUSH
34920: LD_INT 1
34922: ARRAY
34923: PPUSH
34924: LD_VAR 0 2
34928: PUSH
34929: LD_VAR 0 4
34933: ARRAY
34934: PUSH
34935: LD_INT 2
34937: ARRAY
34938: PPUSH
34939: CALL_OW 297
34943: ST_TO_ADDR
// if tdist < dist then
34944: LD_VAR 0 6
34948: PUSH
34949: LD_VAR 0 5
34953: LESS
34954: IFFALSE 34982
// begin hex := hexes [ i ] ;
34956: LD_ADDR_VAR 0 8
34960: PUSH
34961: LD_VAR 0 2
34965: PUSH
34966: LD_VAR 0 4
34970: ARRAY
34971: ST_TO_ADDR
// dist := tdist ;
34972: LD_ADDR_VAR 0 5
34976: PUSH
34977: LD_VAR 0 6
34981: ST_TO_ADDR
// end ; end ;
34982: GO 34896
34984: POP
34985: POP
// result := hex ;
34986: LD_ADDR_VAR 0 3
34990: PUSH
34991: LD_VAR 0 8
34995: ST_TO_ADDR
// end ;
34996: LD_VAR 0 3
35000: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35001: LD_INT 0
35003: PPUSH
35004: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35005: LD_VAR 0 1
35009: NOT
35010: PUSH
35011: LD_VAR 0 1
35015: PUSH
35016: LD_INT 21
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 23
35028: PUSH
35029: LD_INT 2
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PPUSH
35040: CALL_OW 69
35044: IN
35045: NOT
35046: OR
35047: IFFALSE 35051
// exit ;
35049: GO 35098
// for i = 1 to 3 do
35051: LD_ADDR_VAR 0 3
35055: PUSH
35056: DOUBLE
35057: LD_INT 1
35059: DEC
35060: ST_TO_ADDR
35061: LD_INT 3
35063: PUSH
35064: FOR_TO
35065: IFFALSE 35096
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35067: LD_VAR 0 1
35071: PPUSH
35072: CALL_OW 250
35076: PPUSH
35077: LD_VAR 0 1
35081: PPUSH
35082: CALL_OW 251
35086: PPUSH
35087: LD_INT 1
35089: PPUSH
35090: CALL_OW 453
35094: GO 35064
35096: POP
35097: POP
// end ;
35098: LD_VAR 0 2
35102: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35103: LD_INT 0
35105: PPUSH
35106: PPUSH
35107: PPUSH
35108: PPUSH
35109: PPUSH
35110: PPUSH
// if not unit or not enemy_unit then
35111: LD_VAR 0 1
35115: NOT
35116: PUSH
35117: LD_VAR 0 2
35121: NOT
35122: OR
35123: IFFALSE 35127
// exit ;
35125: GO 35594
// if GetLives ( i ) < 250 then
35127: LD_VAR 0 4
35131: PPUSH
35132: CALL_OW 256
35136: PUSH
35137: LD_INT 250
35139: LESS
35140: IFFALSE 35153
// begin ComAutodestruct ( i ) ;
35142: LD_VAR 0 4
35146: PPUSH
35147: CALL 35001 0 1
// exit ;
35151: GO 35594
// end ; x := GetX ( enemy_unit ) ;
35153: LD_ADDR_VAR 0 7
35157: PUSH
35158: LD_VAR 0 2
35162: PPUSH
35163: CALL_OW 250
35167: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35168: LD_ADDR_VAR 0 8
35172: PUSH
35173: LD_VAR 0 2
35177: PPUSH
35178: CALL_OW 251
35182: ST_TO_ADDR
// if not x or not y then
35183: LD_VAR 0 7
35187: NOT
35188: PUSH
35189: LD_VAR 0 8
35193: NOT
35194: OR
35195: IFFALSE 35199
// exit ;
35197: GO 35594
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35199: LD_ADDR_VAR 0 6
35203: PUSH
35204: LD_VAR 0 7
35208: PPUSH
35209: LD_INT 0
35211: PPUSH
35212: LD_INT 4
35214: PPUSH
35215: CALL_OW 272
35219: PUSH
35220: LD_VAR 0 8
35224: PPUSH
35225: LD_INT 0
35227: PPUSH
35228: LD_INT 4
35230: PPUSH
35231: CALL_OW 273
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_VAR 0 7
35244: PPUSH
35245: LD_INT 1
35247: PPUSH
35248: LD_INT 4
35250: PPUSH
35251: CALL_OW 272
35255: PUSH
35256: LD_VAR 0 8
35260: PPUSH
35261: LD_INT 1
35263: PPUSH
35264: LD_INT 4
35266: PPUSH
35267: CALL_OW 273
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_VAR 0 7
35280: PPUSH
35281: LD_INT 2
35283: PPUSH
35284: LD_INT 4
35286: PPUSH
35287: CALL_OW 272
35291: PUSH
35292: LD_VAR 0 8
35296: PPUSH
35297: LD_INT 2
35299: PPUSH
35300: LD_INT 4
35302: PPUSH
35303: CALL_OW 273
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_VAR 0 7
35316: PPUSH
35317: LD_INT 3
35319: PPUSH
35320: LD_INT 4
35322: PPUSH
35323: CALL_OW 272
35327: PUSH
35328: LD_VAR 0 8
35332: PPUSH
35333: LD_INT 3
35335: PPUSH
35336: LD_INT 4
35338: PPUSH
35339: CALL_OW 273
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_VAR 0 7
35352: PPUSH
35353: LD_INT 4
35355: PPUSH
35356: LD_INT 4
35358: PPUSH
35359: CALL_OW 272
35363: PUSH
35364: LD_VAR 0 8
35368: PPUSH
35369: LD_INT 4
35371: PPUSH
35372: LD_INT 4
35374: PPUSH
35375: CALL_OW 273
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_VAR 0 7
35388: PPUSH
35389: LD_INT 5
35391: PPUSH
35392: LD_INT 4
35394: PPUSH
35395: CALL_OW 272
35399: PUSH
35400: LD_VAR 0 8
35404: PPUSH
35405: LD_INT 5
35407: PPUSH
35408: LD_INT 4
35410: PPUSH
35411: CALL_OW 273
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: ST_TO_ADDR
// for i = tmp downto 1 do
35428: LD_ADDR_VAR 0 4
35432: PUSH
35433: DOUBLE
35434: LD_VAR 0 6
35438: INC
35439: ST_TO_ADDR
35440: LD_INT 1
35442: PUSH
35443: FOR_DOWNTO
35444: IFFALSE 35545
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35446: LD_VAR 0 6
35450: PUSH
35451: LD_VAR 0 4
35455: ARRAY
35456: PUSH
35457: LD_INT 1
35459: ARRAY
35460: PPUSH
35461: LD_VAR 0 6
35465: PUSH
35466: LD_VAR 0 4
35470: ARRAY
35471: PUSH
35472: LD_INT 2
35474: ARRAY
35475: PPUSH
35476: CALL_OW 488
35480: NOT
35481: PUSH
35482: LD_VAR 0 6
35486: PUSH
35487: LD_VAR 0 4
35491: ARRAY
35492: PUSH
35493: LD_INT 1
35495: ARRAY
35496: PPUSH
35497: LD_VAR 0 6
35501: PUSH
35502: LD_VAR 0 4
35506: ARRAY
35507: PUSH
35508: LD_INT 2
35510: ARRAY
35511: PPUSH
35512: CALL_OW 428
35516: PUSH
35517: LD_INT 0
35519: NONEQUAL
35520: OR
35521: IFFALSE 35543
// tmp := Delete ( tmp , i ) ;
35523: LD_ADDR_VAR 0 6
35527: PUSH
35528: LD_VAR 0 6
35532: PPUSH
35533: LD_VAR 0 4
35537: PPUSH
35538: CALL_OW 3
35542: ST_TO_ADDR
35543: GO 35443
35545: POP
35546: POP
// j := GetClosestHex ( unit , tmp ) ;
35547: LD_ADDR_VAR 0 5
35551: PUSH
35552: LD_VAR 0 1
35556: PPUSH
35557: LD_VAR 0 6
35561: PPUSH
35562: CALL 34849 0 2
35566: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35567: LD_VAR 0 1
35571: PPUSH
35572: LD_VAR 0 5
35576: PUSH
35577: LD_INT 1
35579: ARRAY
35580: PPUSH
35581: LD_VAR 0 5
35585: PUSH
35586: LD_INT 2
35588: ARRAY
35589: PPUSH
35590: CALL_OW 111
// end ;
35594: LD_VAR 0 3
35598: RET
// export function PrepareApemanSoldier ( ) ; begin
35599: LD_INT 0
35601: PPUSH
// uc_nation := 0 ;
35602: LD_ADDR_OWVAR 21
35606: PUSH
35607: LD_INT 0
35609: ST_TO_ADDR
// hc_sex := sex_male ;
35610: LD_ADDR_OWVAR 27
35614: PUSH
35615: LD_INT 1
35617: ST_TO_ADDR
// hc_name :=  ;
35618: LD_ADDR_OWVAR 26
35622: PUSH
35623: LD_STRING 
35625: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35626: LD_ADDR_OWVAR 28
35630: PUSH
35631: LD_INT 15
35633: ST_TO_ADDR
// hc_gallery :=  ;
35634: LD_ADDR_OWVAR 33
35638: PUSH
35639: LD_STRING 
35641: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35642: LD_ADDR_OWVAR 31
35646: PUSH
35647: LD_INT 0
35649: PPUSH
35650: LD_INT 3
35652: PPUSH
35653: CALL_OW 12
35657: PUSH
35658: LD_INT 0
35660: PPUSH
35661: LD_INT 3
35663: PPUSH
35664: CALL_OW 12
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: ST_TO_ADDR
// end ;
35681: LD_VAR 0 1
35685: RET
// export function PrepareApemanEngineer ( ) ; begin
35686: LD_INT 0
35688: PPUSH
// uc_nation := 0 ;
35689: LD_ADDR_OWVAR 21
35693: PUSH
35694: LD_INT 0
35696: ST_TO_ADDR
// hc_sex := sex_male ;
35697: LD_ADDR_OWVAR 27
35701: PUSH
35702: LD_INT 1
35704: ST_TO_ADDR
// hc_name :=  ;
35705: LD_ADDR_OWVAR 26
35709: PUSH
35710: LD_STRING 
35712: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35713: LD_ADDR_OWVAR 28
35717: PUSH
35718: LD_INT 16
35720: ST_TO_ADDR
// hc_gallery :=  ;
35721: LD_ADDR_OWVAR 33
35725: PUSH
35726: LD_STRING 
35728: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35729: LD_ADDR_OWVAR 31
35733: PUSH
35734: LD_INT 0
35736: PPUSH
35737: LD_INT 3
35739: PPUSH
35740: CALL_OW 12
35744: PUSH
35745: LD_INT 0
35747: PPUSH
35748: LD_INT 3
35750: PPUSH
35751: CALL_OW 12
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: ST_TO_ADDR
// end ;
35768: LD_VAR 0 1
35772: RET
// export function PrepareApeman ( agressivity ) ; begin
35773: LD_INT 0
35775: PPUSH
// uc_side := 0 ;
35776: LD_ADDR_OWVAR 20
35780: PUSH
35781: LD_INT 0
35783: ST_TO_ADDR
// uc_nation := 0 ;
35784: LD_ADDR_OWVAR 21
35788: PUSH
35789: LD_INT 0
35791: ST_TO_ADDR
// hc_sex := sex_male ;
35792: LD_ADDR_OWVAR 27
35796: PUSH
35797: LD_INT 1
35799: ST_TO_ADDR
// hc_class := class_apeman ;
35800: LD_ADDR_OWVAR 28
35804: PUSH
35805: LD_INT 12
35807: ST_TO_ADDR
// hc_gallery :=  ;
35808: LD_ADDR_OWVAR 33
35812: PUSH
35813: LD_STRING 
35815: ST_TO_ADDR
// hc_name :=  ;
35816: LD_ADDR_OWVAR 26
35820: PUSH
35821: LD_STRING 
35823: ST_TO_ADDR
// if agressivity = 0 then
35824: LD_VAR 0 1
35828: PUSH
35829: LD_INT 0
35831: EQUAL
35832: IFFALSE 35844
// hc_agressivity := 0 else
35834: LD_ADDR_OWVAR 35
35838: PUSH
35839: LD_INT 0
35841: ST_TO_ADDR
35842: GO 35865
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35844: LD_ADDR_OWVAR 35
35848: PUSH
35849: LD_VAR 0 1
35853: NEG
35854: PPUSH
35855: LD_VAR 0 1
35859: PPUSH
35860: CALL_OW 12
35864: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35865: LD_ADDR_OWVAR 31
35869: PUSH
35870: LD_INT 0
35872: PPUSH
35873: LD_INT 3
35875: PPUSH
35876: CALL_OW 12
35880: PUSH
35881: LD_INT 0
35883: PPUSH
35884: LD_INT 3
35886: PPUSH
35887: CALL_OW 12
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: ST_TO_ADDR
// end ;
35904: LD_VAR 0 2
35908: RET
// export function PrepareTiger ( agressivity ) ; begin
35909: LD_INT 0
35911: PPUSH
// uc_side := 0 ;
35912: LD_ADDR_OWVAR 20
35916: PUSH
35917: LD_INT 0
35919: ST_TO_ADDR
// uc_nation := 0 ;
35920: LD_ADDR_OWVAR 21
35924: PUSH
35925: LD_INT 0
35927: ST_TO_ADDR
// hc_class := class_tiger ;
35928: LD_ADDR_OWVAR 28
35932: PUSH
35933: LD_INT 14
35935: ST_TO_ADDR
// hc_gallery :=  ;
35936: LD_ADDR_OWVAR 33
35940: PUSH
35941: LD_STRING 
35943: ST_TO_ADDR
// hc_name :=  ;
35944: LD_ADDR_OWVAR 26
35948: PUSH
35949: LD_STRING 
35951: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35952: LD_ADDR_OWVAR 35
35956: PUSH
35957: LD_VAR 0 1
35961: NEG
35962: PPUSH
35963: LD_VAR 0 1
35967: PPUSH
35968: CALL_OW 12
35972: ST_TO_ADDR
// end ;
35973: LD_VAR 0 2
35977: RET
// export function PrepareEnchidna ( ) ; begin
35978: LD_INT 0
35980: PPUSH
// uc_side := 0 ;
35981: LD_ADDR_OWVAR 20
35985: PUSH
35986: LD_INT 0
35988: ST_TO_ADDR
// uc_nation := 0 ;
35989: LD_ADDR_OWVAR 21
35993: PUSH
35994: LD_INT 0
35996: ST_TO_ADDR
// hc_class := class_baggie ;
35997: LD_ADDR_OWVAR 28
36001: PUSH
36002: LD_INT 13
36004: ST_TO_ADDR
// hc_gallery :=  ;
36005: LD_ADDR_OWVAR 33
36009: PUSH
36010: LD_STRING 
36012: ST_TO_ADDR
// hc_name :=  ;
36013: LD_ADDR_OWVAR 26
36017: PUSH
36018: LD_STRING 
36020: ST_TO_ADDR
// end ;
36021: LD_VAR 0 1
36025: RET
// export function PrepareFrog ( ) ; begin
36026: LD_INT 0
36028: PPUSH
// uc_side := 0 ;
36029: LD_ADDR_OWVAR 20
36033: PUSH
36034: LD_INT 0
36036: ST_TO_ADDR
// uc_nation := 0 ;
36037: LD_ADDR_OWVAR 21
36041: PUSH
36042: LD_INT 0
36044: ST_TO_ADDR
// hc_class := class_frog ;
36045: LD_ADDR_OWVAR 28
36049: PUSH
36050: LD_INT 19
36052: ST_TO_ADDR
// hc_gallery :=  ;
36053: LD_ADDR_OWVAR 33
36057: PUSH
36058: LD_STRING 
36060: ST_TO_ADDR
// hc_name :=  ;
36061: LD_ADDR_OWVAR 26
36065: PUSH
36066: LD_STRING 
36068: ST_TO_ADDR
// end ;
36069: LD_VAR 0 1
36073: RET
// export function PrepareFish ( ) ; begin
36074: LD_INT 0
36076: PPUSH
// uc_side := 0 ;
36077: LD_ADDR_OWVAR 20
36081: PUSH
36082: LD_INT 0
36084: ST_TO_ADDR
// uc_nation := 0 ;
36085: LD_ADDR_OWVAR 21
36089: PUSH
36090: LD_INT 0
36092: ST_TO_ADDR
// hc_class := class_fish ;
36093: LD_ADDR_OWVAR 28
36097: PUSH
36098: LD_INT 20
36100: ST_TO_ADDR
// hc_gallery :=  ;
36101: LD_ADDR_OWVAR 33
36105: PUSH
36106: LD_STRING 
36108: ST_TO_ADDR
// hc_name :=  ;
36109: LD_ADDR_OWVAR 26
36113: PUSH
36114: LD_STRING 
36116: ST_TO_ADDR
// end ;
36117: LD_VAR 0 1
36121: RET
// export function PrepareBird ( ) ; begin
36122: LD_INT 0
36124: PPUSH
// uc_side := 0 ;
36125: LD_ADDR_OWVAR 20
36129: PUSH
36130: LD_INT 0
36132: ST_TO_ADDR
// uc_nation := 0 ;
36133: LD_ADDR_OWVAR 21
36137: PUSH
36138: LD_INT 0
36140: ST_TO_ADDR
// hc_class := class_phororhacos ;
36141: LD_ADDR_OWVAR 28
36145: PUSH
36146: LD_INT 18
36148: ST_TO_ADDR
// hc_gallery :=  ;
36149: LD_ADDR_OWVAR 33
36153: PUSH
36154: LD_STRING 
36156: ST_TO_ADDR
// hc_name :=  ;
36157: LD_ADDR_OWVAR 26
36161: PUSH
36162: LD_STRING 
36164: ST_TO_ADDR
// end ;
36165: LD_VAR 0 1
36169: RET
// export function PrepareHorse ( ) ; begin
36170: LD_INT 0
36172: PPUSH
// uc_side := 0 ;
36173: LD_ADDR_OWVAR 20
36177: PUSH
36178: LD_INT 0
36180: ST_TO_ADDR
// uc_nation := 0 ;
36181: LD_ADDR_OWVAR 21
36185: PUSH
36186: LD_INT 0
36188: ST_TO_ADDR
// hc_class := class_horse ;
36189: LD_ADDR_OWVAR 28
36193: PUSH
36194: LD_INT 21
36196: ST_TO_ADDR
// hc_gallery :=  ;
36197: LD_ADDR_OWVAR 33
36201: PUSH
36202: LD_STRING 
36204: ST_TO_ADDR
// hc_name :=  ;
36205: LD_ADDR_OWVAR 26
36209: PUSH
36210: LD_STRING 
36212: ST_TO_ADDR
// end ;
36213: LD_VAR 0 1
36217: RET
// export function PrepareMastodont ( ) ; begin
36218: LD_INT 0
36220: PPUSH
// uc_side := 0 ;
36221: LD_ADDR_OWVAR 20
36225: PUSH
36226: LD_INT 0
36228: ST_TO_ADDR
// uc_nation := 0 ;
36229: LD_ADDR_OWVAR 21
36233: PUSH
36234: LD_INT 0
36236: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36237: LD_ADDR_OWVAR 37
36241: PUSH
36242: LD_INT 31
36244: ST_TO_ADDR
// vc_control := control_rider ;
36245: LD_ADDR_OWVAR 38
36249: PUSH
36250: LD_INT 4
36252: ST_TO_ADDR
// end ;
36253: LD_VAR 0 1
36257: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36258: LD_INT 0
36260: PPUSH
36261: PPUSH
36262: PPUSH
// uc_side = 0 ;
36263: LD_ADDR_OWVAR 20
36267: PUSH
36268: LD_INT 0
36270: ST_TO_ADDR
// uc_nation = 0 ;
36271: LD_ADDR_OWVAR 21
36275: PUSH
36276: LD_INT 0
36278: ST_TO_ADDR
// InitHc_All ( ) ;
36279: CALL_OW 584
// InitVc ;
36283: CALL_OW 20
// if mastodonts then
36287: LD_VAR 0 6
36291: IFFALSE 36358
// for i = 1 to mastodonts do
36293: LD_ADDR_VAR 0 11
36297: PUSH
36298: DOUBLE
36299: LD_INT 1
36301: DEC
36302: ST_TO_ADDR
36303: LD_VAR 0 6
36307: PUSH
36308: FOR_TO
36309: IFFALSE 36356
// begin vc_chassis := 31 ;
36311: LD_ADDR_OWVAR 37
36315: PUSH
36316: LD_INT 31
36318: ST_TO_ADDR
// vc_control := control_rider ;
36319: LD_ADDR_OWVAR 38
36323: PUSH
36324: LD_INT 4
36326: ST_TO_ADDR
// animal := CreateVehicle ;
36327: LD_ADDR_VAR 0 12
36331: PUSH
36332: CALL_OW 45
36336: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36337: LD_VAR 0 12
36341: PPUSH
36342: LD_VAR 0 8
36346: PPUSH
36347: LD_INT 0
36349: PPUSH
36350: CALL 38486 0 3
// end ;
36354: GO 36308
36356: POP
36357: POP
// if horses then
36358: LD_VAR 0 5
36362: IFFALSE 36429
// for i = 1 to horses do
36364: LD_ADDR_VAR 0 11
36368: PUSH
36369: DOUBLE
36370: LD_INT 1
36372: DEC
36373: ST_TO_ADDR
36374: LD_VAR 0 5
36378: PUSH
36379: FOR_TO
36380: IFFALSE 36427
// begin hc_class := 21 ;
36382: LD_ADDR_OWVAR 28
36386: PUSH
36387: LD_INT 21
36389: ST_TO_ADDR
// hc_gallery :=  ;
36390: LD_ADDR_OWVAR 33
36394: PUSH
36395: LD_STRING 
36397: ST_TO_ADDR
// animal := CreateHuman ;
36398: LD_ADDR_VAR 0 12
36402: PUSH
36403: CALL_OW 44
36407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36408: LD_VAR 0 12
36412: PPUSH
36413: LD_VAR 0 8
36417: PPUSH
36418: LD_INT 0
36420: PPUSH
36421: CALL 38486 0 3
// end ;
36425: GO 36379
36427: POP
36428: POP
// if birds then
36429: LD_VAR 0 1
36433: IFFALSE 36500
// for i = 1 to birds do
36435: LD_ADDR_VAR 0 11
36439: PUSH
36440: DOUBLE
36441: LD_INT 1
36443: DEC
36444: ST_TO_ADDR
36445: LD_VAR 0 1
36449: PUSH
36450: FOR_TO
36451: IFFALSE 36498
// begin hc_class := 18 ;
36453: LD_ADDR_OWVAR 28
36457: PUSH
36458: LD_INT 18
36460: ST_TO_ADDR
// hc_gallery =  ;
36461: LD_ADDR_OWVAR 33
36465: PUSH
36466: LD_STRING 
36468: ST_TO_ADDR
// animal := CreateHuman ;
36469: LD_ADDR_VAR 0 12
36473: PUSH
36474: CALL_OW 44
36478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36479: LD_VAR 0 12
36483: PPUSH
36484: LD_VAR 0 8
36488: PPUSH
36489: LD_INT 0
36491: PPUSH
36492: CALL 38486 0 3
// end ;
36496: GO 36450
36498: POP
36499: POP
// if tigers then
36500: LD_VAR 0 2
36504: IFFALSE 36588
// for i = 1 to tigers do
36506: LD_ADDR_VAR 0 11
36510: PUSH
36511: DOUBLE
36512: LD_INT 1
36514: DEC
36515: ST_TO_ADDR
36516: LD_VAR 0 2
36520: PUSH
36521: FOR_TO
36522: IFFALSE 36586
// begin hc_class = class_tiger ;
36524: LD_ADDR_OWVAR 28
36528: PUSH
36529: LD_INT 14
36531: ST_TO_ADDR
// hc_gallery =  ;
36532: LD_ADDR_OWVAR 33
36536: PUSH
36537: LD_STRING 
36539: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36540: LD_ADDR_OWVAR 35
36544: PUSH
36545: LD_INT 7
36547: NEG
36548: PPUSH
36549: LD_INT 7
36551: PPUSH
36552: CALL_OW 12
36556: ST_TO_ADDR
// animal := CreateHuman ;
36557: LD_ADDR_VAR 0 12
36561: PUSH
36562: CALL_OW 44
36566: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36567: LD_VAR 0 12
36571: PPUSH
36572: LD_VAR 0 8
36576: PPUSH
36577: LD_INT 0
36579: PPUSH
36580: CALL 38486 0 3
// end ;
36584: GO 36521
36586: POP
36587: POP
// if apemans then
36588: LD_VAR 0 3
36592: IFFALSE 36715
// for i = 1 to apemans do
36594: LD_ADDR_VAR 0 11
36598: PUSH
36599: DOUBLE
36600: LD_INT 1
36602: DEC
36603: ST_TO_ADDR
36604: LD_VAR 0 3
36608: PUSH
36609: FOR_TO
36610: IFFALSE 36713
// begin hc_class = class_apeman ;
36612: LD_ADDR_OWVAR 28
36616: PUSH
36617: LD_INT 12
36619: ST_TO_ADDR
// hc_gallery =  ;
36620: LD_ADDR_OWVAR 33
36624: PUSH
36625: LD_STRING 
36627: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36628: LD_ADDR_OWVAR 35
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PPUSH
36637: LD_INT 2
36639: PPUSH
36640: CALL_OW 12
36644: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36645: LD_ADDR_OWVAR 31
36649: PUSH
36650: LD_INT 1
36652: PPUSH
36653: LD_INT 3
36655: PPUSH
36656: CALL_OW 12
36660: PUSH
36661: LD_INT 1
36663: PPUSH
36664: LD_INT 3
36666: PPUSH
36667: CALL_OW 12
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: ST_TO_ADDR
// animal := CreateHuman ;
36684: LD_ADDR_VAR 0 12
36688: PUSH
36689: CALL_OW 44
36693: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36694: LD_VAR 0 12
36698: PPUSH
36699: LD_VAR 0 8
36703: PPUSH
36704: LD_INT 0
36706: PPUSH
36707: CALL 38486 0 3
// end ;
36711: GO 36609
36713: POP
36714: POP
// if enchidnas then
36715: LD_VAR 0 4
36719: IFFALSE 36786
// for i = 1 to enchidnas do
36721: LD_ADDR_VAR 0 11
36725: PUSH
36726: DOUBLE
36727: LD_INT 1
36729: DEC
36730: ST_TO_ADDR
36731: LD_VAR 0 4
36735: PUSH
36736: FOR_TO
36737: IFFALSE 36784
// begin hc_class = 13 ;
36739: LD_ADDR_OWVAR 28
36743: PUSH
36744: LD_INT 13
36746: ST_TO_ADDR
// hc_gallery =  ;
36747: LD_ADDR_OWVAR 33
36751: PUSH
36752: LD_STRING 
36754: ST_TO_ADDR
// animal := CreateHuman ;
36755: LD_ADDR_VAR 0 12
36759: PUSH
36760: CALL_OW 44
36764: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36765: LD_VAR 0 12
36769: PPUSH
36770: LD_VAR 0 8
36774: PPUSH
36775: LD_INT 0
36777: PPUSH
36778: CALL 38486 0 3
// end ;
36782: GO 36736
36784: POP
36785: POP
// if fishes then
36786: LD_VAR 0 7
36790: IFFALSE 36857
// for i = 1 to fishes do
36792: LD_ADDR_VAR 0 11
36796: PUSH
36797: DOUBLE
36798: LD_INT 1
36800: DEC
36801: ST_TO_ADDR
36802: LD_VAR 0 7
36806: PUSH
36807: FOR_TO
36808: IFFALSE 36855
// begin hc_class = 20 ;
36810: LD_ADDR_OWVAR 28
36814: PUSH
36815: LD_INT 20
36817: ST_TO_ADDR
// hc_gallery =  ;
36818: LD_ADDR_OWVAR 33
36822: PUSH
36823: LD_STRING 
36825: ST_TO_ADDR
// animal := CreateHuman ;
36826: LD_ADDR_VAR 0 12
36830: PUSH
36831: CALL_OW 44
36835: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36836: LD_VAR 0 12
36840: PPUSH
36841: LD_VAR 0 9
36845: PPUSH
36846: LD_INT 0
36848: PPUSH
36849: CALL 38486 0 3
// end ;
36853: GO 36807
36855: POP
36856: POP
// end ;
36857: LD_VAR 0 10
36861: RET
// export function WantHeal ( sci , unit ) ; begin
36862: LD_INT 0
36864: PPUSH
// if GetTaskList ( sci ) > 0 then
36865: LD_VAR 0 1
36869: PPUSH
36870: CALL_OW 437
36874: PUSH
36875: LD_INT 0
36877: GREATER
36878: IFFALSE 36948
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36880: LD_VAR 0 1
36884: PPUSH
36885: CALL_OW 437
36889: PUSH
36890: LD_INT 1
36892: ARRAY
36893: PUSH
36894: LD_INT 1
36896: ARRAY
36897: PUSH
36898: LD_STRING l
36900: EQUAL
36901: PUSH
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL_OW 437
36911: PUSH
36912: LD_INT 1
36914: ARRAY
36915: PUSH
36916: LD_INT 4
36918: ARRAY
36919: PUSH
36920: LD_VAR 0 2
36924: EQUAL
36925: AND
36926: IFFALSE 36938
// result := true else
36928: LD_ADDR_VAR 0 3
36932: PUSH
36933: LD_INT 1
36935: ST_TO_ADDR
36936: GO 36946
// result := false ;
36938: LD_ADDR_VAR 0 3
36942: PUSH
36943: LD_INT 0
36945: ST_TO_ADDR
// end else
36946: GO 36956
// result := false ;
36948: LD_ADDR_VAR 0 3
36952: PUSH
36953: LD_INT 0
36955: ST_TO_ADDR
// end ;
36956: LD_VAR 0 3
36960: RET
// export function HealTarget ( sci ) ; begin
36961: LD_INT 0
36963: PPUSH
// if not sci then
36964: LD_VAR 0 1
36968: NOT
36969: IFFALSE 36973
// exit ;
36971: GO 37038
// result := 0 ;
36973: LD_ADDR_VAR 0 2
36977: PUSH
36978: LD_INT 0
36980: ST_TO_ADDR
// if GetTaskList ( sci ) then
36981: LD_VAR 0 1
36985: PPUSH
36986: CALL_OW 437
36990: IFFALSE 37038
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36992: LD_VAR 0 1
36996: PPUSH
36997: CALL_OW 437
37001: PUSH
37002: LD_INT 1
37004: ARRAY
37005: PUSH
37006: LD_INT 1
37008: ARRAY
37009: PUSH
37010: LD_STRING l
37012: EQUAL
37013: IFFALSE 37038
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37015: LD_ADDR_VAR 0 2
37019: PUSH
37020: LD_VAR 0 1
37024: PPUSH
37025: CALL_OW 437
37029: PUSH
37030: LD_INT 1
37032: ARRAY
37033: PUSH
37034: LD_INT 4
37036: ARRAY
37037: ST_TO_ADDR
// end ;
37038: LD_VAR 0 2
37042: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37043: LD_INT 0
37045: PPUSH
37046: PPUSH
37047: PPUSH
37048: PPUSH
// if not base_units then
37049: LD_VAR 0 1
37053: NOT
37054: IFFALSE 37058
// exit ;
37056: GO 37145
// result := false ;
37058: LD_ADDR_VAR 0 2
37062: PUSH
37063: LD_INT 0
37065: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37066: LD_ADDR_VAR 0 5
37070: PUSH
37071: LD_VAR 0 1
37075: PPUSH
37076: LD_INT 21
37078: PUSH
37079: LD_INT 3
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PPUSH
37086: CALL_OW 72
37090: ST_TO_ADDR
// if not tmp then
37091: LD_VAR 0 5
37095: NOT
37096: IFFALSE 37100
// exit ;
37098: GO 37145
// for i in tmp do
37100: LD_ADDR_VAR 0 3
37104: PUSH
37105: LD_VAR 0 5
37109: PUSH
37110: FOR_IN
37111: IFFALSE 37143
// begin result := EnemyInRange ( i , 22 ) ;
37113: LD_ADDR_VAR 0 2
37117: PUSH
37118: LD_VAR 0 3
37122: PPUSH
37123: LD_INT 22
37125: PPUSH
37126: CALL 34651 0 2
37130: ST_TO_ADDR
// if result then
37131: LD_VAR 0 2
37135: IFFALSE 37141
// exit ;
37137: POP
37138: POP
37139: GO 37145
// end ;
37141: GO 37110
37143: POP
37144: POP
// end ;
37145: LD_VAR 0 2
37149: RET
// export function FilterByTag ( units , tag ) ; begin
37150: LD_INT 0
37152: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37153: LD_ADDR_VAR 0 3
37157: PUSH
37158: LD_VAR 0 1
37162: PPUSH
37163: LD_INT 120
37165: PUSH
37166: LD_VAR 0 2
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PPUSH
37175: CALL_OW 72
37179: ST_TO_ADDR
// end ;
37180: LD_VAR 0 3
37184: RET
// export function IsDriver ( un ) ; begin
37185: LD_INT 0
37187: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37188: LD_ADDR_VAR 0 2
37192: PUSH
37193: LD_VAR 0 1
37197: PUSH
37198: LD_INT 55
37200: PUSH
37201: EMPTY
37202: LIST
37203: PPUSH
37204: CALL_OW 69
37208: IN
37209: ST_TO_ADDR
// end ;
37210: LD_VAR 0 2
37214: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37215: LD_INT 0
37217: PPUSH
37218: PPUSH
// list := [ ] ;
37219: LD_ADDR_VAR 0 5
37223: PUSH
37224: EMPTY
37225: ST_TO_ADDR
// case d of 0 :
37226: LD_VAR 0 3
37230: PUSH
37231: LD_INT 0
37233: DOUBLE
37234: EQUAL
37235: IFTRUE 37239
37237: GO 37372
37239: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37240: LD_ADDR_VAR 0 5
37244: PUSH
37245: LD_VAR 0 1
37249: PUSH
37250: LD_INT 4
37252: MINUS
37253: PUSH
37254: LD_VAR 0 2
37258: PUSH
37259: LD_INT 4
37261: MINUS
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: PUSH
37271: LD_VAR 0 1
37275: PUSH
37276: LD_INT 3
37278: MINUS
37279: PUSH
37280: LD_VAR 0 2
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: LIST
37292: PUSH
37293: LD_VAR 0 1
37297: PUSH
37298: LD_INT 4
37300: PLUS
37301: PUSH
37302: LD_VAR 0 2
37306: PUSH
37307: LD_INT 4
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: PUSH
37315: LD_VAR 0 1
37319: PUSH
37320: LD_INT 3
37322: PLUS
37323: PUSH
37324: LD_VAR 0 2
37328: PUSH
37329: LD_INT 3
37331: PLUS
37332: PUSH
37333: LD_INT 5
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: PUSH
37341: LD_VAR 0 1
37345: PUSH
37346: LD_VAR 0 2
37350: PUSH
37351: LD_INT 4
37353: PLUS
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: ST_TO_ADDR
// end ; 1 :
37370: GO 38070
37372: LD_INT 1
37374: DOUBLE
37375: EQUAL
37376: IFTRUE 37380
37378: GO 37513
37380: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37381: LD_ADDR_VAR 0 5
37385: PUSH
37386: LD_VAR 0 1
37390: PUSH
37391: LD_VAR 0 2
37395: PUSH
37396: LD_INT 4
37398: MINUS
37399: PUSH
37400: LD_INT 3
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: LIST
37407: PUSH
37408: LD_VAR 0 1
37412: PUSH
37413: LD_INT 3
37415: MINUS
37416: PUSH
37417: LD_VAR 0 2
37421: PUSH
37422: LD_INT 3
37424: MINUS
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: PUSH
37434: LD_VAR 0 1
37438: PUSH
37439: LD_INT 4
37441: MINUS
37442: PUSH
37443: LD_VAR 0 2
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: PUSH
37456: LD_VAR 0 1
37460: PUSH
37461: LD_VAR 0 2
37465: PUSH
37466: LD_INT 3
37468: PLUS
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: PUSH
37478: LD_VAR 0 1
37482: PUSH
37483: LD_INT 4
37485: PLUS
37486: PUSH
37487: LD_VAR 0 2
37491: PUSH
37492: LD_INT 4
37494: PLUS
37495: PUSH
37496: LD_INT 5
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: ST_TO_ADDR
// end ; 2 :
37511: GO 38070
37513: LD_INT 2
37515: DOUBLE
37516: EQUAL
37517: IFTRUE 37521
37519: GO 37650
37521: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37522: LD_ADDR_VAR 0 5
37526: PUSH
37527: LD_VAR 0 1
37531: PUSH
37532: LD_VAR 0 2
37536: PUSH
37537: LD_INT 3
37539: MINUS
37540: PUSH
37541: LD_INT 3
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: PUSH
37549: LD_VAR 0 1
37553: PUSH
37554: LD_INT 4
37556: PLUS
37557: PUSH
37558: LD_VAR 0 2
37562: PUSH
37563: LD_INT 4
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: PUSH
37571: LD_VAR 0 1
37575: PUSH
37576: LD_VAR 0 2
37580: PUSH
37581: LD_INT 4
37583: PLUS
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: LIST
37592: PUSH
37593: LD_VAR 0 1
37597: PUSH
37598: LD_INT 3
37600: MINUS
37601: PUSH
37602: LD_VAR 0 2
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: LIST
37614: PUSH
37615: LD_VAR 0 1
37619: PUSH
37620: LD_INT 4
37622: MINUS
37623: PUSH
37624: LD_VAR 0 2
37628: PUSH
37629: LD_INT 4
37631: MINUS
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: ST_TO_ADDR
// end ; 3 :
37648: GO 38070
37650: LD_INT 3
37652: DOUBLE
37653: EQUAL
37654: IFTRUE 37658
37656: GO 37791
37658: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37659: LD_ADDR_VAR 0 5
37663: PUSH
37664: LD_VAR 0 1
37668: PUSH
37669: LD_INT 3
37671: PLUS
37672: PUSH
37673: LD_VAR 0 2
37677: PUSH
37678: LD_INT 4
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: LIST
37685: PUSH
37686: LD_VAR 0 1
37690: PUSH
37691: LD_INT 4
37693: PLUS
37694: PUSH
37695: LD_VAR 0 2
37699: PUSH
37700: LD_INT 4
37702: PLUS
37703: PUSH
37704: LD_INT 5
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: PUSH
37712: LD_VAR 0 1
37716: PUSH
37717: LD_INT 4
37719: MINUS
37720: PUSH
37721: LD_VAR 0 2
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: PUSH
37734: LD_VAR 0 1
37738: PUSH
37739: LD_VAR 0 2
37743: PUSH
37744: LD_INT 4
37746: MINUS
37747: PUSH
37748: LD_INT 3
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: LIST
37755: PUSH
37756: LD_VAR 0 1
37760: PUSH
37761: LD_INT 3
37763: MINUS
37764: PUSH
37765: LD_VAR 0 2
37769: PUSH
37770: LD_INT 3
37772: MINUS
37773: PUSH
37774: LD_INT 2
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: ST_TO_ADDR
// end ; 4 :
37789: GO 38070
37791: LD_INT 4
37793: DOUBLE
37794: EQUAL
37795: IFTRUE 37799
37797: GO 37932
37799: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37800: LD_ADDR_VAR 0 5
37804: PUSH
37805: LD_VAR 0 1
37809: PUSH
37810: LD_VAR 0 2
37814: PUSH
37815: LD_INT 4
37817: PLUS
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: PUSH
37827: LD_VAR 0 1
37831: PUSH
37832: LD_INT 3
37834: PLUS
37835: PUSH
37836: LD_VAR 0 2
37840: PUSH
37841: LD_INT 3
37843: PLUS
37844: PUSH
37845: LD_INT 5
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: LIST
37852: PUSH
37853: LD_VAR 0 1
37857: PUSH
37858: LD_INT 4
37860: PLUS
37861: PUSH
37862: LD_VAR 0 2
37866: PUSH
37867: LD_INT 4
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: LIST
37874: PUSH
37875: LD_VAR 0 1
37879: PUSH
37880: LD_VAR 0 2
37884: PUSH
37885: LD_INT 3
37887: MINUS
37888: PUSH
37889: LD_INT 3
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: LIST
37896: PUSH
37897: LD_VAR 0 1
37901: PUSH
37902: LD_INT 4
37904: MINUS
37905: PUSH
37906: LD_VAR 0 2
37910: PUSH
37911: LD_INT 4
37913: MINUS
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: ST_TO_ADDR
// end ; 5 :
37930: GO 38070
37932: LD_INT 5
37934: DOUBLE
37935: EQUAL
37936: IFTRUE 37940
37938: GO 38069
37940: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37941: LD_ADDR_VAR 0 5
37945: PUSH
37946: LD_VAR 0 1
37950: PUSH
37951: LD_INT 4
37953: MINUS
37954: PUSH
37955: LD_VAR 0 2
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: LIST
37967: PUSH
37968: LD_VAR 0 1
37972: PUSH
37973: LD_VAR 0 2
37977: PUSH
37978: LD_INT 4
37980: MINUS
37981: PUSH
37982: LD_INT 3
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: PUSH
37990: LD_VAR 0 1
37994: PUSH
37995: LD_INT 4
37997: PLUS
37998: PUSH
37999: LD_VAR 0 2
38003: PUSH
38004: LD_INT 4
38006: PLUS
38007: PUSH
38008: LD_INT 5
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: LIST
38015: PUSH
38016: LD_VAR 0 1
38020: PUSH
38021: LD_INT 3
38023: PLUS
38024: PUSH
38025: LD_VAR 0 2
38029: PUSH
38030: LD_INT 4
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: LIST
38037: PUSH
38038: LD_VAR 0 1
38042: PUSH
38043: LD_VAR 0 2
38047: PUSH
38048: LD_INT 3
38050: PLUS
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// end ; end ;
38067: GO 38070
38069: POP
// result := list ;
38070: LD_ADDR_VAR 0 4
38074: PUSH
38075: LD_VAR 0 5
38079: ST_TO_ADDR
// end ;
38080: LD_VAR 0 4
38084: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38085: LD_INT 0
38087: PPUSH
38088: PPUSH
38089: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38090: LD_VAR 0 1
38094: NOT
38095: PUSH
38096: LD_VAR 0 2
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: LD_INT 3
38109: PUSH
38110: LD_INT 4
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: IN
38119: NOT
38120: OR
38121: IFFALSE 38125
// exit ;
38123: GO 38208
// tmp := [ ] ;
38125: LD_ADDR_VAR 0 5
38129: PUSH
38130: EMPTY
38131: ST_TO_ADDR
// for i in units do
38132: LD_ADDR_VAR 0 4
38136: PUSH
38137: LD_VAR 0 1
38141: PUSH
38142: FOR_IN
38143: IFFALSE 38177
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38145: LD_ADDR_VAR 0 5
38149: PUSH
38150: LD_VAR 0 5
38154: PPUSH
38155: LD_VAR 0 4
38159: PPUSH
38160: LD_VAR 0 2
38164: PPUSH
38165: CALL_OW 259
38169: PPUSH
38170: CALL 39581 0 2
38174: ST_TO_ADDR
38175: GO 38142
38177: POP
38178: POP
// if not tmp then
38179: LD_VAR 0 5
38183: NOT
38184: IFFALSE 38188
// exit ;
38186: GO 38208
// result := SortListByListDesc ( units , tmp ) ;
38188: LD_ADDR_VAR 0 3
38192: PUSH
38193: LD_VAR 0 1
38197: PPUSH
38198: LD_VAR 0 5
38202: PPUSH
38203: CALL_OW 77
38207: ST_TO_ADDR
// end ;
38208: LD_VAR 0 3
38212: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38213: LD_INT 0
38215: PPUSH
38216: PPUSH
38217: PPUSH
// result := false ;
38218: LD_ADDR_VAR 0 3
38222: PUSH
38223: LD_INT 0
38225: ST_TO_ADDR
// if not building then
38226: LD_VAR 0 2
38230: NOT
38231: IFFALSE 38235
// exit ;
38233: GO 38373
// x := GetX ( building ) ;
38235: LD_ADDR_VAR 0 4
38239: PUSH
38240: LD_VAR 0 2
38244: PPUSH
38245: CALL_OW 250
38249: ST_TO_ADDR
// y := GetY ( building ) ;
38250: LD_ADDR_VAR 0 5
38254: PUSH
38255: LD_VAR 0 2
38259: PPUSH
38260: CALL_OW 251
38264: ST_TO_ADDR
// if not x or not y then
38265: LD_VAR 0 4
38269: NOT
38270: PUSH
38271: LD_VAR 0 5
38275: NOT
38276: OR
38277: IFFALSE 38281
// exit ;
38279: GO 38373
// if GetTaskList ( unit ) then
38281: LD_VAR 0 1
38285: PPUSH
38286: CALL_OW 437
38290: IFFALSE 38373
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38292: LD_STRING e
38294: PUSH
38295: LD_VAR 0 1
38299: PPUSH
38300: CALL_OW 437
38304: PUSH
38305: LD_INT 1
38307: ARRAY
38308: PUSH
38309: LD_INT 1
38311: ARRAY
38312: EQUAL
38313: PUSH
38314: LD_VAR 0 4
38318: PUSH
38319: LD_VAR 0 1
38323: PPUSH
38324: CALL_OW 437
38328: PUSH
38329: LD_INT 1
38331: ARRAY
38332: PUSH
38333: LD_INT 2
38335: ARRAY
38336: EQUAL
38337: AND
38338: PUSH
38339: LD_VAR 0 5
38343: PUSH
38344: LD_VAR 0 1
38348: PPUSH
38349: CALL_OW 437
38353: PUSH
38354: LD_INT 1
38356: ARRAY
38357: PUSH
38358: LD_INT 3
38360: ARRAY
38361: EQUAL
38362: AND
38363: IFFALSE 38373
// result := true end ;
38365: LD_ADDR_VAR 0 3
38369: PUSH
38370: LD_INT 1
38372: ST_TO_ADDR
// end ;
38373: LD_VAR 0 3
38377: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38378: LD_INT 0
38380: PPUSH
// result := false ;
38381: LD_ADDR_VAR 0 4
38385: PUSH
38386: LD_INT 0
38388: ST_TO_ADDR
// if GetTaskList ( unit ) then
38389: LD_VAR 0 1
38393: PPUSH
38394: CALL_OW 437
38398: IFFALSE 38481
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38400: LD_STRING M
38402: PUSH
38403: LD_VAR 0 1
38407: PPUSH
38408: CALL_OW 437
38412: PUSH
38413: LD_INT 1
38415: ARRAY
38416: PUSH
38417: LD_INT 1
38419: ARRAY
38420: EQUAL
38421: PUSH
38422: LD_VAR 0 2
38426: PUSH
38427: LD_VAR 0 1
38431: PPUSH
38432: CALL_OW 437
38436: PUSH
38437: LD_INT 1
38439: ARRAY
38440: PUSH
38441: LD_INT 2
38443: ARRAY
38444: EQUAL
38445: AND
38446: PUSH
38447: LD_VAR 0 3
38451: PUSH
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 437
38461: PUSH
38462: LD_INT 1
38464: ARRAY
38465: PUSH
38466: LD_INT 3
38468: ARRAY
38469: EQUAL
38470: AND
38471: IFFALSE 38481
// result := true ;
38473: LD_ADDR_VAR 0 4
38477: PUSH
38478: LD_INT 1
38480: ST_TO_ADDR
// end ; end ;
38481: LD_VAR 0 4
38485: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38486: LD_INT 0
38488: PPUSH
38489: PPUSH
38490: PPUSH
38491: PPUSH
// if not unit or not area then
38492: LD_VAR 0 1
38496: NOT
38497: PUSH
38498: LD_VAR 0 2
38502: NOT
38503: OR
38504: IFFALSE 38508
// exit ;
38506: GO 38684
// tmp := AreaToList ( area , i ) ;
38508: LD_ADDR_VAR 0 6
38512: PUSH
38513: LD_VAR 0 2
38517: PPUSH
38518: LD_VAR 0 5
38522: PPUSH
38523: CALL_OW 517
38527: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38528: LD_ADDR_VAR 0 5
38532: PUSH
38533: DOUBLE
38534: LD_INT 1
38536: DEC
38537: ST_TO_ADDR
38538: LD_VAR 0 6
38542: PUSH
38543: LD_INT 1
38545: ARRAY
38546: PUSH
38547: FOR_TO
38548: IFFALSE 38682
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38550: LD_ADDR_VAR 0 7
38554: PUSH
38555: LD_VAR 0 6
38559: PUSH
38560: LD_INT 1
38562: ARRAY
38563: PUSH
38564: LD_VAR 0 5
38568: ARRAY
38569: PUSH
38570: LD_VAR 0 6
38574: PUSH
38575: LD_INT 2
38577: ARRAY
38578: PUSH
38579: LD_VAR 0 5
38583: ARRAY
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38589: LD_INT 92
38591: PUSH
38592: LD_VAR 0 7
38596: PUSH
38597: LD_INT 1
38599: ARRAY
38600: PUSH
38601: LD_VAR 0 7
38605: PUSH
38606: LD_INT 2
38608: ARRAY
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: PPUSH
38619: CALL_OW 69
38623: PUSH
38624: LD_INT 0
38626: EQUAL
38627: IFFALSE 38680
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38629: LD_VAR 0 1
38633: PPUSH
38634: LD_VAR 0 7
38638: PUSH
38639: LD_INT 1
38641: ARRAY
38642: PPUSH
38643: LD_VAR 0 7
38647: PUSH
38648: LD_INT 2
38650: ARRAY
38651: PPUSH
38652: LD_VAR 0 3
38656: PPUSH
38657: CALL_OW 48
// result := IsPlaced ( unit ) ;
38661: LD_ADDR_VAR 0 4
38665: PUSH
38666: LD_VAR 0 1
38670: PPUSH
38671: CALL_OW 305
38675: ST_TO_ADDR
// exit ;
38676: POP
38677: POP
38678: GO 38684
// end ; end ;
38680: GO 38547
38682: POP
38683: POP
// end ;
38684: LD_VAR 0 4
38688: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38689: LD_INT 0
38691: PPUSH
38692: PPUSH
38693: PPUSH
// if not side or side > 8 then
38694: LD_VAR 0 1
38698: NOT
38699: PUSH
38700: LD_VAR 0 1
38704: PUSH
38705: LD_INT 8
38707: GREATER
38708: OR
38709: IFFALSE 38713
// exit ;
38711: GO 38900
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38713: LD_ADDR_VAR 0 4
38717: PUSH
38718: LD_INT 22
38720: PUSH
38721: LD_VAR 0 1
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 21
38732: PUSH
38733: LD_INT 3
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PPUSH
38744: CALL_OW 69
38748: ST_TO_ADDR
// if not tmp then
38749: LD_VAR 0 4
38753: NOT
38754: IFFALSE 38758
// exit ;
38756: GO 38900
// enable_addtolog := true ;
38758: LD_ADDR_OWVAR 81
38762: PUSH
38763: LD_INT 1
38765: ST_TO_ADDR
// AddToLog ( [ ) ;
38766: LD_STRING [
38768: PPUSH
38769: CALL_OW 561
// for i in tmp do
38773: LD_ADDR_VAR 0 3
38777: PUSH
38778: LD_VAR 0 4
38782: PUSH
38783: FOR_IN
38784: IFFALSE 38891
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38786: LD_STRING [
38788: PUSH
38789: LD_VAR 0 3
38793: PPUSH
38794: CALL_OW 266
38798: STR
38799: PUSH
38800: LD_STRING , 
38802: STR
38803: PUSH
38804: LD_VAR 0 3
38808: PPUSH
38809: CALL_OW 250
38813: STR
38814: PUSH
38815: LD_STRING , 
38817: STR
38818: PUSH
38819: LD_VAR 0 3
38823: PPUSH
38824: CALL_OW 251
38828: STR
38829: PUSH
38830: LD_STRING , 
38832: STR
38833: PUSH
38834: LD_VAR 0 3
38838: PPUSH
38839: CALL_OW 254
38843: STR
38844: PUSH
38845: LD_STRING , 
38847: STR
38848: PUSH
38849: LD_VAR 0 3
38853: PPUSH
38854: LD_INT 1
38856: PPUSH
38857: CALL_OW 268
38861: STR
38862: PUSH
38863: LD_STRING , 
38865: STR
38866: PUSH
38867: LD_VAR 0 3
38871: PPUSH
38872: LD_INT 2
38874: PPUSH
38875: CALL_OW 268
38879: STR
38880: PUSH
38881: LD_STRING ],
38883: STR
38884: PPUSH
38885: CALL_OW 561
// end ;
38889: GO 38783
38891: POP
38892: POP
// AddToLog ( ]; ) ;
38893: LD_STRING ];
38895: PPUSH
38896: CALL_OW 561
// end ;
38900: LD_VAR 0 2
38904: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38905: LD_INT 0
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
// if not area or not rate or not max then
38912: LD_VAR 0 1
38916: NOT
38917: PUSH
38918: LD_VAR 0 2
38922: NOT
38923: OR
38924: PUSH
38925: LD_VAR 0 4
38929: NOT
38930: OR
38931: IFFALSE 38935
// exit ;
38933: GO 39124
// while 1 do
38935: LD_INT 1
38937: IFFALSE 39124
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38939: LD_ADDR_VAR 0 9
38943: PUSH
38944: LD_VAR 0 1
38948: PPUSH
38949: LD_INT 1
38951: PPUSH
38952: CALL_OW 287
38956: PUSH
38957: LD_INT 10
38959: MUL
38960: ST_TO_ADDR
// r := rate / 10 ;
38961: LD_ADDR_VAR 0 7
38965: PUSH
38966: LD_VAR 0 2
38970: PUSH
38971: LD_INT 10
38973: DIVREAL
38974: ST_TO_ADDR
// time := 1 1$00 ;
38975: LD_ADDR_VAR 0 8
38979: PUSH
38980: LD_INT 2100
38982: ST_TO_ADDR
// if amount < min then
38983: LD_VAR 0 9
38987: PUSH
38988: LD_VAR 0 3
38992: LESS
38993: IFFALSE 39011
// r := r * 2 else
38995: LD_ADDR_VAR 0 7
38999: PUSH
39000: LD_VAR 0 7
39004: PUSH
39005: LD_INT 2
39007: MUL
39008: ST_TO_ADDR
39009: GO 39037
// if amount > max then
39011: LD_VAR 0 9
39015: PUSH
39016: LD_VAR 0 4
39020: GREATER
39021: IFFALSE 39037
// r := r / 2 ;
39023: LD_ADDR_VAR 0 7
39027: PUSH
39028: LD_VAR 0 7
39032: PUSH
39033: LD_INT 2
39035: DIVREAL
39036: ST_TO_ADDR
// time := time / r ;
39037: LD_ADDR_VAR 0 8
39041: PUSH
39042: LD_VAR 0 8
39046: PUSH
39047: LD_VAR 0 7
39051: DIVREAL
39052: ST_TO_ADDR
// if time < 0 then
39053: LD_VAR 0 8
39057: PUSH
39058: LD_INT 0
39060: LESS
39061: IFFALSE 39078
// time := time * - 1 ;
39063: LD_ADDR_VAR 0 8
39067: PUSH
39068: LD_VAR 0 8
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: MUL
39077: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39078: LD_VAR 0 8
39082: PUSH
39083: LD_INT 35
39085: PPUSH
39086: LD_INT 875
39088: PPUSH
39089: CALL_OW 12
39093: PLUS
39094: PPUSH
39095: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39099: LD_INT 1
39101: PPUSH
39102: LD_INT 5
39104: PPUSH
39105: CALL_OW 12
39109: PPUSH
39110: LD_VAR 0 1
39114: PPUSH
39115: LD_INT 1
39117: PPUSH
39118: CALL_OW 55
// end ;
39122: GO 38935
// end ;
39124: LD_VAR 0 5
39128: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39129: LD_INT 0
39131: PPUSH
39132: PPUSH
39133: PPUSH
39134: PPUSH
39135: PPUSH
39136: PPUSH
39137: PPUSH
39138: PPUSH
// if not turrets or not factories then
39139: LD_VAR 0 1
39143: NOT
39144: PUSH
39145: LD_VAR 0 2
39149: NOT
39150: OR
39151: IFFALSE 39155
// exit ;
39153: GO 39462
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39155: LD_ADDR_VAR 0 10
39159: PUSH
39160: LD_INT 5
39162: PUSH
39163: LD_INT 6
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: LD_INT 4
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: LD_INT 5
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 24
39197: PUSH
39198: LD_INT 25
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 23
39207: PUSH
39208: LD_INT 27
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 42
39221: PUSH
39222: LD_INT 43
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 44
39231: PUSH
39232: LD_INT 46
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 45
39241: PUSH
39242: LD_INT 47
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: LIST
39258: ST_TO_ADDR
// result := [ ] ;
39259: LD_ADDR_VAR 0 3
39263: PUSH
39264: EMPTY
39265: ST_TO_ADDR
// for i in turrets do
39266: LD_ADDR_VAR 0 4
39270: PUSH
39271: LD_VAR 0 1
39275: PUSH
39276: FOR_IN
39277: IFFALSE 39460
// begin nat := GetNation ( i ) ;
39279: LD_ADDR_VAR 0 7
39283: PUSH
39284: LD_VAR 0 4
39288: PPUSH
39289: CALL_OW 248
39293: ST_TO_ADDR
// weapon := 0 ;
39294: LD_ADDR_VAR 0 8
39298: PUSH
39299: LD_INT 0
39301: ST_TO_ADDR
// if not nat then
39302: LD_VAR 0 7
39306: NOT
39307: IFFALSE 39311
// continue ;
39309: GO 39276
// for j in list [ nat ] do
39311: LD_ADDR_VAR 0 5
39315: PUSH
39316: LD_VAR 0 10
39320: PUSH
39321: LD_VAR 0 7
39325: ARRAY
39326: PUSH
39327: FOR_IN
39328: IFFALSE 39369
// if GetBWeapon ( i ) = j [ 1 ] then
39330: LD_VAR 0 4
39334: PPUSH
39335: CALL_OW 269
39339: PUSH
39340: LD_VAR 0 5
39344: PUSH
39345: LD_INT 1
39347: ARRAY
39348: EQUAL
39349: IFFALSE 39367
// begin weapon := j [ 2 ] ;
39351: LD_ADDR_VAR 0 8
39355: PUSH
39356: LD_VAR 0 5
39360: PUSH
39361: LD_INT 2
39363: ARRAY
39364: ST_TO_ADDR
// break ;
39365: GO 39369
// end ;
39367: GO 39327
39369: POP
39370: POP
// if not weapon then
39371: LD_VAR 0 8
39375: NOT
39376: IFFALSE 39380
// continue ;
39378: GO 39276
// for k in factories do
39380: LD_ADDR_VAR 0 6
39384: PUSH
39385: LD_VAR 0 2
39389: PUSH
39390: FOR_IN
39391: IFFALSE 39456
// begin weapons := AvailableWeaponList ( k ) ;
39393: LD_ADDR_VAR 0 9
39397: PUSH
39398: LD_VAR 0 6
39402: PPUSH
39403: CALL_OW 478
39407: ST_TO_ADDR
// if not weapons then
39408: LD_VAR 0 9
39412: NOT
39413: IFFALSE 39417
// continue ;
39415: GO 39390
// if weapon in weapons then
39417: LD_VAR 0 8
39421: PUSH
39422: LD_VAR 0 9
39426: IN
39427: IFFALSE 39454
// begin result := [ i , weapon ] ;
39429: LD_ADDR_VAR 0 3
39433: PUSH
39434: LD_VAR 0 4
39438: PUSH
39439: LD_VAR 0 8
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: ST_TO_ADDR
// exit ;
39448: POP
39449: POP
39450: POP
39451: POP
39452: GO 39462
// end ; end ;
39454: GO 39390
39456: POP
39457: POP
// end ;
39458: GO 39276
39460: POP
39461: POP
// end ;
39462: LD_VAR 0 3
39466: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39467: LD_INT 0
39469: PPUSH
// if not side or side > 8 then
39470: LD_VAR 0 3
39474: NOT
39475: PUSH
39476: LD_VAR 0 3
39480: PUSH
39481: LD_INT 8
39483: GREATER
39484: OR
39485: IFFALSE 39489
// exit ;
39487: GO 39548
// if not range then
39489: LD_VAR 0 4
39493: NOT
39494: IFFALSE 39505
// range := - 12 ;
39496: LD_ADDR_VAR 0 4
39500: PUSH
39501: LD_INT 12
39503: NEG
39504: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39505: LD_VAR 0 1
39509: PPUSH
39510: LD_VAR 0 2
39514: PPUSH
39515: LD_VAR 0 3
39519: PPUSH
39520: LD_VAR 0 4
39524: PPUSH
39525: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39529: LD_VAR 0 1
39533: PPUSH
39534: LD_VAR 0 2
39538: PPUSH
39539: LD_VAR 0 3
39543: PPUSH
39544: CALL_OW 331
// end ;
39548: LD_VAR 0 5
39552: RET
// export function Video ( mode ) ; begin
39553: LD_INT 0
39555: PPUSH
// ingame_video = mode ;
39556: LD_ADDR_OWVAR 52
39560: PUSH
39561: LD_VAR 0 1
39565: ST_TO_ADDR
// interface_hidden = mode ;
39566: LD_ADDR_OWVAR 54
39570: PUSH
39571: LD_VAR 0 1
39575: ST_TO_ADDR
// end ;
39576: LD_VAR 0 2
39580: RET
// export function Join ( array , element ) ; begin
39581: LD_INT 0
39583: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39584: LD_ADDR_VAR 0 3
39588: PUSH
39589: LD_VAR 0 1
39593: PPUSH
39594: LD_VAR 0 1
39598: PUSH
39599: LD_INT 1
39601: PLUS
39602: PPUSH
39603: LD_VAR 0 2
39607: PPUSH
39608: CALL_OW 1
39612: ST_TO_ADDR
// end ;
39613: LD_VAR 0 3
39617: RET
// export function JoinUnion ( array , element ) ; begin
39618: LD_INT 0
39620: PPUSH
// result := array union element ;
39621: LD_ADDR_VAR 0 3
39625: PUSH
39626: LD_VAR 0 1
39630: PUSH
39631: LD_VAR 0 2
39635: UNION
39636: ST_TO_ADDR
// end ;
39637: LD_VAR 0 3
39641: RET
// export function GetBehemoths ( side ) ; begin
39642: LD_INT 0
39644: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39645: LD_ADDR_VAR 0 2
39649: PUSH
39650: LD_INT 22
39652: PUSH
39653: LD_VAR 0 1
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 31
39664: PUSH
39665: LD_INT 25
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PPUSH
39676: CALL_OW 69
39680: ST_TO_ADDR
// end ;
39681: LD_VAR 0 2
39685: RET
// export function Shuffle ( array ) ; var i , index ; begin
39686: LD_INT 0
39688: PPUSH
39689: PPUSH
39690: PPUSH
// result := [ ] ;
39691: LD_ADDR_VAR 0 2
39695: PUSH
39696: EMPTY
39697: ST_TO_ADDR
// if not array then
39698: LD_VAR 0 1
39702: NOT
39703: IFFALSE 39707
// exit ;
39705: GO 39806
// Randomize ;
39707: CALL_OW 10
// for i = array downto 1 do
39711: LD_ADDR_VAR 0 3
39715: PUSH
39716: DOUBLE
39717: LD_VAR 0 1
39721: INC
39722: ST_TO_ADDR
39723: LD_INT 1
39725: PUSH
39726: FOR_DOWNTO
39727: IFFALSE 39804
// begin index := rand ( 1 , array ) ;
39729: LD_ADDR_VAR 0 4
39733: PUSH
39734: LD_INT 1
39736: PPUSH
39737: LD_VAR 0 1
39741: PPUSH
39742: CALL_OW 12
39746: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39747: LD_ADDR_VAR 0 2
39751: PUSH
39752: LD_VAR 0 2
39756: PPUSH
39757: LD_VAR 0 2
39761: PUSH
39762: LD_INT 1
39764: PLUS
39765: PPUSH
39766: LD_VAR 0 1
39770: PUSH
39771: LD_VAR 0 4
39775: ARRAY
39776: PPUSH
39777: CALL_OW 2
39781: ST_TO_ADDR
// array := Delete ( array , index ) ;
39782: LD_ADDR_VAR 0 1
39786: PUSH
39787: LD_VAR 0 1
39791: PPUSH
39792: LD_VAR 0 4
39796: PPUSH
39797: CALL_OW 3
39801: ST_TO_ADDR
// end ;
39802: GO 39726
39804: POP
39805: POP
// end ;
39806: LD_VAR 0 2
39810: RET
// export function GetBaseMaterials ( base ) ; begin
39811: LD_INT 0
39813: PPUSH
// result := [ 0 , 0 , 0 ] ;
39814: LD_ADDR_VAR 0 2
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: LIST
39832: ST_TO_ADDR
// if not base then
39833: LD_VAR 0 1
39837: NOT
39838: IFFALSE 39842
// exit ;
39840: GO 39891
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39842: LD_ADDR_VAR 0 2
39846: PUSH
39847: LD_VAR 0 1
39851: PPUSH
39852: LD_INT 1
39854: PPUSH
39855: CALL_OW 275
39859: PUSH
39860: LD_VAR 0 1
39864: PPUSH
39865: LD_INT 2
39867: PPUSH
39868: CALL_OW 275
39872: PUSH
39873: LD_VAR 0 1
39877: PPUSH
39878: LD_INT 3
39880: PPUSH
39881: CALL_OW 275
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: LIST
39890: ST_TO_ADDR
// end ;
39891: LD_VAR 0 2
39895: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39896: LD_INT 0
39898: PPUSH
39899: PPUSH
// result := array ;
39900: LD_ADDR_VAR 0 3
39904: PUSH
39905: LD_VAR 0 1
39909: ST_TO_ADDR
// if size >= result then
39910: LD_VAR 0 2
39914: PUSH
39915: LD_VAR 0 3
39919: GREATEREQUAL
39920: IFFALSE 39924
// exit ;
39922: GO 39974
// if size then
39924: LD_VAR 0 2
39928: IFFALSE 39974
// for i := array downto size do
39930: LD_ADDR_VAR 0 4
39934: PUSH
39935: DOUBLE
39936: LD_VAR 0 1
39940: INC
39941: ST_TO_ADDR
39942: LD_VAR 0 2
39946: PUSH
39947: FOR_DOWNTO
39948: IFFALSE 39972
// result := Delete ( result , result ) ;
39950: LD_ADDR_VAR 0 3
39954: PUSH
39955: LD_VAR 0 3
39959: PPUSH
39960: LD_VAR 0 3
39964: PPUSH
39965: CALL_OW 3
39969: ST_TO_ADDR
39970: GO 39947
39972: POP
39973: POP
// end ;
39974: LD_VAR 0 3
39978: RET
// export function ComExit ( unit ) ; var tmp ; begin
39979: LD_INT 0
39981: PPUSH
39982: PPUSH
// if not IsInUnit ( unit ) then
39983: LD_VAR 0 1
39987: PPUSH
39988: CALL_OW 310
39992: NOT
39993: IFFALSE 39997
// exit ;
39995: GO 40057
// tmp := IsInUnit ( unit ) ;
39997: LD_ADDR_VAR 0 3
40001: PUSH
40002: LD_VAR 0 1
40006: PPUSH
40007: CALL_OW 310
40011: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40012: LD_VAR 0 3
40016: PPUSH
40017: CALL_OW 247
40021: PUSH
40022: LD_INT 2
40024: EQUAL
40025: IFFALSE 40038
// ComExitVehicle ( unit ) else
40027: LD_VAR 0 1
40031: PPUSH
40032: CALL_OW 121
40036: GO 40047
// ComExitBuilding ( unit ) ;
40038: LD_VAR 0 1
40042: PPUSH
40043: CALL_OW 122
// result := tmp ;
40047: LD_ADDR_VAR 0 2
40051: PUSH
40052: LD_VAR 0 3
40056: ST_TO_ADDR
// end ;
40057: LD_VAR 0 2
40061: RET
// export function ComExitAll ( units ) ; var i ; begin
40062: LD_INT 0
40064: PPUSH
40065: PPUSH
// if not units then
40066: LD_VAR 0 1
40070: NOT
40071: IFFALSE 40075
// exit ;
40073: GO 40101
// for i in units do
40075: LD_ADDR_VAR 0 3
40079: PUSH
40080: LD_VAR 0 1
40084: PUSH
40085: FOR_IN
40086: IFFALSE 40099
// ComExit ( i ) ;
40088: LD_VAR 0 3
40092: PPUSH
40093: CALL 39979 0 1
40097: GO 40085
40099: POP
40100: POP
// end ;
40101: LD_VAR 0 2
40105: RET
// export function ResetHc ; begin
40106: LD_INT 0
40108: PPUSH
// InitHc ;
40109: CALL_OW 19
// hc_importance := 0 ;
40113: LD_ADDR_OWVAR 32
40117: PUSH
40118: LD_INT 0
40120: ST_TO_ADDR
// end ;
40121: LD_VAR 0 1
40125: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40126: LD_INT 0
40128: PPUSH
40129: PPUSH
40130: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40131: LD_ADDR_VAR 0 6
40135: PUSH
40136: LD_VAR 0 1
40140: PUSH
40141: LD_VAR 0 3
40145: PLUS
40146: PUSH
40147: LD_INT 2
40149: DIV
40150: ST_TO_ADDR
// if _x < 0 then
40151: LD_VAR 0 6
40155: PUSH
40156: LD_INT 0
40158: LESS
40159: IFFALSE 40176
// _x := _x * - 1 ;
40161: LD_ADDR_VAR 0 6
40165: PUSH
40166: LD_VAR 0 6
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: MUL
40175: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40176: LD_ADDR_VAR 0 7
40180: PUSH
40181: LD_VAR 0 2
40185: PUSH
40186: LD_VAR 0 4
40190: PLUS
40191: PUSH
40192: LD_INT 2
40194: DIV
40195: ST_TO_ADDR
// if _y < 0 then
40196: LD_VAR 0 7
40200: PUSH
40201: LD_INT 0
40203: LESS
40204: IFFALSE 40221
// _y := _y * - 1 ;
40206: LD_ADDR_VAR 0 7
40210: PUSH
40211: LD_VAR 0 7
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: MUL
40220: ST_TO_ADDR
// result := [ _x , _y ] ;
40221: LD_ADDR_VAR 0 5
40225: PUSH
40226: LD_VAR 0 6
40230: PUSH
40231: LD_VAR 0 7
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: ST_TO_ADDR
// end ;
40240: LD_VAR 0 5
40244: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40245: LD_INT 0
40247: PPUSH
40248: PPUSH
40249: PPUSH
40250: PPUSH
// task := GetTaskList ( unit ) ;
40251: LD_ADDR_VAR 0 7
40255: PUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 437
40265: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40266: LD_VAR 0 7
40270: NOT
40271: PUSH
40272: LD_VAR 0 1
40276: PPUSH
40277: LD_VAR 0 2
40281: PPUSH
40282: CALL_OW 308
40286: NOT
40287: AND
40288: IFFALSE 40292
// exit ;
40290: GO 40410
// if IsInArea ( unit , area ) then
40292: LD_VAR 0 1
40296: PPUSH
40297: LD_VAR 0 2
40301: PPUSH
40302: CALL_OW 308
40306: IFFALSE 40324
// begin ComMoveToArea ( unit , goAway ) ;
40308: LD_VAR 0 1
40312: PPUSH
40313: LD_VAR 0 3
40317: PPUSH
40318: CALL_OW 113
// exit ;
40322: GO 40410
// end ; if task [ 1 ] [ 1 ] <> M then
40324: LD_VAR 0 7
40328: PUSH
40329: LD_INT 1
40331: ARRAY
40332: PUSH
40333: LD_INT 1
40335: ARRAY
40336: PUSH
40337: LD_STRING M
40339: NONEQUAL
40340: IFFALSE 40344
// exit ;
40342: GO 40410
// x := task [ 1 ] [ 2 ] ;
40344: LD_ADDR_VAR 0 5
40348: PUSH
40349: LD_VAR 0 7
40353: PUSH
40354: LD_INT 1
40356: ARRAY
40357: PUSH
40358: LD_INT 2
40360: ARRAY
40361: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40362: LD_ADDR_VAR 0 6
40366: PUSH
40367: LD_VAR 0 7
40371: PUSH
40372: LD_INT 1
40374: ARRAY
40375: PUSH
40376: LD_INT 3
40378: ARRAY
40379: ST_TO_ADDR
// if InArea ( x , y , area ) then
40380: LD_VAR 0 5
40384: PPUSH
40385: LD_VAR 0 6
40389: PPUSH
40390: LD_VAR 0 2
40394: PPUSH
40395: CALL_OW 309
40399: IFFALSE 40410
// ComStop ( unit ) ;
40401: LD_VAR 0 1
40405: PPUSH
40406: CALL_OW 141
// end ;
40410: LD_VAR 0 4
40414: RET
// export function Abs ( value ) ; begin
40415: LD_INT 0
40417: PPUSH
// result := value ;
40418: LD_ADDR_VAR 0 2
40422: PUSH
40423: LD_VAR 0 1
40427: ST_TO_ADDR
// if value < 0 then
40428: LD_VAR 0 1
40432: PUSH
40433: LD_INT 0
40435: LESS
40436: IFFALSE 40453
// result := value * - 1 ;
40438: LD_ADDR_VAR 0 2
40442: PUSH
40443: LD_VAR 0 1
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: MUL
40452: ST_TO_ADDR
// end ;
40453: LD_VAR 0 2
40457: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40458: LD_INT 0
40460: PPUSH
40461: PPUSH
40462: PPUSH
40463: PPUSH
40464: PPUSH
40465: PPUSH
40466: PPUSH
40467: PPUSH
// if not unit or not building then
40468: LD_VAR 0 1
40472: NOT
40473: PUSH
40474: LD_VAR 0 2
40478: NOT
40479: OR
40480: IFFALSE 40484
// exit ;
40482: GO 40710
// x := GetX ( building ) ;
40484: LD_ADDR_VAR 0 4
40488: PUSH
40489: LD_VAR 0 2
40493: PPUSH
40494: CALL_OW 250
40498: ST_TO_ADDR
// y := GetY ( building ) ;
40499: LD_ADDR_VAR 0 6
40503: PUSH
40504: LD_VAR 0 2
40508: PPUSH
40509: CALL_OW 251
40513: ST_TO_ADDR
// d := GetDir ( building ) ;
40514: LD_ADDR_VAR 0 8
40518: PUSH
40519: LD_VAR 0 2
40523: PPUSH
40524: CALL_OW 254
40528: ST_TO_ADDR
// r := 4 ;
40529: LD_ADDR_VAR 0 9
40533: PUSH
40534: LD_INT 4
40536: ST_TO_ADDR
// for i := 1 to 5 do
40537: LD_ADDR_VAR 0 10
40541: PUSH
40542: DOUBLE
40543: LD_INT 1
40545: DEC
40546: ST_TO_ADDR
40547: LD_INT 5
40549: PUSH
40550: FOR_TO
40551: IFFALSE 40708
// begin _x := ShiftX ( x , d , r + i ) ;
40553: LD_ADDR_VAR 0 5
40557: PUSH
40558: LD_VAR 0 4
40562: PPUSH
40563: LD_VAR 0 8
40567: PPUSH
40568: LD_VAR 0 9
40572: PUSH
40573: LD_VAR 0 10
40577: PLUS
40578: PPUSH
40579: CALL_OW 272
40583: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40584: LD_ADDR_VAR 0 7
40588: PUSH
40589: LD_VAR 0 6
40593: PPUSH
40594: LD_VAR 0 8
40598: PPUSH
40599: LD_VAR 0 9
40603: PUSH
40604: LD_VAR 0 10
40608: PLUS
40609: PPUSH
40610: CALL_OW 273
40614: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40615: LD_VAR 0 5
40619: PPUSH
40620: LD_VAR 0 7
40624: PPUSH
40625: CALL_OW 488
40629: PUSH
40630: LD_VAR 0 5
40634: PPUSH
40635: LD_VAR 0 7
40639: PPUSH
40640: CALL_OW 428
40644: PPUSH
40645: CALL_OW 247
40649: PUSH
40650: LD_INT 3
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: IN
40660: NOT
40661: AND
40662: IFFALSE 40706
// begin ComMoveXY ( unit , _x , _y ) ;
40664: LD_VAR 0 1
40668: PPUSH
40669: LD_VAR 0 5
40673: PPUSH
40674: LD_VAR 0 7
40678: PPUSH
40679: CALL_OW 111
// result := [ _x , _y ] ;
40683: LD_ADDR_VAR 0 3
40687: PUSH
40688: LD_VAR 0 5
40692: PUSH
40693: LD_VAR 0 7
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: ST_TO_ADDR
// exit ;
40702: POP
40703: POP
40704: GO 40710
// end ; end ;
40706: GO 40550
40708: POP
40709: POP
// end ;
40710: LD_VAR 0 3
40714: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40715: LD_INT 0
40717: PPUSH
40718: PPUSH
40719: PPUSH
// result := 0 ;
40720: LD_ADDR_VAR 0 3
40724: PUSH
40725: LD_INT 0
40727: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40728: LD_VAR 0 1
40732: PUSH
40733: LD_INT 0
40735: LESS
40736: PUSH
40737: LD_VAR 0 1
40741: PUSH
40742: LD_INT 8
40744: GREATER
40745: OR
40746: PUSH
40747: LD_VAR 0 2
40751: PUSH
40752: LD_INT 0
40754: LESS
40755: OR
40756: PUSH
40757: LD_VAR 0 2
40761: PUSH
40762: LD_INT 8
40764: GREATER
40765: OR
40766: IFFALSE 40770
// exit ;
40768: GO 40845
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40770: LD_ADDR_VAR 0 4
40774: PUSH
40775: LD_INT 22
40777: PUSH
40778: LD_VAR 0 2
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PPUSH
40787: CALL_OW 69
40791: PUSH
40792: FOR_IN
40793: IFFALSE 40843
// begin un := UnitShoot ( i ) ;
40795: LD_ADDR_VAR 0 5
40799: PUSH
40800: LD_VAR 0 4
40804: PPUSH
40805: CALL_OW 504
40809: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40810: LD_VAR 0 5
40814: PPUSH
40815: CALL_OW 255
40819: PUSH
40820: LD_VAR 0 1
40824: EQUAL
40825: IFFALSE 40841
// begin result := un ;
40827: LD_ADDR_VAR 0 3
40831: PUSH
40832: LD_VAR 0 5
40836: ST_TO_ADDR
// exit ;
40837: POP
40838: POP
40839: GO 40845
// end ; end ;
40841: GO 40792
40843: POP
40844: POP
// end ;
40845: LD_VAR 0 3
40849: RET
// export function GetCargoBay ( units ) ; begin
40850: LD_INT 0
40852: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40853: LD_ADDR_VAR 0 2
40857: PUSH
40858: LD_VAR 0 1
40862: PPUSH
40863: LD_INT 2
40865: PUSH
40866: LD_INT 34
40868: PUSH
40869: LD_INT 12
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 34
40878: PUSH
40879: LD_INT 51
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 34
40888: PUSH
40889: LD_INT 32
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 34
40898: PUSH
40899: LD_INT 89
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: PPUSH
40913: CALL_OW 72
40917: ST_TO_ADDR
// end ;
40918: LD_VAR 0 2
40922: RET
// export function Negate ( value ) ; begin
40923: LD_INT 0
40925: PPUSH
// result := not value ;
40926: LD_ADDR_VAR 0 2
40930: PUSH
40931: LD_VAR 0 1
40935: NOT
40936: ST_TO_ADDR
// end ;
40937: LD_VAR 0 2
40941: RET
// export function Inc ( value ) ; begin
40942: LD_INT 0
40944: PPUSH
// result := value + 1 ;
40945: LD_ADDR_VAR 0 2
40949: PUSH
40950: LD_VAR 0 1
40954: PUSH
40955: LD_INT 1
40957: PLUS
40958: ST_TO_ADDR
// end ;
40959: LD_VAR 0 2
40963: RET
// export function Dec ( value ) ; begin
40964: LD_INT 0
40966: PPUSH
// result := value - 1 ;
40967: LD_ADDR_VAR 0 2
40971: PUSH
40972: LD_VAR 0 1
40976: PUSH
40977: LD_INT 1
40979: MINUS
40980: ST_TO_ADDR
// end ;
40981: LD_VAR 0 2
40985: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40986: LD_INT 0
40988: PPUSH
40989: PPUSH
40990: PPUSH
40991: PPUSH
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40996: LD_VAR 0 1
41000: PPUSH
41001: LD_VAR 0 2
41005: PPUSH
41006: CALL_OW 488
41010: NOT
41011: PUSH
41012: LD_VAR 0 3
41016: PPUSH
41017: LD_VAR 0 4
41021: PPUSH
41022: CALL_OW 488
41026: NOT
41027: OR
41028: IFFALSE 41041
// begin result := - 1 ;
41030: LD_ADDR_VAR 0 5
41034: PUSH
41035: LD_INT 1
41037: NEG
41038: ST_TO_ADDR
// exit ;
41039: GO 41276
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41041: LD_ADDR_VAR 0 12
41045: PUSH
41046: LD_VAR 0 1
41050: PPUSH
41051: LD_VAR 0 2
41055: PPUSH
41056: LD_VAR 0 3
41060: PPUSH
41061: LD_VAR 0 4
41065: PPUSH
41066: CALL 40126 0 4
41070: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41071: LD_ADDR_VAR 0 11
41075: PUSH
41076: LD_VAR 0 1
41080: PPUSH
41081: LD_VAR 0 2
41085: PPUSH
41086: LD_VAR 0 12
41090: PUSH
41091: LD_INT 1
41093: ARRAY
41094: PPUSH
41095: LD_VAR 0 12
41099: PUSH
41100: LD_INT 2
41102: ARRAY
41103: PPUSH
41104: CALL_OW 298
41108: ST_TO_ADDR
// distance := 9999 ;
41109: LD_ADDR_VAR 0 10
41113: PUSH
41114: LD_INT 9999
41116: ST_TO_ADDR
// for i := 0 to 5 do
41117: LD_ADDR_VAR 0 6
41121: PUSH
41122: DOUBLE
41123: LD_INT 0
41125: DEC
41126: ST_TO_ADDR
41127: LD_INT 5
41129: PUSH
41130: FOR_TO
41131: IFFALSE 41274
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41133: LD_ADDR_VAR 0 7
41137: PUSH
41138: LD_VAR 0 1
41142: PPUSH
41143: LD_VAR 0 6
41147: PPUSH
41148: LD_VAR 0 11
41152: PPUSH
41153: CALL_OW 272
41157: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41158: LD_ADDR_VAR 0 8
41162: PUSH
41163: LD_VAR 0 2
41167: PPUSH
41168: LD_VAR 0 6
41172: PPUSH
41173: LD_VAR 0 11
41177: PPUSH
41178: CALL_OW 273
41182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41183: LD_VAR 0 7
41187: PPUSH
41188: LD_VAR 0 8
41192: PPUSH
41193: CALL_OW 488
41197: NOT
41198: IFFALSE 41202
// continue ;
41200: GO 41130
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41202: LD_ADDR_VAR 0 9
41206: PUSH
41207: LD_VAR 0 12
41211: PUSH
41212: LD_INT 1
41214: ARRAY
41215: PPUSH
41216: LD_VAR 0 12
41220: PUSH
41221: LD_INT 2
41223: ARRAY
41224: PPUSH
41225: LD_VAR 0 7
41229: PPUSH
41230: LD_VAR 0 8
41234: PPUSH
41235: CALL_OW 298
41239: ST_TO_ADDR
// if tmp < distance then
41240: LD_VAR 0 9
41244: PUSH
41245: LD_VAR 0 10
41249: LESS
41250: IFFALSE 41272
// begin result := i ;
41252: LD_ADDR_VAR 0 5
41256: PUSH
41257: LD_VAR 0 6
41261: ST_TO_ADDR
// distance := tmp ;
41262: LD_ADDR_VAR 0 10
41266: PUSH
41267: LD_VAR 0 9
41271: ST_TO_ADDR
// end ; end ;
41272: GO 41130
41274: POP
41275: POP
// end ;
41276: LD_VAR 0 5
41280: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41281: LD_INT 0
41283: PPUSH
41284: PPUSH
// if not driver or not IsInUnit ( driver ) then
41285: LD_VAR 0 1
41289: NOT
41290: PUSH
41291: LD_VAR 0 1
41295: PPUSH
41296: CALL_OW 310
41300: NOT
41301: OR
41302: IFFALSE 41306
// exit ;
41304: GO 41396
// vehicle := IsInUnit ( driver ) ;
41306: LD_ADDR_VAR 0 3
41310: PUSH
41311: LD_VAR 0 1
41315: PPUSH
41316: CALL_OW 310
41320: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41321: LD_VAR 0 1
41325: PPUSH
41326: LD_STRING \
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: PUSH
41356: LD_STRING E
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_VAR 0 3
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PPUSH
41392: CALL_OW 446
// end ;
41396: LD_VAR 0 2
41400: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41401: LD_INT 0
41403: PPUSH
41404: PPUSH
// if not driver or not IsInUnit ( driver ) then
41405: LD_VAR 0 1
41409: NOT
41410: PUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 310
41420: NOT
41421: OR
41422: IFFALSE 41426
// exit ;
41424: GO 41516
// vehicle := IsInUnit ( driver ) ;
41426: LD_ADDR_VAR 0 3
41430: PUSH
41431: LD_VAR 0 1
41435: PPUSH
41436: CALL_OW 310
41440: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41441: LD_VAR 0 1
41445: PPUSH
41446: LD_STRING \
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: PUSH
41476: LD_STRING E
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: LD_VAR 0 3
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PPUSH
41512: CALL_OW 447
// end ;
41516: LD_VAR 0 2
41520: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41521: LD_INT 0
41523: PPUSH
41524: PPUSH
41525: PPUSH
// tmp := [ ] ;
41526: LD_ADDR_VAR 0 5
41530: PUSH
41531: EMPTY
41532: ST_TO_ADDR
// for i in units do
41533: LD_ADDR_VAR 0 4
41537: PUSH
41538: LD_VAR 0 1
41542: PUSH
41543: FOR_IN
41544: IFFALSE 41582
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41546: LD_ADDR_VAR 0 5
41550: PUSH
41551: LD_VAR 0 5
41555: PPUSH
41556: LD_VAR 0 5
41560: PUSH
41561: LD_INT 1
41563: PLUS
41564: PPUSH
41565: LD_VAR 0 4
41569: PPUSH
41570: CALL_OW 256
41574: PPUSH
41575: CALL_OW 2
41579: ST_TO_ADDR
41580: GO 41543
41582: POP
41583: POP
// if not tmp then
41584: LD_VAR 0 5
41588: NOT
41589: IFFALSE 41593
// exit ;
41591: GO 41641
// if asc then
41593: LD_VAR 0 2
41597: IFFALSE 41621
// result := SortListByListAsc ( units , tmp ) else
41599: LD_ADDR_VAR 0 3
41603: PUSH
41604: LD_VAR 0 1
41608: PPUSH
41609: LD_VAR 0 5
41613: PPUSH
41614: CALL_OW 76
41618: ST_TO_ADDR
41619: GO 41641
// result := SortListByListDesc ( units , tmp ) ;
41621: LD_ADDR_VAR 0 3
41625: PUSH
41626: LD_VAR 0 1
41630: PPUSH
41631: LD_VAR 0 5
41635: PPUSH
41636: CALL_OW 77
41640: ST_TO_ADDR
// end ;
41641: LD_VAR 0 3
41645: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41646: LD_INT 0
41648: PPUSH
41649: PPUSH
// task := GetTaskList ( mech ) ;
41650: LD_ADDR_VAR 0 4
41654: PUSH
41655: LD_VAR 0 1
41659: PPUSH
41660: CALL_OW 437
41664: ST_TO_ADDR
// if not task then
41665: LD_VAR 0 4
41669: NOT
41670: IFFALSE 41674
// exit ;
41672: GO 41716
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41674: LD_ADDR_VAR 0 3
41678: PUSH
41679: LD_VAR 0 4
41683: PUSH
41684: LD_INT 1
41686: ARRAY
41687: PUSH
41688: LD_INT 1
41690: ARRAY
41691: PUSH
41692: LD_STRING r
41694: EQUAL
41695: PUSH
41696: LD_VAR 0 4
41700: PUSH
41701: LD_INT 1
41703: ARRAY
41704: PUSH
41705: LD_INT 4
41707: ARRAY
41708: PUSH
41709: LD_VAR 0 2
41713: EQUAL
41714: AND
41715: ST_TO_ADDR
// end ;
41716: LD_VAR 0 3
41720: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41721: LD_INT 0
41723: PPUSH
// SetDir ( unit , d ) ;
41724: LD_VAR 0 1
41728: PPUSH
41729: LD_VAR 0 4
41733: PPUSH
41734: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41738: LD_ADDR_VAR 0 6
41742: PUSH
41743: LD_VAR 0 1
41747: PPUSH
41748: LD_VAR 0 2
41752: PPUSH
41753: LD_VAR 0 3
41757: PPUSH
41758: LD_VAR 0 5
41762: PPUSH
41763: CALL_OW 48
41767: ST_TO_ADDR
// end ;
41768: LD_VAR 0 6
41772: RET
// export function ToNaturalNumber ( number ) ; begin
41773: LD_INT 0
41775: PPUSH
// result := number div 1 ;
41776: LD_ADDR_VAR 0 2
41780: PUSH
41781: LD_VAR 0 1
41785: PUSH
41786: LD_INT 1
41788: DIV
41789: ST_TO_ADDR
// if number < 0 then
41790: LD_VAR 0 1
41794: PUSH
41795: LD_INT 0
41797: LESS
41798: IFFALSE 41808
// result := 0 ;
41800: LD_ADDR_VAR 0 2
41804: PUSH
41805: LD_INT 0
41807: ST_TO_ADDR
// end ;
41808: LD_VAR 0 2
41812: RET
// export function SortByClass ( units , class ) ; var un ; begin
41813: LD_INT 0
41815: PPUSH
41816: PPUSH
// if not units or not class then
41817: LD_VAR 0 1
41821: NOT
41822: PUSH
41823: LD_VAR 0 2
41827: NOT
41828: OR
41829: IFFALSE 41833
// exit ;
41831: GO 41928
// result := [ ] ;
41833: LD_ADDR_VAR 0 3
41837: PUSH
41838: EMPTY
41839: ST_TO_ADDR
// for un in units do
41840: LD_ADDR_VAR 0 4
41844: PUSH
41845: LD_VAR 0 1
41849: PUSH
41850: FOR_IN
41851: IFFALSE 41926
// if GetClass ( un ) = class then
41853: LD_VAR 0 4
41857: PPUSH
41858: CALL_OW 257
41862: PUSH
41863: LD_VAR 0 2
41867: EQUAL
41868: IFFALSE 41895
// result := Insert ( result , 1 , un ) else
41870: LD_ADDR_VAR 0 3
41874: PUSH
41875: LD_VAR 0 3
41879: PPUSH
41880: LD_INT 1
41882: PPUSH
41883: LD_VAR 0 4
41887: PPUSH
41888: CALL_OW 2
41892: ST_TO_ADDR
41893: GO 41924
// result := Replace ( result , result + 1 , un ) ;
41895: LD_ADDR_VAR 0 3
41899: PUSH
41900: LD_VAR 0 3
41904: PPUSH
41905: LD_VAR 0 3
41909: PUSH
41910: LD_INT 1
41912: PLUS
41913: PPUSH
41914: LD_VAR 0 4
41918: PPUSH
41919: CALL_OW 1
41923: ST_TO_ADDR
41924: GO 41850
41926: POP
41927: POP
// end ;
41928: LD_VAR 0 3
41932: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41933: LD_INT 0
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
// result := [ ] ;
41942: LD_ADDR_VAR 0 4
41946: PUSH
41947: EMPTY
41948: ST_TO_ADDR
// if x - r < 0 then
41949: LD_VAR 0 1
41953: PUSH
41954: LD_VAR 0 3
41958: MINUS
41959: PUSH
41960: LD_INT 0
41962: LESS
41963: IFFALSE 41975
// min_x := 0 else
41965: LD_ADDR_VAR 0 8
41969: PUSH
41970: LD_INT 0
41972: ST_TO_ADDR
41973: GO 41991
// min_x := x - r ;
41975: LD_ADDR_VAR 0 8
41979: PUSH
41980: LD_VAR 0 1
41984: PUSH
41985: LD_VAR 0 3
41989: MINUS
41990: ST_TO_ADDR
// if y - r < 0 then
41991: LD_VAR 0 2
41995: PUSH
41996: LD_VAR 0 3
42000: MINUS
42001: PUSH
42002: LD_INT 0
42004: LESS
42005: IFFALSE 42017
// min_y := 0 else
42007: LD_ADDR_VAR 0 7
42011: PUSH
42012: LD_INT 0
42014: ST_TO_ADDR
42015: GO 42033
// min_y := y - r ;
42017: LD_ADDR_VAR 0 7
42021: PUSH
42022: LD_VAR 0 2
42026: PUSH
42027: LD_VAR 0 3
42031: MINUS
42032: ST_TO_ADDR
// max_x := x + r ;
42033: LD_ADDR_VAR 0 9
42037: PUSH
42038: LD_VAR 0 1
42042: PUSH
42043: LD_VAR 0 3
42047: PLUS
42048: ST_TO_ADDR
// max_y := y + r ;
42049: LD_ADDR_VAR 0 10
42053: PUSH
42054: LD_VAR 0 2
42058: PUSH
42059: LD_VAR 0 3
42063: PLUS
42064: ST_TO_ADDR
// for _x = min_x to max_x do
42065: LD_ADDR_VAR 0 5
42069: PUSH
42070: DOUBLE
42071: LD_VAR 0 8
42075: DEC
42076: ST_TO_ADDR
42077: LD_VAR 0 9
42081: PUSH
42082: FOR_TO
42083: IFFALSE 42184
// for _y = min_y to max_y do
42085: LD_ADDR_VAR 0 6
42089: PUSH
42090: DOUBLE
42091: LD_VAR 0 7
42095: DEC
42096: ST_TO_ADDR
42097: LD_VAR 0 10
42101: PUSH
42102: FOR_TO
42103: IFFALSE 42180
// begin if not ValidHex ( _x , _y ) then
42105: LD_VAR 0 5
42109: PPUSH
42110: LD_VAR 0 6
42114: PPUSH
42115: CALL_OW 488
42119: NOT
42120: IFFALSE 42124
// continue ;
42122: GO 42102
// if GetResourceTypeXY ( _x , _y ) then
42124: LD_VAR 0 5
42128: PPUSH
42129: LD_VAR 0 6
42133: PPUSH
42134: CALL_OW 283
42138: IFFALSE 42178
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42140: LD_ADDR_VAR 0 4
42144: PUSH
42145: LD_VAR 0 4
42149: PPUSH
42150: LD_VAR 0 4
42154: PUSH
42155: LD_INT 1
42157: PLUS
42158: PPUSH
42159: LD_VAR 0 5
42163: PUSH
42164: LD_VAR 0 6
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PPUSH
42173: CALL_OW 1
42177: ST_TO_ADDR
// end ;
42178: GO 42102
42180: POP
42181: POP
42182: GO 42082
42184: POP
42185: POP
// end ;
42186: LD_VAR 0 4
42190: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42191: LD_INT 0
42193: PPUSH
42194: PPUSH
42195: PPUSH
42196: PPUSH
42197: PPUSH
42198: PPUSH
42199: PPUSH
42200: PPUSH
// if not units then
42201: LD_VAR 0 1
42205: NOT
42206: IFFALSE 42210
// exit ;
42208: GO 42738
// result := UnitFilter ( units , [ f_ok ] ) ;
42210: LD_ADDR_VAR 0 3
42214: PUSH
42215: LD_VAR 0 1
42219: PPUSH
42220: LD_INT 50
42222: PUSH
42223: EMPTY
42224: LIST
42225: PPUSH
42226: CALL_OW 72
42230: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42231: LD_ADDR_VAR 0 8
42235: PUSH
42236: LD_VAR 0 1
42240: PUSH
42241: LD_INT 1
42243: ARRAY
42244: PPUSH
42245: CALL_OW 255
42249: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42250: LD_ADDR_VAR 0 10
42254: PUSH
42255: LD_INT 29
42257: PUSH
42258: LD_INT 91
42260: PUSH
42261: LD_INT 49
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: ST_TO_ADDR
// if not result then
42269: LD_VAR 0 3
42273: NOT
42274: IFFALSE 42278
// exit ;
42276: GO 42738
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42278: LD_ADDR_VAR 0 5
42282: PUSH
42283: LD_INT 81
42285: PUSH
42286: LD_VAR 0 8
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PPUSH
42295: CALL_OW 69
42299: ST_TO_ADDR
// for i in result do
42300: LD_ADDR_VAR 0 4
42304: PUSH
42305: LD_VAR 0 3
42309: PUSH
42310: FOR_IN
42311: IFFALSE 42736
// begin tag := GetTag ( i ) + 1 ;
42313: LD_ADDR_VAR 0 9
42317: PUSH
42318: LD_VAR 0 4
42322: PPUSH
42323: CALL_OW 110
42327: PUSH
42328: LD_INT 1
42330: PLUS
42331: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42332: LD_ADDR_VAR 0 7
42336: PUSH
42337: LD_VAR 0 4
42341: PPUSH
42342: CALL_OW 250
42346: PPUSH
42347: LD_VAR 0 4
42351: PPUSH
42352: CALL_OW 251
42356: PPUSH
42357: LD_INT 4
42359: PPUSH
42360: CALL 41933 0 3
42364: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42365: LD_VAR 0 4
42369: PPUSH
42370: CALL_OW 247
42374: PUSH
42375: LD_INT 2
42377: EQUAL
42378: PUSH
42379: LD_VAR 0 7
42383: PUSH
42384: LD_INT 2
42386: GREATER
42387: AND
42388: PUSH
42389: LD_VAR 0 4
42393: PPUSH
42394: CALL_OW 264
42398: PUSH
42399: LD_VAR 0 10
42403: IN
42404: NOT
42405: AND
42406: IFFALSE 42445
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42408: LD_VAR 0 4
42412: PPUSH
42413: LD_VAR 0 7
42417: PUSH
42418: LD_INT 1
42420: ARRAY
42421: PUSH
42422: LD_INT 1
42424: ARRAY
42425: PPUSH
42426: LD_VAR 0 7
42430: PUSH
42431: LD_INT 1
42433: ARRAY
42434: PUSH
42435: LD_INT 2
42437: ARRAY
42438: PPUSH
42439: CALL_OW 116
42443: GO 42734
// if path > tag then
42445: LD_VAR 0 2
42449: PUSH
42450: LD_VAR 0 9
42454: GREATER
42455: IFFALSE 42663
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42457: LD_ADDR_VAR 0 6
42461: PUSH
42462: LD_VAR 0 5
42466: PPUSH
42467: LD_INT 91
42469: PUSH
42470: LD_VAR 0 4
42474: PUSH
42475: LD_INT 8
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: LIST
42482: PPUSH
42483: CALL_OW 72
42487: ST_TO_ADDR
// if nearEnemy then
42488: LD_VAR 0 6
42492: IFFALSE 42561
// begin if GetWeapon ( i ) = ru_time_lapser then
42494: LD_VAR 0 4
42498: PPUSH
42499: CALL_OW 264
42503: PUSH
42504: LD_INT 49
42506: EQUAL
42507: IFFALSE 42535
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42509: LD_VAR 0 4
42513: PPUSH
42514: LD_VAR 0 6
42518: PPUSH
42519: LD_VAR 0 4
42523: PPUSH
42524: CALL_OW 74
42528: PPUSH
42529: CALL_OW 112
42533: GO 42559
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42535: LD_VAR 0 4
42539: PPUSH
42540: LD_VAR 0 6
42544: PPUSH
42545: LD_VAR 0 4
42549: PPUSH
42550: CALL_OW 74
42554: PPUSH
42555: CALL 43809 0 2
// end else
42559: GO 42661
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42561: LD_VAR 0 4
42565: PPUSH
42566: LD_VAR 0 2
42570: PUSH
42571: LD_VAR 0 9
42575: ARRAY
42576: PUSH
42577: LD_INT 1
42579: ARRAY
42580: PPUSH
42581: LD_VAR 0 2
42585: PUSH
42586: LD_VAR 0 9
42590: ARRAY
42591: PUSH
42592: LD_INT 2
42594: ARRAY
42595: PPUSH
42596: CALL_OW 297
42600: PUSH
42601: LD_INT 6
42603: GREATER
42604: IFFALSE 42647
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42606: LD_VAR 0 4
42610: PPUSH
42611: LD_VAR 0 2
42615: PUSH
42616: LD_VAR 0 9
42620: ARRAY
42621: PUSH
42622: LD_INT 1
42624: ARRAY
42625: PPUSH
42626: LD_VAR 0 2
42630: PUSH
42631: LD_VAR 0 9
42635: ARRAY
42636: PUSH
42637: LD_INT 2
42639: ARRAY
42640: PPUSH
42641: CALL_OW 114
42645: GO 42661
// SetTag ( i , tag ) ;
42647: LD_VAR 0 4
42651: PPUSH
42652: LD_VAR 0 9
42656: PPUSH
42657: CALL_OW 109
// end else
42661: GO 42734
// if enemy then
42663: LD_VAR 0 5
42667: IFFALSE 42734
// begin if GetWeapon ( i ) = ru_time_lapser then
42669: LD_VAR 0 4
42673: PPUSH
42674: CALL_OW 264
42678: PUSH
42679: LD_INT 49
42681: EQUAL
42682: IFFALSE 42710
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42684: LD_VAR 0 4
42688: PPUSH
42689: LD_VAR 0 5
42693: PPUSH
42694: LD_VAR 0 4
42698: PPUSH
42699: CALL_OW 74
42703: PPUSH
42704: CALL_OW 112
42708: GO 42734
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42710: LD_VAR 0 4
42714: PPUSH
42715: LD_VAR 0 5
42719: PPUSH
42720: LD_VAR 0 4
42724: PPUSH
42725: CALL_OW 74
42729: PPUSH
42730: CALL 43809 0 2
// end ; end ;
42734: GO 42310
42736: POP
42737: POP
// end ;
42738: LD_VAR 0 3
42742: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42743: LD_INT 0
42745: PPUSH
42746: PPUSH
42747: PPUSH
// if not unit or IsInUnit ( unit ) then
42748: LD_VAR 0 1
42752: NOT
42753: PUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 310
42763: OR
42764: IFFALSE 42768
// exit ;
42766: GO 42859
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42768: LD_ADDR_VAR 0 4
42772: PUSH
42773: LD_VAR 0 1
42777: PPUSH
42778: CALL_OW 250
42782: PPUSH
42783: LD_VAR 0 2
42787: PPUSH
42788: LD_INT 1
42790: PPUSH
42791: CALL_OW 272
42795: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42796: LD_ADDR_VAR 0 5
42800: PUSH
42801: LD_VAR 0 1
42805: PPUSH
42806: CALL_OW 251
42810: PPUSH
42811: LD_VAR 0 2
42815: PPUSH
42816: LD_INT 1
42818: PPUSH
42819: CALL_OW 273
42823: ST_TO_ADDR
// if ValidHex ( x , y ) then
42824: LD_VAR 0 4
42828: PPUSH
42829: LD_VAR 0 5
42833: PPUSH
42834: CALL_OW 488
42838: IFFALSE 42859
// ComTurnXY ( unit , x , y ) ;
42840: LD_VAR 0 1
42844: PPUSH
42845: LD_VAR 0 4
42849: PPUSH
42850: LD_VAR 0 5
42854: PPUSH
42855: CALL_OW 118
// end ;
42859: LD_VAR 0 3
42863: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42864: LD_INT 0
42866: PPUSH
42867: PPUSH
// result := false ;
42868: LD_ADDR_VAR 0 3
42872: PUSH
42873: LD_INT 0
42875: ST_TO_ADDR
// if not units then
42876: LD_VAR 0 2
42880: NOT
42881: IFFALSE 42885
// exit ;
42883: GO 42930
// for i in units do
42885: LD_ADDR_VAR 0 4
42889: PUSH
42890: LD_VAR 0 2
42894: PUSH
42895: FOR_IN
42896: IFFALSE 42928
// if See ( side , i ) then
42898: LD_VAR 0 1
42902: PPUSH
42903: LD_VAR 0 4
42907: PPUSH
42908: CALL_OW 292
42912: IFFALSE 42926
// begin result := true ;
42914: LD_ADDR_VAR 0 3
42918: PUSH
42919: LD_INT 1
42921: ST_TO_ADDR
// exit ;
42922: POP
42923: POP
42924: GO 42930
// end ;
42926: GO 42895
42928: POP
42929: POP
// end ;
42930: LD_VAR 0 3
42934: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42935: LD_INT 0
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
// if not unit or not points then
42941: LD_VAR 0 1
42945: NOT
42946: PUSH
42947: LD_VAR 0 2
42951: NOT
42952: OR
42953: IFFALSE 42957
// exit ;
42955: GO 43047
// dist := 99999 ;
42957: LD_ADDR_VAR 0 5
42961: PUSH
42962: LD_INT 99999
42964: ST_TO_ADDR
// for i in points do
42965: LD_ADDR_VAR 0 4
42969: PUSH
42970: LD_VAR 0 2
42974: PUSH
42975: FOR_IN
42976: IFFALSE 43045
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42978: LD_ADDR_VAR 0 6
42982: PUSH
42983: LD_VAR 0 1
42987: PPUSH
42988: LD_VAR 0 4
42992: PUSH
42993: LD_INT 1
42995: ARRAY
42996: PPUSH
42997: LD_VAR 0 4
43001: PUSH
43002: LD_INT 2
43004: ARRAY
43005: PPUSH
43006: CALL_OW 297
43010: ST_TO_ADDR
// if tmpDist < dist then
43011: LD_VAR 0 6
43015: PUSH
43016: LD_VAR 0 5
43020: LESS
43021: IFFALSE 43043
// begin result := i ;
43023: LD_ADDR_VAR 0 3
43027: PUSH
43028: LD_VAR 0 4
43032: ST_TO_ADDR
// dist := tmpDist ;
43033: LD_ADDR_VAR 0 5
43037: PUSH
43038: LD_VAR 0 6
43042: ST_TO_ADDR
// end ; end ;
43043: GO 42975
43045: POP
43046: POP
// end ;
43047: LD_VAR 0 3
43051: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43052: LD_INT 0
43054: PPUSH
// uc_side := side ;
43055: LD_ADDR_OWVAR 20
43059: PUSH
43060: LD_VAR 0 1
43064: ST_TO_ADDR
// uc_nation := 3 ;
43065: LD_ADDR_OWVAR 21
43069: PUSH
43070: LD_INT 3
43072: ST_TO_ADDR
// vc_chassis := 25 ;
43073: LD_ADDR_OWVAR 37
43077: PUSH
43078: LD_INT 25
43080: ST_TO_ADDR
// vc_engine := engine_siberite ;
43081: LD_ADDR_OWVAR 39
43085: PUSH
43086: LD_INT 3
43088: ST_TO_ADDR
// vc_control := control_computer ;
43089: LD_ADDR_OWVAR 38
43093: PUSH
43094: LD_INT 3
43096: ST_TO_ADDR
// vc_weapon := 59 ;
43097: LD_ADDR_OWVAR 40
43101: PUSH
43102: LD_INT 59
43104: ST_TO_ADDR
// result := CreateVehicle ;
43105: LD_ADDR_VAR 0 5
43109: PUSH
43110: CALL_OW 45
43114: ST_TO_ADDR
// SetDir ( result , d ) ;
43115: LD_VAR 0 5
43119: PPUSH
43120: LD_VAR 0 4
43124: PPUSH
43125: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43129: LD_VAR 0 5
43133: PPUSH
43134: LD_VAR 0 2
43138: PPUSH
43139: LD_VAR 0 3
43143: PPUSH
43144: LD_INT 0
43146: PPUSH
43147: CALL_OW 48
// end ;
43151: LD_VAR 0 5
43155: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43156: LD_INT 0
43158: PPUSH
43159: PPUSH
43160: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43161: LD_ADDR_VAR 0 2
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43184: LD_VAR 0 1
43188: NOT
43189: PUSH
43190: LD_VAR 0 1
43194: PPUSH
43195: CALL_OW 264
43199: PUSH
43200: LD_INT 12
43202: PUSH
43203: LD_INT 51
43205: PUSH
43206: LD_INT 32
43208: PUSH
43209: LD_INT 89
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: IN
43218: NOT
43219: OR
43220: IFFALSE 43224
// exit ;
43222: GO 43322
// for i := 1 to 3 do
43224: LD_ADDR_VAR 0 3
43228: PUSH
43229: DOUBLE
43230: LD_INT 1
43232: DEC
43233: ST_TO_ADDR
43234: LD_INT 3
43236: PUSH
43237: FOR_TO
43238: IFFALSE 43320
// begin tmp := GetCargo ( cargo , i ) ;
43240: LD_ADDR_VAR 0 4
43244: PUSH
43245: LD_VAR 0 1
43249: PPUSH
43250: LD_VAR 0 3
43254: PPUSH
43255: CALL_OW 289
43259: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43260: LD_ADDR_VAR 0 2
43264: PUSH
43265: LD_VAR 0 2
43269: PPUSH
43270: LD_VAR 0 3
43274: PPUSH
43275: LD_VAR 0 4
43279: PPUSH
43280: CALL_OW 1
43284: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43285: LD_ADDR_VAR 0 2
43289: PUSH
43290: LD_VAR 0 2
43294: PPUSH
43295: LD_INT 4
43297: PPUSH
43298: LD_VAR 0 2
43302: PUSH
43303: LD_INT 4
43305: ARRAY
43306: PUSH
43307: LD_VAR 0 4
43311: PLUS
43312: PPUSH
43313: CALL_OW 1
43317: ST_TO_ADDR
// end ;
43318: GO 43237
43320: POP
43321: POP
// end ;
43322: LD_VAR 0 2
43326: RET
// export function Length ( array ) ; begin
43327: LD_INT 0
43329: PPUSH
// result := array + 0 ;
43330: LD_ADDR_VAR 0 2
43334: PUSH
43335: LD_VAR 0 1
43339: PUSH
43340: LD_INT 0
43342: PLUS
43343: ST_TO_ADDR
// end ;
43344: LD_VAR 0 2
43348: RET
// export function PrepareArray ( array ) ; begin
43349: LD_INT 0
43351: PPUSH
// result := array diff 0 ;
43352: LD_ADDR_VAR 0 2
43356: PUSH
43357: LD_VAR 0 1
43361: PUSH
43362: LD_INT 0
43364: DIFF
43365: ST_TO_ADDR
// if not result [ 1 ] then
43366: LD_VAR 0 2
43370: PUSH
43371: LD_INT 1
43373: ARRAY
43374: NOT
43375: IFFALSE 43395
// result := Delete ( result , 1 ) ;
43377: LD_ADDR_VAR 0 2
43381: PUSH
43382: LD_VAR 0 2
43386: PPUSH
43387: LD_INT 1
43389: PPUSH
43390: CALL_OW 3
43394: ST_TO_ADDR
// end ;
43395: LD_VAR 0 2
43399: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43400: LD_INT 0
43402: PPUSH
43403: PPUSH
43404: PPUSH
43405: PPUSH
// sibRocketRange := 25 ;
43406: LD_ADDR_VAR 0 6
43410: PUSH
43411: LD_INT 25
43413: ST_TO_ADDR
// result := false ;
43414: LD_ADDR_VAR 0 4
43418: PUSH
43419: LD_INT 0
43421: ST_TO_ADDR
// for i := 0 to 5 do
43422: LD_ADDR_VAR 0 5
43426: PUSH
43427: DOUBLE
43428: LD_INT 0
43430: DEC
43431: ST_TO_ADDR
43432: LD_INT 5
43434: PUSH
43435: FOR_TO
43436: IFFALSE 43503
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43438: LD_VAR 0 1
43442: PPUSH
43443: LD_VAR 0 5
43447: PPUSH
43448: LD_VAR 0 6
43452: PPUSH
43453: CALL_OW 272
43457: PPUSH
43458: LD_VAR 0 2
43462: PPUSH
43463: LD_VAR 0 5
43467: PPUSH
43468: LD_VAR 0 6
43472: PPUSH
43473: CALL_OW 273
43477: PPUSH
43478: LD_VAR 0 3
43482: PPUSH
43483: CALL_OW 309
43487: IFFALSE 43501
// begin result := true ;
43489: LD_ADDR_VAR 0 4
43493: PUSH
43494: LD_INT 1
43496: ST_TO_ADDR
// exit ;
43497: POP
43498: POP
43499: GO 43505
// end ;
43501: GO 43435
43503: POP
43504: POP
// end ;
43505: LD_VAR 0 4
43509: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43510: LD_INT 0
43512: PPUSH
43513: PPUSH
43514: PPUSH
// if btype = b_depot then
43515: LD_VAR 0 2
43519: PUSH
43520: LD_INT 0
43522: EQUAL
43523: IFFALSE 43535
// begin result := true ;
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_INT 1
43532: ST_TO_ADDR
// exit ;
43533: GO 43651
// end ; pom := GetBase ( depot ) ;
43535: LD_ADDR_VAR 0 4
43539: PUSH
43540: LD_VAR 0 1
43544: PPUSH
43545: CALL_OW 274
43549: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43550: LD_ADDR_VAR 0 5
43554: PUSH
43555: LD_VAR 0 2
43559: PPUSH
43560: LD_VAR 0 1
43564: PPUSH
43565: CALL_OW 248
43569: PPUSH
43570: CALL_OW 450
43574: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43575: LD_ADDR_VAR 0 3
43579: PUSH
43580: LD_VAR 0 4
43584: PPUSH
43585: LD_INT 1
43587: PPUSH
43588: CALL_OW 275
43592: PUSH
43593: LD_VAR 0 5
43597: PUSH
43598: LD_INT 1
43600: ARRAY
43601: GREATEREQUAL
43602: PUSH
43603: LD_VAR 0 4
43607: PPUSH
43608: LD_INT 2
43610: PPUSH
43611: CALL_OW 275
43615: PUSH
43616: LD_VAR 0 5
43620: PUSH
43621: LD_INT 2
43623: ARRAY
43624: GREATEREQUAL
43625: AND
43626: PUSH
43627: LD_VAR 0 4
43631: PPUSH
43632: LD_INT 3
43634: PPUSH
43635: CALL_OW 275
43639: PUSH
43640: LD_VAR 0 5
43644: PUSH
43645: LD_INT 3
43647: ARRAY
43648: GREATEREQUAL
43649: AND
43650: ST_TO_ADDR
// end ;
43651: LD_VAR 0 3
43655: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43656: LD_INT 0
43658: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43659: LD_VAR 0 1
43663: PPUSH
43664: LD_VAR 0 2
43668: PPUSH
43669: LD_INT 0
43671: PPUSH
43672: LD_INT 0
43674: PPUSH
43675: LD_INT 1
43677: PPUSH
43678: LD_INT 0
43680: PPUSH
43681: CALL_OW 587
// end ;
43685: LD_VAR 0 3
43689: RET
// export function CenterOnNow ( unit ) ; begin
43690: LD_INT 0
43692: PPUSH
// result := IsInUnit ( unit ) ;
43693: LD_ADDR_VAR 0 2
43697: PUSH
43698: LD_VAR 0 1
43702: PPUSH
43703: CALL_OW 310
43707: ST_TO_ADDR
// if not result then
43708: LD_VAR 0 2
43712: NOT
43713: IFFALSE 43725
// result := unit ;
43715: LD_ADDR_VAR 0 2
43719: PUSH
43720: LD_VAR 0 1
43724: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43725: LD_VAR 0 1
43729: PPUSH
43730: CALL_OW 87
// end ;
43734: LD_VAR 0 2
43738: RET
// export function ComMoveHex ( unit , hex ) ; begin
43739: LD_INT 0
43741: PPUSH
// if not hex then
43742: LD_VAR 0 2
43746: NOT
43747: IFFALSE 43751
// exit ;
43749: GO 43804
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43751: LD_VAR 0 2
43755: PUSH
43756: LD_INT 1
43758: ARRAY
43759: PPUSH
43760: LD_VAR 0 2
43764: PUSH
43765: LD_INT 2
43767: ARRAY
43768: PPUSH
43769: CALL_OW 428
43773: IFFALSE 43777
// exit ;
43775: GO 43804
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43777: LD_VAR 0 1
43781: PPUSH
43782: LD_VAR 0 2
43786: PUSH
43787: LD_INT 1
43789: ARRAY
43790: PPUSH
43791: LD_VAR 0 2
43795: PUSH
43796: LD_INT 2
43798: ARRAY
43799: PPUSH
43800: CALL_OW 111
// end ;
43804: LD_VAR 0 3
43808: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43809: LD_INT 0
43811: PPUSH
43812: PPUSH
43813: PPUSH
// if not unit or not enemy then
43814: LD_VAR 0 1
43818: NOT
43819: PUSH
43820: LD_VAR 0 2
43824: NOT
43825: OR
43826: IFFALSE 43830
// exit ;
43828: GO 43954
// x := GetX ( enemy ) ;
43830: LD_ADDR_VAR 0 4
43834: PUSH
43835: LD_VAR 0 2
43839: PPUSH
43840: CALL_OW 250
43844: ST_TO_ADDR
// y := GetY ( enemy ) ;
43845: LD_ADDR_VAR 0 5
43849: PUSH
43850: LD_VAR 0 2
43854: PPUSH
43855: CALL_OW 251
43859: ST_TO_ADDR
// if ValidHex ( x , y ) then
43860: LD_VAR 0 4
43864: PPUSH
43865: LD_VAR 0 5
43869: PPUSH
43870: CALL_OW 488
43874: IFFALSE 43954
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43876: LD_VAR 0 2
43880: PPUSH
43881: CALL_OW 247
43885: PUSH
43886: LD_INT 3
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: IN
43896: PUSH
43897: LD_VAR 0 1
43901: PPUSH
43902: CALL_OW 255
43906: PPUSH
43907: LD_VAR 0 2
43911: PPUSH
43912: CALL_OW 292
43916: OR
43917: IFFALSE 43935
// ComAttackUnit ( unit , enemy ) else
43919: LD_VAR 0 1
43923: PPUSH
43924: LD_VAR 0 2
43928: PPUSH
43929: CALL_OW 115
43933: GO 43954
// ComAgressiveMove ( unit , x , y ) ;
43935: LD_VAR 0 1
43939: PPUSH
43940: LD_VAR 0 4
43944: PPUSH
43945: LD_VAR 0 5
43949: PPUSH
43950: CALL_OW 114
// end ;
43954: LD_VAR 0 3
43958: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43959: LD_INT 0
43961: PPUSH
43962: PPUSH
43963: PPUSH
// list := AreaToList ( area , 0 ) ;
43964: LD_ADDR_VAR 0 5
43968: PUSH
43969: LD_VAR 0 1
43973: PPUSH
43974: LD_INT 0
43976: PPUSH
43977: CALL_OW 517
43981: ST_TO_ADDR
// if not list then
43982: LD_VAR 0 5
43986: NOT
43987: IFFALSE 43991
// exit ;
43989: GO 44121
// if all then
43991: LD_VAR 0 2
43995: IFFALSE 44083
// begin for i := 1 to list [ 1 ] do
43997: LD_ADDR_VAR 0 4
44001: PUSH
44002: DOUBLE
44003: LD_INT 1
44005: DEC
44006: ST_TO_ADDR
44007: LD_VAR 0 5
44011: PUSH
44012: LD_INT 1
44014: ARRAY
44015: PUSH
44016: FOR_TO
44017: IFFALSE 44079
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44019: LD_ADDR_VAR 0 3
44023: PUSH
44024: LD_VAR 0 3
44028: PPUSH
44029: LD_VAR 0 3
44033: PUSH
44034: LD_INT 1
44036: PLUS
44037: PPUSH
44038: LD_VAR 0 5
44042: PUSH
44043: LD_INT 1
44045: ARRAY
44046: PUSH
44047: LD_VAR 0 4
44051: ARRAY
44052: PUSH
44053: LD_VAR 0 5
44057: PUSH
44058: LD_INT 2
44060: ARRAY
44061: PUSH
44062: LD_VAR 0 4
44066: ARRAY
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PPUSH
44072: CALL_OW 1
44076: ST_TO_ADDR
44077: GO 44016
44079: POP
44080: POP
// exit ;
44081: GO 44121
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44083: LD_ADDR_VAR 0 3
44087: PUSH
44088: LD_VAR 0 5
44092: PUSH
44093: LD_INT 1
44095: ARRAY
44096: PUSH
44097: LD_INT 1
44099: ARRAY
44100: PUSH
44101: LD_VAR 0 5
44105: PUSH
44106: LD_INT 2
44108: ARRAY
44109: PUSH
44110: LD_INT 1
44112: ARRAY
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: EMPTY
44119: LIST
44120: ST_TO_ADDR
// end ;
44121: LD_VAR 0 3
44125: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44126: LD_INT 0
44128: PPUSH
44129: PPUSH
// list := AreaToList ( area , 0 ) ;
44130: LD_ADDR_VAR 0 4
44134: PUSH
44135: LD_VAR 0 1
44139: PPUSH
44140: LD_INT 0
44142: PPUSH
44143: CALL_OW 517
44147: ST_TO_ADDR
// if not list then
44148: LD_VAR 0 4
44152: NOT
44153: IFFALSE 44157
// exit ;
44155: GO 44198
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44157: LD_ADDR_VAR 0 3
44161: PUSH
44162: LD_VAR 0 4
44166: PUSH
44167: LD_INT 1
44169: ARRAY
44170: PUSH
44171: LD_INT 1
44173: ARRAY
44174: PUSH
44175: LD_VAR 0 4
44179: PUSH
44180: LD_INT 2
44182: ARRAY
44183: PUSH
44184: LD_INT 1
44186: ARRAY
44187: PUSH
44188: LD_VAR 0 2
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: LIST
44197: ST_TO_ADDR
// end ;
44198: LD_VAR 0 3
44202: RET
// export function First ( array ) ; begin
44203: LD_INT 0
44205: PPUSH
// if not array then
44206: LD_VAR 0 1
44210: NOT
44211: IFFALSE 44215
// exit ;
44213: GO 44229
// result := array [ 1 ] ;
44215: LD_ADDR_VAR 0 2
44219: PUSH
44220: LD_VAR 0 1
44224: PUSH
44225: LD_INT 1
44227: ARRAY
44228: ST_TO_ADDR
// end ;
44229: LD_VAR 0 2
44233: RET
// export function Last ( array ) ; begin
44234: LD_INT 0
44236: PPUSH
// if not array then
44237: LD_VAR 0 1
44241: NOT
44242: IFFALSE 44246
// exit ;
44244: GO 44262
// result := array [ array ] ;
44246: LD_ADDR_VAR 0 2
44250: PUSH
44251: LD_VAR 0 1
44255: PUSH
44256: LD_VAR 0 1
44260: ARRAY
44261: ST_TO_ADDR
// end ;
44262: LD_VAR 0 2
44266: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44267: LD_INT 0
44269: PPUSH
44270: PPUSH
// result := [ ] ;
44271: LD_ADDR_VAR 0 5
44275: PUSH
44276: EMPTY
44277: ST_TO_ADDR
// if not array then
44278: LD_VAR 0 1
44282: NOT
44283: IFFALSE 44287
// exit ;
44285: GO 44399
// for i := 1 to array do
44287: LD_ADDR_VAR 0 6
44291: PUSH
44292: DOUBLE
44293: LD_INT 1
44295: DEC
44296: ST_TO_ADDR
44297: LD_VAR 0 1
44301: PUSH
44302: FOR_TO
44303: IFFALSE 44397
// if array [ i ] [ index ] = value then
44305: LD_VAR 0 1
44309: PUSH
44310: LD_VAR 0 6
44314: ARRAY
44315: PUSH
44316: LD_VAR 0 2
44320: ARRAY
44321: PUSH
44322: LD_VAR 0 3
44326: EQUAL
44327: IFFALSE 44395
// begin if indexColumn then
44329: LD_VAR 0 4
44333: IFFALSE 44369
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44335: LD_ADDR_VAR 0 5
44339: PUSH
44340: LD_VAR 0 5
44344: PPUSH
44345: LD_VAR 0 1
44349: PUSH
44350: LD_VAR 0 6
44354: ARRAY
44355: PUSH
44356: LD_VAR 0 4
44360: ARRAY
44361: PPUSH
44362: CALL 39581 0 2
44366: ST_TO_ADDR
44367: GO 44395
// result := Join ( result , array [ i ] ) ;
44369: LD_ADDR_VAR 0 5
44373: PUSH
44374: LD_VAR 0 5
44378: PPUSH
44379: LD_VAR 0 1
44383: PUSH
44384: LD_VAR 0 6
44388: ARRAY
44389: PPUSH
44390: CALL 39581 0 2
44394: ST_TO_ADDR
// end ;
44395: GO 44302
44397: POP
44398: POP
// end ;
44399: LD_VAR 0 5
44403: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44404: LD_INT 0
44406: PPUSH
// if not vehicles or not parkingPoint then
44407: LD_VAR 0 1
44411: NOT
44412: PUSH
44413: LD_VAR 0 2
44417: NOT
44418: OR
44419: IFFALSE 44423
// exit ;
44421: GO 44521
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44423: LD_ADDR_VAR 0 1
44427: PUSH
44428: LD_VAR 0 1
44432: PPUSH
44433: LD_INT 50
44435: PUSH
44436: EMPTY
44437: LIST
44438: PUSH
44439: LD_INT 3
44441: PUSH
44442: LD_INT 92
44444: PUSH
44445: LD_VAR 0 2
44449: PUSH
44450: LD_INT 1
44452: ARRAY
44453: PUSH
44454: LD_VAR 0 2
44458: PUSH
44459: LD_INT 2
44461: ARRAY
44462: PUSH
44463: LD_INT 8
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PPUSH
44480: CALL_OW 72
44484: ST_TO_ADDR
// if not vehicles then
44485: LD_VAR 0 1
44489: NOT
44490: IFFALSE 44494
// exit ;
44492: GO 44521
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44494: LD_VAR 0 1
44498: PPUSH
44499: LD_VAR 0 2
44503: PUSH
44504: LD_INT 1
44506: ARRAY
44507: PPUSH
44508: LD_VAR 0 2
44512: PUSH
44513: LD_INT 2
44515: ARRAY
44516: PPUSH
44517: CALL_OW 111
// end ;
44521: LD_VAR 0 3
44525: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44526: LD_INT 0
44528: PPUSH
44529: PPUSH
44530: PPUSH
// if not side or not area then
44531: LD_VAR 0 1
44535: NOT
44536: PUSH
44537: LD_VAR 0 2
44541: NOT
44542: OR
44543: IFFALSE 44547
// exit ;
44545: GO 44666
// tmp := AreaToList ( area , 0 ) ;
44547: LD_ADDR_VAR 0 5
44551: PUSH
44552: LD_VAR 0 2
44556: PPUSH
44557: LD_INT 0
44559: PPUSH
44560: CALL_OW 517
44564: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44565: LD_ADDR_VAR 0 4
44569: PUSH
44570: DOUBLE
44571: LD_INT 1
44573: DEC
44574: ST_TO_ADDR
44575: LD_VAR 0 5
44579: PUSH
44580: LD_INT 1
44582: ARRAY
44583: PUSH
44584: FOR_TO
44585: IFFALSE 44664
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44587: LD_VAR 0 5
44591: PUSH
44592: LD_INT 1
44594: ARRAY
44595: PUSH
44596: LD_VAR 0 4
44600: ARRAY
44601: PPUSH
44602: LD_VAR 0 5
44606: PUSH
44607: LD_INT 2
44609: ARRAY
44610: PUSH
44611: LD_VAR 0 4
44615: ARRAY
44616: PPUSH
44617: CALL_OW 351
44621: IFFALSE 44662
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44623: LD_VAR 0 5
44627: PUSH
44628: LD_INT 1
44630: ARRAY
44631: PUSH
44632: LD_VAR 0 4
44636: ARRAY
44637: PPUSH
44638: LD_VAR 0 5
44642: PUSH
44643: LD_INT 2
44645: ARRAY
44646: PUSH
44647: LD_VAR 0 4
44651: ARRAY
44652: PPUSH
44653: LD_VAR 0 1
44657: PPUSH
44658: CALL_OW 244
// end ;
44662: GO 44584
44664: POP
44665: POP
// end ;
44666: LD_VAR 0 3
44670: RET
