// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareRussian ;
   8: CALL 118 0 0
// Action ;
  12: CALL 1440 0 0
// end ;
  16: END
// function Init ; begin
  17: LD_INT 0
  19: PPUSH
// game_speed := 5 ;
  20: LD_ADDR_OWVAR 65
  24: PUSH
  25: LD_INT 5
  27: ST_TO_ADDR
// music_class := 5 ;
  28: LD_ADDR_OWVAR 72
  32: PUSH
  33: LD_INT 5
  35: ST_TO_ADDR
// FogOff ( 3 ) ;
  36: LD_INT 3
  38: PPUSH
  39: CALL_OW 344
// SetWeather ( 2 , 250 , 300 ) ;
  43: LD_INT 2
  45: PPUSH
  46: LD_INT 250
  48: PPUSH
  49: LD_INT 300
  51: PPUSH
  52: CALL_OW 550
// PlaceSeeing ( 1 , 1 , 3 , - 32967 ) ;
  56: LD_INT 1
  58: PPUSH
  59: LD_INT 1
  61: PPUSH
  62: LD_INT 3
  64: PPUSH
  65: LD_INT 32967
  67: NEG
  68: PPUSH
  69: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 3 ) ;
  73: LD_INT 1
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: LD_INT 3
  81: PPUSH
  82: CALL_OW 331
// PlaceSeeing ( 172 , 50 , 3 , - 32 ) ;
  86: LD_INT 172
  88: PPUSH
  89: LD_INT 50
  91: PPUSH
  92: LD_INT 3
  94: PPUSH
  95: LD_INT 32
  97: NEG
  98: PPUSH
  99: CALL_OW 330
// CenterNowOnXY ( 109 , 159 ) ;
 103: LD_INT 109
 105: PPUSH
 106: LD_INT 159
 108: PPUSH
 109: CALL_OW 86
// end ; end_of_file
 113: LD_VAR 0 1
 117: RET
// export Botvinov , Szyski , Burlak ; export group1 , group2 , group3 ; export function PrepareRussian ; var i , un ; begin
 118: LD_INT 0
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 3 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 3
 130: ST_TO_ADDR
// uc_nation := 3 ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// InitHc ;
 139: CALL_OW 19
// PrepareSoldier ( sex_male , 1 ) ;
 143: LD_INT 1
 145: PPUSH
 146: LD_INT 1
 148: PPUSH
 149: CALL_OW 381
// hc_name := Botvinov ;
 153: LD_ADDR_OWVAR 26
 157: PUSH
 158: LD_STRING Botvinov
 160: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 161: LD_ADDR_OWVAR 33
 165: PUSH
 166: LD_STRING SecondCharsGal
 168: ST_TO_ADDR
// hc_face_number := 84 ;
 169: LD_ADDR_OWVAR 34
 173: PUSH
 174: LD_INT 84
 176: ST_TO_ADDR
// Botvinov := CreateHuman ;
 177: LD_ADDR_EXP 1
 181: PUSH
 182: CALL_OW 44
 186: ST_TO_ADDR
// PlaceUnitArea ( Botvinov , botvinovArea , false ) ;
 187: LD_EXP 1
 191: PPUSH
 192: LD_INT 2
 194: PPUSH
 195: LD_INT 0
 197: PPUSH
 198: CALL_OW 49
// ComLookAtDir ( Botvinov , 4 ) ;
 202: LD_EXP 1
 206: PPUSH
 207: LD_INT 4
 209: PPUSH
 210: CALL 43352 0 2
// hc_name := Szyski ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING Szyski
 221: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 222: LD_ADDR_OWVAR 33
 226: PUSH
 227: LD_STRING SecondCharsGal
 229: ST_TO_ADDR
// hc_face_number := 86 ;
 230: LD_ADDR_OWVAR 34
 234: PUSH
 235: LD_INT 86
 237: ST_TO_ADDR
// Szyski := CreateHuman ;
 238: LD_ADDR_EXP 2
 242: PUSH
 243: CALL_OW 44
 247: ST_TO_ADDR
// PlaceUnitArea ( Szyski , szyskiArea , false ) ;
 248: LD_EXP 2
 252: PPUSH
 253: LD_INT 3
 255: PPUSH
 256: LD_INT 0
 258: PPUSH
 259: CALL_OW 49
// ComLookAtDir ( Szyski , 4 ) ;
 263: LD_EXP 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL 43352 0 2
// InitHC_All ( ) ;
 275: CALL_OW 584
// for i := 1 to 3 do
 279: LD_ADDR_VAR 0 2
 283: PUSH
 284: DOUBLE
 285: LD_INT 1
 287: DEC
 288: ST_TO_ADDR
 289: LD_INT 3
 291: PUSH
 292: FOR_TO
 293: IFFALSE 344
// begin PrepareSoldier ( sex_male , 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: LD_INT 1
 300: PPUSH
 301: CALL_OW 381
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// PlaceUnitArea ( un , officerArea , false ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 4
 322: PPUSH
 323: LD_INT 0
 325: PPUSH
 326: CALL_OW 49
// ComLookAtDir ( un , 2 ) ;
 330: LD_VAR 0 3
 334: PPUSH
 335: LD_INT 2
 337: PPUSH
 338: CALL 43352 0 2
// end ;
 342: GO 292
 344: POP
 345: POP
// for i := 1 to 3 do
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: DOUBLE
 352: LD_INT 1
 354: DEC
 355: ST_TO_ADDR
 356: LD_INT 3
 358: PUSH
 359: FOR_TO
 360: IFFALSE 411
// begin PrepareSoldier ( sex_male , 1 ) ;
 362: LD_INT 1
 364: PPUSH
 365: LD_INT 1
 367: PPUSH
 368: CALL_OW 381
// un := CreateHuman ;
 372: LD_ADDR_VAR 0 3
 376: PUSH
 377: CALL_OW 44
 381: ST_TO_ADDR
// PlaceUnitArea ( un , officer2Area , false ) ;
 382: LD_VAR 0 3
 386: PPUSH
 387: LD_INT 5
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 49
// ComLookAtDir ( un , 5 ) ;
 397: LD_VAR 0 3
 401: PPUSH
 402: LD_INT 5
 404: PPUSH
 405: CALL 43352 0 2
// end ;
 409: GO 359
 411: POP
 412: POP
// Burlak := NewCharacter ( Burlak ) ;
 413: LD_ADDR_EXP 3
 417: PUSH
 418: LD_STRING Burlak
 420: PPUSH
 421: CALL_OW 25
 425: ST_TO_ADDR
// InitHc_All ( ) ;
 426: CALL_OW 584
// group1 := PrepareGroup ;
 430: LD_ADDR_EXP 4
 434: PUSH
 435: CALL 779 0 0
 439: ST_TO_ADDR
// group1 := Replace ( group1 , 5 , Burlak ) ;
 440: LD_ADDR_EXP 4
 444: PUSH
 445: LD_EXP 4
 449: PPUSH
 450: LD_INT 5
 452: PPUSH
 453: LD_EXP 3
 457: PPUSH
 458: CALL_OW 1
 462: ST_TO_ADDR
// group2 := PrepareGroup ;
 463: LD_ADDR_EXP 5
 467: PUSH
 468: CALL 779 0 0
 472: ST_TO_ADDR
// group3 := PrepareGroup ;
 473: LD_ADDR_EXP 6
 477: PUSH
 478: CALL 779 0 0
 482: ST_TO_ADDR
// for un in group1 ^ group2 ^ group3 do
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_EXP 4
 492: PUSH
 493: LD_EXP 5
 497: ADD
 498: PUSH
 499: LD_EXP 6
 503: ADD
 504: PUSH
 505: FOR_IN
 506: IFFALSE 608
// begin case GetClass ( un ) of 1 :
 508: LD_VAR 0 3
 512: PPUSH
 513: CALL_OW 257
 517: PUSH
 518: LD_INT 1
 520: DOUBLE
 521: EQUAL
 522: IFTRUE 526
 524: GO 544
 526: POP
// PlaceUnitArea ( un , firstLineArea , false ) ; 3 :
 527: LD_VAR 0 3
 531: PPUSH
 532: LD_INT 6
 534: PPUSH
 535: LD_INT 0
 537: PPUSH
 538: CALL_OW 49
 542: GO 597
 544: LD_INT 3
 546: DOUBLE
 547: EQUAL
 548: IFTRUE 552
 550: GO 570
 552: POP
// PlaceUnitArea ( un , secondLineArea , false ) ; 4 :
 553: LD_VAR 0 3
 557: PPUSH
 558: LD_INT 7
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
 568: GO 597
 570: LD_INT 4
 572: DOUBLE
 573: EQUAL
 574: IFTRUE 578
 576: GO 596
 578: POP
// PlaceUnitArea ( un , thirdLineArea , false ) ; end ;
 579: LD_VAR 0 3
 583: PPUSH
 584: LD_INT 8
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
 594: GO 597
 596: POP
// ComHold ( un ) ;
 597: LD_VAR 0 3
 601: PPUSH
 602: CALL_OW 140
// end ;
 606: GO 505
 608: POP
 609: POP
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
 610: LD_ADDR_VAR 0 2
 614: PUSH
 615: LD_INT 21
 617: PUSH
 618: LD_INT 3
 620: PUSH
 621: EMPTY
 622: LIST
 623: LIST
 624: PPUSH
 625: CALL_OW 69
 629: PUSH
 630: LD_INT 4
 632: DIFF
 633: PUSH
 634: FOR_IN
 635: IFFALSE 696
// begin PrepareSoldier ( false , 1 ) ;
 637: LD_INT 0
 639: PPUSH
 640: LD_INT 1
 642: PPUSH
 643: CALL_OW 381
// un := CreateHuman ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: CALL_OW 44
 656: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 657: LD_VAR 0 3
 661: PPUSH
 662: LD_VAR 0 2
 666: PPUSH
 667: CALL_OW 254
 671: PUSH
 672: LD_INT 3
 674: MINUS
 675: PPUSH
 676: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 680: LD_VAR 0 3
 684: PPUSH
 685: LD_VAR 0 2
 689: PPUSH
 690: CALL_OW 52
// end ;
 694: GO 634
 696: POP
 697: POP
// for i := 1 to 3 do
 698: LD_ADDR_VAR 0 2
 702: PUSH
 703: DOUBLE
 704: LD_INT 1
 706: DEC
 707: ST_TO_ADDR
 708: LD_INT 3
 710: PUSH
 711: FOR_TO
 712: IFFALSE 772
// begin PrepareSoldier ( false , 1 ) ;
 714: LD_INT 0
 716: PPUSH
 717: LD_INT 1
 719: PPUSH
 720: CALL_OW 381
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 3
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceUnitXYR ( un , 120 , 13 , 6 , false ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 120
 741: PPUSH
 742: LD_INT 13
 744: PPUSH
 745: LD_INT 6
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 50
// ComMoveXY ( un , 91 , 166 ) ;
 755: LD_VAR 0 3
 759: PPUSH
 760: LD_INT 91
 762: PPUSH
 763: LD_INT 166
 765: PPUSH
 766: CALL_OW 111
// end ;
 770: GO 711
 772: POP
 773: POP
// end ;
 774: LD_VAR 0 1
 778: RET
// function PrepareGroup ; var i , j , tmp ; begin
 779: LD_INT 0
 781: PPUSH
 782: PPUSH
 783: PPUSH
 784: PPUSH
// result := [ ] ;
 785: LD_ADDR_VAR 0 1
 789: PUSH
 790: EMPTY
 791: ST_TO_ADDR
// tmp := [ 4 , 0 , 2 , 1 ] ;
 792: LD_ADDR_VAR 0 4
 796: PUSH
 797: LD_INT 4
 799: PUSH
 800: LD_INT 0
 802: PUSH
 803: LD_INT 2
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: ST_TO_ADDR
// for i := 1 to tmp do
 815: LD_ADDR_VAR 0 2
 819: PUSH
 820: DOUBLE
 821: LD_INT 1
 823: DEC
 824: ST_TO_ADDR
 825: LD_VAR 0 4
 829: PUSH
 830: FOR_TO
 831: IFFALSE 910
// if tmp [ i ] then
 833: LD_VAR 0 4
 837: PUSH
 838: LD_VAR 0 2
 842: ARRAY
 843: IFFALSE 908
// for j := 1 to tmp [ i ] do
 845: LD_ADDR_VAR 0 3
 849: PUSH
 850: DOUBLE
 851: LD_INT 1
 853: DEC
 854: ST_TO_ADDR
 855: LD_VAR 0 4
 859: PUSH
 860: LD_VAR 0 2
 864: ARRAY
 865: PUSH
 866: FOR_TO
 867: IFFALSE 906
// begin PrepareHuman ( false , i , 1 ) ;
 869: LD_INT 0
 871: PPUSH
 872: LD_VAR 0 2
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
 884: LD_ADDR_VAR 0 1
 888: PUSH
 889: LD_VAR 0 1
 893: PPUSH
 894: CALL_OW 44
 898: PPUSH
 899: CALL 40030 0 2
 903: ST_TO_ADDR
// end ;
 904: GO 866
 906: POP
 907: POP
 908: GO 830
 910: POP
 911: POP
// end ;
 912: LD_VAR 0 1
 916: RET
// export function FormGroup ( group , soldArea , mechArea , sciArea ) ; var i , class , hexesS , hexesM , hexesSc ; begin
 917: LD_INT 0
 919: PPUSH
 920: PPUSH
 921: PPUSH
 922: PPUSH
 923: PPUSH
 924: PPUSH
// if not group then
 925: LD_VAR 0 1
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1435
// hexesS := AreaToList ( soldArea , 0 ) ;
 934: LD_ADDR_VAR 0 8
 938: PUSH
 939: LD_VAR 0 2
 943: PPUSH
 944: LD_INT 0
 946: PPUSH
 947: CALL_OW 517
 951: ST_TO_ADDR
// hexesM := AreaToList ( mechArea , 0 ) ;
 952: LD_ADDR_VAR 0 9
 956: PUSH
 957: LD_VAR 0 3
 961: PPUSH
 962: LD_INT 0
 964: PPUSH
 965: CALL_OW 517
 969: ST_TO_ADDR
// hexesSc := AreaToList ( sciArea , 0 ) ;
 970: LD_ADDR_VAR 0 10
 974: PUSH
 975: LD_VAR 0 4
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 517
 987: ST_TO_ADDR
// for i := 1 to Count ( group ) do
 988: LD_ADDR_VAR 0 6
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_VAR 0 1
1002: PPUSH
1003: CALL 4098 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1433
// begin class := GetClass ( group [ i ] ) ;
1011: LD_ADDR_VAR 0 7
1015: PUSH
1016: LD_VAR 0 1
1020: PUSH
1021: LD_VAR 0 6
1025: ARRAY
1026: PPUSH
1027: CALL_OW 257
1031: ST_TO_ADDR
// if class = 1 then
1032: LD_VAR 0 7
1036: PUSH
1037: LD_INT 1
1039: EQUAL
1040: IFFALSE 1165
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesS [ 1 ] [ 1 ] , hexesS [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1042: LD_INT 1
1044: PPUSH
1045: LD_VAR 0 1
1049: PUSH
1050: LD_VAR 0 6
1054: ARRAY
1055: PPUSH
1056: LD_VAR 0 8
1060: PUSH
1061: LD_INT 1
1063: ARRAY
1064: PUSH
1065: LD_INT 1
1067: ARRAY
1068: PPUSH
1069: LD_VAR 0 8
1073: PUSH
1074: LD_INT 2
1076: ARRAY
1077: PUSH
1078: LD_INT 1
1080: ARRAY
1081: PPUSH
1082: LD_INT 202
1084: PPUSH
1085: LD_INT 49
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 595
// hexesS := Replace ( hexesS , 1 , Delete ( hexesS [ 1 ] , 1 ) ) ;
1095: LD_ADDR_VAR 0 8
1099: PUSH
1100: LD_VAR 0 8
1104: PPUSH
1105: LD_INT 1
1107: PPUSH
1108: LD_VAR 0 8
1112: PUSH
1113: LD_INT 1
1115: ARRAY
1116: PPUSH
1117: LD_INT 1
1119: PPUSH
1120: CALL_OW 3
1124: PPUSH
1125: CALL_OW 1
1129: ST_TO_ADDR
// hexesS := Replace ( hexesS , 2 , Delete ( hexesS [ 2 ] , 1 ) ) ;
1130: LD_ADDR_VAR 0 8
1134: PUSH
1135: LD_VAR 0 8
1139: PPUSH
1140: LD_INT 2
1142: PPUSH
1143: LD_VAR 0 8
1147: PUSH
1148: LD_INT 2
1150: ARRAY
1151: PPUSH
1152: LD_INT 1
1154: PPUSH
1155: CALL_OW 3
1159: PPUSH
1160: CALL_OW 1
1164: ST_TO_ADDR
// end ; if class = 3 then
1165: LD_VAR 0 7
1169: PUSH
1170: LD_INT 3
1172: EQUAL
1173: IFFALSE 1298
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesM [ 1 ] [ 1 ] , hexesM [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1175: LD_INT 1
1177: PPUSH
1178: LD_VAR 0 1
1182: PUSH
1183: LD_VAR 0 6
1187: ARRAY
1188: PPUSH
1189: LD_VAR 0 9
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PUSH
1198: LD_INT 1
1200: ARRAY
1201: PPUSH
1202: LD_VAR 0 9
1206: PUSH
1207: LD_INT 2
1209: ARRAY
1210: PUSH
1211: LD_INT 1
1213: ARRAY
1214: PPUSH
1215: LD_INT 202
1217: PPUSH
1218: LD_INT 49
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 595
// hexesM := Replace ( hexesM , 1 , Delete ( hexesM [ 1 ] , 1 ) ) ;
1228: LD_ADDR_VAR 0 9
1232: PUSH
1233: LD_VAR 0 9
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_VAR 0 9
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: LD_INT 1
1252: PPUSH
1253: CALL_OW 3
1257: PPUSH
1258: CALL_OW 1
1262: ST_TO_ADDR
// hexesM := Replace ( hexesM , 2 , Delete ( hexesM [ 2 ] , 1 ) ) ;
1263: LD_ADDR_VAR 0 9
1267: PUSH
1268: LD_VAR 0 9
1272: PPUSH
1273: LD_INT 2
1275: PPUSH
1276: LD_VAR 0 9
1280: PUSH
1281: LD_INT 2
1283: ARRAY
1284: PPUSH
1285: LD_INT 1
1287: PPUSH
1288: CALL_OW 3
1292: PPUSH
1293: CALL_OW 1
1297: ST_TO_ADDR
// end ; if class = 4 then
1298: LD_VAR 0 7
1302: PUSH
1303: LD_INT 4
1305: EQUAL
1306: IFFALSE 1431
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesSc [ 1 ] [ 1 ] , hexesSc [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1308: LD_INT 1
1310: PPUSH
1311: LD_VAR 0 1
1315: PUSH
1316: LD_VAR 0 6
1320: ARRAY
1321: PPUSH
1322: LD_VAR 0 10
1326: PUSH
1327: LD_INT 1
1329: ARRAY
1330: PUSH
1331: LD_INT 1
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 10
1339: PUSH
1340: LD_INT 2
1342: ARRAY
1343: PUSH
1344: LD_INT 1
1346: ARRAY
1347: PPUSH
1348: LD_INT 202
1350: PPUSH
1351: LD_INT 49
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 595
// hexesSc := Replace ( hexesSc , 1 , Delete ( hexesSc [ 1 ] , 1 ) ) ;
1361: LD_ADDR_VAR 0 10
1365: PUSH
1366: LD_VAR 0 10
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: LD_VAR 0 10
1378: PUSH
1379: LD_INT 1
1381: ARRAY
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 3
1390: PPUSH
1391: CALL_OW 1
1395: ST_TO_ADDR
// hexesSc := Replace ( hexesSc , 2 , Delete ( hexesSc [ 2 ] , 1 ) ) ;
1396: LD_ADDR_VAR 0 10
1400: PUSH
1401: LD_VAR 0 10
1405: PPUSH
1406: LD_INT 2
1408: PPUSH
1409: LD_VAR 0 10
1413: PUSH
1414: LD_INT 2
1416: ARRAY
1417: PPUSH
1418: LD_INT 1
1420: PPUSH
1421: CALL_OW 3
1425: PPUSH
1426: CALL_OW 1
1430: ST_TO_ADDR
// end ; end ;
1431: GO 1008
1433: POP
1434: POP
// end ; end_of_file
1435: LD_VAR 0 5
1439: RET
// export function Action ; var i ; begin
1440: LD_INT 0
1442: PPUSH
1443: PPUSH
// Video ( true ) ;
1444: LD_INT 1
1446: PPUSH
1447: CALL 40002 0 1
// wait ( 0 0$2 ) ;
1451: LD_INT 70
1453: PPUSH
1454: CALL_OW 67
// CenterOnXY ( 106 , 151 ) ;
1458: LD_INT 106
1460: PPUSH
1461: LD_INT 151
1463: PPUSH
1464: CALL_OW 84
// wait ( 0 0$2 ) ;
1468: LD_INT 70
1470: PPUSH
1471: CALL_OW 67
// CenterOnXY ( 32 , 23 ) ;
1475: LD_INT 32
1477: PPUSH
1478: LD_INT 23
1480: PPUSH
1481: CALL_OW 84
// wait ( 0 0$2 ) ;
1485: LD_INT 70
1487: PPUSH
1488: CALL_OW 67
// CenterOnXY ( 128 , 16 ) ;
1492: LD_INT 128
1494: PPUSH
1495: LD_INT 16
1497: PPUSH
1498: CALL_OW 84
// wait ( 60 ) ;
1502: LD_INT 60
1504: PPUSH
1505: CALL_OW 67
// CenterOnXY ( 172 , 47 ) ;
1509: LD_INT 172
1511: PPUSH
1512: LD_INT 47
1514: PPUSH
1515: CALL_OW 84
// stop_talking := true ;
1519: LD_ADDR_OWVAR 56
1523: PUSH
1524: LD_INT 1
1526: ST_TO_ADDR
// Say ( Botvinov , D1i-Off1-1 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1i-Off1-1
1534: PPUSH
1535: CALL_OW 88
// for i in group1 ^ group2 ^ group3 do
1539: LD_ADDR_VAR 0 2
1543: PUSH
1544: LD_EXP 4
1548: PUSH
1549: LD_EXP 5
1553: ADD
1554: PUSH
1555: LD_EXP 6
1559: ADD
1560: PUSH
1561: FOR_IN
1562: IFFALSE 1581
// ComTurnXY ( i , 202 , 49 ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: LD_INT 202
1571: PPUSH
1572: LD_INT 49
1574: PPUSH
1575: CALL_OW 118
1579: GO 1561
1581: POP
1582: POP
// wait ( 10 ) ;
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 67
// Say ( Szyski , D1i-Off2-1 ) ;
1590: LD_EXP 2
1594: PPUSH
1595: LD_STRING D1i-Off2-1
1597: PPUSH
1598: CALL_OW 88
// Say ( Botvinov , D1i-Off1-2 ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_STRING D1i-Off1-2
1609: PPUSH
1610: CALL_OW 88
// FormGroup ( group1 , gs1 , gm1 , gsc1 ) ;
1614: LD_EXP 4
1618: PPUSH
1619: LD_INT 9
1621: PPUSH
1622: LD_INT 12
1624: PPUSH
1625: LD_INT 15
1627: PPUSH
1628: CALL 917 0 4
// FormGroup ( group2 , gs2 , gm2 , gsc2 ) ;
1632: LD_EXP 5
1636: PPUSH
1637: LD_INT 10
1639: PPUSH
1640: LD_INT 13
1642: PPUSH
1643: LD_INT 16
1645: PPUSH
1646: CALL 917 0 4
// FormGroup ( group3 , gs3 , gm3 , gsc3 ) ;
1650: LD_EXP 6
1654: PPUSH
1655: LD_INT 11
1657: PPUSH
1658: LD_INT 14
1660: PPUSH
1661: LD_INT 17
1663: PPUSH
1664: CALL 917 0 4
// wait ( 0 0$5 ) ;
1668: LD_INT 175
1670: PPUSH
1671: CALL_OW 67
// Say ( Szyski , D1i-Off2-2 ) ;
1675: LD_EXP 2
1679: PPUSH
1680: LD_STRING D1i-Off2-2
1682: PPUSH
1683: CALL_OW 88
// Say ( Botvinov , D1i-Off1-3 ) ;
1687: LD_EXP 1
1691: PPUSH
1692: LD_STRING D1i-Off1-3
1694: PPUSH
1695: CALL_OW 88
// SayEffect ( DStart-All ) ;
1699: LD_STRING DStart-All
1701: PPUSH
1702: CALL_OW 96
// wait ( 50 ) ;
1706: LD_INT 50
1708: PPUSH
1709: CALL_OW 67
// stop_talking := false ;
1713: LD_ADDR_OWVAR 56
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// for i in SortByDistanceUnit ( eon , group1 , true , true ) do
1721: LD_ADDR_VAR 0 2
1725: PUSH
1726: LD_INT 4
1728: PPUSH
1729: LD_EXP 4
1733: PPUSH
1734: LD_INT 1
1736: PPUSH
1737: LD_INT 1
1739: PPUSH
1740: CALL 7417 0 4
1744: PUSH
1745: FOR_IN
1746: IFFALSE 1769
// begin ComEnterUnit ( i , eon ) ;
1748: LD_VAR 0 2
1752: PPUSH
1753: LD_INT 4
1755: PPUSH
1756: CALL_OW 120
// wait ( 55 ) ;
1760: LD_INT 55
1762: PPUSH
1763: CALL_OW 67
// end ;
1767: GO 1745
1769: POP
1770: POP
// end ; end_of_file
1771: LD_VAR 0 1
1775: RET
// on SailEventCustom ( e , p1 , p2 , p3 , p4 , p5 , p6 ) do begin repeat ComMoveXY ( p1 , p2 , p3 ) ;
1776: LD_VAR 0 2
1780: PPUSH
1781: LD_VAR 0 3
1785: PPUSH
1786: LD_VAR 0 4
1790: PPUSH
1791: CALL_OW 111
// wait ( 3 ) ;
1795: LD_INT 3
1797: PPUSH
1798: CALL_OW 67
// until IsAt ( p1 , p2 , p3 ) ;
1802: LD_VAR 0 2
1806: PPUSH
1807: LD_VAR 0 3
1811: PPUSH
1812: LD_VAR 0 4
1816: PPUSH
1817: CALL_OW 307
1821: IFFALSE 1776
// ComTurnXY ( p1 , p4 , p5 ) ;
1823: LD_VAR 0 2
1827: PPUSH
1828: LD_VAR 0 5
1832: PPUSH
1833: LD_VAR 0 6
1837: PPUSH
1838: CALL_OW 118
// end ;
1842: PPOPN 7
1844: END
// on EnterBuilding ( building , unit ) do begin if unit = Burlak then
1845: LD_VAR 0 2
1849: PUSH
1850: LD_EXP 3
1854: EQUAL
1855: IFFALSE 1874
// begin wait ( 20 ) ;
1857: LD_INT 20
1859: PPUSH
1860: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1864: LD_INT 1
1866: PPUSH
1867: LD_STRING %_cont
1869: PPUSH
1870: CALL_OW 340
// end ; end ;
1874: PPOPN 2
1876: END
// on DialogueSkipped ( value ) do begin stop_talking := false ;
1877: LD_ADDR_OWVAR 56
1881: PUSH
1882: LD_INT 0
1884: ST_TO_ADDR
// ChangeMap ( 1 , %_cont ) ;
1885: LD_INT 1
1887: PPUSH
1888: LD_STRING %_cont
1890: PPUSH
1891: CALL_OW 340
// end ; end_of_file
1895: PPOPN 1
1897: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1898: LD_INT 0
1900: PPUSH
1901: PPUSH
// if exist_mode then
1902: LD_VAR 0 2
1906: IFFALSE 1952
// begin unit := CreateCharacter ( prefix & ident ) ;
1908: LD_ADDR_VAR 0 5
1912: PUSH
1913: LD_VAR 0 3
1917: PUSH
1918: LD_VAR 0 1
1922: STR
1923: PPUSH
1924: CALL_OW 34
1928: ST_TO_ADDR
// if unit then
1929: LD_VAR 0 5
1933: IFFALSE 1950
// DeleteCharacters ( prefix & ident ) ;
1935: LD_VAR 0 3
1939: PUSH
1940: LD_VAR 0 1
1944: STR
1945: PPUSH
1946: CALL_OW 40
// end else
1950: GO 1967
// unit := NewCharacter ( ident ) ;
1952: LD_ADDR_VAR 0 5
1956: PUSH
1957: LD_VAR 0 1
1961: PPUSH
1962: CALL_OW 25
1966: ST_TO_ADDR
// result := unit ;
1967: LD_ADDR_VAR 0 4
1971: PUSH
1972: LD_VAR 0 5
1976: ST_TO_ADDR
// end ;
1977: LD_VAR 0 4
1981: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1982: LD_INT 0
1984: PPUSH
1985: PPUSH
// if exist_mode then
1986: LD_VAR 0 2
1990: IFFALSE 2015
// unit := CreateCharacter ( prefix & ident ) else
1992: LD_ADDR_VAR 0 5
1996: PUSH
1997: LD_VAR 0 3
2001: PUSH
2002: LD_VAR 0 1
2006: STR
2007: PPUSH
2008: CALL_OW 34
2012: ST_TO_ADDR
2013: GO 2030
// unit := NewCharacter ( ident ) ;
2015: LD_ADDR_VAR 0 5
2019: PUSH
2020: LD_VAR 0 1
2024: PPUSH
2025: CALL_OW 25
2029: ST_TO_ADDR
// result := unit ;
2030: LD_ADDR_VAR 0 4
2034: PUSH
2035: LD_VAR 0 5
2039: ST_TO_ADDR
// end ;
2040: LD_VAR 0 4
2044: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2045: LD_INT 0
2047: PPUSH
2048: PPUSH
// if not side or not nation then
2049: LD_VAR 0 1
2053: NOT
2054: IFTRUE 2063
2056: PUSH
2057: LD_VAR 0 2
2061: NOT
2062: OR
2063: IFFALSE 2067
// exit ;
2065: GO 2837
// case nation of nation_american :
2067: LD_VAR 0 2
2071: PUSH
2072: LD_INT 1
2074: DOUBLE
2075: EQUAL
2076: IFTRUE 2080
2078: GO 2294
2080: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2081: LD_ADDR_VAR 0 4
2085: PUSH
2086: LD_INT 35
2088: PUSH
2089: LD_INT 45
2091: PUSH
2092: LD_INT 46
2094: PUSH
2095: LD_INT 47
2097: PUSH
2098: LD_INT 82
2100: PUSH
2101: LD_INT 83
2103: PUSH
2104: LD_INT 84
2106: PUSH
2107: LD_INT 85
2109: PUSH
2110: LD_INT 86
2112: PUSH
2113: LD_INT 1
2115: PUSH
2116: LD_INT 2
2118: PUSH
2119: LD_INT 6
2121: PUSH
2122: LD_INT 15
2124: PUSH
2125: LD_INT 16
2127: PUSH
2128: LD_INT 7
2130: PUSH
2131: LD_INT 12
2133: PUSH
2134: LD_INT 13
2136: PUSH
2137: LD_INT 10
2139: PUSH
2140: LD_INT 14
2142: PUSH
2143: LD_INT 20
2145: PUSH
2146: LD_INT 21
2148: PUSH
2149: LD_INT 22
2151: PUSH
2152: LD_INT 25
2154: PUSH
2155: LD_INT 32
2157: PUSH
2158: LD_INT 27
2160: PUSH
2161: LD_INT 36
2163: PUSH
2164: LD_INT 69
2166: PUSH
2167: LD_INT 39
2169: PUSH
2170: LD_INT 34
2172: PUSH
2173: LD_INT 40
2175: PUSH
2176: LD_INT 48
2178: PUSH
2179: LD_INT 49
2181: PUSH
2182: LD_INT 50
2184: PUSH
2185: LD_INT 51
2187: PUSH
2188: LD_INT 52
2190: PUSH
2191: LD_INT 53
2193: PUSH
2194: LD_INT 54
2196: PUSH
2197: LD_INT 55
2199: PUSH
2200: LD_INT 56
2202: PUSH
2203: LD_INT 57
2205: PUSH
2206: LD_INT 58
2208: PUSH
2209: LD_INT 59
2211: PUSH
2212: LD_INT 60
2214: PUSH
2215: LD_INT 61
2217: PUSH
2218: LD_INT 62
2220: PUSH
2221: LD_INT 80
2223: PUSH
2224: LD_INT 82
2226: PUSH
2227: LD_INT 83
2229: PUSH
2230: LD_INT 84
2232: PUSH
2233: LD_INT 85
2235: PUSH
2236: LD_INT 86
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: ST_TO_ADDR
2292: GO 2759
2294: LD_INT 2
2296: DOUBLE
2297: EQUAL
2298: IFTRUE 2302
2300: GO 2528
2302: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2303: LD_ADDR_VAR 0 4
2307: PUSH
2308: LD_INT 35
2310: PUSH
2311: LD_INT 45
2313: PUSH
2314: LD_INT 46
2316: PUSH
2317: LD_INT 47
2319: PUSH
2320: LD_INT 82
2322: PUSH
2323: LD_INT 83
2325: PUSH
2326: LD_INT 84
2328: PUSH
2329: LD_INT 85
2331: PUSH
2332: LD_INT 87
2334: PUSH
2335: LD_INT 70
2337: PUSH
2338: LD_INT 1
2340: PUSH
2341: LD_INT 11
2343: PUSH
2344: LD_INT 3
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: LD_INT 5
2352: PUSH
2353: LD_INT 6
2355: PUSH
2356: LD_INT 15
2358: PUSH
2359: LD_INT 18
2361: PUSH
2362: LD_INT 7
2364: PUSH
2365: LD_INT 17
2367: PUSH
2368: LD_INT 8
2370: PUSH
2371: LD_INT 20
2373: PUSH
2374: LD_INT 21
2376: PUSH
2377: LD_INT 22
2379: PUSH
2380: LD_INT 72
2382: PUSH
2383: LD_INT 26
2385: PUSH
2386: LD_INT 69
2388: PUSH
2389: LD_INT 39
2391: PUSH
2392: LD_INT 40
2394: PUSH
2395: LD_INT 41
2397: PUSH
2398: LD_INT 42
2400: PUSH
2401: LD_INT 43
2403: PUSH
2404: LD_INT 48
2406: PUSH
2407: LD_INT 49
2409: PUSH
2410: LD_INT 50
2412: PUSH
2413: LD_INT 51
2415: PUSH
2416: LD_INT 52
2418: PUSH
2419: LD_INT 53
2421: PUSH
2422: LD_INT 54
2424: PUSH
2425: LD_INT 55
2427: PUSH
2428: LD_INT 56
2430: PUSH
2431: LD_INT 60
2433: PUSH
2434: LD_INT 61
2436: PUSH
2437: LD_INT 62
2439: PUSH
2440: LD_INT 66
2442: PUSH
2443: LD_INT 67
2445: PUSH
2446: LD_INT 68
2448: PUSH
2449: LD_INT 81
2451: PUSH
2452: LD_INT 82
2454: PUSH
2455: LD_INT 83
2457: PUSH
2458: LD_INT 84
2460: PUSH
2461: LD_INT 85
2463: PUSH
2464: LD_INT 87
2466: PUSH
2467: LD_INT 88
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: ST_TO_ADDR
2526: GO 2759
2528: LD_INT 3
2530: DOUBLE
2531: EQUAL
2532: IFTRUE 2536
2534: GO 2758
2536: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: LD_INT 46
2544: PUSH
2545: LD_INT 47
2547: PUSH
2548: LD_INT 1
2550: PUSH
2551: LD_INT 2
2553: PUSH
2554: LD_INT 82
2556: PUSH
2557: LD_INT 83
2559: PUSH
2560: LD_INT 84
2562: PUSH
2563: LD_INT 85
2565: PUSH
2566: LD_INT 86
2568: PUSH
2569: LD_INT 11
2571: PUSH
2572: LD_INT 9
2574: PUSH
2575: LD_INT 20
2577: PUSH
2578: LD_INT 19
2580: PUSH
2581: LD_INT 21
2583: PUSH
2584: LD_INT 24
2586: PUSH
2587: LD_INT 22
2589: PUSH
2590: LD_INT 25
2592: PUSH
2593: LD_INT 28
2595: PUSH
2596: LD_INT 29
2598: PUSH
2599: LD_INT 30
2601: PUSH
2602: LD_INT 31
2604: PUSH
2605: LD_INT 37
2607: PUSH
2608: LD_INT 38
2610: PUSH
2611: LD_INT 32
2613: PUSH
2614: LD_INT 27
2616: PUSH
2617: LD_INT 33
2619: PUSH
2620: LD_INT 69
2622: PUSH
2623: LD_INT 39
2625: PUSH
2626: LD_INT 34
2628: PUSH
2629: LD_INT 40
2631: PUSH
2632: LD_INT 71
2634: PUSH
2635: LD_INT 23
2637: PUSH
2638: LD_INT 44
2640: PUSH
2641: LD_INT 48
2643: PUSH
2644: LD_INT 49
2646: PUSH
2647: LD_INT 50
2649: PUSH
2650: LD_INT 51
2652: PUSH
2653: LD_INT 52
2655: PUSH
2656: LD_INT 53
2658: PUSH
2659: LD_INT 54
2661: PUSH
2662: LD_INT 55
2664: PUSH
2665: LD_INT 56
2667: PUSH
2668: LD_INT 57
2670: PUSH
2671: LD_INT 58
2673: PUSH
2674: LD_INT 59
2676: PUSH
2677: LD_INT 63
2679: PUSH
2680: LD_INT 64
2682: PUSH
2683: LD_INT 65
2685: PUSH
2686: LD_INT 82
2688: PUSH
2689: LD_INT 83
2691: PUSH
2692: LD_INT 84
2694: PUSH
2695: LD_INT 85
2697: PUSH
2698: LD_INT 86
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: ST_TO_ADDR
2756: GO 2759
2758: POP
// if state > - 1 and state < 3 then
2759: LD_VAR 0 3
2763: PUSH
2764: LD_INT 1
2766: NEG
2767: GREATER
2768: IFFALSE 2780
2770: PUSH
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 3
2778: LESS
2779: AND
2780: IFFALSE 2837
// for i in result do
2782: LD_ADDR_VAR 0 5
2786: PUSH
2787: LD_VAR 0 4
2791: PUSH
2792: FOR_IN
2793: IFFALSE 2835
// if GetTech ( i , side ) <> state then
2795: LD_VAR 0 5
2799: PPUSH
2800: LD_VAR 0 1
2804: PPUSH
2805: CALL_OW 321
2809: PUSH
2810: LD_VAR 0 3
2814: NONEQUAL
2815: IFFALSE 2833
// result := result diff i ;
2817: LD_ADDR_VAR 0 4
2821: PUSH
2822: LD_VAR 0 4
2826: PUSH
2827: LD_VAR 0 5
2831: DIFF
2832: ST_TO_ADDR
2833: GO 2792
2835: POP
2836: POP
// end ;
2837: LD_VAR 0 4
2841: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2842: LD_INT 0
2844: PPUSH
2845: PPUSH
2846: PPUSH
// result := true ;
2847: LD_ADDR_VAR 0 3
2851: PUSH
2852: LD_INT 1
2854: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2855: LD_ADDR_VAR 0 5
2859: PUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: CALL_OW 480
2869: ST_TO_ADDR
// if not tmp then
2870: LD_VAR 0 5
2874: NOT
2875: IFFALSE 2879
// exit ;
2877: GO 2928
// for i in tmp do
2879: LD_ADDR_VAR 0 4
2883: PUSH
2884: LD_VAR 0 5
2888: PUSH
2889: FOR_IN
2890: IFFALSE 2926
// if GetTech ( i , side ) <> state_researched then
2892: LD_VAR 0 4
2896: PPUSH
2897: LD_VAR 0 1
2901: PPUSH
2902: CALL_OW 321
2906: PUSH
2907: LD_INT 2
2909: NONEQUAL
2910: IFFALSE 2924
// begin result := false ;
2912: LD_ADDR_VAR 0 3
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// exit ;
2920: POP
2921: POP
2922: GO 2928
// end ;
2924: GO 2889
2926: POP
2927: POP
// end ;
2928: LD_VAR 0 3
2932: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2933: LD_INT 0
2935: PPUSH
2936: PPUSH
2937: PPUSH
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
2945: PPUSH
2946: PPUSH
2947: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2948: LD_VAR 0 1
2952: NOT
2953: IFTRUE 2970
2955: PUSH
2956: LD_VAR 0 1
2960: PPUSH
2961: CALL_OW 257
2965: PUSH
2966: LD_INT 9
2968: NONEQUAL
2969: OR
2970: IFFALSE 2974
// exit ;
2972: GO 3553
// side := GetSide ( unit ) ;
2974: LD_ADDR_VAR 0 9
2978: PUSH
2979: LD_VAR 0 1
2983: PPUSH
2984: CALL_OW 255
2988: ST_TO_ADDR
// tech_space := tech_spacanom ;
2989: LD_ADDR_VAR 0 12
2993: PUSH
2994: LD_INT 29
2996: ST_TO_ADDR
// tech_time := tech_taurad ;
2997: LD_ADDR_VAR 0 13
3001: PUSH
3002: LD_INT 28
3004: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3005: LD_ADDR_VAR 0 11
3009: PUSH
3010: LD_VAR 0 1
3014: PPUSH
3015: CALL_OW 310
3019: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3020: LD_VAR 0 11
3024: PPUSH
3025: CALL_OW 247
3029: PUSH
3030: LD_INT 2
3032: EQUAL
3033: IFFALSE 3037
// exit ;
3035: GO 3553
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3037: LD_ADDR_VAR 0 8
3041: PUSH
3042: LD_INT 81
3044: PUSH
3045: LD_VAR 0 9
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: PUSH
3054: LD_INT 3
3056: PUSH
3057: LD_INT 21
3059: PUSH
3060: LD_INT 3
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PPUSH
3075: CALL_OW 69
3079: ST_TO_ADDR
// if not tmp then
3080: LD_VAR 0 8
3084: NOT
3085: IFFALSE 3089
// exit ;
3087: GO 3553
// if in_unit then
3089: LD_VAR 0 11
3093: IFFALSE 3117
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3095: LD_ADDR_VAR 0 10
3099: PUSH
3100: LD_VAR 0 8
3104: PPUSH
3105: LD_VAR 0 11
3109: PPUSH
3110: CALL_OW 74
3114: ST_TO_ADDR
3115: GO 3137
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3117: LD_ADDR_VAR 0 10
3121: PUSH
3122: LD_VAR 0 8
3126: PPUSH
3127: LD_VAR 0 1
3131: PPUSH
3132: CALL_OW 74
3136: ST_TO_ADDR
// if not enemy then
3137: LD_VAR 0 10
3141: NOT
3142: IFFALSE 3146
// exit ;
3144: GO 3553
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3146: LD_VAR 0 11
3150: IFFALSE 3172
3152: PUSH
3153: LD_VAR 0 11
3157: PPUSH
3158: LD_VAR 0 10
3162: PPUSH
3163: CALL_OW 296
3167: PUSH
3168: LD_INT 13
3170: GREATER
3171: AND
3172: IFTRUE 3194
3174: PUSH
3175: LD_VAR 0 1
3179: PPUSH
3180: LD_VAR 0 10
3184: PPUSH
3185: CALL_OW 296
3189: PUSH
3190: LD_INT 12
3192: GREATER
3193: OR
3194: IFFALSE 3198
// exit ;
3196: GO 3553
// missile := [ 1 ] ;
3198: LD_ADDR_VAR 0 14
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3209: LD_VAR 0 9
3213: PPUSH
3214: LD_VAR 0 12
3218: PPUSH
3219: CALL_OW 325
3223: IFFALSE 3252
// missile := Replace ( missile , missile + 1 , 2 ) ;
3225: LD_ADDR_VAR 0 14
3229: PUSH
3230: LD_VAR 0 14
3234: PPUSH
3235: LD_VAR 0 14
3239: PUSH
3240: LD_INT 1
3242: PLUS
3243: PPUSH
3244: LD_INT 2
3246: PPUSH
3247: CALL_OW 1
3251: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3252: LD_VAR 0 9
3256: PPUSH
3257: LD_VAR 0 13
3261: PPUSH
3262: CALL_OW 325
3266: IFFALSE 3290
3268: PUSH
3269: LD_VAR 0 10
3273: PPUSH
3274: CALL_OW 255
3278: PPUSH
3279: LD_VAR 0 13
3283: PPUSH
3284: CALL_OW 325
3288: NOT
3289: AND
3290: IFFALSE 3319
// missile := Replace ( missile , missile + 1 , 3 ) ;
3292: LD_ADDR_VAR 0 14
3296: PUSH
3297: LD_VAR 0 14
3301: PPUSH
3302: LD_VAR 0 14
3306: PUSH
3307: LD_INT 1
3309: PLUS
3310: PPUSH
3311: LD_INT 3
3313: PPUSH
3314: CALL_OW 1
3318: ST_TO_ADDR
// if missile < 2 then
3319: LD_VAR 0 14
3323: PUSH
3324: LD_INT 2
3326: LESS
3327: IFFALSE 3331
// exit ;
3329: GO 3553
// x := GetX ( enemy ) ;
3331: LD_ADDR_VAR 0 4
3335: PUSH
3336: LD_VAR 0 10
3340: PPUSH
3341: CALL_OW 250
3345: ST_TO_ADDR
// y := GetY ( enemy ) ;
3346: LD_ADDR_VAR 0 5
3350: PUSH
3351: LD_VAR 0 10
3355: PPUSH
3356: CALL_OW 251
3360: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3361: LD_ADDR_VAR 0 6
3365: PUSH
3366: LD_VAR 0 4
3370: PUSH
3371: LD_INT 1
3373: NEG
3374: PPUSH
3375: LD_INT 1
3377: PPUSH
3378: CALL_OW 12
3382: PLUS
3383: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3384: LD_ADDR_VAR 0 7
3388: PUSH
3389: LD_VAR 0 5
3393: PUSH
3394: LD_INT 1
3396: NEG
3397: PPUSH
3398: LD_INT 1
3400: PPUSH
3401: CALL_OW 12
3405: PLUS
3406: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3407: LD_VAR 0 6
3411: PPUSH
3412: LD_VAR 0 7
3416: PPUSH
3417: CALL_OW 488
3421: NOT
3422: IFFALSE 3444
// begin _x := x ;
3424: LD_ADDR_VAR 0 6
3428: PUSH
3429: LD_VAR 0 4
3433: ST_TO_ADDR
// _y := y ;
3434: LD_ADDR_VAR 0 7
3438: PUSH
3439: LD_VAR 0 5
3443: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3444: LD_ADDR_VAR 0 3
3448: PUSH
3449: LD_INT 1
3451: PPUSH
3452: LD_VAR 0 14
3456: PPUSH
3457: CALL_OW 12
3461: ST_TO_ADDR
// case i of 1 :
3462: LD_VAR 0 3
3466: PUSH
3467: LD_INT 1
3469: DOUBLE
3470: EQUAL
3471: IFTRUE 3475
3473: GO 3492
3475: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3476: LD_VAR 0 1
3480: PPUSH
3481: LD_VAR 0 10
3485: PPUSH
3486: CALL_OW 115
3490: GO 3553
3492: LD_INT 2
3494: DOUBLE
3495: EQUAL
3496: IFTRUE 3500
3498: GO 3522
3500: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3501: LD_VAR 0 1
3505: PPUSH
3506: LD_VAR 0 6
3510: PPUSH
3511: LD_VAR 0 7
3515: PPUSH
3516: CALL_OW 153
3520: GO 3553
3522: LD_INT 3
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3552
3530: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3531: LD_VAR 0 1
3535: PPUSH
3536: LD_VAR 0 6
3540: PPUSH
3541: LD_VAR 0 7
3545: PPUSH
3546: CALL_OW 154
3550: GO 3553
3552: POP
// end ;
3553: LD_VAR 0 2
3557: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
3565: PPUSH
// if not unit or not building then
3566: LD_VAR 0 1
3570: NOT
3571: IFTRUE 3580
3573: PUSH
3574: LD_VAR 0 2
3578: NOT
3579: OR
3580: IFFALSE 3584
// exit ;
3582: GO 3742
// x := GetX ( building ) ;
3584: LD_ADDR_VAR 0 5
3588: PUSH
3589: LD_VAR 0 2
3593: PPUSH
3594: CALL_OW 250
3598: ST_TO_ADDR
// y := GetY ( building ) ;
3599: LD_ADDR_VAR 0 6
3603: PUSH
3604: LD_VAR 0 2
3608: PPUSH
3609: CALL_OW 251
3613: ST_TO_ADDR
// for i := 0 to 5 do
3614: LD_ADDR_VAR 0 4
3618: PUSH
3619: DOUBLE
3620: LD_INT 0
3622: DEC
3623: ST_TO_ADDR
3624: LD_INT 5
3626: PUSH
3627: FOR_TO
3628: IFFALSE 3740
// begin _x := ShiftX ( x , i , 3 ) ;
3630: LD_ADDR_VAR 0 7
3634: PUSH
3635: LD_VAR 0 5
3639: PPUSH
3640: LD_VAR 0 4
3644: PPUSH
3645: LD_INT 3
3647: PPUSH
3648: CALL_OW 272
3652: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3653: LD_ADDR_VAR 0 8
3657: PUSH
3658: LD_VAR 0 6
3662: PPUSH
3663: LD_VAR 0 4
3667: PPUSH
3668: LD_INT 3
3670: PPUSH
3671: CALL_OW 273
3675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3676: LD_VAR 0 7
3680: PPUSH
3681: LD_VAR 0 8
3685: PPUSH
3686: CALL_OW 488
3690: NOT
3691: IFFALSE 3695
// continue ;
3693: GO 3627
// if HexInfo ( _x , _y ) = 0 then
3695: LD_VAR 0 7
3699: PPUSH
3700: LD_VAR 0 8
3704: PPUSH
3705: CALL_OW 428
3709: PUSH
3710: LD_INT 0
3712: EQUAL
3713: IFFALSE 3738
// begin ComMoveXY ( unit , _x , _y ) ;
3715: LD_VAR 0 1
3719: PPUSH
3720: LD_VAR 0 7
3724: PPUSH
3725: LD_VAR 0 8
3729: PPUSH
3730: CALL_OW 111
// exit ;
3734: POP
3735: POP
3736: GO 3742
// end ; end ;
3738: GO 3627
3740: POP
3741: POP
// end ;
3742: LD_VAR 0 3
3746: RET
// export function ScanBase ( side , base_area ) ; begin
3747: LD_INT 0
3749: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3750: LD_ADDR_VAR 0 3
3754: PUSH
3755: LD_VAR 0 2
3759: PPUSH
3760: LD_INT 81
3762: PUSH
3763: LD_VAR 0 1
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: PPUSH
3772: CALL_OW 70
3776: ST_TO_ADDR
// end ;
3777: LD_VAR 0 3
3781: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3782: LD_INT 0
3784: PPUSH
3785: PPUSH
3786: PPUSH
3787: PPUSH
// result := false ;
3788: LD_ADDR_VAR 0 2
3792: PUSH
3793: LD_INT 0
3795: ST_TO_ADDR
// side := GetSide ( unit ) ;
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: LD_VAR 0 1
3805: PPUSH
3806: CALL_OW 255
3810: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3811: LD_ADDR_VAR 0 4
3815: PUSH
3816: LD_VAR 0 1
3820: PPUSH
3821: CALL_OW 248
3825: ST_TO_ADDR
// case nat of 1 :
3826: LD_VAR 0 4
3830: PUSH
3831: LD_INT 1
3833: DOUBLE
3834: EQUAL
3835: IFTRUE 3839
3837: GO 3850
3839: POP
// tech := tech_lassight ; 2 :
3840: LD_ADDR_VAR 0 5
3844: PUSH
3845: LD_INT 12
3847: ST_TO_ADDR
3848: GO 3889
3850: LD_INT 2
3852: DOUBLE
3853: EQUAL
3854: IFTRUE 3858
3856: GO 3869
3858: POP
// tech := tech_mortar ; 3 :
3859: LD_ADDR_VAR 0 5
3863: PUSH
3864: LD_INT 41
3866: ST_TO_ADDR
3867: GO 3889
3869: LD_INT 3
3871: DOUBLE
3872: EQUAL
3873: IFTRUE 3877
3875: GO 3888
3877: POP
// tech := tech_bazooka ; end ;
3878: LD_ADDR_VAR 0 5
3882: PUSH
3883: LD_INT 44
3885: ST_TO_ADDR
3886: GO 3889
3888: POP
// if Researched ( side , tech ) then
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_VAR 0 5
3898: PPUSH
3899: CALL_OW 325
3903: IFFALSE 3930
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3905: LD_ADDR_VAR 0 2
3909: PUSH
3910: LD_INT 5
3912: PUSH
3913: LD_INT 8
3915: PUSH
3916: LD_INT 9
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: LIST
3923: PUSH
3924: LD_VAR 0 4
3928: ARRAY
3929: ST_TO_ADDR
// end ;
3930: LD_VAR 0 2
3934: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3935: LD_INT 0
3937: PPUSH
3938: PPUSH
3939: PPUSH
// if not mines then
3940: LD_VAR 0 2
3944: NOT
3945: IFFALSE 3949
// exit ;
3947: GO 4093
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3949: LD_ADDR_VAR 0 5
3953: PUSH
3954: LD_INT 81
3956: PUSH
3957: LD_VAR 0 1
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 3
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 3
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: PPUSH
3987: CALL_OW 69
3991: ST_TO_ADDR
// for i in mines do
3992: LD_ADDR_VAR 0 4
3996: PUSH
3997: LD_VAR 0 2
4001: PUSH
4002: FOR_IN
4003: IFFALSE 4091
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4005: LD_VAR 0 4
4009: PUSH
4010: LD_INT 1
4012: ARRAY
4013: PPUSH
4014: LD_VAR 0 4
4018: PUSH
4019: LD_INT 2
4021: ARRAY
4022: PPUSH
4023: CALL_OW 458
4027: NOT
4028: IFFALSE 4032
// continue ;
4030: GO 4002
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4032: LD_VAR 0 4
4036: PUSH
4037: LD_INT 1
4039: ARRAY
4040: PPUSH
4041: LD_VAR 0 4
4045: PUSH
4046: LD_INT 2
4048: ARRAY
4049: PPUSH
4050: CALL_OW 428
4054: PUSH
4055: LD_VAR 0 5
4059: IN
4060: IFFALSE 4089
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4062: LD_VAR 0 4
4066: PUSH
4067: LD_INT 1
4069: ARRAY
4070: PPUSH
4071: LD_VAR 0 4
4075: PUSH
4076: LD_INT 2
4078: ARRAY
4079: PPUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 456
// end ;
4089: GO 4002
4091: POP
4092: POP
// end ;
4093: LD_VAR 0 3
4097: RET
// export function Count ( array ) ; begin
4098: LD_INT 0
4100: PPUSH
// result := array + 0 ;
4101: LD_ADDR_VAR 0 2
4105: PUSH
4106: LD_VAR 0 1
4110: PUSH
4111: LD_INT 0
4113: PLUS
4114: ST_TO_ADDR
// end ;
4115: LD_VAR 0 2
4119: RET
// export function IsEmpty ( building ) ; begin
4120: LD_INT 0
4122: PPUSH
// if not building then
4123: LD_VAR 0 1
4127: NOT
4128: IFFALSE 4132
// exit ;
4130: GO 4175
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4132: LD_ADDR_VAR 0 2
4136: PUSH
4137: LD_VAR 0 1
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_VAR 0 1
4149: PPUSH
4150: CALL_OW 255
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 58
4161: PUSH
4162: EMPTY
4163: LIST
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PPUSH
4169: CALL_OW 69
4173: IN
4174: ST_TO_ADDR
// end ;
4175: LD_VAR 0 2
4179: RET
// export function IsNotFull ( building ) ; var places ; begin
4180: LD_INT 0
4182: PPUSH
4183: PPUSH
// if not building then
4184: LD_VAR 0 1
4188: NOT
4189: IFFALSE 4193
// exit ;
4191: GO 4221
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4193: LD_ADDR_VAR 0 2
4197: PUSH
4198: LD_VAR 0 1
4202: PPUSH
4203: LD_INT 3
4205: PUSH
4206: LD_INT 62
4208: PUSH
4209: EMPTY
4210: LIST
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 72
4220: ST_TO_ADDR
// end ;
4221: LD_VAR 0 2
4225: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4226: LD_INT 0
4228: PPUSH
4229: PPUSH
4230: PPUSH
4231: PPUSH
// tmp := [ ] ;
4232: LD_ADDR_VAR 0 3
4236: PUSH
4237: EMPTY
4238: ST_TO_ADDR
// list := [ ] ;
4239: LD_ADDR_VAR 0 5
4243: PUSH
4244: EMPTY
4245: ST_TO_ADDR
// for i = 16 to 25 do
4246: LD_ADDR_VAR 0 4
4250: PUSH
4251: DOUBLE
4252: LD_INT 16
4254: DEC
4255: ST_TO_ADDR
4256: LD_INT 25
4258: PUSH
4259: FOR_TO
4260: IFFALSE 4333
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4262: LD_ADDR_VAR 0 3
4266: PUSH
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 255
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: PUSH
4289: LD_INT 91
4291: PUSH
4292: LD_VAR 0 1
4296: PUSH
4297: LD_INT 6
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 30
4307: PUSH
4308: LD_VAR 0 4
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: LIST
4321: PUSH
4322: EMPTY
4323: LIST
4324: PPUSH
4325: CALL_OW 69
4329: ADD
4330: ST_TO_ADDR
4331: GO 4259
4333: POP
4334: POP
// for i = 1 to tmp do
4335: LD_ADDR_VAR 0 4
4339: PUSH
4340: DOUBLE
4341: LD_INT 1
4343: DEC
4344: ST_TO_ADDR
4345: LD_VAR 0 3
4349: PUSH
4350: FOR_TO
4351: IFFALSE 4439
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4353: LD_ADDR_VAR 0 5
4357: PUSH
4358: LD_VAR 0 5
4362: PUSH
4363: LD_VAR 0 3
4367: PUSH
4368: LD_VAR 0 4
4372: ARRAY
4373: PPUSH
4374: CALL_OW 266
4378: PUSH
4379: LD_VAR 0 3
4383: PUSH
4384: LD_VAR 0 4
4388: ARRAY
4389: PPUSH
4390: CALL_OW 250
4394: PUSH
4395: LD_VAR 0 3
4399: PUSH
4400: LD_VAR 0 4
4404: ARRAY
4405: PPUSH
4406: CALL_OW 251
4410: PUSH
4411: LD_VAR 0 3
4415: PUSH
4416: LD_VAR 0 4
4420: ARRAY
4421: PPUSH
4422: CALL_OW 254
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: PUSH
4433: EMPTY
4434: LIST
4435: ADD
4436: ST_TO_ADDR
4437: GO 4350
4439: POP
4440: POP
// result := list ;
4441: LD_ADDR_VAR 0 2
4445: PUSH
4446: LD_VAR 0 5
4450: ST_TO_ADDR
// end ;
4451: LD_VAR 0 2
4455: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4456: LD_INT 0
4458: PPUSH
4459: PPUSH
4460: PPUSH
4461: PPUSH
4462: PPUSH
4463: PPUSH
4464: PPUSH
// if not factory then
4465: LD_VAR 0 1
4469: NOT
4470: IFFALSE 4474
// exit ;
4472: GO 5077
// if control = control_apeman then
4474: LD_VAR 0 4
4478: PUSH
4479: LD_INT 5
4481: EQUAL
4482: IFFALSE 4591
// begin tmp := UnitsInside ( factory ) ;
4484: LD_ADDR_VAR 0 8
4488: PUSH
4489: LD_VAR 0 1
4493: PPUSH
4494: CALL_OW 313
4498: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4499: LD_VAR 0 8
4503: PPUSH
4504: LD_INT 25
4506: PUSH
4507: LD_INT 12
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PPUSH
4514: CALL_OW 72
4518: NOT
4519: IFFALSE 4529
// control := control_manual ;
4521: LD_ADDR_VAR 0 4
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4529: LD_ADDR_VAR 0 8
4533: PUSH
4534: LD_VAR 0 1
4538: PPUSH
4539: CALL 4226 0 1
4543: ST_TO_ADDR
// if tmp then
4544: LD_VAR 0 8
4548: IFFALSE 4591
// begin for i in tmp do
4550: LD_ADDR_VAR 0 7
4554: PUSH
4555: LD_VAR 0 8
4559: PUSH
4560: FOR_IN
4561: IFFALSE 4589
// if i [ 1 ] = b_ext_radio then
4563: LD_VAR 0 7
4567: PUSH
4568: LD_INT 1
4570: ARRAY
4571: PUSH
4572: LD_INT 22
4574: EQUAL
4575: IFFALSE 4587
// begin control := control_remote ;
4577: LD_ADDR_VAR 0 4
4581: PUSH
4582: LD_INT 2
4584: ST_TO_ADDR
// break ;
4585: GO 4589
// end ;
4587: GO 4560
4589: POP
4590: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4591: LD_VAR 0 1
4595: PPUSH
4596: LD_VAR 0 2
4600: PPUSH
4601: LD_VAR 0 3
4605: PPUSH
4606: LD_VAR 0 4
4610: PPUSH
4611: LD_VAR 0 5
4615: PPUSH
4616: CALL_OW 448
4620: IFFALSE 4655
// begin result := [ chassis , engine , control , weapon ] ;
4622: LD_ADDR_VAR 0 6
4626: PUSH
4627: LD_VAR 0 2
4631: PUSH
4632: LD_VAR 0 3
4636: PUSH
4637: LD_VAR 0 4
4641: PUSH
4642: LD_VAR 0 5
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: ST_TO_ADDR
// exit ;
4653: GO 5077
// end ; _chassis := AvailableChassisList ( factory ) ;
4655: LD_ADDR_VAR 0 9
4659: PUSH
4660: LD_VAR 0 1
4664: PPUSH
4665: CALL_OW 475
4669: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4670: LD_ADDR_VAR 0 11
4674: PUSH
4675: LD_VAR 0 1
4679: PPUSH
4680: CALL_OW 476
4684: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4685: LD_ADDR_VAR 0 12
4689: PUSH
4690: LD_VAR 0 1
4694: PPUSH
4695: CALL_OW 477
4699: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4700: LD_ADDR_VAR 0 10
4704: PUSH
4705: LD_VAR 0 1
4709: PPUSH
4710: CALL_OW 478
4714: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4715: LD_VAR 0 9
4719: NOT
4720: IFTRUE 4729
4722: PUSH
4723: LD_VAR 0 11
4727: NOT
4728: OR
4729: IFTRUE 4738
4731: PUSH
4732: LD_VAR 0 12
4736: NOT
4737: OR
4738: IFTRUE 4747
4740: PUSH
4741: LD_VAR 0 10
4745: NOT
4746: OR
4747: IFFALSE 4782
// begin result := [ chassis , engine , control , weapon ] ;
4749: LD_ADDR_VAR 0 6
4753: PUSH
4754: LD_VAR 0 2
4758: PUSH
4759: LD_VAR 0 3
4763: PUSH
4764: LD_VAR 0 4
4768: PUSH
4769: LD_VAR 0 5
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: ST_TO_ADDR
// exit ;
4780: GO 5077
// end ; if not chassis in _chassis then
4782: LD_VAR 0 2
4786: PUSH
4787: LD_VAR 0 9
4791: IN
4792: NOT
4793: IFFALSE 4819
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4795: LD_ADDR_VAR 0 2
4799: PUSH
4800: LD_VAR 0 9
4804: PUSH
4805: LD_INT 1
4807: PPUSH
4808: LD_VAR 0 9
4812: PPUSH
4813: CALL_OW 12
4817: ARRAY
4818: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4819: LD_VAR 0 2
4823: PPUSH
4824: LD_VAR 0 3
4828: PPUSH
4829: CALL 5082 0 2
4833: NOT
4834: IFFALSE 4895
// repeat engine := _engine [ 1 ] ;
4836: LD_ADDR_VAR 0 3
4840: PUSH
4841: LD_VAR 0 11
4845: PUSH
4846: LD_INT 1
4848: ARRAY
4849: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4850: LD_ADDR_VAR 0 11
4854: PUSH
4855: LD_VAR 0 11
4859: PPUSH
4860: LD_INT 1
4862: PPUSH
4863: CALL_OW 3
4867: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4868: LD_VAR 0 2
4872: PPUSH
4873: LD_VAR 0 3
4877: PPUSH
4878: CALL 5082 0 2
4882: IFTRUE 4893
4884: PUSH
4885: LD_VAR 0 11
4889: PUSH
4890: EMPTY
4891: EQUAL
4892: OR
4893: IFFALSE 4836
// if not control in _control then
4895: LD_VAR 0 4
4899: PUSH
4900: LD_VAR 0 12
4904: IN
4905: NOT
4906: IFFALSE 4932
// control := _control [ rand ( 1 , _control ) ] ;
4908: LD_ADDR_VAR 0 4
4912: PUSH
4913: LD_VAR 0 12
4917: PUSH
4918: LD_INT 1
4920: PPUSH
4921: LD_VAR 0 12
4925: PPUSH
4926: CALL_OW 12
4930: ARRAY
4931: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4932: LD_VAR 0 2
4936: PPUSH
4937: LD_VAR 0 5
4941: PPUSH
4942: CALL 5304 0 2
4946: NOT
4947: IFFALSE 5008
// repeat weapon := _weapon [ 1 ] ;
4949: LD_ADDR_VAR 0 5
4953: PUSH
4954: LD_VAR 0 10
4958: PUSH
4959: LD_INT 1
4961: ARRAY
4962: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4963: LD_ADDR_VAR 0 10
4967: PUSH
4968: LD_VAR 0 10
4972: PPUSH
4973: LD_INT 1
4975: PPUSH
4976: CALL_OW 3
4980: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4981: LD_VAR 0 2
4985: PPUSH
4986: LD_VAR 0 5
4990: PPUSH
4991: CALL 5304 0 2
4995: IFTRUE 5006
4997: PUSH
4998: LD_VAR 0 10
5002: PUSH
5003: EMPTY
5004: EQUAL
5005: OR
5006: IFFALSE 4949
// result := [ ] ;
5008: LD_ADDR_VAR 0 6
5012: PUSH
5013: EMPTY
5014: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5015: LD_VAR 0 1
5019: PPUSH
5020: LD_VAR 0 2
5024: PPUSH
5025: LD_VAR 0 3
5029: PPUSH
5030: LD_VAR 0 4
5034: PPUSH
5035: LD_VAR 0 5
5039: PPUSH
5040: CALL_OW 448
5044: IFFALSE 5077
// result := [ chassis , engine , control , weapon ] ;
5046: LD_ADDR_VAR 0 6
5050: PUSH
5051: LD_VAR 0 2
5055: PUSH
5056: LD_VAR 0 3
5060: PUSH
5061: LD_VAR 0 4
5065: PUSH
5066: LD_VAR 0 5
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: ST_TO_ADDR
// end ;
5077: LD_VAR 0 6
5081: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5082: LD_INT 0
5084: PPUSH
// if not chassis or not engine then
5085: LD_VAR 0 1
5089: NOT
5090: IFTRUE 5099
5092: PUSH
5093: LD_VAR 0 2
5097: NOT
5098: OR
5099: IFFALSE 5103
// exit ;
5101: GO 5299
// case engine of engine_solar :
5103: LD_VAR 0 2
5107: PUSH
5108: LD_INT 2
5110: DOUBLE
5111: EQUAL
5112: IFTRUE 5116
5114: GO 5154
5116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5117: LD_ADDR_VAR 0 3
5121: PUSH
5122: LD_INT 11
5124: PUSH
5125: LD_INT 12
5127: PUSH
5128: LD_INT 13
5130: PUSH
5131: LD_INT 14
5133: PUSH
5134: LD_INT 1
5136: PUSH
5137: LD_INT 2
5139: PUSH
5140: LD_INT 3
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: ST_TO_ADDR
5152: GO 5283
5154: LD_INT 1
5156: DOUBLE
5157: EQUAL
5158: IFTRUE 5162
5160: GO 5224
5162: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5163: LD_ADDR_VAR 0 3
5167: PUSH
5168: LD_INT 11
5170: PUSH
5171: LD_INT 12
5173: PUSH
5174: LD_INT 13
5176: PUSH
5177: LD_INT 14
5179: PUSH
5180: LD_INT 1
5182: PUSH
5183: LD_INT 2
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 4
5191: PUSH
5192: LD_INT 5
5194: PUSH
5195: LD_INT 21
5197: PUSH
5198: LD_INT 23
5200: PUSH
5201: LD_INT 22
5203: PUSH
5204: LD_INT 24
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: ST_TO_ADDR
5222: GO 5283
5224: LD_INT 3
5226: DOUBLE
5227: EQUAL
5228: IFTRUE 5232
5230: GO 5282
5232: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5233: LD_ADDR_VAR 0 3
5237: PUSH
5238: LD_INT 13
5240: PUSH
5241: LD_INT 14
5243: PUSH
5244: LD_INT 2
5246: PUSH
5247: LD_INT 3
5249: PUSH
5250: LD_INT 4
5252: PUSH
5253: LD_INT 5
5255: PUSH
5256: LD_INT 21
5258: PUSH
5259: LD_INT 22
5261: PUSH
5262: LD_INT 23
5264: PUSH
5265: LD_INT 24
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: ST_TO_ADDR
5280: GO 5283
5282: POP
// result := ( chassis in result ) ;
5283: LD_ADDR_VAR 0 3
5287: PUSH
5288: LD_VAR 0 1
5292: PUSH
5293: LD_VAR 0 3
5297: IN
5298: ST_TO_ADDR
// end ;
5299: LD_VAR 0 3
5303: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5304: LD_INT 0
5306: PPUSH
// if not chassis or not weapon then
5307: LD_VAR 0 1
5311: NOT
5312: IFTRUE 5321
5314: PUSH
5315: LD_VAR 0 2
5319: NOT
5320: OR
5321: IFFALSE 5325
// exit ;
5323: GO 6385
// case weapon of us_machine_gun :
5325: LD_VAR 0 2
5329: PUSH
5330: LD_INT 2
5332: DOUBLE
5333: EQUAL
5334: IFTRUE 5338
5336: GO 5368
5338: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_INT 1
5346: PUSH
5347: LD_INT 2
5349: PUSH
5350: LD_INT 3
5352: PUSH
5353: LD_INT 4
5355: PUSH
5356: LD_INT 5
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: ST_TO_ADDR
5366: GO 6369
5368: LD_INT 3
5370: DOUBLE
5371: EQUAL
5372: IFTRUE 5376
5374: GO 5406
5376: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: LD_INT 1
5384: PUSH
5385: LD_INT 2
5387: PUSH
5388: LD_INT 3
5390: PUSH
5391: LD_INT 4
5393: PUSH
5394: LD_INT 5
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: ST_TO_ADDR
5404: GO 6369
5406: LD_INT 11
5408: DOUBLE
5409: EQUAL
5410: IFTRUE 5414
5412: GO 5444
5414: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5415: LD_ADDR_VAR 0 3
5419: PUSH
5420: LD_INT 1
5422: PUSH
5423: LD_INT 2
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: LD_INT 4
5431: PUSH
5432: LD_INT 5
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: ST_TO_ADDR
5442: GO 6369
5444: LD_INT 4
5446: DOUBLE
5447: EQUAL
5448: IFTRUE 5452
5450: GO 5478
5452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5453: LD_ADDR_VAR 0 3
5457: PUSH
5458: LD_INT 2
5460: PUSH
5461: LD_INT 3
5463: PUSH
5464: LD_INT 4
5466: PUSH
5467: LD_INT 5
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: ST_TO_ADDR
5476: GO 6369
5478: LD_INT 5
5480: DOUBLE
5481: EQUAL
5482: IFTRUE 5486
5484: GO 5512
5486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5487: LD_ADDR_VAR 0 3
5491: PUSH
5492: LD_INT 2
5494: PUSH
5495: LD_INT 3
5497: PUSH
5498: LD_INT 4
5500: PUSH
5501: LD_INT 5
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: ST_TO_ADDR
5510: GO 6369
5512: LD_INT 9
5514: DOUBLE
5515: EQUAL
5516: IFTRUE 5520
5518: GO 5546
5520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5521: LD_ADDR_VAR 0 3
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: LD_INT 3
5531: PUSH
5532: LD_INT 4
5534: PUSH
5535: LD_INT 5
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: ST_TO_ADDR
5544: GO 6369
5546: LD_INT 7
5548: DOUBLE
5549: EQUAL
5550: IFTRUE 5554
5552: GO 5580
5554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_INT 2
5562: PUSH
5563: LD_INT 3
5565: PUSH
5566: LD_INT 4
5568: PUSH
5569: LD_INT 5
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: ST_TO_ADDR
5578: GO 6369
5580: LD_INT 12
5582: DOUBLE
5583: EQUAL
5584: IFTRUE 5588
5586: GO 5614
5588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5589: LD_ADDR_VAR 0 3
5593: PUSH
5594: LD_INT 2
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: LD_INT 4
5602: PUSH
5603: LD_INT 5
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: ST_TO_ADDR
5612: GO 6369
5614: LD_INT 13
5616: DOUBLE
5617: EQUAL
5618: IFTRUE 5622
5620: GO 5648
5622: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5623: LD_ADDR_VAR 0 3
5627: PUSH
5628: LD_INT 2
5630: PUSH
5631: LD_INT 3
5633: PUSH
5634: LD_INT 4
5636: PUSH
5637: LD_INT 5
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: ST_TO_ADDR
5646: GO 6369
5648: LD_INT 14
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5674
5656: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5657: LD_ADDR_VAR 0 3
5661: PUSH
5662: LD_INT 4
5664: PUSH
5665: LD_INT 5
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: ST_TO_ADDR
5672: GO 6369
5674: LD_INT 6
5676: DOUBLE
5677: EQUAL
5678: IFTRUE 5682
5680: GO 5700
5682: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5683: LD_ADDR_VAR 0 3
5687: PUSH
5688: LD_INT 4
5690: PUSH
5691: LD_INT 5
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: ST_TO_ADDR
5698: GO 6369
5700: LD_INT 10
5702: DOUBLE
5703: EQUAL
5704: IFTRUE 5708
5706: GO 5726
5708: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5709: LD_ADDR_VAR 0 3
5713: PUSH
5714: LD_INT 4
5716: PUSH
5717: LD_INT 5
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: ST_TO_ADDR
5724: GO 6369
5726: LD_INT 22
5728: DOUBLE
5729: EQUAL
5730: IFTRUE 5734
5732: GO 5760
5734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5735: LD_ADDR_VAR 0 3
5739: PUSH
5740: LD_INT 11
5742: PUSH
5743: LD_INT 12
5745: PUSH
5746: LD_INT 13
5748: PUSH
5749: LD_INT 14
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: ST_TO_ADDR
5758: GO 6369
5760: LD_INT 23
5762: DOUBLE
5763: EQUAL
5764: IFTRUE 5768
5766: GO 5794
5768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5769: LD_ADDR_VAR 0 3
5773: PUSH
5774: LD_INT 11
5776: PUSH
5777: LD_INT 12
5779: PUSH
5780: LD_INT 13
5782: PUSH
5783: LD_INT 14
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: ST_TO_ADDR
5792: GO 6369
5794: LD_INT 24
5796: DOUBLE
5797: EQUAL
5798: IFTRUE 5802
5800: GO 5828
5802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5803: LD_ADDR_VAR 0 3
5807: PUSH
5808: LD_INT 11
5810: PUSH
5811: LD_INT 12
5813: PUSH
5814: LD_INT 13
5816: PUSH
5817: LD_INT 14
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: ST_TO_ADDR
5826: GO 6369
5828: LD_INT 30
5830: DOUBLE
5831: EQUAL
5832: IFTRUE 5836
5834: GO 5862
5836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5837: LD_ADDR_VAR 0 3
5841: PUSH
5842: LD_INT 11
5844: PUSH
5845: LD_INT 12
5847: PUSH
5848: LD_INT 13
5850: PUSH
5851: LD_INT 14
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: ST_TO_ADDR
5860: GO 6369
5862: LD_INT 25
5864: DOUBLE
5865: EQUAL
5866: IFTRUE 5870
5868: GO 5888
5870: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: LD_INT 13
5878: PUSH
5879: LD_INT 14
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: ST_TO_ADDR
5886: GO 6369
5888: LD_INT 27
5890: DOUBLE
5891: EQUAL
5892: IFTRUE 5896
5894: GO 5914
5896: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5897: LD_ADDR_VAR 0 3
5901: PUSH
5902: LD_INT 13
5904: PUSH
5905: LD_INT 14
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: ST_TO_ADDR
5912: GO 6369
5914: LD_INT 92
5916: DOUBLE
5917: EQUAL
5918: IFTRUE 5922
5920: GO 5948
5922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5923: LD_ADDR_VAR 0 3
5927: PUSH
5928: LD_INT 11
5930: PUSH
5931: LD_INT 12
5933: PUSH
5934: LD_INT 13
5936: PUSH
5937: LD_INT 14
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
5946: GO 6369
5948: LD_INT 28
5950: DOUBLE
5951: EQUAL
5952: IFTRUE 5956
5954: GO 5974
5956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5957: LD_ADDR_VAR 0 3
5961: PUSH
5962: LD_INT 13
5964: PUSH
5965: LD_INT 14
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: ST_TO_ADDR
5972: GO 6369
5974: LD_INT 29
5976: DOUBLE
5977: EQUAL
5978: IFTRUE 5982
5980: GO 6000
5982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5983: LD_ADDR_VAR 0 3
5987: PUSH
5988: LD_INT 13
5990: PUSH
5991: LD_INT 14
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: ST_TO_ADDR
5998: GO 6369
6000: LD_INT 31
6002: DOUBLE
6003: EQUAL
6004: IFTRUE 6008
6006: GO 6026
6008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6009: LD_ADDR_VAR 0 3
6013: PUSH
6014: LD_INT 13
6016: PUSH
6017: LD_INT 14
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: ST_TO_ADDR
6024: GO 6369
6026: LD_INT 26
6028: DOUBLE
6029: EQUAL
6030: IFTRUE 6034
6032: GO 6052
6034: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6035: LD_ADDR_VAR 0 3
6039: PUSH
6040: LD_INT 13
6042: PUSH
6043: LD_INT 14
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: ST_TO_ADDR
6050: GO 6369
6052: LD_INT 42
6054: DOUBLE
6055: EQUAL
6056: IFTRUE 6060
6058: GO 6086
6060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6061: LD_ADDR_VAR 0 3
6065: PUSH
6066: LD_INT 21
6068: PUSH
6069: LD_INT 22
6071: PUSH
6072: LD_INT 23
6074: PUSH
6075: LD_INT 24
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: ST_TO_ADDR
6084: GO 6369
6086: LD_INT 43
6088: DOUBLE
6089: EQUAL
6090: IFTRUE 6094
6092: GO 6120
6094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6095: LD_ADDR_VAR 0 3
6099: PUSH
6100: LD_INT 21
6102: PUSH
6103: LD_INT 22
6105: PUSH
6106: LD_INT 23
6108: PUSH
6109: LD_INT 24
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: ST_TO_ADDR
6118: GO 6369
6120: LD_INT 44
6122: DOUBLE
6123: EQUAL
6124: IFTRUE 6128
6126: GO 6154
6128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6129: LD_ADDR_VAR 0 3
6133: PUSH
6134: LD_INT 21
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 23
6142: PUSH
6143: LD_INT 24
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: ST_TO_ADDR
6152: GO 6369
6154: LD_INT 45
6156: DOUBLE
6157: EQUAL
6158: IFTRUE 6162
6160: GO 6188
6162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6163: LD_ADDR_VAR 0 3
6167: PUSH
6168: LD_INT 21
6170: PUSH
6171: LD_INT 22
6173: PUSH
6174: LD_INT 23
6176: PUSH
6177: LD_INT 24
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: ST_TO_ADDR
6186: GO 6369
6188: LD_INT 49
6190: DOUBLE
6191: EQUAL
6192: IFTRUE 6196
6194: GO 6222
6196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: LD_INT 21
6204: PUSH
6205: LD_INT 22
6207: PUSH
6208: LD_INT 23
6210: PUSH
6211: LD_INT 24
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: ST_TO_ADDR
6220: GO 6369
6222: LD_INT 51
6224: DOUBLE
6225: EQUAL
6226: IFTRUE 6230
6228: GO 6256
6230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6231: LD_ADDR_VAR 0 3
6235: PUSH
6236: LD_INT 21
6238: PUSH
6239: LD_INT 22
6241: PUSH
6242: LD_INT 23
6244: PUSH
6245: LD_INT 24
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: ST_TO_ADDR
6254: GO 6369
6256: LD_INT 52
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6290
6264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6265: LD_ADDR_VAR 0 3
6269: PUSH
6270: LD_INT 21
6272: PUSH
6273: LD_INT 22
6275: PUSH
6276: LD_INT 23
6278: PUSH
6279: LD_INT 24
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: ST_TO_ADDR
6288: GO 6369
6290: LD_INT 53
6292: DOUBLE
6293: EQUAL
6294: IFTRUE 6298
6296: GO 6316
6298: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6299: LD_ADDR_VAR 0 3
6303: PUSH
6304: LD_INT 23
6306: PUSH
6307: LD_INT 24
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: ST_TO_ADDR
6314: GO 6369
6316: LD_INT 46
6318: DOUBLE
6319: EQUAL
6320: IFTRUE 6324
6322: GO 6342
6324: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6325: LD_ADDR_VAR 0 3
6329: PUSH
6330: LD_INT 23
6332: PUSH
6333: LD_INT 24
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: ST_TO_ADDR
6340: GO 6369
6342: LD_INT 47
6344: DOUBLE
6345: EQUAL
6346: IFTRUE 6350
6348: GO 6368
6350: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6351: LD_ADDR_VAR 0 3
6355: PUSH
6356: LD_INT 23
6358: PUSH
6359: LD_INT 24
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: ST_TO_ADDR
6366: GO 6369
6368: POP
// result := ( chassis in result ) ;
6369: LD_ADDR_VAR 0 3
6373: PUSH
6374: LD_VAR 0 1
6378: PUSH
6379: LD_VAR 0 3
6383: IN
6384: ST_TO_ADDR
// end ;
6385: LD_VAR 0 3
6389: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6390: LD_INT 0
6392: PPUSH
6393: PPUSH
6394: PPUSH
6395: PPUSH
6396: PPUSH
6397: PPUSH
6398: PPUSH
// result := array ;
6399: LD_ADDR_VAR 0 5
6403: PUSH
6404: LD_VAR 0 1
6408: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6409: LD_VAR 0 1
6413: NOT
6414: IFTRUE 6423
6416: PUSH
6417: LD_VAR 0 2
6421: NOT
6422: OR
6423: IFTRUE 6432
6425: PUSH
6426: LD_VAR 0 3
6430: NOT
6431: OR
6432: IFTRUE 6446
6434: PUSH
6435: LD_VAR 0 2
6439: PUSH
6440: LD_VAR 0 1
6444: GREATER
6445: OR
6446: IFTRUE 6460
6448: PUSH
6449: LD_VAR 0 3
6453: PUSH
6454: LD_VAR 0 1
6458: GREATER
6459: OR
6460: IFFALSE 6464
// exit ;
6462: GO 6760
// if direction then
6464: LD_VAR 0 4
6468: IFFALSE 6532
// begin d := 1 ;
6470: LD_ADDR_VAR 0 9
6474: PUSH
6475: LD_INT 1
6477: ST_TO_ADDR
// if i_from > i_to then
6478: LD_VAR 0 2
6482: PUSH
6483: LD_VAR 0 3
6487: GREATER
6488: IFFALSE 6514
// length := ( array - i_from ) + i_to else
6490: LD_ADDR_VAR 0 11
6494: PUSH
6495: LD_VAR 0 1
6499: PUSH
6500: LD_VAR 0 2
6504: MINUS
6505: PUSH
6506: LD_VAR 0 3
6510: PLUS
6511: ST_TO_ADDR
6512: GO 6530
// length := i_to - i_from ;
6514: LD_ADDR_VAR 0 11
6518: PUSH
6519: LD_VAR 0 3
6523: PUSH
6524: LD_VAR 0 2
6528: MINUS
6529: ST_TO_ADDR
// end else
6530: GO 6593
// begin d := - 1 ;
6532: LD_ADDR_VAR 0 9
6536: PUSH
6537: LD_INT 1
6539: NEG
6540: ST_TO_ADDR
// if i_from > i_to then
6541: LD_VAR 0 2
6545: PUSH
6546: LD_VAR 0 3
6550: GREATER
6551: IFFALSE 6571
// length := i_from - i_to else
6553: LD_ADDR_VAR 0 11
6557: PUSH
6558: LD_VAR 0 2
6562: PUSH
6563: LD_VAR 0 3
6567: MINUS
6568: ST_TO_ADDR
6569: GO 6593
// length := ( array - i_to ) + i_from ;
6571: LD_ADDR_VAR 0 11
6575: PUSH
6576: LD_VAR 0 1
6580: PUSH
6581: LD_VAR 0 3
6585: MINUS
6586: PUSH
6587: LD_VAR 0 2
6591: PLUS
6592: ST_TO_ADDR
// end ; if not length then
6593: LD_VAR 0 11
6597: NOT
6598: IFFALSE 6602
// exit ;
6600: GO 6760
// tmp := array ;
6602: LD_ADDR_VAR 0 10
6606: PUSH
6607: LD_VAR 0 1
6611: ST_TO_ADDR
// for i = 1 to length do
6612: LD_ADDR_VAR 0 6
6616: PUSH
6617: DOUBLE
6618: LD_INT 1
6620: DEC
6621: ST_TO_ADDR
6622: LD_VAR 0 11
6626: PUSH
6627: FOR_TO
6628: IFFALSE 6748
// begin for j = 1 to array do
6630: LD_ADDR_VAR 0 7
6634: PUSH
6635: DOUBLE
6636: LD_INT 1
6638: DEC
6639: ST_TO_ADDR
6640: LD_VAR 0 1
6644: PUSH
6645: FOR_TO
6646: IFFALSE 6734
// begin k := j + d ;
6648: LD_ADDR_VAR 0 8
6652: PUSH
6653: LD_VAR 0 7
6657: PUSH
6658: LD_VAR 0 9
6662: PLUS
6663: ST_TO_ADDR
// if k > array then
6664: LD_VAR 0 8
6668: PUSH
6669: LD_VAR 0 1
6673: GREATER
6674: IFFALSE 6684
// k := 1 ;
6676: LD_ADDR_VAR 0 8
6680: PUSH
6681: LD_INT 1
6683: ST_TO_ADDR
// if not k then
6684: LD_VAR 0 8
6688: NOT
6689: IFFALSE 6701
// k := array ;
6691: LD_ADDR_VAR 0 8
6695: PUSH
6696: LD_VAR 0 1
6700: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6701: LD_ADDR_VAR 0 10
6705: PUSH
6706: LD_VAR 0 10
6710: PPUSH
6711: LD_VAR 0 8
6715: PPUSH
6716: LD_VAR 0 1
6720: PUSH
6721: LD_VAR 0 7
6725: ARRAY
6726: PPUSH
6727: CALL_OW 1
6731: ST_TO_ADDR
// end ;
6732: GO 6645
6734: POP
6735: POP
// array := tmp ;
6736: LD_ADDR_VAR 0 1
6740: PUSH
6741: LD_VAR 0 10
6745: ST_TO_ADDR
// end ;
6746: GO 6627
6748: POP
6749: POP
// result := array ;
6750: LD_ADDR_VAR 0 5
6754: PUSH
6755: LD_VAR 0 1
6759: ST_TO_ADDR
// end ;
6760: LD_VAR 0 5
6764: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6765: LD_INT 0
6767: PPUSH
6768: PPUSH
// result := 0 ;
6769: LD_ADDR_VAR 0 3
6773: PUSH
6774: LD_INT 0
6776: ST_TO_ADDR
// if not array or not value in array then
6777: LD_VAR 0 1
6781: NOT
6782: IFTRUE 6797
6784: PUSH
6785: LD_VAR 0 2
6789: PUSH
6790: LD_VAR 0 1
6794: IN
6795: NOT
6796: OR
6797: IFFALSE 6801
// exit ;
6799: GO 6855
// for i = 1 to array do
6801: LD_ADDR_VAR 0 4
6805: PUSH
6806: DOUBLE
6807: LD_INT 1
6809: DEC
6810: ST_TO_ADDR
6811: LD_VAR 0 1
6815: PUSH
6816: FOR_TO
6817: IFFALSE 6853
// if value = array [ i ] then
6819: LD_VAR 0 2
6823: PUSH
6824: LD_VAR 0 1
6828: PUSH
6829: LD_VAR 0 4
6833: ARRAY
6834: EQUAL
6835: IFFALSE 6851
// begin result := i ;
6837: LD_ADDR_VAR 0 3
6841: PUSH
6842: LD_VAR 0 4
6846: ST_TO_ADDR
// exit ;
6847: POP
6848: POP
6849: GO 6855
// end ;
6851: GO 6816
6853: POP
6854: POP
// end ;
6855: LD_VAR 0 3
6859: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6860: LD_INT 0
6862: PPUSH
// vc_chassis := chassis ;
6863: LD_ADDR_OWVAR 37
6867: PUSH
6868: LD_VAR 0 1
6872: ST_TO_ADDR
// vc_engine := engine ;
6873: LD_ADDR_OWVAR 39
6877: PUSH
6878: LD_VAR 0 2
6882: ST_TO_ADDR
// vc_control := control ;
6883: LD_ADDR_OWVAR 38
6887: PUSH
6888: LD_VAR 0 3
6892: ST_TO_ADDR
// vc_weapon := weapon ;
6893: LD_ADDR_OWVAR 40
6897: PUSH
6898: LD_VAR 0 4
6902: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6903: LD_ADDR_OWVAR 41
6907: PUSH
6908: LD_VAR 0 5
6912: ST_TO_ADDR
// end ;
6913: LD_VAR 0 6
6917: RET
// export function WantPlant ( unit ) ; var task ; begin
6918: LD_INT 0
6920: PPUSH
6921: PPUSH
// result := false ;
6922: LD_ADDR_VAR 0 2
6926: PUSH
6927: LD_INT 0
6929: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6930: LD_ADDR_VAR 0 3
6934: PUSH
6935: LD_VAR 0 1
6939: PPUSH
6940: CALL_OW 437
6944: ST_TO_ADDR
// if task then
6945: LD_VAR 0 3
6949: IFFALSE 6977
// if task [ 1 ] [ 1 ] = p then
6951: LD_VAR 0 3
6955: PUSH
6956: LD_INT 1
6958: ARRAY
6959: PUSH
6960: LD_INT 1
6962: ARRAY
6963: PUSH
6964: LD_STRING p
6966: EQUAL
6967: IFFALSE 6977
// result := true ;
6969: LD_ADDR_VAR 0 2
6973: PUSH
6974: LD_INT 1
6976: ST_TO_ADDR
// end ;
6977: LD_VAR 0 2
6981: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6982: LD_INT 0
6984: PPUSH
6985: PPUSH
6986: PPUSH
6987: PPUSH
// if pos < 1 then
6988: LD_VAR 0 2
6992: PUSH
6993: LD_INT 1
6995: LESS
6996: IFFALSE 7000
// exit ;
6998: GO 7303
// if pos = 1 then
7000: LD_VAR 0 2
7004: PUSH
7005: LD_INT 1
7007: EQUAL
7008: IFFALSE 7041
// result := Replace ( arr , pos [ 1 ] , value ) else
7010: LD_ADDR_VAR 0 4
7014: PUSH
7015: LD_VAR 0 1
7019: PPUSH
7020: LD_VAR 0 2
7024: PUSH
7025: LD_INT 1
7027: ARRAY
7028: PPUSH
7029: LD_VAR 0 3
7033: PPUSH
7034: CALL_OW 1
7038: ST_TO_ADDR
7039: GO 7303
// begin tmp := arr ;
7041: LD_ADDR_VAR 0 6
7045: PUSH
7046: LD_VAR 0 1
7050: ST_TO_ADDR
// s_arr := [ tmp ] ;
7051: LD_ADDR_VAR 0 7
7055: PUSH
7056: LD_VAR 0 6
7060: PUSH
7061: EMPTY
7062: LIST
7063: ST_TO_ADDR
// for i = 1 to pos - 1 do
7064: LD_ADDR_VAR 0 5
7068: PUSH
7069: DOUBLE
7070: LD_INT 1
7072: DEC
7073: ST_TO_ADDR
7074: LD_VAR 0 2
7078: PUSH
7079: LD_INT 1
7081: MINUS
7082: PUSH
7083: FOR_TO
7084: IFFALSE 7129
// begin tmp := tmp [ pos [ i ] ] ;
7086: LD_ADDR_VAR 0 6
7090: PUSH
7091: LD_VAR 0 6
7095: PUSH
7096: LD_VAR 0 2
7100: PUSH
7101: LD_VAR 0 5
7105: ARRAY
7106: ARRAY
7107: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7108: LD_ADDR_VAR 0 7
7112: PUSH
7113: LD_VAR 0 7
7117: PUSH
7118: LD_VAR 0 6
7122: PUSH
7123: EMPTY
7124: LIST
7125: ADD
7126: ST_TO_ADDR
// end ;
7127: GO 7083
7129: POP
7130: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7131: LD_ADDR_VAR 0 6
7135: PUSH
7136: LD_VAR 0 6
7140: PPUSH
7141: LD_VAR 0 2
7145: PUSH
7146: LD_VAR 0 2
7150: ARRAY
7151: PPUSH
7152: LD_VAR 0 3
7156: PPUSH
7157: CALL_OW 1
7161: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7162: LD_ADDR_VAR 0 7
7166: PUSH
7167: LD_VAR 0 7
7171: PPUSH
7172: LD_VAR 0 7
7176: PPUSH
7177: LD_VAR 0 6
7181: PPUSH
7182: CALL_OW 1
7186: ST_TO_ADDR
// for i = s_arr downto 2 do
7187: LD_ADDR_VAR 0 5
7191: PUSH
7192: DOUBLE
7193: LD_VAR 0 7
7197: INC
7198: ST_TO_ADDR
7199: LD_INT 2
7201: PUSH
7202: FOR_DOWNTO
7203: IFFALSE 7287
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7205: LD_ADDR_VAR 0 6
7209: PUSH
7210: LD_VAR 0 7
7214: PUSH
7215: LD_VAR 0 5
7219: PUSH
7220: LD_INT 1
7222: MINUS
7223: ARRAY
7224: PPUSH
7225: LD_VAR 0 2
7229: PUSH
7230: LD_VAR 0 5
7234: PUSH
7235: LD_INT 1
7237: MINUS
7238: ARRAY
7239: PPUSH
7240: LD_VAR 0 7
7244: PUSH
7245: LD_VAR 0 5
7249: ARRAY
7250: PPUSH
7251: CALL_OW 1
7255: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7256: LD_ADDR_VAR 0 7
7260: PUSH
7261: LD_VAR 0 7
7265: PPUSH
7266: LD_VAR 0 5
7270: PUSH
7271: LD_INT 1
7273: MINUS
7274: PPUSH
7275: LD_VAR 0 6
7279: PPUSH
7280: CALL_OW 1
7284: ST_TO_ADDR
// end ;
7285: GO 7202
7287: POP
7288: POP
// result := s_arr [ 1 ] ;
7289: LD_ADDR_VAR 0 4
7293: PUSH
7294: LD_VAR 0 7
7298: PUSH
7299: LD_INT 1
7301: ARRAY
7302: ST_TO_ADDR
// end ; end ;
7303: LD_VAR 0 4
7307: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7308: LD_INT 0
7310: PPUSH
7311: PPUSH
// if not list then
7312: LD_VAR 0 1
7316: NOT
7317: IFFALSE 7321
// exit ;
7319: GO 7412
// i := list [ pos1 ] ;
7321: LD_ADDR_VAR 0 5
7325: PUSH
7326: LD_VAR 0 1
7330: PUSH
7331: LD_VAR 0 2
7335: ARRAY
7336: ST_TO_ADDR
// if not i then
7337: LD_VAR 0 5
7341: NOT
7342: IFFALSE 7346
// exit ;
7344: GO 7412
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7346: LD_ADDR_VAR 0 1
7350: PUSH
7351: LD_VAR 0 1
7355: PPUSH
7356: LD_VAR 0 2
7360: PPUSH
7361: LD_VAR 0 1
7365: PUSH
7366: LD_VAR 0 3
7370: ARRAY
7371: PPUSH
7372: CALL_OW 1
7376: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7377: LD_ADDR_VAR 0 1
7381: PUSH
7382: LD_VAR 0 1
7386: PPUSH
7387: LD_VAR 0 3
7391: PPUSH
7392: LD_VAR 0 5
7396: PPUSH
7397: CALL_OW 1
7401: ST_TO_ADDR
// result := list ;
7402: LD_ADDR_VAR 0 4
7406: PUSH
7407: LD_VAR 0 1
7411: ST_TO_ADDR
// end ;
7412: LD_VAR 0 4
7416: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7417: LD_INT 0
7419: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7420: LD_ADDR_VAR 0 5
7424: PUSH
7425: LD_VAR 0 1
7429: PPUSH
7430: CALL_OW 250
7434: PPUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: CALL_OW 251
7444: PPUSH
7445: LD_VAR 0 2
7449: PPUSH
7450: LD_VAR 0 3
7454: PPUSH
7455: LD_VAR 0 4
7459: PPUSH
7460: CALL 7842 0 5
7464: ST_TO_ADDR
// end ;
7465: LD_VAR 0 5
7469: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7470: LD_INT 0
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
// if not list or not unit then
7476: LD_VAR 0 2
7480: NOT
7481: IFTRUE 7490
7483: PUSH
7484: LD_VAR 0 1
7488: NOT
7489: OR
7490: IFFALSE 7494
// exit ;
7492: GO 7837
// result := [ ] ;
7494: LD_ADDR_VAR 0 5
7498: PUSH
7499: EMPTY
7500: ST_TO_ADDR
// for i in list do
7501: LD_ADDR_VAR 0 6
7505: PUSH
7506: LD_VAR 0 2
7510: PUSH
7511: FOR_IN
7512: IFFALSE 7730
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7514: LD_ADDR_VAR 0 8
7518: PUSH
7519: LD_VAR 0 1
7523: PPUSH
7524: LD_VAR 0 6
7528: PUSH
7529: LD_INT 1
7531: ARRAY
7532: PPUSH
7533: LD_VAR 0 6
7537: PUSH
7538: LD_INT 2
7540: ARRAY
7541: PPUSH
7542: CALL_OW 297
7546: ST_TO_ADDR
// if not Count ( result ) then
7547: LD_VAR 0 5
7551: PPUSH
7552: CALL 4098 0 1
7556: NOT
7557: IFFALSE 7590
// begin result := Join ( result , [ i , tmp ] ) ;
7559: LD_ADDR_VAR 0 5
7563: PUSH
7564: LD_VAR 0 5
7568: PPUSH
7569: LD_VAR 0 6
7573: PUSH
7574: LD_VAR 0 8
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PPUSH
7583: CALL 40030 0 2
7587: ST_TO_ADDR
// continue ;
7588: GO 7511
// end ; if result [ result ] [ 2 ] <= tmp then
7590: LD_VAR 0 5
7594: PUSH
7595: LD_VAR 0 5
7599: ARRAY
7600: PUSH
7601: LD_INT 2
7603: ARRAY
7604: PUSH
7605: LD_VAR 0 8
7609: LESSEQUAL
7610: IFFALSE 7643
// result := Join ( result , [ i , tmp ] ) else
7612: LD_ADDR_VAR 0 5
7616: PUSH
7617: LD_VAR 0 5
7621: PPUSH
7622: LD_VAR 0 6
7626: PUSH
7627: LD_VAR 0 8
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PPUSH
7636: CALL 40030 0 2
7640: ST_TO_ADDR
7641: GO 7728
// begin for j := 1 to Count ( result ) do
7643: LD_ADDR_VAR 0 7
7647: PUSH
7648: DOUBLE
7649: LD_INT 1
7651: DEC
7652: ST_TO_ADDR
7653: LD_VAR 0 5
7657: PPUSH
7658: CALL 4098 0 1
7662: PUSH
7663: FOR_TO
7664: IFFALSE 7726
// begin if tmp < result [ j ] [ 2 ] then
7666: LD_VAR 0 8
7670: PUSH
7671: LD_VAR 0 5
7675: PUSH
7676: LD_VAR 0 7
7680: ARRAY
7681: PUSH
7682: LD_INT 2
7684: ARRAY
7685: LESS
7686: IFFALSE 7724
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7688: LD_ADDR_VAR 0 5
7692: PUSH
7693: LD_VAR 0 5
7697: PPUSH
7698: LD_VAR 0 7
7702: PPUSH
7703: LD_VAR 0 6
7707: PUSH
7708: LD_VAR 0 8
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PPUSH
7717: CALL_OW 2
7721: ST_TO_ADDR
// break ;
7722: GO 7726
// end ; end ;
7724: GO 7663
7726: POP
7727: POP
// end ; end ;
7728: GO 7511
7730: POP
7731: POP
// if result and not asc then
7732: LD_VAR 0 5
7736: IFFALSE 7745
7738: PUSH
7739: LD_VAR 0 3
7743: NOT
7744: AND
7745: IFFALSE 7762
// result := ReverseArray ( result ) ;
7747: LD_ADDR_VAR 0 5
7751: PUSH
7752: LD_VAR 0 5
7756: PPUSH
7757: CALL 35120 0 1
7761: ST_TO_ADDR
// tmp := [ ] ;
7762: LD_ADDR_VAR 0 8
7766: PUSH
7767: EMPTY
7768: ST_TO_ADDR
// if mode then
7769: LD_VAR 0 4
7773: IFFALSE 7837
// begin for i := 1 to result do
7775: LD_ADDR_VAR 0 6
7779: PUSH
7780: DOUBLE
7781: LD_INT 1
7783: DEC
7784: ST_TO_ADDR
7785: LD_VAR 0 5
7789: PUSH
7790: FOR_TO
7791: IFFALSE 7825
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7793: LD_ADDR_VAR 0 8
7797: PUSH
7798: LD_VAR 0 8
7802: PPUSH
7803: LD_VAR 0 5
7807: PUSH
7808: LD_VAR 0 6
7812: ARRAY
7813: PUSH
7814: LD_INT 1
7816: ARRAY
7817: PPUSH
7818: CALL 40030 0 2
7822: ST_TO_ADDR
7823: GO 7790
7825: POP
7826: POP
// result := tmp ;
7827: LD_ADDR_VAR 0 5
7831: PUSH
7832: LD_VAR 0 8
7836: ST_TO_ADDR
// end ; end ;
7837: LD_VAR 0 5
7841: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7842: LD_INT 0
7844: PPUSH
7845: PPUSH
7846: PPUSH
7847: PPUSH
// if not list then
7848: LD_VAR 0 3
7852: NOT
7853: IFFALSE 7857
// exit ;
7855: GO 8247
// result := [ ] ;
7857: LD_ADDR_VAR 0 6
7861: PUSH
7862: EMPTY
7863: ST_TO_ADDR
// for i in list do
7864: LD_ADDR_VAR 0 7
7868: PUSH
7869: LD_VAR 0 3
7873: PUSH
7874: FOR_IN
7875: IFFALSE 8077
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7877: LD_ADDR_VAR 0 9
7881: PUSH
7882: LD_VAR 0 7
7886: PPUSH
7887: LD_VAR 0 1
7891: PPUSH
7892: LD_VAR 0 2
7896: PPUSH
7897: CALL_OW 297
7901: ST_TO_ADDR
// if not result then
7902: LD_VAR 0 6
7906: NOT
7907: IFFALSE 7933
// result := [ [ i , tmp ] ] else
7909: LD_ADDR_VAR 0 6
7913: PUSH
7914: LD_VAR 0 7
7918: PUSH
7919: LD_VAR 0 9
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: EMPTY
7929: LIST
7930: ST_TO_ADDR
7931: GO 8075
// begin if result [ result ] [ 2 ] <= tmp then
7933: LD_VAR 0 6
7937: PUSH
7938: LD_VAR 0 6
7942: ARRAY
7943: PUSH
7944: LD_INT 2
7946: ARRAY
7947: PUSH
7948: LD_VAR 0 9
7952: LESSEQUAL
7953: IFFALSE 7995
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7955: LD_ADDR_VAR 0 6
7959: PUSH
7960: LD_VAR 0 6
7964: PPUSH
7965: LD_VAR 0 6
7969: PUSH
7970: LD_INT 1
7972: PLUS
7973: PPUSH
7974: LD_VAR 0 7
7978: PUSH
7979: LD_VAR 0 9
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PPUSH
7988: CALL_OW 2
7992: ST_TO_ADDR
7993: GO 8075
// for j := 1 to result do
7995: LD_ADDR_VAR 0 8
7999: PUSH
8000: DOUBLE
8001: LD_INT 1
8003: DEC
8004: ST_TO_ADDR
8005: LD_VAR 0 6
8009: PUSH
8010: FOR_TO
8011: IFFALSE 8073
// begin if tmp < result [ j ] [ 2 ] then
8013: LD_VAR 0 9
8017: PUSH
8018: LD_VAR 0 6
8022: PUSH
8023: LD_VAR 0 8
8027: ARRAY
8028: PUSH
8029: LD_INT 2
8031: ARRAY
8032: LESS
8033: IFFALSE 8071
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8035: LD_ADDR_VAR 0 6
8039: PUSH
8040: LD_VAR 0 6
8044: PPUSH
8045: LD_VAR 0 8
8049: PPUSH
8050: LD_VAR 0 7
8054: PUSH
8055: LD_VAR 0 9
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PPUSH
8064: CALL_OW 2
8068: ST_TO_ADDR
// break ;
8069: GO 8073
// end ; end ;
8071: GO 8010
8073: POP
8074: POP
// end ; end ;
8075: GO 7874
8077: POP
8078: POP
// if result and not asc then
8079: LD_VAR 0 6
8083: IFFALSE 8092
8085: PUSH
8086: LD_VAR 0 4
8090: NOT
8091: AND
8092: IFFALSE 8167
// begin tmp := result ;
8094: LD_ADDR_VAR 0 9
8098: PUSH
8099: LD_VAR 0 6
8103: ST_TO_ADDR
// for i = tmp downto 1 do
8104: LD_ADDR_VAR 0 7
8108: PUSH
8109: DOUBLE
8110: LD_VAR 0 9
8114: INC
8115: ST_TO_ADDR
8116: LD_INT 1
8118: PUSH
8119: FOR_DOWNTO
8120: IFFALSE 8165
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8122: LD_ADDR_VAR 0 6
8126: PUSH
8127: LD_VAR 0 6
8131: PPUSH
8132: LD_VAR 0 9
8136: PUSH
8137: LD_VAR 0 7
8141: MINUS
8142: PUSH
8143: LD_INT 1
8145: PLUS
8146: PPUSH
8147: LD_VAR 0 9
8151: PUSH
8152: LD_VAR 0 7
8156: ARRAY
8157: PPUSH
8158: CALL_OW 1
8162: ST_TO_ADDR
8163: GO 8119
8165: POP
8166: POP
// end ; tmp := [ ] ;
8167: LD_ADDR_VAR 0 9
8171: PUSH
8172: EMPTY
8173: ST_TO_ADDR
// if mode then
8174: LD_VAR 0 5
8178: IFFALSE 8247
// begin for i = 1 to result do
8180: LD_ADDR_VAR 0 7
8184: PUSH
8185: DOUBLE
8186: LD_INT 1
8188: DEC
8189: ST_TO_ADDR
8190: LD_VAR 0 6
8194: PUSH
8195: FOR_TO
8196: IFFALSE 8235
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8198: LD_ADDR_VAR 0 9
8202: PUSH
8203: LD_VAR 0 9
8207: PPUSH
8208: LD_VAR 0 7
8212: PPUSH
8213: LD_VAR 0 6
8217: PUSH
8218: LD_VAR 0 7
8222: ARRAY
8223: PUSH
8224: LD_INT 1
8226: ARRAY
8227: PPUSH
8228: CALL_OW 1
8232: ST_TO_ADDR
8233: GO 8195
8235: POP
8236: POP
// result := tmp ;
8237: LD_ADDR_VAR 0 6
8241: PUSH
8242: LD_VAR 0 9
8246: ST_TO_ADDR
// end ; end ;
8247: LD_VAR 0 6
8251: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8252: LD_INT 0
8254: PPUSH
8255: PPUSH
8256: PPUSH
8257: PPUSH
8258: PPUSH
8259: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8260: LD_ADDR_VAR 0 5
8264: PUSH
8265: LD_INT 0
8267: PUSH
8268: LD_INT 0
8270: PUSH
8271: LD_INT 0
8273: PUSH
8274: EMPTY
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: ST_TO_ADDR
// if not x or not y then
8282: LD_VAR 0 2
8286: NOT
8287: IFTRUE 8296
8289: PUSH
8290: LD_VAR 0 3
8294: NOT
8295: OR
8296: IFFALSE 8300
// exit ;
8298: GO 9956
// if not range then
8300: LD_VAR 0 4
8304: NOT
8305: IFFALSE 8315
// range := 10 ;
8307: LD_ADDR_VAR 0 4
8311: PUSH
8312: LD_INT 10
8314: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8315: LD_ADDR_VAR 0 8
8319: PUSH
8320: LD_INT 81
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 92
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: LD_VAR 0 3
8344: PUSH
8345: LD_VAR 0 4
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: PUSH
8356: LD_INT 3
8358: PUSH
8359: LD_INT 21
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: PPUSH
8378: CALL_OW 69
8382: ST_TO_ADDR
// if not tmp then
8383: LD_VAR 0 8
8387: NOT
8388: IFFALSE 8392
// exit ;
8390: GO 9956
// for i in tmp do
8392: LD_ADDR_VAR 0 6
8396: PUSH
8397: LD_VAR 0 8
8401: PUSH
8402: FOR_IN
8403: IFFALSE 9931
// begin points := [ 0 , 0 , 0 ] ;
8405: LD_ADDR_VAR 0 9
8409: PUSH
8410: LD_INT 0
8412: PUSH
8413: LD_INT 0
8415: PUSH
8416: LD_INT 0
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: LIST
8423: ST_TO_ADDR
// bpoints := 1 ;
8424: LD_ADDR_VAR 0 10
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8432: LD_VAR 0 6
8436: PPUSH
8437: CALL_OW 247
8441: PUSH
8442: LD_INT 1
8444: DOUBLE
8445: EQUAL
8446: IFTRUE 8450
8448: GO 9032
8450: POP
// begin if GetClass ( i ) = 1 then
8451: LD_VAR 0 6
8455: PPUSH
8456: CALL_OW 257
8460: PUSH
8461: LD_INT 1
8463: EQUAL
8464: IFFALSE 8485
// points := [ 10 , 5 , 3 ] ;
8466: LD_ADDR_VAR 0 9
8470: PUSH
8471: LD_INT 10
8473: PUSH
8474: LD_INT 5
8476: PUSH
8477: LD_INT 3
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8485: LD_VAR 0 6
8489: PPUSH
8490: CALL_OW 257
8494: PUSH
8495: LD_INT 2
8497: PUSH
8498: LD_INT 3
8500: PUSH
8501: LD_INT 4
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: IN
8509: IFFALSE 8530
// points := [ 3 , 2 , 1 ] ;
8511: LD_ADDR_VAR 0 9
8515: PUSH
8516: LD_INT 3
8518: PUSH
8519: LD_INT 2
8521: PUSH
8522: LD_INT 1
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8530: LD_VAR 0 6
8534: PPUSH
8535: CALL_OW 257
8539: PUSH
8540: LD_INT 5
8542: EQUAL
8543: IFFALSE 8564
// points := [ 130 , 5 , 2 ] ;
8545: LD_ADDR_VAR 0 9
8549: PUSH
8550: LD_INT 130
8552: PUSH
8553: LD_INT 5
8555: PUSH
8556: LD_INT 2
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8564: LD_VAR 0 6
8568: PPUSH
8569: CALL_OW 257
8573: PUSH
8574: LD_INT 8
8576: EQUAL
8577: IFFALSE 8598
// points := [ 35 , 35 , 30 ] ;
8579: LD_ADDR_VAR 0 9
8583: PUSH
8584: LD_INT 35
8586: PUSH
8587: LD_INT 35
8589: PUSH
8590: LD_INT 30
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8598: LD_VAR 0 6
8602: PPUSH
8603: CALL_OW 257
8607: PUSH
8608: LD_INT 9
8610: EQUAL
8611: IFFALSE 8632
// points := [ 20 , 55 , 40 ] ;
8613: LD_ADDR_VAR 0 9
8617: PUSH
8618: LD_INT 20
8620: PUSH
8621: LD_INT 55
8623: PUSH
8624: LD_INT 40
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: LIST
8631: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8632: LD_VAR 0 6
8636: PPUSH
8637: CALL_OW 257
8641: PUSH
8642: LD_INT 12
8644: PUSH
8645: LD_INT 16
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: IN
8652: IFFALSE 8673
// points := [ 5 , 3 , 2 ] ;
8654: LD_ADDR_VAR 0 9
8658: PUSH
8659: LD_INT 5
8661: PUSH
8662: LD_INT 3
8664: PUSH
8665: LD_INT 2
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8673: LD_VAR 0 6
8677: PPUSH
8678: CALL_OW 257
8682: PUSH
8683: LD_INT 17
8685: EQUAL
8686: IFFALSE 8707
// points := [ 100 , 50 , 75 ] ;
8688: LD_ADDR_VAR 0 9
8692: PUSH
8693: LD_INT 100
8695: PUSH
8696: LD_INT 50
8698: PUSH
8699: LD_INT 75
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: LIST
8706: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8707: LD_VAR 0 6
8711: PPUSH
8712: CALL_OW 257
8716: PUSH
8717: LD_INT 15
8719: EQUAL
8720: IFFALSE 8741
// points := [ 10 , 5 , 3 ] ;
8722: LD_ADDR_VAR 0 9
8726: PUSH
8727: LD_INT 10
8729: PUSH
8730: LD_INT 5
8732: PUSH
8733: LD_INT 3
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: LIST
8740: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8741: LD_VAR 0 6
8745: PPUSH
8746: CALL_OW 257
8750: PUSH
8751: LD_INT 14
8753: EQUAL
8754: IFFALSE 8775
// points := [ 10 , 0 , 0 ] ;
8756: LD_ADDR_VAR 0 9
8760: PUSH
8761: LD_INT 10
8763: PUSH
8764: LD_INT 0
8766: PUSH
8767: LD_INT 0
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8775: LD_VAR 0 6
8779: PPUSH
8780: CALL_OW 257
8784: PUSH
8785: LD_INT 11
8787: EQUAL
8788: IFFALSE 8809
// points := [ 30 , 10 , 5 ] ;
8790: LD_ADDR_VAR 0 9
8794: PUSH
8795: LD_INT 30
8797: PUSH
8798: LD_INT 10
8800: PUSH
8801: LD_INT 5
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8809: LD_VAR 0 1
8813: PPUSH
8814: LD_INT 5
8816: PPUSH
8817: CALL_OW 321
8821: PUSH
8822: LD_INT 2
8824: EQUAL
8825: IFFALSE 8842
// bpoints := bpoints * 1.8 ;
8827: LD_ADDR_VAR 0 10
8831: PUSH
8832: LD_VAR 0 10
8836: PUSH
8837: LD_REAL  1.80000000000000E+0000
8840: MUL
8841: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8842: LD_VAR 0 6
8846: PPUSH
8847: CALL_OW 257
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: LD_INT 2
8857: PUSH
8858: LD_INT 3
8860: PUSH
8861: LD_INT 4
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: IN
8870: IFFALSE 8890
8872: PUSH
8873: LD_VAR 0 1
8877: PPUSH
8878: LD_INT 51
8880: PPUSH
8881: CALL_OW 321
8885: PUSH
8886: LD_INT 2
8888: EQUAL
8889: AND
8890: IFFALSE 8907
// bpoints := bpoints * 1.2 ;
8892: LD_ADDR_VAR 0 10
8896: PUSH
8897: LD_VAR 0 10
8901: PUSH
8902: LD_REAL  1.20000000000000E+0000
8905: MUL
8906: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8907: LD_VAR 0 6
8911: PPUSH
8912: CALL_OW 257
8916: PUSH
8917: LD_INT 5
8919: PUSH
8920: LD_INT 7
8922: PUSH
8923: LD_INT 9
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: IN
8931: IFFALSE 8951
8933: PUSH
8934: LD_VAR 0 1
8938: PPUSH
8939: LD_INT 52
8941: PPUSH
8942: CALL_OW 321
8946: PUSH
8947: LD_INT 2
8949: EQUAL
8950: AND
8951: IFFALSE 8968
// bpoints := bpoints * 1.5 ;
8953: LD_ADDR_VAR 0 10
8957: PUSH
8958: LD_VAR 0 10
8962: PUSH
8963: LD_REAL  1.50000000000000E+0000
8966: MUL
8967: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8968: LD_VAR 0 1
8972: PPUSH
8973: LD_INT 66
8975: PPUSH
8976: CALL_OW 321
8980: PUSH
8981: LD_INT 2
8983: EQUAL
8984: IFFALSE 9001
// bpoints := bpoints * 1.1 ;
8986: LD_ADDR_VAR 0 10
8990: PUSH
8991: LD_VAR 0 10
8995: PUSH
8996: LD_REAL  1.10000000000000E+0000
8999: MUL
9000: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9001: LD_ADDR_VAR 0 10
9005: PUSH
9006: LD_VAR 0 10
9010: PUSH
9011: LD_VAR 0 6
9015: PPUSH
9016: LD_INT 1
9018: PPUSH
9019: CALL_OW 259
9023: PUSH
9024: LD_REAL  1.15000000000000E+0000
9027: MUL
9028: MUL
9029: ST_TO_ADDR
// end ; unit_vehicle :
9030: GO 9860
9032: LD_INT 2
9034: DOUBLE
9035: EQUAL
9036: IFTRUE 9040
9038: GO 9848
9040: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9041: LD_VAR 0 6
9045: PPUSH
9046: CALL_OW 264
9050: PUSH
9051: LD_INT 2
9053: PUSH
9054: LD_INT 42
9056: PUSH
9057: LD_INT 24
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: IN
9065: IFFALSE 9086
// points := [ 25 , 5 , 3 ] ;
9067: LD_ADDR_VAR 0 9
9071: PUSH
9072: LD_INT 25
9074: PUSH
9075: LD_INT 5
9077: PUSH
9078: LD_INT 3
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9086: LD_VAR 0 6
9090: PPUSH
9091: CALL_OW 264
9095: PUSH
9096: LD_INT 4
9098: PUSH
9099: LD_INT 43
9101: PUSH
9102: LD_INT 25
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: IN
9110: IFFALSE 9131
// points := [ 40 , 15 , 5 ] ;
9112: LD_ADDR_VAR 0 9
9116: PUSH
9117: LD_INT 40
9119: PUSH
9120: LD_INT 15
9122: PUSH
9123: LD_INT 5
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9131: LD_VAR 0 6
9135: PPUSH
9136: CALL_OW 264
9140: PUSH
9141: LD_INT 3
9143: PUSH
9144: LD_INT 23
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: IN
9151: IFFALSE 9172
// points := [ 7 , 25 , 8 ] ;
9153: LD_ADDR_VAR 0 9
9157: PUSH
9158: LD_INT 7
9160: PUSH
9161: LD_INT 25
9163: PUSH
9164: LD_INT 8
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: LIST
9171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9172: LD_VAR 0 6
9176: PPUSH
9177: CALL_OW 264
9181: PUSH
9182: LD_INT 5
9184: PUSH
9185: LD_INT 27
9187: PUSH
9188: LD_INT 44
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: IN
9196: IFFALSE 9217
// points := [ 14 , 50 , 16 ] ;
9198: LD_ADDR_VAR 0 9
9202: PUSH
9203: LD_INT 14
9205: PUSH
9206: LD_INT 50
9208: PUSH
9209: LD_INT 16
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9217: LD_VAR 0 6
9221: PPUSH
9222: CALL_OW 264
9226: PUSH
9227: LD_INT 6
9229: PUSH
9230: LD_INT 46
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: IN
9237: IFFALSE 9258
// points := [ 32 , 120 , 70 ] ;
9239: LD_ADDR_VAR 0 9
9243: PUSH
9244: LD_INT 32
9246: PUSH
9247: LD_INT 120
9249: PUSH
9250: LD_INT 70
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: LIST
9257: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9258: LD_VAR 0 6
9262: PPUSH
9263: CALL_OW 264
9267: PUSH
9268: LD_INT 7
9270: PUSH
9271: LD_INT 28
9273: PUSH
9274: LD_INT 45
9276: PUSH
9277: LD_INT 92
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: IN
9286: IFFALSE 9307
// points := [ 35 , 20 , 45 ] ;
9288: LD_ADDR_VAR 0 9
9292: PUSH
9293: LD_INT 35
9295: PUSH
9296: LD_INT 20
9298: PUSH
9299: LD_INT 45
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: LIST
9306: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9307: LD_VAR 0 6
9311: PPUSH
9312: CALL_OW 264
9316: PUSH
9317: LD_INT 47
9319: PUSH
9320: EMPTY
9321: LIST
9322: IN
9323: IFFALSE 9344
// points := [ 67 , 45 , 75 ] ;
9325: LD_ADDR_VAR 0 9
9329: PUSH
9330: LD_INT 67
9332: PUSH
9333: LD_INT 45
9335: PUSH
9336: LD_INT 75
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9344: LD_VAR 0 6
9348: PPUSH
9349: CALL_OW 264
9353: PUSH
9354: LD_INT 26
9356: PUSH
9357: EMPTY
9358: LIST
9359: IN
9360: IFFALSE 9381
// points := [ 120 , 30 , 80 ] ;
9362: LD_ADDR_VAR 0 9
9366: PUSH
9367: LD_INT 120
9369: PUSH
9370: LD_INT 30
9372: PUSH
9373: LD_INT 80
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9381: LD_VAR 0 6
9385: PPUSH
9386: CALL_OW 264
9390: PUSH
9391: LD_INT 22
9393: PUSH
9394: EMPTY
9395: LIST
9396: IN
9397: IFFALSE 9418
// points := [ 40 , 1 , 1 ] ;
9399: LD_ADDR_VAR 0 9
9403: PUSH
9404: LD_INT 40
9406: PUSH
9407: LD_INT 1
9409: PUSH
9410: LD_INT 1
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: LIST
9417: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9418: LD_VAR 0 6
9422: PPUSH
9423: CALL_OW 264
9427: PUSH
9428: LD_INT 29
9430: PUSH
9431: EMPTY
9432: LIST
9433: IN
9434: IFFALSE 9455
// points := [ 70 , 200 , 400 ] ;
9436: LD_ADDR_VAR 0 9
9440: PUSH
9441: LD_INT 70
9443: PUSH
9444: LD_INT 200
9446: PUSH
9447: LD_INT 400
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: LIST
9454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9455: LD_VAR 0 6
9459: PPUSH
9460: CALL_OW 264
9464: PUSH
9465: LD_INT 14
9467: PUSH
9468: LD_INT 53
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: IN
9475: IFFALSE 9496
// points := [ 40 , 10 , 20 ] ;
9477: LD_ADDR_VAR 0 9
9481: PUSH
9482: LD_INT 40
9484: PUSH
9485: LD_INT 10
9487: PUSH
9488: LD_INT 20
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9496: LD_VAR 0 6
9500: PPUSH
9501: CALL_OW 264
9505: PUSH
9506: LD_INT 9
9508: PUSH
9509: EMPTY
9510: LIST
9511: IN
9512: IFFALSE 9533
// points := [ 5 , 70 , 20 ] ;
9514: LD_ADDR_VAR 0 9
9518: PUSH
9519: LD_INT 5
9521: PUSH
9522: LD_INT 70
9524: PUSH
9525: LD_INT 20
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: LIST
9532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9533: LD_VAR 0 6
9537: PPUSH
9538: CALL_OW 264
9542: PUSH
9543: LD_INT 10
9545: PUSH
9546: EMPTY
9547: LIST
9548: IN
9549: IFFALSE 9570
// points := [ 35 , 110 , 70 ] ;
9551: LD_ADDR_VAR 0 9
9555: PUSH
9556: LD_INT 35
9558: PUSH
9559: LD_INT 110
9561: PUSH
9562: LD_INT 70
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: LIST
9569: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9570: LD_VAR 0 6
9574: PPUSH
9575: CALL_OW 265
9579: PUSH
9580: LD_INT 25
9582: EQUAL
9583: IFFALSE 9604
// points := [ 80 , 65 , 100 ] ;
9585: LD_ADDR_VAR 0 9
9589: PUSH
9590: LD_INT 80
9592: PUSH
9593: LD_INT 65
9595: PUSH
9596: LD_INT 100
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9604: LD_VAR 0 6
9608: PPUSH
9609: CALL_OW 263
9613: PUSH
9614: LD_INT 1
9616: EQUAL
9617: IFFALSE 9652
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9619: LD_ADDR_VAR 0 10
9623: PUSH
9624: LD_VAR 0 10
9628: PUSH
9629: LD_VAR 0 6
9633: PPUSH
9634: CALL_OW 311
9638: PPUSH
9639: LD_INT 3
9641: PPUSH
9642: CALL_OW 259
9646: PUSH
9647: LD_INT 4
9649: MUL
9650: MUL
9651: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9652: LD_VAR 0 6
9656: PPUSH
9657: CALL_OW 263
9661: PUSH
9662: LD_INT 2
9664: EQUAL
9665: IFFALSE 9716
// begin j := IsControledBy ( i ) ;
9667: LD_ADDR_VAR 0 7
9671: PUSH
9672: LD_VAR 0 6
9676: PPUSH
9677: CALL_OW 312
9681: ST_TO_ADDR
// if j then
9682: LD_VAR 0 7
9686: IFFALSE 9716
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9688: LD_ADDR_VAR 0 10
9692: PUSH
9693: LD_VAR 0 10
9697: PUSH
9698: LD_VAR 0 7
9702: PPUSH
9703: LD_INT 3
9705: PPUSH
9706: CALL_OW 259
9710: PUSH
9711: LD_INT 3
9713: MUL
9714: MUL
9715: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9716: LD_VAR 0 6
9720: PPUSH
9721: CALL_OW 264
9725: PUSH
9726: LD_INT 5
9728: PUSH
9729: LD_INT 6
9731: PUSH
9732: LD_INT 46
9734: PUSH
9735: LD_INT 44
9737: PUSH
9738: LD_INT 47
9740: PUSH
9741: LD_INT 45
9743: PUSH
9744: LD_INT 28
9746: PUSH
9747: LD_INT 7
9749: PUSH
9750: LD_INT 27
9752: PUSH
9753: LD_INT 29
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: IN
9768: IFFALSE 9788
9770: PUSH
9771: LD_VAR 0 1
9775: PPUSH
9776: LD_INT 52
9778: PPUSH
9779: CALL_OW 321
9783: PUSH
9784: LD_INT 2
9786: EQUAL
9787: AND
9788: IFFALSE 9805
// bpoints := bpoints * 1.2 ;
9790: LD_ADDR_VAR 0 10
9794: PUSH
9795: LD_VAR 0 10
9799: PUSH
9800: LD_REAL  1.20000000000000E+0000
9803: MUL
9804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9805: LD_VAR 0 6
9809: PPUSH
9810: CALL_OW 264
9814: PUSH
9815: LD_INT 6
9817: PUSH
9818: LD_INT 46
9820: PUSH
9821: LD_INT 47
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: LIST
9828: IN
9829: IFFALSE 9846
// bpoints := bpoints * 1.2 ;
9831: LD_ADDR_VAR 0 10
9835: PUSH
9836: LD_VAR 0 10
9840: PUSH
9841: LD_REAL  1.20000000000000E+0000
9844: MUL
9845: ST_TO_ADDR
// end ; unit_building :
9846: GO 9860
9848: LD_INT 3
9850: DOUBLE
9851: EQUAL
9852: IFTRUE 9856
9854: GO 9859
9856: POP
// ; end ;
9857: GO 9860
9859: POP
// for j = 1 to 3 do
9860: LD_ADDR_VAR 0 7
9864: PUSH
9865: DOUBLE
9866: LD_INT 1
9868: DEC
9869: ST_TO_ADDR
9870: LD_INT 3
9872: PUSH
9873: FOR_TO
9874: IFFALSE 9927
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9876: LD_ADDR_VAR 0 5
9880: PUSH
9881: LD_VAR 0 5
9885: PPUSH
9886: LD_VAR 0 7
9890: PPUSH
9891: LD_VAR 0 5
9895: PUSH
9896: LD_VAR 0 7
9900: ARRAY
9901: PUSH
9902: LD_VAR 0 9
9906: PUSH
9907: LD_VAR 0 7
9911: ARRAY
9912: PUSH
9913: LD_VAR 0 10
9917: MUL
9918: PLUS
9919: PPUSH
9920: CALL_OW 1
9924: ST_TO_ADDR
9925: GO 9873
9927: POP
9928: POP
// end ;
9929: GO 8402
9931: POP
9932: POP
// result := Replace ( result , 4 , tmp ) ;
9933: LD_ADDR_VAR 0 5
9937: PUSH
9938: LD_VAR 0 5
9942: PPUSH
9943: LD_INT 4
9945: PPUSH
9946: LD_VAR 0 8
9950: PPUSH
9951: CALL_OW 1
9955: ST_TO_ADDR
// end ;
9956: LD_VAR 0 5
9960: RET
// export function DangerAtRange ( unit , range ) ; begin
9961: LD_INT 0
9963: PPUSH
// if not unit then
9964: LD_VAR 0 1
9968: NOT
9969: IFFALSE 9973
// exit ;
9971: GO 10018
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9973: LD_ADDR_VAR 0 3
9977: PUSH
9978: LD_VAR 0 1
9982: PPUSH
9983: CALL_OW 255
9987: PPUSH
9988: LD_VAR 0 1
9992: PPUSH
9993: CALL_OW 250
9997: PPUSH
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 251
10007: PPUSH
10008: LD_VAR 0 2
10012: PPUSH
10013: CALL 8252 0 4
10017: ST_TO_ADDR
// end ;
10018: LD_VAR 0 3
10022: RET
// export function DangerInArea ( side , area ) ; begin
10023: LD_INT 0
10025: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10026: LD_ADDR_VAR 0 3
10030: PUSH
10031: LD_VAR 0 2
10035: PPUSH
10036: LD_INT 81
10038: PUSH
10039: LD_VAR 0 1
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 70
10052: ST_TO_ADDR
// end ;
10053: LD_VAR 0 3
10057: RET
// export function IsExtension ( b ) ; begin
10058: LD_INT 0
10060: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10061: LD_ADDR_VAR 0 2
10065: PUSH
10066: LD_VAR 0 1
10070: PUSH
10071: LD_INT 23
10073: PUSH
10074: LD_INT 20
10076: PUSH
10077: LD_INT 22
10079: PUSH
10080: LD_INT 17
10082: PUSH
10083: LD_INT 24
10085: PUSH
10086: LD_INT 21
10088: PUSH
10089: LD_INT 19
10091: PUSH
10092: LD_INT 16
10094: PUSH
10095: LD_INT 25
10097: PUSH
10098: LD_INT 18
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: IN
10113: ST_TO_ADDR
// end ;
10114: LD_VAR 0 2
10118: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10119: LD_INT 0
10121: PPUSH
10122: PPUSH
10123: PPUSH
// result := [ ] ;
10124: LD_ADDR_VAR 0 4
10128: PUSH
10129: EMPTY
10130: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10131: LD_ADDR_VAR 0 5
10135: PUSH
10136: LD_VAR 0 2
10140: PPUSH
10141: LD_INT 21
10143: PUSH
10144: LD_INT 3
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PPUSH
10151: CALL_OW 70
10155: ST_TO_ADDR
// if not tmp then
10156: LD_VAR 0 5
10160: NOT
10161: IFFALSE 10165
// exit ;
10163: GO 10229
// if checkLink then
10165: LD_VAR 0 3
10169: IFFALSE 10219
// begin for i in tmp do
10171: LD_ADDR_VAR 0 6
10175: PUSH
10176: LD_VAR 0 5
10180: PUSH
10181: FOR_IN
10182: IFFALSE 10217
// if GetBase ( i ) <> base then
10184: LD_VAR 0 6
10188: PPUSH
10189: CALL_OW 274
10193: PUSH
10194: LD_VAR 0 1
10198: NONEQUAL
10199: IFFALSE 10215
// ComLinkToBase ( base , i ) ;
10201: LD_VAR 0 1
10205: PPUSH
10206: LD_VAR 0 6
10210: PPUSH
10211: CALL_OW 169
10215: GO 10181
10217: POP
10218: POP
// end ; result := tmp ;
10219: LD_ADDR_VAR 0 4
10223: PUSH
10224: LD_VAR 0 5
10228: ST_TO_ADDR
// end ;
10229: LD_VAR 0 4
10233: RET
// export function ComComplete ( units , b ) ; var i ; begin
10234: LD_INT 0
10236: PPUSH
10237: PPUSH
// if not units then
10238: LD_VAR 0 1
10242: NOT
10243: IFFALSE 10247
// exit ;
10245: GO 10337
// for i in units do
10247: LD_ADDR_VAR 0 4
10251: PUSH
10252: LD_VAR 0 1
10256: PUSH
10257: FOR_IN
10258: IFFALSE 10335
// if BuildingStatus ( b ) = bs_build then
10260: LD_VAR 0 2
10264: PPUSH
10265: CALL_OW 461
10269: PUSH
10270: LD_INT 1
10272: EQUAL
10273: IFFALSE 10333
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10275: LD_VAR 0 4
10279: PPUSH
10280: LD_STRING h
10282: PUSH
10283: LD_VAR 0 2
10287: PPUSH
10288: CALL_OW 250
10292: PUSH
10293: LD_VAR 0 2
10297: PPUSH
10298: CALL_OW 251
10302: PUSH
10303: LD_VAR 0 2
10307: PUSH
10308: LD_INT 0
10310: PUSH
10311: LD_INT 0
10313: PUSH
10314: LD_INT 0
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: EMPTY
10327: LIST
10328: PPUSH
10329: CALL_OW 446
10333: GO 10257
10335: POP
10336: POP
// end ;
10337: LD_VAR 0 3
10341: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10342: LD_INT 0
10344: PPUSH
10345: PPUSH
10346: PPUSH
10347: PPUSH
10348: PPUSH
10349: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10350: LD_VAR 0 1
10354: NOT
10355: IFTRUE 10372
10357: PUSH
10358: LD_VAR 0 1
10362: PPUSH
10363: CALL_OW 263
10367: PUSH
10368: LD_INT 2
10370: NONEQUAL
10371: OR
10372: IFFALSE 10376
// exit ;
10374: GO 10692
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10376: LD_ADDR_VAR 0 6
10380: PUSH
10381: LD_INT 22
10383: PUSH
10384: LD_VAR 0 1
10388: PPUSH
10389: CALL_OW 255
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 2
10400: PUSH
10401: LD_INT 30
10403: PUSH
10404: LD_INT 36
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 34
10413: PUSH
10414: LD_INT 31
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PPUSH
10430: CALL_OW 69
10434: ST_TO_ADDR
// if not tmp then
10435: LD_VAR 0 6
10439: NOT
10440: IFFALSE 10444
// exit ;
10442: GO 10692
// result := [ ] ;
10444: LD_ADDR_VAR 0 2
10448: PUSH
10449: EMPTY
10450: ST_TO_ADDR
// for i in tmp do
10451: LD_ADDR_VAR 0 3
10455: PUSH
10456: LD_VAR 0 6
10460: PUSH
10461: FOR_IN
10462: IFFALSE 10533
// begin t := UnitsInside ( i ) ;
10464: LD_ADDR_VAR 0 4
10468: PUSH
10469: LD_VAR 0 3
10473: PPUSH
10474: CALL_OW 313
10478: ST_TO_ADDR
// if t then
10479: LD_VAR 0 4
10483: IFFALSE 10531
// for j in t do
10485: LD_ADDR_VAR 0 7
10489: PUSH
10490: LD_VAR 0 4
10494: PUSH
10495: FOR_IN
10496: IFFALSE 10529
// result := Replace ( result , result + 1 , j ) ;
10498: LD_ADDR_VAR 0 2
10502: PUSH
10503: LD_VAR 0 2
10507: PPUSH
10508: LD_VAR 0 2
10512: PUSH
10513: LD_INT 1
10515: PLUS
10516: PPUSH
10517: LD_VAR 0 7
10521: PPUSH
10522: CALL_OW 1
10526: ST_TO_ADDR
10527: GO 10495
10529: POP
10530: POP
// end ;
10531: GO 10461
10533: POP
10534: POP
// if not result then
10535: LD_VAR 0 2
10539: NOT
10540: IFFALSE 10544
// exit ;
10542: GO 10692
// mech := result [ 1 ] ;
10544: LD_ADDR_VAR 0 5
10548: PUSH
10549: LD_VAR 0 2
10553: PUSH
10554: LD_INT 1
10556: ARRAY
10557: ST_TO_ADDR
// if result > 1 then
10558: LD_VAR 0 2
10562: PUSH
10563: LD_INT 1
10565: GREATER
10566: IFFALSE 10678
// begin for i = 2 to result do
10568: LD_ADDR_VAR 0 3
10572: PUSH
10573: DOUBLE
10574: LD_INT 2
10576: DEC
10577: ST_TO_ADDR
10578: LD_VAR 0 2
10582: PUSH
10583: FOR_TO
10584: IFFALSE 10676
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10586: LD_ADDR_VAR 0 4
10590: PUSH
10591: LD_VAR 0 2
10595: PUSH
10596: LD_VAR 0 3
10600: ARRAY
10601: PPUSH
10602: LD_INT 3
10604: PPUSH
10605: CALL_OW 259
10609: PUSH
10610: LD_VAR 0 2
10614: PUSH
10615: LD_VAR 0 3
10619: ARRAY
10620: PPUSH
10621: CALL_OW 432
10625: MINUS
10626: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10627: LD_VAR 0 4
10631: PUSH
10632: LD_VAR 0 5
10636: PPUSH
10637: LD_INT 3
10639: PPUSH
10640: CALL_OW 259
10644: PUSH
10645: LD_VAR 0 5
10649: PPUSH
10650: CALL_OW 432
10654: MINUS
10655: GREATEREQUAL
10656: IFFALSE 10674
// mech := result [ i ] ;
10658: LD_ADDR_VAR 0 5
10662: PUSH
10663: LD_VAR 0 2
10667: PUSH
10668: LD_VAR 0 3
10672: ARRAY
10673: ST_TO_ADDR
// end ;
10674: GO 10583
10676: POP
10677: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10678: LD_VAR 0 1
10682: PPUSH
10683: LD_VAR 0 5
10687: PPUSH
10688: CALL_OW 135
// end ;
10692: LD_VAR 0 2
10696: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10697: LD_INT 0
10699: PPUSH
10700: PPUSH
10701: PPUSH
10702: PPUSH
10703: PPUSH
10704: PPUSH
10705: PPUSH
10706: PPUSH
10707: PPUSH
10708: PPUSH
10709: PPUSH
10710: PPUSH
10711: PPUSH
// result := [ ] ;
10712: LD_ADDR_VAR 0 7
10716: PUSH
10717: EMPTY
10718: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10719: LD_VAR 0 1
10723: PPUSH
10724: CALL_OW 266
10728: PUSH
10729: LD_INT 0
10731: PUSH
10732: LD_INT 1
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: IN
10739: NOT
10740: IFFALSE 10744
// exit ;
10742: GO 12384
// if name then
10744: LD_VAR 0 3
10748: IFFALSE 10764
// SetBName ( base_dep , name ) ;
10750: LD_VAR 0 1
10754: PPUSH
10755: LD_VAR 0 3
10759: PPUSH
10760: CALL_OW 500
// base := GetBase ( base_dep ) ;
10764: LD_ADDR_VAR 0 15
10768: PUSH
10769: LD_VAR 0 1
10773: PPUSH
10774: CALL_OW 274
10778: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10779: LD_ADDR_VAR 0 16
10783: PUSH
10784: LD_VAR 0 1
10788: PPUSH
10789: CALL_OW 255
10793: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10794: LD_ADDR_VAR 0 17
10798: PUSH
10799: LD_VAR 0 1
10803: PPUSH
10804: CALL_OW 248
10808: ST_TO_ADDR
// if sources then
10809: LD_VAR 0 5
10813: IFFALSE 10860
// for i = 1 to 3 do
10815: LD_ADDR_VAR 0 8
10819: PUSH
10820: DOUBLE
10821: LD_INT 1
10823: DEC
10824: ST_TO_ADDR
10825: LD_INT 3
10827: PUSH
10828: FOR_TO
10829: IFFALSE 10858
// AddResourceType ( base , i , sources [ i ] ) ;
10831: LD_VAR 0 15
10835: PPUSH
10836: LD_VAR 0 8
10840: PPUSH
10841: LD_VAR 0 5
10845: PUSH
10846: LD_VAR 0 8
10850: ARRAY
10851: PPUSH
10852: CALL_OW 276
10856: GO 10828
10858: POP
10859: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10860: LD_ADDR_VAR 0 18
10864: PUSH
10865: LD_VAR 0 15
10869: PPUSH
10870: LD_VAR 0 2
10874: PPUSH
10875: LD_INT 1
10877: PPUSH
10878: CALL 10119 0 3
10882: ST_TO_ADDR
// InitHc ;
10883: CALL_OW 19
// InitUc ;
10887: CALL_OW 18
// uc_side := side ;
10891: LD_ADDR_OWVAR 20
10895: PUSH
10896: LD_VAR 0 16
10900: ST_TO_ADDR
// uc_nation := nation ;
10901: LD_ADDR_OWVAR 21
10905: PUSH
10906: LD_VAR 0 17
10910: ST_TO_ADDR
// if buildings then
10911: LD_VAR 0 18
10915: IFFALSE 12243
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10917: LD_ADDR_VAR 0 19
10921: PUSH
10922: LD_VAR 0 18
10926: PPUSH
10927: LD_INT 2
10929: PUSH
10930: LD_INT 30
10932: PUSH
10933: LD_INT 29
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 30
10942: PUSH
10943: LD_INT 30
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: PPUSH
10955: CALL_OW 72
10959: ST_TO_ADDR
// if tmp then
10960: LD_VAR 0 19
10964: IFFALSE 11012
// for i in tmp do
10966: LD_ADDR_VAR 0 8
10970: PUSH
10971: LD_VAR 0 19
10975: PUSH
10976: FOR_IN
10977: IFFALSE 11010
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10979: LD_VAR 0 8
10983: PPUSH
10984: CALL_OW 250
10988: PPUSH
10989: LD_VAR 0 8
10993: PPUSH
10994: CALL_OW 251
10998: PPUSH
10999: LD_VAR 0 16
11003: PPUSH
11004: CALL_OW 441
11008: GO 10976
11010: POP
11011: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11012: LD_VAR 0 18
11016: PPUSH
11017: LD_INT 2
11019: PUSH
11020: LD_INT 30
11022: PUSH
11023: LD_INT 32
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 30
11032: PUSH
11033: LD_INT 33
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 72
11049: IFFALSE 11137
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11051: LD_ADDR_VAR 0 8
11055: PUSH
11056: LD_VAR 0 18
11060: PPUSH
11061: LD_INT 2
11063: PUSH
11064: LD_INT 30
11066: PUSH
11067: LD_INT 32
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 30
11076: PUSH
11077: LD_INT 33
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: LIST
11088: PPUSH
11089: CALL_OW 72
11093: PUSH
11094: FOR_IN
11095: IFFALSE 11135
// begin if not GetBWeapon ( i ) then
11097: LD_VAR 0 8
11101: PPUSH
11102: CALL_OW 269
11106: NOT
11107: IFFALSE 11133
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11109: LD_VAR 0 8
11113: PPUSH
11114: LD_VAR 0 8
11118: PPUSH
11119: LD_VAR 0 2
11123: PPUSH
11124: CALL 12389 0 2
11128: PPUSH
11129: CALL_OW 431
// end ;
11133: GO 11094
11135: POP
11136: POP
// end ; for i = 1 to personel do
11137: LD_ADDR_VAR 0 8
11141: PUSH
11142: DOUBLE
11143: LD_INT 1
11145: DEC
11146: ST_TO_ADDR
11147: LD_VAR 0 6
11151: PUSH
11152: FOR_TO
11153: IFFALSE 12223
// begin if i > 4 then
11155: LD_VAR 0 8
11159: PUSH
11160: LD_INT 4
11162: GREATER
11163: IFFALSE 11167
// break ;
11165: GO 12223
// case i of 1 :
11167: LD_VAR 0 8
11171: PUSH
11172: LD_INT 1
11174: DOUBLE
11175: EQUAL
11176: IFTRUE 11180
11178: GO 11260
11180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11181: LD_ADDR_VAR 0 12
11185: PUSH
11186: LD_VAR 0 18
11190: PPUSH
11191: LD_INT 22
11193: PUSH
11194: LD_VAR 0 16
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 58
11205: PUSH
11206: EMPTY
11207: LIST
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: LD_INT 30
11214: PUSH
11215: LD_INT 32
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 30
11224: PUSH
11225: LD_INT 4
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 30
11234: PUSH
11235: LD_INT 5
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: PPUSH
11253: CALL_OW 72
11257: ST_TO_ADDR
11258: GO 11482
11260: LD_INT 2
11262: DOUBLE
11263: EQUAL
11264: IFTRUE 11268
11266: GO 11330
11268: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11269: LD_ADDR_VAR 0 12
11273: PUSH
11274: LD_VAR 0 18
11278: PPUSH
11279: LD_INT 22
11281: PUSH
11282: LD_VAR 0 16
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: LD_INT 30
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 30
11306: PUSH
11307: LD_INT 1
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PPUSH
11323: CALL_OW 72
11327: ST_TO_ADDR
11328: GO 11482
11330: LD_INT 3
11332: DOUBLE
11333: EQUAL
11334: IFTRUE 11338
11336: GO 11400
11338: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11339: LD_ADDR_VAR 0 12
11343: PUSH
11344: LD_VAR 0 18
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_VAR 0 16
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 2
11363: PUSH
11364: LD_INT 30
11366: PUSH
11367: LD_INT 2
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: LD_INT 30
11376: PUSH
11377: LD_INT 3
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PPUSH
11393: CALL_OW 72
11397: ST_TO_ADDR
11398: GO 11482
11400: LD_INT 4
11402: DOUBLE
11403: EQUAL
11404: IFTRUE 11408
11406: GO 11481
11408: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11409: LD_ADDR_VAR 0 12
11413: PUSH
11414: LD_VAR 0 18
11418: PPUSH
11419: LD_INT 22
11421: PUSH
11422: LD_VAR 0 16
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: LD_INT 2
11433: PUSH
11434: LD_INT 30
11436: PUSH
11437: LD_INT 6
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 30
11446: PUSH
11447: LD_INT 7
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 30
11456: PUSH
11457: LD_INT 8
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 72
11478: ST_TO_ADDR
11479: GO 11482
11481: POP
// if i = 1 then
11482: LD_VAR 0 8
11486: PUSH
11487: LD_INT 1
11489: EQUAL
11490: IFFALSE 11601
// begin tmp := [ ] ;
11492: LD_ADDR_VAR 0 19
11496: PUSH
11497: EMPTY
11498: ST_TO_ADDR
// for j in f do
11499: LD_ADDR_VAR 0 9
11503: PUSH
11504: LD_VAR 0 12
11508: PUSH
11509: FOR_IN
11510: IFFALSE 11583
// if GetBType ( j ) = b_bunker then
11512: LD_VAR 0 9
11516: PPUSH
11517: CALL_OW 266
11521: PUSH
11522: LD_INT 32
11524: EQUAL
11525: IFFALSE 11552
// tmp := Insert ( tmp , 1 , j ) else
11527: LD_ADDR_VAR 0 19
11531: PUSH
11532: LD_VAR 0 19
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: LD_VAR 0 9
11544: PPUSH
11545: CALL_OW 2
11549: ST_TO_ADDR
11550: GO 11581
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11552: LD_ADDR_VAR 0 19
11556: PUSH
11557: LD_VAR 0 19
11561: PPUSH
11562: LD_VAR 0 19
11566: PUSH
11567: LD_INT 1
11569: PLUS
11570: PPUSH
11571: LD_VAR 0 9
11575: PPUSH
11576: CALL_OW 2
11580: ST_TO_ADDR
11581: GO 11509
11583: POP
11584: POP
// if tmp then
11585: LD_VAR 0 19
11589: IFFALSE 11601
// f := tmp ;
11591: LD_ADDR_VAR 0 12
11595: PUSH
11596: LD_VAR 0 19
11600: ST_TO_ADDR
// end ; x := personel [ i ] ;
11601: LD_ADDR_VAR 0 13
11605: PUSH
11606: LD_VAR 0 6
11610: PUSH
11611: LD_VAR 0 8
11615: ARRAY
11616: ST_TO_ADDR
// if x = - 1 then
11617: LD_VAR 0 13
11621: PUSH
11622: LD_INT 1
11624: NEG
11625: EQUAL
11626: IFFALSE 11837
// begin for j in f do
11628: LD_ADDR_VAR 0 9
11632: PUSH
11633: LD_VAR 0 12
11637: PUSH
11638: FOR_IN
11639: IFFALSE 11833
// repeat InitHc ;
11641: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11645: LD_VAR 0 9
11649: PPUSH
11650: CALL_OW 266
11654: PUSH
11655: LD_INT 5
11657: EQUAL
11658: IFFALSE 11728
// begin if UnitsInside ( j ) < 3 then
11660: LD_VAR 0 9
11664: PPUSH
11665: CALL_OW 313
11669: PUSH
11670: LD_INT 3
11672: LESS
11673: IFFALSE 11709
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11675: LD_INT 0
11677: PPUSH
11678: LD_INT 5
11680: PUSH
11681: LD_INT 8
11683: PUSH
11684: LD_INT 9
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: PUSH
11692: LD_VAR 0 17
11696: ARRAY
11697: PPUSH
11698: LD_VAR 0 4
11702: PPUSH
11703: CALL_OW 380
11707: GO 11726
// PrepareHuman ( false , i , skill ) ;
11709: LD_INT 0
11711: PPUSH
11712: LD_VAR 0 8
11716: PPUSH
11717: LD_VAR 0 4
11721: PPUSH
11722: CALL_OW 380
// end else
11726: GO 11745
// PrepareHuman ( false , i , skill ) ;
11728: LD_INT 0
11730: PPUSH
11731: LD_VAR 0 8
11735: PPUSH
11736: LD_VAR 0 4
11740: PPUSH
11741: CALL_OW 380
// un := CreateHuman ;
11745: LD_ADDR_VAR 0 14
11749: PUSH
11750: CALL_OW 44
11754: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11755: LD_ADDR_VAR 0 7
11759: PUSH
11760: LD_VAR 0 7
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: LD_VAR 0 14
11772: PPUSH
11773: CALL_OW 2
11777: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11778: LD_VAR 0 14
11782: PPUSH
11783: LD_VAR 0 9
11787: PPUSH
11788: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11792: LD_VAR 0 9
11796: PPUSH
11797: CALL_OW 313
11801: PUSH
11802: LD_INT 6
11804: EQUAL
11805: IFTRUE 11829
11807: PUSH
11808: LD_VAR 0 9
11812: PPUSH
11813: CALL_OW 266
11817: PUSH
11818: LD_INT 32
11820: PUSH
11821: LD_INT 31
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: IN
11828: OR
11829: IFFALSE 11641
11831: GO 11638
11833: POP
11834: POP
// end else
11835: GO 12221
// for j = 1 to x do
11837: LD_ADDR_VAR 0 9
11841: PUSH
11842: DOUBLE
11843: LD_INT 1
11845: DEC
11846: ST_TO_ADDR
11847: LD_VAR 0 13
11851: PUSH
11852: FOR_TO
11853: IFFALSE 12219
// begin InitHc ;
11855: CALL_OW 19
// if not f then
11859: LD_VAR 0 12
11863: NOT
11864: IFFALSE 11953
// begin PrepareHuman ( false , i , skill ) ;
11866: LD_INT 0
11868: PPUSH
11869: LD_VAR 0 8
11873: PPUSH
11874: LD_VAR 0 4
11878: PPUSH
11879: CALL_OW 380
// un := CreateHuman ;
11883: LD_ADDR_VAR 0 14
11887: PUSH
11888: CALL_OW 44
11892: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11893: LD_ADDR_VAR 0 7
11897: PUSH
11898: LD_VAR 0 7
11902: PPUSH
11903: LD_INT 1
11905: PPUSH
11906: LD_VAR 0 14
11910: PPUSH
11911: CALL_OW 2
11915: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11916: LD_VAR 0 14
11920: PPUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 250
11930: PPUSH
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 251
11940: PPUSH
11941: LD_INT 10
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 50
// continue ;
11951: GO 11852
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11953: LD_VAR 0 12
11957: PUSH
11958: LD_INT 1
11960: ARRAY
11961: PPUSH
11962: CALL_OW 313
11966: IFFALSE 11994
11968: PUSH
11969: LD_VAR 0 12
11973: PUSH
11974: LD_INT 1
11976: ARRAY
11977: PPUSH
11978: CALL_OW 266
11982: PUSH
11983: LD_INT 32
11985: PUSH
11986: LD_INT 31
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: IN
11993: AND
11994: IFTRUE 12015
11996: PUSH
11997: LD_VAR 0 12
12001: PUSH
12002: LD_INT 1
12004: ARRAY
12005: PPUSH
12006: CALL_OW 313
12010: PUSH
12011: LD_INT 6
12013: EQUAL
12014: OR
12015: IFFALSE 12035
// f := Delete ( f , 1 ) ;
12017: LD_ADDR_VAR 0 12
12021: PUSH
12022: LD_VAR 0 12
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: CALL_OW 3
12034: ST_TO_ADDR
// if not f then
12035: LD_VAR 0 12
12039: NOT
12040: IFFALSE 12058
// begin x := x + 2 ;
12042: LD_ADDR_VAR 0 13
12046: PUSH
12047: LD_VAR 0 13
12051: PUSH
12052: LD_INT 2
12054: PLUS
12055: ST_TO_ADDR
// continue ;
12056: GO 11852
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12058: LD_VAR 0 12
12062: PUSH
12063: LD_INT 1
12065: ARRAY
12066: PPUSH
12067: CALL_OW 266
12071: PUSH
12072: LD_INT 5
12074: EQUAL
12075: IFFALSE 12149
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12077: LD_VAR 0 12
12081: PUSH
12082: LD_INT 1
12084: ARRAY
12085: PPUSH
12086: CALL_OW 313
12090: PUSH
12091: LD_INT 3
12093: LESS
12094: IFFALSE 12130
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12096: LD_INT 0
12098: PPUSH
12099: LD_INT 5
12101: PUSH
12102: LD_INT 8
12104: PUSH
12105: LD_INT 9
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: PUSH
12113: LD_VAR 0 17
12117: ARRAY
12118: PPUSH
12119: LD_VAR 0 4
12123: PPUSH
12124: CALL_OW 380
12128: GO 12147
// PrepareHuman ( false , i , skill ) ;
12130: LD_INT 0
12132: PPUSH
12133: LD_VAR 0 8
12137: PPUSH
12138: LD_VAR 0 4
12142: PPUSH
12143: CALL_OW 380
// end else
12147: GO 12166
// PrepareHuman ( false , i , skill ) ;
12149: LD_INT 0
12151: PPUSH
12152: LD_VAR 0 8
12156: PPUSH
12157: LD_VAR 0 4
12161: PPUSH
12162: CALL_OW 380
// un := CreateHuman ;
12166: LD_ADDR_VAR 0 14
12170: PUSH
12171: CALL_OW 44
12175: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12176: LD_ADDR_VAR 0 7
12180: PUSH
12181: LD_VAR 0 7
12185: PPUSH
12186: LD_INT 1
12188: PPUSH
12189: LD_VAR 0 14
12193: PPUSH
12194: CALL_OW 2
12198: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12199: LD_VAR 0 14
12203: PPUSH
12204: LD_VAR 0 12
12208: PUSH
12209: LD_INT 1
12211: ARRAY
12212: PPUSH
12213: CALL_OW 52
// end ;
12217: GO 11852
12219: POP
12220: POP
// end ;
12221: GO 11152
12223: POP
12224: POP
// result := result ^ buildings ;
12225: LD_ADDR_VAR 0 7
12229: PUSH
12230: LD_VAR 0 7
12234: PUSH
12235: LD_VAR 0 18
12239: ADD
12240: ST_TO_ADDR
// end else
12241: GO 12384
// begin for i = 1 to personel do
12243: LD_ADDR_VAR 0 8
12247: PUSH
12248: DOUBLE
12249: LD_INT 1
12251: DEC
12252: ST_TO_ADDR
12253: LD_VAR 0 6
12257: PUSH
12258: FOR_TO
12259: IFFALSE 12382
// begin if i > 4 then
12261: LD_VAR 0 8
12265: PUSH
12266: LD_INT 4
12268: GREATER
12269: IFFALSE 12273
// break ;
12271: GO 12382
// x := personel [ i ] ;
12273: LD_ADDR_VAR 0 13
12277: PUSH
12278: LD_VAR 0 6
12282: PUSH
12283: LD_VAR 0 8
12287: ARRAY
12288: ST_TO_ADDR
// if x = - 1 then
12289: LD_VAR 0 13
12293: PUSH
12294: LD_INT 1
12296: NEG
12297: EQUAL
12298: IFFALSE 12302
// continue ;
12300: GO 12258
// PrepareHuman ( false , i , skill ) ;
12302: LD_INT 0
12304: PPUSH
12305: LD_VAR 0 8
12309: PPUSH
12310: LD_VAR 0 4
12314: PPUSH
12315: CALL_OW 380
// un := CreateHuman ;
12319: LD_ADDR_VAR 0 14
12323: PUSH
12324: CALL_OW 44
12328: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12329: LD_VAR 0 14
12333: PPUSH
12334: LD_VAR 0 1
12338: PPUSH
12339: CALL_OW 250
12343: PPUSH
12344: LD_VAR 0 1
12348: PPUSH
12349: CALL_OW 251
12353: PPUSH
12354: LD_INT 10
12356: PPUSH
12357: LD_INT 0
12359: PPUSH
12360: CALL_OW 50
// result := result ^ un ;
12364: LD_ADDR_VAR 0 7
12368: PUSH
12369: LD_VAR 0 7
12373: PUSH
12374: LD_VAR 0 14
12378: ADD
12379: ST_TO_ADDR
// end ;
12380: GO 12258
12382: POP
12383: POP
// end ; end ;
12384: LD_VAR 0 7
12388: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12389: LD_INT 0
12391: PPUSH
12392: PPUSH
12393: PPUSH
12394: PPUSH
12395: PPUSH
12396: PPUSH
12397: PPUSH
12398: PPUSH
12399: PPUSH
12400: PPUSH
12401: PPUSH
12402: PPUSH
12403: PPUSH
12404: PPUSH
12405: PPUSH
12406: PPUSH
// result := false ;
12407: LD_ADDR_VAR 0 3
12411: PUSH
12412: LD_INT 0
12414: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12415: LD_VAR 0 1
12419: NOT
12420: IFTRUE 12445
12422: PUSH
12423: LD_VAR 0 1
12427: PPUSH
12428: CALL_OW 266
12432: PUSH
12433: LD_INT 32
12435: PUSH
12436: LD_INT 33
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: IN
12443: NOT
12444: OR
12445: IFFALSE 12449
// exit ;
12447: GO 13584
// nat := GetNation ( tower ) ;
12449: LD_ADDR_VAR 0 12
12453: PUSH
12454: LD_VAR 0 1
12458: PPUSH
12459: CALL_OW 248
12463: ST_TO_ADDR
// side := GetSide ( tower ) ;
12464: LD_ADDR_VAR 0 16
12468: PUSH
12469: LD_VAR 0 1
12473: PPUSH
12474: CALL_OW 255
12478: ST_TO_ADDR
// x := GetX ( tower ) ;
12479: LD_ADDR_VAR 0 10
12483: PUSH
12484: LD_VAR 0 1
12488: PPUSH
12489: CALL_OW 250
12493: ST_TO_ADDR
// y := GetY ( tower ) ;
12494: LD_ADDR_VAR 0 11
12498: PUSH
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 251
12508: ST_TO_ADDR
// if not x or not y then
12509: LD_VAR 0 10
12513: NOT
12514: IFTRUE 12523
12516: PUSH
12517: LD_VAR 0 11
12521: NOT
12522: OR
12523: IFFALSE 12527
// exit ;
12525: GO 13584
// weapon := 0 ;
12527: LD_ADDR_VAR 0 18
12531: PUSH
12532: LD_INT 0
12534: ST_TO_ADDR
// fac_list := [ ] ;
12535: LD_ADDR_VAR 0 17
12539: PUSH
12540: EMPTY
12541: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12542: LD_ADDR_VAR 0 6
12546: PUSH
12547: LD_VAR 0 1
12551: PPUSH
12552: CALL_OW 274
12556: PPUSH
12557: LD_VAR 0 2
12561: PPUSH
12562: LD_INT 0
12564: PPUSH
12565: CALL 10119 0 3
12569: PPUSH
12570: LD_INT 30
12572: PUSH
12573: LD_INT 3
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 72
12584: ST_TO_ADDR
// if not factories then
12585: LD_VAR 0 6
12589: NOT
12590: IFFALSE 12594
// exit ;
12592: GO 13584
// for i in factories do
12594: LD_ADDR_VAR 0 8
12598: PUSH
12599: LD_VAR 0 6
12603: PUSH
12604: FOR_IN
12605: IFFALSE 12630
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12607: LD_ADDR_VAR 0 17
12611: PUSH
12612: LD_VAR 0 17
12616: PUSH
12617: LD_VAR 0 8
12621: PPUSH
12622: CALL_OW 478
12626: UNION
12627: ST_TO_ADDR
12628: GO 12604
12630: POP
12631: POP
// if not fac_list then
12632: LD_VAR 0 17
12636: NOT
12637: IFFALSE 12641
// exit ;
12639: GO 13584
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12641: LD_ADDR_VAR 0 5
12645: PUSH
12646: LD_INT 4
12648: PUSH
12649: LD_INT 5
12651: PUSH
12652: LD_INT 9
12654: PUSH
12655: LD_INT 10
12657: PUSH
12658: LD_INT 6
12660: PUSH
12661: LD_INT 7
12663: PUSH
12664: LD_INT 11
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 27
12678: PUSH
12679: LD_INT 28
12681: PUSH
12682: LD_INT 26
12684: PUSH
12685: LD_INT 30
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 43
12696: PUSH
12697: LD_INT 44
12699: PUSH
12700: LD_INT 46
12702: PUSH
12703: LD_INT 45
12705: PUSH
12706: LD_INT 47
12708: PUSH
12709: LD_INT 49
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: LIST
12724: PUSH
12725: LD_VAR 0 12
12729: ARRAY
12730: ST_TO_ADDR
// list := list isect fac_list ;
12731: LD_ADDR_VAR 0 5
12735: PUSH
12736: LD_VAR 0 5
12740: PUSH
12741: LD_VAR 0 17
12745: ISECT
12746: ST_TO_ADDR
// if not list then
12747: LD_VAR 0 5
12751: NOT
12752: IFFALSE 12756
// exit ;
12754: GO 13584
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12756: LD_VAR 0 12
12760: PUSH
12761: LD_INT 3
12763: EQUAL
12764: IFFALSE 12776
12766: PUSH
12767: LD_INT 49
12769: PUSH
12770: LD_VAR 0 5
12774: IN
12775: AND
12776: IFFALSE 12796
12778: PUSH
12779: LD_INT 31
12781: PPUSH
12782: LD_VAR 0 16
12786: PPUSH
12787: CALL_OW 321
12791: PUSH
12792: LD_INT 2
12794: EQUAL
12795: AND
12796: IFFALSE 12856
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12798: LD_INT 22
12800: PUSH
12801: LD_VAR 0 16
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 35
12812: PUSH
12813: LD_INT 49
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 91
12822: PUSH
12823: LD_VAR 0 1
12827: PUSH
12828: LD_INT 10
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: LIST
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: LIST
12840: PPUSH
12841: CALL_OW 69
12845: NOT
12846: IFFALSE 12856
// weapon := ru_time_lapser ;
12848: LD_ADDR_VAR 0 18
12852: PUSH
12853: LD_INT 49
12855: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12856: LD_VAR 0 12
12860: PUSH
12861: LD_INT 1
12863: PUSH
12864: LD_INT 2
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: IN
12871: IFFALSE 12895
12873: PUSH
12874: LD_INT 11
12876: PUSH
12877: LD_VAR 0 5
12881: IN
12882: IFTRUE 12894
12884: PUSH
12885: LD_INT 30
12887: PUSH
12888: LD_VAR 0 5
12892: IN
12893: OR
12894: AND
12895: IFFALSE 12915
12897: PUSH
12898: LD_INT 6
12900: PPUSH
12901: LD_VAR 0 16
12905: PPUSH
12906: CALL_OW 321
12910: PUSH
12911: LD_INT 2
12913: EQUAL
12914: AND
12915: IFFALSE 13082
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12917: LD_INT 22
12919: PUSH
12920: LD_VAR 0 16
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 2
12931: PUSH
12932: LD_INT 35
12934: PUSH
12935: LD_INT 11
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 35
12944: PUSH
12945: LD_INT 30
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 91
12959: PUSH
12960: LD_VAR 0 1
12964: PUSH
12965: LD_INT 18
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: LIST
12977: PPUSH
12978: CALL_OW 69
12982: NOT
12983: IFFALSE 13059
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_VAR 0 16
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: LD_INT 30
13003: PUSH
13004: LD_INT 32
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: LD_INT 30
13013: PUSH
13014: LD_INT 33
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 91
13028: PUSH
13029: LD_VAR 0 1
13033: PUSH
13034: LD_INT 12
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: PUSH
13047: EMPTY
13048: LIST
13049: PPUSH
13050: CALL_OW 69
13054: PUSH
13055: LD_INT 2
13057: GREATER
13058: AND
13059: IFFALSE 13082
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13061: LD_ADDR_VAR 0 18
13065: PUSH
13066: LD_INT 11
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_VAR 0 12
13080: ARRAY
13081: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13082: LD_VAR 0 18
13086: NOT
13087: IFFALSE 13107
13089: PUSH
13090: LD_INT 40
13092: PPUSH
13093: LD_VAR 0 16
13097: PPUSH
13098: CALL_OW 321
13102: PUSH
13103: LD_INT 2
13105: EQUAL
13106: AND
13107: IFFALSE 13143
13109: PUSH
13110: LD_INT 7
13112: PUSH
13113: LD_VAR 0 5
13117: IN
13118: IFTRUE 13130
13120: PUSH
13121: LD_INT 28
13123: PUSH
13124: LD_VAR 0 5
13128: IN
13129: OR
13130: IFTRUE 13142
13132: PUSH
13133: LD_INT 45
13135: PUSH
13136: LD_VAR 0 5
13140: IN
13141: OR
13142: AND
13143: IFFALSE 13397
// begin hex := GetHexInfo ( x , y ) ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: LD_VAR 0 10
13154: PPUSH
13155: LD_VAR 0 11
13159: PPUSH
13160: CALL_OW 546
13164: ST_TO_ADDR
// if hex [ 1 ] then
13165: LD_VAR 0 4
13169: PUSH
13170: LD_INT 1
13172: ARRAY
13173: IFFALSE 13177
// exit ;
13175: GO 13584
// height := hex [ 2 ] ;
13177: LD_ADDR_VAR 0 15
13181: PUSH
13182: LD_VAR 0 4
13186: PUSH
13187: LD_INT 2
13189: ARRAY
13190: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13191: LD_ADDR_VAR 0 14
13195: PUSH
13196: LD_INT 0
13198: PUSH
13199: LD_INT 2
13201: PUSH
13202: LD_INT 3
13204: PUSH
13205: LD_INT 5
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: ST_TO_ADDR
// for i in tmp do
13214: LD_ADDR_VAR 0 8
13218: PUSH
13219: LD_VAR 0 14
13223: PUSH
13224: FOR_IN
13225: IFFALSE 13395
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13227: LD_ADDR_VAR 0 9
13231: PUSH
13232: LD_VAR 0 10
13236: PPUSH
13237: LD_VAR 0 8
13241: PPUSH
13242: LD_INT 5
13244: PPUSH
13245: CALL_OW 272
13249: PUSH
13250: LD_VAR 0 11
13254: PPUSH
13255: LD_VAR 0 8
13259: PPUSH
13260: LD_INT 5
13262: PPUSH
13263: CALL_OW 273
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13272: LD_VAR 0 9
13276: PUSH
13277: LD_INT 1
13279: ARRAY
13280: PPUSH
13281: LD_VAR 0 9
13285: PUSH
13286: LD_INT 2
13288: ARRAY
13289: PPUSH
13290: CALL_OW 488
13294: IFFALSE 13393
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13296: LD_ADDR_VAR 0 4
13300: PUSH
13301: LD_VAR 0 9
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PPUSH
13310: LD_VAR 0 9
13314: PUSH
13315: LD_INT 2
13317: ARRAY
13318: PPUSH
13319: CALL_OW 546
13323: ST_TO_ADDR
// if hex [ 1 ] then
13324: LD_VAR 0 4
13328: PUSH
13329: LD_INT 1
13331: ARRAY
13332: IFFALSE 13336
// continue ;
13334: GO 13224
// h := hex [ 2 ] ;
13336: LD_ADDR_VAR 0 13
13340: PUSH
13341: LD_VAR 0 4
13345: PUSH
13346: LD_INT 2
13348: ARRAY
13349: ST_TO_ADDR
// if h + 7 < height then
13350: LD_VAR 0 13
13354: PUSH
13355: LD_INT 7
13357: PLUS
13358: PUSH
13359: LD_VAR 0 15
13363: LESS
13364: IFFALSE 13393
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13366: LD_ADDR_VAR 0 18
13370: PUSH
13371: LD_INT 7
13373: PUSH
13374: LD_INT 28
13376: PUSH
13377: LD_INT 45
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: LD_VAR 0 12
13389: ARRAY
13390: ST_TO_ADDR
// break ;
13391: GO 13395
// end ; end ; end ;
13393: GO 13224
13395: POP
13396: POP
// end ; if not weapon then
13397: LD_VAR 0 18
13401: NOT
13402: IFFALSE 13462
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13404: LD_ADDR_VAR 0 5
13408: PUSH
13409: LD_VAR 0 5
13413: PUSH
13414: LD_INT 11
13416: PUSH
13417: LD_INT 30
13419: PUSH
13420: LD_INT 49
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: DIFF
13428: ST_TO_ADDR
// if not list then
13429: LD_VAR 0 5
13433: NOT
13434: IFFALSE 13438
// exit ;
13436: GO 13584
// weapon := list [ rand ( 1 , list ) ] ;
13438: LD_ADDR_VAR 0 18
13442: PUSH
13443: LD_VAR 0 5
13447: PUSH
13448: LD_INT 1
13450: PPUSH
13451: LD_VAR 0 5
13455: PPUSH
13456: CALL_OW 12
13460: ARRAY
13461: ST_TO_ADDR
// end ; if weapon then
13462: LD_VAR 0 18
13466: IFFALSE 13584
// begin tmp := CostOfWeapon ( weapon ) ;
13468: LD_ADDR_VAR 0 14
13472: PUSH
13473: LD_VAR 0 18
13477: PPUSH
13478: CALL_OW 451
13482: ST_TO_ADDR
// j := GetBase ( tower ) ;
13483: LD_ADDR_VAR 0 9
13487: PUSH
13488: LD_VAR 0 1
13492: PPUSH
13493: CALL_OW 274
13497: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13498: LD_VAR 0 9
13502: PPUSH
13503: LD_INT 1
13505: PPUSH
13506: CALL_OW 275
13510: PUSH
13511: LD_VAR 0 14
13515: PUSH
13516: LD_INT 1
13518: ARRAY
13519: GREATEREQUAL
13520: IFFALSE 13546
13522: PUSH
13523: LD_VAR 0 9
13527: PPUSH
13528: LD_INT 2
13530: PPUSH
13531: CALL_OW 275
13535: PUSH
13536: LD_VAR 0 14
13540: PUSH
13541: LD_INT 2
13543: ARRAY
13544: GREATEREQUAL
13545: AND
13546: IFFALSE 13572
13548: PUSH
13549: LD_VAR 0 9
13553: PPUSH
13554: LD_INT 3
13556: PPUSH
13557: CALL_OW 275
13561: PUSH
13562: LD_VAR 0 14
13566: PUSH
13567: LD_INT 3
13569: ARRAY
13570: GREATEREQUAL
13571: AND
13572: IFFALSE 13584
// result := weapon ;
13574: LD_ADDR_VAR 0 3
13578: PUSH
13579: LD_VAR 0 18
13583: ST_TO_ADDR
// end ; end ;
13584: LD_VAR 0 3
13588: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13589: LD_INT 0
13591: PPUSH
13592: PPUSH
// result := true ;
13593: LD_ADDR_VAR 0 3
13597: PUSH
13598: LD_INT 1
13600: ST_TO_ADDR
// if array1 = array2 then
13601: LD_VAR 0 1
13605: PUSH
13606: LD_VAR 0 2
13610: EQUAL
13611: IFFALSE 13671
// begin for i = 1 to array1 do
13613: LD_ADDR_VAR 0 4
13617: PUSH
13618: DOUBLE
13619: LD_INT 1
13621: DEC
13622: ST_TO_ADDR
13623: LD_VAR 0 1
13627: PUSH
13628: FOR_TO
13629: IFFALSE 13667
// if array1 [ i ] <> array2 [ i ] then
13631: LD_VAR 0 1
13635: PUSH
13636: LD_VAR 0 4
13640: ARRAY
13641: PUSH
13642: LD_VAR 0 2
13646: PUSH
13647: LD_VAR 0 4
13651: ARRAY
13652: NONEQUAL
13653: IFFALSE 13665
// begin result := false ;
13655: LD_ADDR_VAR 0 3
13659: PUSH
13660: LD_INT 0
13662: ST_TO_ADDR
// break ;
13663: GO 13667
// end ;
13665: GO 13628
13667: POP
13668: POP
// end else
13669: GO 13679
// result := false ;
13671: LD_ADDR_VAR 0 3
13675: PUSH
13676: LD_INT 0
13678: ST_TO_ADDR
// end ;
13679: LD_VAR 0 3
13683: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13684: LD_INT 0
13686: PPUSH
13687: PPUSH
// if not array1 or not array2 then
13688: LD_VAR 0 1
13692: NOT
13693: IFTRUE 13702
13695: PUSH
13696: LD_VAR 0 2
13700: NOT
13701: OR
13702: IFFALSE 13706
// exit ;
13704: GO 13770
// result := true ;
13706: LD_ADDR_VAR 0 3
13710: PUSH
13711: LD_INT 1
13713: ST_TO_ADDR
// for i = 1 to array1 do
13714: LD_ADDR_VAR 0 4
13718: PUSH
13719: DOUBLE
13720: LD_INT 1
13722: DEC
13723: ST_TO_ADDR
13724: LD_VAR 0 1
13728: PUSH
13729: FOR_TO
13730: IFFALSE 13768
// if array1 [ i ] <> array2 [ i ] then
13732: LD_VAR 0 1
13736: PUSH
13737: LD_VAR 0 4
13741: ARRAY
13742: PUSH
13743: LD_VAR 0 2
13747: PUSH
13748: LD_VAR 0 4
13752: ARRAY
13753: NONEQUAL
13754: IFFALSE 13766
// begin result := false ;
13756: LD_ADDR_VAR 0 3
13760: PUSH
13761: LD_INT 0
13763: ST_TO_ADDR
// break ;
13764: GO 13768
// end ;
13766: GO 13729
13768: POP
13769: POP
// end ;
13770: LD_VAR 0 3
13774: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13775: LD_INT 0
13777: PPUSH
13778: PPUSH
13779: PPUSH
// pom := GetBase ( fac ) ;
13780: LD_ADDR_VAR 0 5
13784: PUSH
13785: LD_VAR 0 1
13789: PPUSH
13790: CALL_OW 274
13794: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13795: LD_ADDR_VAR 0 4
13799: PUSH
13800: LD_VAR 0 2
13804: PUSH
13805: LD_INT 1
13807: ARRAY
13808: PPUSH
13809: LD_VAR 0 2
13813: PUSH
13814: LD_INT 2
13816: ARRAY
13817: PPUSH
13818: LD_VAR 0 2
13822: PUSH
13823: LD_INT 3
13825: ARRAY
13826: PPUSH
13827: LD_VAR 0 2
13831: PUSH
13832: LD_INT 4
13834: ARRAY
13835: PPUSH
13836: CALL_OW 449
13840: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13841: LD_ADDR_VAR 0 3
13845: PUSH
13846: LD_VAR 0 5
13850: PPUSH
13851: LD_INT 1
13853: PPUSH
13854: CALL_OW 275
13858: PUSH
13859: LD_VAR 0 4
13863: PUSH
13864: LD_INT 1
13866: ARRAY
13867: GREATEREQUAL
13868: IFFALSE 13894
13870: PUSH
13871: LD_VAR 0 5
13875: PPUSH
13876: LD_INT 2
13878: PPUSH
13879: CALL_OW 275
13883: PUSH
13884: LD_VAR 0 4
13888: PUSH
13889: LD_INT 2
13891: ARRAY
13892: GREATEREQUAL
13893: AND
13894: IFFALSE 13920
13896: PUSH
13897: LD_VAR 0 5
13901: PPUSH
13902: LD_INT 3
13904: PPUSH
13905: CALL_OW 275
13909: PUSH
13910: LD_VAR 0 4
13914: PUSH
13915: LD_INT 3
13917: ARRAY
13918: GREATEREQUAL
13919: AND
13920: ST_TO_ADDR
// end ;
13921: LD_VAR 0 3
13925: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13926: LD_INT 0
13928: PPUSH
13929: PPUSH
13930: PPUSH
13931: PPUSH
// pom := GetBase ( building ) ;
13932: LD_ADDR_VAR 0 3
13936: PUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 274
13946: ST_TO_ADDR
// if not pom then
13947: LD_VAR 0 3
13951: NOT
13952: IFFALSE 13956
// exit ;
13954: GO 14130
// btype := GetBType ( building ) ;
13956: LD_ADDR_VAR 0 5
13960: PUSH
13961: LD_VAR 0 1
13965: PPUSH
13966: CALL_OW 266
13970: ST_TO_ADDR
// if btype = b_armoury then
13971: LD_VAR 0 5
13975: PUSH
13976: LD_INT 4
13978: EQUAL
13979: IFFALSE 13989
// btype := b_barracks ;
13981: LD_ADDR_VAR 0 5
13985: PUSH
13986: LD_INT 5
13988: ST_TO_ADDR
// if btype = b_depot then
13989: LD_VAR 0 5
13993: PUSH
13994: LD_INT 0
13996: EQUAL
13997: IFFALSE 14007
// btype := b_warehouse ;
13999: LD_ADDR_VAR 0 5
14003: PUSH
14004: LD_INT 1
14006: ST_TO_ADDR
// if btype = b_workshop then
14007: LD_VAR 0 5
14011: PUSH
14012: LD_INT 2
14014: EQUAL
14015: IFFALSE 14025
// btype := b_factory ;
14017: LD_ADDR_VAR 0 5
14021: PUSH
14022: LD_INT 3
14024: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14025: LD_ADDR_VAR 0 4
14029: PUSH
14030: LD_VAR 0 5
14034: PPUSH
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 248
14044: PPUSH
14045: CALL_OW 450
14049: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14050: LD_ADDR_VAR 0 2
14054: PUSH
14055: LD_VAR 0 3
14059: PPUSH
14060: LD_INT 1
14062: PPUSH
14063: CALL_OW 275
14067: PUSH
14068: LD_VAR 0 4
14072: PUSH
14073: LD_INT 1
14075: ARRAY
14076: GREATEREQUAL
14077: IFFALSE 14103
14079: PUSH
14080: LD_VAR 0 3
14084: PPUSH
14085: LD_INT 2
14087: PPUSH
14088: CALL_OW 275
14092: PUSH
14093: LD_VAR 0 4
14097: PUSH
14098: LD_INT 2
14100: ARRAY
14101: GREATEREQUAL
14102: AND
14103: IFFALSE 14129
14105: PUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: LD_INT 3
14113: PPUSH
14114: CALL_OW 275
14118: PUSH
14119: LD_VAR 0 4
14123: PUSH
14124: LD_INT 3
14126: ARRAY
14127: GREATEREQUAL
14128: AND
14129: ST_TO_ADDR
// end ;
14130: LD_VAR 0 2
14134: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14135: LD_INT 0
14137: PPUSH
14138: PPUSH
14139: PPUSH
// pom := GetBase ( building ) ;
14140: LD_ADDR_VAR 0 4
14144: PUSH
14145: LD_VAR 0 1
14149: PPUSH
14150: CALL_OW 274
14154: ST_TO_ADDR
// if not pom then
14155: LD_VAR 0 4
14159: NOT
14160: IFFALSE 14164
// exit ;
14162: GO 14269
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14164: LD_ADDR_VAR 0 5
14168: PUSH
14169: LD_VAR 0 2
14173: PPUSH
14174: LD_VAR 0 1
14178: PPUSH
14179: CALL_OW 248
14183: PPUSH
14184: CALL_OW 450
14188: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14189: LD_ADDR_VAR 0 3
14193: PUSH
14194: LD_VAR 0 4
14198: PPUSH
14199: LD_INT 1
14201: PPUSH
14202: CALL_OW 275
14206: PUSH
14207: LD_VAR 0 5
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: GREATEREQUAL
14216: IFFALSE 14242
14218: PUSH
14219: LD_VAR 0 4
14223: PPUSH
14224: LD_INT 2
14226: PPUSH
14227: CALL_OW 275
14231: PUSH
14232: LD_VAR 0 5
14236: PUSH
14237: LD_INT 2
14239: ARRAY
14240: GREATEREQUAL
14241: AND
14242: IFFALSE 14268
14244: PUSH
14245: LD_VAR 0 4
14249: PPUSH
14250: LD_INT 3
14252: PPUSH
14253: CALL_OW 275
14257: PUSH
14258: LD_VAR 0 5
14262: PUSH
14263: LD_INT 3
14265: ARRAY
14266: GREATEREQUAL
14267: AND
14268: ST_TO_ADDR
// end ;
14269: LD_VAR 0 3
14273: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14274: LD_INT 0
14276: PPUSH
14277: PPUSH
14278: PPUSH
14279: PPUSH
14280: PPUSH
14281: PPUSH
14282: PPUSH
14283: PPUSH
14284: PPUSH
14285: PPUSH
14286: PPUSH
// result := false ;
14287: LD_ADDR_VAR 0 8
14291: PUSH
14292: LD_INT 0
14294: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14295: LD_VAR 0 5
14299: NOT
14300: IFTRUE 14309
14302: PUSH
14303: LD_VAR 0 1
14307: NOT
14308: OR
14309: IFTRUE 14318
14311: PUSH
14312: LD_VAR 0 2
14316: NOT
14317: OR
14318: IFTRUE 14327
14320: PUSH
14321: LD_VAR 0 3
14325: NOT
14326: OR
14327: IFFALSE 14331
// exit ;
14329: GO 15157
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14331: LD_ADDR_VAR 0 14
14335: PUSH
14336: LD_VAR 0 1
14340: PPUSH
14341: LD_VAR 0 2
14345: PPUSH
14346: LD_VAR 0 3
14350: PPUSH
14351: LD_VAR 0 4
14355: PPUSH
14356: LD_VAR 0 5
14360: PUSH
14361: LD_INT 1
14363: ARRAY
14364: PPUSH
14365: CALL_OW 248
14369: PPUSH
14370: LD_INT 0
14372: PPUSH
14373: CALL 16438 0 6
14377: ST_TO_ADDR
// if not hexes then
14378: LD_VAR 0 14
14382: NOT
14383: IFFALSE 14387
// exit ;
14385: GO 15157
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14387: LD_ADDR_VAR 0 17
14391: PUSH
14392: LD_VAR 0 5
14396: PPUSH
14397: LD_INT 22
14399: PUSH
14400: LD_VAR 0 13
14404: PPUSH
14405: CALL_OW 255
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PUSH
14414: LD_INT 2
14416: PUSH
14417: LD_INT 30
14419: PUSH
14420: LD_INT 0
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 30
14429: PUSH
14430: LD_INT 1
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PPUSH
14446: CALL_OW 72
14450: ST_TO_ADDR
// for i = 1 to hexes do
14451: LD_ADDR_VAR 0 9
14455: PUSH
14456: DOUBLE
14457: LD_INT 1
14459: DEC
14460: ST_TO_ADDR
14461: LD_VAR 0 14
14465: PUSH
14466: FOR_TO
14467: IFFALSE 15155
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14469: LD_ADDR_VAR 0 13
14473: PUSH
14474: LD_VAR 0 14
14478: PUSH
14479: LD_VAR 0 9
14483: ARRAY
14484: PUSH
14485: LD_INT 1
14487: ARRAY
14488: PPUSH
14489: LD_VAR 0 14
14493: PUSH
14494: LD_VAR 0 9
14498: ARRAY
14499: PUSH
14500: LD_INT 2
14502: ARRAY
14503: PPUSH
14504: CALL_OW 428
14508: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14509: LD_VAR 0 14
14513: PUSH
14514: LD_VAR 0 9
14518: ARRAY
14519: PUSH
14520: LD_INT 1
14522: ARRAY
14523: PPUSH
14524: LD_VAR 0 14
14528: PUSH
14529: LD_VAR 0 9
14533: ARRAY
14534: PUSH
14535: LD_INT 2
14537: ARRAY
14538: PPUSH
14539: CALL_OW 351
14543: IFTRUE 14582
14545: PUSH
14546: LD_VAR 0 14
14550: PUSH
14551: LD_VAR 0 9
14555: ARRAY
14556: PUSH
14557: LD_INT 1
14559: ARRAY
14560: PPUSH
14561: LD_VAR 0 14
14565: PUSH
14566: LD_VAR 0 9
14570: ARRAY
14571: PUSH
14572: LD_INT 2
14574: ARRAY
14575: PPUSH
14576: CALL_OW 488
14580: NOT
14581: OR
14582: IFTRUE 14599
14584: PUSH
14585: LD_VAR 0 13
14589: PPUSH
14590: CALL_OW 247
14594: PUSH
14595: LD_INT 3
14597: EQUAL
14598: OR
14599: IFFALSE 14605
// exit ;
14601: POP
14602: POP
14603: GO 15157
// if not tmp then
14605: LD_VAR 0 13
14609: NOT
14610: IFFALSE 14614
// continue ;
14612: GO 14466
// result := true ;
14614: LD_ADDR_VAR 0 8
14618: PUSH
14619: LD_INT 1
14621: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14622: LD_VAR 0 6
14626: IFFALSE 14643
14628: PUSH
14629: LD_VAR 0 13
14633: PPUSH
14634: CALL_OW 247
14638: PUSH
14639: LD_INT 2
14641: EQUAL
14642: AND
14643: IFFALSE 14660
14645: PUSH
14646: LD_VAR 0 13
14650: PPUSH
14651: CALL_OW 263
14655: PUSH
14656: LD_INT 1
14658: EQUAL
14659: AND
14660: IFFALSE 14824
// begin if IsDrivenBy ( tmp ) then
14662: LD_VAR 0 13
14666: PPUSH
14667: CALL_OW 311
14671: IFFALSE 14675
// continue ;
14673: GO 14466
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14675: LD_VAR 0 6
14679: PPUSH
14680: LD_INT 3
14682: PUSH
14683: LD_INT 60
14685: PUSH
14686: EMPTY
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: LD_INT 3
14695: PUSH
14696: LD_INT 55
14698: PUSH
14699: EMPTY
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PPUSH
14710: CALL_OW 72
14714: IFFALSE 14822
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14716: LD_ADDR_VAR 0 18
14720: PUSH
14721: LD_VAR 0 6
14725: PPUSH
14726: LD_INT 3
14728: PUSH
14729: LD_INT 60
14731: PUSH
14732: EMPTY
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 3
14741: PUSH
14742: LD_INT 55
14744: PUSH
14745: EMPTY
14746: LIST
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PPUSH
14756: CALL_OW 72
14760: PUSH
14761: LD_INT 1
14763: ARRAY
14764: ST_TO_ADDR
// if IsInUnit ( driver ) then
14765: LD_VAR 0 18
14769: PPUSH
14770: CALL_OW 310
14774: IFFALSE 14785
// ComExit ( driver ) ;
14776: LD_VAR 0 18
14780: PPUSH
14781: CALL 40428 0 1
// AddComEnterUnit ( driver , tmp ) ;
14785: LD_VAR 0 18
14789: PPUSH
14790: LD_VAR 0 13
14794: PPUSH
14795: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14799: LD_VAR 0 18
14803: PPUSH
14804: LD_VAR 0 7
14808: PPUSH
14809: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14813: LD_VAR 0 18
14817: PPUSH
14818: CALL_OW 181
// end ; continue ;
14822: GO 14466
// end ; if not cleaners or not tmp in cleaners then
14824: LD_VAR 0 6
14828: NOT
14829: IFTRUE 14844
14831: PUSH
14832: LD_VAR 0 13
14836: PUSH
14837: LD_VAR 0 6
14841: IN
14842: NOT
14843: OR
14844: IFFALSE 15153
// begin if dep then
14846: LD_VAR 0 17
14850: IFFALSE 14986
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14852: LD_ADDR_VAR 0 16
14856: PUSH
14857: LD_VAR 0 17
14861: PUSH
14862: LD_INT 1
14864: ARRAY
14865: PPUSH
14866: CALL_OW 250
14870: PPUSH
14871: LD_VAR 0 17
14875: PUSH
14876: LD_INT 1
14878: ARRAY
14879: PPUSH
14880: CALL_OW 254
14884: PPUSH
14885: LD_INT 5
14887: PPUSH
14888: CALL_OW 272
14892: PUSH
14893: LD_VAR 0 17
14897: PUSH
14898: LD_INT 1
14900: ARRAY
14901: PPUSH
14902: CALL_OW 251
14906: PPUSH
14907: LD_VAR 0 17
14911: PUSH
14912: LD_INT 1
14914: ARRAY
14915: PPUSH
14916: CALL_OW 254
14920: PPUSH
14921: LD_INT 5
14923: PPUSH
14924: CALL_OW 273
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14933: LD_VAR 0 16
14937: PUSH
14938: LD_INT 1
14940: ARRAY
14941: PPUSH
14942: LD_VAR 0 16
14946: PUSH
14947: LD_INT 2
14949: ARRAY
14950: PPUSH
14951: CALL_OW 488
14955: IFFALSE 14986
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14957: LD_VAR 0 13
14961: PPUSH
14962: LD_VAR 0 16
14966: PUSH
14967: LD_INT 1
14969: ARRAY
14970: PPUSH
14971: LD_VAR 0 16
14975: PUSH
14976: LD_INT 2
14978: ARRAY
14979: PPUSH
14980: CALL_OW 111
// continue ;
14984: GO 14466
// end ; end ; r := GetDir ( tmp ) ;
14986: LD_ADDR_VAR 0 15
14990: PUSH
14991: LD_VAR 0 13
14995: PPUSH
14996: CALL_OW 254
15000: ST_TO_ADDR
// if r = 5 then
15001: LD_VAR 0 15
15005: PUSH
15006: LD_INT 5
15008: EQUAL
15009: IFFALSE 15019
// r := 0 ;
15011: LD_ADDR_VAR 0 15
15015: PUSH
15016: LD_INT 0
15018: ST_TO_ADDR
// for j = r to 5 do
15019: LD_ADDR_VAR 0 10
15023: PUSH
15024: DOUBLE
15025: LD_VAR 0 15
15029: DEC
15030: ST_TO_ADDR
15031: LD_INT 5
15033: PUSH
15034: FOR_TO
15035: IFFALSE 15151
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15037: LD_ADDR_VAR 0 11
15041: PUSH
15042: LD_VAR 0 13
15046: PPUSH
15047: CALL_OW 250
15051: PPUSH
15052: LD_VAR 0 10
15056: PPUSH
15057: LD_INT 2
15059: PPUSH
15060: CALL_OW 272
15064: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15065: LD_ADDR_VAR 0 12
15069: PUSH
15070: LD_VAR 0 13
15074: PPUSH
15075: CALL_OW 251
15079: PPUSH
15080: LD_VAR 0 10
15084: PPUSH
15085: LD_INT 2
15087: PPUSH
15088: CALL_OW 273
15092: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15093: LD_VAR 0 11
15097: PPUSH
15098: LD_VAR 0 12
15102: PPUSH
15103: CALL_OW 488
15107: IFFALSE 15126
15109: PUSH
15110: LD_VAR 0 11
15114: PPUSH
15115: LD_VAR 0 12
15119: PPUSH
15120: CALL_OW 428
15124: NOT
15125: AND
15126: IFFALSE 15149
// begin ComMoveXY ( tmp , _x , _y ) ;
15128: LD_VAR 0 13
15132: PPUSH
15133: LD_VAR 0 11
15137: PPUSH
15138: LD_VAR 0 12
15142: PPUSH
15143: CALL_OW 111
// break ;
15147: GO 15151
// end ; end ;
15149: GO 15034
15151: POP
15152: POP
// end ; end ;
15153: GO 14466
15155: POP
15156: POP
// end ;
15157: LD_VAR 0 8
15161: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15162: LD_INT 0
15164: PPUSH
// result := true ;
15165: LD_ADDR_VAR 0 3
15169: PUSH
15170: LD_INT 1
15172: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15173: LD_VAR 0 2
15177: PUSH
15178: LD_INT 24
15180: DOUBLE
15181: EQUAL
15182: IFTRUE 15192
15184: LD_INT 33
15186: DOUBLE
15187: EQUAL
15188: IFTRUE 15192
15190: GO 15217
15192: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_INT 32
15200: PPUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: CALL_OW 321
15210: PUSH
15211: LD_INT 2
15213: EQUAL
15214: ST_TO_ADDR
15215: GO 15533
15217: LD_INT 20
15219: DOUBLE
15220: EQUAL
15221: IFTRUE 15225
15223: GO 15250
15225: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15226: LD_ADDR_VAR 0 3
15230: PUSH
15231: LD_INT 6
15233: PPUSH
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 321
15243: PUSH
15244: LD_INT 2
15246: EQUAL
15247: ST_TO_ADDR
15248: GO 15533
15250: LD_INT 22
15252: DOUBLE
15253: EQUAL
15254: IFTRUE 15264
15256: LD_INT 36
15258: DOUBLE
15259: EQUAL
15260: IFTRUE 15264
15262: GO 15289
15264: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15265: LD_ADDR_VAR 0 3
15269: PUSH
15270: LD_INT 15
15272: PPUSH
15273: LD_VAR 0 1
15277: PPUSH
15278: CALL_OW 321
15282: PUSH
15283: LD_INT 2
15285: EQUAL
15286: ST_TO_ADDR
15287: GO 15533
15289: LD_INT 30
15291: DOUBLE
15292: EQUAL
15293: IFTRUE 15297
15295: GO 15322
15297: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15298: LD_ADDR_VAR 0 3
15302: PUSH
15303: LD_INT 20
15305: PPUSH
15306: LD_VAR 0 1
15310: PPUSH
15311: CALL_OW 321
15315: PUSH
15316: LD_INT 2
15318: EQUAL
15319: ST_TO_ADDR
15320: GO 15533
15322: LD_INT 28
15324: DOUBLE
15325: EQUAL
15326: IFTRUE 15336
15328: LD_INT 21
15330: DOUBLE
15331: EQUAL
15332: IFTRUE 15336
15334: GO 15361
15336: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15337: LD_ADDR_VAR 0 3
15341: PUSH
15342: LD_INT 21
15344: PPUSH
15345: LD_VAR 0 1
15349: PPUSH
15350: CALL_OW 321
15354: PUSH
15355: LD_INT 2
15357: EQUAL
15358: ST_TO_ADDR
15359: GO 15533
15361: LD_INT 16
15363: DOUBLE
15364: EQUAL
15365: IFTRUE 15369
15367: GO 15394
15369: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15370: LD_ADDR_VAR 0 3
15374: PUSH
15375: LD_INT 84
15377: PPUSH
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 321
15387: PUSH
15388: LD_INT 2
15390: EQUAL
15391: ST_TO_ADDR
15392: GO 15533
15394: LD_INT 19
15396: DOUBLE
15397: EQUAL
15398: IFTRUE 15408
15400: LD_INT 23
15402: DOUBLE
15403: EQUAL
15404: IFTRUE 15408
15406: GO 15433
15408: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15409: LD_ADDR_VAR 0 3
15413: PUSH
15414: LD_INT 83
15416: PPUSH
15417: LD_VAR 0 1
15421: PPUSH
15422: CALL_OW 321
15426: PUSH
15427: LD_INT 2
15429: EQUAL
15430: ST_TO_ADDR
15431: GO 15533
15433: LD_INT 17
15435: DOUBLE
15436: EQUAL
15437: IFTRUE 15441
15439: GO 15466
15441: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15442: LD_ADDR_VAR 0 3
15446: PUSH
15447: LD_INT 39
15449: PPUSH
15450: LD_VAR 0 1
15454: PPUSH
15455: CALL_OW 321
15459: PUSH
15460: LD_INT 2
15462: EQUAL
15463: ST_TO_ADDR
15464: GO 15533
15466: LD_INT 18
15468: DOUBLE
15469: EQUAL
15470: IFTRUE 15474
15472: GO 15499
15474: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15475: LD_ADDR_VAR 0 3
15479: PUSH
15480: LD_INT 40
15482: PPUSH
15483: LD_VAR 0 1
15487: PPUSH
15488: CALL_OW 321
15492: PUSH
15493: LD_INT 2
15495: EQUAL
15496: ST_TO_ADDR
15497: GO 15533
15499: LD_INT 27
15501: DOUBLE
15502: EQUAL
15503: IFTRUE 15507
15505: GO 15532
15507: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15508: LD_ADDR_VAR 0 3
15512: PUSH
15513: LD_INT 35
15515: PPUSH
15516: LD_VAR 0 1
15520: PPUSH
15521: CALL_OW 321
15525: PUSH
15526: LD_INT 2
15528: EQUAL
15529: ST_TO_ADDR
15530: GO 15533
15532: POP
// end ;
15533: LD_VAR 0 3
15537: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15538: LD_INT 0
15540: PPUSH
15541: PPUSH
15542: PPUSH
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
15547: PPUSH
15548: PPUSH
15549: PPUSH
15550: PPUSH
// result := false ;
15551: LD_ADDR_VAR 0 6
15555: PUSH
15556: LD_INT 0
15558: ST_TO_ADDR
// if btype = b_depot then
15559: LD_VAR 0 2
15563: PUSH
15564: LD_INT 0
15566: EQUAL
15567: IFFALSE 15579
// begin result := true ;
15569: LD_ADDR_VAR 0 6
15573: PUSH
15574: LD_INT 1
15576: ST_TO_ADDR
// exit ;
15577: GO 16433
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15579: LD_VAR 0 1
15583: NOT
15584: IFTRUE 15609
15586: PUSH
15587: LD_VAR 0 1
15591: PPUSH
15592: CALL_OW 266
15596: PUSH
15597: LD_INT 0
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: IN
15607: NOT
15608: OR
15609: IFTRUE 15618
15611: PUSH
15612: LD_VAR 0 2
15616: NOT
15617: OR
15618: IFTRUE 15654
15620: PUSH
15621: LD_VAR 0 5
15625: PUSH
15626: LD_INT 0
15628: PUSH
15629: LD_INT 1
15631: PUSH
15632: LD_INT 2
15634: PUSH
15635: LD_INT 3
15637: PUSH
15638: LD_INT 4
15640: PUSH
15641: LD_INT 5
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: IN
15652: NOT
15653: OR
15654: IFTRUE 15673
15656: PUSH
15657: LD_VAR 0 3
15661: PPUSH
15662: LD_VAR 0 4
15666: PPUSH
15667: CALL_OW 488
15671: NOT
15672: OR
15673: IFFALSE 15677
// exit ;
15675: GO 16433
// side := GetSide ( depot ) ;
15677: LD_ADDR_VAR 0 9
15681: PUSH
15682: LD_VAR 0 1
15686: PPUSH
15687: CALL_OW 255
15691: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15692: LD_VAR 0 9
15696: PPUSH
15697: LD_VAR 0 2
15701: PPUSH
15702: CALL 15162 0 2
15706: NOT
15707: IFFALSE 15711
// exit ;
15709: GO 16433
// pom := GetBase ( depot ) ;
15711: LD_ADDR_VAR 0 10
15715: PUSH
15716: LD_VAR 0 1
15720: PPUSH
15721: CALL_OW 274
15725: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15726: LD_ADDR_VAR 0 11
15730: PUSH
15731: LD_VAR 0 2
15735: PPUSH
15736: LD_VAR 0 1
15740: PPUSH
15741: CALL_OW 248
15745: PPUSH
15746: CALL_OW 450
15750: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15751: LD_VAR 0 10
15755: PPUSH
15756: LD_INT 1
15758: PPUSH
15759: CALL_OW 275
15763: PUSH
15764: LD_VAR 0 11
15768: PUSH
15769: LD_INT 1
15771: ARRAY
15772: GREATEREQUAL
15773: IFFALSE 15799
15775: PUSH
15776: LD_VAR 0 10
15780: PPUSH
15781: LD_INT 2
15783: PPUSH
15784: CALL_OW 275
15788: PUSH
15789: LD_VAR 0 11
15793: PUSH
15794: LD_INT 2
15796: ARRAY
15797: GREATEREQUAL
15798: AND
15799: IFFALSE 15825
15801: PUSH
15802: LD_VAR 0 10
15806: PPUSH
15807: LD_INT 3
15809: PPUSH
15810: CALL_OW 275
15814: PUSH
15815: LD_VAR 0 11
15819: PUSH
15820: LD_INT 3
15822: ARRAY
15823: GREATEREQUAL
15824: AND
15825: NOT
15826: IFFALSE 15830
// exit ;
15828: GO 16433
// if GetBType ( depot ) = b_depot then
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 266
15839: PUSH
15840: LD_INT 0
15842: EQUAL
15843: IFFALSE 15855
// dist := 28 else
15845: LD_ADDR_VAR 0 14
15849: PUSH
15850: LD_INT 28
15852: ST_TO_ADDR
15853: GO 15863
// dist := 36 ;
15855: LD_ADDR_VAR 0 14
15859: PUSH
15860: LD_INT 36
15862: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15863: LD_VAR 0 1
15867: PPUSH
15868: LD_VAR 0 3
15872: PPUSH
15873: LD_VAR 0 4
15877: PPUSH
15878: CALL_OW 297
15882: PUSH
15883: LD_VAR 0 14
15887: GREATER
15888: IFFALSE 15892
// exit ;
15890: GO 16433
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15892: LD_ADDR_VAR 0 12
15896: PUSH
15897: LD_VAR 0 2
15901: PPUSH
15902: LD_VAR 0 3
15906: PPUSH
15907: LD_VAR 0 4
15911: PPUSH
15912: LD_VAR 0 5
15916: PPUSH
15917: LD_VAR 0 1
15921: PPUSH
15922: CALL_OW 248
15926: PPUSH
15927: LD_INT 0
15929: PPUSH
15930: CALL 16438 0 6
15934: ST_TO_ADDR
// if not hexes then
15935: LD_VAR 0 12
15939: NOT
15940: IFFALSE 15944
// exit ;
15942: GO 16433
// hex := GetHexInfo ( x , y ) ;
15944: LD_ADDR_VAR 0 15
15948: PUSH
15949: LD_VAR 0 3
15953: PPUSH
15954: LD_VAR 0 4
15958: PPUSH
15959: CALL_OW 546
15963: ST_TO_ADDR
// if hex [ 1 ] then
15964: LD_VAR 0 15
15968: PUSH
15969: LD_INT 1
15971: ARRAY
15972: IFFALSE 15976
// exit ;
15974: GO 16433
// height := hex [ 2 ] ;
15976: LD_ADDR_VAR 0 13
15980: PUSH
15981: LD_VAR 0 15
15985: PUSH
15986: LD_INT 2
15988: ARRAY
15989: ST_TO_ADDR
// for i = 1 to hexes do
15990: LD_ADDR_VAR 0 7
15994: PUSH
15995: DOUBLE
15996: LD_INT 1
15998: DEC
15999: ST_TO_ADDR
16000: LD_VAR 0 12
16004: PUSH
16005: FOR_TO
16006: IFFALSE 16350
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16008: LD_VAR 0 12
16012: PUSH
16013: LD_VAR 0 7
16017: ARRAY
16018: PUSH
16019: LD_INT 1
16021: ARRAY
16022: PPUSH
16023: LD_VAR 0 12
16027: PUSH
16028: LD_VAR 0 7
16032: ARRAY
16033: PUSH
16034: LD_INT 2
16036: ARRAY
16037: PPUSH
16038: CALL_OW 488
16042: NOT
16043: IFTRUE 16085
16045: PUSH
16046: LD_VAR 0 12
16050: PUSH
16051: LD_VAR 0 7
16055: ARRAY
16056: PUSH
16057: LD_INT 1
16059: ARRAY
16060: PPUSH
16061: LD_VAR 0 12
16065: PUSH
16066: LD_VAR 0 7
16070: ARRAY
16071: PUSH
16072: LD_INT 2
16074: ARRAY
16075: PPUSH
16076: CALL_OW 428
16080: PUSH
16081: LD_INT 0
16083: GREATER
16084: OR
16085: IFTRUE 16123
16087: PUSH
16088: LD_VAR 0 12
16092: PUSH
16093: LD_VAR 0 7
16097: ARRAY
16098: PUSH
16099: LD_INT 1
16101: ARRAY
16102: PPUSH
16103: LD_VAR 0 12
16107: PUSH
16108: LD_VAR 0 7
16112: ARRAY
16113: PUSH
16114: LD_INT 2
16116: ARRAY
16117: PPUSH
16118: CALL_OW 351
16122: OR
16123: IFFALSE 16129
// exit ;
16125: POP
16126: POP
16127: GO 16433
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16129: LD_ADDR_VAR 0 8
16133: PUSH
16134: LD_VAR 0 12
16138: PUSH
16139: LD_VAR 0 7
16143: ARRAY
16144: PUSH
16145: LD_INT 1
16147: ARRAY
16148: PPUSH
16149: LD_VAR 0 12
16153: PUSH
16154: LD_VAR 0 7
16158: ARRAY
16159: PUSH
16160: LD_INT 2
16162: ARRAY
16163: PPUSH
16164: CALL_OW 546
16168: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16169: LD_VAR 0 8
16173: PUSH
16174: LD_INT 1
16176: ARRAY
16177: IFTRUE 16199
16179: PUSH
16180: LD_VAR 0 8
16184: PUSH
16185: LD_INT 2
16187: ARRAY
16188: PUSH
16189: LD_VAR 0 13
16193: PUSH
16194: LD_INT 2
16196: PLUS
16197: GREATER
16198: OR
16199: IFTRUE 16221
16201: PUSH
16202: LD_VAR 0 8
16206: PUSH
16207: LD_INT 2
16209: ARRAY
16210: PUSH
16211: LD_VAR 0 13
16215: PUSH
16216: LD_INT 2
16218: MINUS
16219: LESS
16220: OR
16221: IFTRUE 16289
16223: PUSH
16224: LD_VAR 0 8
16228: PUSH
16229: LD_INT 3
16231: ARRAY
16232: PUSH
16233: LD_INT 0
16235: PUSH
16236: LD_INT 8
16238: PUSH
16239: LD_INT 9
16241: PUSH
16242: LD_INT 10
16244: PUSH
16245: LD_INT 11
16247: PUSH
16248: LD_INT 12
16250: PUSH
16251: LD_INT 13
16253: PUSH
16254: LD_INT 16
16256: PUSH
16257: LD_INT 17
16259: PUSH
16260: LD_INT 18
16262: PUSH
16263: LD_INT 19
16265: PUSH
16266: LD_INT 20
16268: PUSH
16269: LD_INT 21
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: IN
16287: NOT
16288: OR
16289: IFTRUE 16302
16291: PUSH
16292: LD_VAR 0 8
16296: PUSH
16297: LD_INT 5
16299: ARRAY
16300: NOT
16301: OR
16302: IFTRUE 16342
16304: PUSH
16305: LD_VAR 0 8
16309: PUSH
16310: LD_INT 6
16312: ARRAY
16313: PUSH
16314: LD_INT 1
16316: PUSH
16317: LD_INT 2
16319: PUSH
16320: LD_INT 7
16322: PUSH
16323: LD_INT 9
16325: PUSH
16326: LD_INT 10
16328: PUSH
16329: LD_INT 11
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: IN
16340: NOT
16341: OR
16342: IFFALSE 16348
// exit ;
16344: POP
16345: POP
16346: GO 16433
// end ;
16348: GO 16005
16350: POP
16351: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16352: LD_VAR 0 9
16356: PPUSH
16357: LD_VAR 0 3
16361: PPUSH
16362: LD_VAR 0 4
16366: PPUSH
16367: LD_INT 20
16369: PPUSH
16370: CALL 8252 0 4
16374: PUSH
16375: LD_INT 4
16377: ARRAY
16378: IFFALSE 16382
// exit ;
16380: GO 16433
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16382: LD_VAR 0 2
16386: PUSH
16387: LD_INT 29
16389: PUSH
16390: LD_INT 30
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: IN
16397: IFFALSE 16421
16399: PUSH
16400: LD_VAR 0 3
16404: PPUSH
16405: LD_VAR 0 4
16409: PPUSH
16410: LD_VAR 0 9
16414: PPUSH
16415: CALL_OW 440
16419: NOT
16420: AND
16421: IFFALSE 16425
// exit ;
16423: GO 16433
// result := true ;
16425: LD_ADDR_VAR 0 6
16429: PUSH
16430: LD_INT 1
16432: ST_TO_ADDR
// end ;
16433: LD_VAR 0 6
16437: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16438: LD_INT 0
16440: PPUSH
16441: PPUSH
16442: PPUSH
16443: PPUSH
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
16460: PPUSH
16461: PPUSH
16462: PPUSH
16463: PPUSH
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
16470: PPUSH
16471: PPUSH
16472: PPUSH
16473: PPUSH
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
16478: PPUSH
16479: PPUSH
16480: PPUSH
16481: PPUSH
16482: PPUSH
16483: PPUSH
16484: PPUSH
16485: PPUSH
16486: PPUSH
16487: PPUSH
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
16496: PPUSH
16497: PPUSH
// result = [ ] ;
16498: LD_ADDR_VAR 0 7
16502: PUSH
16503: EMPTY
16504: ST_TO_ADDR
// temp_list = [ ] ;
16505: LD_ADDR_VAR 0 9
16509: PUSH
16510: EMPTY
16511: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16512: LD_VAR 0 4
16516: PUSH
16517: LD_INT 0
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: LD_INT 2
16525: PUSH
16526: LD_INT 3
16528: PUSH
16529: LD_INT 4
16531: PUSH
16532: LD_INT 5
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: IN
16543: NOT
16544: IFTRUE 16587
16546: PUSH
16547: LD_VAR 0 1
16551: PUSH
16552: LD_INT 0
16554: PUSH
16555: LD_INT 1
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: IN
16562: IFFALSE 16586
16564: PUSH
16565: LD_VAR 0 5
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: LD_INT 2
16575: PUSH
16576: LD_INT 3
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: LIST
16583: IN
16584: NOT
16585: AND
16586: OR
16587: IFFALSE 16591
// exit ;
16589: GO 34990
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16591: LD_VAR 0 1
16595: PUSH
16596: LD_INT 6
16598: PUSH
16599: LD_INT 7
16601: PUSH
16602: LD_INT 8
16604: PUSH
16605: LD_INT 13
16607: PUSH
16608: LD_INT 12
16610: PUSH
16611: LD_INT 15
16613: PUSH
16614: LD_INT 11
16616: PUSH
16617: LD_INT 14
16619: PUSH
16620: LD_INT 10
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: IN
16634: IFFALSE 16644
// btype = b_lab ;
16636: LD_ADDR_VAR 0 1
16640: PUSH
16641: LD_INT 6
16643: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16644: LD_VAR 0 6
16648: PUSH
16649: LD_INT 0
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: LD_INT 2
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: LIST
16662: IN
16663: NOT
16664: IFTRUE 16732
16666: PUSH
16667: LD_VAR 0 1
16671: PUSH
16672: LD_INT 0
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: LD_INT 3
16683: PUSH
16684: LD_INT 6
16686: PUSH
16687: LD_INT 36
16689: PUSH
16690: LD_INT 4
16692: PUSH
16693: LD_INT 5
16695: PUSH
16696: LD_INT 31
16698: PUSH
16699: LD_INT 32
16701: PUSH
16702: LD_INT 33
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: IN
16718: NOT
16719: IFFALSE 16731
16721: PUSH
16722: LD_VAR 0 6
16726: PUSH
16727: LD_INT 1
16729: EQUAL
16730: AND
16731: OR
16732: IFTRUE 16764
16734: PUSH
16735: LD_VAR 0 1
16739: PUSH
16740: LD_INT 2
16742: PUSH
16743: LD_INT 3
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: IN
16750: NOT
16751: IFFALSE 16763
16753: PUSH
16754: LD_VAR 0 6
16758: PUSH
16759: LD_INT 2
16761: EQUAL
16762: AND
16763: OR
16764: IFFALSE 16774
// mode = 0 ;
16766: LD_ADDR_VAR 0 6
16770: PUSH
16771: LD_INT 0
16773: ST_TO_ADDR
// case mode of 0 :
16774: LD_VAR 0 6
16778: PUSH
16779: LD_INT 0
16781: DOUBLE
16782: EQUAL
16783: IFTRUE 16787
16785: GO 28240
16787: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16788: LD_ADDR_VAR 0 11
16792: PUSH
16793: LD_INT 0
16795: PUSH
16796: LD_INT 0
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 0
16805: PUSH
16806: LD_INT 1
16808: NEG
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 1
16816: PUSH
16817: LD_INT 0
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 1
16826: PUSH
16827: LD_INT 1
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 0
16836: PUSH
16837: LD_INT 1
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 1
16846: NEG
16847: PUSH
16848: LD_INT 0
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 1
16857: NEG
16858: PUSH
16859: LD_INT 1
16861: NEG
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 1
16869: NEG
16870: PUSH
16871: LD_INT 2
16873: NEG
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 0
16881: PUSH
16882: LD_INT 2
16884: NEG
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 1
16892: PUSH
16893: LD_INT 1
16895: NEG
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 1
16903: PUSH
16904: LD_INT 2
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 0
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 1
16923: NEG
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 1
16934: PUSH
16935: LD_INT 3
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 0
16944: PUSH
16945: LD_INT 3
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 1
16954: NEG
16955: PUSH
16956: LD_INT 2
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16981: LD_ADDR_VAR 0 12
16985: PUSH
16986: LD_INT 0
16988: PUSH
16989: LD_INT 0
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 0
16998: PUSH
16999: LD_INT 1
17001: NEG
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 1
17009: PUSH
17010: LD_INT 0
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: LD_INT 1
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 0
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 1
17039: NEG
17040: PUSH
17041: LD_INT 0
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 1
17050: NEG
17051: PUSH
17052: LD_INT 1
17054: NEG
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 1
17062: PUSH
17063: LD_INT 1
17065: NEG
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: LD_INT 0
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 1
17093: NEG
17094: PUSH
17095: LD_INT 1
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 2
17104: NEG
17105: PUSH
17106: LD_INT 0
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 2
17115: NEG
17116: PUSH
17117: LD_INT 1
17119: NEG
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 2
17127: NEG
17128: PUSH
17129: LD_INT 1
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: LD_INT 3
17138: NEG
17139: PUSH
17140: LD_INT 0
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 3
17149: NEG
17150: PUSH
17151: LD_INT 1
17153: NEG
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17177: LD_ADDR_VAR 0 13
17181: PUSH
17182: LD_INT 0
17184: PUSH
17185: LD_INT 0
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 0
17194: PUSH
17195: LD_INT 1
17197: NEG
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 1
17205: PUSH
17206: LD_INT 0
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 1
17215: PUSH
17216: LD_INT 1
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 1
17235: NEG
17236: PUSH
17237: LD_INT 0
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 1
17246: NEG
17247: PUSH
17248: LD_INT 1
17250: NEG
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 1
17258: NEG
17259: PUSH
17260: LD_INT 2
17262: NEG
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 2
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 2
17280: PUSH
17281: LD_INT 2
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 2
17300: NEG
17301: PUSH
17302: LD_INT 1
17304: NEG
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 2
17312: NEG
17313: PUSH
17314: LD_INT 2
17316: NEG
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 2
17324: NEG
17325: PUSH
17326: LD_INT 3
17328: NEG
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 3
17336: NEG
17337: PUSH
17338: LD_INT 2
17340: NEG
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 3
17348: NEG
17349: PUSH
17350: LD_INT 3
17352: NEG
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17376: LD_ADDR_VAR 0 14
17380: PUSH
17381: LD_INT 0
17383: PUSH
17384: LD_INT 0
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 0
17393: PUSH
17394: LD_INT 1
17396: NEG
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 1
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 1
17414: PUSH
17415: LD_INT 1
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 0
17424: PUSH
17425: LD_INT 1
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 1
17434: NEG
17435: PUSH
17436: LD_INT 0
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 1
17445: NEG
17446: PUSH
17447: LD_INT 1
17449: NEG
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 1
17457: NEG
17458: PUSH
17459: LD_INT 2
17461: NEG
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 0
17469: PUSH
17470: LD_INT 2
17472: NEG
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: LD_INT 1
17483: NEG
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 1
17491: PUSH
17492: LD_INT 2
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 0
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 1
17511: NEG
17512: PUSH
17513: LD_INT 1
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 1
17522: NEG
17523: PUSH
17524: LD_INT 3
17526: NEG
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: LD_INT 3
17537: NEG
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 1
17545: PUSH
17546: LD_INT 2
17548: NEG
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17572: LD_ADDR_VAR 0 15
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 0
17589: PUSH
17590: LD_INT 1
17592: NEG
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: LD_INT 0
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: LD_INT 1
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: NEG
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 1
17641: NEG
17642: PUSH
17643: LD_INT 1
17645: NEG
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 1
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 2
17664: PUSH
17665: LD_INT 0
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 1
17684: NEG
17685: PUSH
17686: LD_INT 1
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 2
17695: NEG
17696: PUSH
17697: LD_INT 0
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 2
17706: NEG
17707: PUSH
17708: LD_INT 1
17710: NEG
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 2
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 3
17729: PUSH
17730: LD_INT 0
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 3
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17765: LD_ADDR_VAR 0 16
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: LD_INT 0
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 0
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 1
17823: NEG
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 1
17834: NEG
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 1
17846: NEG
17847: PUSH
17848: LD_INT 2
17850: NEG
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: LD_INT 1
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 2
17868: PUSH
17869: LD_INT 2
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: LD_INT 2
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: LD_INT 1
17892: NEG
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 2
17900: NEG
17901: PUSH
17902: LD_INT 2
17904: NEG
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 3
17912: PUSH
17913: LD_INT 2
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 3
17922: PUSH
17923: LD_INT 3
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: LD_INT 3
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17958: LD_ADDR_VAR 0 17
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: LD_INT 0
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 0
17975: PUSH
17976: LD_INT 1
17978: NEG
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 1
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 0
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 1
18016: NEG
18017: PUSH
18018: LD_INT 0
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 1
18027: NEG
18028: PUSH
18029: LD_INT 1
18031: NEG
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 1
18039: NEG
18040: PUSH
18041: LD_INT 2
18043: NEG
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: LD_INT 2
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 2
18073: PUSH
18074: LD_INT 0
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: LD_INT 2
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: LD_INT 2
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: LD_INT 2
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 2
18134: NEG
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 2
18145: NEG
18146: PUSH
18147: LD_INT 1
18149: NEG
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 2
18157: NEG
18158: PUSH
18159: LD_INT 2
18161: NEG
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18188: LD_ADDR_VAR 0 18
18192: PUSH
18193: LD_INT 0
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 0
18205: PUSH
18206: LD_INT 1
18208: NEG
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 1
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: LD_INT 1
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: LD_INT 0
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 1
18257: NEG
18258: PUSH
18259: LD_INT 1
18261: NEG
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 0
18281: PUSH
18282: LD_INT 2
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 1
18292: PUSH
18293: LD_INT 1
18295: NEG
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 2
18303: PUSH
18304: LD_INT 0
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 2
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 2
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 1
18353: NEG
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 2
18364: NEG
18365: PUSH
18366: LD_INT 0
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 2
18375: NEG
18376: PUSH
18377: LD_INT 1
18379: NEG
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 2
18387: NEG
18388: PUSH
18389: LD_INT 2
18391: NEG
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18418: LD_ADDR_VAR 0 19
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: LD_INT 1
18438: NEG
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: LD_INT 1
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: NEG
18477: PUSH
18478: LD_INT 0
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 1
18487: NEG
18488: PUSH
18489: LD_INT 1
18491: NEG
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 1
18499: NEG
18500: PUSH
18501: LD_INT 2
18503: NEG
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 0
18511: PUSH
18512: LD_INT 2
18514: NEG
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 2
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: LD_INT 2
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: LD_INT 2
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 0
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 1
18583: NEG
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 2
18594: NEG
18595: PUSH
18596: LD_INT 0
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 2
18605: NEG
18606: PUSH
18607: LD_INT 1
18609: NEG
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 2
18617: NEG
18618: PUSH
18619: LD_INT 2
18621: NEG
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18648: LD_ADDR_VAR 0 20
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: LD_INT 0
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 0
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: LD_INT 1
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 1
18706: NEG
18707: PUSH
18708: LD_INT 0
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 1
18717: NEG
18718: PUSH
18719: LD_INT 1
18721: NEG
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 1
18729: NEG
18730: PUSH
18731: LD_INT 2
18733: NEG
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: LD_INT 2
18744: NEG
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: LD_INT 1
18755: NEG
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 2
18763: PUSH
18764: LD_INT 0
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 2
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: LD_INT 2
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: LD_INT 2
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 0
18803: PUSH
18804: LD_INT 2
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 2
18824: NEG
18825: PUSH
18826: LD_INT 0
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 2
18835: NEG
18836: PUSH
18837: LD_INT 1
18839: NEG
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 2
18847: NEG
18848: PUSH
18849: LD_INT 2
18851: NEG
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18878: LD_ADDR_VAR 0 21
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: LD_INT 0
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: LD_INT 1
18898: NEG
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: LD_INT 1
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 0
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 1
18936: NEG
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 1
18947: NEG
18948: PUSH
18949: LD_INT 1
18951: NEG
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: LD_INT 2
18963: NEG
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: LD_INT 2
18974: NEG
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 2
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: LD_INT 2
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: LD_INT 2
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: NEG
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 2
19054: NEG
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 2
19065: NEG
19066: PUSH
19067: LD_INT 1
19069: NEG
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 2
19077: NEG
19078: PUSH
19079: LD_INT 2
19081: NEG
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19108: LD_ADDR_VAR 0 22
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 0
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 0
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 1
19166: NEG
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 1
19177: NEG
19178: PUSH
19179: LD_INT 1
19181: NEG
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: LD_INT 2
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: LD_INT 2
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: LD_INT 1
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 1
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 2
19284: NEG
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 2
19295: NEG
19296: PUSH
19297: LD_INT 1
19299: NEG
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 2
19307: NEG
19308: PUSH
19309: LD_INT 2
19311: NEG
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19338: LD_ADDR_VAR 0 23
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: LD_INT 0
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 0
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 0
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: LD_INT 0
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 1
19407: NEG
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: LD_INT 2
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: LD_INT 2
19434: NEG
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: LD_INT 1
19445: NEG
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 2
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: NEG
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 2
19525: NEG
19526: PUSH
19527: LD_INT 1
19529: NEG
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 2
19537: NEG
19538: PUSH
19539: LD_INT 2
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 2
19549: NEG
19550: PUSH
19551: LD_INT 3
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: NEG
19562: PUSH
19563: LD_INT 3
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: LD_INT 2
19576: NEG
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 2
19584: PUSH
19585: LD_INT 1
19587: NEG
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19618: LD_ADDR_VAR 0 24
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 1
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 1
19676: NEG
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 1
19687: NEG
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: LD_INT 2
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 0
19711: PUSH
19712: LD_INT 2
19714: NEG
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 1
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 2
19733: PUSH
19734: LD_INT 0
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 2
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 2
19753: PUSH
19754: LD_INT 2
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: LD_INT 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 1
19783: NEG
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: NEG
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 2
19805: NEG
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: NEG
19818: PUSH
19819: LD_INT 2
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: LD_INT 2
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 2
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 3
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 3
19861: PUSH
19862: LD_INT 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19894: LD_ADDR_VAR 0 25
19898: PUSH
19899: LD_INT 0
19901: PUSH
19902: LD_INT 0
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 0
19911: PUSH
19912: LD_INT 1
19914: NEG
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 1
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 1
19932: PUSH
19933: LD_INT 1
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 0
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 1
19952: NEG
19953: PUSH
19954: LD_INT 0
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 1
19963: NEG
19964: PUSH
19965: LD_INT 1
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: LD_INT 2
19979: NEG
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: LD_INT 2
19990: NEG
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: LD_INT 1
20001: NEG
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: LD_INT 0
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: LD_INT 1
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 2
20029: PUSH
20030: LD_INT 2
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: LD_INT 2
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 0
20049: PUSH
20050: LD_INT 2
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: LD_INT 0
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 2
20081: NEG
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 2
20093: NEG
20094: PUSH
20095: LD_INT 2
20097: NEG
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 3
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 3
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 2
20125: PUSH
20126: LD_INT 3
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: LD_INT 3
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20168: LD_ADDR_VAR 0 26
20172: PUSH
20173: LD_INT 0
20175: PUSH
20176: LD_INT 0
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 0
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: LD_INT 0
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 0
20216: PUSH
20217: LD_INT 1
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: NEG
20227: PUSH
20228: LD_INT 0
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 1
20237: NEG
20238: PUSH
20239: LD_INT 1
20241: NEG
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: LD_INT 2
20253: NEG
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: LD_INT 2
20264: NEG
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 1
20272: PUSH
20273: LD_INT 1
20275: NEG
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 2
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 2
20303: PUSH
20304: LD_INT 2
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: LD_INT 2
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 0
20323: PUSH
20324: LD_INT 2
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: NEG
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 2
20355: NEG
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 2
20367: NEG
20368: PUSH
20369: LD_INT 2
20371: NEG
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 2
20379: PUSH
20380: LD_INT 3
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 1
20389: PUSH
20390: LD_INT 3
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 1
20399: NEG
20400: PUSH
20401: LD_INT 2
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 2
20410: NEG
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20444: LD_ADDR_VAR 0 27
20448: PUSH
20449: LD_INT 0
20451: PUSH
20452: LD_INT 0
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 0
20461: PUSH
20462: LD_INT 1
20464: NEG
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 1
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: LD_INT 1
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 0
20492: PUSH
20493: LD_INT 1
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 1
20502: NEG
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 1
20513: NEG
20514: PUSH
20515: LD_INT 1
20517: NEG
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 1
20525: NEG
20526: PUSH
20527: LD_INT 2
20529: NEG
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 0
20537: PUSH
20538: LD_INT 2
20540: NEG
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 2
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 2
20569: PUSH
20570: LD_INT 1
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 2
20579: PUSH
20580: LD_INT 2
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: LD_INT 2
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: LD_INT 2
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 2
20620: NEG
20621: PUSH
20622: LD_INT 0
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 2
20631: NEG
20632: PUSH
20633: LD_INT 1
20635: NEG
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 2
20643: NEG
20644: PUSH
20645: LD_INT 2
20647: NEG
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: NEG
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: NEG
20667: PUSH
20668: LD_INT 1
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 3
20677: NEG
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 3
20689: NEG
20690: PUSH
20691: LD_INT 2
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20724: LD_ADDR_VAR 0 28
20728: PUSH
20729: LD_INT 0
20731: PUSH
20732: LD_INT 0
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 0
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 0
20772: PUSH
20773: LD_INT 1
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 1
20782: NEG
20783: PUSH
20784: LD_INT 0
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 1
20793: NEG
20794: PUSH
20795: LD_INT 1
20797: NEG
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 1
20805: NEG
20806: PUSH
20807: LD_INT 2
20809: NEG
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: LD_INT 2
20820: NEG
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 1
20828: PUSH
20829: LD_INT 1
20831: NEG
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 2
20849: PUSH
20850: LD_INT 1
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 2
20859: PUSH
20860: LD_INT 2
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: LD_INT 2
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: LD_INT 2
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 1
20889: NEG
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 2
20900: NEG
20901: PUSH
20902: LD_INT 0
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 2
20911: NEG
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 2
20923: NEG
20924: PUSH
20925: LD_INT 2
20927: NEG
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: LD_INT 3
20939: NEG
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 1
20947: NEG
20948: PUSH
20949: LD_INT 3
20951: NEG
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 3
20959: NEG
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 3
20971: NEG
20972: PUSH
20973: LD_INT 2
20975: NEG
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21006: LD_ADDR_VAR 0 29
21010: PUSH
21011: LD_INT 0
21013: PUSH
21014: LD_INT 0
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 0
21023: PUSH
21024: LD_INT 1
21026: NEG
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 1
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 0
21054: PUSH
21055: LD_INT 1
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 1
21064: NEG
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 1
21075: NEG
21076: PUSH
21077: LD_INT 1
21079: NEG
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 1
21087: NEG
21088: PUSH
21089: LD_INT 2
21091: NEG
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: LD_INT 2
21102: NEG
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 2
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 1
21141: PUSH
21142: LD_INT 2
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: LD_INT 2
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 1
21161: NEG
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 2
21172: NEG
21173: PUSH
21174: LD_INT 1
21176: NEG
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 2
21184: NEG
21185: PUSH
21186: LD_INT 2
21188: NEG
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 2
21196: NEG
21197: PUSH
21198: LD_INT 3
21200: NEG
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 1
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 3
21219: PUSH
21220: LD_INT 1
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: LD_INT 3
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 1
21239: NEG
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 3
21250: NEG
21251: PUSH
21252: LD_INT 2
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21285: LD_ADDR_VAR 0 30
21289: PUSH
21290: LD_INT 0
21292: PUSH
21293: LD_INT 0
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: LD_INT 1
21305: NEG
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: LD_INT 1
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 0
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: NEG
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 1
21354: NEG
21355: PUSH
21356: LD_INT 1
21358: NEG
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: LD_INT 2
21370: NEG
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 0
21378: PUSH
21379: LD_INT 2
21381: NEG
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: LD_INT 1
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 2
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 2
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 1
21430: PUSH
21431: LD_INT 2
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: NEG
21441: PUSH
21442: LD_INT 1
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 2
21451: NEG
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 2
21462: NEG
21463: PUSH
21464: LD_INT 1
21466: NEG
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 1
21474: NEG
21475: PUSH
21476: LD_INT 3
21478: NEG
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 1
21486: PUSH
21487: LD_INT 2
21489: NEG
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 3
21497: PUSH
21498: LD_INT 2
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 2
21507: PUSH
21508: LD_INT 3
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 2
21517: NEG
21518: PUSH
21519: LD_INT 1
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 3
21528: NEG
21529: PUSH
21530: LD_INT 1
21532: NEG
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21563: LD_ADDR_VAR 0 31
21567: PUSH
21568: LD_INT 0
21570: PUSH
21571: LD_INT 0
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 0
21580: PUSH
21581: LD_INT 1
21583: NEG
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 0
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 1
21621: NEG
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 1
21632: NEG
21633: PUSH
21634: LD_INT 1
21636: NEG
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 1
21644: NEG
21645: PUSH
21646: LD_INT 2
21648: NEG
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: LD_INT 1
21659: NEG
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 2
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: LD_INT 1
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: LD_INT 2
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: LD_INT 2
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: LD_INT 2
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: NEG
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 2
21740: NEG
21741: PUSH
21742: LD_INT 2
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: NEG
21753: PUSH
21754: LD_INT 3
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 2
21764: PUSH
21765: LD_INT 1
21767: NEG
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 3
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 1
21785: PUSH
21786: LD_INT 3
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 1
21795: NEG
21796: PUSH
21797: LD_INT 2
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 3
21806: NEG
21807: PUSH
21808: LD_INT 2
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21841: LD_ADDR_VAR 0 32
21845: PUSH
21846: LD_INT 0
21848: PUSH
21849: LD_INT 0
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: LD_INT 1
21861: NEG
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 1
21869: PUSH
21870: LD_INT 0
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 1
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 0
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 1
21899: NEG
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 1
21910: NEG
21911: PUSH
21912: LD_INT 1
21914: NEG
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: LD_INT 2
21926: NEG
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: LD_INT 2
21937: NEG
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: LD_INT 1
21948: NEG
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 1
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 2
21966: PUSH
21967: LD_INT 2
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: LD_INT 2
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 2
22007: NEG
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 2
22018: NEG
22019: PUSH
22020: LD_INT 1
22022: NEG
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: LD_INT 3
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: LD_INT 2
22045: NEG
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 3
22053: PUSH
22054: LD_INT 2
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 2
22063: PUSH
22064: LD_INT 3
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 2
22073: NEG
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 3
22084: NEG
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22119: LD_ADDR_VAR 0 33
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: LD_INT 0
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: LD_INT 1
22139: NEG
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 1
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 0
22167: PUSH
22168: LD_INT 1
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 1
22177: NEG
22178: PUSH
22179: LD_INT 0
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: LD_INT 1
22192: NEG
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 1
22200: NEG
22201: PUSH
22202: LD_INT 2
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: LD_INT 1
22215: NEG
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: LD_INT 2
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: LD_INT 2
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 2
22274: NEG
22275: PUSH
22276: LD_INT 0
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 2
22285: NEG
22286: PUSH
22287: LD_INT 1
22289: NEG
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 2
22297: NEG
22298: PUSH
22299: LD_INT 2
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 2
22309: NEG
22310: PUSH
22311: LD_INT 3
22313: NEG
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 2
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 3
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: LD_INT 3
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 1
22352: NEG
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 3
22363: NEG
22364: PUSH
22365: LD_INT 2
22367: NEG
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22398: LD_ADDR_VAR 0 34
22402: PUSH
22403: LD_INT 0
22405: PUSH
22406: LD_INT 0
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: LD_INT 1
22418: NEG
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 1
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 1
22436: PUSH
22437: LD_INT 1
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: LD_INT 1
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 1
22456: NEG
22457: PUSH
22458: LD_INT 0
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: NEG
22468: PUSH
22469: LD_INT 1
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 1
22479: NEG
22480: PUSH
22481: LD_INT 2
22483: NEG
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: LD_INT 2
22494: NEG
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: LD_INT 1
22505: NEG
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 2
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 2
22523: PUSH
22524: LD_INT 2
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 1
22533: PUSH
22534: LD_INT 2
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 1
22543: NEG
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 2
22554: NEG
22555: PUSH
22556: LD_INT 0
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 2
22565: NEG
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 2
22577: NEG
22578: PUSH
22579: LD_INT 2
22581: NEG
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 1
22589: NEG
22590: PUSH
22591: LD_INT 3
22593: NEG
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: PUSH
22602: LD_INT 2
22604: NEG
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 3
22612: PUSH
22613: LD_INT 2
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: LD_INT 3
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 2
22632: NEG
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 3
22643: NEG
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22678: LD_ADDR_VAR 0 35
22682: PUSH
22683: LD_INT 0
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 0
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: PUSH
22707: LD_INT 0
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: LD_INT 1
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 1
22736: NEG
22737: PUSH
22738: LD_INT 0
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 1
22747: NEG
22748: PUSH
22749: LD_INT 1
22751: NEG
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: LD_INT 1
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 2
22769: NEG
22770: PUSH
22771: LD_INT 1
22773: NEG
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22790: LD_ADDR_VAR 0 36
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 0
22807: PUSH
22808: LD_INT 1
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: LD_INT 0
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 1
22848: NEG
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: NEG
22860: PUSH
22861: LD_INT 1
22863: NEG
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 1
22871: NEG
22872: PUSH
22873: LD_INT 2
22875: NEG
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22902: LD_ADDR_VAR 0 37
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: LD_INT 0
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: LD_INT 1
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: LD_INT 0
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 1
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 0
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 1
22960: NEG
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 1
22971: NEG
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 1
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 1
22994: NEG
22995: PUSH
22996: LD_INT 1
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23014: LD_ADDR_VAR 0 38
23018: PUSH
23019: LD_INT 0
23021: PUSH
23022: LD_INT 0
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 0
23031: PUSH
23032: LD_INT 1
23034: NEG
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 1
23042: PUSH
23043: LD_INT 0
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 0
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: NEG
23073: PUSH
23074: LD_INT 0
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: LD_INT 1
23087: NEG
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 2
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 2
23105: NEG
23106: PUSH
23107: LD_INT 1
23109: NEG
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23126: LD_ADDR_VAR 0 39
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 0
23143: PUSH
23144: LD_INT 1
23146: NEG
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 1
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 1
23164: PUSH
23165: LD_INT 1
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 0
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: LD_INT 0
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 1
23207: NEG
23208: PUSH
23209: LD_INT 2
23211: NEG
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 1
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23238: LD_ADDR_VAR 0 40
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: LD_INT 0
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 0
23255: PUSH
23256: LD_INT 1
23258: NEG
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 1
23276: PUSH
23277: LD_INT 1
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 0
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: NEG
23297: PUSH
23298: LD_INT 0
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 1
23307: NEG
23308: PUSH
23309: LD_INT 1
23311: NEG
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: LD_INT 1
23322: NEG
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 1
23330: NEG
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23350: LD_ADDR_VAR 0 41
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 1
23378: PUSH
23379: LD_INT 0
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 1
23419: NEG
23420: PUSH
23421: LD_INT 1
23423: NEG
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: LD_INT 0
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 2
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 2
23505: NEG
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: NEG
23517: PUSH
23518: LD_INT 1
23520: NEG
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 2
23528: NEG
23529: PUSH
23530: LD_INT 2
23532: NEG
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 2
23540: NEG
23541: PUSH
23542: LD_INT 3
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 3
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 3
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 3
23593: PUSH
23594: LD_INT 3
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 2
23603: PUSH
23604: LD_INT 3
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 2
23613: NEG
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 3
23624: NEG
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 3
23635: NEG
23636: PUSH
23637: LD_INT 1
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 3
23647: NEG
23648: PUSH
23649: LD_INT 2
23651: NEG
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 3
23659: NEG
23660: PUSH
23661: LD_INT 3
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23700: LD_ADDR_VAR 0 42
23704: PUSH
23705: LD_INT 0
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: LD_INT 1
23720: NEG
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: LD_INT 0
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 1
23769: NEG
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: LD_INT 2
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: LD_INT 2
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: LD_INT 2
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 2
23866: NEG
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 2
23878: NEG
23879: PUSH
23880: LD_INT 2
23882: NEG
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 2
23890: NEG
23891: PUSH
23892: LD_INT 3
23894: NEG
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: NEG
23903: PUSH
23904: LD_INT 3
23906: NEG
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: LD_INT 3
23917: NEG
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: LD_INT 2
23928: NEG
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: LD_INT 2
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 3
23946: PUSH
23947: LD_INT 3
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: LD_INT 3
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: LD_INT 3
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: LD_INT 3
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 3
23997: NEG
23998: PUSH
23999: LD_INT 2
24001: NEG
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 3
24009: NEG
24010: PUSH
24011: LD_INT 3
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24050: LD_ADDR_VAR 0 43
24054: PUSH
24055: LD_INT 0
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 0
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 1
24108: NEG
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: LD_INT 2
24135: NEG
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: LD_INT 2
24146: NEG
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: LD_INT 1
24157: NEG
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 2
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 2
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 0
24195: PUSH
24196: LD_INT 2
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 1
24205: NEG
24206: PUSH
24207: LD_INT 1
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 2
24216: NEG
24217: PUSH
24218: LD_INT 0
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 2
24227: NEG
24228: PUSH
24229: LD_INT 1
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: LD_INT 3
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: LD_INT 3
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: LD_INT 2
24265: NEG
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 2
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 3
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 3
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: LD_INT 3
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: LD_INT 3
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: LD_INT 2
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 2
24335: NEG
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 3
24346: NEG
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 3
24357: NEG
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24398: LD_ADDR_VAR 0 44
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 0
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: NEG
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 1
24467: NEG
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 1
24494: NEG
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 0
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: LD_INT 1
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: LD_INT 2
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: LD_INT 0
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 2
24564: NEG
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: NEG
24577: PUSH
24578: LD_INT 2
24580: NEG
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: NEG
24589: PUSH
24590: LD_INT 3
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 1
24603: NEG
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 3
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 3
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 3
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 3
24641: PUSH
24642: LD_INT 3
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: LD_INT 3
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 2
24661: NEG
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 3
24672: NEG
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 3
24683: NEG
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 3
24695: NEG
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 3
24707: NEG
24708: PUSH
24709: LD_INT 3
24711: NEG
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24748: LD_ADDR_VAR 0 45
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: LD_INT 1
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: LD_INT 2
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 2
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: LD_INT 1
24855: NEG
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 2
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 2
24938: NEG
24939: PUSH
24940: LD_INT 3
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: NEG
24951: PUSH
24952: LD_INT 3
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: LD_INT 3
24965: NEG
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: LD_INT 2
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 3
24984: PUSH
24985: LD_INT 2
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 3
24994: PUSH
24995: LD_INT 3
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 2
25004: PUSH
25005: LD_INT 3
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 3
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: LD_INT 3
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 3
25045: NEG
25046: PUSH
25047: LD_INT 2
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 3
25057: NEG
25058: PUSH
25059: LD_INT 3
25061: NEG
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25098: LD_ADDR_VAR 0 46
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: LD_INT 1
25118: NEG
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: LD_INT 1
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 1
25156: NEG
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: LD_INT 2
25183: NEG
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: LD_INT 2
25194: NEG
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: LD_INT 1
25205: NEG
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 2
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 2
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: LD_INT 2
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: LD_INT 2
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 2
25264: NEG
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 2
25275: NEG
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: NEG
25288: PUSH
25289: LD_INT 3
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 3
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: LD_INT 2
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 2
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 3
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 3
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: LD_INT 3
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: LD_INT 2
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 2
25383: NEG
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 3
25394: NEG
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 3
25405: NEG
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25446: LD_ADDR_VAR 0 47
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: LD_INT 1
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 0
25494: PUSH
25495: LD_INT 1
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: LD_INT 2
25531: NEG
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 2
25542: NEG
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 2
25561: NEG
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 2
25573: NEG
25574: PUSH
25575: LD_INT 2
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25597: LD_ADDR_VAR 0 48
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 1
25666: NEG
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: LD_INT 2
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: LD_INT 2
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: LD_INT 0
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 2
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25744: LD_ADDR_VAR 0 49
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 2
25836: PUSH
25837: LD_INT 0
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 2
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: LD_INT 2
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: LD_INT 2
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25888: LD_ADDR_VAR 0 50
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 1
25946: NEG
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 2
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: LD_INT 2
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 1
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 1
26009: NEG
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26032: LD_ADDR_VAR 0 51
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 1
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: LD_INT 1
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 1
26101: NEG
26102: PUSH
26103: LD_INT 1
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 2
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 2
26144: NEG
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 2
26155: NEG
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26179: LD_ADDR_VAR 0 52
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 1
26248: NEG
26249: PUSH
26250: LD_INT 1
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: LD_INT 2
26264: NEG
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 2
26294: NEG
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 2
26306: NEG
26307: PUSH
26308: LD_INT 2
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26330: LD_ADDR_VAR 0 53
26334: PUSH
26335: LD_INT 0
26337: PUSH
26338: LD_INT 0
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: LD_INT 2
26415: NEG
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: LD_INT 2
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 2
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: NEG
26507: PUSH
26508: LD_INT 0
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 2
26517: NEG
26518: PUSH
26519: LD_INT 1
26521: NEG
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: NEG
26530: PUSH
26531: LD_INT 2
26533: NEG
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26560: LD_ADDR_VAR 0 54
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 1
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: LD_INT 1
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: LD_INT 2
26645: NEG
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: LD_INT 2
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 2
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 2
26736: NEG
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 2
26747: NEG
26748: PUSH
26749: LD_INT 1
26751: NEG
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 2
26759: NEG
26760: PUSH
26761: LD_INT 2
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26790: LD_ADDR_VAR 0 55
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 1
26859: NEG
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 2
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 2
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 2
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 1
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: LD_INT 2
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: NEG
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 2
26977: NEG
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 2
26989: NEG
26990: PUSH
26991: LD_INT 2
26993: NEG
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27020: LD_ADDR_VAR 0 56
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: NEG
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: LD_INT 2
27105: NEG
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: LD_INT 2
27116: NEG
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 2
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 2
27196: NEG
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 2
27207: NEG
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: LD_INT 2
27223: NEG
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27250: LD_ADDR_VAR 0 57
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 2
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 2
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 2
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: LD_INT 1
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 2
27426: NEG
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 2
27437: NEG
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 2
27449: NEG
27450: PUSH
27451: LD_INT 2
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27480: LD_ADDR_VAR 0 58
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 1
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: LD_INT 2
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 2
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: LD_INT 1
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 2
27656: NEG
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27710: LD_ADDR_VAR 0 59
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: LD_INT 1
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27798: LD_ADDR_VAR 0 60
27802: PUSH
27803: LD_INT 0
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: LD_INT 1
27818: NEG
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 1
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: NEG
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: NEG
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27886: LD_ADDR_VAR 0 61
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: LD_INT 1
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 1
27955: NEG
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27974: LD_ADDR_VAR 0 62
27978: PUSH
27979: LD_INT 0
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: LD_INT 1
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: NEG
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28062: LD_ADDR_VAR 0 63
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 0
28079: PUSH
28080: LD_INT 1
28082: NEG
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 1
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: LD_INT 1
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 1
28120: NEG
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: LD_INT 1
28135: NEG
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28150: LD_ADDR_VAR 0 64
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: LD_INT 1
28170: NEG
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: NEG
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: LD_INT 1
28223: NEG
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: ST_TO_ADDR
// end ; 1 :
28238: GO 34135
28240: LD_INT 1
28242: DOUBLE
28243: EQUAL
28244: IFTRUE 28248
28246: GO 30871
28248: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28249: LD_ADDR_VAR 0 11
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: LD_INT 3
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 3
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 2
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28293: LD_ADDR_VAR 0 12
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 3
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 3
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: LIST
28333: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28334: LD_ADDR_VAR 0 13
28338: PUSH
28339: LD_INT 3
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 3
28351: PUSH
28352: LD_INT 3
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 3
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28374: LD_ADDR_VAR 0 14
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: LD_INT 3
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: LD_INT 3
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: LD_INT 2
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: LIST
28414: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28415: LD_ADDR_VAR 0 15
28419: PUSH
28420: LD_INT 2
28422: NEG
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 3
28433: NEG
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 3
28444: NEG
28445: PUSH
28446: LD_INT 1
28448: NEG
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28459: LD_ADDR_VAR 0 16
28463: PUSH
28464: LD_INT 2
28466: NEG
28467: PUSH
28468: LD_INT 3
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 3
28478: NEG
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 3
28490: NEG
28491: PUSH
28492: LD_INT 3
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: LIST
28504: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28505: LD_ADDR_VAR 0 17
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: LD_INT 3
28516: NEG
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 3
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: LD_INT 2
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: LIST
28548: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28549: LD_ADDR_VAR 0 18
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 3
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 3
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: LIST
28589: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28590: LD_ADDR_VAR 0 19
28594: PUSH
28595: LD_INT 3
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 3
28607: PUSH
28608: LD_INT 3
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 3
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28630: LD_ADDR_VAR 0 20
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: LD_INT 3
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: LD_INT 3
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: NEG
28658: PUSH
28659: LD_INT 2
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: LIST
28670: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28671: LD_ADDR_VAR 0 21
28675: PUSH
28676: LD_INT 2
28678: NEG
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 3
28689: NEG
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 3
28700: NEG
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28715: LD_ADDR_VAR 0 22
28719: PUSH
28720: LD_INT 2
28722: NEG
28723: PUSH
28724: LD_INT 3
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 3
28734: NEG
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 3
28746: NEG
28747: PUSH
28748: LD_INT 3
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28761: LD_ADDR_VAR 0 23
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: LD_INT 3
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 4
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: LD_INT 3
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28805: LD_ADDR_VAR 0 24
28809: PUSH
28810: LD_INT 3
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 3
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 4
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: LIST
28845: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28846: LD_ADDR_VAR 0 25
28850: PUSH
28851: LD_INT 3
28853: PUSH
28854: LD_INT 3
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 4
28863: PUSH
28864: LD_INT 3
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 3
28873: PUSH
28874: LD_INT 4
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28886: LD_ADDR_VAR 0 26
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 3
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: LD_INT 4
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: LD_INT 3
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: LIST
28926: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28927: LD_ADDR_VAR 0 27
28931: PUSH
28932: LD_INT 3
28934: NEG
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 3
28945: NEG
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 4
28956: NEG
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: LIST
28970: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28971: LD_ADDR_VAR 0 28
28975: PUSH
28976: LD_INT 3
28978: NEG
28979: PUSH
28980: LD_INT 3
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 3
28990: NEG
28991: PUSH
28992: LD_INT 4
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 4
29002: NEG
29003: PUSH
29004: LD_INT 3
29006: NEG
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29017: LD_ADDR_VAR 0 29
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: LD_INT 3
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: LD_INT 3
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: LD_INT 2
29050: NEG
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 1
29058: NEG
29059: PUSH
29060: LD_INT 4
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: LD_INT 4
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 1
29081: PUSH
29082: LD_INT 3
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: LD_INT 5
29096: NEG
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: LD_INT 5
29107: NEG
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: LD_INT 4
29118: NEG
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 1
29126: NEG
29127: PUSH
29128: LD_INT 6
29130: NEG
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: LD_INT 6
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 1
29149: PUSH
29150: LD_INT 5
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29172: LD_ADDR_VAR 0 30
29176: PUSH
29177: LD_INT 2
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 3
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 3
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 3
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 4
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 4
29231: PUSH
29232: LD_INT 1
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 4
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 5
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 5
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 5
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 6
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 6
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29315: LD_ADDR_VAR 0 31
29319: PUSH
29320: LD_INT 3
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 3
29332: PUSH
29333: LD_INT 3
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: PUSH
29343: LD_INT 3
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 4
29352: PUSH
29353: LD_INT 3
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 4
29362: PUSH
29363: LD_INT 4
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 3
29372: PUSH
29373: LD_INT 4
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 5
29382: PUSH
29383: LD_INT 4
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 5
29392: PUSH
29393: LD_INT 5
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 4
29402: PUSH
29403: LD_INT 5
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 6
29412: PUSH
29413: LD_INT 5
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 6
29422: PUSH
29423: LD_INT 6
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 5
29432: PUSH
29433: LD_INT 6
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29454: LD_ADDR_VAR 0 32
29458: PUSH
29459: LD_INT 1
29461: PUSH
29462: LD_INT 3
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: LD_INT 3
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 1
29492: PUSH
29493: LD_INT 4
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: LD_INT 4
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: LD_INT 3
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: LD_INT 5
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: LD_INT 5
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: LD_INT 4
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: LD_INT 6
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: LD_INT 6
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: LD_INT 5
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29597: LD_ADDR_VAR 0 33
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 3
29615: NEG
29616: PUSH
29617: LD_INT 0
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 3
29626: NEG
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 3
29638: NEG
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 4
29649: NEG
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 4
29660: NEG
29661: PUSH
29662: LD_INT 1
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 4
29672: NEG
29673: PUSH
29674: LD_INT 1
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 5
29683: NEG
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 5
29694: NEG
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 5
29706: NEG
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 6
29717: NEG
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 6
29728: NEG
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29752: LD_ADDR_VAR 0 34
29756: PUSH
29757: LD_INT 2
29759: NEG
29760: PUSH
29761: LD_INT 3
29763: NEG
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 3
29771: NEG
29772: PUSH
29773: LD_INT 2
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 3
29783: NEG
29784: PUSH
29785: LD_INT 3
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 3
29795: NEG
29796: PUSH
29797: LD_INT 4
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 4
29807: NEG
29808: PUSH
29809: LD_INT 3
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 4
29819: NEG
29820: PUSH
29821: LD_INT 4
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 4
29831: NEG
29832: PUSH
29833: LD_INT 5
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 5
29843: NEG
29844: PUSH
29845: LD_INT 4
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 5
29855: NEG
29856: PUSH
29857: LD_INT 5
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 5
29867: NEG
29868: PUSH
29869: LD_INT 6
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 6
29879: NEG
29880: PUSH
29881: LD_INT 5
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 6
29891: NEG
29892: PUSH
29893: LD_INT 6
29895: NEG
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29915: LD_ADDR_VAR 0 41
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: LD_INT 2
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: LD_INT 3
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 1
29945: PUSH
29946: LD_INT 2
29948: NEG
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: LIST
29958: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29959: LD_ADDR_VAR 0 42
29963: PUSH
29964: LD_INT 2
29966: PUSH
29967: LD_INT 0
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: LD_INT 1
29979: NEG
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 3
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30000: LD_ADDR_VAR 0 43
30004: PUSH
30005: LD_INT 2
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 3
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 2
30027: PUSH
30028: LD_INT 3
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30040: LD_ADDR_VAR 0 44
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: LD_INT 2
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 1
30067: NEG
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30081: LD_ADDR_VAR 0 45
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 2
30099: NEG
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 3
30110: NEG
30111: PUSH
30112: LD_INT 1
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: LIST
30124: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30125: LD_ADDR_VAR 0 46
30129: PUSH
30130: LD_INT 2
30132: NEG
30133: PUSH
30134: LD_INT 2
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 2
30144: NEG
30145: PUSH
30146: LD_INT 3
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 3
30156: NEG
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: LIST
30170: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30171: LD_ADDR_VAR 0 47
30175: PUSH
30176: LD_INT 2
30178: NEG
30179: PUSH
30180: LD_INT 3
30182: NEG
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: LD_INT 3
30194: NEG
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30204: LD_ADDR_VAR 0 48
30208: PUSH
30209: LD_INT 1
30211: PUSH
30212: LD_INT 2
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 2
30222: PUSH
30223: LD_INT 1
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30235: LD_ADDR_VAR 0 49
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30264: LD_ADDR_VAR 0 50
30268: PUSH
30269: LD_INT 2
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: LD_INT 3
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30293: LD_ADDR_VAR 0 51
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: LD_INT 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 2
30311: NEG
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30324: LD_ADDR_VAR 0 52
30328: PUSH
30329: LD_INT 3
30331: NEG
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 3
30343: NEG
30344: PUSH
30345: LD_INT 2
30347: NEG
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30357: LD_ADDR_VAR 0 53
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: LD_INT 3
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: LD_INT 3
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 2
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30401: LD_ADDR_VAR 0 54
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 3
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: LIST
30441: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30442: LD_ADDR_VAR 0 55
30446: PUSH
30447: LD_INT 3
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 3
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: LD_INT 3
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30482: LD_ADDR_VAR 0 56
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 3
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30523: LD_ADDR_VAR 0 57
30527: PUSH
30528: LD_INT 2
30530: NEG
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 3
30541: NEG
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 3
30552: NEG
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: LIST
30566: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30567: LD_ADDR_VAR 0 58
30571: PUSH
30572: LD_INT 2
30574: NEG
30575: PUSH
30576: LD_INT 3
30578: NEG
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: LD_INT 2
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 3
30598: NEG
30599: PUSH
30600: LD_INT 3
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30613: LD_ADDR_VAR 0 59
30617: PUSH
30618: LD_INT 1
30620: NEG
30621: PUSH
30622: LD_INT 2
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: LD_INT 2
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: LD_INT 1
30646: NEG
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30657: LD_ADDR_VAR 0 60
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: LD_INT 1
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: LIST
30697: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30698: LD_ADDR_VAR 0 61
30702: PUSH
30703: LD_INT 2
30705: PUSH
30706: LD_INT 1
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 2
30715: PUSH
30716: LD_INT 2
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30738: LD_ADDR_VAR 0 62
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: LD_INT 2
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: LIST
30778: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30779: LD_ADDR_VAR 0 63
30783: PUSH
30784: LD_INT 1
30786: NEG
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 2
30797: NEG
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 2
30808: NEG
30809: PUSH
30810: LD_INT 1
30812: NEG
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30823: LD_ADDR_VAR 0 64
30827: PUSH
30828: LD_INT 1
30830: NEG
30831: PUSH
30832: LD_INT 2
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 2
30842: NEG
30843: PUSH
30844: LD_INT 1
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 2
30854: NEG
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: LIST
30868: ST_TO_ADDR
// end ; 2 :
30869: GO 34135
30871: LD_INT 2
30873: DOUBLE
30874: EQUAL
30875: IFTRUE 30879
30877: GO 34134
30879: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30880: LD_ADDR_VAR 0 29
30884: PUSH
30885: LD_INT 4
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 4
30897: PUSH
30898: LD_INT 1
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 5
30908: PUSH
30909: LD_INT 0
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 5
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 4
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 3
30938: PUSH
30939: LD_INT 0
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 3
30948: PUSH
30949: LD_INT 1
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 3
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 5
30970: PUSH
30971: LD_INT 2
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 3
30980: PUSH
30981: LD_INT 3
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 3
30990: PUSH
30991: LD_INT 2
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 4
31000: PUSH
31001: LD_INT 3
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 4
31010: PUSH
31011: LD_INT 4
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: PUSH
31021: LD_INT 4
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 2
31030: PUSH
31031: LD_INT 3
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 2
31040: PUSH
31041: LD_INT 2
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 4
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 2
31060: PUSH
31061: LD_INT 4
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 4
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: LD_INT 3
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 4
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: LD_INT 5
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 5
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 4
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: LD_INT 5
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 2
31152: NEG
31153: PUSH
31154: LD_INT 3
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 3
31163: NEG
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 3
31174: NEG
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 2
31186: NEG
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 2
31197: NEG
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 3
31208: NEG
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 4
31219: NEG
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 4
31230: NEG
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 4
31242: NEG
31243: PUSH
31244: LD_INT 2
31246: NEG
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 2
31254: NEG
31255: PUSH
31256: LD_INT 2
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 4
31265: NEG
31266: PUSH
31267: LD_INT 4
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 4
31277: NEG
31278: PUSH
31279: LD_INT 5
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 3
31289: NEG
31290: PUSH
31291: LD_INT 4
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 3
31301: NEG
31302: PUSH
31303: LD_INT 3
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 4
31313: NEG
31314: PUSH
31315: LD_INT 3
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 5
31325: NEG
31326: PUSH
31327: LD_INT 4
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 5
31337: NEG
31338: PUSH
31339: LD_INT 5
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 3
31349: NEG
31350: PUSH
31351: LD_INT 5
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 5
31361: NEG
31362: PUSH
31363: LD_INT 3
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31418: LD_ADDR_VAR 0 30
31422: PUSH
31423: LD_INT 4
31425: PUSH
31426: LD_INT 4
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 4
31435: PUSH
31436: LD_INT 3
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 5
31445: PUSH
31446: LD_INT 4
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 5
31455: PUSH
31456: LD_INT 5
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 4
31465: PUSH
31466: LD_INT 5
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 3
31475: PUSH
31476: LD_INT 4
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 3
31485: PUSH
31486: LD_INT 3
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 5
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 3
31505: PUSH
31506: LD_INT 5
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: LD_INT 4
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: LD_INT 4
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: LD_INT 3
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 1
31576: NEG
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 4
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 4
31608: NEG
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 4
31619: NEG
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 3
31631: NEG
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: NEG
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 4
31653: NEG
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 5
31664: NEG
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 5
31675: NEG
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 5
31687: NEG
31688: PUSH
31689: LD_INT 2
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 3
31699: NEG
31700: PUSH
31701: LD_INT 2
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 3
31710: NEG
31711: PUSH
31712: LD_INT 3
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 3
31722: NEG
31723: PUSH
31724: LD_INT 4
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: NEG
31735: PUSH
31736: LD_INT 3
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: LD_INT 2
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 3
31758: NEG
31759: PUSH
31760: LD_INT 2
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 4
31770: NEG
31771: PUSH
31772: LD_INT 3
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 4
31782: NEG
31783: PUSH
31784: LD_INT 4
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: LD_INT 4
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 4
31806: NEG
31807: PUSH
31808: LD_INT 2
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 4
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 5
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 4
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: LD_INT 3
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: LD_INT 4
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 1
31885: NEG
31886: PUSH
31887: LD_INT 5
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: LD_INT 3
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: NEG
31909: PUSH
31910: LD_INT 5
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31965: LD_ADDR_VAR 0 31
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: LD_INT 4
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: LD_INT 3
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: LD_INT 4
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: LD_INT 5
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: LD_INT 5
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: LD_INT 4
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: LD_INT 5
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 3
32065: NEG
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 3
32076: NEG
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 2
32088: NEG
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 2
32099: NEG
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 4
32121: NEG
32122: PUSH
32123: LD_INT 0
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 4
32132: NEG
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 4
32144: NEG
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 2
32156: NEG
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 4
32167: NEG
32168: PUSH
32169: LD_INT 4
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 4
32179: NEG
32180: PUSH
32181: LD_INT 5
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 3
32191: NEG
32192: PUSH
32193: LD_INT 4
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 3
32203: NEG
32204: PUSH
32205: LD_INT 3
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 4
32215: NEG
32216: PUSH
32217: LD_INT 3
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 5
32227: NEG
32228: PUSH
32229: LD_INT 4
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 5
32239: NEG
32240: PUSH
32241: LD_INT 5
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 3
32251: NEG
32252: PUSH
32253: LD_INT 5
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 5
32263: NEG
32264: PUSH
32265: LD_INT 3
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: LD_INT 3
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: LD_INT 4
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 3
32300: NEG
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: LD_INT 2
32311: NEG
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: LD_INT 2
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: LD_INT 3
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: LD_INT 4
32346: NEG
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: LD_INT 2
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 2
32365: NEG
32366: PUSH
32367: LD_INT 4
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 4
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 4
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 5
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 5
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 4
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 3
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 3
32449: PUSH
32450: LD_INT 2
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 5
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32515: LD_ADDR_VAR 0 32
32519: PUSH
32520: LD_INT 4
32522: NEG
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 4
32533: NEG
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 3
32545: NEG
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 3
32556: NEG
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 4
32567: NEG
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 5
32578: NEG
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 5
32589: NEG
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 5
32601: NEG
32602: PUSH
32603: LD_INT 2
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 3
32613: NEG
32614: PUSH
32615: LD_INT 2
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: NEG
32625: PUSH
32626: LD_INT 3
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 3
32636: NEG
32637: PUSH
32638: LD_INT 4
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 3
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: LD_INT 2
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 3
32672: NEG
32673: PUSH
32674: LD_INT 2
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 4
32684: NEG
32685: PUSH
32686: LD_INT 3
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 4
32696: NEG
32697: PUSH
32698: LD_INT 4
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: LD_INT 4
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 4
32720: NEG
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 4
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 5
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: LD_INT 4
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: LD_INT 3
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: LD_INT 3
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: LD_INT 4
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 1
32799: NEG
32800: PUSH
32801: LD_INT 5
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: LD_INT 3
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 2
32822: NEG
32823: PUSH
32824: LD_INT 5
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 3
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 3
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 4
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 4
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 3
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 2
32895: PUSH
32896: LD_INT 1
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: LD_INT 2
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 4
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 4
32927: PUSH
32928: LD_INT 4
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 4
32937: PUSH
32938: LD_INT 3
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 5
32947: PUSH
32948: LD_INT 4
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 5
32957: PUSH
32958: LD_INT 5
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 4
32967: PUSH
32968: LD_INT 5
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 3
32977: PUSH
32978: LD_INT 4
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 3
32987: PUSH
32988: LD_INT 3
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 5
32997: PUSH
32998: LD_INT 3
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 3
33007: PUSH
33008: LD_INT 5
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33062: LD_ADDR_VAR 0 33
33066: PUSH
33067: LD_INT 4
33069: NEG
33070: PUSH
33071: LD_INT 4
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 4
33081: NEG
33082: PUSH
33083: LD_INT 5
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 3
33093: NEG
33094: PUSH
33095: LD_INT 4
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 3
33105: NEG
33106: PUSH
33107: LD_INT 3
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 4
33117: NEG
33118: PUSH
33119: LD_INT 3
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 5
33129: NEG
33130: PUSH
33131: LD_INT 4
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 5
33141: NEG
33142: PUSH
33143: LD_INT 5
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 3
33153: NEG
33154: PUSH
33155: LD_INT 5
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 5
33165: NEG
33166: PUSH
33167: LD_INT 3
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 3
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: LD_INT 4
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 3
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: LD_INT 3
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: LD_INT 4
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: LD_INT 2
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: LD_INT 4
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 4
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 4
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 5
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 5
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 4
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 3
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: LD_INT 1
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 3
33351: PUSH
33352: LD_INT 2
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 5
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 3
33372: PUSH
33373: LD_INT 3
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 3
33382: PUSH
33383: LD_INT 2
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 4
33392: PUSH
33393: LD_INT 3
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 4
33402: PUSH
33403: LD_INT 4
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 3
33412: PUSH
33413: LD_INT 4
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: PUSH
33423: LD_INT 3
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 2
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 4
33442: PUSH
33443: LD_INT 2
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 2
33452: PUSH
33453: LD_INT 4
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: LD_INT 4
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: LD_INT 3
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 4
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: LD_INT 5
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 0
33502: PUSH
33503: LD_INT 5
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: NEG
33513: PUSH
33514: LD_INT 4
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: LD_INT 3
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 2
33534: PUSH
33535: LD_INT 5
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 2
33544: NEG
33545: PUSH
33546: LD_INT 3
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33600: LD_ADDR_VAR 0 34
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: LD_INT 4
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: LD_INT 5
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: LD_INT 4
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 1
33640: PUSH
33641: LD_INT 3
33643: NEG
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: LD_INT 3
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: LD_INT 4
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: PUSH
33676: LD_INT 5
33678: NEG
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 2
33686: PUSH
33687: LD_INT 3
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: LD_INT 5
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 3
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 3
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 4
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 4
33740: PUSH
33741: LD_INT 1
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 3
33750: PUSH
33751: LD_INT 1
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: LD_INT 1
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: LD_INT 2
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 4
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 4
33802: PUSH
33803: LD_INT 4
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 4
33812: PUSH
33813: LD_INT 3
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 5
33822: PUSH
33823: LD_INT 4
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 5
33832: PUSH
33833: LD_INT 5
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 4
33842: PUSH
33843: LD_INT 5
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 3
33852: PUSH
33853: LD_INT 4
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 3
33862: PUSH
33863: LD_INT 3
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 5
33872: PUSH
33873: LD_INT 3
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 3
33882: PUSH
33883: LD_INT 5
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: LD_INT 3
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: LD_INT 3
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: LD_INT 4
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: LD_INT 4
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: LD_INT 3
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 2
33964: PUSH
33965: LD_INT 4
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 2
33974: NEG
33975: PUSH
33976: LD_INT 2
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 4
33985: NEG
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 4
33996: NEG
33997: PUSH
33998: LD_INT 1
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 3
34008: NEG
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 3
34019: NEG
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 4
34030: NEG
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 5
34041: NEG
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 5
34052: NEG
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 5
34064: NEG
34065: PUSH
34066: LD_INT 2
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 3
34076: NEG
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: ST_TO_ADDR
// end ; end ;
34132: GO 34135
34134: POP
// case btype of b_depot , b_warehouse :
34135: LD_VAR 0 1
34139: PUSH
34140: LD_INT 0
34142: DOUBLE
34143: EQUAL
34144: IFTRUE 34154
34146: LD_INT 1
34148: DOUBLE
34149: EQUAL
34150: IFTRUE 34154
34152: GO 34355
34154: POP
// case nation of nation_american :
34155: LD_VAR 0 5
34159: PUSH
34160: LD_INT 1
34162: DOUBLE
34163: EQUAL
34164: IFTRUE 34168
34166: GO 34224
34168: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34169: LD_ADDR_VAR 0 9
34173: PUSH
34174: LD_VAR 0 11
34178: PUSH
34179: LD_VAR 0 12
34183: PUSH
34184: LD_VAR 0 13
34188: PUSH
34189: LD_VAR 0 14
34193: PUSH
34194: LD_VAR 0 15
34198: PUSH
34199: LD_VAR 0 16
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: PUSH
34212: LD_VAR 0 4
34216: PUSH
34217: LD_INT 1
34219: PLUS
34220: ARRAY
34221: ST_TO_ADDR
34222: GO 34353
34224: LD_INT 2
34226: DOUBLE
34227: EQUAL
34228: IFTRUE 34232
34230: GO 34288
34232: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34233: LD_ADDR_VAR 0 9
34237: PUSH
34238: LD_VAR 0 17
34242: PUSH
34243: LD_VAR 0 18
34247: PUSH
34248: LD_VAR 0 19
34252: PUSH
34253: LD_VAR 0 20
34257: PUSH
34258: LD_VAR 0 21
34262: PUSH
34263: LD_VAR 0 22
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: PUSH
34276: LD_VAR 0 4
34280: PUSH
34281: LD_INT 1
34283: PLUS
34284: ARRAY
34285: ST_TO_ADDR
34286: GO 34353
34288: LD_INT 3
34290: DOUBLE
34291: EQUAL
34292: IFTRUE 34296
34294: GO 34352
34296: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34297: LD_ADDR_VAR 0 9
34301: PUSH
34302: LD_VAR 0 23
34306: PUSH
34307: LD_VAR 0 24
34311: PUSH
34312: LD_VAR 0 25
34316: PUSH
34317: LD_VAR 0 26
34321: PUSH
34322: LD_VAR 0 27
34326: PUSH
34327: LD_VAR 0 28
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: PUSH
34340: LD_VAR 0 4
34344: PUSH
34345: LD_INT 1
34347: PLUS
34348: ARRAY
34349: ST_TO_ADDR
34350: GO 34353
34352: POP
34353: GO 34908
34355: LD_INT 2
34357: DOUBLE
34358: EQUAL
34359: IFTRUE 34369
34361: LD_INT 3
34363: DOUBLE
34364: EQUAL
34365: IFTRUE 34369
34367: GO 34425
34369: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34370: LD_ADDR_VAR 0 9
34374: PUSH
34375: LD_VAR 0 29
34379: PUSH
34380: LD_VAR 0 30
34384: PUSH
34385: LD_VAR 0 31
34389: PUSH
34390: LD_VAR 0 32
34394: PUSH
34395: LD_VAR 0 33
34399: PUSH
34400: LD_VAR 0 34
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: PUSH
34413: LD_VAR 0 4
34417: PUSH
34418: LD_INT 1
34420: PLUS
34421: ARRAY
34422: ST_TO_ADDR
34423: GO 34908
34425: LD_INT 16
34427: DOUBLE
34428: EQUAL
34429: IFTRUE 34487
34431: LD_INT 17
34433: DOUBLE
34434: EQUAL
34435: IFTRUE 34487
34437: LD_INT 18
34439: DOUBLE
34440: EQUAL
34441: IFTRUE 34487
34443: LD_INT 19
34445: DOUBLE
34446: EQUAL
34447: IFTRUE 34487
34449: LD_INT 22
34451: DOUBLE
34452: EQUAL
34453: IFTRUE 34487
34455: LD_INT 20
34457: DOUBLE
34458: EQUAL
34459: IFTRUE 34487
34461: LD_INT 21
34463: DOUBLE
34464: EQUAL
34465: IFTRUE 34487
34467: LD_INT 23
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34487
34473: LD_INT 24
34475: DOUBLE
34476: EQUAL
34477: IFTRUE 34487
34479: LD_INT 25
34481: DOUBLE
34482: EQUAL
34483: IFTRUE 34487
34485: GO 34543
34487: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34488: LD_ADDR_VAR 0 9
34492: PUSH
34493: LD_VAR 0 35
34497: PUSH
34498: LD_VAR 0 36
34502: PUSH
34503: LD_VAR 0 37
34507: PUSH
34508: LD_VAR 0 38
34512: PUSH
34513: LD_VAR 0 39
34517: PUSH
34518: LD_VAR 0 40
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: PUSH
34531: LD_VAR 0 4
34535: PUSH
34536: LD_INT 1
34538: PLUS
34539: ARRAY
34540: ST_TO_ADDR
34541: GO 34908
34543: LD_INT 6
34545: DOUBLE
34546: EQUAL
34547: IFTRUE 34599
34549: LD_INT 7
34551: DOUBLE
34552: EQUAL
34553: IFTRUE 34599
34555: LD_INT 8
34557: DOUBLE
34558: EQUAL
34559: IFTRUE 34599
34561: LD_INT 13
34563: DOUBLE
34564: EQUAL
34565: IFTRUE 34599
34567: LD_INT 12
34569: DOUBLE
34570: EQUAL
34571: IFTRUE 34599
34573: LD_INT 15
34575: DOUBLE
34576: EQUAL
34577: IFTRUE 34599
34579: LD_INT 11
34581: DOUBLE
34582: EQUAL
34583: IFTRUE 34599
34585: LD_INT 14
34587: DOUBLE
34588: EQUAL
34589: IFTRUE 34599
34591: LD_INT 10
34593: DOUBLE
34594: EQUAL
34595: IFTRUE 34599
34597: GO 34655
34599: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34600: LD_ADDR_VAR 0 9
34604: PUSH
34605: LD_VAR 0 41
34609: PUSH
34610: LD_VAR 0 42
34614: PUSH
34615: LD_VAR 0 43
34619: PUSH
34620: LD_VAR 0 44
34624: PUSH
34625: LD_VAR 0 45
34629: PUSH
34630: LD_VAR 0 46
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: PUSH
34643: LD_VAR 0 4
34647: PUSH
34648: LD_INT 1
34650: PLUS
34651: ARRAY
34652: ST_TO_ADDR
34653: GO 34908
34655: LD_INT 36
34657: DOUBLE
34658: EQUAL
34659: IFTRUE 34663
34661: GO 34719
34663: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34664: LD_ADDR_VAR 0 9
34668: PUSH
34669: LD_VAR 0 47
34673: PUSH
34674: LD_VAR 0 48
34678: PUSH
34679: LD_VAR 0 49
34683: PUSH
34684: LD_VAR 0 50
34688: PUSH
34689: LD_VAR 0 51
34693: PUSH
34694: LD_VAR 0 52
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: PUSH
34707: LD_VAR 0 4
34711: PUSH
34712: LD_INT 1
34714: PLUS
34715: ARRAY
34716: ST_TO_ADDR
34717: GO 34908
34719: LD_INT 4
34721: DOUBLE
34722: EQUAL
34723: IFTRUE 34745
34725: LD_INT 5
34727: DOUBLE
34728: EQUAL
34729: IFTRUE 34745
34731: LD_INT 34
34733: DOUBLE
34734: EQUAL
34735: IFTRUE 34745
34737: LD_INT 37
34739: DOUBLE
34740: EQUAL
34741: IFTRUE 34745
34743: GO 34801
34745: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34746: LD_ADDR_VAR 0 9
34750: PUSH
34751: LD_VAR 0 53
34755: PUSH
34756: LD_VAR 0 54
34760: PUSH
34761: LD_VAR 0 55
34765: PUSH
34766: LD_VAR 0 56
34770: PUSH
34771: LD_VAR 0 57
34775: PUSH
34776: LD_VAR 0 58
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: PUSH
34789: LD_VAR 0 4
34793: PUSH
34794: LD_INT 1
34796: PLUS
34797: ARRAY
34798: ST_TO_ADDR
34799: GO 34908
34801: LD_INT 31
34803: DOUBLE
34804: EQUAL
34805: IFTRUE 34851
34807: LD_INT 32
34809: DOUBLE
34810: EQUAL
34811: IFTRUE 34851
34813: LD_INT 33
34815: DOUBLE
34816: EQUAL
34817: IFTRUE 34851
34819: LD_INT 27
34821: DOUBLE
34822: EQUAL
34823: IFTRUE 34851
34825: LD_INT 26
34827: DOUBLE
34828: EQUAL
34829: IFTRUE 34851
34831: LD_INT 28
34833: DOUBLE
34834: EQUAL
34835: IFTRUE 34851
34837: LD_INT 29
34839: DOUBLE
34840: EQUAL
34841: IFTRUE 34851
34843: LD_INT 30
34845: DOUBLE
34846: EQUAL
34847: IFTRUE 34851
34849: GO 34907
34851: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34852: LD_ADDR_VAR 0 9
34856: PUSH
34857: LD_VAR 0 59
34861: PUSH
34862: LD_VAR 0 60
34866: PUSH
34867: LD_VAR 0 61
34871: PUSH
34872: LD_VAR 0 62
34876: PUSH
34877: LD_VAR 0 63
34881: PUSH
34882: LD_VAR 0 64
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: PUSH
34895: LD_VAR 0 4
34899: PUSH
34900: LD_INT 1
34902: PLUS
34903: ARRAY
34904: ST_TO_ADDR
34905: GO 34908
34907: POP
// temp_list2 = [ ] ;
34908: LD_ADDR_VAR 0 10
34912: PUSH
34913: EMPTY
34914: ST_TO_ADDR
// for i in temp_list do
34915: LD_ADDR_VAR 0 8
34919: PUSH
34920: LD_VAR 0 9
34924: PUSH
34925: FOR_IN
34926: IFFALSE 34978
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34928: LD_ADDR_VAR 0 10
34932: PUSH
34933: LD_VAR 0 10
34937: PUSH
34938: LD_VAR 0 8
34942: PUSH
34943: LD_INT 1
34945: ARRAY
34946: PUSH
34947: LD_VAR 0 2
34951: PLUS
34952: PUSH
34953: LD_VAR 0 8
34957: PUSH
34958: LD_INT 2
34960: ARRAY
34961: PUSH
34962: LD_VAR 0 3
34966: PLUS
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: EMPTY
34973: LIST
34974: ADD
34975: ST_TO_ADDR
34976: GO 34925
34978: POP
34979: POP
// result = temp_list2 ;
34980: LD_ADDR_VAR 0 7
34984: PUSH
34985: LD_VAR 0 10
34989: ST_TO_ADDR
// end ;
34990: LD_VAR 0 7
34994: RET
// export function EnemyInRange ( unit , dist ) ; begin
34995: LD_INT 0
34997: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34998: LD_ADDR_VAR 0 3
35002: PUSH
35003: LD_VAR 0 1
35007: PPUSH
35008: CALL_OW 255
35012: PPUSH
35013: LD_VAR 0 1
35017: PPUSH
35018: CALL_OW 250
35022: PPUSH
35023: LD_VAR 0 1
35027: PPUSH
35028: CALL_OW 251
35032: PPUSH
35033: LD_VAR 0 2
35037: PPUSH
35038: CALL 8252 0 4
35042: PUSH
35043: LD_INT 4
35045: ARRAY
35046: ST_TO_ADDR
// end ;
35047: LD_VAR 0 3
35051: RET
// export function PlayerSeeMe ( unit ) ; begin
35052: LD_INT 0
35054: PPUSH
// result := See ( your_side , unit ) ;
35055: LD_ADDR_VAR 0 2
35059: PUSH
35060: LD_OWVAR 2
35064: PPUSH
35065: LD_VAR 0 1
35069: PPUSH
35070: CALL_OW 292
35074: ST_TO_ADDR
// end ;
35075: LD_VAR 0 2
35079: RET
// export function ReverseDir ( unit ) ; begin
35080: LD_INT 0
35082: PPUSH
// if not unit then
35083: LD_VAR 0 1
35087: NOT
35088: IFFALSE 35092
// exit ;
35090: GO 35115
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35092: LD_ADDR_VAR 0 2
35096: PUSH
35097: LD_VAR 0 1
35101: PPUSH
35102: CALL_OW 254
35106: PUSH
35107: LD_INT 3
35109: PLUS
35110: PUSH
35111: LD_INT 6
35113: MOD
35114: ST_TO_ADDR
// end ;
35115: LD_VAR 0 2
35119: RET
// export function ReverseArray ( array ) ; var i ; begin
35120: LD_INT 0
35122: PPUSH
35123: PPUSH
// if not array then
35124: LD_VAR 0 1
35128: NOT
35129: IFFALSE 35133
// exit ;
35131: GO 35188
// result := [ ] ;
35133: LD_ADDR_VAR 0 2
35137: PUSH
35138: EMPTY
35139: ST_TO_ADDR
// for i := array downto 1 do
35140: LD_ADDR_VAR 0 3
35144: PUSH
35145: DOUBLE
35146: LD_VAR 0 1
35150: INC
35151: ST_TO_ADDR
35152: LD_INT 1
35154: PUSH
35155: FOR_DOWNTO
35156: IFFALSE 35186
// result := Join ( result , array [ i ] ) ;
35158: LD_ADDR_VAR 0 2
35162: PUSH
35163: LD_VAR 0 2
35167: PPUSH
35168: LD_VAR 0 1
35172: PUSH
35173: LD_VAR 0 3
35177: ARRAY
35178: PPUSH
35179: CALL 40030 0 2
35183: ST_TO_ADDR
35184: GO 35155
35186: POP
35187: POP
// end ;
35188: LD_VAR 0 2
35192: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35193: LD_INT 0
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
// if not unit or not hexes then
35201: LD_VAR 0 1
35205: NOT
35206: IFTRUE 35215
35208: PUSH
35209: LD_VAR 0 2
35213: NOT
35214: OR
35215: IFFALSE 35219
// exit ;
35217: GO 35342
// dist := 9999 ;
35219: LD_ADDR_VAR 0 5
35223: PUSH
35224: LD_INT 9999
35226: ST_TO_ADDR
// for i = 1 to hexes do
35227: LD_ADDR_VAR 0 4
35231: PUSH
35232: DOUBLE
35233: LD_INT 1
35235: DEC
35236: ST_TO_ADDR
35237: LD_VAR 0 2
35241: PUSH
35242: FOR_TO
35243: IFFALSE 35330
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35245: LD_ADDR_VAR 0 6
35249: PUSH
35250: LD_VAR 0 1
35254: PPUSH
35255: LD_VAR 0 2
35259: PUSH
35260: LD_VAR 0 4
35264: ARRAY
35265: PUSH
35266: LD_INT 1
35268: ARRAY
35269: PPUSH
35270: LD_VAR 0 2
35274: PUSH
35275: LD_VAR 0 4
35279: ARRAY
35280: PUSH
35281: LD_INT 2
35283: ARRAY
35284: PPUSH
35285: CALL_OW 297
35289: ST_TO_ADDR
// if tdist < dist then
35290: LD_VAR 0 6
35294: PUSH
35295: LD_VAR 0 5
35299: LESS
35300: IFFALSE 35328
// begin hex := hexes [ i ] ;
35302: LD_ADDR_VAR 0 8
35306: PUSH
35307: LD_VAR 0 2
35311: PUSH
35312: LD_VAR 0 4
35316: ARRAY
35317: ST_TO_ADDR
// dist := tdist ;
35318: LD_ADDR_VAR 0 5
35322: PUSH
35323: LD_VAR 0 6
35327: ST_TO_ADDR
// end ; end ;
35328: GO 35242
35330: POP
35331: POP
// result := hex ;
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: LD_VAR 0 8
35341: ST_TO_ADDR
// end ;
35342: LD_VAR 0 3
35346: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35347: LD_INT 0
35349: PPUSH
35350: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35351: LD_VAR 0 1
35355: NOT
35356: IFTRUE 35395
35358: PUSH
35359: LD_VAR 0 1
35363: PUSH
35364: LD_INT 21
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 23
35376: PUSH
35377: LD_INT 2
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PPUSH
35388: CALL_OW 69
35392: IN
35393: NOT
35394: OR
35395: IFFALSE 35399
// exit ;
35397: GO 35446
// for i = 1 to 3 do
35399: LD_ADDR_VAR 0 3
35403: PUSH
35404: DOUBLE
35405: LD_INT 1
35407: DEC
35408: ST_TO_ADDR
35409: LD_INT 3
35411: PUSH
35412: FOR_TO
35413: IFFALSE 35444
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35415: LD_VAR 0 1
35419: PPUSH
35420: CALL_OW 250
35424: PPUSH
35425: LD_VAR 0 1
35429: PPUSH
35430: CALL_OW 251
35434: PPUSH
35435: LD_INT 1
35437: PPUSH
35438: CALL_OW 453
35442: GO 35412
35444: POP
35445: POP
// end ;
35446: LD_VAR 0 2
35450: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35451: LD_INT 0
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
// if not unit or not enemy_unit then
35459: LD_VAR 0 1
35463: NOT
35464: IFTRUE 35473
35466: PUSH
35467: LD_VAR 0 2
35471: NOT
35472: OR
35473: IFFALSE 35477
// exit ;
35475: GO 35948
// if GetLives ( i ) < 250 then
35477: LD_VAR 0 4
35481: PPUSH
35482: CALL_OW 256
35486: PUSH
35487: LD_INT 250
35489: LESS
35490: IFFALSE 35503
// begin ComAutodestruct ( i ) ;
35492: LD_VAR 0 4
35496: PPUSH
35497: CALL 35347 0 1
// exit ;
35501: GO 35948
// end ; x := GetX ( enemy_unit ) ;
35503: LD_ADDR_VAR 0 7
35507: PUSH
35508: LD_VAR 0 2
35512: PPUSH
35513: CALL_OW 250
35517: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35518: LD_ADDR_VAR 0 8
35522: PUSH
35523: LD_VAR 0 2
35527: PPUSH
35528: CALL_OW 251
35532: ST_TO_ADDR
// if not x or not y then
35533: LD_VAR 0 7
35537: NOT
35538: IFTRUE 35547
35540: PUSH
35541: LD_VAR 0 8
35545: NOT
35546: OR
35547: IFFALSE 35551
// exit ;
35549: GO 35948
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35551: LD_ADDR_VAR 0 6
35555: PUSH
35556: LD_VAR 0 7
35560: PPUSH
35561: LD_INT 0
35563: PPUSH
35564: LD_INT 4
35566: PPUSH
35567: CALL_OW 272
35571: PUSH
35572: LD_VAR 0 8
35576: PPUSH
35577: LD_INT 0
35579: PPUSH
35580: LD_INT 4
35582: PPUSH
35583: CALL_OW 273
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_VAR 0 7
35596: PPUSH
35597: LD_INT 1
35599: PPUSH
35600: LD_INT 4
35602: PPUSH
35603: CALL_OW 272
35607: PUSH
35608: LD_VAR 0 8
35612: PPUSH
35613: LD_INT 1
35615: PPUSH
35616: LD_INT 4
35618: PPUSH
35619: CALL_OW 273
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_VAR 0 7
35632: PPUSH
35633: LD_INT 2
35635: PPUSH
35636: LD_INT 4
35638: PPUSH
35639: CALL_OW 272
35643: PUSH
35644: LD_VAR 0 8
35648: PPUSH
35649: LD_INT 2
35651: PPUSH
35652: LD_INT 4
35654: PPUSH
35655: CALL_OW 273
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_VAR 0 7
35668: PPUSH
35669: LD_INT 3
35671: PPUSH
35672: LD_INT 4
35674: PPUSH
35675: CALL_OW 272
35679: PUSH
35680: LD_VAR 0 8
35684: PPUSH
35685: LD_INT 3
35687: PPUSH
35688: LD_INT 4
35690: PPUSH
35691: CALL_OW 273
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_VAR 0 7
35704: PPUSH
35705: LD_INT 4
35707: PPUSH
35708: LD_INT 4
35710: PPUSH
35711: CALL_OW 272
35715: PUSH
35716: LD_VAR 0 8
35720: PPUSH
35721: LD_INT 4
35723: PPUSH
35724: LD_INT 4
35726: PPUSH
35727: CALL_OW 273
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_VAR 0 7
35740: PPUSH
35741: LD_INT 5
35743: PPUSH
35744: LD_INT 4
35746: PPUSH
35747: CALL_OW 272
35751: PUSH
35752: LD_VAR 0 8
35756: PPUSH
35757: LD_INT 5
35759: PPUSH
35760: LD_INT 4
35762: PPUSH
35763: CALL_OW 273
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: ST_TO_ADDR
// for i = tmp downto 1 do
35780: LD_ADDR_VAR 0 4
35784: PUSH
35785: DOUBLE
35786: LD_VAR 0 6
35790: INC
35791: ST_TO_ADDR
35792: LD_INT 1
35794: PUSH
35795: FOR_DOWNTO
35796: IFFALSE 35899
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35798: LD_VAR 0 6
35802: PUSH
35803: LD_VAR 0 4
35807: ARRAY
35808: PUSH
35809: LD_INT 1
35811: ARRAY
35812: PPUSH
35813: LD_VAR 0 6
35817: PUSH
35818: LD_VAR 0 4
35822: ARRAY
35823: PUSH
35824: LD_INT 2
35826: ARRAY
35827: PPUSH
35828: CALL_OW 488
35832: NOT
35833: IFTRUE 35875
35835: PUSH
35836: LD_VAR 0 6
35840: PUSH
35841: LD_VAR 0 4
35845: ARRAY
35846: PUSH
35847: LD_INT 1
35849: ARRAY
35850: PPUSH
35851: LD_VAR 0 6
35855: PUSH
35856: LD_VAR 0 4
35860: ARRAY
35861: PUSH
35862: LD_INT 2
35864: ARRAY
35865: PPUSH
35866: CALL_OW 428
35870: PUSH
35871: LD_INT 0
35873: NONEQUAL
35874: OR
35875: IFFALSE 35897
// tmp := Delete ( tmp , i ) ;
35877: LD_ADDR_VAR 0 6
35881: PUSH
35882: LD_VAR 0 6
35886: PPUSH
35887: LD_VAR 0 4
35891: PPUSH
35892: CALL_OW 3
35896: ST_TO_ADDR
35897: GO 35795
35899: POP
35900: POP
// j := GetClosestHex ( unit , tmp ) ;
35901: LD_ADDR_VAR 0 5
35905: PUSH
35906: LD_VAR 0 1
35910: PPUSH
35911: LD_VAR 0 6
35915: PPUSH
35916: CALL 35193 0 2
35920: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35921: LD_VAR 0 1
35925: PPUSH
35926: LD_VAR 0 5
35930: PUSH
35931: LD_INT 1
35933: ARRAY
35934: PPUSH
35935: LD_VAR 0 5
35939: PUSH
35940: LD_INT 2
35942: ARRAY
35943: PPUSH
35944: CALL_OW 111
// end ;
35948: LD_VAR 0 3
35952: RET
// export function PrepareApemanSoldier ( ) ; begin
35953: LD_INT 0
35955: PPUSH
// uc_nation := 0 ;
35956: LD_ADDR_OWVAR 21
35960: PUSH
35961: LD_INT 0
35963: ST_TO_ADDR
// hc_sex := sex_male ;
35964: LD_ADDR_OWVAR 27
35968: PUSH
35969: LD_INT 1
35971: ST_TO_ADDR
// hc_name :=  ;
35972: LD_ADDR_OWVAR 26
35976: PUSH
35977: LD_STRING 
35979: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35980: LD_ADDR_OWVAR 28
35984: PUSH
35985: LD_INT 15
35987: ST_TO_ADDR
// hc_gallery :=  ;
35988: LD_ADDR_OWVAR 33
35992: PUSH
35993: LD_STRING 
35995: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35996: LD_ADDR_OWVAR 31
36000: PUSH
36001: LD_INT 0
36003: PPUSH
36004: LD_INT 3
36006: PPUSH
36007: CALL_OW 12
36011: PUSH
36012: LD_INT 0
36014: PPUSH
36015: LD_INT 3
36017: PPUSH
36018: CALL_OW 12
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36035: LD_ADDR_OWVAR 29
36039: PUSH
36040: LD_INT 12
36042: PUSH
36043: LD_INT 12
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: ST_TO_ADDR
// end ;
36050: LD_VAR 0 1
36054: RET
// export function PrepareApemanEngineer ( ) ; begin
36055: LD_INT 0
36057: PPUSH
// uc_nation := 0 ;
36058: LD_ADDR_OWVAR 21
36062: PUSH
36063: LD_INT 0
36065: ST_TO_ADDR
// hc_sex := sex_male ;
36066: LD_ADDR_OWVAR 27
36070: PUSH
36071: LD_INT 1
36073: ST_TO_ADDR
// hc_name :=  ;
36074: LD_ADDR_OWVAR 26
36078: PUSH
36079: LD_STRING 
36081: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36082: LD_ADDR_OWVAR 28
36086: PUSH
36087: LD_INT 16
36089: ST_TO_ADDR
// hc_gallery :=  ;
36090: LD_ADDR_OWVAR 33
36094: PUSH
36095: LD_STRING 
36097: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36098: LD_ADDR_OWVAR 31
36102: PUSH
36103: LD_INT 0
36105: PPUSH
36106: LD_INT 3
36108: PPUSH
36109: CALL_OW 12
36113: PUSH
36114: LD_INT 0
36116: PPUSH
36117: LD_INT 3
36119: PPUSH
36120: CALL_OW 12
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36137: LD_ADDR_OWVAR 29
36141: PUSH
36142: LD_INT 12
36144: PUSH
36145: LD_INT 12
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: ST_TO_ADDR
// end ;
36152: LD_VAR 0 1
36156: RET
// export function PrepareApeman ( agressivity ) ; begin
36157: LD_INT 0
36159: PPUSH
// uc_side := 0 ;
36160: LD_ADDR_OWVAR 20
36164: PUSH
36165: LD_INT 0
36167: ST_TO_ADDR
// uc_nation := 0 ;
36168: LD_ADDR_OWVAR 21
36172: PUSH
36173: LD_INT 0
36175: ST_TO_ADDR
// hc_sex := sex_male ;
36176: LD_ADDR_OWVAR 27
36180: PUSH
36181: LD_INT 1
36183: ST_TO_ADDR
// hc_class := class_apeman ;
36184: LD_ADDR_OWVAR 28
36188: PUSH
36189: LD_INT 12
36191: ST_TO_ADDR
// hc_gallery :=  ;
36192: LD_ADDR_OWVAR 33
36196: PUSH
36197: LD_STRING 
36199: ST_TO_ADDR
// hc_name :=  ;
36200: LD_ADDR_OWVAR 26
36204: PUSH
36205: LD_STRING 
36207: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36208: LD_ADDR_OWVAR 29
36212: PUSH
36213: LD_INT 12
36215: PUSH
36216: LD_INT 12
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: ST_TO_ADDR
// if agressivity = 0 then
36223: LD_VAR 0 1
36227: PUSH
36228: LD_INT 0
36230: EQUAL
36231: IFFALSE 36243
// hc_agressivity := 0 else
36233: LD_ADDR_OWVAR 35
36237: PUSH
36238: LD_INT 0
36240: ST_TO_ADDR
36241: GO 36264
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36243: LD_ADDR_OWVAR 35
36247: PUSH
36248: LD_VAR 0 1
36252: NEG
36253: PPUSH
36254: LD_VAR 0 1
36258: PPUSH
36259: CALL_OW 12
36263: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36264: LD_ADDR_OWVAR 31
36268: PUSH
36269: LD_INT 0
36271: PPUSH
36272: LD_INT 3
36274: PPUSH
36275: CALL_OW 12
36279: PUSH
36280: LD_INT 0
36282: PPUSH
36283: LD_INT 3
36285: PPUSH
36286: CALL_OW 12
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: ST_TO_ADDR
// end ;
36303: LD_VAR 0 2
36307: RET
// export function PrepareTiger ( agressivity ) ; begin
36308: LD_INT 0
36310: PPUSH
// uc_side := 0 ;
36311: LD_ADDR_OWVAR 20
36315: PUSH
36316: LD_INT 0
36318: ST_TO_ADDR
// uc_nation := 0 ;
36319: LD_ADDR_OWVAR 21
36323: PUSH
36324: LD_INT 0
36326: ST_TO_ADDR
// InitHc ;
36327: CALL_OW 19
// hc_class := class_tiger ;
36331: LD_ADDR_OWVAR 28
36335: PUSH
36336: LD_INT 14
36338: ST_TO_ADDR
// hc_gallery :=  ;
36339: LD_ADDR_OWVAR 33
36343: PUSH
36344: LD_STRING 
36346: ST_TO_ADDR
// hc_name :=  ;
36347: LD_ADDR_OWVAR 26
36351: PUSH
36352: LD_STRING 
36354: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36355: LD_ADDR_OWVAR 35
36359: PUSH
36360: LD_VAR 0 1
36364: NEG
36365: PPUSH
36366: LD_VAR 0 1
36370: PPUSH
36371: CALL_OW 12
36375: ST_TO_ADDR
// end ;
36376: LD_VAR 0 2
36380: RET
// export function PrepareEnchidna ( ) ; begin
36381: LD_INT 0
36383: PPUSH
// uc_side := 0 ;
36384: LD_ADDR_OWVAR 20
36388: PUSH
36389: LD_INT 0
36391: ST_TO_ADDR
// uc_nation := 0 ;
36392: LD_ADDR_OWVAR 21
36396: PUSH
36397: LD_INT 0
36399: ST_TO_ADDR
// InitHc ;
36400: CALL_OW 19
// hc_class := class_baggie ;
36404: LD_ADDR_OWVAR 28
36408: PUSH
36409: LD_INT 13
36411: ST_TO_ADDR
// hc_gallery :=  ;
36412: LD_ADDR_OWVAR 33
36416: PUSH
36417: LD_STRING 
36419: ST_TO_ADDR
// hc_name :=  ;
36420: LD_ADDR_OWVAR 26
36424: PUSH
36425: LD_STRING 
36427: ST_TO_ADDR
// end ;
36428: LD_VAR 0 1
36432: RET
// export function PrepareFrog ( ) ; begin
36433: LD_INT 0
36435: PPUSH
// uc_side := 0 ;
36436: LD_ADDR_OWVAR 20
36440: PUSH
36441: LD_INT 0
36443: ST_TO_ADDR
// uc_nation := 0 ;
36444: LD_ADDR_OWVAR 21
36448: PUSH
36449: LD_INT 0
36451: ST_TO_ADDR
// InitHc ;
36452: CALL_OW 19
// hc_class := class_frog ;
36456: LD_ADDR_OWVAR 28
36460: PUSH
36461: LD_INT 19
36463: ST_TO_ADDR
// hc_gallery :=  ;
36464: LD_ADDR_OWVAR 33
36468: PUSH
36469: LD_STRING 
36471: ST_TO_ADDR
// hc_name :=  ;
36472: LD_ADDR_OWVAR 26
36476: PUSH
36477: LD_STRING 
36479: ST_TO_ADDR
// end ;
36480: LD_VAR 0 1
36484: RET
// export function PrepareFish ( ) ; begin
36485: LD_INT 0
36487: PPUSH
// uc_side := 0 ;
36488: LD_ADDR_OWVAR 20
36492: PUSH
36493: LD_INT 0
36495: ST_TO_ADDR
// uc_nation := 0 ;
36496: LD_ADDR_OWVAR 21
36500: PUSH
36501: LD_INT 0
36503: ST_TO_ADDR
// InitHc ;
36504: CALL_OW 19
// hc_class := class_fish ;
36508: LD_ADDR_OWVAR 28
36512: PUSH
36513: LD_INT 20
36515: ST_TO_ADDR
// hc_gallery :=  ;
36516: LD_ADDR_OWVAR 33
36520: PUSH
36521: LD_STRING 
36523: ST_TO_ADDR
// hc_name :=  ;
36524: LD_ADDR_OWVAR 26
36528: PUSH
36529: LD_STRING 
36531: ST_TO_ADDR
// end ;
36532: LD_VAR 0 1
36536: RET
// export function PrepareBird ( ) ; begin
36537: LD_INT 0
36539: PPUSH
// uc_side := 0 ;
36540: LD_ADDR_OWVAR 20
36544: PUSH
36545: LD_INT 0
36547: ST_TO_ADDR
// uc_nation := 0 ;
36548: LD_ADDR_OWVAR 21
36552: PUSH
36553: LD_INT 0
36555: ST_TO_ADDR
// InitHc ;
36556: CALL_OW 19
// hc_class := class_phororhacos ;
36560: LD_ADDR_OWVAR 28
36564: PUSH
36565: LD_INT 18
36567: ST_TO_ADDR
// hc_gallery :=  ;
36568: LD_ADDR_OWVAR 33
36572: PUSH
36573: LD_STRING 
36575: ST_TO_ADDR
// hc_name :=  ;
36576: LD_ADDR_OWVAR 26
36580: PUSH
36581: LD_STRING 
36583: ST_TO_ADDR
// end ;
36584: LD_VAR 0 1
36588: RET
// export function PrepareHorse ( ) ; begin
36589: LD_INT 0
36591: PPUSH
// uc_side := 0 ;
36592: LD_ADDR_OWVAR 20
36596: PUSH
36597: LD_INT 0
36599: ST_TO_ADDR
// uc_nation := 0 ;
36600: LD_ADDR_OWVAR 21
36604: PUSH
36605: LD_INT 0
36607: ST_TO_ADDR
// InitHc ;
36608: CALL_OW 19
// hc_class := class_horse ;
36612: LD_ADDR_OWVAR 28
36616: PUSH
36617: LD_INT 21
36619: ST_TO_ADDR
// hc_gallery :=  ;
36620: LD_ADDR_OWVAR 33
36624: PUSH
36625: LD_STRING 
36627: ST_TO_ADDR
// hc_name :=  ;
36628: LD_ADDR_OWVAR 26
36632: PUSH
36633: LD_STRING 
36635: ST_TO_ADDR
// end ;
36636: LD_VAR 0 1
36640: RET
// export function PrepareMastodont ( ) ; begin
36641: LD_INT 0
36643: PPUSH
// uc_side := 0 ;
36644: LD_ADDR_OWVAR 20
36648: PUSH
36649: LD_INT 0
36651: ST_TO_ADDR
// uc_nation := 0 ;
36652: LD_ADDR_OWVAR 21
36656: PUSH
36657: LD_INT 0
36659: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36660: LD_ADDR_OWVAR 37
36664: PUSH
36665: LD_INT 31
36667: ST_TO_ADDR
// vc_control := control_rider ;
36668: LD_ADDR_OWVAR 38
36672: PUSH
36673: LD_INT 4
36675: ST_TO_ADDR
// end ;
36676: LD_VAR 0 1
36680: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36681: LD_INT 0
36683: PPUSH
36684: PPUSH
36685: PPUSH
// uc_side = 0 ;
36686: LD_ADDR_OWVAR 20
36690: PUSH
36691: LD_INT 0
36693: ST_TO_ADDR
// uc_nation = 0 ;
36694: LD_ADDR_OWVAR 21
36698: PUSH
36699: LD_INT 0
36701: ST_TO_ADDR
// InitHc_All ( ) ;
36702: CALL_OW 584
// InitVc ;
36706: CALL_OW 20
// if mastodonts then
36710: LD_VAR 0 6
36714: IFFALSE 36781
// for i = 1 to mastodonts do
36716: LD_ADDR_VAR 0 11
36720: PUSH
36721: DOUBLE
36722: LD_INT 1
36724: DEC
36725: ST_TO_ADDR
36726: LD_VAR 0 6
36730: PUSH
36731: FOR_TO
36732: IFFALSE 36779
// begin vc_chassis := 31 ;
36734: LD_ADDR_OWVAR 37
36738: PUSH
36739: LD_INT 31
36741: ST_TO_ADDR
// vc_control := control_rider ;
36742: LD_ADDR_OWVAR 38
36746: PUSH
36747: LD_INT 4
36749: ST_TO_ADDR
// animal := CreateVehicle ;
36750: LD_ADDR_VAR 0 12
36754: PUSH
36755: CALL_OW 45
36759: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36760: LD_VAR 0 12
36764: PPUSH
36765: LD_VAR 0 8
36769: PPUSH
36770: LD_INT 0
36772: PPUSH
36773: CALL 38923 0 3
// end ;
36777: GO 36731
36779: POP
36780: POP
// if horses then
36781: LD_VAR 0 5
36785: IFFALSE 36852
// for i = 1 to horses do
36787: LD_ADDR_VAR 0 11
36791: PUSH
36792: DOUBLE
36793: LD_INT 1
36795: DEC
36796: ST_TO_ADDR
36797: LD_VAR 0 5
36801: PUSH
36802: FOR_TO
36803: IFFALSE 36850
// begin hc_class := 21 ;
36805: LD_ADDR_OWVAR 28
36809: PUSH
36810: LD_INT 21
36812: ST_TO_ADDR
// hc_gallery :=  ;
36813: LD_ADDR_OWVAR 33
36817: PUSH
36818: LD_STRING 
36820: ST_TO_ADDR
// animal := CreateHuman ;
36821: LD_ADDR_VAR 0 12
36825: PUSH
36826: CALL_OW 44
36830: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36831: LD_VAR 0 12
36835: PPUSH
36836: LD_VAR 0 8
36840: PPUSH
36841: LD_INT 0
36843: PPUSH
36844: CALL 38923 0 3
// end ;
36848: GO 36802
36850: POP
36851: POP
// if birds then
36852: LD_VAR 0 1
36856: IFFALSE 36923
// for i = 1 to birds do
36858: LD_ADDR_VAR 0 11
36862: PUSH
36863: DOUBLE
36864: LD_INT 1
36866: DEC
36867: ST_TO_ADDR
36868: LD_VAR 0 1
36872: PUSH
36873: FOR_TO
36874: IFFALSE 36921
// begin hc_class := 18 ;
36876: LD_ADDR_OWVAR 28
36880: PUSH
36881: LD_INT 18
36883: ST_TO_ADDR
// hc_gallery =  ;
36884: LD_ADDR_OWVAR 33
36888: PUSH
36889: LD_STRING 
36891: ST_TO_ADDR
// animal := CreateHuman ;
36892: LD_ADDR_VAR 0 12
36896: PUSH
36897: CALL_OW 44
36901: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36902: LD_VAR 0 12
36906: PPUSH
36907: LD_VAR 0 8
36911: PPUSH
36912: LD_INT 0
36914: PPUSH
36915: CALL 38923 0 3
// end ;
36919: GO 36873
36921: POP
36922: POP
// if tigers then
36923: LD_VAR 0 2
36927: IFFALSE 37011
// for i = 1 to tigers do
36929: LD_ADDR_VAR 0 11
36933: PUSH
36934: DOUBLE
36935: LD_INT 1
36937: DEC
36938: ST_TO_ADDR
36939: LD_VAR 0 2
36943: PUSH
36944: FOR_TO
36945: IFFALSE 37009
// begin hc_class = class_tiger ;
36947: LD_ADDR_OWVAR 28
36951: PUSH
36952: LD_INT 14
36954: ST_TO_ADDR
// hc_gallery =  ;
36955: LD_ADDR_OWVAR 33
36959: PUSH
36960: LD_STRING 
36962: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36963: LD_ADDR_OWVAR 35
36967: PUSH
36968: LD_INT 7
36970: NEG
36971: PPUSH
36972: LD_INT 7
36974: PPUSH
36975: CALL_OW 12
36979: ST_TO_ADDR
// animal := CreateHuman ;
36980: LD_ADDR_VAR 0 12
36984: PUSH
36985: CALL_OW 44
36989: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36990: LD_VAR 0 12
36994: PPUSH
36995: LD_VAR 0 8
36999: PPUSH
37000: LD_INT 0
37002: PPUSH
37003: CALL 38923 0 3
// end ;
37007: GO 36944
37009: POP
37010: POP
// if apemans then
37011: LD_VAR 0 3
37015: IFFALSE 37138
// for i = 1 to apemans do
37017: LD_ADDR_VAR 0 11
37021: PUSH
37022: DOUBLE
37023: LD_INT 1
37025: DEC
37026: ST_TO_ADDR
37027: LD_VAR 0 3
37031: PUSH
37032: FOR_TO
37033: IFFALSE 37136
// begin hc_class = class_apeman ;
37035: LD_ADDR_OWVAR 28
37039: PUSH
37040: LD_INT 12
37042: ST_TO_ADDR
// hc_gallery =  ;
37043: LD_ADDR_OWVAR 33
37047: PUSH
37048: LD_STRING 
37050: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37051: LD_ADDR_OWVAR 35
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PPUSH
37060: LD_INT 2
37062: PPUSH
37063: CALL_OW 12
37067: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37068: LD_ADDR_OWVAR 31
37072: PUSH
37073: LD_INT 1
37075: PPUSH
37076: LD_INT 3
37078: PPUSH
37079: CALL_OW 12
37083: PUSH
37084: LD_INT 1
37086: PPUSH
37087: LD_INT 3
37089: PPUSH
37090: CALL_OW 12
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: ST_TO_ADDR
// animal := CreateHuman ;
37107: LD_ADDR_VAR 0 12
37111: PUSH
37112: CALL_OW 44
37116: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37117: LD_VAR 0 12
37121: PPUSH
37122: LD_VAR 0 8
37126: PPUSH
37127: LD_INT 0
37129: PPUSH
37130: CALL 38923 0 3
// end ;
37134: GO 37032
37136: POP
37137: POP
// if enchidnas then
37138: LD_VAR 0 4
37142: IFFALSE 37209
// for i = 1 to enchidnas do
37144: LD_ADDR_VAR 0 11
37148: PUSH
37149: DOUBLE
37150: LD_INT 1
37152: DEC
37153: ST_TO_ADDR
37154: LD_VAR 0 4
37158: PUSH
37159: FOR_TO
37160: IFFALSE 37207
// begin hc_class = 13 ;
37162: LD_ADDR_OWVAR 28
37166: PUSH
37167: LD_INT 13
37169: ST_TO_ADDR
// hc_gallery =  ;
37170: LD_ADDR_OWVAR 33
37174: PUSH
37175: LD_STRING 
37177: ST_TO_ADDR
// animal := CreateHuman ;
37178: LD_ADDR_VAR 0 12
37182: PUSH
37183: CALL_OW 44
37187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37188: LD_VAR 0 12
37192: PPUSH
37193: LD_VAR 0 8
37197: PPUSH
37198: LD_INT 0
37200: PPUSH
37201: CALL 38923 0 3
// end ;
37205: GO 37159
37207: POP
37208: POP
// if fishes then
37209: LD_VAR 0 7
37213: IFFALSE 37280
// for i = 1 to fishes do
37215: LD_ADDR_VAR 0 11
37219: PUSH
37220: DOUBLE
37221: LD_INT 1
37223: DEC
37224: ST_TO_ADDR
37225: LD_VAR 0 7
37229: PUSH
37230: FOR_TO
37231: IFFALSE 37278
// begin hc_class = 20 ;
37233: LD_ADDR_OWVAR 28
37237: PUSH
37238: LD_INT 20
37240: ST_TO_ADDR
// hc_gallery =  ;
37241: LD_ADDR_OWVAR 33
37245: PUSH
37246: LD_STRING 
37248: ST_TO_ADDR
// animal := CreateHuman ;
37249: LD_ADDR_VAR 0 12
37253: PUSH
37254: CALL_OW 44
37258: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37259: LD_VAR 0 12
37263: PPUSH
37264: LD_VAR 0 9
37268: PPUSH
37269: LD_INT 0
37271: PPUSH
37272: CALL 38923 0 3
// end ;
37276: GO 37230
37278: POP
37279: POP
// end ;
37280: LD_VAR 0 10
37284: RET
// export function WantHeal ( sci , unit ) ; begin
37285: LD_INT 0
37287: PPUSH
// if GetTaskList ( sci ) > 0 then
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 437
37297: PUSH
37298: LD_INT 0
37300: GREATER
37301: IFFALSE 37373
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 437
37312: PUSH
37313: LD_INT 1
37315: ARRAY
37316: PUSH
37317: LD_INT 1
37319: ARRAY
37320: PUSH
37321: LD_STRING l
37323: EQUAL
37324: IFFALSE 37351
37326: PUSH
37327: LD_VAR 0 1
37331: PPUSH
37332: CALL_OW 437
37336: PUSH
37337: LD_INT 1
37339: ARRAY
37340: PUSH
37341: LD_INT 4
37343: ARRAY
37344: PUSH
37345: LD_VAR 0 2
37349: EQUAL
37350: AND
37351: IFFALSE 37363
// result := true else
37353: LD_ADDR_VAR 0 3
37357: PUSH
37358: LD_INT 1
37360: ST_TO_ADDR
37361: GO 37371
// result := false ;
37363: LD_ADDR_VAR 0 3
37367: PUSH
37368: LD_INT 0
37370: ST_TO_ADDR
// end else
37371: GO 37381
// result := false ;
37373: LD_ADDR_VAR 0 3
37377: PUSH
37378: LD_INT 0
37380: ST_TO_ADDR
// end ;
37381: LD_VAR 0 3
37385: RET
// export function HealTarget ( sci ) ; begin
37386: LD_INT 0
37388: PPUSH
// if not sci then
37389: LD_VAR 0 1
37393: NOT
37394: IFFALSE 37398
// exit ;
37396: GO 37463
// result := 0 ;
37398: LD_ADDR_VAR 0 2
37402: PUSH
37403: LD_INT 0
37405: ST_TO_ADDR
// if GetTaskList ( sci ) then
37406: LD_VAR 0 1
37410: PPUSH
37411: CALL_OW 437
37415: IFFALSE 37463
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37417: LD_VAR 0 1
37421: PPUSH
37422: CALL_OW 437
37426: PUSH
37427: LD_INT 1
37429: ARRAY
37430: PUSH
37431: LD_INT 1
37433: ARRAY
37434: PUSH
37435: LD_STRING l
37437: EQUAL
37438: IFFALSE 37463
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37440: LD_ADDR_VAR 0 2
37444: PUSH
37445: LD_VAR 0 1
37449: PPUSH
37450: CALL_OW 437
37454: PUSH
37455: LD_INT 1
37457: ARRAY
37458: PUSH
37459: LD_INT 4
37461: ARRAY
37462: ST_TO_ADDR
// end ;
37463: LD_VAR 0 2
37467: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37468: LD_INT 0
37470: PPUSH
37471: PPUSH
37472: PPUSH
37473: PPUSH
// if not base_units then
37474: LD_VAR 0 1
37478: NOT
37479: IFFALSE 37483
// exit ;
37481: GO 37570
// result := false ;
37483: LD_ADDR_VAR 0 2
37487: PUSH
37488: LD_INT 0
37490: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37491: LD_ADDR_VAR 0 5
37495: PUSH
37496: LD_VAR 0 1
37500: PPUSH
37501: LD_INT 21
37503: PUSH
37504: LD_INT 3
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PPUSH
37511: CALL_OW 72
37515: ST_TO_ADDR
// if not tmp then
37516: LD_VAR 0 5
37520: NOT
37521: IFFALSE 37525
// exit ;
37523: GO 37570
// for i in tmp do
37525: LD_ADDR_VAR 0 3
37529: PUSH
37530: LD_VAR 0 5
37534: PUSH
37535: FOR_IN
37536: IFFALSE 37568
// begin result := EnemyInRange ( i , 22 ) ;
37538: LD_ADDR_VAR 0 2
37542: PUSH
37543: LD_VAR 0 3
37547: PPUSH
37548: LD_INT 22
37550: PPUSH
37551: CALL 34995 0 2
37555: ST_TO_ADDR
// if result then
37556: LD_VAR 0 2
37560: IFFALSE 37566
// exit ;
37562: POP
37563: POP
37564: GO 37570
// end ;
37566: GO 37535
37568: POP
37569: POP
// end ;
37570: LD_VAR 0 2
37574: RET
// export function FilterByTag ( units , tag ) ; begin
37575: LD_INT 0
37577: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37578: LD_ADDR_VAR 0 3
37582: PUSH
37583: LD_VAR 0 1
37587: PPUSH
37588: LD_INT 120
37590: PUSH
37591: LD_VAR 0 2
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PPUSH
37600: CALL_OW 72
37604: ST_TO_ADDR
// end ;
37605: LD_VAR 0 3
37609: RET
// export function IsDriver ( un ) ; begin
37610: LD_INT 0
37612: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37613: LD_ADDR_VAR 0 2
37617: PUSH
37618: LD_VAR 0 1
37622: PUSH
37623: LD_INT 55
37625: PUSH
37626: EMPTY
37627: LIST
37628: PPUSH
37629: CALL_OW 69
37633: IN
37634: ST_TO_ADDR
// end ;
37635: LD_VAR 0 2
37639: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37640: LD_INT 0
37642: PPUSH
37643: PPUSH
// list := [ ] ;
37644: LD_ADDR_VAR 0 5
37648: PUSH
37649: EMPTY
37650: ST_TO_ADDR
// case d of 0 :
37651: LD_VAR 0 3
37655: PUSH
37656: LD_INT 0
37658: DOUBLE
37659: EQUAL
37660: IFTRUE 37664
37662: GO 37797
37664: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37665: LD_ADDR_VAR 0 5
37669: PUSH
37670: LD_VAR 0 1
37674: PUSH
37675: LD_INT 4
37677: MINUS
37678: PUSH
37679: LD_VAR 0 2
37683: PUSH
37684: LD_INT 4
37686: MINUS
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: LIST
37695: PUSH
37696: LD_VAR 0 1
37700: PUSH
37701: LD_INT 3
37703: MINUS
37704: PUSH
37705: LD_VAR 0 2
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: PUSH
37718: LD_VAR 0 1
37722: PUSH
37723: LD_INT 4
37725: PLUS
37726: PUSH
37727: LD_VAR 0 2
37731: PUSH
37732: LD_INT 4
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: PUSH
37740: LD_VAR 0 1
37744: PUSH
37745: LD_INT 3
37747: PLUS
37748: PUSH
37749: LD_VAR 0 2
37753: PUSH
37754: LD_INT 3
37756: PLUS
37757: PUSH
37758: LD_INT 5
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: LIST
37765: PUSH
37766: LD_VAR 0 1
37770: PUSH
37771: LD_VAR 0 2
37775: PUSH
37776: LD_INT 4
37778: PLUS
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: LIST
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: ST_TO_ADDR
// end ; 1 :
37795: GO 38495
37797: LD_INT 1
37799: DOUBLE
37800: EQUAL
37801: IFTRUE 37805
37803: GO 37938
37805: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37806: LD_ADDR_VAR 0 5
37810: PUSH
37811: LD_VAR 0 1
37815: PUSH
37816: LD_VAR 0 2
37820: PUSH
37821: LD_INT 4
37823: MINUS
37824: PUSH
37825: LD_INT 3
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: LIST
37832: PUSH
37833: LD_VAR 0 1
37837: PUSH
37838: LD_INT 3
37840: MINUS
37841: PUSH
37842: LD_VAR 0 2
37846: PUSH
37847: LD_INT 3
37849: MINUS
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: PUSH
37859: LD_VAR 0 1
37863: PUSH
37864: LD_INT 4
37866: MINUS
37867: PUSH
37868: LD_VAR 0 2
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: PUSH
37881: LD_VAR 0 1
37885: PUSH
37886: LD_VAR 0 2
37890: PUSH
37891: LD_INT 3
37893: PLUS
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: PUSH
37903: LD_VAR 0 1
37907: PUSH
37908: LD_INT 4
37910: PLUS
37911: PUSH
37912: LD_VAR 0 2
37916: PUSH
37917: LD_INT 4
37919: PLUS
37920: PUSH
37921: LD_INT 5
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: LIST
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: ST_TO_ADDR
// end ; 2 :
37936: GO 38495
37938: LD_INT 2
37940: DOUBLE
37941: EQUAL
37942: IFTRUE 37946
37944: GO 38075
37946: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37947: LD_ADDR_VAR 0 5
37951: PUSH
37952: LD_VAR 0 1
37956: PUSH
37957: LD_VAR 0 2
37961: PUSH
37962: LD_INT 3
37964: MINUS
37965: PUSH
37966: LD_INT 3
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: PUSH
37974: LD_VAR 0 1
37978: PUSH
37979: LD_INT 4
37981: PLUS
37982: PUSH
37983: LD_VAR 0 2
37987: PUSH
37988: LD_INT 4
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: PUSH
37996: LD_VAR 0 1
38000: PUSH
38001: LD_VAR 0 2
38005: PUSH
38006: LD_INT 4
38008: PLUS
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: PUSH
38018: LD_VAR 0 1
38022: PUSH
38023: LD_INT 3
38025: MINUS
38026: PUSH
38027: LD_VAR 0 2
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: PUSH
38040: LD_VAR 0 1
38044: PUSH
38045: LD_INT 4
38047: MINUS
38048: PUSH
38049: LD_VAR 0 2
38053: PUSH
38054: LD_INT 4
38056: MINUS
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: ST_TO_ADDR
// end ; 3 :
38073: GO 38495
38075: LD_INT 3
38077: DOUBLE
38078: EQUAL
38079: IFTRUE 38083
38081: GO 38216
38083: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38084: LD_ADDR_VAR 0 5
38088: PUSH
38089: LD_VAR 0 1
38093: PUSH
38094: LD_INT 3
38096: PLUS
38097: PUSH
38098: LD_VAR 0 2
38102: PUSH
38103: LD_INT 4
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: PUSH
38111: LD_VAR 0 1
38115: PUSH
38116: LD_INT 4
38118: PLUS
38119: PUSH
38120: LD_VAR 0 2
38124: PUSH
38125: LD_INT 4
38127: PLUS
38128: PUSH
38129: LD_INT 5
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: LIST
38136: PUSH
38137: LD_VAR 0 1
38141: PUSH
38142: LD_INT 4
38144: MINUS
38145: PUSH
38146: LD_VAR 0 2
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: LIST
38158: PUSH
38159: LD_VAR 0 1
38163: PUSH
38164: LD_VAR 0 2
38168: PUSH
38169: LD_INT 4
38171: MINUS
38172: PUSH
38173: LD_INT 3
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: PUSH
38181: LD_VAR 0 1
38185: PUSH
38186: LD_INT 3
38188: MINUS
38189: PUSH
38190: LD_VAR 0 2
38194: PUSH
38195: LD_INT 3
38197: MINUS
38198: PUSH
38199: LD_INT 2
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: ST_TO_ADDR
// end ; 4 :
38214: GO 38495
38216: LD_INT 4
38218: DOUBLE
38219: EQUAL
38220: IFTRUE 38224
38222: GO 38357
38224: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38225: LD_ADDR_VAR 0 5
38229: PUSH
38230: LD_VAR 0 1
38234: PUSH
38235: LD_VAR 0 2
38239: PUSH
38240: LD_INT 4
38242: PLUS
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: PUSH
38252: LD_VAR 0 1
38256: PUSH
38257: LD_INT 3
38259: PLUS
38260: PUSH
38261: LD_VAR 0 2
38265: PUSH
38266: LD_INT 3
38268: PLUS
38269: PUSH
38270: LD_INT 5
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: LIST
38277: PUSH
38278: LD_VAR 0 1
38282: PUSH
38283: LD_INT 4
38285: PLUS
38286: PUSH
38287: LD_VAR 0 2
38291: PUSH
38292: LD_INT 4
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: LIST
38299: PUSH
38300: LD_VAR 0 1
38304: PUSH
38305: LD_VAR 0 2
38309: PUSH
38310: LD_INT 3
38312: MINUS
38313: PUSH
38314: LD_INT 3
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: PUSH
38322: LD_VAR 0 1
38326: PUSH
38327: LD_INT 4
38329: MINUS
38330: PUSH
38331: LD_VAR 0 2
38335: PUSH
38336: LD_INT 4
38338: MINUS
38339: PUSH
38340: LD_INT 2
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: LIST
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: ST_TO_ADDR
// end ; 5 :
38355: GO 38495
38357: LD_INT 5
38359: DOUBLE
38360: EQUAL
38361: IFTRUE 38365
38363: GO 38494
38365: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38366: LD_ADDR_VAR 0 5
38370: PUSH
38371: LD_VAR 0 1
38375: PUSH
38376: LD_INT 4
38378: MINUS
38379: PUSH
38380: LD_VAR 0 2
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: LIST
38392: PUSH
38393: LD_VAR 0 1
38397: PUSH
38398: LD_VAR 0 2
38402: PUSH
38403: LD_INT 4
38405: MINUS
38406: PUSH
38407: LD_INT 3
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: PUSH
38415: LD_VAR 0 1
38419: PUSH
38420: LD_INT 4
38422: PLUS
38423: PUSH
38424: LD_VAR 0 2
38428: PUSH
38429: LD_INT 4
38431: PLUS
38432: PUSH
38433: LD_INT 5
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: PUSH
38441: LD_VAR 0 1
38445: PUSH
38446: LD_INT 3
38448: PLUS
38449: PUSH
38450: LD_VAR 0 2
38454: PUSH
38455: LD_INT 4
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: LIST
38462: PUSH
38463: LD_VAR 0 1
38467: PUSH
38468: LD_VAR 0 2
38472: PUSH
38473: LD_INT 3
38475: PLUS
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: LIST
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: ST_TO_ADDR
// end ; end ;
38492: GO 38495
38494: POP
// result := list ;
38495: LD_ADDR_VAR 0 4
38499: PUSH
38500: LD_VAR 0 5
38504: ST_TO_ADDR
// end ;
38505: LD_VAR 0 4
38509: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38510: LD_INT 0
38512: PPUSH
38513: PPUSH
38514: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38515: LD_VAR 0 1
38519: NOT
38520: IFTRUE 38548
38522: PUSH
38523: LD_VAR 0 2
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: LD_INT 4
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: IN
38546: NOT
38547: OR
38548: IFFALSE 38552
// exit ;
38550: GO 38635
// tmp := [ ] ;
38552: LD_ADDR_VAR 0 5
38556: PUSH
38557: EMPTY
38558: ST_TO_ADDR
// for i in units do
38559: LD_ADDR_VAR 0 4
38563: PUSH
38564: LD_VAR 0 1
38568: PUSH
38569: FOR_IN
38570: IFFALSE 38604
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38572: LD_ADDR_VAR 0 5
38576: PUSH
38577: LD_VAR 0 5
38581: PPUSH
38582: LD_VAR 0 4
38586: PPUSH
38587: LD_VAR 0 2
38591: PPUSH
38592: CALL_OW 259
38596: PPUSH
38597: CALL 40030 0 2
38601: ST_TO_ADDR
38602: GO 38569
38604: POP
38605: POP
// if not tmp then
38606: LD_VAR 0 5
38610: NOT
38611: IFFALSE 38615
// exit ;
38613: GO 38635
// result := SortListByListDesc ( units , tmp ) ;
38615: LD_ADDR_VAR 0 3
38619: PUSH
38620: LD_VAR 0 1
38624: PPUSH
38625: LD_VAR 0 5
38629: PPUSH
38630: CALL_OW 77
38634: ST_TO_ADDR
// end ;
38635: LD_VAR 0 3
38639: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38640: LD_INT 0
38642: PPUSH
38643: PPUSH
38644: PPUSH
// result := false ;
38645: LD_ADDR_VAR 0 3
38649: PUSH
38650: LD_INT 0
38652: ST_TO_ADDR
// if not building then
38653: LD_VAR 0 2
38657: NOT
38658: IFFALSE 38662
// exit ;
38660: GO 38806
// x := GetX ( building ) ;
38662: LD_ADDR_VAR 0 4
38666: PUSH
38667: LD_VAR 0 2
38671: PPUSH
38672: CALL_OW 250
38676: ST_TO_ADDR
// y := GetY ( building ) ;
38677: LD_ADDR_VAR 0 5
38681: PUSH
38682: LD_VAR 0 2
38686: PPUSH
38687: CALL_OW 251
38691: ST_TO_ADDR
// if not x or not y then
38692: LD_VAR 0 4
38696: NOT
38697: IFTRUE 38706
38699: PUSH
38700: LD_VAR 0 5
38704: NOT
38705: OR
38706: IFFALSE 38710
// exit ;
38708: GO 38806
// if GetTaskList ( unit ) then
38710: LD_VAR 0 1
38714: PPUSH
38715: CALL_OW 437
38719: IFFALSE 38806
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38721: LD_STRING e
38723: PUSH
38724: LD_VAR 0 1
38728: PPUSH
38729: CALL_OW 437
38733: PUSH
38734: LD_INT 1
38736: ARRAY
38737: PUSH
38738: LD_INT 1
38740: ARRAY
38741: EQUAL
38742: IFFALSE 38769
38744: PUSH
38745: LD_VAR 0 4
38749: PUSH
38750: LD_VAR 0 1
38754: PPUSH
38755: CALL_OW 437
38759: PUSH
38760: LD_INT 1
38762: ARRAY
38763: PUSH
38764: LD_INT 2
38766: ARRAY
38767: EQUAL
38768: AND
38769: IFFALSE 38796
38771: PUSH
38772: LD_VAR 0 5
38776: PUSH
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL_OW 437
38786: PUSH
38787: LD_INT 1
38789: ARRAY
38790: PUSH
38791: LD_INT 3
38793: ARRAY
38794: EQUAL
38795: AND
38796: IFFALSE 38806
// result := true end ;
38798: LD_ADDR_VAR 0 3
38802: PUSH
38803: LD_INT 1
38805: ST_TO_ADDR
// end ;
38806: LD_VAR 0 3
38810: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38811: LD_INT 0
38813: PPUSH
// result := false ;
38814: LD_ADDR_VAR 0 4
38818: PUSH
38819: LD_INT 0
38821: ST_TO_ADDR
// if GetTaskList ( unit ) then
38822: LD_VAR 0 1
38826: PPUSH
38827: CALL_OW 437
38831: IFFALSE 38918
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38833: LD_STRING M
38835: PUSH
38836: LD_VAR 0 1
38840: PPUSH
38841: CALL_OW 437
38845: PUSH
38846: LD_INT 1
38848: ARRAY
38849: PUSH
38850: LD_INT 1
38852: ARRAY
38853: EQUAL
38854: IFFALSE 38881
38856: PUSH
38857: LD_VAR 0 2
38861: PUSH
38862: LD_VAR 0 1
38866: PPUSH
38867: CALL_OW 437
38871: PUSH
38872: LD_INT 1
38874: ARRAY
38875: PUSH
38876: LD_INT 2
38878: ARRAY
38879: EQUAL
38880: AND
38881: IFFALSE 38908
38883: PUSH
38884: LD_VAR 0 3
38888: PUSH
38889: LD_VAR 0 1
38893: PPUSH
38894: CALL_OW 437
38898: PUSH
38899: LD_INT 1
38901: ARRAY
38902: PUSH
38903: LD_INT 3
38905: ARRAY
38906: EQUAL
38907: AND
38908: IFFALSE 38918
// result := true ;
38910: LD_ADDR_VAR 0 4
38914: PUSH
38915: LD_INT 1
38917: ST_TO_ADDR
// end ; end ;
38918: LD_VAR 0 4
38922: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38923: LD_INT 0
38925: PPUSH
38926: PPUSH
38927: PPUSH
38928: PPUSH
// if not unit or not area then
38929: LD_VAR 0 1
38933: NOT
38934: IFTRUE 38943
38936: PUSH
38937: LD_VAR 0 2
38941: NOT
38942: OR
38943: IFFALSE 38947
// exit ;
38945: GO 39123
// tmp := AreaToList ( area , i ) ;
38947: LD_ADDR_VAR 0 6
38951: PUSH
38952: LD_VAR 0 2
38956: PPUSH
38957: LD_VAR 0 5
38961: PPUSH
38962: CALL_OW 517
38966: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38967: LD_ADDR_VAR 0 5
38971: PUSH
38972: DOUBLE
38973: LD_INT 1
38975: DEC
38976: ST_TO_ADDR
38977: LD_VAR 0 6
38981: PUSH
38982: LD_INT 1
38984: ARRAY
38985: PUSH
38986: FOR_TO
38987: IFFALSE 39121
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38989: LD_ADDR_VAR 0 7
38993: PUSH
38994: LD_VAR 0 6
38998: PUSH
38999: LD_INT 1
39001: ARRAY
39002: PUSH
39003: LD_VAR 0 5
39007: ARRAY
39008: PUSH
39009: LD_VAR 0 6
39013: PUSH
39014: LD_INT 2
39016: ARRAY
39017: PUSH
39018: LD_VAR 0 5
39022: ARRAY
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39028: LD_INT 92
39030: PUSH
39031: LD_VAR 0 7
39035: PUSH
39036: LD_INT 1
39038: ARRAY
39039: PUSH
39040: LD_VAR 0 7
39044: PUSH
39045: LD_INT 2
39047: ARRAY
39048: PUSH
39049: LD_INT 2
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: PPUSH
39058: CALL_OW 69
39062: PUSH
39063: LD_INT 0
39065: EQUAL
39066: IFFALSE 39119
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39068: LD_VAR 0 1
39072: PPUSH
39073: LD_VAR 0 7
39077: PUSH
39078: LD_INT 1
39080: ARRAY
39081: PPUSH
39082: LD_VAR 0 7
39086: PUSH
39087: LD_INT 2
39089: ARRAY
39090: PPUSH
39091: LD_VAR 0 3
39095: PPUSH
39096: CALL_OW 48
// result := IsPlaced ( unit ) ;
39100: LD_ADDR_VAR 0 4
39104: PUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: CALL_OW 305
39114: ST_TO_ADDR
// exit ;
39115: POP
39116: POP
39117: GO 39123
// end ; end ;
39119: GO 38986
39121: POP
39122: POP
// end ;
39123: LD_VAR 0 4
39127: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39128: LD_INT 0
39130: PPUSH
39131: PPUSH
39132: PPUSH
// if not side or side > 8 then
39133: LD_VAR 0 1
39137: NOT
39138: IFTRUE 39150
39140: PUSH
39141: LD_VAR 0 1
39145: PUSH
39146: LD_INT 8
39148: GREATER
39149: OR
39150: IFFALSE 39154
// exit ;
39152: GO 39341
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39154: LD_ADDR_VAR 0 4
39158: PUSH
39159: LD_INT 22
39161: PUSH
39162: LD_VAR 0 1
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 21
39173: PUSH
39174: LD_INT 3
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PPUSH
39185: CALL_OW 69
39189: ST_TO_ADDR
// if not tmp then
39190: LD_VAR 0 4
39194: NOT
39195: IFFALSE 39199
// exit ;
39197: GO 39341
// enable_addtolog := true ;
39199: LD_ADDR_OWVAR 81
39203: PUSH
39204: LD_INT 1
39206: ST_TO_ADDR
// AddToLog ( [ ) ;
39207: LD_STRING [
39209: PPUSH
39210: CALL_OW 561
// for i in tmp do
39214: LD_ADDR_VAR 0 3
39218: PUSH
39219: LD_VAR 0 4
39223: PUSH
39224: FOR_IN
39225: IFFALSE 39332
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39227: LD_STRING [
39229: PUSH
39230: LD_VAR 0 3
39234: PPUSH
39235: CALL_OW 266
39239: STR
39240: PUSH
39241: LD_STRING , 
39243: STR
39244: PUSH
39245: LD_VAR 0 3
39249: PPUSH
39250: CALL_OW 250
39254: STR
39255: PUSH
39256: LD_STRING , 
39258: STR
39259: PUSH
39260: LD_VAR 0 3
39264: PPUSH
39265: CALL_OW 251
39269: STR
39270: PUSH
39271: LD_STRING , 
39273: STR
39274: PUSH
39275: LD_VAR 0 3
39279: PPUSH
39280: CALL_OW 254
39284: STR
39285: PUSH
39286: LD_STRING , 
39288: STR
39289: PUSH
39290: LD_VAR 0 3
39294: PPUSH
39295: LD_INT 1
39297: PPUSH
39298: CALL_OW 268
39302: STR
39303: PUSH
39304: LD_STRING , 
39306: STR
39307: PUSH
39308: LD_VAR 0 3
39312: PPUSH
39313: LD_INT 2
39315: PPUSH
39316: CALL_OW 268
39320: STR
39321: PUSH
39322: LD_STRING ],
39324: STR
39325: PPUSH
39326: CALL_OW 561
// end ;
39330: GO 39224
39332: POP
39333: POP
// AddToLog ( ]; ) ;
39334: LD_STRING ];
39336: PPUSH
39337: CALL_OW 561
// end ;
39341: LD_VAR 0 2
39345: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39346: LD_INT 0
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
39352: PPUSH
// if not area or not rate or not max then
39353: LD_VAR 0 1
39357: NOT
39358: IFTRUE 39367
39360: PUSH
39361: LD_VAR 0 2
39365: NOT
39366: OR
39367: IFTRUE 39376
39369: PUSH
39370: LD_VAR 0 4
39374: NOT
39375: OR
39376: IFFALSE 39380
// exit ;
39378: GO 39569
// while 1 do
39380: LD_INT 1
39382: IFFALSE 39569
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39384: LD_ADDR_VAR 0 9
39388: PUSH
39389: LD_VAR 0 1
39393: PPUSH
39394: LD_INT 1
39396: PPUSH
39397: CALL_OW 287
39401: PUSH
39402: LD_INT 10
39404: MUL
39405: ST_TO_ADDR
// r := rate / 10 ;
39406: LD_ADDR_VAR 0 7
39410: PUSH
39411: LD_VAR 0 2
39415: PUSH
39416: LD_INT 10
39418: DIVREAL
39419: ST_TO_ADDR
// time := 1 1$00 ;
39420: LD_ADDR_VAR 0 8
39424: PUSH
39425: LD_INT 2100
39427: ST_TO_ADDR
// if amount < min then
39428: LD_VAR 0 9
39432: PUSH
39433: LD_VAR 0 3
39437: LESS
39438: IFFALSE 39456
// r := r * 2 else
39440: LD_ADDR_VAR 0 7
39444: PUSH
39445: LD_VAR 0 7
39449: PUSH
39450: LD_INT 2
39452: MUL
39453: ST_TO_ADDR
39454: GO 39482
// if amount > max then
39456: LD_VAR 0 9
39460: PUSH
39461: LD_VAR 0 4
39465: GREATER
39466: IFFALSE 39482
// r := r / 2 ;
39468: LD_ADDR_VAR 0 7
39472: PUSH
39473: LD_VAR 0 7
39477: PUSH
39478: LD_INT 2
39480: DIVREAL
39481: ST_TO_ADDR
// time := time / r ;
39482: LD_ADDR_VAR 0 8
39486: PUSH
39487: LD_VAR 0 8
39491: PUSH
39492: LD_VAR 0 7
39496: DIVREAL
39497: ST_TO_ADDR
// if time < 0 then
39498: LD_VAR 0 8
39502: PUSH
39503: LD_INT 0
39505: LESS
39506: IFFALSE 39523
// time := time * - 1 ;
39508: LD_ADDR_VAR 0 8
39512: PUSH
39513: LD_VAR 0 8
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: MUL
39522: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39523: LD_VAR 0 8
39527: PUSH
39528: LD_INT 35
39530: PPUSH
39531: LD_INT 875
39533: PPUSH
39534: CALL_OW 12
39538: PLUS
39539: PPUSH
39540: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39544: LD_INT 1
39546: PPUSH
39547: LD_INT 5
39549: PPUSH
39550: CALL_OW 12
39554: PPUSH
39555: LD_VAR 0 1
39559: PPUSH
39560: LD_INT 1
39562: PPUSH
39563: CALL_OW 55
// end ;
39567: GO 39380
// end ;
39569: LD_VAR 0 5
39573: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39574: LD_INT 0
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
// if not turrets or not factories then
39584: LD_VAR 0 1
39588: NOT
39589: IFTRUE 39598
39591: PUSH
39592: LD_VAR 0 2
39596: NOT
39597: OR
39598: IFFALSE 39602
// exit ;
39600: GO 39909
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39602: LD_ADDR_VAR 0 10
39606: PUSH
39607: LD_INT 5
39609: PUSH
39610: LD_INT 6
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 4
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 3
39629: PUSH
39630: LD_INT 5
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 24
39644: PUSH
39645: LD_INT 25
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 23
39654: PUSH
39655: LD_INT 27
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 42
39668: PUSH
39669: LD_INT 43
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 44
39678: PUSH
39679: LD_INT 46
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 45
39688: PUSH
39689: LD_INT 47
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: ST_TO_ADDR
// result := [ ] ;
39706: LD_ADDR_VAR 0 3
39710: PUSH
39711: EMPTY
39712: ST_TO_ADDR
// for i in turrets do
39713: LD_ADDR_VAR 0 4
39717: PUSH
39718: LD_VAR 0 1
39722: PUSH
39723: FOR_IN
39724: IFFALSE 39907
// begin nat := GetNation ( i ) ;
39726: LD_ADDR_VAR 0 7
39730: PUSH
39731: LD_VAR 0 4
39735: PPUSH
39736: CALL_OW 248
39740: ST_TO_ADDR
// weapon := 0 ;
39741: LD_ADDR_VAR 0 8
39745: PUSH
39746: LD_INT 0
39748: ST_TO_ADDR
// if not nat then
39749: LD_VAR 0 7
39753: NOT
39754: IFFALSE 39758
// continue ;
39756: GO 39723
// for j in list [ nat ] do
39758: LD_ADDR_VAR 0 5
39762: PUSH
39763: LD_VAR 0 10
39767: PUSH
39768: LD_VAR 0 7
39772: ARRAY
39773: PUSH
39774: FOR_IN
39775: IFFALSE 39816
// if GetBWeapon ( i ) = j [ 1 ] then
39777: LD_VAR 0 4
39781: PPUSH
39782: CALL_OW 269
39786: PUSH
39787: LD_VAR 0 5
39791: PUSH
39792: LD_INT 1
39794: ARRAY
39795: EQUAL
39796: IFFALSE 39814
// begin weapon := j [ 2 ] ;
39798: LD_ADDR_VAR 0 8
39802: PUSH
39803: LD_VAR 0 5
39807: PUSH
39808: LD_INT 2
39810: ARRAY
39811: ST_TO_ADDR
// break ;
39812: GO 39816
// end ;
39814: GO 39774
39816: POP
39817: POP
// if not weapon then
39818: LD_VAR 0 8
39822: NOT
39823: IFFALSE 39827
// continue ;
39825: GO 39723
// for k in factories do
39827: LD_ADDR_VAR 0 6
39831: PUSH
39832: LD_VAR 0 2
39836: PUSH
39837: FOR_IN
39838: IFFALSE 39903
// begin weapons := AvailableWeaponList ( k ) ;
39840: LD_ADDR_VAR 0 9
39844: PUSH
39845: LD_VAR 0 6
39849: PPUSH
39850: CALL_OW 478
39854: ST_TO_ADDR
// if not weapons then
39855: LD_VAR 0 9
39859: NOT
39860: IFFALSE 39864
// continue ;
39862: GO 39837
// if weapon in weapons then
39864: LD_VAR 0 8
39868: PUSH
39869: LD_VAR 0 9
39873: IN
39874: IFFALSE 39901
// begin result := [ i , weapon ] ;
39876: LD_ADDR_VAR 0 3
39880: PUSH
39881: LD_VAR 0 4
39885: PUSH
39886: LD_VAR 0 8
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: ST_TO_ADDR
// exit ;
39895: POP
39896: POP
39897: POP
39898: POP
39899: GO 39909
// end ; end ;
39901: GO 39837
39903: POP
39904: POP
// end ;
39905: GO 39723
39907: POP
39908: POP
// end ;
39909: LD_VAR 0 3
39913: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39914: LD_INT 0
39916: PPUSH
// if not side or side > 8 then
39917: LD_VAR 0 3
39921: NOT
39922: IFTRUE 39934
39924: PUSH
39925: LD_VAR 0 3
39929: PUSH
39930: LD_INT 8
39932: GREATER
39933: OR
39934: IFFALSE 39938
// exit ;
39936: GO 39997
// if not range then
39938: LD_VAR 0 4
39942: NOT
39943: IFFALSE 39954
// range := - 12 ;
39945: LD_ADDR_VAR 0 4
39949: PUSH
39950: LD_INT 12
39952: NEG
39953: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39954: LD_VAR 0 1
39958: PPUSH
39959: LD_VAR 0 2
39963: PPUSH
39964: LD_VAR 0 3
39968: PPUSH
39969: LD_VAR 0 4
39973: PPUSH
39974: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39978: LD_VAR 0 1
39982: PPUSH
39983: LD_VAR 0 2
39987: PPUSH
39988: LD_VAR 0 3
39992: PPUSH
39993: CALL_OW 331
// end ;
39997: LD_VAR 0 5
40001: RET
// export function Video ( mode ) ; begin
40002: LD_INT 0
40004: PPUSH
// ingame_video = mode ;
40005: LD_ADDR_OWVAR 52
40009: PUSH
40010: LD_VAR 0 1
40014: ST_TO_ADDR
// interface_hidden = mode ;
40015: LD_ADDR_OWVAR 54
40019: PUSH
40020: LD_VAR 0 1
40024: ST_TO_ADDR
// end ;
40025: LD_VAR 0 2
40029: RET
// export function Join ( array , element ) ; begin
40030: LD_INT 0
40032: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40033: LD_ADDR_VAR 0 3
40037: PUSH
40038: LD_VAR 0 1
40042: PPUSH
40043: LD_VAR 0 1
40047: PUSH
40048: LD_INT 1
40050: PLUS
40051: PPUSH
40052: LD_VAR 0 2
40056: PPUSH
40057: CALL_OW 1
40061: ST_TO_ADDR
// end ;
40062: LD_VAR 0 3
40066: RET
// export function JoinUnion ( array , element ) ; begin
40067: LD_INT 0
40069: PPUSH
// result := array union element ;
40070: LD_ADDR_VAR 0 3
40074: PUSH
40075: LD_VAR 0 1
40079: PUSH
40080: LD_VAR 0 2
40084: UNION
40085: ST_TO_ADDR
// end ;
40086: LD_VAR 0 3
40090: RET
// export function GetBehemoths ( side ) ; begin
40091: LD_INT 0
40093: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40094: LD_ADDR_VAR 0 2
40098: PUSH
40099: LD_INT 22
40101: PUSH
40102: LD_VAR 0 1
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 31
40113: PUSH
40114: LD_INT 25
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PPUSH
40125: CALL_OW 69
40129: ST_TO_ADDR
// end ;
40130: LD_VAR 0 2
40134: RET
// export function Shuffle ( array ) ; var i , index ; begin
40135: LD_INT 0
40137: PPUSH
40138: PPUSH
40139: PPUSH
// result := [ ] ;
40140: LD_ADDR_VAR 0 2
40144: PUSH
40145: EMPTY
40146: ST_TO_ADDR
// if not array then
40147: LD_VAR 0 1
40151: NOT
40152: IFFALSE 40156
// exit ;
40154: GO 40255
// Randomize ;
40156: CALL_OW 10
// for i = array downto 1 do
40160: LD_ADDR_VAR 0 3
40164: PUSH
40165: DOUBLE
40166: LD_VAR 0 1
40170: INC
40171: ST_TO_ADDR
40172: LD_INT 1
40174: PUSH
40175: FOR_DOWNTO
40176: IFFALSE 40253
// begin index := rand ( 1 , array ) ;
40178: LD_ADDR_VAR 0 4
40182: PUSH
40183: LD_INT 1
40185: PPUSH
40186: LD_VAR 0 1
40190: PPUSH
40191: CALL_OW 12
40195: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40196: LD_ADDR_VAR 0 2
40200: PUSH
40201: LD_VAR 0 2
40205: PPUSH
40206: LD_VAR 0 2
40210: PUSH
40211: LD_INT 1
40213: PLUS
40214: PPUSH
40215: LD_VAR 0 1
40219: PUSH
40220: LD_VAR 0 4
40224: ARRAY
40225: PPUSH
40226: CALL_OW 2
40230: ST_TO_ADDR
// array := Delete ( array , index ) ;
40231: LD_ADDR_VAR 0 1
40235: PUSH
40236: LD_VAR 0 1
40240: PPUSH
40241: LD_VAR 0 4
40245: PPUSH
40246: CALL_OW 3
40250: ST_TO_ADDR
// end ;
40251: GO 40175
40253: POP
40254: POP
// end ;
40255: LD_VAR 0 2
40259: RET
// export function GetBaseMaterials ( base ) ; begin
40260: LD_INT 0
40262: PPUSH
// result := [ 0 , 0 , 0 ] ;
40263: LD_ADDR_VAR 0 2
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: ST_TO_ADDR
// if not base then
40282: LD_VAR 0 1
40286: NOT
40287: IFFALSE 40291
// exit ;
40289: GO 40340
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40291: LD_ADDR_VAR 0 2
40295: PUSH
40296: LD_VAR 0 1
40300: PPUSH
40301: LD_INT 1
40303: PPUSH
40304: CALL_OW 275
40308: PUSH
40309: LD_VAR 0 1
40313: PPUSH
40314: LD_INT 2
40316: PPUSH
40317: CALL_OW 275
40321: PUSH
40322: LD_VAR 0 1
40326: PPUSH
40327: LD_INT 3
40329: PPUSH
40330: CALL_OW 275
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: ST_TO_ADDR
// end ;
40340: LD_VAR 0 2
40344: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40345: LD_INT 0
40347: PPUSH
40348: PPUSH
// result := array ;
40349: LD_ADDR_VAR 0 3
40353: PUSH
40354: LD_VAR 0 1
40358: ST_TO_ADDR
// if size >= result then
40359: LD_VAR 0 2
40363: PUSH
40364: LD_VAR 0 3
40368: GREATEREQUAL
40369: IFFALSE 40373
// exit ;
40371: GO 40423
// if size then
40373: LD_VAR 0 2
40377: IFFALSE 40423
// for i := array downto size do
40379: LD_ADDR_VAR 0 4
40383: PUSH
40384: DOUBLE
40385: LD_VAR 0 1
40389: INC
40390: ST_TO_ADDR
40391: LD_VAR 0 2
40395: PUSH
40396: FOR_DOWNTO
40397: IFFALSE 40421
// result := Delete ( result , result ) ;
40399: LD_ADDR_VAR 0 3
40403: PUSH
40404: LD_VAR 0 3
40408: PPUSH
40409: LD_VAR 0 3
40413: PPUSH
40414: CALL_OW 3
40418: ST_TO_ADDR
40419: GO 40396
40421: POP
40422: POP
// end ;
40423: LD_VAR 0 3
40427: RET
// export function ComExit ( unit ) ; var tmp ; begin
40428: LD_INT 0
40430: PPUSH
40431: PPUSH
// if not IsInUnit ( unit ) then
40432: LD_VAR 0 1
40436: PPUSH
40437: CALL_OW 310
40441: NOT
40442: IFFALSE 40446
// exit ;
40444: GO 40506
// tmp := IsInUnit ( unit ) ;
40446: LD_ADDR_VAR 0 3
40450: PUSH
40451: LD_VAR 0 1
40455: PPUSH
40456: CALL_OW 310
40460: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40461: LD_VAR 0 3
40465: PPUSH
40466: CALL_OW 247
40470: PUSH
40471: LD_INT 2
40473: EQUAL
40474: IFFALSE 40487
// ComExitVehicle ( unit ) else
40476: LD_VAR 0 1
40480: PPUSH
40481: CALL_OW 121
40485: GO 40496
// ComExitBuilding ( unit ) ;
40487: LD_VAR 0 1
40491: PPUSH
40492: CALL_OW 122
// result := tmp ;
40496: LD_ADDR_VAR 0 2
40500: PUSH
40501: LD_VAR 0 3
40505: ST_TO_ADDR
// end ;
40506: LD_VAR 0 2
40510: RET
// export function ComExitAll ( units ) ; var i ; begin
40511: LD_INT 0
40513: PPUSH
40514: PPUSH
// if not units then
40515: LD_VAR 0 1
40519: NOT
40520: IFFALSE 40524
// exit ;
40522: GO 40550
// for i in units do
40524: LD_ADDR_VAR 0 3
40528: PUSH
40529: LD_VAR 0 1
40533: PUSH
40534: FOR_IN
40535: IFFALSE 40548
// ComExit ( i ) ;
40537: LD_VAR 0 3
40541: PPUSH
40542: CALL 40428 0 1
40546: GO 40534
40548: POP
40549: POP
// end ;
40550: LD_VAR 0 2
40554: RET
// export function ResetHc ; begin
40555: LD_INT 0
40557: PPUSH
// InitHc ;
40558: CALL_OW 19
// hc_importance := 0 ;
40562: LD_ADDR_OWVAR 32
40566: PUSH
40567: LD_INT 0
40569: ST_TO_ADDR
// end ;
40570: LD_VAR 0 1
40574: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40575: LD_INT 0
40577: PPUSH
40578: PPUSH
40579: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40580: LD_ADDR_VAR 0 6
40584: PUSH
40585: LD_VAR 0 1
40589: PUSH
40590: LD_VAR 0 3
40594: PLUS
40595: PUSH
40596: LD_INT 2
40598: DIV
40599: ST_TO_ADDR
// if _x < 0 then
40600: LD_VAR 0 6
40604: PUSH
40605: LD_INT 0
40607: LESS
40608: IFFALSE 40625
// _x := _x * - 1 ;
40610: LD_ADDR_VAR 0 6
40614: PUSH
40615: LD_VAR 0 6
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: MUL
40624: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40625: LD_ADDR_VAR 0 7
40629: PUSH
40630: LD_VAR 0 2
40634: PUSH
40635: LD_VAR 0 4
40639: PLUS
40640: PUSH
40641: LD_INT 2
40643: DIV
40644: ST_TO_ADDR
// if _y < 0 then
40645: LD_VAR 0 7
40649: PUSH
40650: LD_INT 0
40652: LESS
40653: IFFALSE 40670
// _y := _y * - 1 ;
40655: LD_ADDR_VAR 0 7
40659: PUSH
40660: LD_VAR 0 7
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: MUL
40669: ST_TO_ADDR
// result := [ _x , _y ] ;
40670: LD_ADDR_VAR 0 5
40674: PUSH
40675: LD_VAR 0 6
40679: PUSH
40680: LD_VAR 0 7
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: ST_TO_ADDR
// end ;
40689: LD_VAR 0 5
40693: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40694: LD_INT 0
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
// task := GetTaskList ( unit ) ;
40700: LD_ADDR_VAR 0 7
40704: PUSH
40705: LD_VAR 0 1
40709: PPUSH
40710: CALL_OW 437
40714: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40715: LD_VAR 0 7
40719: NOT
40720: IFFALSE 40739
40722: PUSH
40723: LD_VAR 0 1
40727: PPUSH
40728: LD_VAR 0 2
40732: PPUSH
40733: CALL_OW 308
40737: NOT
40738: AND
40739: IFFALSE 40743
// exit ;
40741: GO 40861
// if IsInArea ( unit , area ) then
40743: LD_VAR 0 1
40747: PPUSH
40748: LD_VAR 0 2
40752: PPUSH
40753: CALL_OW 308
40757: IFFALSE 40775
// begin ComMoveToArea ( unit , goAway ) ;
40759: LD_VAR 0 1
40763: PPUSH
40764: LD_VAR 0 3
40768: PPUSH
40769: CALL_OW 113
// exit ;
40773: GO 40861
// end ; if task [ 1 ] [ 1 ] <> M then
40775: LD_VAR 0 7
40779: PUSH
40780: LD_INT 1
40782: ARRAY
40783: PUSH
40784: LD_INT 1
40786: ARRAY
40787: PUSH
40788: LD_STRING M
40790: NONEQUAL
40791: IFFALSE 40795
// exit ;
40793: GO 40861
// x := task [ 1 ] [ 2 ] ;
40795: LD_ADDR_VAR 0 5
40799: PUSH
40800: LD_VAR 0 7
40804: PUSH
40805: LD_INT 1
40807: ARRAY
40808: PUSH
40809: LD_INT 2
40811: ARRAY
40812: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40813: LD_ADDR_VAR 0 6
40817: PUSH
40818: LD_VAR 0 7
40822: PUSH
40823: LD_INT 1
40825: ARRAY
40826: PUSH
40827: LD_INT 3
40829: ARRAY
40830: ST_TO_ADDR
// if InArea ( x , y , area ) then
40831: LD_VAR 0 5
40835: PPUSH
40836: LD_VAR 0 6
40840: PPUSH
40841: LD_VAR 0 2
40845: PPUSH
40846: CALL_OW 309
40850: IFFALSE 40861
// ComStop ( unit ) ;
40852: LD_VAR 0 1
40856: PPUSH
40857: CALL_OW 141
// end ;
40861: LD_VAR 0 4
40865: RET
// export function Abs ( value ) ; begin
40866: LD_INT 0
40868: PPUSH
// result := value ;
40869: LD_ADDR_VAR 0 2
40873: PUSH
40874: LD_VAR 0 1
40878: ST_TO_ADDR
// if value < 0 then
40879: LD_VAR 0 1
40883: PUSH
40884: LD_INT 0
40886: LESS
40887: IFFALSE 40904
// result := value * - 1 ;
40889: LD_ADDR_VAR 0 2
40893: PUSH
40894: LD_VAR 0 1
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: MUL
40903: ST_TO_ADDR
// end ;
40904: LD_VAR 0 2
40908: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40909: LD_INT 0
40911: PPUSH
40912: PPUSH
40913: PPUSH
40914: PPUSH
40915: PPUSH
40916: PPUSH
40917: PPUSH
40918: PPUSH
// if not unit or not building then
40919: LD_VAR 0 1
40923: NOT
40924: IFTRUE 40933
40926: PUSH
40927: LD_VAR 0 2
40931: NOT
40932: OR
40933: IFFALSE 40937
// exit ;
40935: GO 41165
// x := GetX ( building ) ;
40937: LD_ADDR_VAR 0 4
40941: PUSH
40942: LD_VAR 0 2
40946: PPUSH
40947: CALL_OW 250
40951: ST_TO_ADDR
// y := GetY ( building ) ;
40952: LD_ADDR_VAR 0 6
40956: PUSH
40957: LD_VAR 0 2
40961: PPUSH
40962: CALL_OW 251
40966: ST_TO_ADDR
// d := GetDir ( building ) ;
40967: LD_ADDR_VAR 0 8
40971: PUSH
40972: LD_VAR 0 2
40976: PPUSH
40977: CALL_OW 254
40981: ST_TO_ADDR
// r := 4 ;
40982: LD_ADDR_VAR 0 9
40986: PUSH
40987: LD_INT 4
40989: ST_TO_ADDR
// for i := 1 to 5 do
40990: LD_ADDR_VAR 0 10
40994: PUSH
40995: DOUBLE
40996: LD_INT 1
40998: DEC
40999: ST_TO_ADDR
41000: LD_INT 5
41002: PUSH
41003: FOR_TO
41004: IFFALSE 41163
// begin _x := ShiftX ( x , d , r + i ) ;
41006: LD_ADDR_VAR 0 5
41010: PUSH
41011: LD_VAR 0 4
41015: PPUSH
41016: LD_VAR 0 8
41020: PPUSH
41021: LD_VAR 0 9
41025: PUSH
41026: LD_VAR 0 10
41030: PLUS
41031: PPUSH
41032: CALL_OW 272
41036: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41037: LD_ADDR_VAR 0 7
41041: PUSH
41042: LD_VAR 0 6
41046: PPUSH
41047: LD_VAR 0 8
41051: PPUSH
41052: LD_VAR 0 9
41056: PUSH
41057: LD_VAR 0 10
41061: PLUS
41062: PPUSH
41063: CALL_OW 273
41067: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41068: LD_VAR 0 5
41072: PPUSH
41073: LD_VAR 0 7
41077: PPUSH
41078: CALL_OW 488
41082: IFFALSE 41117
41084: PUSH
41085: LD_VAR 0 5
41089: PPUSH
41090: LD_VAR 0 7
41094: PPUSH
41095: CALL_OW 428
41099: PPUSH
41100: CALL_OW 247
41104: PUSH
41105: LD_INT 3
41107: PUSH
41108: LD_INT 2
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: IN
41115: NOT
41116: AND
41117: IFFALSE 41161
// begin ComMoveXY ( unit , _x , _y ) ;
41119: LD_VAR 0 1
41123: PPUSH
41124: LD_VAR 0 5
41128: PPUSH
41129: LD_VAR 0 7
41133: PPUSH
41134: CALL_OW 111
// result := [ _x , _y ] ;
41138: LD_ADDR_VAR 0 3
41142: PUSH
41143: LD_VAR 0 5
41147: PUSH
41148: LD_VAR 0 7
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: ST_TO_ADDR
// exit ;
41157: POP
41158: POP
41159: GO 41165
// end ; end ;
41161: GO 41003
41163: POP
41164: POP
// end ;
41165: LD_VAR 0 3
41169: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41170: LD_INT 0
41172: PPUSH
41173: PPUSH
41174: PPUSH
// result := 0 ;
41175: LD_ADDR_VAR 0 3
41179: PUSH
41180: LD_INT 0
41182: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41183: LD_VAR 0 1
41187: PUSH
41188: LD_INT 0
41190: LESS
41191: IFTRUE 41203
41193: PUSH
41194: LD_VAR 0 1
41198: PUSH
41199: LD_INT 8
41201: GREATER
41202: OR
41203: IFTRUE 41215
41205: PUSH
41206: LD_VAR 0 2
41210: PUSH
41211: LD_INT 0
41213: LESS
41214: OR
41215: IFTRUE 41227
41217: PUSH
41218: LD_VAR 0 2
41222: PUSH
41223: LD_INT 8
41225: GREATER
41226: OR
41227: IFFALSE 41231
// exit ;
41229: GO 41306
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41231: LD_ADDR_VAR 0 4
41235: PUSH
41236: LD_INT 22
41238: PUSH
41239: LD_VAR 0 2
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PPUSH
41248: CALL_OW 69
41252: PUSH
41253: FOR_IN
41254: IFFALSE 41304
// begin un := UnitShoot ( i ) ;
41256: LD_ADDR_VAR 0 5
41260: PUSH
41261: LD_VAR 0 4
41265: PPUSH
41266: CALL_OW 504
41270: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41271: LD_VAR 0 5
41275: PPUSH
41276: CALL_OW 255
41280: PUSH
41281: LD_VAR 0 1
41285: EQUAL
41286: IFFALSE 41302
// begin result := un ;
41288: LD_ADDR_VAR 0 3
41292: PUSH
41293: LD_VAR 0 5
41297: ST_TO_ADDR
// exit ;
41298: POP
41299: POP
41300: GO 41306
// end ; end ;
41302: GO 41253
41304: POP
41305: POP
// end ;
41306: LD_VAR 0 3
41310: RET
// export function GetCargoBay ( units ) ; begin
41311: LD_INT 0
41313: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41314: LD_ADDR_VAR 0 2
41318: PUSH
41319: LD_VAR 0 1
41323: PPUSH
41324: LD_INT 2
41326: PUSH
41327: LD_INT 34
41329: PUSH
41330: LD_INT 12
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 34
41339: PUSH
41340: LD_INT 51
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 34
41349: PUSH
41350: LD_INT 32
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 34
41359: PUSH
41360: LD_INT 89
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: PPUSH
41374: CALL_OW 72
41378: ST_TO_ADDR
// end ;
41379: LD_VAR 0 2
41383: RET
// export function Negate ( value ) ; begin
41384: LD_INT 0
41386: PPUSH
// result := not value ;
41387: LD_ADDR_VAR 0 2
41391: PUSH
41392: LD_VAR 0 1
41396: NOT
41397: ST_TO_ADDR
// end ;
41398: LD_VAR 0 2
41402: RET
// export function Inc ( value ) ; begin
41403: LD_INT 0
41405: PPUSH
// result := value + 1 ;
41406: LD_ADDR_VAR 0 2
41410: PUSH
41411: LD_VAR 0 1
41415: PUSH
41416: LD_INT 1
41418: PLUS
41419: ST_TO_ADDR
// end ;
41420: LD_VAR 0 2
41424: RET
// export function Dec ( value ) ; begin
41425: LD_INT 0
41427: PPUSH
// result := value - 1 ;
41428: LD_ADDR_VAR 0 2
41432: PUSH
41433: LD_VAR 0 1
41437: PUSH
41438: LD_INT 1
41440: MINUS
41441: ST_TO_ADDR
// end ;
41442: LD_VAR 0 2
41446: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41447: LD_INT 0
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41457: LD_VAR 0 1
41461: PPUSH
41462: LD_VAR 0 2
41466: PPUSH
41467: CALL_OW 488
41471: NOT
41472: IFTRUE 41491
41474: PUSH
41475: LD_VAR 0 3
41479: PPUSH
41480: LD_VAR 0 4
41484: PPUSH
41485: CALL_OW 488
41489: NOT
41490: OR
41491: IFFALSE 41504
// begin result := - 1 ;
41493: LD_ADDR_VAR 0 5
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: ST_TO_ADDR
// exit ;
41502: GO 41739
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41504: LD_ADDR_VAR 0 12
41508: PUSH
41509: LD_VAR 0 1
41513: PPUSH
41514: LD_VAR 0 2
41518: PPUSH
41519: LD_VAR 0 3
41523: PPUSH
41524: LD_VAR 0 4
41528: PPUSH
41529: CALL 40575 0 4
41533: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41534: LD_ADDR_VAR 0 11
41538: PUSH
41539: LD_VAR 0 1
41543: PPUSH
41544: LD_VAR 0 2
41548: PPUSH
41549: LD_VAR 0 12
41553: PUSH
41554: LD_INT 1
41556: ARRAY
41557: PPUSH
41558: LD_VAR 0 12
41562: PUSH
41563: LD_INT 2
41565: ARRAY
41566: PPUSH
41567: CALL_OW 298
41571: ST_TO_ADDR
// distance := 9999 ;
41572: LD_ADDR_VAR 0 10
41576: PUSH
41577: LD_INT 9999
41579: ST_TO_ADDR
// for i := 0 to 5 do
41580: LD_ADDR_VAR 0 6
41584: PUSH
41585: DOUBLE
41586: LD_INT 0
41588: DEC
41589: ST_TO_ADDR
41590: LD_INT 5
41592: PUSH
41593: FOR_TO
41594: IFFALSE 41737
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41596: LD_ADDR_VAR 0 7
41600: PUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: LD_VAR 0 6
41610: PPUSH
41611: LD_VAR 0 11
41615: PPUSH
41616: CALL_OW 272
41620: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41621: LD_ADDR_VAR 0 8
41625: PUSH
41626: LD_VAR 0 2
41630: PPUSH
41631: LD_VAR 0 6
41635: PPUSH
41636: LD_VAR 0 11
41640: PPUSH
41641: CALL_OW 273
41645: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41646: LD_VAR 0 7
41650: PPUSH
41651: LD_VAR 0 8
41655: PPUSH
41656: CALL_OW 488
41660: NOT
41661: IFFALSE 41665
// continue ;
41663: GO 41593
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41665: LD_ADDR_VAR 0 9
41669: PUSH
41670: LD_VAR 0 12
41674: PUSH
41675: LD_INT 1
41677: ARRAY
41678: PPUSH
41679: LD_VAR 0 12
41683: PUSH
41684: LD_INT 2
41686: ARRAY
41687: PPUSH
41688: LD_VAR 0 7
41692: PPUSH
41693: LD_VAR 0 8
41697: PPUSH
41698: CALL_OW 298
41702: ST_TO_ADDR
// if tmp < distance then
41703: LD_VAR 0 9
41707: PUSH
41708: LD_VAR 0 10
41712: LESS
41713: IFFALSE 41735
// begin result := i ;
41715: LD_ADDR_VAR 0 5
41719: PUSH
41720: LD_VAR 0 6
41724: ST_TO_ADDR
// distance := tmp ;
41725: LD_ADDR_VAR 0 10
41729: PUSH
41730: LD_VAR 0 9
41734: ST_TO_ADDR
// end ; end ;
41735: GO 41593
41737: POP
41738: POP
// end ;
41739: LD_VAR 0 5
41743: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41744: LD_INT 0
41746: PPUSH
41747: PPUSH
// if not driver or not IsInUnit ( driver ) then
41748: LD_VAR 0 1
41752: NOT
41753: IFTRUE 41767
41755: PUSH
41756: LD_VAR 0 1
41760: PPUSH
41761: CALL_OW 310
41765: NOT
41766: OR
41767: IFFALSE 41771
// exit ;
41769: GO 41861
// vehicle := IsInUnit ( driver ) ;
41771: LD_ADDR_VAR 0 3
41775: PUSH
41776: LD_VAR 0 1
41780: PPUSH
41781: CALL_OW 310
41785: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41786: LD_VAR 0 1
41790: PPUSH
41791: LD_STRING \
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: PUSH
41821: LD_STRING E
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: LD_VAR 0 3
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PPUSH
41857: CALL_OW 446
// end ;
41861: LD_VAR 0 2
41865: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41866: LD_INT 0
41868: PPUSH
41869: PPUSH
// if not driver or not IsInUnit ( driver ) then
41870: LD_VAR 0 1
41874: NOT
41875: IFTRUE 41889
41877: PUSH
41878: LD_VAR 0 1
41882: PPUSH
41883: CALL_OW 310
41887: NOT
41888: OR
41889: IFFALSE 41893
// exit ;
41891: GO 41983
// vehicle := IsInUnit ( driver ) ;
41893: LD_ADDR_VAR 0 3
41897: PUSH
41898: LD_VAR 0 1
41902: PPUSH
41903: CALL_OW 310
41907: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41908: LD_VAR 0 1
41912: PPUSH
41913: LD_STRING \
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: PUSH
41943: LD_STRING E
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_VAR 0 3
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PPUSH
41979: CALL_OW 447
// end ;
41983: LD_VAR 0 2
41987: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41988: LD_INT 0
41990: PPUSH
41991: PPUSH
41992: PPUSH
// tmp := [ ] ;
41993: LD_ADDR_VAR 0 5
41997: PUSH
41998: EMPTY
41999: ST_TO_ADDR
// for i in units do
42000: LD_ADDR_VAR 0 4
42004: PUSH
42005: LD_VAR 0 1
42009: PUSH
42010: FOR_IN
42011: IFFALSE 42049
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42013: LD_ADDR_VAR 0 5
42017: PUSH
42018: LD_VAR 0 5
42022: PPUSH
42023: LD_VAR 0 5
42027: PUSH
42028: LD_INT 1
42030: PLUS
42031: PPUSH
42032: LD_VAR 0 4
42036: PPUSH
42037: CALL_OW 256
42041: PPUSH
42042: CALL_OW 2
42046: ST_TO_ADDR
42047: GO 42010
42049: POP
42050: POP
// if not tmp then
42051: LD_VAR 0 5
42055: NOT
42056: IFFALSE 42060
// exit ;
42058: GO 42108
// if asc then
42060: LD_VAR 0 2
42064: IFFALSE 42088
// result := SortListByListAsc ( units , tmp ) else
42066: LD_ADDR_VAR 0 3
42070: PUSH
42071: LD_VAR 0 1
42075: PPUSH
42076: LD_VAR 0 5
42080: PPUSH
42081: CALL_OW 76
42085: ST_TO_ADDR
42086: GO 42108
// result := SortListByListDesc ( units , tmp ) ;
42088: LD_ADDR_VAR 0 3
42092: PUSH
42093: LD_VAR 0 1
42097: PPUSH
42098: LD_VAR 0 5
42102: PPUSH
42103: CALL_OW 77
42107: ST_TO_ADDR
// end ;
42108: LD_VAR 0 3
42112: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42113: LD_INT 0
42115: PPUSH
42116: PPUSH
// task := GetTaskList ( mech ) ;
42117: LD_ADDR_VAR 0 4
42121: PUSH
42122: LD_VAR 0 1
42126: PPUSH
42127: CALL_OW 437
42131: ST_TO_ADDR
// if not task then
42132: LD_VAR 0 4
42136: NOT
42137: IFFALSE 42141
// exit ;
42139: GO 42185
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42141: LD_ADDR_VAR 0 3
42145: PUSH
42146: LD_VAR 0 4
42150: PUSH
42151: LD_INT 1
42153: ARRAY
42154: PUSH
42155: LD_INT 1
42157: ARRAY
42158: PUSH
42159: LD_STRING r
42161: EQUAL
42162: IFFALSE 42184
42164: PUSH
42165: LD_VAR 0 4
42169: PUSH
42170: LD_INT 1
42172: ARRAY
42173: PUSH
42174: LD_INT 4
42176: ARRAY
42177: PUSH
42178: LD_VAR 0 2
42182: EQUAL
42183: AND
42184: ST_TO_ADDR
// end ;
42185: LD_VAR 0 3
42189: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42190: LD_INT 0
42192: PPUSH
// SetDir ( unit , d ) ;
42193: LD_VAR 0 1
42197: PPUSH
42198: LD_VAR 0 4
42202: PPUSH
42203: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
42207: LD_ADDR_VAR 0 6
42211: PUSH
42212: LD_VAR 0 1
42216: PPUSH
42217: LD_VAR 0 2
42221: PPUSH
42222: LD_VAR 0 3
42226: PPUSH
42227: LD_VAR 0 5
42231: PPUSH
42232: CALL_OW 48
42236: ST_TO_ADDR
// end ;
42237: LD_VAR 0 6
42241: RET
// export function ToNaturalNumber ( number ) ; begin
42242: LD_INT 0
42244: PPUSH
// result := number div 1 ;
42245: LD_ADDR_VAR 0 2
42249: PUSH
42250: LD_VAR 0 1
42254: PUSH
42255: LD_INT 1
42257: DIV
42258: ST_TO_ADDR
// if number < 0 then
42259: LD_VAR 0 1
42263: PUSH
42264: LD_INT 0
42266: LESS
42267: IFFALSE 42277
// result := 0 ;
42269: LD_ADDR_VAR 0 2
42273: PUSH
42274: LD_INT 0
42276: ST_TO_ADDR
// end ;
42277: LD_VAR 0 2
42281: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
42282: LD_INT 0
42284: PPUSH
42285: PPUSH
42286: PPUSH
// if not buildings then
42287: LD_VAR 0 1
42291: NOT
42292: IFFALSE 42296
// exit ;
42294: GO 42411
// tmp := [ ] ;
42296: LD_ADDR_VAR 0 5
42300: PUSH
42301: EMPTY
42302: ST_TO_ADDR
// for b in buildings do
42303: LD_ADDR_VAR 0 4
42307: PUSH
42308: LD_VAR 0 1
42312: PUSH
42313: FOR_IN
42314: IFFALSE 42352
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
42316: LD_ADDR_VAR 0 5
42320: PUSH
42321: LD_VAR 0 5
42325: PPUSH
42326: LD_VAR 0 5
42330: PUSH
42331: LD_INT 1
42333: PLUS
42334: PPUSH
42335: LD_VAR 0 4
42339: PPUSH
42340: CALL_OW 266
42344: PPUSH
42345: CALL_OW 1
42349: ST_TO_ADDR
42350: GO 42313
42352: POP
42353: POP
// if not tmp then
42354: LD_VAR 0 5
42358: NOT
42359: IFFALSE 42363
// exit ;
42361: GO 42411
// if asc then
42363: LD_VAR 0 2
42367: IFFALSE 42391
// result := SortListByListAsc ( buildings , tmp ) else
42369: LD_ADDR_VAR 0 3
42373: PUSH
42374: LD_VAR 0 1
42378: PPUSH
42379: LD_VAR 0 5
42383: PPUSH
42384: CALL_OW 76
42388: ST_TO_ADDR
42389: GO 42411
// result := SortListByListDesc ( buildings , tmp ) ;
42391: LD_ADDR_VAR 0 3
42395: PUSH
42396: LD_VAR 0 1
42400: PPUSH
42401: LD_VAR 0 5
42405: PPUSH
42406: CALL_OW 77
42410: ST_TO_ADDR
// end ;
42411: LD_VAR 0 3
42415: RET
// export function SortByClass ( units , class ) ; var un ; begin
42416: LD_INT 0
42418: PPUSH
42419: PPUSH
// if not units or not class then
42420: LD_VAR 0 1
42424: NOT
42425: IFTRUE 42434
42427: PUSH
42428: LD_VAR 0 2
42432: NOT
42433: OR
42434: IFFALSE 42438
// exit ;
42436: GO 42533
// result := [ ] ;
42438: LD_ADDR_VAR 0 3
42442: PUSH
42443: EMPTY
42444: ST_TO_ADDR
// for un in units do
42445: LD_ADDR_VAR 0 4
42449: PUSH
42450: LD_VAR 0 1
42454: PUSH
42455: FOR_IN
42456: IFFALSE 42531
// if GetClass ( un ) = class then
42458: LD_VAR 0 4
42462: PPUSH
42463: CALL_OW 257
42467: PUSH
42468: LD_VAR 0 2
42472: EQUAL
42473: IFFALSE 42500
// result := Insert ( result , 1 , un ) else
42475: LD_ADDR_VAR 0 3
42479: PUSH
42480: LD_VAR 0 3
42484: PPUSH
42485: LD_INT 1
42487: PPUSH
42488: LD_VAR 0 4
42492: PPUSH
42493: CALL_OW 2
42497: ST_TO_ADDR
42498: GO 42529
// result := Replace ( result , result + 1 , un ) ;
42500: LD_ADDR_VAR 0 3
42504: PUSH
42505: LD_VAR 0 3
42509: PPUSH
42510: LD_VAR 0 3
42514: PUSH
42515: LD_INT 1
42517: PLUS
42518: PPUSH
42519: LD_VAR 0 4
42523: PPUSH
42524: CALL_OW 1
42528: ST_TO_ADDR
42529: GO 42455
42531: POP
42532: POP
// end ;
42533: LD_VAR 0 3
42537: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42538: LD_INT 0
42540: PPUSH
42541: PPUSH
42542: PPUSH
42543: PPUSH
42544: PPUSH
42545: PPUSH
42546: PPUSH
// result := [ ] ;
42547: LD_ADDR_VAR 0 4
42551: PUSH
42552: EMPTY
42553: ST_TO_ADDR
// if x - r < 0 then
42554: LD_VAR 0 1
42558: PUSH
42559: LD_VAR 0 3
42563: MINUS
42564: PUSH
42565: LD_INT 0
42567: LESS
42568: IFFALSE 42580
// min_x := 0 else
42570: LD_ADDR_VAR 0 8
42574: PUSH
42575: LD_INT 0
42577: ST_TO_ADDR
42578: GO 42596
// min_x := x - r ;
42580: LD_ADDR_VAR 0 8
42584: PUSH
42585: LD_VAR 0 1
42589: PUSH
42590: LD_VAR 0 3
42594: MINUS
42595: ST_TO_ADDR
// if y - r < 0 then
42596: LD_VAR 0 2
42600: PUSH
42601: LD_VAR 0 3
42605: MINUS
42606: PUSH
42607: LD_INT 0
42609: LESS
42610: IFFALSE 42622
// min_y := 0 else
42612: LD_ADDR_VAR 0 7
42616: PUSH
42617: LD_INT 0
42619: ST_TO_ADDR
42620: GO 42638
// min_y := y - r ;
42622: LD_ADDR_VAR 0 7
42626: PUSH
42627: LD_VAR 0 2
42631: PUSH
42632: LD_VAR 0 3
42636: MINUS
42637: ST_TO_ADDR
// max_x := x + r ;
42638: LD_ADDR_VAR 0 9
42642: PUSH
42643: LD_VAR 0 1
42647: PUSH
42648: LD_VAR 0 3
42652: PLUS
42653: ST_TO_ADDR
// max_y := y + r ;
42654: LD_ADDR_VAR 0 10
42658: PUSH
42659: LD_VAR 0 2
42663: PUSH
42664: LD_VAR 0 3
42668: PLUS
42669: ST_TO_ADDR
// for _x = min_x to max_x do
42670: LD_ADDR_VAR 0 5
42674: PUSH
42675: DOUBLE
42676: LD_VAR 0 8
42680: DEC
42681: ST_TO_ADDR
42682: LD_VAR 0 9
42686: PUSH
42687: FOR_TO
42688: IFFALSE 42789
// for _y = min_y to max_y do
42690: LD_ADDR_VAR 0 6
42694: PUSH
42695: DOUBLE
42696: LD_VAR 0 7
42700: DEC
42701: ST_TO_ADDR
42702: LD_VAR 0 10
42706: PUSH
42707: FOR_TO
42708: IFFALSE 42785
// begin if not ValidHex ( _x , _y ) then
42710: LD_VAR 0 5
42714: PPUSH
42715: LD_VAR 0 6
42719: PPUSH
42720: CALL_OW 488
42724: NOT
42725: IFFALSE 42729
// continue ;
42727: GO 42707
// if GetResourceTypeXY ( _x , _y ) then
42729: LD_VAR 0 5
42733: PPUSH
42734: LD_VAR 0 6
42738: PPUSH
42739: CALL_OW 283
42743: IFFALSE 42783
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42745: LD_ADDR_VAR 0 4
42749: PUSH
42750: LD_VAR 0 4
42754: PPUSH
42755: LD_VAR 0 4
42759: PUSH
42760: LD_INT 1
42762: PLUS
42763: PPUSH
42764: LD_VAR 0 5
42768: PUSH
42769: LD_VAR 0 6
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PPUSH
42778: CALL_OW 1
42782: ST_TO_ADDR
// end ;
42783: GO 42707
42785: POP
42786: POP
42787: GO 42687
42789: POP
42790: POP
// end ;
42791: LD_VAR 0 4
42795: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42796: LD_INT 0
42798: PPUSH
42799: PPUSH
42800: PPUSH
42801: PPUSH
42802: PPUSH
42803: PPUSH
42804: PPUSH
42805: PPUSH
// if not units then
42806: LD_VAR 0 1
42810: NOT
42811: IFFALSE 42815
// exit ;
42813: GO 43347
// result := UnitFilter ( units , [ f_ok ] ) ;
42815: LD_ADDR_VAR 0 3
42819: PUSH
42820: LD_VAR 0 1
42824: PPUSH
42825: LD_INT 50
42827: PUSH
42828: EMPTY
42829: LIST
42830: PPUSH
42831: CALL_OW 72
42835: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42836: LD_ADDR_VAR 0 8
42840: PUSH
42841: LD_VAR 0 1
42845: PUSH
42846: LD_INT 1
42848: ARRAY
42849: PPUSH
42850: CALL_OW 255
42854: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42855: LD_ADDR_VAR 0 10
42859: PUSH
42860: LD_INT 29
42862: PUSH
42863: LD_INT 91
42865: PUSH
42866: LD_INT 49
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: ST_TO_ADDR
// if not result then
42874: LD_VAR 0 3
42878: NOT
42879: IFFALSE 42883
// exit ;
42881: GO 43347
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42883: LD_ADDR_VAR 0 5
42887: PUSH
42888: LD_INT 81
42890: PUSH
42891: LD_VAR 0 8
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PPUSH
42900: CALL_OW 69
42904: ST_TO_ADDR
// for i in result do
42905: LD_ADDR_VAR 0 4
42909: PUSH
42910: LD_VAR 0 3
42914: PUSH
42915: FOR_IN
42916: IFFALSE 43345
// begin tag := GetTag ( i ) + 1 ;
42918: LD_ADDR_VAR 0 9
42922: PUSH
42923: LD_VAR 0 4
42927: PPUSH
42928: CALL_OW 110
42932: PUSH
42933: LD_INT 1
42935: PLUS
42936: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42937: LD_ADDR_VAR 0 7
42941: PUSH
42942: LD_VAR 0 4
42946: PPUSH
42947: CALL_OW 250
42951: PPUSH
42952: LD_VAR 0 4
42956: PPUSH
42957: CALL_OW 251
42961: PPUSH
42962: LD_INT 4
42964: PPUSH
42965: CALL 42538 0 3
42969: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42970: LD_VAR 0 4
42974: PPUSH
42975: CALL_OW 247
42979: PUSH
42980: LD_INT 2
42982: EQUAL
42983: IFFALSE 42995
42985: PUSH
42986: LD_VAR 0 7
42990: PUSH
42991: LD_INT 2
42993: GREATER
42994: AND
42995: IFFALSE 43015
42997: PUSH
42998: LD_VAR 0 4
43002: PPUSH
43003: CALL_OW 264
43007: PUSH
43008: LD_VAR 0 10
43012: IN
43013: NOT
43014: AND
43015: IFFALSE 43054
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43017: LD_VAR 0 4
43021: PPUSH
43022: LD_VAR 0 7
43026: PUSH
43027: LD_INT 1
43029: ARRAY
43030: PUSH
43031: LD_INT 1
43033: ARRAY
43034: PPUSH
43035: LD_VAR 0 7
43039: PUSH
43040: LD_INT 1
43042: ARRAY
43043: PUSH
43044: LD_INT 2
43046: ARRAY
43047: PPUSH
43048: CALL_OW 116
43052: GO 43343
// if path > tag then
43054: LD_VAR 0 2
43058: PUSH
43059: LD_VAR 0 9
43063: GREATER
43064: IFFALSE 43272
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43066: LD_ADDR_VAR 0 6
43070: PUSH
43071: LD_VAR 0 5
43075: PPUSH
43076: LD_INT 91
43078: PUSH
43079: LD_VAR 0 4
43083: PUSH
43084: LD_INT 8
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: PPUSH
43092: CALL_OW 72
43096: ST_TO_ADDR
// if nearEnemy then
43097: LD_VAR 0 6
43101: IFFALSE 43170
// begin if GetWeapon ( i ) = ru_time_lapser then
43103: LD_VAR 0 4
43107: PPUSH
43108: CALL_OW 264
43112: PUSH
43113: LD_INT 49
43115: EQUAL
43116: IFFALSE 43144
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43118: LD_VAR 0 4
43122: PPUSH
43123: LD_VAR 0 6
43127: PPUSH
43128: LD_VAR 0 4
43132: PPUSH
43133: CALL_OW 74
43137: PPUSH
43138: CALL_OW 112
43142: GO 43168
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43144: LD_VAR 0 4
43148: PPUSH
43149: LD_VAR 0 6
43153: PPUSH
43154: LD_VAR 0 4
43158: PPUSH
43159: CALL_OW 74
43163: PPUSH
43164: CALL 44428 0 2
// end else
43168: GO 43270
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43170: LD_VAR 0 4
43174: PPUSH
43175: LD_VAR 0 2
43179: PUSH
43180: LD_VAR 0 9
43184: ARRAY
43185: PUSH
43186: LD_INT 1
43188: ARRAY
43189: PPUSH
43190: LD_VAR 0 2
43194: PUSH
43195: LD_VAR 0 9
43199: ARRAY
43200: PUSH
43201: LD_INT 2
43203: ARRAY
43204: PPUSH
43205: CALL_OW 297
43209: PUSH
43210: LD_INT 6
43212: GREATER
43213: IFFALSE 43256
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43215: LD_VAR 0 4
43219: PPUSH
43220: LD_VAR 0 2
43224: PUSH
43225: LD_VAR 0 9
43229: ARRAY
43230: PUSH
43231: LD_INT 1
43233: ARRAY
43234: PPUSH
43235: LD_VAR 0 2
43239: PUSH
43240: LD_VAR 0 9
43244: ARRAY
43245: PUSH
43246: LD_INT 2
43248: ARRAY
43249: PPUSH
43250: CALL_OW 114
43254: GO 43270
// SetTag ( i , tag ) ;
43256: LD_VAR 0 4
43260: PPUSH
43261: LD_VAR 0 9
43265: PPUSH
43266: CALL_OW 109
// end else
43270: GO 43343
// if enemy then
43272: LD_VAR 0 5
43276: IFFALSE 43343
// begin if GetWeapon ( i ) = ru_time_lapser then
43278: LD_VAR 0 4
43282: PPUSH
43283: CALL_OW 264
43287: PUSH
43288: LD_INT 49
43290: EQUAL
43291: IFFALSE 43319
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43293: LD_VAR 0 4
43297: PPUSH
43298: LD_VAR 0 5
43302: PPUSH
43303: LD_VAR 0 4
43307: PPUSH
43308: CALL_OW 74
43312: PPUSH
43313: CALL_OW 112
43317: GO 43343
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43319: LD_VAR 0 4
43323: PPUSH
43324: LD_VAR 0 5
43328: PPUSH
43329: LD_VAR 0 4
43333: PPUSH
43334: CALL_OW 74
43338: PPUSH
43339: CALL 44428 0 2
// end ; end ;
43343: GO 42915
43345: POP
43346: POP
// end ;
43347: LD_VAR 0 3
43351: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43352: LD_INT 0
43354: PPUSH
43355: PPUSH
43356: PPUSH
// if not unit or IsInUnit ( unit ) then
43357: LD_VAR 0 1
43361: NOT
43362: IFTRUE 43375
43364: PUSH
43365: LD_VAR 0 1
43369: PPUSH
43370: CALL_OW 310
43374: OR
43375: IFFALSE 43379
// exit ;
43377: GO 43470
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43379: LD_ADDR_VAR 0 4
43383: PUSH
43384: LD_VAR 0 1
43388: PPUSH
43389: CALL_OW 250
43393: PPUSH
43394: LD_VAR 0 2
43398: PPUSH
43399: LD_INT 1
43401: PPUSH
43402: CALL_OW 272
43406: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43407: LD_ADDR_VAR 0 5
43411: PUSH
43412: LD_VAR 0 1
43416: PPUSH
43417: CALL_OW 251
43421: PPUSH
43422: LD_VAR 0 2
43426: PPUSH
43427: LD_INT 1
43429: PPUSH
43430: CALL_OW 273
43434: ST_TO_ADDR
// if ValidHex ( x , y ) then
43435: LD_VAR 0 4
43439: PPUSH
43440: LD_VAR 0 5
43444: PPUSH
43445: CALL_OW 488
43449: IFFALSE 43470
// ComTurnXY ( unit , x , y ) ;
43451: LD_VAR 0 1
43455: PPUSH
43456: LD_VAR 0 4
43460: PPUSH
43461: LD_VAR 0 5
43465: PPUSH
43466: CALL_OW 118
// end ;
43470: LD_VAR 0 3
43474: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43475: LD_INT 0
43477: PPUSH
43478: PPUSH
// result := false ;
43479: LD_ADDR_VAR 0 3
43483: PUSH
43484: LD_INT 0
43486: ST_TO_ADDR
// if not units then
43487: LD_VAR 0 2
43491: NOT
43492: IFFALSE 43496
// exit ;
43494: GO 43541
// for i in units do
43496: LD_ADDR_VAR 0 4
43500: PUSH
43501: LD_VAR 0 2
43505: PUSH
43506: FOR_IN
43507: IFFALSE 43539
// if See ( side , i ) then
43509: LD_VAR 0 1
43513: PPUSH
43514: LD_VAR 0 4
43518: PPUSH
43519: CALL_OW 292
43523: IFFALSE 43537
// begin result := true ;
43525: LD_ADDR_VAR 0 3
43529: PUSH
43530: LD_INT 1
43532: ST_TO_ADDR
// exit ;
43533: POP
43534: POP
43535: GO 43541
// end ;
43537: GO 43506
43539: POP
43540: POP
// end ;
43541: LD_VAR 0 3
43545: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43546: LD_INT 0
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
// if not unit or not points then
43552: LD_VAR 0 1
43556: NOT
43557: IFTRUE 43566
43559: PUSH
43560: LD_VAR 0 2
43564: NOT
43565: OR
43566: IFFALSE 43570
// exit ;
43568: GO 43660
// dist := 99999 ;
43570: LD_ADDR_VAR 0 5
43574: PUSH
43575: LD_INT 99999
43577: ST_TO_ADDR
// for i in points do
43578: LD_ADDR_VAR 0 4
43582: PUSH
43583: LD_VAR 0 2
43587: PUSH
43588: FOR_IN
43589: IFFALSE 43658
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43591: LD_ADDR_VAR 0 6
43595: PUSH
43596: LD_VAR 0 1
43600: PPUSH
43601: LD_VAR 0 4
43605: PUSH
43606: LD_INT 1
43608: ARRAY
43609: PPUSH
43610: LD_VAR 0 4
43614: PUSH
43615: LD_INT 2
43617: ARRAY
43618: PPUSH
43619: CALL_OW 297
43623: ST_TO_ADDR
// if tmpDist < dist then
43624: LD_VAR 0 6
43628: PUSH
43629: LD_VAR 0 5
43633: LESS
43634: IFFALSE 43656
// begin result := i ;
43636: LD_ADDR_VAR 0 3
43640: PUSH
43641: LD_VAR 0 4
43645: ST_TO_ADDR
// dist := tmpDist ;
43646: LD_ADDR_VAR 0 5
43650: PUSH
43651: LD_VAR 0 6
43655: ST_TO_ADDR
// end ; end ;
43656: GO 43588
43658: POP
43659: POP
// end ;
43660: LD_VAR 0 3
43664: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43665: LD_INT 0
43667: PPUSH
// uc_side := side ;
43668: LD_ADDR_OWVAR 20
43672: PUSH
43673: LD_VAR 0 1
43677: ST_TO_ADDR
// uc_nation := 3 ;
43678: LD_ADDR_OWVAR 21
43682: PUSH
43683: LD_INT 3
43685: ST_TO_ADDR
// vc_chassis := 25 ;
43686: LD_ADDR_OWVAR 37
43690: PUSH
43691: LD_INT 25
43693: ST_TO_ADDR
// vc_engine := engine_siberite ;
43694: LD_ADDR_OWVAR 39
43698: PUSH
43699: LD_INT 3
43701: ST_TO_ADDR
// vc_control := control_computer ;
43702: LD_ADDR_OWVAR 38
43706: PUSH
43707: LD_INT 3
43709: ST_TO_ADDR
// vc_weapon := 59 ;
43710: LD_ADDR_OWVAR 40
43714: PUSH
43715: LD_INT 59
43717: ST_TO_ADDR
// result := CreateVehicle ;
43718: LD_ADDR_VAR 0 5
43722: PUSH
43723: CALL_OW 45
43727: ST_TO_ADDR
// SetDir ( result , d ) ;
43728: LD_VAR 0 5
43732: PPUSH
43733: LD_VAR 0 4
43737: PPUSH
43738: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43742: LD_VAR 0 5
43746: PPUSH
43747: LD_VAR 0 2
43751: PPUSH
43752: LD_VAR 0 3
43756: PPUSH
43757: LD_INT 0
43759: PPUSH
43760: CALL_OW 48
// end ;
43764: LD_VAR 0 5
43768: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43769: LD_INT 0
43771: PPUSH
43772: PPUSH
43773: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43774: LD_ADDR_VAR 0 2
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43797: LD_VAR 0 1
43801: NOT
43802: IFTRUE 43835
43804: PUSH
43805: LD_VAR 0 1
43809: PPUSH
43810: CALL_OW 264
43814: PUSH
43815: LD_INT 12
43817: PUSH
43818: LD_INT 51
43820: PUSH
43821: LD_INT 32
43823: PUSH
43824: LD_INT 89
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: IN
43833: NOT
43834: OR
43835: IFFALSE 43839
// exit ;
43837: GO 43937
// for i := 1 to 3 do
43839: LD_ADDR_VAR 0 3
43843: PUSH
43844: DOUBLE
43845: LD_INT 1
43847: DEC
43848: ST_TO_ADDR
43849: LD_INT 3
43851: PUSH
43852: FOR_TO
43853: IFFALSE 43935
// begin tmp := GetCargo ( cargo , i ) ;
43855: LD_ADDR_VAR 0 4
43859: PUSH
43860: LD_VAR 0 1
43864: PPUSH
43865: LD_VAR 0 3
43869: PPUSH
43870: CALL_OW 289
43874: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43875: LD_ADDR_VAR 0 2
43879: PUSH
43880: LD_VAR 0 2
43884: PPUSH
43885: LD_VAR 0 3
43889: PPUSH
43890: LD_VAR 0 4
43894: PPUSH
43895: CALL_OW 1
43899: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43900: LD_ADDR_VAR 0 2
43904: PUSH
43905: LD_VAR 0 2
43909: PPUSH
43910: LD_INT 4
43912: PPUSH
43913: LD_VAR 0 2
43917: PUSH
43918: LD_INT 4
43920: ARRAY
43921: PUSH
43922: LD_VAR 0 4
43926: PLUS
43927: PPUSH
43928: CALL_OW 1
43932: ST_TO_ADDR
// end ;
43933: GO 43852
43935: POP
43936: POP
// end ;
43937: LD_VAR 0 2
43941: RET
// export function Length ( array ) ; begin
43942: LD_INT 0
43944: PPUSH
// result := array + 0 ;
43945: LD_ADDR_VAR 0 2
43949: PUSH
43950: LD_VAR 0 1
43954: PUSH
43955: LD_INT 0
43957: PLUS
43958: ST_TO_ADDR
// end ;
43959: LD_VAR 0 2
43963: RET
// export function PrepareArray ( array ) ; begin
43964: LD_INT 0
43966: PPUSH
// result := array diff 0 ;
43967: LD_ADDR_VAR 0 2
43971: PUSH
43972: LD_VAR 0 1
43976: PUSH
43977: LD_INT 0
43979: DIFF
43980: ST_TO_ADDR
// if not result [ 1 ] then
43981: LD_VAR 0 2
43985: PUSH
43986: LD_INT 1
43988: ARRAY
43989: NOT
43990: IFFALSE 44010
// result := Delete ( result , 1 ) ;
43992: LD_ADDR_VAR 0 2
43996: PUSH
43997: LD_VAR 0 2
44001: PPUSH
44002: LD_INT 1
44004: PPUSH
44005: CALL_OW 3
44009: ST_TO_ADDR
// end ;
44010: LD_VAR 0 2
44014: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44015: LD_INT 0
44017: PPUSH
44018: PPUSH
44019: PPUSH
44020: PPUSH
// sibRocketRange := 25 ;
44021: LD_ADDR_VAR 0 6
44025: PUSH
44026: LD_INT 25
44028: ST_TO_ADDR
// result := false ;
44029: LD_ADDR_VAR 0 4
44033: PUSH
44034: LD_INT 0
44036: ST_TO_ADDR
// for i := 0 to 5 do
44037: LD_ADDR_VAR 0 5
44041: PUSH
44042: DOUBLE
44043: LD_INT 0
44045: DEC
44046: ST_TO_ADDR
44047: LD_INT 5
44049: PUSH
44050: FOR_TO
44051: IFFALSE 44118
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44053: LD_VAR 0 1
44057: PPUSH
44058: LD_VAR 0 5
44062: PPUSH
44063: LD_VAR 0 6
44067: PPUSH
44068: CALL_OW 272
44072: PPUSH
44073: LD_VAR 0 2
44077: PPUSH
44078: LD_VAR 0 5
44082: PPUSH
44083: LD_VAR 0 6
44087: PPUSH
44088: CALL_OW 273
44092: PPUSH
44093: LD_VAR 0 3
44097: PPUSH
44098: CALL_OW 309
44102: IFFALSE 44116
// begin result := true ;
44104: LD_ADDR_VAR 0 4
44108: PUSH
44109: LD_INT 1
44111: ST_TO_ADDR
// exit ;
44112: POP
44113: POP
44114: GO 44120
// end ;
44116: GO 44050
44118: POP
44119: POP
// end ;
44120: LD_VAR 0 4
44124: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44125: LD_INT 0
44127: PPUSH
44128: PPUSH
44129: PPUSH
// if btype = b_depot then
44130: LD_VAR 0 2
44134: PUSH
44135: LD_INT 0
44137: EQUAL
44138: IFFALSE 44150
// begin result := true ;
44140: LD_ADDR_VAR 0 3
44144: PUSH
44145: LD_INT 1
44147: ST_TO_ADDR
// exit ;
44148: GO 44270
// end ; pom := GetBase ( depot ) ;
44150: LD_ADDR_VAR 0 4
44154: PUSH
44155: LD_VAR 0 1
44159: PPUSH
44160: CALL_OW 274
44164: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44165: LD_ADDR_VAR 0 5
44169: PUSH
44170: LD_VAR 0 2
44174: PPUSH
44175: LD_VAR 0 1
44179: PPUSH
44180: CALL_OW 248
44184: PPUSH
44185: CALL_OW 450
44189: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44190: LD_ADDR_VAR 0 3
44194: PUSH
44195: LD_VAR 0 4
44199: PPUSH
44200: LD_INT 1
44202: PPUSH
44203: CALL_OW 275
44207: PUSH
44208: LD_VAR 0 5
44212: PUSH
44213: LD_INT 1
44215: ARRAY
44216: GREATEREQUAL
44217: IFFALSE 44243
44219: PUSH
44220: LD_VAR 0 4
44224: PPUSH
44225: LD_INT 2
44227: PPUSH
44228: CALL_OW 275
44232: PUSH
44233: LD_VAR 0 5
44237: PUSH
44238: LD_INT 2
44240: ARRAY
44241: GREATEREQUAL
44242: AND
44243: IFFALSE 44269
44245: PUSH
44246: LD_VAR 0 4
44250: PPUSH
44251: LD_INT 3
44253: PPUSH
44254: CALL_OW 275
44258: PUSH
44259: LD_VAR 0 5
44263: PUSH
44264: LD_INT 3
44266: ARRAY
44267: GREATEREQUAL
44268: AND
44269: ST_TO_ADDR
// end ;
44270: LD_VAR 0 3
44274: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44275: LD_INT 0
44277: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44278: LD_VAR 0 1
44282: PPUSH
44283: LD_VAR 0 2
44287: PPUSH
44288: LD_INT 0
44290: PPUSH
44291: LD_INT 0
44293: PPUSH
44294: LD_INT 1
44296: PPUSH
44297: LD_INT 0
44299: PPUSH
44300: CALL_OW 587
// end ;
44304: LD_VAR 0 3
44308: RET
// export function CenterOnNow ( unit ) ; begin
44309: LD_INT 0
44311: PPUSH
// result := IsInUnit ( unit ) ;
44312: LD_ADDR_VAR 0 2
44316: PUSH
44317: LD_VAR 0 1
44321: PPUSH
44322: CALL_OW 310
44326: ST_TO_ADDR
// if not result then
44327: LD_VAR 0 2
44331: NOT
44332: IFFALSE 44344
// result := unit ;
44334: LD_ADDR_VAR 0 2
44338: PUSH
44339: LD_VAR 0 1
44343: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44344: LD_VAR 0 1
44348: PPUSH
44349: CALL_OW 87
// end ;
44353: LD_VAR 0 2
44357: RET
// export function ComMoveHex ( unit , hex ) ; begin
44358: LD_INT 0
44360: PPUSH
// if not hex then
44361: LD_VAR 0 2
44365: NOT
44366: IFFALSE 44370
// exit ;
44368: GO 44423
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44370: LD_VAR 0 2
44374: PUSH
44375: LD_INT 1
44377: ARRAY
44378: PPUSH
44379: LD_VAR 0 2
44383: PUSH
44384: LD_INT 2
44386: ARRAY
44387: PPUSH
44388: CALL_OW 428
44392: IFFALSE 44396
// exit ;
44394: GO 44423
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44396: LD_VAR 0 1
44400: PPUSH
44401: LD_VAR 0 2
44405: PUSH
44406: LD_INT 1
44408: ARRAY
44409: PPUSH
44410: LD_VAR 0 2
44414: PUSH
44415: LD_INT 2
44417: ARRAY
44418: PPUSH
44419: CALL_OW 111
// end ;
44423: LD_VAR 0 3
44427: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44428: LD_INT 0
44430: PPUSH
44431: PPUSH
44432: PPUSH
// if not unit or not enemy then
44433: LD_VAR 0 1
44437: NOT
44438: IFTRUE 44447
44440: PUSH
44441: LD_VAR 0 2
44445: NOT
44446: OR
44447: IFFALSE 44451
// exit ;
44449: GO 44577
// x := GetX ( enemy ) ;
44451: LD_ADDR_VAR 0 4
44455: PUSH
44456: LD_VAR 0 2
44460: PPUSH
44461: CALL_OW 250
44465: ST_TO_ADDR
// y := GetY ( enemy ) ;
44466: LD_ADDR_VAR 0 5
44470: PUSH
44471: LD_VAR 0 2
44475: PPUSH
44476: CALL_OW 251
44480: ST_TO_ADDR
// if ValidHex ( x , y ) then
44481: LD_VAR 0 4
44485: PPUSH
44486: LD_VAR 0 5
44490: PPUSH
44491: CALL_OW 488
44495: IFFALSE 44577
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44497: LD_VAR 0 2
44501: PPUSH
44502: CALL_OW 247
44506: PUSH
44507: LD_INT 3
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: IN
44517: IFTRUE 44540
44519: PUSH
44520: LD_VAR 0 1
44524: PPUSH
44525: CALL_OW 255
44529: PPUSH
44530: LD_VAR 0 2
44534: PPUSH
44535: CALL_OW 292
44539: OR
44540: IFFALSE 44558
// ComAttackUnit ( unit , enemy ) else
44542: LD_VAR 0 1
44546: PPUSH
44547: LD_VAR 0 2
44551: PPUSH
44552: CALL_OW 115
44556: GO 44577
// ComAgressiveMove ( unit , x , y ) ;
44558: LD_VAR 0 1
44562: PPUSH
44563: LD_VAR 0 4
44567: PPUSH
44568: LD_VAR 0 5
44572: PPUSH
44573: CALL_OW 114
// end ;
44577: LD_VAR 0 3
44581: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44582: LD_INT 0
44584: PPUSH
44585: PPUSH
44586: PPUSH
// list := AreaToList ( area , 0 ) ;
44587: LD_ADDR_VAR 0 5
44591: PUSH
44592: LD_VAR 0 1
44596: PPUSH
44597: LD_INT 0
44599: PPUSH
44600: CALL_OW 517
44604: ST_TO_ADDR
// if not list then
44605: LD_VAR 0 5
44609: NOT
44610: IFFALSE 44614
// exit ;
44612: GO 44744
// if all then
44614: LD_VAR 0 2
44618: IFFALSE 44706
// begin for i := 1 to list [ 1 ] do
44620: LD_ADDR_VAR 0 4
44624: PUSH
44625: DOUBLE
44626: LD_INT 1
44628: DEC
44629: ST_TO_ADDR
44630: LD_VAR 0 5
44634: PUSH
44635: LD_INT 1
44637: ARRAY
44638: PUSH
44639: FOR_TO
44640: IFFALSE 44702
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44642: LD_ADDR_VAR 0 3
44646: PUSH
44647: LD_VAR 0 3
44651: PPUSH
44652: LD_VAR 0 3
44656: PUSH
44657: LD_INT 1
44659: PLUS
44660: PPUSH
44661: LD_VAR 0 5
44665: PUSH
44666: LD_INT 1
44668: ARRAY
44669: PUSH
44670: LD_VAR 0 4
44674: ARRAY
44675: PUSH
44676: LD_VAR 0 5
44680: PUSH
44681: LD_INT 2
44683: ARRAY
44684: PUSH
44685: LD_VAR 0 4
44689: ARRAY
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PPUSH
44695: CALL_OW 1
44699: ST_TO_ADDR
44700: GO 44639
44702: POP
44703: POP
// exit ;
44704: GO 44744
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44706: LD_ADDR_VAR 0 3
44710: PUSH
44711: LD_VAR 0 5
44715: PUSH
44716: LD_INT 1
44718: ARRAY
44719: PUSH
44720: LD_INT 1
44722: ARRAY
44723: PUSH
44724: LD_VAR 0 5
44728: PUSH
44729: LD_INT 2
44731: ARRAY
44732: PUSH
44733: LD_INT 1
44735: ARRAY
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: EMPTY
44742: LIST
44743: ST_TO_ADDR
// end ;
44744: LD_VAR 0 3
44748: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44749: LD_INT 0
44751: PPUSH
44752: PPUSH
// list := AreaToList ( area , 0 ) ;
44753: LD_ADDR_VAR 0 4
44757: PUSH
44758: LD_VAR 0 1
44762: PPUSH
44763: LD_INT 0
44765: PPUSH
44766: CALL_OW 517
44770: ST_TO_ADDR
// if not list then
44771: LD_VAR 0 4
44775: NOT
44776: IFFALSE 44780
// exit ;
44778: GO 44821
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44780: LD_ADDR_VAR 0 3
44784: PUSH
44785: LD_VAR 0 4
44789: PUSH
44790: LD_INT 1
44792: ARRAY
44793: PUSH
44794: LD_INT 1
44796: ARRAY
44797: PUSH
44798: LD_VAR 0 4
44802: PUSH
44803: LD_INT 2
44805: ARRAY
44806: PUSH
44807: LD_INT 1
44809: ARRAY
44810: PUSH
44811: LD_VAR 0 2
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: ST_TO_ADDR
// end ;
44821: LD_VAR 0 3
44825: RET
// export function First ( array ) ; begin
44826: LD_INT 0
44828: PPUSH
// if not array then
44829: LD_VAR 0 1
44833: NOT
44834: IFFALSE 44838
// exit ;
44836: GO 44852
// result := array [ 1 ] ;
44838: LD_ADDR_VAR 0 2
44842: PUSH
44843: LD_VAR 0 1
44847: PUSH
44848: LD_INT 1
44850: ARRAY
44851: ST_TO_ADDR
// end ;
44852: LD_VAR 0 2
44856: RET
// export function Last ( array ) ; begin
44857: LD_INT 0
44859: PPUSH
// if not array then
44860: LD_VAR 0 1
44864: NOT
44865: IFFALSE 44869
// exit ;
44867: GO 44885
// result := array [ array ] ;
44869: LD_ADDR_VAR 0 2
44873: PUSH
44874: LD_VAR 0 1
44878: PUSH
44879: LD_VAR 0 1
44883: ARRAY
44884: ST_TO_ADDR
// end ;
44885: LD_VAR 0 2
44889: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44890: LD_INT 0
44892: PPUSH
44893: PPUSH
// result := [ ] ;
44894: LD_ADDR_VAR 0 5
44898: PUSH
44899: EMPTY
44900: ST_TO_ADDR
// if not array then
44901: LD_VAR 0 1
44905: NOT
44906: IFFALSE 44910
// exit ;
44908: GO 45022
// for i := 1 to array do
44910: LD_ADDR_VAR 0 6
44914: PUSH
44915: DOUBLE
44916: LD_INT 1
44918: DEC
44919: ST_TO_ADDR
44920: LD_VAR 0 1
44924: PUSH
44925: FOR_TO
44926: IFFALSE 45020
// if array [ i ] [ index ] = value then
44928: LD_VAR 0 1
44932: PUSH
44933: LD_VAR 0 6
44937: ARRAY
44938: PUSH
44939: LD_VAR 0 2
44943: ARRAY
44944: PUSH
44945: LD_VAR 0 3
44949: EQUAL
44950: IFFALSE 45018
// begin if indexColumn then
44952: LD_VAR 0 4
44956: IFFALSE 44992
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44958: LD_ADDR_VAR 0 5
44962: PUSH
44963: LD_VAR 0 5
44967: PPUSH
44968: LD_VAR 0 1
44972: PUSH
44973: LD_VAR 0 6
44977: ARRAY
44978: PUSH
44979: LD_VAR 0 4
44983: ARRAY
44984: PPUSH
44985: CALL 40030 0 2
44989: ST_TO_ADDR
44990: GO 45018
// result := Join ( result , array [ i ] ) ;
44992: LD_ADDR_VAR 0 5
44996: PUSH
44997: LD_VAR 0 5
45001: PPUSH
45002: LD_VAR 0 1
45006: PUSH
45007: LD_VAR 0 6
45011: ARRAY
45012: PPUSH
45013: CALL 40030 0 2
45017: ST_TO_ADDR
// end ;
45018: GO 44925
45020: POP
45021: POP
// end ;
45022: LD_VAR 0 5
45026: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45027: LD_INT 0
45029: PPUSH
// if not vehicles or not parkingPoint then
45030: LD_VAR 0 1
45034: NOT
45035: IFTRUE 45044
45037: PUSH
45038: LD_VAR 0 2
45042: NOT
45043: OR
45044: IFFALSE 45048
// exit ;
45046: GO 45146
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45048: LD_ADDR_VAR 0 1
45052: PUSH
45053: LD_VAR 0 1
45057: PPUSH
45058: LD_INT 50
45060: PUSH
45061: EMPTY
45062: LIST
45063: PUSH
45064: LD_INT 3
45066: PUSH
45067: LD_INT 92
45069: PUSH
45070: LD_VAR 0 2
45074: PUSH
45075: LD_INT 1
45077: ARRAY
45078: PUSH
45079: LD_VAR 0 2
45083: PUSH
45084: LD_INT 2
45086: ARRAY
45087: PUSH
45088: LD_INT 8
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PPUSH
45105: CALL_OW 72
45109: ST_TO_ADDR
// if not vehicles then
45110: LD_VAR 0 1
45114: NOT
45115: IFFALSE 45119
// exit ;
45117: GO 45146
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45119: LD_VAR 0 1
45123: PPUSH
45124: LD_VAR 0 2
45128: PUSH
45129: LD_INT 1
45131: ARRAY
45132: PPUSH
45133: LD_VAR 0 2
45137: PUSH
45138: LD_INT 2
45140: ARRAY
45141: PPUSH
45142: CALL_OW 111
// end ;
45146: LD_VAR 0 3
45150: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45151: LD_INT 0
45153: PPUSH
45154: PPUSH
45155: PPUSH
// if not side or not area then
45156: LD_VAR 0 1
45160: NOT
45161: IFTRUE 45170
45163: PUSH
45164: LD_VAR 0 2
45168: NOT
45169: OR
45170: IFFALSE 45174
// exit ;
45172: GO 45293
// tmp := AreaToList ( area , 0 ) ;
45174: LD_ADDR_VAR 0 5
45178: PUSH
45179: LD_VAR 0 2
45183: PPUSH
45184: LD_INT 0
45186: PPUSH
45187: CALL_OW 517
45191: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45192: LD_ADDR_VAR 0 4
45196: PUSH
45197: DOUBLE
45198: LD_INT 1
45200: DEC
45201: ST_TO_ADDR
45202: LD_VAR 0 5
45206: PUSH
45207: LD_INT 1
45209: ARRAY
45210: PUSH
45211: FOR_TO
45212: IFFALSE 45291
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45214: LD_VAR 0 5
45218: PUSH
45219: LD_INT 1
45221: ARRAY
45222: PUSH
45223: LD_VAR 0 4
45227: ARRAY
45228: PPUSH
45229: LD_VAR 0 5
45233: PUSH
45234: LD_INT 2
45236: ARRAY
45237: PUSH
45238: LD_VAR 0 4
45242: ARRAY
45243: PPUSH
45244: CALL_OW 351
45248: IFFALSE 45289
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45250: LD_VAR 0 5
45254: PUSH
45255: LD_INT 1
45257: ARRAY
45258: PUSH
45259: LD_VAR 0 4
45263: ARRAY
45264: PPUSH
45265: LD_VAR 0 5
45269: PUSH
45270: LD_INT 2
45272: ARRAY
45273: PUSH
45274: LD_VAR 0 4
45278: ARRAY
45279: PPUSH
45280: LD_VAR 0 1
45284: PPUSH
45285: CALL_OW 244
// end ;
45289: GO 45211
45291: POP
45292: POP
// end ;
45293: LD_VAR 0 3
45297: RET
