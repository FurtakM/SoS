// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareRussian ;
   8: CALL 98 0 0
// Action ;
  12: CALL 1256 0 0
// end ;
  16: END
// function Init ; begin
  17: LD_INT 0
  19: PPUSH
// game_speed := 5 ;
  20: LD_ADDR_OWVAR 65
  24: PUSH
  25: LD_INT 5
  27: ST_TO_ADDR
// music_class := 5 ;
  28: LD_ADDR_OWVAR 72
  32: PUSH
  33: LD_INT 5
  35: ST_TO_ADDR
// PlaceSeeing ( 1 , 1 , 3 , - 32967 ) ;
  36: LD_INT 1
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 32967
  47: NEG
  48: PPUSH
  49: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 3 ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_INT 1
  58: PPUSH
  59: LD_INT 3
  61: PPUSH
  62: CALL_OW 331
// PlaceSeeing ( 172 , 50 , 3 , - 32 ) ;
  66: LD_INT 172
  68: PPUSH
  69: LD_INT 50
  71: PPUSH
  72: LD_INT 3
  74: PPUSH
  75: LD_INT 32
  77: NEG
  78: PPUSH
  79: CALL_OW 330
// CenterNowOnXY ( 109 , 159 ) ;
  83: LD_INT 109
  85: PPUSH
  86: LD_INT 159
  88: PPUSH
  89: CALL_OW 86
// end ; end_of_file
  93: LD_VAR 0 1
  97: RET
// export Botvinov , Szyski , Burlak ; export group1 , group2 , group3 ; export function PrepareRussian ; var i , un ; begin
  98: LD_INT 0
 100: PPUSH
 101: PPUSH
 102: PPUSH
// uc_side := 3 ;
 103: LD_ADDR_OWVAR 20
 107: PUSH
 108: LD_INT 3
 110: ST_TO_ADDR
// uc_nation := 3 ;
 111: LD_ADDR_OWVAR 21
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// InitHc ;
 119: CALL_OW 19
// PrepareSoldier ( sex_male , 1 ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 1
 128: PPUSH
 129: CALL_OW 381
// hc_name := Botvinov ;
 133: LD_ADDR_OWVAR 26
 137: PUSH
 138: LD_STRING Botvinov
 140: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 141: LD_ADDR_OWVAR 33
 145: PUSH
 146: LD_STRING SecondCharsGal
 148: ST_TO_ADDR
// hc_face_number := 84 ;
 149: LD_ADDR_OWVAR 34
 153: PUSH
 154: LD_INT 84
 156: ST_TO_ADDR
// Botvinov := CreateHuman ;
 157: LD_ADDR_EXP 1
 161: PUSH
 162: CALL_OW 44
 166: ST_TO_ADDR
// PlaceUnitArea ( Botvinov , botvinovArea , false ) ;
 167: LD_EXP 1
 171: PPUSH
 172: LD_INT 2
 174: PPUSH
 175: LD_INT 0
 177: PPUSH
 178: CALL_OW 49
// ComLookAtDir ( Botvinov , 4 ) ;
 182: LD_EXP 1
 186: PPUSH
 187: LD_INT 4
 189: PPUSH
 190: CALL 42655 0 2
// hc_name := Szyski ;
 194: LD_ADDR_OWVAR 26
 198: PUSH
 199: LD_STRING Szyski
 201: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING SecondCharsGal
 209: ST_TO_ADDR
// hc_face_number := 86 ;
 210: LD_ADDR_OWVAR 34
 214: PUSH
 215: LD_INT 86
 217: ST_TO_ADDR
// Szyski := CreateHuman ;
 218: LD_ADDR_EXP 2
 222: PUSH
 223: CALL_OW 44
 227: ST_TO_ADDR
// PlaceUnitArea ( Szyski , szyskiArea , false ) ;
 228: LD_EXP 2
 232: PPUSH
 233: LD_INT 3
 235: PPUSH
 236: LD_INT 0
 238: PPUSH
 239: CALL_OW 49
// ComLookAtDir ( Szyski , 4 ) ;
 243: LD_EXP 2
 247: PPUSH
 248: LD_INT 4
 250: PPUSH
 251: CALL 42655 0 2
// InitHC_All ( ) ;
 255: CALL_OW 584
// for i := 1 to 3 do
 259: LD_ADDR_VAR 0 2
 263: PUSH
 264: DOUBLE
 265: LD_INT 1
 267: DEC
 268: ST_TO_ADDR
 269: LD_INT 3
 271: PUSH
 272: FOR_TO
 273: IFFALSE 324
// begin PrepareSoldier ( sex_male , 1 ) ;
 275: LD_INT 1
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 381
// un := CreateHuman ;
 285: LD_ADDR_VAR 0 3
 289: PUSH
 290: CALL_OW 44
 294: ST_TO_ADDR
// PlaceUnitArea ( un , officerArea , false ) ;
 295: LD_VAR 0 3
 299: PPUSH
 300: LD_INT 4
 302: PPUSH
 303: LD_INT 0
 305: PPUSH
 306: CALL_OW 49
// ComLookAtDir ( un , 2 ) ;
 310: LD_VAR 0 3
 314: PPUSH
 315: LD_INT 2
 317: PPUSH
 318: CALL 42655 0 2
// end ;
 322: GO 272
 324: POP
 325: POP
// for i := 1 to 3 do
 326: LD_ADDR_VAR 0 2
 330: PUSH
 331: DOUBLE
 332: LD_INT 1
 334: DEC
 335: ST_TO_ADDR
 336: LD_INT 3
 338: PUSH
 339: FOR_TO
 340: IFFALSE 391
// begin PrepareSoldier ( sex_male , 1 ) ;
 342: LD_INT 1
 344: PPUSH
 345: LD_INT 1
 347: PPUSH
 348: CALL_OW 381
// un := CreateHuman ;
 352: LD_ADDR_VAR 0 3
 356: PUSH
 357: CALL_OW 44
 361: ST_TO_ADDR
// PlaceUnitArea ( un , officer2Area , false ) ;
 362: LD_VAR 0 3
 366: PPUSH
 367: LD_INT 5
 369: PPUSH
 370: LD_INT 0
 372: PPUSH
 373: CALL_OW 49
// ComLookAtDir ( un , 5 ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_INT 5
 384: PPUSH
 385: CALL 42655 0 2
// end ;
 389: GO 339
 391: POP
 392: POP
// Burlak := NewCharacter ( Burlak ) ;
 393: LD_ADDR_EXP 3
 397: PUSH
 398: LD_STRING Burlak
 400: PPUSH
 401: CALL_OW 25
 405: ST_TO_ADDR
// InitHc_All ( ) ;
 406: CALL_OW 584
// group1 := PrepareGroup ;
 410: LD_ADDR_EXP 4
 414: PUSH
 415: CALL 595 0 0
 419: ST_TO_ADDR
// group1 := Replace ( group1 , 5 , Burlak ) ;
 420: LD_ADDR_EXP 4
 424: PUSH
 425: LD_EXP 4
 429: PPUSH
 430: LD_INT 5
 432: PPUSH
 433: LD_EXP 3
 437: PPUSH
 438: CALL_OW 1
 442: ST_TO_ADDR
// group2 := PrepareGroup ;
 443: LD_ADDR_EXP 5
 447: PUSH
 448: CALL 595 0 0
 452: ST_TO_ADDR
// group3 := PrepareGroup ;
 453: LD_ADDR_EXP 6
 457: PUSH
 458: CALL 595 0 0
 462: ST_TO_ADDR
// for un in group1 ^ group2 ^ group3 do
 463: LD_ADDR_VAR 0 3
 467: PUSH
 468: LD_EXP 4
 472: PUSH
 473: LD_EXP 5
 477: ADD
 478: PUSH
 479: LD_EXP 6
 483: ADD
 484: PUSH
 485: FOR_IN
 486: IFFALSE 588
// begin case GetClass ( un ) of 1 :
 488: LD_VAR 0 3
 492: PPUSH
 493: CALL_OW 257
 497: PUSH
 498: LD_INT 1
 500: DOUBLE
 501: EQUAL
 502: IFTRUE 506
 504: GO 524
 506: POP
// PlaceUnitArea ( un , firstLineArea , false ) ; 3 :
 507: LD_VAR 0 3
 511: PPUSH
 512: LD_INT 6
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL_OW 49
 522: GO 577
 524: LD_INT 3
 526: DOUBLE
 527: EQUAL
 528: IFTRUE 532
 530: GO 550
 532: POP
// PlaceUnitArea ( un , secondLineArea , false ) ; 4 :
 533: LD_VAR 0 3
 537: PPUSH
 538: LD_INT 7
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 49
 548: GO 577
 550: LD_INT 4
 552: DOUBLE
 553: EQUAL
 554: IFTRUE 558
 556: GO 576
 558: POP
// PlaceUnitArea ( un , thirdLineArea , false ) ; end ;
 559: LD_VAR 0 3
 563: PPUSH
 564: LD_INT 8
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 49
 574: GO 577
 576: POP
// ComHold ( un ) ;
 577: LD_VAR 0 3
 581: PPUSH
 582: CALL_OW 140
// end ;
 586: GO 485
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 1
 594: RET
// function PrepareGroup ; var i , j , tmp ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
 599: PPUSH
 600: PPUSH
// result := [ ] ;
 601: LD_ADDR_VAR 0 1
 605: PUSH
 606: EMPTY
 607: ST_TO_ADDR
// tmp := [ 4 , 0 , 2 , 1 ] ;
 608: LD_ADDR_VAR 0 4
 612: PUSH
 613: LD_INT 4
 615: PUSH
 616: LD_INT 0
 618: PUSH
 619: LD_INT 2
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: ST_TO_ADDR
// for i := 1 to tmp do
 631: LD_ADDR_VAR 0 2
 635: PUSH
 636: DOUBLE
 637: LD_INT 1
 639: DEC
 640: ST_TO_ADDR
 641: LD_VAR 0 4
 645: PUSH
 646: FOR_TO
 647: IFFALSE 726
// if tmp [ i ] then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_VAR 0 2
 658: ARRAY
 659: IFFALSE 724
// for j := 1 to tmp [ i ] do
 661: LD_ADDR_VAR 0 3
 665: PUSH
 666: DOUBLE
 667: LD_INT 1
 669: DEC
 670: ST_TO_ADDR
 671: LD_VAR 0 4
 675: PUSH
 676: LD_VAR 0 2
 680: ARRAY
 681: PUSH
 682: FOR_TO
 683: IFFALSE 722
// begin PrepareHuman ( false , i , 1 ) ;
 685: LD_INT 0
 687: PPUSH
 688: LD_VAR 0 2
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
 700: LD_ADDR_VAR 0 1
 704: PUSH
 705: LD_VAR 0 1
 709: PPUSH
 710: CALL_OW 44
 714: PPUSH
 715: CALL 39493 0 2
 719: ST_TO_ADDR
// end ;
 720: GO 682
 722: POP
 723: POP
 724: GO 646
 726: POP
 727: POP
// end ;
 728: LD_VAR 0 1
 732: RET
// export function FormGroup ( group , soldArea , mechArea , sciArea ) ; var i , class , hexesS , hexesM , hexesSc ; begin
 733: LD_INT 0
 735: PPUSH
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not group then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1251
// hexesS := AreaToList ( soldArea , 0 ) ;
 750: LD_ADDR_VAR 0 8
 754: PUSH
 755: LD_VAR 0 2
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL_OW 517
 767: ST_TO_ADDR
// hexesM := AreaToList ( mechArea , 0 ) ;
 768: LD_ADDR_VAR 0 9
 772: PUSH
 773: LD_VAR 0 3
 777: PPUSH
 778: LD_INT 0
 780: PPUSH
 781: CALL_OW 517
 785: ST_TO_ADDR
// hexesSc := AreaToList ( sciArea , 0 ) ;
 786: LD_ADDR_VAR 0 10
 790: PUSH
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: CALL_OW 517
 803: ST_TO_ADDR
// for i := 1 to Count ( group ) do
 804: LD_ADDR_VAR 0 6
 808: PUSH
 809: DOUBLE
 810: LD_INT 1
 812: DEC
 813: ST_TO_ADDR
 814: LD_VAR 0 1
 818: PPUSH
 819: CALL 3884 0 1
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1249
// begin class := GetClass ( group [ i ] ) ;
 827: LD_ADDR_VAR 0 7
 831: PUSH
 832: LD_VAR 0 1
 836: PUSH
 837: LD_VAR 0 6
 841: ARRAY
 842: PPUSH
 843: CALL_OW 257
 847: ST_TO_ADDR
// if class = 1 then
 848: LD_VAR 0 7
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: IFFALSE 981
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesS [ 1 ] [ 1 ] , hexesS [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
 858: LD_INT 1
 860: PPUSH
 861: LD_VAR 0 1
 865: PUSH
 866: LD_VAR 0 6
 870: ARRAY
 871: PPUSH
 872: LD_VAR 0 8
 876: PUSH
 877: LD_INT 1
 879: ARRAY
 880: PUSH
 881: LD_INT 1
 883: ARRAY
 884: PPUSH
 885: LD_VAR 0 8
 889: PUSH
 890: LD_INT 2
 892: ARRAY
 893: PUSH
 894: LD_INT 1
 896: ARRAY
 897: PPUSH
 898: LD_INT 202
 900: PPUSH
 901: LD_INT 49
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: CALL_OW 595
// hexesS := Replace ( hexesS , 1 , Delete ( hexesS [ 1 ] , 1 ) ) ;
 911: LD_ADDR_VAR 0 8
 915: PUSH
 916: LD_VAR 0 8
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: LD_VAR 0 8
 928: PUSH
 929: LD_INT 1
 931: ARRAY
 932: PPUSH
 933: LD_INT 1
 935: PPUSH
 936: CALL_OW 3
 940: PPUSH
 941: CALL_OW 1
 945: ST_TO_ADDR
// hexesS := Replace ( hexesS , 2 , Delete ( hexesS [ 2 ] , 1 ) ) ;
 946: LD_ADDR_VAR 0 8
 950: PUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: LD_INT 2
 958: PPUSH
 959: LD_VAR 0 8
 963: PUSH
 964: LD_INT 2
 966: ARRAY
 967: PPUSH
 968: LD_INT 1
 970: PPUSH
 971: CALL_OW 3
 975: PPUSH
 976: CALL_OW 1
 980: ST_TO_ADDR
// end ; if class = 3 then
 981: LD_VAR 0 7
 985: PUSH
 986: LD_INT 3
 988: EQUAL
 989: IFFALSE 1114
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesM [ 1 ] [ 1 ] , hexesM [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
 991: LD_INT 1
 993: PPUSH
 994: LD_VAR 0 1
 998: PUSH
 999: LD_VAR 0 6
1003: ARRAY
1004: PPUSH
1005: LD_VAR 0 9
1009: PUSH
1010: LD_INT 1
1012: ARRAY
1013: PUSH
1014: LD_INT 1
1016: ARRAY
1017: PPUSH
1018: LD_VAR 0 9
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: PUSH
1027: LD_INT 1
1029: ARRAY
1030: PPUSH
1031: LD_INT 202
1033: PPUSH
1034: LD_INT 49
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 595
// hexesM := Replace ( hexesM , 1 , Delete ( hexesM [ 1 ] , 1 ) ) ;
1044: LD_ADDR_VAR 0 9
1048: PUSH
1049: LD_VAR 0 9
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_VAR 0 9
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL_OW 3
1073: PPUSH
1074: CALL_OW 1
1078: ST_TO_ADDR
// hexesM := Replace ( hexesM , 2 , Delete ( hexesM [ 2 ] , 1 ) ) ;
1079: LD_ADDR_VAR 0 9
1083: PUSH
1084: LD_VAR 0 9
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_VAR 0 9
1096: PUSH
1097: LD_INT 2
1099: ARRAY
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: CALL_OW 3
1108: PPUSH
1109: CALL_OW 1
1113: ST_TO_ADDR
// end ; if class = 4 then
1114: LD_VAR 0 7
1118: PUSH
1119: LD_INT 4
1121: EQUAL
1122: IFFALSE 1247
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesSc [ 1 ] [ 1 ] , hexesSc [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1124: LD_INT 1
1126: PPUSH
1127: LD_VAR 0 1
1131: PUSH
1132: LD_VAR 0 6
1136: ARRAY
1137: PPUSH
1138: LD_VAR 0 10
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: LD_VAR 0 10
1155: PUSH
1156: LD_INT 2
1158: ARRAY
1159: PUSH
1160: LD_INT 1
1162: ARRAY
1163: PPUSH
1164: LD_INT 202
1166: PPUSH
1167: LD_INT 49
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 595
// hexesSc := Replace ( hexesSc , 1 , Delete ( hexesSc [ 1 ] , 1 ) ) ;
1177: LD_ADDR_VAR 0 10
1181: PUSH
1182: LD_VAR 0 10
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_VAR 0 10
1194: PUSH
1195: LD_INT 1
1197: ARRAY
1198: PPUSH
1199: LD_INT 1
1201: PPUSH
1202: CALL_OW 3
1206: PPUSH
1207: CALL_OW 1
1211: ST_TO_ADDR
// hexesSc := Replace ( hexesSc , 2 , Delete ( hexesSc [ 2 ] , 1 ) ) ;
1212: LD_ADDR_VAR 0 10
1216: PUSH
1217: LD_VAR 0 10
1221: PPUSH
1222: LD_INT 2
1224: PPUSH
1225: LD_VAR 0 10
1229: PUSH
1230: LD_INT 2
1232: ARRAY
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: CALL_OW 3
1241: PPUSH
1242: CALL_OW 1
1246: ST_TO_ADDR
// end ; end ;
1247: GO 824
1249: POP
1250: POP
// end ; end_of_file
1251: LD_VAR 0 5
1255: RET
// export function Action ; var i ; begin
1256: LD_INT 0
1258: PPUSH
1259: PPUSH
// Video ( true ) ;
1260: LD_INT 1
1262: PPUSH
1263: CALL 39465 0 1
// wait ( 0 0$2 ) ;
1267: LD_INT 70
1269: PPUSH
1270: CALL_OW 67
// CenterOnXY ( 106 , 151 ) ;
1274: LD_INT 106
1276: PPUSH
1277: LD_INT 151
1279: PPUSH
1280: CALL_OW 84
// wait ( 0 0$2 ) ;
1284: LD_INT 70
1286: PPUSH
1287: CALL_OW 67
// CenterOnXY ( 62 , 83 ) ;
1291: LD_INT 62
1293: PPUSH
1294: LD_INT 83
1296: PPUSH
1297: CALL_OW 84
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// CenterOnXY ( 128 , 16 ) ;
1308: LD_INT 128
1310: PPUSH
1311: LD_INT 16
1313: PPUSH
1314: CALL_OW 84
// wait ( 60 ) ;
1318: LD_INT 60
1320: PPUSH
1321: CALL_OW 67
// CenterOnXY ( 172 , 47 ) ;
1325: LD_INT 172
1327: PPUSH
1328: LD_INT 47
1330: PPUSH
1331: CALL_OW 84
// stop_talking := true ;
1335: LD_ADDR_OWVAR 56
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// Say ( Botvinov , D1i-Off1-1 ) ;
1343: LD_EXP 1
1347: PPUSH
1348: LD_STRING D1i-Off1-1
1350: PPUSH
1351: CALL_OW 88
// for i in group1 ^ group2 ^ group3 do
1355: LD_ADDR_VAR 0 2
1359: PUSH
1360: LD_EXP 4
1364: PUSH
1365: LD_EXP 5
1369: ADD
1370: PUSH
1371: LD_EXP 6
1375: ADD
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1397
// ComTurnXY ( i , 202 , 49 ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_INT 202
1387: PPUSH
1388: LD_INT 49
1390: PPUSH
1391: CALL_OW 118
1395: GO 1377
1397: POP
1398: POP
// wait ( 10 ) ;
1399: LD_INT 10
1401: PPUSH
1402: CALL_OW 67
// Say ( Szyski , D1i-Off2-1 ) ;
1406: LD_EXP 2
1410: PPUSH
1411: LD_STRING D1i-Off2-1
1413: PPUSH
1414: CALL_OW 88
// Say ( Botvinov , D1i-Off1-2 ) ;
1418: LD_EXP 1
1422: PPUSH
1423: LD_STRING D1i-Off1-2
1425: PPUSH
1426: CALL_OW 88
// FormGroup ( group1 , gs1 , gm1 , gsc1 ) ;
1430: LD_EXP 4
1434: PPUSH
1435: LD_INT 9
1437: PPUSH
1438: LD_INT 12
1440: PPUSH
1441: LD_INT 15
1443: PPUSH
1444: CALL 733 0 4
// FormGroup ( group2 , gs2 , gm2 , gsc2 ) ;
1448: LD_EXP 5
1452: PPUSH
1453: LD_INT 10
1455: PPUSH
1456: LD_INT 13
1458: PPUSH
1459: LD_INT 16
1461: PPUSH
1462: CALL 733 0 4
// FormGroup ( group3 , gs3 , gm3 , gsc3 ) ;
1466: LD_EXP 6
1470: PPUSH
1471: LD_INT 11
1473: PPUSH
1474: LD_INT 14
1476: PPUSH
1477: LD_INT 17
1479: PPUSH
1480: CALL 733 0 4
// wait ( 0 0$5 ) ;
1484: LD_INT 175
1486: PPUSH
1487: CALL_OW 67
// Say ( Szyski , D1i-Off2-2 ) ;
1491: LD_EXP 2
1495: PPUSH
1496: LD_STRING D1i-Off2-2
1498: PPUSH
1499: CALL_OW 88
// Say ( Botvinov , D1i-Off1-3 ) ;
1503: LD_EXP 1
1507: PPUSH
1508: LD_STRING D1i-Off1-3
1510: PPUSH
1511: CALL_OW 88
// SayEffect ( DStart-All ) ;
1515: LD_STRING DStart-All
1517: PPUSH
1518: CALL_OW 96
// wait ( 50 ) ;
1522: LD_INT 50
1524: PPUSH
1525: CALL_OW 67
// for i in SortByDistanceUnit ( eon , group1 , true , true ) do
1529: LD_ADDR_VAR 0 2
1533: PUSH
1534: LD_INT 4
1536: PPUSH
1537: LD_EXP 4
1541: PPUSH
1542: LD_INT 1
1544: PPUSH
1545: LD_INT 1
1547: PPUSH
1548: CALL 7179 0 4
1552: PUSH
1553: FOR_IN
1554: IFFALSE 1577
// begin ComEnterUnit ( i , eon ) ;
1556: LD_VAR 0 2
1560: PPUSH
1561: LD_INT 4
1563: PPUSH
1564: CALL_OW 120
// wait ( 55 ) ;
1568: LD_INT 55
1570: PPUSH
1571: CALL_OW 67
// end ;
1575: GO 1553
1577: POP
1578: POP
// end ; end_of_file
1579: LD_VAR 0 1
1583: RET
// on SailEventCustom ( e , p1 , p2 , p3 , p4 , p5 , p6 ) do begin repeat ComMoveXY ( p1 , p2 , p3 ) ;
1584: LD_VAR 0 2
1588: PPUSH
1589: LD_VAR 0 3
1593: PPUSH
1594: LD_VAR 0 4
1598: PPUSH
1599: CALL_OW 111
// wait ( 3 ) ;
1603: LD_INT 3
1605: PPUSH
1606: CALL_OW 67
// until IsAt ( p1 , p2 , p3 ) ;
1610: LD_VAR 0 2
1614: PPUSH
1615: LD_VAR 0 3
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL_OW 307
1629: IFFALSE 1584
// ComTurnXY ( p1 , p4 , p5 ) ;
1631: LD_VAR 0 2
1635: PPUSH
1636: LD_VAR 0 5
1640: PPUSH
1641: LD_VAR 0 6
1645: PPUSH
1646: CALL_OW 118
// end ;
1650: PPOPN 7
1652: END
// on EnterBuilding ( building , unit ) do begin if unit = Burlak then
1653: LD_VAR 0 2
1657: PUSH
1658: LD_EXP 3
1662: EQUAL
1663: IFFALSE 1682
// begin wait ( 20 ) ;
1665: LD_INT 20
1667: PPUSH
1668: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1672: LD_INT 1
1674: PPUSH
1675: LD_STRING %_cont
1677: PPUSH
1678: CALL_OW 340
// end ; end ;
1682: PPOPN 2
1684: END
// on DialogueSkipped ( value ) do begin ChangeMap ( 1 , %_cont ) ;
1685: LD_INT 1
1687: PPUSH
1688: LD_STRING %_cont
1690: PPUSH
1691: CALL_OW 340
// end ; end_of_file
1695: PPOPN 1
1697: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1698: LD_INT 0
1700: PPUSH
1701: PPUSH
// if exist_mode then
1702: LD_VAR 0 2
1706: IFFALSE 1752
// begin unit := CreateCharacter ( prefix & ident ) ;
1708: LD_ADDR_VAR 0 5
1712: PUSH
1713: LD_VAR 0 3
1717: PUSH
1718: LD_VAR 0 1
1722: STR
1723: PPUSH
1724: CALL_OW 34
1728: ST_TO_ADDR
// if unit then
1729: LD_VAR 0 5
1733: IFFALSE 1750
// DeleteCharacters ( prefix & ident ) ;
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 1
1744: STR
1745: PPUSH
1746: CALL_OW 40
// end else
1750: GO 1767
// unit := NewCharacter ( ident ) ;
1752: LD_ADDR_VAR 0 5
1756: PUSH
1757: LD_VAR 0 1
1761: PPUSH
1762: CALL_OW 25
1766: ST_TO_ADDR
// result := unit ;
1767: LD_ADDR_VAR 0 4
1771: PUSH
1772: LD_VAR 0 5
1776: ST_TO_ADDR
// end ;
1777: LD_VAR 0 4
1781: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1782: LD_INT 0
1784: PPUSH
1785: PPUSH
// if exist_mode then
1786: LD_VAR 0 2
1790: IFFALSE 1815
// unit := CreateCharacter ( prefix & ident ) else
1792: LD_ADDR_VAR 0 5
1796: PUSH
1797: LD_VAR 0 3
1801: PUSH
1802: LD_VAR 0 1
1806: STR
1807: PPUSH
1808: CALL_OW 34
1812: ST_TO_ADDR
1813: GO 1830
// unit := NewCharacter ( ident ) ;
1815: LD_ADDR_VAR 0 5
1819: PUSH
1820: LD_VAR 0 1
1824: PPUSH
1825: CALL_OW 25
1829: ST_TO_ADDR
// result := unit ;
1830: LD_ADDR_VAR 0 4
1834: PUSH
1835: LD_VAR 0 5
1839: ST_TO_ADDR
// end ;
1840: LD_VAR 0 4
1844: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1845: LD_INT 0
1847: PPUSH
1848: PPUSH
// if not side or not nation then
1849: LD_VAR 0 1
1853: NOT
1854: PUSH
1855: LD_VAR 0 2
1859: NOT
1860: OR
1861: IFFALSE 1865
// exit ;
1863: GO 2633
// case nation of nation_american :
1865: LD_VAR 0 2
1869: PUSH
1870: LD_INT 1
1872: DOUBLE
1873: EQUAL
1874: IFTRUE 1878
1876: GO 2092
1878: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1879: LD_ADDR_VAR 0 4
1883: PUSH
1884: LD_INT 35
1886: PUSH
1887: LD_INT 45
1889: PUSH
1890: LD_INT 46
1892: PUSH
1893: LD_INT 47
1895: PUSH
1896: LD_INT 82
1898: PUSH
1899: LD_INT 83
1901: PUSH
1902: LD_INT 84
1904: PUSH
1905: LD_INT 85
1907: PUSH
1908: LD_INT 86
1910: PUSH
1911: LD_INT 1
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 6
1919: PUSH
1920: LD_INT 15
1922: PUSH
1923: LD_INT 16
1925: PUSH
1926: LD_INT 7
1928: PUSH
1929: LD_INT 12
1931: PUSH
1932: LD_INT 13
1934: PUSH
1935: LD_INT 10
1937: PUSH
1938: LD_INT 14
1940: PUSH
1941: LD_INT 20
1943: PUSH
1944: LD_INT 21
1946: PUSH
1947: LD_INT 22
1949: PUSH
1950: LD_INT 25
1952: PUSH
1953: LD_INT 32
1955: PUSH
1956: LD_INT 27
1958: PUSH
1959: LD_INT 36
1961: PUSH
1962: LD_INT 69
1964: PUSH
1965: LD_INT 39
1967: PUSH
1968: LD_INT 34
1970: PUSH
1971: LD_INT 40
1973: PUSH
1974: LD_INT 48
1976: PUSH
1977: LD_INT 49
1979: PUSH
1980: LD_INT 50
1982: PUSH
1983: LD_INT 51
1985: PUSH
1986: LD_INT 52
1988: PUSH
1989: LD_INT 53
1991: PUSH
1992: LD_INT 54
1994: PUSH
1995: LD_INT 55
1997: PUSH
1998: LD_INT 56
2000: PUSH
2001: LD_INT 57
2003: PUSH
2004: LD_INT 58
2006: PUSH
2007: LD_INT 59
2009: PUSH
2010: LD_INT 60
2012: PUSH
2013: LD_INT 61
2015: PUSH
2016: LD_INT 62
2018: PUSH
2019: LD_INT 80
2021: PUSH
2022: LD_INT 82
2024: PUSH
2025: LD_INT 83
2027: PUSH
2028: LD_INT 84
2030: PUSH
2031: LD_INT 85
2033: PUSH
2034: LD_INT 86
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: ST_TO_ADDR
2090: GO 2557
2092: LD_INT 2
2094: DOUBLE
2095: EQUAL
2096: IFTRUE 2100
2098: GO 2326
2100: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2101: LD_ADDR_VAR 0 4
2105: PUSH
2106: LD_INT 35
2108: PUSH
2109: LD_INT 45
2111: PUSH
2112: LD_INT 46
2114: PUSH
2115: LD_INT 47
2117: PUSH
2118: LD_INT 82
2120: PUSH
2121: LD_INT 83
2123: PUSH
2124: LD_INT 84
2126: PUSH
2127: LD_INT 85
2129: PUSH
2130: LD_INT 87
2132: PUSH
2133: LD_INT 70
2135: PUSH
2136: LD_INT 1
2138: PUSH
2139: LD_INT 11
2141: PUSH
2142: LD_INT 3
2144: PUSH
2145: LD_INT 4
2147: PUSH
2148: LD_INT 5
2150: PUSH
2151: LD_INT 6
2153: PUSH
2154: LD_INT 15
2156: PUSH
2157: LD_INT 18
2159: PUSH
2160: LD_INT 7
2162: PUSH
2163: LD_INT 17
2165: PUSH
2166: LD_INT 8
2168: PUSH
2169: LD_INT 20
2171: PUSH
2172: LD_INT 21
2174: PUSH
2175: LD_INT 22
2177: PUSH
2178: LD_INT 72
2180: PUSH
2181: LD_INT 26
2183: PUSH
2184: LD_INT 69
2186: PUSH
2187: LD_INT 39
2189: PUSH
2190: LD_INT 40
2192: PUSH
2193: LD_INT 41
2195: PUSH
2196: LD_INT 42
2198: PUSH
2199: LD_INT 43
2201: PUSH
2202: LD_INT 48
2204: PUSH
2205: LD_INT 49
2207: PUSH
2208: LD_INT 50
2210: PUSH
2211: LD_INT 51
2213: PUSH
2214: LD_INT 52
2216: PUSH
2217: LD_INT 53
2219: PUSH
2220: LD_INT 54
2222: PUSH
2223: LD_INT 55
2225: PUSH
2226: LD_INT 56
2228: PUSH
2229: LD_INT 60
2231: PUSH
2232: LD_INT 61
2234: PUSH
2235: LD_INT 62
2237: PUSH
2238: LD_INT 66
2240: PUSH
2241: LD_INT 67
2243: PUSH
2244: LD_INT 68
2246: PUSH
2247: LD_INT 81
2249: PUSH
2250: LD_INT 82
2252: PUSH
2253: LD_INT 83
2255: PUSH
2256: LD_INT 84
2258: PUSH
2259: LD_INT 85
2261: PUSH
2262: LD_INT 87
2264: PUSH
2265: LD_INT 88
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: ST_TO_ADDR
2324: GO 2557
2326: LD_INT 3
2328: DOUBLE
2329: EQUAL
2330: IFTRUE 2334
2332: GO 2556
2334: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2335: LD_ADDR_VAR 0 4
2339: PUSH
2340: LD_INT 46
2342: PUSH
2343: LD_INT 47
2345: PUSH
2346: LD_INT 1
2348: PUSH
2349: LD_INT 2
2351: PUSH
2352: LD_INT 82
2354: PUSH
2355: LD_INT 83
2357: PUSH
2358: LD_INT 84
2360: PUSH
2361: LD_INT 85
2363: PUSH
2364: LD_INT 86
2366: PUSH
2367: LD_INT 11
2369: PUSH
2370: LD_INT 9
2372: PUSH
2373: LD_INT 20
2375: PUSH
2376: LD_INT 19
2378: PUSH
2379: LD_INT 21
2381: PUSH
2382: LD_INT 24
2384: PUSH
2385: LD_INT 22
2387: PUSH
2388: LD_INT 25
2390: PUSH
2391: LD_INT 28
2393: PUSH
2394: LD_INT 29
2396: PUSH
2397: LD_INT 30
2399: PUSH
2400: LD_INT 31
2402: PUSH
2403: LD_INT 37
2405: PUSH
2406: LD_INT 38
2408: PUSH
2409: LD_INT 32
2411: PUSH
2412: LD_INT 27
2414: PUSH
2415: LD_INT 33
2417: PUSH
2418: LD_INT 69
2420: PUSH
2421: LD_INT 39
2423: PUSH
2424: LD_INT 34
2426: PUSH
2427: LD_INT 40
2429: PUSH
2430: LD_INT 71
2432: PUSH
2433: LD_INT 23
2435: PUSH
2436: LD_INT 44
2438: PUSH
2439: LD_INT 48
2441: PUSH
2442: LD_INT 49
2444: PUSH
2445: LD_INT 50
2447: PUSH
2448: LD_INT 51
2450: PUSH
2451: LD_INT 52
2453: PUSH
2454: LD_INT 53
2456: PUSH
2457: LD_INT 54
2459: PUSH
2460: LD_INT 55
2462: PUSH
2463: LD_INT 56
2465: PUSH
2466: LD_INT 57
2468: PUSH
2469: LD_INT 58
2471: PUSH
2472: LD_INT 59
2474: PUSH
2475: LD_INT 63
2477: PUSH
2478: LD_INT 64
2480: PUSH
2481: LD_INT 65
2483: PUSH
2484: LD_INT 82
2486: PUSH
2487: LD_INT 83
2489: PUSH
2490: LD_INT 84
2492: PUSH
2493: LD_INT 85
2495: PUSH
2496: LD_INT 86
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: ST_TO_ADDR
2554: GO 2557
2556: POP
// if state > - 1 and state < 3 then
2557: LD_VAR 0 3
2561: PUSH
2562: LD_INT 1
2564: NEG
2565: GREATER
2566: PUSH
2567: LD_VAR 0 3
2571: PUSH
2572: LD_INT 3
2574: LESS
2575: AND
2576: IFFALSE 2633
// for i in result do
2578: LD_ADDR_VAR 0 5
2582: PUSH
2583: LD_VAR 0 4
2587: PUSH
2588: FOR_IN
2589: IFFALSE 2631
// if GetTech ( i , side ) <> state then
2591: LD_VAR 0 5
2595: PPUSH
2596: LD_VAR 0 1
2600: PPUSH
2601: CALL_OW 321
2605: PUSH
2606: LD_VAR 0 3
2610: NONEQUAL
2611: IFFALSE 2629
// result := result diff i ;
2613: LD_ADDR_VAR 0 4
2617: PUSH
2618: LD_VAR 0 4
2622: PUSH
2623: LD_VAR 0 5
2627: DIFF
2628: ST_TO_ADDR
2629: GO 2588
2631: POP
2632: POP
// end ;
2633: LD_VAR 0 4
2637: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2638: LD_INT 0
2640: PPUSH
2641: PPUSH
2642: PPUSH
// result := true ;
2643: LD_ADDR_VAR 0 3
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2651: LD_ADDR_VAR 0 5
2655: PUSH
2656: LD_VAR 0 2
2660: PPUSH
2661: CALL_OW 480
2665: ST_TO_ADDR
// if not tmp then
2666: LD_VAR 0 5
2670: NOT
2671: IFFALSE 2675
// exit ;
2673: GO 2724
// for i in tmp do
2675: LD_ADDR_VAR 0 4
2679: PUSH
2680: LD_VAR 0 5
2684: PUSH
2685: FOR_IN
2686: IFFALSE 2722
// if GetTech ( i , side ) <> state_researched then
2688: LD_VAR 0 4
2692: PPUSH
2693: LD_VAR 0 1
2697: PPUSH
2698: CALL_OW 321
2702: PUSH
2703: LD_INT 2
2705: NONEQUAL
2706: IFFALSE 2720
// begin result := false ;
2708: LD_ADDR_VAR 0 3
2712: PUSH
2713: LD_INT 0
2715: ST_TO_ADDR
// exit ;
2716: POP
2717: POP
2718: GO 2724
// end ;
2720: GO 2685
2722: POP
2723: POP
// end ;
2724: LD_VAR 0 3
2728: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2729: LD_INT 0
2731: PPUSH
2732: PPUSH
2733: PPUSH
2734: PPUSH
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2744: LD_VAR 0 1
2748: NOT
2749: PUSH
2750: LD_VAR 0 1
2754: PPUSH
2755: CALL_OW 257
2759: PUSH
2760: LD_INT 9
2762: NONEQUAL
2763: OR
2764: IFFALSE 2768
// exit ;
2766: GO 3341
// side := GetSide ( unit ) ;
2768: LD_ADDR_VAR 0 9
2772: PUSH
2773: LD_VAR 0 1
2777: PPUSH
2778: CALL_OW 255
2782: ST_TO_ADDR
// tech_space := tech_spacanom ;
2783: LD_ADDR_VAR 0 12
2787: PUSH
2788: LD_INT 29
2790: ST_TO_ADDR
// tech_time := tech_taurad ;
2791: LD_ADDR_VAR 0 13
2795: PUSH
2796: LD_INT 28
2798: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2799: LD_ADDR_VAR 0 11
2803: PUSH
2804: LD_VAR 0 1
2808: PPUSH
2809: CALL_OW 310
2813: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2814: LD_VAR 0 11
2818: PPUSH
2819: CALL_OW 247
2823: PUSH
2824: LD_INT 2
2826: EQUAL
2827: IFFALSE 2831
// exit ;
2829: GO 3341
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2831: LD_ADDR_VAR 0 8
2835: PUSH
2836: LD_INT 81
2838: PUSH
2839: LD_VAR 0 9
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: LD_INT 3
2850: PUSH
2851: LD_INT 21
2853: PUSH
2854: LD_INT 3
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: CALL_OW 69
2873: ST_TO_ADDR
// if not tmp then
2874: LD_VAR 0 8
2878: NOT
2879: IFFALSE 2883
// exit ;
2881: GO 3341
// if in_unit then
2883: LD_VAR 0 11
2887: IFFALSE 2911
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2889: LD_ADDR_VAR 0 10
2893: PUSH
2894: LD_VAR 0 8
2898: PPUSH
2899: LD_VAR 0 11
2903: PPUSH
2904: CALL_OW 74
2908: ST_TO_ADDR
2909: GO 2931
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2911: LD_ADDR_VAR 0 10
2915: PUSH
2916: LD_VAR 0 8
2920: PPUSH
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL_OW 74
2930: ST_TO_ADDR
// if not enemy then
2931: LD_VAR 0 10
2935: NOT
2936: IFFALSE 2940
// exit ;
2938: GO 3341
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2940: LD_VAR 0 11
2944: PUSH
2945: LD_VAR 0 11
2949: PPUSH
2950: LD_VAR 0 10
2954: PPUSH
2955: CALL_OW 296
2959: PUSH
2960: LD_INT 13
2962: GREATER
2963: AND
2964: PUSH
2965: LD_VAR 0 1
2969: PPUSH
2970: LD_VAR 0 10
2974: PPUSH
2975: CALL_OW 296
2979: PUSH
2980: LD_INT 12
2982: GREATER
2983: OR
2984: IFFALSE 2988
// exit ;
2986: GO 3341
// missile := [ 1 ] ;
2988: LD_ADDR_VAR 0 14
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: EMPTY
2997: LIST
2998: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2999: LD_VAR 0 9
3003: PPUSH
3004: LD_VAR 0 12
3008: PPUSH
3009: CALL_OW 325
3013: IFFALSE 3042
// missile := Replace ( missile , missile + 1 , 2 ) ;
3015: LD_ADDR_VAR 0 14
3019: PUSH
3020: LD_VAR 0 14
3024: PPUSH
3025: LD_VAR 0 14
3029: PUSH
3030: LD_INT 1
3032: PLUS
3033: PPUSH
3034: LD_INT 2
3036: PPUSH
3037: CALL_OW 1
3041: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3042: LD_VAR 0 9
3046: PPUSH
3047: LD_VAR 0 13
3051: PPUSH
3052: CALL_OW 325
3056: PUSH
3057: LD_VAR 0 10
3061: PPUSH
3062: CALL_OW 255
3066: PPUSH
3067: LD_VAR 0 13
3071: PPUSH
3072: CALL_OW 325
3076: NOT
3077: AND
3078: IFFALSE 3107
// missile := Replace ( missile , missile + 1 , 3 ) ;
3080: LD_ADDR_VAR 0 14
3084: PUSH
3085: LD_VAR 0 14
3089: PPUSH
3090: LD_VAR 0 14
3094: PUSH
3095: LD_INT 1
3097: PLUS
3098: PPUSH
3099: LD_INT 3
3101: PPUSH
3102: CALL_OW 1
3106: ST_TO_ADDR
// if missile < 2 then
3107: LD_VAR 0 14
3111: PUSH
3112: LD_INT 2
3114: LESS
3115: IFFALSE 3119
// exit ;
3117: GO 3341
// x := GetX ( enemy ) ;
3119: LD_ADDR_VAR 0 4
3123: PUSH
3124: LD_VAR 0 10
3128: PPUSH
3129: CALL_OW 250
3133: ST_TO_ADDR
// y := GetY ( enemy ) ;
3134: LD_ADDR_VAR 0 5
3138: PUSH
3139: LD_VAR 0 10
3143: PPUSH
3144: CALL_OW 251
3148: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3149: LD_ADDR_VAR 0 6
3153: PUSH
3154: LD_VAR 0 4
3158: PUSH
3159: LD_INT 1
3161: NEG
3162: PPUSH
3163: LD_INT 1
3165: PPUSH
3166: CALL_OW 12
3170: PLUS
3171: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3172: LD_ADDR_VAR 0 7
3176: PUSH
3177: LD_VAR 0 5
3181: PUSH
3182: LD_INT 1
3184: NEG
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: CALL_OW 12
3193: PLUS
3194: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3195: LD_VAR 0 6
3199: PPUSH
3200: LD_VAR 0 7
3204: PPUSH
3205: CALL_OW 488
3209: NOT
3210: IFFALSE 3232
// begin _x := x ;
3212: LD_ADDR_VAR 0 6
3216: PUSH
3217: LD_VAR 0 4
3221: ST_TO_ADDR
// _y := y ;
3222: LD_ADDR_VAR 0 7
3226: PUSH
3227: LD_VAR 0 5
3231: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3232: LD_ADDR_VAR 0 3
3236: PUSH
3237: LD_INT 1
3239: PPUSH
3240: LD_VAR 0 14
3244: PPUSH
3245: CALL_OW 12
3249: ST_TO_ADDR
// case i of 1 :
3250: LD_VAR 0 3
3254: PUSH
3255: LD_INT 1
3257: DOUBLE
3258: EQUAL
3259: IFTRUE 3263
3261: GO 3280
3263: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3264: LD_VAR 0 1
3268: PPUSH
3269: LD_VAR 0 10
3273: PPUSH
3274: CALL_OW 115
3278: GO 3341
3280: LD_INT 2
3282: DOUBLE
3283: EQUAL
3284: IFTRUE 3288
3286: GO 3310
3288: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3289: LD_VAR 0 1
3293: PPUSH
3294: LD_VAR 0 6
3298: PPUSH
3299: LD_VAR 0 7
3303: PPUSH
3304: CALL_OW 153
3308: GO 3341
3310: LD_INT 3
3312: DOUBLE
3313: EQUAL
3314: IFTRUE 3318
3316: GO 3340
3318: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3319: LD_VAR 0 1
3323: PPUSH
3324: LD_VAR 0 6
3328: PPUSH
3329: LD_VAR 0 7
3333: PPUSH
3334: CALL_OW 154
3338: GO 3341
3340: POP
// end ;
3341: LD_VAR 0 2
3345: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3346: LD_INT 0
3348: PPUSH
3349: PPUSH
3350: PPUSH
3351: PPUSH
3352: PPUSH
3353: PPUSH
// if not unit or not building then
3354: LD_VAR 0 1
3358: NOT
3359: PUSH
3360: LD_VAR 0 2
3364: NOT
3365: OR
3366: IFFALSE 3370
// exit ;
3368: GO 3528
// x := GetX ( building ) ;
3370: LD_ADDR_VAR 0 5
3374: PUSH
3375: LD_VAR 0 2
3379: PPUSH
3380: CALL_OW 250
3384: ST_TO_ADDR
// y := GetY ( building ) ;
3385: LD_ADDR_VAR 0 6
3389: PUSH
3390: LD_VAR 0 2
3394: PPUSH
3395: CALL_OW 251
3399: ST_TO_ADDR
// for i = 0 to 5 do
3400: LD_ADDR_VAR 0 4
3404: PUSH
3405: DOUBLE
3406: LD_INT 0
3408: DEC
3409: ST_TO_ADDR
3410: LD_INT 5
3412: PUSH
3413: FOR_TO
3414: IFFALSE 3526
// begin _x := ShiftX ( x , i , 3 ) ;
3416: LD_ADDR_VAR 0 7
3420: PUSH
3421: LD_VAR 0 5
3425: PPUSH
3426: LD_VAR 0 4
3430: PPUSH
3431: LD_INT 3
3433: PPUSH
3434: CALL_OW 272
3438: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3439: LD_ADDR_VAR 0 8
3443: PUSH
3444: LD_VAR 0 6
3448: PPUSH
3449: LD_VAR 0 4
3453: PPUSH
3454: LD_INT 3
3456: PPUSH
3457: CALL_OW 273
3461: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3462: LD_VAR 0 7
3466: PPUSH
3467: LD_VAR 0 8
3471: PPUSH
3472: CALL_OW 488
3476: NOT
3477: IFFALSE 3481
// continue ;
3479: GO 3413
// if HexInfo ( _x , _y ) = 0 then
3481: LD_VAR 0 7
3485: PPUSH
3486: LD_VAR 0 8
3490: PPUSH
3491: CALL_OW 428
3495: PUSH
3496: LD_INT 0
3498: EQUAL
3499: IFFALSE 3524
// begin ComMoveXY ( unit , _x , _y ) ;
3501: LD_VAR 0 1
3505: PPUSH
3506: LD_VAR 0 7
3510: PPUSH
3511: LD_VAR 0 8
3515: PPUSH
3516: CALL_OW 111
// exit ;
3520: POP
3521: POP
3522: GO 3528
// end ; end ;
3524: GO 3413
3526: POP
3527: POP
// end ;
3528: LD_VAR 0 3
3532: RET
// export function ScanBase ( side , base_area ) ; begin
3533: LD_INT 0
3535: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3536: LD_ADDR_VAR 0 3
3540: PUSH
3541: LD_VAR 0 2
3545: PPUSH
3546: LD_INT 81
3548: PUSH
3549: LD_VAR 0 1
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PPUSH
3558: CALL_OW 70
3562: ST_TO_ADDR
// end ;
3563: LD_VAR 0 3
3567: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3568: LD_INT 0
3570: PPUSH
3571: PPUSH
3572: PPUSH
3573: PPUSH
// result := false ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: LD_INT 0
3581: ST_TO_ADDR
// side := GetSide ( unit ) ;
3582: LD_ADDR_VAR 0 3
3586: PUSH
3587: LD_VAR 0 1
3591: PPUSH
3592: CALL_OW 255
3596: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3597: LD_ADDR_VAR 0 4
3601: PUSH
3602: LD_VAR 0 1
3606: PPUSH
3607: CALL_OW 248
3611: ST_TO_ADDR
// case nat of 1 :
3612: LD_VAR 0 4
3616: PUSH
3617: LD_INT 1
3619: DOUBLE
3620: EQUAL
3621: IFTRUE 3625
3623: GO 3636
3625: POP
// tech := tech_lassight ; 2 :
3626: LD_ADDR_VAR 0 5
3630: PUSH
3631: LD_INT 12
3633: ST_TO_ADDR
3634: GO 3675
3636: LD_INT 2
3638: DOUBLE
3639: EQUAL
3640: IFTRUE 3644
3642: GO 3655
3644: POP
// tech := tech_mortar ; 3 :
3645: LD_ADDR_VAR 0 5
3649: PUSH
3650: LD_INT 41
3652: ST_TO_ADDR
3653: GO 3675
3655: LD_INT 3
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3674
3663: POP
// tech := tech_bazooka ; end ;
3664: LD_ADDR_VAR 0 5
3668: PUSH
3669: LD_INT 44
3671: ST_TO_ADDR
3672: GO 3675
3674: POP
// if Researched ( side , tech ) then
3675: LD_VAR 0 3
3679: PPUSH
3680: LD_VAR 0 5
3684: PPUSH
3685: CALL_OW 325
3689: IFFALSE 3716
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3691: LD_ADDR_VAR 0 2
3695: PUSH
3696: LD_INT 5
3698: PUSH
3699: LD_INT 8
3701: PUSH
3702: LD_INT 9
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: LD_VAR 0 4
3714: ARRAY
3715: ST_TO_ADDR
// end ;
3716: LD_VAR 0 2
3720: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3721: LD_INT 0
3723: PPUSH
3724: PPUSH
3725: PPUSH
// if not mines then
3726: LD_VAR 0 2
3730: NOT
3731: IFFALSE 3735
// exit ;
3733: GO 3879
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3735: LD_ADDR_VAR 0 5
3739: PUSH
3740: LD_INT 81
3742: PUSH
3743: LD_VAR 0 1
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 3
3754: PUSH
3755: LD_INT 21
3757: PUSH
3758: LD_INT 3
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 69
3777: ST_TO_ADDR
// for i in mines do
3778: LD_ADDR_VAR 0 4
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: FOR_IN
3789: IFFALSE 3877
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3791: LD_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: ARRAY
3799: PPUSH
3800: LD_VAR 0 4
3804: PUSH
3805: LD_INT 2
3807: ARRAY
3808: PPUSH
3809: CALL_OW 458
3813: NOT
3814: IFFALSE 3818
// continue ;
3816: GO 3788
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3818: LD_VAR 0 4
3822: PUSH
3823: LD_INT 1
3825: ARRAY
3826: PPUSH
3827: LD_VAR 0 4
3831: PUSH
3832: LD_INT 2
3834: ARRAY
3835: PPUSH
3836: CALL_OW 428
3840: PUSH
3841: LD_VAR 0 5
3845: IN
3846: IFFALSE 3875
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3848: LD_VAR 0 4
3852: PUSH
3853: LD_INT 1
3855: ARRAY
3856: PPUSH
3857: LD_VAR 0 4
3861: PUSH
3862: LD_INT 2
3864: ARRAY
3865: PPUSH
3866: LD_VAR 0 1
3870: PPUSH
3871: CALL_OW 456
// end ;
3875: GO 3788
3877: POP
3878: POP
// end ;
3879: LD_VAR 0 3
3883: RET
// export function Count ( array ) ; begin
3884: LD_INT 0
3886: PPUSH
// result := array + 0 ;
3887: LD_ADDR_VAR 0 2
3891: PUSH
3892: LD_VAR 0 1
3896: PUSH
3897: LD_INT 0
3899: PLUS
3900: ST_TO_ADDR
// end ;
3901: LD_VAR 0 2
3905: RET
// export function IsEmpty ( building ) ; begin
3906: LD_INT 0
3908: PPUSH
// if not building then
3909: LD_VAR 0 1
3913: NOT
3914: IFFALSE 3918
// exit ;
3916: GO 3961
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3918: LD_ADDR_VAR 0 2
3922: PUSH
3923: LD_VAR 0 1
3927: PUSH
3928: LD_INT 22
3930: PUSH
3931: LD_VAR 0 1
3935: PPUSH
3936: CALL_OW 255
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: PUSH
3945: LD_INT 58
3947: PUSH
3948: EMPTY
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 69
3959: IN
3960: ST_TO_ADDR
// end ;
3961: LD_VAR 0 2
3965: RET
// export function IsNotFull ( building ) ; var places ; begin
3966: LD_INT 0
3968: PPUSH
3969: PPUSH
// if not building then
3970: LD_VAR 0 1
3974: NOT
3975: IFFALSE 3979
// exit ;
3977: GO 4007
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3979: LD_ADDR_VAR 0 2
3983: PUSH
3984: LD_VAR 0 1
3988: PPUSH
3989: LD_INT 3
3991: PUSH
3992: LD_INT 62
3994: PUSH
3995: EMPTY
3996: LIST
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PPUSH
4002: CALL_OW 72
4006: ST_TO_ADDR
// end ;
4007: LD_VAR 0 2
4011: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4012: LD_INT 0
4014: PPUSH
4015: PPUSH
4016: PPUSH
4017: PPUSH
// tmp := [ ] ;
4018: LD_ADDR_VAR 0 3
4022: PUSH
4023: EMPTY
4024: ST_TO_ADDR
// list := [ ] ;
4025: LD_ADDR_VAR 0 5
4029: PUSH
4030: EMPTY
4031: ST_TO_ADDR
// for i = 16 to 25 do
4032: LD_ADDR_VAR 0 4
4036: PUSH
4037: DOUBLE
4038: LD_INT 16
4040: DEC
4041: ST_TO_ADDR
4042: LD_INT 25
4044: PUSH
4045: FOR_TO
4046: IFFALSE 4119
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4048: LD_ADDR_VAR 0 3
4052: PUSH
4053: LD_VAR 0 3
4057: PUSH
4058: LD_INT 22
4060: PUSH
4061: LD_VAR 0 1
4065: PPUSH
4066: CALL_OW 255
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 91
4077: PUSH
4078: LD_VAR 0 1
4082: PUSH
4083: LD_INT 6
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: LIST
4090: PUSH
4091: LD_INT 30
4093: PUSH
4094: LD_VAR 0 4
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: EMPTY
4109: LIST
4110: PPUSH
4111: CALL_OW 69
4115: ADD
4116: ST_TO_ADDR
4117: GO 4045
4119: POP
4120: POP
// for i = 1 to tmp do
4121: LD_ADDR_VAR 0 4
4125: PUSH
4126: DOUBLE
4127: LD_INT 1
4129: DEC
4130: ST_TO_ADDR
4131: LD_VAR 0 3
4135: PUSH
4136: FOR_TO
4137: IFFALSE 4225
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4139: LD_ADDR_VAR 0 5
4143: PUSH
4144: LD_VAR 0 5
4148: PUSH
4149: LD_VAR 0 3
4153: PUSH
4154: LD_VAR 0 4
4158: ARRAY
4159: PPUSH
4160: CALL_OW 266
4164: PUSH
4165: LD_VAR 0 3
4169: PUSH
4170: LD_VAR 0 4
4174: ARRAY
4175: PPUSH
4176: CALL_OW 250
4180: PUSH
4181: LD_VAR 0 3
4185: PUSH
4186: LD_VAR 0 4
4190: ARRAY
4191: PPUSH
4192: CALL_OW 251
4196: PUSH
4197: LD_VAR 0 3
4201: PUSH
4202: LD_VAR 0 4
4206: ARRAY
4207: PPUSH
4208: CALL_OW 254
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: ADD
4222: ST_TO_ADDR
4223: GO 4136
4225: POP
4226: POP
// result := list ;
4227: LD_ADDR_VAR 0 2
4231: PUSH
4232: LD_VAR 0 5
4236: ST_TO_ADDR
// end ;
4237: LD_VAR 0 2
4241: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4242: LD_INT 0
4244: PPUSH
4245: PPUSH
4246: PPUSH
4247: PPUSH
4248: PPUSH
4249: PPUSH
4250: PPUSH
// if not factory then
4251: LD_VAR 0 1
4255: NOT
4256: IFFALSE 4260
// exit ;
4258: GO 4853
// if control = control_apeman then
4260: LD_VAR 0 4
4264: PUSH
4265: LD_INT 5
4267: EQUAL
4268: IFFALSE 4377
// begin tmp := UnitsInside ( factory ) ;
4270: LD_ADDR_VAR 0 8
4274: PUSH
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 313
4284: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4285: LD_VAR 0 8
4289: PPUSH
4290: LD_INT 25
4292: PUSH
4293: LD_INT 12
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PPUSH
4300: CALL_OW 72
4304: NOT
4305: IFFALSE 4315
// control := control_manual ;
4307: LD_ADDR_VAR 0 4
4311: PUSH
4312: LD_INT 1
4314: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4315: LD_ADDR_VAR 0 8
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: CALL 4012 0 1
4329: ST_TO_ADDR
// if tmp then
4330: LD_VAR 0 8
4334: IFFALSE 4377
// begin for i in tmp do
4336: LD_ADDR_VAR 0 7
4340: PUSH
4341: LD_VAR 0 8
4345: PUSH
4346: FOR_IN
4347: IFFALSE 4375
// if i [ 1 ] = b_ext_radio then
4349: LD_VAR 0 7
4353: PUSH
4354: LD_INT 1
4356: ARRAY
4357: PUSH
4358: LD_INT 22
4360: EQUAL
4361: IFFALSE 4373
// begin control := control_remote ;
4363: LD_ADDR_VAR 0 4
4367: PUSH
4368: LD_INT 2
4370: ST_TO_ADDR
// break ;
4371: GO 4375
// end ;
4373: GO 4346
4375: POP
4376: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4377: LD_VAR 0 1
4381: PPUSH
4382: LD_VAR 0 2
4386: PPUSH
4387: LD_VAR 0 3
4391: PPUSH
4392: LD_VAR 0 4
4396: PPUSH
4397: LD_VAR 0 5
4401: PPUSH
4402: CALL_OW 448
4406: IFFALSE 4441
// begin result := [ chassis , engine , control , weapon ] ;
4408: LD_ADDR_VAR 0 6
4412: PUSH
4413: LD_VAR 0 2
4417: PUSH
4418: LD_VAR 0 3
4422: PUSH
4423: LD_VAR 0 4
4427: PUSH
4428: LD_VAR 0 5
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: ST_TO_ADDR
// exit ;
4439: GO 4853
// end ; _chassis := AvailableChassisList ( factory ) ;
4441: LD_ADDR_VAR 0 9
4445: PUSH
4446: LD_VAR 0 1
4450: PPUSH
4451: CALL_OW 475
4455: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4456: LD_ADDR_VAR 0 11
4460: PUSH
4461: LD_VAR 0 1
4465: PPUSH
4466: CALL_OW 476
4470: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4471: LD_ADDR_VAR 0 12
4475: PUSH
4476: LD_VAR 0 1
4480: PPUSH
4481: CALL_OW 477
4485: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4486: LD_ADDR_VAR 0 10
4490: PUSH
4491: LD_VAR 0 1
4495: PPUSH
4496: CALL_OW 478
4500: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4501: LD_VAR 0 9
4505: NOT
4506: PUSH
4507: LD_VAR 0 11
4511: NOT
4512: OR
4513: PUSH
4514: LD_VAR 0 12
4518: NOT
4519: OR
4520: PUSH
4521: LD_VAR 0 10
4525: NOT
4526: OR
4527: IFFALSE 4562
// begin result := [ chassis , engine , control , weapon ] ;
4529: LD_ADDR_VAR 0 6
4533: PUSH
4534: LD_VAR 0 2
4538: PUSH
4539: LD_VAR 0 3
4543: PUSH
4544: LD_VAR 0 4
4548: PUSH
4549: LD_VAR 0 5
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: ST_TO_ADDR
// exit ;
4560: GO 4853
// end ; if not chassis in _chassis then
4562: LD_VAR 0 2
4566: PUSH
4567: LD_VAR 0 9
4571: IN
4572: NOT
4573: IFFALSE 4599
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4575: LD_ADDR_VAR 0 2
4579: PUSH
4580: LD_VAR 0 9
4584: PUSH
4585: LD_INT 1
4587: PPUSH
4588: LD_VAR 0 9
4592: PPUSH
4593: CALL_OW 12
4597: ARRAY
4598: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4599: LD_VAR 0 2
4603: PPUSH
4604: LD_VAR 0 3
4608: PPUSH
4609: CALL 4858 0 2
4613: NOT
4614: IFFALSE 4673
// repeat engine := _engine [ 1 ] ;
4616: LD_ADDR_VAR 0 3
4620: PUSH
4621: LD_VAR 0 11
4625: PUSH
4626: LD_INT 1
4628: ARRAY
4629: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4630: LD_ADDR_VAR 0 11
4634: PUSH
4635: LD_VAR 0 11
4639: PPUSH
4640: LD_INT 1
4642: PPUSH
4643: CALL_OW 3
4647: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4648: LD_VAR 0 2
4652: PPUSH
4653: LD_VAR 0 3
4657: PPUSH
4658: CALL 4858 0 2
4662: PUSH
4663: LD_VAR 0 11
4667: PUSH
4668: EMPTY
4669: EQUAL
4670: OR
4671: IFFALSE 4616
// if not control in _control then
4673: LD_VAR 0 4
4677: PUSH
4678: LD_VAR 0 12
4682: IN
4683: NOT
4684: IFFALSE 4710
// control := _control [ rand ( 1 , _control ) ] ;
4686: LD_ADDR_VAR 0 4
4690: PUSH
4691: LD_VAR 0 12
4695: PUSH
4696: LD_INT 1
4698: PPUSH
4699: LD_VAR 0 12
4703: PPUSH
4704: CALL_OW 12
4708: ARRAY
4709: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_VAR 0 5
4719: PPUSH
4720: CALL 5078 0 2
4724: NOT
4725: IFFALSE 4784
// repeat weapon := _weapon [ 1 ] ;
4727: LD_ADDR_VAR 0 5
4731: PUSH
4732: LD_VAR 0 10
4736: PUSH
4737: LD_INT 1
4739: ARRAY
4740: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4741: LD_ADDR_VAR 0 10
4745: PUSH
4746: LD_VAR 0 10
4750: PPUSH
4751: LD_INT 1
4753: PPUSH
4754: CALL_OW 3
4758: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4759: LD_VAR 0 2
4763: PPUSH
4764: LD_VAR 0 5
4768: PPUSH
4769: CALL 5078 0 2
4773: PUSH
4774: LD_VAR 0 10
4778: PUSH
4779: EMPTY
4780: EQUAL
4781: OR
4782: IFFALSE 4727
// result := [ ] ;
4784: LD_ADDR_VAR 0 6
4788: PUSH
4789: EMPTY
4790: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4791: LD_VAR 0 1
4795: PPUSH
4796: LD_VAR 0 2
4800: PPUSH
4801: LD_VAR 0 3
4805: PPUSH
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_VAR 0 5
4815: PPUSH
4816: CALL_OW 448
4820: IFFALSE 4853
// result := [ chassis , engine , control , weapon ] ;
4822: LD_ADDR_VAR 0 6
4826: PUSH
4827: LD_VAR 0 2
4831: PUSH
4832: LD_VAR 0 3
4836: PUSH
4837: LD_VAR 0 4
4841: PUSH
4842: LD_VAR 0 5
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: ST_TO_ADDR
// end ;
4853: LD_VAR 0 6
4857: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4858: LD_INT 0
4860: PPUSH
// if not chassis or not engine then
4861: LD_VAR 0 1
4865: NOT
4866: PUSH
4867: LD_VAR 0 2
4871: NOT
4872: OR
4873: IFFALSE 4877
// exit ;
4875: GO 5073
// case engine of engine_solar :
4877: LD_VAR 0 2
4881: PUSH
4882: LD_INT 2
4884: DOUBLE
4885: EQUAL
4886: IFTRUE 4890
4888: GO 4928
4890: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4891: LD_ADDR_VAR 0 3
4895: PUSH
4896: LD_INT 11
4898: PUSH
4899: LD_INT 12
4901: PUSH
4902: LD_INT 13
4904: PUSH
4905: LD_INT 14
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: LD_INT 3
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: ST_TO_ADDR
4926: GO 5057
4928: LD_INT 1
4930: DOUBLE
4931: EQUAL
4932: IFTRUE 4936
4934: GO 4998
4936: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4937: LD_ADDR_VAR 0 3
4941: PUSH
4942: LD_INT 11
4944: PUSH
4945: LD_INT 12
4947: PUSH
4948: LD_INT 13
4950: PUSH
4951: LD_INT 14
4953: PUSH
4954: LD_INT 1
4956: PUSH
4957: LD_INT 2
4959: PUSH
4960: LD_INT 3
4962: PUSH
4963: LD_INT 4
4965: PUSH
4966: LD_INT 5
4968: PUSH
4969: LD_INT 21
4971: PUSH
4972: LD_INT 23
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 24
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: ST_TO_ADDR
4996: GO 5057
4998: LD_INT 3
5000: DOUBLE
5001: EQUAL
5002: IFTRUE 5006
5004: GO 5056
5006: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5007: LD_ADDR_VAR 0 3
5011: PUSH
5012: LD_INT 13
5014: PUSH
5015: LD_INT 14
5017: PUSH
5018: LD_INT 2
5020: PUSH
5021: LD_INT 3
5023: PUSH
5024: LD_INT 4
5026: PUSH
5027: LD_INT 5
5029: PUSH
5030: LD_INT 21
5032: PUSH
5033: LD_INT 22
5035: PUSH
5036: LD_INT 23
5038: PUSH
5039: LD_INT 24
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: ST_TO_ADDR
5054: GO 5057
5056: POP
// result := ( chassis in result ) ;
5057: LD_ADDR_VAR 0 3
5061: PUSH
5062: LD_VAR 0 1
5066: PUSH
5067: LD_VAR 0 3
5071: IN
5072: ST_TO_ADDR
// end ;
5073: LD_VAR 0 3
5077: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5078: LD_INT 0
5080: PPUSH
// if not chassis or not weapon then
5081: LD_VAR 0 1
5085: NOT
5086: PUSH
5087: LD_VAR 0 2
5091: NOT
5092: OR
5093: IFFALSE 5097
// exit ;
5095: GO 6157
// case weapon of us_machine_gun :
5097: LD_VAR 0 2
5101: PUSH
5102: LD_INT 2
5104: DOUBLE
5105: EQUAL
5106: IFTRUE 5110
5108: GO 5140
5110: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5111: LD_ADDR_VAR 0 3
5115: PUSH
5116: LD_INT 1
5118: PUSH
5119: LD_INT 2
5121: PUSH
5122: LD_INT 3
5124: PUSH
5125: LD_INT 4
5127: PUSH
5128: LD_INT 5
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: ST_TO_ADDR
5138: GO 6141
5140: LD_INT 3
5142: DOUBLE
5143: EQUAL
5144: IFTRUE 5148
5146: GO 5178
5148: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5149: LD_ADDR_VAR 0 3
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: LD_INT 2
5159: PUSH
5160: LD_INT 3
5162: PUSH
5163: LD_INT 4
5165: PUSH
5166: LD_INT 5
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: ST_TO_ADDR
5176: GO 6141
5178: LD_INT 11
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5216
5186: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5187: LD_ADDR_VAR 0 3
5191: PUSH
5192: LD_INT 1
5194: PUSH
5195: LD_INT 2
5197: PUSH
5198: LD_INT 3
5200: PUSH
5201: LD_INT 4
5203: PUSH
5204: LD_INT 5
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: ST_TO_ADDR
5214: GO 6141
5216: LD_INT 4
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5250
5224: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5225: LD_ADDR_VAR 0 3
5229: PUSH
5230: LD_INT 2
5232: PUSH
5233: LD_INT 3
5235: PUSH
5236: LD_INT 4
5238: PUSH
5239: LD_INT 5
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: ST_TO_ADDR
5248: GO 6141
5250: LD_INT 5
5252: DOUBLE
5253: EQUAL
5254: IFTRUE 5258
5256: GO 5284
5258: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5259: LD_ADDR_VAR 0 3
5263: PUSH
5264: LD_INT 2
5266: PUSH
5267: LD_INT 3
5269: PUSH
5270: LD_INT 4
5272: PUSH
5273: LD_INT 5
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: ST_TO_ADDR
5282: GO 6141
5284: LD_INT 9
5286: DOUBLE
5287: EQUAL
5288: IFTRUE 5292
5290: GO 5318
5292: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5293: LD_ADDR_VAR 0 3
5297: PUSH
5298: LD_INT 2
5300: PUSH
5301: LD_INT 3
5303: PUSH
5304: LD_INT 4
5306: PUSH
5307: LD_INT 5
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: ST_TO_ADDR
5316: GO 6141
5318: LD_INT 7
5320: DOUBLE
5321: EQUAL
5322: IFTRUE 5326
5324: GO 5352
5326: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: LD_INT 2
5334: PUSH
5335: LD_INT 3
5337: PUSH
5338: LD_INT 4
5340: PUSH
5341: LD_INT 5
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: ST_TO_ADDR
5350: GO 6141
5352: LD_INT 12
5354: DOUBLE
5355: EQUAL
5356: IFTRUE 5360
5358: GO 5386
5360: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5361: LD_ADDR_VAR 0 3
5365: PUSH
5366: LD_INT 2
5368: PUSH
5369: LD_INT 3
5371: PUSH
5372: LD_INT 4
5374: PUSH
5375: LD_INT 5
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: ST_TO_ADDR
5384: GO 6141
5386: LD_INT 13
5388: DOUBLE
5389: EQUAL
5390: IFTRUE 5394
5392: GO 5420
5394: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5395: LD_ADDR_VAR 0 3
5399: PUSH
5400: LD_INT 2
5402: PUSH
5403: LD_INT 3
5405: PUSH
5406: LD_INT 4
5408: PUSH
5409: LD_INT 5
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: ST_TO_ADDR
5418: GO 6141
5420: LD_INT 14
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5446
5428: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5429: LD_ADDR_VAR 0 3
5433: PUSH
5434: LD_INT 4
5436: PUSH
5437: LD_INT 5
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: ST_TO_ADDR
5444: GO 6141
5446: LD_INT 6
5448: DOUBLE
5449: EQUAL
5450: IFTRUE 5454
5452: GO 5472
5454: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5455: LD_ADDR_VAR 0 3
5459: PUSH
5460: LD_INT 4
5462: PUSH
5463: LD_INT 5
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: ST_TO_ADDR
5470: GO 6141
5472: LD_INT 10
5474: DOUBLE
5475: EQUAL
5476: IFTRUE 5480
5478: GO 5498
5480: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5481: LD_ADDR_VAR 0 3
5485: PUSH
5486: LD_INT 4
5488: PUSH
5489: LD_INT 5
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: ST_TO_ADDR
5496: GO 6141
5498: LD_INT 22
5500: DOUBLE
5501: EQUAL
5502: IFTRUE 5506
5504: GO 5532
5506: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5507: LD_ADDR_VAR 0 3
5511: PUSH
5512: LD_INT 11
5514: PUSH
5515: LD_INT 12
5517: PUSH
5518: LD_INT 13
5520: PUSH
5521: LD_INT 14
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: ST_TO_ADDR
5530: GO 6141
5532: LD_INT 23
5534: DOUBLE
5535: EQUAL
5536: IFTRUE 5540
5538: GO 5566
5540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5541: LD_ADDR_VAR 0 3
5545: PUSH
5546: LD_INT 11
5548: PUSH
5549: LD_INT 12
5551: PUSH
5552: LD_INT 13
5554: PUSH
5555: LD_INT 14
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: ST_TO_ADDR
5564: GO 6141
5566: LD_INT 24
5568: DOUBLE
5569: EQUAL
5570: IFTRUE 5574
5572: GO 5600
5574: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5575: LD_ADDR_VAR 0 3
5579: PUSH
5580: LD_INT 11
5582: PUSH
5583: LD_INT 12
5585: PUSH
5586: LD_INT 13
5588: PUSH
5589: LD_INT 14
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: ST_TO_ADDR
5598: GO 6141
5600: LD_INT 30
5602: DOUBLE
5603: EQUAL
5604: IFTRUE 5608
5606: GO 5634
5608: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5609: LD_ADDR_VAR 0 3
5613: PUSH
5614: LD_INT 11
5616: PUSH
5617: LD_INT 12
5619: PUSH
5620: LD_INT 13
5622: PUSH
5623: LD_INT 14
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: ST_TO_ADDR
5632: GO 6141
5634: LD_INT 25
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5660
5642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5643: LD_ADDR_VAR 0 3
5647: PUSH
5648: LD_INT 13
5650: PUSH
5651: LD_INT 14
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: ST_TO_ADDR
5658: GO 6141
5660: LD_INT 27
5662: DOUBLE
5663: EQUAL
5664: IFTRUE 5668
5666: GO 5686
5668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5669: LD_ADDR_VAR 0 3
5673: PUSH
5674: LD_INT 13
5676: PUSH
5677: LD_INT 14
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: ST_TO_ADDR
5684: GO 6141
5686: LD_INT 92
5688: DOUBLE
5689: EQUAL
5690: IFTRUE 5694
5692: GO 5720
5694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5695: LD_ADDR_VAR 0 3
5699: PUSH
5700: LD_INT 11
5702: PUSH
5703: LD_INT 12
5705: PUSH
5706: LD_INT 13
5708: PUSH
5709: LD_INT 14
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: ST_TO_ADDR
5718: GO 6141
5720: LD_INT 28
5722: DOUBLE
5723: EQUAL
5724: IFTRUE 5728
5726: GO 5746
5728: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5729: LD_ADDR_VAR 0 3
5733: PUSH
5734: LD_INT 13
5736: PUSH
5737: LD_INT 14
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: ST_TO_ADDR
5744: GO 6141
5746: LD_INT 29
5748: DOUBLE
5749: EQUAL
5750: IFTRUE 5754
5752: GO 5772
5754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_INT 13
5762: PUSH
5763: LD_INT 14
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: ST_TO_ADDR
5770: GO 6141
5772: LD_INT 31
5774: DOUBLE
5775: EQUAL
5776: IFTRUE 5780
5778: GO 5798
5780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5781: LD_ADDR_VAR 0 3
5785: PUSH
5786: LD_INT 13
5788: PUSH
5789: LD_INT 14
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: ST_TO_ADDR
5796: GO 6141
5798: LD_INT 26
5800: DOUBLE
5801: EQUAL
5802: IFTRUE 5806
5804: GO 5824
5806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5807: LD_ADDR_VAR 0 3
5811: PUSH
5812: LD_INT 13
5814: PUSH
5815: LD_INT 14
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: ST_TO_ADDR
5822: GO 6141
5824: LD_INT 42
5826: DOUBLE
5827: EQUAL
5828: IFTRUE 5832
5830: GO 5858
5832: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5833: LD_ADDR_VAR 0 3
5837: PUSH
5838: LD_INT 21
5840: PUSH
5841: LD_INT 22
5843: PUSH
5844: LD_INT 23
5846: PUSH
5847: LD_INT 24
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: ST_TO_ADDR
5856: GO 6141
5858: LD_INT 43
5860: DOUBLE
5861: EQUAL
5862: IFTRUE 5866
5864: GO 5892
5866: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_INT 21
5874: PUSH
5875: LD_INT 22
5877: PUSH
5878: LD_INT 23
5880: PUSH
5881: LD_INT 24
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: ST_TO_ADDR
5890: GO 6141
5892: LD_INT 44
5894: DOUBLE
5895: EQUAL
5896: IFTRUE 5900
5898: GO 5926
5900: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5901: LD_ADDR_VAR 0 3
5905: PUSH
5906: LD_INT 21
5908: PUSH
5909: LD_INT 22
5911: PUSH
5912: LD_INT 23
5914: PUSH
5915: LD_INT 24
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: ST_TO_ADDR
5924: GO 6141
5926: LD_INT 45
5928: DOUBLE
5929: EQUAL
5930: IFTRUE 5934
5932: GO 5960
5934: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5935: LD_ADDR_VAR 0 3
5939: PUSH
5940: LD_INT 21
5942: PUSH
5943: LD_INT 22
5945: PUSH
5946: LD_INT 23
5948: PUSH
5949: LD_INT 24
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: ST_TO_ADDR
5958: GO 6141
5960: LD_INT 49
5962: DOUBLE
5963: EQUAL
5964: IFTRUE 5968
5966: GO 5994
5968: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5969: LD_ADDR_VAR 0 3
5973: PUSH
5974: LD_INT 21
5976: PUSH
5977: LD_INT 22
5979: PUSH
5980: LD_INT 23
5982: PUSH
5983: LD_INT 24
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: ST_TO_ADDR
5992: GO 6141
5994: LD_INT 51
5996: DOUBLE
5997: EQUAL
5998: IFTRUE 6002
6000: GO 6028
6002: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6003: LD_ADDR_VAR 0 3
6007: PUSH
6008: LD_INT 21
6010: PUSH
6011: LD_INT 22
6013: PUSH
6014: LD_INT 23
6016: PUSH
6017: LD_INT 24
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: ST_TO_ADDR
6026: GO 6141
6028: LD_INT 52
6030: DOUBLE
6031: EQUAL
6032: IFTRUE 6036
6034: GO 6062
6036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6037: LD_ADDR_VAR 0 3
6041: PUSH
6042: LD_INT 21
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 23
6050: PUSH
6051: LD_INT 24
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: ST_TO_ADDR
6060: GO 6141
6062: LD_INT 53
6064: DOUBLE
6065: EQUAL
6066: IFTRUE 6070
6068: GO 6088
6070: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6071: LD_ADDR_VAR 0 3
6075: PUSH
6076: LD_INT 23
6078: PUSH
6079: LD_INT 24
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: ST_TO_ADDR
6086: GO 6141
6088: LD_INT 46
6090: DOUBLE
6091: EQUAL
6092: IFTRUE 6096
6094: GO 6114
6096: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6097: LD_ADDR_VAR 0 3
6101: PUSH
6102: LD_INT 23
6104: PUSH
6105: LD_INT 24
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: ST_TO_ADDR
6112: GO 6141
6114: LD_INT 47
6116: DOUBLE
6117: EQUAL
6118: IFTRUE 6122
6120: GO 6140
6122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6123: LD_ADDR_VAR 0 3
6127: PUSH
6128: LD_INT 23
6130: PUSH
6131: LD_INT 24
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: ST_TO_ADDR
6138: GO 6141
6140: POP
// result := ( chassis in result ) ;
6141: LD_ADDR_VAR 0 3
6145: PUSH
6146: LD_VAR 0 1
6150: PUSH
6151: LD_VAR 0 3
6155: IN
6156: ST_TO_ADDR
// end ;
6157: LD_VAR 0 3
6161: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6162: LD_INT 0
6164: PPUSH
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
6169: PPUSH
6170: PPUSH
// result := array ;
6171: LD_ADDR_VAR 0 5
6175: PUSH
6176: LD_VAR 0 1
6180: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6181: LD_VAR 0 1
6185: NOT
6186: PUSH
6187: LD_VAR 0 2
6191: NOT
6192: OR
6193: PUSH
6194: LD_VAR 0 3
6198: NOT
6199: OR
6200: PUSH
6201: LD_VAR 0 2
6205: PUSH
6206: LD_VAR 0 1
6210: GREATER
6211: OR
6212: PUSH
6213: LD_VAR 0 3
6217: PUSH
6218: LD_VAR 0 1
6222: GREATER
6223: OR
6224: IFFALSE 6228
// exit ;
6226: GO 6524
// if direction then
6228: LD_VAR 0 4
6232: IFFALSE 6296
// begin d := 1 ;
6234: LD_ADDR_VAR 0 9
6238: PUSH
6239: LD_INT 1
6241: ST_TO_ADDR
// if i_from > i_to then
6242: LD_VAR 0 2
6246: PUSH
6247: LD_VAR 0 3
6251: GREATER
6252: IFFALSE 6278
// length := ( array - i_from ) + i_to else
6254: LD_ADDR_VAR 0 11
6258: PUSH
6259: LD_VAR 0 1
6263: PUSH
6264: LD_VAR 0 2
6268: MINUS
6269: PUSH
6270: LD_VAR 0 3
6274: PLUS
6275: ST_TO_ADDR
6276: GO 6294
// length := i_to - i_from ;
6278: LD_ADDR_VAR 0 11
6282: PUSH
6283: LD_VAR 0 3
6287: PUSH
6288: LD_VAR 0 2
6292: MINUS
6293: ST_TO_ADDR
// end else
6294: GO 6357
// begin d := - 1 ;
6296: LD_ADDR_VAR 0 9
6300: PUSH
6301: LD_INT 1
6303: NEG
6304: ST_TO_ADDR
// if i_from > i_to then
6305: LD_VAR 0 2
6309: PUSH
6310: LD_VAR 0 3
6314: GREATER
6315: IFFALSE 6335
// length := i_from - i_to else
6317: LD_ADDR_VAR 0 11
6321: PUSH
6322: LD_VAR 0 2
6326: PUSH
6327: LD_VAR 0 3
6331: MINUS
6332: ST_TO_ADDR
6333: GO 6357
// length := ( array - i_to ) + i_from ;
6335: LD_ADDR_VAR 0 11
6339: PUSH
6340: LD_VAR 0 1
6344: PUSH
6345: LD_VAR 0 3
6349: MINUS
6350: PUSH
6351: LD_VAR 0 2
6355: PLUS
6356: ST_TO_ADDR
// end ; if not length then
6357: LD_VAR 0 11
6361: NOT
6362: IFFALSE 6366
// exit ;
6364: GO 6524
// tmp := array ;
6366: LD_ADDR_VAR 0 10
6370: PUSH
6371: LD_VAR 0 1
6375: ST_TO_ADDR
// for i = 1 to length do
6376: LD_ADDR_VAR 0 6
6380: PUSH
6381: DOUBLE
6382: LD_INT 1
6384: DEC
6385: ST_TO_ADDR
6386: LD_VAR 0 11
6390: PUSH
6391: FOR_TO
6392: IFFALSE 6512
// begin for j = 1 to array do
6394: LD_ADDR_VAR 0 7
6398: PUSH
6399: DOUBLE
6400: LD_INT 1
6402: DEC
6403: ST_TO_ADDR
6404: LD_VAR 0 1
6408: PUSH
6409: FOR_TO
6410: IFFALSE 6498
// begin k := j + d ;
6412: LD_ADDR_VAR 0 8
6416: PUSH
6417: LD_VAR 0 7
6421: PUSH
6422: LD_VAR 0 9
6426: PLUS
6427: ST_TO_ADDR
// if k > array then
6428: LD_VAR 0 8
6432: PUSH
6433: LD_VAR 0 1
6437: GREATER
6438: IFFALSE 6448
// k := 1 ;
6440: LD_ADDR_VAR 0 8
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// if not k then
6448: LD_VAR 0 8
6452: NOT
6453: IFFALSE 6465
// k := array ;
6455: LD_ADDR_VAR 0 8
6459: PUSH
6460: LD_VAR 0 1
6464: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6465: LD_ADDR_VAR 0 10
6469: PUSH
6470: LD_VAR 0 10
6474: PPUSH
6475: LD_VAR 0 8
6479: PPUSH
6480: LD_VAR 0 1
6484: PUSH
6485: LD_VAR 0 7
6489: ARRAY
6490: PPUSH
6491: CALL_OW 1
6495: ST_TO_ADDR
// end ;
6496: GO 6409
6498: POP
6499: POP
// array := tmp ;
6500: LD_ADDR_VAR 0 1
6504: PUSH
6505: LD_VAR 0 10
6509: ST_TO_ADDR
// end ;
6510: GO 6391
6512: POP
6513: POP
// result := array ;
6514: LD_ADDR_VAR 0 5
6518: PUSH
6519: LD_VAR 0 1
6523: ST_TO_ADDR
// end ;
6524: LD_VAR 0 5
6528: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6529: LD_INT 0
6531: PPUSH
6532: PPUSH
// result := 0 ;
6533: LD_ADDR_VAR 0 3
6537: PUSH
6538: LD_INT 0
6540: ST_TO_ADDR
// if not array or not value in array then
6541: LD_VAR 0 1
6545: NOT
6546: PUSH
6547: LD_VAR 0 2
6551: PUSH
6552: LD_VAR 0 1
6556: IN
6557: NOT
6558: OR
6559: IFFALSE 6563
// exit ;
6561: GO 6617
// for i = 1 to array do
6563: LD_ADDR_VAR 0 4
6567: PUSH
6568: DOUBLE
6569: LD_INT 1
6571: DEC
6572: ST_TO_ADDR
6573: LD_VAR 0 1
6577: PUSH
6578: FOR_TO
6579: IFFALSE 6615
// if value = array [ i ] then
6581: LD_VAR 0 2
6585: PUSH
6586: LD_VAR 0 1
6590: PUSH
6591: LD_VAR 0 4
6595: ARRAY
6596: EQUAL
6597: IFFALSE 6613
// begin result := i ;
6599: LD_ADDR_VAR 0 3
6603: PUSH
6604: LD_VAR 0 4
6608: ST_TO_ADDR
// exit ;
6609: POP
6610: POP
6611: GO 6617
// end ;
6613: GO 6578
6615: POP
6616: POP
// end ;
6617: LD_VAR 0 3
6621: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6622: LD_INT 0
6624: PPUSH
// vc_chassis := chassis ;
6625: LD_ADDR_OWVAR 37
6629: PUSH
6630: LD_VAR 0 1
6634: ST_TO_ADDR
// vc_engine := engine ;
6635: LD_ADDR_OWVAR 39
6639: PUSH
6640: LD_VAR 0 2
6644: ST_TO_ADDR
// vc_control := control ;
6645: LD_ADDR_OWVAR 38
6649: PUSH
6650: LD_VAR 0 3
6654: ST_TO_ADDR
// vc_weapon := weapon ;
6655: LD_ADDR_OWVAR 40
6659: PUSH
6660: LD_VAR 0 4
6664: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6665: LD_ADDR_OWVAR 41
6669: PUSH
6670: LD_VAR 0 5
6674: ST_TO_ADDR
// end ;
6675: LD_VAR 0 6
6679: RET
// export function WantPlant ( unit ) ; var task ; begin
6680: LD_INT 0
6682: PPUSH
6683: PPUSH
// result := false ;
6684: LD_ADDR_VAR 0 2
6688: PUSH
6689: LD_INT 0
6691: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6692: LD_ADDR_VAR 0 3
6696: PUSH
6697: LD_VAR 0 1
6701: PPUSH
6702: CALL_OW 437
6706: ST_TO_ADDR
// if task then
6707: LD_VAR 0 3
6711: IFFALSE 6739
// if task [ 1 ] [ 1 ] = p then
6713: LD_VAR 0 3
6717: PUSH
6718: LD_INT 1
6720: ARRAY
6721: PUSH
6722: LD_INT 1
6724: ARRAY
6725: PUSH
6726: LD_STRING p
6728: EQUAL
6729: IFFALSE 6739
// result := true ;
6731: LD_ADDR_VAR 0 2
6735: PUSH
6736: LD_INT 1
6738: ST_TO_ADDR
// end ;
6739: LD_VAR 0 2
6743: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6744: LD_INT 0
6746: PPUSH
6747: PPUSH
6748: PPUSH
6749: PPUSH
// if pos < 1 then
6750: LD_VAR 0 2
6754: PUSH
6755: LD_INT 1
6757: LESS
6758: IFFALSE 6762
// exit ;
6760: GO 7065
// if pos = 1 then
6762: LD_VAR 0 2
6766: PUSH
6767: LD_INT 1
6769: EQUAL
6770: IFFALSE 6803
// result := Replace ( arr , pos [ 1 ] , value ) else
6772: LD_ADDR_VAR 0 4
6776: PUSH
6777: LD_VAR 0 1
6781: PPUSH
6782: LD_VAR 0 2
6786: PUSH
6787: LD_INT 1
6789: ARRAY
6790: PPUSH
6791: LD_VAR 0 3
6795: PPUSH
6796: CALL_OW 1
6800: ST_TO_ADDR
6801: GO 7065
// begin tmp := arr ;
6803: LD_ADDR_VAR 0 6
6807: PUSH
6808: LD_VAR 0 1
6812: ST_TO_ADDR
// s_arr := [ tmp ] ;
6813: LD_ADDR_VAR 0 7
6817: PUSH
6818: LD_VAR 0 6
6822: PUSH
6823: EMPTY
6824: LIST
6825: ST_TO_ADDR
// for i = 1 to pos - 1 do
6826: LD_ADDR_VAR 0 5
6830: PUSH
6831: DOUBLE
6832: LD_INT 1
6834: DEC
6835: ST_TO_ADDR
6836: LD_VAR 0 2
6840: PUSH
6841: LD_INT 1
6843: MINUS
6844: PUSH
6845: FOR_TO
6846: IFFALSE 6891
// begin tmp := tmp [ pos [ i ] ] ;
6848: LD_ADDR_VAR 0 6
6852: PUSH
6853: LD_VAR 0 6
6857: PUSH
6858: LD_VAR 0 2
6862: PUSH
6863: LD_VAR 0 5
6867: ARRAY
6868: ARRAY
6869: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6870: LD_ADDR_VAR 0 7
6874: PUSH
6875: LD_VAR 0 7
6879: PUSH
6880: LD_VAR 0 6
6884: PUSH
6885: EMPTY
6886: LIST
6887: ADD
6888: ST_TO_ADDR
// end ;
6889: GO 6845
6891: POP
6892: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6893: LD_ADDR_VAR 0 6
6897: PUSH
6898: LD_VAR 0 6
6902: PPUSH
6903: LD_VAR 0 2
6907: PUSH
6908: LD_VAR 0 2
6912: ARRAY
6913: PPUSH
6914: LD_VAR 0 3
6918: PPUSH
6919: CALL_OW 1
6923: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6924: LD_ADDR_VAR 0 7
6928: PUSH
6929: LD_VAR 0 7
6933: PPUSH
6934: LD_VAR 0 7
6938: PPUSH
6939: LD_VAR 0 6
6943: PPUSH
6944: CALL_OW 1
6948: ST_TO_ADDR
// for i = s_arr downto 2 do
6949: LD_ADDR_VAR 0 5
6953: PUSH
6954: DOUBLE
6955: LD_VAR 0 7
6959: INC
6960: ST_TO_ADDR
6961: LD_INT 2
6963: PUSH
6964: FOR_DOWNTO
6965: IFFALSE 7049
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6967: LD_ADDR_VAR 0 6
6971: PUSH
6972: LD_VAR 0 7
6976: PUSH
6977: LD_VAR 0 5
6981: PUSH
6982: LD_INT 1
6984: MINUS
6985: ARRAY
6986: PPUSH
6987: LD_VAR 0 2
6991: PUSH
6992: LD_VAR 0 5
6996: PUSH
6997: LD_INT 1
6999: MINUS
7000: ARRAY
7001: PPUSH
7002: LD_VAR 0 7
7006: PUSH
7007: LD_VAR 0 5
7011: ARRAY
7012: PPUSH
7013: CALL_OW 1
7017: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7018: LD_ADDR_VAR 0 7
7022: PUSH
7023: LD_VAR 0 7
7027: PPUSH
7028: LD_VAR 0 5
7032: PUSH
7033: LD_INT 1
7035: MINUS
7036: PPUSH
7037: LD_VAR 0 6
7041: PPUSH
7042: CALL_OW 1
7046: ST_TO_ADDR
// end ;
7047: GO 6964
7049: POP
7050: POP
// result := s_arr [ 1 ] ;
7051: LD_ADDR_VAR 0 4
7055: PUSH
7056: LD_VAR 0 7
7060: PUSH
7061: LD_INT 1
7063: ARRAY
7064: ST_TO_ADDR
// end ; end ;
7065: LD_VAR 0 4
7069: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7070: LD_INT 0
7072: PPUSH
7073: PPUSH
// if not list then
7074: LD_VAR 0 1
7078: NOT
7079: IFFALSE 7083
// exit ;
7081: GO 7174
// i := list [ pos1 ] ;
7083: LD_ADDR_VAR 0 5
7087: PUSH
7088: LD_VAR 0 1
7092: PUSH
7093: LD_VAR 0 2
7097: ARRAY
7098: ST_TO_ADDR
// if not i then
7099: LD_VAR 0 5
7103: NOT
7104: IFFALSE 7108
// exit ;
7106: GO 7174
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7108: LD_ADDR_VAR 0 1
7112: PUSH
7113: LD_VAR 0 1
7117: PPUSH
7118: LD_VAR 0 2
7122: PPUSH
7123: LD_VAR 0 1
7127: PUSH
7128: LD_VAR 0 3
7132: ARRAY
7133: PPUSH
7134: CALL_OW 1
7138: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7139: LD_ADDR_VAR 0 1
7143: PUSH
7144: LD_VAR 0 1
7148: PPUSH
7149: LD_VAR 0 3
7153: PPUSH
7154: LD_VAR 0 5
7158: PPUSH
7159: CALL_OW 1
7163: ST_TO_ADDR
// result := list ;
7164: LD_ADDR_VAR 0 4
7168: PUSH
7169: LD_VAR 0 1
7173: ST_TO_ADDR
// end ;
7174: LD_VAR 0 4
7178: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7179: LD_INT 0
7181: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7182: LD_ADDR_VAR 0 5
7186: PUSH
7187: LD_VAR 0 1
7191: PPUSH
7192: CALL_OW 250
7196: PPUSH
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 251
7206: PPUSH
7207: LD_VAR 0 2
7211: PPUSH
7212: LD_VAR 0 3
7216: PPUSH
7217: LD_VAR 0 4
7221: PPUSH
7222: CALL 7600 0 5
7226: ST_TO_ADDR
// end ;
7227: LD_VAR 0 5
7231: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7232: LD_INT 0
7234: PPUSH
7235: PPUSH
7236: PPUSH
7237: PPUSH
// if not list or not unit then
7238: LD_VAR 0 2
7242: NOT
7243: PUSH
7244: LD_VAR 0 1
7248: NOT
7249: OR
7250: IFFALSE 7254
// exit ;
7252: GO 7595
// result := [ ] ;
7254: LD_ADDR_VAR 0 5
7258: PUSH
7259: EMPTY
7260: ST_TO_ADDR
// for i in list do
7261: LD_ADDR_VAR 0 6
7265: PUSH
7266: LD_VAR 0 2
7270: PUSH
7271: FOR_IN
7272: IFFALSE 7490
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7274: LD_ADDR_VAR 0 8
7278: PUSH
7279: LD_VAR 0 1
7283: PPUSH
7284: LD_VAR 0 6
7288: PUSH
7289: LD_INT 1
7291: ARRAY
7292: PPUSH
7293: LD_VAR 0 6
7297: PUSH
7298: LD_INT 2
7300: ARRAY
7301: PPUSH
7302: CALL_OW 297
7306: ST_TO_ADDR
// if not Count ( result ) then
7307: LD_VAR 0 5
7311: PPUSH
7312: CALL 3884 0 1
7316: NOT
7317: IFFALSE 7350
// begin result := Join ( result , [ i , tmp ] ) ;
7319: LD_ADDR_VAR 0 5
7323: PUSH
7324: LD_VAR 0 5
7328: PPUSH
7329: LD_VAR 0 6
7333: PUSH
7334: LD_VAR 0 8
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PPUSH
7343: CALL 39493 0 2
7347: ST_TO_ADDR
// continue ;
7348: GO 7271
// end ; if result [ result ] [ 2 ] <= tmp then
7350: LD_VAR 0 5
7354: PUSH
7355: LD_VAR 0 5
7359: ARRAY
7360: PUSH
7361: LD_INT 2
7363: ARRAY
7364: PUSH
7365: LD_VAR 0 8
7369: LESSEQUAL
7370: IFFALSE 7403
// result := Join ( result , [ i , tmp ] ) else
7372: LD_ADDR_VAR 0 5
7376: PUSH
7377: LD_VAR 0 5
7381: PPUSH
7382: LD_VAR 0 6
7386: PUSH
7387: LD_VAR 0 8
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PPUSH
7396: CALL 39493 0 2
7400: ST_TO_ADDR
7401: GO 7488
// begin for j := 1 to Count ( result ) do
7403: LD_ADDR_VAR 0 7
7407: PUSH
7408: DOUBLE
7409: LD_INT 1
7411: DEC
7412: ST_TO_ADDR
7413: LD_VAR 0 5
7417: PPUSH
7418: CALL 3884 0 1
7422: PUSH
7423: FOR_TO
7424: IFFALSE 7486
// begin if tmp < result [ j ] [ 2 ] then
7426: LD_VAR 0 8
7430: PUSH
7431: LD_VAR 0 5
7435: PUSH
7436: LD_VAR 0 7
7440: ARRAY
7441: PUSH
7442: LD_INT 2
7444: ARRAY
7445: LESS
7446: IFFALSE 7484
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7448: LD_ADDR_VAR 0 5
7452: PUSH
7453: LD_VAR 0 5
7457: PPUSH
7458: LD_VAR 0 7
7462: PPUSH
7463: LD_VAR 0 6
7467: PUSH
7468: LD_VAR 0 8
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 2
7481: ST_TO_ADDR
// break ;
7482: GO 7486
// end ; end ;
7484: GO 7423
7486: POP
7487: POP
// end ; end ;
7488: GO 7271
7490: POP
7491: POP
// if result and not asc then
7492: LD_VAR 0 5
7496: PUSH
7497: LD_VAR 0 3
7501: NOT
7502: AND
7503: IFFALSE 7520
// result := ReverseArray ( result ) ;
7505: LD_ADDR_VAR 0 5
7509: PUSH
7510: LD_VAR 0 5
7514: PPUSH
7515: CALL 34760 0 1
7519: ST_TO_ADDR
// tmp := [ ] ;
7520: LD_ADDR_VAR 0 8
7524: PUSH
7525: EMPTY
7526: ST_TO_ADDR
// if mode then
7527: LD_VAR 0 4
7531: IFFALSE 7595
// begin for i := 1 to result do
7533: LD_ADDR_VAR 0 6
7537: PUSH
7538: DOUBLE
7539: LD_INT 1
7541: DEC
7542: ST_TO_ADDR
7543: LD_VAR 0 5
7547: PUSH
7548: FOR_TO
7549: IFFALSE 7583
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7551: LD_ADDR_VAR 0 8
7555: PUSH
7556: LD_VAR 0 8
7560: PPUSH
7561: LD_VAR 0 5
7565: PUSH
7566: LD_VAR 0 6
7570: ARRAY
7571: PUSH
7572: LD_INT 1
7574: ARRAY
7575: PPUSH
7576: CALL 39493 0 2
7580: ST_TO_ADDR
7581: GO 7548
7583: POP
7584: POP
// result := tmp ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_VAR 0 8
7594: ST_TO_ADDR
// end ; end ;
7595: LD_VAR 0 5
7599: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7600: LD_INT 0
7602: PPUSH
7603: PPUSH
7604: PPUSH
7605: PPUSH
// if not list then
7606: LD_VAR 0 3
7610: NOT
7611: IFFALSE 7615
// exit ;
7613: GO 8003
// result := [ ] ;
7615: LD_ADDR_VAR 0 6
7619: PUSH
7620: EMPTY
7621: ST_TO_ADDR
// for i in list do
7622: LD_ADDR_VAR 0 7
7626: PUSH
7627: LD_VAR 0 3
7631: PUSH
7632: FOR_IN
7633: IFFALSE 7835
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7635: LD_ADDR_VAR 0 9
7639: PUSH
7640: LD_VAR 0 7
7644: PPUSH
7645: LD_VAR 0 1
7649: PPUSH
7650: LD_VAR 0 2
7654: PPUSH
7655: CALL_OW 297
7659: ST_TO_ADDR
// if not result then
7660: LD_VAR 0 6
7664: NOT
7665: IFFALSE 7691
// result := [ [ i , tmp ] ] else
7667: LD_ADDR_VAR 0 6
7671: PUSH
7672: LD_VAR 0 7
7676: PUSH
7677: LD_VAR 0 9
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: ST_TO_ADDR
7689: GO 7833
// begin if result [ result ] [ 2 ] <= tmp then
7691: LD_VAR 0 6
7695: PUSH
7696: LD_VAR 0 6
7700: ARRAY
7701: PUSH
7702: LD_INT 2
7704: ARRAY
7705: PUSH
7706: LD_VAR 0 9
7710: LESSEQUAL
7711: IFFALSE 7753
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7713: LD_ADDR_VAR 0 6
7717: PUSH
7718: LD_VAR 0 6
7722: PPUSH
7723: LD_VAR 0 6
7727: PUSH
7728: LD_INT 1
7730: PLUS
7731: PPUSH
7732: LD_VAR 0 7
7736: PUSH
7737: LD_VAR 0 9
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 2
7750: ST_TO_ADDR
7751: GO 7833
// for j := 1 to result do
7753: LD_ADDR_VAR 0 8
7757: PUSH
7758: DOUBLE
7759: LD_INT 1
7761: DEC
7762: ST_TO_ADDR
7763: LD_VAR 0 6
7767: PUSH
7768: FOR_TO
7769: IFFALSE 7831
// begin if tmp < result [ j ] [ 2 ] then
7771: LD_VAR 0 9
7775: PUSH
7776: LD_VAR 0 6
7780: PUSH
7781: LD_VAR 0 8
7785: ARRAY
7786: PUSH
7787: LD_INT 2
7789: ARRAY
7790: LESS
7791: IFFALSE 7829
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7793: LD_ADDR_VAR 0 6
7797: PUSH
7798: LD_VAR 0 6
7802: PPUSH
7803: LD_VAR 0 8
7807: PPUSH
7808: LD_VAR 0 7
7812: PUSH
7813: LD_VAR 0 9
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PPUSH
7822: CALL_OW 2
7826: ST_TO_ADDR
// break ;
7827: GO 7831
// end ; end ;
7829: GO 7768
7831: POP
7832: POP
// end ; end ;
7833: GO 7632
7835: POP
7836: POP
// if result and not asc then
7837: LD_VAR 0 6
7841: PUSH
7842: LD_VAR 0 4
7846: NOT
7847: AND
7848: IFFALSE 7923
// begin tmp := result ;
7850: LD_ADDR_VAR 0 9
7854: PUSH
7855: LD_VAR 0 6
7859: ST_TO_ADDR
// for i = tmp downto 1 do
7860: LD_ADDR_VAR 0 7
7864: PUSH
7865: DOUBLE
7866: LD_VAR 0 9
7870: INC
7871: ST_TO_ADDR
7872: LD_INT 1
7874: PUSH
7875: FOR_DOWNTO
7876: IFFALSE 7921
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7878: LD_ADDR_VAR 0 6
7882: PUSH
7883: LD_VAR 0 6
7887: PPUSH
7888: LD_VAR 0 9
7892: PUSH
7893: LD_VAR 0 7
7897: MINUS
7898: PUSH
7899: LD_INT 1
7901: PLUS
7902: PPUSH
7903: LD_VAR 0 9
7907: PUSH
7908: LD_VAR 0 7
7912: ARRAY
7913: PPUSH
7914: CALL_OW 1
7918: ST_TO_ADDR
7919: GO 7875
7921: POP
7922: POP
// end ; tmp := [ ] ;
7923: LD_ADDR_VAR 0 9
7927: PUSH
7928: EMPTY
7929: ST_TO_ADDR
// if mode then
7930: LD_VAR 0 5
7934: IFFALSE 8003
// begin for i = 1 to result do
7936: LD_ADDR_VAR 0 7
7940: PUSH
7941: DOUBLE
7942: LD_INT 1
7944: DEC
7945: ST_TO_ADDR
7946: LD_VAR 0 6
7950: PUSH
7951: FOR_TO
7952: IFFALSE 7991
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7954: LD_ADDR_VAR 0 9
7958: PUSH
7959: LD_VAR 0 9
7963: PPUSH
7964: LD_VAR 0 7
7968: PPUSH
7969: LD_VAR 0 6
7973: PUSH
7974: LD_VAR 0 7
7978: ARRAY
7979: PUSH
7980: LD_INT 1
7982: ARRAY
7983: PPUSH
7984: CALL_OW 1
7988: ST_TO_ADDR
7989: GO 7951
7991: POP
7992: POP
// result := tmp ;
7993: LD_ADDR_VAR 0 6
7997: PUSH
7998: LD_VAR 0 9
8002: ST_TO_ADDR
// end ; end ;
8003: LD_VAR 0 6
8007: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8008: LD_INT 0
8010: PPUSH
8011: PPUSH
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8016: LD_ADDR_VAR 0 5
8020: PUSH
8021: LD_INT 0
8023: PUSH
8024: LD_INT 0
8026: PUSH
8027: LD_INT 0
8029: PUSH
8030: EMPTY
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: ST_TO_ADDR
// if not x or not y then
8038: LD_VAR 0 2
8042: NOT
8043: PUSH
8044: LD_VAR 0 3
8048: NOT
8049: OR
8050: IFFALSE 8054
// exit ;
8052: GO 9704
// if not range then
8054: LD_VAR 0 4
8058: NOT
8059: IFFALSE 8069
// range := 10 ;
8061: LD_ADDR_VAR 0 4
8065: PUSH
8066: LD_INT 10
8068: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8069: LD_ADDR_VAR 0 8
8073: PUSH
8074: LD_INT 81
8076: PUSH
8077: LD_VAR 0 1
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 92
8088: PUSH
8089: LD_VAR 0 2
8093: PUSH
8094: LD_VAR 0 3
8098: PUSH
8099: LD_VAR 0 4
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: PUSH
8110: LD_INT 3
8112: PUSH
8113: LD_INT 21
8115: PUSH
8116: LD_INT 3
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: PPUSH
8132: CALL_OW 69
8136: ST_TO_ADDR
// if not tmp then
8137: LD_VAR 0 8
8141: NOT
8142: IFFALSE 8146
// exit ;
8144: GO 9704
// for i in tmp do
8146: LD_ADDR_VAR 0 6
8150: PUSH
8151: LD_VAR 0 8
8155: PUSH
8156: FOR_IN
8157: IFFALSE 9679
// begin points := [ 0 , 0 , 0 ] ;
8159: LD_ADDR_VAR 0 9
8163: PUSH
8164: LD_INT 0
8166: PUSH
8167: LD_INT 0
8169: PUSH
8170: LD_INT 0
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: LIST
8177: ST_TO_ADDR
// bpoints := 1 ;
8178: LD_ADDR_VAR 0 10
8182: PUSH
8183: LD_INT 1
8185: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8186: LD_VAR 0 6
8190: PPUSH
8191: CALL_OW 247
8195: PUSH
8196: LD_INT 1
8198: DOUBLE
8199: EQUAL
8200: IFTRUE 8204
8202: GO 8782
8204: POP
// begin if GetClass ( i ) = 1 then
8205: LD_VAR 0 6
8209: PPUSH
8210: CALL_OW 257
8214: PUSH
8215: LD_INT 1
8217: EQUAL
8218: IFFALSE 8239
// points := [ 10 , 5 , 3 ] ;
8220: LD_ADDR_VAR 0 9
8224: PUSH
8225: LD_INT 10
8227: PUSH
8228: LD_INT 5
8230: PUSH
8231: LD_INT 3
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8239: LD_VAR 0 6
8243: PPUSH
8244: CALL_OW 257
8248: PUSH
8249: LD_INT 2
8251: PUSH
8252: LD_INT 3
8254: PUSH
8255: LD_INT 4
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: IN
8263: IFFALSE 8284
// points := [ 3 , 2 , 1 ] ;
8265: LD_ADDR_VAR 0 9
8269: PUSH
8270: LD_INT 3
8272: PUSH
8273: LD_INT 2
8275: PUSH
8276: LD_INT 1
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8284: LD_VAR 0 6
8288: PPUSH
8289: CALL_OW 257
8293: PUSH
8294: LD_INT 5
8296: EQUAL
8297: IFFALSE 8318
// points := [ 130 , 5 , 2 ] ;
8299: LD_ADDR_VAR 0 9
8303: PUSH
8304: LD_INT 130
8306: PUSH
8307: LD_INT 5
8309: PUSH
8310: LD_INT 2
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8318: LD_VAR 0 6
8322: PPUSH
8323: CALL_OW 257
8327: PUSH
8328: LD_INT 8
8330: EQUAL
8331: IFFALSE 8352
// points := [ 35 , 35 , 30 ] ;
8333: LD_ADDR_VAR 0 9
8337: PUSH
8338: LD_INT 35
8340: PUSH
8341: LD_INT 35
8343: PUSH
8344: LD_INT 30
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8352: LD_VAR 0 6
8356: PPUSH
8357: CALL_OW 257
8361: PUSH
8362: LD_INT 9
8364: EQUAL
8365: IFFALSE 8386
// points := [ 20 , 55 , 40 ] ;
8367: LD_ADDR_VAR 0 9
8371: PUSH
8372: LD_INT 20
8374: PUSH
8375: LD_INT 55
8377: PUSH
8378: LD_INT 40
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8386: LD_VAR 0 6
8390: PPUSH
8391: CALL_OW 257
8395: PUSH
8396: LD_INT 12
8398: PUSH
8399: LD_INT 16
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: IN
8406: IFFALSE 8427
// points := [ 5 , 3 , 2 ] ;
8408: LD_ADDR_VAR 0 9
8412: PUSH
8413: LD_INT 5
8415: PUSH
8416: LD_INT 3
8418: PUSH
8419: LD_INT 2
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8427: LD_VAR 0 6
8431: PPUSH
8432: CALL_OW 257
8436: PUSH
8437: LD_INT 17
8439: EQUAL
8440: IFFALSE 8461
// points := [ 100 , 50 , 75 ] ;
8442: LD_ADDR_VAR 0 9
8446: PUSH
8447: LD_INT 100
8449: PUSH
8450: LD_INT 50
8452: PUSH
8453: LD_INT 75
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8461: LD_VAR 0 6
8465: PPUSH
8466: CALL_OW 257
8470: PUSH
8471: LD_INT 15
8473: EQUAL
8474: IFFALSE 8495
// points := [ 10 , 5 , 3 ] ;
8476: LD_ADDR_VAR 0 9
8480: PUSH
8481: LD_INT 10
8483: PUSH
8484: LD_INT 5
8486: PUSH
8487: LD_INT 3
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8495: LD_VAR 0 6
8499: PPUSH
8500: CALL_OW 257
8504: PUSH
8505: LD_INT 14
8507: EQUAL
8508: IFFALSE 8529
// points := [ 10 , 0 , 0 ] ;
8510: LD_ADDR_VAR 0 9
8514: PUSH
8515: LD_INT 10
8517: PUSH
8518: LD_INT 0
8520: PUSH
8521: LD_INT 0
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8529: LD_VAR 0 6
8533: PPUSH
8534: CALL_OW 257
8538: PUSH
8539: LD_INT 11
8541: EQUAL
8542: IFFALSE 8563
// points := [ 30 , 10 , 5 ] ;
8544: LD_ADDR_VAR 0 9
8548: PUSH
8549: LD_INT 30
8551: PUSH
8552: LD_INT 10
8554: PUSH
8555: LD_INT 5
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: LIST
8562: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8563: LD_VAR 0 1
8567: PPUSH
8568: LD_INT 5
8570: PPUSH
8571: CALL_OW 321
8575: PUSH
8576: LD_INT 2
8578: EQUAL
8579: IFFALSE 8596
// bpoints := bpoints * 1.8 ;
8581: LD_ADDR_VAR 0 10
8585: PUSH
8586: LD_VAR 0 10
8590: PUSH
8591: LD_REAL  1.80000000000000E+0000
8594: MUL
8595: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8596: LD_VAR 0 6
8600: PPUSH
8601: CALL_OW 257
8605: PUSH
8606: LD_INT 1
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 3
8614: PUSH
8615: LD_INT 4
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: IN
8624: PUSH
8625: LD_VAR 0 1
8629: PPUSH
8630: LD_INT 51
8632: PPUSH
8633: CALL_OW 321
8637: PUSH
8638: LD_INT 2
8640: EQUAL
8641: AND
8642: IFFALSE 8659
// bpoints := bpoints * 1.2 ;
8644: LD_ADDR_VAR 0 10
8648: PUSH
8649: LD_VAR 0 10
8653: PUSH
8654: LD_REAL  1.20000000000000E+0000
8657: MUL
8658: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8659: LD_VAR 0 6
8663: PPUSH
8664: CALL_OW 257
8668: PUSH
8669: LD_INT 5
8671: PUSH
8672: LD_INT 7
8674: PUSH
8675: LD_INT 9
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: LIST
8682: IN
8683: PUSH
8684: LD_VAR 0 1
8688: PPUSH
8689: LD_INT 52
8691: PPUSH
8692: CALL_OW 321
8696: PUSH
8697: LD_INT 2
8699: EQUAL
8700: AND
8701: IFFALSE 8718
// bpoints := bpoints * 1.5 ;
8703: LD_ADDR_VAR 0 10
8707: PUSH
8708: LD_VAR 0 10
8712: PUSH
8713: LD_REAL  1.50000000000000E+0000
8716: MUL
8717: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8718: LD_VAR 0 1
8722: PPUSH
8723: LD_INT 66
8725: PPUSH
8726: CALL_OW 321
8730: PUSH
8731: LD_INT 2
8733: EQUAL
8734: IFFALSE 8751
// bpoints := bpoints * 1.1 ;
8736: LD_ADDR_VAR 0 10
8740: PUSH
8741: LD_VAR 0 10
8745: PUSH
8746: LD_REAL  1.10000000000000E+0000
8749: MUL
8750: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8751: LD_ADDR_VAR 0 10
8755: PUSH
8756: LD_VAR 0 10
8760: PUSH
8761: LD_VAR 0 6
8765: PPUSH
8766: LD_INT 1
8768: PPUSH
8769: CALL_OW 259
8773: PUSH
8774: LD_REAL  1.15000000000000E+0000
8777: MUL
8778: MUL
8779: ST_TO_ADDR
// end ; unit_vehicle :
8780: GO 9608
8782: LD_INT 2
8784: DOUBLE
8785: EQUAL
8786: IFTRUE 8790
8788: GO 9596
8790: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8791: LD_VAR 0 6
8795: PPUSH
8796: CALL_OW 264
8800: PUSH
8801: LD_INT 2
8803: PUSH
8804: LD_INT 42
8806: PUSH
8807: LD_INT 24
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: LIST
8814: IN
8815: IFFALSE 8836
// points := [ 25 , 5 , 3 ] ;
8817: LD_ADDR_VAR 0 9
8821: PUSH
8822: LD_INT 25
8824: PUSH
8825: LD_INT 5
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8836: LD_VAR 0 6
8840: PPUSH
8841: CALL_OW 264
8845: PUSH
8846: LD_INT 4
8848: PUSH
8849: LD_INT 43
8851: PUSH
8852: LD_INT 25
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: LIST
8859: IN
8860: IFFALSE 8881
// points := [ 40 , 15 , 5 ] ;
8862: LD_ADDR_VAR 0 9
8866: PUSH
8867: LD_INT 40
8869: PUSH
8870: LD_INT 15
8872: PUSH
8873: LD_INT 5
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: LIST
8880: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8881: LD_VAR 0 6
8885: PPUSH
8886: CALL_OW 264
8890: PUSH
8891: LD_INT 3
8893: PUSH
8894: LD_INT 23
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: IN
8901: IFFALSE 8922
// points := [ 7 , 25 , 8 ] ;
8903: LD_ADDR_VAR 0 9
8907: PUSH
8908: LD_INT 7
8910: PUSH
8911: LD_INT 25
8913: PUSH
8914: LD_INT 8
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: LIST
8921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8922: LD_VAR 0 6
8926: PPUSH
8927: CALL_OW 264
8931: PUSH
8932: LD_INT 5
8934: PUSH
8935: LD_INT 27
8937: PUSH
8938: LD_INT 44
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: LIST
8945: IN
8946: IFFALSE 8967
// points := [ 14 , 50 , 16 ] ;
8948: LD_ADDR_VAR 0 9
8952: PUSH
8953: LD_INT 14
8955: PUSH
8956: LD_INT 50
8958: PUSH
8959: LD_INT 16
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: LIST
8966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8967: LD_VAR 0 6
8971: PPUSH
8972: CALL_OW 264
8976: PUSH
8977: LD_INT 6
8979: PUSH
8980: LD_INT 46
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: IN
8987: IFFALSE 9008
// points := [ 32 , 120 , 70 ] ;
8989: LD_ADDR_VAR 0 9
8993: PUSH
8994: LD_INT 32
8996: PUSH
8997: LD_INT 120
8999: PUSH
9000: LD_INT 70
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: LIST
9007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9008: LD_VAR 0 6
9012: PPUSH
9013: CALL_OW 264
9017: PUSH
9018: LD_INT 7
9020: PUSH
9021: LD_INT 28
9023: PUSH
9024: LD_INT 45
9026: PUSH
9027: LD_INT 92
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: IN
9036: IFFALSE 9057
// points := [ 35 , 20 , 45 ] ;
9038: LD_ADDR_VAR 0 9
9042: PUSH
9043: LD_INT 35
9045: PUSH
9046: LD_INT 20
9048: PUSH
9049: LD_INT 45
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9057: LD_VAR 0 6
9061: PPUSH
9062: CALL_OW 264
9066: PUSH
9067: LD_INT 47
9069: PUSH
9070: EMPTY
9071: LIST
9072: IN
9073: IFFALSE 9094
// points := [ 67 , 45 , 75 ] ;
9075: LD_ADDR_VAR 0 9
9079: PUSH
9080: LD_INT 67
9082: PUSH
9083: LD_INT 45
9085: PUSH
9086: LD_INT 75
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9094: LD_VAR 0 6
9098: PPUSH
9099: CALL_OW 264
9103: PUSH
9104: LD_INT 26
9106: PUSH
9107: EMPTY
9108: LIST
9109: IN
9110: IFFALSE 9131
// points := [ 120 , 30 , 80 ] ;
9112: LD_ADDR_VAR 0 9
9116: PUSH
9117: LD_INT 120
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 80
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9131: LD_VAR 0 6
9135: PPUSH
9136: CALL_OW 264
9140: PUSH
9141: LD_INT 22
9143: PUSH
9144: EMPTY
9145: LIST
9146: IN
9147: IFFALSE 9168
// points := [ 40 , 1 , 1 ] ;
9149: LD_ADDR_VAR 0 9
9153: PUSH
9154: LD_INT 40
9156: PUSH
9157: LD_INT 1
9159: PUSH
9160: LD_INT 1
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9168: LD_VAR 0 6
9172: PPUSH
9173: CALL_OW 264
9177: PUSH
9178: LD_INT 29
9180: PUSH
9181: EMPTY
9182: LIST
9183: IN
9184: IFFALSE 9205
// points := [ 70 , 200 , 400 ] ;
9186: LD_ADDR_VAR 0 9
9190: PUSH
9191: LD_INT 70
9193: PUSH
9194: LD_INT 200
9196: PUSH
9197: LD_INT 400
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9205: LD_VAR 0 6
9209: PPUSH
9210: CALL_OW 264
9214: PUSH
9215: LD_INT 14
9217: PUSH
9218: LD_INT 53
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: IN
9225: IFFALSE 9246
// points := [ 40 , 10 , 20 ] ;
9227: LD_ADDR_VAR 0 9
9231: PUSH
9232: LD_INT 40
9234: PUSH
9235: LD_INT 10
9237: PUSH
9238: LD_INT 20
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9246: LD_VAR 0 6
9250: PPUSH
9251: CALL_OW 264
9255: PUSH
9256: LD_INT 9
9258: PUSH
9259: EMPTY
9260: LIST
9261: IN
9262: IFFALSE 9283
// points := [ 5 , 70 , 20 ] ;
9264: LD_ADDR_VAR 0 9
9268: PUSH
9269: LD_INT 5
9271: PUSH
9272: LD_INT 70
9274: PUSH
9275: LD_INT 20
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: LIST
9282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9283: LD_VAR 0 6
9287: PPUSH
9288: CALL_OW 264
9292: PUSH
9293: LD_INT 10
9295: PUSH
9296: EMPTY
9297: LIST
9298: IN
9299: IFFALSE 9320
// points := [ 35 , 110 , 70 ] ;
9301: LD_ADDR_VAR 0 9
9305: PUSH
9306: LD_INT 35
9308: PUSH
9309: LD_INT 110
9311: PUSH
9312: LD_INT 70
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: LIST
9319: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9320: LD_VAR 0 6
9324: PPUSH
9325: CALL_OW 265
9329: PUSH
9330: LD_INT 25
9332: EQUAL
9333: IFFALSE 9354
// points := [ 80 , 65 , 100 ] ;
9335: LD_ADDR_VAR 0 9
9339: PUSH
9340: LD_INT 80
9342: PUSH
9343: LD_INT 65
9345: PUSH
9346: LD_INT 100
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9354: LD_VAR 0 6
9358: PPUSH
9359: CALL_OW 263
9363: PUSH
9364: LD_INT 1
9366: EQUAL
9367: IFFALSE 9402
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9369: LD_ADDR_VAR 0 10
9373: PUSH
9374: LD_VAR 0 10
9378: PUSH
9379: LD_VAR 0 6
9383: PPUSH
9384: CALL_OW 311
9388: PPUSH
9389: LD_INT 3
9391: PPUSH
9392: CALL_OW 259
9396: PUSH
9397: LD_INT 4
9399: MUL
9400: MUL
9401: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9402: LD_VAR 0 6
9406: PPUSH
9407: CALL_OW 263
9411: PUSH
9412: LD_INT 2
9414: EQUAL
9415: IFFALSE 9466
// begin j := IsControledBy ( i ) ;
9417: LD_ADDR_VAR 0 7
9421: PUSH
9422: LD_VAR 0 6
9426: PPUSH
9427: CALL_OW 312
9431: ST_TO_ADDR
// if j then
9432: LD_VAR 0 7
9436: IFFALSE 9466
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9438: LD_ADDR_VAR 0 10
9442: PUSH
9443: LD_VAR 0 10
9447: PUSH
9448: LD_VAR 0 7
9452: PPUSH
9453: LD_INT 3
9455: PPUSH
9456: CALL_OW 259
9460: PUSH
9461: LD_INT 3
9463: MUL
9464: MUL
9465: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9466: LD_VAR 0 6
9470: PPUSH
9471: CALL_OW 264
9475: PUSH
9476: LD_INT 5
9478: PUSH
9479: LD_INT 6
9481: PUSH
9482: LD_INT 46
9484: PUSH
9485: LD_INT 44
9487: PUSH
9488: LD_INT 47
9490: PUSH
9491: LD_INT 45
9493: PUSH
9494: LD_INT 28
9496: PUSH
9497: LD_INT 7
9499: PUSH
9500: LD_INT 27
9502: PUSH
9503: LD_INT 29
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: IN
9518: PUSH
9519: LD_VAR 0 1
9523: PPUSH
9524: LD_INT 52
9526: PPUSH
9527: CALL_OW 321
9531: PUSH
9532: LD_INT 2
9534: EQUAL
9535: AND
9536: IFFALSE 9553
// bpoints := bpoints * 1.2 ;
9538: LD_ADDR_VAR 0 10
9542: PUSH
9543: LD_VAR 0 10
9547: PUSH
9548: LD_REAL  1.20000000000000E+0000
9551: MUL
9552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9553: LD_VAR 0 6
9557: PPUSH
9558: CALL_OW 264
9562: PUSH
9563: LD_INT 6
9565: PUSH
9566: LD_INT 46
9568: PUSH
9569: LD_INT 47
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: IN
9577: IFFALSE 9594
// bpoints := bpoints * 1.2 ;
9579: LD_ADDR_VAR 0 10
9583: PUSH
9584: LD_VAR 0 10
9588: PUSH
9589: LD_REAL  1.20000000000000E+0000
9592: MUL
9593: ST_TO_ADDR
// end ; unit_building :
9594: GO 9608
9596: LD_INT 3
9598: DOUBLE
9599: EQUAL
9600: IFTRUE 9604
9602: GO 9607
9604: POP
// ; end ;
9605: GO 9608
9607: POP
// for j = 1 to 3 do
9608: LD_ADDR_VAR 0 7
9612: PUSH
9613: DOUBLE
9614: LD_INT 1
9616: DEC
9617: ST_TO_ADDR
9618: LD_INT 3
9620: PUSH
9621: FOR_TO
9622: IFFALSE 9675
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9624: LD_ADDR_VAR 0 5
9628: PUSH
9629: LD_VAR 0 5
9633: PPUSH
9634: LD_VAR 0 7
9638: PPUSH
9639: LD_VAR 0 5
9643: PUSH
9644: LD_VAR 0 7
9648: ARRAY
9649: PUSH
9650: LD_VAR 0 9
9654: PUSH
9655: LD_VAR 0 7
9659: ARRAY
9660: PUSH
9661: LD_VAR 0 10
9665: MUL
9666: PLUS
9667: PPUSH
9668: CALL_OW 1
9672: ST_TO_ADDR
9673: GO 9621
9675: POP
9676: POP
// end ;
9677: GO 8156
9679: POP
9680: POP
// result := Replace ( result , 4 , tmp ) ;
9681: LD_ADDR_VAR 0 5
9685: PUSH
9686: LD_VAR 0 5
9690: PPUSH
9691: LD_INT 4
9693: PPUSH
9694: LD_VAR 0 8
9698: PPUSH
9699: CALL_OW 1
9703: ST_TO_ADDR
// end ;
9704: LD_VAR 0 5
9708: RET
// export function DangerAtRange ( unit , range ) ; begin
9709: LD_INT 0
9711: PPUSH
// if not unit then
9712: LD_VAR 0 1
9716: NOT
9717: IFFALSE 9721
// exit ;
9719: GO 9766
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9721: LD_ADDR_VAR 0 3
9725: PUSH
9726: LD_VAR 0 1
9730: PPUSH
9731: CALL_OW 255
9735: PPUSH
9736: LD_VAR 0 1
9740: PPUSH
9741: CALL_OW 250
9745: PPUSH
9746: LD_VAR 0 1
9750: PPUSH
9751: CALL_OW 251
9755: PPUSH
9756: LD_VAR 0 2
9760: PPUSH
9761: CALL 8008 0 4
9765: ST_TO_ADDR
// end ;
9766: LD_VAR 0 3
9770: RET
// export function DangerInArea ( side , area ) ; begin
9771: LD_INT 0
9773: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9774: LD_ADDR_VAR 0 3
9778: PUSH
9779: LD_VAR 0 2
9783: PPUSH
9784: LD_INT 81
9786: PUSH
9787: LD_VAR 0 1
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PPUSH
9796: CALL_OW 70
9800: ST_TO_ADDR
// end ;
9801: LD_VAR 0 3
9805: RET
// export function IsExtension ( b ) ; begin
9806: LD_INT 0
9808: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: LD_VAR 0 1
9818: PUSH
9819: LD_INT 23
9821: PUSH
9822: LD_INT 20
9824: PUSH
9825: LD_INT 22
9827: PUSH
9828: LD_INT 17
9830: PUSH
9831: LD_INT 24
9833: PUSH
9834: LD_INT 21
9836: PUSH
9837: LD_INT 19
9839: PUSH
9840: LD_INT 16
9842: PUSH
9843: LD_INT 25
9845: PUSH
9846: LD_INT 18
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: IN
9861: ST_TO_ADDR
// end ;
9862: LD_VAR 0 2
9866: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9867: LD_INT 0
9869: PPUSH
9870: PPUSH
9871: PPUSH
// result := [ ] ;
9872: LD_ADDR_VAR 0 4
9876: PUSH
9877: EMPTY
9878: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9879: LD_ADDR_VAR 0 5
9883: PUSH
9884: LD_VAR 0 2
9888: PPUSH
9889: LD_INT 21
9891: PUSH
9892: LD_INT 3
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PPUSH
9899: CALL_OW 70
9903: ST_TO_ADDR
// if not tmp then
9904: LD_VAR 0 5
9908: NOT
9909: IFFALSE 9913
// exit ;
9911: GO 9977
// if checkLink then
9913: LD_VAR 0 3
9917: IFFALSE 9967
// begin for i in tmp do
9919: LD_ADDR_VAR 0 6
9923: PUSH
9924: LD_VAR 0 5
9928: PUSH
9929: FOR_IN
9930: IFFALSE 9965
// if GetBase ( i ) <> base then
9932: LD_VAR 0 6
9936: PPUSH
9937: CALL_OW 274
9941: PUSH
9942: LD_VAR 0 1
9946: NONEQUAL
9947: IFFALSE 9963
// ComLinkToBase ( base , i ) ;
9949: LD_VAR 0 1
9953: PPUSH
9954: LD_VAR 0 6
9958: PPUSH
9959: CALL_OW 169
9963: GO 9929
9965: POP
9966: POP
// end ; result := tmp ;
9967: LD_ADDR_VAR 0 4
9971: PUSH
9972: LD_VAR 0 5
9976: ST_TO_ADDR
// end ;
9977: LD_VAR 0 4
9981: RET
// export function ComComplete ( units , b ) ; var i ; begin
9982: LD_INT 0
9984: PPUSH
9985: PPUSH
// if not units then
9986: LD_VAR 0 1
9990: NOT
9991: IFFALSE 9995
// exit ;
9993: GO 10085
// for i in units do
9995: LD_ADDR_VAR 0 4
9999: PUSH
10000: LD_VAR 0 1
10004: PUSH
10005: FOR_IN
10006: IFFALSE 10083
// if BuildingStatus ( b ) = bs_build then
10008: LD_VAR 0 2
10012: PPUSH
10013: CALL_OW 461
10017: PUSH
10018: LD_INT 1
10020: EQUAL
10021: IFFALSE 10081
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10023: LD_VAR 0 4
10027: PPUSH
10028: LD_STRING h
10030: PUSH
10031: LD_VAR 0 2
10035: PPUSH
10036: CALL_OW 250
10040: PUSH
10041: LD_VAR 0 2
10045: PPUSH
10046: CALL_OW 251
10050: PUSH
10051: LD_VAR 0 2
10055: PUSH
10056: LD_INT 0
10058: PUSH
10059: LD_INT 0
10061: PUSH
10062: LD_INT 0
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: PPUSH
10077: CALL_OW 446
10081: GO 10005
10083: POP
10084: POP
// end ;
10085: LD_VAR 0 3
10089: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
10095: PPUSH
10096: PPUSH
10097: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10098: LD_VAR 0 1
10102: NOT
10103: PUSH
10104: LD_VAR 0 1
10108: PPUSH
10109: CALL_OW 263
10113: PUSH
10114: LD_INT 2
10116: NONEQUAL
10117: OR
10118: IFFALSE 10122
// exit ;
10120: GO 10438
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10122: LD_ADDR_VAR 0 6
10126: PUSH
10127: LD_INT 22
10129: PUSH
10130: LD_VAR 0 1
10134: PPUSH
10135: CALL_OW 255
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 2
10146: PUSH
10147: LD_INT 30
10149: PUSH
10150: LD_INT 36
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: LD_INT 34
10159: PUSH
10160: LD_INT 31
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PPUSH
10176: CALL_OW 69
10180: ST_TO_ADDR
// if not tmp then
10181: LD_VAR 0 6
10185: NOT
10186: IFFALSE 10190
// exit ;
10188: GO 10438
// result := [ ] ;
10190: LD_ADDR_VAR 0 2
10194: PUSH
10195: EMPTY
10196: ST_TO_ADDR
// for i in tmp do
10197: LD_ADDR_VAR 0 3
10201: PUSH
10202: LD_VAR 0 6
10206: PUSH
10207: FOR_IN
10208: IFFALSE 10279
// begin t := UnitsInside ( i ) ;
10210: LD_ADDR_VAR 0 4
10214: PUSH
10215: LD_VAR 0 3
10219: PPUSH
10220: CALL_OW 313
10224: ST_TO_ADDR
// if t then
10225: LD_VAR 0 4
10229: IFFALSE 10277
// for j in t do
10231: LD_ADDR_VAR 0 7
10235: PUSH
10236: LD_VAR 0 4
10240: PUSH
10241: FOR_IN
10242: IFFALSE 10275
// result := Replace ( result , result + 1 , j ) ;
10244: LD_ADDR_VAR 0 2
10248: PUSH
10249: LD_VAR 0 2
10253: PPUSH
10254: LD_VAR 0 2
10258: PUSH
10259: LD_INT 1
10261: PLUS
10262: PPUSH
10263: LD_VAR 0 7
10267: PPUSH
10268: CALL_OW 1
10272: ST_TO_ADDR
10273: GO 10241
10275: POP
10276: POP
// end ;
10277: GO 10207
10279: POP
10280: POP
// if not result then
10281: LD_VAR 0 2
10285: NOT
10286: IFFALSE 10290
// exit ;
10288: GO 10438
// mech := result [ 1 ] ;
10290: LD_ADDR_VAR 0 5
10294: PUSH
10295: LD_VAR 0 2
10299: PUSH
10300: LD_INT 1
10302: ARRAY
10303: ST_TO_ADDR
// if result > 1 then
10304: LD_VAR 0 2
10308: PUSH
10309: LD_INT 1
10311: GREATER
10312: IFFALSE 10424
// begin for i = 2 to result do
10314: LD_ADDR_VAR 0 3
10318: PUSH
10319: DOUBLE
10320: LD_INT 2
10322: DEC
10323: ST_TO_ADDR
10324: LD_VAR 0 2
10328: PUSH
10329: FOR_TO
10330: IFFALSE 10422
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10332: LD_ADDR_VAR 0 4
10336: PUSH
10337: LD_VAR 0 2
10341: PUSH
10342: LD_VAR 0 3
10346: ARRAY
10347: PPUSH
10348: LD_INT 3
10350: PPUSH
10351: CALL_OW 259
10355: PUSH
10356: LD_VAR 0 2
10360: PUSH
10361: LD_VAR 0 3
10365: ARRAY
10366: PPUSH
10367: CALL_OW 432
10371: MINUS
10372: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10373: LD_VAR 0 4
10377: PUSH
10378: LD_VAR 0 5
10382: PPUSH
10383: LD_INT 3
10385: PPUSH
10386: CALL_OW 259
10390: PUSH
10391: LD_VAR 0 5
10395: PPUSH
10396: CALL_OW 432
10400: MINUS
10401: GREATEREQUAL
10402: IFFALSE 10420
// mech := result [ i ] ;
10404: LD_ADDR_VAR 0 5
10408: PUSH
10409: LD_VAR 0 2
10413: PUSH
10414: LD_VAR 0 3
10418: ARRAY
10419: ST_TO_ADDR
// end ;
10420: GO 10329
10422: POP
10423: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10424: LD_VAR 0 1
10428: PPUSH
10429: LD_VAR 0 5
10433: PPUSH
10434: CALL_OW 135
// end ;
10438: LD_VAR 0 2
10442: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10443: LD_INT 0
10445: PPUSH
10446: PPUSH
10447: PPUSH
10448: PPUSH
10449: PPUSH
10450: PPUSH
10451: PPUSH
10452: PPUSH
10453: PPUSH
10454: PPUSH
10455: PPUSH
10456: PPUSH
10457: PPUSH
// result := [ ] ;
10458: LD_ADDR_VAR 0 7
10462: PUSH
10463: EMPTY
10464: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10465: LD_VAR 0 1
10469: PPUSH
10470: CALL_OW 266
10474: PUSH
10475: LD_INT 0
10477: PUSH
10478: LD_INT 1
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: IN
10485: NOT
10486: IFFALSE 10490
// exit ;
10488: GO 12124
// if name then
10490: LD_VAR 0 3
10494: IFFALSE 10510
// SetBName ( base_dep , name ) ;
10496: LD_VAR 0 1
10500: PPUSH
10501: LD_VAR 0 3
10505: PPUSH
10506: CALL_OW 500
// base := GetBase ( base_dep ) ;
10510: LD_ADDR_VAR 0 15
10514: PUSH
10515: LD_VAR 0 1
10519: PPUSH
10520: CALL_OW 274
10524: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10525: LD_ADDR_VAR 0 16
10529: PUSH
10530: LD_VAR 0 1
10534: PPUSH
10535: CALL_OW 255
10539: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10540: LD_ADDR_VAR 0 17
10544: PUSH
10545: LD_VAR 0 1
10549: PPUSH
10550: CALL_OW 248
10554: ST_TO_ADDR
// if sources then
10555: LD_VAR 0 5
10559: IFFALSE 10606
// for i = 1 to 3 do
10561: LD_ADDR_VAR 0 8
10565: PUSH
10566: DOUBLE
10567: LD_INT 1
10569: DEC
10570: ST_TO_ADDR
10571: LD_INT 3
10573: PUSH
10574: FOR_TO
10575: IFFALSE 10604
// AddResourceType ( base , i , sources [ i ] ) ;
10577: LD_VAR 0 15
10581: PPUSH
10582: LD_VAR 0 8
10586: PPUSH
10587: LD_VAR 0 5
10591: PUSH
10592: LD_VAR 0 8
10596: ARRAY
10597: PPUSH
10598: CALL_OW 276
10602: GO 10574
10604: POP
10605: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10606: LD_ADDR_VAR 0 18
10610: PUSH
10611: LD_VAR 0 15
10615: PPUSH
10616: LD_VAR 0 2
10620: PPUSH
10621: LD_INT 1
10623: PPUSH
10624: CALL 9867 0 3
10628: ST_TO_ADDR
// InitHc ;
10629: CALL_OW 19
// InitUc ;
10633: CALL_OW 18
// uc_side := side ;
10637: LD_ADDR_OWVAR 20
10641: PUSH
10642: LD_VAR 0 16
10646: ST_TO_ADDR
// uc_nation := nation ;
10647: LD_ADDR_OWVAR 21
10651: PUSH
10652: LD_VAR 0 17
10656: ST_TO_ADDR
// if buildings then
10657: LD_VAR 0 18
10661: IFFALSE 11983
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10663: LD_ADDR_VAR 0 19
10667: PUSH
10668: LD_VAR 0 18
10672: PPUSH
10673: LD_INT 2
10675: PUSH
10676: LD_INT 30
10678: PUSH
10679: LD_INT 29
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 30
10688: PUSH
10689: LD_INT 30
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: PPUSH
10701: CALL_OW 72
10705: ST_TO_ADDR
// if tmp then
10706: LD_VAR 0 19
10710: IFFALSE 10758
// for i in tmp do
10712: LD_ADDR_VAR 0 8
10716: PUSH
10717: LD_VAR 0 19
10721: PUSH
10722: FOR_IN
10723: IFFALSE 10756
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10725: LD_VAR 0 8
10729: PPUSH
10730: CALL_OW 250
10734: PPUSH
10735: LD_VAR 0 8
10739: PPUSH
10740: CALL_OW 251
10744: PPUSH
10745: LD_VAR 0 16
10749: PPUSH
10750: CALL_OW 441
10754: GO 10722
10756: POP
10757: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10758: LD_VAR 0 18
10762: PPUSH
10763: LD_INT 2
10765: PUSH
10766: LD_INT 30
10768: PUSH
10769: LD_INT 32
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 30
10778: PUSH
10779: LD_INT 33
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: PPUSH
10791: CALL_OW 72
10795: IFFALSE 10883
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10797: LD_ADDR_VAR 0 8
10801: PUSH
10802: LD_VAR 0 18
10806: PPUSH
10807: LD_INT 2
10809: PUSH
10810: LD_INT 30
10812: PUSH
10813: LD_INT 32
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 30
10822: PUSH
10823: LD_INT 33
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: LIST
10834: PPUSH
10835: CALL_OW 72
10839: PUSH
10840: FOR_IN
10841: IFFALSE 10881
// begin if not GetBWeapon ( i ) then
10843: LD_VAR 0 8
10847: PPUSH
10848: CALL_OW 269
10852: NOT
10853: IFFALSE 10879
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10855: LD_VAR 0 8
10859: PPUSH
10860: LD_VAR 0 8
10864: PPUSH
10865: LD_VAR 0 2
10869: PPUSH
10870: CALL 12129 0 2
10874: PPUSH
10875: CALL_OW 431
// end ;
10879: GO 10840
10881: POP
10882: POP
// end ; for i = 1 to personel do
10883: LD_ADDR_VAR 0 8
10887: PUSH
10888: DOUBLE
10889: LD_INT 1
10891: DEC
10892: ST_TO_ADDR
10893: LD_VAR 0 6
10897: PUSH
10898: FOR_TO
10899: IFFALSE 11963
// begin if i > 4 then
10901: LD_VAR 0 8
10905: PUSH
10906: LD_INT 4
10908: GREATER
10909: IFFALSE 10913
// break ;
10911: GO 11963
// case i of 1 :
10913: LD_VAR 0 8
10917: PUSH
10918: LD_INT 1
10920: DOUBLE
10921: EQUAL
10922: IFTRUE 10926
10924: GO 11006
10926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10927: LD_ADDR_VAR 0 12
10931: PUSH
10932: LD_VAR 0 18
10936: PPUSH
10937: LD_INT 22
10939: PUSH
10940: LD_VAR 0 16
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 58
10951: PUSH
10952: EMPTY
10953: LIST
10954: PUSH
10955: LD_INT 2
10957: PUSH
10958: LD_INT 30
10960: PUSH
10961: LD_INT 32
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: LD_INT 30
10970: PUSH
10971: LD_INT 4
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: LD_INT 30
10980: PUSH
10981: LD_INT 5
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: PPUSH
10999: CALL_OW 72
11003: ST_TO_ADDR
11004: GO 11228
11006: LD_INT 2
11008: DOUBLE
11009: EQUAL
11010: IFTRUE 11014
11012: GO 11076
11014: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11015: LD_ADDR_VAR 0 12
11019: PUSH
11020: LD_VAR 0 18
11024: PPUSH
11025: LD_INT 22
11027: PUSH
11028: LD_VAR 0 16
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 2
11039: PUSH
11040: LD_INT 30
11042: PUSH
11043: LD_INT 0
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 30
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PPUSH
11069: CALL_OW 72
11073: ST_TO_ADDR
11074: GO 11228
11076: LD_INT 3
11078: DOUBLE
11079: EQUAL
11080: IFTRUE 11084
11082: GO 11146
11084: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11085: LD_ADDR_VAR 0 12
11089: PUSH
11090: LD_VAR 0 18
11094: PPUSH
11095: LD_INT 22
11097: PUSH
11098: LD_VAR 0 16
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 2
11109: PUSH
11110: LD_INT 30
11112: PUSH
11113: LD_INT 2
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 30
11122: PUSH
11123: LD_INT 3
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PPUSH
11139: CALL_OW 72
11143: ST_TO_ADDR
11144: GO 11228
11146: LD_INT 4
11148: DOUBLE
11149: EQUAL
11150: IFTRUE 11154
11152: GO 11227
11154: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11155: LD_ADDR_VAR 0 12
11159: PUSH
11160: LD_VAR 0 18
11164: PPUSH
11165: LD_INT 22
11167: PUSH
11168: LD_VAR 0 16
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 2
11179: PUSH
11180: LD_INT 30
11182: PUSH
11183: LD_INT 6
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 30
11192: PUSH
11193: LD_INT 7
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: LD_INT 30
11202: PUSH
11203: LD_INT 8
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PPUSH
11220: CALL_OW 72
11224: ST_TO_ADDR
11225: GO 11228
11227: POP
// if i = 1 then
11228: LD_VAR 0 8
11232: PUSH
11233: LD_INT 1
11235: EQUAL
11236: IFFALSE 11347
// begin tmp := [ ] ;
11238: LD_ADDR_VAR 0 19
11242: PUSH
11243: EMPTY
11244: ST_TO_ADDR
// for j in f do
11245: LD_ADDR_VAR 0 9
11249: PUSH
11250: LD_VAR 0 12
11254: PUSH
11255: FOR_IN
11256: IFFALSE 11329
// if GetBType ( j ) = b_bunker then
11258: LD_VAR 0 9
11262: PPUSH
11263: CALL_OW 266
11267: PUSH
11268: LD_INT 32
11270: EQUAL
11271: IFFALSE 11298
// tmp := Insert ( tmp , 1 , j ) else
11273: LD_ADDR_VAR 0 19
11277: PUSH
11278: LD_VAR 0 19
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: LD_VAR 0 9
11290: PPUSH
11291: CALL_OW 2
11295: ST_TO_ADDR
11296: GO 11327
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11298: LD_ADDR_VAR 0 19
11302: PUSH
11303: LD_VAR 0 19
11307: PPUSH
11308: LD_VAR 0 19
11312: PUSH
11313: LD_INT 1
11315: PLUS
11316: PPUSH
11317: LD_VAR 0 9
11321: PPUSH
11322: CALL_OW 2
11326: ST_TO_ADDR
11327: GO 11255
11329: POP
11330: POP
// if tmp then
11331: LD_VAR 0 19
11335: IFFALSE 11347
// f := tmp ;
11337: LD_ADDR_VAR 0 12
11341: PUSH
11342: LD_VAR 0 19
11346: ST_TO_ADDR
// end ; x := personel [ i ] ;
11347: LD_ADDR_VAR 0 13
11351: PUSH
11352: LD_VAR 0 6
11356: PUSH
11357: LD_VAR 0 8
11361: ARRAY
11362: ST_TO_ADDR
// if x = - 1 then
11363: LD_VAR 0 13
11367: PUSH
11368: LD_INT 1
11370: NEG
11371: EQUAL
11372: IFFALSE 11581
// begin for j in f do
11374: LD_ADDR_VAR 0 9
11378: PUSH
11379: LD_VAR 0 12
11383: PUSH
11384: FOR_IN
11385: IFFALSE 11577
// repeat InitHc ;
11387: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11391: LD_VAR 0 9
11395: PPUSH
11396: CALL_OW 266
11400: PUSH
11401: LD_INT 5
11403: EQUAL
11404: IFFALSE 11474
// begin if UnitsInside ( j ) < 3 then
11406: LD_VAR 0 9
11410: PPUSH
11411: CALL_OW 313
11415: PUSH
11416: LD_INT 3
11418: LESS
11419: IFFALSE 11455
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11421: LD_INT 0
11423: PPUSH
11424: LD_INT 5
11426: PUSH
11427: LD_INT 8
11429: PUSH
11430: LD_INT 9
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: LD_VAR 0 17
11442: ARRAY
11443: PPUSH
11444: LD_VAR 0 4
11448: PPUSH
11449: CALL_OW 380
11453: GO 11472
// PrepareHuman ( false , i , skill ) ;
11455: LD_INT 0
11457: PPUSH
11458: LD_VAR 0 8
11462: PPUSH
11463: LD_VAR 0 4
11467: PPUSH
11468: CALL_OW 380
// end else
11472: GO 11491
// PrepareHuman ( false , i , skill ) ;
11474: LD_INT 0
11476: PPUSH
11477: LD_VAR 0 8
11481: PPUSH
11482: LD_VAR 0 4
11486: PPUSH
11487: CALL_OW 380
// un := CreateHuman ;
11491: LD_ADDR_VAR 0 14
11495: PUSH
11496: CALL_OW 44
11500: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11501: LD_ADDR_VAR 0 7
11505: PUSH
11506: LD_VAR 0 7
11510: PPUSH
11511: LD_INT 1
11513: PPUSH
11514: LD_VAR 0 14
11518: PPUSH
11519: CALL_OW 2
11523: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11524: LD_VAR 0 14
11528: PPUSH
11529: LD_VAR 0 9
11533: PPUSH
11534: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11538: LD_VAR 0 9
11542: PPUSH
11543: CALL_OW 313
11547: PUSH
11548: LD_INT 6
11550: EQUAL
11551: PUSH
11552: LD_VAR 0 9
11556: PPUSH
11557: CALL_OW 266
11561: PUSH
11562: LD_INT 32
11564: PUSH
11565: LD_INT 31
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: IN
11572: OR
11573: IFFALSE 11387
11575: GO 11384
11577: POP
11578: POP
// end else
11579: GO 11961
// for j = 1 to x do
11581: LD_ADDR_VAR 0 9
11585: PUSH
11586: DOUBLE
11587: LD_INT 1
11589: DEC
11590: ST_TO_ADDR
11591: LD_VAR 0 13
11595: PUSH
11596: FOR_TO
11597: IFFALSE 11959
// begin InitHc ;
11599: CALL_OW 19
// if not f then
11603: LD_VAR 0 12
11607: NOT
11608: IFFALSE 11697
// begin PrepareHuman ( false , i , skill ) ;
11610: LD_INT 0
11612: PPUSH
11613: LD_VAR 0 8
11617: PPUSH
11618: LD_VAR 0 4
11622: PPUSH
11623: CALL_OW 380
// un := CreateHuman ;
11627: LD_ADDR_VAR 0 14
11631: PUSH
11632: CALL_OW 44
11636: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11637: LD_ADDR_VAR 0 7
11641: PUSH
11642: LD_VAR 0 7
11646: PPUSH
11647: LD_INT 1
11649: PPUSH
11650: LD_VAR 0 14
11654: PPUSH
11655: CALL_OW 2
11659: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11660: LD_VAR 0 14
11664: PPUSH
11665: LD_VAR 0 1
11669: PPUSH
11670: CALL_OW 250
11674: PPUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 251
11684: PPUSH
11685: LD_INT 10
11687: PPUSH
11688: LD_INT 0
11690: PPUSH
11691: CALL_OW 50
// continue ;
11695: GO 11596
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11697: LD_VAR 0 12
11701: PUSH
11702: LD_INT 1
11704: ARRAY
11705: PPUSH
11706: CALL_OW 313
11710: PUSH
11711: LD_VAR 0 12
11715: PUSH
11716: LD_INT 1
11718: ARRAY
11719: PPUSH
11720: CALL_OW 266
11724: PUSH
11725: LD_INT 32
11727: PUSH
11728: LD_INT 31
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: IN
11735: AND
11736: PUSH
11737: LD_VAR 0 12
11741: PUSH
11742: LD_INT 1
11744: ARRAY
11745: PPUSH
11746: CALL_OW 313
11750: PUSH
11751: LD_INT 6
11753: EQUAL
11754: OR
11755: IFFALSE 11775
// f := Delete ( f , 1 ) ;
11757: LD_ADDR_VAR 0 12
11761: PUSH
11762: LD_VAR 0 12
11766: PPUSH
11767: LD_INT 1
11769: PPUSH
11770: CALL_OW 3
11774: ST_TO_ADDR
// if not f then
11775: LD_VAR 0 12
11779: NOT
11780: IFFALSE 11798
// begin x := x + 2 ;
11782: LD_ADDR_VAR 0 13
11786: PUSH
11787: LD_VAR 0 13
11791: PUSH
11792: LD_INT 2
11794: PLUS
11795: ST_TO_ADDR
// continue ;
11796: GO 11596
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11798: LD_VAR 0 12
11802: PUSH
11803: LD_INT 1
11805: ARRAY
11806: PPUSH
11807: CALL_OW 266
11811: PUSH
11812: LD_INT 5
11814: EQUAL
11815: IFFALSE 11889
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11817: LD_VAR 0 12
11821: PUSH
11822: LD_INT 1
11824: ARRAY
11825: PPUSH
11826: CALL_OW 313
11830: PUSH
11831: LD_INT 3
11833: LESS
11834: IFFALSE 11870
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11836: LD_INT 0
11838: PPUSH
11839: LD_INT 5
11841: PUSH
11842: LD_INT 8
11844: PUSH
11845: LD_INT 9
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: PUSH
11853: LD_VAR 0 17
11857: ARRAY
11858: PPUSH
11859: LD_VAR 0 4
11863: PPUSH
11864: CALL_OW 380
11868: GO 11887
// PrepareHuman ( false , i , skill ) ;
11870: LD_INT 0
11872: PPUSH
11873: LD_VAR 0 8
11877: PPUSH
11878: LD_VAR 0 4
11882: PPUSH
11883: CALL_OW 380
// end else
11887: GO 11906
// PrepareHuman ( false , i , skill ) ;
11889: LD_INT 0
11891: PPUSH
11892: LD_VAR 0 8
11896: PPUSH
11897: LD_VAR 0 4
11901: PPUSH
11902: CALL_OW 380
// un := CreateHuman ;
11906: LD_ADDR_VAR 0 14
11910: PUSH
11911: CALL_OW 44
11915: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11916: LD_ADDR_VAR 0 7
11920: PUSH
11921: LD_VAR 0 7
11925: PPUSH
11926: LD_INT 1
11928: PPUSH
11929: LD_VAR 0 14
11933: PPUSH
11934: CALL_OW 2
11938: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11939: LD_VAR 0 14
11943: PPUSH
11944: LD_VAR 0 12
11948: PUSH
11949: LD_INT 1
11951: ARRAY
11952: PPUSH
11953: CALL_OW 52
// end ;
11957: GO 11596
11959: POP
11960: POP
// end ;
11961: GO 10898
11963: POP
11964: POP
// result := result ^ buildings ;
11965: LD_ADDR_VAR 0 7
11969: PUSH
11970: LD_VAR 0 7
11974: PUSH
11975: LD_VAR 0 18
11979: ADD
11980: ST_TO_ADDR
// end else
11981: GO 12124
// begin for i = 1 to personel do
11983: LD_ADDR_VAR 0 8
11987: PUSH
11988: DOUBLE
11989: LD_INT 1
11991: DEC
11992: ST_TO_ADDR
11993: LD_VAR 0 6
11997: PUSH
11998: FOR_TO
11999: IFFALSE 12122
// begin if i > 4 then
12001: LD_VAR 0 8
12005: PUSH
12006: LD_INT 4
12008: GREATER
12009: IFFALSE 12013
// break ;
12011: GO 12122
// x := personel [ i ] ;
12013: LD_ADDR_VAR 0 13
12017: PUSH
12018: LD_VAR 0 6
12022: PUSH
12023: LD_VAR 0 8
12027: ARRAY
12028: ST_TO_ADDR
// if x = - 1 then
12029: LD_VAR 0 13
12033: PUSH
12034: LD_INT 1
12036: NEG
12037: EQUAL
12038: IFFALSE 12042
// continue ;
12040: GO 11998
// PrepareHuman ( false , i , skill ) ;
12042: LD_INT 0
12044: PPUSH
12045: LD_VAR 0 8
12049: PPUSH
12050: LD_VAR 0 4
12054: PPUSH
12055: CALL_OW 380
// un := CreateHuman ;
12059: LD_ADDR_VAR 0 14
12063: PUSH
12064: CALL_OW 44
12068: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12069: LD_VAR 0 14
12073: PPUSH
12074: LD_VAR 0 1
12078: PPUSH
12079: CALL_OW 250
12083: PPUSH
12084: LD_VAR 0 1
12088: PPUSH
12089: CALL_OW 251
12093: PPUSH
12094: LD_INT 10
12096: PPUSH
12097: LD_INT 0
12099: PPUSH
12100: CALL_OW 50
// result := result ^ un ;
12104: LD_ADDR_VAR 0 7
12108: PUSH
12109: LD_VAR 0 7
12113: PUSH
12114: LD_VAR 0 14
12118: ADD
12119: ST_TO_ADDR
// end ;
12120: GO 11998
12122: POP
12123: POP
// end ; end ;
12124: LD_VAR 0 7
12128: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12129: LD_INT 0
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
12136: PPUSH
12137: PPUSH
12138: PPUSH
12139: PPUSH
12140: PPUSH
12141: PPUSH
12142: PPUSH
12143: PPUSH
12144: PPUSH
12145: PPUSH
12146: PPUSH
// result := false ;
12147: LD_ADDR_VAR 0 3
12151: PUSH
12152: LD_INT 0
12154: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12155: LD_VAR 0 1
12159: NOT
12160: PUSH
12161: LD_VAR 0 1
12165: PPUSH
12166: CALL_OW 266
12170: PUSH
12171: LD_INT 32
12173: PUSH
12174: LD_INT 33
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: IN
12181: NOT
12182: OR
12183: IFFALSE 12187
// exit ;
12185: GO 13296
// nat := GetNation ( tower ) ;
12187: LD_ADDR_VAR 0 12
12191: PUSH
12192: LD_VAR 0 1
12196: PPUSH
12197: CALL_OW 248
12201: ST_TO_ADDR
// side := GetSide ( tower ) ;
12202: LD_ADDR_VAR 0 16
12206: PUSH
12207: LD_VAR 0 1
12211: PPUSH
12212: CALL_OW 255
12216: ST_TO_ADDR
// x := GetX ( tower ) ;
12217: LD_ADDR_VAR 0 10
12221: PUSH
12222: LD_VAR 0 1
12226: PPUSH
12227: CALL_OW 250
12231: ST_TO_ADDR
// y := GetY ( tower ) ;
12232: LD_ADDR_VAR 0 11
12236: PUSH
12237: LD_VAR 0 1
12241: PPUSH
12242: CALL_OW 251
12246: ST_TO_ADDR
// if not x or not y then
12247: LD_VAR 0 10
12251: NOT
12252: PUSH
12253: LD_VAR 0 11
12257: NOT
12258: OR
12259: IFFALSE 12263
// exit ;
12261: GO 13296
// weapon := 0 ;
12263: LD_ADDR_VAR 0 18
12267: PUSH
12268: LD_INT 0
12270: ST_TO_ADDR
// fac_list := [ ] ;
12271: LD_ADDR_VAR 0 17
12275: PUSH
12276: EMPTY
12277: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12278: LD_ADDR_VAR 0 6
12282: PUSH
12283: LD_VAR 0 1
12287: PPUSH
12288: CALL_OW 274
12292: PPUSH
12293: LD_VAR 0 2
12297: PPUSH
12298: LD_INT 0
12300: PPUSH
12301: CALL 9867 0 3
12305: PPUSH
12306: LD_INT 30
12308: PUSH
12309: LD_INT 3
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PPUSH
12316: CALL_OW 72
12320: ST_TO_ADDR
// if not factories then
12321: LD_VAR 0 6
12325: NOT
12326: IFFALSE 12330
// exit ;
12328: GO 13296
// for i in factories do
12330: LD_ADDR_VAR 0 8
12334: PUSH
12335: LD_VAR 0 6
12339: PUSH
12340: FOR_IN
12341: IFFALSE 12366
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12343: LD_ADDR_VAR 0 17
12347: PUSH
12348: LD_VAR 0 17
12352: PUSH
12353: LD_VAR 0 8
12357: PPUSH
12358: CALL_OW 478
12362: UNION
12363: ST_TO_ADDR
12364: GO 12340
12366: POP
12367: POP
// if not fac_list then
12368: LD_VAR 0 17
12372: NOT
12373: IFFALSE 12377
// exit ;
12375: GO 13296
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12377: LD_ADDR_VAR 0 5
12381: PUSH
12382: LD_INT 4
12384: PUSH
12385: LD_INT 5
12387: PUSH
12388: LD_INT 9
12390: PUSH
12391: LD_INT 10
12393: PUSH
12394: LD_INT 6
12396: PUSH
12397: LD_INT 7
12399: PUSH
12400: LD_INT 11
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 27
12414: PUSH
12415: LD_INT 28
12417: PUSH
12418: LD_INT 26
12420: PUSH
12421: LD_INT 30
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 43
12432: PUSH
12433: LD_INT 44
12435: PUSH
12436: LD_INT 46
12438: PUSH
12439: LD_INT 45
12441: PUSH
12442: LD_INT 47
12444: PUSH
12445: LD_INT 49
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: PUSH
12461: LD_VAR 0 12
12465: ARRAY
12466: ST_TO_ADDR
// list := list isect fac_list ;
12467: LD_ADDR_VAR 0 5
12471: PUSH
12472: LD_VAR 0 5
12476: PUSH
12477: LD_VAR 0 17
12481: ISECT
12482: ST_TO_ADDR
// if not list then
12483: LD_VAR 0 5
12487: NOT
12488: IFFALSE 12492
// exit ;
12490: GO 13296
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12492: LD_VAR 0 12
12496: PUSH
12497: LD_INT 3
12499: EQUAL
12500: PUSH
12501: LD_INT 49
12503: PUSH
12504: LD_VAR 0 5
12508: IN
12509: AND
12510: PUSH
12511: LD_INT 31
12513: PPUSH
12514: LD_VAR 0 16
12518: PPUSH
12519: CALL_OW 321
12523: PUSH
12524: LD_INT 2
12526: EQUAL
12527: AND
12528: IFFALSE 12588
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12530: LD_INT 22
12532: PUSH
12533: LD_VAR 0 16
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 35
12544: PUSH
12545: LD_INT 49
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 91
12554: PUSH
12555: LD_VAR 0 1
12559: PUSH
12560: LD_INT 10
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: LIST
12572: PPUSH
12573: CALL_OW 69
12577: NOT
12578: IFFALSE 12588
// weapon := ru_time_lapser ;
12580: LD_ADDR_VAR 0 18
12584: PUSH
12585: LD_INT 49
12587: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12588: LD_VAR 0 12
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: LD_INT 2
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: IN
12603: PUSH
12604: LD_INT 11
12606: PUSH
12607: LD_VAR 0 5
12611: IN
12612: PUSH
12613: LD_INT 30
12615: PUSH
12616: LD_VAR 0 5
12620: IN
12621: OR
12622: AND
12623: PUSH
12624: LD_INT 6
12626: PPUSH
12627: LD_VAR 0 16
12631: PPUSH
12632: CALL_OW 321
12636: PUSH
12637: LD_INT 2
12639: EQUAL
12640: AND
12641: IFFALSE 12806
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12643: LD_INT 22
12645: PUSH
12646: LD_VAR 0 16
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 2
12657: PUSH
12658: LD_INT 35
12660: PUSH
12661: LD_INT 11
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 35
12670: PUSH
12671: LD_INT 30
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 91
12685: PUSH
12686: LD_VAR 0 1
12690: PUSH
12691: LD_INT 18
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: PPUSH
12704: CALL_OW 69
12708: NOT
12709: PUSH
12710: LD_INT 22
12712: PUSH
12713: LD_VAR 0 16
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 2
12724: PUSH
12725: LD_INT 30
12727: PUSH
12728: LD_INT 32
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 30
12737: PUSH
12738: LD_INT 33
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 91
12752: PUSH
12753: LD_VAR 0 1
12757: PUSH
12758: LD_INT 12
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: PUSH
12771: EMPTY
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: PUSH
12779: LD_INT 2
12781: GREATER
12782: AND
12783: IFFALSE 12806
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12785: LD_ADDR_VAR 0 18
12789: PUSH
12790: LD_INT 11
12792: PUSH
12793: LD_INT 30
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: LD_VAR 0 12
12804: ARRAY
12805: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12806: LD_VAR 0 18
12810: NOT
12811: PUSH
12812: LD_INT 40
12814: PPUSH
12815: LD_VAR 0 16
12819: PPUSH
12820: CALL_OW 321
12824: PUSH
12825: LD_INT 2
12827: EQUAL
12828: AND
12829: PUSH
12830: LD_INT 7
12832: PUSH
12833: LD_VAR 0 5
12837: IN
12838: PUSH
12839: LD_INT 28
12841: PUSH
12842: LD_VAR 0 5
12846: IN
12847: OR
12848: PUSH
12849: LD_INT 45
12851: PUSH
12852: LD_VAR 0 5
12856: IN
12857: OR
12858: AND
12859: IFFALSE 13113
// begin hex := GetHexInfo ( x , y ) ;
12861: LD_ADDR_VAR 0 4
12865: PUSH
12866: LD_VAR 0 10
12870: PPUSH
12871: LD_VAR 0 11
12875: PPUSH
12876: CALL_OW 546
12880: ST_TO_ADDR
// if hex [ 1 ] then
12881: LD_VAR 0 4
12885: PUSH
12886: LD_INT 1
12888: ARRAY
12889: IFFALSE 12893
// exit ;
12891: GO 13296
// height := hex [ 2 ] ;
12893: LD_ADDR_VAR 0 15
12897: PUSH
12898: LD_VAR 0 4
12902: PUSH
12903: LD_INT 2
12905: ARRAY
12906: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12907: LD_ADDR_VAR 0 14
12911: PUSH
12912: LD_INT 0
12914: PUSH
12915: LD_INT 2
12917: PUSH
12918: LD_INT 3
12920: PUSH
12921: LD_INT 5
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: ST_TO_ADDR
// for i in tmp do
12930: LD_ADDR_VAR 0 8
12934: PUSH
12935: LD_VAR 0 14
12939: PUSH
12940: FOR_IN
12941: IFFALSE 13111
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12943: LD_ADDR_VAR 0 9
12947: PUSH
12948: LD_VAR 0 10
12952: PPUSH
12953: LD_VAR 0 8
12957: PPUSH
12958: LD_INT 5
12960: PPUSH
12961: CALL_OW 272
12965: PUSH
12966: LD_VAR 0 11
12970: PPUSH
12971: LD_VAR 0 8
12975: PPUSH
12976: LD_INT 5
12978: PPUSH
12979: CALL_OW 273
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12988: LD_VAR 0 9
12992: PUSH
12993: LD_INT 1
12995: ARRAY
12996: PPUSH
12997: LD_VAR 0 9
13001: PUSH
13002: LD_INT 2
13004: ARRAY
13005: PPUSH
13006: CALL_OW 488
13010: IFFALSE 13109
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13012: LD_ADDR_VAR 0 4
13016: PUSH
13017: LD_VAR 0 9
13021: PUSH
13022: LD_INT 1
13024: ARRAY
13025: PPUSH
13026: LD_VAR 0 9
13030: PUSH
13031: LD_INT 2
13033: ARRAY
13034: PPUSH
13035: CALL_OW 546
13039: ST_TO_ADDR
// if hex [ 1 ] then
13040: LD_VAR 0 4
13044: PUSH
13045: LD_INT 1
13047: ARRAY
13048: IFFALSE 13052
// continue ;
13050: GO 12940
// h := hex [ 2 ] ;
13052: LD_ADDR_VAR 0 13
13056: PUSH
13057: LD_VAR 0 4
13061: PUSH
13062: LD_INT 2
13064: ARRAY
13065: ST_TO_ADDR
// if h + 7 < height then
13066: LD_VAR 0 13
13070: PUSH
13071: LD_INT 7
13073: PLUS
13074: PUSH
13075: LD_VAR 0 15
13079: LESS
13080: IFFALSE 13109
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13082: LD_ADDR_VAR 0 18
13086: PUSH
13087: LD_INT 7
13089: PUSH
13090: LD_INT 28
13092: PUSH
13093: LD_INT 45
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: LD_VAR 0 12
13105: ARRAY
13106: ST_TO_ADDR
// break ;
13107: GO 13111
// end ; end ; end ;
13109: GO 12940
13111: POP
13112: POP
// end ; if not weapon then
13113: LD_VAR 0 18
13117: NOT
13118: IFFALSE 13178
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13120: LD_ADDR_VAR 0 5
13124: PUSH
13125: LD_VAR 0 5
13129: PUSH
13130: LD_INT 11
13132: PUSH
13133: LD_INT 30
13135: PUSH
13136: LD_INT 49
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: DIFF
13144: ST_TO_ADDR
// if not list then
13145: LD_VAR 0 5
13149: NOT
13150: IFFALSE 13154
// exit ;
13152: GO 13296
// weapon := list [ rand ( 1 , list ) ] ;
13154: LD_ADDR_VAR 0 18
13158: PUSH
13159: LD_VAR 0 5
13163: PUSH
13164: LD_INT 1
13166: PPUSH
13167: LD_VAR 0 5
13171: PPUSH
13172: CALL_OW 12
13176: ARRAY
13177: ST_TO_ADDR
// end ; if weapon then
13178: LD_VAR 0 18
13182: IFFALSE 13296
// begin tmp := CostOfWeapon ( weapon ) ;
13184: LD_ADDR_VAR 0 14
13188: PUSH
13189: LD_VAR 0 18
13193: PPUSH
13194: CALL_OW 451
13198: ST_TO_ADDR
// j := GetBase ( tower ) ;
13199: LD_ADDR_VAR 0 9
13203: PUSH
13204: LD_VAR 0 1
13208: PPUSH
13209: CALL_OW 274
13213: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13214: LD_VAR 0 9
13218: PPUSH
13219: LD_INT 1
13221: PPUSH
13222: CALL_OW 275
13226: PUSH
13227: LD_VAR 0 14
13231: PUSH
13232: LD_INT 1
13234: ARRAY
13235: GREATEREQUAL
13236: PUSH
13237: LD_VAR 0 9
13241: PPUSH
13242: LD_INT 2
13244: PPUSH
13245: CALL_OW 275
13249: PUSH
13250: LD_VAR 0 14
13254: PUSH
13255: LD_INT 2
13257: ARRAY
13258: GREATEREQUAL
13259: AND
13260: PUSH
13261: LD_VAR 0 9
13265: PPUSH
13266: LD_INT 3
13268: PPUSH
13269: CALL_OW 275
13273: PUSH
13274: LD_VAR 0 14
13278: PUSH
13279: LD_INT 3
13281: ARRAY
13282: GREATEREQUAL
13283: AND
13284: IFFALSE 13296
// result := weapon ;
13286: LD_ADDR_VAR 0 3
13290: PUSH
13291: LD_VAR 0 18
13295: ST_TO_ADDR
// end ; end ;
13296: LD_VAR 0 3
13300: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13301: LD_INT 0
13303: PPUSH
13304: PPUSH
// result := true ;
13305: LD_ADDR_VAR 0 3
13309: PUSH
13310: LD_INT 1
13312: ST_TO_ADDR
// if array1 = array2 then
13313: LD_VAR 0 1
13317: PUSH
13318: LD_VAR 0 2
13322: EQUAL
13323: IFFALSE 13383
// begin for i = 1 to array1 do
13325: LD_ADDR_VAR 0 4
13329: PUSH
13330: DOUBLE
13331: LD_INT 1
13333: DEC
13334: ST_TO_ADDR
13335: LD_VAR 0 1
13339: PUSH
13340: FOR_TO
13341: IFFALSE 13379
// if array1 [ i ] <> array2 [ i ] then
13343: LD_VAR 0 1
13347: PUSH
13348: LD_VAR 0 4
13352: ARRAY
13353: PUSH
13354: LD_VAR 0 2
13358: PUSH
13359: LD_VAR 0 4
13363: ARRAY
13364: NONEQUAL
13365: IFFALSE 13377
// begin result := false ;
13367: LD_ADDR_VAR 0 3
13371: PUSH
13372: LD_INT 0
13374: ST_TO_ADDR
// break ;
13375: GO 13379
// end ;
13377: GO 13340
13379: POP
13380: POP
// end else
13381: GO 13391
// result := false ;
13383: LD_ADDR_VAR 0 3
13387: PUSH
13388: LD_INT 0
13390: ST_TO_ADDR
// end ;
13391: LD_VAR 0 3
13395: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13396: LD_INT 0
13398: PPUSH
13399: PPUSH
// if not array1 or not array2 then
13400: LD_VAR 0 1
13404: NOT
13405: PUSH
13406: LD_VAR 0 2
13410: NOT
13411: OR
13412: IFFALSE 13416
// exit ;
13414: GO 13480
// result := true ;
13416: LD_ADDR_VAR 0 3
13420: PUSH
13421: LD_INT 1
13423: ST_TO_ADDR
// for i = 1 to array1 do
13424: LD_ADDR_VAR 0 4
13428: PUSH
13429: DOUBLE
13430: LD_INT 1
13432: DEC
13433: ST_TO_ADDR
13434: LD_VAR 0 1
13438: PUSH
13439: FOR_TO
13440: IFFALSE 13478
// if array1 [ i ] <> array2 [ i ] then
13442: LD_VAR 0 1
13446: PUSH
13447: LD_VAR 0 4
13451: ARRAY
13452: PUSH
13453: LD_VAR 0 2
13457: PUSH
13458: LD_VAR 0 4
13462: ARRAY
13463: NONEQUAL
13464: IFFALSE 13476
// begin result := false ;
13466: LD_ADDR_VAR 0 3
13470: PUSH
13471: LD_INT 0
13473: ST_TO_ADDR
// break ;
13474: GO 13478
// end ;
13476: GO 13439
13478: POP
13479: POP
// end ;
13480: LD_VAR 0 3
13484: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13485: LD_INT 0
13487: PPUSH
13488: PPUSH
13489: PPUSH
// pom := GetBase ( fac ) ;
13490: LD_ADDR_VAR 0 5
13494: PUSH
13495: LD_VAR 0 1
13499: PPUSH
13500: CALL_OW 274
13504: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13505: LD_ADDR_VAR 0 4
13509: PUSH
13510: LD_VAR 0 2
13514: PUSH
13515: LD_INT 1
13517: ARRAY
13518: PPUSH
13519: LD_VAR 0 2
13523: PUSH
13524: LD_INT 2
13526: ARRAY
13527: PPUSH
13528: LD_VAR 0 2
13532: PUSH
13533: LD_INT 3
13535: ARRAY
13536: PPUSH
13537: LD_VAR 0 2
13541: PUSH
13542: LD_INT 4
13544: ARRAY
13545: PPUSH
13546: CALL_OW 449
13550: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13551: LD_ADDR_VAR 0 3
13555: PUSH
13556: LD_VAR 0 5
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: CALL_OW 275
13568: PUSH
13569: LD_VAR 0 4
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: GREATEREQUAL
13578: PUSH
13579: LD_VAR 0 5
13583: PPUSH
13584: LD_INT 2
13586: PPUSH
13587: CALL_OW 275
13591: PUSH
13592: LD_VAR 0 4
13596: PUSH
13597: LD_INT 2
13599: ARRAY
13600: GREATEREQUAL
13601: AND
13602: PUSH
13603: LD_VAR 0 5
13607: PPUSH
13608: LD_INT 3
13610: PPUSH
13611: CALL_OW 275
13615: PUSH
13616: LD_VAR 0 4
13620: PUSH
13621: LD_INT 3
13623: ARRAY
13624: GREATEREQUAL
13625: AND
13626: ST_TO_ADDR
// end ;
13627: LD_VAR 0 3
13631: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13632: LD_INT 0
13634: PPUSH
13635: PPUSH
13636: PPUSH
13637: PPUSH
// pom := GetBase ( building ) ;
13638: LD_ADDR_VAR 0 3
13642: PUSH
13643: LD_VAR 0 1
13647: PPUSH
13648: CALL_OW 274
13652: ST_TO_ADDR
// if not pom then
13653: LD_VAR 0 3
13657: NOT
13658: IFFALSE 13662
// exit ;
13660: GO 13832
// btype := GetBType ( building ) ;
13662: LD_ADDR_VAR 0 5
13666: PUSH
13667: LD_VAR 0 1
13671: PPUSH
13672: CALL_OW 266
13676: ST_TO_ADDR
// if btype = b_armoury then
13677: LD_VAR 0 5
13681: PUSH
13682: LD_INT 4
13684: EQUAL
13685: IFFALSE 13695
// btype := b_barracks ;
13687: LD_ADDR_VAR 0 5
13691: PUSH
13692: LD_INT 5
13694: ST_TO_ADDR
// if btype = b_depot then
13695: LD_VAR 0 5
13699: PUSH
13700: LD_INT 0
13702: EQUAL
13703: IFFALSE 13713
// btype := b_warehouse ;
13705: LD_ADDR_VAR 0 5
13709: PUSH
13710: LD_INT 1
13712: ST_TO_ADDR
// if btype = b_workshop then
13713: LD_VAR 0 5
13717: PUSH
13718: LD_INT 2
13720: EQUAL
13721: IFFALSE 13731
// btype := b_factory ;
13723: LD_ADDR_VAR 0 5
13727: PUSH
13728: LD_INT 3
13730: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13731: LD_ADDR_VAR 0 4
13735: PUSH
13736: LD_VAR 0 5
13740: PPUSH
13741: LD_VAR 0 1
13745: PPUSH
13746: CALL_OW 248
13750: PPUSH
13751: CALL_OW 450
13755: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13756: LD_ADDR_VAR 0 2
13760: PUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: LD_INT 1
13768: PPUSH
13769: CALL_OW 275
13773: PUSH
13774: LD_VAR 0 4
13778: PUSH
13779: LD_INT 1
13781: ARRAY
13782: GREATEREQUAL
13783: PUSH
13784: LD_VAR 0 3
13788: PPUSH
13789: LD_INT 2
13791: PPUSH
13792: CALL_OW 275
13796: PUSH
13797: LD_VAR 0 4
13801: PUSH
13802: LD_INT 2
13804: ARRAY
13805: GREATEREQUAL
13806: AND
13807: PUSH
13808: LD_VAR 0 3
13812: PPUSH
13813: LD_INT 3
13815: PPUSH
13816: CALL_OW 275
13820: PUSH
13821: LD_VAR 0 4
13825: PUSH
13826: LD_INT 3
13828: ARRAY
13829: GREATEREQUAL
13830: AND
13831: ST_TO_ADDR
// end ;
13832: LD_VAR 0 2
13836: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13837: LD_INT 0
13839: PPUSH
13840: PPUSH
13841: PPUSH
// pom := GetBase ( building ) ;
13842: LD_ADDR_VAR 0 4
13846: PUSH
13847: LD_VAR 0 1
13851: PPUSH
13852: CALL_OW 274
13856: ST_TO_ADDR
// if not pom then
13857: LD_VAR 0 4
13861: NOT
13862: IFFALSE 13866
// exit ;
13864: GO 13967
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13866: LD_ADDR_VAR 0 5
13870: PUSH
13871: LD_VAR 0 2
13875: PPUSH
13876: LD_VAR 0 1
13880: PPUSH
13881: CALL_OW 248
13885: PPUSH
13886: CALL_OW 450
13890: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13891: LD_ADDR_VAR 0 3
13895: PUSH
13896: LD_VAR 0 4
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 275
13908: PUSH
13909: LD_VAR 0 5
13913: PUSH
13914: LD_INT 1
13916: ARRAY
13917: GREATEREQUAL
13918: PUSH
13919: LD_VAR 0 4
13923: PPUSH
13924: LD_INT 2
13926: PPUSH
13927: CALL_OW 275
13931: PUSH
13932: LD_VAR 0 5
13936: PUSH
13937: LD_INT 2
13939: ARRAY
13940: GREATEREQUAL
13941: AND
13942: PUSH
13943: LD_VAR 0 4
13947: PPUSH
13948: LD_INT 3
13950: PPUSH
13951: CALL_OW 275
13955: PUSH
13956: LD_VAR 0 5
13960: PUSH
13961: LD_INT 3
13963: ARRAY
13964: GREATEREQUAL
13965: AND
13966: ST_TO_ADDR
// end ;
13967: LD_VAR 0 3
13971: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13972: LD_INT 0
13974: PPUSH
13975: PPUSH
13976: PPUSH
13977: PPUSH
13978: PPUSH
13979: PPUSH
13980: PPUSH
13981: PPUSH
13982: PPUSH
13983: PPUSH
13984: PPUSH
// result := false ;
13985: LD_ADDR_VAR 0 8
13989: PUSH
13990: LD_INT 0
13992: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13993: LD_VAR 0 5
13997: NOT
13998: PUSH
13999: LD_VAR 0 1
14003: NOT
14004: OR
14005: PUSH
14006: LD_VAR 0 2
14010: NOT
14011: OR
14012: PUSH
14013: LD_VAR 0 3
14017: NOT
14018: OR
14019: IFFALSE 14023
// exit ;
14021: GO 14837
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14023: LD_ADDR_VAR 0 14
14027: PUSH
14028: LD_VAR 0 1
14032: PPUSH
14033: LD_VAR 0 2
14037: PPUSH
14038: LD_VAR 0 3
14042: PPUSH
14043: LD_VAR 0 4
14047: PPUSH
14048: LD_VAR 0 5
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: CALL_OW 248
14061: PPUSH
14062: LD_INT 0
14064: PPUSH
14065: CALL 16090 0 6
14069: ST_TO_ADDR
// if not hexes then
14070: LD_VAR 0 14
14074: NOT
14075: IFFALSE 14079
// exit ;
14077: GO 14837
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14079: LD_ADDR_VAR 0 17
14083: PUSH
14084: LD_VAR 0 5
14088: PPUSH
14089: LD_INT 22
14091: PUSH
14092: LD_VAR 0 13
14096: PPUSH
14097: CALL_OW 255
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 2
14108: PUSH
14109: LD_INT 30
14111: PUSH
14112: LD_INT 0
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 30
14121: PUSH
14122: LD_INT 1
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PPUSH
14138: CALL_OW 72
14142: ST_TO_ADDR
// for i = 1 to hexes do
14143: LD_ADDR_VAR 0 9
14147: PUSH
14148: DOUBLE
14149: LD_INT 1
14151: DEC
14152: ST_TO_ADDR
14153: LD_VAR 0 14
14157: PUSH
14158: FOR_TO
14159: IFFALSE 14835
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14161: LD_ADDR_VAR 0 13
14165: PUSH
14166: LD_VAR 0 14
14170: PUSH
14171: LD_VAR 0 9
14175: ARRAY
14176: PUSH
14177: LD_INT 1
14179: ARRAY
14180: PPUSH
14181: LD_VAR 0 14
14185: PUSH
14186: LD_VAR 0 9
14190: ARRAY
14191: PUSH
14192: LD_INT 2
14194: ARRAY
14195: PPUSH
14196: CALL_OW 428
14200: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14201: LD_VAR 0 14
14205: PUSH
14206: LD_VAR 0 9
14210: ARRAY
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: PPUSH
14216: LD_VAR 0 14
14220: PUSH
14221: LD_VAR 0 9
14225: ARRAY
14226: PUSH
14227: LD_INT 2
14229: ARRAY
14230: PPUSH
14231: CALL_OW 351
14235: PUSH
14236: LD_VAR 0 14
14240: PUSH
14241: LD_VAR 0 9
14245: ARRAY
14246: PUSH
14247: LD_INT 1
14249: ARRAY
14250: PPUSH
14251: LD_VAR 0 14
14255: PUSH
14256: LD_VAR 0 9
14260: ARRAY
14261: PUSH
14262: LD_INT 2
14264: ARRAY
14265: PPUSH
14266: CALL_OW 488
14270: NOT
14271: OR
14272: PUSH
14273: LD_VAR 0 13
14277: PPUSH
14278: CALL_OW 247
14282: PUSH
14283: LD_INT 3
14285: EQUAL
14286: OR
14287: IFFALSE 14293
// exit ;
14289: POP
14290: POP
14291: GO 14837
// if not tmp then
14293: LD_VAR 0 13
14297: NOT
14298: IFFALSE 14302
// continue ;
14300: GO 14158
// result := true ;
14302: LD_ADDR_VAR 0 8
14306: PUSH
14307: LD_INT 1
14309: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14310: LD_VAR 0 6
14314: PUSH
14315: LD_VAR 0 13
14319: PPUSH
14320: CALL_OW 247
14324: PUSH
14325: LD_INT 2
14327: EQUAL
14328: AND
14329: PUSH
14330: LD_VAR 0 13
14334: PPUSH
14335: CALL_OW 263
14339: PUSH
14340: LD_INT 1
14342: EQUAL
14343: AND
14344: IFFALSE 14508
// begin if IsDrivenBy ( tmp ) then
14346: LD_VAR 0 13
14350: PPUSH
14351: CALL_OW 311
14355: IFFALSE 14359
// continue ;
14357: GO 14158
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14359: LD_VAR 0 6
14363: PPUSH
14364: LD_INT 3
14366: PUSH
14367: LD_INT 60
14369: PUSH
14370: EMPTY
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 3
14379: PUSH
14380: LD_INT 55
14382: PUSH
14383: EMPTY
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PPUSH
14394: CALL_OW 72
14398: IFFALSE 14506
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14400: LD_ADDR_VAR 0 18
14404: PUSH
14405: LD_VAR 0 6
14409: PPUSH
14410: LD_INT 3
14412: PUSH
14413: LD_INT 60
14415: PUSH
14416: EMPTY
14417: LIST
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 3
14425: PUSH
14426: LD_INT 55
14428: PUSH
14429: EMPTY
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PPUSH
14440: CALL_OW 72
14444: PUSH
14445: LD_INT 1
14447: ARRAY
14448: ST_TO_ADDR
// if IsInUnit ( driver ) then
14449: LD_VAR 0 18
14453: PPUSH
14454: CALL_OW 310
14458: IFFALSE 14469
// ComExit ( driver ) ;
14460: LD_VAR 0 18
14464: PPUSH
14465: CALL 39891 0 1
// AddComEnterUnit ( driver , tmp ) ;
14469: LD_VAR 0 18
14473: PPUSH
14474: LD_VAR 0 13
14478: PPUSH
14479: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14483: LD_VAR 0 18
14487: PPUSH
14488: LD_VAR 0 7
14492: PPUSH
14493: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14497: LD_VAR 0 18
14501: PPUSH
14502: CALL_OW 181
// end ; continue ;
14506: GO 14158
// end ; if not cleaners or not tmp in cleaners then
14508: LD_VAR 0 6
14512: NOT
14513: PUSH
14514: LD_VAR 0 13
14518: PUSH
14519: LD_VAR 0 6
14523: IN
14524: NOT
14525: OR
14526: IFFALSE 14833
// begin if dep then
14528: LD_VAR 0 17
14532: IFFALSE 14668
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14534: LD_ADDR_VAR 0 16
14538: PUSH
14539: LD_VAR 0 17
14543: PUSH
14544: LD_INT 1
14546: ARRAY
14547: PPUSH
14548: CALL_OW 250
14552: PPUSH
14553: LD_VAR 0 17
14557: PUSH
14558: LD_INT 1
14560: ARRAY
14561: PPUSH
14562: CALL_OW 254
14566: PPUSH
14567: LD_INT 5
14569: PPUSH
14570: CALL_OW 272
14574: PUSH
14575: LD_VAR 0 17
14579: PUSH
14580: LD_INT 1
14582: ARRAY
14583: PPUSH
14584: CALL_OW 251
14588: PPUSH
14589: LD_VAR 0 17
14593: PUSH
14594: LD_INT 1
14596: ARRAY
14597: PPUSH
14598: CALL_OW 254
14602: PPUSH
14603: LD_INT 5
14605: PPUSH
14606: CALL_OW 273
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14615: LD_VAR 0 16
14619: PUSH
14620: LD_INT 1
14622: ARRAY
14623: PPUSH
14624: LD_VAR 0 16
14628: PUSH
14629: LD_INT 2
14631: ARRAY
14632: PPUSH
14633: CALL_OW 488
14637: IFFALSE 14668
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14639: LD_VAR 0 13
14643: PPUSH
14644: LD_VAR 0 16
14648: PUSH
14649: LD_INT 1
14651: ARRAY
14652: PPUSH
14653: LD_VAR 0 16
14657: PUSH
14658: LD_INT 2
14660: ARRAY
14661: PPUSH
14662: CALL_OW 111
// continue ;
14666: GO 14158
// end ; end ; r := GetDir ( tmp ) ;
14668: LD_ADDR_VAR 0 15
14672: PUSH
14673: LD_VAR 0 13
14677: PPUSH
14678: CALL_OW 254
14682: ST_TO_ADDR
// if r = 5 then
14683: LD_VAR 0 15
14687: PUSH
14688: LD_INT 5
14690: EQUAL
14691: IFFALSE 14701
// r := 0 ;
14693: LD_ADDR_VAR 0 15
14697: PUSH
14698: LD_INT 0
14700: ST_TO_ADDR
// for j = r to 5 do
14701: LD_ADDR_VAR 0 10
14705: PUSH
14706: DOUBLE
14707: LD_VAR 0 15
14711: DEC
14712: ST_TO_ADDR
14713: LD_INT 5
14715: PUSH
14716: FOR_TO
14717: IFFALSE 14831
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14719: LD_ADDR_VAR 0 11
14723: PUSH
14724: LD_VAR 0 13
14728: PPUSH
14729: CALL_OW 250
14733: PPUSH
14734: LD_VAR 0 10
14738: PPUSH
14739: LD_INT 2
14741: PPUSH
14742: CALL_OW 272
14746: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14747: LD_ADDR_VAR 0 12
14751: PUSH
14752: LD_VAR 0 13
14756: PPUSH
14757: CALL_OW 251
14761: PPUSH
14762: LD_VAR 0 10
14766: PPUSH
14767: LD_INT 2
14769: PPUSH
14770: CALL_OW 273
14774: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14775: LD_VAR 0 11
14779: PPUSH
14780: LD_VAR 0 12
14784: PPUSH
14785: CALL_OW 488
14789: PUSH
14790: LD_VAR 0 11
14794: PPUSH
14795: LD_VAR 0 12
14799: PPUSH
14800: CALL_OW 428
14804: NOT
14805: AND
14806: IFFALSE 14829
// begin ComMoveXY ( tmp , _x , _y ) ;
14808: LD_VAR 0 13
14812: PPUSH
14813: LD_VAR 0 11
14817: PPUSH
14818: LD_VAR 0 12
14822: PPUSH
14823: CALL_OW 111
// break ;
14827: GO 14831
// end ; end ;
14829: GO 14716
14831: POP
14832: POP
// end ; end ;
14833: GO 14158
14835: POP
14836: POP
// end ;
14837: LD_VAR 0 8
14841: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14842: LD_INT 0
14844: PPUSH
// result := true ;
14845: LD_ADDR_VAR 0 3
14849: PUSH
14850: LD_INT 1
14852: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14853: LD_VAR 0 2
14857: PUSH
14858: LD_INT 24
14860: DOUBLE
14861: EQUAL
14862: IFTRUE 14872
14864: LD_INT 33
14866: DOUBLE
14867: EQUAL
14868: IFTRUE 14872
14870: GO 14897
14872: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: LD_INT 32
14880: PPUSH
14881: LD_VAR 0 1
14885: PPUSH
14886: CALL_OW 321
14890: PUSH
14891: LD_INT 2
14893: EQUAL
14894: ST_TO_ADDR
14895: GO 15213
14897: LD_INT 20
14899: DOUBLE
14900: EQUAL
14901: IFTRUE 14905
14903: GO 14930
14905: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14906: LD_ADDR_VAR 0 3
14910: PUSH
14911: LD_INT 6
14913: PPUSH
14914: LD_VAR 0 1
14918: PPUSH
14919: CALL_OW 321
14923: PUSH
14924: LD_INT 2
14926: EQUAL
14927: ST_TO_ADDR
14928: GO 15213
14930: LD_INT 22
14932: DOUBLE
14933: EQUAL
14934: IFTRUE 14944
14936: LD_INT 36
14938: DOUBLE
14939: EQUAL
14940: IFTRUE 14944
14942: GO 14969
14944: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14945: LD_ADDR_VAR 0 3
14949: PUSH
14950: LD_INT 15
14952: PPUSH
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL_OW 321
14962: PUSH
14963: LD_INT 2
14965: EQUAL
14966: ST_TO_ADDR
14967: GO 15213
14969: LD_INT 30
14971: DOUBLE
14972: EQUAL
14973: IFTRUE 14977
14975: GO 15002
14977: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14978: LD_ADDR_VAR 0 3
14982: PUSH
14983: LD_INT 20
14985: PPUSH
14986: LD_VAR 0 1
14990: PPUSH
14991: CALL_OW 321
14995: PUSH
14996: LD_INT 2
14998: EQUAL
14999: ST_TO_ADDR
15000: GO 15213
15002: LD_INT 28
15004: DOUBLE
15005: EQUAL
15006: IFTRUE 15016
15008: LD_INT 21
15010: DOUBLE
15011: EQUAL
15012: IFTRUE 15016
15014: GO 15041
15016: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15017: LD_ADDR_VAR 0 3
15021: PUSH
15022: LD_INT 21
15024: PPUSH
15025: LD_VAR 0 1
15029: PPUSH
15030: CALL_OW 321
15034: PUSH
15035: LD_INT 2
15037: EQUAL
15038: ST_TO_ADDR
15039: GO 15213
15041: LD_INT 16
15043: DOUBLE
15044: EQUAL
15045: IFTRUE 15049
15047: GO 15074
15049: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15050: LD_ADDR_VAR 0 3
15054: PUSH
15055: LD_INT 84
15057: PPUSH
15058: LD_VAR 0 1
15062: PPUSH
15063: CALL_OW 321
15067: PUSH
15068: LD_INT 2
15070: EQUAL
15071: ST_TO_ADDR
15072: GO 15213
15074: LD_INT 19
15076: DOUBLE
15077: EQUAL
15078: IFTRUE 15088
15080: LD_INT 23
15082: DOUBLE
15083: EQUAL
15084: IFTRUE 15088
15086: GO 15113
15088: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15089: LD_ADDR_VAR 0 3
15093: PUSH
15094: LD_INT 83
15096: PPUSH
15097: LD_VAR 0 1
15101: PPUSH
15102: CALL_OW 321
15106: PUSH
15107: LD_INT 2
15109: EQUAL
15110: ST_TO_ADDR
15111: GO 15213
15113: LD_INT 17
15115: DOUBLE
15116: EQUAL
15117: IFTRUE 15121
15119: GO 15146
15121: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15122: LD_ADDR_VAR 0 3
15126: PUSH
15127: LD_INT 39
15129: PPUSH
15130: LD_VAR 0 1
15134: PPUSH
15135: CALL_OW 321
15139: PUSH
15140: LD_INT 2
15142: EQUAL
15143: ST_TO_ADDR
15144: GO 15213
15146: LD_INT 18
15148: DOUBLE
15149: EQUAL
15150: IFTRUE 15154
15152: GO 15179
15154: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15155: LD_ADDR_VAR 0 3
15159: PUSH
15160: LD_INT 40
15162: PPUSH
15163: LD_VAR 0 1
15167: PPUSH
15168: CALL_OW 321
15172: PUSH
15173: LD_INT 2
15175: EQUAL
15176: ST_TO_ADDR
15177: GO 15213
15179: LD_INT 27
15181: DOUBLE
15182: EQUAL
15183: IFTRUE 15187
15185: GO 15212
15187: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15188: LD_ADDR_VAR 0 3
15192: PUSH
15193: LD_INT 35
15195: PPUSH
15196: LD_VAR 0 1
15200: PPUSH
15201: CALL_OW 321
15205: PUSH
15206: LD_INT 2
15208: EQUAL
15209: ST_TO_ADDR
15210: GO 15213
15212: POP
// end ;
15213: LD_VAR 0 3
15217: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15218: LD_INT 0
15220: PPUSH
15221: PPUSH
15222: PPUSH
15223: PPUSH
15224: PPUSH
15225: PPUSH
15226: PPUSH
15227: PPUSH
15228: PPUSH
15229: PPUSH
15230: PPUSH
// result := false ;
15231: LD_ADDR_VAR 0 6
15235: PUSH
15236: LD_INT 0
15238: ST_TO_ADDR
// if btype = b_depot then
15239: LD_VAR 0 2
15243: PUSH
15244: LD_INT 0
15246: EQUAL
15247: IFFALSE 15259
// begin result := true ;
15249: LD_ADDR_VAR 0 6
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// exit ;
15257: GO 16085
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15259: LD_VAR 0 1
15263: NOT
15264: PUSH
15265: LD_VAR 0 1
15269: PPUSH
15270: CALL_OW 266
15274: PUSH
15275: LD_INT 0
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: IN
15285: NOT
15286: OR
15287: PUSH
15288: LD_VAR 0 2
15292: NOT
15293: OR
15294: PUSH
15295: LD_VAR 0 5
15299: PUSH
15300: LD_INT 0
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: LD_INT 2
15308: PUSH
15309: LD_INT 3
15311: PUSH
15312: LD_INT 4
15314: PUSH
15315: LD_INT 5
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: IN
15326: NOT
15327: OR
15328: PUSH
15329: LD_VAR 0 3
15333: PPUSH
15334: LD_VAR 0 4
15338: PPUSH
15339: CALL_OW 488
15343: NOT
15344: OR
15345: IFFALSE 15349
// exit ;
15347: GO 16085
// side := GetSide ( depot ) ;
15349: LD_ADDR_VAR 0 9
15353: PUSH
15354: LD_VAR 0 1
15358: PPUSH
15359: CALL_OW 255
15363: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15364: LD_VAR 0 9
15368: PPUSH
15369: LD_VAR 0 2
15373: PPUSH
15374: CALL 14842 0 2
15378: NOT
15379: IFFALSE 15383
// exit ;
15381: GO 16085
// pom := GetBase ( depot ) ;
15383: LD_ADDR_VAR 0 10
15387: PUSH
15388: LD_VAR 0 1
15392: PPUSH
15393: CALL_OW 274
15397: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15398: LD_ADDR_VAR 0 11
15402: PUSH
15403: LD_VAR 0 2
15407: PPUSH
15408: LD_VAR 0 1
15412: PPUSH
15413: CALL_OW 248
15417: PPUSH
15418: CALL_OW 450
15422: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15423: LD_VAR 0 10
15427: PPUSH
15428: LD_INT 1
15430: PPUSH
15431: CALL_OW 275
15435: PUSH
15436: LD_VAR 0 11
15440: PUSH
15441: LD_INT 1
15443: ARRAY
15444: GREATEREQUAL
15445: PUSH
15446: LD_VAR 0 10
15450: PPUSH
15451: LD_INT 2
15453: PPUSH
15454: CALL_OW 275
15458: PUSH
15459: LD_VAR 0 11
15463: PUSH
15464: LD_INT 2
15466: ARRAY
15467: GREATEREQUAL
15468: AND
15469: PUSH
15470: LD_VAR 0 10
15474: PPUSH
15475: LD_INT 3
15477: PPUSH
15478: CALL_OW 275
15482: PUSH
15483: LD_VAR 0 11
15487: PUSH
15488: LD_INT 3
15490: ARRAY
15491: GREATEREQUAL
15492: AND
15493: NOT
15494: IFFALSE 15498
// exit ;
15496: GO 16085
// if GetBType ( depot ) = b_depot then
15498: LD_VAR 0 1
15502: PPUSH
15503: CALL_OW 266
15507: PUSH
15508: LD_INT 0
15510: EQUAL
15511: IFFALSE 15523
// dist := 28 else
15513: LD_ADDR_VAR 0 14
15517: PUSH
15518: LD_INT 28
15520: ST_TO_ADDR
15521: GO 15531
// dist := 36 ;
15523: LD_ADDR_VAR 0 14
15527: PUSH
15528: LD_INT 36
15530: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15531: LD_VAR 0 1
15535: PPUSH
15536: LD_VAR 0 3
15540: PPUSH
15541: LD_VAR 0 4
15545: PPUSH
15546: CALL_OW 297
15550: PUSH
15551: LD_VAR 0 14
15555: GREATER
15556: IFFALSE 15560
// exit ;
15558: GO 16085
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15560: LD_ADDR_VAR 0 12
15564: PUSH
15565: LD_VAR 0 2
15569: PPUSH
15570: LD_VAR 0 3
15574: PPUSH
15575: LD_VAR 0 4
15579: PPUSH
15580: LD_VAR 0 5
15584: PPUSH
15585: LD_VAR 0 1
15589: PPUSH
15590: CALL_OW 248
15594: PPUSH
15595: LD_INT 0
15597: PPUSH
15598: CALL 16090 0 6
15602: ST_TO_ADDR
// if not hexes then
15603: LD_VAR 0 12
15607: NOT
15608: IFFALSE 15612
// exit ;
15610: GO 16085
// hex := GetHexInfo ( x , y ) ;
15612: LD_ADDR_VAR 0 15
15616: PUSH
15617: LD_VAR 0 3
15621: PPUSH
15622: LD_VAR 0 4
15626: PPUSH
15627: CALL_OW 546
15631: ST_TO_ADDR
// if hex [ 1 ] then
15632: LD_VAR 0 15
15636: PUSH
15637: LD_INT 1
15639: ARRAY
15640: IFFALSE 15644
// exit ;
15642: GO 16085
// height := hex [ 2 ] ;
15644: LD_ADDR_VAR 0 13
15648: PUSH
15649: LD_VAR 0 15
15653: PUSH
15654: LD_INT 2
15656: ARRAY
15657: ST_TO_ADDR
// for i = 1 to hexes do
15658: LD_ADDR_VAR 0 7
15662: PUSH
15663: DOUBLE
15664: LD_INT 1
15666: DEC
15667: ST_TO_ADDR
15668: LD_VAR 0 12
15672: PUSH
15673: FOR_TO
15674: IFFALSE 16004
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15676: LD_VAR 0 12
15680: PUSH
15681: LD_VAR 0 7
15685: ARRAY
15686: PUSH
15687: LD_INT 1
15689: ARRAY
15690: PPUSH
15691: LD_VAR 0 12
15695: PUSH
15696: LD_VAR 0 7
15700: ARRAY
15701: PUSH
15702: LD_INT 2
15704: ARRAY
15705: PPUSH
15706: CALL_OW 488
15710: NOT
15711: PUSH
15712: LD_VAR 0 12
15716: PUSH
15717: LD_VAR 0 7
15721: ARRAY
15722: PUSH
15723: LD_INT 1
15725: ARRAY
15726: PPUSH
15727: LD_VAR 0 12
15731: PUSH
15732: LD_VAR 0 7
15736: ARRAY
15737: PUSH
15738: LD_INT 2
15740: ARRAY
15741: PPUSH
15742: CALL_OW 428
15746: PUSH
15747: LD_INT 0
15749: GREATER
15750: OR
15751: PUSH
15752: LD_VAR 0 12
15756: PUSH
15757: LD_VAR 0 7
15761: ARRAY
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: PPUSH
15767: LD_VAR 0 12
15771: PUSH
15772: LD_VAR 0 7
15776: ARRAY
15777: PUSH
15778: LD_INT 2
15780: ARRAY
15781: PPUSH
15782: CALL_OW 351
15786: OR
15787: IFFALSE 15793
// exit ;
15789: POP
15790: POP
15791: GO 16085
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15793: LD_ADDR_VAR 0 8
15797: PUSH
15798: LD_VAR 0 12
15802: PUSH
15803: LD_VAR 0 7
15807: ARRAY
15808: PUSH
15809: LD_INT 1
15811: ARRAY
15812: PPUSH
15813: LD_VAR 0 12
15817: PUSH
15818: LD_VAR 0 7
15822: ARRAY
15823: PUSH
15824: LD_INT 2
15826: ARRAY
15827: PPUSH
15828: CALL_OW 546
15832: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15833: LD_VAR 0 8
15837: PUSH
15838: LD_INT 1
15840: ARRAY
15841: PUSH
15842: LD_VAR 0 8
15846: PUSH
15847: LD_INT 2
15849: ARRAY
15850: PUSH
15851: LD_VAR 0 13
15855: PUSH
15856: LD_INT 2
15858: PLUS
15859: GREATER
15860: OR
15861: PUSH
15862: LD_VAR 0 8
15866: PUSH
15867: LD_INT 2
15869: ARRAY
15870: PUSH
15871: LD_VAR 0 13
15875: PUSH
15876: LD_INT 2
15878: MINUS
15879: LESS
15880: OR
15881: PUSH
15882: LD_VAR 0 8
15886: PUSH
15887: LD_INT 3
15889: ARRAY
15890: PUSH
15891: LD_INT 0
15893: PUSH
15894: LD_INT 8
15896: PUSH
15897: LD_INT 9
15899: PUSH
15900: LD_INT 10
15902: PUSH
15903: LD_INT 11
15905: PUSH
15906: LD_INT 12
15908: PUSH
15909: LD_INT 13
15911: PUSH
15912: LD_INT 16
15914: PUSH
15915: LD_INT 17
15917: PUSH
15918: LD_INT 18
15920: PUSH
15921: LD_INT 19
15923: PUSH
15924: LD_INT 20
15926: PUSH
15927: LD_INT 21
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: IN
15945: NOT
15946: OR
15947: PUSH
15948: LD_VAR 0 8
15952: PUSH
15953: LD_INT 5
15955: ARRAY
15956: NOT
15957: OR
15958: PUSH
15959: LD_VAR 0 8
15963: PUSH
15964: LD_INT 6
15966: ARRAY
15967: PUSH
15968: LD_INT 1
15970: PUSH
15971: LD_INT 2
15973: PUSH
15974: LD_INT 7
15976: PUSH
15977: LD_INT 9
15979: PUSH
15980: LD_INT 10
15982: PUSH
15983: LD_INT 11
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: IN
15994: NOT
15995: OR
15996: IFFALSE 16002
// exit ;
15998: POP
15999: POP
16000: GO 16085
// end ;
16002: GO 15673
16004: POP
16005: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16006: LD_VAR 0 9
16010: PPUSH
16011: LD_VAR 0 3
16015: PPUSH
16016: LD_VAR 0 4
16020: PPUSH
16021: LD_INT 20
16023: PPUSH
16024: CALL 8008 0 4
16028: PUSH
16029: LD_INT 4
16031: ARRAY
16032: IFFALSE 16036
// exit ;
16034: GO 16085
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16036: LD_VAR 0 2
16040: PUSH
16041: LD_INT 29
16043: PUSH
16044: LD_INT 30
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: IN
16051: PUSH
16052: LD_VAR 0 3
16056: PPUSH
16057: LD_VAR 0 4
16061: PPUSH
16062: LD_VAR 0 9
16066: PPUSH
16067: CALL_OW 440
16071: NOT
16072: AND
16073: IFFALSE 16077
// exit ;
16075: GO 16085
// result := true ;
16077: LD_ADDR_VAR 0 6
16081: PUSH
16082: LD_INT 1
16084: ST_TO_ADDR
// end ;
16085: LD_VAR 0 6
16089: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16090: LD_INT 0
16092: PPUSH
16093: PPUSH
16094: PPUSH
16095: PPUSH
16096: PPUSH
16097: PPUSH
16098: PPUSH
16099: PPUSH
16100: PPUSH
16101: PPUSH
16102: PPUSH
16103: PPUSH
16104: PPUSH
16105: PPUSH
16106: PPUSH
16107: PPUSH
16108: PPUSH
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
16118: PPUSH
16119: PPUSH
16120: PPUSH
16121: PPUSH
16122: PPUSH
16123: PPUSH
16124: PPUSH
16125: PPUSH
16126: PPUSH
16127: PPUSH
16128: PPUSH
16129: PPUSH
16130: PPUSH
16131: PPUSH
16132: PPUSH
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
16141: PPUSH
16142: PPUSH
16143: PPUSH
16144: PPUSH
16145: PPUSH
16146: PPUSH
16147: PPUSH
16148: PPUSH
16149: PPUSH
// result = [ ] ;
16150: LD_ADDR_VAR 0 7
16154: PUSH
16155: EMPTY
16156: ST_TO_ADDR
// temp_list = [ ] ;
16157: LD_ADDR_VAR 0 9
16161: PUSH
16162: EMPTY
16163: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16164: LD_VAR 0 4
16168: PUSH
16169: LD_INT 0
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: LD_INT 2
16177: PUSH
16178: LD_INT 3
16180: PUSH
16181: LD_INT 4
16183: PUSH
16184: LD_INT 5
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: IN
16195: NOT
16196: PUSH
16197: LD_VAR 0 1
16201: PUSH
16202: LD_INT 0
16204: PUSH
16205: LD_INT 1
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: IN
16212: PUSH
16213: LD_VAR 0 5
16217: PUSH
16218: LD_INT 1
16220: PUSH
16221: LD_INT 2
16223: PUSH
16224: LD_INT 3
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: IN
16232: NOT
16233: AND
16234: OR
16235: IFFALSE 16239
// exit ;
16237: GO 34630
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16239: LD_VAR 0 1
16243: PUSH
16244: LD_INT 6
16246: PUSH
16247: LD_INT 7
16249: PUSH
16250: LD_INT 8
16252: PUSH
16253: LD_INT 13
16255: PUSH
16256: LD_INT 12
16258: PUSH
16259: LD_INT 15
16261: PUSH
16262: LD_INT 11
16264: PUSH
16265: LD_INT 14
16267: PUSH
16268: LD_INT 10
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: IN
16282: IFFALSE 16292
// btype = b_lab ;
16284: LD_ADDR_VAR 0 1
16288: PUSH
16289: LD_INT 6
16291: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16292: LD_VAR 0 6
16296: PUSH
16297: LD_INT 0
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: LD_INT 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: IN
16311: NOT
16312: PUSH
16313: LD_VAR 0 1
16317: PUSH
16318: LD_INT 0
16320: PUSH
16321: LD_INT 1
16323: PUSH
16324: LD_INT 2
16326: PUSH
16327: LD_INT 3
16329: PUSH
16330: LD_INT 6
16332: PUSH
16333: LD_INT 36
16335: PUSH
16336: LD_INT 4
16338: PUSH
16339: LD_INT 5
16341: PUSH
16342: LD_INT 31
16344: PUSH
16345: LD_INT 32
16347: PUSH
16348: LD_INT 33
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: IN
16364: NOT
16365: PUSH
16366: LD_VAR 0 6
16370: PUSH
16371: LD_INT 1
16373: EQUAL
16374: AND
16375: OR
16376: PUSH
16377: LD_VAR 0 1
16381: PUSH
16382: LD_INT 2
16384: PUSH
16385: LD_INT 3
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: IN
16392: NOT
16393: PUSH
16394: LD_VAR 0 6
16398: PUSH
16399: LD_INT 2
16401: EQUAL
16402: AND
16403: OR
16404: IFFALSE 16414
// mode = 0 ;
16406: LD_ADDR_VAR 0 6
16410: PUSH
16411: LD_INT 0
16413: ST_TO_ADDR
// case mode of 0 :
16414: LD_VAR 0 6
16418: PUSH
16419: LD_INT 0
16421: DOUBLE
16422: EQUAL
16423: IFTRUE 16427
16425: GO 27880
16427: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16428: LD_ADDR_VAR 0 11
16432: PUSH
16433: LD_INT 0
16435: PUSH
16436: LD_INT 0
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 0
16445: PUSH
16446: LD_INT 1
16448: NEG
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 1
16456: PUSH
16457: LD_INT 0
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 1
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 0
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: LD_INT 0
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: LD_INT 1
16501: NEG
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 1
16509: NEG
16510: PUSH
16511: LD_INT 2
16513: NEG
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 0
16521: PUSH
16522: LD_INT 2
16524: NEG
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: LD_INT 1
16535: NEG
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 0
16553: PUSH
16554: LD_INT 2
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: NEG
16564: PUSH
16565: LD_INT 1
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 1
16574: PUSH
16575: LD_INT 3
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 0
16584: PUSH
16585: LD_INT 3
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 1
16594: NEG
16595: PUSH
16596: LD_INT 2
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16621: LD_ADDR_VAR 0 12
16625: PUSH
16626: LD_INT 0
16628: PUSH
16629: LD_INT 0
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 0
16638: PUSH
16639: LD_INT 1
16641: NEG
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: LD_INT 0
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 1
16659: PUSH
16660: LD_INT 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 0
16669: PUSH
16670: LD_INT 1
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 1
16679: NEG
16680: PUSH
16681: LD_INT 0
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 1
16690: NEG
16691: PUSH
16692: LD_INT 1
16694: NEG
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 1
16702: PUSH
16703: LD_INT 1
16705: NEG
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: LD_INT 0
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 2
16723: PUSH
16724: LD_INT 1
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 1
16733: NEG
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 2
16744: NEG
16745: PUSH
16746: LD_INT 0
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 2
16755: NEG
16756: PUSH
16757: LD_INT 1
16759: NEG
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 2
16767: NEG
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 3
16778: NEG
16779: PUSH
16780: LD_INT 0
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 3
16789: NEG
16790: PUSH
16791: LD_INT 1
16793: NEG
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16817: LD_ADDR_VAR 0 13
16821: PUSH
16822: LD_INT 0
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 0
16834: PUSH
16835: LD_INT 1
16837: NEG
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 1
16845: PUSH
16846: LD_INT 0
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 1
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 0
16865: PUSH
16866: LD_INT 1
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 1
16875: NEG
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 1
16886: NEG
16887: PUSH
16888: LD_INT 1
16890: NEG
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 1
16898: NEG
16899: PUSH
16900: LD_INT 2
16902: NEG
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 2
16910: PUSH
16911: LD_INT 1
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 2
16920: PUSH
16921: LD_INT 2
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 1
16930: PUSH
16931: LD_INT 2
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 2
16940: NEG
16941: PUSH
16942: LD_INT 1
16944: NEG
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 2
16952: NEG
16953: PUSH
16954: LD_INT 2
16956: NEG
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 2
16964: NEG
16965: PUSH
16966: LD_INT 3
16968: NEG
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 3
16976: NEG
16977: PUSH
16978: LD_INT 2
16980: NEG
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 3
16988: NEG
16989: PUSH
16990: LD_INT 3
16992: NEG
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17016: LD_ADDR_VAR 0 14
17020: PUSH
17021: LD_INT 0
17023: PUSH
17024: LD_INT 0
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 0
17033: PUSH
17034: LD_INT 1
17036: NEG
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 1
17044: PUSH
17045: LD_INT 0
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 0
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 1
17074: NEG
17075: PUSH
17076: LD_INT 0
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 1
17085: NEG
17086: PUSH
17087: LD_INT 1
17089: NEG
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 1
17097: NEG
17098: PUSH
17099: LD_INT 2
17101: NEG
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 0
17109: PUSH
17110: LD_INT 2
17112: NEG
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: LD_INT 1
17123: NEG
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 1
17131: PUSH
17132: LD_INT 2
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 0
17141: PUSH
17142: LD_INT 2
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 1
17151: NEG
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 1
17162: NEG
17163: PUSH
17164: LD_INT 3
17166: NEG
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 0
17174: PUSH
17175: LD_INT 3
17177: NEG
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 1
17185: PUSH
17186: LD_INT 2
17188: NEG
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17212: LD_ADDR_VAR 0 15
17216: PUSH
17217: LD_INT 0
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 0
17229: PUSH
17230: LD_INT 1
17232: NEG
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 1
17240: PUSH
17241: LD_INT 0
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 1
17250: PUSH
17251: LD_INT 1
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 0
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 1
17270: NEG
17271: PUSH
17272: LD_INT 0
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 1
17281: NEG
17282: PUSH
17283: LD_INT 1
17285: NEG
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: LD_INT 1
17296: NEG
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 2
17304: PUSH
17305: LD_INT 0
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 1
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 1
17324: NEG
17325: PUSH
17326: LD_INT 1
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 2
17335: NEG
17336: PUSH
17337: LD_INT 0
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 2
17346: NEG
17347: PUSH
17348: LD_INT 1
17350: NEG
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 2
17358: PUSH
17359: LD_INT 1
17361: NEG
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 3
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 3
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17405: LD_ADDR_VAR 0 16
17409: PUSH
17410: LD_INT 0
17412: PUSH
17413: LD_INT 0
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 0
17422: PUSH
17423: LD_INT 1
17425: NEG
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 1
17433: PUSH
17434: LD_INT 0
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 1
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 0
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 1
17463: NEG
17464: PUSH
17465: LD_INT 0
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: NEG
17475: PUSH
17476: LD_INT 1
17478: NEG
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 1
17486: NEG
17487: PUSH
17488: LD_INT 2
17490: NEG
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 2
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 2
17508: PUSH
17509: LD_INT 2
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: LD_INT 2
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 2
17528: NEG
17529: PUSH
17530: LD_INT 1
17532: NEG
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 2
17540: NEG
17541: PUSH
17542: LD_INT 2
17544: NEG
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 3
17552: PUSH
17553: LD_INT 2
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 3
17562: PUSH
17563: LD_INT 3
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17598: LD_ADDR_VAR 0 17
17602: PUSH
17603: LD_INT 0
17605: PUSH
17606: LD_INT 0
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 0
17615: PUSH
17616: LD_INT 1
17618: NEG
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: LD_INT 0
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 1
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 0
17646: PUSH
17647: LD_INT 1
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: LD_INT 0
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: LD_INT 1
17671: NEG
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 1
17679: NEG
17680: PUSH
17681: LD_INT 2
17683: NEG
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 0
17691: PUSH
17692: LD_INT 2
17694: NEG
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 1
17702: PUSH
17703: LD_INT 1
17705: NEG
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: LD_INT 0
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 2
17733: PUSH
17734: LD_INT 2
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 0
17753: PUSH
17754: LD_INT 2
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 1
17763: NEG
17764: PUSH
17765: LD_INT 1
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 2
17774: NEG
17775: PUSH
17776: LD_INT 0
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 2
17785: NEG
17786: PUSH
17787: LD_INT 1
17789: NEG
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 2
17797: NEG
17798: PUSH
17799: LD_INT 2
17801: NEG
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17828: LD_ADDR_VAR 0 18
17832: PUSH
17833: LD_INT 0
17835: PUSH
17836: LD_INT 0
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 0
17845: PUSH
17846: LD_INT 1
17848: NEG
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 0
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 1
17866: PUSH
17867: LD_INT 1
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: LD_INT 1
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: NEG
17887: PUSH
17888: LD_INT 0
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: NEG
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 1
17909: NEG
17910: PUSH
17911: LD_INT 2
17913: NEG
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: LD_INT 2
17924: NEG
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: LD_INT 1
17935: NEG
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: LD_INT 0
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 2
17963: PUSH
17964: LD_INT 2
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 1
17973: PUSH
17974: LD_INT 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 0
17983: PUSH
17984: LD_INT 2
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 1
17993: NEG
17994: PUSH
17995: LD_INT 1
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 2
18004: NEG
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 2
18015: NEG
18016: PUSH
18017: LD_INT 1
18019: NEG
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 2
18027: NEG
18028: PUSH
18029: LD_INT 2
18031: NEG
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18058: LD_ADDR_VAR 0 19
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: LD_INT 1
18078: NEG
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: NEG
18128: PUSH
18129: LD_INT 1
18131: NEG
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: NEG
18140: PUSH
18141: LD_INT 2
18143: NEG
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: LD_INT 2
18154: NEG
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: LD_INT 1
18165: NEG
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: LD_INT 1
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: LD_INT 2
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 0
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 1
18223: NEG
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 2
18234: NEG
18235: PUSH
18236: LD_INT 0
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 2
18245: NEG
18246: PUSH
18247: LD_INT 1
18249: NEG
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 2
18257: NEG
18258: PUSH
18259: LD_INT 2
18261: NEG
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18288: LD_ADDR_VAR 0 20
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: LD_INT 1
18308: NEG
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 1
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 0
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 1
18346: NEG
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: NEG
18358: PUSH
18359: LD_INT 1
18361: NEG
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 1
18369: NEG
18370: PUSH
18371: LD_INT 2
18373: NEG
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: LD_INT 2
18384: NEG
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 1
18392: PUSH
18393: LD_INT 1
18395: NEG
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 2
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: LD_INT 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 0
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 1
18453: NEG
18454: PUSH
18455: LD_INT 1
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 2
18464: NEG
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 2
18475: NEG
18476: PUSH
18477: LD_INT 1
18479: NEG
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 2
18487: NEG
18488: PUSH
18489: LD_INT 2
18491: NEG
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18518: LD_ADDR_VAR 0 21
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: LD_INT 0
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: LD_INT 1
18538: NEG
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 0
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 1
18576: NEG
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: NEG
18588: PUSH
18589: LD_INT 1
18591: NEG
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 1
18599: NEG
18600: PUSH
18601: LD_INT 2
18603: NEG
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: LD_INT 2
18614: NEG
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: PUSH
18623: LD_INT 1
18625: NEG
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 2
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: LD_INT 2
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: LD_INT 2
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 0
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 1
18683: NEG
18684: PUSH
18685: LD_INT 1
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 2
18694: NEG
18695: PUSH
18696: LD_INT 0
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: NEG
18706: PUSH
18707: LD_INT 1
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 2
18717: NEG
18718: PUSH
18719: LD_INT 2
18721: NEG
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18748: LD_ADDR_VAR 0 22
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: LD_INT 1
18768: NEG
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: LD_INT 0
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 1
18806: NEG
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: NEG
18818: PUSH
18819: LD_INT 1
18821: NEG
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: LD_INT 2
18833: NEG
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: LD_INT 2
18844: NEG
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: LD_INT 1
18855: NEG
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: LD_INT 0
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: LD_INT 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: NEG
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 2
18924: NEG
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: NEG
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 2
18947: NEG
18948: PUSH
18949: LD_INT 2
18951: NEG
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18978: LD_ADDR_VAR 0 23
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: LD_INT 1
18998: NEG
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 0
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: LD_INT 1
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 1
19036: NEG
19037: PUSH
19038: LD_INT 0
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: NEG
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: LD_INT 2
19063: NEG
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: LD_INT 2
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: LD_INT 0
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 2
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: LD_INT 2
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 0
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 1
19143: NEG
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 2
19154: NEG
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 2
19165: NEG
19166: PUSH
19167: LD_INT 1
19169: NEG
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 2
19177: NEG
19178: PUSH
19179: LD_INT 2
19181: NEG
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 2
19189: NEG
19190: PUSH
19191: LD_INT 3
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: LD_INT 3
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: LD_INT 2
19216: NEG
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 2
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19258: LD_ADDR_VAR 0 24
19262: PUSH
19263: LD_INT 0
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 0
19275: PUSH
19276: LD_INT 1
19278: NEG
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: LD_INT 0
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 0
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: LD_INT 0
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 1
19327: NEG
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 1
19339: NEG
19340: PUSH
19341: LD_INT 2
19343: NEG
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: LD_INT 2
19354: NEG
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 1
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 2
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: LD_INT 2
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: NEG
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 2
19434: NEG
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 2
19445: NEG
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 2
19457: NEG
19458: PUSH
19459: LD_INT 2
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: LD_INT 2
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 2
19480: PUSH
19481: LD_INT 1
19483: NEG
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 3
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 3
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19534: LD_ADDR_VAR 0 25
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: LD_INT 0
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 1
19554: NEG
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: LD_INT 1
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 1
19592: NEG
19593: PUSH
19594: LD_INT 0
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 1
19603: NEG
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 1
19615: NEG
19616: PUSH
19617: LD_INT 2
19619: NEG
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 0
19627: PUSH
19628: LD_INT 2
19630: NEG
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: LD_INT 1
19641: NEG
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: LD_INT 2
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: LD_INT 2
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 2
19710: NEG
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 2
19721: NEG
19722: PUSH
19723: LD_INT 1
19725: NEG
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 2
19733: NEG
19734: PUSH
19735: LD_INT 2
19737: NEG
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 3
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 3
19755: PUSH
19756: LD_INT 2
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 3
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 3
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19808: LD_ADDR_VAR 0 26
19812: PUSH
19813: LD_INT 0
19815: PUSH
19816: LD_INT 0
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: LD_INT 1
19828: NEG
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 1
19877: NEG
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: LD_INT 2
19893: NEG
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 0
19901: PUSH
19902: LD_INT 2
19904: NEG
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 0
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: LD_INT 1
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: NEG
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: NEG
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: NEG
20008: PUSH
20009: LD_INT 2
20011: NEG
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 1
20029: PUSH
20030: LD_INT 3
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 2
20050: NEG
20051: PUSH
20052: LD_INT 1
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20084: LD_ADDR_VAR 0 27
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: LD_INT 0
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 0
20101: PUSH
20102: LD_INT 1
20104: NEG
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: LD_INT 0
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 1
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 1
20153: NEG
20154: PUSH
20155: LD_INT 1
20157: NEG
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: NEG
20166: PUSH
20167: LD_INT 2
20169: NEG
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: LD_INT 2
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 1
20191: NEG
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: LD_INT 0
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 1
20229: PUSH
20230: LD_INT 2
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: LD_INT 1
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 2
20260: NEG
20261: PUSH
20262: LD_INT 0
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 2
20271: NEG
20272: PUSH
20273: LD_INT 1
20275: NEG
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: NEG
20284: PUSH
20285: LD_INT 2
20287: NEG
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 1
20295: NEG
20296: PUSH
20297: LD_INT 2
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 2
20306: NEG
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 3
20317: NEG
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 3
20329: NEG
20330: PUSH
20331: LD_INT 2
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20364: LD_ADDR_VAR 0 28
20368: PUSH
20369: LD_INT 0
20371: PUSH
20372: LD_INT 0
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: LD_INT 0
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 1
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 1
20422: NEG
20423: PUSH
20424: LD_INT 0
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: NEG
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 1
20445: NEG
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 0
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 1
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 2
20479: PUSH
20480: LD_INT 0
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 2
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: LD_INT 2
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 1
20509: PUSH
20510: LD_INT 2
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 0
20519: PUSH
20520: LD_INT 2
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 1
20529: NEG
20530: PUSH
20531: LD_INT 1
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 2
20540: NEG
20541: PUSH
20542: LD_INT 0
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 2
20551: NEG
20552: PUSH
20553: LD_INT 1
20555: NEG
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 2
20563: NEG
20564: PUSH
20565: LD_INT 2
20567: NEG
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 2
20575: NEG
20576: PUSH
20577: LD_INT 3
20579: NEG
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: NEG
20588: PUSH
20589: LD_INT 3
20591: NEG
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 3
20599: NEG
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 3
20611: NEG
20612: PUSH
20613: LD_INT 2
20615: NEG
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20646: LD_ADDR_VAR 0 29
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: LD_INT 0
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: LD_INT 1
20666: NEG
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 0
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: NEG
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: LD_INT 2
20731: NEG
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 0
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 1
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 2
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 1
20781: PUSH
20782: LD_INT 2
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 0
20791: PUSH
20792: LD_INT 2
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: NEG
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 2
20812: NEG
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: NEG
20825: PUSH
20826: LD_INT 2
20828: NEG
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 2
20836: NEG
20837: PUSH
20838: LD_INT 3
20840: NEG
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: LD_INT 1
20851: NEG
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 3
20859: PUSH
20860: LD_INT 1
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: LD_INT 3
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: LD_INT 2
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 3
20890: NEG
20891: PUSH
20892: LD_INT 2
20894: NEG
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20925: LD_ADDR_VAR 0 30
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: LD_INT 0
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 0
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 1
20983: NEG
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 1
21006: NEG
21007: PUSH
21008: LD_INT 2
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: LD_INT 2
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 2
21060: PUSH
21061: LD_INT 2
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: NEG
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 2
21091: NEG
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 2
21102: NEG
21103: PUSH
21104: LD_INT 1
21106: NEG
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: NEG
21115: PUSH
21116: LD_INT 3
21118: NEG
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 1
21126: PUSH
21127: LD_INT 2
21129: NEG
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 3
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: LD_INT 3
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: NEG
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 3
21168: NEG
21169: PUSH
21170: LD_INT 1
21172: NEG
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21203: LD_ADDR_VAR 0 31
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 0
21220: PUSH
21221: LD_INT 1
21223: NEG
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 1
21231: PUSH
21232: LD_INT 0
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 1
21284: NEG
21285: PUSH
21286: LD_INT 2
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: LD_INT 1
21299: NEG
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 2
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 2
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: LD_INT 2
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: NEG
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 2
21368: NEG
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 2
21380: NEG
21381: PUSH
21382: LD_INT 2
21384: NEG
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 2
21392: NEG
21393: PUSH
21394: LD_INT 3
21396: NEG
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: LD_INT 1
21407: NEG
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 3
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: LD_INT 3
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 3
21446: NEG
21447: PUSH
21448: LD_INT 2
21450: NEG
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21481: LD_ADDR_VAR 0 32
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 1
21539: NEG
21540: PUSH
21541: LD_INT 0
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: NEG
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: LD_INT 2
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 1
21585: PUSH
21586: LD_INT 1
21588: NEG
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 2
21606: PUSH
21607: LD_INT 2
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: LD_INT 2
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: NEG
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 2
21647: NEG
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 2
21658: NEG
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: LD_INT 3
21674: NEG
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: PUSH
21683: LD_INT 2
21685: NEG
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 3
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: LD_INT 3
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 2
21713: NEG
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 3
21724: NEG
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21759: LD_ADDR_VAR 0 33
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: NEG
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: LD_INT 2
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: LD_INT 1
21855: NEG
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 2
21863: PUSH
21864: LD_INT 0
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 2
21873: PUSH
21874: LD_INT 1
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: LD_INT 2
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: LD_INT 2
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 1
21903: NEG
21904: PUSH
21905: LD_INT 1
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 2
21914: NEG
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 2
21925: NEG
21926: PUSH
21927: LD_INT 1
21929: NEG
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: NEG
21938: PUSH
21939: LD_INT 2
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 2
21949: NEG
21950: PUSH
21951: LD_INT 3
21953: NEG
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 2
21961: PUSH
21962: LD_INT 1
21964: NEG
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 3
21972: PUSH
21973: LD_INT 1
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: LD_INT 3
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: LD_INT 2
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 3
22003: NEG
22004: PUSH
22005: LD_INT 2
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22038: LD_ADDR_VAR 0 34
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: LD_INT 0
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: NEG
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: NEG
22108: PUSH
22109: LD_INT 1
22111: NEG
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: LD_INT 2
22123: NEG
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: LD_INT 2
22134: NEG
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: LD_INT 1
22145: NEG
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 1
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: LD_INT 2
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 1
22173: PUSH
22174: LD_INT 2
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 1
22183: NEG
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 2
22194: NEG
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 2
22205: NEG
22206: PUSH
22207: LD_INT 1
22209: NEG
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 2
22217: NEG
22218: PUSH
22219: LD_INT 2
22221: NEG
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: LD_INT 3
22233: NEG
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: LD_INT 2
22244: NEG
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 3
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 2
22262: PUSH
22263: LD_INT 3
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 2
22272: NEG
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 3
22283: NEG
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22318: LD_ADDR_VAR 0 35
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: LD_INT 1
22338: NEG
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: LD_INT 0
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 1
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PUSH
22389: LD_INT 1
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 2
22409: NEG
22410: PUSH
22411: LD_INT 1
22413: NEG
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22430: LD_ADDR_VAR 0 36
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 0
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 0
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: NEG
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: NEG
22512: PUSH
22513: LD_INT 2
22515: NEG
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: LD_INT 2
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22542: LD_ADDR_VAR 0 37
22546: PUSH
22547: LD_INT 0
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: LD_INT 0
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: NEG
22612: PUSH
22613: LD_INT 1
22615: NEG
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 1
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 1
22634: NEG
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22654: LD_ADDR_VAR 0 38
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 0
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: LD_INT 0
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 0
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 1
22712: NEG
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: LD_INT 1
22727: NEG
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: LD_INT 1
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 2
22745: NEG
22746: PUSH
22747: LD_INT 1
22749: NEG
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22766: LD_ADDR_VAR 0 39
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 0
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 0
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: NEG
22848: PUSH
22849: LD_INT 2
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22878: LD_ADDR_VAR 0 40
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 1
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: NEG
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 1
22962: NEG
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 1
22970: NEG
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22990: LD_ADDR_VAR 0 41
22994: PUSH
22995: LD_INT 0
22997: PUSH
22998: LD_INT 0
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 0
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 1
23018: PUSH
23019: LD_INT 0
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: NEG
23049: PUSH
23050: LD_INT 0
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 1
23071: NEG
23072: PUSH
23073: LD_INT 2
23075: NEG
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 1
23083: PUSH
23084: LD_INT 1
23086: NEG
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 2
23094: PUSH
23095: LD_INT 0
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 1
23124: PUSH
23125: LD_INT 2
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 1
23134: NEG
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 2
23145: NEG
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 2
23156: NEG
23157: PUSH
23158: LD_INT 1
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: NEG
23169: PUSH
23170: LD_INT 2
23172: NEG
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 2
23180: NEG
23181: PUSH
23182: LD_INT 3
23184: NEG
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 3
23223: PUSH
23224: LD_INT 2
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 3
23233: PUSH
23234: LD_INT 3
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: LD_INT 3
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 2
23253: NEG
23254: PUSH
23255: LD_INT 1
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 3
23264: NEG
23265: PUSH
23266: LD_INT 0
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 3
23275: NEG
23276: PUSH
23277: LD_INT 1
23279: NEG
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 3
23287: NEG
23288: PUSH
23289: LD_INT 2
23291: NEG
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 3
23299: NEG
23300: PUSH
23301: LD_INT 3
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23340: LD_ADDR_VAR 0 42
23344: PUSH
23345: LD_INT 0
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 1
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: NEG
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 1
23409: NEG
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: LD_INT 2
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: LD_INT 2
23436: NEG
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 2
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 2
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 1
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 2
23518: NEG
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 2
23530: NEG
23531: PUSH
23532: LD_INT 3
23534: NEG
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 1
23542: NEG
23543: PUSH
23544: LD_INT 3
23546: NEG
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: LD_INT 3
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: LD_INT 2
23568: NEG
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 3
23576: PUSH
23577: LD_INT 2
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 3
23586: PUSH
23587: LD_INT 3
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 2
23596: PUSH
23597: LD_INT 3
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: LD_INT 3
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: LD_INT 3
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: LD_INT 2
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 3
23637: NEG
23638: PUSH
23639: LD_INT 2
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 3
23649: NEG
23650: PUSH
23651: LD_INT 3
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23690: LD_ADDR_VAR 0 43
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 0
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 0
23707: PUSH
23708: LD_INT 1
23710: NEG
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 1
23759: NEG
23760: PUSH
23761: LD_INT 1
23763: NEG
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: LD_INT 2
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: LD_INT 2
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 1
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 1
23845: NEG
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 2
23856: NEG
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: NEG
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 1
23879: NEG
23880: PUSH
23881: LD_INT 3
23883: NEG
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 3
23894: NEG
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 2
23905: NEG
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 3
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 3
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: LD_INT 3
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: LD_INT 3
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 1
23964: NEG
23965: PUSH
23966: LD_INT 2
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 2
23975: NEG
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 3
23986: NEG
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 3
23997: NEG
23998: PUSH
23999: LD_INT 1
24001: NEG
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24038: LD_ADDR_VAR 0 44
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 1
24107: NEG
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: LD_INT 2
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: LD_INT 1
24134: NEG
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 2
24142: PUSH
24143: LD_INT 0
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 2
24162: PUSH
24163: LD_INT 2
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: LD_INT 2
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 1
24182: NEG
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 2
24204: NEG
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 2
24216: NEG
24217: PUSH
24218: LD_INT 2
24220: NEG
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 2
24228: NEG
24229: PUSH
24230: LD_INT 3
24232: NEG
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 3
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 3
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 3
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 3
24281: PUSH
24282: LD_INT 3
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: LD_INT 3
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 2
24301: NEG
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 3
24312: NEG
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 3
24323: NEG
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 3
24335: NEG
24336: PUSH
24337: LD_INT 2
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 3
24347: NEG
24348: PUSH
24349: LD_INT 3
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24388: LD_ADDR_VAR 0 45
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 1
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: LD_INT 2
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: LD_INT 2
24484: NEG
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: LD_INT 1
24495: NEG
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 2
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 2
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: LD_INT 2
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 1
24543: NEG
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 2
24554: NEG
24555: PUSH
24556: LD_INT 1
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: NEG
24567: PUSH
24568: LD_INT 2
24570: NEG
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 2
24578: NEG
24579: PUSH
24580: LD_INT 3
24582: NEG
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: LD_INT 3
24594: NEG
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: LD_INT 3
24605: NEG
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: LD_INT 2
24616: NEG
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 3
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 3
24634: PUSH
24635: LD_INT 3
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 2
24644: PUSH
24645: LD_INT 3
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: LD_INT 3
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: LD_INT 3
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: NEG
24675: PUSH
24676: LD_INT 2
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 3
24685: NEG
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 3
24697: NEG
24698: PUSH
24699: LD_INT 3
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24738: LD_ADDR_VAR 0 46
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: LD_INT 1
24758: NEG
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: LD_INT 2
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: LD_INT 2
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 1
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 2
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 1
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: NEG
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 3
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 3
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 2
24953: NEG
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 2
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 3
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 3
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: LD_INT 3
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: NEG
25013: PUSH
25014: LD_INT 2
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 2
25023: NEG
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 3
25034: NEG
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 3
25045: NEG
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25086: LD_ADDR_VAR 0 47
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 0
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 1
25144: NEG
25145: PUSH
25146: LD_INT 0
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: LD_INT 2
25171: NEG
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: LD_INT 2
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 1
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 2
25201: NEG
25202: PUSH
25203: LD_INT 1
25205: NEG
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 2
25213: NEG
25214: PUSH
25215: LD_INT 2
25217: NEG
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25237: LD_ADDR_VAR 0 48
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: LD_INT 1
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: NEG
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: LD_INT 2
25322: NEG
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: LD_INT 2
25333: NEG
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 2
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: LD_INT 1
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25384: LD_ADDR_VAR 0 49
25388: PUSH
25389: LD_INT 0
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: LD_INT 0
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: NEG
25454: PUSH
25455: LD_INT 1
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 2
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: LD_INT 1
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: LD_INT 2
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25528: LD_ADDR_VAR 0 50
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 1
25548: NEG
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 1
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 2
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: LD_INT 2
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 0
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: NEG
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25672: LD_ADDR_VAR 0 51
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: LD_INT 1
25692: NEG
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 1
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: NEG
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: LD_INT 1
25745: NEG
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: LD_INT 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: NEG
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 2
25784: NEG
25785: PUSH
25786: LD_INT 0
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: NEG
25796: PUSH
25797: LD_INT 1
25799: NEG
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25819: LD_ADDR_VAR 0 52
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: LD_INT 1
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: LD_INT 1
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: LD_INT 2
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 2
25923: NEG
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: LD_INT 2
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25970: LD_ADDR_VAR 0 53
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 1
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: NEG
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: LD_INT 1
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: LD_INT 2
26055: NEG
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 2
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: NEG
26136: PUSH
26137: LD_INT 1
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: NEG
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 2
26157: NEG
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 2
26169: NEG
26170: PUSH
26171: LD_INT 2
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26200: LD_ADDR_VAR 0 54
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: LD_INT 1
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: LD_INT 1
26273: NEG
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: LD_INT 2
26285: NEG
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: LD_INT 2
26296: NEG
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 2
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 2
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: LD_INT 2
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: LD_INT 2
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 2
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: LD_INT 1
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: NEG
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 2
26387: NEG
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 2
26399: NEG
26400: PUSH
26401: LD_INT 2
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26430: LD_ADDR_VAR 0 55
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: LD_INT 2
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 2
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: PUSH
26566: LD_INT 2
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: LD_INT 2
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: LD_INT 1
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 2
26606: NEG
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: NEG
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 2
26629: NEG
26630: PUSH
26631: LD_INT 2
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26660: LD_ADDR_VAR 0 56
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: LD_INT 1
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: LD_INT 2
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: LD_INT 1
26767: NEG
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: LD_INT 1
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: LD_INT 2
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: LD_INT 1
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 2
26836: NEG
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 2
26847: NEG
26848: PUSH
26849: LD_INT 1
26851: NEG
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 2
26859: NEG
26860: PUSH
26861: LD_INT 2
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26890: LD_ADDR_VAR 0 57
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: NEG
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 1
26971: NEG
26972: PUSH
26973: LD_INT 2
26975: NEG
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: LD_INT 2
26986: NEG
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: LD_INT 1
26997: NEG
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 2
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 2
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: LD_INT 2
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 2
27066: NEG
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: NEG
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 2
27089: NEG
27090: PUSH
27091: LD_INT 2
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27120: LD_ADDR_VAR 0 58
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: NEG
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 1
27201: NEG
27202: PUSH
27203: LD_INT 2
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 2
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 2
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 2
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: LD_INT 1
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 2
27296: NEG
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 2
27307: NEG
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 2
27319: NEG
27320: PUSH
27321: LD_INT 2
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27350: LD_ADDR_VAR 0 59
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 1
27408: NEG
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: NEG
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27438: LD_ADDR_VAR 0 60
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: LD_INT 1
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: NEG
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27526: LD_ADDR_VAR 0 61
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: NEG
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27614: LD_ADDR_VAR 0 62
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 1
27634: NEG
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 1
27672: NEG
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27702: LD_ADDR_VAR 0 63
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: LD_INT 1
27722: NEG
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 1
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27790: LD_ADDR_VAR 0 64
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 0
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: NEG
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 1
27863: NEG
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: ST_TO_ADDR
// end ; 1 :
27878: GO 33775
27880: LD_INT 1
27882: DOUBLE
27883: EQUAL
27884: IFTRUE 27888
27886: GO 30511
27888: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27889: LD_ADDR_VAR 0 11
27893: PUSH
27894: LD_INT 1
27896: NEG
27897: PUSH
27898: LD_INT 3
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: LD_INT 3
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 1
27919: PUSH
27920: LD_INT 2
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27933: LD_ADDR_VAR 0 12
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 3
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 3
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27974: LD_ADDR_VAR 0 13
27978: PUSH
27979: LD_INT 3
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 3
27991: PUSH
27992: LD_INT 3
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: PUSH
28002: LD_INT 3
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28014: LD_ADDR_VAR 0 14
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: LD_INT 3
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: LD_INT 3
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28055: LD_ADDR_VAR 0 15
28059: PUSH
28060: LD_INT 2
28062: NEG
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 3
28073: NEG
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 3
28084: NEG
28085: PUSH
28086: LD_INT 1
28088: NEG
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28099: LD_ADDR_VAR 0 16
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: LD_INT 3
28110: NEG
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 3
28118: NEG
28119: PUSH
28120: LD_INT 2
28122: NEG
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 3
28130: NEG
28131: PUSH
28132: LD_INT 3
28134: NEG
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28145: LD_ADDR_VAR 0 17
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: LD_INT 3
28156: NEG
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: LD_INT 3
28167: NEG
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: LD_INT 2
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28189: LD_ADDR_VAR 0 18
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 3
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 3
28217: PUSH
28218: LD_INT 1
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28230: LD_ADDR_VAR 0 19
28234: PUSH
28235: LD_INT 3
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 3
28247: PUSH
28248: LD_INT 3
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: LD_INT 3
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28270: LD_ADDR_VAR 0 20
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: LD_INT 3
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: LD_INT 3
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: LIST
28310: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28311: LD_ADDR_VAR 0 21
28315: PUSH
28316: LD_INT 2
28318: NEG
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 3
28329: NEG
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 3
28340: NEG
28341: PUSH
28342: LD_INT 1
28344: NEG
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28355: LD_ADDR_VAR 0 22
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: LD_INT 3
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 3
28374: NEG
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 3
28386: NEG
28387: PUSH
28388: LD_INT 3
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: LIST
28400: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28401: LD_ADDR_VAR 0 23
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: LD_INT 3
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: LD_INT 4
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: LD_INT 3
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: LIST
28444: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28445: LD_ADDR_VAR 0 24
28449: PUSH
28450: LD_INT 3
28452: PUSH
28453: LD_INT 0
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 3
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 4
28473: PUSH
28474: LD_INT 1
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28486: LD_ADDR_VAR 0 25
28490: PUSH
28491: LD_INT 3
28493: PUSH
28494: LD_INT 3
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 4
28503: PUSH
28504: LD_INT 3
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 3
28513: PUSH
28514: LD_INT 4
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28526: LD_ADDR_VAR 0 26
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 3
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: LD_INT 4
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 3
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28567: LD_ADDR_VAR 0 27
28571: PUSH
28572: LD_INT 3
28574: NEG
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 3
28585: NEG
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 4
28596: NEG
28597: PUSH
28598: LD_INT 1
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: LIST
28610: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28611: LD_ADDR_VAR 0 28
28615: PUSH
28616: LD_INT 3
28618: NEG
28619: PUSH
28620: LD_INT 3
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 3
28630: NEG
28631: PUSH
28632: LD_INT 4
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 4
28642: NEG
28643: PUSH
28644: LD_INT 3
28646: NEG
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: LIST
28656: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28657: LD_ADDR_VAR 0 29
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: LD_INT 3
28668: NEG
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: LD_INT 3
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 2
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: LD_INT 4
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: LD_INT 4
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: LD_INT 3
28724: NEG
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 1
28732: NEG
28733: PUSH
28734: LD_INT 5
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 5
28747: NEG
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: LD_INT 4
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: LD_INT 6
28770: NEG
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: LD_INT 6
28781: NEG
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: LD_INT 5
28792: NEG
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28812: LD_ADDR_VAR 0 30
28816: PUSH
28817: LD_INT 2
28819: PUSH
28820: LD_INT 1
28822: NEG
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 3
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 3
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 4
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 4
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 4
28881: PUSH
28882: LD_INT 1
28884: NEG
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 5
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 5
28902: PUSH
28903: LD_INT 1
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 5
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 6
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 6
28933: PUSH
28934: LD_INT 1
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28955: LD_ADDR_VAR 0 31
28959: PUSH
28960: LD_INT 3
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 3
28972: PUSH
28973: LD_INT 3
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 3
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 4
28992: PUSH
28993: LD_INT 3
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 4
29002: PUSH
29003: LD_INT 4
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: LD_INT 4
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 5
29022: PUSH
29023: LD_INT 4
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 5
29032: PUSH
29033: LD_INT 5
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 4
29042: PUSH
29043: LD_INT 5
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 6
29052: PUSH
29053: LD_INT 5
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 6
29062: PUSH
29063: LD_INT 6
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 5
29072: PUSH
29073: LD_INT 6
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29094: LD_ADDR_VAR 0 32
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: LD_INT 3
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: NEG
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: LD_INT 4
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: LD_INT 4
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: LD_INT 3
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 5
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 0
29173: PUSH
29174: LD_INT 5
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: LD_INT 4
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: LD_INT 6
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: LD_INT 6
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: LD_INT 5
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29237: LD_ADDR_VAR 0 33
29241: PUSH
29242: LD_INT 2
29244: NEG
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 3
29255: NEG
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 3
29266: NEG
29267: PUSH
29268: LD_INT 1
29270: NEG
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 3
29278: NEG
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 4
29289: NEG
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 4
29300: NEG
29301: PUSH
29302: LD_INT 1
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 4
29312: NEG
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 5
29323: NEG
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 5
29334: NEG
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 5
29346: NEG
29347: PUSH
29348: LD_INT 1
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 6
29357: NEG
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 6
29368: NEG
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29392: LD_ADDR_VAR 0 34
29396: PUSH
29397: LD_INT 2
29399: NEG
29400: PUSH
29401: LD_INT 3
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 3
29411: NEG
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 3
29423: NEG
29424: PUSH
29425: LD_INT 3
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 3
29435: NEG
29436: PUSH
29437: LD_INT 4
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 4
29447: NEG
29448: PUSH
29449: LD_INT 3
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 4
29459: NEG
29460: PUSH
29461: LD_INT 4
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 4
29471: NEG
29472: PUSH
29473: LD_INT 5
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 5
29483: NEG
29484: PUSH
29485: LD_INT 4
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 5
29495: NEG
29496: PUSH
29497: LD_INT 5
29499: NEG
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 5
29507: NEG
29508: PUSH
29509: LD_INT 6
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 6
29519: NEG
29520: PUSH
29521: LD_INT 5
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 6
29531: NEG
29532: PUSH
29533: LD_INT 6
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29555: LD_ADDR_VAR 0 41
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 2
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: LD_INT 3
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29599: LD_ADDR_VAR 0 42
29603: PUSH
29604: LD_INT 2
29606: PUSH
29607: LD_INT 0
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 3
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29640: LD_ADDR_VAR 0 43
29644: PUSH
29645: LD_INT 2
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: LD_INT 3
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29680: LD_ADDR_VAR 0 44
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 3
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29721: LD_ADDR_VAR 0 45
29725: PUSH
29726: LD_INT 2
29728: NEG
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 2
29739: NEG
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 3
29750: NEG
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: LIST
29764: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29765: LD_ADDR_VAR 0 46
29769: PUSH
29770: LD_INT 2
29772: NEG
29773: PUSH
29774: LD_INT 2
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 2
29784: NEG
29785: PUSH
29786: LD_INT 3
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 3
29796: NEG
29797: PUSH
29798: LD_INT 2
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29811: LD_ADDR_VAR 0 47
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: LD_INT 3
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: NEG
29831: PUSH
29832: LD_INT 3
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29844: LD_ADDR_VAR 0 48
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: LD_INT 2
29854: NEG
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29875: LD_ADDR_VAR 0 49
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: LD_INT 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: LD_INT 2
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29904: LD_ADDR_VAR 0 50
29908: PUSH
29909: LD_INT 2
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: LD_INT 3
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29933: LD_ADDR_VAR 0 51
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: LD_INT 2
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29964: LD_ADDR_VAR 0 52
29968: PUSH
29969: LD_INT 3
29971: NEG
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 3
29983: NEG
29984: PUSH
29985: LD_INT 2
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29997: LD_ADDR_VAR 0 53
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: LD_INT 3
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: LD_INT 3
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: LIST
30040: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30041: LD_ADDR_VAR 0 54
30045: PUSH
30046: LD_INT 2
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30082: LD_ADDR_VAR 0 55
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: LD_INT 2
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 3
30099: PUSH
30100: LD_INT 3
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: LD_INT 3
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: LIST
30121: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30122: LD_ADDR_VAR 0 56
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: LD_INT 3
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: LD_INT 3
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30163: LD_ADDR_VAR 0 57
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 3
30181: NEG
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 3
30192: NEG
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: LIST
30206: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30207: LD_ADDR_VAR 0 58
30211: PUSH
30212: LD_INT 2
30214: NEG
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 3
30226: NEG
30227: PUSH
30228: LD_INT 2
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 3
30238: NEG
30239: PUSH
30240: LD_INT 3
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: LIST
30252: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30253: LD_ADDR_VAR 0 59
30257: PUSH
30258: LD_INT 1
30260: NEG
30261: PUSH
30262: LD_INT 2
30264: NEG
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: LD_INT 2
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30297: LD_ADDR_VAR 0 60
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: LD_INT 0
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30338: LD_ADDR_VAR 0 61
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: LD_INT 2
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: LIST
30377: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30378: LD_ADDR_VAR 0 62
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: LD_INT 2
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: LIST
30418: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30419: LD_ADDR_VAR 0 63
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 2
30437: NEG
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 2
30448: NEG
30449: PUSH
30450: LD_INT 1
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: LIST
30462: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30463: LD_ADDR_VAR 0 64
30467: PUSH
30468: LD_INT 1
30470: NEG
30471: PUSH
30472: LD_INT 2
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: LD_INT 2
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: LIST
30508: ST_TO_ADDR
// end ; 2 :
30509: GO 33775
30511: LD_INT 2
30513: DOUBLE
30514: EQUAL
30515: IFTRUE 30519
30517: GO 33774
30519: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30520: LD_ADDR_VAR 0 29
30524: PUSH
30525: LD_INT 4
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 4
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 5
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 5
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 4
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 3
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 3
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: LD_INT 2
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 5
30610: PUSH
30611: LD_INT 2
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 3
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 4
30640: PUSH
30641: LD_INT 3
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 4
30650: PUSH
30651: LD_INT 4
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: LD_INT 4
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: LD_INT 3
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 2
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 4
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: LD_INT 4
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: LD_INT 4
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: LD_INT 3
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 4
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: LD_INT 5
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: LD_INT 5
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: LD_INT 4
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: LD_INT 3
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: LD_INT 5
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: NEG
30793: PUSH
30794: LD_INT 3
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 3
30803: NEG
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 3
30814: NEG
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: LD_INT 0
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 3
30848: NEG
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 4
30859: NEG
30860: PUSH
30861: LD_INT 0
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 4
30870: NEG
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 4
30882: NEG
30883: PUSH
30884: LD_INT 2
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: LD_INT 2
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 4
30905: NEG
30906: PUSH
30907: LD_INT 4
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 4
30917: NEG
30918: PUSH
30919: LD_INT 5
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 3
30929: NEG
30930: PUSH
30931: LD_INT 4
30933: NEG
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 3
30941: NEG
30942: PUSH
30943: LD_INT 3
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 4
30953: NEG
30954: PUSH
30955: LD_INT 3
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 5
30965: NEG
30966: PUSH
30967: LD_INT 4
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 5
30977: NEG
30978: PUSH
30979: LD_INT 5
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 3
30989: NEG
30990: PUSH
30991: LD_INT 5
30993: NEG
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 5
31001: NEG
31002: PUSH
31003: LD_INT 3
31005: NEG
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31058: LD_ADDR_VAR 0 30
31062: PUSH
31063: LD_INT 4
31065: PUSH
31066: LD_INT 4
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 4
31075: PUSH
31076: LD_INT 3
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 5
31085: PUSH
31086: LD_INT 4
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 5
31095: PUSH
31096: LD_INT 5
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 4
31105: PUSH
31106: LD_INT 5
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 3
31115: PUSH
31116: LD_INT 4
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 5
31135: PUSH
31136: LD_INT 3
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 3
31145: PUSH
31146: LD_INT 5
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 0
31155: PUSH
31156: LD_INT 3
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: LD_INT 4
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 4
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: LD_INT 4
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: LD_INT 2
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 4
31248: NEG
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 4
31259: NEG
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 3
31271: NEG
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 3
31282: NEG
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 4
31293: NEG
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 5
31304: NEG
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 5
31315: NEG
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 5
31327: NEG
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 3
31339: NEG
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 3
31350: NEG
31351: PUSH
31352: LD_INT 3
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 3
31362: NEG
31363: PUSH
31364: LD_INT 4
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: LD_INT 3
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 2
31386: NEG
31387: PUSH
31388: LD_INT 2
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 3
31398: NEG
31399: PUSH
31400: LD_INT 2
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 4
31410: NEG
31411: PUSH
31412: LD_INT 3
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 4
31422: NEG
31423: PUSH
31424: LD_INT 4
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: LD_INT 4
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 4
31446: NEG
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: LD_INT 4
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 5
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 4
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: LD_INT 3
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 0
31502: PUSH
31503: LD_INT 3
31505: NEG
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 1
31513: NEG
31514: PUSH
31515: LD_INT 4
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 5
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 2
31548: NEG
31549: PUSH
31550: LD_INT 5
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31605: LD_ADDR_VAR 0 31
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: LD_INT 4
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: LD_INT 3
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: LD_INT 4
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: LD_INT 5
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: LD_INT 5
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: NEG
31663: PUSH
31664: LD_INT 4
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 1
31673: NEG
31674: PUSH
31675: LD_INT 3
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: LD_INT 5
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 2
31694: NEG
31695: PUSH
31696: LD_INT 3
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 3
31705: NEG
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 3
31716: NEG
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 2
31728: NEG
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 2
31739: NEG
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 3
31750: NEG
31751: PUSH
31752: LD_INT 1
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 4
31761: NEG
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 4
31772: NEG
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 4
31784: NEG
31785: PUSH
31786: LD_INT 2
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 2
31796: NEG
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 4
31807: NEG
31808: PUSH
31809: LD_INT 4
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 4
31819: NEG
31820: PUSH
31821: LD_INT 5
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: LD_INT 4
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 3
31843: NEG
31844: PUSH
31845: LD_INT 3
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 4
31855: NEG
31856: PUSH
31857: LD_INT 3
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 5
31867: NEG
31868: PUSH
31869: LD_INT 4
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 5
31879: NEG
31880: PUSH
31881: LD_INT 5
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: NEG
31892: PUSH
31893: LD_INT 5
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 5
31903: NEG
31904: PUSH
31905: LD_INT 3
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: LD_INT 3
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: LD_INT 4
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: LD_INT 3
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: LD_INT 2
31951: NEG
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: LD_INT 2
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 1
31970: NEG
31971: PUSH
31972: LD_INT 3
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: LD_INT 4
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: PUSH
31995: LD_INT 2
31997: NEG
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 2
32005: NEG
32006: PUSH
32007: LD_INT 4
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 4
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 4
32027: PUSH
32028: LD_INT 1
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 5
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 4
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 3
32068: PUSH
32069: LD_INT 0
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 3
32078: PUSH
32079: LD_INT 1
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 3
32089: PUSH
32090: LD_INT 2
32092: NEG
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 5
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32155: LD_ADDR_VAR 0 32
32159: PUSH
32160: LD_INT 4
32162: NEG
32163: PUSH
32164: LD_INT 0
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 4
32173: NEG
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 3
32185: NEG
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 3
32196: NEG
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 4
32207: NEG
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 5
32218: NEG
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 5
32229: NEG
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 5
32241: NEG
32242: PUSH
32243: LD_INT 2
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 3
32253: NEG
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 3
32264: NEG
32265: PUSH
32266: LD_INT 3
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 3
32276: NEG
32277: PUSH
32278: LD_INT 4
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: LD_INT 3
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 2
32300: NEG
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 3
32312: NEG
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 4
32324: NEG
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 4
32336: NEG
32337: PUSH
32338: LD_INT 4
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: NEG
32349: PUSH
32350: LD_INT 4
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 4
32360: NEG
32361: PUSH
32362: LD_INT 2
32364: NEG
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: LD_INT 4
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: LD_INT 5
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: LD_INT 4
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 3
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: LD_INT 3
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: LD_INT 4
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: LD_INT 5
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: LD_INT 3
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 2
32462: NEG
32463: PUSH
32464: LD_INT 5
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 3
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 3
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 4
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 4
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 3
32515: PUSH
32516: LD_INT 1
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: LD_INT 1
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: PUSH
32547: LD_INT 2
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 4
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 4
32567: PUSH
32568: LD_INT 4
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 4
32577: PUSH
32578: LD_INT 3
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 5
32587: PUSH
32588: LD_INT 4
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 5
32597: PUSH
32598: LD_INT 5
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 4
32607: PUSH
32608: LD_INT 5
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 3
32617: PUSH
32618: LD_INT 4
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 3
32627: PUSH
32628: LD_INT 3
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 5
32637: PUSH
32638: LD_INT 3
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: LD_INT 5
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32702: LD_ADDR_VAR 0 33
32706: PUSH
32707: LD_INT 4
32709: NEG
32710: PUSH
32711: LD_INT 4
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 4
32721: NEG
32722: PUSH
32723: LD_INT 5
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 3
32733: NEG
32734: PUSH
32735: LD_INT 4
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 3
32745: NEG
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 4
32757: NEG
32758: PUSH
32759: LD_INT 3
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 5
32769: NEG
32770: PUSH
32771: LD_INT 4
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 5
32781: NEG
32782: PUSH
32783: LD_INT 5
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 3
32793: NEG
32794: PUSH
32795: LD_INT 5
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 5
32805: NEG
32806: PUSH
32807: LD_INT 3
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: LD_INT 3
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: LD_INT 4
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: LD_INT 3
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: LD_INT 3
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: LD_INT 4
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: LD_INT 2
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 2
32907: NEG
32908: PUSH
32909: LD_INT 4
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 4
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 4
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 5
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 5
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 4
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 3
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 3
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 3
32991: PUSH
32992: LD_INT 2
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 5
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 3
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 3
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 4
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 4
33042: PUSH
33043: LD_INT 4
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 3
33052: PUSH
33053: LD_INT 4
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 2
33062: PUSH
33063: LD_INT 3
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 4
33082: PUSH
33083: LD_INT 2
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: LD_INT 4
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: LD_INT 4
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: LD_INT 3
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: LD_INT 4
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: LD_INT 5
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: LD_INT 5
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: LD_INT 4
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: LD_INT 3
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 5
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: LD_INT 3
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33240: LD_ADDR_VAR 0 34
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: LD_INT 4
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: LD_INT 5
33261: NEG
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: LD_INT 4
33272: NEG
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: LD_INT 3
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 3
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 4
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: LD_INT 5
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: LD_INT 3
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: NEG
33338: PUSH
33339: LD_INT 5
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 3
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 3
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 4
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 4
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 3
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 1
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 2
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 4
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 4
33442: PUSH
33443: LD_INT 4
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 4
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 5
33462: PUSH
33463: LD_INT 4
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 5
33472: PUSH
33473: LD_INT 5
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 4
33482: PUSH
33483: LD_INT 5
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: PUSH
33493: LD_INT 4
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 3
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 5
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 3
33522: PUSH
33523: LD_INT 5
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: LD_INT 2
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 3
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: LD_INT 4
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: LD_INT 3
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: LD_INT 2
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 2
33604: PUSH
33605: LD_INT 4
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: LD_INT 2
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 4
33625: NEG
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 4
33636: NEG
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 3
33648: NEG
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 3
33659: NEG
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 4
33670: NEG
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 5
33681: NEG
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 5
33692: NEG
33693: PUSH
33694: LD_INT 1
33696: NEG
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 5
33704: NEG
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 3
33716: NEG
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: ST_TO_ADDR
// end ; end ;
33772: GO 33775
33774: POP
// case btype of b_depot , b_warehouse :
33775: LD_VAR 0 1
33779: PUSH
33780: LD_INT 0
33782: DOUBLE
33783: EQUAL
33784: IFTRUE 33794
33786: LD_INT 1
33788: DOUBLE
33789: EQUAL
33790: IFTRUE 33794
33792: GO 33995
33794: POP
// case nation of nation_american :
33795: LD_VAR 0 5
33799: PUSH
33800: LD_INT 1
33802: DOUBLE
33803: EQUAL
33804: IFTRUE 33808
33806: GO 33864
33808: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33809: LD_ADDR_VAR 0 9
33813: PUSH
33814: LD_VAR 0 11
33818: PUSH
33819: LD_VAR 0 12
33823: PUSH
33824: LD_VAR 0 13
33828: PUSH
33829: LD_VAR 0 14
33833: PUSH
33834: LD_VAR 0 15
33838: PUSH
33839: LD_VAR 0 16
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: PUSH
33852: LD_VAR 0 4
33856: PUSH
33857: LD_INT 1
33859: PLUS
33860: ARRAY
33861: ST_TO_ADDR
33862: GO 33993
33864: LD_INT 2
33866: DOUBLE
33867: EQUAL
33868: IFTRUE 33872
33870: GO 33928
33872: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33873: LD_ADDR_VAR 0 9
33877: PUSH
33878: LD_VAR 0 17
33882: PUSH
33883: LD_VAR 0 18
33887: PUSH
33888: LD_VAR 0 19
33892: PUSH
33893: LD_VAR 0 20
33897: PUSH
33898: LD_VAR 0 21
33902: PUSH
33903: LD_VAR 0 22
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: PUSH
33916: LD_VAR 0 4
33920: PUSH
33921: LD_INT 1
33923: PLUS
33924: ARRAY
33925: ST_TO_ADDR
33926: GO 33993
33928: LD_INT 3
33930: DOUBLE
33931: EQUAL
33932: IFTRUE 33936
33934: GO 33992
33936: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33937: LD_ADDR_VAR 0 9
33941: PUSH
33942: LD_VAR 0 23
33946: PUSH
33947: LD_VAR 0 24
33951: PUSH
33952: LD_VAR 0 25
33956: PUSH
33957: LD_VAR 0 26
33961: PUSH
33962: LD_VAR 0 27
33966: PUSH
33967: LD_VAR 0 28
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: PUSH
33980: LD_VAR 0 4
33984: PUSH
33985: LD_INT 1
33987: PLUS
33988: ARRAY
33989: ST_TO_ADDR
33990: GO 33993
33992: POP
33993: GO 34548
33995: LD_INT 2
33997: DOUBLE
33998: EQUAL
33999: IFTRUE 34009
34001: LD_INT 3
34003: DOUBLE
34004: EQUAL
34005: IFTRUE 34009
34007: GO 34065
34009: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34010: LD_ADDR_VAR 0 9
34014: PUSH
34015: LD_VAR 0 29
34019: PUSH
34020: LD_VAR 0 30
34024: PUSH
34025: LD_VAR 0 31
34029: PUSH
34030: LD_VAR 0 32
34034: PUSH
34035: LD_VAR 0 33
34039: PUSH
34040: LD_VAR 0 34
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: PUSH
34053: LD_VAR 0 4
34057: PUSH
34058: LD_INT 1
34060: PLUS
34061: ARRAY
34062: ST_TO_ADDR
34063: GO 34548
34065: LD_INT 16
34067: DOUBLE
34068: EQUAL
34069: IFTRUE 34127
34071: LD_INT 17
34073: DOUBLE
34074: EQUAL
34075: IFTRUE 34127
34077: LD_INT 18
34079: DOUBLE
34080: EQUAL
34081: IFTRUE 34127
34083: LD_INT 19
34085: DOUBLE
34086: EQUAL
34087: IFTRUE 34127
34089: LD_INT 22
34091: DOUBLE
34092: EQUAL
34093: IFTRUE 34127
34095: LD_INT 20
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34127
34101: LD_INT 21
34103: DOUBLE
34104: EQUAL
34105: IFTRUE 34127
34107: LD_INT 23
34109: DOUBLE
34110: EQUAL
34111: IFTRUE 34127
34113: LD_INT 24
34115: DOUBLE
34116: EQUAL
34117: IFTRUE 34127
34119: LD_INT 25
34121: DOUBLE
34122: EQUAL
34123: IFTRUE 34127
34125: GO 34183
34127: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34128: LD_ADDR_VAR 0 9
34132: PUSH
34133: LD_VAR 0 35
34137: PUSH
34138: LD_VAR 0 36
34142: PUSH
34143: LD_VAR 0 37
34147: PUSH
34148: LD_VAR 0 38
34152: PUSH
34153: LD_VAR 0 39
34157: PUSH
34158: LD_VAR 0 40
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: PUSH
34171: LD_VAR 0 4
34175: PUSH
34176: LD_INT 1
34178: PLUS
34179: ARRAY
34180: ST_TO_ADDR
34181: GO 34548
34183: LD_INT 6
34185: DOUBLE
34186: EQUAL
34187: IFTRUE 34239
34189: LD_INT 7
34191: DOUBLE
34192: EQUAL
34193: IFTRUE 34239
34195: LD_INT 8
34197: DOUBLE
34198: EQUAL
34199: IFTRUE 34239
34201: LD_INT 13
34203: DOUBLE
34204: EQUAL
34205: IFTRUE 34239
34207: LD_INT 12
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34239
34213: LD_INT 15
34215: DOUBLE
34216: EQUAL
34217: IFTRUE 34239
34219: LD_INT 11
34221: DOUBLE
34222: EQUAL
34223: IFTRUE 34239
34225: LD_INT 14
34227: DOUBLE
34228: EQUAL
34229: IFTRUE 34239
34231: LD_INT 10
34233: DOUBLE
34234: EQUAL
34235: IFTRUE 34239
34237: GO 34295
34239: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34240: LD_ADDR_VAR 0 9
34244: PUSH
34245: LD_VAR 0 41
34249: PUSH
34250: LD_VAR 0 42
34254: PUSH
34255: LD_VAR 0 43
34259: PUSH
34260: LD_VAR 0 44
34264: PUSH
34265: LD_VAR 0 45
34269: PUSH
34270: LD_VAR 0 46
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: PUSH
34283: LD_VAR 0 4
34287: PUSH
34288: LD_INT 1
34290: PLUS
34291: ARRAY
34292: ST_TO_ADDR
34293: GO 34548
34295: LD_INT 36
34297: DOUBLE
34298: EQUAL
34299: IFTRUE 34303
34301: GO 34359
34303: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34304: LD_ADDR_VAR 0 9
34308: PUSH
34309: LD_VAR 0 47
34313: PUSH
34314: LD_VAR 0 48
34318: PUSH
34319: LD_VAR 0 49
34323: PUSH
34324: LD_VAR 0 50
34328: PUSH
34329: LD_VAR 0 51
34333: PUSH
34334: LD_VAR 0 52
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: PUSH
34347: LD_VAR 0 4
34351: PUSH
34352: LD_INT 1
34354: PLUS
34355: ARRAY
34356: ST_TO_ADDR
34357: GO 34548
34359: LD_INT 4
34361: DOUBLE
34362: EQUAL
34363: IFTRUE 34385
34365: LD_INT 5
34367: DOUBLE
34368: EQUAL
34369: IFTRUE 34385
34371: LD_INT 34
34373: DOUBLE
34374: EQUAL
34375: IFTRUE 34385
34377: LD_INT 37
34379: DOUBLE
34380: EQUAL
34381: IFTRUE 34385
34383: GO 34441
34385: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34386: LD_ADDR_VAR 0 9
34390: PUSH
34391: LD_VAR 0 53
34395: PUSH
34396: LD_VAR 0 54
34400: PUSH
34401: LD_VAR 0 55
34405: PUSH
34406: LD_VAR 0 56
34410: PUSH
34411: LD_VAR 0 57
34415: PUSH
34416: LD_VAR 0 58
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: PUSH
34429: LD_VAR 0 4
34433: PUSH
34434: LD_INT 1
34436: PLUS
34437: ARRAY
34438: ST_TO_ADDR
34439: GO 34548
34441: LD_INT 31
34443: DOUBLE
34444: EQUAL
34445: IFTRUE 34491
34447: LD_INT 32
34449: DOUBLE
34450: EQUAL
34451: IFTRUE 34491
34453: LD_INT 33
34455: DOUBLE
34456: EQUAL
34457: IFTRUE 34491
34459: LD_INT 27
34461: DOUBLE
34462: EQUAL
34463: IFTRUE 34491
34465: LD_INT 26
34467: DOUBLE
34468: EQUAL
34469: IFTRUE 34491
34471: LD_INT 28
34473: DOUBLE
34474: EQUAL
34475: IFTRUE 34491
34477: LD_INT 29
34479: DOUBLE
34480: EQUAL
34481: IFTRUE 34491
34483: LD_INT 30
34485: DOUBLE
34486: EQUAL
34487: IFTRUE 34491
34489: GO 34547
34491: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34492: LD_ADDR_VAR 0 9
34496: PUSH
34497: LD_VAR 0 59
34501: PUSH
34502: LD_VAR 0 60
34506: PUSH
34507: LD_VAR 0 61
34511: PUSH
34512: LD_VAR 0 62
34516: PUSH
34517: LD_VAR 0 63
34521: PUSH
34522: LD_VAR 0 64
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: PUSH
34535: LD_VAR 0 4
34539: PUSH
34540: LD_INT 1
34542: PLUS
34543: ARRAY
34544: ST_TO_ADDR
34545: GO 34548
34547: POP
// temp_list2 = [ ] ;
34548: LD_ADDR_VAR 0 10
34552: PUSH
34553: EMPTY
34554: ST_TO_ADDR
// for i in temp_list do
34555: LD_ADDR_VAR 0 8
34559: PUSH
34560: LD_VAR 0 9
34564: PUSH
34565: FOR_IN
34566: IFFALSE 34618
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34568: LD_ADDR_VAR 0 10
34572: PUSH
34573: LD_VAR 0 10
34577: PUSH
34578: LD_VAR 0 8
34582: PUSH
34583: LD_INT 1
34585: ARRAY
34586: PUSH
34587: LD_VAR 0 2
34591: PLUS
34592: PUSH
34593: LD_VAR 0 8
34597: PUSH
34598: LD_INT 2
34600: ARRAY
34601: PUSH
34602: LD_VAR 0 3
34606: PLUS
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: EMPTY
34613: LIST
34614: ADD
34615: ST_TO_ADDR
34616: GO 34565
34618: POP
34619: POP
// result = temp_list2 ;
34620: LD_ADDR_VAR 0 7
34624: PUSH
34625: LD_VAR 0 10
34629: ST_TO_ADDR
// end ;
34630: LD_VAR 0 7
34634: RET
// export function EnemyInRange ( unit , dist ) ; begin
34635: LD_INT 0
34637: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34638: LD_ADDR_VAR 0 3
34642: PUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 255
34652: PPUSH
34653: LD_VAR 0 1
34657: PPUSH
34658: CALL_OW 250
34662: PPUSH
34663: LD_VAR 0 1
34667: PPUSH
34668: CALL_OW 251
34672: PPUSH
34673: LD_VAR 0 2
34677: PPUSH
34678: CALL 8008 0 4
34682: PUSH
34683: LD_INT 4
34685: ARRAY
34686: ST_TO_ADDR
// end ;
34687: LD_VAR 0 3
34691: RET
// export function PlayerSeeMe ( unit ) ; begin
34692: LD_INT 0
34694: PPUSH
// result := See ( your_side , unit ) ;
34695: LD_ADDR_VAR 0 2
34699: PUSH
34700: LD_OWVAR 2
34704: PPUSH
34705: LD_VAR 0 1
34709: PPUSH
34710: CALL_OW 292
34714: ST_TO_ADDR
// end ;
34715: LD_VAR 0 2
34719: RET
// export function ReverseDir ( unit ) ; begin
34720: LD_INT 0
34722: PPUSH
// if not unit then
34723: LD_VAR 0 1
34727: NOT
34728: IFFALSE 34732
// exit ;
34730: GO 34755
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34732: LD_ADDR_VAR 0 2
34736: PUSH
34737: LD_VAR 0 1
34741: PPUSH
34742: CALL_OW 254
34746: PUSH
34747: LD_INT 3
34749: PLUS
34750: PUSH
34751: LD_INT 6
34753: MOD
34754: ST_TO_ADDR
// end ;
34755: LD_VAR 0 2
34759: RET
// export function ReverseArray ( array ) ; var i ; begin
34760: LD_INT 0
34762: PPUSH
34763: PPUSH
// if not array then
34764: LD_VAR 0 1
34768: NOT
34769: IFFALSE 34773
// exit ;
34771: GO 34828
// result := [ ] ;
34773: LD_ADDR_VAR 0 2
34777: PUSH
34778: EMPTY
34779: ST_TO_ADDR
// for i := array downto 1 do
34780: LD_ADDR_VAR 0 3
34784: PUSH
34785: DOUBLE
34786: LD_VAR 0 1
34790: INC
34791: ST_TO_ADDR
34792: LD_INT 1
34794: PUSH
34795: FOR_DOWNTO
34796: IFFALSE 34826
// result := Join ( result , array [ i ] ) ;
34798: LD_ADDR_VAR 0 2
34802: PUSH
34803: LD_VAR 0 2
34807: PPUSH
34808: LD_VAR 0 1
34812: PUSH
34813: LD_VAR 0 3
34817: ARRAY
34818: PPUSH
34819: CALL 39493 0 2
34823: ST_TO_ADDR
34824: GO 34795
34826: POP
34827: POP
// end ;
34828: LD_VAR 0 2
34832: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34833: LD_INT 0
34835: PPUSH
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
// if not unit or not hexes then
34841: LD_VAR 0 1
34845: NOT
34846: PUSH
34847: LD_VAR 0 2
34851: NOT
34852: OR
34853: IFFALSE 34857
// exit ;
34855: GO 34980
// dist := 9999 ;
34857: LD_ADDR_VAR 0 5
34861: PUSH
34862: LD_INT 9999
34864: ST_TO_ADDR
// for i = 1 to hexes do
34865: LD_ADDR_VAR 0 4
34869: PUSH
34870: DOUBLE
34871: LD_INT 1
34873: DEC
34874: ST_TO_ADDR
34875: LD_VAR 0 2
34879: PUSH
34880: FOR_TO
34881: IFFALSE 34968
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34883: LD_ADDR_VAR 0 6
34887: PUSH
34888: LD_VAR 0 1
34892: PPUSH
34893: LD_VAR 0 2
34897: PUSH
34898: LD_VAR 0 4
34902: ARRAY
34903: PUSH
34904: LD_INT 1
34906: ARRAY
34907: PPUSH
34908: LD_VAR 0 2
34912: PUSH
34913: LD_VAR 0 4
34917: ARRAY
34918: PUSH
34919: LD_INT 2
34921: ARRAY
34922: PPUSH
34923: CALL_OW 297
34927: ST_TO_ADDR
// if tdist < dist then
34928: LD_VAR 0 6
34932: PUSH
34933: LD_VAR 0 5
34937: LESS
34938: IFFALSE 34966
// begin hex := hexes [ i ] ;
34940: LD_ADDR_VAR 0 8
34944: PUSH
34945: LD_VAR 0 2
34949: PUSH
34950: LD_VAR 0 4
34954: ARRAY
34955: ST_TO_ADDR
// dist := tdist ;
34956: LD_ADDR_VAR 0 5
34960: PUSH
34961: LD_VAR 0 6
34965: ST_TO_ADDR
// end ; end ;
34966: GO 34880
34968: POP
34969: POP
// result := hex ;
34970: LD_ADDR_VAR 0 3
34974: PUSH
34975: LD_VAR 0 8
34979: ST_TO_ADDR
// end ;
34980: LD_VAR 0 3
34984: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34985: LD_INT 0
34987: PPUSH
34988: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34989: LD_VAR 0 1
34993: NOT
34994: PUSH
34995: LD_VAR 0 1
34999: PUSH
35000: LD_INT 21
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 23
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PPUSH
35024: CALL_OW 69
35028: IN
35029: NOT
35030: OR
35031: IFFALSE 35035
// exit ;
35033: GO 35082
// for i = 1 to 3 do
35035: LD_ADDR_VAR 0 3
35039: PUSH
35040: DOUBLE
35041: LD_INT 1
35043: DEC
35044: ST_TO_ADDR
35045: LD_INT 3
35047: PUSH
35048: FOR_TO
35049: IFFALSE 35080
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35051: LD_VAR 0 1
35055: PPUSH
35056: CALL_OW 250
35060: PPUSH
35061: LD_VAR 0 1
35065: PPUSH
35066: CALL_OW 251
35070: PPUSH
35071: LD_INT 1
35073: PPUSH
35074: CALL_OW 453
35078: GO 35048
35080: POP
35081: POP
// end ;
35082: LD_VAR 0 2
35086: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35087: LD_INT 0
35089: PPUSH
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
// if not unit or not enemy_unit then
35095: LD_VAR 0 1
35099: NOT
35100: PUSH
35101: LD_VAR 0 2
35105: NOT
35106: OR
35107: IFFALSE 35111
// exit ;
35109: GO 35578
// if GetLives ( i ) < 250 then
35111: LD_VAR 0 4
35115: PPUSH
35116: CALL_OW 256
35120: PUSH
35121: LD_INT 250
35123: LESS
35124: IFFALSE 35137
// begin ComAutodestruct ( i ) ;
35126: LD_VAR 0 4
35130: PPUSH
35131: CALL 34985 0 1
// exit ;
35135: GO 35578
// end ; x := GetX ( enemy_unit ) ;
35137: LD_ADDR_VAR 0 7
35141: PUSH
35142: LD_VAR 0 2
35146: PPUSH
35147: CALL_OW 250
35151: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35152: LD_ADDR_VAR 0 8
35156: PUSH
35157: LD_VAR 0 2
35161: PPUSH
35162: CALL_OW 251
35166: ST_TO_ADDR
// if not x or not y then
35167: LD_VAR 0 7
35171: NOT
35172: PUSH
35173: LD_VAR 0 8
35177: NOT
35178: OR
35179: IFFALSE 35183
// exit ;
35181: GO 35578
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35183: LD_ADDR_VAR 0 6
35187: PUSH
35188: LD_VAR 0 7
35192: PPUSH
35193: LD_INT 0
35195: PPUSH
35196: LD_INT 4
35198: PPUSH
35199: CALL_OW 272
35203: PUSH
35204: LD_VAR 0 8
35208: PPUSH
35209: LD_INT 0
35211: PPUSH
35212: LD_INT 4
35214: PPUSH
35215: CALL_OW 273
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_VAR 0 7
35228: PPUSH
35229: LD_INT 1
35231: PPUSH
35232: LD_INT 4
35234: PPUSH
35235: CALL_OW 272
35239: PUSH
35240: LD_VAR 0 8
35244: PPUSH
35245: LD_INT 1
35247: PPUSH
35248: LD_INT 4
35250: PPUSH
35251: CALL_OW 273
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_VAR 0 7
35264: PPUSH
35265: LD_INT 2
35267: PPUSH
35268: LD_INT 4
35270: PPUSH
35271: CALL_OW 272
35275: PUSH
35276: LD_VAR 0 8
35280: PPUSH
35281: LD_INT 2
35283: PPUSH
35284: LD_INT 4
35286: PPUSH
35287: CALL_OW 273
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_VAR 0 7
35300: PPUSH
35301: LD_INT 3
35303: PPUSH
35304: LD_INT 4
35306: PPUSH
35307: CALL_OW 272
35311: PUSH
35312: LD_VAR 0 8
35316: PPUSH
35317: LD_INT 3
35319: PPUSH
35320: LD_INT 4
35322: PPUSH
35323: CALL_OW 273
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_VAR 0 7
35336: PPUSH
35337: LD_INT 4
35339: PPUSH
35340: LD_INT 4
35342: PPUSH
35343: CALL_OW 272
35347: PUSH
35348: LD_VAR 0 8
35352: PPUSH
35353: LD_INT 4
35355: PPUSH
35356: LD_INT 4
35358: PPUSH
35359: CALL_OW 273
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_VAR 0 7
35372: PPUSH
35373: LD_INT 5
35375: PPUSH
35376: LD_INT 4
35378: PPUSH
35379: CALL_OW 272
35383: PUSH
35384: LD_VAR 0 8
35388: PPUSH
35389: LD_INT 5
35391: PPUSH
35392: LD_INT 4
35394: PPUSH
35395: CALL_OW 273
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: ST_TO_ADDR
// for i = tmp downto 1 do
35412: LD_ADDR_VAR 0 4
35416: PUSH
35417: DOUBLE
35418: LD_VAR 0 6
35422: INC
35423: ST_TO_ADDR
35424: LD_INT 1
35426: PUSH
35427: FOR_DOWNTO
35428: IFFALSE 35529
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35430: LD_VAR 0 6
35434: PUSH
35435: LD_VAR 0 4
35439: ARRAY
35440: PUSH
35441: LD_INT 1
35443: ARRAY
35444: PPUSH
35445: LD_VAR 0 6
35449: PUSH
35450: LD_VAR 0 4
35454: ARRAY
35455: PUSH
35456: LD_INT 2
35458: ARRAY
35459: PPUSH
35460: CALL_OW 488
35464: NOT
35465: PUSH
35466: LD_VAR 0 6
35470: PUSH
35471: LD_VAR 0 4
35475: ARRAY
35476: PUSH
35477: LD_INT 1
35479: ARRAY
35480: PPUSH
35481: LD_VAR 0 6
35485: PUSH
35486: LD_VAR 0 4
35490: ARRAY
35491: PUSH
35492: LD_INT 2
35494: ARRAY
35495: PPUSH
35496: CALL_OW 428
35500: PUSH
35501: LD_INT 0
35503: NONEQUAL
35504: OR
35505: IFFALSE 35527
// tmp := Delete ( tmp , i ) ;
35507: LD_ADDR_VAR 0 6
35511: PUSH
35512: LD_VAR 0 6
35516: PPUSH
35517: LD_VAR 0 4
35521: PPUSH
35522: CALL_OW 3
35526: ST_TO_ADDR
35527: GO 35427
35529: POP
35530: POP
// j := GetClosestHex ( unit , tmp ) ;
35531: LD_ADDR_VAR 0 5
35535: PUSH
35536: LD_VAR 0 1
35540: PPUSH
35541: LD_VAR 0 6
35545: PPUSH
35546: CALL 34833 0 2
35550: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35551: LD_VAR 0 1
35555: PPUSH
35556: LD_VAR 0 5
35560: PUSH
35561: LD_INT 1
35563: ARRAY
35564: PPUSH
35565: LD_VAR 0 5
35569: PUSH
35570: LD_INT 2
35572: ARRAY
35573: PPUSH
35574: CALL_OW 111
// end ;
35578: LD_VAR 0 3
35582: RET
// export function PrepareApemanSoldier ( ) ; begin
35583: LD_INT 0
35585: PPUSH
// uc_nation := 0 ;
35586: LD_ADDR_OWVAR 21
35590: PUSH
35591: LD_INT 0
35593: ST_TO_ADDR
// hc_sex := sex_male ;
35594: LD_ADDR_OWVAR 27
35598: PUSH
35599: LD_INT 1
35601: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35602: LD_ADDR_OWVAR 28
35606: PUSH
35607: LD_INT 15
35609: ST_TO_ADDR
// hc_gallery :=  ;
35610: LD_ADDR_OWVAR 33
35614: PUSH
35615: LD_STRING 
35617: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35618: LD_ADDR_OWVAR 31
35622: PUSH
35623: LD_INT 0
35625: PPUSH
35626: LD_INT 3
35628: PPUSH
35629: CALL_OW 12
35633: PUSH
35634: LD_INT 0
35636: PPUSH
35637: LD_INT 3
35639: PPUSH
35640: CALL_OW 12
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: ST_TO_ADDR
// end ;
35657: LD_VAR 0 1
35661: RET
// export function PrepareApemanEngineer ( ) ; begin
35662: LD_INT 0
35664: PPUSH
// uc_nation := 0 ;
35665: LD_ADDR_OWVAR 21
35669: PUSH
35670: LD_INT 0
35672: ST_TO_ADDR
// hc_sex := sex_male ;
35673: LD_ADDR_OWVAR 27
35677: PUSH
35678: LD_INT 1
35680: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35681: LD_ADDR_OWVAR 28
35685: PUSH
35686: LD_INT 16
35688: ST_TO_ADDR
// hc_gallery :=  ;
35689: LD_ADDR_OWVAR 33
35693: PUSH
35694: LD_STRING 
35696: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35697: LD_ADDR_OWVAR 31
35701: PUSH
35702: LD_INT 0
35704: PPUSH
35705: LD_INT 3
35707: PPUSH
35708: CALL_OW 12
35712: PUSH
35713: LD_INT 0
35715: PPUSH
35716: LD_INT 3
35718: PPUSH
35719: CALL_OW 12
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: ST_TO_ADDR
// end ;
35736: LD_VAR 0 1
35740: RET
// export function PrepareApeman ( agressivity ) ; begin
35741: LD_INT 0
35743: PPUSH
// uc_side := 0 ;
35744: LD_ADDR_OWVAR 20
35748: PUSH
35749: LD_INT 0
35751: ST_TO_ADDR
// uc_nation := 0 ;
35752: LD_ADDR_OWVAR 21
35756: PUSH
35757: LD_INT 0
35759: ST_TO_ADDR
// hc_sex := sex_male ;
35760: LD_ADDR_OWVAR 27
35764: PUSH
35765: LD_INT 1
35767: ST_TO_ADDR
// hc_class := class_apeman ;
35768: LD_ADDR_OWVAR 28
35772: PUSH
35773: LD_INT 12
35775: ST_TO_ADDR
// hc_gallery :=  ;
35776: LD_ADDR_OWVAR 33
35780: PUSH
35781: LD_STRING 
35783: ST_TO_ADDR
// if agressivity = 0 then
35784: LD_VAR 0 1
35788: PUSH
35789: LD_INT 0
35791: EQUAL
35792: IFFALSE 35804
// hc_agressivity := 0 else
35794: LD_ADDR_OWVAR 35
35798: PUSH
35799: LD_INT 0
35801: ST_TO_ADDR
35802: GO 35825
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35804: LD_ADDR_OWVAR 35
35808: PUSH
35809: LD_VAR 0 1
35813: NEG
35814: PPUSH
35815: LD_VAR 0 1
35819: PPUSH
35820: CALL_OW 12
35824: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35825: LD_ADDR_OWVAR 31
35829: PUSH
35830: LD_INT 0
35832: PPUSH
35833: LD_INT 3
35835: PPUSH
35836: CALL_OW 12
35840: PUSH
35841: LD_INT 0
35843: PPUSH
35844: LD_INT 3
35846: PPUSH
35847: CALL_OW 12
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: ST_TO_ADDR
// end ;
35864: LD_VAR 0 2
35868: RET
// export function PrepareTiger ( agressivity ) ; begin
35869: LD_INT 0
35871: PPUSH
// uc_side := 0 ;
35872: LD_ADDR_OWVAR 20
35876: PUSH
35877: LD_INT 0
35879: ST_TO_ADDR
// uc_nation := 0 ;
35880: LD_ADDR_OWVAR 21
35884: PUSH
35885: LD_INT 0
35887: ST_TO_ADDR
// hc_class := class_tiger ;
35888: LD_ADDR_OWVAR 28
35892: PUSH
35893: LD_INT 14
35895: ST_TO_ADDR
// hc_gallery :=  ;
35896: LD_ADDR_OWVAR 33
35900: PUSH
35901: LD_STRING 
35903: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35904: LD_ADDR_OWVAR 35
35908: PUSH
35909: LD_VAR 0 1
35913: NEG
35914: PPUSH
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL_OW 12
35924: ST_TO_ADDR
// end ;
35925: LD_VAR 0 2
35929: RET
// export function PrepareEnchidna ( ) ; begin
35930: LD_INT 0
35932: PPUSH
// uc_side := 0 ;
35933: LD_ADDR_OWVAR 20
35937: PUSH
35938: LD_INT 0
35940: ST_TO_ADDR
// uc_nation := 0 ;
35941: LD_ADDR_OWVAR 21
35945: PUSH
35946: LD_INT 0
35948: ST_TO_ADDR
// hc_class := class_baggie ;
35949: LD_ADDR_OWVAR 28
35953: PUSH
35954: LD_INT 13
35956: ST_TO_ADDR
// hc_gallery :=  ;
35957: LD_ADDR_OWVAR 33
35961: PUSH
35962: LD_STRING 
35964: ST_TO_ADDR
// end ;
35965: LD_VAR 0 1
35969: RET
// export function PrepareFrog ( ) ; begin
35970: LD_INT 0
35972: PPUSH
// uc_side := 0 ;
35973: LD_ADDR_OWVAR 20
35977: PUSH
35978: LD_INT 0
35980: ST_TO_ADDR
// uc_nation := 0 ;
35981: LD_ADDR_OWVAR 21
35985: PUSH
35986: LD_INT 0
35988: ST_TO_ADDR
// hc_class := class_frog ;
35989: LD_ADDR_OWVAR 28
35993: PUSH
35994: LD_INT 19
35996: ST_TO_ADDR
// hc_gallery :=  ;
35997: LD_ADDR_OWVAR 33
36001: PUSH
36002: LD_STRING 
36004: ST_TO_ADDR
// end ;
36005: LD_VAR 0 1
36009: RET
// export function PrepareFish ( ) ; begin
36010: LD_INT 0
36012: PPUSH
// uc_side := 0 ;
36013: LD_ADDR_OWVAR 20
36017: PUSH
36018: LD_INT 0
36020: ST_TO_ADDR
// uc_nation := 0 ;
36021: LD_ADDR_OWVAR 21
36025: PUSH
36026: LD_INT 0
36028: ST_TO_ADDR
// hc_class := class_fish ;
36029: LD_ADDR_OWVAR 28
36033: PUSH
36034: LD_INT 20
36036: ST_TO_ADDR
// hc_gallery :=  ;
36037: LD_ADDR_OWVAR 33
36041: PUSH
36042: LD_STRING 
36044: ST_TO_ADDR
// end ;
36045: LD_VAR 0 1
36049: RET
// export function PrepareBird ( ) ; begin
36050: LD_INT 0
36052: PPUSH
// uc_side := 0 ;
36053: LD_ADDR_OWVAR 20
36057: PUSH
36058: LD_INT 0
36060: ST_TO_ADDR
// uc_nation := 0 ;
36061: LD_ADDR_OWVAR 21
36065: PUSH
36066: LD_INT 0
36068: ST_TO_ADDR
// hc_class := class_phororhacos ;
36069: LD_ADDR_OWVAR 28
36073: PUSH
36074: LD_INT 18
36076: ST_TO_ADDR
// hc_gallery :=  ;
36077: LD_ADDR_OWVAR 33
36081: PUSH
36082: LD_STRING 
36084: ST_TO_ADDR
// end ;
36085: LD_VAR 0 1
36089: RET
// export function PrepareHorse ( ) ; begin
36090: LD_INT 0
36092: PPUSH
// uc_side := 0 ;
36093: LD_ADDR_OWVAR 20
36097: PUSH
36098: LD_INT 0
36100: ST_TO_ADDR
// uc_nation := 0 ;
36101: LD_ADDR_OWVAR 21
36105: PUSH
36106: LD_INT 0
36108: ST_TO_ADDR
// hc_class := class_horse ;
36109: LD_ADDR_OWVAR 28
36113: PUSH
36114: LD_INT 21
36116: ST_TO_ADDR
// hc_gallery :=  ;
36117: LD_ADDR_OWVAR 33
36121: PUSH
36122: LD_STRING 
36124: ST_TO_ADDR
// end ;
36125: LD_VAR 0 1
36129: RET
// export function PrepareMastodont ( ) ; begin
36130: LD_INT 0
36132: PPUSH
// uc_side := 0 ;
36133: LD_ADDR_OWVAR 20
36137: PUSH
36138: LD_INT 0
36140: ST_TO_ADDR
// uc_nation := 0 ;
36141: LD_ADDR_OWVAR 21
36145: PUSH
36146: LD_INT 0
36148: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36149: LD_ADDR_OWVAR 37
36153: PUSH
36154: LD_INT 31
36156: ST_TO_ADDR
// vc_control := control_rider ;
36157: LD_ADDR_OWVAR 38
36161: PUSH
36162: LD_INT 4
36164: ST_TO_ADDR
// end ;
36165: LD_VAR 0 1
36169: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36170: LD_INT 0
36172: PPUSH
36173: PPUSH
36174: PPUSH
// uc_side = 0 ;
36175: LD_ADDR_OWVAR 20
36179: PUSH
36180: LD_INT 0
36182: ST_TO_ADDR
// uc_nation = 0 ;
36183: LD_ADDR_OWVAR 21
36187: PUSH
36188: LD_INT 0
36190: ST_TO_ADDR
// InitHc_All ( ) ;
36191: CALL_OW 584
// InitVc ;
36195: CALL_OW 20
// if mastodonts then
36199: LD_VAR 0 6
36203: IFFALSE 36270
// for i = 1 to mastodonts do
36205: LD_ADDR_VAR 0 11
36209: PUSH
36210: DOUBLE
36211: LD_INT 1
36213: DEC
36214: ST_TO_ADDR
36215: LD_VAR 0 6
36219: PUSH
36220: FOR_TO
36221: IFFALSE 36268
// begin vc_chassis := 31 ;
36223: LD_ADDR_OWVAR 37
36227: PUSH
36228: LD_INT 31
36230: ST_TO_ADDR
// vc_control := control_rider ;
36231: LD_ADDR_OWVAR 38
36235: PUSH
36236: LD_INT 4
36238: ST_TO_ADDR
// animal := CreateVehicle ;
36239: LD_ADDR_VAR 0 12
36243: PUSH
36244: CALL_OW 45
36248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36249: LD_VAR 0 12
36253: PPUSH
36254: LD_VAR 0 8
36258: PPUSH
36259: LD_INT 0
36261: PPUSH
36262: CALL 38398 0 3
// end ;
36266: GO 36220
36268: POP
36269: POP
// if horses then
36270: LD_VAR 0 5
36274: IFFALSE 36341
// for i = 1 to horses do
36276: LD_ADDR_VAR 0 11
36280: PUSH
36281: DOUBLE
36282: LD_INT 1
36284: DEC
36285: ST_TO_ADDR
36286: LD_VAR 0 5
36290: PUSH
36291: FOR_TO
36292: IFFALSE 36339
// begin hc_class := 21 ;
36294: LD_ADDR_OWVAR 28
36298: PUSH
36299: LD_INT 21
36301: ST_TO_ADDR
// hc_gallery :=  ;
36302: LD_ADDR_OWVAR 33
36306: PUSH
36307: LD_STRING 
36309: ST_TO_ADDR
// animal := CreateHuman ;
36310: LD_ADDR_VAR 0 12
36314: PUSH
36315: CALL_OW 44
36319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36320: LD_VAR 0 12
36324: PPUSH
36325: LD_VAR 0 8
36329: PPUSH
36330: LD_INT 0
36332: PPUSH
36333: CALL 38398 0 3
// end ;
36337: GO 36291
36339: POP
36340: POP
// if birds then
36341: LD_VAR 0 1
36345: IFFALSE 36412
// for i = 1 to birds do
36347: LD_ADDR_VAR 0 11
36351: PUSH
36352: DOUBLE
36353: LD_INT 1
36355: DEC
36356: ST_TO_ADDR
36357: LD_VAR 0 1
36361: PUSH
36362: FOR_TO
36363: IFFALSE 36410
// begin hc_class := 18 ;
36365: LD_ADDR_OWVAR 28
36369: PUSH
36370: LD_INT 18
36372: ST_TO_ADDR
// hc_gallery =  ;
36373: LD_ADDR_OWVAR 33
36377: PUSH
36378: LD_STRING 
36380: ST_TO_ADDR
// animal := CreateHuman ;
36381: LD_ADDR_VAR 0 12
36385: PUSH
36386: CALL_OW 44
36390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36391: LD_VAR 0 12
36395: PPUSH
36396: LD_VAR 0 8
36400: PPUSH
36401: LD_INT 0
36403: PPUSH
36404: CALL 38398 0 3
// end ;
36408: GO 36362
36410: POP
36411: POP
// if tigers then
36412: LD_VAR 0 2
36416: IFFALSE 36500
// for i = 1 to tigers do
36418: LD_ADDR_VAR 0 11
36422: PUSH
36423: DOUBLE
36424: LD_INT 1
36426: DEC
36427: ST_TO_ADDR
36428: LD_VAR 0 2
36432: PUSH
36433: FOR_TO
36434: IFFALSE 36498
// begin hc_class = class_tiger ;
36436: LD_ADDR_OWVAR 28
36440: PUSH
36441: LD_INT 14
36443: ST_TO_ADDR
// hc_gallery =  ;
36444: LD_ADDR_OWVAR 33
36448: PUSH
36449: LD_STRING 
36451: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36452: LD_ADDR_OWVAR 35
36456: PUSH
36457: LD_INT 7
36459: NEG
36460: PPUSH
36461: LD_INT 7
36463: PPUSH
36464: CALL_OW 12
36468: ST_TO_ADDR
// animal := CreateHuman ;
36469: LD_ADDR_VAR 0 12
36473: PUSH
36474: CALL_OW 44
36478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36479: LD_VAR 0 12
36483: PPUSH
36484: LD_VAR 0 8
36488: PPUSH
36489: LD_INT 0
36491: PPUSH
36492: CALL 38398 0 3
// end ;
36496: GO 36433
36498: POP
36499: POP
// if apemans then
36500: LD_VAR 0 3
36504: IFFALSE 36627
// for i = 1 to apemans do
36506: LD_ADDR_VAR 0 11
36510: PUSH
36511: DOUBLE
36512: LD_INT 1
36514: DEC
36515: ST_TO_ADDR
36516: LD_VAR 0 3
36520: PUSH
36521: FOR_TO
36522: IFFALSE 36625
// begin hc_class = class_apeman ;
36524: LD_ADDR_OWVAR 28
36528: PUSH
36529: LD_INT 12
36531: ST_TO_ADDR
// hc_gallery =  ;
36532: LD_ADDR_OWVAR 33
36536: PUSH
36537: LD_STRING 
36539: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36540: LD_ADDR_OWVAR 35
36544: PUSH
36545: LD_INT 2
36547: NEG
36548: PPUSH
36549: LD_INT 2
36551: PPUSH
36552: CALL_OW 12
36556: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36557: LD_ADDR_OWVAR 31
36561: PUSH
36562: LD_INT 1
36564: PPUSH
36565: LD_INT 3
36567: PPUSH
36568: CALL_OW 12
36572: PUSH
36573: LD_INT 1
36575: PPUSH
36576: LD_INT 3
36578: PPUSH
36579: CALL_OW 12
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: ST_TO_ADDR
// animal := CreateHuman ;
36596: LD_ADDR_VAR 0 12
36600: PUSH
36601: CALL_OW 44
36605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36606: LD_VAR 0 12
36610: PPUSH
36611: LD_VAR 0 8
36615: PPUSH
36616: LD_INT 0
36618: PPUSH
36619: CALL 38398 0 3
// end ;
36623: GO 36521
36625: POP
36626: POP
// if enchidnas then
36627: LD_VAR 0 4
36631: IFFALSE 36698
// for i = 1 to enchidnas do
36633: LD_ADDR_VAR 0 11
36637: PUSH
36638: DOUBLE
36639: LD_INT 1
36641: DEC
36642: ST_TO_ADDR
36643: LD_VAR 0 4
36647: PUSH
36648: FOR_TO
36649: IFFALSE 36696
// begin hc_class = 13 ;
36651: LD_ADDR_OWVAR 28
36655: PUSH
36656: LD_INT 13
36658: ST_TO_ADDR
// hc_gallery =  ;
36659: LD_ADDR_OWVAR 33
36663: PUSH
36664: LD_STRING 
36666: ST_TO_ADDR
// animal := CreateHuman ;
36667: LD_ADDR_VAR 0 12
36671: PUSH
36672: CALL_OW 44
36676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36677: LD_VAR 0 12
36681: PPUSH
36682: LD_VAR 0 8
36686: PPUSH
36687: LD_INT 0
36689: PPUSH
36690: CALL 38398 0 3
// end ;
36694: GO 36648
36696: POP
36697: POP
// if fishes then
36698: LD_VAR 0 7
36702: IFFALSE 36769
// for i = 1 to fishes do
36704: LD_ADDR_VAR 0 11
36708: PUSH
36709: DOUBLE
36710: LD_INT 1
36712: DEC
36713: ST_TO_ADDR
36714: LD_VAR 0 7
36718: PUSH
36719: FOR_TO
36720: IFFALSE 36767
// begin hc_class = 20 ;
36722: LD_ADDR_OWVAR 28
36726: PUSH
36727: LD_INT 20
36729: ST_TO_ADDR
// hc_gallery =  ;
36730: LD_ADDR_OWVAR 33
36734: PUSH
36735: LD_STRING 
36737: ST_TO_ADDR
// animal := CreateHuman ;
36738: LD_ADDR_VAR 0 12
36742: PUSH
36743: CALL_OW 44
36747: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36748: LD_VAR 0 12
36752: PPUSH
36753: LD_VAR 0 9
36757: PPUSH
36758: LD_INT 0
36760: PPUSH
36761: CALL 38398 0 3
// end ;
36765: GO 36719
36767: POP
36768: POP
// end ;
36769: LD_VAR 0 10
36773: RET
// export function WantHeal ( sci , unit ) ; begin
36774: LD_INT 0
36776: PPUSH
// if GetTaskList ( sci ) > 0 then
36777: LD_VAR 0 1
36781: PPUSH
36782: CALL_OW 437
36786: PUSH
36787: LD_INT 0
36789: GREATER
36790: IFFALSE 36860
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36792: LD_VAR 0 1
36796: PPUSH
36797: CALL_OW 437
36801: PUSH
36802: LD_INT 1
36804: ARRAY
36805: PUSH
36806: LD_INT 1
36808: ARRAY
36809: PUSH
36810: LD_STRING l
36812: EQUAL
36813: PUSH
36814: LD_VAR 0 1
36818: PPUSH
36819: CALL_OW 437
36823: PUSH
36824: LD_INT 1
36826: ARRAY
36827: PUSH
36828: LD_INT 4
36830: ARRAY
36831: PUSH
36832: LD_VAR 0 2
36836: EQUAL
36837: AND
36838: IFFALSE 36850
// result := true else
36840: LD_ADDR_VAR 0 3
36844: PUSH
36845: LD_INT 1
36847: ST_TO_ADDR
36848: GO 36858
// result := false ;
36850: LD_ADDR_VAR 0 3
36854: PUSH
36855: LD_INT 0
36857: ST_TO_ADDR
// end else
36858: GO 36868
// result := false ;
36860: LD_ADDR_VAR 0 3
36864: PUSH
36865: LD_INT 0
36867: ST_TO_ADDR
// end ;
36868: LD_VAR 0 3
36872: RET
// export function HealTarget ( sci ) ; begin
36873: LD_INT 0
36875: PPUSH
// if not sci then
36876: LD_VAR 0 1
36880: NOT
36881: IFFALSE 36885
// exit ;
36883: GO 36950
// result := 0 ;
36885: LD_ADDR_VAR 0 2
36889: PUSH
36890: LD_INT 0
36892: ST_TO_ADDR
// if GetTaskList ( sci ) then
36893: LD_VAR 0 1
36897: PPUSH
36898: CALL_OW 437
36902: IFFALSE 36950
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36904: LD_VAR 0 1
36908: PPUSH
36909: CALL_OW 437
36913: PUSH
36914: LD_INT 1
36916: ARRAY
36917: PUSH
36918: LD_INT 1
36920: ARRAY
36921: PUSH
36922: LD_STRING l
36924: EQUAL
36925: IFFALSE 36950
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36927: LD_ADDR_VAR 0 2
36931: PUSH
36932: LD_VAR 0 1
36936: PPUSH
36937: CALL_OW 437
36941: PUSH
36942: LD_INT 1
36944: ARRAY
36945: PUSH
36946: LD_INT 4
36948: ARRAY
36949: ST_TO_ADDR
// end ;
36950: LD_VAR 0 2
36954: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36955: LD_INT 0
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
// if not base_units then
36961: LD_VAR 0 1
36965: NOT
36966: IFFALSE 36970
// exit ;
36968: GO 37057
// result := false ;
36970: LD_ADDR_VAR 0 2
36974: PUSH
36975: LD_INT 0
36977: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36978: LD_ADDR_VAR 0 5
36982: PUSH
36983: LD_VAR 0 1
36987: PPUSH
36988: LD_INT 21
36990: PUSH
36991: LD_INT 3
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PPUSH
36998: CALL_OW 72
37002: ST_TO_ADDR
// if not tmp then
37003: LD_VAR 0 5
37007: NOT
37008: IFFALSE 37012
// exit ;
37010: GO 37057
// for i in tmp do
37012: LD_ADDR_VAR 0 3
37016: PUSH
37017: LD_VAR 0 5
37021: PUSH
37022: FOR_IN
37023: IFFALSE 37055
// begin result := EnemyInRange ( i , 22 ) ;
37025: LD_ADDR_VAR 0 2
37029: PUSH
37030: LD_VAR 0 3
37034: PPUSH
37035: LD_INT 22
37037: PPUSH
37038: CALL 34635 0 2
37042: ST_TO_ADDR
// if result then
37043: LD_VAR 0 2
37047: IFFALSE 37053
// exit ;
37049: POP
37050: POP
37051: GO 37057
// end ;
37053: GO 37022
37055: POP
37056: POP
// end ;
37057: LD_VAR 0 2
37061: RET
// export function FilterByTag ( units , tag ) ; begin
37062: LD_INT 0
37064: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37065: LD_ADDR_VAR 0 3
37069: PUSH
37070: LD_VAR 0 1
37074: PPUSH
37075: LD_INT 120
37077: PUSH
37078: LD_VAR 0 2
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PPUSH
37087: CALL_OW 72
37091: ST_TO_ADDR
// end ;
37092: LD_VAR 0 3
37096: RET
// export function IsDriver ( un ) ; begin
37097: LD_INT 0
37099: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37100: LD_ADDR_VAR 0 2
37104: PUSH
37105: LD_VAR 0 1
37109: PUSH
37110: LD_INT 55
37112: PUSH
37113: EMPTY
37114: LIST
37115: PPUSH
37116: CALL_OW 69
37120: IN
37121: ST_TO_ADDR
// end ;
37122: LD_VAR 0 2
37126: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37127: LD_INT 0
37129: PPUSH
37130: PPUSH
// list := [ ] ;
37131: LD_ADDR_VAR 0 5
37135: PUSH
37136: EMPTY
37137: ST_TO_ADDR
// case d of 0 :
37138: LD_VAR 0 3
37142: PUSH
37143: LD_INT 0
37145: DOUBLE
37146: EQUAL
37147: IFTRUE 37151
37149: GO 37284
37151: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37152: LD_ADDR_VAR 0 5
37156: PUSH
37157: LD_VAR 0 1
37161: PUSH
37162: LD_INT 4
37164: MINUS
37165: PUSH
37166: LD_VAR 0 2
37170: PUSH
37171: LD_INT 4
37173: MINUS
37174: PUSH
37175: LD_INT 2
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: LIST
37182: PUSH
37183: LD_VAR 0 1
37187: PUSH
37188: LD_INT 3
37190: MINUS
37191: PUSH
37192: LD_VAR 0 2
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: PUSH
37205: LD_VAR 0 1
37209: PUSH
37210: LD_INT 4
37212: PLUS
37213: PUSH
37214: LD_VAR 0 2
37218: PUSH
37219: LD_INT 4
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: PUSH
37227: LD_VAR 0 1
37231: PUSH
37232: LD_INT 3
37234: PLUS
37235: PUSH
37236: LD_VAR 0 2
37240: PUSH
37241: LD_INT 3
37243: PLUS
37244: PUSH
37245: LD_INT 5
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: PUSH
37253: LD_VAR 0 1
37257: PUSH
37258: LD_VAR 0 2
37262: PUSH
37263: LD_INT 4
37265: PLUS
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: ST_TO_ADDR
// end ; 1 :
37282: GO 37982
37284: LD_INT 1
37286: DOUBLE
37287: EQUAL
37288: IFTRUE 37292
37290: GO 37425
37292: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37293: LD_ADDR_VAR 0 5
37297: PUSH
37298: LD_VAR 0 1
37302: PUSH
37303: LD_VAR 0 2
37307: PUSH
37308: LD_INT 4
37310: MINUS
37311: PUSH
37312: LD_INT 3
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: PUSH
37320: LD_VAR 0 1
37324: PUSH
37325: LD_INT 3
37327: MINUS
37328: PUSH
37329: LD_VAR 0 2
37333: PUSH
37334: LD_INT 3
37336: MINUS
37337: PUSH
37338: LD_INT 2
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: LIST
37345: PUSH
37346: LD_VAR 0 1
37350: PUSH
37351: LD_INT 4
37353: MINUS
37354: PUSH
37355: LD_VAR 0 2
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: LIST
37367: PUSH
37368: LD_VAR 0 1
37372: PUSH
37373: LD_VAR 0 2
37377: PUSH
37378: LD_INT 3
37380: PLUS
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: PUSH
37390: LD_VAR 0 1
37394: PUSH
37395: LD_INT 4
37397: PLUS
37398: PUSH
37399: LD_VAR 0 2
37403: PUSH
37404: LD_INT 4
37406: PLUS
37407: PUSH
37408: LD_INT 5
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: ST_TO_ADDR
// end ; 2 :
37423: GO 37982
37425: LD_INT 2
37427: DOUBLE
37428: EQUAL
37429: IFTRUE 37433
37431: GO 37562
37433: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37434: LD_ADDR_VAR 0 5
37438: PUSH
37439: LD_VAR 0 1
37443: PUSH
37444: LD_VAR 0 2
37448: PUSH
37449: LD_INT 3
37451: MINUS
37452: PUSH
37453: LD_INT 3
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: LIST
37460: PUSH
37461: LD_VAR 0 1
37465: PUSH
37466: LD_INT 4
37468: PLUS
37469: PUSH
37470: LD_VAR 0 2
37474: PUSH
37475: LD_INT 4
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: LIST
37482: PUSH
37483: LD_VAR 0 1
37487: PUSH
37488: LD_VAR 0 2
37492: PUSH
37493: LD_INT 4
37495: PLUS
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: LIST
37504: PUSH
37505: LD_VAR 0 1
37509: PUSH
37510: LD_INT 3
37512: MINUS
37513: PUSH
37514: LD_VAR 0 2
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: LIST
37526: PUSH
37527: LD_VAR 0 1
37531: PUSH
37532: LD_INT 4
37534: MINUS
37535: PUSH
37536: LD_VAR 0 2
37540: PUSH
37541: LD_INT 4
37543: MINUS
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: ST_TO_ADDR
// end ; 3 :
37560: GO 37982
37562: LD_INT 3
37564: DOUBLE
37565: EQUAL
37566: IFTRUE 37570
37568: GO 37703
37570: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37571: LD_ADDR_VAR 0 5
37575: PUSH
37576: LD_VAR 0 1
37580: PUSH
37581: LD_INT 3
37583: PLUS
37584: PUSH
37585: LD_VAR 0 2
37589: PUSH
37590: LD_INT 4
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: PUSH
37598: LD_VAR 0 1
37602: PUSH
37603: LD_INT 4
37605: PLUS
37606: PUSH
37607: LD_VAR 0 2
37611: PUSH
37612: LD_INT 4
37614: PLUS
37615: PUSH
37616: LD_INT 5
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: PUSH
37624: LD_VAR 0 1
37628: PUSH
37629: LD_INT 4
37631: MINUS
37632: PUSH
37633: LD_VAR 0 2
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: PUSH
37646: LD_VAR 0 1
37650: PUSH
37651: LD_VAR 0 2
37655: PUSH
37656: LD_INT 4
37658: MINUS
37659: PUSH
37660: LD_INT 3
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: PUSH
37668: LD_VAR 0 1
37672: PUSH
37673: LD_INT 3
37675: MINUS
37676: PUSH
37677: LD_VAR 0 2
37681: PUSH
37682: LD_INT 3
37684: MINUS
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: ST_TO_ADDR
// end ; 4 :
37701: GO 37982
37703: LD_INT 4
37705: DOUBLE
37706: EQUAL
37707: IFTRUE 37711
37709: GO 37844
37711: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37712: LD_ADDR_VAR 0 5
37716: PUSH
37717: LD_VAR 0 1
37721: PUSH
37722: LD_VAR 0 2
37726: PUSH
37727: LD_INT 4
37729: PLUS
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: PUSH
37739: LD_VAR 0 1
37743: PUSH
37744: LD_INT 3
37746: PLUS
37747: PUSH
37748: LD_VAR 0 2
37752: PUSH
37753: LD_INT 3
37755: PLUS
37756: PUSH
37757: LD_INT 5
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: PUSH
37765: LD_VAR 0 1
37769: PUSH
37770: LD_INT 4
37772: PLUS
37773: PUSH
37774: LD_VAR 0 2
37778: PUSH
37779: LD_INT 4
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: PUSH
37787: LD_VAR 0 1
37791: PUSH
37792: LD_VAR 0 2
37796: PUSH
37797: LD_INT 3
37799: MINUS
37800: PUSH
37801: LD_INT 3
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: LIST
37808: PUSH
37809: LD_VAR 0 1
37813: PUSH
37814: LD_INT 4
37816: MINUS
37817: PUSH
37818: LD_VAR 0 2
37822: PUSH
37823: LD_INT 4
37825: MINUS
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: ST_TO_ADDR
// end ; 5 :
37842: GO 37982
37844: LD_INT 5
37846: DOUBLE
37847: EQUAL
37848: IFTRUE 37852
37850: GO 37981
37852: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37853: LD_ADDR_VAR 0 5
37857: PUSH
37858: LD_VAR 0 1
37862: PUSH
37863: LD_INT 4
37865: MINUS
37866: PUSH
37867: LD_VAR 0 2
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: PUSH
37880: LD_VAR 0 1
37884: PUSH
37885: LD_VAR 0 2
37889: PUSH
37890: LD_INT 4
37892: MINUS
37893: PUSH
37894: LD_INT 3
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: PUSH
37902: LD_VAR 0 1
37906: PUSH
37907: LD_INT 4
37909: PLUS
37910: PUSH
37911: LD_VAR 0 2
37915: PUSH
37916: LD_INT 4
37918: PLUS
37919: PUSH
37920: LD_INT 5
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: PUSH
37928: LD_VAR 0 1
37932: PUSH
37933: LD_INT 3
37935: PLUS
37936: PUSH
37937: LD_VAR 0 2
37941: PUSH
37942: LD_INT 4
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: LIST
37949: PUSH
37950: LD_VAR 0 1
37954: PUSH
37955: LD_VAR 0 2
37959: PUSH
37960: LD_INT 3
37962: PLUS
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: ST_TO_ADDR
// end ; end ;
37979: GO 37982
37981: POP
// result := list ;
37982: LD_ADDR_VAR 0 4
37986: PUSH
37987: LD_VAR 0 5
37991: ST_TO_ADDR
// end ;
37992: LD_VAR 0 4
37996: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37997: LD_INT 0
37999: PPUSH
38000: PPUSH
38001: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38002: LD_VAR 0 1
38006: NOT
38007: PUSH
38008: LD_VAR 0 2
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: LD_INT 3
38021: PUSH
38022: LD_INT 4
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: IN
38031: NOT
38032: OR
38033: IFFALSE 38037
// exit ;
38035: GO 38120
// tmp := [ ] ;
38037: LD_ADDR_VAR 0 5
38041: PUSH
38042: EMPTY
38043: ST_TO_ADDR
// for i in units do
38044: LD_ADDR_VAR 0 4
38048: PUSH
38049: LD_VAR 0 1
38053: PUSH
38054: FOR_IN
38055: IFFALSE 38089
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38057: LD_ADDR_VAR 0 5
38061: PUSH
38062: LD_VAR 0 5
38066: PPUSH
38067: LD_VAR 0 4
38071: PPUSH
38072: LD_VAR 0 2
38076: PPUSH
38077: CALL_OW 259
38081: PPUSH
38082: CALL 39493 0 2
38086: ST_TO_ADDR
38087: GO 38054
38089: POP
38090: POP
// if not tmp then
38091: LD_VAR 0 5
38095: NOT
38096: IFFALSE 38100
// exit ;
38098: GO 38120
// result := SortListByListDesc ( units , tmp ) ;
38100: LD_ADDR_VAR 0 3
38104: PUSH
38105: LD_VAR 0 1
38109: PPUSH
38110: LD_VAR 0 5
38114: PPUSH
38115: CALL_OW 77
38119: ST_TO_ADDR
// end ;
38120: LD_VAR 0 3
38124: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38125: LD_INT 0
38127: PPUSH
38128: PPUSH
38129: PPUSH
// result := false ;
38130: LD_ADDR_VAR 0 3
38134: PUSH
38135: LD_INT 0
38137: ST_TO_ADDR
// if not building then
38138: LD_VAR 0 2
38142: NOT
38143: IFFALSE 38147
// exit ;
38145: GO 38285
// x := GetX ( building ) ;
38147: LD_ADDR_VAR 0 4
38151: PUSH
38152: LD_VAR 0 2
38156: PPUSH
38157: CALL_OW 250
38161: ST_TO_ADDR
// y := GetY ( building ) ;
38162: LD_ADDR_VAR 0 5
38166: PUSH
38167: LD_VAR 0 2
38171: PPUSH
38172: CALL_OW 251
38176: ST_TO_ADDR
// if not x or not y then
38177: LD_VAR 0 4
38181: NOT
38182: PUSH
38183: LD_VAR 0 5
38187: NOT
38188: OR
38189: IFFALSE 38193
// exit ;
38191: GO 38285
// if GetTaskList ( unit ) then
38193: LD_VAR 0 1
38197: PPUSH
38198: CALL_OW 437
38202: IFFALSE 38285
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38204: LD_STRING e
38206: PUSH
38207: LD_VAR 0 1
38211: PPUSH
38212: CALL_OW 437
38216: PUSH
38217: LD_INT 1
38219: ARRAY
38220: PUSH
38221: LD_INT 1
38223: ARRAY
38224: EQUAL
38225: PUSH
38226: LD_VAR 0 4
38230: PUSH
38231: LD_VAR 0 1
38235: PPUSH
38236: CALL_OW 437
38240: PUSH
38241: LD_INT 1
38243: ARRAY
38244: PUSH
38245: LD_INT 2
38247: ARRAY
38248: EQUAL
38249: AND
38250: PUSH
38251: LD_VAR 0 5
38255: PUSH
38256: LD_VAR 0 1
38260: PPUSH
38261: CALL_OW 437
38265: PUSH
38266: LD_INT 1
38268: ARRAY
38269: PUSH
38270: LD_INT 3
38272: ARRAY
38273: EQUAL
38274: AND
38275: IFFALSE 38285
// result := true end ;
38277: LD_ADDR_VAR 0 3
38281: PUSH
38282: LD_INT 1
38284: ST_TO_ADDR
// end ;
38285: LD_VAR 0 3
38289: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38290: LD_INT 0
38292: PPUSH
// result := false ;
38293: LD_ADDR_VAR 0 4
38297: PUSH
38298: LD_INT 0
38300: ST_TO_ADDR
// if GetTaskList ( unit ) then
38301: LD_VAR 0 1
38305: PPUSH
38306: CALL_OW 437
38310: IFFALSE 38393
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38312: LD_STRING M
38314: PUSH
38315: LD_VAR 0 1
38319: PPUSH
38320: CALL_OW 437
38324: PUSH
38325: LD_INT 1
38327: ARRAY
38328: PUSH
38329: LD_INT 1
38331: ARRAY
38332: EQUAL
38333: PUSH
38334: LD_VAR 0 2
38338: PUSH
38339: LD_VAR 0 1
38343: PPUSH
38344: CALL_OW 437
38348: PUSH
38349: LD_INT 1
38351: ARRAY
38352: PUSH
38353: LD_INT 2
38355: ARRAY
38356: EQUAL
38357: AND
38358: PUSH
38359: LD_VAR 0 3
38363: PUSH
38364: LD_VAR 0 1
38368: PPUSH
38369: CALL_OW 437
38373: PUSH
38374: LD_INT 1
38376: ARRAY
38377: PUSH
38378: LD_INT 3
38380: ARRAY
38381: EQUAL
38382: AND
38383: IFFALSE 38393
// result := true ;
38385: LD_ADDR_VAR 0 4
38389: PUSH
38390: LD_INT 1
38392: ST_TO_ADDR
// end ; end ;
38393: LD_VAR 0 4
38397: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38398: LD_INT 0
38400: PPUSH
38401: PPUSH
38402: PPUSH
38403: PPUSH
// if not unit or not area then
38404: LD_VAR 0 1
38408: NOT
38409: PUSH
38410: LD_VAR 0 2
38414: NOT
38415: OR
38416: IFFALSE 38420
// exit ;
38418: GO 38596
// tmp := AreaToList ( area , i ) ;
38420: LD_ADDR_VAR 0 6
38424: PUSH
38425: LD_VAR 0 2
38429: PPUSH
38430: LD_VAR 0 5
38434: PPUSH
38435: CALL_OW 517
38439: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38440: LD_ADDR_VAR 0 5
38444: PUSH
38445: DOUBLE
38446: LD_INT 1
38448: DEC
38449: ST_TO_ADDR
38450: LD_VAR 0 6
38454: PUSH
38455: LD_INT 1
38457: ARRAY
38458: PUSH
38459: FOR_TO
38460: IFFALSE 38594
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38462: LD_ADDR_VAR 0 7
38466: PUSH
38467: LD_VAR 0 6
38471: PUSH
38472: LD_INT 1
38474: ARRAY
38475: PUSH
38476: LD_VAR 0 5
38480: ARRAY
38481: PUSH
38482: LD_VAR 0 6
38486: PUSH
38487: LD_INT 2
38489: ARRAY
38490: PUSH
38491: LD_VAR 0 5
38495: ARRAY
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38501: LD_INT 92
38503: PUSH
38504: LD_VAR 0 7
38508: PUSH
38509: LD_INT 1
38511: ARRAY
38512: PUSH
38513: LD_VAR 0 7
38517: PUSH
38518: LD_INT 2
38520: ARRAY
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: PPUSH
38531: CALL_OW 69
38535: PUSH
38536: LD_INT 0
38538: EQUAL
38539: IFFALSE 38592
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38541: LD_VAR 0 1
38545: PPUSH
38546: LD_VAR 0 7
38550: PUSH
38551: LD_INT 1
38553: ARRAY
38554: PPUSH
38555: LD_VAR 0 7
38559: PUSH
38560: LD_INT 2
38562: ARRAY
38563: PPUSH
38564: LD_VAR 0 3
38568: PPUSH
38569: CALL_OW 48
// result := IsPlaced ( unit ) ;
38573: LD_ADDR_VAR 0 4
38577: PUSH
38578: LD_VAR 0 1
38582: PPUSH
38583: CALL_OW 305
38587: ST_TO_ADDR
// exit ;
38588: POP
38589: POP
38590: GO 38596
// end ; end ;
38592: GO 38459
38594: POP
38595: POP
// end ;
38596: LD_VAR 0 4
38600: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38601: LD_INT 0
38603: PPUSH
38604: PPUSH
38605: PPUSH
// if not side or side > 8 then
38606: LD_VAR 0 1
38610: NOT
38611: PUSH
38612: LD_VAR 0 1
38616: PUSH
38617: LD_INT 8
38619: GREATER
38620: OR
38621: IFFALSE 38625
// exit ;
38623: GO 38812
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38625: LD_ADDR_VAR 0 4
38629: PUSH
38630: LD_INT 22
38632: PUSH
38633: LD_VAR 0 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 21
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PPUSH
38656: CALL_OW 69
38660: ST_TO_ADDR
// if not tmp then
38661: LD_VAR 0 4
38665: NOT
38666: IFFALSE 38670
// exit ;
38668: GO 38812
// enable_addtolog := true ;
38670: LD_ADDR_OWVAR 81
38674: PUSH
38675: LD_INT 1
38677: ST_TO_ADDR
// AddToLog ( [ ) ;
38678: LD_STRING [
38680: PPUSH
38681: CALL_OW 561
// for i in tmp do
38685: LD_ADDR_VAR 0 3
38689: PUSH
38690: LD_VAR 0 4
38694: PUSH
38695: FOR_IN
38696: IFFALSE 38803
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38698: LD_STRING [
38700: PUSH
38701: LD_VAR 0 3
38705: PPUSH
38706: CALL_OW 266
38710: STR
38711: PUSH
38712: LD_STRING , 
38714: STR
38715: PUSH
38716: LD_VAR 0 3
38720: PPUSH
38721: CALL_OW 250
38725: STR
38726: PUSH
38727: LD_STRING , 
38729: STR
38730: PUSH
38731: LD_VAR 0 3
38735: PPUSH
38736: CALL_OW 251
38740: STR
38741: PUSH
38742: LD_STRING , 
38744: STR
38745: PUSH
38746: LD_VAR 0 3
38750: PPUSH
38751: CALL_OW 254
38755: STR
38756: PUSH
38757: LD_STRING , 
38759: STR
38760: PUSH
38761: LD_VAR 0 3
38765: PPUSH
38766: LD_INT 1
38768: PPUSH
38769: CALL_OW 268
38773: STR
38774: PUSH
38775: LD_STRING , 
38777: STR
38778: PUSH
38779: LD_VAR 0 3
38783: PPUSH
38784: LD_INT 2
38786: PPUSH
38787: CALL_OW 268
38791: STR
38792: PUSH
38793: LD_STRING ],
38795: STR
38796: PPUSH
38797: CALL_OW 561
// end ;
38801: GO 38695
38803: POP
38804: POP
// AddToLog ( ]; ) ;
38805: LD_STRING ];
38807: PPUSH
38808: CALL_OW 561
// end ;
38812: LD_VAR 0 2
38816: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38817: LD_INT 0
38819: PPUSH
38820: PPUSH
38821: PPUSH
38822: PPUSH
38823: PPUSH
// if not area or not rate or not max then
38824: LD_VAR 0 1
38828: NOT
38829: PUSH
38830: LD_VAR 0 2
38834: NOT
38835: OR
38836: PUSH
38837: LD_VAR 0 4
38841: NOT
38842: OR
38843: IFFALSE 38847
// exit ;
38845: GO 39036
// while 1 do
38847: LD_INT 1
38849: IFFALSE 39036
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38851: LD_ADDR_VAR 0 9
38855: PUSH
38856: LD_VAR 0 1
38860: PPUSH
38861: LD_INT 1
38863: PPUSH
38864: CALL_OW 287
38868: PUSH
38869: LD_INT 10
38871: MUL
38872: ST_TO_ADDR
// r := rate / 10 ;
38873: LD_ADDR_VAR 0 7
38877: PUSH
38878: LD_VAR 0 2
38882: PUSH
38883: LD_INT 10
38885: DIVREAL
38886: ST_TO_ADDR
// time := 1 1$00 ;
38887: LD_ADDR_VAR 0 8
38891: PUSH
38892: LD_INT 2100
38894: ST_TO_ADDR
// if amount < min then
38895: LD_VAR 0 9
38899: PUSH
38900: LD_VAR 0 3
38904: LESS
38905: IFFALSE 38923
// r := r * 2 else
38907: LD_ADDR_VAR 0 7
38911: PUSH
38912: LD_VAR 0 7
38916: PUSH
38917: LD_INT 2
38919: MUL
38920: ST_TO_ADDR
38921: GO 38949
// if amount > max then
38923: LD_VAR 0 9
38927: PUSH
38928: LD_VAR 0 4
38932: GREATER
38933: IFFALSE 38949
// r := r / 2 ;
38935: LD_ADDR_VAR 0 7
38939: PUSH
38940: LD_VAR 0 7
38944: PUSH
38945: LD_INT 2
38947: DIVREAL
38948: ST_TO_ADDR
// time := time / r ;
38949: LD_ADDR_VAR 0 8
38953: PUSH
38954: LD_VAR 0 8
38958: PUSH
38959: LD_VAR 0 7
38963: DIVREAL
38964: ST_TO_ADDR
// if time < 0 then
38965: LD_VAR 0 8
38969: PUSH
38970: LD_INT 0
38972: LESS
38973: IFFALSE 38990
// time := time * - 1 ;
38975: LD_ADDR_VAR 0 8
38979: PUSH
38980: LD_VAR 0 8
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: MUL
38989: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38990: LD_VAR 0 8
38994: PUSH
38995: LD_INT 35
38997: PPUSH
38998: LD_INT 875
39000: PPUSH
39001: CALL_OW 12
39005: PLUS
39006: PPUSH
39007: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39011: LD_INT 1
39013: PPUSH
39014: LD_INT 5
39016: PPUSH
39017: CALL_OW 12
39021: PPUSH
39022: LD_VAR 0 1
39026: PPUSH
39027: LD_INT 1
39029: PPUSH
39030: CALL_OW 55
// end ;
39034: GO 38847
// end ;
39036: LD_VAR 0 5
39040: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39041: LD_INT 0
39043: PPUSH
39044: PPUSH
39045: PPUSH
39046: PPUSH
39047: PPUSH
39048: PPUSH
39049: PPUSH
39050: PPUSH
// if not turrets or not factories then
39051: LD_VAR 0 1
39055: NOT
39056: PUSH
39057: LD_VAR 0 2
39061: NOT
39062: OR
39063: IFFALSE 39067
// exit ;
39065: GO 39374
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39067: LD_ADDR_VAR 0 10
39071: PUSH
39072: LD_INT 5
39074: PUSH
39075: LD_INT 6
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: LD_INT 4
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: PUSH
39095: LD_INT 5
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 24
39109: PUSH
39110: LD_INT 25
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 23
39119: PUSH
39120: LD_INT 27
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 42
39133: PUSH
39134: LD_INT 43
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 44
39143: PUSH
39144: LD_INT 46
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 45
39153: PUSH
39154: LD_INT 47
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: LIST
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: LIST
39170: ST_TO_ADDR
// result := [ ] ;
39171: LD_ADDR_VAR 0 3
39175: PUSH
39176: EMPTY
39177: ST_TO_ADDR
// for i in turrets do
39178: LD_ADDR_VAR 0 4
39182: PUSH
39183: LD_VAR 0 1
39187: PUSH
39188: FOR_IN
39189: IFFALSE 39372
// begin nat := GetNation ( i ) ;
39191: LD_ADDR_VAR 0 7
39195: PUSH
39196: LD_VAR 0 4
39200: PPUSH
39201: CALL_OW 248
39205: ST_TO_ADDR
// weapon := 0 ;
39206: LD_ADDR_VAR 0 8
39210: PUSH
39211: LD_INT 0
39213: ST_TO_ADDR
// if not nat then
39214: LD_VAR 0 7
39218: NOT
39219: IFFALSE 39223
// continue ;
39221: GO 39188
// for j in list [ nat ] do
39223: LD_ADDR_VAR 0 5
39227: PUSH
39228: LD_VAR 0 10
39232: PUSH
39233: LD_VAR 0 7
39237: ARRAY
39238: PUSH
39239: FOR_IN
39240: IFFALSE 39281
// if GetBWeapon ( i ) = j [ 1 ] then
39242: LD_VAR 0 4
39246: PPUSH
39247: CALL_OW 269
39251: PUSH
39252: LD_VAR 0 5
39256: PUSH
39257: LD_INT 1
39259: ARRAY
39260: EQUAL
39261: IFFALSE 39279
// begin weapon := j [ 2 ] ;
39263: LD_ADDR_VAR 0 8
39267: PUSH
39268: LD_VAR 0 5
39272: PUSH
39273: LD_INT 2
39275: ARRAY
39276: ST_TO_ADDR
// break ;
39277: GO 39281
// end ;
39279: GO 39239
39281: POP
39282: POP
// if not weapon then
39283: LD_VAR 0 8
39287: NOT
39288: IFFALSE 39292
// continue ;
39290: GO 39188
// for k in factories do
39292: LD_ADDR_VAR 0 6
39296: PUSH
39297: LD_VAR 0 2
39301: PUSH
39302: FOR_IN
39303: IFFALSE 39368
// begin weapons := AvailableWeaponList ( k ) ;
39305: LD_ADDR_VAR 0 9
39309: PUSH
39310: LD_VAR 0 6
39314: PPUSH
39315: CALL_OW 478
39319: ST_TO_ADDR
// if not weapons then
39320: LD_VAR 0 9
39324: NOT
39325: IFFALSE 39329
// continue ;
39327: GO 39302
// if weapon in weapons then
39329: LD_VAR 0 8
39333: PUSH
39334: LD_VAR 0 9
39338: IN
39339: IFFALSE 39366
// begin result := [ i , weapon ] ;
39341: LD_ADDR_VAR 0 3
39345: PUSH
39346: LD_VAR 0 4
39350: PUSH
39351: LD_VAR 0 8
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: ST_TO_ADDR
// exit ;
39360: POP
39361: POP
39362: POP
39363: POP
39364: GO 39374
// end ; end ;
39366: GO 39302
39368: POP
39369: POP
// end ;
39370: GO 39188
39372: POP
39373: POP
// end ;
39374: LD_VAR 0 3
39378: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39379: LD_INT 0
39381: PPUSH
// if not side or side > 8 then
39382: LD_VAR 0 3
39386: NOT
39387: PUSH
39388: LD_VAR 0 3
39392: PUSH
39393: LD_INT 8
39395: GREATER
39396: OR
39397: IFFALSE 39401
// exit ;
39399: GO 39460
// if not range then
39401: LD_VAR 0 4
39405: NOT
39406: IFFALSE 39417
// range := - 12 ;
39408: LD_ADDR_VAR 0 4
39412: PUSH
39413: LD_INT 12
39415: NEG
39416: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39417: LD_VAR 0 1
39421: PPUSH
39422: LD_VAR 0 2
39426: PPUSH
39427: LD_VAR 0 3
39431: PPUSH
39432: LD_VAR 0 4
39436: PPUSH
39437: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39441: LD_VAR 0 1
39445: PPUSH
39446: LD_VAR 0 2
39450: PPUSH
39451: LD_VAR 0 3
39455: PPUSH
39456: CALL_OW 331
// end ;
39460: LD_VAR 0 5
39464: RET
// export function Video ( mode ) ; begin
39465: LD_INT 0
39467: PPUSH
// ingame_video = mode ;
39468: LD_ADDR_OWVAR 52
39472: PUSH
39473: LD_VAR 0 1
39477: ST_TO_ADDR
// interface_hidden = mode ;
39478: LD_ADDR_OWVAR 54
39482: PUSH
39483: LD_VAR 0 1
39487: ST_TO_ADDR
// end ;
39488: LD_VAR 0 2
39492: RET
// export function Join ( array , element ) ; begin
39493: LD_INT 0
39495: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39496: LD_ADDR_VAR 0 3
39500: PUSH
39501: LD_VAR 0 1
39505: PPUSH
39506: LD_VAR 0 1
39510: PUSH
39511: LD_INT 1
39513: PLUS
39514: PPUSH
39515: LD_VAR 0 2
39519: PPUSH
39520: CALL_OW 1
39524: ST_TO_ADDR
// end ;
39525: LD_VAR 0 3
39529: RET
// export function JoinUnion ( array , element ) ; begin
39530: LD_INT 0
39532: PPUSH
// result := array union element ;
39533: LD_ADDR_VAR 0 3
39537: PUSH
39538: LD_VAR 0 1
39542: PUSH
39543: LD_VAR 0 2
39547: UNION
39548: ST_TO_ADDR
// end ;
39549: LD_VAR 0 3
39553: RET
// export function GetBehemoths ( side ) ; begin
39554: LD_INT 0
39556: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39557: LD_ADDR_VAR 0 2
39561: PUSH
39562: LD_INT 22
39564: PUSH
39565: LD_VAR 0 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 31
39576: PUSH
39577: LD_INT 25
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PPUSH
39588: CALL_OW 69
39592: ST_TO_ADDR
// end ;
39593: LD_VAR 0 2
39597: RET
// export function Shuffle ( array ) ; var i , index ; begin
39598: LD_INT 0
39600: PPUSH
39601: PPUSH
39602: PPUSH
// result := [ ] ;
39603: LD_ADDR_VAR 0 2
39607: PUSH
39608: EMPTY
39609: ST_TO_ADDR
// if not array then
39610: LD_VAR 0 1
39614: NOT
39615: IFFALSE 39619
// exit ;
39617: GO 39718
// Randomize ;
39619: CALL_OW 10
// for i = array downto 1 do
39623: LD_ADDR_VAR 0 3
39627: PUSH
39628: DOUBLE
39629: LD_VAR 0 1
39633: INC
39634: ST_TO_ADDR
39635: LD_INT 1
39637: PUSH
39638: FOR_DOWNTO
39639: IFFALSE 39716
// begin index := rand ( 1 , array ) ;
39641: LD_ADDR_VAR 0 4
39645: PUSH
39646: LD_INT 1
39648: PPUSH
39649: LD_VAR 0 1
39653: PPUSH
39654: CALL_OW 12
39658: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39659: LD_ADDR_VAR 0 2
39663: PUSH
39664: LD_VAR 0 2
39668: PPUSH
39669: LD_VAR 0 2
39673: PUSH
39674: LD_INT 1
39676: PLUS
39677: PPUSH
39678: LD_VAR 0 1
39682: PUSH
39683: LD_VAR 0 4
39687: ARRAY
39688: PPUSH
39689: CALL_OW 2
39693: ST_TO_ADDR
// array := Delete ( array , index ) ;
39694: LD_ADDR_VAR 0 1
39698: PUSH
39699: LD_VAR 0 1
39703: PPUSH
39704: LD_VAR 0 4
39708: PPUSH
39709: CALL_OW 3
39713: ST_TO_ADDR
// end ;
39714: GO 39638
39716: POP
39717: POP
// end ;
39718: LD_VAR 0 2
39722: RET
// export function GetBaseMaterials ( base ) ; begin
39723: LD_INT 0
39725: PPUSH
// result := [ 0 , 0 , 0 ] ;
39726: LD_ADDR_VAR 0 2
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: LIST
39744: ST_TO_ADDR
// if not base then
39745: LD_VAR 0 1
39749: NOT
39750: IFFALSE 39754
// exit ;
39752: GO 39803
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39754: LD_ADDR_VAR 0 2
39758: PUSH
39759: LD_VAR 0 1
39763: PPUSH
39764: LD_INT 1
39766: PPUSH
39767: CALL_OW 275
39771: PUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: LD_INT 2
39779: PPUSH
39780: CALL_OW 275
39784: PUSH
39785: LD_VAR 0 1
39789: PPUSH
39790: LD_INT 3
39792: PPUSH
39793: CALL_OW 275
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: LIST
39802: ST_TO_ADDR
// end ;
39803: LD_VAR 0 2
39807: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39808: LD_INT 0
39810: PPUSH
39811: PPUSH
// result := array ;
39812: LD_ADDR_VAR 0 3
39816: PUSH
39817: LD_VAR 0 1
39821: ST_TO_ADDR
// if size >= result then
39822: LD_VAR 0 2
39826: PUSH
39827: LD_VAR 0 3
39831: GREATEREQUAL
39832: IFFALSE 39836
// exit ;
39834: GO 39886
// if size then
39836: LD_VAR 0 2
39840: IFFALSE 39886
// for i := array downto size do
39842: LD_ADDR_VAR 0 4
39846: PUSH
39847: DOUBLE
39848: LD_VAR 0 1
39852: INC
39853: ST_TO_ADDR
39854: LD_VAR 0 2
39858: PUSH
39859: FOR_DOWNTO
39860: IFFALSE 39884
// result := Delete ( result , result ) ;
39862: LD_ADDR_VAR 0 3
39866: PUSH
39867: LD_VAR 0 3
39871: PPUSH
39872: LD_VAR 0 3
39876: PPUSH
39877: CALL_OW 3
39881: ST_TO_ADDR
39882: GO 39859
39884: POP
39885: POP
// end ;
39886: LD_VAR 0 3
39890: RET
// export function ComExit ( unit ) ; var tmp ; begin
39891: LD_INT 0
39893: PPUSH
39894: PPUSH
// if not IsInUnit ( unit ) then
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL_OW 310
39904: NOT
39905: IFFALSE 39909
// exit ;
39907: GO 39969
// tmp := IsInUnit ( unit ) ;
39909: LD_ADDR_VAR 0 3
39913: PUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 310
39923: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39924: LD_VAR 0 3
39928: PPUSH
39929: CALL_OW 247
39933: PUSH
39934: LD_INT 2
39936: EQUAL
39937: IFFALSE 39950
// ComExitVehicle ( unit ) else
39939: LD_VAR 0 1
39943: PPUSH
39944: CALL_OW 121
39948: GO 39959
// ComExitBuilding ( unit ) ;
39950: LD_VAR 0 1
39954: PPUSH
39955: CALL_OW 122
// result := tmp ;
39959: LD_ADDR_VAR 0 2
39963: PUSH
39964: LD_VAR 0 3
39968: ST_TO_ADDR
// end ;
39969: LD_VAR 0 2
39973: RET
// export function ComExitAll ( units ) ; var i ; begin
39974: LD_INT 0
39976: PPUSH
39977: PPUSH
// if not units then
39978: LD_VAR 0 1
39982: NOT
39983: IFFALSE 39987
// exit ;
39985: GO 40013
// for i in units do
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_VAR 0 1
39996: PUSH
39997: FOR_IN
39998: IFFALSE 40011
// ComExit ( i ) ;
40000: LD_VAR 0 3
40004: PPUSH
40005: CALL 39891 0 1
40009: GO 39997
40011: POP
40012: POP
// end ;
40013: LD_VAR 0 2
40017: RET
// export function ResetHc ; begin
40018: LD_INT 0
40020: PPUSH
// InitHc ;
40021: CALL_OW 19
// hc_importance := 0 ;
40025: LD_ADDR_OWVAR 32
40029: PUSH
40030: LD_INT 0
40032: ST_TO_ADDR
// end ;
40033: LD_VAR 0 1
40037: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40038: LD_INT 0
40040: PPUSH
40041: PPUSH
40042: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40043: LD_ADDR_VAR 0 6
40047: PUSH
40048: LD_VAR 0 1
40052: PUSH
40053: LD_VAR 0 3
40057: PLUS
40058: PUSH
40059: LD_INT 2
40061: DIV
40062: ST_TO_ADDR
// if _x < 0 then
40063: LD_VAR 0 6
40067: PUSH
40068: LD_INT 0
40070: LESS
40071: IFFALSE 40088
// _x := _x * - 1 ;
40073: LD_ADDR_VAR 0 6
40077: PUSH
40078: LD_VAR 0 6
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: MUL
40087: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40088: LD_ADDR_VAR 0 7
40092: PUSH
40093: LD_VAR 0 2
40097: PUSH
40098: LD_VAR 0 4
40102: PLUS
40103: PUSH
40104: LD_INT 2
40106: DIV
40107: ST_TO_ADDR
// if _y < 0 then
40108: LD_VAR 0 7
40112: PUSH
40113: LD_INT 0
40115: LESS
40116: IFFALSE 40133
// _y := _y * - 1 ;
40118: LD_ADDR_VAR 0 7
40122: PUSH
40123: LD_VAR 0 7
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: MUL
40132: ST_TO_ADDR
// result := [ _x , _y ] ;
40133: LD_ADDR_VAR 0 5
40137: PUSH
40138: LD_VAR 0 6
40142: PUSH
40143: LD_VAR 0 7
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: ST_TO_ADDR
// end ;
40152: LD_VAR 0 5
40156: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40157: LD_INT 0
40159: PPUSH
40160: PPUSH
40161: PPUSH
40162: PPUSH
// task := GetTaskList ( unit ) ;
40163: LD_ADDR_VAR 0 7
40167: PUSH
40168: LD_VAR 0 1
40172: PPUSH
40173: CALL_OW 437
40177: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40178: LD_VAR 0 7
40182: NOT
40183: PUSH
40184: LD_VAR 0 1
40188: PPUSH
40189: LD_VAR 0 2
40193: PPUSH
40194: CALL_OW 308
40198: NOT
40199: AND
40200: IFFALSE 40204
// exit ;
40202: GO 40322
// if IsInArea ( unit , area ) then
40204: LD_VAR 0 1
40208: PPUSH
40209: LD_VAR 0 2
40213: PPUSH
40214: CALL_OW 308
40218: IFFALSE 40236
// begin ComMoveToArea ( unit , goAway ) ;
40220: LD_VAR 0 1
40224: PPUSH
40225: LD_VAR 0 3
40229: PPUSH
40230: CALL_OW 113
// exit ;
40234: GO 40322
// end ; if task [ 1 ] [ 1 ] <> M then
40236: LD_VAR 0 7
40240: PUSH
40241: LD_INT 1
40243: ARRAY
40244: PUSH
40245: LD_INT 1
40247: ARRAY
40248: PUSH
40249: LD_STRING M
40251: NONEQUAL
40252: IFFALSE 40256
// exit ;
40254: GO 40322
// x := task [ 1 ] [ 2 ] ;
40256: LD_ADDR_VAR 0 5
40260: PUSH
40261: LD_VAR 0 7
40265: PUSH
40266: LD_INT 1
40268: ARRAY
40269: PUSH
40270: LD_INT 2
40272: ARRAY
40273: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40274: LD_ADDR_VAR 0 6
40278: PUSH
40279: LD_VAR 0 7
40283: PUSH
40284: LD_INT 1
40286: ARRAY
40287: PUSH
40288: LD_INT 3
40290: ARRAY
40291: ST_TO_ADDR
// if InArea ( x , y , area ) then
40292: LD_VAR 0 5
40296: PPUSH
40297: LD_VAR 0 6
40301: PPUSH
40302: LD_VAR 0 2
40306: PPUSH
40307: CALL_OW 309
40311: IFFALSE 40322
// ComStop ( unit ) ;
40313: LD_VAR 0 1
40317: PPUSH
40318: CALL_OW 141
// end ;
40322: LD_VAR 0 4
40326: RET
// export function Abs ( value ) ; begin
40327: LD_INT 0
40329: PPUSH
// result := value ;
40330: LD_ADDR_VAR 0 2
40334: PUSH
40335: LD_VAR 0 1
40339: ST_TO_ADDR
// if value < 0 then
40340: LD_VAR 0 1
40344: PUSH
40345: LD_INT 0
40347: LESS
40348: IFFALSE 40365
// result := value * - 1 ;
40350: LD_ADDR_VAR 0 2
40354: PUSH
40355: LD_VAR 0 1
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: MUL
40364: ST_TO_ADDR
// end ;
40365: LD_VAR 0 2
40369: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40370: LD_INT 0
40372: PPUSH
40373: PPUSH
40374: PPUSH
40375: PPUSH
40376: PPUSH
40377: PPUSH
40378: PPUSH
40379: PPUSH
// if not unit or not building then
40380: LD_VAR 0 1
40384: NOT
40385: PUSH
40386: LD_VAR 0 2
40390: NOT
40391: OR
40392: IFFALSE 40396
// exit ;
40394: GO 40622
// x := GetX ( building ) ;
40396: LD_ADDR_VAR 0 4
40400: PUSH
40401: LD_VAR 0 2
40405: PPUSH
40406: CALL_OW 250
40410: ST_TO_ADDR
// y := GetY ( building ) ;
40411: LD_ADDR_VAR 0 6
40415: PUSH
40416: LD_VAR 0 2
40420: PPUSH
40421: CALL_OW 251
40425: ST_TO_ADDR
// d := GetDir ( building ) ;
40426: LD_ADDR_VAR 0 8
40430: PUSH
40431: LD_VAR 0 2
40435: PPUSH
40436: CALL_OW 254
40440: ST_TO_ADDR
// r := 4 ;
40441: LD_ADDR_VAR 0 9
40445: PUSH
40446: LD_INT 4
40448: ST_TO_ADDR
// for i := 1 to 5 do
40449: LD_ADDR_VAR 0 10
40453: PUSH
40454: DOUBLE
40455: LD_INT 1
40457: DEC
40458: ST_TO_ADDR
40459: LD_INT 5
40461: PUSH
40462: FOR_TO
40463: IFFALSE 40620
// begin _x := ShiftX ( x , d , r + i ) ;
40465: LD_ADDR_VAR 0 5
40469: PUSH
40470: LD_VAR 0 4
40474: PPUSH
40475: LD_VAR 0 8
40479: PPUSH
40480: LD_VAR 0 9
40484: PUSH
40485: LD_VAR 0 10
40489: PLUS
40490: PPUSH
40491: CALL_OW 272
40495: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40496: LD_ADDR_VAR 0 7
40500: PUSH
40501: LD_VAR 0 6
40505: PPUSH
40506: LD_VAR 0 8
40510: PPUSH
40511: LD_VAR 0 9
40515: PUSH
40516: LD_VAR 0 10
40520: PLUS
40521: PPUSH
40522: CALL_OW 273
40526: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40527: LD_VAR 0 5
40531: PPUSH
40532: LD_VAR 0 7
40536: PPUSH
40537: CALL_OW 488
40541: PUSH
40542: LD_VAR 0 5
40546: PPUSH
40547: LD_VAR 0 7
40551: PPUSH
40552: CALL_OW 428
40556: PPUSH
40557: CALL_OW 247
40561: PUSH
40562: LD_INT 3
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: IN
40572: NOT
40573: AND
40574: IFFALSE 40618
// begin ComMoveXY ( unit , _x , _y ) ;
40576: LD_VAR 0 1
40580: PPUSH
40581: LD_VAR 0 5
40585: PPUSH
40586: LD_VAR 0 7
40590: PPUSH
40591: CALL_OW 111
// result := [ _x , _y ] ;
40595: LD_ADDR_VAR 0 3
40599: PUSH
40600: LD_VAR 0 5
40604: PUSH
40605: LD_VAR 0 7
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: ST_TO_ADDR
// exit ;
40614: POP
40615: POP
40616: GO 40622
// end ; end ;
40618: GO 40462
40620: POP
40621: POP
// end ;
40622: LD_VAR 0 3
40626: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40627: LD_INT 0
40629: PPUSH
40630: PPUSH
40631: PPUSH
// result := 0 ;
40632: LD_ADDR_VAR 0 3
40636: PUSH
40637: LD_INT 0
40639: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40640: LD_VAR 0 1
40644: PUSH
40645: LD_INT 0
40647: LESS
40648: PUSH
40649: LD_VAR 0 1
40653: PUSH
40654: LD_INT 8
40656: GREATER
40657: OR
40658: PUSH
40659: LD_VAR 0 2
40663: PUSH
40664: LD_INT 0
40666: LESS
40667: OR
40668: PUSH
40669: LD_VAR 0 2
40673: PUSH
40674: LD_INT 8
40676: GREATER
40677: OR
40678: IFFALSE 40682
// exit ;
40680: GO 40757
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40682: LD_ADDR_VAR 0 4
40686: PUSH
40687: LD_INT 22
40689: PUSH
40690: LD_VAR 0 2
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PPUSH
40699: CALL_OW 69
40703: PUSH
40704: FOR_IN
40705: IFFALSE 40755
// begin un := UnitShoot ( i ) ;
40707: LD_ADDR_VAR 0 5
40711: PUSH
40712: LD_VAR 0 4
40716: PPUSH
40717: CALL_OW 504
40721: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40722: LD_VAR 0 5
40726: PPUSH
40727: CALL_OW 255
40731: PUSH
40732: LD_VAR 0 1
40736: EQUAL
40737: IFFALSE 40753
// begin result := un ;
40739: LD_ADDR_VAR 0 3
40743: PUSH
40744: LD_VAR 0 5
40748: ST_TO_ADDR
// exit ;
40749: POP
40750: POP
40751: GO 40757
// end ; end ;
40753: GO 40704
40755: POP
40756: POP
// end ;
40757: LD_VAR 0 3
40761: RET
// export function GetCargoBay ( units ) ; begin
40762: LD_INT 0
40764: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40765: LD_ADDR_VAR 0 2
40769: PUSH
40770: LD_VAR 0 1
40774: PPUSH
40775: LD_INT 2
40777: PUSH
40778: LD_INT 34
40780: PUSH
40781: LD_INT 12
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 34
40790: PUSH
40791: LD_INT 51
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 34
40800: PUSH
40801: LD_INT 32
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 34
40810: PUSH
40811: LD_INT 89
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: PPUSH
40825: CALL_OW 72
40829: ST_TO_ADDR
// end ;
40830: LD_VAR 0 2
40834: RET
// export function Negate ( value ) ; begin
40835: LD_INT 0
40837: PPUSH
// result := not value ;
40838: LD_ADDR_VAR 0 2
40842: PUSH
40843: LD_VAR 0 1
40847: NOT
40848: ST_TO_ADDR
// end ;
40849: LD_VAR 0 2
40853: RET
// export function Inc ( value ) ; begin
40854: LD_INT 0
40856: PPUSH
// result := value + 1 ;
40857: LD_ADDR_VAR 0 2
40861: PUSH
40862: LD_VAR 0 1
40866: PUSH
40867: LD_INT 1
40869: PLUS
40870: ST_TO_ADDR
// end ;
40871: LD_VAR 0 2
40875: RET
// export function Dec ( value ) ; begin
40876: LD_INT 0
40878: PPUSH
// result := value - 1 ;
40879: LD_ADDR_VAR 0 2
40883: PUSH
40884: LD_VAR 0 1
40888: PUSH
40889: LD_INT 1
40891: MINUS
40892: ST_TO_ADDR
// end ;
40893: LD_VAR 0 2
40897: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40898: LD_INT 0
40900: PPUSH
40901: PPUSH
40902: PPUSH
40903: PPUSH
40904: PPUSH
40905: PPUSH
40906: PPUSH
40907: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40908: LD_VAR 0 1
40912: PPUSH
40913: LD_VAR 0 2
40917: PPUSH
40918: CALL_OW 488
40922: NOT
40923: PUSH
40924: LD_VAR 0 3
40928: PPUSH
40929: LD_VAR 0 4
40933: PPUSH
40934: CALL_OW 488
40938: NOT
40939: OR
40940: IFFALSE 40953
// begin result := - 1 ;
40942: LD_ADDR_VAR 0 5
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: ST_TO_ADDR
// exit ;
40951: GO 41188
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40953: LD_ADDR_VAR 0 12
40957: PUSH
40958: LD_VAR 0 1
40962: PPUSH
40963: LD_VAR 0 2
40967: PPUSH
40968: LD_VAR 0 3
40972: PPUSH
40973: LD_VAR 0 4
40977: PPUSH
40978: CALL 40038 0 4
40982: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40983: LD_ADDR_VAR 0 11
40987: PUSH
40988: LD_VAR 0 1
40992: PPUSH
40993: LD_VAR 0 2
40997: PPUSH
40998: LD_VAR 0 12
41002: PUSH
41003: LD_INT 1
41005: ARRAY
41006: PPUSH
41007: LD_VAR 0 12
41011: PUSH
41012: LD_INT 2
41014: ARRAY
41015: PPUSH
41016: CALL_OW 298
41020: ST_TO_ADDR
// distance := 9999 ;
41021: LD_ADDR_VAR 0 10
41025: PUSH
41026: LD_INT 9999
41028: ST_TO_ADDR
// for i := 0 to 5 do
41029: LD_ADDR_VAR 0 6
41033: PUSH
41034: DOUBLE
41035: LD_INT 0
41037: DEC
41038: ST_TO_ADDR
41039: LD_INT 5
41041: PUSH
41042: FOR_TO
41043: IFFALSE 41186
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41045: LD_ADDR_VAR 0 7
41049: PUSH
41050: LD_VAR 0 1
41054: PPUSH
41055: LD_VAR 0 6
41059: PPUSH
41060: LD_VAR 0 11
41064: PPUSH
41065: CALL_OW 272
41069: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41070: LD_ADDR_VAR 0 8
41074: PUSH
41075: LD_VAR 0 2
41079: PPUSH
41080: LD_VAR 0 6
41084: PPUSH
41085: LD_VAR 0 11
41089: PPUSH
41090: CALL_OW 273
41094: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41095: LD_VAR 0 7
41099: PPUSH
41100: LD_VAR 0 8
41104: PPUSH
41105: CALL_OW 488
41109: NOT
41110: IFFALSE 41114
// continue ;
41112: GO 41042
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41114: LD_ADDR_VAR 0 9
41118: PUSH
41119: LD_VAR 0 12
41123: PUSH
41124: LD_INT 1
41126: ARRAY
41127: PPUSH
41128: LD_VAR 0 12
41132: PUSH
41133: LD_INT 2
41135: ARRAY
41136: PPUSH
41137: LD_VAR 0 7
41141: PPUSH
41142: LD_VAR 0 8
41146: PPUSH
41147: CALL_OW 298
41151: ST_TO_ADDR
// if tmp < distance then
41152: LD_VAR 0 9
41156: PUSH
41157: LD_VAR 0 10
41161: LESS
41162: IFFALSE 41184
// begin result := i ;
41164: LD_ADDR_VAR 0 5
41168: PUSH
41169: LD_VAR 0 6
41173: ST_TO_ADDR
// distance := tmp ;
41174: LD_ADDR_VAR 0 10
41178: PUSH
41179: LD_VAR 0 9
41183: ST_TO_ADDR
// end ; end ;
41184: GO 41042
41186: POP
41187: POP
// end ;
41188: LD_VAR 0 5
41192: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41193: LD_INT 0
41195: PPUSH
41196: PPUSH
// if not driver or not IsInUnit ( driver ) then
41197: LD_VAR 0 1
41201: NOT
41202: PUSH
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 310
41212: NOT
41213: OR
41214: IFFALSE 41218
// exit ;
41216: GO 41308
// vehicle := IsInUnit ( driver ) ;
41218: LD_ADDR_VAR 0 3
41222: PUSH
41223: LD_VAR 0 1
41227: PPUSH
41228: CALL_OW 310
41232: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41233: LD_VAR 0 1
41237: PPUSH
41238: LD_STRING \
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: PUSH
41268: LD_STRING E
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_VAR 0 3
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PPUSH
41304: CALL_OW 446
// end ;
41308: LD_VAR 0 2
41312: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41313: LD_INT 0
41315: PPUSH
41316: PPUSH
// if not driver or not IsInUnit ( driver ) then
41317: LD_VAR 0 1
41321: NOT
41322: PUSH
41323: LD_VAR 0 1
41327: PPUSH
41328: CALL_OW 310
41332: NOT
41333: OR
41334: IFFALSE 41338
// exit ;
41336: GO 41428
// vehicle := IsInUnit ( driver ) ;
41338: LD_ADDR_VAR 0 3
41342: PUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: CALL_OW 310
41352: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41353: LD_VAR 0 1
41357: PPUSH
41358: LD_STRING \
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: PUSH
41388: LD_STRING E
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_VAR 0 3
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PPUSH
41424: CALL_OW 447
// end ;
41428: LD_VAR 0 2
41432: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41433: LD_INT 0
41435: PPUSH
41436: PPUSH
41437: PPUSH
// tmp := [ ] ;
41438: LD_ADDR_VAR 0 5
41442: PUSH
41443: EMPTY
41444: ST_TO_ADDR
// for i in units do
41445: LD_ADDR_VAR 0 4
41449: PUSH
41450: LD_VAR 0 1
41454: PUSH
41455: FOR_IN
41456: IFFALSE 41494
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41458: LD_ADDR_VAR 0 5
41462: PUSH
41463: LD_VAR 0 5
41467: PPUSH
41468: LD_VAR 0 5
41472: PUSH
41473: LD_INT 1
41475: PLUS
41476: PPUSH
41477: LD_VAR 0 4
41481: PPUSH
41482: CALL_OW 256
41486: PPUSH
41487: CALL_OW 2
41491: ST_TO_ADDR
41492: GO 41455
41494: POP
41495: POP
// if not tmp then
41496: LD_VAR 0 5
41500: NOT
41501: IFFALSE 41505
// exit ;
41503: GO 41553
// if asc then
41505: LD_VAR 0 2
41509: IFFALSE 41533
// result := SortListByListAsc ( units , tmp ) else
41511: LD_ADDR_VAR 0 3
41515: PUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: LD_VAR 0 5
41525: PPUSH
41526: CALL_OW 76
41530: ST_TO_ADDR
41531: GO 41553
// result := SortListByListDesc ( units , tmp ) ;
41533: LD_ADDR_VAR 0 3
41537: PUSH
41538: LD_VAR 0 1
41542: PPUSH
41543: LD_VAR 0 5
41547: PPUSH
41548: CALL_OW 77
41552: ST_TO_ADDR
// end ;
41553: LD_VAR 0 3
41557: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41558: LD_INT 0
41560: PPUSH
41561: PPUSH
// task := GetTaskList ( mech ) ;
41562: LD_ADDR_VAR 0 4
41566: PUSH
41567: LD_VAR 0 1
41571: PPUSH
41572: CALL_OW 437
41576: ST_TO_ADDR
// if not task then
41577: LD_VAR 0 4
41581: NOT
41582: IFFALSE 41586
// exit ;
41584: GO 41628
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41586: LD_ADDR_VAR 0 3
41590: PUSH
41591: LD_VAR 0 4
41595: PUSH
41596: LD_INT 1
41598: ARRAY
41599: PUSH
41600: LD_INT 1
41602: ARRAY
41603: PUSH
41604: LD_STRING r
41606: EQUAL
41607: PUSH
41608: LD_VAR 0 4
41612: PUSH
41613: LD_INT 1
41615: ARRAY
41616: PUSH
41617: LD_INT 4
41619: ARRAY
41620: PUSH
41621: LD_VAR 0 2
41625: EQUAL
41626: AND
41627: ST_TO_ADDR
// end ;
41628: LD_VAR 0 3
41632: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41633: LD_INT 0
41635: PPUSH
// SetDir ( unit , d ) ;
41636: LD_VAR 0 1
41640: PPUSH
41641: LD_VAR 0 4
41645: PPUSH
41646: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41650: LD_ADDR_VAR 0 6
41654: PUSH
41655: LD_VAR 0 1
41659: PPUSH
41660: LD_VAR 0 2
41664: PPUSH
41665: LD_VAR 0 3
41669: PPUSH
41670: LD_VAR 0 5
41674: PPUSH
41675: CALL_OW 48
41679: ST_TO_ADDR
// end ;
41680: LD_VAR 0 6
41684: RET
// export function ToNaturalNumber ( number ) ; begin
41685: LD_INT 0
41687: PPUSH
// result := number div 1 ;
41688: LD_ADDR_VAR 0 2
41692: PUSH
41693: LD_VAR 0 1
41697: PUSH
41698: LD_INT 1
41700: DIV
41701: ST_TO_ADDR
// if number < 0 then
41702: LD_VAR 0 1
41706: PUSH
41707: LD_INT 0
41709: LESS
41710: IFFALSE 41720
// result := 0 ;
41712: LD_ADDR_VAR 0 2
41716: PUSH
41717: LD_INT 0
41719: ST_TO_ADDR
// end ;
41720: LD_VAR 0 2
41724: RET
// export function SortByClass ( units , class ) ; var un ; begin
41725: LD_INT 0
41727: PPUSH
41728: PPUSH
// if not units or not class then
41729: LD_VAR 0 1
41733: NOT
41734: PUSH
41735: LD_VAR 0 2
41739: NOT
41740: OR
41741: IFFALSE 41745
// exit ;
41743: GO 41840
// result := [ ] ;
41745: LD_ADDR_VAR 0 3
41749: PUSH
41750: EMPTY
41751: ST_TO_ADDR
// for un in units do
41752: LD_ADDR_VAR 0 4
41756: PUSH
41757: LD_VAR 0 1
41761: PUSH
41762: FOR_IN
41763: IFFALSE 41838
// if GetClass ( un ) = class then
41765: LD_VAR 0 4
41769: PPUSH
41770: CALL_OW 257
41774: PUSH
41775: LD_VAR 0 2
41779: EQUAL
41780: IFFALSE 41807
// result := Insert ( result , 1 , un ) else
41782: LD_ADDR_VAR 0 3
41786: PUSH
41787: LD_VAR 0 3
41791: PPUSH
41792: LD_INT 1
41794: PPUSH
41795: LD_VAR 0 4
41799: PPUSH
41800: CALL_OW 2
41804: ST_TO_ADDR
41805: GO 41836
// result := Replace ( result , result + 1 , un ) ;
41807: LD_ADDR_VAR 0 3
41811: PUSH
41812: LD_VAR 0 3
41816: PPUSH
41817: LD_VAR 0 3
41821: PUSH
41822: LD_INT 1
41824: PLUS
41825: PPUSH
41826: LD_VAR 0 4
41830: PPUSH
41831: CALL_OW 1
41835: ST_TO_ADDR
41836: GO 41762
41838: POP
41839: POP
// end ;
41840: LD_VAR 0 3
41844: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41845: LD_INT 0
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
41851: PPUSH
41852: PPUSH
41853: PPUSH
// result := [ ] ;
41854: LD_ADDR_VAR 0 4
41858: PUSH
41859: EMPTY
41860: ST_TO_ADDR
// if x - r < 0 then
41861: LD_VAR 0 1
41865: PUSH
41866: LD_VAR 0 3
41870: MINUS
41871: PUSH
41872: LD_INT 0
41874: LESS
41875: IFFALSE 41887
// min_x := 0 else
41877: LD_ADDR_VAR 0 8
41881: PUSH
41882: LD_INT 0
41884: ST_TO_ADDR
41885: GO 41903
// min_x := x - r ;
41887: LD_ADDR_VAR 0 8
41891: PUSH
41892: LD_VAR 0 1
41896: PUSH
41897: LD_VAR 0 3
41901: MINUS
41902: ST_TO_ADDR
// if y - r < 0 then
41903: LD_VAR 0 2
41907: PUSH
41908: LD_VAR 0 3
41912: MINUS
41913: PUSH
41914: LD_INT 0
41916: LESS
41917: IFFALSE 41929
// min_y := 0 else
41919: LD_ADDR_VAR 0 7
41923: PUSH
41924: LD_INT 0
41926: ST_TO_ADDR
41927: GO 41945
// min_y := y - r ;
41929: LD_ADDR_VAR 0 7
41933: PUSH
41934: LD_VAR 0 2
41938: PUSH
41939: LD_VAR 0 3
41943: MINUS
41944: ST_TO_ADDR
// max_x := x + r ;
41945: LD_ADDR_VAR 0 9
41949: PUSH
41950: LD_VAR 0 1
41954: PUSH
41955: LD_VAR 0 3
41959: PLUS
41960: ST_TO_ADDR
// max_y := y + r ;
41961: LD_ADDR_VAR 0 10
41965: PUSH
41966: LD_VAR 0 2
41970: PUSH
41971: LD_VAR 0 3
41975: PLUS
41976: ST_TO_ADDR
// for _x = min_x to max_x do
41977: LD_ADDR_VAR 0 5
41981: PUSH
41982: DOUBLE
41983: LD_VAR 0 8
41987: DEC
41988: ST_TO_ADDR
41989: LD_VAR 0 9
41993: PUSH
41994: FOR_TO
41995: IFFALSE 42096
// for _y = min_y to max_y do
41997: LD_ADDR_VAR 0 6
42001: PUSH
42002: DOUBLE
42003: LD_VAR 0 7
42007: DEC
42008: ST_TO_ADDR
42009: LD_VAR 0 10
42013: PUSH
42014: FOR_TO
42015: IFFALSE 42092
// begin if not ValidHex ( _x , _y ) then
42017: LD_VAR 0 5
42021: PPUSH
42022: LD_VAR 0 6
42026: PPUSH
42027: CALL_OW 488
42031: NOT
42032: IFFALSE 42036
// continue ;
42034: GO 42014
// if GetResourceTypeXY ( _x , _y ) then
42036: LD_VAR 0 5
42040: PPUSH
42041: LD_VAR 0 6
42045: PPUSH
42046: CALL_OW 283
42050: IFFALSE 42090
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42052: LD_ADDR_VAR 0 4
42056: PUSH
42057: LD_VAR 0 4
42061: PPUSH
42062: LD_VAR 0 4
42066: PUSH
42067: LD_INT 1
42069: PLUS
42070: PPUSH
42071: LD_VAR 0 5
42075: PUSH
42076: LD_VAR 0 6
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PPUSH
42085: CALL_OW 1
42089: ST_TO_ADDR
// end ;
42090: GO 42014
42092: POP
42093: POP
42094: GO 41994
42096: POP
42097: POP
// end ;
42098: LD_VAR 0 4
42102: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42103: LD_INT 0
42105: PPUSH
42106: PPUSH
42107: PPUSH
42108: PPUSH
42109: PPUSH
42110: PPUSH
42111: PPUSH
42112: PPUSH
// if not units then
42113: LD_VAR 0 1
42117: NOT
42118: IFFALSE 42122
// exit ;
42120: GO 42650
// result := UnitFilter ( units , [ f_ok ] ) ;
42122: LD_ADDR_VAR 0 3
42126: PUSH
42127: LD_VAR 0 1
42131: PPUSH
42132: LD_INT 50
42134: PUSH
42135: EMPTY
42136: LIST
42137: PPUSH
42138: CALL_OW 72
42142: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42143: LD_ADDR_VAR 0 8
42147: PUSH
42148: LD_VAR 0 1
42152: PUSH
42153: LD_INT 1
42155: ARRAY
42156: PPUSH
42157: CALL_OW 255
42161: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42162: LD_ADDR_VAR 0 10
42166: PUSH
42167: LD_INT 29
42169: PUSH
42170: LD_INT 91
42172: PUSH
42173: LD_INT 49
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: LIST
42180: ST_TO_ADDR
// if not result then
42181: LD_VAR 0 3
42185: NOT
42186: IFFALSE 42190
// exit ;
42188: GO 42650
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42190: LD_ADDR_VAR 0 5
42194: PUSH
42195: LD_INT 81
42197: PUSH
42198: LD_VAR 0 8
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PPUSH
42207: CALL_OW 69
42211: ST_TO_ADDR
// for i in result do
42212: LD_ADDR_VAR 0 4
42216: PUSH
42217: LD_VAR 0 3
42221: PUSH
42222: FOR_IN
42223: IFFALSE 42648
// begin tag := GetTag ( i ) + 1 ;
42225: LD_ADDR_VAR 0 9
42229: PUSH
42230: LD_VAR 0 4
42234: PPUSH
42235: CALL_OW 110
42239: PUSH
42240: LD_INT 1
42242: PLUS
42243: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42244: LD_ADDR_VAR 0 7
42248: PUSH
42249: LD_VAR 0 4
42253: PPUSH
42254: CALL_OW 250
42258: PPUSH
42259: LD_VAR 0 4
42263: PPUSH
42264: CALL_OW 251
42268: PPUSH
42269: LD_INT 4
42271: PPUSH
42272: CALL 41845 0 3
42276: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42277: LD_VAR 0 4
42281: PPUSH
42282: CALL_OW 247
42286: PUSH
42287: LD_INT 2
42289: EQUAL
42290: PUSH
42291: LD_VAR 0 7
42295: PUSH
42296: LD_INT 2
42298: GREATER
42299: AND
42300: PUSH
42301: LD_VAR 0 4
42305: PPUSH
42306: CALL_OW 264
42310: PUSH
42311: LD_VAR 0 10
42315: IN
42316: NOT
42317: AND
42318: IFFALSE 42357
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42320: LD_VAR 0 4
42324: PPUSH
42325: LD_VAR 0 7
42329: PUSH
42330: LD_INT 1
42332: ARRAY
42333: PUSH
42334: LD_INT 1
42336: ARRAY
42337: PPUSH
42338: LD_VAR 0 7
42342: PUSH
42343: LD_INT 1
42345: ARRAY
42346: PUSH
42347: LD_INT 2
42349: ARRAY
42350: PPUSH
42351: CALL_OW 116
42355: GO 42646
// if path > tag then
42357: LD_VAR 0 2
42361: PUSH
42362: LD_VAR 0 9
42366: GREATER
42367: IFFALSE 42575
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42369: LD_ADDR_VAR 0 6
42373: PUSH
42374: LD_VAR 0 5
42378: PPUSH
42379: LD_INT 91
42381: PUSH
42382: LD_VAR 0 4
42386: PUSH
42387: LD_INT 8
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: PPUSH
42395: CALL_OW 72
42399: ST_TO_ADDR
// if nearEnemy then
42400: LD_VAR 0 6
42404: IFFALSE 42473
// begin if GetWeapon ( i ) = ru_time_lapser then
42406: LD_VAR 0 4
42410: PPUSH
42411: CALL_OW 264
42415: PUSH
42416: LD_INT 49
42418: EQUAL
42419: IFFALSE 42447
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42421: LD_VAR 0 4
42425: PPUSH
42426: LD_VAR 0 6
42430: PPUSH
42431: LD_VAR 0 4
42435: PPUSH
42436: CALL_OW 74
42440: PPUSH
42441: CALL_OW 112
42445: GO 42471
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42447: LD_VAR 0 4
42451: PPUSH
42452: LD_VAR 0 6
42456: PPUSH
42457: LD_VAR 0 4
42461: PPUSH
42462: CALL_OW 74
42466: PPUSH
42467: CALL 43721 0 2
// end else
42471: GO 42573
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42473: LD_VAR 0 4
42477: PPUSH
42478: LD_VAR 0 2
42482: PUSH
42483: LD_VAR 0 9
42487: ARRAY
42488: PUSH
42489: LD_INT 1
42491: ARRAY
42492: PPUSH
42493: LD_VAR 0 2
42497: PUSH
42498: LD_VAR 0 9
42502: ARRAY
42503: PUSH
42504: LD_INT 2
42506: ARRAY
42507: PPUSH
42508: CALL_OW 297
42512: PUSH
42513: LD_INT 6
42515: GREATER
42516: IFFALSE 42559
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42518: LD_VAR 0 4
42522: PPUSH
42523: LD_VAR 0 2
42527: PUSH
42528: LD_VAR 0 9
42532: ARRAY
42533: PUSH
42534: LD_INT 1
42536: ARRAY
42537: PPUSH
42538: LD_VAR 0 2
42542: PUSH
42543: LD_VAR 0 9
42547: ARRAY
42548: PUSH
42549: LD_INT 2
42551: ARRAY
42552: PPUSH
42553: CALL_OW 114
42557: GO 42573
// SetTag ( i , tag ) ;
42559: LD_VAR 0 4
42563: PPUSH
42564: LD_VAR 0 9
42568: PPUSH
42569: CALL_OW 109
// end else
42573: GO 42646
// if enemy then
42575: LD_VAR 0 5
42579: IFFALSE 42646
// begin if GetWeapon ( i ) = ru_time_lapser then
42581: LD_VAR 0 4
42585: PPUSH
42586: CALL_OW 264
42590: PUSH
42591: LD_INT 49
42593: EQUAL
42594: IFFALSE 42622
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42596: LD_VAR 0 4
42600: PPUSH
42601: LD_VAR 0 5
42605: PPUSH
42606: LD_VAR 0 4
42610: PPUSH
42611: CALL_OW 74
42615: PPUSH
42616: CALL_OW 112
42620: GO 42646
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42622: LD_VAR 0 4
42626: PPUSH
42627: LD_VAR 0 5
42631: PPUSH
42632: LD_VAR 0 4
42636: PPUSH
42637: CALL_OW 74
42641: PPUSH
42642: CALL 43721 0 2
// end ; end ;
42646: GO 42222
42648: POP
42649: POP
// end ;
42650: LD_VAR 0 3
42654: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42655: LD_INT 0
42657: PPUSH
42658: PPUSH
42659: PPUSH
// if not unit or IsInUnit ( unit ) then
42660: LD_VAR 0 1
42664: NOT
42665: PUSH
42666: LD_VAR 0 1
42670: PPUSH
42671: CALL_OW 310
42675: OR
42676: IFFALSE 42680
// exit ;
42678: GO 42771
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42680: LD_ADDR_VAR 0 4
42684: PUSH
42685: LD_VAR 0 1
42689: PPUSH
42690: CALL_OW 250
42694: PPUSH
42695: LD_VAR 0 2
42699: PPUSH
42700: LD_INT 1
42702: PPUSH
42703: CALL_OW 272
42707: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42708: LD_ADDR_VAR 0 5
42712: PUSH
42713: LD_VAR 0 1
42717: PPUSH
42718: CALL_OW 251
42722: PPUSH
42723: LD_VAR 0 2
42727: PPUSH
42728: LD_INT 1
42730: PPUSH
42731: CALL_OW 273
42735: ST_TO_ADDR
// if ValidHex ( x , y ) then
42736: LD_VAR 0 4
42740: PPUSH
42741: LD_VAR 0 5
42745: PPUSH
42746: CALL_OW 488
42750: IFFALSE 42771
// ComTurnXY ( unit , x , y ) ;
42752: LD_VAR 0 1
42756: PPUSH
42757: LD_VAR 0 4
42761: PPUSH
42762: LD_VAR 0 5
42766: PPUSH
42767: CALL_OW 118
// end ;
42771: LD_VAR 0 3
42775: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42776: LD_INT 0
42778: PPUSH
42779: PPUSH
// result := false ;
42780: LD_ADDR_VAR 0 3
42784: PUSH
42785: LD_INT 0
42787: ST_TO_ADDR
// if not units then
42788: LD_VAR 0 2
42792: NOT
42793: IFFALSE 42797
// exit ;
42795: GO 42842
// for i in units do
42797: LD_ADDR_VAR 0 4
42801: PUSH
42802: LD_VAR 0 2
42806: PUSH
42807: FOR_IN
42808: IFFALSE 42840
// if See ( side , i ) then
42810: LD_VAR 0 1
42814: PPUSH
42815: LD_VAR 0 4
42819: PPUSH
42820: CALL_OW 292
42824: IFFALSE 42838
// begin result := true ;
42826: LD_ADDR_VAR 0 3
42830: PUSH
42831: LD_INT 1
42833: ST_TO_ADDR
// exit ;
42834: POP
42835: POP
42836: GO 42842
// end ;
42838: GO 42807
42840: POP
42841: POP
// end ;
42842: LD_VAR 0 3
42846: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42847: LD_INT 0
42849: PPUSH
42850: PPUSH
42851: PPUSH
42852: PPUSH
// if not unit or not points then
42853: LD_VAR 0 1
42857: NOT
42858: PUSH
42859: LD_VAR 0 2
42863: NOT
42864: OR
42865: IFFALSE 42869
// exit ;
42867: GO 42959
// dist := 99999 ;
42869: LD_ADDR_VAR 0 5
42873: PUSH
42874: LD_INT 99999
42876: ST_TO_ADDR
// for i in points do
42877: LD_ADDR_VAR 0 4
42881: PUSH
42882: LD_VAR 0 2
42886: PUSH
42887: FOR_IN
42888: IFFALSE 42957
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42890: LD_ADDR_VAR 0 6
42894: PUSH
42895: LD_VAR 0 1
42899: PPUSH
42900: LD_VAR 0 4
42904: PUSH
42905: LD_INT 1
42907: ARRAY
42908: PPUSH
42909: LD_VAR 0 4
42913: PUSH
42914: LD_INT 2
42916: ARRAY
42917: PPUSH
42918: CALL_OW 297
42922: ST_TO_ADDR
// if tmpDist < dist then
42923: LD_VAR 0 6
42927: PUSH
42928: LD_VAR 0 5
42932: LESS
42933: IFFALSE 42955
// begin result := i ;
42935: LD_ADDR_VAR 0 3
42939: PUSH
42940: LD_VAR 0 4
42944: ST_TO_ADDR
// dist := tmpDist ;
42945: LD_ADDR_VAR 0 5
42949: PUSH
42950: LD_VAR 0 6
42954: ST_TO_ADDR
// end ; end ;
42955: GO 42887
42957: POP
42958: POP
// end ;
42959: LD_VAR 0 3
42963: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42964: LD_INT 0
42966: PPUSH
// uc_side := side ;
42967: LD_ADDR_OWVAR 20
42971: PUSH
42972: LD_VAR 0 1
42976: ST_TO_ADDR
// uc_nation := 3 ;
42977: LD_ADDR_OWVAR 21
42981: PUSH
42982: LD_INT 3
42984: ST_TO_ADDR
// vc_chassis := 25 ;
42985: LD_ADDR_OWVAR 37
42989: PUSH
42990: LD_INT 25
42992: ST_TO_ADDR
// vc_engine := engine_siberite ;
42993: LD_ADDR_OWVAR 39
42997: PUSH
42998: LD_INT 3
43000: ST_TO_ADDR
// vc_control := control_computer ;
43001: LD_ADDR_OWVAR 38
43005: PUSH
43006: LD_INT 3
43008: ST_TO_ADDR
// vc_weapon := 59 ;
43009: LD_ADDR_OWVAR 40
43013: PUSH
43014: LD_INT 59
43016: ST_TO_ADDR
// result := CreateVehicle ;
43017: LD_ADDR_VAR 0 5
43021: PUSH
43022: CALL_OW 45
43026: ST_TO_ADDR
// SetDir ( result , d ) ;
43027: LD_VAR 0 5
43031: PPUSH
43032: LD_VAR 0 4
43036: PPUSH
43037: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43041: LD_VAR 0 5
43045: PPUSH
43046: LD_VAR 0 2
43050: PPUSH
43051: LD_VAR 0 3
43055: PPUSH
43056: LD_INT 0
43058: PPUSH
43059: CALL_OW 48
// end ;
43063: LD_VAR 0 5
43067: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43068: LD_INT 0
43070: PPUSH
43071: PPUSH
43072: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43073: LD_ADDR_VAR 0 2
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43096: LD_VAR 0 1
43100: NOT
43101: PUSH
43102: LD_VAR 0 1
43106: PPUSH
43107: CALL_OW 264
43111: PUSH
43112: LD_INT 12
43114: PUSH
43115: LD_INT 51
43117: PUSH
43118: LD_INT 32
43120: PUSH
43121: LD_INT 89
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: IN
43130: NOT
43131: OR
43132: IFFALSE 43136
// exit ;
43134: GO 43234
// for i := 1 to 3 do
43136: LD_ADDR_VAR 0 3
43140: PUSH
43141: DOUBLE
43142: LD_INT 1
43144: DEC
43145: ST_TO_ADDR
43146: LD_INT 3
43148: PUSH
43149: FOR_TO
43150: IFFALSE 43232
// begin tmp := GetCargo ( cargo , i ) ;
43152: LD_ADDR_VAR 0 4
43156: PUSH
43157: LD_VAR 0 1
43161: PPUSH
43162: LD_VAR 0 3
43166: PPUSH
43167: CALL_OW 289
43171: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43172: LD_ADDR_VAR 0 2
43176: PUSH
43177: LD_VAR 0 2
43181: PPUSH
43182: LD_VAR 0 3
43186: PPUSH
43187: LD_VAR 0 4
43191: PPUSH
43192: CALL_OW 1
43196: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43197: LD_ADDR_VAR 0 2
43201: PUSH
43202: LD_VAR 0 2
43206: PPUSH
43207: LD_INT 4
43209: PPUSH
43210: LD_VAR 0 2
43214: PUSH
43215: LD_INT 4
43217: ARRAY
43218: PUSH
43219: LD_VAR 0 4
43223: PLUS
43224: PPUSH
43225: CALL_OW 1
43229: ST_TO_ADDR
// end ;
43230: GO 43149
43232: POP
43233: POP
// end ;
43234: LD_VAR 0 2
43238: RET
// export function Length ( array ) ; begin
43239: LD_INT 0
43241: PPUSH
// result := array + 0 ;
43242: LD_ADDR_VAR 0 2
43246: PUSH
43247: LD_VAR 0 1
43251: PUSH
43252: LD_INT 0
43254: PLUS
43255: ST_TO_ADDR
// end ;
43256: LD_VAR 0 2
43260: RET
// export function PrepareArray ( array ) ; begin
43261: LD_INT 0
43263: PPUSH
// result := array diff 0 ;
43264: LD_ADDR_VAR 0 2
43268: PUSH
43269: LD_VAR 0 1
43273: PUSH
43274: LD_INT 0
43276: DIFF
43277: ST_TO_ADDR
// if not result [ 1 ] then
43278: LD_VAR 0 2
43282: PUSH
43283: LD_INT 1
43285: ARRAY
43286: NOT
43287: IFFALSE 43307
// result := Delete ( result , 1 ) ;
43289: LD_ADDR_VAR 0 2
43293: PUSH
43294: LD_VAR 0 2
43298: PPUSH
43299: LD_INT 1
43301: PPUSH
43302: CALL_OW 3
43306: ST_TO_ADDR
// end ;
43307: LD_VAR 0 2
43311: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43312: LD_INT 0
43314: PPUSH
43315: PPUSH
43316: PPUSH
43317: PPUSH
// sibRocketRange := 25 ;
43318: LD_ADDR_VAR 0 6
43322: PUSH
43323: LD_INT 25
43325: ST_TO_ADDR
// result := false ;
43326: LD_ADDR_VAR 0 4
43330: PUSH
43331: LD_INT 0
43333: ST_TO_ADDR
// for i := 0 to 5 do
43334: LD_ADDR_VAR 0 5
43338: PUSH
43339: DOUBLE
43340: LD_INT 0
43342: DEC
43343: ST_TO_ADDR
43344: LD_INT 5
43346: PUSH
43347: FOR_TO
43348: IFFALSE 43415
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43350: LD_VAR 0 1
43354: PPUSH
43355: LD_VAR 0 5
43359: PPUSH
43360: LD_VAR 0 6
43364: PPUSH
43365: CALL_OW 272
43369: PPUSH
43370: LD_VAR 0 2
43374: PPUSH
43375: LD_VAR 0 5
43379: PPUSH
43380: LD_VAR 0 6
43384: PPUSH
43385: CALL_OW 273
43389: PPUSH
43390: LD_VAR 0 3
43394: PPUSH
43395: CALL_OW 309
43399: IFFALSE 43413
// begin result := true ;
43401: LD_ADDR_VAR 0 4
43405: PUSH
43406: LD_INT 1
43408: ST_TO_ADDR
// exit ;
43409: POP
43410: POP
43411: GO 43417
// end ;
43413: GO 43347
43415: POP
43416: POP
// end ;
43417: LD_VAR 0 4
43421: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43422: LD_INT 0
43424: PPUSH
43425: PPUSH
43426: PPUSH
// if btype = b_depot then
43427: LD_VAR 0 2
43431: PUSH
43432: LD_INT 0
43434: EQUAL
43435: IFFALSE 43447
// begin result := true ;
43437: LD_ADDR_VAR 0 3
43441: PUSH
43442: LD_INT 1
43444: ST_TO_ADDR
// exit ;
43445: GO 43563
// end ; pom := GetBase ( depot ) ;
43447: LD_ADDR_VAR 0 4
43451: PUSH
43452: LD_VAR 0 1
43456: PPUSH
43457: CALL_OW 274
43461: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43462: LD_ADDR_VAR 0 5
43466: PUSH
43467: LD_VAR 0 2
43471: PPUSH
43472: LD_VAR 0 1
43476: PPUSH
43477: CALL_OW 248
43481: PPUSH
43482: CALL_OW 450
43486: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43487: LD_ADDR_VAR 0 3
43491: PUSH
43492: LD_VAR 0 4
43496: PPUSH
43497: LD_INT 1
43499: PPUSH
43500: CALL_OW 275
43504: PUSH
43505: LD_VAR 0 5
43509: PUSH
43510: LD_INT 1
43512: ARRAY
43513: GREATEREQUAL
43514: PUSH
43515: LD_VAR 0 4
43519: PPUSH
43520: LD_INT 2
43522: PPUSH
43523: CALL_OW 275
43527: PUSH
43528: LD_VAR 0 5
43532: PUSH
43533: LD_INT 2
43535: ARRAY
43536: GREATEREQUAL
43537: AND
43538: PUSH
43539: LD_VAR 0 4
43543: PPUSH
43544: LD_INT 3
43546: PPUSH
43547: CALL_OW 275
43551: PUSH
43552: LD_VAR 0 5
43556: PUSH
43557: LD_INT 3
43559: ARRAY
43560: GREATEREQUAL
43561: AND
43562: ST_TO_ADDR
// end ;
43563: LD_VAR 0 3
43567: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43568: LD_INT 0
43570: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43571: LD_VAR 0 1
43575: PPUSH
43576: LD_VAR 0 2
43580: PPUSH
43581: LD_INT 0
43583: PPUSH
43584: LD_INT 0
43586: PPUSH
43587: LD_INT 1
43589: PPUSH
43590: LD_INT 0
43592: PPUSH
43593: CALL_OW 587
// end ;
43597: LD_VAR 0 3
43601: RET
// export function CenterOnNow ( unit ) ; begin
43602: LD_INT 0
43604: PPUSH
// result := IsInUnit ( unit ) ;
43605: LD_ADDR_VAR 0 2
43609: PUSH
43610: LD_VAR 0 1
43614: PPUSH
43615: CALL_OW 310
43619: ST_TO_ADDR
// if not result then
43620: LD_VAR 0 2
43624: NOT
43625: IFFALSE 43637
// result := unit ;
43627: LD_ADDR_VAR 0 2
43631: PUSH
43632: LD_VAR 0 1
43636: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43637: LD_VAR 0 1
43641: PPUSH
43642: CALL_OW 87
// end ;
43646: LD_VAR 0 2
43650: RET
// export function ComMoveHex ( unit , hex ) ; begin
43651: LD_INT 0
43653: PPUSH
// if not hex then
43654: LD_VAR 0 2
43658: NOT
43659: IFFALSE 43663
// exit ;
43661: GO 43716
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43663: LD_VAR 0 2
43667: PUSH
43668: LD_INT 1
43670: ARRAY
43671: PPUSH
43672: LD_VAR 0 2
43676: PUSH
43677: LD_INT 2
43679: ARRAY
43680: PPUSH
43681: CALL_OW 428
43685: IFFALSE 43689
// exit ;
43687: GO 43716
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43689: LD_VAR 0 1
43693: PPUSH
43694: LD_VAR 0 2
43698: PUSH
43699: LD_INT 1
43701: ARRAY
43702: PPUSH
43703: LD_VAR 0 2
43707: PUSH
43708: LD_INT 2
43710: ARRAY
43711: PPUSH
43712: CALL_OW 111
// end ;
43716: LD_VAR 0 3
43720: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43721: LD_INT 0
43723: PPUSH
43724: PPUSH
43725: PPUSH
// if not unit or not enemy then
43726: LD_VAR 0 1
43730: NOT
43731: PUSH
43732: LD_VAR 0 2
43736: NOT
43737: OR
43738: IFFALSE 43742
// exit ;
43740: GO 43866
// x := GetX ( enemy ) ;
43742: LD_ADDR_VAR 0 4
43746: PUSH
43747: LD_VAR 0 2
43751: PPUSH
43752: CALL_OW 250
43756: ST_TO_ADDR
// y := GetY ( enemy ) ;
43757: LD_ADDR_VAR 0 5
43761: PUSH
43762: LD_VAR 0 2
43766: PPUSH
43767: CALL_OW 251
43771: ST_TO_ADDR
// if ValidHex ( x , y ) then
43772: LD_VAR 0 4
43776: PPUSH
43777: LD_VAR 0 5
43781: PPUSH
43782: CALL_OW 488
43786: IFFALSE 43866
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43788: LD_VAR 0 2
43792: PPUSH
43793: CALL_OW 247
43797: PUSH
43798: LD_INT 3
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: IN
43808: PUSH
43809: LD_VAR 0 1
43813: PPUSH
43814: CALL_OW 255
43818: PPUSH
43819: LD_VAR 0 2
43823: PPUSH
43824: CALL_OW 292
43828: OR
43829: IFFALSE 43847
// ComAttackUnit ( unit , enemy ) else
43831: LD_VAR 0 1
43835: PPUSH
43836: LD_VAR 0 2
43840: PPUSH
43841: CALL_OW 115
43845: GO 43866
// ComAgressiveMove ( unit , x , y ) ;
43847: LD_VAR 0 1
43851: PPUSH
43852: LD_VAR 0 4
43856: PPUSH
43857: LD_VAR 0 5
43861: PPUSH
43862: CALL_OW 114
// end ;
43866: LD_VAR 0 3
43870: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43871: LD_INT 0
43873: PPUSH
43874: PPUSH
43875: PPUSH
// list := AreaToList ( area , 0 ) ;
43876: LD_ADDR_VAR 0 5
43880: PUSH
43881: LD_VAR 0 1
43885: PPUSH
43886: LD_INT 0
43888: PPUSH
43889: CALL_OW 517
43893: ST_TO_ADDR
// if not list then
43894: LD_VAR 0 5
43898: NOT
43899: IFFALSE 43903
// exit ;
43901: GO 44033
// if all then
43903: LD_VAR 0 2
43907: IFFALSE 43995
// begin for i := 1 to list [ 1 ] do
43909: LD_ADDR_VAR 0 4
43913: PUSH
43914: DOUBLE
43915: LD_INT 1
43917: DEC
43918: ST_TO_ADDR
43919: LD_VAR 0 5
43923: PUSH
43924: LD_INT 1
43926: ARRAY
43927: PUSH
43928: FOR_TO
43929: IFFALSE 43991
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43931: LD_ADDR_VAR 0 3
43935: PUSH
43936: LD_VAR 0 3
43940: PPUSH
43941: LD_VAR 0 3
43945: PUSH
43946: LD_INT 1
43948: PLUS
43949: PPUSH
43950: LD_VAR 0 5
43954: PUSH
43955: LD_INT 1
43957: ARRAY
43958: PUSH
43959: LD_VAR 0 4
43963: ARRAY
43964: PUSH
43965: LD_VAR 0 5
43969: PUSH
43970: LD_INT 2
43972: ARRAY
43973: PUSH
43974: LD_VAR 0 4
43978: ARRAY
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PPUSH
43984: CALL_OW 1
43988: ST_TO_ADDR
43989: GO 43928
43991: POP
43992: POP
// exit ;
43993: GO 44033
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43995: LD_ADDR_VAR 0 3
43999: PUSH
44000: LD_VAR 0 5
44004: PUSH
44005: LD_INT 1
44007: ARRAY
44008: PUSH
44009: LD_INT 1
44011: ARRAY
44012: PUSH
44013: LD_VAR 0 5
44017: PUSH
44018: LD_INT 2
44020: ARRAY
44021: PUSH
44022: LD_INT 1
44024: ARRAY
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: ST_TO_ADDR
// end ;
44033: LD_VAR 0 3
44037: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44038: LD_INT 0
44040: PPUSH
44041: PPUSH
// list := AreaToList ( area , 0 ) ;
44042: LD_ADDR_VAR 0 4
44046: PUSH
44047: LD_VAR 0 1
44051: PPUSH
44052: LD_INT 0
44054: PPUSH
44055: CALL_OW 517
44059: ST_TO_ADDR
// if not list then
44060: LD_VAR 0 4
44064: NOT
44065: IFFALSE 44069
// exit ;
44067: GO 44110
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44069: LD_ADDR_VAR 0 3
44073: PUSH
44074: LD_VAR 0 4
44078: PUSH
44079: LD_INT 1
44081: ARRAY
44082: PUSH
44083: LD_INT 1
44085: ARRAY
44086: PUSH
44087: LD_VAR 0 4
44091: PUSH
44092: LD_INT 2
44094: ARRAY
44095: PUSH
44096: LD_INT 1
44098: ARRAY
44099: PUSH
44100: LD_VAR 0 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: LIST
44109: ST_TO_ADDR
// end ;
44110: LD_VAR 0 3
44114: RET
// export function First ( array ) ; begin
44115: LD_INT 0
44117: PPUSH
// if not array then
44118: LD_VAR 0 1
44122: NOT
44123: IFFALSE 44127
// exit ;
44125: GO 44141
// result := array [ 1 ] ;
44127: LD_ADDR_VAR 0 2
44131: PUSH
44132: LD_VAR 0 1
44136: PUSH
44137: LD_INT 1
44139: ARRAY
44140: ST_TO_ADDR
// end ;
44141: LD_VAR 0 2
44145: RET
// export function Last ( array ) ; begin
44146: LD_INT 0
44148: PPUSH
// if not array then
44149: LD_VAR 0 1
44153: NOT
44154: IFFALSE 44158
// exit ;
44156: GO 44174
// result := array [ array ] ;
44158: LD_ADDR_VAR 0 2
44162: PUSH
44163: LD_VAR 0 1
44167: PUSH
44168: LD_VAR 0 1
44172: ARRAY
44173: ST_TO_ADDR
// end ;
44174: LD_VAR 0 2
44178: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44179: LD_INT 0
44181: PPUSH
44182: PPUSH
// result := [ ] ;
44183: LD_ADDR_VAR 0 5
44187: PUSH
44188: EMPTY
44189: ST_TO_ADDR
// if not array then
44190: LD_VAR 0 1
44194: NOT
44195: IFFALSE 44199
// exit ;
44197: GO 44311
// for i := 1 to array do
44199: LD_ADDR_VAR 0 6
44203: PUSH
44204: DOUBLE
44205: LD_INT 1
44207: DEC
44208: ST_TO_ADDR
44209: LD_VAR 0 1
44213: PUSH
44214: FOR_TO
44215: IFFALSE 44309
// if array [ i ] [ index ] = value then
44217: LD_VAR 0 1
44221: PUSH
44222: LD_VAR 0 6
44226: ARRAY
44227: PUSH
44228: LD_VAR 0 2
44232: ARRAY
44233: PUSH
44234: LD_VAR 0 3
44238: EQUAL
44239: IFFALSE 44307
// begin if indexColumn then
44241: LD_VAR 0 4
44245: IFFALSE 44281
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44247: LD_ADDR_VAR 0 5
44251: PUSH
44252: LD_VAR 0 5
44256: PPUSH
44257: LD_VAR 0 1
44261: PUSH
44262: LD_VAR 0 6
44266: ARRAY
44267: PUSH
44268: LD_VAR 0 4
44272: ARRAY
44273: PPUSH
44274: CALL 39493 0 2
44278: ST_TO_ADDR
44279: GO 44307
// result := Join ( result , array [ i ] ) ;
44281: LD_ADDR_VAR 0 5
44285: PUSH
44286: LD_VAR 0 5
44290: PPUSH
44291: LD_VAR 0 1
44295: PUSH
44296: LD_VAR 0 6
44300: ARRAY
44301: PPUSH
44302: CALL 39493 0 2
44306: ST_TO_ADDR
// end ;
44307: GO 44214
44309: POP
44310: POP
// end ;
44311: LD_VAR 0 5
44315: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44316: LD_INT 0
44318: PPUSH
// if not vehicles or not parkingPoint then
44319: LD_VAR 0 1
44323: NOT
44324: PUSH
44325: LD_VAR 0 2
44329: NOT
44330: OR
44331: IFFALSE 44335
// exit ;
44333: GO 44433
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44335: LD_ADDR_VAR 0 1
44339: PUSH
44340: LD_VAR 0 1
44344: PPUSH
44345: LD_INT 50
44347: PUSH
44348: EMPTY
44349: LIST
44350: PUSH
44351: LD_INT 3
44353: PUSH
44354: LD_INT 92
44356: PUSH
44357: LD_VAR 0 2
44361: PUSH
44362: LD_INT 1
44364: ARRAY
44365: PUSH
44366: LD_VAR 0 2
44370: PUSH
44371: LD_INT 2
44373: ARRAY
44374: PUSH
44375: LD_INT 8
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PPUSH
44392: CALL_OW 72
44396: ST_TO_ADDR
// if not vehicles then
44397: LD_VAR 0 1
44401: NOT
44402: IFFALSE 44406
// exit ;
44404: GO 44433
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44406: LD_VAR 0 1
44410: PPUSH
44411: LD_VAR 0 2
44415: PUSH
44416: LD_INT 1
44418: ARRAY
44419: PPUSH
44420: LD_VAR 0 2
44424: PUSH
44425: LD_INT 2
44427: ARRAY
44428: PPUSH
44429: CALL_OW 111
// end ;
44433: LD_VAR 0 3
44437: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44438: LD_INT 0
44440: PPUSH
44441: PPUSH
44442: PPUSH
// if not side or not area then
44443: LD_VAR 0 1
44447: NOT
44448: PUSH
44449: LD_VAR 0 2
44453: NOT
44454: OR
44455: IFFALSE 44459
// exit ;
44457: GO 44578
// tmp := AreaToList ( area , 0 ) ;
44459: LD_ADDR_VAR 0 5
44463: PUSH
44464: LD_VAR 0 2
44468: PPUSH
44469: LD_INT 0
44471: PPUSH
44472: CALL_OW 517
44476: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44477: LD_ADDR_VAR 0 4
44481: PUSH
44482: DOUBLE
44483: LD_INT 1
44485: DEC
44486: ST_TO_ADDR
44487: LD_VAR 0 5
44491: PUSH
44492: LD_INT 1
44494: ARRAY
44495: PUSH
44496: FOR_TO
44497: IFFALSE 44576
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44499: LD_VAR 0 5
44503: PUSH
44504: LD_INT 1
44506: ARRAY
44507: PUSH
44508: LD_VAR 0 4
44512: ARRAY
44513: PPUSH
44514: LD_VAR 0 5
44518: PUSH
44519: LD_INT 2
44521: ARRAY
44522: PUSH
44523: LD_VAR 0 4
44527: ARRAY
44528: PPUSH
44529: CALL_OW 351
44533: IFFALSE 44574
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44535: LD_VAR 0 5
44539: PUSH
44540: LD_INT 1
44542: ARRAY
44543: PUSH
44544: LD_VAR 0 4
44548: ARRAY
44549: PPUSH
44550: LD_VAR 0 5
44554: PUSH
44555: LD_INT 2
44557: ARRAY
44558: PUSH
44559: LD_VAR 0 4
44563: ARRAY
44564: PPUSH
44565: LD_VAR 0 1
44569: PPUSH
44570: CALL_OW 244
// end ;
44574: GO 44496
44576: POP
44577: POP
// end ;
44578: LD_VAR 0 3
44582: RET
