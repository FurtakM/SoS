// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareRussian ;
   8: CALL 98 0 0
// Action ;
  12: CALL 1256 0 0
// end ;
  16: END
// function Init ; begin
  17: LD_INT 0
  19: PPUSH
// game_speed := 5 ;
  20: LD_ADDR_OWVAR 65
  24: PUSH
  25: LD_INT 5
  27: ST_TO_ADDR
// music_class := 5 ;
  28: LD_ADDR_OWVAR 72
  32: PUSH
  33: LD_INT 5
  35: ST_TO_ADDR
// PlaceSeeing ( 1 , 1 , 3 , - 32967 ) ;
  36: LD_INT 1
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 32967
  47: NEG
  48: PPUSH
  49: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 3 ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_INT 1
  58: PPUSH
  59: LD_INT 3
  61: PPUSH
  62: CALL_OW 331
// PlaceSeeing ( 172 , 50 , 3 , - 32 ) ;
  66: LD_INT 172
  68: PPUSH
  69: LD_INT 50
  71: PPUSH
  72: LD_INT 3
  74: PPUSH
  75: LD_INT 32
  77: NEG
  78: PPUSH
  79: CALL_OW 330
// CenterNowOnXY ( 109 , 159 ) ;
  83: LD_INT 109
  85: PPUSH
  86: LD_INT 159
  88: PPUSH
  89: CALL_OW 86
// end ; end_of_file
  93: LD_VAR 0 1
  97: RET
// export Botvinov , Szyski , Burlak ; export group1 , group2 , group3 ; export function PrepareRussian ; var i , un ; begin
  98: LD_INT 0
 100: PPUSH
 101: PPUSH
 102: PPUSH
// uc_side := 3 ;
 103: LD_ADDR_OWVAR 20
 107: PUSH
 108: LD_INT 3
 110: ST_TO_ADDR
// uc_nation := 3 ;
 111: LD_ADDR_OWVAR 21
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// InitHc ;
 119: CALL_OW 19
// PrepareSoldier ( sex_male , 1 ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 1
 128: PPUSH
 129: CALL_OW 381
// hc_name := Botvinov ;
 133: LD_ADDR_OWVAR 26
 137: PUSH
 138: LD_STRING Botvinov
 140: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 141: LD_ADDR_OWVAR 33
 145: PUSH
 146: LD_STRING SecondCharsGal
 148: ST_TO_ADDR
// hc_face_number := 84 ;
 149: LD_ADDR_OWVAR 34
 153: PUSH
 154: LD_INT 84
 156: ST_TO_ADDR
// Botvinov := CreateHuman ;
 157: LD_ADDR_EXP 1
 161: PUSH
 162: CALL_OW 44
 166: ST_TO_ADDR
// PlaceUnitArea ( Botvinov , botvinovArea , false ) ;
 167: LD_EXP 1
 171: PPUSH
 172: LD_INT 2
 174: PPUSH
 175: LD_INT 0
 177: PPUSH
 178: CALL_OW 49
// ComLookAtDir ( Botvinov , 4 ) ;
 182: LD_EXP 1
 186: PPUSH
 187: LD_INT 4
 189: PPUSH
 190: CALL 42586 0 2
// hc_name := Szyski ;
 194: LD_ADDR_OWVAR 26
 198: PUSH
 199: LD_STRING Szyski
 201: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING SecondCharsGal
 209: ST_TO_ADDR
// hc_face_number := 86 ;
 210: LD_ADDR_OWVAR 34
 214: PUSH
 215: LD_INT 86
 217: ST_TO_ADDR
// Szyski := CreateHuman ;
 218: LD_ADDR_EXP 2
 222: PUSH
 223: CALL_OW 44
 227: ST_TO_ADDR
// PlaceUnitArea ( Szyski , szyskiArea , false ) ;
 228: LD_EXP 2
 232: PPUSH
 233: LD_INT 3
 235: PPUSH
 236: LD_INT 0
 238: PPUSH
 239: CALL_OW 49
// ComLookAtDir ( Szyski , 4 ) ;
 243: LD_EXP 2
 247: PPUSH
 248: LD_INT 4
 250: PPUSH
 251: CALL 42586 0 2
// InitHC_All ( ) ;
 255: CALL_OW 584
// for i := 1 to 3 do
 259: LD_ADDR_VAR 0 2
 263: PUSH
 264: DOUBLE
 265: LD_INT 1
 267: DEC
 268: ST_TO_ADDR
 269: LD_INT 3
 271: PUSH
 272: FOR_TO
 273: IFFALSE 324
// begin PrepareSoldier ( sex_male , 1 ) ;
 275: LD_INT 1
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 381
// un := CreateHuman ;
 285: LD_ADDR_VAR 0 3
 289: PUSH
 290: CALL_OW 44
 294: ST_TO_ADDR
// PlaceUnitArea ( un , officerArea , false ) ;
 295: LD_VAR 0 3
 299: PPUSH
 300: LD_INT 4
 302: PPUSH
 303: LD_INT 0
 305: PPUSH
 306: CALL_OW 49
// ComLookAtDir ( un , 2 ) ;
 310: LD_VAR 0 3
 314: PPUSH
 315: LD_INT 2
 317: PPUSH
 318: CALL 42586 0 2
// end ;
 322: GO 272
 324: POP
 325: POP
// for i := 1 to 3 do
 326: LD_ADDR_VAR 0 2
 330: PUSH
 331: DOUBLE
 332: LD_INT 1
 334: DEC
 335: ST_TO_ADDR
 336: LD_INT 3
 338: PUSH
 339: FOR_TO
 340: IFFALSE 391
// begin PrepareSoldier ( sex_male , 1 ) ;
 342: LD_INT 1
 344: PPUSH
 345: LD_INT 1
 347: PPUSH
 348: CALL_OW 381
// un := CreateHuman ;
 352: LD_ADDR_VAR 0 3
 356: PUSH
 357: CALL_OW 44
 361: ST_TO_ADDR
// PlaceUnitArea ( un , officer2Area , false ) ;
 362: LD_VAR 0 3
 366: PPUSH
 367: LD_INT 5
 369: PPUSH
 370: LD_INT 0
 372: PPUSH
 373: CALL_OW 49
// ComLookAtDir ( un , 5 ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_INT 5
 384: PPUSH
 385: CALL 42586 0 2
// end ;
 389: GO 339
 391: POP
 392: POP
// Burlak := NewCharacter ( Burlak ) ;
 393: LD_ADDR_EXP 3
 397: PUSH
 398: LD_STRING Burlak
 400: PPUSH
 401: CALL_OW 25
 405: ST_TO_ADDR
// InitHc_All ( ) ;
 406: CALL_OW 584
// group1 := PrepareGroup ;
 410: LD_ADDR_EXP 4
 414: PUSH
 415: CALL 595 0 0
 419: ST_TO_ADDR
// group1 := Replace ( group1 , 5 , Burlak ) ;
 420: LD_ADDR_EXP 4
 424: PUSH
 425: LD_EXP 4
 429: PPUSH
 430: LD_INT 5
 432: PPUSH
 433: LD_EXP 3
 437: PPUSH
 438: CALL_OW 1
 442: ST_TO_ADDR
// group2 := PrepareGroup ;
 443: LD_ADDR_EXP 5
 447: PUSH
 448: CALL 595 0 0
 452: ST_TO_ADDR
// group3 := PrepareGroup ;
 453: LD_ADDR_EXP 6
 457: PUSH
 458: CALL 595 0 0
 462: ST_TO_ADDR
// for un in group1 ^ group2 ^ group3 do
 463: LD_ADDR_VAR 0 3
 467: PUSH
 468: LD_EXP 4
 472: PUSH
 473: LD_EXP 5
 477: ADD
 478: PUSH
 479: LD_EXP 6
 483: ADD
 484: PUSH
 485: FOR_IN
 486: IFFALSE 588
// begin case GetClass ( un ) of 1 :
 488: LD_VAR 0 3
 492: PPUSH
 493: CALL_OW 257
 497: PUSH
 498: LD_INT 1
 500: DOUBLE
 501: EQUAL
 502: IFTRUE 506
 504: GO 524
 506: POP
// PlaceUnitArea ( un , firstLineArea , false ) ; 3 :
 507: LD_VAR 0 3
 511: PPUSH
 512: LD_INT 6
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL_OW 49
 522: GO 577
 524: LD_INT 3
 526: DOUBLE
 527: EQUAL
 528: IFTRUE 532
 530: GO 550
 532: POP
// PlaceUnitArea ( un , secondLineArea , false ) ; 4 :
 533: LD_VAR 0 3
 537: PPUSH
 538: LD_INT 7
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 49
 548: GO 577
 550: LD_INT 4
 552: DOUBLE
 553: EQUAL
 554: IFTRUE 558
 556: GO 576
 558: POP
// PlaceUnitArea ( un , thirdLineArea , false ) ; end ;
 559: LD_VAR 0 3
 563: PPUSH
 564: LD_INT 8
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 49
 574: GO 577
 576: POP
// ComHold ( un ) ;
 577: LD_VAR 0 3
 581: PPUSH
 582: CALL_OW 140
// end ;
 586: GO 485
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 1
 594: RET
// function PrepareGroup ; var i , j , tmp ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
 599: PPUSH
 600: PPUSH
// result := [ ] ;
 601: LD_ADDR_VAR 0 1
 605: PUSH
 606: EMPTY
 607: ST_TO_ADDR
// tmp := [ 4 , 0 , 2 , 1 ] ;
 608: LD_ADDR_VAR 0 4
 612: PUSH
 613: LD_INT 4
 615: PUSH
 616: LD_INT 0
 618: PUSH
 619: LD_INT 2
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: ST_TO_ADDR
// for i := 1 to tmp do
 631: LD_ADDR_VAR 0 2
 635: PUSH
 636: DOUBLE
 637: LD_INT 1
 639: DEC
 640: ST_TO_ADDR
 641: LD_VAR 0 4
 645: PUSH
 646: FOR_TO
 647: IFFALSE 726
// if tmp [ i ] then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_VAR 0 2
 658: ARRAY
 659: IFFALSE 724
// for j := 1 to tmp [ i ] do
 661: LD_ADDR_VAR 0 3
 665: PUSH
 666: DOUBLE
 667: LD_INT 1
 669: DEC
 670: ST_TO_ADDR
 671: LD_VAR 0 4
 675: PUSH
 676: LD_VAR 0 2
 680: ARRAY
 681: PUSH
 682: FOR_TO
 683: IFFALSE 722
// begin PrepareHuman ( false , i , 1 ) ;
 685: LD_INT 0
 687: PPUSH
 688: LD_VAR 0 2
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
 700: LD_ADDR_VAR 0 1
 704: PUSH
 705: LD_VAR 0 1
 709: PPUSH
 710: CALL_OW 44
 714: PPUSH
 715: CALL 39430 0 2
 719: ST_TO_ADDR
// end ;
 720: GO 682
 722: POP
 723: POP
 724: GO 646
 726: POP
 727: POP
// end ;
 728: LD_VAR 0 1
 732: RET
// export function FormGroup ( group , soldArea , mechArea , sciArea ) ; var i , class , hexesS , hexesM , hexesSc ; begin
 733: LD_INT 0
 735: PPUSH
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not group then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1251
// hexesS := AreaToList ( soldArea , 0 ) ;
 750: LD_ADDR_VAR 0 8
 754: PUSH
 755: LD_VAR 0 2
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL_OW 517
 767: ST_TO_ADDR
// hexesM := AreaToList ( mechArea , 0 ) ;
 768: LD_ADDR_VAR 0 9
 772: PUSH
 773: LD_VAR 0 3
 777: PPUSH
 778: LD_INT 0
 780: PPUSH
 781: CALL_OW 517
 785: ST_TO_ADDR
// hexesSc := AreaToList ( sciArea , 0 ) ;
 786: LD_ADDR_VAR 0 10
 790: PUSH
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: CALL_OW 517
 803: ST_TO_ADDR
// for i := 1 to Count ( group ) do
 804: LD_ADDR_VAR 0 6
 808: PUSH
 809: DOUBLE
 810: LD_INT 1
 812: DEC
 813: ST_TO_ADDR
 814: LD_VAR 0 1
 818: PPUSH
 819: CALL 3821 0 1
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1249
// begin class := GetClass ( group [ i ] ) ;
 827: LD_ADDR_VAR 0 7
 831: PUSH
 832: LD_VAR 0 1
 836: PUSH
 837: LD_VAR 0 6
 841: ARRAY
 842: PPUSH
 843: CALL_OW 257
 847: ST_TO_ADDR
// if class = 1 then
 848: LD_VAR 0 7
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: IFFALSE 981
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesS [ 1 ] [ 1 ] , hexesS [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
 858: LD_INT 1
 860: PPUSH
 861: LD_VAR 0 1
 865: PUSH
 866: LD_VAR 0 6
 870: ARRAY
 871: PPUSH
 872: LD_VAR 0 8
 876: PUSH
 877: LD_INT 1
 879: ARRAY
 880: PUSH
 881: LD_INT 1
 883: ARRAY
 884: PPUSH
 885: LD_VAR 0 8
 889: PUSH
 890: LD_INT 2
 892: ARRAY
 893: PUSH
 894: LD_INT 1
 896: ARRAY
 897: PPUSH
 898: LD_INT 202
 900: PPUSH
 901: LD_INT 49
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: CALL_OW 595
// hexesS := Replace ( hexesS , 1 , Delete ( hexesS [ 1 ] , 1 ) ) ;
 911: LD_ADDR_VAR 0 8
 915: PUSH
 916: LD_VAR 0 8
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: LD_VAR 0 8
 928: PUSH
 929: LD_INT 1
 931: ARRAY
 932: PPUSH
 933: LD_INT 1
 935: PPUSH
 936: CALL_OW 3
 940: PPUSH
 941: CALL_OW 1
 945: ST_TO_ADDR
// hexesS := Replace ( hexesS , 2 , Delete ( hexesS [ 2 ] , 1 ) ) ;
 946: LD_ADDR_VAR 0 8
 950: PUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: LD_INT 2
 958: PPUSH
 959: LD_VAR 0 8
 963: PUSH
 964: LD_INT 2
 966: ARRAY
 967: PPUSH
 968: LD_INT 1
 970: PPUSH
 971: CALL_OW 3
 975: PPUSH
 976: CALL_OW 1
 980: ST_TO_ADDR
// end ; if class = 3 then
 981: LD_VAR 0 7
 985: PUSH
 986: LD_INT 3
 988: EQUAL
 989: IFFALSE 1114
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesM [ 1 ] [ 1 ] , hexesM [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
 991: LD_INT 1
 993: PPUSH
 994: LD_VAR 0 1
 998: PUSH
 999: LD_VAR 0 6
1003: ARRAY
1004: PPUSH
1005: LD_VAR 0 9
1009: PUSH
1010: LD_INT 1
1012: ARRAY
1013: PUSH
1014: LD_INT 1
1016: ARRAY
1017: PPUSH
1018: LD_VAR 0 9
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: PUSH
1027: LD_INT 1
1029: ARRAY
1030: PPUSH
1031: LD_INT 202
1033: PPUSH
1034: LD_INT 49
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 595
// hexesM := Replace ( hexesM , 1 , Delete ( hexesM [ 1 ] , 1 ) ) ;
1044: LD_ADDR_VAR 0 9
1048: PUSH
1049: LD_VAR 0 9
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_VAR 0 9
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL_OW 3
1073: PPUSH
1074: CALL_OW 1
1078: ST_TO_ADDR
// hexesM := Replace ( hexesM , 2 , Delete ( hexesM [ 2 ] , 1 ) ) ;
1079: LD_ADDR_VAR 0 9
1083: PUSH
1084: LD_VAR 0 9
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_VAR 0 9
1096: PUSH
1097: LD_INT 2
1099: ARRAY
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: CALL_OW 3
1108: PPUSH
1109: CALL_OW 1
1113: ST_TO_ADDR
// end ; if class = 4 then
1114: LD_VAR 0 7
1118: PUSH
1119: LD_INT 4
1121: EQUAL
1122: IFFALSE 1247
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesSc [ 1 ] [ 1 ] , hexesSc [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1124: LD_INT 1
1126: PPUSH
1127: LD_VAR 0 1
1131: PUSH
1132: LD_VAR 0 6
1136: ARRAY
1137: PPUSH
1138: LD_VAR 0 10
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: LD_VAR 0 10
1155: PUSH
1156: LD_INT 2
1158: ARRAY
1159: PUSH
1160: LD_INT 1
1162: ARRAY
1163: PPUSH
1164: LD_INT 202
1166: PPUSH
1167: LD_INT 49
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 595
// hexesSc := Replace ( hexesSc , 1 , Delete ( hexesSc [ 1 ] , 1 ) ) ;
1177: LD_ADDR_VAR 0 10
1181: PUSH
1182: LD_VAR 0 10
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_VAR 0 10
1194: PUSH
1195: LD_INT 1
1197: ARRAY
1198: PPUSH
1199: LD_INT 1
1201: PPUSH
1202: CALL_OW 3
1206: PPUSH
1207: CALL_OW 1
1211: ST_TO_ADDR
// hexesSc := Replace ( hexesSc , 2 , Delete ( hexesSc [ 2 ] , 1 ) ) ;
1212: LD_ADDR_VAR 0 10
1216: PUSH
1217: LD_VAR 0 10
1221: PPUSH
1222: LD_INT 2
1224: PPUSH
1225: LD_VAR 0 10
1229: PUSH
1230: LD_INT 2
1232: ARRAY
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: CALL_OW 3
1241: PPUSH
1242: CALL_OW 1
1246: ST_TO_ADDR
// end ; end ;
1247: GO 824
1249: POP
1250: POP
// end ; end_of_file
1251: LD_VAR 0 5
1255: RET
// export function Action ; var i ; begin
1256: LD_INT 0
1258: PPUSH
1259: PPUSH
// Video ( true ) ;
1260: LD_INT 1
1262: PPUSH
1263: CALL 39402 0 1
// wait ( 0 0$2 ) ;
1267: LD_INT 70
1269: PPUSH
1270: CALL_OW 67
// CenterOnXY ( 106 , 151 ) ;
1274: LD_INT 106
1276: PPUSH
1277: LD_INT 151
1279: PPUSH
1280: CALL_OW 84
// wait ( 0 0$2 ) ;
1284: LD_INT 70
1286: PPUSH
1287: CALL_OW 67
// CenterOnXY ( 62 , 83 ) ;
1291: LD_INT 62
1293: PPUSH
1294: LD_INT 83
1296: PPUSH
1297: CALL_OW 84
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// CenterOnXY ( 128 , 16 ) ;
1308: LD_INT 128
1310: PPUSH
1311: LD_INT 16
1313: PPUSH
1314: CALL_OW 84
// wait ( 60 ) ;
1318: LD_INT 60
1320: PPUSH
1321: CALL_OW 67
// CenterOnXY ( 172 , 47 ) ;
1325: LD_INT 172
1327: PPUSH
1328: LD_INT 47
1330: PPUSH
1331: CALL_OW 84
// stop_talking := true ;
1335: LD_ADDR_OWVAR 56
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// Say ( Botvinov , D1i-Off1-1 ) ;
1343: LD_EXP 1
1347: PPUSH
1348: LD_STRING D1i-Off1-1
1350: PPUSH
1351: CALL_OW 88
// for i in group1 ^ group2 ^ group3 do
1355: LD_ADDR_VAR 0 2
1359: PUSH
1360: LD_EXP 4
1364: PUSH
1365: LD_EXP 5
1369: ADD
1370: PUSH
1371: LD_EXP 6
1375: ADD
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1397
// ComTurnXY ( i , 202 , 49 ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_INT 202
1387: PPUSH
1388: LD_INT 49
1390: PPUSH
1391: CALL_OW 118
1395: GO 1377
1397: POP
1398: POP
// wait ( 10 ) ;
1399: LD_INT 10
1401: PPUSH
1402: CALL_OW 67
// Say ( Szyski , D1i-Off2-1 ) ;
1406: LD_EXP 2
1410: PPUSH
1411: LD_STRING D1i-Off2-1
1413: PPUSH
1414: CALL_OW 88
// Say ( Botvinov , D1i-Off1-2 ) ;
1418: LD_EXP 1
1422: PPUSH
1423: LD_STRING D1i-Off1-2
1425: PPUSH
1426: CALL_OW 88
// FormGroup ( group1 , gs1 , gm1 , gsc1 ) ;
1430: LD_EXP 4
1434: PPUSH
1435: LD_INT 9
1437: PPUSH
1438: LD_INT 12
1440: PPUSH
1441: LD_INT 15
1443: PPUSH
1444: CALL 733 0 4
// FormGroup ( group2 , gs2 , gm2 , gsc2 ) ;
1448: LD_EXP 5
1452: PPUSH
1453: LD_INT 10
1455: PPUSH
1456: LD_INT 13
1458: PPUSH
1459: LD_INT 16
1461: PPUSH
1462: CALL 733 0 4
// FormGroup ( group3 , gs3 , gm3 , gsc3 ) ;
1466: LD_EXP 6
1470: PPUSH
1471: LD_INT 11
1473: PPUSH
1474: LD_INT 14
1476: PPUSH
1477: LD_INT 17
1479: PPUSH
1480: CALL 733 0 4
// wait ( 0 0$5 ) ;
1484: LD_INT 175
1486: PPUSH
1487: CALL_OW 67
// Say ( Szyski , D1i-Off2-2 ) ;
1491: LD_EXP 2
1495: PPUSH
1496: LD_STRING D1i-Off2-2
1498: PPUSH
1499: CALL_OW 88
// Say ( Botvinov , D1i-Off1-3 ) ;
1503: LD_EXP 1
1507: PPUSH
1508: LD_STRING D1i-Off1-3
1510: PPUSH
1511: CALL_OW 88
// SayEffect ( DStart-All ) ;
1515: LD_STRING DStart-All
1517: PPUSH
1518: CALL_OW 96
// wait ( 50 ) ;
1522: LD_INT 50
1524: PPUSH
1525: CALL_OW 67
// for i in SortByDistanceUnit ( eon , group1 , true , true ) do
1529: LD_ADDR_VAR 0 2
1533: PUSH
1534: LD_INT 4
1536: PPUSH
1537: LD_EXP 4
1541: PPUSH
1542: LD_INT 1
1544: PPUSH
1545: LD_INT 1
1547: PPUSH
1548: CALL 7116 0 4
1552: PUSH
1553: FOR_IN
1554: IFFALSE 1577
// begin ComEnterUnit ( i , eon ) ;
1556: LD_VAR 0 2
1560: PPUSH
1561: LD_INT 4
1563: PPUSH
1564: CALL_OW 120
// wait ( 55 ) ;
1568: LD_INT 55
1570: PPUSH
1571: CALL_OW 67
// end ;
1575: GO 1553
1577: POP
1578: POP
// end ; end_of_file
1579: LD_VAR 0 1
1583: RET
// on SailEventCustom ( e , p1 , p2 , p3 , p4 , p5 , p6 ) do begin repeat ComMoveXY ( p1 , p2 , p3 ) ;
1584: LD_VAR 0 2
1588: PPUSH
1589: LD_VAR 0 3
1593: PPUSH
1594: LD_VAR 0 4
1598: PPUSH
1599: CALL_OW 111
// wait ( 3 ) ;
1603: LD_INT 3
1605: PPUSH
1606: CALL_OW 67
// until IsAt ( p1 , p2 , p3 ) ;
1610: LD_VAR 0 2
1614: PPUSH
1615: LD_VAR 0 3
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL_OW 307
1629: IFFALSE 1584
// ComTurnXY ( p1 , p4 , p5 ) ;
1631: LD_VAR 0 2
1635: PPUSH
1636: LD_VAR 0 5
1640: PPUSH
1641: LD_VAR 0 6
1645: PPUSH
1646: CALL_OW 118
// end ;
1650: PPOPN 7
1652: END
// on EnterBuilding ( building , unit ) do begin if unit = Burlak then
1653: LD_VAR 0 2
1657: PUSH
1658: LD_EXP 3
1662: EQUAL
1663: IFFALSE 1682
// begin wait ( 20 ) ;
1665: LD_INT 20
1667: PPUSH
1668: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1672: LD_INT 1
1674: PPUSH
1675: LD_STRING %_cont
1677: PPUSH
1678: CALL_OW 340
// end ; end ;
1682: PPOPN 2
1684: END
// on DialogueSkipped ( value ) do begin ChangeMap ( 1 , %_cont ) ;
1685: LD_INT 1
1687: PPUSH
1688: LD_STRING %_cont
1690: PPUSH
1691: CALL_OW 340
// end ; end_of_file
1695: PPOPN 1
1697: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1698: LD_INT 0
1700: PPUSH
1701: PPUSH
// if exist_mode then
1702: LD_VAR 0 2
1706: IFFALSE 1752
// begin unit := CreateCharacter ( prefix & ident ) ;
1708: LD_ADDR_VAR 0 5
1712: PUSH
1713: LD_VAR 0 3
1717: PUSH
1718: LD_VAR 0 1
1722: STR
1723: PPUSH
1724: CALL_OW 34
1728: ST_TO_ADDR
// if unit then
1729: LD_VAR 0 5
1733: IFFALSE 1750
// DeleteCharacters ( prefix & ident ) ;
1735: LD_VAR 0 3
1739: PUSH
1740: LD_VAR 0 1
1744: STR
1745: PPUSH
1746: CALL_OW 40
// end else
1750: GO 1767
// unit := NewCharacter ( ident ) ;
1752: LD_ADDR_VAR 0 5
1756: PUSH
1757: LD_VAR 0 1
1761: PPUSH
1762: CALL_OW 25
1766: ST_TO_ADDR
// result := unit ;
1767: LD_ADDR_VAR 0 4
1771: PUSH
1772: LD_VAR 0 5
1776: ST_TO_ADDR
// end ;
1777: LD_VAR 0 4
1781: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1782: LD_INT 0
1784: PPUSH
1785: PPUSH
// if not side or not nation then
1786: LD_VAR 0 1
1790: NOT
1791: PUSH
1792: LD_VAR 0 2
1796: NOT
1797: OR
1798: IFFALSE 1802
// exit ;
1800: GO 2570
// case nation of nation_american :
1802: LD_VAR 0 2
1806: PUSH
1807: LD_INT 1
1809: DOUBLE
1810: EQUAL
1811: IFTRUE 1815
1813: GO 2029
1815: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1816: LD_ADDR_VAR 0 4
1820: PUSH
1821: LD_INT 35
1823: PUSH
1824: LD_INT 45
1826: PUSH
1827: LD_INT 46
1829: PUSH
1830: LD_INT 47
1832: PUSH
1833: LD_INT 82
1835: PUSH
1836: LD_INT 83
1838: PUSH
1839: LD_INT 84
1841: PUSH
1842: LD_INT 85
1844: PUSH
1845: LD_INT 86
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: LD_INT 2
1853: PUSH
1854: LD_INT 6
1856: PUSH
1857: LD_INT 15
1859: PUSH
1860: LD_INT 16
1862: PUSH
1863: LD_INT 7
1865: PUSH
1866: LD_INT 12
1868: PUSH
1869: LD_INT 13
1871: PUSH
1872: LD_INT 10
1874: PUSH
1875: LD_INT 14
1877: PUSH
1878: LD_INT 20
1880: PUSH
1881: LD_INT 21
1883: PUSH
1884: LD_INT 22
1886: PUSH
1887: LD_INT 25
1889: PUSH
1890: LD_INT 32
1892: PUSH
1893: LD_INT 27
1895: PUSH
1896: LD_INT 36
1898: PUSH
1899: LD_INT 69
1901: PUSH
1902: LD_INT 39
1904: PUSH
1905: LD_INT 34
1907: PUSH
1908: LD_INT 40
1910: PUSH
1911: LD_INT 48
1913: PUSH
1914: LD_INT 49
1916: PUSH
1917: LD_INT 50
1919: PUSH
1920: LD_INT 51
1922: PUSH
1923: LD_INT 52
1925: PUSH
1926: LD_INT 53
1928: PUSH
1929: LD_INT 54
1931: PUSH
1932: LD_INT 55
1934: PUSH
1935: LD_INT 56
1937: PUSH
1938: LD_INT 57
1940: PUSH
1941: LD_INT 58
1943: PUSH
1944: LD_INT 59
1946: PUSH
1947: LD_INT 60
1949: PUSH
1950: LD_INT 61
1952: PUSH
1953: LD_INT 62
1955: PUSH
1956: LD_INT 80
1958: PUSH
1959: LD_INT 82
1961: PUSH
1962: LD_INT 83
1964: PUSH
1965: LD_INT 84
1967: PUSH
1968: LD_INT 85
1970: PUSH
1971: LD_INT 86
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: ST_TO_ADDR
2027: GO 2494
2029: LD_INT 2
2031: DOUBLE
2032: EQUAL
2033: IFTRUE 2037
2035: GO 2263
2037: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: LD_INT 35
2045: PUSH
2046: LD_INT 45
2048: PUSH
2049: LD_INT 46
2051: PUSH
2052: LD_INT 47
2054: PUSH
2055: LD_INT 82
2057: PUSH
2058: LD_INT 83
2060: PUSH
2061: LD_INT 84
2063: PUSH
2064: LD_INT 85
2066: PUSH
2067: LD_INT 87
2069: PUSH
2070: LD_INT 70
2072: PUSH
2073: LD_INT 1
2075: PUSH
2076: LD_INT 11
2078: PUSH
2079: LD_INT 3
2081: PUSH
2082: LD_INT 4
2084: PUSH
2085: LD_INT 5
2087: PUSH
2088: LD_INT 6
2090: PUSH
2091: LD_INT 15
2093: PUSH
2094: LD_INT 18
2096: PUSH
2097: LD_INT 7
2099: PUSH
2100: LD_INT 17
2102: PUSH
2103: LD_INT 8
2105: PUSH
2106: LD_INT 20
2108: PUSH
2109: LD_INT 21
2111: PUSH
2112: LD_INT 22
2114: PUSH
2115: LD_INT 72
2117: PUSH
2118: LD_INT 26
2120: PUSH
2121: LD_INT 69
2123: PUSH
2124: LD_INT 39
2126: PUSH
2127: LD_INT 40
2129: PUSH
2130: LD_INT 41
2132: PUSH
2133: LD_INT 42
2135: PUSH
2136: LD_INT 43
2138: PUSH
2139: LD_INT 48
2141: PUSH
2142: LD_INT 49
2144: PUSH
2145: LD_INT 50
2147: PUSH
2148: LD_INT 51
2150: PUSH
2151: LD_INT 52
2153: PUSH
2154: LD_INT 53
2156: PUSH
2157: LD_INT 54
2159: PUSH
2160: LD_INT 55
2162: PUSH
2163: LD_INT 56
2165: PUSH
2166: LD_INT 60
2168: PUSH
2169: LD_INT 61
2171: PUSH
2172: LD_INT 62
2174: PUSH
2175: LD_INT 66
2177: PUSH
2178: LD_INT 67
2180: PUSH
2181: LD_INT 68
2183: PUSH
2184: LD_INT 81
2186: PUSH
2187: LD_INT 82
2189: PUSH
2190: LD_INT 83
2192: PUSH
2193: LD_INT 84
2195: PUSH
2196: LD_INT 85
2198: PUSH
2199: LD_INT 87
2201: PUSH
2202: LD_INT 88
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: ST_TO_ADDR
2261: GO 2494
2263: LD_INT 3
2265: DOUBLE
2266: EQUAL
2267: IFTRUE 2271
2269: GO 2493
2271: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2272: LD_ADDR_VAR 0 4
2276: PUSH
2277: LD_INT 46
2279: PUSH
2280: LD_INT 47
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: LD_INT 2
2288: PUSH
2289: LD_INT 82
2291: PUSH
2292: LD_INT 83
2294: PUSH
2295: LD_INT 84
2297: PUSH
2298: LD_INT 85
2300: PUSH
2301: LD_INT 86
2303: PUSH
2304: LD_INT 11
2306: PUSH
2307: LD_INT 9
2309: PUSH
2310: LD_INT 20
2312: PUSH
2313: LD_INT 19
2315: PUSH
2316: LD_INT 21
2318: PUSH
2319: LD_INT 24
2321: PUSH
2322: LD_INT 22
2324: PUSH
2325: LD_INT 25
2327: PUSH
2328: LD_INT 28
2330: PUSH
2331: LD_INT 29
2333: PUSH
2334: LD_INT 30
2336: PUSH
2337: LD_INT 31
2339: PUSH
2340: LD_INT 37
2342: PUSH
2343: LD_INT 38
2345: PUSH
2346: LD_INT 32
2348: PUSH
2349: LD_INT 27
2351: PUSH
2352: LD_INT 33
2354: PUSH
2355: LD_INT 69
2357: PUSH
2358: LD_INT 39
2360: PUSH
2361: LD_INT 34
2363: PUSH
2364: LD_INT 40
2366: PUSH
2367: LD_INT 71
2369: PUSH
2370: LD_INT 23
2372: PUSH
2373: LD_INT 44
2375: PUSH
2376: LD_INT 48
2378: PUSH
2379: LD_INT 49
2381: PUSH
2382: LD_INT 50
2384: PUSH
2385: LD_INT 51
2387: PUSH
2388: LD_INT 52
2390: PUSH
2391: LD_INT 53
2393: PUSH
2394: LD_INT 54
2396: PUSH
2397: LD_INT 55
2399: PUSH
2400: LD_INT 56
2402: PUSH
2403: LD_INT 57
2405: PUSH
2406: LD_INT 58
2408: PUSH
2409: LD_INT 59
2411: PUSH
2412: LD_INT 63
2414: PUSH
2415: LD_INT 64
2417: PUSH
2418: LD_INT 65
2420: PUSH
2421: LD_INT 82
2423: PUSH
2424: LD_INT 83
2426: PUSH
2427: LD_INT 84
2429: PUSH
2430: LD_INT 85
2432: PUSH
2433: LD_INT 86
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: ST_TO_ADDR
2491: GO 2494
2493: POP
// if state > - 1 and state < 3 then
2494: LD_VAR 0 3
2498: PUSH
2499: LD_INT 1
2501: NEG
2502: GREATER
2503: PUSH
2504: LD_VAR 0 3
2508: PUSH
2509: LD_INT 3
2511: LESS
2512: AND
2513: IFFALSE 2570
// for i in result do
2515: LD_ADDR_VAR 0 5
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: FOR_IN
2526: IFFALSE 2568
// if GetTech ( i , side ) <> state then
2528: LD_VAR 0 5
2532: PPUSH
2533: LD_VAR 0 1
2537: PPUSH
2538: CALL_OW 321
2542: PUSH
2543: LD_VAR 0 3
2547: NONEQUAL
2548: IFFALSE 2566
// result := result diff i ;
2550: LD_ADDR_VAR 0 4
2554: PUSH
2555: LD_VAR 0 4
2559: PUSH
2560: LD_VAR 0 5
2564: DIFF
2565: ST_TO_ADDR
2566: GO 2525
2568: POP
2569: POP
// end ;
2570: LD_VAR 0 4
2574: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2575: LD_INT 0
2577: PPUSH
2578: PPUSH
2579: PPUSH
// result := true ;
2580: LD_ADDR_VAR 0 3
2584: PUSH
2585: LD_INT 1
2587: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2588: LD_ADDR_VAR 0 5
2592: PUSH
2593: LD_VAR 0 2
2597: PPUSH
2598: CALL_OW 480
2602: ST_TO_ADDR
// if not tmp then
2603: LD_VAR 0 5
2607: NOT
2608: IFFALSE 2612
// exit ;
2610: GO 2661
// for i in tmp do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: LD_VAR 0 5
2621: PUSH
2622: FOR_IN
2623: IFFALSE 2659
// if GetTech ( i , side ) <> state_researched then
2625: LD_VAR 0 4
2629: PPUSH
2630: LD_VAR 0 1
2634: PPUSH
2635: CALL_OW 321
2639: PUSH
2640: LD_INT 2
2642: NONEQUAL
2643: IFFALSE 2657
// begin result := false ;
2645: LD_ADDR_VAR 0 3
2649: PUSH
2650: LD_INT 0
2652: ST_TO_ADDR
// exit ;
2653: POP
2654: POP
2655: GO 2661
// end ;
2657: GO 2622
2659: POP
2660: POP
// end ;
2661: LD_VAR 0 3
2665: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2666: LD_INT 0
2668: PPUSH
2669: PPUSH
2670: PPUSH
2671: PPUSH
2672: PPUSH
2673: PPUSH
2674: PPUSH
2675: PPUSH
2676: PPUSH
2677: PPUSH
2678: PPUSH
2679: PPUSH
2680: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2681: LD_VAR 0 1
2685: NOT
2686: PUSH
2687: LD_VAR 0 1
2691: PPUSH
2692: CALL_OW 257
2696: PUSH
2697: LD_INT 9
2699: NONEQUAL
2700: OR
2701: IFFALSE 2705
// exit ;
2703: GO 3278
// side := GetSide ( unit ) ;
2705: LD_ADDR_VAR 0 9
2709: PUSH
2710: LD_VAR 0 1
2714: PPUSH
2715: CALL_OW 255
2719: ST_TO_ADDR
// tech_space := tech_spacanom ;
2720: LD_ADDR_VAR 0 12
2724: PUSH
2725: LD_INT 29
2727: ST_TO_ADDR
// tech_time := tech_taurad ;
2728: LD_ADDR_VAR 0 13
2732: PUSH
2733: LD_INT 28
2735: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2736: LD_ADDR_VAR 0 11
2740: PUSH
2741: LD_VAR 0 1
2745: PPUSH
2746: CALL_OW 310
2750: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2751: LD_VAR 0 11
2755: PPUSH
2756: CALL_OW 247
2760: PUSH
2761: LD_INT 2
2763: EQUAL
2764: IFFALSE 2768
// exit ;
2766: GO 3278
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2768: LD_ADDR_VAR 0 8
2772: PUSH
2773: LD_INT 81
2775: PUSH
2776: LD_VAR 0 9
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: LD_INT 21
2790: PUSH
2791: LD_INT 3
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 69
2810: ST_TO_ADDR
// if not tmp then
2811: LD_VAR 0 8
2815: NOT
2816: IFFALSE 2820
// exit ;
2818: GO 3278
// if in_unit then
2820: LD_VAR 0 11
2824: IFFALSE 2848
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2826: LD_ADDR_VAR 0 10
2830: PUSH
2831: LD_VAR 0 8
2835: PPUSH
2836: LD_VAR 0 11
2840: PPUSH
2841: CALL_OW 74
2845: ST_TO_ADDR
2846: GO 2868
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2848: LD_ADDR_VAR 0 10
2852: PUSH
2853: LD_VAR 0 8
2857: PPUSH
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL_OW 74
2867: ST_TO_ADDR
// if not enemy then
2868: LD_VAR 0 10
2872: NOT
2873: IFFALSE 2877
// exit ;
2875: GO 3278
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2877: LD_VAR 0 11
2881: PUSH
2882: LD_VAR 0 11
2886: PPUSH
2887: LD_VAR 0 10
2891: PPUSH
2892: CALL_OW 296
2896: PUSH
2897: LD_INT 13
2899: GREATER
2900: AND
2901: PUSH
2902: LD_VAR 0 1
2906: PPUSH
2907: LD_VAR 0 10
2911: PPUSH
2912: CALL_OW 296
2916: PUSH
2917: LD_INT 12
2919: GREATER
2920: OR
2921: IFFALSE 2925
// exit ;
2923: GO 3278
// missile := [ 1 ] ;
2925: LD_ADDR_VAR 0 14
2929: PUSH
2930: LD_INT 1
2932: PUSH
2933: EMPTY
2934: LIST
2935: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2936: LD_VAR 0 9
2940: PPUSH
2941: LD_VAR 0 12
2945: PPUSH
2946: CALL_OW 325
2950: IFFALSE 2979
// missile := Replace ( missile , missile + 1 , 2 ) ;
2952: LD_ADDR_VAR 0 14
2956: PUSH
2957: LD_VAR 0 14
2961: PPUSH
2962: LD_VAR 0 14
2966: PUSH
2967: LD_INT 1
2969: PLUS
2970: PPUSH
2971: LD_INT 2
2973: PPUSH
2974: CALL_OW 1
2978: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2979: LD_VAR 0 9
2983: PPUSH
2984: LD_VAR 0 13
2988: PPUSH
2989: CALL_OW 325
2993: PUSH
2994: LD_VAR 0 10
2998: PPUSH
2999: CALL_OW 255
3003: PPUSH
3004: LD_VAR 0 13
3008: PPUSH
3009: CALL_OW 325
3013: NOT
3014: AND
3015: IFFALSE 3044
// missile := Replace ( missile , missile + 1 , 3 ) ;
3017: LD_ADDR_VAR 0 14
3021: PUSH
3022: LD_VAR 0 14
3026: PPUSH
3027: LD_VAR 0 14
3031: PUSH
3032: LD_INT 1
3034: PLUS
3035: PPUSH
3036: LD_INT 3
3038: PPUSH
3039: CALL_OW 1
3043: ST_TO_ADDR
// if missile < 2 then
3044: LD_VAR 0 14
3048: PUSH
3049: LD_INT 2
3051: LESS
3052: IFFALSE 3056
// exit ;
3054: GO 3278
// x := GetX ( enemy ) ;
3056: LD_ADDR_VAR 0 4
3060: PUSH
3061: LD_VAR 0 10
3065: PPUSH
3066: CALL_OW 250
3070: ST_TO_ADDR
// y := GetY ( enemy ) ;
3071: LD_ADDR_VAR 0 5
3075: PUSH
3076: LD_VAR 0 10
3080: PPUSH
3081: CALL_OW 251
3085: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3086: LD_ADDR_VAR 0 6
3090: PUSH
3091: LD_VAR 0 4
3095: PUSH
3096: LD_INT 1
3098: NEG
3099: PPUSH
3100: LD_INT 1
3102: PPUSH
3103: CALL_OW 12
3107: PLUS
3108: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3109: LD_ADDR_VAR 0 7
3113: PUSH
3114: LD_VAR 0 5
3118: PUSH
3119: LD_INT 1
3121: NEG
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: CALL_OW 12
3130: PLUS
3131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3132: LD_VAR 0 6
3136: PPUSH
3137: LD_VAR 0 7
3141: PPUSH
3142: CALL_OW 488
3146: NOT
3147: IFFALSE 3169
// begin _x := x ;
3149: LD_ADDR_VAR 0 6
3153: PUSH
3154: LD_VAR 0 4
3158: ST_TO_ADDR
// _y := y ;
3159: LD_ADDR_VAR 0 7
3163: PUSH
3164: LD_VAR 0 5
3168: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3169: LD_ADDR_VAR 0 3
3173: PUSH
3174: LD_INT 1
3176: PPUSH
3177: LD_VAR 0 14
3181: PPUSH
3182: CALL_OW 12
3186: ST_TO_ADDR
// case i of 1 :
3187: LD_VAR 0 3
3191: PUSH
3192: LD_INT 1
3194: DOUBLE
3195: EQUAL
3196: IFTRUE 3200
3198: GO 3217
3200: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3201: LD_VAR 0 1
3205: PPUSH
3206: LD_VAR 0 10
3210: PPUSH
3211: CALL_OW 115
3215: GO 3278
3217: LD_INT 2
3219: DOUBLE
3220: EQUAL
3221: IFTRUE 3225
3223: GO 3247
3225: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3226: LD_VAR 0 1
3230: PPUSH
3231: LD_VAR 0 6
3235: PPUSH
3236: LD_VAR 0 7
3240: PPUSH
3241: CALL_OW 153
3245: GO 3278
3247: LD_INT 3
3249: DOUBLE
3250: EQUAL
3251: IFTRUE 3255
3253: GO 3277
3255: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3256: LD_VAR 0 1
3260: PPUSH
3261: LD_VAR 0 6
3265: PPUSH
3266: LD_VAR 0 7
3270: PPUSH
3271: CALL_OW 154
3275: GO 3278
3277: POP
// end ;
3278: LD_VAR 0 2
3282: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3283: LD_INT 0
3285: PPUSH
3286: PPUSH
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
// if not unit or not building then
3291: LD_VAR 0 1
3295: NOT
3296: PUSH
3297: LD_VAR 0 2
3301: NOT
3302: OR
3303: IFFALSE 3307
// exit ;
3305: GO 3465
// x := GetX ( building ) ;
3307: LD_ADDR_VAR 0 5
3311: PUSH
3312: LD_VAR 0 2
3316: PPUSH
3317: CALL_OW 250
3321: ST_TO_ADDR
// y := GetY ( building ) ;
3322: LD_ADDR_VAR 0 6
3326: PUSH
3327: LD_VAR 0 2
3331: PPUSH
3332: CALL_OW 251
3336: ST_TO_ADDR
// for i = 0 to 5 do
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: DOUBLE
3343: LD_INT 0
3345: DEC
3346: ST_TO_ADDR
3347: LD_INT 5
3349: PUSH
3350: FOR_TO
3351: IFFALSE 3463
// begin _x := ShiftX ( x , i , 3 ) ;
3353: LD_ADDR_VAR 0 7
3357: PUSH
3358: LD_VAR 0 5
3362: PPUSH
3363: LD_VAR 0 4
3367: PPUSH
3368: LD_INT 3
3370: PPUSH
3371: CALL_OW 272
3375: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3376: LD_ADDR_VAR 0 8
3380: PUSH
3381: LD_VAR 0 6
3385: PPUSH
3386: LD_VAR 0 4
3390: PPUSH
3391: LD_INT 3
3393: PPUSH
3394: CALL_OW 273
3398: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3399: LD_VAR 0 7
3403: PPUSH
3404: LD_VAR 0 8
3408: PPUSH
3409: CALL_OW 488
3413: NOT
3414: IFFALSE 3418
// continue ;
3416: GO 3350
// if HexInfo ( _x , _y ) = 0 then
3418: LD_VAR 0 7
3422: PPUSH
3423: LD_VAR 0 8
3427: PPUSH
3428: CALL_OW 428
3432: PUSH
3433: LD_INT 0
3435: EQUAL
3436: IFFALSE 3461
// begin ComMoveXY ( unit , _x , _y ) ;
3438: LD_VAR 0 1
3442: PPUSH
3443: LD_VAR 0 7
3447: PPUSH
3448: LD_VAR 0 8
3452: PPUSH
3453: CALL_OW 111
// exit ;
3457: POP
3458: POP
3459: GO 3465
// end ; end ;
3461: GO 3350
3463: POP
3464: POP
// end ;
3465: LD_VAR 0 3
3469: RET
// export function ScanBase ( side , base_area ) ; begin
3470: LD_INT 0
3472: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3473: LD_ADDR_VAR 0 3
3477: PUSH
3478: LD_VAR 0 2
3482: PPUSH
3483: LD_INT 81
3485: PUSH
3486: LD_VAR 0 1
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PPUSH
3495: CALL_OW 70
3499: ST_TO_ADDR
// end ;
3500: LD_VAR 0 3
3504: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3505: LD_INT 0
3507: PPUSH
3508: PPUSH
3509: PPUSH
3510: PPUSH
// result := false ;
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: LD_INT 0
3518: ST_TO_ADDR
// side := GetSide ( unit ) ;
3519: LD_ADDR_VAR 0 3
3523: PUSH
3524: LD_VAR 0 1
3528: PPUSH
3529: CALL_OW 255
3533: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3534: LD_ADDR_VAR 0 4
3538: PUSH
3539: LD_VAR 0 1
3543: PPUSH
3544: CALL_OW 248
3548: ST_TO_ADDR
// case nat of 1 :
3549: LD_VAR 0 4
3553: PUSH
3554: LD_INT 1
3556: DOUBLE
3557: EQUAL
3558: IFTRUE 3562
3560: GO 3573
3562: POP
// tech := tech_lassight ; 2 :
3563: LD_ADDR_VAR 0 5
3567: PUSH
3568: LD_INT 12
3570: ST_TO_ADDR
3571: GO 3612
3573: LD_INT 2
3575: DOUBLE
3576: EQUAL
3577: IFTRUE 3581
3579: GO 3592
3581: POP
// tech := tech_mortar ; 3 :
3582: LD_ADDR_VAR 0 5
3586: PUSH
3587: LD_INT 41
3589: ST_TO_ADDR
3590: GO 3612
3592: LD_INT 3
3594: DOUBLE
3595: EQUAL
3596: IFTRUE 3600
3598: GO 3611
3600: POP
// tech := tech_bazooka ; end ;
3601: LD_ADDR_VAR 0 5
3605: PUSH
3606: LD_INT 44
3608: ST_TO_ADDR
3609: GO 3612
3611: POP
// if Researched ( side , tech ) then
3612: LD_VAR 0 3
3616: PPUSH
3617: LD_VAR 0 5
3621: PPUSH
3622: CALL_OW 325
3626: IFFALSE 3653
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3628: LD_ADDR_VAR 0 2
3632: PUSH
3633: LD_INT 5
3635: PUSH
3636: LD_INT 8
3638: PUSH
3639: LD_INT 9
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: LIST
3646: PUSH
3647: LD_VAR 0 4
3651: ARRAY
3652: ST_TO_ADDR
// end ;
3653: LD_VAR 0 2
3657: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3658: LD_INT 0
3660: PPUSH
3661: PPUSH
3662: PPUSH
// if not mines then
3663: LD_VAR 0 2
3667: NOT
3668: IFFALSE 3672
// exit ;
3670: GO 3816
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3672: LD_ADDR_VAR 0 5
3676: PUSH
3677: LD_INT 81
3679: PUSH
3680: LD_VAR 0 1
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PUSH
3689: LD_INT 3
3691: PUSH
3692: LD_INT 21
3694: PUSH
3695: LD_INT 3
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PPUSH
3710: CALL_OW 69
3714: ST_TO_ADDR
// for i in mines do
3715: LD_ADDR_VAR 0 4
3719: PUSH
3720: LD_VAR 0 2
3724: PUSH
3725: FOR_IN
3726: IFFALSE 3814
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3728: LD_VAR 0 4
3732: PUSH
3733: LD_INT 1
3735: ARRAY
3736: PPUSH
3737: LD_VAR 0 4
3741: PUSH
3742: LD_INT 2
3744: ARRAY
3745: PPUSH
3746: CALL_OW 458
3750: NOT
3751: IFFALSE 3755
// continue ;
3753: GO 3725
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3755: LD_VAR 0 4
3759: PUSH
3760: LD_INT 1
3762: ARRAY
3763: PPUSH
3764: LD_VAR 0 4
3768: PUSH
3769: LD_INT 2
3771: ARRAY
3772: PPUSH
3773: CALL_OW 428
3777: PUSH
3778: LD_VAR 0 5
3782: IN
3783: IFFALSE 3812
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3785: LD_VAR 0 4
3789: PUSH
3790: LD_INT 1
3792: ARRAY
3793: PPUSH
3794: LD_VAR 0 4
3798: PUSH
3799: LD_INT 2
3801: ARRAY
3802: PPUSH
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 456
// end ;
3812: GO 3725
3814: POP
3815: POP
// end ;
3816: LD_VAR 0 3
3820: RET
// export function Count ( array ) ; begin
3821: LD_INT 0
3823: PPUSH
// result := array + 0 ;
3824: LD_ADDR_VAR 0 2
3828: PUSH
3829: LD_VAR 0 1
3833: PUSH
3834: LD_INT 0
3836: PLUS
3837: ST_TO_ADDR
// end ;
3838: LD_VAR 0 2
3842: RET
// export function IsEmpty ( building ) ; begin
3843: LD_INT 0
3845: PPUSH
// if not building then
3846: LD_VAR 0 1
3850: NOT
3851: IFFALSE 3855
// exit ;
3853: GO 3898
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3855: LD_ADDR_VAR 0 2
3859: PUSH
3860: LD_VAR 0 1
3864: PUSH
3865: LD_INT 22
3867: PUSH
3868: LD_VAR 0 1
3872: PPUSH
3873: CALL_OW 255
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 58
3884: PUSH
3885: EMPTY
3886: LIST
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: CALL_OW 69
3896: IN
3897: ST_TO_ADDR
// end ;
3898: LD_VAR 0 2
3902: RET
// export function IsNotFull ( building ) ; var places ; begin
3903: LD_INT 0
3905: PPUSH
3906: PPUSH
// if not building then
3907: LD_VAR 0 1
3911: NOT
3912: IFFALSE 3916
// exit ;
3914: GO 3944
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3916: LD_ADDR_VAR 0 2
3920: PUSH
3921: LD_VAR 0 1
3925: PPUSH
3926: LD_INT 3
3928: PUSH
3929: LD_INT 62
3931: PUSH
3932: EMPTY
3933: LIST
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PPUSH
3939: CALL_OW 72
3943: ST_TO_ADDR
// end ;
3944: LD_VAR 0 2
3948: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3949: LD_INT 0
3951: PPUSH
3952: PPUSH
3953: PPUSH
3954: PPUSH
// tmp := [ ] ;
3955: LD_ADDR_VAR 0 3
3959: PUSH
3960: EMPTY
3961: ST_TO_ADDR
// list := [ ] ;
3962: LD_ADDR_VAR 0 5
3966: PUSH
3967: EMPTY
3968: ST_TO_ADDR
// for i = 16 to 25 do
3969: LD_ADDR_VAR 0 4
3973: PUSH
3974: DOUBLE
3975: LD_INT 16
3977: DEC
3978: ST_TO_ADDR
3979: LD_INT 25
3981: PUSH
3982: FOR_TO
3983: IFFALSE 4056
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: LD_VAR 0 3
3994: PUSH
3995: LD_INT 22
3997: PUSH
3998: LD_VAR 0 1
4002: PPUSH
4003: CALL_OW 255
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 91
4014: PUSH
4015: LD_VAR 0 1
4019: PUSH
4020: LD_INT 6
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 30
4030: PUSH
4031: LD_VAR 0 4
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: LIST
4044: PUSH
4045: EMPTY
4046: LIST
4047: PPUSH
4048: CALL_OW 69
4052: ADD
4053: ST_TO_ADDR
4054: GO 3982
4056: POP
4057: POP
// for i = 1 to tmp do
4058: LD_ADDR_VAR 0 4
4062: PUSH
4063: DOUBLE
4064: LD_INT 1
4066: DEC
4067: ST_TO_ADDR
4068: LD_VAR 0 3
4072: PUSH
4073: FOR_TO
4074: IFFALSE 4162
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4076: LD_ADDR_VAR 0 5
4080: PUSH
4081: LD_VAR 0 5
4085: PUSH
4086: LD_VAR 0 3
4090: PUSH
4091: LD_VAR 0 4
4095: ARRAY
4096: PPUSH
4097: CALL_OW 266
4101: PUSH
4102: LD_VAR 0 3
4106: PUSH
4107: LD_VAR 0 4
4111: ARRAY
4112: PPUSH
4113: CALL_OW 250
4117: PUSH
4118: LD_VAR 0 3
4122: PUSH
4123: LD_VAR 0 4
4127: ARRAY
4128: PPUSH
4129: CALL_OW 251
4133: PUSH
4134: LD_VAR 0 3
4138: PUSH
4139: LD_VAR 0 4
4143: ARRAY
4144: PPUSH
4145: CALL_OW 254
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: PUSH
4156: EMPTY
4157: LIST
4158: ADD
4159: ST_TO_ADDR
4160: GO 4073
4162: POP
4163: POP
// result := list ;
4164: LD_ADDR_VAR 0 2
4168: PUSH
4169: LD_VAR 0 5
4173: ST_TO_ADDR
// end ;
4174: LD_VAR 0 2
4178: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4179: LD_INT 0
4181: PPUSH
4182: PPUSH
4183: PPUSH
4184: PPUSH
4185: PPUSH
4186: PPUSH
4187: PPUSH
// if not factory then
4188: LD_VAR 0 1
4192: NOT
4193: IFFALSE 4197
// exit ;
4195: GO 4790
// if control = control_apeman then
4197: LD_VAR 0 4
4201: PUSH
4202: LD_INT 5
4204: EQUAL
4205: IFFALSE 4314
// begin tmp := UnitsInside ( factory ) ;
4207: LD_ADDR_VAR 0 8
4211: PUSH
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL_OW 313
4221: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4222: LD_VAR 0 8
4226: PPUSH
4227: LD_INT 25
4229: PUSH
4230: LD_INT 12
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PPUSH
4237: CALL_OW 72
4241: NOT
4242: IFFALSE 4252
// control := control_manual ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 1
4251: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4252: LD_ADDR_VAR 0 8
4256: PUSH
4257: LD_VAR 0 1
4261: PPUSH
4262: CALL 3949 0 1
4266: ST_TO_ADDR
// if tmp then
4267: LD_VAR 0 8
4271: IFFALSE 4314
// begin for i in tmp do
4273: LD_ADDR_VAR 0 7
4277: PUSH
4278: LD_VAR 0 8
4282: PUSH
4283: FOR_IN
4284: IFFALSE 4312
// if i [ 1 ] = b_ext_radio then
4286: LD_VAR 0 7
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: PUSH
4295: LD_INT 22
4297: EQUAL
4298: IFFALSE 4310
// begin control := control_remote ;
4300: LD_ADDR_VAR 0 4
4304: PUSH
4305: LD_INT 2
4307: ST_TO_ADDR
// break ;
4308: GO 4312
// end ;
4310: GO 4283
4312: POP
4313: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4314: LD_VAR 0 1
4318: PPUSH
4319: LD_VAR 0 2
4323: PPUSH
4324: LD_VAR 0 3
4328: PPUSH
4329: LD_VAR 0 4
4333: PPUSH
4334: LD_VAR 0 5
4338: PPUSH
4339: CALL_OW 448
4343: IFFALSE 4378
// begin result := [ chassis , engine , control , weapon ] ;
4345: LD_ADDR_VAR 0 6
4349: PUSH
4350: LD_VAR 0 2
4354: PUSH
4355: LD_VAR 0 3
4359: PUSH
4360: LD_VAR 0 4
4364: PUSH
4365: LD_VAR 0 5
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: ST_TO_ADDR
// exit ;
4376: GO 4790
// end ; _chassis := AvailableChassisList ( factory ) ;
4378: LD_ADDR_VAR 0 9
4382: PUSH
4383: LD_VAR 0 1
4387: PPUSH
4388: CALL_OW 475
4392: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4393: LD_ADDR_VAR 0 11
4397: PUSH
4398: LD_VAR 0 1
4402: PPUSH
4403: CALL_OW 476
4407: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4408: LD_ADDR_VAR 0 12
4412: PUSH
4413: LD_VAR 0 1
4417: PPUSH
4418: CALL_OW 477
4422: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4423: LD_ADDR_VAR 0 10
4427: PUSH
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL_OW 478
4437: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4438: LD_VAR 0 9
4442: NOT
4443: PUSH
4444: LD_VAR 0 11
4448: NOT
4449: OR
4450: PUSH
4451: LD_VAR 0 12
4455: NOT
4456: OR
4457: PUSH
4458: LD_VAR 0 10
4462: NOT
4463: OR
4464: IFFALSE 4499
// begin result := [ chassis , engine , control , weapon ] ;
4466: LD_ADDR_VAR 0 6
4470: PUSH
4471: LD_VAR 0 2
4475: PUSH
4476: LD_VAR 0 3
4480: PUSH
4481: LD_VAR 0 4
4485: PUSH
4486: LD_VAR 0 5
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: ST_TO_ADDR
// exit ;
4497: GO 4790
// end ; if not chassis in _chassis then
4499: LD_VAR 0 2
4503: PUSH
4504: LD_VAR 0 9
4508: IN
4509: NOT
4510: IFFALSE 4536
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: LD_VAR 0 9
4521: PUSH
4522: LD_INT 1
4524: PPUSH
4525: LD_VAR 0 9
4529: PPUSH
4530: CALL_OW 12
4534: ARRAY
4535: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4536: LD_VAR 0 2
4540: PPUSH
4541: LD_VAR 0 3
4545: PPUSH
4546: CALL 4795 0 2
4550: NOT
4551: IFFALSE 4610
// repeat engine := _engine [ 1 ] ;
4553: LD_ADDR_VAR 0 3
4557: PUSH
4558: LD_VAR 0 11
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4567: LD_ADDR_VAR 0 11
4571: PUSH
4572: LD_VAR 0 11
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 3
4584: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4585: LD_VAR 0 2
4589: PPUSH
4590: LD_VAR 0 3
4594: PPUSH
4595: CALL 4795 0 2
4599: PUSH
4600: LD_VAR 0 11
4604: PUSH
4605: EMPTY
4606: EQUAL
4607: OR
4608: IFFALSE 4553
// if not control in _control then
4610: LD_VAR 0 4
4614: PUSH
4615: LD_VAR 0 12
4619: IN
4620: NOT
4621: IFFALSE 4647
// control := _control [ rand ( 1 , _control ) ] ;
4623: LD_ADDR_VAR 0 4
4627: PUSH
4628: LD_VAR 0 12
4632: PUSH
4633: LD_INT 1
4635: PPUSH
4636: LD_VAR 0 12
4640: PPUSH
4641: CALL_OW 12
4645: ARRAY
4646: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4647: LD_VAR 0 2
4651: PPUSH
4652: LD_VAR 0 5
4656: PPUSH
4657: CALL 5015 0 2
4661: NOT
4662: IFFALSE 4721
// repeat weapon := _weapon [ 1 ] ;
4664: LD_ADDR_VAR 0 5
4668: PUSH
4669: LD_VAR 0 10
4673: PUSH
4674: LD_INT 1
4676: ARRAY
4677: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4678: LD_ADDR_VAR 0 10
4682: PUSH
4683: LD_VAR 0 10
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL_OW 3
4695: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4696: LD_VAR 0 2
4700: PPUSH
4701: LD_VAR 0 5
4705: PPUSH
4706: CALL 5015 0 2
4710: PUSH
4711: LD_VAR 0 10
4715: PUSH
4716: EMPTY
4717: EQUAL
4718: OR
4719: IFFALSE 4664
// result := [ ] ;
4721: LD_ADDR_VAR 0 6
4725: PUSH
4726: EMPTY
4727: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4728: LD_VAR 0 1
4732: PPUSH
4733: LD_VAR 0 2
4737: PPUSH
4738: LD_VAR 0 3
4742: PPUSH
4743: LD_VAR 0 4
4747: PPUSH
4748: LD_VAR 0 5
4752: PPUSH
4753: CALL_OW 448
4757: IFFALSE 4790
// result := [ chassis , engine , control , weapon ] ;
4759: LD_ADDR_VAR 0 6
4763: PUSH
4764: LD_VAR 0 2
4768: PUSH
4769: LD_VAR 0 3
4773: PUSH
4774: LD_VAR 0 4
4778: PUSH
4779: LD_VAR 0 5
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: ST_TO_ADDR
// end ;
4790: LD_VAR 0 6
4794: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4795: LD_INT 0
4797: PPUSH
// if not chassis or not engine then
4798: LD_VAR 0 1
4802: NOT
4803: PUSH
4804: LD_VAR 0 2
4808: NOT
4809: OR
4810: IFFALSE 4814
// exit ;
4812: GO 5010
// case engine of engine_solar :
4814: LD_VAR 0 2
4818: PUSH
4819: LD_INT 2
4821: DOUBLE
4822: EQUAL
4823: IFTRUE 4827
4825: GO 4865
4827: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4828: LD_ADDR_VAR 0 3
4832: PUSH
4833: LD_INT 11
4835: PUSH
4836: LD_INT 12
4838: PUSH
4839: LD_INT 13
4841: PUSH
4842: LD_INT 14
4844: PUSH
4845: LD_INT 1
4847: PUSH
4848: LD_INT 2
4850: PUSH
4851: LD_INT 3
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: ST_TO_ADDR
4863: GO 4994
4865: LD_INT 1
4867: DOUBLE
4868: EQUAL
4869: IFTRUE 4873
4871: GO 4935
4873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4874: LD_ADDR_VAR 0 3
4878: PUSH
4879: LD_INT 11
4881: PUSH
4882: LD_INT 12
4884: PUSH
4885: LD_INT 13
4887: PUSH
4888: LD_INT 14
4890: PUSH
4891: LD_INT 1
4893: PUSH
4894: LD_INT 2
4896: PUSH
4897: LD_INT 3
4899: PUSH
4900: LD_INT 4
4902: PUSH
4903: LD_INT 5
4905: PUSH
4906: LD_INT 21
4908: PUSH
4909: LD_INT 23
4911: PUSH
4912: LD_INT 22
4914: PUSH
4915: LD_INT 24
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: ST_TO_ADDR
4933: GO 4994
4935: LD_INT 3
4937: DOUBLE
4938: EQUAL
4939: IFTRUE 4943
4941: GO 4993
4943: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4944: LD_ADDR_VAR 0 3
4948: PUSH
4949: LD_INT 13
4951: PUSH
4952: LD_INT 14
4954: PUSH
4955: LD_INT 2
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 5
4966: PUSH
4967: LD_INT 21
4969: PUSH
4970: LD_INT 22
4972: PUSH
4973: LD_INT 23
4975: PUSH
4976: LD_INT 24
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: ST_TO_ADDR
4991: GO 4994
4993: POP
// result := ( chassis in result ) ;
4994: LD_ADDR_VAR 0 3
4998: PUSH
4999: LD_VAR 0 1
5003: PUSH
5004: LD_VAR 0 3
5008: IN
5009: ST_TO_ADDR
// end ;
5010: LD_VAR 0 3
5014: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5015: LD_INT 0
5017: PPUSH
// if not chassis or not weapon then
5018: LD_VAR 0 1
5022: NOT
5023: PUSH
5024: LD_VAR 0 2
5028: NOT
5029: OR
5030: IFFALSE 5034
// exit ;
5032: GO 6094
// case weapon of us_machine_gun :
5034: LD_VAR 0 2
5038: PUSH
5039: LD_INT 2
5041: DOUBLE
5042: EQUAL
5043: IFTRUE 5047
5045: GO 5077
5047: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5048: LD_ADDR_VAR 0 3
5052: PUSH
5053: LD_INT 1
5055: PUSH
5056: LD_INT 2
5058: PUSH
5059: LD_INT 3
5061: PUSH
5062: LD_INT 4
5064: PUSH
5065: LD_INT 5
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: ST_TO_ADDR
5075: GO 6078
5077: LD_INT 3
5079: DOUBLE
5080: EQUAL
5081: IFTRUE 5085
5083: GO 5115
5085: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5086: LD_ADDR_VAR 0 3
5090: PUSH
5091: LD_INT 1
5093: PUSH
5094: LD_INT 2
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: LD_INT 4
5102: PUSH
5103: LD_INT 5
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: ST_TO_ADDR
5113: GO 6078
5115: LD_INT 11
5117: DOUBLE
5118: EQUAL
5119: IFTRUE 5123
5121: GO 5153
5123: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5124: LD_ADDR_VAR 0 3
5128: PUSH
5129: LD_INT 1
5131: PUSH
5132: LD_INT 2
5134: PUSH
5135: LD_INT 3
5137: PUSH
5138: LD_INT 4
5140: PUSH
5141: LD_INT 5
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: ST_TO_ADDR
5151: GO 6078
5153: LD_INT 4
5155: DOUBLE
5156: EQUAL
5157: IFTRUE 5161
5159: GO 5187
5161: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: LD_INT 2
5169: PUSH
5170: LD_INT 3
5172: PUSH
5173: LD_INT 4
5175: PUSH
5176: LD_INT 5
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: ST_TO_ADDR
5185: GO 6078
5187: LD_INT 5
5189: DOUBLE
5190: EQUAL
5191: IFTRUE 5195
5193: GO 5221
5195: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5196: LD_ADDR_VAR 0 3
5200: PUSH
5201: LD_INT 2
5203: PUSH
5204: LD_INT 3
5206: PUSH
5207: LD_INT 4
5209: PUSH
5210: LD_INT 5
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: ST_TO_ADDR
5219: GO 6078
5221: LD_INT 9
5223: DOUBLE
5224: EQUAL
5225: IFTRUE 5229
5227: GO 5255
5229: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: LD_INT 2
5237: PUSH
5238: LD_INT 3
5240: PUSH
5241: LD_INT 4
5243: PUSH
5244: LD_INT 5
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: ST_TO_ADDR
5253: GO 6078
5255: LD_INT 7
5257: DOUBLE
5258: EQUAL
5259: IFTRUE 5263
5261: GO 5289
5263: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5264: LD_ADDR_VAR 0 3
5268: PUSH
5269: LD_INT 2
5271: PUSH
5272: LD_INT 3
5274: PUSH
5275: LD_INT 4
5277: PUSH
5278: LD_INT 5
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: ST_TO_ADDR
5287: GO 6078
5289: LD_INT 12
5291: DOUBLE
5292: EQUAL
5293: IFTRUE 5297
5295: GO 5323
5297: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5298: LD_ADDR_VAR 0 3
5302: PUSH
5303: LD_INT 2
5305: PUSH
5306: LD_INT 3
5308: PUSH
5309: LD_INT 4
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: ST_TO_ADDR
5321: GO 6078
5323: LD_INT 13
5325: DOUBLE
5326: EQUAL
5327: IFTRUE 5331
5329: GO 5357
5331: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5332: LD_ADDR_VAR 0 3
5336: PUSH
5337: LD_INT 2
5339: PUSH
5340: LD_INT 3
5342: PUSH
5343: LD_INT 4
5345: PUSH
5346: LD_INT 5
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: ST_TO_ADDR
5355: GO 6078
5357: LD_INT 14
5359: DOUBLE
5360: EQUAL
5361: IFTRUE 5365
5363: GO 5383
5365: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5366: LD_ADDR_VAR 0 3
5370: PUSH
5371: LD_INT 4
5373: PUSH
5374: LD_INT 5
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: ST_TO_ADDR
5381: GO 6078
5383: LD_INT 6
5385: DOUBLE
5386: EQUAL
5387: IFTRUE 5391
5389: GO 5409
5391: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_INT 4
5399: PUSH
5400: LD_INT 5
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: ST_TO_ADDR
5407: GO 6078
5409: LD_INT 10
5411: DOUBLE
5412: EQUAL
5413: IFTRUE 5417
5415: GO 5435
5417: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5418: LD_ADDR_VAR 0 3
5422: PUSH
5423: LD_INT 4
5425: PUSH
5426: LD_INT 5
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: ST_TO_ADDR
5433: GO 6078
5435: LD_INT 22
5437: DOUBLE
5438: EQUAL
5439: IFTRUE 5443
5441: GO 5469
5443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5444: LD_ADDR_VAR 0 3
5448: PUSH
5449: LD_INT 11
5451: PUSH
5452: LD_INT 12
5454: PUSH
5455: LD_INT 13
5457: PUSH
5458: LD_INT 14
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: ST_TO_ADDR
5467: GO 6078
5469: LD_INT 23
5471: DOUBLE
5472: EQUAL
5473: IFTRUE 5477
5475: GO 5503
5477: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5478: LD_ADDR_VAR 0 3
5482: PUSH
5483: LD_INT 11
5485: PUSH
5486: LD_INT 12
5488: PUSH
5489: LD_INT 13
5491: PUSH
5492: LD_INT 14
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: ST_TO_ADDR
5501: GO 6078
5503: LD_INT 24
5505: DOUBLE
5506: EQUAL
5507: IFTRUE 5511
5509: GO 5537
5511: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5512: LD_ADDR_VAR 0 3
5516: PUSH
5517: LD_INT 11
5519: PUSH
5520: LD_INT 12
5522: PUSH
5523: LD_INT 13
5525: PUSH
5526: LD_INT 14
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: ST_TO_ADDR
5535: GO 6078
5537: LD_INT 30
5539: DOUBLE
5540: EQUAL
5541: IFTRUE 5545
5543: GO 5571
5545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5546: LD_ADDR_VAR 0 3
5550: PUSH
5551: LD_INT 11
5553: PUSH
5554: LD_INT 12
5556: PUSH
5557: LD_INT 13
5559: PUSH
5560: LD_INT 14
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: ST_TO_ADDR
5569: GO 6078
5571: LD_INT 25
5573: DOUBLE
5574: EQUAL
5575: IFTRUE 5579
5577: GO 5597
5579: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5580: LD_ADDR_VAR 0 3
5584: PUSH
5585: LD_INT 13
5587: PUSH
5588: LD_INT 14
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: ST_TO_ADDR
5595: GO 6078
5597: LD_INT 27
5599: DOUBLE
5600: EQUAL
5601: IFTRUE 5605
5603: GO 5623
5605: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5606: LD_ADDR_VAR 0 3
5610: PUSH
5611: LD_INT 13
5613: PUSH
5614: LD_INT 14
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: ST_TO_ADDR
5621: GO 6078
5623: LD_INT 92
5625: DOUBLE
5626: EQUAL
5627: IFTRUE 5631
5629: GO 5657
5631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5632: LD_ADDR_VAR 0 3
5636: PUSH
5637: LD_INT 11
5639: PUSH
5640: LD_INT 12
5642: PUSH
5643: LD_INT 13
5645: PUSH
5646: LD_INT 14
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: ST_TO_ADDR
5655: GO 6078
5657: LD_INT 28
5659: DOUBLE
5660: EQUAL
5661: IFTRUE 5665
5663: GO 5683
5665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5666: LD_ADDR_VAR 0 3
5670: PUSH
5671: LD_INT 13
5673: PUSH
5674: LD_INT 14
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: ST_TO_ADDR
5681: GO 6078
5683: LD_INT 29
5685: DOUBLE
5686: EQUAL
5687: IFTRUE 5691
5689: GO 5709
5691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5692: LD_ADDR_VAR 0 3
5696: PUSH
5697: LD_INT 13
5699: PUSH
5700: LD_INT 14
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: ST_TO_ADDR
5707: GO 6078
5709: LD_INT 31
5711: DOUBLE
5712: EQUAL
5713: IFTRUE 5717
5715: GO 5735
5717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5718: LD_ADDR_VAR 0 3
5722: PUSH
5723: LD_INT 13
5725: PUSH
5726: LD_INT 14
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: ST_TO_ADDR
5733: GO 6078
5735: LD_INT 26
5737: DOUBLE
5738: EQUAL
5739: IFTRUE 5743
5741: GO 5761
5743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5744: LD_ADDR_VAR 0 3
5748: PUSH
5749: LD_INT 13
5751: PUSH
5752: LD_INT 14
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: ST_TO_ADDR
5759: GO 6078
5761: LD_INT 42
5763: DOUBLE
5764: EQUAL
5765: IFTRUE 5769
5767: GO 5795
5769: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5770: LD_ADDR_VAR 0 3
5774: PUSH
5775: LD_INT 21
5777: PUSH
5778: LD_INT 22
5780: PUSH
5781: LD_INT 23
5783: PUSH
5784: LD_INT 24
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: ST_TO_ADDR
5793: GO 6078
5795: LD_INT 43
5797: DOUBLE
5798: EQUAL
5799: IFTRUE 5803
5801: GO 5829
5803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5804: LD_ADDR_VAR 0 3
5808: PUSH
5809: LD_INT 21
5811: PUSH
5812: LD_INT 22
5814: PUSH
5815: LD_INT 23
5817: PUSH
5818: LD_INT 24
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: ST_TO_ADDR
5827: GO 6078
5829: LD_INT 44
5831: DOUBLE
5832: EQUAL
5833: IFTRUE 5837
5835: GO 5863
5837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5838: LD_ADDR_VAR 0 3
5842: PUSH
5843: LD_INT 21
5845: PUSH
5846: LD_INT 22
5848: PUSH
5849: LD_INT 23
5851: PUSH
5852: LD_INT 24
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: ST_TO_ADDR
5861: GO 6078
5863: LD_INT 45
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 5897
5871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5872: LD_ADDR_VAR 0 3
5876: PUSH
5877: LD_INT 21
5879: PUSH
5880: LD_INT 22
5882: PUSH
5883: LD_INT 23
5885: PUSH
5886: LD_INT 24
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: ST_TO_ADDR
5895: GO 6078
5897: LD_INT 49
5899: DOUBLE
5900: EQUAL
5901: IFTRUE 5905
5903: GO 5931
5905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5906: LD_ADDR_VAR 0 3
5910: PUSH
5911: LD_INT 21
5913: PUSH
5914: LD_INT 22
5916: PUSH
5917: LD_INT 23
5919: PUSH
5920: LD_INT 24
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: ST_TO_ADDR
5929: GO 6078
5931: LD_INT 51
5933: DOUBLE
5934: EQUAL
5935: IFTRUE 5939
5937: GO 5965
5939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5940: LD_ADDR_VAR 0 3
5944: PUSH
5945: LD_INT 21
5947: PUSH
5948: LD_INT 22
5950: PUSH
5951: LD_INT 23
5953: PUSH
5954: LD_INT 24
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: ST_TO_ADDR
5963: GO 6078
5965: LD_INT 52
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 5999
5973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5974: LD_ADDR_VAR 0 3
5978: PUSH
5979: LD_INT 21
5981: PUSH
5982: LD_INT 22
5984: PUSH
5985: LD_INT 23
5987: PUSH
5988: LD_INT 24
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: ST_TO_ADDR
5997: GO 6078
5999: LD_INT 53
6001: DOUBLE
6002: EQUAL
6003: IFTRUE 6007
6005: GO 6025
6007: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6008: LD_ADDR_VAR 0 3
6012: PUSH
6013: LD_INT 23
6015: PUSH
6016: LD_INT 24
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: ST_TO_ADDR
6023: GO 6078
6025: LD_INT 46
6027: DOUBLE
6028: EQUAL
6029: IFTRUE 6033
6031: GO 6051
6033: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6034: LD_ADDR_VAR 0 3
6038: PUSH
6039: LD_INT 23
6041: PUSH
6042: LD_INT 24
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: ST_TO_ADDR
6049: GO 6078
6051: LD_INT 47
6053: DOUBLE
6054: EQUAL
6055: IFTRUE 6059
6057: GO 6077
6059: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6060: LD_ADDR_VAR 0 3
6064: PUSH
6065: LD_INT 23
6067: PUSH
6068: LD_INT 24
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: ST_TO_ADDR
6075: GO 6078
6077: POP
// result := ( chassis in result ) ;
6078: LD_ADDR_VAR 0 3
6082: PUSH
6083: LD_VAR 0 1
6087: PUSH
6088: LD_VAR 0 3
6092: IN
6093: ST_TO_ADDR
// end ;
6094: LD_VAR 0 3
6098: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6099: LD_INT 0
6101: PPUSH
6102: PPUSH
6103: PPUSH
6104: PPUSH
6105: PPUSH
6106: PPUSH
6107: PPUSH
// result := array ;
6108: LD_ADDR_VAR 0 5
6112: PUSH
6113: LD_VAR 0 1
6117: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6118: LD_VAR 0 1
6122: NOT
6123: PUSH
6124: LD_VAR 0 2
6128: NOT
6129: OR
6130: PUSH
6131: LD_VAR 0 3
6135: NOT
6136: OR
6137: PUSH
6138: LD_VAR 0 2
6142: PUSH
6143: LD_VAR 0 1
6147: GREATER
6148: OR
6149: PUSH
6150: LD_VAR 0 3
6154: PUSH
6155: LD_VAR 0 1
6159: GREATER
6160: OR
6161: IFFALSE 6165
// exit ;
6163: GO 6461
// if direction then
6165: LD_VAR 0 4
6169: IFFALSE 6233
// begin d := 1 ;
6171: LD_ADDR_VAR 0 9
6175: PUSH
6176: LD_INT 1
6178: ST_TO_ADDR
// if i_from > i_to then
6179: LD_VAR 0 2
6183: PUSH
6184: LD_VAR 0 3
6188: GREATER
6189: IFFALSE 6215
// length := ( array - i_from ) + i_to else
6191: LD_ADDR_VAR 0 11
6195: PUSH
6196: LD_VAR 0 1
6200: PUSH
6201: LD_VAR 0 2
6205: MINUS
6206: PUSH
6207: LD_VAR 0 3
6211: PLUS
6212: ST_TO_ADDR
6213: GO 6231
// length := i_to - i_from ;
6215: LD_ADDR_VAR 0 11
6219: PUSH
6220: LD_VAR 0 3
6224: PUSH
6225: LD_VAR 0 2
6229: MINUS
6230: ST_TO_ADDR
// end else
6231: GO 6294
// begin d := - 1 ;
6233: LD_ADDR_VAR 0 9
6237: PUSH
6238: LD_INT 1
6240: NEG
6241: ST_TO_ADDR
// if i_from > i_to then
6242: LD_VAR 0 2
6246: PUSH
6247: LD_VAR 0 3
6251: GREATER
6252: IFFALSE 6272
// length := i_from - i_to else
6254: LD_ADDR_VAR 0 11
6258: PUSH
6259: LD_VAR 0 2
6263: PUSH
6264: LD_VAR 0 3
6268: MINUS
6269: ST_TO_ADDR
6270: GO 6294
// length := ( array - i_to ) + i_from ;
6272: LD_ADDR_VAR 0 11
6276: PUSH
6277: LD_VAR 0 1
6281: PUSH
6282: LD_VAR 0 3
6286: MINUS
6287: PUSH
6288: LD_VAR 0 2
6292: PLUS
6293: ST_TO_ADDR
// end ; if not length then
6294: LD_VAR 0 11
6298: NOT
6299: IFFALSE 6303
// exit ;
6301: GO 6461
// tmp := array ;
6303: LD_ADDR_VAR 0 10
6307: PUSH
6308: LD_VAR 0 1
6312: ST_TO_ADDR
// for i = 1 to length do
6313: LD_ADDR_VAR 0 6
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_VAR 0 11
6327: PUSH
6328: FOR_TO
6329: IFFALSE 6449
// begin for j = 1 to array do
6331: LD_ADDR_VAR 0 7
6335: PUSH
6336: DOUBLE
6337: LD_INT 1
6339: DEC
6340: ST_TO_ADDR
6341: LD_VAR 0 1
6345: PUSH
6346: FOR_TO
6347: IFFALSE 6435
// begin k := j + d ;
6349: LD_ADDR_VAR 0 8
6353: PUSH
6354: LD_VAR 0 7
6358: PUSH
6359: LD_VAR 0 9
6363: PLUS
6364: ST_TO_ADDR
// if k > array then
6365: LD_VAR 0 8
6369: PUSH
6370: LD_VAR 0 1
6374: GREATER
6375: IFFALSE 6385
// k := 1 ;
6377: LD_ADDR_VAR 0 8
6381: PUSH
6382: LD_INT 1
6384: ST_TO_ADDR
// if not k then
6385: LD_VAR 0 8
6389: NOT
6390: IFFALSE 6402
// k := array ;
6392: LD_ADDR_VAR 0 8
6396: PUSH
6397: LD_VAR 0 1
6401: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6402: LD_ADDR_VAR 0 10
6406: PUSH
6407: LD_VAR 0 10
6411: PPUSH
6412: LD_VAR 0 8
6416: PPUSH
6417: LD_VAR 0 1
6421: PUSH
6422: LD_VAR 0 7
6426: ARRAY
6427: PPUSH
6428: CALL_OW 1
6432: ST_TO_ADDR
// end ;
6433: GO 6346
6435: POP
6436: POP
// array := tmp ;
6437: LD_ADDR_VAR 0 1
6441: PUSH
6442: LD_VAR 0 10
6446: ST_TO_ADDR
// end ;
6447: GO 6328
6449: POP
6450: POP
// result := array ;
6451: LD_ADDR_VAR 0 5
6455: PUSH
6456: LD_VAR 0 1
6460: ST_TO_ADDR
// end ;
6461: LD_VAR 0 5
6465: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6466: LD_INT 0
6468: PPUSH
6469: PPUSH
// result := 0 ;
6470: LD_ADDR_VAR 0 3
6474: PUSH
6475: LD_INT 0
6477: ST_TO_ADDR
// if not array or not value in array then
6478: LD_VAR 0 1
6482: NOT
6483: PUSH
6484: LD_VAR 0 2
6488: PUSH
6489: LD_VAR 0 1
6493: IN
6494: NOT
6495: OR
6496: IFFALSE 6500
// exit ;
6498: GO 6554
// for i = 1 to array do
6500: LD_ADDR_VAR 0 4
6504: PUSH
6505: DOUBLE
6506: LD_INT 1
6508: DEC
6509: ST_TO_ADDR
6510: LD_VAR 0 1
6514: PUSH
6515: FOR_TO
6516: IFFALSE 6552
// if value = array [ i ] then
6518: LD_VAR 0 2
6522: PUSH
6523: LD_VAR 0 1
6527: PUSH
6528: LD_VAR 0 4
6532: ARRAY
6533: EQUAL
6534: IFFALSE 6550
// begin result := i ;
6536: LD_ADDR_VAR 0 3
6540: PUSH
6541: LD_VAR 0 4
6545: ST_TO_ADDR
// exit ;
6546: POP
6547: POP
6548: GO 6554
// end ;
6550: GO 6515
6552: POP
6553: POP
// end ;
6554: LD_VAR 0 3
6558: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6559: LD_INT 0
6561: PPUSH
// vc_chassis := chassis ;
6562: LD_ADDR_OWVAR 37
6566: PUSH
6567: LD_VAR 0 1
6571: ST_TO_ADDR
// vc_engine := engine ;
6572: LD_ADDR_OWVAR 39
6576: PUSH
6577: LD_VAR 0 2
6581: ST_TO_ADDR
// vc_control := control ;
6582: LD_ADDR_OWVAR 38
6586: PUSH
6587: LD_VAR 0 3
6591: ST_TO_ADDR
// vc_weapon := weapon ;
6592: LD_ADDR_OWVAR 40
6596: PUSH
6597: LD_VAR 0 4
6601: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6602: LD_ADDR_OWVAR 41
6606: PUSH
6607: LD_VAR 0 5
6611: ST_TO_ADDR
// end ;
6612: LD_VAR 0 6
6616: RET
// export function WantPlant ( unit ) ; var task ; begin
6617: LD_INT 0
6619: PPUSH
6620: PPUSH
// result := false ;
6621: LD_ADDR_VAR 0 2
6625: PUSH
6626: LD_INT 0
6628: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6629: LD_ADDR_VAR 0 3
6633: PUSH
6634: LD_VAR 0 1
6638: PPUSH
6639: CALL_OW 437
6643: ST_TO_ADDR
// if task then
6644: LD_VAR 0 3
6648: IFFALSE 6676
// if task [ 1 ] [ 1 ] = p then
6650: LD_VAR 0 3
6654: PUSH
6655: LD_INT 1
6657: ARRAY
6658: PUSH
6659: LD_INT 1
6661: ARRAY
6662: PUSH
6663: LD_STRING p
6665: EQUAL
6666: IFFALSE 6676
// result := true ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: LD_INT 1
6675: ST_TO_ADDR
// end ;
6676: LD_VAR 0 2
6680: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6681: LD_INT 0
6683: PPUSH
6684: PPUSH
6685: PPUSH
6686: PPUSH
// if pos < 1 then
6687: LD_VAR 0 2
6691: PUSH
6692: LD_INT 1
6694: LESS
6695: IFFALSE 6699
// exit ;
6697: GO 7002
// if pos = 1 then
6699: LD_VAR 0 2
6703: PUSH
6704: LD_INT 1
6706: EQUAL
6707: IFFALSE 6740
// result := Replace ( arr , pos [ 1 ] , value ) else
6709: LD_ADDR_VAR 0 4
6713: PUSH
6714: LD_VAR 0 1
6718: PPUSH
6719: LD_VAR 0 2
6723: PUSH
6724: LD_INT 1
6726: ARRAY
6727: PPUSH
6728: LD_VAR 0 3
6732: PPUSH
6733: CALL_OW 1
6737: ST_TO_ADDR
6738: GO 7002
// begin tmp := arr ;
6740: LD_ADDR_VAR 0 6
6744: PUSH
6745: LD_VAR 0 1
6749: ST_TO_ADDR
// s_arr := [ tmp ] ;
6750: LD_ADDR_VAR 0 7
6754: PUSH
6755: LD_VAR 0 6
6759: PUSH
6760: EMPTY
6761: LIST
6762: ST_TO_ADDR
// for i = 1 to pos - 1 do
6763: LD_ADDR_VAR 0 5
6767: PUSH
6768: DOUBLE
6769: LD_INT 1
6771: DEC
6772: ST_TO_ADDR
6773: LD_VAR 0 2
6777: PUSH
6778: LD_INT 1
6780: MINUS
6781: PUSH
6782: FOR_TO
6783: IFFALSE 6828
// begin tmp := tmp [ pos [ i ] ] ;
6785: LD_ADDR_VAR 0 6
6789: PUSH
6790: LD_VAR 0 6
6794: PUSH
6795: LD_VAR 0 2
6799: PUSH
6800: LD_VAR 0 5
6804: ARRAY
6805: ARRAY
6806: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6807: LD_ADDR_VAR 0 7
6811: PUSH
6812: LD_VAR 0 7
6816: PUSH
6817: LD_VAR 0 6
6821: PUSH
6822: EMPTY
6823: LIST
6824: ADD
6825: ST_TO_ADDR
// end ;
6826: GO 6782
6828: POP
6829: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6830: LD_ADDR_VAR 0 6
6834: PUSH
6835: LD_VAR 0 6
6839: PPUSH
6840: LD_VAR 0 2
6844: PUSH
6845: LD_VAR 0 2
6849: ARRAY
6850: PPUSH
6851: LD_VAR 0 3
6855: PPUSH
6856: CALL_OW 1
6860: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6861: LD_ADDR_VAR 0 7
6865: PUSH
6866: LD_VAR 0 7
6870: PPUSH
6871: LD_VAR 0 7
6875: PPUSH
6876: LD_VAR 0 6
6880: PPUSH
6881: CALL_OW 1
6885: ST_TO_ADDR
// for i = s_arr downto 2 do
6886: LD_ADDR_VAR 0 5
6890: PUSH
6891: DOUBLE
6892: LD_VAR 0 7
6896: INC
6897: ST_TO_ADDR
6898: LD_INT 2
6900: PUSH
6901: FOR_DOWNTO
6902: IFFALSE 6986
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6904: LD_ADDR_VAR 0 6
6908: PUSH
6909: LD_VAR 0 7
6913: PUSH
6914: LD_VAR 0 5
6918: PUSH
6919: LD_INT 1
6921: MINUS
6922: ARRAY
6923: PPUSH
6924: LD_VAR 0 2
6928: PUSH
6929: LD_VAR 0 5
6933: PUSH
6934: LD_INT 1
6936: MINUS
6937: ARRAY
6938: PPUSH
6939: LD_VAR 0 7
6943: PUSH
6944: LD_VAR 0 5
6948: ARRAY
6949: PPUSH
6950: CALL_OW 1
6954: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6955: LD_ADDR_VAR 0 7
6959: PUSH
6960: LD_VAR 0 7
6964: PPUSH
6965: LD_VAR 0 5
6969: PUSH
6970: LD_INT 1
6972: MINUS
6973: PPUSH
6974: LD_VAR 0 6
6978: PPUSH
6979: CALL_OW 1
6983: ST_TO_ADDR
// end ;
6984: GO 6901
6986: POP
6987: POP
// result := s_arr [ 1 ] ;
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: LD_VAR 0 7
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: ST_TO_ADDR
// end ; end ;
7002: LD_VAR 0 4
7006: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7007: LD_INT 0
7009: PPUSH
7010: PPUSH
// if not list then
7011: LD_VAR 0 1
7015: NOT
7016: IFFALSE 7020
// exit ;
7018: GO 7111
// i := list [ pos1 ] ;
7020: LD_ADDR_VAR 0 5
7024: PUSH
7025: LD_VAR 0 1
7029: PUSH
7030: LD_VAR 0 2
7034: ARRAY
7035: ST_TO_ADDR
// if not i then
7036: LD_VAR 0 5
7040: NOT
7041: IFFALSE 7045
// exit ;
7043: GO 7111
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7045: LD_ADDR_VAR 0 1
7049: PUSH
7050: LD_VAR 0 1
7054: PPUSH
7055: LD_VAR 0 2
7059: PPUSH
7060: LD_VAR 0 1
7064: PUSH
7065: LD_VAR 0 3
7069: ARRAY
7070: PPUSH
7071: CALL_OW 1
7075: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7076: LD_ADDR_VAR 0 1
7080: PUSH
7081: LD_VAR 0 1
7085: PPUSH
7086: LD_VAR 0 3
7090: PPUSH
7091: LD_VAR 0 5
7095: PPUSH
7096: CALL_OW 1
7100: ST_TO_ADDR
// result := list ;
7101: LD_ADDR_VAR 0 4
7105: PUSH
7106: LD_VAR 0 1
7110: ST_TO_ADDR
// end ;
7111: LD_VAR 0 4
7115: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7116: LD_INT 0
7118: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7119: LD_ADDR_VAR 0 5
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 250
7133: PPUSH
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 251
7143: PPUSH
7144: LD_VAR 0 2
7148: PPUSH
7149: LD_VAR 0 3
7153: PPUSH
7154: LD_VAR 0 4
7158: PPUSH
7159: CALL 7537 0 5
7163: ST_TO_ADDR
// end ;
7164: LD_VAR 0 5
7168: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7169: LD_INT 0
7171: PPUSH
7172: PPUSH
7173: PPUSH
7174: PPUSH
// if not list or not unit then
7175: LD_VAR 0 2
7179: NOT
7180: PUSH
7181: LD_VAR 0 1
7185: NOT
7186: OR
7187: IFFALSE 7191
// exit ;
7189: GO 7532
// result := [ ] ;
7191: LD_ADDR_VAR 0 5
7195: PUSH
7196: EMPTY
7197: ST_TO_ADDR
// for i in list do
7198: LD_ADDR_VAR 0 6
7202: PUSH
7203: LD_VAR 0 2
7207: PUSH
7208: FOR_IN
7209: IFFALSE 7427
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7211: LD_ADDR_VAR 0 8
7215: PUSH
7216: LD_VAR 0 1
7220: PPUSH
7221: LD_VAR 0 6
7225: PUSH
7226: LD_INT 1
7228: ARRAY
7229: PPUSH
7230: LD_VAR 0 6
7234: PUSH
7235: LD_INT 2
7237: ARRAY
7238: PPUSH
7239: CALL_OW 297
7243: ST_TO_ADDR
// if not Count ( result ) then
7244: LD_VAR 0 5
7248: PPUSH
7249: CALL 3821 0 1
7253: NOT
7254: IFFALSE 7287
// begin result := Join ( result , [ i , tmp ] ) ;
7256: LD_ADDR_VAR 0 5
7260: PUSH
7261: LD_VAR 0 5
7265: PPUSH
7266: LD_VAR 0 6
7270: PUSH
7271: LD_VAR 0 8
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL 39430 0 2
7284: ST_TO_ADDR
// continue ;
7285: GO 7208
// end ; if result [ result ] [ 2 ] <= tmp then
7287: LD_VAR 0 5
7291: PUSH
7292: LD_VAR 0 5
7296: ARRAY
7297: PUSH
7298: LD_INT 2
7300: ARRAY
7301: PUSH
7302: LD_VAR 0 8
7306: LESSEQUAL
7307: IFFALSE 7340
// result := Join ( result , [ i , tmp ] ) else
7309: LD_ADDR_VAR 0 5
7313: PUSH
7314: LD_VAR 0 5
7318: PPUSH
7319: LD_VAR 0 6
7323: PUSH
7324: LD_VAR 0 8
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PPUSH
7333: CALL 39430 0 2
7337: ST_TO_ADDR
7338: GO 7425
// begin for j := 1 to Count ( result ) do
7340: LD_ADDR_VAR 0 7
7344: PUSH
7345: DOUBLE
7346: LD_INT 1
7348: DEC
7349: ST_TO_ADDR
7350: LD_VAR 0 5
7354: PPUSH
7355: CALL 3821 0 1
7359: PUSH
7360: FOR_TO
7361: IFFALSE 7423
// begin if tmp < result [ j ] [ 2 ] then
7363: LD_VAR 0 8
7367: PUSH
7368: LD_VAR 0 5
7372: PUSH
7373: LD_VAR 0 7
7377: ARRAY
7378: PUSH
7379: LD_INT 2
7381: ARRAY
7382: LESS
7383: IFFALSE 7421
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7385: LD_ADDR_VAR 0 5
7389: PUSH
7390: LD_VAR 0 5
7394: PPUSH
7395: LD_VAR 0 7
7399: PPUSH
7400: LD_VAR 0 6
7404: PUSH
7405: LD_VAR 0 8
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PPUSH
7414: CALL_OW 2
7418: ST_TO_ADDR
// break ;
7419: GO 7423
// end ; end ;
7421: GO 7360
7423: POP
7424: POP
// end ; end ;
7425: GO 7208
7427: POP
7428: POP
// if result and not asc then
7429: LD_VAR 0 5
7433: PUSH
7434: LD_VAR 0 3
7438: NOT
7439: AND
7440: IFFALSE 7457
// result := ReverseArray ( result ) ;
7442: LD_ADDR_VAR 0 5
7446: PUSH
7447: LD_VAR 0 5
7451: PPUSH
7452: CALL 34697 0 1
7456: ST_TO_ADDR
// tmp := [ ] ;
7457: LD_ADDR_VAR 0 8
7461: PUSH
7462: EMPTY
7463: ST_TO_ADDR
// if mode then
7464: LD_VAR 0 4
7468: IFFALSE 7532
// begin for i := 1 to result do
7470: LD_ADDR_VAR 0 6
7474: PUSH
7475: DOUBLE
7476: LD_INT 1
7478: DEC
7479: ST_TO_ADDR
7480: LD_VAR 0 5
7484: PUSH
7485: FOR_TO
7486: IFFALSE 7520
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7488: LD_ADDR_VAR 0 8
7492: PUSH
7493: LD_VAR 0 8
7497: PPUSH
7498: LD_VAR 0 5
7502: PUSH
7503: LD_VAR 0 6
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: ARRAY
7512: PPUSH
7513: CALL 39430 0 2
7517: ST_TO_ADDR
7518: GO 7485
7520: POP
7521: POP
// result := tmp ;
7522: LD_ADDR_VAR 0 5
7526: PUSH
7527: LD_VAR 0 8
7531: ST_TO_ADDR
// end ; end ;
7532: LD_VAR 0 5
7536: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7537: LD_INT 0
7539: PPUSH
7540: PPUSH
7541: PPUSH
7542: PPUSH
// if not list then
7543: LD_VAR 0 3
7547: NOT
7548: IFFALSE 7552
// exit ;
7550: GO 7940
// result := [ ] ;
7552: LD_ADDR_VAR 0 6
7556: PUSH
7557: EMPTY
7558: ST_TO_ADDR
// for i in list do
7559: LD_ADDR_VAR 0 7
7563: PUSH
7564: LD_VAR 0 3
7568: PUSH
7569: FOR_IN
7570: IFFALSE 7772
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7572: LD_ADDR_VAR 0 9
7576: PUSH
7577: LD_VAR 0 7
7581: PPUSH
7582: LD_VAR 0 1
7586: PPUSH
7587: LD_VAR 0 2
7591: PPUSH
7592: CALL_OW 297
7596: ST_TO_ADDR
// if not result then
7597: LD_VAR 0 6
7601: NOT
7602: IFFALSE 7628
// result := [ [ i , tmp ] ] else
7604: LD_ADDR_VAR 0 6
7608: PUSH
7609: LD_VAR 0 7
7613: PUSH
7614: LD_VAR 0 9
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: EMPTY
7624: LIST
7625: ST_TO_ADDR
7626: GO 7770
// begin if result [ result ] [ 2 ] <= tmp then
7628: LD_VAR 0 6
7632: PUSH
7633: LD_VAR 0 6
7637: ARRAY
7638: PUSH
7639: LD_INT 2
7641: ARRAY
7642: PUSH
7643: LD_VAR 0 9
7647: LESSEQUAL
7648: IFFALSE 7690
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7650: LD_ADDR_VAR 0 6
7654: PUSH
7655: LD_VAR 0 6
7659: PPUSH
7660: LD_VAR 0 6
7664: PUSH
7665: LD_INT 1
7667: PLUS
7668: PPUSH
7669: LD_VAR 0 7
7673: PUSH
7674: LD_VAR 0 9
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PPUSH
7683: CALL_OW 2
7687: ST_TO_ADDR
7688: GO 7770
// for j := 1 to result do
7690: LD_ADDR_VAR 0 8
7694: PUSH
7695: DOUBLE
7696: LD_INT 1
7698: DEC
7699: ST_TO_ADDR
7700: LD_VAR 0 6
7704: PUSH
7705: FOR_TO
7706: IFFALSE 7768
// begin if tmp < result [ j ] [ 2 ] then
7708: LD_VAR 0 9
7712: PUSH
7713: LD_VAR 0 6
7717: PUSH
7718: LD_VAR 0 8
7722: ARRAY
7723: PUSH
7724: LD_INT 2
7726: ARRAY
7727: LESS
7728: IFFALSE 7766
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7730: LD_ADDR_VAR 0 6
7734: PUSH
7735: LD_VAR 0 6
7739: PPUSH
7740: LD_VAR 0 8
7744: PPUSH
7745: LD_VAR 0 7
7749: PUSH
7750: LD_VAR 0 9
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PPUSH
7759: CALL_OW 2
7763: ST_TO_ADDR
// break ;
7764: GO 7768
// end ; end ;
7766: GO 7705
7768: POP
7769: POP
// end ; end ;
7770: GO 7569
7772: POP
7773: POP
// if result and not asc then
7774: LD_VAR 0 6
7778: PUSH
7779: LD_VAR 0 4
7783: NOT
7784: AND
7785: IFFALSE 7860
// begin tmp := result ;
7787: LD_ADDR_VAR 0 9
7791: PUSH
7792: LD_VAR 0 6
7796: ST_TO_ADDR
// for i = tmp downto 1 do
7797: LD_ADDR_VAR 0 7
7801: PUSH
7802: DOUBLE
7803: LD_VAR 0 9
7807: INC
7808: ST_TO_ADDR
7809: LD_INT 1
7811: PUSH
7812: FOR_DOWNTO
7813: IFFALSE 7858
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7815: LD_ADDR_VAR 0 6
7819: PUSH
7820: LD_VAR 0 6
7824: PPUSH
7825: LD_VAR 0 9
7829: PUSH
7830: LD_VAR 0 7
7834: MINUS
7835: PUSH
7836: LD_INT 1
7838: PLUS
7839: PPUSH
7840: LD_VAR 0 9
7844: PUSH
7845: LD_VAR 0 7
7849: ARRAY
7850: PPUSH
7851: CALL_OW 1
7855: ST_TO_ADDR
7856: GO 7812
7858: POP
7859: POP
// end ; tmp := [ ] ;
7860: LD_ADDR_VAR 0 9
7864: PUSH
7865: EMPTY
7866: ST_TO_ADDR
// if mode then
7867: LD_VAR 0 5
7871: IFFALSE 7940
// begin for i = 1 to result do
7873: LD_ADDR_VAR 0 7
7877: PUSH
7878: DOUBLE
7879: LD_INT 1
7881: DEC
7882: ST_TO_ADDR
7883: LD_VAR 0 6
7887: PUSH
7888: FOR_TO
7889: IFFALSE 7928
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7891: LD_ADDR_VAR 0 9
7895: PUSH
7896: LD_VAR 0 9
7900: PPUSH
7901: LD_VAR 0 7
7905: PPUSH
7906: LD_VAR 0 6
7910: PUSH
7911: LD_VAR 0 7
7915: ARRAY
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: CALL_OW 1
7925: ST_TO_ADDR
7926: GO 7888
7928: POP
7929: POP
// result := tmp ;
7930: LD_ADDR_VAR 0 6
7934: PUSH
7935: LD_VAR 0 9
7939: ST_TO_ADDR
// end ; end ;
7940: LD_VAR 0 6
7944: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7945: LD_INT 0
7947: PPUSH
7948: PPUSH
7949: PPUSH
7950: PPUSH
7951: PPUSH
7952: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7953: LD_ADDR_VAR 0 5
7957: PUSH
7958: LD_INT 0
7960: PUSH
7961: LD_INT 0
7963: PUSH
7964: LD_INT 0
7966: PUSH
7967: EMPTY
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: ST_TO_ADDR
// if not x or not y then
7975: LD_VAR 0 2
7979: NOT
7980: PUSH
7981: LD_VAR 0 3
7985: NOT
7986: OR
7987: IFFALSE 7991
// exit ;
7989: GO 9641
// if not range then
7991: LD_VAR 0 4
7995: NOT
7996: IFFALSE 8006
// range := 10 ;
7998: LD_ADDR_VAR 0 4
8002: PUSH
8003: LD_INT 10
8005: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8006: LD_ADDR_VAR 0 8
8010: PUSH
8011: LD_INT 81
8013: PUSH
8014: LD_VAR 0 1
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 92
8025: PUSH
8026: LD_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: LD_VAR 0 4
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 3
8049: PUSH
8050: LD_INT 21
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: PPUSH
8069: CALL_OW 69
8073: ST_TO_ADDR
// if not tmp then
8074: LD_VAR 0 8
8078: NOT
8079: IFFALSE 8083
// exit ;
8081: GO 9641
// for i in tmp do
8083: LD_ADDR_VAR 0 6
8087: PUSH
8088: LD_VAR 0 8
8092: PUSH
8093: FOR_IN
8094: IFFALSE 9616
// begin points := [ 0 , 0 , 0 ] ;
8096: LD_ADDR_VAR 0 9
8100: PUSH
8101: LD_INT 0
8103: PUSH
8104: LD_INT 0
8106: PUSH
8107: LD_INT 0
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: ST_TO_ADDR
// bpoints := 1 ;
8115: LD_ADDR_VAR 0 10
8119: PUSH
8120: LD_INT 1
8122: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8123: LD_VAR 0 6
8127: PPUSH
8128: CALL_OW 247
8132: PUSH
8133: LD_INT 1
8135: DOUBLE
8136: EQUAL
8137: IFTRUE 8141
8139: GO 8719
8141: POP
// begin if GetClass ( i ) = 1 then
8142: LD_VAR 0 6
8146: PPUSH
8147: CALL_OW 257
8151: PUSH
8152: LD_INT 1
8154: EQUAL
8155: IFFALSE 8176
// points := [ 10 , 5 , 3 ] ;
8157: LD_ADDR_VAR 0 9
8161: PUSH
8162: LD_INT 10
8164: PUSH
8165: LD_INT 5
8167: PUSH
8168: LD_INT 3
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8176: LD_VAR 0 6
8180: PPUSH
8181: CALL_OW 257
8185: PUSH
8186: LD_INT 2
8188: PUSH
8189: LD_INT 3
8191: PUSH
8192: LD_INT 4
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: IN
8200: IFFALSE 8221
// points := [ 3 , 2 , 1 ] ;
8202: LD_ADDR_VAR 0 9
8206: PUSH
8207: LD_INT 3
8209: PUSH
8210: LD_INT 2
8212: PUSH
8213: LD_INT 1
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8221: LD_VAR 0 6
8225: PPUSH
8226: CALL_OW 257
8230: PUSH
8231: LD_INT 5
8233: EQUAL
8234: IFFALSE 8255
// points := [ 130 , 5 , 2 ] ;
8236: LD_ADDR_VAR 0 9
8240: PUSH
8241: LD_INT 130
8243: PUSH
8244: LD_INT 5
8246: PUSH
8247: LD_INT 2
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8255: LD_VAR 0 6
8259: PPUSH
8260: CALL_OW 257
8264: PUSH
8265: LD_INT 8
8267: EQUAL
8268: IFFALSE 8289
// points := [ 35 , 35 , 30 ] ;
8270: LD_ADDR_VAR 0 9
8274: PUSH
8275: LD_INT 35
8277: PUSH
8278: LD_INT 35
8280: PUSH
8281: LD_INT 30
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8289: LD_VAR 0 6
8293: PPUSH
8294: CALL_OW 257
8298: PUSH
8299: LD_INT 9
8301: EQUAL
8302: IFFALSE 8323
// points := [ 20 , 55 , 40 ] ;
8304: LD_ADDR_VAR 0 9
8308: PUSH
8309: LD_INT 20
8311: PUSH
8312: LD_INT 55
8314: PUSH
8315: LD_INT 40
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8323: LD_VAR 0 6
8327: PPUSH
8328: CALL_OW 257
8332: PUSH
8333: LD_INT 12
8335: PUSH
8336: LD_INT 16
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: IN
8343: IFFALSE 8364
// points := [ 5 , 3 , 2 ] ;
8345: LD_ADDR_VAR 0 9
8349: PUSH
8350: LD_INT 5
8352: PUSH
8353: LD_INT 3
8355: PUSH
8356: LD_INT 2
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8364: LD_VAR 0 6
8368: PPUSH
8369: CALL_OW 257
8373: PUSH
8374: LD_INT 17
8376: EQUAL
8377: IFFALSE 8398
// points := [ 100 , 50 , 75 ] ;
8379: LD_ADDR_VAR 0 9
8383: PUSH
8384: LD_INT 100
8386: PUSH
8387: LD_INT 50
8389: PUSH
8390: LD_INT 75
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: LIST
8397: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8398: LD_VAR 0 6
8402: PPUSH
8403: CALL_OW 257
8407: PUSH
8408: LD_INT 15
8410: EQUAL
8411: IFFALSE 8432
// points := [ 10 , 5 , 3 ] ;
8413: LD_ADDR_VAR 0 9
8417: PUSH
8418: LD_INT 10
8420: PUSH
8421: LD_INT 5
8423: PUSH
8424: LD_INT 3
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8432: LD_VAR 0 6
8436: PPUSH
8437: CALL_OW 257
8441: PUSH
8442: LD_INT 14
8444: EQUAL
8445: IFFALSE 8466
// points := [ 10 , 0 , 0 ] ;
8447: LD_ADDR_VAR 0 9
8451: PUSH
8452: LD_INT 10
8454: PUSH
8455: LD_INT 0
8457: PUSH
8458: LD_INT 0
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8466: LD_VAR 0 6
8470: PPUSH
8471: CALL_OW 257
8475: PUSH
8476: LD_INT 11
8478: EQUAL
8479: IFFALSE 8500
// points := [ 30 , 10 , 5 ] ;
8481: LD_ADDR_VAR 0 9
8485: PUSH
8486: LD_INT 30
8488: PUSH
8489: LD_INT 10
8491: PUSH
8492: LD_INT 5
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8500: LD_VAR 0 1
8504: PPUSH
8505: LD_INT 5
8507: PPUSH
8508: CALL_OW 321
8512: PUSH
8513: LD_INT 2
8515: EQUAL
8516: IFFALSE 8533
// bpoints := bpoints * 1.8 ;
8518: LD_ADDR_VAR 0 10
8522: PUSH
8523: LD_VAR 0 10
8527: PUSH
8528: LD_REAL  1.80000000000000E+0000
8531: MUL
8532: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8533: LD_VAR 0 6
8537: PPUSH
8538: CALL_OW 257
8542: PUSH
8543: LD_INT 1
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: LD_INT 4
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: IN
8561: PUSH
8562: LD_VAR 0 1
8566: PPUSH
8567: LD_INT 51
8569: PPUSH
8570: CALL_OW 321
8574: PUSH
8575: LD_INT 2
8577: EQUAL
8578: AND
8579: IFFALSE 8596
// bpoints := bpoints * 1.2 ;
8581: LD_ADDR_VAR 0 10
8585: PUSH
8586: LD_VAR 0 10
8590: PUSH
8591: LD_REAL  1.20000000000000E+0000
8594: MUL
8595: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8596: LD_VAR 0 6
8600: PPUSH
8601: CALL_OW 257
8605: PUSH
8606: LD_INT 5
8608: PUSH
8609: LD_INT 7
8611: PUSH
8612: LD_INT 9
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: LIST
8619: IN
8620: PUSH
8621: LD_VAR 0 1
8625: PPUSH
8626: LD_INT 52
8628: PPUSH
8629: CALL_OW 321
8633: PUSH
8634: LD_INT 2
8636: EQUAL
8637: AND
8638: IFFALSE 8655
// bpoints := bpoints * 1.5 ;
8640: LD_ADDR_VAR 0 10
8644: PUSH
8645: LD_VAR 0 10
8649: PUSH
8650: LD_REAL  1.50000000000000E+0000
8653: MUL
8654: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8655: LD_VAR 0 1
8659: PPUSH
8660: LD_INT 66
8662: PPUSH
8663: CALL_OW 321
8667: PUSH
8668: LD_INT 2
8670: EQUAL
8671: IFFALSE 8688
// bpoints := bpoints * 1.1 ;
8673: LD_ADDR_VAR 0 10
8677: PUSH
8678: LD_VAR 0 10
8682: PUSH
8683: LD_REAL  1.10000000000000E+0000
8686: MUL
8687: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8688: LD_ADDR_VAR 0 10
8692: PUSH
8693: LD_VAR 0 10
8697: PUSH
8698: LD_VAR 0 6
8702: PPUSH
8703: LD_INT 1
8705: PPUSH
8706: CALL_OW 259
8710: PUSH
8711: LD_REAL  1.15000000000000E+0000
8714: MUL
8715: MUL
8716: ST_TO_ADDR
// end ; unit_vehicle :
8717: GO 9545
8719: LD_INT 2
8721: DOUBLE
8722: EQUAL
8723: IFTRUE 8727
8725: GO 9533
8727: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8728: LD_VAR 0 6
8732: PPUSH
8733: CALL_OW 264
8737: PUSH
8738: LD_INT 2
8740: PUSH
8741: LD_INT 42
8743: PUSH
8744: LD_INT 24
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: IN
8752: IFFALSE 8773
// points := [ 25 , 5 , 3 ] ;
8754: LD_ADDR_VAR 0 9
8758: PUSH
8759: LD_INT 25
8761: PUSH
8762: LD_INT 5
8764: PUSH
8765: LD_INT 3
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: LIST
8772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8773: LD_VAR 0 6
8777: PPUSH
8778: CALL_OW 264
8782: PUSH
8783: LD_INT 4
8785: PUSH
8786: LD_INT 43
8788: PUSH
8789: LD_INT 25
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: IN
8797: IFFALSE 8818
// points := [ 40 , 15 , 5 ] ;
8799: LD_ADDR_VAR 0 9
8803: PUSH
8804: LD_INT 40
8806: PUSH
8807: LD_INT 15
8809: PUSH
8810: LD_INT 5
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: LIST
8817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8818: LD_VAR 0 6
8822: PPUSH
8823: CALL_OW 264
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 23
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: IN
8838: IFFALSE 8859
// points := [ 7 , 25 , 8 ] ;
8840: LD_ADDR_VAR 0 9
8844: PUSH
8845: LD_INT 7
8847: PUSH
8848: LD_INT 25
8850: PUSH
8851: LD_INT 8
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8859: LD_VAR 0 6
8863: PPUSH
8864: CALL_OW 264
8868: PUSH
8869: LD_INT 5
8871: PUSH
8872: LD_INT 27
8874: PUSH
8875: LD_INT 44
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: IN
8883: IFFALSE 8904
// points := [ 14 , 50 , 16 ] ;
8885: LD_ADDR_VAR 0 9
8889: PUSH
8890: LD_INT 14
8892: PUSH
8893: LD_INT 50
8895: PUSH
8896: LD_INT 16
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8904: LD_VAR 0 6
8908: PPUSH
8909: CALL_OW 264
8913: PUSH
8914: LD_INT 6
8916: PUSH
8917: LD_INT 46
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: IN
8924: IFFALSE 8945
// points := [ 32 , 120 , 70 ] ;
8926: LD_ADDR_VAR 0 9
8930: PUSH
8931: LD_INT 32
8933: PUSH
8934: LD_INT 120
8936: PUSH
8937: LD_INT 70
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8945: LD_VAR 0 6
8949: PPUSH
8950: CALL_OW 264
8954: PUSH
8955: LD_INT 7
8957: PUSH
8958: LD_INT 28
8960: PUSH
8961: LD_INT 45
8963: PUSH
8964: LD_INT 92
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: IN
8973: IFFALSE 8994
// points := [ 35 , 20 , 45 ] ;
8975: LD_ADDR_VAR 0 9
8979: PUSH
8980: LD_INT 35
8982: PUSH
8983: LD_INT 20
8985: PUSH
8986: LD_INT 45
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8994: LD_VAR 0 6
8998: PPUSH
8999: CALL_OW 264
9003: PUSH
9004: LD_INT 47
9006: PUSH
9007: EMPTY
9008: LIST
9009: IN
9010: IFFALSE 9031
// points := [ 67 , 45 , 75 ] ;
9012: LD_ADDR_VAR 0 9
9016: PUSH
9017: LD_INT 67
9019: PUSH
9020: LD_INT 45
9022: PUSH
9023: LD_INT 75
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: LIST
9030: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9031: LD_VAR 0 6
9035: PPUSH
9036: CALL_OW 264
9040: PUSH
9041: LD_INT 26
9043: PUSH
9044: EMPTY
9045: LIST
9046: IN
9047: IFFALSE 9068
// points := [ 120 , 30 , 80 ] ;
9049: LD_ADDR_VAR 0 9
9053: PUSH
9054: LD_INT 120
9056: PUSH
9057: LD_INT 30
9059: PUSH
9060: LD_INT 80
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: LIST
9067: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9068: LD_VAR 0 6
9072: PPUSH
9073: CALL_OW 264
9077: PUSH
9078: LD_INT 22
9080: PUSH
9081: EMPTY
9082: LIST
9083: IN
9084: IFFALSE 9105
// points := [ 40 , 1 , 1 ] ;
9086: LD_ADDR_VAR 0 9
9090: PUSH
9091: LD_INT 40
9093: PUSH
9094: LD_INT 1
9096: PUSH
9097: LD_INT 1
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: LIST
9104: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9105: LD_VAR 0 6
9109: PPUSH
9110: CALL_OW 264
9114: PUSH
9115: LD_INT 29
9117: PUSH
9118: EMPTY
9119: LIST
9120: IN
9121: IFFALSE 9142
// points := [ 70 , 200 , 400 ] ;
9123: LD_ADDR_VAR 0 9
9127: PUSH
9128: LD_INT 70
9130: PUSH
9131: LD_INT 200
9133: PUSH
9134: LD_INT 400
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9142: LD_VAR 0 6
9146: PPUSH
9147: CALL_OW 264
9151: PUSH
9152: LD_INT 14
9154: PUSH
9155: LD_INT 53
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: IN
9162: IFFALSE 9183
// points := [ 40 , 10 , 20 ] ;
9164: LD_ADDR_VAR 0 9
9168: PUSH
9169: LD_INT 40
9171: PUSH
9172: LD_INT 10
9174: PUSH
9175: LD_INT 20
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: LIST
9182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9183: LD_VAR 0 6
9187: PPUSH
9188: CALL_OW 264
9192: PUSH
9193: LD_INT 9
9195: PUSH
9196: EMPTY
9197: LIST
9198: IN
9199: IFFALSE 9220
// points := [ 5 , 70 , 20 ] ;
9201: LD_ADDR_VAR 0 9
9205: PUSH
9206: LD_INT 5
9208: PUSH
9209: LD_INT 70
9211: PUSH
9212: LD_INT 20
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: LIST
9219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9220: LD_VAR 0 6
9224: PPUSH
9225: CALL_OW 264
9229: PUSH
9230: LD_INT 10
9232: PUSH
9233: EMPTY
9234: LIST
9235: IN
9236: IFFALSE 9257
// points := [ 35 , 110 , 70 ] ;
9238: LD_ADDR_VAR 0 9
9242: PUSH
9243: LD_INT 35
9245: PUSH
9246: LD_INT 110
9248: PUSH
9249: LD_INT 70
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9257: LD_VAR 0 6
9261: PPUSH
9262: CALL_OW 265
9266: PUSH
9267: LD_INT 25
9269: EQUAL
9270: IFFALSE 9291
// points := [ 80 , 65 , 100 ] ;
9272: LD_ADDR_VAR 0 9
9276: PUSH
9277: LD_INT 80
9279: PUSH
9280: LD_INT 65
9282: PUSH
9283: LD_INT 100
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9291: LD_VAR 0 6
9295: PPUSH
9296: CALL_OW 263
9300: PUSH
9301: LD_INT 1
9303: EQUAL
9304: IFFALSE 9339
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9306: LD_ADDR_VAR 0 10
9310: PUSH
9311: LD_VAR 0 10
9315: PUSH
9316: LD_VAR 0 6
9320: PPUSH
9321: CALL_OW 311
9325: PPUSH
9326: LD_INT 3
9328: PPUSH
9329: CALL_OW 259
9333: PUSH
9334: LD_INT 4
9336: MUL
9337: MUL
9338: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9339: LD_VAR 0 6
9343: PPUSH
9344: CALL_OW 263
9348: PUSH
9349: LD_INT 2
9351: EQUAL
9352: IFFALSE 9403
// begin j := IsControledBy ( i ) ;
9354: LD_ADDR_VAR 0 7
9358: PUSH
9359: LD_VAR 0 6
9363: PPUSH
9364: CALL_OW 312
9368: ST_TO_ADDR
// if j then
9369: LD_VAR 0 7
9373: IFFALSE 9403
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9375: LD_ADDR_VAR 0 10
9379: PUSH
9380: LD_VAR 0 10
9384: PUSH
9385: LD_VAR 0 7
9389: PPUSH
9390: LD_INT 3
9392: PPUSH
9393: CALL_OW 259
9397: PUSH
9398: LD_INT 3
9400: MUL
9401: MUL
9402: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9403: LD_VAR 0 6
9407: PPUSH
9408: CALL_OW 264
9412: PUSH
9413: LD_INT 5
9415: PUSH
9416: LD_INT 6
9418: PUSH
9419: LD_INT 46
9421: PUSH
9422: LD_INT 44
9424: PUSH
9425: LD_INT 47
9427: PUSH
9428: LD_INT 45
9430: PUSH
9431: LD_INT 28
9433: PUSH
9434: LD_INT 7
9436: PUSH
9437: LD_INT 27
9439: PUSH
9440: LD_INT 29
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: IN
9455: PUSH
9456: LD_VAR 0 1
9460: PPUSH
9461: LD_INT 52
9463: PPUSH
9464: CALL_OW 321
9468: PUSH
9469: LD_INT 2
9471: EQUAL
9472: AND
9473: IFFALSE 9490
// bpoints := bpoints * 1.2 ;
9475: LD_ADDR_VAR 0 10
9479: PUSH
9480: LD_VAR 0 10
9484: PUSH
9485: LD_REAL  1.20000000000000E+0000
9488: MUL
9489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9490: LD_VAR 0 6
9494: PPUSH
9495: CALL_OW 264
9499: PUSH
9500: LD_INT 6
9502: PUSH
9503: LD_INT 46
9505: PUSH
9506: LD_INT 47
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: LIST
9513: IN
9514: IFFALSE 9531
// bpoints := bpoints * 1.2 ;
9516: LD_ADDR_VAR 0 10
9520: PUSH
9521: LD_VAR 0 10
9525: PUSH
9526: LD_REAL  1.20000000000000E+0000
9529: MUL
9530: ST_TO_ADDR
// end ; unit_building :
9531: GO 9545
9533: LD_INT 3
9535: DOUBLE
9536: EQUAL
9537: IFTRUE 9541
9539: GO 9544
9541: POP
// ; end ;
9542: GO 9545
9544: POP
// for j = 1 to 3 do
9545: LD_ADDR_VAR 0 7
9549: PUSH
9550: DOUBLE
9551: LD_INT 1
9553: DEC
9554: ST_TO_ADDR
9555: LD_INT 3
9557: PUSH
9558: FOR_TO
9559: IFFALSE 9612
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9561: LD_ADDR_VAR 0 5
9565: PUSH
9566: LD_VAR 0 5
9570: PPUSH
9571: LD_VAR 0 7
9575: PPUSH
9576: LD_VAR 0 5
9580: PUSH
9581: LD_VAR 0 7
9585: ARRAY
9586: PUSH
9587: LD_VAR 0 9
9591: PUSH
9592: LD_VAR 0 7
9596: ARRAY
9597: PUSH
9598: LD_VAR 0 10
9602: MUL
9603: PLUS
9604: PPUSH
9605: CALL_OW 1
9609: ST_TO_ADDR
9610: GO 9558
9612: POP
9613: POP
// end ;
9614: GO 8093
9616: POP
9617: POP
// result := Replace ( result , 4 , tmp ) ;
9618: LD_ADDR_VAR 0 5
9622: PUSH
9623: LD_VAR 0 5
9627: PPUSH
9628: LD_INT 4
9630: PPUSH
9631: LD_VAR 0 8
9635: PPUSH
9636: CALL_OW 1
9640: ST_TO_ADDR
// end ;
9641: LD_VAR 0 5
9645: RET
// export function DangerAtRange ( unit , range ) ; begin
9646: LD_INT 0
9648: PPUSH
// if not unit then
9649: LD_VAR 0 1
9653: NOT
9654: IFFALSE 9658
// exit ;
9656: GO 9703
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9658: LD_ADDR_VAR 0 3
9662: PUSH
9663: LD_VAR 0 1
9667: PPUSH
9668: CALL_OW 255
9672: PPUSH
9673: LD_VAR 0 1
9677: PPUSH
9678: CALL_OW 250
9682: PPUSH
9683: LD_VAR 0 1
9687: PPUSH
9688: CALL_OW 251
9692: PPUSH
9693: LD_VAR 0 2
9697: PPUSH
9698: CALL 7945 0 4
9702: ST_TO_ADDR
// end ;
9703: LD_VAR 0 3
9707: RET
// export function DangerInArea ( side , area ) ; begin
9708: LD_INT 0
9710: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9711: LD_ADDR_VAR 0 3
9715: PUSH
9716: LD_VAR 0 2
9720: PPUSH
9721: LD_INT 81
9723: PUSH
9724: LD_VAR 0 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PPUSH
9733: CALL_OW 70
9737: ST_TO_ADDR
// end ;
9738: LD_VAR 0 3
9742: RET
// export function IsExtension ( b ) ; begin
9743: LD_INT 0
9745: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9746: LD_ADDR_VAR 0 2
9750: PUSH
9751: LD_VAR 0 1
9755: PUSH
9756: LD_INT 23
9758: PUSH
9759: LD_INT 20
9761: PUSH
9762: LD_INT 22
9764: PUSH
9765: LD_INT 17
9767: PUSH
9768: LD_INT 24
9770: PUSH
9771: LD_INT 21
9773: PUSH
9774: LD_INT 19
9776: PUSH
9777: LD_INT 16
9779: PUSH
9780: LD_INT 25
9782: PUSH
9783: LD_INT 18
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: IN
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 2
9803: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9804: LD_INT 0
9806: PPUSH
9807: PPUSH
9808: PPUSH
// result := [ ] ;
9809: LD_ADDR_VAR 0 4
9813: PUSH
9814: EMPTY
9815: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9816: LD_ADDR_VAR 0 5
9820: PUSH
9821: LD_VAR 0 2
9825: PPUSH
9826: LD_INT 21
9828: PUSH
9829: LD_INT 3
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PPUSH
9836: CALL_OW 70
9840: ST_TO_ADDR
// if not tmp then
9841: LD_VAR 0 5
9845: NOT
9846: IFFALSE 9850
// exit ;
9848: GO 9914
// if checkLink then
9850: LD_VAR 0 3
9854: IFFALSE 9904
// begin for i in tmp do
9856: LD_ADDR_VAR 0 6
9860: PUSH
9861: LD_VAR 0 5
9865: PUSH
9866: FOR_IN
9867: IFFALSE 9902
// if GetBase ( i ) <> base then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 274
9878: PUSH
9879: LD_VAR 0 1
9883: NONEQUAL
9884: IFFALSE 9900
// ComLinkToBase ( base , i ) ;
9886: LD_VAR 0 1
9890: PPUSH
9891: LD_VAR 0 6
9895: PPUSH
9896: CALL_OW 169
9900: GO 9866
9902: POP
9903: POP
// end ; result := tmp ;
9904: LD_ADDR_VAR 0 4
9908: PUSH
9909: LD_VAR 0 5
9913: ST_TO_ADDR
// end ;
9914: LD_VAR 0 4
9918: RET
// export function ComComplete ( units , b ) ; var i ; begin
9919: LD_INT 0
9921: PPUSH
9922: PPUSH
// if not units then
9923: LD_VAR 0 1
9927: NOT
9928: IFFALSE 9932
// exit ;
9930: GO 10022
// for i in units do
9932: LD_ADDR_VAR 0 4
9936: PUSH
9937: LD_VAR 0 1
9941: PUSH
9942: FOR_IN
9943: IFFALSE 10020
// if BuildingStatus ( b ) = bs_build then
9945: LD_VAR 0 2
9949: PPUSH
9950: CALL_OW 461
9954: PUSH
9955: LD_INT 1
9957: EQUAL
9958: IFFALSE 10018
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9960: LD_VAR 0 4
9964: PPUSH
9965: LD_STRING h
9967: PUSH
9968: LD_VAR 0 2
9972: PPUSH
9973: CALL_OW 250
9977: PUSH
9978: LD_VAR 0 2
9982: PPUSH
9983: CALL_OW 251
9987: PUSH
9988: LD_VAR 0 2
9992: PUSH
9993: LD_INT 0
9995: PUSH
9996: LD_INT 0
9998: PUSH
9999: LD_INT 0
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: PPUSH
10014: CALL_OW 446
10018: GO 9942
10020: POP
10021: POP
// end ;
10022: LD_VAR 0 3
10026: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10027: LD_INT 0
10029: PPUSH
10030: PPUSH
10031: PPUSH
10032: PPUSH
10033: PPUSH
10034: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10035: LD_VAR 0 1
10039: NOT
10040: PUSH
10041: LD_VAR 0 1
10045: PPUSH
10046: CALL_OW 263
10050: PUSH
10051: LD_INT 2
10053: NONEQUAL
10054: OR
10055: IFFALSE 10059
// exit ;
10057: GO 10375
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10059: LD_ADDR_VAR 0 6
10063: PUSH
10064: LD_INT 22
10066: PUSH
10067: LD_VAR 0 1
10071: PPUSH
10072: CALL_OW 255
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: LD_INT 30
10086: PUSH
10087: LD_INT 36
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: LD_INT 34
10096: PUSH
10097: LD_INT 31
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PPUSH
10113: CALL_OW 69
10117: ST_TO_ADDR
// if not tmp then
10118: LD_VAR 0 6
10122: NOT
10123: IFFALSE 10127
// exit ;
10125: GO 10375
// result := [ ] ;
10127: LD_ADDR_VAR 0 2
10131: PUSH
10132: EMPTY
10133: ST_TO_ADDR
// for i in tmp do
10134: LD_ADDR_VAR 0 3
10138: PUSH
10139: LD_VAR 0 6
10143: PUSH
10144: FOR_IN
10145: IFFALSE 10216
// begin t := UnitsInside ( i ) ;
10147: LD_ADDR_VAR 0 4
10151: PUSH
10152: LD_VAR 0 3
10156: PPUSH
10157: CALL_OW 313
10161: ST_TO_ADDR
// if t then
10162: LD_VAR 0 4
10166: IFFALSE 10214
// for j in t do
10168: LD_ADDR_VAR 0 7
10172: PUSH
10173: LD_VAR 0 4
10177: PUSH
10178: FOR_IN
10179: IFFALSE 10212
// result := Replace ( result , result + 1 , j ) ;
10181: LD_ADDR_VAR 0 2
10185: PUSH
10186: LD_VAR 0 2
10190: PPUSH
10191: LD_VAR 0 2
10195: PUSH
10196: LD_INT 1
10198: PLUS
10199: PPUSH
10200: LD_VAR 0 7
10204: PPUSH
10205: CALL_OW 1
10209: ST_TO_ADDR
10210: GO 10178
10212: POP
10213: POP
// end ;
10214: GO 10144
10216: POP
10217: POP
// if not result then
10218: LD_VAR 0 2
10222: NOT
10223: IFFALSE 10227
// exit ;
10225: GO 10375
// mech := result [ 1 ] ;
10227: LD_ADDR_VAR 0 5
10231: PUSH
10232: LD_VAR 0 2
10236: PUSH
10237: LD_INT 1
10239: ARRAY
10240: ST_TO_ADDR
// if result > 1 then
10241: LD_VAR 0 2
10245: PUSH
10246: LD_INT 1
10248: GREATER
10249: IFFALSE 10361
// begin for i = 2 to result do
10251: LD_ADDR_VAR 0 3
10255: PUSH
10256: DOUBLE
10257: LD_INT 2
10259: DEC
10260: ST_TO_ADDR
10261: LD_VAR 0 2
10265: PUSH
10266: FOR_TO
10267: IFFALSE 10359
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10269: LD_ADDR_VAR 0 4
10273: PUSH
10274: LD_VAR 0 2
10278: PUSH
10279: LD_VAR 0 3
10283: ARRAY
10284: PPUSH
10285: LD_INT 3
10287: PPUSH
10288: CALL_OW 259
10292: PUSH
10293: LD_VAR 0 2
10297: PUSH
10298: LD_VAR 0 3
10302: ARRAY
10303: PPUSH
10304: CALL_OW 432
10308: MINUS
10309: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10310: LD_VAR 0 4
10314: PUSH
10315: LD_VAR 0 5
10319: PPUSH
10320: LD_INT 3
10322: PPUSH
10323: CALL_OW 259
10327: PUSH
10328: LD_VAR 0 5
10332: PPUSH
10333: CALL_OW 432
10337: MINUS
10338: GREATEREQUAL
10339: IFFALSE 10357
// mech := result [ i ] ;
10341: LD_ADDR_VAR 0 5
10345: PUSH
10346: LD_VAR 0 2
10350: PUSH
10351: LD_VAR 0 3
10355: ARRAY
10356: ST_TO_ADDR
// end ;
10357: GO 10266
10359: POP
10360: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10361: LD_VAR 0 1
10365: PPUSH
10366: LD_VAR 0 5
10370: PPUSH
10371: CALL_OW 135
// end ;
10375: LD_VAR 0 2
10379: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10380: LD_INT 0
10382: PPUSH
10383: PPUSH
10384: PPUSH
10385: PPUSH
10386: PPUSH
10387: PPUSH
10388: PPUSH
10389: PPUSH
10390: PPUSH
10391: PPUSH
10392: PPUSH
10393: PPUSH
10394: PPUSH
// result := [ ] ;
10395: LD_ADDR_VAR 0 7
10399: PUSH
10400: EMPTY
10401: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10402: LD_VAR 0 1
10406: PPUSH
10407: CALL_OW 266
10411: PUSH
10412: LD_INT 0
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: IN
10422: NOT
10423: IFFALSE 10427
// exit ;
10425: GO 12061
// if name then
10427: LD_VAR 0 3
10431: IFFALSE 10447
// SetBName ( base_dep , name ) ;
10433: LD_VAR 0 1
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: CALL_OW 500
// base := GetBase ( base_dep ) ;
10447: LD_ADDR_VAR 0 15
10451: PUSH
10452: LD_VAR 0 1
10456: PPUSH
10457: CALL_OW 274
10461: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10462: LD_ADDR_VAR 0 16
10466: PUSH
10467: LD_VAR 0 1
10471: PPUSH
10472: CALL_OW 255
10476: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10477: LD_ADDR_VAR 0 17
10481: PUSH
10482: LD_VAR 0 1
10486: PPUSH
10487: CALL_OW 248
10491: ST_TO_ADDR
// if sources then
10492: LD_VAR 0 5
10496: IFFALSE 10543
// for i = 1 to 3 do
10498: LD_ADDR_VAR 0 8
10502: PUSH
10503: DOUBLE
10504: LD_INT 1
10506: DEC
10507: ST_TO_ADDR
10508: LD_INT 3
10510: PUSH
10511: FOR_TO
10512: IFFALSE 10541
// AddResourceType ( base , i , sources [ i ] ) ;
10514: LD_VAR 0 15
10518: PPUSH
10519: LD_VAR 0 8
10523: PPUSH
10524: LD_VAR 0 5
10528: PUSH
10529: LD_VAR 0 8
10533: ARRAY
10534: PPUSH
10535: CALL_OW 276
10539: GO 10511
10541: POP
10542: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10543: LD_ADDR_VAR 0 18
10547: PUSH
10548: LD_VAR 0 15
10552: PPUSH
10553: LD_VAR 0 2
10557: PPUSH
10558: LD_INT 1
10560: PPUSH
10561: CALL 9804 0 3
10565: ST_TO_ADDR
// InitHc ;
10566: CALL_OW 19
// InitUc ;
10570: CALL_OW 18
// uc_side := side ;
10574: LD_ADDR_OWVAR 20
10578: PUSH
10579: LD_VAR 0 16
10583: ST_TO_ADDR
// uc_nation := nation ;
10584: LD_ADDR_OWVAR 21
10588: PUSH
10589: LD_VAR 0 17
10593: ST_TO_ADDR
// if buildings then
10594: LD_VAR 0 18
10598: IFFALSE 11920
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10600: LD_ADDR_VAR 0 19
10604: PUSH
10605: LD_VAR 0 18
10609: PPUSH
10610: LD_INT 2
10612: PUSH
10613: LD_INT 30
10615: PUSH
10616: LD_INT 29
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 30
10625: PUSH
10626: LD_INT 30
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: LIST
10637: PPUSH
10638: CALL_OW 72
10642: ST_TO_ADDR
// if tmp then
10643: LD_VAR 0 19
10647: IFFALSE 10695
// for i in tmp do
10649: LD_ADDR_VAR 0 8
10653: PUSH
10654: LD_VAR 0 19
10658: PUSH
10659: FOR_IN
10660: IFFALSE 10693
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10662: LD_VAR 0 8
10666: PPUSH
10667: CALL_OW 250
10671: PPUSH
10672: LD_VAR 0 8
10676: PPUSH
10677: CALL_OW 251
10681: PPUSH
10682: LD_VAR 0 16
10686: PPUSH
10687: CALL_OW 441
10691: GO 10659
10693: POP
10694: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10695: LD_VAR 0 18
10699: PPUSH
10700: LD_INT 2
10702: PUSH
10703: LD_INT 30
10705: PUSH
10706: LD_INT 32
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 30
10715: PUSH
10716: LD_INT 33
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: LIST
10727: PPUSH
10728: CALL_OW 72
10732: IFFALSE 10820
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10734: LD_ADDR_VAR 0 8
10738: PUSH
10739: LD_VAR 0 18
10743: PPUSH
10744: LD_INT 2
10746: PUSH
10747: LD_INT 30
10749: PUSH
10750: LD_INT 32
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 30
10759: PUSH
10760: LD_INT 33
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: PPUSH
10772: CALL_OW 72
10776: PUSH
10777: FOR_IN
10778: IFFALSE 10818
// begin if not GetBWeapon ( i ) then
10780: LD_VAR 0 8
10784: PPUSH
10785: CALL_OW 269
10789: NOT
10790: IFFALSE 10816
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10792: LD_VAR 0 8
10796: PPUSH
10797: LD_VAR 0 8
10801: PPUSH
10802: LD_VAR 0 2
10806: PPUSH
10807: CALL 12066 0 2
10811: PPUSH
10812: CALL_OW 431
// end ;
10816: GO 10777
10818: POP
10819: POP
// end ; for i = 1 to personel do
10820: LD_ADDR_VAR 0 8
10824: PUSH
10825: DOUBLE
10826: LD_INT 1
10828: DEC
10829: ST_TO_ADDR
10830: LD_VAR 0 6
10834: PUSH
10835: FOR_TO
10836: IFFALSE 11900
// begin if i > 4 then
10838: LD_VAR 0 8
10842: PUSH
10843: LD_INT 4
10845: GREATER
10846: IFFALSE 10850
// break ;
10848: GO 11900
// case i of 1 :
10850: LD_VAR 0 8
10854: PUSH
10855: LD_INT 1
10857: DOUBLE
10858: EQUAL
10859: IFTRUE 10863
10861: GO 10943
10863: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10864: LD_ADDR_VAR 0 12
10868: PUSH
10869: LD_VAR 0 18
10873: PPUSH
10874: LD_INT 22
10876: PUSH
10877: LD_VAR 0 16
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 58
10888: PUSH
10889: EMPTY
10890: LIST
10891: PUSH
10892: LD_INT 2
10894: PUSH
10895: LD_INT 30
10897: PUSH
10898: LD_INT 32
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 30
10907: PUSH
10908: LD_INT 4
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 30
10917: PUSH
10918: LD_INT 5
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: LIST
10935: PPUSH
10936: CALL_OW 72
10940: ST_TO_ADDR
10941: GO 11165
10943: LD_INT 2
10945: DOUBLE
10946: EQUAL
10947: IFTRUE 10951
10949: GO 11013
10951: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10952: LD_ADDR_VAR 0 12
10956: PUSH
10957: LD_VAR 0 18
10961: PPUSH
10962: LD_INT 22
10964: PUSH
10965: LD_VAR 0 16
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: LD_INT 30
10979: PUSH
10980: LD_INT 0
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 30
10989: PUSH
10990: LD_INT 1
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PPUSH
11006: CALL_OW 72
11010: ST_TO_ADDR
11011: GO 11165
11013: LD_INT 3
11015: DOUBLE
11016: EQUAL
11017: IFTRUE 11021
11019: GO 11083
11021: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11022: LD_ADDR_VAR 0 12
11026: PUSH
11027: LD_VAR 0 18
11031: PPUSH
11032: LD_INT 22
11034: PUSH
11035: LD_VAR 0 16
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: LD_INT 2
11046: PUSH
11047: LD_INT 30
11049: PUSH
11050: LD_INT 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 30
11059: PUSH
11060: LD_INT 3
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PPUSH
11076: CALL_OW 72
11080: ST_TO_ADDR
11081: GO 11165
11083: LD_INT 4
11085: DOUBLE
11086: EQUAL
11087: IFTRUE 11091
11089: GO 11164
11091: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11092: LD_ADDR_VAR 0 12
11096: PUSH
11097: LD_VAR 0 18
11101: PPUSH
11102: LD_INT 22
11104: PUSH
11105: LD_VAR 0 16
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 2
11116: PUSH
11117: LD_INT 30
11119: PUSH
11120: LD_INT 6
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 30
11129: PUSH
11130: LD_INT 7
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 30
11139: PUSH
11140: LD_INT 8
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PPUSH
11157: CALL_OW 72
11161: ST_TO_ADDR
11162: GO 11165
11164: POP
// if i = 1 then
11165: LD_VAR 0 8
11169: PUSH
11170: LD_INT 1
11172: EQUAL
11173: IFFALSE 11284
// begin tmp := [ ] ;
11175: LD_ADDR_VAR 0 19
11179: PUSH
11180: EMPTY
11181: ST_TO_ADDR
// for j in f do
11182: LD_ADDR_VAR 0 9
11186: PUSH
11187: LD_VAR 0 12
11191: PUSH
11192: FOR_IN
11193: IFFALSE 11266
// if GetBType ( j ) = b_bunker then
11195: LD_VAR 0 9
11199: PPUSH
11200: CALL_OW 266
11204: PUSH
11205: LD_INT 32
11207: EQUAL
11208: IFFALSE 11235
// tmp := Insert ( tmp , 1 , j ) else
11210: LD_ADDR_VAR 0 19
11214: PUSH
11215: LD_VAR 0 19
11219: PPUSH
11220: LD_INT 1
11222: PPUSH
11223: LD_VAR 0 9
11227: PPUSH
11228: CALL_OW 2
11232: ST_TO_ADDR
11233: GO 11264
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11235: LD_ADDR_VAR 0 19
11239: PUSH
11240: LD_VAR 0 19
11244: PPUSH
11245: LD_VAR 0 19
11249: PUSH
11250: LD_INT 1
11252: PLUS
11253: PPUSH
11254: LD_VAR 0 9
11258: PPUSH
11259: CALL_OW 2
11263: ST_TO_ADDR
11264: GO 11192
11266: POP
11267: POP
// if tmp then
11268: LD_VAR 0 19
11272: IFFALSE 11284
// f := tmp ;
11274: LD_ADDR_VAR 0 12
11278: PUSH
11279: LD_VAR 0 19
11283: ST_TO_ADDR
// end ; x := personel [ i ] ;
11284: LD_ADDR_VAR 0 13
11288: PUSH
11289: LD_VAR 0 6
11293: PUSH
11294: LD_VAR 0 8
11298: ARRAY
11299: ST_TO_ADDR
// if x = - 1 then
11300: LD_VAR 0 13
11304: PUSH
11305: LD_INT 1
11307: NEG
11308: EQUAL
11309: IFFALSE 11518
// begin for j in f do
11311: LD_ADDR_VAR 0 9
11315: PUSH
11316: LD_VAR 0 12
11320: PUSH
11321: FOR_IN
11322: IFFALSE 11514
// repeat InitHc ;
11324: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11328: LD_VAR 0 9
11332: PPUSH
11333: CALL_OW 266
11337: PUSH
11338: LD_INT 5
11340: EQUAL
11341: IFFALSE 11411
// begin if UnitsInside ( j ) < 3 then
11343: LD_VAR 0 9
11347: PPUSH
11348: CALL_OW 313
11352: PUSH
11353: LD_INT 3
11355: LESS
11356: IFFALSE 11392
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11358: LD_INT 0
11360: PPUSH
11361: LD_INT 5
11363: PUSH
11364: LD_INT 8
11366: PUSH
11367: LD_INT 9
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: LIST
11374: PUSH
11375: LD_VAR 0 17
11379: ARRAY
11380: PPUSH
11381: LD_VAR 0 4
11385: PPUSH
11386: CALL_OW 380
11390: GO 11409
// PrepareHuman ( false , i , skill ) ;
11392: LD_INT 0
11394: PPUSH
11395: LD_VAR 0 8
11399: PPUSH
11400: LD_VAR 0 4
11404: PPUSH
11405: CALL_OW 380
// end else
11409: GO 11428
// PrepareHuman ( false , i , skill ) ;
11411: LD_INT 0
11413: PPUSH
11414: LD_VAR 0 8
11418: PPUSH
11419: LD_VAR 0 4
11423: PPUSH
11424: CALL_OW 380
// un := CreateHuman ;
11428: LD_ADDR_VAR 0 14
11432: PUSH
11433: CALL_OW 44
11437: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11438: LD_ADDR_VAR 0 7
11442: PUSH
11443: LD_VAR 0 7
11447: PPUSH
11448: LD_INT 1
11450: PPUSH
11451: LD_VAR 0 14
11455: PPUSH
11456: CALL_OW 2
11460: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11461: LD_VAR 0 14
11465: PPUSH
11466: LD_VAR 0 9
11470: PPUSH
11471: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11475: LD_VAR 0 9
11479: PPUSH
11480: CALL_OW 313
11484: PUSH
11485: LD_INT 6
11487: EQUAL
11488: PUSH
11489: LD_VAR 0 9
11493: PPUSH
11494: CALL_OW 266
11498: PUSH
11499: LD_INT 32
11501: PUSH
11502: LD_INT 31
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: IN
11509: OR
11510: IFFALSE 11324
11512: GO 11321
11514: POP
11515: POP
// end else
11516: GO 11898
// for j = 1 to x do
11518: LD_ADDR_VAR 0 9
11522: PUSH
11523: DOUBLE
11524: LD_INT 1
11526: DEC
11527: ST_TO_ADDR
11528: LD_VAR 0 13
11532: PUSH
11533: FOR_TO
11534: IFFALSE 11896
// begin InitHc ;
11536: CALL_OW 19
// if not f then
11540: LD_VAR 0 12
11544: NOT
11545: IFFALSE 11634
// begin PrepareHuman ( false , i , skill ) ;
11547: LD_INT 0
11549: PPUSH
11550: LD_VAR 0 8
11554: PPUSH
11555: LD_VAR 0 4
11559: PPUSH
11560: CALL_OW 380
// un := CreateHuman ;
11564: LD_ADDR_VAR 0 14
11568: PUSH
11569: CALL_OW 44
11573: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11574: LD_ADDR_VAR 0 7
11578: PUSH
11579: LD_VAR 0 7
11583: PPUSH
11584: LD_INT 1
11586: PPUSH
11587: LD_VAR 0 14
11591: PPUSH
11592: CALL_OW 2
11596: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11597: LD_VAR 0 14
11601: PPUSH
11602: LD_VAR 0 1
11606: PPUSH
11607: CALL_OW 250
11611: PPUSH
11612: LD_VAR 0 1
11616: PPUSH
11617: CALL_OW 251
11621: PPUSH
11622: LD_INT 10
11624: PPUSH
11625: LD_INT 0
11627: PPUSH
11628: CALL_OW 50
// continue ;
11632: GO 11533
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11634: LD_VAR 0 12
11638: PUSH
11639: LD_INT 1
11641: ARRAY
11642: PPUSH
11643: CALL_OW 313
11647: PUSH
11648: LD_VAR 0 12
11652: PUSH
11653: LD_INT 1
11655: ARRAY
11656: PPUSH
11657: CALL_OW 266
11661: PUSH
11662: LD_INT 32
11664: PUSH
11665: LD_INT 31
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: IN
11672: AND
11673: PUSH
11674: LD_VAR 0 12
11678: PUSH
11679: LD_INT 1
11681: ARRAY
11682: PPUSH
11683: CALL_OW 313
11687: PUSH
11688: LD_INT 6
11690: EQUAL
11691: OR
11692: IFFALSE 11712
// f := Delete ( f , 1 ) ;
11694: LD_ADDR_VAR 0 12
11698: PUSH
11699: LD_VAR 0 12
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: CALL_OW 3
11711: ST_TO_ADDR
// if not f then
11712: LD_VAR 0 12
11716: NOT
11717: IFFALSE 11735
// begin x := x + 2 ;
11719: LD_ADDR_VAR 0 13
11723: PUSH
11724: LD_VAR 0 13
11728: PUSH
11729: LD_INT 2
11731: PLUS
11732: ST_TO_ADDR
// continue ;
11733: GO 11533
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11735: LD_VAR 0 12
11739: PUSH
11740: LD_INT 1
11742: ARRAY
11743: PPUSH
11744: CALL_OW 266
11748: PUSH
11749: LD_INT 5
11751: EQUAL
11752: IFFALSE 11826
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11754: LD_VAR 0 12
11758: PUSH
11759: LD_INT 1
11761: ARRAY
11762: PPUSH
11763: CALL_OW 313
11767: PUSH
11768: LD_INT 3
11770: LESS
11771: IFFALSE 11807
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11773: LD_INT 0
11775: PPUSH
11776: LD_INT 5
11778: PUSH
11779: LD_INT 8
11781: PUSH
11782: LD_INT 9
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: LD_VAR 0 17
11794: ARRAY
11795: PPUSH
11796: LD_VAR 0 4
11800: PPUSH
11801: CALL_OW 380
11805: GO 11824
// PrepareHuman ( false , i , skill ) ;
11807: LD_INT 0
11809: PPUSH
11810: LD_VAR 0 8
11814: PPUSH
11815: LD_VAR 0 4
11819: PPUSH
11820: CALL_OW 380
// end else
11824: GO 11843
// PrepareHuman ( false , i , skill ) ;
11826: LD_INT 0
11828: PPUSH
11829: LD_VAR 0 8
11833: PPUSH
11834: LD_VAR 0 4
11838: PPUSH
11839: CALL_OW 380
// un := CreateHuman ;
11843: LD_ADDR_VAR 0 14
11847: PUSH
11848: CALL_OW 44
11852: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11853: LD_ADDR_VAR 0 7
11857: PUSH
11858: LD_VAR 0 7
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: LD_VAR 0 14
11870: PPUSH
11871: CALL_OW 2
11875: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11876: LD_VAR 0 14
11880: PPUSH
11881: LD_VAR 0 12
11885: PUSH
11886: LD_INT 1
11888: ARRAY
11889: PPUSH
11890: CALL_OW 52
// end ;
11894: GO 11533
11896: POP
11897: POP
// end ;
11898: GO 10835
11900: POP
11901: POP
// result := result ^ buildings ;
11902: LD_ADDR_VAR 0 7
11906: PUSH
11907: LD_VAR 0 7
11911: PUSH
11912: LD_VAR 0 18
11916: ADD
11917: ST_TO_ADDR
// end else
11918: GO 12061
// begin for i = 1 to personel do
11920: LD_ADDR_VAR 0 8
11924: PUSH
11925: DOUBLE
11926: LD_INT 1
11928: DEC
11929: ST_TO_ADDR
11930: LD_VAR 0 6
11934: PUSH
11935: FOR_TO
11936: IFFALSE 12059
// begin if i > 4 then
11938: LD_VAR 0 8
11942: PUSH
11943: LD_INT 4
11945: GREATER
11946: IFFALSE 11950
// break ;
11948: GO 12059
// x := personel [ i ] ;
11950: LD_ADDR_VAR 0 13
11954: PUSH
11955: LD_VAR 0 6
11959: PUSH
11960: LD_VAR 0 8
11964: ARRAY
11965: ST_TO_ADDR
// if x = - 1 then
11966: LD_VAR 0 13
11970: PUSH
11971: LD_INT 1
11973: NEG
11974: EQUAL
11975: IFFALSE 11979
// continue ;
11977: GO 11935
// PrepareHuman ( false , i , skill ) ;
11979: LD_INT 0
11981: PPUSH
11982: LD_VAR 0 8
11986: PPUSH
11987: LD_VAR 0 4
11991: PPUSH
11992: CALL_OW 380
// un := CreateHuman ;
11996: LD_ADDR_VAR 0 14
12000: PUSH
12001: CALL_OW 44
12005: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12006: LD_VAR 0 14
12010: PPUSH
12011: LD_VAR 0 1
12015: PPUSH
12016: CALL_OW 250
12020: PPUSH
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 251
12030: PPUSH
12031: LD_INT 10
12033: PPUSH
12034: LD_INT 0
12036: PPUSH
12037: CALL_OW 50
// result := result ^ un ;
12041: LD_ADDR_VAR 0 7
12045: PUSH
12046: LD_VAR 0 7
12050: PUSH
12051: LD_VAR 0 14
12055: ADD
12056: ST_TO_ADDR
// end ;
12057: GO 11935
12059: POP
12060: POP
// end ; end ;
12061: LD_VAR 0 7
12065: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12066: LD_INT 0
12068: PPUSH
12069: PPUSH
12070: PPUSH
12071: PPUSH
12072: PPUSH
12073: PPUSH
12074: PPUSH
12075: PPUSH
12076: PPUSH
12077: PPUSH
12078: PPUSH
12079: PPUSH
12080: PPUSH
12081: PPUSH
12082: PPUSH
12083: PPUSH
// result := false ;
12084: LD_ADDR_VAR 0 3
12088: PUSH
12089: LD_INT 0
12091: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12092: LD_VAR 0 1
12096: NOT
12097: PUSH
12098: LD_VAR 0 1
12102: PPUSH
12103: CALL_OW 266
12107: PUSH
12108: LD_INT 32
12110: PUSH
12111: LD_INT 33
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: IN
12118: NOT
12119: OR
12120: IFFALSE 12124
// exit ;
12122: GO 13233
// nat := GetNation ( tower ) ;
12124: LD_ADDR_VAR 0 12
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 248
12138: ST_TO_ADDR
// side := GetSide ( tower ) ;
12139: LD_ADDR_VAR 0 16
12143: PUSH
12144: LD_VAR 0 1
12148: PPUSH
12149: CALL_OW 255
12153: ST_TO_ADDR
// x := GetX ( tower ) ;
12154: LD_ADDR_VAR 0 10
12158: PUSH
12159: LD_VAR 0 1
12163: PPUSH
12164: CALL_OW 250
12168: ST_TO_ADDR
// y := GetY ( tower ) ;
12169: LD_ADDR_VAR 0 11
12173: PUSH
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 251
12183: ST_TO_ADDR
// if not x or not y then
12184: LD_VAR 0 10
12188: NOT
12189: PUSH
12190: LD_VAR 0 11
12194: NOT
12195: OR
12196: IFFALSE 12200
// exit ;
12198: GO 13233
// weapon := 0 ;
12200: LD_ADDR_VAR 0 18
12204: PUSH
12205: LD_INT 0
12207: ST_TO_ADDR
// fac_list := [ ] ;
12208: LD_ADDR_VAR 0 17
12212: PUSH
12213: EMPTY
12214: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12215: LD_ADDR_VAR 0 6
12219: PUSH
12220: LD_VAR 0 1
12224: PPUSH
12225: CALL_OW 274
12229: PPUSH
12230: LD_VAR 0 2
12234: PPUSH
12235: LD_INT 0
12237: PPUSH
12238: CALL 9804 0 3
12242: PPUSH
12243: LD_INT 30
12245: PUSH
12246: LD_INT 3
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PPUSH
12253: CALL_OW 72
12257: ST_TO_ADDR
// if not factories then
12258: LD_VAR 0 6
12262: NOT
12263: IFFALSE 12267
// exit ;
12265: GO 13233
// for i in factories do
12267: LD_ADDR_VAR 0 8
12271: PUSH
12272: LD_VAR 0 6
12276: PUSH
12277: FOR_IN
12278: IFFALSE 12303
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12280: LD_ADDR_VAR 0 17
12284: PUSH
12285: LD_VAR 0 17
12289: PUSH
12290: LD_VAR 0 8
12294: PPUSH
12295: CALL_OW 478
12299: UNION
12300: ST_TO_ADDR
12301: GO 12277
12303: POP
12304: POP
// if not fac_list then
12305: LD_VAR 0 17
12309: NOT
12310: IFFALSE 12314
// exit ;
12312: GO 13233
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12314: LD_ADDR_VAR 0 5
12318: PUSH
12319: LD_INT 4
12321: PUSH
12322: LD_INT 5
12324: PUSH
12325: LD_INT 9
12327: PUSH
12328: LD_INT 10
12330: PUSH
12331: LD_INT 6
12333: PUSH
12334: LD_INT 7
12336: PUSH
12337: LD_INT 11
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 27
12351: PUSH
12352: LD_INT 28
12354: PUSH
12355: LD_INT 26
12357: PUSH
12358: LD_INT 30
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 43
12369: PUSH
12370: LD_INT 44
12372: PUSH
12373: LD_INT 46
12375: PUSH
12376: LD_INT 45
12378: PUSH
12379: LD_INT 47
12381: PUSH
12382: LD_INT 49
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: PUSH
12398: LD_VAR 0 12
12402: ARRAY
12403: ST_TO_ADDR
// list := list isect fac_list ;
12404: LD_ADDR_VAR 0 5
12408: PUSH
12409: LD_VAR 0 5
12413: PUSH
12414: LD_VAR 0 17
12418: ISECT
12419: ST_TO_ADDR
// if not list then
12420: LD_VAR 0 5
12424: NOT
12425: IFFALSE 12429
// exit ;
12427: GO 13233
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12429: LD_VAR 0 12
12433: PUSH
12434: LD_INT 3
12436: EQUAL
12437: PUSH
12438: LD_INT 49
12440: PUSH
12441: LD_VAR 0 5
12445: IN
12446: AND
12447: PUSH
12448: LD_INT 31
12450: PPUSH
12451: LD_VAR 0 16
12455: PPUSH
12456: CALL_OW 321
12460: PUSH
12461: LD_INT 2
12463: EQUAL
12464: AND
12465: IFFALSE 12525
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12467: LD_INT 22
12469: PUSH
12470: LD_VAR 0 16
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 35
12481: PUSH
12482: LD_INT 49
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: LD_INT 91
12491: PUSH
12492: LD_VAR 0 1
12496: PUSH
12497: LD_INT 10
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: PPUSH
12510: CALL_OW 69
12514: NOT
12515: IFFALSE 12525
// weapon := ru_time_lapser ;
12517: LD_ADDR_VAR 0 18
12521: PUSH
12522: LD_INT 49
12524: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12525: LD_VAR 0 12
12529: PUSH
12530: LD_INT 1
12532: PUSH
12533: LD_INT 2
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: IN
12540: PUSH
12541: LD_INT 11
12543: PUSH
12544: LD_VAR 0 5
12548: IN
12549: PUSH
12550: LD_INT 30
12552: PUSH
12553: LD_VAR 0 5
12557: IN
12558: OR
12559: AND
12560: PUSH
12561: LD_INT 6
12563: PPUSH
12564: LD_VAR 0 16
12568: PPUSH
12569: CALL_OW 321
12573: PUSH
12574: LD_INT 2
12576: EQUAL
12577: AND
12578: IFFALSE 12743
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12580: LD_INT 22
12582: PUSH
12583: LD_VAR 0 16
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 2
12594: PUSH
12595: LD_INT 35
12597: PUSH
12598: LD_INT 11
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 35
12607: PUSH
12608: LD_INT 30
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 91
12622: PUSH
12623: LD_VAR 0 1
12627: PUSH
12628: LD_INT 18
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: PPUSH
12641: CALL_OW 69
12645: NOT
12646: PUSH
12647: LD_INT 22
12649: PUSH
12650: LD_VAR 0 16
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 2
12661: PUSH
12662: LD_INT 30
12664: PUSH
12665: LD_INT 32
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 30
12674: PUSH
12675: LD_INT 33
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 91
12689: PUSH
12690: LD_VAR 0 1
12694: PUSH
12695: LD_INT 12
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: LIST
12707: PUSH
12708: EMPTY
12709: LIST
12710: PPUSH
12711: CALL_OW 69
12715: PUSH
12716: LD_INT 2
12718: GREATER
12719: AND
12720: IFFALSE 12743
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12722: LD_ADDR_VAR 0 18
12726: PUSH
12727: LD_INT 11
12729: PUSH
12730: LD_INT 30
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_VAR 0 12
12741: ARRAY
12742: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12743: LD_VAR 0 18
12747: NOT
12748: PUSH
12749: LD_INT 40
12751: PPUSH
12752: LD_VAR 0 16
12756: PPUSH
12757: CALL_OW 321
12761: PUSH
12762: LD_INT 2
12764: EQUAL
12765: AND
12766: PUSH
12767: LD_INT 7
12769: PUSH
12770: LD_VAR 0 5
12774: IN
12775: PUSH
12776: LD_INT 28
12778: PUSH
12779: LD_VAR 0 5
12783: IN
12784: OR
12785: PUSH
12786: LD_INT 45
12788: PUSH
12789: LD_VAR 0 5
12793: IN
12794: OR
12795: AND
12796: IFFALSE 13050
// begin hex := GetHexInfo ( x , y ) ;
12798: LD_ADDR_VAR 0 4
12802: PUSH
12803: LD_VAR 0 10
12807: PPUSH
12808: LD_VAR 0 11
12812: PPUSH
12813: CALL_OW 546
12817: ST_TO_ADDR
// if hex [ 1 ] then
12818: LD_VAR 0 4
12822: PUSH
12823: LD_INT 1
12825: ARRAY
12826: IFFALSE 12830
// exit ;
12828: GO 13233
// height := hex [ 2 ] ;
12830: LD_ADDR_VAR 0 15
12834: PUSH
12835: LD_VAR 0 4
12839: PUSH
12840: LD_INT 2
12842: ARRAY
12843: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12844: LD_ADDR_VAR 0 14
12848: PUSH
12849: LD_INT 0
12851: PUSH
12852: LD_INT 2
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: LD_INT 5
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: ST_TO_ADDR
// for i in tmp do
12867: LD_ADDR_VAR 0 8
12871: PUSH
12872: LD_VAR 0 14
12876: PUSH
12877: FOR_IN
12878: IFFALSE 13048
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12880: LD_ADDR_VAR 0 9
12884: PUSH
12885: LD_VAR 0 10
12889: PPUSH
12890: LD_VAR 0 8
12894: PPUSH
12895: LD_INT 5
12897: PPUSH
12898: CALL_OW 272
12902: PUSH
12903: LD_VAR 0 11
12907: PPUSH
12908: LD_VAR 0 8
12912: PPUSH
12913: LD_INT 5
12915: PPUSH
12916: CALL_OW 273
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12925: LD_VAR 0 9
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: LD_VAR 0 9
12938: PUSH
12939: LD_INT 2
12941: ARRAY
12942: PPUSH
12943: CALL_OW 488
12947: IFFALSE 13046
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12949: LD_ADDR_VAR 0 4
12953: PUSH
12954: LD_VAR 0 9
12958: PUSH
12959: LD_INT 1
12961: ARRAY
12962: PPUSH
12963: LD_VAR 0 9
12967: PUSH
12968: LD_INT 2
12970: ARRAY
12971: PPUSH
12972: CALL_OW 546
12976: ST_TO_ADDR
// if hex [ 1 ] then
12977: LD_VAR 0 4
12981: PUSH
12982: LD_INT 1
12984: ARRAY
12985: IFFALSE 12989
// continue ;
12987: GO 12877
// h := hex [ 2 ] ;
12989: LD_ADDR_VAR 0 13
12993: PUSH
12994: LD_VAR 0 4
12998: PUSH
12999: LD_INT 2
13001: ARRAY
13002: ST_TO_ADDR
// if h + 7 < height then
13003: LD_VAR 0 13
13007: PUSH
13008: LD_INT 7
13010: PLUS
13011: PUSH
13012: LD_VAR 0 15
13016: LESS
13017: IFFALSE 13046
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13019: LD_ADDR_VAR 0 18
13023: PUSH
13024: LD_INT 7
13026: PUSH
13027: LD_INT 28
13029: PUSH
13030: LD_INT 45
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: PUSH
13038: LD_VAR 0 12
13042: ARRAY
13043: ST_TO_ADDR
// break ;
13044: GO 13048
// end ; end ; end ;
13046: GO 12877
13048: POP
13049: POP
// end ; if not weapon then
13050: LD_VAR 0 18
13054: NOT
13055: IFFALSE 13115
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13057: LD_ADDR_VAR 0 5
13061: PUSH
13062: LD_VAR 0 5
13066: PUSH
13067: LD_INT 11
13069: PUSH
13070: LD_INT 30
13072: PUSH
13073: LD_INT 49
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: DIFF
13081: ST_TO_ADDR
// if not list then
13082: LD_VAR 0 5
13086: NOT
13087: IFFALSE 13091
// exit ;
13089: GO 13233
// weapon := list [ rand ( 1 , list ) ] ;
13091: LD_ADDR_VAR 0 18
13095: PUSH
13096: LD_VAR 0 5
13100: PUSH
13101: LD_INT 1
13103: PPUSH
13104: LD_VAR 0 5
13108: PPUSH
13109: CALL_OW 12
13113: ARRAY
13114: ST_TO_ADDR
// end ; if weapon then
13115: LD_VAR 0 18
13119: IFFALSE 13233
// begin tmp := CostOfWeapon ( weapon ) ;
13121: LD_ADDR_VAR 0 14
13125: PUSH
13126: LD_VAR 0 18
13130: PPUSH
13131: CALL_OW 451
13135: ST_TO_ADDR
// j := GetBase ( tower ) ;
13136: LD_ADDR_VAR 0 9
13140: PUSH
13141: LD_VAR 0 1
13145: PPUSH
13146: CALL_OW 274
13150: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13151: LD_VAR 0 9
13155: PPUSH
13156: LD_INT 1
13158: PPUSH
13159: CALL_OW 275
13163: PUSH
13164: LD_VAR 0 14
13168: PUSH
13169: LD_INT 1
13171: ARRAY
13172: GREATEREQUAL
13173: PUSH
13174: LD_VAR 0 9
13178: PPUSH
13179: LD_INT 2
13181: PPUSH
13182: CALL_OW 275
13186: PUSH
13187: LD_VAR 0 14
13191: PUSH
13192: LD_INT 2
13194: ARRAY
13195: GREATEREQUAL
13196: AND
13197: PUSH
13198: LD_VAR 0 9
13202: PPUSH
13203: LD_INT 3
13205: PPUSH
13206: CALL_OW 275
13210: PUSH
13211: LD_VAR 0 14
13215: PUSH
13216: LD_INT 3
13218: ARRAY
13219: GREATEREQUAL
13220: AND
13221: IFFALSE 13233
// result := weapon ;
13223: LD_ADDR_VAR 0 3
13227: PUSH
13228: LD_VAR 0 18
13232: ST_TO_ADDR
// end ; end ;
13233: LD_VAR 0 3
13237: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13238: LD_INT 0
13240: PPUSH
13241: PPUSH
// result := true ;
13242: LD_ADDR_VAR 0 3
13246: PUSH
13247: LD_INT 1
13249: ST_TO_ADDR
// if array1 = array2 then
13250: LD_VAR 0 1
13254: PUSH
13255: LD_VAR 0 2
13259: EQUAL
13260: IFFALSE 13320
// begin for i = 1 to array1 do
13262: LD_ADDR_VAR 0 4
13266: PUSH
13267: DOUBLE
13268: LD_INT 1
13270: DEC
13271: ST_TO_ADDR
13272: LD_VAR 0 1
13276: PUSH
13277: FOR_TO
13278: IFFALSE 13316
// if array1 [ i ] <> array2 [ i ] then
13280: LD_VAR 0 1
13284: PUSH
13285: LD_VAR 0 4
13289: ARRAY
13290: PUSH
13291: LD_VAR 0 2
13295: PUSH
13296: LD_VAR 0 4
13300: ARRAY
13301: NONEQUAL
13302: IFFALSE 13314
// begin result := false ;
13304: LD_ADDR_VAR 0 3
13308: PUSH
13309: LD_INT 0
13311: ST_TO_ADDR
// break ;
13312: GO 13316
// end ;
13314: GO 13277
13316: POP
13317: POP
// end else
13318: GO 13328
// result := false ;
13320: LD_ADDR_VAR 0 3
13324: PUSH
13325: LD_INT 0
13327: ST_TO_ADDR
// end ;
13328: LD_VAR 0 3
13332: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13333: LD_INT 0
13335: PPUSH
13336: PPUSH
// if not array1 or not array2 then
13337: LD_VAR 0 1
13341: NOT
13342: PUSH
13343: LD_VAR 0 2
13347: NOT
13348: OR
13349: IFFALSE 13353
// exit ;
13351: GO 13417
// result := true ;
13353: LD_ADDR_VAR 0 3
13357: PUSH
13358: LD_INT 1
13360: ST_TO_ADDR
// for i = 1 to array1 do
13361: LD_ADDR_VAR 0 4
13365: PUSH
13366: DOUBLE
13367: LD_INT 1
13369: DEC
13370: ST_TO_ADDR
13371: LD_VAR 0 1
13375: PUSH
13376: FOR_TO
13377: IFFALSE 13415
// if array1 [ i ] <> array2 [ i ] then
13379: LD_VAR 0 1
13383: PUSH
13384: LD_VAR 0 4
13388: ARRAY
13389: PUSH
13390: LD_VAR 0 2
13394: PUSH
13395: LD_VAR 0 4
13399: ARRAY
13400: NONEQUAL
13401: IFFALSE 13413
// begin result := false ;
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// break ;
13411: GO 13415
// end ;
13413: GO 13376
13415: POP
13416: POP
// end ;
13417: LD_VAR 0 3
13421: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13422: LD_INT 0
13424: PPUSH
13425: PPUSH
13426: PPUSH
// pom := GetBase ( fac ) ;
13427: LD_ADDR_VAR 0 5
13431: PUSH
13432: LD_VAR 0 1
13436: PPUSH
13437: CALL_OW 274
13441: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13442: LD_ADDR_VAR 0 4
13446: PUSH
13447: LD_VAR 0 2
13451: PUSH
13452: LD_INT 1
13454: ARRAY
13455: PPUSH
13456: LD_VAR 0 2
13460: PUSH
13461: LD_INT 2
13463: ARRAY
13464: PPUSH
13465: LD_VAR 0 2
13469: PUSH
13470: LD_INT 3
13472: ARRAY
13473: PPUSH
13474: LD_VAR 0 2
13478: PUSH
13479: LD_INT 4
13481: ARRAY
13482: PPUSH
13483: CALL_OW 449
13487: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13488: LD_ADDR_VAR 0 3
13492: PUSH
13493: LD_VAR 0 5
13497: PPUSH
13498: LD_INT 1
13500: PPUSH
13501: CALL_OW 275
13505: PUSH
13506: LD_VAR 0 4
13510: PUSH
13511: LD_INT 1
13513: ARRAY
13514: GREATEREQUAL
13515: PUSH
13516: LD_VAR 0 5
13520: PPUSH
13521: LD_INT 2
13523: PPUSH
13524: CALL_OW 275
13528: PUSH
13529: LD_VAR 0 4
13533: PUSH
13534: LD_INT 2
13536: ARRAY
13537: GREATEREQUAL
13538: AND
13539: PUSH
13540: LD_VAR 0 5
13544: PPUSH
13545: LD_INT 3
13547: PPUSH
13548: CALL_OW 275
13552: PUSH
13553: LD_VAR 0 4
13557: PUSH
13558: LD_INT 3
13560: ARRAY
13561: GREATEREQUAL
13562: AND
13563: ST_TO_ADDR
// end ;
13564: LD_VAR 0 3
13568: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13569: LD_INT 0
13571: PPUSH
13572: PPUSH
13573: PPUSH
13574: PPUSH
// pom := GetBase ( building ) ;
13575: LD_ADDR_VAR 0 3
13579: PUSH
13580: LD_VAR 0 1
13584: PPUSH
13585: CALL_OW 274
13589: ST_TO_ADDR
// if not pom then
13590: LD_VAR 0 3
13594: NOT
13595: IFFALSE 13599
// exit ;
13597: GO 13769
// btype := GetBType ( building ) ;
13599: LD_ADDR_VAR 0 5
13603: PUSH
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 266
13613: ST_TO_ADDR
// if btype = b_armoury then
13614: LD_VAR 0 5
13618: PUSH
13619: LD_INT 4
13621: EQUAL
13622: IFFALSE 13632
// btype := b_barracks ;
13624: LD_ADDR_VAR 0 5
13628: PUSH
13629: LD_INT 5
13631: ST_TO_ADDR
// if btype = b_depot then
13632: LD_VAR 0 5
13636: PUSH
13637: LD_INT 0
13639: EQUAL
13640: IFFALSE 13650
// btype := b_warehouse ;
13642: LD_ADDR_VAR 0 5
13646: PUSH
13647: LD_INT 1
13649: ST_TO_ADDR
// if btype = b_workshop then
13650: LD_VAR 0 5
13654: PUSH
13655: LD_INT 2
13657: EQUAL
13658: IFFALSE 13668
// btype := b_factory ;
13660: LD_ADDR_VAR 0 5
13664: PUSH
13665: LD_INT 3
13667: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13668: LD_ADDR_VAR 0 4
13672: PUSH
13673: LD_VAR 0 5
13677: PPUSH
13678: LD_VAR 0 1
13682: PPUSH
13683: CALL_OW 248
13687: PPUSH
13688: CALL_OW 450
13692: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13693: LD_ADDR_VAR 0 2
13697: PUSH
13698: LD_VAR 0 3
13702: PPUSH
13703: LD_INT 1
13705: PPUSH
13706: CALL_OW 275
13710: PUSH
13711: LD_VAR 0 4
13715: PUSH
13716: LD_INT 1
13718: ARRAY
13719: GREATEREQUAL
13720: PUSH
13721: LD_VAR 0 3
13725: PPUSH
13726: LD_INT 2
13728: PPUSH
13729: CALL_OW 275
13733: PUSH
13734: LD_VAR 0 4
13738: PUSH
13739: LD_INT 2
13741: ARRAY
13742: GREATEREQUAL
13743: AND
13744: PUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_INT 3
13752: PPUSH
13753: CALL_OW 275
13757: PUSH
13758: LD_VAR 0 4
13762: PUSH
13763: LD_INT 3
13765: ARRAY
13766: GREATEREQUAL
13767: AND
13768: ST_TO_ADDR
// end ;
13769: LD_VAR 0 2
13773: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13774: LD_INT 0
13776: PPUSH
13777: PPUSH
13778: PPUSH
// pom := GetBase ( building ) ;
13779: LD_ADDR_VAR 0 4
13783: PUSH
13784: LD_VAR 0 1
13788: PPUSH
13789: CALL_OW 274
13793: ST_TO_ADDR
// if not pom then
13794: LD_VAR 0 4
13798: NOT
13799: IFFALSE 13803
// exit ;
13801: GO 13904
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13803: LD_ADDR_VAR 0 5
13807: PUSH
13808: LD_VAR 0 2
13812: PPUSH
13813: LD_VAR 0 1
13817: PPUSH
13818: CALL_OW 248
13822: PPUSH
13823: CALL_OW 450
13827: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13828: LD_ADDR_VAR 0 3
13832: PUSH
13833: LD_VAR 0 4
13837: PPUSH
13838: LD_INT 1
13840: PPUSH
13841: CALL_OW 275
13845: PUSH
13846: LD_VAR 0 5
13850: PUSH
13851: LD_INT 1
13853: ARRAY
13854: GREATEREQUAL
13855: PUSH
13856: LD_VAR 0 4
13860: PPUSH
13861: LD_INT 2
13863: PPUSH
13864: CALL_OW 275
13868: PUSH
13869: LD_VAR 0 5
13873: PUSH
13874: LD_INT 2
13876: ARRAY
13877: GREATEREQUAL
13878: AND
13879: PUSH
13880: LD_VAR 0 4
13884: PPUSH
13885: LD_INT 3
13887: PPUSH
13888: CALL_OW 275
13892: PUSH
13893: LD_VAR 0 5
13897: PUSH
13898: LD_INT 3
13900: ARRAY
13901: GREATEREQUAL
13902: AND
13903: ST_TO_ADDR
// end ;
13904: LD_VAR 0 3
13908: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13909: LD_INT 0
13911: PPUSH
13912: PPUSH
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
13918: PPUSH
13919: PPUSH
13920: PPUSH
13921: PPUSH
// result := false ;
13922: LD_ADDR_VAR 0 8
13926: PUSH
13927: LD_INT 0
13929: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13930: LD_VAR 0 5
13934: NOT
13935: PUSH
13936: LD_VAR 0 1
13940: NOT
13941: OR
13942: PUSH
13943: LD_VAR 0 2
13947: NOT
13948: OR
13949: PUSH
13950: LD_VAR 0 3
13954: NOT
13955: OR
13956: IFFALSE 13960
// exit ;
13958: GO 14774
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13960: LD_ADDR_VAR 0 14
13964: PUSH
13965: LD_VAR 0 1
13969: PPUSH
13970: LD_VAR 0 2
13974: PPUSH
13975: LD_VAR 0 3
13979: PPUSH
13980: LD_VAR 0 4
13984: PPUSH
13985: LD_VAR 0 5
13989: PUSH
13990: LD_INT 1
13992: ARRAY
13993: PPUSH
13994: CALL_OW 248
13998: PPUSH
13999: LD_INT 0
14001: PPUSH
14002: CALL 16027 0 6
14006: ST_TO_ADDR
// if not hexes then
14007: LD_VAR 0 14
14011: NOT
14012: IFFALSE 14016
// exit ;
14014: GO 14774
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14016: LD_ADDR_VAR 0 17
14020: PUSH
14021: LD_VAR 0 5
14025: PPUSH
14026: LD_INT 22
14028: PUSH
14029: LD_VAR 0 13
14033: PPUSH
14034: CALL_OW 255
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 2
14045: PUSH
14046: LD_INT 30
14048: PUSH
14049: LD_INT 0
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: LD_INT 30
14058: PUSH
14059: LD_INT 1
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PPUSH
14075: CALL_OW 72
14079: ST_TO_ADDR
// for i = 1 to hexes do
14080: LD_ADDR_VAR 0 9
14084: PUSH
14085: DOUBLE
14086: LD_INT 1
14088: DEC
14089: ST_TO_ADDR
14090: LD_VAR 0 14
14094: PUSH
14095: FOR_TO
14096: IFFALSE 14772
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14098: LD_ADDR_VAR 0 13
14102: PUSH
14103: LD_VAR 0 14
14107: PUSH
14108: LD_VAR 0 9
14112: ARRAY
14113: PUSH
14114: LD_INT 1
14116: ARRAY
14117: PPUSH
14118: LD_VAR 0 14
14122: PUSH
14123: LD_VAR 0 9
14127: ARRAY
14128: PUSH
14129: LD_INT 2
14131: ARRAY
14132: PPUSH
14133: CALL_OW 428
14137: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14138: LD_VAR 0 14
14142: PUSH
14143: LD_VAR 0 9
14147: ARRAY
14148: PUSH
14149: LD_INT 1
14151: ARRAY
14152: PPUSH
14153: LD_VAR 0 14
14157: PUSH
14158: LD_VAR 0 9
14162: ARRAY
14163: PUSH
14164: LD_INT 2
14166: ARRAY
14167: PPUSH
14168: CALL_OW 351
14172: PUSH
14173: LD_VAR 0 14
14177: PUSH
14178: LD_VAR 0 9
14182: ARRAY
14183: PUSH
14184: LD_INT 1
14186: ARRAY
14187: PPUSH
14188: LD_VAR 0 14
14192: PUSH
14193: LD_VAR 0 9
14197: ARRAY
14198: PUSH
14199: LD_INT 2
14201: ARRAY
14202: PPUSH
14203: CALL_OW 488
14207: NOT
14208: OR
14209: PUSH
14210: LD_VAR 0 13
14214: PPUSH
14215: CALL_OW 247
14219: PUSH
14220: LD_INT 3
14222: EQUAL
14223: OR
14224: IFFALSE 14230
// exit ;
14226: POP
14227: POP
14228: GO 14774
// if not tmp then
14230: LD_VAR 0 13
14234: NOT
14235: IFFALSE 14239
// continue ;
14237: GO 14095
// result := true ;
14239: LD_ADDR_VAR 0 8
14243: PUSH
14244: LD_INT 1
14246: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14247: LD_VAR 0 6
14251: PUSH
14252: LD_VAR 0 13
14256: PPUSH
14257: CALL_OW 247
14261: PUSH
14262: LD_INT 2
14264: EQUAL
14265: AND
14266: PUSH
14267: LD_VAR 0 13
14271: PPUSH
14272: CALL_OW 263
14276: PUSH
14277: LD_INT 1
14279: EQUAL
14280: AND
14281: IFFALSE 14445
// begin if IsDrivenBy ( tmp ) then
14283: LD_VAR 0 13
14287: PPUSH
14288: CALL_OW 311
14292: IFFALSE 14296
// continue ;
14294: GO 14095
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14296: LD_VAR 0 6
14300: PPUSH
14301: LD_INT 3
14303: PUSH
14304: LD_INT 60
14306: PUSH
14307: EMPTY
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 3
14316: PUSH
14317: LD_INT 55
14319: PUSH
14320: EMPTY
14321: LIST
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 72
14335: IFFALSE 14443
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14337: LD_ADDR_VAR 0 18
14341: PUSH
14342: LD_VAR 0 6
14346: PPUSH
14347: LD_INT 3
14349: PUSH
14350: LD_INT 60
14352: PUSH
14353: EMPTY
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 3
14362: PUSH
14363: LD_INT 55
14365: PUSH
14366: EMPTY
14367: LIST
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PPUSH
14377: CALL_OW 72
14381: PUSH
14382: LD_INT 1
14384: ARRAY
14385: ST_TO_ADDR
// if IsInUnit ( driver ) then
14386: LD_VAR 0 18
14390: PPUSH
14391: CALL_OW 310
14395: IFFALSE 14406
// ComExit ( driver ) ;
14397: LD_VAR 0 18
14401: PPUSH
14402: CALL 39828 0 1
// AddComEnterUnit ( driver , tmp ) ;
14406: LD_VAR 0 18
14410: PPUSH
14411: LD_VAR 0 13
14415: PPUSH
14416: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14420: LD_VAR 0 18
14424: PPUSH
14425: LD_VAR 0 7
14429: PPUSH
14430: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14434: LD_VAR 0 18
14438: PPUSH
14439: CALL_OW 181
// end ; continue ;
14443: GO 14095
// end ; if not cleaners or not tmp in cleaners then
14445: LD_VAR 0 6
14449: NOT
14450: PUSH
14451: LD_VAR 0 13
14455: PUSH
14456: LD_VAR 0 6
14460: IN
14461: NOT
14462: OR
14463: IFFALSE 14770
// begin if dep then
14465: LD_VAR 0 17
14469: IFFALSE 14605
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14471: LD_ADDR_VAR 0 16
14475: PUSH
14476: LD_VAR 0 17
14480: PUSH
14481: LD_INT 1
14483: ARRAY
14484: PPUSH
14485: CALL_OW 250
14489: PPUSH
14490: LD_VAR 0 17
14494: PUSH
14495: LD_INT 1
14497: ARRAY
14498: PPUSH
14499: CALL_OW 254
14503: PPUSH
14504: LD_INT 5
14506: PPUSH
14507: CALL_OW 272
14511: PUSH
14512: LD_VAR 0 17
14516: PUSH
14517: LD_INT 1
14519: ARRAY
14520: PPUSH
14521: CALL_OW 251
14525: PPUSH
14526: LD_VAR 0 17
14530: PUSH
14531: LD_INT 1
14533: ARRAY
14534: PPUSH
14535: CALL_OW 254
14539: PPUSH
14540: LD_INT 5
14542: PPUSH
14543: CALL_OW 273
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14552: LD_VAR 0 16
14556: PUSH
14557: LD_INT 1
14559: ARRAY
14560: PPUSH
14561: LD_VAR 0 16
14565: PUSH
14566: LD_INT 2
14568: ARRAY
14569: PPUSH
14570: CALL_OW 488
14574: IFFALSE 14605
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14576: LD_VAR 0 13
14580: PPUSH
14581: LD_VAR 0 16
14585: PUSH
14586: LD_INT 1
14588: ARRAY
14589: PPUSH
14590: LD_VAR 0 16
14594: PUSH
14595: LD_INT 2
14597: ARRAY
14598: PPUSH
14599: CALL_OW 111
// continue ;
14603: GO 14095
// end ; end ; r := GetDir ( tmp ) ;
14605: LD_ADDR_VAR 0 15
14609: PUSH
14610: LD_VAR 0 13
14614: PPUSH
14615: CALL_OW 254
14619: ST_TO_ADDR
// if r = 5 then
14620: LD_VAR 0 15
14624: PUSH
14625: LD_INT 5
14627: EQUAL
14628: IFFALSE 14638
// r := 0 ;
14630: LD_ADDR_VAR 0 15
14634: PUSH
14635: LD_INT 0
14637: ST_TO_ADDR
// for j = r to 5 do
14638: LD_ADDR_VAR 0 10
14642: PUSH
14643: DOUBLE
14644: LD_VAR 0 15
14648: DEC
14649: ST_TO_ADDR
14650: LD_INT 5
14652: PUSH
14653: FOR_TO
14654: IFFALSE 14768
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14656: LD_ADDR_VAR 0 11
14660: PUSH
14661: LD_VAR 0 13
14665: PPUSH
14666: CALL_OW 250
14670: PPUSH
14671: LD_VAR 0 10
14675: PPUSH
14676: LD_INT 2
14678: PPUSH
14679: CALL_OW 272
14683: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14684: LD_ADDR_VAR 0 12
14688: PUSH
14689: LD_VAR 0 13
14693: PPUSH
14694: CALL_OW 251
14698: PPUSH
14699: LD_VAR 0 10
14703: PPUSH
14704: LD_INT 2
14706: PPUSH
14707: CALL_OW 273
14711: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14712: LD_VAR 0 11
14716: PPUSH
14717: LD_VAR 0 12
14721: PPUSH
14722: CALL_OW 488
14726: PUSH
14727: LD_VAR 0 11
14731: PPUSH
14732: LD_VAR 0 12
14736: PPUSH
14737: CALL_OW 428
14741: NOT
14742: AND
14743: IFFALSE 14766
// begin ComMoveXY ( tmp , _x , _y ) ;
14745: LD_VAR 0 13
14749: PPUSH
14750: LD_VAR 0 11
14754: PPUSH
14755: LD_VAR 0 12
14759: PPUSH
14760: CALL_OW 111
// break ;
14764: GO 14768
// end ; end ;
14766: GO 14653
14768: POP
14769: POP
// end ; end ;
14770: GO 14095
14772: POP
14773: POP
// end ;
14774: LD_VAR 0 8
14778: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14779: LD_INT 0
14781: PPUSH
// result := true ;
14782: LD_ADDR_VAR 0 3
14786: PUSH
14787: LD_INT 1
14789: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14790: LD_VAR 0 2
14794: PUSH
14795: LD_INT 24
14797: DOUBLE
14798: EQUAL
14799: IFTRUE 14809
14801: LD_INT 33
14803: DOUBLE
14804: EQUAL
14805: IFTRUE 14809
14807: GO 14834
14809: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14810: LD_ADDR_VAR 0 3
14814: PUSH
14815: LD_INT 32
14817: PPUSH
14818: LD_VAR 0 1
14822: PPUSH
14823: CALL_OW 321
14827: PUSH
14828: LD_INT 2
14830: EQUAL
14831: ST_TO_ADDR
14832: GO 15150
14834: LD_INT 20
14836: DOUBLE
14837: EQUAL
14838: IFTRUE 14842
14840: GO 14867
14842: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14843: LD_ADDR_VAR 0 3
14847: PUSH
14848: LD_INT 6
14850: PPUSH
14851: LD_VAR 0 1
14855: PPUSH
14856: CALL_OW 321
14860: PUSH
14861: LD_INT 2
14863: EQUAL
14864: ST_TO_ADDR
14865: GO 15150
14867: LD_INT 22
14869: DOUBLE
14870: EQUAL
14871: IFTRUE 14881
14873: LD_INT 36
14875: DOUBLE
14876: EQUAL
14877: IFTRUE 14881
14879: GO 14906
14881: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14882: LD_ADDR_VAR 0 3
14886: PUSH
14887: LD_INT 15
14889: PPUSH
14890: LD_VAR 0 1
14894: PPUSH
14895: CALL_OW 321
14899: PUSH
14900: LD_INT 2
14902: EQUAL
14903: ST_TO_ADDR
14904: GO 15150
14906: LD_INT 30
14908: DOUBLE
14909: EQUAL
14910: IFTRUE 14914
14912: GO 14939
14914: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14915: LD_ADDR_VAR 0 3
14919: PUSH
14920: LD_INT 20
14922: PPUSH
14923: LD_VAR 0 1
14927: PPUSH
14928: CALL_OW 321
14932: PUSH
14933: LD_INT 2
14935: EQUAL
14936: ST_TO_ADDR
14937: GO 15150
14939: LD_INT 28
14941: DOUBLE
14942: EQUAL
14943: IFTRUE 14953
14945: LD_INT 21
14947: DOUBLE
14948: EQUAL
14949: IFTRUE 14953
14951: GO 14978
14953: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14954: LD_ADDR_VAR 0 3
14958: PUSH
14959: LD_INT 21
14961: PPUSH
14962: LD_VAR 0 1
14966: PPUSH
14967: CALL_OW 321
14971: PUSH
14972: LD_INT 2
14974: EQUAL
14975: ST_TO_ADDR
14976: GO 15150
14978: LD_INT 16
14980: DOUBLE
14981: EQUAL
14982: IFTRUE 14986
14984: GO 15011
14986: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14987: LD_ADDR_VAR 0 3
14991: PUSH
14992: LD_INT 84
14994: PPUSH
14995: LD_VAR 0 1
14999: PPUSH
15000: CALL_OW 321
15004: PUSH
15005: LD_INT 2
15007: EQUAL
15008: ST_TO_ADDR
15009: GO 15150
15011: LD_INT 19
15013: DOUBLE
15014: EQUAL
15015: IFTRUE 15025
15017: LD_INT 23
15019: DOUBLE
15020: EQUAL
15021: IFTRUE 15025
15023: GO 15050
15025: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15026: LD_ADDR_VAR 0 3
15030: PUSH
15031: LD_INT 83
15033: PPUSH
15034: LD_VAR 0 1
15038: PPUSH
15039: CALL_OW 321
15043: PUSH
15044: LD_INT 2
15046: EQUAL
15047: ST_TO_ADDR
15048: GO 15150
15050: LD_INT 17
15052: DOUBLE
15053: EQUAL
15054: IFTRUE 15058
15056: GO 15083
15058: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15059: LD_ADDR_VAR 0 3
15063: PUSH
15064: LD_INT 39
15066: PPUSH
15067: LD_VAR 0 1
15071: PPUSH
15072: CALL_OW 321
15076: PUSH
15077: LD_INT 2
15079: EQUAL
15080: ST_TO_ADDR
15081: GO 15150
15083: LD_INT 18
15085: DOUBLE
15086: EQUAL
15087: IFTRUE 15091
15089: GO 15116
15091: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15092: LD_ADDR_VAR 0 3
15096: PUSH
15097: LD_INT 40
15099: PPUSH
15100: LD_VAR 0 1
15104: PPUSH
15105: CALL_OW 321
15109: PUSH
15110: LD_INT 2
15112: EQUAL
15113: ST_TO_ADDR
15114: GO 15150
15116: LD_INT 27
15118: DOUBLE
15119: EQUAL
15120: IFTRUE 15124
15122: GO 15149
15124: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15125: LD_ADDR_VAR 0 3
15129: PUSH
15130: LD_INT 35
15132: PPUSH
15133: LD_VAR 0 1
15137: PPUSH
15138: CALL_OW 321
15142: PUSH
15143: LD_INT 2
15145: EQUAL
15146: ST_TO_ADDR
15147: GO 15150
15149: POP
// end ;
15150: LD_VAR 0 3
15154: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15155: LD_INT 0
15157: PPUSH
15158: PPUSH
15159: PPUSH
15160: PPUSH
15161: PPUSH
15162: PPUSH
15163: PPUSH
15164: PPUSH
15165: PPUSH
15166: PPUSH
15167: PPUSH
// result := false ;
15168: LD_ADDR_VAR 0 6
15172: PUSH
15173: LD_INT 0
15175: ST_TO_ADDR
// if btype = b_depot then
15176: LD_VAR 0 2
15180: PUSH
15181: LD_INT 0
15183: EQUAL
15184: IFFALSE 15196
// begin result := true ;
15186: LD_ADDR_VAR 0 6
15190: PUSH
15191: LD_INT 1
15193: ST_TO_ADDR
// exit ;
15194: GO 16022
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15196: LD_VAR 0 1
15200: NOT
15201: PUSH
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 266
15211: PUSH
15212: LD_INT 0
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: IN
15222: NOT
15223: OR
15224: PUSH
15225: LD_VAR 0 2
15229: NOT
15230: OR
15231: PUSH
15232: LD_VAR 0 5
15236: PUSH
15237: LD_INT 0
15239: PUSH
15240: LD_INT 1
15242: PUSH
15243: LD_INT 2
15245: PUSH
15246: LD_INT 3
15248: PUSH
15249: LD_INT 4
15251: PUSH
15252: LD_INT 5
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: IN
15263: NOT
15264: OR
15265: PUSH
15266: LD_VAR 0 3
15270: PPUSH
15271: LD_VAR 0 4
15275: PPUSH
15276: CALL_OW 488
15280: NOT
15281: OR
15282: IFFALSE 15286
// exit ;
15284: GO 16022
// side := GetSide ( depot ) ;
15286: LD_ADDR_VAR 0 9
15290: PUSH
15291: LD_VAR 0 1
15295: PPUSH
15296: CALL_OW 255
15300: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15301: LD_VAR 0 9
15305: PPUSH
15306: LD_VAR 0 2
15310: PPUSH
15311: CALL 14779 0 2
15315: NOT
15316: IFFALSE 15320
// exit ;
15318: GO 16022
// pom := GetBase ( depot ) ;
15320: LD_ADDR_VAR 0 10
15324: PUSH
15325: LD_VAR 0 1
15329: PPUSH
15330: CALL_OW 274
15334: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15335: LD_ADDR_VAR 0 11
15339: PUSH
15340: LD_VAR 0 2
15344: PPUSH
15345: LD_VAR 0 1
15349: PPUSH
15350: CALL_OW 248
15354: PPUSH
15355: CALL_OW 450
15359: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15360: LD_VAR 0 10
15364: PPUSH
15365: LD_INT 1
15367: PPUSH
15368: CALL_OW 275
15372: PUSH
15373: LD_VAR 0 11
15377: PUSH
15378: LD_INT 1
15380: ARRAY
15381: GREATEREQUAL
15382: PUSH
15383: LD_VAR 0 10
15387: PPUSH
15388: LD_INT 2
15390: PPUSH
15391: CALL_OW 275
15395: PUSH
15396: LD_VAR 0 11
15400: PUSH
15401: LD_INT 2
15403: ARRAY
15404: GREATEREQUAL
15405: AND
15406: PUSH
15407: LD_VAR 0 10
15411: PPUSH
15412: LD_INT 3
15414: PPUSH
15415: CALL_OW 275
15419: PUSH
15420: LD_VAR 0 11
15424: PUSH
15425: LD_INT 3
15427: ARRAY
15428: GREATEREQUAL
15429: AND
15430: NOT
15431: IFFALSE 15435
// exit ;
15433: GO 16022
// if GetBType ( depot ) = b_depot then
15435: LD_VAR 0 1
15439: PPUSH
15440: CALL_OW 266
15444: PUSH
15445: LD_INT 0
15447: EQUAL
15448: IFFALSE 15460
// dist := 28 else
15450: LD_ADDR_VAR 0 14
15454: PUSH
15455: LD_INT 28
15457: ST_TO_ADDR
15458: GO 15468
// dist := 36 ;
15460: LD_ADDR_VAR 0 14
15464: PUSH
15465: LD_INT 36
15467: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15468: LD_VAR 0 1
15472: PPUSH
15473: LD_VAR 0 3
15477: PPUSH
15478: LD_VAR 0 4
15482: PPUSH
15483: CALL_OW 297
15487: PUSH
15488: LD_VAR 0 14
15492: GREATER
15493: IFFALSE 15497
// exit ;
15495: GO 16022
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15497: LD_ADDR_VAR 0 12
15501: PUSH
15502: LD_VAR 0 2
15506: PPUSH
15507: LD_VAR 0 3
15511: PPUSH
15512: LD_VAR 0 4
15516: PPUSH
15517: LD_VAR 0 5
15521: PPUSH
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 248
15531: PPUSH
15532: LD_INT 0
15534: PPUSH
15535: CALL 16027 0 6
15539: ST_TO_ADDR
// if not hexes then
15540: LD_VAR 0 12
15544: NOT
15545: IFFALSE 15549
// exit ;
15547: GO 16022
// hex := GetHexInfo ( x , y ) ;
15549: LD_ADDR_VAR 0 15
15553: PUSH
15554: LD_VAR 0 3
15558: PPUSH
15559: LD_VAR 0 4
15563: PPUSH
15564: CALL_OW 546
15568: ST_TO_ADDR
// if hex [ 1 ] then
15569: LD_VAR 0 15
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: IFFALSE 15581
// exit ;
15579: GO 16022
// height := hex [ 2 ] ;
15581: LD_ADDR_VAR 0 13
15585: PUSH
15586: LD_VAR 0 15
15590: PUSH
15591: LD_INT 2
15593: ARRAY
15594: ST_TO_ADDR
// for i = 1 to hexes do
15595: LD_ADDR_VAR 0 7
15599: PUSH
15600: DOUBLE
15601: LD_INT 1
15603: DEC
15604: ST_TO_ADDR
15605: LD_VAR 0 12
15609: PUSH
15610: FOR_TO
15611: IFFALSE 15941
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15613: LD_VAR 0 12
15617: PUSH
15618: LD_VAR 0 7
15622: ARRAY
15623: PUSH
15624: LD_INT 1
15626: ARRAY
15627: PPUSH
15628: LD_VAR 0 12
15632: PUSH
15633: LD_VAR 0 7
15637: ARRAY
15638: PUSH
15639: LD_INT 2
15641: ARRAY
15642: PPUSH
15643: CALL_OW 488
15647: NOT
15648: PUSH
15649: LD_VAR 0 12
15653: PUSH
15654: LD_VAR 0 7
15658: ARRAY
15659: PUSH
15660: LD_INT 1
15662: ARRAY
15663: PPUSH
15664: LD_VAR 0 12
15668: PUSH
15669: LD_VAR 0 7
15673: ARRAY
15674: PUSH
15675: LD_INT 2
15677: ARRAY
15678: PPUSH
15679: CALL_OW 428
15683: PUSH
15684: LD_INT 0
15686: GREATER
15687: OR
15688: PUSH
15689: LD_VAR 0 12
15693: PUSH
15694: LD_VAR 0 7
15698: ARRAY
15699: PUSH
15700: LD_INT 1
15702: ARRAY
15703: PPUSH
15704: LD_VAR 0 12
15708: PUSH
15709: LD_VAR 0 7
15713: ARRAY
15714: PUSH
15715: LD_INT 2
15717: ARRAY
15718: PPUSH
15719: CALL_OW 351
15723: OR
15724: IFFALSE 15730
// exit ;
15726: POP
15727: POP
15728: GO 16022
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15730: LD_ADDR_VAR 0 8
15734: PUSH
15735: LD_VAR 0 12
15739: PUSH
15740: LD_VAR 0 7
15744: ARRAY
15745: PUSH
15746: LD_INT 1
15748: ARRAY
15749: PPUSH
15750: LD_VAR 0 12
15754: PUSH
15755: LD_VAR 0 7
15759: ARRAY
15760: PUSH
15761: LD_INT 2
15763: ARRAY
15764: PPUSH
15765: CALL_OW 546
15769: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15770: LD_VAR 0 8
15774: PUSH
15775: LD_INT 1
15777: ARRAY
15778: PUSH
15779: LD_VAR 0 8
15783: PUSH
15784: LD_INT 2
15786: ARRAY
15787: PUSH
15788: LD_VAR 0 13
15792: PUSH
15793: LD_INT 2
15795: PLUS
15796: GREATER
15797: OR
15798: PUSH
15799: LD_VAR 0 8
15803: PUSH
15804: LD_INT 2
15806: ARRAY
15807: PUSH
15808: LD_VAR 0 13
15812: PUSH
15813: LD_INT 2
15815: MINUS
15816: LESS
15817: OR
15818: PUSH
15819: LD_VAR 0 8
15823: PUSH
15824: LD_INT 3
15826: ARRAY
15827: PUSH
15828: LD_INT 0
15830: PUSH
15831: LD_INT 8
15833: PUSH
15834: LD_INT 9
15836: PUSH
15837: LD_INT 10
15839: PUSH
15840: LD_INT 11
15842: PUSH
15843: LD_INT 12
15845: PUSH
15846: LD_INT 13
15848: PUSH
15849: LD_INT 16
15851: PUSH
15852: LD_INT 17
15854: PUSH
15855: LD_INT 18
15857: PUSH
15858: LD_INT 19
15860: PUSH
15861: LD_INT 20
15863: PUSH
15864: LD_INT 21
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: IN
15882: NOT
15883: OR
15884: PUSH
15885: LD_VAR 0 8
15889: PUSH
15890: LD_INT 5
15892: ARRAY
15893: NOT
15894: OR
15895: PUSH
15896: LD_VAR 0 8
15900: PUSH
15901: LD_INT 6
15903: ARRAY
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: LD_INT 2
15910: PUSH
15911: LD_INT 7
15913: PUSH
15914: LD_INT 9
15916: PUSH
15917: LD_INT 10
15919: PUSH
15920: LD_INT 11
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: IN
15931: NOT
15932: OR
15933: IFFALSE 15939
// exit ;
15935: POP
15936: POP
15937: GO 16022
// end ;
15939: GO 15610
15941: POP
15942: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15943: LD_VAR 0 9
15947: PPUSH
15948: LD_VAR 0 3
15952: PPUSH
15953: LD_VAR 0 4
15957: PPUSH
15958: LD_INT 20
15960: PPUSH
15961: CALL 7945 0 4
15965: PUSH
15966: LD_INT 4
15968: ARRAY
15969: IFFALSE 15973
// exit ;
15971: GO 16022
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15973: LD_VAR 0 2
15977: PUSH
15978: LD_INT 29
15980: PUSH
15981: LD_INT 30
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: IN
15988: PUSH
15989: LD_VAR 0 3
15993: PPUSH
15994: LD_VAR 0 4
15998: PPUSH
15999: LD_VAR 0 9
16003: PPUSH
16004: CALL_OW 440
16008: NOT
16009: AND
16010: IFFALSE 16014
// exit ;
16012: GO 16022
// result := true ;
16014: LD_ADDR_VAR 0 6
16018: PUSH
16019: LD_INT 1
16021: ST_TO_ADDR
// end ;
16022: LD_VAR 0 6
16026: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16027: LD_INT 0
16029: PPUSH
16030: PPUSH
16031: PPUSH
16032: PPUSH
16033: PPUSH
16034: PPUSH
16035: PPUSH
16036: PPUSH
16037: PPUSH
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
16060: PPUSH
16061: PPUSH
16062: PPUSH
16063: PPUSH
16064: PPUSH
16065: PPUSH
16066: PPUSH
16067: PPUSH
16068: PPUSH
16069: PPUSH
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
16074: PPUSH
16075: PPUSH
16076: PPUSH
16077: PPUSH
16078: PPUSH
16079: PPUSH
16080: PPUSH
16081: PPUSH
16082: PPUSH
16083: PPUSH
16084: PPUSH
16085: PPUSH
16086: PPUSH
// result = [ ] ;
16087: LD_ADDR_VAR 0 7
16091: PUSH
16092: EMPTY
16093: ST_TO_ADDR
// temp_list = [ ] ;
16094: LD_ADDR_VAR 0 9
16098: PUSH
16099: EMPTY
16100: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16101: LD_VAR 0 4
16105: PUSH
16106: LD_INT 0
16108: PUSH
16109: LD_INT 1
16111: PUSH
16112: LD_INT 2
16114: PUSH
16115: LD_INT 3
16117: PUSH
16118: LD_INT 4
16120: PUSH
16121: LD_INT 5
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: IN
16132: NOT
16133: PUSH
16134: LD_VAR 0 1
16138: PUSH
16139: LD_INT 0
16141: PUSH
16142: LD_INT 1
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: IN
16149: PUSH
16150: LD_VAR 0 5
16154: PUSH
16155: LD_INT 1
16157: PUSH
16158: LD_INT 2
16160: PUSH
16161: LD_INT 3
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: IN
16169: NOT
16170: AND
16171: OR
16172: IFFALSE 16176
// exit ;
16174: GO 34567
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16176: LD_VAR 0 1
16180: PUSH
16181: LD_INT 6
16183: PUSH
16184: LD_INT 7
16186: PUSH
16187: LD_INT 8
16189: PUSH
16190: LD_INT 13
16192: PUSH
16193: LD_INT 12
16195: PUSH
16196: LD_INT 15
16198: PUSH
16199: LD_INT 11
16201: PUSH
16202: LD_INT 14
16204: PUSH
16205: LD_INT 10
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: IN
16219: IFFALSE 16229
// btype = b_lab ;
16221: LD_ADDR_VAR 0 1
16225: PUSH
16226: LD_INT 6
16228: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16229: LD_VAR 0 6
16233: PUSH
16234: LD_INT 0
16236: PUSH
16237: LD_INT 1
16239: PUSH
16240: LD_INT 2
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: IN
16248: NOT
16249: PUSH
16250: LD_VAR 0 1
16254: PUSH
16255: LD_INT 0
16257: PUSH
16258: LD_INT 1
16260: PUSH
16261: LD_INT 2
16263: PUSH
16264: LD_INT 3
16266: PUSH
16267: LD_INT 6
16269: PUSH
16270: LD_INT 36
16272: PUSH
16273: LD_INT 4
16275: PUSH
16276: LD_INT 5
16278: PUSH
16279: LD_INT 31
16281: PUSH
16282: LD_INT 32
16284: PUSH
16285: LD_INT 33
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: IN
16301: NOT
16302: PUSH
16303: LD_VAR 0 6
16307: PUSH
16308: LD_INT 1
16310: EQUAL
16311: AND
16312: OR
16313: PUSH
16314: LD_VAR 0 1
16318: PUSH
16319: LD_INT 2
16321: PUSH
16322: LD_INT 3
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: IN
16329: NOT
16330: PUSH
16331: LD_VAR 0 6
16335: PUSH
16336: LD_INT 2
16338: EQUAL
16339: AND
16340: OR
16341: IFFALSE 16351
// mode = 0 ;
16343: LD_ADDR_VAR 0 6
16347: PUSH
16348: LD_INT 0
16350: ST_TO_ADDR
// case mode of 0 :
16351: LD_VAR 0 6
16355: PUSH
16356: LD_INT 0
16358: DOUBLE
16359: EQUAL
16360: IFTRUE 16364
16362: GO 27817
16364: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16365: LD_ADDR_VAR 0 11
16369: PUSH
16370: LD_INT 0
16372: PUSH
16373: LD_INT 0
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 0
16382: PUSH
16383: LD_INT 1
16385: NEG
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 1
16403: PUSH
16404: LD_INT 1
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 0
16413: PUSH
16414: LD_INT 1
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: LD_INT 1
16423: NEG
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 1
16434: NEG
16435: PUSH
16436: LD_INT 1
16438: NEG
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 1
16446: NEG
16447: PUSH
16448: LD_INT 2
16450: NEG
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 0
16458: PUSH
16459: LD_INT 2
16461: NEG
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 1
16469: PUSH
16470: LD_INT 1
16472: NEG
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: LD_INT 1
16480: PUSH
16481: LD_INT 2
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PUSH
16488: LD_INT 0
16490: PUSH
16491: LD_INT 2
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 1
16500: NEG
16501: PUSH
16502: LD_INT 1
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: LD_INT 3
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 0
16521: PUSH
16522: LD_INT 3
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 1
16531: NEG
16532: PUSH
16533: LD_INT 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16558: LD_ADDR_VAR 0 12
16562: PUSH
16563: LD_INT 0
16565: PUSH
16566: LD_INT 0
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 0
16575: PUSH
16576: LD_INT 1
16578: NEG
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 1
16596: PUSH
16597: LD_INT 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 0
16606: PUSH
16607: LD_INT 1
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 1
16616: NEG
16617: PUSH
16618: LD_INT 0
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 1
16627: NEG
16628: PUSH
16629: LD_INT 1
16631: NEG
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: LD_INT 1
16642: NEG
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 2
16650: PUSH
16651: LD_INT 0
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 2
16660: PUSH
16661: LD_INT 1
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 1
16670: NEG
16671: PUSH
16672: LD_INT 1
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 2
16681: NEG
16682: PUSH
16683: LD_INT 0
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 2
16692: NEG
16693: PUSH
16694: LD_INT 1
16696: NEG
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 2
16704: NEG
16705: PUSH
16706: LD_INT 1
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 3
16715: NEG
16716: PUSH
16717: LD_INT 0
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 3
16726: NEG
16727: PUSH
16728: LD_INT 1
16730: NEG
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16754: LD_ADDR_VAR 0 13
16758: PUSH
16759: LD_INT 0
16761: PUSH
16762: LD_INT 0
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 0
16771: PUSH
16772: LD_INT 1
16774: NEG
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 1
16782: PUSH
16783: LD_INT 0
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 1
16792: PUSH
16793: LD_INT 1
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 1
16812: NEG
16813: PUSH
16814: LD_INT 0
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 1
16823: NEG
16824: PUSH
16825: LD_INT 1
16827: NEG
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 1
16835: NEG
16836: PUSH
16837: LD_INT 2
16839: NEG
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 2
16847: PUSH
16848: LD_INT 1
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 2
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 1
16867: PUSH
16868: LD_INT 2
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 2
16877: NEG
16878: PUSH
16879: LD_INT 1
16881: NEG
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 2
16889: NEG
16890: PUSH
16891: LD_INT 2
16893: NEG
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 2
16901: NEG
16902: PUSH
16903: LD_INT 3
16905: NEG
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 3
16913: NEG
16914: PUSH
16915: LD_INT 2
16917: NEG
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 3
16925: NEG
16926: PUSH
16927: LD_INT 3
16929: NEG
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16953: LD_ADDR_VAR 0 14
16957: PUSH
16958: LD_INT 0
16960: PUSH
16961: LD_INT 0
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 0
16970: PUSH
16971: LD_INT 1
16973: NEG
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: LD_INT 0
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 1
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 1
17011: NEG
17012: PUSH
17013: LD_INT 0
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 1
17022: NEG
17023: PUSH
17024: LD_INT 1
17026: NEG
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 1
17034: NEG
17035: PUSH
17036: LD_INT 2
17038: NEG
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 0
17046: PUSH
17047: LD_INT 2
17049: NEG
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: LD_INT 1
17060: NEG
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 0
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 1
17088: NEG
17089: PUSH
17090: LD_INT 1
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 1
17099: NEG
17100: PUSH
17101: LD_INT 3
17103: NEG
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: LD_INT 3
17114: NEG
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 1
17122: PUSH
17123: LD_INT 2
17125: NEG
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17149: LD_ADDR_VAR 0 15
17153: PUSH
17154: LD_INT 0
17156: PUSH
17157: LD_INT 0
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: LD_INT 1
17169: NEG
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: LD_INT 0
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: LD_INT 1
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 0
17197: PUSH
17198: LD_INT 1
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 1
17207: NEG
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 1
17218: NEG
17219: PUSH
17220: LD_INT 1
17222: NEG
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 1
17230: PUSH
17231: LD_INT 1
17233: NEG
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 2
17241: PUSH
17242: LD_INT 0
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 2
17251: PUSH
17252: LD_INT 1
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 1
17261: NEG
17262: PUSH
17263: LD_INT 1
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 2
17272: NEG
17273: PUSH
17274: LD_INT 0
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 2
17283: NEG
17284: PUSH
17285: LD_INT 1
17287: NEG
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 2
17295: PUSH
17296: LD_INT 1
17298: NEG
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 3
17306: PUSH
17307: LD_INT 0
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 3
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17342: LD_ADDR_VAR 0 16
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: LD_INT 0
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 0
17359: PUSH
17360: LD_INT 1
17362: NEG
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: LD_INT 1
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 0
17390: PUSH
17391: LD_INT 1
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 1
17400: NEG
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 1
17411: NEG
17412: PUSH
17413: LD_INT 1
17415: NEG
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 1
17423: NEG
17424: PUSH
17425: LD_INT 2
17427: NEG
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 2
17435: PUSH
17436: LD_INT 1
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 2
17445: PUSH
17446: LD_INT 2
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 1
17455: PUSH
17456: LD_INT 2
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 2
17465: NEG
17466: PUSH
17467: LD_INT 1
17469: NEG
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 2
17477: NEG
17478: PUSH
17479: LD_INT 2
17481: NEG
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 3
17489: PUSH
17490: LD_INT 2
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17535: LD_ADDR_VAR 0 17
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: LD_INT 0
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 0
17552: PUSH
17553: LD_INT 1
17555: NEG
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: LD_INT 0
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 1
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 0
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 1
17593: NEG
17594: PUSH
17595: LD_INT 0
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 1
17604: NEG
17605: PUSH
17606: LD_INT 1
17608: NEG
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 1
17616: NEG
17617: PUSH
17618: LD_INT 2
17620: NEG
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 0
17628: PUSH
17629: LD_INT 2
17631: NEG
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: LD_INT 1
17642: NEG
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 2
17650: PUSH
17651: LD_INT 0
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 2
17660: PUSH
17661: LD_INT 1
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 2
17670: PUSH
17671: LD_INT 2
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 1
17680: PUSH
17681: LD_INT 2
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 0
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 1
17700: NEG
17701: PUSH
17702: LD_INT 1
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 2
17711: NEG
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 2
17722: NEG
17723: PUSH
17724: LD_INT 1
17726: NEG
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 2
17734: NEG
17735: PUSH
17736: LD_INT 2
17738: NEG
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17765: LD_ADDR_VAR 0 18
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: LD_INT 0
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 0
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 1
17823: NEG
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 1
17834: NEG
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 1
17846: NEG
17847: PUSH
17848: LD_INT 2
17850: NEG
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 0
17858: PUSH
17859: LD_INT 2
17861: NEG
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 1
17869: PUSH
17870: LD_INT 1
17872: NEG
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 2
17880: PUSH
17881: LD_INT 0
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 2
17890: PUSH
17891: LD_INT 1
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: LD_INT 2
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 1
17910: PUSH
17911: LD_INT 2
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 0
17920: PUSH
17921: LD_INT 2
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 1
17930: NEG
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 2
17941: NEG
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 2
17952: NEG
17953: PUSH
17954: LD_INT 1
17956: NEG
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PUSH
17962: LD_INT 2
17964: NEG
17965: PUSH
17966: LD_INT 2
17968: NEG
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17995: LD_ADDR_VAR 0 19
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: LD_INT 0
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: LD_INT 1
18015: NEG
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: LD_INT 1
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: NEG
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 1
18064: NEG
18065: PUSH
18066: LD_INT 1
18068: NEG
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 1
18076: NEG
18077: PUSH
18078: LD_INT 2
18080: NEG
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 0
18088: PUSH
18089: LD_INT 2
18091: NEG
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 2
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 2
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: LD_INT 2
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: LD_INT 2
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 0
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 1
18160: NEG
18161: PUSH
18162: LD_INT 1
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 2
18171: NEG
18172: PUSH
18173: LD_INT 0
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 2
18182: NEG
18183: PUSH
18184: LD_INT 1
18186: NEG
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 2
18194: NEG
18195: PUSH
18196: LD_INT 2
18198: NEG
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18225: LD_ADDR_VAR 0 20
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: LD_INT 0
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 0
18242: PUSH
18243: LD_INT 1
18245: NEG
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: LD_INT 0
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 1
18283: NEG
18284: PUSH
18285: LD_INT 0
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 1
18294: NEG
18295: PUSH
18296: LD_INT 1
18298: NEG
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PUSH
18308: LD_INT 2
18310: NEG
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: LD_INT 2
18321: NEG
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 0
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 2
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 2
18360: PUSH
18361: LD_INT 2
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 1
18370: PUSH
18371: LD_INT 2
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 0
18380: PUSH
18381: LD_INT 2
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 1
18390: NEG
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 2
18401: NEG
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 2
18412: NEG
18413: PUSH
18414: LD_INT 1
18416: NEG
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 2
18424: NEG
18425: PUSH
18426: LD_INT 2
18428: NEG
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18455: LD_ADDR_VAR 0 21
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 0
18472: PUSH
18473: LD_INT 1
18475: NEG
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: LD_INT 1
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: LD_INT 1
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 1
18513: NEG
18514: PUSH
18515: LD_INT 0
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 1
18524: NEG
18525: PUSH
18526: LD_INT 1
18528: NEG
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 1
18536: NEG
18537: PUSH
18538: LD_INT 2
18540: NEG
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: LD_INT 2
18551: NEG
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: LD_INT 1
18562: NEG
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 2
18570: PUSH
18571: LD_INT 0
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 2
18590: PUSH
18591: LD_INT 2
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: LD_INT 2
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 0
18610: PUSH
18611: LD_INT 2
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: NEG
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 2
18631: NEG
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 2
18642: NEG
18643: PUSH
18644: LD_INT 1
18646: NEG
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 2
18654: NEG
18655: PUSH
18656: LD_INT 2
18658: NEG
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18685: LD_ADDR_VAR 0 22
18689: PUSH
18690: LD_INT 0
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 1
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 1
18743: NEG
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: LD_INT 1
18758: NEG
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: NEG
18767: PUSH
18768: LD_INT 2
18770: NEG
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: LD_INT 2
18781: NEG
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: LD_INT 1
18792: NEG
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: PUSH
18801: LD_INT 0
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 2
18810: PUSH
18811: LD_INT 1
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 1
18830: PUSH
18831: LD_INT 2
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 1
18850: NEG
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 2
18861: NEG
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 2
18872: NEG
18873: PUSH
18874: LD_INT 1
18876: NEG
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 2
18884: NEG
18885: PUSH
18886: LD_INT 2
18888: NEG
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18915: LD_ADDR_VAR 0 23
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: LD_INT 0
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 0
18932: PUSH
18933: LD_INT 1
18935: NEG
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 1
18973: NEG
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 1
18984: NEG
18985: PUSH
18986: LD_INT 1
18988: NEG
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: NEG
18997: PUSH
18998: LD_INT 2
19000: NEG
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: LD_INT 2
19011: NEG
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 1
19019: PUSH
19020: LD_INT 1
19022: NEG
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: LD_INT 2
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 0
19070: PUSH
19071: LD_INT 2
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 1
19080: NEG
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 2
19091: NEG
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 2
19102: NEG
19103: PUSH
19104: LD_INT 1
19106: NEG
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 2
19114: NEG
19115: PUSH
19116: LD_INT 2
19118: NEG
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 2
19126: NEG
19127: PUSH
19128: LD_INT 3
19130: NEG
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: NEG
19139: PUSH
19140: LD_INT 3
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: LD_INT 2
19153: NEG
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 2
19161: PUSH
19162: LD_INT 1
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19195: LD_ADDR_VAR 0 24
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: LD_INT 0
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: LD_INT 1
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: LD_INT 1
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: LD_INT 1
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: NEG
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 1
19264: NEG
19265: PUSH
19266: LD_INT 1
19268: NEG
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 1
19276: NEG
19277: PUSH
19278: LD_INT 2
19280: NEG
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: LD_INT 2
19291: NEG
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: LD_INT 1
19302: NEG
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 2
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 2
19320: PUSH
19321: LD_INT 1
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 2
19330: PUSH
19331: LD_INT 2
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: LD_INT 1
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 2
19371: NEG
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 2
19382: NEG
19383: PUSH
19384: LD_INT 1
19386: NEG
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 2
19394: NEG
19395: PUSH
19396: LD_INT 2
19398: NEG
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: LD_INT 2
19409: NEG
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 2
19417: PUSH
19418: LD_INT 1
19420: NEG
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 3
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 3
19438: PUSH
19439: LD_INT 2
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19471: LD_ADDR_VAR 0 25
19475: PUSH
19476: LD_INT 0
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: LD_INT 1
19491: NEG
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 0
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 1
19529: NEG
19530: PUSH
19531: LD_INT 0
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 1
19540: NEG
19541: PUSH
19542: LD_INT 1
19544: NEG
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 1
19552: NEG
19553: PUSH
19554: LD_INT 2
19556: NEG
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 2
19567: NEG
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: LD_INT 1
19578: NEG
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 2
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: LD_INT 2
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 0
19626: PUSH
19627: LD_INT 2
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 1
19636: NEG
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 2
19647: NEG
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 2
19658: NEG
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: LD_INT 2
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 3
19682: PUSH
19683: LD_INT 1
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 3
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: LD_INT 3
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 1
19712: PUSH
19713: LD_INT 3
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19745: LD_ADDR_VAR 0 26
19749: PUSH
19750: LD_INT 0
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: LD_INT 1
19765: NEG
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 1
19783: PUSH
19784: LD_INT 1
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 0
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 1
19803: NEG
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 1
19814: NEG
19815: PUSH
19816: LD_INT 1
19818: NEG
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 1
19826: NEG
19827: PUSH
19828: LD_INT 2
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 0
19838: PUSH
19839: LD_INT 2
19841: NEG
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: LD_INT 1
19852: NEG
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: LD_INT 0
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: LD_INT 1
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: LD_INT 2
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: LD_INT 2
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: LD_INT 2
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 1
19910: NEG
19911: PUSH
19912: LD_INT 1
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 2
19921: NEG
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: NEG
19933: PUSH
19934: LD_INT 1
19936: NEG
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 2
19944: NEG
19945: PUSH
19946: LD_INT 2
19948: NEG
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 1
19966: PUSH
19967: LD_INT 3
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 1
19976: NEG
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: LD_INT 1
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20021: LD_ADDR_VAR 0 27
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: LD_INT 1
20041: NEG
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 1
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: PUSH
20060: LD_INT 1
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: LD_INT 1
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 1
20079: NEG
20080: PUSH
20081: LD_INT 0
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 1
20090: NEG
20091: PUSH
20092: LD_INT 1
20094: NEG
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 1
20102: NEG
20103: PUSH
20104: LD_INT 2
20106: NEG
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: LD_INT 2
20117: NEG
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 2
20136: PUSH
20137: LD_INT 0
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 2
20146: PUSH
20147: LD_INT 1
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: LD_INT 2
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 1
20186: NEG
20187: PUSH
20188: LD_INT 1
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 2
20197: NEG
20198: PUSH
20199: LD_INT 0
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 2
20208: NEG
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 2
20220: NEG
20221: PUSH
20222: LD_INT 2
20224: NEG
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 1
20232: NEG
20233: PUSH
20234: LD_INT 2
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 2
20243: NEG
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 3
20254: NEG
20255: PUSH
20256: LD_INT 1
20258: NEG
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 3
20266: NEG
20267: PUSH
20268: LD_INT 2
20270: NEG
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20301: LD_ADDR_VAR 0 28
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: LD_INT 1
20321: NEG
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: LD_INT 1
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: LD_INT 0
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 1
20370: NEG
20371: PUSH
20372: LD_INT 1
20374: NEG
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: LD_INT 2
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 0
20394: PUSH
20395: LD_INT 2
20397: NEG
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: LD_INT 1
20408: NEG
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: LD_INT 0
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 2
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: LD_INT 2
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: LD_INT 2
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: LD_INT 2
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: NEG
20478: PUSH
20479: LD_INT 0
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 2
20488: NEG
20489: PUSH
20490: LD_INT 1
20492: NEG
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 2
20500: NEG
20501: PUSH
20502: LD_INT 2
20504: NEG
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 2
20512: NEG
20513: PUSH
20514: LD_INT 3
20516: NEG
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 1
20524: NEG
20525: PUSH
20526: LD_INT 3
20528: NEG
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 3
20536: NEG
20537: PUSH
20538: LD_INT 1
20540: NEG
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 3
20548: NEG
20549: PUSH
20550: LD_INT 2
20552: NEG
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20583: LD_ADDR_VAR 0 29
20587: PUSH
20588: LD_INT 0
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: LD_INT 0
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 1
20621: PUSH
20622: LD_INT 1
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 1
20641: NEG
20642: PUSH
20643: LD_INT 0
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 1
20652: NEG
20653: PUSH
20654: LD_INT 1
20656: NEG
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 1
20664: NEG
20665: PUSH
20666: LD_INT 2
20668: NEG
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 0
20676: PUSH
20677: LD_INT 2
20679: NEG
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: LD_INT 1
20690: NEG
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 1
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 0
20728: PUSH
20729: LD_INT 2
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 1
20738: NEG
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 2
20749: NEG
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 2
20761: NEG
20762: PUSH
20763: LD_INT 2
20765: NEG
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 2
20773: NEG
20774: PUSH
20775: LD_INT 3
20777: NEG
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 3
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: LD_INT 3
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: LD_INT 2
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 3
20827: NEG
20828: PUSH
20829: LD_INT 2
20831: NEG
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20862: LD_ADDR_VAR 0 30
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: LD_INT 0
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: LD_INT 1
20882: NEG
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 0
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: LD_INT 0
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 1
20931: NEG
20932: PUSH
20933: LD_INT 1
20935: NEG
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 1
20943: NEG
20944: PUSH
20945: LD_INT 2
20947: NEG
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: LD_INT 2
20958: NEG
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 1
20969: NEG
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: LD_INT 0
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: LD_INT 1
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 2
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: LD_INT 2
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: NEG
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 2
21028: NEG
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 2
21039: NEG
21040: PUSH
21041: LD_INT 1
21043: NEG
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 1
21051: NEG
21052: PUSH
21053: LD_INT 3
21055: NEG
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 3
21074: PUSH
21075: LD_INT 2
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 2
21084: PUSH
21085: LD_INT 3
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 2
21094: NEG
21095: PUSH
21096: LD_INT 1
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 3
21105: NEG
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21140: LD_ADDR_VAR 0 31
21144: PUSH
21145: LD_INT 0
21147: PUSH
21148: LD_INT 0
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: LD_INT 1
21160: NEG
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 1
21178: PUSH
21179: LD_INT 1
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 1
21198: NEG
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 1
21209: NEG
21210: PUSH
21211: LD_INT 1
21213: NEG
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 1
21221: NEG
21222: PUSH
21223: LD_INT 2
21225: NEG
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: LD_INT 1
21236: NEG
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 2
21244: PUSH
21245: LD_INT 0
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: LD_INT 2
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: LD_INT 2
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 0
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 1
21294: NEG
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 2
21305: NEG
21306: PUSH
21307: LD_INT 1
21309: NEG
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 2
21317: NEG
21318: PUSH
21319: LD_INT 2
21321: NEG
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: NEG
21330: PUSH
21331: LD_INT 3
21333: NEG
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 2
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 3
21352: PUSH
21353: LD_INT 1
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: LD_INT 3
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: LD_INT 2
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 3
21383: NEG
21384: PUSH
21385: LD_INT 2
21387: NEG
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21418: LD_ADDR_VAR 0 32
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: LD_INT 1
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 1
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: LD_INT 1
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 1
21476: NEG
21477: PUSH
21478: LD_INT 0
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 1
21487: NEG
21488: PUSH
21489: LD_INT 1
21491: NEG
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: LD_INT 2
21503: NEG
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 0
21511: PUSH
21512: LD_INT 2
21514: NEG
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: LD_INT 1
21525: NEG
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: LD_INT 2
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 1
21553: PUSH
21554: LD_INT 2
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: NEG
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 2
21584: NEG
21585: PUSH
21586: LD_INT 0
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 2
21595: NEG
21596: PUSH
21597: LD_INT 1
21599: NEG
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 1
21607: NEG
21608: PUSH
21609: LD_INT 3
21611: NEG
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: LD_INT 2
21622: NEG
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 3
21630: PUSH
21631: LD_INT 2
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 2
21640: PUSH
21641: LD_INT 3
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 2
21650: NEG
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 3
21661: NEG
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21696: LD_ADDR_VAR 0 33
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: LD_INT 1
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: NEG
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 1
21765: NEG
21766: PUSH
21767: LD_INT 1
21769: NEG
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 1
21777: NEG
21778: PUSH
21779: LD_INT 2
21781: NEG
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 1
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 2
21800: PUSH
21801: LD_INT 0
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 2
21810: PUSH
21811: LD_INT 1
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 1
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: LD_INT 1
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 2
21851: NEG
21852: PUSH
21853: LD_INT 0
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 2
21862: NEG
21863: PUSH
21864: LD_INT 1
21866: NEG
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: NEG
21875: PUSH
21876: LD_INT 2
21878: NEG
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 2
21886: NEG
21887: PUSH
21888: LD_INT 3
21890: NEG
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 2
21898: PUSH
21899: LD_INT 1
21901: NEG
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 3
21909: PUSH
21910: LD_INT 1
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: LD_INT 3
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 1
21929: NEG
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 3
21940: NEG
21941: PUSH
21942: LD_INT 2
21944: NEG
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21975: LD_ADDR_VAR 0 34
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: LD_INT 0
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 0
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: LD_INT 1
22048: NEG
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 1
22056: NEG
22057: PUSH
22058: LD_INT 2
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: LD_INT 2
22071: NEG
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 2
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: LD_INT 2
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: NEG
22121: PUSH
22122: LD_INT 1
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 2
22131: NEG
22132: PUSH
22133: LD_INT 0
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 2
22142: NEG
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 2
22154: NEG
22155: PUSH
22156: LD_INT 2
22158: NEG
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 1
22166: NEG
22167: PUSH
22168: LD_INT 3
22170: NEG
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: LD_INT 2
22181: NEG
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 3
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 2
22199: PUSH
22200: LD_INT 3
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 2
22209: NEG
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 3
22220: NEG
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22255: LD_ADDR_VAR 0 35
22259: PUSH
22260: LD_INT 0
22262: PUSH
22263: LD_INT 0
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: LD_INT 1
22275: NEG
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 1
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 1
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 0
22303: PUSH
22304: LD_INT 1
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 1
22313: NEG
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: LD_INT 1
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 2
22346: NEG
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22367: LD_ADDR_VAR 0 36
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 0
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 1
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: LD_INT 1
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: LD_INT 1
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: NEG
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: NEG
22449: PUSH
22450: LD_INT 2
22452: NEG
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: LD_INT 2
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22479: LD_ADDR_VAR 0 37
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 0
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 1
22537: NEG
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 1
22548: NEG
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 1
22560: PUSH
22561: LD_INT 1
22563: NEG
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 1
22571: NEG
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22591: LD_ADDR_VAR 0 38
22595: PUSH
22596: LD_INT 0
22598: PUSH
22599: LD_INT 0
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: LD_INT 1
22611: NEG
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: PUSH
22620: LD_INT 0
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 1
22649: NEG
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: NEG
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 2
22672: PUSH
22673: LD_INT 1
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 2
22682: NEG
22683: PUSH
22684: LD_INT 1
22686: NEG
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22703: LD_ADDR_VAR 0 39
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 1
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 1
22772: NEG
22773: PUSH
22774: LD_INT 1
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 1
22784: NEG
22785: PUSH
22786: LD_INT 2
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: LD_INT 2
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22815: LD_ADDR_VAR 0 40
22819: PUSH
22820: LD_INT 0
22822: PUSH
22823: LD_INT 0
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 1
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 1
22853: PUSH
22854: LD_INT 1
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 0
22863: PUSH
22864: LD_INT 1
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: NEG
22874: PUSH
22875: LD_INT 0
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: LD_INT 1
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: NEG
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22927: LD_ADDR_VAR 0 41
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: LD_INT 0
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: LD_INT 1
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 1
22965: PUSH
22966: LD_INT 1
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 0
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 1
22985: NEG
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 1
22996: NEG
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PUSH
23010: LD_INT 2
23012: NEG
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 2
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: LD_INT 2
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: LD_INT 2
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 1
23071: NEG
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 2
23082: NEG
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 2
23093: NEG
23094: PUSH
23095: LD_INT 1
23097: NEG
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 2
23105: NEG
23106: PUSH
23107: LD_INT 2
23109: NEG
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 2
23117: NEG
23118: PUSH
23119: LD_INT 3
23121: NEG
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 1
23132: NEG
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 3
23140: PUSH
23141: LD_INT 0
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 3
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 3
23160: PUSH
23161: LD_INT 2
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 3
23170: PUSH
23171: LD_INT 3
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 2
23180: PUSH
23181: LD_INT 3
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 2
23190: NEG
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 3
23201: NEG
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 3
23212: NEG
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 3
23224: NEG
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 3
23236: NEG
23237: PUSH
23238: LD_INT 3
23240: NEG
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23277: LD_ADDR_VAR 0 42
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: LD_INT 0
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: LD_INT 1
23297: NEG
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 1
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 1
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 1
23335: NEG
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: NEG
23347: PUSH
23348: LD_INT 1
23350: NEG
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 1
23358: NEG
23359: PUSH
23360: LD_INT 2
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: LD_INT 2
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 2
23402: PUSH
23403: LD_INT 2
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: LD_INT 2
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: LD_INT 2
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: NEG
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: NEG
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 2
23455: NEG
23456: PUSH
23457: LD_INT 2
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 2
23467: NEG
23468: PUSH
23469: LD_INT 3
23471: NEG
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 1
23479: NEG
23480: PUSH
23481: LD_INT 3
23483: NEG
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: LD_INT 3
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: LD_INT 2
23505: NEG
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 3
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 3
23523: PUSH
23524: LD_INT 3
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 2
23533: PUSH
23534: LD_INT 3
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: LD_INT 3
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 0
23553: PUSH
23554: LD_INT 3
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 1
23563: NEG
23564: PUSH
23565: LD_INT 2
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 3
23574: NEG
23575: PUSH
23576: LD_INT 2
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 3
23586: NEG
23587: PUSH
23588: LD_INT 3
23590: NEG
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23627: LD_ADDR_VAR 0 43
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: LD_INT 0
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 1
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 1
23685: NEG
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 2
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: LD_INT 2
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 2
23793: NEG
23794: PUSH
23795: LD_INT 0
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 2
23804: NEG
23805: PUSH
23806: LD_INT 1
23808: NEG
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: LD_INT 3
23820: NEG
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: LD_INT 3
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: LD_INT 2
23842: NEG
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 3
23861: PUSH
23862: LD_INT 0
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 3
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 1
23881: PUSH
23882: LD_INT 3
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 3
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 2
23912: NEG
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 3
23923: NEG
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 3
23934: NEG
23935: PUSH
23936: LD_INT 1
23938: NEG
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23975: LD_ADDR_VAR 0 44
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: LD_INT 1
23995: NEG
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 1
24056: NEG
24057: PUSH
24058: LD_INT 2
24060: NEG
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: LD_INT 0
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 2
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 2
24099: PUSH
24100: LD_INT 2
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 2
24130: NEG
24131: PUSH
24132: LD_INT 0
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 2
24141: NEG
24142: PUSH
24143: LD_INT 1
24145: NEG
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 2
24153: NEG
24154: PUSH
24155: LD_INT 2
24157: NEG
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 2
24165: NEG
24166: PUSH
24167: LD_INT 3
24169: NEG
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 3
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 3
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 3
24218: PUSH
24219: LD_INT 3
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 2
24228: PUSH
24229: LD_INT 3
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 2
24238: NEG
24239: PUSH
24240: LD_INT 1
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 3
24249: NEG
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 3
24260: NEG
24261: PUSH
24262: LD_INT 1
24264: NEG
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 3
24272: NEG
24273: PUSH
24274: LD_INT 2
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 3
24284: NEG
24285: PUSH
24286: LD_INT 3
24288: NEG
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24325: LD_ADDR_VAR 0 45
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: LD_INT 1
24345: NEG
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: NEG
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 1
24394: NEG
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 1
24406: NEG
24407: PUSH
24408: LD_INT 2
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: LD_INT 2
24421: NEG
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: LD_INT 1
24432: NEG
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 2
24440: PUSH
24441: LD_INT 1
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 1
24460: PUSH
24461: LD_INT 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: LD_INT 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 2
24491: NEG
24492: PUSH
24493: LD_INT 1
24495: NEG
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 2
24503: NEG
24504: PUSH
24505: LD_INT 2
24507: NEG
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 2
24515: NEG
24516: PUSH
24517: LD_INT 3
24519: NEG
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 1
24527: NEG
24528: PUSH
24529: LD_INT 3
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: LD_INT 3
24542: NEG
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 3
24561: PUSH
24562: LD_INT 2
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 3
24571: PUSH
24572: LD_INT 3
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 2
24581: PUSH
24582: LD_INT 3
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 3
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 3
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: NEG
24612: PUSH
24613: LD_INT 2
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 3
24622: NEG
24623: PUSH
24624: LD_INT 2
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 3
24634: NEG
24635: PUSH
24636: LD_INT 3
24638: NEG
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24675: LD_ADDR_VAR 0 46
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: LD_INT 1
24695: NEG
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: NEG
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: NEG
24757: PUSH
24758: LD_INT 2
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: LD_INT 2
24771: NEG
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 2
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: NEG
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: NEG
24853: PUSH
24854: LD_INT 1
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PUSH
24866: LD_INT 3
24868: NEG
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: LD_INT 3
24879: NEG
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: LD_INT 2
24890: NEG
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: LD_INT 1
24901: NEG
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 3
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 3
24919: PUSH
24920: LD_INT 1
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: LD_INT 3
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 3
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: NEG
24950: PUSH
24951: LD_INT 2
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 2
24960: NEG
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 3
24971: NEG
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 3
24982: NEG
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25023: LD_ADDR_VAR 0 47
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: NEG
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: LD_INT 2
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: LD_INT 1
25130: NEG
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 2
25138: NEG
25139: PUSH
25140: LD_INT 1
25142: NEG
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: NEG
25151: PUSH
25152: LD_INT 2
25154: NEG
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25174: LD_ADDR_VAR 0 48
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: LD_INT 0
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: LD_INT 1
25194: NEG
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 1
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 1
25243: NEG
25244: PUSH
25245: LD_INT 1
25247: NEG
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: LD_INT 2
25259: NEG
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 2
25270: NEG
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 1
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25321: LD_ADDR_VAR 0 49
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: LD_INT 1
25341: NEG
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 1
25379: NEG
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 2
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 2
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 2
25433: PUSH
25434: LD_INT 2
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: LD_INT 2
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25465: LD_ADDR_VAR 0 50
25469: PUSH
25470: LD_INT 0
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: LD_INT 1
25485: NEG
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 0
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 1
25534: NEG
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 2
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 2
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25609: LD_ADDR_VAR 0 51
25613: PUSH
25614: LD_INT 0
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: LD_INT 1
25629: NEG
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 1
25667: NEG
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: LD_INT 1
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 2
25721: NEG
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 2
25732: NEG
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25756: LD_ADDR_VAR 0 52
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: LD_INT 1
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: LD_INT 1
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: NEG
25815: PUSH
25816: LD_INT 0
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: LD_INT 2
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: NEG
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 2
25860: NEG
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 2
25871: NEG
25872: PUSH
25873: LD_INT 1
25875: NEG
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 2
25883: NEG
25884: PUSH
25885: LD_INT 2
25887: NEG
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25907: LD_ADDR_VAR 0 53
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: LD_INT 1
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: NEG
25966: PUSH
25967: LD_INT 0
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 1
25976: NEG
25977: PUSH
25978: LD_INT 1
25980: NEG
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: NEG
25989: PUSH
25990: LD_INT 2
25992: NEG
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: LD_INT 2
26003: NEG
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 2
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: LD_INT 2
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: LD_INT 2
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 1
26072: NEG
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: LD_INT 1
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 2
26106: NEG
26107: PUSH
26108: LD_INT 2
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26137: LD_ADDR_VAR 0 54
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: LD_INT 0
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: LD_INT 1
26210: NEG
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: NEG
26219: PUSH
26220: LD_INT 2
26222: NEG
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: LD_INT 2
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 2
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: LD_INT 2
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 0
26292: PUSH
26293: LD_INT 2
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 1
26302: NEG
26303: PUSH
26304: LD_INT 1
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 2
26313: NEG
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 2
26324: NEG
26325: PUSH
26326: LD_INT 1
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 2
26336: NEG
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26367: LD_ADDR_VAR 0 55
26371: PUSH
26372: LD_INT 0
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: LD_INT 1
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: LD_INT 1
26440: NEG
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: LD_INT 2
26452: NEG
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: LD_INT 2
26463: NEG
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: LD_INT 1
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: LD_INT 2
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: LD_INT 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: LD_INT 2
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: NEG
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: NEG
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 2
26554: NEG
26555: PUSH
26556: LD_INT 1
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 2
26566: NEG
26567: PUSH
26568: LD_INT 2
26570: NEG
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26597: LD_ADDR_VAR 0 56
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: LD_INT 2
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: LD_INT 2
26693: NEG
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: LD_INT 1
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 2
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: LD_INT 2
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: LD_INT 2
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: NEG
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 2
26784: NEG
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 2
26796: NEG
26797: PUSH
26798: LD_INT 2
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26827: LD_ADDR_VAR 0 57
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 1
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: LD_INT 1
26900: NEG
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 1
26908: NEG
26909: PUSH
26910: LD_INT 2
26912: NEG
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 2
26923: NEG
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 2
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: LD_INT 2
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: LD_INT 2
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 2
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 2
27003: NEG
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 2
27014: NEG
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 2
27026: NEG
27027: PUSH
27028: LD_INT 2
27030: NEG
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27057: LD_ADDR_VAR 0 58
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 1
27115: NEG
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: LD_INT 1
27130: NEG
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: LD_INT 2
27142: NEG
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: LD_INT 2
27153: NEG
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 2
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: NEG
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 2
27233: NEG
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 2
27244: NEG
27245: PUSH
27246: LD_INT 1
27248: NEG
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 2
27256: NEG
27257: PUSH
27258: LD_INT 2
27260: NEG
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27287: LD_ADDR_VAR 0 59
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: LD_INT 1
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 1
27345: NEG
27346: PUSH
27347: LD_INT 0
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: NEG
27357: PUSH
27358: LD_INT 1
27360: NEG
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27375: LD_ADDR_VAR 0 60
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: LD_INT 0
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: LD_INT 1
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: LD_INT 1
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 1
27448: NEG
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27463: LD_ADDR_VAR 0 61
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 1
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: NEG
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27551: LD_ADDR_VAR 0 62
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 0
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27639: LD_ADDR_VAR 0 63
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: LD_INT 1
27712: NEG
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27727: LD_ADDR_VAR 0 64
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: ST_TO_ADDR
// end ; 1 :
27815: GO 33712
27817: LD_INT 1
27819: DOUBLE
27820: EQUAL
27821: IFTRUE 27825
27823: GO 30448
27825: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27826: LD_ADDR_VAR 0 11
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: LD_INT 3
27837: NEG
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 3
27848: NEG
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: LD_INT 2
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27870: LD_ADDR_VAR 0 12
27874: PUSH
27875: LD_INT 2
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 3
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 3
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27911: LD_ADDR_VAR 0 13
27915: PUSH
27916: LD_INT 3
27918: PUSH
27919: LD_INT 2
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 3
27928: PUSH
27929: LD_INT 3
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 2
27938: PUSH
27939: LD_INT 3
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27951: LD_ADDR_VAR 0 14
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: LD_INT 3
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: LD_INT 3
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 1
27978: NEG
27979: PUSH
27980: LD_INT 2
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: LIST
27991: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27992: LD_ADDR_VAR 0 15
27996: PUSH
27997: LD_INT 2
27999: NEG
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 3
28010: NEG
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 3
28021: NEG
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: LIST
28035: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28036: LD_ADDR_VAR 0 16
28040: PUSH
28041: LD_INT 2
28043: NEG
28044: PUSH
28045: LD_INT 3
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 3
28055: NEG
28056: PUSH
28057: LD_INT 2
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 3
28067: NEG
28068: PUSH
28069: LD_INT 3
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28082: LD_ADDR_VAR 0 17
28086: PUSH
28087: LD_INT 1
28089: NEG
28090: PUSH
28091: LD_INT 3
28093: NEG
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: LD_INT 3
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: LD_INT 2
28115: NEG
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: LIST
28125: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28126: LD_ADDR_VAR 0 18
28130: PUSH
28131: LD_INT 2
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 3
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 3
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: LIST
28166: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28167: LD_ADDR_VAR 0 19
28171: PUSH
28172: LD_INT 3
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 3
28184: PUSH
28185: LD_INT 3
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 2
28194: PUSH
28195: LD_INT 3
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28207: LD_ADDR_VAR 0 20
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: LD_INT 3
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: LD_INT 3
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: NEG
28235: PUSH
28236: LD_INT 2
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28248: LD_ADDR_VAR 0 21
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 3
28266: NEG
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 3
28277: NEG
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: LIST
28291: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28292: LD_ADDR_VAR 0 22
28296: PUSH
28297: LD_INT 2
28299: NEG
28300: PUSH
28301: LD_INT 3
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 3
28311: NEG
28312: PUSH
28313: LD_INT 2
28315: NEG
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 3
28323: NEG
28324: PUSH
28325: LD_INT 3
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28338: LD_ADDR_VAR 0 23
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 3
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: PUSH
28358: LD_INT 4
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: PUSH
28369: LD_INT 3
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28382: LD_ADDR_VAR 0 24
28386: PUSH
28387: LD_INT 3
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 3
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 4
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: LIST
28422: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28423: LD_ADDR_VAR 0 25
28427: PUSH
28428: LD_INT 3
28430: PUSH
28431: LD_INT 3
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 4
28440: PUSH
28441: LD_INT 3
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 3
28450: PUSH
28451: LD_INT 4
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28463: LD_ADDR_VAR 0 26
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: LD_INT 3
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: LD_INT 4
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: NEG
28491: PUSH
28492: LD_INT 3
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: LIST
28503: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28504: LD_ADDR_VAR 0 27
28508: PUSH
28509: LD_INT 3
28511: NEG
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 3
28522: NEG
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 4
28533: NEG
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: LIST
28547: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28548: LD_ADDR_VAR 0 28
28552: PUSH
28553: LD_INT 3
28555: NEG
28556: PUSH
28557: LD_INT 3
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 3
28567: NEG
28568: PUSH
28569: LD_INT 4
28571: NEG
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 4
28579: NEG
28580: PUSH
28581: LD_INT 3
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28594: LD_ADDR_VAR 0 29
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: LD_INT 3
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 3
28616: NEG
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: LD_INT 2
28627: NEG
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 1
28635: NEG
28636: PUSH
28637: LD_INT 4
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: LD_INT 4
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: LD_INT 3
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: LD_INT 5
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: LD_INT 5
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: LD_INT 4
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 1
28703: NEG
28704: PUSH
28705: LD_INT 6
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: LD_INT 6
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 1
28726: PUSH
28727: LD_INT 5
28729: NEG
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28749: LD_ADDR_VAR 0 30
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 3
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 3
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 3
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 4
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 4
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 4
28818: PUSH
28819: LD_INT 1
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 5
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 5
28839: PUSH
28840: LD_INT 1
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 5
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 6
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 6
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28892: LD_ADDR_VAR 0 31
28896: PUSH
28897: LD_INT 3
28899: PUSH
28900: LD_INT 2
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 3
28909: PUSH
28910: LD_INT 3
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: LD_INT 3
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 4
28929: PUSH
28930: LD_INT 3
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 4
28939: PUSH
28940: LD_INT 4
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 3
28949: PUSH
28950: LD_INT 4
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 5
28959: PUSH
28960: LD_INT 4
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 5
28969: PUSH
28970: LD_INT 5
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 4
28979: PUSH
28980: LD_INT 5
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 6
28989: PUSH
28990: LD_INT 5
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 6
28999: PUSH
29000: LD_INT 6
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 5
29009: PUSH
29010: LD_INT 6
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29031: LD_ADDR_VAR 0 32
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: LD_INT 3
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: LD_INT 3
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 1
29058: NEG
29059: PUSH
29060: LD_INT 2
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: LD_INT 4
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: LD_INT 4
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: NEG
29090: PUSH
29091: LD_INT 3
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: LD_INT 5
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: LD_INT 5
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 1
29120: NEG
29121: PUSH
29122: LD_INT 4
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: LD_INT 6
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 6
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: NEG
29152: PUSH
29153: LD_INT 5
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29174: LD_ADDR_VAR 0 33
29178: PUSH
29179: LD_INT 2
29181: NEG
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 3
29192: NEG
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 3
29203: NEG
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 3
29215: NEG
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 4
29226: NEG
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 4
29237: NEG
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 4
29249: NEG
29250: PUSH
29251: LD_INT 1
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 5
29260: NEG
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 5
29271: NEG
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 5
29283: NEG
29284: PUSH
29285: LD_INT 1
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 6
29294: NEG
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 6
29305: NEG
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29329: LD_ADDR_VAR 0 34
29333: PUSH
29334: LD_INT 2
29336: NEG
29337: PUSH
29338: LD_INT 3
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 3
29348: NEG
29349: PUSH
29350: LD_INT 2
29352: NEG
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 3
29360: NEG
29361: PUSH
29362: LD_INT 3
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 3
29372: NEG
29373: PUSH
29374: LD_INT 4
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 4
29384: NEG
29385: PUSH
29386: LD_INT 3
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 4
29396: NEG
29397: PUSH
29398: LD_INT 4
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 4
29408: NEG
29409: PUSH
29410: LD_INT 5
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 5
29420: NEG
29421: PUSH
29422: LD_INT 4
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 5
29432: NEG
29433: PUSH
29434: LD_INT 5
29436: NEG
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 5
29444: NEG
29445: PUSH
29446: LD_INT 6
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 6
29456: NEG
29457: PUSH
29458: LD_INT 5
29460: NEG
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 6
29468: NEG
29469: PUSH
29470: LD_INT 6
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29492: LD_ADDR_VAR 0 41
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: LD_INT 2
29502: NEG
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: LD_INT 3
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: LD_INT 2
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: LIST
29535: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29536: LD_ADDR_VAR 0 42
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 3
29564: PUSH
29565: LD_INT 1
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29577: LD_ADDR_VAR 0 43
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: LD_INT 2
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 3
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: LD_INT 3
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: LIST
29616: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29617: LD_ADDR_VAR 0 44
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: LD_INT 2
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 1
29634: PUSH
29635: LD_INT 3
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: LD_INT 2
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29658: LD_ADDR_VAR 0 45
29662: PUSH
29663: LD_INT 2
29665: NEG
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 2
29676: NEG
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 3
29687: NEG
29688: PUSH
29689: LD_INT 1
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: LIST
29701: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29702: LD_ADDR_VAR 0 46
29706: PUSH
29707: LD_INT 2
29709: NEG
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 2
29721: NEG
29722: PUSH
29723: LD_INT 3
29725: NEG
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 3
29733: NEG
29734: PUSH
29735: LD_INT 2
29737: NEG
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29748: LD_ADDR_VAR 0 47
29752: PUSH
29753: LD_INT 2
29755: NEG
29756: PUSH
29757: LD_INT 3
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 1
29767: NEG
29768: PUSH
29769: LD_INT 3
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29781: LD_ADDR_VAR 0 48
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: LD_INT 2
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 2
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29812: LD_ADDR_VAR 0 49
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 3
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29841: LD_ADDR_VAR 0 50
29845: PUSH
29846: LD_INT 2
29848: PUSH
29849: LD_INT 3
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: LD_INT 3
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29870: LD_ADDR_VAR 0 51
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: LD_INT 2
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 2
29888: NEG
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29901: LD_ADDR_VAR 0 52
29905: PUSH
29906: LD_INT 3
29908: NEG
29909: PUSH
29910: LD_INT 1
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 3
29920: NEG
29921: PUSH
29922: LD_INT 2
29924: NEG
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29934: LD_ADDR_VAR 0 53
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: LD_INT 3
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: LD_INT 3
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: LD_INT 2
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: LIST
29977: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29978: LD_ADDR_VAR 0 54
29982: PUSH
29983: LD_INT 2
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 3
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 3
30006: PUSH
30007: LD_INT 1
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: LIST
30018: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30019: LD_ADDR_VAR 0 55
30023: PUSH
30024: LD_INT 3
30026: PUSH
30027: LD_INT 2
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 3
30036: PUSH
30037: LD_INT 3
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: LD_INT 3
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30059: LD_ADDR_VAR 0 56
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: LD_INT 3
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: LIST
30099: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30100: LD_ADDR_VAR 0 57
30104: PUSH
30105: LD_INT 2
30107: NEG
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 3
30118: NEG
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 3
30129: NEG
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30144: LD_ADDR_VAR 0 58
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: LD_INT 3
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 3
30163: NEG
30164: PUSH
30165: LD_INT 2
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 3
30175: NEG
30176: PUSH
30177: LD_INT 3
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30190: LD_ADDR_VAR 0 59
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: LD_INT 2
30201: NEG
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: LD_INT 2
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: LIST
30233: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30234: LD_ADDR_VAR 0 60
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 1
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: LIST
30274: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30275: LD_ADDR_VAR 0 61
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 2
30292: PUSH
30293: LD_INT 2
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: PUSH
30303: LD_INT 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30315: LD_ADDR_VAR 0 62
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: LD_INT 2
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30356: LD_ADDR_VAR 0 63
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 2
30374: NEG
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 2
30385: NEG
30386: PUSH
30387: LD_INT 1
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30400: LD_ADDR_VAR 0 64
30404: PUSH
30405: LD_INT 1
30407: NEG
30408: PUSH
30409: LD_INT 2
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 2
30419: NEG
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: ST_TO_ADDR
// end ; 2 :
30446: GO 33712
30448: LD_INT 2
30450: DOUBLE
30451: EQUAL
30452: IFTRUE 30456
30454: GO 33711
30456: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30457: LD_ADDR_VAR 0 29
30461: PUSH
30462: LD_INT 4
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 4
30474: PUSH
30475: LD_INT 1
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 5
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 5
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 4
30505: PUSH
30506: LD_INT 1
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: LD_INT 1
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 3
30536: PUSH
30537: LD_INT 2
30539: NEG
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 5
30547: PUSH
30548: LD_INT 2
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 3
30557: PUSH
30558: LD_INT 3
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: LD_INT 2
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 4
30577: PUSH
30578: LD_INT 3
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 4
30587: PUSH
30588: LD_INT 4
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: LD_INT 4
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: LD_INT 3
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 2
30617: PUSH
30618: LD_INT 2
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 4
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 4
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: LD_INT 4
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 0
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: PUSH
30668: LD_INT 4
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: LD_INT 5
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 0
30687: PUSH
30688: LD_INT 5
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 1
30697: NEG
30698: PUSH
30699: LD_INT 4
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: LD_INT 3
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 2
30719: PUSH
30720: LD_INT 5
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 2
30729: NEG
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 3
30740: NEG
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 3
30751: NEG
30752: PUSH
30753: LD_INT 1
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 2
30763: NEG
30764: PUSH
30765: LD_INT 0
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 2
30774: NEG
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 3
30785: NEG
30786: PUSH
30787: LD_INT 1
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 4
30796: NEG
30797: PUSH
30798: LD_INT 0
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 4
30807: NEG
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 4
30819: NEG
30820: PUSH
30821: LD_INT 2
30823: NEG
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 4
30842: NEG
30843: PUSH
30844: LD_INT 4
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 4
30854: NEG
30855: PUSH
30856: LD_INT 5
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 3
30866: NEG
30867: PUSH
30868: LD_INT 4
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 3
30878: NEG
30879: PUSH
30880: LD_INT 3
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 4
30890: NEG
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 5
30902: NEG
30903: PUSH
30904: LD_INT 4
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 5
30914: NEG
30915: PUSH
30916: LD_INT 5
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 3
30926: NEG
30927: PUSH
30928: LD_INT 5
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 5
30938: NEG
30939: PUSH
30940: LD_INT 3
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30995: LD_ADDR_VAR 0 30
30999: PUSH
31000: LD_INT 4
31002: PUSH
31003: LD_INT 4
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 4
31012: PUSH
31013: LD_INT 3
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 5
31022: PUSH
31023: LD_INT 4
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 5
31032: PUSH
31033: LD_INT 5
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 4
31042: PUSH
31043: LD_INT 5
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 3
31052: PUSH
31053: LD_INT 4
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 3
31062: PUSH
31063: LD_INT 3
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 5
31072: PUSH
31073: LD_INT 3
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: LD_INT 5
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: LD_INT 3
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: LD_INT 2
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: LD_INT 3
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: LD_INT 4
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: LD_INT 4
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: LD_INT 3
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: NEG
31154: PUSH
31155: LD_INT 2
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: LD_INT 4
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 4
31185: NEG
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 4
31196: NEG
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 3
31208: NEG
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 3
31219: NEG
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 4
31230: NEG
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 5
31241: NEG
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 5
31252: NEG
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 5
31264: NEG
31265: PUSH
31266: LD_INT 2
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 3
31276: NEG
31277: PUSH
31278: LD_INT 2
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 3
31287: NEG
31288: PUSH
31289: LD_INT 3
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 3
31299: NEG
31300: PUSH
31301: LD_INT 4
31303: NEG
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 2
31311: NEG
31312: PUSH
31313: LD_INT 3
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 2
31323: NEG
31324: PUSH
31325: LD_INT 2
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 3
31335: NEG
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 4
31347: NEG
31348: PUSH
31349: LD_INT 3
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 4
31359: NEG
31360: PUSH
31361: LD_INT 4
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: LD_INT 4
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 4
31383: NEG
31384: PUSH
31385: LD_INT 2
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: LD_INT 4
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: LD_INT 5
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 4
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: LD_INT 3
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: LD_INT 3
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: LD_INT 4
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 5
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 3
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 2
31485: NEG
31486: PUSH
31487: LD_INT 5
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31542: LD_ADDR_VAR 0 31
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: LD_INT 4
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: LD_INT 3
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: LD_INT 4
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: LD_INT 5
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: LD_INT 5
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: NEG
31600: PUSH
31601: LD_INT 4
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: NEG
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: LD_INT 5
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 3
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: NEG
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 3
31653: NEG
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 3
31687: NEG
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 4
31698: NEG
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 4
31709: NEG
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 4
31721: NEG
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: LD_INT 2
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 4
31744: NEG
31745: PUSH
31746: LD_INT 4
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 4
31756: NEG
31757: PUSH
31758: LD_INT 5
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 3
31768: NEG
31769: PUSH
31770: LD_INT 4
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 3
31780: NEG
31781: PUSH
31782: LD_INT 3
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 4
31792: NEG
31793: PUSH
31794: LD_INT 3
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 5
31804: NEG
31805: PUSH
31806: LD_INT 4
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 5
31816: NEG
31817: PUSH
31818: LD_INT 5
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 3
31828: NEG
31829: PUSH
31830: LD_INT 5
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 5
31840: NEG
31841: PUSH
31842: LD_INT 3
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: LD_INT 3
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 4
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: LD_INT 3
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: LD_INT 2
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 3
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: LD_INT 4
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 2
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: NEG
31943: PUSH
31944: LD_INT 4
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 4
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 4
31964: PUSH
31965: LD_INT 1
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 5
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 5
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 4
31995: PUSH
31996: LD_INT 1
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 3
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 3
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 3
32026: PUSH
32027: LD_INT 2
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 5
32037: PUSH
32038: LD_INT 2
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32092: LD_ADDR_VAR 0 32
32096: PUSH
32097: LD_INT 4
32099: NEG
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 4
32110: NEG
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 3
32133: NEG
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 4
32144: NEG
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 5
32155: NEG
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 5
32166: NEG
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 5
32178: NEG
32179: PUSH
32180: LD_INT 2
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 3
32190: NEG
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 3
32201: NEG
32202: PUSH
32203: LD_INT 3
32205: NEG
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 3
32213: NEG
32214: PUSH
32215: LD_INT 4
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 2
32225: NEG
32226: PUSH
32227: LD_INT 3
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 2
32237: NEG
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 3
32249: NEG
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 4
32261: NEG
32262: PUSH
32263: LD_INT 3
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 4
32273: NEG
32274: PUSH
32275: LD_INT 4
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 2
32285: NEG
32286: PUSH
32287: LD_INT 4
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 4
32297: NEG
32298: PUSH
32299: LD_INT 2
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 4
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: LD_INT 5
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: LD_INT 4
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: LD_INT 3
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: LD_INT 3
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 1
32364: NEG
32365: PUSH
32366: LD_INT 4
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: LD_INT 5
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 2
32388: PUSH
32389: LD_INT 3
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: LD_INT 5
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 3
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 3
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 4
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 4
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: LD_INT 0
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 2
32472: PUSH
32473: LD_INT 1
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 2
32483: PUSH
32484: LD_INT 2
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 4
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 4
32504: PUSH
32505: LD_INT 4
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 4
32514: PUSH
32515: LD_INT 3
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 5
32524: PUSH
32525: LD_INT 4
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 5
32534: PUSH
32535: LD_INT 5
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 4
32544: PUSH
32545: LD_INT 5
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 3
32554: PUSH
32555: LD_INT 4
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 3
32564: PUSH
32565: LD_INT 3
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 5
32574: PUSH
32575: LD_INT 3
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 3
32584: PUSH
32585: LD_INT 5
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32639: LD_ADDR_VAR 0 33
32643: PUSH
32644: LD_INT 4
32646: NEG
32647: PUSH
32648: LD_INT 4
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 4
32658: NEG
32659: PUSH
32660: LD_INT 5
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 3
32670: NEG
32671: PUSH
32672: LD_INT 4
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 3
32682: NEG
32683: PUSH
32684: LD_INT 3
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 4
32694: NEG
32695: PUSH
32696: LD_INT 3
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 5
32706: NEG
32707: PUSH
32708: LD_INT 4
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 5
32718: NEG
32719: PUSH
32720: LD_INT 5
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 3
32730: NEG
32731: PUSH
32732: LD_INT 5
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 5
32742: NEG
32743: PUSH
32744: LD_INT 3
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: LD_INT 3
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 4
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 3
32779: NEG
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: LD_INT 3
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 4
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: LD_INT 2
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: LD_INT 4
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 4
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 4
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 5
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 5
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 4
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 3
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 3
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 3
32928: PUSH
32929: LD_INT 2
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 5
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 3
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 3
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 4
32969: PUSH
32970: LD_INT 3
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 4
32979: PUSH
32980: LD_INT 4
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 3
32989: PUSH
32990: LD_INT 4
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 2
32999: PUSH
33000: LD_INT 3
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 2
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 4
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: LD_INT 4
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 4
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 0
33049: PUSH
33050: LD_INT 3
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: LD_INT 4
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: LD_INT 5
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: LD_INT 5
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: LD_INT 4
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: LD_INT 3
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: LD_INT 5
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33177: LD_ADDR_VAR 0 34
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: LD_INT 4
33187: NEG
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: LD_INT 5
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: LD_INT 4
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 3
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: LD_INT 3
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: LD_INT 4
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: LD_INT 5
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: LD_INT 3
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: LD_INT 5
33278: NEG
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 3
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 3
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 4
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 4
33317: PUSH
33318: LD_INT 1
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 3
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 4
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 4
33379: PUSH
33380: LD_INT 4
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 4
33389: PUSH
33390: LD_INT 3
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 5
33399: PUSH
33400: LD_INT 4
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 5
33409: PUSH
33410: LD_INT 5
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 4
33419: PUSH
33420: LD_INT 5
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 3
33429: PUSH
33430: LD_INT 4
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 3
33439: PUSH
33440: LD_INT 3
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 5
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 3
33459: PUSH
33460: LD_INT 5
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: LD_INT 3
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 0
33479: PUSH
33480: LD_INT 2
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 1
33489: PUSH
33490: LD_INT 3
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: PUSH
33500: LD_INT 4
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: LD_INT 4
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: LD_INT 3
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: LD_INT 2
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: LD_INT 4
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: NEG
33552: PUSH
33553: LD_INT 2
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 4
33562: NEG
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 4
33573: NEG
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 3
33585: NEG
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 3
33596: NEG
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 4
33607: NEG
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 5
33618: NEG
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 5
33629: NEG
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 5
33641: NEG
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 3
33653: NEG
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: ST_TO_ADDR
// end ; end ;
33709: GO 33712
33711: POP
// case btype of b_depot , b_warehouse :
33712: LD_VAR 0 1
33716: PUSH
33717: LD_INT 0
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33731
33723: LD_INT 1
33725: DOUBLE
33726: EQUAL
33727: IFTRUE 33731
33729: GO 33932
33731: POP
// case nation of nation_american :
33732: LD_VAR 0 5
33736: PUSH
33737: LD_INT 1
33739: DOUBLE
33740: EQUAL
33741: IFTRUE 33745
33743: GO 33801
33745: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33746: LD_ADDR_VAR 0 9
33750: PUSH
33751: LD_VAR 0 11
33755: PUSH
33756: LD_VAR 0 12
33760: PUSH
33761: LD_VAR 0 13
33765: PUSH
33766: LD_VAR 0 14
33770: PUSH
33771: LD_VAR 0 15
33775: PUSH
33776: LD_VAR 0 16
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: PUSH
33789: LD_VAR 0 4
33793: PUSH
33794: LD_INT 1
33796: PLUS
33797: ARRAY
33798: ST_TO_ADDR
33799: GO 33930
33801: LD_INT 2
33803: DOUBLE
33804: EQUAL
33805: IFTRUE 33809
33807: GO 33865
33809: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33810: LD_ADDR_VAR 0 9
33814: PUSH
33815: LD_VAR 0 17
33819: PUSH
33820: LD_VAR 0 18
33824: PUSH
33825: LD_VAR 0 19
33829: PUSH
33830: LD_VAR 0 20
33834: PUSH
33835: LD_VAR 0 21
33839: PUSH
33840: LD_VAR 0 22
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: PUSH
33853: LD_VAR 0 4
33857: PUSH
33858: LD_INT 1
33860: PLUS
33861: ARRAY
33862: ST_TO_ADDR
33863: GO 33930
33865: LD_INT 3
33867: DOUBLE
33868: EQUAL
33869: IFTRUE 33873
33871: GO 33929
33873: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33874: LD_ADDR_VAR 0 9
33878: PUSH
33879: LD_VAR 0 23
33883: PUSH
33884: LD_VAR 0 24
33888: PUSH
33889: LD_VAR 0 25
33893: PUSH
33894: LD_VAR 0 26
33898: PUSH
33899: LD_VAR 0 27
33903: PUSH
33904: LD_VAR 0 28
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: PUSH
33917: LD_VAR 0 4
33921: PUSH
33922: LD_INT 1
33924: PLUS
33925: ARRAY
33926: ST_TO_ADDR
33927: GO 33930
33929: POP
33930: GO 34485
33932: LD_INT 2
33934: DOUBLE
33935: EQUAL
33936: IFTRUE 33946
33938: LD_INT 3
33940: DOUBLE
33941: EQUAL
33942: IFTRUE 33946
33944: GO 34002
33946: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33947: LD_ADDR_VAR 0 9
33951: PUSH
33952: LD_VAR 0 29
33956: PUSH
33957: LD_VAR 0 30
33961: PUSH
33962: LD_VAR 0 31
33966: PUSH
33967: LD_VAR 0 32
33971: PUSH
33972: LD_VAR 0 33
33976: PUSH
33977: LD_VAR 0 34
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: PUSH
33990: LD_VAR 0 4
33994: PUSH
33995: LD_INT 1
33997: PLUS
33998: ARRAY
33999: ST_TO_ADDR
34000: GO 34485
34002: LD_INT 16
34004: DOUBLE
34005: EQUAL
34006: IFTRUE 34064
34008: LD_INT 17
34010: DOUBLE
34011: EQUAL
34012: IFTRUE 34064
34014: LD_INT 18
34016: DOUBLE
34017: EQUAL
34018: IFTRUE 34064
34020: LD_INT 19
34022: DOUBLE
34023: EQUAL
34024: IFTRUE 34064
34026: LD_INT 22
34028: DOUBLE
34029: EQUAL
34030: IFTRUE 34064
34032: LD_INT 20
34034: DOUBLE
34035: EQUAL
34036: IFTRUE 34064
34038: LD_INT 21
34040: DOUBLE
34041: EQUAL
34042: IFTRUE 34064
34044: LD_INT 23
34046: DOUBLE
34047: EQUAL
34048: IFTRUE 34064
34050: LD_INT 24
34052: DOUBLE
34053: EQUAL
34054: IFTRUE 34064
34056: LD_INT 25
34058: DOUBLE
34059: EQUAL
34060: IFTRUE 34064
34062: GO 34120
34064: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34065: LD_ADDR_VAR 0 9
34069: PUSH
34070: LD_VAR 0 35
34074: PUSH
34075: LD_VAR 0 36
34079: PUSH
34080: LD_VAR 0 37
34084: PUSH
34085: LD_VAR 0 38
34089: PUSH
34090: LD_VAR 0 39
34094: PUSH
34095: LD_VAR 0 40
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: PUSH
34108: LD_VAR 0 4
34112: PUSH
34113: LD_INT 1
34115: PLUS
34116: ARRAY
34117: ST_TO_ADDR
34118: GO 34485
34120: LD_INT 6
34122: DOUBLE
34123: EQUAL
34124: IFTRUE 34176
34126: LD_INT 7
34128: DOUBLE
34129: EQUAL
34130: IFTRUE 34176
34132: LD_INT 8
34134: DOUBLE
34135: EQUAL
34136: IFTRUE 34176
34138: LD_INT 13
34140: DOUBLE
34141: EQUAL
34142: IFTRUE 34176
34144: LD_INT 12
34146: DOUBLE
34147: EQUAL
34148: IFTRUE 34176
34150: LD_INT 15
34152: DOUBLE
34153: EQUAL
34154: IFTRUE 34176
34156: LD_INT 11
34158: DOUBLE
34159: EQUAL
34160: IFTRUE 34176
34162: LD_INT 14
34164: DOUBLE
34165: EQUAL
34166: IFTRUE 34176
34168: LD_INT 10
34170: DOUBLE
34171: EQUAL
34172: IFTRUE 34176
34174: GO 34232
34176: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34177: LD_ADDR_VAR 0 9
34181: PUSH
34182: LD_VAR 0 41
34186: PUSH
34187: LD_VAR 0 42
34191: PUSH
34192: LD_VAR 0 43
34196: PUSH
34197: LD_VAR 0 44
34201: PUSH
34202: LD_VAR 0 45
34206: PUSH
34207: LD_VAR 0 46
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: PUSH
34220: LD_VAR 0 4
34224: PUSH
34225: LD_INT 1
34227: PLUS
34228: ARRAY
34229: ST_TO_ADDR
34230: GO 34485
34232: LD_INT 36
34234: DOUBLE
34235: EQUAL
34236: IFTRUE 34240
34238: GO 34296
34240: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34241: LD_ADDR_VAR 0 9
34245: PUSH
34246: LD_VAR 0 47
34250: PUSH
34251: LD_VAR 0 48
34255: PUSH
34256: LD_VAR 0 49
34260: PUSH
34261: LD_VAR 0 50
34265: PUSH
34266: LD_VAR 0 51
34270: PUSH
34271: LD_VAR 0 52
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: PUSH
34284: LD_VAR 0 4
34288: PUSH
34289: LD_INT 1
34291: PLUS
34292: ARRAY
34293: ST_TO_ADDR
34294: GO 34485
34296: LD_INT 4
34298: DOUBLE
34299: EQUAL
34300: IFTRUE 34322
34302: LD_INT 5
34304: DOUBLE
34305: EQUAL
34306: IFTRUE 34322
34308: LD_INT 34
34310: DOUBLE
34311: EQUAL
34312: IFTRUE 34322
34314: LD_INT 37
34316: DOUBLE
34317: EQUAL
34318: IFTRUE 34322
34320: GO 34378
34322: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34323: LD_ADDR_VAR 0 9
34327: PUSH
34328: LD_VAR 0 53
34332: PUSH
34333: LD_VAR 0 54
34337: PUSH
34338: LD_VAR 0 55
34342: PUSH
34343: LD_VAR 0 56
34347: PUSH
34348: LD_VAR 0 57
34352: PUSH
34353: LD_VAR 0 58
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: PUSH
34366: LD_VAR 0 4
34370: PUSH
34371: LD_INT 1
34373: PLUS
34374: ARRAY
34375: ST_TO_ADDR
34376: GO 34485
34378: LD_INT 31
34380: DOUBLE
34381: EQUAL
34382: IFTRUE 34428
34384: LD_INT 32
34386: DOUBLE
34387: EQUAL
34388: IFTRUE 34428
34390: LD_INT 33
34392: DOUBLE
34393: EQUAL
34394: IFTRUE 34428
34396: LD_INT 27
34398: DOUBLE
34399: EQUAL
34400: IFTRUE 34428
34402: LD_INT 26
34404: DOUBLE
34405: EQUAL
34406: IFTRUE 34428
34408: LD_INT 28
34410: DOUBLE
34411: EQUAL
34412: IFTRUE 34428
34414: LD_INT 29
34416: DOUBLE
34417: EQUAL
34418: IFTRUE 34428
34420: LD_INT 30
34422: DOUBLE
34423: EQUAL
34424: IFTRUE 34428
34426: GO 34484
34428: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34429: LD_ADDR_VAR 0 9
34433: PUSH
34434: LD_VAR 0 59
34438: PUSH
34439: LD_VAR 0 60
34443: PUSH
34444: LD_VAR 0 61
34448: PUSH
34449: LD_VAR 0 62
34453: PUSH
34454: LD_VAR 0 63
34458: PUSH
34459: LD_VAR 0 64
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: PUSH
34472: LD_VAR 0 4
34476: PUSH
34477: LD_INT 1
34479: PLUS
34480: ARRAY
34481: ST_TO_ADDR
34482: GO 34485
34484: POP
// temp_list2 = [ ] ;
34485: LD_ADDR_VAR 0 10
34489: PUSH
34490: EMPTY
34491: ST_TO_ADDR
// for i in temp_list do
34492: LD_ADDR_VAR 0 8
34496: PUSH
34497: LD_VAR 0 9
34501: PUSH
34502: FOR_IN
34503: IFFALSE 34555
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34505: LD_ADDR_VAR 0 10
34509: PUSH
34510: LD_VAR 0 10
34514: PUSH
34515: LD_VAR 0 8
34519: PUSH
34520: LD_INT 1
34522: ARRAY
34523: PUSH
34524: LD_VAR 0 2
34528: PLUS
34529: PUSH
34530: LD_VAR 0 8
34534: PUSH
34535: LD_INT 2
34537: ARRAY
34538: PUSH
34539: LD_VAR 0 3
34543: PLUS
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: EMPTY
34550: LIST
34551: ADD
34552: ST_TO_ADDR
34553: GO 34502
34555: POP
34556: POP
// result = temp_list2 ;
34557: LD_ADDR_VAR 0 7
34561: PUSH
34562: LD_VAR 0 10
34566: ST_TO_ADDR
// end ;
34567: LD_VAR 0 7
34571: RET
// export function EnemyInRange ( unit , dist ) ; begin
34572: LD_INT 0
34574: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34575: LD_ADDR_VAR 0 3
34579: PUSH
34580: LD_VAR 0 1
34584: PPUSH
34585: CALL_OW 255
34589: PPUSH
34590: LD_VAR 0 1
34594: PPUSH
34595: CALL_OW 250
34599: PPUSH
34600: LD_VAR 0 1
34604: PPUSH
34605: CALL_OW 251
34609: PPUSH
34610: LD_VAR 0 2
34614: PPUSH
34615: CALL 7945 0 4
34619: PUSH
34620: LD_INT 4
34622: ARRAY
34623: ST_TO_ADDR
// end ;
34624: LD_VAR 0 3
34628: RET
// export function PlayerSeeMe ( unit ) ; begin
34629: LD_INT 0
34631: PPUSH
// result := See ( your_side , unit ) ;
34632: LD_ADDR_VAR 0 2
34636: PUSH
34637: LD_OWVAR 2
34641: PPUSH
34642: LD_VAR 0 1
34646: PPUSH
34647: CALL_OW 292
34651: ST_TO_ADDR
// end ;
34652: LD_VAR 0 2
34656: RET
// export function ReverseDir ( unit ) ; begin
34657: LD_INT 0
34659: PPUSH
// if not unit then
34660: LD_VAR 0 1
34664: NOT
34665: IFFALSE 34669
// exit ;
34667: GO 34692
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34669: LD_ADDR_VAR 0 2
34673: PUSH
34674: LD_VAR 0 1
34678: PPUSH
34679: CALL_OW 254
34683: PUSH
34684: LD_INT 3
34686: PLUS
34687: PUSH
34688: LD_INT 6
34690: MOD
34691: ST_TO_ADDR
// end ;
34692: LD_VAR 0 2
34696: RET
// export function ReverseArray ( array ) ; var i ; begin
34697: LD_INT 0
34699: PPUSH
34700: PPUSH
// if not array then
34701: LD_VAR 0 1
34705: NOT
34706: IFFALSE 34710
// exit ;
34708: GO 34765
// result := [ ] ;
34710: LD_ADDR_VAR 0 2
34714: PUSH
34715: EMPTY
34716: ST_TO_ADDR
// for i := array downto 1 do
34717: LD_ADDR_VAR 0 3
34721: PUSH
34722: DOUBLE
34723: LD_VAR 0 1
34727: INC
34728: ST_TO_ADDR
34729: LD_INT 1
34731: PUSH
34732: FOR_DOWNTO
34733: IFFALSE 34763
// result := Join ( result , array [ i ] ) ;
34735: LD_ADDR_VAR 0 2
34739: PUSH
34740: LD_VAR 0 2
34744: PPUSH
34745: LD_VAR 0 1
34749: PUSH
34750: LD_VAR 0 3
34754: ARRAY
34755: PPUSH
34756: CALL 39430 0 2
34760: ST_TO_ADDR
34761: GO 34732
34763: POP
34764: POP
// end ;
34765: LD_VAR 0 2
34769: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34770: LD_INT 0
34772: PPUSH
34773: PPUSH
34774: PPUSH
34775: PPUSH
34776: PPUSH
34777: PPUSH
// if not unit or not hexes then
34778: LD_VAR 0 1
34782: NOT
34783: PUSH
34784: LD_VAR 0 2
34788: NOT
34789: OR
34790: IFFALSE 34794
// exit ;
34792: GO 34917
// dist := 9999 ;
34794: LD_ADDR_VAR 0 5
34798: PUSH
34799: LD_INT 9999
34801: ST_TO_ADDR
// for i = 1 to hexes do
34802: LD_ADDR_VAR 0 4
34806: PUSH
34807: DOUBLE
34808: LD_INT 1
34810: DEC
34811: ST_TO_ADDR
34812: LD_VAR 0 2
34816: PUSH
34817: FOR_TO
34818: IFFALSE 34905
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34820: LD_ADDR_VAR 0 6
34824: PUSH
34825: LD_VAR 0 1
34829: PPUSH
34830: LD_VAR 0 2
34834: PUSH
34835: LD_VAR 0 4
34839: ARRAY
34840: PUSH
34841: LD_INT 1
34843: ARRAY
34844: PPUSH
34845: LD_VAR 0 2
34849: PUSH
34850: LD_VAR 0 4
34854: ARRAY
34855: PUSH
34856: LD_INT 2
34858: ARRAY
34859: PPUSH
34860: CALL_OW 297
34864: ST_TO_ADDR
// if tdist < dist then
34865: LD_VAR 0 6
34869: PUSH
34870: LD_VAR 0 5
34874: LESS
34875: IFFALSE 34903
// begin hex := hexes [ i ] ;
34877: LD_ADDR_VAR 0 8
34881: PUSH
34882: LD_VAR 0 2
34886: PUSH
34887: LD_VAR 0 4
34891: ARRAY
34892: ST_TO_ADDR
// dist := tdist ;
34893: LD_ADDR_VAR 0 5
34897: PUSH
34898: LD_VAR 0 6
34902: ST_TO_ADDR
// end ; end ;
34903: GO 34817
34905: POP
34906: POP
// result := hex ;
34907: LD_ADDR_VAR 0 3
34911: PUSH
34912: LD_VAR 0 8
34916: ST_TO_ADDR
// end ;
34917: LD_VAR 0 3
34921: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34922: LD_INT 0
34924: PPUSH
34925: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34926: LD_VAR 0 1
34930: NOT
34931: PUSH
34932: LD_VAR 0 1
34936: PUSH
34937: LD_INT 21
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 23
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PPUSH
34961: CALL_OW 69
34965: IN
34966: NOT
34967: OR
34968: IFFALSE 34972
// exit ;
34970: GO 35019
// for i = 1 to 3 do
34972: LD_ADDR_VAR 0 3
34976: PUSH
34977: DOUBLE
34978: LD_INT 1
34980: DEC
34981: ST_TO_ADDR
34982: LD_INT 3
34984: PUSH
34985: FOR_TO
34986: IFFALSE 35017
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34988: LD_VAR 0 1
34992: PPUSH
34993: CALL_OW 250
34997: PPUSH
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 251
35007: PPUSH
35008: LD_INT 1
35010: PPUSH
35011: CALL_OW 453
35015: GO 34985
35017: POP
35018: POP
// end ;
35019: LD_VAR 0 2
35023: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35024: LD_INT 0
35026: PPUSH
35027: PPUSH
35028: PPUSH
35029: PPUSH
35030: PPUSH
35031: PPUSH
// if not unit or not enemy_unit then
35032: LD_VAR 0 1
35036: NOT
35037: PUSH
35038: LD_VAR 0 2
35042: NOT
35043: OR
35044: IFFALSE 35048
// exit ;
35046: GO 35515
// if GetLives ( i ) < 250 then
35048: LD_VAR 0 4
35052: PPUSH
35053: CALL_OW 256
35057: PUSH
35058: LD_INT 250
35060: LESS
35061: IFFALSE 35074
// begin ComAutodestruct ( i ) ;
35063: LD_VAR 0 4
35067: PPUSH
35068: CALL 34922 0 1
// exit ;
35072: GO 35515
// end ; x := GetX ( enemy_unit ) ;
35074: LD_ADDR_VAR 0 7
35078: PUSH
35079: LD_VAR 0 2
35083: PPUSH
35084: CALL_OW 250
35088: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35089: LD_ADDR_VAR 0 8
35093: PUSH
35094: LD_VAR 0 2
35098: PPUSH
35099: CALL_OW 251
35103: ST_TO_ADDR
// if not x or not y then
35104: LD_VAR 0 7
35108: NOT
35109: PUSH
35110: LD_VAR 0 8
35114: NOT
35115: OR
35116: IFFALSE 35120
// exit ;
35118: GO 35515
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35120: LD_ADDR_VAR 0 6
35124: PUSH
35125: LD_VAR 0 7
35129: PPUSH
35130: LD_INT 0
35132: PPUSH
35133: LD_INT 4
35135: PPUSH
35136: CALL_OW 272
35140: PUSH
35141: LD_VAR 0 8
35145: PPUSH
35146: LD_INT 0
35148: PPUSH
35149: LD_INT 4
35151: PPUSH
35152: CALL_OW 273
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_VAR 0 7
35165: PPUSH
35166: LD_INT 1
35168: PPUSH
35169: LD_INT 4
35171: PPUSH
35172: CALL_OW 272
35176: PUSH
35177: LD_VAR 0 8
35181: PPUSH
35182: LD_INT 1
35184: PPUSH
35185: LD_INT 4
35187: PPUSH
35188: CALL_OW 273
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_VAR 0 7
35201: PPUSH
35202: LD_INT 2
35204: PPUSH
35205: LD_INT 4
35207: PPUSH
35208: CALL_OW 272
35212: PUSH
35213: LD_VAR 0 8
35217: PPUSH
35218: LD_INT 2
35220: PPUSH
35221: LD_INT 4
35223: PPUSH
35224: CALL_OW 273
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_VAR 0 7
35237: PPUSH
35238: LD_INT 3
35240: PPUSH
35241: LD_INT 4
35243: PPUSH
35244: CALL_OW 272
35248: PUSH
35249: LD_VAR 0 8
35253: PPUSH
35254: LD_INT 3
35256: PPUSH
35257: LD_INT 4
35259: PPUSH
35260: CALL_OW 273
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_VAR 0 7
35273: PPUSH
35274: LD_INT 4
35276: PPUSH
35277: LD_INT 4
35279: PPUSH
35280: CALL_OW 272
35284: PUSH
35285: LD_VAR 0 8
35289: PPUSH
35290: LD_INT 4
35292: PPUSH
35293: LD_INT 4
35295: PPUSH
35296: CALL_OW 273
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_VAR 0 7
35309: PPUSH
35310: LD_INT 5
35312: PPUSH
35313: LD_INT 4
35315: PPUSH
35316: CALL_OW 272
35320: PUSH
35321: LD_VAR 0 8
35325: PPUSH
35326: LD_INT 5
35328: PPUSH
35329: LD_INT 4
35331: PPUSH
35332: CALL_OW 273
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: ST_TO_ADDR
// for i = tmp downto 1 do
35349: LD_ADDR_VAR 0 4
35353: PUSH
35354: DOUBLE
35355: LD_VAR 0 6
35359: INC
35360: ST_TO_ADDR
35361: LD_INT 1
35363: PUSH
35364: FOR_DOWNTO
35365: IFFALSE 35466
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35367: LD_VAR 0 6
35371: PUSH
35372: LD_VAR 0 4
35376: ARRAY
35377: PUSH
35378: LD_INT 1
35380: ARRAY
35381: PPUSH
35382: LD_VAR 0 6
35386: PUSH
35387: LD_VAR 0 4
35391: ARRAY
35392: PUSH
35393: LD_INT 2
35395: ARRAY
35396: PPUSH
35397: CALL_OW 488
35401: NOT
35402: PUSH
35403: LD_VAR 0 6
35407: PUSH
35408: LD_VAR 0 4
35412: ARRAY
35413: PUSH
35414: LD_INT 1
35416: ARRAY
35417: PPUSH
35418: LD_VAR 0 6
35422: PUSH
35423: LD_VAR 0 4
35427: ARRAY
35428: PUSH
35429: LD_INT 2
35431: ARRAY
35432: PPUSH
35433: CALL_OW 428
35437: PUSH
35438: LD_INT 0
35440: NONEQUAL
35441: OR
35442: IFFALSE 35464
// tmp := Delete ( tmp , i ) ;
35444: LD_ADDR_VAR 0 6
35448: PUSH
35449: LD_VAR 0 6
35453: PPUSH
35454: LD_VAR 0 4
35458: PPUSH
35459: CALL_OW 3
35463: ST_TO_ADDR
35464: GO 35364
35466: POP
35467: POP
// j := GetClosestHex ( unit , tmp ) ;
35468: LD_ADDR_VAR 0 5
35472: PUSH
35473: LD_VAR 0 1
35477: PPUSH
35478: LD_VAR 0 6
35482: PPUSH
35483: CALL 34770 0 2
35487: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35488: LD_VAR 0 1
35492: PPUSH
35493: LD_VAR 0 5
35497: PUSH
35498: LD_INT 1
35500: ARRAY
35501: PPUSH
35502: LD_VAR 0 5
35506: PUSH
35507: LD_INT 2
35509: ARRAY
35510: PPUSH
35511: CALL_OW 111
// end ;
35515: LD_VAR 0 3
35519: RET
// export function PrepareApemanSoldier ( ) ; begin
35520: LD_INT 0
35522: PPUSH
// uc_nation := 0 ;
35523: LD_ADDR_OWVAR 21
35527: PUSH
35528: LD_INT 0
35530: ST_TO_ADDR
// hc_sex := sex_male ;
35531: LD_ADDR_OWVAR 27
35535: PUSH
35536: LD_INT 1
35538: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35539: LD_ADDR_OWVAR 28
35543: PUSH
35544: LD_INT 15
35546: ST_TO_ADDR
// hc_gallery :=  ;
35547: LD_ADDR_OWVAR 33
35551: PUSH
35552: LD_STRING 
35554: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35555: LD_ADDR_OWVAR 31
35559: PUSH
35560: LD_INT 0
35562: PPUSH
35563: LD_INT 3
35565: PPUSH
35566: CALL_OW 12
35570: PUSH
35571: LD_INT 0
35573: PPUSH
35574: LD_INT 3
35576: PPUSH
35577: CALL_OW 12
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: ST_TO_ADDR
// end ;
35594: LD_VAR 0 1
35598: RET
// export function PrepareApemanEngineer ( ) ; begin
35599: LD_INT 0
35601: PPUSH
// uc_nation := 0 ;
35602: LD_ADDR_OWVAR 21
35606: PUSH
35607: LD_INT 0
35609: ST_TO_ADDR
// hc_sex := sex_male ;
35610: LD_ADDR_OWVAR 27
35614: PUSH
35615: LD_INT 1
35617: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35618: LD_ADDR_OWVAR 28
35622: PUSH
35623: LD_INT 16
35625: ST_TO_ADDR
// hc_gallery :=  ;
35626: LD_ADDR_OWVAR 33
35630: PUSH
35631: LD_STRING 
35633: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35634: LD_ADDR_OWVAR 31
35638: PUSH
35639: LD_INT 0
35641: PPUSH
35642: LD_INT 3
35644: PPUSH
35645: CALL_OW 12
35649: PUSH
35650: LD_INT 0
35652: PPUSH
35653: LD_INT 3
35655: PPUSH
35656: CALL_OW 12
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: ST_TO_ADDR
// end ;
35673: LD_VAR 0 1
35677: RET
// export function PrepareApeman ( agressivity ) ; begin
35678: LD_INT 0
35680: PPUSH
// uc_side := 0 ;
35681: LD_ADDR_OWVAR 20
35685: PUSH
35686: LD_INT 0
35688: ST_TO_ADDR
// uc_nation := 0 ;
35689: LD_ADDR_OWVAR 21
35693: PUSH
35694: LD_INT 0
35696: ST_TO_ADDR
// hc_sex := sex_male ;
35697: LD_ADDR_OWVAR 27
35701: PUSH
35702: LD_INT 1
35704: ST_TO_ADDR
// hc_class := class_apeman ;
35705: LD_ADDR_OWVAR 28
35709: PUSH
35710: LD_INT 12
35712: ST_TO_ADDR
// hc_gallery :=  ;
35713: LD_ADDR_OWVAR 33
35717: PUSH
35718: LD_STRING 
35720: ST_TO_ADDR
// if agressivity = 0 then
35721: LD_VAR 0 1
35725: PUSH
35726: LD_INT 0
35728: EQUAL
35729: IFFALSE 35741
// hc_agressivity := 0 else
35731: LD_ADDR_OWVAR 35
35735: PUSH
35736: LD_INT 0
35738: ST_TO_ADDR
35739: GO 35762
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35741: LD_ADDR_OWVAR 35
35745: PUSH
35746: LD_VAR 0 1
35750: NEG
35751: PPUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: CALL_OW 12
35761: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35762: LD_ADDR_OWVAR 31
35766: PUSH
35767: LD_INT 0
35769: PPUSH
35770: LD_INT 3
35772: PPUSH
35773: CALL_OW 12
35777: PUSH
35778: LD_INT 0
35780: PPUSH
35781: LD_INT 3
35783: PPUSH
35784: CALL_OW 12
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: ST_TO_ADDR
// end ;
35801: LD_VAR 0 2
35805: RET
// export function PrepareTiger ( agressivity ) ; begin
35806: LD_INT 0
35808: PPUSH
// uc_side := 0 ;
35809: LD_ADDR_OWVAR 20
35813: PUSH
35814: LD_INT 0
35816: ST_TO_ADDR
// uc_nation := 0 ;
35817: LD_ADDR_OWVAR 21
35821: PUSH
35822: LD_INT 0
35824: ST_TO_ADDR
// hc_class := class_tiger ;
35825: LD_ADDR_OWVAR 28
35829: PUSH
35830: LD_INT 14
35832: ST_TO_ADDR
// hc_gallery :=  ;
35833: LD_ADDR_OWVAR 33
35837: PUSH
35838: LD_STRING 
35840: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35841: LD_ADDR_OWVAR 35
35845: PUSH
35846: LD_VAR 0 1
35850: NEG
35851: PPUSH
35852: LD_VAR 0 1
35856: PPUSH
35857: CALL_OW 12
35861: ST_TO_ADDR
// end ;
35862: LD_VAR 0 2
35866: RET
// export function PrepareEnchidna ( ) ; begin
35867: LD_INT 0
35869: PPUSH
// uc_side := 0 ;
35870: LD_ADDR_OWVAR 20
35874: PUSH
35875: LD_INT 0
35877: ST_TO_ADDR
// uc_nation := 0 ;
35878: LD_ADDR_OWVAR 21
35882: PUSH
35883: LD_INT 0
35885: ST_TO_ADDR
// hc_class := class_baggie ;
35886: LD_ADDR_OWVAR 28
35890: PUSH
35891: LD_INT 13
35893: ST_TO_ADDR
// hc_gallery :=  ;
35894: LD_ADDR_OWVAR 33
35898: PUSH
35899: LD_STRING 
35901: ST_TO_ADDR
// end ;
35902: LD_VAR 0 1
35906: RET
// export function PrepareFrog ( ) ; begin
35907: LD_INT 0
35909: PPUSH
// uc_side := 0 ;
35910: LD_ADDR_OWVAR 20
35914: PUSH
35915: LD_INT 0
35917: ST_TO_ADDR
// uc_nation := 0 ;
35918: LD_ADDR_OWVAR 21
35922: PUSH
35923: LD_INT 0
35925: ST_TO_ADDR
// hc_class := class_frog ;
35926: LD_ADDR_OWVAR 28
35930: PUSH
35931: LD_INT 19
35933: ST_TO_ADDR
// hc_gallery :=  ;
35934: LD_ADDR_OWVAR 33
35938: PUSH
35939: LD_STRING 
35941: ST_TO_ADDR
// end ;
35942: LD_VAR 0 1
35946: RET
// export function PrepareFish ( ) ; begin
35947: LD_INT 0
35949: PPUSH
// uc_side := 0 ;
35950: LD_ADDR_OWVAR 20
35954: PUSH
35955: LD_INT 0
35957: ST_TO_ADDR
// uc_nation := 0 ;
35958: LD_ADDR_OWVAR 21
35962: PUSH
35963: LD_INT 0
35965: ST_TO_ADDR
// hc_class := class_fish ;
35966: LD_ADDR_OWVAR 28
35970: PUSH
35971: LD_INT 20
35973: ST_TO_ADDR
// hc_gallery :=  ;
35974: LD_ADDR_OWVAR 33
35978: PUSH
35979: LD_STRING 
35981: ST_TO_ADDR
// end ;
35982: LD_VAR 0 1
35986: RET
// export function PrepareBird ( ) ; begin
35987: LD_INT 0
35989: PPUSH
// uc_side := 0 ;
35990: LD_ADDR_OWVAR 20
35994: PUSH
35995: LD_INT 0
35997: ST_TO_ADDR
// uc_nation := 0 ;
35998: LD_ADDR_OWVAR 21
36002: PUSH
36003: LD_INT 0
36005: ST_TO_ADDR
// hc_class := class_phororhacos ;
36006: LD_ADDR_OWVAR 28
36010: PUSH
36011: LD_INT 18
36013: ST_TO_ADDR
// hc_gallery :=  ;
36014: LD_ADDR_OWVAR 33
36018: PUSH
36019: LD_STRING 
36021: ST_TO_ADDR
// end ;
36022: LD_VAR 0 1
36026: RET
// export function PrepareHorse ( ) ; begin
36027: LD_INT 0
36029: PPUSH
// uc_side := 0 ;
36030: LD_ADDR_OWVAR 20
36034: PUSH
36035: LD_INT 0
36037: ST_TO_ADDR
// uc_nation := 0 ;
36038: LD_ADDR_OWVAR 21
36042: PUSH
36043: LD_INT 0
36045: ST_TO_ADDR
// hc_class := class_horse ;
36046: LD_ADDR_OWVAR 28
36050: PUSH
36051: LD_INT 21
36053: ST_TO_ADDR
// hc_gallery :=  ;
36054: LD_ADDR_OWVAR 33
36058: PUSH
36059: LD_STRING 
36061: ST_TO_ADDR
// end ;
36062: LD_VAR 0 1
36066: RET
// export function PrepareMastodont ( ) ; begin
36067: LD_INT 0
36069: PPUSH
// uc_side := 0 ;
36070: LD_ADDR_OWVAR 20
36074: PUSH
36075: LD_INT 0
36077: ST_TO_ADDR
// uc_nation := 0 ;
36078: LD_ADDR_OWVAR 21
36082: PUSH
36083: LD_INT 0
36085: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36086: LD_ADDR_OWVAR 37
36090: PUSH
36091: LD_INT 31
36093: ST_TO_ADDR
// vc_control := control_rider ;
36094: LD_ADDR_OWVAR 38
36098: PUSH
36099: LD_INT 4
36101: ST_TO_ADDR
// end ;
36102: LD_VAR 0 1
36106: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36107: LD_INT 0
36109: PPUSH
36110: PPUSH
36111: PPUSH
// uc_side = 0 ;
36112: LD_ADDR_OWVAR 20
36116: PUSH
36117: LD_INT 0
36119: ST_TO_ADDR
// uc_nation = 0 ;
36120: LD_ADDR_OWVAR 21
36124: PUSH
36125: LD_INT 0
36127: ST_TO_ADDR
// InitHc_All ( ) ;
36128: CALL_OW 584
// InitVc ;
36132: CALL_OW 20
// if mastodonts then
36136: LD_VAR 0 6
36140: IFFALSE 36207
// for i = 1 to mastodonts do
36142: LD_ADDR_VAR 0 11
36146: PUSH
36147: DOUBLE
36148: LD_INT 1
36150: DEC
36151: ST_TO_ADDR
36152: LD_VAR 0 6
36156: PUSH
36157: FOR_TO
36158: IFFALSE 36205
// begin vc_chassis := 31 ;
36160: LD_ADDR_OWVAR 37
36164: PUSH
36165: LD_INT 31
36167: ST_TO_ADDR
// vc_control := control_rider ;
36168: LD_ADDR_OWVAR 38
36172: PUSH
36173: LD_INT 4
36175: ST_TO_ADDR
// animal := CreateVehicle ;
36176: LD_ADDR_VAR 0 12
36180: PUSH
36181: CALL_OW 45
36185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36186: LD_VAR 0 12
36190: PPUSH
36191: LD_VAR 0 8
36195: PPUSH
36196: LD_INT 0
36198: PPUSH
36199: CALL 38335 0 3
// end ;
36203: GO 36157
36205: POP
36206: POP
// if horses then
36207: LD_VAR 0 5
36211: IFFALSE 36278
// for i = 1 to horses do
36213: LD_ADDR_VAR 0 11
36217: PUSH
36218: DOUBLE
36219: LD_INT 1
36221: DEC
36222: ST_TO_ADDR
36223: LD_VAR 0 5
36227: PUSH
36228: FOR_TO
36229: IFFALSE 36276
// begin hc_class := 21 ;
36231: LD_ADDR_OWVAR 28
36235: PUSH
36236: LD_INT 21
36238: ST_TO_ADDR
// hc_gallery :=  ;
36239: LD_ADDR_OWVAR 33
36243: PUSH
36244: LD_STRING 
36246: ST_TO_ADDR
// animal := CreateHuman ;
36247: LD_ADDR_VAR 0 12
36251: PUSH
36252: CALL_OW 44
36256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36257: LD_VAR 0 12
36261: PPUSH
36262: LD_VAR 0 8
36266: PPUSH
36267: LD_INT 0
36269: PPUSH
36270: CALL 38335 0 3
// end ;
36274: GO 36228
36276: POP
36277: POP
// if birds then
36278: LD_VAR 0 1
36282: IFFALSE 36349
// for i = 1 to birds do
36284: LD_ADDR_VAR 0 11
36288: PUSH
36289: DOUBLE
36290: LD_INT 1
36292: DEC
36293: ST_TO_ADDR
36294: LD_VAR 0 1
36298: PUSH
36299: FOR_TO
36300: IFFALSE 36347
// begin hc_class := 18 ;
36302: LD_ADDR_OWVAR 28
36306: PUSH
36307: LD_INT 18
36309: ST_TO_ADDR
// hc_gallery =  ;
36310: LD_ADDR_OWVAR 33
36314: PUSH
36315: LD_STRING 
36317: ST_TO_ADDR
// animal := CreateHuman ;
36318: LD_ADDR_VAR 0 12
36322: PUSH
36323: CALL_OW 44
36327: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36328: LD_VAR 0 12
36332: PPUSH
36333: LD_VAR 0 8
36337: PPUSH
36338: LD_INT 0
36340: PPUSH
36341: CALL 38335 0 3
// end ;
36345: GO 36299
36347: POP
36348: POP
// if tigers then
36349: LD_VAR 0 2
36353: IFFALSE 36437
// for i = 1 to tigers do
36355: LD_ADDR_VAR 0 11
36359: PUSH
36360: DOUBLE
36361: LD_INT 1
36363: DEC
36364: ST_TO_ADDR
36365: LD_VAR 0 2
36369: PUSH
36370: FOR_TO
36371: IFFALSE 36435
// begin hc_class = class_tiger ;
36373: LD_ADDR_OWVAR 28
36377: PUSH
36378: LD_INT 14
36380: ST_TO_ADDR
// hc_gallery =  ;
36381: LD_ADDR_OWVAR 33
36385: PUSH
36386: LD_STRING 
36388: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36389: LD_ADDR_OWVAR 35
36393: PUSH
36394: LD_INT 7
36396: NEG
36397: PPUSH
36398: LD_INT 7
36400: PPUSH
36401: CALL_OW 12
36405: ST_TO_ADDR
// animal := CreateHuman ;
36406: LD_ADDR_VAR 0 12
36410: PUSH
36411: CALL_OW 44
36415: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36416: LD_VAR 0 12
36420: PPUSH
36421: LD_VAR 0 8
36425: PPUSH
36426: LD_INT 0
36428: PPUSH
36429: CALL 38335 0 3
// end ;
36433: GO 36370
36435: POP
36436: POP
// if apemans then
36437: LD_VAR 0 3
36441: IFFALSE 36564
// for i = 1 to apemans do
36443: LD_ADDR_VAR 0 11
36447: PUSH
36448: DOUBLE
36449: LD_INT 1
36451: DEC
36452: ST_TO_ADDR
36453: LD_VAR 0 3
36457: PUSH
36458: FOR_TO
36459: IFFALSE 36562
// begin hc_class = class_apeman ;
36461: LD_ADDR_OWVAR 28
36465: PUSH
36466: LD_INT 12
36468: ST_TO_ADDR
// hc_gallery =  ;
36469: LD_ADDR_OWVAR 33
36473: PUSH
36474: LD_STRING 
36476: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36477: LD_ADDR_OWVAR 35
36481: PUSH
36482: LD_INT 2
36484: NEG
36485: PPUSH
36486: LD_INT 2
36488: PPUSH
36489: CALL_OW 12
36493: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36494: LD_ADDR_OWVAR 31
36498: PUSH
36499: LD_INT 1
36501: PPUSH
36502: LD_INT 3
36504: PPUSH
36505: CALL_OW 12
36509: PUSH
36510: LD_INT 1
36512: PPUSH
36513: LD_INT 3
36515: PPUSH
36516: CALL_OW 12
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
// animal := CreateHuman ;
36533: LD_ADDR_VAR 0 12
36537: PUSH
36538: CALL_OW 44
36542: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36543: LD_VAR 0 12
36547: PPUSH
36548: LD_VAR 0 8
36552: PPUSH
36553: LD_INT 0
36555: PPUSH
36556: CALL 38335 0 3
// end ;
36560: GO 36458
36562: POP
36563: POP
// if enchidnas then
36564: LD_VAR 0 4
36568: IFFALSE 36635
// for i = 1 to enchidnas do
36570: LD_ADDR_VAR 0 11
36574: PUSH
36575: DOUBLE
36576: LD_INT 1
36578: DEC
36579: ST_TO_ADDR
36580: LD_VAR 0 4
36584: PUSH
36585: FOR_TO
36586: IFFALSE 36633
// begin hc_class = 13 ;
36588: LD_ADDR_OWVAR 28
36592: PUSH
36593: LD_INT 13
36595: ST_TO_ADDR
// hc_gallery =  ;
36596: LD_ADDR_OWVAR 33
36600: PUSH
36601: LD_STRING 
36603: ST_TO_ADDR
// animal := CreateHuman ;
36604: LD_ADDR_VAR 0 12
36608: PUSH
36609: CALL_OW 44
36613: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36614: LD_VAR 0 12
36618: PPUSH
36619: LD_VAR 0 8
36623: PPUSH
36624: LD_INT 0
36626: PPUSH
36627: CALL 38335 0 3
// end ;
36631: GO 36585
36633: POP
36634: POP
// if fishes then
36635: LD_VAR 0 7
36639: IFFALSE 36706
// for i = 1 to fishes do
36641: LD_ADDR_VAR 0 11
36645: PUSH
36646: DOUBLE
36647: LD_INT 1
36649: DEC
36650: ST_TO_ADDR
36651: LD_VAR 0 7
36655: PUSH
36656: FOR_TO
36657: IFFALSE 36704
// begin hc_class = 20 ;
36659: LD_ADDR_OWVAR 28
36663: PUSH
36664: LD_INT 20
36666: ST_TO_ADDR
// hc_gallery =  ;
36667: LD_ADDR_OWVAR 33
36671: PUSH
36672: LD_STRING 
36674: ST_TO_ADDR
// animal := CreateHuman ;
36675: LD_ADDR_VAR 0 12
36679: PUSH
36680: CALL_OW 44
36684: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36685: LD_VAR 0 12
36689: PPUSH
36690: LD_VAR 0 9
36694: PPUSH
36695: LD_INT 0
36697: PPUSH
36698: CALL 38335 0 3
// end ;
36702: GO 36656
36704: POP
36705: POP
// end ;
36706: LD_VAR 0 10
36710: RET
// export function WantHeal ( sci , unit ) ; begin
36711: LD_INT 0
36713: PPUSH
// if GetTaskList ( sci ) > 0 then
36714: LD_VAR 0 1
36718: PPUSH
36719: CALL_OW 437
36723: PUSH
36724: LD_INT 0
36726: GREATER
36727: IFFALSE 36797
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36729: LD_VAR 0 1
36733: PPUSH
36734: CALL_OW 437
36738: PUSH
36739: LD_INT 1
36741: ARRAY
36742: PUSH
36743: LD_INT 1
36745: ARRAY
36746: PUSH
36747: LD_STRING l
36749: EQUAL
36750: PUSH
36751: LD_VAR 0 1
36755: PPUSH
36756: CALL_OW 437
36760: PUSH
36761: LD_INT 1
36763: ARRAY
36764: PUSH
36765: LD_INT 4
36767: ARRAY
36768: PUSH
36769: LD_VAR 0 2
36773: EQUAL
36774: AND
36775: IFFALSE 36787
// result := true else
36777: LD_ADDR_VAR 0 3
36781: PUSH
36782: LD_INT 1
36784: ST_TO_ADDR
36785: GO 36795
// result := false ;
36787: LD_ADDR_VAR 0 3
36791: PUSH
36792: LD_INT 0
36794: ST_TO_ADDR
// end else
36795: GO 36805
// result := false ;
36797: LD_ADDR_VAR 0 3
36801: PUSH
36802: LD_INT 0
36804: ST_TO_ADDR
// end ;
36805: LD_VAR 0 3
36809: RET
// export function HealTarget ( sci ) ; begin
36810: LD_INT 0
36812: PPUSH
// if not sci then
36813: LD_VAR 0 1
36817: NOT
36818: IFFALSE 36822
// exit ;
36820: GO 36887
// result := 0 ;
36822: LD_ADDR_VAR 0 2
36826: PUSH
36827: LD_INT 0
36829: ST_TO_ADDR
// if GetTaskList ( sci ) then
36830: LD_VAR 0 1
36834: PPUSH
36835: CALL_OW 437
36839: IFFALSE 36887
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36841: LD_VAR 0 1
36845: PPUSH
36846: CALL_OW 437
36850: PUSH
36851: LD_INT 1
36853: ARRAY
36854: PUSH
36855: LD_INT 1
36857: ARRAY
36858: PUSH
36859: LD_STRING l
36861: EQUAL
36862: IFFALSE 36887
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36864: LD_ADDR_VAR 0 2
36868: PUSH
36869: LD_VAR 0 1
36873: PPUSH
36874: CALL_OW 437
36878: PUSH
36879: LD_INT 1
36881: ARRAY
36882: PUSH
36883: LD_INT 4
36885: ARRAY
36886: ST_TO_ADDR
// end ;
36887: LD_VAR 0 2
36891: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36892: LD_INT 0
36894: PPUSH
36895: PPUSH
36896: PPUSH
36897: PPUSH
// if not base_units then
36898: LD_VAR 0 1
36902: NOT
36903: IFFALSE 36907
// exit ;
36905: GO 36994
// result := false ;
36907: LD_ADDR_VAR 0 2
36911: PUSH
36912: LD_INT 0
36914: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36915: LD_ADDR_VAR 0 5
36919: PUSH
36920: LD_VAR 0 1
36924: PPUSH
36925: LD_INT 21
36927: PUSH
36928: LD_INT 3
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PPUSH
36935: CALL_OW 72
36939: ST_TO_ADDR
// if not tmp then
36940: LD_VAR 0 5
36944: NOT
36945: IFFALSE 36949
// exit ;
36947: GO 36994
// for i in tmp do
36949: LD_ADDR_VAR 0 3
36953: PUSH
36954: LD_VAR 0 5
36958: PUSH
36959: FOR_IN
36960: IFFALSE 36992
// begin result := EnemyInRange ( i , 22 ) ;
36962: LD_ADDR_VAR 0 2
36966: PUSH
36967: LD_VAR 0 3
36971: PPUSH
36972: LD_INT 22
36974: PPUSH
36975: CALL 34572 0 2
36979: ST_TO_ADDR
// if result then
36980: LD_VAR 0 2
36984: IFFALSE 36990
// exit ;
36986: POP
36987: POP
36988: GO 36994
// end ;
36990: GO 36959
36992: POP
36993: POP
// end ;
36994: LD_VAR 0 2
36998: RET
// export function FilterByTag ( units , tag ) ; begin
36999: LD_INT 0
37001: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37002: LD_ADDR_VAR 0 3
37006: PUSH
37007: LD_VAR 0 1
37011: PPUSH
37012: LD_INT 120
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PPUSH
37024: CALL_OW 72
37028: ST_TO_ADDR
// end ;
37029: LD_VAR 0 3
37033: RET
// export function IsDriver ( un ) ; begin
37034: LD_INT 0
37036: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37037: LD_ADDR_VAR 0 2
37041: PUSH
37042: LD_VAR 0 1
37046: PUSH
37047: LD_INT 55
37049: PUSH
37050: EMPTY
37051: LIST
37052: PPUSH
37053: CALL_OW 69
37057: IN
37058: ST_TO_ADDR
// end ;
37059: LD_VAR 0 2
37063: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37064: LD_INT 0
37066: PPUSH
37067: PPUSH
// list := [ ] ;
37068: LD_ADDR_VAR 0 5
37072: PUSH
37073: EMPTY
37074: ST_TO_ADDR
// case d of 0 :
37075: LD_VAR 0 3
37079: PUSH
37080: LD_INT 0
37082: DOUBLE
37083: EQUAL
37084: IFTRUE 37088
37086: GO 37221
37088: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37089: LD_ADDR_VAR 0 5
37093: PUSH
37094: LD_VAR 0 1
37098: PUSH
37099: LD_INT 4
37101: MINUS
37102: PUSH
37103: LD_VAR 0 2
37107: PUSH
37108: LD_INT 4
37110: MINUS
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: PUSH
37120: LD_VAR 0 1
37124: PUSH
37125: LD_INT 3
37127: MINUS
37128: PUSH
37129: LD_VAR 0 2
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: PUSH
37142: LD_VAR 0 1
37146: PUSH
37147: LD_INT 4
37149: PLUS
37150: PUSH
37151: LD_VAR 0 2
37155: PUSH
37156: LD_INT 4
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: PUSH
37164: LD_VAR 0 1
37168: PUSH
37169: LD_INT 3
37171: PLUS
37172: PUSH
37173: LD_VAR 0 2
37177: PUSH
37178: LD_INT 3
37180: PLUS
37181: PUSH
37182: LD_INT 5
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: PUSH
37190: LD_VAR 0 1
37194: PUSH
37195: LD_VAR 0 2
37199: PUSH
37200: LD_INT 4
37202: PLUS
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: ST_TO_ADDR
// end ; 1 :
37219: GO 37919
37221: LD_INT 1
37223: DOUBLE
37224: EQUAL
37225: IFTRUE 37229
37227: GO 37362
37229: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37230: LD_ADDR_VAR 0 5
37234: PUSH
37235: LD_VAR 0 1
37239: PUSH
37240: LD_VAR 0 2
37244: PUSH
37245: LD_INT 4
37247: MINUS
37248: PUSH
37249: LD_INT 3
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: PUSH
37257: LD_VAR 0 1
37261: PUSH
37262: LD_INT 3
37264: MINUS
37265: PUSH
37266: LD_VAR 0 2
37270: PUSH
37271: LD_INT 3
37273: MINUS
37274: PUSH
37275: LD_INT 2
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: LIST
37282: PUSH
37283: LD_VAR 0 1
37287: PUSH
37288: LD_INT 4
37290: MINUS
37291: PUSH
37292: LD_VAR 0 2
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: LIST
37304: PUSH
37305: LD_VAR 0 1
37309: PUSH
37310: LD_VAR 0 2
37314: PUSH
37315: LD_INT 3
37317: PLUS
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: LIST
37326: PUSH
37327: LD_VAR 0 1
37331: PUSH
37332: LD_INT 4
37334: PLUS
37335: PUSH
37336: LD_VAR 0 2
37340: PUSH
37341: LD_INT 4
37343: PLUS
37344: PUSH
37345: LD_INT 5
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: LIST
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: ST_TO_ADDR
// end ; 2 :
37360: GO 37919
37362: LD_INT 2
37364: DOUBLE
37365: EQUAL
37366: IFTRUE 37370
37368: GO 37499
37370: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37371: LD_ADDR_VAR 0 5
37375: PUSH
37376: LD_VAR 0 1
37380: PUSH
37381: LD_VAR 0 2
37385: PUSH
37386: LD_INT 3
37388: MINUS
37389: PUSH
37390: LD_INT 3
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: LIST
37397: PUSH
37398: LD_VAR 0 1
37402: PUSH
37403: LD_INT 4
37405: PLUS
37406: PUSH
37407: LD_VAR 0 2
37411: PUSH
37412: LD_INT 4
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: PUSH
37420: LD_VAR 0 1
37424: PUSH
37425: LD_VAR 0 2
37429: PUSH
37430: LD_INT 4
37432: PLUS
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: PUSH
37442: LD_VAR 0 1
37446: PUSH
37447: LD_INT 3
37449: MINUS
37450: PUSH
37451: LD_VAR 0 2
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: LIST
37463: PUSH
37464: LD_VAR 0 1
37468: PUSH
37469: LD_INT 4
37471: MINUS
37472: PUSH
37473: LD_VAR 0 2
37477: PUSH
37478: LD_INT 4
37480: MINUS
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: ST_TO_ADDR
// end ; 3 :
37497: GO 37919
37499: LD_INT 3
37501: DOUBLE
37502: EQUAL
37503: IFTRUE 37507
37505: GO 37640
37507: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37508: LD_ADDR_VAR 0 5
37512: PUSH
37513: LD_VAR 0 1
37517: PUSH
37518: LD_INT 3
37520: PLUS
37521: PUSH
37522: LD_VAR 0 2
37526: PUSH
37527: LD_INT 4
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: LIST
37534: PUSH
37535: LD_VAR 0 1
37539: PUSH
37540: LD_INT 4
37542: PLUS
37543: PUSH
37544: LD_VAR 0 2
37548: PUSH
37549: LD_INT 4
37551: PLUS
37552: PUSH
37553: LD_INT 5
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: PUSH
37561: LD_VAR 0 1
37565: PUSH
37566: LD_INT 4
37568: MINUS
37569: PUSH
37570: LD_VAR 0 2
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: PUSH
37583: LD_VAR 0 1
37587: PUSH
37588: LD_VAR 0 2
37592: PUSH
37593: LD_INT 4
37595: MINUS
37596: PUSH
37597: LD_INT 3
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: LIST
37604: PUSH
37605: LD_VAR 0 1
37609: PUSH
37610: LD_INT 3
37612: MINUS
37613: PUSH
37614: LD_VAR 0 2
37618: PUSH
37619: LD_INT 3
37621: MINUS
37622: PUSH
37623: LD_INT 2
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: ST_TO_ADDR
// end ; 4 :
37638: GO 37919
37640: LD_INT 4
37642: DOUBLE
37643: EQUAL
37644: IFTRUE 37648
37646: GO 37781
37648: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37649: LD_ADDR_VAR 0 5
37653: PUSH
37654: LD_VAR 0 1
37658: PUSH
37659: LD_VAR 0 2
37663: PUSH
37664: LD_INT 4
37666: PLUS
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: PUSH
37676: LD_VAR 0 1
37680: PUSH
37681: LD_INT 3
37683: PLUS
37684: PUSH
37685: LD_VAR 0 2
37689: PUSH
37690: LD_INT 3
37692: PLUS
37693: PUSH
37694: LD_INT 5
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: PUSH
37702: LD_VAR 0 1
37706: PUSH
37707: LD_INT 4
37709: PLUS
37710: PUSH
37711: LD_VAR 0 2
37715: PUSH
37716: LD_INT 4
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: PUSH
37724: LD_VAR 0 1
37728: PUSH
37729: LD_VAR 0 2
37733: PUSH
37734: LD_INT 3
37736: MINUS
37737: PUSH
37738: LD_INT 3
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: PUSH
37746: LD_VAR 0 1
37750: PUSH
37751: LD_INT 4
37753: MINUS
37754: PUSH
37755: LD_VAR 0 2
37759: PUSH
37760: LD_INT 4
37762: MINUS
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: LIST
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
// end ; 5 :
37779: GO 37919
37781: LD_INT 5
37783: DOUBLE
37784: EQUAL
37785: IFTRUE 37789
37787: GO 37918
37789: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37790: LD_ADDR_VAR 0 5
37794: PUSH
37795: LD_VAR 0 1
37799: PUSH
37800: LD_INT 4
37802: MINUS
37803: PUSH
37804: LD_VAR 0 2
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: LIST
37816: PUSH
37817: LD_VAR 0 1
37821: PUSH
37822: LD_VAR 0 2
37826: PUSH
37827: LD_INT 4
37829: MINUS
37830: PUSH
37831: LD_INT 3
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: PUSH
37839: LD_VAR 0 1
37843: PUSH
37844: LD_INT 4
37846: PLUS
37847: PUSH
37848: LD_VAR 0 2
37852: PUSH
37853: LD_INT 4
37855: PLUS
37856: PUSH
37857: LD_INT 5
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: PUSH
37865: LD_VAR 0 1
37869: PUSH
37870: LD_INT 3
37872: PLUS
37873: PUSH
37874: LD_VAR 0 2
37878: PUSH
37879: LD_INT 4
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: PUSH
37887: LD_VAR 0 1
37891: PUSH
37892: LD_VAR 0 2
37896: PUSH
37897: LD_INT 3
37899: PLUS
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: ST_TO_ADDR
// end ; end ;
37916: GO 37919
37918: POP
// result := list ;
37919: LD_ADDR_VAR 0 4
37923: PUSH
37924: LD_VAR 0 5
37928: ST_TO_ADDR
// end ;
37929: LD_VAR 0 4
37933: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37934: LD_INT 0
37936: PPUSH
37937: PPUSH
37938: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37939: LD_VAR 0 1
37943: NOT
37944: PUSH
37945: LD_VAR 0 2
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 3
37958: PUSH
37959: LD_INT 4
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: IN
37968: NOT
37969: OR
37970: IFFALSE 37974
// exit ;
37972: GO 38057
// tmp := [ ] ;
37974: LD_ADDR_VAR 0 5
37978: PUSH
37979: EMPTY
37980: ST_TO_ADDR
// for i in units do
37981: LD_ADDR_VAR 0 4
37985: PUSH
37986: LD_VAR 0 1
37990: PUSH
37991: FOR_IN
37992: IFFALSE 38026
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37994: LD_ADDR_VAR 0 5
37998: PUSH
37999: LD_VAR 0 5
38003: PPUSH
38004: LD_VAR 0 4
38008: PPUSH
38009: LD_VAR 0 2
38013: PPUSH
38014: CALL_OW 259
38018: PPUSH
38019: CALL 39430 0 2
38023: ST_TO_ADDR
38024: GO 37991
38026: POP
38027: POP
// if not tmp then
38028: LD_VAR 0 5
38032: NOT
38033: IFFALSE 38037
// exit ;
38035: GO 38057
// result := SortListByListDesc ( units , tmp ) ;
38037: LD_ADDR_VAR 0 3
38041: PUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: LD_VAR 0 5
38051: PPUSH
38052: CALL_OW 77
38056: ST_TO_ADDR
// end ;
38057: LD_VAR 0 3
38061: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38062: LD_INT 0
38064: PPUSH
38065: PPUSH
38066: PPUSH
// result := false ;
38067: LD_ADDR_VAR 0 3
38071: PUSH
38072: LD_INT 0
38074: ST_TO_ADDR
// if not building then
38075: LD_VAR 0 2
38079: NOT
38080: IFFALSE 38084
// exit ;
38082: GO 38222
// x := GetX ( building ) ;
38084: LD_ADDR_VAR 0 4
38088: PUSH
38089: LD_VAR 0 2
38093: PPUSH
38094: CALL_OW 250
38098: ST_TO_ADDR
// y := GetY ( building ) ;
38099: LD_ADDR_VAR 0 5
38103: PUSH
38104: LD_VAR 0 2
38108: PPUSH
38109: CALL_OW 251
38113: ST_TO_ADDR
// if not x or not y then
38114: LD_VAR 0 4
38118: NOT
38119: PUSH
38120: LD_VAR 0 5
38124: NOT
38125: OR
38126: IFFALSE 38130
// exit ;
38128: GO 38222
// if GetTaskList ( unit ) then
38130: LD_VAR 0 1
38134: PPUSH
38135: CALL_OW 437
38139: IFFALSE 38222
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38141: LD_STRING e
38143: PUSH
38144: LD_VAR 0 1
38148: PPUSH
38149: CALL_OW 437
38153: PUSH
38154: LD_INT 1
38156: ARRAY
38157: PUSH
38158: LD_INT 1
38160: ARRAY
38161: EQUAL
38162: PUSH
38163: LD_VAR 0 4
38167: PUSH
38168: LD_VAR 0 1
38172: PPUSH
38173: CALL_OW 437
38177: PUSH
38178: LD_INT 1
38180: ARRAY
38181: PUSH
38182: LD_INT 2
38184: ARRAY
38185: EQUAL
38186: AND
38187: PUSH
38188: LD_VAR 0 5
38192: PUSH
38193: LD_VAR 0 1
38197: PPUSH
38198: CALL_OW 437
38202: PUSH
38203: LD_INT 1
38205: ARRAY
38206: PUSH
38207: LD_INT 3
38209: ARRAY
38210: EQUAL
38211: AND
38212: IFFALSE 38222
// result := true end ;
38214: LD_ADDR_VAR 0 3
38218: PUSH
38219: LD_INT 1
38221: ST_TO_ADDR
// end ;
38222: LD_VAR 0 3
38226: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38227: LD_INT 0
38229: PPUSH
// result := false ;
38230: LD_ADDR_VAR 0 4
38234: PUSH
38235: LD_INT 0
38237: ST_TO_ADDR
// if GetTaskList ( unit ) then
38238: LD_VAR 0 1
38242: PPUSH
38243: CALL_OW 437
38247: IFFALSE 38330
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38249: LD_STRING M
38251: PUSH
38252: LD_VAR 0 1
38256: PPUSH
38257: CALL_OW 437
38261: PUSH
38262: LD_INT 1
38264: ARRAY
38265: PUSH
38266: LD_INT 1
38268: ARRAY
38269: EQUAL
38270: PUSH
38271: LD_VAR 0 2
38275: PUSH
38276: LD_VAR 0 1
38280: PPUSH
38281: CALL_OW 437
38285: PUSH
38286: LD_INT 1
38288: ARRAY
38289: PUSH
38290: LD_INT 2
38292: ARRAY
38293: EQUAL
38294: AND
38295: PUSH
38296: LD_VAR 0 3
38300: PUSH
38301: LD_VAR 0 1
38305: PPUSH
38306: CALL_OW 437
38310: PUSH
38311: LD_INT 1
38313: ARRAY
38314: PUSH
38315: LD_INT 3
38317: ARRAY
38318: EQUAL
38319: AND
38320: IFFALSE 38330
// result := true ;
38322: LD_ADDR_VAR 0 4
38326: PUSH
38327: LD_INT 1
38329: ST_TO_ADDR
// end ; end ;
38330: LD_VAR 0 4
38334: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38335: LD_INT 0
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
// if not unit or not area then
38341: LD_VAR 0 1
38345: NOT
38346: PUSH
38347: LD_VAR 0 2
38351: NOT
38352: OR
38353: IFFALSE 38357
// exit ;
38355: GO 38533
// tmp := AreaToList ( area , i ) ;
38357: LD_ADDR_VAR 0 6
38361: PUSH
38362: LD_VAR 0 2
38366: PPUSH
38367: LD_VAR 0 5
38371: PPUSH
38372: CALL_OW 517
38376: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38377: LD_ADDR_VAR 0 5
38381: PUSH
38382: DOUBLE
38383: LD_INT 1
38385: DEC
38386: ST_TO_ADDR
38387: LD_VAR 0 6
38391: PUSH
38392: LD_INT 1
38394: ARRAY
38395: PUSH
38396: FOR_TO
38397: IFFALSE 38531
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38399: LD_ADDR_VAR 0 7
38403: PUSH
38404: LD_VAR 0 6
38408: PUSH
38409: LD_INT 1
38411: ARRAY
38412: PUSH
38413: LD_VAR 0 5
38417: ARRAY
38418: PUSH
38419: LD_VAR 0 6
38423: PUSH
38424: LD_INT 2
38426: ARRAY
38427: PUSH
38428: LD_VAR 0 5
38432: ARRAY
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38438: LD_INT 92
38440: PUSH
38441: LD_VAR 0 7
38445: PUSH
38446: LD_INT 1
38448: ARRAY
38449: PUSH
38450: LD_VAR 0 7
38454: PUSH
38455: LD_INT 2
38457: ARRAY
38458: PUSH
38459: LD_INT 2
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: PPUSH
38468: CALL_OW 69
38472: PUSH
38473: LD_INT 0
38475: EQUAL
38476: IFFALSE 38529
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38478: LD_VAR 0 1
38482: PPUSH
38483: LD_VAR 0 7
38487: PUSH
38488: LD_INT 1
38490: ARRAY
38491: PPUSH
38492: LD_VAR 0 7
38496: PUSH
38497: LD_INT 2
38499: ARRAY
38500: PPUSH
38501: LD_VAR 0 3
38505: PPUSH
38506: CALL_OW 48
// result := IsPlaced ( unit ) ;
38510: LD_ADDR_VAR 0 4
38514: PUSH
38515: LD_VAR 0 1
38519: PPUSH
38520: CALL_OW 305
38524: ST_TO_ADDR
// exit ;
38525: POP
38526: POP
38527: GO 38533
// end ; end ;
38529: GO 38396
38531: POP
38532: POP
// end ;
38533: LD_VAR 0 4
38537: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38538: LD_INT 0
38540: PPUSH
38541: PPUSH
38542: PPUSH
// if not side or side > 8 then
38543: LD_VAR 0 1
38547: NOT
38548: PUSH
38549: LD_VAR 0 1
38553: PUSH
38554: LD_INT 8
38556: GREATER
38557: OR
38558: IFFALSE 38562
// exit ;
38560: GO 38749
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38562: LD_ADDR_VAR 0 4
38566: PUSH
38567: LD_INT 22
38569: PUSH
38570: LD_VAR 0 1
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 21
38581: PUSH
38582: LD_INT 3
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PPUSH
38593: CALL_OW 69
38597: ST_TO_ADDR
// if not tmp then
38598: LD_VAR 0 4
38602: NOT
38603: IFFALSE 38607
// exit ;
38605: GO 38749
// enable_addtolog := true ;
38607: LD_ADDR_OWVAR 81
38611: PUSH
38612: LD_INT 1
38614: ST_TO_ADDR
// AddToLog ( [ ) ;
38615: LD_STRING [
38617: PPUSH
38618: CALL_OW 561
// for i in tmp do
38622: LD_ADDR_VAR 0 3
38626: PUSH
38627: LD_VAR 0 4
38631: PUSH
38632: FOR_IN
38633: IFFALSE 38740
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38635: LD_STRING [
38637: PUSH
38638: LD_VAR 0 3
38642: PPUSH
38643: CALL_OW 266
38647: STR
38648: PUSH
38649: LD_STRING , 
38651: STR
38652: PUSH
38653: LD_VAR 0 3
38657: PPUSH
38658: CALL_OW 250
38662: STR
38663: PUSH
38664: LD_STRING , 
38666: STR
38667: PUSH
38668: LD_VAR 0 3
38672: PPUSH
38673: CALL_OW 251
38677: STR
38678: PUSH
38679: LD_STRING , 
38681: STR
38682: PUSH
38683: LD_VAR 0 3
38687: PPUSH
38688: CALL_OW 254
38692: STR
38693: PUSH
38694: LD_STRING , 
38696: STR
38697: PUSH
38698: LD_VAR 0 3
38702: PPUSH
38703: LD_INT 1
38705: PPUSH
38706: CALL_OW 268
38710: STR
38711: PUSH
38712: LD_STRING , 
38714: STR
38715: PUSH
38716: LD_VAR 0 3
38720: PPUSH
38721: LD_INT 2
38723: PPUSH
38724: CALL_OW 268
38728: STR
38729: PUSH
38730: LD_STRING ],
38732: STR
38733: PPUSH
38734: CALL_OW 561
// end ;
38738: GO 38632
38740: POP
38741: POP
// AddToLog ( ]; ) ;
38742: LD_STRING ];
38744: PPUSH
38745: CALL_OW 561
// end ;
38749: LD_VAR 0 2
38753: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38754: LD_INT 0
38756: PPUSH
38757: PPUSH
38758: PPUSH
38759: PPUSH
38760: PPUSH
// if not area or not rate or not max then
38761: LD_VAR 0 1
38765: NOT
38766: PUSH
38767: LD_VAR 0 2
38771: NOT
38772: OR
38773: PUSH
38774: LD_VAR 0 4
38778: NOT
38779: OR
38780: IFFALSE 38784
// exit ;
38782: GO 38973
// while 1 do
38784: LD_INT 1
38786: IFFALSE 38973
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38788: LD_ADDR_VAR 0 9
38792: PUSH
38793: LD_VAR 0 1
38797: PPUSH
38798: LD_INT 1
38800: PPUSH
38801: CALL_OW 287
38805: PUSH
38806: LD_INT 10
38808: MUL
38809: ST_TO_ADDR
// r := rate / 10 ;
38810: LD_ADDR_VAR 0 7
38814: PUSH
38815: LD_VAR 0 2
38819: PUSH
38820: LD_INT 10
38822: DIVREAL
38823: ST_TO_ADDR
// time := 1 1$00 ;
38824: LD_ADDR_VAR 0 8
38828: PUSH
38829: LD_INT 2100
38831: ST_TO_ADDR
// if amount < min then
38832: LD_VAR 0 9
38836: PUSH
38837: LD_VAR 0 3
38841: LESS
38842: IFFALSE 38860
// r := r * 2 else
38844: LD_ADDR_VAR 0 7
38848: PUSH
38849: LD_VAR 0 7
38853: PUSH
38854: LD_INT 2
38856: MUL
38857: ST_TO_ADDR
38858: GO 38886
// if amount > max then
38860: LD_VAR 0 9
38864: PUSH
38865: LD_VAR 0 4
38869: GREATER
38870: IFFALSE 38886
// r := r / 2 ;
38872: LD_ADDR_VAR 0 7
38876: PUSH
38877: LD_VAR 0 7
38881: PUSH
38882: LD_INT 2
38884: DIVREAL
38885: ST_TO_ADDR
// time := time / r ;
38886: LD_ADDR_VAR 0 8
38890: PUSH
38891: LD_VAR 0 8
38895: PUSH
38896: LD_VAR 0 7
38900: DIVREAL
38901: ST_TO_ADDR
// if time < 0 then
38902: LD_VAR 0 8
38906: PUSH
38907: LD_INT 0
38909: LESS
38910: IFFALSE 38927
// time := time * - 1 ;
38912: LD_ADDR_VAR 0 8
38916: PUSH
38917: LD_VAR 0 8
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: MUL
38926: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38927: LD_VAR 0 8
38931: PUSH
38932: LD_INT 35
38934: PPUSH
38935: LD_INT 875
38937: PPUSH
38938: CALL_OW 12
38942: PLUS
38943: PPUSH
38944: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38948: LD_INT 1
38950: PPUSH
38951: LD_INT 5
38953: PPUSH
38954: CALL_OW 12
38958: PPUSH
38959: LD_VAR 0 1
38963: PPUSH
38964: LD_INT 1
38966: PPUSH
38967: CALL_OW 55
// end ;
38971: GO 38784
// end ;
38973: LD_VAR 0 5
38977: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38978: LD_INT 0
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
// if not turrets or not factories then
38988: LD_VAR 0 1
38992: NOT
38993: PUSH
38994: LD_VAR 0 2
38998: NOT
38999: OR
39000: IFFALSE 39004
// exit ;
39002: GO 39311
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39004: LD_ADDR_VAR 0 10
39008: PUSH
39009: LD_INT 5
39011: PUSH
39012: LD_INT 6
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 4
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 3
39031: PUSH
39032: LD_INT 5
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 24
39046: PUSH
39047: LD_INT 25
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 23
39056: PUSH
39057: LD_INT 27
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 42
39070: PUSH
39071: LD_INT 43
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 44
39080: PUSH
39081: LD_INT 46
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 45
39090: PUSH
39091: LD_INT 47
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: ST_TO_ADDR
// result := [ ] ;
39108: LD_ADDR_VAR 0 3
39112: PUSH
39113: EMPTY
39114: ST_TO_ADDR
// for i in turrets do
39115: LD_ADDR_VAR 0 4
39119: PUSH
39120: LD_VAR 0 1
39124: PUSH
39125: FOR_IN
39126: IFFALSE 39309
// begin nat := GetNation ( i ) ;
39128: LD_ADDR_VAR 0 7
39132: PUSH
39133: LD_VAR 0 4
39137: PPUSH
39138: CALL_OW 248
39142: ST_TO_ADDR
// weapon := 0 ;
39143: LD_ADDR_VAR 0 8
39147: PUSH
39148: LD_INT 0
39150: ST_TO_ADDR
// if not nat then
39151: LD_VAR 0 7
39155: NOT
39156: IFFALSE 39160
// continue ;
39158: GO 39125
// for j in list [ nat ] do
39160: LD_ADDR_VAR 0 5
39164: PUSH
39165: LD_VAR 0 10
39169: PUSH
39170: LD_VAR 0 7
39174: ARRAY
39175: PUSH
39176: FOR_IN
39177: IFFALSE 39218
// if GetBWeapon ( i ) = j [ 1 ] then
39179: LD_VAR 0 4
39183: PPUSH
39184: CALL_OW 269
39188: PUSH
39189: LD_VAR 0 5
39193: PUSH
39194: LD_INT 1
39196: ARRAY
39197: EQUAL
39198: IFFALSE 39216
// begin weapon := j [ 2 ] ;
39200: LD_ADDR_VAR 0 8
39204: PUSH
39205: LD_VAR 0 5
39209: PUSH
39210: LD_INT 2
39212: ARRAY
39213: ST_TO_ADDR
// break ;
39214: GO 39218
// end ;
39216: GO 39176
39218: POP
39219: POP
// if not weapon then
39220: LD_VAR 0 8
39224: NOT
39225: IFFALSE 39229
// continue ;
39227: GO 39125
// for k in factories do
39229: LD_ADDR_VAR 0 6
39233: PUSH
39234: LD_VAR 0 2
39238: PUSH
39239: FOR_IN
39240: IFFALSE 39305
// begin weapons := AvailableWeaponList ( k ) ;
39242: LD_ADDR_VAR 0 9
39246: PUSH
39247: LD_VAR 0 6
39251: PPUSH
39252: CALL_OW 478
39256: ST_TO_ADDR
// if not weapons then
39257: LD_VAR 0 9
39261: NOT
39262: IFFALSE 39266
// continue ;
39264: GO 39239
// if weapon in weapons then
39266: LD_VAR 0 8
39270: PUSH
39271: LD_VAR 0 9
39275: IN
39276: IFFALSE 39303
// begin result := [ i , weapon ] ;
39278: LD_ADDR_VAR 0 3
39282: PUSH
39283: LD_VAR 0 4
39287: PUSH
39288: LD_VAR 0 8
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: ST_TO_ADDR
// exit ;
39297: POP
39298: POP
39299: POP
39300: POP
39301: GO 39311
// end ; end ;
39303: GO 39239
39305: POP
39306: POP
// end ;
39307: GO 39125
39309: POP
39310: POP
// end ;
39311: LD_VAR 0 3
39315: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39316: LD_INT 0
39318: PPUSH
// if not side or side > 8 then
39319: LD_VAR 0 3
39323: NOT
39324: PUSH
39325: LD_VAR 0 3
39329: PUSH
39330: LD_INT 8
39332: GREATER
39333: OR
39334: IFFALSE 39338
// exit ;
39336: GO 39397
// if not range then
39338: LD_VAR 0 4
39342: NOT
39343: IFFALSE 39354
// range := - 12 ;
39345: LD_ADDR_VAR 0 4
39349: PUSH
39350: LD_INT 12
39352: NEG
39353: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39354: LD_VAR 0 1
39358: PPUSH
39359: LD_VAR 0 2
39363: PPUSH
39364: LD_VAR 0 3
39368: PPUSH
39369: LD_VAR 0 4
39373: PPUSH
39374: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39378: LD_VAR 0 1
39382: PPUSH
39383: LD_VAR 0 2
39387: PPUSH
39388: LD_VAR 0 3
39392: PPUSH
39393: CALL_OW 331
// end ;
39397: LD_VAR 0 5
39401: RET
// export function Video ( mode ) ; begin
39402: LD_INT 0
39404: PPUSH
// ingame_video = mode ;
39405: LD_ADDR_OWVAR 52
39409: PUSH
39410: LD_VAR 0 1
39414: ST_TO_ADDR
// interface_hidden = mode ;
39415: LD_ADDR_OWVAR 54
39419: PUSH
39420: LD_VAR 0 1
39424: ST_TO_ADDR
// end ;
39425: LD_VAR 0 2
39429: RET
// export function Join ( array , element ) ; begin
39430: LD_INT 0
39432: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39433: LD_ADDR_VAR 0 3
39437: PUSH
39438: LD_VAR 0 1
39442: PPUSH
39443: LD_VAR 0 1
39447: PUSH
39448: LD_INT 1
39450: PLUS
39451: PPUSH
39452: LD_VAR 0 2
39456: PPUSH
39457: CALL_OW 1
39461: ST_TO_ADDR
// end ;
39462: LD_VAR 0 3
39466: RET
// export function JoinUnion ( array , element ) ; begin
39467: LD_INT 0
39469: PPUSH
// result := array union element ;
39470: LD_ADDR_VAR 0 3
39474: PUSH
39475: LD_VAR 0 1
39479: PUSH
39480: LD_VAR 0 2
39484: UNION
39485: ST_TO_ADDR
// end ;
39486: LD_VAR 0 3
39490: RET
// export function GetBehemoths ( side ) ; begin
39491: LD_INT 0
39493: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39494: LD_ADDR_VAR 0 2
39498: PUSH
39499: LD_INT 22
39501: PUSH
39502: LD_VAR 0 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 31
39513: PUSH
39514: LD_INT 25
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PPUSH
39525: CALL_OW 69
39529: ST_TO_ADDR
// end ;
39530: LD_VAR 0 2
39534: RET
// export function Shuffle ( array ) ; var i , index ; begin
39535: LD_INT 0
39537: PPUSH
39538: PPUSH
39539: PPUSH
// result := [ ] ;
39540: LD_ADDR_VAR 0 2
39544: PUSH
39545: EMPTY
39546: ST_TO_ADDR
// if not array then
39547: LD_VAR 0 1
39551: NOT
39552: IFFALSE 39556
// exit ;
39554: GO 39655
// Randomize ;
39556: CALL_OW 10
// for i = array downto 1 do
39560: LD_ADDR_VAR 0 3
39564: PUSH
39565: DOUBLE
39566: LD_VAR 0 1
39570: INC
39571: ST_TO_ADDR
39572: LD_INT 1
39574: PUSH
39575: FOR_DOWNTO
39576: IFFALSE 39653
// begin index := rand ( 1 , array ) ;
39578: LD_ADDR_VAR 0 4
39582: PUSH
39583: LD_INT 1
39585: PPUSH
39586: LD_VAR 0 1
39590: PPUSH
39591: CALL_OW 12
39595: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39596: LD_ADDR_VAR 0 2
39600: PUSH
39601: LD_VAR 0 2
39605: PPUSH
39606: LD_VAR 0 2
39610: PUSH
39611: LD_INT 1
39613: PLUS
39614: PPUSH
39615: LD_VAR 0 1
39619: PUSH
39620: LD_VAR 0 4
39624: ARRAY
39625: PPUSH
39626: CALL_OW 2
39630: ST_TO_ADDR
// array := Delete ( array , index ) ;
39631: LD_ADDR_VAR 0 1
39635: PUSH
39636: LD_VAR 0 1
39640: PPUSH
39641: LD_VAR 0 4
39645: PPUSH
39646: CALL_OW 3
39650: ST_TO_ADDR
// end ;
39651: GO 39575
39653: POP
39654: POP
// end ;
39655: LD_VAR 0 2
39659: RET
// export function GetBaseMaterials ( base ) ; begin
39660: LD_INT 0
39662: PPUSH
// result := [ 0 , 0 , 0 ] ;
39663: LD_ADDR_VAR 0 2
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: ST_TO_ADDR
// if not base then
39682: LD_VAR 0 1
39686: NOT
39687: IFFALSE 39691
// exit ;
39689: GO 39740
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39691: LD_ADDR_VAR 0 2
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: LD_INT 1
39703: PPUSH
39704: CALL_OW 275
39708: PUSH
39709: LD_VAR 0 1
39713: PPUSH
39714: LD_INT 2
39716: PPUSH
39717: CALL_OW 275
39721: PUSH
39722: LD_VAR 0 1
39726: PPUSH
39727: LD_INT 3
39729: PPUSH
39730: CALL_OW 275
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: LIST
39739: ST_TO_ADDR
// end ;
39740: LD_VAR 0 2
39744: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39745: LD_INT 0
39747: PPUSH
39748: PPUSH
// result := array ;
39749: LD_ADDR_VAR 0 3
39753: PUSH
39754: LD_VAR 0 1
39758: ST_TO_ADDR
// if size >= result then
39759: LD_VAR 0 2
39763: PUSH
39764: LD_VAR 0 3
39768: GREATEREQUAL
39769: IFFALSE 39773
// exit ;
39771: GO 39823
// if size then
39773: LD_VAR 0 2
39777: IFFALSE 39823
// for i := array downto size do
39779: LD_ADDR_VAR 0 4
39783: PUSH
39784: DOUBLE
39785: LD_VAR 0 1
39789: INC
39790: ST_TO_ADDR
39791: LD_VAR 0 2
39795: PUSH
39796: FOR_DOWNTO
39797: IFFALSE 39821
// result := Delete ( result , result ) ;
39799: LD_ADDR_VAR 0 3
39803: PUSH
39804: LD_VAR 0 3
39808: PPUSH
39809: LD_VAR 0 3
39813: PPUSH
39814: CALL_OW 3
39818: ST_TO_ADDR
39819: GO 39796
39821: POP
39822: POP
// end ;
39823: LD_VAR 0 3
39827: RET
// export function ComExit ( unit ) ; var tmp ; begin
39828: LD_INT 0
39830: PPUSH
39831: PPUSH
// if not IsInUnit ( unit ) then
39832: LD_VAR 0 1
39836: PPUSH
39837: CALL_OW 310
39841: NOT
39842: IFFALSE 39846
// exit ;
39844: GO 39906
// tmp := IsInUnit ( unit ) ;
39846: LD_ADDR_VAR 0 3
39850: PUSH
39851: LD_VAR 0 1
39855: PPUSH
39856: CALL_OW 310
39860: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39861: LD_VAR 0 3
39865: PPUSH
39866: CALL_OW 247
39870: PUSH
39871: LD_INT 2
39873: EQUAL
39874: IFFALSE 39887
// ComExitVehicle ( unit ) else
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 121
39885: GO 39896
// ComExitBuilding ( unit ) ;
39887: LD_VAR 0 1
39891: PPUSH
39892: CALL_OW 122
// result := tmp ;
39896: LD_ADDR_VAR 0 2
39900: PUSH
39901: LD_VAR 0 3
39905: ST_TO_ADDR
// end ;
39906: LD_VAR 0 2
39910: RET
// export function ComExitAll ( units ) ; var i ; begin
39911: LD_INT 0
39913: PPUSH
39914: PPUSH
// if not units then
39915: LD_VAR 0 1
39919: NOT
39920: IFFALSE 39924
// exit ;
39922: GO 39950
// for i in units do
39924: LD_ADDR_VAR 0 3
39928: PUSH
39929: LD_VAR 0 1
39933: PUSH
39934: FOR_IN
39935: IFFALSE 39948
// ComExit ( i ) ;
39937: LD_VAR 0 3
39941: PPUSH
39942: CALL 39828 0 1
39946: GO 39934
39948: POP
39949: POP
// end ;
39950: LD_VAR 0 2
39954: RET
// export function ResetHc ; begin
39955: LD_INT 0
39957: PPUSH
// InitHc ;
39958: CALL_OW 19
// hc_importance := 0 ;
39962: LD_ADDR_OWVAR 32
39966: PUSH
39967: LD_INT 0
39969: ST_TO_ADDR
// end ;
39970: LD_VAR 0 1
39974: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39975: LD_INT 0
39977: PPUSH
39978: PPUSH
39979: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39980: LD_ADDR_VAR 0 6
39984: PUSH
39985: LD_VAR 0 1
39989: PUSH
39990: LD_VAR 0 3
39994: PLUS
39995: PUSH
39996: LD_INT 2
39998: DIV
39999: ST_TO_ADDR
// if _x < 0 then
40000: LD_VAR 0 6
40004: PUSH
40005: LD_INT 0
40007: LESS
40008: IFFALSE 40025
// _x := _x * - 1 ;
40010: LD_ADDR_VAR 0 6
40014: PUSH
40015: LD_VAR 0 6
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: MUL
40024: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40025: LD_ADDR_VAR 0 7
40029: PUSH
40030: LD_VAR 0 2
40034: PUSH
40035: LD_VAR 0 4
40039: PLUS
40040: PUSH
40041: LD_INT 2
40043: DIV
40044: ST_TO_ADDR
// if _y < 0 then
40045: LD_VAR 0 7
40049: PUSH
40050: LD_INT 0
40052: LESS
40053: IFFALSE 40070
// _y := _y * - 1 ;
40055: LD_ADDR_VAR 0 7
40059: PUSH
40060: LD_VAR 0 7
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: MUL
40069: ST_TO_ADDR
// result := [ _x , _y ] ;
40070: LD_ADDR_VAR 0 5
40074: PUSH
40075: LD_VAR 0 6
40079: PUSH
40080: LD_VAR 0 7
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: ST_TO_ADDR
// end ;
40089: LD_VAR 0 5
40093: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40094: LD_INT 0
40096: PPUSH
40097: PPUSH
40098: PPUSH
40099: PPUSH
// task := GetTaskList ( unit ) ;
40100: LD_ADDR_VAR 0 7
40104: PUSH
40105: LD_VAR 0 1
40109: PPUSH
40110: CALL_OW 437
40114: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40115: LD_VAR 0 7
40119: NOT
40120: PUSH
40121: LD_VAR 0 1
40125: PPUSH
40126: LD_VAR 0 2
40130: PPUSH
40131: CALL_OW 308
40135: NOT
40136: AND
40137: IFFALSE 40141
// exit ;
40139: GO 40259
// if IsInArea ( unit , area ) then
40141: LD_VAR 0 1
40145: PPUSH
40146: LD_VAR 0 2
40150: PPUSH
40151: CALL_OW 308
40155: IFFALSE 40173
// begin ComMoveToArea ( unit , goAway ) ;
40157: LD_VAR 0 1
40161: PPUSH
40162: LD_VAR 0 3
40166: PPUSH
40167: CALL_OW 113
// exit ;
40171: GO 40259
// end ; if task [ 1 ] [ 1 ] <> M then
40173: LD_VAR 0 7
40177: PUSH
40178: LD_INT 1
40180: ARRAY
40181: PUSH
40182: LD_INT 1
40184: ARRAY
40185: PUSH
40186: LD_STRING M
40188: NONEQUAL
40189: IFFALSE 40193
// exit ;
40191: GO 40259
// x := task [ 1 ] [ 2 ] ;
40193: LD_ADDR_VAR 0 5
40197: PUSH
40198: LD_VAR 0 7
40202: PUSH
40203: LD_INT 1
40205: ARRAY
40206: PUSH
40207: LD_INT 2
40209: ARRAY
40210: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40211: LD_ADDR_VAR 0 6
40215: PUSH
40216: LD_VAR 0 7
40220: PUSH
40221: LD_INT 1
40223: ARRAY
40224: PUSH
40225: LD_INT 3
40227: ARRAY
40228: ST_TO_ADDR
// if InArea ( x , y , area ) then
40229: LD_VAR 0 5
40233: PPUSH
40234: LD_VAR 0 6
40238: PPUSH
40239: LD_VAR 0 2
40243: PPUSH
40244: CALL_OW 309
40248: IFFALSE 40259
// ComStop ( unit ) ;
40250: LD_VAR 0 1
40254: PPUSH
40255: CALL_OW 141
// end ;
40259: LD_VAR 0 4
40263: RET
// export function Abs ( value ) ; begin
40264: LD_INT 0
40266: PPUSH
// result := value ;
40267: LD_ADDR_VAR 0 2
40271: PUSH
40272: LD_VAR 0 1
40276: ST_TO_ADDR
// if value < 0 then
40277: LD_VAR 0 1
40281: PUSH
40282: LD_INT 0
40284: LESS
40285: IFFALSE 40302
// result := value * - 1 ;
40287: LD_ADDR_VAR 0 2
40291: PUSH
40292: LD_VAR 0 1
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: MUL
40301: ST_TO_ADDR
// end ;
40302: LD_VAR 0 2
40306: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40307: LD_INT 0
40309: PPUSH
40310: PPUSH
40311: PPUSH
40312: PPUSH
40313: PPUSH
40314: PPUSH
40315: PPUSH
40316: PPUSH
// if not unit or not building then
40317: LD_VAR 0 1
40321: NOT
40322: PUSH
40323: LD_VAR 0 2
40327: NOT
40328: OR
40329: IFFALSE 40333
// exit ;
40331: GO 40559
// x := GetX ( building ) ;
40333: LD_ADDR_VAR 0 4
40337: PUSH
40338: LD_VAR 0 2
40342: PPUSH
40343: CALL_OW 250
40347: ST_TO_ADDR
// y := GetY ( building ) ;
40348: LD_ADDR_VAR 0 6
40352: PUSH
40353: LD_VAR 0 2
40357: PPUSH
40358: CALL_OW 251
40362: ST_TO_ADDR
// d := GetDir ( building ) ;
40363: LD_ADDR_VAR 0 8
40367: PUSH
40368: LD_VAR 0 2
40372: PPUSH
40373: CALL_OW 254
40377: ST_TO_ADDR
// r := 4 ;
40378: LD_ADDR_VAR 0 9
40382: PUSH
40383: LD_INT 4
40385: ST_TO_ADDR
// for i := 1 to 5 do
40386: LD_ADDR_VAR 0 10
40390: PUSH
40391: DOUBLE
40392: LD_INT 1
40394: DEC
40395: ST_TO_ADDR
40396: LD_INT 5
40398: PUSH
40399: FOR_TO
40400: IFFALSE 40557
// begin _x := ShiftX ( x , d , r + i ) ;
40402: LD_ADDR_VAR 0 5
40406: PUSH
40407: LD_VAR 0 4
40411: PPUSH
40412: LD_VAR 0 8
40416: PPUSH
40417: LD_VAR 0 9
40421: PUSH
40422: LD_VAR 0 10
40426: PLUS
40427: PPUSH
40428: CALL_OW 272
40432: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40433: LD_ADDR_VAR 0 7
40437: PUSH
40438: LD_VAR 0 6
40442: PPUSH
40443: LD_VAR 0 8
40447: PPUSH
40448: LD_VAR 0 9
40452: PUSH
40453: LD_VAR 0 10
40457: PLUS
40458: PPUSH
40459: CALL_OW 273
40463: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40464: LD_VAR 0 5
40468: PPUSH
40469: LD_VAR 0 7
40473: PPUSH
40474: CALL_OW 488
40478: PUSH
40479: LD_VAR 0 5
40483: PPUSH
40484: LD_VAR 0 7
40488: PPUSH
40489: CALL_OW 428
40493: PPUSH
40494: CALL_OW 247
40498: PUSH
40499: LD_INT 3
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: IN
40509: NOT
40510: AND
40511: IFFALSE 40555
// begin ComMoveXY ( unit , _x , _y ) ;
40513: LD_VAR 0 1
40517: PPUSH
40518: LD_VAR 0 5
40522: PPUSH
40523: LD_VAR 0 7
40527: PPUSH
40528: CALL_OW 111
// result := [ _x , _y ] ;
40532: LD_ADDR_VAR 0 3
40536: PUSH
40537: LD_VAR 0 5
40541: PUSH
40542: LD_VAR 0 7
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: ST_TO_ADDR
// exit ;
40551: POP
40552: POP
40553: GO 40559
// end ; end ;
40555: GO 40399
40557: POP
40558: POP
// end ;
40559: LD_VAR 0 3
40563: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40564: LD_INT 0
40566: PPUSH
40567: PPUSH
40568: PPUSH
// result := 0 ;
40569: LD_ADDR_VAR 0 3
40573: PUSH
40574: LD_INT 0
40576: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40577: LD_VAR 0 1
40581: PUSH
40582: LD_INT 0
40584: LESS
40585: PUSH
40586: LD_VAR 0 1
40590: PUSH
40591: LD_INT 8
40593: GREATER
40594: OR
40595: PUSH
40596: LD_VAR 0 2
40600: PUSH
40601: LD_INT 0
40603: LESS
40604: OR
40605: PUSH
40606: LD_VAR 0 2
40610: PUSH
40611: LD_INT 8
40613: GREATER
40614: OR
40615: IFFALSE 40619
// exit ;
40617: GO 40694
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40619: LD_ADDR_VAR 0 4
40623: PUSH
40624: LD_INT 22
40626: PUSH
40627: LD_VAR 0 2
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PPUSH
40636: CALL_OW 69
40640: PUSH
40641: FOR_IN
40642: IFFALSE 40692
// begin un := UnitShoot ( i ) ;
40644: LD_ADDR_VAR 0 5
40648: PUSH
40649: LD_VAR 0 4
40653: PPUSH
40654: CALL_OW 504
40658: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40659: LD_VAR 0 5
40663: PPUSH
40664: CALL_OW 255
40668: PUSH
40669: LD_VAR 0 1
40673: EQUAL
40674: IFFALSE 40690
// begin result := un ;
40676: LD_ADDR_VAR 0 3
40680: PUSH
40681: LD_VAR 0 5
40685: ST_TO_ADDR
// exit ;
40686: POP
40687: POP
40688: GO 40694
// end ; end ;
40690: GO 40641
40692: POP
40693: POP
// end ;
40694: LD_VAR 0 3
40698: RET
// export function GetCargoBay ( units ) ; begin
40699: LD_INT 0
40701: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40702: LD_ADDR_VAR 0 2
40706: PUSH
40707: LD_VAR 0 1
40711: PPUSH
40712: LD_INT 2
40714: PUSH
40715: LD_INT 34
40717: PUSH
40718: LD_INT 12
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 34
40727: PUSH
40728: LD_INT 51
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 34
40737: PUSH
40738: LD_INT 32
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 34
40747: PUSH
40748: LD_INT 89
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: PPUSH
40762: CALL_OW 72
40766: ST_TO_ADDR
// end ;
40767: LD_VAR 0 2
40771: RET
// export function Negate ( value ) ; begin
40772: LD_INT 0
40774: PPUSH
// result := not value ;
40775: LD_ADDR_VAR 0 2
40779: PUSH
40780: LD_VAR 0 1
40784: NOT
40785: ST_TO_ADDR
// end ;
40786: LD_VAR 0 2
40790: RET
// export function Inc ( value ) ; begin
40791: LD_INT 0
40793: PPUSH
// result := value + 1 ;
40794: LD_ADDR_VAR 0 2
40798: PUSH
40799: LD_VAR 0 1
40803: PUSH
40804: LD_INT 1
40806: PLUS
40807: ST_TO_ADDR
// end ;
40808: LD_VAR 0 2
40812: RET
// export function Dec ( value ) ; begin
40813: LD_INT 0
40815: PPUSH
// result := value - 1 ;
40816: LD_ADDR_VAR 0 2
40820: PUSH
40821: LD_VAR 0 1
40825: PUSH
40826: LD_INT 1
40828: MINUS
40829: ST_TO_ADDR
// end ;
40830: LD_VAR 0 2
40834: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40835: LD_INT 0
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40845: LD_VAR 0 1
40849: PPUSH
40850: LD_VAR 0 2
40854: PPUSH
40855: CALL_OW 488
40859: NOT
40860: PUSH
40861: LD_VAR 0 3
40865: PPUSH
40866: LD_VAR 0 4
40870: PPUSH
40871: CALL_OW 488
40875: NOT
40876: OR
40877: IFFALSE 40890
// begin result := - 1 ;
40879: LD_ADDR_VAR 0 5
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: ST_TO_ADDR
// exit ;
40888: GO 41125
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40890: LD_ADDR_VAR 0 12
40894: PUSH
40895: LD_VAR 0 1
40899: PPUSH
40900: LD_VAR 0 2
40904: PPUSH
40905: LD_VAR 0 3
40909: PPUSH
40910: LD_VAR 0 4
40914: PPUSH
40915: CALL 39975 0 4
40919: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40920: LD_ADDR_VAR 0 11
40924: PUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: LD_VAR 0 2
40934: PPUSH
40935: LD_VAR 0 12
40939: PUSH
40940: LD_INT 1
40942: ARRAY
40943: PPUSH
40944: LD_VAR 0 12
40948: PUSH
40949: LD_INT 2
40951: ARRAY
40952: PPUSH
40953: CALL_OW 298
40957: ST_TO_ADDR
// distance := 9999 ;
40958: LD_ADDR_VAR 0 10
40962: PUSH
40963: LD_INT 9999
40965: ST_TO_ADDR
// for i := 0 to 5 do
40966: LD_ADDR_VAR 0 6
40970: PUSH
40971: DOUBLE
40972: LD_INT 0
40974: DEC
40975: ST_TO_ADDR
40976: LD_INT 5
40978: PUSH
40979: FOR_TO
40980: IFFALSE 41123
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40982: LD_ADDR_VAR 0 7
40986: PUSH
40987: LD_VAR 0 1
40991: PPUSH
40992: LD_VAR 0 6
40996: PPUSH
40997: LD_VAR 0 11
41001: PPUSH
41002: CALL_OW 272
41006: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41007: LD_ADDR_VAR 0 8
41011: PUSH
41012: LD_VAR 0 2
41016: PPUSH
41017: LD_VAR 0 6
41021: PPUSH
41022: LD_VAR 0 11
41026: PPUSH
41027: CALL_OW 273
41031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41032: LD_VAR 0 7
41036: PPUSH
41037: LD_VAR 0 8
41041: PPUSH
41042: CALL_OW 488
41046: NOT
41047: IFFALSE 41051
// continue ;
41049: GO 40979
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41051: LD_ADDR_VAR 0 9
41055: PUSH
41056: LD_VAR 0 12
41060: PUSH
41061: LD_INT 1
41063: ARRAY
41064: PPUSH
41065: LD_VAR 0 12
41069: PUSH
41070: LD_INT 2
41072: ARRAY
41073: PPUSH
41074: LD_VAR 0 7
41078: PPUSH
41079: LD_VAR 0 8
41083: PPUSH
41084: CALL_OW 298
41088: ST_TO_ADDR
// if tmp < distance then
41089: LD_VAR 0 9
41093: PUSH
41094: LD_VAR 0 10
41098: LESS
41099: IFFALSE 41121
// begin result := i ;
41101: LD_ADDR_VAR 0 5
41105: PUSH
41106: LD_VAR 0 6
41110: ST_TO_ADDR
// distance := tmp ;
41111: LD_ADDR_VAR 0 10
41115: PUSH
41116: LD_VAR 0 9
41120: ST_TO_ADDR
// end ; end ;
41121: GO 40979
41123: POP
41124: POP
// end ;
41125: LD_VAR 0 5
41129: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41130: LD_INT 0
41132: PPUSH
41133: PPUSH
// if not driver or not IsInUnit ( driver ) then
41134: LD_VAR 0 1
41138: NOT
41139: PUSH
41140: LD_VAR 0 1
41144: PPUSH
41145: CALL_OW 310
41149: NOT
41150: OR
41151: IFFALSE 41155
// exit ;
41153: GO 41245
// vehicle := IsInUnit ( driver ) ;
41155: LD_ADDR_VAR 0 3
41159: PUSH
41160: LD_VAR 0 1
41164: PPUSH
41165: CALL_OW 310
41169: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41170: LD_VAR 0 1
41174: PPUSH
41175: LD_STRING \
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: PUSH
41205: LD_STRING E
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_VAR 0 3
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PPUSH
41241: CALL_OW 446
// end ;
41245: LD_VAR 0 2
41249: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41250: LD_INT 0
41252: PPUSH
41253: PPUSH
// if not driver or not IsInUnit ( driver ) then
41254: LD_VAR 0 1
41258: NOT
41259: PUSH
41260: LD_VAR 0 1
41264: PPUSH
41265: CALL_OW 310
41269: NOT
41270: OR
41271: IFFALSE 41275
// exit ;
41273: GO 41365
// vehicle := IsInUnit ( driver ) ;
41275: LD_ADDR_VAR 0 3
41279: PUSH
41280: LD_VAR 0 1
41284: PPUSH
41285: CALL_OW 310
41289: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41290: LD_VAR 0 1
41294: PPUSH
41295: LD_STRING \
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: PUSH
41325: LD_STRING E
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_VAR 0 3
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PPUSH
41361: CALL_OW 447
// end ;
41365: LD_VAR 0 2
41369: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41370: LD_INT 0
41372: PPUSH
41373: PPUSH
41374: PPUSH
// tmp := [ ] ;
41375: LD_ADDR_VAR 0 5
41379: PUSH
41380: EMPTY
41381: ST_TO_ADDR
// for i in units do
41382: LD_ADDR_VAR 0 4
41386: PUSH
41387: LD_VAR 0 1
41391: PUSH
41392: FOR_IN
41393: IFFALSE 41431
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41395: LD_ADDR_VAR 0 5
41399: PUSH
41400: LD_VAR 0 5
41404: PPUSH
41405: LD_VAR 0 5
41409: PUSH
41410: LD_INT 1
41412: PLUS
41413: PPUSH
41414: LD_VAR 0 4
41418: PPUSH
41419: CALL_OW 256
41423: PPUSH
41424: CALL_OW 2
41428: ST_TO_ADDR
41429: GO 41392
41431: POP
41432: POP
// if not tmp then
41433: LD_VAR 0 5
41437: NOT
41438: IFFALSE 41442
// exit ;
41440: GO 41490
// if asc then
41442: LD_VAR 0 2
41446: IFFALSE 41470
// result := SortListByListAsc ( units , tmp ) else
41448: LD_ADDR_VAR 0 3
41452: PUSH
41453: LD_VAR 0 1
41457: PPUSH
41458: LD_VAR 0 5
41462: PPUSH
41463: CALL_OW 76
41467: ST_TO_ADDR
41468: GO 41490
// result := SortListByListDesc ( units , tmp ) ;
41470: LD_ADDR_VAR 0 3
41474: PUSH
41475: LD_VAR 0 1
41479: PPUSH
41480: LD_VAR 0 5
41484: PPUSH
41485: CALL_OW 77
41489: ST_TO_ADDR
// end ;
41490: LD_VAR 0 3
41494: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41495: LD_INT 0
41497: PPUSH
41498: PPUSH
// task := GetTaskList ( mech ) ;
41499: LD_ADDR_VAR 0 4
41503: PUSH
41504: LD_VAR 0 1
41508: PPUSH
41509: CALL_OW 437
41513: ST_TO_ADDR
// if not task then
41514: LD_VAR 0 4
41518: NOT
41519: IFFALSE 41523
// exit ;
41521: GO 41565
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41523: LD_ADDR_VAR 0 3
41527: PUSH
41528: LD_VAR 0 4
41532: PUSH
41533: LD_INT 1
41535: ARRAY
41536: PUSH
41537: LD_INT 1
41539: ARRAY
41540: PUSH
41541: LD_STRING r
41543: EQUAL
41544: PUSH
41545: LD_VAR 0 4
41549: PUSH
41550: LD_INT 1
41552: ARRAY
41553: PUSH
41554: LD_INT 4
41556: ARRAY
41557: PUSH
41558: LD_VAR 0 2
41562: EQUAL
41563: AND
41564: ST_TO_ADDR
// end ;
41565: LD_VAR 0 3
41569: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41570: LD_INT 0
41572: PPUSH
// SetDir ( unit , d ) ;
41573: LD_VAR 0 1
41577: PPUSH
41578: LD_VAR 0 4
41582: PPUSH
41583: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41587: LD_VAR 0 1
41591: PPUSH
41592: LD_VAR 0 2
41596: PPUSH
41597: LD_VAR 0 3
41601: PPUSH
41602: LD_VAR 0 5
41606: PPUSH
41607: CALL_OW 48
// end ;
41611: LD_VAR 0 6
41615: RET
// export function ToNaturalNumber ( number ) ; begin
41616: LD_INT 0
41618: PPUSH
// result := number div 1 ;
41619: LD_ADDR_VAR 0 2
41623: PUSH
41624: LD_VAR 0 1
41628: PUSH
41629: LD_INT 1
41631: DIV
41632: ST_TO_ADDR
// if number < 0 then
41633: LD_VAR 0 1
41637: PUSH
41638: LD_INT 0
41640: LESS
41641: IFFALSE 41651
// result := 0 ;
41643: LD_ADDR_VAR 0 2
41647: PUSH
41648: LD_INT 0
41650: ST_TO_ADDR
// end ;
41651: LD_VAR 0 2
41655: RET
// export function SortByClass ( units , class ) ; var un ; begin
41656: LD_INT 0
41658: PPUSH
41659: PPUSH
// if not units or not class then
41660: LD_VAR 0 1
41664: NOT
41665: PUSH
41666: LD_VAR 0 2
41670: NOT
41671: OR
41672: IFFALSE 41676
// exit ;
41674: GO 41771
// result := [ ] ;
41676: LD_ADDR_VAR 0 3
41680: PUSH
41681: EMPTY
41682: ST_TO_ADDR
// for un in units do
41683: LD_ADDR_VAR 0 4
41687: PUSH
41688: LD_VAR 0 1
41692: PUSH
41693: FOR_IN
41694: IFFALSE 41769
// if GetClass ( un ) = class then
41696: LD_VAR 0 4
41700: PPUSH
41701: CALL_OW 257
41705: PUSH
41706: LD_VAR 0 2
41710: EQUAL
41711: IFFALSE 41738
// result := Insert ( result , 1 , un ) else
41713: LD_ADDR_VAR 0 3
41717: PUSH
41718: LD_VAR 0 3
41722: PPUSH
41723: LD_INT 1
41725: PPUSH
41726: LD_VAR 0 4
41730: PPUSH
41731: CALL_OW 2
41735: ST_TO_ADDR
41736: GO 41767
// result := Replace ( result , result + 1 , un ) ;
41738: LD_ADDR_VAR 0 3
41742: PUSH
41743: LD_VAR 0 3
41747: PPUSH
41748: LD_VAR 0 3
41752: PUSH
41753: LD_INT 1
41755: PLUS
41756: PPUSH
41757: LD_VAR 0 4
41761: PPUSH
41762: CALL_OW 1
41766: ST_TO_ADDR
41767: GO 41693
41769: POP
41770: POP
// end ;
41771: LD_VAR 0 3
41775: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41776: LD_INT 0
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
41782: PPUSH
41783: PPUSH
41784: PPUSH
// result := [ ] ;
41785: LD_ADDR_VAR 0 4
41789: PUSH
41790: EMPTY
41791: ST_TO_ADDR
// if x - r < 0 then
41792: LD_VAR 0 1
41796: PUSH
41797: LD_VAR 0 3
41801: MINUS
41802: PUSH
41803: LD_INT 0
41805: LESS
41806: IFFALSE 41818
// min_x := 0 else
41808: LD_ADDR_VAR 0 8
41812: PUSH
41813: LD_INT 0
41815: ST_TO_ADDR
41816: GO 41834
// min_x := x - r ;
41818: LD_ADDR_VAR 0 8
41822: PUSH
41823: LD_VAR 0 1
41827: PUSH
41828: LD_VAR 0 3
41832: MINUS
41833: ST_TO_ADDR
// if y - r < 0 then
41834: LD_VAR 0 2
41838: PUSH
41839: LD_VAR 0 3
41843: MINUS
41844: PUSH
41845: LD_INT 0
41847: LESS
41848: IFFALSE 41860
// min_y := 0 else
41850: LD_ADDR_VAR 0 7
41854: PUSH
41855: LD_INT 0
41857: ST_TO_ADDR
41858: GO 41876
// min_y := y - r ;
41860: LD_ADDR_VAR 0 7
41864: PUSH
41865: LD_VAR 0 2
41869: PUSH
41870: LD_VAR 0 3
41874: MINUS
41875: ST_TO_ADDR
// max_x := x + r ;
41876: LD_ADDR_VAR 0 9
41880: PUSH
41881: LD_VAR 0 1
41885: PUSH
41886: LD_VAR 0 3
41890: PLUS
41891: ST_TO_ADDR
// max_y := y + r ;
41892: LD_ADDR_VAR 0 10
41896: PUSH
41897: LD_VAR 0 2
41901: PUSH
41902: LD_VAR 0 3
41906: PLUS
41907: ST_TO_ADDR
// for _x = min_x to max_x do
41908: LD_ADDR_VAR 0 5
41912: PUSH
41913: DOUBLE
41914: LD_VAR 0 8
41918: DEC
41919: ST_TO_ADDR
41920: LD_VAR 0 9
41924: PUSH
41925: FOR_TO
41926: IFFALSE 42027
// for _y = min_y to max_y do
41928: LD_ADDR_VAR 0 6
41932: PUSH
41933: DOUBLE
41934: LD_VAR 0 7
41938: DEC
41939: ST_TO_ADDR
41940: LD_VAR 0 10
41944: PUSH
41945: FOR_TO
41946: IFFALSE 42023
// begin if not ValidHex ( _x , _y ) then
41948: LD_VAR 0 5
41952: PPUSH
41953: LD_VAR 0 6
41957: PPUSH
41958: CALL_OW 488
41962: NOT
41963: IFFALSE 41967
// continue ;
41965: GO 41945
// if GetResourceTypeXY ( _x , _y ) then
41967: LD_VAR 0 5
41971: PPUSH
41972: LD_VAR 0 6
41976: PPUSH
41977: CALL_OW 283
41981: IFFALSE 42021
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41983: LD_ADDR_VAR 0 4
41987: PUSH
41988: LD_VAR 0 4
41992: PPUSH
41993: LD_VAR 0 4
41997: PUSH
41998: LD_INT 1
42000: PLUS
42001: PPUSH
42002: LD_VAR 0 5
42006: PUSH
42007: LD_VAR 0 6
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PPUSH
42016: CALL_OW 1
42020: ST_TO_ADDR
// end ;
42021: GO 41945
42023: POP
42024: POP
42025: GO 41925
42027: POP
42028: POP
// end ;
42029: LD_VAR 0 4
42033: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42034: LD_INT 0
42036: PPUSH
42037: PPUSH
42038: PPUSH
42039: PPUSH
42040: PPUSH
42041: PPUSH
42042: PPUSH
42043: PPUSH
// if not units then
42044: LD_VAR 0 1
42048: NOT
42049: IFFALSE 42053
// exit ;
42051: GO 42581
// result := UnitFilter ( units , [ f_ok ] ) ;
42053: LD_ADDR_VAR 0 3
42057: PUSH
42058: LD_VAR 0 1
42062: PPUSH
42063: LD_INT 50
42065: PUSH
42066: EMPTY
42067: LIST
42068: PPUSH
42069: CALL_OW 72
42073: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42074: LD_ADDR_VAR 0 8
42078: PUSH
42079: LD_VAR 0 1
42083: PUSH
42084: LD_INT 1
42086: ARRAY
42087: PPUSH
42088: CALL_OW 255
42092: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42093: LD_ADDR_VAR 0 10
42097: PUSH
42098: LD_INT 29
42100: PUSH
42101: LD_INT 91
42103: PUSH
42104: LD_INT 49
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: ST_TO_ADDR
// if not result then
42112: LD_VAR 0 3
42116: NOT
42117: IFFALSE 42121
// exit ;
42119: GO 42581
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42121: LD_ADDR_VAR 0 5
42125: PUSH
42126: LD_INT 81
42128: PUSH
42129: LD_VAR 0 8
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PPUSH
42138: CALL_OW 69
42142: ST_TO_ADDR
// for i in result do
42143: LD_ADDR_VAR 0 4
42147: PUSH
42148: LD_VAR 0 3
42152: PUSH
42153: FOR_IN
42154: IFFALSE 42579
// begin tag := GetTag ( i ) + 1 ;
42156: LD_ADDR_VAR 0 9
42160: PUSH
42161: LD_VAR 0 4
42165: PPUSH
42166: CALL_OW 110
42170: PUSH
42171: LD_INT 1
42173: PLUS
42174: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42175: LD_ADDR_VAR 0 7
42179: PUSH
42180: LD_VAR 0 4
42184: PPUSH
42185: CALL_OW 250
42189: PPUSH
42190: LD_VAR 0 4
42194: PPUSH
42195: CALL_OW 251
42199: PPUSH
42200: LD_INT 4
42202: PPUSH
42203: CALL 41776 0 3
42207: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42208: LD_VAR 0 4
42212: PPUSH
42213: CALL_OW 247
42217: PUSH
42218: LD_INT 2
42220: EQUAL
42221: PUSH
42222: LD_VAR 0 7
42226: PUSH
42227: LD_INT 2
42229: GREATER
42230: AND
42231: PUSH
42232: LD_VAR 0 4
42236: PPUSH
42237: CALL_OW 264
42241: PUSH
42242: LD_VAR 0 10
42246: IN
42247: NOT
42248: AND
42249: IFFALSE 42288
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42251: LD_VAR 0 4
42255: PPUSH
42256: LD_VAR 0 7
42260: PUSH
42261: LD_INT 1
42263: ARRAY
42264: PUSH
42265: LD_INT 1
42267: ARRAY
42268: PPUSH
42269: LD_VAR 0 7
42273: PUSH
42274: LD_INT 1
42276: ARRAY
42277: PUSH
42278: LD_INT 2
42280: ARRAY
42281: PPUSH
42282: CALL_OW 116
42286: GO 42577
// if path > tag then
42288: LD_VAR 0 2
42292: PUSH
42293: LD_VAR 0 9
42297: GREATER
42298: IFFALSE 42506
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42300: LD_ADDR_VAR 0 6
42304: PUSH
42305: LD_VAR 0 5
42309: PPUSH
42310: LD_INT 91
42312: PUSH
42313: LD_VAR 0 4
42317: PUSH
42318: LD_INT 8
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: LIST
42325: PPUSH
42326: CALL_OW 72
42330: ST_TO_ADDR
// if nearEnemy then
42331: LD_VAR 0 6
42335: IFFALSE 42404
// begin if GetWeapon ( i ) = ru_time_lapser then
42337: LD_VAR 0 4
42341: PPUSH
42342: CALL_OW 264
42346: PUSH
42347: LD_INT 49
42349: EQUAL
42350: IFFALSE 42378
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42352: LD_VAR 0 4
42356: PPUSH
42357: LD_VAR 0 6
42361: PPUSH
42362: LD_VAR 0 4
42366: PPUSH
42367: CALL_OW 74
42371: PPUSH
42372: CALL_OW 112
42376: GO 42402
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42378: LD_VAR 0 4
42382: PPUSH
42383: LD_VAR 0 6
42387: PPUSH
42388: LD_VAR 0 4
42392: PPUSH
42393: CALL_OW 74
42397: PPUSH
42398: CALL 43652 0 2
// end else
42402: GO 42504
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42404: LD_VAR 0 4
42408: PPUSH
42409: LD_VAR 0 2
42413: PUSH
42414: LD_VAR 0 9
42418: ARRAY
42419: PUSH
42420: LD_INT 1
42422: ARRAY
42423: PPUSH
42424: LD_VAR 0 2
42428: PUSH
42429: LD_VAR 0 9
42433: ARRAY
42434: PUSH
42435: LD_INT 2
42437: ARRAY
42438: PPUSH
42439: CALL_OW 297
42443: PUSH
42444: LD_INT 6
42446: GREATER
42447: IFFALSE 42490
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42449: LD_VAR 0 4
42453: PPUSH
42454: LD_VAR 0 2
42458: PUSH
42459: LD_VAR 0 9
42463: ARRAY
42464: PUSH
42465: LD_INT 1
42467: ARRAY
42468: PPUSH
42469: LD_VAR 0 2
42473: PUSH
42474: LD_VAR 0 9
42478: ARRAY
42479: PUSH
42480: LD_INT 2
42482: ARRAY
42483: PPUSH
42484: CALL_OW 114
42488: GO 42504
// SetTag ( i , tag ) ;
42490: LD_VAR 0 4
42494: PPUSH
42495: LD_VAR 0 9
42499: PPUSH
42500: CALL_OW 109
// end else
42504: GO 42577
// if enemy then
42506: LD_VAR 0 5
42510: IFFALSE 42577
// begin if GetWeapon ( i ) = ru_time_lapser then
42512: LD_VAR 0 4
42516: PPUSH
42517: CALL_OW 264
42521: PUSH
42522: LD_INT 49
42524: EQUAL
42525: IFFALSE 42553
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42527: LD_VAR 0 4
42531: PPUSH
42532: LD_VAR 0 5
42536: PPUSH
42537: LD_VAR 0 4
42541: PPUSH
42542: CALL_OW 74
42546: PPUSH
42547: CALL_OW 112
42551: GO 42577
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42553: LD_VAR 0 4
42557: PPUSH
42558: LD_VAR 0 5
42562: PPUSH
42563: LD_VAR 0 4
42567: PPUSH
42568: CALL_OW 74
42572: PPUSH
42573: CALL 43652 0 2
// end ; end ;
42577: GO 42153
42579: POP
42580: POP
// end ;
42581: LD_VAR 0 3
42585: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42586: LD_INT 0
42588: PPUSH
42589: PPUSH
42590: PPUSH
// if not unit or IsInUnit ( unit ) then
42591: LD_VAR 0 1
42595: NOT
42596: PUSH
42597: LD_VAR 0 1
42601: PPUSH
42602: CALL_OW 310
42606: OR
42607: IFFALSE 42611
// exit ;
42609: GO 42702
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42611: LD_ADDR_VAR 0 4
42615: PUSH
42616: LD_VAR 0 1
42620: PPUSH
42621: CALL_OW 250
42625: PPUSH
42626: LD_VAR 0 2
42630: PPUSH
42631: LD_INT 1
42633: PPUSH
42634: CALL_OW 272
42638: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42639: LD_ADDR_VAR 0 5
42643: PUSH
42644: LD_VAR 0 1
42648: PPUSH
42649: CALL_OW 251
42653: PPUSH
42654: LD_VAR 0 2
42658: PPUSH
42659: LD_INT 1
42661: PPUSH
42662: CALL_OW 273
42666: ST_TO_ADDR
// if ValidHex ( x , y ) then
42667: LD_VAR 0 4
42671: PPUSH
42672: LD_VAR 0 5
42676: PPUSH
42677: CALL_OW 488
42681: IFFALSE 42702
// ComTurnXY ( unit , x , y ) ;
42683: LD_VAR 0 1
42687: PPUSH
42688: LD_VAR 0 4
42692: PPUSH
42693: LD_VAR 0 5
42697: PPUSH
42698: CALL_OW 118
// end ;
42702: LD_VAR 0 3
42706: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42707: LD_INT 0
42709: PPUSH
42710: PPUSH
// result := false ;
42711: LD_ADDR_VAR 0 3
42715: PUSH
42716: LD_INT 0
42718: ST_TO_ADDR
// if not units then
42719: LD_VAR 0 2
42723: NOT
42724: IFFALSE 42728
// exit ;
42726: GO 42773
// for i in units do
42728: LD_ADDR_VAR 0 4
42732: PUSH
42733: LD_VAR 0 2
42737: PUSH
42738: FOR_IN
42739: IFFALSE 42771
// if See ( side , i ) then
42741: LD_VAR 0 1
42745: PPUSH
42746: LD_VAR 0 4
42750: PPUSH
42751: CALL_OW 292
42755: IFFALSE 42769
// begin result := true ;
42757: LD_ADDR_VAR 0 3
42761: PUSH
42762: LD_INT 1
42764: ST_TO_ADDR
// exit ;
42765: POP
42766: POP
42767: GO 42773
// end ;
42769: GO 42738
42771: POP
42772: POP
// end ;
42773: LD_VAR 0 3
42777: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42778: LD_INT 0
42780: PPUSH
42781: PPUSH
42782: PPUSH
42783: PPUSH
// if not unit or not points then
42784: LD_VAR 0 1
42788: NOT
42789: PUSH
42790: LD_VAR 0 2
42794: NOT
42795: OR
42796: IFFALSE 42800
// exit ;
42798: GO 42890
// dist := 99999 ;
42800: LD_ADDR_VAR 0 5
42804: PUSH
42805: LD_INT 99999
42807: ST_TO_ADDR
// for i in points do
42808: LD_ADDR_VAR 0 4
42812: PUSH
42813: LD_VAR 0 2
42817: PUSH
42818: FOR_IN
42819: IFFALSE 42888
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42821: LD_ADDR_VAR 0 6
42825: PUSH
42826: LD_VAR 0 1
42830: PPUSH
42831: LD_VAR 0 4
42835: PUSH
42836: LD_INT 1
42838: ARRAY
42839: PPUSH
42840: LD_VAR 0 4
42844: PUSH
42845: LD_INT 2
42847: ARRAY
42848: PPUSH
42849: CALL_OW 297
42853: ST_TO_ADDR
// if tmpDist < dist then
42854: LD_VAR 0 6
42858: PUSH
42859: LD_VAR 0 5
42863: LESS
42864: IFFALSE 42886
// begin result := i ;
42866: LD_ADDR_VAR 0 3
42870: PUSH
42871: LD_VAR 0 4
42875: ST_TO_ADDR
// dist := tmpDist ;
42876: LD_ADDR_VAR 0 5
42880: PUSH
42881: LD_VAR 0 6
42885: ST_TO_ADDR
// end ; end ;
42886: GO 42818
42888: POP
42889: POP
// end ;
42890: LD_VAR 0 3
42894: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42895: LD_INT 0
42897: PPUSH
// uc_side := side ;
42898: LD_ADDR_OWVAR 20
42902: PUSH
42903: LD_VAR 0 1
42907: ST_TO_ADDR
// uc_nation := 3 ;
42908: LD_ADDR_OWVAR 21
42912: PUSH
42913: LD_INT 3
42915: ST_TO_ADDR
// vc_chassis := 25 ;
42916: LD_ADDR_OWVAR 37
42920: PUSH
42921: LD_INT 25
42923: ST_TO_ADDR
// vc_engine := engine_siberite ;
42924: LD_ADDR_OWVAR 39
42928: PUSH
42929: LD_INT 3
42931: ST_TO_ADDR
// vc_control := control_computer ;
42932: LD_ADDR_OWVAR 38
42936: PUSH
42937: LD_INT 3
42939: ST_TO_ADDR
// vc_weapon := 59 ;
42940: LD_ADDR_OWVAR 40
42944: PUSH
42945: LD_INT 59
42947: ST_TO_ADDR
// result := CreateVehicle ;
42948: LD_ADDR_VAR 0 5
42952: PUSH
42953: CALL_OW 45
42957: ST_TO_ADDR
// SetDir ( result , d ) ;
42958: LD_VAR 0 5
42962: PPUSH
42963: LD_VAR 0 4
42967: PPUSH
42968: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42972: LD_VAR 0 5
42976: PPUSH
42977: LD_VAR 0 2
42981: PPUSH
42982: LD_VAR 0 3
42986: PPUSH
42987: LD_INT 0
42989: PPUSH
42990: CALL_OW 48
// end ;
42994: LD_VAR 0 5
42998: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42999: LD_INT 0
43001: PPUSH
43002: PPUSH
43003: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43004: LD_ADDR_VAR 0 2
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43027: LD_VAR 0 1
43031: NOT
43032: PUSH
43033: LD_VAR 0 1
43037: PPUSH
43038: CALL_OW 264
43042: PUSH
43043: LD_INT 12
43045: PUSH
43046: LD_INT 51
43048: PUSH
43049: LD_INT 32
43051: PUSH
43052: LD_INT 89
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: IN
43061: NOT
43062: OR
43063: IFFALSE 43067
// exit ;
43065: GO 43165
// for i := 1 to 3 do
43067: LD_ADDR_VAR 0 3
43071: PUSH
43072: DOUBLE
43073: LD_INT 1
43075: DEC
43076: ST_TO_ADDR
43077: LD_INT 3
43079: PUSH
43080: FOR_TO
43081: IFFALSE 43163
// begin tmp := GetCargo ( cargo , i ) ;
43083: LD_ADDR_VAR 0 4
43087: PUSH
43088: LD_VAR 0 1
43092: PPUSH
43093: LD_VAR 0 3
43097: PPUSH
43098: CALL_OW 289
43102: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43103: LD_ADDR_VAR 0 2
43107: PUSH
43108: LD_VAR 0 2
43112: PPUSH
43113: LD_VAR 0 3
43117: PPUSH
43118: LD_VAR 0 4
43122: PPUSH
43123: CALL_OW 1
43127: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43128: LD_ADDR_VAR 0 2
43132: PUSH
43133: LD_VAR 0 2
43137: PPUSH
43138: LD_INT 4
43140: PPUSH
43141: LD_VAR 0 2
43145: PUSH
43146: LD_INT 4
43148: ARRAY
43149: PUSH
43150: LD_VAR 0 4
43154: PLUS
43155: PPUSH
43156: CALL_OW 1
43160: ST_TO_ADDR
// end ;
43161: GO 43080
43163: POP
43164: POP
// end ;
43165: LD_VAR 0 2
43169: RET
// export function Length ( array ) ; begin
43170: LD_INT 0
43172: PPUSH
// result := array + 0 ;
43173: LD_ADDR_VAR 0 2
43177: PUSH
43178: LD_VAR 0 1
43182: PUSH
43183: LD_INT 0
43185: PLUS
43186: ST_TO_ADDR
// end ;
43187: LD_VAR 0 2
43191: RET
// export function PrepareArray ( array ) ; begin
43192: LD_INT 0
43194: PPUSH
// result := array diff 0 ;
43195: LD_ADDR_VAR 0 2
43199: PUSH
43200: LD_VAR 0 1
43204: PUSH
43205: LD_INT 0
43207: DIFF
43208: ST_TO_ADDR
// if not result [ 1 ] then
43209: LD_VAR 0 2
43213: PUSH
43214: LD_INT 1
43216: ARRAY
43217: NOT
43218: IFFALSE 43238
// result := Delete ( result , 1 ) ;
43220: LD_ADDR_VAR 0 2
43224: PUSH
43225: LD_VAR 0 2
43229: PPUSH
43230: LD_INT 1
43232: PPUSH
43233: CALL_OW 3
43237: ST_TO_ADDR
// end ;
43238: LD_VAR 0 2
43242: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43243: LD_INT 0
43245: PPUSH
43246: PPUSH
43247: PPUSH
43248: PPUSH
// sibRocketRange := 25 ;
43249: LD_ADDR_VAR 0 6
43253: PUSH
43254: LD_INT 25
43256: ST_TO_ADDR
// result := false ;
43257: LD_ADDR_VAR 0 4
43261: PUSH
43262: LD_INT 0
43264: ST_TO_ADDR
// for i := 0 to 5 do
43265: LD_ADDR_VAR 0 5
43269: PUSH
43270: DOUBLE
43271: LD_INT 0
43273: DEC
43274: ST_TO_ADDR
43275: LD_INT 5
43277: PUSH
43278: FOR_TO
43279: IFFALSE 43346
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43281: LD_VAR 0 1
43285: PPUSH
43286: LD_VAR 0 5
43290: PPUSH
43291: LD_VAR 0 6
43295: PPUSH
43296: CALL_OW 272
43300: PPUSH
43301: LD_VAR 0 2
43305: PPUSH
43306: LD_VAR 0 5
43310: PPUSH
43311: LD_VAR 0 6
43315: PPUSH
43316: CALL_OW 273
43320: PPUSH
43321: LD_VAR 0 3
43325: PPUSH
43326: CALL_OW 309
43330: IFFALSE 43344
// begin result := true ;
43332: LD_ADDR_VAR 0 4
43336: PUSH
43337: LD_INT 1
43339: ST_TO_ADDR
// exit ;
43340: POP
43341: POP
43342: GO 43348
// end ;
43344: GO 43278
43346: POP
43347: POP
// end ;
43348: LD_VAR 0 4
43352: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43353: LD_INT 0
43355: PPUSH
43356: PPUSH
43357: PPUSH
// if btype = b_depot then
43358: LD_VAR 0 2
43362: PUSH
43363: LD_INT 0
43365: EQUAL
43366: IFFALSE 43378
// begin result := true ;
43368: LD_ADDR_VAR 0 3
43372: PUSH
43373: LD_INT 1
43375: ST_TO_ADDR
// exit ;
43376: GO 43494
// end ; pom := GetBase ( depot ) ;
43378: LD_ADDR_VAR 0 4
43382: PUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: CALL_OW 274
43392: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43393: LD_ADDR_VAR 0 5
43397: PUSH
43398: LD_VAR 0 2
43402: PPUSH
43403: LD_VAR 0 1
43407: PPUSH
43408: CALL_OW 248
43412: PPUSH
43413: CALL_OW 450
43417: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43418: LD_ADDR_VAR 0 3
43422: PUSH
43423: LD_VAR 0 4
43427: PPUSH
43428: LD_INT 1
43430: PPUSH
43431: CALL_OW 275
43435: PUSH
43436: LD_VAR 0 5
43440: PUSH
43441: LD_INT 1
43443: ARRAY
43444: GREATEREQUAL
43445: PUSH
43446: LD_VAR 0 4
43450: PPUSH
43451: LD_INT 2
43453: PPUSH
43454: CALL_OW 275
43458: PUSH
43459: LD_VAR 0 5
43463: PUSH
43464: LD_INT 2
43466: ARRAY
43467: GREATEREQUAL
43468: AND
43469: PUSH
43470: LD_VAR 0 4
43474: PPUSH
43475: LD_INT 3
43477: PPUSH
43478: CALL_OW 275
43482: PUSH
43483: LD_VAR 0 5
43487: PUSH
43488: LD_INT 3
43490: ARRAY
43491: GREATEREQUAL
43492: AND
43493: ST_TO_ADDR
// end ;
43494: LD_VAR 0 3
43498: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43499: LD_INT 0
43501: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43502: LD_VAR 0 1
43506: PPUSH
43507: LD_VAR 0 2
43511: PPUSH
43512: LD_INT 0
43514: PPUSH
43515: LD_INT 0
43517: PPUSH
43518: LD_INT 1
43520: PPUSH
43521: LD_INT 0
43523: PPUSH
43524: CALL_OW 587
// end ;
43528: LD_VAR 0 3
43532: RET
// export function CenterOnNow ( unit ) ; begin
43533: LD_INT 0
43535: PPUSH
// result := IsInUnit ( unit ) ;
43536: LD_ADDR_VAR 0 2
43540: PUSH
43541: LD_VAR 0 1
43545: PPUSH
43546: CALL_OW 310
43550: ST_TO_ADDR
// if not result then
43551: LD_VAR 0 2
43555: NOT
43556: IFFALSE 43568
// result := unit ;
43558: LD_ADDR_VAR 0 2
43562: PUSH
43563: LD_VAR 0 1
43567: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43568: LD_VAR 0 1
43572: PPUSH
43573: CALL_OW 87
// end ;
43577: LD_VAR 0 2
43581: RET
// export function ComMoveHex ( unit , hex ) ; begin
43582: LD_INT 0
43584: PPUSH
// if not hex then
43585: LD_VAR 0 2
43589: NOT
43590: IFFALSE 43594
// exit ;
43592: GO 43647
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43594: LD_VAR 0 2
43598: PUSH
43599: LD_INT 1
43601: ARRAY
43602: PPUSH
43603: LD_VAR 0 2
43607: PUSH
43608: LD_INT 2
43610: ARRAY
43611: PPUSH
43612: CALL_OW 428
43616: IFFALSE 43620
// exit ;
43618: GO 43647
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43620: LD_VAR 0 1
43624: PPUSH
43625: LD_VAR 0 2
43629: PUSH
43630: LD_INT 1
43632: ARRAY
43633: PPUSH
43634: LD_VAR 0 2
43638: PUSH
43639: LD_INT 2
43641: ARRAY
43642: PPUSH
43643: CALL_OW 111
// end ;
43647: LD_VAR 0 3
43651: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43652: LD_INT 0
43654: PPUSH
43655: PPUSH
43656: PPUSH
// if not unit or not enemy then
43657: LD_VAR 0 1
43661: NOT
43662: PUSH
43663: LD_VAR 0 2
43667: NOT
43668: OR
43669: IFFALSE 43673
// exit ;
43671: GO 43797
// x := GetX ( enemy ) ;
43673: LD_ADDR_VAR 0 4
43677: PUSH
43678: LD_VAR 0 2
43682: PPUSH
43683: CALL_OW 250
43687: ST_TO_ADDR
// y := GetY ( enemy ) ;
43688: LD_ADDR_VAR 0 5
43692: PUSH
43693: LD_VAR 0 2
43697: PPUSH
43698: CALL_OW 251
43702: ST_TO_ADDR
// if ValidHex ( x , y ) then
43703: LD_VAR 0 4
43707: PPUSH
43708: LD_VAR 0 5
43712: PPUSH
43713: CALL_OW 488
43717: IFFALSE 43797
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43719: LD_VAR 0 2
43723: PPUSH
43724: CALL_OW 247
43728: PUSH
43729: LD_INT 3
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: IN
43739: PUSH
43740: LD_VAR 0 1
43744: PPUSH
43745: CALL_OW 255
43749: PPUSH
43750: LD_VAR 0 2
43754: PPUSH
43755: CALL_OW 292
43759: OR
43760: IFFALSE 43778
// ComAttackUnit ( unit , enemy ) else
43762: LD_VAR 0 1
43766: PPUSH
43767: LD_VAR 0 2
43771: PPUSH
43772: CALL_OW 115
43776: GO 43797
// ComAgressiveMove ( unit , x , y ) ;
43778: LD_VAR 0 1
43782: PPUSH
43783: LD_VAR 0 4
43787: PPUSH
43788: LD_VAR 0 5
43792: PPUSH
43793: CALL_OW 114
// end ;
43797: LD_VAR 0 3
43801: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43802: LD_INT 0
43804: PPUSH
43805: PPUSH
43806: PPUSH
// list := AreaToList ( area , 0 ) ;
43807: LD_ADDR_VAR 0 5
43811: PUSH
43812: LD_VAR 0 1
43816: PPUSH
43817: LD_INT 0
43819: PPUSH
43820: CALL_OW 517
43824: ST_TO_ADDR
// if not list then
43825: LD_VAR 0 5
43829: NOT
43830: IFFALSE 43834
// exit ;
43832: GO 43964
// if all then
43834: LD_VAR 0 2
43838: IFFALSE 43926
// begin for i := 1 to list [ 1 ] do
43840: LD_ADDR_VAR 0 4
43844: PUSH
43845: DOUBLE
43846: LD_INT 1
43848: DEC
43849: ST_TO_ADDR
43850: LD_VAR 0 5
43854: PUSH
43855: LD_INT 1
43857: ARRAY
43858: PUSH
43859: FOR_TO
43860: IFFALSE 43922
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43862: LD_ADDR_VAR 0 3
43866: PUSH
43867: LD_VAR 0 3
43871: PPUSH
43872: LD_VAR 0 3
43876: PUSH
43877: LD_INT 1
43879: PLUS
43880: PPUSH
43881: LD_VAR 0 5
43885: PUSH
43886: LD_INT 1
43888: ARRAY
43889: PUSH
43890: LD_VAR 0 4
43894: ARRAY
43895: PUSH
43896: LD_VAR 0 5
43900: PUSH
43901: LD_INT 2
43903: ARRAY
43904: PUSH
43905: LD_VAR 0 4
43909: ARRAY
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PPUSH
43915: CALL_OW 1
43919: ST_TO_ADDR
43920: GO 43859
43922: POP
43923: POP
// exit ;
43924: GO 43964
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43926: LD_ADDR_VAR 0 3
43930: PUSH
43931: LD_VAR 0 5
43935: PUSH
43936: LD_INT 1
43938: ARRAY
43939: PUSH
43940: LD_INT 1
43942: ARRAY
43943: PUSH
43944: LD_VAR 0 5
43948: PUSH
43949: LD_INT 2
43951: ARRAY
43952: PUSH
43953: LD_INT 1
43955: ARRAY
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: EMPTY
43962: LIST
43963: ST_TO_ADDR
// end ;
43964: LD_VAR 0 3
43968: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43969: LD_INT 0
43971: PPUSH
43972: PPUSH
// list := AreaToList ( area , 0 ) ;
43973: LD_ADDR_VAR 0 4
43977: PUSH
43978: LD_VAR 0 1
43982: PPUSH
43983: LD_INT 0
43985: PPUSH
43986: CALL_OW 517
43990: ST_TO_ADDR
// if not list then
43991: LD_VAR 0 4
43995: NOT
43996: IFFALSE 44000
// exit ;
43998: GO 44041
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44000: LD_ADDR_VAR 0 3
44004: PUSH
44005: LD_VAR 0 4
44009: PUSH
44010: LD_INT 1
44012: ARRAY
44013: PUSH
44014: LD_INT 1
44016: ARRAY
44017: PUSH
44018: LD_VAR 0 4
44022: PUSH
44023: LD_INT 2
44025: ARRAY
44026: PUSH
44027: LD_INT 1
44029: ARRAY
44030: PUSH
44031: LD_VAR 0 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// end ;
44041: LD_VAR 0 3
44045: RET
// export function First ( array ) ; begin
44046: LD_INT 0
44048: PPUSH
// if not array then
44049: LD_VAR 0 1
44053: NOT
44054: IFFALSE 44058
// exit ;
44056: GO 44072
// result := array [ 1 ] ;
44058: LD_ADDR_VAR 0 2
44062: PUSH
44063: LD_VAR 0 1
44067: PUSH
44068: LD_INT 1
44070: ARRAY
44071: ST_TO_ADDR
// end ;
44072: LD_VAR 0 2
44076: RET
// export function Last ( array ) ; begin
44077: LD_INT 0
44079: PPUSH
// if not array then
44080: LD_VAR 0 1
44084: NOT
44085: IFFALSE 44089
// exit ;
44087: GO 44105
// result := array [ array ] ;
44089: LD_ADDR_VAR 0 2
44093: PUSH
44094: LD_VAR 0 1
44098: PUSH
44099: LD_VAR 0 1
44103: ARRAY
44104: ST_TO_ADDR
// end ;
44105: LD_VAR 0 2
44109: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44110: LD_INT 0
44112: PPUSH
44113: PPUSH
// result := [ ] ;
44114: LD_ADDR_VAR 0 5
44118: PUSH
44119: EMPTY
44120: ST_TO_ADDR
// if not array then
44121: LD_VAR 0 1
44125: NOT
44126: IFFALSE 44130
// exit ;
44128: GO 44242
// for i := 1 to array do
44130: LD_ADDR_VAR 0 6
44134: PUSH
44135: DOUBLE
44136: LD_INT 1
44138: DEC
44139: ST_TO_ADDR
44140: LD_VAR 0 1
44144: PUSH
44145: FOR_TO
44146: IFFALSE 44240
// if array [ i ] [ index ] = value then
44148: LD_VAR 0 1
44152: PUSH
44153: LD_VAR 0 6
44157: ARRAY
44158: PUSH
44159: LD_VAR 0 2
44163: ARRAY
44164: PUSH
44165: LD_VAR 0 3
44169: EQUAL
44170: IFFALSE 44238
// begin if indexColumn then
44172: LD_VAR 0 4
44176: IFFALSE 44212
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44178: LD_ADDR_VAR 0 5
44182: PUSH
44183: LD_VAR 0 5
44187: PPUSH
44188: LD_VAR 0 1
44192: PUSH
44193: LD_VAR 0 6
44197: ARRAY
44198: PUSH
44199: LD_VAR 0 4
44203: ARRAY
44204: PPUSH
44205: CALL 39430 0 2
44209: ST_TO_ADDR
44210: GO 44238
// result := Join ( result , array [ i ] ) ;
44212: LD_ADDR_VAR 0 5
44216: PUSH
44217: LD_VAR 0 5
44221: PPUSH
44222: LD_VAR 0 1
44226: PUSH
44227: LD_VAR 0 6
44231: ARRAY
44232: PPUSH
44233: CALL 39430 0 2
44237: ST_TO_ADDR
// end ;
44238: GO 44145
44240: POP
44241: POP
// end ;
44242: LD_VAR 0 5
44246: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44247: LD_INT 0
44249: PPUSH
// if not vehicles or not parkingPoint then
44250: LD_VAR 0 1
44254: NOT
44255: PUSH
44256: LD_VAR 0 2
44260: NOT
44261: OR
44262: IFFALSE 44266
// exit ;
44264: GO 44364
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44266: LD_ADDR_VAR 0 1
44270: PUSH
44271: LD_VAR 0 1
44275: PPUSH
44276: LD_INT 50
44278: PUSH
44279: EMPTY
44280: LIST
44281: PUSH
44282: LD_INT 3
44284: PUSH
44285: LD_INT 92
44287: PUSH
44288: LD_VAR 0 2
44292: PUSH
44293: LD_INT 1
44295: ARRAY
44296: PUSH
44297: LD_VAR 0 2
44301: PUSH
44302: LD_INT 2
44304: ARRAY
44305: PUSH
44306: LD_INT 8
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PPUSH
44323: CALL_OW 72
44327: ST_TO_ADDR
// if not vehicles then
44328: LD_VAR 0 1
44332: NOT
44333: IFFALSE 44337
// exit ;
44335: GO 44364
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44337: LD_VAR 0 1
44341: PPUSH
44342: LD_VAR 0 2
44346: PUSH
44347: LD_INT 1
44349: ARRAY
44350: PPUSH
44351: LD_VAR 0 2
44355: PUSH
44356: LD_INT 2
44358: ARRAY
44359: PPUSH
44360: CALL_OW 111
// end ;
44364: LD_VAR 0 3
44368: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44369: LD_INT 0
44371: PPUSH
44372: PPUSH
44373: PPUSH
// if not side or not area then
44374: LD_VAR 0 1
44378: NOT
44379: PUSH
44380: LD_VAR 0 2
44384: NOT
44385: OR
44386: IFFALSE 44390
// exit ;
44388: GO 44509
// tmp := AreaToList ( area , 0 ) ;
44390: LD_ADDR_VAR 0 5
44394: PUSH
44395: LD_VAR 0 2
44399: PPUSH
44400: LD_INT 0
44402: PPUSH
44403: CALL_OW 517
44407: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44408: LD_ADDR_VAR 0 4
44412: PUSH
44413: DOUBLE
44414: LD_INT 1
44416: DEC
44417: ST_TO_ADDR
44418: LD_VAR 0 5
44422: PUSH
44423: LD_INT 1
44425: ARRAY
44426: PUSH
44427: FOR_TO
44428: IFFALSE 44507
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44430: LD_VAR 0 5
44434: PUSH
44435: LD_INT 1
44437: ARRAY
44438: PUSH
44439: LD_VAR 0 4
44443: ARRAY
44444: PPUSH
44445: LD_VAR 0 5
44449: PUSH
44450: LD_INT 2
44452: ARRAY
44453: PUSH
44454: LD_VAR 0 4
44458: ARRAY
44459: PPUSH
44460: CALL_OW 351
44464: IFFALSE 44505
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44466: LD_VAR 0 5
44470: PUSH
44471: LD_INT 1
44473: ARRAY
44474: PUSH
44475: LD_VAR 0 4
44479: ARRAY
44480: PPUSH
44481: LD_VAR 0 5
44485: PUSH
44486: LD_INT 2
44488: ARRAY
44489: PUSH
44490: LD_VAR 0 4
44494: ARRAY
44495: PPUSH
44496: LD_VAR 0 1
44500: PPUSH
44501: CALL_OW 244
// end ;
44505: GO 44427
44507: POP
44508: POP
// end ;
44509: LD_VAR 0 3
44513: RET
