// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareRussian ;
   8: CALL 118 0 0
// Action ;
  12: CALL 1440 0 0
// end ;
  16: END
// function Init ; begin
  17: LD_INT 0
  19: PPUSH
// game_speed := 5 ;
  20: LD_ADDR_OWVAR 65
  24: PUSH
  25: LD_INT 5
  27: ST_TO_ADDR
// music_class := 5 ;
  28: LD_ADDR_OWVAR 72
  32: PUSH
  33: LD_INT 5
  35: ST_TO_ADDR
// FogOff ( 3 ) ;
  36: LD_INT 3
  38: PPUSH
  39: CALL_OW 344
// SetWeather ( 2 , 250 , 300 ) ;
  43: LD_INT 2
  45: PPUSH
  46: LD_INT 250
  48: PPUSH
  49: LD_INT 300
  51: PPUSH
  52: CALL_OW 550
// PlaceSeeing ( 1 , 1 , 3 , - 32967 ) ;
  56: LD_INT 1
  58: PPUSH
  59: LD_INT 1
  61: PPUSH
  62: LD_INT 3
  64: PPUSH
  65: LD_INT 32967
  67: NEG
  68: PPUSH
  69: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 3 ) ;
  73: LD_INT 1
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: LD_INT 3
  81: PPUSH
  82: CALL_OW 331
// PlaceSeeing ( 172 , 50 , 3 , - 32 ) ;
  86: LD_INT 172
  88: PPUSH
  89: LD_INT 50
  91: PPUSH
  92: LD_INT 3
  94: PPUSH
  95: LD_INT 32
  97: NEG
  98: PPUSH
  99: CALL_OW 330
// CenterNowOnXY ( 109 , 159 ) ;
 103: LD_INT 109
 105: PPUSH
 106: LD_INT 159
 108: PPUSH
 109: CALL_OW 86
// end ; end_of_file
 113: LD_VAR 0 1
 117: RET
// export Botvinov , Szyski , Burlak ; export group1 , group2 , group3 ; export function PrepareRussian ; var i , un ; begin
 118: LD_INT 0
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 3 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 3
 130: ST_TO_ADDR
// uc_nation := 3 ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// InitHc ;
 139: CALL_OW 19
// PrepareSoldier ( sex_male , 1 ) ;
 143: LD_INT 1
 145: PPUSH
 146: LD_INT 1
 148: PPUSH
 149: CALL_OW 381
// hc_name := Botvinov ;
 153: LD_ADDR_OWVAR 26
 157: PUSH
 158: LD_STRING Botvinov
 160: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 161: LD_ADDR_OWVAR 33
 165: PUSH
 166: LD_STRING SecondCharsGal
 168: ST_TO_ADDR
// hc_face_number := 84 ;
 169: LD_ADDR_OWVAR 34
 173: PUSH
 174: LD_INT 84
 176: ST_TO_ADDR
// Botvinov := CreateHuman ;
 177: LD_ADDR_EXP 1
 181: PUSH
 182: CALL_OW 44
 186: ST_TO_ADDR
// PlaceUnitArea ( Botvinov , botvinovArea , false ) ;
 187: LD_EXP 1
 191: PPUSH
 192: LD_INT 2
 194: PPUSH
 195: LD_INT 0
 197: PPUSH
 198: CALL_OW 49
// ComLookAtDir ( Botvinov , 4 ) ;
 202: LD_EXP 1
 206: PPUSH
 207: LD_INT 4
 209: PPUSH
 210: CALL 43376 0 2
// hc_name := Szyski ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING Szyski
 221: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 222: LD_ADDR_OWVAR 33
 226: PUSH
 227: LD_STRING SecondCharsGal
 229: ST_TO_ADDR
// hc_face_number := 86 ;
 230: LD_ADDR_OWVAR 34
 234: PUSH
 235: LD_INT 86
 237: ST_TO_ADDR
// Szyski := CreateHuman ;
 238: LD_ADDR_EXP 2
 242: PUSH
 243: CALL_OW 44
 247: ST_TO_ADDR
// PlaceUnitArea ( Szyski , szyskiArea , false ) ;
 248: LD_EXP 2
 252: PPUSH
 253: LD_INT 3
 255: PPUSH
 256: LD_INT 0
 258: PPUSH
 259: CALL_OW 49
// ComLookAtDir ( Szyski , 4 ) ;
 263: LD_EXP 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL 43376 0 2
// InitHC_All ( ) ;
 275: CALL_OW 584
// for i := 1 to 3 do
 279: LD_ADDR_VAR 0 2
 283: PUSH
 284: DOUBLE
 285: LD_INT 1
 287: DEC
 288: ST_TO_ADDR
 289: LD_INT 3
 291: PUSH
 292: FOR_TO
 293: IFFALSE 344
// begin PrepareSoldier ( sex_male , 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: LD_INT 1
 300: PPUSH
 301: CALL_OW 381
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// PlaceUnitArea ( un , officerArea , false ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 4
 322: PPUSH
 323: LD_INT 0
 325: PPUSH
 326: CALL_OW 49
// ComLookAtDir ( un , 2 ) ;
 330: LD_VAR 0 3
 334: PPUSH
 335: LD_INT 2
 337: PPUSH
 338: CALL 43376 0 2
// end ;
 342: GO 292
 344: POP
 345: POP
// for i := 1 to 3 do
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: DOUBLE
 352: LD_INT 1
 354: DEC
 355: ST_TO_ADDR
 356: LD_INT 3
 358: PUSH
 359: FOR_TO
 360: IFFALSE 411
// begin PrepareSoldier ( sex_male , 1 ) ;
 362: LD_INT 1
 364: PPUSH
 365: LD_INT 1
 367: PPUSH
 368: CALL_OW 381
// un := CreateHuman ;
 372: LD_ADDR_VAR 0 3
 376: PUSH
 377: CALL_OW 44
 381: ST_TO_ADDR
// PlaceUnitArea ( un , officer2Area , false ) ;
 382: LD_VAR 0 3
 386: PPUSH
 387: LD_INT 5
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 49
// ComLookAtDir ( un , 5 ) ;
 397: LD_VAR 0 3
 401: PPUSH
 402: LD_INT 5
 404: PPUSH
 405: CALL 43376 0 2
// end ;
 409: GO 359
 411: POP
 412: POP
// Burlak := NewCharacter ( Burlak ) ;
 413: LD_ADDR_EXP 3
 417: PUSH
 418: LD_STRING Burlak
 420: PPUSH
 421: CALL_OW 25
 425: ST_TO_ADDR
// InitHc_All ( ) ;
 426: CALL_OW 584
// group1 := PrepareGroup ;
 430: LD_ADDR_EXP 4
 434: PUSH
 435: CALL 779 0 0
 439: ST_TO_ADDR
// group1 := Replace ( group1 , 5 , Burlak ) ;
 440: LD_ADDR_EXP 4
 444: PUSH
 445: LD_EXP 4
 449: PPUSH
 450: LD_INT 5
 452: PPUSH
 453: LD_EXP 3
 457: PPUSH
 458: CALL_OW 1
 462: ST_TO_ADDR
// group2 := PrepareGroup ;
 463: LD_ADDR_EXP 5
 467: PUSH
 468: CALL 779 0 0
 472: ST_TO_ADDR
// group3 := PrepareGroup ;
 473: LD_ADDR_EXP 6
 477: PUSH
 478: CALL 779 0 0
 482: ST_TO_ADDR
// for un in group1 ^ group2 ^ group3 do
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_EXP 4
 492: PUSH
 493: LD_EXP 5
 497: ADD
 498: PUSH
 499: LD_EXP 6
 503: ADD
 504: PUSH
 505: FOR_IN
 506: IFFALSE 608
// begin case GetClass ( un ) of 1 :
 508: LD_VAR 0 3
 512: PPUSH
 513: CALL_OW 257
 517: PUSH
 518: LD_INT 1
 520: DOUBLE
 521: EQUAL
 522: IFTRUE 526
 524: GO 544
 526: POP
// PlaceUnitArea ( un , firstLineArea , false ) ; 3 :
 527: LD_VAR 0 3
 531: PPUSH
 532: LD_INT 6
 534: PPUSH
 535: LD_INT 0
 537: PPUSH
 538: CALL_OW 49
 542: GO 597
 544: LD_INT 3
 546: DOUBLE
 547: EQUAL
 548: IFTRUE 552
 550: GO 570
 552: POP
// PlaceUnitArea ( un , secondLineArea , false ) ; 4 :
 553: LD_VAR 0 3
 557: PPUSH
 558: LD_INT 7
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
 568: GO 597
 570: LD_INT 4
 572: DOUBLE
 573: EQUAL
 574: IFTRUE 578
 576: GO 596
 578: POP
// PlaceUnitArea ( un , thirdLineArea , false ) ; end ;
 579: LD_VAR 0 3
 583: PPUSH
 584: LD_INT 8
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
 594: GO 597
 596: POP
// ComHold ( un ) ;
 597: LD_VAR 0 3
 601: PPUSH
 602: CALL_OW 140
// end ;
 606: GO 505
 608: POP
 609: POP
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
 610: LD_ADDR_VAR 0 2
 614: PUSH
 615: LD_INT 21
 617: PUSH
 618: LD_INT 3
 620: PUSH
 621: EMPTY
 622: LIST
 623: LIST
 624: PPUSH
 625: CALL_OW 69
 629: PUSH
 630: LD_INT 4
 632: DIFF
 633: PUSH
 634: FOR_IN
 635: IFFALSE 696
// begin PrepareSoldier ( false , 1 ) ;
 637: LD_INT 0
 639: PPUSH
 640: LD_INT 1
 642: PPUSH
 643: CALL_OW 381
// un := CreateHuman ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: CALL_OW 44
 656: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 657: LD_VAR 0 3
 661: PPUSH
 662: LD_VAR 0 2
 666: PPUSH
 667: CALL_OW 254
 671: PUSH
 672: LD_INT 3
 674: MINUS
 675: PPUSH
 676: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 680: LD_VAR 0 3
 684: PPUSH
 685: LD_VAR 0 2
 689: PPUSH
 690: CALL_OW 52
// end ;
 694: GO 634
 696: POP
 697: POP
// for i := 1 to 3 do
 698: LD_ADDR_VAR 0 2
 702: PUSH
 703: DOUBLE
 704: LD_INT 1
 706: DEC
 707: ST_TO_ADDR
 708: LD_INT 3
 710: PUSH
 711: FOR_TO
 712: IFFALSE 772
// begin PrepareSoldier ( false , 1 ) ;
 714: LD_INT 0
 716: PPUSH
 717: LD_INT 1
 719: PPUSH
 720: CALL_OW 381
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 3
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceUnitXYR ( un , 120 , 13 , 6 , false ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 120
 741: PPUSH
 742: LD_INT 13
 744: PPUSH
 745: LD_INT 6
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 50
// ComMoveXY ( un , 91 , 166 ) ;
 755: LD_VAR 0 3
 759: PPUSH
 760: LD_INT 91
 762: PPUSH
 763: LD_INT 166
 765: PPUSH
 766: CALL_OW 111
// end ;
 770: GO 711
 772: POP
 773: POP
// end ;
 774: LD_VAR 0 1
 778: RET
// function PrepareGroup ; var i , j , tmp ; begin
 779: LD_INT 0
 781: PPUSH
 782: PPUSH
 783: PPUSH
 784: PPUSH
// result := [ ] ;
 785: LD_ADDR_VAR 0 1
 789: PUSH
 790: EMPTY
 791: ST_TO_ADDR
// tmp := [ 4 , 0 , 2 , 1 ] ;
 792: LD_ADDR_VAR 0 4
 796: PUSH
 797: LD_INT 4
 799: PUSH
 800: LD_INT 0
 802: PUSH
 803: LD_INT 2
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: ST_TO_ADDR
// for i := 1 to tmp do
 815: LD_ADDR_VAR 0 2
 819: PUSH
 820: DOUBLE
 821: LD_INT 1
 823: DEC
 824: ST_TO_ADDR
 825: LD_VAR 0 4
 829: PUSH
 830: FOR_TO
 831: IFFALSE 910
// if tmp [ i ] then
 833: LD_VAR 0 4
 837: PUSH
 838: LD_VAR 0 2
 842: ARRAY
 843: IFFALSE 908
// for j := 1 to tmp [ i ] do
 845: LD_ADDR_VAR 0 3
 849: PUSH
 850: DOUBLE
 851: LD_INT 1
 853: DEC
 854: ST_TO_ADDR
 855: LD_VAR 0 4
 859: PUSH
 860: LD_VAR 0 2
 864: ARRAY
 865: PUSH
 866: FOR_TO
 867: IFFALSE 906
// begin PrepareHuman ( false , i , 1 ) ;
 869: LD_INT 0
 871: PPUSH
 872: LD_VAR 0 2
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
 884: LD_ADDR_VAR 0 1
 888: PUSH
 889: LD_VAR 0 1
 893: PPUSH
 894: CALL_OW 44
 898: PPUSH
 899: CALL 40054 0 2
 903: ST_TO_ADDR
// end ;
 904: GO 866
 906: POP
 907: POP
 908: GO 830
 910: POP
 911: POP
// end ;
 912: LD_VAR 0 1
 916: RET
// export function FormGroup ( group , soldArea , mechArea , sciArea ) ; var i , class , hexesS , hexesM , hexesSc ; begin
 917: LD_INT 0
 919: PPUSH
 920: PPUSH
 921: PPUSH
 922: PPUSH
 923: PPUSH
 924: PPUSH
// if not group then
 925: LD_VAR 0 1
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1435
// hexesS := AreaToList ( soldArea , 0 ) ;
 934: LD_ADDR_VAR 0 8
 938: PUSH
 939: LD_VAR 0 2
 943: PPUSH
 944: LD_INT 0
 946: PPUSH
 947: CALL_OW 517
 951: ST_TO_ADDR
// hexesM := AreaToList ( mechArea , 0 ) ;
 952: LD_ADDR_VAR 0 9
 956: PUSH
 957: LD_VAR 0 3
 961: PPUSH
 962: LD_INT 0
 964: PPUSH
 965: CALL_OW 517
 969: ST_TO_ADDR
// hexesSc := AreaToList ( sciArea , 0 ) ;
 970: LD_ADDR_VAR 0 10
 974: PUSH
 975: LD_VAR 0 4
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 517
 987: ST_TO_ADDR
// for i := 1 to Count ( group ) do
 988: LD_ADDR_VAR 0 6
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_VAR 0 1
1002: PPUSH
1003: CALL 4122 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1433
// begin class := GetClass ( group [ i ] ) ;
1011: LD_ADDR_VAR 0 7
1015: PUSH
1016: LD_VAR 0 1
1020: PUSH
1021: LD_VAR 0 6
1025: ARRAY
1026: PPUSH
1027: CALL_OW 257
1031: ST_TO_ADDR
// if class = 1 then
1032: LD_VAR 0 7
1036: PUSH
1037: LD_INT 1
1039: EQUAL
1040: IFFALSE 1165
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesS [ 1 ] [ 1 ] , hexesS [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1042: LD_INT 1
1044: PPUSH
1045: LD_VAR 0 1
1049: PUSH
1050: LD_VAR 0 6
1054: ARRAY
1055: PPUSH
1056: LD_VAR 0 8
1060: PUSH
1061: LD_INT 1
1063: ARRAY
1064: PUSH
1065: LD_INT 1
1067: ARRAY
1068: PPUSH
1069: LD_VAR 0 8
1073: PUSH
1074: LD_INT 2
1076: ARRAY
1077: PUSH
1078: LD_INT 1
1080: ARRAY
1081: PPUSH
1082: LD_INT 202
1084: PPUSH
1085: LD_INT 49
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 595
// hexesS := Replace ( hexesS , 1 , Delete ( hexesS [ 1 ] , 1 ) ) ;
1095: LD_ADDR_VAR 0 8
1099: PUSH
1100: LD_VAR 0 8
1104: PPUSH
1105: LD_INT 1
1107: PPUSH
1108: LD_VAR 0 8
1112: PUSH
1113: LD_INT 1
1115: ARRAY
1116: PPUSH
1117: LD_INT 1
1119: PPUSH
1120: CALL_OW 3
1124: PPUSH
1125: CALL_OW 1
1129: ST_TO_ADDR
// hexesS := Replace ( hexesS , 2 , Delete ( hexesS [ 2 ] , 1 ) ) ;
1130: LD_ADDR_VAR 0 8
1134: PUSH
1135: LD_VAR 0 8
1139: PPUSH
1140: LD_INT 2
1142: PPUSH
1143: LD_VAR 0 8
1147: PUSH
1148: LD_INT 2
1150: ARRAY
1151: PPUSH
1152: LD_INT 1
1154: PPUSH
1155: CALL_OW 3
1159: PPUSH
1160: CALL_OW 1
1164: ST_TO_ADDR
// end ; if class = 3 then
1165: LD_VAR 0 7
1169: PUSH
1170: LD_INT 3
1172: EQUAL
1173: IFFALSE 1298
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesM [ 1 ] [ 1 ] , hexesM [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1175: LD_INT 1
1177: PPUSH
1178: LD_VAR 0 1
1182: PUSH
1183: LD_VAR 0 6
1187: ARRAY
1188: PPUSH
1189: LD_VAR 0 9
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PUSH
1198: LD_INT 1
1200: ARRAY
1201: PPUSH
1202: LD_VAR 0 9
1206: PUSH
1207: LD_INT 2
1209: ARRAY
1210: PUSH
1211: LD_INT 1
1213: ARRAY
1214: PPUSH
1215: LD_INT 202
1217: PPUSH
1218: LD_INT 49
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 595
// hexesM := Replace ( hexesM , 1 , Delete ( hexesM [ 1 ] , 1 ) ) ;
1228: LD_ADDR_VAR 0 9
1232: PUSH
1233: LD_VAR 0 9
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_VAR 0 9
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: LD_INT 1
1252: PPUSH
1253: CALL_OW 3
1257: PPUSH
1258: CALL_OW 1
1262: ST_TO_ADDR
// hexesM := Replace ( hexesM , 2 , Delete ( hexesM [ 2 ] , 1 ) ) ;
1263: LD_ADDR_VAR 0 9
1267: PUSH
1268: LD_VAR 0 9
1272: PPUSH
1273: LD_INT 2
1275: PPUSH
1276: LD_VAR 0 9
1280: PUSH
1281: LD_INT 2
1283: ARRAY
1284: PPUSH
1285: LD_INT 1
1287: PPUSH
1288: CALL_OW 3
1292: PPUSH
1293: CALL_OW 1
1297: ST_TO_ADDR
// end ; if class = 4 then
1298: LD_VAR 0 7
1302: PUSH
1303: LD_INT 4
1305: EQUAL
1306: IFFALSE 1431
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesSc [ 1 ] [ 1 ] , hexesSc [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1308: LD_INT 1
1310: PPUSH
1311: LD_VAR 0 1
1315: PUSH
1316: LD_VAR 0 6
1320: ARRAY
1321: PPUSH
1322: LD_VAR 0 10
1326: PUSH
1327: LD_INT 1
1329: ARRAY
1330: PUSH
1331: LD_INT 1
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 10
1339: PUSH
1340: LD_INT 2
1342: ARRAY
1343: PUSH
1344: LD_INT 1
1346: ARRAY
1347: PPUSH
1348: LD_INT 202
1350: PPUSH
1351: LD_INT 49
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 595
// hexesSc := Replace ( hexesSc , 1 , Delete ( hexesSc [ 1 ] , 1 ) ) ;
1361: LD_ADDR_VAR 0 10
1365: PUSH
1366: LD_VAR 0 10
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: LD_VAR 0 10
1378: PUSH
1379: LD_INT 1
1381: ARRAY
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 3
1390: PPUSH
1391: CALL_OW 1
1395: ST_TO_ADDR
// hexesSc := Replace ( hexesSc , 2 , Delete ( hexesSc [ 2 ] , 1 ) ) ;
1396: LD_ADDR_VAR 0 10
1400: PUSH
1401: LD_VAR 0 10
1405: PPUSH
1406: LD_INT 2
1408: PPUSH
1409: LD_VAR 0 10
1413: PUSH
1414: LD_INT 2
1416: ARRAY
1417: PPUSH
1418: LD_INT 1
1420: PPUSH
1421: CALL_OW 3
1425: PPUSH
1426: CALL_OW 1
1430: ST_TO_ADDR
// end ; end ;
1431: GO 1008
1433: POP
1434: POP
// end ; end_of_file
1435: LD_VAR 0 5
1439: RET
// export function Action ; var i ; begin
1440: LD_INT 0
1442: PPUSH
1443: PPUSH
// Video ( true ) ;
1444: LD_INT 1
1446: PPUSH
1447: CALL 40026 0 1
// wait ( 0 0$2 ) ;
1451: LD_INT 70
1453: PPUSH
1454: CALL_OW 67
// CenterOnXY ( 106 , 151 ) ;
1458: LD_INT 106
1460: PPUSH
1461: LD_INT 151
1463: PPUSH
1464: CALL_OW 84
// wait ( 0 0$2 ) ;
1468: LD_INT 70
1470: PPUSH
1471: CALL_OW 67
// CenterOnXY ( 32 , 23 ) ;
1475: LD_INT 32
1477: PPUSH
1478: LD_INT 23
1480: PPUSH
1481: CALL_OW 84
// wait ( 0 0$2 ) ;
1485: LD_INT 70
1487: PPUSH
1488: CALL_OW 67
// CenterOnXY ( 128 , 16 ) ;
1492: LD_INT 128
1494: PPUSH
1495: LD_INT 16
1497: PPUSH
1498: CALL_OW 84
// wait ( 60 ) ;
1502: LD_INT 60
1504: PPUSH
1505: CALL_OW 67
// CenterOnXY ( 172 , 47 ) ;
1509: LD_INT 172
1511: PPUSH
1512: LD_INT 47
1514: PPUSH
1515: CALL_OW 84
// stop_talking := true ;
1519: LD_ADDR_OWVAR 56
1523: PUSH
1524: LD_INT 1
1526: ST_TO_ADDR
// Say ( Botvinov , D1i-Off1-1 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1i-Off1-1
1534: PPUSH
1535: CALL_OW 88
// for i in group1 ^ group2 ^ group3 do
1539: LD_ADDR_VAR 0 2
1543: PUSH
1544: LD_EXP 4
1548: PUSH
1549: LD_EXP 5
1553: ADD
1554: PUSH
1555: LD_EXP 6
1559: ADD
1560: PUSH
1561: FOR_IN
1562: IFFALSE 1581
// ComTurnXY ( i , 202 , 49 ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: LD_INT 202
1571: PPUSH
1572: LD_INT 49
1574: PPUSH
1575: CALL_OW 118
1579: GO 1561
1581: POP
1582: POP
// wait ( 10 ) ;
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 67
// Say ( Szyski , D1i-Off2-1 ) ;
1590: LD_EXP 2
1594: PPUSH
1595: LD_STRING D1i-Off2-1
1597: PPUSH
1598: CALL_OW 88
// Say ( Botvinov , D1i-Off1-2 ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_STRING D1i-Off1-2
1609: PPUSH
1610: CALL_OW 88
// FormGroup ( group1 , gs1 , gm1 , gsc1 ) ;
1614: LD_EXP 4
1618: PPUSH
1619: LD_INT 9
1621: PPUSH
1622: LD_INT 12
1624: PPUSH
1625: LD_INT 15
1627: PPUSH
1628: CALL 917 0 4
// FormGroup ( group2 , gs2 , gm2 , gsc2 ) ;
1632: LD_EXP 5
1636: PPUSH
1637: LD_INT 10
1639: PPUSH
1640: LD_INT 13
1642: PPUSH
1643: LD_INT 16
1645: PPUSH
1646: CALL 917 0 4
// FormGroup ( group3 , gs3 , gm3 , gsc3 ) ;
1650: LD_EXP 6
1654: PPUSH
1655: LD_INT 11
1657: PPUSH
1658: LD_INT 14
1660: PPUSH
1661: LD_INT 17
1663: PPUSH
1664: CALL 917 0 4
// wait ( 0 0$5 ) ;
1668: LD_INT 175
1670: PPUSH
1671: CALL_OW 67
// Say ( Szyski , D1i-Off2-2 ) ;
1675: LD_EXP 2
1679: PPUSH
1680: LD_STRING D1i-Off2-2
1682: PPUSH
1683: CALL_OW 88
// Say ( Botvinov , D1i-Off1-3 ) ;
1687: LD_EXP 1
1691: PPUSH
1692: LD_STRING D1i-Off1-3
1694: PPUSH
1695: CALL_OW 88
// SayEffect ( DStart-All ) ;
1699: LD_STRING DStart-All
1701: PPUSH
1702: CALL_OW 96
// wait ( 50 ) ;
1706: LD_INT 50
1708: PPUSH
1709: CALL_OW 67
// stop_talking := false ;
1713: LD_ADDR_OWVAR 56
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// for i in SortByDistanceUnit ( eon , group1 , true , true ) do
1721: LD_ADDR_VAR 0 2
1725: PUSH
1726: LD_INT 4
1728: PPUSH
1729: LD_EXP 4
1733: PPUSH
1734: LD_INT 1
1736: PPUSH
1737: LD_INT 1
1739: PPUSH
1740: CALL 7441 0 4
1744: PUSH
1745: FOR_IN
1746: IFFALSE 1769
// begin ComEnterUnit ( i , eon ) ;
1748: LD_VAR 0 2
1752: PPUSH
1753: LD_INT 4
1755: PPUSH
1756: CALL_OW 120
// wait ( 55 ) ;
1760: LD_INT 55
1762: PPUSH
1763: CALL_OW 67
// end ;
1767: GO 1745
1769: POP
1770: POP
// end ; end_of_file
1771: LD_VAR 0 1
1775: RET
// on SailEventCustom ( e , p1 , p2 , p3 , p4 , p5 , p6 ) do begin repeat ComMoveXY ( p1 , p2 , p3 ) ;
1776: LD_VAR 0 2
1780: PPUSH
1781: LD_VAR 0 3
1785: PPUSH
1786: LD_VAR 0 4
1790: PPUSH
1791: CALL_OW 111
// wait ( 3 ) ;
1795: LD_INT 3
1797: PPUSH
1798: CALL_OW 67
// until IsAt ( p1 , p2 , p3 ) ;
1802: LD_VAR 0 2
1806: PPUSH
1807: LD_VAR 0 3
1811: PPUSH
1812: LD_VAR 0 4
1816: PPUSH
1817: CALL_OW 307
1821: IFFALSE 1776
// ComTurnXY ( p1 , p4 , p5 ) ;
1823: LD_VAR 0 2
1827: PPUSH
1828: LD_VAR 0 5
1832: PPUSH
1833: LD_VAR 0 6
1837: PPUSH
1838: CALL_OW 118
// end ;
1842: PPOPN 7
1844: END
// on EnterBuilding ( building , unit ) do begin if unit = Burlak then
1845: LD_VAR 0 2
1849: PUSH
1850: LD_EXP 3
1854: EQUAL
1855: IFFALSE 1874
// begin wait ( 20 ) ;
1857: LD_INT 20
1859: PPUSH
1860: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1864: LD_INT 1
1866: PPUSH
1867: LD_STRING %_cont
1869: PPUSH
1870: CALL_OW 340
// end ; end ;
1874: PPOPN 2
1876: END
// on DialogueSkipped ( value ) do begin stop_talking := false ;
1877: LD_ADDR_OWVAR 56
1881: PUSH
1882: LD_INT 0
1884: ST_TO_ADDR
// ChangeMap ( 1 , %_cont ) ;
1885: LD_INT 1
1887: PPUSH
1888: LD_STRING %_cont
1890: PPUSH
1891: CALL_OW 340
// end ; end_of_file
1895: PPOPN 1
1897: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1898: LD_INT 0
1900: PPUSH
1901: PPUSH
// if exist_mode then
1902: LD_VAR 0 2
1906: IFFALSE 1952
// begin unit := CreateCharacter ( prefix & ident ) ;
1908: LD_ADDR_VAR 0 5
1912: PUSH
1913: LD_VAR 0 3
1917: PUSH
1918: LD_VAR 0 1
1922: STR
1923: PPUSH
1924: CALL_OW 34
1928: ST_TO_ADDR
// if unit then
1929: LD_VAR 0 5
1933: IFFALSE 1950
// DeleteCharacters ( prefix & ident ) ;
1935: LD_VAR 0 3
1939: PUSH
1940: LD_VAR 0 1
1944: STR
1945: PPUSH
1946: CALL_OW 40
// end else
1950: GO 1967
// unit := NewCharacter ( ident ) ;
1952: LD_ADDR_VAR 0 5
1956: PUSH
1957: LD_VAR 0 1
1961: PPUSH
1962: CALL_OW 25
1966: ST_TO_ADDR
// result := unit ;
1967: LD_ADDR_VAR 0 4
1971: PUSH
1972: LD_VAR 0 5
1976: ST_TO_ADDR
// end ;
1977: LD_VAR 0 4
1981: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1982: LD_INT 0
1984: PPUSH
1985: PPUSH
// if exist_mode then
1986: LD_VAR 0 2
1990: IFFALSE 2015
// unit := CreateCharacter ( prefix & ident ) else
1992: LD_ADDR_VAR 0 5
1996: PUSH
1997: LD_VAR 0 3
2001: PUSH
2002: LD_VAR 0 1
2006: STR
2007: PPUSH
2008: CALL_OW 34
2012: ST_TO_ADDR
2013: GO 2030
// unit := NewCharacter ( ident ) ;
2015: LD_ADDR_VAR 0 5
2019: PUSH
2020: LD_VAR 0 1
2024: PPUSH
2025: CALL_OW 25
2029: ST_TO_ADDR
// result := unit ;
2030: LD_ADDR_VAR 0 4
2034: PUSH
2035: LD_VAR 0 5
2039: ST_TO_ADDR
// end ;
2040: LD_VAR 0 4
2044: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2045: LD_INT 0
2047: PPUSH
2048: PPUSH
// if not side or not nation then
2049: LD_VAR 0 1
2053: NOT
2054: IFTRUE 2063
2056: PUSH
2057: LD_VAR 0 2
2061: NOT
2062: OR
2063: IFFALSE 2067
// exit ;
2065: GO 2861
// case nation of nation_american :
2067: LD_VAR 0 2
2071: PUSH
2072: LD_INT 1
2074: DOUBLE
2075: EQUAL
2076: IFTRUE 2080
2078: GO 2302
2080: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
2081: LD_ADDR_VAR 0 4
2085: PUSH
2086: LD_INT 35
2088: PUSH
2089: LD_INT 45
2091: PUSH
2092: LD_INT 46
2094: PUSH
2095: LD_INT 47
2097: PUSH
2098: LD_INT 82
2100: PUSH
2101: LD_INT 83
2103: PUSH
2104: LD_INT 84
2106: PUSH
2107: LD_INT 85
2109: PUSH
2110: LD_INT 86
2112: PUSH
2113: LD_INT 1
2115: PUSH
2116: LD_INT 2
2118: PUSH
2119: LD_INT 6
2121: PUSH
2122: LD_INT 15
2124: PUSH
2125: LD_INT 16
2127: PUSH
2128: LD_INT 7
2130: PUSH
2131: LD_INT 12
2133: PUSH
2134: LD_INT 13
2136: PUSH
2137: LD_INT 10
2139: PUSH
2140: LD_INT 14
2142: PUSH
2143: LD_INT 20
2145: PUSH
2146: LD_INT 21
2148: PUSH
2149: LD_INT 22
2151: PUSH
2152: LD_INT 25
2154: PUSH
2155: LD_INT 32
2157: PUSH
2158: LD_INT 27
2160: PUSH
2161: LD_INT 36
2163: PUSH
2164: LD_INT 69
2166: PUSH
2167: LD_INT 39
2169: PUSH
2170: LD_INT 34
2172: PUSH
2173: LD_INT 40
2175: PUSH
2176: LD_INT 48
2178: PUSH
2179: LD_INT 49
2181: PUSH
2182: LD_INT 50
2184: PUSH
2185: LD_INT 51
2187: PUSH
2188: LD_INT 52
2190: PUSH
2191: LD_INT 53
2193: PUSH
2194: LD_INT 54
2196: PUSH
2197: LD_INT 55
2199: PUSH
2200: LD_INT 56
2202: PUSH
2203: LD_INT 57
2205: PUSH
2206: LD_INT 58
2208: PUSH
2209: LD_INT 59
2211: PUSH
2212: LD_INT 60
2214: PUSH
2215: LD_INT 61
2217: PUSH
2218: LD_INT 62
2220: PUSH
2221: LD_INT 80
2223: PUSH
2224: LD_INT 82
2226: PUSH
2227: LD_INT 83
2229: PUSH
2230: LD_INT 84
2232: PUSH
2233: LD_INT 85
2235: PUSH
2236: LD_INT 86
2238: PUSH
2239: LD_INT 90
2241: PUSH
2242: LD_INT 93
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: ST_TO_ADDR
2300: GO 2783
2302: LD_INT 2
2304: DOUBLE
2305: EQUAL
2306: IFTRUE 2310
2308: GO 2544
2310: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
2311: LD_ADDR_VAR 0 4
2315: PUSH
2316: LD_INT 35
2318: PUSH
2319: LD_INT 45
2321: PUSH
2322: LD_INT 46
2324: PUSH
2325: LD_INT 47
2327: PUSH
2328: LD_INT 82
2330: PUSH
2331: LD_INT 83
2333: PUSH
2334: LD_INT 84
2336: PUSH
2337: LD_INT 85
2339: PUSH
2340: LD_INT 87
2342: PUSH
2343: LD_INT 70
2345: PUSH
2346: LD_INT 1
2348: PUSH
2349: LD_INT 11
2351: PUSH
2352: LD_INT 3
2354: PUSH
2355: LD_INT 4
2357: PUSH
2358: LD_INT 5
2360: PUSH
2361: LD_INT 6
2363: PUSH
2364: LD_INT 15
2366: PUSH
2367: LD_INT 18
2369: PUSH
2370: LD_INT 7
2372: PUSH
2373: LD_INT 17
2375: PUSH
2376: LD_INT 8
2378: PUSH
2379: LD_INT 20
2381: PUSH
2382: LD_INT 21
2384: PUSH
2385: LD_INT 22
2387: PUSH
2388: LD_INT 72
2390: PUSH
2391: LD_INT 26
2393: PUSH
2394: LD_INT 69
2396: PUSH
2397: LD_INT 39
2399: PUSH
2400: LD_INT 40
2402: PUSH
2403: LD_INT 41
2405: PUSH
2406: LD_INT 42
2408: PUSH
2409: LD_INT 43
2411: PUSH
2412: LD_INT 48
2414: PUSH
2415: LD_INT 49
2417: PUSH
2418: LD_INT 50
2420: PUSH
2421: LD_INT 51
2423: PUSH
2424: LD_INT 52
2426: PUSH
2427: LD_INT 53
2429: PUSH
2430: LD_INT 54
2432: PUSH
2433: LD_INT 55
2435: PUSH
2436: LD_INT 56
2438: PUSH
2439: LD_INT 60
2441: PUSH
2442: LD_INT 61
2444: PUSH
2445: LD_INT 62
2447: PUSH
2448: LD_INT 66
2450: PUSH
2451: LD_INT 67
2453: PUSH
2454: LD_INT 68
2456: PUSH
2457: LD_INT 81
2459: PUSH
2460: LD_INT 82
2462: PUSH
2463: LD_INT 83
2465: PUSH
2466: LD_INT 84
2468: PUSH
2469: LD_INT 85
2471: PUSH
2472: LD_INT 87
2474: PUSH
2475: LD_INT 88
2477: PUSH
2478: LD_INT 92
2480: PUSH
2481: LD_INT 94
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: ST_TO_ADDR
2542: GO 2783
2544: LD_INT 3
2546: DOUBLE
2547: EQUAL
2548: IFTRUE 2552
2550: GO 2782
2552: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_INT 46
2560: PUSH
2561: LD_INT 47
2563: PUSH
2564: LD_INT 1
2566: PUSH
2567: LD_INT 2
2569: PUSH
2570: LD_INT 82
2572: PUSH
2573: LD_INT 83
2575: PUSH
2576: LD_INT 84
2578: PUSH
2579: LD_INT 85
2581: PUSH
2582: LD_INT 86
2584: PUSH
2585: LD_INT 11
2587: PUSH
2588: LD_INT 9
2590: PUSH
2591: LD_INT 20
2593: PUSH
2594: LD_INT 19
2596: PUSH
2597: LD_INT 21
2599: PUSH
2600: LD_INT 24
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 25
2608: PUSH
2609: LD_INT 28
2611: PUSH
2612: LD_INT 29
2614: PUSH
2615: LD_INT 30
2617: PUSH
2618: LD_INT 31
2620: PUSH
2621: LD_INT 37
2623: PUSH
2624: LD_INT 38
2626: PUSH
2627: LD_INT 32
2629: PUSH
2630: LD_INT 27
2632: PUSH
2633: LD_INT 33
2635: PUSH
2636: LD_INT 69
2638: PUSH
2639: LD_INT 39
2641: PUSH
2642: LD_INT 34
2644: PUSH
2645: LD_INT 40
2647: PUSH
2648: LD_INT 71
2650: PUSH
2651: LD_INT 23
2653: PUSH
2654: LD_INT 44
2656: PUSH
2657: LD_INT 48
2659: PUSH
2660: LD_INT 49
2662: PUSH
2663: LD_INT 50
2665: PUSH
2666: LD_INT 51
2668: PUSH
2669: LD_INT 52
2671: PUSH
2672: LD_INT 53
2674: PUSH
2675: LD_INT 54
2677: PUSH
2678: LD_INT 55
2680: PUSH
2681: LD_INT 56
2683: PUSH
2684: LD_INT 57
2686: PUSH
2687: LD_INT 58
2689: PUSH
2690: LD_INT 59
2692: PUSH
2693: LD_INT 63
2695: PUSH
2696: LD_INT 64
2698: PUSH
2699: LD_INT 65
2701: PUSH
2702: LD_INT 82
2704: PUSH
2705: LD_INT 83
2707: PUSH
2708: LD_INT 84
2710: PUSH
2711: LD_INT 85
2713: PUSH
2714: LD_INT 86
2716: PUSH
2717: LD_INT 89
2719: PUSH
2720: LD_INT 91
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: ST_TO_ADDR
2780: GO 2783
2782: POP
// if state > - 1 and state < 3 then
2783: LD_VAR 0 3
2787: PUSH
2788: LD_INT 1
2790: NEG
2791: GREATER
2792: IFFALSE 2804
2794: PUSH
2795: LD_VAR 0 3
2799: PUSH
2800: LD_INT 3
2802: LESS
2803: AND
2804: IFFALSE 2861
// for i in result do
2806: LD_ADDR_VAR 0 5
2810: PUSH
2811: LD_VAR 0 4
2815: PUSH
2816: FOR_IN
2817: IFFALSE 2859
// if GetTech ( i , side ) <> state then
2819: LD_VAR 0 5
2823: PPUSH
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL_OW 321
2833: PUSH
2834: LD_VAR 0 3
2838: NONEQUAL
2839: IFFALSE 2857
// result := result diff i ;
2841: LD_ADDR_VAR 0 4
2845: PUSH
2846: LD_VAR 0 4
2850: PUSH
2851: LD_VAR 0 5
2855: DIFF
2856: ST_TO_ADDR
2857: GO 2816
2859: POP
2860: POP
// end ;
2861: LD_VAR 0 4
2865: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2866: LD_INT 0
2868: PPUSH
2869: PPUSH
2870: PPUSH
// result := true ;
2871: LD_ADDR_VAR 0 3
2875: PUSH
2876: LD_INT 1
2878: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2879: LD_ADDR_VAR 0 5
2883: PUSH
2884: LD_VAR 0 2
2888: PPUSH
2889: CALL_OW 480
2893: ST_TO_ADDR
// if not tmp then
2894: LD_VAR 0 5
2898: NOT
2899: IFFALSE 2903
// exit ;
2901: GO 2952
// for i in tmp do
2903: LD_ADDR_VAR 0 4
2907: PUSH
2908: LD_VAR 0 5
2912: PUSH
2913: FOR_IN
2914: IFFALSE 2950
// if GetTech ( i , side ) <> state_researched then
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL_OW 321
2930: PUSH
2931: LD_INT 2
2933: NONEQUAL
2934: IFFALSE 2948
// begin result := false ;
2936: LD_ADDR_VAR 0 3
2940: PUSH
2941: LD_INT 0
2943: ST_TO_ADDR
// exit ;
2944: POP
2945: POP
2946: GO 2952
// end ;
2948: GO 2913
2950: POP
2951: POP
// end ;
2952: LD_VAR 0 3
2956: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2957: LD_INT 0
2959: PPUSH
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
2968: PPUSH
2969: PPUSH
2970: PPUSH
2971: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2972: LD_VAR 0 1
2976: NOT
2977: IFTRUE 2994
2979: PUSH
2980: LD_VAR 0 1
2984: PPUSH
2985: CALL_OW 257
2989: PUSH
2990: LD_INT 9
2992: NONEQUAL
2993: OR
2994: IFFALSE 2998
// exit ;
2996: GO 3577
// side := GetSide ( unit ) ;
2998: LD_ADDR_VAR 0 9
3002: PUSH
3003: LD_VAR 0 1
3007: PPUSH
3008: CALL_OW 255
3012: ST_TO_ADDR
// tech_space := tech_spacanom ;
3013: LD_ADDR_VAR 0 12
3017: PUSH
3018: LD_INT 29
3020: ST_TO_ADDR
// tech_time := tech_taurad ;
3021: LD_ADDR_VAR 0 13
3025: PUSH
3026: LD_INT 28
3028: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3029: LD_ADDR_VAR 0 11
3033: PUSH
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 310
3043: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3044: LD_VAR 0 11
3048: PPUSH
3049: CALL_OW 247
3053: PUSH
3054: LD_INT 2
3056: EQUAL
3057: IFFALSE 3061
// exit ;
3059: GO 3577
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3061: LD_ADDR_VAR 0 8
3065: PUSH
3066: LD_INT 81
3068: PUSH
3069: LD_VAR 0 9
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 3
3080: PUSH
3081: LD_INT 21
3083: PUSH
3084: LD_INT 3
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 69
3103: ST_TO_ADDR
// if not tmp then
3104: LD_VAR 0 8
3108: NOT
3109: IFFALSE 3113
// exit ;
3111: GO 3577
// if in_unit then
3113: LD_VAR 0 11
3117: IFFALSE 3141
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3119: LD_ADDR_VAR 0 10
3123: PUSH
3124: LD_VAR 0 8
3128: PPUSH
3129: LD_VAR 0 11
3133: PPUSH
3134: CALL_OW 74
3138: ST_TO_ADDR
3139: GO 3161
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3141: LD_ADDR_VAR 0 10
3145: PUSH
3146: LD_VAR 0 8
3150: PPUSH
3151: LD_VAR 0 1
3155: PPUSH
3156: CALL_OW 74
3160: ST_TO_ADDR
// if not enemy then
3161: LD_VAR 0 10
3165: NOT
3166: IFFALSE 3170
// exit ;
3168: GO 3577
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3170: LD_VAR 0 11
3174: IFFALSE 3196
3176: PUSH
3177: LD_VAR 0 11
3181: PPUSH
3182: LD_VAR 0 10
3186: PPUSH
3187: CALL_OW 296
3191: PUSH
3192: LD_INT 13
3194: GREATER
3195: AND
3196: IFTRUE 3218
3198: PUSH
3199: LD_VAR 0 1
3203: PPUSH
3204: LD_VAR 0 10
3208: PPUSH
3209: CALL_OW 296
3213: PUSH
3214: LD_INT 12
3216: GREATER
3217: OR
3218: IFFALSE 3222
// exit ;
3220: GO 3577
// missile := [ 1 ] ;
3222: LD_ADDR_VAR 0 14
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3233: LD_VAR 0 9
3237: PPUSH
3238: LD_VAR 0 12
3242: PPUSH
3243: CALL_OW 325
3247: IFFALSE 3276
// missile := Replace ( missile , missile + 1 , 2 ) ;
3249: LD_ADDR_VAR 0 14
3253: PUSH
3254: LD_VAR 0 14
3258: PPUSH
3259: LD_VAR 0 14
3263: PUSH
3264: LD_INT 1
3266: PLUS
3267: PPUSH
3268: LD_INT 2
3270: PPUSH
3271: CALL_OW 1
3275: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3276: LD_VAR 0 9
3280: PPUSH
3281: LD_VAR 0 13
3285: PPUSH
3286: CALL_OW 325
3290: IFFALSE 3314
3292: PUSH
3293: LD_VAR 0 10
3297: PPUSH
3298: CALL_OW 255
3302: PPUSH
3303: LD_VAR 0 13
3307: PPUSH
3308: CALL_OW 325
3312: NOT
3313: AND
3314: IFFALSE 3343
// missile := Replace ( missile , missile + 1 , 3 ) ;
3316: LD_ADDR_VAR 0 14
3320: PUSH
3321: LD_VAR 0 14
3325: PPUSH
3326: LD_VAR 0 14
3330: PUSH
3331: LD_INT 1
3333: PLUS
3334: PPUSH
3335: LD_INT 3
3337: PPUSH
3338: CALL_OW 1
3342: ST_TO_ADDR
// if missile < 2 then
3343: LD_VAR 0 14
3347: PUSH
3348: LD_INT 2
3350: LESS
3351: IFFALSE 3355
// exit ;
3353: GO 3577
// x := GetX ( enemy ) ;
3355: LD_ADDR_VAR 0 4
3359: PUSH
3360: LD_VAR 0 10
3364: PPUSH
3365: CALL_OW 250
3369: ST_TO_ADDR
// y := GetY ( enemy ) ;
3370: LD_ADDR_VAR 0 5
3374: PUSH
3375: LD_VAR 0 10
3379: PPUSH
3380: CALL_OW 251
3384: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3385: LD_ADDR_VAR 0 6
3389: PUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_INT 1
3397: NEG
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: CALL_OW 12
3406: PLUS
3407: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3408: LD_ADDR_VAR 0 7
3412: PUSH
3413: LD_VAR 0 5
3417: PUSH
3418: LD_INT 1
3420: NEG
3421: PPUSH
3422: LD_INT 1
3424: PPUSH
3425: CALL_OW 12
3429: PLUS
3430: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3431: LD_VAR 0 6
3435: PPUSH
3436: LD_VAR 0 7
3440: PPUSH
3441: CALL_OW 488
3445: NOT
3446: IFFALSE 3468
// begin _x := x ;
3448: LD_ADDR_VAR 0 6
3452: PUSH
3453: LD_VAR 0 4
3457: ST_TO_ADDR
// _y := y ;
3458: LD_ADDR_VAR 0 7
3462: PUSH
3463: LD_VAR 0 5
3467: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: LD_INT 1
3475: PPUSH
3476: LD_VAR 0 14
3480: PPUSH
3481: CALL_OW 12
3485: ST_TO_ADDR
// case i of 1 :
3486: LD_VAR 0 3
3490: PUSH
3491: LD_INT 1
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3516
3499: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3500: LD_VAR 0 1
3504: PPUSH
3505: LD_VAR 0 10
3509: PPUSH
3510: CALL_OW 115
3514: GO 3577
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3524
3522: GO 3546
3524: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_VAR 0 6
3534: PPUSH
3535: LD_VAR 0 7
3539: PPUSH
3540: CALL_OW 153
3544: GO 3577
3546: LD_INT 3
3548: DOUBLE
3549: EQUAL
3550: IFTRUE 3554
3552: GO 3576
3554: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_VAR 0 6
3564: PPUSH
3565: LD_VAR 0 7
3569: PPUSH
3570: CALL_OW 154
3574: GO 3577
3576: POP
// end ;
3577: LD_VAR 0 2
3581: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3582: LD_INT 0
3584: PPUSH
3585: PPUSH
3586: PPUSH
3587: PPUSH
3588: PPUSH
3589: PPUSH
// if not unit or not building then
3590: LD_VAR 0 1
3594: NOT
3595: IFTRUE 3604
3597: PUSH
3598: LD_VAR 0 2
3602: NOT
3603: OR
3604: IFFALSE 3608
// exit ;
3606: GO 3766
// x := GetX ( building ) ;
3608: LD_ADDR_VAR 0 5
3612: PUSH
3613: LD_VAR 0 2
3617: PPUSH
3618: CALL_OW 250
3622: ST_TO_ADDR
// y := GetY ( building ) ;
3623: LD_ADDR_VAR 0 6
3627: PUSH
3628: LD_VAR 0 2
3632: PPUSH
3633: CALL_OW 251
3637: ST_TO_ADDR
// for i := 0 to 5 do
3638: LD_ADDR_VAR 0 4
3642: PUSH
3643: DOUBLE
3644: LD_INT 0
3646: DEC
3647: ST_TO_ADDR
3648: LD_INT 5
3650: PUSH
3651: FOR_TO
3652: IFFALSE 3764
// begin _x := ShiftX ( x , i , 3 ) ;
3654: LD_ADDR_VAR 0 7
3658: PUSH
3659: LD_VAR 0 5
3663: PPUSH
3664: LD_VAR 0 4
3668: PPUSH
3669: LD_INT 3
3671: PPUSH
3672: CALL_OW 272
3676: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3677: LD_ADDR_VAR 0 8
3681: PUSH
3682: LD_VAR 0 6
3686: PPUSH
3687: LD_VAR 0 4
3691: PPUSH
3692: LD_INT 3
3694: PPUSH
3695: CALL_OW 273
3699: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3700: LD_VAR 0 7
3704: PPUSH
3705: LD_VAR 0 8
3709: PPUSH
3710: CALL_OW 488
3714: NOT
3715: IFFALSE 3719
// continue ;
3717: GO 3651
// if HexInfo ( _x , _y ) = 0 then
3719: LD_VAR 0 7
3723: PPUSH
3724: LD_VAR 0 8
3728: PPUSH
3729: CALL_OW 428
3733: PUSH
3734: LD_INT 0
3736: EQUAL
3737: IFFALSE 3762
// begin ComMoveXY ( unit , _x , _y ) ;
3739: LD_VAR 0 1
3743: PPUSH
3744: LD_VAR 0 7
3748: PPUSH
3749: LD_VAR 0 8
3753: PPUSH
3754: CALL_OW 111
// exit ;
3758: POP
3759: POP
3760: GO 3766
// end ; end ;
3762: GO 3651
3764: POP
3765: POP
// end ;
3766: LD_VAR 0 3
3770: RET
// export function ScanBase ( side , base_area ) ; begin
3771: LD_INT 0
3773: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3774: LD_ADDR_VAR 0 3
3778: PUSH
3779: LD_VAR 0 2
3783: PPUSH
3784: LD_INT 81
3786: PUSH
3787: LD_VAR 0 1
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PPUSH
3796: CALL_OW 70
3800: ST_TO_ADDR
// end ;
3801: LD_VAR 0 3
3805: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3806: LD_INT 0
3808: PPUSH
3809: PPUSH
3810: PPUSH
3811: PPUSH
// result := false ;
3812: LD_ADDR_VAR 0 2
3816: PUSH
3817: LD_INT 0
3819: ST_TO_ADDR
// side := GetSide ( unit ) ;
3820: LD_ADDR_VAR 0 3
3824: PUSH
3825: LD_VAR 0 1
3829: PPUSH
3830: CALL_OW 255
3834: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3835: LD_ADDR_VAR 0 4
3839: PUSH
3840: LD_VAR 0 1
3844: PPUSH
3845: CALL_OW 248
3849: ST_TO_ADDR
// case nat of 1 :
3850: LD_VAR 0 4
3854: PUSH
3855: LD_INT 1
3857: DOUBLE
3858: EQUAL
3859: IFTRUE 3863
3861: GO 3874
3863: POP
// tech := tech_lassight ; 2 :
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: LD_INT 12
3871: ST_TO_ADDR
3872: GO 3913
3874: LD_INT 2
3876: DOUBLE
3877: EQUAL
3878: IFTRUE 3882
3880: GO 3893
3882: POP
// tech := tech_mortar ; 3 :
3883: LD_ADDR_VAR 0 5
3887: PUSH
3888: LD_INT 41
3890: ST_TO_ADDR
3891: GO 3913
3893: LD_INT 3
3895: DOUBLE
3896: EQUAL
3897: IFTRUE 3901
3899: GO 3912
3901: POP
// tech := tech_bazooka ; end ;
3902: LD_ADDR_VAR 0 5
3906: PUSH
3907: LD_INT 44
3909: ST_TO_ADDR
3910: GO 3913
3912: POP
// if Researched ( side , tech ) then
3913: LD_VAR 0 3
3917: PPUSH
3918: LD_VAR 0 5
3922: PPUSH
3923: CALL_OW 325
3927: IFFALSE 3954
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3929: LD_ADDR_VAR 0 2
3933: PUSH
3934: LD_INT 5
3936: PUSH
3937: LD_INT 8
3939: PUSH
3940: LD_INT 9
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: PUSH
3948: LD_VAR 0 4
3952: ARRAY
3953: ST_TO_ADDR
// end ;
3954: LD_VAR 0 2
3958: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3959: LD_INT 0
3961: PPUSH
3962: PPUSH
3963: PPUSH
// if not mines then
3964: LD_VAR 0 2
3968: NOT
3969: IFFALSE 3973
// exit ;
3971: GO 4117
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3973: LD_ADDR_VAR 0 5
3977: PUSH
3978: LD_INT 81
3980: PUSH
3981: LD_VAR 0 1
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PUSH
3990: LD_INT 3
3992: PUSH
3993: LD_INT 21
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PPUSH
4011: CALL_OW 69
4015: ST_TO_ADDR
// for i in mines do
4016: LD_ADDR_VAR 0 4
4020: PUSH
4021: LD_VAR 0 2
4025: PUSH
4026: FOR_IN
4027: IFFALSE 4115
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4029: LD_VAR 0 4
4033: PUSH
4034: LD_INT 1
4036: ARRAY
4037: PPUSH
4038: LD_VAR 0 4
4042: PUSH
4043: LD_INT 2
4045: ARRAY
4046: PPUSH
4047: CALL_OW 458
4051: NOT
4052: IFFALSE 4056
// continue ;
4054: GO 4026
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4056: LD_VAR 0 4
4060: PUSH
4061: LD_INT 1
4063: ARRAY
4064: PPUSH
4065: LD_VAR 0 4
4069: PUSH
4070: LD_INT 2
4072: ARRAY
4073: PPUSH
4074: CALL_OW 428
4078: PUSH
4079: LD_VAR 0 5
4083: IN
4084: IFFALSE 4113
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4086: LD_VAR 0 4
4090: PUSH
4091: LD_INT 1
4093: ARRAY
4094: PPUSH
4095: LD_VAR 0 4
4099: PUSH
4100: LD_INT 2
4102: ARRAY
4103: PPUSH
4104: LD_VAR 0 1
4108: PPUSH
4109: CALL_OW 456
// end ;
4113: GO 4026
4115: POP
4116: POP
// end ;
4117: LD_VAR 0 3
4121: RET
// export function Count ( array ) ; begin
4122: LD_INT 0
4124: PPUSH
// result := array + 0 ;
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: LD_VAR 0 1
4134: PUSH
4135: LD_INT 0
4137: PLUS
4138: ST_TO_ADDR
// end ;
4139: LD_VAR 0 2
4143: RET
// export function IsEmpty ( building ) ; begin
4144: LD_INT 0
4146: PPUSH
// if not building then
4147: LD_VAR 0 1
4151: NOT
4152: IFFALSE 4156
// exit ;
4154: GO 4199
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4156: LD_ADDR_VAR 0 2
4160: PUSH
4161: LD_VAR 0 1
4165: PUSH
4166: LD_INT 22
4168: PUSH
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 255
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 58
4185: PUSH
4186: EMPTY
4187: LIST
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 69
4197: IN
4198: ST_TO_ADDR
// end ;
4199: LD_VAR 0 2
4203: RET
// export function IsNotFull ( building ) ; var places ; begin
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
// if not building then
4208: LD_VAR 0 1
4212: NOT
4213: IFFALSE 4217
// exit ;
4215: GO 4245
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4217: LD_ADDR_VAR 0 2
4221: PUSH
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_INT 3
4229: PUSH
4230: LD_INT 62
4232: PUSH
4233: EMPTY
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PPUSH
4240: CALL_OW 72
4244: ST_TO_ADDR
// end ;
4245: LD_VAR 0 2
4249: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4250: LD_INT 0
4252: PPUSH
4253: PPUSH
4254: PPUSH
4255: PPUSH
// tmp := [ ] ;
4256: LD_ADDR_VAR 0 3
4260: PUSH
4261: EMPTY
4262: ST_TO_ADDR
// list := [ ] ;
4263: LD_ADDR_VAR 0 5
4267: PUSH
4268: EMPTY
4269: ST_TO_ADDR
// for i = 16 to 25 do
4270: LD_ADDR_VAR 0 4
4274: PUSH
4275: DOUBLE
4276: LD_INT 16
4278: DEC
4279: ST_TO_ADDR
4280: LD_INT 25
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4357
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4286: LD_ADDR_VAR 0 3
4290: PUSH
4291: LD_VAR 0 3
4295: PUSH
4296: LD_INT 22
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: CALL_OW 255
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: LD_INT 91
4315: PUSH
4316: LD_VAR 0 1
4320: PUSH
4321: LD_INT 6
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: LIST
4328: PUSH
4329: LD_INT 30
4331: PUSH
4332: LD_VAR 0 4
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: PPUSH
4349: CALL_OW 69
4353: ADD
4354: ST_TO_ADDR
4355: GO 4283
4357: POP
4358: POP
// for i = 1 to tmp do
4359: LD_ADDR_VAR 0 4
4363: PUSH
4364: DOUBLE
4365: LD_INT 1
4367: DEC
4368: ST_TO_ADDR
4369: LD_VAR 0 3
4373: PUSH
4374: FOR_TO
4375: IFFALSE 4463
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4377: LD_ADDR_VAR 0 5
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 3
4391: PUSH
4392: LD_VAR 0 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 266
4402: PUSH
4403: LD_VAR 0 3
4407: PUSH
4408: LD_VAR 0 4
4412: ARRAY
4413: PPUSH
4414: CALL_OW 250
4418: PUSH
4419: LD_VAR 0 3
4423: PUSH
4424: LD_VAR 0 4
4428: ARRAY
4429: PPUSH
4430: CALL_OW 251
4434: PUSH
4435: LD_VAR 0 3
4439: PUSH
4440: LD_VAR 0 4
4444: ARRAY
4445: PPUSH
4446: CALL_OW 254
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: ADD
4460: ST_TO_ADDR
4461: GO 4374
4463: POP
4464: POP
// result := list ;
4465: LD_ADDR_VAR 0 2
4469: PUSH
4470: LD_VAR 0 5
4474: ST_TO_ADDR
// end ;
4475: LD_VAR 0 2
4479: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4480: LD_INT 0
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
// if not factory then
4489: LD_VAR 0 1
4493: NOT
4494: IFFALSE 4498
// exit ;
4496: GO 5101
// if control = control_apeman then
4498: LD_VAR 0 4
4502: PUSH
4503: LD_INT 5
4505: EQUAL
4506: IFFALSE 4615
// begin tmp := UnitsInside ( factory ) ;
4508: LD_ADDR_VAR 0 8
4512: PUSH
4513: LD_VAR 0 1
4517: PPUSH
4518: CALL_OW 313
4522: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4523: LD_VAR 0 8
4527: PPUSH
4528: LD_INT 25
4530: PUSH
4531: LD_INT 12
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PPUSH
4538: CALL_OW 72
4542: NOT
4543: IFFALSE 4553
// control := control_manual ;
4545: LD_ADDR_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4553: LD_ADDR_VAR 0 8
4557: PUSH
4558: LD_VAR 0 1
4562: PPUSH
4563: CALL 4250 0 1
4567: ST_TO_ADDR
// if tmp then
4568: LD_VAR 0 8
4572: IFFALSE 4615
// begin for i in tmp do
4574: LD_ADDR_VAR 0 7
4578: PUSH
4579: LD_VAR 0 8
4583: PUSH
4584: FOR_IN
4585: IFFALSE 4613
// if i [ 1 ] = b_ext_radio then
4587: LD_VAR 0 7
4591: PUSH
4592: LD_INT 1
4594: ARRAY
4595: PUSH
4596: LD_INT 22
4598: EQUAL
4599: IFFALSE 4611
// begin control := control_remote ;
4601: LD_ADDR_VAR 0 4
4605: PUSH
4606: LD_INT 2
4608: ST_TO_ADDR
// break ;
4609: GO 4613
// end ;
4611: GO 4584
4613: POP
4614: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4615: LD_VAR 0 1
4619: PPUSH
4620: LD_VAR 0 2
4624: PPUSH
4625: LD_VAR 0 3
4629: PPUSH
4630: LD_VAR 0 4
4634: PPUSH
4635: LD_VAR 0 5
4639: PPUSH
4640: CALL_OW 448
4644: IFFALSE 4679
// begin result := [ chassis , engine , control , weapon ] ;
4646: LD_ADDR_VAR 0 6
4650: PUSH
4651: LD_VAR 0 2
4655: PUSH
4656: LD_VAR 0 3
4660: PUSH
4661: LD_VAR 0 4
4665: PUSH
4666: LD_VAR 0 5
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: ST_TO_ADDR
// exit ;
4677: GO 5101
// end ; _chassis := AvailableChassisList ( factory ) ;
4679: LD_ADDR_VAR 0 9
4683: PUSH
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 475
4693: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4694: LD_ADDR_VAR 0 11
4698: PUSH
4699: LD_VAR 0 1
4703: PPUSH
4704: CALL_OW 476
4708: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4709: LD_ADDR_VAR 0 12
4713: PUSH
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 477
4723: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4724: LD_ADDR_VAR 0 10
4728: PUSH
4729: LD_VAR 0 1
4733: PPUSH
4734: CALL_OW 478
4738: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4739: LD_VAR 0 9
4743: NOT
4744: IFTRUE 4753
4746: PUSH
4747: LD_VAR 0 11
4751: NOT
4752: OR
4753: IFTRUE 4762
4755: PUSH
4756: LD_VAR 0 12
4760: NOT
4761: OR
4762: IFTRUE 4771
4764: PUSH
4765: LD_VAR 0 10
4769: NOT
4770: OR
4771: IFFALSE 4806
// begin result := [ chassis , engine , control , weapon ] ;
4773: LD_ADDR_VAR 0 6
4777: PUSH
4778: LD_VAR 0 2
4782: PUSH
4783: LD_VAR 0 3
4787: PUSH
4788: LD_VAR 0 4
4792: PUSH
4793: LD_VAR 0 5
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: ST_TO_ADDR
// exit ;
4804: GO 5101
// end ; if not chassis in _chassis then
4806: LD_VAR 0 2
4810: PUSH
4811: LD_VAR 0 9
4815: IN
4816: NOT
4817: IFFALSE 4843
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4819: LD_ADDR_VAR 0 2
4823: PUSH
4824: LD_VAR 0 9
4828: PUSH
4829: LD_INT 1
4831: PPUSH
4832: LD_VAR 0 9
4836: PPUSH
4837: CALL_OW 12
4841: ARRAY
4842: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4843: LD_VAR 0 2
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL 5106 0 2
4857: NOT
4858: IFFALSE 4919
// repeat engine := _engine [ 1 ] ;
4860: LD_ADDR_VAR 0 3
4864: PUSH
4865: LD_VAR 0 11
4869: PUSH
4870: LD_INT 1
4872: ARRAY
4873: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4874: LD_ADDR_VAR 0 11
4878: PUSH
4879: LD_VAR 0 11
4883: PPUSH
4884: LD_INT 1
4886: PPUSH
4887: CALL_OW 3
4891: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4892: LD_VAR 0 2
4896: PPUSH
4897: LD_VAR 0 3
4901: PPUSH
4902: CALL 5106 0 2
4906: IFTRUE 4917
4908: PUSH
4909: LD_VAR 0 11
4913: PUSH
4914: EMPTY
4915: EQUAL
4916: OR
4917: IFFALSE 4860
// if not control in _control then
4919: LD_VAR 0 4
4923: PUSH
4924: LD_VAR 0 12
4928: IN
4929: NOT
4930: IFFALSE 4956
// control := _control [ rand ( 1 , _control ) ] ;
4932: LD_ADDR_VAR 0 4
4936: PUSH
4937: LD_VAR 0 12
4941: PUSH
4942: LD_INT 1
4944: PPUSH
4945: LD_VAR 0 12
4949: PPUSH
4950: CALL_OW 12
4954: ARRAY
4955: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4956: LD_VAR 0 2
4960: PPUSH
4961: LD_VAR 0 5
4965: PPUSH
4966: CALL 5328 0 2
4970: NOT
4971: IFFALSE 5032
// repeat weapon := _weapon [ 1 ] ;
4973: LD_ADDR_VAR 0 5
4977: PUSH
4978: LD_VAR 0 10
4982: PUSH
4983: LD_INT 1
4985: ARRAY
4986: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4987: LD_ADDR_VAR 0 10
4991: PUSH
4992: LD_VAR 0 10
4996: PPUSH
4997: LD_INT 1
4999: PPUSH
5000: CALL_OW 3
5004: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_VAR 0 5
5014: PPUSH
5015: CALL 5328 0 2
5019: IFTRUE 5030
5021: PUSH
5022: LD_VAR 0 10
5026: PUSH
5027: EMPTY
5028: EQUAL
5029: OR
5030: IFFALSE 4973
// result := [ ] ;
5032: LD_ADDR_VAR 0 6
5036: PUSH
5037: EMPTY
5038: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5039: LD_VAR 0 1
5043: PPUSH
5044: LD_VAR 0 2
5048: PPUSH
5049: LD_VAR 0 3
5053: PPUSH
5054: LD_VAR 0 4
5058: PPUSH
5059: LD_VAR 0 5
5063: PPUSH
5064: CALL_OW 448
5068: IFFALSE 5101
// result := [ chassis , engine , control , weapon ] ;
5070: LD_ADDR_VAR 0 6
5074: PUSH
5075: LD_VAR 0 2
5079: PUSH
5080: LD_VAR 0 3
5084: PUSH
5085: LD_VAR 0 4
5089: PUSH
5090: LD_VAR 0 5
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: ST_TO_ADDR
// end ;
5101: LD_VAR 0 6
5105: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5106: LD_INT 0
5108: PPUSH
// if not chassis or not engine then
5109: LD_VAR 0 1
5113: NOT
5114: IFTRUE 5123
5116: PUSH
5117: LD_VAR 0 2
5121: NOT
5122: OR
5123: IFFALSE 5127
// exit ;
5125: GO 5323
// case engine of engine_solar :
5127: LD_VAR 0 2
5131: PUSH
5132: LD_INT 2
5134: DOUBLE
5135: EQUAL
5136: IFTRUE 5140
5138: GO 5178
5140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5141: LD_ADDR_VAR 0 3
5145: PUSH
5146: LD_INT 11
5148: PUSH
5149: LD_INT 12
5151: PUSH
5152: LD_INT 13
5154: PUSH
5155: LD_INT 14
5157: PUSH
5158: LD_INT 1
5160: PUSH
5161: LD_INT 2
5163: PUSH
5164: LD_INT 3
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: ST_TO_ADDR
5176: GO 5307
5178: LD_INT 1
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5248
5186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5187: LD_ADDR_VAR 0 3
5191: PUSH
5192: LD_INT 11
5194: PUSH
5195: LD_INT 12
5197: PUSH
5198: LD_INT 13
5200: PUSH
5201: LD_INT 14
5203: PUSH
5204: LD_INT 1
5206: PUSH
5207: LD_INT 2
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: LD_INT 4
5215: PUSH
5216: LD_INT 5
5218: PUSH
5219: LD_INT 21
5221: PUSH
5222: LD_INT 23
5224: PUSH
5225: LD_INT 22
5227: PUSH
5228: LD_INT 24
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: ST_TO_ADDR
5246: GO 5307
5248: LD_INT 3
5250: DOUBLE
5251: EQUAL
5252: IFTRUE 5256
5254: GO 5306
5256: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5257: LD_ADDR_VAR 0 3
5261: PUSH
5262: LD_INT 13
5264: PUSH
5265: LD_INT 14
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: LD_INT 3
5273: PUSH
5274: LD_INT 4
5276: PUSH
5277: LD_INT 5
5279: PUSH
5280: LD_INT 21
5282: PUSH
5283: LD_INT 22
5285: PUSH
5286: LD_INT 23
5288: PUSH
5289: LD_INT 24
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: ST_TO_ADDR
5304: GO 5307
5306: POP
// result := ( chassis in result ) ;
5307: LD_ADDR_VAR 0 3
5311: PUSH
5312: LD_VAR 0 1
5316: PUSH
5317: LD_VAR 0 3
5321: IN
5322: ST_TO_ADDR
// end ;
5323: LD_VAR 0 3
5327: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5328: LD_INT 0
5330: PPUSH
// if not chassis or not weapon then
5331: LD_VAR 0 1
5335: NOT
5336: IFTRUE 5345
5338: PUSH
5339: LD_VAR 0 2
5343: NOT
5344: OR
5345: IFFALSE 5349
// exit ;
5347: GO 6409
// case weapon of us_machine_gun :
5349: LD_VAR 0 2
5353: PUSH
5354: LD_INT 2
5356: DOUBLE
5357: EQUAL
5358: IFTRUE 5362
5360: GO 5392
5362: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5363: LD_ADDR_VAR 0 3
5367: PUSH
5368: LD_INT 1
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: LD_INT 3
5376: PUSH
5377: LD_INT 4
5379: PUSH
5380: LD_INT 5
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: ST_TO_ADDR
5390: GO 6393
5392: LD_INT 3
5394: DOUBLE
5395: EQUAL
5396: IFTRUE 5400
5398: GO 5430
5400: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5401: LD_ADDR_VAR 0 3
5405: PUSH
5406: LD_INT 1
5408: PUSH
5409: LD_INT 2
5411: PUSH
5412: LD_INT 3
5414: PUSH
5415: LD_INT 4
5417: PUSH
5418: LD_INT 5
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: ST_TO_ADDR
5428: GO 6393
5430: LD_INT 11
5432: DOUBLE
5433: EQUAL
5434: IFTRUE 5438
5436: GO 5468
5438: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5439: LD_ADDR_VAR 0 3
5443: PUSH
5444: LD_INT 1
5446: PUSH
5447: LD_INT 2
5449: PUSH
5450: LD_INT 3
5452: PUSH
5453: LD_INT 4
5455: PUSH
5456: LD_INT 5
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: ST_TO_ADDR
5466: GO 6393
5468: LD_INT 4
5470: DOUBLE
5471: EQUAL
5472: IFTRUE 5476
5474: GO 5502
5476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5477: LD_ADDR_VAR 0 3
5481: PUSH
5482: LD_INT 2
5484: PUSH
5485: LD_INT 3
5487: PUSH
5488: LD_INT 4
5490: PUSH
5491: LD_INT 5
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: ST_TO_ADDR
5500: GO 6393
5502: LD_INT 5
5504: DOUBLE
5505: EQUAL
5506: IFTRUE 5510
5508: GO 5536
5510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_INT 2
5518: PUSH
5519: LD_INT 3
5521: PUSH
5522: LD_INT 4
5524: PUSH
5525: LD_INT 5
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: ST_TO_ADDR
5534: GO 6393
5536: LD_INT 9
5538: DOUBLE
5539: EQUAL
5540: IFTRUE 5544
5542: GO 5570
5544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5545: LD_ADDR_VAR 0 3
5549: PUSH
5550: LD_INT 2
5552: PUSH
5553: LD_INT 3
5555: PUSH
5556: LD_INT 4
5558: PUSH
5559: LD_INT 5
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: ST_TO_ADDR
5568: GO 6393
5570: LD_INT 7
5572: DOUBLE
5573: EQUAL
5574: IFTRUE 5578
5576: GO 5604
5578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5579: LD_ADDR_VAR 0 3
5583: PUSH
5584: LD_INT 2
5586: PUSH
5587: LD_INT 3
5589: PUSH
5590: LD_INT 4
5592: PUSH
5593: LD_INT 5
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: ST_TO_ADDR
5602: GO 6393
5604: LD_INT 12
5606: DOUBLE
5607: EQUAL
5608: IFTRUE 5612
5610: GO 5638
5612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5613: LD_ADDR_VAR 0 3
5617: PUSH
5618: LD_INT 2
5620: PUSH
5621: LD_INT 3
5623: PUSH
5624: LD_INT 4
5626: PUSH
5627: LD_INT 5
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: ST_TO_ADDR
5636: GO 6393
5638: LD_INT 13
5640: DOUBLE
5641: EQUAL
5642: IFTRUE 5646
5644: GO 5672
5646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5647: LD_ADDR_VAR 0 3
5651: PUSH
5652: LD_INT 2
5654: PUSH
5655: LD_INT 3
5657: PUSH
5658: LD_INT 4
5660: PUSH
5661: LD_INT 5
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: ST_TO_ADDR
5670: GO 6393
5672: LD_INT 14
5674: DOUBLE
5675: EQUAL
5676: IFTRUE 5680
5678: GO 5698
5680: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5681: LD_ADDR_VAR 0 3
5685: PUSH
5686: LD_INT 4
5688: PUSH
5689: LD_INT 5
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: ST_TO_ADDR
5696: GO 6393
5698: LD_INT 6
5700: DOUBLE
5701: EQUAL
5702: IFTRUE 5706
5704: GO 5724
5706: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5707: LD_ADDR_VAR 0 3
5711: PUSH
5712: LD_INT 4
5714: PUSH
5715: LD_INT 5
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: ST_TO_ADDR
5722: GO 6393
5724: LD_INT 10
5726: DOUBLE
5727: EQUAL
5728: IFTRUE 5732
5730: GO 5750
5732: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5733: LD_ADDR_VAR 0 3
5737: PUSH
5738: LD_INT 4
5740: PUSH
5741: LD_INT 5
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: ST_TO_ADDR
5748: GO 6393
5750: LD_INT 22
5752: DOUBLE
5753: EQUAL
5754: IFTRUE 5758
5756: GO 5784
5758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5759: LD_ADDR_VAR 0 3
5763: PUSH
5764: LD_INT 11
5766: PUSH
5767: LD_INT 12
5769: PUSH
5770: LD_INT 13
5772: PUSH
5773: LD_INT 14
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: ST_TO_ADDR
5782: GO 6393
5784: LD_INT 23
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5792
5790: GO 5818
5792: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5793: LD_ADDR_VAR 0 3
5797: PUSH
5798: LD_INT 11
5800: PUSH
5801: LD_INT 12
5803: PUSH
5804: LD_INT 13
5806: PUSH
5807: LD_INT 14
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: ST_TO_ADDR
5816: GO 6393
5818: LD_INT 24
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5826
5824: GO 5852
5826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5827: LD_ADDR_VAR 0 3
5831: PUSH
5832: LD_INT 11
5834: PUSH
5835: LD_INT 12
5837: PUSH
5838: LD_INT 13
5840: PUSH
5841: LD_INT 14
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: ST_TO_ADDR
5850: GO 6393
5852: LD_INT 30
5854: DOUBLE
5855: EQUAL
5856: IFTRUE 5860
5858: GO 5886
5860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5861: LD_ADDR_VAR 0 3
5865: PUSH
5866: LD_INT 11
5868: PUSH
5869: LD_INT 12
5871: PUSH
5872: LD_INT 13
5874: PUSH
5875: LD_INT 14
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: ST_TO_ADDR
5884: GO 6393
5886: LD_INT 25
5888: DOUBLE
5889: EQUAL
5890: IFTRUE 5894
5892: GO 5912
5894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5895: LD_ADDR_VAR 0 3
5899: PUSH
5900: LD_INT 13
5902: PUSH
5903: LD_INT 14
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: ST_TO_ADDR
5910: GO 6393
5912: LD_INT 27
5914: DOUBLE
5915: EQUAL
5916: IFTRUE 5920
5918: GO 5938
5920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5921: LD_ADDR_VAR 0 3
5925: PUSH
5926: LD_INT 13
5928: PUSH
5929: LD_INT 14
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: ST_TO_ADDR
5936: GO 6393
5938: LD_INT 92
5940: DOUBLE
5941: EQUAL
5942: IFTRUE 5946
5944: GO 5972
5946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5947: LD_ADDR_VAR 0 3
5951: PUSH
5952: LD_INT 11
5954: PUSH
5955: LD_INT 12
5957: PUSH
5958: LD_INT 13
5960: PUSH
5961: LD_INT 14
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: ST_TO_ADDR
5970: GO 6393
5972: LD_INT 28
5974: DOUBLE
5975: EQUAL
5976: IFTRUE 5980
5978: GO 5998
5980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5981: LD_ADDR_VAR 0 3
5985: PUSH
5986: LD_INT 13
5988: PUSH
5989: LD_INT 14
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: ST_TO_ADDR
5996: GO 6393
5998: LD_INT 29
6000: DOUBLE
6001: EQUAL
6002: IFTRUE 6006
6004: GO 6024
6006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6007: LD_ADDR_VAR 0 3
6011: PUSH
6012: LD_INT 13
6014: PUSH
6015: LD_INT 14
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: ST_TO_ADDR
6022: GO 6393
6024: LD_INT 31
6026: DOUBLE
6027: EQUAL
6028: IFTRUE 6032
6030: GO 6050
6032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6033: LD_ADDR_VAR 0 3
6037: PUSH
6038: LD_INT 13
6040: PUSH
6041: LD_INT 14
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: ST_TO_ADDR
6048: GO 6393
6050: LD_INT 26
6052: DOUBLE
6053: EQUAL
6054: IFTRUE 6058
6056: GO 6076
6058: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6059: LD_ADDR_VAR 0 3
6063: PUSH
6064: LD_INT 13
6066: PUSH
6067: LD_INT 14
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: ST_TO_ADDR
6074: GO 6393
6076: LD_INT 42
6078: DOUBLE
6079: EQUAL
6080: IFTRUE 6084
6082: GO 6110
6084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6085: LD_ADDR_VAR 0 3
6089: PUSH
6090: LD_INT 21
6092: PUSH
6093: LD_INT 22
6095: PUSH
6096: LD_INT 23
6098: PUSH
6099: LD_INT 24
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: ST_TO_ADDR
6108: GO 6393
6110: LD_INT 43
6112: DOUBLE
6113: EQUAL
6114: IFTRUE 6118
6116: GO 6144
6118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6119: LD_ADDR_VAR 0 3
6123: PUSH
6124: LD_INT 21
6126: PUSH
6127: LD_INT 22
6129: PUSH
6130: LD_INT 23
6132: PUSH
6133: LD_INT 24
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: ST_TO_ADDR
6142: GO 6393
6144: LD_INT 44
6146: DOUBLE
6147: EQUAL
6148: IFTRUE 6152
6150: GO 6178
6152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6153: LD_ADDR_VAR 0 3
6157: PUSH
6158: LD_INT 21
6160: PUSH
6161: LD_INT 22
6163: PUSH
6164: LD_INT 23
6166: PUSH
6167: LD_INT 24
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: ST_TO_ADDR
6176: GO 6393
6178: LD_INT 45
6180: DOUBLE
6181: EQUAL
6182: IFTRUE 6186
6184: GO 6212
6186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6187: LD_ADDR_VAR 0 3
6191: PUSH
6192: LD_INT 21
6194: PUSH
6195: LD_INT 22
6197: PUSH
6198: LD_INT 23
6200: PUSH
6201: LD_INT 24
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: ST_TO_ADDR
6210: GO 6393
6212: LD_INT 49
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6246
6220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6221: LD_ADDR_VAR 0 3
6225: PUSH
6226: LD_INT 21
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: LD_INT 23
6234: PUSH
6235: LD_INT 24
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: ST_TO_ADDR
6244: GO 6393
6246: LD_INT 51
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6280
6254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6255: LD_ADDR_VAR 0 3
6259: PUSH
6260: LD_INT 21
6262: PUSH
6263: LD_INT 22
6265: PUSH
6266: LD_INT 23
6268: PUSH
6269: LD_INT 24
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: ST_TO_ADDR
6278: GO 6393
6280: LD_INT 52
6282: DOUBLE
6283: EQUAL
6284: IFTRUE 6288
6286: GO 6314
6288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6289: LD_ADDR_VAR 0 3
6293: PUSH
6294: LD_INT 21
6296: PUSH
6297: LD_INT 22
6299: PUSH
6300: LD_INT 23
6302: PUSH
6303: LD_INT 24
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: ST_TO_ADDR
6312: GO 6393
6314: LD_INT 53
6316: DOUBLE
6317: EQUAL
6318: IFTRUE 6322
6320: GO 6340
6322: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6323: LD_ADDR_VAR 0 3
6327: PUSH
6328: LD_INT 23
6330: PUSH
6331: LD_INT 24
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: ST_TO_ADDR
6338: GO 6393
6340: LD_INT 46
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6366
6348: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6349: LD_ADDR_VAR 0 3
6353: PUSH
6354: LD_INT 23
6356: PUSH
6357: LD_INT 24
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: ST_TO_ADDR
6364: GO 6393
6366: LD_INT 47
6368: DOUBLE
6369: EQUAL
6370: IFTRUE 6374
6372: GO 6392
6374: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6375: LD_ADDR_VAR 0 3
6379: PUSH
6380: LD_INT 23
6382: PUSH
6383: LD_INT 24
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: ST_TO_ADDR
6390: GO 6393
6392: POP
// result := ( chassis in result ) ;
6393: LD_ADDR_VAR 0 3
6397: PUSH
6398: LD_VAR 0 1
6402: PUSH
6403: LD_VAR 0 3
6407: IN
6408: ST_TO_ADDR
// end ;
6409: LD_VAR 0 3
6413: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6414: LD_INT 0
6416: PPUSH
6417: PPUSH
6418: PPUSH
6419: PPUSH
6420: PPUSH
6421: PPUSH
6422: PPUSH
// result := array ;
6423: LD_ADDR_VAR 0 5
6427: PUSH
6428: LD_VAR 0 1
6432: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6433: LD_VAR 0 1
6437: NOT
6438: IFTRUE 6447
6440: PUSH
6441: LD_VAR 0 2
6445: NOT
6446: OR
6447: IFTRUE 6456
6449: PUSH
6450: LD_VAR 0 3
6454: NOT
6455: OR
6456: IFTRUE 6470
6458: PUSH
6459: LD_VAR 0 2
6463: PUSH
6464: LD_VAR 0 1
6468: GREATER
6469: OR
6470: IFTRUE 6484
6472: PUSH
6473: LD_VAR 0 3
6477: PUSH
6478: LD_VAR 0 1
6482: GREATER
6483: OR
6484: IFFALSE 6488
// exit ;
6486: GO 6784
// if direction then
6488: LD_VAR 0 4
6492: IFFALSE 6556
// begin d := 1 ;
6494: LD_ADDR_VAR 0 9
6498: PUSH
6499: LD_INT 1
6501: ST_TO_ADDR
// if i_from > i_to then
6502: LD_VAR 0 2
6506: PUSH
6507: LD_VAR 0 3
6511: GREATER
6512: IFFALSE 6538
// length := ( array - i_from ) + i_to else
6514: LD_ADDR_VAR 0 11
6518: PUSH
6519: LD_VAR 0 1
6523: PUSH
6524: LD_VAR 0 2
6528: MINUS
6529: PUSH
6530: LD_VAR 0 3
6534: PLUS
6535: ST_TO_ADDR
6536: GO 6554
// length := i_to - i_from ;
6538: LD_ADDR_VAR 0 11
6542: PUSH
6543: LD_VAR 0 3
6547: PUSH
6548: LD_VAR 0 2
6552: MINUS
6553: ST_TO_ADDR
// end else
6554: GO 6617
// begin d := - 1 ;
6556: LD_ADDR_VAR 0 9
6560: PUSH
6561: LD_INT 1
6563: NEG
6564: ST_TO_ADDR
// if i_from > i_to then
6565: LD_VAR 0 2
6569: PUSH
6570: LD_VAR 0 3
6574: GREATER
6575: IFFALSE 6595
// length := i_from - i_to else
6577: LD_ADDR_VAR 0 11
6581: PUSH
6582: LD_VAR 0 2
6586: PUSH
6587: LD_VAR 0 3
6591: MINUS
6592: ST_TO_ADDR
6593: GO 6617
// length := ( array - i_to ) + i_from ;
6595: LD_ADDR_VAR 0 11
6599: PUSH
6600: LD_VAR 0 1
6604: PUSH
6605: LD_VAR 0 3
6609: MINUS
6610: PUSH
6611: LD_VAR 0 2
6615: PLUS
6616: ST_TO_ADDR
// end ; if not length then
6617: LD_VAR 0 11
6621: NOT
6622: IFFALSE 6626
// exit ;
6624: GO 6784
// tmp := array ;
6626: LD_ADDR_VAR 0 10
6630: PUSH
6631: LD_VAR 0 1
6635: ST_TO_ADDR
// for i = 1 to length do
6636: LD_ADDR_VAR 0 6
6640: PUSH
6641: DOUBLE
6642: LD_INT 1
6644: DEC
6645: ST_TO_ADDR
6646: LD_VAR 0 11
6650: PUSH
6651: FOR_TO
6652: IFFALSE 6772
// begin for j = 1 to array do
6654: LD_ADDR_VAR 0 7
6658: PUSH
6659: DOUBLE
6660: LD_INT 1
6662: DEC
6663: ST_TO_ADDR
6664: LD_VAR 0 1
6668: PUSH
6669: FOR_TO
6670: IFFALSE 6758
// begin k := j + d ;
6672: LD_ADDR_VAR 0 8
6676: PUSH
6677: LD_VAR 0 7
6681: PUSH
6682: LD_VAR 0 9
6686: PLUS
6687: ST_TO_ADDR
// if k > array then
6688: LD_VAR 0 8
6692: PUSH
6693: LD_VAR 0 1
6697: GREATER
6698: IFFALSE 6708
// k := 1 ;
6700: LD_ADDR_VAR 0 8
6704: PUSH
6705: LD_INT 1
6707: ST_TO_ADDR
// if not k then
6708: LD_VAR 0 8
6712: NOT
6713: IFFALSE 6725
// k := array ;
6715: LD_ADDR_VAR 0 8
6719: PUSH
6720: LD_VAR 0 1
6724: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6725: LD_ADDR_VAR 0 10
6729: PUSH
6730: LD_VAR 0 10
6734: PPUSH
6735: LD_VAR 0 8
6739: PPUSH
6740: LD_VAR 0 1
6744: PUSH
6745: LD_VAR 0 7
6749: ARRAY
6750: PPUSH
6751: CALL_OW 1
6755: ST_TO_ADDR
// end ;
6756: GO 6669
6758: POP
6759: POP
// array := tmp ;
6760: LD_ADDR_VAR 0 1
6764: PUSH
6765: LD_VAR 0 10
6769: ST_TO_ADDR
// end ;
6770: GO 6651
6772: POP
6773: POP
// result := array ;
6774: LD_ADDR_VAR 0 5
6778: PUSH
6779: LD_VAR 0 1
6783: ST_TO_ADDR
// end ;
6784: LD_VAR 0 5
6788: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6789: LD_INT 0
6791: PPUSH
6792: PPUSH
// result := 0 ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_INT 0
6800: ST_TO_ADDR
// if not array or not value in array then
6801: LD_VAR 0 1
6805: NOT
6806: IFTRUE 6821
6808: PUSH
6809: LD_VAR 0 2
6813: PUSH
6814: LD_VAR 0 1
6818: IN
6819: NOT
6820: OR
6821: IFFALSE 6825
// exit ;
6823: GO 6879
// for i = 1 to array do
6825: LD_ADDR_VAR 0 4
6829: PUSH
6830: DOUBLE
6831: LD_INT 1
6833: DEC
6834: ST_TO_ADDR
6835: LD_VAR 0 1
6839: PUSH
6840: FOR_TO
6841: IFFALSE 6877
// if value = array [ i ] then
6843: LD_VAR 0 2
6847: PUSH
6848: LD_VAR 0 1
6852: PUSH
6853: LD_VAR 0 4
6857: ARRAY
6858: EQUAL
6859: IFFALSE 6875
// begin result := i ;
6861: LD_ADDR_VAR 0 3
6865: PUSH
6866: LD_VAR 0 4
6870: ST_TO_ADDR
// exit ;
6871: POP
6872: POP
6873: GO 6879
// end ;
6875: GO 6840
6877: POP
6878: POP
// end ;
6879: LD_VAR 0 3
6883: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6884: LD_INT 0
6886: PPUSH
// vc_chassis := chassis ;
6887: LD_ADDR_OWVAR 37
6891: PUSH
6892: LD_VAR 0 1
6896: ST_TO_ADDR
// vc_engine := engine ;
6897: LD_ADDR_OWVAR 39
6901: PUSH
6902: LD_VAR 0 2
6906: ST_TO_ADDR
// vc_control := control ;
6907: LD_ADDR_OWVAR 38
6911: PUSH
6912: LD_VAR 0 3
6916: ST_TO_ADDR
// vc_weapon := weapon ;
6917: LD_ADDR_OWVAR 40
6921: PUSH
6922: LD_VAR 0 4
6926: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6927: LD_ADDR_OWVAR 41
6931: PUSH
6932: LD_VAR 0 5
6936: ST_TO_ADDR
// end ;
6937: LD_VAR 0 6
6941: RET
// export function WantPlant ( unit ) ; var task ; begin
6942: LD_INT 0
6944: PPUSH
6945: PPUSH
// result := false ;
6946: LD_ADDR_VAR 0 2
6950: PUSH
6951: LD_INT 0
6953: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6954: LD_ADDR_VAR 0 3
6958: PUSH
6959: LD_VAR 0 1
6963: PPUSH
6964: CALL_OW 437
6968: ST_TO_ADDR
// if task then
6969: LD_VAR 0 3
6973: IFFALSE 7001
// if task [ 1 ] [ 1 ] = p then
6975: LD_VAR 0 3
6979: PUSH
6980: LD_INT 1
6982: ARRAY
6983: PUSH
6984: LD_INT 1
6986: ARRAY
6987: PUSH
6988: LD_STRING p
6990: EQUAL
6991: IFFALSE 7001
// result := true ;
6993: LD_ADDR_VAR 0 2
6997: PUSH
6998: LD_INT 1
7000: ST_TO_ADDR
// end ;
7001: LD_VAR 0 2
7005: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7006: LD_INT 0
7008: PPUSH
7009: PPUSH
7010: PPUSH
7011: PPUSH
// if pos < 1 then
7012: LD_VAR 0 2
7016: PUSH
7017: LD_INT 1
7019: LESS
7020: IFFALSE 7024
// exit ;
7022: GO 7327
// if pos = 1 then
7024: LD_VAR 0 2
7028: PUSH
7029: LD_INT 1
7031: EQUAL
7032: IFFALSE 7065
// result := Replace ( arr , pos [ 1 ] , value ) else
7034: LD_ADDR_VAR 0 4
7038: PUSH
7039: LD_VAR 0 1
7043: PPUSH
7044: LD_VAR 0 2
7048: PUSH
7049: LD_INT 1
7051: ARRAY
7052: PPUSH
7053: LD_VAR 0 3
7057: PPUSH
7058: CALL_OW 1
7062: ST_TO_ADDR
7063: GO 7327
// begin tmp := arr ;
7065: LD_ADDR_VAR 0 6
7069: PUSH
7070: LD_VAR 0 1
7074: ST_TO_ADDR
// s_arr := [ tmp ] ;
7075: LD_ADDR_VAR 0 7
7079: PUSH
7080: LD_VAR 0 6
7084: PUSH
7085: EMPTY
7086: LIST
7087: ST_TO_ADDR
// for i = 1 to pos - 1 do
7088: LD_ADDR_VAR 0 5
7092: PUSH
7093: DOUBLE
7094: LD_INT 1
7096: DEC
7097: ST_TO_ADDR
7098: LD_VAR 0 2
7102: PUSH
7103: LD_INT 1
7105: MINUS
7106: PUSH
7107: FOR_TO
7108: IFFALSE 7153
// begin tmp := tmp [ pos [ i ] ] ;
7110: LD_ADDR_VAR 0 6
7114: PUSH
7115: LD_VAR 0 6
7119: PUSH
7120: LD_VAR 0 2
7124: PUSH
7125: LD_VAR 0 5
7129: ARRAY
7130: ARRAY
7131: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7132: LD_ADDR_VAR 0 7
7136: PUSH
7137: LD_VAR 0 7
7141: PUSH
7142: LD_VAR 0 6
7146: PUSH
7147: EMPTY
7148: LIST
7149: ADD
7150: ST_TO_ADDR
// end ;
7151: GO 7107
7153: POP
7154: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7155: LD_ADDR_VAR 0 6
7159: PUSH
7160: LD_VAR 0 6
7164: PPUSH
7165: LD_VAR 0 2
7169: PUSH
7170: LD_VAR 0 2
7174: ARRAY
7175: PPUSH
7176: LD_VAR 0 3
7180: PPUSH
7181: CALL_OW 1
7185: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7186: LD_ADDR_VAR 0 7
7190: PUSH
7191: LD_VAR 0 7
7195: PPUSH
7196: LD_VAR 0 7
7200: PPUSH
7201: LD_VAR 0 6
7205: PPUSH
7206: CALL_OW 1
7210: ST_TO_ADDR
// for i = s_arr downto 2 do
7211: LD_ADDR_VAR 0 5
7215: PUSH
7216: DOUBLE
7217: LD_VAR 0 7
7221: INC
7222: ST_TO_ADDR
7223: LD_INT 2
7225: PUSH
7226: FOR_DOWNTO
7227: IFFALSE 7311
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7229: LD_ADDR_VAR 0 6
7233: PUSH
7234: LD_VAR 0 7
7238: PUSH
7239: LD_VAR 0 5
7243: PUSH
7244: LD_INT 1
7246: MINUS
7247: ARRAY
7248: PPUSH
7249: LD_VAR 0 2
7253: PUSH
7254: LD_VAR 0 5
7258: PUSH
7259: LD_INT 1
7261: MINUS
7262: ARRAY
7263: PPUSH
7264: LD_VAR 0 7
7268: PUSH
7269: LD_VAR 0 5
7273: ARRAY
7274: PPUSH
7275: CALL_OW 1
7279: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7280: LD_ADDR_VAR 0 7
7284: PUSH
7285: LD_VAR 0 7
7289: PPUSH
7290: LD_VAR 0 5
7294: PUSH
7295: LD_INT 1
7297: MINUS
7298: PPUSH
7299: LD_VAR 0 6
7303: PPUSH
7304: CALL_OW 1
7308: ST_TO_ADDR
// end ;
7309: GO 7226
7311: POP
7312: POP
// result := s_arr [ 1 ] ;
7313: LD_ADDR_VAR 0 4
7317: PUSH
7318: LD_VAR 0 7
7322: PUSH
7323: LD_INT 1
7325: ARRAY
7326: ST_TO_ADDR
// end ; end ;
7327: LD_VAR 0 4
7331: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
// if not list then
7336: LD_VAR 0 1
7340: NOT
7341: IFFALSE 7345
// exit ;
7343: GO 7436
// i := list [ pos1 ] ;
7345: LD_ADDR_VAR 0 5
7349: PUSH
7350: LD_VAR 0 1
7354: PUSH
7355: LD_VAR 0 2
7359: ARRAY
7360: ST_TO_ADDR
// if not i then
7361: LD_VAR 0 5
7365: NOT
7366: IFFALSE 7370
// exit ;
7368: GO 7436
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7370: LD_ADDR_VAR 0 1
7374: PUSH
7375: LD_VAR 0 1
7379: PPUSH
7380: LD_VAR 0 2
7384: PPUSH
7385: LD_VAR 0 1
7389: PUSH
7390: LD_VAR 0 3
7394: ARRAY
7395: PPUSH
7396: CALL_OW 1
7400: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7401: LD_ADDR_VAR 0 1
7405: PUSH
7406: LD_VAR 0 1
7410: PPUSH
7411: LD_VAR 0 3
7415: PPUSH
7416: LD_VAR 0 5
7420: PPUSH
7421: CALL_OW 1
7425: ST_TO_ADDR
// result := list ;
7426: LD_ADDR_VAR 0 4
7430: PUSH
7431: LD_VAR 0 1
7435: ST_TO_ADDR
// end ;
7436: LD_VAR 0 4
7440: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7441: LD_INT 0
7443: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7444: LD_ADDR_VAR 0 5
7448: PUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 250
7458: PPUSH
7459: LD_VAR 0 1
7463: PPUSH
7464: CALL_OW 251
7468: PPUSH
7469: LD_VAR 0 2
7473: PPUSH
7474: LD_VAR 0 3
7478: PPUSH
7479: LD_VAR 0 4
7483: PPUSH
7484: CALL 7866 0 5
7488: ST_TO_ADDR
// end ;
7489: LD_VAR 0 5
7493: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7494: LD_INT 0
7496: PPUSH
7497: PPUSH
7498: PPUSH
7499: PPUSH
// if not list or not unit then
7500: LD_VAR 0 2
7504: NOT
7505: IFTRUE 7514
7507: PUSH
7508: LD_VAR 0 1
7512: NOT
7513: OR
7514: IFFALSE 7518
// exit ;
7516: GO 7861
// result := [ ] ;
7518: LD_ADDR_VAR 0 5
7522: PUSH
7523: EMPTY
7524: ST_TO_ADDR
// for i in list do
7525: LD_ADDR_VAR 0 6
7529: PUSH
7530: LD_VAR 0 2
7534: PUSH
7535: FOR_IN
7536: IFFALSE 7754
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7538: LD_ADDR_VAR 0 8
7542: PUSH
7543: LD_VAR 0 1
7547: PPUSH
7548: LD_VAR 0 6
7552: PUSH
7553: LD_INT 1
7555: ARRAY
7556: PPUSH
7557: LD_VAR 0 6
7561: PUSH
7562: LD_INT 2
7564: ARRAY
7565: PPUSH
7566: CALL_OW 297
7570: ST_TO_ADDR
// if not Count ( result ) then
7571: LD_VAR 0 5
7575: PPUSH
7576: CALL 4122 0 1
7580: NOT
7581: IFFALSE 7614
// begin result := Join ( result , [ i , tmp ] ) ;
7583: LD_ADDR_VAR 0 5
7587: PUSH
7588: LD_VAR 0 5
7592: PPUSH
7593: LD_VAR 0 6
7597: PUSH
7598: LD_VAR 0 8
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PPUSH
7607: CALL 40054 0 2
7611: ST_TO_ADDR
// continue ;
7612: GO 7535
// end ; if result [ result ] [ 2 ] <= tmp then
7614: LD_VAR 0 5
7618: PUSH
7619: LD_VAR 0 5
7623: ARRAY
7624: PUSH
7625: LD_INT 2
7627: ARRAY
7628: PUSH
7629: LD_VAR 0 8
7633: LESSEQUAL
7634: IFFALSE 7667
// result := Join ( result , [ i , tmp ] ) else
7636: LD_ADDR_VAR 0 5
7640: PUSH
7641: LD_VAR 0 5
7645: PPUSH
7646: LD_VAR 0 6
7650: PUSH
7651: LD_VAR 0 8
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PPUSH
7660: CALL 40054 0 2
7664: ST_TO_ADDR
7665: GO 7752
// begin for j := 1 to Count ( result ) do
7667: LD_ADDR_VAR 0 7
7671: PUSH
7672: DOUBLE
7673: LD_INT 1
7675: DEC
7676: ST_TO_ADDR
7677: LD_VAR 0 5
7681: PPUSH
7682: CALL 4122 0 1
7686: PUSH
7687: FOR_TO
7688: IFFALSE 7750
// begin if tmp < result [ j ] [ 2 ] then
7690: LD_VAR 0 8
7694: PUSH
7695: LD_VAR 0 5
7699: PUSH
7700: LD_VAR 0 7
7704: ARRAY
7705: PUSH
7706: LD_INT 2
7708: ARRAY
7709: LESS
7710: IFFALSE 7748
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7712: LD_ADDR_VAR 0 5
7716: PUSH
7717: LD_VAR 0 5
7721: PPUSH
7722: LD_VAR 0 7
7726: PPUSH
7727: LD_VAR 0 6
7731: PUSH
7732: LD_VAR 0 8
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 2
7745: ST_TO_ADDR
// break ;
7746: GO 7750
// end ; end ;
7748: GO 7687
7750: POP
7751: POP
// end ; end ;
7752: GO 7535
7754: POP
7755: POP
// if result and not asc then
7756: LD_VAR 0 5
7760: IFFALSE 7769
7762: PUSH
7763: LD_VAR 0 3
7767: NOT
7768: AND
7769: IFFALSE 7786
// result := ReverseArray ( result ) ;
7771: LD_ADDR_VAR 0 5
7775: PUSH
7776: LD_VAR 0 5
7780: PPUSH
7781: CALL 35144 0 1
7785: ST_TO_ADDR
// tmp := [ ] ;
7786: LD_ADDR_VAR 0 8
7790: PUSH
7791: EMPTY
7792: ST_TO_ADDR
// if mode then
7793: LD_VAR 0 4
7797: IFFALSE 7861
// begin for i := 1 to result do
7799: LD_ADDR_VAR 0 6
7803: PUSH
7804: DOUBLE
7805: LD_INT 1
7807: DEC
7808: ST_TO_ADDR
7809: LD_VAR 0 5
7813: PUSH
7814: FOR_TO
7815: IFFALSE 7849
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7817: LD_ADDR_VAR 0 8
7821: PUSH
7822: LD_VAR 0 8
7826: PPUSH
7827: LD_VAR 0 5
7831: PUSH
7832: LD_VAR 0 6
7836: ARRAY
7837: PUSH
7838: LD_INT 1
7840: ARRAY
7841: PPUSH
7842: CALL 40054 0 2
7846: ST_TO_ADDR
7847: GO 7814
7849: POP
7850: POP
// result := tmp ;
7851: LD_ADDR_VAR 0 5
7855: PUSH
7856: LD_VAR 0 8
7860: ST_TO_ADDR
// end ; end ;
7861: LD_VAR 0 5
7865: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7866: LD_INT 0
7868: PPUSH
7869: PPUSH
7870: PPUSH
7871: PPUSH
// if not list then
7872: LD_VAR 0 3
7876: NOT
7877: IFFALSE 7881
// exit ;
7879: GO 8271
// result := [ ] ;
7881: LD_ADDR_VAR 0 6
7885: PUSH
7886: EMPTY
7887: ST_TO_ADDR
// for i in list do
7888: LD_ADDR_VAR 0 7
7892: PUSH
7893: LD_VAR 0 3
7897: PUSH
7898: FOR_IN
7899: IFFALSE 8101
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7901: LD_ADDR_VAR 0 9
7905: PUSH
7906: LD_VAR 0 7
7910: PPUSH
7911: LD_VAR 0 1
7915: PPUSH
7916: LD_VAR 0 2
7920: PPUSH
7921: CALL_OW 297
7925: ST_TO_ADDR
// if not result then
7926: LD_VAR 0 6
7930: NOT
7931: IFFALSE 7957
// result := [ [ i , tmp ] ] else
7933: LD_ADDR_VAR 0 6
7937: PUSH
7938: LD_VAR 0 7
7942: PUSH
7943: LD_VAR 0 9
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: ST_TO_ADDR
7955: GO 8099
// begin if result [ result ] [ 2 ] <= tmp then
7957: LD_VAR 0 6
7961: PUSH
7962: LD_VAR 0 6
7966: ARRAY
7967: PUSH
7968: LD_INT 2
7970: ARRAY
7971: PUSH
7972: LD_VAR 0 9
7976: LESSEQUAL
7977: IFFALSE 8019
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7979: LD_ADDR_VAR 0 6
7983: PUSH
7984: LD_VAR 0 6
7988: PPUSH
7989: LD_VAR 0 6
7993: PUSH
7994: LD_INT 1
7996: PLUS
7997: PPUSH
7998: LD_VAR 0 7
8002: PUSH
8003: LD_VAR 0 9
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PPUSH
8012: CALL_OW 2
8016: ST_TO_ADDR
8017: GO 8099
// for j := 1 to result do
8019: LD_ADDR_VAR 0 8
8023: PUSH
8024: DOUBLE
8025: LD_INT 1
8027: DEC
8028: ST_TO_ADDR
8029: LD_VAR 0 6
8033: PUSH
8034: FOR_TO
8035: IFFALSE 8097
// begin if tmp < result [ j ] [ 2 ] then
8037: LD_VAR 0 9
8041: PUSH
8042: LD_VAR 0 6
8046: PUSH
8047: LD_VAR 0 8
8051: ARRAY
8052: PUSH
8053: LD_INT 2
8055: ARRAY
8056: LESS
8057: IFFALSE 8095
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8059: LD_ADDR_VAR 0 6
8063: PUSH
8064: LD_VAR 0 6
8068: PPUSH
8069: LD_VAR 0 8
8073: PPUSH
8074: LD_VAR 0 7
8078: PUSH
8079: LD_VAR 0 9
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PPUSH
8088: CALL_OW 2
8092: ST_TO_ADDR
// break ;
8093: GO 8097
// end ; end ;
8095: GO 8034
8097: POP
8098: POP
// end ; end ;
8099: GO 7898
8101: POP
8102: POP
// if result and not asc then
8103: LD_VAR 0 6
8107: IFFALSE 8116
8109: PUSH
8110: LD_VAR 0 4
8114: NOT
8115: AND
8116: IFFALSE 8191
// begin tmp := result ;
8118: LD_ADDR_VAR 0 9
8122: PUSH
8123: LD_VAR 0 6
8127: ST_TO_ADDR
// for i = tmp downto 1 do
8128: LD_ADDR_VAR 0 7
8132: PUSH
8133: DOUBLE
8134: LD_VAR 0 9
8138: INC
8139: ST_TO_ADDR
8140: LD_INT 1
8142: PUSH
8143: FOR_DOWNTO
8144: IFFALSE 8189
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8146: LD_ADDR_VAR 0 6
8150: PUSH
8151: LD_VAR 0 6
8155: PPUSH
8156: LD_VAR 0 9
8160: PUSH
8161: LD_VAR 0 7
8165: MINUS
8166: PUSH
8167: LD_INT 1
8169: PLUS
8170: PPUSH
8171: LD_VAR 0 9
8175: PUSH
8176: LD_VAR 0 7
8180: ARRAY
8181: PPUSH
8182: CALL_OW 1
8186: ST_TO_ADDR
8187: GO 8143
8189: POP
8190: POP
// end ; tmp := [ ] ;
8191: LD_ADDR_VAR 0 9
8195: PUSH
8196: EMPTY
8197: ST_TO_ADDR
// if mode then
8198: LD_VAR 0 5
8202: IFFALSE 8271
// begin for i = 1 to result do
8204: LD_ADDR_VAR 0 7
8208: PUSH
8209: DOUBLE
8210: LD_INT 1
8212: DEC
8213: ST_TO_ADDR
8214: LD_VAR 0 6
8218: PUSH
8219: FOR_TO
8220: IFFALSE 8259
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8222: LD_ADDR_VAR 0 9
8226: PUSH
8227: LD_VAR 0 9
8231: PPUSH
8232: LD_VAR 0 7
8236: PPUSH
8237: LD_VAR 0 6
8241: PUSH
8242: LD_VAR 0 7
8246: ARRAY
8247: PUSH
8248: LD_INT 1
8250: ARRAY
8251: PPUSH
8252: CALL_OW 1
8256: ST_TO_ADDR
8257: GO 8219
8259: POP
8260: POP
// result := tmp ;
8261: LD_ADDR_VAR 0 6
8265: PUSH
8266: LD_VAR 0 9
8270: ST_TO_ADDR
// end ; end ;
8271: LD_VAR 0 6
8275: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8276: LD_INT 0
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8284: LD_ADDR_VAR 0 5
8288: PUSH
8289: LD_INT 0
8291: PUSH
8292: LD_INT 0
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: EMPTY
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: ST_TO_ADDR
// if not x or not y then
8306: LD_VAR 0 2
8310: NOT
8311: IFTRUE 8320
8313: PUSH
8314: LD_VAR 0 3
8318: NOT
8319: OR
8320: IFFALSE 8324
// exit ;
8322: GO 9980
// if not range then
8324: LD_VAR 0 4
8328: NOT
8329: IFFALSE 8339
// range := 10 ;
8331: LD_ADDR_VAR 0 4
8335: PUSH
8336: LD_INT 10
8338: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8339: LD_ADDR_VAR 0 8
8343: PUSH
8344: LD_INT 81
8346: PUSH
8347: LD_VAR 0 1
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PUSH
8356: LD_INT 92
8358: PUSH
8359: LD_VAR 0 2
8363: PUSH
8364: LD_VAR 0 3
8368: PUSH
8369: LD_VAR 0 4
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 21
8385: PUSH
8386: LD_INT 3
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: PPUSH
8402: CALL_OW 69
8406: ST_TO_ADDR
// if not tmp then
8407: LD_VAR 0 8
8411: NOT
8412: IFFALSE 8416
// exit ;
8414: GO 9980
// for i in tmp do
8416: LD_ADDR_VAR 0 6
8420: PUSH
8421: LD_VAR 0 8
8425: PUSH
8426: FOR_IN
8427: IFFALSE 9955
// begin points := [ 0 , 0 , 0 ] ;
8429: LD_ADDR_VAR 0 9
8433: PUSH
8434: LD_INT 0
8436: PUSH
8437: LD_INT 0
8439: PUSH
8440: LD_INT 0
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: ST_TO_ADDR
// bpoints := 1 ;
8448: LD_ADDR_VAR 0 10
8452: PUSH
8453: LD_INT 1
8455: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8456: LD_VAR 0 6
8460: PPUSH
8461: CALL_OW 247
8465: PUSH
8466: LD_INT 1
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 9056
8474: POP
// begin if GetClass ( i ) = 1 then
8475: LD_VAR 0 6
8479: PPUSH
8480: CALL_OW 257
8484: PUSH
8485: LD_INT 1
8487: EQUAL
8488: IFFALSE 8509
// points := [ 10 , 5 , 3 ] ;
8490: LD_ADDR_VAR 0 9
8494: PUSH
8495: LD_INT 10
8497: PUSH
8498: LD_INT 5
8500: PUSH
8501: LD_INT 3
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8509: LD_VAR 0 6
8513: PPUSH
8514: CALL_OW 257
8518: PUSH
8519: LD_INT 2
8521: PUSH
8522: LD_INT 3
8524: PUSH
8525: LD_INT 4
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: LIST
8532: IN
8533: IFFALSE 8554
// points := [ 3 , 2 , 1 ] ;
8535: LD_ADDR_VAR 0 9
8539: PUSH
8540: LD_INT 3
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: LD_INT 1
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: LIST
8553: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8554: LD_VAR 0 6
8558: PPUSH
8559: CALL_OW 257
8563: PUSH
8564: LD_INT 5
8566: EQUAL
8567: IFFALSE 8588
// points := [ 130 , 5 , 2 ] ;
8569: LD_ADDR_VAR 0 9
8573: PUSH
8574: LD_INT 130
8576: PUSH
8577: LD_INT 5
8579: PUSH
8580: LD_INT 2
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8588: LD_VAR 0 6
8592: PPUSH
8593: CALL_OW 257
8597: PUSH
8598: LD_INT 8
8600: EQUAL
8601: IFFALSE 8622
// points := [ 35 , 35 , 30 ] ;
8603: LD_ADDR_VAR 0 9
8607: PUSH
8608: LD_INT 35
8610: PUSH
8611: LD_INT 35
8613: PUSH
8614: LD_INT 30
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8622: LD_VAR 0 6
8626: PPUSH
8627: CALL_OW 257
8631: PUSH
8632: LD_INT 9
8634: EQUAL
8635: IFFALSE 8656
// points := [ 20 , 55 , 40 ] ;
8637: LD_ADDR_VAR 0 9
8641: PUSH
8642: LD_INT 20
8644: PUSH
8645: LD_INT 55
8647: PUSH
8648: LD_INT 40
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8656: LD_VAR 0 6
8660: PPUSH
8661: CALL_OW 257
8665: PUSH
8666: LD_INT 12
8668: PUSH
8669: LD_INT 16
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: IN
8676: IFFALSE 8697
// points := [ 5 , 3 , 2 ] ;
8678: LD_ADDR_VAR 0 9
8682: PUSH
8683: LD_INT 5
8685: PUSH
8686: LD_INT 3
8688: PUSH
8689: LD_INT 2
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8697: LD_VAR 0 6
8701: PPUSH
8702: CALL_OW 257
8706: PUSH
8707: LD_INT 17
8709: EQUAL
8710: IFFALSE 8731
// points := [ 100 , 50 , 75 ] ;
8712: LD_ADDR_VAR 0 9
8716: PUSH
8717: LD_INT 100
8719: PUSH
8720: LD_INT 50
8722: PUSH
8723: LD_INT 75
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: LIST
8730: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8731: LD_VAR 0 6
8735: PPUSH
8736: CALL_OW 257
8740: PUSH
8741: LD_INT 15
8743: EQUAL
8744: IFFALSE 8765
// points := [ 10 , 5 , 3 ] ;
8746: LD_ADDR_VAR 0 9
8750: PUSH
8751: LD_INT 10
8753: PUSH
8754: LD_INT 5
8756: PUSH
8757: LD_INT 3
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: LIST
8764: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8765: LD_VAR 0 6
8769: PPUSH
8770: CALL_OW 257
8774: PUSH
8775: LD_INT 14
8777: EQUAL
8778: IFFALSE 8799
// points := [ 10 , 0 , 0 ] ;
8780: LD_ADDR_VAR 0 9
8784: PUSH
8785: LD_INT 10
8787: PUSH
8788: LD_INT 0
8790: PUSH
8791: LD_INT 0
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8799: LD_VAR 0 6
8803: PPUSH
8804: CALL_OW 257
8808: PUSH
8809: LD_INT 11
8811: EQUAL
8812: IFFALSE 8833
// points := [ 30 , 10 , 5 ] ;
8814: LD_ADDR_VAR 0 9
8818: PUSH
8819: LD_INT 30
8821: PUSH
8822: LD_INT 10
8824: PUSH
8825: LD_INT 5
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: LIST
8832: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_INT 5
8840: PPUSH
8841: CALL_OW 321
8845: PUSH
8846: LD_INT 2
8848: EQUAL
8849: IFFALSE 8866
// bpoints := bpoints * 1.8 ;
8851: LD_ADDR_VAR 0 10
8855: PUSH
8856: LD_VAR 0 10
8860: PUSH
8861: LD_REAL  1.80000000000000E+0000
8864: MUL
8865: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8866: LD_VAR 0 6
8870: PPUSH
8871: CALL_OW 257
8875: PUSH
8876: LD_INT 1
8878: PUSH
8879: LD_INT 2
8881: PUSH
8882: LD_INT 3
8884: PUSH
8885: LD_INT 4
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: IN
8894: IFFALSE 8914
8896: PUSH
8897: LD_VAR 0 1
8901: PPUSH
8902: LD_INT 51
8904: PPUSH
8905: CALL_OW 321
8909: PUSH
8910: LD_INT 2
8912: EQUAL
8913: AND
8914: IFFALSE 8931
// bpoints := bpoints * 1.2 ;
8916: LD_ADDR_VAR 0 10
8920: PUSH
8921: LD_VAR 0 10
8925: PUSH
8926: LD_REAL  1.20000000000000E+0000
8929: MUL
8930: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8931: LD_VAR 0 6
8935: PPUSH
8936: CALL_OW 257
8940: PUSH
8941: LD_INT 5
8943: PUSH
8944: LD_INT 7
8946: PUSH
8947: LD_INT 9
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: LIST
8954: IN
8955: IFFALSE 8975
8957: PUSH
8958: LD_VAR 0 1
8962: PPUSH
8963: LD_INT 52
8965: PPUSH
8966: CALL_OW 321
8970: PUSH
8971: LD_INT 2
8973: EQUAL
8974: AND
8975: IFFALSE 8992
// bpoints := bpoints * 1.5 ;
8977: LD_ADDR_VAR 0 10
8981: PUSH
8982: LD_VAR 0 10
8986: PUSH
8987: LD_REAL  1.50000000000000E+0000
8990: MUL
8991: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8992: LD_VAR 0 1
8996: PPUSH
8997: LD_INT 66
8999: PPUSH
9000: CALL_OW 321
9004: PUSH
9005: LD_INT 2
9007: EQUAL
9008: IFFALSE 9025
// bpoints := bpoints * 1.1 ;
9010: LD_ADDR_VAR 0 10
9014: PUSH
9015: LD_VAR 0 10
9019: PUSH
9020: LD_REAL  1.10000000000000E+0000
9023: MUL
9024: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9025: LD_ADDR_VAR 0 10
9029: PUSH
9030: LD_VAR 0 10
9034: PUSH
9035: LD_VAR 0 6
9039: PPUSH
9040: LD_INT 1
9042: PPUSH
9043: CALL_OW 259
9047: PUSH
9048: LD_REAL  1.15000000000000E+0000
9051: MUL
9052: MUL
9053: ST_TO_ADDR
// end ; unit_vehicle :
9054: GO 9884
9056: LD_INT 2
9058: DOUBLE
9059: EQUAL
9060: IFTRUE 9064
9062: GO 9872
9064: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9065: LD_VAR 0 6
9069: PPUSH
9070: CALL_OW 264
9074: PUSH
9075: LD_INT 2
9077: PUSH
9078: LD_INT 42
9080: PUSH
9081: LD_INT 24
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: IN
9089: IFFALSE 9110
// points := [ 25 , 5 , 3 ] ;
9091: LD_ADDR_VAR 0 9
9095: PUSH
9096: LD_INT 25
9098: PUSH
9099: LD_INT 5
9101: PUSH
9102: LD_INT 3
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: LIST
9109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9110: LD_VAR 0 6
9114: PPUSH
9115: CALL_OW 264
9119: PUSH
9120: LD_INT 4
9122: PUSH
9123: LD_INT 43
9125: PUSH
9126: LD_INT 25
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: IN
9134: IFFALSE 9155
// points := [ 40 , 15 , 5 ] ;
9136: LD_ADDR_VAR 0 9
9140: PUSH
9141: LD_INT 40
9143: PUSH
9144: LD_INT 15
9146: PUSH
9147: LD_INT 5
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: LIST
9154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9155: LD_VAR 0 6
9159: PPUSH
9160: CALL_OW 264
9164: PUSH
9165: LD_INT 3
9167: PUSH
9168: LD_INT 23
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: IN
9175: IFFALSE 9196
// points := [ 7 , 25 , 8 ] ;
9177: LD_ADDR_VAR 0 9
9181: PUSH
9182: LD_INT 7
9184: PUSH
9185: LD_INT 25
9187: PUSH
9188: LD_INT 8
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9196: LD_VAR 0 6
9200: PPUSH
9201: CALL_OW 264
9205: PUSH
9206: LD_INT 5
9208: PUSH
9209: LD_INT 27
9211: PUSH
9212: LD_INT 44
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: LIST
9219: IN
9220: IFFALSE 9241
// points := [ 14 , 50 , 16 ] ;
9222: LD_ADDR_VAR 0 9
9226: PUSH
9227: LD_INT 14
9229: PUSH
9230: LD_INT 50
9232: PUSH
9233: LD_INT 16
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: LIST
9240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9241: LD_VAR 0 6
9245: PPUSH
9246: CALL_OW 264
9250: PUSH
9251: LD_INT 6
9253: PUSH
9254: LD_INT 46
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: IN
9261: IFFALSE 9282
// points := [ 32 , 120 , 70 ] ;
9263: LD_ADDR_VAR 0 9
9267: PUSH
9268: LD_INT 32
9270: PUSH
9271: LD_INT 120
9273: PUSH
9274: LD_INT 70
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9282: LD_VAR 0 6
9286: PPUSH
9287: CALL_OW 264
9291: PUSH
9292: LD_INT 7
9294: PUSH
9295: LD_INT 28
9297: PUSH
9298: LD_INT 45
9300: PUSH
9301: LD_INT 92
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: IN
9310: IFFALSE 9331
// points := [ 35 , 20 , 45 ] ;
9312: LD_ADDR_VAR 0 9
9316: PUSH
9317: LD_INT 35
9319: PUSH
9320: LD_INT 20
9322: PUSH
9323: LD_INT 45
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9331: LD_VAR 0 6
9335: PPUSH
9336: CALL_OW 264
9340: PUSH
9341: LD_INT 47
9343: PUSH
9344: EMPTY
9345: LIST
9346: IN
9347: IFFALSE 9368
// points := [ 67 , 45 , 75 ] ;
9349: LD_ADDR_VAR 0 9
9353: PUSH
9354: LD_INT 67
9356: PUSH
9357: LD_INT 45
9359: PUSH
9360: LD_INT 75
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9368: LD_VAR 0 6
9372: PPUSH
9373: CALL_OW 264
9377: PUSH
9378: LD_INT 26
9380: PUSH
9381: EMPTY
9382: LIST
9383: IN
9384: IFFALSE 9405
// points := [ 120 , 30 , 80 ] ;
9386: LD_ADDR_VAR 0 9
9390: PUSH
9391: LD_INT 120
9393: PUSH
9394: LD_INT 30
9396: PUSH
9397: LD_INT 80
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9405: LD_VAR 0 6
9409: PPUSH
9410: CALL_OW 264
9414: PUSH
9415: LD_INT 22
9417: PUSH
9418: EMPTY
9419: LIST
9420: IN
9421: IFFALSE 9442
// points := [ 40 , 1 , 1 ] ;
9423: LD_ADDR_VAR 0 9
9427: PUSH
9428: LD_INT 40
9430: PUSH
9431: LD_INT 1
9433: PUSH
9434: LD_INT 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: LIST
9441: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9442: LD_VAR 0 6
9446: PPUSH
9447: CALL_OW 264
9451: PUSH
9452: LD_INT 29
9454: PUSH
9455: EMPTY
9456: LIST
9457: IN
9458: IFFALSE 9479
// points := [ 70 , 200 , 400 ] ;
9460: LD_ADDR_VAR 0 9
9464: PUSH
9465: LD_INT 70
9467: PUSH
9468: LD_INT 200
9470: PUSH
9471: LD_INT 400
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: LIST
9478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9479: LD_VAR 0 6
9483: PPUSH
9484: CALL_OW 264
9488: PUSH
9489: LD_INT 14
9491: PUSH
9492: LD_INT 53
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: IN
9499: IFFALSE 9520
// points := [ 40 , 10 , 20 ] ;
9501: LD_ADDR_VAR 0 9
9505: PUSH
9506: LD_INT 40
9508: PUSH
9509: LD_INT 10
9511: PUSH
9512: LD_INT 20
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: LIST
9519: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9520: LD_VAR 0 6
9524: PPUSH
9525: CALL_OW 264
9529: PUSH
9530: LD_INT 9
9532: PUSH
9533: EMPTY
9534: LIST
9535: IN
9536: IFFALSE 9557
// points := [ 5 , 70 , 20 ] ;
9538: LD_ADDR_VAR 0 9
9542: PUSH
9543: LD_INT 5
9545: PUSH
9546: LD_INT 70
9548: PUSH
9549: LD_INT 20
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9557: LD_VAR 0 6
9561: PPUSH
9562: CALL_OW 264
9566: PUSH
9567: LD_INT 10
9569: PUSH
9570: EMPTY
9571: LIST
9572: IN
9573: IFFALSE 9594
// points := [ 35 , 110 , 70 ] ;
9575: LD_ADDR_VAR 0 9
9579: PUSH
9580: LD_INT 35
9582: PUSH
9583: LD_INT 110
9585: PUSH
9586: LD_INT 70
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9594: LD_VAR 0 6
9598: PPUSH
9599: CALL_OW 265
9603: PUSH
9604: LD_INT 25
9606: EQUAL
9607: IFFALSE 9628
// points := [ 80 , 65 , 100 ] ;
9609: LD_ADDR_VAR 0 9
9613: PUSH
9614: LD_INT 80
9616: PUSH
9617: LD_INT 65
9619: PUSH
9620: LD_INT 100
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9628: LD_VAR 0 6
9632: PPUSH
9633: CALL_OW 263
9637: PUSH
9638: LD_INT 1
9640: EQUAL
9641: IFFALSE 9676
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9643: LD_ADDR_VAR 0 10
9647: PUSH
9648: LD_VAR 0 10
9652: PUSH
9653: LD_VAR 0 6
9657: PPUSH
9658: CALL_OW 311
9662: PPUSH
9663: LD_INT 3
9665: PPUSH
9666: CALL_OW 259
9670: PUSH
9671: LD_INT 4
9673: MUL
9674: MUL
9675: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9676: LD_VAR 0 6
9680: PPUSH
9681: CALL_OW 263
9685: PUSH
9686: LD_INT 2
9688: EQUAL
9689: IFFALSE 9740
// begin j := IsControledBy ( i ) ;
9691: LD_ADDR_VAR 0 7
9695: PUSH
9696: LD_VAR 0 6
9700: PPUSH
9701: CALL_OW 312
9705: ST_TO_ADDR
// if j then
9706: LD_VAR 0 7
9710: IFFALSE 9740
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9712: LD_ADDR_VAR 0 10
9716: PUSH
9717: LD_VAR 0 10
9721: PUSH
9722: LD_VAR 0 7
9726: PPUSH
9727: LD_INT 3
9729: PPUSH
9730: CALL_OW 259
9734: PUSH
9735: LD_INT 3
9737: MUL
9738: MUL
9739: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9740: LD_VAR 0 6
9744: PPUSH
9745: CALL_OW 264
9749: PUSH
9750: LD_INT 5
9752: PUSH
9753: LD_INT 6
9755: PUSH
9756: LD_INT 46
9758: PUSH
9759: LD_INT 44
9761: PUSH
9762: LD_INT 47
9764: PUSH
9765: LD_INT 45
9767: PUSH
9768: LD_INT 28
9770: PUSH
9771: LD_INT 7
9773: PUSH
9774: LD_INT 27
9776: PUSH
9777: LD_INT 29
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: IN
9792: IFFALSE 9812
9794: PUSH
9795: LD_VAR 0 1
9799: PPUSH
9800: LD_INT 52
9802: PPUSH
9803: CALL_OW 321
9807: PUSH
9808: LD_INT 2
9810: EQUAL
9811: AND
9812: IFFALSE 9829
// bpoints := bpoints * 1.2 ;
9814: LD_ADDR_VAR 0 10
9818: PUSH
9819: LD_VAR 0 10
9823: PUSH
9824: LD_REAL  1.20000000000000E+0000
9827: MUL
9828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9829: LD_VAR 0 6
9833: PPUSH
9834: CALL_OW 264
9838: PUSH
9839: LD_INT 6
9841: PUSH
9842: LD_INT 46
9844: PUSH
9845: LD_INT 47
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: IN
9853: IFFALSE 9870
// bpoints := bpoints * 1.2 ;
9855: LD_ADDR_VAR 0 10
9859: PUSH
9860: LD_VAR 0 10
9864: PUSH
9865: LD_REAL  1.20000000000000E+0000
9868: MUL
9869: ST_TO_ADDR
// end ; unit_building :
9870: GO 9884
9872: LD_INT 3
9874: DOUBLE
9875: EQUAL
9876: IFTRUE 9880
9878: GO 9883
9880: POP
// ; end ;
9881: GO 9884
9883: POP
// for j = 1 to 3 do
9884: LD_ADDR_VAR 0 7
9888: PUSH
9889: DOUBLE
9890: LD_INT 1
9892: DEC
9893: ST_TO_ADDR
9894: LD_INT 3
9896: PUSH
9897: FOR_TO
9898: IFFALSE 9951
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9900: LD_ADDR_VAR 0 5
9904: PUSH
9905: LD_VAR 0 5
9909: PPUSH
9910: LD_VAR 0 7
9914: PPUSH
9915: LD_VAR 0 5
9919: PUSH
9920: LD_VAR 0 7
9924: ARRAY
9925: PUSH
9926: LD_VAR 0 9
9930: PUSH
9931: LD_VAR 0 7
9935: ARRAY
9936: PUSH
9937: LD_VAR 0 10
9941: MUL
9942: PLUS
9943: PPUSH
9944: CALL_OW 1
9948: ST_TO_ADDR
9949: GO 9897
9951: POP
9952: POP
// end ;
9953: GO 8426
9955: POP
9956: POP
// result := Replace ( result , 4 , tmp ) ;
9957: LD_ADDR_VAR 0 5
9961: PUSH
9962: LD_VAR 0 5
9966: PPUSH
9967: LD_INT 4
9969: PPUSH
9970: LD_VAR 0 8
9974: PPUSH
9975: CALL_OW 1
9979: ST_TO_ADDR
// end ;
9980: LD_VAR 0 5
9984: RET
// export function DangerAtRange ( unit , range ) ; begin
9985: LD_INT 0
9987: PPUSH
// if not unit then
9988: LD_VAR 0 1
9992: NOT
9993: IFFALSE 9997
// exit ;
9995: GO 10042
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9997: LD_ADDR_VAR 0 3
10001: PUSH
10002: LD_VAR 0 1
10006: PPUSH
10007: CALL_OW 255
10011: PPUSH
10012: LD_VAR 0 1
10016: PPUSH
10017: CALL_OW 250
10021: PPUSH
10022: LD_VAR 0 1
10026: PPUSH
10027: CALL_OW 251
10031: PPUSH
10032: LD_VAR 0 2
10036: PPUSH
10037: CALL 8276 0 4
10041: ST_TO_ADDR
// end ;
10042: LD_VAR 0 3
10046: RET
// export function DangerInArea ( side , area ) ; begin
10047: LD_INT 0
10049: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10050: LD_ADDR_VAR 0 3
10054: PUSH
10055: LD_VAR 0 2
10059: PPUSH
10060: LD_INT 81
10062: PUSH
10063: LD_VAR 0 1
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PPUSH
10072: CALL_OW 70
10076: ST_TO_ADDR
// end ;
10077: LD_VAR 0 3
10081: RET
// export function IsExtension ( b ) ; begin
10082: LD_INT 0
10084: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10085: LD_ADDR_VAR 0 2
10089: PUSH
10090: LD_VAR 0 1
10094: PUSH
10095: LD_INT 23
10097: PUSH
10098: LD_INT 20
10100: PUSH
10101: LD_INT 22
10103: PUSH
10104: LD_INT 17
10106: PUSH
10107: LD_INT 24
10109: PUSH
10110: LD_INT 21
10112: PUSH
10113: LD_INT 19
10115: PUSH
10116: LD_INT 16
10118: PUSH
10119: LD_INT 25
10121: PUSH
10122: LD_INT 18
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: IN
10137: ST_TO_ADDR
// end ;
10138: LD_VAR 0 2
10142: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10143: LD_INT 0
10145: PPUSH
10146: PPUSH
10147: PPUSH
// result := [ ] ;
10148: LD_ADDR_VAR 0 4
10152: PUSH
10153: EMPTY
10154: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10155: LD_ADDR_VAR 0 5
10159: PUSH
10160: LD_VAR 0 2
10164: PPUSH
10165: LD_INT 21
10167: PUSH
10168: LD_INT 3
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PPUSH
10175: CALL_OW 70
10179: ST_TO_ADDR
// if not tmp then
10180: LD_VAR 0 5
10184: NOT
10185: IFFALSE 10189
// exit ;
10187: GO 10253
// if checkLink then
10189: LD_VAR 0 3
10193: IFFALSE 10243
// begin for i in tmp do
10195: LD_ADDR_VAR 0 6
10199: PUSH
10200: LD_VAR 0 5
10204: PUSH
10205: FOR_IN
10206: IFFALSE 10241
// if GetBase ( i ) <> base then
10208: LD_VAR 0 6
10212: PPUSH
10213: CALL_OW 274
10217: PUSH
10218: LD_VAR 0 1
10222: NONEQUAL
10223: IFFALSE 10239
// ComLinkToBase ( base , i ) ;
10225: LD_VAR 0 1
10229: PPUSH
10230: LD_VAR 0 6
10234: PPUSH
10235: CALL_OW 169
10239: GO 10205
10241: POP
10242: POP
// end ; result := tmp ;
10243: LD_ADDR_VAR 0 4
10247: PUSH
10248: LD_VAR 0 5
10252: ST_TO_ADDR
// end ;
10253: LD_VAR 0 4
10257: RET
// export function ComComplete ( units , b ) ; var i ; begin
10258: LD_INT 0
10260: PPUSH
10261: PPUSH
// if not units then
10262: LD_VAR 0 1
10266: NOT
10267: IFFALSE 10271
// exit ;
10269: GO 10361
// for i in units do
10271: LD_ADDR_VAR 0 4
10275: PUSH
10276: LD_VAR 0 1
10280: PUSH
10281: FOR_IN
10282: IFFALSE 10359
// if BuildingStatus ( b ) = bs_build then
10284: LD_VAR 0 2
10288: PPUSH
10289: CALL_OW 461
10293: PUSH
10294: LD_INT 1
10296: EQUAL
10297: IFFALSE 10357
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10299: LD_VAR 0 4
10303: PPUSH
10304: LD_STRING h
10306: PUSH
10307: LD_VAR 0 2
10311: PPUSH
10312: CALL_OW 250
10316: PUSH
10317: LD_VAR 0 2
10321: PPUSH
10322: CALL_OW 251
10326: PUSH
10327: LD_VAR 0 2
10331: PUSH
10332: LD_INT 0
10334: PUSH
10335: LD_INT 0
10337: PUSH
10338: LD_INT 0
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: PUSH
10350: EMPTY
10351: LIST
10352: PPUSH
10353: CALL_OW 446
10357: GO 10281
10359: POP
10360: POP
// end ;
10361: LD_VAR 0 3
10365: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10366: LD_INT 0
10368: PPUSH
10369: PPUSH
10370: PPUSH
10371: PPUSH
10372: PPUSH
10373: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10374: LD_VAR 0 1
10378: NOT
10379: IFTRUE 10396
10381: PUSH
10382: LD_VAR 0 1
10386: PPUSH
10387: CALL_OW 263
10391: PUSH
10392: LD_INT 2
10394: NONEQUAL
10395: OR
10396: IFFALSE 10400
// exit ;
10398: GO 10716
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10400: LD_ADDR_VAR 0 6
10404: PUSH
10405: LD_INT 22
10407: PUSH
10408: LD_VAR 0 1
10412: PPUSH
10413: CALL_OW 255
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 2
10424: PUSH
10425: LD_INT 30
10427: PUSH
10428: LD_INT 36
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 34
10437: PUSH
10438: LD_INT 31
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: CALL_OW 69
10458: ST_TO_ADDR
// if not tmp then
10459: LD_VAR 0 6
10463: NOT
10464: IFFALSE 10468
// exit ;
10466: GO 10716
// result := [ ] ;
10468: LD_ADDR_VAR 0 2
10472: PUSH
10473: EMPTY
10474: ST_TO_ADDR
// for i in tmp do
10475: LD_ADDR_VAR 0 3
10479: PUSH
10480: LD_VAR 0 6
10484: PUSH
10485: FOR_IN
10486: IFFALSE 10557
// begin t := UnitsInside ( i ) ;
10488: LD_ADDR_VAR 0 4
10492: PUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: CALL_OW 313
10502: ST_TO_ADDR
// if t then
10503: LD_VAR 0 4
10507: IFFALSE 10555
// for j in t do
10509: LD_ADDR_VAR 0 7
10513: PUSH
10514: LD_VAR 0 4
10518: PUSH
10519: FOR_IN
10520: IFFALSE 10553
// result := Replace ( result , result + 1 , j ) ;
10522: LD_ADDR_VAR 0 2
10526: PUSH
10527: LD_VAR 0 2
10531: PPUSH
10532: LD_VAR 0 2
10536: PUSH
10537: LD_INT 1
10539: PLUS
10540: PPUSH
10541: LD_VAR 0 7
10545: PPUSH
10546: CALL_OW 1
10550: ST_TO_ADDR
10551: GO 10519
10553: POP
10554: POP
// end ;
10555: GO 10485
10557: POP
10558: POP
// if not result then
10559: LD_VAR 0 2
10563: NOT
10564: IFFALSE 10568
// exit ;
10566: GO 10716
// mech := result [ 1 ] ;
10568: LD_ADDR_VAR 0 5
10572: PUSH
10573: LD_VAR 0 2
10577: PUSH
10578: LD_INT 1
10580: ARRAY
10581: ST_TO_ADDR
// if result > 1 then
10582: LD_VAR 0 2
10586: PUSH
10587: LD_INT 1
10589: GREATER
10590: IFFALSE 10702
// begin for i = 2 to result do
10592: LD_ADDR_VAR 0 3
10596: PUSH
10597: DOUBLE
10598: LD_INT 2
10600: DEC
10601: ST_TO_ADDR
10602: LD_VAR 0 2
10606: PUSH
10607: FOR_TO
10608: IFFALSE 10700
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10610: LD_ADDR_VAR 0 4
10614: PUSH
10615: LD_VAR 0 2
10619: PUSH
10620: LD_VAR 0 3
10624: ARRAY
10625: PPUSH
10626: LD_INT 3
10628: PPUSH
10629: CALL_OW 259
10633: PUSH
10634: LD_VAR 0 2
10638: PUSH
10639: LD_VAR 0 3
10643: ARRAY
10644: PPUSH
10645: CALL_OW 432
10649: MINUS
10650: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10651: LD_VAR 0 4
10655: PUSH
10656: LD_VAR 0 5
10660: PPUSH
10661: LD_INT 3
10663: PPUSH
10664: CALL_OW 259
10668: PUSH
10669: LD_VAR 0 5
10673: PPUSH
10674: CALL_OW 432
10678: MINUS
10679: GREATEREQUAL
10680: IFFALSE 10698
// mech := result [ i ] ;
10682: LD_ADDR_VAR 0 5
10686: PUSH
10687: LD_VAR 0 2
10691: PUSH
10692: LD_VAR 0 3
10696: ARRAY
10697: ST_TO_ADDR
// end ;
10698: GO 10607
10700: POP
10701: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10702: LD_VAR 0 1
10706: PPUSH
10707: LD_VAR 0 5
10711: PPUSH
10712: CALL_OW 135
// end ;
10716: LD_VAR 0 2
10720: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10721: LD_INT 0
10723: PPUSH
10724: PPUSH
10725: PPUSH
10726: PPUSH
10727: PPUSH
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
10732: PPUSH
10733: PPUSH
10734: PPUSH
10735: PPUSH
// result := [ ] ;
10736: LD_ADDR_VAR 0 7
10740: PUSH
10741: EMPTY
10742: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 266
10752: PUSH
10753: LD_INT 0
10755: PUSH
10756: LD_INT 1
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: IN
10763: NOT
10764: IFFALSE 10768
// exit ;
10766: GO 12408
// if name then
10768: LD_VAR 0 3
10772: IFFALSE 10788
// SetBName ( base_dep , name ) ;
10774: LD_VAR 0 1
10778: PPUSH
10779: LD_VAR 0 3
10783: PPUSH
10784: CALL_OW 500
// base := GetBase ( base_dep ) ;
10788: LD_ADDR_VAR 0 15
10792: PUSH
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 274
10802: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10803: LD_ADDR_VAR 0 16
10807: PUSH
10808: LD_VAR 0 1
10812: PPUSH
10813: CALL_OW 255
10817: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10818: LD_ADDR_VAR 0 17
10822: PUSH
10823: LD_VAR 0 1
10827: PPUSH
10828: CALL_OW 248
10832: ST_TO_ADDR
// if sources then
10833: LD_VAR 0 5
10837: IFFALSE 10884
// for i = 1 to 3 do
10839: LD_ADDR_VAR 0 8
10843: PUSH
10844: DOUBLE
10845: LD_INT 1
10847: DEC
10848: ST_TO_ADDR
10849: LD_INT 3
10851: PUSH
10852: FOR_TO
10853: IFFALSE 10882
// AddResourceType ( base , i , sources [ i ] ) ;
10855: LD_VAR 0 15
10859: PPUSH
10860: LD_VAR 0 8
10864: PPUSH
10865: LD_VAR 0 5
10869: PUSH
10870: LD_VAR 0 8
10874: ARRAY
10875: PPUSH
10876: CALL_OW 276
10880: GO 10852
10882: POP
10883: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10884: LD_ADDR_VAR 0 18
10888: PUSH
10889: LD_VAR 0 15
10893: PPUSH
10894: LD_VAR 0 2
10898: PPUSH
10899: LD_INT 1
10901: PPUSH
10902: CALL 10143 0 3
10906: ST_TO_ADDR
// InitHc ;
10907: CALL_OW 19
// InitUc ;
10911: CALL_OW 18
// uc_side := side ;
10915: LD_ADDR_OWVAR 20
10919: PUSH
10920: LD_VAR 0 16
10924: ST_TO_ADDR
// uc_nation := nation ;
10925: LD_ADDR_OWVAR 21
10929: PUSH
10930: LD_VAR 0 17
10934: ST_TO_ADDR
// if buildings then
10935: LD_VAR 0 18
10939: IFFALSE 12267
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10941: LD_ADDR_VAR 0 19
10945: PUSH
10946: LD_VAR 0 18
10950: PPUSH
10951: LD_INT 2
10953: PUSH
10954: LD_INT 30
10956: PUSH
10957: LD_INT 29
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 30
10966: PUSH
10967: LD_INT 30
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: LIST
10978: PPUSH
10979: CALL_OW 72
10983: ST_TO_ADDR
// if tmp then
10984: LD_VAR 0 19
10988: IFFALSE 11036
// for i in tmp do
10990: LD_ADDR_VAR 0 8
10994: PUSH
10995: LD_VAR 0 19
10999: PUSH
11000: FOR_IN
11001: IFFALSE 11034
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11003: LD_VAR 0 8
11007: PPUSH
11008: CALL_OW 250
11012: PPUSH
11013: LD_VAR 0 8
11017: PPUSH
11018: CALL_OW 251
11022: PPUSH
11023: LD_VAR 0 16
11027: PPUSH
11028: CALL_OW 441
11032: GO 11000
11034: POP
11035: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11036: LD_VAR 0 18
11040: PPUSH
11041: LD_INT 2
11043: PUSH
11044: LD_INT 30
11046: PUSH
11047: LD_INT 32
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 30
11056: PUSH
11057: LD_INT 33
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: LIST
11068: PPUSH
11069: CALL_OW 72
11073: IFFALSE 11161
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11075: LD_ADDR_VAR 0 8
11079: PUSH
11080: LD_VAR 0 18
11084: PPUSH
11085: LD_INT 2
11087: PUSH
11088: LD_INT 30
11090: PUSH
11091: LD_INT 32
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 30
11100: PUSH
11101: LD_INT 33
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: LIST
11112: PPUSH
11113: CALL_OW 72
11117: PUSH
11118: FOR_IN
11119: IFFALSE 11159
// begin if not GetBWeapon ( i ) then
11121: LD_VAR 0 8
11125: PPUSH
11126: CALL_OW 269
11130: NOT
11131: IFFALSE 11157
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11133: LD_VAR 0 8
11137: PPUSH
11138: LD_VAR 0 8
11142: PPUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL 12413 0 2
11152: PPUSH
11153: CALL_OW 431
// end ;
11157: GO 11118
11159: POP
11160: POP
// end ; for i = 1 to personel do
11161: LD_ADDR_VAR 0 8
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_VAR 0 6
11175: PUSH
11176: FOR_TO
11177: IFFALSE 12247
// begin if i > 4 then
11179: LD_VAR 0 8
11183: PUSH
11184: LD_INT 4
11186: GREATER
11187: IFFALSE 11191
// break ;
11189: GO 12247
// case i of 1 :
11191: LD_VAR 0 8
11195: PUSH
11196: LD_INT 1
11198: DOUBLE
11199: EQUAL
11200: IFTRUE 11204
11202: GO 11284
11204: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11205: LD_ADDR_VAR 0 12
11209: PUSH
11210: LD_VAR 0 18
11214: PPUSH
11215: LD_INT 22
11217: PUSH
11218: LD_VAR 0 16
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 58
11229: PUSH
11230: EMPTY
11231: LIST
11232: PUSH
11233: LD_INT 2
11235: PUSH
11236: LD_INT 30
11238: PUSH
11239: LD_INT 32
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 30
11248: PUSH
11249: LD_INT 4
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 30
11258: PUSH
11259: LD_INT 5
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: PPUSH
11277: CALL_OW 72
11281: ST_TO_ADDR
11282: GO 11506
11284: LD_INT 2
11286: DOUBLE
11287: EQUAL
11288: IFTRUE 11292
11290: GO 11354
11292: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11293: LD_ADDR_VAR 0 12
11297: PUSH
11298: LD_VAR 0 18
11302: PPUSH
11303: LD_INT 22
11305: PUSH
11306: LD_VAR 0 16
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 2
11317: PUSH
11318: LD_INT 30
11320: PUSH
11321: LD_INT 0
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 30
11330: PUSH
11331: LD_INT 1
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: CALL_OW 72
11351: ST_TO_ADDR
11352: GO 11506
11354: LD_INT 3
11356: DOUBLE
11357: EQUAL
11358: IFTRUE 11362
11360: GO 11424
11362: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11363: LD_ADDR_VAR 0 12
11367: PUSH
11368: LD_VAR 0 18
11372: PPUSH
11373: LD_INT 22
11375: PUSH
11376: LD_VAR 0 16
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 2
11387: PUSH
11388: LD_INT 30
11390: PUSH
11391: LD_INT 2
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: LD_INT 30
11400: PUSH
11401: LD_INT 3
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: LIST
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PPUSH
11417: CALL_OW 72
11421: ST_TO_ADDR
11422: GO 11506
11424: LD_INT 4
11426: DOUBLE
11427: EQUAL
11428: IFTRUE 11432
11430: GO 11505
11432: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11433: LD_ADDR_VAR 0 12
11437: PUSH
11438: LD_VAR 0 18
11442: PPUSH
11443: LD_INT 22
11445: PUSH
11446: LD_VAR 0 16
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 2
11457: PUSH
11458: LD_INT 30
11460: PUSH
11461: LD_INT 6
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 30
11470: PUSH
11471: LD_INT 7
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 30
11480: PUSH
11481: LD_INT 8
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PPUSH
11498: CALL_OW 72
11502: ST_TO_ADDR
11503: GO 11506
11505: POP
// if i = 1 then
11506: LD_VAR 0 8
11510: PUSH
11511: LD_INT 1
11513: EQUAL
11514: IFFALSE 11625
// begin tmp := [ ] ;
11516: LD_ADDR_VAR 0 19
11520: PUSH
11521: EMPTY
11522: ST_TO_ADDR
// for j in f do
11523: LD_ADDR_VAR 0 9
11527: PUSH
11528: LD_VAR 0 12
11532: PUSH
11533: FOR_IN
11534: IFFALSE 11607
// if GetBType ( j ) = b_bunker then
11536: LD_VAR 0 9
11540: PPUSH
11541: CALL_OW 266
11545: PUSH
11546: LD_INT 32
11548: EQUAL
11549: IFFALSE 11576
// tmp := Insert ( tmp , 1 , j ) else
11551: LD_ADDR_VAR 0 19
11555: PUSH
11556: LD_VAR 0 19
11560: PPUSH
11561: LD_INT 1
11563: PPUSH
11564: LD_VAR 0 9
11568: PPUSH
11569: CALL_OW 2
11573: ST_TO_ADDR
11574: GO 11605
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11576: LD_ADDR_VAR 0 19
11580: PUSH
11581: LD_VAR 0 19
11585: PPUSH
11586: LD_VAR 0 19
11590: PUSH
11591: LD_INT 1
11593: PLUS
11594: PPUSH
11595: LD_VAR 0 9
11599: PPUSH
11600: CALL_OW 2
11604: ST_TO_ADDR
11605: GO 11533
11607: POP
11608: POP
// if tmp then
11609: LD_VAR 0 19
11613: IFFALSE 11625
// f := tmp ;
11615: LD_ADDR_VAR 0 12
11619: PUSH
11620: LD_VAR 0 19
11624: ST_TO_ADDR
// end ; x := personel [ i ] ;
11625: LD_ADDR_VAR 0 13
11629: PUSH
11630: LD_VAR 0 6
11634: PUSH
11635: LD_VAR 0 8
11639: ARRAY
11640: ST_TO_ADDR
// if x = - 1 then
11641: LD_VAR 0 13
11645: PUSH
11646: LD_INT 1
11648: NEG
11649: EQUAL
11650: IFFALSE 11861
// begin for j in f do
11652: LD_ADDR_VAR 0 9
11656: PUSH
11657: LD_VAR 0 12
11661: PUSH
11662: FOR_IN
11663: IFFALSE 11857
// repeat InitHc ;
11665: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11669: LD_VAR 0 9
11673: PPUSH
11674: CALL_OW 266
11678: PUSH
11679: LD_INT 5
11681: EQUAL
11682: IFFALSE 11752
// begin if UnitsInside ( j ) < 3 then
11684: LD_VAR 0 9
11688: PPUSH
11689: CALL_OW 313
11693: PUSH
11694: LD_INT 3
11696: LESS
11697: IFFALSE 11733
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11699: LD_INT 0
11701: PPUSH
11702: LD_INT 5
11704: PUSH
11705: LD_INT 8
11707: PUSH
11708: LD_INT 9
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: LIST
11715: PUSH
11716: LD_VAR 0 17
11720: ARRAY
11721: PPUSH
11722: LD_VAR 0 4
11726: PPUSH
11727: CALL_OW 380
11731: GO 11750
// PrepareHuman ( false , i , skill ) ;
11733: LD_INT 0
11735: PPUSH
11736: LD_VAR 0 8
11740: PPUSH
11741: LD_VAR 0 4
11745: PPUSH
11746: CALL_OW 380
// end else
11750: GO 11769
// PrepareHuman ( false , i , skill ) ;
11752: LD_INT 0
11754: PPUSH
11755: LD_VAR 0 8
11759: PPUSH
11760: LD_VAR 0 4
11764: PPUSH
11765: CALL_OW 380
// un := CreateHuman ;
11769: LD_ADDR_VAR 0 14
11773: PUSH
11774: CALL_OW 44
11778: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11779: LD_ADDR_VAR 0 7
11783: PUSH
11784: LD_VAR 0 7
11788: PPUSH
11789: LD_INT 1
11791: PPUSH
11792: LD_VAR 0 14
11796: PPUSH
11797: CALL_OW 2
11801: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11802: LD_VAR 0 14
11806: PPUSH
11807: LD_VAR 0 9
11811: PPUSH
11812: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11816: LD_VAR 0 9
11820: PPUSH
11821: CALL_OW 313
11825: PUSH
11826: LD_INT 6
11828: EQUAL
11829: IFTRUE 11853
11831: PUSH
11832: LD_VAR 0 9
11836: PPUSH
11837: CALL_OW 266
11841: PUSH
11842: LD_INT 32
11844: PUSH
11845: LD_INT 31
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: IN
11852: OR
11853: IFFALSE 11665
11855: GO 11662
11857: POP
11858: POP
// end else
11859: GO 12245
// for j = 1 to x do
11861: LD_ADDR_VAR 0 9
11865: PUSH
11866: DOUBLE
11867: LD_INT 1
11869: DEC
11870: ST_TO_ADDR
11871: LD_VAR 0 13
11875: PUSH
11876: FOR_TO
11877: IFFALSE 12243
// begin InitHc ;
11879: CALL_OW 19
// if not f then
11883: LD_VAR 0 12
11887: NOT
11888: IFFALSE 11977
// begin PrepareHuman ( false , i , skill ) ;
11890: LD_INT 0
11892: PPUSH
11893: LD_VAR 0 8
11897: PPUSH
11898: LD_VAR 0 4
11902: PPUSH
11903: CALL_OW 380
// un := CreateHuman ;
11907: LD_ADDR_VAR 0 14
11911: PUSH
11912: CALL_OW 44
11916: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11917: LD_ADDR_VAR 0 7
11921: PUSH
11922: LD_VAR 0 7
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: LD_VAR 0 14
11934: PPUSH
11935: CALL_OW 2
11939: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11940: LD_VAR 0 14
11944: PPUSH
11945: LD_VAR 0 1
11949: PPUSH
11950: CALL_OW 250
11954: PPUSH
11955: LD_VAR 0 1
11959: PPUSH
11960: CALL_OW 251
11964: PPUSH
11965: LD_INT 10
11967: PPUSH
11968: LD_INT 0
11970: PPUSH
11971: CALL_OW 50
// continue ;
11975: GO 11876
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11977: LD_VAR 0 12
11981: PUSH
11982: LD_INT 1
11984: ARRAY
11985: PPUSH
11986: CALL_OW 313
11990: IFFALSE 12018
11992: PUSH
11993: LD_VAR 0 12
11997: PUSH
11998: LD_INT 1
12000: ARRAY
12001: PPUSH
12002: CALL_OW 266
12006: PUSH
12007: LD_INT 32
12009: PUSH
12010: LD_INT 31
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: IN
12017: AND
12018: IFTRUE 12039
12020: PUSH
12021: LD_VAR 0 12
12025: PUSH
12026: LD_INT 1
12028: ARRAY
12029: PPUSH
12030: CALL_OW 313
12034: PUSH
12035: LD_INT 6
12037: EQUAL
12038: OR
12039: IFFALSE 12059
// f := Delete ( f , 1 ) ;
12041: LD_ADDR_VAR 0 12
12045: PUSH
12046: LD_VAR 0 12
12050: PPUSH
12051: LD_INT 1
12053: PPUSH
12054: CALL_OW 3
12058: ST_TO_ADDR
// if not f then
12059: LD_VAR 0 12
12063: NOT
12064: IFFALSE 12082
// begin x := x + 2 ;
12066: LD_ADDR_VAR 0 13
12070: PUSH
12071: LD_VAR 0 13
12075: PUSH
12076: LD_INT 2
12078: PLUS
12079: ST_TO_ADDR
// continue ;
12080: GO 11876
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12082: LD_VAR 0 12
12086: PUSH
12087: LD_INT 1
12089: ARRAY
12090: PPUSH
12091: CALL_OW 266
12095: PUSH
12096: LD_INT 5
12098: EQUAL
12099: IFFALSE 12173
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12101: LD_VAR 0 12
12105: PUSH
12106: LD_INT 1
12108: ARRAY
12109: PPUSH
12110: CALL_OW 313
12114: PUSH
12115: LD_INT 3
12117: LESS
12118: IFFALSE 12154
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12120: LD_INT 0
12122: PPUSH
12123: LD_INT 5
12125: PUSH
12126: LD_INT 8
12128: PUSH
12129: LD_INT 9
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: PUSH
12137: LD_VAR 0 17
12141: ARRAY
12142: PPUSH
12143: LD_VAR 0 4
12147: PPUSH
12148: CALL_OW 380
12152: GO 12171
// PrepareHuman ( false , i , skill ) ;
12154: LD_INT 0
12156: PPUSH
12157: LD_VAR 0 8
12161: PPUSH
12162: LD_VAR 0 4
12166: PPUSH
12167: CALL_OW 380
// end else
12171: GO 12190
// PrepareHuman ( false , i , skill ) ;
12173: LD_INT 0
12175: PPUSH
12176: LD_VAR 0 8
12180: PPUSH
12181: LD_VAR 0 4
12185: PPUSH
12186: CALL_OW 380
// un := CreateHuman ;
12190: LD_ADDR_VAR 0 14
12194: PUSH
12195: CALL_OW 44
12199: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12200: LD_ADDR_VAR 0 7
12204: PUSH
12205: LD_VAR 0 7
12209: PPUSH
12210: LD_INT 1
12212: PPUSH
12213: LD_VAR 0 14
12217: PPUSH
12218: CALL_OW 2
12222: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12223: LD_VAR 0 14
12227: PPUSH
12228: LD_VAR 0 12
12232: PUSH
12233: LD_INT 1
12235: ARRAY
12236: PPUSH
12237: CALL_OW 52
// end ;
12241: GO 11876
12243: POP
12244: POP
// end ;
12245: GO 11176
12247: POP
12248: POP
// result := result ^ buildings ;
12249: LD_ADDR_VAR 0 7
12253: PUSH
12254: LD_VAR 0 7
12258: PUSH
12259: LD_VAR 0 18
12263: ADD
12264: ST_TO_ADDR
// end else
12265: GO 12408
// begin for i = 1 to personel do
12267: LD_ADDR_VAR 0 8
12271: PUSH
12272: DOUBLE
12273: LD_INT 1
12275: DEC
12276: ST_TO_ADDR
12277: LD_VAR 0 6
12281: PUSH
12282: FOR_TO
12283: IFFALSE 12406
// begin if i > 4 then
12285: LD_VAR 0 8
12289: PUSH
12290: LD_INT 4
12292: GREATER
12293: IFFALSE 12297
// break ;
12295: GO 12406
// x := personel [ i ] ;
12297: LD_ADDR_VAR 0 13
12301: PUSH
12302: LD_VAR 0 6
12306: PUSH
12307: LD_VAR 0 8
12311: ARRAY
12312: ST_TO_ADDR
// if x = - 1 then
12313: LD_VAR 0 13
12317: PUSH
12318: LD_INT 1
12320: NEG
12321: EQUAL
12322: IFFALSE 12326
// continue ;
12324: GO 12282
// PrepareHuman ( false , i , skill ) ;
12326: LD_INT 0
12328: PPUSH
12329: LD_VAR 0 8
12333: PPUSH
12334: LD_VAR 0 4
12338: PPUSH
12339: CALL_OW 380
// un := CreateHuman ;
12343: LD_ADDR_VAR 0 14
12347: PUSH
12348: CALL_OW 44
12352: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12353: LD_VAR 0 14
12357: PPUSH
12358: LD_VAR 0 1
12362: PPUSH
12363: CALL_OW 250
12367: PPUSH
12368: LD_VAR 0 1
12372: PPUSH
12373: CALL_OW 251
12377: PPUSH
12378: LD_INT 10
12380: PPUSH
12381: LD_INT 0
12383: PPUSH
12384: CALL_OW 50
// result := result ^ un ;
12388: LD_ADDR_VAR 0 7
12392: PUSH
12393: LD_VAR 0 7
12397: PUSH
12398: LD_VAR 0 14
12402: ADD
12403: ST_TO_ADDR
// end ;
12404: GO 12282
12406: POP
12407: POP
// end ; end ;
12408: LD_VAR 0 7
12412: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12413: LD_INT 0
12415: PPUSH
12416: PPUSH
12417: PPUSH
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
12422: PPUSH
12423: PPUSH
12424: PPUSH
12425: PPUSH
12426: PPUSH
12427: PPUSH
12428: PPUSH
12429: PPUSH
12430: PPUSH
// result := false ;
12431: LD_ADDR_VAR 0 3
12435: PUSH
12436: LD_INT 0
12438: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12439: LD_VAR 0 1
12443: NOT
12444: IFTRUE 12469
12446: PUSH
12447: LD_VAR 0 1
12451: PPUSH
12452: CALL_OW 266
12456: PUSH
12457: LD_INT 32
12459: PUSH
12460: LD_INT 33
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: IN
12467: NOT
12468: OR
12469: IFFALSE 12473
// exit ;
12471: GO 13608
// nat := GetNation ( tower ) ;
12473: LD_ADDR_VAR 0 12
12477: PUSH
12478: LD_VAR 0 1
12482: PPUSH
12483: CALL_OW 248
12487: ST_TO_ADDR
// side := GetSide ( tower ) ;
12488: LD_ADDR_VAR 0 16
12492: PUSH
12493: LD_VAR 0 1
12497: PPUSH
12498: CALL_OW 255
12502: ST_TO_ADDR
// x := GetX ( tower ) ;
12503: LD_ADDR_VAR 0 10
12507: PUSH
12508: LD_VAR 0 1
12512: PPUSH
12513: CALL_OW 250
12517: ST_TO_ADDR
// y := GetY ( tower ) ;
12518: LD_ADDR_VAR 0 11
12522: PUSH
12523: LD_VAR 0 1
12527: PPUSH
12528: CALL_OW 251
12532: ST_TO_ADDR
// if not x or not y then
12533: LD_VAR 0 10
12537: NOT
12538: IFTRUE 12547
12540: PUSH
12541: LD_VAR 0 11
12545: NOT
12546: OR
12547: IFFALSE 12551
// exit ;
12549: GO 13608
// weapon := 0 ;
12551: LD_ADDR_VAR 0 18
12555: PUSH
12556: LD_INT 0
12558: ST_TO_ADDR
// fac_list := [ ] ;
12559: LD_ADDR_VAR 0 17
12563: PUSH
12564: EMPTY
12565: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12566: LD_ADDR_VAR 0 6
12570: PUSH
12571: LD_VAR 0 1
12575: PPUSH
12576: CALL_OW 274
12580: PPUSH
12581: LD_VAR 0 2
12585: PPUSH
12586: LD_INT 0
12588: PPUSH
12589: CALL 10143 0 3
12593: PPUSH
12594: LD_INT 30
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PPUSH
12604: CALL_OW 72
12608: ST_TO_ADDR
// if not factories then
12609: LD_VAR 0 6
12613: NOT
12614: IFFALSE 12618
// exit ;
12616: GO 13608
// for i in factories do
12618: LD_ADDR_VAR 0 8
12622: PUSH
12623: LD_VAR 0 6
12627: PUSH
12628: FOR_IN
12629: IFFALSE 12654
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12631: LD_ADDR_VAR 0 17
12635: PUSH
12636: LD_VAR 0 17
12640: PUSH
12641: LD_VAR 0 8
12645: PPUSH
12646: CALL_OW 478
12650: UNION
12651: ST_TO_ADDR
12652: GO 12628
12654: POP
12655: POP
// if not fac_list then
12656: LD_VAR 0 17
12660: NOT
12661: IFFALSE 12665
// exit ;
12663: GO 13608
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12665: LD_ADDR_VAR 0 5
12669: PUSH
12670: LD_INT 4
12672: PUSH
12673: LD_INT 5
12675: PUSH
12676: LD_INT 9
12678: PUSH
12679: LD_INT 10
12681: PUSH
12682: LD_INT 6
12684: PUSH
12685: LD_INT 7
12687: PUSH
12688: LD_INT 11
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 27
12702: PUSH
12703: LD_INT 28
12705: PUSH
12706: LD_INT 26
12708: PUSH
12709: LD_INT 30
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 43
12720: PUSH
12721: LD_INT 44
12723: PUSH
12724: LD_INT 46
12726: PUSH
12727: LD_INT 45
12729: PUSH
12730: LD_INT 47
12732: PUSH
12733: LD_INT 49
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: PUSH
12749: LD_VAR 0 12
12753: ARRAY
12754: ST_TO_ADDR
// list := list isect fac_list ;
12755: LD_ADDR_VAR 0 5
12759: PUSH
12760: LD_VAR 0 5
12764: PUSH
12765: LD_VAR 0 17
12769: ISECT
12770: ST_TO_ADDR
// if not list then
12771: LD_VAR 0 5
12775: NOT
12776: IFFALSE 12780
// exit ;
12778: GO 13608
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12780: LD_VAR 0 12
12784: PUSH
12785: LD_INT 3
12787: EQUAL
12788: IFFALSE 12800
12790: PUSH
12791: LD_INT 49
12793: PUSH
12794: LD_VAR 0 5
12798: IN
12799: AND
12800: IFFALSE 12820
12802: PUSH
12803: LD_INT 31
12805: PPUSH
12806: LD_VAR 0 16
12810: PPUSH
12811: CALL_OW 321
12815: PUSH
12816: LD_INT 2
12818: EQUAL
12819: AND
12820: IFFALSE 12880
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12822: LD_INT 22
12824: PUSH
12825: LD_VAR 0 16
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 35
12836: PUSH
12837: LD_INT 49
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 91
12846: PUSH
12847: LD_VAR 0 1
12851: PUSH
12852: LD_INT 10
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 69
12869: NOT
12870: IFFALSE 12880
// weapon := ru_time_lapser ;
12872: LD_ADDR_VAR 0 18
12876: PUSH
12877: LD_INT 49
12879: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12880: LD_VAR 0 12
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: IN
12895: IFFALSE 12919
12897: PUSH
12898: LD_INT 11
12900: PUSH
12901: LD_VAR 0 5
12905: IN
12906: IFTRUE 12918
12908: PUSH
12909: LD_INT 30
12911: PUSH
12912: LD_VAR 0 5
12916: IN
12917: OR
12918: AND
12919: IFFALSE 12939
12921: PUSH
12922: LD_INT 6
12924: PPUSH
12925: LD_VAR 0 16
12929: PPUSH
12930: CALL_OW 321
12934: PUSH
12935: LD_INT 2
12937: EQUAL
12938: AND
12939: IFFALSE 13106
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12941: LD_INT 22
12943: PUSH
12944: LD_VAR 0 16
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: LD_INT 35
12958: PUSH
12959: LD_INT 11
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 35
12968: PUSH
12969: LD_INT 30
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 91
12983: PUSH
12984: LD_VAR 0 1
12988: PUSH
12989: LD_INT 18
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: LIST
13001: PPUSH
13002: CALL_OW 69
13006: NOT
13007: IFFALSE 13083
13009: PUSH
13010: LD_INT 22
13012: PUSH
13013: LD_VAR 0 16
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 2
13024: PUSH
13025: LD_INT 30
13027: PUSH
13028: LD_INT 32
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 30
13037: PUSH
13038: LD_INT 33
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 91
13052: PUSH
13053: LD_VAR 0 1
13057: PUSH
13058: LD_INT 12
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: PPUSH
13074: CALL_OW 69
13078: PUSH
13079: LD_INT 2
13081: GREATER
13082: AND
13083: IFFALSE 13106
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13085: LD_ADDR_VAR 0 18
13089: PUSH
13090: LD_INT 11
13092: PUSH
13093: LD_INT 30
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_VAR 0 12
13104: ARRAY
13105: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13106: LD_VAR 0 18
13110: NOT
13111: IFFALSE 13131
13113: PUSH
13114: LD_INT 40
13116: PPUSH
13117: LD_VAR 0 16
13121: PPUSH
13122: CALL_OW 321
13126: PUSH
13127: LD_INT 2
13129: EQUAL
13130: AND
13131: IFFALSE 13167
13133: PUSH
13134: LD_INT 7
13136: PUSH
13137: LD_VAR 0 5
13141: IN
13142: IFTRUE 13154
13144: PUSH
13145: LD_INT 28
13147: PUSH
13148: LD_VAR 0 5
13152: IN
13153: OR
13154: IFTRUE 13166
13156: PUSH
13157: LD_INT 45
13159: PUSH
13160: LD_VAR 0 5
13164: IN
13165: OR
13166: AND
13167: IFFALSE 13421
// begin hex := GetHexInfo ( x , y ) ;
13169: LD_ADDR_VAR 0 4
13173: PUSH
13174: LD_VAR 0 10
13178: PPUSH
13179: LD_VAR 0 11
13183: PPUSH
13184: CALL_OW 546
13188: ST_TO_ADDR
// if hex [ 1 ] then
13189: LD_VAR 0 4
13193: PUSH
13194: LD_INT 1
13196: ARRAY
13197: IFFALSE 13201
// exit ;
13199: GO 13608
// height := hex [ 2 ] ;
13201: LD_ADDR_VAR 0 15
13205: PUSH
13206: LD_VAR 0 4
13210: PUSH
13211: LD_INT 2
13213: ARRAY
13214: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13215: LD_ADDR_VAR 0 14
13219: PUSH
13220: LD_INT 0
13222: PUSH
13223: LD_INT 2
13225: PUSH
13226: LD_INT 3
13228: PUSH
13229: LD_INT 5
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: ST_TO_ADDR
// for i in tmp do
13238: LD_ADDR_VAR 0 8
13242: PUSH
13243: LD_VAR 0 14
13247: PUSH
13248: FOR_IN
13249: IFFALSE 13419
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13251: LD_ADDR_VAR 0 9
13255: PUSH
13256: LD_VAR 0 10
13260: PPUSH
13261: LD_VAR 0 8
13265: PPUSH
13266: LD_INT 5
13268: PPUSH
13269: CALL_OW 272
13273: PUSH
13274: LD_VAR 0 11
13278: PPUSH
13279: LD_VAR 0 8
13283: PPUSH
13284: LD_INT 5
13286: PPUSH
13287: CALL_OW 273
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13296: LD_VAR 0 9
13300: PUSH
13301: LD_INT 1
13303: ARRAY
13304: PPUSH
13305: LD_VAR 0 9
13309: PUSH
13310: LD_INT 2
13312: ARRAY
13313: PPUSH
13314: CALL_OW 488
13318: IFFALSE 13417
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13320: LD_ADDR_VAR 0 4
13324: PUSH
13325: LD_VAR 0 9
13329: PUSH
13330: LD_INT 1
13332: ARRAY
13333: PPUSH
13334: LD_VAR 0 9
13338: PUSH
13339: LD_INT 2
13341: ARRAY
13342: PPUSH
13343: CALL_OW 546
13347: ST_TO_ADDR
// if hex [ 1 ] then
13348: LD_VAR 0 4
13352: PUSH
13353: LD_INT 1
13355: ARRAY
13356: IFFALSE 13360
// continue ;
13358: GO 13248
// h := hex [ 2 ] ;
13360: LD_ADDR_VAR 0 13
13364: PUSH
13365: LD_VAR 0 4
13369: PUSH
13370: LD_INT 2
13372: ARRAY
13373: ST_TO_ADDR
// if h + 7 < height then
13374: LD_VAR 0 13
13378: PUSH
13379: LD_INT 7
13381: PLUS
13382: PUSH
13383: LD_VAR 0 15
13387: LESS
13388: IFFALSE 13417
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13390: LD_ADDR_VAR 0 18
13394: PUSH
13395: LD_INT 7
13397: PUSH
13398: LD_INT 28
13400: PUSH
13401: LD_INT 45
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: PUSH
13409: LD_VAR 0 12
13413: ARRAY
13414: ST_TO_ADDR
// break ;
13415: GO 13419
// end ; end ; end ;
13417: GO 13248
13419: POP
13420: POP
// end ; if not weapon then
13421: LD_VAR 0 18
13425: NOT
13426: IFFALSE 13486
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13428: LD_ADDR_VAR 0 5
13432: PUSH
13433: LD_VAR 0 5
13437: PUSH
13438: LD_INT 11
13440: PUSH
13441: LD_INT 30
13443: PUSH
13444: LD_INT 49
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: DIFF
13452: ST_TO_ADDR
// if not list then
13453: LD_VAR 0 5
13457: NOT
13458: IFFALSE 13462
// exit ;
13460: GO 13608
// weapon := list [ rand ( 1 , list ) ] ;
13462: LD_ADDR_VAR 0 18
13466: PUSH
13467: LD_VAR 0 5
13471: PUSH
13472: LD_INT 1
13474: PPUSH
13475: LD_VAR 0 5
13479: PPUSH
13480: CALL_OW 12
13484: ARRAY
13485: ST_TO_ADDR
// end ; if weapon then
13486: LD_VAR 0 18
13490: IFFALSE 13608
// begin tmp := CostOfWeapon ( weapon ) ;
13492: LD_ADDR_VAR 0 14
13496: PUSH
13497: LD_VAR 0 18
13501: PPUSH
13502: CALL_OW 451
13506: ST_TO_ADDR
// j := GetBase ( tower ) ;
13507: LD_ADDR_VAR 0 9
13511: PUSH
13512: LD_VAR 0 1
13516: PPUSH
13517: CALL_OW 274
13521: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13522: LD_VAR 0 9
13526: PPUSH
13527: LD_INT 1
13529: PPUSH
13530: CALL_OW 275
13534: PUSH
13535: LD_VAR 0 14
13539: PUSH
13540: LD_INT 1
13542: ARRAY
13543: GREATEREQUAL
13544: IFFALSE 13570
13546: PUSH
13547: LD_VAR 0 9
13551: PPUSH
13552: LD_INT 2
13554: PPUSH
13555: CALL_OW 275
13559: PUSH
13560: LD_VAR 0 14
13564: PUSH
13565: LD_INT 2
13567: ARRAY
13568: GREATEREQUAL
13569: AND
13570: IFFALSE 13596
13572: PUSH
13573: LD_VAR 0 9
13577: PPUSH
13578: LD_INT 3
13580: PPUSH
13581: CALL_OW 275
13585: PUSH
13586: LD_VAR 0 14
13590: PUSH
13591: LD_INT 3
13593: ARRAY
13594: GREATEREQUAL
13595: AND
13596: IFFALSE 13608
// result := weapon ;
13598: LD_ADDR_VAR 0 3
13602: PUSH
13603: LD_VAR 0 18
13607: ST_TO_ADDR
// end ; end ;
13608: LD_VAR 0 3
13612: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13613: LD_INT 0
13615: PPUSH
13616: PPUSH
// result := true ;
13617: LD_ADDR_VAR 0 3
13621: PUSH
13622: LD_INT 1
13624: ST_TO_ADDR
// if array1 = array2 then
13625: LD_VAR 0 1
13629: PUSH
13630: LD_VAR 0 2
13634: EQUAL
13635: IFFALSE 13695
// begin for i = 1 to array1 do
13637: LD_ADDR_VAR 0 4
13641: PUSH
13642: DOUBLE
13643: LD_INT 1
13645: DEC
13646: ST_TO_ADDR
13647: LD_VAR 0 1
13651: PUSH
13652: FOR_TO
13653: IFFALSE 13691
// if array1 [ i ] <> array2 [ i ] then
13655: LD_VAR 0 1
13659: PUSH
13660: LD_VAR 0 4
13664: ARRAY
13665: PUSH
13666: LD_VAR 0 2
13670: PUSH
13671: LD_VAR 0 4
13675: ARRAY
13676: NONEQUAL
13677: IFFALSE 13689
// begin result := false ;
13679: LD_ADDR_VAR 0 3
13683: PUSH
13684: LD_INT 0
13686: ST_TO_ADDR
// break ;
13687: GO 13691
// end ;
13689: GO 13652
13691: POP
13692: POP
// end else
13693: GO 13703
// result := false ;
13695: LD_ADDR_VAR 0 3
13699: PUSH
13700: LD_INT 0
13702: ST_TO_ADDR
// end ;
13703: LD_VAR 0 3
13707: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13708: LD_INT 0
13710: PPUSH
13711: PPUSH
// if not array1 or not array2 then
13712: LD_VAR 0 1
13716: NOT
13717: IFTRUE 13726
13719: PUSH
13720: LD_VAR 0 2
13724: NOT
13725: OR
13726: IFFALSE 13730
// exit ;
13728: GO 13794
// result := true ;
13730: LD_ADDR_VAR 0 3
13734: PUSH
13735: LD_INT 1
13737: ST_TO_ADDR
// for i = 1 to array1 do
13738: LD_ADDR_VAR 0 4
13742: PUSH
13743: DOUBLE
13744: LD_INT 1
13746: DEC
13747: ST_TO_ADDR
13748: LD_VAR 0 1
13752: PUSH
13753: FOR_TO
13754: IFFALSE 13792
// if array1 [ i ] <> array2 [ i ] then
13756: LD_VAR 0 1
13760: PUSH
13761: LD_VAR 0 4
13765: ARRAY
13766: PUSH
13767: LD_VAR 0 2
13771: PUSH
13772: LD_VAR 0 4
13776: ARRAY
13777: NONEQUAL
13778: IFFALSE 13790
// begin result := false ;
13780: LD_ADDR_VAR 0 3
13784: PUSH
13785: LD_INT 0
13787: ST_TO_ADDR
// break ;
13788: GO 13792
// end ;
13790: GO 13753
13792: POP
13793: POP
// end ;
13794: LD_VAR 0 3
13798: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13799: LD_INT 0
13801: PPUSH
13802: PPUSH
13803: PPUSH
// pom := GetBase ( fac ) ;
13804: LD_ADDR_VAR 0 5
13808: PUSH
13809: LD_VAR 0 1
13813: PPUSH
13814: CALL_OW 274
13818: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13819: LD_ADDR_VAR 0 4
13823: PUSH
13824: LD_VAR 0 2
13828: PUSH
13829: LD_INT 1
13831: ARRAY
13832: PPUSH
13833: LD_VAR 0 2
13837: PUSH
13838: LD_INT 2
13840: ARRAY
13841: PPUSH
13842: LD_VAR 0 2
13846: PUSH
13847: LD_INT 3
13849: ARRAY
13850: PPUSH
13851: LD_VAR 0 2
13855: PUSH
13856: LD_INT 4
13858: ARRAY
13859: PPUSH
13860: CALL_OW 449
13864: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13865: LD_ADDR_VAR 0 3
13869: PUSH
13870: LD_VAR 0 5
13874: PPUSH
13875: LD_INT 1
13877: PPUSH
13878: CALL_OW 275
13882: PUSH
13883: LD_VAR 0 4
13887: PUSH
13888: LD_INT 1
13890: ARRAY
13891: GREATEREQUAL
13892: IFFALSE 13918
13894: PUSH
13895: LD_VAR 0 5
13899: PPUSH
13900: LD_INT 2
13902: PPUSH
13903: CALL_OW 275
13907: PUSH
13908: LD_VAR 0 4
13912: PUSH
13913: LD_INT 2
13915: ARRAY
13916: GREATEREQUAL
13917: AND
13918: IFFALSE 13944
13920: PUSH
13921: LD_VAR 0 5
13925: PPUSH
13926: LD_INT 3
13928: PPUSH
13929: CALL_OW 275
13933: PUSH
13934: LD_VAR 0 4
13938: PUSH
13939: LD_INT 3
13941: ARRAY
13942: GREATEREQUAL
13943: AND
13944: ST_TO_ADDR
// end ;
13945: LD_VAR 0 3
13949: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13950: LD_INT 0
13952: PPUSH
13953: PPUSH
13954: PPUSH
13955: PPUSH
// pom := GetBase ( building ) ;
13956: LD_ADDR_VAR 0 3
13960: PUSH
13961: LD_VAR 0 1
13965: PPUSH
13966: CALL_OW 274
13970: ST_TO_ADDR
// if not pom then
13971: LD_VAR 0 3
13975: NOT
13976: IFFALSE 13980
// exit ;
13978: GO 14154
// btype := GetBType ( building ) ;
13980: LD_ADDR_VAR 0 5
13984: PUSH
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 266
13994: ST_TO_ADDR
// if btype = b_armoury then
13995: LD_VAR 0 5
13999: PUSH
14000: LD_INT 4
14002: EQUAL
14003: IFFALSE 14013
// btype := b_barracks ;
14005: LD_ADDR_VAR 0 5
14009: PUSH
14010: LD_INT 5
14012: ST_TO_ADDR
// if btype = b_depot then
14013: LD_VAR 0 5
14017: PUSH
14018: LD_INT 0
14020: EQUAL
14021: IFFALSE 14031
// btype := b_warehouse ;
14023: LD_ADDR_VAR 0 5
14027: PUSH
14028: LD_INT 1
14030: ST_TO_ADDR
// if btype = b_workshop then
14031: LD_VAR 0 5
14035: PUSH
14036: LD_INT 2
14038: EQUAL
14039: IFFALSE 14049
// btype := b_factory ;
14041: LD_ADDR_VAR 0 5
14045: PUSH
14046: LD_INT 3
14048: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14049: LD_ADDR_VAR 0 4
14053: PUSH
14054: LD_VAR 0 5
14058: PPUSH
14059: LD_VAR 0 1
14063: PPUSH
14064: CALL_OW 248
14068: PPUSH
14069: CALL_OW 450
14073: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14074: LD_ADDR_VAR 0 2
14078: PUSH
14079: LD_VAR 0 3
14083: PPUSH
14084: LD_INT 1
14086: PPUSH
14087: CALL_OW 275
14091: PUSH
14092: LD_VAR 0 4
14096: PUSH
14097: LD_INT 1
14099: ARRAY
14100: GREATEREQUAL
14101: IFFALSE 14127
14103: PUSH
14104: LD_VAR 0 3
14108: PPUSH
14109: LD_INT 2
14111: PPUSH
14112: CALL_OW 275
14116: PUSH
14117: LD_VAR 0 4
14121: PUSH
14122: LD_INT 2
14124: ARRAY
14125: GREATEREQUAL
14126: AND
14127: IFFALSE 14153
14129: PUSH
14130: LD_VAR 0 3
14134: PPUSH
14135: LD_INT 3
14137: PPUSH
14138: CALL_OW 275
14142: PUSH
14143: LD_VAR 0 4
14147: PUSH
14148: LD_INT 3
14150: ARRAY
14151: GREATEREQUAL
14152: AND
14153: ST_TO_ADDR
// end ;
14154: LD_VAR 0 2
14158: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14159: LD_INT 0
14161: PPUSH
14162: PPUSH
14163: PPUSH
// pom := GetBase ( building ) ;
14164: LD_ADDR_VAR 0 4
14168: PUSH
14169: LD_VAR 0 1
14173: PPUSH
14174: CALL_OW 274
14178: ST_TO_ADDR
// if not pom then
14179: LD_VAR 0 4
14183: NOT
14184: IFFALSE 14188
// exit ;
14186: GO 14293
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14188: LD_ADDR_VAR 0 5
14192: PUSH
14193: LD_VAR 0 2
14197: PPUSH
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL_OW 248
14207: PPUSH
14208: CALL_OW 450
14212: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14213: LD_ADDR_VAR 0 3
14217: PUSH
14218: LD_VAR 0 4
14222: PPUSH
14223: LD_INT 1
14225: PPUSH
14226: CALL_OW 275
14230: PUSH
14231: LD_VAR 0 5
14235: PUSH
14236: LD_INT 1
14238: ARRAY
14239: GREATEREQUAL
14240: IFFALSE 14266
14242: PUSH
14243: LD_VAR 0 4
14247: PPUSH
14248: LD_INT 2
14250: PPUSH
14251: CALL_OW 275
14255: PUSH
14256: LD_VAR 0 5
14260: PUSH
14261: LD_INT 2
14263: ARRAY
14264: GREATEREQUAL
14265: AND
14266: IFFALSE 14292
14268: PUSH
14269: LD_VAR 0 4
14273: PPUSH
14274: LD_INT 3
14276: PPUSH
14277: CALL_OW 275
14281: PUSH
14282: LD_VAR 0 5
14286: PUSH
14287: LD_INT 3
14289: ARRAY
14290: GREATEREQUAL
14291: AND
14292: ST_TO_ADDR
// end ;
14293: LD_VAR 0 3
14297: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14298: LD_INT 0
14300: PPUSH
14301: PPUSH
14302: PPUSH
14303: PPUSH
14304: PPUSH
14305: PPUSH
14306: PPUSH
14307: PPUSH
14308: PPUSH
14309: PPUSH
14310: PPUSH
// result := false ;
14311: LD_ADDR_VAR 0 8
14315: PUSH
14316: LD_INT 0
14318: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14319: LD_VAR 0 5
14323: NOT
14324: IFTRUE 14333
14326: PUSH
14327: LD_VAR 0 1
14331: NOT
14332: OR
14333: IFTRUE 14342
14335: PUSH
14336: LD_VAR 0 2
14340: NOT
14341: OR
14342: IFTRUE 14351
14344: PUSH
14345: LD_VAR 0 3
14349: NOT
14350: OR
14351: IFFALSE 14355
// exit ;
14353: GO 15181
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14355: LD_ADDR_VAR 0 14
14359: PUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: LD_VAR 0 2
14369: PPUSH
14370: LD_VAR 0 3
14374: PPUSH
14375: LD_VAR 0 4
14379: PPUSH
14380: LD_VAR 0 5
14384: PUSH
14385: LD_INT 1
14387: ARRAY
14388: PPUSH
14389: CALL_OW 248
14393: PPUSH
14394: LD_INT 0
14396: PPUSH
14397: CALL 16462 0 6
14401: ST_TO_ADDR
// if not hexes then
14402: LD_VAR 0 14
14406: NOT
14407: IFFALSE 14411
// exit ;
14409: GO 15181
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14411: LD_ADDR_VAR 0 17
14415: PUSH
14416: LD_VAR 0 5
14420: PPUSH
14421: LD_INT 22
14423: PUSH
14424: LD_VAR 0 13
14428: PPUSH
14429: CALL_OW 255
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 2
14440: PUSH
14441: LD_INT 30
14443: PUSH
14444: LD_INT 0
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 30
14453: PUSH
14454: LD_INT 1
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PPUSH
14470: CALL_OW 72
14474: ST_TO_ADDR
// for i = 1 to hexes do
14475: LD_ADDR_VAR 0 9
14479: PUSH
14480: DOUBLE
14481: LD_INT 1
14483: DEC
14484: ST_TO_ADDR
14485: LD_VAR 0 14
14489: PUSH
14490: FOR_TO
14491: IFFALSE 15179
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14493: LD_ADDR_VAR 0 13
14497: PUSH
14498: LD_VAR 0 14
14502: PUSH
14503: LD_VAR 0 9
14507: ARRAY
14508: PUSH
14509: LD_INT 1
14511: ARRAY
14512: PPUSH
14513: LD_VAR 0 14
14517: PUSH
14518: LD_VAR 0 9
14522: ARRAY
14523: PUSH
14524: LD_INT 2
14526: ARRAY
14527: PPUSH
14528: CALL_OW 428
14532: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14533: LD_VAR 0 14
14537: PUSH
14538: LD_VAR 0 9
14542: ARRAY
14543: PUSH
14544: LD_INT 1
14546: ARRAY
14547: PPUSH
14548: LD_VAR 0 14
14552: PUSH
14553: LD_VAR 0 9
14557: ARRAY
14558: PUSH
14559: LD_INT 2
14561: ARRAY
14562: PPUSH
14563: CALL_OW 351
14567: IFTRUE 14606
14569: PUSH
14570: LD_VAR 0 14
14574: PUSH
14575: LD_VAR 0 9
14579: ARRAY
14580: PUSH
14581: LD_INT 1
14583: ARRAY
14584: PPUSH
14585: LD_VAR 0 14
14589: PUSH
14590: LD_VAR 0 9
14594: ARRAY
14595: PUSH
14596: LD_INT 2
14598: ARRAY
14599: PPUSH
14600: CALL_OW 488
14604: NOT
14605: OR
14606: IFTRUE 14623
14608: PUSH
14609: LD_VAR 0 13
14613: PPUSH
14614: CALL_OW 247
14618: PUSH
14619: LD_INT 3
14621: EQUAL
14622: OR
14623: IFFALSE 14629
// exit ;
14625: POP
14626: POP
14627: GO 15181
// if not tmp then
14629: LD_VAR 0 13
14633: NOT
14634: IFFALSE 14638
// continue ;
14636: GO 14490
// result := true ;
14638: LD_ADDR_VAR 0 8
14642: PUSH
14643: LD_INT 1
14645: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14646: LD_VAR 0 6
14650: IFFALSE 14667
14652: PUSH
14653: LD_VAR 0 13
14657: PPUSH
14658: CALL_OW 247
14662: PUSH
14663: LD_INT 2
14665: EQUAL
14666: AND
14667: IFFALSE 14684
14669: PUSH
14670: LD_VAR 0 13
14674: PPUSH
14675: CALL_OW 263
14679: PUSH
14680: LD_INT 1
14682: EQUAL
14683: AND
14684: IFFALSE 14848
// begin if IsDrivenBy ( tmp ) then
14686: LD_VAR 0 13
14690: PPUSH
14691: CALL_OW 311
14695: IFFALSE 14699
// continue ;
14697: GO 14490
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14699: LD_VAR 0 6
14703: PPUSH
14704: LD_INT 3
14706: PUSH
14707: LD_INT 60
14709: PUSH
14710: EMPTY
14711: LIST
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 3
14719: PUSH
14720: LD_INT 55
14722: PUSH
14723: EMPTY
14724: LIST
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PPUSH
14734: CALL_OW 72
14738: IFFALSE 14846
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14740: LD_ADDR_VAR 0 18
14744: PUSH
14745: LD_VAR 0 6
14749: PPUSH
14750: LD_INT 3
14752: PUSH
14753: LD_INT 60
14755: PUSH
14756: EMPTY
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 3
14765: PUSH
14766: LD_INT 55
14768: PUSH
14769: EMPTY
14770: LIST
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 72
14784: PUSH
14785: LD_INT 1
14787: ARRAY
14788: ST_TO_ADDR
// if IsInUnit ( driver ) then
14789: LD_VAR 0 18
14793: PPUSH
14794: CALL_OW 310
14798: IFFALSE 14809
// ComExit ( driver ) ;
14800: LD_VAR 0 18
14804: PPUSH
14805: CALL 40452 0 1
// AddComEnterUnit ( driver , tmp ) ;
14809: LD_VAR 0 18
14813: PPUSH
14814: LD_VAR 0 13
14818: PPUSH
14819: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14823: LD_VAR 0 18
14827: PPUSH
14828: LD_VAR 0 7
14832: PPUSH
14833: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14837: LD_VAR 0 18
14841: PPUSH
14842: CALL_OW 181
// end ; continue ;
14846: GO 14490
// end ; if not cleaners or not tmp in cleaners then
14848: LD_VAR 0 6
14852: NOT
14853: IFTRUE 14868
14855: PUSH
14856: LD_VAR 0 13
14860: PUSH
14861: LD_VAR 0 6
14865: IN
14866: NOT
14867: OR
14868: IFFALSE 15177
// begin if dep then
14870: LD_VAR 0 17
14874: IFFALSE 15010
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14876: LD_ADDR_VAR 0 16
14880: PUSH
14881: LD_VAR 0 17
14885: PUSH
14886: LD_INT 1
14888: ARRAY
14889: PPUSH
14890: CALL_OW 250
14894: PPUSH
14895: LD_VAR 0 17
14899: PUSH
14900: LD_INT 1
14902: ARRAY
14903: PPUSH
14904: CALL_OW 254
14908: PPUSH
14909: LD_INT 5
14911: PPUSH
14912: CALL_OW 272
14916: PUSH
14917: LD_VAR 0 17
14921: PUSH
14922: LD_INT 1
14924: ARRAY
14925: PPUSH
14926: CALL_OW 251
14930: PPUSH
14931: LD_VAR 0 17
14935: PUSH
14936: LD_INT 1
14938: ARRAY
14939: PPUSH
14940: CALL_OW 254
14944: PPUSH
14945: LD_INT 5
14947: PPUSH
14948: CALL_OW 273
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14957: LD_VAR 0 16
14961: PUSH
14962: LD_INT 1
14964: ARRAY
14965: PPUSH
14966: LD_VAR 0 16
14970: PUSH
14971: LD_INT 2
14973: ARRAY
14974: PPUSH
14975: CALL_OW 488
14979: IFFALSE 15010
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14981: LD_VAR 0 13
14985: PPUSH
14986: LD_VAR 0 16
14990: PUSH
14991: LD_INT 1
14993: ARRAY
14994: PPUSH
14995: LD_VAR 0 16
14999: PUSH
15000: LD_INT 2
15002: ARRAY
15003: PPUSH
15004: CALL_OW 111
// continue ;
15008: GO 14490
// end ; end ; r := GetDir ( tmp ) ;
15010: LD_ADDR_VAR 0 15
15014: PUSH
15015: LD_VAR 0 13
15019: PPUSH
15020: CALL_OW 254
15024: ST_TO_ADDR
// if r = 5 then
15025: LD_VAR 0 15
15029: PUSH
15030: LD_INT 5
15032: EQUAL
15033: IFFALSE 15043
// r := 0 ;
15035: LD_ADDR_VAR 0 15
15039: PUSH
15040: LD_INT 0
15042: ST_TO_ADDR
// for j = r to 5 do
15043: LD_ADDR_VAR 0 10
15047: PUSH
15048: DOUBLE
15049: LD_VAR 0 15
15053: DEC
15054: ST_TO_ADDR
15055: LD_INT 5
15057: PUSH
15058: FOR_TO
15059: IFFALSE 15175
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15061: LD_ADDR_VAR 0 11
15065: PUSH
15066: LD_VAR 0 13
15070: PPUSH
15071: CALL_OW 250
15075: PPUSH
15076: LD_VAR 0 10
15080: PPUSH
15081: LD_INT 2
15083: PPUSH
15084: CALL_OW 272
15088: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15089: LD_ADDR_VAR 0 12
15093: PUSH
15094: LD_VAR 0 13
15098: PPUSH
15099: CALL_OW 251
15103: PPUSH
15104: LD_VAR 0 10
15108: PPUSH
15109: LD_INT 2
15111: PPUSH
15112: CALL_OW 273
15116: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15117: LD_VAR 0 11
15121: PPUSH
15122: LD_VAR 0 12
15126: PPUSH
15127: CALL_OW 488
15131: IFFALSE 15150
15133: PUSH
15134: LD_VAR 0 11
15138: PPUSH
15139: LD_VAR 0 12
15143: PPUSH
15144: CALL_OW 428
15148: NOT
15149: AND
15150: IFFALSE 15173
// begin ComMoveXY ( tmp , _x , _y ) ;
15152: LD_VAR 0 13
15156: PPUSH
15157: LD_VAR 0 11
15161: PPUSH
15162: LD_VAR 0 12
15166: PPUSH
15167: CALL_OW 111
// break ;
15171: GO 15175
// end ; end ;
15173: GO 15058
15175: POP
15176: POP
// end ; end ;
15177: GO 14490
15179: POP
15180: POP
// end ;
15181: LD_VAR 0 8
15185: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15186: LD_INT 0
15188: PPUSH
// result := true ;
15189: LD_ADDR_VAR 0 3
15193: PUSH
15194: LD_INT 1
15196: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15197: LD_VAR 0 2
15201: PUSH
15202: LD_INT 24
15204: DOUBLE
15205: EQUAL
15206: IFTRUE 15216
15208: LD_INT 33
15210: DOUBLE
15211: EQUAL
15212: IFTRUE 15216
15214: GO 15241
15216: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15217: LD_ADDR_VAR 0 3
15221: PUSH
15222: LD_INT 32
15224: PPUSH
15225: LD_VAR 0 1
15229: PPUSH
15230: CALL_OW 321
15234: PUSH
15235: LD_INT 2
15237: EQUAL
15238: ST_TO_ADDR
15239: GO 15557
15241: LD_INT 20
15243: DOUBLE
15244: EQUAL
15245: IFTRUE 15249
15247: GO 15274
15249: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15250: LD_ADDR_VAR 0 3
15254: PUSH
15255: LD_INT 6
15257: PPUSH
15258: LD_VAR 0 1
15262: PPUSH
15263: CALL_OW 321
15267: PUSH
15268: LD_INT 2
15270: EQUAL
15271: ST_TO_ADDR
15272: GO 15557
15274: LD_INT 22
15276: DOUBLE
15277: EQUAL
15278: IFTRUE 15288
15280: LD_INT 36
15282: DOUBLE
15283: EQUAL
15284: IFTRUE 15288
15286: GO 15313
15288: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15289: LD_ADDR_VAR 0 3
15293: PUSH
15294: LD_INT 15
15296: PPUSH
15297: LD_VAR 0 1
15301: PPUSH
15302: CALL_OW 321
15306: PUSH
15307: LD_INT 2
15309: EQUAL
15310: ST_TO_ADDR
15311: GO 15557
15313: LD_INT 30
15315: DOUBLE
15316: EQUAL
15317: IFTRUE 15321
15319: GO 15346
15321: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15322: LD_ADDR_VAR 0 3
15326: PUSH
15327: LD_INT 20
15329: PPUSH
15330: LD_VAR 0 1
15334: PPUSH
15335: CALL_OW 321
15339: PUSH
15340: LD_INT 2
15342: EQUAL
15343: ST_TO_ADDR
15344: GO 15557
15346: LD_INT 28
15348: DOUBLE
15349: EQUAL
15350: IFTRUE 15360
15352: LD_INT 21
15354: DOUBLE
15355: EQUAL
15356: IFTRUE 15360
15358: GO 15385
15360: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_INT 21
15368: PPUSH
15369: LD_VAR 0 1
15373: PPUSH
15374: CALL_OW 321
15378: PUSH
15379: LD_INT 2
15381: EQUAL
15382: ST_TO_ADDR
15383: GO 15557
15385: LD_INT 16
15387: DOUBLE
15388: EQUAL
15389: IFTRUE 15393
15391: GO 15418
15393: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15394: LD_ADDR_VAR 0 3
15398: PUSH
15399: LD_INT 84
15401: PPUSH
15402: LD_VAR 0 1
15406: PPUSH
15407: CALL_OW 321
15411: PUSH
15412: LD_INT 2
15414: EQUAL
15415: ST_TO_ADDR
15416: GO 15557
15418: LD_INT 19
15420: DOUBLE
15421: EQUAL
15422: IFTRUE 15432
15424: LD_INT 23
15426: DOUBLE
15427: EQUAL
15428: IFTRUE 15432
15430: GO 15457
15432: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15433: LD_ADDR_VAR 0 3
15437: PUSH
15438: LD_INT 83
15440: PPUSH
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 321
15450: PUSH
15451: LD_INT 2
15453: EQUAL
15454: ST_TO_ADDR
15455: GO 15557
15457: LD_INT 17
15459: DOUBLE
15460: EQUAL
15461: IFTRUE 15465
15463: GO 15490
15465: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15466: LD_ADDR_VAR 0 3
15470: PUSH
15471: LD_INT 39
15473: PPUSH
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 321
15483: PUSH
15484: LD_INT 2
15486: EQUAL
15487: ST_TO_ADDR
15488: GO 15557
15490: LD_INT 18
15492: DOUBLE
15493: EQUAL
15494: IFTRUE 15498
15496: GO 15523
15498: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15499: LD_ADDR_VAR 0 3
15503: PUSH
15504: LD_INT 40
15506: PPUSH
15507: LD_VAR 0 1
15511: PPUSH
15512: CALL_OW 321
15516: PUSH
15517: LD_INT 2
15519: EQUAL
15520: ST_TO_ADDR
15521: GO 15557
15523: LD_INT 27
15525: DOUBLE
15526: EQUAL
15527: IFTRUE 15531
15529: GO 15556
15531: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15532: LD_ADDR_VAR 0 3
15536: PUSH
15537: LD_INT 35
15539: PPUSH
15540: LD_VAR 0 1
15544: PPUSH
15545: CALL_OW 321
15549: PUSH
15550: LD_INT 2
15552: EQUAL
15553: ST_TO_ADDR
15554: GO 15557
15556: POP
// end ;
15557: LD_VAR 0 3
15561: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15562: LD_INT 0
15564: PPUSH
15565: PPUSH
15566: PPUSH
15567: PPUSH
15568: PPUSH
15569: PPUSH
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// result := false ;
15575: LD_ADDR_VAR 0 6
15579: PUSH
15580: LD_INT 0
15582: ST_TO_ADDR
// if btype = b_depot then
15583: LD_VAR 0 2
15587: PUSH
15588: LD_INT 0
15590: EQUAL
15591: IFFALSE 15603
// begin result := true ;
15593: LD_ADDR_VAR 0 6
15597: PUSH
15598: LD_INT 1
15600: ST_TO_ADDR
// exit ;
15601: GO 16457
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15603: LD_VAR 0 1
15607: NOT
15608: IFTRUE 15633
15610: PUSH
15611: LD_VAR 0 1
15615: PPUSH
15616: CALL_OW 266
15620: PUSH
15621: LD_INT 0
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: IN
15631: NOT
15632: OR
15633: IFTRUE 15642
15635: PUSH
15636: LD_VAR 0 2
15640: NOT
15641: OR
15642: IFTRUE 15678
15644: PUSH
15645: LD_VAR 0 5
15649: PUSH
15650: LD_INT 0
15652: PUSH
15653: LD_INT 1
15655: PUSH
15656: LD_INT 2
15658: PUSH
15659: LD_INT 3
15661: PUSH
15662: LD_INT 4
15664: PUSH
15665: LD_INT 5
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: IN
15676: NOT
15677: OR
15678: IFTRUE 15697
15680: PUSH
15681: LD_VAR 0 3
15685: PPUSH
15686: LD_VAR 0 4
15690: PPUSH
15691: CALL_OW 488
15695: NOT
15696: OR
15697: IFFALSE 15701
// exit ;
15699: GO 16457
// side := GetSide ( depot ) ;
15701: LD_ADDR_VAR 0 9
15705: PUSH
15706: LD_VAR 0 1
15710: PPUSH
15711: CALL_OW 255
15715: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15716: LD_VAR 0 9
15720: PPUSH
15721: LD_VAR 0 2
15725: PPUSH
15726: CALL 15186 0 2
15730: NOT
15731: IFFALSE 15735
// exit ;
15733: GO 16457
// pom := GetBase ( depot ) ;
15735: LD_ADDR_VAR 0 10
15739: PUSH
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 274
15749: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15750: LD_ADDR_VAR 0 11
15754: PUSH
15755: LD_VAR 0 2
15759: PPUSH
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 248
15769: PPUSH
15770: CALL_OW 450
15774: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15775: LD_VAR 0 10
15779: PPUSH
15780: LD_INT 1
15782: PPUSH
15783: CALL_OW 275
15787: PUSH
15788: LD_VAR 0 11
15792: PUSH
15793: LD_INT 1
15795: ARRAY
15796: GREATEREQUAL
15797: IFFALSE 15823
15799: PUSH
15800: LD_VAR 0 10
15804: PPUSH
15805: LD_INT 2
15807: PPUSH
15808: CALL_OW 275
15812: PUSH
15813: LD_VAR 0 11
15817: PUSH
15818: LD_INT 2
15820: ARRAY
15821: GREATEREQUAL
15822: AND
15823: IFFALSE 15849
15825: PUSH
15826: LD_VAR 0 10
15830: PPUSH
15831: LD_INT 3
15833: PPUSH
15834: CALL_OW 275
15838: PUSH
15839: LD_VAR 0 11
15843: PUSH
15844: LD_INT 3
15846: ARRAY
15847: GREATEREQUAL
15848: AND
15849: NOT
15850: IFFALSE 15854
// exit ;
15852: GO 16457
// if GetBType ( depot ) = b_depot then
15854: LD_VAR 0 1
15858: PPUSH
15859: CALL_OW 266
15863: PUSH
15864: LD_INT 0
15866: EQUAL
15867: IFFALSE 15879
// dist := 28 else
15869: LD_ADDR_VAR 0 14
15873: PUSH
15874: LD_INT 28
15876: ST_TO_ADDR
15877: GO 15887
// dist := 36 ;
15879: LD_ADDR_VAR 0 14
15883: PUSH
15884: LD_INT 36
15886: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15887: LD_VAR 0 1
15891: PPUSH
15892: LD_VAR 0 3
15896: PPUSH
15897: LD_VAR 0 4
15901: PPUSH
15902: CALL_OW 297
15906: PUSH
15907: LD_VAR 0 14
15911: GREATER
15912: IFFALSE 15916
// exit ;
15914: GO 16457
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15916: LD_ADDR_VAR 0 12
15920: PUSH
15921: LD_VAR 0 2
15925: PPUSH
15926: LD_VAR 0 3
15930: PPUSH
15931: LD_VAR 0 4
15935: PPUSH
15936: LD_VAR 0 5
15940: PPUSH
15941: LD_VAR 0 1
15945: PPUSH
15946: CALL_OW 248
15950: PPUSH
15951: LD_INT 0
15953: PPUSH
15954: CALL 16462 0 6
15958: ST_TO_ADDR
// if not hexes then
15959: LD_VAR 0 12
15963: NOT
15964: IFFALSE 15968
// exit ;
15966: GO 16457
// hex := GetHexInfo ( x , y ) ;
15968: LD_ADDR_VAR 0 15
15972: PUSH
15973: LD_VAR 0 3
15977: PPUSH
15978: LD_VAR 0 4
15982: PPUSH
15983: CALL_OW 546
15987: ST_TO_ADDR
// if hex [ 1 ] then
15988: LD_VAR 0 15
15992: PUSH
15993: LD_INT 1
15995: ARRAY
15996: IFFALSE 16000
// exit ;
15998: GO 16457
// height := hex [ 2 ] ;
16000: LD_ADDR_VAR 0 13
16004: PUSH
16005: LD_VAR 0 15
16009: PUSH
16010: LD_INT 2
16012: ARRAY
16013: ST_TO_ADDR
// for i = 1 to hexes do
16014: LD_ADDR_VAR 0 7
16018: PUSH
16019: DOUBLE
16020: LD_INT 1
16022: DEC
16023: ST_TO_ADDR
16024: LD_VAR 0 12
16028: PUSH
16029: FOR_TO
16030: IFFALSE 16374
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16032: LD_VAR 0 12
16036: PUSH
16037: LD_VAR 0 7
16041: ARRAY
16042: PUSH
16043: LD_INT 1
16045: ARRAY
16046: PPUSH
16047: LD_VAR 0 12
16051: PUSH
16052: LD_VAR 0 7
16056: ARRAY
16057: PUSH
16058: LD_INT 2
16060: ARRAY
16061: PPUSH
16062: CALL_OW 488
16066: NOT
16067: IFTRUE 16109
16069: PUSH
16070: LD_VAR 0 12
16074: PUSH
16075: LD_VAR 0 7
16079: ARRAY
16080: PUSH
16081: LD_INT 1
16083: ARRAY
16084: PPUSH
16085: LD_VAR 0 12
16089: PUSH
16090: LD_VAR 0 7
16094: ARRAY
16095: PUSH
16096: LD_INT 2
16098: ARRAY
16099: PPUSH
16100: CALL_OW 428
16104: PUSH
16105: LD_INT 0
16107: GREATER
16108: OR
16109: IFTRUE 16147
16111: PUSH
16112: LD_VAR 0 12
16116: PUSH
16117: LD_VAR 0 7
16121: ARRAY
16122: PUSH
16123: LD_INT 1
16125: ARRAY
16126: PPUSH
16127: LD_VAR 0 12
16131: PUSH
16132: LD_VAR 0 7
16136: ARRAY
16137: PUSH
16138: LD_INT 2
16140: ARRAY
16141: PPUSH
16142: CALL_OW 351
16146: OR
16147: IFFALSE 16153
// exit ;
16149: POP
16150: POP
16151: GO 16457
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16153: LD_ADDR_VAR 0 8
16157: PUSH
16158: LD_VAR 0 12
16162: PUSH
16163: LD_VAR 0 7
16167: ARRAY
16168: PUSH
16169: LD_INT 1
16171: ARRAY
16172: PPUSH
16173: LD_VAR 0 12
16177: PUSH
16178: LD_VAR 0 7
16182: ARRAY
16183: PUSH
16184: LD_INT 2
16186: ARRAY
16187: PPUSH
16188: CALL_OW 546
16192: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16193: LD_VAR 0 8
16197: PUSH
16198: LD_INT 1
16200: ARRAY
16201: IFTRUE 16223
16203: PUSH
16204: LD_VAR 0 8
16208: PUSH
16209: LD_INT 2
16211: ARRAY
16212: PUSH
16213: LD_VAR 0 13
16217: PUSH
16218: LD_INT 2
16220: PLUS
16221: GREATER
16222: OR
16223: IFTRUE 16245
16225: PUSH
16226: LD_VAR 0 8
16230: PUSH
16231: LD_INT 2
16233: ARRAY
16234: PUSH
16235: LD_VAR 0 13
16239: PUSH
16240: LD_INT 2
16242: MINUS
16243: LESS
16244: OR
16245: IFTRUE 16313
16247: PUSH
16248: LD_VAR 0 8
16252: PUSH
16253: LD_INT 3
16255: ARRAY
16256: PUSH
16257: LD_INT 0
16259: PUSH
16260: LD_INT 8
16262: PUSH
16263: LD_INT 9
16265: PUSH
16266: LD_INT 10
16268: PUSH
16269: LD_INT 11
16271: PUSH
16272: LD_INT 12
16274: PUSH
16275: LD_INT 13
16277: PUSH
16278: LD_INT 16
16280: PUSH
16281: LD_INT 17
16283: PUSH
16284: LD_INT 18
16286: PUSH
16287: LD_INT 19
16289: PUSH
16290: LD_INT 20
16292: PUSH
16293: LD_INT 21
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: IN
16311: NOT
16312: OR
16313: IFTRUE 16326
16315: PUSH
16316: LD_VAR 0 8
16320: PUSH
16321: LD_INT 5
16323: ARRAY
16324: NOT
16325: OR
16326: IFTRUE 16366
16328: PUSH
16329: LD_VAR 0 8
16333: PUSH
16334: LD_INT 6
16336: ARRAY
16337: PUSH
16338: LD_INT 1
16340: PUSH
16341: LD_INT 2
16343: PUSH
16344: LD_INT 7
16346: PUSH
16347: LD_INT 9
16349: PUSH
16350: LD_INT 10
16352: PUSH
16353: LD_INT 11
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: IN
16364: NOT
16365: OR
16366: IFFALSE 16372
// exit ;
16368: POP
16369: POP
16370: GO 16457
// end ;
16372: GO 16029
16374: POP
16375: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16376: LD_VAR 0 9
16380: PPUSH
16381: LD_VAR 0 3
16385: PPUSH
16386: LD_VAR 0 4
16390: PPUSH
16391: LD_INT 20
16393: PPUSH
16394: CALL 8276 0 4
16398: PUSH
16399: LD_INT 4
16401: ARRAY
16402: IFFALSE 16406
// exit ;
16404: GO 16457
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16406: LD_VAR 0 2
16410: PUSH
16411: LD_INT 29
16413: PUSH
16414: LD_INT 30
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: IN
16421: IFFALSE 16445
16423: PUSH
16424: LD_VAR 0 3
16428: PPUSH
16429: LD_VAR 0 4
16433: PPUSH
16434: LD_VAR 0 9
16438: PPUSH
16439: CALL_OW 440
16443: NOT
16444: AND
16445: IFFALSE 16449
// exit ;
16447: GO 16457
// result := true ;
16449: LD_ADDR_VAR 0 6
16453: PUSH
16454: LD_INT 1
16456: ST_TO_ADDR
// end ;
16457: LD_VAR 0 6
16461: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16462: LD_INT 0
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
16470: PPUSH
16471: PPUSH
16472: PPUSH
16473: PPUSH
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
16478: PPUSH
16479: PPUSH
16480: PPUSH
16481: PPUSH
16482: PPUSH
16483: PPUSH
16484: PPUSH
16485: PPUSH
16486: PPUSH
16487: PPUSH
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
16496: PPUSH
16497: PPUSH
16498: PPUSH
16499: PPUSH
16500: PPUSH
16501: PPUSH
16502: PPUSH
16503: PPUSH
16504: PPUSH
16505: PPUSH
16506: PPUSH
16507: PPUSH
16508: PPUSH
16509: PPUSH
16510: PPUSH
16511: PPUSH
16512: PPUSH
16513: PPUSH
16514: PPUSH
16515: PPUSH
16516: PPUSH
16517: PPUSH
16518: PPUSH
16519: PPUSH
16520: PPUSH
16521: PPUSH
// result = [ ] ;
16522: LD_ADDR_VAR 0 7
16526: PUSH
16527: EMPTY
16528: ST_TO_ADDR
// temp_list = [ ] ;
16529: LD_ADDR_VAR 0 9
16533: PUSH
16534: EMPTY
16535: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16536: LD_VAR 0 4
16540: PUSH
16541: LD_INT 0
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 3
16552: PUSH
16553: LD_INT 4
16555: PUSH
16556: LD_INT 5
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: IN
16567: NOT
16568: IFTRUE 16611
16570: PUSH
16571: LD_VAR 0 1
16575: PUSH
16576: LD_INT 0
16578: PUSH
16579: LD_INT 1
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: IN
16586: IFFALSE 16610
16588: PUSH
16589: LD_VAR 0 5
16593: PUSH
16594: LD_INT 1
16596: PUSH
16597: LD_INT 2
16599: PUSH
16600: LD_INT 3
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: IN
16608: NOT
16609: AND
16610: OR
16611: IFFALSE 16615
// exit ;
16613: GO 35014
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16615: LD_VAR 0 1
16619: PUSH
16620: LD_INT 6
16622: PUSH
16623: LD_INT 7
16625: PUSH
16626: LD_INT 8
16628: PUSH
16629: LD_INT 13
16631: PUSH
16632: LD_INT 12
16634: PUSH
16635: LD_INT 15
16637: PUSH
16638: LD_INT 11
16640: PUSH
16641: LD_INT 14
16643: PUSH
16644: LD_INT 10
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: IN
16658: IFFALSE 16668
// btype = b_lab ;
16660: LD_ADDR_VAR 0 1
16664: PUSH
16665: LD_INT 6
16667: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16668: LD_VAR 0 6
16672: PUSH
16673: LD_INT 0
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: LD_INT 2
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: IN
16687: NOT
16688: IFTRUE 16756
16690: PUSH
16691: LD_VAR 0 1
16695: PUSH
16696: LD_INT 0
16698: PUSH
16699: LD_INT 1
16701: PUSH
16702: LD_INT 2
16704: PUSH
16705: LD_INT 3
16707: PUSH
16708: LD_INT 6
16710: PUSH
16711: LD_INT 36
16713: PUSH
16714: LD_INT 4
16716: PUSH
16717: LD_INT 5
16719: PUSH
16720: LD_INT 31
16722: PUSH
16723: LD_INT 32
16725: PUSH
16726: LD_INT 33
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: IN
16742: NOT
16743: IFFALSE 16755
16745: PUSH
16746: LD_VAR 0 6
16750: PUSH
16751: LD_INT 1
16753: EQUAL
16754: AND
16755: OR
16756: IFTRUE 16788
16758: PUSH
16759: LD_VAR 0 1
16763: PUSH
16764: LD_INT 2
16766: PUSH
16767: LD_INT 3
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: IN
16774: NOT
16775: IFFALSE 16787
16777: PUSH
16778: LD_VAR 0 6
16782: PUSH
16783: LD_INT 2
16785: EQUAL
16786: AND
16787: OR
16788: IFFALSE 16798
// mode = 0 ;
16790: LD_ADDR_VAR 0 6
16794: PUSH
16795: LD_INT 0
16797: ST_TO_ADDR
// case mode of 0 :
16798: LD_VAR 0 6
16802: PUSH
16803: LD_INT 0
16805: DOUBLE
16806: EQUAL
16807: IFTRUE 16811
16809: GO 28264
16811: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16812: LD_ADDR_VAR 0 11
16816: PUSH
16817: LD_INT 0
16819: PUSH
16820: LD_INT 0
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 0
16829: PUSH
16830: LD_INT 1
16832: NEG
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 1
16840: PUSH
16841: LD_INT 0
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 1
16850: PUSH
16851: LD_INT 1
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 0
16860: PUSH
16861: LD_INT 1
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 1
16870: NEG
16871: PUSH
16872: LD_INT 0
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 1
16881: NEG
16882: PUSH
16883: LD_INT 1
16885: NEG
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 1
16893: NEG
16894: PUSH
16895: LD_INT 2
16897: NEG
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 0
16905: PUSH
16906: LD_INT 2
16908: NEG
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 1
16916: PUSH
16917: LD_INT 1
16919: NEG
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 0
16937: PUSH
16938: LD_INT 2
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 1
16947: NEG
16948: PUSH
16949: LD_INT 1
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 1
16958: PUSH
16959: LD_INT 3
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 0
16968: PUSH
16969: LD_INT 3
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 1
16978: NEG
16979: PUSH
16980: LD_INT 2
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17005: LD_ADDR_VAR 0 12
17009: PUSH
17010: LD_INT 0
17012: PUSH
17013: LD_INT 0
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 0
17022: PUSH
17023: LD_INT 1
17025: NEG
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 1
17033: PUSH
17034: LD_INT 0
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: LD_INT 1
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 1
17063: NEG
17064: PUSH
17065: LD_INT 0
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 1
17074: NEG
17075: PUSH
17076: LD_INT 1
17078: NEG
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: LD_INT 1
17089: NEG
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 2
17097: PUSH
17098: LD_INT 0
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 2
17107: PUSH
17108: LD_INT 1
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 1
17117: NEG
17118: PUSH
17119: LD_INT 1
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 2
17128: NEG
17129: PUSH
17130: LD_INT 0
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 2
17139: NEG
17140: PUSH
17141: LD_INT 1
17143: NEG
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 2
17151: NEG
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 3
17162: NEG
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 3
17173: NEG
17174: PUSH
17175: LD_INT 1
17177: NEG
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17201: LD_ADDR_VAR 0 13
17205: PUSH
17206: LD_INT 0
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: LD_INT 1
17221: NEG
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 1
17229: PUSH
17230: LD_INT 0
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 0
17249: PUSH
17250: LD_INT 1
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: NEG
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 1
17270: NEG
17271: PUSH
17272: LD_INT 1
17274: NEG
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 1
17282: NEG
17283: PUSH
17284: LD_INT 2
17286: NEG
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 2
17294: PUSH
17295: LD_INT 1
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 2
17304: PUSH
17305: LD_INT 2
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 1
17314: PUSH
17315: LD_INT 2
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 2
17324: NEG
17325: PUSH
17326: LD_INT 1
17328: NEG
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 2
17336: NEG
17337: PUSH
17338: LD_INT 2
17340: NEG
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 2
17348: NEG
17349: PUSH
17350: LD_INT 3
17352: NEG
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 3
17360: NEG
17361: PUSH
17362: LD_INT 2
17364: NEG
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 3
17372: NEG
17373: PUSH
17374: LD_INT 3
17376: NEG
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17400: LD_ADDR_VAR 0 14
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: LD_INT 0
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 0
17417: PUSH
17418: LD_INT 1
17420: NEG
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: LD_INT 0
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 1
17438: PUSH
17439: LD_INT 1
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 0
17448: PUSH
17449: LD_INT 1
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 1
17458: NEG
17459: PUSH
17460: LD_INT 0
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: LD_INT 1
17469: NEG
17470: PUSH
17471: LD_INT 1
17473: NEG
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 1
17481: NEG
17482: PUSH
17483: LD_INT 2
17485: NEG
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 0
17493: PUSH
17494: LD_INT 2
17496: NEG
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: LD_INT 1
17507: NEG
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 1
17515: PUSH
17516: LD_INT 2
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 0
17525: PUSH
17526: LD_INT 2
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 1
17535: NEG
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 1
17546: NEG
17547: PUSH
17548: LD_INT 3
17550: NEG
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 0
17558: PUSH
17559: LD_INT 3
17561: NEG
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: LD_INT 2
17572: NEG
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17596: LD_ADDR_VAR 0 15
17600: PUSH
17601: LD_INT 0
17603: PUSH
17604: LD_INT 0
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 0
17613: PUSH
17614: LD_INT 1
17616: NEG
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 1
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 1
17634: PUSH
17635: LD_INT 1
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 0
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 1
17654: NEG
17655: PUSH
17656: LD_INT 0
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 1
17665: NEG
17666: PUSH
17667: LD_INT 1
17669: NEG
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: LD_INT 1
17680: NEG
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 2
17688: PUSH
17689: LD_INT 0
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 2
17698: PUSH
17699: LD_INT 1
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 1
17708: NEG
17709: PUSH
17710: LD_INT 1
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 2
17719: NEG
17720: PUSH
17721: LD_INT 0
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 2
17730: NEG
17731: PUSH
17732: LD_INT 1
17734: NEG
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 2
17742: PUSH
17743: LD_INT 1
17745: NEG
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 3
17753: PUSH
17754: LD_INT 0
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 3
17763: PUSH
17764: LD_INT 1
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17789: LD_ADDR_VAR 0 16
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: LD_INT 0
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: LD_INT 1
17809: NEG
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: LD_INT 0
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 1
17847: NEG
17848: PUSH
17849: LD_INT 0
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 1
17858: NEG
17859: PUSH
17860: LD_INT 1
17862: NEG
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 1
17870: NEG
17871: PUSH
17872: LD_INT 2
17874: NEG
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 2
17882: PUSH
17883: LD_INT 1
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 2
17892: PUSH
17893: LD_INT 2
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: LD_INT 2
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 2
17912: NEG
17913: PUSH
17914: LD_INT 1
17916: NEG
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 2
17924: NEG
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 3
17936: PUSH
17937: LD_INT 2
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 3
17946: PUSH
17947: LD_INT 3
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 2
17956: PUSH
17957: LD_INT 3
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17982: LD_ADDR_VAR 0 17
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: LD_INT 0
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: LD_INT 1
18002: NEG
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 1
18010: PUSH
18011: LD_INT 0
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 0
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 1
18040: NEG
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 1
18051: NEG
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: NEG
18064: PUSH
18065: LD_INT 2
18067: NEG
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: LD_INT 2
18078: NEG
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: LD_INT 1
18089: NEG
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: LD_INT 0
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: LD_INT 2
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: LD_INT 2
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 2
18158: NEG
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 2
18169: NEG
18170: PUSH
18171: LD_INT 1
18173: NEG
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 2
18181: NEG
18182: PUSH
18183: LD_INT 2
18185: NEG
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18212: LD_ADDR_VAR 0 18
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: LD_INT 0
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: LD_INT 1
18232: NEG
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 1
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 1
18270: NEG
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 1
18281: NEG
18282: PUSH
18283: LD_INT 1
18285: NEG
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 1
18293: NEG
18294: PUSH
18295: LD_INT 2
18297: NEG
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: LD_INT 2
18308: NEG
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 1
18319: NEG
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 2
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 2
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: LD_INT 2
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: LD_INT 2
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 1
18377: NEG
18378: PUSH
18379: LD_INT 1
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 2
18388: NEG
18389: PUSH
18390: LD_INT 0
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 2
18399: NEG
18400: PUSH
18401: LD_INT 1
18403: NEG
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 2
18411: NEG
18412: PUSH
18413: LD_INT 2
18415: NEG
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18442: LD_ADDR_VAR 0 19
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: LD_INT 0
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 1
18470: PUSH
18471: LD_INT 0
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 0
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 1
18500: NEG
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 1
18511: NEG
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 1
18523: NEG
18524: PUSH
18525: LD_INT 2
18527: NEG
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: LD_INT 2
18538: NEG
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: LD_INT 1
18549: NEG
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 2
18557: PUSH
18558: LD_INT 0
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 2
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: LD_INT 2
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: LD_INT 2
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 2
18618: NEG
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 2
18629: NEG
18630: PUSH
18631: LD_INT 1
18633: NEG
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 2
18641: NEG
18642: PUSH
18643: LD_INT 2
18645: NEG
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18672: LD_ADDR_VAR 0 20
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 0
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 0
18689: PUSH
18690: LD_INT 1
18692: NEG
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 1
18700: PUSH
18701: LD_INT 0
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 1
18710: PUSH
18711: LD_INT 1
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 0
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 1
18730: NEG
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 1
18741: NEG
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 1
18753: NEG
18754: PUSH
18755: LD_INT 2
18757: NEG
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: LD_INT 2
18768: NEG
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: LD_INT 1
18779: NEG
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 2
18787: PUSH
18788: LD_INT 0
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 2
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 2
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: LD_INT 2
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 2
18848: NEG
18849: PUSH
18850: LD_INT 0
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 2
18859: NEG
18860: PUSH
18861: LD_INT 1
18863: NEG
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 2
18871: NEG
18872: PUSH
18873: LD_INT 2
18875: NEG
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18902: LD_ADDR_VAR 0 21
18906: PUSH
18907: LD_INT 0
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 1
18922: NEG
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: PUSH
18931: LD_INT 0
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 1
18960: NEG
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: NEG
18972: PUSH
18973: LD_INT 1
18975: NEG
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 1
18983: NEG
18984: PUSH
18985: LD_INT 2
18987: NEG
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: LD_INT 2
18998: NEG
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: LD_INT 1
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 2
19078: NEG
19079: PUSH
19080: LD_INT 0
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 2
19089: NEG
19090: PUSH
19091: LD_INT 1
19093: NEG
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: NEG
19102: PUSH
19103: LD_INT 2
19105: NEG
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19132: LD_ADDR_VAR 0 22
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: LD_INT 0
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 0
19149: PUSH
19150: LD_INT 1
19152: NEG
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: PUSH
19161: LD_INT 0
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: LD_INT 1
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 0
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 1
19190: NEG
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: LD_INT 1
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 1
19213: NEG
19214: PUSH
19215: LD_INT 2
19217: NEG
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: LD_INT 2
19228: NEG
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 1
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 2
19247: PUSH
19248: LD_INT 0
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 2
19257: PUSH
19258: LD_INT 1
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 2
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: LD_INT 2
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 1
19297: NEG
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 2
19308: NEG
19309: PUSH
19310: LD_INT 0
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 2
19319: NEG
19320: PUSH
19321: LD_INT 1
19323: NEG
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 2
19331: NEG
19332: PUSH
19333: LD_INT 2
19335: NEG
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19362: LD_ADDR_VAR 0 23
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: LD_INT 0
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 0
19379: PUSH
19380: LD_INT 1
19382: NEG
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: LD_INT 0
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 1
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 0
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 1
19420: NEG
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 1
19443: NEG
19444: PUSH
19445: LD_INT 2
19447: NEG
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 0
19455: PUSH
19456: LD_INT 2
19458: NEG
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 2
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 2
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: LD_INT 2
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 2
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: LD_INT 2
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 2
19538: NEG
19539: PUSH
19540: LD_INT 0
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 2
19549: NEG
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 2
19561: NEG
19562: PUSH
19563: LD_INT 2
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 2
19573: NEG
19574: PUSH
19575: LD_INT 3
19577: NEG
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 1
19585: NEG
19586: PUSH
19587: LD_INT 3
19589: NEG
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 1
19597: PUSH
19598: LD_INT 2
19600: NEG
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19642: LD_ADDR_VAR 0 24
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 0
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 1
19700: NEG
19701: PUSH
19702: LD_INT 0
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: NEG
19712: PUSH
19713: LD_INT 1
19715: NEG
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: LD_INT 2
19727: NEG
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: LD_INT 2
19738: NEG
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: LD_INT 2
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 1
19807: NEG
19808: PUSH
19809: LD_INT 1
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 2
19818: NEG
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 2
19829: NEG
19830: PUSH
19831: LD_INT 1
19833: NEG
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 2
19841: NEG
19842: PUSH
19843: LD_INT 2
19845: NEG
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 1
19853: PUSH
19854: LD_INT 2
19856: NEG
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 2
19864: PUSH
19865: LD_INT 1
19867: NEG
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 3
19875: PUSH
19876: LD_INT 1
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 3
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19918: LD_ADDR_VAR 0 25
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: LD_INT 0
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: LD_INT 0
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 0
19966: PUSH
19967: LD_INT 1
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 1
19976: NEG
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: LD_INT 2
20003: NEG
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: LD_INT 2
20014: NEG
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 1
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 2
20033: PUSH
20034: LD_INT 0
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 2
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: LD_INT 2
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: LD_INT 2
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: LD_INT 2
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: LD_INT 1
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 2
20094: NEG
20095: PUSH
20096: LD_INT 0
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 2
20105: NEG
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 2
20117: NEG
20118: PUSH
20119: LD_INT 2
20121: NEG
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 3
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 3
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 2
20149: PUSH
20150: LD_INT 3
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: LD_INT 3
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20192: LD_ADDR_VAR 0 26
20196: PUSH
20197: LD_INT 0
20199: PUSH
20200: LD_INT 0
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 0
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: LD_INT 0
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: LD_INT 1
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 0
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 1
20261: NEG
20262: PUSH
20263: LD_INT 1
20265: NEG
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: LD_INT 2
20277: NEG
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 0
20285: PUSH
20286: LD_INT 2
20288: NEG
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: LD_INT 1
20299: NEG
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 2
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 2
20327: PUSH
20328: LD_INT 2
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: LD_INT 2
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: LD_INT 2
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 1
20357: NEG
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 2
20368: NEG
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 2
20379: NEG
20380: PUSH
20381: LD_INT 1
20383: NEG
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 2
20391: NEG
20392: PUSH
20393: LD_INT 2
20395: NEG
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 2
20403: PUSH
20404: LD_INT 3
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: LD_INT 3
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 2
20434: NEG
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20468: LD_ADDR_VAR 0 27
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: LD_INT 0
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 0
20485: PUSH
20486: LD_INT 1
20488: NEG
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 1
20496: PUSH
20497: LD_INT 0
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: LD_INT 1
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 0
20516: PUSH
20517: LD_INT 1
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 1
20526: NEG
20527: PUSH
20528: LD_INT 0
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 1
20537: NEG
20538: PUSH
20539: LD_INT 1
20541: NEG
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 1
20549: NEG
20550: PUSH
20551: LD_INT 2
20553: NEG
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 0
20561: PUSH
20562: LD_INT 2
20564: NEG
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 1
20572: PUSH
20573: LD_INT 1
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 2
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 2
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: LD_INT 2
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 1
20633: NEG
20634: PUSH
20635: LD_INT 1
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 2
20644: NEG
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 2
20655: NEG
20656: PUSH
20657: LD_INT 1
20659: NEG
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 2
20667: NEG
20668: PUSH
20669: LD_INT 2
20671: NEG
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 1
20679: NEG
20680: PUSH
20681: LD_INT 2
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 2
20690: NEG
20691: PUSH
20692: LD_INT 1
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 3
20701: NEG
20702: PUSH
20703: LD_INT 1
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 3
20713: NEG
20714: PUSH
20715: LD_INT 2
20717: NEG
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20748: LD_ADDR_VAR 0 28
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: LD_INT 0
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 0
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: LD_INT 0
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 1
20817: NEG
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: LD_INT 2
20833: NEG
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 1
20852: PUSH
20853: LD_INT 1
20855: NEG
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 2
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 2
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: LD_INT 2
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: NEG
20914: PUSH
20915: LD_INT 1
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 2
20924: NEG
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 2
20935: NEG
20936: PUSH
20937: LD_INT 1
20939: NEG
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 2
20947: NEG
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 2
20959: NEG
20960: PUSH
20961: LD_INT 3
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: LD_INT 3
20975: NEG
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 3
20983: NEG
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 3
20995: NEG
20996: PUSH
20997: LD_INT 2
20999: NEG
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21030: LD_ADDR_VAR 0 29
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 0
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 1
21058: PUSH
21059: LD_INT 0
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 1
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 0
21078: PUSH
21079: LD_INT 1
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 1
21088: NEG
21089: PUSH
21090: LD_INT 0
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: NEG
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: NEG
21112: PUSH
21113: LD_INT 2
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: LD_INT 2
21126: NEG
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: LD_INT 1
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 2
21145: PUSH
21146: LD_INT 0
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 2
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: LD_INT 2
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 1
21185: NEG
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 2
21196: NEG
21197: PUSH
21198: LD_INT 1
21200: NEG
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 2
21208: NEG
21209: PUSH
21210: LD_INT 2
21212: NEG
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 2
21220: NEG
21221: PUSH
21222: LD_INT 3
21224: NEG
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: LD_INT 1
21235: NEG
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 3
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: LD_INT 3
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 1
21263: NEG
21264: PUSH
21265: LD_INT 2
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 3
21274: NEG
21275: PUSH
21276: LD_INT 2
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21309: LD_ADDR_VAR 0 30
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: LD_INT 0
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: LD_INT 1
21329: NEG
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 1
21337: PUSH
21338: LD_INT 0
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 0
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 1
21367: NEG
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: LD_INT 1
21382: NEG
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: NEG
21391: PUSH
21392: LD_INT 2
21394: NEG
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 0
21402: PUSH
21403: LD_INT 2
21405: NEG
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 1
21416: NEG
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 2
21424: PUSH
21425: LD_INT 0
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: LD_INT 2
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: LD_INT 2
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 1
21464: NEG
21465: PUSH
21466: LD_INT 1
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 2
21475: NEG
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 2
21486: NEG
21487: PUSH
21488: LD_INT 1
21490: NEG
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: NEG
21499: PUSH
21500: LD_INT 3
21502: NEG
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 1
21510: PUSH
21511: LD_INT 2
21513: NEG
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 3
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 2
21531: PUSH
21532: LD_INT 3
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 2
21541: NEG
21542: PUSH
21543: LD_INT 1
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 3
21552: NEG
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21587: LD_ADDR_VAR 0 31
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 0
21604: PUSH
21605: LD_INT 1
21607: NEG
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: LD_INT 0
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 1
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 0
21635: PUSH
21636: LD_INT 1
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 1
21645: NEG
21646: PUSH
21647: LD_INT 0
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 1
21656: NEG
21657: PUSH
21658: LD_INT 1
21660: NEG
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 1
21668: NEG
21669: PUSH
21670: LD_INT 2
21672: NEG
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 1
21680: PUSH
21681: LD_INT 1
21683: NEG
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 2
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: LD_INT 1
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: NEG
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 2
21764: NEG
21765: PUSH
21766: LD_INT 2
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 2
21776: NEG
21777: PUSH
21778: LD_INT 3
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: LD_INT 1
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 3
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: LD_INT 3
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 1
21819: NEG
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 3
21830: NEG
21831: PUSH
21832: LD_INT 2
21834: NEG
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21865: LD_ADDR_VAR 0 32
21869: PUSH
21870: LD_INT 0
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: LD_INT 1
21885: NEG
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 1
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 1
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 0
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 1
21923: NEG
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: NEG
21947: PUSH
21948: LD_INT 2
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: LD_INT 2
21961: NEG
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: LD_INT 1
21972: NEG
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 2
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 2
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: LD_INT 2
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 0
22010: PUSH
22011: LD_INT 2
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 1
22020: NEG
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 2
22031: NEG
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 2
22042: NEG
22043: PUSH
22044: LD_INT 1
22046: NEG
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 1
22054: NEG
22055: PUSH
22056: LD_INT 3
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: LD_INT 2
22069: NEG
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 3
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: LD_INT 3
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 2
22097: NEG
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 3
22108: NEG
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22143: LD_ADDR_VAR 0 33
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 0
22160: PUSH
22161: LD_INT 1
22163: NEG
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 0
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: NEG
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: LD_INT 2
22228: NEG
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: LD_INT 1
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 2
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: LD_INT 2
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 2
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 2
22298: NEG
22299: PUSH
22300: LD_INT 0
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 2
22309: NEG
22310: PUSH
22311: LD_INT 1
22313: NEG
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 2
22321: NEG
22322: PUSH
22323: LD_INT 2
22325: NEG
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 2
22333: NEG
22334: PUSH
22335: LD_INT 3
22337: NEG
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 2
22345: PUSH
22346: LD_INT 1
22348: NEG
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 3
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: LD_INT 3
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 3
22387: NEG
22388: PUSH
22389: LD_INT 2
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22422: LD_ADDR_VAR 0 34
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: LD_INT 0
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 0
22470: PUSH
22471: LD_INT 1
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: LD_INT 0
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: LD_INT 1
22495: NEG
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: LD_INT 2
22507: NEG
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 0
22515: PUSH
22516: LD_INT 2
22518: NEG
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 2
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 2
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: PUSH
22558: LD_INT 2
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: LD_INT 1
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 2
22578: NEG
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 2
22589: NEG
22590: PUSH
22591: LD_INT 1
22593: NEG
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: NEG
22602: PUSH
22603: LD_INT 2
22605: NEG
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: LD_INT 3
22617: NEG
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 1
22625: PUSH
22626: LD_INT 2
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 3
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 2
22646: PUSH
22647: LD_INT 3
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 2
22656: NEG
22657: PUSH
22658: LD_INT 1
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 3
22667: NEG
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22702: LD_ADDR_VAR 0 35
22706: PUSH
22707: LD_INT 0
22709: PUSH
22710: LD_INT 0
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 0
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: LD_INT 0
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 0
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: NEG
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 1
22771: NEG
22772: PUSH
22773: LD_INT 1
22775: NEG
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 2
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 2
22793: NEG
22794: PUSH
22795: LD_INT 1
22797: NEG
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22814: LD_ADDR_VAR 0 36
22818: PUSH
22819: LD_INT 0
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 0
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 0
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 1
22883: NEG
22884: PUSH
22885: LD_INT 1
22887: NEG
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: LD_INT 2
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22926: LD_ADDR_VAR 0 37
22930: PUSH
22931: LD_INT 0
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 0
22943: PUSH
22944: LD_INT 1
22946: NEG
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: LD_INT 0
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 1
22995: NEG
22996: PUSH
22997: LD_INT 1
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 1
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 1
23018: NEG
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23038: LD_ADDR_VAR 0 38
23042: PUSH
23043: LD_INT 0
23045: PUSH
23046: LD_INT 0
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: LD_INT 1
23058: NEG
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 1
23066: PUSH
23067: LD_INT 0
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: LD_INT 0
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: LD_INT 1
23111: NEG
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: LD_INT 1
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 2
23129: NEG
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23150: LD_ADDR_VAR 0 39
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: LD_INT 0
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: LD_INT 1
23170: NEG
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 1
23178: PUSH
23179: LD_INT 0
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: LD_INT 1
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 1
23219: NEG
23220: PUSH
23221: LD_INT 1
23223: NEG
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 1
23231: NEG
23232: PUSH
23233: LD_INT 2
23235: NEG
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: LD_INT 2
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23262: LD_ADDR_VAR 0 40
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: LD_INT 0
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 0
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 0
23310: PUSH
23311: LD_INT 1
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 1
23331: NEG
23332: PUSH
23333: LD_INT 1
23335: NEG
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 1
23343: PUSH
23344: LD_INT 1
23346: NEG
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23374: LD_ADDR_VAR 0 41
23378: PUSH
23379: LD_INT 0
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: LD_INT 1
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: NEG
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 1
23455: NEG
23456: PUSH
23457: LD_INT 2
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: LD_INT 1
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: LD_INT 1
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: LD_INT 2
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: LD_INT 1
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 2
23529: NEG
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 2
23540: NEG
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 2
23552: NEG
23553: PUSH
23554: LD_INT 2
23556: NEG
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 2
23564: NEG
23565: PUSH
23566: LD_INT 3
23568: NEG
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 2
23576: PUSH
23577: LD_INT 1
23579: NEG
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 3
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 3
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 3
23607: PUSH
23608: LD_INT 2
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 3
23617: PUSH
23618: LD_INT 3
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 2
23627: PUSH
23628: LD_INT 3
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 2
23637: NEG
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 3
23648: NEG
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 3
23659: NEG
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 3
23671: NEG
23672: PUSH
23673: LD_INT 2
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 3
23683: NEG
23684: PUSH
23685: LD_INT 3
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23724: LD_ADDR_VAR 0 42
23728: PUSH
23729: LD_INT 0
23731: PUSH
23732: LD_INT 0
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 0
23741: PUSH
23742: LD_INT 1
23744: NEG
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: LD_INT 0
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: LD_INT 1
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: LD_INT 1
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: NEG
23794: PUSH
23795: LD_INT 1
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 1
23805: NEG
23806: PUSH
23807: LD_INT 2
23809: NEG
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: LD_INT 2
23820: NEG
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 1
23828: PUSH
23829: LD_INT 1
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: LD_INT 2
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: LD_INT 2
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 1
23879: NEG
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 2
23890: NEG
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 2
23902: NEG
23903: PUSH
23904: LD_INT 2
23906: NEG
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 2
23914: NEG
23915: PUSH
23916: LD_INT 3
23918: NEG
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: NEG
23927: PUSH
23928: LD_INT 3
23930: NEG
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: LD_INT 3
23941: NEG
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: LD_INT 2
23952: NEG
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 3
23960: PUSH
23961: LD_INT 2
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 3
23970: PUSH
23971: LD_INT 3
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 3
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: LD_INT 3
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 3
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: LD_INT 2
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 3
24021: NEG
24022: PUSH
24023: LD_INT 2
24025: NEG
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 3
24033: NEG
24034: PUSH
24035: LD_INT 3
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24074: LD_ADDR_VAR 0 43
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 0
24091: PUSH
24092: LD_INT 1
24094: NEG
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 1
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: LD_INT 1
24147: NEG
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 1
24155: NEG
24156: PUSH
24157: LD_INT 2
24159: NEG
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: LD_INT 2
24170: NEG
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 2
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 2
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 1
24209: PUSH
24210: LD_INT 2
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: LD_INT 2
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 1
24229: NEG
24230: PUSH
24231: LD_INT 1
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: NEG
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 2
24251: NEG
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 1
24263: NEG
24264: PUSH
24265: LD_INT 3
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 3
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: LD_INT 2
24289: NEG
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 3
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 3
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: LD_INT 3
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: LD_INT 3
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 2
24359: NEG
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 3
24370: NEG
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 3
24381: NEG
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24422: LD_ADDR_VAR 0 44
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: LD_INT 0
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: LD_INT 0
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 1
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: LD_INT 1
24495: NEG
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 1
24503: NEG
24504: PUSH
24505: LD_INT 2
24507: NEG
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 1
24515: PUSH
24516: LD_INT 1
24518: NEG
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 2
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 2
24546: PUSH
24547: LD_INT 2
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 2
24577: NEG
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: NEG
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 2
24600: NEG
24601: PUSH
24602: LD_INT 2
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 2
24612: NEG
24613: PUSH
24614: LD_INT 3
24616: NEG
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: LD_INT 1
24627: NEG
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 3
24635: PUSH
24636: LD_INT 0
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 3
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 3
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 3
24665: PUSH
24666: LD_INT 3
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: LD_INT 1
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 3
24696: NEG
24697: PUSH
24698: LD_INT 0
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 3
24707: NEG
24708: PUSH
24709: LD_INT 1
24711: NEG
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 3
24719: NEG
24720: PUSH
24721: LD_INT 2
24723: NEG
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 3
24731: NEG
24732: PUSH
24733: LD_INT 3
24735: NEG
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24772: LD_ADDR_VAR 0 45
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: LD_INT 0
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: LD_INT 1
24792: NEG
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: NEG
24842: PUSH
24843: LD_INT 1
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 1
24853: NEG
24854: PUSH
24855: LD_INT 2
24857: NEG
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: LD_INT 2
24868: NEG
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 2
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 2
24938: NEG
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 2
24950: NEG
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 2
24962: NEG
24963: PUSH
24964: LD_INT 3
24966: NEG
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: LD_INT 3
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: LD_INT 3
24989: NEG
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: LD_INT 2
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 3
25008: PUSH
25009: LD_INT 2
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 3
25018: PUSH
25019: LD_INT 3
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 2
25028: PUSH
25029: LD_INT 3
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 3
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: LD_INT 3
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: NEG
25059: PUSH
25060: LD_INT 2
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 3
25069: NEG
25070: PUSH
25071: LD_INT 2
25073: NEG
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 3
25081: NEG
25082: PUSH
25083: LD_INT 3
25085: NEG
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25122: LD_ADDR_VAR 0 46
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: LD_INT 1
25142: NEG
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: LD_INT 1
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: LD_INT 0
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 1
25203: NEG
25204: PUSH
25205: LD_INT 2
25207: NEG
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: PUSH
25238: LD_INT 0
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 2
25247: PUSH
25248: LD_INT 1
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: LD_INT 2
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 2
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 1
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 2
25288: NEG
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: NEG
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: LD_INT 3
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: LD_INT 3
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: LD_INT 2
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 2
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 3
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 3
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: LD_INT 3
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: LD_INT 3
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 2
25407: NEG
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 3
25418: NEG
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 3
25429: NEG
25430: PUSH
25431: LD_INT 1
25433: NEG
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25470: LD_ADDR_VAR 0 47
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: LD_INT 1
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: LD_INT 0
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: NEG
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 1
25551: NEG
25552: PUSH
25553: LD_INT 2
25555: NEG
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: LD_INT 2
25566: NEG
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 2
25585: NEG
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: LD_INT 2
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25621: LD_ADDR_VAR 0 48
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 1
25679: NEG
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: LD_INT 1
25694: NEG
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PUSH
25704: LD_INT 2
25706: NEG
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: LD_INT 2
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: LD_INT 1
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 2
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 2
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25768: LD_ADDR_VAR 0 49
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: LD_INT 1
25788: NEG
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 0
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 1
25826: NEG
25827: PUSH
25828: LD_INT 0
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: LD_INT 1
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 2
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 2
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 2
25880: PUSH
25881: LD_INT 2
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: LD_INT 2
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25912: LD_ADDR_VAR 0 50
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: LD_INT 0
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: LD_INT 1
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: NEG
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 1
25981: NEG
25982: PUSH
25983: LD_INT 1
25985: NEG
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: LD_INT 2
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: LD_INT 2
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26056: LD_ADDR_VAR 0 51
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: LD_INT 1
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 0
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 1
26114: NEG
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: LD_INT 1
26129: NEG
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: LD_INT 2
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: LD_INT 2
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 2
26168: NEG
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 2
26179: NEG
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26203: LD_ADDR_VAR 0 52
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: LD_INT 2
26288: NEG
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 1
26296: NEG
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 2
26307: NEG
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 2
26318: NEG
26319: PUSH
26320: LD_INT 1
26322: NEG
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 2
26330: NEG
26331: PUSH
26332: LD_INT 2
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26354: LD_ADDR_VAR 0 53
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 0
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: NEG
26436: PUSH
26437: LD_INT 2
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 2
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 2
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 2
26530: NEG
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 2
26541: NEG
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26584: LD_ADDR_VAR 0 54
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 0
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: LD_INT 1
26604: NEG
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: NEG
26666: PUSH
26667: LD_INT 2
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 2
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 2
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 2
26760: NEG
26761: PUSH
26762: LD_INT 0
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 2
26771: NEG
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: LD_INT 2
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26814: LD_ADDR_VAR 0 55
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: LD_INT 1
26834: NEG
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 1
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: LD_INT 2
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 2
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 2
26990: NEG
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 2
27001: NEG
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: NEG
27014: PUSH
27015: LD_INT 2
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27044: LD_ADDR_VAR 0 56
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 1
27082: PUSH
27083: LD_INT 1
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: LD_INT 0
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 1
27125: NEG
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: LD_INT 2
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 2
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 2
27179: PUSH
27180: LD_INT 2
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 2
27231: NEG
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: NEG
27244: PUSH
27245: LD_INT 2
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27274: LD_ADDR_VAR 0 57
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 2
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 2
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 2
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 2
27409: PUSH
27410: LD_INT 2
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: PUSH
27420: LD_INT 2
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: LD_INT 2
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: LD_INT 1
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 2
27450: NEG
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 2
27461: NEG
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: NEG
27474: PUSH
27475: LD_INT 2
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27504: LD_ADDR_VAR 0 58
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: LD_INT 1
27524: NEG
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: LD_INT 1
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 1
27562: NEG
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: LD_INT 2
27600: NEG
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 2
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 2
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 2
27639: PUSH
27640: LD_INT 2
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 1
27649: PUSH
27650: LD_INT 2
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: LD_INT 2
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 2
27680: NEG
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 2
27703: NEG
27704: PUSH
27705: LD_INT 2
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27734: LD_ADDR_VAR 0 59
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: LD_INT 1
27754: NEG
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27822: LD_ADDR_VAR 0 60
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: LD_INT 0
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: LD_INT 1
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: LD_INT 0
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27910: LD_ADDR_VAR 0 61
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 0
27927: PUSH
27928: LD_INT 1
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: LD_INT 1
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27998: LD_ADDR_VAR 0 62
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 0
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: LD_INT 1
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28086: LD_ADDR_VAR 0 63
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 1
28144: NEG
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: LD_INT 1
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28174: LD_ADDR_VAR 0 64
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 1
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: NEG
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 1
28243: NEG
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: ST_TO_ADDR
// end ; 1 :
28262: GO 34159
28264: LD_INT 1
28266: DOUBLE
28267: EQUAL
28268: IFTRUE 28272
28270: GO 30895
28272: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28273: LD_ADDR_VAR 0 11
28277: PUSH
28278: LD_INT 1
28280: NEG
28281: PUSH
28282: LD_INT 3
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: LD_INT 3
28295: NEG
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: LD_INT 2
28306: NEG
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: LIST
28316: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28317: LD_ADDR_VAR 0 12
28321: PUSH
28322: LD_INT 2
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 3
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 3
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: LIST
28357: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28358: LD_ADDR_VAR 0 13
28362: PUSH
28363: LD_INT 3
28365: PUSH
28366: LD_INT 2
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 3
28375: PUSH
28376: LD_INT 3
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 2
28385: PUSH
28386: LD_INT 3
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: LIST
28397: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28398: LD_ADDR_VAR 0 14
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: LD_INT 3
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: LD_INT 3
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: LIST
28438: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28439: LD_ADDR_VAR 0 15
28443: PUSH
28444: LD_INT 2
28446: NEG
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 3
28457: NEG
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 3
28468: NEG
28469: PUSH
28470: LD_INT 1
28472: NEG
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: LIST
28482: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28483: LD_ADDR_VAR 0 16
28487: PUSH
28488: LD_INT 2
28490: NEG
28491: PUSH
28492: LD_INT 3
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 3
28502: NEG
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 3
28514: NEG
28515: PUSH
28516: LD_INT 3
28518: NEG
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28529: LD_ADDR_VAR 0 17
28533: PUSH
28534: LD_INT 1
28536: NEG
28537: PUSH
28538: LD_INT 3
28540: NEG
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: LD_INT 3
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: LD_INT 2
28562: NEG
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28573: LD_ADDR_VAR 0 18
28577: PUSH
28578: LD_INT 2
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 3
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 3
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28614: LD_ADDR_VAR 0 19
28618: PUSH
28619: LD_INT 3
28621: PUSH
28622: LD_INT 2
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 3
28631: PUSH
28632: LD_INT 3
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 2
28641: PUSH
28642: LD_INT 3
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: LIST
28653: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28654: LD_ADDR_VAR 0 20
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: LD_INT 3
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: LD_INT 3
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28695: LD_ADDR_VAR 0 21
28699: PUSH
28700: LD_INT 2
28702: NEG
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 3
28713: NEG
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 3
28724: NEG
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: LIST
28738: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28739: LD_ADDR_VAR 0 22
28743: PUSH
28744: LD_INT 2
28746: NEG
28747: PUSH
28748: LD_INT 3
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 3
28758: NEG
28759: PUSH
28760: LD_INT 2
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 3
28770: NEG
28771: PUSH
28772: LD_INT 3
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28785: LD_ADDR_VAR 0 23
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: LD_INT 3
28795: NEG
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: LD_INT 4
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: LD_INT 3
28818: NEG
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: LIST
28828: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28829: LD_ADDR_VAR 0 24
28833: PUSH
28834: LD_INT 3
28836: PUSH
28837: LD_INT 0
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 3
28846: PUSH
28847: LD_INT 1
28849: NEG
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 4
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28870: LD_ADDR_VAR 0 25
28874: PUSH
28875: LD_INT 3
28877: PUSH
28878: LD_INT 3
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 4
28887: PUSH
28888: LD_INT 3
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 3
28897: PUSH
28898: LD_INT 4
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: LIST
28909: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28910: LD_ADDR_VAR 0 26
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: LD_INT 3
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: LD_INT 4
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: LD_INT 3
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: LIST
28950: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28951: LD_ADDR_VAR 0 27
28955: PUSH
28956: LD_INT 3
28958: NEG
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 3
28969: NEG
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 4
28980: NEG
28981: PUSH
28982: LD_INT 1
28984: NEG
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28995: LD_ADDR_VAR 0 28
28999: PUSH
29000: LD_INT 3
29002: NEG
29003: PUSH
29004: LD_INT 3
29006: NEG
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 3
29014: NEG
29015: PUSH
29016: LD_INT 4
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 4
29026: NEG
29027: PUSH
29028: LD_INT 3
29030: NEG
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29041: LD_ADDR_VAR 0 29
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: LD_INT 3
29052: NEG
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 0
29060: PUSH
29061: LD_INT 3
29063: NEG
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 1
29071: PUSH
29072: LD_INT 2
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: LD_INT 4
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 4
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: LD_INT 3
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: LD_INT 5
29120: NEG
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: LD_INT 5
29131: NEG
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 1
29139: PUSH
29140: LD_INT 4
29142: NEG
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 1
29150: NEG
29151: PUSH
29152: LD_INT 6
29154: NEG
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 6
29165: NEG
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: LD_INT 5
29176: NEG
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29196: LD_ADDR_VAR 0 30
29200: PUSH
29201: LD_INT 2
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 3
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 3
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 3
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 4
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 4
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 4
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 5
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 5
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 5
29296: PUSH
29297: LD_INT 1
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 6
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 6
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29339: LD_ADDR_VAR 0 31
29343: PUSH
29344: LD_INT 3
29346: PUSH
29347: LD_INT 2
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: LD_INT 3
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 2
29366: PUSH
29367: LD_INT 3
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 4
29376: PUSH
29377: LD_INT 3
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 4
29386: PUSH
29387: LD_INT 4
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 3
29396: PUSH
29397: LD_INT 4
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 5
29406: PUSH
29407: LD_INT 4
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 5
29416: PUSH
29417: LD_INT 5
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 4
29426: PUSH
29427: LD_INT 5
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 6
29436: PUSH
29437: LD_INT 5
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 6
29446: PUSH
29447: LD_INT 6
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 5
29456: PUSH
29457: LD_INT 6
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29478: LD_ADDR_VAR 0 32
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: LD_INT 3
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: LD_INT 3
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 4
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 4
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 3
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: LD_INT 5
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: LD_INT 5
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: LD_INT 4
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: LD_INT 6
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: LD_INT 6
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: NEG
29599: PUSH
29600: LD_INT 5
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29621: LD_ADDR_VAR 0 33
29625: PUSH
29626: LD_INT 2
29628: NEG
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 3
29650: NEG
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 3
29662: NEG
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 4
29673: NEG
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 4
29684: NEG
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 4
29696: NEG
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 5
29707: NEG
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 5
29718: NEG
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 5
29730: NEG
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 6
29741: NEG
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 6
29752: NEG
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29776: LD_ADDR_VAR 0 34
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: LD_INT 3
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 3
29795: NEG
29796: PUSH
29797: LD_INT 2
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 3
29807: NEG
29808: PUSH
29809: LD_INT 3
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 3
29819: NEG
29820: PUSH
29821: LD_INT 4
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 4
29831: NEG
29832: PUSH
29833: LD_INT 3
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 4
29843: NEG
29844: PUSH
29845: LD_INT 4
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 4
29855: NEG
29856: PUSH
29857: LD_INT 5
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 5
29867: NEG
29868: PUSH
29869: LD_INT 4
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 5
29879: NEG
29880: PUSH
29881: LD_INT 5
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 5
29891: NEG
29892: PUSH
29893: LD_INT 6
29895: NEG
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 6
29903: NEG
29904: PUSH
29905: LD_INT 5
29907: NEG
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 6
29915: NEG
29916: PUSH
29917: LD_INT 6
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29939: LD_ADDR_VAR 0 41
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: LD_INT 2
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: LD_INT 3
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 1
29969: PUSH
29970: LD_INT 2
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: LIST
29982: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29983: LD_ADDR_VAR 0 42
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 3
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30024: LD_ADDR_VAR 0 43
30028: PUSH
30029: LD_INT 2
30031: PUSH
30032: LD_INT 2
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 3
30041: PUSH
30042: LD_INT 2
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 2
30051: PUSH
30052: LD_INT 3
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: LIST
30063: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30064: LD_ADDR_VAR 0 44
30068: PUSH
30069: LD_INT 0
30071: PUSH
30072: LD_INT 2
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: LD_INT 3
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: LD_INT 2
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: LIST
30104: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30105: LD_ADDR_VAR 0 45
30109: PUSH
30110: LD_INT 2
30112: NEG
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 2
30123: NEG
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 3
30134: NEG
30135: PUSH
30136: LD_INT 1
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: LIST
30148: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30149: LD_ADDR_VAR 0 46
30153: PUSH
30154: LD_INT 2
30156: NEG
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 2
30168: NEG
30169: PUSH
30170: LD_INT 3
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 3
30180: NEG
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30195: LD_ADDR_VAR 0 47
30199: PUSH
30200: LD_INT 2
30202: NEG
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30228: LD_ADDR_VAR 0 48
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 2
30246: PUSH
30247: LD_INT 1
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30259: LD_ADDR_VAR 0 49
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 3
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30288: LD_ADDR_VAR 0 50
30292: PUSH
30293: LD_INT 2
30295: PUSH
30296: LD_INT 3
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: LD_INT 3
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30317: LD_ADDR_VAR 0 51
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: LD_INT 2
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 2
30335: NEG
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30348: LD_ADDR_VAR 0 52
30352: PUSH
30353: LD_INT 3
30355: NEG
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 3
30367: NEG
30368: PUSH
30369: LD_INT 2
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30381: LD_ADDR_VAR 0 53
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: LD_INT 3
30392: NEG
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: LD_INT 3
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: PUSH
30412: LD_INT 2
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: LIST
30424: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30425: LD_ADDR_VAR 0 54
30429: PUSH
30430: LD_INT 2
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 3
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 3
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30466: LD_ADDR_VAR 0 55
30470: PUSH
30471: LD_INT 3
30473: PUSH
30474: LD_INT 2
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: LD_INT 3
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: LD_INT 3
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: LIST
30505: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30506: LD_ADDR_VAR 0 56
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: LD_INT 3
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 3
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: NEG
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: LIST
30546: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30547: LD_ADDR_VAR 0 57
30551: PUSH
30552: LD_INT 2
30554: NEG
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 3
30565: NEG
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 3
30576: NEG
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: LIST
30590: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30591: LD_ADDR_VAR 0 58
30595: PUSH
30596: LD_INT 2
30598: NEG
30599: PUSH
30600: LD_INT 3
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 3
30610: NEG
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 3
30622: NEG
30623: PUSH
30624: LD_INT 3
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: LIST
30636: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30637: LD_ADDR_VAR 0 59
30641: PUSH
30642: LD_INT 1
30644: NEG
30645: PUSH
30646: LD_INT 2
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: LD_INT 2
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: PUSH
30668: LD_INT 1
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30681: LD_ADDR_VAR 0 60
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 2
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 2
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30722: LD_ADDR_VAR 0 61
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: LD_INT 2
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 2
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: LIST
30761: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30762: LD_ADDR_VAR 0 62
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 1
30789: NEG
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30803: LD_ADDR_VAR 0 63
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 2
30821: NEG
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 2
30832: NEG
30833: PUSH
30834: LD_INT 1
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30847: LD_ADDR_VAR 0 64
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 2
30866: NEG
30867: PUSH
30868: LD_INT 1
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 2
30878: NEG
30879: PUSH
30880: LD_INT 2
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: ST_TO_ADDR
// end ; 2 :
30893: GO 34159
30895: LD_INT 2
30897: DOUBLE
30898: EQUAL
30899: IFTRUE 30903
30901: GO 34158
30903: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30904: LD_ADDR_VAR 0 29
30908: PUSH
30909: LD_INT 4
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 4
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 5
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 5
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 4
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 3
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 5
30994: PUSH
30995: LD_INT 2
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 3
31004: PUSH
31005: LD_INT 3
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: LD_INT 2
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 4
31024: PUSH
31025: LD_INT 3
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 4
31034: PUSH
31035: LD_INT 4
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: LD_INT 4
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: LD_INT 3
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: LD_INT 2
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 4
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: LD_INT 4
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: LD_INT 4
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: LD_INT 3
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: LD_INT 4
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 5
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: LD_INT 5
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 4
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 1
31155: NEG
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: LD_INT 5
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: NEG
31177: PUSH
31178: LD_INT 3
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 3
31187: NEG
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 3
31198: NEG
31199: PUSH
31200: LD_INT 1
31202: NEG
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 2
31210: NEG
31211: PUSH
31212: LD_INT 0
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 3
31232: NEG
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 4
31243: NEG
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 4
31254: NEG
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 4
31266: NEG
31267: PUSH
31268: LD_INT 2
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 2
31278: NEG
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 4
31289: NEG
31290: PUSH
31291: LD_INT 4
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 4
31301: NEG
31302: PUSH
31303: LD_INT 5
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 3
31313: NEG
31314: PUSH
31315: LD_INT 4
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 3
31325: NEG
31326: PUSH
31327: LD_INT 3
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 4
31337: NEG
31338: PUSH
31339: LD_INT 3
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 5
31349: NEG
31350: PUSH
31351: LD_INT 4
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 5
31361: NEG
31362: PUSH
31363: LD_INT 5
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 3
31373: NEG
31374: PUSH
31375: LD_INT 5
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 5
31385: NEG
31386: PUSH
31387: LD_INT 3
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31442: LD_ADDR_VAR 0 30
31446: PUSH
31447: LD_INT 4
31449: PUSH
31450: LD_INT 4
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 4
31459: PUSH
31460: LD_INT 3
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 5
31469: PUSH
31470: LD_INT 4
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 5
31479: PUSH
31480: LD_INT 5
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 4
31489: PUSH
31490: LD_INT 5
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 3
31499: PUSH
31500: LD_INT 4
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 3
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 5
31519: PUSH
31520: LD_INT 3
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: LD_INT 5
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: LD_INT 3
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: LD_INT 3
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: LD_INT 4
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: LD_INT 4
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 3
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: LD_INT 2
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: LD_INT 4
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: NEG
31622: PUSH
31623: LD_INT 2
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 4
31632: NEG
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 4
31643: NEG
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 3
31655: NEG
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 3
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 4
31677: NEG
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 5
31688: NEG
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 5
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 5
31711: NEG
31712: PUSH
31713: LD_INT 2
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: LD_INT 2
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 3
31734: NEG
31735: PUSH
31736: LD_INT 3
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: NEG
31747: PUSH
31748: LD_INT 4
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 2
31758: NEG
31759: PUSH
31760: LD_INT 3
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 2
31770: NEG
31771: PUSH
31772: LD_INT 2
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 3
31782: NEG
31783: PUSH
31784: LD_INT 2
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 4
31794: NEG
31795: PUSH
31796: LD_INT 3
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 4
31806: NEG
31807: PUSH
31808: LD_INT 4
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: LD_INT 4
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 4
31830: NEG
31831: PUSH
31832: LD_INT 2
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: LD_INT 4
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: LD_INT 5
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: LD_INT 4
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: LD_INT 3
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: LD_INT 3
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: LD_INT 4
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: LD_INT 5
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: LD_INT 3
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 2
31932: NEG
31933: PUSH
31934: LD_INT 5
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31989: LD_ADDR_VAR 0 31
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: LD_INT 4
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: LD_INT 3
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: LD_INT 4
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: LD_INT 5
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: LD_INT 5
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: LD_INT 4
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: LD_INT 3
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 2
32068: PUSH
32069: LD_INT 5
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 2
32078: NEG
32079: PUSH
32080: LD_INT 3
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 3
32089: NEG
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 3
32100: NEG
32101: PUSH
32102: LD_INT 1
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 2
32123: NEG
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 3
32134: NEG
32135: PUSH
32136: LD_INT 1
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 4
32145: NEG
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 4
32156: NEG
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 4
32168: NEG
32169: PUSH
32170: LD_INT 2
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 2
32180: NEG
32181: PUSH
32182: LD_INT 2
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 4
32191: NEG
32192: PUSH
32193: LD_INT 4
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 4
32203: NEG
32204: PUSH
32205: LD_INT 5
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 3
32215: NEG
32216: PUSH
32217: LD_INT 4
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 3
32227: NEG
32228: PUSH
32229: LD_INT 3
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 4
32239: NEG
32240: PUSH
32241: LD_INT 3
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 5
32251: NEG
32252: PUSH
32253: LD_INT 4
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 5
32263: NEG
32264: PUSH
32265: LD_INT 5
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 3
32275: NEG
32276: PUSH
32277: LD_INT 5
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 5
32287: NEG
32288: PUSH
32289: LD_INT 3
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: LD_INT 3
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: LD_INT 4
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: LD_INT 3
32324: NEG
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 1
32332: PUSH
32333: LD_INT 2
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 0
32343: PUSH
32344: LD_INT 2
32346: NEG
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: LD_INT 3
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: LD_INT 4
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: LD_INT 4
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 4
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 4
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 5
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 5
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 4
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: LD_INT 0
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 3
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 3
32473: PUSH
32474: LD_INT 2
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 5
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32539: LD_ADDR_VAR 0 32
32543: PUSH
32544: LD_INT 4
32546: NEG
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 4
32557: NEG
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 3
32569: NEG
32570: PUSH
32571: LD_INT 0
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 3
32580: NEG
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 4
32591: NEG
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 5
32602: NEG
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 5
32613: NEG
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 5
32625: NEG
32626: PUSH
32627: LD_INT 2
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 3
32637: NEG
32638: PUSH
32639: LD_INT 2
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 3
32648: NEG
32649: PUSH
32650: LD_INT 3
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 3
32660: NEG
32661: PUSH
32662: LD_INT 4
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 2
32672: NEG
32673: PUSH
32674: LD_INT 3
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 2
32684: NEG
32685: PUSH
32686: LD_INT 2
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 3
32696: NEG
32697: PUSH
32698: LD_INT 2
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 4
32708: NEG
32709: PUSH
32710: LD_INT 3
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 4
32720: NEG
32721: PUSH
32722: LD_INT 4
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: LD_INT 4
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 4
32744: NEG
32745: PUSH
32746: LD_INT 2
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 4
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: LD_INT 5
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: LD_INT 4
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: LD_INT 3
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: LD_INT 3
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 1
32811: NEG
32812: PUSH
32813: LD_INT 4
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: LD_INT 5
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: LD_INT 3
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: LD_INT 5
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 3
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 3
32868: PUSH
32869: LD_INT 1
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 4
32879: PUSH
32880: LD_INT 0
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 4
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 3
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 2
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 2
32930: PUSH
32931: LD_INT 2
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 4
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 4
32951: PUSH
32952: LD_INT 4
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 4
32961: PUSH
32962: LD_INT 3
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 5
32971: PUSH
32972: LD_INT 4
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 5
32981: PUSH
32982: LD_INT 5
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 4
32991: PUSH
32992: LD_INT 5
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 3
33001: PUSH
33002: LD_INT 4
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 3
33011: PUSH
33012: LD_INT 3
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 5
33021: PUSH
33022: LD_INT 3
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 3
33031: PUSH
33032: LD_INT 5
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33086: LD_ADDR_VAR 0 33
33090: PUSH
33091: LD_INT 4
33093: NEG
33094: PUSH
33095: LD_INT 4
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 4
33105: NEG
33106: PUSH
33107: LD_INT 5
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 3
33117: NEG
33118: PUSH
33119: LD_INT 4
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 3
33129: NEG
33130: PUSH
33131: LD_INT 3
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 4
33141: NEG
33142: PUSH
33143: LD_INT 3
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 5
33153: NEG
33154: PUSH
33155: LD_INT 4
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 5
33165: NEG
33166: PUSH
33167: LD_INT 5
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 3
33177: NEG
33178: PUSH
33179: LD_INT 5
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 5
33189: NEG
33190: PUSH
33191: LD_INT 3
33193: NEG
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: LD_INT 3
33204: NEG
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 4
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 3
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: LD_INT 2
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: LD_INT 2
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: LD_INT 3
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: LD_INT 4
33272: NEG
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 2
33280: PUSH
33281: LD_INT 2
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: LD_INT 4
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 4
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 4
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 5
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 5
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 4
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 3
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 3
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 3
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 5
33386: PUSH
33387: LD_INT 2
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 3
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 3
33406: PUSH
33407: LD_INT 2
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 4
33416: PUSH
33417: LD_INT 3
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 4
33426: PUSH
33427: LD_INT 4
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 3
33436: PUSH
33437: LD_INT 4
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 2
33446: PUSH
33447: LD_INT 3
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 2
33456: PUSH
33457: LD_INT 2
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 4
33466: PUSH
33467: LD_INT 2
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: LD_INT 4
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: LD_INT 4
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 3
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: LD_INT 4
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 5
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: LD_INT 5
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: LD_INT 4
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: LD_INT 3
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 2
33558: PUSH
33559: LD_INT 5
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 2
33568: NEG
33569: PUSH
33570: LD_INT 3
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33624: LD_ADDR_VAR 0 34
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: LD_INT 4
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: LD_INT 5
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: LD_INT 4
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: LD_INT 3
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: LD_INT 3
33678: NEG
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: LD_INT 4
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: LD_INT 5
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 2
33710: PUSH
33711: LD_INT 3
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 2
33721: NEG
33722: PUSH
33723: LD_INT 5
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 3
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: LD_INT 1
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 4
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 4
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 3
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 2
33805: PUSH
33806: LD_INT 2
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 4
33816: PUSH
33817: LD_INT 2
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 4
33826: PUSH
33827: LD_INT 4
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 4
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 5
33846: PUSH
33847: LD_INT 4
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 5
33856: PUSH
33857: LD_INT 5
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 4
33866: PUSH
33867: LD_INT 5
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 3
33876: PUSH
33877: LD_INT 4
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 3
33886: PUSH
33887: LD_INT 3
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 5
33896: PUSH
33897: LD_INT 3
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 3
33906: PUSH
33907: LD_INT 5
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: LD_INT 3
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: LD_INT 3
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: LD_INT 4
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: LD_INT 4
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 1
33966: NEG
33967: PUSH
33968: LD_INT 3
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: LD_INT 2
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 2
33988: PUSH
33989: LD_INT 4
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 4
34009: NEG
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 4
34020: NEG
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 3
34032: NEG
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 3
34043: NEG
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 4
34054: NEG
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 5
34065: NEG
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 5
34076: NEG
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 5
34088: NEG
34089: PUSH
34090: LD_INT 2
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 3
34100: NEG
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: ST_TO_ADDR
// end ; end ;
34156: GO 34159
34158: POP
// case btype of b_depot , b_warehouse :
34159: LD_VAR 0 1
34163: PUSH
34164: LD_INT 0
34166: DOUBLE
34167: EQUAL
34168: IFTRUE 34178
34170: LD_INT 1
34172: DOUBLE
34173: EQUAL
34174: IFTRUE 34178
34176: GO 34379
34178: POP
// case nation of nation_american :
34179: LD_VAR 0 5
34183: PUSH
34184: LD_INT 1
34186: DOUBLE
34187: EQUAL
34188: IFTRUE 34192
34190: GO 34248
34192: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34193: LD_ADDR_VAR 0 9
34197: PUSH
34198: LD_VAR 0 11
34202: PUSH
34203: LD_VAR 0 12
34207: PUSH
34208: LD_VAR 0 13
34212: PUSH
34213: LD_VAR 0 14
34217: PUSH
34218: LD_VAR 0 15
34222: PUSH
34223: LD_VAR 0 16
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: PUSH
34236: LD_VAR 0 4
34240: PUSH
34241: LD_INT 1
34243: PLUS
34244: ARRAY
34245: ST_TO_ADDR
34246: GO 34377
34248: LD_INT 2
34250: DOUBLE
34251: EQUAL
34252: IFTRUE 34256
34254: GO 34312
34256: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34257: LD_ADDR_VAR 0 9
34261: PUSH
34262: LD_VAR 0 17
34266: PUSH
34267: LD_VAR 0 18
34271: PUSH
34272: LD_VAR 0 19
34276: PUSH
34277: LD_VAR 0 20
34281: PUSH
34282: LD_VAR 0 21
34286: PUSH
34287: LD_VAR 0 22
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: PUSH
34300: LD_VAR 0 4
34304: PUSH
34305: LD_INT 1
34307: PLUS
34308: ARRAY
34309: ST_TO_ADDR
34310: GO 34377
34312: LD_INT 3
34314: DOUBLE
34315: EQUAL
34316: IFTRUE 34320
34318: GO 34376
34320: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34321: LD_ADDR_VAR 0 9
34325: PUSH
34326: LD_VAR 0 23
34330: PUSH
34331: LD_VAR 0 24
34335: PUSH
34336: LD_VAR 0 25
34340: PUSH
34341: LD_VAR 0 26
34345: PUSH
34346: LD_VAR 0 27
34350: PUSH
34351: LD_VAR 0 28
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: PUSH
34364: LD_VAR 0 4
34368: PUSH
34369: LD_INT 1
34371: PLUS
34372: ARRAY
34373: ST_TO_ADDR
34374: GO 34377
34376: POP
34377: GO 34932
34379: LD_INT 2
34381: DOUBLE
34382: EQUAL
34383: IFTRUE 34393
34385: LD_INT 3
34387: DOUBLE
34388: EQUAL
34389: IFTRUE 34393
34391: GO 34449
34393: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34394: LD_ADDR_VAR 0 9
34398: PUSH
34399: LD_VAR 0 29
34403: PUSH
34404: LD_VAR 0 30
34408: PUSH
34409: LD_VAR 0 31
34413: PUSH
34414: LD_VAR 0 32
34418: PUSH
34419: LD_VAR 0 33
34423: PUSH
34424: LD_VAR 0 34
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: PUSH
34437: LD_VAR 0 4
34441: PUSH
34442: LD_INT 1
34444: PLUS
34445: ARRAY
34446: ST_TO_ADDR
34447: GO 34932
34449: LD_INT 16
34451: DOUBLE
34452: EQUAL
34453: IFTRUE 34511
34455: LD_INT 17
34457: DOUBLE
34458: EQUAL
34459: IFTRUE 34511
34461: LD_INT 18
34463: DOUBLE
34464: EQUAL
34465: IFTRUE 34511
34467: LD_INT 19
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34511
34473: LD_INT 22
34475: DOUBLE
34476: EQUAL
34477: IFTRUE 34511
34479: LD_INT 20
34481: DOUBLE
34482: EQUAL
34483: IFTRUE 34511
34485: LD_INT 21
34487: DOUBLE
34488: EQUAL
34489: IFTRUE 34511
34491: LD_INT 23
34493: DOUBLE
34494: EQUAL
34495: IFTRUE 34511
34497: LD_INT 24
34499: DOUBLE
34500: EQUAL
34501: IFTRUE 34511
34503: LD_INT 25
34505: DOUBLE
34506: EQUAL
34507: IFTRUE 34511
34509: GO 34567
34511: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34512: LD_ADDR_VAR 0 9
34516: PUSH
34517: LD_VAR 0 35
34521: PUSH
34522: LD_VAR 0 36
34526: PUSH
34527: LD_VAR 0 37
34531: PUSH
34532: LD_VAR 0 38
34536: PUSH
34537: LD_VAR 0 39
34541: PUSH
34542: LD_VAR 0 40
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: PUSH
34555: LD_VAR 0 4
34559: PUSH
34560: LD_INT 1
34562: PLUS
34563: ARRAY
34564: ST_TO_ADDR
34565: GO 34932
34567: LD_INT 6
34569: DOUBLE
34570: EQUAL
34571: IFTRUE 34623
34573: LD_INT 7
34575: DOUBLE
34576: EQUAL
34577: IFTRUE 34623
34579: LD_INT 8
34581: DOUBLE
34582: EQUAL
34583: IFTRUE 34623
34585: LD_INT 13
34587: DOUBLE
34588: EQUAL
34589: IFTRUE 34623
34591: LD_INT 12
34593: DOUBLE
34594: EQUAL
34595: IFTRUE 34623
34597: LD_INT 15
34599: DOUBLE
34600: EQUAL
34601: IFTRUE 34623
34603: LD_INT 11
34605: DOUBLE
34606: EQUAL
34607: IFTRUE 34623
34609: LD_INT 14
34611: DOUBLE
34612: EQUAL
34613: IFTRUE 34623
34615: LD_INT 10
34617: DOUBLE
34618: EQUAL
34619: IFTRUE 34623
34621: GO 34679
34623: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34624: LD_ADDR_VAR 0 9
34628: PUSH
34629: LD_VAR 0 41
34633: PUSH
34634: LD_VAR 0 42
34638: PUSH
34639: LD_VAR 0 43
34643: PUSH
34644: LD_VAR 0 44
34648: PUSH
34649: LD_VAR 0 45
34653: PUSH
34654: LD_VAR 0 46
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: PUSH
34667: LD_VAR 0 4
34671: PUSH
34672: LD_INT 1
34674: PLUS
34675: ARRAY
34676: ST_TO_ADDR
34677: GO 34932
34679: LD_INT 36
34681: DOUBLE
34682: EQUAL
34683: IFTRUE 34687
34685: GO 34743
34687: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34688: LD_ADDR_VAR 0 9
34692: PUSH
34693: LD_VAR 0 47
34697: PUSH
34698: LD_VAR 0 48
34702: PUSH
34703: LD_VAR 0 49
34707: PUSH
34708: LD_VAR 0 50
34712: PUSH
34713: LD_VAR 0 51
34717: PUSH
34718: LD_VAR 0 52
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: PUSH
34731: LD_VAR 0 4
34735: PUSH
34736: LD_INT 1
34738: PLUS
34739: ARRAY
34740: ST_TO_ADDR
34741: GO 34932
34743: LD_INT 4
34745: DOUBLE
34746: EQUAL
34747: IFTRUE 34769
34749: LD_INT 5
34751: DOUBLE
34752: EQUAL
34753: IFTRUE 34769
34755: LD_INT 34
34757: DOUBLE
34758: EQUAL
34759: IFTRUE 34769
34761: LD_INT 37
34763: DOUBLE
34764: EQUAL
34765: IFTRUE 34769
34767: GO 34825
34769: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34770: LD_ADDR_VAR 0 9
34774: PUSH
34775: LD_VAR 0 53
34779: PUSH
34780: LD_VAR 0 54
34784: PUSH
34785: LD_VAR 0 55
34789: PUSH
34790: LD_VAR 0 56
34794: PUSH
34795: LD_VAR 0 57
34799: PUSH
34800: LD_VAR 0 58
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: PUSH
34813: LD_VAR 0 4
34817: PUSH
34818: LD_INT 1
34820: PLUS
34821: ARRAY
34822: ST_TO_ADDR
34823: GO 34932
34825: LD_INT 31
34827: DOUBLE
34828: EQUAL
34829: IFTRUE 34875
34831: LD_INT 32
34833: DOUBLE
34834: EQUAL
34835: IFTRUE 34875
34837: LD_INT 33
34839: DOUBLE
34840: EQUAL
34841: IFTRUE 34875
34843: LD_INT 27
34845: DOUBLE
34846: EQUAL
34847: IFTRUE 34875
34849: LD_INT 26
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34875
34855: LD_INT 28
34857: DOUBLE
34858: EQUAL
34859: IFTRUE 34875
34861: LD_INT 29
34863: DOUBLE
34864: EQUAL
34865: IFTRUE 34875
34867: LD_INT 30
34869: DOUBLE
34870: EQUAL
34871: IFTRUE 34875
34873: GO 34931
34875: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34876: LD_ADDR_VAR 0 9
34880: PUSH
34881: LD_VAR 0 59
34885: PUSH
34886: LD_VAR 0 60
34890: PUSH
34891: LD_VAR 0 61
34895: PUSH
34896: LD_VAR 0 62
34900: PUSH
34901: LD_VAR 0 63
34905: PUSH
34906: LD_VAR 0 64
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: PUSH
34919: LD_VAR 0 4
34923: PUSH
34924: LD_INT 1
34926: PLUS
34927: ARRAY
34928: ST_TO_ADDR
34929: GO 34932
34931: POP
// temp_list2 = [ ] ;
34932: LD_ADDR_VAR 0 10
34936: PUSH
34937: EMPTY
34938: ST_TO_ADDR
// for i in temp_list do
34939: LD_ADDR_VAR 0 8
34943: PUSH
34944: LD_VAR 0 9
34948: PUSH
34949: FOR_IN
34950: IFFALSE 35002
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34952: LD_ADDR_VAR 0 10
34956: PUSH
34957: LD_VAR 0 10
34961: PUSH
34962: LD_VAR 0 8
34966: PUSH
34967: LD_INT 1
34969: ARRAY
34970: PUSH
34971: LD_VAR 0 2
34975: PLUS
34976: PUSH
34977: LD_VAR 0 8
34981: PUSH
34982: LD_INT 2
34984: ARRAY
34985: PUSH
34986: LD_VAR 0 3
34990: PLUS
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: EMPTY
34997: LIST
34998: ADD
34999: ST_TO_ADDR
35000: GO 34949
35002: POP
35003: POP
// result = temp_list2 ;
35004: LD_ADDR_VAR 0 7
35008: PUSH
35009: LD_VAR 0 10
35013: ST_TO_ADDR
// end ;
35014: LD_VAR 0 7
35018: RET
// export function EnemyInRange ( unit , dist ) ; begin
35019: LD_INT 0
35021: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35022: LD_ADDR_VAR 0 3
35026: PUSH
35027: LD_VAR 0 1
35031: PPUSH
35032: CALL_OW 255
35036: PPUSH
35037: LD_VAR 0 1
35041: PPUSH
35042: CALL_OW 250
35046: PPUSH
35047: LD_VAR 0 1
35051: PPUSH
35052: CALL_OW 251
35056: PPUSH
35057: LD_VAR 0 2
35061: PPUSH
35062: CALL 8276 0 4
35066: PUSH
35067: LD_INT 4
35069: ARRAY
35070: ST_TO_ADDR
// end ;
35071: LD_VAR 0 3
35075: RET
// export function PlayerSeeMe ( unit ) ; begin
35076: LD_INT 0
35078: PPUSH
// result := See ( your_side , unit ) ;
35079: LD_ADDR_VAR 0 2
35083: PUSH
35084: LD_OWVAR 2
35088: PPUSH
35089: LD_VAR 0 1
35093: PPUSH
35094: CALL_OW 292
35098: ST_TO_ADDR
// end ;
35099: LD_VAR 0 2
35103: RET
// export function ReverseDir ( unit ) ; begin
35104: LD_INT 0
35106: PPUSH
// if not unit then
35107: LD_VAR 0 1
35111: NOT
35112: IFFALSE 35116
// exit ;
35114: GO 35139
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35116: LD_ADDR_VAR 0 2
35120: PUSH
35121: LD_VAR 0 1
35125: PPUSH
35126: CALL_OW 254
35130: PUSH
35131: LD_INT 3
35133: PLUS
35134: PUSH
35135: LD_INT 6
35137: MOD
35138: ST_TO_ADDR
// end ;
35139: LD_VAR 0 2
35143: RET
// export function ReverseArray ( array ) ; var i ; begin
35144: LD_INT 0
35146: PPUSH
35147: PPUSH
// if not array then
35148: LD_VAR 0 1
35152: NOT
35153: IFFALSE 35157
// exit ;
35155: GO 35212
// result := [ ] ;
35157: LD_ADDR_VAR 0 2
35161: PUSH
35162: EMPTY
35163: ST_TO_ADDR
// for i := array downto 1 do
35164: LD_ADDR_VAR 0 3
35168: PUSH
35169: DOUBLE
35170: LD_VAR 0 1
35174: INC
35175: ST_TO_ADDR
35176: LD_INT 1
35178: PUSH
35179: FOR_DOWNTO
35180: IFFALSE 35210
// result := Join ( result , array [ i ] ) ;
35182: LD_ADDR_VAR 0 2
35186: PUSH
35187: LD_VAR 0 2
35191: PPUSH
35192: LD_VAR 0 1
35196: PUSH
35197: LD_VAR 0 3
35201: ARRAY
35202: PPUSH
35203: CALL 40054 0 2
35207: ST_TO_ADDR
35208: GO 35179
35210: POP
35211: POP
// end ;
35212: LD_VAR 0 2
35216: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35217: LD_INT 0
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
// if not unit or not hexes then
35225: LD_VAR 0 1
35229: NOT
35230: IFTRUE 35239
35232: PUSH
35233: LD_VAR 0 2
35237: NOT
35238: OR
35239: IFFALSE 35243
// exit ;
35241: GO 35366
// dist := 9999 ;
35243: LD_ADDR_VAR 0 5
35247: PUSH
35248: LD_INT 9999
35250: ST_TO_ADDR
// for i = 1 to hexes do
35251: LD_ADDR_VAR 0 4
35255: PUSH
35256: DOUBLE
35257: LD_INT 1
35259: DEC
35260: ST_TO_ADDR
35261: LD_VAR 0 2
35265: PUSH
35266: FOR_TO
35267: IFFALSE 35354
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35269: LD_ADDR_VAR 0 6
35273: PUSH
35274: LD_VAR 0 1
35278: PPUSH
35279: LD_VAR 0 2
35283: PUSH
35284: LD_VAR 0 4
35288: ARRAY
35289: PUSH
35290: LD_INT 1
35292: ARRAY
35293: PPUSH
35294: LD_VAR 0 2
35298: PUSH
35299: LD_VAR 0 4
35303: ARRAY
35304: PUSH
35305: LD_INT 2
35307: ARRAY
35308: PPUSH
35309: CALL_OW 297
35313: ST_TO_ADDR
// if tdist < dist then
35314: LD_VAR 0 6
35318: PUSH
35319: LD_VAR 0 5
35323: LESS
35324: IFFALSE 35352
// begin hex := hexes [ i ] ;
35326: LD_ADDR_VAR 0 8
35330: PUSH
35331: LD_VAR 0 2
35335: PUSH
35336: LD_VAR 0 4
35340: ARRAY
35341: ST_TO_ADDR
// dist := tdist ;
35342: LD_ADDR_VAR 0 5
35346: PUSH
35347: LD_VAR 0 6
35351: ST_TO_ADDR
// end ; end ;
35352: GO 35266
35354: POP
35355: POP
// result := hex ;
35356: LD_ADDR_VAR 0 3
35360: PUSH
35361: LD_VAR 0 8
35365: ST_TO_ADDR
// end ;
35366: LD_VAR 0 3
35370: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35371: LD_INT 0
35373: PPUSH
35374: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35375: LD_VAR 0 1
35379: NOT
35380: IFTRUE 35419
35382: PUSH
35383: LD_VAR 0 1
35387: PUSH
35388: LD_INT 21
35390: PUSH
35391: LD_INT 2
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 23
35400: PUSH
35401: LD_INT 2
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PPUSH
35412: CALL_OW 69
35416: IN
35417: NOT
35418: OR
35419: IFFALSE 35423
// exit ;
35421: GO 35470
// for i = 1 to 3 do
35423: LD_ADDR_VAR 0 3
35427: PUSH
35428: DOUBLE
35429: LD_INT 1
35431: DEC
35432: ST_TO_ADDR
35433: LD_INT 3
35435: PUSH
35436: FOR_TO
35437: IFFALSE 35468
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35439: LD_VAR 0 1
35443: PPUSH
35444: CALL_OW 250
35448: PPUSH
35449: LD_VAR 0 1
35453: PPUSH
35454: CALL_OW 251
35458: PPUSH
35459: LD_INT 1
35461: PPUSH
35462: CALL_OW 453
35466: GO 35436
35468: POP
35469: POP
// end ;
35470: LD_VAR 0 2
35474: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35475: LD_INT 0
35477: PPUSH
35478: PPUSH
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
// if not unit or not enemy_unit then
35483: LD_VAR 0 1
35487: NOT
35488: IFTRUE 35497
35490: PUSH
35491: LD_VAR 0 2
35495: NOT
35496: OR
35497: IFFALSE 35501
// exit ;
35499: GO 35972
// if GetLives ( i ) < 250 then
35501: LD_VAR 0 4
35505: PPUSH
35506: CALL_OW 256
35510: PUSH
35511: LD_INT 250
35513: LESS
35514: IFFALSE 35527
// begin ComAutodestruct ( i ) ;
35516: LD_VAR 0 4
35520: PPUSH
35521: CALL 35371 0 1
// exit ;
35525: GO 35972
// end ; x := GetX ( enemy_unit ) ;
35527: LD_ADDR_VAR 0 7
35531: PUSH
35532: LD_VAR 0 2
35536: PPUSH
35537: CALL_OW 250
35541: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35542: LD_ADDR_VAR 0 8
35546: PUSH
35547: LD_VAR 0 2
35551: PPUSH
35552: CALL_OW 251
35556: ST_TO_ADDR
// if not x or not y then
35557: LD_VAR 0 7
35561: NOT
35562: IFTRUE 35571
35564: PUSH
35565: LD_VAR 0 8
35569: NOT
35570: OR
35571: IFFALSE 35575
// exit ;
35573: GO 35972
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35575: LD_ADDR_VAR 0 6
35579: PUSH
35580: LD_VAR 0 7
35584: PPUSH
35585: LD_INT 0
35587: PPUSH
35588: LD_INT 4
35590: PPUSH
35591: CALL_OW 272
35595: PUSH
35596: LD_VAR 0 8
35600: PPUSH
35601: LD_INT 0
35603: PPUSH
35604: LD_INT 4
35606: PPUSH
35607: CALL_OW 273
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_VAR 0 7
35620: PPUSH
35621: LD_INT 1
35623: PPUSH
35624: LD_INT 4
35626: PPUSH
35627: CALL_OW 272
35631: PUSH
35632: LD_VAR 0 8
35636: PPUSH
35637: LD_INT 1
35639: PPUSH
35640: LD_INT 4
35642: PPUSH
35643: CALL_OW 273
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_VAR 0 7
35656: PPUSH
35657: LD_INT 2
35659: PPUSH
35660: LD_INT 4
35662: PPUSH
35663: CALL_OW 272
35667: PUSH
35668: LD_VAR 0 8
35672: PPUSH
35673: LD_INT 2
35675: PPUSH
35676: LD_INT 4
35678: PPUSH
35679: CALL_OW 273
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_VAR 0 7
35692: PPUSH
35693: LD_INT 3
35695: PPUSH
35696: LD_INT 4
35698: PPUSH
35699: CALL_OW 272
35703: PUSH
35704: LD_VAR 0 8
35708: PPUSH
35709: LD_INT 3
35711: PPUSH
35712: LD_INT 4
35714: PPUSH
35715: CALL_OW 273
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_VAR 0 7
35728: PPUSH
35729: LD_INT 4
35731: PPUSH
35732: LD_INT 4
35734: PPUSH
35735: CALL_OW 272
35739: PUSH
35740: LD_VAR 0 8
35744: PPUSH
35745: LD_INT 4
35747: PPUSH
35748: LD_INT 4
35750: PPUSH
35751: CALL_OW 273
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_VAR 0 7
35764: PPUSH
35765: LD_INT 5
35767: PPUSH
35768: LD_INT 4
35770: PPUSH
35771: CALL_OW 272
35775: PUSH
35776: LD_VAR 0 8
35780: PPUSH
35781: LD_INT 5
35783: PPUSH
35784: LD_INT 4
35786: PPUSH
35787: CALL_OW 273
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: ST_TO_ADDR
// for i = tmp downto 1 do
35804: LD_ADDR_VAR 0 4
35808: PUSH
35809: DOUBLE
35810: LD_VAR 0 6
35814: INC
35815: ST_TO_ADDR
35816: LD_INT 1
35818: PUSH
35819: FOR_DOWNTO
35820: IFFALSE 35923
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35822: LD_VAR 0 6
35826: PUSH
35827: LD_VAR 0 4
35831: ARRAY
35832: PUSH
35833: LD_INT 1
35835: ARRAY
35836: PPUSH
35837: LD_VAR 0 6
35841: PUSH
35842: LD_VAR 0 4
35846: ARRAY
35847: PUSH
35848: LD_INT 2
35850: ARRAY
35851: PPUSH
35852: CALL_OW 488
35856: NOT
35857: IFTRUE 35899
35859: PUSH
35860: LD_VAR 0 6
35864: PUSH
35865: LD_VAR 0 4
35869: ARRAY
35870: PUSH
35871: LD_INT 1
35873: ARRAY
35874: PPUSH
35875: LD_VAR 0 6
35879: PUSH
35880: LD_VAR 0 4
35884: ARRAY
35885: PUSH
35886: LD_INT 2
35888: ARRAY
35889: PPUSH
35890: CALL_OW 428
35894: PUSH
35895: LD_INT 0
35897: NONEQUAL
35898: OR
35899: IFFALSE 35921
// tmp := Delete ( tmp , i ) ;
35901: LD_ADDR_VAR 0 6
35905: PUSH
35906: LD_VAR 0 6
35910: PPUSH
35911: LD_VAR 0 4
35915: PPUSH
35916: CALL_OW 3
35920: ST_TO_ADDR
35921: GO 35819
35923: POP
35924: POP
// j := GetClosestHex ( unit , tmp ) ;
35925: LD_ADDR_VAR 0 5
35929: PUSH
35930: LD_VAR 0 1
35934: PPUSH
35935: LD_VAR 0 6
35939: PPUSH
35940: CALL 35217 0 2
35944: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35945: LD_VAR 0 1
35949: PPUSH
35950: LD_VAR 0 5
35954: PUSH
35955: LD_INT 1
35957: ARRAY
35958: PPUSH
35959: LD_VAR 0 5
35963: PUSH
35964: LD_INT 2
35966: ARRAY
35967: PPUSH
35968: CALL_OW 111
// end ;
35972: LD_VAR 0 3
35976: RET
// export function PrepareApemanSoldier ( ) ; begin
35977: LD_INT 0
35979: PPUSH
// uc_nation := 0 ;
35980: LD_ADDR_OWVAR 21
35984: PUSH
35985: LD_INT 0
35987: ST_TO_ADDR
// hc_sex := sex_male ;
35988: LD_ADDR_OWVAR 27
35992: PUSH
35993: LD_INT 1
35995: ST_TO_ADDR
// hc_name :=  ;
35996: LD_ADDR_OWVAR 26
36000: PUSH
36001: LD_STRING 
36003: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36004: LD_ADDR_OWVAR 28
36008: PUSH
36009: LD_INT 15
36011: ST_TO_ADDR
// hc_gallery :=  ;
36012: LD_ADDR_OWVAR 33
36016: PUSH
36017: LD_STRING 
36019: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36020: LD_ADDR_OWVAR 31
36024: PUSH
36025: LD_INT 0
36027: PPUSH
36028: LD_INT 3
36030: PPUSH
36031: CALL_OW 12
36035: PUSH
36036: LD_INT 0
36038: PPUSH
36039: LD_INT 3
36041: PPUSH
36042: CALL_OW 12
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36059: LD_ADDR_OWVAR 29
36063: PUSH
36064: LD_INT 12
36066: PUSH
36067: LD_INT 12
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: ST_TO_ADDR
// end ;
36074: LD_VAR 0 1
36078: RET
// export function PrepareApemanEngineer ( ) ; begin
36079: LD_INT 0
36081: PPUSH
// uc_nation := 0 ;
36082: LD_ADDR_OWVAR 21
36086: PUSH
36087: LD_INT 0
36089: ST_TO_ADDR
// hc_sex := sex_male ;
36090: LD_ADDR_OWVAR 27
36094: PUSH
36095: LD_INT 1
36097: ST_TO_ADDR
// hc_name :=  ;
36098: LD_ADDR_OWVAR 26
36102: PUSH
36103: LD_STRING 
36105: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36106: LD_ADDR_OWVAR 28
36110: PUSH
36111: LD_INT 16
36113: ST_TO_ADDR
// hc_gallery :=  ;
36114: LD_ADDR_OWVAR 33
36118: PUSH
36119: LD_STRING 
36121: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36122: LD_ADDR_OWVAR 31
36126: PUSH
36127: LD_INT 0
36129: PPUSH
36130: LD_INT 3
36132: PPUSH
36133: CALL_OW 12
36137: PUSH
36138: LD_INT 0
36140: PPUSH
36141: LD_INT 3
36143: PPUSH
36144: CALL_OW 12
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36161: LD_ADDR_OWVAR 29
36165: PUSH
36166: LD_INT 12
36168: PUSH
36169: LD_INT 12
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: ST_TO_ADDR
// end ;
36176: LD_VAR 0 1
36180: RET
// export function PrepareApeman ( agressivity ) ; begin
36181: LD_INT 0
36183: PPUSH
// uc_side := 0 ;
36184: LD_ADDR_OWVAR 20
36188: PUSH
36189: LD_INT 0
36191: ST_TO_ADDR
// uc_nation := 0 ;
36192: LD_ADDR_OWVAR 21
36196: PUSH
36197: LD_INT 0
36199: ST_TO_ADDR
// hc_sex := sex_male ;
36200: LD_ADDR_OWVAR 27
36204: PUSH
36205: LD_INT 1
36207: ST_TO_ADDR
// hc_class := class_apeman ;
36208: LD_ADDR_OWVAR 28
36212: PUSH
36213: LD_INT 12
36215: ST_TO_ADDR
// hc_gallery :=  ;
36216: LD_ADDR_OWVAR 33
36220: PUSH
36221: LD_STRING 
36223: ST_TO_ADDR
// hc_name :=  ;
36224: LD_ADDR_OWVAR 26
36228: PUSH
36229: LD_STRING 
36231: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36232: LD_ADDR_OWVAR 29
36236: PUSH
36237: LD_INT 12
36239: PUSH
36240: LD_INT 12
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: ST_TO_ADDR
// if agressivity = 0 then
36247: LD_VAR 0 1
36251: PUSH
36252: LD_INT 0
36254: EQUAL
36255: IFFALSE 36267
// hc_agressivity := 0 else
36257: LD_ADDR_OWVAR 35
36261: PUSH
36262: LD_INT 0
36264: ST_TO_ADDR
36265: GO 36288
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36267: LD_ADDR_OWVAR 35
36271: PUSH
36272: LD_VAR 0 1
36276: NEG
36277: PPUSH
36278: LD_VAR 0 1
36282: PPUSH
36283: CALL_OW 12
36287: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36288: LD_ADDR_OWVAR 31
36292: PUSH
36293: LD_INT 0
36295: PPUSH
36296: LD_INT 3
36298: PPUSH
36299: CALL_OW 12
36303: PUSH
36304: LD_INT 0
36306: PPUSH
36307: LD_INT 3
36309: PPUSH
36310: CALL_OW 12
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: ST_TO_ADDR
// end ;
36327: LD_VAR 0 2
36331: RET
// export function PrepareTiger ( agressivity ) ; begin
36332: LD_INT 0
36334: PPUSH
// uc_side := 0 ;
36335: LD_ADDR_OWVAR 20
36339: PUSH
36340: LD_INT 0
36342: ST_TO_ADDR
// uc_nation := 0 ;
36343: LD_ADDR_OWVAR 21
36347: PUSH
36348: LD_INT 0
36350: ST_TO_ADDR
// InitHc ;
36351: CALL_OW 19
// hc_class := class_tiger ;
36355: LD_ADDR_OWVAR 28
36359: PUSH
36360: LD_INT 14
36362: ST_TO_ADDR
// hc_gallery :=  ;
36363: LD_ADDR_OWVAR 33
36367: PUSH
36368: LD_STRING 
36370: ST_TO_ADDR
// hc_name :=  ;
36371: LD_ADDR_OWVAR 26
36375: PUSH
36376: LD_STRING 
36378: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36379: LD_ADDR_OWVAR 35
36383: PUSH
36384: LD_VAR 0 1
36388: NEG
36389: PPUSH
36390: LD_VAR 0 1
36394: PPUSH
36395: CALL_OW 12
36399: ST_TO_ADDR
// end ;
36400: LD_VAR 0 2
36404: RET
// export function PrepareEnchidna ( ) ; begin
36405: LD_INT 0
36407: PPUSH
// uc_side := 0 ;
36408: LD_ADDR_OWVAR 20
36412: PUSH
36413: LD_INT 0
36415: ST_TO_ADDR
// uc_nation := 0 ;
36416: LD_ADDR_OWVAR 21
36420: PUSH
36421: LD_INT 0
36423: ST_TO_ADDR
// InitHc ;
36424: CALL_OW 19
// hc_class := class_baggie ;
36428: LD_ADDR_OWVAR 28
36432: PUSH
36433: LD_INT 13
36435: ST_TO_ADDR
// hc_gallery :=  ;
36436: LD_ADDR_OWVAR 33
36440: PUSH
36441: LD_STRING 
36443: ST_TO_ADDR
// hc_name :=  ;
36444: LD_ADDR_OWVAR 26
36448: PUSH
36449: LD_STRING 
36451: ST_TO_ADDR
// end ;
36452: LD_VAR 0 1
36456: RET
// export function PrepareFrog ( ) ; begin
36457: LD_INT 0
36459: PPUSH
// uc_side := 0 ;
36460: LD_ADDR_OWVAR 20
36464: PUSH
36465: LD_INT 0
36467: ST_TO_ADDR
// uc_nation := 0 ;
36468: LD_ADDR_OWVAR 21
36472: PUSH
36473: LD_INT 0
36475: ST_TO_ADDR
// InitHc ;
36476: CALL_OW 19
// hc_class := class_frog ;
36480: LD_ADDR_OWVAR 28
36484: PUSH
36485: LD_INT 19
36487: ST_TO_ADDR
// hc_gallery :=  ;
36488: LD_ADDR_OWVAR 33
36492: PUSH
36493: LD_STRING 
36495: ST_TO_ADDR
// hc_name :=  ;
36496: LD_ADDR_OWVAR 26
36500: PUSH
36501: LD_STRING 
36503: ST_TO_ADDR
// end ;
36504: LD_VAR 0 1
36508: RET
// export function PrepareFish ( ) ; begin
36509: LD_INT 0
36511: PPUSH
// uc_side := 0 ;
36512: LD_ADDR_OWVAR 20
36516: PUSH
36517: LD_INT 0
36519: ST_TO_ADDR
// uc_nation := 0 ;
36520: LD_ADDR_OWVAR 21
36524: PUSH
36525: LD_INT 0
36527: ST_TO_ADDR
// InitHc ;
36528: CALL_OW 19
// hc_class := class_fish ;
36532: LD_ADDR_OWVAR 28
36536: PUSH
36537: LD_INT 20
36539: ST_TO_ADDR
// hc_gallery :=  ;
36540: LD_ADDR_OWVAR 33
36544: PUSH
36545: LD_STRING 
36547: ST_TO_ADDR
// hc_name :=  ;
36548: LD_ADDR_OWVAR 26
36552: PUSH
36553: LD_STRING 
36555: ST_TO_ADDR
// end ;
36556: LD_VAR 0 1
36560: RET
// export function PrepareBird ( ) ; begin
36561: LD_INT 0
36563: PPUSH
// uc_side := 0 ;
36564: LD_ADDR_OWVAR 20
36568: PUSH
36569: LD_INT 0
36571: ST_TO_ADDR
// uc_nation := 0 ;
36572: LD_ADDR_OWVAR 21
36576: PUSH
36577: LD_INT 0
36579: ST_TO_ADDR
// InitHc ;
36580: CALL_OW 19
// hc_class := class_phororhacos ;
36584: LD_ADDR_OWVAR 28
36588: PUSH
36589: LD_INT 18
36591: ST_TO_ADDR
// hc_gallery :=  ;
36592: LD_ADDR_OWVAR 33
36596: PUSH
36597: LD_STRING 
36599: ST_TO_ADDR
// hc_name :=  ;
36600: LD_ADDR_OWVAR 26
36604: PUSH
36605: LD_STRING 
36607: ST_TO_ADDR
// end ;
36608: LD_VAR 0 1
36612: RET
// export function PrepareHorse ( ) ; begin
36613: LD_INT 0
36615: PPUSH
// uc_side := 0 ;
36616: LD_ADDR_OWVAR 20
36620: PUSH
36621: LD_INT 0
36623: ST_TO_ADDR
// uc_nation := 0 ;
36624: LD_ADDR_OWVAR 21
36628: PUSH
36629: LD_INT 0
36631: ST_TO_ADDR
// InitHc ;
36632: CALL_OW 19
// hc_class := class_horse ;
36636: LD_ADDR_OWVAR 28
36640: PUSH
36641: LD_INT 21
36643: ST_TO_ADDR
// hc_gallery :=  ;
36644: LD_ADDR_OWVAR 33
36648: PUSH
36649: LD_STRING 
36651: ST_TO_ADDR
// hc_name :=  ;
36652: LD_ADDR_OWVAR 26
36656: PUSH
36657: LD_STRING 
36659: ST_TO_ADDR
// end ;
36660: LD_VAR 0 1
36664: RET
// export function PrepareMastodont ( ) ; begin
36665: LD_INT 0
36667: PPUSH
// uc_side := 0 ;
36668: LD_ADDR_OWVAR 20
36672: PUSH
36673: LD_INT 0
36675: ST_TO_ADDR
// uc_nation := 0 ;
36676: LD_ADDR_OWVAR 21
36680: PUSH
36681: LD_INT 0
36683: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36684: LD_ADDR_OWVAR 37
36688: PUSH
36689: LD_INT 31
36691: ST_TO_ADDR
// vc_control := control_rider ;
36692: LD_ADDR_OWVAR 38
36696: PUSH
36697: LD_INT 4
36699: ST_TO_ADDR
// end ;
36700: LD_VAR 0 1
36704: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36705: LD_INT 0
36707: PPUSH
36708: PPUSH
36709: PPUSH
// uc_side = 0 ;
36710: LD_ADDR_OWVAR 20
36714: PUSH
36715: LD_INT 0
36717: ST_TO_ADDR
// uc_nation = 0 ;
36718: LD_ADDR_OWVAR 21
36722: PUSH
36723: LD_INT 0
36725: ST_TO_ADDR
// InitHc_All ( ) ;
36726: CALL_OW 584
// InitVc ;
36730: CALL_OW 20
// if mastodonts then
36734: LD_VAR 0 6
36738: IFFALSE 36805
// for i = 1 to mastodonts do
36740: LD_ADDR_VAR 0 11
36744: PUSH
36745: DOUBLE
36746: LD_INT 1
36748: DEC
36749: ST_TO_ADDR
36750: LD_VAR 0 6
36754: PUSH
36755: FOR_TO
36756: IFFALSE 36803
// begin vc_chassis := 31 ;
36758: LD_ADDR_OWVAR 37
36762: PUSH
36763: LD_INT 31
36765: ST_TO_ADDR
// vc_control := control_rider ;
36766: LD_ADDR_OWVAR 38
36770: PUSH
36771: LD_INT 4
36773: ST_TO_ADDR
// animal := CreateVehicle ;
36774: LD_ADDR_VAR 0 12
36778: PUSH
36779: CALL_OW 45
36783: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36784: LD_VAR 0 12
36788: PPUSH
36789: LD_VAR 0 8
36793: PPUSH
36794: LD_INT 0
36796: PPUSH
36797: CALL 38947 0 3
// end ;
36801: GO 36755
36803: POP
36804: POP
// if horses then
36805: LD_VAR 0 5
36809: IFFALSE 36876
// for i = 1 to horses do
36811: LD_ADDR_VAR 0 11
36815: PUSH
36816: DOUBLE
36817: LD_INT 1
36819: DEC
36820: ST_TO_ADDR
36821: LD_VAR 0 5
36825: PUSH
36826: FOR_TO
36827: IFFALSE 36874
// begin hc_class := 21 ;
36829: LD_ADDR_OWVAR 28
36833: PUSH
36834: LD_INT 21
36836: ST_TO_ADDR
// hc_gallery :=  ;
36837: LD_ADDR_OWVAR 33
36841: PUSH
36842: LD_STRING 
36844: ST_TO_ADDR
// animal := CreateHuman ;
36845: LD_ADDR_VAR 0 12
36849: PUSH
36850: CALL_OW 44
36854: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36855: LD_VAR 0 12
36859: PPUSH
36860: LD_VAR 0 8
36864: PPUSH
36865: LD_INT 0
36867: PPUSH
36868: CALL 38947 0 3
// end ;
36872: GO 36826
36874: POP
36875: POP
// if birds then
36876: LD_VAR 0 1
36880: IFFALSE 36947
// for i = 1 to birds do
36882: LD_ADDR_VAR 0 11
36886: PUSH
36887: DOUBLE
36888: LD_INT 1
36890: DEC
36891: ST_TO_ADDR
36892: LD_VAR 0 1
36896: PUSH
36897: FOR_TO
36898: IFFALSE 36945
// begin hc_class := 18 ;
36900: LD_ADDR_OWVAR 28
36904: PUSH
36905: LD_INT 18
36907: ST_TO_ADDR
// hc_gallery =  ;
36908: LD_ADDR_OWVAR 33
36912: PUSH
36913: LD_STRING 
36915: ST_TO_ADDR
// animal := CreateHuman ;
36916: LD_ADDR_VAR 0 12
36920: PUSH
36921: CALL_OW 44
36925: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36926: LD_VAR 0 12
36930: PPUSH
36931: LD_VAR 0 8
36935: PPUSH
36936: LD_INT 0
36938: PPUSH
36939: CALL 38947 0 3
// end ;
36943: GO 36897
36945: POP
36946: POP
// if tigers then
36947: LD_VAR 0 2
36951: IFFALSE 37035
// for i = 1 to tigers do
36953: LD_ADDR_VAR 0 11
36957: PUSH
36958: DOUBLE
36959: LD_INT 1
36961: DEC
36962: ST_TO_ADDR
36963: LD_VAR 0 2
36967: PUSH
36968: FOR_TO
36969: IFFALSE 37033
// begin hc_class = class_tiger ;
36971: LD_ADDR_OWVAR 28
36975: PUSH
36976: LD_INT 14
36978: ST_TO_ADDR
// hc_gallery =  ;
36979: LD_ADDR_OWVAR 33
36983: PUSH
36984: LD_STRING 
36986: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36987: LD_ADDR_OWVAR 35
36991: PUSH
36992: LD_INT 7
36994: NEG
36995: PPUSH
36996: LD_INT 7
36998: PPUSH
36999: CALL_OW 12
37003: ST_TO_ADDR
// animal := CreateHuman ;
37004: LD_ADDR_VAR 0 12
37008: PUSH
37009: CALL_OW 44
37013: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37014: LD_VAR 0 12
37018: PPUSH
37019: LD_VAR 0 8
37023: PPUSH
37024: LD_INT 0
37026: PPUSH
37027: CALL 38947 0 3
// end ;
37031: GO 36968
37033: POP
37034: POP
// if apemans then
37035: LD_VAR 0 3
37039: IFFALSE 37162
// for i = 1 to apemans do
37041: LD_ADDR_VAR 0 11
37045: PUSH
37046: DOUBLE
37047: LD_INT 1
37049: DEC
37050: ST_TO_ADDR
37051: LD_VAR 0 3
37055: PUSH
37056: FOR_TO
37057: IFFALSE 37160
// begin hc_class = class_apeman ;
37059: LD_ADDR_OWVAR 28
37063: PUSH
37064: LD_INT 12
37066: ST_TO_ADDR
// hc_gallery =  ;
37067: LD_ADDR_OWVAR 33
37071: PUSH
37072: LD_STRING 
37074: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37075: LD_ADDR_OWVAR 35
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PPUSH
37084: LD_INT 2
37086: PPUSH
37087: CALL_OW 12
37091: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37092: LD_ADDR_OWVAR 31
37096: PUSH
37097: LD_INT 1
37099: PPUSH
37100: LD_INT 3
37102: PPUSH
37103: CALL_OW 12
37107: PUSH
37108: LD_INT 1
37110: PPUSH
37111: LD_INT 3
37113: PPUSH
37114: CALL_OW 12
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: ST_TO_ADDR
// animal := CreateHuman ;
37131: LD_ADDR_VAR 0 12
37135: PUSH
37136: CALL_OW 44
37140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37141: LD_VAR 0 12
37145: PPUSH
37146: LD_VAR 0 8
37150: PPUSH
37151: LD_INT 0
37153: PPUSH
37154: CALL 38947 0 3
// end ;
37158: GO 37056
37160: POP
37161: POP
// if enchidnas then
37162: LD_VAR 0 4
37166: IFFALSE 37233
// for i = 1 to enchidnas do
37168: LD_ADDR_VAR 0 11
37172: PUSH
37173: DOUBLE
37174: LD_INT 1
37176: DEC
37177: ST_TO_ADDR
37178: LD_VAR 0 4
37182: PUSH
37183: FOR_TO
37184: IFFALSE 37231
// begin hc_class = 13 ;
37186: LD_ADDR_OWVAR 28
37190: PUSH
37191: LD_INT 13
37193: ST_TO_ADDR
// hc_gallery =  ;
37194: LD_ADDR_OWVAR 33
37198: PUSH
37199: LD_STRING 
37201: ST_TO_ADDR
// animal := CreateHuman ;
37202: LD_ADDR_VAR 0 12
37206: PUSH
37207: CALL_OW 44
37211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37212: LD_VAR 0 12
37216: PPUSH
37217: LD_VAR 0 8
37221: PPUSH
37222: LD_INT 0
37224: PPUSH
37225: CALL 38947 0 3
// end ;
37229: GO 37183
37231: POP
37232: POP
// if fishes then
37233: LD_VAR 0 7
37237: IFFALSE 37304
// for i = 1 to fishes do
37239: LD_ADDR_VAR 0 11
37243: PUSH
37244: DOUBLE
37245: LD_INT 1
37247: DEC
37248: ST_TO_ADDR
37249: LD_VAR 0 7
37253: PUSH
37254: FOR_TO
37255: IFFALSE 37302
// begin hc_class = 20 ;
37257: LD_ADDR_OWVAR 28
37261: PUSH
37262: LD_INT 20
37264: ST_TO_ADDR
// hc_gallery =  ;
37265: LD_ADDR_OWVAR 33
37269: PUSH
37270: LD_STRING 
37272: ST_TO_ADDR
// animal := CreateHuman ;
37273: LD_ADDR_VAR 0 12
37277: PUSH
37278: CALL_OW 44
37282: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37283: LD_VAR 0 12
37287: PPUSH
37288: LD_VAR 0 9
37292: PPUSH
37293: LD_INT 0
37295: PPUSH
37296: CALL 38947 0 3
// end ;
37300: GO 37254
37302: POP
37303: POP
// end ;
37304: LD_VAR 0 10
37308: RET
// export function WantHeal ( sci , unit ) ; begin
37309: LD_INT 0
37311: PPUSH
// if GetTaskList ( sci ) > 0 then
37312: LD_VAR 0 1
37316: PPUSH
37317: CALL_OW 437
37321: PUSH
37322: LD_INT 0
37324: GREATER
37325: IFFALSE 37397
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37327: LD_VAR 0 1
37331: PPUSH
37332: CALL_OW 437
37336: PUSH
37337: LD_INT 1
37339: ARRAY
37340: PUSH
37341: LD_INT 1
37343: ARRAY
37344: PUSH
37345: LD_STRING l
37347: EQUAL
37348: IFFALSE 37375
37350: PUSH
37351: LD_VAR 0 1
37355: PPUSH
37356: CALL_OW 437
37360: PUSH
37361: LD_INT 1
37363: ARRAY
37364: PUSH
37365: LD_INT 4
37367: ARRAY
37368: PUSH
37369: LD_VAR 0 2
37373: EQUAL
37374: AND
37375: IFFALSE 37387
// result := true else
37377: LD_ADDR_VAR 0 3
37381: PUSH
37382: LD_INT 1
37384: ST_TO_ADDR
37385: GO 37395
// result := false ;
37387: LD_ADDR_VAR 0 3
37391: PUSH
37392: LD_INT 0
37394: ST_TO_ADDR
// end else
37395: GO 37405
// result := false ;
37397: LD_ADDR_VAR 0 3
37401: PUSH
37402: LD_INT 0
37404: ST_TO_ADDR
// end ;
37405: LD_VAR 0 3
37409: RET
// export function HealTarget ( sci ) ; begin
37410: LD_INT 0
37412: PPUSH
// if not sci then
37413: LD_VAR 0 1
37417: NOT
37418: IFFALSE 37422
// exit ;
37420: GO 37487
// result := 0 ;
37422: LD_ADDR_VAR 0 2
37426: PUSH
37427: LD_INT 0
37429: ST_TO_ADDR
// if GetTaskList ( sci ) then
37430: LD_VAR 0 1
37434: PPUSH
37435: CALL_OW 437
37439: IFFALSE 37487
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37441: LD_VAR 0 1
37445: PPUSH
37446: CALL_OW 437
37450: PUSH
37451: LD_INT 1
37453: ARRAY
37454: PUSH
37455: LD_INT 1
37457: ARRAY
37458: PUSH
37459: LD_STRING l
37461: EQUAL
37462: IFFALSE 37487
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37464: LD_ADDR_VAR 0 2
37468: PUSH
37469: LD_VAR 0 1
37473: PPUSH
37474: CALL_OW 437
37478: PUSH
37479: LD_INT 1
37481: ARRAY
37482: PUSH
37483: LD_INT 4
37485: ARRAY
37486: ST_TO_ADDR
// end ;
37487: LD_VAR 0 2
37491: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37492: LD_INT 0
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
// if not base_units then
37498: LD_VAR 0 1
37502: NOT
37503: IFFALSE 37507
// exit ;
37505: GO 37594
// result := false ;
37507: LD_ADDR_VAR 0 2
37511: PUSH
37512: LD_INT 0
37514: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37515: LD_ADDR_VAR 0 5
37519: PUSH
37520: LD_VAR 0 1
37524: PPUSH
37525: LD_INT 21
37527: PUSH
37528: LD_INT 3
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PPUSH
37535: CALL_OW 72
37539: ST_TO_ADDR
// if not tmp then
37540: LD_VAR 0 5
37544: NOT
37545: IFFALSE 37549
// exit ;
37547: GO 37594
// for i in tmp do
37549: LD_ADDR_VAR 0 3
37553: PUSH
37554: LD_VAR 0 5
37558: PUSH
37559: FOR_IN
37560: IFFALSE 37592
// begin result := EnemyInRange ( i , 22 ) ;
37562: LD_ADDR_VAR 0 2
37566: PUSH
37567: LD_VAR 0 3
37571: PPUSH
37572: LD_INT 22
37574: PPUSH
37575: CALL 35019 0 2
37579: ST_TO_ADDR
// if result then
37580: LD_VAR 0 2
37584: IFFALSE 37590
// exit ;
37586: POP
37587: POP
37588: GO 37594
// end ;
37590: GO 37559
37592: POP
37593: POP
// end ;
37594: LD_VAR 0 2
37598: RET
// export function FilterByTag ( units , tag ) ; begin
37599: LD_INT 0
37601: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37602: LD_ADDR_VAR 0 3
37606: PUSH
37607: LD_VAR 0 1
37611: PPUSH
37612: LD_INT 120
37614: PUSH
37615: LD_VAR 0 2
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PPUSH
37624: CALL_OW 72
37628: ST_TO_ADDR
// end ;
37629: LD_VAR 0 3
37633: RET
// export function IsDriver ( un ) ; begin
37634: LD_INT 0
37636: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37637: LD_ADDR_VAR 0 2
37641: PUSH
37642: LD_VAR 0 1
37646: PUSH
37647: LD_INT 55
37649: PUSH
37650: EMPTY
37651: LIST
37652: PPUSH
37653: CALL_OW 69
37657: IN
37658: ST_TO_ADDR
// end ;
37659: LD_VAR 0 2
37663: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37664: LD_INT 0
37666: PPUSH
37667: PPUSH
// list := [ ] ;
37668: LD_ADDR_VAR 0 5
37672: PUSH
37673: EMPTY
37674: ST_TO_ADDR
// case d of 0 :
37675: LD_VAR 0 3
37679: PUSH
37680: LD_INT 0
37682: DOUBLE
37683: EQUAL
37684: IFTRUE 37688
37686: GO 37821
37688: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37689: LD_ADDR_VAR 0 5
37693: PUSH
37694: LD_VAR 0 1
37698: PUSH
37699: LD_INT 4
37701: MINUS
37702: PUSH
37703: LD_VAR 0 2
37707: PUSH
37708: LD_INT 4
37710: MINUS
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: PUSH
37720: LD_VAR 0 1
37724: PUSH
37725: LD_INT 3
37727: MINUS
37728: PUSH
37729: LD_VAR 0 2
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: PUSH
37742: LD_VAR 0 1
37746: PUSH
37747: LD_INT 4
37749: PLUS
37750: PUSH
37751: LD_VAR 0 2
37755: PUSH
37756: LD_INT 4
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: PUSH
37764: LD_VAR 0 1
37768: PUSH
37769: LD_INT 3
37771: PLUS
37772: PUSH
37773: LD_VAR 0 2
37777: PUSH
37778: LD_INT 3
37780: PLUS
37781: PUSH
37782: LD_INT 5
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: LIST
37789: PUSH
37790: LD_VAR 0 1
37794: PUSH
37795: LD_VAR 0 2
37799: PUSH
37800: LD_INT 4
37802: PLUS
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: ST_TO_ADDR
// end ; 1 :
37819: GO 38519
37821: LD_INT 1
37823: DOUBLE
37824: EQUAL
37825: IFTRUE 37829
37827: GO 37962
37829: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37830: LD_ADDR_VAR 0 5
37834: PUSH
37835: LD_VAR 0 1
37839: PUSH
37840: LD_VAR 0 2
37844: PUSH
37845: LD_INT 4
37847: MINUS
37848: PUSH
37849: LD_INT 3
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: LIST
37856: PUSH
37857: LD_VAR 0 1
37861: PUSH
37862: LD_INT 3
37864: MINUS
37865: PUSH
37866: LD_VAR 0 2
37870: PUSH
37871: LD_INT 3
37873: MINUS
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: LIST
37882: PUSH
37883: LD_VAR 0 1
37887: PUSH
37888: LD_INT 4
37890: MINUS
37891: PUSH
37892: LD_VAR 0 2
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: LIST
37904: PUSH
37905: LD_VAR 0 1
37909: PUSH
37910: LD_VAR 0 2
37914: PUSH
37915: LD_INT 3
37917: PLUS
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: PUSH
37927: LD_VAR 0 1
37931: PUSH
37932: LD_INT 4
37934: PLUS
37935: PUSH
37936: LD_VAR 0 2
37940: PUSH
37941: LD_INT 4
37943: PLUS
37944: PUSH
37945: LD_INT 5
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: ST_TO_ADDR
// end ; 2 :
37960: GO 38519
37962: LD_INT 2
37964: DOUBLE
37965: EQUAL
37966: IFTRUE 37970
37968: GO 38099
37970: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37971: LD_ADDR_VAR 0 5
37975: PUSH
37976: LD_VAR 0 1
37980: PUSH
37981: LD_VAR 0 2
37985: PUSH
37986: LD_INT 3
37988: MINUS
37989: PUSH
37990: LD_INT 3
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: LIST
37997: PUSH
37998: LD_VAR 0 1
38002: PUSH
38003: LD_INT 4
38005: PLUS
38006: PUSH
38007: LD_VAR 0 2
38011: PUSH
38012: LD_INT 4
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: LIST
38019: PUSH
38020: LD_VAR 0 1
38024: PUSH
38025: LD_VAR 0 2
38029: PUSH
38030: LD_INT 4
38032: PLUS
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: PUSH
38042: LD_VAR 0 1
38046: PUSH
38047: LD_INT 3
38049: MINUS
38050: PUSH
38051: LD_VAR 0 2
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: LIST
38063: PUSH
38064: LD_VAR 0 1
38068: PUSH
38069: LD_INT 4
38071: MINUS
38072: PUSH
38073: LD_VAR 0 2
38077: PUSH
38078: LD_INT 4
38080: MINUS
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: LIST
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: ST_TO_ADDR
// end ; 3 :
38097: GO 38519
38099: LD_INT 3
38101: DOUBLE
38102: EQUAL
38103: IFTRUE 38107
38105: GO 38240
38107: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38108: LD_ADDR_VAR 0 5
38112: PUSH
38113: LD_VAR 0 1
38117: PUSH
38118: LD_INT 3
38120: PLUS
38121: PUSH
38122: LD_VAR 0 2
38126: PUSH
38127: LD_INT 4
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: PUSH
38135: LD_VAR 0 1
38139: PUSH
38140: LD_INT 4
38142: PLUS
38143: PUSH
38144: LD_VAR 0 2
38148: PUSH
38149: LD_INT 4
38151: PLUS
38152: PUSH
38153: LD_INT 5
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: PUSH
38161: LD_VAR 0 1
38165: PUSH
38166: LD_INT 4
38168: MINUS
38169: PUSH
38170: LD_VAR 0 2
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: PUSH
38183: LD_VAR 0 1
38187: PUSH
38188: LD_VAR 0 2
38192: PUSH
38193: LD_INT 4
38195: MINUS
38196: PUSH
38197: LD_INT 3
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: LIST
38204: PUSH
38205: LD_VAR 0 1
38209: PUSH
38210: LD_INT 3
38212: MINUS
38213: PUSH
38214: LD_VAR 0 2
38218: PUSH
38219: LD_INT 3
38221: MINUS
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: ST_TO_ADDR
// end ; 4 :
38238: GO 38519
38240: LD_INT 4
38242: DOUBLE
38243: EQUAL
38244: IFTRUE 38248
38246: GO 38381
38248: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38249: LD_ADDR_VAR 0 5
38253: PUSH
38254: LD_VAR 0 1
38258: PUSH
38259: LD_VAR 0 2
38263: PUSH
38264: LD_INT 4
38266: PLUS
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: LIST
38275: PUSH
38276: LD_VAR 0 1
38280: PUSH
38281: LD_INT 3
38283: PLUS
38284: PUSH
38285: LD_VAR 0 2
38289: PUSH
38290: LD_INT 3
38292: PLUS
38293: PUSH
38294: LD_INT 5
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: LIST
38301: PUSH
38302: LD_VAR 0 1
38306: PUSH
38307: LD_INT 4
38309: PLUS
38310: PUSH
38311: LD_VAR 0 2
38315: PUSH
38316: LD_INT 4
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: PUSH
38324: LD_VAR 0 1
38328: PUSH
38329: LD_VAR 0 2
38333: PUSH
38334: LD_INT 3
38336: MINUS
38337: PUSH
38338: LD_INT 3
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: LIST
38345: PUSH
38346: LD_VAR 0 1
38350: PUSH
38351: LD_INT 4
38353: MINUS
38354: PUSH
38355: LD_VAR 0 2
38359: PUSH
38360: LD_INT 4
38362: MINUS
38363: PUSH
38364: LD_INT 2
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: LIST
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: ST_TO_ADDR
// end ; 5 :
38379: GO 38519
38381: LD_INT 5
38383: DOUBLE
38384: EQUAL
38385: IFTRUE 38389
38387: GO 38518
38389: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38390: LD_ADDR_VAR 0 5
38394: PUSH
38395: LD_VAR 0 1
38399: PUSH
38400: LD_INT 4
38402: MINUS
38403: PUSH
38404: LD_VAR 0 2
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: LIST
38416: PUSH
38417: LD_VAR 0 1
38421: PUSH
38422: LD_VAR 0 2
38426: PUSH
38427: LD_INT 4
38429: MINUS
38430: PUSH
38431: LD_INT 3
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: PUSH
38439: LD_VAR 0 1
38443: PUSH
38444: LD_INT 4
38446: PLUS
38447: PUSH
38448: LD_VAR 0 2
38452: PUSH
38453: LD_INT 4
38455: PLUS
38456: PUSH
38457: LD_INT 5
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: LIST
38464: PUSH
38465: LD_VAR 0 1
38469: PUSH
38470: LD_INT 3
38472: PLUS
38473: PUSH
38474: LD_VAR 0 2
38478: PUSH
38479: LD_INT 4
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: LIST
38486: PUSH
38487: LD_VAR 0 1
38491: PUSH
38492: LD_VAR 0 2
38496: PUSH
38497: LD_INT 3
38499: PLUS
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: LIST
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: ST_TO_ADDR
// end ; end ;
38516: GO 38519
38518: POP
// result := list ;
38519: LD_ADDR_VAR 0 4
38523: PUSH
38524: LD_VAR 0 5
38528: ST_TO_ADDR
// end ;
38529: LD_VAR 0 4
38533: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38534: LD_INT 0
38536: PPUSH
38537: PPUSH
38538: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38539: LD_VAR 0 1
38543: NOT
38544: IFTRUE 38572
38546: PUSH
38547: LD_VAR 0 2
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: LD_INT 3
38560: PUSH
38561: LD_INT 4
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: IN
38570: NOT
38571: OR
38572: IFFALSE 38576
// exit ;
38574: GO 38659
// tmp := [ ] ;
38576: LD_ADDR_VAR 0 5
38580: PUSH
38581: EMPTY
38582: ST_TO_ADDR
// for i in units do
38583: LD_ADDR_VAR 0 4
38587: PUSH
38588: LD_VAR 0 1
38592: PUSH
38593: FOR_IN
38594: IFFALSE 38628
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38596: LD_ADDR_VAR 0 5
38600: PUSH
38601: LD_VAR 0 5
38605: PPUSH
38606: LD_VAR 0 4
38610: PPUSH
38611: LD_VAR 0 2
38615: PPUSH
38616: CALL_OW 259
38620: PPUSH
38621: CALL 40054 0 2
38625: ST_TO_ADDR
38626: GO 38593
38628: POP
38629: POP
// if not tmp then
38630: LD_VAR 0 5
38634: NOT
38635: IFFALSE 38639
// exit ;
38637: GO 38659
// result := SortListByListDesc ( units , tmp ) ;
38639: LD_ADDR_VAR 0 3
38643: PUSH
38644: LD_VAR 0 1
38648: PPUSH
38649: LD_VAR 0 5
38653: PPUSH
38654: CALL_OW 77
38658: ST_TO_ADDR
// end ;
38659: LD_VAR 0 3
38663: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38664: LD_INT 0
38666: PPUSH
38667: PPUSH
38668: PPUSH
// result := false ;
38669: LD_ADDR_VAR 0 3
38673: PUSH
38674: LD_INT 0
38676: ST_TO_ADDR
// if not building then
38677: LD_VAR 0 2
38681: NOT
38682: IFFALSE 38686
// exit ;
38684: GO 38830
// x := GetX ( building ) ;
38686: LD_ADDR_VAR 0 4
38690: PUSH
38691: LD_VAR 0 2
38695: PPUSH
38696: CALL_OW 250
38700: ST_TO_ADDR
// y := GetY ( building ) ;
38701: LD_ADDR_VAR 0 5
38705: PUSH
38706: LD_VAR 0 2
38710: PPUSH
38711: CALL_OW 251
38715: ST_TO_ADDR
// if not x or not y then
38716: LD_VAR 0 4
38720: NOT
38721: IFTRUE 38730
38723: PUSH
38724: LD_VAR 0 5
38728: NOT
38729: OR
38730: IFFALSE 38734
// exit ;
38732: GO 38830
// if GetTaskList ( unit ) then
38734: LD_VAR 0 1
38738: PPUSH
38739: CALL_OW 437
38743: IFFALSE 38830
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38745: LD_STRING e
38747: PUSH
38748: LD_VAR 0 1
38752: PPUSH
38753: CALL_OW 437
38757: PUSH
38758: LD_INT 1
38760: ARRAY
38761: PUSH
38762: LD_INT 1
38764: ARRAY
38765: EQUAL
38766: IFFALSE 38793
38768: PUSH
38769: LD_VAR 0 4
38773: PUSH
38774: LD_VAR 0 1
38778: PPUSH
38779: CALL_OW 437
38783: PUSH
38784: LD_INT 1
38786: ARRAY
38787: PUSH
38788: LD_INT 2
38790: ARRAY
38791: EQUAL
38792: AND
38793: IFFALSE 38820
38795: PUSH
38796: LD_VAR 0 5
38800: PUSH
38801: LD_VAR 0 1
38805: PPUSH
38806: CALL_OW 437
38810: PUSH
38811: LD_INT 1
38813: ARRAY
38814: PUSH
38815: LD_INT 3
38817: ARRAY
38818: EQUAL
38819: AND
38820: IFFALSE 38830
// result := true end ;
38822: LD_ADDR_VAR 0 3
38826: PUSH
38827: LD_INT 1
38829: ST_TO_ADDR
// end ;
38830: LD_VAR 0 3
38834: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38835: LD_INT 0
38837: PPUSH
// result := false ;
38838: LD_ADDR_VAR 0 4
38842: PUSH
38843: LD_INT 0
38845: ST_TO_ADDR
// if GetTaskList ( unit ) then
38846: LD_VAR 0 1
38850: PPUSH
38851: CALL_OW 437
38855: IFFALSE 38942
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38857: LD_STRING M
38859: PUSH
38860: LD_VAR 0 1
38864: PPUSH
38865: CALL_OW 437
38869: PUSH
38870: LD_INT 1
38872: ARRAY
38873: PUSH
38874: LD_INT 1
38876: ARRAY
38877: EQUAL
38878: IFFALSE 38905
38880: PUSH
38881: LD_VAR 0 2
38885: PUSH
38886: LD_VAR 0 1
38890: PPUSH
38891: CALL_OW 437
38895: PUSH
38896: LD_INT 1
38898: ARRAY
38899: PUSH
38900: LD_INT 2
38902: ARRAY
38903: EQUAL
38904: AND
38905: IFFALSE 38932
38907: PUSH
38908: LD_VAR 0 3
38912: PUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL_OW 437
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: PUSH
38927: LD_INT 3
38929: ARRAY
38930: EQUAL
38931: AND
38932: IFFALSE 38942
// result := true ;
38934: LD_ADDR_VAR 0 4
38938: PUSH
38939: LD_INT 1
38941: ST_TO_ADDR
// end ; end ;
38942: LD_VAR 0 4
38946: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38947: LD_INT 0
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
// if not unit or not area then
38953: LD_VAR 0 1
38957: NOT
38958: IFTRUE 38967
38960: PUSH
38961: LD_VAR 0 2
38965: NOT
38966: OR
38967: IFFALSE 38971
// exit ;
38969: GO 39147
// tmp := AreaToList ( area , i ) ;
38971: LD_ADDR_VAR 0 6
38975: PUSH
38976: LD_VAR 0 2
38980: PPUSH
38981: LD_VAR 0 5
38985: PPUSH
38986: CALL_OW 517
38990: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38991: LD_ADDR_VAR 0 5
38995: PUSH
38996: DOUBLE
38997: LD_INT 1
38999: DEC
39000: ST_TO_ADDR
39001: LD_VAR 0 6
39005: PUSH
39006: LD_INT 1
39008: ARRAY
39009: PUSH
39010: FOR_TO
39011: IFFALSE 39145
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39013: LD_ADDR_VAR 0 7
39017: PUSH
39018: LD_VAR 0 6
39022: PUSH
39023: LD_INT 1
39025: ARRAY
39026: PUSH
39027: LD_VAR 0 5
39031: ARRAY
39032: PUSH
39033: LD_VAR 0 6
39037: PUSH
39038: LD_INT 2
39040: ARRAY
39041: PUSH
39042: LD_VAR 0 5
39046: ARRAY
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39052: LD_INT 92
39054: PUSH
39055: LD_VAR 0 7
39059: PUSH
39060: LD_INT 1
39062: ARRAY
39063: PUSH
39064: LD_VAR 0 7
39068: PUSH
39069: LD_INT 2
39071: ARRAY
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: PPUSH
39082: CALL_OW 69
39086: PUSH
39087: LD_INT 0
39089: EQUAL
39090: IFFALSE 39143
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39092: LD_VAR 0 1
39096: PPUSH
39097: LD_VAR 0 7
39101: PUSH
39102: LD_INT 1
39104: ARRAY
39105: PPUSH
39106: LD_VAR 0 7
39110: PUSH
39111: LD_INT 2
39113: ARRAY
39114: PPUSH
39115: LD_VAR 0 3
39119: PPUSH
39120: CALL_OW 48
// result := IsPlaced ( unit ) ;
39124: LD_ADDR_VAR 0 4
39128: PUSH
39129: LD_VAR 0 1
39133: PPUSH
39134: CALL_OW 305
39138: ST_TO_ADDR
// exit ;
39139: POP
39140: POP
39141: GO 39147
// end ; end ;
39143: GO 39010
39145: POP
39146: POP
// end ;
39147: LD_VAR 0 4
39151: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39152: LD_INT 0
39154: PPUSH
39155: PPUSH
39156: PPUSH
// if not side or side > 8 then
39157: LD_VAR 0 1
39161: NOT
39162: IFTRUE 39174
39164: PUSH
39165: LD_VAR 0 1
39169: PUSH
39170: LD_INT 8
39172: GREATER
39173: OR
39174: IFFALSE 39178
// exit ;
39176: GO 39365
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39178: LD_ADDR_VAR 0 4
39182: PUSH
39183: LD_INT 22
39185: PUSH
39186: LD_VAR 0 1
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 21
39197: PUSH
39198: LD_INT 3
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PPUSH
39209: CALL_OW 69
39213: ST_TO_ADDR
// if not tmp then
39214: LD_VAR 0 4
39218: NOT
39219: IFFALSE 39223
// exit ;
39221: GO 39365
// enable_addtolog := true ;
39223: LD_ADDR_OWVAR 81
39227: PUSH
39228: LD_INT 1
39230: ST_TO_ADDR
// AddToLog ( [ ) ;
39231: LD_STRING [
39233: PPUSH
39234: CALL_OW 561
// for i in tmp do
39238: LD_ADDR_VAR 0 3
39242: PUSH
39243: LD_VAR 0 4
39247: PUSH
39248: FOR_IN
39249: IFFALSE 39356
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39251: LD_STRING [
39253: PUSH
39254: LD_VAR 0 3
39258: PPUSH
39259: CALL_OW 266
39263: STR
39264: PUSH
39265: LD_STRING , 
39267: STR
39268: PUSH
39269: LD_VAR 0 3
39273: PPUSH
39274: CALL_OW 250
39278: STR
39279: PUSH
39280: LD_STRING , 
39282: STR
39283: PUSH
39284: LD_VAR 0 3
39288: PPUSH
39289: CALL_OW 251
39293: STR
39294: PUSH
39295: LD_STRING , 
39297: STR
39298: PUSH
39299: LD_VAR 0 3
39303: PPUSH
39304: CALL_OW 254
39308: STR
39309: PUSH
39310: LD_STRING , 
39312: STR
39313: PUSH
39314: LD_VAR 0 3
39318: PPUSH
39319: LD_INT 1
39321: PPUSH
39322: CALL_OW 268
39326: STR
39327: PUSH
39328: LD_STRING , 
39330: STR
39331: PUSH
39332: LD_VAR 0 3
39336: PPUSH
39337: LD_INT 2
39339: PPUSH
39340: CALL_OW 268
39344: STR
39345: PUSH
39346: LD_STRING ],
39348: STR
39349: PPUSH
39350: CALL_OW 561
// end ;
39354: GO 39248
39356: POP
39357: POP
// AddToLog ( ]; ) ;
39358: LD_STRING ];
39360: PPUSH
39361: CALL_OW 561
// end ;
39365: LD_VAR 0 2
39369: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39370: LD_INT 0
39372: PPUSH
39373: PPUSH
39374: PPUSH
39375: PPUSH
39376: PPUSH
// if not area or not rate or not max then
39377: LD_VAR 0 1
39381: NOT
39382: IFTRUE 39391
39384: PUSH
39385: LD_VAR 0 2
39389: NOT
39390: OR
39391: IFTRUE 39400
39393: PUSH
39394: LD_VAR 0 4
39398: NOT
39399: OR
39400: IFFALSE 39404
// exit ;
39402: GO 39593
// while 1 do
39404: LD_INT 1
39406: IFFALSE 39593
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39408: LD_ADDR_VAR 0 9
39412: PUSH
39413: LD_VAR 0 1
39417: PPUSH
39418: LD_INT 1
39420: PPUSH
39421: CALL_OW 287
39425: PUSH
39426: LD_INT 10
39428: MUL
39429: ST_TO_ADDR
// r := rate / 10 ;
39430: LD_ADDR_VAR 0 7
39434: PUSH
39435: LD_VAR 0 2
39439: PUSH
39440: LD_INT 10
39442: DIVREAL
39443: ST_TO_ADDR
// time := 1 1$00 ;
39444: LD_ADDR_VAR 0 8
39448: PUSH
39449: LD_INT 2100
39451: ST_TO_ADDR
// if amount < min then
39452: LD_VAR 0 9
39456: PUSH
39457: LD_VAR 0 3
39461: LESS
39462: IFFALSE 39480
// r := r * 2 else
39464: LD_ADDR_VAR 0 7
39468: PUSH
39469: LD_VAR 0 7
39473: PUSH
39474: LD_INT 2
39476: MUL
39477: ST_TO_ADDR
39478: GO 39506
// if amount > max then
39480: LD_VAR 0 9
39484: PUSH
39485: LD_VAR 0 4
39489: GREATER
39490: IFFALSE 39506
// r := r / 2 ;
39492: LD_ADDR_VAR 0 7
39496: PUSH
39497: LD_VAR 0 7
39501: PUSH
39502: LD_INT 2
39504: DIVREAL
39505: ST_TO_ADDR
// time := time / r ;
39506: LD_ADDR_VAR 0 8
39510: PUSH
39511: LD_VAR 0 8
39515: PUSH
39516: LD_VAR 0 7
39520: DIVREAL
39521: ST_TO_ADDR
// if time < 0 then
39522: LD_VAR 0 8
39526: PUSH
39527: LD_INT 0
39529: LESS
39530: IFFALSE 39547
// time := time * - 1 ;
39532: LD_ADDR_VAR 0 8
39536: PUSH
39537: LD_VAR 0 8
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: MUL
39546: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39547: LD_VAR 0 8
39551: PUSH
39552: LD_INT 35
39554: PPUSH
39555: LD_INT 875
39557: PPUSH
39558: CALL_OW 12
39562: PLUS
39563: PPUSH
39564: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39568: LD_INT 1
39570: PPUSH
39571: LD_INT 5
39573: PPUSH
39574: CALL_OW 12
39578: PPUSH
39579: LD_VAR 0 1
39583: PPUSH
39584: LD_INT 1
39586: PPUSH
39587: CALL_OW 55
// end ;
39591: GO 39404
// end ;
39593: LD_VAR 0 5
39597: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39598: LD_INT 0
39600: PPUSH
39601: PPUSH
39602: PPUSH
39603: PPUSH
39604: PPUSH
39605: PPUSH
39606: PPUSH
39607: PPUSH
// if not turrets or not factories then
39608: LD_VAR 0 1
39612: NOT
39613: IFTRUE 39622
39615: PUSH
39616: LD_VAR 0 2
39620: NOT
39621: OR
39622: IFFALSE 39626
// exit ;
39624: GO 39933
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39626: LD_ADDR_VAR 0 10
39630: PUSH
39631: LD_INT 5
39633: PUSH
39634: LD_INT 6
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: LD_INT 4
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 3
39653: PUSH
39654: LD_INT 5
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 24
39668: PUSH
39669: LD_INT 25
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 23
39678: PUSH
39679: LD_INT 27
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 42
39692: PUSH
39693: LD_INT 43
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 44
39702: PUSH
39703: LD_INT 46
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 45
39712: PUSH
39713: LD_INT 47
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: LIST
39729: ST_TO_ADDR
// result := [ ] ;
39730: LD_ADDR_VAR 0 3
39734: PUSH
39735: EMPTY
39736: ST_TO_ADDR
// for i in turrets do
39737: LD_ADDR_VAR 0 4
39741: PUSH
39742: LD_VAR 0 1
39746: PUSH
39747: FOR_IN
39748: IFFALSE 39931
// begin nat := GetNation ( i ) ;
39750: LD_ADDR_VAR 0 7
39754: PUSH
39755: LD_VAR 0 4
39759: PPUSH
39760: CALL_OW 248
39764: ST_TO_ADDR
// weapon := 0 ;
39765: LD_ADDR_VAR 0 8
39769: PUSH
39770: LD_INT 0
39772: ST_TO_ADDR
// if not nat then
39773: LD_VAR 0 7
39777: NOT
39778: IFFALSE 39782
// continue ;
39780: GO 39747
// for j in list [ nat ] do
39782: LD_ADDR_VAR 0 5
39786: PUSH
39787: LD_VAR 0 10
39791: PUSH
39792: LD_VAR 0 7
39796: ARRAY
39797: PUSH
39798: FOR_IN
39799: IFFALSE 39840
// if GetBWeapon ( i ) = j [ 1 ] then
39801: LD_VAR 0 4
39805: PPUSH
39806: CALL_OW 269
39810: PUSH
39811: LD_VAR 0 5
39815: PUSH
39816: LD_INT 1
39818: ARRAY
39819: EQUAL
39820: IFFALSE 39838
// begin weapon := j [ 2 ] ;
39822: LD_ADDR_VAR 0 8
39826: PUSH
39827: LD_VAR 0 5
39831: PUSH
39832: LD_INT 2
39834: ARRAY
39835: ST_TO_ADDR
// break ;
39836: GO 39840
// end ;
39838: GO 39798
39840: POP
39841: POP
// if not weapon then
39842: LD_VAR 0 8
39846: NOT
39847: IFFALSE 39851
// continue ;
39849: GO 39747
// for k in factories do
39851: LD_ADDR_VAR 0 6
39855: PUSH
39856: LD_VAR 0 2
39860: PUSH
39861: FOR_IN
39862: IFFALSE 39927
// begin weapons := AvailableWeaponList ( k ) ;
39864: LD_ADDR_VAR 0 9
39868: PUSH
39869: LD_VAR 0 6
39873: PPUSH
39874: CALL_OW 478
39878: ST_TO_ADDR
// if not weapons then
39879: LD_VAR 0 9
39883: NOT
39884: IFFALSE 39888
// continue ;
39886: GO 39861
// if weapon in weapons then
39888: LD_VAR 0 8
39892: PUSH
39893: LD_VAR 0 9
39897: IN
39898: IFFALSE 39925
// begin result := [ i , weapon ] ;
39900: LD_ADDR_VAR 0 3
39904: PUSH
39905: LD_VAR 0 4
39909: PUSH
39910: LD_VAR 0 8
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: ST_TO_ADDR
// exit ;
39919: POP
39920: POP
39921: POP
39922: POP
39923: GO 39933
// end ; end ;
39925: GO 39861
39927: POP
39928: POP
// end ;
39929: GO 39747
39931: POP
39932: POP
// end ;
39933: LD_VAR 0 3
39937: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39938: LD_INT 0
39940: PPUSH
// if not side or side > 8 then
39941: LD_VAR 0 3
39945: NOT
39946: IFTRUE 39958
39948: PUSH
39949: LD_VAR 0 3
39953: PUSH
39954: LD_INT 8
39956: GREATER
39957: OR
39958: IFFALSE 39962
// exit ;
39960: GO 40021
// if not range then
39962: LD_VAR 0 4
39966: NOT
39967: IFFALSE 39978
// range := - 12 ;
39969: LD_ADDR_VAR 0 4
39973: PUSH
39974: LD_INT 12
39976: NEG
39977: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39978: LD_VAR 0 1
39982: PPUSH
39983: LD_VAR 0 2
39987: PPUSH
39988: LD_VAR 0 3
39992: PPUSH
39993: LD_VAR 0 4
39997: PPUSH
39998: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40002: LD_VAR 0 1
40006: PPUSH
40007: LD_VAR 0 2
40011: PPUSH
40012: LD_VAR 0 3
40016: PPUSH
40017: CALL_OW 331
// end ;
40021: LD_VAR 0 5
40025: RET
// export function Video ( mode ) ; begin
40026: LD_INT 0
40028: PPUSH
// ingame_video = mode ;
40029: LD_ADDR_OWVAR 52
40033: PUSH
40034: LD_VAR 0 1
40038: ST_TO_ADDR
// interface_hidden = mode ;
40039: LD_ADDR_OWVAR 54
40043: PUSH
40044: LD_VAR 0 1
40048: ST_TO_ADDR
// end ;
40049: LD_VAR 0 2
40053: RET
// export function Join ( array , element ) ; begin
40054: LD_INT 0
40056: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: LD_VAR 0 1
40071: PUSH
40072: LD_INT 1
40074: PLUS
40075: PPUSH
40076: LD_VAR 0 2
40080: PPUSH
40081: CALL_OW 1
40085: ST_TO_ADDR
// end ;
40086: LD_VAR 0 3
40090: RET
// export function JoinUnion ( array , element ) ; begin
40091: LD_INT 0
40093: PPUSH
// result := array union element ;
40094: LD_ADDR_VAR 0 3
40098: PUSH
40099: LD_VAR 0 1
40103: PUSH
40104: LD_VAR 0 2
40108: UNION
40109: ST_TO_ADDR
// end ;
40110: LD_VAR 0 3
40114: RET
// export function GetBehemoths ( side ) ; begin
40115: LD_INT 0
40117: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40118: LD_ADDR_VAR 0 2
40122: PUSH
40123: LD_INT 22
40125: PUSH
40126: LD_VAR 0 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 31
40137: PUSH
40138: LD_INT 25
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PPUSH
40149: CALL_OW 69
40153: ST_TO_ADDR
// end ;
40154: LD_VAR 0 2
40158: RET
// export function Shuffle ( array ) ; var i , index ; begin
40159: LD_INT 0
40161: PPUSH
40162: PPUSH
40163: PPUSH
// result := [ ] ;
40164: LD_ADDR_VAR 0 2
40168: PUSH
40169: EMPTY
40170: ST_TO_ADDR
// if not array then
40171: LD_VAR 0 1
40175: NOT
40176: IFFALSE 40180
// exit ;
40178: GO 40279
// Randomize ;
40180: CALL_OW 10
// for i = array downto 1 do
40184: LD_ADDR_VAR 0 3
40188: PUSH
40189: DOUBLE
40190: LD_VAR 0 1
40194: INC
40195: ST_TO_ADDR
40196: LD_INT 1
40198: PUSH
40199: FOR_DOWNTO
40200: IFFALSE 40277
// begin index := rand ( 1 , array ) ;
40202: LD_ADDR_VAR 0 4
40206: PUSH
40207: LD_INT 1
40209: PPUSH
40210: LD_VAR 0 1
40214: PPUSH
40215: CALL_OW 12
40219: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40220: LD_ADDR_VAR 0 2
40224: PUSH
40225: LD_VAR 0 2
40229: PPUSH
40230: LD_VAR 0 2
40234: PUSH
40235: LD_INT 1
40237: PLUS
40238: PPUSH
40239: LD_VAR 0 1
40243: PUSH
40244: LD_VAR 0 4
40248: ARRAY
40249: PPUSH
40250: CALL_OW 2
40254: ST_TO_ADDR
// array := Delete ( array , index ) ;
40255: LD_ADDR_VAR 0 1
40259: PUSH
40260: LD_VAR 0 1
40264: PPUSH
40265: LD_VAR 0 4
40269: PPUSH
40270: CALL_OW 3
40274: ST_TO_ADDR
// end ;
40275: GO 40199
40277: POP
40278: POP
// end ;
40279: LD_VAR 0 2
40283: RET
// export function GetBaseMaterials ( base ) ; begin
40284: LD_INT 0
40286: PPUSH
// result := [ 0 , 0 , 0 ] ;
40287: LD_ADDR_VAR 0 2
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: LIST
40305: ST_TO_ADDR
// if not base then
40306: LD_VAR 0 1
40310: NOT
40311: IFFALSE 40315
// exit ;
40313: GO 40364
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40315: LD_ADDR_VAR 0 2
40319: PUSH
40320: LD_VAR 0 1
40324: PPUSH
40325: LD_INT 1
40327: PPUSH
40328: CALL_OW 275
40332: PUSH
40333: LD_VAR 0 1
40337: PPUSH
40338: LD_INT 2
40340: PPUSH
40341: CALL_OW 275
40345: PUSH
40346: LD_VAR 0 1
40350: PPUSH
40351: LD_INT 3
40353: PPUSH
40354: CALL_OW 275
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: ST_TO_ADDR
// end ;
40364: LD_VAR 0 2
40368: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40369: LD_INT 0
40371: PPUSH
40372: PPUSH
// result := array ;
40373: LD_ADDR_VAR 0 3
40377: PUSH
40378: LD_VAR 0 1
40382: ST_TO_ADDR
// if size >= result then
40383: LD_VAR 0 2
40387: PUSH
40388: LD_VAR 0 3
40392: GREATEREQUAL
40393: IFFALSE 40397
// exit ;
40395: GO 40447
// if size then
40397: LD_VAR 0 2
40401: IFFALSE 40447
// for i := array downto size do
40403: LD_ADDR_VAR 0 4
40407: PUSH
40408: DOUBLE
40409: LD_VAR 0 1
40413: INC
40414: ST_TO_ADDR
40415: LD_VAR 0 2
40419: PUSH
40420: FOR_DOWNTO
40421: IFFALSE 40445
// result := Delete ( result , result ) ;
40423: LD_ADDR_VAR 0 3
40427: PUSH
40428: LD_VAR 0 3
40432: PPUSH
40433: LD_VAR 0 3
40437: PPUSH
40438: CALL_OW 3
40442: ST_TO_ADDR
40443: GO 40420
40445: POP
40446: POP
// end ;
40447: LD_VAR 0 3
40451: RET
// export function ComExit ( unit ) ; var tmp ; begin
40452: LD_INT 0
40454: PPUSH
40455: PPUSH
// if not IsInUnit ( unit ) then
40456: LD_VAR 0 1
40460: PPUSH
40461: CALL_OW 310
40465: NOT
40466: IFFALSE 40470
// exit ;
40468: GO 40530
// tmp := IsInUnit ( unit ) ;
40470: LD_ADDR_VAR 0 3
40474: PUSH
40475: LD_VAR 0 1
40479: PPUSH
40480: CALL_OW 310
40484: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40485: LD_VAR 0 3
40489: PPUSH
40490: CALL_OW 247
40494: PUSH
40495: LD_INT 2
40497: EQUAL
40498: IFFALSE 40511
// ComExitVehicle ( unit ) else
40500: LD_VAR 0 1
40504: PPUSH
40505: CALL_OW 121
40509: GO 40520
// ComExitBuilding ( unit ) ;
40511: LD_VAR 0 1
40515: PPUSH
40516: CALL_OW 122
// result := tmp ;
40520: LD_ADDR_VAR 0 2
40524: PUSH
40525: LD_VAR 0 3
40529: ST_TO_ADDR
// end ;
40530: LD_VAR 0 2
40534: RET
// export function ComExitAll ( units ) ; var i ; begin
40535: LD_INT 0
40537: PPUSH
40538: PPUSH
// if not units then
40539: LD_VAR 0 1
40543: NOT
40544: IFFALSE 40548
// exit ;
40546: GO 40574
// for i in units do
40548: LD_ADDR_VAR 0 3
40552: PUSH
40553: LD_VAR 0 1
40557: PUSH
40558: FOR_IN
40559: IFFALSE 40572
// ComExit ( i ) ;
40561: LD_VAR 0 3
40565: PPUSH
40566: CALL 40452 0 1
40570: GO 40558
40572: POP
40573: POP
// end ;
40574: LD_VAR 0 2
40578: RET
// export function ResetHc ; begin
40579: LD_INT 0
40581: PPUSH
// InitHc ;
40582: CALL_OW 19
// hc_importance := 0 ;
40586: LD_ADDR_OWVAR 32
40590: PUSH
40591: LD_INT 0
40593: ST_TO_ADDR
// end ;
40594: LD_VAR 0 1
40598: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40599: LD_INT 0
40601: PPUSH
40602: PPUSH
40603: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40604: LD_ADDR_VAR 0 6
40608: PUSH
40609: LD_VAR 0 1
40613: PUSH
40614: LD_VAR 0 3
40618: PLUS
40619: PUSH
40620: LD_INT 2
40622: DIV
40623: ST_TO_ADDR
// if _x < 0 then
40624: LD_VAR 0 6
40628: PUSH
40629: LD_INT 0
40631: LESS
40632: IFFALSE 40649
// _x := _x * - 1 ;
40634: LD_ADDR_VAR 0 6
40638: PUSH
40639: LD_VAR 0 6
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: MUL
40648: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40649: LD_ADDR_VAR 0 7
40653: PUSH
40654: LD_VAR 0 2
40658: PUSH
40659: LD_VAR 0 4
40663: PLUS
40664: PUSH
40665: LD_INT 2
40667: DIV
40668: ST_TO_ADDR
// if _y < 0 then
40669: LD_VAR 0 7
40673: PUSH
40674: LD_INT 0
40676: LESS
40677: IFFALSE 40694
// _y := _y * - 1 ;
40679: LD_ADDR_VAR 0 7
40683: PUSH
40684: LD_VAR 0 7
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: MUL
40693: ST_TO_ADDR
// result := [ _x , _y ] ;
40694: LD_ADDR_VAR 0 5
40698: PUSH
40699: LD_VAR 0 6
40703: PUSH
40704: LD_VAR 0 7
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// end ;
40713: LD_VAR 0 5
40717: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40718: LD_INT 0
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
// task := GetTaskList ( unit ) ;
40724: LD_ADDR_VAR 0 7
40728: PUSH
40729: LD_VAR 0 1
40733: PPUSH
40734: CALL_OW 437
40738: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40739: LD_VAR 0 7
40743: NOT
40744: IFFALSE 40763
40746: PUSH
40747: LD_VAR 0 1
40751: PPUSH
40752: LD_VAR 0 2
40756: PPUSH
40757: CALL_OW 308
40761: NOT
40762: AND
40763: IFFALSE 40767
// exit ;
40765: GO 40885
// if IsInArea ( unit , area ) then
40767: LD_VAR 0 1
40771: PPUSH
40772: LD_VAR 0 2
40776: PPUSH
40777: CALL_OW 308
40781: IFFALSE 40799
// begin ComMoveToArea ( unit , goAway ) ;
40783: LD_VAR 0 1
40787: PPUSH
40788: LD_VAR 0 3
40792: PPUSH
40793: CALL_OW 113
// exit ;
40797: GO 40885
// end ; if task [ 1 ] [ 1 ] <> M then
40799: LD_VAR 0 7
40803: PUSH
40804: LD_INT 1
40806: ARRAY
40807: PUSH
40808: LD_INT 1
40810: ARRAY
40811: PUSH
40812: LD_STRING M
40814: NONEQUAL
40815: IFFALSE 40819
// exit ;
40817: GO 40885
// x := task [ 1 ] [ 2 ] ;
40819: LD_ADDR_VAR 0 5
40823: PUSH
40824: LD_VAR 0 7
40828: PUSH
40829: LD_INT 1
40831: ARRAY
40832: PUSH
40833: LD_INT 2
40835: ARRAY
40836: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40837: LD_ADDR_VAR 0 6
40841: PUSH
40842: LD_VAR 0 7
40846: PUSH
40847: LD_INT 1
40849: ARRAY
40850: PUSH
40851: LD_INT 3
40853: ARRAY
40854: ST_TO_ADDR
// if InArea ( x , y , area ) then
40855: LD_VAR 0 5
40859: PPUSH
40860: LD_VAR 0 6
40864: PPUSH
40865: LD_VAR 0 2
40869: PPUSH
40870: CALL_OW 309
40874: IFFALSE 40885
// ComStop ( unit ) ;
40876: LD_VAR 0 1
40880: PPUSH
40881: CALL_OW 141
// end ;
40885: LD_VAR 0 4
40889: RET
// export function Abs ( value ) ; begin
40890: LD_INT 0
40892: PPUSH
// result := value ;
40893: LD_ADDR_VAR 0 2
40897: PUSH
40898: LD_VAR 0 1
40902: ST_TO_ADDR
// if value < 0 then
40903: LD_VAR 0 1
40907: PUSH
40908: LD_INT 0
40910: LESS
40911: IFFALSE 40928
// result := value * - 1 ;
40913: LD_ADDR_VAR 0 2
40917: PUSH
40918: LD_VAR 0 1
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: MUL
40927: ST_TO_ADDR
// end ;
40928: LD_VAR 0 2
40932: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40933: LD_INT 0
40935: PPUSH
40936: PPUSH
40937: PPUSH
40938: PPUSH
40939: PPUSH
40940: PPUSH
40941: PPUSH
40942: PPUSH
// if not unit or not building then
40943: LD_VAR 0 1
40947: NOT
40948: IFTRUE 40957
40950: PUSH
40951: LD_VAR 0 2
40955: NOT
40956: OR
40957: IFFALSE 40961
// exit ;
40959: GO 41189
// x := GetX ( building ) ;
40961: LD_ADDR_VAR 0 4
40965: PUSH
40966: LD_VAR 0 2
40970: PPUSH
40971: CALL_OW 250
40975: ST_TO_ADDR
// y := GetY ( building ) ;
40976: LD_ADDR_VAR 0 6
40980: PUSH
40981: LD_VAR 0 2
40985: PPUSH
40986: CALL_OW 251
40990: ST_TO_ADDR
// d := GetDir ( building ) ;
40991: LD_ADDR_VAR 0 8
40995: PUSH
40996: LD_VAR 0 2
41000: PPUSH
41001: CALL_OW 254
41005: ST_TO_ADDR
// r := 4 ;
41006: LD_ADDR_VAR 0 9
41010: PUSH
41011: LD_INT 4
41013: ST_TO_ADDR
// for i := 1 to 5 do
41014: LD_ADDR_VAR 0 10
41018: PUSH
41019: DOUBLE
41020: LD_INT 1
41022: DEC
41023: ST_TO_ADDR
41024: LD_INT 5
41026: PUSH
41027: FOR_TO
41028: IFFALSE 41187
// begin _x := ShiftX ( x , d , r + i ) ;
41030: LD_ADDR_VAR 0 5
41034: PUSH
41035: LD_VAR 0 4
41039: PPUSH
41040: LD_VAR 0 8
41044: PPUSH
41045: LD_VAR 0 9
41049: PUSH
41050: LD_VAR 0 10
41054: PLUS
41055: PPUSH
41056: CALL_OW 272
41060: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41061: LD_ADDR_VAR 0 7
41065: PUSH
41066: LD_VAR 0 6
41070: PPUSH
41071: LD_VAR 0 8
41075: PPUSH
41076: LD_VAR 0 9
41080: PUSH
41081: LD_VAR 0 10
41085: PLUS
41086: PPUSH
41087: CALL_OW 273
41091: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41092: LD_VAR 0 5
41096: PPUSH
41097: LD_VAR 0 7
41101: PPUSH
41102: CALL_OW 488
41106: IFFALSE 41141
41108: PUSH
41109: LD_VAR 0 5
41113: PPUSH
41114: LD_VAR 0 7
41118: PPUSH
41119: CALL_OW 428
41123: PPUSH
41124: CALL_OW 247
41128: PUSH
41129: LD_INT 3
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: IN
41139: NOT
41140: AND
41141: IFFALSE 41185
// begin ComMoveXY ( unit , _x , _y ) ;
41143: LD_VAR 0 1
41147: PPUSH
41148: LD_VAR 0 5
41152: PPUSH
41153: LD_VAR 0 7
41157: PPUSH
41158: CALL_OW 111
// result := [ _x , _y ] ;
41162: LD_ADDR_VAR 0 3
41166: PUSH
41167: LD_VAR 0 5
41171: PUSH
41172: LD_VAR 0 7
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: ST_TO_ADDR
// exit ;
41181: POP
41182: POP
41183: GO 41189
// end ; end ;
41185: GO 41027
41187: POP
41188: POP
// end ;
41189: LD_VAR 0 3
41193: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41194: LD_INT 0
41196: PPUSH
41197: PPUSH
41198: PPUSH
// result := 0 ;
41199: LD_ADDR_VAR 0 3
41203: PUSH
41204: LD_INT 0
41206: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41207: LD_VAR 0 1
41211: PUSH
41212: LD_INT 0
41214: LESS
41215: IFTRUE 41227
41217: PUSH
41218: LD_VAR 0 1
41222: PUSH
41223: LD_INT 8
41225: GREATER
41226: OR
41227: IFTRUE 41239
41229: PUSH
41230: LD_VAR 0 2
41234: PUSH
41235: LD_INT 0
41237: LESS
41238: OR
41239: IFTRUE 41251
41241: PUSH
41242: LD_VAR 0 2
41246: PUSH
41247: LD_INT 8
41249: GREATER
41250: OR
41251: IFFALSE 41255
// exit ;
41253: GO 41330
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41255: LD_ADDR_VAR 0 4
41259: PUSH
41260: LD_INT 22
41262: PUSH
41263: LD_VAR 0 2
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PPUSH
41272: CALL_OW 69
41276: PUSH
41277: FOR_IN
41278: IFFALSE 41328
// begin un := UnitShoot ( i ) ;
41280: LD_ADDR_VAR 0 5
41284: PUSH
41285: LD_VAR 0 4
41289: PPUSH
41290: CALL_OW 504
41294: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41295: LD_VAR 0 5
41299: PPUSH
41300: CALL_OW 255
41304: PUSH
41305: LD_VAR 0 1
41309: EQUAL
41310: IFFALSE 41326
// begin result := un ;
41312: LD_ADDR_VAR 0 3
41316: PUSH
41317: LD_VAR 0 5
41321: ST_TO_ADDR
// exit ;
41322: POP
41323: POP
41324: GO 41330
// end ; end ;
41326: GO 41277
41328: POP
41329: POP
// end ;
41330: LD_VAR 0 3
41334: RET
// export function GetCargoBay ( units ) ; begin
41335: LD_INT 0
41337: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41338: LD_ADDR_VAR 0 2
41342: PUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: LD_INT 2
41350: PUSH
41351: LD_INT 34
41353: PUSH
41354: LD_INT 12
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 34
41363: PUSH
41364: LD_INT 51
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 34
41373: PUSH
41374: LD_INT 32
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 34
41383: PUSH
41384: LD_INT 89
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: PPUSH
41398: CALL_OW 72
41402: ST_TO_ADDR
// end ;
41403: LD_VAR 0 2
41407: RET
// export function Negate ( value ) ; begin
41408: LD_INT 0
41410: PPUSH
// result := not value ;
41411: LD_ADDR_VAR 0 2
41415: PUSH
41416: LD_VAR 0 1
41420: NOT
41421: ST_TO_ADDR
// end ;
41422: LD_VAR 0 2
41426: RET
// export function Inc ( value ) ; begin
41427: LD_INT 0
41429: PPUSH
// result := value + 1 ;
41430: LD_ADDR_VAR 0 2
41434: PUSH
41435: LD_VAR 0 1
41439: PUSH
41440: LD_INT 1
41442: PLUS
41443: ST_TO_ADDR
// end ;
41444: LD_VAR 0 2
41448: RET
// export function Dec ( value ) ; begin
41449: LD_INT 0
41451: PPUSH
// result := value - 1 ;
41452: LD_ADDR_VAR 0 2
41456: PUSH
41457: LD_VAR 0 1
41461: PUSH
41462: LD_INT 1
41464: MINUS
41465: ST_TO_ADDR
// end ;
41466: LD_VAR 0 2
41470: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41471: LD_INT 0
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41481: LD_VAR 0 1
41485: PPUSH
41486: LD_VAR 0 2
41490: PPUSH
41491: CALL_OW 488
41495: NOT
41496: IFTRUE 41515
41498: PUSH
41499: LD_VAR 0 3
41503: PPUSH
41504: LD_VAR 0 4
41508: PPUSH
41509: CALL_OW 488
41513: NOT
41514: OR
41515: IFFALSE 41528
// begin result := - 1 ;
41517: LD_ADDR_VAR 0 5
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: ST_TO_ADDR
// exit ;
41526: GO 41763
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41528: LD_ADDR_VAR 0 12
41532: PUSH
41533: LD_VAR 0 1
41537: PPUSH
41538: LD_VAR 0 2
41542: PPUSH
41543: LD_VAR 0 3
41547: PPUSH
41548: LD_VAR 0 4
41552: PPUSH
41553: CALL 40599 0 4
41557: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41558: LD_ADDR_VAR 0 11
41562: PUSH
41563: LD_VAR 0 1
41567: PPUSH
41568: LD_VAR 0 2
41572: PPUSH
41573: LD_VAR 0 12
41577: PUSH
41578: LD_INT 1
41580: ARRAY
41581: PPUSH
41582: LD_VAR 0 12
41586: PUSH
41587: LD_INT 2
41589: ARRAY
41590: PPUSH
41591: CALL_OW 298
41595: ST_TO_ADDR
// distance := 9999 ;
41596: LD_ADDR_VAR 0 10
41600: PUSH
41601: LD_INT 9999
41603: ST_TO_ADDR
// for i := 0 to 5 do
41604: LD_ADDR_VAR 0 6
41608: PUSH
41609: DOUBLE
41610: LD_INT 0
41612: DEC
41613: ST_TO_ADDR
41614: LD_INT 5
41616: PUSH
41617: FOR_TO
41618: IFFALSE 41761
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41620: LD_ADDR_VAR 0 7
41624: PUSH
41625: LD_VAR 0 1
41629: PPUSH
41630: LD_VAR 0 6
41634: PPUSH
41635: LD_VAR 0 11
41639: PPUSH
41640: CALL_OW 272
41644: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41645: LD_ADDR_VAR 0 8
41649: PUSH
41650: LD_VAR 0 2
41654: PPUSH
41655: LD_VAR 0 6
41659: PPUSH
41660: LD_VAR 0 11
41664: PPUSH
41665: CALL_OW 273
41669: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41670: LD_VAR 0 7
41674: PPUSH
41675: LD_VAR 0 8
41679: PPUSH
41680: CALL_OW 488
41684: NOT
41685: IFFALSE 41689
// continue ;
41687: GO 41617
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41689: LD_ADDR_VAR 0 9
41693: PUSH
41694: LD_VAR 0 12
41698: PUSH
41699: LD_INT 1
41701: ARRAY
41702: PPUSH
41703: LD_VAR 0 12
41707: PUSH
41708: LD_INT 2
41710: ARRAY
41711: PPUSH
41712: LD_VAR 0 7
41716: PPUSH
41717: LD_VAR 0 8
41721: PPUSH
41722: CALL_OW 298
41726: ST_TO_ADDR
// if tmp < distance then
41727: LD_VAR 0 9
41731: PUSH
41732: LD_VAR 0 10
41736: LESS
41737: IFFALSE 41759
// begin result := i ;
41739: LD_ADDR_VAR 0 5
41743: PUSH
41744: LD_VAR 0 6
41748: ST_TO_ADDR
// distance := tmp ;
41749: LD_ADDR_VAR 0 10
41753: PUSH
41754: LD_VAR 0 9
41758: ST_TO_ADDR
// end ; end ;
41759: GO 41617
41761: POP
41762: POP
// end ;
41763: LD_VAR 0 5
41767: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41768: LD_INT 0
41770: PPUSH
41771: PPUSH
// if not driver or not IsInUnit ( driver ) then
41772: LD_VAR 0 1
41776: NOT
41777: IFTRUE 41791
41779: PUSH
41780: LD_VAR 0 1
41784: PPUSH
41785: CALL_OW 310
41789: NOT
41790: OR
41791: IFFALSE 41795
// exit ;
41793: GO 41885
// vehicle := IsInUnit ( driver ) ;
41795: LD_ADDR_VAR 0 3
41799: PUSH
41800: LD_VAR 0 1
41804: PPUSH
41805: CALL_OW 310
41809: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41810: LD_VAR 0 1
41814: PPUSH
41815: LD_STRING \
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: PUSH
41845: LD_STRING E
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: LD_VAR 0 3
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PPUSH
41881: CALL_OW 446
// end ;
41885: LD_VAR 0 2
41889: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41890: LD_INT 0
41892: PPUSH
41893: PPUSH
// if not driver or not IsInUnit ( driver ) then
41894: LD_VAR 0 1
41898: NOT
41899: IFTRUE 41913
41901: PUSH
41902: LD_VAR 0 1
41906: PPUSH
41907: CALL_OW 310
41911: NOT
41912: OR
41913: IFFALSE 41917
// exit ;
41915: GO 42007
// vehicle := IsInUnit ( driver ) ;
41917: LD_ADDR_VAR 0 3
41921: PUSH
41922: LD_VAR 0 1
41926: PPUSH
41927: CALL_OW 310
41931: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41932: LD_VAR 0 1
41936: PPUSH
41937: LD_STRING \
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: PUSH
41967: LD_STRING E
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_VAR 0 3
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PPUSH
42003: CALL_OW 447
// end ;
42007: LD_VAR 0 2
42011: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42012: LD_INT 0
42014: PPUSH
42015: PPUSH
42016: PPUSH
// tmp := [ ] ;
42017: LD_ADDR_VAR 0 5
42021: PUSH
42022: EMPTY
42023: ST_TO_ADDR
// for i in units do
42024: LD_ADDR_VAR 0 4
42028: PUSH
42029: LD_VAR 0 1
42033: PUSH
42034: FOR_IN
42035: IFFALSE 42073
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42037: LD_ADDR_VAR 0 5
42041: PUSH
42042: LD_VAR 0 5
42046: PPUSH
42047: LD_VAR 0 5
42051: PUSH
42052: LD_INT 1
42054: PLUS
42055: PPUSH
42056: LD_VAR 0 4
42060: PPUSH
42061: CALL_OW 256
42065: PPUSH
42066: CALL_OW 2
42070: ST_TO_ADDR
42071: GO 42034
42073: POP
42074: POP
// if not tmp then
42075: LD_VAR 0 5
42079: NOT
42080: IFFALSE 42084
// exit ;
42082: GO 42132
// if asc then
42084: LD_VAR 0 2
42088: IFFALSE 42112
// result := SortListByListAsc ( units , tmp ) else
42090: LD_ADDR_VAR 0 3
42094: PUSH
42095: LD_VAR 0 1
42099: PPUSH
42100: LD_VAR 0 5
42104: PPUSH
42105: CALL_OW 76
42109: ST_TO_ADDR
42110: GO 42132
// result := SortListByListDesc ( units , tmp ) ;
42112: LD_ADDR_VAR 0 3
42116: PUSH
42117: LD_VAR 0 1
42121: PPUSH
42122: LD_VAR 0 5
42126: PPUSH
42127: CALL_OW 77
42131: ST_TO_ADDR
// end ;
42132: LD_VAR 0 3
42136: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42137: LD_INT 0
42139: PPUSH
42140: PPUSH
// task := GetTaskList ( mech ) ;
42141: LD_ADDR_VAR 0 4
42145: PUSH
42146: LD_VAR 0 1
42150: PPUSH
42151: CALL_OW 437
42155: ST_TO_ADDR
// if not task then
42156: LD_VAR 0 4
42160: NOT
42161: IFFALSE 42165
// exit ;
42163: GO 42209
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42165: LD_ADDR_VAR 0 3
42169: PUSH
42170: LD_VAR 0 4
42174: PUSH
42175: LD_INT 1
42177: ARRAY
42178: PUSH
42179: LD_INT 1
42181: ARRAY
42182: PUSH
42183: LD_STRING r
42185: EQUAL
42186: IFFALSE 42208
42188: PUSH
42189: LD_VAR 0 4
42193: PUSH
42194: LD_INT 1
42196: ARRAY
42197: PUSH
42198: LD_INT 4
42200: ARRAY
42201: PUSH
42202: LD_VAR 0 2
42206: EQUAL
42207: AND
42208: ST_TO_ADDR
// end ;
42209: LD_VAR 0 3
42213: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42214: LD_INT 0
42216: PPUSH
// SetDir ( unit , d ) ;
42217: LD_VAR 0 1
42221: PPUSH
42222: LD_VAR 0 4
42226: PPUSH
42227: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
42231: LD_ADDR_VAR 0 6
42235: PUSH
42236: LD_VAR 0 1
42240: PPUSH
42241: LD_VAR 0 2
42245: PPUSH
42246: LD_VAR 0 3
42250: PPUSH
42251: LD_VAR 0 5
42255: PPUSH
42256: CALL_OW 48
42260: ST_TO_ADDR
// end ;
42261: LD_VAR 0 6
42265: RET
// export function ToNaturalNumber ( number ) ; begin
42266: LD_INT 0
42268: PPUSH
// result := number div 1 ;
42269: LD_ADDR_VAR 0 2
42273: PUSH
42274: LD_VAR 0 1
42278: PUSH
42279: LD_INT 1
42281: DIV
42282: ST_TO_ADDR
// if number < 0 then
42283: LD_VAR 0 1
42287: PUSH
42288: LD_INT 0
42290: LESS
42291: IFFALSE 42301
// result := 0 ;
42293: LD_ADDR_VAR 0 2
42297: PUSH
42298: LD_INT 0
42300: ST_TO_ADDR
// end ;
42301: LD_VAR 0 2
42305: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
42306: LD_INT 0
42308: PPUSH
42309: PPUSH
42310: PPUSH
// if not buildings then
42311: LD_VAR 0 1
42315: NOT
42316: IFFALSE 42320
// exit ;
42318: GO 42435
// tmp := [ ] ;
42320: LD_ADDR_VAR 0 5
42324: PUSH
42325: EMPTY
42326: ST_TO_ADDR
// for b in buildings do
42327: LD_ADDR_VAR 0 4
42331: PUSH
42332: LD_VAR 0 1
42336: PUSH
42337: FOR_IN
42338: IFFALSE 42376
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
42340: LD_ADDR_VAR 0 5
42344: PUSH
42345: LD_VAR 0 5
42349: PPUSH
42350: LD_VAR 0 5
42354: PUSH
42355: LD_INT 1
42357: PLUS
42358: PPUSH
42359: LD_VAR 0 4
42363: PPUSH
42364: CALL_OW 266
42368: PPUSH
42369: CALL_OW 1
42373: ST_TO_ADDR
42374: GO 42337
42376: POP
42377: POP
// if not tmp then
42378: LD_VAR 0 5
42382: NOT
42383: IFFALSE 42387
// exit ;
42385: GO 42435
// if asc then
42387: LD_VAR 0 2
42391: IFFALSE 42415
// result := SortListByListAsc ( buildings , tmp ) else
42393: LD_ADDR_VAR 0 3
42397: PUSH
42398: LD_VAR 0 1
42402: PPUSH
42403: LD_VAR 0 5
42407: PPUSH
42408: CALL_OW 76
42412: ST_TO_ADDR
42413: GO 42435
// result := SortListByListDesc ( buildings , tmp ) ;
42415: LD_ADDR_VAR 0 3
42419: PUSH
42420: LD_VAR 0 1
42424: PPUSH
42425: LD_VAR 0 5
42429: PPUSH
42430: CALL_OW 77
42434: ST_TO_ADDR
// end ;
42435: LD_VAR 0 3
42439: RET
// export function SortByClass ( units , class ) ; var un ; begin
42440: LD_INT 0
42442: PPUSH
42443: PPUSH
// if not units or not class then
42444: LD_VAR 0 1
42448: NOT
42449: IFTRUE 42458
42451: PUSH
42452: LD_VAR 0 2
42456: NOT
42457: OR
42458: IFFALSE 42462
// exit ;
42460: GO 42557
// result := [ ] ;
42462: LD_ADDR_VAR 0 3
42466: PUSH
42467: EMPTY
42468: ST_TO_ADDR
// for un in units do
42469: LD_ADDR_VAR 0 4
42473: PUSH
42474: LD_VAR 0 1
42478: PUSH
42479: FOR_IN
42480: IFFALSE 42555
// if GetClass ( un ) = class then
42482: LD_VAR 0 4
42486: PPUSH
42487: CALL_OW 257
42491: PUSH
42492: LD_VAR 0 2
42496: EQUAL
42497: IFFALSE 42524
// result := Insert ( result , 1 , un ) else
42499: LD_ADDR_VAR 0 3
42503: PUSH
42504: LD_VAR 0 3
42508: PPUSH
42509: LD_INT 1
42511: PPUSH
42512: LD_VAR 0 4
42516: PPUSH
42517: CALL_OW 2
42521: ST_TO_ADDR
42522: GO 42553
// result := Replace ( result , result + 1 , un ) ;
42524: LD_ADDR_VAR 0 3
42528: PUSH
42529: LD_VAR 0 3
42533: PPUSH
42534: LD_VAR 0 3
42538: PUSH
42539: LD_INT 1
42541: PLUS
42542: PPUSH
42543: LD_VAR 0 4
42547: PPUSH
42548: CALL_OW 1
42552: ST_TO_ADDR
42553: GO 42479
42555: POP
42556: POP
// end ;
42557: LD_VAR 0 3
42561: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42562: LD_INT 0
42564: PPUSH
42565: PPUSH
42566: PPUSH
42567: PPUSH
42568: PPUSH
42569: PPUSH
42570: PPUSH
// result := [ ] ;
42571: LD_ADDR_VAR 0 4
42575: PUSH
42576: EMPTY
42577: ST_TO_ADDR
// if x - r < 0 then
42578: LD_VAR 0 1
42582: PUSH
42583: LD_VAR 0 3
42587: MINUS
42588: PUSH
42589: LD_INT 0
42591: LESS
42592: IFFALSE 42604
// min_x := 0 else
42594: LD_ADDR_VAR 0 8
42598: PUSH
42599: LD_INT 0
42601: ST_TO_ADDR
42602: GO 42620
// min_x := x - r ;
42604: LD_ADDR_VAR 0 8
42608: PUSH
42609: LD_VAR 0 1
42613: PUSH
42614: LD_VAR 0 3
42618: MINUS
42619: ST_TO_ADDR
// if y - r < 0 then
42620: LD_VAR 0 2
42624: PUSH
42625: LD_VAR 0 3
42629: MINUS
42630: PUSH
42631: LD_INT 0
42633: LESS
42634: IFFALSE 42646
// min_y := 0 else
42636: LD_ADDR_VAR 0 7
42640: PUSH
42641: LD_INT 0
42643: ST_TO_ADDR
42644: GO 42662
// min_y := y - r ;
42646: LD_ADDR_VAR 0 7
42650: PUSH
42651: LD_VAR 0 2
42655: PUSH
42656: LD_VAR 0 3
42660: MINUS
42661: ST_TO_ADDR
// max_x := x + r ;
42662: LD_ADDR_VAR 0 9
42666: PUSH
42667: LD_VAR 0 1
42671: PUSH
42672: LD_VAR 0 3
42676: PLUS
42677: ST_TO_ADDR
// max_y := y + r ;
42678: LD_ADDR_VAR 0 10
42682: PUSH
42683: LD_VAR 0 2
42687: PUSH
42688: LD_VAR 0 3
42692: PLUS
42693: ST_TO_ADDR
// for _x = min_x to max_x do
42694: LD_ADDR_VAR 0 5
42698: PUSH
42699: DOUBLE
42700: LD_VAR 0 8
42704: DEC
42705: ST_TO_ADDR
42706: LD_VAR 0 9
42710: PUSH
42711: FOR_TO
42712: IFFALSE 42813
// for _y = min_y to max_y do
42714: LD_ADDR_VAR 0 6
42718: PUSH
42719: DOUBLE
42720: LD_VAR 0 7
42724: DEC
42725: ST_TO_ADDR
42726: LD_VAR 0 10
42730: PUSH
42731: FOR_TO
42732: IFFALSE 42809
// begin if not ValidHex ( _x , _y ) then
42734: LD_VAR 0 5
42738: PPUSH
42739: LD_VAR 0 6
42743: PPUSH
42744: CALL_OW 488
42748: NOT
42749: IFFALSE 42753
// continue ;
42751: GO 42731
// if GetResourceTypeXY ( _x , _y ) then
42753: LD_VAR 0 5
42757: PPUSH
42758: LD_VAR 0 6
42762: PPUSH
42763: CALL_OW 283
42767: IFFALSE 42807
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42769: LD_ADDR_VAR 0 4
42773: PUSH
42774: LD_VAR 0 4
42778: PPUSH
42779: LD_VAR 0 4
42783: PUSH
42784: LD_INT 1
42786: PLUS
42787: PPUSH
42788: LD_VAR 0 5
42792: PUSH
42793: LD_VAR 0 6
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PPUSH
42802: CALL_OW 1
42806: ST_TO_ADDR
// end ;
42807: GO 42731
42809: POP
42810: POP
42811: GO 42711
42813: POP
42814: POP
// end ;
42815: LD_VAR 0 4
42819: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42820: LD_INT 0
42822: PPUSH
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
// if not units then
42830: LD_VAR 0 1
42834: NOT
42835: IFFALSE 42839
// exit ;
42837: GO 43371
// result := UnitFilter ( units , [ f_ok ] ) ;
42839: LD_ADDR_VAR 0 3
42843: PUSH
42844: LD_VAR 0 1
42848: PPUSH
42849: LD_INT 50
42851: PUSH
42852: EMPTY
42853: LIST
42854: PPUSH
42855: CALL_OW 72
42859: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42860: LD_ADDR_VAR 0 8
42864: PUSH
42865: LD_VAR 0 1
42869: PUSH
42870: LD_INT 1
42872: ARRAY
42873: PPUSH
42874: CALL_OW 255
42878: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42879: LD_ADDR_VAR 0 10
42883: PUSH
42884: LD_INT 29
42886: PUSH
42887: LD_INT 91
42889: PUSH
42890: LD_INT 49
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: LIST
42897: ST_TO_ADDR
// if not result then
42898: LD_VAR 0 3
42902: NOT
42903: IFFALSE 42907
// exit ;
42905: GO 43371
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42907: LD_ADDR_VAR 0 5
42911: PUSH
42912: LD_INT 81
42914: PUSH
42915: LD_VAR 0 8
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PPUSH
42924: CALL_OW 69
42928: ST_TO_ADDR
// for i in result do
42929: LD_ADDR_VAR 0 4
42933: PUSH
42934: LD_VAR 0 3
42938: PUSH
42939: FOR_IN
42940: IFFALSE 43369
// begin tag := GetTag ( i ) + 1 ;
42942: LD_ADDR_VAR 0 9
42946: PUSH
42947: LD_VAR 0 4
42951: PPUSH
42952: CALL_OW 110
42956: PUSH
42957: LD_INT 1
42959: PLUS
42960: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42961: LD_ADDR_VAR 0 7
42965: PUSH
42966: LD_VAR 0 4
42970: PPUSH
42971: CALL_OW 250
42975: PPUSH
42976: LD_VAR 0 4
42980: PPUSH
42981: CALL_OW 251
42985: PPUSH
42986: LD_INT 4
42988: PPUSH
42989: CALL 42562 0 3
42993: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42994: LD_VAR 0 4
42998: PPUSH
42999: CALL_OW 247
43003: PUSH
43004: LD_INT 2
43006: EQUAL
43007: IFFALSE 43019
43009: PUSH
43010: LD_VAR 0 7
43014: PUSH
43015: LD_INT 2
43017: GREATER
43018: AND
43019: IFFALSE 43039
43021: PUSH
43022: LD_VAR 0 4
43026: PPUSH
43027: CALL_OW 264
43031: PUSH
43032: LD_VAR 0 10
43036: IN
43037: NOT
43038: AND
43039: IFFALSE 43078
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43041: LD_VAR 0 4
43045: PPUSH
43046: LD_VAR 0 7
43050: PUSH
43051: LD_INT 1
43053: ARRAY
43054: PUSH
43055: LD_INT 1
43057: ARRAY
43058: PPUSH
43059: LD_VAR 0 7
43063: PUSH
43064: LD_INT 1
43066: ARRAY
43067: PUSH
43068: LD_INT 2
43070: ARRAY
43071: PPUSH
43072: CALL_OW 116
43076: GO 43367
// if path > tag then
43078: LD_VAR 0 2
43082: PUSH
43083: LD_VAR 0 9
43087: GREATER
43088: IFFALSE 43296
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43090: LD_ADDR_VAR 0 6
43094: PUSH
43095: LD_VAR 0 5
43099: PPUSH
43100: LD_INT 91
43102: PUSH
43103: LD_VAR 0 4
43107: PUSH
43108: LD_INT 8
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: PPUSH
43116: CALL_OW 72
43120: ST_TO_ADDR
// if nearEnemy then
43121: LD_VAR 0 6
43125: IFFALSE 43194
// begin if GetWeapon ( i ) = ru_time_lapser then
43127: LD_VAR 0 4
43131: PPUSH
43132: CALL_OW 264
43136: PUSH
43137: LD_INT 49
43139: EQUAL
43140: IFFALSE 43168
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43142: LD_VAR 0 4
43146: PPUSH
43147: LD_VAR 0 6
43151: PPUSH
43152: LD_VAR 0 4
43156: PPUSH
43157: CALL_OW 74
43161: PPUSH
43162: CALL_OW 112
43166: GO 43192
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43168: LD_VAR 0 4
43172: PPUSH
43173: LD_VAR 0 6
43177: PPUSH
43178: LD_VAR 0 4
43182: PPUSH
43183: CALL_OW 74
43187: PPUSH
43188: CALL 44452 0 2
// end else
43192: GO 43294
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43194: LD_VAR 0 4
43198: PPUSH
43199: LD_VAR 0 2
43203: PUSH
43204: LD_VAR 0 9
43208: ARRAY
43209: PUSH
43210: LD_INT 1
43212: ARRAY
43213: PPUSH
43214: LD_VAR 0 2
43218: PUSH
43219: LD_VAR 0 9
43223: ARRAY
43224: PUSH
43225: LD_INT 2
43227: ARRAY
43228: PPUSH
43229: CALL_OW 297
43233: PUSH
43234: LD_INT 6
43236: GREATER
43237: IFFALSE 43280
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43239: LD_VAR 0 4
43243: PPUSH
43244: LD_VAR 0 2
43248: PUSH
43249: LD_VAR 0 9
43253: ARRAY
43254: PUSH
43255: LD_INT 1
43257: ARRAY
43258: PPUSH
43259: LD_VAR 0 2
43263: PUSH
43264: LD_VAR 0 9
43268: ARRAY
43269: PUSH
43270: LD_INT 2
43272: ARRAY
43273: PPUSH
43274: CALL_OW 114
43278: GO 43294
// SetTag ( i , tag ) ;
43280: LD_VAR 0 4
43284: PPUSH
43285: LD_VAR 0 9
43289: PPUSH
43290: CALL_OW 109
// end else
43294: GO 43367
// if enemy then
43296: LD_VAR 0 5
43300: IFFALSE 43367
// begin if GetWeapon ( i ) = ru_time_lapser then
43302: LD_VAR 0 4
43306: PPUSH
43307: CALL_OW 264
43311: PUSH
43312: LD_INT 49
43314: EQUAL
43315: IFFALSE 43343
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43317: LD_VAR 0 4
43321: PPUSH
43322: LD_VAR 0 5
43326: PPUSH
43327: LD_VAR 0 4
43331: PPUSH
43332: CALL_OW 74
43336: PPUSH
43337: CALL_OW 112
43341: GO 43367
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43343: LD_VAR 0 4
43347: PPUSH
43348: LD_VAR 0 5
43352: PPUSH
43353: LD_VAR 0 4
43357: PPUSH
43358: CALL_OW 74
43362: PPUSH
43363: CALL 44452 0 2
// end ; end ;
43367: GO 42939
43369: POP
43370: POP
// end ;
43371: LD_VAR 0 3
43375: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43376: LD_INT 0
43378: PPUSH
43379: PPUSH
43380: PPUSH
// if not unit or IsInUnit ( unit ) then
43381: LD_VAR 0 1
43385: NOT
43386: IFTRUE 43399
43388: PUSH
43389: LD_VAR 0 1
43393: PPUSH
43394: CALL_OW 310
43398: OR
43399: IFFALSE 43403
// exit ;
43401: GO 43494
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43403: LD_ADDR_VAR 0 4
43407: PUSH
43408: LD_VAR 0 1
43412: PPUSH
43413: CALL_OW 250
43417: PPUSH
43418: LD_VAR 0 2
43422: PPUSH
43423: LD_INT 1
43425: PPUSH
43426: CALL_OW 272
43430: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43431: LD_ADDR_VAR 0 5
43435: PUSH
43436: LD_VAR 0 1
43440: PPUSH
43441: CALL_OW 251
43445: PPUSH
43446: LD_VAR 0 2
43450: PPUSH
43451: LD_INT 1
43453: PPUSH
43454: CALL_OW 273
43458: ST_TO_ADDR
// if ValidHex ( x , y ) then
43459: LD_VAR 0 4
43463: PPUSH
43464: LD_VAR 0 5
43468: PPUSH
43469: CALL_OW 488
43473: IFFALSE 43494
// ComTurnXY ( unit , x , y ) ;
43475: LD_VAR 0 1
43479: PPUSH
43480: LD_VAR 0 4
43484: PPUSH
43485: LD_VAR 0 5
43489: PPUSH
43490: CALL_OW 118
// end ;
43494: LD_VAR 0 3
43498: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43499: LD_INT 0
43501: PPUSH
43502: PPUSH
// result := false ;
43503: LD_ADDR_VAR 0 3
43507: PUSH
43508: LD_INT 0
43510: ST_TO_ADDR
// if not units then
43511: LD_VAR 0 2
43515: NOT
43516: IFFALSE 43520
// exit ;
43518: GO 43565
// for i in units do
43520: LD_ADDR_VAR 0 4
43524: PUSH
43525: LD_VAR 0 2
43529: PUSH
43530: FOR_IN
43531: IFFALSE 43563
// if See ( side , i ) then
43533: LD_VAR 0 1
43537: PPUSH
43538: LD_VAR 0 4
43542: PPUSH
43543: CALL_OW 292
43547: IFFALSE 43561
// begin result := true ;
43549: LD_ADDR_VAR 0 3
43553: PUSH
43554: LD_INT 1
43556: ST_TO_ADDR
// exit ;
43557: POP
43558: POP
43559: GO 43565
// end ;
43561: GO 43530
43563: POP
43564: POP
// end ;
43565: LD_VAR 0 3
43569: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43570: LD_INT 0
43572: PPUSH
43573: PPUSH
43574: PPUSH
43575: PPUSH
// if not unit or not points then
43576: LD_VAR 0 1
43580: NOT
43581: IFTRUE 43590
43583: PUSH
43584: LD_VAR 0 2
43588: NOT
43589: OR
43590: IFFALSE 43594
// exit ;
43592: GO 43684
// dist := 99999 ;
43594: LD_ADDR_VAR 0 5
43598: PUSH
43599: LD_INT 99999
43601: ST_TO_ADDR
// for i in points do
43602: LD_ADDR_VAR 0 4
43606: PUSH
43607: LD_VAR 0 2
43611: PUSH
43612: FOR_IN
43613: IFFALSE 43682
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43615: LD_ADDR_VAR 0 6
43619: PUSH
43620: LD_VAR 0 1
43624: PPUSH
43625: LD_VAR 0 4
43629: PUSH
43630: LD_INT 1
43632: ARRAY
43633: PPUSH
43634: LD_VAR 0 4
43638: PUSH
43639: LD_INT 2
43641: ARRAY
43642: PPUSH
43643: CALL_OW 297
43647: ST_TO_ADDR
// if tmpDist < dist then
43648: LD_VAR 0 6
43652: PUSH
43653: LD_VAR 0 5
43657: LESS
43658: IFFALSE 43680
// begin result := i ;
43660: LD_ADDR_VAR 0 3
43664: PUSH
43665: LD_VAR 0 4
43669: ST_TO_ADDR
// dist := tmpDist ;
43670: LD_ADDR_VAR 0 5
43674: PUSH
43675: LD_VAR 0 6
43679: ST_TO_ADDR
// end ; end ;
43680: GO 43612
43682: POP
43683: POP
// end ;
43684: LD_VAR 0 3
43688: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43689: LD_INT 0
43691: PPUSH
// uc_side := side ;
43692: LD_ADDR_OWVAR 20
43696: PUSH
43697: LD_VAR 0 1
43701: ST_TO_ADDR
// uc_nation := 3 ;
43702: LD_ADDR_OWVAR 21
43706: PUSH
43707: LD_INT 3
43709: ST_TO_ADDR
// vc_chassis := 25 ;
43710: LD_ADDR_OWVAR 37
43714: PUSH
43715: LD_INT 25
43717: ST_TO_ADDR
// vc_engine := engine_siberite ;
43718: LD_ADDR_OWVAR 39
43722: PUSH
43723: LD_INT 3
43725: ST_TO_ADDR
// vc_control := control_computer ;
43726: LD_ADDR_OWVAR 38
43730: PUSH
43731: LD_INT 3
43733: ST_TO_ADDR
// vc_weapon := 59 ;
43734: LD_ADDR_OWVAR 40
43738: PUSH
43739: LD_INT 59
43741: ST_TO_ADDR
// result := CreateVehicle ;
43742: LD_ADDR_VAR 0 5
43746: PUSH
43747: CALL_OW 45
43751: ST_TO_ADDR
// SetDir ( result , d ) ;
43752: LD_VAR 0 5
43756: PPUSH
43757: LD_VAR 0 4
43761: PPUSH
43762: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43766: LD_VAR 0 5
43770: PPUSH
43771: LD_VAR 0 2
43775: PPUSH
43776: LD_VAR 0 3
43780: PPUSH
43781: LD_INT 0
43783: PPUSH
43784: CALL_OW 48
// end ;
43788: LD_VAR 0 5
43792: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43793: LD_INT 0
43795: PPUSH
43796: PPUSH
43797: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43798: LD_ADDR_VAR 0 2
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43821: LD_VAR 0 1
43825: NOT
43826: IFTRUE 43859
43828: PUSH
43829: LD_VAR 0 1
43833: PPUSH
43834: CALL_OW 264
43838: PUSH
43839: LD_INT 12
43841: PUSH
43842: LD_INT 51
43844: PUSH
43845: LD_INT 32
43847: PUSH
43848: LD_INT 89
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: IN
43857: NOT
43858: OR
43859: IFFALSE 43863
// exit ;
43861: GO 43961
// for i := 1 to 3 do
43863: LD_ADDR_VAR 0 3
43867: PUSH
43868: DOUBLE
43869: LD_INT 1
43871: DEC
43872: ST_TO_ADDR
43873: LD_INT 3
43875: PUSH
43876: FOR_TO
43877: IFFALSE 43959
// begin tmp := GetCargo ( cargo , i ) ;
43879: LD_ADDR_VAR 0 4
43883: PUSH
43884: LD_VAR 0 1
43888: PPUSH
43889: LD_VAR 0 3
43893: PPUSH
43894: CALL_OW 289
43898: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43899: LD_ADDR_VAR 0 2
43903: PUSH
43904: LD_VAR 0 2
43908: PPUSH
43909: LD_VAR 0 3
43913: PPUSH
43914: LD_VAR 0 4
43918: PPUSH
43919: CALL_OW 1
43923: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43924: LD_ADDR_VAR 0 2
43928: PUSH
43929: LD_VAR 0 2
43933: PPUSH
43934: LD_INT 4
43936: PPUSH
43937: LD_VAR 0 2
43941: PUSH
43942: LD_INT 4
43944: ARRAY
43945: PUSH
43946: LD_VAR 0 4
43950: PLUS
43951: PPUSH
43952: CALL_OW 1
43956: ST_TO_ADDR
// end ;
43957: GO 43876
43959: POP
43960: POP
// end ;
43961: LD_VAR 0 2
43965: RET
// export function Length ( array ) ; begin
43966: LD_INT 0
43968: PPUSH
// result := array + 0 ;
43969: LD_ADDR_VAR 0 2
43973: PUSH
43974: LD_VAR 0 1
43978: PUSH
43979: LD_INT 0
43981: PLUS
43982: ST_TO_ADDR
// end ;
43983: LD_VAR 0 2
43987: RET
// export function PrepareArray ( array ) ; begin
43988: LD_INT 0
43990: PPUSH
// result := array diff 0 ;
43991: LD_ADDR_VAR 0 2
43995: PUSH
43996: LD_VAR 0 1
44000: PUSH
44001: LD_INT 0
44003: DIFF
44004: ST_TO_ADDR
// if not result [ 1 ] then
44005: LD_VAR 0 2
44009: PUSH
44010: LD_INT 1
44012: ARRAY
44013: NOT
44014: IFFALSE 44034
// result := Delete ( result , 1 ) ;
44016: LD_ADDR_VAR 0 2
44020: PUSH
44021: LD_VAR 0 2
44025: PPUSH
44026: LD_INT 1
44028: PPUSH
44029: CALL_OW 3
44033: ST_TO_ADDR
// end ;
44034: LD_VAR 0 2
44038: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44039: LD_INT 0
44041: PPUSH
44042: PPUSH
44043: PPUSH
44044: PPUSH
// sibRocketRange := 25 ;
44045: LD_ADDR_VAR 0 6
44049: PUSH
44050: LD_INT 25
44052: ST_TO_ADDR
// result := false ;
44053: LD_ADDR_VAR 0 4
44057: PUSH
44058: LD_INT 0
44060: ST_TO_ADDR
// for i := 0 to 5 do
44061: LD_ADDR_VAR 0 5
44065: PUSH
44066: DOUBLE
44067: LD_INT 0
44069: DEC
44070: ST_TO_ADDR
44071: LD_INT 5
44073: PUSH
44074: FOR_TO
44075: IFFALSE 44142
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44077: LD_VAR 0 1
44081: PPUSH
44082: LD_VAR 0 5
44086: PPUSH
44087: LD_VAR 0 6
44091: PPUSH
44092: CALL_OW 272
44096: PPUSH
44097: LD_VAR 0 2
44101: PPUSH
44102: LD_VAR 0 5
44106: PPUSH
44107: LD_VAR 0 6
44111: PPUSH
44112: CALL_OW 273
44116: PPUSH
44117: LD_VAR 0 3
44121: PPUSH
44122: CALL_OW 309
44126: IFFALSE 44140
// begin result := true ;
44128: LD_ADDR_VAR 0 4
44132: PUSH
44133: LD_INT 1
44135: ST_TO_ADDR
// exit ;
44136: POP
44137: POP
44138: GO 44144
// end ;
44140: GO 44074
44142: POP
44143: POP
// end ;
44144: LD_VAR 0 4
44148: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44149: LD_INT 0
44151: PPUSH
44152: PPUSH
44153: PPUSH
// if btype = b_depot then
44154: LD_VAR 0 2
44158: PUSH
44159: LD_INT 0
44161: EQUAL
44162: IFFALSE 44174
// begin result := true ;
44164: LD_ADDR_VAR 0 3
44168: PUSH
44169: LD_INT 1
44171: ST_TO_ADDR
// exit ;
44172: GO 44294
// end ; pom := GetBase ( depot ) ;
44174: LD_ADDR_VAR 0 4
44178: PUSH
44179: LD_VAR 0 1
44183: PPUSH
44184: CALL_OW 274
44188: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44189: LD_ADDR_VAR 0 5
44193: PUSH
44194: LD_VAR 0 2
44198: PPUSH
44199: LD_VAR 0 1
44203: PPUSH
44204: CALL_OW 248
44208: PPUSH
44209: CALL_OW 450
44213: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44214: LD_ADDR_VAR 0 3
44218: PUSH
44219: LD_VAR 0 4
44223: PPUSH
44224: LD_INT 1
44226: PPUSH
44227: CALL_OW 275
44231: PUSH
44232: LD_VAR 0 5
44236: PUSH
44237: LD_INT 1
44239: ARRAY
44240: GREATEREQUAL
44241: IFFALSE 44267
44243: PUSH
44244: LD_VAR 0 4
44248: PPUSH
44249: LD_INT 2
44251: PPUSH
44252: CALL_OW 275
44256: PUSH
44257: LD_VAR 0 5
44261: PUSH
44262: LD_INT 2
44264: ARRAY
44265: GREATEREQUAL
44266: AND
44267: IFFALSE 44293
44269: PUSH
44270: LD_VAR 0 4
44274: PPUSH
44275: LD_INT 3
44277: PPUSH
44278: CALL_OW 275
44282: PUSH
44283: LD_VAR 0 5
44287: PUSH
44288: LD_INT 3
44290: ARRAY
44291: GREATEREQUAL
44292: AND
44293: ST_TO_ADDR
// end ;
44294: LD_VAR 0 3
44298: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44299: LD_INT 0
44301: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44302: LD_VAR 0 1
44306: PPUSH
44307: LD_VAR 0 2
44311: PPUSH
44312: LD_INT 0
44314: PPUSH
44315: LD_INT 0
44317: PPUSH
44318: LD_INT 1
44320: PPUSH
44321: LD_INT 0
44323: PPUSH
44324: CALL_OW 587
// end ;
44328: LD_VAR 0 3
44332: RET
// export function CenterOnNow ( unit ) ; begin
44333: LD_INT 0
44335: PPUSH
// result := IsInUnit ( unit ) ;
44336: LD_ADDR_VAR 0 2
44340: PUSH
44341: LD_VAR 0 1
44345: PPUSH
44346: CALL_OW 310
44350: ST_TO_ADDR
// if not result then
44351: LD_VAR 0 2
44355: NOT
44356: IFFALSE 44368
// result := unit ;
44358: LD_ADDR_VAR 0 2
44362: PUSH
44363: LD_VAR 0 1
44367: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44368: LD_VAR 0 1
44372: PPUSH
44373: CALL_OW 87
// end ;
44377: LD_VAR 0 2
44381: RET
// export function ComMoveHex ( unit , hex ) ; begin
44382: LD_INT 0
44384: PPUSH
// if not hex then
44385: LD_VAR 0 2
44389: NOT
44390: IFFALSE 44394
// exit ;
44392: GO 44447
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44394: LD_VAR 0 2
44398: PUSH
44399: LD_INT 1
44401: ARRAY
44402: PPUSH
44403: LD_VAR 0 2
44407: PUSH
44408: LD_INT 2
44410: ARRAY
44411: PPUSH
44412: CALL_OW 428
44416: IFFALSE 44420
// exit ;
44418: GO 44447
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44420: LD_VAR 0 1
44424: PPUSH
44425: LD_VAR 0 2
44429: PUSH
44430: LD_INT 1
44432: ARRAY
44433: PPUSH
44434: LD_VAR 0 2
44438: PUSH
44439: LD_INT 2
44441: ARRAY
44442: PPUSH
44443: CALL_OW 111
// end ;
44447: LD_VAR 0 3
44451: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44452: LD_INT 0
44454: PPUSH
44455: PPUSH
44456: PPUSH
// if not unit or not enemy then
44457: LD_VAR 0 1
44461: NOT
44462: IFTRUE 44471
44464: PUSH
44465: LD_VAR 0 2
44469: NOT
44470: OR
44471: IFFALSE 44475
// exit ;
44473: GO 44601
// x := GetX ( enemy ) ;
44475: LD_ADDR_VAR 0 4
44479: PUSH
44480: LD_VAR 0 2
44484: PPUSH
44485: CALL_OW 250
44489: ST_TO_ADDR
// y := GetY ( enemy ) ;
44490: LD_ADDR_VAR 0 5
44494: PUSH
44495: LD_VAR 0 2
44499: PPUSH
44500: CALL_OW 251
44504: ST_TO_ADDR
// if ValidHex ( x , y ) then
44505: LD_VAR 0 4
44509: PPUSH
44510: LD_VAR 0 5
44514: PPUSH
44515: CALL_OW 488
44519: IFFALSE 44601
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44521: LD_VAR 0 2
44525: PPUSH
44526: CALL_OW 247
44530: PUSH
44531: LD_INT 3
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: IN
44541: IFTRUE 44564
44543: PUSH
44544: LD_VAR 0 1
44548: PPUSH
44549: CALL_OW 255
44553: PPUSH
44554: LD_VAR 0 2
44558: PPUSH
44559: CALL_OW 292
44563: OR
44564: IFFALSE 44582
// ComAttackUnit ( unit , enemy ) else
44566: LD_VAR 0 1
44570: PPUSH
44571: LD_VAR 0 2
44575: PPUSH
44576: CALL_OW 115
44580: GO 44601
// ComAgressiveMove ( unit , x , y ) ;
44582: LD_VAR 0 1
44586: PPUSH
44587: LD_VAR 0 4
44591: PPUSH
44592: LD_VAR 0 5
44596: PPUSH
44597: CALL_OW 114
// end ;
44601: LD_VAR 0 3
44605: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44606: LD_INT 0
44608: PPUSH
44609: PPUSH
44610: PPUSH
// list := AreaToList ( area , 0 ) ;
44611: LD_ADDR_VAR 0 5
44615: PUSH
44616: LD_VAR 0 1
44620: PPUSH
44621: LD_INT 0
44623: PPUSH
44624: CALL_OW 517
44628: ST_TO_ADDR
// if not list then
44629: LD_VAR 0 5
44633: NOT
44634: IFFALSE 44638
// exit ;
44636: GO 44768
// if all then
44638: LD_VAR 0 2
44642: IFFALSE 44730
// begin for i := 1 to list [ 1 ] do
44644: LD_ADDR_VAR 0 4
44648: PUSH
44649: DOUBLE
44650: LD_INT 1
44652: DEC
44653: ST_TO_ADDR
44654: LD_VAR 0 5
44658: PUSH
44659: LD_INT 1
44661: ARRAY
44662: PUSH
44663: FOR_TO
44664: IFFALSE 44726
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44666: LD_ADDR_VAR 0 3
44670: PUSH
44671: LD_VAR 0 3
44675: PPUSH
44676: LD_VAR 0 3
44680: PUSH
44681: LD_INT 1
44683: PLUS
44684: PPUSH
44685: LD_VAR 0 5
44689: PUSH
44690: LD_INT 1
44692: ARRAY
44693: PUSH
44694: LD_VAR 0 4
44698: ARRAY
44699: PUSH
44700: LD_VAR 0 5
44704: PUSH
44705: LD_INT 2
44707: ARRAY
44708: PUSH
44709: LD_VAR 0 4
44713: ARRAY
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PPUSH
44719: CALL_OW 1
44723: ST_TO_ADDR
44724: GO 44663
44726: POP
44727: POP
// exit ;
44728: GO 44768
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44730: LD_ADDR_VAR 0 3
44734: PUSH
44735: LD_VAR 0 5
44739: PUSH
44740: LD_INT 1
44742: ARRAY
44743: PUSH
44744: LD_INT 1
44746: ARRAY
44747: PUSH
44748: LD_VAR 0 5
44752: PUSH
44753: LD_INT 2
44755: ARRAY
44756: PUSH
44757: LD_INT 1
44759: ARRAY
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: EMPTY
44766: LIST
44767: ST_TO_ADDR
// end ;
44768: LD_VAR 0 3
44772: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44773: LD_INT 0
44775: PPUSH
44776: PPUSH
// list := AreaToList ( area , 0 ) ;
44777: LD_ADDR_VAR 0 4
44781: PUSH
44782: LD_VAR 0 1
44786: PPUSH
44787: LD_INT 0
44789: PPUSH
44790: CALL_OW 517
44794: ST_TO_ADDR
// if not list then
44795: LD_VAR 0 4
44799: NOT
44800: IFFALSE 44804
// exit ;
44802: GO 44845
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44804: LD_ADDR_VAR 0 3
44808: PUSH
44809: LD_VAR 0 4
44813: PUSH
44814: LD_INT 1
44816: ARRAY
44817: PUSH
44818: LD_INT 1
44820: ARRAY
44821: PUSH
44822: LD_VAR 0 4
44826: PUSH
44827: LD_INT 2
44829: ARRAY
44830: PUSH
44831: LD_INT 1
44833: ARRAY
44834: PUSH
44835: LD_VAR 0 2
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: LIST
44844: ST_TO_ADDR
// end ;
44845: LD_VAR 0 3
44849: RET
// export function First ( array ) ; begin
44850: LD_INT 0
44852: PPUSH
// if not array then
44853: LD_VAR 0 1
44857: NOT
44858: IFFALSE 44862
// exit ;
44860: GO 44876
// result := array [ 1 ] ;
44862: LD_ADDR_VAR 0 2
44866: PUSH
44867: LD_VAR 0 1
44871: PUSH
44872: LD_INT 1
44874: ARRAY
44875: ST_TO_ADDR
// end ;
44876: LD_VAR 0 2
44880: RET
// export function Last ( array ) ; begin
44881: LD_INT 0
44883: PPUSH
// if not array then
44884: LD_VAR 0 1
44888: NOT
44889: IFFALSE 44893
// exit ;
44891: GO 44909
// result := array [ array ] ;
44893: LD_ADDR_VAR 0 2
44897: PUSH
44898: LD_VAR 0 1
44902: PUSH
44903: LD_VAR 0 1
44907: ARRAY
44908: ST_TO_ADDR
// end ;
44909: LD_VAR 0 2
44913: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44914: LD_INT 0
44916: PPUSH
44917: PPUSH
// result := [ ] ;
44918: LD_ADDR_VAR 0 5
44922: PUSH
44923: EMPTY
44924: ST_TO_ADDR
// if not array then
44925: LD_VAR 0 1
44929: NOT
44930: IFFALSE 44934
// exit ;
44932: GO 45046
// for i := 1 to array do
44934: LD_ADDR_VAR 0 6
44938: PUSH
44939: DOUBLE
44940: LD_INT 1
44942: DEC
44943: ST_TO_ADDR
44944: LD_VAR 0 1
44948: PUSH
44949: FOR_TO
44950: IFFALSE 45044
// if array [ i ] [ index ] = value then
44952: LD_VAR 0 1
44956: PUSH
44957: LD_VAR 0 6
44961: ARRAY
44962: PUSH
44963: LD_VAR 0 2
44967: ARRAY
44968: PUSH
44969: LD_VAR 0 3
44973: EQUAL
44974: IFFALSE 45042
// begin if indexColumn then
44976: LD_VAR 0 4
44980: IFFALSE 45016
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44982: LD_ADDR_VAR 0 5
44986: PUSH
44987: LD_VAR 0 5
44991: PPUSH
44992: LD_VAR 0 1
44996: PUSH
44997: LD_VAR 0 6
45001: ARRAY
45002: PUSH
45003: LD_VAR 0 4
45007: ARRAY
45008: PPUSH
45009: CALL 40054 0 2
45013: ST_TO_ADDR
45014: GO 45042
// result := Join ( result , array [ i ] ) ;
45016: LD_ADDR_VAR 0 5
45020: PUSH
45021: LD_VAR 0 5
45025: PPUSH
45026: LD_VAR 0 1
45030: PUSH
45031: LD_VAR 0 6
45035: ARRAY
45036: PPUSH
45037: CALL 40054 0 2
45041: ST_TO_ADDR
// end ;
45042: GO 44949
45044: POP
45045: POP
// end ;
45046: LD_VAR 0 5
45050: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45051: LD_INT 0
45053: PPUSH
// if not vehicles or not parkingPoint then
45054: LD_VAR 0 1
45058: NOT
45059: IFTRUE 45068
45061: PUSH
45062: LD_VAR 0 2
45066: NOT
45067: OR
45068: IFFALSE 45072
// exit ;
45070: GO 45170
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45072: LD_ADDR_VAR 0 1
45076: PUSH
45077: LD_VAR 0 1
45081: PPUSH
45082: LD_INT 50
45084: PUSH
45085: EMPTY
45086: LIST
45087: PUSH
45088: LD_INT 3
45090: PUSH
45091: LD_INT 92
45093: PUSH
45094: LD_VAR 0 2
45098: PUSH
45099: LD_INT 1
45101: ARRAY
45102: PUSH
45103: LD_VAR 0 2
45107: PUSH
45108: LD_INT 2
45110: ARRAY
45111: PUSH
45112: LD_INT 8
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PPUSH
45129: CALL_OW 72
45133: ST_TO_ADDR
// if not vehicles then
45134: LD_VAR 0 1
45138: NOT
45139: IFFALSE 45143
// exit ;
45141: GO 45170
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45143: LD_VAR 0 1
45147: PPUSH
45148: LD_VAR 0 2
45152: PUSH
45153: LD_INT 1
45155: ARRAY
45156: PPUSH
45157: LD_VAR 0 2
45161: PUSH
45162: LD_INT 2
45164: ARRAY
45165: PPUSH
45166: CALL_OW 111
// end ;
45170: LD_VAR 0 3
45174: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45175: LD_INT 0
45177: PPUSH
45178: PPUSH
45179: PPUSH
// if not side or not area then
45180: LD_VAR 0 1
45184: NOT
45185: IFTRUE 45194
45187: PUSH
45188: LD_VAR 0 2
45192: NOT
45193: OR
45194: IFFALSE 45198
// exit ;
45196: GO 45317
// tmp := AreaToList ( area , 0 ) ;
45198: LD_ADDR_VAR 0 5
45202: PUSH
45203: LD_VAR 0 2
45207: PPUSH
45208: LD_INT 0
45210: PPUSH
45211: CALL_OW 517
45215: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45216: LD_ADDR_VAR 0 4
45220: PUSH
45221: DOUBLE
45222: LD_INT 1
45224: DEC
45225: ST_TO_ADDR
45226: LD_VAR 0 5
45230: PUSH
45231: LD_INT 1
45233: ARRAY
45234: PUSH
45235: FOR_TO
45236: IFFALSE 45315
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45238: LD_VAR 0 5
45242: PUSH
45243: LD_INT 1
45245: ARRAY
45246: PUSH
45247: LD_VAR 0 4
45251: ARRAY
45252: PPUSH
45253: LD_VAR 0 5
45257: PUSH
45258: LD_INT 2
45260: ARRAY
45261: PUSH
45262: LD_VAR 0 4
45266: ARRAY
45267: PPUSH
45268: CALL_OW 351
45272: IFFALSE 45313
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45274: LD_VAR 0 5
45278: PUSH
45279: LD_INT 1
45281: ARRAY
45282: PUSH
45283: LD_VAR 0 4
45287: ARRAY
45288: PPUSH
45289: LD_VAR 0 5
45293: PUSH
45294: LD_INT 2
45296: ARRAY
45297: PUSH
45298: LD_VAR 0 4
45302: ARRAY
45303: PPUSH
45304: LD_VAR 0 1
45308: PPUSH
45309: CALL_OW 244
// end ;
45313: GO 45235
45315: POP
45316: POP
// end ;
45317: LD_VAR 0 3
45321: RET
// export function UniqueArray ( array ) ; var i ; begin
45322: LD_INT 0
45324: PPUSH
45325: PPUSH
// result := [ ] ;
45326: LD_ADDR_VAR 0 2
45330: PUSH
45331: EMPTY
45332: ST_TO_ADDR
// if not array then
45333: LD_VAR 0 1
45337: NOT
45338: IFFALSE 45342
// exit ;
45340: GO 45403
// for i := 1 to array do
45342: LD_ADDR_VAR 0 3
45346: PUSH
45347: DOUBLE
45348: LD_INT 1
45350: DEC
45351: ST_TO_ADDR
45352: LD_VAR 0 1
45356: PUSH
45357: FOR_TO
45358: IFFALSE 45401
// if not array [ i ] in result then
45360: LD_VAR 0 1
45364: PUSH
45365: LD_VAR 0 3
45369: ARRAY
45370: PUSH
45371: LD_VAR 0 2
45375: IN
45376: NOT
45377: IFFALSE 45399
// result := Join ( result , i ) ;
45379: LD_ADDR_VAR 0 2
45383: PUSH
45384: LD_VAR 0 2
45388: PPUSH
45389: LD_VAR 0 3
45393: PPUSH
45394: CALL 40054 0 2
45398: ST_TO_ADDR
45399: GO 45357
45401: POP
45402: POP
// end ;
45403: LD_VAR 0 2
45407: RET
