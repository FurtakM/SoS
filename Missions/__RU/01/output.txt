// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareRussian ;
   8: CALL 98 0 0
// Action ;
  12: CALL 1256 0 0
// end ;
  16: END
// function Init ; begin
  17: LD_INT 0
  19: PPUSH
// game_speed := 5 ;
  20: LD_ADDR_OWVAR 65
  24: PUSH
  25: LD_INT 5
  27: ST_TO_ADDR
// music_class := 5 ;
  28: LD_ADDR_OWVAR 72
  32: PUSH
  33: LD_INT 5
  35: ST_TO_ADDR
// PlaceSeeing ( 1 , 1 , 3 , - 32967 ) ;
  36: LD_INT 1
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 32967
  47: NEG
  48: PPUSH
  49: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 3 ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_INT 1
  58: PPUSH
  59: LD_INT 3
  61: PPUSH
  62: CALL_OW 331
// PlaceSeeing ( 172 , 50 , 3 , - 32 ) ;
  66: LD_INT 172
  68: PPUSH
  69: LD_INT 50
  71: PPUSH
  72: LD_INT 3
  74: PPUSH
  75: LD_INT 32
  77: NEG
  78: PPUSH
  79: CALL_OW 330
// CenterNowOnXY ( 109 , 159 ) ;
  83: LD_INT 109
  85: PPUSH
  86: LD_INT 159
  88: PPUSH
  89: CALL_OW 86
// end ; end_of_file
  93: LD_VAR 0 1
  97: RET
// export Botvinov , Szyski , Burlak ; export group1 , group2 , group3 ; export function PrepareRussian ; var i , un ; begin
  98: LD_INT 0
 100: PPUSH
 101: PPUSH
 102: PPUSH
// uc_side := 3 ;
 103: LD_ADDR_OWVAR 20
 107: PUSH
 108: LD_INT 3
 110: ST_TO_ADDR
// uc_nation := 3 ;
 111: LD_ADDR_OWVAR 21
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// InitHc ;
 119: CALL_OW 19
// PrepareSoldier ( sex_male , 1 ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 1
 128: PPUSH
 129: CALL_OW 381
// hc_name := Botvinov ;
 133: LD_ADDR_OWVAR 26
 137: PUSH
 138: LD_STRING Botvinov
 140: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 141: LD_ADDR_OWVAR 33
 145: PUSH
 146: LD_STRING SecondCharsGal
 148: ST_TO_ADDR
// hc_face_number := 84 ;
 149: LD_ADDR_OWVAR 34
 153: PUSH
 154: LD_INT 84
 156: ST_TO_ADDR
// Botvinov := CreateHuman ;
 157: LD_ADDR_EXP 1
 161: PUSH
 162: CALL_OW 44
 166: ST_TO_ADDR
// PlaceUnitArea ( Botvinov , botvinovArea , false ) ;
 167: LD_EXP 1
 171: PPUSH
 172: LD_INT 2
 174: PPUSH
 175: LD_INT 0
 177: PPUSH
 178: CALL_OW 49
// ComLookAtDir ( Botvinov , 4 ) ;
 182: LD_EXP 1
 186: PPUSH
 187: LD_INT 4
 189: PPUSH
 190: CALL 42541 0 2
// hc_name := Szyski ;
 194: LD_ADDR_OWVAR 26
 198: PUSH
 199: LD_STRING Szyski
 201: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 202: LD_ADDR_OWVAR 33
 206: PUSH
 207: LD_STRING SecondCharsGal
 209: ST_TO_ADDR
// hc_face_number := 86 ;
 210: LD_ADDR_OWVAR 34
 214: PUSH
 215: LD_INT 86
 217: ST_TO_ADDR
// Szyski := CreateHuman ;
 218: LD_ADDR_EXP 2
 222: PUSH
 223: CALL_OW 44
 227: ST_TO_ADDR
// PlaceUnitArea ( Szyski , szyskiArea , false ) ;
 228: LD_EXP 2
 232: PPUSH
 233: LD_INT 3
 235: PPUSH
 236: LD_INT 0
 238: PPUSH
 239: CALL_OW 49
// ComLookAtDir ( Szyski , 4 ) ;
 243: LD_EXP 2
 247: PPUSH
 248: LD_INT 4
 250: PPUSH
 251: CALL 42541 0 2
// InitHC_All ( ) ;
 255: CALL_OW 584
// for i := 1 to 3 do
 259: LD_ADDR_VAR 0 2
 263: PUSH
 264: DOUBLE
 265: LD_INT 1
 267: DEC
 268: ST_TO_ADDR
 269: LD_INT 3
 271: PUSH
 272: FOR_TO
 273: IFFALSE 324
// begin PrepareSoldier ( sex_male , 1 ) ;
 275: LD_INT 1
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 381
// un := CreateHuman ;
 285: LD_ADDR_VAR 0 3
 289: PUSH
 290: CALL_OW 44
 294: ST_TO_ADDR
// PlaceUnitArea ( un , officerArea , false ) ;
 295: LD_VAR 0 3
 299: PPUSH
 300: LD_INT 4
 302: PPUSH
 303: LD_INT 0
 305: PPUSH
 306: CALL_OW 49
// ComLookAtDir ( un , 2 ) ;
 310: LD_VAR 0 3
 314: PPUSH
 315: LD_INT 2
 317: PPUSH
 318: CALL 42541 0 2
// end ;
 322: GO 272
 324: POP
 325: POP
// for i := 1 to 3 do
 326: LD_ADDR_VAR 0 2
 330: PUSH
 331: DOUBLE
 332: LD_INT 1
 334: DEC
 335: ST_TO_ADDR
 336: LD_INT 3
 338: PUSH
 339: FOR_TO
 340: IFFALSE 391
// begin PrepareSoldier ( sex_male , 1 ) ;
 342: LD_INT 1
 344: PPUSH
 345: LD_INT 1
 347: PPUSH
 348: CALL_OW 381
// un := CreateHuman ;
 352: LD_ADDR_VAR 0 3
 356: PUSH
 357: CALL_OW 44
 361: ST_TO_ADDR
// PlaceUnitArea ( un , officer2Area , false ) ;
 362: LD_VAR 0 3
 366: PPUSH
 367: LD_INT 5
 369: PPUSH
 370: LD_INT 0
 372: PPUSH
 373: CALL_OW 49
// ComLookAtDir ( un , 5 ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_INT 5
 384: PPUSH
 385: CALL 42541 0 2
// end ;
 389: GO 339
 391: POP
 392: POP
// Burlak := NewCharacter ( Burlak ) ;
 393: LD_ADDR_EXP 3
 397: PUSH
 398: LD_STRING Burlak
 400: PPUSH
 401: CALL_OW 25
 405: ST_TO_ADDR
// InitHc_All ( ) ;
 406: CALL_OW 584
// group1 := PrepareGroup ;
 410: LD_ADDR_EXP 4
 414: PUSH
 415: CALL 595 0 0
 419: ST_TO_ADDR
// group1 := Replace ( group1 , 5 , Burlak ) ;
 420: LD_ADDR_EXP 4
 424: PUSH
 425: LD_EXP 4
 429: PPUSH
 430: LD_INT 5
 432: PPUSH
 433: LD_EXP 3
 437: PPUSH
 438: CALL_OW 1
 442: ST_TO_ADDR
// group2 := PrepareGroup ;
 443: LD_ADDR_EXP 5
 447: PUSH
 448: CALL 595 0 0
 452: ST_TO_ADDR
// group3 := PrepareGroup ;
 453: LD_ADDR_EXP 6
 457: PUSH
 458: CALL 595 0 0
 462: ST_TO_ADDR
// for un in group1 ^ group2 ^ group3 do
 463: LD_ADDR_VAR 0 3
 467: PUSH
 468: LD_EXP 4
 472: PUSH
 473: LD_EXP 5
 477: ADD
 478: PUSH
 479: LD_EXP 6
 483: ADD
 484: PUSH
 485: FOR_IN
 486: IFFALSE 588
// begin case GetClass ( un ) of 1 :
 488: LD_VAR 0 3
 492: PPUSH
 493: CALL_OW 257
 497: PUSH
 498: LD_INT 1
 500: DOUBLE
 501: EQUAL
 502: IFTRUE 506
 504: GO 524
 506: POP
// PlaceUnitArea ( un , firstLineArea , false ) ; 3 :
 507: LD_VAR 0 3
 511: PPUSH
 512: LD_INT 6
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL_OW 49
 522: GO 577
 524: LD_INT 3
 526: DOUBLE
 527: EQUAL
 528: IFTRUE 532
 530: GO 550
 532: POP
// PlaceUnitArea ( un , secondLineArea , false ) ; 4 :
 533: LD_VAR 0 3
 537: PPUSH
 538: LD_INT 7
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: CALL_OW 49
 548: GO 577
 550: LD_INT 4
 552: DOUBLE
 553: EQUAL
 554: IFTRUE 558
 556: GO 576
 558: POP
// PlaceUnitArea ( un , thirdLineArea , false ) ; end ;
 559: LD_VAR 0 3
 563: PPUSH
 564: LD_INT 8
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 49
 574: GO 577
 576: POP
// ComHold ( un ) ;
 577: LD_VAR 0 3
 581: PPUSH
 582: CALL_OW 140
// end ;
 586: GO 485
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 1
 594: RET
// function PrepareGroup ; var i , j , tmp ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
 599: PPUSH
 600: PPUSH
// result := [ ] ;
 601: LD_ADDR_VAR 0 1
 605: PUSH
 606: EMPTY
 607: ST_TO_ADDR
// tmp := [ 4 , 0 , 2 , 1 ] ;
 608: LD_ADDR_VAR 0 4
 612: PUSH
 613: LD_INT 4
 615: PUSH
 616: LD_INT 0
 618: PUSH
 619: LD_INT 2
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: ST_TO_ADDR
// for i := 1 to tmp do
 631: LD_ADDR_VAR 0 2
 635: PUSH
 636: DOUBLE
 637: LD_INT 1
 639: DEC
 640: ST_TO_ADDR
 641: LD_VAR 0 4
 645: PUSH
 646: FOR_TO
 647: IFFALSE 726
// if tmp [ i ] then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_VAR 0 2
 658: ARRAY
 659: IFFALSE 724
// for j := 1 to tmp [ i ] do
 661: LD_ADDR_VAR 0 3
 665: PUSH
 666: DOUBLE
 667: LD_INT 1
 669: DEC
 670: ST_TO_ADDR
 671: LD_VAR 0 4
 675: PUSH
 676: LD_VAR 0 2
 680: ARRAY
 681: PUSH
 682: FOR_TO
 683: IFFALSE 722
// begin PrepareHuman ( false , i , 1 ) ;
 685: LD_INT 0
 687: PPUSH
 688: LD_VAR 0 2
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
 700: LD_ADDR_VAR 0 1
 704: PUSH
 705: LD_VAR 0 1
 709: PPUSH
 710: CALL_OW 44
 714: PPUSH
 715: CALL 39385 0 2
 719: ST_TO_ADDR
// end ;
 720: GO 682
 722: POP
 723: POP
 724: GO 646
 726: POP
 727: POP
// end ;
 728: LD_VAR 0 1
 732: RET
// export function FormGroup ( group , soldArea , mechArea , sciArea ) ; var i , class , hexesS , hexesM , hexesSc ; begin
 733: LD_INT 0
 735: PPUSH
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not group then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1251
// hexesS := AreaToList ( soldArea , 0 ) ;
 750: LD_ADDR_VAR 0 8
 754: PUSH
 755: LD_VAR 0 2
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL_OW 517
 767: ST_TO_ADDR
// hexesM := AreaToList ( mechArea , 0 ) ;
 768: LD_ADDR_VAR 0 9
 772: PUSH
 773: LD_VAR 0 3
 777: PPUSH
 778: LD_INT 0
 780: PPUSH
 781: CALL_OW 517
 785: ST_TO_ADDR
// hexesSc := AreaToList ( sciArea , 0 ) ;
 786: LD_ADDR_VAR 0 10
 790: PUSH
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: CALL_OW 517
 803: ST_TO_ADDR
// for i := 1 to Count ( group ) do
 804: LD_ADDR_VAR 0 6
 808: PUSH
 809: DOUBLE
 810: LD_INT 1
 812: DEC
 813: ST_TO_ADDR
 814: LD_VAR 0 1
 818: PPUSH
 819: CALL 3776 0 1
 823: PUSH
 824: FOR_TO
 825: IFFALSE 1249
// begin class := GetClass ( group [ i ] ) ;
 827: LD_ADDR_VAR 0 7
 831: PUSH
 832: LD_VAR 0 1
 836: PUSH
 837: LD_VAR 0 6
 841: ARRAY
 842: PPUSH
 843: CALL_OW 257
 847: ST_TO_ADDR
// if class = 1 then
 848: LD_VAR 0 7
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: IFFALSE 981
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesS [ 1 ] [ 1 ] , hexesS [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
 858: LD_INT 1
 860: PPUSH
 861: LD_VAR 0 1
 865: PUSH
 866: LD_VAR 0 6
 870: ARRAY
 871: PPUSH
 872: LD_VAR 0 8
 876: PUSH
 877: LD_INT 1
 879: ARRAY
 880: PUSH
 881: LD_INT 1
 883: ARRAY
 884: PPUSH
 885: LD_VAR 0 8
 889: PUSH
 890: LD_INT 2
 892: ARRAY
 893: PUSH
 894: LD_INT 1
 896: ARRAY
 897: PPUSH
 898: LD_INT 202
 900: PPUSH
 901: LD_INT 49
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: CALL_OW 595
// hexesS := Replace ( hexesS , 1 , Delete ( hexesS [ 1 ] , 1 ) ) ;
 911: LD_ADDR_VAR 0 8
 915: PUSH
 916: LD_VAR 0 8
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: LD_VAR 0 8
 928: PUSH
 929: LD_INT 1
 931: ARRAY
 932: PPUSH
 933: LD_INT 1
 935: PPUSH
 936: CALL_OW 3
 940: PPUSH
 941: CALL_OW 1
 945: ST_TO_ADDR
// hexesS := Replace ( hexesS , 2 , Delete ( hexesS [ 2 ] , 1 ) ) ;
 946: LD_ADDR_VAR 0 8
 950: PUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: LD_INT 2
 958: PPUSH
 959: LD_VAR 0 8
 963: PUSH
 964: LD_INT 2
 966: ARRAY
 967: PPUSH
 968: LD_INT 1
 970: PPUSH
 971: CALL_OW 3
 975: PPUSH
 976: CALL_OW 1
 980: ST_TO_ADDR
// end ; if class = 3 then
 981: LD_VAR 0 7
 985: PUSH
 986: LD_INT 3
 988: EQUAL
 989: IFFALSE 1114
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesM [ 1 ] [ 1 ] , hexesM [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
 991: LD_INT 1
 993: PPUSH
 994: LD_VAR 0 1
 998: PUSH
 999: LD_VAR 0 6
1003: ARRAY
1004: PPUSH
1005: LD_VAR 0 9
1009: PUSH
1010: LD_INT 1
1012: ARRAY
1013: PUSH
1014: LD_INT 1
1016: ARRAY
1017: PPUSH
1018: LD_VAR 0 9
1022: PUSH
1023: LD_INT 2
1025: ARRAY
1026: PUSH
1027: LD_INT 1
1029: ARRAY
1030: PPUSH
1031: LD_INT 202
1033: PPUSH
1034: LD_INT 49
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 595
// hexesM := Replace ( hexesM , 1 , Delete ( hexesM [ 1 ] , 1 ) ) ;
1044: LD_ADDR_VAR 0 9
1048: PUSH
1049: LD_VAR 0 9
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_VAR 0 9
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL_OW 3
1073: PPUSH
1074: CALL_OW 1
1078: ST_TO_ADDR
// hexesM := Replace ( hexesM , 2 , Delete ( hexesM [ 2 ] , 1 ) ) ;
1079: LD_ADDR_VAR 0 9
1083: PUSH
1084: LD_VAR 0 9
1088: PPUSH
1089: LD_INT 2
1091: PPUSH
1092: LD_VAR 0 9
1096: PUSH
1097: LD_INT 2
1099: ARRAY
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: CALL_OW 3
1108: PPUSH
1109: CALL_OW 1
1113: ST_TO_ADDR
// end ; if class = 4 then
1114: LD_VAR 0 7
1118: PUSH
1119: LD_INT 4
1121: EQUAL
1122: IFFALSE 1247
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesSc [ 1 ] [ 1 ] , hexesSc [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1124: LD_INT 1
1126: PPUSH
1127: LD_VAR 0 1
1131: PUSH
1132: LD_VAR 0 6
1136: ARRAY
1137: PPUSH
1138: LD_VAR 0 10
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: LD_VAR 0 10
1155: PUSH
1156: LD_INT 2
1158: ARRAY
1159: PUSH
1160: LD_INT 1
1162: ARRAY
1163: PPUSH
1164: LD_INT 202
1166: PPUSH
1167: LD_INT 49
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 595
// hexesSc := Replace ( hexesSc , 1 , Delete ( hexesSc [ 1 ] , 1 ) ) ;
1177: LD_ADDR_VAR 0 10
1181: PUSH
1182: LD_VAR 0 10
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_VAR 0 10
1194: PUSH
1195: LD_INT 1
1197: ARRAY
1198: PPUSH
1199: LD_INT 1
1201: PPUSH
1202: CALL_OW 3
1206: PPUSH
1207: CALL_OW 1
1211: ST_TO_ADDR
// hexesSc := Replace ( hexesSc , 2 , Delete ( hexesSc [ 2 ] , 1 ) ) ;
1212: LD_ADDR_VAR 0 10
1216: PUSH
1217: LD_VAR 0 10
1221: PPUSH
1222: LD_INT 2
1224: PPUSH
1225: LD_VAR 0 10
1229: PUSH
1230: LD_INT 2
1232: ARRAY
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: CALL_OW 3
1241: PPUSH
1242: CALL_OW 1
1246: ST_TO_ADDR
// end ; end ;
1247: GO 824
1249: POP
1250: POP
// end ; end_of_file
1251: LD_VAR 0 5
1255: RET
// export function Action ; var i ; begin
1256: LD_INT 0
1258: PPUSH
1259: PPUSH
// Video ( true ) ;
1260: LD_INT 1
1262: PPUSH
1263: CALL 39357 0 1
// wait ( 0 0$1 ) ;
1267: LD_INT 35
1269: PPUSH
1270: CALL_OW 67
// CenterOnXY ( 106 , 151 ) ;
1274: LD_INT 106
1276: PPUSH
1277: LD_INT 151
1279: PPUSH
1280: CALL_OW 84
// wait ( 0 0$2 ) ;
1284: LD_INT 70
1286: PPUSH
1287: CALL_OW 67
// CenterOnXY ( 62 , 83 ) ;
1291: LD_INT 62
1293: PPUSH
1294: LD_INT 83
1296: PPUSH
1297: CALL_OW 84
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// CenterOnXY ( 172 , 47 ) ;
1308: LD_INT 172
1310: PPUSH
1311: LD_INT 47
1313: PPUSH
1314: CALL_OW 84
// wait ( 0 0$1 ) ;
1318: LD_INT 35
1320: PPUSH
1321: CALL_OW 67
// stop_talking := true ;
1325: LD_ADDR_OWVAR 56
1329: PUSH
1330: LD_INT 1
1332: ST_TO_ADDR
// Say ( Botvinov , D1i-Off1-1 ) ;
1333: LD_EXP 1
1337: PPUSH
1338: LD_STRING D1i-Off1-1
1340: PPUSH
1341: CALL_OW 88
// for i in group1 ^ group2 ^ group3 do
1345: LD_ADDR_VAR 0 2
1349: PUSH
1350: LD_EXP 4
1354: PUSH
1355: LD_EXP 5
1359: ADD
1360: PUSH
1361: LD_EXP 6
1365: ADD
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1387
// ComTurnXY ( i , 202 , 49 ) ;
1370: LD_VAR 0 2
1374: PPUSH
1375: LD_INT 202
1377: PPUSH
1378: LD_INT 49
1380: PPUSH
1381: CALL_OW 118
1385: GO 1367
1387: POP
1388: POP
// wait ( 10 ) ;
1389: LD_INT 10
1391: PPUSH
1392: CALL_OW 67
// Say ( Szyski , D1i-Off2-1 ) ;
1396: LD_EXP 2
1400: PPUSH
1401: LD_STRING D1i-Off2-1
1403: PPUSH
1404: CALL_OW 88
// Say ( Botvinov , D1i-Off1-2 ) ;
1408: LD_EXP 1
1412: PPUSH
1413: LD_STRING D1i-Off1-2
1415: PPUSH
1416: CALL_OW 88
// FormGroup ( group1 , gs1 , gm1 , gsc1 ) ;
1420: LD_EXP 4
1424: PPUSH
1425: LD_INT 9
1427: PPUSH
1428: LD_INT 12
1430: PPUSH
1431: LD_INT 15
1433: PPUSH
1434: CALL 733 0 4
// FormGroup ( group2 , gs2 , gm2 , gsc2 ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 10
1445: PPUSH
1446: LD_INT 13
1448: PPUSH
1449: LD_INT 16
1451: PPUSH
1452: CALL 733 0 4
// FormGroup ( group3 , gs3 , gm3 , gsc3 ) ;
1456: LD_EXP 6
1460: PPUSH
1461: LD_INT 11
1463: PPUSH
1464: LD_INT 14
1466: PPUSH
1467: LD_INT 17
1469: PPUSH
1470: CALL 733 0 4
// wait ( 0 0$5 ) ;
1474: LD_INT 175
1476: PPUSH
1477: CALL_OW 67
// Say ( Szyski , D1i-Off2-2 ) ;
1481: LD_EXP 2
1485: PPUSH
1486: LD_STRING D1i-Off2-2
1488: PPUSH
1489: CALL_OW 88
// Say ( Botvinov , D1i-Off1-3 ) ;
1493: LD_EXP 1
1497: PPUSH
1498: LD_STRING D1i-Off1-3
1500: PPUSH
1501: CALL_OW 88
// SayEffect ( DStart-All ) ;
1505: LD_STRING DStart-All
1507: PPUSH
1508: CALL_OW 96
// wait ( 50 ) ;
1512: LD_INT 50
1514: PPUSH
1515: CALL_OW 67
// for i in group1 do
1519: LD_ADDR_VAR 0 2
1523: PUSH
1524: LD_EXP 4
1528: PUSH
1529: FOR_IN
1530: IFFALSE 1553
// begin ComEnterUnit ( i , eon ) ;
1532: LD_VAR 0 2
1536: PPUSH
1537: LD_INT 4
1539: PPUSH
1540: CALL_OW 120
// wait ( 55 ) ;
1544: LD_INT 55
1546: PPUSH
1547: CALL_OW 67
// end ;
1551: GO 1529
1553: POP
1554: POP
// end ; end_of_file
1555: LD_VAR 0 1
1559: RET
// on SailEventCustom ( e , p1 , p2 , p3 , p4 , p5 , p6 ) do begin repeat ComMoveXY ( p1 , p2 , p3 ) ;
1560: LD_VAR 0 2
1564: PPUSH
1565: LD_VAR 0 3
1569: PPUSH
1570: LD_VAR 0 4
1574: PPUSH
1575: CALL_OW 111
// wait ( 3 ) ;
1579: LD_INT 3
1581: PPUSH
1582: CALL_OW 67
// until IsAt ( p1 , p2 , p3 ) ;
1586: LD_VAR 0 2
1590: PPUSH
1591: LD_VAR 0 3
1595: PPUSH
1596: LD_VAR 0 4
1600: PPUSH
1601: CALL_OW 307
1605: IFFALSE 1560
// ComTurnXY ( p1 , p4 , p5 ) ;
1607: LD_VAR 0 2
1611: PPUSH
1612: LD_VAR 0 5
1616: PPUSH
1617: LD_VAR 0 6
1621: PPUSH
1622: CALL_OW 118
// end ;
1626: PPOPN 7
1628: END
// on EnterBuilding ( building , unit ) do begin if unit = Burlak then
1629: LD_VAR 0 2
1633: PUSH
1634: LD_EXP 3
1638: EQUAL
1639: IFFALSE 1658
// begin wait ( 20 ) ;
1641: LD_INT 20
1643: PPUSH
1644: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1648: LD_INT 1
1650: PPUSH
1651: LD_STRING %_cont
1653: PPUSH
1654: CALL_OW 340
// end ; end ;
1658: PPOPN 2
1660: END
// on DialogueSkipped ( value ) do begin ChangeMap ( 1 , %_cont ) ;
1661: LD_INT 1
1663: PPUSH
1664: LD_STRING %_cont
1666: PPUSH
1667: CALL_OW 340
// end ; end_of_file
1671: PPOPN 1
1673: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1674: LD_INT 0
1676: PPUSH
1677: PPUSH
// if exist_mode then
1678: LD_VAR 0 2
1682: IFFALSE 1707
// unit := CreateCharacter ( prefix & ident ) else
1684: LD_ADDR_VAR 0 5
1688: PUSH
1689: LD_VAR 0 3
1693: PUSH
1694: LD_VAR 0 1
1698: STR
1699: PPUSH
1700: CALL_OW 34
1704: ST_TO_ADDR
1705: GO 1722
// unit := NewCharacter ( ident ) ;
1707: LD_ADDR_VAR 0 5
1711: PUSH
1712: LD_VAR 0 1
1716: PPUSH
1717: CALL_OW 25
1721: ST_TO_ADDR
// result := unit ;
1722: LD_ADDR_VAR 0 4
1726: PUSH
1727: LD_VAR 0 5
1731: ST_TO_ADDR
// end ;
1732: LD_VAR 0 4
1736: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1737: LD_INT 0
1739: PPUSH
1740: PPUSH
// if not side or not nation then
1741: LD_VAR 0 1
1745: NOT
1746: PUSH
1747: LD_VAR 0 2
1751: NOT
1752: OR
1753: IFFALSE 1757
// exit ;
1755: GO 2525
// case nation of nation_american :
1757: LD_VAR 0 2
1761: PUSH
1762: LD_INT 1
1764: DOUBLE
1765: EQUAL
1766: IFTRUE 1770
1768: GO 1984
1770: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1771: LD_ADDR_VAR 0 4
1775: PUSH
1776: LD_INT 35
1778: PUSH
1779: LD_INT 45
1781: PUSH
1782: LD_INT 46
1784: PUSH
1785: LD_INT 47
1787: PUSH
1788: LD_INT 82
1790: PUSH
1791: LD_INT 83
1793: PUSH
1794: LD_INT 84
1796: PUSH
1797: LD_INT 85
1799: PUSH
1800: LD_INT 86
1802: PUSH
1803: LD_INT 1
1805: PUSH
1806: LD_INT 2
1808: PUSH
1809: LD_INT 6
1811: PUSH
1812: LD_INT 15
1814: PUSH
1815: LD_INT 16
1817: PUSH
1818: LD_INT 7
1820: PUSH
1821: LD_INT 12
1823: PUSH
1824: LD_INT 13
1826: PUSH
1827: LD_INT 10
1829: PUSH
1830: LD_INT 14
1832: PUSH
1833: LD_INT 20
1835: PUSH
1836: LD_INT 21
1838: PUSH
1839: LD_INT 22
1841: PUSH
1842: LD_INT 25
1844: PUSH
1845: LD_INT 32
1847: PUSH
1848: LD_INT 27
1850: PUSH
1851: LD_INT 36
1853: PUSH
1854: LD_INT 69
1856: PUSH
1857: LD_INT 39
1859: PUSH
1860: LD_INT 34
1862: PUSH
1863: LD_INT 40
1865: PUSH
1866: LD_INT 48
1868: PUSH
1869: LD_INT 49
1871: PUSH
1872: LD_INT 50
1874: PUSH
1875: LD_INT 51
1877: PUSH
1878: LD_INT 52
1880: PUSH
1881: LD_INT 53
1883: PUSH
1884: LD_INT 54
1886: PUSH
1887: LD_INT 55
1889: PUSH
1890: LD_INT 56
1892: PUSH
1893: LD_INT 57
1895: PUSH
1896: LD_INT 58
1898: PUSH
1899: LD_INT 59
1901: PUSH
1902: LD_INT 60
1904: PUSH
1905: LD_INT 61
1907: PUSH
1908: LD_INT 62
1910: PUSH
1911: LD_INT 80
1913: PUSH
1914: LD_INT 82
1916: PUSH
1917: LD_INT 83
1919: PUSH
1920: LD_INT 84
1922: PUSH
1923: LD_INT 85
1925: PUSH
1926: LD_INT 86
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: ST_TO_ADDR
1982: GO 2449
1984: LD_INT 2
1986: DOUBLE
1987: EQUAL
1988: IFTRUE 1992
1990: GO 2218
1992: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1993: LD_ADDR_VAR 0 4
1997: PUSH
1998: LD_INT 35
2000: PUSH
2001: LD_INT 45
2003: PUSH
2004: LD_INT 46
2006: PUSH
2007: LD_INT 47
2009: PUSH
2010: LD_INT 82
2012: PUSH
2013: LD_INT 83
2015: PUSH
2016: LD_INT 84
2018: PUSH
2019: LD_INT 85
2021: PUSH
2022: LD_INT 87
2024: PUSH
2025: LD_INT 70
2027: PUSH
2028: LD_INT 1
2030: PUSH
2031: LD_INT 11
2033: PUSH
2034: LD_INT 3
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: LD_INT 5
2042: PUSH
2043: LD_INT 6
2045: PUSH
2046: LD_INT 15
2048: PUSH
2049: LD_INT 18
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: LD_INT 17
2057: PUSH
2058: LD_INT 8
2060: PUSH
2061: LD_INT 20
2063: PUSH
2064: LD_INT 21
2066: PUSH
2067: LD_INT 22
2069: PUSH
2070: LD_INT 72
2072: PUSH
2073: LD_INT 26
2075: PUSH
2076: LD_INT 69
2078: PUSH
2079: LD_INT 39
2081: PUSH
2082: LD_INT 40
2084: PUSH
2085: LD_INT 41
2087: PUSH
2088: LD_INT 42
2090: PUSH
2091: LD_INT 43
2093: PUSH
2094: LD_INT 48
2096: PUSH
2097: LD_INT 49
2099: PUSH
2100: LD_INT 50
2102: PUSH
2103: LD_INT 51
2105: PUSH
2106: LD_INT 52
2108: PUSH
2109: LD_INT 53
2111: PUSH
2112: LD_INT 54
2114: PUSH
2115: LD_INT 55
2117: PUSH
2118: LD_INT 56
2120: PUSH
2121: LD_INT 60
2123: PUSH
2124: LD_INT 61
2126: PUSH
2127: LD_INT 62
2129: PUSH
2130: LD_INT 66
2132: PUSH
2133: LD_INT 67
2135: PUSH
2136: LD_INT 68
2138: PUSH
2139: LD_INT 81
2141: PUSH
2142: LD_INT 82
2144: PUSH
2145: LD_INT 83
2147: PUSH
2148: LD_INT 84
2150: PUSH
2151: LD_INT 85
2153: PUSH
2154: LD_INT 87
2156: PUSH
2157: LD_INT 88
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: ST_TO_ADDR
2216: GO 2449
2218: LD_INT 3
2220: DOUBLE
2221: EQUAL
2222: IFTRUE 2226
2224: GO 2448
2226: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2227: LD_ADDR_VAR 0 4
2231: PUSH
2232: LD_INT 46
2234: PUSH
2235: LD_INT 47
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: LD_INT 2
2243: PUSH
2244: LD_INT 82
2246: PUSH
2247: LD_INT 83
2249: PUSH
2250: LD_INT 84
2252: PUSH
2253: LD_INT 85
2255: PUSH
2256: LD_INT 86
2258: PUSH
2259: LD_INT 11
2261: PUSH
2262: LD_INT 9
2264: PUSH
2265: LD_INT 20
2267: PUSH
2268: LD_INT 19
2270: PUSH
2271: LD_INT 21
2273: PUSH
2274: LD_INT 24
2276: PUSH
2277: LD_INT 22
2279: PUSH
2280: LD_INT 25
2282: PUSH
2283: LD_INT 28
2285: PUSH
2286: LD_INT 29
2288: PUSH
2289: LD_INT 30
2291: PUSH
2292: LD_INT 31
2294: PUSH
2295: LD_INT 37
2297: PUSH
2298: LD_INT 38
2300: PUSH
2301: LD_INT 32
2303: PUSH
2304: LD_INT 27
2306: PUSH
2307: LD_INT 33
2309: PUSH
2310: LD_INT 69
2312: PUSH
2313: LD_INT 39
2315: PUSH
2316: LD_INT 34
2318: PUSH
2319: LD_INT 40
2321: PUSH
2322: LD_INT 71
2324: PUSH
2325: LD_INT 23
2327: PUSH
2328: LD_INT 44
2330: PUSH
2331: LD_INT 48
2333: PUSH
2334: LD_INT 49
2336: PUSH
2337: LD_INT 50
2339: PUSH
2340: LD_INT 51
2342: PUSH
2343: LD_INT 52
2345: PUSH
2346: LD_INT 53
2348: PUSH
2349: LD_INT 54
2351: PUSH
2352: LD_INT 55
2354: PUSH
2355: LD_INT 56
2357: PUSH
2358: LD_INT 57
2360: PUSH
2361: LD_INT 58
2363: PUSH
2364: LD_INT 59
2366: PUSH
2367: LD_INT 63
2369: PUSH
2370: LD_INT 64
2372: PUSH
2373: LD_INT 65
2375: PUSH
2376: LD_INT 82
2378: PUSH
2379: LD_INT 83
2381: PUSH
2382: LD_INT 84
2384: PUSH
2385: LD_INT 85
2387: PUSH
2388: LD_INT 86
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: LIST
2445: ST_TO_ADDR
2446: GO 2449
2448: POP
// if state > - 1 and state < 3 then
2449: LD_VAR 0 3
2453: PUSH
2454: LD_INT 1
2456: NEG
2457: GREATER
2458: PUSH
2459: LD_VAR 0 3
2463: PUSH
2464: LD_INT 3
2466: LESS
2467: AND
2468: IFFALSE 2525
// for i in result do
2470: LD_ADDR_VAR 0 5
2474: PUSH
2475: LD_VAR 0 4
2479: PUSH
2480: FOR_IN
2481: IFFALSE 2523
// if GetTech ( i , side ) <> state then
2483: LD_VAR 0 5
2487: PPUSH
2488: LD_VAR 0 1
2492: PPUSH
2493: CALL_OW 321
2497: PUSH
2498: LD_VAR 0 3
2502: NONEQUAL
2503: IFFALSE 2521
// result := result diff i ;
2505: LD_ADDR_VAR 0 4
2509: PUSH
2510: LD_VAR 0 4
2514: PUSH
2515: LD_VAR 0 5
2519: DIFF
2520: ST_TO_ADDR
2521: GO 2480
2523: POP
2524: POP
// end ;
2525: LD_VAR 0 4
2529: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2530: LD_INT 0
2532: PPUSH
2533: PPUSH
2534: PPUSH
// result := true ;
2535: LD_ADDR_VAR 0 3
2539: PUSH
2540: LD_INT 1
2542: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_VAR 0 2
2552: PPUSH
2553: CALL_OW 480
2557: ST_TO_ADDR
// if not tmp then
2558: LD_VAR 0 5
2562: NOT
2563: IFFALSE 2567
// exit ;
2565: GO 2616
// for i in tmp do
2567: LD_ADDR_VAR 0 4
2571: PUSH
2572: LD_VAR 0 5
2576: PUSH
2577: FOR_IN
2578: IFFALSE 2614
// if GetTech ( i , side ) <> state_researched then
2580: LD_VAR 0 4
2584: PPUSH
2585: LD_VAR 0 1
2589: PPUSH
2590: CALL_OW 321
2594: PUSH
2595: LD_INT 2
2597: NONEQUAL
2598: IFFALSE 2612
// begin result := false ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: LD_INT 0
2607: ST_TO_ADDR
// exit ;
2608: POP
2609: POP
2610: GO 2616
// end ;
2612: GO 2577
2614: POP
2615: POP
// end ;
2616: LD_VAR 0 3
2620: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2621: LD_INT 0
2623: PPUSH
2624: PPUSH
2625: PPUSH
2626: PPUSH
2627: PPUSH
2628: PPUSH
2629: PPUSH
2630: PPUSH
2631: PPUSH
2632: PPUSH
2633: PPUSH
2634: PPUSH
2635: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2636: LD_VAR 0 1
2640: NOT
2641: PUSH
2642: LD_VAR 0 1
2646: PPUSH
2647: CALL_OW 257
2651: PUSH
2652: LD_INT 9
2654: NONEQUAL
2655: OR
2656: IFFALSE 2660
// exit ;
2658: GO 3233
// side := GetSide ( unit ) ;
2660: LD_ADDR_VAR 0 9
2664: PUSH
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL_OW 255
2674: ST_TO_ADDR
// tech_space := tech_spacanom ;
2675: LD_ADDR_VAR 0 12
2679: PUSH
2680: LD_INT 29
2682: ST_TO_ADDR
// tech_time := tech_taurad ;
2683: LD_ADDR_VAR 0 13
2687: PUSH
2688: LD_INT 28
2690: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2691: LD_ADDR_VAR 0 11
2695: PUSH
2696: LD_VAR 0 1
2700: PPUSH
2701: CALL_OW 310
2705: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2706: LD_VAR 0 11
2710: PPUSH
2711: CALL_OW 247
2715: PUSH
2716: LD_INT 2
2718: EQUAL
2719: IFFALSE 2723
// exit ;
2721: GO 3233
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2723: LD_ADDR_VAR 0 8
2727: PUSH
2728: LD_INT 81
2730: PUSH
2731: LD_VAR 0 9
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: LD_INT 3
2742: PUSH
2743: LD_INT 21
2745: PUSH
2746: LD_INT 3
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PPUSH
2761: CALL_OW 69
2765: ST_TO_ADDR
// if not tmp then
2766: LD_VAR 0 8
2770: NOT
2771: IFFALSE 2775
// exit ;
2773: GO 3233
// if in_unit then
2775: LD_VAR 0 11
2779: IFFALSE 2803
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2781: LD_ADDR_VAR 0 10
2785: PUSH
2786: LD_VAR 0 8
2790: PPUSH
2791: LD_VAR 0 11
2795: PPUSH
2796: CALL_OW 74
2800: ST_TO_ADDR
2801: GO 2823
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2803: LD_ADDR_VAR 0 10
2807: PUSH
2808: LD_VAR 0 8
2812: PPUSH
2813: LD_VAR 0 1
2817: PPUSH
2818: CALL_OW 74
2822: ST_TO_ADDR
// if not enemy then
2823: LD_VAR 0 10
2827: NOT
2828: IFFALSE 2832
// exit ;
2830: GO 3233
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2832: LD_VAR 0 11
2836: PUSH
2837: LD_VAR 0 11
2841: PPUSH
2842: LD_VAR 0 10
2846: PPUSH
2847: CALL_OW 296
2851: PUSH
2852: LD_INT 13
2854: GREATER
2855: AND
2856: PUSH
2857: LD_VAR 0 1
2861: PPUSH
2862: LD_VAR 0 10
2866: PPUSH
2867: CALL_OW 296
2871: PUSH
2872: LD_INT 12
2874: GREATER
2875: OR
2876: IFFALSE 2880
// exit ;
2878: GO 3233
// missile := [ 1 ] ;
2880: LD_ADDR_VAR 0 14
2884: PUSH
2885: LD_INT 1
2887: PUSH
2888: EMPTY
2889: LIST
2890: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2891: LD_VAR 0 9
2895: PPUSH
2896: LD_VAR 0 12
2900: PPUSH
2901: CALL_OW 325
2905: IFFALSE 2934
// missile := Replace ( missile , missile + 1 , 2 ) ;
2907: LD_ADDR_VAR 0 14
2911: PUSH
2912: LD_VAR 0 14
2916: PPUSH
2917: LD_VAR 0 14
2921: PUSH
2922: LD_INT 1
2924: PLUS
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: CALL_OW 1
2933: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2934: LD_VAR 0 9
2938: PPUSH
2939: LD_VAR 0 13
2943: PPUSH
2944: CALL_OW 325
2948: PUSH
2949: LD_VAR 0 10
2953: PPUSH
2954: CALL_OW 255
2958: PPUSH
2959: LD_VAR 0 13
2963: PPUSH
2964: CALL_OW 325
2968: NOT
2969: AND
2970: IFFALSE 2999
// missile := Replace ( missile , missile + 1 , 3 ) ;
2972: LD_ADDR_VAR 0 14
2976: PUSH
2977: LD_VAR 0 14
2981: PPUSH
2982: LD_VAR 0 14
2986: PUSH
2987: LD_INT 1
2989: PLUS
2990: PPUSH
2991: LD_INT 3
2993: PPUSH
2994: CALL_OW 1
2998: ST_TO_ADDR
// if missile < 2 then
2999: LD_VAR 0 14
3003: PUSH
3004: LD_INT 2
3006: LESS
3007: IFFALSE 3011
// exit ;
3009: GO 3233
// x := GetX ( enemy ) ;
3011: LD_ADDR_VAR 0 4
3015: PUSH
3016: LD_VAR 0 10
3020: PPUSH
3021: CALL_OW 250
3025: ST_TO_ADDR
// y := GetY ( enemy ) ;
3026: LD_ADDR_VAR 0 5
3030: PUSH
3031: LD_VAR 0 10
3035: PPUSH
3036: CALL_OW 251
3040: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3041: LD_ADDR_VAR 0 6
3045: PUSH
3046: LD_VAR 0 4
3050: PUSH
3051: LD_INT 1
3053: NEG
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: CALL_OW 12
3062: PLUS
3063: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: LD_VAR 0 5
3073: PUSH
3074: LD_INT 1
3076: NEG
3077: PPUSH
3078: LD_INT 1
3080: PPUSH
3081: CALL_OW 12
3085: PLUS
3086: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3087: LD_VAR 0 6
3091: PPUSH
3092: LD_VAR 0 7
3096: PPUSH
3097: CALL_OW 488
3101: NOT
3102: IFFALSE 3124
// begin _x := x ;
3104: LD_ADDR_VAR 0 6
3108: PUSH
3109: LD_VAR 0 4
3113: ST_TO_ADDR
// _y := y ;
3114: LD_ADDR_VAR 0 7
3118: PUSH
3119: LD_VAR 0 5
3123: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3124: LD_ADDR_VAR 0 3
3128: PUSH
3129: LD_INT 1
3131: PPUSH
3132: LD_VAR 0 14
3136: PPUSH
3137: CALL_OW 12
3141: ST_TO_ADDR
// case i of 1 :
3142: LD_VAR 0 3
3146: PUSH
3147: LD_INT 1
3149: DOUBLE
3150: EQUAL
3151: IFTRUE 3155
3153: GO 3172
3155: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3156: LD_VAR 0 1
3160: PPUSH
3161: LD_VAR 0 10
3165: PPUSH
3166: CALL_OW 115
3170: GO 3233
3172: LD_INT 2
3174: DOUBLE
3175: EQUAL
3176: IFTRUE 3180
3178: GO 3202
3180: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3181: LD_VAR 0 1
3185: PPUSH
3186: LD_VAR 0 6
3190: PPUSH
3191: LD_VAR 0 7
3195: PPUSH
3196: CALL_OW 153
3200: GO 3233
3202: LD_INT 3
3204: DOUBLE
3205: EQUAL
3206: IFTRUE 3210
3208: GO 3232
3210: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3211: LD_VAR 0 1
3215: PPUSH
3216: LD_VAR 0 6
3220: PPUSH
3221: LD_VAR 0 7
3225: PPUSH
3226: CALL_OW 154
3230: GO 3233
3232: POP
// end ;
3233: LD_VAR 0 2
3237: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3238: LD_INT 0
3240: PPUSH
3241: PPUSH
3242: PPUSH
3243: PPUSH
3244: PPUSH
3245: PPUSH
// if not unit or not building then
3246: LD_VAR 0 1
3250: NOT
3251: PUSH
3252: LD_VAR 0 2
3256: NOT
3257: OR
3258: IFFALSE 3262
// exit ;
3260: GO 3420
// x := GetX ( building ) ;
3262: LD_ADDR_VAR 0 5
3266: PUSH
3267: LD_VAR 0 2
3271: PPUSH
3272: CALL_OW 250
3276: ST_TO_ADDR
// y := GetY ( building ) ;
3277: LD_ADDR_VAR 0 6
3281: PUSH
3282: LD_VAR 0 2
3286: PPUSH
3287: CALL_OW 251
3291: ST_TO_ADDR
// for i = 0 to 5 do
3292: LD_ADDR_VAR 0 4
3296: PUSH
3297: DOUBLE
3298: LD_INT 0
3300: DEC
3301: ST_TO_ADDR
3302: LD_INT 5
3304: PUSH
3305: FOR_TO
3306: IFFALSE 3418
// begin _x := ShiftX ( x , i , 3 ) ;
3308: LD_ADDR_VAR 0 7
3312: PUSH
3313: LD_VAR 0 5
3317: PPUSH
3318: LD_VAR 0 4
3322: PPUSH
3323: LD_INT 3
3325: PPUSH
3326: CALL_OW 272
3330: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3331: LD_ADDR_VAR 0 8
3335: PUSH
3336: LD_VAR 0 6
3340: PPUSH
3341: LD_VAR 0 4
3345: PPUSH
3346: LD_INT 3
3348: PPUSH
3349: CALL_OW 273
3353: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3354: LD_VAR 0 7
3358: PPUSH
3359: LD_VAR 0 8
3363: PPUSH
3364: CALL_OW 488
3368: NOT
3369: IFFALSE 3373
// continue ;
3371: GO 3305
// if HexInfo ( _x , _y ) = 0 then
3373: LD_VAR 0 7
3377: PPUSH
3378: LD_VAR 0 8
3382: PPUSH
3383: CALL_OW 428
3387: PUSH
3388: LD_INT 0
3390: EQUAL
3391: IFFALSE 3416
// begin ComMoveXY ( unit , _x , _y ) ;
3393: LD_VAR 0 1
3397: PPUSH
3398: LD_VAR 0 7
3402: PPUSH
3403: LD_VAR 0 8
3407: PPUSH
3408: CALL_OW 111
// exit ;
3412: POP
3413: POP
3414: GO 3420
// end ; end ;
3416: GO 3305
3418: POP
3419: POP
// end ;
3420: LD_VAR 0 3
3424: RET
// export function ScanBase ( side , base_area ) ; begin
3425: LD_INT 0
3427: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3428: LD_ADDR_VAR 0 3
3432: PUSH
3433: LD_VAR 0 2
3437: PPUSH
3438: LD_INT 81
3440: PUSH
3441: LD_VAR 0 1
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PPUSH
3450: CALL_OW 70
3454: ST_TO_ADDR
// end ;
3455: LD_VAR 0 3
3459: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3460: LD_INT 0
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
// result := false ;
3466: LD_ADDR_VAR 0 2
3470: PUSH
3471: LD_INT 0
3473: ST_TO_ADDR
// side := GetSide ( unit ) ;
3474: LD_ADDR_VAR 0 3
3478: PUSH
3479: LD_VAR 0 1
3483: PPUSH
3484: CALL_OW 255
3488: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3489: LD_ADDR_VAR 0 4
3493: PUSH
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL_OW 248
3503: ST_TO_ADDR
// case nat of 1 :
3504: LD_VAR 0 4
3508: PUSH
3509: LD_INT 1
3511: DOUBLE
3512: EQUAL
3513: IFTRUE 3517
3515: GO 3528
3517: POP
// tech := tech_lassight ; 2 :
3518: LD_ADDR_VAR 0 5
3522: PUSH
3523: LD_INT 12
3525: ST_TO_ADDR
3526: GO 3567
3528: LD_INT 2
3530: DOUBLE
3531: EQUAL
3532: IFTRUE 3536
3534: GO 3547
3536: POP
// tech := tech_mortar ; 3 :
3537: LD_ADDR_VAR 0 5
3541: PUSH
3542: LD_INT 41
3544: ST_TO_ADDR
3545: GO 3567
3547: LD_INT 3
3549: DOUBLE
3550: EQUAL
3551: IFTRUE 3555
3553: GO 3566
3555: POP
// tech := tech_bazooka ; end ;
3556: LD_ADDR_VAR 0 5
3560: PUSH
3561: LD_INT 44
3563: ST_TO_ADDR
3564: GO 3567
3566: POP
// if Researched ( side , tech ) then
3567: LD_VAR 0 3
3571: PPUSH
3572: LD_VAR 0 5
3576: PPUSH
3577: CALL_OW 325
3581: IFFALSE 3608
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3583: LD_ADDR_VAR 0 2
3587: PUSH
3588: LD_INT 5
3590: PUSH
3591: LD_INT 8
3593: PUSH
3594: LD_INT 9
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: PUSH
3602: LD_VAR 0 4
3606: ARRAY
3607: ST_TO_ADDR
// end ;
3608: LD_VAR 0 2
3612: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3613: LD_INT 0
3615: PPUSH
3616: PPUSH
3617: PPUSH
// if not mines then
3618: LD_VAR 0 2
3622: NOT
3623: IFFALSE 3627
// exit ;
3625: GO 3771
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3627: LD_ADDR_VAR 0 5
3631: PUSH
3632: LD_INT 81
3634: PUSH
3635: LD_VAR 0 1
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: LD_INT 3
3646: PUSH
3647: LD_INT 21
3649: PUSH
3650: LD_INT 3
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PPUSH
3665: CALL_OW 69
3669: ST_TO_ADDR
// for i in mines do
3670: LD_ADDR_VAR 0 4
3674: PUSH
3675: LD_VAR 0 2
3679: PUSH
3680: FOR_IN
3681: IFFALSE 3769
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3683: LD_VAR 0 4
3687: PUSH
3688: LD_INT 1
3690: ARRAY
3691: PPUSH
3692: LD_VAR 0 4
3696: PUSH
3697: LD_INT 2
3699: ARRAY
3700: PPUSH
3701: CALL_OW 458
3705: NOT
3706: IFFALSE 3710
// continue ;
3708: GO 3680
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3710: LD_VAR 0 4
3714: PUSH
3715: LD_INT 1
3717: ARRAY
3718: PPUSH
3719: LD_VAR 0 4
3723: PUSH
3724: LD_INT 2
3726: ARRAY
3727: PPUSH
3728: CALL_OW 428
3732: PUSH
3733: LD_VAR 0 5
3737: IN
3738: IFFALSE 3767
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3740: LD_VAR 0 4
3744: PUSH
3745: LD_INT 1
3747: ARRAY
3748: PPUSH
3749: LD_VAR 0 4
3753: PUSH
3754: LD_INT 2
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 1
3762: PPUSH
3763: CALL_OW 456
// end ;
3767: GO 3680
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 3
3775: RET
// export function Count ( array ) ; begin
3776: LD_INT 0
3778: PPUSH
// result := array + 0 ;
3779: LD_ADDR_VAR 0 2
3783: PUSH
3784: LD_VAR 0 1
3788: PUSH
3789: LD_INT 0
3791: PLUS
3792: ST_TO_ADDR
// end ;
3793: LD_VAR 0 2
3797: RET
// export function IsEmpty ( building ) ; begin
3798: LD_INT 0
3800: PPUSH
// if not building then
3801: LD_VAR 0 1
3805: NOT
3806: IFFALSE 3810
// exit ;
3808: GO 3853
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3810: LD_ADDR_VAR 0 2
3814: PUSH
3815: LD_VAR 0 1
3819: PUSH
3820: LD_INT 22
3822: PUSH
3823: LD_VAR 0 1
3827: PPUSH
3828: CALL_OW 255
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 58
3839: PUSH
3840: EMPTY
3841: LIST
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PPUSH
3847: CALL_OW 69
3851: IN
3852: ST_TO_ADDR
// end ;
3853: LD_VAR 0 2
3857: RET
// export function IsNotFull ( building ) ; var places ; begin
3858: LD_INT 0
3860: PPUSH
3861: PPUSH
// if not building then
3862: LD_VAR 0 1
3866: NOT
3867: IFFALSE 3871
// exit ;
3869: GO 3899
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3871: LD_ADDR_VAR 0 2
3875: PUSH
3876: LD_VAR 0 1
3880: PPUSH
3881: LD_INT 3
3883: PUSH
3884: LD_INT 62
3886: PUSH
3887: EMPTY
3888: LIST
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 72
3898: ST_TO_ADDR
// end ;
3899: LD_VAR 0 2
3903: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3904: LD_INT 0
3906: PPUSH
3907: PPUSH
3908: PPUSH
3909: PPUSH
// tmp := [ ] ;
3910: LD_ADDR_VAR 0 3
3914: PUSH
3915: EMPTY
3916: ST_TO_ADDR
// list := [ ] ;
3917: LD_ADDR_VAR 0 5
3921: PUSH
3922: EMPTY
3923: ST_TO_ADDR
// for i = 16 to 25 do
3924: LD_ADDR_VAR 0 4
3928: PUSH
3929: DOUBLE
3930: LD_INT 16
3932: DEC
3933: ST_TO_ADDR
3934: LD_INT 25
3936: PUSH
3937: FOR_TO
3938: IFFALSE 4011
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3940: LD_ADDR_VAR 0 3
3944: PUSH
3945: LD_VAR 0 3
3949: PUSH
3950: LD_INT 22
3952: PUSH
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 255
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: LD_INT 91
3969: PUSH
3970: LD_VAR 0 1
3974: PUSH
3975: LD_INT 6
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: PUSH
3983: LD_INT 30
3985: PUSH
3986: LD_VAR 0 4
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: LIST
3999: PUSH
4000: EMPTY
4001: LIST
4002: PPUSH
4003: CALL_OW 69
4007: ADD
4008: ST_TO_ADDR
4009: GO 3937
4011: POP
4012: POP
// for i = 1 to tmp do
4013: LD_ADDR_VAR 0 4
4017: PUSH
4018: DOUBLE
4019: LD_INT 1
4021: DEC
4022: ST_TO_ADDR
4023: LD_VAR 0 3
4027: PUSH
4028: FOR_TO
4029: IFFALSE 4117
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4031: LD_ADDR_VAR 0 5
4035: PUSH
4036: LD_VAR 0 5
4040: PUSH
4041: LD_VAR 0 3
4045: PUSH
4046: LD_VAR 0 4
4050: ARRAY
4051: PPUSH
4052: CALL_OW 266
4056: PUSH
4057: LD_VAR 0 3
4061: PUSH
4062: LD_VAR 0 4
4066: ARRAY
4067: PPUSH
4068: CALL_OW 250
4072: PUSH
4073: LD_VAR 0 3
4077: PUSH
4078: LD_VAR 0 4
4082: ARRAY
4083: PPUSH
4084: CALL_OW 251
4088: PUSH
4089: LD_VAR 0 3
4093: PUSH
4094: LD_VAR 0 4
4098: ARRAY
4099: PPUSH
4100: CALL_OW 254
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: PUSH
4111: EMPTY
4112: LIST
4113: ADD
4114: ST_TO_ADDR
4115: GO 4028
4117: POP
4118: POP
// result := list ;
4119: LD_ADDR_VAR 0 2
4123: PUSH
4124: LD_VAR 0 5
4128: ST_TO_ADDR
// end ;
4129: LD_VAR 0 2
4133: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4134: LD_INT 0
4136: PPUSH
4137: PPUSH
4138: PPUSH
4139: PPUSH
4140: PPUSH
4141: PPUSH
4142: PPUSH
// if not factory then
4143: LD_VAR 0 1
4147: NOT
4148: IFFALSE 4152
// exit ;
4150: GO 4745
// if control = control_apeman then
4152: LD_VAR 0 4
4156: PUSH
4157: LD_INT 5
4159: EQUAL
4160: IFFALSE 4269
// begin tmp := UnitsInside ( factory ) ;
4162: LD_ADDR_VAR 0 8
4166: PUSH
4167: LD_VAR 0 1
4171: PPUSH
4172: CALL_OW 313
4176: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4177: LD_VAR 0 8
4181: PPUSH
4182: LD_INT 25
4184: PUSH
4185: LD_INT 12
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PPUSH
4192: CALL_OW 72
4196: NOT
4197: IFFALSE 4207
// control := control_manual ;
4199: LD_ADDR_VAR 0 4
4203: PUSH
4204: LD_INT 1
4206: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4207: LD_ADDR_VAR 0 8
4211: PUSH
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL 3904 0 1
4221: ST_TO_ADDR
// if tmp then
4222: LD_VAR 0 8
4226: IFFALSE 4269
// begin for i in tmp do
4228: LD_ADDR_VAR 0 7
4232: PUSH
4233: LD_VAR 0 8
4237: PUSH
4238: FOR_IN
4239: IFFALSE 4267
// if i [ 1 ] = b_ext_radio then
4241: LD_VAR 0 7
4245: PUSH
4246: LD_INT 1
4248: ARRAY
4249: PUSH
4250: LD_INT 22
4252: EQUAL
4253: IFFALSE 4265
// begin control := control_remote ;
4255: LD_ADDR_VAR 0 4
4259: PUSH
4260: LD_INT 2
4262: ST_TO_ADDR
// break ;
4263: GO 4267
// end ;
4265: GO 4238
4267: POP
4268: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4269: LD_VAR 0 1
4273: PPUSH
4274: LD_VAR 0 2
4278: PPUSH
4279: LD_VAR 0 3
4283: PPUSH
4284: LD_VAR 0 4
4288: PPUSH
4289: LD_VAR 0 5
4293: PPUSH
4294: CALL_OW 448
4298: IFFALSE 4333
// begin result := [ chassis , engine , control , weapon ] ;
4300: LD_ADDR_VAR 0 6
4304: PUSH
4305: LD_VAR 0 2
4309: PUSH
4310: LD_VAR 0 3
4314: PUSH
4315: LD_VAR 0 4
4319: PUSH
4320: LD_VAR 0 5
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: ST_TO_ADDR
// exit ;
4331: GO 4745
// end ; _chassis := AvailableChassisList ( factory ) ;
4333: LD_ADDR_VAR 0 9
4337: PUSH
4338: LD_VAR 0 1
4342: PPUSH
4343: CALL_OW 475
4347: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4348: LD_ADDR_VAR 0 11
4352: PUSH
4353: LD_VAR 0 1
4357: PPUSH
4358: CALL_OW 476
4362: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4363: LD_ADDR_VAR 0 12
4367: PUSH
4368: LD_VAR 0 1
4372: PPUSH
4373: CALL_OW 477
4377: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4378: LD_ADDR_VAR 0 10
4382: PUSH
4383: LD_VAR 0 1
4387: PPUSH
4388: CALL_OW 478
4392: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4393: LD_VAR 0 9
4397: NOT
4398: PUSH
4399: LD_VAR 0 11
4403: NOT
4404: OR
4405: PUSH
4406: LD_VAR 0 12
4410: NOT
4411: OR
4412: PUSH
4413: LD_VAR 0 10
4417: NOT
4418: OR
4419: IFFALSE 4454
// begin result := [ chassis , engine , control , weapon ] ;
4421: LD_ADDR_VAR 0 6
4425: PUSH
4426: LD_VAR 0 2
4430: PUSH
4431: LD_VAR 0 3
4435: PUSH
4436: LD_VAR 0 4
4440: PUSH
4441: LD_VAR 0 5
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: ST_TO_ADDR
// exit ;
4452: GO 4745
// end ; if not chassis in _chassis then
4454: LD_VAR 0 2
4458: PUSH
4459: LD_VAR 0 9
4463: IN
4464: NOT
4465: IFFALSE 4491
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4467: LD_ADDR_VAR 0 2
4471: PUSH
4472: LD_VAR 0 9
4476: PUSH
4477: LD_INT 1
4479: PPUSH
4480: LD_VAR 0 9
4484: PPUSH
4485: CALL_OW 12
4489: ARRAY
4490: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4491: LD_VAR 0 2
4495: PPUSH
4496: LD_VAR 0 3
4500: PPUSH
4501: CALL 4750 0 2
4505: NOT
4506: IFFALSE 4565
// repeat engine := _engine [ 1 ] ;
4508: LD_ADDR_VAR 0 3
4512: PUSH
4513: LD_VAR 0 11
4517: PUSH
4518: LD_INT 1
4520: ARRAY
4521: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4522: LD_ADDR_VAR 0 11
4526: PUSH
4527: LD_VAR 0 11
4531: PPUSH
4532: LD_INT 1
4534: PPUSH
4535: CALL_OW 3
4539: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4540: LD_VAR 0 2
4544: PPUSH
4545: LD_VAR 0 3
4549: PPUSH
4550: CALL 4750 0 2
4554: PUSH
4555: LD_VAR 0 11
4559: PUSH
4560: EMPTY
4561: EQUAL
4562: OR
4563: IFFALSE 4508
// if not control in _control then
4565: LD_VAR 0 4
4569: PUSH
4570: LD_VAR 0 12
4574: IN
4575: NOT
4576: IFFALSE 4602
// control := _control [ rand ( 1 , _control ) ] ;
4578: LD_ADDR_VAR 0 4
4582: PUSH
4583: LD_VAR 0 12
4587: PUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_VAR 0 12
4595: PPUSH
4596: CALL_OW 12
4600: ARRAY
4601: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4602: LD_VAR 0 2
4606: PPUSH
4607: LD_VAR 0 5
4611: PPUSH
4612: CALL 4970 0 2
4616: NOT
4617: IFFALSE 4676
// repeat weapon := _weapon [ 1 ] ;
4619: LD_ADDR_VAR 0 5
4623: PUSH
4624: LD_VAR 0 10
4628: PUSH
4629: LD_INT 1
4631: ARRAY
4632: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4633: LD_ADDR_VAR 0 10
4637: PUSH
4638: LD_VAR 0 10
4642: PPUSH
4643: LD_INT 1
4645: PPUSH
4646: CALL_OW 3
4650: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4651: LD_VAR 0 2
4655: PPUSH
4656: LD_VAR 0 5
4660: PPUSH
4661: CALL 4970 0 2
4665: PUSH
4666: LD_VAR 0 10
4670: PUSH
4671: EMPTY
4672: EQUAL
4673: OR
4674: IFFALSE 4619
// result := [ ] ;
4676: LD_ADDR_VAR 0 6
4680: PUSH
4681: EMPTY
4682: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4683: LD_VAR 0 1
4687: PPUSH
4688: LD_VAR 0 2
4692: PPUSH
4693: LD_VAR 0 3
4697: PPUSH
4698: LD_VAR 0 4
4702: PPUSH
4703: LD_VAR 0 5
4707: PPUSH
4708: CALL_OW 448
4712: IFFALSE 4745
// result := [ chassis , engine , control , weapon ] ;
4714: LD_ADDR_VAR 0 6
4718: PUSH
4719: LD_VAR 0 2
4723: PUSH
4724: LD_VAR 0 3
4728: PUSH
4729: LD_VAR 0 4
4733: PUSH
4734: LD_VAR 0 5
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: ST_TO_ADDR
// end ;
4745: LD_VAR 0 6
4749: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4750: LD_INT 0
4752: PPUSH
// if not chassis or not engine then
4753: LD_VAR 0 1
4757: NOT
4758: PUSH
4759: LD_VAR 0 2
4763: NOT
4764: OR
4765: IFFALSE 4769
// exit ;
4767: GO 4965
// case engine of engine_solar :
4769: LD_VAR 0 2
4773: PUSH
4774: LD_INT 2
4776: DOUBLE
4777: EQUAL
4778: IFTRUE 4782
4780: GO 4820
4782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4783: LD_ADDR_VAR 0 3
4787: PUSH
4788: LD_INT 11
4790: PUSH
4791: LD_INT 12
4793: PUSH
4794: LD_INT 13
4796: PUSH
4797: LD_INT 14
4799: PUSH
4800: LD_INT 1
4802: PUSH
4803: LD_INT 2
4805: PUSH
4806: LD_INT 3
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: ST_TO_ADDR
4818: GO 4949
4820: LD_INT 1
4822: DOUBLE
4823: EQUAL
4824: IFTRUE 4828
4826: GO 4890
4828: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4829: LD_ADDR_VAR 0 3
4833: PUSH
4834: LD_INT 11
4836: PUSH
4837: LD_INT 12
4839: PUSH
4840: LD_INT 13
4842: PUSH
4843: LD_INT 14
4845: PUSH
4846: LD_INT 1
4848: PUSH
4849: LD_INT 2
4851: PUSH
4852: LD_INT 3
4854: PUSH
4855: LD_INT 4
4857: PUSH
4858: LD_INT 5
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 23
4866: PUSH
4867: LD_INT 22
4869: PUSH
4870: LD_INT 24
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: ST_TO_ADDR
4888: GO 4949
4890: LD_INT 3
4892: DOUBLE
4893: EQUAL
4894: IFTRUE 4898
4896: GO 4948
4898: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4899: LD_ADDR_VAR 0 3
4903: PUSH
4904: LD_INT 13
4906: PUSH
4907: LD_INT 14
4909: PUSH
4910: LD_INT 2
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: LD_INT 4
4918: PUSH
4919: LD_INT 5
4921: PUSH
4922: LD_INT 21
4924: PUSH
4925: LD_INT 22
4927: PUSH
4928: LD_INT 23
4930: PUSH
4931: LD_INT 24
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: ST_TO_ADDR
4946: GO 4949
4948: POP
// result := ( chassis in result ) ;
4949: LD_ADDR_VAR 0 3
4953: PUSH
4954: LD_VAR 0 1
4958: PUSH
4959: LD_VAR 0 3
4963: IN
4964: ST_TO_ADDR
// end ;
4965: LD_VAR 0 3
4969: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4970: LD_INT 0
4972: PPUSH
// if not chassis or not weapon then
4973: LD_VAR 0 1
4977: NOT
4978: PUSH
4979: LD_VAR 0 2
4983: NOT
4984: OR
4985: IFFALSE 4989
// exit ;
4987: GO 6049
// case weapon of us_machine_gun :
4989: LD_VAR 0 2
4993: PUSH
4994: LD_INT 2
4996: DOUBLE
4997: EQUAL
4998: IFTRUE 5002
5000: GO 5032
5002: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5003: LD_ADDR_VAR 0 3
5007: PUSH
5008: LD_INT 1
5010: PUSH
5011: LD_INT 2
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: LD_INT 4
5019: PUSH
5020: LD_INT 5
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: ST_TO_ADDR
5030: GO 6033
5032: LD_INT 3
5034: DOUBLE
5035: EQUAL
5036: IFTRUE 5040
5038: GO 5070
5040: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5041: LD_ADDR_VAR 0 3
5045: PUSH
5046: LD_INT 1
5048: PUSH
5049: LD_INT 2
5051: PUSH
5052: LD_INT 3
5054: PUSH
5055: LD_INT 4
5057: PUSH
5058: LD_INT 5
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: ST_TO_ADDR
5068: GO 6033
5070: LD_INT 11
5072: DOUBLE
5073: EQUAL
5074: IFTRUE 5078
5076: GO 5108
5078: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5079: LD_ADDR_VAR 0 3
5083: PUSH
5084: LD_INT 1
5086: PUSH
5087: LD_INT 2
5089: PUSH
5090: LD_INT 3
5092: PUSH
5093: LD_INT 4
5095: PUSH
5096: LD_INT 5
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: ST_TO_ADDR
5106: GO 6033
5108: LD_INT 4
5110: DOUBLE
5111: EQUAL
5112: IFTRUE 5116
5114: GO 5142
5116: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5117: LD_ADDR_VAR 0 3
5121: PUSH
5122: LD_INT 2
5124: PUSH
5125: LD_INT 3
5127: PUSH
5128: LD_INT 4
5130: PUSH
5131: LD_INT 5
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: ST_TO_ADDR
5140: GO 6033
5142: LD_INT 5
5144: DOUBLE
5145: EQUAL
5146: IFTRUE 5150
5148: GO 5176
5150: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5151: LD_ADDR_VAR 0 3
5155: PUSH
5156: LD_INT 2
5158: PUSH
5159: LD_INT 3
5161: PUSH
5162: LD_INT 4
5164: PUSH
5165: LD_INT 5
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: ST_TO_ADDR
5174: GO 6033
5176: LD_INT 9
5178: DOUBLE
5179: EQUAL
5180: IFTRUE 5184
5182: GO 5210
5184: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5185: LD_ADDR_VAR 0 3
5189: PUSH
5190: LD_INT 2
5192: PUSH
5193: LD_INT 3
5195: PUSH
5196: LD_INT 4
5198: PUSH
5199: LD_INT 5
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: ST_TO_ADDR
5208: GO 6033
5210: LD_INT 7
5212: DOUBLE
5213: EQUAL
5214: IFTRUE 5218
5216: GO 5244
5218: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5219: LD_ADDR_VAR 0 3
5223: PUSH
5224: LD_INT 2
5226: PUSH
5227: LD_INT 3
5229: PUSH
5230: LD_INT 4
5232: PUSH
5233: LD_INT 5
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: ST_TO_ADDR
5242: GO 6033
5244: LD_INT 12
5246: DOUBLE
5247: EQUAL
5248: IFTRUE 5252
5250: GO 5278
5252: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5253: LD_ADDR_VAR 0 3
5257: PUSH
5258: LD_INT 2
5260: PUSH
5261: LD_INT 3
5263: PUSH
5264: LD_INT 4
5266: PUSH
5267: LD_INT 5
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: ST_TO_ADDR
5276: GO 6033
5278: LD_INT 13
5280: DOUBLE
5281: EQUAL
5282: IFTRUE 5286
5284: GO 5312
5286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5287: LD_ADDR_VAR 0 3
5291: PUSH
5292: LD_INT 2
5294: PUSH
5295: LD_INT 3
5297: PUSH
5298: LD_INT 4
5300: PUSH
5301: LD_INT 5
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: ST_TO_ADDR
5310: GO 6033
5312: LD_INT 14
5314: DOUBLE
5315: EQUAL
5316: IFTRUE 5320
5318: GO 5338
5320: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5321: LD_ADDR_VAR 0 3
5325: PUSH
5326: LD_INT 4
5328: PUSH
5329: LD_INT 5
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: ST_TO_ADDR
5336: GO 6033
5338: LD_INT 6
5340: DOUBLE
5341: EQUAL
5342: IFTRUE 5346
5344: GO 5364
5346: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5347: LD_ADDR_VAR 0 3
5351: PUSH
5352: LD_INT 4
5354: PUSH
5355: LD_INT 5
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: ST_TO_ADDR
5362: GO 6033
5364: LD_INT 10
5366: DOUBLE
5367: EQUAL
5368: IFTRUE 5372
5370: GO 5390
5372: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5373: LD_ADDR_VAR 0 3
5377: PUSH
5378: LD_INT 4
5380: PUSH
5381: LD_INT 5
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: ST_TO_ADDR
5388: GO 6033
5390: LD_INT 22
5392: DOUBLE
5393: EQUAL
5394: IFTRUE 5398
5396: GO 5424
5398: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5399: LD_ADDR_VAR 0 3
5403: PUSH
5404: LD_INT 11
5406: PUSH
5407: LD_INT 12
5409: PUSH
5410: LD_INT 13
5412: PUSH
5413: LD_INT 14
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: ST_TO_ADDR
5422: GO 6033
5424: LD_INT 23
5426: DOUBLE
5427: EQUAL
5428: IFTRUE 5432
5430: GO 5458
5432: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5433: LD_ADDR_VAR 0 3
5437: PUSH
5438: LD_INT 11
5440: PUSH
5441: LD_INT 12
5443: PUSH
5444: LD_INT 13
5446: PUSH
5447: LD_INT 14
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: ST_TO_ADDR
5456: GO 6033
5458: LD_INT 24
5460: DOUBLE
5461: EQUAL
5462: IFTRUE 5466
5464: GO 5492
5466: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5467: LD_ADDR_VAR 0 3
5471: PUSH
5472: LD_INT 11
5474: PUSH
5475: LD_INT 12
5477: PUSH
5478: LD_INT 13
5480: PUSH
5481: LD_INT 14
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: ST_TO_ADDR
5490: GO 6033
5492: LD_INT 30
5494: DOUBLE
5495: EQUAL
5496: IFTRUE 5500
5498: GO 5526
5500: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5501: LD_ADDR_VAR 0 3
5505: PUSH
5506: LD_INT 11
5508: PUSH
5509: LD_INT 12
5511: PUSH
5512: LD_INT 13
5514: PUSH
5515: LD_INT 14
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: ST_TO_ADDR
5524: GO 6033
5526: LD_INT 25
5528: DOUBLE
5529: EQUAL
5530: IFTRUE 5534
5532: GO 5552
5534: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5535: LD_ADDR_VAR 0 3
5539: PUSH
5540: LD_INT 13
5542: PUSH
5543: LD_INT 14
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: ST_TO_ADDR
5550: GO 6033
5552: LD_INT 27
5554: DOUBLE
5555: EQUAL
5556: IFTRUE 5560
5558: GO 5578
5560: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5561: LD_ADDR_VAR 0 3
5565: PUSH
5566: LD_INT 13
5568: PUSH
5569: LD_INT 14
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: ST_TO_ADDR
5576: GO 6033
5578: LD_INT 92
5580: DOUBLE
5581: EQUAL
5582: IFTRUE 5586
5584: GO 5612
5586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5587: LD_ADDR_VAR 0 3
5591: PUSH
5592: LD_INT 11
5594: PUSH
5595: LD_INT 12
5597: PUSH
5598: LD_INT 13
5600: PUSH
5601: LD_INT 14
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: ST_TO_ADDR
5610: GO 6033
5612: LD_INT 28
5614: DOUBLE
5615: EQUAL
5616: IFTRUE 5620
5618: GO 5638
5620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5621: LD_ADDR_VAR 0 3
5625: PUSH
5626: LD_INT 13
5628: PUSH
5629: LD_INT 14
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: ST_TO_ADDR
5636: GO 6033
5638: LD_INT 29
5640: DOUBLE
5641: EQUAL
5642: IFTRUE 5646
5644: GO 5664
5646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5647: LD_ADDR_VAR 0 3
5651: PUSH
5652: LD_INT 13
5654: PUSH
5655: LD_INT 14
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: ST_TO_ADDR
5662: GO 6033
5664: LD_INT 31
5666: DOUBLE
5667: EQUAL
5668: IFTRUE 5672
5670: GO 5690
5672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5673: LD_ADDR_VAR 0 3
5677: PUSH
5678: LD_INT 13
5680: PUSH
5681: LD_INT 14
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: ST_TO_ADDR
5688: GO 6033
5690: LD_INT 26
5692: DOUBLE
5693: EQUAL
5694: IFTRUE 5698
5696: GO 5716
5698: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5699: LD_ADDR_VAR 0 3
5703: PUSH
5704: LD_INT 13
5706: PUSH
5707: LD_INT 14
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: ST_TO_ADDR
5714: GO 6033
5716: LD_INT 42
5718: DOUBLE
5719: EQUAL
5720: IFTRUE 5724
5722: GO 5750
5724: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5725: LD_ADDR_VAR 0 3
5729: PUSH
5730: LD_INT 21
5732: PUSH
5733: LD_INT 22
5735: PUSH
5736: LD_INT 23
5738: PUSH
5739: LD_INT 24
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: ST_TO_ADDR
5748: GO 6033
5750: LD_INT 43
5752: DOUBLE
5753: EQUAL
5754: IFTRUE 5758
5756: GO 5784
5758: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5759: LD_ADDR_VAR 0 3
5763: PUSH
5764: LD_INT 21
5766: PUSH
5767: LD_INT 22
5769: PUSH
5770: LD_INT 23
5772: PUSH
5773: LD_INT 24
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: ST_TO_ADDR
5782: GO 6033
5784: LD_INT 44
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5792
5790: GO 5818
5792: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5793: LD_ADDR_VAR 0 3
5797: PUSH
5798: LD_INT 21
5800: PUSH
5801: LD_INT 22
5803: PUSH
5804: LD_INT 23
5806: PUSH
5807: LD_INT 24
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: ST_TO_ADDR
5816: GO 6033
5818: LD_INT 45
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5826
5824: GO 5852
5826: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5827: LD_ADDR_VAR 0 3
5831: PUSH
5832: LD_INT 21
5834: PUSH
5835: LD_INT 22
5837: PUSH
5838: LD_INT 23
5840: PUSH
5841: LD_INT 24
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: ST_TO_ADDR
5850: GO 6033
5852: LD_INT 49
5854: DOUBLE
5855: EQUAL
5856: IFTRUE 5860
5858: GO 5886
5860: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5861: LD_ADDR_VAR 0 3
5865: PUSH
5866: LD_INT 21
5868: PUSH
5869: LD_INT 22
5871: PUSH
5872: LD_INT 23
5874: PUSH
5875: LD_INT 24
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: ST_TO_ADDR
5884: GO 6033
5886: LD_INT 51
5888: DOUBLE
5889: EQUAL
5890: IFTRUE 5894
5892: GO 5920
5894: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5895: LD_ADDR_VAR 0 3
5899: PUSH
5900: LD_INT 21
5902: PUSH
5903: LD_INT 22
5905: PUSH
5906: LD_INT 23
5908: PUSH
5909: LD_INT 24
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: ST_TO_ADDR
5918: GO 6033
5920: LD_INT 52
5922: DOUBLE
5923: EQUAL
5924: IFTRUE 5928
5926: GO 5954
5928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5929: LD_ADDR_VAR 0 3
5933: PUSH
5934: LD_INT 21
5936: PUSH
5937: LD_INT 22
5939: PUSH
5940: LD_INT 23
5942: PUSH
5943: LD_INT 24
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: ST_TO_ADDR
5952: GO 6033
5954: LD_INT 53
5956: DOUBLE
5957: EQUAL
5958: IFTRUE 5962
5960: GO 5980
5962: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 23
5970: PUSH
5971: LD_INT 24
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: ST_TO_ADDR
5978: GO 6033
5980: LD_INT 46
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 6006
5988: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5989: LD_ADDR_VAR 0 3
5993: PUSH
5994: LD_INT 23
5996: PUSH
5997: LD_INT 24
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: ST_TO_ADDR
6004: GO 6033
6006: LD_INT 47
6008: DOUBLE
6009: EQUAL
6010: IFTRUE 6014
6012: GO 6032
6014: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6015: LD_ADDR_VAR 0 3
6019: PUSH
6020: LD_INT 23
6022: PUSH
6023: LD_INT 24
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: ST_TO_ADDR
6030: GO 6033
6032: POP
// result := ( chassis in result ) ;
6033: LD_ADDR_VAR 0 3
6037: PUSH
6038: LD_VAR 0 1
6042: PUSH
6043: LD_VAR 0 3
6047: IN
6048: ST_TO_ADDR
// end ;
6049: LD_VAR 0 3
6053: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6054: LD_INT 0
6056: PPUSH
6057: PPUSH
6058: PPUSH
6059: PPUSH
6060: PPUSH
6061: PPUSH
6062: PPUSH
// result := array ;
6063: LD_ADDR_VAR 0 5
6067: PUSH
6068: LD_VAR 0 1
6072: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6073: LD_VAR 0 1
6077: NOT
6078: PUSH
6079: LD_VAR 0 2
6083: NOT
6084: OR
6085: PUSH
6086: LD_VAR 0 3
6090: NOT
6091: OR
6092: PUSH
6093: LD_VAR 0 2
6097: PUSH
6098: LD_VAR 0 1
6102: GREATER
6103: OR
6104: PUSH
6105: LD_VAR 0 3
6109: PUSH
6110: LD_VAR 0 1
6114: GREATER
6115: OR
6116: IFFALSE 6120
// exit ;
6118: GO 6416
// if direction then
6120: LD_VAR 0 4
6124: IFFALSE 6188
// begin d := 1 ;
6126: LD_ADDR_VAR 0 9
6130: PUSH
6131: LD_INT 1
6133: ST_TO_ADDR
// if i_from > i_to then
6134: LD_VAR 0 2
6138: PUSH
6139: LD_VAR 0 3
6143: GREATER
6144: IFFALSE 6170
// length := ( array - i_from ) + i_to else
6146: LD_ADDR_VAR 0 11
6150: PUSH
6151: LD_VAR 0 1
6155: PUSH
6156: LD_VAR 0 2
6160: MINUS
6161: PUSH
6162: LD_VAR 0 3
6166: PLUS
6167: ST_TO_ADDR
6168: GO 6186
// length := i_to - i_from ;
6170: LD_ADDR_VAR 0 11
6174: PUSH
6175: LD_VAR 0 3
6179: PUSH
6180: LD_VAR 0 2
6184: MINUS
6185: ST_TO_ADDR
// end else
6186: GO 6249
// begin d := - 1 ;
6188: LD_ADDR_VAR 0 9
6192: PUSH
6193: LD_INT 1
6195: NEG
6196: ST_TO_ADDR
// if i_from > i_to then
6197: LD_VAR 0 2
6201: PUSH
6202: LD_VAR 0 3
6206: GREATER
6207: IFFALSE 6227
// length := i_from - i_to else
6209: LD_ADDR_VAR 0 11
6213: PUSH
6214: LD_VAR 0 2
6218: PUSH
6219: LD_VAR 0 3
6223: MINUS
6224: ST_TO_ADDR
6225: GO 6249
// length := ( array - i_to ) + i_from ;
6227: LD_ADDR_VAR 0 11
6231: PUSH
6232: LD_VAR 0 1
6236: PUSH
6237: LD_VAR 0 3
6241: MINUS
6242: PUSH
6243: LD_VAR 0 2
6247: PLUS
6248: ST_TO_ADDR
// end ; if not length then
6249: LD_VAR 0 11
6253: NOT
6254: IFFALSE 6258
// exit ;
6256: GO 6416
// tmp := array ;
6258: LD_ADDR_VAR 0 10
6262: PUSH
6263: LD_VAR 0 1
6267: ST_TO_ADDR
// for i = 1 to length do
6268: LD_ADDR_VAR 0 6
6272: PUSH
6273: DOUBLE
6274: LD_INT 1
6276: DEC
6277: ST_TO_ADDR
6278: LD_VAR 0 11
6282: PUSH
6283: FOR_TO
6284: IFFALSE 6404
// begin for j = 1 to array do
6286: LD_ADDR_VAR 0 7
6290: PUSH
6291: DOUBLE
6292: LD_INT 1
6294: DEC
6295: ST_TO_ADDR
6296: LD_VAR 0 1
6300: PUSH
6301: FOR_TO
6302: IFFALSE 6390
// begin k := j + d ;
6304: LD_ADDR_VAR 0 8
6308: PUSH
6309: LD_VAR 0 7
6313: PUSH
6314: LD_VAR 0 9
6318: PLUS
6319: ST_TO_ADDR
// if k > array then
6320: LD_VAR 0 8
6324: PUSH
6325: LD_VAR 0 1
6329: GREATER
6330: IFFALSE 6340
// k := 1 ;
6332: LD_ADDR_VAR 0 8
6336: PUSH
6337: LD_INT 1
6339: ST_TO_ADDR
// if not k then
6340: LD_VAR 0 8
6344: NOT
6345: IFFALSE 6357
// k := array ;
6347: LD_ADDR_VAR 0 8
6351: PUSH
6352: LD_VAR 0 1
6356: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6357: LD_ADDR_VAR 0 10
6361: PUSH
6362: LD_VAR 0 10
6366: PPUSH
6367: LD_VAR 0 8
6371: PPUSH
6372: LD_VAR 0 1
6376: PUSH
6377: LD_VAR 0 7
6381: ARRAY
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// end ;
6388: GO 6301
6390: POP
6391: POP
// array := tmp ;
6392: LD_ADDR_VAR 0 1
6396: PUSH
6397: LD_VAR 0 10
6401: ST_TO_ADDR
// end ;
6402: GO 6283
6404: POP
6405: POP
// result := array ;
6406: LD_ADDR_VAR 0 5
6410: PUSH
6411: LD_VAR 0 1
6415: ST_TO_ADDR
// end ;
6416: LD_VAR 0 5
6420: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6421: LD_INT 0
6423: PPUSH
6424: PPUSH
// result := 0 ;
6425: LD_ADDR_VAR 0 3
6429: PUSH
6430: LD_INT 0
6432: ST_TO_ADDR
// if not array or not value in array then
6433: LD_VAR 0 1
6437: NOT
6438: PUSH
6439: LD_VAR 0 2
6443: PUSH
6444: LD_VAR 0 1
6448: IN
6449: NOT
6450: OR
6451: IFFALSE 6455
// exit ;
6453: GO 6509
// for i = 1 to array do
6455: LD_ADDR_VAR 0 4
6459: PUSH
6460: DOUBLE
6461: LD_INT 1
6463: DEC
6464: ST_TO_ADDR
6465: LD_VAR 0 1
6469: PUSH
6470: FOR_TO
6471: IFFALSE 6507
// if value = array [ i ] then
6473: LD_VAR 0 2
6477: PUSH
6478: LD_VAR 0 1
6482: PUSH
6483: LD_VAR 0 4
6487: ARRAY
6488: EQUAL
6489: IFFALSE 6505
// begin result := i ;
6491: LD_ADDR_VAR 0 3
6495: PUSH
6496: LD_VAR 0 4
6500: ST_TO_ADDR
// exit ;
6501: POP
6502: POP
6503: GO 6509
// end ;
6505: GO 6470
6507: POP
6508: POP
// end ;
6509: LD_VAR 0 3
6513: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6514: LD_INT 0
6516: PPUSH
// vc_chassis := chassis ;
6517: LD_ADDR_OWVAR 37
6521: PUSH
6522: LD_VAR 0 1
6526: ST_TO_ADDR
// vc_engine := engine ;
6527: LD_ADDR_OWVAR 39
6531: PUSH
6532: LD_VAR 0 2
6536: ST_TO_ADDR
// vc_control := control ;
6537: LD_ADDR_OWVAR 38
6541: PUSH
6542: LD_VAR 0 3
6546: ST_TO_ADDR
// vc_weapon := weapon ;
6547: LD_ADDR_OWVAR 40
6551: PUSH
6552: LD_VAR 0 4
6556: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6557: LD_ADDR_OWVAR 41
6561: PUSH
6562: LD_VAR 0 5
6566: ST_TO_ADDR
// end ;
6567: LD_VAR 0 6
6571: RET
// export function WantPlant ( unit ) ; var task ; begin
6572: LD_INT 0
6574: PPUSH
6575: PPUSH
// result := false ;
6576: LD_ADDR_VAR 0 2
6580: PUSH
6581: LD_INT 0
6583: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6584: LD_ADDR_VAR 0 3
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL_OW 437
6598: ST_TO_ADDR
// if task then
6599: LD_VAR 0 3
6603: IFFALSE 6631
// if task [ 1 ] [ 1 ] = p then
6605: LD_VAR 0 3
6609: PUSH
6610: LD_INT 1
6612: ARRAY
6613: PUSH
6614: LD_INT 1
6616: ARRAY
6617: PUSH
6618: LD_STRING p
6620: EQUAL
6621: IFFALSE 6631
// result := true ;
6623: LD_ADDR_VAR 0 2
6627: PUSH
6628: LD_INT 1
6630: ST_TO_ADDR
// end ;
6631: LD_VAR 0 2
6635: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6636: LD_INT 0
6638: PPUSH
6639: PPUSH
6640: PPUSH
6641: PPUSH
// if pos < 1 then
6642: LD_VAR 0 2
6646: PUSH
6647: LD_INT 1
6649: LESS
6650: IFFALSE 6654
// exit ;
6652: GO 6957
// if pos = 1 then
6654: LD_VAR 0 2
6658: PUSH
6659: LD_INT 1
6661: EQUAL
6662: IFFALSE 6695
// result := Replace ( arr , pos [ 1 ] , value ) else
6664: LD_ADDR_VAR 0 4
6668: PUSH
6669: LD_VAR 0 1
6673: PPUSH
6674: LD_VAR 0 2
6678: PUSH
6679: LD_INT 1
6681: ARRAY
6682: PPUSH
6683: LD_VAR 0 3
6687: PPUSH
6688: CALL_OW 1
6692: ST_TO_ADDR
6693: GO 6957
// begin tmp := arr ;
6695: LD_ADDR_VAR 0 6
6699: PUSH
6700: LD_VAR 0 1
6704: ST_TO_ADDR
// s_arr := [ tmp ] ;
6705: LD_ADDR_VAR 0 7
6709: PUSH
6710: LD_VAR 0 6
6714: PUSH
6715: EMPTY
6716: LIST
6717: ST_TO_ADDR
// for i = 1 to pos - 1 do
6718: LD_ADDR_VAR 0 5
6722: PUSH
6723: DOUBLE
6724: LD_INT 1
6726: DEC
6727: ST_TO_ADDR
6728: LD_VAR 0 2
6732: PUSH
6733: LD_INT 1
6735: MINUS
6736: PUSH
6737: FOR_TO
6738: IFFALSE 6783
// begin tmp := tmp [ pos [ i ] ] ;
6740: LD_ADDR_VAR 0 6
6744: PUSH
6745: LD_VAR 0 6
6749: PUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 5
6759: ARRAY
6760: ARRAY
6761: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6762: LD_ADDR_VAR 0 7
6766: PUSH
6767: LD_VAR 0 7
6771: PUSH
6772: LD_VAR 0 6
6776: PUSH
6777: EMPTY
6778: LIST
6779: ADD
6780: ST_TO_ADDR
// end ;
6781: GO 6737
6783: POP
6784: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6785: LD_ADDR_VAR 0 6
6789: PUSH
6790: LD_VAR 0 6
6794: PPUSH
6795: LD_VAR 0 2
6799: PUSH
6800: LD_VAR 0 2
6804: ARRAY
6805: PPUSH
6806: LD_VAR 0 3
6810: PPUSH
6811: CALL_OW 1
6815: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6816: LD_ADDR_VAR 0 7
6820: PUSH
6821: LD_VAR 0 7
6825: PPUSH
6826: LD_VAR 0 7
6830: PPUSH
6831: LD_VAR 0 6
6835: PPUSH
6836: CALL_OW 1
6840: ST_TO_ADDR
// for i = s_arr downto 2 do
6841: LD_ADDR_VAR 0 5
6845: PUSH
6846: DOUBLE
6847: LD_VAR 0 7
6851: INC
6852: ST_TO_ADDR
6853: LD_INT 2
6855: PUSH
6856: FOR_DOWNTO
6857: IFFALSE 6941
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6859: LD_ADDR_VAR 0 6
6863: PUSH
6864: LD_VAR 0 7
6868: PUSH
6869: LD_VAR 0 5
6873: PUSH
6874: LD_INT 1
6876: MINUS
6877: ARRAY
6878: PPUSH
6879: LD_VAR 0 2
6883: PUSH
6884: LD_VAR 0 5
6888: PUSH
6889: LD_INT 1
6891: MINUS
6892: ARRAY
6893: PPUSH
6894: LD_VAR 0 7
6898: PUSH
6899: LD_VAR 0 5
6903: ARRAY
6904: PPUSH
6905: CALL_OW 1
6909: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6910: LD_ADDR_VAR 0 7
6914: PUSH
6915: LD_VAR 0 7
6919: PPUSH
6920: LD_VAR 0 5
6924: PUSH
6925: LD_INT 1
6927: MINUS
6928: PPUSH
6929: LD_VAR 0 6
6933: PPUSH
6934: CALL_OW 1
6938: ST_TO_ADDR
// end ;
6939: GO 6856
6941: POP
6942: POP
// result := s_arr [ 1 ] ;
6943: LD_ADDR_VAR 0 4
6947: PUSH
6948: LD_VAR 0 7
6952: PUSH
6953: LD_INT 1
6955: ARRAY
6956: ST_TO_ADDR
// end ; end ;
6957: LD_VAR 0 4
6961: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6962: LD_INT 0
6964: PPUSH
6965: PPUSH
// if not list then
6966: LD_VAR 0 1
6970: NOT
6971: IFFALSE 6975
// exit ;
6973: GO 7066
// i := list [ pos1 ] ;
6975: LD_ADDR_VAR 0 5
6979: PUSH
6980: LD_VAR 0 1
6984: PUSH
6985: LD_VAR 0 2
6989: ARRAY
6990: ST_TO_ADDR
// if not i then
6991: LD_VAR 0 5
6995: NOT
6996: IFFALSE 7000
// exit ;
6998: GO 7066
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7000: LD_ADDR_VAR 0 1
7004: PUSH
7005: LD_VAR 0 1
7009: PPUSH
7010: LD_VAR 0 2
7014: PPUSH
7015: LD_VAR 0 1
7019: PUSH
7020: LD_VAR 0 3
7024: ARRAY
7025: PPUSH
7026: CALL_OW 1
7030: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7031: LD_ADDR_VAR 0 1
7035: PUSH
7036: LD_VAR 0 1
7040: PPUSH
7041: LD_VAR 0 3
7045: PPUSH
7046: LD_VAR 0 5
7050: PPUSH
7051: CALL_OW 1
7055: ST_TO_ADDR
// result := list ;
7056: LD_ADDR_VAR 0 4
7060: PUSH
7061: LD_VAR 0 1
7065: ST_TO_ADDR
// end ;
7066: LD_VAR 0 4
7070: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7071: LD_INT 0
7073: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7074: LD_ADDR_VAR 0 5
7078: PUSH
7079: LD_VAR 0 1
7083: PPUSH
7084: CALL_OW 250
7088: PPUSH
7089: LD_VAR 0 1
7093: PPUSH
7094: CALL_OW 251
7098: PPUSH
7099: LD_VAR 0 2
7103: PPUSH
7104: LD_VAR 0 3
7108: PPUSH
7109: LD_VAR 0 4
7113: PPUSH
7114: CALL 7492 0 5
7118: ST_TO_ADDR
// end ;
7119: LD_VAR 0 5
7123: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7124: LD_INT 0
7126: PPUSH
7127: PPUSH
7128: PPUSH
7129: PPUSH
// if not list or not unit then
7130: LD_VAR 0 2
7134: NOT
7135: PUSH
7136: LD_VAR 0 1
7140: NOT
7141: OR
7142: IFFALSE 7146
// exit ;
7144: GO 7487
// result := [ ] ;
7146: LD_ADDR_VAR 0 5
7150: PUSH
7151: EMPTY
7152: ST_TO_ADDR
// for i in list do
7153: LD_ADDR_VAR 0 6
7157: PUSH
7158: LD_VAR 0 2
7162: PUSH
7163: FOR_IN
7164: IFFALSE 7382
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7166: LD_ADDR_VAR 0 8
7170: PUSH
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_VAR 0 6
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_VAR 0 6
7189: PUSH
7190: LD_INT 2
7192: ARRAY
7193: PPUSH
7194: CALL_OW 297
7198: ST_TO_ADDR
// if not Count ( result ) then
7199: LD_VAR 0 5
7203: PPUSH
7204: CALL 3776 0 1
7208: NOT
7209: IFFALSE 7242
// begin result := Join ( result , [ i , tmp ] ) ;
7211: LD_ADDR_VAR 0 5
7215: PUSH
7216: LD_VAR 0 5
7220: PPUSH
7221: LD_VAR 0 6
7225: PUSH
7226: LD_VAR 0 8
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PPUSH
7235: CALL 39385 0 2
7239: ST_TO_ADDR
// continue ;
7240: GO 7163
// end ; if result [ result ] [ 2 ] <= tmp then
7242: LD_VAR 0 5
7246: PUSH
7247: LD_VAR 0 5
7251: ARRAY
7252: PUSH
7253: LD_INT 2
7255: ARRAY
7256: PUSH
7257: LD_VAR 0 8
7261: LESSEQUAL
7262: IFFALSE 7295
// result := Join ( result , [ i , tmp ] ) else
7264: LD_ADDR_VAR 0 5
7268: PUSH
7269: LD_VAR 0 5
7273: PPUSH
7274: LD_VAR 0 6
7278: PUSH
7279: LD_VAR 0 8
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL 39385 0 2
7292: ST_TO_ADDR
7293: GO 7380
// begin for j := 1 to Count ( result ) do
7295: LD_ADDR_VAR 0 7
7299: PUSH
7300: DOUBLE
7301: LD_INT 1
7303: DEC
7304: ST_TO_ADDR
7305: LD_VAR 0 5
7309: PPUSH
7310: CALL 3776 0 1
7314: PUSH
7315: FOR_TO
7316: IFFALSE 7378
// begin if tmp < result [ j ] [ 2 ] then
7318: LD_VAR 0 8
7322: PUSH
7323: LD_VAR 0 5
7327: PUSH
7328: LD_VAR 0 7
7332: ARRAY
7333: PUSH
7334: LD_INT 2
7336: ARRAY
7337: LESS
7338: IFFALSE 7376
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_VAR 0 5
7349: PPUSH
7350: LD_VAR 0 7
7354: PPUSH
7355: LD_VAR 0 6
7359: PUSH
7360: LD_VAR 0 8
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PPUSH
7369: CALL_OW 2
7373: ST_TO_ADDR
// break ;
7374: GO 7378
// end ; end ;
7376: GO 7315
7378: POP
7379: POP
// end ; end ;
7380: GO 7163
7382: POP
7383: POP
// if result and not asc then
7384: LD_VAR 0 5
7388: PUSH
7389: LD_VAR 0 3
7393: NOT
7394: AND
7395: IFFALSE 7412
// result := ReverseArray ( result ) ;
7397: LD_ADDR_VAR 0 5
7401: PUSH
7402: LD_VAR 0 5
7406: PPUSH
7407: CALL 34652 0 1
7411: ST_TO_ADDR
// tmp := [ ] ;
7412: LD_ADDR_VAR 0 8
7416: PUSH
7417: EMPTY
7418: ST_TO_ADDR
// if mode then
7419: LD_VAR 0 4
7423: IFFALSE 7487
// begin for i := 1 to result do
7425: LD_ADDR_VAR 0 6
7429: PUSH
7430: DOUBLE
7431: LD_INT 1
7433: DEC
7434: ST_TO_ADDR
7435: LD_VAR 0 5
7439: PUSH
7440: FOR_TO
7441: IFFALSE 7475
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7443: LD_ADDR_VAR 0 8
7447: PUSH
7448: LD_VAR 0 8
7452: PPUSH
7453: LD_VAR 0 5
7457: PUSH
7458: LD_VAR 0 6
7462: ARRAY
7463: PUSH
7464: LD_INT 1
7466: ARRAY
7467: PPUSH
7468: CALL 39385 0 2
7472: ST_TO_ADDR
7473: GO 7440
7475: POP
7476: POP
// result := tmp ;
7477: LD_ADDR_VAR 0 5
7481: PUSH
7482: LD_VAR 0 8
7486: ST_TO_ADDR
// end ; end ;
7487: LD_VAR 0 5
7491: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7492: LD_INT 0
7494: PPUSH
7495: PPUSH
7496: PPUSH
7497: PPUSH
// if not list then
7498: LD_VAR 0 3
7502: NOT
7503: IFFALSE 7507
// exit ;
7505: GO 7895
// result := [ ] ;
7507: LD_ADDR_VAR 0 6
7511: PUSH
7512: EMPTY
7513: ST_TO_ADDR
// for i in list do
7514: LD_ADDR_VAR 0 7
7518: PUSH
7519: LD_VAR 0 3
7523: PUSH
7524: FOR_IN
7525: IFFALSE 7727
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7527: LD_ADDR_VAR 0 9
7531: PUSH
7532: LD_VAR 0 7
7536: PPUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_VAR 0 2
7546: PPUSH
7547: CALL_OW 297
7551: ST_TO_ADDR
// if not result then
7552: LD_VAR 0 6
7556: NOT
7557: IFFALSE 7583
// result := [ [ i , tmp ] ] else
7559: LD_ADDR_VAR 0 6
7563: PUSH
7564: LD_VAR 0 7
7568: PUSH
7569: LD_VAR 0 9
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: EMPTY
7579: LIST
7580: ST_TO_ADDR
7581: GO 7725
// begin if result [ result ] [ 2 ] < tmp then
7583: LD_VAR 0 6
7587: PUSH
7588: LD_VAR 0 6
7592: ARRAY
7593: PUSH
7594: LD_INT 2
7596: ARRAY
7597: PUSH
7598: LD_VAR 0 9
7602: LESS
7603: IFFALSE 7645
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7605: LD_ADDR_VAR 0 6
7609: PUSH
7610: LD_VAR 0 6
7614: PPUSH
7615: LD_VAR 0 6
7619: PUSH
7620: LD_INT 1
7622: PLUS
7623: PPUSH
7624: LD_VAR 0 7
7628: PUSH
7629: LD_VAR 0 9
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 2
7642: ST_TO_ADDR
7643: GO 7725
// for j = 1 to result do
7645: LD_ADDR_VAR 0 8
7649: PUSH
7650: DOUBLE
7651: LD_INT 1
7653: DEC
7654: ST_TO_ADDR
7655: LD_VAR 0 6
7659: PUSH
7660: FOR_TO
7661: IFFALSE 7723
// begin if tmp < result [ j ] [ 2 ] then
7663: LD_VAR 0 9
7667: PUSH
7668: LD_VAR 0 6
7672: PUSH
7673: LD_VAR 0 8
7677: ARRAY
7678: PUSH
7679: LD_INT 2
7681: ARRAY
7682: LESS
7683: IFFALSE 7721
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7685: LD_ADDR_VAR 0 6
7689: PUSH
7690: LD_VAR 0 6
7694: PPUSH
7695: LD_VAR 0 8
7699: PPUSH
7700: LD_VAR 0 7
7704: PUSH
7705: LD_VAR 0 9
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 2
7718: ST_TO_ADDR
// break ;
7719: GO 7723
// end ; end ;
7721: GO 7660
7723: POP
7724: POP
// end ; end ;
7725: GO 7524
7727: POP
7728: POP
// if result and not asc then
7729: LD_VAR 0 6
7733: PUSH
7734: LD_VAR 0 4
7738: NOT
7739: AND
7740: IFFALSE 7815
// begin tmp := result ;
7742: LD_ADDR_VAR 0 9
7746: PUSH
7747: LD_VAR 0 6
7751: ST_TO_ADDR
// for i = tmp downto 1 do
7752: LD_ADDR_VAR 0 7
7756: PUSH
7757: DOUBLE
7758: LD_VAR 0 9
7762: INC
7763: ST_TO_ADDR
7764: LD_INT 1
7766: PUSH
7767: FOR_DOWNTO
7768: IFFALSE 7813
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7770: LD_ADDR_VAR 0 6
7774: PUSH
7775: LD_VAR 0 6
7779: PPUSH
7780: LD_VAR 0 9
7784: PUSH
7785: LD_VAR 0 7
7789: MINUS
7790: PUSH
7791: LD_INT 1
7793: PLUS
7794: PPUSH
7795: LD_VAR 0 9
7799: PUSH
7800: LD_VAR 0 7
7804: ARRAY
7805: PPUSH
7806: CALL_OW 1
7810: ST_TO_ADDR
7811: GO 7767
7813: POP
7814: POP
// end ; tmp := [ ] ;
7815: LD_ADDR_VAR 0 9
7819: PUSH
7820: EMPTY
7821: ST_TO_ADDR
// if mode then
7822: LD_VAR 0 5
7826: IFFALSE 7895
// begin for i = 1 to result do
7828: LD_ADDR_VAR 0 7
7832: PUSH
7833: DOUBLE
7834: LD_INT 1
7836: DEC
7837: ST_TO_ADDR
7838: LD_VAR 0 6
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7883
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7846: LD_ADDR_VAR 0 9
7850: PUSH
7851: LD_VAR 0 9
7855: PPUSH
7856: LD_VAR 0 7
7860: PPUSH
7861: LD_VAR 0 6
7865: PUSH
7866: LD_VAR 0 7
7870: ARRAY
7871: PUSH
7872: LD_INT 1
7874: ARRAY
7875: PPUSH
7876: CALL_OW 1
7880: ST_TO_ADDR
7881: GO 7843
7883: POP
7884: POP
// result := tmp ;
7885: LD_ADDR_VAR 0 6
7889: PUSH
7890: LD_VAR 0 9
7894: ST_TO_ADDR
// end ; end ;
7895: LD_VAR 0 6
7899: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7900: LD_INT 0
7902: PPUSH
7903: PPUSH
7904: PPUSH
7905: PPUSH
7906: PPUSH
7907: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7908: LD_ADDR_VAR 0 5
7912: PUSH
7913: LD_INT 0
7915: PUSH
7916: LD_INT 0
7918: PUSH
7919: LD_INT 0
7921: PUSH
7922: EMPTY
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: ST_TO_ADDR
// if not x or not y then
7930: LD_VAR 0 2
7934: NOT
7935: PUSH
7936: LD_VAR 0 3
7940: NOT
7941: OR
7942: IFFALSE 7946
// exit ;
7944: GO 9596
// if not range then
7946: LD_VAR 0 4
7950: NOT
7951: IFFALSE 7961
// range := 10 ;
7953: LD_ADDR_VAR 0 4
7957: PUSH
7958: LD_INT 10
7960: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7961: LD_ADDR_VAR 0 8
7965: PUSH
7966: LD_INT 81
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 92
7980: PUSH
7981: LD_VAR 0 2
7985: PUSH
7986: LD_VAR 0 3
7990: PUSH
7991: LD_VAR 0 4
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: PUSH
8002: LD_INT 3
8004: PUSH
8005: LD_INT 21
8007: PUSH
8008: LD_INT 3
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: LIST
8023: PPUSH
8024: CALL_OW 69
8028: ST_TO_ADDR
// if not tmp then
8029: LD_VAR 0 8
8033: NOT
8034: IFFALSE 8038
// exit ;
8036: GO 9596
// for i in tmp do
8038: LD_ADDR_VAR 0 6
8042: PUSH
8043: LD_VAR 0 8
8047: PUSH
8048: FOR_IN
8049: IFFALSE 9571
// begin points := [ 0 , 0 , 0 ] ;
8051: LD_ADDR_VAR 0 9
8055: PUSH
8056: LD_INT 0
8058: PUSH
8059: LD_INT 0
8061: PUSH
8062: LD_INT 0
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: ST_TO_ADDR
// bpoints := 1 ;
8070: LD_ADDR_VAR 0 10
8074: PUSH
8075: LD_INT 1
8077: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8078: LD_VAR 0 6
8082: PPUSH
8083: CALL_OW 247
8087: PUSH
8088: LD_INT 1
8090: DOUBLE
8091: EQUAL
8092: IFTRUE 8096
8094: GO 8674
8096: POP
// begin if GetClass ( i ) = 1 then
8097: LD_VAR 0 6
8101: PPUSH
8102: CALL_OW 257
8106: PUSH
8107: LD_INT 1
8109: EQUAL
8110: IFFALSE 8131
// points := [ 10 , 5 , 3 ] ;
8112: LD_ADDR_VAR 0 9
8116: PUSH
8117: LD_INT 10
8119: PUSH
8120: LD_INT 5
8122: PUSH
8123: LD_INT 3
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8131: LD_VAR 0 6
8135: PPUSH
8136: CALL_OW 257
8140: PUSH
8141: LD_INT 2
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: LD_INT 4
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: IN
8155: IFFALSE 8176
// points := [ 3 , 2 , 1 ] ;
8157: LD_ADDR_VAR 0 9
8161: PUSH
8162: LD_INT 3
8164: PUSH
8165: LD_INT 2
8167: PUSH
8168: LD_INT 1
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8176: LD_VAR 0 6
8180: PPUSH
8181: CALL_OW 257
8185: PUSH
8186: LD_INT 5
8188: EQUAL
8189: IFFALSE 8210
// points := [ 130 , 5 , 2 ] ;
8191: LD_ADDR_VAR 0 9
8195: PUSH
8196: LD_INT 130
8198: PUSH
8199: LD_INT 5
8201: PUSH
8202: LD_INT 2
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: LIST
8209: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8210: LD_VAR 0 6
8214: PPUSH
8215: CALL_OW 257
8219: PUSH
8220: LD_INT 8
8222: EQUAL
8223: IFFALSE 8244
// points := [ 35 , 35 , 30 ] ;
8225: LD_ADDR_VAR 0 9
8229: PUSH
8230: LD_INT 35
8232: PUSH
8233: LD_INT 35
8235: PUSH
8236: LD_INT 30
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8244: LD_VAR 0 6
8248: PPUSH
8249: CALL_OW 257
8253: PUSH
8254: LD_INT 9
8256: EQUAL
8257: IFFALSE 8278
// points := [ 20 , 55 , 40 ] ;
8259: LD_ADDR_VAR 0 9
8263: PUSH
8264: LD_INT 20
8266: PUSH
8267: LD_INT 55
8269: PUSH
8270: LD_INT 40
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8278: LD_VAR 0 6
8282: PPUSH
8283: CALL_OW 257
8287: PUSH
8288: LD_INT 12
8290: PUSH
8291: LD_INT 16
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: IN
8298: IFFALSE 8319
// points := [ 5 , 3 , 2 ] ;
8300: LD_ADDR_VAR 0 9
8304: PUSH
8305: LD_INT 5
8307: PUSH
8308: LD_INT 3
8310: PUSH
8311: LD_INT 2
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8319: LD_VAR 0 6
8323: PPUSH
8324: CALL_OW 257
8328: PUSH
8329: LD_INT 17
8331: EQUAL
8332: IFFALSE 8353
// points := [ 100 , 50 , 75 ] ;
8334: LD_ADDR_VAR 0 9
8338: PUSH
8339: LD_INT 100
8341: PUSH
8342: LD_INT 50
8344: PUSH
8345: LD_INT 75
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8353: LD_VAR 0 6
8357: PPUSH
8358: CALL_OW 257
8362: PUSH
8363: LD_INT 15
8365: EQUAL
8366: IFFALSE 8387
// points := [ 10 , 5 , 3 ] ;
8368: LD_ADDR_VAR 0 9
8372: PUSH
8373: LD_INT 10
8375: PUSH
8376: LD_INT 5
8378: PUSH
8379: LD_INT 3
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: LIST
8386: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8387: LD_VAR 0 6
8391: PPUSH
8392: CALL_OW 257
8396: PUSH
8397: LD_INT 14
8399: EQUAL
8400: IFFALSE 8421
// points := [ 10 , 0 , 0 ] ;
8402: LD_ADDR_VAR 0 9
8406: PUSH
8407: LD_INT 10
8409: PUSH
8410: LD_INT 0
8412: PUSH
8413: LD_INT 0
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: LIST
8420: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8421: LD_VAR 0 6
8425: PPUSH
8426: CALL_OW 257
8430: PUSH
8431: LD_INT 11
8433: EQUAL
8434: IFFALSE 8455
// points := [ 30 , 10 , 5 ] ;
8436: LD_ADDR_VAR 0 9
8440: PUSH
8441: LD_INT 30
8443: PUSH
8444: LD_INT 10
8446: PUSH
8447: LD_INT 5
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: LIST
8454: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8455: LD_VAR 0 1
8459: PPUSH
8460: LD_INT 5
8462: PPUSH
8463: CALL_OW 321
8467: PUSH
8468: LD_INT 2
8470: EQUAL
8471: IFFALSE 8488
// bpoints := bpoints * 1.8 ;
8473: LD_ADDR_VAR 0 10
8477: PUSH
8478: LD_VAR 0 10
8482: PUSH
8483: LD_REAL  1.80000000000000E+0000
8486: MUL
8487: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8488: LD_VAR 0 6
8492: PPUSH
8493: CALL_OW 257
8497: PUSH
8498: LD_INT 1
8500: PUSH
8501: LD_INT 2
8503: PUSH
8504: LD_INT 3
8506: PUSH
8507: LD_INT 4
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: IN
8516: PUSH
8517: LD_VAR 0 1
8521: PPUSH
8522: LD_INT 51
8524: PPUSH
8525: CALL_OW 321
8529: PUSH
8530: LD_INT 2
8532: EQUAL
8533: AND
8534: IFFALSE 8551
// bpoints := bpoints * 1.2 ;
8536: LD_ADDR_VAR 0 10
8540: PUSH
8541: LD_VAR 0 10
8545: PUSH
8546: LD_REAL  1.20000000000000E+0000
8549: MUL
8550: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8551: LD_VAR 0 6
8555: PPUSH
8556: CALL_OW 257
8560: PUSH
8561: LD_INT 5
8563: PUSH
8564: LD_INT 7
8566: PUSH
8567: LD_INT 9
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: IN
8575: PUSH
8576: LD_VAR 0 1
8580: PPUSH
8581: LD_INT 52
8583: PPUSH
8584: CALL_OW 321
8588: PUSH
8589: LD_INT 2
8591: EQUAL
8592: AND
8593: IFFALSE 8610
// bpoints := bpoints * 1.5 ;
8595: LD_ADDR_VAR 0 10
8599: PUSH
8600: LD_VAR 0 10
8604: PUSH
8605: LD_REAL  1.50000000000000E+0000
8608: MUL
8609: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8610: LD_VAR 0 1
8614: PPUSH
8615: LD_INT 66
8617: PPUSH
8618: CALL_OW 321
8622: PUSH
8623: LD_INT 2
8625: EQUAL
8626: IFFALSE 8643
// bpoints := bpoints * 1.1 ;
8628: LD_ADDR_VAR 0 10
8632: PUSH
8633: LD_VAR 0 10
8637: PUSH
8638: LD_REAL  1.10000000000000E+0000
8641: MUL
8642: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8643: LD_ADDR_VAR 0 10
8647: PUSH
8648: LD_VAR 0 10
8652: PUSH
8653: LD_VAR 0 6
8657: PPUSH
8658: LD_INT 1
8660: PPUSH
8661: CALL_OW 259
8665: PUSH
8666: LD_REAL  1.15000000000000E+0000
8669: MUL
8670: MUL
8671: ST_TO_ADDR
// end ; unit_vehicle :
8672: GO 9500
8674: LD_INT 2
8676: DOUBLE
8677: EQUAL
8678: IFTRUE 8682
8680: GO 9488
8682: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8683: LD_VAR 0 6
8687: PPUSH
8688: CALL_OW 264
8692: PUSH
8693: LD_INT 2
8695: PUSH
8696: LD_INT 42
8698: PUSH
8699: LD_INT 24
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: LIST
8706: IN
8707: IFFALSE 8728
// points := [ 25 , 5 , 3 ] ;
8709: LD_ADDR_VAR 0 9
8713: PUSH
8714: LD_INT 25
8716: PUSH
8717: LD_INT 5
8719: PUSH
8720: LD_INT 3
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: LIST
8727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8728: LD_VAR 0 6
8732: PPUSH
8733: CALL_OW 264
8737: PUSH
8738: LD_INT 4
8740: PUSH
8741: LD_INT 43
8743: PUSH
8744: LD_INT 25
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: IN
8752: IFFALSE 8773
// points := [ 40 , 15 , 5 ] ;
8754: LD_ADDR_VAR 0 9
8758: PUSH
8759: LD_INT 40
8761: PUSH
8762: LD_INT 15
8764: PUSH
8765: LD_INT 5
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: LIST
8772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8773: LD_VAR 0 6
8777: PPUSH
8778: CALL_OW 264
8782: PUSH
8783: LD_INT 3
8785: PUSH
8786: LD_INT 23
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: IN
8793: IFFALSE 8814
// points := [ 7 , 25 , 8 ] ;
8795: LD_ADDR_VAR 0 9
8799: PUSH
8800: LD_INT 7
8802: PUSH
8803: LD_INT 25
8805: PUSH
8806: LD_INT 8
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: LIST
8813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8814: LD_VAR 0 6
8818: PPUSH
8819: CALL_OW 264
8823: PUSH
8824: LD_INT 5
8826: PUSH
8827: LD_INT 27
8829: PUSH
8830: LD_INT 44
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: IN
8838: IFFALSE 8859
// points := [ 14 , 50 , 16 ] ;
8840: LD_ADDR_VAR 0 9
8844: PUSH
8845: LD_INT 14
8847: PUSH
8848: LD_INT 50
8850: PUSH
8851: LD_INT 16
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8859: LD_VAR 0 6
8863: PPUSH
8864: CALL_OW 264
8868: PUSH
8869: LD_INT 6
8871: PUSH
8872: LD_INT 46
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: IN
8879: IFFALSE 8900
// points := [ 32 , 120 , 70 ] ;
8881: LD_ADDR_VAR 0 9
8885: PUSH
8886: LD_INT 32
8888: PUSH
8889: LD_INT 120
8891: PUSH
8892: LD_INT 70
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: LIST
8899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8900: LD_VAR 0 6
8904: PPUSH
8905: CALL_OW 264
8909: PUSH
8910: LD_INT 7
8912: PUSH
8913: LD_INT 28
8915: PUSH
8916: LD_INT 45
8918: PUSH
8919: LD_INT 92
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: IN
8928: IFFALSE 8949
// points := [ 35 , 20 , 45 ] ;
8930: LD_ADDR_VAR 0 9
8934: PUSH
8935: LD_INT 35
8937: PUSH
8938: LD_INT 20
8940: PUSH
8941: LD_INT 45
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8949: LD_VAR 0 6
8953: PPUSH
8954: CALL_OW 264
8958: PUSH
8959: LD_INT 47
8961: PUSH
8962: EMPTY
8963: LIST
8964: IN
8965: IFFALSE 8986
// points := [ 67 , 45 , 75 ] ;
8967: LD_ADDR_VAR 0 9
8971: PUSH
8972: LD_INT 67
8974: PUSH
8975: LD_INT 45
8977: PUSH
8978: LD_INT 75
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: LIST
8985: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8986: LD_VAR 0 6
8990: PPUSH
8991: CALL_OW 264
8995: PUSH
8996: LD_INT 26
8998: PUSH
8999: EMPTY
9000: LIST
9001: IN
9002: IFFALSE 9023
// points := [ 120 , 30 , 80 ] ;
9004: LD_ADDR_VAR 0 9
9008: PUSH
9009: LD_INT 120
9011: PUSH
9012: LD_INT 30
9014: PUSH
9015: LD_INT 80
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: LIST
9022: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9023: LD_VAR 0 6
9027: PPUSH
9028: CALL_OW 264
9032: PUSH
9033: LD_INT 22
9035: PUSH
9036: EMPTY
9037: LIST
9038: IN
9039: IFFALSE 9060
// points := [ 40 , 1 , 1 ] ;
9041: LD_ADDR_VAR 0 9
9045: PUSH
9046: LD_INT 40
9048: PUSH
9049: LD_INT 1
9051: PUSH
9052: LD_INT 1
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: LIST
9059: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9060: LD_VAR 0 6
9064: PPUSH
9065: CALL_OW 264
9069: PUSH
9070: LD_INT 29
9072: PUSH
9073: EMPTY
9074: LIST
9075: IN
9076: IFFALSE 9097
// points := [ 70 , 200 , 400 ] ;
9078: LD_ADDR_VAR 0 9
9082: PUSH
9083: LD_INT 70
9085: PUSH
9086: LD_INT 200
9088: PUSH
9089: LD_INT 400
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9097: LD_VAR 0 6
9101: PPUSH
9102: CALL_OW 264
9106: PUSH
9107: LD_INT 14
9109: PUSH
9110: LD_INT 53
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: IN
9117: IFFALSE 9138
// points := [ 40 , 10 , 20 ] ;
9119: LD_ADDR_VAR 0 9
9123: PUSH
9124: LD_INT 40
9126: PUSH
9127: LD_INT 10
9129: PUSH
9130: LD_INT 20
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: LIST
9137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9138: LD_VAR 0 6
9142: PPUSH
9143: CALL_OW 264
9147: PUSH
9148: LD_INT 9
9150: PUSH
9151: EMPTY
9152: LIST
9153: IN
9154: IFFALSE 9175
// points := [ 5 , 70 , 20 ] ;
9156: LD_ADDR_VAR 0 9
9160: PUSH
9161: LD_INT 5
9163: PUSH
9164: LD_INT 70
9166: PUSH
9167: LD_INT 20
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: LIST
9174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9175: LD_VAR 0 6
9179: PPUSH
9180: CALL_OW 264
9184: PUSH
9185: LD_INT 10
9187: PUSH
9188: EMPTY
9189: LIST
9190: IN
9191: IFFALSE 9212
// points := [ 35 , 110 , 70 ] ;
9193: LD_ADDR_VAR 0 9
9197: PUSH
9198: LD_INT 35
9200: PUSH
9201: LD_INT 110
9203: PUSH
9204: LD_INT 70
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9212: LD_VAR 0 6
9216: PPUSH
9217: CALL_OW 265
9221: PUSH
9222: LD_INT 25
9224: EQUAL
9225: IFFALSE 9246
// points := [ 80 , 65 , 100 ] ;
9227: LD_ADDR_VAR 0 9
9231: PUSH
9232: LD_INT 80
9234: PUSH
9235: LD_INT 65
9237: PUSH
9238: LD_INT 100
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9246: LD_VAR 0 6
9250: PPUSH
9251: CALL_OW 263
9255: PUSH
9256: LD_INT 1
9258: EQUAL
9259: IFFALSE 9294
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9261: LD_ADDR_VAR 0 10
9265: PUSH
9266: LD_VAR 0 10
9270: PUSH
9271: LD_VAR 0 6
9275: PPUSH
9276: CALL_OW 311
9280: PPUSH
9281: LD_INT 3
9283: PPUSH
9284: CALL_OW 259
9288: PUSH
9289: LD_INT 4
9291: MUL
9292: MUL
9293: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9294: LD_VAR 0 6
9298: PPUSH
9299: CALL_OW 263
9303: PUSH
9304: LD_INT 2
9306: EQUAL
9307: IFFALSE 9358
// begin j := IsControledBy ( i ) ;
9309: LD_ADDR_VAR 0 7
9313: PUSH
9314: LD_VAR 0 6
9318: PPUSH
9319: CALL_OW 312
9323: ST_TO_ADDR
// if j then
9324: LD_VAR 0 7
9328: IFFALSE 9358
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9330: LD_ADDR_VAR 0 10
9334: PUSH
9335: LD_VAR 0 10
9339: PUSH
9340: LD_VAR 0 7
9344: PPUSH
9345: LD_INT 3
9347: PPUSH
9348: CALL_OW 259
9352: PUSH
9353: LD_INT 3
9355: MUL
9356: MUL
9357: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9358: LD_VAR 0 6
9362: PPUSH
9363: CALL_OW 264
9367: PUSH
9368: LD_INT 5
9370: PUSH
9371: LD_INT 6
9373: PUSH
9374: LD_INT 46
9376: PUSH
9377: LD_INT 44
9379: PUSH
9380: LD_INT 47
9382: PUSH
9383: LD_INT 45
9385: PUSH
9386: LD_INT 28
9388: PUSH
9389: LD_INT 7
9391: PUSH
9392: LD_INT 27
9394: PUSH
9395: LD_INT 29
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: IN
9410: PUSH
9411: LD_VAR 0 1
9415: PPUSH
9416: LD_INT 52
9418: PPUSH
9419: CALL_OW 321
9423: PUSH
9424: LD_INT 2
9426: EQUAL
9427: AND
9428: IFFALSE 9445
// bpoints := bpoints * 1.2 ;
9430: LD_ADDR_VAR 0 10
9434: PUSH
9435: LD_VAR 0 10
9439: PUSH
9440: LD_REAL  1.20000000000000E+0000
9443: MUL
9444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9445: LD_VAR 0 6
9449: PPUSH
9450: CALL_OW 264
9454: PUSH
9455: LD_INT 6
9457: PUSH
9458: LD_INT 46
9460: PUSH
9461: LD_INT 47
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: LIST
9468: IN
9469: IFFALSE 9486
// bpoints := bpoints * 1.2 ;
9471: LD_ADDR_VAR 0 10
9475: PUSH
9476: LD_VAR 0 10
9480: PUSH
9481: LD_REAL  1.20000000000000E+0000
9484: MUL
9485: ST_TO_ADDR
// end ; unit_building :
9486: GO 9500
9488: LD_INT 3
9490: DOUBLE
9491: EQUAL
9492: IFTRUE 9496
9494: GO 9499
9496: POP
// ; end ;
9497: GO 9500
9499: POP
// for j = 1 to 3 do
9500: LD_ADDR_VAR 0 7
9504: PUSH
9505: DOUBLE
9506: LD_INT 1
9508: DEC
9509: ST_TO_ADDR
9510: LD_INT 3
9512: PUSH
9513: FOR_TO
9514: IFFALSE 9567
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9516: LD_ADDR_VAR 0 5
9520: PUSH
9521: LD_VAR 0 5
9525: PPUSH
9526: LD_VAR 0 7
9530: PPUSH
9531: LD_VAR 0 5
9535: PUSH
9536: LD_VAR 0 7
9540: ARRAY
9541: PUSH
9542: LD_VAR 0 9
9546: PUSH
9547: LD_VAR 0 7
9551: ARRAY
9552: PUSH
9553: LD_VAR 0 10
9557: MUL
9558: PLUS
9559: PPUSH
9560: CALL_OW 1
9564: ST_TO_ADDR
9565: GO 9513
9567: POP
9568: POP
// end ;
9569: GO 8048
9571: POP
9572: POP
// result := Replace ( result , 4 , tmp ) ;
9573: LD_ADDR_VAR 0 5
9577: PUSH
9578: LD_VAR 0 5
9582: PPUSH
9583: LD_INT 4
9585: PPUSH
9586: LD_VAR 0 8
9590: PPUSH
9591: CALL_OW 1
9595: ST_TO_ADDR
// end ;
9596: LD_VAR 0 5
9600: RET
// export function DangerAtRange ( unit , range ) ; begin
9601: LD_INT 0
9603: PPUSH
// if not unit then
9604: LD_VAR 0 1
9608: NOT
9609: IFFALSE 9613
// exit ;
9611: GO 9658
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9613: LD_ADDR_VAR 0 3
9617: PUSH
9618: LD_VAR 0 1
9622: PPUSH
9623: CALL_OW 255
9627: PPUSH
9628: LD_VAR 0 1
9632: PPUSH
9633: CALL_OW 250
9637: PPUSH
9638: LD_VAR 0 1
9642: PPUSH
9643: CALL_OW 251
9647: PPUSH
9648: LD_VAR 0 2
9652: PPUSH
9653: CALL 7900 0 4
9657: ST_TO_ADDR
// end ;
9658: LD_VAR 0 3
9662: RET
// export function DangerInArea ( side , area ) ; begin
9663: LD_INT 0
9665: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9666: LD_ADDR_VAR 0 3
9670: PUSH
9671: LD_VAR 0 2
9675: PPUSH
9676: LD_INT 81
9678: PUSH
9679: LD_VAR 0 1
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PPUSH
9688: CALL_OW 70
9692: ST_TO_ADDR
// end ;
9693: LD_VAR 0 3
9697: RET
// export function IsExtension ( b ) ; begin
9698: LD_INT 0
9700: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9701: LD_ADDR_VAR 0 2
9705: PUSH
9706: LD_VAR 0 1
9710: PUSH
9711: LD_INT 23
9713: PUSH
9714: LD_INT 20
9716: PUSH
9717: LD_INT 22
9719: PUSH
9720: LD_INT 17
9722: PUSH
9723: LD_INT 24
9725: PUSH
9726: LD_INT 21
9728: PUSH
9729: LD_INT 19
9731: PUSH
9732: LD_INT 16
9734: PUSH
9735: LD_INT 25
9737: PUSH
9738: LD_INT 18
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: IN
9753: ST_TO_ADDR
// end ;
9754: LD_VAR 0 2
9758: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9759: LD_INT 0
9761: PPUSH
9762: PPUSH
9763: PPUSH
// result := [ ] ;
9764: LD_ADDR_VAR 0 4
9768: PUSH
9769: EMPTY
9770: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9771: LD_ADDR_VAR 0 5
9775: PUSH
9776: LD_VAR 0 2
9780: PPUSH
9781: LD_INT 21
9783: PUSH
9784: LD_INT 3
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 70
9795: ST_TO_ADDR
// if not tmp then
9796: LD_VAR 0 5
9800: NOT
9801: IFFALSE 9805
// exit ;
9803: GO 9869
// if checkLink then
9805: LD_VAR 0 3
9809: IFFALSE 9859
// begin for i in tmp do
9811: LD_ADDR_VAR 0 6
9815: PUSH
9816: LD_VAR 0 5
9820: PUSH
9821: FOR_IN
9822: IFFALSE 9857
// if GetBase ( i ) <> base then
9824: LD_VAR 0 6
9828: PPUSH
9829: CALL_OW 274
9833: PUSH
9834: LD_VAR 0 1
9838: NONEQUAL
9839: IFFALSE 9855
// ComLinkToBase ( base , i ) ;
9841: LD_VAR 0 1
9845: PPUSH
9846: LD_VAR 0 6
9850: PPUSH
9851: CALL_OW 169
9855: GO 9821
9857: POP
9858: POP
// end ; result := tmp ;
9859: LD_ADDR_VAR 0 4
9863: PUSH
9864: LD_VAR 0 5
9868: ST_TO_ADDR
// end ;
9869: LD_VAR 0 4
9873: RET
// export function ComComplete ( units , b ) ; var i ; begin
9874: LD_INT 0
9876: PPUSH
9877: PPUSH
// if not units then
9878: LD_VAR 0 1
9882: NOT
9883: IFFALSE 9887
// exit ;
9885: GO 9977
// for i in units do
9887: LD_ADDR_VAR 0 4
9891: PUSH
9892: LD_VAR 0 1
9896: PUSH
9897: FOR_IN
9898: IFFALSE 9975
// if BuildingStatus ( b ) = bs_build then
9900: LD_VAR 0 2
9904: PPUSH
9905: CALL_OW 461
9909: PUSH
9910: LD_INT 1
9912: EQUAL
9913: IFFALSE 9973
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9915: LD_VAR 0 4
9919: PPUSH
9920: LD_STRING h
9922: PUSH
9923: LD_VAR 0 2
9927: PPUSH
9928: CALL_OW 250
9932: PUSH
9933: LD_VAR 0 2
9937: PPUSH
9938: CALL_OW 251
9942: PUSH
9943: LD_VAR 0 2
9947: PUSH
9948: LD_INT 0
9950: PUSH
9951: LD_INT 0
9953: PUSH
9954: LD_INT 0
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: PPUSH
9969: CALL_OW 446
9973: GO 9897
9975: POP
9976: POP
// end ;
9977: LD_VAR 0 3
9981: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9982: LD_INT 0
9984: PPUSH
9985: PPUSH
9986: PPUSH
9987: PPUSH
9988: PPUSH
9989: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9990: LD_VAR 0 1
9994: NOT
9995: PUSH
9996: LD_VAR 0 1
10000: PPUSH
10001: CALL_OW 263
10005: PUSH
10006: LD_INT 2
10008: NONEQUAL
10009: OR
10010: IFFALSE 10014
// exit ;
10012: GO 10330
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10014: LD_ADDR_VAR 0 6
10018: PUSH
10019: LD_INT 22
10021: PUSH
10022: LD_VAR 0 1
10026: PPUSH
10027: CALL_OW 255
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 2
10038: PUSH
10039: LD_INT 30
10041: PUSH
10042: LD_INT 36
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: LD_INT 34
10051: PUSH
10052: LD_INT 31
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PPUSH
10068: CALL_OW 69
10072: ST_TO_ADDR
// if not tmp then
10073: LD_VAR 0 6
10077: NOT
10078: IFFALSE 10082
// exit ;
10080: GO 10330
// result := [ ] ;
10082: LD_ADDR_VAR 0 2
10086: PUSH
10087: EMPTY
10088: ST_TO_ADDR
// for i in tmp do
10089: LD_ADDR_VAR 0 3
10093: PUSH
10094: LD_VAR 0 6
10098: PUSH
10099: FOR_IN
10100: IFFALSE 10171
// begin t := UnitsInside ( i ) ;
10102: LD_ADDR_VAR 0 4
10106: PUSH
10107: LD_VAR 0 3
10111: PPUSH
10112: CALL_OW 313
10116: ST_TO_ADDR
// if t then
10117: LD_VAR 0 4
10121: IFFALSE 10169
// for j in t do
10123: LD_ADDR_VAR 0 7
10127: PUSH
10128: LD_VAR 0 4
10132: PUSH
10133: FOR_IN
10134: IFFALSE 10167
// result := Replace ( result , result + 1 , j ) ;
10136: LD_ADDR_VAR 0 2
10140: PUSH
10141: LD_VAR 0 2
10145: PPUSH
10146: LD_VAR 0 2
10150: PUSH
10151: LD_INT 1
10153: PLUS
10154: PPUSH
10155: LD_VAR 0 7
10159: PPUSH
10160: CALL_OW 1
10164: ST_TO_ADDR
10165: GO 10133
10167: POP
10168: POP
// end ;
10169: GO 10099
10171: POP
10172: POP
// if not result then
10173: LD_VAR 0 2
10177: NOT
10178: IFFALSE 10182
// exit ;
10180: GO 10330
// mech := result [ 1 ] ;
10182: LD_ADDR_VAR 0 5
10186: PUSH
10187: LD_VAR 0 2
10191: PUSH
10192: LD_INT 1
10194: ARRAY
10195: ST_TO_ADDR
// if result > 1 then
10196: LD_VAR 0 2
10200: PUSH
10201: LD_INT 1
10203: GREATER
10204: IFFALSE 10316
// begin for i = 2 to result do
10206: LD_ADDR_VAR 0 3
10210: PUSH
10211: DOUBLE
10212: LD_INT 2
10214: DEC
10215: ST_TO_ADDR
10216: LD_VAR 0 2
10220: PUSH
10221: FOR_TO
10222: IFFALSE 10314
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10224: LD_ADDR_VAR 0 4
10228: PUSH
10229: LD_VAR 0 2
10233: PUSH
10234: LD_VAR 0 3
10238: ARRAY
10239: PPUSH
10240: LD_INT 3
10242: PPUSH
10243: CALL_OW 259
10247: PUSH
10248: LD_VAR 0 2
10252: PUSH
10253: LD_VAR 0 3
10257: ARRAY
10258: PPUSH
10259: CALL_OW 432
10263: MINUS
10264: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10265: LD_VAR 0 4
10269: PUSH
10270: LD_VAR 0 5
10274: PPUSH
10275: LD_INT 3
10277: PPUSH
10278: CALL_OW 259
10282: PUSH
10283: LD_VAR 0 5
10287: PPUSH
10288: CALL_OW 432
10292: MINUS
10293: GREATEREQUAL
10294: IFFALSE 10312
// mech := result [ i ] ;
10296: LD_ADDR_VAR 0 5
10300: PUSH
10301: LD_VAR 0 2
10305: PUSH
10306: LD_VAR 0 3
10310: ARRAY
10311: ST_TO_ADDR
// end ;
10312: GO 10221
10314: POP
10315: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10316: LD_VAR 0 1
10320: PPUSH
10321: LD_VAR 0 5
10325: PPUSH
10326: CALL_OW 135
// end ;
10330: LD_VAR 0 2
10334: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10335: LD_INT 0
10337: PPUSH
10338: PPUSH
10339: PPUSH
10340: PPUSH
10341: PPUSH
10342: PPUSH
10343: PPUSH
10344: PPUSH
10345: PPUSH
10346: PPUSH
10347: PPUSH
10348: PPUSH
10349: PPUSH
// result := [ ] ;
10350: LD_ADDR_VAR 0 7
10354: PUSH
10355: EMPTY
10356: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10357: LD_VAR 0 1
10361: PPUSH
10362: CALL_OW 266
10366: PUSH
10367: LD_INT 0
10369: PUSH
10370: LD_INT 1
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: IN
10377: NOT
10378: IFFALSE 10382
// exit ;
10380: GO 12016
// if name then
10382: LD_VAR 0 3
10386: IFFALSE 10402
// SetBName ( base_dep , name ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_VAR 0 3
10397: PPUSH
10398: CALL_OW 500
// base := GetBase ( base_dep ) ;
10402: LD_ADDR_VAR 0 15
10406: PUSH
10407: LD_VAR 0 1
10411: PPUSH
10412: CALL_OW 274
10416: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10417: LD_ADDR_VAR 0 16
10421: PUSH
10422: LD_VAR 0 1
10426: PPUSH
10427: CALL_OW 255
10431: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10432: LD_ADDR_VAR 0 17
10436: PUSH
10437: LD_VAR 0 1
10441: PPUSH
10442: CALL_OW 248
10446: ST_TO_ADDR
// if sources then
10447: LD_VAR 0 5
10451: IFFALSE 10498
// for i = 1 to 3 do
10453: LD_ADDR_VAR 0 8
10457: PUSH
10458: DOUBLE
10459: LD_INT 1
10461: DEC
10462: ST_TO_ADDR
10463: LD_INT 3
10465: PUSH
10466: FOR_TO
10467: IFFALSE 10496
// AddResourceType ( base , i , sources [ i ] ) ;
10469: LD_VAR 0 15
10473: PPUSH
10474: LD_VAR 0 8
10478: PPUSH
10479: LD_VAR 0 5
10483: PUSH
10484: LD_VAR 0 8
10488: ARRAY
10489: PPUSH
10490: CALL_OW 276
10494: GO 10466
10496: POP
10497: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10498: LD_ADDR_VAR 0 18
10502: PUSH
10503: LD_VAR 0 15
10507: PPUSH
10508: LD_VAR 0 2
10512: PPUSH
10513: LD_INT 1
10515: PPUSH
10516: CALL 9759 0 3
10520: ST_TO_ADDR
// InitHc ;
10521: CALL_OW 19
// InitUc ;
10525: CALL_OW 18
// uc_side := side ;
10529: LD_ADDR_OWVAR 20
10533: PUSH
10534: LD_VAR 0 16
10538: ST_TO_ADDR
// uc_nation := nation ;
10539: LD_ADDR_OWVAR 21
10543: PUSH
10544: LD_VAR 0 17
10548: ST_TO_ADDR
// if buildings then
10549: LD_VAR 0 18
10553: IFFALSE 11875
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10555: LD_ADDR_VAR 0 19
10559: PUSH
10560: LD_VAR 0 18
10564: PPUSH
10565: LD_INT 2
10567: PUSH
10568: LD_INT 30
10570: PUSH
10571: LD_INT 29
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 30
10580: PUSH
10581: LD_INT 30
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: PPUSH
10593: CALL_OW 72
10597: ST_TO_ADDR
// if tmp then
10598: LD_VAR 0 19
10602: IFFALSE 10650
// for i in tmp do
10604: LD_ADDR_VAR 0 8
10608: PUSH
10609: LD_VAR 0 19
10613: PUSH
10614: FOR_IN
10615: IFFALSE 10648
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10617: LD_VAR 0 8
10621: PPUSH
10622: CALL_OW 250
10626: PPUSH
10627: LD_VAR 0 8
10631: PPUSH
10632: CALL_OW 251
10636: PPUSH
10637: LD_VAR 0 16
10641: PPUSH
10642: CALL_OW 441
10646: GO 10614
10648: POP
10649: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10650: LD_VAR 0 18
10654: PPUSH
10655: LD_INT 2
10657: PUSH
10658: LD_INT 30
10660: PUSH
10661: LD_INT 32
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 30
10670: PUSH
10671: LD_INT 33
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: PPUSH
10683: CALL_OW 72
10687: IFFALSE 10775
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10689: LD_ADDR_VAR 0 8
10693: PUSH
10694: LD_VAR 0 18
10698: PPUSH
10699: LD_INT 2
10701: PUSH
10702: LD_INT 30
10704: PUSH
10705: LD_INT 32
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 30
10714: PUSH
10715: LD_INT 33
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: LIST
10726: PPUSH
10727: CALL_OW 72
10731: PUSH
10732: FOR_IN
10733: IFFALSE 10773
// begin if not GetBWeapon ( i ) then
10735: LD_VAR 0 8
10739: PPUSH
10740: CALL_OW 269
10744: NOT
10745: IFFALSE 10771
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10747: LD_VAR 0 8
10751: PPUSH
10752: LD_VAR 0 8
10756: PPUSH
10757: LD_VAR 0 2
10761: PPUSH
10762: CALL 12021 0 2
10766: PPUSH
10767: CALL_OW 431
// end ;
10771: GO 10732
10773: POP
10774: POP
// end ; for i = 1 to personel do
10775: LD_ADDR_VAR 0 8
10779: PUSH
10780: DOUBLE
10781: LD_INT 1
10783: DEC
10784: ST_TO_ADDR
10785: LD_VAR 0 6
10789: PUSH
10790: FOR_TO
10791: IFFALSE 11855
// begin if i > 4 then
10793: LD_VAR 0 8
10797: PUSH
10798: LD_INT 4
10800: GREATER
10801: IFFALSE 10805
// break ;
10803: GO 11855
// case i of 1 :
10805: LD_VAR 0 8
10809: PUSH
10810: LD_INT 1
10812: DOUBLE
10813: EQUAL
10814: IFTRUE 10818
10816: GO 10898
10818: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10819: LD_ADDR_VAR 0 12
10823: PUSH
10824: LD_VAR 0 18
10828: PPUSH
10829: LD_INT 22
10831: PUSH
10832: LD_VAR 0 16
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 58
10843: PUSH
10844: EMPTY
10845: LIST
10846: PUSH
10847: LD_INT 2
10849: PUSH
10850: LD_INT 30
10852: PUSH
10853: LD_INT 32
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 30
10862: PUSH
10863: LD_INT 4
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 30
10872: PUSH
10873: LD_INT 5
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: LIST
10890: PPUSH
10891: CALL_OW 72
10895: ST_TO_ADDR
10896: GO 11120
10898: LD_INT 2
10900: DOUBLE
10901: EQUAL
10902: IFTRUE 10906
10904: GO 10968
10906: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10907: LD_ADDR_VAR 0 12
10911: PUSH
10912: LD_VAR 0 18
10916: PPUSH
10917: LD_INT 22
10919: PUSH
10920: LD_VAR 0 16
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PUSH
10929: LD_INT 2
10931: PUSH
10932: LD_INT 30
10934: PUSH
10935: LD_INT 0
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 30
10944: PUSH
10945: LD_INT 1
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: LIST
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PPUSH
10961: CALL_OW 72
10965: ST_TO_ADDR
10966: GO 11120
10968: LD_INT 3
10970: DOUBLE
10971: EQUAL
10972: IFTRUE 10976
10974: GO 11038
10976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10977: LD_ADDR_VAR 0 12
10981: PUSH
10982: LD_VAR 0 18
10986: PPUSH
10987: LD_INT 22
10989: PUSH
10990: LD_VAR 0 16
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 2
11001: PUSH
11002: LD_INT 30
11004: PUSH
11005: LD_INT 2
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 30
11014: PUSH
11015: LD_INT 3
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: LIST
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PPUSH
11031: CALL_OW 72
11035: ST_TO_ADDR
11036: GO 11120
11038: LD_INT 4
11040: DOUBLE
11041: EQUAL
11042: IFTRUE 11046
11044: GO 11119
11046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11047: LD_ADDR_VAR 0 12
11051: PUSH
11052: LD_VAR 0 18
11056: PPUSH
11057: LD_INT 22
11059: PUSH
11060: LD_VAR 0 16
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: LD_INT 30
11074: PUSH
11075: LD_INT 6
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 30
11084: PUSH
11085: LD_INT 7
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 30
11094: PUSH
11095: LD_INT 8
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 72
11116: ST_TO_ADDR
11117: GO 11120
11119: POP
// if i = 1 then
11120: LD_VAR 0 8
11124: PUSH
11125: LD_INT 1
11127: EQUAL
11128: IFFALSE 11239
// begin tmp := [ ] ;
11130: LD_ADDR_VAR 0 19
11134: PUSH
11135: EMPTY
11136: ST_TO_ADDR
// for j in f do
11137: LD_ADDR_VAR 0 9
11141: PUSH
11142: LD_VAR 0 12
11146: PUSH
11147: FOR_IN
11148: IFFALSE 11221
// if GetBType ( j ) = b_bunker then
11150: LD_VAR 0 9
11154: PPUSH
11155: CALL_OW 266
11159: PUSH
11160: LD_INT 32
11162: EQUAL
11163: IFFALSE 11190
// tmp := Insert ( tmp , 1 , j ) else
11165: LD_ADDR_VAR 0 19
11169: PUSH
11170: LD_VAR 0 19
11174: PPUSH
11175: LD_INT 1
11177: PPUSH
11178: LD_VAR 0 9
11182: PPUSH
11183: CALL_OW 2
11187: ST_TO_ADDR
11188: GO 11219
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11190: LD_ADDR_VAR 0 19
11194: PUSH
11195: LD_VAR 0 19
11199: PPUSH
11200: LD_VAR 0 19
11204: PUSH
11205: LD_INT 1
11207: PLUS
11208: PPUSH
11209: LD_VAR 0 9
11213: PPUSH
11214: CALL_OW 2
11218: ST_TO_ADDR
11219: GO 11147
11221: POP
11222: POP
// if tmp then
11223: LD_VAR 0 19
11227: IFFALSE 11239
// f := tmp ;
11229: LD_ADDR_VAR 0 12
11233: PUSH
11234: LD_VAR 0 19
11238: ST_TO_ADDR
// end ; x := personel [ i ] ;
11239: LD_ADDR_VAR 0 13
11243: PUSH
11244: LD_VAR 0 6
11248: PUSH
11249: LD_VAR 0 8
11253: ARRAY
11254: ST_TO_ADDR
// if x = - 1 then
11255: LD_VAR 0 13
11259: PUSH
11260: LD_INT 1
11262: NEG
11263: EQUAL
11264: IFFALSE 11473
// begin for j in f do
11266: LD_ADDR_VAR 0 9
11270: PUSH
11271: LD_VAR 0 12
11275: PUSH
11276: FOR_IN
11277: IFFALSE 11469
// repeat InitHc ;
11279: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11283: LD_VAR 0 9
11287: PPUSH
11288: CALL_OW 266
11292: PUSH
11293: LD_INT 5
11295: EQUAL
11296: IFFALSE 11366
// begin if UnitsInside ( j ) < 3 then
11298: LD_VAR 0 9
11302: PPUSH
11303: CALL_OW 313
11307: PUSH
11308: LD_INT 3
11310: LESS
11311: IFFALSE 11347
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11313: LD_INT 0
11315: PPUSH
11316: LD_INT 5
11318: PUSH
11319: LD_INT 8
11321: PUSH
11322: LD_INT 9
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: PUSH
11330: LD_VAR 0 17
11334: ARRAY
11335: PPUSH
11336: LD_VAR 0 4
11340: PPUSH
11341: CALL_OW 380
11345: GO 11364
// PrepareHuman ( false , i , skill ) ;
11347: LD_INT 0
11349: PPUSH
11350: LD_VAR 0 8
11354: PPUSH
11355: LD_VAR 0 4
11359: PPUSH
11360: CALL_OW 380
// end else
11364: GO 11383
// PrepareHuman ( false , i , skill ) ;
11366: LD_INT 0
11368: PPUSH
11369: LD_VAR 0 8
11373: PPUSH
11374: LD_VAR 0 4
11378: PPUSH
11379: CALL_OW 380
// un := CreateHuman ;
11383: LD_ADDR_VAR 0 14
11387: PUSH
11388: CALL_OW 44
11392: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11393: LD_ADDR_VAR 0 7
11397: PUSH
11398: LD_VAR 0 7
11402: PPUSH
11403: LD_INT 1
11405: PPUSH
11406: LD_VAR 0 14
11410: PPUSH
11411: CALL_OW 2
11415: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11416: LD_VAR 0 14
11420: PPUSH
11421: LD_VAR 0 9
11425: PPUSH
11426: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11430: LD_VAR 0 9
11434: PPUSH
11435: CALL_OW 313
11439: PUSH
11440: LD_INT 6
11442: EQUAL
11443: PUSH
11444: LD_VAR 0 9
11448: PPUSH
11449: CALL_OW 266
11453: PUSH
11454: LD_INT 32
11456: PUSH
11457: LD_INT 31
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: IN
11464: OR
11465: IFFALSE 11279
11467: GO 11276
11469: POP
11470: POP
// end else
11471: GO 11853
// for j = 1 to x do
11473: LD_ADDR_VAR 0 9
11477: PUSH
11478: DOUBLE
11479: LD_INT 1
11481: DEC
11482: ST_TO_ADDR
11483: LD_VAR 0 13
11487: PUSH
11488: FOR_TO
11489: IFFALSE 11851
// begin InitHc ;
11491: CALL_OW 19
// if not f then
11495: LD_VAR 0 12
11499: NOT
11500: IFFALSE 11589
// begin PrepareHuman ( false , i , skill ) ;
11502: LD_INT 0
11504: PPUSH
11505: LD_VAR 0 8
11509: PPUSH
11510: LD_VAR 0 4
11514: PPUSH
11515: CALL_OW 380
// un := CreateHuman ;
11519: LD_ADDR_VAR 0 14
11523: PUSH
11524: CALL_OW 44
11528: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11529: LD_ADDR_VAR 0 7
11533: PUSH
11534: LD_VAR 0 7
11538: PPUSH
11539: LD_INT 1
11541: PPUSH
11542: LD_VAR 0 14
11546: PPUSH
11547: CALL_OW 2
11551: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11552: LD_VAR 0 14
11556: PPUSH
11557: LD_VAR 0 1
11561: PPUSH
11562: CALL_OW 250
11566: PPUSH
11567: LD_VAR 0 1
11571: PPUSH
11572: CALL_OW 251
11576: PPUSH
11577: LD_INT 10
11579: PPUSH
11580: LD_INT 0
11582: PPUSH
11583: CALL_OW 50
// continue ;
11587: GO 11488
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11589: LD_VAR 0 12
11593: PUSH
11594: LD_INT 1
11596: ARRAY
11597: PPUSH
11598: CALL_OW 313
11602: PUSH
11603: LD_VAR 0 12
11607: PUSH
11608: LD_INT 1
11610: ARRAY
11611: PPUSH
11612: CALL_OW 266
11616: PUSH
11617: LD_INT 32
11619: PUSH
11620: LD_INT 31
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: IN
11627: AND
11628: PUSH
11629: LD_VAR 0 12
11633: PUSH
11634: LD_INT 1
11636: ARRAY
11637: PPUSH
11638: CALL_OW 313
11642: PUSH
11643: LD_INT 6
11645: EQUAL
11646: OR
11647: IFFALSE 11667
// f := Delete ( f , 1 ) ;
11649: LD_ADDR_VAR 0 12
11653: PUSH
11654: LD_VAR 0 12
11658: PPUSH
11659: LD_INT 1
11661: PPUSH
11662: CALL_OW 3
11666: ST_TO_ADDR
// if not f then
11667: LD_VAR 0 12
11671: NOT
11672: IFFALSE 11690
// begin x := x + 2 ;
11674: LD_ADDR_VAR 0 13
11678: PUSH
11679: LD_VAR 0 13
11683: PUSH
11684: LD_INT 2
11686: PLUS
11687: ST_TO_ADDR
// continue ;
11688: GO 11488
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11690: LD_VAR 0 12
11694: PUSH
11695: LD_INT 1
11697: ARRAY
11698: PPUSH
11699: CALL_OW 266
11703: PUSH
11704: LD_INT 5
11706: EQUAL
11707: IFFALSE 11781
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11709: LD_VAR 0 12
11713: PUSH
11714: LD_INT 1
11716: ARRAY
11717: PPUSH
11718: CALL_OW 313
11722: PUSH
11723: LD_INT 3
11725: LESS
11726: IFFALSE 11762
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11728: LD_INT 0
11730: PPUSH
11731: LD_INT 5
11733: PUSH
11734: LD_INT 8
11736: PUSH
11737: LD_INT 9
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: PUSH
11745: LD_VAR 0 17
11749: ARRAY
11750: PPUSH
11751: LD_VAR 0 4
11755: PPUSH
11756: CALL_OW 380
11760: GO 11779
// PrepareHuman ( false , i , skill ) ;
11762: LD_INT 0
11764: PPUSH
11765: LD_VAR 0 8
11769: PPUSH
11770: LD_VAR 0 4
11774: PPUSH
11775: CALL_OW 380
// end else
11779: GO 11798
// PrepareHuman ( false , i , skill ) ;
11781: LD_INT 0
11783: PPUSH
11784: LD_VAR 0 8
11788: PPUSH
11789: LD_VAR 0 4
11793: PPUSH
11794: CALL_OW 380
// un := CreateHuman ;
11798: LD_ADDR_VAR 0 14
11802: PUSH
11803: CALL_OW 44
11807: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11808: LD_ADDR_VAR 0 7
11812: PUSH
11813: LD_VAR 0 7
11817: PPUSH
11818: LD_INT 1
11820: PPUSH
11821: LD_VAR 0 14
11825: PPUSH
11826: CALL_OW 2
11830: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11831: LD_VAR 0 14
11835: PPUSH
11836: LD_VAR 0 12
11840: PUSH
11841: LD_INT 1
11843: ARRAY
11844: PPUSH
11845: CALL_OW 52
// end ;
11849: GO 11488
11851: POP
11852: POP
// end ;
11853: GO 10790
11855: POP
11856: POP
// result := result ^ buildings ;
11857: LD_ADDR_VAR 0 7
11861: PUSH
11862: LD_VAR 0 7
11866: PUSH
11867: LD_VAR 0 18
11871: ADD
11872: ST_TO_ADDR
// end else
11873: GO 12016
// begin for i = 1 to personel do
11875: LD_ADDR_VAR 0 8
11879: PUSH
11880: DOUBLE
11881: LD_INT 1
11883: DEC
11884: ST_TO_ADDR
11885: LD_VAR 0 6
11889: PUSH
11890: FOR_TO
11891: IFFALSE 12014
// begin if i > 4 then
11893: LD_VAR 0 8
11897: PUSH
11898: LD_INT 4
11900: GREATER
11901: IFFALSE 11905
// break ;
11903: GO 12014
// x := personel [ i ] ;
11905: LD_ADDR_VAR 0 13
11909: PUSH
11910: LD_VAR 0 6
11914: PUSH
11915: LD_VAR 0 8
11919: ARRAY
11920: ST_TO_ADDR
// if x = - 1 then
11921: LD_VAR 0 13
11925: PUSH
11926: LD_INT 1
11928: NEG
11929: EQUAL
11930: IFFALSE 11934
// continue ;
11932: GO 11890
// PrepareHuman ( false , i , skill ) ;
11934: LD_INT 0
11936: PPUSH
11937: LD_VAR 0 8
11941: PPUSH
11942: LD_VAR 0 4
11946: PPUSH
11947: CALL_OW 380
// un := CreateHuman ;
11951: LD_ADDR_VAR 0 14
11955: PUSH
11956: CALL_OW 44
11960: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11961: LD_VAR 0 14
11965: PPUSH
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL_OW 250
11975: PPUSH
11976: LD_VAR 0 1
11980: PPUSH
11981: CALL_OW 251
11985: PPUSH
11986: LD_INT 10
11988: PPUSH
11989: LD_INT 0
11991: PPUSH
11992: CALL_OW 50
// result := result ^ un ;
11996: LD_ADDR_VAR 0 7
12000: PUSH
12001: LD_VAR 0 7
12005: PUSH
12006: LD_VAR 0 14
12010: ADD
12011: ST_TO_ADDR
// end ;
12012: GO 11890
12014: POP
12015: POP
// end ; end ;
12016: LD_VAR 0 7
12020: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12021: LD_INT 0
12023: PPUSH
12024: PPUSH
12025: PPUSH
12026: PPUSH
12027: PPUSH
12028: PPUSH
12029: PPUSH
12030: PPUSH
12031: PPUSH
12032: PPUSH
12033: PPUSH
12034: PPUSH
12035: PPUSH
12036: PPUSH
12037: PPUSH
12038: PPUSH
// result := false ;
12039: LD_ADDR_VAR 0 3
12043: PUSH
12044: LD_INT 0
12046: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12047: LD_VAR 0 1
12051: NOT
12052: PUSH
12053: LD_VAR 0 1
12057: PPUSH
12058: CALL_OW 266
12062: PUSH
12063: LD_INT 32
12065: PUSH
12066: LD_INT 33
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: IN
12073: NOT
12074: OR
12075: IFFALSE 12079
// exit ;
12077: GO 13188
// nat := GetNation ( tower ) ;
12079: LD_ADDR_VAR 0 12
12083: PUSH
12084: LD_VAR 0 1
12088: PPUSH
12089: CALL_OW 248
12093: ST_TO_ADDR
// side := GetSide ( tower ) ;
12094: LD_ADDR_VAR 0 16
12098: PUSH
12099: LD_VAR 0 1
12103: PPUSH
12104: CALL_OW 255
12108: ST_TO_ADDR
// x := GetX ( tower ) ;
12109: LD_ADDR_VAR 0 10
12113: PUSH
12114: LD_VAR 0 1
12118: PPUSH
12119: CALL_OW 250
12123: ST_TO_ADDR
// y := GetY ( tower ) ;
12124: LD_ADDR_VAR 0 11
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 251
12138: ST_TO_ADDR
// if not x or not y then
12139: LD_VAR 0 10
12143: NOT
12144: PUSH
12145: LD_VAR 0 11
12149: NOT
12150: OR
12151: IFFALSE 12155
// exit ;
12153: GO 13188
// weapon := 0 ;
12155: LD_ADDR_VAR 0 18
12159: PUSH
12160: LD_INT 0
12162: ST_TO_ADDR
// fac_list := [ ] ;
12163: LD_ADDR_VAR 0 17
12167: PUSH
12168: EMPTY
12169: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12170: LD_ADDR_VAR 0 6
12174: PUSH
12175: LD_VAR 0 1
12179: PPUSH
12180: CALL_OW 274
12184: PPUSH
12185: LD_VAR 0 2
12189: PPUSH
12190: LD_INT 0
12192: PPUSH
12193: CALL 9759 0 3
12197: PPUSH
12198: LD_INT 30
12200: PUSH
12201: LD_INT 3
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 72
12212: ST_TO_ADDR
// if not factories then
12213: LD_VAR 0 6
12217: NOT
12218: IFFALSE 12222
// exit ;
12220: GO 13188
// for i in factories do
12222: LD_ADDR_VAR 0 8
12226: PUSH
12227: LD_VAR 0 6
12231: PUSH
12232: FOR_IN
12233: IFFALSE 12258
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12235: LD_ADDR_VAR 0 17
12239: PUSH
12240: LD_VAR 0 17
12244: PUSH
12245: LD_VAR 0 8
12249: PPUSH
12250: CALL_OW 478
12254: UNION
12255: ST_TO_ADDR
12256: GO 12232
12258: POP
12259: POP
// if not fac_list then
12260: LD_VAR 0 17
12264: NOT
12265: IFFALSE 12269
// exit ;
12267: GO 13188
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12269: LD_ADDR_VAR 0 5
12273: PUSH
12274: LD_INT 4
12276: PUSH
12277: LD_INT 5
12279: PUSH
12280: LD_INT 9
12282: PUSH
12283: LD_INT 10
12285: PUSH
12286: LD_INT 6
12288: PUSH
12289: LD_INT 7
12291: PUSH
12292: LD_INT 11
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 27
12306: PUSH
12307: LD_INT 28
12309: PUSH
12310: LD_INT 26
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 43
12324: PUSH
12325: LD_INT 44
12327: PUSH
12328: LD_INT 46
12330: PUSH
12331: LD_INT 45
12333: PUSH
12334: LD_INT 47
12336: PUSH
12337: LD_INT 49
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: LIST
12352: PUSH
12353: LD_VAR 0 12
12357: ARRAY
12358: ST_TO_ADDR
// list := list isect fac_list ;
12359: LD_ADDR_VAR 0 5
12363: PUSH
12364: LD_VAR 0 5
12368: PUSH
12369: LD_VAR 0 17
12373: ISECT
12374: ST_TO_ADDR
// if not list then
12375: LD_VAR 0 5
12379: NOT
12380: IFFALSE 12384
// exit ;
12382: GO 13188
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12384: LD_VAR 0 12
12388: PUSH
12389: LD_INT 3
12391: EQUAL
12392: PUSH
12393: LD_INT 49
12395: PUSH
12396: LD_VAR 0 5
12400: IN
12401: AND
12402: PUSH
12403: LD_INT 31
12405: PPUSH
12406: LD_VAR 0 16
12410: PPUSH
12411: CALL_OW 321
12415: PUSH
12416: LD_INT 2
12418: EQUAL
12419: AND
12420: IFFALSE 12480
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12422: LD_INT 22
12424: PUSH
12425: LD_VAR 0 16
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 35
12436: PUSH
12437: LD_INT 49
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 91
12446: PUSH
12447: LD_VAR 0 1
12451: PUSH
12452: LD_INT 10
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: LIST
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 69
12469: NOT
12470: IFFALSE 12480
// weapon := ru_time_lapser ;
12472: LD_ADDR_VAR 0 18
12476: PUSH
12477: LD_INT 49
12479: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12480: LD_VAR 0 12
12484: PUSH
12485: LD_INT 1
12487: PUSH
12488: LD_INT 2
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: IN
12495: PUSH
12496: LD_INT 11
12498: PUSH
12499: LD_VAR 0 5
12503: IN
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_VAR 0 5
12512: IN
12513: OR
12514: AND
12515: PUSH
12516: LD_INT 6
12518: PPUSH
12519: LD_VAR 0 16
12523: PPUSH
12524: CALL_OW 321
12528: PUSH
12529: LD_INT 2
12531: EQUAL
12532: AND
12533: IFFALSE 12698
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12535: LD_INT 22
12537: PUSH
12538: LD_VAR 0 16
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: LD_INT 2
12549: PUSH
12550: LD_INT 35
12552: PUSH
12553: LD_INT 11
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 35
12562: PUSH
12563: LD_INT 30
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 91
12577: PUSH
12578: LD_VAR 0 1
12582: PUSH
12583: LD_INT 18
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: LIST
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: PPUSH
12596: CALL_OW 69
12600: NOT
12601: PUSH
12602: LD_INT 22
12604: PUSH
12605: LD_VAR 0 16
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: LD_INT 30
12619: PUSH
12620: LD_INT 32
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PUSH
12627: LD_INT 30
12629: PUSH
12630: LD_INT 33
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 91
12644: PUSH
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 12
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: LIST
12662: PUSH
12663: EMPTY
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: PUSH
12671: LD_INT 2
12673: GREATER
12674: AND
12675: IFFALSE 12698
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12677: LD_ADDR_VAR 0 18
12681: PUSH
12682: LD_INT 11
12684: PUSH
12685: LD_INT 30
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_VAR 0 12
12696: ARRAY
12697: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12698: LD_VAR 0 18
12702: NOT
12703: PUSH
12704: LD_INT 40
12706: PPUSH
12707: LD_VAR 0 16
12711: PPUSH
12712: CALL_OW 321
12716: PUSH
12717: LD_INT 2
12719: EQUAL
12720: AND
12721: PUSH
12722: LD_INT 7
12724: PUSH
12725: LD_VAR 0 5
12729: IN
12730: PUSH
12731: LD_INT 28
12733: PUSH
12734: LD_VAR 0 5
12738: IN
12739: OR
12740: PUSH
12741: LD_INT 45
12743: PUSH
12744: LD_VAR 0 5
12748: IN
12749: OR
12750: AND
12751: IFFALSE 13005
// begin hex := GetHexInfo ( x , y ) ;
12753: LD_ADDR_VAR 0 4
12757: PUSH
12758: LD_VAR 0 10
12762: PPUSH
12763: LD_VAR 0 11
12767: PPUSH
12768: CALL_OW 546
12772: ST_TO_ADDR
// if hex [ 1 ] then
12773: LD_VAR 0 4
12777: PUSH
12778: LD_INT 1
12780: ARRAY
12781: IFFALSE 12785
// exit ;
12783: GO 13188
// height := hex [ 2 ] ;
12785: LD_ADDR_VAR 0 15
12789: PUSH
12790: LD_VAR 0 4
12794: PUSH
12795: LD_INT 2
12797: ARRAY
12798: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12799: LD_ADDR_VAR 0 14
12803: PUSH
12804: LD_INT 0
12806: PUSH
12807: LD_INT 2
12809: PUSH
12810: LD_INT 3
12812: PUSH
12813: LD_INT 5
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: ST_TO_ADDR
// for i in tmp do
12822: LD_ADDR_VAR 0 8
12826: PUSH
12827: LD_VAR 0 14
12831: PUSH
12832: FOR_IN
12833: IFFALSE 13003
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12835: LD_ADDR_VAR 0 9
12839: PUSH
12840: LD_VAR 0 10
12844: PPUSH
12845: LD_VAR 0 8
12849: PPUSH
12850: LD_INT 5
12852: PPUSH
12853: CALL_OW 272
12857: PUSH
12858: LD_VAR 0 11
12862: PPUSH
12863: LD_VAR 0 8
12867: PPUSH
12868: LD_INT 5
12870: PPUSH
12871: CALL_OW 273
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12880: LD_VAR 0 9
12884: PUSH
12885: LD_INT 1
12887: ARRAY
12888: PPUSH
12889: LD_VAR 0 9
12893: PUSH
12894: LD_INT 2
12896: ARRAY
12897: PPUSH
12898: CALL_OW 488
12902: IFFALSE 13001
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12904: LD_ADDR_VAR 0 4
12908: PUSH
12909: LD_VAR 0 9
12913: PUSH
12914: LD_INT 1
12916: ARRAY
12917: PPUSH
12918: LD_VAR 0 9
12922: PUSH
12923: LD_INT 2
12925: ARRAY
12926: PPUSH
12927: CALL_OW 546
12931: ST_TO_ADDR
// if hex [ 1 ] then
12932: LD_VAR 0 4
12936: PUSH
12937: LD_INT 1
12939: ARRAY
12940: IFFALSE 12944
// continue ;
12942: GO 12832
// h := hex [ 2 ] ;
12944: LD_ADDR_VAR 0 13
12948: PUSH
12949: LD_VAR 0 4
12953: PUSH
12954: LD_INT 2
12956: ARRAY
12957: ST_TO_ADDR
// if h + 7 < height then
12958: LD_VAR 0 13
12962: PUSH
12963: LD_INT 7
12965: PLUS
12966: PUSH
12967: LD_VAR 0 15
12971: LESS
12972: IFFALSE 13001
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12974: LD_ADDR_VAR 0 18
12978: PUSH
12979: LD_INT 7
12981: PUSH
12982: LD_INT 28
12984: PUSH
12985: LD_INT 45
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: LIST
12992: PUSH
12993: LD_VAR 0 12
12997: ARRAY
12998: ST_TO_ADDR
// break ;
12999: GO 13003
// end ; end ; end ;
13001: GO 12832
13003: POP
13004: POP
// end ; if not weapon then
13005: LD_VAR 0 18
13009: NOT
13010: IFFALSE 13070
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13012: LD_ADDR_VAR 0 5
13016: PUSH
13017: LD_VAR 0 5
13021: PUSH
13022: LD_INT 11
13024: PUSH
13025: LD_INT 30
13027: PUSH
13028: LD_INT 49
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: DIFF
13036: ST_TO_ADDR
// if not list then
13037: LD_VAR 0 5
13041: NOT
13042: IFFALSE 13046
// exit ;
13044: GO 13188
// weapon := list [ rand ( 1 , list ) ] ;
13046: LD_ADDR_VAR 0 18
13050: PUSH
13051: LD_VAR 0 5
13055: PUSH
13056: LD_INT 1
13058: PPUSH
13059: LD_VAR 0 5
13063: PPUSH
13064: CALL_OW 12
13068: ARRAY
13069: ST_TO_ADDR
// end ; if weapon then
13070: LD_VAR 0 18
13074: IFFALSE 13188
// begin tmp := CostOfWeapon ( weapon ) ;
13076: LD_ADDR_VAR 0 14
13080: PUSH
13081: LD_VAR 0 18
13085: PPUSH
13086: CALL_OW 451
13090: ST_TO_ADDR
// j := GetBase ( tower ) ;
13091: LD_ADDR_VAR 0 9
13095: PUSH
13096: LD_VAR 0 1
13100: PPUSH
13101: CALL_OW 274
13105: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13106: LD_VAR 0 9
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 275
13118: PUSH
13119: LD_VAR 0 14
13123: PUSH
13124: LD_INT 1
13126: ARRAY
13127: GREATEREQUAL
13128: PUSH
13129: LD_VAR 0 9
13133: PPUSH
13134: LD_INT 2
13136: PPUSH
13137: CALL_OW 275
13141: PUSH
13142: LD_VAR 0 14
13146: PUSH
13147: LD_INT 2
13149: ARRAY
13150: GREATEREQUAL
13151: AND
13152: PUSH
13153: LD_VAR 0 9
13157: PPUSH
13158: LD_INT 3
13160: PPUSH
13161: CALL_OW 275
13165: PUSH
13166: LD_VAR 0 14
13170: PUSH
13171: LD_INT 3
13173: ARRAY
13174: GREATEREQUAL
13175: AND
13176: IFFALSE 13188
// result := weapon ;
13178: LD_ADDR_VAR 0 3
13182: PUSH
13183: LD_VAR 0 18
13187: ST_TO_ADDR
// end ; end ;
13188: LD_VAR 0 3
13192: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13193: LD_INT 0
13195: PPUSH
13196: PPUSH
// result := true ;
13197: LD_ADDR_VAR 0 3
13201: PUSH
13202: LD_INT 1
13204: ST_TO_ADDR
// if array1 = array2 then
13205: LD_VAR 0 1
13209: PUSH
13210: LD_VAR 0 2
13214: EQUAL
13215: IFFALSE 13275
// begin for i = 1 to array1 do
13217: LD_ADDR_VAR 0 4
13221: PUSH
13222: DOUBLE
13223: LD_INT 1
13225: DEC
13226: ST_TO_ADDR
13227: LD_VAR 0 1
13231: PUSH
13232: FOR_TO
13233: IFFALSE 13271
// if array1 [ i ] <> array2 [ i ] then
13235: LD_VAR 0 1
13239: PUSH
13240: LD_VAR 0 4
13244: ARRAY
13245: PUSH
13246: LD_VAR 0 2
13250: PUSH
13251: LD_VAR 0 4
13255: ARRAY
13256: NONEQUAL
13257: IFFALSE 13269
// begin result := false ;
13259: LD_ADDR_VAR 0 3
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// break ;
13267: GO 13271
// end ;
13269: GO 13232
13271: POP
13272: POP
// end else
13273: GO 13283
// result := false ;
13275: LD_ADDR_VAR 0 3
13279: PUSH
13280: LD_INT 0
13282: ST_TO_ADDR
// end ;
13283: LD_VAR 0 3
13287: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13288: LD_INT 0
13290: PPUSH
13291: PPUSH
// if not array1 or not array2 then
13292: LD_VAR 0 1
13296: NOT
13297: PUSH
13298: LD_VAR 0 2
13302: NOT
13303: OR
13304: IFFALSE 13308
// exit ;
13306: GO 13372
// result := true ;
13308: LD_ADDR_VAR 0 3
13312: PUSH
13313: LD_INT 1
13315: ST_TO_ADDR
// for i = 1 to array1 do
13316: LD_ADDR_VAR 0 4
13320: PUSH
13321: DOUBLE
13322: LD_INT 1
13324: DEC
13325: ST_TO_ADDR
13326: LD_VAR 0 1
13330: PUSH
13331: FOR_TO
13332: IFFALSE 13370
// if array1 [ i ] <> array2 [ i ] then
13334: LD_VAR 0 1
13338: PUSH
13339: LD_VAR 0 4
13343: ARRAY
13344: PUSH
13345: LD_VAR 0 2
13349: PUSH
13350: LD_VAR 0 4
13354: ARRAY
13355: NONEQUAL
13356: IFFALSE 13368
// begin result := false ;
13358: LD_ADDR_VAR 0 3
13362: PUSH
13363: LD_INT 0
13365: ST_TO_ADDR
// break ;
13366: GO 13370
// end ;
13368: GO 13331
13370: POP
13371: POP
// end ;
13372: LD_VAR 0 3
13376: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13377: LD_INT 0
13379: PPUSH
13380: PPUSH
13381: PPUSH
// pom := GetBase ( fac ) ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_VAR 0 1
13391: PPUSH
13392: CALL_OW 274
13396: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13397: LD_ADDR_VAR 0 4
13401: PUSH
13402: LD_VAR 0 2
13406: PUSH
13407: LD_INT 1
13409: ARRAY
13410: PPUSH
13411: LD_VAR 0 2
13415: PUSH
13416: LD_INT 2
13418: ARRAY
13419: PPUSH
13420: LD_VAR 0 2
13424: PUSH
13425: LD_INT 3
13427: ARRAY
13428: PPUSH
13429: LD_VAR 0 2
13433: PUSH
13434: LD_INT 4
13436: ARRAY
13437: PPUSH
13438: CALL_OW 449
13442: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13443: LD_ADDR_VAR 0 3
13447: PUSH
13448: LD_VAR 0 5
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: CALL_OW 275
13460: PUSH
13461: LD_VAR 0 4
13465: PUSH
13466: LD_INT 1
13468: ARRAY
13469: GREATEREQUAL
13470: PUSH
13471: LD_VAR 0 5
13475: PPUSH
13476: LD_INT 2
13478: PPUSH
13479: CALL_OW 275
13483: PUSH
13484: LD_VAR 0 4
13488: PUSH
13489: LD_INT 2
13491: ARRAY
13492: GREATEREQUAL
13493: AND
13494: PUSH
13495: LD_VAR 0 5
13499: PPUSH
13500: LD_INT 3
13502: PPUSH
13503: CALL_OW 275
13507: PUSH
13508: LD_VAR 0 4
13512: PUSH
13513: LD_INT 3
13515: ARRAY
13516: GREATEREQUAL
13517: AND
13518: ST_TO_ADDR
// end ;
13519: LD_VAR 0 3
13523: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13524: LD_INT 0
13526: PPUSH
13527: PPUSH
13528: PPUSH
13529: PPUSH
// pom := GetBase ( building ) ;
13530: LD_ADDR_VAR 0 3
13534: PUSH
13535: LD_VAR 0 1
13539: PPUSH
13540: CALL_OW 274
13544: ST_TO_ADDR
// if not pom then
13545: LD_VAR 0 3
13549: NOT
13550: IFFALSE 13554
// exit ;
13552: GO 13724
// btype := GetBType ( building ) ;
13554: LD_ADDR_VAR 0 5
13558: PUSH
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL_OW 266
13568: ST_TO_ADDR
// if btype = b_armoury then
13569: LD_VAR 0 5
13573: PUSH
13574: LD_INT 4
13576: EQUAL
13577: IFFALSE 13587
// btype := b_barracks ;
13579: LD_ADDR_VAR 0 5
13583: PUSH
13584: LD_INT 5
13586: ST_TO_ADDR
// if btype = b_depot then
13587: LD_VAR 0 5
13591: PUSH
13592: LD_INT 0
13594: EQUAL
13595: IFFALSE 13605
// btype := b_warehouse ;
13597: LD_ADDR_VAR 0 5
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
// if btype = b_workshop then
13605: LD_VAR 0 5
13609: PUSH
13610: LD_INT 2
13612: EQUAL
13613: IFFALSE 13623
// btype := b_factory ;
13615: LD_ADDR_VAR 0 5
13619: PUSH
13620: LD_INT 3
13622: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13623: LD_ADDR_VAR 0 4
13627: PUSH
13628: LD_VAR 0 5
13632: PPUSH
13633: LD_VAR 0 1
13637: PPUSH
13638: CALL_OW 248
13642: PPUSH
13643: CALL_OW 450
13647: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13648: LD_ADDR_VAR 0 2
13652: PUSH
13653: LD_VAR 0 3
13657: PPUSH
13658: LD_INT 1
13660: PPUSH
13661: CALL_OW 275
13665: PUSH
13666: LD_VAR 0 4
13670: PUSH
13671: LD_INT 1
13673: ARRAY
13674: GREATEREQUAL
13675: PUSH
13676: LD_VAR 0 3
13680: PPUSH
13681: LD_INT 2
13683: PPUSH
13684: CALL_OW 275
13688: PUSH
13689: LD_VAR 0 4
13693: PUSH
13694: LD_INT 2
13696: ARRAY
13697: GREATEREQUAL
13698: AND
13699: PUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 3
13707: PPUSH
13708: CALL_OW 275
13712: PUSH
13713: LD_VAR 0 4
13717: PUSH
13718: LD_INT 3
13720: ARRAY
13721: GREATEREQUAL
13722: AND
13723: ST_TO_ADDR
// end ;
13724: LD_VAR 0 2
13728: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13729: LD_INT 0
13731: PPUSH
13732: PPUSH
13733: PPUSH
// pom := GetBase ( building ) ;
13734: LD_ADDR_VAR 0 4
13738: PUSH
13739: LD_VAR 0 1
13743: PPUSH
13744: CALL_OW 274
13748: ST_TO_ADDR
// if not pom then
13749: LD_VAR 0 4
13753: NOT
13754: IFFALSE 13758
// exit ;
13756: GO 13859
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13758: LD_ADDR_VAR 0 5
13762: PUSH
13763: LD_VAR 0 2
13767: PPUSH
13768: LD_VAR 0 1
13772: PPUSH
13773: CALL_OW 248
13777: PPUSH
13778: CALL_OW 450
13782: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13783: LD_ADDR_VAR 0 3
13787: PUSH
13788: LD_VAR 0 4
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: CALL_OW 275
13800: PUSH
13801: LD_VAR 0 5
13805: PUSH
13806: LD_INT 1
13808: ARRAY
13809: GREATEREQUAL
13810: PUSH
13811: LD_VAR 0 4
13815: PPUSH
13816: LD_INT 2
13818: PPUSH
13819: CALL_OW 275
13823: PUSH
13824: LD_VAR 0 5
13828: PUSH
13829: LD_INT 2
13831: ARRAY
13832: GREATEREQUAL
13833: AND
13834: PUSH
13835: LD_VAR 0 4
13839: PPUSH
13840: LD_INT 3
13842: PPUSH
13843: CALL_OW 275
13847: PUSH
13848: LD_VAR 0 5
13852: PUSH
13853: LD_INT 3
13855: ARRAY
13856: GREATEREQUAL
13857: AND
13858: ST_TO_ADDR
// end ;
13859: LD_VAR 0 3
13863: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13864: LD_INT 0
13866: PPUSH
13867: PPUSH
13868: PPUSH
13869: PPUSH
13870: PPUSH
13871: PPUSH
13872: PPUSH
13873: PPUSH
13874: PPUSH
13875: PPUSH
13876: PPUSH
// result := false ;
13877: LD_ADDR_VAR 0 8
13881: PUSH
13882: LD_INT 0
13884: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13885: LD_VAR 0 5
13889: NOT
13890: PUSH
13891: LD_VAR 0 1
13895: NOT
13896: OR
13897: PUSH
13898: LD_VAR 0 2
13902: NOT
13903: OR
13904: PUSH
13905: LD_VAR 0 3
13909: NOT
13910: OR
13911: IFFALSE 13915
// exit ;
13913: GO 14729
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13915: LD_ADDR_VAR 0 14
13919: PUSH
13920: LD_VAR 0 1
13924: PPUSH
13925: LD_VAR 0 2
13929: PPUSH
13930: LD_VAR 0 3
13934: PPUSH
13935: LD_VAR 0 4
13939: PPUSH
13940: LD_VAR 0 5
13944: PUSH
13945: LD_INT 1
13947: ARRAY
13948: PPUSH
13949: CALL_OW 248
13953: PPUSH
13954: LD_INT 0
13956: PPUSH
13957: CALL 15982 0 6
13961: ST_TO_ADDR
// if not hexes then
13962: LD_VAR 0 14
13966: NOT
13967: IFFALSE 13971
// exit ;
13969: GO 14729
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13971: LD_ADDR_VAR 0 17
13975: PUSH
13976: LD_VAR 0 5
13980: PPUSH
13981: LD_INT 22
13983: PUSH
13984: LD_VAR 0 13
13988: PPUSH
13989: CALL_OW 255
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 2
14000: PUSH
14001: LD_INT 30
14003: PUSH
14004: LD_INT 0
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 30
14013: PUSH
14014: LD_INT 1
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PPUSH
14030: CALL_OW 72
14034: ST_TO_ADDR
// for i = 1 to hexes do
14035: LD_ADDR_VAR 0 9
14039: PUSH
14040: DOUBLE
14041: LD_INT 1
14043: DEC
14044: ST_TO_ADDR
14045: LD_VAR 0 14
14049: PUSH
14050: FOR_TO
14051: IFFALSE 14727
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14053: LD_ADDR_VAR 0 13
14057: PUSH
14058: LD_VAR 0 14
14062: PUSH
14063: LD_VAR 0 9
14067: ARRAY
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PPUSH
14073: LD_VAR 0 14
14077: PUSH
14078: LD_VAR 0 9
14082: ARRAY
14083: PUSH
14084: LD_INT 2
14086: ARRAY
14087: PPUSH
14088: CALL_OW 428
14092: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14093: LD_VAR 0 14
14097: PUSH
14098: LD_VAR 0 9
14102: ARRAY
14103: PUSH
14104: LD_INT 1
14106: ARRAY
14107: PPUSH
14108: LD_VAR 0 14
14112: PUSH
14113: LD_VAR 0 9
14117: ARRAY
14118: PUSH
14119: LD_INT 2
14121: ARRAY
14122: PPUSH
14123: CALL_OW 351
14127: PUSH
14128: LD_VAR 0 14
14132: PUSH
14133: LD_VAR 0 9
14137: ARRAY
14138: PUSH
14139: LD_INT 1
14141: ARRAY
14142: PPUSH
14143: LD_VAR 0 14
14147: PUSH
14148: LD_VAR 0 9
14152: ARRAY
14153: PUSH
14154: LD_INT 2
14156: ARRAY
14157: PPUSH
14158: CALL_OW 488
14162: NOT
14163: OR
14164: PUSH
14165: LD_VAR 0 13
14169: PPUSH
14170: CALL_OW 247
14174: PUSH
14175: LD_INT 3
14177: EQUAL
14178: OR
14179: IFFALSE 14185
// exit ;
14181: POP
14182: POP
14183: GO 14729
// if not tmp then
14185: LD_VAR 0 13
14189: NOT
14190: IFFALSE 14194
// continue ;
14192: GO 14050
// result := true ;
14194: LD_ADDR_VAR 0 8
14198: PUSH
14199: LD_INT 1
14201: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14202: LD_VAR 0 6
14206: PUSH
14207: LD_VAR 0 13
14211: PPUSH
14212: CALL_OW 247
14216: PUSH
14217: LD_INT 2
14219: EQUAL
14220: AND
14221: PUSH
14222: LD_VAR 0 13
14226: PPUSH
14227: CALL_OW 263
14231: PUSH
14232: LD_INT 1
14234: EQUAL
14235: AND
14236: IFFALSE 14400
// begin if IsDrivenBy ( tmp ) then
14238: LD_VAR 0 13
14242: PPUSH
14243: CALL_OW 311
14247: IFFALSE 14251
// continue ;
14249: GO 14050
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14251: LD_VAR 0 6
14255: PPUSH
14256: LD_INT 3
14258: PUSH
14259: LD_INT 60
14261: PUSH
14262: EMPTY
14263: LIST
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 3
14271: PUSH
14272: LD_INT 55
14274: PUSH
14275: EMPTY
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PPUSH
14286: CALL_OW 72
14290: IFFALSE 14398
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14292: LD_ADDR_VAR 0 18
14296: PUSH
14297: LD_VAR 0 6
14301: PPUSH
14302: LD_INT 3
14304: PUSH
14305: LD_INT 60
14307: PUSH
14308: EMPTY
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 3
14317: PUSH
14318: LD_INT 55
14320: PUSH
14321: EMPTY
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PPUSH
14332: CALL_OW 72
14336: PUSH
14337: LD_INT 1
14339: ARRAY
14340: ST_TO_ADDR
// if IsInUnit ( driver ) then
14341: LD_VAR 0 18
14345: PPUSH
14346: CALL_OW 310
14350: IFFALSE 14361
// ComExit ( driver ) ;
14352: LD_VAR 0 18
14356: PPUSH
14357: CALL 39783 0 1
// AddComEnterUnit ( driver , tmp ) ;
14361: LD_VAR 0 18
14365: PPUSH
14366: LD_VAR 0 13
14370: PPUSH
14371: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14375: LD_VAR 0 18
14379: PPUSH
14380: LD_VAR 0 7
14384: PPUSH
14385: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14389: LD_VAR 0 18
14393: PPUSH
14394: CALL_OW 181
// end ; continue ;
14398: GO 14050
// end ; if not cleaners or not tmp in cleaners then
14400: LD_VAR 0 6
14404: NOT
14405: PUSH
14406: LD_VAR 0 13
14410: PUSH
14411: LD_VAR 0 6
14415: IN
14416: NOT
14417: OR
14418: IFFALSE 14725
// begin if dep then
14420: LD_VAR 0 17
14424: IFFALSE 14560
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14426: LD_ADDR_VAR 0 16
14430: PUSH
14431: LD_VAR 0 17
14435: PUSH
14436: LD_INT 1
14438: ARRAY
14439: PPUSH
14440: CALL_OW 250
14444: PPUSH
14445: LD_VAR 0 17
14449: PUSH
14450: LD_INT 1
14452: ARRAY
14453: PPUSH
14454: CALL_OW 254
14458: PPUSH
14459: LD_INT 5
14461: PPUSH
14462: CALL_OW 272
14466: PUSH
14467: LD_VAR 0 17
14471: PUSH
14472: LD_INT 1
14474: ARRAY
14475: PPUSH
14476: CALL_OW 251
14480: PPUSH
14481: LD_VAR 0 17
14485: PUSH
14486: LD_INT 1
14488: ARRAY
14489: PPUSH
14490: CALL_OW 254
14494: PPUSH
14495: LD_INT 5
14497: PPUSH
14498: CALL_OW 273
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14507: LD_VAR 0 16
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: PPUSH
14516: LD_VAR 0 16
14520: PUSH
14521: LD_INT 2
14523: ARRAY
14524: PPUSH
14525: CALL_OW 488
14529: IFFALSE 14560
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14531: LD_VAR 0 13
14535: PPUSH
14536: LD_VAR 0 16
14540: PUSH
14541: LD_INT 1
14543: ARRAY
14544: PPUSH
14545: LD_VAR 0 16
14549: PUSH
14550: LD_INT 2
14552: ARRAY
14553: PPUSH
14554: CALL_OW 111
// continue ;
14558: GO 14050
// end ; end ; r := GetDir ( tmp ) ;
14560: LD_ADDR_VAR 0 15
14564: PUSH
14565: LD_VAR 0 13
14569: PPUSH
14570: CALL_OW 254
14574: ST_TO_ADDR
// if r = 5 then
14575: LD_VAR 0 15
14579: PUSH
14580: LD_INT 5
14582: EQUAL
14583: IFFALSE 14593
// r := 0 ;
14585: LD_ADDR_VAR 0 15
14589: PUSH
14590: LD_INT 0
14592: ST_TO_ADDR
// for j = r to 5 do
14593: LD_ADDR_VAR 0 10
14597: PUSH
14598: DOUBLE
14599: LD_VAR 0 15
14603: DEC
14604: ST_TO_ADDR
14605: LD_INT 5
14607: PUSH
14608: FOR_TO
14609: IFFALSE 14723
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14611: LD_ADDR_VAR 0 11
14615: PUSH
14616: LD_VAR 0 13
14620: PPUSH
14621: CALL_OW 250
14625: PPUSH
14626: LD_VAR 0 10
14630: PPUSH
14631: LD_INT 2
14633: PPUSH
14634: CALL_OW 272
14638: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14639: LD_ADDR_VAR 0 12
14643: PUSH
14644: LD_VAR 0 13
14648: PPUSH
14649: CALL_OW 251
14653: PPUSH
14654: LD_VAR 0 10
14658: PPUSH
14659: LD_INT 2
14661: PPUSH
14662: CALL_OW 273
14666: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14667: LD_VAR 0 11
14671: PPUSH
14672: LD_VAR 0 12
14676: PPUSH
14677: CALL_OW 488
14681: PUSH
14682: LD_VAR 0 11
14686: PPUSH
14687: LD_VAR 0 12
14691: PPUSH
14692: CALL_OW 428
14696: NOT
14697: AND
14698: IFFALSE 14721
// begin ComMoveXY ( tmp , _x , _y ) ;
14700: LD_VAR 0 13
14704: PPUSH
14705: LD_VAR 0 11
14709: PPUSH
14710: LD_VAR 0 12
14714: PPUSH
14715: CALL_OW 111
// break ;
14719: GO 14723
// end ; end ;
14721: GO 14608
14723: POP
14724: POP
// end ; end ;
14725: GO 14050
14727: POP
14728: POP
// end ;
14729: LD_VAR 0 8
14733: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14734: LD_INT 0
14736: PPUSH
// result := true ;
14737: LD_ADDR_VAR 0 3
14741: PUSH
14742: LD_INT 1
14744: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14745: LD_VAR 0 2
14749: PUSH
14750: LD_INT 24
14752: DOUBLE
14753: EQUAL
14754: IFTRUE 14764
14756: LD_INT 33
14758: DOUBLE
14759: EQUAL
14760: IFTRUE 14764
14762: GO 14789
14764: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14765: LD_ADDR_VAR 0 3
14769: PUSH
14770: LD_INT 32
14772: PPUSH
14773: LD_VAR 0 1
14777: PPUSH
14778: CALL_OW 321
14782: PUSH
14783: LD_INT 2
14785: EQUAL
14786: ST_TO_ADDR
14787: GO 15105
14789: LD_INT 20
14791: DOUBLE
14792: EQUAL
14793: IFTRUE 14797
14795: GO 14822
14797: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14798: LD_ADDR_VAR 0 3
14802: PUSH
14803: LD_INT 6
14805: PPUSH
14806: LD_VAR 0 1
14810: PPUSH
14811: CALL_OW 321
14815: PUSH
14816: LD_INT 2
14818: EQUAL
14819: ST_TO_ADDR
14820: GO 15105
14822: LD_INT 22
14824: DOUBLE
14825: EQUAL
14826: IFTRUE 14836
14828: LD_INT 36
14830: DOUBLE
14831: EQUAL
14832: IFTRUE 14836
14834: GO 14861
14836: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14837: LD_ADDR_VAR 0 3
14841: PUSH
14842: LD_INT 15
14844: PPUSH
14845: LD_VAR 0 1
14849: PPUSH
14850: CALL_OW 321
14854: PUSH
14855: LD_INT 2
14857: EQUAL
14858: ST_TO_ADDR
14859: GO 15105
14861: LD_INT 30
14863: DOUBLE
14864: EQUAL
14865: IFTRUE 14869
14867: GO 14894
14869: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14870: LD_ADDR_VAR 0 3
14874: PUSH
14875: LD_INT 20
14877: PPUSH
14878: LD_VAR 0 1
14882: PPUSH
14883: CALL_OW 321
14887: PUSH
14888: LD_INT 2
14890: EQUAL
14891: ST_TO_ADDR
14892: GO 15105
14894: LD_INT 28
14896: DOUBLE
14897: EQUAL
14898: IFTRUE 14908
14900: LD_INT 21
14902: DOUBLE
14903: EQUAL
14904: IFTRUE 14908
14906: GO 14933
14908: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14909: LD_ADDR_VAR 0 3
14913: PUSH
14914: LD_INT 21
14916: PPUSH
14917: LD_VAR 0 1
14921: PPUSH
14922: CALL_OW 321
14926: PUSH
14927: LD_INT 2
14929: EQUAL
14930: ST_TO_ADDR
14931: GO 15105
14933: LD_INT 16
14935: DOUBLE
14936: EQUAL
14937: IFTRUE 14941
14939: GO 14966
14941: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14942: LD_ADDR_VAR 0 3
14946: PUSH
14947: LD_INT 84
14949: PPUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 321
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: ST_TO_ADDR
14964: GO 15105
14966: LD_INT 19
14968: DOUBLE
14969: EQUAL
14970: IFTRUE 14980
14972: LD_INT 23
14974: DOUBLE
14975: EQUAL
14976: IFTRUE 14980
14978: GO 15005
14980: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14981: LD_ADDR_VAR 0 3
14985: PUSH
14986: LD_INT 83
14988: PPUSH
14989: LD_VAR 0 1
14993: PPUSH
14994: CALL_OW 321
14998: PUSH
14999: LD_INT 2
15001: EQUAL
15002: ST_TO_ADDR
15003: GO 15105
15005: LD_INT 17
15007: DOUBLE
15008: EQUAL
15009: IFTRUE 15013
15011: GO 15038
15013: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15014: LD_ADDR_VAR 0 3
15018: PUSH
15019: LD_INT 39
15021: PPUSH
15022: LD_VAR 0 1
15026: PPUSH
15027: CALL_OW 321
15031: PUSH
15032: LD_INT 2
15034: EQUAL
15035: ST_TO_ADDR
15036: GO 15105
15038: LD_INT 18
15040: DOUBLE
15041: EQUAL
15042: IFTRUE 15046
15044: GO 15071
15046: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15047: LD_ADDR_VAR 0 3
15051: PUSH
15052: LD_INT 40
15054: PPUSH
15055: LD_VAR 0 1
15059: PPUSH
15060: CALL_OW 321
15064: PUSH
15065: LD_INT 2
15067: EQUAL
15068: ST_TO_ADDR
15069: GO 15105
15071: LD_INT 27
15073: DOUBLE
15074: EQUAL
15075: IFTRUE 15079
15077: GO 15104
15079: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15080: LD_ADDR_VAR 0 3
15084: PUSH
15085: LD_INT 35
15087: PPUSH
15088: LD_VAR 0 1
15092: PPUSH
15093: CALL_OW 321
15097: PUSH
15098: LD_INT 2
15100: EQUAL
15101: ST_TO_ADDR
15102: GO 15105
15104: POP
// end ;
15105: LD_VAR 0 3
15109: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
15118: PPUSH
15119: PPUSH
15120: PPUSH
15121: PPUSH
15122: PPUSH
// result := false ;
15123: LD_ADDR_VAR 0 6
15127: PUSH
15128: LD_INT 0
15130: ST_TO_ADDR
// if btype = b_depot then
15131: LD_VAR 0 2
15135: PUSH
15136: LD_INT 0
15138: EQUAL
15139: IFFALSE 15151
// begin result := true ;
15141: LD_ADDR_VAR 0 6
15145: PUSH
15146: LD_INT 1
15148: ST_TO_ADDR
// exit ;
15149: GO 15977
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15151: LD_VAR 0 1
15155: NOT
15156: PUSH
15157: LD_VAR 0 1
15161: PPUSH
15162: CALL_OW 266
15166: PUSH
15167: LD_INT 0
15169: PUSH
15170: LD_INT 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: IN
15177: NOT
15178: OR
15179: PUSH
15180: LD_VAR 0 2
15184: NOT
15185: OR
15186: PUSH
15187: LD_VAR 0 5
15191: PUSH
15192: LD_INT 0
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: LD_INT 3
15203: PUSH
15204: LD_INT 4
15206: PUSH
15207: LD_INT 5
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: IN
15218: NOT
15219: OR
15220: PUSH
15221: LD_VAR 0 3
15225: PPUSH
15226: LD_VAR 0 4
15230: PPUSH
15231: CALL_OW 488
15235: NOT
15236: OR
15237: IFFALSE 15241
// exit ;
15239: GO 15977
// side := GetSide ( depot ) ;
15241: LD_ADDR_VAR 0 9
15245: PUSH
15246: LD_VAR 0 1
15250: PPUSH
15251: CALL_OW 255
15255: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15256: LD_VAR 0 9
15260: PPUSH
15261: LD_VAR 0 2
15265: PPUSH
15266: CALL 14734 0 2
15270: NOT
15271: IFFALSE 15275
// exit ;
15273: GO 15977
// pom := GetBase ( depot ) ;
15275: LD_ADDR_VAR 0 10
15279: PUSH
15280: LD_VAR 0 1
15284: PPUSH
15285: CALL_OW 274
15289: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15290: LD_ADDR_VAR 0 11
15294: PUSH
15295: LD_VAR 0 2
15299: PPUSH
15300: LD_VAR 0 1
15304: PPUSH
15305: CALL_OW 248
15309: PPUSH
15310: CALL_OW 450
15314: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15315: LD_VAR 0 10
15319: PPUSH
15320: LD_INT 1
15322: PPUSH
15323: CALL_OW 275
15327: PUSH
15328: LD_VAR 0 11
15332: PUSH
15333: LD_INT 1
15335: ARRAY
15336: GREATEREQUAL
15337: PUSH
15338: LD_VAR 0 10
15342: PPUSH
15343: LD_INT 2
15345: PPUSH
15346: CALL_OW 275
15350: PUSH
15351: LD_VAR 0 11
15355: PUSH
15356: LD_INT 2
15358: ARRAY
15359: GREATEREQUAL
15360: AND
15361: PUSH
15362: LD_VAR 0 10
15366: PPUSH
15367: LD_INT 3
15369: PPUSH
15370: CALL_OW 275
15374: PUSH
15375: LD_VAR 0 11
15379: PUSH
15380: LD_INT 3
15382: ARRAY
15383: GREATEREQUAL
15384: AND
15385: NOT
15386: IFFALSE 15390
// exit ;
15388: GO 15977
// if GetBType ( depot ) = b_depot then
15390: LD_VAR 0 1
15394: PPUSH
15395: CALL_OW 266
15399: PUSH
15400: LD_INT 0
15402: EQUAL
15403: IFFALSE 15415
// dist := 28 else
15405: LD_ADDR_VAR 0 14
15409: PUSH
15410: LD_INT 28
15412: ST_TO_ADDR
15413: GO 15423
// dist := 36 ;
15415: LD_ADDR_VAR 0 14
15419: PUSH
15420: LD_INT 36
15422: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15423: LD_VAR 0 1
15427: PPUSH
15428: LD_VAR 0 3
15432: PPUSH
15433: LD_VAR 0 4
15437: PPUSH
15438: CALL_OW 297
15442: PUSH
15443: LD_VAR 0 14
15447: GREATER
15448: IFFALSE 15452
// exit ;
15450: GO 15977
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15452: LD_ADDR_VAR 0 12
15456: PUSH
15457: LD_VAR 0 2
15461: PPUSH
15462: LD_VAR 0 3
15466: PPUSH
15467: LD_VAR 0 4
15471: PPUSH
15472: LD_VAR 0 5
15476: PPUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 248
15486: PPUSH
15487: LD_INT 0
15489: PPUSH
15490: CALL 15982 0 6
15494: ST_TO_ADDR
// if not hexes then
15495: LD_VAR 0 12
15499: NOT
15500: IFFALSE 15504
// exit ;
15502: GO 15977
// hex := GetHexInfo ( x , y ) ;
15504: LD_ADDR_VAR 0 15
15508: PUSH
15509: LD_VAR 0 3
15513: PPUSH
15514: LD_VAR 0 4
15518: PPUSH
15519: CALL_OW 546
15523: ST_TO_ADDR
// if hex [ 1 ] then
15524: LD_VAR 0 15
15528: PUSH
15529: LD_INT 1
15531: ARRAY
15532: IFFALSE 15536
// exit ;
15534: GO 15977
// height := hex [ 2 ] ;
15536: LD_ADDR_VAR 0 13
15540: PUSH
15541: LD_VAR 0 15
15545: PUSH
15546: LD_INT 2
15548: ARRAY
15549: ST_TO_ADDR
// for i = 1 to hexes do
15550: LD_ADDR_VAR 0 7
15554: PUSH
15555: DOUBLE
15556: LD_INT 1
15558: DEC
15559: ST_TO_ADDR
15560: LD_VAR 0 12
15564: PUSH
15565: FOR_TO
15566: IFFALSE 15896
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15568: LD_VAR 0 12
15572: PUSH
15573: LD_VAR 0 7
15577: ARRAY
15578: PUSH
15579: LD_INT 1
15581: ARRAY
15582: PPUSH
15583: LD_VAR 0 12
15587: PUSH
15588: LD_VAR 0 7
15592: ARRAY
15593: PUSH
15594: LD_INT 2
15596: ARRAY
15597: PPUSH
15598: CALL_OW 488
15602: NOT
15603: PUSH
15604: LD_VAR 0 12
15608: PUSH
15609: LD_VAR 0 7
15613: ARRAY
15614: PUSH
15615: LD_INT 1
15617: ARRAY
15618: PPUSH
15619: LD_VAR 0 12
15623: PUSH
15624: LD_VAR 0 7
15628: ARRAY
15629: PUSH
15630: LD_INT 2
15632: ARRAY
15633: PPUSH
15634: CALL_OW 428
15638: PUSH
15639: LD_INT 0
15641: GREATER
15642: OR
15643: PUSH
15644: LD_VAR 0 12
15648: PUSH
15649: LD_VAR 0 7
15653: ARRAY
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: LD_VAR 0 12
15663: PUSH
15664: LD_VAR 0 7
15668: ARRAY
15669: PUSH
15670: LD_INT 2
15672: ARRAY
15673: PPUSH
15674: CALL_OW 351
15678: OR
15679: IFFALSE 15685
// exit ;
15681: POP
15682: POP
15683: GO 15977
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15685: LD_ADDR_VAR 0 8
15689: PUSH
15690: LD_VAR 0 12
15694: PUSH
15695: LD_VAR 0 7
15699: ARRAY
15700: PUSH
15701: LD_INT 1
15703: ARRAY
15704: PPUSH
15705: LD_VAR 0 12
15709: PUSH
15710: LD_VAR 0 7
15714: ARRAY
15715: PUSH
15716: LD_INT 2
15718: ARRAY
15719: PPUSH
15720: CALL_OW 546
15724: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15725: LD_VAR 0 8
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PUSH
15734: LD_VAR 0 8
15738: PUSH
15739: LD_INT 2
15741: ARRAY
15742: PUSH
15743: LD_VAR 0 13
15747: PUSH
15748: LD_INT 2
15750: PLUS
15751: GREATER
15752: OR
15753: PUSH
15754: LD_VAR 0 8
15758: PUSH
15759: LD_INT 2
15761: ARRAY
15762: PUSH
15763: LD_VAR 0 13
15767: PUSH
15768: LD_INT 2
15770: MINUS
15771: LESS
15772: OR
15773: PUSH
15774: LD_VAR 0 8
15778: PUSH
15779: LD_INT 3
15781: ARRAY
15782: PUSH
15783: LD_INT 0
15785: PUSH
15786: LD_INT 8
15788: PUSH
15789: LD_INT 9
15791: PUSH
15792: LD_INT 10
15794: PUSH
15795: LD_INT 11
15797: PUSH
15798: LD_INT 12
15800: PUSH
15801: LD_INT 13
15803: PUSH
15804: LD_INT 16
15806: PUSH
15807: LD_INT 17
15809: PUSH
15810: LD_INT 18
15812: PUSH
15813: LD_INT 19
15815: PUSH
15816: LD_INT 20
15818: PUSH
15819: LD_INT 21
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: IN
15837: NOT
15838: OR
15839: PUSH
15840: LD_VAR 0 8
15844: PUSH
15845: LD_INT 5
15847: ARRAY
15848: NOT
15849: OR
15850: PUSH
15851: LD_VAR 0 8
15855: PUSH
15856: LD_INT 6
15858: ARRAY
15859: PUSH
15860: LD_INT 1
15862: PUSH
15863: LD_INT 2
15865: PUSH
15866: LD_INT 7
15868: PUSH
15869: LD_INT 9
15871: PUSH
15872: LD_INT 10
15874: PUSH
15875: LD_INT 11
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: IN
15886: NOT
15887: OR
15888: IFFALSE 15894
// exit ;
15890: POP
15891: POP
15892: GO 15977
// end ;
15894: GO 15565
15896: POP
15897: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15898: LD_VAR 0 9
15902: PPUSH
15903: LD_VAR 0 3
15907: PPUSH
15908: LD_VAR 0 4
15912: PPUSH
15913: LD_INT 20
15915: PPUSH
15916: CALL 7900 0 4
15920: PUSH
15921: LD_INT 4
15923: ARRAY
15924: IFFALSE 15928
// exit ;
15926: GO 15977
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15928: LD_VAR 0 2
15932: PUSH
15933: LD_INT 29
15935: PUSH
15936: LD_INT 30
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: IN
15943: PUSH
15944: LD_VAR 0 3
15948: PPUSH
15949: LD_VAR 0 4
15953: PPUSH
15954: LD_VAR 0 9
15958: PPUSH
15959: CALL_OW 440
15963: NOT
15964: AND
15965: IFFALSE 15969
// exit ;
15967: GO 15977
// result := true ;
15969: LD_ADDR_VAR 0 6
15973: PUSH
15974: LD_INT 1
15976: ST_TO_ADDR
// end ;
15977: LD_VAR 0 6
15981: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15982: LD_INT 0
15984: PPUSH
15985: PPUSH
15986: PPUSH
15987: PPUSH
15988: PPUSH
15989: PPUSH
15990: PPUSH
15991: PPUSH
15992: PPUSH
15993: PPUSH
15994: PPUSH
15995: PPUSH
15996: PPUSH
15997: PPUSH
15998: PPUSH
15999: PPUSH
16000: PPUSH
16001: PPUSH
16002: PPUSH
16003: PPUSH
16004: PPUSH
16005: PPUSH
16006: PPUSH
16007: PPUSH
16008: PPUSH
16009: PPUSH
16010: PPUSH
16011: PPUSH
16012: PPUSH
16013: PPUSH
16014: PPUSH
16015: PPUSH
16016: PPUSH
16017: PPUSH
16018: PPUSH
16019: PPUSH
16020: PPUSH
16021: PPUSH
16022: PPUSH
16023: PPUSH
16024: PPUSH
16025: PPUSH
16026: PPUSH
16027: PPUSH
16028: PPUSH
16029: PPUSH
16030: PPUSH
16031: PPUSH
16032: PPUSH
16033: PPUSH
16034: PPUSH
16035: PPUSH
16036: PPUSH
16037: PPUSH
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
// result = [ ] ;
16042: LD_ADDR_VAR 0 7
16046: PUSH
16047: EMPTY
16048: ST_TO_ADDR
// temp_list = [ ] ;
16049: LD_ADDR_VAR 0 9
16053: PUSH
16054: EMPTY
16055: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16056: LD_VAR 0 4
16060: PUSH
16061: LD_INT 0
16063: PUSH
16064: LD_INT 1
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 3
16072: PUSH
16073: LD_INT 4
16075: PUSH
16076: LD_INT 5
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: IN
16087: NOT
16088: PUSH
16089: LD_VAR 0 1
16093: PUSH
16094: LD_INT 0
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: IN
16104: PUSH
16105: LD_VAR 0 5
16109: PUSH
16110: LD_INT 1
16112: PUSH
16113: LD_INT 2
16115: PUSH
16116: LD_INT 3
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: LIST
16123: IN
16124: NOT
16125: AND
16126: OR
16127: IFFALSE 16131
// exit ;
16129: GO 34522
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16131: LD_VAR 0 1
16135: PUSH
16136: LD_INT 6
16138: PUSH
16139: LD_INT 7
16141: PUSH
16142: LD_INT 8
16144: PUSH
16145: LD_INT 13
16147: PUSH
16148: LD_INT 12
16150: PUSH
16151: LD_INT 15
16153: PUSH
16154: LD_INT 11
16156: PUSH
16157: LD_INT 14
16159: PUSH
16160: LD_INT 10
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: IN
16174: IFFALSE 16184
// btype = b_lab ;
16176: LD_ADDR_VAR 0 1
16180: PUSH
16181: LD_INT 6
16183: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16184: LD_VAR 0 6
16188: PUSH
16189: LD_INT 0
16191: PUSH
16192: LD_INT 1
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: IN
16203: NOT
16204: PUSH
16205: LD_VAR 0 1
16209: PUSH
16210: LD_INT 0
16212: PUSH
16213: LD_INT 1
16215: PUSH
16216: LD_INT 2
16218: PUSH
16219: LD_INT 3
16221: PUSH
16222: LD_INT 6
16224: PUSH
16225: LD_INT 36
16227: PUSH
16228: LD_INT 4
16230: PUSH
16231: LD_INT 5
16233: PUSH
16234: LD_INT 31
16236: PUSH
16237: LD_INT 32
16239: PUSH
16240: LD_INT 33
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: IN
16256: NOT
16257: PUSH
16258: LD_VAR 0 6
16262: PUSH
16263: LD_INT 1
16265: EQUAL
16266: AND
16267: OR
16268: PUSH
16269: LD_VAR 0 1
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 3
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: IN
16284: NOT
16285: PUSH
16286: LD_VAR 0 6
16290: PUSH
16291: LD_INT 2
16293: EQUAL
16294: AND
16295: OR
16296: IFFALSE 16306
// mode = 0 ;
16298: LD_ADDR_VAR 0 6
16302: PUSH
16303: LD_INT 0
16305: ST_TO_ADDR
// case mode of 0 :
16306: LD_VAR 0 6
16310: PUSH
16311: LD_INT 0
16313: DOUBLE
16314: EQUAL
16315: IFTRUE 16319
16317: GO 27772
16319: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16320: LD_ADDR_VAR 0 11
16324: PUSH
16325: LD_INT 0
16327: PUSH
16328: LD_INT 0
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 0
16337: PUSH
16338: LD_INT 1
16340: NEG
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: LD_INT 0
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 1
16358: PUSH
16359: LD_INT 1
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 0
16368: PUSH
16369: LD_INT 1
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 1
16378: NEG
16379: PUSH
16380: LD_INT 0
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 1
16389: NEG
16390: PUSH
16391: LD_INT 1
16393: NEG
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 1
16401: NEG
16402: PUSH
16403: LD_INT 2
16405: NEG
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 0
16413: PUSH
16414: LD_INT 2
16416: NEG
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: LD_INT 1
16427: NEG
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 1
16435: PUSH
16436: LD_INT 2
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 0
16445: PUSH
16446: LD_INT 2
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 1
16455: NEG
16456: PUSH
16457: LD_INT 1
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 3
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 0
16476: PUSH
16477: LD_INT 3
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16513: LD_ADDR_VAR 0 12
16517: PUSH
16518: LD_INT 0
16520: PUSH
16521: LD_INT 0
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 0
16530: PUSH
16531: LD_INT 1
16533: NEG
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: LD_INT 0
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 1
16551: PUSH
16552: LD_INT 1
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 0
16561: PUSH
16562: LD_INT 1
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 1
16571: NEG
16572: PUSH
16573: LD_INT 0
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 1
16582: NEG
16583: PUSH
16584: LD_INT 1
16586: NEG
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 1
16594: PUSH
16595: LD_INT 1
16597: NEG
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 2
16605: PUSH
16606: LD_INT 0
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 2
16615: PUSH
16616: LD_INT 1
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 1
16625: NEG
16626: PUSH
16627: LD_INT 1
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 2
16636: NEG
16637: PUSH
16638: LD_INT 0
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 2
16647: NEG
16648: PUSH
16649: LD_INT 1
16651: NEG
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 2
16659: NEG
16660: PUSH
16661: LD_INT 1
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 3
16670: NEG
16671: PUSH
16672: LD_INT 0
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 3
16681: NEG
16682: PUSH
16683: LD_INT 1
16685: NEG
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16709: LD_ADDR_VAR 0 13
16713: PUSH
16714: LD_INT 0
16716: PUSH
16717: LD_INT 0
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 0
16726: PUSH
16727: LD_INT 1
16729: NEG
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: LD_INT 0
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: LD_INT 1
16747: PUSH
16748: LD_INT 1
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 0
16757: PUSH
16758: LD_INT 1
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 1
16767: NEG
16768: PUSH
16769: LD_INT 0
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 1
16778: NEG
16779: PUSH
16780: LD_INT 1
16782: NEG
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 1
16790: NEG
16791: PUSH
16792: LD_INT 2
16794: NEG
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 2
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 2
16812: PUSH
16813: LD_INT 2
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 1
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 2
16832: NEG
16833: PUSH
16834: LD_INT 1
16836: NEG
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 2
16844: NEG
16845: PUSH
16846: LD_INT 2
16848: NEG
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 2
16856: NEG
16857: PUSH
16858: LD_INT 3
16860: NEG
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: LD_INT 3
16868: NEG
16869: PUSH
16870: LD_INT 2
16872: NEG
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 3
16880: NEG
16881: PUSH
16882: LD_INT 3
16884: NEG
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16908: LD_ADDR_VAR 0 14
16912: PUSH
16913: LD_INT 0
16915: PUSH
16916: LD_INT 0
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 0
16925: PUSH
16926: LD_INT 1
16928: NEG
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 1
16936: PUSH
16937: LD_INT 0
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: LD_INT 1
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 0
16956: PUSH
16957: LD_INT 1
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 1
16966: NEG
16967: PUSH
16968: LD_INT 0
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 1
16977: NEG
16978: PUSH
16979: LD_INT 1
16981: NEG
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 1
16989: NEG
16990: PUSH
16991: LD_INT 2
16993: NEG
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 0
17001: PUSH
17002: LD_INT 2
17004: NEG
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: LD_INT 1
17015: NEG
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 0
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 1
17043: NEG
17044: PUSH
17045: LD_INT 1
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 1
17054: NEG
17055: PUSH
17056: LD_INT 3
17058: NEG
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 0
17066: PUSH
17067: LD_INT 3
17069: NEG
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 1
17077: PUSH
17078: LD_INT 2
17080: NEG
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17104: LD_ADDR_VAR 0 15
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: LD_INT 0
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 0
17121: PUSH
17122: LD_INT 1
17124: NEG
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: LD_INT 0
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 1
17142: PUSH
17143: LD_INT 1
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 0
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 1
17162: NEG
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: NEG
17174: PUSH
17175: LD_INT 1
17177: NEG
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 1
17185: PUSH
17186: LD_INT 1
17188: NEG
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: LD_INT 1
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 1
17216: NEG
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 2
17227: NEG
17228: PUSH
17229: LD_INT 0
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 2
17238: NEG
17239: PUSH
17240: LD_INT 1
17242: NEG
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 2
17250: PUSH
17251: LD_INT 1
17253: NEG
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 3
17261: PUSH
17262: LD_INT 0
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 3
17271: PUSH
17272: LD_INT 1
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17297: LD_ADDR_VAR 0 16
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: LD_INT 0
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 0
17314: PUSH
17315: LD_INT 1
17317: NEG
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 1
17325: PUSH
17326: LD_INT 0
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 1
17335: PUSH
17336: LD_INT 1
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 0
17345: PUSH
17346: LD_INT 1
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 1
17355: NEG
17356: PUSH
17357: LD_INT 0
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 1
17366: NEG
17367: PUSH
17368: LD_INT 1
17370: NEG
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 1
17378: NEG
17379: PUSH
17380: LD_INT 2
17382: NEG
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: LD_INT 1
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: LD_INT 2
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 1
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 2
17420: NEG
17421: PUSH
17422: LD_INT 1
17424: NEG
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 2
17432: NEG
17433: PUSH
17434: LD_INT 2
17436: NEG
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 3
17444: PUSH
17445: LD_INT 2
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 3
17454: PUSH
17455: LD_INT 3
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: LD_INT 3
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17490: LD_ADDR_VAR 0 17
17494: PUSH
17495: LD_INT 0
17497: PUSH
17498: LD_INT 0
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 0
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: LD_INT 0
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 1
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 0
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 1
17548: NEG
17549: PUSH
17550: LD_INT 0
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 1
17559: NEG
17560: PUSH
17561: LD_INT 1
17563: NEG
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 1
17571: NEG
17572: PUSH
17573: LD_INT 2
17575: NEG
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 0
17583: PUSH
17584: LD_INT 2
17586: NEG
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 1
17594: PUSH
17595: LD_INT 1
17597: NEG
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 2
17605: PUSH
17606: LD_INT 0
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: LD_INT 2
17615: PUSH
17616: LD_INT 1
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 2
17625: PUSH
17626: LD_INT 2
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 1
17635: PUSH
17636: LD_INT 2
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 0
17645: PUSH
17646: LD_INT 2
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 1
17655: NEG
17656: PUSH
17657: LD_INT 1
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 2
17666: NEG
17667: PUSH
17668: LD_INT 0
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 2
17677: NEG
17678: PUSH
17679: LD_INT 1
17681: NEG
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 2
17689: NEG
17690: PUSH
17691: LD_INT 2
17693: NEG
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17720: LD_ADDR_VAR 0 18
17724: PUSH
17725: LD_INT 0
17727: PUSH
17728: LD_INT 0
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 0
17737: PUSH
17738: LD_INT 1
17740: NEG
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 1
17748: PUSH
17749: LD_INT 0
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: LD_INT 1
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 0
17768: PUSH
17769: LD_INT 1
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 1
17778: NEG
17779: PUSH
17780: LD_INT 0
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 1
17789: NEG
17790: PUSH
17791: LD_INT 1
17793: NEG
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 1
17801: NEG
17802: PUSH
17803: LD_INT 2
17805: NEG
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: LD_INT 2
17816: NEG
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 1
17824: PUSH
17825: LD_INT 1
17827: NEG
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 2
17835: PUSH
17836: LD_INT 0
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 2
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 1
17865: PUSH
17866: LD_INT 2
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 0
17875: PUSH
17876: LD_INT 2
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 1
17885: NEG
17886: PUSH
17887: LD_INT 1
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 2
17896: NEG
17897: PUSH
17898: LD_INT 0
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 2
17907: NEG
17908: PUSH
17909: LD_INT 1
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 2
17919: NEG
17920: PUSH
17921: LD_INT 2
17923: NEG
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17950: LD_ADDR_VAR 0 19
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: LD_INT 0
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 0
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: LD_INT 0
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: LD_INT 1
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 0
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 1
18008: NEG
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: NEG
18020: PUSH
18021: LD_INT 1
18023: NEG
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 1
18031: NEG
18032: PUSH
18033: LD_INT 2
18035: NEG
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: LD_INT 2
18046: NEG
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: LD_INT 1
18057: NEG
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 2
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 2
18085: PUSH
18086: LD_INT 2
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: LD_INT 2
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 0
18105: PUSH
18106: LD_INT 2
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: LD_INT 1
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 2
18126: NEG
18127: PUSH
18128: LD_INT 0
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 2
18137: NEG
18138: PUSH
18139: LD_INT 1
18141: NEG
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 2
18149: NEG
18150: PUSH
18151: LD_INT 2
18153: NEG
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18180: LD_ADDR_VAR 0 20
18184: PUSH
18185: LD_INT 0
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 0
18197: PUSH
18198: LD_INT 1
18200: NEG
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 1
18208: PUSH
18209: LD_INT 0
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: LD_INT 1
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: NEG
18239: PUSH
18240: LD_INT 0
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 1
18249: NEG
18250: PUSH
18251: LD_INT 1
18253: NEG
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 1
18261: NEG
18262: PUSH
18263: LD_INT 2
18265: NEG
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 2
18276: NEG
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: LD_INT 1
18287: NEG
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 2
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 2
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 2
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: LD_INT 2
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 0
18335: PUSH
18336: LD_INT 2
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 1
18345: NEG
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 2
18356: NEG
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 2
18367: NEG
18368: PUSH
18369: LD_INT 1
18371: NEG
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 2
18379: NEG
18380: PUSH
18381: LD_INT 2
18383: NEG
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18410: LD_ADDR_VAR 0 21
18414: PUSH
18415: LD_INT 0
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 0
18427: PUSH
18428: LD_INT 1
18430: NEG
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 1
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 0
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 1
18468: NEG
18469: PUSH
18470: LD_INT 0
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 1
18479: NEG
18480: PUSH
18481: LD_INT 1
18483: NEG
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 1
18491: NEG
18492: PUSH
18493: LD_INT 2
18495: NEG
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 0
18503: PUSH
18504: LD_INT 2
18506: NEG
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: LD_INT 1
18517: NEG
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 2
18525: PUSH
18526: LD_INT 0
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 2
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 2
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 0
18565: PUSH
18566: LD_INT 2
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 1
18575: NEG
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 2
18586: NEG
18587: PUSH
18588: LD_INT 0
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 2
18597: NEG
18598: PUSH
18599: LD_INT 1
18601: NEG
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 2
18609: NEG
18610: PUSH
18611: LD_INT 2
18613: NEG
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18640: LD_ADDR_VAR 0 22
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: LD_INT 1
18660: NEG
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: LD_INT 0
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 0
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 1
18698: NEG
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 1
18709: NEG
18710: PUSH
18711: LD_INT 1
18713: NEG
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 1
18721: NEG
18722: PUSH
18723: LD_INT 2
18725: NEG
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: LD_INT 2
18736: NEG
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: LD_INT 1
18747: NEG
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 2
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 2
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 2
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 1
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 0
18795: PUSH
18796: LD_INT 2
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: NEG
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 2
18816: NEG
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 2
18827: NEG
18828: PUSH
18829: LD_INT 1
18831: NEG
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 2
18839: NEG
18840: PUSH
18841: LD_INT 2
18843: NEG
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18870: LD_ADDR_VAR 0 23
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: LD_INT 0
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 0
18887: PUSH
18888: LD_INT 1
18890: NEG
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 1
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 1
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 0
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 1
18928: NEG
18929: PUSH
18930: LD_INT 0
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: LD_INT 1
18943: NEG
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 1
18951: NEG
18952: PUSH
18953: LD_INT 2
18955: NEG
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: LD_INT 2
18966: NEG
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: LD_INT 1
18977: NEG
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 1
19015: PUSH
19016: LD_INT 2
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 0
19025: PUSH
19026: LD_INT 2
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 1
19035: NEG
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 2
19046: NEG
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 2
19057: NEG
19058: PUSH
19059: LD_INT 1
19061: NEG
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 2
19069: NEG
19070: PUSH
19071: LD_INT 2
19073: NEG
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 2
19081: NEG
19082: PUSH
19083: LD_INT 3
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 1
19093: NEG
19094: PUSH
19095: LD_INT 3
19097: NEG
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: LD_INT 2
19108: NEG
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: LD_INT 1
19119: NEG
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19150: LD_ADDR_VAR 0 24
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: LD_INT 1
19170: NEG
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: NEG
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: LD_INT 1
19223: NEG
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 1
19231: NEG
19232: PUSH
19233: LD_INT 2
19235: NEG
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: LD_INT 2
19246: NEG
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: LD_INT 1
19257: NEG
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: LD_INT 2
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: LD_INT 2
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 1
19315: NEG
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 2
19326: NEG
19327: PUSH
19328: LD_INT 0
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 2
19337: NEG
19338: PUSH
19339: LD_INT 1
19341: NEG
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 2
19349: NEG
19350: PUSH
19351: LD_INT 2
19353: NEG
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 1
19361: PUSH
19362: LD_INT 2
19364: NEG
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: LD_INT 1
19375: NEG
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 3
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 3
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19426: LD_ADDR_VAR 0 25
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 0
19443: PUSH
19444: LD_INT 1
19446: NEG
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 1
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 0
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: NEG
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 1
19495: NEG
19496: PUSH
19497: LD_INT 1
19499: NEG
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: NEG
19508: PUSH
19509: LD_INT 2
19511: NEG
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 0
19519: PUSH
19520: LD_INT 2
19522: NEG
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 1
19530: PUSH
19531: LD_INT 1
19533: NEG
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 2
19541: PUSH
19542: LD_INT 0
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 2
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 2
19561: PUSH
19562: LD_INT 2
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 1
19571: PUSH
19572: LD_INT 2
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: LD_INT 2
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: NEG
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 2
19602: NEG
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 2
19613: NEG
19614: PUSH
19615: LD_INT 1
19617: NEG
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 2
19625: NEG
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 3
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 3
19647: PUSH
19648: LD_INT 2
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 2
19657: PUSH
19658: LD_INT 3
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: LD_INT 3
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19700: LD_ADDR_VAR 0 26
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 1
19728: PUSH
19729: LD_INT 0
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 1
19758: NEG
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 1
19769: NEG
19770: PUSH
19771: LD_INT 1
19773: NEG
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 1
19781: NEG
19782: PUSH
19783: LD_INT 2
19785: NEG
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 0
19793: PUSH
19794: LD_INT 2
19796: NEG
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: LD_INT 1
19807: NEG
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 2
19815: PUSH
19816: LD_INT 0
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 2
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 1
19865: NEG
19866: PUSH
19867: LD_INT 1
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 2
19876: NEG
19877: PUSH
19878: LD_INT 0
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 2
19887: NEG
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 2
19899: NEG
19900: PUSH
19901: LD_INT 2
19903: NEG
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 2
19911: PUSH
19912: LD_INT 3
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: LD_INT 3
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: NEG
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19976: LD_ADDR_VAR 0 27
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: LD_INT 0
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 0
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: LD_INT 0
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 1
20034: NEG
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 1
20045: NEG
20046: PUSH
20047: LD_INT 1
20049: NEG
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: LD_INT 2
20061: NEG
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: LD_INT 2
20072: NEG
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: LD_INT 0
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 2
20101: PUSH
20102: LD_INT 1
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 2
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: PUSH
20122: LD_INT 2
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 1
20141: NEG
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 2
20152: NEG
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 2
20163: NEG
20164: PUSH
20165: LD_INT 1
20167: NEG
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 2
20175: NEG
20176: PUSH
20177: LD_INT 2
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 1
20187: NEG
20188: PUSH
20189: LD_INT 2
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 2
20198: NEG
20199: PUSH
20200: LD_INT 1
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 3
20209: NEG
20210: PUSH
20211: LD_INT 1
20213: NEG
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 3
20221: NEG
20222: PUSH
20223: LD_INT 2
20225: NEG
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20256: LD_ADDR_VAR 0 28
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: LD_INT 0
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 0
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 0
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 1
20314: NEG
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 1
20325: NEG
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: LD_INT 2
20341: NEG
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: LD_INT 2
20352: NEG
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: LD_INT 1
20363: NEG
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 2
20371: PUSH
20372: LD_INT 0
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: LD_INT 1
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 2
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 0
20411: PUSH
20412: LD_INT 2
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 1
20421: NEG
20422: PUSH
20423: LD_INT 1
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 2
20432: NEG
20433: PUSH
20434: LD_INT 0
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 2
20443: NEG
20444: PUSH
20445: LD_INT 1
20447: NEG
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: NEG
20456: PUSH
20457: LD_INT 2
20459: NEG
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 2
20467: NEG
20468: PUSH
20469: LD_INT 3
20471: NEG
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 1
20479: NEG
20480: PUSH
20481: LD_INT 3
20483: NEG
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 3
20491: NEG
20492: PUSH
20493: LD_INT 1
20495: NEG
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 3
20503: NEG
20504: PUSH
20505: LD_INT 2
20507: NEG
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20538: LD_ADDR_VAR 0 29
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: LD_INT 2
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: LD_INT 2
20634: NEG
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 2
20653: PUSH
20654: LD_INT 0
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 2
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: NEG
20705: PUSH
20706: LD_INT 1
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 2
20716: NEG
20717: PUSH
20718: LD_INT 2
20720: NEG
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 2
20728: NEG
20729: PUSH
20730: LD_INT 3
20732: NEG
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 3
20751: PUSH
20752: LD_INT 1
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: LD_INT 3
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 1
20771: NEG
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 3
20782: NEG
20783: PUSH
20784: LD_INT 2
20786: NEG
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20817: LD_ADDR_VAR 0 30
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: LD_INT 0
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: LD_INT 0
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 1
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 1
20875: NEG
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 1
20886: NEG
20887: PUSH
20888: LD_INT 1
20890: NEG
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: LD_INT 2
20902: NEG
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 0
20910: PUSH
20911: LD_INT 2
20913: NEG
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 1
20921: PUSH
20922: LD_INT 1
20924: NEG
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 2
20942: PUSH
20943: LD_INT 1
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 1
20972: NEG
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: NEG
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 1
21006: NEG
21007: PUSH
21008: LD_INT 3
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 1
21018: PUSH
21019: LD_INT 2
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 3
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 2
21039: PUSH
21040: LD_INT 3
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 2
21049: NEG
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 3
21060: NEG
21061: PUSH
21062: LD_INT 1
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21095: LD_ADDR_VAR 0 31
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 0
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: NEG
21177: PUSH
21178: LD_INT 2
21180: NEG
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 1
21188: PUSH
21189: LD_INT 1
21191: NEG
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 2
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 2
21209: PUSH
21210: LD_INT 1
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 2
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: LD_INT 2
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 1
21249: NEG
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 2
21260: NEG
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: NEG
21273: PUSH
21274: LD_INT 2
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 2
21284: NEG
21285: PUSH
21286: LD_INT 3
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: LD_INT 1
21299: NEG
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 3
21307: PUSH
21308: LD_INT 1
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 1
21317: PUSH
21318: LD_INT 3
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 1
21327: NEG
21328: PUSH
21329: LD_INT 2
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 3
21338: NEG
21339: PUSH
21340: LD_INT 2
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21373: LD_ADDR_VAR 0 32
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 1
21442: NEG
21443: PUSH
21444: LD_INT 1
21446: NEG
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: LD_INT 2
21458: NEG
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: LD_INT 2
21469: NEG
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 2
21498: PUSH
21499: LD_INT 2
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 1
21508: PUSH
21509: LD_INT 2
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: LD_INT 2
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 2
21539: NEG
21540: PUSH
21541: LD_INT 0
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 2
21550: NEG
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: LD_INT 3
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 3
21585: PUSH
21586: LD_INT 2
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 2
21595: PUSH
21596: LD_INT 3
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 2
21605: NEG
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 3
21616: NEG
21617: PUSH
21618: LD_INT 1
21620: NEG
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21651: LD_ADDR_VAR 0 33
21655: PUSH
21656: LD_INT 0
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 1
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: LD_INT 1
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 1
21709: NEG
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: LD_INT 1
21724: NEG
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: LD_INT 2
21736: NEG
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 2
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: LD_INT 2
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 1
21795: NEG
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 2
21806: NEG
21807: PUSH
21808: LD_INT 0
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 2
21817: NEG
21818: PUSH
21819: LD_INT 1
21821: NEG
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 2
21829: NEG
21830: PUSH
21831: LD_INT 2
21833: NEG
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 2
21841: NEG
21842: PUSH
21843: LD_INT 3
21845: NEG
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 2
21853: PUSH
21854: LD_INT 1
21856: NEG
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 3
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: LD_INT 3
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 1
21884: NEG
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 3
21895: NEG
21896: PUSH
21897: LD_INT 2
21899: NEG
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21930: LD_ADDR_VAR 0 34
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 0
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 0
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 1
21988: NEG
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 1
22011: NEG
22012: PUSH
22013: LD_INT 2
22015: NEG
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 0
22023: PUSH
22024: LD_INT 2
22026: NEG
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: LD_INT 1
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 2
22055: PUSH
22056: LD_INT 2
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: LD_INT 2
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: NEG
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 2
22086: NEG
22087: PUSH
22088: LD_INT 0
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 2
22097: NEG
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: NEG
22110: PUSH
22111: LD_INT 2
22113: NEG
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 1
22121: NEG
22122: PUSH
22123: LD_INT 3
22125: NEG
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: LD_INT 2
22136: NEG
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 3
22144: PUSH
22145: LD_INT 2
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 2
22154: PUSH
22155: LD_INT 3
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 2
22164: NEG
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 3
22175: NEG
22176: PUSH
22177: LD_INT 1
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22210: LD_ADDR_VAR 0 35
22214: PUSH
22215: LD_INT 0
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 1
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: LD_INT 1
22283: NEG
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 2
22301: NEG
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22322: LD_ADDR_VAR 0 36
22326: PUSH
22327: LD_INT 0
22329: PUSH
22330: LD_INT 0
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: LD_INT 1
22342: NEG
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: LD_INT 1
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 1
22380: NEG
22381: PUSH
22382: LD_INT 0
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: NEG
22392: PUSH
22393: LD_INT 1
22395: NEG
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 1
22403: NEG
22404: PUSH
22405: LD_INT 2
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22434: LD_ADDR_VAR 0 37
22438: PUSH
22439: LD_INT 0
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: LD_INT 0
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 1
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: LD_INT 1
22507: NEG
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 1
22526: NEG
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22546: LD_ADDR_VAR 0 38
22550: PUSH
22551: LD_INT 0
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: LD_INT 0
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 0
22594: PUSH
22595: LD_INT 1
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 1
22615: NEG
22616: PUSH
22617: LD_INT 1
22619: NEG
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 2
22637: NEG
22638: PUSH
22639: LD_INT 1
22641: NEG
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22658: LD_ADDR_VAR 0 39
22662: PUSH
22663: LD_INT 0
22665: PUSH
22666: LD_INT 0
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 0
22675: PUSH
22676: LD_INT 1
22678: NEG
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 1
22686: PUSH
22687: LD_INT 0
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 1
22727: NEG
22728: PUSH
22729: LD_INT 1
22731: NEG
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: NEG
22740: PUSH
22741: LD_INT 2
22743: NEG
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22770: LD_ADDR_VAR 0 40
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: LD_INT 1
22790: NEG
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: LD_INT 1
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 0
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: LD_INT 1
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22882: LD_ADDR_VAR 0 41
22886: PUSH
22887: LD_INT 0
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: LD_INT 1
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 1
22963: NEG
22964: PUSH
22965: LD_INT 2
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: LD_INT 1
22978: NEG
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: LD_INT 1
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: LD_INT 2
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 1
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 2
23037: NEG
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 2
23048: NEG
23049: PUSH
23050: LD_INT 1
23052: NEG
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 2
23060: NEG
23061: PUSH
23062: LD_INT 2
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: LD_INT 3
23076: NEG
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: LD_INT 1
23087: NEG
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 3
23095: PUSH
23096: LD_INT 0
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 3
23105: PUSH
23106: LD_INT 1
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 3
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 3
23125: PUSH
23126: LD_INT 3
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 2
23135: PUSH
23136: LD_INT 3
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 2
23145: NEG
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 3
23156: NEG
23157: PUSH
23158: LD_INT 0
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 3
23167: NEG
23168: PUSH
23169: LD_INT 1
23171: NEG
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 3
23179: NEG
23180: PUSH
23181: LD_INT 2
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 3
23191: NEG
23192: PUSH
23193: LD_INT 3
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23232: LD_ADDR_VAR 0 42
23236: PUSH
23237: LD_INT 0
23239: PUSH
23240: LD_INT 0
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 0
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 0
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: NEG
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: LD_INT 1
23305: NEG
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 1
23313: NEG
23314: PUSH
23315: LD_INT 2
23317: NEG
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 2
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 2
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 2
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: LD_INT 2
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: LD_INT 2
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 2
23398: NEG
23399: PUSH
23400: LD_INT 1
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 2
23410: NEG
23411: PUSH
23412: LD_INT 2
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 2
23422: NEG
23423: PUSH
23424: LD_INT 3
23426: NEG
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 1
23434: NEG
23435: PUSH
23436: LD_INT 3
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: LD_INT 3
23449: NEG
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: LD_INT 2
23460: NEG
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 3
23468: PUSH
23469: LD_INT 2
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 3
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: LD_INT 3
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: LD_INT 3
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 0
23508: PUSH
23509: LD_INT 3
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 3
23529: NEG
23530: PUSH
23531: LD_INT 2
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 3
23541: NEG
23542: PUSH
23543: LD_INT 3
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23582: LD_ADDR_VAR 0 43
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 1
23640: NEG
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: NEG
23652: PUSH
23653: LD_INT 1
23655: NEG
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: LD_INT 2
23667: NEG
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: LD_INT 2
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: LD_INT 0
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: LD_INT 1
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 2
23748: NEG
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 2
23759: NEG
23760: PUSH
23761: LD_INT 1
23763: NEG
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: LD_INT 3
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: LD_INT 3
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 2
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: LD_INT 1
23808: NEG
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 3
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 3
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: LD_INT 3
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 0
23846: PUSH
23847: LD_INT 3
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: NEG
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 3
23878: NEG
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 3
23889: NEG
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23930: LD_ADDR_VAR 0 44
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 1
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: LD_INT 2
24015: NEG
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: LD_INT 1
24026: NEG
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 2
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 2
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: LD_INT 2
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 2
24085: NEG
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 2
24096: NEG
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 2
24108: NEG
24109: PUSH
24110: LD_INT 2
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 2
24120: NEG
24121: PUSH
24122: LD_INT 3
24124: NEG
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 3
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 3
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 3
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 3
24173: PUSH
24174: LD_INT 3
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 2
24183: PUSH
24184: LD_INT 3
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 3
24204: NEG
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 3
24215: NEG
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 3
24227: NEG
24228: PUSH
24229: LD_INT 2
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 3
24239: NEG
24240: PUSH
24241: LD_INT 3
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24280: LD_ADDR_VAR 0 45
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: LD_INT 2
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 2
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 2
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 2
24446: NEG
24447: PUSH
24448: LD_INT 1
24450: NEG
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 2
24458: NEG
24459: PUSH
24460: LD_INT 2
24462: NEG
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 2
24470: NEG
24471: PUSH
24472: LD_INT 3
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 3
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 0
24494: PUSH
24495: LD_INT 3
24497: NEG
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: LD_INT 2
24508: NEG
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 3
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 3
24526: PUSH
24527: LD_INT 3
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 3
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 3
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: LD_INT 3
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: LD_INT 2
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 3
24577: NEG
24578: PUSH
24579: LD_INT 2
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 3
24589: NEG
24590: PUSH
24591: LD_INT 3
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24630: LD_ADDR_VAR 0 46
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 0
24647: PUSH
24648: LD_INT 1
24650: NEG
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 1
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: LD_INT 1
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: NEG
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 1
24699: NEG
24700: PUSH
24701: LD_INT 1
24703: NEG
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 1
24711: NEG
24712: PUSH
24713: LD_INT 2
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 2
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 2
24807: NEG
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: LD_INT 3
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: LD_INT 3
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 2
24853: PUSH
24854: LD_INT 1
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 3
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 3
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: LD_INT 3
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: LD_INT 3
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 3
24926: NEG
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 3
24937: NEG
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24978: LD_ADDR_VAR 0 47
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: LD_INT 0
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: LD_INT 2
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 2
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 2
25093: NEG
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 2
25105: NEG
25106: PUSH
25107: LD_INT 2
25109: NEG
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25129: LD_ADDR_VAR 0 48
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: LD_INT 2
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 2
25225: NEG
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: LD_INT 1
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 2
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25276: LD_ADDR_VAR 0 49
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 0
25293: PUSH
25294: LD_INT 1
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 1
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 1
25334: NEG
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: LD_INT 1
25349: NEG
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: LD_INT 1
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 2
25378: PUSH
25379: LD_INT 1
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: LD_INT 2
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25420: LD_ADDR_VAR 0 50
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 2
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 1
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 0
25531: PUSH
25532: LD_INT 2
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25564: LD_ADDR_VAR 0 51
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: LD_INT 1
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: LD_INT 2
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: LD_INT 2
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 2
25676: NEG
25677: PUSH
25678: LD_INT 0
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25711: LD_ADDR_VAR 0 52
25715: PUSH
25716: LD_INT 0
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: NEG
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: NEG
25793: PUSH
25794: LD_INT 2
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: NEG
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 2
25815: NEG
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: NEG
25827: PUSH
25828: LD_INT 1
25830: NEG
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 2
25838: NEG
25839: PUSH
25840: LD_INT 2
25842: NEG
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25862: LD_ADDR_VAR 0 53
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: NEG
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: LD_INT 2
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 2
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 2
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 2
26038: NEG
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: NEG
26062: PUSH
26063: LD_INT 2
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26092: LD_ADDR_VAR 0 54
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: LD_INT 2
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: LD_INT 2
26188: NEG
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 2
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 2
26268: NEG
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: NEG
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26322: LD_ADDR_VAR 0 55
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: LD_INT 2
26407: NEG
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: LD_INT 2
26418: NEG
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: PUSH
26458: LD_INT 2
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 2
26498: NEG
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: NEG
26510: PUSH
26511: LD_INT 1
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: NEG
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26552: LD_ADDR_VAR 0 56
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: LD_INT 1
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 2
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 2
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 2
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 2
26687: PUSH
26688: LD_INT 2
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: LD_INT 2
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: LD_INT 2
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 2
26728: NEG
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: NEG
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 2
26751: NEG
26752: PUSH
26753: LD_INT 2
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26782: LD_ADDR_VAR 0 57
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: NEG
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: LD_INT 2
26867: NEG
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: LD_INT 2
26878: NEG
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 2
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 2
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 2
26917: PUSH
26918: LD_INT 2
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: LD_INT 2
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 2
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 2
26958: NEG
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 2
26969: NEG
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 2
26981: NEG
26982: PUSH
26983: LD_INT 2
26985: NEG
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27012: LD_ADDR_VAR 0 58
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 0
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 2
27108: NEG
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 2
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 2
27188: NEG
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 2
27211: NEG
27212: PUSH
27213: LD_INT 2
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27242: LD_ADDR_VAR 0 59
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: LD_INT 0
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: LD_INT 1
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27330: LD_ADDR_VAR 0 60
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: LD_INT 1
27350: NEG
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: NEG
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: LD_INT 1
27403: NEG
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27418: LD_ADDR_VAR 0 61
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: NEG
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27506: LD_ADDR_VAR 0 62
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 0
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 1
27564: NEG
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 1
27575: NEG
27576: PUSH
27577: LD_INT 1
27579: NEG
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27594: LD_ADDR_VAR 0 63
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: LD_INT 0
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: LD_INT 1
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27682: LD_ADDR_VAR 0 64
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: NEG
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: ST_TO_ADDR
// end ; 1 :
27770: GO 33667
27772: LD_INT 1
27774: DOUBLE
27775: EQUAL
27776: IFTRUE 27780
27778: GO 30403
27780: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27781: LD_ADDR_VAR 0 11
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: LD_INT 3
27792: NEG
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: LD_INT 3
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: LD_INT 2
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: LIST
27824: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27825: LD_ADDR_VAR 0 12
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: LD_INT 1
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 3
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 3
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27866: LD_ADDR_VAR 0 13
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 3
27883: PUSH
27884: LD_INT 3
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 2
27893: PUSH
27894: LD_INT 3
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27906: LD_ADDR_VAR 0 14
27910: PUSH
27911: LD_INT 1
27913: PUSH
27914: LD_INT 3
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 3
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: LD_INT 2
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27947: LD_ADDR_VAR 0 15
27951: PUSH
27952: LD_INT 2
27954: NEG
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 3
27965: NEG
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 3
27976: NEG
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: LIST
27990: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27991: LD_ADDR_VAR 0 16
27995: PUSH
27996: LD_INT 2
27998: NEG
27999: PUSH
28000: LD_INT 3
28002: NEG
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 3
28010: NEG
28011: PUSH
28012: LD_INT 2
28014: NEG
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 3
28022: NEG
28023: PUSH
28024: LD_INT 3
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: LIST
28036: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28037: LD_ADDR_VAR 0 17
28041: PUSH
28042: LD_INT 1
28044: NEG
28045: PUSH
28046: LD_INT 3
28048: NEG
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: LD_INT 3
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: LD_INT 2
28070: NEG
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: LIST
28080: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28081: LD_ADDR_VAR 0 18
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 3
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 3
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: LIST
28121: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28122: LD_ADDR_VAR 0 19
28126: PUSH
28127: LD_INT 3
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 3
28139: PUSH
28140: LD_INT 3
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: LD_INT 3
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: LIST
28161: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28162: LD_ADDR_VAR 0 20
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 3
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: LD_INT 3
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: LD_INT 2
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: LIST
28202: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28203: LD_ADDR_VAR 0 21
28207: PUSH
28208: LD_INT 2
28210: NEG
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 3
28221: NEG
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 3
28232: NEG
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: LIST
28246: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28247: LD_ADDR_VAR 0 22
28251: PUSH
28252: LD_INT 2
28254: NEG
28255: PUSH
28256: LD_INT 3
28258: NEG
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 3
28266: NEG
28267: PUSH
28268: LD_INT 2
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 3
28278: NEG
28279: PUSH
28280: LD_INT 3
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28293: LD_ADDR_VAR 0 23
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: LD_INT 3
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 4
28315: NEG
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: LD_INT 3
28326: NEG
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: LIST
28336: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28337: LD_ADDR_VAR 0 24
28341: PUSH
28342: LD_INT 3
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 3
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 4
28365: PUSH
28366: LD_INT 1
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28378: LD_ADDR_VAR 0 25
28382: PUSH
28383: LD_INT 3
28385: PUSH
28386: LD_INT 3
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 4
28395: PUSH
28396: LD_INT 3
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 3
28405: PUSH
28406: LD_INT 4
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: LIST
28417: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28418: LD_ADDR_VAR 0 26
28422: PUSH
28423: LD_INT 0
28425: PUSH
28426: LD_INT 3
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 4
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: LD_INT 3
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28459: LD_ADDR_VAR 0 27
28463: PUSH
28464: LD_INT 3
28466: NEG
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 3
28477: NEG
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 4
28488: NEG
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: LIST
28502: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28503: LD_ADDR_VAR 0 28
28507: PUSH
28508: LD_INT 3
28510: NEG
28511: PUSH
28512: LD_INT 3
28514: NEG
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 3
28522: NEG
28523: PUSH
28524: LD_INT 4
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 4
28534: NEG
28535: PUSH
28536: LD_INT 3
28538: NEG
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: LIST
28548: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28549: LD_ADDR_VAR 0 29
28553: PUSH
28554: LD_INT 1
28556: NEG
28557: PUSH
28558: LD_INT 3
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: LD_INT 3
28571: NEG
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: LD_INT 2
28582: NEG
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: LD_INT 4
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 0
28602: PUSH
28603: LD_INT 4
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: LD_INT 3
28616: NEG
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: LD_INT 5
28628: NEG
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 5
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: LD_INT 4
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: NEG
28659: PUSH
28660: LD_INT 6
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 6
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: LD_INT 5
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28704: LD_ADDR_VAR 0 30
28708: PUSH
28709: LD_INT 2
28711: PUSH
28712: LD_INT 1
28714: NEG
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 3
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 3
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 3
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 4
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 4
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 4
28773: PUSH
28774: LD_INT 1
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 5
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 5
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 5
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 6
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 6
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28847: LD_ADDR_VAR 0 31
28851: PUSH
28852: LD_INT 3
28854: PUSH
28855: LD_INT 2
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 3
28864: PUSH
28865: LD_INT 3
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: LD_INT 3
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 4
28884: PUSH
28885: LD_INT 3
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 4
28894: PUSH
28895: LD_INT 4
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 3
28904: PUSH
28905: LD_INT 4
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 5
28914: PUSH
28915: LD_INT 4
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 5
28924: PUSH
28925: LD_INT 5
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 4
28934: PUSH
28935: LD_INT 5
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 6
28944: PUSH
28945: LD_INT 5
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 6
28954: PUSH
28955: LD_INT 6
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 5
28964: PUSH
28965: LD_INT 6
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28986: LD_ADDR_VAR 0 32
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: LD_INT 3
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: LD_INT 3
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: LD_INT 2
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 1
29024: PUSH
29025: LD_INT 4
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 0
29034: PUSH
29035: LD_INT 4
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: LD_INT 3
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: LD_INT 5
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: LD_INT 5
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: LD_INT 4
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: LD_INT 6
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 6
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: LD_INT 5
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29129: LD_ADDR_VAR 0 33
29133: PUSH
29134: LD_INT 2
29136: NEG
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 3
29147: NEG
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 3
29158: NEG
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 3
29170: NEG
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 4
29181: NEG
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 4
29192: NEG
29193: PUSH
29194: LD_INT 1
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 4
29204: NEG
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 5
29215: NEG
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 5
29226: NEG
29227: PUSH
29228: LD_INT 1
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 5
29238: NEG
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 6
29249: NEG
29250: PUSH
29251: LD_INT 0
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 6
29260: NEG
29261: PUSH
29262: LD_INT 1
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29284: LD_ADDR_VAR 0 34
29288: PUSH
29289: LD_INT 2
29291: NEG
29292: PUSH
29293: LD_INT 3
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 3
29303: NEG
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 3
29315: NEG
29316: PUSH
29317: LD_INT 3
29319: NEG
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 3
29327: NEG
29328: PUSH
29329: LD_INT 4
29331: NEG
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 4
29339: NEG
29340: PUSH
29341: LD_INT 3
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 4
29351: NEG
29352: PUSH
29353: LD_INT 4
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 4
29363: NEG
29364: PUSH
29365: LD_INT 5
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 5
29375: NEG
29376: PUSH
29377: LD_INT 4
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 5
29387: NEG
29388: PUSH
29389: LD_INT 5
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 5
29399: NEG
29400: PUSH
29401: LD_INT 6
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 6
29411: NEG
29412: PUSH
29413: LD_INT 5
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 6
29423: NEG
29424: PUSH
29425: LD_INT 6
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29447: LD_ADDR_VAR 0 41
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: LD_INT 2
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: LD_INT 3
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: LD_INT 2
29480: NEG
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: LIST
29490: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29491: LD_ADDR_VAR 0 42
29495: PUSH
29496: LD_INT 2
29498: PUSH
29499: LD_INT 0
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 3
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29532: LD_ADDR_VAR 0 43
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: LD_INT 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 3
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29572: LD_ADDR_VAR 0 44
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 1
29589: PUSH
29590: LD_INT 3
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: LIST
29612: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29613: LD_ADDR_VAR 0 45
29617: PUSH
29618: LD_INT 2
29620: NEG
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 3
29642: NEG
29643: PUSH
29644: LD_INT 1
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29657: LD_ADDR_VAR 0 46
29661: PUSH
29662: LD_INT 2
29664: NEG
29665: PUSH
29666: LD_INT 2
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 2
29676: NEG
29677: PUSH
29678: LD_INT 3
29680: NEG
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 3
29688: NEG
29689: PUSH
29690: LD_INT 2
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29703: LD_ADDR_VAR 0 47
29707: PUSH
29708: LD_INT 2
29710: NEG
29711: PUSH
29712: LD_INT 3
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: LD_INT 3
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29736: LD_ADDR_VAR 0 48
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: LD_INT 2
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: LD_INT 1
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29767: LD_ADDR_VAR 0 49
29771: PUSH
29772: LD_INT 3
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 3
29784: PUSH
29785: LD_INT 2
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29796: LD_ADDR_VAR 0 50
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 3
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 3
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29825: LD_ADDR_VAR 0 51
29829: PUSH
29830: LD_INT 1
29832: NEG
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 2
29843: NEG
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29856: LD_ADDR_VAR 0 52
29860: PUSH
29861: LD_INT 3
29863: NEG
29864: PUSH
29865: LD_INT 1
29867: NEG
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 3
29875: NEG
29876: PUSH
29877: LD_INT 2
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29889: LD_ADDR_VAR 0 53
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 3
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 3
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: LD_INT 2
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29933: LD_ADDR_VAR 0 54
29937: PUSH
29938: LD_INT 2
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 3
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 3
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: LIST
29973: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29974: LD_ADDR_VAR 0 55
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 3
29991: PUSH
29992: LD_INT 3
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: LD_INT 3
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: LIST
30013: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30014: LD_ADDR_VAR 0 56
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: LD_INT 3
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: LD_INT 3
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 1
30041: NEG
30042: PUSH
30043: LD_INT 2
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30055: LD_ADDR_VAR 0 57
30059: PUSH
30060: LD_INT 2
30062: NEG
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 3
30073: NEG
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 3
30084: NEG
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: LIST
30098: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30099: LD_ADDR_VAR 0 58
30103: PUSH
30104: LD_INT 2
30106: NEG
30107: PUSH
30108: LD_INT 3
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 3
30118: NEG
30119: PUSH
30120: LD_INT 2
30122: NEG
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 3
30130: NEG
30131: PUSH
30132: LD_INT 3
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: LIST
30144: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30145: LD_ADDR_VAR 0 59
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: LD_INT 2
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: LD_INT 2
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: LIST
30188: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30189: LD_ADDR_VAR 0 60
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: LD_INT 1
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 2
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: LIST
30229: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30230: LD_ADDR_VAR 0 61
30234: PUSH
30235: LD_INT 2
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 2
30247: PUSH
30248: LD_INT 2
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 1
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: LIST
30269: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30270: LD_ADDR_VAR 0 62
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: LD_INT 2
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: NEG
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: LIST
30310: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30311: LD_ADDR_VAR 0 63
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 2
30329: NEG
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 2
30340: NEG
30341: PUSH
30342: LD_INT 1
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: LIST
30354: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30355: LD_ADDR_VAR 0 64
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: LD_INT 2
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 2
30374: NEG
30375: PUSH
30376: LD_INT 1
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 2
30386: NEG
30387: PUSH
30388: LD_INT 2
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
// end ; 2 :
30401: GO 33667
30403: LD_INT 2
30405: DOUBLE
30406: EQUAL
30407: IFTRUE 30411
30409: GO 33666
30411: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30412: LD_ADDR_VAR 0 29
30416: PUSH
30417: LD_INT 4
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 4
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 5
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 5
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 4
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 3
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 3
30480: PUSH
30481: LD_INT 1
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 5
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 3
30522: PUSH
30523: LD_INT 2
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 4
30532: PUSH
30533: LD_INT 3
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 4
30542: PUSH
30543: LD_INT 4
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 3
30552: PUSH
30553: LD_INT 4
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 2
30562: PUSH
30563: LD_INT 3
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 4
30582: PUSH
30583: LD_INT 2
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: LD_INT 4
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: LD_INT 4
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 4
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: LD_INT 5
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: LD_INT 4
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 2
30674: PUSH
30675: LD_INT 5
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 2
30684: NEG
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 3
30695: NEG
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 3
30706: NEG
30707: PUSH
30708: LD_INT 1
30710: NEG
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 2
30718: NEG
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 2
30729: NEG
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 3
30740: NEG
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 4
30751: NEG
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 4
30762: NEG
30763: PUSH
30764: LD_INT 1
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 4
30774: NEG
30775: PUSH
30776: LD_INT 2
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 2
30786: NEG
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 4
30797: NEG
30798: PUSH
30799: LD_INT 4
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 4
30809: NEG
30810: PUSH
30811: LD_INT 5
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 3
30821: NEG
30822: PUSH
30823: LD_INT 4
30825: NEG
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 3
30833: NEG
30834: PUSH
30835: LD_INT 3
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 4
30845: NEG
30846: PUSH
30847: LD_INT 3
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 5
30857: NEG
30858: PUSH
30859: LD_INT 4
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 5
30869: NEG
30870: PUSH
30871: LD_INT 5
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 3
30881: NEG
30882: PUSH
30883: LD_INT 5
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 5
30893: NEG
30894: PUSH
30895: LD_INT 3
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30950: LD_ADDR_VAR 0 30
30954: PUSH
30955: LD_INT 4
30957: PUSH
30958: LD_INT 4
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 4
30967: PUSH
30968: LD_INT 3
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 5
30977: PUSH
30978: LD_INT 4
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 5
30987: PUSH
30988: LD_INT 5
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 4
30997: PUSH
30998: LD_INT 5
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 3
31007: PUSH
31008: LD_INT 4
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 3
31017: PUSH
31018: LD_INT 3
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 5
31027: PUSH
31028: LD_INT 3
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 3
31037: PUSH
31038: LD_INT 5
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: LD_INT 3
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 0
31057: PUSH
31058: LD_INT 2
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: LD_INT 3
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 1
31077: PUSH
31078: LD_INT 4
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: LD_INT 4
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: LD_INT 3
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PUSH
31110: LD_INT 2
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 2
31119: PUSH
31120: LD_INT 4
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 2
31129: NEG
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 4
31140: NEG
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 4
31151: NEG
31152: PUSH
31153: LD_INT 1
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 3
31163: NEG
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 3
31174: NEG
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 4
31185: NEG
31186: PUSH
31187: LD_INT 1
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 5
31196: NEG
31197: PUSH
31198: LD_INT 0
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 5
31207: NEG
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 5
31219: NEG
31220: PUSH
31221: LD_INT 2
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 3
31231: NEG
31232: PUSH
31233: LD_INT 2
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 3
31242: NEG
31243: PUSH
31244: LD_INT 3
31246: NEG
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 3
31254: NEG
31255: PUSH
31256: LD_INT 4
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 2
31266: NEG
31267: PUSH
31268: LD_INT 3
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 2
31278: NEG
31279: PUSH
31280: LD_INT 2
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 3
31290: NEG
31291: PUSH
31292: LD_INT 2
31294: NEG
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 4
31302: NEG
31303: PUSH
31304: LD_INT 3
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 4
31314: NEG
31315: PUSH
31316: LD_INT 4
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 2
31326: NEG
31327: PUSH
31328: LD_INT 4
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 4
31338: NEG
31339: PUSH
31340: LD_INT 2
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: LD_INT 4
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: LD_INT 5
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: LD_INT 4
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: LD_INT 3
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: LD_INT 4
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PUSH
31419: LD_INT 5
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: LD_INT 3
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 2
31440: NEG
31441: PUSH
31442: LD_INT 5
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31497: LD_ADDR_VAR 0 31
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: LD_INT 4
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: LD_INT 3
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: LD_INT 4
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: LD_INT 5
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: LD_INT 5
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: LD_INT 4
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: LD_INT 3
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: LD_INT 5
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: LD_INT 3
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 3
31597: NEG
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 3
31608: NEG
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 2
31620: NEG
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: NEG
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 4
31653: NEG
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 4
31664: NEG
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 4
31676: NEG
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 2
31688: NEG
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 4
31699: NEG
31700: PUSH
31701: LD_INT 4
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 4
31711: NEG
31712: PUSH
31713: LD_INT 5
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: LD_INT 4
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 3
31735: NEG
31736: PUSH
31737: LD_INT 3
31739: NEG
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 4
31747: NEG
31748: PUSH
31749: LD_INT 3
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 5
31759: NEG
31760: PUSH
31761: LD_INT 4
31763: NEG
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 5
31771: NEG
31772: PUSH
31773: LD_INT 5
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: NEG
31784: PUSH
31785: LD_INT 5
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 5
31795: NEG
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: LD_INT 3
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 4
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 3
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 2
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 2
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: LD_INT 3
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: LD_INT 4
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 2
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: LD_INT 4
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 4
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 4
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 5
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 5
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 4
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 3
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 3
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 3
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 5
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32047: LD_ADDR_VAR 0 32
32051: PUSH
32052: LD_INT 4
32054: NEG
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 4
32065: NEG
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 3
32077: NEG
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 3
32088: NEG
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 4
32099: NEG
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 5
32110: NEG
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 5
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 5
32133: NEG
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 3
32145: NEG
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 3
32156: NEG
32157: PUSH
32158: LD_INT 3
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 3
32168: NEG
32169: PUSH
32170: LD_INT 4
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 2
32180: NEG
32181: PUSH
32182: LD_INT 3
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 2
32192: NEG
32193: PUSH
32194: LD_INT 2
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 3
32204: NEG
32205: PUSH
32206: LD_INT 2
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 4
32216: NEG
32217: PUSH
32218: LD_INT 3
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 4
32228: NEG
32229: PUSH
32230: LD_INT 4
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 2
32240: NEG
32241: PUSH
32242: LD_INT 4
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 4
32252: NEG
32253: PUSH
32254: LD_INT 2
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: LD_INT 4
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: LD_INT 5
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 4
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 3
32300: NEG
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: LD_INT 3
32311: NEG
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: LD_INT 4
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: LD_INT 5
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: LD_INT 3
32346: NEG
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: LD_INT 5
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 3
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 3
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 4
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 4
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 3
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 4
32449: PUSH
32450: LD_INT 2
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 4
32459: PUSH
32460: LD_INT 4
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 4
32469: PUSH
32470: LD_INT 3
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 5
32479: PUSH
32480: LD_INT 4
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 5
32489: PUSH
32490: LD_INT 5
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 4
32499: PUSH
32500: LD_INT 5
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 3
32509: PUSH
32510: LD_INT 4
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 3
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 5
32529: PUSH
32530: LD_INT 3
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 3
32539: PUSH
32540: LD_INT 5
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32594: LD_ADDR_VAR 0 33
32598: PUSH
32599: LD_INT 4
32601: NEG
32602: PUSH
32603: LD_INT 4
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 4
32613: NEG
32614: PUSH
32615: LD_INT 5
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 3
32625: NEG
32626: PUSH
32627: LD_INT 4
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 3
32637: NEG
32638: PUSH
32639: LD_INT 3
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 4
32649: NEG
32650: PUSH
32651: LD_INT 3
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 5
32661: NEG
32662: PUSH
32663: LD_INT 4
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 5
32673: NEG
32674: PUSH
32675: LD_INT 5
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 3
32685: NEG
32686: PUSH
32687: LD_INT 5
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 5
32697: NEG
32698: PUSH
32699: LD_INT 3
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 3
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: LD_INT 4
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 3
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: LD_INT 2
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: LD_INT 2
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 1
32764: NEG
32765: PUSH
32766: LD_INT 3
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: LD_INT 4
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: LD_INT 2
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: NEG
32800: PUSH
32801: LD_INT 4
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 4
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 4
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 5
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 5
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 4
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 3
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 3
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 3
32883: PUSH
32884: LD_INT 2
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 5
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 3
32904: PUSH
32905: LD_INT 3
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 3
32914: PUSH
32915: LD_INT 2
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 4
32924: PUSH
32925: LD_INT 3
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 4
32934: PUSH
32935: LD_INT 4
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 3
32944: PUSH
32945: LD_INT 4
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 3
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 4
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 2
32984: PUSH
32985: LD_INT 4
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: LD_INT 4
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: LD_INT 3
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: LD_INT 4
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: LD_INT 5
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: LD_INT 5
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: LD_INT 4
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: LD_INT 3
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 5
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 2
33076: NEG
33077: PUSH
33078: LD_INT 3
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33132: LD_ADDR_VAR 0 34
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: LD_INT 4
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: LD_INT 5
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 1
33161: PUSH
33162: LD_INT 4
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: LD_INT 3
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 0
33183: PUSH
33184: LD_INT 3
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: LD_INT 4
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 1
33206: NEG
33207: PUSH
33208: LD_INT 5
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: PUSH
33219: LD_INT 3
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 2
33229: NEG
33230: PUSH
33231: LD_INT 5
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 3
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 3
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 4
33272: PUSH
33273: LD_INT 1
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 3
33282: PUSH
33283: LD_INT 1
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: LD_INT 2
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 4
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 4
33334: PUSH
33335: LD_INT 4
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 4
33344: PUSH
33345: LD_INT 3
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 5
33354: PUSH
33355: LD_INT 4
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 5
33364: PUSH
33365: LD_INT 5
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 4
33374: PUSH
33375: LD_INT 5
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 3
33384: PUSH
33385: LD_INT 4
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 3
33394: PUSH
33395: LD_INT 3
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 5
33404: PUSH
33405: LD_INT 3
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 3
33414: PUSH
33415: LD_INT 5
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: LD_INT 3
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: LD_INT 4
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 4
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: LD_INT 3
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: LD_INT 2
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: LD_INT 4
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 2
33506: NEG
33507: PUSH
33508: LD_INT 2
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 4
33517: NEG
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 4
33528: NEG
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 3
33540: NEG
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 3
33551: NEG
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 4
33562: NEG
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 5
33573: NEG
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 5
33584: NEG
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 5
33596: NEG
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 3
33608: NEG
33609: PUSH
33610: LD_INT 2
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: ST_TO_ADDR
// end ; end ;
33664: GO 33667
33666: POP
// case btype of b_depot , b_warehouse :
33667: LD_VAR 0 1
33671: PUSH
33672: LD_INT 0
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33686
33678: LD_INT 1
33680: DOUBLE
33681: EQUAL
33682: IFTRUE 33686
33684: GO 33887
33686: POP
// case nation of nation_american :
33687: LD_VAR 0 5
33691: PUSH
33692: LD_INT 1
33694: DOUBLE
33695: EQUAL
33696: IFTRUE 33700
33698: GO 33756
33700: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33701: LD_ADDR_VAR 0 9
33705: PUSH
33706: LD_VAR 0 11
33710: PUSH
33711: LD_VAR 0 12
33715: PUSH
33716: LD_VAR 0 13
33720: PUSH
33721: LD_VAR 0 14
33725: PUSH
33726: LD_VAR 0 15
33730: PUSH
33731: LD_VAR 0 16
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: PUSH
33744: LD_VAR 0 4
33748: PUSH
33749: LD_INT 1
33751: PLUS
33752: ARRAY
33753: ST_TO_ADDR
33754: GO 33885
33756: LD_INT 2
33758: DOUBLE
33759: EQUAL
33760: IFTRUE 33764
33762: GO 33820
33764: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33765: LD_ADDR_VAR 0 9
33769: PUSH
33770: LD_VAR 0 17
33774: PUSH
33775: LD_VAR 0 18
33779: PUSH
33780: LD_VAR 0 19
33784: PUSH
33785: LD_VAR 0 20
33789: PUSH
33790: LD_VAR 0 21
33794: PUSH
33795: LD_VAR 0 22
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: PUSH
33808: LD_VAR 0 4
33812: PUSH
33813: LD_INT 1
33815: PLUS
33816: ARRAY
33817: ST_TO_ADDR
33818: GO 33885
33820: LD_INT 3
33822: DOUBLE
33823: EQUAL
33824: IFTRUE 33828
33826: GO 33884
33828: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33829: LD_ADDR_VAR 0 9
33833: PUSH
33834: LD_VAR 0 23
33838: PUSH
33839: LD_VAR 0 24
33843: PUSH
33844: LD_VAR 0 25
33848: PUSH
33849: LD_VAR 0 26
33853: PUSH
33854: LD_VAR 0 27
33858: PUSH
33859: LD_VAR 0 28
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: PUSH
33872: LD_VAR 0 4
33876: PUSH
33877: LD_INT 1
33879: PLUS
33880: ARRAY
33881: ST_TO_ADDR
33882: GO 33885
33884: POP
33885: GO 34440
33887: LD_INT 2
33889: DOUBLE
33890: EQUAL
33891: IFTRUE 33901
33893: LD_INT 3
33895: DOUBLE
33896: EQUAL
33897: IFTRUE 33901
33899: GO 33957
33901: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33902: LD_ADDR_VAR 0 9
33906: PUSH
33907: LD_VAR 0 29
33911: PUSH
33912: LD_VAR 0 30
33916: PUSH
33917: LD_VAR 0 31
33921: PUSH
33922: LD_VAR 0 32
33926: PUSH
33927: LD_VAR 0 33
33931: PUSH
33932: LD_VAR 0 34
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: PUSH
33945: LD_VAR 0 4
33949: PUSH
33950: LD_INT 1
33952: PLUS
33953: ARRAY
33954: ST_TO_ADDR
33955: GO 34440
33957: LD_INT 16
33959: DOUBLE
33960: EQUAL
33961: IFTRUE 34019
33963: LD_INT 17
33965: DOUBLE
33966: EQUAL
33967: IFTRUE 34019
33969: LD_INT 18
33971: DOUBLE
33972: EQUAL
33973: IFTRUE 34019
33975: LD_INT 19
33977: DOUBLE
33978: EQUAL
33979: IFTRUE 34019
33981: LD_INT 22
33983: DOUBLE
33984: EQUAL
33985: IFTRUE 34019
33987: LD_INT 20
33989: DOUBLE
33990: EQUAL
33991: IFTRUE 34019
33993: LD_INT 21
33995: DOUBLE
33996: EQUAL
33997: IFTRUE 34019
33999: LD_INT 23
34001: DOUBLE
34002: EQUAL
34003: IFTRUE 34019
34005: LD_INT 24
34007: DOUBLE
34008: EQUAL
34009: IFTRUE 34019
34011: LD_INT 25
34013: DOUBLE
34014: EQUAL
34015: IFTRUE 34019
34017: GO 34075
34019: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34020: LD_ADDR_VAR 0 9
34024: PUSH
34025: LD_VAR 0 35
34029: PUSH
34030: LD_VAR 0 36
34034: PUSH
34035: LD_VAR 0 37
34039: PUSH
34040: LD_VAR 0 38
34044: PUSH
34045: LD_VAR 0 39
34049: PUSH
34050: LD_VAR 0 40
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: PUSH
34063: LD_VAR 0 4
34067: PUSH
34068: LD_INT 1
34070: PLUS
34071: ARRAY
34072: ST_TO_ADDR
34073: GO 34440
34075: LD_INT 6
34077: DOUBLE
34078: EQUAL
34079: IFTRUE 34131
34081: LD_INT 7
34083: DOUBLE
34084: EQUAL
34085: IFTRUE 34131
34087: LD_INT 8
34089: DOUBLE
34090: EQUAL
34091: IFTRUE 34131
34093: LD_INT 13
34095: DOUBLE
34096: EQUAL
34097: IFTRUE 34131
34099: LD_INT 12
34101: DOUBLE
34102: EQUAL
34103: IFTRUE 34131
34105: LD_INT 15
34107: DOUBLE
34108: EQUAL
34109: IFTRUE 34131
34111: LD_INT 11
34113: DOUBLE
34114: EQUAL
34115: IFTRUE 34131
34117: LD_INT 14
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34131
34123: LD_INT 10
34125: DOUBLE
34126: EQUAL
34127: IFTRUE 34131
34129: GO 34187
34131: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34132: LD_ADDR_VAR 0 9
34136: PUSH
34137: LD_VAR 0 41
34141: PUSH
34142: LD_VAR 0 42
34146: PUSH
34147: LD_VAR 0 43
34151: PUSH
34152: LD_VAR 0 44
34156: PUSH
34157: LD_VAR 0 45
34161: PUSH
34162: LD_VAR 0 46
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: PUSH
34175: LD_VAR 0 4
34179: PUSH
34180: LD_INT 1
34182: PLUS
34183: ARRAY
34184: ST_TO_ADDR
34185: GO 34440
34187: LD_INT 36
34189: DOUBLE
34190: EQUAL
34191: IFTRUE 34195
34193: GO 34251
34195: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34196: LD_ADDR_VAR 0 9
34200: PUSH
34201: LD_VAR 0 47
34205: PUSH
34206: LD_VAR 0 48
34210: PUSH
34211: LD_VAR 0 49
34215: PUSH
34216: LD_VAR 0 50
34220: PUSH
34221: LD_VAR 0 51
34225: PUSH
34226: LD_VAR 0 52
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: PUSH
34239: LD_VAR 0 4
34243: PUSH
34244: LD_INT 1
34246: PLUS
34247: ARRAY
34248: ST_TO_ADDR
34249: GO 34440
34251: LD_INT 4
34253: DOUBLE
34254: EQUAL
34255: IFTRUE 34277
34257: LD_INT 5
34259: DOUBLE
34260: EQUAL
34261: IFTRUE 34277
34263: LD_INT 34
34265: DOUBLE
34266: EQUAL
34267: IFTRUE 34277
34269: LD_INT 37
34271: DOUBLE
34272: EQUAL
34273: IFTRUE 34277
34275: GO 34333
34277: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34278: LD_ADDR_VAR 0 9
34282: PUSH
34283: LD_VAR 0 53
34287: PUSH
34288: LD_VAR 0 54
34292: PUSH
34293: LD_VAR 0 55
34297: PUSH
34298: LD_VAR 0 56
34302: PUSH
34303: LD_VAR 0 57
34307: PUSH
34308: LD_VAR 0 58
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: PUSH
34321: LD_VAR 0 4
34325: PUSH
34326: LD_INT 1
34328: PLUS
34329: ARRAY
34330: ST_TO_ADDR
34331: GO 34440
34333: LD_INT 31
34335: DOUBLE
34336: EQUAL
34337: IFTRUE 34383
34339: LD_INT 32
34341: DOUBLE
34342: EQUAL
34343: IFTRUE 34383
34345: LD_INT 33
34347: DOUBLE
34348: EQUAL
34349: IFTRUE 34383
34351: LD_INT 27
34353: DOUBLE
34354: EQUAL
34355: IFTRUE 34383
34357: LD_INT 26
34359: DOUBLE
34360: EQUAL
34361: IFTRUE 34383
34363: LD_INT 28
34365: DOUBLE
34366: EQUAL
34367: IFTRUE 34383
34369: LD_INT 29
34371: DOUBLE
34372: EQUAL
34373: IFTRUE 34383
34375: LD_INT 30
34377: DOUBLE
34378: EQUAL
34379: IFTRUE 34383
34381: GO 34439
34383: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34384: LD_ADDR_VAR 0 9
34388: PUSH
34389: LD_VAR 0 59
34393: PUSH
34394: LD_VAR 0 60
34398: PUSH
34399: LD_VAR 0 61
34403: PUSH
34404: LD_VAR 0 62
34408: PUSH
34409: LD_VAR 0 63
34413: PUSH
34414: LD_VAR 0 64
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: PUSH
34427: LD_VAR 0 4
34431: PUSH
34432: LD_INT 1
34434: PLUS
34435: ARRAY
34436: ST_TO_ADDR
34437: GO 34440
34439: POP
// temp_list2 = [ ] ;
34440: LD_ADDR_VAR 0 10
34444: PUSH
34445: EMPTY
34446: ST_TO_ADDR
// for i in temp_list do
34447: LD_ADDR_VAR 0 8
34451: PUSH
34452: LD_VAR 0 9
34456: PUSH
34457: FOR_IN
34458: IFFALSE 34510
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34460: LD_ADDR_VAR 0 10
34464: PUSH
34465: LD_VAR 0 10
34469: PUSH
34470: LD_VAR 0 8
34474: PUSH
34475: LD_INT 1
34477: ARRAY
34478: PUSH
34479: LD_VAR 0 2
34483: PLUS
34484: PUSH
34485: LD_VAR 0 8
34489: PUSH
34490: LD_INT 2
34492: ARRAY
34493: PUSH
34494: LD_VAR 0 3
34498: PLUS
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: EMPTY
34505: LIST
34506: ADD
34507: ST_TO_ADDR
34508: GO 34457
34510: POP
34511: POP
// result = temp_list2 ;
34512: LD_ADDR_VAR 0 7
34516: PUSH
34517: LD_VAR 0 10
34521: ST_TO_ADDR
// end ;
34522: LD_VAR 0 7
34526: RET
// export function EnemyInRange ( unit , dist ) ; begin
34527: LD_INT 0
34529: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34530: LD_ADDR_VAR 0 3
34534: PUSH
34535: LD_VAR 0 1
34539: PPUSH
34540: CALL_OW 255
34544: PPUSH
34545: LD_VAR 0 1
34549: PPUSH
34550: CALL_OW 250
34554: PPUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL_OW 251
34564: PPUSH
34565: LD_VAR 0 2
34569: PPUSH
34570: CALL 7900 0 4
34574: PUSH
34575: LD_INT 4
34577: ARRAY
34578: ST_TO_ADDR
// end ;
34579: LD_VAR 0 3
34583: RET
// export function PlayerSeeMe ( unit ) ; begin
34584: LD_INT 0
34586: PPUSH
// result := See ( your_side , unit ) ;
34587: LD_ADDR_VAR 0 2
34591: PUSH
34592: LD_OWVAR 2
34596: PPUSH
34597: LD_VAR 0 1
34601: PPUSH
34602: CALL_OW 292
34606: ST_TO_ADDR
// end ;
34607: LD_VAR 0 2
34611: RET
// export function ReverseDir ( unit ) ; begin
34612: LD_INT 0
34614: PPUSH
// if not unit then
34615: LD_VAR 0 1
34619: NOT
34620: IFFALSE 34624
// exit ;
34622: GO 34647
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34624: LD_ADDR_VAR 0 2
34628: PUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL_OW 254
34638: PUSH
34639: LD_INT 3
34641: PLUS
34642: PUSH
34643: LD_INT 6
34645: MOD
34646: ST_TO_ADDR
// end ;
34647: LD_VAR 0 2
34651: RET
// export function ReverseArray ( array ) ; var i ; begin
34652: LD_INT 0
34654: PPUSH
34655: PPUSH
// if not array then
34656: LD_VAR 0 1
34660: NOT
34661: IFFALSE 34665
// exit ;
34663: GO 34720
// result := [ ] ;
34665: LD_ADDR_VAR 0 2
34669: PUSH
34670: EMPTY
34671: ST_TO_ADDR
// for i := array downto 1 do
34672: LD_ADDR_VAR 0 3
34676: PUSH
34677: DOUBLE
34678: LD_VAR 0 1
34682: INC
34683: ST_TO_ADDR
34684: LD_INT 1
34686: PUSH
34687: FOR_DOWNTO
34688: IFFALSE 34718
// result := Join ( result , array [ i ] ) ;
34690: LD_ADDR_VAR 0 2
34694: PUSH
34695: LD_VAR 0 2
34699: PPUSH
34700: LD_VAR 0 1
34704: PUSH
34705: LD_VAR 0 3
34709: ARRAY
34710: PPUSH
34711: CALL 39385 0 2
34715: ST_TO_ADDR
34716: GO 34687
34718: POP
34719: POP
// end ;
34720: LD_VAR 0 2
34724: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34725: LD_INT 0
34727: PPUSH
34728: PPUSH
34729: PPUSH
34730: PPUSH
34731: PPUSH
34732: PPUSH
// if not unit or not hexes then
34733: LD_VAR 0 1
34737: NOT
34738: PUSH
34739: LD_VAR 0 2
34743: NOT
34744: OR
34745: IFFALSE 34749
// exit ;
34747: GO 34872
// dist := 9999 ;
34749: LD_ADDR_VAR 0 5
34753: PUSH
34754: LD_INT 9999
34756: ST_TO_ADDR
// for i = 1 to hexes do
34757: LD_ADDR_VAR 0 4
34761: PUSH
34762: DOUBLE
34763: LD_INT 1
34765: DEC
34766: ST_TO_ADDR
34767: LD_VAR 0 2
34771: PUSH
34772: FOR_TO
34773: IFFALSE 34860
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34775: LD_ADDR_VAR 0 6
34779: PUSH
34780: LD_VAR 0 1
34784: PPUSH
34785: LD_VAR 0 2
34789: PUSH
34790: LD_VAR 0 4
34794: ARRAY
34795: PUSH
34796: LD_INT 1
34798: ARRAY
34799: PPUSH
34800: LD_VAR 0 2
34804: PUSH
34805: LD_VAR 0 4
34809: ARRAY
34810: PUSH
34811: LD_INT 2
34813: ARRAY
34814: PPUSH
34815: CALL_OW 297
34819: ST_TO_ADDR
// if tdist < dist then
34820: LD_VAR 0 6
34824: PUSH
34825: LD_VAR 0 5
34829: LESS
34830: IFFALSE 34858
// begin hex := hexes [ i ] ;
34832: LD_ADDR_VAR 0 8
34836: PUSH
34837: LD_VAR 0 2
34841: PUSH
34842: LD_VAR 0 4
34846: ARRAY
34847: ST_TO_ADDR
// dist := tdist ;
34848: LD_ADDR_VAR 0 5
34852: PUSH
34853: LD_VAR 0 6
34857: ST_TO_ADDR
// end ; end ;
34858: GO 34772
34860: POP
34861: POP
// result := hex ;
34862: LD_ADDR_VAR 0 3
34866: PUSH
34867: LD_VAR 0 8
34871: ST_TO_ADDR
// end ;
34872: LD_VAR 0 3
34876: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34877: LD_INT 0
34879: PPUSH
34880: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34881: LD_VAR 0 1
34885: NOT
34886: PUSH
34887: LD_VAR 0 1
34891: PUSH
34892: LD_INT 21
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 23
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PPUSH
34916: CALL_OW 69
34920: IN
34921: NOT
34922: OR
34923: IFFALSE 34927
// exit ;
34925: GO 34974
// for i = 1 to 3 do
34927: LD_ADDR_VAR 0 3
34931: PUSH
34932: DOUBLE
34933: LD_INT 1
34935: DEC
34936: ST_TO_ADDR
34937: LD_INT 3
34939: PUSH
34940: FOR_TO
34941: IFFALSE 34972
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL_OW 250
34952: PPUSH
34953: LD_VAR 0 1
34957: PPUSH
34958: CALL_OW 251
34962: PPUSH
34963: LD_INT 1
34965: PPUSH
34966: CALL_OW 453
34970: GO 34940
34972: POP
34973: POP
// end ;
34974: LD_VAR 0 2
34978: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34979: LD_INT 0
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
// if not unit or not enemy_unit then
34987: LD_VAR 0 1
34991: NOT
34992: PUSH
34993: LD_VAR 0 2
34997: NOT
34998: OR
34999: IFFALSE 35003
// exit ;
35001: GO 35470
// if GetLives ( i ) < 250 then
35003: LD_VAR 0 4
35007: PPUSH
35008: CALL_OW 256
35012: PUSH
35013: LD_INT 250
35015: LESS
35016: IFFALSE 35029
// begin ComAutodestruct ( i ) ;
35018: LD_VAR 0 4
35022: PPUSH
35023: CALL 34877 0 1
// exit ;
35027: GO 35470
// end ; x := GetX ( enemy_unit ) ;
35029: LD_ADDR_VAR 0 7
35033: PUSH
35034: LD_VAR 0 2
35038: PPUSH
35039: CALL_OW 250
35043: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35044: LD_ADDR_VAR 0 8
35048: PUSH
35049: LD_VAR 0 2
35053: PPUSH
35054: CALL_OW 251
35058: ST_TO_ADDR
// if not x or not y then
35059: LD_VAR 0 7
35063: NOT
35064: PUSH
35065: LD_VAR 0 8
35069: NOT
35070: OR
35071: IFFALSE 35075
// exit ;
35073: GO 35470
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35075: LD_ADDR_VAR 0 6
35079: PUSH
35080: LD_VAR 0 7
35084: PPUSH
35085: LD_INT 0
35087: PPUSH
35088: LD_INT 4
35090: PPUSH
35091: CALL_OW 272
35095: PUSH
35096: LD_VAR 0 8
35100: PPUSH
35101: LD_INT 0
35103: PPUSH
35104: LD_INT 4
35106: PPUSH
35107: CALL_OW 273
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_VAR 0 7
35120: PPUSH
35121: LD_INT 1
35123: PPUSH
35124: LD_INT 4
35126: PPUSH
35127: CALL_OW 272
35131: PUSH
35132: LD_VAR 0 8
35136: PPUSH
35137: LD_INT 1
35139: PPUSH
35140: LD_INT 4
35142: PPUSH
35143: CALL_OW 273
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_VAR 0 7
35156: PPUSH
35157: LD_INT 2
35159: PPUSH
35160: LD_INT 4
35162: PPUSH
35163: CALL_OW 272
35167: PUSH
35168: LD_VAR 0 8
35172: PPUSH
35173: LD_INT 2
35175: PPUSH
35176: LD_INT 4
35178: PPUSH
35179: CALL_OW 273
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_VAR 0 7
35192: PPUSH
35193: LD_INT 3
35195: PPUSH
35196: LD_INT 4
35198: PPUSH
35199: CALL_OW 272
35203: PUSH
35204: LD_VAR 0 8
35208: PPUSH
35209: LD_INT 3
35211: PPUSH
35212: LD_INT 4
35214: PPUSH
35215: CALL_OW 273
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_VAR 0 7
35228: PPUSH
35229: LD_INT 4
35231: PPUSH
35232: LD_INT 4
35234: PPUSH
35235: CALL_OW 272
35239: PUSH
35240: LD_VAR 0 8
35244: PPUSH
35245: LD_INT 4
35247: PPUSH
35248: LD_INT 4
35250: PPUSH
35251: CALL_OW 273
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_VAR 0 7
35264: PPUSH
35265: LD_INT 5
35267: PPUSH
35268: LD_INT 4
35270: PPUSH
35271: CALL_OW 272
35275: PUSH
35276: LD_VAR 0 8
35280: PPUSH
35281: LD_INT 5
35283: PPUSH
35284: LD_INT 4
35286: PPUSH
35287: CALL_OW 273
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: ST_TO_ADDR
// for i = tmp downto 1 do
35304: LD_ADDR_VAR 0 4
35308: PUSH
35309: DOUBLE
35310: LD_VAR 0 6
35314: INC
35315: ST_TO_ADDR
35316: LD_INT 1
35318: PUSH
35319: FOR_DOWNTO
35320: IFFALSE 35421
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35322: LD_VAR 0 6
35326: PUSH
35327: LD_VAR 0 4
35331: ARRAY
35332: PUSH
35333: LD_INT 1
35335: ARRAY
35336: PPUSH
35337: LD_VAR 0 6
35341: PUSH
35342: LD_VAR 0 4
35346: ARRAY
35347: PUSH
35348: LD_INT 2
35350: ARRAY
35351: PPUSH
35352: CALL_OW 488
35356: NOT
35357: PUSH
35358: LD_VAR 0 6
35362: PUSH
35363: LD_VAR 0 4
35367: ARRAY
35368: PUSH
35369: LD_INT 1
35371: ARRAY
35372: PPUSH
35373: LD_VAR 0 6
35377: PUSH
35378: LD_VAR 0 4
35382: ARRAY
35383: PUSH
35384: LD_INT 2
35386: ARRAY
35387: PPUSH
35388: CALL_OW 428
35392: PUSH
35393: LD_INT 0
35395: NONEQUAL
35396: OR
35397: IFFALSE 35419
// tmp := Delete ( tmp , i ) ;
35399: LD_ADDR_VAR 0 6
35403: PUSH
35404: LD_VAR 0 6
35408: PPUSH
35409: LD_VAR 0 4
35413: PPUSH
35414: CALL_OW 3
35418: ST_TO_ADDR
35419: GO 35319
35421: POP
35422: POP
// j := GetClosestHex ( unit , tmp ) ;
35423: LD_ADDR_VAR 0 5
35427: PUSH
35428: LD_VAR 0 1
35432: PPUSH
35433: LD_VAR 0 6
35437: PPUSH
35438: CALL 34725 0 2
35442: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35443: LD_VAR 0 1
35447: PPUSH
35448: LD_VAR 0 5
35452: PUSH
35453: LD_INT 1
35455: ARRAY
35456: PPUSH
35457: LD_VAR 0 5
35461: PUSH
35462: LD_INT 2
35464: ARRAY
35465: PPUSH
35466: CALL_OW 111
// end ;
35470: LD_VAR 0 3
35474: RET
// export function PrepareApemanSoldier ( ) ; begin
35475: LD_INT 0
35477: PPUSH
// uc_nation := 0 ;
35478: LD_ADDR_OWVAR 21
35482: PUSH
35483: LD_INT 0
35485: ST_TO_ADDR
// hc_sex := sex_male ;
35486: LD_ADDR_OWVAR 27
35490: PUSH
35491: LD_INT 1
35493: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35494: LD_ADDR_OWVAR 28
35498: PUSH
35499: LD_INT 15
35501: ST_TO_ADDR
// hc_gallery :=  ;
35502: LD_ADDR_OWVAR 33
35506: PUSH
35507: LD_STRING 
35509: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35510: LD_ADDR_OWVAR 31
35514: PUSH
35515: LD_INT 0
35517: PPUSH
35518: LD_INT 3
35520: PPUSH
35521: CALL_OW 12
35525: PUSH
35526: LD_INT 0
35528: PPUSH
35529: LD_INT 3
35531: PPUSH
35532: CALL_OW 12
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: ST_TO_ADDR
// end ;
35549: LD_VAR 0 1
35553: RET
// export function PrepareApemanEngineer ( ) ; begin
35554: LD_INT 0
35556: PPUSH
// uc_nation := 0 ;
35557: LD_ADDR_OWVAR 21
35561: PUSH
35562: LD_INT 0
35564: ST_TO_ADDR
// hc_sex := sex_male ;
35565: LD_ADDR_OWVAR 27
35569: PUSH
35570: LD_INT 1
35572: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35573: LD_ADDR_OWVAR 28
35577: PUSH
35578: LD_INT 16
35580: ST_TO_ADDR
// hc_gallery :=  ;
35581: LD_ADDR_OWVAR 33
35585: PUSH
35586: LD_STRING 
35588: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35589: LD_ADDR_OWVAR 31
35593: PUSH
35594: LD_INT 0
35596: PPUSH
35597: LD_INT 3
35599: PPUSH
35600: CALL_OW 12
35604: PUSH
35605: LD_INT 0
35607: PPUSH
35608: LD_INT 3
35610: PPUSH
35611: CALL_OW 12
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: ST_TO_ADDR
// end ;
35628: LD_VAR 0 1
35632: RET
// export function PrepareApeman ( agressivity ) ; begin
35633: LD_INT 0
35635: PPUSH
// uc_side := 0 ;
35636: LD_ADDR_OWVAR 20
35640: PUSH
35641: LD_INT 0
35643: ST_TO_ADDR
// uc_nation := 0 ;
35644: LD_ADDR_OWVAR 21
35648: PUSH
35649: LD_INT 0
35651: ST_TO_ADDR
// hc_sex := sex_male ;
35652: LD_ADDR_OWVAR 27
35656: PUSH
35657: LD_INT 1
35659: ST_TO_ADDR
// hc_class := class_apeman ;
35660: LD_ADDR_OWVAR 28
35664: PUSH
35665: LD_INT 12
35667: ST_TO_ADDR
// hc_gallery :=  ;
35668: LD_ADDR_OWVAR 33
35672: PUSH
35673: LD_STRING 
35675: ST_TO_ADDR
// if agressivity = 0 then
35676: LD_VAR 0 1
35680: PUSH
35681: LD_INT 0
35683: EQUAL
35684: IFFALSE 35696
// hc_agressivity := 0 else
35686: LD_ADDR_OWVAR 35
35690: PUSH
35691: LD_INT 0
35693: ST_TO_ADDR
35694: GO 35717
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35696: LD_ADDR_OWVAR 35
35700: PUSH
35701: LD_VAR 0 1
35705: NEG
35706: PPUSH
35707: LD_VAR 0 1
35711: PPUSH
35712: CALL_OW 12
35716: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35717: LD_ADDR_OWVAR 31
35721: PUSH
35722: LD_INT 0
35724: PPUSH
35725: LD_INT 3
35727: PPUSH
35728: CALL_OW 12
35732: PUSH
35733: LD_INT 0
35735: PPUSH
35736: LD_INT 3
35738: PPUSH
35739: CALL_OW 12
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: ST_TO_ADDR
// end ;
35756: LD_VAR 0 2
35760: RET
// export function PrepareTiger ( agressivity ) ; begin
35761: LD_INT 0
35763: PPUSH
// uc_side := 0 ;
35764: LD_ADDR_OWVAR 20
35768: PUSH
35769: LD_INT 0
35771: ST_TO_ADDR
// uc_nation := 0 ;
35772: LD_ADDR_OWVAR 21
35776: PUSH
35777: LD_INT 0
35779: ST_TO_ADDR
// hc_class := class_tiger ;
35780: LD_ADDR_OWVAR 28
35784: PUSH
35785: LD_INT 14
35787: ST_TO_ADDR
// hc_gallery :=  ;
35788: LD_ADDR_OWVAR 33
35792: PUSH
35793: LD_STRING 
35795: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35796: LD_ADDR_OWVAR 35
35800: PUSH
35801: LD_VAR 0 1
35805: NEG
35806: PPUSH
35807: LD_VAR 0 1
35811: PPUSH
35812: CALL_OW 12
35816: ST_TO_ADDR
// end ;
35817: LD_VAR 0 2
35821: RET
// export function PrepareEnchidna ( ) ; begin
35822: LD_INT 0
35824: PPUSH
// uc_side := 0 ;
35825: LD_ADDR_OWVAR 20
35829: PUSH
35830: LD_INT 0
35832: ST_TO_ADDR
// uc_nation := 0 ;
35833: LD_ADDR_OWVAR 21
35837: PUSH
35838: LD_INT 0
35840: ST_TO_ADDR
// hc_class := class_baggie ;
35841: LD_ADDR_OWVAR 28
35845: PUSH
35846: LD_INT 13
35848: ST_TO_ADDR
// hc_gallery :=  ;
35849: LD_ADDR_OWVAR 33
35853: PUSH
35854: LD_STRING 
35856: ST_TO_ADDR
// end ;
35857: LD_VAR 0 1
35861: RET
// export function PrepareFrog ( ) ; begin
35862: LD_INT 0
35864: PPUSH
// uc_side := 0 ;
35865: LD_ADDR_OWVAR 20
35869: PUSH
35870: LD_INT 0
35872: ST_TO_ADDR
// uc_nation := 0 ;
35873: LD_ADDR_OWVAR 21
35877: PUSH
35878: LD_INT 0
35880: ST_TO_ADDR
// hc_class := class_frog ;
35881: LD_ADDR_OWVAR 28
35885: PUSH
35886: LD_INT 19
35888: ST_TO_ADDR
// hc_gallery :=  ;
35889: LD_ADDR_OWVAR 33
35893: PUSH
35894: LD_STRING 
35896: ST_TO_ADDR
// end ;
35897: LD_VAR 0 1
35901: RET
// export function PrepareFish ( ) ; begin
35902: LD_INT 0
35904: PPUSH
// uc_side := 0 ;
35905: LD_ADDR_OWVAR 20
35909: PUSH
35910: LD_INT 0
35912: ST_TO_ADDR
// uc_nation := 0 ;
35913: LD_ADDR_OWVAR 21
35917: PUSH
35918: LD_INT 0
35920: ST_TO_ADDR
// hc_class := class_fish ;
35921: LD_ADDR_OWVAR 28
35925: PUSH
35926: LD_INT 20
35928: ST_TO_ADDR
// hc_gallery :=  ;
35929: LD_ADDR_OWVAR 33
35933: PUSH
35934: LD_STRING 
35936: ST_TO_ADDR
// end ;
35937: LD_VAR 0 1
35941: RET
// export function PrepareBird ( ) ; begin
35942: LD_INT 0
35944: PPUSH
// uc_side := 0 ;
35945: LD_ADDR_OWVAR 20
35949: PUSH
35950: LD_INT 0
35952: ST_TO_ADDR
// uc_nation := 0 ;
35953: LD_ADDR_OWVAR 21
35957: PUSH
35958: LD_INT 0
35960: ST_TO_ADDR
// hc_class := class_phororhacos ;
35961: LD_ADDR_OWVAR 28
35965: PUSH
35966: LD_INT 18
35968: ST_TO_ADDR
// hc_gallery :=  ;
35969: LD_ADDR_OWVAR 33
35973: PUSH
35974: LD_STRING 
35976: ST_TO_ADDR
// end ;
35977: LD_VAR 0 1
35981: RET
// export function PrepareHorse ( ) ; begin
35982: LD_INT 0
35984: PPUSH
// uc_side := 0 ;
35985: LD_ADDR_OWVAR 20
35989: PUSH
35990: LD_INT 0
35992: ST_TO_ADDR
// uc_nation := 0 ;
35993: LD_ADDR_OWVAR 21
35997: PUSH
35998: LD_INT 0
36000: ST_TO_ADDR
// hc_class := class_horse ;
36001: LD_ADDR_OWVAR 28
36005: PUSH
36006: LD_INT 21
36008: ST_TO_ADDR
// hc_gallery :=  ;
36009: LD_ADDR_OWVAR 33
36013: PUSH
36014: LD_STRING 
36016: ST_TO_ADDR
// end ;
36017: LD_VAR 0 1
36021: RET
// export function PrepareMastodont ( ) ; begin
36022: LD_INT 0
36024: PPUSH
// uc_side := 0 ;
36025: LD_ADDR_OWVAR 20
36029: PUSH
36030: LD_INT 0
36032: ST_TO_ADDR
// uc_nation := 0 ;
36033: LD_ADDR_OWVAR 21
36037: PUSH
36038: LD_INT 0
36040: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36041: LD_ADDR_OWVAR 37
36045: PUSH
36046: LD_INT 31
36048: ST_TO_ADDR
// vc_control := control_rider ;
36049: LD_ADDR_OWVAR 38
36053: PUSH
36054: LD_INT 4
36056: ST_TO_ADDR
// end ;
36057: LD_VAR 0 1
36061: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36062: LD_INT 0
36064: PPUSH
36065: PPUSH
36066: PPUSH
// uc_side = 0 ;
36067: LD_ADDR_OWVAR 20
36071: PUSH
36072: LD_INT 0
36074: ST_TO_ADDR
// uc_nation = 0 ;
36075: LD_ADDR_OWVAR 21
36079: PUSH
36080: LD_INT 0
36082: ST_TO_ADDR
// InitHc_All ( ) ;
36083: CALL_OW 584
// InitVc ;
36087: CALL_OW 20
// if mastodonts then
36091: LD_VAR 0 6
36095: IFFALSE 36162
// for i = 1 to mastodonts do
36097: LD_ADDR_VAR 0 11
36101: PUSH
36102: DOUBLE
36103: LD_INT 1
36105: DEC
36106: ST_TO_ADDR
36107: LD_VAR 0 6
36111: PUSH
36112: FOR_TO
36113: IFFALSE 36160
// begin vc_chassis := 31 ;
36115: LD_ADDR_OWVAR 37
36119: PUSH
36120: LD_INT 31
36122: ST_TO_ADDR
// vc_control := control_rider ;
36123: LD_ADDR_OWVAR 38
36127: PUSH
36128: LD_INT 4
36130: ST_TO_ADDR
// animal := CreateVehicle ;
36131: LD_ADDR_VAR 0 12
36135: PUSH
36136: CALL_OW 45
36140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36141: LD_VAR 0 12
36145: PPUSH
36146: LD_VAR 0 8
36150: PPUSH
36151: LD_INT 0
36153: PPUSH
36154: CALL 38290 0 3
// end ;
36158: GO 36112
36160: POP
36161: POP
// if horses then
36162: LD_VAR 0 5
36166: IFFALSE 36233
// for i = 1 to horses do
36168: LD_ADDR_VAR 0 11
36172: PUSH
36173: DOUBLE
36174: LD_INT 1
36176: DEC
36177: ST_TO_ADDR
36178: LD_VAR 0 5
36182: PUSH
36183: FOR_TO
36184: IFFALSE 36231
// begin hc_class := 21 ;
36186: LD_ADDR_OWVAR 28
36190: PUSH
36191: LD_INT 21
36193: ST_TO_ADDR
// hc_gallery :=  ;
36194: LD_ADDR_OWVAR 33
36198: PUSH
36199: LD_STRING 
36201: ST_TO_ADDR
// animal := CreateHuman ;
36202: LD_ADDR_VAR 0 12
36206: PUSH
36207: CALL_OW 44
36211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36212: LD_VAR 0 12
36216: PPUSH
36217: LD_VAR 0 8
36221: PPUSH
36222: LD_INT 0
36224: PPUSH
36225: CALL 38290 0 3
// end ;
36229: GO 36183
36231: POP
36232: POP
// if birds then
36233: LD_VAR 0 1
36237: IFFALSE 36304
// for i = 1 to birds do
36239: LD_ADDR_VAR 0 11
36243: PUSH
36244: DOUBLE
36245: LD_INT 1
36247: DEC
36248: ST_TO_ADDR
36249: LD_VAR 0 1
36253: PUSH
36254: FOR_TO
36255: IFFALSE 36302
// begin hc_class := 18 ;
36257: LD_ADDR_OWVAR 28
36261: PUSH
36262: LD_INT 18
36264: ST_TO_ADDR
// hc_gallery =  ;
36265: LD_ADDR_OWVAR 33
36269: PUSH
36270: LD_STRING 
36272: ST_TO_ADDR
// animal := CreateHuman ;
36273: LD_ADDR_VAR 0 12
36277: PUSH
36278: CALL_OW 44
36282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36283: LD_VAR 0 12
36287: PPUSH
36288: LD_VAR 0 8
36292: PPUSH
36293: LD_INT 0
36295: PPUSH
36296: CALL 38290 0 3
// end ;
36300: GO 36254
36302: POP
36303: POP
// if tigers then
36304: LD_VAR 0 2
36308: IFFALSE 36392
// for i = 1 to tigers do
36310: LD_ADDR_VAR 0 11
36314: PUSH
36315: DOUBLE
36316: LD_INT 1
36318: DEC
36319: ST_TO_ADDR
36320: LD_VAR 0 2
36324: PUSH
36325: FOR_TO
36326: IFFALSE 36390
// begin hc_class = class_tiger ;
36328: LD_ADDR_OWVAR 28
36332: PUSH
36333: LD_INT 14
36335: ST_TO_ADDR
// hc_gallery =  ;
36336: LD_ADDR_OWVAR 33
36340: PUSH
36341: LD_STRING 
36343: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36344: LD_ADDR_OWVAR 35
36348: PUSH
36349: LD_INT 7
36351: NEG
36352: PPUSH
36353: LD_INT 7
36355: PPUSH
36356: CALL_OW 12
36360: ST_TO_ADDR
// animal := CreateHuman ;
36361: LD_ADDR_VAR 0 12
36365: PUSH
36366: CALL_OW 44
36370: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36371: LD_VAR 0 12
36375: PPUSH
36376: LD_VAR 0 8
36380: PPUSH
36381: LD_INT 0
36383: PPUSH
36384: CALL 38290 0 3
// end ;
36388: GO 36325
36390: POP
36391: POP
// if apemans then
36392: LD_VAR 0 3
36396: IFFALSE 36519
// for i = 1 to apemans do
36398: LD_ADDR_VAR 0 11
36402: PUSH
36403: DOUBLE
36404: LD_INT 1
36406: DEC
36407: ST_TO_ADDR
36408: LD_VAR 0 3
36412: PUSH
36413: FOR_TO
36414: IFFALSE 36517
// begin hc_class = class_apeman ;
36416: LD_ADDR_OWVAR 28
36420: PUSH
36421: LD_INT 12
36423: ST_TO_ADDR
// hc_gallery =  ;
36424: LD_ADDR_OWVAR 33
36428: PUSH
36429: LD_STRING 
36431: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36432: LD_ADDR_OWVAR 35
36436: PUSH
36437: LD_INT 2
36439: NEG
36440: PPUSH
36441: LD_INT 2
36443: PPUSH
36444: CALL_OW 12
36448: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36449: LD_ADDR_OWVAR 31
36453: PUSH
36454: LD_INT 1
36456: PPUSH
36457: LD_INT 3
36459: PPUSH
36460: CALL_OW 12
36464: PUSH
36465: LD_INT 1
36467: PPUSH
36468: LD_INT 3
36470: PPUSH
36471: CALL_OW 12
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: ST_TO_ADDR
// animal := CreateHuman ;
36488: LD_ADDR_VAR 0 12
36492: PUSH
36493: CALL_OW 44
36497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36498: LD_VAR 0 12
36502: PPUSH
36503: LD_VAR 0 8
36507: PPUSH
36508: LD_INT 0
36510: PPUSH
36511: CALL 38290 0 3
// end ;
36515: GO 36413
36517: POP
36518: POP
// if enchidnas then
36519: LD_VAR 0 4
36523: IFFALSE 36590
// for i = 1 to enchidnas do
36525: LD_ADDR_VAR 0 11
36529: PUSH
36530: DOUBLE
36531: LD_INT 1
36533: DEC
36534: ST_TO_ADDR
36535: LD_VAR 0 4
36539: PUSH
36540: FOR_TO
36541: IFFALSE 36588
// begin hc_class = 13 ;
36543: LD_ADDR_OWVAR 28
36547: PUSH
36548: LD_INT 13
36550: ST_TO_ADDR
// hc_gallery =  ;
36551: LD_ADDR_OWVAR 33
36555: PUSH
36556: LD_STRING 
36558: ST_TO_ADDR
// animal := CreateHuman ;
36559: LD_ADDR_VAR 0 12
36563: PUSH
36564: CALL_OW 44
36568: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36569: LD_VAR 0 12
36573: PPUSH
36574: LD_VAR 0 8
36578: PPUSH
36579: LD_INT 0
36581: PPUSH
36582: CALL 38290 0 3
// end ;
36586: GO 36540
36588: POP
36589: POP
// if fishes then
36590: LD_VAR 0 7
36594: IFFALSE 36661
// for i = 1 to fishes do
36596: LD_ADDR_VAR 0 11
36600: PUSH
36601: DOUBLE
36602: LD_INT 1
36604: DEC
36605: ST_TO_ADDR
36606: LD_VAR 0 7
36610: PUSH
36611: FOR_TO
36612: IFFALSE 36659
// begin hc_class = 20 ;
36614: LD_ADDR_OWVAR 28
36618: PUSH
36619: LD_INT 20
36621: ST_TO_ADDR
// hc_gallery =  ;
36622: LD_ADDR_OWVAR 33
36626: PUSH
36627: LD_STRING 
36629: ST_TO_ADDR
// animal := CreateHuman ;
36630: LD_ADDR_VAR 0 12
36634: PUSH
36635: CALL_OW 44
36639: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36640: LD_VAR 0 12
36644: PPUSH
36645: LD_VAR 0 9
36649: PPUSH
36650: LD_INT 0
36652: PPUSH
36653: CALL 38290 0 3
// end ;
36657: GO 36611
36659: POP
36660: POP
// end ;
36661: LD_VAR 0 10
36665: RET
// export function WantHeal ( sci , unit ) ; begin
36666: LD_INT 0
36668: PPUSH
// if GetTaskList ( sci ) > 0 then
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 437
36678: PUSH
36679: LD_INT 0
36681: GREATER
36682: IFFALSE 36752
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36684: LD_VAR 0 1
36688: PPUSH
36689: CALL_OW 437
36693: PUSH
36694: LD_INT 1
36696: ARRAY
36697: PUSH
36698: LD_INT 1
36700: ARRAY
36701: PUSH
36702: LD_STRING l
36704: EQUAL
36705: PUSH
36706: LD_VAR 0 1
36710: PPUSH
36711: CALL_OW 437
36715: PUSH
36716: LD_INT 1
36718: ARRAY
36719: PUSH
36720: LD_INT 4
36722: ARRAY
36723: PUSH
36724: LD_VAR 0 2
36728: EQUAL
36729: AND
36730: IFFALSE 36742
// result := true else
36732: LD_ADDR_VAR 0 3
36736: PUSH
36737: LD_INT 1
36739: ST_TO_ADDR
36740: GO 36750
// result := false ;
36742: LD_ADDR_VAR 0 3
36746: PUSH
36747: LD_INT 0
36749: ST_TO_ADDR
// end else
36750: GO 36760
// result := false ;
36752: LD_ADDR_VAR 0 3
36756: PUSH
36757: LD_INT 0
36759: ST_TO_ADDR
// end ;
36760: LD_VAR 0 3
36764: RET
// export function HealTarget ( sci ) ; begin
36765: LD_INT 0
36767: PPUSH
// if not sci then
36768: LD_VAR 0 1
36772: NOT
36773: IFFALSE 36777
// exit ;
36775: GO 36842
// result := 0 ;
36777: LD_ADDR_VAR 0 2
36781: PUSH
36782: LD_INT 0
36784: ST_TO_ADDR
// if GetTaskList ( sci ) then
36785: LD_VAR 0 1
36789: PPUSH
36790: CALL_OW 437
36794: IFFALSE 36842
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36796: LD_VAR 0 1
36800: PPUSH
36801: CALL_OW 437
36805: PUSH
36806: LD_INT 1
36808: ARRAY
36809: PUSH
36810: LD_INT 1
36812: ARRAY
36813: PUSH
36814: LD_STRING l
36816: EQUAL
36817: IFFALSE 36842
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36819: LD_ADDR_VAR 0 2
36823: PUSH
36824: LD_VAR 0 1
36828: PPUSH
36829: CALL_OW 437
36833: PUSH
36834: LD_INT 1
36836: ARRAY
36837: PUSH
36838: LD_INT 4
36840: ARRAY
36841: ST_TO_ADDR
// end ;
36842: LD_VAR 0 2
36846: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36847: LD_INT 0
36849: PPUSH
36850: PPUSH
36851: PPUSH
36852: PPUSH
// if not base_units then
36853: LD_VAR 0 1
36857: NOT
36858: IFFALSE 36862
// exit ;
36860: GO 36949
// result := false ;
36862: LD_ADDR_VAR 0 2
36866: PUSH
36867: LD_INT 0
36869: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36870: LD_ADDR_VAR 0 5
36874: PUSH
36875: LD_VAR 0 1
36879: PPUSH
36880: LD_INT 21
36882: PUSH
36883: LD_INT 3
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PPUSH
36890: CALL_OW 72
36894: ST_TO_ADDR
// if not tmp then
36895: LD_VAR 0 5
36899: NOT
36900: IFFALSE 36904
// exit ;
36902: GO 36949
// for i in tmp do
36904: LD_ADDR_VAR 0 3
36908: PUSH
36909: LD_VAR 0 5
36913: PUSH
36914: FOR_IN
36915: IFFALSE 36947
// begin result := EnemyInRange ( i , 22 ) ;
36917: LD_ADDR_VAR 0 2
36921: PUSH
36922: LD_VAR 0 3
36926: PPUSH
36927: LD_INT 22
36929: PPUSH
36930: CALL 34527 0 2
36934: ST_TO_ADDR
// if result then
36935: LD_VAR 0 2
36939: IFFALSE 36945
// exit ;
36941: POP
36942: POP
36943: GO 36949
// end ;
36945: GO 36914
36947: POP
36948: POP
// end ;
36949: LD_VAR 0 2
36953: RET
// export function FilterByTag ( units , tag ) ; begin
36954: LD_INT 0
36956: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36957: LD_ADDR_VAR 0 3
36961: PUSH
36962: LD_VAR 0 1
36966: PPUSH
36967: LD_INT 120
36969: PUSH
36970: LD_VAR 0 2
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PPUSH
36979: CALL_OW 72
36983: ST_TO_ADDR
// end ;
36984: LD_VAR 0 3
36988: RET
// export function IsDriver ( un ) ; begin
36989: LD_INT 0
36991: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36992: LD_ADDR_VAR 0 2
36996: PUSH
36997: LD_VAR 0 1
37001: PUSH
37002: LD_INT 55
37004: PUSH
37005: EMPTY
37006: LIST
37007: PPUSH
37008: CALL_OW 69
37012: IN
37013: ST_TO_ADDR
// end ;
37014: LD_VAR 0 2
37018: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37019: LD_INT 0
37021: PPUSH
37022: PPUSH
// list := [ ] ;
37023: LD_ADDR_VAR 0 5
37027: PUSH
37028: EMPTY
37029: ST_TO_ADDR
// case d of 0 :
37030: LD_VAR 0 3
37034: PUSH
37035: LD_INT 0
37037: DOUBLE
37038: EQUAL
37039: IFTRUE 37043
37041: GO 37176
37043: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37044: LD_ADDR_VAR 0 5
37048: PUSH
37049: LD_VAR 0 1
37053: PUSH
37054: LD_INT 4
37056: MINUS
37057: PUSH
37058: LD_VAR 0 2
37062: PUSH
37063: LD_INT 4
37065: MINUS
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: LIST
37074: PUSH
37075: LD_VAR 0 1
37079: PUSH
37080: LD_INT 3
37082: MINUS
37083: PUSH
37084: LD_VAR 0 2
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: PUSH
37097: LD_VAR 0 1
37101: PUSH
37102: LD_INT 4
37104: PLUS
37105: PUSH
37106: LD_VAR 0 2
37110: PUSH
37111: LD_INT 4
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: LIST
37118: PUSH
37119: LD_VAR 0 1
37123: PUSH
37124: LD_INT 3
37126: PLUS
37127: PUSH
37128: LD_VAR 0 2
37132: PUSH
37133: LD_INT 3
37135: PLUS
37136: PUSH
37137: LD_INT 5
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: LIST
37144: PUSH
37145: LD_VAR 0 1
37149: PUSH
37150: LD_VAR 0 2
37154: PUSH
37155: LD_INT 4
37157: PLUS
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: ST_TO_ADDR
// end ; 1 :
37174: GO 37874
37176: LD_INT 1
37178: DOUBLE
37179: EQUAL
37180: IFTRUE 37184
37182: GO 37317
37184: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37185: LD_ADDR_VAR 0 5
37189: PUSH
37190: LD_VAR 0 1
37194: PUSH
37195: LD_VAR 0 2
37199: PUSH
37200: LD_INT 4
37202: MINUS
37203: PUSH
37204: LD_INT 3
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: PUSH
37212: LD_VAR 0 1
37216: PUSH
37217: LD_INT 3
37219: MINUS
37220: PUSH
37221: LD_VAR 0 2
37225: PUSH
37226: LD_INT 3
37228: MINUS
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: LIST
37237: PUSH
37238: LD_VAR 0 1
37242: PUSH
37243: LD_INT 4
37245: MINUS
37246: PUSH
37247: LD_VAR 0 2
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: PUSH
37260: LD_VAR 0 1
37264: PUSH
37265: LD_VAR 0 2
37269: PUSH
37270: LD_INT 3
37272: PLUS
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: PUSH
37282: LD_VAR 0 1
37286: PUSH
37287: LD_INT 4
37289: PLUS
37290: PUSH
37291: LD_VAR 0 2
37295: PUSH
37296: LD_INT 4
37298: PLUS
37299: PUSH
37300: LD_INT 5
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: ST_TO_ADDR
// end ; 2 :
37315: GO 37874
37317: LD_INT 2
37319: DOUBLE
37320: EQUAL
37321: IFTRUE 37325
37323: GO 37454
37325: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37326: LD_ADDR_VAR 0 5
37330: PUSH
37331: LD_VAR 0 1
37335: PUSH
37336: LD_VAR 0 2
37340: PUSH
37341: LD_INT 3
37343: MINUS
37344: PUSH
37345: LD_INT 3
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: LIST
37352: PUSH
37353: LD_VAR 0 1
37357: PUSH
37358: LD_INT 4
37360: PLUS
37361: PUSH
37362: LD_VAR 0 2
37366: PUSH
37367: LD_INT 4
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: PUSH
37375: LD_VAR 0 1
37379: PUSH
37380: LD_VAR 0 2
37384: PUSH
37385: LD_INT 4
37387: PLUS
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: PUSH
37397: LD_VAR 0 1
37401: PUSH
37402: LD_INT 3
37404: MINUS
37405: PUSH
37406: LD_VAR 0 2
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: LIST
37418: PUSH
37419: LD_VAR 0 1
37423: PUSH
37424: LD_INT 4
37426: MINUS
37427: PUSH
37428: LD_VAR 0 2
37432: PUSH
37433: LD_INT 4
37435: MINUS
37436: PUSH
37437: LD_INT 2
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: ST_TO_ADDR
// end ; 3 :
37452: GO 37874
37454: LD_INT 3
37456: DOUBLE
37457: EQUAL
37458: IFTRUE 37462
37460: GO 37595
37462: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37463: LD_ADDR_VAR 0 5
37467: PUSH
37468: LD_VAR 0 1
37472: PUSH
37473: LD_INT 3
37475: PLUS
37476: PUSH
37477: LD_VAR 0 2
37481: PUSH
37482: LD_INT 4
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: PUSH
37490: LD_VAR 0 1
37494: PUSH
37495: LD_INT 4
37497: PLUS
37498: PUSH
37499: LD_VAR 0 2
37503: PUSH
37504: LD_INT 4
37506: PLUS
37507: PUSH
37508: LD_INT 5
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: PUSH
37516: LD_VAR 0 1
37520: PUSH
37521: LD_INT 4
37523: MINUS
37524: PUSH
37525: LD_VAR 0 2
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: PUSH
37538: LD_VAR 0 1
37542: PUSH
37543: LD_VAR 0 2
37547: PUSH
37548: LD_INT 4
37550: MINUS
37551: PUSH
37552: LD_INT 3
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: LIST
37559: PUSH
37560: LD_VAR 0 1
37564: PUSH
37565: LD_INT 3
37567: MINUS
37568: PUSH
37569: LD_VAR 0 2
37573: PUSH
37574: LD_INT 3
37576: MINUS
37577: PUSH
37578: LD_INT 2
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: LIST
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
// end ; 4 :
37593: GO 37874
37595: LD_INT 4
37597: DOUBLE
37598: EQUAL
37599: IFTRUE 37603
37601: GO 37736
37603: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37604: LD_ADDR_VAR 0 5
37608: PUSH
37609: LD_VAR 0 1
37613: PUSH
37614: LD_VAR 0 2
37618: PUSH
37619: LD_INT 4
37621: PLUS
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: PUSH
37631: LD_VAR 0 1
37635: PUSH
37636: LD_INT 3
37638: PLUS
37639: PUSH
37640: LD_VAR 0 2
37644: PUSH
37645: LD_INT 3
37647: PLUS
37648: PUSH
37649: LD_INT 5
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: LIST
37656: PUSH
37657: LD_VAR 0 1
37661: PUSH
37662: LD_INT 4
37664: PLUS
37665: PUSH
37666: LD_VAR 0 2
37670: PUSH
37671: LD_INT 4
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: LIST
37678: PUSH
37679: LD_VAR 0 1
37683: PUSH
37684: LD_VAR 0 2
37688: PUSH
37689: LD_INT 3
37691: MINUS
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: LIST
37700: PUSH
37701: LD_VAR 0 1
37705: PUSH
37706: LD_INT 4
37708: MINUS
37709: PUSH
37710: LD_VAR 0 2
37714: PUSH
37715: LD_INT 4
37717: MINUS
37718: PUSH
37719: LD_INT 2
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: ST_TO_ADDR
// end ; 5 :
37734: GO 37874
37736: LD_INT 5
37738: DOUBLE
37739: EQUAL
37740: IFTRUE 37744
37742: GO 37873
37744: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37745: LD_ADDR_VAR 0 5
37749: PUSH
37750: LD_VAR 0 1
37754: PUSH
37755: LD_INT 4
37757: MINUS
37758: PUSH
37759: LD_VAR 0 2
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: LIST
37771: PUSH
37772: LD_VAR 0 1
37776: PUSH
37777: LD_VAR 0 2
37781: PUSH
37782: LD_INT 4
37784: MINUS
37785: PUSH
37786: LD_INT 3
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: PUSH
37794: LD_VAR 0 1
37798: PUSH
37799: LD_INT 4
37801: PLUS
37802: PUSH
37803: LD_VAR 0 2
37807: PUSH
37808: LD_INT 4
37810: PLUS
37811: PUSH
37812: LD_INT 5
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: LIST
37819: PUSH
37820: LD_VAR 0 1
37824: PUSH
37825: LD_INT 3
37827: PLUS
37828: PUSH
37829: LD_VAR 0 2
37833: PUSH
37834: LD_INT 4
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: PUSH
37842: LD_VAR 0 1
37846: PUSH
37847: LD_VAR 0 2
37851: PUSH
37852: LD_INT 3
37854: PLUS
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// end ; end ;
37871: GO 37874
37873: POP
// result := list ;
37874: LD_ADDR_VAR 0 4
37878: PUSH
37879: LD_VAR 0 5
37883: ST_TO_ADDR
// end ;
37884: LD_VAR 0 4
37888: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37889: LD_INT 0
37891: PPUSH
37892: PPUSH
37893: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37894: LD_VAR 0 1
37898: NOT
37899: PUSH
37900: LD_VAR 0 2
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: LD_INT 3
37913: PUSH
37914: LD_INT 4
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: IN
37923: NOT
37924: OR
37925: IFFALSE 37929
// exit ;
37927: GO 38012
// tmp := [ ] ;
37929: LD_ADDR_VAR 0 5
37933: PUSH
37934: EMPTY
37935: ST_TO_ADDR
// for i in units do
37936: LD_ADDR_VAR 0 4
37940: PUSH
37941: LD_VAR 0 1
37945: PUSH
37946: FOR_IN
37947: IFFALSE 37981
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37949: LD_ADDR_VAR 0 5
37953: PUSH
37954: LD_VAR 0 5
37958: PPUSH
37959: LD_VAR 0 4
37963: PPUSH
37964: LD_VAR 0 2
37968: PPUSH
37969: CALL_OW 259
37973: PPUSH
37974: CALL 39385 0 2
37978: ST_TO_ADDR
37979: GO 37946
37981: POP
37982: POP
// if not tmp then
37983: LD_VAR 0 5
37987: NOT
37988: IFFALSE 37992
// exit ;
37990: GO 38012
// result := SortListByListDesc ( units , tmp ) ;
37992: LD_ADDR_VAR 0 3
37996: PUSH
37997: LD_VAR 0 1
38001: PPUSH
38002: LD_VAR 0 5
38006: PPUSH
38007: CALL_OW 77
38011: ST_TO_ADDR
// end ;
38012: LD_VAR 0 3
38016: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38017: LD_INT 0
38019: PPUSH
38020: PPUSH
38021: PPUSH
// result := false ;
38022: LD_ADDR_VAR 0 3
38026: PUSH
38027: LD_INT 0
38029: ST_TO_ADDR
// if not building then
38030: LD_VAR 0 2
38034: NOT
38035: IFFALSE 38039
// exit ;
38037: GO 38177
// x := GetX ( building ) ;
38039: LD_ADDR_VAR 0 4
38043: PUSH
38044: LD_VAR 0 2
38048: PPUSH
38049: CALL_OW 250
38053: ST_TO_ADDR
// y := GetY ( building ) ;
38054: LD_ADDR_VAR 0 5
38058: PUSH
38059: LD_VAR 0 2
38063: PPUSH
38064: CALL_OW 251
38068: ST_TO_ADDR
// if not x or not y then
38069: LD_VAR 0 4
38073: NOT
38074: PUSH
38075: LD_VAR 0 5
38079: NOT
38080: OR
38081: IFFALSE 38085
// exit ;
38083: GO 38177
// if GetTaskList ( unit ) then
38085: LD_VAR 0 1
38089: PPUSH
38090: CALL_OW 437
38094: IFFALSE 38177
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38096: LD_STRING e
38098: PUSH
38099: LD_VAR 0 1
38103: PPUSH
38104: CALL_OW 437
38108: PUSH
38109: LD_INT 1
38111: ARRAY
38112: PUSH
38113: LD_INT 1
38115: ARRAY
38116: EQUAL
38117: PUSH
38118: LD_VAR 0 4
38122: PUSH
38123: LD_VAR 0 1
38127: PPUSH
38128: CALL_OW 437
38132: PUSH
38133: LD_INT 1
38135: ARRAY
38136: PUSH
38137: LD_INT 2
38139: ARRAY
38140: EQUAL
38141: AND
38142: PUSH
38143: LD_VAR 0 5
38147: PUSH
38148: LD_VAR 0 1
38152: PPUSH
38153: CALL_OW 437
38157: PUSH
38158: LD_INT 1
38160: ARRAY
38161: PUSH
38162: LD_INT 3
38164: ARRAY
38165: EQUAL
38166: AND
38167: IFFALSE 38177
// result := true end ;
38169: LD_ADDR_VAR 0 3
38173: PUSH
38174: LD_INT 1
38176: ST_TO_ADDR
// end ;
38177: LD_VAR 0 3
38181: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38182: LD_INT 0
38184: PPUSH
// result := false ;
38185: LD_ADDR_VAR 0 4
38189: PUSH
38190: LD_INT 0
38192: ST_TO_ADDR
// if GetTaskList ( unit ) then
38193: LD_VAR 0 1
38197: PPUSH
38198: CALL_OW 437
38202: IFFALSE 38285
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38204: LD_STRING M
38206: PUSH
38207: LD_VAR 0 1
38211: PPUSH
38212: CALL_OW 437
38216: PUSH
38217: LD_INT 1
38219: ARRAY
38220: PUSH
38221: LD_INT 1
38223: ARRAY
38224: EQUAL
38225: PUSH
38226: LD_VAR 0 2
38230: PUSH
38231: LD_VAR 0 1
38235: PPUSH
38236: CALL_OW 437
38240: PUSH
38241: LD_INT 1
38243: ARRAY
38244: PUSH
38245: LD_INT 2
38247: ARRAY
38248: EQUAL
38249: AND
38250: PUSH
38251: LD_VAR 0 3
38255: PUSH
38256: LD_VAR 0 1
38260: PPUSH
38261: CALL_OW 437
38265: PUSH
38266: LD_INT 1
38268: ARRAY
38269: PUSH
38270: LD_INT 3
38272: ARRAY
38273: EQUAL
38274: AND
38275: IFFALSE 38285
// result := true ;
38277: LD_ADDR_VAR 0 4
38281: PUSH
38282: LD_INT 1
38284: ST_TO_ADDR
// end ; end ;
38285: LD_VAR 0 4
38289: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38290: LD_INT 0
38292: PPUSH
38293: PPUSH
38294: PPUSH
38295: PPUSH
// if not unit or not area then
38296: LD_VAR 0 1
38300: NOT
38301: PUSH
38302: LD_VAR 0 2
38306: NOT
38307: OR
38308: IFFALSE 38312
// exit ;
38310: GO 38488
// tmp := AreaToList ( area , i ) ;
38312: LD_ADDR_VAR 0 6
38316: PUSH
38317: LD_VAR 0 2
38321: PPUSH
38322: LD_VAR 0 5
38326: PPUSH
38327: CALL_OW 517
38331: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38332: LD_ADDR_VAR 0 5
38336: PUSH
38337: DOUBLE
38338: LD_INT 1
38340: DEC
38341: ST_TO_ADDR
38342: LD_VAR 0 6
38346: PUSH
38347: LD_INT 1
38349: ARRAY
38350: PUSH
38351: FOR_TO
38352: IFFALSE 38486
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38354: LD_ADDR_VAR 0 7
38358: PUSH
38359: LD_VAR 0 6
38363: PUSH
38364: LD_INT 1
38366: ARRAY
38367: PUSH
38368: LD_VAR 0 5
38372: ARRAY
38373: PUSH
38374: LD_VAR 0 6
38378: PUSH
38379: LD_INT 2
38381: ARRAY
38382: PUSH
38383: LD_VAR 0 5
38387: ARRAY
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38393: LD_INT 92
38395: PUSH
38396: LD_VAR 0 7
38400: PUSH
38401: LD_INT 1
38403: ARRAY
38404: PUSH
38405: LD_VAR 0 7
38409: PUSH
38410: LD_INT 2
38412: ARRAY
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: PPUSH
38423: CALL_OW 69
38427: PUSH
38428: LD_INT 0
38430: EQUAL
38431: IFFALSE 38484
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38433: LD_VAR 0 1
38437: PPUSH
38438: LD_VAR 0 7
38442: PUSH
38443: LD_INT 1
38445: ARRAY
38446: PPUSH
38447: LD_VAR 0 7
38451: PUSH
38452: LD_INT 2
38454: ARRAY
38455: PPUSH
38456: LD_VAR 0 3
38460: PPUSH
38461: CALL_OW 48
// result := IsPlaced ( unit ) ;
38465: LD_ADDR_VAR 0 4
38469: PUSH
38470: LD_VAR 0 1
38474: PPUSH
38475: CALL_OW 305
38479: ST_TO_ADDR
// exit ;
38480: POP
38481: POP
38482: GO 38488
// end ; end ;
38484: GO 38351
38486: POP
38487: POP
// end ;
38488: LD_VAR 0 4
38492: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38493: LD_INT 0
38495: PPUSH
38496: PPUSH
38497: PPUSH
// if not side or side > 8 then
38498: LD_VAR 0 1
38502: NOT
38503: PUSH
38504: LD_VAR 0 1
38508: PUSH
38509: LD_INT 8
38511: GREATER
38512: OR
38513: IFFALSE 38517
// exit ;
38515: GO 38704
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38517: LD_ADDR_VAR 0 4
38521: PUSH
38522: LD_INT 22
38524: PUSH
38525: LD_VAR 0 1
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 21
38536: PUSH
38537: LD_INT 3
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PPUSH
38548: CALL_OW 69
38552: ST_TO_ADDR
// if not tmp then
38553: LD_VAR 0 4
38557: NOT
38558: IFFALSE 38562
// exit ;
38560: GO 38704
// enable_addtolog := true ;
38562: LD_ADDR_OWVAR 81
38566: PUSH
38567: LD_INT 1
38569: ST_TO_ADDR
// AddToLog ( [ ) ;
38570: LD_STRING [
38572: PPUSH
38573: CALL_OW 561
// for i in tmp do
38577: LD_ADDR_VAR 0 3
38581: PUSH
38582: LD_VAR 0 4
38586: PUSH
38587: FOR_IN
38588: IFFALSE 38695
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38590: LD_STRING [
38592: PUSH
38593: LD_VAR 0 3
38597: PPUSH
38598: CALL_OW 266
38602: STR
38603: PUSH
38604: LD_STRING , 
38606: STR
38607: PUSH
38608: LD_VAR 0 3
38612: PPUSH
38613: CALL_OW 250
38617: STR
38618: PUSH
38619: LD_STRING , 
38621: STR
38622: PUSH
38623: LD_VAR 0 3
38627: PPUSH
38628: CALL_OW 251
38632: STR
38633: PUSH
38634: LD_STRING , 
38636: STR
38637: PUSH
38638: LD_VAR 0 3
38642: PPUSH
38643: CALL_OW 254
38647: STR
38648: PUSH
38649: LD_STRING , 
38651: STR
38652: PUSH
38653: LD_VAR 0 3
38657: PPUSH
38658: LD_INT 1
38660: PPUSH
38661: CALL_OW 268
38665: STR
38666: PUSH
38667: LD_STRING , 
38669: STR
38670: PUSH
38671: LD_VAR 0 3
38675: PPUSH
38676: LD_INT 2
38678: PPUSH
38679: CALL_OW 268
38683: STR
38684: PUSH
38685: LD_STRING ],
38687: STR
38688: PPUSH
38689: CALL_OW 561
// end ;
38693: GO 38587
38695: POP
38696: POP
// AddToLog ( ]; ) ;
38697: LD_STRING ];
38699: PPUSH
38700: CALL_OW 561
// end ;
38704: LD_VAR 0 2
38708: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38709: LD_INT 0
38711: PPUSH
38712: PPUSH
38713: PPUSH
38714: PPUSH
38715: PPUSH
// if not area or not rate or not max then
38716: LD_VAR 0 1
38720: NOT
38721: PUSH
38722: LD_VAR 0 2
38726: NOT
38727: OR
38728: PUSH
38729: LD_VAR 0 4
38733: NOT
38734: OR
38735: IFFALSE 38739
// exit ;
38737: GO 38928
// while 1 do
38739: LD_INT 1
38741: IFFALSE 38928
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38743: LD_ADDR_VAR 0 9
38747: PUSH
38748: LD_VAR 0 1
38752: PPUSH
38753: LD_INT 1
38755: PPUSH
38756: CALL_OW 287
38760: PUSH
38761: LD_INT 10
38763: MUL
38764: ST_TO_ADDR
// r := rate / 10 ;
38765: LD_ADDR_VAR 0 7
38769: PUSH
38770: LD_VAR 0 2
38774: PUSH
38775: LD_INT 10
38777: DIVREAL
38778: ST_TO_ADDR
// time := 1 1$00 ;
38779: LD_ADDR_VAR 0 8
38783: PUSH
38784: LD_INT 2100
38786: ST_TO_ADDR
// if amount < min then
38787: LD_VAR 0 9
38791: PUSH
38792: LD_VAR 0 3
38796: LESS
38797: IFFALSE 38815
// r := r * 2 else
38799: LD_ADDR_VAR 0 7
38803: PUSH
38804: LD_VAR 0 7
38808: PUSH
38809: LD_INT 2
38811: MUL
38812: ST_TO_ADDR
38813: GO 38841
// if amount > max then
38815: LD_VAR 0 9
38819: PUSH
38820: LD_VAR 0 4
38824: GREATER
38825: IFFALSE 38841
// r := r / 2 ;
38827: LD_ADDR_VAR 0 7
38831: PUSH
38832: LD_VAR 0 7
38836: PUSH
38837: LD_INT 2
38839: DIVREAL
38840: ST_TO_ADDR
// time := time / r ;
38841: LD_ADDR_VAR 0 8
38845: PUSH
38846: LD_VAR 0 8
38850: PUSH
38851: LD_VAR 0 7
38855: DIVREAL
38856: ST_TO_ADDR
// if time < 0 then
38857: LD_VAR 0 8
38861: PUSH
38862: LD_INT 0
38864: LESS
38865: IFFALSE 38882
// time := time * - 1 ;
38867: LD_ADDR_VAR 0 8
38871: PUSH
38872: LD_VAR 0 8
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: MUL
38881: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38882: LD_VAR 0 8
38886: PUSH
38887: LD_INT 35
38889: PPUSH
38890: LD_INT 875
38892: PPUSH
38893: CALL_OW 12
38897: PLUS
38898: PPUSH
38899: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38903: LD_INT 1
38905: PPUSH
38906: LD_INT 5
38908: PPUSH
38909: CALL_OW 12
38913: PPUSH
38914: LD_VAR 0 1
38918: PPUSH
38919: LD_INT 1
38921: PPUSH
38922: CALL_OW 55
// end ;
38926: GO 38739
// end ;
38928: LD_VAR 0 5
38932: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38933: LD_INT 0
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
// if not turrets or not factories then
38943: LD_VAR 0 1
38947: NOT
38948: PUSH
38949: LD_VAR 0 2
38953: NOT
38954: OR
38955: IFFALSE 38959
// exit ;
38957: GO 39266
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38959: LD_ADDR_VAR 0 10
38963: PUSH
38964: LD_INT 5
38966: PUSH
38967: LD_INT 6
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: LD_INT 4
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 3
38986: PUSH
38987: LD_INT 5
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 24
39001: PUSH
39002: LD_INT 25
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 23
39011: PUSH
39012: LD_INT 27
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 42
39025: PUSH
39026: LD_INT 43
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 44
39035: PUSH
39036: LD_INT 46
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 45
39045: PUSH
39046: LD_INT 47
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: LIST
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: ST_TO_ADDR
// result := [ ] ;
39063: LD_ADDR_VAR 0 3
39067: PUSH
39068: EMPTY
39069: ST_TO_ADDR
// for i in turrets do
39070: LD_ADDR_VAR 0 4
39074: PUSH
39075: LD_VAR 0 1
39079: PUSH
39080: FOR_IN
39081: IFFALSE 39264
// begin nat := GetNation ( i ) ;
39083: LD_ADDR_VAR 0 7
39087: PUSH
39088: LD_VAR 0 4
39092: PPUSH
39093: CALL_OW 248
39097: ST_TO_ADDR
// weapon := 0 ;
39098: LD_ADDR_VAR 0 8
39102: PUSH
39103: LD_INT 0
39105: ST_TO_ADDR
// if not nat then
39106: LD_VAR 0 7
39110: NOT
39111: IFFALSE 39115
// continue ;
39113: GO 39080
// for j in list [ nat ] do
39115: LD_ADDR_VAR 0 5
39119: PUSH
39120: LD_VAR 0 10
39124: PUSH
39125: LD_VAR 0 7
39129: ARRAY
39130: PUSH
39131: FOR_IN
39132: IFFALSE 39173
// if GetBWeapon ( i ) = j [ 1 ] then
39134: LD_VAR 0 4
39138: PPUSH
39139: CALL_OW 269
39143: PUSH
39144: LD_VAR 0 5
39148: PUSH
39149: LD_INT 1
39151: ARRAY
39152: EQUAL
39153: IFFALSE 39171
// begin weapon := j [ 2 ] ;
39155: LD_ADDR_VAR 0 8
39159: PUSH
39160: LD_VAR 0 5
39164: PUSH
39165: LD_INT 2
39167: ARRAY
39168: ST_TO_ADDR
// break ;
39169: GO 39173
// end ;
39171: GO 39131
39173: POP
39174: POP
// if not weapon then
39175: LD_VAR 0 8
39179: NOT
39180: IFFALSE 39184
// continue ;
39182: GO 39080
// for k in factories do
39184: LD_ADDR_VAR 0 6
39188: PUSH
39189: LD_VAR 0 2
39193: PUSH
39194: FOR_IN
39195: IFFALSE 39260
// begin weapons := AvailableWeaponList ( k ) ;
39197: LD_ADDR_VAR 0 9
39201: PUSH
39202: LD_VAR 0 6
39206: PPUSH
39207: CALL_OW 478
39211: ST_TO_ADDR
// if not weapons then
39212: LD_VAR 0 9
39216: NOT
39217: IFFALSE 39221
// continue ;
39219: GO 39194
// if weapon in weapons then
39221: LD_VAR 0 8
39225: PUSH
39226: LD_VAR 0 9
39230: IN
39231: IFFALSE 39258
// begin result := [ i , weapon ] ;
39233: LD_ADDR_VAR 0 3
39237: PUSH
39238: LD_VAR 0 4
39242: PUSH
39243: LD_VAR 0 8
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: ST_TO_ADDR
// exit ;
39252: POP
39253: POP
39254: POP
39255: POP
39256: GO 39266
// end ; end ;
39258: GO 39194
39260: POP
39261: POP
// end ;
39262: GO 39080
39264: POP
39265: POP
// end ;
39266: LD_VAR 0 3
39270: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39271: LD_INT 0
39273: PPUSH
// if not side or side > 8 then
39274: LD_VAR 0 3
39278: NOT
39279: PUSH
39280: LD_VAR 0 3
39284: PUSH
39285: LD_INT 8
39287: GREATER
39288: OR
39289: IFFALSE 39293
// exit ;
39291: GO 39352
// if not range then
39293: LD_VAR 0 4
39297: NOT
39298: IFFALSE 39309
// range := - 12 ;
39300: LD_ADDR_VAR 0 4
39304: PUSH
39305: LD_INT 12
39307: NEG
39308: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39309: LD_VAR 0 1
39313: PPUSH
39314: LD_VAR 0 2
39318: PPUSH
39319: LD_VAR 0 3
39323: PPUSH
39324: LD_VAR 0 4
39328: PPUSH
39329: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39333: LD_VAR 0 1
39337: PPUSH
39338: LD_VAR 0 2
39342: PPUSH
39343: LD_VAR 0 3
39347: PPUSH
39348: CALL_OW 331
// end ;
39352: LD_VAR 0 5
39356: RET
// export function Video ( mode ) ; begin
39357: LD_INT 0
39359: PPUSH
// ingame_video = mode ;
39360: LD_ADDR_OWVAR 52
39364: PUSH
39365: LD_VAR 0 1
39369: ST_TO_ADDR
// interface_hidden = mode ;
39370: LD_ADDR_OWVAR 54
39374: PUSH
39375: LD_VAR 0 1
39379: ST_TO_ADDR
// end ;
39380: LD_VAR 0 2
39384: RET
// export function Join ( array , element ) ; begin
39385: LD_INT 0
39387: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39388: LD_ADDR_VAR 0 3
39392: PUSH
39393: LD_VAR 0 1
39397: PPUSH
39398: LD_VAR 0 1
39402: PUSH
39403: LD_INT 1
39405: PLUS
39406: PPUSH
39407: LD_VAR 0 2
39411: PPUSH
39412: CALL_OW 1
39416: ST_TO_ADDR
// end ;
39417: LD_VAR 0 3
39421: RET
// export function JoinUnion ( array , element ) ; begin
39422: LD_INT 0
39424: PPUSH
// result := array union element ;
39425: LD_ADDR_VAR 0 3
39429: PUSH
39430: LD_VAR 0 1
39434: PUSH
39435: LD_VAR 0 2
39439: UNION
39440: ST_TO_ADDR
// end ;
39441: LD_VAR 0 3
39445: RET
// export function GetBehemoths ( side ) ; begin
39446: LD_INT 0
39448: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39449: LD_ADDR_VAR 0 2
39453: PUSH
39454: LD_INT 22
39456: PUSH
39457: LD_VAR 0 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 31
39468: PUSH
39469: LD_INT 25
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PPUSH
39480: CALL_OW 69
39484: ST_TO_ADDR
// end ;
39485: LD_VAR 0 2
39489: RET
// export function Shuffle ( array ) ; var i , index ; begin
39490: LD_INT 0
39492: PPUSH
39493: PPUSH
39494: PPUSH
// result := [ ] ;
39495: LD_ADDR_VAR 0 2
39499: PUSH
39500: EMPTY
39501: ST_TO_ADDR
// if not array then
39502: LD_VAR 0 1
39506: NOT
39507: IFFALSE 39511
// exit ;
39509: GO 39610
// Randomize ;
39511: CALL_OW 10
// for i = array downto 1 do
39515: LD_ADDR_VAR 0 3
39519: PUSH
39520: DOUBLE
39521: LD_VAR 0 1
39525: INC
39526: ST_TO_ADDR
39527: LD_INT 1
39529: PUSH
39530: FOR_DOWNTO
39531: IFFALSE 39608
// begin index := rand ( 1 , array ) ;
39533: LD_ADDR_VAR 0 4
39537: PUSH
39538: LD_INT 1
39540: PPUSH
39541: LD_VAR 0 1
39545: PPUSH
39546: CALL_OW 12
39550: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39551: LD_ADDR_VAR 0 2
39555: PUSH
39556: LD_VAR 0 2
39560: PPUSH
39561: LD_VAR 0 2
39565: PUSH
39566: LD_INT 1
39568: PLUS
39569: PPUSH
39570: LD_VAR 0 1
39574: PUSH
39575: LD_VAR 0 4
39579: ARRAY
39580: PPUSH
39581: CALL_OW 2
39585: ST_TO_ADDR
// array := Delete ( array , index ) ;
39586: LD_ADDR_VAR 0 1
39590: PUSH
39591: LD_VAR 0 1
39595: PPUSH
39596: LD_VAR 0 4
39600: PPUSH
39601: CALL_OW 3
39605: ST_TO_ADDR
// end ;
39606: GO 39530
39608: POP
39609: POP
// end ;
39610: LD_VAR 0 2
39614: RET
// export function GetBaseMaterials ( base ) ; begin
39615: LD_INT 0
39617: PPUSH
// result := [ 0 , 0 , 0 ] ;
39618: LD_ADDR_VAR 0 2
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: ST_TO_ADDR
// if not base then
39637: LD_VAR 0 1
39641: NOT
39642: IFFALSE 39646
// exit ;
39644: GO 39695
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39646: LD_ADDR_VAR 0 2
39650: PUSH
39651: LD_VAR 0 1
39655: PPUSH
39656: LD_INT 1
39658: PPUSH
39659: CALL_OW 275
39663: PUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: LD_INT 2
39671: PPUSH
39672: CALL_OW 275
39676: PUSH
39677: LD_VAR 0 1
39681: PPUSH
39682: LD_INT 3
39684: PPUSH
39685: CALL_OW 275
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: ST_TO_ADDR
// end ;
39695: LD_VAR 0 2
39699: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39700: LD_INT 0
39702: PPUSH
39703: PPUSH
// result := array ;
39704: LD_ADDR_VAR 0 3
39708: PUSH
39709: LD_VAR 0 1
39713: ST_TO_ADDR
// if size >= result then
39714: LD_VAR 0 2
39718: PUSH
39719: LD_VAR 0 3
39723: GREATEREQUAL
39724: IFFALSE 39728
// exit ;
39726: GO 39778
// if size then
39728: LD_VAR 0 2
39732: IFFALSE 39778
// for i := array downto size do
39734: LD_ADDR_VAR 0 4
39738: PUSH
39739: DOUBLE
39740: LD_VAR 0 1
39744: INC
39745: ST_TO_ADDR
39746: LD_VAR 0 2
39750: PUSH
39751: FOR_DOWNTO
39752: IFFALSE 39776
// result := Delete ( result , result ) ;
39754: LD_ADDR_VAR 0 3
39758: PUSH
39759: LD_VAR 0 3
39763: PPUSH
39764: LD_VAR 0 3
39768: PPUSH
39769: CALL_OW 3
39773: ST_TO_ADDR
39774: GO 39751
39776: POP
39777: POP
// end ;
39778: LD_VAR 0 3
39782: RET
// export function ComExit ( unit ) ; var tmp ; begin
39783: LD_INT 0
39785: PPUSH
39786: PPUSH
// if not IsInUnit ( unit ) then
39787: LD_VAR 0 1
39791: PPUSH
39792: CALL_OW 310
39796: NOT
39797: IFFALSE 39801
// exit ;
39799: GO 39861
// tmp := IsInUnit ( unit ) ;
39801: LD_ADDR_VAR 0 3
39805: PUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 310
39815: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39816: LD_VAR 0 3
39820: PPUSH
39821: CALL_OW 247
39825: PUSH
39826: LD_INT 2
39828: EQUAL
39829: IFFALSE 39842
// ComExitVehicle ( unit ) else
39831: LD_VAR 0 1
39835: PPUSH
39836: CALL_OW 121
39840: GO 39851
// ComExitBuilding ( unit ) ;
39842: LD_VAR 0 1
39846: PPUSH
39847: CALL_OW 122
// result := tmp ;
39851: LD_ADDR_VAR 0 2
39855: PUSH
39856: LD_VAR 0 3
39860: ST_TO_ADDR
// end ;
39861: LD_VAR 0 2
39865: RET
// export function ComExitAll ( units ) ; var i ; begin
39866: LD_INT 0
39868: PPUSH
39869: PPUSH
// if not units then
39870: LD_VAR 0 1
39874: NOT
39875: IFFALSE 39879
// exit ;
39877: GO 39905
// for i in units do
39879: LD_ADDR_VAR 0 3
39883: PUSH
39884: LD_VAR 0 1
39888: PUSH
39889: FOR_IN
39890: IFFALSE 39903
// ComExit ( i ) ;
39892: LD_VAR 0 3
39896: PPUSH
39897: CALL 39783 0 1
39901: GO 39889
39903: POP
39904: POP
// end ;
39905: LD_VAR 0 2
39909: RET
// export function ResetHc ; begin
39910: LD_INT 0
39912: PPUSH
// InitHc ;
39913: CALL_OW 19
// hc_importance := 0 ;
39917: LD_ADDR_OWVAR 32
39921: PUSH
39922: LD_INT 0
39924: ST_TO_ADDR
// end ;
39925: LD_VAR 0 1
39929: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39930: LD_INT 0
39932: PPUSH
39933: PPUSH
39934: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39935: LD_ADDR_VAR 0 6
39939: PUSH
39940: LD_VAR 0 1
39944: PUSH
39945: LD_VAR 0 3
39949: PLUS
39950: PUSH
39951: LD_INT 2
39953: DIV
39954: ST_TO_ADDR
// if _x < 0 then
39955: LD_VAR 0 6
39959: PUSH
39960: LD_INT 0
39962: LESS
39963: IFFALSE 39980
// _x := _x * - 1 ;
39965: LD_ADDR_VAR 0 6
39969: PUSH
39970: LD_VAR 0 6
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: MUL
39979: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39980: LD_ADDR_VAR 0 7
39984: PUSH
39985: LD_VAR 0 2
39989: PUSH
39990: LD_VAR 0 4
39994: PLUS
39995: PUSH
39996: LD_INT 2
39998: DIV
39999: ST_TO_ADDR
// if _y < 0 then
40000: LD_VAR 0 7
40004: PUSH
40005: LD_INT 0
40007: LESS
40008: IFFALSE 40025
// _y := _y * - 1 ;
40010: LD_ADDR_VAR 0 7
40014: PUSH
40015: LD_VAR 0 7
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: MUL
40024: ST_TO_ADDR
// result := [ _x , _y ] ;
40025: LD_ADDR_VAR 0 5
40029: PUSH
40030: LD_VAR 0 6
40034: PUSH
40035: LD_VAR 0 7
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: ST_TO_ADDR
// end ;
40044: LD_VAR 0 5
40048: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40049: LD_INT 0
40051: PPUSH
40052: PPUSH
40053: PPUSH
40054: PPUSH
// task := GetTaskList ( unit ) ;
40055: LD_ADDR_VAR 0 7
40059: PUSH
40060: LD_VAR 0 1
40064: PPUSH
40065: CALL_OW 437
40069: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40070: LD_VAR 0 7
40074: NOT
40075: PUSH
40076: LD_VAR 0 1
40080: PPUSH
40081: LD_VAR 0 2
40085: PPUSH
40086: CALL_OW 308
40090: NOT
40091: AND
40092: IFFALSE 40096
// exit ;
40094: GO 40214
// if IsInArea ( unit , area ) then
40096: LD_VAR 0 1
40100: PPUSH
40101: LD_VAR 0 2
40105: PPUSH
40106: CALL_OW 308
40110: IFFALSE 40128
// begin ComMoveToArea ( unit , goAway ) ;
40112: LD_VAR 0 1
40116: PPUSH
40117: LD_VAR 0 3
40121: PPUSH
40122: CALL_OW 113
// exit ;
40126: GO 40214
// end ; if task [ 1 ] [ 1 ] <> M then
40128: LD_VAR 0 7
40132: PUSH
40133: LD_INT 1
40135: ARRAY
40136: PUSH
40137: LD_INT 1
40139: ARRAY
40140: PUSH
40141: LD_STRING M
40143: NONEQUAL
40144: IFFALSE 40148
// exit ;
40146: GO 40214
// x := task [ 1 ] [ 2 ] ;
40148: LD_ADDR_VAR 0 5
40152: PUSH
40153: LD_VAR 0 7
40157: PUSH
40158: LD_INT 1
40160: ARRAY
40161: PUSH
40162: LD_INT 2
40164: ARRAY
40165: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40166: LD_ADDR_VAR 0 6
40170: PUSH
40171: LD_VAR 0 7
40175: PUSH
40176: LD_INT 1
40178: ARRAY
40179: PUSH
40180: LD_INT 3
40182: ARRAY
40183: ST_TO_ADDR
// if InArea ( x , y , area ) then
40184: LD_VAR 0 5
40188: PPUSH
40189: LD_VAR 0 6
40193: PPUSH
40194: LD_VAR 0 2
40198: PPUSH
40199: CALL_OW 309
40203: IFFALSE 40214
// ComStop ( unit ) ;
40205: LD_VAR 0 1
40209: PPUSH
40210: CALL_OW 141
// end ;
40214: LD_VAR 0 4
40218: RET
// export function Abs ( value ) ; begin
40219: LD_INT 0
40221: PPUSH
// result := value ;
40222: LD_ADDR_VAR 0 2
40226: PUSH
40227: LD_VAR 0 1
40231: ST_TO_ADDR
// if value < 0 then
40232: LD_VAR 0 1
40236: PUSH
40237: LD_INT 0
40239: LESS
40240: IFFALSE 40257
// result := value * - 1 ;
40242: LD_ADDR_VAR 0 2
40246: PUSH
40247: LD_VAR 0 1
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: MUL
40256: ST_TO_ADDR
// end ;
40257: LD_VAR 0 2
40261: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40262: LD_INT 0
40264: PPUSH
40265: PPUSH
40266: PPUSH
40267: PPUSH
40268: PPUSH
40269: PPUSH
40270: PPUSH
40271: PPUSH
// if not unit or not building then
40272: LD_VAR 0 1
40276: NOT
40277: PUSH
40278: LD_VAR 0 2
40282: NOT
40283: OR
40284: IFFALSE 40288
// exit ;
40286: GO 40514
// x := GetX ( building ) ;
40288: LD_ADDR_VAR 0 4
40292: PUSH
40293: LD_VAR 0 2
40297: PPUSH
40298: CALL_OW 250
40302: ST_TO_ADDR
// y := GetY ( building ) ;
40303: LD_ADDR_VAR 0 6
40307: PUSH
40308: LD_VAR 0 2
40312: PPUSH
40313: CALL_OW 251
40317: ST_TO_ADDR
// d := GetDir ( building ) ;
40318: LD_ADDR_VAR 0 8
40322: PUSH
40323: LD_VAR 0 2
40327: PPUSH
40328: CALL_OW 254
40332: ST_TO_ADDR
// r := 4 ;
40333: LD_ADDR_VAR 0 9
40337: PUSH
40338: LD_INT 4
40340: ST_TO_ADDR
// for i := 1 to 5 do
40341: LD_ADDR_VAR 0 10
40345: PUSH
40346: DOUBLE
40347: LD_INT 1
40349: DEC
40350: ST_TO_ADDR
40351: LD_INT 5
40353: PUSH
40354: FOR_TO
40355: IFFALSE 40512
// begin _x := ShiftX ( x , d , r + i ) ;
40357: LD_ADDR_VAR 0 5
40361: PUSH
40362: LD_VAR 0 4
40366: PPUSH
40367: LD_VAR 0 8
40371: PPUSH
40372: LD_VAR 0 9
40376: PUSH
40377: LD_VAR 0 10
40381: PLUS
40382: PPUSH
40383: CALL_OW 272
40387: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40388: LD_ADDR_VAR 0 7
40392: PUSH
40393: LD_VAR 0 6
40397: PPUSH
40398: LD_VAR 0 8
40402: PPUSH
40403: LD_VAR 0 9
40407: PUSH
40408: LD_VAR 0 10
40412: PLUS
40413: PPUSH
40414: CALL_OW 273
40418: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40419: LD_VAR 0 5
40423: PPUSH
40424: LD_VAR 0 7
40428: PPUSH
40429: CALL_OW 488
40433: PUSH
40434: LD_VAR 0 5
40438: PPUSH
40439: LD_VAR 0 7
40443: PPUSH
40444: CALL_OW 428
40448: PPUSH
40449: CALL_OW 247
40453: PUSH
40454: LD_INT 3
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: IN
40464: NOT
40465: AND
40466: IFFALSE 40510
// begin ComMoveXY ( unit , _x , _y ) ;
40468: LD_VAR 0 1
40472: PPUSH
40473: LD_VAR 0 5
40477: PPUSH
40478: LD_VAR 0 7
40482: PPUSH
40483: CALL_OW 111
// result := [ _x , _y ] ;
40487: LD_ADDR_VAR 0 3
40491: PUSH
40492: LD_VAR 0 5
40496: PUSH
40497: LD_VAR 0 7
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: ST_TO_ADDR
// exit ;
40506: POP
40507: POP
40508: GO 40514
// end ; end ;
40510: GO 40354
40512: POP
40513: POP
// end ;
40514: LD_VAR 0 3
40518: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40519: LD_INT 0
40521: PPUSH
40522: PPUSH
40523: PPUSH
// result := 0 ;
40524: LD_ADDR_VAR 0 3
40528: PUSH
40529: LD_INT 0
40531: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40532: LD_VAR 0 1
40536: PUSH
40537: LD_INT 0
40539: LESS
40540: PUSH
40541: LD_VAR 0 1
40545: PUSH
40546: LD_INT 8
40548: GREATER
40549: OR
40550: PUSH
40551: LD_VAR 0 2
40555: PUSH
40556: LD_INT 0
40558: LESS
40559: OR
40560: PUSH
40561: LD_VAR 0 2
40565: PUSH
40566: LD_INT 8
40568: GREATER
40569: OR
40570: IFFALSE 40574
// exit ;
40572: GO 40649
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40574: LD_ADDR_VAR 0 4
40578: PUSH
40579: LD_INT 22
40581: PUSH
40582: LD_VAR 0 2
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PPUSH
40591: CALL_OW 69
40595: PUSH
40596: FOR_IN
40597: IFFALSE 40647
// begin un := UnitShoot ( i ) ;
40599: LD_ADDR_VAR 0 5
40603: PUSH
40604: LD_VAR 0 4
40608: PPUSH
40609: CALL_OW 504
40613: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40614: LD_VAR 0 5
40618: PPUSH
40619: CALL_OW 255
40623: PUSH
40624: LD_VAR 0 1
40628: EQUAL
40629: IFFALSE 40645
// begin result := un ;
40631: LD_ADDR_VAR 0 3
40635: PUSH
40636: LD_VAR 0 5
40640: ST_TO_ADDR
// exit ;
40641: POP
40642: POP
40643: GO 40649
// end ; end ;
40645: GO 40596
40647: POP
40648: POP
// end ;
40649: LD_VAR 0 3
40653: RET
// export function GetCargoBay ( units ) ; begin
40654: LD_INT 0
40656: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40657: LD_ADDR_VAR 0 2
40661: PUSH
40662: LD_VAR 0 1
40666: PPUSH
40667: LD_INT 2
40669: PUSH
40670: LD_INT 34
40672: PUSH
40673: LD_INT 12
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 34
40682: PUSH
40683: LD_INT 51
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 34
40692: PUSH
40693: LD_INT 32
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 34
40702: PUSH
40703: LD_INT 89
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: PPUSH
40717: CALL_OW 72
40721: ST_TO_ADDR
// end ;
40722: LD_VAR 0 2
40726: RET
// export function Negate ( value ) ; begin
40727: LD_INT 0
40729: PPUSH
// result := not value ;
40730: LD_ADDR_VAR 0 2
40734: PUSH
40735: LD_VAR 0 1
40739: NOT
40740: ST_TO_ADDR
// end ;
40741: LD_VAR 0 2
40745: RET
// export function Inc ( value ) ; begin
40746: LD_INT 0
40748: PPUSH
// result := value + 1 ;
40749: LD_ADDR_VAR 0 2
40753: PUSH
40754: LD_VAR 0 1
40758: PUSH
40759: LD_INT 1
40761: PLUS
40762: ST_TO_ADDR
// end ;
40763: LD_VAR 0 2
40767: RET
// export function Dec ( value ) ; begin
40768: LD_INT 0
40770: PPUSH
// result := value - 1 ;
40771: LD_ADDR_VAR 0 2
40775: PUSH
40776: LD_VAR 0 1
40780: PUSH
40781: LD_INT 1
40783: MINUS
40784: ST_TO_ADDR
// end ;
40785: LD_VAR 0 2
40789: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40800: LD_VAR 0 1
40804: PPUSH
40805: LD_VAR 0 2
40809: PPUSH
40810: CALL_OW 488
40814: NOT
40815: PUSH
40816: LD_VAR 0 3
40820: PPUSH
40821: LD_VAR 0 4
40825: PPUSH
40826: CALL_OW 488
40830: NOT
40831: OR
40832: IFFALSE 40845
// begin result := - 1 ;
40834: LD_ADDR_VAR 0 5
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: ST_TO_ADDR
// exit ;
40843: GO 41080
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40845: LD_ADDR_VAR 0 12
40849: PUSH
40850: LD_VAR 0 1
40854: PPUSH
40855: LD_VAR 0 2
40859: PPUSH
40860: LD_VAR 0 3
40864: PPUSH
40865: LD_VAR 0 4
40869: PPUSH
40870: CALL 39930 0 4
40874: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40875: LD_ADDR_VAR 0 11
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: LD_VAR 0 2
40889: PPUSH
40890: LD_VAR 0 12
40894: PUSH
40895: LD_INT 1
40897: ARRAY
40898: PPUSH
40899: LD_VAR 0 12
40903: PUSH
40904: LD_INT 2
40906: ARRAY
40907: PPUSH
40908: CALL_OW 298
40912: ST_TO_ADDR
// distance := 9999 ;
40913: LD_ADDR_VAR 0 10
40917: PUSH
40918: LD_INT 9999
40920: ST_TO_ADDR
// for i := 0 to 5 do
40921: LD_ADDR_VAR 0 6
40925: PUSH
40926: DOUBLE
40927: LD_INT 0
40929: DEC
40930: ST_TO_ADDR
40931: LD_INT 5
40933: PUSH
40934: FOR_TO
40935: IFFALSE 41078
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40937: LD_ADDR_VAR 0 7
40941: PUSH
40942: LD_VAR 0 1
40946: PPUSH
40947: LD_VAR 0 6
40951: PPUSH
40952: LD_VAR 0 11
40956: PPUSH
40957: CALL_OW 272
40961: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40962: LD_ADDR_VAR 0 8
40966: PUSH
40967: LD_VAR 0 2
40971: PPUSH
40972: LD_VAR 0 6
40976: PPUSH
40977: LD_VAR 0 11
40981: PPUSH
40982: CALL_OW 273
40986: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40987: LD_VAR 0 7
40991: PPUSH
40992: LD_VAR 0 8
40996: PPUSH
40997: CALL_OW 488
41001: NOT
41002: IFFALSE 41006
// continue ;
41004: GO 40934
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41006: LD_ADDR_VAR 0 9
41010: PUSH
41011: LD_VAR 0 12
41015: PUSH
41016: LD_INT 1
41018: ARRAY
41019: PPUSH
41020: LD_VAR 0 12
41024: PUSH
41025: LD_INT 2
41027: ARRAY
41028: PPUSH
41029: LD_VAR 0 7
41033: PPUSH
41034: LD_VAR 0 8
41038: PPUSH
41039: CALL_OW 298
41043: ST_TO_ADDR
// if tmp < distance then
41044: LD_VAR 0 9
41048: PUSH
41049: LD_VAR 0 10
41053: LESS
41054: IFFALSE 41076
// begin result := i ;
41056: LD_ADDR_VAR 0 5
41060: PUSH
41061: LD_VAR 0 6
41065: ST_TO_ADDR
// distance := tmp ;
41066: LD_ADDR_VAR 0 10
41070: PUSH
41071: LD_VAR 0 9
41075: ST_TO_ADDR
// end ; end ;
41076: GO 40934
41078: POP
41079: POP
// end ;
41080: LD_VAR 0 5
41084: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41085: LD_INT 0
41087: PPUSH
41088: PPUSH
// if not driver or not IsInUnit ( driver ) then
41089: LD_VAR 0 1
41093: NOT
41094: PUSH
41095: LD_VAR 0 1
41099: PPUSH
41100: CALL_OW 310
41104: NOT
41105: OR
41106: IFFALSE 41110
// exit ;
41108: GO 41200
// vehicle := IsInUnit ( driver ) ;
41110: LD_ADDR_VAR 0 3
41114: PUSH
41115: LD_VAR 0 1
41119: PPUSH
41120: CALL_OW 310
41124: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41125: LD_VAR 0 1
41129: PPUSH
41130: LD_STRING \
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: PUSH
41160: LD_STRING E
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: LD_VAR 0 3
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PPUSH
41196: CALL_OW 446
// end ;
41200: LD_VAR 0 2
41204: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41205: LD_INT 0
41207: PPUSH
41208: PPUSH
// if not driver or not IsInUnit ( driver ) then
41209: LD_VAR 0 1
41213: NOT
41214: PUSH
41215: LD_VAR 0 1
41219: PPUSH
41220: CALL_OW 310
41224: NOT
41225: OR
41226: IFFALSE 41230
// exit ;
41228: GO 41320
// vehicle := IsInUnit ( driver ) ;
41230: LD_ADDR_VAR 0 3
41234: PUSH
41235: LD_VAR 0 1
41239: PPUSH
41240: CALL_OW 310
41244: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41245: LD_VAR 0 1
41249: PPUSH
41250: LD_STRING \
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: PUSH
41280: LD_STRING E
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_VAR 0 3
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PPUSH
41316: CALL_OW 447
// end ;
41320: LD_VAR 0 2
41324: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41325: LD_INT 0
41327: PPUSH
41328: PPUSH
41329: PPUSH
// tmp := [ ] ;
41330: LD_ADDR_VAR 0 5
41334: PUSH
41335: EMPTY
41336: ST_TO_ADDR
// for i in units do
41337: LD_ADDR_VAR 0 4
41341: PUSH
41342: LD_VAR 0 1
41346: PUSH
41347: FOR_IN
41348: IFFALSE 41386
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41350: LD_ADDR_VAR 0 5
41354: PUSH
41355: LD_VAR 0 5
41359: PPUSH
41360: LD_VAR 0 5
41364: PUSH
41365: LD_INT 1
41367: PLUS
41368: PPUSH
41369: LD_VAR 0 4
41373: PPUSH
41374: CALL_OW 256
41378: PPUSH
41379: CALL_OW 2
41383: ST_TO_ADDR
41384: GO 41347
41386: POP
41387: POP
// if not tmp then
41388: LD_VAR 0 5
41392: NOT
41393: IFFALSE 41397
// exit ;
41395: GO 41445
// if asc then
41397: LD_VAR 0 2
41401: IFFALSE 41425
// result := SortListByListAsc ( units , tmp ) else
41403: LD_ADDR_VAR 0 3
41407: PUSH
41408: LD_VAR 0 1
41412: PPUSH
41413: LD_VAR 0 5
41417: PPUSH
41418: CALL_OW 76
41422: ST_TO_ADDR
41423: GO 41445
// result := SortListByListDesc ( units , tmp ) ;
41425: LD_ADDR_VAR 0 3
41429: PUSH
41430: LD_VAR 0 1
41434: PPUSH
41435: LD_VAR 0 5
41439: PPUSH
41440: CALL_OW 77
41444: ST_TO_ADDR
// end ;
41445: LD_VAR 0 3
41449: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41450: LD_INT 0
41452: PPUSH
41453: PPUSH
// task := GetTaskList ( mech ) ;
41454: LD_ADDR_VAR 0 4
41458: PUSH
41459: LD_VAR 0 1
41463: PPUSH
41464: CALL_OW 437
41468: ST_TO_ADDR
// if not task then
41469: LD_VAR 0 4
41473: NOT
41474: IFFALSE 41478
// exit ;
41476: GO 41520
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41478: LD_ADDR_VAR 0 3
41482: PUSH
41483: LD_VAR 0 4
41487: PUSH
41488: LD_INT 1
41490: ARRAY
41491: PUSH
41492: LD_INT 1
41494: ARRAY
41495: PUSH
41496: LD_STRING r
41498: EQUAL
41499: PUSH
41500: LD_VAR 0 4
41504: PUSH
41505: LD_INT 1
41507: ARRAY
41508: PUSH
41509: LD_INT 4
41511: ARRAY
41512: PUSH
41513: LD_VAR 0 2
41517: EQUAL
41518: AND
41519: ST_TO_ADDR
// end ;
41520: LD_VAR 0 3
41524: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41525: LD_INT 0
41527: PPUSH
// SetDir ( unit , d ) ;
41528: LD_VAR 0 1
41532: PPUSH
41533: LD_VAR 0 4
41537: PPUSH
41538: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41542: LD_VAR 0 1
41546: PPUSH
41547: LD_VAR 0 2
41551: PPUSH
41552: LD_VAR 0 3
41556: PPUSH
41557: LD_VAR 0 5
41561: PPUSH
41562: CALL_OW 48
// end ;
41566: LD_VAR 0 6
41570: RET
// export function ToNaturalNumber ( number ) ; begin
41571: LD_INT 0
41573: PPUSH
// result := number div 1 ;
41574: LD_ADDR_VAR 0 2
41578: PUSH
41579: LD_VAR 0 1
41583: PUSH
41584: LD_INT 1
41586: DIV
41587: ST_TO_ADDR
// if number < 0 then
41588: LD_VAR 0 1
41592: PUSH
41593: LD_INT 0
41595: LESS
41596: IFFALSE 41606
// result := 0 ;
41598: LD_ADDR_VAR 0 2
41602: PUSH
41603: LD_INT 0
41605: ST_TO_ADDR
// end ;
41606: LD_VAR 0 2
41610: RET
// export function SortByClass ( units , class ) ; var un ; begin
41611: LD_INT 0
41613: PPUSH
41614: PPUSH
// if not units or not class then
41615: LD_VAR 0 1
41619: NOT
41620: PUSH
41621: LD_VAR 0 2
41625: NOT
41626: OR
41627: IFFALSE 41631
// exit ;
41629: GO 41726
// result := [ ] ;
41631: LD_ADDR_VAR 0 3
41635: PUSH
41636: EMPTY
41637: ST_TO_ADDR
// for un in units do
41638: LD_ADDR_VAR 0 4
41642: PUSH
41643: LD_VAR 0 1
41647: PUSH
41648: FOR_IN
41649: IFFALSE 41724
// if GetClass ( un ) = class then
41651: LD_VAR 0 4
41655: PPUSH
41656: CALL_OW 257
41660: PUSH
41661: LD_VAR 0 2
41665: EQUAL
41666: IFFALSE 41693
// result := Insert ( result , 1 , un ) else
41668: LD_ADDR_VAR 0 3
41672: PUSH
41673: LD_VAR 0 3
41677: PPUSH
41678: LD_INT 1
41680: PPUSH
41681: LD_VAR 0 4
41685: PPUSH
41686: CALL_OW 2
41690: ST_TO_ADDR
41691: GO 41722
// result := Replace ( result , result + 1 , un ) ;
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_VAR 0 3
41702: PPUSH
41703: LD_VAR 0 3
41707: PUSH
41708: LD_INT 1
41710: PLUS
41711: PPUSH
41712: LD_VAR 0 4
41716: PPUSH
41717: CALL_OW 1
41721: ST_TO_ADDR
41722: GO 41648
41724: POP
41725: POP
// end ;
41726: LD_VAR 0 3
41730: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41731: LD_INT 0
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
41737: PPUSH
41738: PPUSH
41739: PPUSH
// result := [ ] ;
41740: LD_ADDR_VAR 0 4
41744: PUSH
41745: EMPTY
41746: ST_TO_ADDR
// if x - r < 0 then
41747: LD_VAR 0 1
41751: PUSH
41752: LD_VAR 0 3
41756: MINUS
41757: PUSH
41758: LD_INT 0
41760: LESS
41761: IFFALSE 41773
// min_x := 0 else
41763: LD_ADDR_VAR 0 8
41767: PUSH
41768: LD_INT 0
41770: ST_TO_ADDR
41771: GO 41789
// min_x := x - r ;
41773: LD_ADDR_VAR 0 8
41777: PUSH
41778: LD_VAR 0 1
41782: PUSH
41783: LD_VAR 0 3
41787: MINUS
41788: ST_TO_ADDR
// if y - r < 0 then
41789: LD_VAR 0 2
41793: PUSH
41794: LD_VAR 0 3
41798: MINUS
41799: PUSH
41800: LD_INT 0
41802: LESS
41803: IFFALSE 41815
// min_y := 0 else
41805: LD_ADDR_VAR 0 7
41809: PUSH
41810: LD_INT 0
41812: ST_TO_ADDR
41813: GO 41831
// min_y := y - r ;
41815: LD_ADDR_VAR 0 7
41819: PUSH
41820: LD_VAR 0 2
41824: PUSH
41825: LD_VAR 0 3
41829: MINUS
41830: ST_TO_ADDR
// max_x := x + r ;
41831: LD_ADDR_VAR 0 9
41835: PUSH
41836: LD_VAR 0 1
41840: PUSH
41841: LD_VAR 0 3
41845: PLUS
41846: ST_TO_ADDR
// max_y := y + r ;
41847: LD_ADDR_VAR 0 10
41851: PUSH
41852: LD_VAR 0 2
41856: PUSH
41857: LD_VAR 0 3
41861: PLUS
41862: ST_TO_ADDR
// for _x = min_x to max_x do
41863: LD_ADDR_VAR 0 5
41867: PUSH
41868: DOUBLE
41869: LD_VAR 0 8
41873: DEC
41874: ST_TO_ADDR
41875: LD_VAR 0 9
41879: PUSH
41880: FOR_TO
41881: IFFALSE 41982
// for _y = min_y to max_y do
41883: LD_ADDR_VAR 0 6
41887: PUSH
41888: DOUBLE
41889: LD_VAR 0 7
41893: DEC
41894: ST_TO_ADDR
41895: LD_VAR 0 10
41899: PUSH
41900: FOR_TO
41901: IFFALSE 41978
// begin if not ValidHex ( _x , _y ) then
41903: LD_VAR 0 5
41907: PPUSH
41908: LD_VAR 0 6
41912: PPUSH
41913: CALL_OW 488
41917: NOT
41918: IFFALSE 41922
// continue ;
41920: GO 41900
// if GetResourceTypeXY ( _x , _y ) then
41922: LD_VAR 0 5
41926: PPUSH
41927: LD_VAR 0 6
41931: PPUSH
41932: CALL_OW 283
41936: IFFALSE 41976
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41938: LD_ADDR_VAR 0 4
41942: PUSH
41943: LD_VAR 0 4
41947: PPUSH
41948: LD_VAR 0 4
41952: PUSH
41953: LD_INT 1
41955: PLUS
41956: PPUSH
41957: LD_VAR 0 5
41961: PUSH
41962: LD_VAR 0 6
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PPUSH
41971: CALL_OW 1
41975: ST_TO_ADDR
// end ;
41976: GO 41900
41978: POP
41979: POP
41980: GO 41880
41982: POP
41983: POP
// end ;
41984: LD_VAR 0 4
41988: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41989: LD_INT 0
41991: PPUSH
41992: PPUSH
41993: PPUSH
41994: PPUSH
41995: PPUSH
41996: PPUSH
41997: PPUSH
41998: PPUSH
// if not units then
41999: LD_VAR 0 1
42003: NOT
42004: IFFALSE 42008
// exit ;
42006: GO 42536
// result := UnitFilter ( units , [ f_ok ] ) ;
42008: LD_ADDR_VAR 0 3
42012: PUSH
42013: LD_VAR 0 1
42017: PPUSH
42018: LD_INT 50
42020: PUSH
42021: EMPTY
42022: LIST
42023: PPUSH
42024: CALL_OW 72
42028: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42029: LD_ADDR_VAR 0 8
42033: PUSH
42034: LD_VAR 0 1
42038: PUSH
42039: LD_INT 1
42041: ARRAY
42042: PPUSH
42043: CALL_OW 255
42047: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42048: LD_ADDR_VAR 0 10
42052: PUSH
42053: LD_INT 29
42055: PUSH
42056: LD_INT 91
42058: PUSH
42059: LD_INT 49
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: LIST
42066: ST_TO_ADDR
// if not result then
42067: LD_VAR 0 3
42071: NOT
42072: IFFALSE 42076
// exit ;
42074: GO 42536
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42076: LD_ADDR_VAR 0 5
42080: PUSH
42081: LD_INT 81
42083: PUSH
42084: LD_VAR 0 8
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PPUSH
42093: CALL_OW 69
42097: ST_TO_ADDR
// for i in result do
42098: LD_ADDR_VAR 0 4
42102: PUSH
42103: LD_VAR 0 3
42107: PUSH
42108: FOR_IN
42109: IFFALSE 42534
// begin tag := GetTag ( i ) + 1 ;
42111: LD_ADDR_VAR 0 9
42115: PUSH
42116: LD_VAR 0 4
42120: PPUSH
42121: CALL_OW 110
42125: PUSH
42126: LD_INT 1
42128: PLUS
42129: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42130: LD_ADDR_VAR 0 7
42134: PUSH
42135: LD_VAR 0 4
42139: PPUSH
42140: CALL_OW 250
42144: PPUSH
42145: LD_VAR 0 4
42149: PPUSH
42150: CALL_OW 251
42154: PPUSH
42155: LD_INT 4
42157: PPUSH
42158: CALL 41731 0 3
42162: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42163: LD_VAR 0 4
42167: PPUSH
42168: CALL_OW 247
42172: PUSH
42173: LD_INT 2
42175: EQUAL
42176: PUSH
42177: LD_VAR 0 7
42181: PUSH
42182: LD_INT 2
42184: GREATER
42185: AND
42186: PUSH
42187: LD_VAR 0 4
42191: PPUSH
42192: CALL_OW 264
42196: PUSH
42197: LD_VAR 0 10
42201: IN
42202: NOT
42203: AND
42204: IFFALSE 42243
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42206: LD_VAR 0 4
42210: PPUSH
42211: LD_VAR 0 7
42215: PUSH
42216: LD_INT 1
42218: ARRAY
42219: PUSH
42220: LD_INT 1
42222: ARRAY
42223: PPUSH
42224: LD_VAR 0 7
42228: PUSH
42229: LD_INT 1
42231: ARRAY
42232: PUSH
42233: LD_INT 2
42235: ARRAY
42236: PPUSH
42237: CALL_OW 116
42241: GO 42532
// if path > tag then
42243: LD_VAR 0 2
42247: PUSH
42248: LD_VAR 0 9
42252: GREATER
42253: IFFALSE 42461
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42255: LD_ADDR_VAR 0 6
42259: PUSH
42260: LD_VAR 0 5
42264: PPUSH
42265: LD_INT 91
42267: PUSH
42268: LD_VAR 0 4
42272: PUSH
42273: LD_INT 8
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: LIST
42280: PPUSH
42281: CALL_OW 72
42285: ST_TO_ADDR
// if nearEnemy then
42286: LD_VAR 0 6
42290: IFFALSE 42359
// begin if GetWeapon ( i ) = ru_time_lapser then
42292: LD_VAR 0 4
42296: PPUSH
42297: CALL_OW 264
42301: PUSH
42302: LD_INT 49
42304: EQUAL
42305: IFFALSE 42333
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42307: LD_VAR 0 4
42311: PPUSH
42312: LD_VAR 0 6
42316: PPUSH
42317: LD_VAR 0 4
42321: PPUSH
42322: CALL_OW 74
42326: PPUSH
42327: CALL_OW 112
42331: GO 42357
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42333: LD_VAR 0 4
42337: PPUSH
42338: LD_VAR 0 6
42342: PPUSH
42343: LD_VAR 0 4
42347: PPUSH
42348: CALL_OW 74
42352: PPUSH
42353: CALL 43607 0 2
// end else
42357: GO 42459
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42359: LD_VAR 0 4
42363: PPUSH
42364: LD_VAR 0 2
42368: PUSH
42369: LD_VAR 0 9
42373: ARRAY
42374: PUSH
42375: LD_INT 1
42377: ARRAY
42378: PPUSH
42379: LD_VAR 0 2
42383: PUSH
42384: LD_VAR 0 9
42388: ARRAY
42389: PUSH
42390: LD_INT 2
42392: ARRAY
42393: PPUSH
42394: CALL_OW 297
42398: PUSH
42399: LD_INT 6
42401: GREATER
42402: IFFALSE 42445
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42404: LD_VAR 0 4
42408: PPUSH
42409: LD_VAR 0 2
42413: PUSH
42414: LD_VAR 0 9
42418: ARRAY
42419: PUSH
42420: LD_INT 1
42422: ARRAY
42423: PPUSH
42424: LD_VAR 0 2
42428: PUSH
42429: LD_VAR 0 9
42433: ARRAY
42434: PUSH
42435: LD_INT 2
42437: ARRAY
42438: PPUSH
42439: CALL_OW 114
42443: GO 42459
// SetTag ( i , tag ) ;
42445: LD_VAR 0 4
42449: PPUSH
42450: LD_VAR 0 9
42454: PPUSH
42455: CALL_OW 109
// end else
42459: GO 42532
// if enemy then
42461: LD_VAR 0 5
42465: IFFALSE 42532
// begin if GetWeapon ( i ) = ru_time_lapser then
42467: LD_VAR 0 4
42471: PPUSH
42472: CALL_OW 264
42476: PUSH
42477: LD_INT 49
42479: EQUAL
42480: IFFALSE 42508
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42482: LD_VAR 0 4
42486: PPUSH
42487: LD_VAR 0 5
42491: PPUSH
42492: LD_VAR 0 4
42496: PPUSH
42497: CALL_OW 74
42501: PPUSH
42502: CALL_OW 112
42506: GO 42532
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42508: LD_VAR 0 4
42512: PPUSH
42513: LD_VAR 0 5
42517: PPUSH
42518: LD_VAR 0 4
42522: PPUSH
42523: CALL_OW 74
42527: PPUSH
42528: CALL 43607 0 2
// end ; end ;
42532: GO 42108
42534: POP
42535: POP
// end ;
42536: LD_VAR 0 3
42540: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42541: LD_INT 0
42543: PPUSH
42544: PPUSH
42545: PPUSH
// if not unit or IsInUnit ( unit ) then
42546: LD_VAR 0 1
42550: NOT
42551: PUSH
42552: LD_VAR 0 1
42556: PPUSH
42557: CALL_OW 310
42561: OR
42562: IFFALSE 42566
// exit ;
42564: GO 42657
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42566: LD_ADDR_VAR 0 4
42570: PUSH
42571: LD_VAR 0 1
42575: PPUSH
42576: CALL_OW 250
42580: PPUSH
42581: LD_VAR 0 2
42585: PPUSH
42586: LD_INT 1
42588: PPUSH
42589: CALL_OW 272
42593: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42594: LD_ADDR_VAR 0 5
42598: PUSH
42599: LD_VAR 0 1
42603: PPUSH
42604: CALL_OW 251
42608: PPUSH
42609: LD_VAR 0 2
42613: PPUSH
42614: LD_INT 1
42616: PPUSH
42617: CALL_OW 273
42621: ST_TO_ADDR
// if ValidHex ( x , y ) then
42622: LD_VAR 0 4
42626: PPUSH
42627: LD_VAR 0 5
42631: PPUSH
42632: CALL_OW 488
42636: IFFALSE 42657
// ComTurnXY ( unit , x , y ) ;
42638: LD_VAR 0 1
42642: PPUSH
42643: LD_VAR 0 4
42647: PPUSH
42648: LD_VAR 0 5
42652: PPUSH
42653: CALL_OW 118
// end ;
42657: LD_VAR 0 3
42661: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42662: LD_INT 0
42664: PPUSH
42665: PPUSH
// result := false ;
42666: LD_ADDR_VAR 0 3
42670: PUSH
42671: LD_INT 0
42673: ST_TO_ADDR
// if not units then
42674: LD_VAR 0 2
42678: NOT
42679: IFFALSE 42683
// exit ;
42681: GO 42728
// for i in units do
42683: LD_ADDR_VAR 0 4
42687: PUSH
42688: LD_VAR 0 2
42692: PUSH
42693: FOR_IN
42694: IFFALSE 42726
// if See ( side , i ) then
42696: LD_VAR 0 1
42700: PPUSH
42701: LD_VAR 0 4
42705: PPUSH
42706: CALL_OW 292
42710: IFFALSE 42724
// begin result := true ;
42712: LD_ADDR_VAR 0 3
42716: PUSH
42717: LD_INT 1
42719: ST_TO_ADDR
// exit ;
42720: POP
42721: POP
42722: GO 42728
// end ;
42724: GO 42693
42726: POP
42727: POP
// end ;
42728: LD_VAR 0 3
42732: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42733: LD_INT 0
42735: PPUSH
42736: PPUSH
42737: PPUSH
42738: PPUSH
// if not unit or not points then
42739: LD_VAR 0 1
42743: NOT
42744: PUSH
42745: LD_VAR 0 2
42749: NOT
42750: OR
42751: IFFALSE 42755
// exit ;
42753: GO 42845
// dist := 99999 ;
42755: LD_ADDR_VAR 0 5
42759: PUSH
42760: LD_INT 99999
42762: ST_TO_ADDR
// for i in points do
42763: LD_ADDR_VAR 0 4
42767: PUSH
42768: LD_VAR 0 2
42772: PUSH
42773: FOR_IN
42774: IFFALSE 42843
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42776: LD_ADDR_VAR 0 6
42780: PUSH
42781: LD_VAR 0 1
42785: PPUSH
42786: LD_VAR 0 4
42790: PUSH
42791: LD_INT 1
42793: ARRAY
42794: PPUSH
42795: LD_VAR 0 4
42799: PUSH
42800: LD_INT 2
42802: ARRAY
42803: PPUSH
42804: CALL_OW 297
42808: ST_TO_ADDR
// if tmpDist < dist then
42809: LD_VAR 0 6
42813: PUSH
42814: LD_VAR 0 5
42818: LESS
42819: IFFALSE 42841
// begin result := i ;
42821: LD_ADDR_VAR 0 3
42825: PUSH
42826: LD_VAR 0 4
42830: ST_TO_ADDR
// dist := tmpDist ;
42831: LD_ADDR_VAR 0 5
42835: PUSH
42836: LD_VAR 0 6
42840: ST_TO_ADDR
// end ; end ;
42841: GO 42773
42843: POP
42844: POP
// end ;
42845: LD_VAR 0 3
42849: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42850: LD_INT 0
42852: PPUSH
// uc_side := side ;
42853: LD_ADDR_OWVAR 20
42857: PUSH
42858: LD_VAR 0 1
42862: ST_TO_ADDR
// uc_nation := 3 ;
42863: LD_ADDR_OWVAR 21
42867: PUSH
42868: LD_INT 3
42870: ST_TO_ADDR
// vc_chassis := 25 ;
42871: LD_ADDR_OWVAR 37
42875: PUSH
42876: LD_INT 25
42878: ST_TO_ADDR
// vc_engine := engine_siberite ;
42879: LD_ADDR_OWVAR 39
42883: PUSH
42884: LD_INT 3
42886: ST_TO_ADDR
// vc_control := control_computer ;
42887: LD_ADDR_OWVAR 38
42891: PUSH
42892: LD_INT 3
42894: ST_TO_ADDR
// vc_weapon := 59 ;
42895: LD_ADDR_OWVAR 40
42899: PUSH
42900: LD_INT 59
42902: ST_TO_ADDR
// result := CreateVehicle ;
42903: LD_ADDR_VAR 0 5
42907: PUSH
42908: CALL_OW 45
42912: ST_TO_ADDR
// SetDir ( result , d ) ;
42913: LD_VAR 0 5
42917: PPUSH
42918: LD_VAR 0 4
42922: PPUSH
42923: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42927: LD_VAR 0 5
42931: PPUSH
42932: LD_VAR 0 2
42936: PPUSH
42937: LD_VAR 0 3
42941: PPUSH
42942: LD_INT 0
42944: PPUSH
42945: CALL_OW 48
// end ;
42949: LD_VAR 0 5
42953: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42954: LD_INT 0
42956: PPUSH
42957: PPUSH
42958: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42959: LD_ADDR_VAR 0 2
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42982: LD_VAR 0 1
42986: NOT
42987: PUSH
42988: LD_VAR 0 1
42992: PPUSH
42993: CALL_OW 264
42997: PUSH
42998: LD_INT 12
43000: PUSH
43001: LD_INT 51
43003: PUSH
43004: LD_INT 32
43006: PUSH
43007: LD_INT 89
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: IN
43016: NOT
43017: OR
43018: IFFALSE 43022
// exit ;
43020: GO 43120
// for i := 1 to 3 do
43022: LD_ADDR_VAR 0 3
43026: PUSH
43027: DOUBLE
43028: LD_INT 1
43030: DEC
43031: ST_TO_ADDR
43032: LD_INT 3
43034: PUSH
43035: FOR_TO
43036: IFFALSE 43118
// begin tmp := GetCargo ( cargo , i ) ;
43038: LD_ADDR_VAR 0 4
43042: PUSH
43043: LD_VAR 0 1
43047: PPUSH
43048: LD_VAR 0 3
43052: PPUSH
43053: CALL_OW 289
43057: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43058: LD_ADDR_VAR 0 2
43062: PUSH
43063: LD_VAR 0 2
43067: PPUSH
43068: LD_VAR 0 3
43072: PPUSH
43073: LD_VAR 0 4
43077: PPUSH
43078: CALL_OW 1
43082: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43083: LD_ADDR_VAR 0 2
43087: PUSH
43088: LD_VAR 0 2
43092: PPUSH
43093: LD_INT 4
43095: PPUSH
43096: LD_VAR 0 2
43100: PUSH
43101: LD_INT 4
43103: ARRAY
43104: PUSH
43105: LD_VAR 0 4
43109: PLUS
43110: PPUSH
43111: CALL_OW 1
43115: ST_TO_ADDR
// end ;
43116: GO 43035
43118: POP
43119: POP
// end ;
43120: LD_VAR 0 2
43124: RET
// export function Length ( array ) ; begin
43125: LD_INT 0
43127: PPUSH
// result := array + 0 ;
43128: LD_ADDR_VAR 0 2
43132: PUSH
43133: LD_VAR 0 1
43137: PUSH
43138: LD_INT 0
43140: PLUS
43141: ST_TO_ADDR
// end ;
43142: LD_VAR 0 2
43146: RET
// export function PrepareArray ( array ) ; begin
43147: LD_INT 0
43149: PPUSH
// result := array diff 0 ;
43150: LD_ADDR_VAR 0 2
43154: PUSH
43155: LD_VAR 0 1
43159: PUSH
43160: LD_INT 0
43162: DIFF
43163: ST_TO_ADDR
// if not result [ 1 ] then
43164: LD_VAR 0 2
43168: PUSH
43169: LD_INT 1
43171: ARRAY
43172: NOT
43173: IFFALSE 43193
// result := Delete ( result , 1 ) ;
43175: LD_ADDR_VAR 0 2
43179: PUSH
43180: LD_VAR 0 2
43184: PPUSH
43185: LD_INT 1
43187: PPUSH
43188: CALL_OW 3
43192: ST_TO_ADDR
// end ;
43193: LD_VAR 0 2
43197: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43198: LD_INT 0
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
// sibRocketRange := 25 ;
43204: LD_ADDR_VAR 0 6
43208: PUSH
43209: LD_INT 25
43211: ST_TO_ADDR
// result := false ;
43212: LD_ADDR_VAR 0 4
43216: PUSH
43217: LD_INT 0
43219: ST_TO_ADDR
// for i := 0 to 5 do
43220: LD_ADDR_VAR 0 5
43224: PUSH
43225: DOUBLE
43226: LD_INT 0
43228: DEC
43229: ST_TO_ADDR
43230: LD_INT 5
43232: PUSH
43233: FOR_TO
43234: IFFALSE 43301
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43236: LD_VAR 0 1
43240: PPUSH
43241: LD_VAR 0 5
43245: PPUSH
43246: LD_VAR 0 6
43250: PPUSH
43251: CALL_OW 272
43255: PPUSH
43256: LD_VAR 0 2
43260: PPUSH
43261: LD_VAR 0 5
43265: PPUSH
43266: LD_VAR 0 6
43270: PPUSH
43271: CALL_OW 273
43275: PPUSH
43276: LD_VAR 0 3
43280: PPUSH
43281: CALL_OW 309
43285: IFFALSE 43299
// begin result := true ;
43287: LD_ADDR_VAR 0 4
43291: PUSH
43292: LD_INT 1
43294: ST_TO_ADDR
// exit ;
43295: POP
43296: POP
43297: GO 43303
// end ;
43299: GO 43233
43301: POP
43302: POP
// end ;
43303: LD_VAR 0 4
43307: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43308: LD_INT 0
43310: PPUSH
43311: PPUSH
43312: PPUSH
// if btype = b_depot then
43313: LD_VAR 0 2
43317: PUSH
43318: LD_INT 0
43320: EQUAL
43321: IFFALSE 43333
// begin result := true ;
43323: LD_ADDR_VAR 0 3
43327: PUSH
43328: LD_INT 1
43330: ST_TO_ADDR
// exit ;
43331: GO 43449
// end ; pom := GetBase ( depot ) ;
43333: LD_ADDR_VAR 0 4
43337: PUSH
43338: LD_VAR 0 1
43342: PPUSH
43343: CALL_OW 274
43347: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43348: LD_ADDR_VAR 0 5
43352: PUSH
43353: LD_VAR 0 2
43357: PPUSH
43358: LD_VAR 0 1
43362: PPUSH
43363: CALL_OW 248
43367: PPUSH
43368: CALL_OW 450
43372: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43373: LD_ADDR_VAR 0 3
43377: PUSH
43378: LD_VAR 0 4
43382: PPUSH
43383: LD_INT 1
43385: PPUSH
43386: CALL_OW 275
43390: PUSH
43391: LD_VAR 0 5
43395: PUSH
43396: LD_INT 1
43398: ARRAY
43399: GREATEREQUAL
43400: PUSH
43401: LD_VAR 0 4
43405: PPUSH
43406: LD_INT 2
43408: PPUSH
43409: CALL_OW 275
43413: PUSH
43414: LD_VAR 0 5
43418: PUSH
43419: LD_INT 2
43421: ARRAY
43422: GREATEREQUAL
43423: AND
43424: PUSH
43425: LD_VAR 0 4
43429: PPUSH
43430: LD_INT 3
43432: PPUSH
43433: CALL_OW 275
43437: PUSH
43438: LD_VAR 0 5
43442: PUSH
43443: LD_INT 3
43445: ARRAY
43446: GREATEREQUAL
43447: AND
43448: ST_TO_ADDR
// end ;
43449: LD_VAR 0 3
43453: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43454: LD_INT 0
43456: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43457: LD_VAR 0 1
43461: PPUSH
43462: LD_VAR 0 2
43466: PPUSH
43467: LD_INT 0
43469: PPUSH
43470: LD_INT 0
43472: PPUSH
43473: LD_INT 1
43475: PPUSH
43476: LD_INT 0
43478: PPUSH
43479: CALL_OW 587
// end ;
43483: LD_VAR 0 3
43487: RET
// export function CenterOnNow ( unit ) ; begin
43488: LD_INT 0
43490: PPUSH
// result := IsInUnit ( unit ) ;
43491: LD_ADDR_VAR 0 2
43495: PUSH
43496: LD_VAR 0 1
43500: PPUSH
43501: CALL_OW 310
43505: ST_TO_ADDR
// if not result then
43506: LD_VAR 0 2
43510: NOT
43511: IFFALSE 43523
// result := unit ;
43513: LD_ADDR_VAR 0 2
43517: PUSH
43518: LD_VAR 0 1
43522: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43523: LD_VAR 0 1
43527: PPUSH
43528: CALL_OW 87
// end ;
43532: LD_VAR 0 2
43536: RET
// export function ComMoveHex ( unit , hex ) ; begin
43537: LD_INT 0
43539: PPUSH
// if not hex then
43540: LD_VAR 0 2
43544: NOT
43545: IFFALSE 43549
// exit ;
43547: GO 43602
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43549: LD_VAR 0 2
43553: PUSH
43554: LD_INT 1
43556: ARRAY
43557: PPUSH
43558: LD_VAR 0 2
43562: PUSH
43563: LD_INT 2
43565: ARRAY
43566: PPUSH
43567: CALL_OW 428
43571: IFFALSE 43575
// exit ;
43573: GO 43602
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43575: LD_VAR 0 1
43579: PPUSH
43580: LD_VAR 0 2
43584: PUSH
43585: LD_INT 1
43587: ARRAY
43588: PPUSH
43589: LD_VAR 0 2
43593: PUSH
43594: LD_INT 2
43596: ARRAY
43597: PPUSH
43598: CALL_OW 111
// end ;
43602: LD_VAR 0 3
43606: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43607: LD_INT 0
43609: PPUSH
43610: PPUSH
43611: PPUSH
// if not unit or not enemy then
43612: LD_VAR 0 1
43616: NOT
43617: PUSH
43618: LD_VAR 0 2
43622: NOT
43623: OR
43624: IFFALSE 43628
// exit ;
43626: GO 43752
// x := GetX ( enemy ) ;
43628: LD_ADDR_VAR 0 4
43632: PUSH
43633: LD_VAR 0 2
43637: PPUSH
43638: CALL_OW 250
43642: ST_TO_ADDR
// y := GetY ( enemy ) ;
43643: LD_ADDR_VAR 0 5
43647: PUSH
43648: LD_VAR 0 2
43652: PPUSH
43653: CALL_OW 251
43657: ST_TO_ADDR
// if ValidHex ( x , y ) then
43658: LD_VAR 0 4
43662: PPUSH
43663: LD_VAR 0 5
43667: PPUSH
43668: CALL_OW 488
43672: IFFALSE 43752
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43674: LD_VAR 0 2
43678: PPUSH
43679: CALL_OW 247
43683: PUSH
43684: LD_INT 3
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: IN
43694: PUSH
43695: LD_VAR 0 1
43699: PPUSH
43700: CALL_OW 255
43704: PPUSH
43705: LD_VAR 0 2
43709: PPUSH
43710: CALL_OW 292
43714: OR
43715: IFFALSE 43733
// ComAttackUnit ( unit , enemy ) else
43717: LD_VAR 0 1
43721: PPUSH
43722: LD_VAR 0 2
43726: PPUSH
43727: CALL_OW 115
43731: GO 43752
// ComAgressiveMove ( unit , x , y ) ;
43733: LD_VAR 0 1
43737: PPUSH
43738: LD_VAR 0 4
43742: PPUSH
43743: LD_VAR 0 5
43747: PPUSH
43748: CALL_OW 114
// end ;
43752: LD_VAR 0 3
43756: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43757: LD_INT 0
43759: PPUSH
43760: PPUSH
43761: PPUSH
// list := AreaToList ( area , 0 ) ;
43762: LD_ADDR_VAR 0 5
43766: PUSH
43767: LD_VAR 0 1
43771: PPUSH
43772: LD_INT 0
43774: PPUSH
43775: CALL_OW 517
43779: ST_TO_ADDR
// if not list then
43780: LD_VAR 0 5
43784: NOT
43785: IFFALSE 43789
// exit ;
43787: GO 43919
// if all then
43789: LD_VAR 0 2
43793: IFFALSE 43881
// begin for i := 1 to list [ 1 ] do
43795: LD_ADDR_VAR 0 4
43799: PUSH
43800: DOUBLE
43801: LD_INT 1
43803: DEC
43804: ST_TO_ADDR
43805: LD_VAR 0 5
43809: PUSH
43810: LD_INT 1
43812: ARRAY
43813: PUSH
43814: FOR_TO
43815: IFFALSE 43877
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43817: LD_ADDR_VAR 0 3
43821: PUSH
43822: LD_VAR 0 3
43826: PPUSH
43827: LD_VAR 0 3
43831: PUSH
43832: LD_INT 1
43834: PLUS
43835: PPUSH
43836: LD_VAR 0 5
43840: PUSH
43841: LD_INT 1
43843: ARRAY
43844: PUSH
43845: LD_VAR 0 4
43849: ARRAY
43850: PUSH
43851: LD_VAR 0 5
43855: PUSH
43856: LD_INT 2
43858: ARRAY
43859: PUSH
43860: LD_VAR 0 4
43864: ARRAY
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PPUSH
43870: CALL_OW 1
43874: ST_TO_ADDR
43875: GO 43814
43877: POP
43878: POP
// exit ;
43879: GO 43919
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43881: LD_ADDR_VAR 0 3
43885: PUSH
43886: LD_VAR 0 5
43890: PUSH
43891: LD_INT 1
43893: ARRAY
43894: PUSH
43895: LD_INT 1
43897: ARRAY
43898: PUSH
43899: LD_VAR 0 5
43903: PUSH
43904: LD_INT 2
43906: ARRAY
43907: PUSH
43908: LD_INT 1
43910: ARRAY
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: EMPTY
43917: LIST
43918: ST_TO_ADDR
// end ;
43919: LD_VAR 0 3
43923: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43924: LD_INT 0
43926: PPUSH
43927: PPUSH
// list := AreaToList ( area , 0 ) ;
43928: LD_ADDR_VAR 0 4
43932: PUSH
43933: LD_VAR 0 1
43937: PPUSH
43938: LD_INT 0
43940: PPUSH
43941: CALL_OW 517
43945: ST_TO_ADDR
// if not list then
43946: LD_VAR 0 4
43950: NOT
43951: IFFALSE 43955
// exit ;
43953: GO 43996
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43955: LD_ADDR_VAR 0 3
43959: PUSH
43960: LD_VAR 0 4
43964: PUSH
43965: LD_INT 1
43967: ARRAY
43968: PUSH
43969: LD_INT 1
43971: ARRAY
43972: PUSH
43973: LD_VAR 0 4
43977: PUSH
43978: LD_INT 2
43980: ARRAY
43981: PUSH
43982: LD_INT 1
43984: ARRAY
43985: PUSH
43986: LD_VAR 0 2
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: ST_TO_ADDR
// end ;
43996: LD_VAR 0 3
44000: RET
// export function First ( array ) ; begin
44001: LD_INT 0
44003: PPUSH
// if not array then
44004: LD_VAR 0 1
44008: NOT
44009: IFFALSE 44013
// exit ;
44011: GO 44027
// result := array [ 1 ] ;
44013: LD_ADDR_VAR 0 2
44017: PUSH
44018: LD_VAR 0 1
44022: PUSH
44023: LD_INT 1
44025: ARRAY
44026: ST_TO_ADDR
// end ;
44027: LD_VAR 0 2
44031: RET
// export function Last ( array ) ; begin
44032: LD_INT 0
44034: PPUSH
// if not array then
44035: LD_VAR 0 1
44039: NOT
44040: IFFALSE 44044
// exit ;
44042: GO 44060
// result := array [ array ] ;
44044: LD_ADDR_VAR 0 2
44048: PUSH
44049: LD_VAR 0 1
44053: PUSH
44054: LD_VAR 0 1
44058: ARRAY
44059: ST_TO_ADDR
// end ;
44060: LD_VAR 0 2
44064: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44065: LD_INT 0
44067: PPUSH
44068: PPUSH
// result := [ ] ;
44069: LD_ADDR_VAR 0 5
44073: PUSH
44074: EMPTY
44075: ST_TO_ADDR
// if not array then
44076: LD_VAR 0 1
44080: NOT
44081: IFFALSE 44085
// exit ;
44083: GO 44197
// for i := 1 to array do
44085: LD_ADDR_VAR 0 6
44089: PUSH
44090: DOUBLE
44091: LD_INT 1
44093: DEC
44094: ST_TO_ADDR
44095: LD_VAR 0 1
44099: PUSH
44100: FOR_TO
44101: IFFALSE 44195
// if array [ i ] [ index ] = value then
44103: LD_VAR 0 1
44107: PUSH
44108: LD_VAR 0 6
44112: ARRAY
44113: PUSH
44114: LD_VAR 0 2
44118: ARRAY
44119: PUSH
44120: LD_VAR 0 3
44124: EQUAL
44125: IFFALSE 44193
// begin if indexColumn then
44127: LD_VAR 0 4
44131: IFFALSE 44167
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44133: LD_ADDR_VAR 0 5
44137: PUSH
44138: LD_VAR 0 5
44142: PPUSH
44143: LD_VAR 0 1
44147: PUSH
44148: LD_VAR 0 6
44152: ARRAY
44153: PUSH
44154: LD_VAR 0 4
44158: ARRAY
44159: PPUSH
44160: CALL 39385 0 2
44164: ST_TO_ADDR
44165: GO 44193
// result := Join ( result , array [ i ] ) ;
44167: LD_ADDR_VAR 0 5
44171: PUSH
44172: LD_VAR 0 5
44176: PPUSH
44177: LD_VAR 0 1
44181: PUSH
44182: LD_VAR 0 6
44186: ARRAY
44187: PPUSH
44188: CALL 39385 0 2
44192: ST_TO_ADDR
// end ;
44193: GO 44100
44195: POP
44196: POP
// end ;
44197: LD_VAR 0 5
44201: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44202: LD_INT 0
44204: PPUSH
// if not vehicles or not parkingPoint then
44205: LD_VAR 0 1
44209: NOT
44210: PUSH
44211: LD_VAR 0 2
44215: NOT
44216: OR
44217: IFFALSE 44221
// exit ;
44219: GO 44319
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44221: LD_ADDR_VAR 0 1
44225: PUSH
44226: LD_VAR 0 1
44230: PPUSH
44231: LD_INT 50
44233: PUSH
44234: EMPTY
44235: LIST
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: LD_INT 92
44242: PUSH
44243: LD_VAR 0 2
44247: PUSH
44248: LD_INT 1
44250: ARRAY
44251: PUSH
44252: LD_VAR 0 2
44256: PUSH
44257: LD_INT 2
44259: ARRAY
44260: PUSH
44261: LD_INT 8
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PPUSH
44278: CALL_OW 72
44282: ST_TO_ADDR
// if not vehicles then
44283: LD_VAR 0 1
44287: NOT
44288: IFFALSE 44292
// exit ;
44290: GO 44319
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44292: LD_VAR 0 1
44296: PPUSH
44297: LD_VAR 0 2
44301: PUSH
44302: LD_INT 1
44304: ARRAY
44305: PPUSH
44306: LD_VAR 0 2
44310: PUSH
44311: LD_INT 2
44313: ARRAY
44314: PPUSH
44315: CALL_OW 111
// end ;
44319: LD_VAR 0 3
44323: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44324: LD_INT 0
44326: PPUSH
44327: PPUSH
44328: PPUSH
// if not side or not area then
44329: LD_VAR 0 1
44333: NOT
44334: PUSH
44335: LD_VAR 0 2
44339: NOT
44340: OR
44341: IFFALSE 44345
// exit ;
44343: GO 44464
// tmp := AreaToList ( area , 0 ) ;
44345: LD_ADDR_VAR 0 5
44349: PUSH
44350: LD_VAR 0 2
44354: PPUSH
44355: LD_INT 0
44357: PPUSH
44358: CALL_OW 517
44362: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44363: LD_ADDR_VAR 0 4
44367: PUSH
44368: DOUBLE
44369: LD_INT 1
44371: DEC
44372: ST_TO_ADDR
44373: LD_VAR 0 5
44377: PUSH
44378: LD_INT 1
44380: ARRAY
44381: PUSH
44382: FOR_TO
44383: IFFALSE 44462
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44385: LD_VAR 0 5
44389: PUSH
44390: LD_INT 1
44392: ARRAY
44393: PUSH
44394: LD_VAR 0 4
44398: ARRAY
44399: PPUSH
44400: LD_VAR 0 5
44404: PUSH
44405: LD_INT 2
44407: ARRAY
44408: PUSH
44409: LD_VAR 0 4
44413: ARRAY
44414: PPUSH
44415: CALL_OW 351
44419: IFFALSE 44460
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44421: LD_VAR 0 5
44425: PUSH
44426: LD_INT 1
44428: ARRAY
44429: PUSH
44430: LD_VAR 0 4
44434: ARRAY
44435: PPUSH
44436: LD_VAR 0 5
44440: PUSH
44441: LD_INT 2
44443: ARRAY
44444: PUSH
44445: LD_VAR 0 4
44449: ARRAY
44450: PPUSH
44451: LD_VAR 0 1
44455: PPUSH
44456: CALL_OW 244
// end ;
44460: GO 44382
44462: POP
44463: POP
// end ;
44464: LD_VAR 0 3
44468: RET
