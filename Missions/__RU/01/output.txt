// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareRussian ;
   8: CALL 118 0 0
// Action ;
  12: CALL 1440 0 0
// end ;
  16: END
// function Init ; begin
  17: LD_INT 0
  19: PPUSH
// game_speed := 5 ;
  20: LD_ADDR_OWVAR 65
  24: PUSH
  25: LD_INT 5
  27: ST_TO_ADDR
// music_class := 5 ;
  28: LD_ADDR_OWVAR 72
  32: PUSH
  33: LD_INT 5
  35: ST_TO_ADDR
// FogOff ( 3 ) ;
  36: LD_INT 3
  38: PPUSH
  39: CALL_OW 344
// SetWeather ( 2 , 250 , 300 ) ;
  43: LD_INT 2
  45: PPUSH
  46: LD_INT 250
  48: PPUSH
  49: LD_INT 300
  51: PPUSH
  52: CALL_OW 550
// PlaceSeeing ( 1 , 1 , 3 , - 32967 ) ;
  56: LD_INT 1
  58: PPUSH
  59: LD_INT 1
  61: PPUSH
  62: LD_INT 3
  64: PPUSH
  65: LD_INT 32967
  67: NEG
  68: PPUSH
  69: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 3 ) ;
  73: LD_INT 1
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: LD_INT 3
  81: PPUSH
  82: CALL_OW 331
// PlaceSeeing ( 172 , 50 , 3 , - 32 ) ;
  86: LD_INT 172
  88: PPUSH
  89: LD_INT 50
  91: PPUSH
  92: LD_INT 3
  94: PPUSH
  95: LD_INT 32
  97: NEG
  98: PPUSH
  99: CALL_OW 330
// CenterNowOnXY ( 109 , 159 ) ;
 103: LD_INT 109
 105: PPUSH
 106: LD_INT 159
 108: PPUSH
 109: CALL_OW 86
// end ; end_of_file
 113: LD_VAR 0 1
 117: RET
// export Botvinov , Szyski , Burlak ; export group1 , group2 , group3 ; export function PrepareRussian ; var i , un ; begin
 118: LD_INT 0
 120: PPUSH
 121: PPUSH
 122: PPUSH
// uc_side := 3 ;
 123: LD_ADDR_OWVAR 20
 127: PUSH
 128: LD_INT 3
 130: ST_TO_ADDR
// uc_nation := 3 ;
 131: LD_ADDR_OWVAR 21
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// InitHc ;
 139: CALL_OW 19
// PrepareSoldier ( sex_male , 1 ) ;
 143: LD_INT 1
 145: PPUSH
 146: LD_INT 1
 148: PPUSH
 149: CALL_OW 381
// hc_name := Botvinov ;
 153: LD_ADDR_OWVAR 26
 157: PUSH
 158: LD_STRING Botvinov
 160: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 161: LD_ADDR_OWVAR 33
 165: PUSH
 166: LD_STRING SecondCharsGal
 168: ST_TO_ADDR
// hc_face_number := 84 ;
 169: LD_ADDR_OWVAR 34
 173: PUSH
 174: LD_INT 84
 176: ST_TO_ADDR
// Botvinov := CreateHuman ;
 177: LD_ADDR_EXP 1
 181: PUSH
 182: CALL_OW 44
 186: ST_TO_ADDR
// PlaceUnitArea ( Botvinov , botvinovArea , false ) ;
 187: LD_EXP 1
 191: PPUSH
 192: LD_INT 2
 194: PPUSH
 195: LD_INT 0
 197: PPUSH
 198: CALL_OW 49
// ComLookAtDir ( Botvinov , 4 ) ;
 202: LD_EXP 1
 206: PPUSH
 207: LD_INT 4
 209: PPUSH
 210: CALL 43420 0 2
// hc_name := Szyski ;
 214: LD_ADDR_OWVAR 26
 218: PUSH
 219: LD_STRING Szyski
 221: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 222: LD_ADDR_OWVAR 33
 226: PUSH
 227: LD_STRING SecondCharsGal
 229: ST_TO_ADDR
// hc_face_number := 86 ;
 230: LD_ADDR_OWVAR 34
 234: PUSH
 235: LD_INT 86
 237: ST_TO_ADDR
// Szyski := CreateHuman ;
 238: LD_ADDR_EXP 2
 242: PUSH
 243: CALL_OW 44
 247: ST_TO_ADDR
// PlaceUnitArea ( Szyski , szyskiArea , false ) ;
 248: LD_EXP 2
 252: PPUSH
 253: LD_INT 3
 255: PPUSH
 256: LD_INT 0
 258: PPUSH
 259: CALL_OW 49
// ComLookAtDir ( Szyski , 4 ) ;
 263: LD_EXP 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL 43420 0 2
// InitHC_All ( ) ;
 275: CALL_OW 584
// for i := 1 to 3 do
 279: LD_ADDR_VAR 0 2
 283: PUSH
 284: DOUBLE
 285: LD_INT 1
 287: DEC
 288: ST_TO_ADDR
 289: LD_INT 3
 291: PUSH
 292: FOR_TO
 293: IFFALSE 344
// begin PrepareSoldier ( sex_male , 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: LD_INT 1
 300: PPUSH
 301: CALL_OW 381
// un := CreateHuman ;
 305: LD_ADDR_VAR 0 3
 309: PUSH
 310: CALL_OW 44
 314: ST_TO_ADDR
// PlaceUnitArea ( un , officerArea , false ) ;
 315: LD_VAR 0 3
 319: PPUSH
 320: LD_INT 4
 322: PPUSH
 323: LD_INT 0
 325: PPUSH
 326: CALL_OW 49
// ComLookAtDir ( un , 2 ) ;
 330: LD_VAR 0 3
 334: PPUSH
 335: LD_INT 2
 337: PPUSH
 338: CALL 43420 0 2
// end ;
 342: GO 292
 344: POP
 345: POP
// for i := 1 to 3 do
 346: LD_ADDR_VAR 0 2
 350: PUSH
 351: DOUBLE
 352: LD_INT 1
 354: DEC
 355: ST_TO_ADDR
 356: LD_INT 3
 358: PUSH
 359: FOR_TO
 360: IFFALSE 411
// begin PrepareSoldier ( sex_male , 1 ) ;
 362: LD_INT 1
 364: PPUSH
 365: LD_INT 1
 367: PPUSH
 368: CALL_OW 381
// un := CreateHuman ;
 372: LD_ADDR_VAR 0 3
 376: PUSH
 377: CALL_OW 44
 381: ST_TO_ADDR
// PlaceUnitArea ( un , officer2Area , false ) ;
 382: LD_VAR 0 3
 386: PPUSH
 387: LD_INT 5
 389: PPUSH
 390: LD_INT 0
 392: PPUSH
 393: CALL_OW 49
// ComLookAtDir ( un , 5 ) ;
 397: LD_VAR 0 3
 401: PPUSH
 402: LD_INT 5
 404: PPUSH
 405: CALL 43420 0 2
// end ;
 409: GO 359
 411: POP
 412: POP
// Burlak := NewCharacter ( Burlak ) ;
 413: LD_ADDR_EXP 3
 417: PUSH
 418: LD_STRING Burlak
 420: PPUSH
 421: CALL_OW 25
 425: ST_TO_ADDR
// InitHc_All ( ) ;
 426: CALL_OW 584
// group1 := PrepareGroup ;
 430: LD_ADDR_EXP 4
 434: PUSH
 435: CALL 779 0 0
 439: ST_TO_ADDR
// group1 := Replace ( group1 , 5 , Burlak ) ;
 440: LD_ADDR_EXP 4
 444: PUSH
 445: LD_EXP 4
 449: PPUSH
 450: LD_INT 5
 452: PPUSH
 453: LD_EXP 3
 457: PPUSH
 458: CALL_OW 1
 462: ST_TO_ADDR
// group2 := PrepareGroup ;
 463: LD_ADDR_EXP 5
 467: PUSH
 468: CALL 779 0 0
 472: ST_TO_ADDR
// group3 := PrepareGroup ;
 473: LD_ADDR_EXP 6
 477: PUSH
 478: CALL 779 0 0
 482: ST_TO_ADDR
// for un in group1 ^ group2 ^ group3 do
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_EXP 4
 492: PUSH
 493: LD_EXP 5
 497: ADD
 498: PUSH
 499: LD_EXP 6
 503: ADD
 504: PUSH
 505: FOR_IN
 506: IFFALSE 608
// begin case GetClass ( un ) of 1 :
 508: LD_VAR 0 3
 512: PPUSH
 513: CALL_OW 257
 517: PUSH
 518: LD_INT 1
 520: DOUBLE
 521: EQUAL
 522: IFTRUE 526
 524: GO 544
 526: POP
// PlaceUnitArea ( un , firstLineArea , false ) ; 3 :
 527: LD_VAR 0 3
 531: PPUSH
 532: LD_INT 6
 534: PPUSH
 535: LD_INT 0
 537: PPUSH
 538: CALL_OW 49
 542: GO 597
 544: LD_INT 3
 546: DOUBLE
 547: EQUAL
 548: IFTRUE 552
 550: GO 570
 552: POP
// PlaceUnitArea ( un , secondLineArea , false ) ; 4 :
 553: LD_VAR 0 3
 557: PPUSH
 558: LD_INT 7
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 49
 568: GO 597
 570: LD_INT 4
 572: DOUBLE
 573: EQUAL
 574: IFTRUE 578
 576: GO 596
 578: POP
// PlaceUnitArea ( un , thirdLineArea , false ) ; end ;
 579: LD_VAR 0 3
 583: PPUSH
 584: LD_INT 8
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
 594: GO 597
 596: POP
// ComHold ( un ) ;
 597: LD_VAR 0 3
 601: PPUSH
 602: CALL_OW 140
// end ;
 606: GO 505
 608: POP
 609: POP
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
 610: LD_ADDR_VAR 0 2
 614: PUSH
 615: LD_INT 21
 617: PUSH
 618: LD_INT 3
 620: PUSH
 621: EMPTY
 622: LIST
 623: LIST
 624: PPUSH
 625: CALL_OW 69
 629: PUSH
 630: LD_INT 4
 632: DIFF
 633: PUSH
 634: FOR_IN
 635: IFFALSE 696
// begin PrepareSoldier ( false , 1 ) ;
 637: LD_INT 0
 639: PPUSH
 640: LD_INT 1
 642: PPUSH
 643: CALL_OW 381
// un := CreateHuman ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: CALL_OW 44
 656: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 657: LD_VAR 0 3
 661: PPUSH
 662: LD_VAR 0 2
 666: PPUSH
 667: CALL_OW 254
 671: PUSH
 672: LD_INT 3
 674: MINUS
 675: PPUSH
 676: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 680: LD_VAR 0 3
 684: PPUSH
 685: LD_VAR 0 2
 689: PPUSH
 690: CALL_OW 52
// end ;
 694: GO 634
 696: POP
 697: POP
// for i := 1 to 3 do
 698: LD_ADDR_VAR 0 2
 702: PUSH
 703: DOUBLE
 704: LD_INT 1
 706: DEC
 707: ST_TO_ADDR
 708: LD_INT 3
 710: PUSH
 711: FOR_TO
 712: IFFALSE 772
// begin PrepareSoldier ( false , 1 ) ;
 714: LD_INT 0
 716: PPUSH
 717: LD_INT 1
 719: PPUSH
 720: CALL_OW 381
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 3
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceUnitXYR ( un , 120 , 13 , 6 , false ) ;
 734: LD_VAR 0 3
 738: PPUSH
 739: LD_INT 120
 741: PPUSH
 742: LD_INT 13
 744: PPUSH
 745: LD_INT 6
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 50
// ComMoveXY ( un , 91 , 166 ) ;
 755: LD_VAR 0 3
 759: PPUSH
 760: LD_INT 91
 762: PPUSH
 763: LD_INT 166
 765: PPUSH
 766: CALL_OW 111
// end ;
 770: GO 711
 772: POP
 773: POP
// end ;
 774: LD_VAR 0 1
 778: RET
// function PrepareGroup ; var i , j , tmp ; begin
 779: LD_INT 0
 781: PPUSH
 782: PPUSH
 783: PPUSH
 784: PPUSH
// result := [ ] ;
 785: LD_ADDR_VAR 0 1
 789: PUSH
 790: EMPTY
 791: ST_TO_ADDR
// tmp := [ 4 , 0 , 2 , 1 ] ;
 792: LD_ADDR_VAR 0 4
 796: PUSH
 797: LD_INT 4
 799: PUSH
 800: LD_INT 0
 802: PUSH
 803: LD_INT 2
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: ST_TO_ADDR
// for i := 1 to tmp do
 815: LD_ADDR_VAR 0 2
 819: PUSH
 820: DOUBLE
 821: LD_INT 1
 823: DEC
 824: ST_TO_ADDR
 825: LD_VAR 0 4
 829: PUSH
 830: FOR_TO
 831: IFFALSE 910
// if tmp [ i ] then
 833: LD_VAR 0 4
 837: PUSH
 838: LD_VAR 0 2
 842: ARRAY
 843: IFFALSE 908
// for j := 1 to tmp [ i ] do
 845: LD_ADDR_VAR 0 3
 849: PUSH
 850: DOUBLE
 851: LD_INT 1
 853: DEC
 854: ST_TO_ADDR
 855: LD_VAR 0 4
 859: PUSH
 860: LD_VAR 0 2
 864: ARRAY
 865: PUSH
 866: FOR_TO
 867: IFFALSE 906
// begin PrepareHuman ( false , i , 1 ) ;
 869: LD_INT 0
 871: PPUSH
 872: LD_VAR 0 2
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
 884: LD_ADDR_VAR 0 1
 888: PUSH
 889: LD_VAR 0 1
 893: PPUSH
 894: CALL_OW 44
 898: PPUSH
 899: CALL 40098 0 2
 903: ST_TO_ADDR
// end ;
 904: GO 866
 906: POP
 907: POP
 908: GO 830
 910: POP
 911: POP
// end ;
 912: LD_VAR 0 1
 916: RET
// export function FormGroup ( group , soldArea , mechArea , sciArea ) ; var i , class , hexesS , hexesM , hexesSc ; begin
 917: LD_INT 0
 919: PPUSH
 920: PPUSH
 921: PPUSH
 922: PPUSH
 923: PPUSH
 924: PPUSH
// if not group then
 925: LD_VAR 0 1
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1435
// hexesS := AreaToList ( soldArea , 0 ) ;
 934: LD_ADDR_VAR 0 8
 938: PUSH
 939: LD_VAR 0 2
 943: PPUSH
 944: LD_INT 0
 946: PPUSH
 947: CALL_OW 517
 951: ST_TO_ADDR
// hexesM := AreaToList ( mechArea , 0 ) ;
 952: LD_ADDR_VAR 0 9
 956: PUSH
 957: LD_VAR 0 3
 961: PPUSH
 962: LD_INT 0
 964: PPUSH
 965: CALL_OW 517
 969: ST_TO_ADDR
// hexesSc := AreaToList ( sciArea , 0 ) ;
 970: LD_ADDR_VAR 0 10
 974: PUSH
 975: LD_VAR 0 4
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 517
 987: ST_TO_ADDR
// for i := 1 to Count ( group ) do
 988: LD_ADDR_VAR 0 6
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_VAR 0 1
1002: PPUSH
1003: CALL 4122 0 1
1007: PUSH
1008: FOR_TO
1009: IFFALSE 1433
// begin class := GetClass ( group [ i ] ) ;
1011: LD_ADDR_VAR 0 7
1015: PUSH
1016: LD_VAR 0 1
1020: PUSH
1021: LD_VAR 0 6
1025: ARRAY
1026: PPUSH
1027: CALL_OW 257
1031: ST_TO_ADDR
// if class = 1 then
1032: LD_VAR 0 7
1036: PUSH
1037: LD_INT 1
1039: EQUAL
1040: IFFALSE 1165
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesS [ 1 ] [ 1 ] , hexesS [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1042: LD_INT 1
1044: PPUSH
1045: LD_VAR 0 1
1049: PUSH
1050: LD_VAR 0 6
1054: ARRAY
1055: PPUSH
1056: LD_VAR 0 8
1060: PUSH
1061: LD_INT 1
1063: ARRAY
1064: PUSH
1065: LD_INT 1
1067: ARRAY
1068: PPUSH
1069: LD_VAR 0 8
1073: PUSH
1074: LD_INT 2
1076: ARRAY
1077: PUSH
1078: LD_INT 1
1080: ARRAY
1081: PPUSH
1082: LD_INT 202
1084: PPUSH
1085: LD_INT 49
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 595
// hexesS := Replace ( hexesS , 1 , Delete ( hexesS [ 1 ] , 1 ) ) ;
1095: LD_ADDR_VAR 0 8
1099: PUSH
1100: LD_VAR 0 8
1104: PPUSH
1105: LD_INT 1
1107: PPUSH
1108: LD_VAR 0 8
1112: PUSH
1113: LD_INT 1
1115: ARRAY
1116: PPUSH
1117: LD_INT 1
1119: PPUSH
1120: CALL_OW 3
1124: PPUSH
1125: CALL_OW 1
1129: ST_TO_ADDR
// hexesS := Replace ( hexesS , 2 , Delete ( hexesS [ 2 ] , 1 ) ) ;
1130: LD_ADDR_VAR 0 8
1134: PUSH
1135: LD_VAR 0 8
1139: PPUSH
1140: LD_INT 2
1142: PPUSH
1143: LD_VAR 0 8
1147: PUSH
1148: LD_INT 2
1150: ARRAY
1151: PPUSH
1152: LD_INT 1
1154: PPUSH
1155: CALL_OW 3
1159: PPUSH
1160: CALL_OW 1
1164: ST_TO_ADDR
// end ; if class = 3 then
1165: LD_VAR 0 7
1169: PUSH
1170: LD_INT 3
1172: EQUAL
1173: IFFALSE 1298
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesM [ 1 ] [ 1 ] , hexesM [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1175: LD_INT 1
1177: PPUSH
1178: LD_VAR 0 1
1182: PUSH
1183: LD_VAR 0 6
1187: ARRAY
1188: PPUSH
1189: LD_VAR 0 9
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PUSH
1198: LD_INT 1
1200: ARRAY
1201: PPUSH
1202: LD_VAR 0 9
1206: PUSH
1207: LD_INT 2
1209: ARRAY
1210: PUSH
1211: LD_INT 1
1213: ARRAY
1214: PPUSH
1215: LD_INT 202
1217: PPUSH
1218: LD_INT 49
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 595
// hexesM := Replace ( hexesM , 1 , Delete ( hexesM [ 1 ] , 1 ) ) ;
1228: LD_ADDR_VAR 0 9
1232: PUSH
1233: LD_VAR 0 9
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_VAR 0 9
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: LD_INT 1
1252: PPUSH
1253: CALL_OW 3
1257: PPUSH
1258: CALL_OW 1
1262: ST_TO_ADDR
// hexesM := Replace ( hexesM , 2 , Delete ( hexesM [ 2 ] , 1 ) ) ;
1263: LD_ADDR_VAR 0 9
1267: PUSH
1268: LD_VAR 0 9
1272: PPUSH
1273: LD_INT 2
1275: PPUSH
1276: LD_VAR 0 9
1280: PUSH
1281: LD_INT 2
1283: ARRAY
1284: PPUSH
1285: LD_INT 1
1287: PPUSH
1288: CALL_OW 3
1292: PPUSH
1293: CALL_OW 1
1297: ST_TO_ADDR
// end ; if class = 4 then
1298: LD_VAR 0 7
1302: PUSH
1303: LD_INT 4
1305: EQUAL
1306: IFFALSE 1431
// begin RaiseSailEventCustom ( 1 , group [ i ] , hexesSc [ 1 ] [ 1 ] , hexesSc [ 2 ] [ 1 ] , 202 , 49 , 0 ) ;
1308: LD_INT 1
1310: PPUSH
1311: LD_VAR 0 1
1315: PUSH
1316: LD_VAR 0 6
1320: ARRAY
1321: PPUSH
1322: LD_VAR 0 10
1326: PUSH
1327: LD_INT 1
1329: ARRAY
1330: PUSH
1331: LD_INT 1
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 10
1339: PUSH
1340: LD_INT 2
1342: ARRAY
1343: PUSH
1344: LD_INT 1
1346: ARRAY
1347: PPUSH
1348: LD_INT 202
1350: PPUSH
1351: LD_INT 49
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 595
// hexesSc := Replace ( hexesSc , 1 , Delete ( hexesSc [ 1 ] , 1 ) ) ;
1361: LD_ADDR_VAR 0 10
1365: PUSH
1366: LD_VAR 0 10
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: LD_VAR 0 10
1378: PUSH
1379: LD_INT 1
1381: ARRAY
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 3
1390: PPUSH
1391: CALL_OW 1
1395: ST_TO_ADDR
// hexesSc := Replace ( hexesSc , 2 , Delete ( hexesSc [ 2 ] , 1 ) ) ;
1396: LD_ADDR_VAR 0 10
1400: PUSH
1401: LD_VAR 0 10
1405: PPUSH
1406: LD_INT 2
1408: PPUSH
1409: LD_VAR 0 10
1413: PUSH
1414: LD_INT 2
1416: ARRAY
1417: PPUSH
1418: LD_INT 1
1420: PPUSH
1421: CALL_OW 3
1425: PPUSH
1426: CALL_OW 1
1430: ST_TO_ADDR
// end ; end ;
1431: GO 1008
1433: POP
1434: POP
// end ; end_of_file
1435: LD_VAR 0 5
1439: RET
// export function Action ; var i ; begin
1440: LD_INT 0
1442: PPUSH
1443: PPUSH
// Video ( true ) ;
1444: LD_INT 1
1446: PPUSH
1447: CALL 40070 0 1
// wait ( 0 0$2 ) ;
1451: LD_INT 70
1453: PPUSH
1454: CALL_OW 67
// CenterOnXY ( 106 , 151 ) ;
1458: LD_INT 106
1460: PPUSH
1461: LD_INT 151
1463: PPUSH
1464: CALL_OW 84
// wait ( 0 0$2 ) ;
1468: LD_INT 70
1470: PPUSH
1471: CALL_OW 67
// CenterOnXY ( 32 , 23 ) ;
1475: LD_INT 32
1477: PPUSH
1478: LD_INT 23
1480: PPUSH
1481: CALL_OW 84
// wait ( 0 0$2 ) ;
1485: LD_INT 70
1487: PPUSH
1488: CALL_OW 67
// CenterOnXY ( 128 , 16 ) ;
1492: LD_INT 128
1494: PPUSH
1495: LD_INT 16
1497: PPUSH
1498: CALL_OW 84
// wait ( 60 ) ;
1502: LD_INT 60
1504: PPUSH
1505: CALL_OW 67
// CenterOnXY ( 172 , 47 ) ;
1509: LD_INT 172
1511: PPUSH
1512: LD_INT 47
1514: PPUSH
1515: CALL_OW 84
// stop_talking := true ;
1519: LD_ADDR_OWVAR 56
1523: PUSH
1524: LD_INT 1
1526: ST_TO_ADDR
// Say ( Botvinov , D1i-Off1-1 ) ;
1527: LD_EXP 1
1531: PPUSH
1532: LD_STRING D1i-Off1-1
1534: PPUSH
1535: CALL_OW 88
// for i in group1 ^ group2 ^ group3 do
1539: LD_ADDR_VAR 0 2
1543: PUSH
1544: LD_EXP 4
1548: PUSH
1549: LD_EXP 5
1553: ADD
1554: PUSH
1555: LD_EXP 6
1559: ADD
1560: PUSH
1561: FOR_IN
1562: IFFALSE 1581
// ComTurnXY ( i , 202 , 49 ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: LD_INT 202
1571: PPUSH
1572: LD_INT 49
1574: PPUSH
1575: CALL_OW 118
1579: GO 1561
1581: POP
1582: POP
// wait ( 10 ) ;
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 67
// Say ( Szyski , D1i-Off2-1 ) ;
1590: LD_EXP 2
1594: PPUSH
1595: LD_STRING D1i-Off2-1
1597: PPUSH
1598: CALL_OW 88
// Say ( Botvinov , D1i-Off1-2 ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_STRING D1i-Off1-2
1609: PPUSH
1610: CALL_OW 88
// FormGroup ( group1 , gs1 , gm1 , gsc1 ) ;
1614: LD_EXP 4
1618: PPUSH
1619: LD_INT 9
1621: PPUSH
1622: LD_INT 12
1624: PPUSH
1625: LD_INT 15
1627: PPUSH
1628: CALL 917 0 4
// FormGroup ( group2 , gs2 , gm2 , gsc2 ) ;
1632: LD_EXP 5
1636: PPUSH
1637: LD_INT 10
1639: PPUSH
1640: LD_INT 13
1642: PPUSH
1643: LD_INT 16
1645: PPUSH
1646: CALL 917 0 4
// FormGroup ( group3 , gs3 , gm3 , gsc3 ) ;
1650: LD_EXP 6
1654: PPUSH
1655: LD_INT 11
1657: PPUSH
1658: LD_INT 14
1660: PPUSH
1661: LD_INT 17
1663: PPUSH
1664: CALL 917 0 4
// wait ( 0 0$5 ) ;
1668: LD_INT 175
1670: PPUSH
1671: CALL_OW 67
// Say ( Szyski , D1i-Off2-2 ) ;
1675: LD_EXP 2
1679: PPUSH
1680: LD_STRING D1i-Off2-2
1682: PPUSH
1683: CALL_OW 88
// Say ( Botvinov , D1i-Off1-3 ) ;
1687: LD_EXP 1
1691: PPUSH
1692: LD_STRING D1i-Off1-3
1694: PPUSH
1695: CALL_OW 88
// SayEffect ( DStart-All ) ;
1699: LD_STRING DStart-All
1701: PPUSH
1702: CALL_OW 96
// wait ( 50 ) ;
1706: LD_INT 50
1708: PPUSH
1709: CALL_OW 67
// stop_talking := false ;
1713: LD_ADDR_OWVAR 56
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// for i in SortByDistanceUnit ( eon , group1 , true , true ) do
1721: LD_ADDR_VAR 0 2
1725: PUSH
1726: LD_INT 4
1728: PPUSH
1729: LD_EXP 4
1733: PPUSH
1734: LD_INT 1
1736: PPUSH
1737: LD_INT 1
1739: PPUSH
1740: CALL 7475 0 4
1744: PUSH
1745: FOR_IN
1746: IFFALSE 1769
// begin ComEnterUnit ( i , eon ) ;
1748: LD_VAR 0 2
1752: PPUSH
1753: LD_INT 4
1755: PPUSH
1756: CALL_OW 120
// wait ( 55 ) ;
1760: LD_INT 55
1762: PPUSH
1763: CALL_OW 67
// end ;
1767: GO 1745
1769: POP
1770: POP
// end ; end_of_file
1771: LD_VAR 0 1
1775: RET
// on SailEventCustom ( e , p1 , p2 , p3 , p4 , p5 , p6 ) do begin repeat ComMoveXY ( p1 , p2 , p3 ) ;
1776: LD_VAR 0 2
1780: PPUSH
1781: LD_VAR 0 3
1785: PPUSH
1786: LD_VAR 0 4
1790: PPUSH
1791: CALL_OW 111
// wait ( 3 ) ;
1795: LD_INT 3
1797: PPUSH
1798: CALL_OW 67
// until IsAt ( p1 , p2 , p3 ) ;
1802: LD_VAR 0 2
1806: PPUSH
1807: LD_VAR 0 3
1811: PPUSH
1812: LD_VAR 0 4
1816: PPUSH
1817: CALL_OW 307
1821: IFFALSE 1776
// ComTurnXY ( p1 , p4 , p5 ) ;
1823: LD_VAR 0 2
1827: PPUSH
1828: LD_VAR 0 5
1832: PPUSH
1833: LD_VAR 0 6
1837: PPUSH
1838: CALL_OW 118
// end ;
1842: PPOPN 7
1844: END
// on EnterBuilding ( building , unit ) do begin if unit = Burlak then
1845: LD_VAR 0 2
1849: PUSH
1850: LD_EXP 3
1854: EQUAL
1855: IFFALSE 1874
// begin wait ( 20 ) ;
1857: LD_INT 20
1859: PPUSH
1860: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1864: LD_INT 1
1866: PPUSH
1867: LD_STRING %_cont
1869: PPUSH
1870: CALL_OW 340
// end ; end ;
1874: PPOPN 2
1876: END
// on DialogueSkipped ( value ) do begin stop_talking := false ;
1877: LD_ADDR_OWVAR 56
1881: PUSH
1882: LD_INT 0
1884: ST_TO_ADDR
// ChangeMap ( 1 , %_cont ) ;
1885: LD_INT 1
1887: PPUSH
1888: LD_STRING %_cont
1890: PPUSH
1891: CALL_OW 340
// end ; end_of_file
1895: PPOPN 1
1897: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1898: LD_INT 0
1900: PPUSH
1901: PPUSH
// if exist_mode then
1902: LD_VAR 0 2
1906: IFFALSE 1952
// begin unit := CreateCharacter ( prefix & ident ) ;
1908: LD_ADDR_VAR 0 5
1912: PUSH
1913: LD_VAR 0 3
1917: PUSH
1918: LD_VAR 0 1
1922: STR
1923: PPUSH
1924: CALL_OW 34
1928: ST_TO_ADDR
// if unit then
1929: LD_VAR 0 5
1933: IFFALSE 1950
// DeleteCharacters ( prefix & ident ) ;
1935: LD_VAR 0 3
1939: PUSH
1940: LD_VAR 0 1
1944: STR
1945: PPUSH
1946: CALL_OW 40
// end else
1950: GO 1967
// unit := NewCharacter ( ident ) ;
1952: LD_ADDR_VAR 0 5
1956: PUSH
1957: LD_VAR 0 1
1961: PPUSH
1962: CALL_OW 25
1966: ST_TO_ADDR
// result := unit ;
1967: LD_ADDR_VAR 0 4
1971: PUSH
1972: LD_VAR 0 5
1976: ST_TO_ADDR
// end ;
1977: LD_VAR 0 4
1981: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
1982: LD_INT 0
1984: PPUSH
1985: PPUSH
// if exist_mode then
1986: LD_VAR 0 2
1990: IFFALSE 2015
// unit := CreateCharacter ( prefix & ident ) else
1992: LD_ADDR_VAR 0 5
1996: PUSH
1997: LD_VAR 0 3
2001: PUSH
2002: LD_VAR 0 1
2006: STR
2007: PPUSH
2008: CALL_OW 34
2012: ST_TO_ADDR
2013: GO 2030
// unit := NewCharacter ( ident ) ;
2015: LD_ADDR_VAR 0 5
2019: PUSH
2020: LD_VAR 0 1
2024: PPUSH
2025: CALL_OW 25
2029: ST_TO_ADDR
// result := unit ;
2030: LD_ADDR_VAR 0 4
2034: PUSH
2035: LD_VAR 0 5
2039: ST_TO_ADDR
// end ;
2040: LD_VAR 0 4
2044: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2045: LD_INT 0
2047: PPUSH
2048: PPUSH
// if not side or not nation then
2049: LD_VAR 0 1
2053: NOT
2054: IFTRUE 2063
2056: PUSH
2057: LD_VAR 0 2
2061: NOT
2062: OR
2063: IFFALSE 2067
// exit ;
2065: GO 2861
// case nation of nation_american :
2067: LD_VAR 0 2
2071: PUSH
2072: LD_INT 1
2074: DOUBLE
2075: EQUAL
2076: IFTRUE 2080
2078: GO 2302
2080: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
2081: LD_ADDR_VAR 0 4
2085: PUSH
2086: LD_INT 35
2088: PUSH
2089: LD_INT 45
2091: PUSH
2092: LD_INT 46
2094: PUSH
2095: LD_INT 47
2097: PUSH
2098: LD_INT 82
2100: PUSH
2101: LD_INT 83
2103: PUSH
2104: LD_INT 84
2106: PUSH
2107: LD_INT 85
2109: PUSH
2110: LD_INT 86
2112: PUSH
2113: LD_INT 1
2115: PUSH
2116: LD_INT 2
2118: PUSH
2119: LD_INT 6
2121: PUSH
2122: LD_INT 15
2124: PUSH
2125: LD_INT 16
2127: PUSH
2128: LD_INT 7
2130: PUSH
2131: LD_INT 12
2133: PUSH
2134: LD_INT 13
2136: PUSH
2137: LD_INT 10
2139: PUSH
2140: LD_INT 14
2142: PUSH
2143: LD_INT 20
2145: PUSH
2146: LD_INT 21
2148: PUSH
2149: LD_INT 22
2151: PUSH
2152: LD_INT 25
2154: PUSH
2155: LD_INT 32
2157: PUSH
2158: LD_INT 27
2160: PUSH
2161: LD_INT 36
2163: PUSH
2164: LD_INT 69
2166: PUSH
2167: LD_INT 39
2169: PUSH
2170: LD_INT 34
2172: PUSH
2173: LD_INT 40
2175: PUSH
2176: LD_INT 48
2178: PUSH
2179: LD_INT 49
2181: PUSH
2182: LD_INT 50
2184: PUSH
2185: LD_INT 51
2187: PUSH
2188: LD_INT 52
2190: PUSH
2191: LD_INT 53
2193: PUSH
2194: LD_INT 54
2196: PUSH
2197: LD_INT 55
2199: PUSH
2200: LD_INT 56
2202: PUSH
2203: LD_INT 57
2205: PUSH
2206: LD_INT 58
2208: PUSH
2209: LD_INT 59
2211: PUSH
2212: LD_INT 60
2214: PUSH
2215: LD_INT 61
2217: PUSH
2218: LD_INT 62
2220: PUSH
2221: LD_INT 80
2223: PUSH
2224: LD_INT 82
2226: PUSH
2227: LD_INT 83
2229: PUSH
2230: LD_INT 84
2232: PUSH
2233: LD_INT 85
2235: PUSH
2236: LD_INT 86
2238: PUSH
2239: LD_INT 90
2241: PUSH
2242: LD_INT 93
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: ST_TO_ADDR
2300: GO 2783
2302: LD_INT 2
2304: DOUBLE
2305: EQUAL
2306: IFTRUE 2310
2308: GO 2544
2310: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
2311: LD_ADDR_VAR 0 4
2315: PUSH
2316: LD_INT 35
2318: PUSH
2319: LD_INT 45
2321: PUSH
2322: LD_INT 46
2324: PUSH
2325: LD_INT 47
2327: PUSH
2328: LD_INT 82
2330: PUSH
2331: LD_INT 83
2333: PUSH
2334: LD_INT 84
2336: PUSH
2337: LD_INT 85
2339: PUSH
2340: LD_INT 87
2342: PUSH
2343: LD_INT 70
2345: PUSH
2346: LD_INT 1
2348: PUSH
2349: LD_INT 11
2351: PUSH
2352: LD_INT 3
2354: PUSH
2355: LD_INT 4
2357: PUSH
2358: LD_INT 5
2360: PUSH
2361: LD_INT 6
2363: PUSH
2364: LD_INT 15
2366: PUSH
2367: LD_INT 18
2369: PUSH
2370: LD_INT 7
2372: PUSH
2373: LD_INT 17
2375: PUSH
2376: LD_INT 8
2378: PUSH
2379: LD_INT 20
2381: PUSH
2382: LD_INT 21
2384: PUSH
2385: LD_INT 22
2387: PUSH
2388: LD_INT 72
2390: PUSH
2391: LD_INT 26
2393: PUSH
2394: LD_INT 69
2396: PUSH
2397: LD_INT 39
2399: PUSH
2400: LD_INT 40
2402: PUSH
2403: LD_INT 41
2405: PUSH
2406: LD_INT 42
2408: PUSH
2409: LD_INT 43
2411: PUSH
2412: LD_INT 48
2414: PUSH
2415: LD_INT 49
2417: PUSH
2418: LD_INT 50
2420: PUSH
2421: LD_INT 51
2423: PUSH
2424: LD_INT 52
2426: PUSH
2427: LD_INT 53
2429: PUSH
2430: LD_INT 54
2432: PUSH
2433: LD_INT 55
2435: PUSH
2436: LD_INT 56
2438: PUSH
2439: LD_INT 60
2441: PUSH
2442: LD_INT 61
2444: PUSH
2445: LD_INT 62
2447: PUSH
2448: LD_INT 66
2450: PUSH
2451: LD_INT 67
2453: PUSH
2454: LD_INT 68
2456: PUSH
2457: LD_INT 81
2459: PUSH
2460: LD_INT 82
2462: PUSH
2463: LD_INT 83
2465: PUSH
2466: LD_INT 84
2468: PUSH
2469: LD_INT 85
2471: PUSH
2472: LD_INT 87
2474: PUSH
2475: LD_INT 88
2477: PUSH
2478: LD_INT 92
2480: PUSH
2481: LD_INT 94
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: ST_TO_ADDR
2542: GO 2783
2544: LD_INT 3
2546: DOUBLE
2547: EQUAL
2548: IFTRUE 2552
2550: GO 2782
2552: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
2553: LD_ADDR_VAR 0 4
2557: PUSH
2558: LD_INT 46
2560: PUSH
2561: LD_INT 47
2563: PUSH
2564: LD_INT 1
2566: PUSH
2567: LD_INT 2
2569: PUSH
2570: LD_INT 82
2572: PUSH
2573: LD_INT 83
2575: PUSH
2576: LD_INT 84
2578: PUSH
2579: LD_INT 85
2581: PUSH
2582: LD_INT 86
2584: PUSH
2585: LD_INT 11
2587: PUSH
2588: LD_INT 9
2590: PUSH
2591: LD_INT 20
2593: PUSH
2594: LD_INT 19
2596: PUSH
2597: LD_INT 21
2599: PUSH
2600: LD_INT 24
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 25
2608: PUSH
2609: LD_INT 28
2611: PUSH
2612: LD_INT 29
2614: PUSH
2615: LD_INT 30
2617: PUSH
2618: LD_INT 31
2620: PUSH
2621: LD_INT 37
2623: PUSH
2624: LD_INT 38
2626: PUSH
2627: LD_INT 32
2629: PUSH
2630: LD_INT 27
2632: PUSH
2633: LD_INT 33
2635: PUSH
2636: LD_INT 69
2638: PUSH
2639: LD_INT 39
2641: PUSH
2642: LD_INT 34
2644: PUSH
2645: LD_INT 40
2647: PUSH
2648: LD_INT 71
2650: PUSH
2651: LD_INT 23
2653: PUSH
2654: LD_INT 44
2656: PUSH
2657: LD_INT 48
2659: PUSH
2660: LD_INT 49
2662: PUSH
2663: LD_INT 50
2665: PUSH
2666: LD_INT 51
2668: PUSH
2669: LD_INT 52
2671: PUSH
2672: LD_INT 53
2674: PUSH
2675: LD_INT 54
2677: PUSH
2678: LD_INT 55
2680: PUSH
2681: LD_INT 56
2683: PUSH
2684: LD_INT 57
2686: PUSH
2687: LD_INT 58
2689: PUSH
2690: LD_INT 59
2692: PUSH
2693: LD_INT 63
2695: PUSH
2696: LD_INT 64
2698: PUSH
2699: LD_INT 65
2701: PUSH
2702: LD_INT 82
2704: PUSH
2705: LD_INT 83
2707: PUSH
2708: LD_INT 84
2710: PUSH
2711: LD_INT 85
2713: PUSH
2714: LD_INT 86
2716: PUSH
2717: LD_INT 89
2719: PUSH
2720: LD_INT 91
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: ST_TO_ADDR
2780: GO 2783
2782: POP
// if state > - 1 and state < 3 then
2783: LD_VAR 0 3
2787: PUSH
2788: LD_INT 1
2790: NEG
2791: GREATER
2792: IFFALSE 2804
2794: PUSH
2795: LD_VAR 0 3
2799: PUSH
2800: LD_INT 3
2802: LESS
2803: AND
2804: IFFALSE 2861
// for i in result do
2806: LD_ADDR_VAR 0 5
2810: PUSH
2811: LD_VAR 0 4
2815: PUSH
2816: FOR_IN
2817: IFFALSE 2859
// if GetTech ( i , side ) <> state then
2819: LD_VAR 0 5
2823: PPUSH
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL_OW 321
2833: PUSH
2834: LD_VAR 0 3
2838: NONEQUAL
2839: IFFALSE 2857
// result := result diff i ;
2841: LD_ADDR_VAR 0 4
2845: PUSH
2846: LD_VAR 0 4
2850: PUSH
2851: LD_VAR 0 5
2855: DIFF
2856: ST_TO_ADDR
2857: GO 2816
2859: POP
2860: POP
// end ;
2861: LD_VAR 0 4
2865: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2866: LD_INT 0
2868: PPUSH
2869: PPUSH
2870: PPUSH
// result := true ;
2871: LD_ADDR_VAR 0 3
2875: PUSH
2876: LD_INT 1
2878: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2879: LD_ADDR_VAR 0 5
2883: PUSH
2884: LD_VAR 0 2
2888: PPUSH
2889: CALL_OW 480
2893: ST_TO_ADDR
// if not tmp then
2894: LD_VAR 0 5
2898: NOT
2899: IFFALSE 2903
// exit ;
2901: GO 2952
// for i in tmp do
2903: LD_ADDR_VAR 0 4
2907: PUSH
2908: LD_VAR 0 5
2912: PUSH
2913: FOR_IN
2914: IFFALSE 2950
// if GetTech ( i , side ) <> state_researched then
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL_OW 321
2930: PUSH
2931: LD_INT 2
2933: NONEQUAL
2934: IFFALSE 2948
// begin result := false ;
2936: LD_ADDR_VAR 0 3
2940: PUSH
2941: LD_INT 0
2943: ST_TO_ADDR
// exit ;
2944: POP
2945: POP
2946: GO 2952
// end ;
2948: GO 2913
2950: POP
2951: POP
// end ;
2952: LD_VAR 0 3
2956: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2957: LD_INT 0
2959: PPUSH
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
2968: PPUSH
2969: PPUSH
2970: PPUSH
2971: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2972: LD_VAR 0 1
2976: NOT
2977: IFTRUE 2994
2979: PUSH
2980: LD_VAR 0 1
2984: PPUSH
2985: CALL_OW 257
2989: PUSH
2990: LD_INT 9
2992: NONEQUAL
2993: OR
2994: IFFALSE 2998
// exit ;
2996: GO 3577
// side := GetSide ( unit ) ;
2998: LD_ADDR_VAR 0 9
3002: PUSH
3003: LD_VAR 0 1
3007: PPUSH
3008: CALL_OW 255
3012: ST_TO_ADDR
// tech_space := tech_spacanom ;
3013: LD_ADDR_VAR 0 12
3017: PUSH
3018: LD_INT 29
3020: ST_TO_ADDR
// tech_time := tech_taurad ;
3021: LD_ADDR_VAR 0 13
3025: PUSH
3026: LD_INT 28
3028: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3029: LD_ADDR_VAR 0 11
3033: PUSH
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 310
3043: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3044: LD_VAR 0 11
3048: PPUSH
3049: CALL_OW 247
3053: PUSH
3054: LD_INT 2
3056: EQUAL
3057: IFFALSE 3061
// exit ;
3059: GO 3577
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3061: LD_ADDR_VAR 0 8
3065: PUSH
3066: LD_INT 81
3068: PUSH
3069: LD_VAR 0 9
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 3
3080: PUSH
3081: LD_INT 21
3083: PUSH
3084: LD_INT 3
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PPUSH
3099: CALL_OW 69
3103: ST_TO_ADDR
// if not tmp then
3104: LD_VAR 0 8
3108: NOT
3109: IFFALSE 3113
// exit ;
3111: GO 3577
// if in_unit then
3113: LD_VAR 0 11
3117: IFFALSE 3141
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3119: LD_ADDR_VAR 0 10
3123: PUSH
3124: LD_VAR 0 8
3128: PPUSH
3129: LD_VAR 0 11
3133: PPUSH
3134: CALL_OW 74
3138: ST_TO_ADDR
3139: GO 3161
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3141: LD_ADDR_VAR 0 10
3145: PUSH
3146: LD_VAR 0 8
3150: PPUSH
3151: LD_VAR 0 1
3155: PPUSH
3156: CALL_OW 74
3160: ST_TO_ADDR
// if not enemy then
3161: LD_VAR 0 10
3165: NOT
3166: IFFALSE 3170
// exit ;
3168: GO 3577
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3170: LD_VAR 0 11
3174: IFFALSE 3196
3176: PUSH
3177: LD_VAR 0 11
3181: PPUSH
3182: LD_VAR 0 10
3186: PPUSH
3187: CALL_OW 296
3191: PUSH
3192: LD_INT 13
3194: GREATER
3195: AND
3196: IFTRUE 3218
3198: PUSH
3199: LD_VAR 0 1
3203: PPUSH
3204: LD_VAR 0 10
3208: PPUSH
3209: CALL_OW 296
3213: PUSH
3214: LD_INT 12
3216: GREATER
3217: OR
3218: IFFALSE 3222
// exit ;
3220: GO 3577
// missile := [ 1 ] ;
3222: LD_ADDR_VAR 0 14
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3233: LD_VAR 0 9
3237: PPUSH
3238: LD_VAR 0 12
3242: PPUSH
3243: CALL_OW 325
3247: IFFALSE 3276
// missile := Replace ( missile , missile + 1 , 2 ) ;
3249: LD_ADDR_VAR 0 14
3253: PUSH
3254: LD_VAR 0 14
3258: PPUSH
3259: LD_VAR 0 14
3263: PUSH
3264: LD_INT 1
3266: PLUS
3267: PPUSH
3268: LD_INT 2
3270: PPUSH
3271: CALL_OW 1
3275: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3276: LD_VAR 0 9
3280: PPUSH
3281: LD_VAR 0 13
3285: PPUSH
3286: CALL_OW 325
3290: IFFALSE 3314
3292: PUSH
3293: LD_VAR 0 10
3297: PPUSH
3298: CALL_OW 255
3302: PPUSH
3303: LD_VAR 0 13
3307: PPUSH
3308: CALL_OW 325
3312: NOT
3313: AND
3314: IFFALSE 3343
// missile := Replace ( missile , missile + 1 , 3 ) ;
3316: LD_ADDR_VAR 0 14
3320: PUSH
3321: LD_VAR 0 14
3325: PPUSH
3326: LD_VAR 0 14
3330: PUSH
3331: LD_INT 1
3333: PLUS
3334: PPUSH
3335: LD_INT 3
3337: PPUSH
3338: CALL_OW 1
3342: ST_TO_ADDR
// if missile < 2 then
3343: LD_VAR 0 14
3347: PUSH
3348: LD_INT 2
3350: LESS
3351: IFFALSE 3355
// exit ;
3353: GO 3577
// x := GetX ( enemy ) ;
3355: LD_ADDR_VAR 0 4
3359: PUSH
3360: LD_VAR 0 10
3364: PPUSH
3365: CALL_OW 250
3369: ST_TO_ADDR
// y := GetY ( enemy ) ;
3370: LD_ADDR_VAR 0 5
3374: PUSH
3375: LD_VAR 0 10
3379: PPUSH
3380: CALL_OW 251
3384: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3385: LD_ADDR_VAR 0 6
3389: PUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_INT 1
3397: NEG
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: CALL_OW 12
3406: PLUS
3407: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3408: LD_ADDR_VAR 0 7
3412: PUSH
3413: LD_VAR 0 5
3417: PUSH
3418: LD_INT 1
3420: NEG
3421: PPUSH
3422: LD_INT 1
3424: PPUSH
3425: CALL_OW 12
3429: PLUS
3430: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3431: LD_VAR 0 6
3435: PPUSH
3436: LD_VAR 0 7
3440: PPUSH
3441: CALL_OW 488
3445: NOT
3446: IFFALSE 3468
// begin _x := x ;
3448: LD_ADDR_VAR 0 6
3452: PUSH
3453: LD_VAR 0 4
3457: ST_TO_ADDR
// _y := y ;
3458: LD_ADDR_VAR 0 7
3462: PUSH
3463: LD_VAR 0 5
3467: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: LD_INT 1
3475: PPUSH
3476: LD_VAR 0 14
3480: PPUSH
3481: CALL_OW 12
3485: ST_TO_ADDR
// case i of 1 :
3486: LD_VAR 0 3
3490: PUSH
3491: LD_INT 1
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3516
3499: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3500: LD_VAR 0 1
3504: PPUSH
3505: LD_VAR 0 10
3509: PPUSH
3510: CALL_OW 115
3514: GO 3577
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3524
3522: GO 3546
3524: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_VAR 0 6
3534: PPUSH
3535: LD_VAR 0 7
3539: PPUSH
3540: CALL_OW 153
3544: GO 3577
3546: LD_INT 3
3548: DOUBLE
3549: EQUAL
3550: IFTRUE 3554
3552: GO 3576
3554: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_VAR 0 6
3564: PPUSH
3565: LD_VAR 0 7
3569: PPUSH
3570: CALL_OW 154
3574: GO 3577
3576: POP
// end ;
3577: LD_VAR 0 2
3581: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3582: LD_INT 0
3584: PPUSH
3585: PPUSH
3586: PPUSH
3587: PPUSH
3588: PPUSH
3589: PPUSH
// if not unit or not building then
3590: LD_VAR 0 1
3594: NOT
3595: IFTRUE 3604
3597: PUSH
3598: LD_VAR 0 2
3602: NOT
3603: OR
3604: IFFALSE 3608
// exit ;
3606: GO 3766
// x := GetX ( building ) ;
3608: LD_ADDR_VAR 0 5
3612: PUSH
3613: LD_VAR 0 2
3617: PPUSH
3618: CALL_OW 250
3622: ST_TO_ADDR
// y := GetY ( building ) ;
3623: LD_ADDR_VAR 0 6
3627: PUSH
3628: LD_VAR 0 2
3632: PPUSH
3633: CALL_OW 251
3637: ST_TO_ADDR
// for i := 0 to 5 do
3638: LD_ADDR_VAR 0 4
3642: PUSH
3643: DOUBLE
3644: LD_INT 0
3646: DEC
3647: ST_TO_ADDR
3648: LD_INT 5
3650: PUSH
3651: FOR_TO
3652: IFFALSE 3764
// begin _x := ShiftX ( x , i , 3 ) ;
3654: LD_ADDR_VAR 0 7
3658: PUSH
3659: LD_VAR 0 5
3663: PPUSH
3664: LD_VAR 0 4
3668: PPUSH
3669: LD_INT 3
3671: PPUSH
3672: CALL_OW 272
3676: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3677: LD_ADDR_VAR 0 8
3681: PUSH
3682: LD_VAR 0 6
3686: PPUSH
3687: LD_VAR 0 4
3691: PPUSH
3692: LD_INT 3
3694: PPUSH
3695: CALL_OW 273
3699: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3700: LD_VAR 0 7
3704: PPUSH
3705: LD_VAR 0 8
3709: PPUSH
3710: CALL_OW 488
3714: NOT
3715: IFFALSE 3719
// continue ;
3717: GO 3651
// if HexInfo ( _x , _y ) = 0 then
3719: LD_VAR 0 7
3723: PPUSH
3724: LD_VAR 0 8
3728: PPUSH
3729: CALL_OW 428
3733: PUSH
3734: LD_INT 0
3736: EQUAL
3737: IFFALSE 3762
// begin ComMoveXY ( unit , _x , _y ) ;
3739: LD_VAR 0 1
3743: PPUSH
3744: LD_VAR 0 7
3748: PPUSH
3749: LD_VAR 0 8
3753: PPUSH
3754: CALL_OW 111
// exit ;
3758: POP
3759: POP
3760: GO 3766
// end ; end ;
3762: GO 3651
3764: POP
3765: POP
// end ;
3766: LD_VAR 0 3
3770: RET
// export function ScanBase ( side , base_area ) ; begin
3771: LD_INT 0
3773: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3774: LD_ADDR_VAR 0 3
3778: PUSH
3779: LD_VAR 0 2
3783: PPUSH
3784: LD_INT 81
3786: PUSH
3787: LD_VAR 0 1
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PPUSH
3796: CALL_OW 70
3800: ST_TO_ADDR
// end ;
3801: LD_VAR 0 3
3805: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3806: LD_INT 0
3808: PPUSH
3809: PPUSH
3810: PPUSH
3811: PPUSH
// result := false ;
3812: LD_ADDR_VAR 0 2
3816: PUSH
3817: LD_INT 0
3819: ST_TO_ADDR
// side := GetSide ( unit ) ;
3820: LD_ADDR_VAR 0 3
3824: PUSH
3825: LD_VAR 0 1
3829: PPUSH
3830: CALL_OW 255
3834: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3835: LD_ADDR_VAR 0 4
3839: PUSH
3840: LD_VAR 0 1
3844: PPUSH
3845: CALL_OW 248
3849: ST_TO_ADDR
// case nat of 1 :
3850: LD_VAR 0 4
3854: PUSH
3855: LD_INT 1
3857: DOUBLE
3858: EQUAL
3859: IFTRUE 3863
3861: GO 3874
3863: POP
// tech := tech_lassight ; 2 :
3864: LD_ADDR_VAR 0 5
3868: PUSH
3869: LD_INT 12
3871: ST_TO_ADDR
3872: GO 3913
3874: LD_INT 2
3876: DOUBLE
3877: EQUAL
3878: IFTRUE 3882
3880: GO 3893
3882: POP
// tech := tech_mortar ; 3 :
3883: LD_ADDR_VAR 0 5
3887: PUSH
3888: LD_INT 41
3890: ST_TO_ADDR
3891: GO 3913
3893: LD_INT 3
3895: DOUBLE
3896: EQUAL
3897: IFTRUE 3901
3899: GO 3912
3901: POP
// tech := tech_bazooka ; end ;
3902: LD_ADDR_VAR 0 5
3906: PUSH
3907: LD_INT 44
3909: ST_TO_ADDR
3910: GO 3913
3912: POP
// if Researched ( side , tech ) then
3913: LD_VAR 0 3
3917: PPUSH
3918: LD_VAR 0 5
3922: PPUSH
3923: CALL_OW 325
3927: IFFALSE 3954
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3929: LD_ADDR_VAR 0 2
3933: PUSH
3934: LD_INT 5
3936: PUSH
3937: LD_INT 8
3939: PUSH
3940: LD_INT 9
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: PUSH
3948: LD_VAR 0 4
3952: ARRAY
3953: ST_TO_ADDR
// end ;
3954: LD_VAR 0 2
3958: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
3959: LD_INT 0
3961: PPUSH
3962: PPUSH
3963: PPUSH
// if not mines then
3964: LD_VAR 0 2
3968: NOT
3969: IFFALSE 3973
// exit ;
3971: GO 4117
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3973: LD_ADDR_VAR 0 5
3977: PUSH
3978: LD_INT 81
3980: PUSH
3981: LD_VAR 0 1
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PUSH
3990: LD_INT 3
3992: PUSH
3993: LD_INT 21
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PPUSH
4011: CALL_OW 69
4015: ST_TO_ADDR
// for i in mines do
4016: LD_ADDR_VAR 0 4
4020: PUSH
4021: LD_VAR 0 2
4025: PUSH
4026: FOR_IN
4027: IFFALSE 4115
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4029: LD_VAR 0 4
4033: PUSH
4034: LD_INT 1
4036: ARRAY
4037: PPUSH
4038: LD_VAR 0 4
4042: PUSH
4043: LD_INT 2
4045: ARRAY
4046: PPUSH
4047: CALL_OW 458
4051: NOT
4052: IFFALSE 4056
// continue ;
4054: GO 4026
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4056: LD_VAR 0 4
4060: PUSH
4061: LD_INT 1
4063: ARRAY
4064: PPUSH
4065: LD_VAR 0 4
4069: PUSH
4070: LD_INT 2
4072: ARRAY
4073: PPUSH
4074: CALL_OW 428
4078: PUSH
4079: LD_VAR 0 5
4083: IN
4084: IFFALSE 4113
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4086: LD_VAR 0 4
4090: PUSH
4091: LD_INT 1
4093: ARRAY
4094: PPUSH
4095: LD_VAR 0 4
4099: PUSH
4100: LD_INT 2
4102: ARRAY
4103: PPUSH
4104: LD_VAR 0 1
4108: PPUSH
4109: CALL_OW 456
// end ;
4113: GO 4026
4115: POP
4116: POP
// end ;
4117: LD_VAR 0 3
4121: RET
// export function Count ( array ) ; begin
4122: LD_INT 0
4124: PPUSH
// result := array + 0 ;
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: LD_VAR 0 1
4134: PUSH
4135: LD_INT 0
4137: PLUS
4138: ST_TO_ADDR
// end ;
4139: LD_VAR 0 2
4143: RET
// export function IsEmpty ( building ) ; begin
4144: LD_INT 0
4146: PPUSH
// if not building then
4147: LD_VAR 0 1
4151: NOT
4152: IFFALSE 4156
// exit ;
4154: GO 4199
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4156: LD_ADDR_VAR 0 2
4160: PUSH
4161: LD_VAR 0 1
4165: PUSH
4166: LD_INT 22
4168: PUSH
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 255
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 58
4185: PUSH
4186: EMPTY
4187: LIST
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 69
4197: IN
4198: ST_TO_ADDR
// end ;
4199: LD_VAR 0 2
4203: RET
// export function IsNotFull ( building ) ; var places ; begin
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
// if not building then
4208: LD_VAR 0 1
4212: NOT
4213: IFFALSE 4217
// exit ;
4215: GO 4245
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4217: LD_ADDR_VAR 0 2
4221: PUSH
4222: LD_VAR 0 1
4226: PPUSH
4227: LD_INT 3
4229: PUSH
4230: LD_INT 62
4232: PUSH
4233: EMPTY
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PPUSH
4240: CALL_OW 72
4244: ST_TO_ADDR
// end ;
4245: LD_VAR 0 2
4249: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4250: LD_INT 0
4252: PPUSH
4253: PPUSH
4254: PPUSH
4255: PPUSH
// tmp := [ ] ;
4256: LD_ADDR_VAR 0 3
4260: PUSH
4261: EMPTY
4262: ST_TO_ADDR
// list := [ ] ;
4263: LD_ADDR_VAR 0 5
4267: PUSH
4268: EMPTY
4269: ST_TO_ADDR
// for i = 16 to 25 do
4270: LD_ADDR_VAR 0 4
4274: PUSH
4275: DOUBLE
4276: LD_INT 16
4278: DEC
4279: ST_TO_ADDR
4280: LD_INT 25
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4357
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4286: LD_ADDR_VAR 0 3
4290: PUSH
4291: LD_VAR 0 3
4295: PUSH
4296: LD_INT 22
4298: PUSH
4299: LD_VAR 0 1
4303: PPUSH
4304: CALL_OW 255
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: LD_INT 91
4315: PUSH
4316: LD_VAR 0 1
4320: PUSH
4321: LD_INT 6
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: LIST
4328: PUSH
4329: LD_INT 30
4331: PUSH
4332: LD_VAR 0 4
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: PPUSH
4349: CALL_OW 69
4353: ADD
4354: ST_TO_ADDR
4355: GO 4283
4357: POP
4358: POP
// for i = 1 to tmp do
4359: LD_ADDR_VAR 0 4
4363: PUSH
4364: DOUBLE
4365: LD_INT 1
4367: DEC
4368: ST_TO_ADDR
4369: LD_VAR 0 3
4373: PUSH
4374: FOR_TO
4375: IFFALSE 4463
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4377: LD_ADDR_VAR 0 5
4381: PUSH
4382: LD_VAR 0 5
4386: PUSH
4387: LD_VAR 0 3
4391: PUSH
4392: LD_VAR 0 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 266
4402: PUSH
4403: LD_VAR 0 3
4407: PUSH
4408: LD_VAR 0 4
4412: ARRAY
4413: PPUSH
4414: CALL_OW 250
4418: PUSH
4419: LD_VAR 0 3
4423: PUSH
4424: LD_VAR 0 4
4428: ARRAY
4429: PPUSH
4430: CALL_OW 251
4434: PUSH
4435: LD_VAR 0 3
4439: PUSH
4440: LD_VAR 0 4
4444: ARRAY
4445: PPUSH
4446: CALL_OW 254
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: ADD
4460: ST_TO_ADDR
4461: GO 4374
4463: POP
4464: POP
// result := list ;
4465: LD_ADDR_VAR 0 2
4469: PUSH
4470: LD_VAR 0 5
4474: ST_TO_ADDR
// end ;
4475: LD_VAR 0 2
4479: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4480: LD_INT 0
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
// if not factory then
4489: LD_VAR 0 1
4493: NOT
4494: IFFALSE 4498
// exit ;
4496: GO 5101
// if control = control_apeman then
4498: LD_VAR 0 4
4502: PUSH
4503: LD_INT 5
4505: EQUAL
4506: IFFALSE 4615
// begin tmp := UnitsInside ( factory ) ;
4508: LD_ADDR_VAR 0 8
4512: PUSH
4513: LD_VAR 0 1
4517: PPUSH
4518: CALL_OW 313
4522: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4523: LD_VAR 0 8
4527: PPUSH
4528: LD_INT 25
4530: PUSH
4531: LD_INT 12
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PPUSH
4538: CALL_OW 72
4542: NOT
4543: IFFALSE 4553
// control := control_manual ;
4545: LD_ADDR_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4553: LD_ADDR_VAR 0 8
4557: PUSH
4558: LD_VAR 0 1
4562: PPUSH
4563: CALL 4250 0 1
4567: ST_TO_ADDR
// if tmp then
4568: LD_VAR 0 8
4572: IFFALSE 4615
// begin for i in tmp do
4574: LD_ADDR_VAR 0 7
4578: PUSH
4579: LD_VAR 0 8
4583: PUSH
4584: FOR_IN
4585: IFFALSE 4613
// if i [ 1 ] = b_ext_radio then
4587: LD_VAR 0 7
4591: PUSH
4592: LD_INT 1
4594: ARRAY
4595: PUSH
4596: LD_INT 22
4598: EQUAL
4599: IFFALSE 4611
// begin control := control_remote ;
4601: LD_ADDR_VAR 0 4
4605: PUSH
4606: LD_INT 2
4608: ST_TO_ADDR
// break ;
4609: GO 4613
// end ;
4611: GO 4584
4613: POP
4614: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4615: LD_VAR 0 1
4619: PPUSH
4620: LD_VAR 0 2
4624: PPUSH
4625: LD_VAR 0 3
4629: PPUSH
4630: LD_VAR 0 4
4634: PPUSH
4635: LD_VAR 0 5
4639: PPUSH
4640: CALL_OW 448
4644: IFFALSE 4679
// begin result := [ chassis , engine , control , weapon ] ;
4646: LD_ADDR_VAR 0 6
4650: PUSH
4651: LD_VAR 0 2
4655: PUSH
4656: LD_VAR 0 3
4660: PUSH
4661: LD_VAR 0 4
4665: PUSH
4666: LD_VAR 0 5
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: ST_TO_ADDR
// exit ;
4677: GO 5101
// end ; _chassis := AvailableChassisList ( factory ) ;
4679: LD_ADDR_VAR 0 9
4683: PUSH
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 475
4693: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4694: LD_ADDR_VAR 0 11
4698: PUSH
4699: LD_VAR 0 1
4703: PPUSH
4704: CALL_OW 476
4708: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4709: LD_ADDR_VAR 0 12
4713: PUSH
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 477
4723: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4724: LD_ADDR_VAR 0 10
4728: PUSH
4729: LD_VAR 0 1
4733: PPUSH
4734: CALL_OW 478
4738: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4739: LD_VAR 0 9
4743: NOT
4744: IFTRUE 4753
4746: PUSH
4747: LD_VAR 0 11
4751: NOT
4752: OR
4753: IFTRUE 4762
4755: PUSH
4756: LD_VAR 0 12
4760: NOT
4761: OR
4762: IFTRUE 4771
4764: PUSH
4765: LD_VAR 0 10
4769: NOT
4770: OR
4771: IFFALSE 4806
// begin result := [ chassis , engine , control , weapon ] ;
4773: LD_ADDR_VAR 0 6
4777: PUSH
4778: LD_VAR 0 2
4782: PUSH
4783: LD_VAR 0 3
4787: PUSH
4788: LD_VAR 0 4
4792: PUSH
4793: LD_VAR 0 5
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: ST_TO_ADDR
// exit ;
4804: GO 5101
// end ; if not chassis in _chassis then
4806: LD_VAR 0 2
4810: PUSH
4811: LD_VAR 0 9
4815: IN
4816: NOT
4817: IFFALSE 4843
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4819: LD_ADDR_VAR 0 2
4823: PUSH
4824: LD_VAR 0 9
4828: PUSH
4829: LD_INT 1
4831: PPUSH
4832: LD_VAR 0 9
4836: PPUSH
4837: CALL_OW 12
4841: ARRAY
4842: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4843: LD_VAR 0 2
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL 5106 0 2
4857: NOT
4858: IFFALSE 4919
// repeat engine := _engine [ 1 ] ;
4860: LD_ADDR_VAR 0 3
4864: PUSH
4865: LD_VAR 0 11
4869: PUSH
4870: LD_INT 1
4872: ARRAY
4873: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4874: LD_ADDR_VAR 0 11
4878: PUSH
4879: LD_VAR 0 11
4883: PPUSH
4884: LD_INT 1
4886: PPUSH
4887: CALL_OW 3
4891: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4892: LD_VAR 0 2
4896: PPUSH
4897: LD_VAR 0 3
4901: PPUSH
4902: CALL 5106 0 2
4906: IFTRUE 4917
4908: PUSH
4909: LD_VAR 0 11
4913: PUSH
4914: EMPTY
4915: EQUAL
4916: OR
4917: IFFALSE 4860
// if not control in _control then
4919: LD_VAR 0 4
4923: PUSH
4924: LD_VAR 0 12
4928: IN
4929: NOT
4930: IFFALSE 4956
// control := _control [ rand ( 1 , _control ) ] ;
4932: LD_ADDR_VAR 0 4
4936: PUSH
4937: LD_VAR 0 12
4941: PUSH
4942: LD_INT 1
4944: PPUSH
4945: LD_VAR 0 12
4949: PPUSH
4950: CALL_OW 12
4954: ARRAY
4955: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4956: LD_VAR 0 2
4960: PPUSH
4961: LD_VAR 0 5
4965: PPUSH
4966: CALL 5328 0 2
4970: NOT
4971: IFFALSE 5032
// repeat weapon := _weapon [ 1 ] ;
4973: LD_ADDR_VAR 0 5
4977: PUSH
4978: LD_VAR 0 10
4982: PUSH
4983: LD_INT 1
4985: ARRAY
4986: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4987: LD_ADDR_VAR 0 10
4991: PUSH
4992: LD_VAR 0 10
4996: PPUSH
4997: LD_INT 1
4999: PPUSH
5000: CALL_OW 3
5004: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_VAR 0 5
5014: PPUSH
5015: CALL 5328 0 2
5019: IFTRUE 5030
5021: PUSH
5022: LD_VAR 0 10
5026: PUSH
5027: EMPTY
5028: EQUAL
5029: OR
5030: IFFALSE 4973
// result := [ ] ;
5032: LD_ADDR_VAR 0 6
5036: PUSH
5037: EMPTY
5038: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5039: LD_VAR 0 1
5043: PPUSH
5044: LD_VAR 0 2
5048: PPUSH
5049: LD_VAR 0 3
5053: PPUSH
5054: LD_VAR 0 4
5058: PPUSH
5059: LD_VAR 0 5
5063: PPUSH
5064: CALL_OW 448
5068: IFFALSE 5101
// result := [ chassis , engine , control , weapon ] ;
5070: LD_ADDR_VAR 0 6
5074: PUSH
5075: LD_VAR 0 2
5079: PUSH
5080: LD_VAR 0 3
5084: PUSH
5085: LD_VAR 0 4
5089: PUSH
5090: LD_VAR 0 5
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: ST_TO_ADDR
// end ;
5101: LD_VAR 0 6
5105: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5106: LD_INT 0
5108: PPUSH
// if not chassis or not engine then
5109: LD_VAR 0 1
5113: NOT
5114: IFTRUE 5123
5116: PUSH
5117: LD_VAR 0 2
5121: NOT
5122: OR
5123: IFFALSE 5127
// exit ;
5125: GO 5323
// case engine of engine_solar :
5127: LD_VAR 0 2
5131: PUSH
5132: LD_INT 2
5134: DOUBLE
5135: EQUAL
5136: IFTRUE 5140
5138: GO 5178
5140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5141: LD_ADDR_VAR 0 3
5145: PUSH
5146: LD_INT 11
5148: PUSH
5149: LD_INT 12
5151: PUSH
5152: LD_INT 13
5154: PUSH
5155: LD_INT 14
5157: PUSH
5158: LD_INT 1
5160: PUSH
5161: LD_INT 2
5163: PUSH
5164: LD_INT 3
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: ST_TO_ADDR
5176: GO 5307
5178: LD_INT 1
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5248
5186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5187: LD_ADDR_VAR 0 3
5191: PUSH
5192: LD_INT 11
5194: PUSH
5195: LD_INT 12
5197: PUSH
5198: LD_INT 13
5200: PUSH
5201: LD_INT 14
5203: PUSH
5204: LD_INT 1
5206: PUSH
5207: LD_INT 2
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: LD_INT 4
5215: PUSH
5216: LD_INT 5
5218: PUSH
5219: LD_INT 21
5221: PUSH
5222: LD_INT 23
5224: PUSH
5225: LD_INT 22
5227: PUSH
5228: LD_INT 24
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: ST_TO_ADDR
5246: GO 5307
5248: LD_INT 3
5250: DOUBLE
5251: EQUAL
5252: IFTRUE 5256
5254: GO 5306
5256: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5257: LD_ADDR_VAR 0 3
5261: PUSH
5262: LD_INT 13
5264: PUSH
5265: LD_INT 14
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: LD_INT 3
5273: PUSH
5274: LD_INT 4
5276: PUSH
5277: LD_INT 5
5279: PUSH
5280: LD_INT 21
5282: PUSH
5283: LD_INT 22
5285: PUSH
5286: LD_INT 23
5288: PUSH
5289: LD_INT 24
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: ST_TO_ADDR
5304: GO 5307
5306: POP
// result := ( chassis in result ) ;
5307: LD_ADDR_VAR 0 3
5311: PUSH
5312: LD_VAR 0 1
5316: PUSH
5317: LD_VAR 0 3
5321: IN
5322: ST_TO_ADDR
// end ;
5323: LD_VAR 0 3
5327: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5328: LD_INT 0
5330: PPUSH
// if not chassis or not weapon then
5331: LD_VAR 0 1
5335: NOT
5336: IFTRUE 5345
5338: PUSH
5339: LD_VAR 0 2
5343: NOT
5344: OR
5345: IFFALSE 5349
// exit ;
5347: GO 6443
// case weapon of us_machine_gun :
5349: LD_VAR 0 2
5353: PUSH
5354: LD_INT 2
5356: DOUBLE
5357: EQUAL
5358: IFTRUE 5362
5360: GO 5392
5362: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5363: LD_ADDR_VAR 0 3
5367: PUSH
5368: LD_INT 1
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: LD_INT 3
5376: PUSH
5377: LD_INT 4
5379: PUSH
5380: LD_INT 5
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: ST_TO_ADDR
5390: GO 6427
5392: LD_INT 3
5394: DOUBLE
5395: EQUAL
5396: IFTRUE 5400
5398: GO 5430
5400: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5401: LD_ADDR_VAR 0 3
5405: PUSH
5406: LD_INT 1
5408: PUSH
5409: LD_INT 2
5411: PUSH
5412: LD_INT 3
5414: PUSH
5415: LD_INT 4
5417: PUSH
5418: LD_INT 5
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: ST_TO_ADDR
5428: GO 6427
5430: LD_INT 11
5432: DOUBLE
5433: EQUAL
5434: IFTRUE 5438
5436: GO 5468
5438: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5439: LD_ADDR_VAR 0 3
5443: PUSH
5444: LD_INT 1
5446: PUSH
5447: LD_INT 2
5449: PUSH
5450: LD_INT 3
5452: PUSH
5453: LD_INT 4
5455: PUSH
5456: LD_INT 5
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: ST_TO_ADDR
5466: GO 6427
5468: LD_INT 4
5470: DOUBLE
5471: EQUAL
5472: IFTRUE 5476
5474: GO 5502
5476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5477: LD_ADDR_VAR 0 3
5481: PUSH
5482: LD_INT 2
5484: PUSH
5485: LD_INT 3
5487: PUSH
5488: LD_INT 4
5490: PUSH
5491: LD_INT 5
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: ST_TO_ADDR
5500: GO 6427
5502: LD_INT 5
5504: DOUBLE
5505: EQUAL
5506: IFTRUE 5510
5508: GO 5536
5510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_INT 2
5518: PUSH
5519: LD_INT 3
5521: PUSH
5522: LD_INT 4
5524: PUSH
5525: LD_INT 5
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: ST_TO_ADDR
5534: GO 6427
5536: LD_INT 9
5538: DOUBLE
5539: EQUAL
5540: IFTRUE 5544
5542: GO 5570
5544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5545: LD_ADDR_VAR 0 3
5549: PUSH
5550: LD_INT 2
5552: PUSH
5553: LD_INT 3
5555: PUSH
5556: LD_INT 4
5558: PUSH
5559: LD_INT 5
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: ST_TO_ADDR
5568: GO 6427
5570: LD_INT 7
5572: DOUBLE
5573: EQUAL
5574: IFTRUE 5578
5576: GO 5604
5578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5579: LD_ADDR_VAR 0 3
5583: PUSH
5584: LD_INT 2
5586: PUSH
5587: LD_INT 3
5589: PUSH
5590: LD_INT 4
5592: PUSH
5593: LD_INT 5
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: ST_TO_ADDR
5602: GO 6427
5604: LD_INT 12
5606: DOUBLE
5607: EQUAL
5608: IFTRUE 5612
5610: GO 5638
5612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5613: LD_ADDR_VAR 0 3
5617: PUSH
5618: LD_INT 2
5620: PUSH
5621: LD_INT 3
5623: PUSH
5624: LD_INT 4
5626: PUSH
5627: LD_INT 5
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: ST_TO_ADDR
5636: GO 6427
5638: LD_INT 13
5640: DOUBLE
5641: EQUAL
5642: IFTRUE 5646
5644: GO 5672
5646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5647: LD_ADDR_VAR 0 3
5651: PUSH
5652: LD_INT 2
5654: PUSH
5655: LD_INT 3
5657: PUSH
5658: LD_INT 4
5660: PUSH
5661: LD_INT 5
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: ST_TO_ADDR
5670: GO 6427
5672: LD_INT 14
5674: DOUBLE
5675: EQUAL
5676: IFTRUE 5680
5678: GO 5698
5680: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5681: LD_ADDR_VAR 0 3
5685: PUSH
5686: LD_INT 4
5688: PUSH
5689: LD_INT 5
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: ST_TO_ADDR
5696: GO 6427
5698: LD_INT 6
5700: DOUBLE
5701: EQUAL
5702: IFTRUE 5706
5704: GO 5724
5706: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5707: LD_ADDR_VAR 0 3
5711: PUSH
5712: LD_INT 4
5714: PUSH
5715: LD_INT 5
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: ST_TO_ADDR
5722: GO 6427
5724: LD_INT 10
5726: DOUBLE
5727: EQUAL
5728: IFTRUE 5732
5730: GO 5750
5732: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5733: LD_ADDR_VAR 0 3
5737: PUSH
5738: LD_INT 4
5740: PUSH
5741: LD_INT 5
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: ST_TO_ADDR
5748: GO 6427
5750: LD_INT 22
5752: DOUBLE
5753: EQUAL
5754: IFTRUE 5758
5756: GO 5784
5758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5759: LD_ADDR_VAR 0 3
5763: PUSH
5764: LD_INT 11
5766: PUSH
5767: LD_INT 12
5769: PUSH
5770: LD_INT 13
5772: PUSH
5773: LD_INT 14
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: ST_TO_ADDR
5782: GO 6427
5784: LD_INT 23
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5792
5790: GO 5818
5792: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5793: LD_ADDR_VAR 0 3
5797: PUSH
5798: LD_INT 11
5800: PUSH
5801: LD_INT 12
5803: PUSH
5804: LD_INT 13
5806: PUSH
5807: LD_INT 14
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: ST_TO_ADDR
5816: GO 6427
5818: LD_INT 24
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5826
5824: GO 5852
5826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5827: LD_ADDR_VAR 0 3
5831: PUSH
5832: LD_INT 11
5834: PUSH
5835: LD_INT 12
5837: PUSH
5838: LD_INT 13
5840: PUSH
5841: LD_INT 14
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: ST_TO_ADDR
5850: GO 6427
5852: LD_INT 30
5854: DOUBLE
5855: EQUAL
5856: IFTRUE 5860
5858: GO 5886
5860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5861: LD_ADDR_VAR 0 3
5865: PUSH
5866: LD_INT 11
5868: PUSH
5869: LD_INT 12
5871: PUSH
5872: LD_INT 13
5874: PUSH
5875: LD_INT 14
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: ST_TO_ADDR
5884: GO 6427
5886: LD_INT 25
5888: DOUBLE
5889: EQUAL
5890: IFTRUE 5894
5892: GO 5912
5894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5895: LD_ADDR_VAR 0 3
5899: PUSH
5900: LD_INT 13
5902: PUSH
5903: LD_INT 14
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: ST_TO_ADDR
5910: GO 6427
5912: LD_INT 27
5914: DOUBLE
5915: EQUAL
5916: IFTRUE 5920
5918: GO 5938
5920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5921: LD_ADDR_VAR 0 3
5925: PUSH
5926: LD_INT 13
5928: PUSH
5929: LD_INT 14
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: ST_TO_ADDR
5936: GO 6427
5938: LD_INT 92
5940: DOUBLE
5941: EQUAL
5942: IFTRUE 5946
5944: GO 5972
5946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5947: LD_ADDR_VAR 0 3
5951: PUSH
5952: LD_INT 11
5954: PUSH
5955: LD_INT 12
5957: PUSH
5958: LD_INT 13
5960: PUSH
5961: LD_INT 14
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: ST_TO_ADDR
5970: GO 6427
5972: LD_INT 28
5974: DOUBLE
5975: EQUAL
5976: IFTRUE 5980
5978: GO 5998
5980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5981: LD_ADDR_VAR 0 3
5985: PUSH
5986: LD_INT 13
5988: PUSH
5989: LD_INT 14
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: ST_TO_ADDR
5996: GO 6427
5998: LD_INT 29
6000: DOUBLE
6001: EQUAL
6002: IFTRUE 6006
6004: GO 6024
6006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6007: LD_ADDR_VAR 0 3
6011: PUSH
6012: LD_INT 13
6014: PUSH
6015: LD_INT 14
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: ST_TO_ADDR
6022: GO 6427
6024: LD_INT 31
6026: DOUBLE
6027: EQUAL
6028: IFTRUE 6032
6030: GO 6050
6032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6033: LD_ADDR_VAR 0 3
6037: PUSH
6038: LD_INT 13
6040: PUSH
6041: LD_INT 14
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: ST_TO_ADDR
6048: GO 6427
6050: LD_INT 26
6052: DOUBLE
6053: EQUAL
6054: IFTRUE 6058
6056: GO 6076
6058: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6059: LD_ADDR_VAR 0 3
6063: PUSH
6064: LD_INT 13
6066: PUSH
6067: LD_INT 14
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: ST_TO_ADDR
6074: GO 6427
6076: LD_INT 42
6078: DOUBLE
6079: EQUAL
6080: IFTRUE 6084
6082: GO 6110
6084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6085: LD_ADDR_VAR 0 3
6089: PUSH
6090: LD_INT 21
6092: PUSH
6093: LD_INT 22
6095: PUSH
6096: LD_INT 23
6098: PUSH
6099: LD_INT 24
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: ST_TO_ADDR
6108: GO 6427
6110: LD_INT 43
6112: DOUBLE
6113: EQUAL
6114: IFTRUE 6118
6116: GO 6144
6118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6119: LD_ADDR_VAR 0 3
6123: PUSH
6124: LD_INT 21
6126: PUSH
6127: LD_INT 22
6129: PUSH
6130: LD_INT 23
6132: PUSH
6133: LD_INT 24
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: ST_TO_ADDR
6142: GO 6427
6144: LD_INT 44
6146: DOUBLE
6147: EQUAL
6148: IFTRUE 6152
6150: GO 6178
6152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6153: LD_ADDR_VAR 0 3
6157: PUSH
6158: LD_INT 21
6160: PUSH
6161: LD_INT 22
6163: PUSH
6164: LD_INT 23
6166: PUSH
6167: LD_INT 24
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: ST_TO_ADDR
6176: GO 6427
6178: LD_INT 45
6180: DOUBLE
6181: EQUAL
6182: IFTRUE 6186
6184: GO 6212
6186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6187: LD_ADDR_VAR 0 3
6191: PUSH
6192: LD_INT 21
6194: PUSH
6195: LD_INT 22
6197: PUSH
6198: LD_INT 23
6200: PUSH
6201: LD_INT 24
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: ST_TO_ADDR
6210: GO 6427
6212: LD_INT 49
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6246
6220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6221: LD_ADDR_VAR 0 3
6225: PUSH
6226: LD_INT 21
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: LD_INT 23
6234: PUSH
6235: LD_INT 24
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: ST_TO_ADDR
6244: GO 6427
6246: LD_INT 51
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6280
6254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6255: LD_ADDR_VAR 0 3
6259: PUSH
6260: LD_INT 21
6262: PUSH
6263: LD_INT 22
6265: PUSH
6266: LD_INT 23
6268: PUSH
6269: LD_INT 24
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: ST_TO_ADDR
6278: GO 6427
6280: LD_INT 52
6282: DOUBLE
6283: EQUAL
6284: IFTRUE 6288
6286: GO 6314
6288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6289: LD_ADDR_VAR 0 3
6293: PUSH
6294: LD_INT 21
6296: PUSH
6297: LD_INT 22
6299: PUSH
6300: LD_INT 23
6302: PUSH
6303: LD_INT 24
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: ST_TO_ADDR
6312: GO 6427
6314: LD_INT 53
6316: DOUBLE
6317: EQUAL
6318: IFTRUE 6322
6320: GO 6340
6322: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6323: LD_ADDR_VAR 0 3
6327: PUSH
6328: LD_INT 23
6330: PUSH
6331: LD_INT 24
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: ST_TO_ADDR
6338: GO 6427
6340: LD_INT 46
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6366
6348: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6349: LD_ADDR_VAR 0 3
6353: PUSH
6354: LD_INT 23
6356: PUSH
6357: LD_INT 24
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: ST_TO_ADDR
6364: GO 6427
6366: LD_INT 47
6368: DOUBLE
6369: EQUAL
6370: IFTRUE 6374
6372: GO 6392
6374: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
6375: LD_ADDR_VAR 0 3
6379: PUSH
6380: LD_INT 23
6382: PUSH
6383: LD_INT 24
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: ST_TO_ADDR
6390: GO 6427
6392: LD_INT 98
6394: DOUBLE
6395: EQUAL
6396: IFTRUE 6400
6398: GO 6426
6400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_INT 21
6408: PUSH
6409: LD_INT 22
6411: PUSH
6412: LD_INT 23
6414: PUSH
6415: LD_INT 24
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: ST_TO_ADDR
6424: GO 6427
6426: POP
// result := ( chassis in result ) ;
6427: LD_ADDR_VAR 0 3
6431: PUSH
6432: LD_VAR 0 1
6436: PUSH
6437: LD_VAR 0 3
6441: IN
6442: ST_TO_ADDR
// end ;
6443: LD_VAR 0 3
6447: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6448: LD_INT 0
6450: PPUSH
6451: PPUSH
6452: PPUSH
6453: PPUSH
6454: PPUSH
6455: PPUSH
6456: PPUSH
// result := array ;
6457: LD_ADDR_VAR 0 5
6461: PUSH
6462: LD_VAR 0 1
6466: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6467: LD_VAR 0 1
6471: NOT
6472: IFTRUE 6481
6474: PUSH
6475: LD_VAR 0 2
6479: NOT
6480: OR
6481: IFTRUE 6490
6483: PUSH
6484: LD_VAR 0 3
6488: NOT
6489: OR
6490: IFTRUE 6504
6492: PUSH
6493: LD_VAR 0 2
6497: PUSH
6498: LD_VAR 0 1
6502: GREATER
6503: OR
6504: IFTRUE 6518
6506: PUSH
6507: LD_VAR 0 3
6511: PUSH
6512: LD_VAR 0 1
6516: GREATER
6517: OR
6518: IFFALSE 6522
// exit ;
6520: GO 6818
// if direction then
6522: LD_VAR 0 4
6526: IFFALSE 6590
// begin d := 1 ;
6528: LD_ADDR_VAR 0 9
6532: PUSH
6533: LD_INT 1
6535: ST_TO_ADDR
// if i_from > i_to then
6536: LD_VAR 0 2
6540: PUSH
6541: LD_VAR 0 3
6545: GREATER
6546: IFFALSE 6572
// length := ( array - i_from ) + i_to else
6548: LD_ADDR_VAR 0 11
6552: PUSH
6553: LD_VAR 0 1
6557: PUSH
6558: LD_VAR 0 2
6562: MINUS
6563: PUSH
6564: LD_VAR 0 3
6568: PLUS
6569: ST_TO_ADDR
6570: GO 6588
// length := i_to - i_from ;
6572: LD_ADDR_VAR 0 11
6576: PUSH
6577: LD_VAR 0 3
6581: PUSH
6582: LD_VAR 0 2
6586: MINUS
6587: ST_TO_ADDR
// end else
6588: GO 6651
// begin d := - 1 ;
6590: LD_ADDR_VAR 0 9
6594: PUSH
6595: LD_INT 1
6597: NEG
6598: ST_TO_ADDR
// if i_from > i_to then
6599: LD_VAR 0 2
6603: PUSH
6604: LD_VAR 0 3
6608: GREATER
6609: IFFALSE 6629
// length := i_from - i_to else
6611: LD_ADDR_VAR 0 11
6615: PUSH
6616: LD_VAR 0 2
6620: PUSH
6621: LD_VAR 0 3
6625: MINUS
6626: ST_TO_ADDR
6627: GO 6651
// length := ( array - i_to ) + i_from ;
6629: LD_ADDR_VAR 0 11
6633: PUSH
6634: LD_VAR 0 1
6638: PUSH
6639: LD_VAR 0 3
6643: MINUS
6644: PUSH
6645: LD_VAR 0 2
6649: PLUS
6650: ST_TO_ADDR
// end ; if not length then
6651: LD_VAR 0 11
6655: NOT
6656: IFFALSE 6660
// exit ;
6658: GO 6818
// tmp := array ;
6660: LD_ADDR_VAR 0 10
6664: PUSH
6665: LD_VAR 0 1
6669: ST_TO_ADDR
// for i = 1 to length do
6670: LD_ADDR_VAR 0 6
6674: PUSH
6675: DOUBLE
6676: LD_INT 1
6678: DEC
6679: ST_TO_ADDR
6680: LD_VAR 0 11
6684: PUSH
6685: FOR_TO
6686: IFFALSE 6806
// begin for j = 1 to array do
6688: LD_ADDR_VAR 0 7
6692: PUSH
6693: DOUBLE
6694: LD_INT 1
6696: DEC
6697: ST_TO_ADDR
6698: LD_VAR 0 1
6702: PUSH
6703: FOR_TO
6704: IFFALSE 6792
// begin k := j + d ;
6706: LD_ADDR_VAR 0 8
6710: PUSH
6711: LD_VAR 0 7
6715: PUSH
6716: LD_VAR 0 9
6720: PLUS
6721: ST_TO_ADDR
// if k > array then
6722: LD_VAR 0 8
6726: PUSH
6727: LD_VAR 0 1
6731: GREATER
6732: IFFALSE 6742
// k := 1 ;
6734: LD_ADDR_VAR 0 8
6738: PUSH
6739: LD_INT 1
6741: ST_TO_ADDR
// if not k then
6742: LD_VAR 0 8
6746: NOT
6747: IFFALSE 6759
// k := array ;
6749: LD_ADDR_VAR 0 8
6753: PUSH
6754: LD_VAR 0 1
6758: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6759: LD_ADDR_VAR 0 10
6763: PUSH
6764: LD_VAR 0 10
6768: PPUSH
6769: LD_VAR 0 8
6773: PPUSH
6774: LD_VAR 0 1
6778: PUSH
6779: LD_VAR 0 7
6783: ARRAY
6784: PPUSH
6785: CALL_OW 1
6789: ST_TO_ADDR
// end ;
6790: GO 6703
6792: POP
6793: POP
// array := tmp ;
6794: LD_ADDR_VAR 0 1
6798: PUSH
6799: LD_VAR 0 10
6803: ST_TO_ADDR
// end ;
6804: GO 6685
6806: POP
6807: POP
// result := array ;
6808: LD_ADDR_VAR 0 5
6812: PUSH
6813: LD_VAR 0 1
6817: ST_TO_ADDR
// end ;
6818: LD_VAR 0 5
6822: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6823: LD_INT 0
6825: PPUSH
6826: PPUSH
// result := 0 ;
6827: LD_ADDR_VAR 0 3
6831: PUSH
6832: LD_INT 0
6834: ST_TO_ADDR
// if not array or not value in array then
6835: LD_VAR 0 1
6839: NOT
6840: IFTRUE 6855
6842: PUSH
6843: LD_VAR 0 2
6847: PUSH
6848: LD_VAR 0 1
6852: IN
6853: NOT
6854: OR
6855: IFFALSE 6859
// exit ;
6857: GO 6913
// for i = 1 to array do
6859: LD_ADDR_VAR 0 4
6863: PUSH
6864: DOUBLE
6865: LD_INT 1
6867: DEC
6868: ST_TO_ADDR
6869: LD_VAR 0 1
6873: PUSH
6874: FOR_TO
6875: IFFALSE 6911
// if value = array [ i ] then
6877: LD_VAR 0 2
6881: PUSH
6882: LD_VAR 0 1
6886: PUSH
6887: LD_VAR 0 4
6891: ARRAY
6892: EQUAL
6893: IFFALSE 6909
// begin result := i ;
6895: LD_ADDR_VAR 0 3
6899: PUSH
6900: LD_VAR 0 4
6904: ST_TO_ADDR
// exit ;
6905: POP
6906: POP
6907: GO 6913
// end ;
6909: GO 6874
6911: POP
6912: POP
// end ;
6913: LD_VAR 0 3
6917: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6918: LD_INT 0
6920: PPUSH
// vc_chassis := chassis ;
6921: LD_ADDR_OWVAR 37
6925: PUSH
6926: LD_VAR 0 1
6930: ST_TO_ADDR
// vc_engine := engine ;
6931: LD_ADDR_OWVAR 39
6935: PUSH
6936: LD_VAR 0 2
6940: ST_TO_ADDR
// vc_control := control ;
6941: LD_ADDR_OWVAR 38
6945: PUSH
6946: LD_VAR 0 3
6950: ST_TO_ADDR
// vc_weapon := weapon ;
6951: LD_ADDR_OWVAR 40
6955: PUSH
6956: LD_VAR 0 4
6960: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6961: LD_ADDR_OWVAR 41
6965: PUSH
6966: LD_VAR 0 5
6970: ST_TO_ADDR
// end ;
6971: LD_VAR 0 6
6975: RET
// export function WantPlant ( unit ) ; var task ; begin
6976: LD_INT 0
6978: PPUSH
6979: PPUSH
// result := false ;
6980: LD_ADDR_VAR 0 2
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6988: LD_ADDR_VAR 0 3
6992: PUSH
6993: LD_VAR 0 1
6997: PPUSH
6998: CALL_OW 437
7002: ST_TO_ADDR
// if task then
7003: LD_VAR 0 3
7007: IFFALSE 7035
// if task [ 1 ] [ 1 ] = p then
7009: LD_VAR 0 3
7013: PUSH
7014: LD_INT 1
7016: ARRAY
7017: PUSH
7018: LD_INT 1
7020: ARRAY
7021: PUSH
7022: LD_STRING p
7024: EQUAL
7025: IFFALSE 7035
// result := true ;
7027: LD_ADDR_VAR 0 2
7031: PUSH
7032: LD_INT 1
7034: ST_TO_ADDR
// end ;
7035: LD_VAR 0 2
7039: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7040: LD_INT 0
7042: PPUSH
7043: PPUSH
7044: PPUSH
7045: PPUSH
// if pos < 1 then
7046: LD_VAR 0 2
7050: PUSH
7051: LD_INT 1
7053: LESS
7054: IFFALSE 7058
// exit ;
7056: GO 7361
// if pos = 1 then
7058: LD_VAR 0 2
7062: PUSH
7063: LD_INT 1
7065: EQUAL
7066: IFFALSE 7099
// result := Replace ( arr , pos [ 1 ] , value ) else
7068: LD_ADDR_VAR 0 4
7072: PUSH
7073: LD_VAR 0 1
7077: PPUSH
7078: LD_VAR 0 2
7082: PUSH
7083: LD_INT 1
7085: ARRAY
7086: PPUSH
7087: LD_VAR 0 3
7091: PPUSH
7092: CALL_OW 1
7096: ST_TO_ADDR
7097: GO 7361
// begin tmp := arr ;
7099: LD_ADDR_VAR 0 6
7103: PUSH
7104: LD_VAR 0 1
7108: ST_TO_ADDR
// s_arr := [ tmp ] ;
7109: LD_ADDR_VAR 0 7
7113: PUSH
7114: LD_VAR 0 6
7118: PUSH
7119: EMPTY
7120: LIST
7121: ST_TO_ADDR
// for i = 1 to pos - 1 do
7122: LD_ADDR_VAR 0 5
7126: PUSH
7127: DOUBLE
7128: LD_INT 1
7130: DEC
7131: ST_TO_ADDR
7132: LD_VAR 0 2
7136: PUSH
7137: LD_INT 1
7139: MINUS
7140: PUSH
7141: FOR_TO
7142: IFFALSE 7187
// begin tmp := tmp [ pos [ i ] ] ;
7144: LD_ADDR_VAR 0 6
7148: PUSH
7149: LD_VAR 0 6
7153: PUSH
7154: LD_VAR 0 2
7158: PUSH
7159: LD_VAR 0 5
7163: ARRAY
7164: ARRAY
7165: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7166: LD_ADDR_VAR 0 7
7170: PUSH
7171: LD_VAR 0 7
7175: PUSH
7176: LD_VAR 0 6
7180: PUSH
7181: EMPTY
7182: LIST
7183: ADD
7184: ST_TO_ADDR
// end ;
7185: GO 7141
7187: POP
7188: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7189: LD_ADDR_VAR 0 6
7193: PUSH
7194: LD_VAR 0 6
7198: PPUSH
7199: LD_VAR 0 2
7203: PUSH
7204: LD_VAR 0 2
7208: ARRAY
7209: PPUSH
7210: LD_VAR 0 3
7214: PPUSH
7215: CALL_OW 1
7219: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7220: LD_ADDR_VAR 0 7
7224: PUSH
7225: LD_VAR 0 7
7229: PPUSH
7230: LD_VAR 0 7
7234: PPUSH
7235: LD_VAR 0 6
7239: PPUSH
7240: CALL_OW 1
7244: ST_TO_ADDR
// for i = s_arr downto 2 do
7245: LD_ADDR_VAR 0 5
7249: PUSH
7250: DOUBLE
7251: LD_VAR 0 7
7255: INC
7256: ST_TO_ADDR
7257: LD_INT 2
7259: PUSH
7260: FOR_DOWNTO
7261: IFFALSE 7345
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7263: LD_ADDR_VAR 0 6
7267: PUSH
7268: LD_VAR 0 7
7272: PUSH
7273: LD_VAR 0 5
7277: PUSH
7278: LD_INT 1
7280: MINUS
7281: ARRAY
7282: PPUSH
7283: LD_VAR 0 2
7287: PUSH
7288: LD_VAR 0 5
7292: PUSH
7293: LD_INT 1
7295: MINUS
7296: ARRAY
7297: PPUSH
7298: LD_VAR 0 7
7302: PUSH
7303: LD_VAR 0 5
7307: ARRAY
7308: PPUSH
7309: CALL_OW 1
7313: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7314: LD_ADDR_VAR 0 7
7318: PUSH
7319: LD_VAR 0 7
7323: PPUSH
7324: LD_VAR 0 5
7328: PUSH
7329: LD_INT 1
7331: MINUS
7332: PPUSH
7333: LD_VAR 0 6
7337: PPUSH
7338: CALL_OW 1
7342: ST_TO_ADDR
// end ;
7343: GO 7260
7345: POP
7346: POP
// result := s_arr [ 1 ] ;
7347: LD_ADDR_VAR 0 4
7351: PUSH
7352: LD_VAR 0 7
7356: PUSH
7357: LD_INT 1
7359: ARRAY
7360: ST_TO_ADDR
// end ; end ;
7361: LD_VAR 0 4
7365: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7366: LD_INT 0
7368: PPUSH
7369: PPUSH
// if not list then
7370: LD_VAR 0 1
7374: NOT
7375: IFFALSE 7379
// exit ;
7377: GO 7470
// i := list [ pos1 ] ;
7379: LD_ADDR_VAR 0 5
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: LD_VAR 0 2
7393: ARRAY
7394: ST_TO_ADDR
// if not i then
7395: LD_VAR 0 5
7399: NOT
7400: IFFALSE 7404
// exit ;
7402: GO 7470
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7404: LD_ADDR_VAR 0 1
7408: PUSH
7409: LD_VAR 0 1
7413: PPUSH
7414: LD_VAR 0 2
7418: PPUSH
7419: LD_VAR 0 1
7423: PUSH
7424: LD_VAR 0 3
7428: ARRAY
7429: PPUSH
7430: CALL_OW 1
7434: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7435: LD_ADDR_VAR 0 1
7439: PUSH
7440: LD_VAR 0 1
7444: PPUSH
7445: LD_VAR 0 3
7449: PPUSH
7450: LD_VAR 0 5
7454: PPUSH
7455: CALL_OW 1
7459: ST_TO_ADDR
// result := list ;
7460: LD_ADDR_VAR 0 4
7464: PUSH
7465: LD_VAR 0 1
7469: ST_TO_ADDR
// end ;
7470: LD_VAR 0 4
7474: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7475: LD_INT 0
7477: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7478: LD_ADDR_VAR 0 5
7482: PUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: CALL_OW 250
7492: PPUSH
7493: LD_VAR 0 1
7497: PPUSH
7498: CALL_OW 251
7502: PPUSH
7503: LD_VAR 0 2
7507: PPUSH
7508: LD_VAR 0 3
7512: PPUSH
7513: LD_VAR 0 4
7517: PPUSH
7518: CALL 7900 0 5
7522: ST_TO_ADDR
// end ;
7523: LD_VAR 0 5
7527: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7528: LD_INT 0
7530: PPUSH
7531: PPUSH
7532: PPUSH
7533: PPUSH
// if not list or not unit then
7534: LD_VAR 0 2
7538: NOT
7539: IFTRUE 7548
7541: PUSH
7542: LD_VAR 0 1
7546: NOT
7547: OR
7548: IFFALSE 7552
// exit ;
7550: GO 7895
// result := [ ] ;
7552: LD_ADDR_VAR 0 5
7556: PUSH
7557: EMPTY
7558: ST_TO_ADDR
// for i in list do
7559: LD_ADDR_VAR 0 6
7563: PUSH
7564: LD_VAR 0 2
7568: PUSH
7569: FOR_IN
7570: IFFALSE 7788
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7572: LD_ADDR_VAR 0 8
7576: PUSH
7577: LD_VAR 0 1
7581: PPUSH
7582: LD_VAR 0 6
7586: PUSH
7587: LD_INT 1
7589: ARRAY
7590: PPUSH
7591: LD_VAR 0 6
7595: PUSH
7596: LD_INT 2
7598: ARRAY
7599: PPUSH
7600: CALL_OW 297
7604: ST_TO_ADDR
// if not Count ( result ) then
7605: LD_VAR 0 5
7609: PPUSH
7610: CALL 4122 0 1
7614: NOT
7615: IFFALSE 7648
// begin result := Join ( result , [ i , tmp ] ) ;
7617: LD_ADDR_VAR 0 5
7621: PUSH
7622: LD_VAR 0 5
7626: PPUSH
7627: LD_VAR 0 6
7631: PUSH
7632: LD_VAR 0 8
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PPUSH
7641: CALL 40098 0 2
7645: ST_TO_ADDR
// continue ;
7646: GO 7569
// end ; if result [ result ] [ 2 ] <= tmp then
7648: LD_VAR 0 5
7652: PUSH
7653: LD_VAR 0 5
7657: ARRAY
7658: PUSH
7659: LD_INT 2
7661: ARRAY
7662: PUSH
7663: LD_VAR 0 8
7667: LESSEQUAL
7668: IFFALSE 7701
// result := Join ( result , [ i , tmp ] ) else
7670: LD_ADDR_VAR 0 5
7674: PUSH
7675: LD_VAR 0 5
7679: PPUSH
7680: LD_VAR 0 6
7684: PUSH
7685: LD_VAR 0 8
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PPUSH
7694: CALL 40098 0 2
7698: ST_TO_ADDR
7699: GO 7786
// begin for j := 1 to Count ( result ) do
7701: LD_ADDR_VAR 0 7
7705: PUSH
7706: DOUBLE
7707: LD_INT 1
7709: DEC
7710: ST_TO_ADDR
7711: LD_VAR 0 5
7715: PPUSH
7716: CALL 4122 0 1
7720: PUSH
7721: FOR_TO
7722: IFFALSE 7784
// begin if tmp < result [ j ] [ 2 ] then
7724: LD_VAR 0 8
7728: PUSH
7729: LD_VAR 0 5
7733: PUSH
7734: LD_VAR 0 7
7738: ARRAY
7739: PUSH
7740: LD_INT 2
7742: ARRAY
7743: LESS
7744: IFFALSE 7782
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7746: LD_ADDR_VAR 0 5
7750: PUSH
7751: LD_VAR 0 5
7755: PPUSH
7756: LD_VAR 0 7
7760: PPUSH
7761: LD_VAR 0 6
7765: PUSH
7766: LD_VAR 0 8
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PPUSH
7775: CALL_OW 2
7779: ST_TO_ADDR
// break ;
7780: GO 7784
// end ; end ;
7782: GO 7721
7784: POP
7785: POP
// end ; end ;
7786: GO 7569
7788: POP
7789: POP
// if result and not asc then
7790: LD_VAR 0 5
7794: IFFALSE 7803
7796: PUSH
7797: LD_VAR 0 3
7801: NOT
7802: AND
7803: IFFALSE 7820
// result := ReverseArray ( result ) ;
7805: LD_ADDR_VAR 0 5
7809: PUSH
7810: LD_VAR 0 5
7814: PPUSH
7815: CALL 35178 0 1
7819: ST_TO_ADDR
// tmp := [ ] ;
7820: LD_ADDR_VAR 0 8
7824: PUSH
7825: EMPTY
7826: ST_TO_ADDR
// if mode then
7827: LD_VAR 0 4
7831: IFFALSE 7895
// begin for i := 1 to result do
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: DOUBLE
7839: LD_INT 1
7841: DEC
7842: ST_TO_ADDR
7843: LD_VAR 0 5
7847: PUSH
7848: FOR_TO
7849: IFFALSE 7883
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7851: LD_ADDR_VAR 0 8
7855: PUSH
7856: LD_VAR 0 8
7860: PPUSH
7861: LD_VAR 0 5
7865: PUSH
7866: LD_VAR 0 6
7870: ARRAY
7871: PUSH
7872: LD_INT 1
7874: ARRAY
7875: PPUSH
7876: CALL 40098 0 2
7880: ST_TO_ADDR
7881: GO 7848
7883: POP
7884: POP
// result := tmp ;
7885: LD_ADDR_VAR 0 5
7889: PUSH
7890: LD_VAR 0 8
7894: ST_TO_ADDR
// end ; end ;
7895: LD_VAR 0 5
7899: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7900: LD_INT 0
7902: PPUSH
7903: PPUSH
7904: PPUSH
7905: PPUSH
// if not list then
7906: LD_VAR 0 3
7910: NOT
7911: IFFALSE 7915
// exit ;
7913: GO 8305
// result := [ ] ;
7915: LD_ADDR_VAR 0 6
7919: PUSH
7920: EMPTY
7921: ST_TO_ADDR
// for i in list do
7922: LD_ADDR_VAR 0 7
7926: PUSH
7927: LD_VAR 0 3
7931: PUSH
7932: FOR_IN
7933: IFFALSE 8135
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7935: LD_ADDR_VAR 0 9
7939: PUSH
7940: LD_VAR 0 7
7944: PPUSH
7945: LD_VAR 0 1
7949: PPUSH
7950: LD_VAR 0 2
7954: PPUSH
7955: CALL_OW 297
7959: ST_TO_ADDR
// if not result then
7960: LD_VAR 0 6
7964: NOT
7965: IFFALSE 7991
// result := [ [ i , tmp ] ] else
7967: LD_ADDR_VAR 0 6
7971: PUSH
7972: LD_VAR 0 7
7976: PUSH
7977: LD_VAR 0 9
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: ST_TO_ADDR
7989: GO 8133
// begin if result [ result ] [ 2 ] <= tmp then
7991: LD_VAR 0 6
7995: PUSH
7996: LD_VAR 0 6
8000: ARRAY
8001: PUSH
8002: LD_INT 2
8004: ARRAY
8005: PUSH
8006: LD_VAR 0 9
8010: LESSEQUAL
8011: IFFALSE 8053
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8013: LD_ADDR_VAR 0 6
8017: PUSH
8018: LD_VAR 0 6
8022: PPUSH
8023: LD_VAR 0 6
8027: PUSH
8028: LD_INT 1
8030: PLUS
8031: PPUSH
8032: LD_VAR 0 7
8036: PUSH
8037: LD_VAR 0 9
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 2
8050: ST_TO_ADDR
8051: GO 8133
// for j := 1 to result do
8053: LD_ADDR_VAR 0 8
8057: PUSH
8058: DOUBLE
8059: LD_INT 1
8061: DEC
8062: ST_TO_ADDR
8063: LD_VAR 0 6
8067: PUSH
8068: FOR_TO
8069: IFFALSE 8131
// begin if tmp < result [ j ] [ 2 ] then
8071: LD_VAR 0 9
8075: PUSH
8076: LD_VAR 0 6
8080: PUSH
8081: LD_VAR 0 8
8085: ARRAY
8086: PUSH
8087: LD_INT 2
8089: ARRAY
8090: LESS
8091: IFFALSE 8129
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8093: LD_ADDR_VAR 0 6
8097: PUSH
8098: LD_VAR 0 6
8102: PPUSH
8103: LD_VAR 0 8
8107: PPUSH
8108: LD_VAR 0 7
8112: PUSH
8113: LD_VAR 0 9
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PPUSH
8122: CALL_OW 2
8126: ST_TO_ADDR
// break ;
8127: GO 8131
// end ; end ;
8129: GO 8068
8131: POP
8132: POP
// end ; end ;
8133: GO 7932
8135: POP
8136: POP
// if result and not asc then
8137: LD_VAR 0 6
8141: IFFALSE 8150
8143: PUSH
8144: LD_VAR 0 4
8148: NOT
8149: AND
8150: IFFALSE 8225
// begin tmp := result ;
8152: LD_ADDR_VAR 0 9
8156: PUSH
8157: LD_VAR 0 6
8161: ST_TO_ADDR
// for i = tmp downto 1 do
8162: LD_ADDR_VAR 0 7
8166: PUSH
8167: DOUBLE
8168: LD_VAR 0 9
8172: INC
8173: ST_TO_ADDR
8174: LD_INT 1
8176: PUSH
8177: FOR_DOWNTO
8178: IFFALSE 8223
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8180: LD_ADDR_VAR 0 6
8184: PUSH
8185: LD_VAR 0 6
8189: PPUSH
8190: LD_VAR 0 9
8194: PUSH
8195: LD_VAR 0 7
8199: MINUS
8200: PUSH
8201: LD_INT 1
8203: PLUS
8204: PPUSH
8205: LD_VAR 0 9
8209: PUSH
8210: LD_VAR 0 7
8214: ARRAY
8215: PPUSH
8216: CALL_OW 1
8220: ST_TO_ADDR
8221: GO 8177
8223: POP
8224: POP
// end ; tmp := [ ] ;
8225: LD_ADDR_VAR 0 9
8229: PUSH
8230: EMPTY
8231: ST_TO_ADDR
// if mode then
8232: LD_VAR 0 5
8236: IFFALSE 8305
// begin for i = 1 to result do
8238: LD_ADDR_VAR 0 7
8242: PUSH
8243: DOUBLE
8244: LD_INT 1
8246: DEC
8247: ST_TO_ADDR
8248: LD_VAR 0 6
8252: PUSH
8253: FOR_TO
8254: IFFALSE 8293
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8256: LD_ADDR_VAR 0 9
8260: PUSH
8261: LD_VAR 0 9
8265: PPUSH
8266: LD_VAR 0 7
8270: PPUSH
8271: LD_VAR 0 6
8275: PUSH
8276: LD_VAR 0 7
8280: ARRAY
8281: PUSH
8282: LD_INT 1
8284: ARRAY
8285: PPUSH
8286: CALL_OW 1
8290: ST_TO_ADDR
8291: GO 8253
8293: POP
8294: POP
// result := tmp ;
8295: LD_ADDR_VAR 0 6
8299: PUSH
8300: LD_VAR 0 9
8304: ST_TO_ADDR
// end ; end ;
8305: LD_VAR 0 6
8309: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8310: LD_INT 0
8312: PPUSH
8313: PPUSH
8314: PPUSH
8315: PPUSH
8316: PPUSH
8317: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8318: LD_ADDR_VAR 0 5
8322: PUSH
8323: LD_INT 0
8325: PUSH
8326: LD_INT 0
8328: PUSH
8329: LD_INT 0
8331: PUSH
8332: EMPTY
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: ST_TO_ADDR
// if not x or not y then
8340: LD_VAR 0 2
8344: NOT
8345: IFTRUE 8354
8347: PUSH
8348: LD_VAR 0 3
8352: NOT
8353: OR
8354: IFFALSE 8358
// exit ;
8356: GO 10014
// if not range then
8358: LD_VAR 0 4
8362: NOT
8363: IFFALSE 8373
// range := 10 ;
8365: LD_ADDR_VAR 0 4
8369: PUSH
8370: LD_INT 10
8372: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8373: LD_ADDR_VAR 0 8
8377: PUSH
8378: LD_INT 81
8380: PUSH
8381: LD_VAR 0 1
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PUSH
8390: LD_INT 92
8392: PUSH
8393: LD_VAR 0 2
8397: PUSH
8398: LD_VAR 0 3
8402: PUSH
8403: LD_VAR 0 4
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 3
8416: PUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: PPUSH
8436: CALL_OW 69
8440: ST_TO_ADDR
// if not tmp then
8441: LD_VAR 0 8
8445: NOT
8446: IFFALSE 8450
// exit ;
8448: GO 10014
// for i in tmp do
8450: LD_ADDR_VAR 0 6
8454: PUSH
8455: LD_VAR 0 8
8459: PUSH
8460: FOR_IN
8461: IFFALSE 9989
// begin points := [ 0 , 0 , 0 ] ;
8463: LD_ADDR_VAR 0 9
8467: PUSH
8468: LD_INT 0
8470: PUSH
8471: LD_INT 0
8473: PUSH
8474: LD_INT 0
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: ST_TO_ADDR
// bpoints := 1 ;
8482: LD_ADDR_VAR 0 10
8486: PUSH
8487: LD_INT 1
8489: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8490: LD_VAR 0 6
8494: PPUSH
8495: CALL_OW 247
8499: PUSH
8500: LD_INT 1
8502: DOUBLE
8503: EQUAL
8504: IFTRUE 8508
8506: GO 9090
8508: POP
// begin if GetClass ( i ) = 1 then
8509: LD_VAR 0 6
8513: PPUSH
8514: CALL_OW 257
8518: PUSH
8519: LD_INT 1
8521: EQUAL
8522: IFFALSE 8543
// points := [ 10 , 5 , 3 ] ;
8524: LD_ADDR_VAR 0 9
8528: PUSH
8529: LD_INT 10
8531: PUSH
8532: LD_INT 5
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: LIST
8542: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8543: LD_VAR 0 6
8547: PPUSH
8548: CALL_OW 257
8552: PUSH
8553: LD_INT 2
8555: PUSH
8556: LD_INT 3
8558: PUSH
8559: LD_INT 4
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: IN
8567: IFFALSE 8588
// points := [ 3 , 2 , 1 ] ;
8569: LD_ADDR_VAR 0 9
8573: PUSH
8574: LD_INT 3
8576: PUSH
8577: LD_INT 2
8579: PUSH
8580: LD_INT 1
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8588: LD_VAR 0 6
8592: PPUSH
8593: CALL_OW 257
8597: PUSH
8598: LD_INT 5
8600: EQUAL
8601: IFFALSE 8622
// points := [ 130 , 5 , 2 ] ;
8603: LD_ADDR_VAR 0 9
8607: PUSH
8608: LD_INT 130
8610: PUSH
8611: LD_INT 5
8613: PUSH
8614: LD_INT 2
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8622: LD_VAR 0 6
8626: PPUSH
8627: CALL_OW 257
8631: PUSH
8632: LD_INT 8
8634: EQUAL
8635: IFFALSE 8656
// points := [ 35 , 35 , 30 ] ;
8637: LD_ADDR_VAR 0 9
8641: PUSH
8642: LD_INT 35
8644: PUSH
8645: LD_INT 35
8647: PUSH
8648: LD_INT 30
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8656: LD_VAR 0 6
8660: PPUSH
8661: CALL_OW 257
8665: PUSH
8666: LD_INT 9
8668: EQUAL
8669: IFFALSE 8690
// points := [ 20 , 55 , 40 ] ;
8671: LD_ADDR_VAR 0 9
8675: PUSH
8676: LD_INT 20
8678: PUSH
8679: LD_INT 55
8681: PUSH
8682: LD_INT 40
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: LIST
8689: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8690: LD_VAR 0 6
8694: PPUSH
8695: CALL_OW 257
8699: PUSH
8700: LD_INT 12
8702: PUSH
8703: LD_INT 16
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: IN
8710: IFFALSE 8731
// points := [ 5 , 3 , 2 ] ;
8712: LD_ADDR_VAR 0 9
8716: PUSH
8717: LD_INT 5
8719: PUSH
8720: LD_INT 3
8722: PUSH
8723: LD_INT 2
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: LIST
8730: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8731: LD_VAR 0 6
8735: PPUSH
8736: CALL_OW 257
8740: PUSH
8741: LD_INT 17
8743: EQUAL
8744: IFFALSE 8765
// points := [ 100 , 50 , 75 ] ;
8746: LD_ADDR_VAR 0 9
8750: PUSH
8751: LD_INT 100
8753: PUSH
8754: LD_INT 50
8756: PUSH
8757: LD_INT 75
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: LIST
8764: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8765: LD_VAR 0 6
8769: PPUSH
8770: CALL_OW 257
8774: PUSH
8775: LD_INT 15
8777: EQUAL
8778: IFFALSE 8799
// points := [ 10 , 5 , 3 ] ;
8780: LD_ADDR_VAR 0 9
8784: PUSH
8785: LD_INT 10
8787: PUSH
8788: LD_INT 5
8790: PUSH
8791: LD_INT 3
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8799: LD_VAR 0 6
8803: PPUSH
8804: CALL_OW 257
8808: PUSH
8809: LD_INT 14
8811: EQUAL
8812: IFFALSE 8833
// points := [ 10 , 0 , 0 ] ;
8814: LD_ADDR_VAR 0 9
8818: PUSH
8819: LD_INT 10
8821: PUSH
8822: LD_INT 0
8824: PUSH
8825: LD_INT 0
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: LIST
8832: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8833: LD_VAR 0 6
8837: PPUSH
8838: CALL_OW 257
8842: PUSH
8843: LD_INT 11
8845: EQUAL
8846: IFFALSE 8867
// points := [ 30 , 10 , 5 ] ;
8848: LD_ADDR_VAR 0 9
8852: PUSH
8853: LD_INT 30
8855: PUSH
8856: LD_INT 10
8858: PUSH
8859: LD_INT 5
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: LIST
8866: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8867: LD_VAR 0 1
8871: PPUSH
8872: LD_INT 5
8874: PPUSH
8875: CALL_OW 321
8879: PUSH
8880: LD_INT 2
8882: EQUAL
8883: IFFALSE 8900
// bpoints := bpoints * 1.8 ;
8885: LD_ADDR_VAR 0 10
8889: PUSH
8890: LD_VAR 0 10
8894: PUSH
8895: LD_REAL  1.80000000000000E+0000
8898: MUL
8899: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8900: LD_VAR 0 6
8904: PPUSH
8905: CALL_OW 257
8909: PUSH
8910: LD_INT 1
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: LD_INT 3
8918: PUSH
8919: LD_INT 4
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: IN
8928: IFFALSE 8948
8930: PUSH
8931: LD_VAR 0 1
8935: PPUSH
8936: LD_INT 51
8938: PPUSH
8939: CALL_OW 321
8943: PUSH
8944: LD_INT 2
8946: EQUAL
8947: AND
8948: IFFALSE 8965
// bpoints := bpoints * 1.2 ;
8950: LD_ADDR_VAR 0 10
8954: PUSH
8955: LD_VAR 0 10
8959: PUSH
8960: LD_REAL  1.20000000000000E+0000
8963: MUL
8964: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8965: LD_VAR 0 6
8969: PPUSH
8970: CALL_OW 257
8974: PUSH
8975: LD_INT 5
8977: PUSH
8978: LD_INT 7
8980: PUSH
8981: LD_INT 9
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: LIST
8988: IN
8989: IFFALSE 9009
8991: PUSH
8992: LD_VAR 0 1
8996: PPUSH
8997: LD_INT 52
8999: PPUSH
9000: CALL_OW 321
9004: PUSH
9005: LD_INT 2
9007: EQUAL
9008: AND
9009: IFFALSE 9026
// bpoints := bpoints * 1.5 ;
9011: LD_ADDR_VAR 0 10
9015: PUSH
9016: LD_VAR 0 10
9020: PUSH
9021: LD_REAL  1.50000000000000E+0000
9024: MUL
9025: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9026: LD_VAR 0 1
9030: PPUSH
9031: LD_INT 66
9033: PPUSH
9034: CALL_OW 321
9038: PUSH
9039: LD_INT 2
9041: EQUAL
9042: IFFALSE 9059
// bpoints := bpoints * 1.1 ;
9044: LD_ADDR_VAR 0 10
9048: PUSH
9049: LD_VAR 0 10
9053: PUSH
9054: LD_REAL  1.10000000000000E+0000
9057: MUL
9058: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9059: LD_ADDR_VAR 0 10
9063: PUSH
9064: LD_VAR 0 10
9068: PUSH
9069: LD_VAR 0 6
9073: PPUSH
9074: LD_INT 1
9076: PPUSH
9077: CALL_OW 259
9081: PUSH
9082: LD_REAL  1.15000000000000E+0000
9085: MUL
9086: MUL
9087: ST_TO_ADDR
// end ; unit_vehicle :
9088: GO 9918
9090: LD_INT 2
9092: DOUBLE
9093: EQUAL
9094: IFTRUE 9098
9096: GO 9906
9098: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9099: LD_VAR 0 6
9103: PPUSH
9104: CALL_OW 264
9108: PUSH
9109: LD_INT 2
9111: PUSH
9112: LD_INT 42
9114: PUSH
9115: LD_INT 24
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: LIST
9122: IN
9123: IFFALSE 9144
// points := [ 25 , 5 , 3 ] ;
9125: LD_ADDR_VAR 0 9
9129: PUSH
9130: LD_INT 25
9132: PUSH
9133: LD_INT 5
9135: PUSH
9136: LD_INT 3
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9144: LD_VAR 0 6
9148: PPUSH
9149: CALL_OW 264
9153: PUSH
9154: LD_INT 4
9156: PUSH
9157: LD_INT 43
9159: PUSH
9160: LD_INT 25
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: IN
9168: IFFALSE 9189
// points := [ 40 , 15 , 5 ] ;
9170: LD_ADDR_VAR 0 9
9174: PUSH
9175: LD_INT 40
9177: PUSH
9178: LD_INT 15
9180: PUSH
9181: LD_INT 5
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9189: LD_VAR 0 6
9193: PPUSH
9194: CALL_OW 264
9198: PUSH
9199: LD_INT 3
9201: PUSH
9202: LD_INT 23
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: IN
9209: IFFALSE 9230
// points := [ 7 , 25 , 8 ] ;
9211: LD_ADDR_VAR 0 9
9215: PUSH
9216: LD_INT 7
9218: PUSH
9219: LD_INT 25
9221: PUSH
9222: LD_INT 8
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9230: LD_VAR 0 6
9234: PPUSH
9235: CALL_OW 264
9239: PUSH
9240: LD_INT 5
9242: PUSH
9243: LD_INT 27
9245: PUSH
9246: LD_INT 44
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: LIST
9253: IN
9254: IFFALSE 9275
// points := [ 14 , 50 , 16 ] ;
9256: LD_ADDR_VAR 0 9
9260: PUSH
9261: LD_INT 14
9263: PUSH
9264: LD_INT 50
9266: PUSH
9267: LD_INT 16
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9275: LD_VAR 0 6
9279: PPUSH
9280: CALL_OW 264
9284: PUSH
9285: LD_INT 6
9287: PUSH
9288: LD_INT 46
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: IN
9295: IFFALSE 9316
// points := [ 32 , 120 , 70 ] ;
9297: LD_ADDR_VAR 0 9
9301: PUSH
9302: LD_INT 32
9304: PUSH
9305: LD_INT 120
9307: PUSH
9308: LD_INT 70
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9316: LD_VAR 0 6
9320: PPUSH
9321: CALL_OW 264
9325: PUSH
9326: LD_INT 7
9328: PUSH
9329: LD_INT 28
9331: PUSH
9332: LD_INT 45
9334: PUSH
9335: LD_INT 92
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: IN
9344: IFFALSE 9365
// points := [ 35 , 20 , 45 ] ;
9346: LD_ADDR_VAR 0 9
9350: PUSH
9351: LD_INT 35
9353: PUSH
9354: LD_INT 20
9356: PUSH
9357: LD_INT 45
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9365: LD_VAR 0 6
9369: PPUSH
9370: CALL_OW 264
9374: PUSH
9375: LD_INT 47
9377: PUSH
9378: EMPTY
9379: LIST
9380: IN
9381: IFFALSE 9402
// points := [ 67 , 45 , 75 ] ;
9383: LD_ADDR_VAR 0 9
9387: PUSH
9388: LD_INT 67
9390: PUSH
9391: LD_INT 45
9393: PUSH
9394: LD_INT 75
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: LIST
9401: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9402: LD_VAR 0 6
9406: PPUSH
9407: CALL_OW 264
9411: PUSH
9412: LD_INT 26
9414: PUSH
9415: EMPTY
9416: LIST
9417: IN
9418: IFFALSE 9439
// points := [ 120 , 30 , 80 ] ;
9420: LD_ADDR_VAR 0 9
9424: PUSH
9425: LD_INT 120
9427: PUSH
9428: LD_INT 30
9430: PUSH
9431: LD_INT 80
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9439: LD_VAR 0 6
9443: PPUSH
9444: CALL_OW 264
9448: PUSH
9449: LD_INT 22
9451: PUSH
9452: EMPTY
9453: LIST
9454: IN
9455: IFFALSE 9476
// points := [ 40 , 1 , 1 ] ;
9457: LD_ADDR_VAR 0 9
9461: PUSH
9462: LD_INT 40
9464: PUSH
9465: LD_INT 1
9467: PUSH
9468: LD_INT 1
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: LIST
9475: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9476: LD_VAR 0 6
9480: PPUSH
9481: CALL_OW 264
9485: PUSH
9486: LD_INT 29
9488: PUSH
9489: EMPTY
9490: LIST
9491: IN
9492: IFFALSE 9513
// points := [ 70 , 200 , 400 ] ;
9494: LD_ADDR_VAR 0 9
9498: PUSH
9499: LD_INT 70
9501: PUSH
9502: LD_INT 200
9504: PUSH
9505: LD_INT 400
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: LIST
9512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9513: LD_VAR 0 6
9517: PPUSH
9518: CALL_OW 264
9522: PUSH
9523: LD_INT 14
9525: PUSH
9526: LD_INT 53
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: IN
9533: IFFALSE 9554
// points := [ 40 , 10 , 20 ] ;
9535: LD_ADDR_VAR 0 9
9539: PUSH
9540: LD_INT 40
9542: PUSH
9543: LD_INT 10
9545: PUSH
9546: LD_INT 20
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: LIST
9553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9554: LD_VAR 0 6
9558: PPUSH
9559: CALL_OW 264
9563: PUSH
9564: LD_INT 9
9566: PUSH
9567: EMPTY
9568: LIST
9569: IN
9570: IFFALSE 9591
// points := [ 5 , 70 , 20 ] ;
9572: LD_ADDR_VAR 0 9
9576: PUSH
9577: LD_INT 5
9579: PUSH
9580: LD_INT 70
9582: PUSH
9583: LD_INT 20
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9591: LD_VAR 0 6
9595: PPUSH
9596: CALL_OW 264
9600: PUSH
9601: LD_INT 10
9603: PUSH
9604: EMPTY
9605: LIST
9606: IN
9607: IFFALSE 9628
// points := [ 35 , 110 , 70 ] ;
9609: LD_ADDR_VAR 0 9
9613: PUSH
9614: LD_INT 35
9616: PUSH
9617: LD_INT 110
9619: PUSH
9620: LD_INT 70
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9628: LD_VAR 0 6
9632: PPUSH
9633: CALL_OW 265
9637: PUSH
9638: LD_INT 25
9640: EQUAL
9641: IFFALSE 9662
// points := [ 80 , 65 , 100 ] ;
9643: LD_ADDR_VAR 0 9
9647: PUSH
9648: LD_INT 80
9650: PUSH
9651: LD_INT 65
9653: PUSH
9654: LD_INT 100
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9662: LD_VAR 0 6
9666: PPUSH
9667: CALL_OW 263
9671: PUSH
9672: LD_INT 1
9674: EQUAL
9675: IFFALSE 9710
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9677: LD_ADDR_VAR 0 10
9681: PUSH
9682: LD_VAR 0 10
9686: PUSH
9687: LD_VAR 0 6
9691: PPUSH
9692: CALL_OW 311
9696: PPUSH
9697: LD_INT 3
9699: PPUSH
9700: CALL_OW 259
9704: PUSH
9705: LD_INT 4
9707: MUL
9708: MUL
9709: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9710: LD_VAR 0 6
9714: PPUSH
9715: CALL_OW 263
9719: PUSH
9720: LD_INT 2
9722: EQUAL
9723: IFFALSE 9774
// begin j := IsControledBy ( i ) ;
9725: LD_ADDR_VAR 0 7
9729: PUSH
9730: LD_VAR 0 6
9734: PPUSH
9735: CALL_OW 312
9739: ST_TO_ADDR
// if j then
9740: LD_VAR 0 7
9744: IFFALSE 9774
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9746: LD_ADDR_VAR 0 10
9750: PUSH
9751: LD_VAR 0 10
9755: PUSH
9756: LD_VAR 0 7
9760: PPUSH
9761: LD_INT 3
9763: PPUSH
9764: CALL_OW 259
9768: PUSH
9769: LD_INT 3
9771: MUL
9772: MUL
9773: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9774: LD_VAR 0 6
9778: PPUSH
9779: CALL_OW 264
9783: PUSH
9784: LD_INT 5
9786: PUSH
9787: LD_INT 6
9789: PUSH
9790: LD_INT 46
9792: PUSH
9793: LD_INT 44
9795: PUSH
9796: LD_INT 47
9798: PUSH
9799: LD_INT 45
9801: PUSH
9802: LD_INT 28
9804: PUSH
9805: LD_INT 7
9807: PUSH
9808: LD_INT 27
9810: PUSH
9811: LD_INT 29
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: IN
9826: IFFALSE 9846
9828: PUSH
9829: LD_VAR 0 1
9833: PPUSH
9834: LD_INT 52
9836: PPUSH
9837: CALL_OW 321
9841: PUSH
9842: LD_INT 2
9844: EQUAL
9845: AND
9846: IFFALSE 9863
// bpoints := bpoints * 1.2 ;
9848: LD_ADDR_VAR 0 10
9852: PUSH
9853: LD_VAR 0 10
9857: PUSH
9858: LD_REAL  1.20000000000000E+0000
9861: MUL
9862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9863: LD_VAR 0 6
9867: PPUSH
9868: CALL_OW 264
9872: PUSH
9873: LD_INT 6
9875: PUSH
9876: LD_INT 46
9878: PUSH
9879: LD_INT 47
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: IN
9887: IFFALSE 9904
// bpoints := bpoints * 1.2 ;
9889: LD_ADDR_VAR 0 10
9893: PUSH
9894: LD_VAR 0 10
9898: PUSH
9899: LD_REAL  1.20000000000000E+0000
9902: MUL
9903: ST_TO_ADDR
// end ; unit_building :
9904: GO 9918
9906: LD_INT 3
9908: DOUBLE
9909: EQUAL
9910: IFTRUE 9914
9912: GO 9917
9914: POP
// ; end ;
9915: GO 9918
9917: POP
// for j = 1 to 3 do
9918: LD_ADDR_VAR 0 7
9922: PUSH
9923: DOUBLE
9924: LD_INT 1
9926: DEC
9927: ST_TO_ADDR
9928: LD_INT 3
9930: PUSH
9931: FOR_TO
9932: IFFALSE 9985
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9934: LD_ADDR_VAR 0 5
9938: PUSH
9939: LD_VAR 0 5
9943: PPUSH
9944: LD_VAR 0 7
9948: PPUSH
9949: LD_VAR 0 5
9953: PUSH
9954: LD_VAR 0 7
9958: ARRAY
9959: PUSH
9960: LD_VAR 0 9
9964: PUSH
9965: LD_VAR 0 7
9969: ARRAY
9970: PUSH
9971: LD_VAR 0 10
9975: MUL
9976: PLUS
9977: PPUSH
9978: CALL_OW 1
9982: ST_TO_ADDR
9983: GO 9931
9985: POP
9986: POP
// end ;
9987: GO 8460
9989: POP
9990: POP
// result := Replace ( result , 4 , tmp ) ;
9991: LD_ADDR_VAR 0 5
9995: PUSH
9996: LD_VAR 0 5
10000: PPUSH
10001: LD_INT 4
10003: PPUSH
10004: LD_VAR 0 8
10008: PPUSH
10009: CALL_OW 1
10013: ST_TO_ADDR
// end ;
10014: LD_VAR 0 5
10018: RET
// export function DangerAtRange ( unit , range ) ; begin
10019: LD_INT 0
10021: PPUSH
// if not unit then
10022: LD_VAR 0 1
10026: NOT
10027: IFFALSE 10031
// exit ;
10029: GO 10076
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10031: LD_ADDR_VAR 0 3
10035: PUSH
10036: LD_VAR 0 1
10040: PPUSH
10041: CALL_OW 255
10045: PPUSH
10046: LD_VAR 0 1
10050: PPUSH
10051: CALL_OW 250
10055: PPUSH
10056: LD_VAR 0 1
10060: PPUSH
10061: CALL_OW 251
10065: PPUSH
10066: LD_VAR 0 2
10070: PPUSH
10071: CALL 8310 0 4
10075: ST_TO_ADDR
// end ;
10076: LD_VAR 0 3
10080: RET
// export function DangerInArea ( side , area ) ; begin
10081: LD_INT 0
10083: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10084: LD_ADDR_VAR 0 3
10088: PUSH
10089: LD_VAR 0 2
10093: PPUSH
10094: LD_INT 81
10096: PUSH
10097: LD_VAR 0 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PPUSH
10106: CALL_OW 70
10110: ST_TO_ADDR
// end ;
10111: LD_VAR 0 3
10115: RET
// export function IsExtension ( b ) ; begin
10116: LD_INT 0
10118: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10119: LD_ADDR_VAR 0 2
10123: PUSH
10124: LD_VAR 0 1
10128: PUSH
10129: LD_INT 23
10131: PUSH
10132: LD_INT 20
10134: PUSH
10135: LD_INT 22
10137: PUSH
10138: LD_INT 17
10140: PUSH
10141: LD_INT 24
10143: PUSH
10144: LD_INT 21
10146: PUSH
10147: LD_INT 19
10149: PUSH
10150: LD_INT 16
10152: PUSH
10153: LD_INT 25
10155: PUSH
10156: LD_INT 18
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: IN
10171: ST_TO_ADDR
// end ;
10172: LD_VAR 0 2
10176: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10177: LD_INT 0
10179: PPUSH
10180: PPUSH
10181: PPUSH
// result := [ ] ;
10182: LD_ADDR_VAR 0 4
10186: PUSH
10187: EMPTY
10188: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10189: LD_ADDR_VAR 0 5
10193: PUSH
10194: LD_VAR 0 2
10198: PPUSH
10199: LD_INT 21
10201: PUSH
10202: LD_INT 3
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PPUSH
10209: CALL_OW 70
10213: ST_TO_ADDR
// if not tmp then
10214: LD_VAR 0 5
10218: NOT
10219: IFFALSE 10223
// exit ;
10221: GO 10287
// if checkLink then
10223: LD_VAR 0 3
10227: IFFALSE 10277
// begin for i in tmp do
10229: LD_ADDR_VAR 0 6
10233: PUSH
10234: LD_VAR 0 5
10238: PUSH
10239: FOR_IN
10240: IFFALSE 10275
// if GetBase ( i ) <> base then
10242: LD_VAR 0 6
10246: PPUSH
10247: CALL_OW 274
10251: PUSH
10252: LD_VAR 0 1
10256: NONEQUAL
10257: IFFALSE 10273
// ComLinkToBase ( base , i ) ;
10259: LD_VAR 0 1
10263: PPUSH
10264: LD_VAR 0 6
10268: PPUSH
10269: CALL_OW 169
10273: GO 10239
10275: POP
10276: POP
// end ; result := tmp ;
10277: LD_ADDR_VAR 0 4
10281: PUSH
10282: LD_VAR 0 5
10286: ST_TO_ADDR
// end ;
10287: LD_VAR 0 4
10291: RET
// export function ComComplete ( units , b ) ; var i ; begin
10292: LD_INT 0
10294: PPUSH
10295: PPUSH
// if not units then
10296: LD_VAR 0 1
10300: NOT
10301: IFFALSE 10305
// exit ;
10303: GO 10395
// for i in units do
10305: LD_ADDR_VAR 0 4
10309: PUSH
10310: LD_VAR 0 1
10314: PUSH
10315: FOR_IN
10316: IFFALSE 10393
// if BuildingStatus ( b ) = bs_build then
10318: LD_VAR 0 2
10322: PPUSH
10323: CALL_OW 461
10327: PUSH
10328: LD_INT 1
10330: EQUAL
10331: IFFALSE 10391
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10333: LD_VAR 0 4
10337: PPUSH
10338: LD_STRING h
10340: PUSH
10341: LD_VAR 0 2
10345: PPUSH
10346: CALL_OW 250
10350: PUSH
10351: LD_VAR 0 2
10355: PPUSH
10356: CALL_OW 251
10360: PUSH
10361: LD_VAR 0 2
10365: PUSH
10366: LD_INT 0
10368: PUSH
10369: LD_INT 0
10371: PUSH
10372: LD_INT 0
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: PPUSH
10387: CALL_OW 446
10391: GO 10315
10393: POP
10394: POP
// end ;
10395: LD_VAR 0 3
10399: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10400: LD_INT 0
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
10406: PPUSH
10407: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10408: LD_VAR 0 1
10412: NOT
10413: IFTRUE 10430
10415: PUSH
10416: LD_VAR 0 1
10420: PPUSH
10421: CALL_OW 263
10425: PUSH
10426: LD_INT 2
10428: NONEQUAL
10429: OR
10430: IFFALSE 10434
// exit ;
10432: GO 10750
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10434: LD_ADDR_VAR 0 6
10438: PUSH
10439: LD_INT 22
10441: PUSH
10442: LD_VAR 0 1
10446: PPUSH
10447: CALL_OW 255
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 2
10458: PUSH
10459: LD_INT 30
10461: PUSH
10462: LD_INT 36
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 34
10471: PUSH
10472: LD_INT 31
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: LIST
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 69
10492: ST_TO_ADDR
// if not tmp then
10493: LD_VAR 0 6
10497: NOT
10498: IFFALSE 10502
// exit ;
10500: GO 10750
// result := [ ] ;
10502: LD_ADDR_VAR 0 2
10506: PUSH
10507: EMPTY
10508: ST_TO_ADDR
// for i in tmp do
10509: LD_ADDR_VAR 0 3
10513: PUSH
10514: LD_VAR 0 6
10518: PUSH
10519: FOR_IN
10520: IFFALSE 10591
// begin t := UnitsInside ( i ) ;
10522: LD_ADDR_VAR 0 4
10526: PUSH
10527: LD_VAR 0 3
10531: PPUSH
10532: CALL_OW 313
10536: ST_TO_ADDR
// if t then
10537: LD_VAR 0 4
10541: IFFALSE 10589
// for j in t do
10543: LD_ADDR_VAR 0 7
10547: PUSH
10548: LD_VAR 0 4
10552: PUSH
10553: FOR_IN
10554: IFFALSE 10587
// result := Replace ( result , result + 1 , j ) ;
10556: LD_ADDR_VAR 0 2
10560: PUSH
10561: LD_VAR 0 2
10565: PPUSH
10566: LD_VAR 0 2
10570: PUSH
10571: LD_INT 1
10573: PLUS
10574: PPUSH
10575: LD_VAR 0 7
10579: PPUSH
10580: CALL_OW 1
10584: ST_TO_ADDR
10585: GO 10553
10587: POP
10588: POP
// end ;
10589: GO 10519
10591: POP
10592: POP
// if not result then
10593: LD_VAR 0 2
10597: NOT
10598: IFFALSE 10602
// exit ;
10600: GO 10750
// mech := result [ 1 ] ;
10602: LD_ADDR_VAR 0 5
10606: PUSH
10607: LD_VAR 0 2
10611: PUSH
10612: LD_INT 1
10614: ARRAY
10615: ST_TO_ADDR
// if result > 1 then
10616: LD_VAR 0 2
10620: PUSH
10621: LD_INT 1
10623: GREATER
10624: IFFALSE 10736
// begin for i = 2 to result do
10626: LD_ADDR_VAR 0 3
10630: PUSH
10631: DOUBLE
10632: LD_INT 2
10634: DEC
10635: ST_TO_ADDR
10636: LD_VAR 0 2
10640: PUSH
10641: FOR_TO
10642: IFFALSE 10734
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10644: LD_ADDR_VAR 0 4
10648: PUSH
10649: LD_VAR 0 2
10653: PUSH
10654: LD_VAR 0 3
10658: ARRAY
10659: PPUSH
10660: LD_INT 3
10662: PPUSH
10663: CALL_OW 259
10667: PUSH
10668: LD_VAR 0 2
10672: PUSH
10673: LD_VAR 0 3
10677: ARRAY
10678: PPUSH
10679: CALL_OW 432
10683: MINUS
10684: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10685: LD_VAR 0 4
10689: PUSH
10690: LD_VAR 0 5
10694: PPUSH
10695: LD_INT 3
10697: PPUSH
10698: CALL_OW 259
10702: PUSH
10703: LD_VAR 0 5
10707: PPUSH
10708: CALL_OW 432
10712: MINUS
10713: GREATEREQUAL
10714: IFFALSE 10732
// mech := result [ i ] ;
10716: LD_ADDR_VAR 0 5
10720: PUSH
10721: LD_VAR 0 2
10725: PUSH
10726: LD_VAR 0 3
10730: ARRAY
10731: ST_TO_ADDR
// end ;
10732: GO 10641
10734: POP
10735: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10736: LD_VAR 0 1
10740: PPUSH
10741: LD_VAR 0 5
10745: PPUSH
10746: CALL_OW 135
// end ;
10750: LD_VAR 0 2
10754: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10755: LD_INT 0
10757: PPUSH
10758: PPUSH
10759: PPUSH
10760: PPUSH
10761: PPUSH
10762: PPUSH
10763: PPUSH
10764: PPUSH
10765: PPUSH
10766: PPUSH
10767: PPUSH
10768: PPUSH
10769: PPUSH
// result := [ ] ;
10770: LD_ADDR_VAR 0 7
10774: PUSH
10775: EMPTY
10776: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10777: LD_VAR 0 1
10781: PPUSH
10782: CALL_OW 266
10786: PUSH
10787: LD_INT 0
10789: PUSH
10790: LD_INT 1
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: IN
10797: NOT
10798: IFFALSE 10802
// exit ;
10800: GO 12442
// if name then
10802: LD_VAR 0 3
10806: IFFALSE 10822
// SetBName ( base_dep , name ) ;
10808: LD_VAR 0 1
10812: PPUSH
10813: LD_VAR 0 3
10817: PPUSH
10818: CALL_OW 500
// base := GetBase ( base_dep ) ;
10822: LD_ADDR_VAR 0 15
10826: PUSH
10827: LD_VAR 0 1
10831: PPUSH
10832: CALL_OW 274
10836: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10837: LD_ADDR_VAR 0 16
10841: PUSH
10842: LD_VAR 0 1
10846: PPUSH
10847: CALL_OW 255
10851: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10852: LD_ADDR_VAR 0 17
10856: PUSH
10857: LD_VAR 0 1
10861: PPUSH
10862: CALL_OW 248
10866: ST_TO_ADDR
// if sources then
10867: LD_VAR 0 5
10871: IFFALSE 10918
// for i = 1 to 3 do
10873: LD_ADDR_VAR 0 8
10877: PUSH
10878: DOUBLE
10879: LD_INT 1
10881: DEC
10882: ST_TO_ADDR
10883: LD_INT 3
10885: PUSH
10886: FOR_TO
10887: IFFALSE 10916
// AddResourceType ( base , i , sources [ i ] ) ;
10889: LD_VAR 0 15
10893: PPUSH
10894: LD_VAR 0 8
10898: PPUSH
10899: LD_VAR 0 5
10903: PUSH
10904: LD_VAR 0 8
10908: ARRAY
10909: PPUSH
10910: CALL_OW 276
10914: GO 10886
10916: POP
10917: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10918: LD_ADDR_VAR 0 18
10922: PUSH
10923: LD_VAR 0 15
10927: PPUSH
10928: LD_VAR 0 2
10932: PPUSH
10933: LD_INT 1
10935: PPUSH
10936: CALL 10177 0 3
10940: ST_TO_ADDR
// InitHc ;
10941: CALL_OW 19
// InitUc ;
10945: CALL_OW 18
// uc_side := side ;
10949: LD_ADDR_OWVAR 20
10953: PUSH
10954: LD_VAR 0 16
10958: ST_TO_ADDR
// uc_nation := nation ;
10959: LD_ADDR_OWVAR 21
10963: PUSH
10964: LD_VAR 0 17
10968: ST_TO_ADDR
// if buildings then
10969: LD_VAR 0 18
10973: IFFALSE 12301
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10975: LD_ADDR_VAR 0 19
10979: PUSH
10980: LD_VAR 0 18
10984: PPUSH
10985: LD_INT 2
10987: PUSH
10988: LD_INT 30
10990: PUSH
10991: LD_INT 29
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 30
11000: PUSH
11001: LD_INT 30
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: PPUSH
11013: CALL_OW 72
11017: ST_TO_ADDR
// if tmp then
11018: LD_VAR 0 19
11022: IFFALSE 11070
// for i in tmp do
11024: LD_ADDR_VAR 0 8
11028: PUSH
11029: LD_VAR 0 19
11033: PUSH
11034: FOR_IN
11035: IFFALSE 11068
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11037: LD_VAR 0 8
11041: PPUSH
11042: CALL_OW 250
11046: PPUSH
11047: LD_VAR 0 8
11051: PPUSH
11052: CALL_OW 251
11056: PPUSH
11057: LD_VAR 0 16
11061: PPUSH
11062: CALL_OW 441
11066: GO 11034
11068: POP
11069: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11070: LD_VAR 0 18
11074: PPUSH
11075: LD_INT 2
11077: PUSH
11078: LD_INT 30
11080: PUSH
11081: LD_INT 32
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 30
11090: PUSH
11091: LD_INT 33
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: PPUSH
11103: CALL_OW 72
11107: IFFALSE 11195
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11109: LD_ADDR_VAR 0 8
11113: PUSH
11114: LD_VAR 0 18
11118: PPUSH
11119: LD_INT 2
11121: PUSH
11122: LD_INT 30
11124: PUSH
11125: LD_INT 32
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 30
11134: PUSH
11135: LD_INT 33
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: LIST
11146: PPUSH
11147: CALL_OW 72
11151: PUSH
11152: FOR_IN
11153: IFFALSE 11193
// begin if not GetBWeapon ( i ) then
11155: LD_VAR 0 8
11159: PPUSH
11160: CALL_OW 269
11164: NOT
11165: IFFALSE 11191
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11167: LD_VAR 0 8
11171: PPUSH
11172: LD_VAR 0 8
11176: PPUSH
11177: LD_VAR 0 2
11181: PPUSH
11182: CALL 12447 0 2
11186: PPUSH
11187: CALL_OW 431
// end ;
11191: GO 11152
11193: POP
11194: POP
// end ; for i = 1 to personel do
11195: LD_ADDR_VAR 0 8
11199: PUSH
11200: DOUBLE
11201: LD_INT 1
11203: DEC
11204: ST_TO_ADDR
11205: LD_VAR 0 6
11209: PUSH
11210: FOR_TO
11211: IFFALSE 12281
// begin if i > 4 then
11213: LD_VAR 0 8
11217: PUSH
11218: LD_INT 4
11220: GREATER
11221: IFFALSE 11225
// break ;
11223: GO 12281
// case i of 1 :
11225: LD_VAR 0 8
11229: PUSH
11230: LD_INT 1
11232: DOUBLE
11233: EQUAL
11234: IFTRUE 11238
11236: GO 11318
11238: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11239: LD_ADDR_VAR 0 12
11243: PUSH
11244: LD_VAR 0 18
11248: PPUSH
11249: LD_INT 22
11251: PUSH
11252: LD_VAR 0 16
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 58
11263: PUSH
11264: EMPTY
11265: LIST
11266: PUSH
11267: LD_INT 2
11269: PUSH
11270: LD_INT 30
11272: PUSH
11273: LD_INT 32
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 30
11282: PUSH
11283: LD_INT 4
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 30
11292: PUSH
11293: LD_INT 5
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: PPUSH
11311: CALL_OW 72
11315: ST_TO_ADDR
11316: GO 11540
11318: LD_INT 2
11320: DOUBLE
11321: EQUAL
11322: IFTRUE 11326
11324: GO 11388
11326: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11327: LD_ADDR_VAR 0 12
11331: PUSH
11332: LD_VAR 0 18
11336: PPUSH
11337: LD_INT 22
11339: PUSH
11340: LD_VAR 0 16
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 2
11351: PUSH
11352: LD_INT 30
11354: PUSH
11355: LD_INT 0
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 30
11364: PUSH
11365: LD_INT 1
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PPUSH
11381: CALL_OW 72
11385: ST_TO_ADDR
11386: GO 11540
11388: LD_INT 3
11390: DOUBLE
11391: EQUAL
11392: IFTRUE 11396
11394: GO 11458
11396: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11397: LD_ADDR_VAR 0 12
11401: PUSH
11402: LD_VAR 0 18
11406: PPUSH
11407: LD_INT 22
11409: PUSH
11410: LD_VAR 0 16
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: LD_INT 30
11424: PUSH
11425: LD_INT 2
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 30
11434: PUSH
11435: LD_INT 3
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PPUSH
11451: CALL_OW 72
11455: ST_TO_ADDR
11456: GO 11540
11458: LD_INT 4
11460: DOUBLE
11461: EQUAL
11462: IFTRUE 11466
11464: GO 11539
11466: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11467: LD_ADDR_VAR 0 12
11471: PUSH
11472: LD_VAR 0 18
11476: PPUSH
11477: LD_INT 22
11479: PUSH
11480: LD_VAR 0 16
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: LD_INT 30
11494: PUSH
11495: LD_INT 6
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 30
11504: PUSH
11505: LD_INT 7
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 30
11514: PUSH
11515: LD_INT 8
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PPUSH
11532: CALL_OW 72
11536: ST_TO_ADDR
11537: GO 11540
11539: POP
// if i = 1 then
11540: LD_VAR 0 8
11544: PUSH
11545: LD_INT 1
11547: EQUAL
11548: IFFALSE 11659
// begin tmp := [ ] ;
11550: LD_ADDR_VAR 0 19
11554: PUSH
11555: EMPTY
11556: ST_TO_ADDR
// for j in f do
11557: LD_ADDR_VAR 0 9
11561: PUSH
11562: LD_VAR 0 12
11566: PUSH
11567: FOR_IN
11568: IFFALSE 11641
// if GetBType ( j ) = b_bunker then
11570: LD_VAR 0 9
11574: PPUSH
11575: CALL_OW 266
11579: PUSH
11580: LD_INT 32
11582: EQUAL
11583: IFFALSE 11610
// tmp := Insert ( tmp , 1 , j ) else
11585: LD_ADDR_VAR 0 19
11589: PUSH
11590: LD_VAR 0 19
11594: PPUSH
11595: LD_INT 1
11597: PPUSH
11598: LD_VAR 0 9
11602: PPUSH
11603: CALL_OW 2
11607: ST_TO_ADDR
11608: GO 11639
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11610: LD_ADDR_VAR 0 19
11614: PUSH
11615: LD_VAR 0 19
11619: PPUSH
11620: LD_VAR 0 19
11624: PUSH
11625: LD_INT 1
11627: PLUS
11628: PPUSH
11629: LD_VAR 0 9
11633: PPUSH
11634: CALL_OW 2
11638: ST_TO_ADDR
11639: GO 11567
11641: POP
11642: POP
// if tmp then
11643: LD_VAR 0 19
11647: IFFALSE 11659
// f := tmp ;
11649: LD_ADDR_VAR 0 12
11653: PUSH
11654: LD_VAR 0 19
11658: ST_TO_ADDR
// end ; x := personel [ i ] ;
11659: LD_ADDR_VAR 0 13
11663: PUSH
11664: LD_VAR 0 6
11668: PUSH
11669: LD_VAR 0 8
11673: ARRAY
11674: ST_TO_ADDR
// if x = - 1 then
11675: LD_VAR 0 13
11679: PUSH
11680: LD_INT 1
11682: NEG
11683: EQUAL
11684: IFFALSE 11895
// begin for j in f do
11686: LD_ADDR_VAR 0 9
11690: PUSH
11691: LD_VAR 0 12
11695: PUSH
11696: FOR_IN
11697: IFFALSE 11891
// repeat InitHc ;
11699: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11703: LD_VAR 0 9
11707: PPUSH
11708: CALL_OW 266
11712: PUSH
11713: LD_INT 5
11715: EQUAL
11716: IFFALSE 11786
// begin if UnitsInside ( j ) < 3 then
11718: LD_VAR 0 9
11722: PPUSH
11723: CALL_OW 313
11727: PUSH
11728: LD_INT 3
11730: LESS
11731: IFFALSE 11767
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11733: LD_INT 0
11735: PPUSH
11736: LD_INT 5
11738: PUSH
11739: LD_INT 8
11741: PUSH
11742: LD_INT 9
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: PUSH
11750: LD_VAR 0 17
11754: ARRAY
11755: PPUSH
11756: LD_VAR 0 4
11760: PPUSH
11761: CALL_OW 380
11765: GO 11784
// PrepareHuman ( false , i , skill ) ;
11767: LD_INT 0
11769: PPUSH
11770: LD_VAR 0 8
11774: PPUSH
11775: LD_VAR 0 4
11779: PPUSH
11780: CALL_OW 380
// end else
11784: GO 11803
// PrepareHuman ( false , i , skill ) ;
11786: LD_INT 0
11788: PPUSH
11789: LD_VAR 0 8
11793: PPUSH
11794: LD_VAR 0 4
11798: PPUSH
11799: CALL_OW 380
// un := CreateHuman ;
11803: LD_ADDR_VAR 0 14
11807: PUSH
11808: CALL_OW 44
11812: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11813: LD_ADDR_VAR 0 7
11817: PUSH
11818: LD_VAR 0 7
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: LD_VAR 0 14
11830: PPUSH
11831: CALL_OW 2
11835: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11836: LD_VAR 0 14
11840: PPUSH
11841: LD_VAR 0 9
11845: PPUSH
11846: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11850: LD_VAR 0 9
11854: PPUSH
11855: CALL_OW 313
11859: PUSH
11860: LD_INT 6
11862: EQUAL
11863: IFTRUE 11887
11865: PUSH
11866: LD_VAR 0 9
11870: PPUSH
11871: CALL_OW 266
11875: PUSH
11876: LD_INT 32
11878: PUSH
11879: LD_INT 31
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: IN
11886: OR
11887: IFFALSE 11699
11889: GO 11696
11891: POP
11892: POP
// end else
11893: GO 12279
// for j = 1 to x do
11895: LD_ADDR_VAR 0 9
11899: PUSH
11900: DOUBLE
11901: LD_INT 1
11903: DEC
11904: ST_TO_ADDR
11905: LD_VAR 0 13
11909: PUSH
11910: FOR_TO
11911: IFFALSE 12277
// begin InitHc ;
11913: CALL_OW 19
// if not f then
11917: LD_VAR 0 12
11921: NOT
11922: IFFALSE 12011
// begin PrepareHuman ( false , i , skill ) ;
11924: LD_INT 0
11926: PPUSH
11927: LD_VAR 0 8
11931: PPUSH
11932: LD_VAR 0 4
11936: PPUSH
11937: CALL_OW 380
// un := CreateHuman ;
11941: LD_ADDR_VAR 0 14
11945: PUSH
11946: CALL_OW 44
11950: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11951: LD_ADDR_VAR 0 7
11955: PUSH
11956: LD_VAR 0 7
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: LD_VAR 0 14
11968: PPUSH
11969: CALL_OW 2
11973: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11974: LD_VAR 0 14
11978: PPUSH
11979: LD_VAR 0 1
11983: PPUSH
11984: CALL_OW 250
11988: PPUSH
11989: LD_VAR 0 1
11993: PPUSH
11994: CALL_OW 251
11998: PPUSH
11999: LD_INT 10
12001: PPUSH
12002: LD_INT 0
12004: PPUSH
12005: CALL_OW 50
// continue ;
12009: GO 11910
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12011: LD_VAR 0 12
12015: PUSH
12016: LD_INT 1
12018: ARRAY
12019: PPUSH
12020: CALL_OW 313
12024: IFFALSE 12052
12026: PUSH
12027: LD_VAR 0 12
12031: PUSH
12032: LD_INT 1
12034: ARRAY
12035: PPUSH
12036: CALL_OW 266
12040: PUSH
12041: LD_INT 32
12043: PUSH
12044: LD_INT 31
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: IN
12051: AND
12052: IFTRUE 12073
12054: PUSH
12055: LD_VAR 0 12
12059: PUSH
12060: LD_INT 1
12062: ARRAY
12063: PPUSH
12064: CALL_OW 313
12068: PUSH
12069: LD_INT 6
12071: EQUAL
12072: OR
12073: IFFALSE 12093
// f := Delete ( f , 1 ) ;
12075: LD_ADDR_VAR 0 12
12079: PUSH
12080: LD_VAR 0 12
12084: PPUSH
12085: LD_INT 1
12087: PPUSH
12088: CALL_OW 3
12092: ST_TO_ADDR
// if not f then
12093: LD_VAR 0 12
12097: NOT
12098: IFFALSE 12116
// begin x := x + 2 ;
12100: LD_ADDR_VAR 0 13
12104: PUSH
12105: LD_VAR 0 13
12109: PUSH
12110: LD_INT 2
12112: PLUS
12113: ST_TO_ADDR
// continue ;
12114: GO 11910
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12116: LD_VAR 0 12
12120: PUSH
12121: LD_INT 1
12123: ARRAY
12124: PPUSH
12125: CALL_OW 266
12129: PUSH
12130: LD_INT 5
12132: EQUAL
12133: IFFALSE 12207
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12135: LD_VAR 0 12
12139: PUSH
12140: LD_INT 1
12142: ARRAY
12143: PPUSH
12144: CALL_OW 313
12148: PUSH
12149: LD_INT 3
12151: LESS
12152: IFFALSE 12188
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12154: LD_INT 0
12156: PPUSH
12157: LD_INT 5
12159: PUSH
12160: LD_INT 8
12162: PUSH
12163: LD_INT 9
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_VAR 0 17
12175: ARRAY
12176: PPUSH
12177: LD_VAR 0 4
12181: PPUSH
12182: CALL_OW 380
12186: GO 12205
// PrepareHuman ( false , i , skill ) ;
12188: LD_INT 0
12190: PPUSH
12191: LD_VAR 0 8
12195: PPUSH
12196: LD_VAR 0 4
12200: PPUSH
12201: CALL_OW 380
// end else
12205: GO 12224
// PrepareHuman ( false , i , skill ) ;
12207: LD_INT 0
12209: PPUSH
12210: LD_VAR 0 8
12214: PPUSH
12215: LD_VAR 0 4
12219: PPUSH
12220: CALL_OW 380
// un := CreateHuman ;
12224: LD_ADDR_VAR 0 14
12228: PUSH
12229: CALL_OW 44
12233: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12234: LD_ADDR_VAR 0 7
12238: PUSH
12239: LD_VAR 0 7
12243: PPUSH
12244: LD_INT 1
12246: PPUSH
12247: LD_VAR 0 14
12251: PPUSH
12252: CALL_OW 2
12256: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12257: LD_VAR 0 14
12261: PPUSH
12262: LD_VAR 0 12
12266: PUSH
12267: LD_INT 1
12269: ARRAY
12270: PPUSH
12271: CALL_OW 52
// end ;
12275: GO 11910
12277: POP
12278: POP
// end ;
12279: GO 11210
12281: POP
12282: POP
// result := result ^ buildings ;
12283: LD_ADDR_VAR 0 7
12287: PUSH
12288: LD_VAR 0 7
12292: PUSH
12293: LD_VAR 0 18
12297: ADD
12298: ST_TO_ADDR
// end else
12299: GO 12442
// begin for i = 1 to personel do
12301: LD_ADDR_VAR 0 8
12305: PUSH
12306: DOUBLE
12307: LD_INT 1
12309: DEC
12310: ST_TO_ADDR
12311: LD_VAR 0 6
12315: PUSH
12316: FOR_TO
12317: IFFALSE 12440
// begin if i > 4 then
12319: LD_VAR 0 8
12323: PUSH
12324: LD_INT 4
12326: GREATER
12327: IFFALSE 12331
// break ;
12329: GO 12440
// x := personel [ i ] ;
12331: LD_ADDR_VAR 0 13
12335: PUSH
12336: LD_VAR 0 6
12340: PUSH
12341: LD_VAR 0 8
12345: ARRAY
12346: ST_TO_ADDR
// if x = - 1 then
12347: LD_VAR 0 13
12351: PUSH
12352: LD_INT 1
12354: NEG
12355: EQUAL
12356: IFFALSE 12360
// continue ;
12358: GO 12316
// PrepareHuman ( false , i , skill ) ;
12360: LD_INT 0
12362: PPUSH
12363: LD_VAR 0 8
12367: PPUSH
12368: LD_VAR 0 4
12372: PPUSH
12373: CALL_OW 380
// un := CreateHuman ;
12377: LD_ADDR_VAR 0 14
12381: PUSH
12382: CALL_OW 44
12386: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12387: LD_VAR 0 14
12391: PPUSH
12392: LD_VAR 0 1
12396: PPUSH
12397: CALL_OW 250
12401: PPUSH
12402: LD_VAR 0 1
12406: PPUSH
12407: CALL_OW 251
12411: PPUSH
12412: LD_INT 10
12414: PPUSH
12415: LD_INT 0
12417: PPUSH
12418: CALL_OW 50
// result := result ^ un ;
12422: LD_ADDR_VAR 0 7
12426: PUSH
12427: LD_VAR 0 7
12431: PUSH
12432: LD_VAR 0 14
12436: ADD
12437: ST_TO_ADDR
// end ;
12438: GO 12316
12440: POP
12441: POP
// end ; end ;
12442: LD_VAR 0 7
12446: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12447: LD_INT 0
12449: PPUSH
12450: PPUSH
12451: PPUSH
12452: PPUSH
12453: PPUSH
12454: PPUSH
12455: PPUSH
12456: PPUSH
12457: PPUSH
12458: PPUSH
12459: PPUSH
12460: PPUSH
12461: PPUSH
12462: PPUSH
12463: PPUSH
12464: PPUSH
// result := false ;
12465: LD_ADDR_VAR 0 3
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12473: LD_VAR 0 1
12477: NOT
12478: IFTRUE 12503
12480: PUSH
12481: LD_VAR 0 1
12485: PPUSH
12486: CALL_OW 266
12490: PUSH
12491: LD_INT 32
12493: PUSH
12494: LD_INT 33
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: IN
12501: NOT
12502: OR
12503: IFFALSE 12507
// exit ;
12505: GO 13642
// nat := GetNation ( tower ) ;
12507: LD_ADDR_VAR 0 12
12511: PUSH
12512: LD_VAR 0 1
12516: PPUSH
12517: CALL_OW 248
12521: ST_TO_ADDR
// side := GetSide ( tower ) ;
12522: LD_ADDR_VAR 0 16
12526: PUSH
12527: LD_VAR 0 1
12531: PPUSH
12532: CALL_OW 255
12536: ST_TO_ADDR
// x := GetX ( tower ) ;
12537: LD_ADDR_VAR 0 10
12541: PUSH
12542: LD_VAR 0 1
12546: PPUSH
12547: CALL_OW 250
12551: ST_TO_ADDR
// y := GetY ( tower ) ;
12552: LD_ADDR_VAR 0 11
12556: PUSH
12557: LD_VAR 0 1
12561: PPUSH
12562: CALL_OW 251
12566: ST_TO_ADDR
// if not x or not y then
12567: LD_VAR 0 10
12571: NOT
12572: IFTRUE 12581
12574: PUSH
12575: LD_VAR 0 11
12579: NOT
12580: OR
12581: IFFALSE 12585
// exit ;
12583: GO 13642
// weapon := 0 ;
12585: LD_ADDR_VAR 0 18
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// fac_list := [ ] ;
12593: LD_ADDR_VAR 0 17
12597: PUSH
12598: EMPTY
12599: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12600: LD_ADDR_VAR 0 6
12604: PUSH
12605: LD_VAR 0 1
12609: PPUSH
12610: CALL_OW 274
12614: PPUSH
12615: LD_VAR 0 2
12619: PPUSH
12620: LD_INT 0
12622: PPUSH
12623: CALL 10177 0 3
12627: PPUSH
12628: LD_INT 30
12630: PUSH
12631: LD_INT 3
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PPUSH
12638: CALL_OW 72
12642: ST_TO_ADDR
// if not factories then
12643: LD_VAR 0 6
12647: NOT
12648: IFFALSE 12652
// exit ;
12650: GO 13642
// for i in factories do
12652: LD_ADDR_VAR 0 8
12656: PUSH
12657: LD_VAR 0 6
12661: PUSH
12662: FOR_IN
12663: IFFALSE 12688
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12665: LD_ADDR_VAR 0 17
12669: PUSH
12670: LD_VAR 0 17
12674: PUSH
12675: LD_VAR 0 8
12679: PPUSH
12680: CALL_OW 478
12684: UNION
12685: ST_TO_ADDR
12686: GO 12662
12688: POP
12689: POP
// if not fac_list then
12690: LD_VAR 0 17
12694: NOT
12695: IFFALSE 12699
// exit ;
12697: GO 13642
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12699: LD_ADDR_VAR 0 5
12703: PUSH
12704: LD_INT 4
12706: PUSH
12707: LD_INT 5
12709: PUSH
12710: LD_INT 9
12712: PUSH
12713: LD_INT 10
12715: PUSH
12716: LD_INT 6
12718: PUSH
12719: LD_INT 7
12721: PUSH
12722: LD_INT 11
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 27
12736: PUSH
12737: LD_INT 28
12739: PUSH
12740: LD_INT 26
12742: PUSH
12743: LD_INT 30
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: LD_INT 43
12754: PUSH
12755: LD_INT 44
12757: PUSH
12758: LD_INT 46
12760: PUSH
12761: LD_INT 45
12763: PUSH
12764: LD_INT 47
12766: PUSH
12767: LD_INT 49
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: LIST
12782: PUSH
12783: LD_VAR 0 12
12787: ARRAY
12788: ST_TO_ADDR
// list := list isect fac_list ;
12789: LD_ADDR_VAR 0 5
12793: PUSH
12794: LD_VAR 0 5
12798: PUSH
12799: LD_VAR 0 17
12803: ISECT
12804: ST_TO_ADDR
// if not list then
12805: LD_VAR 0 5
12809: NOT
12810: IFFALSE 12814
// exit ;
12812: GO 13642
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12814: LD_VAR 0 12
12818: PUSH
12819: LD_INT 3
12821: EQUAL
12822: IFFALSE 12834
12824: PUSH
12825: LD_INT 49
12827: PUSH
12828: LD_VAR 0 5
12832: IN
12833: AND
12834: IFFALSE 12854
12836: PUSH
12837: LD_INT 31
12839: PPUSH
12840: LD_VAR 0 16
12844: PPUSH
12845: CALL_OW 321
12849: PUSH
12850: LD_INT 2
12852: EQUAL
12853: AND
12854: IFFALSE 12914
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12856: LD_INT 22
12858: PUSH
12859: LD_VAR 0 16
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: LD_INT 35
12870: PUSH
12871: LD_INT 49
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PUSH
12878: LD_INT 91
12880: PUSH
12881: LD_VAR 0 1
12885: PUSH
12886: LD_INT 10
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: LIST
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 69
12903: NOT
12904: IFFALSE 12914
// weapon := ru_time_lapser ;
12906: LD_ADDR_VAR 0 18
12910: PUSH
12911: LD_INT 49
12913: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12914: LD_VAR 0 12
12918: PUSH
12919: LD_INT 1
12921: PUSH
12922: LD_INT 2
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: IN
12929: IFFALSE 12953
12931: PUSH
12932: LD_INT 11
12934: PUSH
12935: LD_VAR 0 5
12939: IN
12940: IFTRUE 12952
12942: PUSH
12943: LD_INT 30
12945: PUSH
12946: LD_VAR 0 5
12950: IN
12951: OR
12952: AND
12953: IFFALSE 12973
12955: PUSH
12956: LD_INT 6
12958: PPUSH
12959: LD_VAR 0 16
12963: PPUSH
12964: CALL_OW 321
12968: PUSH
12969: LD_INT 2
12971: EQUAL
12972: AND
12973: IFFALSE 13140
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12975: LD_INT 22
12977: PUSH
12978: LD_VAR 0 16
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 2
12989: PUSH
12990: LD_INT 35
12992: PUSH
12993: LD_INT 11
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 35
13002: PUSH
13003: LD_INT 30
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 91
13017: PUSH
13018: LD_VAR 0 1
13022: PUSH
13023: LD_INT 18
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: LIST
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: PPUSH
13036: CALL_OW 69
13040: NOT
13041: IFFALSE 13117
13043: PUSH
13044: LD_INT 22
13046: PUSH
13047: LD_VAR 0 16
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 2
13058: PUSH
13059: LD_INT 30
13061: PUSH
13062: LD_INT 32
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 33
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: PUSH
13084: LD_INT 91
13086: PUSH
13087: LD_VAR 0 1
13091: PUSH
13092: LD_INT 12
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: PPUSH
13108: CALL_OW 69
13112: PUSH
13113: LD_INT 2
13115: GREATER
13116: AND
13117: IFFALSE 13140
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13119: LD_ADDR_VAR 0 18
13123: PUSH
13124: LD_INT 11
13126: PUSH
13127: LD_INT 30
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: LD_VAR 0 12
13138: ARRAY
13139: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13140: LD_VAR 0 18
13144: NOT
13145: IFFALSE 13165
13147: PUSH
13148: LD_INT 40
13150: PPUSH
13151: LD_VAR 0 16
13155: PPUSH
13156: CALL_OW 321
13160: PUSH
13161: LD_INT 2
13163: EQUAL
13164: AND
13165: IFFALSE 13201
13167: PUSH
13168: LD_INT 7
13170: PUSH
13171: LD_VAR 0 5
13175: IN
13176: IFTRUE 13188
13178: PUSH
13179: LD_INT 28
13181: PUSH
13182: LD_VAR 0 5
13186: IN
13187: OR
13188: IFTRUE 13200
13190: PUSH
13191: LD_INT 45
13193: PUSH
13194: LD_VAR 0 5
13198: IN
13199: OR
13200: AND
13201: IFFALSE 13455
// begin hex := GetHexInfo ( x , y ) ;
13203: LD_ADDR_VAR 0 4
13207: PUSH
13208: LD_VAR 0 10
13212: PPUSH
13213: LD_VAR 0 11
13217: PPUSH
13218: CALL_OW 546
13222: ST_TO_ADDR
// if hex [ 1 ] then
13223: LD_VAR 0 4
13227: PUSH
13228: LD_INT 1
13230: ARRAY
13231: IFFALSE 13235
// exit ;
13233: GO 13642
// height := hex [ 2 ] ;
13235: LD_ADDR_VAR 0 15
13239: PUSH
13240: LD_VAR 0 4
13244: PUSH
13245: LD_INT 2
13247: ARRAY
13248: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13249: LD_ADDR_VAR 0 14
13253: PUSH
13254: LD_INT 0
13256: PUSH
13257: LD_INT 2
13259: PUSH
13260: LD_INT 3
13262: PUSH
13263: LD_INT 5
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: ST_TO_ADDR
// for i in tmp do
13272: LD_ADDR_VAR 0 8
13276: PUSH
13277: LD_VAR 0 14
13281: PUSH
13282: FOR_IN
13283: IFFALSE 13453
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13285: LD_ADDR_VAR 0 9
13289: PUSH
13290: LD_VAR 0 10
13294: PPUSH
13295: LD_VAR 0 8
13299: PPUSH
13300: LD_INT 5
13302: PPUSH
13303: CALL_OW 272
13307: PUSH
13308: LD_VAR 0 11
13312: PPUSH
13313: LD_VAR 0 8
13317: PPUSH
13318: LD_INT 5
13320: PPUSH
13321: CALL_OW 273
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13330: LD_VAR 0 9
13334: PUSH
13335: LD_INT 1
13337: ARRAY
13338: PPUSH
13339: LD_VAR 0 9
13343: PUSH
13344: LD_INT 2
13346: ARRAY
13347: PPUSH
13348: CALL_OW 488
13352: IFFALSE 13451
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13354: LD_ADDR_VAR 0 4
13358: PUSH
13359: LD_VAR 0 9
13363: PUSH
13364: LD_INT 1
13366: ARRAY
13367: PPUSH
13368: LD_VAR 0 9
13372: PUSH
13373: LD_INT 2
13375: ARRAY
13376: PPUSH
13377: CALL_OW 546
13381: ST_TO_ADDR
// if hex [ 1 ] then
13382: LD_VAR 0 4
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: IFFALSE 13394
// continue ;
13392: GO 13282
// h := hex [ 2 ] ;
13394: LD_ADDR_VAR 0 13
13398: PUSH
13399: LD_VAR 0 4
13403: PUSH
13404: LD_INT 2
13406: ARRAY
13407: ST_TO_ADDR
// if h + 7 < height then
13408: LD_VAR 0 13
13412: PUSH
13413: LD_INT 7
13415: PLUS
13416: PUSH
13417: LD_VAR 0 15
13421: LESS
13422: IFFALSE 13451
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13424: LD_ADDR_VAR 0 18
13428: PUSH
13429: LD_INT 7
13431: PUSH
13432: LD_INT 28
13434: PUSH
13435: LD_INT 45
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: PUSH
13443: LD_VAR 0 12
13447: ARRAY
13448: ST_TO_ADDR
// break ;
13449: GO 13453
// end ; end ; end ;
13451: GO 13282
13453: POP
13454: POP
// end ; if not weapon then
13455: LD_VAR 0 18
13459: NOT
13460: IFFALSE 13520
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13462: LD_ADDR_VAR 0 5
13466: PUSH
13467: LD_VAR 0 5
13471: PUSH
13472: LD_INT 11
13474: PUSH
13475: LD_INT 30
13477: PUSH
13478: LD_INT 49
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: DIFF
13486: ST_TO_ADDR
// if not list then
13487: LD_VAR 0 5
13491: NOT
13492: IFFALSE 13496
// exit ;
13494: GO 13642
// weapon := list [ rand ( 1 , list ) ] ;
13496: LD_ADDR_VAR 0 18
13500: PUSH
13501: LD_VAR 0 5
13505: PUSH
13506: LD_INT 1
13508: PPUSH
13509: LD_VAR 0 5
13513: PPUSH
13514: CALL_OW 12
13518: ARRAY
13519: ST_TO_ADDR
// end ; if weapon then
13520: LD_VAR 0 18
13524: IFFALSE 13642
// begin tmp := CostOfWeapon ( weapon ) ;
13526: LD_ADDR_VAR 0 14
13530: PUSH
13531: LD_VAR 0 18
13535: PPUSH
13536: CALL_OW 451
13540: ST_TO_ADDR
// j := GetBase ( tower ) ;
13541: LD_ADDR_VAR 0 9
13545: PUSH
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 274
13555: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13556: LD_VAR 0 9
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: CALL_OW 275
13568: PUSH
13569: LD_VAR 0 14
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: GREATEREQUAL
13578: IFFALSE 13604
13580: PUSH
13581: LD_VAR 0 9
13585: PPUSH
13586: LD_INT 2
13588: PPUSH
13589: CALL_OW 275
13593: PUSH
13594: LD_VAR 0 14
13598: PUSH
13599: LD_INT 2
13601: ARRAY
13602: GREATEREQUAL
13603: AND
13604: IFFALSE 13630
13606: PUSH
13607: LD_VAR 0 9
13611: PPUSH
13612: LD_INT 3
13614: PPUSH
13615: CALL_OW 275
13619: PUSH
13620: LD_VAR 0 14
13624: PUSH
13625: LD_INT 3
13627: ARRAY
13628: GREATEREQUAL
13629: AND
13630: IFFALSE 13642
// result := weapon ;
13632: LD_ADDR_VAR 0 3
13636: PUSH
13637: LD_VAR 0 18
13641: ST_TO_ADDR
// end ; end ;
13642: LD_VAR 0 3
13646: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13647: LD_INT 0
13649: PPUSH
13650: PPUSH
// result := true ;
13651: LD_ADDR_VAR 0 3
13655: PUSH
13656: LD_INT 1
13658: ST_TO_ADDR
// if array1 = array2 then
13659: LD_VAR 0 1
13663: PUSH
13664: LD_VAR 0 2
13668: EQUAL
13669: IFFALSE 13729
// begin for i = 1 to array1 do
13671: LD_ADDR_VAR 0 4
13675: PUSH
13676: DOUBLE
13677: LD_INT 1
13679: DEC
13680: ST_TO_ADDR
13681: LD_VAR 0 1
13685: PUSH
13686: FOR_TO
13687: IFFALSE 13725
// if array1 [ i ] <> array2 [ i ] then
13689: LD_VAR 0 1
13693: PUSH
13694: LD_VAR 0 4
13698: ARRAY
13699: PUSH
13700: LD_VAR 0 2
13704: PUSH
13705: LD_VAR 0 4
13709: ARRAY
13710: NONEQUAL
13711: IFFALSE 13723
// begin result := false ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_INT 0
13720: ST_TO_ADDR
// break ;
13721: GO 13725
// end ;
13723: GO 13686
13725: POP
13726: POP
// end else
13727: GO 13737
// result := false ;
13729: LD_ADDR_VAR 0 3
13733: PUSH
13734: LD_INT 0
13736: ST_TO_ADDR
// end ;
13737: LD_VAR 0 3
13741: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13742: LD_INT 0
13744: PPUSH
13745: PPUSH
// if not array1 or not array2 then
13746: LD_VAR 0 1
13750: NOT
13751: IFTRUE 13760
13753: PUSH
13754: LD_VAR 0 2
13758: NOT
13759: OR
13760: IFFALSE 13764
// exit ;
13762: GO 13828
// result := true ;
13764: LD_ADDR_VAR 0 3
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// for i = 1 to array1 do
13772: LD_ADDR_VAR 0 4
13776: PUSH
13777: DOUBLE
13778: LD_INT 1
13780: DEC
13781: ST_TO_ADDR
13782: LD_VAR 0 1
13786: PUSH
13787: FOR_TO
13788: IFFALSE 13826
// if array1 [ i ] <> array2 [ i ] then
13790: LD_VAR 0 1
13794: PUSH
13795: LD_VAR 0 4
13799: ARRAY
13800: PUSH
13801: LD_VAR 0 2
13805: PUSH
13806: LD_VAR 0 4
13810: ARRAY
13811: NONEQUAL
13812: IFFALSE 13824
// begin result := false ;
13814: LD_ADDR_VAR 0 3
13818: PUSH
13819: LD_INT 0
13821: ST_TO_ADDR
// break ;
13822: GO 13826
// end ;
13824: GO 13787
13826: POP
13827: POP
// end ;
13828: LD_VAR 0 3
13832: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13833: LD_INT 0
13835: PPUSH
13836: PPUSH
13837: PPUSH
// pom := GetBase ( fac ) ;
13838: LD_ADDR_VAR 0 5
13842: PUSH
13843: LD_VAR 0 1
13847: PPUSH
13848: CALL_OW 274
13852: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13853: LD_ADDR_VAR 0 4
13857: PUSH
13858: LD_VAR 0 2
13862: PUSH
13863: LD_INT 1
13865: ARRAY
13866: PPUSH
13867: LD_VAR 0 2
13871: PUSH
13872: LD_INT 2
13874: ARRAY
13875: PPUSH
13876: LD_VAR 0 2
13880: PUSH
13881: LD_INT 3
13883: ARRAY
13884: PPUSH
13885: LD_VAR 0 2
13889: PUSH
13890: LD_INT 4
13892: ARRAY
13893: PPUSH
13894: CALL_OW 449
13898: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13899: LD_ADDR_VAR 0 3
13903: PUSH
13904: LD_VAR 0 5
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: CALL_OW 275
13916: PUSH
13917: LD_VAR 0 4
13921: PUSH
13922: LD_INT 1
13924: ARRAY
13925: GREATEREQUAL
13926: IFFALSE 13952
13928: PUSH
13929: LD_VAR 0 5
13933: PPUSH
13934: LD_INT 2
13936: PPUSH
13937: CALL_OW 275
13941: PUSH
13942: LD_VAR 0 4
13946: PUSH
13947: LD_INT 2
13949: ARRAY
13950: GREATEREQUAL
13951: AND
13952: IFFALSE 13978
13954: PUSH
13955: LD_VAR 0 5
13959: PPUSH
13960: LD_INT 3
13962: PPUSH
13963: CALL_OW 275
13967: PUSH
13968: LD_VAR 0 4
13972: PUSH
13973: LD_INT 3
13975: ARRAY
13976: GREATEREQUAL
13977: AND
13978: ST_TO_ADDR
// end ;
13979: LD_VAR 0 3
13983: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13984: LD_INT 0
13986: PPUSH
13987: PPUSH
13988: PPUSH
13989: PPUSH
// pom := GetBase ( building ) ;
13990: LD_ADDR_VAR 0 3
13994: PUSH
13995: LD_VAR 0 1
13999: PPUSH
14000: CALL_OW 274
14004: ST_TO_ADDR
// if not pom then
14005: LD_VAR 0 3
14009: NOT
14010: IFFALSE 14014
// exit ;
14012: GO 14188
// btype := GetBType ( building ) ;
14014: LD_ADDR_VAR 0 5
14018: PUSH
14019: LD_VAR 0 1
14023: PPUSH
14024: CALL_OW 266
14028: ST_TO_ADDR
// if btype = b_armoury then
14029: LD_VAR 0 5
14033: PUSH
14034: LD_INT 4
14036: EQUAL
14037: IFFALSE 14047
// btype := b_barracks ;
14039: LD_ADDR_VAR 0 5
14043: PUSH
14044: LD_INT 5
14046: ST_TO_ADDR
// if btype = b_depot then
14047: LD_VAR 0 5
14051: PUSH
14052: LD_INT 0
14054: EQUAL
14055: IFFALSE 14065
// btype := b_warehouse ;
14057: LD_ADDR_VAR 0 5
14061: PUSH
14062: LD_INT 1
14064: ST_TO_ADDR
// if btype = b_workshop then
14065: LD_VAR 0 5
14069: PUSH
14070: LD_INT 2
14072: EQUAL
14073: IFFALSE 14083
// btype := b_factory ;
14075: LD_ADDR_VAR 0 5
14079: PUSH
14080: LD_INT 3
14082: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14083: LD_ADDR_VAR 0 4
14087: PUSH
14088: LD_VAR 0 5
14092: PPUSH
14093: LD_VAR 0 1
14097: PPUSH
14098: CALL_OW 248
14102: PPUSH
14103: CALL_OW 450
14107: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14108: LD_ADDR_VAR 0 2
14112: PUSH
14113: LD_VAR 0 3
14117: PPUSH
14118: LD_INT 1
14120: PPUSH
14121: CALL_OW 275
14125: PUSH
14126: LD_VAR 0 4
14130: PUSH
14131: LD_INT 1
14133: ARRAY
14134: GREATEREQUAL
14135: IFFALSE 14161
14137: PUSH
14138: LD_VAR 0 3
14142: PPUSH
14143: LD_INT 2
14145: PPUSH
14146: CALL_OW 275
14150: PUSH
14151: LD_VAR 0 4
14155: PUSH
14156: LD_INT 2
14158: ARRAY
14159: GREATEREQUAL
14160: AND
14161: IFFALSE 14187
14163: PUSH
14164: LD_VAR 0 3
14168: PPUSH
14169: LD_INT 3
14171: PPUSH
14172: CALL_OW 275
14176: PUSH
14177: LD_VAR 0 4
14181: PUSH
14182: LD_INT 3
14184: ARRAY
14185: GREATEREQUAL
14186: AND
14187: ST_TO_ADDR
// end ;
14188: LD_VAR 0 2
14192: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14193: LD_INT 0
14195: PPUSH
14196: PPUSH
14197: PPUSH
// pom := GetBase ( building ) ;
14198: LD_ADDR_VAR 0 4
14202: PUSH
14203: LD_VAR 0 1
14207: PPUSH
14208: CALL_OW 274
14212: ST_TO_ADDR
// if not pom then
14213: LD_VAR 0 4
14217: NOT
14218: IFFALSE 14222
// exit ;
14220: GO 14327
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14222: LD_ADDR_VAR 0 5
14226: PUSH
14227: LD_VAR 0 2
14231: PPUSH
14232: LD_VAR 0 1
14236: PPUSH
14237: CALL_OW 248
14241: PPUSH
14242: CALL_OW 450
14246: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14247: LD_ADDR_VAR 0 3
14251: PUSH
14252: LD_VAR 0 4
14256: PPUSH
14257: LD_INT 1
14259: PPUSH
14260: CALL_OW 275
14264: PUSH
14265: LD_VAR 0 5
14269: PUSH
14270: LD_INT 1
14272: ARRAY
14273: GREATEREQUAL
14274: IFFALSE 14300
14276: PUSH
14277: LD_VAR 0 4
14281: PPUSH
14282: LD_INT 2
14284: PPUSH
14285: CALL_OW 275
14289: PUSH
14290: LD_VAR 0 5
14294: PUSH
14295: LD_INT 2
14297: ARRAY
14298: GREATEREQUAL
14299: AND
14300: IFFALSE 14326
14302: PUSH
14303: LD_VAR 0 4
14307: PPUSH
14308: LD_INT 3
14310: PPUSH
14311: CALL_OW 275
14315: PUSH
14316: LD_VAR 0 5
14320: PUSH
14321: LD_INT 3
14323: ARRAY
14324: GREATEREQUAL
14325: AND
14326: ST_TO_ADDR
// end ;
14327: LD_VAR 0 3
14331: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14332: LD_INT 0
14334: PPUSH
14335: PPUSH
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
14343: PPUSH
14344: PPUSH
// result := false ;
14345: LD_ADDR_VAR 0 8
14349: PUSH
14350: LD_INT 0
14352: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14353: LD_VAR 0 5
14357: NOT
14358: IFTRUE 14367
14360: PUSH
14361: LD_VAR 0 1
14365: NOT
14366: OR
14367: IFTRUE 14376
14369: PUSH
14370: LD_VAR 0 2
14374: NOT
14375: OR
14376: IFTRUE 14385
14378: PUSH
14379: LD_VAR 0 3
14383: NOT
14384: OR
14385: IFFALSE 14389
// exit ;
14387: GO 15215
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14389: LD_ADDR_VAR 0 14
14393: PUSH
14394: LD_VAR 0 1
14398: PPUSH
14399: LD_VAR 0 2
14403: PPUSH
14404: LD_VAR 0 3
14408: PPUSH
14409: LD_VAR 0 4
14413: PPUSH
14414: LD_VAR 0 5
14418: PUSH
14419: LD_INT 1
14421: ARRAY
14422: PPUSH
14423: CALL_OW 248
14427: PPUSH
14428: LD_INT 0
14430: PPUSH
14431: CALL 16496 0 6
14435: ST_TO_ADDR
// if not hexes then
14436: LD_VAR 0 14
14440: NOT
14441: IFFALSE 14445
// exit ;
14443: GO 15215
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14445: LD_ADDR_VAR 0 17
14449: PUSH
14450: LD_VAR 0 5
14454: PPUSH
14455: LD_INT 22
14457: PUSH
14458: LD_VAR 0 13
14462: PPUSH
14463: CALL_OW 255
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 2
14474: PUSH
14475: LD_INT 30
14477: PUSH
14478: LD_INT 0
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 30
14487: PUSH
14488: LD_INT 1
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PPUSH
14504: CALL_OW 72
14508: ST_TO_ADDR
// for i = 1 to hexes do
14509: LD_ADDR_VAR 0 9
14513: PUSH
14514: DOUBLE
14515: LD_INT 1
14517: DEC
14518: ST_TO_ADDR
14519: LD_VAR 0 14
14523: PUSH
14524: FOR_TO
14525: IFFALSE 15213
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14527: LD_ADDR_VAR 0 13
14531: PUSH
14532: LD_VAR 0 14
14536: PUSH
14537: LD_VAR 0 9
14541: ARRAY
14542: PUSH
14543: LD_INT 1
14545: ARRAY
14546: PPUSH
14547: LD_VAR 0 14
14551: PUSH
14552: LD_VAR 0 9
14556: ARRAY
14557: PUSH
14558: LD_INT 2
14560: ARRAY
14561: PPUSH
14562: CALL_OW 428
14566: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14567: LD_VAR 0 14
14571: PUSH
14572: LD_VAR 0 9
14576: ARRAY
14577: PUSH
14578: LD_INT 1
14580: ARRAY
14581: PPUSH
14582: LD_VAR 0 14
14586: PUSH
14587: LD_VAR 0 9
14591: ARRAY
14592: PUSH
14593: LD_INT 2
14595: ARRAY
14596: PPUSH
14597: CALL_OW 351
14601: IFTRUE 14640
14603: PUSH
14604: LD_VAR 0 14
14608: PUSH
14609: LD_VAR 0 9
14613: ARRAY
14614: PUSH
14615: LD_INT 1
14617: ARRAY
14618: PPUSH
14619: LD_VAR 0 14
14623: PUSH
14624: LD_VAR 0 9
14628: ARRAY
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: PPUSH
14634: CALL_OW 488
14638: NOT
14639: OR
14640: IFTRUE 14657
14642: PUSH
14643: LD_VAR 0 13
14647: PPUSH
14648: CALL_OW 247
14652: PUSH
14653: LD_INT 3
14655: EQUAL
14656: OR
14657: IFFALSE 14663
// exit ;
14659: POP
14660: POP
14661: GO 15215
// if not tmp then
14663: LD_VAR 0 13
14667: NOT
14668: IFFALSE 14672
// continue ;
14670: GO 14524
// result := true ;
14672: LD_ADDR_VAR 0 8
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14680: LD_VAR 0 6
14684: IFFALSE 14701
14686: PUSH
14687: LD_VAR 0 13
14691: PPUSH
14692: CALL_OW 247
14696: PUSH
14697: LD_INT 2
14699: EQUAL
14700: AND
14701: IFFALSE 14718
14703: PUSH
14704: LD_VAR 0 13
14708: PPUSH
14709: CALL_OW 263
14713: PUSH
14714: LD_INT 1
14716: EQUAL
14717: AND
14718: IFFALSE 14882
// begin if IsDrivenBy ( tmp ) then
14720: LD_VAR 0 13
14724: PPUSH
14725: CALL_OW 311
14729: IFFALSE 14733
// continue ;
14731: GO 14524
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14733: LD_VAR 0 6
14737: PPUSH
14738: LD_INT 3
14740: PUSH
14741: LD_INT 60
14743: PUSH
14744: EMPTY
14745: LIST
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 3
14753: PUSH
14754: LD_INT 55
14756: PUSH
14757: EMPTY
14758: LIST
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PPUSH
14768: CALL_OW 72
14772: IFFALSE 14880
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14774: LD_ADDR_VAR 0 18
14778: PUSH
14779: LD_VAR 0 6
14783: PPUSH
14784: LD_INT 3
14786: PUSH
14787: LD_INT 60
14789: PUSH
14790: EMPTY
14791: LIST
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 3
14799: PUSH
14800: LD_INT 55
14802: PUSH
14803: EMPTY
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PPUSH
14814: CALL_OW 72
14818: PUSH
14819: LD_INT 1
14821: ARRAY
14822: ST_TO_ADDR
// if IsInUnit ( driver ) then
14823: LD_VAR 0 18
14827: PPUSH
14828: CALL_OW 310
14832: IFFALSE 14843
// ComExit ( driver ) ;
14834: LD_VAR 0 18
14838: PPUSH
14839: CALL 40496 0 1
// AddComEnterUnit ( driver , tmp ) ;
14843: LD_VAR 0 18
14847: PPUSH
14848: LD_VAR 0 13
14852: PPUSH
14853: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14857: LD_VAR 0 18
14861: PPUSH
14862: LD_VAR 0 7
14866: PPUSH
14867: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14871: LD_VAR 0 18
14875: PPUSH
14876: CALL_OW 181
// end ; continue ;
14880: GO 14524
// end ; if not cleaners or not tmp in cleaners then
14882: LD_VAR 0 6
14886: NOT
14887: IFTRUE 14902
14889: PUSH
14890: LD_VAR 0 13
14894: PUSH
14895: LD_VAR 0 6
14899: IN
14900: NOT
14901: OR
14902: IFFALSE 15211
// begin if dep then
14904: LD_VAR 0 17
14908: IFFALSE 15044
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14910: LD_ADDR_VAR 0 16
14914: PUSH
14915: LD_VAR 0 17
14919: PUSH
14920: LD_INT 1
14922: ARRAY
14923: PPUSH
14924: CALL_OW 250
14928: PPUSH
14929: LD_VAR 0 17
14933: PUSH
14934: LD_INT 1
14936: ARRAY
14937: PPUSH
14938: CALL_OW 254
14942: PPUSH
14943: LD_INT 5
14945: PPUSH
14946: CALL_OW 272
14950: PUSH
14951: LD_VAR 0 17
14955: PUSH
14956: LD_INT 1
14958: ARRAY
14959: PPUSH
14960: CALL_OW 251
14964: PPUSH
14965: LD_VAR 0 17
14969: PUSH
14970: LD_INT 1
14972: ARRAY
14973: PPUSH
14974: CALL_OW 254
14978: PPUSH
14979: LD_INT 5
14981: PPUSH
14982: CALL_OW 273
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14991: LD_VAR 0 16
14995: PUSH
14996: LD_INT 1
14998: ARRAY
14999: PPUSH
15000: LD_VAR 0 16
15004: PUSH
15005: LD_INT 2
15007: ARRAY
15008: PPUSH
15009: CALL_OW 488
15013: IFFALSE 15044
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15015: LD_VAR 0 13
15019: PPUSH
15020: LD_VAR 0 16
15024: PUSH
15025: LD_INT 1
15027: ARRAY
15028: PPUSH
15029: LD_VAR 0 16
15033: PUSH
15034: LD_INT 2
15036: ARRAY
15037: PPUSH
15038: CALL_OW 111
// continue ;
15042: GO 14524
// end ; end ; r := GetDir ( tmp ) ;
15044: LD_ADDR_VAR 0 15
15048: PUSH
15049: LD_VAR 0 13
15053: PPUSH
15054: CALL_OW 254
15058: ST_TO_ADDR
// if r = 5 then
15059: LD_VAR 0 15
15063: PUSH
15064: LD_INT 5
15066: EQUAL
15067: IFFALSE 15077
// r := 0 ;
15069: LD_ADDR_VAR 0 15
15073: PUSH
15074: LD_INT 0
15076: ST_TO_ADDR
// for j = r to 5 do
15077: LD_ADDR_VAR 0 10
15081: PUSH
15082: DOUBLE
15083: LD_VAR 0 15
15087: DEC
15088: ST_TO_ADDR
15089: LD_INT 5
15091: PUSH
15092: FOR_TO
15093: IFFALSE 15209
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15095: LD_ADDR_VAR 0 11
15099: PUSH
15100: LD_VAR 0 13
15104: PPUSH
15105: CALL_OW 250
15109: PPUSH
15110: LD_VAR 0 10
15114: PPUSH
15115: LD_INT 2
15117: PPUSH
15118: CALL_OW 272
15122: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15123: LD_ADDR_VAR 0 12
15127: PUSH
15128: LD_VAR 0 13
15132: PPUSH
15133: CALL_OW 251
15137: PPUSH
15138: LD_VAR 0 10
15142: PPUSH
15143: LD_INT 2
15145: PPUSH
15146: CALL_OW 273
15150: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15151: LD_VAR 0 11
15155: PPUSH
15156: LD_VAR 0 12
15160: PPUSH
15161: CALL_OW 488
15165: IFFALSE 15184
15167: PUSH
15168: LD_VAR 0 11
15172: PPUSH
15173: LD_VAR 0 12
15177: PPUSH
15178: CALL_OW 428
15182: NOT
15183: AND
15184: IFFALSE 15207
// begin ComMoveXY ( tmp , _x , _y ) ;
15186: LD_VAR 0 13
15190: PPUSH
15191: LD_VAR 0 11
15195: PPUSH
15196: LD_VAR 0 12
15200: PPUSH
15201: CALL_OW 111
// break ;
15205: GO 15209
// end ; end ;
15207: GO 15092
15209: POP
15210: POP
// end ; end ;
15211: GO 14524
15213: POP
15214: POP
// end ;
15215: LD_VAR 0 8
15219: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15220: LD_INT 0
15222: PPUSH
// result := true ;
15223: LD_ADDR_VAR 0 3
15227: PUSH
15228: LD_INT 1
15230: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15231: LD_VAR 0 2
15235: PUSH
15236: LD_INT 24
15238: DOUBLE
15239: EQUAL
15240: IFTRUE 15250
15242: LD_INT 33
15244: DOUBLE
15245: EQUAL
15246: IFTRUE 15250
15248: GO 15275
15250: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15251: LD_ADDR_VAR 0 3
15255: PUSH
15256: LD_INT 32
15258: PPUSH
15259: LD_VAR 0 1
15263: PPUSH
15264: CALL_OW 321
15268: PUSH
15269: LD_INT 2
15271: EQUAL
15272: ST_TO_ADDR
15273: GO 15591
15275: LD_INT 20
15277: DOUBLE
15278: EQUAL
15279: IFTRUE 15283
15281: GO 15308
15283: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15284: LD_ADDR_VAR 0 3
15288: PUSH
15289: LD_INT 6
15291: PPUSH
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 321
15301: PUSH
15302: LD_INT 2
15304: EQUAL
15305: ST_TO_ADDR
15306: GO 15591
15308: LD_INT 22
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15322
15314: LD_INT 36
15316: DOUBLE
15317: EQUAL
15318: IFTRUE 15322
15320: GO 15347
15322: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15323: LD_ADDR_VAR 0 3
15327: PUSH
15328: LD_INT 15
15330: PPUSH
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 321
15340: PUSH
15341: LD_INT 2
15343: EQUAL
15344: ST_TO_ADDR
15345: GO 15591
15347: LD_INT 30
15349: DOUBLE
15350: EQUAL
15351: IFTRUE 15355
15353: GO 15380
15355: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15356: LD_ADDR_VAR 0 3
15360: PUSH
15361: LD_INT 20
15363: PPUSH
15364: LD_VAR 0 1
15368: PPUSH
15369: CALL_OW 321
15373: PUSH
15374: LD_INT 2
15376: EQUAL
15377: ST_TO_ADDR
15378: GO 15591
15380: LD_INT 28
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15394
15386: LD_INT 21
15388: DOUBLE
15389: EQUAL
15390: IFTRUE 15394
15392: GO 15419
15394: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15395: LD_ADDR_VAR 0 3
15399: PUSH
15400: LD_INT 21
15402: PPUSH
15403: LD_VAR 0 1
15407: PPUSH
15408: CALL_OW 321
15412: PUSH
15413: LD_INT 2
15415: EQUAL
15416: ST_TO_ADDR
15417: GO 15591
15419: LD_INT 16
15421: DOUBLE
15422: EQUAL
15423: IFTRUE 15427
15425: GO 15452
15427: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15428: LD_ADDR_VAR 0 3
15432: PUSH
15433: LD_INT 84
15435: PPUSH
15436: LD_VAR 0 1
15440: PPUSH
15441: CALL_OW 321
15445: PUSH
15446: LD_INT 2
15448: EQUAL
15449: ST_TO_ADDR
15450: GO 15591
15452: LD_INT 19
15454: DOUBLE
15455: EQUAL
15456: IFTRUE 15466
15458: LD_INT 23
15460: DOUBLE
15461: EQUAL
15462: IFTRUE 15466
15464: GO 15491
15466: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15467: LD_ADDR_VAR 0 3
15471: PUSH
15472: LD_INT 83
15474: PPUSH
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 321
15484: PUSH
15485: LD_INT 2
15487: EQUAL
15488: ST_TO_ADDR
15489: GO 15591
15491: LD_INT 17
15493: DOUBLE
15494: EQUAL
15495: IFTRUE 15499
15497: GO 15524
15499: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15500: LD_ADDR_VAR 0 3
15504: PUSH
15505: LD_INT 39
15507: PPUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL_OW 321
15517: PUSH
15518: LD_INT 2
15520: EQUAL
15521: ST_TO_ADDR
15522: GO 15591
15524: LD_INT 18
15526: DOUBLE
15527: EQUAL
15528: IFTRUE 15532
15530: GO 15557
15532: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15533: LD_ADDR_VAR 0 3
15537: PUSH
15538: LD_INT 40
15540: PPUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 321
15550: PUSH
15551: LD_INT 2
15553: EQUAL
15554: ST_TO_ADDR
15555: GO 15591
15557: LD_INT 27
15559: DOUBLE
15560: EQUAL
15561: IFTRUE 15565
15563: GO 15590
15565: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15566: LD_ADDR_VAR 0 3
15570: PUSH
15571: LD_INT 35
15573: PPUSH
15574: LD_VAR 0 1
15578: PPUSH
15579: CALL_OW 321
15583: PUSH
15584: LD_INT 2
15586: EQUAL
15587: ST_TO_ADDR
15588: GO 15591
15590: POP
// end ;
15591: LD_VAR 0 3
15595: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15596: LD_INT 0
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
15606: PPUSH
15607: PPUSH
15608: PPUSH
// result := false ;
15609: LD_ADDR_VAR 0 6
15613: PUSH
15614: LD_INT 0
15616: ST_TO_ADDR
// if btype = b_depot then
15617: LD_VAR 0 2
15621: PUSH
15622: LD_INT 0
15624: EQUAL
15625: IFFALSE 15637
// begin result := true ;
15627: LD_ADDR_VAR 0 6
15631: PUSH
15632: LD_INT 1
15634: ST_TO_ADDR
// exit ;
15635: GO 16491
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15637: LD_VAR 0 1
15641: NOT
15642: IFTRUE 15667
15644: PUSH
15645: LD_VAR 0 1
15649: PPUSH
15650: CALL_OW 266
15654: PUSH
15655: LD_INT 0
15657: PUSH
15658: LD_INT 1
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: IN
15665: NOT
15666: OR
15667: IFTRUE 15676
15669: PUSH
15670: LD_VAR 0 2
15674: NOT
15675: OR
15676: IFTRUE 15712
15678: PUSH
15679: LD_VAR 0 5
15683: PUSH
15684: LD_INT 0
15686: PUSH
15687: LD_INT 1
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: LD_INT 3
15695: PUSH
15696: LD_INT 4
15698: PUSH
15699: LD_INT 5
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: IN
15710: NOT
15711: OR
15712: IFTRUE 15731
15714: PUSH
15715: LD_VAR 0 3
15719: PPUSH
15720: LD_VAR 0 4
15724: PPUSH
15725: CALL_OW 488
15729: NOT
15730: OR
15731: IFFALSE 15735
// exit ;
15733: GO 16491
// side := GetSide ( depot ) ;
15735: LD_ADDR_VAR 0 9
15739: PUSH
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 255
15749: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15750: LD_VAR 0 9
15754: PPUSH
15755: LD_VAR 0 2
15759: PPUSH
15760: CALL 15220 0 2
15764: NOT
15765: IFFALSE 15769
// exit ;
15767: GO 16491
// pom := GetBase ( depot ) ;
15769: LD_ADDR_VAR 0 10
15773: PUSH
15774: LD_VAR 0 1
15778: PPUSH
15779: CALL_OW 274
15783: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15784: LD_ADDR_VAR 0 11
15788: PUSH
15789: LD_VAR 0 2
15793: PPUSH
15794: LD_VAR 0 1
15798: PPUSH
15799: CALL_OW 248
15803: PPUSH
15804: CALL_OW 450
15808: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15809: LD_VAR 0 10
15813: PPUSH
15814: LD_INT 1
15816: PPUSH
15817: CALL_OW 275
15821: PUSH
15822: LD_VAR 0 11
15826: PUSH
15827: LD_INT 1
15829: ARRAY
15830: GREATEREQUAL
15831: IFFALSE 15857
15833: PUSH
15834: LD_VAR 0 10
15838: PPUSH
15839: LD_INT 2
15841: PPUSH
15842: CALL_OW 275
15846: PUSH
15847: LD_VAR 0 11
15851: PUSH
15852: LD_INT 2
15854: ARRAY
15855: GREATEREQUAL
15856: AND
15857: IFFALSE 15883
15859: PUSH
15860: LD_VAR 0 10
15864: PPUSH
15865: LD_INT 3
15867: PPUSH
15868: CALL_OW 275
15872: PUSH
15873: LD_VAR 0 11
15877: PUSH
15878: LD_INT 3
15880: ARRAY
15881: GREATEREQUAL
15882: AND
15883: NOT
15884: IFFALSE 15888
// exit ;
15886: GO 16491
// if GetBType ( depot ) = b_depot then
15888: LD_VAR 0 1
15892: PPUSH
15893: CALL_OW 266
15897: PUSH
15898: LD_INT 0
15900: EQUAL
15901: IFFALSE 15913
// dist := 28 else
15903: LD_ADDR_VAR 0 14
15907: PUSH
15908: LD_INT 28
15910: ST_TO_ADDR
15911: GO 15921
// dist := 36 ;
15913: LD_ADDR_VAR 0 14
15917: PUSH
15918: LD_INT 36
15920: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15921: LD_VAR 0 1
15925: PPUSH
15926: LD_VAR 0 3
15930: PPUSH
15931: LD_VAR 0 4
15935: PPUSH
15936: CALL_OW 297
15940: PUSH
15941: LD_VAR 0 14
15945: GREATER
15946: IFFALSE 15950
// exit ;
15948: GO 16491
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15950: LD_ADDR_VAR 0 12
15954: PUSH
15955: LD_VAR 0 2
15959: PPUSH
15960: LD_VAR 0 3
15964: PPUSH
15965: LD_VAR 0 4
15969: PPUSH
15970: LD_VAR 0 5
15974: PPUSH
15975: LD_VAR 0 1
15979: PPUSH
15980: CALL_OW 248
15984: PPUSH
15985: LD_INT 0
15987: PPUSH
15988: CALL 16496 0 6
15992: ST_TO_ADDR
// if not hexes then
15993: LD_VAR 0 12
15997: NOT
15998: IFFALSE 16002
// exit ;
16000: GO 16491
// hex := GetHexInfo ( x , y ) ;
16002: LD_ADDR_VAR 0 15
16006: PUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: LD_VAR 0 4
16016: PPUSH
16017: CALL_OW 546
16021: ST_TO_ADDR
// if hex [ 1 ] then
16022: LD_VAR 0 15
16026: PUSH
16027: LD_INT 1
16029: ARRAY
16030: IFFALSE 16034
// exit ;
16032: GO 16491
// height := hex [ 2 ] ;
16034: LD_ADDR_VAR 0 13
16038: PUSH
16039: LD_VAR 0 15
16043: PUSH
16044: LD_INT 2
16046: ARRAY
16047: ST_TO_ADDR
// for i = 1 to hexes do
16048: LD_ADDR_VAR 0 7
16052: PUSH
16053: DOUBLE
16054: LD_INT 1
16056: DEC
16057: ST_TO_ADDR
16058: LD_VAR 0 12
16062: PUSH
16063: FOR_TO
16064: IFFALSE 16408
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16066: LD_VAR 0 12
16070: PUSH
16071: LD_VAR 0 7
16075: ARRAY
16076: PUSH
16077: LD_INT 1
16079: ARRAY
16080: PPUSH
16081: LD_VAR 0 12
16085: PUSH
16086: LD_VAR 0 7
16090: ARRAY
16091: PUSH
16092: LD_INT 2
16094: ARRAY
16095: PPUSH
16096: CALL_OW 488
16100: NOT
16101: IFTRUE 16143
16103: PUSH
16104: LD_VAR 0 12
16108: PUSH
16109: LD_VAR 0 7
16113: ARRAY
16114: PUSH
16115: LD_INT 1
16117: ARRAY
16118: PPUSH
16119: LD_VAR 0 12
16123: PUSH
16124: LD_VAR 0 7
16128: ARRAY
16129: PUSH
16130: LD_INT 2
16132: ARRAY
16133: PPUSH
16134: CALL_OW 428
16138: PUSH
16139: LD_INT 0
16141: GREATER
16142: OR
16143: IFTRUE 16181
16145: PUSH
16146: LD_VAR 0 12
16150: PUSH
16151: LD_VAR 0 7
16155: ARRAY
16156: PUSH
16157: LD_INT 1
16159: ARRAY
16160: PPUSH
16161: LD_VAR 0 12
16165: PUSH
16166: LD_VAR 0 7
16170: ARRAY
16171: PUSH
16172: LD_INT 2
16174: ARRAY
16175: PPUSH
16176: CALL_OW 351
16180: OR
16181: IFFALSE 16187
// exit ;
16183: POP
16184: POP
16185: GO 16491
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16187: LD_ADDR_VAR 0 8
16191: PUSH
16192: LD_VAR 0 12
16196: PUSH
16197: LD_VAR 0 7
16201: ARRAY
16202: PUSH
16203: LD_INT 1
16205: ARRAY
16206: PPUSH
16207: LD_VAR 0 12
16211: PUSH
16212: LD_VAR 0 7
16216: ARRAY
16217: PUSH
16218: LD_INT 2
16220: ARRAY
16221: PPUSH
16222: CALL_OW 546
16226: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16227: LD_VAR 0 8
16231: PUSH
16232: LD_INT 1
16234: ARRAY
16235: IFTRUE 16257
16237: PUSH
16238: LD_VAR 0 8
16242: PUSH
16243: LD_INT 2
16245: ARRAY
16246: PUSH
16247: LD_VAR 0 13
16251: PUSH
16252: LD_INT 2
16254: PLUS
16255: GREATER
16256: OR
16257: IFTRUE 16279
16259: PUSH
16260: LD_VAR 0 8
16264: PUSH
16265: LD_INT 2
16267: ARRAY
16268: PUSH
16269: LD_VAR 0 13
16273: PUSH
16274: LD_INT 2
16276: MINUS
16277: LESS
16278: OR
16279: IFTRUE 16347
16281: PUSH
16282: LD_VAR 0 8
16286: PUSH
16287: LD_INT 3
16289: ARRAY
16290: PUSH
16291: LD_INT 0
16293: PUSH
16294: LD_INT 8
16296: PUSH
16297: LD_INT 9
16299: PUSH
16300: LD_INT 10
16302: PUSH
16303: LD_INT 11
16305: PUSH
16306: LD_INT 12
16308: PUSH
16309: LD_INT 13
16311: PUSH
16312: LD_INT 16
16314: PUSH
16315: LD_INT 17
16317: PUSH
16318: LD_INT 18
16320: PUSH
16321: LD_INT 19
16323: PUSH
16324: LD_INT 20
16326: PUSH
16327: LD_INT 21
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: IN
16345: NOT
16346: OR
16347: IFTRUE 16360
16349: PUSH
16350: LD_VAR 0 8
16354: PUSH
16355: LD_INT 5
16357: ARRAY
16358: NOT
16359: OR
16360: IFTRUE 16400
16362: PUSH
16363: LD_VAR 0 8
16367: PUSH
16368: LD_INT 6
16370: ARRAY
16371: PUSH
16372: LD_INT 1
16374: PUSH
16375: LD_INT 2
16377: PUSH
16378: LD_INT 7
16380: PUSH
16381: LD_INT 9
16383: PUSH
16384: LD_INT 10
16386: PUSH
16387: LD_INT 11
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: IN
16398: NOT
16399: OR
16400: IFFALSE 16406
// exit ;
16402: POP
16403: POP
16404: GO 16491
// end ;
16406: GO 16063
16408: POP
16409: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16410: LD_VAR 0 9
16414: PPUSH
16415: LD_VAR 0 3
16419: PPUSH
16420: LD_VAR 0 4
16424: PPUSH
16425: LD_INT 20
16427: PPUSH
16428: CALL 8310 0 4
16432: PUSH
16433: LD_INT 4
16435: ARRAY
16436: IFFALSE 16440
// exit ;
16438: GO 16491
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16440: LD_VAR 0 2
16444: PUSH
16445: LD_INT 29
16447: PUSH
16448: LD_INT 30
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: IN
16455: IFFALSE 16479
16457: PUSH
16458: LD_VAR 0 3
16462: PPUSH
16463: LD_VAR 0 4
16467: PPUSH
16468: LD_VAR 0 9
16472: PPUSH
16473: CALL_OW 440
16477: NOT
16478: AND
16479: IFFALSE 16483
// exit ;
16481: GO 16491
// result := true ;
16483: LD_ADDR_VAR 0 6
16487: PUSH
16488: LD_INT 1
16490: ST_TO_ADDR
// end ;
16491: LD_VAR 0 6
16495: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16496: LD_INT 0
16498: PPUSH
16499: PPUSH
16500: PPUSH
16501: PPUSH
16502: PPUSH
16503: PPUSH
16504: PPUSH
16505: PPUSH
16506: PPUSH
16507: PPUSH
16508: PPUSH
16509: PPUSH
16510: PPUSH
16511: PPUSH
16512: PPUSH
16513: PPUSH
16514: PPUSH
16515: PPUSH
16516: PPUSH
16517: PPUSH
16518: PPUSH
16519: PPUSH
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
16532: PPUSH
16533: PPUSH
16534: PPUSH
16535: PPUSH
16536: PPUSH
16537: PPUSH
16538: PPUSH
16539: PPUSH
16540: PPUSH
16541: PPUSH
16542: PPUSH
16543: PPUSH
16544: PPUSH
16545: PPUSH
16546: PPUSH
16547: PPUSH
16548: PPUSH
16549: PPUSH
16550: PPUSH
16551: PPUSH
16552: PPUSH
16553: PPUSH
16554: PPUSH
16555: PPUSH
// result = [ ] ;
16556: LD_ADDR_VAR 0 7
16560: PUSH
16561: EMPTY
16562: ST_TO_ADDR
// temp_list = [ ] ;
16563: LD_ADDR_VAR 0 9
16567: PUSH
16568: EMPTY
16569: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16570: LD_VAR 0 4
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: LD_INT 1
16580: PUSH
16581: LD_INT 2
16583: PUSH
16584: LD_INT 3
16586: PUSH
16587: LD_INT 4
16589: PUSH
16590: LD_INT 5
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: IN
16601: NOT
16602: IFTRUE 16645
16604: PUSH
16605: LD_VAR 0 1
16609: PUSH
16610: LD_INT 0
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: IN
16620: IFFALSE 16644
16622: PUSH
16623: LD_VAR 0 5
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: LD_INT 2
16633: PUSH
16634: LD_INT 3
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: IN
16642: NOT
16643: AND
16644: OR
16645: IFFALSE 16649
// exit ;
16647: GO 35048
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16649: LD_VAR 0 1
16653: PUSH
16654: LD_INT 6
16656: PUSH
16657: LD_INT 7
16659: PUSH
16660: LD_INT 8
16662: PUSH
16663: LD_INT 13
16665: PUSH
16666: LD_INT 12
16668: PUSH
16669: LD_INT 15
16671: PUSH
16672: LD_INT 11
16674: PUSH
16675: LD_INT 14
16677: PUSH
16678: LD_INT 10
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: IN
16692: IFFALSE 16702
// btype = b_lab ;
16694: LD_ADDR_VAR 0 1
16698: PUSH
16699: LD_INT 6
16701: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16702: LD_VAR 0 6
16706: PUSH
16707: LD_INT 0
16709: PUSH
16710: LD_INT 1
16712: PUSH
16713: LD_INT 2
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: IN
16721: NOT
16722: IFTRUE 16790
16724: PUSH
16725: LD_VAR 0 1
16729: PUSH
16730: LD_INT 0
16732: PUSH
16733: LD_INT 1
16735: PUSH
16736: LD_INT 2
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: LD_INT 6
16744: PUSH
16745: LD_INT 36
16747: PUSH
16748: LD_INT 4
16750: PUSH
16751: LD_INT 5
16753: PUSH
16754: LD_INT 31
16756: PUSH
16757: LD_INT 32
16759: PUSH
16760: LD_INT 33
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: IN
16776: NOT
16777: IFFALSE 16789
16779: PUSH
16780: LD_VAR 0 6
16784: PUSH
16785: LD_INT 1
16787: EQUAL
16788: AND
16789: OR
16790: IFTRUE 16822
16792: PUSH
16793: LD_VAR 0 1
16797: PUSH
16798: LD_INT 2
16800: PUSH
16801: LD_INT 3
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: IN
16808: NOT
16809: IFFALSE 16821
16811: PUSH
16812: LD_VAR 0 6
16816: PUSH
16817: LD_INT 2
16819: EQUAL
16820: AND
16821: OR
16822: IFFALSE 16832
// mode = 0 ;
16824: LD_ADDR_VAR 0 6
16828: PUSH
16829: LD_INT 0
16831: ST_TO_ADDR
// case mode of 0 :
16832: LD_VAR 0 6
16836: PUSH
16837: LD_INT 0
16839: DOUBLE
16840: EQUAL
16841: IFTRUE 16845
16843: GO 28298
16845: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16846: LD_ADDR_VAR 0 11
16850: PUSH
16851: LD_INT 0
16853: PUSH
16854: LD_INT 0
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 0
16863: PUSH
16864: LD_INT 1
16866: NEG
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: LD_INT 0
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 1
16884: PUSH
16885: LD_INT 1
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 0
16894: PUSH
16895: LD_INT 1
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 1
16904: NEG
16905: PUSH
16906: LD_INT 0
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 1
16915: NEG
16916: PUSH
16917: LD_INT 1
16919: NEG
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 1
16927: NEG
16928: PUSH
16929: LD_INT 2
16931: NEG
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 0
16939: PUSH
16940: LD_INT 2
16942: NEG
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 1
16950: PUSH
16951: LD_INT 1
16953: NEG
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 1
16961: PUSH
16962: LD_INT 2
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 0
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 1
16981: NEG
16982: PUSH
16983: LD_INT 1
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 1
16992: PUSH
16993: LD_INT 3
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 0
17002: PUSH
17003: LD_INT 3
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 1
17012: NEG
17013: PUSH
17014: LD_INT 2
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17039: LD_ADDR_VAR 0 12
17043: PUSH
17044: LD_INT 0
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 0
17056: PUSH
17057: LD_INT 1
17059: NEG
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: LD_INT 0
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 1
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 0
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 1
17097: NEG
17098: PUSH
17099: LD_INT 0
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 1
17108: NEG
17109: PUSH
17110: LD_INT 1
17112: NEG
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: LD_INT 1
17123: NEG
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 2
17131: PUSH
17132: LD_INT 0
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 2
17141: PUSH
17142: LD_INT 1
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 1
17151: NEG
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 2
17162: NEG
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 2
17173: NEG
17174: PUSH
17175: LD_INT 1
17177: NEG
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 2
17185: NEG
17186: PUSH
17187: LD_INT 1
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 3
17196: NEG
17197: PUSH
17198: LD_INT 0
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 3
17207: NEG
17208: PUSH
17209: LD_INT 1
17211: NEG
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17235: LD_ADDR_VAR 0 13
17239: PUSH
17240: LD_INT 0
17242: PUSH
17243: LD_INT 0
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 0
17252: PUSH
17253: LD_INT 1
17255: NEG
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: LD_INT 0
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: LD_INT 1
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: LD_INT 1
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 1
17293: NEG
17294: PUSH
17295: LD_INT 0
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 1
17304: NEG
17305: PUSH
17306: LD_INT 1
17308: NEG
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 1
17316: NEG
17317: PUSH
17318: LD_INT 2
17320: NEG
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 2
17328: PUSH
17329: LD_INT 1
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 2
17338: PUSH
17339: LD_INT 2
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 1
17348: PUSH
17349: LD_INT 2
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 2
17358: NEG
17359: PUSH
17360: LD_INT 1
17362: NEG
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 2
17370: NEG
17371: PUSH
17372: LD_INT 2
17374: NEG
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 2
17382: NEG
17383: PUSH
17384: LD_INT 3
17386: NEG
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 3
17394: NEG
17395: PUSH
17396: LD_INT 2
17398: NEG
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: LD_INT 3
17406: NEG
17407: PUSH
17408: LD_INT 3
17410: NEG
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17434: LD_ADDR_VAR 0 14
17438: PUSH
17439: LD_INT 0
17441: PUSH
17442: LD_INT 0
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 0
17451: PUSH
17452: LD_INT 1
17454: NEG
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: LD_INT 0
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 0
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 1
17492: NEG
17493: PUSH
17494: LD_INT 0
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 1
17503: NEG
17504: PUSH
17505: LD_INT 1
17507: NEG
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 1
17515: NEG
17516: PUSH
17517: LD_INT 2
17519: NEG
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 0
17527: PUSH
17528: LD_INT 2
17530: NEG
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 1
17538: PUSH
17539: LD_INT 1
17541: NEG
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 1
17549: PUSH
17550: LD_INT 2
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 0
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 1
17569: NEG
17570: PUSH
17571: LD_INT 1
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 1
17580: NEG
17581: PUSH
17582: LD_INT 3
17584: NEG
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 0
17592: PUSH
17593: LD_INT 3
17595: NEG
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: LD_INT 2
17606: NEG
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17630: LD_ADDR_VAR 0 15
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 0
17647: PUSH
17648: LD_INT 1
17650: NEG
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: LD_INT 0
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 1
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 0
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 1
17688: NEG
17689: PUSH
17690: LD_INT 0
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 1
17699: NEG
17700: PUSH
17701: LD_INT 1
17703: NEG
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 1
17711: PUSH
17712: LD_INT 1
17714: NEG
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 2
17722: PUSH
17723: LD_INT 0
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 2
17732: PUSH
17733: LD_INT 1
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 1
17742: NEG
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 2
17753: NEG
17754: PUSH
17755: LD_INT 0
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 2
17764: NEG
17765: PUSH
17766: LD_INT 1
17768: NEG
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: LD_INT 1
17779: NEG
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 3
17787: PUSH
17788: LD_INT 0
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 3
17797: PUSH
17798: LD_INT 1
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17823: LD_ADDR_VAR 0 16
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 0
17840: PUSH
17841: LD_INT 1
17843: NEG
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 1
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 1
17861: PUSH
17862: LD_INT 1
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: LD_INT 1
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 1
17881: NEG
17882: PUSH
17883: LD_INT 0
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 1
17892: NEG
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 1
17904: NEG
17905: PUSH
17906: LD_INT 2
17908: NEG
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 2
17916: PUSH
17917: LD_INT 1
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 2
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: LD_INT 2
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 2
17946: NEG
17947: PUSH
17948: LD_INT 1
17950: NEG
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 2
17958: NEG
17959: PUSH
17960: LD_INT 2
17962: NEG
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 3
17970: PUSH
17971: LD_INT 2
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: LD_INT 3
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 2
17990: PUSH
17991: LD_INT 3
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18016: LD_ADDR_VAR 0 17
18020: PUSH
18021: LD_INT 0
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: LD_INT 1
18036: NEG
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: LD_INT 0
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 1
18074: NEG
18075: PUSH
18076: LD_INT 0
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: NEG
18086: PUSH
18087: LD_INT 1
18089: NEG
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 1
18097: NEG
18098: PUSH
18099: LD_INT 2
18101: NEG
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 0
18109: PUSH
18110: LD_INT 2
18112: NEG
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: LD_INT 0
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: LD_INT 2
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 0
18171: PUSH
18172: LD_INT 2
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 1
18181: NEG
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 2
18192: NEG
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 2
18203: NEG
18204: PUSH
18205: LD_INT 1
18207: NEG
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 2
18215: NEG
18216: PUSH
18217: LD_INT 2
18219: NEG
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18246: LD_ADDR_VAR 0 18
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: LD_INT 0
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 0
18263: PUSH
18264: LD_INT 1
18266: NEG
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: LD_INT 0
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 0
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 1
18304: NEG
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 1
18315: NEG
18316: PUSH
18317: LD_INT 1
18319: NEG
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 1
18327: NEG
18328: PUSH
18329: LD_INT 2
18331: NEG
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 0
18339: PUSH
18340: LD_INT 2
18342: NEG
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: LD_INT 1
18353: NEG
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: LD_INT 0
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 2
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: LD_INT 2
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 1
18411: NEG
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 2
18422: NEG
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 2
18433: NEG
18434: PUSH
18435: LD_INT 1
18437: NEG
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 2
18445: NEG
18446: PUSH
18447: LD_INT 2
18449: NEG
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18476: LD_ADDR_VAR 0 19
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: LD_INT 1
18496: NEG
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 1
18504: PUSH
18505: LD_INT 0
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 0
18524: PUSH
18525: LD_INT 1
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 1
18534: NEG
18535: PUSH
18536: LD_INT 0
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 1
18545: NEG
18546: PUSH
18547: LD_INT 1
18549: NEG
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 1
18557: NEG
18558: PUSH
18559: LD_INT 2
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: LD_INT 2
18572: NEG
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 1
18580: PUSH
18581: LD_INT 1
18583: NEG
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 2
18601: PUSH
18602: LD_INT 1
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: LD_INT 2
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 1
18641: NEG
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 2
18652: NEG
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 2
18663: NEG
18664: PUSH
18665: LD_INT 1
18667: NEG
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 2
18675: NEG
18676: PUSH
18677: LD_INT 2
18679: NEG
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18706: LD_ADDR_VAR 0 20
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: LD_INT 1
18726: NEG
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 0
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: NEG
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 1
18775: NEG
18776: PUSH
18777: LD_INT 1
18779: NEG
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 1
18787: NEG
18788: PUSH
18789: LD_INT 2
18791: NEG
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: LD_INT 2
18802: NEG
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 1
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 2
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 2
18841: PUSH
18842: LD_INT 2
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: LD_INT 2
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 1
18871: NEG
18872: PUSH
18873: LD_INT 1
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 2
18882: NEG
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 2
18893: NEG
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 2
18905: NEG
18906: PUSH
18907: LD_INT 2
18909: NEG
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18936: LD_ADDR_VAR 0 21
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 1
18994: NEG
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 1
19005: NEG
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: NEG
19018: PUSH
19019: LD_INT 2
19021: NEG
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 0
19029: PUSH
19030: LD_INT 2
19032: NEG
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 1
19043: NEG
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 0
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 1
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: LD_INT 2
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 1
19101: NEG
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 2
19112: NEG
19113: PUSH
19114: LD_INT 0
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 2
19123: NEG
19124: PUSH
19125: LD_INT 1
19127: NEG
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 2
19135: NEG
19136: PUSH
19137: LD_INT 2
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19166: LD_ADDR_VAR 0 22
19170: PUSH
19171: LD_INT 0
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 0
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: LD_INT 0
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 0
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 1
19235: NEG
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 1
19247: NEG
19248: PUSH
19249: LD_INT 2
19251: NEG
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: LD_INT 2
19262: NEG
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 2
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 2
19291: PUSH
19292: LD_INT 1
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 2
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: LD_INT 2
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 2
19342: NEG
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 2
19353: NEG
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 2
19365: NEG
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19396: LD_ADDR_VAR 0 23
19400: PUSH
19401: LD_INT 0
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: PUSH
19425: LD_INT 0
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 1
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 0
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 1
19465: NEG
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: NEG
19478: PUSH
19479: LD_INT 2
19481: NEG
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: LD_INT 2
19492: NEG
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 2
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 2
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 1
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: LD_INT 2
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 1
19561: NEG
19562: PUSH
19563: LD_INT 1
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 2
19572: NEG
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: NEG
19584: PUSH
19585: LD_INT 1
19587: NEG
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 2
19595: NEG
19596: PUSH
19597: LD_INT 2
19599: NEG
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 2
19607: NEG
19608: PUSH
19609: LD_INT 3
19611: NEG
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: NEG
19620: PUSH
19621: LD_INT 3
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: LD_INT 2
19634: NEG
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: LD_INT 1
19645: NEG
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19676: LD_ADDR_VAR 0 24
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 1
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: LD_INT 1
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: NEG
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: LD_INT 2
19761: NEG
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 0
19769: PUSH
19770: LD_INT 2
19772: NEG
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: LD_INT 1
19783: NEG
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 2
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 2
19811: PUSH
19812: LD_INT 2
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: LD_INT 2
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 1
19841: NEG
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 2
19852: NEG
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 2
19863: NEG
19864: PUSH
19865: LD_INT 1
19867: NEG
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 2
19875: NEG
19876: PUSH
19877: LD_INT 2
19879: NEG
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: LD_INT 2
19890: NEG
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: LD_INT 1
19901: NEG
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 3
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 3
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19952: LD_ADDR_VAR 0 25
19956: PUSH
19957: LD_INT 0
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 0
19969: PUSH
19970: LD_INT 1
19972: NEG
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 1
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 1
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 0
20000: PUSH
20001: LD_INT 1
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 1
20021: NEG
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: LD_INT 2
20037: NEG
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: LD_INT 2
20048: NEG
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 2
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 2
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 2
20087: PUSH
20088: LD_INT 2
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 1
20097: PUSH
20098: LD_INT 2
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: LD_INT 2
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 1
20117: NEG
20118: PUSH
20119: LD_INT 1
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 2
20128: NEG
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: NEG
20140: PUSH
20141: LD_INT 1
20143: NEG
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 2
20151: NEG
20152: PUSH
20153: LD_INT 2
20155: NEG
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 3
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 3
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 2
20183: PUSH
20184: LD_INT 3
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 1
20193: PUSH
20194: LD_INT 3
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20226: LD_ADDR_VAR 0 26
20230: PUSH
20231: LD_INT 0
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 0
20243: PUSH
20244: LD_INT 1
20246: NEG
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: LD_INT 0
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: LD_INT 0
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 1
20295: NEG
20296: PUSH
20297: LD_INT 1
20299: NEG
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: NEG
20308: PUSH
20309: LD_INT 2
20311: NEG
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: LD_INT 2
20322: NEG
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 1
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 2
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 2
20351: PUSH
20352: LD_INT 1
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: NEG
20392: PUSH
20393: LD_INT 1
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 2
20402: NEG
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 2
20413: NEG
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: NEG
20426: PUSH
20427: LD_INT 2
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 3
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 1
20447: PUSH
20448: LD_INT 3
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 1
20457: NEG
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: NEG
20469: PUSH
20470: LD_INT 1
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20502: LD_ADDR_VAR 0 27
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: LD_INT 0
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 0
20519: PUSH
20520: LD_INT 1
20522: NEG
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 0
20550: PUSH
20551: LD_INT 1
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: NEG
20561: PUSH
20562: LD_INT 0
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: LD_INT 1
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: NEG
20584: PUSH
20585: LD_INT 2
20587: NEG
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 0
20595: PUSH
20596: LD_INT 2
20598: NEG
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 1
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 2
20617: PUSH
20618: LD_INT 0
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 2
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 1
20647: PUSH
20648: LD_INT 2
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 0
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: NEG
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 2
20678: NEG
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 2
20689: NEG
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 2
20701: NEG
20702: PUSH
20703: LD_INT 2
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: NEG
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 2
20724: NEG
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 3
20735: NEG
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 3
20747: NEG
20748: PUSH
20749: LD_INT 2
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20782: LD_ADDR_VAR 0 28
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: LD_INT 0
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 0
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 1
20840: NEG
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 1
20851: NEG
20852: PUSH
20853: LD_INT 1
20855: NEG
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 1
20863: NEG
20864: PUSH
20865: LD_INT 2
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 0
20875: PUSH
20876: LD_INT 2
20878: NEG
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 1
20886: PUSH
20887: LD_INT 1
20889: NEG
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 2
20897: PUSH
20898: LD_INT 0
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 2
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 2
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 1
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 0
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 1
20947: NEG
20948: PUSH
20949: LD_INT 1
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 2
20958: NEG
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 2
20969: NEG
20970: PUSH
20971: LD_INT 1
20973: NEG
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 2
20981: NEG
20982: PUSH
20983: LD_INT 2
20985: NEG
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 2
20993: NEG
20994: PUSH
20995: LD_INT 3
20997: NEG
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: LD_INT 3
21009: NEG
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 3
21017: NEG
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 3
21029: NEG
21030: PUSH
21031: LD_INT 2
21033: NEG
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21064: LD_ADDR_VAR 0 29
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 0
21081: PUSH
21082: LD_INT 1
21084: NEG
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: LD_INT 1
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: LD_INT 1
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 1
21122: NEG
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: NEG
21134: PUSH
21135: LD_INT 1
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: LD_INT 2
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: LD_INT 2
21160: NEG
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 1
21168: PUSH
21169: LD_INT 1
21171: NEG
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 2
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: LD_INT 2
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: NEG
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 2
21230: NEG
21231: PUSH
21232: LD_INT 1
21234: NEG
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 2
21242: NEG
21243: PUSH
21244: LD_INT 2
21246: NEG
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 2
21254: NEG
21255: PUSH
21256: LD_INT 3
21258: NEG
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 3
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: LD_INT 3
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 1
21297: NEG
21298: PUSH
21299: LD_INT 2
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 3
21308: NEG
21309: PUSH
21310: LD_INT 2
21312: NEG
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21343: LD_ADDR_VAR 0 30
21347: PUSH
21348: LD_INT 0
21350: PUSH
21351: LD_INT 0
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: LD_INT 1
21363: NEG
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 1
21371: PUSH
21372: LD_INT 0
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 0
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: NEG
21402: PUSH
21403: LD_INT 0
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 1
21412: NEG
21413: PUSH
21414: LD_INT 1
21416: NEG
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 1
21424: NEG
21425: PUSH
21426: LD_INT 2
21428: NEG
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: LD_INT 2
21439: NEG
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: LD_INT 1
21450: NEG
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: LD_INT 1
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: LD_INT 2
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: LD_INT 2
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: NEG
21499: PUSH
21500: LD_INT 1
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 2
21509: NEG
21510: PUSH
21511: LD_INT 0
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 2
21520: NEG
21521: PUSH
21522: LD_INT 1
21524: NEG
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 1
21532: NEG
21533: PUSH
21534: LD_INT 3
21536: NEG
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 1
21544: PUSH
21545: LD_INT 2
21547: NEG
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 3
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 2
21565: PUSH
21566: LD_INT 3
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 2
21575: NEG
21576: PUSH
21577: LD_INT 1
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 3
21586: NEG
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21621: LD_ADDR_VAR 0 31
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: LD_INT 0
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 0
21638: PUSH
21639: LD_INT 1
21641: NEG
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: LD_INT 0
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 0
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 1
21679: NEG
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: NEG
21703: PUSH
21704: LD_INT 2
21706: NEG
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 2
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 2
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: LD_INT 2
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: LD_INT 2
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 1
21775: NEG
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 2
21786: NEG
21787: PUSH
21788: LD_INT 1
21790: NEG
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 2
21798: NEG
21799: PUSH
21800: LD_INT 2
21802: NEG
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 2
21810: NEG
21811: PUSH
21812: LD_INT 3
21814: NEG
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 3
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 1
21843: PUSH
21844: LD_INT 3
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 1
21853: NEG
21854: PUSH
21855: LD_INT 2
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 3
21864: NEG
21865: PUSH
21866: LD_INT 2
21868: NEG
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21899: LD_ADDR_VAR 0 32
21903: PUSH
21904: LD_INT 0
21906: PUSH
21907: LD_INT 0
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: LD_INT 1
21919: NEG
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 0
21947: PUSH
21948: LD_INT 1
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 1
21957: NEG
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 1
21968: NEG
21969: PUSH
21970: LD_INT 1
21972: NEG
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 1
21980: NEG
21981: PUSH
21982: LD_INT 2
21984: NEG
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: LD_INT 2
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 2
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 2
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 1
22054: NEG
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 2
22065: NEG
22066: PUSH
22067: LD_INT 0
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 2
22076: NEG
22077: PUSH
22078: LD_INT 1
22080: NEG
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: PUSH
22090: LD_INT 3
22092: NEG
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 1
22100: PUSH
22101: LD_INT 2
22103: NEG
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 3
22111: PUSH
22112: LD_INT 2
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: LD_INT 3
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 2
22131: NEG
22132: PUSH
22133: LD_INT 1
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 3
22142: NEG
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22177: LD_ADDR_VAR 0 33
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: LD_INT 1
22197: NEG
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: LD_INT 0
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 1
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 0
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 1
22235: NEG
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 1
22246: NEG
22247: PUSH
22248: LD_INT 1
22250: NEG
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 1
22258: NEG
22259: PUSH
22260: LD_INT 2
22262: NEG
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 2
22281: PUSH
22282: LD_INT 0
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: LD_INT 2
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 0
22311: PUSH
22312: LD_INT 2
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 1
22321: NEG
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 2
22332: NEG
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 2
22343: NEG
22344: PUSH
22345: LD_INT 1
22347: NEG
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 2
22355: NEG
22356: PUSH
22357: LD_INT 2
22359: NEG
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 2
22367: NEG
22368: PUSH
22369: LD_INT 3
22371: NEG
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: LD_INT 1
22382: NEG
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 3
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: LD_INT 3
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 3
22421: NEG
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22456: LD_ADDR_VAR 0 34
22460: PUSH
22461: LD_INT 0
22463: PUSH
22464: LD_INT 0
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: LD_INT 1
22476: NEG
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 1
22484: PUSH
22485: LD_INT 0
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 0
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 1
22514: NEG
22515: PUSH
22516: LD_INT 0
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 1
22525: NEG
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 1
22537: NEG
22538: PUSH
22539: LD_INT 2
22541: NEG
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 0
22549: PUSH
22550: LD_INT 2
22552: NEG
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 1
22560: PUSH
22561: LD_INT 1
22563: NEG
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 2
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 1
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 2
22612: NEG
22613: PUSH
22614: LD_INT 0
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 2
22623: NEG
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 2
22635: NEG
22636: PUSH
22637: LD_INT 2
22639: NEG
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: LD_INT 3
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 1
22659: PUSH
22660: LD_INT 2
22662: NEG
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 3
22670: PUSH
22671: LD_INT 2
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 2
22680: PUSH
22681: LD_INT 3
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 2
22690: NEG
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 3
22701: NEG
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22736: LD_ADDR_VAR 0 35
22740: PUSH
22741: LD_INT 0
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 0
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: NEG
22795: PUSH
22796: LD_INT 0
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: LD_INT 1
22809: NEG
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 2
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 2
22827: NEG
22828: PUSH
22829: LD_INT 1
22831: NEG
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22848: LD_ADDR_VAR 0 36
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 0
22896: PUSH
22897: LD_INT 1
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: NEG
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 1
22917: NEG
22918: PUSH
22919: LD_INT 1
22921: NEG
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PUSH
22931: LD_INT 2
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22960: LD_ADDR_VAR 0 37
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 1
22980: NEG
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 0
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 1
23018: NEG
23019: PUSH
23020: LD_INT 0
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 1
23029: NEG
23030: PUSH
23031: LD_INT 1
23033: NEG
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: LD_INT 1
23044: NEG
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: NEG
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23072: LD_ADDR_VAR 0 38
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: LD_INT 1
23092: NEG
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: NEG
23131: PUSH
23132: LD_INT 0
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: LD_INT 1
23145: NEG
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 2
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 2
23163: NEG
23164: PUSH
23165: LD_INT 1
23167: NEG
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23184: LD_ADDR_VAR 0 39
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: LD_INT 1
23204: NEG
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 1
23253: NEG
23254: PUSH
23255: LD_INT 1
23257: NEG
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: LD_INT 2
23269: NEG
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: LD_INT 2
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23296: LD_ADDR_VAR 0 40
23300: PUSH
23301: LD_INT 0
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 0
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 0
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: LD_INT 0
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 1
23365: NEG
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: NEG
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23408: LD_ADDR_VAR 0 41
23412: PUSH
23413: LD_INT 0
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: NEG
23467: PUSH
23468: LD_INT 0
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 1
23489: NEG
23490: PUSH
23491: LD_INT 2
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 1
23501: PUSH
23502: LD_INT 1
23504: NEG
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 2
23512: PUSH
23513: LD_INT 0
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: LD_INT 1
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: LD_INT 2
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: LD_INT 2
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 2
23563: NEG
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 2
23574: NEG
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 2
23586: NEG
23587: PUSH
23588: LD_INT 2
23590: NEG
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 2
23598: NEG
23599: PUSH
23600: LD_INT 3
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 2
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 3
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 3
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 3
23641: PUSH
23642: LD_INT 2
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 3
23651: PUSH
23652: LD_INT 3
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 2
23661: PUSH
23662: LD_INT 3
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 2
23671: NEG
23672: PUSH
23673: LD_INT 1
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 3
23682: NEG
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 3
23693: NEG
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 3
23705: NEG
23706: PUSH
23707: LD_INT 2
23709: NEG
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 3
23717: NEG
23718: PUSH
23719: LD_INT 3
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23758: LD_ADDR_VAR 0 42
23762: PUSH
23763: LD_INT 0
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: LD_INT 1
23778: NEG
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: LD_INT 0
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 0
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: LD_INT 1
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: LD_INT 2
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: LD_INT 2
23854: NEG
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 2
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: LD_INT 2
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: LD_INT 2
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 1
23913: NEG
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 2
23924: NEG
23925: PUSH
23926: LD_INT 1
23928: NEG
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 2
23936: NEG
23937: PUSH
23938: LD_INT 2
23940: NEG
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 2
23948: NEG
23949: PUSH
23950: LD_INT 3
23952: NEG
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: NEG
23961: PUSH
23962: LD_INT 3
23964: NEG
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: LD_INT 3
23975: NEG
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: LD_INT 2
23986: NEG
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 3
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 3
24004: PUSH
24005: LD_INT 3
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 2
24014: PUSH
24015: LD_INT 3
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: LD_INT 3
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: LD_INT 3
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 3
24055: NEG
24056: PUSH
24057: LD_INT 2
24059: NEG
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 3
24067: NEG
24068: PUSH
24069: LD_INT 3
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24108: LD_ADDR_VAR 0 43
24112: PUSH
24113: LD_INT 0
24115: PUSH
24116: LD_INT 0
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: LD_INT 1
24128: NEG
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 1
24189: NEG
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: LD_INT 2
24204: NEG
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: LD_INT 0
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 2
24233: PUSH
24234: LD_INT 1
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: LD_INT 2
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: LD_INT 2
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 1
24263: NEG
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: NEG
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 2
24285: NEG
24286: PUSH
24287: LD_INT 1
24289: NEG
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 1
24297: NEG
24298: PUSH
24299: LD_INT 3
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: LD_INT 3
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: LD_INT 2
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 3
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 3
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: LD_INT 3
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 0
24372: PUSH
24373: LD_INT 3
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: LD_INT 2
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 2
24393: NEG
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 3
24404: NEG
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 3
24415: NEG
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24456: LD_ADDR_VAR 0 44
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: LD_INT 0
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 0
24504: PUSH
24505: LD_INT 1
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 1
24537: NEG
24538: PUSH
24539: LD_INT 2
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 2
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 2
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: LD_INT 2
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: NEG
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 2
24611: NEG
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: NEG
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 2
24634: NEG
24635: PUSH
24636: LD_INT 2
24638: NEG
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 2
24646: NEG
24647: PUSH
24648: LD_INT 3
24650: NEG
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: LD_INT 1
24661: NEG
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 3
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 3
24679: PUSH
24680: LD_INT 1
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 3
24689: PUSH
24690: LD_INT 2
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 3
24699: PUSH
24700: LD_INT 3
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: LD_INT 3
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 2
24719: NEG
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 3
24730: NEG
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 3
24741: NEG
24742: PUSH
24743: LD_INT 1
24745: NEG
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 3
24753: NEG
24754: PUSH
24755: LD_INT 2
24757: NEG
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 3
24765: NEG
24766: PUSH
24767: LD_INT 3
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24806: LD_ADDR_VAR 0 45
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: LD_INT 1
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 0
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PUSH
24866: LD_INT 0
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 1
24887: NEG
24888: PUSH
24889: LD_INT 2
24891: NEG
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: LD_INT 2
24902: NEG
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 2
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: LD_INT 2
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: LD_INT 2
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: LD_INT 2
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 1
24961: NEG
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 2
24972: NEG
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 2
24984: NEG
24985: PUSH
24986: LD_INT 2
24988: NEG
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 2
24996: NEG
24997: PUSH
24998: LD_INT 3
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: NEG
25009: PUSH
25010: LD_INT 3
25012: NEG
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: LD_INT 3
25023: NEG
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: PUSH
25032: LD_INT 2
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 3
25042: PUSH
25043: LD_INT 2
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 3
25052: PUSH
25053: LD_INT 3
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 2
25062: PUSH
25063: LD_INT 3
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 3
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: LD_INT 3
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: NEG
25093: PUSH
25094: LD_INT 2
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 3
25103: NEG
25104: PUSH
25105: LD_INT 2
25107: NEG
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 3
25115: NEG
25116: PUSH
25117: LD_INT 3
25119: NEG
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25156: LD_ADDR_VAR 0 46
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 1
25225: NEG
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 0
25249: PUSH
25250: LD_INT 2
25252: NEG
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 2
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: LD_INT 2
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: LD_INT 2
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 2
25322: NEG
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 2
25333: NEG
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: LD_INT 3
25349: NEG
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: LD_INT 3
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: PUSH
25369: LD_INT 2
25371: NEG
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 2
25379: PUSH
25380: LD_INT 1
25382: NEG
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 3
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 3
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: LD_INT 3
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: LD_INT 3
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 2
25441: NEG
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 3
25452: NEG
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 3
25463: NEG
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25504: LD_ADDR_VAR 0 47
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: LD_INT 0
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: LD_INT 2
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: LD_INT 2
25600: NEG
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 2
25619: NEG
25620: PUSH
25621: LD_INT 1
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 2
25631: NEG
25632: PUSH
25633: LD_INT 2
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25655: LD_ADDR_VAR 0 48
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: LD_INT 1
25675: NEG
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: LD_INT 1
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: PUSH
25738: LD_INT 2
25740: NEG
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: LD_INT 2
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 2
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25802: LD_ADDR_VAR 0 49
25806: PUSH
25807: LD_INT 0
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: LD_INT 1
25822: NEG
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: LD_INT 0
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 1
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 1
25871: NEG
25872: PUSH
25873: LD_INT 1
25875: NEG
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: LD_INT 1
25886: NEG
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 2
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 2
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: LD_INT 2
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25946: LD_ADDR_VAR 0 50
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 2
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 2
26037: PUSH
26038: LD_INT 2
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: LD_INT 2
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: LD_INT 2
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 1
26067: NEG
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26090: LD_ADDR_VAR 0 51
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: LD_INT 1
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: LD_INT 0
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: LD_INT 1
26163: NEG
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26237: LD_ADDR_VAR 0 52
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 0
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 1
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 0
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: LD_INT 2
26322: NEG
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: LD_INT 2
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26388: LD_ADDR_VAR 0 53
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: LD_INT 1
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: LD_INT 1
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: NEG
26470: PUSH
26471: LD_INT 2
26473: NEG
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 0
26481: PUSH
26482: LD_INT 2
26484: NEG
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 2
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: LD_INT 2
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 2
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 2
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 2
26564: NEG
26565: PUSH
26566: LD_INT 0
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: NEG
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 2
26587: NEG
26588: PUSH
26589: LD_INT 2
26591: NEG
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26618: LD_ADDR_VAR 0 54
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 1
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: NEG
26700: PUSH
26701: LD_INT 2
26703: NEG
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: LD_INT 2
26714: NEG
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 2
26733: PUSH
26734: LD_INT 0
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 2
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 2
26794: NEG
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 2
26805: NEG
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 2
26817: NEG
26818: PUSH
26819: LD_INT 2
26821: NEG
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26848: LD_ADDR_VAR 0 55
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 2
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 2
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: NEG
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: NEG
27036: PUSH
27037: LD_INT 1
27039: NEG
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 2
27047: NEG
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27078: LD_ADDR_VAR 0 56
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: LD_INT 0
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PUSH
27161: LD_INT 2
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: LD_INT 2
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 2
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 2
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 2
27213: PUSH
27214: LD_INT 2
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 2
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 2
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 2
27254: NEG
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: NEG
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 2
27277: NEG
27278: PUSH
27279: LD_INT 2
27281: NEG
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27308: LD_ADDR_VAR 0 57
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 1
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 0
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: NEG
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: LD_INT 2
27393: NEG
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: LD_INT 2
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 2
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 2
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 2
27443: PUSH
27444: LD_INT 2
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: LD_INT 2
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 2
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 2
27484: NEG
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: NEG
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 2
27507: NEG
27508: PUSH
27509: LD_INT 2
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27538: LD_ADDR_VAR 0 58
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: LD_INT 1
27558: NEG
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 1
27596: NEG
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 1
27619: NEG
27620: PUSH
27621: LD_INT 2
27623: NEG
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 2
27634: NEG
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 2
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 2
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 2
27673: PUSH
27674: LD_INT 2
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: LD_INT 2
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 2
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 2
27714: NEG
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 2
27725: NEG
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 2
27737: NEG
27738: PUSH
27739: LD_INT 2
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27768: LD_ADDR_VAR 0 59
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 0
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 1
27837: NEG
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27856: LD_ADDR_VAR 0 60
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 1
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: NEG
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: LD_INT 1
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27944: LD_ADDR_VAR 0 61
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: LD_INT 1
27964: NEG
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: NEG
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28032: LD_ADDR_VAR 0 62
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 0
28049: PUSH
28050: LD_INT 1
28052: NEG
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: LD_INT 1
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 1
28101: NEG
28102: PUSH
28103: LD_INT 1
28105: NEG
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28120: LD_ADDR_VAR 0 63
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28208: LD_ADDR_VAR 0 64
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: LD_INT 1
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 1
28266: NEG
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: ST_TO_ADDR
// end ; 1 :
28296: GO 34193
28298: LD_INT 1
28300: DOUBLE
28301: EQUAL
28302: IFTRUE 28306
28304: GO 30929
28306: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28307: LD_ADDR_VAR 0 11
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: LD_INT 3
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: LD_INT 3
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: LD_INT 2
28340: NEG
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: LIST
28350: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28351: LD_ADDR_VAR 0 12
28355: PUSH
28356: LD_INT 2
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 3
28369: PUSH
28370: LD_INT 0
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 3
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28392: LD_ADDR_VAR 0 13
28396: PUSH
28397: LD_INT 3
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 3
28409: PUSH
28410: LD_INT 3
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 3
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: LIST
28431: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28432: LD_ADDR_VAR 0 14
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 3
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 0
28449: PUSH
28450: LD_INT 3
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: LD_INT 2
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: LIST
28472: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28473: LD_ADDR_VAR 0 15
28477: PUSH
28478: LD_INT 2
28480: NEG
28481: PUSH
28482: LD_INT 1
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 3
28491: NEG
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 3
28502: NEG
28503: PUSH
28504: LD_INT 1
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28517: LD_ADDR_VAR 0 16
28521: PUSH
28522: LD_INT 2
28524: NEG
28525: PUSH
28526: LD_INT 3
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 3
28536: NEG
28537: PUSH
28538: LD_INT 2
28540: NEG
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 3
28548: NEG
28549: PUSH
28550: LD_INT 3
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28563: LD_ADDR_VAR 0 17
28567: PUSH
28568: LD_INT 1
28570: NEG
28571: PUSH
28572: LD_INT 3
28574: NEG
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: LD_INT 3
28585: NEG
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: LD_INT 2
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: LIST
28606: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28607: LD_ADDR_VAR 0 18
28611: PUSH
28612: LD_INT 2
28614: PUSH
28615: LD_INT 1
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 3
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 3
28635: PUSH
28636: LD_INT 1
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28648: LD_ADDR_VAR 0 19
28652: PUSH
28653: LD_INT 3
28655: PUSH
28656: LD_INT 2
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 3
28665: PUSH
28666: LD_INT 3
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: LD_INT 3
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28688: LD_ADDR_VAR 0 20
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: LD_INT 3
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: LD_INT 3
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: LD_INT 2
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28729: LD_ADDR_VAR 0 21
28733: PUSH
28734: LD_INT 2
28736: NEG
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 3
28747: NEG
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 3
28758: NEG
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: LIST
28772: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28773: LD_ADDR_VAR 0 22
28777: PUSH
28778: LD_INT 2
28780: NEG
28781: PUSH
28782: LD_INT 3
28784: NEG
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 3
28792: NEG
28793: PUSH
28794: LD_INT 2
28796: NEG
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 3
28804: NEG
28805: PUSH
28806: LD_INT 3
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28819: LD_ADDR_VAR 0 23
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: LD_INT 3
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 4
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: LD_INT 3
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28863: LD_ADDR_VAR 0 24
28867: PUSH
28868: LD_INT 3
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 3
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 4
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28904: LD_ADDR_VAR 0 25
28908: PUSH
28909: LD_INT 3
28911: PUSH
28912: LD_INT 3
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 4
28921: PUSH
28922: LD_INT 3
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 3
28931: PUSH
28932: LD_INT 4
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28944: LD_ADDR_VAR 0 26
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 3
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: LD_INT 4
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: LD_INT 3
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: LIST
28984: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28985: LD_ADDR_VAR 0 27
28989: PUSH
28990: LD_INT 3
28992: NEG
28993: PUSH
28994: LD_INT 0
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 3
29003: NEG
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 4
29014: NEG
29015: PUSH
29016: LD_INT 1
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29029: LD_ADDR_VAR 0 28
29033: PUSH
29034: LD_INT 3
29036: NEG
29037: PUSH
29038: LD_INT 3
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 3
29048: NEG
29049: PUSH
29050: LD_INT 4
29052: NEG
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 4
29060: NEG
29061: PUSH
29062: LD_INT 3
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29075: LD_ADDR_VAR 0 29
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: LD_INT 3
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 3
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: LD_INT 2
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: LD_INT 4
29120: NEG
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: LD_INT 4
29131: NEG
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 1
29139: PUSH
29140: LD_INT 3
29142: NEG
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 1
29150: NEG
29151: PUSH
29152: LD_INT 5
29154: NEG
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 5
29165: NEG
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: LD_INT 4
29176: NEG
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: LD_INT 6
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: LD_INT 6
29199: NEG
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: LD_INT 5
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29230: LD_ADDR_VAR 0 30
29234: PUSH
29235: LD_INT 2
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 3
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 3
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 3
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 4
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 4
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 4
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 5
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 5
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 5
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 6
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 6
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29373: LD_ADDR_VAR 0 31
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: LD_INT 2
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 3
29390: PUSH
29391: LD_INT 3
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 2
29400: PUSH
29401: LD_INT 3
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 4
29410: PUSH
29411: LD_INT 3
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 4
29420: PUSH
29421: LD_INT 4
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 3
29430: PUSH
29431: LD_INT 4
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 5
29440: PUSH
29441: LD_INT 4
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 5
29450: PUSH
29451: LD_INT 5
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 4
29460: PUSH
29461: LD_INT 5
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 6
29470: PUSH
29471: LD_INT 5
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 6
29480: PUSH
29481: LD_INT 6
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 5
29490: PUSH
29491: LD_INT 6
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29512: LD_ADDR_VAR 0 32
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: LD_INT 3
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: LD_INT 4
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 4
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 3
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: LD_INT 5
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: LD_INT 5
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 1
29601: NEG
29602: PUSH
29603: LD_INT 4
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: PUSH
29613: LD_INT 6
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: LD_INT 6
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 1
29632: NEG
29633: PUSH
29634: LD_INT 5
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29655: LD_ADDR_VAR 0 33
29659: PUSH
29660: LD_INT 2
29662: NEG
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: NEG
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 3
29684: NEG
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 3
29696: NEG
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 4
29707: NEG
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 4
29718: NEG
29719: PUSH
29720: LD_INT 1
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 4
29730: NEG
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 5
29741: NEG
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 5
29752: NEG
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 5
29764: NEG
29765: PUSH
29766: LD_INT 1
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 6
29775: NEG
29776: PUSH
29777: LD_INT 0
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 6
29786: NEG
29787: PUSH
29788: LD_INT 1
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29810: LD_ADDR_VAR 0 34
29814: PUSH
29815: LD_INT 2
29817: NEG
29818: PUSH
29819: LD_INT 3
29821: NEG
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 3
29829: NEG
29830: PUSH
29831: LD_INT 2
29833: NEG
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 3
29841: NEG
29842: PUSH
29843: LD_INT 3
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 3
29853: NEG
29854: PUSH
29855: LD_INT 4
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 4
29865: NEG
29866: PUSH
29867: LD_INT 3
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 4
29877: NEG
29878: PUSH
29879: LD_INT 4
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 4
29889: NEG
29890: PUSH
29891: LD_INT 5
29893: NEG
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 5
29901: NEG
29902: PUSH
29903: LD_INT 4
29905: NEG
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 5
29913: NEG
29914: PUSH
29915: LD_INT 5
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 5
29925: NEG
29926: PUSH
29927: LD_INT 6
29929: NEG
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 6
29937: NEG
29938: PUSH
29939: LD_INT 5
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 6
29949: NEG
29950: PUSH
29951: LD_INT 6
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29973: LD_ADDR_VAR 0 41
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 2
29983: NEG
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: NEG
29992: PUSH
29993: LD_INT 3
29995: NEG
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: LD_INT 2
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: LIST
30016: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30017: LD_ADDR_VAR 0 42
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 2
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 3
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30058: LD_ADDR_VAR 0 43
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: LD_INT 2
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 3
30075: PUSH
30076: LD_INT 2
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: LD_INT 3
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30098: LD_ADDR_VAR 0 44
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: LD_INT 3
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: LIST
30138: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30139: LD_ADDR_VAR 0 45
30143: PUSH
30144: LD_INT 2
30146: NEG
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 2
30157: NEG
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 3
30168: NEG
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30183: LD_ADDR_VAR 0 46
30187: PUSH
30188: LD_INT 2
30190: NEG
30191: PUSH
30192: LD_INT 2
30194: NEG
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 2
30202: NEG
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 3
30214: NEG
30215: PUSH
30216: LD_INT 2
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30229: LD_ADDR_VAR 0 47
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: LD_INT 3
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 1
30248: NEG
30249: PUSH
30250: LD_INT 3
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30262: LD_ADDR_VAR 0 48
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: LD_INT 2
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 2
30280: PUSH
30281: LD_INT 1
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30293: LD_ADDR_VAR 0 49
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: LD_INT 1
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 3
30310: PUSH
30311: LD_INT 2
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30322: LD_ADDR_VAR 0 50
30326: PUSH
30327: LD_INT 2
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: LD_INT 3
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30351: LD_ADDR_VAR 0 51
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: NEG
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30382: LD_ADDR_VAR 0 52
30386: PUSH
30387: LD_INT 3
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 3
30401: NEG
30402: PUSH
30403: LD_INT 2
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30415: LD_ADDR_VAR 0 53
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: LD_INT 3
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 0
30434: PUSH
30435: LD_INT 3
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: LD_INT 2
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: LIST
30458: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30459: LD_ADDR_VAR 0 54
30463: PUSH
30464: LD_INT 2
30466: PUSH
30467: LD_INT 1
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 3
30477: PUSH
30478: LD_INT 0
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 3
30487: PUSH
30488: LD_INT 1
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30500: LD_ADDR_VAR 0 55
30504: PUSH
30505: LD_INT 3
30507: PUSH
30508: LD_INT 2
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: LD_INT 3
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: LD_INT 3
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: LIST
30539: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30540: LD_ADDR_VAR 0 56
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: LD_INT 3
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: LD_INT 3
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: LD_INT 2
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: LIST
30580: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30581: LD_ADDR_VAR 0 57
30585: PUSH
30586: LD_INT 2
30588: NEG
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 3
30599: NEG
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 3
30610: NEG
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30625: LD_ADDR_VAR 0 58
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: LD_INT 3
30636: NEG
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 3
30644: NEG
30645: PUSH
30646: LD_INT 2
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 3
30656: NEG
30657: PUSH
30658: LD_INT 3
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30671: LD_ADDR_VAR 0 59
30675: PUSH
30676: LD_INT 1
30678: NEG
30679: PUSH
30680: LD_INT 2
30682: NEG
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: LD_INT 2
30693: NEG
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30715: LD_ADDR_VAR 0 60
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 2
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 2
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: LIST
30755: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30756: LD_ADDR_VAR 0 61
30760: PUSH
30761: LD_INT 2
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: LD_INT 2
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: LIST
30795: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30796: LD_ADDR_VAR 0 62
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 0
30813: PUSH
30814: LD_INT 2
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30837: LD_ADDR_VAR 0 63
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: LD_INT 1
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 2
30855: NEG
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 2
30866: NEG
30867: PUSH
30868: LD_INT 1
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: LIST
30880: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30881: LD_ADDR_VAR 0 64
30885: PUSH
30886: LD_INT 1
30888: NEG
30889: PUSH
30890: LD_INT 2
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 2
30900: NEG
30901: PUSH
30902: LD_INT 1
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: NEG
30913: PUSH
30914: LD_INT 2
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: ST_TO_ADDR
// end ; 2 :
30927: GO 34193
30929: LD_INT 2
30931: DOUBLE
30932: EQUAL
30933: IFTRUE 30937
30935: GO 34192
30937: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30938: LD_ADDR_VAR 0 29
30942: PUSH
30943: LD_INT 4
30945: PUSH
30946: LD_INT 0
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 4
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 5
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 5
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 4
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 3
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 3
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 3
31017: PUSH
31018: LD_INT 2
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 5
31028: PUSH
31029: LD_INT 2
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 3
31038: PUSH
31039: LD_INT 3
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 3
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 4
31058: PUSH
31059: LD_INT 3
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 4
31068: PUSH
31069: LD_INT 4
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 3
31078: PUSH
31079: LD_INT 4
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 2
31088: PUSH
31089: LD_INT 3
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 2
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 4
31108: PUSH
31109: LD_INT 2
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: LD_INT 4
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: LD_INT 4
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: LD_INT 4
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 5
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: LD_INT 5
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: LD_INT 4
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 1
31189: NEG
31190: PUSH
31191: LD_INT 3
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: LD_INT 5
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 2
31210: NEG
31211: PUSH
31212: LD_INT 3
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 3
31221: NEG
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 3
31232: NEG
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 2
31244: NEG
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: LD_INT 1
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 3
31266: NEG
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 4
31277: NEG
31278: PUSH
31279: LD_INT 0
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 4
31288: NEG
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 4
31300: NEG
31301: PUSH
31302: LD_INT 2
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 2
31312: NEG
31313: PUSH
31314: LD_INT 2
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 4
31323: NEG
31324: PUSH
31325: LD_INT 4
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 4
31335: NEG
31336: PUSH
31337: LD_INT 5
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 3
31347: NEG
31348: PUSH
31349: LD_INT 4
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 3
31359: NEG
31360: PUSH
31361: LD_INT 3
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 4
31371: NEG
31372: PUSH
31373: LD_INT 3
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 5
31383: NEG
31384: PUSH
31385: LD_INT 4
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 5
31395: NEG
31396: PUSH
31397: LD_INT 5
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 3
31407: NEG
31408: PUSH
31409: LD_INT 5
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 5
31419: NEG
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31476: LD_ADDR_VAR 0 30
31480: PUSH
31481: LD_INT 4
31483: PUSH
31484: LD_INT 4
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 4
31493: PUSH
31494: LD_INT 3
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 5
31503: PUSH
31504: LD_INT 4
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 5
31513: PUSH
31514: LD_INT 5
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 4
31523: PUSH
31524: LD_INT 5
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 3
31533: PUSH
31534: LD_INT 4
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 3
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 5
31553: PUSH
31554: LD_INT 3
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 3
31563: PUSH
31564: LD_INT 5
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: LD_INT 3
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 3
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: LD_INT 4
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: LD_INT 4
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: LD_INT 3
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 1
31634: NEG
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 2
31645: PUSH
31646: LD_INT 4
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 2
31655: NEG
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 4
31666: NEG
31667: PUSH
31668: LD_INT 0
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 4
31677: NEG
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 3
31700: NEG
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 4
31711: NEG
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 5
31722: NEG
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 5
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 5
31745: NEG
31746: PUSH
31747: LD_INT 2
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 3
31757: NEG
31758: PUSH
31759: LD_INT 2
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 3
31768: NEG
31769: PUSH
31770: LD_INT 3
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 3
31780: NEG
31781: PUSH
31782: LD_INT 4
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 2
31792: NEG
31793: PUSH
31794: LD_INT 3
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: LD_INT 2
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 3
31816: NEG
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 4
31828: NEG
31829: PUSH
31830: LD_INT 3
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 4
31840: NEG
31841: PUSH
31842: LD_INT 4
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 2
31852: NEG
31853: PUSH
31854: LD_INT 4
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 4
31864: NEG
31865: PUSH
31866: LD_INT 2
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: LD_INT 4
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 5
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 4
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: LD_INT 3
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 3
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: LD_INT 4
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: LD_INT 5
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: LD_INT 3
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: LD_INT 5
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32023: LD_ADDR_VAR 0 31
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 4
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: LD_INT 3
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 1
32050: PUSH
32051: LD_INT 4
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: LD_INT 5
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 0
32070: PUSH
32071: LD_INT 5
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: LD_INT 4
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: LD_INT 3
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 2
32102: PUSH
32103: LD_INT 5
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 3
32123: NEG
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 3
32134: NEG
32135: PUSH
32136: LD_INT 1
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 2
32146: NEG
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 3
32168: NEG
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 4
32179: NEG
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 4
32190: NEG
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 4
32202: NEG
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: NEG
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 4
32225: NEG
32226: PUSH
32227: LD_INT 4
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 4
32237: NEG
32238: PUSH
32239: LD_INT 5
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 3
32249: NEG
32250: PUSH
32251: LD_INT 4
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 3
32261: NEG
32262: PUSH
32263: LD_INT 3
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 4
32273: NEG
32274: PUSH
32275: LD_INT 3
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 5
32285: NEG
32286: PUSH
32287: LD_INT 4
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 5
32297: NEG
32298: PUSH
32299: LD_INT 5
32301: NEG
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 3
32309: NEG
32310: PUSH
32311: LD_INT 5
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 5
32321: NEG
32322: PUSH
32323: LD_INT 3
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: LD_INT 3
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: LD_INT 4
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: LD_INT 3
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: LD_INT 2
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: LD_INT 2
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: NEG
32389: PUSH
32390: LD_INT 3
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: LD_INT 4
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: LD_INT 2
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: LD_INT 4
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 4
32435: PUSH
32436: LD_INT 0
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 4
32445: PUSH
32446: LD_INT 1
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 5
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 5
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 4
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 3
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 3
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 3
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 5
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32573: LD_ADDR_VAR 0 32
32577: PUSH
32578: LD_INT 4
32580: NEG
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 4
32591: NEG
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 3
32603: NEG
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 3
32614: NEG
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 4
32625: NEG
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 5
32636: NEG
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 5
32647: NEG
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 5
32659: NEG
32660: PUSH
32661: LD_INT 2
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 3
32671: NEG
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 3
32682: NEG
32683: PUSH
32684: LD_INT 3
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 3
32694: NEG
32695: PUSH
32696: LD_INT 4
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 2
32706: NEG
32707: PUSH
32708: LD_INT 3
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 2
32718: NEG
32719: PUSH
32720: LD_INT 2
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 3
32730: NEG
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 4
32742: NEG
32743: PUSH
32744: LD_INT 3
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 4
32754: NEG
32755: PUSH
32756: LD_INT 4
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: LD_INT 4
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 4
32778: NEG
32779: PUSH
32780: LD_INT 2
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: LD_INT 4
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 0
32801: PUSH
32802: LD_INT 5
32804: NEG
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: LD_INT 4
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: LD_INT 3
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: LD_INT 3
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: LD_INT 4
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: LD_INT 5
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: LD_INT 3
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: LD_INT 5
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 3
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 3
32902: PUSH
32903: LD_INT 1
32905: NEG
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 4
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 4
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 2
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 2
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 4
32975: PUSH
32976: LD_INT 2
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 4
32985: PUSH
32986: LD_INT 4
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 4
32995: PUSH
32996: LD_INT 3
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 5
33005: PUSH
33006: LD_INT 4
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 5
33015: PUSH
33016: LD_INT 5
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 4
33025: PUSH
33026: LD_INT 5
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: LD_INT 4
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 3
33045: PUSH
33046: LD_INT 3
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 5
33055: PUSH
33056: LD_INT 3
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 3
33065: PUSH
33066: LD_INT 5
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33120: LD_ADDR_VAR 0 33
33124: PUSH
33125: LD_INT 4
33127: NEG
33128: PUSH
33129: LD_INT 4
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 4
33139: NEG
33140: PUSH
33141: LD_INT 5
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 3
33151: NEG
33152: PUSH
33153: LD_INT 4
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 3
33163: NEG
33164: PUSH
33165: LD_INT 3
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 4
33175: NEG
33176: PUSH
33177: LD_INT 3
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 5
33187: NEG
33188: PUSH
33189: LD_INT 4
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 5
33199: NEG
33200: PUSH
33201: LD_INT 5
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 3
33211: NEG
33212: PUSH
33213: LD_INT 5
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 5
33223: NEG
33224: PUSH
33225: LD_INT 3
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 3
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: LD_INT 4
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 3
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 2
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: LD_INT 2
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 1
33290: NEG
33291: PUSH
33292: LD_INT 3
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 4
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: LD_INT 4
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 4
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 4
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 5
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 5
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 4
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 3
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 3
33398: PUSH
33399: LD_INT 1
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 3
33409: PUSH
33410: LD_INT 2
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 5
33420: PUSH
33421: LD_INT 2
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 3
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 3
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: LD_INT 3
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 4
33460: PUSH
33461: LD_INT 4
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 3
33470: PUSH
33471: LD_INT 4
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 2
33480: PUSH
33481: LD_INT 3
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 2
33490: PUSH
33491: LD_INT 2
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 4
33500: PUSH
33501: LD_INT 2
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 2
33510: PUSH
33511: LD_INT 4
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: LD_INT 4
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: LD_INT 3
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: LD_INT 4
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 5
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: LD_INT 5
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: NEG
33571: PUSH
33572: LD_INT 4
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: LD_INT 3
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: LD_INT 5
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 2
33602: NEG
33603: PUSH
33604: LD_INT 3
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33658: LD_ADDR_VAR 0 34
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: LD_INT 4
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: LD_INT 5
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: LD_INT 4
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 3
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: LD_INT 3
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 1
33720: NEG
33721: PUSH
33722: LD_INT 4
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: NEG
33733: PUSH
33734: LD_INT 5
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: LD_INT 3
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 2
33755: NEG
33756: PUSH
33757: LD_INT 5
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 3
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 3
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 4
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 4
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 3
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 2
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 2
33839: PUSH
33840: LD_INT 2
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 4
33850: PUSH
33851: LD_INT 2
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 4
33860: PUSH
33861: LD_INT 4
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 4
33870: PUSH
33871: LD_INT 3
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 5
33880: PUSH
33881: LD_INT 4
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 5
33890: PUSH
33891: LD_INT 5
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 4
33900: PUSH
33901: LD_INT 5
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: LD_INT 4
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 3
33920: PUSH
33921: LD_INT 3
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 5
33930: PUSH
33931: LD_INT 3
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 3
33940: PUSH
33941: LD_INT 5
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 0
33950: PUSH
33951: LD_INT 3
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: LD_INT 2
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: LD_INT 4
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: LD_INT 4
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 1
34000: NEG
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: LD_INT 2
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: LD_INT 4
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: NEG
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 4
34043: NEG
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 4
34054: NEG
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 3
34066: NEG
34067: PUSH
34068: LD_INT 0
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 3
34077: NEG
34078: PUSH
34079: LD_INT 1
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 4
34088: NEG
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 5
34099: NEG
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 5
34110: NEG
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 5
34122: NEG
34123: PUSH
34124: LD_INT 2
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 3
34134: NEG
34135: PUSH
34136: LD_INT 2
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: ST_TO_ADDR
// end ; end ;
34190: GO 34193
34192: POP
// case btype of b_depot , b_warehouse :
34193: LD_VAR 0 1
34197: PUSH
34198: LD_INT 0
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34212
34204: LD_INT 1
34206: DOUBLE
34207: EQUAL
34208: IFTRUE 34212
34210: GO 34413
34212: POP
// case nation of nation_american :
34213: LD_VAR 0 5
34217: PUSH
34218: LD_INT 1
34220: DOUBLE
34221: EQUAL
34222: IFTRUE 34226
34224: GO 34282
34226: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34227: LD_ADDR_VAR 0 9
34231: PUSH
34232: LD_VAR 0 11
34236: PUSH
34237: LD_VAR 0 12
34241: PUSH
34242: LD_VAR 0 13
34246: PUSH
34247: LD_VAR 0 14
34251: PUSH
34252: LD_VAR 0 15
34256: PUSH
34257: LD_VAR 0 16
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: PUSH
34270: LD_VAR 0 4
34274: PUSH
34275: LD_INT 1
34277: PLUS
34278: ARRAY
34279: ST_TO_ADDR
34280: GO 34411
34282: LD_INT 2
34284: DOUBLE
34285: EQUAL
34286: IFTRUE 34290
34288: GO 34346
34290: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34291: LD_ADDR_VAR 0 9
34295: PUSH
34296: LD_VAR 0 17
34300: PUSH
34301: LD_VAR 0 18
34305: PUSH
34306: LD_VAR 0 19
34310: PUSH
34311: LD_VAR 0 20
34315: PUSH
34316: LD_VAR 0 21
34320: PUSH
34321: LD_VAR 0 22
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: PUSH
34334: LD_VAR 0 4
34338: PUSH
34339: LD_INT 1
34341: PLUS
34342: ARRAY
34343: ST_TO_ADDR
34344: GO 34411
34346: LD_INT 3
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34354
34352: GO 34410
34354: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34355: LD_ADDR_VAR 0 9
34359: PUSH
34360: LD_VAR 0 23
34364: PUSH
34365: LD_VAR 0 24
34369: PUSH
34370: LD_VAR 0 25
34374: PUSH
34375: LD_VAR 0 26
34379: PUSH
34380: LD_VAR 0 27
34384: PUSH
34385: LD_VAR 0 28
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: PUSH
34398: LD_VAR 0 4
34402: PUSH
34403: LD_INT 1
34405: PLUS
34406: ARRAY
34407: ST_TO_ADDR
34408: GO 34411
34410: POP
34411: GO 34966
34413: LD_INT 2
34415: DOUBLE
34416: EQUAL
34417: IFTRUE 34427
34419: LD_INT 3
34421: DOUBLE
34422: EQUAL
34423: IFTRUE 34427
34425: GO 34483
34427: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34428: LD_ADDR_VAR 0 9
34432: PUSH
34433: LD_VAR 0 29
34437: PUSH
34438: LD_VAR 0 30
34442: PUSH
34443: LD_VAR 0 31
34447: PUSH
34448: LD_VAR 0 32
34452: PUSH
34453: LD_VAR 0 33
34457: PUSH
34458: LD_VAR 0 34
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: PUSH
34471: LD_VAR 0 4
34475: PUSH
34476: LD_INT 1
34478: PLUS
34479: ARRAY
34480: ST_TO_ADDR
34481: GO 34966
34483: LD_INT 16
34485: DOUBLE
34486: EQUAL
34487: IFTRUE 34545
34489: LD_INT 17
34491: DOUBLE
34492: EQUAL
34493: IFTRUE 34545
34495: LD_INT 18
34497: DOUBLE
34498: EQUAL
34499: IFTRUE 34545
34501: LD_INT 19
34503: DOUBLE
34504: EQUAL
34505: IFTRUE 34545
34507: LD_INT 22
34509: DOUBLE
34510: EQUAL
34511: IFTRUE 34545
34513: LD_INT 20
34515: DOUBLE
34516: EQUAL
34517: IFTRUE 34545
34519: LD_INT 21
34521: DOUBLE
34522: EQUAL
34523: IFTRUE 34545
34525: LD_INT 23
34527: DOUBLE
34528: EQUAL
34529: IFTRUE 34545
34531: LD_INT 24
34533: DOUBLE
34534: EQUAL
34535: IFTRUE 34545
34537: LD_INT 25
34539: DOUBLE
34540: EQUAL
34541: IFTRUE 34545
34543: GO 34601
34545: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34546: LD_ADDR_VAR 0 9
34550: PUSH
34551: LD_VAR 0 35
34555: PUSH
34556: LD_VAR 0 36
34560: PUSH
34561: LD_VAR 0 37
34565: PUSH
34566: LD_VAR 0 38
34570: PUSH
34571: LD_VAR 0 39
34575: PUSH
34576: LD_VAR 0 40
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: PUSH
34589: LD_VAR 0 4
34593: PUSH
34594: LD_INT 1
34596: PLUS
34597: ARRAY
34598: ST_TO_ADDR
34599: GO 34966
34601: LD_INT 6
34603: DOUBLE
34604: EQUAL
34605: IFTRUE 34657
34607: LD_INT 7
34609: DOUBLE
34610: EQUAL
34611: IFTRUE 34657
34613: LD_INT 8
34615: DOUBLE
34616: EQUAL
34617: IFTRUE 34657
34619: LD_INT 13
34621: DOUBLE
34622: EQUAL
34623: IFTRUE 34657
34625: LD_INT 12
34627: DOUBLE
34628: EQUAL
34629: IFTRUE 34657
34631: LD_INT 15
34633: DOUBLE
34634: EQUAL
34635: IFTRUE 34657
34637: LD_INT 11
34639: DOUBLE
34640: EQUAL
34641: IFTRUE 34657
34643: LD_INT 14
34645: DOUBLE
34646: EQUAL
34647: IFTRUE 34657
34649: LD_INT 10
34651: DOUBLE
34652: EQUAL
34653: IFTRUE 34657
34655: GO 34713
34657: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34658: LD_ADDR_VAR 0 9
34662: PUSH
34663: LD_VAR 0 41
34667: PUSH
34668: LD_VAR 0 42
34672: PUSH
34673: LD_VAR 0 43
34677: PUSH
34678: LD_VAR 0 44
34682: PUSH
34683: LD_VAR 0 45
34687: PUSH
34688: LD_VAR 0 46
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: PUSH
34701: LD_VAR 0 4
34705: PUSH
34706: LD_INT 1
34708: PLUS
34709: ARRAY
34710: ST_TO_ADDR
34711: GO 34966
34713: LD_INT 36
34715: DOUBLE
34716: EQUAL
34717: IFTRUE 34721
34719: GO 34777
34721: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34722: LD_ADDR_VAR 0 9
34726: PUSH
34727: LD_VAR 0 47
34731: PUSH
34732: LD_VAR 0 48
34736: PUSH
34737: LD_VAR 0 49
34741: PUSH
34742: LD_VAR 0 50
34746: PUSH
34747: LD_VAR 0 51
34751: PUSH
34752: LD_VAR 0 52
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: PUSH
34765: LD_VAR 0 4
34769: PUSH
34770: LD_INT 1
34772: PLUS
34773: ARRAY
34774: ST_TO_ADDR
34775: GO 34966
34777: LD_INT 4
34779: DOUBLE
34780: EQUAL
34781: IFTRUE 34803
34783: LD_INT 5
34785: DOUBLE
34786: EQUAL
34787: IFTRUE 34803
34789: LD_INT 34
34791: DOUBLE
34792: EQUAL
34793: IFTRUE 34803
34795: LD_INT 37
34797: DOUBLE
34798: EQUAL
34799: IFTRUE 34803
34801: GO 34859
34803: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34804: LD_ADDR_VAR 0 9
34808: PUSH
34809: LD_VAR 0 53
34813: PUSH
34814: LD_VAR 0 54
34818: PUSH
34819: LD_VAR 0 55
34823: PUSH
34824: LD_VAR 0 56
34828: PUSH
34829: LD_VAR 0 57
34833: PUSH
34834: LD_VAR 0 58
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: PUSH
34847: LD_VAR 0 4
34851: PUSH
34852: LD_INT 1
34854: PLUS
34855: ARRAY
34856: ST_TO_ADDR
34857: GO 34966
34859: LD_INT 31
34861: DOUBLE
34862: EQUAL
34863: IFTRUE 34909
34865: LD_INT 32
34867: DOUBLE
34868: EQUAL
34869: IFTRUE 34909
34871: LD_INT 33
34873: DOUBLE
34874: EQUAL
34875: IFTRUE 34909
34877: LD_INT 27
34879: DOUBLE
34880: EQUAL
34881: IFTRUE 34909
34883: LD_INT 26
34885: DOUBLE
34886: EQUAL
34887: IFTRUE 34909
34889: LD_INT 28
34891: DOUBLE
34892: EQUAL
34893: IFTRUE 34909
34895: LD_INT 29
34897: DOUBLE
34898: EQUAL
34899: IFTRUE 34909
34901: LD_INT 30
34903: DOUBLE
34904: EQUAL
34905: IFTRUE 34909
34907: GO 34965
34909: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34910: LD_ADDR_VAR 0 9
34914: PUSH
34915: LD_VAR 0 59
34919: PUSH
34920: LD_VAR 0 60
34924: PUSH
34925: LD_VAR 0 61
34929: PUSH
34930: LD_VAR 0 62
34934: PUSH
34935: LD_VAR 0 63
34939: PUSH
34940: LD_VAR 0 64
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: PUSH
34953: LD_VAR 0 4
34957: PUSH
34958: LD_INT 1
34960: PLUS
34961: ARRAY
34962: ST_TO_ADDR
34963: GO 34966
34965: POP
// temp_list2 = [ ] ;
34966: LD_ADDR_VAR 0 10
34970: PUSH
34971: EMPTY
34972: ST_TO_ADDR
// for i in temp_list do
34973: LD_ADDR_VAR 0 8
34977: PUSH
34978: LD_VAR 0 9
34982: PUSH
34983: FOR_IN
34984: IFFALSE 35036
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34986: LD_ADDR_VAR 0 10
34990: PUSH
34991: LD_VAR 0 10
34995: PUSH
34996: LD_VAR 0 8
35000: PUSH
35001: LD_INT 1
35003: ARRAY
35004: PUSH
35005: LD_VAR 0 2
35009: PLUS
35010: PUSH
35011: LD_VAR 0 8
35015: PUSH
35016: LD_INT 2
35018: ARRAY
35019: PUSH
35020: LD_VAR 0 3
35024: PLUS
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: EMPTY
35031: LIST
35032: ADD
35033: ST_TO_ADDR
35034: GO 34983
35036: POP
35037: POP
// result = temp_list2 ;
35038: LD_ADDR_VAR 0 7
35042: PUSH
35043: LD_VAR 0 10
35047: ST_TO_ADDR
// end ;
35048: LD_VAR 0 7
35052: RET
// export function EnemyInRange ( unit , dist ) ; begin
35053: LD_INT 0
35055: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35056: LD_ADDR_VAR 0 3
35060: PUSH
35061: LD_VAR 0 1
35065: PPUSH
35066: CALL_OW 255
35070: PPUSH
35071: LD_VAR 0 1
35075: PPUSH
35076: CALL_OW 250
35080: PPUSH
35081: LD_VAR 0 1
35085: PPUSH
35086: CALL_OW 251
35090: PPUSH
35091: LD_VAR 0 2
35095: PPUSH
35096: CALL 8310 0 4
35100: PUSH
35101: LD_INT 4
35103: ARRAY
35104: ST_TO_ADDR
// end ;
35105: LD_VAR 0 3
35109: RET
// export function PlayerSeeMe ( unit ) ; begin
35110: LD_INT 0
35112: PPUSH
// result := See ( your_side , unit ) ;
35113: LD_ADDR_VAR 0 2
35117: PUSH
35118: LD_OWVAR 2
35122: PPUSH
35123: LD_VAR 0 1
35127: PPUSH
35128: CALL_OW 292
35132: ST_TO_ADDR
// end ;
35133: LD_VAR 0 2
35137: RET
// export function ReverseDir ( unit ) ; begin
35138: LD_INT 0
35140: PPUSH
// if not unit then
35141: LD_VAR 0 1
35145: NOT
35146: IFFALSE 35150
// exit ;
35148: GO 35173
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35150: LD_ADDR_VAR 0 2
35154: PUSH
35155: LD_VAR 0 1
35159: PPUSH
35160: CALL_OW 254
35164: PUSH
35165: LD_INT 3
35167: PLUS
35168: PUSH
35169: LD_INT 6
35171: MOD
35172: ST_TO_ADDR
// end ;
35173: LD_VAR 0 2
35177: RET
// export function ReverseArray ( array ) ; var i ; begin
35178: LD_INT 0
35180: PPUSH
35181: PPUSH
// if not array then
35182: LD_VAR 0 1
35186: NOT
35187: IFFALSE 35191
// exit ;
35189: GO 35246
// result := [ ] ;
35191: LD_ADDR_VAR 0 2
35195: PUSH
35196: EMPTY
35197: ST_TO_ADDR
// for i := array downto 1 do
35198: LD_ADDR_VAR 0 3
35202: PUSH
35203: DOUBLE
35204: LD_VAR 0 1
35208: INC
35209: ST_TO_ADDR
35210: LD_INT 1
35212: PUSH
35213: FOR_DOWNTO
35214: IFFALSE 35244
// result := Join ( result , array [ i ] ) ;
35216: LD_ADDR_VAR 0 2
35220: PUSH
35221: LD_VAR 0 2
35225: PPUSH
35226: LD_VAR 0 1
35230: PUSH
35231: LD_VAR 0 3
35235: ARRAY
35236: PPUSH
35237: CALL 40098 0 2
35241: ST_TO_ADDR
35242: GO 35213
35244: POP
35245: POP
// end ;
35246: LD_VAR 0 2
35250: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35251: LD_INT 0
35253: PPUSH
35254: PPUSH
35255: PPUSH
35256: PPUSH
35257: PPUSH
35258: PPUSH
// if not unit or not hexes then
35259: LD_VAR 0 1
35263: NOT
35264: IFTRUE 35273
35266: PUSH
35267: LD_VAR 0 2
35271: NOT
35272: OR
35273: IFFALSE 35277
// exit ;
35275: GO 35400
// dist := 9999 ;
35277: LD_ADDR_VAR 0 5
35281: PUSH
35282: LD_INT 9999
35284: ST_TO_ADDR
// for i = 1 to hexes do
35285: LD_ADDR_VAR 0 4
35289: PUSH
35290: DOUBLE
35291: LD_INT 1
35293: DEC
35294: ST_TO_ADDR
35295: LD_VAR 0 2
35299: PUSH
35300: FOR_TO
35301: IFFALSE 35388
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35303: LD_ADDR_VAR 0 6
35307: PUSH
35308: LD_VAR 0 1
35312: PPUSH
35313: LD_VAR 0 2
35317: PUSH
35318: LD_VAR 0 4
35322: ARRAY
35323: PUSH
35324: LD_INT 1
35326: ARRAY
35327: PPUSH
35328: LD_VAR 0 2
35332: PUSH
35333: LD_VAR 0 4
35337: ARRAY
35338: PUSH
35339: LD_INT 2
35341: ARRAY
35342: PPUSH
35343: CALL_OW 297
35347: ST_TO_ADDR
// if tdist < dist then
35348: LD_VAR 0 6
35352: PUSH
35353: LD_VAR 0 5
35357: LESS
35358: IFFALSE 35386
// begin hex := hexes [ i ] ;
35360: LD_ADDR_VAR 0 8
35364: PUSH
35365: LD_VAR 0 2
35369: PUSH
35370: LD_VAR 0 4
35374: ARRAY
35375: ST_TO_ADDR
// dist := tdist ;
35376: LD_ADDR_VAR 0 5
35380: PUSH
35381: LD_VAR 0 6
35385: ST_TO_ADDR
// end ; end ;
35386: GO 35300
35388: POP
35389: POP
// result := hex ;
35390: LD_ADDR_VAR 0 3
35394: PUSH
35395: LD_VAR 0 8
35399: ST_TO_ADDR
// end ;
35400: LD_VAR 0 3
35404: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35405: LD_INT 0
35407: PPUSH
35408: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35409: LD_VAR 0 1
35413: NOT
35414: IFTRUE 35453
35416: PUSH
35417: LD_VAR 0 1
35421: PUSH
35422: LD_INT 21
35424: PUSH
35425: LD_INT 2
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 23
35434: PUSH
35435: LD_INT 2
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PPUSH
35446: CALL_OW 69
35450: IN
35451: NOT
35452: OR
35453: IFFALSE 35457
// exit ;
35455: GO 35504
// for i = 1 to 3 do
35457: LD_ADDR_VAR 0 3
35461: PUSH
35462: DOUBLE
35463: LD_INT 1
35465: DEC
35466: ST_TO_ADDR
35467: LD_INT 3
35469: PUSH
35470: FOR_TO
35471: IFFALSE 35502
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35473: LD_VAR 0 1
35477: PPUSH
35478: CALL_OW 250
35482: PPUSH
35483: LD_VAR 0 1
35487: PPUSH
35488: CALL_OW 251
35492: PPUSH
35493: LD_INT 1
35495: PPUSH
35496: CALL_OW 453
35500: GO 35470
35502: POP
35503: POP
// end ;
35504: LD_VAR 0 2
35508: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35509: LD_INT 0
35511: PPUSH
35512: PPUSH
35513: PPUSH
35514: PPUSH
35515: PPUSH
35516: PPUSH
// if not unit or not enemy_unit then
35517: LD_VAR 0 1
35521: NOT
35522: IFTRUE 35531
35524: PUSH
35525: LD_VAR 0 2
35529: NOT
35530: OR
35531: IFFALSE 35535
// exit ;
35533: GO 36016
// if GetLives ( i ) < 250 then
35535: LD_VAR 0 4
35539: PPUSH
35540: CALL_OW 256
35544: PUSH
35545: LD_INT 250
35547: LESS
35548: IFFALSE 35561
// begin ComAutodestruct ( i ) ;
35550: LD_VAR 0 4
35554: PPUSH
35555: CALL 35405 0 1
// exit ;
35559: GO 36016
// end ; x := GetX ( enemy_unit ) ;
35561: LD_ADDR_VAR 0 7
35565: PUSH
35566: LD_VAR 0 2
35570: PPUSH
35571: CALL_OW 250
35575: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35576: LD_ADDR_VAR 0 8
35580: PUSH
35581: LD_VAR 0 2
35585: PPUSH
35586: CALL_OW 251
35590: ST_TO_ADDR
// if not x or not y then
35591: LD_VAR 0 7
35595: NOT
35596: IFTRUE 35605
35598: PUSH
35599: LD_VAR 0 8
35603: NOT
35604: OR
35605: IFFALSE 35609
// exit ;
35607: GO 36016
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35609: LD_ADDR_VAR 0 6
35613: PUSH
35614: LD_VAR 0 7
35618: PPUSH
35619: LD_INT 0
35621: PPUSH
35622: LD_INT 4
35624: PPUSH
35625: CALL_OW 272
35629: PUSH
35630: LD_VAR 0 8
35634: PPUSH
35635: LD_INT 0
35637: PPUSH
35638: LD_INT 4
35640: PPUSH
35641: CALL_OW 273
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_VAR 0 7
35654: PPUSH
35655: LD_INT 1
35657: PPUSH
35658: LD_INT 4
35660: PPUSH
35661: CALL_OW 272
35665: PUSH
35666: LD_VAR 0 8
35670: PPUSH
35671: LD_INT 1
35673: PPUSH
35674: LD_INT 4
35676: PPUSH
35677: CALL_OW 273
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_VAR 0 7
35690: PPUSH
35691: LD_INT 2
35693: PPUSH
35694: LD_INT 4
35696: PPUSH
35697: CALL_OW 272
35701: PUSH
35702: LD_VAR 0 8
35706: PPUSH
35707: LD_INT 2
35709: PPUSH
35710: LD_INT 4
35712: PPUSH
35713: CALL_OW 273
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_VAR 0 7
35726: PPUSH
35727: LD_INT 3
35729: PPUSH
35730: LD_INT 4
35732: PPUSH
35733: CALL_OW 272
35737: PUSH
35738: LD_VAR 0 8
35742: PPUSH
35743: LD_INT 3
35745: PPUSH
35746: LD_INT 4
35748: PPUSH
35749: CALL_OW 273
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_VAR 0 7
35762: PPUSH
35763: LD_INT 4
35765: PPUSH
35766: LD_INT 4
35768: PPUSH
35769: CALL_OW 272
35773: PUSH
35774: LD_VAR 0 8
35778: PPUSH
35779: LD_INT 4
35781: PPUSH
35782: LD_INT 4
35784: PPUSH
35785: CALL_OW 273
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_VAR 0 7
35798: PPUSH
35799: LD_INT 5
35801: PPUSH
35802: LD_INT 4
35804: PPUSH
35805: CALL_OW 272
35809: PUSH
35810: LD_VAR 0 8
35814: PPUSH
35815: LD_INT 5
35817: PPUSH
35818: LD_INT 4
35820: PPUSH
35821: CALL_OW 273
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: ST_TO_ADDR
// for i = tmp downto 1 do
35838: LD_ADDR_VAR 0 4
35842: PUSH
35843: DOUBLE
35844: LD_VAR 0 6
35848: INC
35849: ST_TO_ADDR
35850: LD_INT 1
35852: PUSH
35853: FOR_DOWNTO
35854: IFFALSE 35957
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35856: LD_VAR 0 6
35860: PUSH
35861: LD_VAR 0 4
35865: ARRAY
35866: PUSH
35867: LD_INT 1
35869: ARRAY
35870: PPUSH
35871: LD_VAR 0 6
35875: PUSH
35876: LD_VAR 0 4
35880: ARRAY
35881: PUSH
35882: LD_INT 2
35884: ARRAY
35885: PPUSH
35886: CALL_OW 488
35890: NOT
35891: IFTRUE 35933
35893: PUSH
35894: LD_VAR 0 6
35898: PUSH
35899: LD_VAR 0 4
35903: ARRAY
35904: PUSH
35905: LD_INT 1
35907: ARRAY
35908: PPUSH
35909: LD_VAR 0 6
35913: PUSH
35914: LD_VAR 0 4
35918: ARRAY
35919: PUSH
35920: LD_INT 2
35922: ARRAY
35923: PPUSH
35924: CALL_OW 428
35928: PUSH
35929: LD_INT 0
35931: NONEQUAL
35932: OR
35933: IFFALSE 35955
// tmp := Delete ( tmp , i ) ;
35935: LD_ADDR_VAR 0 6
35939: PUSH
35940: LD_VAR 0 6
35944: PPUSH
35945: LD_VAR 0 4
35949: PPUSH
35950: CALL_OW 3
35954: ST_TO_ADDR
35955: GO 35853
35957: POP
35958: POP
// j := GetClosestHex ( unit , tmp ) ;
35959: LD_ADDR_VAR 0 5
35963: PUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: LD_VAR 0 6
35973: PPUSH
35974: CALL 35251 0 2
35978: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35979: LD_VAR 0 1
35983: PPUSH
35984: LD_VAR 0 5
35988: PUSH
35989: LD_INT 1
35991: ARRAY
35992: PPUSH
35993: LD_VAR 0 5
35997: PUSH
35998: LD_INT 2
36000: ARRAY
36001: PPUSH
36002: CALL_OW 111
// result := j ;
36006: LD_ADDR_VAR 0 3
36010: PUSH
36011: LD_VAR 0 5
36015: ST_TO_ADDR
// end ;
36016: LD_VAR 0 3
36020: RET
// export function PrepareApemanSoldier ( ) ; begin
36021: LD_INT 0
36023: PPUSH
// uc_nation := 0 ;
36024: LD_ADDR_OWVAR 21
36028: PUSH
36029: LD_INT 0
36031: ST_TO_ADDR
// hc_sex := sex_male ;
36032: LD_ADDR_OWVAR 27
36036: PUSH
36037: LD_INT 1
36039: ST_TO_ADDR
// hc_name :=  ;
36040: LD_ADDR_OWVAR 26
36044: PUSH
36045: LD_STRING 
36047: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36048: LD_ADDR_OWVAR 28
36052: PUSH
36053: LD_INT 15
36055: ST_TO_ADDR
// hc_gallery :=  ;
36056: LD_ADDR_OWVAR 33
36060: PUSH
36061: LD_STRING 
36063: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36064: LD_ADDR_OWVAR 31
36068: PUSH
36069: LD_INT 0
36071: PPUSH
36072: LD_INT 3
36074: PPUSH
36075: CALL_OW 12
36079: PUSH
36080: LD_INT 0
36082: PPUSH
36083: LD_INT 3
36085: PPUSH
36086: CALL_OW 12
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
36103: LD_ADDR_OWVAR 29
36107: PUSH
36108: LD_INT 10
36110: PUSH
36111: LD_INT 12
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: ST_TO_ADDR
// end ;
36118: LD_VAR 0 1
36122: RET
// export function PrepareApemanEngineer ( ) ; begin
36123: LD_INT 0
36125: PPUSH
// uc_nation := 0 ;
36126: LD_ADDR_OWVAR 21
36130: PUSH
36131: LD_INT 0
36133: ST_TO_ADDR
// hc_sex := sex_male ;
36134: LD_ADDR_OWVAR 27
36138: PUSH
36139: LD_INT 1
36141: ST_TO_ADDR
// hc_name :=  ;
36142: LD_ADDR_OWVAR 26
36146: PUSH
36147: LD_STRING 
36149: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36150: LD_ADDR_OWVAR 28
36154: PUSH
36155: LD_INT 16
36157: ST_TO_ADDR
// hc_gallery :=  ;
36158: LD_ADDR_OWVAR 33
36162: PUSH
36163: LD_STRING 
36165: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36166: LD_ADDR_OWVAR 31
36170: PUSH
36171: LD_INT 0
36173: PPUSH
36174: LD_INT 3
36176: PPUSH
36177: CALL_OW 12
36181: PUSH
36182: LD_INT 0
36184: PPUSH
36185: LD_INT 3
36187: PPUSH
36188: CALL_OW 12
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
36205: LD_ADDR_OWVAR 29
36209: PUSH
36210: LD_INT 10
36212: PUSH
36213: LD_INT 12
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: ST_TO_ADDR
// end ;
36220: LD_VAR 0 1
36224: RET
// export function PrepareApeman ( agressivity ) ; begin
36225: LD_INT 0
36227: PPUSH
// uc_side := 0 ;
36228: LD_ADDR_OWVAR 20
36232: PUSH
36233: LD_INT 0
36235: ST_TO_ADDR
// uc_nation := 0 ;
36236: LD_ADDR_OWVAR 21
36240: PUSH
36241: LD_INT 0
36243: ST_TO_ADDR
// hc_sex := sex_male ;
36244: LD_ADDR_OWVAR 27
36248: PUSH
36249: LD_INT 1
36251: ST_TO_ADDR
// hc_class := class_apeman ;
36252: LD_ADDR_OWVAR 28
36256: PUSH
36257: LD_INT 12
36259: ST_TO_ADDR
// hc_gallery :=  ;
36260: LD_ADDR_OWVAR 33
36264: PUSH
36265: LD_STRING 
36267: ST_TO_ADDR
// hc_name :=  ;
36268: LD_ADDR_OWVAR 26
36272: PUSH
36273: LD_STRING 
36275: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
36276: LD_ADDR_OWVAR 29
36280: PUSH
36281: LD_INT 10
36283: PUSH
36284: LD_INT 12
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: ST_TO_ADDR
// if agressivity = 0 then
36291: LD_VAR 0 1
36295: PUSH
36296: LD_INT 0
36298: EQUAL
36299: IFFALSE 36311
// hc_agressivity := 0 else
36301: LD_ADDR_OWVAR 35
36305: PUSH
36306: LD_INT 0
36308: ST_TO_ADDR
36309: GO 36332
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36311: LD_ADDR_OWVAR 35
36315: PUSH
36316: LD_VAR 0 1
36320: NEG
36321: PPUSH
36322: LD_VAR 0 1
36326: PPUSH
36327: CALL_OW 12
36331: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36332: LD_ADDR_OWVAR 31
36336: PUSH
36337: LD_INT 0
36339: PPUSH
36340: LD_INT 3
36342: PPUSH
36343: CALL_OW 12
36347: PUSH
36348: LD_INT 0
36350: PPUSH
36351: LD_INT 3
36353: PPUSH
36354: CALL_OW 12
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: ST_TO_ADDR
// end ;
36371: LD_VAR 0 2
36375: RET
// export function PrepareTiger ( agressivity ) ; begin
36376: LD_INT 0
36378: PPUSH
// uc_side := 0 ;
36379: LD_ADDR_OWVAR 20
36383: PUSH
36384: LD_INT 0
36386: ST_TO_ADDR
// uc_nation := 0 ;
36387: LD_ADDR_OWVAR 21
36391: PUSH
36392: LD_INT 0
36394: ST_TO_ADDR
// InitHc ;
36395: CALL_OW 19
// hc_class := class_tiger ;
36399: LD_ADDR_OWVAR 28
36403: PUSH
36404: LD_INT 14
36406: ST_TO_ADDR
// hc_gallery :=  ;
36407: LD_ADDR_OWVAR 33
36411: PUSH
36412: LD_STRING 
36414: ST_TO_ADDR
// hc_name :=  ;
36415: LD_ADDR_OWVAR 26
36419: PUSH
36420: LD_STRING 
36422: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36423: LD_ADDR_OWVAR 35
36427: PUSH
36428: LD_VAR 0 1
36432: NEG
36433: PPUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL_OW 12
36443: ST_TO_ADDR
// end ;
36444: LD_VAR 0 2
36448: RET
// export function PrepareEnchidna ( ) ; begin
36449: LD_INT 0
36451: PPUSH
// uc_side := 0 ;
36452: LD_ADDR_OWVAR 20
36456: PUSH
36457: LD_INT 0
36459: ST_TO_ADDR
// uc_nation := 0 ;
36460: LD_ADDR_OWVAR 21
36464: PUSH
36465: LD_INT 0
36467: ST_TO_ADDR
// InitHc ;
36468: CALL_OW 19
// hc_class := class_baggie ;
36472: LD_ADDR_OWVAR 28
36476: PUSH
36477: LD_INT 13
36479: ST_TO_ADDR
// hc_gallery :=  ;
36480: LD_ADDR_OWVAR 33
36484: PUSH
36485: LD_STRING 
36487: ST_TO_ADDR
// hc_name :=  ;
36488: LD_ADDR_OWVAR 26
36492: PUSH
36493: LD_STRING 
36495: ST_TO_ADDR
// end ;
36496: LD_VAR 0 1
36500: RET
// export function PrepareFrog ( ) ; begin
36501: LD_INT 0
36503: PPUSH
// uc_side := 0 ;
36504: LD_ADDR_OWVAR 20
36508: PUSH
36509: LD_INT 0
36511: ST_TO_ADDR
// uc_nation := 0 ;
36512: LD_ADDR_OWVAR 21
36516: PUSH
36517: LD_INT 0
36519: ST_TO_ADDR
// InitHc ;
36520: CALL_OW 19
// hc_class := class_frog ;
36524: LD_ADDR_OWVAR 28
36528: PUSH
36529: LD_INT 19
36531: ST_TO_ADDR
// hc_gallery :=  ;
36532: LD_ADDR_OWVAR 33
36536: PUSH
36537: LD_STRING 
36539: ST_TO_ADDR
// hc_name :=  ;
36540: LD_ADDR_OWVAR 26
36544: PUSH
36545: LD_STRING 
36547: ST_TO_ADDR
// end ;
36548: LD_VAR 0 1
36552: RET
// export function PrepareFish ( ) ; begin
36553: LD_INT 0
36555: PPUSH
// uc_side := 0 ;
36556: LD_ADDR_OWVAR 20
36560: PUSH
36561: LD_INT 0
36563: ST_TO_ADDR
// uc_nation := 0 ;
36564: LD_ADDR_OWVAR 21
36568: PUSH
36569: LD_INT 0
36571: ST_TO_ADDR
// InitHc ;
36572: CALL_OW 19
// hc_class := class_fish ;
36576: LD_ADDR_OWVAR 28
36580: PUSH
36581: LD_INT 20
36583: ST_TO_ADDR
// hc_gallery :=  ;
36584: LD_ADDR_OWVAR 33
36588: PUSH
36589: LD_STRING 
36591: ST_TO_ADDR
// hc_name :=  ;
36592: LD_ADDR_OWVAR 26
36596: PUSH
36597: LD_STRING 
36599: ST_TO_ADDR
// end ;
36600: LD_VAR 0 1
36604: RET
// export function PrepareBird ( ) ; begin
36605: LD_INT 0
36607: PPUSH
// uc_side := 0 ;
36608: LD_ADDR_OWVAR 20
36612: PUSH
36613: LD_INT 0
36615: ST_TO_ADDR
// uc_nation := 0 ;
36616: LD_ADDR_OWVAR 21
36620: PUSH
36621: LD_INT 0
36623: ST_TO_ADDR
// InitHc ;
36624: CALL_OW 19
// hc_class := class_phororhacos ;
36628: LD_ADDR_OWVAR 28
36632: PUSH
36633: LD_INT 18
36635: ST_TO_ADDR
// hc_gallery :=  ;
36636: LD_ADDR_OWVAR 33
36640: PUSH
36641: LD_STRING 
36643: ST_TO_ADDR
// hc_name :=  ;
36644: LD_ADDR_OWVAR 26
36648: PUSH
36649: LD_STRING 
36651: ST_TO_ADDR
// end ;
36652: LD_VAR 0 1
36656: RET
// export function PrepareHorse ( ) ; begin
36657: LD_INT 0
36659: PPUSH
// uc_side := 0 ;
36660: LD_ADDR_OWVAR 20
36664: PUSH
36665: LD_INT 0
36667: ST_TO_ADDR
// uc_nation := 0 ;
36668: LD_ADDR_OWVAR 21
36672: PUSH
36673: LD_INT 0
36675: ST_TO_ADDR
// InitHc ;
36676: CALL_OW 19
// hc_class := class_horse ;
36680: LD_ADDR_OWVAR 28
36684: PUSH
36685: LD_INT 21
36687: ST_TO_ADDR
// hc_gallery :=  ;
36688: LD_ADDR_OWVAR 33
36692: PUSH
36693: LD_STRING 
36695: ST_TO_ADDR
// hc_name :=  ;
36696: LD_ADDR_OWVAR 26
36700: PUSH
36701: LD_STRING 
36703: ST_TO_ADDR
// end ;
36704: LD_VAR 0 1
36708: RET
// export function PrepareMastodont ( ) ; begin
36709: LD_INT 0
36711: PPUSH
// uc_side := 0 ;
36712: LD_ADDR_OWVAR 20
36716: PUSH
36717: LD_INT 0
36719: ST_TO_ADDR
// uc_nation := 0 ;
36720: LD_ADDR_OWVAR 21
36724: PUSH
36725: LD_INT 0
36727: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36728: LD_ADDR_OWVAR 37
36732: PUSH
36733: LD_INT 31
36735: ST_TO_ADDR
// vc_control := control_rider ;
36736: LD_ADDR_OWVAR 38
36740: PUSH
36741: LD_INT 4
36743: ST_TO_ADDR
// end ;
36744: LD_VAR 0 1
36748: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36749: LD_INT 0
36751: PPUSH
36752: PPUSH
36753: PPUSH
// uc_side = 0 ;
36754: LD_ADDR_OWVAR 20
36758: PUSH
36759: LD_INT 0
36761: ST_TO_ADDR
// uc_nation = 0 ;
36762: LD_ADDR_OWVAR 21
36766: PUSH
36767: LD_INT 0
36769: ST_TO_ADDR
// InitHc_All ( ) ;
36770: CALL_OW 584
// InitVc ;
36774: CALL_OW 20
// if mastodonts then
36778: LD_VAR 0 6
36782: IFFALSE 36849
// for i = 1 to mastodonts do
36784: LD_ADDR_VAR 0 11
36788: PUSH
36789: DOUBLE
36790: LD_INT 1
36792: DEC
36793: ST_TO_ADDR
36794: LD_VAR 0 6
36798: PUSH
36799: FOR_TO
36800: IFFALSE 36847
// begin vc_chassis := 31 ;
36802: LD_ADDR_OWVAR 37
36806: PUSH
36807: LD_INT 31
36809: ST_TO_ADDR
// vc_control := control_rider ;
36810: LD_ADDR_OWVAR 38
36814: PUSH
36815: LD_INT 4
36817: ST_TO_ADDR
// animal := CreateVehicle ;
36818: LD_ADDR_VAR 0 12
36822: PUSH
36823: CALL_OW 45
36827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36828: LD_VAR 0 12
36832: PPUSH
36833: LD_VAR 0 8
36837: PPUSH
36838: LD_INT 0
36840: PPUSH
36841: CALL 38991 0 3
// end ;
36845: GO 36799
36847: POP
36848: POP
// if horses then
36849: LD_VAR 0 5
36853: IFFALSE 36920
// for i = 1 to horses do
36855: LD_ADDR_VAR 0 11
36859: PUSH
36860: DOUBLE
36861: LD_INT 1
36863: DEC
36864: ST_TO_ADDR
36865: LD_VAR 0 5
36869: PUSH
36870: FOR_TO
36871: IFFALSE 36918
// begin hc_class := 21 ;
36873: LD_ADDR_OWVAR 28
36877: PUSH
36878: LD_INT 21
36880: ST_TO_ADDR
// hc_gallery :=  ;
36881: LD_ADDR_OWVAR 33
36885: PUSH
36886: LD_STRING 
36888: ST_TO_ADDR
// animal := CreateHuman ;
36889: LD_ADDR_VAR 0 12
36893: PUSH
36894: CALL_OW 44
36898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36899: LD_VAR 0 12
36903: PPUSH
36904: LD_VAR 0 8
36908: PPUSH
36909: LD_INT 0
36911: PPUSH
36912: CALL 38991 0 3
// end ;
36916: GO 36870
36918: POP
36919: POP
// if birds then
36920: LD_VAR 0 1
36924: IFFALSE 36991
// for i = 1 to birds do
36926: LD_ADDR_VAR 0 11
36930: PUSH
36931: DOUBLE
36932: LD_INT 1
36934: DEC
36935: ST_TO_ADDR
36936: LD_VAR 0 1
36940: PUSH
36941: FOR_TO
36942: IFFALSE 36989
// begin hc_class := 18 ;
36944: LD_ADDR_OWVAR 28
36948: PUSH
36949: LD_INT 18
36951: ST_TO_ADDR
// hc_gallery =  ;
36952: LD_ADDR_OWVAR 33
36956: PUSH
36957: LD_STRING 
36959: ST_TO_ADDR
// animal := CreateHuman ;
36960: LD_ADDR_VAR 0 12
36964: PUSH
36965: CALL_OW 44
36969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36970: LD_VAR 0 12
36974: PPUSH
36975: LD_VAR 0 8
36979: PPUSH
36980: LD_INT 0
36982: PPUSH
36983: CALL 38991 0 3
// end ;
36987: GO 36941
36989: POP
36990: POP
// if tigers then
36991: LD_VAR 0 2
36995: IFFALSE 37079
// for i = 1 to tigers do
36997: LD_ADDR_VAR 0 11
37001: PUSH
37002: DOUBLE
37003: LD_INT 1
37005: DEC
37006: ST_TO_ADDR
37007: LD_VAR 0 2
37011: PUSH
37012: FOR_TO
37013: IFFALSE 37077
// begin hc_class = class_tiger ;
37015: LD_ADDR_OWVAR 28
37019: PUSH
37020: LD_INT 14
37022: ST_TO_ADDR
// hc_gallery =  ;
37023: LD_ADDR_OWVAR 33
37027: PUSH
37028: LD_STRING 
37030: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37031: LD_ADDR_OWVAR 35
37035: PUSH
37036: LD_INT 7
37038: NEG
37039: PPUSH
37040: LD_INT 7
37042: PPUSH
37043: CALL_OW 12
37047: ST_TO_ADDR
// animal := CreateHuman ;
37048: LD_ADDR_VAR 0 12
37052: PUSH
37053: CALL_OW 44
37057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37058: LD_VAR 0 12
37062: PPUSH
37063: LD_VAR 0 8
37067: PPUSH
37068: LD_INT 0
37070: PPUSH
37071: CALL 38991 0 3
// end ;
37075: GO 37012
37077: POP
37078: POP
// if apemans then
37079: LD_VAR 0 3
37083: IFFALSE 37206
// for i = 1 to apemans do
37085: LD_ADDR_VAR 0 11
37089: PUSH
37090: DOUBLE
37091: LD_INT 1
37093: DEC
37094: ST_TO_ADDR
37095: LD_VAR 0 3
37099: PUSH
37100: FOR_TO
37101: IFFALSE 37204
// begin hc_class = class_apeman ;
37103: LD_ADDR_OWVAR 28
37107: PUSH
37108: LD_INT 12
37110: ST_TO_ADDR
// hc_gallery =  ;
37111: LD_ADDR_OWVAR 33
37115: PUSH
37116: LD_STRING 
37118: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37119: LD_ADDR_OWVAR 35
37123: PUSH
37124: LD_INT 2
37126: NEG
37127: PPUSH
37128: LD_INT 2
37130: PPUSH
37131: CALL_OW 12
37135: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37136: LD_ADDR_OWVAR 31
37140: PUSH
37141: LD_INT 1
37143: PPUSH
37144: LD_INT 3
37146: PPUSH
37147: CALL_OW 12
37151: PUSH
37152: LD_INT 1
37154: PPUSH
37155: LD_INT 3
37157: PPUSH
37158: CALL_OW 12
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: ST_TO_ADDR
// animal := CreateHuman ;
37175: LD_ADDR_VAR 0 12
37179: PUSH
37180: CALL_OW 44
37184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37185: LD_VAR 0 12
37189: PPUSH
37190: LD_VAR 0 8
37194: PPUSH
37195: LD_INT 0
37197: PPUSH
37198: CALL 38991 0 3
// end ;
37202: GO 37100
37204: POP
37205: POP
// if enchidnas then
37206: LD_VAR 0 4
37210: IFFALSE 37277
// for i = 1 to enchidnas do
37212: LD_ADDR_VAR 0 11
37216: PUSH
37217: DOUBLE
37218: LD_INT 1
37220: DEC
37221: ST_TO_ADDR
37222: LD_VAR 0 4
37226: PUSH
37227: FOR_TO
37228: IFFALSE 37275
// begin hc_class = 13 ;
37230: LD_ADDR_OWVAR 28
37234: PUSH
37235: LD_INT 13
37237: ST_TO_ADDR
// hc_gallery =  ;
37238: LD_ADDR_OWVAR 33
37242: PUSH
37243: LD_STRING 
37245: ST_TO_ADDR
// animal := CreateHuman ;
37246: LD_ADDR_VAR 0 12
37250: PUSH
37251: CALL_OW 44
37255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37256: LD_VAR 0 12
37260: PPUSH
37261: LD_VAR 0 8
37265: PPUSH
37266: LD_INT 0
37268: PPUSH
37269: CALL 38991 0 3
// end ;
37273: GO 37227
37275: POP
37276: POP
// if fishes then
37277: LD_VAR 0 7
37281: IFFALSE 37348
// for i = 1 to fishes do
37283: LD_ADDR_VAR 0 11
37287: PUSH
37288: DOUBLE
37289: LD_INT 1
37291: DEC
37292: ST_TO_ADDR
37293: LD_VAR 0 7
37297: PUSH
37298: FOR_TO
37299: IFFALSE 37346
// begin hc_class = 20 ;
37301: LD_ADDR_OWVAR 28
37305: PUSH
37306: LD_INT 20
37308: ST_TO_ADDR
// hc_gallery =  ;
37309: LD_ADDR_OWVAR 33
37313: PUSH
37314: LD_STRING 
37316: ST_TO_ADDR
// animal := CreateHuman ;
37317: LD_ADDR_VAR 0 12
37321: PUSH
37322: CALL_OW 44
37326: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37327: LD_VAR 0 12
37331: PPUSH
37332: LD_VAR 0 9
37336: PPUSH
37337: LD_INT 0
37339: PPUSH
37340: CALL 38991 0 3
// end ;
37344: GO 37298
37346: POP
37347: POP
// end ;
37348: LD_VAR 0 10
37352: RET
// export function WantHeal ( sci , unit ) ; begin
37353: LD_INT 0
37355: PPUSH
// if GetTaskList ( sci ) > 0 then
37356: LD_VAR 0 1
37360: PPUSH
37361: CALL_OW 437
37365: PUSH
37366: LD_INT 0
37368: GREATER
37369: IFFALSE 37441
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37371: LD_VAR 0 1
37375: PPUSH
37376: CALL_OW 437
37380: PUSH
37381: LD_INT 1
37383: ARRAY
37384: PUSH
37385: LD_INT 1
37387: ARRAY
37388: PUSH
37389: LD_STRING l
37391: EQUAL
37392: IFFALSE 37419
37394: PUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL_OW 437
37404: PUSH
37405: LD_INT 1
37407: ARRAY
37408: PUSH
37409: LD_INT 4
37411: ARRAY
37412: PUSH
37413: LD_VAR 0 2
37417: EQUAL
37418: AND
37419: IFFALSE 37431
// result := true else
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: LD_INT 1
37428: ST_TO_ADDR
37429: GO 37439
// result := false ;
37431: LD_ADDR_VAR 0 3
37435: PUSH
37436: LD_INT 0
37438: ST_TO_ADDR
// end else
37439: GO 37449
// result := false ;
37441: LD_ADDR_VAR 0 3
37445: PUSH
37446: LD_INT 0
37448: ST_TO_ADDR
// end ;
37449: LD_VAR 0 3
37453: RET
// export function HealTarget ( sci ) ; begin
37454: LD_INT 0
37456: PPUSH
// if not sci then
37457: LD_VAR 0 1
37461: NOT
37462: IFFALSE 37466
// exit ;
37464: GO 37531
// result := 0 ;
37466: LD_ADDR_VAR 0 2
37470: PUSH
37471: LD_INT 0
37473: ST_TO_ADDR
// if GetTaskList ( sci ) then
37474: LD_VAR 0 1
37478: PPUSH
37479: CALL_OW 437
37483: IFFALSE 37531
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37485: LD_VAR 0 1
37489: PPUSH
37490: CALL_OW 437
37494: PUSH
37495: LD_INT 1
37497: ARRAY
37498: PUSH
37499: LD_INT 1
37501: ARRAY
37502: PUSH
37503: LD_STRING l
37505: EQUAL
37506: IFFALSE 37531
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37508: LD_ADDR_VAR 0 2
37512: PUSH
37513: LD_VAR 0 1
37517: PPUSH
37518: CALL_OW 437
37522: PUSH
37523: LD_INT 1
37525: ARRAY
37526: PUSH
37527: LD_INT 4
37529: ARRAY
37530: ST_TO_ADDR
// end ;
37531: LD_VAR 0 2
37535: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37536: LD_INT 0
37538: PPUSH
37539: PPUSH
37540: PPUSH
37541: PPUSH
// if not base_units then
37542: LD_VAR 0 1
37546: NOT
37547: IFFALSE 37551
// exit ;
37549: GO 37638
// result := false ;
37551: LD_ADDR_VAR 0 2
37555: PUSH
37556: LD_INT 0
37558: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37559: LD_ADDR_VAR 0 5
37563: PUSH
37564: LD_VAR 0 1
37568: PPUSH
37569: LD_INT 21
37571: PUSH
37572: LD_INT 3
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PPUSH
37579: CALL_OW 72
37583: ST_TO_ADDR
// if not tmp then
37584: LD_VAR 0 5
37588: NOT
37589: IFFALSE 37593
// exit ;
37591: GO 37638
// for i in tmp do
37593: LD_ADDR_VAR 0 3
37597: PUSH
37598: LD_VAR 0 5
37602: PUSH
37603: FOR_IN
37604: IFFALSE 37636
// begin result := EnemyInRange ( i , 22 ) ;
37606: LD_ADDR_VAR 0 2
37610: PUSH
37611: LD_VAR 0 3
37615: PPUSH
37616: LD_INT 22
37618: PPUSH
37619: CALL 35053 0 2
37623: ST_TO_ADDR
// if result then
37624: LD_VAR 0 2
37628: IFFALSE 37634
// exit ;
37630: POP
37631: POP
37632: GO 37638
// end ;
37634: GO 37603
37636: POP
37637: POP
// end ;
37638: LD_VAR 0 2
37642: RET
// export function FilterByTag ( units , tag ) ; begin
37643: LD_INT 0
37645: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37646: LD_ADDR_VAR 0 3
37650: PUSH
37651: LD_VAR 0 1
37655: PPUSH
37656: LD_INT 120
37658: PUSH
37659: LD_VAR 0 2
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PPUSH
37668: CALL_OW 72
37672: ST_TO_ADDR
// end ;
37673: LD_VAR 0 3
37677: RET
// export function IsDriver ( un ) ; begin
37678: LD_INT 0
37680: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37681: LD_ADDR_VAR 0 2
37685: PUSH
37686: LD_VAR 0 1
37690: PUSH
37691: LD_INT 55
37693: PUSH
37694: EMPTY
37695: LIST
37696: PPUSH
37697: CALL_OW 69
37701: IN
37702: ST_TO_ADDR
// end ;
37703: LD_VAR 0 2
37707: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37708: LD_INT 0
37710: PPUSH
37711: PPUSH
// list := [ ] ;
37712: LD_ADDR_VAR 0 5
37716: PUSH
37717: EMPTY
37718: ST_TO_ADDR
// case d of 0 :
37719: LD_VAR 0 3
37723: PUSH
37724: LD_INT 0
37726: DOUBLE
37727: EQUAL
37728: IFTRUE 37732
37730: GO 37865
37732: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37733: LD_ADDR_VAR 0 5
37737: PUSH
37738: LD_VAR 0 1
37742: PUSH
37743: LD_INT 4
37745: MINUS
37746: PUSH
37747: LD_VAR 0 2
37751: PUSH
37752: LD_INT 4
37754: MINUS
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: PUSH
37764: LD_VAR 0 1
37768: PUSH
37769: LD_INT 3
37771: MINUS
37772: PUSH
37773: LD_VAR 0 2
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: PUSH
37786: LD_VAR 0 1
37790: PUSH
37791: LD_INT 4
37793: PLUS
37794: PUSH
37795: LD_VAR 0 2
37799: PUSH
37800: LD_INT 4
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: PUSH
37808: LD_VAR 0 1
37812: PUSH
37813: LD_INT 3
37815: PLUS
37816: PUSH
37817: LD_VAR 0 2
37821: PUSH
37822: LD_INT 3
37824: PLUS
37825: PUSH
37826: LD_INT 5
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: LIST
37833: PUSH
37834: LD_VAR 0 1
37838: PUSH
37839: LD_VAR 0 2
37843: PUSH
37844: LD_INT 4
37846: PLUS
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: ST_TO_ADDR
// end ; 1 :
37863: GO 38563
37865: LD_INT 1
37867: DOUBLE
37868: EQUAL
37869: IFTRUE 37873
37871: GO 38006
37873: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37874: LD_ADDR_VAR 0 5
37878: PUSH
37879: LD_VAR 0 1
37883: PUSH
37884: LD_VAR 0 2
37888: PUSH
37889: LD_INT 4
37891: MINUS
37892: PUSH
37893: LD_INT 3
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: PUSH
37901: LD_VAR 0 1
37905: PUSH
37906: LD_INT 3
37908: MINUS
37909: PUSH
37910: LD_VAR 0 2
37914: PUSH
37915: LD_INT 3
37917: MINUS
37918: PUSH
37919: LD_INT 2
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: PUSH
37927: LD_VAR 0 1
37931: PUSH
37932: LD_INT 4
37934: MINUS
37935: PUSH
37936: LD_VAR 0 2
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: LIST
37948: PUSH
37949: LD_VAR 0 1
37953: PUSH
37954: LD_VAR 0 2
37958: PUSH
37959: LD_INT 3
37961: PLUS
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: PUSH
37971: LD_VAR 0 1
37975: PUSH
37976: LD_INT 4
37978: PLUS
37979: PUSH
37980: LD_VAR 0 2
37984: PUSH
37985: LD_INT 4
37987: PLUS
37988: PUSH
37989: LD_INT 5
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: ST_TO_ADDR
// end ; 2 :
38004: GO 38563
38006: LD_INT 2
38008: DOUBLE
38009: EQUAL
38010: IFTRUE 38014
38012: GO 38143
38014: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38015: LD_ADDR_VAR 0 5
38019: PUSH
38020: LD_VAR 0 1
38024: PUSH
38025: LD_VAR 0 2
38029: PUSH
38030: LD_INT 3
38032: MINUS
38033: PUSH
38034: LD_INT 3
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: PUSH
38042: LD_VAR 0 1
38046: PUSH
38047: LD_INT 4
38049: PLUS
38050: PUSH
38051: LD_VAR 0 2
38055: PUSH
38056: LD_INT 4
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: LIST
38063: PUSH
38064: LD_VAR 0 1
38068: PUSH
38069: LD_VAR 0 2
38073: PUSH
38074: LD_INT 4
38076: PLUS
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: LIST
38085: PUSH
38086: LD_VAR 0 1
38090: PUSH
38091: LD_INT 3
38093: MINUS
38094: PUSH
38095: LD_VAR 0 2
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: PUSH
38108: LD_VAR 0 1
38112: PUSH
38113: LD_INT 4
38115: MINUS
38116: PUSH
38117: LD_VAR 0 2
38121: PUSH
38122: LD_INT 4
38124: MINUS
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: ST_TO_ADDR
// end ; 3 :
38141: GO 38563
38143: LD_INT 3
38145: DOUBLE
38146: EQUAL
38147: IFTRUE 38151
38149: GO 38284
38151: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38152: LD_ADDR_VAR 0 5
38156: PUSH
38157: LD_VAR 0 1
38161: PUSH
38162: LD_INT 3
38164: PLUS
38165: PUSH
38166: LD_VAR 0 2
38170: PUSH
38171: LD_INT 4
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: PUSH
38179: LD_VAR 0 1
38183: PUSH
38184: LD_INT 4
38186: PLUS
38187: PUSH
38188: LD_VAR 0 2
38192: PUSH
38193: LD_INT 4
38195: PLUS
38196: PUSH
38197: LD_INT 5
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: LIST
38204: PUSH
38205: LD_VAR 0 1
38209: PUSH
38210: LD_INT 4
38212: MINUS
38213: PUSH
38214: LD_VAR 0 2
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: LIST
38226: PUSH
38227: LD_VAR 0 1
38231: PUSH
38232: LD_VAR 0 2
38236: PUSH
38237: LD_INT 4
38239: MINUS
38240: PUSH
38241: LD_INT 3
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: PUSH
38249: LD_VAR 0 1
38253: PUSH
38254: LD_INT 3
38256: MINUS
38257: PUSH
38258: LD_VAR 0 2
38262: PUSH
38263: LD_INT 3
38265: MINUS
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: ST_TO_ADDR
// end ; 4 :
38282: GO 38563
38284: LD_INT 4
38286: DOUBLE
38287: EQUAL
38288: IFTRUE 38292
38290: GO 38425
38292: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38293: LD_ADDR_VAR 0 5
38297: PUSH
38298: LD_VAR 0 1
38302: PUSH
38303: LD_VAR 0 2
38307: PUSH
38308: LD_INT 4
38310: PLUS
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: PUSH
38320: LD_VAR 0 1
38324: PUSH
38325: LD_INT 3
38327: PLUS
38328: PUSH
38329: LD_VAR 0 2
38333: PUSH
38334: LD_INT 3
38336: PLUS
38337: PUSH
38338: LD_INT 5
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: LIST
38345: PUSH
38346: LD_VAR 0 1
38350: PUSH
38351: LD_INT 4
38353: PLUS
38354: PUSH
38355: LD_VAR 0 2
38359: PUSH
38360: LD_INT 4
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: PUSH
38368: LD_VAR 0 1
38372: PUSH
38373: LD_VAR 0 2
38377: PUSH
38378: LD_INT 3
38380: MINUS
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: PUSH
38390: LD_VAR 0 1
38394: PUSH
38395: LD_INT 4
38397: MINUS
38398: PUSH
38399: LD_VAR 0 2
38403: PUSH
38404: LD_INT 4
38406: MINUS
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// end ; 5 :
38423: GO 38563
38425: LD_INT 5
38427: DOUBLE
38428: EQUAL
38429: IFTRUE 38433
38431: GO 38562
38433: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38434: LD_ADDR_VAR 0 5
38438: PUSH
38439: LD_VAR 0 1
38443: PUSH
38444: LD_INT 4
38446: MINUS
38447: PUSH
38448: LD_VAR 0 2
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: LIST
38460: PUSH
38461: LD_VAR 0 1
38465: PUSH
38466: LD_VAR 0 2
38470: PUSH
38471: LD_INT 4
38473: MINUS
38474: PUSH
38475: LD_INT 3
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: PUSH
38483: LD_VAR 0 1
38487: PUSH
38488: LD_INT 4
38490: PLUS
38491: PUSH
38492: LD_VAR 0 2
38496: PUSH
38497: LD_INT 4
38499: PLUS
38500: PUSH
38501: LD_INT 5
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: LIST
38508: PUSH
38509: LD_VAR 0 1
38513: PUSH
38514: LD_INT 3
38516: PLUS
38517: PUSH
38518: LD_VAR 0 2
38522: PUSH
38523: LD_INT 4
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: PUSH
38531: LD_VAR 0 1
38535: PUSH
38536: LD_VAR 0 2
38540: PUSH
38541: LD_INT 3
38543: PLUS
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: ST_TO_ADDR
// end ; end ;
38560: GO 38563
38562: POP
// result := list ;
38563: LD_ADDR_VAR 0 4
38567: PUSH
38568: LD_VAR 0 5
38572: ST_TO_ADDR
// end ;
38573: LD_VAR 0 4
38577: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38578: LD_INT 0
38580: PPUSH
38581: PPUSH
38582: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38583: LD_VAR 0 1
38587: NOT
38588: IFTRUE 38616
38590: PUSH
38591: LD_VAR 0 2
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 2
38601: PUSH
38602: LD_INT 3
38604: PUSH
38605: LD_INT 4
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: IN
38614: NOT
38615: OR
38616: IFFALSE 38620
// exit ;
38618: GO 38703
// tmp := [ ] ;
38620: LD_ADDR_VAR 0 5
38624: PUSH
38625: EMPTY
38626: ST_TO_ADDR
// for i in units do
38627: LD_ADDR_VAR 0 4
38631: PUSH
38632: LD_VAR 0 1
38636: PUSH
38637: FOR_IN
38638: IFFALSE 38672
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38640: LD_ADDR_VAR 0 5
38644: PUSH
38645: LD_VAR 0 5
38649: PPUSH
38650: LD_VAR 0 4
38654: PPUSH
38655: LD_VAR 0 2
38659: PPUSH
38660: CALL_OW 259
38664: PPUSH
38665: CALL 40098 0 2
38669: ST_TO_ADDR
38670: GO 38637
38672: POP
38673: POP
// if not tmp then
38674: LD_VAR 0 5
38678: NOT
38679: IFFALSE 38683
// exit ;
38681: GO 38703
// result := SortListByListDesc ( units , tmp ) ;
38683: LD_ADDR_VAR 0 3
38687: PUSH
38688: LD_VAR 0 1
38692: PPUSH
38693: LD_VAR 0 5
38697: PPUSH
38698: CALL_OW 77
38702: ST_TO_ADDR
// end ;
38703: LD_VAR 0 3
38707: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38708: LD_INT 0
38710: PPUSH
38711: PPUSH
38712: PPUSH
// result := false ;
38713: LD_ADDR_VAR 0 3
38717: PUSH
38718: LD_INT 0
38720: ST_TO_ADDR
// if not building then
38721: LD_VAR 0 2
38725: NOT
38726: IFFALSE 38730
// exit ;
38728: GO 38874
// x := GetX ( building ) ;
38730: LD_ADDR_VAR 0 4
38734: PUSH
38735: LD_VAR 0 2
38739: PPUSH
38740: CALL_OW 250
38744: ST_TO_ADDR
// y := GetY ( building ) ;
38745: LD_ADDR_VAR 0 5
38749: PUSH
38750: LD_VAR 0 2
38754: PPUSH
38755: CALL_OW 251
38759: ST_TO_ADDR
// if not x or not y then
38760: LD_VAR 0 4
38764: NOT
38765: IFTRUE 38774
38767: PUSH
38768: LD_VAR 0 5
38772: NOT
38773: OR
38774: IFFALSE 38778
// exit ;
38776: GO 38874
// if GetTaskList ( unit ) then
38778: LD_VAR 0 1
38782: PPUSH
38783: CALL_OW 437
38787: IFFALSE 38874
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38789: LD_STRING e
38791: PUSH
38792: LD_VAR 0 1
38796: PPUSH
38797: CALL_OW 437
38801: PUSH
38802: LD_INT 1
38804: ARRAY
38805: PUSH
38806: LD_INT 1
38808: ARRAY
38809: EQUAL
38810: IFFALSE 38837
38812: PUSH
38813: LD_VAR 0 4
38817: PUSH
38818: LD_VAR 0 1
38822: PPUSH
38823: CALL_OW 437
38827: PUSH
38828: LD_INT 1
38830: ARRAY
38831: PUSH
38832: LD_INT 2
38834: ARRAY
38835: EQUAL
38836: AND
38837: IFFALSE 38864
38839: PUSH
38840: LD_VAR 0 5
38844: PUSH
38845: LD_VAR 0 1
38849: PPUSH
38850: CALL_OW 437
38854: PUSH
38855: LD_INT 1
38857: ARRAY
38858: PUSH
38859: LD_INT 3
38861: ARRAY
38862: EQUAL
38863: AND
38864: IFFALSE 38874
// result := true end ;
38866: LD_ADDR_VAR 0 3
38870: PUSH
38871: LD_INT 1
38873: ST_TO_ADDR
// end ;
38874: LD_VAR 0 3
38878: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38879: LD_INT 0
38881: PPUSH
// result := false ;
38882: LD_ADDR_VAR 0 4
38886: PUSH
38887: LD_INT 0
38889: ST_TO_ADDR
// if GetTaskList ( unit ) then
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 437
38899: IFFALSE 38986
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38901: LD_STRING M
38903: PUSH
38904: LD_VAR 0 1
38908: PPUSH
38909: CALL_OW 437
38913: PUSH
38914: LD_INT 1
38916: ARRAY
38917: PUSH
38918: LD_INT 1
38920: ARRAY
38921: EQUAL
38922: IFFALSE 38949
38924: PUSH
38925: LD_VAR 0 2
38929: PUSH
38930: LD_VAR 0 1
38934: PPUSH
38935: CALL_OW 437
38939: PUSH
38940: LD_INT 1
38942: ARRAY
38943: PUSH
38944: LD_INT 2
38946: ARRAY
38947: EQUAL
38948: AND
38949: IFFALSE 38976
38951: PUSH
38952: LD_VAR 0 3
38956: PUSH
38957: LD_VAR 0 1
38961: PPUSH
38962: CALL_OW 437
38966: PUSH
38967: LD_INT 1
38969: ARRAY
38970: PUSH
38971: LD_INT 3
38973: ARRAY
38974: EQUAL
38975: AND
38976: IFFALSE 38986
// result := true ;
38978: LD_ADDR_VAR 0 4
38982: PUSH
38983: LD_INT 1
38985: ST_TO_ADDR
// end ; end ;
38986: LD_VAR 0 4
38990: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38991: LD_INT 0
38993: PPUSH
38994: PPUSH
38995: PPUSH
38996: PPUSH
// if not unit or not area then
38997: LD_VAR 0 1
39001: NOT
39002: IFTRUE 39011
39004: PUSH
39005: LD_VAR 0 2
39009: NOT
39010: OR
39011: IFFALSE 39015
// exit ;
39013: GO 39191
// tmp := AreaToList ( area , i ) ;
39015: LD_ADDR_VAR 0 6
39019: PUSH
39020: LD_VAR 0 2
39024: PPUSH
39025: LD_VAR 0 5
39029: PPUSH
39030: CALL_OW 517
39034: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39035: LD_ADDR_VAR 0 5
39039: PUSH
39040: DOUBLE
39041: LD_INT 1
39043: DEC
39044: ST_TO_ADDR
39045: LD_VAR 0 6
39049: PUSH
39050: LD_INT 1
39052: ARRAY
39053: PUSH
39054: FOR_TO
39055: IFFALSE 39189
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39057: LD_ADDR_VAR 0 7
39061: PUSH
39062: LD_VAR 0 6
39066: PUSH
39067: LD_INT 1
39069: ARRAY
39070: PUSH
39071: LD_VAR 0 5
39075: ARRAY
39076: PUSH
39077: LD_VAR 0 6
39081: PUSH
39082: LD_INT 2
39084: ARRAY
39085: PUSH
39086: LD_VAR 0 5
39090: ARRAY
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39096: LD_INT 92
39098: PUSH
39099: LD_VAR 0 7
39103: PUSH
39104: LD_INT 1
39106: ARRAY
39107: PUSH
39108: LD_VAR 0 7
39112: PUSH
39113: LD_INT 2
39115: ARRAY
39116: PUSH
39117: LD_INT 2
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: PPUSH
39126: CALL_OW 69
39130: PUSH
39131: LD_INT 0
39133: EQUAL
39134: IFFALSE 39187
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39136: LD_VAR 0 1
39140: PPUSH
39141: LD_VAR 0 7
39145: PUSH
39146: LD_INT 1
39148: ARRAY
39149: PPUSH
39150: LD_VAR 0 7
39154: PUSH
39155: LD_INT 2
39157: ARRAY
39158: PPUSH
39159: LD_VAR 0 3
39163: PPUSH
39164: CALL_OW 48
// result := IsPlaced ( unit ) ;
39168: LD_ADDR_VAR 0 4
39172: PUSH
39173: LD_VAR 0 1
39177: PPUSH
39178: CALL_OW 305
39182: ST_TO_ADDR
// exit ;
39183: POP
39184: POP
39185: GO 39191
// end ; end ;
39187: GO 39054
39189: POP
39190: POP
// end ;
39191: LD_VAR 0 4
39195: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39196: LD_INT 0
39198: PPUSH
39199: PPUSH
39200: PPUSH
// if not side or side > 8 then
39201: LD_VAR 0 1
39205: NOT
39206: IFTRUE 39218
39208: PUSH
39209: LD_VAR 0 1
39213: PUSH
39214: LD_INT 8
39216: GREATER
39217: OR
39218: IFFALSE 39222
// exit ;
39220: GO 39409
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39222: LD_ADDR_VAR 0 4
39226: PUSH
39227: LD_INT 22
39229: PUSH
39230: LD_VAR 0 1
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 21
39241: PUSH
39242: LD_INT 3
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PPUSH
39253: CALL_OW 69
39257: ST_TO_ADDR
// if not tmp then
39258: LD_VAR 0 4
39262: NOT
39263: IFFALSE 39267
// exit ;
39265: GO 39409
// enable_addtolog := true ;
39267: LD_ADDR_OWVAR 81
39271: PUSH
39272: LD_INT 1
39274: ST_TO_ADDR
// AddToLog ( [ ) ;
39275: LD_STRING [
39277: PPUSH
39278: CALL_OW 561
// for i in tmp do
39282: LD_ADDR_VAR 0 3
39286: PUSH
39287: LD_VAR 0 4
39291: PUSH
39292: FOR_IN
39293: IFFALSE 39400
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39295: LD_STRING [
39297: PUSH
39298: LD_VAR 0 3
39302: PPUSH
39303: CALL_OW 266
39307: STR
39308: PUSH
39309: LD_STRING , 
39311: STR
39312: PUSH
39313: LD_VAR 0 3
39317: PPUSH
39318: CALL_OW 250
39322: STR
39323: PUSH
39324: LD_STRING , 
39326: STR
39327: PUSH
39328: LD_VAR 0 3
39332: PPUSH
39333: CALL_OW 251
39337: STR
39338: PUSH
39339: LD_STRING , 
39341: STR
39342: PUSH
39343: LD_VAR 0 3
39347: PPUSH
39348: CALL_OW 254
39352: STR
39353: PUSH
39354: LD_STRING , 
39356: STR
39357: PUSH
39358: LD_VAR 0 3
39362: PPUSH
39363: LD_INT 1
39365: PPUSH
39366: CALL_OW 268
39370: STR
39371: PUSH
39372: LD_STRING , 
39374: STR
39375: PUSH
39376: LD_VAR 0 3
39380: PPUSH
39381: LD_INT 2
39383: PPUSH
39384: CALL_OW 268
39388: STR
39389: PUSH
39390: LD_STRING ],
39392: STR
39393: PPUSH
39394: CALL_OW 561
// end ;
39398: GO 39292
39400: POP
39401: POP
// AddToLog ( ]; ) ;
39402: LD_STRING ];
39404: PPUSH
39405: CALL_OW 561
// end ;
39409: LD_VAR 0 2
39413: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39414: LD_INT 0
39416: PPUSH
39417: PPUSH
39418: PPUSH
39419: PPUSH
39420: PPUSH
// if not area or not rate or not max then
39421: LD_VAR 0 1
39425: NOT
39426: IFTRUE 39435
39428: PUSH
39429: LD_VAR 0 2
39433: NOT
39434: OR
39435: IFTRUE 39444
39437: PUSH
39438: LD_VAR 0 4
39442: NOT
39443: OR
39444: IFFALSE 39448
// exit ;
39446: GO 39637
// while 1 do
39448: LD_INT 1
39450: IFFALSE 39637
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39452: LD_ADDR_VAR 0 9
39456: PUSH
39457: LD_VAR 0 1
39461: PPUSH
39462: LD_INT 1
39464: PPUSH
39465: CALL_OW 287
39469: PUSH
39470: LD_INT 10
39472: MUL
39473: ST_TO_ADDR
// r := rate / 10 ;
39474: LD_ADDR_VAR 0 7
39478: PUSH
39479: LD_VAR 0 2
39483: PUSH
39484: LD_INT 10
39486: DIVREAL
39487: ST_TO_ADDR
// time := 1 1$00 ;
39488: LD_ADDR_VAR 0 8
39492: PUSH
39493: LD_INT 2100
39495: ST_TO_ADDR
// if amount < min then
39496: LD_VAR 0 9
39500: PUSH
39501: LD_VAR 0 3
39505: LESS
39506: IFFALSE 39524
// r := r * 2 else
39508: LD_ADDR_VAR 0 7
39512: PUSH
39513: LD_VAR 0 7
39517: PUSH
39518: LD_INT 2
39520: MUL
39521: ST_TO_ADDR
39522: GO 39550
// if amount > max then
39524: LD_VAR 0 9
39528: PUSH
39529: LD_VAR 0 4
39533: GREATER
39534: IFFALSE 39550
// r := r / 2 ;
39536: LD_ADDR_VAR 0 7
39540: PUSH
39541: LD_VAR 0 7
39545: PUSH
39546: LD_INT 2
39548: DIVREAL
39549: ST_TO_ADDR
// time := time / r ;
39550: LD_ADDR_VAR 0 8
39554: PUSH
39555: LD_VAR 0 8
39559: PUSH
39560: LD_VAR 0 7
39564: DIVREAL
39565: ST_TO_ADDR
// if time < 0 then
39566: LD_VAR 0 8
39570: PUSH
39571: LD_INT 0
39573: LESS
39574: IFFALSE 39591
// time := time * - 1 ;
39576: LD_ADDR_VAR 0 8
39580: PUSH
39581: LD_VAR 0 8
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: MUL
39590: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39591: LD_VAR 0 8
39595: PUSH
39596: LD_INT 35
39598: PPUSH
39599: LD_INT 875
39601: PPUSH
39602: CALL_OW 12
39606: PLUS
39607: PPUSH
39608: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39612: LD_INT 1
39614: PPUSH
39615: LD_INT 5
39617: PPUSH
39618: CALL_OW 12
39622: PPUSH
39623: LD_VAR 0 1
39627: PPUSH
39628: LD_INT 1
39630: PPUSH
39631: CALL_OW 55
// end ;
39635: GO 39448
// end ;
39637: LD_VAR 0 5
39641: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39642: LD_INT 0
39644: PPUSH
39645: PPUSH
39646: PPUSH
39647: PPUSH
39648: PPUSH
39649: PPUSH
39650: PPUSH
39651: PPUSH
// if not turrets or not factories then
39652: LD_VAR 0 1
39656: NOT
39657: IFTRUE 39666
39659: PUSH
39660: LD_VAR 0 2
39664: NOT
39665: OR
39666: IFFALSE 39670
// exit ;
39668: GO 39977
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39670: LD_ADDR_VAR 0 10
39674: PUSH
39675: LD_INT 5
39677: PUSH
39678: LD_INT 6
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: LD_INT 4
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: LD_INT 5
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 24
39712: PUSH
39713: LD_INT 25
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 23
39722: PUSH
39723: LD_INT 27
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 42
39736: PUSH
39737: LD_INT 43
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 44
39746: PUSH
39747: LD_INT 46
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 45
39756: PUSH
39757: LD_INT 47
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: LIST
39773: ST_TO_ADDR
// result := [ ] ;
39774: LD_ADDR_VAR 0 3
39778: PUSH
39779: EMPTY
39780: ST_TO_ADDR
// for i in turrets do
39781: LD_ADDR_VAR 0 4
39785: PUSH
39786: LD_VAR 0 1
39790: PUSH
39791: FOR_IN
39792: IFFALSE 39975
// begin nat := GetNation ( i ) ;
39794: LD_ADDR_VAR 0 7
39798: PUSH
39799: LD_VAR 0 4
39803: PPUSH
39804: CALL_OW 248
39808: ST_TO_ADDR
// weapon := 0 ;
39809: LD_ADDR_VAR 0 8
39813: PUSH
39814: LD_INT 0
39816: ST_TO_ADDR
// if not nat then
39817: LD_VAR 0 7
39821: NOT
39822: IFFALSE 39826
// continue ;
39824: GO 39791
// for j in list [ nat ] do
39826: LD_ADDR_VAR 0 5
39830: PUSH
39831: LD_VAR 0 10
39835: PUSH
39836: LD_VAR 0 7
39840: ARRAY
39841: PUSH
39842: FOR_IN
39843: IFFALSE 39884
// if GetBWeapon ( i ) = j [ 1 ] then
39845: LD_VAR 0 4
39849: PPUSH
39850: CALL_OW 269
39854: PUSH
39855: LD_VAR 0 5
39859: PUSH
39860: LD_INT 1
39862: ARRAY
39863: EQUAL
39864: IFFALSE 39882
// begin weapon := j [ 2 ] ;
39866: LD_ADDR_VAR 0 8
39870: PUSH
39871: LD_VAR 0 5
39875: PUSH
39876: LD_INT 2
39878: ARRAY
39879: ST_TO_ADDR
// break ;
39880: GO 39884
// end ;
39882: GO 39842
39884: POP
39885: POP
// if not weapon then
39886: LD_VAR 0 8
39890: NOT
39891: IFFALSE 39895
// continue ;
39893: GO 39791
// for k in factories do
39895: LD_ADDR_VAR 0 6
39899: PUSH
39900: LD_VAR 0 2
39904: PUSH
39905: FOR_IN
39906: IFFALSE 39971
// begin weapons := AvailableWeaponList ( k ) ;
39908: LD_ADDR_VAR 0 9
39912: PUSH
39913: LD_VAR 0 6
39917: PPUSH
39918: CALL_OW 478
39922: ST_TO_ADDR
// if not weapons then
39923: LD_VAR 0 9
39927: NOT
39928: IFFALSE 39932
// continue ;
39930: GO 39905
// if weapon in weapons then
39932: LD_VAR 0 8
39936: PUSH
39937: LD_VAR 0 9
39941: IN
39942: IFFALSE 39969
// begin result := [ i , weapon ] ;
39944: LD_ADDR_VAR 0 3
39948: PUSH
39949: LD_VAR 0 4
39953: PUSH
39954: LD_VAR 0 8
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: ST_TO_ADDR
// exit ;
39963: POP
39964: POP
39965: POP
39966: POP
39967: GO 39977
// end ; end ;
39969: GO 39905
39971: POP
39972: POP
// end ;
39973: GO 39791
39975: POP
39976: POP
// end ;
39977: LD_VAR 0 3
39981: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39982: LD_INT 0
39984: PPUSH
// if not side or side > 8 then
39985: LD_VAR 0 3
39989: NOT
39990: IFTRUE 40002
39992: PUSH
39993: LD_VAR 0 3
39997: PUSH
39998: LD_INT 8
40000: GREATER
40001: OR
40002: IFFALSE 40006
// exit ;
40004: GO 40065
// if not range then
40006: LD_VAR 0 4
40010: NOT
40011: IFFALSE 40022
// range := - 12 ;
40013: LD_ADDR_VAR 0 4
40017: PUSH
40018: LD_INT 12
40020: NEG
40021: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40022: LD_VAR 0 1
40026: PPUSH
40027: LD_VAR 0 2
40031: PPUSH
40032: LD_VAR 0 3
40036: PPUSH
40037: LD_VAR 0 4
40041: PPUSH
40042: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40046: LD_VAR 0 1
40050: PPUSH
40051: LD_VAR 0 2
40055: PPUSH
40056: LD_VAR 0 3
40060: PPUSH
40061: CALL_OW 331
// end ;
40065: LD_VAR 0 5
40069: RET
// export function Video ( mode ) ; begin
40070: LD_INT 0
40072: PPUSH
// ingame_video = mode ;
40073: LD_ADDR_OWVAR 52
40077: PUSH
40078: LD_VAR 0 1
40082: ST_TO_ADDR
// interface_hidden = mode ;
40083: LD_ADDR_OWVAR 54
40087: PUSH
40088: LD_VAR 0 1
40092: ST_TO_ADDR
// end ;
40093: LD_VAR 0 2
40097: RET
// export function Join ( array , element ) ; begin
40098: LD_INT 0
40100: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40101: LD_ADDR_VAR 0 3
40105: PUSH
40106: LD_VAR 0 1
40110: PPUSH
40111: LD_VAR 0 1
40115: PUSH
40116: LD_INT 1
40118: PLUS
40119: PPUSH
40120: LD_VAR 0 2
40124: PPUSH
40125: CALL_OW 1
40129: ST_TO_ADDR
// end ;
40130: LD_VAR 0 3
40134: RET
// export function JoinUnion ( array , element ) ; begin
40135: LD_INT 0
40137: PPUSH
// result := array union element ;
40138: LD_ADDR_VAR 0 3
40142: PUSH
40143: LD_VAR 0 1
40147: PUSH
40148: LD_VAR 0 2
40152: UNION
40153: ST_TO_ADDR
// end ;
40154: LD_VAR 0 3
40158: RET
// export function GetBehemoths ( side ) ; begin
40159: LD_INT 0
40161: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40162: LD_ADDR_VAR 0 2
40166: PUSH
40167: LD_INT 22
40169: PUSH
40170: LD_VAR 0 1
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 31
40181: PUSH
40182: LD_INT 25
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PPUSH
40193: CALL_OW 69
40197: ST_TO_ADDR
// end ;
40198: LD_VAR 0 2
40202: RET
// export function Shuffle ( array ) ; var i , index ; begin
40203: LD_INT 0
40205: PPUSH
40206: PPUSH
40207: PPUSH
// result := [ ] ;
40208: LD_ADDR_VAR 0 2
40212: PUSH
40213: EMPTY
40214: ST_TO_ADDR
// if not array then
40215: LD_VAR 0 1
40219: NOT
40220: IFFALSE 40224
// exit ;
40222: GO 40323
// Randomize ;
40224: CALL_OW 10
// for i = array downto 1 do
40228: LD_ADDR_VAR 0 3
40232: PUSH
40233: DOUBLE
40234: LD_VAR 0 1
40238: INC
40239: ST_TO_ADDR
40240: LD_INT 1
40242: PUSH
40243: FOR_DOWNTO
40244: IFFALSE 40321
// begin index := rand ( 1 , array ) ;
40246: LD_ADDR_VAR 0 4
40250: PUSH
40251: LD_INT 1
40253: PPUSH
40254: LD_VAR 0 1
40258: PPUSH
40259: CALL_OW 12
40263: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40264: LD_ADDR_VAR 0 2
40268: PUSH
40269: LD_VAR 0 2
40273: PPUSH
40274: LD_VAR 0 2
40278: PUSH
40279: LD_INT 1
40281: PLUS
40282: PPUSH
40283: LD_VAR 0 1
40287: PUSH
40288: LD_VAR 0 4
40292: ARRAY
40293: PPUSH
40294: CALL_OW 2
40298: ST_TO_ADDR
// array := Delete ( array , index ) ;
40299: LD_ADDR_VAR 0 1
40303: PUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: LD_VAR 0 4
40313: PPUSH
40314: CALL_OW 3
40318: ST_TO_ADDR
// end ;
40319: GO 40243
40321: POP
40322: POP
// end ;
40323: LD_VAR 0 2
40327: RET
// export function GetBaseMaterials ( base ) ; begin
40328: LD_INT 0
40330: PPUSH
// result := [ 0 , 0 , 0 ] ;
40331: LD_ADDR_VAR 0 2
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: ST_TO_ADDR
// if not base then
40350: LD_VAR 0 1
40354: NOT
40355: IFFALSE 40359
// exit ;
40357: GO 40408
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40359: LD_ADDR_VAR 0 2
40363: PUSH
40364: LD_VAR 0 1
40368: PPUSH
40369: LD_INT 1
40371: PPUSH
40372: CALL_OW 275
40376: PUSH
40377: LD_VAR 0 1
40381: PPUSH
40382: LD_INT 2
40384: PPUSH
40385: CALL_OW 275
40389: PUSH
40390: LD_VAR 0 1
40394: PPUSH
40395: LD_INT 3
40397: PPUSH
40398: CALL_OW 275
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: LIST
40407: ST_TO_ADDR
// end ;
40408: LD_VAR 0 2
40412: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40413: LD_INT 0
40415: PPUSH
40416: PPUSH
// result := array ;
40417: LD_ADDR_VAR 0 3
40421: PUSH
40422: LD_VAR 0 1
40426: ST_TO_ADDR
// if size >= result then
40427: LD_VAR 0 2
40431: PUSH
40432: LD_VAR 0 3
40436: GREATEREQUAL
40437: IFFALSE 40441
// exit ;
40439: GO 40491
// if size then
40441: LD_VAR 0 2
40445: IFFALSE 40491
// for i := array downto size do
40447: LD_ADDR_VAR 0 4
40451: PUSH
40452: DOUBLE
40453: LD_VAR 0 1
40457: INC
40458: ST_TO_ADDR
40459: LD_VAR 0 2
40463: PUSH
40464: FOR_DOWNTO
40465: IFFALSE 40489
// result := Delete ( result , result ) ;
40467: LD_ADDR_VAR 0 3
40471: PUSH
40472: LD_VAR 0 3
40476: PPUSH
40477: LD_VAR 0 3
40481: PPUSH
40482: CALL_OW 3
40486: ST_TO_ADDR
40487: GO 40464
40489: POP
40490: POP
// end ;
40491: LD_VAR 0 3
40495: RET
// export function ComExit ( unit ) ; var tmp ; begin
40496: LD_INT 0
40498: PPUSH
40499: PPUSH
// if not IsInUnit ( unit ) then
40500: LD_VAR 0 1
40504: PPUSH
40505: CALL_OW 310
40509: NOT
40510: IFFALSE 40514
// exit ;
40512: GO 40574
// tmp := IsInUnit ( unit ) ;
40514: LD_ADDR_VAR 0 3
40518: PUSH
40519: LD_VAR 0 1
40523: PPUSH
40524: CALL_OW 310
40528: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40529: LD_VAR 0 3
40533: PPUSH
40534: CALL_OW 247
40538: PUSH
40539: LD_INT 2
40541: EQUAL
40542: IFFALSE 40555
// ComExitVehicle ( unit ) else
40544: LD_VAR 0 1
40548: PPUSH
40549: CALL_OW 121
40553: GO 40564
// ComExitBuilding ( unit ) ;
40555: LD_VAR 0 1
40559: PPUSH
40560: CALL_OW 122
// result := tmp ;
40564: LD_ADDR_VAR 0 2
40568: PUSH
40569: LD_VAR 0 3
40573: ST_TO_ADDR
// end ;
40574: LD_VAR 0 2
40578: RET
// export function ComExitAll ( units ) ; var i ; begin
40579: LD_INT 0
40581: PPUSH
40582: PPUSH
// if not units then
40583: LD_VAR 0 1
40587: NOT
40588: IFFALSE 40592
// exit ;
40590: GO 40618
// for i in units do
40592: LD_ADDR_VAR 0 3
40596: PUSH
40597: LD_VAR 0 1
40601: PUSH
40602: FOR_IN
40603: IFFALSE 40616
// ComExit ( i ) ;
40605: LD_VAR 0 3
40609: PPUSH
40610: CALL 40496 0 1
40614: GO 40602
40616: POP
40617: POP
// end ;
40618: LD_VAR 0 2
40622: RET
// export function ResetHc ; begin
40623: LD_INT 0
40625: PPUSH
// InitHc ;
40626: CALL_OW 19
// hc_importance := 0 ;
40630: LD_ADDR_OWVAR 32
40634: PUSH
40635: LD_INT 0
40637: ST_TO_ADDR
// end ;
40638: LD_VAR 0 1
40642: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40643: LD_INT 0
40645: PPUSH
40646: PPUSH
40647: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40648: LD_ADDR_VAR 0 6
40652: PUSH
40653: LD_VAR 0 1
40657: PUSH
40658: LD_VAR 0 3
40662: PLUS
40663: PUSH
40664: LD_INT 2
40666: DIV
40667: ST_TO_ADDR
// if _x < 0 then
40668: LD_VAR 0 6
40672: PUSH
40673: LD_INT 0
40675: LESS
40676: IFFALSE 40693
// _x := _x * - 1 ;
40678: LD_ADDR_VAR 0 6
40682: PUSH
40683: LD_VAR 0 6
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: MUL
40692: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40693: LD_ADDR_VAR 0 7
40697: PUSH
40698: LD_VAR 0 2
40702: PUSH
40703: LD_VAR 0 4
40707: PLUS
40708: PUSH
40709: LD_INT 2
40711: DIV
40712: ST_TO_ADDR
// if _y < 0 then
40713: LD_VAR 0 7
40717: PUSH
40718: LD_INT 0
40720: LESS
40721: IFFALSE 40738
// _y := _y * - 1 ;
40723: LD_ADDR_VAR 0 7
40727: PUSH
40728: LD_VAR 0 7
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: MUL
40737: ST_TO_ADDR
// result := [ _x , _y ] ;
40738: LD_ADDR_VAR 0 5
40742: PUSH
40743: LD_VAR 0 6
40747: PUSH
40748: LD_VAR 0 7
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: ST_TO_ADDR
// end ;
40757: LD_VAR 0 5
40761: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40762: LD_INT 0
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
// task := GetTaskList ( unit ) ;
40768: LD_ADDR_VAR 0 7
40772: PUSH
40773: LD_VAR 0 1
40777: PPUSH
40778: CALL_OW 437
40782: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40783: LD_VAR 0 7
40787: NOT
40788: IFFALSE 40807
40790: PUSH
40791: LD_VAR 0 1
40795: PPUSH
40796: LD_VAR 0 2
40800: PPUSH
40801: CALL_OW 308
40805: NOT
40806: AND
40807: IFFALSE 40811
// exit ;
40809: GO 40929
// if IsInArea ( unit , area ) then
40811: LD_VAR 0 1
40815: PPUSH
40816: LD_VAR 0 2
40820: PPUSH
40821: CALL_OW 308
40825: IFFALSE 40843
// begin ComMoveToArea ( unit , goAway ) ;
40827: LD_VAR 0 1
40831: PPUSH
40832: LD_VAR 0 3
40836: PPUSH
40837: CALL_OW 113
// exit ;
40841: GO 40929
// end ; if task [ 1 ] [ 1 ] <> M then
40843: LD_VAR 0 7
40847: PUSH
40848: LD_INT 1
40850: ARRAY
40851: PUSH
40852: LD_INT 1
40854: ARRAY
40855: PUSH
40856: LD_STRING M
40858: NONEQUAL
40859: IFFALSE 40863
// exit ;
40861: GO 40929
// x := task [ 1 ] [ 2 ] ;
40863: LD_ADDR_VAR 0 5
40867: PUSH
40868: LD_VAR 0 7
40872: PUSH
40873: LD_INT 1
40875: ARRAY
40876: PUSH
40877: LD_INT 2
40879: ARRAY
40880: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40881: LD_ADDR_VAR 0 6
40885: PUSH
40886: LD_VAR 0 7
40890: PUSH
40891: LD_INT 1
40893: ARRAY
40894: PUSH
40895: LD_INT 3
40897: ARRAY
40898: ST_TO_ADDR
// if InArea ( x , y , area ) then
40899: LD_VAR 0 5
40903: PPUSH
40904: LD_VAR 0 6
40908: PPUSH
40909: LD_VAR 0 2
40913: PPUSH
40914: CALL_OW 309
40918: IFFALSE 40929
// ComStop ( unit ) ;
40920: LD_VAR 0 1
40924: PPUSH
40925: CALL_OW 141
// end ;
40929: LD_VAR 0 4
40933: RET
// export function Abs ( value ) ; begin
40934: LD_INT 0
40936: PPUSH
// result := value ;
40937: LD_ADDR_VAR 0 2
40941: PUSH
40942: LD_VAR 0 1
40946: ST_TO_ADDR
// if value < 0 then
40947: LD_VAR 0 1
40951: PUSH
40952: LD_INT 0
40954: LESS
40955: IFFALSE 40972
// result := value * - 1 ;
40957: LD_ADDR_VAR 0 2
40961: PUSH
40962: LD_VAR 0 1
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: MUL
40971: ST_TO_ADDR
// end ;
40972: LD_VAR 0 2
40976: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40977: LD_INT 0
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
// if not unit or not building then
40987: LD_VAR 0 1
40991: NOT
40992: IFTRUE 41001
40994: PUSH
40995: LD_VAR 0 2
40999: NOT
41000: OR
41001: IFFALSE 41005
// exit ;
41003: GO 41233
// x := GetX ( building ) ;
41005: LD_ADDR_VAR 0 4
41009: PUSH
41010: LD_VAR 0 2
41014: PPUSH
41015: CALL_OW 250
41019: ST_TO_ADDR
// y := GetY ( building ) ;
41020: LD_ADDR_VAR 0 6
41024: PUSH
41025: LD_VAR 0 2
41029: PPUSH
41030: CALL_OW 251
41034: ST_TO_ADDR
// d := GetDir ( building ) ;
41035: LD_ADDR_VAR 0 8
41039: PUSH
41040: LD_VAR 0 2
41044: PPUSH
41045: CALL_OW 254
41049: ST_TO_ADDR
// r := 4 ;
41050: LD_ADDR_VAR 0 9
41054: PUSH
41055: LD_INT 4
41057: ST_TO_ADDR
// for i := 1 to 5 do
41058: LD_ADDR_VAR 0 10
41062: PUSH
41063: DOUBLE
41064: LD_INT 1
41066: DEC
41067: ST_TO_ADDR
41068: LD_INT 5
41070: PUSH
41071: FOR_TO
41072: IFFALSE 41231
// begin _x := ShiftX ( x , d , r + i ) ;
41074: LD_ADDR_VAR 0 5
41078: PUSH
41079: LD_VAR 0 4
41083: PPUSH
41084: LD_VAR 0 8
41088: PPUSH
41089: LD_VAR 0 9
41093: PUSH
41094: LD_VAR 0 10
41098: PLUS
41099: PPUSH
41100: CALL_OW 272
41104: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41105: LD_ADDR_VAR 0 7
41109: PUSH
41110: LD_VAR 0 6
41114: PPUSH
41115: LD_VAR 0 8
41119: PPUSH
41120: LD_VAR 0 9
41124: PUSH
41125: LD_VAR 0 10
41129: PLUS
41130: PPUSH
41131: CALL_OW 273
41135: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41136: LD_VAR 0 5
41140: PPUSH
41141: LD_VAR 0 7
41145: PPUSH
41146: CALL_OW 488
41150: IFFALSE 41185
41152: PUSH
41153: LD_VAR 0 5
41157: PPUSH
41158: LD_VAR 0 7
41162: PPUSH
41163: CALL_OW 428
41167: PPUSH
41168: CALL_OW 247
41172: PUSH
41173: LD_INT 3
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: IN
41183: NOT
41184: AND
41185: IFFALSE 41229
// begin ComMoveXY ( unit , _x , _y ) ;
41187: LD_VAR 0 1
41191: PPUSH
41192: LD_VAR 0 5
41196: PPUSH
41197: LD_VAR 0 7
41201: PPUSH
41202: CALL_OW 111
// result := [ _x , _y ] ;
41206: LD_ADDR_VAR 0 3
41210: PUSH
41211: LD_VAR 0 5
41215: PUSH
41216: LD_VAR 0 7
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: ST_TO_ADDR
// exit ;
41225: POP
41226: POP
41227: GO 41233
// end ; end ;
41229: GO 41071
41231: POP
41232: POP
// end ;
41233: LD_VAR 0 3
41237: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41238: LD_INT 0
41240: PPUSH
41241: PPUSH
41242: PPUSH
// result := 0 ;
41243: LD_ADDR_VAR 0 3
41247: PUSH
41248: LD_INT 0
41250: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41251: LD_VAR 0 1
41255: PUSH
41256: LD_INT 0
41258: LESS
41259: IFTRUE 41271
41261: PUSH
41262: LD_VAR 0 1
41266: PUSH
41267: LD_INT 8
41269: GREATER
41270: OR
41271: IFTRUE 41283
41273: PUSH
41274: LD_VAR 0 2
41278: PUSH
41279: LD_INT 0
41281: LESS
41282: OR
41283: IFTRUE 41295
41285: PUSH
41286: LD_VAR 0 2
41290: PUSH
41291: LD_INT 8
41293: GREATER
41294: OR
41295: IFFALSE 41299
// exit ;
41297: GO 41374
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41299: LD_ADDR_VAR 0 4
41303: PUSH
41304: LD_INT 22
41306: PUSH
41307: LD_VAR 0 2
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PPUSH
41316: CALL_OW 69
41320: PUSH
41321: FOR_IN
41322: IFFALSE 41372
// begin un := UnitShoot ( i ) ;
41324: LD_ADDR_VAR 0 5
41328: PUSH
41329: LD_VAR 0 4
41333: PPUSH
41334: CALL_OW 504
41338: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41339: LD_VAR 0 5
41343: PPUSH
41344: CALL_OW 255
41348: PUSH
41349: LD_VAR 0 1
41353: EQUAL
41354: IFFALSE 41370
// begin result := un ;
41356: LD_ADDR_VAR 0 3
41360: PUSH
41361: LD_VAR 0 5
41365: ST_TO_ADDR
// exit ;
41366: POP
41367: POP
41368: GO 41374
// end ; end ;
41370: GO 41321
41372: POP
41373: POP
// end ;
41374: LD_VAR 0 3
41378: RET
// export function GetCargoBay ( units ) ; begin
41379: LD_INT 0
41381: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41382: LD_ADDR_VAR 0 2
41386: PUSH
41387: LD_VAR 0 1
41391: PPUSH
41392: LD_INT 2
41394: PUSH
41395: LD_INT 34
41397: PUSH
41398: LD_INT 12
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 34
41407: PUSH
41408: LD_INT 51
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 34
41417: PUSH
41418: LD_INT 32
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 34
41427: PUSH
41428: LD_INT 89
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: PPUSH
41442: CALL_OW 72
41446: ST_TO_ADDR
// end ;
41447: LD_VAR 0 2
41451: RET
// export function Negate ( value ) ; begin
41452: LD_INT 0
41454: PPUSH
// result := not value ;
41455: LD_ADDR_VAR 0 2
41459: PUSH
41460: LD_VAR 0 1
41464: NOT
41465: ST_TO_ADDR
// end ;
41466: LD_VAR 0 2
41470: RET
// export function Inc ( value ) ; begin
41471: LD_INT 0
41473: PPUSH
// result := value + 1 ;
41474: LD_ADDR_VAR 0 2
41478: PUSH
41479: LD_VAR 0 1
41483: PUSH
41484: LD_INT 1
41486: PLUS
41487: ST_TO_ADDR
// end ;
41488: LD_VAR 0 2
41492: RET
// export function Dec ( value ) ; begin
41493: LD_INT 0
41495: PPUSH
// result := value - 1 ;
41496: LD_ADDR_VAR 0 2
41500: PUSH
41501: LD_VAR 0 1
41505: PUSH
41506: LD_INT 1
41508: MINUS
41509: ST_TO_ADDR
// end ;
41510: LD_VAR 0 2
41514: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41515: LD_INT 0
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
41523: PPUSH
41524: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41525: LD_VAR 0 1
41529: PPUSH
41530: LD_VAR 0 2
41534: PPUSH
41535: CALL_OW 488
41539: NOT
41540: IFTRUE 41559
41542: PUSH
41543: LD_VAR 0 3
41547: PPUSH
41548: LD_VAR 0 4
41552: PPUSH
41553: CALL_OW 488
41557: NOT
41558: OR
41559: IFFALSE 41572
// begin result := - 1 ;
41561: LD_ADDR_VAR 0 5
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: ST_TO_ADDR
// exit ;
41570: GO 41807
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41572: LD_ADDR_VAR 0 12
41576: PUSH
41577: LD_VAR 0 1
41581: PPUSH
41582: LD_VAR 0 2
41586: PPUSH
41587: LD_VAR 0 3
41591: PPUSH
41592: LD_VAR 0 4
41596: PPUSH
41597: CALL 40643 0 4
41601: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41602: LD_ADDR_VAR 0 11
41606: PUSH
41607: LD_VAR 0 1
41611: PPUSH
41612: LD_VAR 0 2
41616: PPUSH
41617: LD_VAR 0 12
41621: PUSH
41622: LD_INT 1
41624: ARRAY
41625: PPUSH
41626: LD_VAR 0 12
41630: PUSH
41631: LD_INT 2
41633: ARRAY
41634: PPUSH
41635: CALL_OW 298
41639: ST_TO_ADDR
// distance := 9999 ;
41640: LD_ADDR_VAR 0 10
41644: PUSH
41645: LD_INT 9999
41647: ST_TO_ADDR
// for i := 0 to 5 do
41648: LD_ADDR_VAR 0 6
41652: PUSH
41653: DOUBLE
41654: LD_INT 0
41656: DEC
41657: ST_TO_ADDR
41658: LD_INT 5
41660: PUSH
41661: FOR_TO
41662: IFFALSE 41805
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41664: LD_ADDR_VAR 0 7
41668: PUSH
41669: LD_VAR 0 1
41673: PPUSH
41674: LD_VAR 0 6
41678: PPUSH
41679: LD_VAR 0 11
41683: PPUSH
41684: CALL_OW 272
41688: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41689: LD_ADDR_VAR 0 8
41693: PUSH
41694: LD_VAR 0 2
41698: PPUSH
41699: LD_VAR 0 6
41703: PPUSH
41704: LD_VAR 0 11
41708: PPUSH
41709: CALL_OW 273
41713: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41714: LD_VAR 0 7
41718: PPUSH
41719: LD_VAR 0 8
41723: PPUSH
41724: CALL_OW 488
41728: NOT
41729: IFFALSE 41733
// continue ;
41731: GO 41661
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41733: LD_ADDR_VAR 0 9
41737: PUSH
41738: LD_VAR 0 12
41742: PUSH
41743: LD_INT 1
41745: ARRAY
41746: PPUSH
41747: LD_VAR 0 12
41751: PUSH
41752: LD_INT 2
41754: ARRAY
41755: PPUSH
41756: LD_VAR 0 7
41760: PPUSH
41761: LD_VAR 0 8
41765: PPUSH
41766: CALL_OW 298
41770: ST_TO_ADDR
// if tmp < distance then
41771: LD_VAR 0 9
41775: PUSH
41776: LD_VAR 0 10
41780: LESS
41781: IFFALSE 41803
// begin result := i ;
41783: LD_ADDR_VAR 0 5
41787: PUSH
41788: LD_VAR 0 6
41792: ST_TO_ADDR
// distance := tmp ;
41793: LD_ADDR_VAR 0 10
41797: PUSH
41798: LD_VAR 0 9
41802: ST_TO_ADDR
// end ; end ;
41803: GO 41661
41805: POP
41806: POP
// end ;
41807: LD_VAR 0 5
41811: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41812: LD_INT 0
41814: PPUSH
41815: PPUSH
// if not driver or not IsInUnit ( driver ) then
41816: LD_VAR 0 1
41820: NOT
41821: IFTRUE 41835
41823: PUSH
41824: LD_VAR 0 1
41828: PPUSH
41829: CALL_OW 310
41833: NOT
41834: OR
41835: IFFALSE 41839
// exit ;
41837: GO 41929
// vehicle := IsInUnit ( driver ) ;
41839: LD_ADDR_VAR 0 3
41843: PUSH
41844: LD_VAR 0 1
41848: PPUSH
41849: CALL_OW 310
41853: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41854: LD_VAR 0 1
41858: PPUSH
41859: LD_STRING \
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: PUSH
41889: LD_STRING E
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: LD_VAR 0 3
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PPUSH
41925: CALL_OW 446
// end ;
41929: LD_VAR 0 2
41933: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41934: LD_INT 0
41936: PPUSH
41937: PPUSH
// if not driver or not IsInUnit ( driver ) then
41938: LD_VAR 0 1
41942: NOT
41943: IFTRUE 41957
41945: PUSH
41946: LD_VAR 0 1
41950: PPUSH
41951: CALL_OW 310
41955: NOT
41956: OR
41957: IFFALSE 41961
// exit ;
41959: GO 42051
// vehicle := IsInUnit ( driver ) ;
41961: LD_ADDR_VAR 0 3
41965: PUSH
41966: LD_VAR 0 1
41970: PPUSH
41971: CALL_OW 310
41975: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41976: LD_VAR 0 1
41980: PPUSH
41981: LD_STRING \
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: PUSH
42011: LD_STRING E
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_VAR 0 3
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PPUSH
42047: CALL_OW 447
// end ;
42051: LD_VAR 0 2
42055: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42056: LD_INT 0
42058: PPUSH
42059: PPUSH
42060: PPUSH
// tmp := [ ] ;
42061: LD_ADDR_VAR 0 5
42065: PUSH
42066: EMPTY
42067: ST_TO_ADDR
// for i in units do
42068: LD_ADDR_VAR 0 4
42072: PUSH
42073: LD_VAR 0 1
42077: PUSH
42078: FOR_IN
42079: IFFALSE 42117
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42081: LD_ADDR_VAR 0 5
42085: PUSH
42086: LD_VAR 0 5
42090: PPUSH
42091: LD_VAR 0 5
42095: PUSH
42096: LD_INT 1
42098: PLUS
42099: PPUSH
42100: LD_VAR 0 4
42104: PPUSH
42105: CALL_OW 256
42109: PPUSH
42110: CALL_OW 2
42114: ST_TO_ADDR
42115: GO 42078
42117: POP
42118: POP
// if not tmp then
42119: LD_VAR 0 5
42123: NOT
42124: IFFALSE 42128
// exit ;
42126: GO 42176
// if asc then
42128: LD_VAR 0 2
42132: IFFALSE 42156
// result := SortListByListAsc ( units , tmp ) else
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: LD_VAR 0 1
42143: PPUSH
42144: LD_VAR 0 5
42148: PPUSH
42149: CALL_OW 76
42153: ST_TO_ADDR
42154: GO 42176
// result := SortListByListDesc ( units , tmp ) ;
42156: LD_ADDR_VAR 0 3
42160: PUSH
42161: LD_VAR 0 1
42165: PPUSH
42166: LD_VAR 0 5
42170: PPUSH
42171: CALL_OW 77
42175: ST_TO_ADDR
// end ;
42176: LD_VAR 0 3
42180: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42181: LD_INT 0
42183: PPUSH
42184: PPUSH
// task := GetTaskList ( mech ) ;
42185: LD_ADDR_VAR 0 4
42189: PUSH
42190: LD_VAR 0 1
42194: PPUSH
42195: CALL_OW 437
42199: ST_TO_ADDR
// if not task then
42200: LD_VAR 0 4
42204: NOT
42205: IFFALSE 42209
// exit ;
42207: GO 42253
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42209: LD_ADDR_VAR 0 3
42213: PUSH
42214: LD_VAR 0 4
42218: PUSH
42219: LD_INT 1
42221: ARRAY
42222: PUSH
42223: LD_INT 1
42225: ARRAY
42226: PUSH
42227: LD_STRING r
42229: EQUAL
42230: IFFALSE 42252
42232: PUSH
42233: LD_VAR 0 4
42237: PUSH
42238: LD_INT 1
42240: ARRAY
42241: PUSH
42242: LD_INT 4
42244: ARRAY
42245: PUSH
42246: LD_VAR 0 2
42250: EQUAL
42251: AND
42252: ST_TO_ADDR
// end ;
42253: LD_VAR 0 3
42257: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42258: LD_INT 0
42260: PPUSH
// SetDir ( unit , d ) ;
42261: LD_VAR 0 1
42265: PPUSH
42266: LD_VAR 0 4
42270: PPUSH
42271: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
42275: LD_ADDR_VAR 0 6
42279: PUSH
42280: LD_VAR 0 1
42284: PPUSH
42285: LD_VAR 0 2
42289: PPUSH
42290: LD_VAR 0 3
42294: PPUSH
42295: LD_VAR 0 5
42299: PPUSH
42300: CALL_OW 48
42304: ST_TO_ADDR
// end ;
42305: LD_VAR 0 6
42309: RET
// export function ToNaturalNumber ( number ) ; begin
42310: LD_INT 0
42312: PPUSH
// result := number div 1 ;
42313: LD_ADDR_VAR 0 2
42317: PUSH
42318: LD_VAR 0 1
42322: PUSH
42323: LD_INT 1
42325: DIV
42326: ST_TO_ADDR
// if number < 0 then
42327: LD_VAR 0 1
42331: PUSH
42332: LD_INT 0
42334: LESS
42335: IFFALSE 42345
// result := 0 ;
42337: LD_ADDR_VAR 0 2
42341: PUSH
42342: LD_INT 0
42344: ST_TO_ADDR
// end ;
42345: LD_VAR 0 2
42349: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
42350: LD_INT 0
42352: PPUSH
42353: PPUSH
42354: PPUSH
// if not buildings then
42355: LD_VAR 0 1
42359: NOT
42360: IFFALSE 42364
// exit ;
42362: GO 42479
// tmp := [ ] ;
42364: LD_ADDR_VAR 0 5
42368: PUSH
42369: EMPTY
42370: ST_TO_ADDR
// for b in buildings do
42371: LD_ADDR_VAR 0 4
42375: PUSH
42376: LD_VAR 0 1
42380: PUSH
42381: FOR_IN
42382: IFFALSE 42420
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
42384: LD_ADDR_VAR 0 5
42388: PUSH
42389: LD_VAR 0 5
42393: PPUSH
42394: LD_VAR 0 5
42398: PUSH
42399: LD_INT 1
42401: PLUS
42402: PPUSH
42403: LD_VAR 0 4
42407: PPUSH
42408: CALL_OW 266
42412: PPUSH
42413: CALL_OW 1
42417: ST_TO_ADDR
42418: GO 42381
42420: POP
42421: POP
// if not tmp then
42422: LD_VAR 0 5
42426: NOT
42427: IFFALSE 42431
// exit ;
42429: GO 42479
// if asc then
42431: LD_VAR 0 2
42435: IFFALSE 42459
// result := SortListByListAsc ( buildings , tmp ) else
42437: LD_ADDR_VAR 0 3
42441: PUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: LD_VAR 0 5
42451: PPUSH
42452: CALL_OW 76
42456: ST_TO_ADDR
42457: GO 42479
// result := SortListByListDesc ( buildings , tmp ) ;
42459: LD_ADDR_VAR 0 3
42463: PUSH
42464: LD_VAR 0 1
42468: PPUSH
42469: LD_VAR 0 5
42473: PPUSH
42474: CALL_OW 77
42478: ST_TO_ADDR
// end ;
42479: LD_VAR 0 3
42483: RET
// export function SortByClass ( units , class ) ; var un ; begin
42484: LD_INT 0
42486: PPUSH
42487: PPUSH
// if not units or not class then
42488: LD_VAR 0 1
42492: NOT
42493: IFTRUE 42502
42495: PUSH
42496: LD_VAR 0 2
42500: NOT
42501: OR
42502: IFFALSE 42506
// exit ;
42504: GO 42601
// result := [ ] ;
42506: LD_ADDR_VAR 0 3
42510: PUSH
42511: EMPTY
42512: ST_TO_ADDR
// for un in units do
42513: LD_ADDR_VAR 0 4
42517: PUSH
42518: LD_VAR 0 1
42522: PUSH
42523: FOR_IN
42524: IFFALSE 42599
// if GetClass ( un ) = class then
42526: LD_VAR 0 4
42530: PPUSH
42531: CALL_OW 257
42535: PUSH
42536: LD_VAR 0 2
42540: EQUAL
42541: IFFALSE 42568
// result := Insert ( result , 1 , un ) else
42543: LD_ADDR_VAR 0 3
42547: PUSH
42548: LD_VAR 0 3
42552: PPUSH
42553: LD_INT 1
42555: PPUSH
42556: LD_VAR 0 4
42560: PPUSH
42561: CALL_OW 2
42565: ST_TO_ADDR
42566: GO 42597
// result := Replace ( result , result + 1 , un ) ;
42568: LD_ADDR_VAR 0 3
42572: PUSH
42573: LD_VAR 0 3
42577: PPUSH
42578: LD_VAR 0 3
42582: PUSH
42583: LD_INT 1
42585: PLUS
42586: PPUSH
42587: LD_VAR 0 4
42591: PPUSH
42592: CALL_OW 1
42596: ST_TO_ADDR
42597: GO 42523
42599: POP
42600: POP
// end ;
42601: LD_VAR 0 3
42605: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42606: LD_INT 0
42608: PPUSH
42609: PPUSH
42610: PPUSH
42611: PPUSH
42612: PPUSH
42613: PPUSH
42614: PPUSH
// result := [ ] ;
42615: LD_ADDR_VAR 0 4
42619: PUSH
42620: EMPTY
42621: ST_TO_ADDR
// if x - r < 0 then
42622: LD_VAR 0 1
42626: PUSH
42627: LD_VAR 0 3
42631: MINUS
42632: PUSH
42633: LD_INT 0
42635: LESS
42636: IFFALSE 42648
// min_x := 0 else
42638: LD_ADDR_VAR 0 8
42642: PUSH
42643: LD_INT 0
42645: ST_TO_ADDR
42646: GO 42664
// min_x := x - r ;
42648: LD_ADDR_VAR 0 8
42652: PUSH
42653: LD_VAR 0 1
42657: PUSH
42658: LD_VAR 0 3
42662: MINUS
42663: ST_TO_ADDR
// if y - r < 0 then
42664: LD_VAR 0 2
42668: PUSH
42669: LD_VAR 0 3
42673: MINUS
42674: PUSH
42675: LD_INT 0
42677: LESS
42678: IFFALSE 42690
// min_y := 0 else
42680: LD_ADDR_VAR 0 7
42684: PUSH
42685: LD_INT 0
42687: ST_TO_ADDR
42688: GO 42706
// min_y := y - r ;
42690: LD_ADDR_VAR 0 7
42694: PUSH
42695: LD_VAR 0 2
42699: PUSH
42700: LD_VAR 0 3
42704: MINUS
42705: ST_TO_ADDR
// max_x := x + r ;
42706: LD_ADDR_VAR 0 9
42710: PUSH
42711: LD_VAR 0 1
42715: PUSH
42716: LD_VAR 0 3
42720: PLUS
42721: ST_TO_ADDR
// max_y := y + r ;
42722: LD_ADDR_VAR 0 10
42726: PUSH
42727: LD_VAR 0 2
42731: PUSH
42732: LD_VAR 0 3
42736: PLUS
42737: ST_TO_ADDR
// for _x = min_x to max_x do
42738: LD_ADDR_VAR 0 5
42742: PUSH
42743: DOUBLE
42744: LD_VAR 0 8
42748: DEC
42749: ST_TO_ADDR
42750: LD_VAR 0 9
42754: PUSH
42755: FOR_TO
42756: IFFALSE 42857
// for _y = min_y to max_y do
42758: LD_ADDR_VAR 0 6
42762: PUSH
42763: DOUBLE
42764: LD_VAR 0 7
42768: DEC
42769: ST_TO_ADDR
42770: LD_VAR 0 10
42774: PUSH
42775: FOR_TO
42776: IFFALSE 42853
// begin if not ValidHex ( _x , _y ) then
42778: LD_VAR 0 5
42782: PPUSH
42783: LD_VAR 0 6
42787: PPUSH
42788: CALL_OW 488
42792: NOT
42793: IFFALSE 42797
// continue ;
42795: GO 42775
// if GetResourceTypeXY ( _x , _y ) then
42797: LD_VAR 0 5
42801: PPUSH
42802: LD_VAR 0 6
42806: PPUSH
42807: CALL_OW 283
42811: IFFALSE 42851
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42813: LD_ADDR_VAR 0 4
42817: PUSH
42818: LD_VAR 0 4
42822: PPUSH
42823: LD_VAR 0 4
42827: PUSH
42828: LD_INT 1
42830: PLUS
42831: PPUSH
42832: LD_VAR 0 5
42836: PUSH
42837: LD_VAR 0 6
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PPUSH
42846: CALL_OW 1
42850: ST_TO_ADDR
// end ;
42851: GO 42775
42853: POP
42854: POP
42855: GO 42755
42857: POP
42858: POP
// end ;
42859: LD_VAR 0 4
42863: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42864: LD_INT 0
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
// if not units then
42874: LD_VAR 0 1
42878: NOT
42879: IFFALSE 42883
// exit ;
42881: GO 43415
// result := UnitFilter ( units , [ f_ok ] ) ;
42883: LD_ADDR_VAR 0 3
42887: PUSH
42888: LD_VAR 0 1
42892: PPUSH
42893: LD_INT 50
42895: PUSH
42896: EMPTY
42897: LIST
42898: PPUSH
42899: CALL_OW 72
42903: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42904: LD_ADDR_VAR 0 8
42908: PUSH
42909: LD_VAR 0 1
42913: PUSH
42914: LD_INT 1
42916: ARRAY
42917: PPUSH
42918: CALL_OW 255
42922: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42923: LD_ADDR_VAR 0 10
42927: PUSH
42928: LD_INT 29
42930: PUSH
42931: LD_INT 91
42933: PUSH
42934: LD_INT 49
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: LIST
42941: ST_TO_ADDR
// if not result then
42942: LD_VAR 0 3
42946: NOT
42947: IFFALSE 42951
// exit ;
42949: GO 43415
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42951: LD_ADDR_VAR 0 5
42955: PUSH
42956: LD_INT 81
42958: PUSH
42959: LD_VAR 0 8
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PPUSH
42968: CALL_OW 69
42972: ST_TO_ADDR
// for i in result do
42973: LD_ADDR_VAR 0 4
42977: PUSH
42978: LD_VAR 0 3
42982: PUSH
42983: FOR_IN
42984: IFFALSE 43413
// begin tag := GetTag ( i ) + 1 ;
42986: LD_ADDR_VAR 0 9
42990: PUSH
42991: LD_VAR 0 4
42995: PPUSH
42996: CALL_OW 110
43000: PUSH
43001: LD_INT 1
43003: PLUS
43004: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43005: LD_ADDR_VAR 0 7
43009: PUSH
43010: LD_VAR 0 4
43014: PPUSH
43015: CALL_OW 250
43019: PPUSH
43020: LD_VAR 0 4
43024: PPUSH
43025: CALL_OW 251
43029: PPUSH
43030: LD_INT 4
43032: PPUSH
43033: CALL 42606 0 3
43037: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43038: LD_VAR 0 4
43042: PPUSH
43043: CALL_OW 247
43047: PUSH
43048: LD_INT 2
43050: EQUAL
43051: IFFALSE 43063
43053: PUSH
43054: LD_VAR 0 7
43058: PUSH
43059: LD_INT 2
43061: GREATER
43062: AND
43063: IFFALSE 43083
43065: PUSH
43066: LD_VAR 0 4
43070: PPUSH
43071: CALL_OW 264
43075: PUSH
43076: LD_VAR 0 10
43080: IN
43081: NOT
43082: AND
43083: IFFALSE 43122
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43085: LD_VAR 0 4
43089: PPUSH
43090: LD_VAR 0 7
43094: PUSH
43095: LD_INT 1
43097: ARRAY
43098: PUSH
43099: LD_INT 1
43101: ARRAY
43102: PPUSH
43103: LD_VAR 0 7
43107: PUSH
43108: LD_INT 1
43110: ARRAY
43111: PUSH
43112: LD_INT 2
43114: ARRAY
43115: PPUSH
43116: CALL_OW 116
43120: GO 43411
// if path > tag then
43122: LD_VAR 0 2
43126: PUSH
43127: LD_VAR 0 9
43131: GREATER
43132: IFFALSE 43340
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43134: LD_ADDR_VAR 0 6
43138: PUSH
43139: LD_VAR 0 5
43143: PPUSH
43144: LD_INT 91
43146: PUSH
43147: LD_VAR 0 4
43151: PUSH
43152: LD_INT 8
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: LIST
43159: PPUSH
43160: CALL_OW 72
43164: ST_TO_ADDR
// if nearEnemy then
43165: LD_VAR 0 6
43169: IFFALSE 43238
// begin if GetWeapon ( i ) = ru_time_lapser then
43171: LD_VAR 0 4
43175: PPUSH
43176: CALL_OW 264
43180: PUSH
43181: LD_INT 49
43183: EQUAL
43184: IFFALSE 43212
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43186: LD_VAR 0 4
43190: PPUSH
43191: LD_VAR 0 6
43195: PPUSH
43196: LD_VAR 0 4
43200: PPUSH
43201: CALL_OW 74
43205: PPUSH
43206: CALL_OW 112
43210: GO 43236
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43212: LD_VAR 0 4
43216: PPUSH
43217: LD_VAR 0 6
43221: PPUSH
43222: LD_VAR 0 4
43226: PPUSH
43227: CALL_OW 74
43231: PPUSH
43232: CALL 44496 0 2
// end else
43236: GO 43338
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43238: LD_VAR 0 4
43242: PPUSH
43243: LD_VAR 0 2
43247: PUSH
43248: LD_VAR 0 9
43252: ARRAY
43253: PUSH
43254: LD_INT 1
43256: ARRAY
43257: PPUSH
43258: LD_VAR 0 2
43262: PUSH
43263: LD_VAR 0 9
43267: ARRAY
43268: PUSH
43269: LD_INT 2
43271: ARRAY
43272: PPUSH
43273: CALL_OW 297
43277: PUSH
43278: LD_INT 6
43280: GREATER
43281: IFFALSE 43324
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43283: LD_VAR 0 4
43287: PPUSH
43288: LD_VAR 0 2
43292: PUSH
43293: LD_VAR 0 9
43297: ARRAY
43298: PUSH
43299: LD_INT 1
43301: ARRAY
43302: PPUSH
43303: LD_VAR 0 2
43307: PUSH
43308: LD_VAR 0 9
43312: ARRAY
43313: PUSH
43314: LD_INT 2
43316: ARRAY
43317: PPUSH
43318: CALL_OW 114
43322: GO 43338
// SetTag ( i , tag ) ;
43324: LD_VAR 0 4
43328: PPUSH
43329: LD_VAR 0 9
43333: PPUSH
43334: CALL_OW 109
// end else
43338: GO 43411
// if enemy then
43340: LD_VAR 0 5
43344: IFFALSE 43411
// begin if GetWeapon ( i ) = ru_time_lapser then
43346: LD_VAR 0 4
43350: PPUSH
43351: CALL_OW 264
43355: PUSH
43356: LD_INT 49
43358: EQUAL
43359: IFFALSE 43387
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43361: LD_VAR 0 4
43365: PPUSH
43366: LD_VAR 0 5
43370: PPUSH
43371: LD_VAR 0 4
43375: PPUSH
43376: CALL_OW 74
43380: PPUSH
43381: CALL_OW 112
43385: GO 43411
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43387: LD_VAR 0 4
43391: PPUSH
43392: LD_VAR 0 5
43396: PPUSH
43397: LD_VAR 0 4
43401: PPUSH
43402: CALL_OW 74
43406: PPUSH
43407: CALL 44496 0 2
// end ; end ;
43411: GO 42983
43413: POP
43414: POP
// end ;
43415: LD_VAR 0 3
43419: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43420: LD_INT 0
43422: PPUSH
43423: PPUSH
43424: PPUSH
// if not unit or IsInUnit ( unit ) then
43425: LD_VAR 0 1
43429: NOT
43430: IFTRUE 43443
43432: PUSH
43433: LD_VAR 0 1
43437: PPUSH
43438: CALL_OW 310
43442: OR
43443: IFFALSE 43447
// exit ;
43445: GO 43538
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43447: LD_ADDR_VAR 0 4
43451: PUSH
43452: LD_VAR 0 1
43456: PPUSH
43457: CALL_OW 250
43461: PPUSH
43462: LD_VAR 0 2
43466: PPUSH
43467: LD_INT 1
43469: PPUSH
43470: CALL_OW 272
43474: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43475: LD_ADDR_VAR 0 5
43479: PUSH
43480: LD_VAR 0 1
43484: PPUSH
43485: CALL_OW 251
43489: PPUSH
43490: LD_VAR 0 2
43494: PPUSH
43495: LD_INT 1
43497: PPUSH
43498: CALL_OW 273
43502: ST_TO_ADDR
// if ValidHex ( x , y ) then
43503: LD_VAR 0 4
43507: PPUSH
43508: LD_VAR 0 5
43512: PPUSH
43513: CALL_OW 488
43517: IFFALSE 43538
// ComTurnXY ( unit , x , y ) ;
43519: LD_VAR 0 1
43523: PPUSH
43524: LD_VAR 0 4
43528: PPUSH
43529: LD_VAR 0 5
43533: PPUSH
43534: CALL_OW 118
// end ;
43538: LD_VAR 0 3
43542: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43543: LD_INT 0
43545: PPUSH
43546: PPUSH
// result := false ;
43547: LD_ADDR_VAR 0 3
43551: PUSH
43552: LD_INT 0
43554: ST_TO_ADDR
// if not units then
43555: LD_VAR 0 2
43559: NOT
43560: IFFALSE 43564
// exit ;
43562: GO 43609
// for i in units do
43564: LD_ADDR_VAR 0 4
43568: PUSH
43569: LD_VAR 0 2
43573: PUSH
43574: FOR_IN
43575: IFFALSE 43607
// if See ( side , i ) then
43577: LD_VAR 0 1
43581: PPUSH
43582: LD_VAR 0 4
43586: PPUSH
43587: CALL_OW 292
43591: IFFALSE 43605
// begin result := true ;
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: LD_INT 1
43600: ST_TO_ADDR
// exit ;
43601: POP
43602: POP
43603: GO 43609
// end ;
43605: GO 43574
43607: POP
43608: POP
// end ;
43609: LD_VAR 0 3
43613: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43614: LD_INT 0
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
// if not unit or not points then
43620: LD_VAR 0 1
43624: NOT
43625: IFTRUE 43634
43627: PUSH
43628: LD_VAR 0 2
43632: NOT
43633: OR
43634: IFFALSE 43638
// exit ;
43636: GO 43728
// dist := 99999 ;
43638: LD_ADDR_VAR 0 5
43642: PUSH
43643: LD_INT 99999
43645: ST_TO_ADDR
// for i in points do
43646: LD_ADDR_VAR 0 4
43650: PUSH
43651: LD_VAR 0 2
43655: PUSH
43656: FOR_IN
43657: IFFALSE 43726
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43659: LD_ADDR_VAR 0 6
43663: PUSH
43664: LD_VAR 0 1
43668: PPUSH
43669: LD_VAR 0 4
43673: PUSH
43674: LD_INT 1
43676: ARRAY
43677: PPUSH
43678: LD_VAR 0 4
43682: PUSH
43683: LD_INT 2
43685: ARRAY
43686: PPUSH
43687: CALL_OW 297
43691: ST_TO_ADDR
// if tmpDist < dist then
43692: LD_VAR 0 6
43696: PUSH
43697: LD_VAR 0 5
43701: LESS
43702: IFFALSE 43724
// begin result := i ;
43704: LD_ADDR_VAR 0 3
43708: PUSH
43709: LD_VAR 0 4
43713: ST_TO_ADDR
// dist := tmpDist ;
43714: LD_ADDR_VAR 0 5
43718: PUSH
43719: LD_VAR 0 6
43723: ST_TO_ADDR
// end ; end ;
43724: GO 43656
43726: POP
43727: POP
// end ;
43728: LD_VAR 0 3
43732: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43733: LD_INT 0
43735: PPUSH
// uc_side := side ;
43736: LD_ADDR_OWVAR 20
43740: PUSH
43741: LD_VAR 0 1
43745: ST_TO_ADDR
// uc_nation := 3 ;
43746: LD_ADDR_OWVAR 21
43750: PUSH
43751: LD_INT 3
43753: ST_TO_ADDR
// vc_chassis := 25 ;
43754: LD_ADDR_OWVAR 37
43758: PUSH
43759: LD_INT 25
43761: ST_TO_ADDR
// vc_engine := engine_siberite ;
43762: LD_ADDR_OWVAR 39
43766: PUSH
43767: LD_INT 3
43769: ST_TO_ADDR
// vc_control := control_computer ;
43770: LD_ADDR_OWVAR 38
43774: PUSH
43775: LD_INT 3
43777: ST_TO_ADDR
// vc_weapon := 59 ;
43778: LD_ADDR_OWVAR 40
43782: PUSH
43783: LD_INT 59
43785: ST_TO_ADDR
// result := CreateVehicle ;
43786: LD_ADDR_VAR 0 5
43790: PUSH
43791: CALL_OW 45
43795: ST_TO_ADDR
// SetDir ( result , d ) ;
43796: LD_VAR 0 5
43800: PPUSH
43801: LD_VAR 0 4
43805: PPUSH
43806: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43810: LD_VAR 0 5
43814: PPUSH
43815: LD_VAR 0 2
43819: PPUSH
43820: LD_VAR 0 3
43824: PPUSH
43825: LD_INT 0
43827: PPUSH
43828: CALL_OW 48
// end ;
43832: LD_VAR 0 5
43836: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43837: LD_INT 0
43839: PPUSH
43840: PPUSH
43841: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43842: LD_ADDR_VAR 0 2
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43865: LD_VAR 0 1
43869: NOT
43870: IFTRUE 43903
43872: PUSH
43873: LD_VAR 0 1
43877: PPUSH
43878: CALL_OW 264
43882: PUSH
43883: LD_INT 12
43885: PUSH
43886: LD_INT 51
43888: PUSH
43889: LD_INT 32
43891: PUSH
43892: LD_INT 89
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: IN
43901: NOT
43902: OR
43903: IFFALSE 43907
// exit ;
43905: GO 44005
// for i := 1 to 3 do
43907: LD_ADDR_VAR 0 3
43911: PUSH
43912: DOUBLE
43913: LD_INT 1
43915: DEC
43916: ST_TO_ADDR
43917: LD_INT 3
43919: PUSH
43920: FOR_TO
43921: IFFALSE 44003
// begin tmp := GetCargo ( cargo , i ) ;
43923: LD_ADDR_VAR 0 4
43927: PUSH
43928: LD_VAR 0 1
43932: PPUSH
43933: LD_VAR 0 3
43937: PPUSH
43938: CALL_OW 289
43942: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43943: LD_ADDR_VAR 0 2
43947: PUSH
43948: LD_VAR 0 2
43952: PPUSH
43953: LD_VAR 0 3
43957: PPUSH
43958: LD_VAR 0 4
43962: PPUSH
43963: CALL_OW 1
43967: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43968: LD_ADDR_VAR 0 2
43972: PUSH
43973: LD_VAR 0 2
43977: PPUSH
43978: LD_INT 4
43980: PPUSH
43981: LD_VAR 0 2
43985: PUSH
43986: LD_INT 4
43988: ARRAY
43989: PUSH
43990: LD_VAR 0 4
43994: PLUS
43995: PPUSH
43996: CALL_OW 1
44000: ST_TO_ADDR
// end ;
44001: GO 43920
44003: POP
44004: POP
// end ;
44005: LD_VAR 0 2
44009: RET
// export function Length ( array ) ; begin
44010: LD_INT 0
44012: PPUSH
// result := array + 0 ;
44013: LD_ADDR_VAR 0 2
44017: PUSH
44018: LD_VAR 0 1
44022: PUSH
44023: LD_INT 0
44025: PLUS
44026: ST_TO_ADDR
// end ;
44027: LD_VAR 0 2
44031: RET
// export function PrepareArray ( array ) ; begin
44032: LD_INT 0
44034: PPUSH
// result := array diff 0 ;
44035: LD_ADDR_VAR 0 2
44039: PUSH
44040: LD_VAR 0 1
44044: PUSH
44045: LD_INT 0
44047: DIFF
44048: ST_TO_ADDR
// if not result [ 1 ] then
44049: LD_VAR 0 2
44053: PUSH
44054: LD_INT 1
44056: ARRAY
44057: NOT
44058: IFFALSE 44078
// result := Delete ( result , 1 ) ;
44060: LD_ADDR_VAR 0 2
44064: PUSH
44065: LD_VAR 0 2
44069: PPUSH
44070: LD_INT 1
44072: PPUSH
44073: CALL_OW 3
44077: ST_TO_ADDR
// end ;
44078: LD_VAR 0 2
44082: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44083: LD_INT 0
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
// sibRocketRange := 25 ;
44089: LD_ADDR_VAR 0 6
44093: PUSH
44094: LD_INT 25
44096: ST_TO_ADDR
// result := false ;
44097: LD_ADDR_VAR 0 4
44101: PUSH
44102: LD_INT 0
44104: ST_TO_ADDR
// for i := 0 to 5 do
44105: LD_ADDR_VAR 0 5
44109: PUSH
44110: DOUBLE
44111: LD_INT 0
44113: DEC
44114: ST_TO_ADDR
44115: LD_INT 5
44117: PUSH
44118: FOR_TO
44119: IFFALSE 44186
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44121: LD_VAR 0 1
44125: PPUSH
44126: LD_VAR 0 5
44130: PPUSH
44131: LD_VAR 0 6
44135: PPUSH
44136: CALL_OW 272
44140: PPUSH
44141: LD_VAR 0 2
44145: PPUSH
44146: LD_VAR 0 5
44150: PPUSH
44151: LD_VAR 0 6
44155: PPUSH
44156: CALL_OW 273
44160: PPUSH
44161: LD_VAR 0 3
44165: PPUSH
44166: CALL_OW 309
44170: IFFALSE 44184
// begin result := true ;
44172: LD_ADDR_VAR 0 4
44176: PUSH
44177: LD_INT 1
44179: ST_TO_ADDR
// exit ;
44180: POP
44181: POP
44182: GO 44188
// end ;
44184: GO 44118
44186: POP
44187: POP
// end ;
44188: LD_VAR 0 4
44192: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44193: LD_INT 0
44195: PPUSH
44196: PPUSH
44197: PPUSH
// if btype = b_depot then
44198: LD_VAR 0 2
44202: PUSH
44203: LD_INT 0
44205: EQUAL
44206: IFFALSE 44218
// begin result := true ;
44208: LD_ADDR_VAR 0 3
44212: PUSH
44213: LD_INT 1
44215: ST_TO_ADDR
// exit ;
44216: GO 44338
// end ; pom := GetBase ( depot ) ;
44218: LD_ADDR_VAR 0 4
44222: PUSH
44223: LD_VAR 0 1
44227: PPUSH
44228: CALL_OW 274
44232: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44233: LD_ADDR_VAR 0 5
44237: PUSH
44238: LD_VAR 0 2
44242: PPUSH
44243: LD_VAR 0 1
44247: PPUSH
44248: CALL_OW 248
44252: PPUSH
44253: CALL_OW 450
44257: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44258: LD_ADDR_VAR 0 3
44262: PUSH
44263: LD_VAR 0 4
44267: PPUSH
44268: LD_INT 1
44270: PPUSH
44271: CALL_OW 275
44275: PUSH
44276: LD_VAR 0 5
44280: PUSH
44281: LD_INT 1
44283: ARRAY
44284: GREATEREQUAL
44285: IFFALSE 44311
44287: PUSH
44288: LD_VAR 0 4
44292: PPUSH
44293: LD_INT 2
44295: PPUSH
44296: CALL_OW 275
44300: PUSH
44301: LD_VAR 0 5
44305: PUSH
44306: LD_INT 2
44308: ARRAY
44309: GREATEREQUAL
44310: AND
44311: IFFALSE 44337
44313: PUSH
44314: LD_VAR 0 4
44318: PPUSH
44319: LD_INT 3
44321: PPUSH
44322: CALL_OW 275
44326: PUSH
44327: LD_VAR 0 5
44331: PUSH
44332: LD_INT 3
44334: ARRAY
44335: GREATEREQUAL
44336: AND
44337: ST_TO_ADDR
// end ;
44338: LD_VAR 0 3
44342: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44343: LD_INT 0
44345: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44346: LD_VAR 0 1
44350: PPUSH
44351: LD_VAR 0 2
44355: PPUSH
44356: LD_INT 0
44358: PPUSH
44359: LD_INT 0
44361: PPUSH
44362: LD_INT 1
44364: PPUSH
44365: LD_INT 0
44367: PPUSH
44368: CALL_OW 587
// end ;
44372: LD_VAR 0 3
44376: RET
// export function CenterOnNow ( unit ) ; begin
44377: LD_INT 0
44379: PPUSH
// result := IsInUnit ( unit ) ;
44380: LD_ADDR_VAR 0 2
44384: PUSH
44385: LD_VAR 0 1
44389: PPUSH
44390: CALL_OW 310
44394: ST_TO_ADDR
// if not result then
44395: LD_VAR 0 2
44399: NOT
44400: IFFALSE 44412
// result := unit ;
44402: LD_ADDR_VAR 0 2
44406: PUSH
44407: LD_VAR 0 1
44411: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44412: LD_VAR 0 1
44416: PPUSH
44417: CALL_OW 87
// end ;
44421: LD_VAR 0 2
44425: RET
// export function ComMoveHex ( unit , hex ) ; begin
44426: LD_INT 0
44428: PPUSH
// if not hex then
44429: LD_VAR 0 2
44433: NOT
44434: IFFALSE 44438
// exit ;
44436: GO 44491
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44438: LD_VAR 0 2
44442: PUSH
44443: LD_INT 1
44445: ARRAY
44446: PPUSH
44447: LD_VAR 0 2
44451: PUSH
44452: LD_INT 2
44454: ARRAY
44455: PPUSH
44456: CALL_OW 428
44460: IFFALSE 44464
// exit ;
44462: GO 44491
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44464: LD_VAR 0 1
44468: PPUSH
44469: LD_VAR 0 2
44473: PUSH
44474: LD_INT 1
44476: ARRAY
44477: PPUSH
44478: LD_VAR 0 2
44482: PUSH
44483: LD_INT 2
44485: ARRAY
44486: PPUSH
44487: CALL_OW 111
// end ;
44491: LD_VAR 0 3
44495: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44496: LD_INT 0
44498: PPUSH
44499: PPUSH
44500: PPUSH
// if not unit or not enemy then
44501: LD_VAR 0 1
44505: NOT
44506: IFTRUE 44515
44508: PUSH
44509: LD_VAR 0 2
44513: NOT
44514: OR
44515: IFFALSE 44519
// exit ;
44517: GO 44645
// x := GetX ( enemy ) ;
44519: LD_ADDR_VAR 0 4
44523: PUSH
44524: LD_VAR 0 2
44528: PPUSH
44529: CALL_OW 250
44533: ST_TO_ADDR
// y := GetY ( enemy ) ;
44534: LD_ADDR_VAR 0 5
44538: PUSH
44539: LD_VAR 0 2
44543: PPUSH
44544: CALL_OW 251
44548: ST_TO_ADDR
// if ValidHex ( x , y ) then
44549: LD_VAR 0 4
44553: PPUSH
44554: LD_VAR 0 5
44558: PPUSH
44559: CALL_OW 488
44563: IFFALSE 44645
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44565: LD_VAR 0 2
44569: PPUSH
44570: CALL_OW 247
44574: PUSH
44575: LD_INT 3
44577: PUSH
44578: LD_INT 2
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: IN
44585: IFTRUE 44608
44587: PUSH
44588: LD_VAR 0 1
44592: PPUSH
44593: CALL_OW 255
44597: PPUSH
44598: LD_VAR 0 2
44602: PPUSH
44603: CALL_OW 292
44607: OR
44608: IFFALSE 44626
// ComAttackUnit ( unit , enemy ) else
44610: LD_VAR 0 1
44614: PPUSH
44615: LD_VAR 0 2
44619: PPUSH
44620: CALL_OW 115
44624: GO 44645
// ComAgressiveMove ( unit , x , y ) ;
44626: LD_VAR 0 1
44630: PPUSH
44631: LD_VAR 0 4
44635: PPUSH
44636: LD_VAR 0 5
44640: PPUSH
44641: CALL_OW 114
// end ;
44645: LD_VAR 0 3
44649: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44650: LD_INT 0
44652: PPUSH
44653: PPUSH
44654: PPUSH
// list := AreaToList ( area , 0 ) ;
44655: LD_ADDR_VAR 0 5
44659: PUSH
44660: LD_VAR 0 1
44664: PPUSH
44665: LD_INT 0
44667: PPUSH
44668: CALL_OW 517
44672: ST_TO_ADDR
// if not list then
44673: LD_VAR 0 5
44677: NOT
44678: IFFALSE 44682
// exit ;
44680: GO 44812
// if all then
44682: LD_VAR 0 2
44686: IFFALSE 44774
// begin for i := 1 to list [ 1 ] do
44688: LD_ADDR_VAR 0 4
44692: PUSH
44693: DOUBLE
44694: LD_INT 1
44696: DEC
44697: ST_TO_ADDR
44698: LD_VAR 0 5
44702: PUSH
44703: LD_INT 1
44705: ARRAY
44706: PUSH
44707: FOR_TO
44708: IFFALSE 44770
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44710: LD_ADDR_VAR 0 3
44714: PUSH
44715: LD_VAR 0 3
44719: PPUSH
44720: LD_VAR 0 3
44724: PUSH
44725: LD_INT 1
44727: PLUS
44728: PPUSH
44729: LD_VAR 0 5
44733: PUSH
44734: LD_INT 1
44736: ARRAY
44737: PUSH
44738: LD_VAR 0 4
44742: ARRAY
44743: PUSH
44744: LD_VAR 0 5
44748: PUSH
44749: LD_INT 2
44751: ARRAY
44752: PUSH
44753: LD_VAR 0 4
44757: ARRAY
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PPUSH
44763: CALL_OW 1
44767: ST_TO_ADDR
44768: GO 44707
44770: POP
44771: POP
// exit ;
44772: GO 44812
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44774: LD_ADDR_VAR 0 3
44778: PUSH
44779: LD_VAR 0 5
44783: PUSH
44784: LD_INT 1
44786: ARRAY
44787: PUSH
44788: LD_INT 1
44790: ARRAY
44791: PUSH
44792: LD_VAR 0 5
44796: PUSH
44797: LD_INT 2
44799: ARRAY
44800: PUSH
44801: LD_INT 1
44803: ARRAY
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: EMPTY
44810: LIST
44811: ST_TO_ADDR
// end ;
44812: LD_VAR 0 3
44816: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44817: LD_INT 0
44819: PPUSH
44820: PPUSH
// list := AreaToList ( area , 0 ) ;
44821: LD_ADDR_VAR 0 4
44825: PUSH
44826: LD_VAR 0 1
44830: PPUSH
44831: LD_INT 0
44833: PPUSH
44834: CALL_OW 517
44838: ST_TO_ADDR
// if not list then
44839: LD_VAR 0 4
44843: NOT
44844: IFFALSE 44848
// exit ;
44846: GO 44889
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44848: LD_ADDR_VAR 0 3
44852: PUSH
44853: LD_VAR 0 4
44857: PUSH
44858: LD_INT 1
44860: ARRAY
44861: PUSH
44862: LD_INT 1
44864: ARRAY
44865: PUSH
44866: LD_VAR 0 4
44870: PUSH
44871: LD_INT 2
44873: ARRAY
44874: PUSH
44875: LD_INT 1
44877: ARRAY
44878: PUSH
44879: LD_VAR 0 2
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: ST_TO_ADDR
// end ;
44889: LD_VAR 0 3
44893: RET
// export function First ( array ) ; begin
44894: LD_INT 0
44896: PPUSH
// if not array then
44897: LD_VAR 0 1
44901: NOT
44902: IFFALSE 44906
// exit ;
44904: GO 44920
// result := array [ 1 ] ;
44906: LD_ADDR_VAR 0 2
44910: PUSH
44911: LD_VAR 0 1
44915: PUSH
44916: LD_INT 1
44918: ARRAY
44919: ST_TO_ADDR
// end ;
44920: LD_VAR 0 2
44924: RET
// export function Last ( array ) ; begin
44925: LD_INT 0
44927: PPUSH
// if not array then
44928: LD_VAR 0 1
44932: NOT
44933: IFFALSE 44937
// exit ;
44935: GO 44953
// result := array [ array ] ;
44937: LD_ADDR_VAR 0 2
44941: PUSH
44942: LD_VAR 0 1
44946: PUSH
44947: LD_VAR 0 1
44951: ARRAY
44952: ST_TO_ADDR
// end ;
44953: LD_VAR 0 2
44957: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44958: LD_INT 0
44960: PPUSH
44961: PPUSH
// result := [ ] ;
44962: LD_ADDR_VAR 0 5
44966: PUSH
44967: EMPTY
44968: ST_TO_ADDR
// if not array then
44969: LD_VAR 0 1
44973: NOT
44974: IFFALSE 44978
// exit ;
44976: GO 45090
// for i := 1 to array do
44978: LD_ADDR_VAR 0 6
44982: PUSH
44983: DOUBLE
44984: LD_INT 1
44986: DEC
44987: ST_TO_ADDR
44988: LD_VAR 0 1
44992: PUSH
44993: FOR_TO
44994: IFFALSE 45088
// if array [ i ] [ index ] = value then
44996: LD_VAR 0 1
45000: PUSH
45001: LD_VAR 0 6
45005: ARRAY
45006: PUSH
45007: LD_VAR 0 2
45011: ARRAY
45012: PUSH
45013: LD_VAR 0 3
45017: EQUAL
45018: IFFALSE 45086
// begin if indexColumn then
45020: LD_VAR 0 4
45024: IFFALSE 45060
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45026: LD_ADDR_VAR 0 5
45030: PUSH
45031: LD_VAR 0 5
45035: PPUSH
45036: LD_VAR 0 1
45040: PUSH
45041: LD_VAR 0 6
45045: ARRAY
45046: PUSH
45047: LD_VAR 0 4
45051: ARRAY
45052: PPUSH
45053: CALL 40098 0 2
45057: ST_TO_ADDR
45058: GO 45086
// result := Join ( result , array [ i ] ) ;
45060: LD_ADDR_VAR 0 5
45064: PUSH
45065: LD_VAR 0 5
45069: PPUSH
45070: LD_VAR 0 1
45074: PUSH
45075: LD_VAR 0 6
45079: ARRAY
45080: PPUSH
45081: CALL 40098 0 2
45085: ST_TO_ADDR
// end ;
45086: GO 44993
45088: POP
45089: POP
// end ;
45090: LD_VAR 0 5
45094: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45095: LD_INT 0
45097: PPUSH
// if not vehicles or not parkingPoint then
45098: LD_VAR 0 1
45102: NOT
45103: IFTRUE 45112
45105: PUSH
45106: LD_VAR 0 2
45110: NOT
45111: OR
45112: IFFALSE 45116
// exit ;
45114: GO 45214
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45116: LD_ADDR_VAR 0 1
45120: PUSH
45121: LD_VAR 0 1
45125: PPUSH
45126: LD_INT 50
45128: PUSH
45129: EMPTY
45130: LIST
45131: PUSH
45132: LD_INT 3
45134: PUSH
45135: LD_INT 92
45137: PUSH
45138: LD_VAR 0 2
45142: PUSH
45143: LD_INT 1
45145: ARRAY
45146: PUSH
45147: LD_VAR 0 2
45151: PUSH
45152: LD_INT 2
45154: ARRAY
45155: PUSH
45156: LD_INT 8
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PPUSH
45173: CALL_OW 72
45177: ST_TO_ADDR
// if not vehicles then
45178: LD_VAR 0 1
45182: NOT
45183: IFFALSE 45187
// exit ;
45185: GO 45214
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45187: LD_VAR 0 1
45191: PPUSH
45192: LD_VAR 0 2
45196: PUSH
45197: LD_INT 1
45199: ARRAY
45200: PPUSH
45201: LD_VAR 0 2
45205: PUSH
45206: LD_INT 2
45208: ARRAY
45209: PPUSH
45210: CALL_OW 111
// end ;
45214: LD_VAR 0 3
45218: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45219: LD_INT 0
45221: PPUSH
45222: PPUSH
45223: PPUSH
// if not side or not area then
45224: LD_VAR 0 1
45228: NOT
45229: IFTRUE 45238
45231: PUSH
45232: LD_VAR 0 2
45236: NOT
45237: OR
45238: IFFALSE 45242
// exit ;
45240: GO 45361
// tmp := AreaToList ( area , 0 ) ;
45242: LD_ADDR_VAR 0 5
45246: PUSH
45247: LD_VAR 0 2
45251: PPUSH
45252: LD_INT 0
45254: PPUSH
45255: CALL_OW 517
45259: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45260: LD_ADDR_VAR 0 4
45264: PUSH
45265: DOUBLE
45266: LD_INT 1
45268: DEC
45269: ST_TO_ADDR
45270: LD_VAR 0 5
45274: PUSH
45275: LD_INT 1
45277: ARRAY
45278: PUSH
45279: FOR_TO
45280: IFFALSE 45359
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45282: LD_VAR 0 5
45286: PUSH
45287: LD_INT 1
45289: ARRAY
45290: PUSH
45291: LD_VAR 0 4
45295: ARRAY
45296: PPUSH
45297: LD_VAR 0 5
45301: PUSH
45302: LD_INT 2
45304: ARRAY
45305: PUSH
45306: LD_VAR 0 4
45310: ARRAY
45311: PPUSH
45312: CALL_OW 351
45316: IFFALSE 45357
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45318: LD_VAR 0 5
45322: PUSH
45323: LD_INT 1
45325: ARRAY
45326: PUSH
45327: LD_VAR 0 4
45331: ARRAY
45332: PPUSH
45333: LD_VAR 0 5
45337: PUSH
45338: LD_INT 2
45340: ARRAY
45341: PUSH
45342: LD_VAR 0 4
45346: ARRAY
45347: PPUSH
45348: LD_VAR 0 1
45352: PPUSH
45353: CALL_OW 244
// end ;
45357: GO 45279
45359: POP
45360: POP
// end ;
45361: LD_VAR 0 3
45365: RET
// export function UniqueArray ( array ) ; var i ; begin
45366: LD_INT 0
45368: PPUSH
45369: PPUSH
// result := [ ] ;
45370: LD_ADDR_VAR 0 2
45374: PUSH
45375: EMPTY
45376: ST_TO_ADDR
// if not array then
45377: LD_VAR 0 1
45381: NOT
45382: IFFALSE 45386
// exit ;
45384: GO 45447
// for i := 1 to array do
45386: LD_ADDR_VAR 0 3
45390: PUSH
45391: DOUBLE
45392: LD_INT 1
45394: DEC
45395: ST_TO_ADDR
45396: LD_VAR 0 1
45400: PUSH
45401: FOR_TO
45402: IFFALSE 45445
// if not array [ i ] in result then
45404: LD_VAR 0 1
45408: PUSH
45409: LD_VAR 0 3
45413: ARRAY
45414: PUSH
45415: LD_VAR 0 2
45419: IN
45420: NOT
45421: IFFALSE 45443
// result := Join ( result , i ) ;
45423: LD_ADDR_VAR 0 2
45427: PUSH
45428: LD_VAR 0 2
45432: PPUSH
45433: LD_VAR 0 3
45437: PPUSH
45438: CALL 40098 0 2
45442: ST_TO_ADDR
45443: GO 45401
45445: POP
45446: POP
// end ;
45447: LD_VAR 0 2
45451: RET
