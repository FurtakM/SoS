// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 69 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 43813 0 9
// if debug then
  43: LD_EXP 3
  47: IFFALSE 56
// FogOff ( 3 ) ;
  49: LD_INT 3
  51: PPUSH
  52: CALL_OW 344
// PrepareOmikron ;
  56: CALL 2743 0 0
// PrepareRussians ;
  60: CALL 225 0 0
// MissionIntro ;
  64: CALL 6362 0 0
// end ;
  68: END
// export comArrayTmp ; export comArray ; export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinVehNeeded ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; function Init ; begin
  69: LD_INT 0
  71: PPUSH
// debug := true ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 02_
  87: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  88: LD_ADDR_EXP 5
  92: PUSH
  93: LD_STRING 03_
  95: ST_TO_ADDR
// counterIndex := 1 ;
  96: LD_ADDR_EXP 85
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// KurinVehNeeded := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
 104: LD_ADDR_EXP 34
 108: PUSH
 109: LD_INT 1
 111: PUSH
 112: LD_INT 2
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: LD_INT 4
 120: PUSH
 121: EMPTY
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: PUSH
 127: LD_OWVAR 67
 131: ARRAY
 132: ST_TO_ADDR
// timeToPrepareAttack := [ 50 50$00 , 40 40$00 , 30 30$00 , 30 30$00 ] [ Difficulty ] ;
 133: LD_ADDR_EXP 88
 137: PUSH
 138: LD_INT 105000
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 63000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: LD_OWVAR 67
 160: ARRAY
 161: ST_TO_ADDR
// timeToArabAttack := [ 80 80$00 , 70 70$00 , 60 60$00 , 50 50$00 ] [ Difficulty ] ;
 162: LD_ADDR_EXP 89
 166: PUSH
 167: LD_INT 168000
 169: PUSH
 170: LD_INT 147000
 172: PUSH
 173: LD_INT 126000
 175: PUSH
 176: LD_INT 105000
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_OWVAR 67
 189: ARRAY
 190: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 , 5 ] [ Difficulty ] ;
 191: LD_ADDR_EXP 42
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 3
 201: PUSH
 202: LD_INT 4
 204: PUSH
 205: LD_INT 5
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_OWVAR 67
 218: ARRAY
 219: ST_TO_ADDR
// end ; end_of_file
 220: LD_VAR 0 1
 224: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export otherBeriaUnits , beriaBase , beriaDepot , beriaVehs ; export Kurin , Popov ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot , kirovLab , kirovBarracks , kirovWorkshop ; export Grishko , Gaydar , Bukov , Scholtze , Scholtze2 ; export burlakTeam , kirovEngs ; export function PrepareRussians ; var un ; begin
 225: LD_INT 0
 227: PPUSH
 228: PPUSH
// PrepareHeroes ;
 229: CALL 246 0 0
// PrepareBeriaBase ;
 233: CALL 949 0 0
// PrepareKirovBase ;
 237: CALL 1312 0 0
// end ;
 241: LD_VAR 0 1
 245: RET
// function PrepareHeroes ; var un ; begin
 246: LD_INT 0
 248: PPUSH
 249: PPUSH
// uc_side := 6 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 6
 257: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 258: LD_ADDR_EXP 51
 262: PUSH
 263: LD_STRING 02_burlakTeam
 265: PPUSH
 266: CALL_OW 31
 270: ST_TO_ADDR
// uc_side := 3 ;
 271: LD_ADDR_OWVAR 20
 275: PUSH
 276: LD_INT 3
 278: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 279: LD_ADDR_EXP 43
 283: PUSH
 284: LD_STRING Burlak
 286: PPUSH
 287: LD_EXP 3
 291: NOT
 292: PPUSH
 293: LD_EXP 4
 297: PPUSH
 298: CALL 10342 0 3
 302: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 303: LD_ADDR_EXP 44
 307: PUSH
 308: LD_STRING Gnyevko
 310: PPUSH
 311: LD_EXP 3
 315: NOT
 316: PPUSH
 317: LD_EXP 4
 321: PPUSH
 322: CALL 10342 0 3
 326: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 327: LD_ADDR_EXP 46
 331: PUSH
 332: LD_STRING Kovalyuk
 334: PPUSH
 335: LD_EXP 3
 339: NOT
 340: PPUSH
 341: LD_EXP 4
 345: PPUSH
 346: CALL 10342 0 3
 350: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 351: LD_ADDR_EXP 45
 355: PUSH
 356: LD_STRING Kirilenkova
 358: PPUSH
 359: LD_EXP 3
 363: NOT
 364: PPUSH
 365: LD_EXP 4
 369: PPUSH
 370: CALL 10342 0 3
 374: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 375: LD_ADDR_EXP 47
 379: PUSH
 380: LD_STRING Belkov
 382: PPUSH
 383: LD_EXP 3
 387: NOT
 388: PPUSH
 389: LD_EXP 4
 393: PPUSH
 394: CALL 10342 0 3
 398: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 399: LD_ADDR_EXP 49
 403: PUSH
 404: LD_STRING Benko
 406: PPUSH
 407: LD_EXP 3
 411: NOT
 412: PPUSH
 413: LD_EXP 4
 417: PPUSH
 418: CALL 10342 0 3
 422: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 423: LD_ADDR_EXP 50
 427: PUSH
 428: LD_STRING Kuklajs
 430: PPUSH
 431: LD_EXP 3
 435: NOT
 436: PPUSH
 437: LD_EXP 4
 441: PPUSH
 442: CALL 10342 0 3
 446: ST_TO_ADDR
// uc_side := 6 ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_INT 6
 454: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 455: LD_ADDR_EXP 55
 459: PUSH
 460: LD_STRING Kurin
 462: PPUSH
 463: CALL_OW 25
 467: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 468: LD_ADDR_EXP 56
 472: PUSH
 473: LD_STRING Popov
 475: PPUSH
 476: CALL_OW 25
 480: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 481: LD_ADDR_EXP 64
 485: PUSH
 486: LD_STRING Grishko
 488: PPUSH
 489: CALL_OW 25
 493: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 494: LD_ADDR_EXP 65
 498: PUSH
 499: LD_STRING Gaydar
 501: PPUSH
 502: CALL_OW 25
 506: ST_TO_ADDR
// Bukov := NewCharacter ( Bukov ) ;
 507: LD_ADDR_EXP 66
 511: PUSH
 512: LD_STRING Bukov
 514: PPUSH
 515: CALL_OW 25
 519: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 520: LD_EXP 43
 524: PUSH
 525: LD_EXP 44
 529: PUSH
 530: LD_EXP 46
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 547: LD_EXP 45
 551: PPUSH
 552: LD_INT 4
 554: PPUSH
 555: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 559: LD_EXP 55
 563: PPUSH
 564: LD_INT 153
 566: PPUSH
 567: LD_INT 103
 569: PPUSH
 570: LD_INT 0
 572: PPUSH
 573: CALL_OW 48
// AddComHold ( Kurin ) ;
 577: LD_EXP 55
 581: PPUSH
 582: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 586: LD_EXP 55
 590: PPUSH
 591: LD_INT 155
 593: PPUSH
 594: LD_INT 106
 596: PPUSH
 597: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 601: LD_EXP 56
 605: PPUSH
 606: LD_INT 131
 608: PPUSH
 609: LD_INT 49
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 48
// AddComHold ( Popov ) ;
 619: LD_EXP 56
 623: PPUSH
 624: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 628: LD_EXP 56
 632: PPUSH
 633: LD_INT 131
 635: PPUSH
 636: LD_INT 31
 638: PPUSH
 639: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 643: LD_EXP 65
 647: PPUSH
 648: LD_INT 91
 650: PPUSH
 651: LD_INT 15
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 48
// AddComHold ( Gaydar ) ;
 661: LD_EXP 65
 665: PPUSH
 666: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 670: LD_EXP 65
 674: PPUSH
 675: LD_INT 131
 677: PPUSH
 678: LD_INT 31
 680: PPUSH
 681: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 685: LD_EXP 66
 689: PPUSH
 690: LD_INT 86
 692: PPUSH
 693: LD_INT 17
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 48
// AddComHold ( Bukov ) ;
 703: LD_EXP 66
 707: PPUSH
 708: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 712: LD_EXP 66
 716: PPUSH
 717: LD_INT 94
 719: PPUSH
 720: LD_INT 32
 722: PPUSH
 723: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 727: LD_EXP 47
 731: PPUSH
 732: LD_INT 155
 734: PPUSH
 735: LD_INT 106
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 48
// AddComHold ( Belkov ) ;
 745: LD_EXP 47
 749: PPUSH
 750: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 754: LD_EXP 47
 758: PPUSH
 759: LD_EXP 55
 763: PPUSH
 764: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 768: LD_EXP 43
 772: PPUSH
 773: LD_INT 154
 775: PPUSH
 776: LD_INT 106
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 48
// AddComHold ( Burlak ) ;
 786: LD_EXP 43
 790: PPUSH
 791: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 795: LD_EXP 43
 799: PPUSH
 800: LD_EXP 55
 804: PPUSH
 805: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 809: LD_ADDR_EXP 69
 813: PUSH
 814: LD_EXP 44
 818: PUSH
 819: LD_EXP 46
 823: PUSH
 824: LD_EXP 45
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: ST_TO_ADDR
// for un in otherBeriaUnits do
 834: LD_ADDR_VAR 0 2
 838: PUSH
 839: LD_EXP 51
 843: PUSH
 844: FOR_IN
 845: IFFALSE 887
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 847: LD_VAR 0 2
 851: PPUSH
 852: LD_INT 4
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// AddComHold ( un ) ;
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 871: LD_VAR 0 2
 875: PPUSH
 876: LD_EXP 55
 880: PPUSH
 881: CALL_OW 179
// end ;
 885: GO 844
 887: POP
 888: POP
// for un in BurlakTeam do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: LD_EXP 69
 898: PUSH
 899: FOR_IN
 900: IFFALSE 942
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 902: LD_VAR 0 2
 906: PPUSH
 907: LD_INT 4
 909: PPUSH
 910: LD_INT 0
 912: PPUSH
 913: CALL_OW 49
// AddComHold ( un ) ;
 917: LD_VAR 0 2
 921: PPUSH
 922: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 926: LD_VAR 0 2
 930: PPUSH
 931: LD_EXP 55
 935: PPUSH
 936: CALL_OW 179
// end ;
 940: GO 899
 942: POP
 943: POP
// end ;
 944: LD_VAR 0 1
 948: RET
// export function PrepareBeriaBase ; var i , veh , bonusResources , beriaDepot ; begin
 949: LD_INT 0
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
 956: LD_ADDR_EXP 52
 960: PUSH
 961: LD_STRING 02_Beria
 963: PPUSH
 964: EMPTY
 965: PPUSH
 966: CALL_OW 30
 970: ST_TO_ADDR
// beriaVehs := LoadVariable ( 02_VehiclesCount , [ ] ) ;
 971: LD_ADDR_EXP 54
 975: PUSH
 976: LD_STRING 02_VehiclesCount
 978: PPUSH
 979: EMPTY
 980: PPUSH
 981: CALL_OW 30
 985: ST_TO_ADDR
// uc_side := 3 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 3
 993: ST_TO_ADDR
// uc_nation := 3 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 3
1001: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
1002: LD_ADDR_OWVAR 37
1006: PUSH
1007: LD_INT 21
1009: ST_TO_ADDR
// vc_control = control_manual ;
1010: LD_ADDR_OWVAR 38
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// vc_engine = engine_combustion ;
1018: LD_ADDR_OWVAR 39
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1026: LD_ADDR_OWVAR 40
1030: PUSH
1031: LD_INT 42
1033: ST_TO_ADDR
// for i := 1 to beriaBase do
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_EXP 52
1048: PUSH
1049: FOR_TO
1050: IFFALSE 1173
// begin bc_type := beriaBase [ i ] [ 1 ] ;
1052: LD_ADDR_OWVAR 42
1056: PUSH
1057: LD_EXP 52
1061: PUSH
1062: LD_VAR 0 2
1066: ARRAY
1067: PUSH
1068: LD_INT 1
1070: ARRAY
1071: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
1072: LD_ADDR_OWVAR 43
1076: PUSH
1077: LD_EXP 52
1081: PUSH
1082: LD_VAR 0 2
1086: ARRAY
1087: PUSH
1088: LD_INT 2
1090: ARRAY
1091: ST_TO_ADDR
// if bc_type = b_lab then
1092: LD_OWVAR 42
1096: PUSH
1097: LD_INT 6
1099: EQUAL
1100: IFFALSE 1118
// begin bc_kind1 := b_lab_basic ;
1102: LD_ADDR_OWVAR 44
1106: PUSH
1107: LD_INT 9
1109: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
1110: LD_ADDR_OWVAR 45
1114: PUSH
1115: LD_INT 9
1117: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
1118: LD_EXP 52
1122: PUSH
1123: LD_VAR 0 2
1127: ARRAY
1128: PUSH
1129: LD_INT 3
1131: ARRAY
1132: PUSH
1133: LD_INT 46
1135: PLUS
1136: PPUSH
1137: LD_EXP 52
1141: PUSH
1142: LD_VAR 0 2
1146: ARRAY
1147: PUSH
1148: LD_INT 4
1150: ARRAY
1151: PPUSH
1152: LD_EXP 52
1156: PUSH
1157: LD_VAR 0 2
1161: ARRAY
1162: PUSH
1163: LD_INT 5
1165: ARRAY
1166: PPUSH
1167: CALL_OW 47
// end ;
1171: GO 1049
1173: POP
1174: POP
// for i := 1 to beriaVehs do
1175: LD_ADDR_VAR 0 2
1179: PUSH
1180: DOUBLE
1181: LD_INT 1
1183: DEC
1184: ST_TO_ADDR
1185: LD_EXP 54
1189: PUSH
1190: FOR_TO
1191: IFFALSE 1255
// begin vc_fuel_battery = [ 20 , 35 , 50 , 80 ] [ Rand ( 1 , 4 ) ] ;
1193: LD_ADDR_OWVAR 41
1197: PUSH
1198: LD_INT 20
1200: PUSH
1201: LD_INT 35
1203: PUSH
1204: LD_INT 50
1206: PUSH
1207: LD_INT 80
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: PUSH
1216: LD_INT 1
1218: PPUSH
1219: LD_INT 4
1221: PPUSH
1222: CALL_OW 12
1226: ARRAY
1227: ST_TO_ADDR
// veh = CreateVehicle ;
1228: LD_ADDR_VAR 0 3
1232: PUSH
1233: CALL_OW 45
1237: ST_TO_ADDR
// PlaceUnitArea ( veh , beriaBaseArea , false ) ;
1238: LD_VAR 0 3
1242: PPUSH
1243: LD_INT 11
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 49
// end ;
1253: GO 1190
1255: POP
1256: POP
// beriaDepot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1257: LD_ADDR_VAR 0 5
1261: PUSH
1262: LD_INT 22
1264: PUSH
1265: LD_INT 3
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PUSH
1272: LD_INT 30
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PPUSH
1286: CALL_OW 69
1290: PUSH
1291: LD_INT 1
1293: ARRAY
1294: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1295: LD_VAR 0 5
1299: PPUSH
1300: LD_STRING beria
1302: PPUSH
1303: CALL_OW 500
// end ;
1307: LD_VAR 0 1
1311: RET
// export function PrepareKirovBase ; var i , un , tmp , buildings , x , b , bonusResources ; begin
1312: LD_INT 0
1314: PPUSH
1315: PPUSH
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1322: LD_ADDR_EXP 58
1326: PUSH
1327: LD_STRING 02_Kirov
1329: PPUSH
1330: EMPTY
1331: PPUSH
1332: CALL_OW 30
1336: ST_TO_ADDR
// uc_side := 6 ;
1337: LD_ADDR_OWVAR 20
1341: PUSH
1342: LD_INT 6
1344: ST_TO_ADDR
// uc_nation := 3 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 3
1352: ST_TO_ADDR
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1353: LD_ADDR_EXP 57
1357: PUSH
1358: LD_STRING 02_kirovTeam
1360: PPUSH
1361: CALL_OW 31
1365: ST_TO_ADDR
// for i := 1 to kirovBase do
1366: LD_ADDR_VAR 0 2
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 58
1380: PUSH
1381: FOR_TO
1382: IFFALSE 1531
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1384: LD_ADDR_OWVAR 42
1388: PUSH
1389: LD_EXP 58
1393: PUSH
1394: LD_VAR 0 2
1398: ARRAY
1399: PUSH
1400: LD_INT 1
1402: ARRAY
1403: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1404: LD_ADDR_OWVAR 43
1408: PUSH
1409: LD_EXP 58
1413: PUSH
1414: LD_VAR 0 2
1418: ARRAY
1419: PUSH
1420: LD_INT 2
1422: ARRAY
1423: ST_TO_ADDR
// x := kirovBase [ i ] [ 3 ] + 46 ;
1424: LD_ADDR_VAR 0 6
1428: PUSH
1429: LD_EXP 58
1433: PUSH
1434: LD_VAR 0 2
1438: ARRAY
1439: PUSH
1440: LD_INT 3
1442: ARRAY
1443: PUSH
1444: LD_INT 46
1446: PLUS
1447: ST_TO_ADDR
// if x < 140 then
1448: LD_VAR 0 6
1452: PUSH
1453: LD_INT 140
1455: LESS
1456: IFFALSE 1468
// uc_side := 3 else
1458: LD_ADDR_OWVAR 20
1462: PUSH
1463: LD_INT 3
1465: ST_TO_ADDR
1466: GO 1476
// uc_side := 6 ;
1468: LD_ADDR_OWVAR 20
1472: PUSH
1473: LD_INT 6
1475: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1476: LD_EXP 58
1480: PUSH
1481: LD_VAR 0 2
1485: ARRAY
1486: PUSH
1487: LD_INT 3
1489: ARRAY
1490: PUSH
1491: LD_INT 46
1493: PLUS
1494: PPUSH
1495: LD_EXP 58
1499: PUSH
1500: LD_VAR 0 2
1504: ARRAY
1505: PUSH
1506: LD_INT 4
1508: ARRAY
1509: PPUSH
1510: LD_EXP 58
1514: PUSH
1515: LD_VAR 0 2
1519: ARRAY
1520: PUSH
1521: LD_INT 5
1523: ARRAY
1524: PPUSH
1525: CALL_OW 47
// end ;
1529: GO 1381
1531: POP
1532: POP
// kirovDepot := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1533: LD_ADDR_EXP 59
1537: PUSH
1538: LD_INT 22
1540: PUSH
1541: LD_INT 6
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 30
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PPUSH
1562: CALL_OW 69
1566: PUSH
1567: LD_INT 1
1569: ARRAY
1570: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
1571: LD_EXP 59
1575: PPUSH
1576: LD_STRING kirov
1578: PPUSH
1579: CALL_OW 500
// for i := 1 to 2 do
1583: LD_ADDR_VAR 0 2
1587: PUSH
1588: DOUBLE
1589: LD_INT 1
1591: DEC
1592: ST_TO_ADDR
1593: LD_INT 2
1595: PUSH
1596: FOR_TO
1597: IFFALSE 1623
// SetResourceType ( GetBase ( kirovDepot ) , i , 500 ) ;
1599: LD_EXP 59
1603: PPUSH
1604: CALL_OW 274
1608: PPUSH
1609: LD_VAR 0 2
1613: PPUSH
1614: LD_INT 500
1616: PPUSH
1617: CALL_OW 277
1621: GO 1596
1623: POP
1624: POP
// tmp := otherKirovUnits ;
1625: LD_ADDR_VAR 0 4
1629: PUSH
1630: LD_EXP 57
1634: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_breastwork ] ] ] ) ;
1635: LD_ADDR_VAR 0 5
1639: PUSH
1640: LD_INT 22
1642: PUSH
1643: LD_INT 6
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 21
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 30
1665: PUSH
1666: LD_INT 31
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: LIST
1681: PPUSH
1682: CALL_OW 69
1686: ST_TO_ADDR
// repeat b := buildings [ 1 ] ;
1687: LD_ADDR_VAR 0 7
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_INT 1
1699: ARRAY
1700: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 1 ] , b ) ;
1701: LD_VAR 0 4
1705: PUSH
1706: LD_INT 1
1708: ARRAY
1709: PPUSH
1710: LD_VAR 0 7
1714: PPUSH
1715: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
1719: LD_ADDR_VAR 0 4
1723: PUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: LD_INT 1
1731: PPUSH
1732: CALL_OW 3
1736: ST_TO_ADDR
// if UnitsInside ( b ) = 3 then
1737: LD_VAR 0 7
1741: PPUSH
1742: CALL_OW 313
1746: PUSH
1747: LD_INT 3
1749: EQUAL
1750: IFFALSE 1770
// buildings := Delete ( buildings , 1 ) ;
1752: LD_ADDR_VAR 0 5
1756: PUSH
1757: LD_VAR 0 5
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: CALL_OW 3
1769: ST_TO_ADDR
// until not buildings or not tmp ;
1770: LD_VAR 0 5
1774: NOT
1775: PUSH
1776: LD_VAR 0 4
1780: NOT
1781: OR
1782: IFFALSE 1687
// if tmp then
1784: LD_VAR 0 4
1788: IFFALSE 1828
// begin for i in tmp do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_VAR 0 4
1799: PUSH
1800: FOR_IN
1801: IFFALSE 1826
// PlaceUnitXYR ( i , 164 , 109 , 4 , false ) ;
1803: LD_VAR 0 2
1807: PPUSH
1808: LD_INT 164
1810: PPUSH
1811: LD_INT 109
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: LD_INT 0
1819: PPUSH
1820: CALL_OW 50
1824: GO 1800
1826: POP
1827: POP
// end ; end ;
1828: LD_VAR 0 1
1832: RET
// export function UpgradeKirovBase ; var i , un , kirovBuildingArray ; begin
1833: LD_INT 0
1835: PPUSH
1836: PPUSH
1837: PPUSH
1838: PPUSH
// kirovBuildingArray := [ [ b_bunker , 146 , 106 , 1 ] , [ b_bunker , 175 , 123 , 5 ] , [ b_bunker , 170 , 101 , 3 ] , [ b_bunker , 172 , 104 , 4 ] , [ b_bunker , 179 , 118 , 4 ] , [ b_oil_power , 159 , 96 , 3 ] ] ;
1839: LD_ADDR_VAR 0 4
1843: PUSH
1844: LD_INT 32
1846: PUSH
1847: LD_INT 146
1849: PUSH
1850: LD_INT 106
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 32
1864: PUSH
1865: LD_INT 175
1867: PUSH
1868: LD_INT 123
1870: PUSH
1871: LD_INT 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 32
1882: PUSH
1883: LD_INT 170
1885: PUSH
1886: LD_INT 101
1888: PUSH
1889: LD_INT 3
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 32
1900: PUSH
1901: LD_INT 172
1903: PUSH
1904: LD_INT 104
1906: PUSH
1907: LD_INT 4
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: PUSH
1916: LD_INT 32
1918: PUSH
1919: LD_INT 179
1921: PUSH
1922: LD_INT 118
1924: PUSH
1925: LD_INT 4
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 26
1936: PUSH
1937: LD_INT 159
1939: PUSH
1940: LD_INT 96
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// kirovEngs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
1960: LD_ADDR_EXP 70
1964: PUSH
1965: LD_INT 22
1967: PUSH
1968: LD_INT 6
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 21
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 25
1987: PUSH
1988: LD_INT 2
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: LIST
1999: PPUSH
2000: CALL_OW 69
2004: ST_TO_ADDR
// kirovLab := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
2005: LD_ADDR_EXP 61
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 6
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 21
2022: PUSH
2023: LD_INT 3
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 30
2032: PUSH
2033: LD_INT 6
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL_OW 69
2049: PUSH
2050: LD_INT 1
2052: ARRAY
2053: ST_TO_ADDR
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_armoury ] ] ) ;
2054: LD_ADDR_EXP 62
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 6
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 3
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 30
2081: PUSH
2082: LD_INT 4
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 69
2098: ST_TO_ADDR
// kirovWorkshop := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
2099: LD_ADDR_EXP 63
2103: PUSH
2104: LD_INT 22
2106: PUSH
2107: LD_INT 6
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 21
2116: PUSH
2117: LD_INT 3
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 30
2126: PUSH
2127: LD_INT 2
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: ST_TO_ADDR
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] ] ) ;
2148: LD_ADDR_VAR 0 3
2152: PUSH
2153: LD_INT 22
2155: PUSH
2156: LD_INT 6
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 21
2165: PUSH
2166: LD_INT 1
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 25
2175: PUSH
2176: LD_INT 3
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: PPUSH
2188: CALL_OW 69
2192: ST_TO_ADDR
// ComExitBuilding ( un ) ;
2193: LD_VAR 0 3
2197: PPUSH
2198: CALL_OW 122
// AddComEnterUnit ( un , kirovWorkshop ) ;
2202: LD_VAR 0 3
2206: PPUSH
2207: LD_EXP 63
2211: PPUSH
2212: CALL_OW 180
// wait ( 0 0$1 ) ;
2216: LD_INT 35
2218: PPUSH
2219: CALL_OW 67
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) ;
2223: LD_ADDR_VAR 0 3
2227: PUSH
2228: LD_INT 22
2230: PUSH
2231: LD_INT 6
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 21
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 25
2250: PUSH
2251: LD_INT 4
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PPUSH
2263: CALL_OW 69
2267: ST_TO_ADDR
// AddComEnterUnit ( un , kirovLab ) ;
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_EXP 61
2277: PPUSH
2278: CALL_OW 180
// for i in kirovBuildingArray do
2282: LD_ADDR_VAR 0 2
2286: PUSH
2287: LD_VAR 0 4
2291: PUSH
2292: FOR_IN
2293: IFFALSE 2342
// AddComBuild ( kirovEngs , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2295: LD_EXP 70
2299: PPUSH
2300: LD_VAR 0 2
2304: PUSH
2305: LD_INT 1
2307: ARRAY
2308: PPUSH
2309: LD_VAR 0 2
2313: PUSH
2314: LD_INT 2
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 2
2322: PUSH
2323: LD_INT 3
2325: ARRAY
2326: PPUSH
2327: LD_VAR 0 2
2331: PUSH
2332: LD_INT 4
2334: ARRAY
2335: PPUSH
2336: CALL_OW 205
2340: GO 2292
2342: POP
2343: POP
// comArray := [ kirovLab , kirovBarracks [ 1 ] , kirovBarracks [ 2 ] , kirovDepot , kirovWorkshop ] ;
2344: LD_ADDR_EXP 2
2348: PUSH
2349: LD_EXP 61
2353: PUSH
2354: LD_EXP 62
2358: PUSH
2359: LD_INT 1
2361: ARRAY
2362: PUSH
2363: LD_EXP 62
2367: PUSH
2368: LD_INT 2
2370: ARRAY
2371: PUSH
2372: LD_EXP 59
2376: PUSH
2377: LD_EXP 63
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: ST_TO_ADDR
// end ;
2389: LD_VAR 0 1
2393: RET
// export function PrepareScholtze ; begin
2394: LD_INT 0
2396: PPUSH
// uc_side := 5 ;
2397: LD_ADDR_OWVAR 20
2401: PUSH
2402: LD_INT 5
2404: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
2405: LD_ADDR_EXP 67
2409: PUSH
2410: LD_STRING Scholtze
2412: PPUSH
2413: CALL_OW 25
2417: ST_TO_ADDR
// Scholtze2 := NewCharacter ( Scholtze ) ;
2418: LD_ADDR_EXP 68
2422: PUSH
2423: LD_STRING Scholtze
2425: PPUSH
2426: CALL_OW 25
2430: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
2431: LD_EXP 67
2435: PPUSH
2436: LD_INT 12
2438: PPUSH
2439: LD_INT 1
2441: PPUSH
2442: CALL_OW 49
// end ; end_of_file
2446: LD_VAR 0 1
2450: RET
// export omicronSquad , Omikron , omikronDepot ; export amIntroUnits ; export amConvoyGroups ; export amLabs , amBarracks , amFactory , amVehs ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
2451: LD_INT 0
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
// amIntroUnits = [ ] ;
2457: LD_ADDR_EXP 74
2461: PUSH
2462: EMPTY
2463: ST_TO_ADDR
// uc_side = 1 ;
2464: LD_ADDR_OWVAR 20
2468: PUSH
2469: LD_INT 1
2471: ST_TO_ADDR
// uc_nation = nation_american ;
2472: LD_ADDR_OWVAR 21
2476: PUSH
2477: LD_INT 1
2479: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
2480: LD_ADDR_OWVAR 37
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// vc_control = control_manual ;
2488: LD_ADDR_OWVAR 38
2492: PUSH
2493: LD_INT 1
2495: ST_TO_ADDR
// vc_engine = engine_combustion ;
2496: LD_ADDR_OWVAR 39
2500: PUSH
2501: LD_INT 1
2503: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2504: LD_ADDR_OWVAR 40
2508: PUSH
2509: LD_INT 3
2511: ST_TO_ADDR
// vc_fuel_battery = 100 ;
2512: LD_ADDR_OWVAR 41
2516: PUSH
2517: LD_INT 100
2519: ST_TO_ADDR
// veh = CreateVehicle ;
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: CALL_OW 45
2529: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2530: LD_VAR 0 3
2534: PPUSH
2535: LD_INT 4
2537: PPUSH
2538: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
2542: LD_ADDR_EXP 74
2546: PUSH
2547: LD_EXP 74
2551: PUSH
2552: LD_VAR 0 3
2556: ADD
2557: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
2558: LD_VAR 0 3
2562: PPUSH
2563: LD_INT 7
2565: PPUSH
2566: LD_INT 0
2568: PPUSH
2569: CALL_OW 49
// for i := 1 to 3 do
2573: LD_ADDR_VAR 0 2
2577: PUSH
2578: DOUBLE
2579: LD_INT 1
2581: DEC
2582: ST_TO_ADDR
2583: LD_INT 3
2585: PUSH
2586: FOR_TO
2587: IFFALSE 2708
// begin hc_name :=  ;
2589: LD_ADDR_OWVAR 26
2593: PUSH
2594: LD_STRING 
2596: ST_TO_ADDR
// hc_gallery :=  ;
2597: LD_ADDR_OWVAR 33
2601: PUSH
2602: LD_STRING 
2604: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
2605: LD_INT 0
2607: PPUSH
2608: LD_EXP 42
2612: PPUSH
2613: CALL_OW 381
// human = CreateHuman ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: CALL_OW 44
2626: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
2627: LD_ADDR_EXP 74
2631: PUSH
2632: LD_EXP 74
2636: PUSH
2637: LD_VAR 0 4
2641: ADD
2642: ST_TO_ADDR
// if i < 3 then
2643: LD_VAR 0 2
2647: PUSH
2648: LD_INT 3
2650: LESS
2651: IFFALSE 2670
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
2653: LD_VAR 0 4
2657: PPUSH
2658: LD_INT 7
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 49
2668: GO 2706
// begin PrepareMechanic ( false , enemySkillLevel ) ;
2670: LD_INT 0
2672: PPUSH
2673: LD_EXP 42
2677: PPUSH
2678: CALL_OW 383
// human = CreateHuman ;
2682: LD_ADDR_VAR 0 4
2686: PUSH
2687: CALL_OW 44
2691: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
2692: LD_VAR 0 4
2696: PPUSH
2697: LD_VAR 0 3
2701: PPUSH
2702: CALL_OW 52
// end ; end ;
2706: GO 2586
2708: POP
2709: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
2710: LD_INT 120
2712: PPUSH
2713: LD_INT 36
2715: PPUSH
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
2723: LD_EXP 74
2727: PPUSH
2728: LD_INT 26
2730: PPUSH
2731: LD_INT 34
2733: PPUSH
2734: CALL_OW 111
// end ;
2738: LD_VAR 0 1
2742: RET
// export function PrepareOmikron ; var i , un , tmp , veh , omiBuildingArray ; begin
2743: LD_INT 0
2745: PPUSH
2746: PPUSH
2747: PPUSH
2748: PPUSH
2749: PPUSH
2750: PPUSH
// amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
2751: LD_ADDR_EXP 75
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 5
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: PUSH
2774: LD_OWVAR 67
2778: ARRAY
2779: PUSH
2780: LD_INT 0
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: LD_INT 1
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: LD_OWVAR 67
2802: ARRAY
2803: PUSH
2804: LD_INT 1
2806: PUSH
2807: LD_INT 1
2809: PUSH
2810: LD_INT 2
2812: PUSH
2813: LD_INT 2
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: LIST
2821: PUSH
2822: LD_OWVAR 67
2826: ARRAY
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: LD_INT 1
2836: PUSH
2837: LD_INT 2
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_OWVAR 67
2850: ARRAY
2851: PUSH
2852: LD_INT 0
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: LD_INT 1
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: PUSH
2870: LD_OWVAR 67
2874: ARRAY
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 3
2885: PUSH
2886: LD_INT 4
2888: PUSH
2889: LD_INT 5
2891: PUSH
2892: LD_INT 6
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: PUSH
2901: LD_OWVAR 67
2905: ARRAY
2906: PUSH
2907: LD_INT 0
2909: PUSH
2910: LD_INT 1
2912: PUSH
2913: LD_INT 1
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_OWVAR 67
2929: ARRAY
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: LD_INT 1
2936: PUSH
2937: LD_INT 2
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_OWVAR 67
2953: ARRAY
2954: PUSH
2955: LD_INT 1
2957: PUSH
2958: LD_INT 1
2960: PUSH
2961: LD_INT 2
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_OWVAR 67
2977: ARRAY
2978: PUSH
2979: LD_INT 1
2981: PUSH
2982: LD_INT 1
2984: PUSH
2985: LD_INT 2
2987: PUSH
2988: LD_INT 3
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: PUSH
2997: LD_OWVAR 67
3001: ARRAY
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 1
3012: PUSH
3013: LD_INT 2
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: LD_INT 4
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: LIST
3026: LIST
3027: PUSH
3028: LD_OWVAR 67
3032: ARRAY
3033: PUSH
3034: LD_INT 1
3036: PUSH
3037: LD_INT 1
3039: PUSH
3040: LD_INT 1
3042: PUSH
3043: LD_INT 2
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: PUSH
3052: LD_OWVAR 67
3056: ARRAY
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: LD_INT 2
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: PUSH
3076: LD_OWVAR 67
3080: ARRAY
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: LD_INT 1
3087: PUSH
3088: LD_INT 1
3090: PUSH
3091: LD_INT 2
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: PUSH
3100: LD_OWVAR 67
3104: ARRAY
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: LD_INT 1
3114: PUSH
3115: LD_INT 2
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: PUSH
3124: LD_OWVAR 67
3128: ARRAY
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: PUSH
3137: LD_INT 3
3139: PUSH
3140: LD_INT 4
3142: PUSH
3143: LD_INT 6
3145: PUSH
3146: LD_INT 7
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: PUSH
3155: LD_OWVAR 67
3159: ARRAY
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: LD_INT 1
3166: PUSH
3167: LD_INT 1
3169: PUSH
3170: LD_INT 2
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: PUSH
3179: LD_OWVAR 67
3183: ARRAY
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: LD_INT 3
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: LD_OWVAR 67
3207: ARRAY
3208: PUSH
3209: LD_INT 1
3211: PUSH
3212: LD_INT 1
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 3
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: LD_OWVAR 67
3231: ARRAY
3232: PUSH
3233: LD_INT 1
3235: PUSH
3236: LD_INT 1
3238: PUSH
3239: LD_INT 1
3241: PUSH
3242: LD_INT 3
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: LD_OWVAR 67
3255: ARRAY
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: ST_TO_ADDR
// omiBuildingArray := [ [ b_warehouse , 20 , 33 , 2 ] , [ b_oil_mine , 38 , 30 , 5 ] , [ b_barracks , 34 , 25 , 4 ] , [ b_barracks , 35 , 45 , 4 ] , [ b_lab , 27 , 27 , 3 ] , [ b_lab , 15 , 23 , 1 ] , [ b_breastwork , 25 , 8 , 5 ] , [ b_bunker , 37 , 35 , 4 ] , [ b_bunker , 42 , 45 , 4 ] , [ b_bunker , 29 , 17 , 4 ] , [ b_bunker , 30 , 53 , 0 ] , [ b_bunker , 42 , 56 , 4 ] , [ b_bunker , 30 , 20 , 4 ] , [ b_solar_power , 7 , 8 , 1 ] , [ b_solar_power , 10 , 8 , 1 ] , [ b_solar_power , 13 , 8 , 1 ] , [ b_oil_power , 23 , 42 , 4 ] , [ b_factory , 13 , 14 , 1 ] , [ b_ext_noncombat , 10 , 11 , 2 ] , [ b_ext_gun , 9 , 14 , 1 ] , [ b_ext_track , 13 , 17 , 0 ] ] ;
3270: LD_ADDR_VAR 0 6
3274: PUSH
3275: LD_INT 1
3277: PUSH
3278: LD_INT 20
3280: PUSH
3281: LD_INT 33
3283: PUSH
3284: LD_INT 2
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: PUSH
3293: LD_INT 29
3295: PUSH
3296: LD_INT 38
3298: PUSH
3299: LD_INT 30
3301: PUSH
3302: LD_INT 5
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: PUSH
3311: LD_INT 5
3313: PUSH
3314: LD_INT 34
3316: PUSH
3317: LD_INT 25
3319: PUSH
3320: LD_INT 4
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 5
3331: PUSH
3332: LD_INT 35
3334: PUSH
3335: LD_INT 45
3337: PUSH
3338: LD_INT 4
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 6
3349: PUSH
3350: LD_INT 27
3352: PUSH
3353: LD_INT 27
3355: PUSH
3356: LD_INT 3
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: LD_INT 6
3367: PUSH
3368: LD_INT 15
3370: PUSH
3371: LD_INT 23
3373: PUSH
3374: LD_INT 1
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: PUSH
3383: LD_INT 31
3385: PUSH
3386: LD_INT 25
3388: PUSH
3389: LD_INT 8
3391: PUSH
3392: LD_INT 5
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: PUSH
3401: LD_INT 32
3403: PUSH
3404: LD_INT 37
3406: PUSH
3407: LD_INT 35
3409: PUSH
3410: LD_INT 4
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: PUSH
3419: LD_INT 32
3421: PUSH
3422: LD_INT 42
3424: PUSH
3425: LD_INT 45
3427: PUSH
3428: LD_INT 4
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 32
3439: PUSH
3440: LD_INT 29
3442: PUSH
3443: LD_INT 17
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 32
3457: PUSH
3458: LD_INT 30
3460: PUSH
3461: LD_INT 53
3463: PUSH
3464: LD_INT 0
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 32
3475: PUSH
3476: LD_INT 42
3478: PUSH
3479: LD_INT 56
3481: PUSH
3482: LD_INT 4
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 32
3493: PUSH
3494: LD_INT 30
3496: PUSH
3497: LD_INT 20
3499: PUSH
3500: LD_INT 4
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 27
3511: PUSH
3512: LD_INT 7
3514: PUSH
3515: LD_INT 8
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_INT 27
3529: PUSH
3530: LD_INT 10
3532: PUSH
3533: LD_INT 8
3535: PUSH
3536: LD_INT 1
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 27
3547: PUSH
3548: LD_INT 13
3550: PUSH
3551: LD_INT 8
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 26
3565: PUSH
3566: LD_INT 23
3568: PUSH
3569: LD_INT 42
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 3
3583: PUSH
3584: LD_INT 13
3586: PUSH
3587: LD_INT 14
3589: PUSH
3590: LD_INT 1
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 19
3601: PUSH
3602: LD_INT 10
3604: PUSH
3605: LD_INT 11
3607: PUSH
3608: LD_INT 2
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: PUSH
3617: LD_INT 17
3619: PUSH
3620: LD_INT 9
3622: PUSH
3623: LD_INT 14
3625: PUSH
3626: LD_INT 1
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 16
3637: PUSH
3638: LD_INT 13
3640: PUSH
3641: LD_INT 17
3643: PUSH
3644: LD_INT 0
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: ST_TO_ADDR
// for i in omiBuildingArray do
3676: LD_ADDR_VAR 0 2
3680: PUSH
3681: LD_VAR 0 6
3685: PUSH
3686: FOR_IN
3687: IFFALSE 3743
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
3689: LD_INT 1
3691: PPUSH
3692: LD_INT 1
3694: PPUSH
3695: LD_INT 5
3697: PPUSH
3698: LD_VAR 0 2
3702: PUSH
3703: LD_INT 1
3705: ARRAY
3706: PPUSH
3707: LD_VAR 0 2
3711: PUSH
3712: LD_INT 2
3714: ARRAY
3715: PPUSH
3716: LD_VAR 0 2
3720: PUSH
3721: LD_INT 3
3723: ARRAY
3724: PPUSH
3725: LD_VAR 0 2
3729: PUSH
3730: LD_INT 4
3732: ARRAY
3733: PPUSH
3734: LD_INT 0
3736: PPUSH
3737: CALL 50870 0 8
3741: GO 3686
3743: POP
3744: POP
// omikronDepot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3745: LD_ADDR_EXP 73
3749: PUSH
3750: LD_INT 22
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PUSH
3760: LD_INT 30
3762: PUSH
3763: LD_INT 1
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PPUSH
3774: CALL_OW 69
3778: PUSH
3779: LD_INT 1
3781: ARRAY
3782: ST_TO_ADDR
// SetBName ( omikronDepot , omikron ) ;
3783: LD_EXP 73
3787: PPUSH
3788: LD_STRING omikron
3790: PPUSH
3791: CALL_OW 500
// amBarracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
3795: LD_ADDR_EXP 77
3799: PUSH
3800: LD_INT 22
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PUSH
3810: LD_INT 30
3812: PUSH
3813: LD_INT 5
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PPUSH
3824: CALL_OW 69
3828: ST_TO_ADDR
// amLabs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab ] ] ) ;
3829: LD_ADDR_EXP 76
3833: PUSH
3834: LD_INT 22
3836: PUSH
3837: LD_INT 1
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PUSH
3844: LD_INT 30
3846: PUSH
3847: LD_INT 6
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PPUSH
3858: CALL_OW 69
3862: ST_TO_ADDR
// amFactory := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3863: LD_ADDR_EXP 78
3867: PUSH
3868: LD_INT 22
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 30
3880: PUSH
3881: LD_INT 3
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: CALL_OW 69
3896: PUSH
3897: LD_INT 1
3899: ARRAY
3900: ST_TO_ADDR
// for i := 1 to 2 do
3901: LD_ADDR_VAR 0 2
3905: PUSH
3906: DOUBLE
3907: LD_INT 1
3909: DEC
3910: ST_TO_ADDR
3911: LD_INT 2
3913: PUSH
3914: FOR_TO
3915: IFFALSE 3941
// SetResourceType ( GetBase ( omikronDepot ) , i , 500 ) ;
3917: LD_EXP 73
3921: PPUSH
3922: CALL_OW 274
3926: PPUSH
3927: LD_VAR 0 2
3931: PPUSH
3932: LD_INT 500
3934: PPUSH
3935: CALL_OW 277
3939: GO 3914
3941: POP
3942: POP
// uc_side := 1 ;
3943: LD_ADDR_OWVAR 20
3947: PUSH
3948: LD_INT 1
3950: ST_TO_ADDR
// uc_nation := 1 ;
3951: LD_ADDR_OWVAR 21
3955: PUSH
3956: LD_INT 1
3958: ST_TO_ADDR
// omicronSquad := [ ] ;
3959: LD_ADDR_EXP 71
3963: PUSH
3964: EMPTY
3965: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
3966: LD_ADDR_VAR 0 2
3970: PUSH
3971: LD_INT 22
3973: PUSH
3974: LD_INT 1
3976: PUSH
3977: EMPTY
3978: LIST
3979: LIST
3980: PUSH
3981: LD_INT 2
3983: PUSH
3984: LD_INT 30
3986: PUSH
3987: LD_INT 32
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PUSH
3994: LD_INT 30
3996: PUSH
3997: LD_INT 31
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PPUSH
4013: CALL_OW 69
4017: PUSH
4018: FOR_IN
4019: IFFALSE 4138
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4021: LD_INT 1
4023: PPUSH
4024: LD_INT 1
4026: PPUSH
4027: LD_INT 3
4029: PUSH
4030: LD_INT 4
4032: PUSH
4033: LD_INT 5
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: PUSH
4041: LD_OWVAR 67
4045: ARRAY
4046: PPUSH
4047: CALL_OW 380
// un := CreateHuman ;
4051: LD_ADDR_VAR 0 3
4055: PUSH
4056: CALL_OW 44
4060: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4061: LD_ADDR_EXP 71
4065: PUSH
4066: LD_EXP 71
4070: PUSH
4071: LD_VAR 0 3
4075: UNION
4076: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
4077: LD_VAR 0 3
4081: PPUSH
4082: LD_VAR 0 2
4086: PPUSH
4087: CALL_OW 254
4091: PUSH
4092: LD_INT 3
4094: MINUS
4095: PPUSH
4096: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
4100: LD_VAR 0 3
4104: PPUSH
4105: LD_VAR 0 2
4109: PPUSH
4110: CALL_OW 52
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , areaOmicron ) ) ;
4114: LD_VAR 0 2
4118: PPUSH
4119: LD_VAR 0 2
4123: PPUSH
4124: LD_INT 8
4126: PPUSH
4127: CALL 20446 0 2
4131: PPUSH
4132: CALL_OW 431
// end ;
4136: GO 4018
4138: POP
4139: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4140: LD_ADDR_VAR 0 2
4144: PUSH
4145: DOUBLE
4146: LD_INT 1
4148: DEC
4149: ST_TO_ADDR
4150: LD_INT 3
4152: PUSH
4153: LD_INT 4
4155: PUSH
4156: LD_INT 5
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: LD_OWVAR 67
4168: ARRAY
4169: PUSH
4170: FOR_TO
4171: IFFALSE 4228
// begin PrepareHuman ( false , 2 , 2 ) ;
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 2
4178: PPUSH
4179: LD_INT 2
4181: PPUSH
4182: CALL_OW 380
// un := CreateHuman ;
4186: LD_ADDR_VAR 0 3
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4196: LD_ADDR_EXP 71
4200: PUSH
4201: LD_EXP 71
4205: PUSH
4206: LD_VAR 0 3
4210: UNION
4211: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikronDepot ) ;
4212: LD_VAR 0 3
4216: PPUSH
4217: LD_EXP 73
4221: PPUSH
4222: CALL_OW 52
// end ;
4226: GO 4170
4228: POP
4229: POP
// for i := 1 to 2 do
4230: LD_ADDR_VAR 0 2
4234: PUSH
4235: DOUBLE
4236: LD_INT 1
4238: DEC
4239: ST_TO_ADDR
4240: LD_INT 2
4242: PUSH
4243: FOR_TO
4244: IFFALSE 4410
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
4246: LD_INT 2
4248: PUSH
4249: LD_INT 3
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_VAR 0 2
4260: ARRAY
4261: PPUSH
4262: LD_INT 2
4264: PPUSH
4265: LD_INT 1
4267: PPUSH
4268: LD_INT 3
4270: PUSH
4271: LD_INT 4
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: LD_VAR 0 2
4282: ARRAY
4283: PPUSH
4284: LD_INT 100
4286: PPUSH
4287: CALL 15206 0 5
// veh := CreateVehicle ;
4291: LD_ADDR_VAR 0 5
4295: PUSH
4296: CALL_OW 45
4300: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
4301: LD_VAR 0 5
4305: PPUSH
4306: LD_INT 28
4308: PPUSH
4309: LD_INT 37
4311: PPUSH
4312: LD_INT 6
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
4322: LD_INT 0
4324: PPUSH
4325: LD_INT 3
4327: PPUSH
4328: LD_INT 2
4330: PPUSH
4331: CALL_OW 380
// un := CreateHuman ;
4335: LD_ADDR_VAR 0 3
4339: PUSH
4340: CALL_OW 44
4344: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4345: LD_ADDR_EXP 71
4349: PUSH
4350: LD_EXP 71
4354: PUSH
4355: LD_VAR 0 3
4359: UNION
4360: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_VAR 0 5
4370: PPUSH
4371: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
4375: LD_VAR 0 3
4379: PPUSH
4380: LD_VAR 0 3
4384: PPUSH
4385: CALL_OW 250
4389: PUSH
4390: LD_INT 3
4392: PLUS
4393: PPUSH
4394: LD_VAR 0 3
4398: PPUSH
4399: CALL_OW 251
4403: PPUSH
4404: CALL_OW 111
// end ;
4408: GO 4243
4410: POP
4411: POP
// end ;
4412: LD_VAR 0 1
4416: RET
// export amConvoyTroops ; export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , vehs ; begin
4417: LD_INT 0
4419: PPUSH
4420: PPUSH
4421: PPUSH
4422: PPUSH
4423: PPUSH
4424: PPUSH
4425: PPUSH
4426: PPUSH
4427: PPUSH
4428: PPUSH
// uc_side := 1 ;
4429: LD_ADDR_OWVAR 20
4433: PUSH
4434: LD_INT 1
4436: ST_TO_ADDR
// uc_nation := 1 ;
4437: LD_ADDR_OWVAR 21
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// hc_name :=  ;
4445: LD_ADDR_OWVAR 26
4449: PUSH
4450: LD_STRING 
4452: ST_TO_ADDR
// hc_gallery :=  ;
4453: LD_ADDR_OWVAR 33
4457: PUSH
4458: LD_STRING 
4460: ST_TO_ADDR
// for i := 1 to soldiersAmount do
4461: LD_ADDR_VAR 0 8
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_VAR 0 1
4475: PUSH
4476: FOR_TO
4477: IFFALSE 4552
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4479: LD_INT 0
4481: PPUSH
4482: LD_EXP 42
4486: PPUSH
4487: CALL_OW 381
// un = CreateHuman ;
4491: LD_ADDR_VAR 0 9
4495: PUSH
4496: CALL_OW 44
4500: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4501: LD_ADDR_EXP 80
4505: PUSH
4506: LD_EXP 80
4510: PUSH
4511: LD_VAR 0 9
4515: ADD
4516: ST_TO_ADDR
// sols := sols ^ un ;
4517: LD_ADDR_VAR 0 12
4521: PUSH
4522: LD_VAR 0 12
4526: PUSH
4527: LD_VAR 0 9
4531: ADD
4532: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4533: LD_VAR 0 9
4537: PPUSH
4538: LD_VAR 0 6
4542: PPUSH
4543: LD_INT 0
4545: PPUSH
4546: CALL_OW 49
// end ;
4550: GO 4476
4552: POP
4553: POP
// for i := 1 to engsAmount do
4554: LD_ADDR_VAR 0 8
4558: PUSH
4559: DOUBLE
4560: LD_INT 1
4562: DEC
4563: ST_TO_ADDR
4564: LD_VAR 0 2
4568: PUSH
4569: FOR_TO
4570: IFFALSE 4645
// begin PrepareEngineer ( false , enemySkillLevel ) ;
4572: LD_INT 0
4574: PPUSH
4575: LD_EXP 42
4579: PPUSH
4580: CALL_OW 382
// un = CreateHuman ;
4584: LD_ADDR_VAR 0 9
4588: PUSH
4589: CALL_OW 44
4593: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4594: LD_ADDR_EXP 80
4598: PUSH
4599: LD_EXP 80
4603: PUSH
4604: LD_VAR 0 9
4608: ADD
4609: ST_TO_ADDR
// engs := engs ^ un ;
4610: LD_ADDR_VAR 0 13
4614: PUSH
4615: LD_VAR 0 13
4619: PUSH
4620: LD_VAR 0 9
4624: ADD
4625: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4626: LD_VAR 0 9
4630: PPUSH
4631: LD_VAR 0 6
4635: PPUSH
4636: LD_INT 0
4638: PPUSH
4639: CALL_OW 49
// end ;
4643: GO 4569
4645: POP
4646: POP
// for i := 1 to mechsAmount do
4647: LD_ADDR_VAR 0 8
4651: PUSH
4652: DOUBLE
4653: LD_INT 1
4655: DEC
4656: ST_TO_ADDR
4657: LD_VAR 0 3
4661: PUSH
4662: FOR_TO
4663: IFFALSE 4738
// begin PrepareMechanic ( false , enemySkillLevel ) ;
4665: LD_INT 0
4667: PPUSH
4668: LD_EXP 42
4672: PPUSH
4673: CALL_OW 383
// un = CreateHuman ;
4677: LD_ADDR_VAR 0 9
4681: PUSH
4682: CALL_OW 44
4686: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4687: LD_ADDR_EXP 80
4691: PUSH
4692: LD_EXP 80
4696: PUSH
4697: LD_VAR 0 9
4701: ADD
4702: ST_TO_ADDR
// mechs := mechs ^ un ;
4703: LD_ADDR_VAR 0 14
4707: PUSH
4708: LD_VAR 0 14
4712: PUSH
4713: LD_VAR 0 9
4717: ADD
4718: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4719: LD_VAR 0 9
4723: PPUSH
4724: LD_VAR 0 6
4728: PPUSH
4729: LD_INT 0
4731: PPUSH
4732: CALL_OW 49
// end ;
4736: GO 4662
4738: POP
4739: POP
// for i := 1 to scientistsAmount do
4740: LD_ADDR_VAR 0 8
4744: PUSH
4745: DOUBLE
4746: LD_INT 1
4748: DEC
4749: ST_TO_ADDR
4750: LD_VAR 0 4
4754: PUSH
4755: FOR_TO
4756: IFFALSE 4831
// begin PrepareScientist ( false , enemySkillLevel ) ;
4758: LD_INT 0
4760: PPUSH
4761: LD_EXP 42
4765: PPUSH
4766: CALL_OW 384
// un = CreateHuman ;
4770: LD_ADDR_VAR 0 9
4774: PUSH
4775: CALL_OW 44
4779: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4780: LD_ADDR_EXP 80
4784: PUSH
4785: LD_EXP 80
4789: PUSH
4790: LD_VAR 0 9
4794: ADD
4795: ST_TO_ADDR
// scis := scis ^ un ;
4796: LD_ADDR_VAR 0 15
4800: PUSH
4801: LD_VAR 0 15
4805: PUSH
4806: LD_VAR 0 9
4810: ADD
4811: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4812: LD_VAR 0 9
4816: PPUSH
4817: LD_VAR 0 6
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// end ;
4829: GO 4755
4831: POP
4832: POP
// for i := 1 to vehiclesAmount do
4833: LD_ADDR_VAR 0 8
4837: PUSH
4838: DOUBLE
4839: LD_INT 1
4841: DEC
4842: ST_TO_ADDR
4843: LD_VAR 0 5
4847: PUSH
4848: FOR_TO
4849: IFFALSE 5031
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
4851: LD_ADDR_OWVAR 40
4855: PUSH
4856: LD_INT 2
4858: PUSH
4859: LD_INT 4
4861: PUSH
4862: LD_INT 3
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 1
4872: PPUSH
4873: LD_INT 3
4875: PPUSH
4876: CALL_OW 12
4880: ARRAY
4881: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
4882: LD_ADDR_OWVAR 37
4886: PUSH
4887: LD_INT 3
4889: ST_TO_ADDR
// vc_control = control_manual ;
4890: LD_ADDR_OWVAR 38
4894: PUSH
4895: LD_INT 1
4897: ST_TO_ADDR
// vc_engine = engine_combustion ;
4898: LD_ADDR_OWVAR 39
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// veh = CreateVehicle ;
4906: LD_ADDR_VAR 0 10
4910: PUSH
4911: CALL_OW 45
4915: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
4916: LD_ADDR_EXP 80
4920: PUSH
4921: LD_EXP 80
4925: PUSH
4926: LD_VAR 0 10
4930: ADD
4931: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4932: LD_VAR 0 10
4936: PPUSH
4937: LD_VAR 0 6
4941: PPUSH
4942: LD_INT 0
4944: PPUSH
4945: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4949: LD_INT 0
4951: PPUSH
4952: LD_EXP 42
4956: PPUSH
4957: CALL_OW 383
// un = CreateHuman ;
4961: LD_ADDR_VAR 0 9
4965: PUSH
4966: CALL_OW 44
4970: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
4971: LD_ADDR_EXP 80
4975: PUSH
4976: LD_EXP 80
4980: PUSH
4981: LD_VAR 0 9
4985: ADD
4986: ST_TO_ADDR
// amVehs := amVehs ^ veh ;
4987: LD_ADDR_EXP 79
4991: PUSH
4992: LD_EXP 79
4996: PUSH
4997: LD_VAR 0 10
5001: ADD
5002: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5003: LD_VAR 0 9
5007: PPUSH
5008: LD_VAR 0 10
5012: PPUSH
5013: CALL_OW 52
// SetFuel ( veh , 100 ) ;
5017: LD_VAR 0 10
5021: PPUSH
5022: LD_INT 100
5024: PPUSH
5025: CALL_OW 240
// end ;
5029: GO 4848
5031: POP
5032: POP
// ComAgressiveMove ( amConvoyTroops , 25 , 31 ) ;
5033: LD_EXP 80
5037: PPUSH
5038: LD_INT 25
5040: PPUSH
5041: LD_INT 31
5043: PPUSH
5044: CALL_OW 114
// AgressiveMove ( amVehs , [ [ 95 , 44 ] ] ) ;
5048: LD_EXP 79
5052: PPUSH
5053: LD_INT 95
5055: PUSH
5056: LD_INT 44
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: PPUSH
5066: CALL 49727 0 2
// AddComEnterUnit ( sols , [ amBarracks [ 1 ] , amBarracks [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5070: LD_VAR 0 12
5074: PPUSH
5075: LD_EXP 77
5079: PUSH
5080: LD_INT 1
5082: ARRAY
5083: PUSH
5084: LD_EXP 77
5088: PUSH
5089: LD_INT 2
5091: ARRAY
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: PUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_INT 2
5102: PPUSH
5103: CALL_OW 12
5107: ARRAY
5108: PPUSH
5109: CALL_OW 180
// AddComEnterUnit ( engs , omikronDepot ) ;
5113: LD_VAR 0 13
5117: PPUSH
5118: LD_EXP 73
5122: PPUSH
5123: CALL_OW 180
// AddComEnterUnit ( mechs , amFactory ) ;
5127: LD_VAR 0 14
5131: PPUSH
5132: LD_EXP 78
5136: PPUSH
5137: CALL_OW 180
// AddComEnterUnit ( scis , [ amLabs [ 1 ] , amLabs [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5141: LD_VAR 0 15
5145: PPUSH
5146: LD_EXP 76
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PUSH
5155: LD_EXP 76
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PUSH
5168: LD_INT 1
5170: PPUSH
5171: LD_INT 2
5173: PPUSH
5174: CALL_OW 12
5178: ARRAY
5179: PPUSH
5180: CALL_OW 180
// amConvoyTroops :=  ;
5184: LD_ADDR_EXP 80
5188: PUSH
5189: LD_STRING 
5191: ST_TO_ADDR
// sols :=  ;
5192: LD_ADDR_VAR 0 12
5196: PUSH
5197: LD_STRING 
5199: ST_TO_ADDR
// engs :=  ;
5200: LD_ADDR_VAR 0 13
5204: PUSH
5205: LD_STRING 
5207: ST_TO_ADDR
// mechs :=  ;
5208: LD_ADDR_VAR 0 14
5212: PUSH
5213: LD_STRING 
5215: ST_TO_ADDR
// scis :=  ;
5216: LD_ADDR_VAR 0 15
5220: PUSH
5221: LD_STRING 
5223: ST_TO_ADDR
// end ;
5224: LD_VAR 0 7
5228: RET
// export function PrepareAttackOnRus ( ) ; var i ; begin
5229: LD_INT 0
5231: PPUSH
5232: PPUSH
// for i := 1 to amVehs do
5233: LD_ADDR_VAR 0 2
5237: PUSH
5238: DOUBLE
5239: LD_INT 1
5241: DEC
5242: ST_TO_ADDR
5243: LD_EXP 79
5247: PUSH
5248: FOR_TO
5249: IFFALSE 5292
// begin if GetType ( i ) = unit_vehicle then
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 247
5260: PUSH
5261: LD_INT 2
5263: EQUAL
5264: IFFALSE 5278
// SetFuel ( i , 100 ) ;
5266: LD_VAR 0 2
5270: PPUSH
5271: LD_INT 100
5273: PPUSH
5274: CALL_OW 240
// SetLives ( i , 100 ) ;
5278: LD_VAR 0 2
5282: PPUSH
5283: LD_INT 100
5285: PPUSH
5286: CALL_OW 234
// end ;
5290: GO 5248
5292: POP
5293: POP
// for i := 1 to amIntroUnits do
5294: LD_ADDR_VAR 0 2
5298: PUSH
5299: DOUBLE
5300: LD_INT 1
5302: DEC
5303: ST_TO_ADDR
5304: LD_EXP 74
5308: PUSH
5309: FOR_TO
5310: IFFALSE 5353
// begin if GetType ( i ) = unit_vehicle then
5312: LD_VAR 0 2
5316: PPUSH
5317: CALL_OW 247
5321: PUSH
5322: LD_INT 2
5324: EQUAL
5325: IFFALSE 5339
// SetFuel ( i , 100 ) ;
5327: LD_VAR 0 2
5331: PPUSH
5332: LD_INT 100
5334: PPUSH
5335: CALL_OW 240
// SetLives ( i , 100 ) ;
5339: LD_VAR 0 2
5343: PPUSH
5344: LD_INT 100
5346: PPUSH
5347: CALL_OW 234
// end ;
5351: GO 5309
5353: POP
5354: POP
// AgressiveMove ( amIntroUnits , [ [ 65 , 91 ] , [ 116 , 97 ] ] ) ;
5355: LD_EXP 74
5359: PPUSH
5360: LD_INT 65
5362: PUSH
5363: LD_INT 91
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: LD_INT 116
5372: PUSH
5373: LD_INT 97
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL 49727 0 2
// AgressiveMove ( amVehs , [ [ 65 , 91 ] , [ 109 , 97 ] ] ) ;
5388: LD_EXP 79
5392: PPUSH
5393: LD_INT 65
5395: PUSH
5396: LD_INT 91
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: PUSH
5403: LD_INT 109
5405: PUSH
5406: LD_INT 97
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PPUSH
5417: CALL 49727 0 2
// end ; end_of_file end_of_file
5421: LD_VAR 0 1
5425: RET
// on BuildingComplete ( building ) do var un , i , bunkers , sols , labT1 ;
5426: LD_INT 0
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
5432: PPUSH
// begin if GetSide ( building ) = 6 and ( GetBType ( building ) = b_bunker or GetBType ( building ) = b_armoury ) then
5433: LD_VAR 0 1
5437: PPUSH
5438: CALL_OW 255
5442: PUSH
5443: LD_INT 6
5445: EQUAL
5446: PUSH
5447: LD_VAR 0 1
5451: PPUSH
5452: CALL_OW 266
5456: PUSH
5457: LD_INT 32
5459: EQUAL
5460: PUSH
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 266
5470: PUSH
5471: LD_INT 4
5473: EQUAL
5474: OR
5475: AND
5476: IFFALSE 5624
// begin sols := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_inside ] ] ) ;
5478: LD_ADDR_VAR 0 5
5482: PUSH
5483: LD_INT 22
5485: PUSH
5486: LD_INT 6
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 21
5495: PUSH
5496: LD_INT 1
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: LD_INT 25
5505: PUSH
5506: LD_INT 1
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 54
5515: PUSH
5516: EMPTY
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: PPUSH
5525: CALL_OW 69
5529: ST_TO_ADDR
// for un in sols do
5530: LD_ADDR_VAR 0 2
5534: PUSH
5535: LD_VAR 0 5
5539: PUSH
5540: FOR_IN
5541: IFFALSE 5592
// begin if GetBType ( IsInUnit ( un ) ) = b_bunker then
5543: LD_VAR 0 2
5547: PPUSH
5548: CALL_OW 310
5552: PPUSH
5553: CALL_OW 266
5557: PUSH
5558: LD_INT 32
5560: EQUAL
5561: IFFALSE 5565
// continue ;
5563: GO 5540
// ComExit ( un ) ;
5565: LD_VAR 0 2
5569: PPUSH
5570: CALL 47519 0 1
// AddComEnterUnit ( un , building ) ;
5574: LD_VAR 0 2
5578: PPUSH
5579: LD_VAR 0 1
5583: PPUSH
5584: CALL_OW 180
// break ;
5588: GO 5592
// end ;
5590: GO 5540
5592: POP
5593: POP
// if labT1 = false then
5594: LD_VAR 0 6
5598: PUSH
5599: LD_INT 0
5601: EQUAL
5602: IFFALSE 5624
// begin labT1 = true ;
5604: LD_ADDR_VAR 0 6
5608: PUSH
5609: LD_INT 1
5611: ST_TO_ADDR
// AddComUpgradeLab ( kirovLab , b_lab_weapon ) ;
5612: LD_EXP 61
5616: PPUSH
5617: LD_INT 10
5619: PPUSH
5620: CALL_OW 207
// end ; end ; end ;
5624: PPOPN 6
5626: END
// on UpgradeComplete ( building ) do var i , un , weapon , maleSci , maleOthers ;
5627: LD_INT 0
5629: PPUSH
5630: PPUSH
5631: PPUSH
5632: PPUSH
5633: PPUSH
// begin if GetSide ( building ) = 3 then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 255
5643: PUSH
5644: LD_INT 3
5646: EQUAL
5647: IFFALSE 6082
// begin dialog_workshop = true ;
5649: LD_ADDR_EXP 16
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
5657: LD_INT 22
5659: PUSH
5660: LD_INT 3
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 30
5669: PUSH
5670: LD_INT 26
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PPUSH
5681: CALL_OW 69
5685: NOT
5686: IFFALSE 6075
// begin CenterNowOnUnits ( building ) ;
5688: LD_VAR 0 1
5692: PPUSH
5693: CALL_OW 87
// DialogueOn ;
5697: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
5701: LD_EXP 43
5705: PPUSH
5706: LD_STRING D3aa-Bur-1
5708: PPUSH
5709: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
5713: LD_EXP 67
5717: PPUSH
5718: CALL_OW 302
5722: PUSH
5723: LD_EXP 67
5727: PPUSH
5728: CALL_OW 255
5732: PUSH
5733: LD_INT 3
5735: EQUAL
5736: AND
5737: IFFALSE 5753
// Say ( Scholtze , D3aa-Sch-1 ) else
5739: LD_EXP 67
5743: PPUSH
5744: LD_STRING D3aa-Sch-1
5746: PPUSH
5747: CALL_OW 88
5751: GO 6059
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
5753: LD_ADDR_VAR 0 5
5757: PUSH
5758: LD_INT 22
5760: PUSH
5761: LD_INT 3
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 21
5770: PUSH
5771: LD_INT 1
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 25
5780: PUSH
5781: LD_INT 4
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 26
5790: PUSH
5791: LD_INT 1
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 50
5800: PUSH
5801: EMPTY
5802: LIST
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: PPUSH
5811: CALL_OW 69
5815: PUSH
5816: LD_EXP 43
5820: PUSH
5821: LD_EXP 44
5825: PUSH
5826: LD_EXP 46
5830: PUSH
5831: LD_EXP 47
5835: PUSH
5836: LD_EXP 48
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: DIFF
5848: ST_TO_ADDR
// if maleSci then
5849: LD_VAR 0 5
5853: IFFALSE 5873
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
5855: LD_VAR 0 5
5859: PUSH
5860: LD_INT 1
5862: ARRAY
5863: PPUSH
5864: LD_STRING D3aa-Sci1-1
5866: PPUSH
5867: CALL_OW 88
5871: GO 6059
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_INT 22
5880: PUSH
5881: LD_INT 3
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 1
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 26
5900: PUSH
5901: LD_INT 1
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PUSH
5908: LD_INT 50
5910: PUSH
5911: EMPTY
5912: LIST
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 69
5924: PUSH
5925: LD_EXP 43
5929: PUSH
5930: LD_EXP 44
5934: PUSH
5935: LD_EXP 46
5939: PUSH
5940: LD_EXP 47
5944: PUSH
5945: LD_EXP 48
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: DIFF
5957: ST_TO_ADDR
// if maleOthers then
5958: LD_VAR 0 6
5962: IFFALSE 5982
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
5964: LD_VAR 0 6
5968: PUSH
5969: LD_INT 1
5971: ARRAY
5972: PPUSH
5973: LD_STRING D3aa-Sci1-1
5975: PPUSH
5976: CALL_OW 88
5980: GO 6059
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
5982: LD_ADDR_VAR 0 6
5986: PUSH
5987: LD_INT 22
5989: PUSH
5990: LD_INT 3
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 21
5999: PUSH
6000: LD_INT 1
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 26
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 50
6019: PUSH
6020: EMPTY
6021: LIST
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 69
6033: PUSH
6034: LD_EXP 43
6038: PUSH
6039: EMPTY
6040: LIST
6041: DIFF
6042: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
6043: LD_VAR 0 6
6047: PUSH
6048: LD_INT 1
6050: ARRAY
6051: PPUSH
6052: LD_STRING D3aa-Sci1-1
6054: PPUSH
6055: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
6059: LD_EXP 43
6063: PPUSH
6064: LD_STRING D3aa-Bur-2
6066: PPUSH
6067: CALL_OW 88
// DialogueOff ;
6071: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
6075: LD_STRING M3
6077: PPUSH
6078: CALL_OW 337
// end ; if GetSide ( building ) = 6 and Length ( comArray ) > 0 then
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 255
6091: PUSH
6092: LD_INT 6
6094: EQUAL
6095: PUSH
6096: LD_EXP 2
6100: PPUSH
6101: CALL 50848 0 1
6105: PUSH
6106: LD_INT 0
6108: GREATER
6109: AND
6110: IFFALSE 6200
// begin if comArray [ 1 ] = kirovLab then
6112: LD_EXP 2
6116: PUSH
6117: LD_INT 1
6119: ARRAY
6120: PUSH
6121: LD_EXP 61
6125: EQUAL
6126: IFFALSE 6146
// AddComUpgradeLab ( comArray [ 1 ] , b_lab_weapon ) else
6128: LD_EXP 2
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: LD_INT 10
6139: PPUSH
6140: CALL_OW 207
6144: GO 6159
// AddComUpgrade ( comArray [ 1 ] ) ;
6146: LD_EXP 2
6150: PUSH
6151: LD_INT 1
6153: ARRAY
6154: PPUSH
6155: CALL_OW 206
// comArray := comArray diff comArray [ 1 ] ;
6159: LD_ADDR_EXP 2
6163: PUSH
6164: LD_EXP 2
6168: PUSH
6169: LD_EXP 2
6173: PUSH
6174: LD_INT 1
6176: ARRAY
6177: DIFF
6178: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6179: LD_INT 35
6181: PPUSH
6182: CALL_OW 67
// AddComComplete ( kirovEngs , building ) ;
6186: LD_EXP 70
6190: PPUSH
6191: LD_VAR 0 1
6195: PPUSH
6196: CALL 18299 0 2
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_factory or GetBType ( building ) = b_workshop then
6200: LD_VAR 0 1
6204: PPUSH
6205: CALL_OW 255
6209: PUSH
6210: LD_INT 6
6212: EQUAL
6213: PUSH
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 266
6223: PUSH
6224: LD_INT 3
6226: EQUAL
6227: AND
6228: PUSH
6229: LD_VAR 0 1
6233: PPUSH
6234: CALL_OW 266
6238: PUSH
6239: LD_INT 2
6241: EQUAL
6242: OR
6243: IFFALSE 6338
// begin un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
6245: LD_ADDR_VAR 0 3
6249: PUSH
6250: LD_INT 22
6252: PUSH
6253: LD_INT 6
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 21
6262: PUSH
6263: LD_INT 3
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PUSH
6270: LD_INT 30
6272: PUSH
6273: LD_INT 32
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 69
6289: ST_TO_ADDR
// for i in un do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_VAR 0 3
6299: PUSH
6300: FOR_IN
6301: IFFALSE 6336
// AddComPlaceWeapon ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ Rand ( 1 , 2 ) ] ) ;
6303: LD_VAR 0 2
6307: PPUSH
6308: LD_INT 42
6310: PUSH
6311: LD_INT 43
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 1
6320: PPUSH
6321: LD_INT 2
6323: PPUSH
6324: CALL_OW 12
6328: ARRAY
6329: PPUSH
6330: CALL_OW 208
6334: GO 6300
6336: POP
6337: POP
// end ; end ;
6338: PPOPN 6
6340: END
// on BuildingStarted ( building , hum ) do var un , i ;
6341: LD_INT 0
6343: PPUSH
6344: PPUSH
// begin AddComComplete ( kirovEngs , building ) ;
6345: LD_EXP 70
6349: PPUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL 18299 0 2
// end ; end_of_file
6359: PPOPN 4
6361: END
// export currentTeam , kirovBaseUnits , bukovMsg ; export counterEnable , counterIndex , ticks , convoyTime , timeToPrepareAttack , timeToArabAttack ; export kirovAttackVehicles ; export function MissionIntro ; var i , un , selectedPeople ; begin
6362: LD_INT 0
6364: PPUSH
6365: PPUSH
6366: PPUSH
6367: PPUSH
// InGameOn ;
6368: CALL_OW 8
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6372: LD_EXP 43
6376: PUSH
6377: LD_EXP 55
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 87
// convoyTime := [ 0 0$10 , 15 15$00 , 20 20$00 , 25 25$00 ] ;
6390: LD_ADDR_EXP 87
6394: PUSH
6395: LD_INT 350
6397: PUSH
6398: LD_INT 31500
6400: PUSH
6401: LD_INT 42000
6403: PUSH
6404: LD_INT 52500
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: ST_TO_ADDR
// bukovMsg := [ D3a-RSol1-1 , D3b-RSol1-1 ] ;
6413: LD_ADDR_EXP 83
6417: PUSH
6418: LD_STRING D3a-RSol1-1
6420: PUSH
6421: LD_STRING D3b-RSol1-1
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: ST_TO_ADDR
// if not Belkov then
6428: LD_EXP 47
6432: NOT
6433: IFFALSE 6509
// begin Say ( Kurin , D1a-Kur-1 ) ;
6435: LD_EXP 55
6439: PPUSH
6440: LD_STRING D1a-Kur-1
6442: PPUSH
6443: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
6447: LD_EXP 43
6451: PPUSH
6452: LD_STRING D1a-Bur-1
6454: PPUSH
6455: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
6459: LD_EXP 55
6463: PPUSH
6464: LD_STRING D1a-Kur-2
6466: PPUSH
6467: CALL_OW 88
// Say ( Kurin , D1a-Kur-2a ) ;
6471: LD_EXP 55
6475: PPUSH
6476: LD_STRING D1a-Kur-2a
6478: PPUSH
6479: CALL_OW 88
// Say ( Kurin , D1a-Kur-2b ) ;
6483: LD_EXP 55
6487: PPUSH
6488: LD_STRING D1a-Kur-2b
6490: PPUSH
6491: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
6495: LD_EXP 43
6499: PPUSH
6500: LD_STRING D1a-Bur-2
6502: PPUSH
6503: CALL_OW 88
// end else
6507: GO 6545
// begin Say ( Kurin , D1b-Kur-1 ) ;
6509: LD_EXP 55
6513: PPUSH
6514: LD_STRING D1b-Kur-1
6516: PPUSH
6517: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
6521: LD_EXP 47
6525: PPUSH
6526: LD_STRING D1b-Bel-1
6528: PPUSH
6529: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
6533: LD_EXP 55
6537: PPUSH
6538: LD_STRING D1b-Kur-2
6540: PPUSH
6541: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
6545: LD_EXP 55
6549: PPUSH
6550: LD_STRING D2-Kur-1
6552: PPUSH
6553: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
6557: LD_EXP 43
6561: PPUSH
6562: LD_STRING D2-Bur-1
6564: PPUSH
6565: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
6569: LD_EXP 55
6573: PPUSH
6574: LD_STRING D2-Kur-2
6576: PPUSH
6577: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
6581: LD_EXP 43
6585: PPUSH
6586: LD_STRING D2-Bur-2
6588: PPUSH
6589: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
6593: LD_EXP 55
6597: PPUSH
6598: LD_STRING D2-Kur-3
6600: PPUSH
6601: CALL_OW 88
// PrepareAmericansMissionIntro ;
6605: CALL 2451 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
6609: LD_INT 1
6611: PPUSH
6612: LD_INT 6
6614: PPUSH
6615: LD_INT 1
6617: PPUSH
6618: LD_INT 1
6620: PPUSH
6621: CALL_OW 80
// RevealFogArea ( 3 , RevealMapPartArea ) ;
6625: LD_INT 3
6627: PPUSH
6628: LD_INT 5
6630: PPUSH
6631: CALL_OW 332
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
6635: LD_EXP 56
6639: PUSH
6640: LD_EXP 65
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PPUSH
6649: CALL_OW 87
// wait ( 0 0$3 ) ;
6653: LD_INT 105
6655: PPUSH
6656: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
6660: LD_EXP 56
6664: PPUSH
6665: LD_STRING D2-Pop-3
6667: PPUSH
6668: CALL_OW 94
// wait ( 0 0$0.3 ) ;
6672: LD_INT 10
6674: PPUSH
6675: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6679: LD_EXP 43
6683: PUSH
6684: LD_EXP 55
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PPUSH
6693: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
6697: LD_EXP 55
6701: PPUSH
6702: LD_STRING D2-Kur-4
6704: PPUSH
6705: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6709: LD_EXP 43
6713: PPUSH
6714: LD_STRING D2-Bur-4
6716: PPUSH
6717: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
6721: LD_EXP 55
6725: PPUSH
6726: LD_STRING D2-Kur-5
6728: PPUSH
6729: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
6733: LD_EXP 43
6737: PPUSH
6738: LD_STRING D2-Bur-5
6740: PPUSH
6741: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
6745: LD_EXP 55
6749: PPUSH
6750: LD_STRING D2-Kur-6
6752: PPUSH
6753: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6757: LD_EXP 43
6761: PPUSH
6762: LD_STRING D2-Bur-4
6764: PPUSH
6765: CALL_OW 88
// kirovBaseUnits = otherKirovUnits ;
6769: LD_ADDR_EXP 82
6773: PUSH
6774: LD_EXP 57
6778: ST_TO_ADDR
// kirovBaseUnits = kirovBaseUnits ^ otherBeriaUnits ;
6779: LD_ADDR_EXP 82
6783: PUSH
6784: LD_EXP 82
6788: PUSH
6789: LD_EXP 51
6793: ADD
6794: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 6 , 6 , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ kirovBaseUnits ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
6795: LD_ADDR_VAR 0 4
6799: PUSH
6800: LD_STRING text
6802: PPUSH
6803: LD_INT 6
6805: PPUSH
6806: LD_INT 6
6808: PPUSH
6809: LD_INT -5
6811: PUSH
6812: LD_EXP 43
6816: PUSH
6817: LD_EXP 44
6821: PUSH
6822: LD_EXP 46
6826: PUSH
6827: LD_EXP 45
6831: PUSH
6832: LD_EXP 47
6836: PUSH
6837: LD_INT -6
6839: PUSH
6840: LD_INT -2
6842: PUSH
6843: LD_INT -3
6845: PUSH
6846: LD_INT -5
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: PUSH
6861: LD_EXP 82
6865: ADD
6866: PUSH
6867: LD_INT -6
6869: PUSH
6870: LD_INT -4
6872: PUSH
6873: LD_EXP 55
6877: PUSH
6878: LD_EXP 56
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: ADD
6889: PPUSH
6890: LD_INT 1
6892: PUSH
6893: LD_INT 3
6895: PUSH
6896: LD_INT 2
6898: PUSH
6899: LD_INT 1
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 4
6908: PUSH
6909: LD_INT 1
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: PPUSH
6922: CALL_OW 42
6926: ST_TO_ADDR
// SetSide ( kirovBaseUnits , 6 ) ;
6927: LD_EXP 82
6931: PPUSH
6932: LD_INT 6
6934: PPUSH
6935: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
6939: LD_VAR 0 4
6943: PPUSH
6944: LD_INT 3
6946: PPUSH
6947: CALL_OW 235
// AddComMoveXY ( Popov , 135 , 67 ) ;
6951: LD_EXP 56
6955: PPUSH
6956: LD_INT 135
6958: PPUSH
6959: LD_INT 67
6961: PPUSH
6962: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
6966: LD_EXP 65
6970: PPUSH
6971: LD_INT 209
6973: PPUSH
6974: LD_INT 164
6976: PPUSH
6977: CALL_OW 171
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) ;
6981: LD_ADDR_EXP 62
6985: PUSH
6986: LD_INT 22
6988: PUSH
6989: LD_INT 6
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 30
6998: PUSH
6999: LD_INT 4
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PPUSH
7010: CALL_OW 69
7014: ST_TO_ADDR
// kirovBaseUnits := kirovBaseUnits diff selectedPeople ;
7015: LD_ADDR_EXP 82
7019: PUSH
7020: LD_EXP 82
7024: PUSH
7025: LD_VAR 0 4
7029: DIFF
7030: ST_TO_ADDR
// SetClass ( kirovBaseUnits [ 1 ] , 2 ) ;
7031: LD_EXP 82
7035: PUSH
7036: LD_INT 1
7038: ARRAY
7039: PPUSH
7040: LD_INT 2
7042: PPUSH
7043: CALL_OW 336
// for i := 2 to 3 do
7047: LD_ADDR_VAR 0 2
7051: PUSH
7052: DOUBLE
7053: LD_INT 2
7055: DEC
7056: ST_TO_ADDR
7057: LD_INT 3
7059: PUSH
7060: FOR_TO
7061: IFFALSE 7083
// SetClass ( kirovBaseUnits [ i ] , 3 ) ;
7063: LD_EXP 82
7067: PUSH
7068: LD_VAR 0 2
7072: ARRAY
7073: PPUSH
7074: LD_INT 3
7076: PPUSH
7077: CALL_OW 336
7081: GO 7060
7083: POP
7084: POP
// for un in selectedPeople do
7085: LD_ADDR_VAR 0 3
7089: PUSH
7090: LD_VAR 0 4
7094: PUSH
7095: FOR_IN
7096: IFFALSE 7109
// ComExitBuilding ( un ) ;
7098: LD_VAR 0 3
7102: PPUSH
7103: CALL_OW 122
7107: GO 7095
7109: POP
7110: POP
// currentTeam := selectedPeople union [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] ;
7111: LD_ADDR_EXP 81
7115: PUSH
7116: LD_VAR 0 4
7120: PUSH
7121: LD_EXP 43
7125: PUSH
7126: LD_EXP 44
7130: PUSH
7131: LD_EXP 46
7135: PUSH
7136: LD_EXP 47
7140: PUSH
7141: LD_EXP 45
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: UNION
7153: ST_TO_ADDR
// AddComMoveXY ( currentTeam , 113 , 97 ) ;
7154: LD_EXP 81
7158: PPUSH
7159: LD_INT 113
7161: PPUSH
7162: LD_INT 97
7164: PPUSH
7165: CALL_OW 171
// for un in kirovBaseUnits do
7169: LD_ADDR_VAR 0 3
7173: PUSH
7174: LD_EXP 82
7178: PUSH
7179: FOR_IN
7180: IFFALSE 7217
// begin if IsInUnit ( un ) = 0 then
7182: LD_VAR 0 3
7186: PPUSH
7187: CALL_OW 310
7191: PUSH
7192: LD_INT 0
7194: EQUAL
7195: IFFALSE 7215
// ComEnterUnit ( un , kirovBarracks [ 1 ] ) ;
7197: LD_VAR 0 3
7201: PPUSH
7202: LD_EXP 62
7206: PUSH
7207: LD_INT 1
7209: ARRAY
7210: PPUSH
7211: CALL_OW 120
// end ;
7215: GO 7179
7217: POP
7218: POP
// ChangeMissionObjectives ( M1 ) ;
7219: LD_STRING M1
7221: PPUSH
7222: CALL_OW 337
// Query ( QReadyInfo ) ;
7226: LD_STRING QReadyInfo
7228: PPUSH
7229: CALL_OW 97
// counterEnable := true ;
7233: LD_ADDR_EXP 84
7237: PUSH
7238: LD_INT 1
7240: ST_TO_ADDR
// SaveForQuickRestart ;
7241: CALL_OW 22
// wait ( 0 0$5 ) ;
7245: LD_INT 175
7247: PPUSH
7248: CALL_OW 67
// InGameOff ;
7252: CALL_OW 9
// for un in kirovBaseUnits do
7256: LD_ADDR_VAR 0 3
7260: PUSH
7261: LD_EXP 82
7265: PUSH
7266: FOR_IN
7267: IFFALSE 7320
// begin if IsInUnit ( un ) = 0 and not GetClass ( un ) = 2 then
7269: LD_VAR 0 3
7273: PPUSH
7274: CALL_OW 310
7278: PUSH
7279: LD_INT 0
7281: EQUAL
7282: PUSH
7283: LD_VAR 0 3
7287: PPUSH
7288: CALL_OW 257
7292: PUSH
7293: LD_INT 2
7295: EQUAL
7296: NOT
7297: AND
7298: IFFALSE 7318
// ComEnterUnit ( un , kirovBarracks [ 2 ] ) ;
7300: LD_VAR 0 3
7304: PPUSH
7305: LD_EXP 62
7309: PUSH
7310: LD_INT 2
7312: ARRAY
7313: PPUSH
7314: CALL_OW 120
// end ;
7318: GO 7266
7320: POP
7321: POP
// UpgradeKirovBase ;
7322: CALL 1833 0 0
// end ;
7326: LD_VAR 0 1
7330: RET
// every 0 0$1 trigger counterEnable do var veh , hum , i ;
7331: LD_EXP 84
7335: IFFALSE 8006
7337: GO 7339
7339: DISABLE
7340: LD_INT 0
7342: PPUSH
7343: PPUSH
7344: PPUSH
// begin enable ;
7345: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
7346: LD_ADDR_VAR 0 1
7350: PUSH
7351: LD_INT 22
7353: PUSH
7354: LD_INT 3
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 21
7363: PUSH
7364: LD_INT 2
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: LD_INT 34
7376: PUSH
7377: LD_INT 51
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: PPUSH
7393: CALL_OW 69
7397: ST_TO_ADDR
// hum = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + kurinVehNeeded ;
7398: LD_ADDR_VAR 0 2
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: LD_EXP 34
7436: PLUS
7437: ST_TO_ADDR
// ticks = ticks + 0 0$01 ;
7438: LD_ADDR_EXP 86
7442: PUSH
7443: LD_EXP 86
7447: PUSH
7448: LD_INT 35
7450: PLUS
7451: ST_TO_ADDR
// VehNeeded = hum - veh ;
7452: LD_ADDR_EXP 39
7456: PUSH
7457: LD_VAR 0 2
7461: PUSH
7462: LD_VAR 0 1
7466: MINUS
7467: ST_TO_ADDR
// if VehNeeded < 0 then
7468: LD_EXP 39
7472: PUSH
7473: LD_INT 0
7475: LESS
7476: IFFALSE 7488
// enoughVehsForKirov = true else
7478: LD_ADDR_EXP 91
7482: PUSH
7483: LD_INT 1
7485: ST_TO_ADDR
7486: GO 7496
// enoughVehsForKirov = false ;
7488: LD_ADDR_EXP 91
7492: PUSH
7493: LD_INT 0
7495: ST_TO_ADDR
// timeToArabAttack = timeToArabAttack - 0 0$01 ;
7496: LD_ADDR_EXP 89
7500: PUSH
7501: LD_EXP 89
7505: PUSH
7506: LD_INT 35
7508: MINUS
7509: ST_TO_ADDR
// case counterIndex of 1 :
7510: LD_EXP 85
7514: PUSH
7515: LD_INT 1
7517: DOUBLE
7518: EQUAL
7519: IFTRUE 7523
7521: GO 7606
7523: POP
// begin if VehNeeded <= 0 then
7524: LD_EXP 39
7528: PUSH
7529: LD_INT 0
7531: LESSEQUAL
7532: IFFALSE 7560
// display_strings = [ #Ru03-5a ] ^ [ #Ru03-4 , timeToPrepareAttack ] else
7534: LD_ADDR_OWVAR 47
7538: PUSH
7539: LD_STRING #Ru03-5a
7541: PUSH
7542: EMPTY
7543: LIST
7544: PUSH
7545: LD_STRING #Ru03-4
7547: PUSH
7548: LD_EXP 88
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: ADD
7557: ST_TO_ADDR
7558: GO 7590
// display_strings = [ #Ru03-5 , VehNeeded ] ^ [ #Ru03-4 , timeToPrepareAttack ] ;
7560: LD_ADDR_OWVAR 47
7564: PUSH
7565: LD_STRING #Ru03-5
7567: PUSH
7568: LD_EXP 39
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_STRING #Ru03-4
7579: PUSH
7580: LD_EXP 88
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: ADD
7589: ST_TO_ADDR
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ;
7590: LD_ADDR_EXP 88
7594: PUSH
7595: LD_EXP 88
7599: PUSH
7600: LD_INT 35
7602: MINUS
7603: ST_TO_ADDR
// end ; 2 :
7604: GO 7733
7606: LD_INT 2
7608: DOUBLE
7609: EQUAL
7610: IFTRUE 7614
7612: GO 7648
7614: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
7615: LD_ADDR_OWVAR 47
7619: PUSH
7620: LD_STRING #Ru03-1
7622: PUSH
7623: LD_EXP 23
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7632: LD_ADDR_EXP 23
7636: PUSH
7637: LD_EXP 23
7641: PUSH
7642: LD_INT 35
7644: MINUS
7645: ST_TO_ADDR
// end ; 3 :
7646: GO 7733
7648: LD_INT 3
7650: DOUBLE
7651: EQUAL
7652: IFTRUE 7656
7654: GO 7690
7656: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
7657: LD_ADDR_OWVAR 47
7661: PUSH
7662: LD_STRING #Ru03-2
7664: PUSH
7665: LD_EXP 23
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7674: LD_ADDR_EXP 23
7678: PUSH
7679: LD_EXP 23
7683: PUSH
7684: LD_INT 35
7686: MINUS
7687: ST_TO_ADDR
// end ; 4 :
7688: GO 7733
7690: LD_INT 4
7692: DOUBLE
7693: EQUAL
7694: IFTRUE 7698
7696: GO 7732
7698: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
7699: LD_ADDR_OWVAR 47
7703: PUSH
7704: LD_STRING #Ru03-3
7706: PUSH
7707: LD_EXP 22
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
7716: LD_ADDR_EXP 22
7720: PUSH
7721: LD_EXP 22
7725: PUSH
7726: LD_INT 35
7728: MINUS
7729: ST_TO_ADDR
// end ; end ;
7730: GO 7733
7732: POP
// if ticks = convoyTime [ 1 ] then
7733: LD_EXP 86
7737: PUSH
7738: LD_EXP 87
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: EQUAL
7747: IFFALSE 8006
// begin SayRadio ( Bukov , bukovMsg [ 1 ] ) ;
7749: LD_EXP 66
7753: PPUSH
7754: LD_EXP 83
7758: PUSH
7759: LD_INT 1
7761: ARRAY
7762: PPUSH
7763: CALL_OW 94
// if bukovMsg [ 1 ] = D3a-RSol1-1 then
7767: LD_EXP 83
7771: PUSH
7772: LD_INT 1
7774: ARRAY
7775: PUSH
7776: LD_STRING D3a-RSol1-1
7778: EQUAL
7779: IFFALSE 7883
// begin SayRadio ( Burlak , D3a-Bur-1 ) ;
7781: LD_EXP 43
7785: PPUSH
7786: LD_STRING D3a-Bur-1
7788: PPUSH
7789: CALL_OW 94
// if IsOk ( Gnyevko ) then
7793: LD_EXP 44
7797: PPUSH
7798: CALL_OW 302
7802: IFFALSE 7816
// Say ( Gnyevko , D3b-Gny-1 ) ;
7804: LD_EXP 44
7808: PPUSH
7809: LD_STRING D3b-Gny-1
7811: PPUSH
7812: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
7816: LD_EXP 43
7820: PPUSH
7821: LD_STRING D3b-Bur-1
7823: PPUSH
7824: CALL_OW 88
// if IsOK ( Kovalyuk ) then
7828: LD_EXP 46
7832: PPUSH
7833: CALL_OW 302
7837: IFFALSE 7851
// Say ( Kovalyuk , D3b-Kov-1 ) ;
7839: LD_EXP 46
7843: PPUSH
7844: LD_STRING D3b-Kov-1
7846: PPUSH
7847: CALL_OW 88
// SayRadio ( Bukov , D3b-Rsol1-2 ) ;
7851: LD_EXP 66
7855: PPUSH
7856: LD_STRING D3b-Rsol1-2
7858: PPUSH
7859: CALL_OW 94
// bukovMsg := bukovMsg diff bukovMsg [ 1 ] ;
7863: LD_ADDR_EXP 83
7867: PUSH
7868: LD_EXP 83
7872: PUSH
7873: LD_EXP 83
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: DIFF
7882: ST_TO_ADDR
// end ; PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , AmTroopsSpawn ) ;
7883: LD_EXP 75
7887: PUSH
7888: LD_INT 1
7890: ARRAY
7891: PUSH
7892: LD_INT 1
7894: ARRAY
7895: PPUSH
7896: LD_EXP 75
7900: PUSH
7901: LD_INT 1
7903: ARRAY
7904: PUSH
7905: LD_INT 2
7907: ARRAY
7908: PPUSH
7909: LD_EXP 75
7913: PUSH
7914: LD_INT 1
7916: ARRAY
7917: PUSH
7918: LD_INT 3
7920: ARRAY
7921: PPUSH
7922: LD_EXP 75
7926: PUSH
7927: LD_INT 1
7929: ARRAY
7930: PUSH
7931: LD_INT 4
7933: ARRAY
7934: PPUSH
7935: LD_EXP 75
7939: PUSH
7940: LD_INT 1
7942: ARRAY
7943: PUSH
7944: LD_INT 5
7946: ARRAY
7947: PPUSH
7948: LD_INT 6
7950: PPUSH
7951: CALL 4417 0 6
// PrepareAttackOnRus ( ) ;
7955: CALL 5229 0 0
// wait ( 0 0$1 ) ;
7959: LD_INT 35
7961: PPUSH
7962: CALL_OW 67
// amConvoyGroups := amConvoyGroups diff amConvoyGroups [ 1 ] ;
7966: LD_ADDR_EXP 75
7970: PUSH
7971: LD_EXP 75
7975: PUSH
7976: LD_EXP 75
7980: PUSH
7981: LD_INT 1
7983: ARRAY
7984: DIFF
7985: ST_TO_ADDR
// convoyTime := convoyTime diff convoyTime [ 1 ] ;
7986: LD_ADDR_EXP 87
7990: PUSH
7991: LD_EXP 87
7995: PUSH
7996: LD_EXP 87
8000: PUSH
8001: LD_INT 1
8003: ARRAY
8004: DIFF
8005: ST_TO_ADDR
// end ; end ;
8006: PPOPN 3
8008: END
// every 0 0$1 trigger UnitFilter ( amVehs , [ f_not , [ f_lives , 700 ] ] ) or UnitFilter ( amIntroUnits , [ f_not , [ f_lives , 700 ] ] ) do var i ;
8009: LD_EXP 79
8013: PPUSH
8014: LD_INT 3
8016: PUSH
8017: LD_INT 24
8019: PUSH
8020: LD_INT 700
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PPUSH
8031: CALL_OW 72
8035: PUSH
8036: LD_EXP 74
8040: PPUSH
8041: LD_INT 3
8043: PUSH
8044: LD_INT 24
8046: PUSH
8047: LD_INT 700
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PPUSH
8058: CALL_OW 72
8062: OR
8063: IFFALSE 8194
8065: GO 8067
8067: DISABLE
8068: LD_INT 0
8070: PPUSH
// begin enable ;
8071: ENABLE
// for i := 1 to amVehs do
8072: LD_ADDR_VAR 0 1
8076: PUSH
8077: DOUBLE
8078: LD_INT 1
8080: DEC
8081: ST_TO_ADDR
8082: LD_EXP 79
8086: PUSH
8087: FOR_TO
8088: IFFALSE 8131
// begin if GetLives ( amVehs [ i ] ) <= 700 then
8090: LD_EXP 79
8094: PUSH
8095: LD_VAR 0 1
8099: ARRAY
8100: PPUSH
8101: CALL_OW 256
8105: PUSH
8106: LD_INT 700
8108: LESSEQUAL
8109: IFFALSE 8129
// ComMoveToArea ( amVehs [ i ] , amRetreatArea ) ;
8111: LD_EXP 79
8115: PUSH
8116: LD_VAR 0 1
8120: ARRAY
8121: PPUSH
8122: LD_INT 10
8124: PPUSH
8125: CALL_OW 113
// end ;
8129: GO 8087
8131: POP
8132: POP
// for i := 1 to amIntroUnits do
8133: LD_ADDR_VAR 0 1
8137: PUSH
8138: DOUBLE
8139: LD_INT 1
8141: DEC
8142: ST_TO_ADDR
8143: LD_EXP 74
8147: PUSH
8148: FOR_TO
8149: IFFALSE 8192
// begin if GetLives ( amIntroUnits [ i ] ) <= 700 then
8151: LD_EXP 74
8155: PUSH
8156: LD_VAR 0 1
8160: ARRAY
8161: PPUSH
8162: CALL_OW 256
8166: PUSH
8167: LD_INT 700
8169: LESSEQUAL
8170: IFFALSE 8190
// ComMoveToArea ( amIntroUnits [ i ] , amRetreatArea ) ;
8172: LD_EXP 74
8176: PUSH
8177: LD_VAR 0 1
8181: ARRAY
8182: PPUSH
8183: LD_INT 10
8185: PPUSH
8186: CALL_OW 113
// end ;
8190: GO 8148
8192: POP
8193: POP
// end ;
8194: PPOPN 1
8196: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
8197: LD_EXP 18
8201: NOT
8202: IFFALSE 8410
8204: GO 8206
8206: DISABLE
8207: LD_INT 0
8209: PPUSH
// begin enable ;
8210: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
8211: LD_ADDR_VAR 0 1
8215: PUSH
8216: LD_INT 22
8218: PUSH
8219: LD_INT 3
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PUSH
8226: LD_INT 21
8228: PUSH
8229: LD_INT 2
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PUSH
8236: LD_INT 23
8238: PUSH
8239: LD_INT 3
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_INT 2
8248: PUSH
8249: LD_INT 31
8251: PUSH
8252: LD_INT 21
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 31
8261: PUSH
8262: LD_INT 23
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: PPUSH
8280: CALL_OW 69
8284: PUSH
8285: FOR_IN
8286: IFFALSE 8408
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
8288: LD_VAR 0 1
8292: PPUSH
8293: LD_INT 48
8295: PPUSH
8296: LD_INT 81
8298: PPUSH
8299: CALL_OW 297
8303: PUSH
8304: LD_INT 7
8306: LESS
8307: IFFALSE 8406
// begin dialog_track = true ;
8309: LD_ADDR_EXP 18
8313: PUSH
8314: LD_INT 1
8316: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
8317: LD_INT 48
8319: PPUSH
8320: LD_INT 81
8322: PPUSH
8323: CALL_OW 86
// DialogueOn ;
8327: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8331: LD_EXP 43
8335: PPUSH
8336: LD_STRING D5a-Bur-1
8338: PPUSH
8339: CALL_OW 88
// DialogueOff ;
8343: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
8347: LD_INT 82
8349: PPUSH
8350: LD_INT 3
8352: PPUSH
8353: CALL_OW 321
8357: PUSH
8358: LD_INT 0
8360: EQUAL
8361: IFFALSE 8376
// SetTech ( 82 , 3 , state_enabled ) ;
8363: LD_INT 82
8365: PPUSH
8366: LD_INT 3
8368: PPUSH
8369: LD_INT 1
8371: PPUSH
8372: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
8376: LD_INT 84
8378: PPUSH
8379: LD_INT 3
8381: PPUSH
8382: LD_INT 1
8384: PPUSH
8385: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
8389: LD_INT 16
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: LD_INT 1
8397: PPUSH
8398: CALL_OW 324
// exit ;
8402: POP
8403: POP
8404: GO 8410
// end ;
8406: GO 8285
8408: POP
8409: POP
// end ;
8410: PPOPN 1
8412: END
// every 5 5$30 do
8413: GO 8415
8415: DISABLE
// begin PrepareScholtze ;
8416: CALL 2394 0 0
// wait ( 0 0$2 ) ;
8420: LD_INT 70
8422: PPUSH
8423: CALL_OW 67
// DialogueOn ;
8427: CALL_OW 6
// SayNoFaceRadio ( Scholtze2 , D4-Sch-1 ) ;
8431: LD_EXP 68
8435: PPUSH
8436: LD_STRING D4-Sch-1
8438: PPUSH
8439: CALL 50976 0 2
// SayRadio ( Burlak , D4-Bur-1 ) ;
8443: LD_EXP 43
8447: PPUSH
8448: LD_STRING D4-Bur-1
8450: PPUSH
8451: CALL_OW 94
// DialogueOff ;
8455: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
8459: LD_STRING M4
8461: PPUSH
8462: CALL_OW 337
// ComHold ( Scholtze ) ;
8466: LD_EXP 67
8470: PPUSH
8471: CALL_OW 140
// scholtzeSpawned = true ;
8475: LD_ADDR_EXP 14
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// end ;
8483: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
8484: LD_INT 3
8486: PPUSH
8487: LD_EXP 67
8491: PPUSH
8492: CALL_OW 292
8496: PUSH
8497: LD_EXP 14
8501: AND
8502: PUSH
8503: LD_EXP 15
8507: NOT
8508: AND
8509: IFFALSE 8675
8511: GO 8513
8513: DISABLE
// begin scholtzeSaved = true ;
8514: LD_ADDR_EXP 15
8518: PUSH
8519: LD_INT 1
8521: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
8522: LD_EXP 67
8526: PPUSH
8527: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
8531: LD_EXP 67
8535: PPUSH
8536: LD_INT 3
8538: PPUSH
8539: CALL_OW 235
// DialogueOn ;
8543: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
8547: LD_EXP 67
8551: PPUSH
8552: LD_STRING D4a-Sch-1
8554: PPUSH
8555: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
8559: LD_EXP 43
8563: PPUSH
8564: LD_STRING D4a-Bur-1
8566: PPUSH
8567: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
8571: LD_EXP 67
8575: PPUSH
8576: LD_STRING D4a-Sch-2
8578: PPUSH
8579: CALL_OW 88
// DialogueOff ;
8583: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
8587: LD_STRING MScholtzeOut
8589: PPUSH
8590: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
8594: LD_INT 49
8596: PPUSH
8597: LD_INT 3
8599: PPUSH
8600: LD_INT 1
8602: PPUSH
8603: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
8607: LD_INT 51
8609: PPUSH
8610: LD_INT 3
8612: PPUSH
8613: LD_INT 1
8615: PPUSH
8616: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
8620: LD_INT 82
8622: PPUSH
8623: LD_INT 3
8625: PPUSH
8626: CALL_OW 321
8630: PUSH
8631: LD_INT 0
8633: EQUAL
8634: IFFALSE 8649
// SetTech ( 82 , 3 , state_enabled ) ;
8636: LD_INT 82
8638: PPUSH
8639: LD_INT 3
8641: PPUSH
8642: LD_INT 1
8644: PPUSH
8645: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
8649: LD_INT 83
8651: PPUSH
8652: LD_INT 3
8654: PPUSH
8655: LD_INT 1
8657: PPUSH
8658: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
8662: LD_INT 19
8664: PPUSH
8665: LD_INT 3
8667: PPUSH
8668: LD_INT 1
8670: PPUSH
8671: CALL_OW 324
// end ;
8675: END
// every 0 0$30 do
8676: GO 8678
8678: DISABLE
// begin enable ;
8679: ENABLE
// CreateCratesAnywhere ( rand ( 3 , 5 ) , true ) ;
8680: LD_INT 3
8682: PPUSH
8683: LD_INT 5
8685: PPUSH
8686: CALL_OW 12
8690: PPUSH
8691: LD_INT 1
8693: PPUSH
8694: CALL_OW 57
// end ;
8698: END
// every 1 trigger not meetNearOmicronBase do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
8699: LD_EXP 27
8703: NOT
8704: IFFALSE 8976
8706: GO 8708
8708: DISABLE
8709: LD_INT 0
8711: PPUSH
8712: PPUSH
8713: PPUSH
8714: PPUSH
8715: PPUSH
8716: PPUSH
8717: PPUSH
// begin enable ;
8718: ENABLE
// for unit in FilterUnitsInArea ( areaOmicron , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
8719: LD_ADDR_VAR 0 2
8723: PUSH
8724: LD_INT 8
8726: PPUSH
8727: LD_INT 22
8729: PUSH
8730: LD_INT 1
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: LD_INT 2
8739: PUSH
8740: LD_INT 21
8742: PUSH
8743: LD_INT 1
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 21
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: LD_INT 21
8762: PUSH
8763: LD_INT 3
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PPUSH
8780: CALL_OW 70
8784: PUSH
8785: FOR_IN
8786: IFFALSE 8974
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
8788: LD_VAR 0 2
8792: PPUSH
8793: LD_INT 22
8795: PUSH
8796: LD_INT 3
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 2
8805: PUSH
8806: LD_INT 21
8808: PUSH
8809: LD_INT 1
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 21
8818: PUSH
8819: LD_INT 2
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: LIST
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PPUSH
8835: CALL_OW 69
8839: PPUSH
8840: LD_VAR 0 2
8844: PPUSH
8845: CALL_OW 74
8849: PPUSH
8850: CALL_OW 296
8854: PUSH
8855: LD_INT 17
8857: LESS
8858: IFFALSE 8972
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 114 , 98 ) ;
8860: LD_INT 22
8862: PUSH
8863: LD_INT 3
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 2
8872: PUSH
8873: LD_INT 21
8875: PUSH
8876: LD_INT 1
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 21
8885: PUSH
8886: LD_INT 2
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: LIST
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PPUSH
8902: CALL_OW 69
8906: PPUSH
8907: LD_VAR 0 2
8911: PPUSH
8912: CALL_OW 74
8916: PPUSH
8917: LD_INT 114
8919: PPUSH
8920: LD_INT 98
8922: PPUSH
8923: CALL_OW 111
// if not dialog_stop then
8927: LD_EXP 19
8931: NOT
8932: IFFALSE 8972
// begin if not IsOK ( Gnyevko ) then
8934: LD_EXP 44
8938: PPUSH
8939: CALL_OW 302
8943: NOT
8944: IFFALSE 8960
// SayRadio ( Kurin , D11-Kur-1 ) else
8946: LD_EXP 55
8950: PPUSH
8951: LD_STRING D11-Kur-1
8953: PPUSH
8954: CALL_OW 94
8958: GO 8972
// Say ( Gnyevko , D11-Gny-1 ) ;
8960: LD_EXP 44
8964: PPUSH
8965: LD_STRING D11-Gny-1
8967: PPUSH
8968: CALL_OW 88
// end ; end ;
8972: GO 8785
8974: POP
8975: POP
// end ;
8976: PPOPN 7
8978: END
// every 1 trigger SeeArea ( 3 , areaKirov ) >= 6 and counterEnable do var unit ;
8979: LD_INT 3
8981: PPUSH
8982: LD_INT 13
8984: PPUSH
8985: CALL_OW 294
8989: PUSH
8990: LD_INT 6
8992: GREATEREQUAL
8993: PUSH
8994: LD_EXP 84
8998: AND
8999: IFFALSE 9170
9001: GO 9003
9003: DISABLE
9004: LD_INT 0
9006: PPUSH
// begin enable ;
9007: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9008: LD_ADDR_VAR 0 1
9012: PUSH
9013: LD_INT 22
9015: PUSH
9016: LD_INT 3
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 2
9025: PUSH
9026: LD_INT 21
9028: PUSH
9029: LD_INT 1
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 21
9038: PUSH
9039: LD_INT 2
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: LIST
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 69
9059: PUSH
9060: FOR_IN
9061: IFFALSE 9168
// if IsInArea ( unit , areaKirov ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
9063: LD_VAR 0 1
9067: PPUSH
9068: LD_INT 13
9070: PPUSH
9071: CALL_OW 308
9075: PUSH
9076: LD_VAR 0 1
9080: PPUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 1
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 72
9095: PUSH
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 313
9105: OR
9106: AND
9107: IFFALSE 9166
// begin ComMoveXY ( unit , 120 , 98 ) ;
9109: LD_VAR 0 1
9113: PPUSH
9114: LD_INT 120
9116: PPUSH
9117: LD_INT 98
9119: PPUSH
9120: CALL_OW 111
// if not dialog_stop then
9124: LD_EXP 19
9128: NOT
9129: IFFALSE 9166
// begin dialog_stop = true ;
9131: LD_ADDR_EXP 19
9135: PUSH
9136: LD_INT 1
9138: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
9139: LD_EXP 55
9143: PPUSH
9144: LD_STRING D12-Kur-1
9146: PPUSH
9147: CALL_OW 88
// wait ( 0 0$5 ) ;
9151: LD_INT 175
9153: PPUSH
9154: CALL_OW 67
// dialog_stop = false ;
9158: LD_ADDR_EXP 19
9162: PUSH
9163: LD_INT 0
9165: ST_TO_ADDR
// end ; end ;
9166: GO 9060
9168: POP
9169: POP
// end ;
9170: PPOPN 1
9172: END
// every 0 0$1 trigger IsSelected ( Kurin ) do
9173: LD_EXP 55
9177: PPUSH
9178: CALL_OW 306
9182: IFFALSE 9374
9184: GO 9186
9186: DISABLE
// begin if true then
9187: LD_INT 1
9189: IFFALSE 9373
// begin case Query ( QReadyToAttack ) of 1 :
9191: LD_STRING QReadyToAttack
9193: PPUSH
9194: CALL_OW 97
9198: PUSH
9199: LD_INT 1
9201: DOUBLE
9202: EQUAL
9203: IFTRUE 9207
9205: GO 9269
9207: POP
// begin DeselectUnits ( Kurin ) ;
9208: LD_EXP 55
9212: PPUSH
9213: CALL_OW 491
// SelectUnits ( Burlak ) ;
9217: LD_EXP 43
9221: PPUSH
9222: CALL_OW 490
// Say ( Burlak , D6a-Bur-1 ) ;
9226: LD_EXP 43
9230: PPUSH
9231: LD_STRING D6a-Bur-1
9233: PPUSH
9234: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
9238: LD_EXP 55
9242: PPUSH
9243: LD_STRING D6a-Kur-1
9245: PPUSH
9246: CALL_OW 94
// meetNearOmicronBase = true ;
9250: LD_ADDR_EXP 27
9254: PUSH
9255: LD_INT 1
9257: ST_TO_ADDR
// kurinCheckVehicles = true ;
9258: LD_ADDR_EXP 26
9262: PUSH
9263: LD_INT 1
9265: ST_TO_ADDR
// disable ;
9266: DISABLE
// end ; 2 :
9267: GO 9373
9269: LD_INT 2
9271: DOUBLE
9272: EQUAL
9273: IFTRUE 9277
9275: GO 9343
9277: POP
// begin DeselectUnits ( Kurin ) ;
9278: LD_EXP 55
9282: PPUSH
9283: CALL_OW 491
// SelectUnits ( Burlak ) ;
9287: LD_EXP 43
9291: PPUSH
9292: CALL_OW 490
// Say ( Burlak , D6b-Bur-1 ) ;
9296: LD_EXP 43
9300: PPUSH
9301: LD_STRING D6b-Bur-1
9303: PPUSH
9304: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
9308: LD_EXP 55
9312: PPUSH
9313: LD_STRING D6b-Kur-1
9315: PPUSH
9316: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
9320: LD_EXP 43
9324: PPUSH
9325: LD_STRING D6b-Bur-2
9327: PPUSH
9328: CALL_OW 88
// meetNearOmicronBase = true ;
9332: LD_ADDR_EXP 27
9336: PUSH
9337: LD_INT 1
9339: ST_TO_ADDR
// disable ;
9340: DISABLE
// end ; 3 :
9341: GO 9373
9343: LD_INT 3
9345: DOUBLE
9346: EQUAL
9347: IFTRUE 9351
9349: GO 9372
9351: POP
// begin DeselectUnits ( Kurin ) ;
9352: LD_EXP 55
9356: PPUSH
9357: CALL_OW 491
// SelectUnits ( Burlak ) ;
9361: LD_EXP 43
9365: PPUSH
9366: CALL_OW 490
// end ; end ;
9370: GO 9373
9372: POP
// end ; enable ;
9373: ENABLE
// end ;
9374: END
// export enoughVehsForKirov ; every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
9375: LD_EXP 88
9379: PUSH
9380: LD_INT 35
9382: LESS
9383: IFFALSE 9611
9385: GO 9387
9387: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
9388: LD_EXP 55
9392: PPUSH
9393: CALL_OW 87
// InGameOn ;
9397: CALL_OW 8
// DialogueOn ;
9401: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
9405: LD_EXP 55
9409: PPUSH
9410: LD_STRING D5-Kur-1
9412: PPUSH
9413: CALL_OW 94
// case Query ( QVehicles ) of 1 :
9417: LD_STRING QVehicles
9419: PPUSH
9420: CALL_OW 97
9424: PUSH
9425: LD_INT 1
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9476
9433: POP
// begin SayRadio ( Burlak , D6a-Bur-1 ) ;
9434: LD_EXP 43
9438: PPUSH
9439: LD_STRING D6a-Bur-1
9441: PPUSH
9442: CALL_OW 94
// SayRadio ( Kurin , D6a-Kur-1 ) ;
9446: LD_EXP 55
9450: PPUSH
9451: LD_STRING D6a-Kur-1
9453: PPUSH
9454: CALL_OW 94
// meetNearOmicronBase = true ;
9458: LD_ADDR_EXP 27
9462: PUSH
9463: LD_INT 1
9465: ST_TO_ADDR
// kurinCheckVehicles = true ;
9466: LD_ADDR_EXP 26
9470: PUSH
9471: LD_INT 1
9473: ST_TO_ADDR
// end ; 2 :
9474: GO 9603
9476: LD_INT 2
9478: DOUBLE
9479: EQUAL
9480: IFTRUE 9484
9482: GO 9531
9484: POP
// begin SayRadio ( Burlak , D6b-Bur-1 ) ;
9485: LD_EXP 43
9489: PPUSH
9490: LD_STRING D6b-Bur-1
9492: PPUSH
9493: CALL_OW 94
// SayRadio ( Kurin , D6b-Kur-1 ) ;
9497: LD_EXP 55
9501: PPUSH
9502: LD_STRING D6b-Kur-1
9504: PPUSH
9505: CALL_OW 94
// SayRadio ( Burlak , D6b-Bur-2 ) ;
9509: LD_EXP 43
9513: PPUSH
9514: LD_STRING D6b-Bur-2
9516: PPUSH
9517: CALL_OW 94
// meetNearOmicronBase = true ;
9521: LD_ADDR_EXP 27
9525: PUSH
9526: LD_INT 1
9528: ST_TO_ADDR
// end ; 3 :
9529: GO 9603
9531: LD_INT 3
9533: DOUBLE
9534: EQUAL
9535: IFTRUE 9539
9537: GO 9602
9539: POP
// begin SayRadio ( Burlak , D6c-Bur-1 ) ;
9540: LD_EXP 43
9544: PPUSH
9545: LD_STRING D6c-Bur-1
9547: PPUSH
9548: CALL_OW 94
// SayRadio ( Kurin , D6c-Kur-1 ) ;
9552: LD_EXP 55
9556: PPUSH
9557: LD_STRING D6c-Kur-1
9559: PPUSH
9560: CALL_OW 94
// SayRadio ( Burlak , D6c-Bur-2 ) ;
9564: LD_EXP 43
9568: PPUSH
9569: LD_STRING D6c-Bur-2
9571: PPUSH
9572: CALL_OW 94
// kurinGiveMoreTime = true ;
9576: LD_ADDR_EXP 21
9580: PUSH
9581: LD_INT 1
9583: ST_TO_ADDR
// kurinOpinion = 0 ;
9584: LD_ADDR_EXP 10
9588: PUSH
9589: LD_INT 0
9591: ST_TO_ADDR
// counterIndex = 4 ;
9592: LD_ADDR_EXP 85
9596: PUSH
9597: LD_INT 4
9599: ST_TO_ADDR
// end ; end ;
9600: GO 9603
9602: POP
// InGameOff ;
9603: CALL_OW 9
// DialogueOff ;
9607: CALL_OW 7
// end ;
9611: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
9612: LD_EXP 22
9616: PUSH
9617: LD_INT 35
9619: LESS
9620: PUSH
9621: LD_EXP 21
9625: AND
9626: IFFALSE 9659
9628: GO 9630
9630: DISABLE
// begin DialogueOn ;
9631: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
9635: LD_EXP 55
9639: PPUSH
9640: LD_STRING D6c-Kur-2
9642: PPUSH
9643: CALL_OW 94
// DialogueOff ;
9647: CALL_OW 7
// meetNearOmicronBase = true ;
9651: LD_ADDR_EXP 27
9655: PUSH
9656: LD_INT 1
9658: ST_TO_ADDR
// end ;
9659: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs , beriaUnits , freeVehs ;
9660: LD_EXP 27
9664: IFFALSE 10163
9666: GO 9668
9668: DISABLE
9669: LD_INT 0
9671: PPUSH
9672: PPUSH
9673: PPUSH
9674: PPUSH
9675: PPUSH
9676: PPUSH
9677: PPUSH
// begin mechs = [ ] ;
9678: LD_ADDR_VAR 0 3
9682: PUSH
9683: EMPTY
9684: ST_TO_ADDR
// vehs = [ ] ;
9685: LD_ADDR_VAR 0 4
9689: PUSH
9690: EMPTY
9691: ST_TO_ADDR
// freeVehs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) - FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
9692: LD_ADDR_VAR 0 7
9696: PUSH
9697: LD_INT 22
9699: PUSH
9700: LD_INT 3
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 21
9709: PUSH
9710: LD_INT 2
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 23
9719: PUSH
9720: LD_INT 3
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 3
9729: PUSH
9730: LD_INT 34
9732: PUSH
9733: LD_INT 51
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: PUSH
9755: LD_INT 22
9757: PUSH
9758: LD_INT 3
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 21
9767: PUSH
9768: LD_INT 1
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PPUSH
9779: CALL_OW 69
9783: MINUS
9784: ST_TO_ADDR
// haveVehs = 0 ;
9785: LD_ADDR_VAR 0 5
9789: PUSH
9790: LD_INT 0
9792: ST_TO_ADDR
// uc_side = 6 ;
9793: LD_ADDR_OWVAR 20
9797: PUSH
9798: LD_INT 6
9800: ST_TO_ADDR
// uc_nation = 3 ;
9801: LD_ADDR_OWVAR 21
9805: PUSH
9806: LD_INT 3
9808: ST_TO_ADDR
// for i := 1 to freeVehs do
9809: LD_ADDR_VAR 0 1
9813: PUSH
9814: DOUBLE
9815: LD_INT 1
9817: DEC
9818: ST_TO_ADDR
9819: LD_VAR 0 7
9823: PUSH
9824: FOR_TO
9825: IFFALSE 9896
// begin PrepareMechanic ( false , 2 ) ;
9827: LD_INT 0
9829: PPUSH
9830: LD_INT 2
9832: PPUSH
9833: CALL_OW 383
// mech = CreateHuman ;
9837: LD_ADDR_VAR 0 2
9841: PUSH
9842: CALL_OW 44
9846: ST_TO_ADDR
// mechs = mechs ^ mech ;
9847: LD_ADDR_VAR 0 3
9851: PUSH
9852: LD_VAR 0 3
9856: PUSH
9857: LD_VAR 0 2
9861: ADD
9862: ST_TO_ADDR
// PlaceUnitArea ( mech , kirovSpawn , false ) ;
9863: LD_VAR 0 2
9867: PPUSH
9868: LD_INT 4
9870: PPUSH
9871: LD_INT 0
9873: PPUSH
9874: CALL_OW 49
// ComExitBuilding ( mech ) ;
9878: LD_VAR 0 2
9882: PPUSH
9883: CALL_OW 122
// wait ( 0 0$1 ) ;
9887: LD_INT 35
9889: PPUSH
9890: CALL_OW 67
// end ;
9894: GO 9824
9896: POP
9897: POP
// if enoughVehsForKirov and freeVehs > 0 then
9898: LD_EXP 91
9902: PUSH
9903: LD_VAR 0 7
9907: PUSH
9908: LD_INT 0
9910: GREATER
9911: AND
9912: IFFALSE 10130
// begin vehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
9914: LD_ADDR_VAR 0 4
9918: PUSH
9919: LD_INT 22
9921: PUSH
9922: LD_INT 3
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PUSH
9929: LD_INT 21
9931: PUSH
9932: LD_INT 2
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 23
9941: PUSH
9942: LD_INT 3
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 3
9951: PUSH
9952: LD_INT 34
9954: PUSH
9955: LD_INT 51
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 3
9968: PUSH
9969: LD_INT 59
9971: PUSH
9972: EMPTY
9973: LIST
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 69
9990: ST_TO_ADDR
// for i := 1 to freeVehs do
9991: LD_ADDR_VAR 0 1
9995: PUSH
9996: DOUBLE
9997: LD_INT 1
9999: DEC
10000: ST_TO_ADDR
10001: LD_VAR 0 7
10005: PUSH
10006: FOR_TO
10007: IFFALSE 10033
// kirovAttackVehicles = kirovAttackVehicles ^ vehs [ i ] ;
10009: LD_ADDR_EXP 90
10013: PUSH
10014: LD_EXP 90
10018: PUSH
10019: LD_VAR 0 4
10023: PUSH
10024: LD_VAR 0 1
10028: ARRAY
10029: ADD
10030: ST_TO_ADDR
10031: GO 10006
10033: POP
10034: POP
// SetSide ( kirovAttackVehicles , 6 ) ;
10035: LD_EXP 90
10039: PPUSH
10040: LD_INT 6
10042: PPUSH
10043: CALL_OW 235
// produceMoreVehicles = true ;
10047: LD_ADDR_EXP 24
10051: PUSH
10052: LD_INT 1
10054: ST_TO_ADDR
// for i := 1 to freeVehs do
10055: LD_ADDR_VAR 0 1
10059: PUSH
10060: DOUBLE
10061: LD_INT 1
10063: DEC
10064: ST_TO_ADDR
10065: LD_VAR 0 7
10069: PUSH
10070: FOR_TO
10071: IFFALSE 10101
// AddComEnterUnit ( mechs [ i ] , kirovAttackVehicles [ i ] ) ;
10073: LD_VAR 0 3
10077: PUSH
10078: LD_VAR 0 1
10082: ARRAY
10083: PPUSH
10084: LD_EXP 90
10088: PUSH
10089: LD_VAR 0 1
10093: ARRAY
10094: PPUSH
10095: CALL_OW 180
10099: GO 10070
10101: POP
10102: POP
// if kurinCheckVehicles and not kurinOpinion = 0 then
10103: LD_EXP 26
10107: PUSH
10108: LD_EXP 10
10112: PUSH
10113: LD_INT 0
10115: EQUAL
10116: NOT
10117: AND
10118: IFFALSE 10128
// kurinOpinion = 1 ;
10120: LD_ADDR_EXP 10
10124: PUSH
10125: LD_INT 1
10127: ST_TO_ADDR
// end else
10128: GO 10163
// begin if kurinCheckVehicles then
10130: LD_EXP 26
10134: IFFALSE 10163
// begin DialogueOn ;
10136: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
10140: LD_EXP 55
10144: PPUSH
10145: LD_STRING D6d-Kur-1
10147: PPUSH
10148: CALL_OW 94
// DialogueOff ;
10152: CALL_OW 7
// YouLost ( Vehicles ) ;
10156: LD_STRING Vehicles
10158: PPUSH
10159: CALL_OW 104
// end ; end ; end ; end_of_file
10163: PPOPN 7
10165: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10166: LD_INT 0
10168: PPUSH
// ar_miner := 81 ;
10169: LD_ADDR_EXP 99
10173: PUSH
10174: LD_INT 81
10176: ST_TO_ADDR
// ar_crane := 88 ;
10177: LD_ADDR_EXP 98
10181: PUSH
10182: LD_INT 88
10184: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10185: LD_ADDR_EXP 93
10189: PUSH
10190: LD_INT 89
10192: ST_TO_ADDR
// us_hack := 99 ;
10193: LD_ADDR_EXP 94
10197: PUSH
10198: LD_INT 99
10200: ST_TO_ADDR
// us_artillery := 97 ;
10201: LD_ADDR_EXP 95
10205: PUSH
10206: LD_INT 97
10208: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10209: LD_ADDR_EXP 96
10213: PUSH
10214: LD_INT 91
10216: ST_TO_ADDR
// ar_mortar := 92 ;
10217: LD_ADDR_EXP 97
10221: PUSH
10222: LD_INT 92
10224: ST_TO_ADDR
// ru_flamethrower := 93 ;
10225: LD_ADDR_EXP 100
10229: PUSH
10230: LD_INT 93
10232: ST_TO_ADDR
// ru_radar := 98 ;
10233: LD_ADDR_EXP 92
10237: PUSH
10238: LD_INT 98
10240: ST_TO_ADDR
// tech_Artillery := 80 ;
10241: LD_ADDR_EXP 101
10245: PUSH
10246: LD_INT 80
10248: ST_TO_ADDR
// tech_RadMat := 81 ;
10249: LD_ADDR_EXP 102
10253: PUSH
10254: LD_INT 81
10256: ST_TO_ADDR
// tech_BasicTools := 82 ;
10257: LD_ADDR_EXP 103
10261: PUSH
10262: LD_INT 82
10264: ST_TO_ADDR
// tech_Cargo := 83 ;
10265: LD_ADDR_EXP 104
10269: PUSH
10270: LD_INT 83
10272: ST_TO_ADDR
// tech_Track := 84 ;
10273: LD_ADDR_EXP 105
10277: PUSH
10278: LD_INT 84
10280: ST_TO_ADDR
// tech_Crane := 85 ;
10281: LD_ADDR_EXP 106
10285: PUSH
10286: LD_INT 85
10288: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10289: LD_ADDR_EXP 107
10293: PUSH
10294: LD_INT 86
10296: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10297: LD_ADDR_EXP 108
10301: PUSH
10302: LD_INT 87
10304: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10305: LD_ADDR_EXP 109
10309: PUSH
10310: LD_INT 88
10312: ST_TO_ADDR
// class_mastodont := 31 ;
10313: LD_ADDR_EXP 110
10317: PUSH
10318: LD_INT 31
10320: ST_TO_ADDR
// class_horse := 21 ;
10321: LD_ADDR_EXP 111
10325: PUSH
10326: LD_INT 21
10328: ST_TO_ADDR
// end ;
10329: LD_VAR 0 1
10333: RET
// every 1 do
10334: GO 10336
10336: DISABLE
// InitGlobalVariables ; end_of_file
10337: CALL 10166 0 0
10341: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10342: LD_INT 0
10344: PPUSH
10345: PPUSH
// if exist_mode then
10346: LD_VAR 0 2
10350: IFFALSE 10375
// unit := CreateCharacter ( prefix & ident ) else
10352: LD_ADDR_VAR 0 5
10356: PUSH
10357: LD_VAR 0 3
10361: PUSH
10362: LD_VAR 0 1
10366: STR
10367: PPUSH
10368: CALL_OW 34
10372: ST_TO_ADDR
10373: GO 10390
// unit := NewCharacter ( ident ) ;
10375: LD_ADDR_VAR 0 5
10379: PUSH
10380: LD_VAR 0 1
10384: PPUSH
10385: CALL_OW 25
10389: ST_TO_ADDR
// result := unit ;
10390: LD_ADDR_VAR 0 4
10394: PUSH
10395: LD_VAR 0 5
10399: ST_TO_ADDR
// end ;
10400: LD_VAR 0 4
10404: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10405: LD_INT 0
10407: PPUSH
10408: PPUSH
// if not side or not nation then
10409: LD_VAR 0 1
10413: NOT
10414: PUSH
10415: LD_VAR 0 2
10419: NOT
10420: OR
10421: IFFALSE 10425
// exit ;
10423: GO 11193
// case nation of nation_american :
10425: LD_VAR 0 2
10429: PUSH
10430: LD_INT 1
10432: DOUBLE
10433: EQUAL
10434: IFTRUE 10438
10436: GO 10652
10438: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10439: LD_ADDR_VAR 0 4
10443: PUSH
10444: LD_INT 35
10446: PUSH
10447: LD_INT 45
10449: PUSH
10450: LD_INT 46
10452: PUSH
10453: LD_INT 47
10455: PUSH
10456: LD_INT 82
10458: PUSH
10459: LD_INT 83
10461: PUSH
10462: LD_INT 84
10464: PUSH
10465: LD_INT 85
10467: PUSH
10468: LD_INT 86
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: LD_INT 2
10476: PUSH
10477: LD_INT 6
10479: PUSH
10480: LD_INT 15
10482: PUSH
10483: LD_INT 16
10485: PUSH
10486: LD_INT 7
10488: PUSH
10489: LD_INT 12
10491: PUSH
10492: LD_INT 13
10494: PUSH
10495: LD_INT 10
10497: PUSH
10498: LD_INT 14
10500: PUSH
10501: LD_INT 20
10503: PUSH
10504: LD_INT 21
10506: PUSH
10507: LD_INT 22
10509: PUSH
10510: LD_INT 25
10512: PUSH
10513: LD_INT 32
10515: PUSH
10516: LD_INT 27
10518: PUSH
10519: LD_INT 36
10521: PUSH
10522: LD_INT 69
10524: PUSH
10525: LD_INT 39
10527: PUSH
10528: LD_INT 34
10530: PUSH
10531: LD_INT 40
10533: PUSH
10534: LD_INT 48
10536: PUSH
10537: LD_INT 49
10539: PUSH
10540: LD_INT 50
10542: PUSH
10543: LD_INT 51
10545: PUSH
10546: LD_INT 52
10548: PUSH
10549: LD_INT 53
10551: PUSH
10552: LD_INT 54
10554: PUSH
10555: LD_INT 55
10557: PUSH
10558: LD_INT 56
10560: PUSH
10561: LD_INT 57
10563: PUSH
10564: LD_INT 58
10566: PUSH
10567: LD_INT 59
10569: PUSH
10570: LD_INT 60
10572: PUSH
10573: LD_INT 61
10575: PUSH
10576: LD_INT 62
10578: PUSH
10579: LD_INT 80
10581: PUSH
10582: LD_INT 82
10584: PUSH
10585: LD_INT 83
10587: PUSH
10588: LD_INT 84
10590: PUSH
10591: LD_INT 85
10593: PUSH
10594: LD_INT 86
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: ST_TO_ADDR
10650: GO 11117
10652: LD_INT 2
10654: DOUBLE
10655: EQUAL
10656: IFTRUE 10660
10658: GO 10886
10660: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10661: LD_ADDR_VAR 0 4
10665: PUSH
10666: LD_INT 35
10668: PUSH
10669: LD_INT 45
10671: PUSH
10672: LD_INT 46
10674: PUSH
10675: LD_INT 47
10677: PUSH
10678: LD_INT 82
10680: PUSH
10681: LD_INT 83
10683: PUSH
10684: LD_INT 84
10686: PUSH
10687: LD_INT 85
10689: PUSH
10690: LD_INT 87
10692: PUSH
10693: LD_INT 70
10695: PUSH
10696: LD_INT 1
10698: PUSH
10699: LD_INT 11
10701: PUSH
10702: LD_INT 3
10704: PUSH
10705: LD_INT 4
10707: PUSH
10708: LD_INT 5
10710: PUSH
10711: LD_INT 6
10713: PUSH
10714: LD_INT 15
10716: PUSH
10717: LD_INT 18
10719: PUSH
10720: LD_INT 7
10722: PUSH
10723: LD_INT 17
10725: PUSH
10726: LD_INT 8
10728: PUSH
10729: LD_INT 20
10731: PUSH
10732: LD_INT 21
10734: PUSH
10735: LD_INT 22
10737: PUSH
10738: LD_INT 72
10740: PUSH
10741: LD_INT 26
10743: PUSH
10744: LD_INT 69
10746: PUSH
10747: LD_INT 39
10749: PUSH
10750: LD_INT 40
10752: PUSH
10753: LD_INT 41
10755: PUSH
10756: LD_INT 42
10758: PUSH
10759: LD_INT 43
10761: PUSH
10762: LD_INT 48
10764: PUSH
10765: LD_INT 49
10767: PUSH
10768: LD_INT 50
10770: PUSH
10771: LD_INT 51
10773: PUSH
10774: LD_INT 52
10776: PUSH
10777: LD_INT 53
10779: PUSH
10780: LD_INT 54
10782: PUSH
10783: LD_INT 55
10785: PUSH
10786: LD_INT 56
10788: PUSH
10789: LD_INT 60
10791: PUSH
10792: LD_INT 61
10794: PUSH
10795: LD_INT 62
10797: PUSH
10798: LD_INT 66
10800: PUSH
10801: LD_INT 67
10803: PUSH
10804: LD_INT 68
10806: PUSH
10807: LD_INT 81
10809: PUSH
10810: LD_INT 82
10812: PUSH
10813: LD_INT 83
10815: PUSH
10816: LD_INT 84
10818: PUSH
10819: LD_INT 85
10821: PUSH
10822: LD_INT 87
10824: PUSH
10825: LD_INT 88
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: ST_TO_ADDR
10884: GO 11117
10886: LD_INT 3
10888: DOUBLE
10889: EQUAL
10890: IFTRUE 10894
10892: GO 11116
10894: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10895: LD_ADDR_VAR 0 4
10899: PUSH
10900: LD_INT 46
10902: PUSH
10903: LD_INT 47
10905: PUSH
10906: LD_INT 1
10908: PUSH
10909: LD_INT 2
10911: PUSH
10912: LD_INT 82
10914: PUSH
10915: LD_INT 83
10917: PUSH
10918: LD_INT 84
10920: PUSH
10921: LD_INT 85
10923: PUSH
10924: LD_INT 86
10926: PUSH
10927: LD_INT 11
10929: PUSH
10930: LD_INT 9
10932: PUSH
10933: LD_INT 20
10935: PUSH
10936: LD_INT 19
10938: PUSH
10939: LD_INT 21
10941: PUSH
10942: LD_INT 24
10944: PUSH
10945: LD_INT 22
10947: PUSH
10948: LD_INT 25
10950: PUSH
10951: LD_INT 28
10953: PUSH
10954: LD_INT 29
10956: PUSH
10957: LD_INT 30
10959: PUSH
10960: LD_INT 31
10962: PUSH
10963: LD_INT 37
10965: PUSH
10966: LD_INT 38
10968: PUSH
10969: LD_INT 32
10971: PUSH
10972: LD_INT 27
10974: PUSH
10975: LD_INT 33
10977: PUSH
10978: LD_INT 69
10980: PUSH
10981: LD_INT 39
10983: PUSH
10984: LD_INT 34
10986: PUSH
10987: LD_INT 40
10989: PUSH
10990: LD_INT 71
10992: PUSH
10993: LD_INT 23
10995: PUSH
10996: LD_INT 44
10998: PUSH
10999: LD_INT 48
11001: PUSH
11002: LD_INT 49
11004: PUSH
11005: LD_INT 50
11007: PUSH
11008: LD_INT 51
11010: PUSH
11011: LD_INT 52
11013: PUSH
11014: LD_INT 53
11016: PUSH
11017: LD_INT 54
11019: PUSH
11020: LD_INT 55
11022: PUSH
11023: LD_INT 56
11025: PUSH
11026: LD_INT 57
11028: PUSH
11029: LD_INT 58
11031: PUSH
11032: LD_INT 59
11034: PUSH
11035: LD_INT 63
11037: PUSH
11038: LD_INT 64
11040: PUSH
11041: LD_INT 65
11043: PUSH
11044: LD_INT 82
11046: PUSH
11047: LD_INT 83
11049: PUSH
11050: LD_INT 84
11052: PUSH
11053: LD_INT 85
11055: PUSH
11056: LD_INT 86
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: ST_TO_ADDR
11114: GO 11117
11116: POP
// if state > - 1 and state < 3 then
11117: LD_VAR 0 3
11121: PUSH
11122: LD_INT 1
11124: NEG
11125: GREATER
11126: PUSH
11127: LD_VAR 0 3
11131: PUSH
11132: LD_INT 3
11134: LESS
11135: AND
11136: IFFALSE 11193
// for i in result do
11138: LD_ADDR_VAR 0 5
11142: PUSH
11143: LD_VAR 0 4
11147: PUSH
11148: FOR_IN
11149: IFFALSE 11191
// if GetTech ( i , side ) <> state then
11151: LD_VAR 0 5
11155: PPUSH
11156: LD_VAR 0 1
11160: PPUSH
11161: CALL_OW 321
11165: PUSH
11166: LD_VAR 0 3
11170: NONEQUAL
11171: IFFALSE 11189
// result := result diff i ;
11173: LD_ADDR_VAR 0 4
11177: PUSH
11178: LD_VAR 0 4
11182: PUSH
11183: LD_VAR 0 5
11187: DIFF
11188: ST_TO_ADDR
11189: GO 11148
11191: POP
11192: POP
// end ;
11193: LD_VAR 0 4
11197: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11198: LD_INT 0
11200: PPUSH
11201: PPUSH
11202: PPUSH
// result := true ;
11203: LD_ADDR_VAR 0 3
11207: PUSH
11208: LD_INT 1
11210: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11211: LD_ADDR_VAR 0 5
11215: PUSH
11216: LD_VAR 0 2
11220: PPUSH
11221: CALL_OW 480
11225: ST_TO_ADDR
// if not tmp then
11226: LD_VAR 0 5
11230: NOT
11231: IFFALSE 11235
// exit ;
11233: GO 11284
// for i in tmp do
11235: LD_ADDR_VAR 0 4
11239: PUSH
11240: LD_VAR 0 5
11244: PUSH
11245: FOR_IN
11246: IFFALSE 11282
// if GetTech ( i , side ) <> state_researched then
11248: LD_VAR 0 4
11252: PPUSH
11253: LD_VAR 0 1
11257: PPUSH
11258: CALL_OW 321
11262: PUSH
11263: LD_INT 2
11265: NONEQUAL
11266: IFFALSE 11280
// begin result := false ;
11268: LD_ADDR_VAR 0 3
11272: PUSH
11273: LD_INT 0
11275: ST_TO_ADDR
// exit ;
11276: POP
11277: POP
11278: GO 11284
// end ;
11280: GO 11245
11282: POP
11283: POP
// end ;
11284: LD_VAR 0 3
11288: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11289: LD_INT 0
11291: PPUSH
11292: PPUSH
11293: PPUSH
11294: PPUSH
11295: PPUSH
11296: PPUSH
11297: PPUSH
11298: PPUSH
11299: PPUSH
11300: PPUSH
11301: PPUSH
11302: PPUSH
11303: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11304: LD_VAR 0 1
11308: NOT
11309: PUSH
11310: LD_VAR 0 1
11314: PPUSH
11315: CALL_OW 257
11319: PUSH
11320: LD_INT 9
11322: NONEQUAL
11323: OR
11324: IFFALSE 11328
// exit ;
11326: GO 11901
// side := GetSide ( unit ) ;
11328: LD_ADDR_VAR 0 9
11332: PUSH
11333: LD_VAR 0 1
11337: PPUSH
11338: CALL_OW 255
11342: ST_TO_ADDR
// tech_space := tech_spacanom ;
11343: LD_ADDR_VAR 0 12
11347: PUSH
11348: LD_INT 29
11350: ST_TO_ADDR
// tech_time := tech_taurad ;
11351: LD_ADDR_VAR 0 13
11355: PUSH
11356: LD_INT 28
11358: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11359: LD_ADDR_VAR 0 11
11363: PUSH
11364: LD_VAR 0 1
11368: PPUSH
11369: CALL_OW 310
11373: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11374: LD_VAR 0 11
11378: PPUSH
11379: CALL_OW 247
11383: PUSH
11384: LD_INT 2
11386: EQUAL
11387: IFFALSE 11391
// exit ;
11389: GO 11901
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11391: LD_ADDR_VAR 0 8
11395: PUSH
11396: LD_INT 81
11398: PUSH
11399: LD_VAR 0 9
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: LD_INT 21
11413: PUSH
11414: LD_INT 3
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PPUSH
11429: CALL_OW 69
11433: ST_TO_ADDR
// if not tmp then
11434: LD_VAR 0 8
11438: NOT
11439: IFFALSE 11443
// exit ;
11441: GO 11901
// if in_unit then
11443: LD_VAR 0 11
11447: IFFALSE 11471
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11449: LD_ADDR_VAR 0 10
11453: PUSH
11454: LD_VAR 0 8
11458: PPUSH
11459: LD_VAR 0 11
11463: PPUSH
11464: CALL_OW 74
11468: ST_TO_ADDR
11469: GO 11491
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11471: LD_ADDR_VAR 0 10
11475: PUSH
11476: LD_VAR 0 8
11480: PPUSH
11481: LD_VAR 0 1
11485: PPUSH
11486: CALL_OW 74
11490: ST_TO_ADDR
// if not enemy then
11491: LD_VAR 0 10
11495: NOT
11496: IFFALSE 11500
// exit ;
11498: GO 11901
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11500: LD_VAR 0 11
11504: PUSH
11505: LD_VAR 0 11
11509: PPUSH
11510: LD_VAR 0 10
11514: PPUSH
11515: CALL_OW 296
11519: PUSH
11520: LD_INT 13
11522: GREATER
11523: AND
11524: PUSH
11525: LD_VAR 0 1
11529: PPUSH
11530: LD_VAR 0 10
11534: PPUSH
11535: CALL_OW 296
11539: PUSH
11540: LD_INT 12
11542: GREATER
11543: OR
11544: IFFALSE 11548
// exit ;
11546: GO 11901
// missile := [ 1 ] ;
11548: LD_ADDR_VAR 0 14
11552: PUSH
11553: LD_INT 1
11555: PUSH
11556: EMPTY
11557: LIST
11558: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11559: LD_VAR 0 9
11563: PPUSH
11564: LD_VAR 0 12
11568: PPUSH
11569: CALL_OW 325
11573: IFFALSE 11602
// missile := Replace ( missile , missile + 1 , 2 ) ;
11575: LD_ADDR_VAR 0 14
11579: PUSH
11580: LD_VAR 0 14
11584: PPUSH
11585: LD_VAR 0 14
11589: PUSH
11590: LD_INT 1
11592: PLUS
11593: PPUSH
11594: LD_INT 2
11596: PPUSH
11597: CALL_OW 1
11601: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11602: LD_VAR 0 9
11606: PPUSH
11607: LD_VAR 0 13
11611: PPUSH
11612: CALL_OW 325
11616: PUSH
11617: LD_VAR 0 10
11621: PPUSH
11622: CALL_OW 255
11626: PPUSH
11627: LD_VAR 0 13
11631: PPUSH
11632: CALL_OW 325
11636: NOT
11637: AND
11638: IFFALSE 11667
// missile := Replace ( missile , missile + 1 , 3 ) ;
11640: LD_ADDR_VAR 0 14
11644: PUSH
11645: LD_VAR 0 14
11649: PPUSH
11650: LD_VAR 0 14
11654: PUSH
11655: LD_INT 1
11657: PLUS
11658: PPUSH
11659: LD_INT 3
11661: PPUSH
11662: CALL_OW 1
11666: ST_TO_ADDR
// if missile < 2 then
11667: LD_VAR 0 14
11671: PUSH
11672: LD_INT 2
11674: LESS
11675: IFFALSE 11679
// exit ;
11677: GO 11901
// x := GetX ( enemy ) ;
11679: LD_ADDR_VAR 0 4
11683: PUSH
11684: LD_VAR 0 10
11688: PPUSH
11689: CALL_OW 250
11693: ST_TO_ADDR
// y := GetY ( enemy ) ;
11694: LD_ADDR_VAR 0 5
11698: PUSH
11699: LD_VAR 0 10
11703: PPUSH
11704: CALL_OW 251
11708: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11709: LD_ADDR_VAR 0 6
11713: PUSH
11714: LD_VAR 0 4
11718: PUSH
11719: LD_INT 1
11721: NEG
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 12
11730: PLUS
11731: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11732: LD_ADDR_VAR 0 7
11736: PUSH
11737: LD_VAR 0 5
11741: PUSH
11742: LD_INT 1
11744: NEG
11745: PPUSH
11746: LD_INT 1
11748: PPUSH
11749: CALL_OW 12
11753: PLUS
11754: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11755: LD_VAR 0 6
11759: PPUSH
11760: LD_VAR 0 7
11764: PPUSH
11765: CALL_OW 488
11769: NOT
11770: IFFALSE 11792
// begin _x := x ;
11772: LD_ADDR_VAR 0 6
11776: PUSH
11777: LD_VAR 0 4
11781: ST_TO_ADDR
// _y := y ;
11782: LD_ADDR_VAR 0 7
11786: PUSH
11787: LD_VAR 0 5
11791: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11792: LD_ADDR_VAR 0 3
11796: PUSH
11797: LD_INT 1
11799: PPUSH
11800: LD_VAR 0 14
11804: PPUSH
11805: CALL_OW 12
11809: ST_TO_ADDR
// case i of 1 :
11810: LD_VAR 0 3
11814: PUSH
11815: LD_INT 1
11817: DOUBLE
11818: EQUAL
11819: IFTRUE 11823
11821: GO 11840
11823: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11824: LD_VAR 0 1
11828: PPUSH
11829: LD_VAR 0 10
11833: PPUSH
11834: CALL_OW 115
11838: GO 11901
11840: LD_INT 2
11842: DOUBLE
11843: EQUAL
11844: IFTRUE 11848
11846: GO 11870
11848: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11849: LD_VAR 0 1
11853: PPUSH
11854: LD_VAR 0 6
11858: PPUSH
11859: LD_VAR 0 7
11863: PPUSH
11864: CALL_OW 153
11868: GO 11901
11870: LD_INT 3
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11900
11878: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11879: LD_VAR 0 1
11883: PPUSH
11884: LD_VAR 0 6
11888: PPUSH
11889: LD_VAR 0 7
11893: PPUSH
11894: CALL_OW 154
11898: GO 11901
11900: POP
// end ;
11901: LD_VAR 0 2
11905: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11906: LD_INT 0
11908: PPUSH
11909: PPUSH
11910: PPUSH
11911: PPUSH
11912: PPUSH
11913: PPUSH
// if not unit or not building then
11914: LD_VAR 0 1
11918: NOT
11919: PUSH
11920: LD_VAR 0 2
11924: NOT
11925: OR
11926: IFFALSE 11930
// exit ;
11928: GO 12088
// x := GetX ( building ) ;
11930: LD_ADDR_VAR 0 5
11934: PUSH
11935: LD_VAR 0 2
11939: PPUSH
11940: CALL_OW 250
11944: ST_TO_ADDR
// y := GetY ( building ) ;
11945: LD_ADDR_VAR 0 6
11949: PUSH
11950: LD_VAR 0 2
11954: PPUSH
11955: CALL_OW 251
11959: ST_TO_ADDR
// for i = 0 to 5 do
11960: LD_ADDR_VAR 0 4
11964: PUSH
11965: DOUBLE
11966: LD_INT 0
11968: DEC
11969: ST_TO_ADDR
11970: LD_INT 5
11972: PUSH
11973: FOR_TO
11974: IFFALSE 12086
// begin _x := ShiftX ( x , i , 3 ) ;
11976: LD_ADDR_VAR 0 7
11980: PUSH
11981: LD_VAR 0 5
11985: PPUSH
11986: LD_VAR 0 4
11990: PPUSH
11991: LD_INT 3
11993: PPUSH
11994: CALL_OW 272
11998: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11999: LD_ADDR_VAR 0 8
12003: PUSH
12004: LD_VAR 0 6
12008: PPUSH
12009: LD_VAR 0 4
12013: PPUSH
12014: LD_INT 3
12016: PPUSH
12017: CALL_OW 273
12021: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12022: LD_VAR 0 7
12026: PPUSH
12027: LD_VAR 0 8
12031: PPUSH
12032: CALL_OW 488
12036: NOT
12037: IFFALSE 12041
// continue ;
12039: GO 11973
// if HexInfo ( _x , _y ) = 0 then
12041: LD_VAR 0 7
12045: PPUSH
12046: LD_VAR 0 8
12050: PPUSH
12051: CALL_OW 428
12055: PUSH
12056: LD_INT 0
12058: EQUAL
12059: IFFALSE 12084
// begin ComMoveXY ( unit , _x , _y ) ;
12061: LD_VAR 0 1
12065: PPUSH
12066: LD_VAR 0 7
12070: PPUSH
12071: LD_VAR 0 8
12075: PPUSH
12076: CALL_OW 111
// exit ;
12080: POP
12081: POP
12082: GO 12088
// end ; end ;
12084: GO 11973
12086: POP
12087: POP
// end ;
12088: LD_VAR 0 3
12092: RET
// export function ScanBase ( side , base_area ) ; begin
12093: LD_INT 0
12095: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12096: LD_ADDR_VAR 0 3
12100: PUSH
12101: LD_VAR 0 2
12105: PPUSH
12106: LD_INT 81
12108: PUSH
12109: LD_VAR 0 1
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PPUSH
12118: CALL_OW 70
12122: ST_TO_ADDR
// end ;
12123: LD_VAR 0 3
12127: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12128: LD_INT 0
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
// result := false ;
12134: LD_ADDR_VAR 0 2
12138: PUSH
12139: LD_INT 0
12141: ST_TO_ADDR
// side := GetSide ( unit ) ;
12142: LD_ADDR_VAR 0 3
12146: PUSH
12147: LD_VAR 0 1
12151: PPUSH
12152: CALL_OW 255
12156: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12157: LD_ADDR_VAR 0 4
12161: PUSH
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 248
12171: ST_TO_ADDR
// case nat of 1 :
12172: LD_VAR 0 4
12176: PUSH
12177: LD_INT 1
12179: DOUBLE
12180: EQUAL
12181: IFTRUE 12185
12183: GO 12196
12185: POP
// tech := tech_lassight ; 2 :
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: LD_INT 12
12193: ST_TO_ADDR
12194: GO 12235
12196: LD_INT 2
12198: DOUBLE
12199: EQUAL
12200: IFTRUE 12204
12202: GO 12215
12204: POP
// tech := tech_mortar ; 3 :
12205: LD_ADDR_VAR 0 5
12209: PUSH
12210: LD_INT 41
12212: ST_TO_ADDR
12213: GO 12235
12215: LD_INT 3
12217: DOUBLE
12218: EQUAL
12219: IFTRUE 12223
12221: GO 12234
12223: POP
// tech := tech_bazooka ; end ;
12224: LD_ADDR_VAR 0 5
12228: PUSH
12229: LD_INT 44
12231: ST_TO_ADDR
12232: GO 12235
12234: POP
// if Researched ( side , tech ) then
12235: LD_VAR 0 3
12239: PPUSH
12240: LD_VAR 0 5
12244: PPUSH
12245: CALL_OW 325
12249: IFFALSE 12276
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12251: LD_ADDR_VAR 0 2
12255: PUSH
12256: LD_INT 5
12258: PUSH
12259: LD_INT 8
12261: PUSH
12262: LD_INT 9
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: PUSH
12270: LD_VAR 0 4
12274: ARRAY
12275: ST_TO_ADDR
// end ;
12276: LD_VAR 0 2
12280: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12281: LD_INT 0
12283: PPUSH
12284: PPUSH
12285: PPUSH
// if not mines then
12286: LD_VAR 0 2
12290: NOT
12291: IFFALSE 12295
// exit ;
12293: GO 12439
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12295: LD_ADDR_VAR 0 5
12299: PUSH
12300: LD_INT 81
12302: PUSH
12303: LD_VAR 0 1
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 3
12314: PUSH
12315: LD_INT 21
12317: PUSH
12318: LD_INT 3
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: ST_TO_ADDR
// for i in mines do
12338: LD_ADDR_VAR 0 4
12342: PUSH
12343: LD_VAR 0 2
12347: PUSH
12348: FOR_IN
12349: IFFALSE 12437
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12351: LD_VAR 0 4
12355: PUSH
12356: LD_INT 1
12358: ARRAY
12359: PPUSH
12360: LD_VAR 0 4
12364: PUSH
12365: LD_INT 2
12367: ARRAY
12368: PPUSH
12369: CALL_OW 458
12373: NOT
12374: IFFALSE 12378
// continue ;
12376: GO 12348
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12378: LD_VAR 0 4
12382: PUSH
12383: LD_INT 1
12385: ARRAY
12386: PPUSH
12387: LD_VAR 0 4
12391: PUSH
12392: LD_INT 2
12394: ARRAY
12395: PPUSH
12396: CALL_OW 428
12400: PUSH
12401: LD_VAR 0 5
12405: IN
12406: IFFALSE 12435
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12408: LD_VAR 0 4
12412: PUSH
12413: LD_INT 1
12415: ARRAY
12416: PPUSH
12417: LD_VAR 0 4
12421: PUSH
12422: LD_INT 2
12424: ARRAY
12425: PPUSH
12426: LD_VAR 0 1
12430: PPUSH
12431: CALL_OW 456
// end ;
12435: GO 12348
12437: POP
12438: POP
// end ;
12439: LD_VAR 0 3
12443: RET
// export function Count ( array ) ; var i ; begin
12444: LD_INT 0
12446: PPUSH
12447: PPUSH
// result := 0 ;
12448: LD_ADDR_VAR 0 2
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// for i in array do
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_VAR 0 1
12465: PUSH
12466: FOR_IN
12467: IFFALSE 12491
// if i then
12469: LD_VAR 0 3
12473: IFFALSE 12489
// result := result + 1 ;
12475: LD_ADDR_VAR 0 2
12479: PUSH
12480: LD_VAR 0 2
12484: PUSH
12485: LD_INT 1
12487: PLUS
12488: ST_TO_ADDR
12489: GO 12466
12491: POP
12492: POP
// end ;
12493: LD_VAR 0 2
12497: RET
// export function IsEmpty ( building ) ; begin
12498: LD_INT 0
12500: PPUSH
// if not building then
12501: LD_VAR 0 1
12505: NOT
12506: IFFALSE 12510
// exit ;
12508: GO 12553
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12510: LD_ADDR_VAR 0 2
12514: PUSH
12515: LD_VAR 0 1
12519: PUSH
12520: LD_INT 22
12522: PUSH
12523: LD_VAR 0 1
12527: PPUSH
12528: CALL_OW 255
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 58
12539: PUSH
12540: EMPTY
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: IN
12552: ST_TO_ADDR
// end ;
12553: LD_VAR 0 2
12557: RET
// export function IsNotFull ( building ) ; begin
12558: LD_INT 0
12560: PPUSH
// if not building then
12561: LD_VAR 0 1
12565: NOT
12566: IFFALSE 12570
// exit ;
12568: GO 12589
// result := UnitsInside ( building ) < 6 ;
12570: LD_ADDR_VAR 0 2
12574: PUSH
12575: LD_VAR 0 1
12579: PPUSH
12580: CALL_OW 313
12584: PUSH
12585: LD_INT 6
12587: LESS
12588: ST_TO_ADDR
// end ;
12589: LD_VAR 0 2
12593: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12594: LD_INT 0
12596: PPUSH
12597: PPUSH
12598: PPUSH
12599: PPUSH
// tmp := [ ] ;
12600: LD_ADDR_VAR 0 3
12604: PUSH
12605: EMPTY
12606: ST_TO_ADDR
// list := [ ] ;
12607: LD_ADDR_VAR 0 5
12611: PUSH
12612: EMPTY
12613: ST_TO_ADDR
// for i = 16 to 25 do
12614: LD_ADDR_VAR 0 4
12618: PUSH
12619: DOUBLE
12620: LD_INT 16
12622: DEC
12623: ST_TO_ADDR
12624: LD_INT 25
12626: PUSH
12627: FOR_TO
12628: IFFALSE 12701
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12630: LD_ADDR_VAR 0 3
12634: PUSH
12635: LD_VAR 0 3
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_VAR 0 1
12647: PPUSH
12648: CALL_OW 255
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 91
12659: PUSH
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 6
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: PUSH
12673: LD_INT 30
12675: PUSH
12676: LD_VAR 0 4
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: LIST
12689: PUSH
12690: EMPTY
12691: LIST
12692: PPUSH
12693: CALL_OW 69
12697: ADD
12698: ST_TO_ADDR
12699: GO 12627
12701: POP
12702: POP
// for i = 1 to tmp do
12703: LD_ADDR_VAR 0 4
12707: PUSH
12708: DOUBLE
12709: LD_INT 1
12711: DEC
12712: ST_TO_ADDR
12713: LD_VAR 0 3
12717: PUSH
12718: FOR_TO
12719: IFFALSE 12807
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12721: LD_ADDR_VAR 0 5
12725: PUSH
12726: LD_VAR 0 5
12730: PUSH
12731: LD_VAR 0 3
12735: PUSH
12736: LD_VAR 0 4
12740: ARRAY
12741: PPUSH
12742: CALL_OW 266
12746: PUSH
12747: LD_VAR 0 3
12751: PUSH
12752: LD_VAR 0 4
12756: ARRAY
12757: PPUSH
12758: CALL_OW 250
12762: PUSH
12763: LD_VAR 0 3
12767: PUSH
12768: LD_VAR 0 4
12772: ARRAY
12773: PPUSH
12774: CALL_OW 251
12778: PUSH
12779: LD_VAR 0 3
12783: PUSH
12784: LD_VAR 0 4
12788: ARRAY
12789: PPUSH
12790: CALL_OW 254
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: PUSH
12801: EMPTY
12802: LIST
12803: ADD
12804: ST_TO_ADDR
12805: GO 12718
12807: POP
12808: POP
// result := list ;
12809: LD_ADDR_VAR 0 2
12813: PUSH
12814: LD_VAR 0 5
12818: ST_TO_ADDR
// end ;
12819: LD_VAR 0 2
12823: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12824: LD_INT 0
12826: PPUSH
12827: PPUSH
12828: PPUSH
12829: PPUSH
12830: PPUSH
12831: PPUSH
12832: PPUSH
// if not factory then
12833: LD_VAR 0 1
12837: NOT
12838: IFFALSE 12842
// exit ;
12840: GO 13435
// if control = control_apeman then
12842: LD_VAR 0 4
12846: PUSH
12847: LD_INT 5
12849: EQUAL
12850: IFFALSE 12959
// begin tmp := UnitsInside ( factory ) ;
12852: LD_ADDR_VAR 0 8
12856: PUSH
12857: LD_VAR 0 1
12861: PPUSH
12862: CALL_OW 313
12866: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12867: LD_VAR 0 8
12871: PPUSH
12872: LD_INT 25
12874: PUSH
12875: LD_INT 12
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PPUSH
12882: CALL_OW 72
12886: NOT
12887: IFFALSE 12897
// control := control_manual ;
12889: LD_ADDR_VAR 0 4
12893: PUSH
12894: LD_INT 1
12896: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12897: LD_ADDR_VAR 0 8
12901: PUSH
12902: LD_VAR 0 1
12906: PPUSH
12907: CALL 12594 0 1
12911: ST_TO_ADDR
// if tmp then
12912: LD_VAR 0 8
12916: IFFALSE 12959
// begin for i in tmp do
12918: LD_ADDR_VAR 0 7
12922: PUSH
12923: LD_VAR 0 8
12927: PUSH
12928: FOR_IN
12929: IFFALSE 12957
// if i [ 1 ] = b_ext_radio then
12931: LD_VAR 0 7
12935: PUSH
12936: LD_INT 1
12938: ARRAY
12939: PUSH
12940: LD_INT 22
12942: EQUAL
12943: IFFALSE 12955
// begin control := control_remote ;
12945: LD_ADDR_VAR 0 4
12949: PUSH
12950: LD_INT 2
12952: ST_TO_ADDR
// break ;
12953: GO 12957
// end ;
12955: GO 12928
12957: POP
12958: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12959: LD_VAR 0 1
12963: PPUSH
12964: LD_VAR 0 2
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_VAR 0 4
12978: PPUSH
12979: LD_VAR 0 5
12983: PPUSH
12984: CALL_OW 448
12988: IFFALSE 13023
// begin result := [ chassis , engine , control , weapon ] ;
12990: LD_ADDR_VAR 0 6
12994: PUSH
12995: LD_VAR 0 2
12999: PUSH
13000: LD_VAR 0 3
13004: PUSH
13005: LD_VAR 0 4
13009: PUSH
13010: LD_VAR 0 5
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: ST_TO_ADDR
// exit ;
13021: GO 13435
// end ; _chassis := AvailableChassisList ( factory ) ;
13023: LD_ADDR_VAR 0 9
13027: PUSH
13028: LD_VAR 0 1
13032: PPUSH
13033: CALL_OW 475
13037: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13038: LD_ADDR_VAR 0 11
13042: PUSH
13043: LD_VAR 0 1
13047: PPUSH
13048: CALL_OW 476
13052: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13053: LD_ADDR_VAR 0 12
13057: PUSH
13058: LD_VAR 0 1
13062: PPUSH
13063: CALL_OW 477
13067: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13068: LD_ADDR_VAR 0 10
13072: PUSH
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 478
13082: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13083: LD_VAR 0 9
13087: NOT
13088: PUSH
13089: LD_VAR 0 11
13093: NOT
13094: OR
13095: PUSH
13096: LD_VAR 0 12
13100: NOT
13101: OR
13102: PUSH
13103: LD_VAR 0 10
13107: NOT
13108: OR
13109: IFFALSE 13144
// begin result := [ chassis , engine , control , weapon ] ;
13111: LD_ADDR_VAR 0 6
13115: PUSH
13116: LD_VAR 0 2
13120: PUSH
13121: LD_VAR 0 3
13125: PUSH
13126: LD_VAR 0 4
13130: PUSH
13131: LD_VAR 0 5
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: ST_TO_ADDR
// exit ;
13142: GO 13435
// end ; if not chassis in _chassis then
13144: LD_VAR 0 2
13148: PUSH
13149: LD_VAR 0 9
13153: IN
13154: NOT
13155: IFFALSE 13181
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13157: LD_ADDR_VAR 0 2
13161: PUSH
13162: LD_VAR 0 9
13166: PUSH
13167: LD_INT 1
13169: PPUSH
13170: LD_VAR 0 9
13174: PPUSH
13175: CALL_OW 12
13179: ARRAY
13180: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13181: LD_VAR 0 2
13185: PPUSH
13186: LD_VAR 0 3
13190: PPUSH
13191: CALL 13440 0 2
13195: NOT
13196: IFFALSE 13255
// repeat engine := _engine [ 1 ] ;
13198: LD_ADDR_VAR 0 3
13202: PUSH
13203: LD_VAR 0 11
13207: PUSH
13208: LD_INT 1
13210: ARRAY
13211: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13212: LD_ADDR_VAR 0 11
13216: PUSH
13217: LD_VAR 0 11
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: CALL_OW 3
13229: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13230: LD_VAR 0 2
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: CALL 13440 0 2
13244: PUSH
13245: LD_VAR 0 11
13249: PUSH
13250: EMPTY
13251: EQUAL
13252: OR
13253: IFFALSE 13198
// if not control in _control then
13255: LD_VAR 0 4
13259: PUSH
13260: LD_VAR 0 12
13264: IN
13265: NOT
13266: IFFALSE 13292
// control := _control [ rand ( 1 , _control ) ] ;
13268: LD_ADDR_VAR 0 4
13272: PUSH
13273: LD_VAR 0 12
13277: PUSH
13278: LD_INT 1
13280: PPUSH
13281: LD_VAR 0 12
13285: PPUSH
13286: CALL_OW 12
13290: ARRAY
13291: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13292: LD_VAR 0 2
13296: PPUSH
13297: LD_VAR 0 5
13301: PPUSH
13302: CALL 13660 0 2
13306: NOT
13307: IFFALSE 13366
// repeat weapon := _weapon [ 1 ] ;
13309: LD_ADDR_VAR 0 5
13313: PUSH
13314: LD_VAR 0 10
13318: PUSH
13319: LD_INT 1
13321: ARRAY
13322: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13323: LD_ADDR_VAR 0 10
13327: PUSH
13328: LD_VAR 0 10
13332: PPUSH
13333: LD_INT 1
13335: PPUSH
13336: CALL_OW 3
13340: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13341: LD_VAR 0 2
13345: PPUSH
13346: LD_VAR 0 5
13350: PPUSH
13351: CALL 13660 0 2
13355: PUSH
13356: LD_VAR 0 10
13360: PUSH
13361: EMPTY
13362: EQUAL
13363: OR
13364: IFFALSE 13309
// result := [ ] ;
13366: LD_ADDR_VAR 0 6
13370: PUSH
13371: EMPTY
13372: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13373: LD_VAR 0 1
13377: PPUSH
13378: LD_VAR 0 2
13382: PPUSH
13383: LD_VAR 0 3
13387: PPUSH
13388: LD_VAR 0 4
13392: PPUSH
13393: LD_VAR 0 5
13397: PPUSH
13398: CALL_OW 448
13402: IFFALSE 13435
// result := [ chassis , engine , control , weapon ] ;
13404: LD_ADDR_VAR 0 6
13408: PUSH
13409: LD_VAR 0 2
13413: PUSH
13414: LD_VAR 0 3
13418: PUSH
13419: LD_VAR 0 4
13423: PUSH
13424: LD_VAR 0 5
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: ST_TO_ADDR
// end ;
13435: LD_VAR 0 6
13439: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13440: LD_INT 0
13442: PPUSH
// if not chassis or not engine then
13443: LD_VAR 0 1
13447: NOT
13448: PUSH
13449: LD_VAR 0 2
13453: NOT
13454: OR
13455: IFFALSE 13459
// exit ;
13457: GO 13655
// case engine of engine_solar :
13459: LD_VAR 0 2
13463: PUSH
13464: LD_INT 2
13466: DOUBLE
13467: EQUAL
13468: IFTRUE 13472
13470: GO 13510
13472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13473: LD_ADDR_VAR 0 3
13477: PUSH
13478: LD_INT 11
13480: PUSH
13481: LD_INT 12
13483: PUSH
13484: LD_INT 13
13486: PUSH
13487: LD_INT 14
13489: PUSH
13490: LD_INT 1
13492: PUSH
13493: LD_INT 2
13495: PUSH
13496: LD_INT 3
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: ST_TO_ADDR
13508: GO 13639
13510: LD_INT 1
13512: DOUBLE
13513: EQUAL
13514: IFTRUE 13518
13516: GO 13580
13518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13519: LD_ADDR_VAR 0 3
13523: PUSH
13524: LD_INT 11
13526: PUSH
13527: LD_INT 12
13529: PUSH
13530: LD_INT 13
13532: PUSH
13533: LD_INT 14
13535: PUSH
13536: LD_INT 1
13538: PUSH
13539: LD_INT 2
13541: PUSH
13542: LD_INT 3
13544: PUSH
13545: LD_INT 4
13547: PUSH
13548: LD_INT 5
13550: PUSH
13551: LD_INT 21
13553: PUSH
13554: LD_INT 23
13556: PUSH
13557: LD_INT 22
13559: PUSH
13560: LD_INT 24
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: ST_TO_ADDR
13578: GO 13639
13580: LD_INT 3
13582: DOUBLE
13583: EQUAL
13584: IFTRUE 13588
13586: GO 13638
13588: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13589: LD_ADDR_VAR 0 3
13593: PUSH
13594: LD_INT 13
13596: PUSH
13597: LD_INT 14
13599: PUSH
13600: LD_INT 2
13602: PUSH
13603: LD_INT 3
13605: PUSH
13606: LD_INT 4
13608: PUSH
13609: LD_INT 5
13611: PUSH
13612: LD_INT 21
13614: PUSH
13615: LD_INT 22
13617: PUSH
13618: LD_INT 23
13620: PUSH
13621: LD_INT 24
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: ST_TO_ADDR
13636: GO 13639
13638: POP
// result := ( chassis in result ) ;
13639: LD_ADDR_VAR 0 3
13643: PUSH
13644: LD_VAR 0 1
13648: PUSH
13649: LD_VAR 0 3
13653: IN
13654: ST_TO_ADDR
// end ;
13655: LD_VAR 0 3
13659: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13660: LD_INT 0
13662: PPUSH
// if not chassis or not weapon then
13663: LD_VAR 0 1
13667: NOT
13668: PUSH
13669: LD_VAR 0 2
13673: NOT
13674: OR
13675: IFFALSE 13679
// exit ;
13677: GO 14741
// case weapon of us_machine_gun :
13679: LD_VAR 0 2
13683: PUSH
13684: LD_INT 2
13686: DOUBLE
13687: EQUAL
13688: IFTRUE 13692
13690: GO 13722
13692: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13693: LD_ADDR_VAR 0 3
13697: PUSH
13698: LD_INT 1
13700: PUSH
13701: LD_INT 2
13703: PUSH
13704: LD_INT 3
13706: PUSH
13707: LD_INT 4
13709: PUSH
13710: LD_INT 5
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: ST_TO_ADDR
13720: GO 14725
13722: LD_INT 3
13724: DOUBLE
13725: EQUAL
13726: IFTRUE 13730
13728: GO 13760
13730: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13731: LD_ADDR_VAR 0 3
13735: PUSH
13736: LD_INT 1
13738: PUSH
13739: LD_INT 2
13741: PUSH
13742: LD_INT 3
13744: PUSH
13745: LD_INT 4
13747: PUSH
13748: LD_INT 5
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: ST_TO_ADDR
13758: GO 14725
13760: LD_INT 11
13762: DOUBLE
13763: EQUAL
13764: IFTRUE 13768
13766: GO 13798
13768: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13769: LD_ADDR_VAR 0 3
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: LD_INT 3
13782: PUSH
13783: LD_INT 4
13785: PUSH
13786: LD_INT 5
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: ST_TO_ADDR
13796: GO 14725
13798: LD_INT 4
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13806
13804: GO 13832
13806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13807: LD_ADDR_VAR 0 3
13811: PUSH
13812: LD_INT 2
13814: PUSH
13815: LD_INT 3
13817: PUSH
13818: LD_INT 4
13820: PUSH
13821: LD_INT 5
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: ST_TO_ADDR
13830: GO 14725
13832: LD_INT 5
13834: DOUBLE
13835: EQUAL
13836: IFTRUE 13840
13838: GO 13866
13840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13841: LD_ADDR_VAR 0 3
13845: PUSH
13846: LD_INT 2
13848: PUSH
13849: LD_INT 3
13851: PUSH
13852: LD_INT 4
13854: PUSH
13855: LD_INT 5
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: ST_TO_ADDR
13864: GO 14725
13866: LD_INT 9
13868: DOUBLE
13869: EQUAL
13870: IFTRUE 13874
13872: GO 13900
13874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13875: LD_ADDR_VAR 0 3
13879: PUSH
13880: LD_INT 2
13882: PUSH
13883: LD_INT 3
13885: PUSH
13886: LD_INT 4
13888: PUSH
13889: LD_INT 5
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: ST_TO_ADDR
13898: GO 14725
13900: LD_INT 7
13902: DOUBLE
13903: EQUAL
13904: IFTRUE 13908
13906: GO 13934
13908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13909: LD_ADDR_VAR 0 3
13913: PUSH
13914: LD_INT 2
13916: PUSH
13917: LD_INT 3
13919: PUSH
13920: LD_INT 4
13922: PUSH
13923: LD_INT 5
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: ST_TO_ADDR
13932: GO 14725
13934: LD_INT 12
13936: DOUBLE
13937: EQUAL
13938: IFTRUE 13942
13940: GO 13968
13942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13943: LD_ADDR_VAR 0 3
13947: PUSH
13948: LD_INT 2
13950: PUSH
13951: LD_INT 3
13953: PUSH
13954: LD_INT 4
13956: PUSH
13957: LD_INT 5
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: ST_TO_ADDR
13966: GO 14725
13968: LD_INT 13
13970: DOUBLE
13971: EQUAL
13972: IFTRUE 13976
13974: GO 14002
13976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13977: LD_ADDR_VAR 0 3
13981: PUSH
13982: LD_INT 2
13984: PUSH
13985: LD_INT 3
13987: PUSH
13988: LD_INT 4
13990: PUSH
13991: LD_INT 5
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: ST_TO_ADDR
14000: GO 14725
14002: LD_INT 14
14004: DOUBLE
14005: EQUAL
14006: IFTRUE 14010
14008: GO 14028
14010: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14011: LD_ADDR_VAR 0 3
14015: PUSH
14016: LD_INT 4
14018: PUSH
14019: LD_INT 5
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: ST_TO_ADDR
14026: GO 14725
14028: LD_INT 6
14030: DOUBLE
14031: EQUAL
14032: IFTRUE 14036
14034: GO 14054
14036: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14037: LD_ADDR_VAR 0 3
14041: PUSH
14042: LD_INT 4
14044: PUSH
14045: LD_INT 5
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: ST_TO_ADDR
14052: GO 14725
14054: LD_INT 10
14056: DOUBLE
14057: EQUAL
14058: IFTRUE 14062
14060: GO 14080
14062: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14063: LD_ADDR_VAR 0 3
14067: PUSH
14068: LD_INT 4
14070: PUSH
14071: LD_INT 5
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: ST_TO_ADDR
14078: GO 14725
14080: LD_INT 22
14082: DOUBLE
14083: EQUAL
14084: IFTRUE 14088
14086: GO 14114
14088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14089: LD_ADDR_VAR 0 3
14093: PUSH
14094: LD_INT 11
14096: PUSH
14097: LD_INT 12
14099: PUSH
14100: LD_INT 13
14102: PUSH
14103: LD_INT 14
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: ST_TO_ADDR
14112: GO 14725
14114: LD_INT 23
14116: DOUBLE
14117: EQUAL
14118: IFTRUE 14122
14120: GO 14148
14122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14123: LD_ADDR_VAR 0 3
14127: PUSH
14128: LD_INT 11
14130: PUSH
14131: LD_INT 12
14133: PUSH
14134: LD_INT 13
14136: PUSH
14137: LD_INT 14
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: ST_TO_ADDR
14146: GO 14725
14148: LD_INT 24
14150: DOUBLE
14151: EQUAL
14152: IFTRUE 14156
14154: GO 14182
14156: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14157: LD_ADDR_VAR 0 3
14161: PUSH
14162: LD_INT 11
14164: PUSH
14165: LD_INT 12
14167: PUSH
14168: LD_INT 13
14170: PUSH
14171: LD_INT 14
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: ST_TO_ADDR
14180: GO 14725
14182: LD_INT 30
14184: DOUBLE
14185: EQUAL
14186: IFTRUE 14190
14188: GO 14216
14190: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14191: LD_ADDR_VAR 0 3
14195: PUSH
14196: LD_INT 11
14198: PUSH
14199: LD_INT 12
14201: PUSH
14202: LD_INT 13
14204: PUSH
14205: LD_INT 14
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: ST_TO_ADDR
14214: GO 14725
14216: LD_INT 25
14218: DOUBLE
14219: EQUAL
14220: IFTRUE 14224
14222: GO 14242
14224: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14225: LD_ADDR_VAR 0 3
14229: PUSH
14230: LD_INT 13
14232: PUSH
14233: LD_INT 14
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: ST_TO_ADDR
14240: GO 14725
14242: LD_INT 27
14244: DOUBLE
14245: EQUAL
14246: IFTRUE 14250
14248: GO 14268
14250: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14251: LD_ADDR_VAR 0 3
14255: PUSH
14256: LD_INT 13
14258: PUSH
14259: LD_INT 14
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: ST_TO_ADDR
14266: GO 14725
14268: LD_EXP 97
14272: DOUBLE
14273: EQUAL
14274: IFTRUE 14278
14276: GO 14304
14278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14279: LD_ADDR_VAR 0 3
14283: PUSH
14284: LD_INT 11
14286: PUSH
14287: LD_INT 12
14289: PUSH
14290: LD_INT 13
14292: PUSH
14293: LD_INT 14
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: ST_TO_ADDR
14302: GO 14725
14304: LD_INT 28
14306: DOUBLE
14307: EQUAL
14308: IFTRUE 14312
14310: GO 14330
14312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14313: LD_ADDR_VAR 0 3
14317: PUSH
14318: LD_INT 13
14320: PUSH
14321: LD_INT 14
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: ST_TO_ADDR
14328: GO 14725
14330: LD_INT 29
14332: DOUBLE
14333: EQUAL
14334: IFTRUE 14338
14336: GO 14356
14338: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14339: LD_ADDR_VAR 0 3
14343: PUSH
14344: LD_INT 13
14346: PUSH
14347: LD_INT 14
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: ST_TO_ADDR
14354: GO 14725
14356: LD_INT 31
14358: DOUBLE
14359: EQUAL
14360: IFTRUE 14364
14362: GO 14382
14364: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14365: LD_ADDR_VAR 0 3
14369: PUSH
14370: LD_INT 13
14372: PUSH
14373: LD_INT 14
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: ST_TO_ADDR
14380: GO 14725
14382: LD_INT 26
14384: DOUBLE
14385: EQUAL
14386: IFTRUE 14390
14388: GO 14408
14390: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14391: LD_ADDR_VAR 0 3
14395: PUSH
14396: LD_INT 13
14398: PUSH
14399: LD_INT 14
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: ST_TO_ADDR
14406: GO 14725
14408: LD_INT 42
14410: DOUBLE
14411: EQUAL
14412: IFTRUE 14416
14414: GO 14442
14416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: LD_INT 21
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_INT 23
14430: PUSH
14431: LD_INT 24
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: ST_TO_ADDR
14440: GO 14725
14442: LD_INT 43
14444: DOUBLE
14445: EQUAL
14446: IFTRUE 14450
14448: GO 14476
14450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14451: LD_ADDR_VAR 0 3
14455: PUSH
14456: LD_INT 21
14458: PUSH
14459: LD_INT 22
14461: PUSH
14462: LD_INT 23
14464: PUSH
14465: LD_INT 24
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: ST_TO_ADDR
14474: GO 14725
14476: LD_INT 44
14478: DOUBLE
14479: EQUAL
14480: IFTRUE 14484
14482: GO 14510
14484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_INT 21
14492: PUSH
14493: LD_INT 22
14495: PUSH
14496: LD_INT 23
14498: PUSH
14499: LD_INT 24
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: ST_TO_ADDR
14508: GO 14725
14510: LD_INT 45
14512: DOUBLE
14513: EQUAL
14514: IFTRUE 14518
14516: GO 14544
14518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 22
14529: PUSH
14530: LD_INT 23
14532: PUSH
14533: LD_INT 24
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: ST_TO_ADDR
14542: GO 14725
14544: LD_INT 49
14546: DOUBLE
14547: EQUAL
14548: IFTRUE 14552
14550: GO 14578
14552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14553: LD_ADDR_VAR 0 3
14557: PUSH
14558: LD_INT 21
14560: PUSH
14561: LD_INT 22
14563: PUSH
14564: LD_INT 23
14566: PUSH
14567: LD_INT 24
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: ST_TO_ADDR
14576: GO 14725
14578: LD_INT 51
14580: DOUBLE
14581: EQUAL
14582: IFTRUE 14586
14584: GO 14612
14586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14587: LD_ADDR_VAR 0 3
14591: PUSH
14592: LD_INT 21
14594: PUSH
14595: LD_INT 22
14597: PUSH
14598: LD_INT 23
14600: PUSH
14601: LD_INT 24
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: ST_TO_ADDR
14610: GO 14725
14612: LD_INT 52
14614: DOUBLE
14615: EQUAL
14616: IFTRUE 14620
14618: GO 14646
14620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14621: LD_ADDR_VAR 0 3
14625: PUSH
14626: LD_INT 21
14628: PUSH
14629: LD_INT 22
14631: PUSH
14632: LD_INT 23
14634: PUSH
14635: LD_INT 24
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: ST_TO_ADDR
14644: GO 14725
14646: LD_INT 53
14648: DOUBLE
14649: EQUAL
14650: IFTRUE 14654
14652: GO 14672
14654: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14655: LD_ADDR_VAR 0 3
14659: PUSH
14660: LD_INT 23
14662: PUSH
14663: LD_INT 24
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: ST_TO_ADDR
14670: GO 14725
14672: LD_INT 46
14674: DOUBLE
14675: EQUAL
14676: IFTRUE 14680
14678: GO 14698
14680: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14681: LD_ADDR_VAR 0 3
14685: PUSH
14686: LD_INT 23
14688: PUSH
14689: LD_INT 24
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: ST_TO_ADDR
14696: GO 14725
14698: LD_INT 47
14700: DOUBLE
14701: EQUAL
14702: IFTRUE 14706
14704: GO 14724
14706: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14707: LD_ADDR_VAR 0 3
14711: PUSH
14712: LD_INT 23
14714: PUSH
14715: LD_INT 24
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: ST_TO_ADDR
14722: GO 14725
14724: POP
// result := ( chassis in result ) ;
14725: LD_ADDR_VAR 0 3
14729: PUSH
14730: LD_VAR 0 1
14734: PUSH
14735: LD_VAR 0 3
14739: IN
14740: ST_TO_ADDR
// end ;
14741: LD_VAR 0 3
14745: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14746: LD_INT 0
14748: PPUSH
14749: PPUSH
14750: PPUSH
14751: PPUSH
14752: PPUSH
14753: PPUSH
14754: PPUSH
// result := array ;
14755: LD_ADDR_VAR 0 5
14759: PUSH
14760: LD_VAR 0 1
14764: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14765: LD_VAR 0 1
14769: NOT
14770: PUSH
14771: LD_VAR 0 2
14775: NOT
14776: OR
14777: PUSH
14778: LD_VAR 0 3
14782: NOT
14783: OR
14784: PUSH
14785: LD_VAR 0 2
14789: PUSH
14790: LD_VAR 0 1
14794: GREATER
14795: OR
14796: PUSH
14797: LD_VAR 0 3
14801: PUSH
14802: LD_VAR 0 1
14806: GREATER
14807: OR
14808: IFFALSE 14812
// exit ;
14810: GO 15108
// if direction then
14812: LD_VAR 0 4
14816: IFFALSE 14880
// begin d := 1 ;
14818: LD_ADDR_VAR 0 9
14822: PUSH
14823: LD_INT 1
14825: ST_TO_ADDR
// if i_from > i_to then
14826: LD_VAR 0 2
14830: PUSH
14831: LD_VAR 0 3
14835: GREATER
14836: IFFALSE 14862
// length := ( array - i_from ) + i_to else
14838: LD_ADDR_VAR 0 11
14842: PUSH
14843: LD_VAR 0 1
14847: PUSH
14848: LD_VAR 0 2
14852: MINUS
14853: PUSH
14854: LD_VAR 0 3
14858: PLUS
14859: ST_TO_ADDR
14860: GO 14878
// length := i_to - i_from ;
14862: LD_ADDR_VAR 0 11
14866: PUSH
14867: LD_VAR 0 3
14871: PUSH
14872: LD_VAR 0 2
14876: MINUS
14877: ST_TO_ADDR
// end else
14878: GO 14941
// begin d := - 1 ;
14880: LD_ADDR_VAR 0 9
14884: PUSH
14885: LD_INT 1
14887: NEG
14888: ST_TO_ADDR
// if i_from > i_to then
14889: LD_VAR 0 2
14893: PUSH
14894: LD_VAR 0 3
14898: GREATER
14899: IFFALSE 14919
// length := i_from - i_to else
14901: LD_ADDR_VAR 0 11
14905: PUSH
14906: LD_VAR 0 2
14910: PUSH
14911: LD_VAR 0 3
14915: MINUS
14916: ST_TO_ADDR
14917: GO 14941
// length := ( array - i_to ) + i_from ;
14919: LD_ADDR_VAR 0 11
14923: PUSH
14924: LD_VAR 0 1
14928: PUSH
14929: LD_VAR 0 3
14933: MINUS
14934: PUSH
14935: LD_VAR 0 2
14939: PLUS
14940: ST_TO_ADDR
// end ; if not length then
14941: LD_VAR 0 11
14945: NOT
14946: IFFALSE 14950
// exit ;
14948: GO 15108
// tmp := array ;
14950: LD_ADDR_VAR 0 10
14954: PUSH
14955: LD_VAR 0 1
14959: ST_TO_ADDR
// for i = 1 to length do
14960: LD_ADDR_VAR 0 6
14964: PUSH
14965: DOUBLE
14966: LD_INT 1
14968: DEC
14969: ST_TO_ADDR
14970: LD_VAR 0 11
14974: PUSH
14975: FOR_TO
14976: IFFALSE 15096
// begin for j = 1 to array do
14978: LD_ADDR_VAR 0 7
14982: PUSH
14983: DOUBLE
14984: LD_INT 1
14986: DEC
14987: ST_TO_ADDR
14988: LD_VAR 0 1
14992: PUSH
14993: FOR_TO
14994: IFFALSE 15082
// begin k := j + d ;
14996: LD_ADDR_VAR 0 8
15000: PUSH
15001: LD_VAR 0 7
15005: PUSH
15006: LD_VAR 0 9
15010: PLUS
15011: ST_TO_ADDR
// if k > array then
15012: LD_VAR 0 8
15016: PUSH
15017: LD_VAR 0 1
15021: GREATER
15022: IFFALSE 15032
// k := 1 ;
15024: LD_ADDR_VAR 0 8
15028: PUSH
15029: LD_INT 1
15031: ST_TO_ADDR
// if not k then
15032: LD_VAR 0 8
15036: NOT
15037: IFFALSE 15049
// k := array ;
15039: LD_ADDR_VAR 0 8
15043: PUSH
15044: LD_VAR 0 1
15048: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15049: LD_ADDR_VAR 0 10
15053: PUSH
15054: LD_VAR 0 10
15058: PPUSH
15059: LD_VAR 0 8
15063: PPUSH
15064: LD_VAR 0 1
15068: PUSH
15069: LD_VAR 0 7
15073: ARRAY
15074: PPUSH
15075: CALL_OW 1
15079: ST_TO_ADDR
// end ;
15080: GO 14993
15082: POP
15083: POP
// array := tmp ;
15084: LD_ADDR_VAR 0 1
15088: PUSH
15089: LD_VAR 0 10
15093: ST_TO_ADDR
// end ;
15094: GO 14975
15096: POP
15097: POP
// result := array ;
15098: LD_ADDR_VAR 0 5
15102: PUSH
15103: LD_VAR 0 1
15107: ST_TO_ADDR
// end ;
15108: LD_VAR 0 5
15112: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15113: LD_INT 0
15115: PPUSH
15116: PPUSH
// result := 0 ;
15117: LD_ADDR_VAR 0 3
15121: PUSH
15122: LD_INT 0
15124: ST_TO_ADDR
// if not array or not value in array then
15125: LD_VAR 0 1
15129: NOT
15130: PUSH
15131: LD_VAR 0 2
15135: PUSH
15136: LD_VAR 0 1
15140: IN
15141: NOT
15142: OR
15143: IFFALSE 15147
// exit ;
15145: GO 15201
// for i = 1 to array do
15147: LD_ADDR_VAR 0 4
15151: PUSH
15152: DOUBLE
15153: LD_INT 1
15155: DEC
15156: ST_TO_ADDR
15157: LD_VAR 0 1
15161: PUSH
15162: FOR_TO
15163: IFFALSE 15199
// if value = array [ i ] then
15165: LD_VAR 0 2
15169: PUSH
15170: LD_VAR 0 1
15174: PUSH
15175: LD_VAR 0 4
15179: ARRAY
15180: EQUAL
15181: IFFALSE 15197
// begin result := i ;
15183: LD_ADDR_VAR 0 3
15187: PUSH
15188: LD_VAR 0 4
15192: ST_TO_ADDR
// exit ;
15193: POP
15194: POP
15195: GO 15201
// end ;
15197: GO 15162
15199: POP
15200: POP
// end ;
15201: LD_VAR 0 3
15205: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15206: LD_INT 0
15208: PPUSH
// vc_chassis := chassis ;
15209: LD_ADDR_OWVAR 37
15213: PUSH
15214: LD_VAR 0 1
15218: ST_TO_ADDR
// vc_engine := engine ;
15219: LD_ADDR_OWVAR 39
15223: PUSH
15224: LD_VAR 0 2
15228: ST_TO_ADDR
// vc_control := control ;
15229: LD_ADDR_OWVAR 38
15233: PUSH
15234: LD_VAR 0 3
15238: ST_TO_ADDR
// vc_weapon := weapon ;
15239: LD_ADDR_OWVAR 40
15243: PUSH
15244: LD_VAR 0 4
15248: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15249: LD_ADDR_OWVAR 41
15253: PUSH
15254: LD_VAR 0 5
15258: ST_TO_ADDR
// end ;
15259: LD_VAR 0 6
15263: RET
// export function WantPlant ( unit ) ; var task ; begin
15264: LD_INT 0
15266: PPUSH
15267: PPUSH
// result := false ;
15268: LD_ADDR_VAR 0 2
15272: PUSH
15273: LD_INT 0
15275: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15276: LD_ADDR_VAR 0 3
15280: PUSH
15281: LD_VAR 0 1
15285: PPUSH
15286: CALL_OW 437
15290: ST_TO_ADDR
// if task then
15291: LD_VAR 0 3
15295: IFFALSE 15323
// if task [ 1 ] [ 1 ] = p then
15297: LD_VAR 0 3
15301: PUSH
15302: LD_INT 1
15304: ARRAY
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PUSH
15310: LD_STRING p
15312: EQUAL
15313: IFFALSE 15323
// result := true ;
15315: LD_ADDR_VAR 0 2
15319: PUSH
15320: LD_INT 1
15322: ST_TO_ADDR
// end ;
15323: LD_VAR 0 2
15327: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15328: LD_INT 0
15330: PPUSH
15331: PPUSH
15332: PPUSH
15333: PPUSH
// if pos < 1 then
15334: LD_VAR 0 2
15338: PUSH
15339: LD_INT 1
15341: LESS
15342: IFFALSE 15346
// exit ;
15344: GO 15649
// if pos = 1 then
15346: LD_VAR 0 2
15350: PUSH
15351: LD_INT 1
15353: EQUAL
15354: IFFALSE 15387
// result := Replace ( arr , pos [ 1 ] , value ) else
15356: LD_ADDR_VAR 0 4
15360: PUSH
15361: LD_VAR 0 1
15365: PPUSH
15366: LD_VAR 0 2
15370: PUSH
15371: LD_INT 1
15373: ARRAY
15374: PPUSH
15375: LD_VAR 0 3
15379: PPUSH
15380: CALL_OW 1
15384: ST_TO_ADDR
15385: GO 15649
// begin tmp := arr ;
15387: LD_ADDR_VAR 0 6
15391: PUSH
15392: LD_VAR 0 1
15396: ST_TO_ADDR
// s_arr := [ tmp ] ;
15397: LD_ADDR_VAR 0 7
15401: PUSH
15402: LD_VAR 0 6
15406: PUSH
15407: EMPTY
15408: LIST
15409: ST_TO_ADDR
// for i = 1 to pos - 1 do
15410: LD_ADDR_VAR 0 5
15414: PUSH
15415: DOUBLE
15416: LD_INT 1
15418: DEC
15419: ST_TO_ADDR
15420: LD_VAR 0 2
15424: PUSH
15425: LD_INT 1
15427: MINUS
15428: PUSH
15429: FOR_TO
15430: IFFALSE 15475
// begin tmp := tmp [ pos [ i ] ] ;
15432: LD_ADDR_VAR 0 6
15436: PUSH
15437: LD_VAR 0 6
15441: PUSH
15442: LD_VAR 0 2
15446: PUSH
15447: LD_VAR 0 5
15451: ARRAY
15452: ARRAY
15453: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15454: LD_ADDR_VAR 0 7
15458: PUSH
15459: LD_VAR 0 7
15463: PUSH
15464: LD_VAR 0 6
15468: PUSH
15469: EMPTY
15470: LIST
15471: ADD
15472: ST_TO_ADDR
// end ;
15473: GO 15429
15475: POP
15476: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15477: LD_ADDR_VAR 0 6
15481: PUSH
15482: LD_VAR 0 6
15486: PPUSH
15487: LD_VAR 0 2
15491: PUSH
15492: LD_VAR 0 2
15496: ARRAY
15497: PPUSH
15498: LD_VAR 0 3
15502: PPUSH
15503: CALL_OW 1
15507: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15508: LD_ADDR_VAR 0 7
15512: PUSH
15513: LD_VAR 0 7
15517: PPUSH
15518: LD_VAR 0 7
15522: PPUSH
15523: LD_VAR 0 6
15527: PPUSH
15528: CALL_OW 1
15532: ST_TO_ADDR
// for i = s_arr downto 2 do
15533: LD_ADDR_VAR 0 5
15537: PUSH
15538: DOUBLE
15539: LD_VAR 0 7
15543: INC
15544: ST_TO_ADDR
15545: LD_INT 2
15547: PUSH
15548: FOR_DOWNTO
15549: IFFALSE 15633
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15551: LD_ADDR_VAR 0 6
15555: PUSH
15556: LD_VAR 0 7
15560: PUSH
15561: LD_VAR 0 5
15565: PUSH
15566: LD_INT 1
15568: MINUS
15569: ARRAY
15570: PPUSH
15571: LD_VAR 0 2
15575: PUSH
15576: LD_VAR 0 5
15580: PUSH
15581: LD_INT 1
15583: MINUS
15584: ARRAY
15585: PPUSH
15586: LD_VAR 0 7
15590: PUSH
15591: LD_VAR 0 5
15595: ARRAY
15596: PPUSH
15597: CALL_OW 1
15601: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15602: LD_ADDR_VAR 0 7
15606: PUSH
15607: LD_VAR 0 7
15611: PPUSH
15612: LD_VAR 0 5
15616: PUSH
15617: LD_INT 1
15619: MINUS
15620: PPUSH
15621: LD_VAR 0 6
15625: PPUSH
15626: CALL_OW 1
15630: ST_TO_ADDR
// end ;
15631: GO 15548
15633: POP
15634: POP
// result := s_arr [ 1 ] ;
15635: LD_ADDR_VAR 0 4
15639: PUSH
15640: LD_VAR 0 7
15644: PUSH
15645: LD_INT 1
15647: ARRAY
15648: ST_TO_ADDR
// end ; end ;
15649: LD_VAR 0 4
15653: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15654: LD_INT 0
15656: PPUSH
15657: PPUSH
// if not list then
15658: LD_VAR 0 1
15662: NOT
15663: IFFALSE 15667
// exit ;
15665: GO 15758
// i := list [ pos1 ] ;
15667: LD_ADDR_VAR 0 5
15671: PUSH
15672: LD_VAR 0 1
15676: PUSH
15677: LD_VAR 0 2
15681: ARRAY
15682: ST_TO_ADDR
// if not i then
15683: LD_VAR 0 5
15687: NOT
15688: IFFALSE 15692
// exit ;
15690: GO 15758
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15692: LD_ADDR_VAR 0 1
15696: PUSH
15697: LD_VAR 0 1
15701: PPUSH
15702: LD_VAR 0 2
15706: PPUSH
15707: LD_VAR 0 1
15711: PUSH
15712: LD_VAR 0 3
15716: ARRAY
15717: PPUSH
15718: CALL_OW 1
15722: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15723: LD_ADDR_VAR 0 1
15727: PUSH
15728: LD_VAR 0 1
15732: PPUSH
15733: LD_VAR 0 3
15737: PPUSH
15738: LD_VAR 0 5
15742: PPUSH
15743: CALL_OW 1
15747: ST_TO_ADDR
// result := list ;
15748: LD_ADDR_VAR 0 4
15752: PUSH
15753: LD_VAR 0 1
15757: ST_TO_ADDR
// end ;
15758: LD_VAR 0 4
15762: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15763: LD_INT 0
15765: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15766: LD_ADDR_VAR 0 5
15770: PUSH
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 250
15780: PPUSH
15781: LD_VAR 0 1
15785: PPUSH
15786: CALL_OW 251
15790: PPUSH
15791: LD_VAR 0 2
15795: PPUSH
15796: LD_VAR 0 3
15800: PPUSH
15801: LD_VAR 0 4
15805: PPUSH
15806: CALL 15816 0 5
15810: ST_TO_ADDR
// end ;
15811: LD_VAR 0 5
15815: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15816: LD_INT 0
15818: PPUSH
15819: PPUSH
15820: PPUSH
15821: PPUSH
// if not list then
15822: LD_VAR 0 3
15826: NOT
15827: IFFALSE 15831
// exit ;
15829: GO 16219
// result := [ ] ;
15831: LD_ADDR_VAR 0 6
15835: PUSH
15836: EMPTY
15837: ST_TO_ADDR
// for i in list do
15838: LD_ADDR_VAR 0 7
15842: PUSH
15843: LD_VAR 0 3
15847: PUSH
15848: FOR_IN
15849: IFFALSE 16051
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15851: LD_ADDR_VAR 0 9
15855: PUSH
15856: LD_VAR 0 7
15860: PPUSH
15861: LD_VAR 0 1
15865: PPUSH
15866: LD_VAR 0 2
15870: PPUSH
15871: CALL_OW 297
15875: ST_TO_ADDR
// if not result then
15876: LD_VAR 0 6
15880: NOT
15881: IFFALSE 15907
// result := [ [ i , tmp ] ] else
15883: LD_ADDR_VAR 0 6
15887: PUSH
15888: LD_VAR 0 7
15892: PUSH
15893: LD_VAR 0 9
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: EMPTY
15903: LIST
15904: ST_TO_ADDR
15905: GO 16049
// begin if result [ result ] [ 2 ] < tmp then
15907: LD_VAR 0 6
15911: PUSH
15912: LD_VAR 0 6
15916: ARRAY
15917: PUSH
15918: LD_INT 2
15920: ARRAY
15921: PUSH
15922: LD_VAR 0 9
15926: LESS
15927: IFFALSE 15969
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15929: LD_ADDR_VAR 0 6
15933: PUSH
15934: LD_VAR 0 6
15938: PPUSH
15939: LD_VAR 0 6
15943: PUSH
15944: LD_INT 1
15946: PLUS
15947: PPUSH
15948: LD_VAR 0 7
15952: PUSH
15953: LD_VAR 0 9
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PPUSH
15962: CALL_OW 2
15966: ST_TO_ADDR
15967: GO 16049
// for j = 1 to result do
15969: LD_ADDR_VAR 0 8
15973: PUSH
15974: DOUBLE
15975: LD_INT 1
15977: DEC
15978: ST_TO_ADDR
15979: LD_VAR 0 6
15983: PUSH
15984: FOR_TO
15985: IFFALSE 16047
// begin if tmp < result [ j ] [ 2 ] then
15987: LD_VAR 0 9
15991: PUSH
15992: LD_VAR 0 6
15996: PUSH
15997: LD_VAR 0 8
16001: ARRAY
16002: PUSH
16003: LD_INT 2
16005: ARRAY
16006: LESS
16007: IFFALSE 16045
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16009: LD_ADDR_VAR 0 6
16013: PUSH
16014: LD_VAR 0 6
16018: PPUSH
16019: LD_VAR 0 8
16023: PPUSH
16024: LD_VAR 0 7
16028: PUSH
16029: LD_VAR 0 9
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PPUSH
16038: CALL_OW 2
16042: ST_TO_ADDR
// break ;
16043: GO 16047
// end ; end ;
16045: GO 15984
16047: POP
16048: POP
// end ; end ;
16049: GO 15848
16051: POP
16052: POP
// if result and not asc then
16053: LD_VAR 0 6
16057: PUSH
16058: LD_VAR 0 4
16062: NOT
16063: AND
16064: IFFALSE 16139
// begin tmp := result ;
16066: LD_ADDR_VAR 0 9
16070: PUSH
16071: LD_VAR 0 6
16075: ST_TO_ADDR
// for i = tmp downto 1 do
16076: LD_ADDR_VAR 0 7
16080: PUSH
16081: DOUBLE
16082: LD_VAR 0 9
16086: INC
16087: ST_TO_ADDR
16088: LD_INT 1
16090: PUSH
16091: FOR_DOWNTO
16092: IFFALSE 16137
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16094: LD_ADDR_VAR 0 6
16098: PUSH
16099: LD_VAR 0 6
16103: PPUSH
16104: LD_VAR 0 9
16108: PUSH
16109: LD_VAR 0 7
16113: MINUS
16114: PUSH
16115: LD_INT 1
16117: PLUS
16118: PPUSH
16119: LD_VAR 0 9
16123: PUSH
16124: LD_VAR 0 7
16128: ARRAY
16129: PPUSH
16130: CALL_OW 1
16134: ST_TO_ADDR
16135: GO 16091
16137: POP
16138: POP
// end ; tmp := [ ] ;
16139: LD_ADDR_VAR 0 9
16143: PUSH
16144: EMPTY
16145: ST_TO_ADDR
// if mode then
16146: LD_VAR 0 5
16150: IFFALSE 16219
// begin for i = 1 to result do
16152: LD_ADDR_VAR 0 7
16156: PUSH
16157: DOUBLE
16158: LD_INT 1
16160: DEC
16161: ST_TO_ADDR
16162: LD_VAR 0 6
16166: PUSH
16167: FOR_TO
16168: IFFALSE 16207
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16170: LD_ADDR_VAR 0 9
16174: PUSH
16175: LD_VAR 0 9
16179: PPUSH
16180: LD_VAR 0 7
16184: PPUSH
16185: LD_VAR 0 6
16189: PUSH
16190: LD_VAR 0 7
16194: ARRAY
16195: PUSH
16196: LD_INT 1
16198: ARRAY
16199: PPUSH
16200: CALL_OW 1
16204: ST_TO_ADDR
16205: GO 16167
16207: POP
16208: POP
// result := tmp ;
16209: LD_ADDR_VAR 0 6
16213: PUSH
16214: LD_VAR 0 9
16218: ST_TO_ADDR
// end ; end ;
16219: LD_VAR 0 6
16223: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16224: LD_INT 0
16226: PPUSH
16227: PPUSH
16228: PPUSH
16229: PPUSH
16230: PPUSH
16231: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16232: LD_ADDR_VAR 0 5
16236: PUSH
16237: LD_INT 0
16239: PUSH
16240: LD_INT 0
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: EMPTY
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: ST_TO_ADDR
// if not x or not y then
16254: LD_VAR 0 2
16258: NOT
16259: PUSH
16260: LD_VAR 0 3
16264: NOT
16265: OR
16266: IFFALSE 16270
// exit ;
16268: GO 17922
// if not range then
16270: LD_VAR 0 4
16274: NOT
16275: IFFALSE 16285
// range := 10 ;
16277: LD_ADDR_VAR 0 4
16281: PUSH
16282: LD_INT 10
16284: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16285: LD_ADDR_VAR 0 8
16289: PUSH
16290: LD_INT 81
16292: PUSH
16293: LD_VAR 0 1
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 92
16304: PUSH
16305: LD_VAR 0 2
16309: PUSH
16310: LD_VAR 0 3
16314: PUSH
16315: LD_VAR 0 4
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: LD_INT 21
16331: PUSH
16332: LD_INT 3
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: PPUSH
16348: CALL_OW 69
16352: ST_TO_ADDR
// if not tmp then
16353: LD_VAR 0 8
16357: NOT
16358: IFFALSE 16362
// exit ;
16360: GO 17922
// for i in tmp do
16362: LD_ADDR_VAR 0 6
16366: PUSH
16367: LD_VAR 0 8
16371: PUSH
16372: FOR_IN
16373: IFFALSE 17897
// begin points := [ 0 , 0 , 0 ] ;
16375: LD_ADDR_VAR 0 9
16379: PUSH
16380: LD_INT 0
16382: PUSH
16383: LD_INT 0
16385: PUSH
16386: LD_INT 0
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: LIST
16393: ST_TO_ADDR
// bpoints := 1 ;
16394: LD_ADDR_VAR 0 10
16398: PUSH
16399: LD_INT 1
16401: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16402: LD_VAR 0 6
16406: PPUSH
16407: CALL_OW 247
16411: PUSH
16412: LD_INT 1
16414: DOUBLE
16415: EQUAL
16416: IFTRUE 16420
16418: GO 16998
16420: POP
// begin if GetClass ( i ) = 1 then
16421: LD_VAR 0 6
16425: PPUSH
16426: CALL_OW 257
16430: PUSH
16431: LD_INT 1
16433: EQUAL
16434: IFFALSE 16455
// points := [ 10 , 5 , 3 ] ;
16436: LD_ADDR_VAR 0 9
16440: PUSH
16441: LD_INT 10
16443: PUSH
16444: LD_INT 5
16446: PUSH
16447: LD_INT 3
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: LIST
16454: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16455: LD_VAR 0 6
16459: PPUSH
16460: CALL_OW 257
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 3
16470: PUSH
16471: LD_INT 4
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: LIST
16478: IN
16479: IFFALSE 16500
// points := [ 3 , 2 , 1 ] ;
16481: LD_ADDR_VAR 0 9
16485: PUSH
16486: LD_INT 3
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: LD_INT 1
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: LIST
16499: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16500: LD_VAR 0 6
16504: PPUSH
16505: CALL_OW 257
16509: PUSH
16510: LD_INT 5
16512: EQUAL
16513: IFFALSE 16534
// points := [ 130 , 5 , 2 ] ;
16515: LD_ADDR_VAR 0 9
16519: PUSH
16520: LD_INT 130
16522: PUSH
16523: LD_INT 5
16525: PUSH
16526: LD_INT 2
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: LIST
16533: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16534: LD_VAR 0 6
16538: PPUSH
16539: CALL_OW 257
16543: PUSH
16544: LD_INT 8
16546: EQUAL
16547: IFFALSE 16568
// points := [ 35 , 35 , 30 ] ;
16549: LD_ADDR_VAR 0 9
16553: PUSH
16554: LD_INT 35
16556: PUSH
16557: LD_INT 35
16559: PUSH
16560: LD_INT 30
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: LIST
16567: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16568: LD_VAR 0 6
16572: PPUSH
16573: CALL_OW 257
16577: PUSH
16578: LD_INT 9
16580: EQUAL
16581: IFFALSE 16602
// points := [ 20 , 55 , 40 ] ;
16583: LD_ADDR_VAR 0 9
16587: PUSH
16588: LD_INT 20
16590: PUSH
16591: LD_INT 55
16593: PUSH
16594: LD_INT 40
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16602: LD_VAR 0 6
16606: PPUSH
16607: CALL_OW 257
16611: PUSH
16612: LD_INT 12
16614: PUSH
16615: LD_INT 16
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: IN
16622: IFFALSE 16643
// points := [ 5 , 3 , 2 ] ;
16624: LD_ADDR_VAR 0 9
16628: PUSH
16629: LD_INT 5
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: LD_INT 2
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16643: LD_VAR 0 6
16647: PPUSH
16648: CALL_OW 257
16652: PUSH
16653: LD_INT 17
16655: EQUAL
16656: IFFALSE 16677
// points := [ 100 , 50 , 75 ] ;
16658: LD_ADDR_VAR 0 9
16662: PUSH
16663: LD_INT 100
16665: PUSH
16666: LD_INT 50
16668: PUSH
16669: LD_INT 75
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16677: LD_VAR 0 6
16681: PPUSH
16682: CALL_OW 257
16686: PUSH
16687: LD_INT 15
16689: EQUAL
16690: IFFALSE 16711
// points := [ 10 , 5 , 3 ] ;
16692: LD_ADDR_VAR 0 9
16696: PUSH
16697: LD_INT 10
16699: PUSH
16700: LD_INT 5
16702: PUSH
16703: LD_INT 3
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16711: LD_VAR 0 6
16715: PPUSH
16716: CALL_OW 257
16720: PUSH
16721: LD_INT 14
16723: EQUAL
16724: IFFALSE 16745
// points := [ 10 , 0 , 0 ] ;
16726: LD_ADDR_VAR 0 9
16730: PUSH
16731: LD_INT 10
16733: PUSH
16734: LD_INT 0
16736: PUSH
16737: LD_INT 0
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: LIST
16744: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16745: LD_VAR 0 6
16749: PPUSH
16750: CALL_OW 257
16754: PUSH
16755: LD_INT 11
16757: EQUAL
16758: IFFALSE 16779
// points := [ 30 , 10 , 5 ] ;
16760: LD_ADDR_VAR 0 9
16764: PUSH
16765: LD_INT 30
16767: PUSH
16768: LD_INT 10
16770: PUSH
16771: LD_INT 5
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: LIST
16778: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16779: LD_VAR 0 1
16783: PPUSH
16784: LD_INT 5
16786: PPUSH
16787: CALL_OW 321
16791: PUSH
16792: LD_INT 2
16794: EQUAL
16795: IFFALSE 16812
// bpoints := bpoints * 1.8 ;
16797: LD_ADDR_VAR 0 10
16801: PUSH
16802: LD_VAR 0 10
16806: PUSH
16807: LD_REAL  1.80000000000000E+0000
16810: MUL
16811: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16812: LD_VAR 0 6
16816: PPUSH
16817: CALL_OW 257
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: LD_INT 2
16827: PUSH
16828: LD_INT 3
16830: PUSH
16831: LD_INT 4
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: IN
16840: PUSH
16841: LD_VAR 0 1
16845: PPUSH
16846: LD_INT 51
16848: PPUSH
16849: CALL_OW 321
16853: PUSH
16854: LD_INT 2
16856: EQUAL
16857: AND
16858: IFFALSE 16875
// bpoints := bpoints * 1.2 ;
16860: LD_ADDR_VAR 0 10
16864: PUSH
16865: LD_VAR 0 10
16869: PUSH
16870: LD_REAL  1.20000000000000E+0000
16873: MUL
16874: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16875: LD_VAR 0 6
16879: PPUSH
16880: CALL_OW 257
16884: PUSH
16885: LD_INT 5
16887: PUSH
16888: LD_INT 7
16890: PUSH
16891: LD_INT 9
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: IN
16899: PUSH
16900: LD_VAR 0 1
16904: PPUSH
16905: LD_INT 52
16907: PPUSH
16908: CALL_OW 321
16912: PUSH
16913: LD_INT 2
16915: EQUAL
16916: AND
16917: IFFALSE 16934
// bpoints := bpoints * 1.5 ;
16919: LD_ADDR_VAR 0 10
16923: PUSH
16924: LD_VAR 0 10
16928: PUSH
16929: LD_REAL  1.50000000000000E+0000
16932: MUL
16933: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16934: LD_VAR 0 1
16938: PPUSH
16939: LD_INT 66
16941: PPUSH
16942: CALL_OW 321
16946: PUSH
16947: LD_INT 2
16949: EQUAL
16950: IFFALSE 16967
// bpoints := bpoints * 1.1 ;
16952: LD_ADDR_VAR 0 10
16956: PUSH
16957: LD_VAR 0 10
16961: PUSH
16962: LD_REAL  1.10000000000000E+0000
16965: MUL
16966: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16967: LD_ADDR_VAR 0 10
16971: PUSH
16972: LD_VAR 0 10
16976: PUSH
16977: LD_VAR 0 6
16981: PPUSH
16982: LD_INT 1
16984: PPUSH
16985: CALL_OW 259
16989: PUSH
16990: LD_REAL  1.15000000000000E+0000
16993: MUL
16994: MUL
16995: ST_TO_ADDR
// end ; unit_vehicle :
16996: GO 17826
16998: LD_INT 2
17000: DOUBLE
17001: EQUAL
17002: IFTRUE 17006
17004: GO 17814
17006: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17007: LD_VAR 0 6
17011: PPUSH
17012: CALL_OW 264
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: LD_INT 42
17022: PUSH
17023: LD_INT 24
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: LIST
17030: IN
17031: IFFALSE 17052
// points := [ 25 , 5 , 3 ] ;
17033: LD_ADDR_VAR 0 9
17037: PUSH
17038: LD_INT 25
17040: PUSH
17041: LD_INT 5
17043: PUSH
17044: LD_INT 3
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17052: LD_VAR 0 6
17056: PPUSH
17057: CALL_OW 264
17061: PUSH
17062: LD_INT 4
17064: PUSH
17065: LD_INT 43
17067: PUSH
17068: LD_INT 25
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: IN
17076: IFFALSE 17097
// points := [ 40 , 15 , 5 ] ;
17078: LD_ADDR_VAR 0 9
17082: PUSH
17083: LD_INT 40
17085: PUSH
17086: LD_INT 15
17088: PUSH
17089: LD_INT 5
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: LIST
17096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17097: LD_VAR 0 6
17101: PPUSH
17102: CALL_OW 264
17106: PUSH
17107: LD_INT 3
17109: PUSH
17110: LD_INT 23
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: IN
17117: IFFALSE 17138
// points := [ 7 , 25 , 8 ] ;
17119: LD_ADDR_VAR 0 9
17123: PUSH
17124: LD_INT 7
17126: PUSH
17127: LD_INT 25
17129: PUSH
17130: LD_INT 8
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17138: LD_VAR 0 6
17142: PPUSH
17143: CALL_OW 264
17147: PUSH
17148: LD_INT 5
17150: PUSH
17151: LD_INT 27
17153: PUSH
17154: LD_INT 44
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: LIST
17161: IN
17162: IFFALSE 17183
// points := [ 14 , 50 , 16 ] ;
17164: LD_ADDR_VAR 0 9
17168: PUSH
17169: LD_INT 14
17171: PUSH
17172: LD_INT 50
17174: PUSH
17175: LD_INT 16
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17183: LD_VAR 0 6
17187: PPUSH
17188: CALL_OW 264
17192: PUSH
17193: LD_INT 6
17195: PUSH
17196: LD_INT 46
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: IN
17203: IFFALSE 17224
// points := [ 32 , 120 , 70 ] ;
17205: LD_ADDR_VAR 0 9
17209: PUSH
17210: LD_INT 32
17212: PUSH
17213: LD_INT 120
17215: PUSH
17216: LD_INT 70
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17224: LD_VAR 0 6
17228: PPUSH
17229: CALL_OW 264
17233: PUSH
17234: LD_INT 7
17236: PUSH
17237: LD_INT 28
17239: PUSH
17240: LD_INT 45
17242: PUSH
17243: LD_EXP 97
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: IN
17254: IFFALSE 17275
// points := [ 35 , 20 , 45 ] ;
17256: LD_ADDR_VAR 0 9
17260: PUSH
17261: LD_INT 35
17263: PUSH
17264: LD_INT 20
17266: PUSH
17267: LD_INT 45
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: LIST
17274: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17275: LD_VAR 0 6
17279: PPUSH
17280: CALL_OW 264
17284: PUSH
17285: LD_INT 47
17287: PUSH
17288: EMPTY
17289: LIST
17290: IN
17291: IFFALSE 17312
// points := [ 67 , 45 , 75 ] ;
17293: LD_ADDR_VAR 0 9
17297: PUSH
17298: LD_INT 67
17300: PUSH
17301: LD_INT 45
17303: PUSH
17304: LD_INT 75
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17312: LD_VAR 0 6
17316: PPUSH
17317: CALL_OW 264
17321: PUSH
17322: LD_INT 26
17324: PUSH
17325: EMPTY
17326: LIST
17327: IN
17328: IFFALSE 17349
// points := [ 120 , 30 , 80 ] ;
17330: LD_ADDR_VAR 0 9
17334: PUSH
17335: LD_INT 120
17337: PUSH
17338: LD_INT 30
17340: PUSH
17341: LD_INT 80
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: LIST
17348: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17349: LD_VAR 0 6
17353: PPUSH
17354: CALL_OW 264
17358: PUSH
17359: LD_INT 22
17361: PUSH
17362: EMPTY
17363: LIST
17364: IN
17365: IFFALSE 17386
// points := [ 40 , 1 , 1 ] ;
17367: LD_ADDR_VAR 0 9
17371: PUSH
17372: LD_INT 40
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: LIST
17385: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17386: LD_VAR 0 6
17390: PPUSH
17391: CALL_OW 264
17395: PUSH
17396: LD_INT 29
17398: PUSH
17399: EMPTY
17400: LIST
17401: IN
17402: IFFALSE 17423
// points := [ 70 , 200 , 400 ] ;
17404: LD_ADDR_VAR 0 9
17408: PUSH
17409: LD_INT 70
17411: PUSH
17412: LD_INT 200
17414: PUSH
17415: LD_INT 400
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17423: LD_VAR 0 6
17427: PPUSH
17428: CALL_OW 264
17432: PUSH
17433: LD_INT 14
17435: PUSH
17436: LD_INT 53
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: IN
17443: IFFALSE 17464
// points := [ 40 , 10 , 20 ] ;
17445: LD_ADDR_VAR 0 9
17449: PUSH
17450: LD_INT 40
17452: PUSH
17453: LD_INT 10
17455: PUSH
17456: LD_INT 20
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: LIST
17463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17464: LD_VAR 0 6
17468: PPUSH
17469: CALL_OW 264
17473: PUSH
17474: LD_INT 9
17476: PUSH
17477: EMPTY
17478: LIST
17479: IN
17480: IFFALSE 17501
// points := [ 5 , 70 , 20 ] ;
17482: LD_ADDR_VAR 0 9
17486: PUSH
17487: LD_INT 5
17489: PUSH
17490: LD_INT 70
17492: PUSH
17493: LD_INT 20
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17501: LD_VAR 0 6
17505: PPUSH
17506: CALL_OW 264
17510: PUSH
17511: LD_INT 10
17513: PUSH
17514: EMPTY
17515: LIST
17516: IN
17517: IFFALSE 17538
// points := [ 35 , 110 , 70 ] ;
17519: LD_ADDR_VAR 0 9
17523: PUSH
17524: LD_INT 35
17526: PUSH
17527: LD_INT 110
17529: PUSH
17530: LD_INT 70
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17538: LD_VAR 0 6
17542: PPUSH
17543: CALL_OW 265
17547: PUSH
17548: LD_INT 25
17550: EQUAL
17551: IFFALSE 17572
// points := [ 80 , 65 , 100 ] ;
17553: LD_ADDR_VAR 0 9
17557: PUSH
17558: LD_INT 80
17560: PUSH
17561: LD_INT 65
17563: PUSH
17564: LD_INT 100
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: LIST
17571: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17572: LD_VAR 0 6
17576: PPUSH
17577: CALL_OW 263
17581: PUSH
17582: LD_INT 1
17584: EQUAL
17585: IFFALSE 17620
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17587: LD_ADDR_VAR 0 10
17591: PUSH
17592: LD_VAR 0 10
17596: PUSH
17597: LD_VAR 0 6
17601: PPUSH
17602: CALL_OW 311
17606: PPUSH
17607: LD_INT 3
17609: PPUSH
17610: CALL_OW 259
17614: PUSH
17615: LD_INT 4
17617: MUL
17618: MUL
17619: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17620: LD_VAR 0 6
17624: PPUSH
17625: CALL_OW 263
17629: PUSH
17630: LD_INT 2
17632: EQUAL
17633: IFFALSE 17684
// begin j := IsControledBy ( i ) ;
17635: LD_ADDR_VAR 0 7
17639: PUSH
17640: LD_VAR 0 6
17644: PPUSH
17645: CALL_OW 312
17649: ST_TO_ADDR
// if j then
17650: LD_VAR 0 7
17654: IFFALSE 17684
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17656: LD_ADDR_VAR 0 10
17660: PUSH
17661: LD_VAR 0 10
17665: PUSH
17666: LD_VAR 0 7
17670: PPUSH
17671: LD_INT 3
17673: PPUSH
17674: CALL_OW 259
17678: PUSH
17679: LD_INT 3
17681: MUL
17682: MUL
17683: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17684: LD_VAR 0 6
17688: PPUSH
17689: CALL_OW 264
17693: PUSH
17694: LD_INT 5
17696: PUSH
17697: LD_INT 6
17699: PUSH
17700: LD_INT 46
17702: PUSH
17703: LD_INT 44
17705: PUSH
17706: LD_INT 47
17708: PUSH
17709: LD_INT 45
17711: PUSH
17712: LD_INT 28
17714: PUSH
17715: LD_INT 7
17717: PUSH
17718: LD_INT 27
17720: PUSH
17721: LD_INT 29
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: IN
17736: PUSH
17737: LD_VAR 0 1
17741: PPUSH
17742: LD_INT 52
17744: PPUSH
17745: CALL_OW 321
17749: PUSH
17750: LD_INT 2
17752: EQUAL
17753: AND
17754: IFFALSE 17771
// bpoints := bpoints * 1.2 ;
17756: LD_ADDR_VAR 0 10
17760: PUSH
17761: LD_VAR 0 10
17765: PUSH
17766: LD_REAL  1.20000000000000E+0000
17769: MUL
17770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17771: LD_VAR 0 6
17775: PPUSH
17776: CALL_OW 264
17780: PUSH
17781: LD_INT 6
17783: PUSH
17784: LD_INT 46
17786: PUSH
17787: LD_INT 47
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: LIST
17794: IN
17795: IFFALSE 17812
// bpoints := bpoints * 1.2 ;
17797: LD_ADDR_VAR 0 10
17801: PUSH
17802: LD_VAR 0 10
17806: PUSH
17807: LD_REAL  1.20000000000000E+0000
17810: MUL
17811: ST_TO_ADDR
// end ; unit_building :
17812: GO 17826
17814: LD_INT 3
17816: DOUBLE
17817: EQUAL
17818: IFTRUE 17822
17820: GO 17825
17822: POP
// ; end ;
17823: GO 17826
17825: POP
// for j = 1 to 3 do
17826: LD_ADDR_VAR 0 7
17830: PUSH
17831: DOUBLE
17832: LD_INT 1
17834: DEC
17835: ST_TO_ADDR
17836: LD_INT 3
17838: PUSH
17839: FOR_TO
17840: IFFALSE 17893
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17842: LD_ADDR_VAR 0 5
17846: PUSH
17847: LD_VAR 0 5
17851: PPUSH
17852: LD_VAR 0 7
17856: PPUSH
17857: LD_VAR 0 5
17861: PUSH
17862: LD_VAR 0 7
17866: ARRAY
17867: PUSH
17868: LD_VAR 0 9
17872: PUSH
17873: LD_VAR 0 7
17877: ARRAY
17878: PUSH
17879: LD_VAR 0 10
17883: MUL
17884: PLUS
17885: PPUSH
17886: CALL_OW 1
17890: ST_TO_ADDR
17891: GO 17839
17893: POP
17894: POP
// end ;
17895: GO 16372
17897: POP
17898: POP
// result := Replace ( result , 4 , tmp ) ;
17899: LD_ADDR_VAR 0 5
17903: PUSH
17904: LD_VAR 0 5
17908: PPUSH
17909: LD_INT 4
17911: PPUSH
17912: LD_VAR 0 8
17916: PPUSH
17917: CALL_OW 1
17921: ST_TO_ADDR
// end ;
17922: LD_VAR 0 5
17926: RET
// export function DangerAtRange ( unit , range ) ; begin
17927: LD_INT 0
17929: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17930: LD_ADDR_VAR 0 3
17934: PUSH
17935: LD_VAR 0 1
17939: PPUSH
17940: CALL_OW 255
17944: PPUSH
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL_OW 250
17954: PPUSH
17955: LD_VAR 0 1
17959: PPUSH
17960: CALL_OW 251
17964: PPUSH
17965: LD_VAR 0 2
17969: PPUSH
17970: CALL 16224 0 4
17974: ST_TO_ADDR
// end ;
17975: LD_VAR 0 3
17979: RET
// export function DangerInArea ( side , area ) ; begin
17980: LD_INT 0
17982: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17983: LD_ADDR_VAR 0 3
17987: PUSH
17988: LD_VAR 0 2
17992: PPUSH
17993: LD_INT 81
17995: PUSH
17996: LD_VAR 0 1
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PPUSH
18005: CALL_OW 70
18009: ST_TO_ADDR
// end ;
18010: LD_VAR 0 3
18014: RET
// export function IsExtension ( b ) ; begin
18015: LD_INT 0
18017: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18018: LD_ADDR_VAR 0 2
18022: PUSH
18023: LD_VAR 0 1
18027: PUSH
18028: LD_INT 23
18030: PUSH
18031: LD_INT 20
18033: PUSH
18034: LD_INT 22
18036: PUSH
18037: LD_INT 17
18039: PUSH
18040: LD_INT 24
18042: PUSH
18043: LD_INT 21
18045: PUSH
18046: LD_INT 19
18048: PUSH
18049: LD_INT 16
18051: PUSH
18052: LD_INT 25
18054: PUSH
18055: LD_INT 18
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: IN
18070: ST_TO_ADDR
// end ;
18071: LD_VAR 0 2
18075: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18076: LD_INT 0
18078: PPUSH
18079: PPUSH
18080: PPUSH
// result := [ ] ;
18081: LD_ADDR_VAR 0 4
18085: PUSH
18086: EMPTY
18087: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18088: LD_ADDR_VAR 0 5
18092: PUSH
18093: LD_VAR 0 2
18097: PPUSH
18098: LD_INT 21
18100: PUSH
18101: LD_INT 3
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PPUSH
18108: CALL_OW 70
18112: ST_TO_ADDR
// if not tmp then
18113: LD_VAR 0 5
18117: NOT
18118: IFFALSE 18122
// exit ;
18120: GO 18186
// if checkLink then
18122: LD_VAR 0 3
18126: IFFALSE 18176
// begin for i in tmp do
18128: LD_ADDR_VAR 0 6
18132: PUSH
18133: LD_VAR 0 5
18137: PUSH
18138: FOR_IN
18139: IFFALSE 18174
// if GetBase ( i ) <> base then
18141: LD_VAR 0 6
18145: PPUSH
18146: CALL_OW 274
18150: PUSH
18151: LD_VAR 0 1
18155: NONEQUAL
18156: IFFALSE 18172
// ComLinkToBase ( base , i ) ;
18158: LD_VAR 0 1
18162: PPUSH
18163: LD_VAR 0 6
18167: PPUSH
18168: CALL_OW 169
18172: GO 18138
18174: POP
18175: POP
// end ; result := tmp ;
18176: LD_ADDR_VAR 0 4
18180: PUSH
18181: LD_VAR 0 5
18185: ST_TO_ADDR
// end ;
18186: LD_VAR 0 4
18190: RET
// export function ComComplete ( units , b ) ; var i ; begin
18191: LD_INT 0
18193: PPUSH
18194: PPUSH
// if not units then
18195: LD_VAR 0 1
18199: NOT
18200: IFFALSE 18204
// exit ;
18202: GO 18294
// for i in units do
18204: LD_ADDR_VAR 0 4
18208: PUSH
18209: LD_VAR 0 1
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18292
// if BuildingStatus ( b ) = bs_build then
18217: LD_VAR 0 2
18221: PPUSH
18222: CALL_OW 461
18226: PUSH
18227: LD_INT 1
18229: EQUAL
18230: IFFALSE 18290
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18232: LD_VAR 0 4
18236: PPUSH
18237: LD_STRING h
18239: PUSH
18240: LD_VAR 0 2
18244: PPUSH
18245: CALL_OW 250
18249: PUSH
18250: LD_VAR 0 2
18254: PPUSH
18255: CALL_OW 251
18259: PUSH
18260: LD_VAR 0 2
18264: PUSH
18265: LD_INT 0
18267: PUSH
18268: LD_INT 0
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: PPUSH
18286: CALL_OW 446
18290: GO 18214
18292: POP
18293: POP
// end ;
18294: LD_VAR 0 3
18298: RET
// export function AddComComplete ( units , b ) ; var i ; begin
18299: LD_INT 0
18301: PPUSH
18302: PPUSH
// if not units then
18303: LD_VAR 0 1
18307: NOT
18308: IFFALSE 18312
// exit ;
18310: GO 18402
// for i in units do
18312: LD_ADDR_VAR 0 4
18316: PUSH
18317: LD_VAR 0 1
18321: PUSH
18322: FOR_IN
18323: IFFALSE 18400
// if BuildingStatus ( b ) = bs_build then
18325: LD_VAR 0 2
18329: PPUSH
18330: CALL_OW 461
18334: PUSH
18335: LD_INT 1
18337: EQUAL
18338: IFFALSE 18398
// AddTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18340: LD_VAR 0 4
18344: PPUSH
18345: LD_STRING h
18347: PUSH
18348: LD_VAR 0 2
18352: PPUSH
18353: CALL_OW 250
18357: PUSH
18358: LD_VAR 0 2
18362: PPUSH
18363: CALL_OW 251
18367: PUSH
18368: LD_VAR 0 2
18372: PUSH
18373: LD_INT 0
18375: PUSH
18376: LD_INT 0
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: PUSH
18391: EMPTY
18392: LIST
18393: PPUSH
18394: CALL_OW 447
18398: GO 18322
18400: POP
18401: POP
// end ;
18402: LD_VAR 0 3
18406: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18407: LD_INT 0
18409: PPUSH
18410: PPUSH
18411: PPUSH
18412: PPUSH
18413: PPUSH
18414: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18415: LD_VAR 0 1
18419: NOT
18420: PUSH
18421: LD_VAR 0 1
18425: PPUSH
18426: CALL_OW 263
18430: PUSH
18431: LD_INT 2
18433: NONEQUAL
18434: OR
18435: IFFALSE 18439
// exit ;
18437: GO 18755
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18439: LD_ADDR_VAR 0 6
18443: PUSH
18444: LD_INT 22
18446: PUSH
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 2
18463: PUSH
18464: LD_INT 30
18466: PUSH
18467: LD_INT 36
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 34
18476: PUSH
18477: LD_INT 31
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PPUSH
18493: CALL_OW 69
18497: ST_TO_ADDR
// if not tmp then
18498: LD_VAR 0 6
18502: NOT
18503: IFFALSE 18507
// exit ;
18505: GO 18755
// result := [ ] ;
18507: LD_ADDR_VAR 0 2
18511: PUSH
18512: EMPTY
18513: ST_TO_ADDR
// for i in tmp do
18514: LD_ADDR_VAR 0 3
18518: PUSH
18519: LD_VAR 0 6
18523: PUSH
18524: FOR_IN
18525: IFFALSE 18596
// begin t := UnitsInside ( i ) ;
18527: LD_ADDR_VAR 0 4
18531: PUSH
18532: LD_VAR 0 3
18536: PPUSH
18537: CALL_OW 313
18541: ST_TO_ADDR
// if t then
18542: LD_VAR 0 4
18546: IFFALSE 18594
// for j in t do
18548: LD_ADDR_VAR 0 7
18552: PUSH
18553: LD_VAR 0 4
18557: PUSH
18558: FOR_IN
18559: IFFALSE 18592
// result := Replace ( result , result + 1 , j ) ;
18561: LD_ADDR_VAR 0 2
18565: PUSH
18566: LD_VAR 0 2
18570: PPUSH
18571: LD_VAR 0 2
18575: PUSH
18576: LD_INT 1
18578: PLUS
18579: PPUSH
18580: LD_VAR 0 7
18584: PPUSH
18585: CALL_OW 1
18589: ST_TO_ADDR
18590: GO 18558
18592: POP
18593: POP
// end ;
18594: GO 18524
18596: POP
18597: POP
// if not result then
18598: LD_VAR 0 2
18602: NOT
18603: IFFALSE 18607
// exit ;
18605: GO 18755
// mech := result [ 1 ] ;
18607: LD_ADDR_VAR 0 5
18611: PUSH
18612: LD_VAR 0 2
18616: PUSH
18617: LD_INT 1
18619: ARRAY
18620: ST_TO_ADDR
// if result > 1 then
18621: LD_VAR 0 2
18625: PUSH
18626: LD_INT 1
18628: GREATER
18629: IFFALSE 18741
// begin for i = 2 to result do
18631: LD_ADDR_VAR 0 3
18635: PUSH
18636: DOUBLE
18637: LD_INT 2
18639: DEC
18640: ST_TO_ADDR
18641: LD_VAR 0 2
18645: PUSH
18646: FOR_TO
18647: IFFALSE 18739
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18649: LD_ADDR_VAR 0 4
18653: PUSH
18654: LD_VAR 0 2
18658: PUSH
18659: LD_VAR 0 3
18663: ARRAY
18664: PPUSH
18665: LD_INT 3
18667: PPUSH
18668: CALL_OW 259
18672: PUSH
18673: LD_VAR 0 2
18677: PUSH
18678: LD_VAR 0 3
18682: ARRAY
18683: PPUSH
18684: CALL_OW 432
18688: MINUS
18689: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18690: LD_VAR 0 4
18694: PUSH
18695: LD_VAR 0 5
18699: PPUSH
18700: LD_INT 3
18702: PPUSH
18703: CALL_OW 259
18707: PUSH
18708: LD_VAR 0 5
18712: PPUSH
18713: CALL_OW 432
18717: MINUS
18718: GREATEREQUAL
18719: IFFALSE 18737
// mech := result [ i ] ;
18721: LD_ADDR_VAR 0 5
18725: PUSH
18726: LD_VAR 0 2
18730: PUSH
18731: LD_VAR 0 3
18735: ARRAY
18736: ST_TO_ADDR
// end ;
18737: GO 18646
18739: POP
18740: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18741: LD_VAR 0 1
18745: PPUSH
18746: LD_VAR 0 5
18750: PPUSH
18751: CALL_OW 135
// end ;
18755: LD_VAR 0 2
18759: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18760: LD_INT 0
18762: PPUSH
18763: PPUSH
18764: PPUSH
18765: PPUSH
18766: PPUSH
18767: PPUSH
18768: PPUSH
18769: PPUSH
18770: PPUSH
18771: PPUSH
18772: PPUSH
18773: PPUSH
18774: PPUSH
// result := [ ] ;
18775: LD_ADDR_VAR 0 7
18779: PUSH
18780: EMPTY
18781: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18782: LD_VAR 0 1
18786: PPUSH
18787: CALL_OW 266
18791: PUSH
18792: LD_INT 0
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: IN
18802: NOT
18803: IFFALSE 18807
// exit ;
18805: GO 20441
// if name then
18807: LD_VAR 0 3
18811: IFFALSE 18827
// SetBName ( base_dep , name ) ;
18813: LD_VAR 0 1
18817: PPUSH
18818: LD_VAR 0 3
18822: PPUSH
18823: CALL_OW 500
// base := GetBase ( base_dep ) ;
18827: LD_ADDR_VAR 0 15
18831: PUSH
18832: LD_VAR 0 1
18836: PPUSH
18837: CALL_OW 274
18841: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18842: LD_ADDR_VAR 0 16
18846: PUSH
18847: LD_VAR 0 1
18851: PPUSH
18852: CALL_OW 255
18856: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18857: LD_ADDR_VAR 0 17
18861: PUSH
18862: LD_VAR 0 1
18866: PPUSH
18867: CALL_OW 248
18871: ST_TO_ADDR
// if sources then
18872: LD_VAR 0 5
18876: IFFALSE 18923
// for i = 1 to 3 do
18878: LD_ADDR_VAR 0 8
18882: PUSH
18883: DOUBLE
18884: LD_INT 1
18886: DEC
18887: ST_TO_ADDR
18888: LD_INT 3
18890: PUSH
18891: FOR_TO
18892: IFFALSE 18921
// AddResourceType ( base , i , sources [ i ] ) ;
18894: LD_VAR 0 15
18898: PPUSH
18899: LD_VAR 0 8
18903: PPUSH
18904: LD_VAR 0 5
18908: PUSH
18909: LD_VAR 0 8
18913: ARRAY
18914: PPUSH
18915: CALL_OW 276
18919: GO 18891
18921: POP
18922: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18923: LD_ADDR_VAR 0 18
18927: PUSH
18928: LD_VAR 0 15
18932: PPUSH
18933: LD_VAR 0 2
18937: PPUSH
18938: LD_INT 1
18940: PPUSH
18941: CALL 18076 0 3
18945: ST_TO_ADDR
// InitHc ;
18946: CALL_OW 19
// InitUc ;
18950: CALL_OW 18
// uc_side := side ;
18954: LD_ADDR_OWVAR 20
18958: PUSH
18959: LD_VAR 0 16
18963: ST_TO_ADDR
// uc_nation := nation ;
18964: LD_ADDR_OWVAR 21
18968: PUSH
18969: LD_VAR 0 17
18973: ST_TO_ADDR
// if buildings then
18974: LD_VAR 0 18
18978: IFFALSE 20300
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18980: LD_ADDR_VAR 0 19
18984: PUSH
18985: LD_VAR 0 18
18989: PPUSH
18990: LD_INT 2
18992: PUSH
18993: LD_INT 30
18995: PUSH
18996: LD_INT 29
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 30
19005: PUSH
19006: LD_INT 30
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: LIST
19017: PPUSH
19018: CALL_OW 72
19022: ST_TO_ADDR
// if tmp then
19023: LD_VAR 0 19
19027: IFFALSE 19075
// for i in tmp do
19029: LD_ADDR_VAR 0 8
19033: PUSH
19034: LD_VAR 0 19
19038: PUSH
19039: FOR_IN
19040: IFFALSE 19073
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19042: LD_VAR 0 8
19046: PPUSH
19047: CALL_OW 250
19051: PPUSH
19052: LD_VAR 0 8
19056: PPUSH
19057: CALL_OW 251
19061: PPUSH
19062: LD_VAR 0 16
19066: PPUSH
19067: CALL_OW 441
19071: GO 19039
19073: POP
19074: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19075: LD_VAR 0 18
19079: PPUSH
19080: LD_INT 2
19082: PUSH
19083: LD_INT 30
19085: PUSH
19086: LD_INT 32
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: LD_INT 33
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: PPUSH
19108: CALL_OW 72
19112: IFFALSE 19200
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19114: LD_ADDR_VAR 0 8
19118: PUSH
19119: LD_VAR 0 18
19123: PPUSH
19124: LD_INT 2
19126: PUSH
19127: LD_INT 30
19129: PUSH
19130: LD_INT 32
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 30
19139: PUSH
19140: LD_INT 33
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: PPUSH
19152: CALL_OW 72
19156: PUSH
19157: FOR_IN
19158: IFFALSE 19198
// begin if not GetBWeapon ( i ) then
19160: LD_VAR 0 8
19164: PPUSH
19165: CALL_OW 269
19169: NOT
19170: IFFALSE 19196
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19172: LD_VAR 0 8
19176: PPUSH
19177: LD_VAR 0 8
19181: PPUSH
19182: LD_VAR 0 2
19186: PPUSH
19187: CALL 20446 0 2
19191: PPUSH
19192: CALL_OW 431
// end ;
19196: GO 19157
19198: POP
19199: POP
// end ; for i = 1 to personel do
19200: LD_ADDR_VAR 0 8
19204: PUSH
19205: DOUBLE
19206: LD_INT 1
19208: DEC
19209: ST_TO_ADDR
19210: LD_VAR 0 6
19214: PUSH
19215: FOR_TO
19216: IFFALSE 20280
// begin if i > 4 then
19218: LD_VAR 0 8
19222: PUSH
19223: LD_INT 4
19225: GREATER
19226: IFFALSE 19230
// break ;
19228: GO 20280
// case i of 1 :
19230: LD_VAR 0 8
19234: PUSH
19235: LD_INT 1
19237: DOUBLE
19238: EQUAL
19239: IFTRUE 19243
19241: GO 19323
19243: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19244: LD_ADDR_VAR 0 12
19248: PUSH
19249: LD_VAR 0 18
19253: PPUSH
19254: LD_INT 22
19256: PUSH
19257: LD_VAR 0 16
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 58
19268: PUSH
19269: EMPTY
19270: LIST
19271: PUSH
19272: LD_INT 2
19274: PUSH
19275: LD_INT 30
19277: PUSH
19278: LD_INT 32
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 30
19287: PUSH
19288: LD_INT 4
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 30
19297: PUSH
19298: LD_INT 5
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: PPUSH
19316: CALL_OW 72
19320: ST_TO_ADDR
19321: GO 19545
19323: LD_INT 2
19325: DOUBLE
19326: EQUAL
19327: IFTRUE 19331
19329: GO 19393
19331: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19332: LD_ADDR_VAR 0 12
19336: PUSH
19337: LD_VAR 0 18
19341: PPUSH
19342: LD_INT 22
19344: PUSH
19345: LD_VAR 0 16
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: LD_INT 30
19359: PUSH
19360: LD_INT 0
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 30
19369: PUSH
19370: LD_INT 1
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PPUSH
19386: CALL_OW 72
19390: ST_TO_ADDR
19391: GO 19545
19393: LD_INT 3
19395: DOUBLE
19396: EQUAL
19397: IFTRUE 19401
19399: GO 19463
19401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19402: LD_ADDR_VAR 0 12
19406: PUSH
19407: LD_VAR 0 18
19411: PPUSH
19412: LD_INT 22
19414: PUSH
19415: LD_VAR 0 16
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 2
19426: PUSH
19427: LD_INT 30
19429: PUSH
19430: LD_INT 2
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 30
19439: PUSH
19440: LD_INT 3
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: LIST
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PPUSH
19456: CALL_OW 72
19460: ST_TO_ADDR
19461: GO 19545
19463: LD_INT 4
19465: DOUBLE
19466: EQUAL
19467: IFTRUE 19471
19469: GO 19544
19471: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19472: LD_ADDR_VAR 0 12
19476: PUSH
19477: LD_VAR 0 18
19481: PPUSH
19482: LD_INT 22
19484: PUSH
19485: LD_VAR 0 16
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: LD_INT 30
19499: PUSH
19500: LD_INT 6
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 30
19509: PUSH
19510: LD_INT 7
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 30
19519: PUSH
19520: LD_INT 8
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PPUSH
19537: CALL_OW 72
19541: ST_TO_ADDR
19542: GO 19545
19544: POP
// if i = 1 then
19545: LD_VAR 0 8
19549: PUSH
19550: LD_INT 1
19552: EQUAL
19553: IFFALSE 19664
// begin tmp := [ ] ;
19555: LD_ADDR_VAR 0 19
19559: PUSH
19560: EMPTY
19561: ST_TO_ADDR
// for j in f do
19562: LD_ADDR_VAR 0 9
19566: PUSH
19567: LD_VAR 0 12
19571: PUSH
19572: FOR_IN
19573: IFFALSE 19646
// if GetBType ( j ) = b_bunker then
19575: LD_VAR 0 9
19579: PPUSH
19580: CALL_OW 266
19584: PUSH
19585: LD_INT 32
19587: EQUAL
19588: IFFALSE 19615
// tmp := Insert ( tmp , 1 , j ) else
19590: LD_ADDR_VAR 0 19
19594: PUSH
19595: LD_VAR 0 19
19599: PPUSH
19600: LD_INT 1
19602: PPUSH
19603: LD_VAR 0 9
19607: PPUSH
19608: CALL_OW 2
19612: ST_TO_ADDR
19613: GO 19644
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19615: LD_ADDR_VAR 0 19
19619: PUSH
19620: LD_VAR 0 19
19624: PPUSH
19625: LD_VAR 0 19
19629: PUSH
19630: LD_INT 1
19632: PLUS
19633: PPUSH
19634: LD_VAR 0 9
19638: PPUSH
19639: CALL_OW 2
19643: ST_TO_ADDR
19644: GO 19572
19646: POP
19647: POP
// if tmp then
19648: LD_VAR 0 19
19652: IFFALSE 19664
// f := tmp ;
19654: LD_ADDR_VAR 0 12
19658: PUSH
19659: LD_VAR 0 19
19663: ST_TO_ADDR
// end ; x := personel [ i ] ;
19664: LD_ADDR_VAR 0 13
19668: PUSH
19669: LD_VAR 0 6
19673: PUSH
19674: LD_VAR 0 8
19678: ARRAY
19679: ST_TO_ADDR
// if x = - 1 then
19680: LD_VAR 0 13
19684: PUSH
19685: LD_INT 1
19687: NEG
19688: EQUAL
19689: IFFALSE 19898
// begin for j in f do
19691: LD_ADDR_VAR 0 9
19695: PUSH
19696: LD_VAR 0 12
19700: PUSH
19701: FOR_IN
19702: IFFALSE 19894
// repeat InitHc ;
19704: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19708: LD_VAR 0 9
19712: PPUSH
19713: CALL_OW 266
19717: PUSH
19718: LD_INT 5
19720: EQUAL
19721: IFFALSE 19791
// begin if UnitsInside ( j ) < 3 then
19723: LD_VAR 0 9
19727: PPUSH
19728: CALL_OW 313
19732: PUSH
19733: LD_INT 3
19735: LESS
19736: IFFALSE 19772
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19738: LD_INT 0
19740: PPUSH
19741: LD_INT 5
19743: PUSH
19744: LD_INT 8
19746: PUSH
19747: LD_INT 9
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: LIST
19754: PUSH
19755: LD_VAR 0 17
19759: ARRAY
19760: PPUSH
19761: LD_VAR 0 4
19765: PPUSH
19766: CALL_OW 380
19770: GO 19789
// PrepareHuman ( false , i , skill ) ;
19772: LD_INT 0
19774: PPUSH
19775: LD_VAR 0 8
19779: PPUSH
19780: LD_VAR 0 4
19784: PPUSH
19785: CALL_OW 380
// end else
19789: GO 19808
// PrepareHuman ( false , i , skill ) ;
19791: LD_INT 0
19793: PPUSH
19794: LD_VAR 0 8
19798: PPUSH
19799: LD_VAR 0 4
19803: PPUSH
19804: CALL_OW 380
// un := CreateHuman ;
19808: LD_ADDR_VAR 0 14
19812: PUSH
19813: CALL_OW 44
19817: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19818: LD_ADDR_VAR 0 7
19822: PUSH
19823: LD_VAR 0 7
19827: PPUSH
19828: LD_INT 1
19830: PPUSH
19831: LD_VAR 0 14
19835: PPUSH
19836: CALL_OW 2
19840: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19841: LD_VAR 0 14
19845: PPUSH
19846: LD_VAR 0 9
19850: PPUSH
19851: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19855: LD_VAR 0 9
19859: PPUSH
19860: CALL_OW 313
19864: PUSH
19865: LD_INT 6
19867: EQUAL
19868: PUSH
19869: LD_VAR 0 9
19873: PPUSH
19874: CALL_OW 266
19878: PUSH
19879: LD_INT 32
19881: PUSH
19882: LD_INT 31
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: IN
19889: OR
19890: IFFALSE 19704
19892: GO 19701
19894: POP
19895: POP
// end else
19896: GO 20278
// for j = 1 to x do
19898: LD_ADDR_VAR 0 9
19902: PUSH
19903: DOUBLE
19904: LD_INT 1
19906: DEC
19907: ST_TO_ADDR
19908: LD_VAR 0 13
19912: PUSH
19913: FOR_TO
19914: IFFALSE 20276
// begin InitHc ;
19916: CALL_OW 19
// if not f then
19920: LD_VAR 0 12
19924: NOT
19925: IFFALSE 20014
// begin PrepareHuman ( false , i , skill ) ;
19927: LD_INT 0
19929: PPUSH
19930: LD_VAR 0 8
19934: PPUSH
19935: LD_VAR 0 4
19939: PPUSH
19940: CALL_OW 380
// un := CreateHuman ;
19944: LD_ADDR_VAR 0 14
19948: PUSH
19949: CALL_OW 44
19953: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19954: LD_ADDR_VAR 0 7
19958: PUSH
19959: LD_VAR 0 7
19963: PPUSH
19964: LD_INT 1
19966: PPUSH
19967: LD_VAR 0 14
19971: PPUSH
19972: CALL_OW 2
19976: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19977: LD_VAR 0 14
19981: PPUSH
19982: LD_VAR 0 1
19986: PPUSH
19987: CALL_OW 250
19991: PPUSH
19992: LD_VAR 0 1
19996: PPUSH
19997: CALL_OW 251
20001: PPUSH
20002: LD_INT 10
20004: PPUSH
20005: LD_INT 0
20007: PPUSH
20008: CALL_OW 50
// continue ;
20012: GO 19913
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20014: LD_VAR 0 12
20018: PUSH
20019: LD_INT 1
20021: ARRAY
20022: PPUSH
20023: CALL_OW 313
20027: PUSH
20028: LD_VAR 0 12
20032: PUSH
20033: LD_INT 1
20035: ARRAY
20036: PPUSH
20037: CALL_OW 266
20041: PUSH
20042: LD_INT 32
20044: PUSH
20045: LD_INT 31
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: IN
20052: AND
20053: PUSH
20054: LD_VAR 0 12
20058: PUSH
20059: LD_INT 1
20061: ARRAY
20062: PPUSH
20063: CALL_OW 313
20067: PUSH
20068: LD_INT 6
20070: EQUAL
20071: OR
20072: IFFALSE 20092
// f := Delete ( f , 1 ) ;
20074: LD_ADDR_VAR 0 12
20078: PUSH
20079: LD_VAR 0 12
20083: PPUSH
20084: LD_INT 1
20086: PPUSH
20087: CALL_OW 3
20091: ST_TO_ADDR
// if not f then
20092: LD_VAR 0 12
20096: NOT
20097: IFFALSE 20115
// begin x := x + 2 ;
20099: LD_ADDR_VAR 0 13
20103: PUSH
20104: LD_VAR 0 13
20108: PUSH
20109: LD_INT 2
20111: PLUS
20112: ST_TO_ADDR
// continue ;
20113: GO 19913
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20115: LD_VAR 0 12
20119: PUSH
20120: LD_INT 1
20122: ARRAY
20123: PPUSH
20124: CALL_OW 266
20128: PUSH
20129: LD_INT 5
20131: EQUAL
20132: IFFALSE 20206
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20134: LD_VAR 0 12
20138: PUSH
20139: LD_INT 1
20141: ARRAY
20142: PPUSH
20143: CALL_OW 313
20147: PUSH
20148: LD_INT 3
20150: LESS
20151: IFFALSE 20187
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20153: LD_INT 0
20155: PPUSH
20156: LD_INT 5
20158: PUSH
20159: LD_INT 8
20161: PUSH
20162: LD_INT 9
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: LIST
20169: PUSH
20170: LD_VAR 0 17
20174: ARRAY
20175: PPUSH
20176: LD_VAR 0 4
20180: PPUSH
20181: CALL_OW 380
20185: GO 20204
// PrepareHuman ( false , i , skill ) ;
20187: LD_INT 0
20189: PPUSH
20190: LD_VAR 0 8
20194: PPUSH
20195: LD_VAR 0 4
20199: PPUSH
20200: CALL_OW 380
// end else
20204: GO 20223
// PrepareHuman ( false , i , skill ) ;
20206: LD_INT 0
20208: PPUSH
20209: LD_VAR 0 8
20213: PPUSH
20214: LD_VAR 0 4
20218: PPUSH
20219: CALL_OW 380
// un := CreateHuman ;
20223: LD_ADDR_VAR 0 14
20227: PUSH
20228: CALL_OW 44
20232: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20233: LD_ADDR_VAR 0 7
20237: PUSH
20238: LD_VAR 0 7
20242: PPUSH
20243: LD_INT 1
20245: PPUSH
20246: LD_VAR 0 14
20250: PPUSH
20251: CALL_OW 2
20255: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20256: LD_VAR 0 14
20260: PPUSH
20261: LD_VAR 0 12
20265: PUSH
20266: LD_INT 1
20268: ARRAY
20269: PPUSH
20270: CALL_OW 52
// end ;
20274: GO 19913
20276: POP
20277: POP
// end ;
20278: GO 19215
20280: POP
20281: POP
// result := result ^ buildings ;
20282: LD_ADDR_VAR 0 7
20286: PUSH
20287: LD_VAR 0 7
20291: PUSH
20292: LD_VAR 0 18
20296: ADD
20297: ST_TO_ADDR
// end else
20298: GO 20441
// begin for i = 1 to personel do
20300: LD_ADDR_VAR 0 8
20304: PUSH
20305: DOUBLE
20306: LD_INT 1
20308: DEC
20309: ST_TO_ADDR
20310: LD_VAR 0 6
20314: PUSH
20315: FOR_TO
20316: IFFALSE 20439
// begin if i > 4 then
20318: LD_VAR 0 8
20322: PUSH
20323: LD_INT 4
20325: GREATER
20326: IFFALSE 20330
// break ;
20328: GO 20439
// x := personel [ i ] ;
20330: LD_ADDR_VAR 0 13
20334: PUSH
20335: LD_VAR 0 6
20339: PUSH
20340: LD_VAR 0 8
20344: ARRAY
20345: ST_TO_ADDR
// if x = - 1 then
20346: LD_VAR 0 13
20350: PUSH
20351: LD_INT 1
20353: NEG
20354: EQUAL
20355: IFFALSE 20359
// continue ;
20357: GO 20315
// PrepareHuman ( false , i , skill ) ;
20359: LD_INT 0
20361: PPUSH
20362: LD_VAR 0 8
20366: PPUSH
20367: LD_VAR 0 4
20371: PPUSH
20372: CALL_OW 380
// un := CreateHuman ;
20376: LD_ADDR_VAR 0 14
20380: PUSH
20381: CALL_OW 44
20385: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20386: LD_VAR 0 14
20390: PPUSH
20391: LD_VAR 0 1
20395: PPUSH
20396: CALL_OW 250
20400: PPUSH
20401: LD_VAR 0 1
20405: PPUSH
20406: CALL_OW 251
20410: PPUSH
20411: LD_INT 10
20413: PPUSH
20414: LD_INT 0
20416: PPUSH
20417: CALL_OW 50
// result := result ^ un ;
20421: LD_ADDR_VAR 0 7
20425: PUSH
20426: LD_VAR 0 7
20430: PUSH
20431: LD_VAR 0 14
20435: ADD
20436: ST_TO_ADDR
// end ;
20437: GO 20315
20439: POP
20440: POP
// end ; end ;
20441: LD_VAR 0 7
20445: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20446: LD_INT 0
20448: PPUSH
20449: PPUSH
20450: PPUSH
20451: PPUSH
20452: PPUSH
20453: PPUSH
20454: PPUSH
20455: PPUSH
20456: PPUSH
20457: PPUSH
20458: PPUSH
20459: PPUSH
20460: PPUSH
20461: PPUSH
20462: PPUSH
20463: PPUSH
// result := false ;
20464: LD_ADDR_VAR 0 3
20468: PUSH
20469: LD_INT 0
20471: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20472: LD_VAR 0 1
20476: NOT
20477: PUSH
20478: LD_VAR 0 1
20482: PPUSH
20483: CALL_OW 266
20487: PUSH
20488: LD_INT 32
20490: PUSH
20491: LD_INT 33
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: IN
20498: NOT
20499: OR
20500: IFFALSE 20504
// exit ;
20502: GO 21613
// nat := GetNation ( tower ) ;
20504: LD_ADDR_VAR 0 12
20508: PUSH
20509: LD_VAR 0 1
20513: PPUSH
20514: CALL_OW 248
20518: ST_TO_ADDR
// side := GetSide ( tower ) ;
20519: LD_ADDR_VAR 0 16
20523: PUSH
20524: LD_VAR 0 1
20528: PPUSH
20529: CALL_OW 255
20533: ST_TO_ADDR
// x := GetX ( tower ) ;
20534: LD_ADDR_VAR 0 10
20538: PUSH
20539: LD_VAR 0 1
20543: PPUSH
20544: CALL_OW 250
20548: ST_TO_ADDR
// y := GetY ( tower ) ;
20549: LD_ADDR_VAR 0 11
20553: PUSH
20554: LD_VAR 0 1
20558: PPUSH
20559: CALL_OW 251
20563: ST_TO_ADDR
// if not x or not y then
20564: LD_VAR 0 10
20568: NOT
20569: PUSH
20570: LD_VAR 0 11
20574: NOT
20575: OR
20576: IFFALSE 20580
// exit ;
20578: GO 21613
// weapon := 0 ;
20580: LD_ADDR_VAR 0 18
20584: PUSH
20585: LD_INT 0
20587: ST_TO_ADDR
// fac_list := [ ] ;
20588: LD_ADDR_VAR 0 17
20592: PUSH
20593: EMPTY
20594: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20595: LD_ADDR_VAR 0 6
20599: PUSH
20600: LD_VAR 0 1
20604: PPUSH
20605: CALL_OW 274
20609: PPUSH
20610: LD_VAR 0 2
20614: PPUSH
20615: LD_INT 0
20617: PPUSH
20618: CALL 18076 0 3
20622: PPUSH
20623: LD_INT 30
20625: PUSH
20626: LD_INT 3
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PPUSH
20633: CALL_OW 72
20637: ST_TO_ADDR
// if not factories then
20638: LD_VAR 0 6
20642: NOT
20643: IFFALSE 20647
// exit ;
20645: GO 21613
// for i in factories do
20647: LD_ADDR_VAR 0 8
20651: PUSH
20652: LD_VAR 0 6
20656: PUSH
20657: FOR_IN
20658: IFFALSE 20683
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20660: LD_ADDR_VAR 0 17
20664: PUSH
20665: LD_VAR 0 17
20669: PUSH
20670: LD_VAR 0 8
20674: PPUSH
20675: CALL_OW 478
20679: UNION
20680: ST_TO_ADDR
20681: GO 20657
20683: POP
20684: POP
// if not fac_list then
20685: LD_VAR 0 17
20689: NOT
20690: IFFALSE 20694
// exit ;
20692: GO 21613
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20694: LD_ADDR_VAR 0 5
20698: PUSH
20699: LD_INT 4
20701: PUSH
20702: LD_INT 5
20704: PUSH
20705: LD_INT 9
20707: PUSH
20708: LD_INT 10
20710: PUSH
20711: LD_INT 6
20713: PUSH
20714: LD_INT 7
20716: PUSH
20717: LD_INT 11
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 27
20731: PUSH
20732: LD_INT 28
20734: PUSH
20735: LD_INT 26
20737: PUSH
20738: LD_INT 30
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 43
20749: PUSH
20750: LD_INT 44
20752: PUSH
20753: LD_INT 46
20755: PUSH
20756: LD_INT 45
20758: PUSH
20759: LD_INT 47
20761: PUSH
20762: LD_INT 49
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: PUSH
20778: LD_VAR 0 12
20782: ARRAY
20783: ST_TO_ADDR
// list := list isect fac_list ;
20784: LD_ADDR_VAR 0 5
20788: PUSH
20789: LD_VAR 0 5
20793: PUSH
20794: LD_VAR 0 17
20798: ISECT
20799: ST_TO_ADDR
// if not list then
20800: LD_VAR 0 5
20804: NOT
20805: IFFALSE 20809
// exit ;
20807: GO 21613
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20809: LD_VAR 0 12
20813: PUSH
20814: LD_INT 3
20816: EQUAL
20817: PUSH
20818: LD_INT 49
20820: PUSH
20821: LD_VAR 0 5
20825: IN
20826: AND
20827: PUSH
20828: LD_INT 31
20830: PPUSH
20831: LD_VAR 0 16
20835: PPUSH
20836: CALL_OW 321
20840: PUSH
20841: LD_INT 2
20843: EQUAL
20844: AND
20845: IFFALSE 20905
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20847: LD_INT 22
20849: PUSH
20850: LD_VAR 0 16
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 35
20861: PUSH
20862: LD_INT 49
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 91
20871: PUSH
20872: LD_VAR 0 1
20876: PUSH
20877: LD_INT 10
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: LIST
20889: PPUSH
20890: CALL_OW 69
20894: NOT
20895: IFFALSE 20905
// weapon := ru_time_lapser ;
20897: LD_ADDR_VAR 0 18
20901: PUSH
20902: LD_INT 49
20904: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20905: LD_VAR 0 12
20909: PUSH
20910: LD_INT 1
20912: PUSH
20913: LD_INT 2
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: IN
20920: PUSH
20921: LD_INT 11
20923: PUSH
20924: LD_VAR 0 5
20928: IN
20929: PUSH
20930: LD_INT 30
20932: PUSH
20933: LD_VAR 0 5
20937: IN
20938: OR
20939: AND
20940: PUSH
20941: LD_INT 6
20943: PPUSH
20944: LD_VAR 0 16
20948: PPUSH
20949: CALL_OW 321
20953: PUSH
20954: LD_INT 2
20956: EQUAL
20957: AND
20958: IFFALSE 21123
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20960: LD_INT 22
20962: PUSH
20963: LD_VAR 0 16
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 35
20977: PUSH
20978: LD_INT 11
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 35
20987: PUSH
20988: LD_INT 30
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 91
21002: PUSH
21003: LD_VAR 0 1
21007: PUSH
21008: LD_INT 18
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: LIST
21020: PPUSH
21021: CALL_OW 69
21025: NOT
21026: PUSH
21027: LD_INT 22
21029: PUSH
21030: LD_VAR 0 16
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 2
21041: PUSH
21042: LD_INT 30
21044: PUSH
21045: LD_INT 32
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 30
21054: PUSH
21055: LD_INT 33
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 91
21069: PUSH
21070: LD_VAR 0 1
21074: PUSH
21075: LD_INT 12
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: LIST
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: LIST
21087: PUSH
21088: EMPTY
21089: LIST
21090: PPUSH
21091: CALL_OW 69
21095: PUSH
21096: LD_INT 2
21098: GREATER
21099: AND
21100: IFFALSE 21123
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21102: LD_ADDR_VAR 0 18
21106: PUSH
21107: LD_INT 11
21109: PUSH
21110: LD_INT 30
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_VAR 0 12
21121: ARRAY
21122: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21123: LD_VAR 0 18
21127: NOT
21128: PUSH
21129: LD_INT 40
21131: PPUSH
21132: LD_VAR 0 16
21136: PPUSH
21137: CALL_OW 321
21141: PUSH
21142: LD_INT 2
21144: EQUAL
21145: AND
21146: PUSH
21147: LD_INT 7
21149: PUSH
21150: LD_VAR 0 5
21154: IN
21155: PUSH
21156: LD_INT 28
21158: PUSH
21159: LD_VAR 0 5
21163: IN
21164: OR
21165: PUSH
21166: LD_INT 45
21168: PUSH
21169: LD_VAR 0 5
21173: IN
21174: OR
21175: AND
21176: IFFALSE 21430
// begin hex := GetHexInfo ( x , y ) ;
21178: LD_ADDR_VAR 0 4
21182: PUSH
21183: LD_VAR 0 10
21187: PPUSH
21188: LD_VAR 0 11
21192: PPUSH
21193: CALL_OW 546
21197: ST_TO_ADDR
// if hex [ 1 ] then
21198: LD_VAR 0 4
21202: PUSH
21203: LD_INT 1
21205: ARRAY
21206: IFFALSE 21210
// exit ;
21208: GO 21613
// height := hex [ 2 ] ;
21210: LD_ADDR_VAR 0 15
21214: PUSH
21215: LD_VAR 0 4
21219: PUSH
21220: LD_INT 2
21222: ARRAY
21223: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21224: LD_ADDR_VAR 0 14
21228: PUSH
21229: LD_INT 0
21231: PUSH
21232: LD_INT 2
21234: PUSH
21235: LD_INT 3
21237: PUSH
21238: LD_INT 5
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: ST_TO_ADDR
// for i in tmp do
21247: LD_ADDR_VAR 0 8
21251: PUSH
21252: LD_VAR 0 14
21256: PUSH
21257: FOR_IN
21258: IFFALSE 21428
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21260: LD_ADDR_VAR 0 9
21264: PUSH
21265: LD_VAR 0 10
21269: PPUSH
21270: LD_VAR 0 8
21274: PPUSH
21275: LD_INT 5
21277: PPUSH
21278: CALL_OW 272
21282: PUSH
21283: LD_VAR 0 11
21287: PPUSH
21288: LD_VAR 0 8
21292: PPUSH
21293: LD_INT 5
21295: PPUSH
21296: CALL_OW 273
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21305: LD_VAR 0 9
21309: PUSH
21310: LD_INT 1
21312: ARRAY
21313: PPUSH
21314: LD_VAR 0 9
21318: PUSH
21319: LD_INT 2
21321: ARRAY
21322: PPUSH
21323: CALL_OW 488
21327: IFFALSE 21426
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21329: LD_ADDR_VAR 0 4
21333: PUSH
21334: LD_VAR 0 9
21338: PUSH
21339: LD_INT 1
21341: ARRAY
21342: PPUSH
21343: LD_VAR 0 9
21347: PUSH
21348: LD_INT 2
21350: ARRAY
21351: PPUSH
21352: CALL_OW 546
21356: ST_TO_ADDR
// if hex [ 1 ] then
21357: LD_VAR 0 4
21361: PUSH
21362: LD_INT 1
21364: ARRAY
21365: IFFALSE 21369
// continue ;
21367: GO 21257
// h := hex [ 2 ] ;
21369: LD_ADDR_VAR 0 13
21373: PUSH
21374: LD_VAR 0 4
21378: PUSH
21379: LD_INT 2
21381: ARRAY
21382: ST_TO_ADDR
// if h + 7 < height then
21383: LD_VAR 0 13
21387: PUSH
21388: LD_INT 7
21390: PLUS
21391: PUSH
21392: LD_VAR 0 15
21396: LESS
21397: IFFALSE 21426
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21399: LD_ADDR_VAR 0 18
21403: PUSH
21404: LD_INT 7
21406: PUSH
21407: LD_INT 28
21409: PUSH
21410: LD_INT 45
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: LIST
21417: PUSH
21418: LD_VAR 0 12
21422: ARRAY
21423: ST_TO_ADDR
// break ;
21424: GO 21428
// end ; end ; end ;
21426: GO 21257
21428: POP
21429: POP
// end ; if not weapon then
21430: LD_VAR 0 18
21434: NOT
21435: IFFALSE 21495
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21437: LD_ADDR_VAR 0 5
21441: PUSH
21442: LD_VAR 0 5
21446: PUSH
21447: LD_INT 11
21449: PUSH
21450: LD_INT 30
21452: PUSH
21453: LD_INT 49
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: DIFF
21461: ST_TO_ADDR
// if not list then
21462: LD_VAR 0 5
21466: NOT
21467: IFFALSE 21471
// exit ;
21469: GO 21613
// weapon := list [ rand ( 1 , list ) ] ;
21471: LD_ADDR_VAR 0 18
21475: PUSH
21476: LD_VAR 0 5
21480: PUSH
21481: LD_INT 1
21483: PPUSH
21484: LD_VAR 0 5
21488: PPUSH
21489: CALL_OW 12
21493: ARRAY
21494: ST_TO_ADDR
// end ; if weapon then
21495: LD_VAR 0 18
21499: IFFALSE 21613
// begin tmp := CostOfWeapon ( weapon ) ;
21501: LD_ADDR_VAR 0 14
21505: PUSH
21506: LD_VAR 0 18
21510: PPUSH
21511: CALL_OW 451
21515: ST_TO_ADDR
// j := GetBase ( tower ) ;
21516: LD_ADDR_VAR 0 9
21520: PUSH
21521: LD_VAR 0 1
21525: PPUSH
21526: CALL_OW 274
21530: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21531: LD_VAR 0 9
21535: PPUSH
21536: LD_INT 1
21538: PPUSH
21539: CALL_OW 275
21543: PUSH
21544: LD_VAR 0 14
21548: PUSH
21549: LD_INT 1
21551: ARRAY
21552: GREATEREQUAL
21553: PUSH
21554: LD_VAR 0 9
21558: PPUSH
21559: LD_INT 2
21561: PPUSH
21562: CALL_OW 275
21566: PUSH
21567: LD_VAR 0 14
21571: PUSH
21572: LD_INT 2
21574: ARRAY
21575: GREATEREQUAL
21576: AND
21577: PUSH
21578: LD_VAR 0 9
21582: PPUSH
21583: LD_INT 3
21585: PPUSH
21586: CALL_OW 275
21590: PUSH
21591: LD_VAR 0 14
21595: PUSH
21596: LD_INT 3
21598: ARRAY
21599: GREATEREQUAL
21600: AND
21601: IFFALSE 21613
// result := weapon ;
21603: LD_ADDR_VAR 0 3
21607: PUSH
21608: LD_VAR 0 18
21612: ST_TO_ADDR
// end ; end ;
21613: LD_VAR 0 3
21617: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21618: LD_INT 0
21620: PPUSH
21621: PPUSH
// result := true ;
21622: LD_ADDR_VAR 0 3
21626: PUSH
21627: LD_INT 1
21629: ST_TO_ADDR
// if array1 = array2 then
21630: LD_VAR 0 1
21634: PUSH
21635: LD_VAR 0 2
21639: EQUAL
21640: IFFALSE 21700
// begin for i = 1 to array1 do
21642: LD_ADDR_VAR 0 4
21646: PUSH
21647: DOUBLE
21648: LD_INT 1
21650: DEC
21651: ST_TO_ADDR
21652: LD_VAR 0 1
21656: PUSH
21657: FOR_TO
21658: IFFALSE 21696
// if array1 [ i ] <> array2 [ i ] then
21660: LD_VAR 0 1
21664: PUSH
21665: LD_VAR 0 4
21669: ARRAY
21670: PUSH
21671: LD_VAR 0 2
21675: PUSH
21676: LD_VAR 0 4
21680: ARRAY
21681: NONEQUAL
21682: IFFALSE 21694
// begin result := false ;
21684: LD_ADDR_VAR 0 3
21688: PUSH
21689: LD_INT 0
21691: ST_TO_ADDR
// break ;
21692: GO 21696
// end ;
21694: GO 21657
21696: POP
21697: POP
// end else
21698: GO 21708
// result := false ;
21700: LD_ADDR_VAR 0 3
21704: PUSH
21705: LD_INT 0
21707: ST_TO_ADDR
// end ;
21708: LD_VAR 0 3
21712: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21713: LD_INT 0
21715: PPUSH
21716: PPUSH
// if not array1 or not array2 then
21717: LD_VAR 0 1
21721: NOT
21722: PUSH
21723: LD_VAR 0 2
21727: NOT
21728: OR
21729: IFFALSE 21733
// exit ;
21731: GO 21797
// result := true ;
21733: LD_ADDR_VAR 0 3
21737: PUSH
21738: LD_INT 1
21740: ST_TO_ADDR
// for i = 1 to array1 do
21741: LD_ADDR_VAR 0 4
21745: PUSH
21746: DOUBLE
21747: LD_INT 1
21749: DEC
21750: ST_TO_ADDR
21751: LD_VAR 0 1
21755: PUSH
21756: FOR_TO
21757: IFFALSE 21795
// if array1 [ i ] <> array2 [ i ] then
21759: LD_VAR 0 1
21763: PUSH
21764: LD_VAR 0 4
21768: ARRAY
21769: PUSH
21770: LD_VAR 0 2
21774: PUSH
21775: LD_VAR 0 4
21779: ARRAY
21780: NONEQUAL
21781: IFFALSE 21793
// begin result := false ;
21783: LD_ADDR_VAR 0 3
21787: PUSH
21788: LD_INT 0
21790: ST_TO_ADDR
// break ;
21791: GO 21795
// end ;
21793: GO 21756
21795: POP
21796: POP
// end ;
21797: LD_VAR 0 3
21801: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21802: LD_INT 0
21804: PPUSH
21805: PPUSH
21806: PPUSH
// pom := GetBase ( fac ) ;
21807: LD_ADDR_VAR 0 5
21811: PUSH
21812: LD_VAR 0 1
21816: PPUSH
21817: CALL_OW 274
21821: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21822: LD_ADDR_VAR 0 4
21826: PUSH
21827: LD_VAR 0 2
21831: PUSH
21832: LD_INT 1
21834: ARRAY
21835: PPUSH
21836: LD_VAR 0 2
21840: PUSH
21841: LD_INT 2
21843: ARRAY
21844: PPUSH
21845: LD_VAR 0 2
21849: PUSH
21850: LD_INT 3
21852: ARRAY
21853: PPUSH
21854: LD_VAR 0 2
21858: PUSH
21859: LD_INT 4
21861: ARRAY
21862: PPUSH
21863: CALL_OW 449
21867: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21868: LD_ADDR_VAR 0 3
21872: PUSH
21873: LD_VAR 0 5
21877: PPUSH
21878: LD_INT 1
21880: PPUSH
21881: CALL_OW 275
21885: PUSH
21886: LD_VAR 0 4
21890: PUSH
21891: LD_INT 1
21893: ARRAY
21894: GREATEREQUAL
21895: PUSH
21896: LD_VAR 0 5
21900: PPUSH
21901: LD_INT 2
21903: PPUSH
21904: CALL_OW 275
21908: PUSH
21909: LD_VAR 0 4
21913: PUSH
21914: LD_INT 2
21916: ARRAY
21917: GREATEREQUAL
21918: AND
21919: PUSH
21920: LD_VAR 0 5
21924: PPUSH
21925: LD_INT 3
21927: PPUSH
21928: CALL_OW 275
21932: PUSH
21933: LD_VAR 0 4
21937: PUSH
21938: LD_INT 3
21940: ARRAY
21941: GREATEREQUAL
21942: AND
21943: ST_TO_ADDR
// end ;
21944: LD_VAR 0 3
21948: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21949: LD_INT 0
21951: PPUSH
21952: PPUSH
21953: PPUSH
21954: PPUSH
// pom := GetBase ( building ) ;
21955: LD_ADDR_VAR 0 3
21959: PUSH
21960: LD_VAR 0 1
21964: PPUSH
21965: CALL_OW 274
21969: ST_TO_ADDR
// if not pom then
21970: LD_VAR 0 3
21974: NOT
21975: IFFALSE 21979
// exit ;
21977: GO 22149
// btype := GetBType ( building ) ;
21979: LD_ADDR_VAR 0 5
21983: PUSH
21984: LD_VAR 0 1
21988: PPUSH
21989: CALL_OW 266
21993: ST_TO_ADDR
// if btype = b_armoury then
21994: LD_VAR 0 5
21998: PUSH
21999: LD_INT 4
22001: EQUAL
22002: IFFALSE 22012
// btype := b_barracks ;
22004: LD_ADDR_VAR 0 5
22008: PUSH
22009: LD_INT 5
22011: ST_TO_ADDR
// if btype = b_depot then
22012: LD_VAR 0 5
22016: PUSH
22017: LD_INT 0
22019: EQUAL
22020: IFFALSE 22030
// btype := b_warehouse ;
22022: LD_ADDR_VAR 0 5
22026: PUSH
22027: LD_INT 1
22029: ST_TO_ADDR
// if btype = b_workshop then
22030: LD_VAR 0 5
22034: PUSH
22035: LD_INT 2
22037: EQUAL
22038: IFFALSE 22048
// btype := b_factory ;
22040: LD_ADDR_VAR 0 5
22044: PUSH
22045: LD_INT 3
22047: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22048: LD_ADDR_VAR 0 4
22052: PUSH
22053: LD_VAR 0 5
22057: PPUSH
22058: LD_VAR 0 1
22062: PPUSH
22063: CALL_OW 248
22067: PPUSH
22068: CALL_OW 450
22072: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22073: LD_ADDR_VAR 0 2
22077: PUSH
22078: LD_VAR 0 3
22082: PPUSH
22083: LD_INT 1
22085: PPUSH
22086: CALL_OW 275
22090: PUSH
22091: LD_VAR 0 4
22095: PUSH
22096: LD_INT 1
22098: ARRAY
22099: GREATEREQUAL
22100: PUSH
22101: LD_VAR 0 3
22105: PPUSH
22106: LD_INT 2
22108: PPUSH
22109: CALL_OW 275
22113: PUSH
22114: LD_VAR 0 4
22118: PUSH
22119: LD_INT 2
22121: ARRAY
22122: GREATEREQUAL
22123: AND
22124: PUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: LD_INT 3
22132: PPUSH
22133: CALL_OW 275
22137: PUSH
22138: LD_VAR 0 4
22142: PUSH
22143: LD_INT 3
22145: ARRAY
22146: GREATEREQUAL
22147: AND
22148: ST_TO_ADDR
// end ;
22149: LD_VAR 0 2
22153: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22154: LD_INT 0
22156: PPUSH
22157: PPUSH
22158: PPUSH
// pom := GetBase ( building ) ;
22159: LD_ADDR_VAR 0 4
22163: PUSH
22164: LD_VAR 0 1
22168: PPUSH
22169: CALL_OW 274
22173: ST_TO_ADDR
// if not pom then
22174: LD_VAR 0 4
22178: NOT
22179: IFFALSE 22183
// exit ;
22181: GO 22284
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22183: LD_ADDR_VAR 0 5
22187: PUSH
22188: LD_VAR 0 2
22192: PPUSH
22193: LD_VAR 0 1
22197: PPUSH
22198: CALL_OW 248
22202: PPUSH
22203: CALL_OW 450
22207: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22208: LD_ADDR_VAR 0 3
22212: PUSH
22213: LD_VAR 0 4
22217: PPUSH
22218: LD_INT 1
22220: PPUSH
22221: CALL_OW 275
22225: PUSH
22226: LD_VAR 0 5
22230: PUSH
22231: LD_INT 1
22233: ARRAY
22234: GREATEREQUAL
22235: PUSH
22236: LD_VAR 0 4
22240: PPUSH
22241: LD_INT 2
22243: PPUSH
22244: CALL_OW 275
22248: PUSH
22249: LD_VAR 0 5
22253: PUSH
22254: LD_INT 2
22256: ARRAY
22257: GREATEREQUAL
22258: AND
22259: PUSH
22260: LD_VAR 0 4
22264: PPUSH
22265: LD_INT 3
22267: PPUSH
22268: CALL_OW 275
22272: PUSH
22273: LD_VAR 0 5
22277: PUSH
22278: LD_INT 3
22280: ARRAY
22281: GREATEREQUAL
22282: AND
22283: ST_TO_ADDR
// end ;
22284: LD_VAR 0 3
22288: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22289: LD_INT 0
22291: PPUSH
22292: PPUSH
22293: PPUSH
22294: PPUSH
22295: PPUSH
22296: PPUSH
22297: PPUSH
22298: PPUSH
22299: PPUSH
22300: PPUSH
22301: PPUSH
// result := false ;
22302: LD_ADDR_VAR 0 8
22306: PUSH
22307: LD_INT 0
22309: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22310: LD_VAR 0 5
22314: NOT
22315: PUSH
22316: LD_VAR 0 1
22320: NOT
22321: OR
22322: PUSH
22323: LD_VAR 0 2
22327: NOT
22328: OR
22329: PUSH
22330: LD_VAR 0 3
22334: NOT
22335: OR
22336: IFFALSE 22340
// exit ;
22338: GO 23154
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22340: LD_ADDR_VAR 0 14
22344: PUSH
22345: LD_VAR 0 1
22349: PPUSH
22350: LD_VAR 0 2
22354: PPUSH
22355: LD_VAR 0 3
22359: PPUSH
22360: LD_VAR 0 4
22364: PPUSH
22365: LD_VAR 0 5
22369: PUSH
22370: LD_INT 1
22372: ARRAY
22373: PPUSH
22374: CALL_OW 248
22378: PPUSH
22379: LD_INT 0
22381: PPUSH
22382: CALL 24391 0 6
22386: ST_TO_ADDR
// if not hexes then
22387: LD_VAR 0 14
22391: NOT
22392: IFFALSE 22396
// exit ;
22394: GO 23154
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22396: LD_ADDR_VAR 0 17
22400: PUSH
22401: LD_VAR 0 5
22405: PPUSH
22406: LD_INT 22
22408: PUSH
22409: LD_VAR 0 13
22413: PPUSH
22414: CALL_OW 255
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 2
22425: PUSH
22426: LD_INT 30
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 30
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: LIST
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PPUSH
22455: CALL_OW 72
22459: ST_TO_ADDR
// for i = 1 to hexes do
22460: LD_ADDR_VAR 0 9
22464: PUSH
22465: DOUBLE
22466: LD_INT 1
22468: DEC
22469: ST_TO_ADDR
22470: LD_VAR 0 14
22474: PUSH
22475: FOR_TO
22476: IFFALSE 23152
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22478: LD_ADDR_VAR 0 13
22482: PUSH
22483: LD_VAR 0 14
22487: PUSH
22488: LD_VAR 0 9
22492: ARRAY
22493: PUSH
22494: LD_INT 1
22496: ARRAY
22497: PPUSH
22498: LD_VAR 0 14
22502: PUSH
22503: LD_VAR 0 9
22507: ARRAY
22508: PUSH
22509: LD_INT 2
22511: ARRAY
22512: PPUSH
22513: CALL_OW 428
22517: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22518: LD_VAR 0 14
22522: PUSH
22523: LD_VAR 0 9
22527: ARRAY
22528: PUSH
22529: LD_INT 1
22531: ARRAY
22532: PPUSH
22533: LD_VAR 0 14
22537: PUSH
22538: LD_VAR 0 9
22542: ARRAY
22543: PUSH
22544: LD_INT 2
22546: ARRAY
22547: PPUSH
22548: CALL_OW 351
22552: PUSH
22553: LD_VAR 0 14
22557: PUSH
22558: LD_VAR 0 9
22562: ARRAY
22563: PUSH
22564: LD_INT 1
22566: ARRAY
22567: PPUSH
22568: LD_VAR 0 14
22572: PUSH
22573: LD_VAR 0 9
22577: ARRAY
22578: PUSH
22579: LD_INT 2
22581: ARRAY
22582: PPUSH
22583: CALL_OW 488
22587: NOT
22588: OR
22589: PUSH
22590: LD_VAR 0 13
22594: PPUSH
22595: CALL_OW 247
22599: PUSH
22600: LD_INT 3
22602: EQUAL
22603: OR
22604: IFFALSE 22610
// exit ;
22606: POP
22607: POP
22608: GO 23154
// if not tmp then
22610: LD_VAR 0 13
22614: NOT
22615: IFFALSE 22619
// continue ;
22617: GO 22475
// result := true ;
22619: LD_ADDR_VAR 0 8
22623: PUSH
22624: LD_INT 1
22626: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22627: LD_VAR 0 6
22631: PUSH
22632: LD_VAR 0 13
22636: PPUSH
22637: CALL_OW 247
22641: PUSH
22642: LD_INT 2
22644: EQUAL
22645: AND
22646: PUSH
22647: LD_VAR 0 13
22651: PPUSH
22652: CALL_OW 263
22656: PUSH
22657: LD_INT 1
22659: EQUAL
22660: AND
22661: IFFALSE 22825
// begin if IsDrivenBy ( tmp ) then
22663: LD_VAR 0 13
22667: PPUSH
22668: CALL_OW 311
22672: IFFALSE 22676
// continue ;
22674: GO 22475
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22676: LD_VAR 0 6
22680: PPUSH
22681: LD_INT 3
22683: PUSH
22684: LD_INT 60
22686: PUSH
22687: EMPTY
22688: LIST
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 3
22696: PUSH
22697: LD_INT 55
22699: PUSH
22700: EMPTY
22701: LIST
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PPUSH
22711: CALL_OW 72
22715: IFFALSE 22823
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22717: LD_ADDR_VAR 0 18
22721: PUSH
22722: LD_VAR 0 6
22726: PPUSH
22727: LD_INT 3
22729: PUSH
22730: LD_INT 60
22732: PUSH
22733: EMPTY
22734: LIST
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 3
22742: PUSH
22743: LD_INT 55
22745: PUSH
22746: EMPTY
22747: LIST
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PPUSH
22757: CALL_OW 72
22761: PUSH
22762: LD_INT 1
22764: ARRAY
22765: ST_TO_ADDR
// if IsInUnit ( driver ) then
22766: LD_VAR 0 18
22770: PPUSH
22771: CALL_OW 310
22775: IFFALSE 22786
// ComExit ( driver ) ;
22777: LD_VAR 0 18
22781: PPUSH
22782: CALL 47519 0 1
// AddComEnterUnit ( driver , tmp ) ;
22786: LD_VAR 0 18
22790: PPUSH
22791: LD_VAR 0 13
22795: PPUSH
22796: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22800: LD_VAR 0 18
22804: PPUSH
22805: LD_VAR 0 7
22809: PPUSH
22810: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22814: LD_VAR 0 18
22818: PPUSH
22819: CALL_OW 181
// end ; continue ;
22823: GO 22475
// end ; if not cleaners or not tmp in cleaners then
22825: LD_VAR 0 6
22829: NOT
22830: PUSH
22831: LD_VAR 0 13
22835: PUSH
22836: LD_VAR 0 6
22840: IN
22841: NOT
22842: OR
22843: IFFALSE 23150
// begin if dep then
22845: LD_VAR 0 17
22849: IFFALSE 22985
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22851: LD_ADDR_VAR 0 16
22855: PUSH
22856: LD_VAR 0 17
22860: PUSH
22861: LD_INT 1
22863: ARRAY
22864: PPUSH
22865: CALL_OW 250
22869: PPUSH
22870: LD_VAR 0 17
22874: PUSH
22875: LD_INT 1
22877: ARRAY
22878: PPUSH
22879: CALL_OW 254
22883: PPUSH
22884: LD_INT 5
22886: PPUSH
22887: CALL_OW 272
22891: PUSH
22892: LD_VAR 0 17
22896: PUSH
22897: LD_INT 1
22899: ARRAY
22900: PPUSH
22901: CALL_OW 251
22905: PPUSH
22906: LD_VAR 0 17
22910: PUSH
22911: LD_INT 1
22913: ARRAY
22914: PPUSH
22915: CALL_OW 254
22919: PPUSH
22920: LD_INT 5
22922: PPUSH
22923: CALL_OW 273
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22932: LD_VAR 0 16
22936: PUSH
22937: LD_INT 1
22939: ARRAY
22940: PPUSH
22941: LD_VAR 0 16
22945: PUSH
22946: LD_INT 2
22948: ARRAY
22949: PPUSH
22950: CALL_OW 488
22954: IFFALSE 22985
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22956: LD_VAR 0 13
22960: PPUSH
22961: LD_VAR 0 16
22965: PUSH
22966: LD_INT 1
22968: ARRAY
22969: PPUSH
22970: LD_VAR 0 16
22974: PUSH
22975: LD_INT 2
22977: ARRAY
22978: PPUSH
22979: CALL_OW 111
// continue ;
22983: GO 22475
// end ; end ; r := GetDir ( tmp ) ;
22985: LD_ADDR_VAR 0 15
22989: PUSH
22990: LD_VAR 0 13
22994: PPUSH
22995: CALL_OW 254
22999: ST_TO_ADDR
// if r = 5 then
23000: LD_VAR 0 15
23004: PUSH
23005: LD_INT 5
23007: EQUAL
23008: IFFALSE 23018
// r := 0 ;
23010: LD_ADDR_VAR 0 15
23014: PUSH
23015: LD_INT 0
23017: ST_TO_ADDR
// for j = r to 5 do
23018: LD_ADDR_VAR 0 10
23022: PUSH
23023: DOUBLE
23024: LD_VAR 0 15
23028: DEC
23029: ST_TO_ADDR
23030: LD_INT 5
23032: PUSH
23033: FOR_TO
23034: IFFALSE 23148
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23036: LD_ADDR_VAR 0 11
23040: PUSH
23041: LD_VAR 0 13
23045: PPUSH
23046: CALL_OW 250
23050: PPUSH
23051: LD_VAR 0 10
23055: PPUSH
23056: LD_INT 2
23058: PPUSH
23059: CALL_OW 272
23063: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23064: LD_ADDR_VAR 0 12
23068: PUSH
23069: LD_VAR 0 13
23073: PPUSH
23074: CALL_OW 251
23078: PPUSH
23079: LD_VAR 0 10
23083: PPUSH
23084: LD_INT 2
23086: PPUSH
23087: CALL_OW 273
23091: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23092: LD_VAR 0 11
23096: PPUSH
23097: LD_VAR 0 12
23101: PPUSH
23102: CALL_OW 488
23106: PUSH
23107: LD_VAR 0 11
23111: PPUSH
23112: LD_VAR 0 12
23116: PPUSH
23117: CALL_OW 428
23121: NOT
23122: AND
23123: IFFALSE 23146
// begin ComMoveXY ( tmp , _x , _y ) ;
23125: LD_VAR 0 13
23129: PPUSH
23130: LD_VAR 0 11
23134: PPUSH
23135: LD_VAR 0 12
23139: PPUSH
23140: CALL_OW 111
// break ;
23144: GO 23148
// end ; end ;
23146: GO 23033
23148: POP
23149: POP
// end ; end ;
23150: GO 22475
23152: POP
23153: POP
// end ;
23154: LD_VAR 0 8
23158: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23159: LD_INT 0
23161: PPUSH
// result := true ;
23162: LD_ADDR_VAR 0 3
23166: PUSH
23167: LD_INT 1
23169: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23170: LD_VAR 0 2
23174: PUSH
23175: LD_INT 24
23177: DOUBLE
23178: EQUAL
23179: IFTRUE 23189
23181: LD_INT 33
23183: DOUBLE
23184: EQUAL
23185: IFTRUE 23189
23187: GO 23214
23189: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23190: LD_ADDR_VAR 0 3
23194: PUSH
23195: LD_INT 32
23197: PPUSH
23198: LD_VAR 0 1
23202: PPUSH
23203: CALL_OW 321
23207: PUSH
23208: LD_INT 2
23210: EQUAL
23211: ST_TO_ADDR
23212: GO 23534
23214: LD_INT 20
23216: DOUBLE
23217: EQUAL
23218: IFTRUE 23222
23220: GO 23247
23222: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23223: LD_ADDR_VAR 0 3
23227: PUSH
23228: LD_INT 6
23230: PPUSH
23231: LD_VAR 0 1
23235: PPUSH
23236: CALL_OW 321
23240: PUSH
23241: LD_INT 2
23243: EQUAL
23244: ST_TO_ADDR
23245: GO 23534
23247: LD_INT 22
23249: DOUBLE
23250: EQUAL
23251: IFTRUE 23261
23253: LD_INT 36
23255: DOUBLE
23256: EQUAL
23257: IFTRUE 23261
23259: GO 23286
23261: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23262: LD_ADDR_VAR 0 3
23266: PUSH
23267: LD_INT 15
23269: PPUSH
23270: LD_VAR 0 1
23274: PPUSH
23275: CALL_OW 321
23279: PUSH
23280: LD_INT 2
23282: EQUAL
23283: ST_TO_ADDR
23284: GO 23534
23286: LD_INT 30
23288: DOUBLE
23289: EQUAL
23290: IFTRUE 23294
23292: GO 23319
23294: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23295: LD_ADDR_VAR 0 3
23299: PUSH
23300: LD_INT 20
23302: PPUSH
23303: LD_VAR 0 1
23307: PPUSH
23308: CALL_OW 321
23312: PUSH
23313: LD_INT 2
23315: EQUAL
23316: ST_TO_ADDR
23317: GO 23534
23319: LD_INT 28
23321: DOUBLE
23322: EQUAL
23323: IFTRUE 23333
23325: LD_INT 21
23327: DOUBLE
23328: EQUAL
23329: IFTRUE 23333
23331: GO 23358
23333: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23334: LD_ADDR_VAR 0 3
23338: PUSH
23339: LD_INT 21
23341: PPUSH
23342: LD_VAR 0 1
23346: PPUSH
23347: CALL_OW 321
23351: PUSH
23352: LD_INT 2
23354: EQUAL
23355: ST_TO_ADDR
23356: GO 23534
23358: LD_INT 16
23360: DOUBLE
23361: EQUAL
23362: IFTRUE 23366
23364: GO 23393
23366: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23367: LD_ADDR_VAR 0 3
23371: PUSH
23372: LD_EXP 105
23376: PPUSH
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 321
23386: PUSH
23387: LD_INT 2
23389: EQUAL
23390: ST_TO_ADDR
23391: GO 23534
23393: LD_INT 19
23395: DOUBLE
23396: EQUAL
23397: IFTRUE 23407
23399: LD_INT 23
23401: DOUBLE
23402: EQUAL
23403: IFTRUE 23407
23405: GO 23434
23407: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23408: LD_ADDR_VAR 0 3
23412: PUSH
23413: LD_EXP 104
23417: PPUSH
23418: LD_VAR 0 1
23422: PPUSH
23423: CALL_OW 321
23427: PUSH
23428: LD_INT 2
23430: EQUAL
23431: ST_TO_ADDR
23432: GO 23534
23434: LD_INT 17
23436: DOUBLE
23437: EQUAL
23438: IFTRUE 23442
23440: GO 23467
23442: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23443: LD_ADDR_VAR 0 3
23447: PUSH
23448: LD_INT 39
23450: PPUSH
23451: LD_VAR 0 1
23455: PPUSH
23456: CALL_OW 321
23460: PUSH
23461: LD_INT 2
23463: EQUAL
23464: ST_TO_ADDR
23465: GO 23534
23467: LD_INT 18
23469: DOUBLE
23470: EQUAL
23471: IFTRUE 23475
23473: GO 23500
23475: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23476: LD_ADDR_VAR 0 3
23480: PUSH
23481: LD_INT 40
23483: PPUSH
23484: LD_VAR 0 1
23488: PPUSH
23489: CALL_OW 321
23493: PUSH
23494: LD_INT 2
23496: EQUAL
23497: ST_TO_ADDR
23498: GO 23534
23500: LD_INT 27
23502: DOUBLE
23503: EQUAL
23504: IFTRUE 23508
23506: GO 23533
23508: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23509: LD_ADDR_VAR 0 3
23513: PUSH
23514: LD_INT 35
23516: PPUSH
23517: LD_VAR 0 1
23521: PPUSH
23522: CALL_OW 321
23526: PUSH
23527: LD_INT 2
23529: EQUAL
23530: ST_TO_ADDR
23531: GO 23534
23533: POP
// end ;
23534: LD_VAR 0 3
23538: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23539: LD_INT 0
23541: PPUSH
23542: PPUSH
23543: PPUSH
23544: PPUSH
23545: PPUSH
23546: PPUSH
23547: PPUSH
23548: PPUSH
23549: PPUSH
23550: PPUSH
23551: PPUSH
// result := false ;
23552: LD_ADDR_VAR 0 6
23556: PUSH
23557: LD_INT 0
23559: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23560: LD_VAR 0 1
23564: NOT
23565: PUSH
23566: LD_VAR 0 1
23570: PPUSH
23571: CALL_OW 266
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: IN
23586: NOT
23587: OR
23588: PUSH
23589: LD_VAR 0 2
23593: NOT
23594: OR
23595: PUSH
23596: LD_VAR 0 5
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: LD_INT 2
23609: PUSH
23610: LD_INT 3
23612: PUSH
23613: LD_INT 4
23615: PUSH
23616: LD_INT 5
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: IN
23627: NOT
23628: OR
23629: PUSH
23630: LD_VAR 0 3
23634: PPUSH
23635: LD_VAR 0 4
23639: PPUSH
23640: CALL_OW 488
23644: NOT
23645: OR
23646: IFFALSE 23650
// exit ;
23648: GO 24386
// side := GetSide ( depot ) ;
23650: LD_ADDR_VAR 0 9
23654: PUSH
23655: LD_VAR 0 1
23659: PPUSH
23660: CALL_OW 255
23664: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23665: LD_VAR 0 9
23669: PPUSH
23670: LD_VAR 0 2
23674: PPUSH
23675: CALL 23159 0 2
23679: NOT
23680: IFFALSE 23684
// exit ;
23682: GO 24386
// pom := GetBase ( depot ) ;
23684: LD_ADDR_VAR 0 10
23688: PUSH
23689: LD_VAR 0 1
23693: PPUSH
23694: CALL_OW 274
23698: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23699: LD_ADDR_VAR 0 11
23703: PUSH
23704: LD_VAR 0 2
23708: PPUSH
23709: LD_VAR 0 1
23713: PPUSH
23714: CALL_OW 248
23718: PPUSH
23719: CALL_OW 450
23723: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23724: LD_VAR 0 10
23728: PPUSH
23729: LD_INT 1
23731: PPUSH
23732: CALL_OW 275
23736: PUSH
23737: LD_VAR 0 11
23741: PUSH
23742: LD_INT 1
23744: ARRAY
23745: GREATEREQUAL
23746: PUSH
23747: LD_VAR 0 10
23751: PPUSH
23752: LD_INT 2
23754: PPUSH
23755: CALL_OW 275
23759: PUSH
23760: LD_VAR 0 11
23764: PUSH
23765: LD_INT 2
23767: ARRAY
23768: GREATEREQUAL
23769: AND
23770: PUSH
23771: LD_VAR 0 10
23775: PPUSH
23776: LD_INT 3
23778: PPUSH
23779: CALL_OW 275
23783: PUSH
23784: LD_VAR 0 11
23788: PUSH
23789: LD_INT 3
23791: ARRAY
23792: GREATEREQUAL
23793: AND
23794: NOT
23795: IFFALSE 23799
// exit ;
23797: GO 24386
// if GetBType ( depot ) = b_depot then
23799: LD_VAR 0 1
23803: PPUSH
23804: CALL_OW 266
23808: PUSH
23809: LD_INT 0
23811: EQUAL
23812: IFFALSE 23824
// dist := 28 else
23814: LD_ADDR_VAR 0 14
23818: PUSH
23819: LD_INT 28
23821: ST_TO_ADDR
23822: GO 23832
// dist := 36 ;
23824: LD_ADDR_VAR 0 14
23828: PUSH
23829: LD_INT 36
23831: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23832: LD_VAR 0 1
23836: PPUSH
23837: LD_VAR 0 3
23841: PPUSH
23842: LD_VAR 0 4
23846: PPUSH
23847: CALL_OW 297
23851: PUSH
23852: LD_VAR 0 14
23856: GREATER
23857: IFFALSE 23861
// exit ;
23859: GO 24386
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23861: LD_ADDR_VAR 0 12
23865: PUSH
23866: LD_VAR 0 2
23870: PPUSH
23871: LD_VAR 0 3
23875: PPUSH
23876: LD_VAR 0 4
23880: PPUSH
23881: LD_VAR 0 5
23885: PPUSH
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 248
23895: PPUSH
23896: LD_INT 0
23898: PPUSH
23899: CALL 24391 0 6
23903: ST_TO_ADDR
// if not hexes then
23904: LD_VAR 0 12
23908: NOT
23909: IFFALSE 23913
// exit ;
23911: GO 24386
// hex := GetHexInfo ( x , y ) ;
23913: LD_ADDR_VAR 0 15
23917: PUSH
23918: LD_VAR 0 3
23922: PPUSH
23923: LD_VAR 0 4
23927: PPUSH
23928: CALL_OW 546
23932: ST_TO_ADDR
// if hex [ 1 ] then
23933: LD_VAR 0 15
23937: PUSH
23938: LD_INT 1
23940: ARRAY
23941: IFFALSE 23945
// exit ;
23943: GO 24386
// height := hex [ 2 ] ;
23945: LD_ADDR_VAR 0 13
23949: PUSH
23950: LD_VAR 0 15
23954: PUSH
23955: LD_INT 2
23957: ARRAY
23958: ST_TO_ADDR
// for i = 1 to hexes do
23959: LD_ADDR_VAR 0 7
23963: PUSH
23964: DOUBLE
23965: LD_INT 1
23967: DEC
23968: ST_TO_ADDR
23969: LD_VAR 0 12
23973: PUSH
23974: FOR_TO
23975: IFFALSE 24305
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23977: LD_VAR 0 12
23981: PUSH
23982: LD_VAR 0 7
23986: ARRAY
23987: PUSH
23988: LD_INT 1
23990: ARRAY
23991: PPUSH
23992: LD_VAR 0 12
23996: PUSH
23997: LD_VAR 0 7
24001: ARRAY
24002: PUSH
24003: LD_INT 2
24005: ARRAY
24006: PPUSH
24007: CALL_OW 488
24011: NOT
24012: PUSH
24013: LD_VAR 0 12
24017: PUSH
24018: LD_VAR 0 7
24022: ARRAY
24023: PUSH
24024: LD_INT 1
24026: ARRAY
24027: PPUSH
24028: LD_VAR 0 12
24032: PUSH
24033: LD_VAR 0 7
24037: ARRAY
24038: PUSH
24039: LD_INT 2
24041: ARRAY
24042: PPUSH
24043: CALL_OW 428
24047: PUSH
24048: LD_INT 0
24050: GREATER
24051: OR
24052: PUSH
24053: LD_VAR 0 12
24057: PUSH
24058: LD_VAR 0 7
24062: ARRAY
24063: PUSH
24064: LD_INT 1
24066: ARRAY
24067: PPUSH
24068: LD_VAR 0 12
24072: PUSH
24073: LD_VAR 0 7
24077: ARRAY
24078: PUSH
24079: LD_INT 2
24081: ARRAY
24082: PPUSH
24083: CALL_OW 351
24087: OR
24088: IFFALSE 24094
// exit ;
24090: POP
24091: POP
24092: GO 24386
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24094: LD_ADDR_VAR 0 8
24098: PUSH
24099: LD_VAR 0 12
24103: PUSH
24104: LD_VAR 0 7
24108: ARRAY
24109: PUSH
24110: LD_INT 1
24112: ARRAY
24113: PPUSH
24114: LD_VAR 0 12
24118: PUSH
24119: LD_VAR 0 7
24123: ARRAY
24124: PUSH
24125: LD_INT 2
24127: ARRAY
24128: PPUSH
24129: CALL_OW 546
24133: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24134: LD_VAR 0 8
24138: PUSH
24139: LD_INT 1
24141: ARRAY
24142: PUSH
24143: LD_VAR 0 8
24147: PUSH
24148: LD_INT 2
24150: ARRAY
24151: PUSH
24152: LD_VAR 0 13
24156: PUSH
24157: LD_INT 2
24159: PLUS
24160: GREATER
24161: OR
24162: PUSH
24163: LD_VAR 0 8
24167: PUSH
24168: LD_INT 2
24170: ARRAY
24171: PUSH
24172: LD_VAR 0 13
24176: PUSH
24177: LD_INT 2
24179: MINUS
24180: LESS
24181: OR
24182: PUSH
24183: LD_VAR 0 8
24187: PUSH
24188: LD_INT 3
24190: ARRAY
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: LD_INT 8
24197: PUSH
24198: LD_INT 9
24200: PUSH
24201: LD_INT 10
24203: PUSH
24204: LD_INT 11
24206: PUSH
24207: LD_INT 12
24209: PUSH
24210: LD_INT 13
24212: PUSH
24213: LD_INT 16
24215: PUSH
24216: LD_INT 17
24218: PUSH
24219: LD_INT 18
24221: PUSH
24222: LD_INT 19
24224: PUSH
24225: LD_INT 20
24227: PUSH
24228: LD_INT 21
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: IN
24246: NOT
24247: OR
24248: PUSH
24249: LD_VAR 0 8
24253: PUSH
24254: LD_INT 5
24256: ARRAY
24257: NOT
24258: OR
24259: PUSH
24260: LD_VAR 0 8
24264: PUSH
24265: LD_INT 6
24267: ARRAY
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: LD_INT 7
24277: PUSH
24278: LD_INT 9
24280: PUSH
24281: LD_INT 10
24283: PUSH
24284: LD_INT 11
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: IN
24295: NOT
24296: OR
24297: IFFALSE 24303
// exit ;
24299: POP
24300: POP
24301: GO 24386
// end ;
24303: GO 23974
24305: POP
24306: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24307: LD_VAR 0 9
24311: PPUSH
24312: LD_VAR 0 3
24316: PPUSH
24317: LD_VAR 0 4
24321: PPUSH
24322: LD_INT 20
24324: PPUSH
24325: CALL 16224 0 4
24329: PUSH
24330: LD_INT 4
24332: ARRAY
24333: IFFALSE 24337
// exit ;
24335: GO 24386
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24337: LD_VAR 0 2
24341: PUSH
24342: LD_INT 29
24344: PUSH
24345: LD_INT 30
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: IN
24352: PUSH
24353: LD_VAR 0 3
24357: PPUSH
24358: LD_VAR 0 4
24362: PPUSH
24363: LD_VAR 0 9
24367: PPUSH
24368: CALL_OW 440
24372: NOT
24373: AND
24374: IFFALSE 24378
// exit ;
24376: GO 24386
// result := true ;
24378: LD_ADDR_VAR 0 6
24382: PUSH
24383: LD_INT 1
24385: ST_TO_ADDR
// end ;
24386: LD_VAR 0 6
24390: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24391: LD_INT 0
24393: PPUSH
24394: PPUSH
24395: PPUSH
24396: PPUSH
24397: PPUSH
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
24403: PPUSH
24404: PPUSH
24405: PPUSH
24406: PPUSH
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
24418: PPUSH
24419: PPUSH
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
24424: PPUSH
24425: PPUSH
24426: PPUSH
24427: PPUSH
24428: PPUSH
24429: PPUSH
24430: PPUSH
24431: PPUSH
24432: PPUSH
24433: PPUSH
24434: PPUSH
24435: PPUSH
24436: PPUSH
24437: PPUSH
24438: PPUSH
24439: PPUSH
24440: PPUSH
24441: PPUSH
24442: PPUSH
24443: PPUSH
24444: PPUSH
24445: PPUSH
24446: PPUSH
24447: PPUSH
24448: PPUSH
24449: PPUSH
24450: PPUSH
// result = [ ] ;
24451: LD_ADDR_VAR 0 7
24455: PUSH
24456: EMPTY
24457: ST_TO_ADDR
// temp_list = [ ] ;
24458: LD_ADDR_VAR 0 9
24462: PUSH
24463: EMPTY
24464: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24465: LD_VAR 0 4
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: LD_INT 2
24478: PUSH
24479: LD_INT 3
24481: PUSH
24482: LD_INT 4
24484: PUSH
24485: LD_INT 5
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: IN
24496: NOT
24497: PUSH
24498: LD_VAR 0 1
24502: PUSH
24503: LD_INT 0
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: IN
24513: PUSH
24514: LD_VAR 0 5
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 3
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: LIST
24532: IN
24533: NOT
24534: AND
24535: OR
24536: IFFALSE 24540
// exit ;
24538: GO 42931
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24540: LD_VAR 0 1
24544: PUSH
24545: LD_INT 6
24547: PUSH
24548: LD_INT 7
24550: PUSH
24551: LD_INT 8
24553: PUSH
24554: LD_INT 13
24556: PUSH
24557: LD_INT 12
24559: PUSH
24560: LD_INT 15
24562: PUSH
24563: LD_INT 11
24565: PUSH
24566: LD_INT 14
24568: PUSH
24569: LD_INT 10
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: IN
24583: IFFALSE 24593
// btype = b_lab ;
24585: LD_ADDR_VAR 0 1
24589: PUSH
24590: LD_INT 6
24592: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24593: LD_VAR 0 6
24597: PUSH
24598: LD_INT 0
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: LIST
24611: IN
24612: NOT
24613: PUSH
24614: LD_VAR 0 1
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: LD_INT 3
24630: PUSH
24631: LD_INT 6
24633: PUSH
24634: LD_INT 36
24636: PUSH
24637: LD_INT 4
24639: PUSH
24640: LD_INT 5
24642: PUSH
24643: LD_INT 31
24645: PUSH
24646: LD_INT 32
24648: PUSH
24649: LD_INT 33
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: IN
24665: NOT
24666: PUSH
24667: LD_VAR 0 6
24671: PUSH
24672: LD_INT 1
24674: EQUAL
24675: AND
24676: OR
24677: PUSH
24678: LD_VAR 0 1
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: LD_INT 3
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: IN
24693: NOT
24694: PUSH
24695: LD_VAR 0 6
24699: PUSH
24700: LD_INT 2
24702: EQUAL
24703: AND
24704: OR
24705: IFFALSE 24715
// mode = 0 ;
24707: LD_ADDR_VAR 0 6
24711: PUSH
24712: LD_INT 0
24714: ST_TO_ADDR
// case mode of 0 :
24715: LD_VAR 0 6
24719: PUSH
24720: LD_INT 0
24722: DOUBLE
24723: EQUAL
24724: IFTRUE 24728
24726: GO 36181
24728: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24729: LD_ADDR_VAR 0 11
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: LD_INT 2
24814: NEG
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: LD_INT 2
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: LD_INT 2
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 0
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: LD_INT 3
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: LD_INT 3
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 1
24895: NEG
24896: PUSH
24897: LD_INT 2
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24922: LD_ADDR_VAR 0 12
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: LD_INT 0
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: NEG
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 2
25045: NEG
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: NEG
25057: PUSH
25058: LD_INT 1
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 2
25068: NEG
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 3
25079: NEG
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 3
25090: NEG
25091: PUSH
25092: LD_INT 1
25094: NEG
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25118: LD_ADDR_VAR 0 13
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: LD_INT 1
25138: NEG
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: LD_INT 1
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: LD_INT 0
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: LD_INT 2
25203: NEG
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 2
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: LD_INT 2
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: LD_INT 2
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 2
25253: NEG
25254: PUSH
25255: LD_INT 2
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 2
25265: NEG
25266: PUSH
25267: LD_INT 3
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 3
25277: NEG
25278: PUSH
25279: LD_INT 2
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 3
25289: NEG
25290: PUSH
25291: LD_INT 3
25293: NEG
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25317: LD_ADDR_VAR 0 14
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: LD_INT 1
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: NEG
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 1
25386: NEG
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: LD_INT 2
25402: NEG
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: LD_INT 2
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 1
25421: PUSH
25422: LD_INT 1
25424: NEG
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: LD_INT 3
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: LD_INT 3
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: LD_INT 2
25489: NEG
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25513: LD_ADDR_VAR 0 15
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: LD_INT 1
25533: NEG
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: LD_INT 0
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 0
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 1
25582: NEG
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 2
25636: NEG
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 2
25647: NEG
25648: PUSH
25649: LD_INT 1
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 2
25659: PUSH
25660: LD_INT 1
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 3
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 3
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25706: LD_ADDR_VAR 0 16
25710: PUSH
25711: LD_INT 0
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 1
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: NEG
25788: PUSH
25789: LD_INT 2
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 2
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: NEG
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: NEG
25842: PUSH
25843: LD_INT 2
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 3
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 3
25863: PUSH
25864: LD_INT 3
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 2
25873: PUSH
25874: LD_INT 3
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25899: LD_ADDR_VAR 0 17
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: LD_INT 0
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 1
25968: NEG
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: NEG
25981: PUSH
25982: LD_INT 2
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 0
25992: PUSH
25993: LD_INT 2
25995: NEG
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 2
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: LD_INT 2
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: LD_INT 2
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: LD_INT 2
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: NEG
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 2
26086: NEG
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 2
26098: NEG
26099: PUSH
26100: LD_INT 2
26102: NEG
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26129: LD_ADDR_VAR 0 18
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: LD_INT 1
26202: NEG
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: NEG
26211: PUSH
26212: LD_INT 2
26214: NEG
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: LD_INT 2
26225: NEG
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: LD_INT 1
26236: NEG
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 2
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: NEG
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 2
26305: NEG
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: LD_INT 2
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26359: LD_ADDR_VAR 0 19
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: LD_INT 1
26379: NEG
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 1
26428: NEG
26429: PUSH
26430: LD_INT 1
26432: NEG
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: NEG
26441: PUSH
26442: LD_INT 2
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 2
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: LD_INT 2
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 1
26524: NEG
26525: PUSH
26526: LD_INT 1
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 2
26535: NEG
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 2
26546: NEG
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 2
26558: NEG
26559: PUSH
26560: LD_INT 2
26562: NEG
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26589: LD_ADDR_VAR 0 20
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: LD_INT 1
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: LD_INT 1
26662: NEG
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: LD_INT 2
26674: NEG
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: LD_INT 2
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 2
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: LD_INT 2
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 2
26765: NEG
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 2
26776: NEG
26777: PUSH
26778: LD_INT 1
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: NEG
26789: PUSH
26790: LD_INT 2
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26819: LD_ADDR_VAR 0 21
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 1
26900: NEG
26901: PUSH
26902: LD_INT 2
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: LD_INT 2
26915: NEG
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 2
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 2
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 2
26954: PUSH
26955: LD_INT 2
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 2
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 2
26995: NEG
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: NEG
27019: PUSH
27020: LD_INT 2
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27049: LD_ADDR_VAR 0 22
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 1
27130: NEG
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: LD_INT 2
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: LD_INT 1
27156: NEG
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 2
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 2
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: LD_INT 2
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 2
27225: NEG
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: LD_INT 1
27240: NEG
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 2
27248: NEG
27249: PUSH
27250: LD_INT 2
27252: NEG
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27279: LD_ADDR_VAR 0 23
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 1
27360: NEG
27361: PUSH
27362: LD_INT 2
27364: NEG
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 2
27414: PUSH
27415: LD_INT 2
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 2
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: LD_INT 1
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 2
27478: NEG
27479: PUSH
27480: LD_INT 2
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: NEG
27491: PUSH
27492: LD_INT 3
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: LD_INT 3
27506: NEG
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 2
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27559: LD_ADDR_VAR 0 24
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 1
27579: NEG
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: NEG
27641: PUSH
27642: LD_INT 2
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: LD_INT 1
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 2
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: LD_INT 2
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: LD_INT 2
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: LD_INT 1
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 2
27735: NEG
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 2
27746: NEG
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 2
27758: NEG
27759: PUSH
27760: LD_INT 2
27762: NEG
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: LD_INT 1
27784: NEG
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 3
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27835: LD_ADDR_VAR 0 25
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: LD_INT 1
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: LD_INT 1
27908: NEG
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 1
27916: NEG
27917: PUSH
27918: LD_INT 2
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 2
27970: PUSH
27971: LD_INT 2
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: LD_INT 2
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 1
28000: NEG
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 2
28011: NEG
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: LD_INT 1
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 2
28034: NEG
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 3
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 3
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 2
28066: PUSH
28067: LD_INT 3
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: LD_INT 3
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28109: LD_ADDR_VAR 0 26
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 1
28167: NEG
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: LD_INT 1
28182: NEG
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: LD_INT 2
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 2
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 2
28285: NEG
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: LD_INT 2
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 2
28320: PUSH
28321: LD_INT 3
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 3
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 2
28351: NEG
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28385: LD_ADDR_VAR 0 27
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: NEG
28455: PUSH
28456: LD_INT 1
28458: NEG
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 2
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 1
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 2
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 2
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 2
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 2
28561: NEG
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 2
28572: NEG
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: NEG
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 2
28607: NEG
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 3
28618: NEG
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 3
28630: NEG
28631: PUSH
28632: LD_INT 2
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28665: LD_ADDR_VAR 0 28
28669: PUSH
28670: LD_INT 0
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: LD_INT 0
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 1
28746: NEG
28747: PUSH
28748: LD_INT 2
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: LD_INT 2
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 2
28790: PUSH
28791: LD_INT 1
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 2
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: LD_INT 2
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: LD_INT 2
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 1
28830: NEG
28831: PUSH
28832: LD_INT 1
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: LD_INT 0
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: LD_INT 2
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 2
28876: NEG
28877: PUSH
28878: LD_INT 3
28880: NEG
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 1
28888: NEG
28889: PUSH
28890: LD_INT 3
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 3
28900: NEG
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 3
28912: NEG
28913: PUSH
28914: LD_INT 2
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28947: LD_ADDR_VAR 0 29
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 1
29005: NEG
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 1
29016: NEG
29017: PUSH
29018: LD_INT 1
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: LD_INT 2
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: LD_INT 1
29054: NEG
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 2
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 2
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: LD_INT 2
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: LD_INT 2
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: NEG
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 2
29113: NEG
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 2
29125: NEG
29126: PUSH
29127: LD_INT 2
29129: NEG
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: LD_INT 3
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 3
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: LD_INT 3
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 1
29180: NEG
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 3
29191: NEG
29192: PUSH
29193: LD_INT 2
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29226: LD_ADDR_VAR 0 30
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 0
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: LD_INT 1
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: LD_INT 2
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 2
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 2
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 2
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: LD_INT 2
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 2
29403: NEG
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: NEG
29416: PUSH
29417: LD_INT 3
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: LD_INT 2
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: LD_INT 3
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 2
29458: NEG
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 3
29469: NEG
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29504: LD_ADDR_VAR 0 31
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 0
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: LD_INT 0
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 1
29585: NEG
29586: PUSH
29587: LD_INT 2
29589: NEG
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 2
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 2
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 2
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: LD_INT 2
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 2
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 1
29658: NEG
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 2
29669: NEG
29670: PUSH
29671: LD_INT 1
29673: NEG
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 2
29681: NEG
29682: PUSH
29683: LD_INT 2
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 2
29693: NEG
29694: PUSH
29695: LD_INT 3
29697: NEG
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: LD_INT 1
29708: NEG
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 3
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: LD_INT 3
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 1
29736: NEG
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 3
29747: NEG
29748: PUSH
29749: LD_INT 2
29751: NEG
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29782: LD_ADDR_VAR 0 32
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 0
29830: PUSH
29831: LD_INT 1
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 1
29840: NEG
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 1
29851: NEG
29852: PUSH
29853: LD_INT 1
29855: NEG
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: LD_INT 2
29867: NEG
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: LD_INT 2
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: LD_INT 1
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 2
29907: PUSH
29908: LD_INT 2
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 2
29948: NEG
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 2
29959: NEG
29960: PUSH
29961: LD_INT 1
29963: NEG
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: LD_INT 3
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: LD_INT 2
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 3
29994: PUSH
29995: LD_INT 2
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 3
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 3
30025: NEG
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30060: LD_ADDR_VAR 0 33
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 1
30129: NEG
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 1
30141: NEG
30142: PUSH
30143: LD_INT 2
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: LD_INT 1
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 2
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 2
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: PUSH
30185: LD_INT 2
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 1
30204: NEG
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 2
30215: NEG
30216: PUSH
30217: LD_INT 0
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 2
30226: NEG
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: LD_INT 2
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 2
30250: NEG
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 3
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 3
30304: NEG
30305: PUSH
30306: LD_INT 2
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30339: LD_ADDR_VAR 0 34
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: NEG
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 2
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: LD_INT 2
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 2
30495: NEG
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 2
30506: NEG
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 2
30518: NEG
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: LD_INT 3
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: LD_INT 2
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 3
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 2
30563: PUSH
30564: LD_INT 3
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 2
30573: NEG
30574: PUSH
30575: LD_INT 1
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 3
30584: NEG
30585: PUSH
30586: LD_INT 1
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30619: LD_ADDR_VAR 0 35
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 0
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: LD_INT 0
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: NEG
30711: PUSH
30712: LD_INT 1
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30731: LD_ADDR_VAR 0 36
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: LD_INT 1
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 1
30789: NEG
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 1
30812: NEG
30813: PUSH
30814: LD_INT 2
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30843: LD_ADDR_VAR 0 37
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30955: LD_ADDR_VAR 0 38
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 1
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: LD_INT 1
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: LD_INT 1
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31067: LD_ADDR_VAR 0 39
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 1
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 1
31125: NEG
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: LD_INT 2
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31179: LD_ADDR_VAR 0 40
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: NEG
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31291: LD_ADDR_VAR 0 41
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: LD_INT 1
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 1
31349: NEG
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: LD_INT 1
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: LD_INT 2
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 2
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: LD_INT 2
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: LD_INT 2
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: NEG
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: LD_INT 1
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: LD_INT 3
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 2
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 3
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 3
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 3
31524: PUSH
31525: LD_INT 2
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 3
31534: PUSH
31535: LD_INT 3
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 2
31544: PUSH
31545: LD_INT 3
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 3
31565: NEG
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 3
31576: NEG
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: NEG
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 3
31600: NEG
31601: PUSH
31602: LD_INT 3
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31641: LD_ADDR_VAR 0 42
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: LD_INT 2
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: LD_INT 1
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 2
31766: PUSH
31767: LD_INT 2
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 2
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 2
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 2
31819: NEG
31820: PUSH
31821: LD_INT 2
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: LD_INT 3
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 3
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: LD_INT 3
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 2
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 3
31877: PUSH
31878: LD_INT 2
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 3
31887: PUSH
31888: LD_INT 3
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: LD_INT 3
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 3
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: LD_INT 3
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: LD_INT 2
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 3
31938: NEG
31939: PUSH
31940: LD_INT 2
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 3
31950: NEG
31951: PUSH
31952: LD_INT 3
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31991: LD_ADDR_VAR 0 43
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: LD_INT 2
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: LD_INT 2
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: LD_INT 1
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 1
32146: NEG
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: LD_INT 3
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: LD_INT 3
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 3
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: LD_INT 3
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 2
32276: NEG
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 3
32287: NEG
32288: PUSH
32289: LD_INT 0
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 3
32298: NEG
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32339: LD_ADDR_VAR 0 44
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: LD_INT 1
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: LD_INT 1
32412: NEG
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: LD_INT 2
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: LD_INT 1
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 1
32473: PUSH
32474: LD_INT 2
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: LD_INT 2
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 2
32529: NEG
32530: PUSH
32531: LD_INT 3
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 3
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: LD_INT 2
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 3
32582: PUSH
32583: LD_INT 3
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 2
32602: NEG
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 3
32613: NEG
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: NEG
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 3
32636: NEG
32637: PUSH
32638: LD_INT 2
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 3
32648: NEG
32649: PUSH
32650: LD_INT 3
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32689: LD_ADDR_VAR 0 45
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: LD_INT 1
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 0
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 1
32770: NEG
32771: PUSH
32772: LD_INT 2
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: LD_INT 2
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: LD_INT 1
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 2
32867: NEG
32868: PUSH
32869: LD_INT 2
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 2
32879: NEG
32880: PUSH
32881: LD_INT 3
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: LD_INT 3
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 3
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: LD_INT 2
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 3
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: LD_INT 3
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: LD_INT 3
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: LD_INT 3
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 0
32965: PUSH
32966: LD_INT 3
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 3
32986: NEG
32987: PUSH
32988: LD_INT 2
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 3
32998: NEG
32999: PUSH
33000: LD_INT 3
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33039: LD_ADDR_VAR 0 46
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: LD_INT 0
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: NEG
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: LD_INT 2
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: LD_INT 2
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: LD_INT 1
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 0
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 2
33205: NEG
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 2
33216: NEG
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 1
33228: NEG
33229: PUSH
33230: LD_INT 3
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 3
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: LD_INT 2
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 2
33262: PUSH
33263: LD_INT 1
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 3
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 3
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: LD_INT 3
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: LD_INT 3
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: LD_INT 2
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 2
33324: NEG
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 3
33335: NEG
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 3
33346: NEG
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33387: LD_ADDR_VAR 0 47
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: LD_INT 1
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 1
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 0
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 1
33456: NEG
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: LD_INT 2
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 2
33502: NEG
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 2
33514: NEG
33515: PUSH
33516: LD_INT 2
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33538: LD_ADDR_VAR 0 48
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: LD_INT 2
33623: NEG
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: LD_INT 2
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33685: LD_ADDR_VAR 0 49
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: LD_INT 1
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 1
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 2
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 2
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: PUSH
33798: LD_INT 2
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33829: LD_ADDR_VAR 0 50
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 2
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33973: LD_ADDR_VAR 0 51
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: LD_INT 0
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 2
34085: NEG
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 2
34096: NEG
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34120: LD_ADDR_VAR 0 52
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 0
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 1
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: LD_INT 2
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34271: LD_ADDR_VAR 0 53
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 0
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: LD_INT 2
34356: NEG
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 2
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 2
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 1
34416: PUSH
34417: LD_INT 2
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: LD_INT 2
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 1
34436: NEG
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: NEG
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: NEG
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34501: LD_ADDR_VAR 0 54
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 0
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: NEG
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: LD_INT 2
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: LD_INT 2
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 2
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: LD_INT 2
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 2
34677: NEG
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 2
34700: NEG
34701: PUSH
34702: LD_INT 2
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34731: LD_ADDR_VAR 0 55
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: LD_INT 2
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: LD_INT 2
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: LD_INT 1
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 2
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: LD_INT 2
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 2
34930: NEG
34931: PUSH
34932: LD_INT 2
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34961: LD_ADDR_VAR 0 56
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: LD_INT 0
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: LD_INT 2
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 2
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 1
35065: PUSH
35066: LD_INT 1
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 2
35086: PUSH
35087: LD_INT 1
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: LD_INT 2
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: LD_INT 2
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: LD_INT 2
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: LD_INT 1
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: NEG
35161: PUSH
35162: LD_INT 2
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35191: LD_ADDR_VAR 0 57
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 0
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: LD_INT 2
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: LD_INT 2
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: LD_INT 2
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: LD_INT 2
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 2
35367: NEG
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 2
35378: NEG
35379: PUSH
35380: LD_INT 1
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 2
35390: NEG
35391: PUSH
35392: LD_INT 2
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35421: LD_ADDR_VAR 0 58
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: NEG
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: LD_INT 2
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 2
35546: PUSH
35547: LD_INT 1
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: LD_INT 2
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: LD_INT 2
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 2
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: NEG
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: LD_INT 2
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35651: LD_ADDR_VAR 0 59
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35739: LD_ADDR_VAR 0 60
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 1
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35827: LD_ADDR_VAR 0 61
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: NEG
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35915: LD_ADDR_VAR 0 62
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36003: LD_ADDR_VAR 0 63
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36091: LD_ADDR_VAR 0 64
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: NEG
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: ST_TO_ADDR
// end ; 1 :
36179: GO 42076
36181: LD_INT 1
36183: DOUBLE
36184: EQUAL
36185: IFTRUE 36189
36187: GO 38812
36189: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36190: LD_ADDR_VAR 0 11
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: LD_INT 3
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: LD_INT 3
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: LD_INT 2
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36234: LD_ADDR_VAR 0 12
36238: PUSH
36239: LD_INT 2
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 3
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 3
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: LIST
36274: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36275: LD_ADDR_VAR 0 13
36279: PUSH
36280: LD_INT 3
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 3
36292: PUSH
36293: LD_INT 3
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 2
36302: PUSH
36303: LD_INT 3
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: LIST
36314: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36315: LD_ADDR_VAR 0 14
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: LD_INT 3
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36356: LD_ADDR_VAR 0 15
36360: PUSH
36361: LD_INT 2
36363: NEG
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 3
36374: NEG
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 3
36385: NEG
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36400: LD_ADDR_VAR 0 16
36404: PUSH
36405: LD_INT 2
36407: NEG
36408: PUSH
36409: LD_INT 3
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 3
36419: NEG
36420: PUSH
36421: LD_INT 2
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 3
36431: NEG
36432: PUSH
36433: LD_INT 3
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36446: LD_ADDR_VAR 0 17
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: LD_INT 3
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 3
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: LD_INT 2
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36490: LD_ADDR_VAR 0 18
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 3
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 3
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36531: LD_ADDR_VAR 0 19
36535: PUSH
36536: LD_INT 3
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 3
36548: PUSH
36549: LD_INT 3
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 2
36558: PUSH
36559: LD_INT 3
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36571: LD_ADDR_VAR 0 20
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: LD_INT 3
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: LD_INT 3
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36612: LD_ADDR_VAR 0 21
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: LD_INT 1
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 3
36630: NEG
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 3
36641: NEG
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36656: LD_ADDR_VAR 0 22
36660: PUSH
36661: LD_INT 2
36663: NEG
36664: PUSH
36665: LD_INT 3
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 3
36675: NEG
36676: PUSH
36677: LD_INT 2
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 3
36687: NEG
36688: PUSH
36689: LD_INT 3
36691: NEG
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: LIST
36701: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36702: LD_ADDR_VAR 0 23
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: LD_INT 3
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: LD_INT 4
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 3
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36746: LD_ADDR_VAR 0 24
36750: PUSH
36751: LD_INT 3
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 3
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 4
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: LIST
36786: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36787: LD_ADDR_VAR 0 25
36791: PUSH
36792: LD_INT 3
36794: PUSH
36795: LD_INT 3
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 4
36804: PUSH
36805: LD_INT 3
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 3
36814: PUSH
36815: LD_INT 4
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: LIST
36826: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36827: LD_ADDR_VAR 0 26
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: LD_INT 3
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: LD_INT 4
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: LD_INT 3
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36868: LD_ADDR_VAR 0 27
36872: PUSH
36873: LD_INT 3
36875: NEG
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 3
36886: NEG
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 4
36897: NEG
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: LIST
36911: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36912: LD_ADDR_VAR 0 28
36916: PUSH
36917: LD_INT 3
36919: NEG
36920: PUSH
36921: LD_INT 3
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 3
36931: NEG
36932: PUSH
36933: LD_INT 4
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 4
36943: NEG
36944: PUSH
36945: LD_INT 3
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: LIST
36957: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36958: LD_ADDR_VAR 0 29
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: LD_INT 3
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 3
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: LD_INT 2
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: LD_INT 4
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: LD_INT 4
37014: NEG
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: LD_INT 3
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: LD_INT 5
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 5
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: LD_INT 4
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 6
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 6
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 5
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37113: LD_ADDR_VAR 0 30
37117: PUSH
37118: LD_INT 2
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 3
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 3
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 3
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 4
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 4
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 4
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 5
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 5
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 5
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 6
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 6
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37256: LD_ADDR_VAR 0 31
37260: PUSH
37261: LD_INT 3
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 3
37273: PUSH
37274: LD_INT 3
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 2
37283: PUSH
37284: LD_INT 3
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 4
37293: PUSH
37294: LD_INT 3
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 4
37303: PUSH
37304: LD_INT 4
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 3
37313: PUSH
37314: LD_INT 4
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 5
37323: PUSH
37324: LD_INT 4
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 5
37333: PUSH
37334: LD_INT 5
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 4
37343: PUSH
37344: LD_INT 5
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 6
37353: PUSH
37354: LD_INT 5
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 6
37363: PUSH
37364: LD_INT 6
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 5
37373: PUSH
37374: LD_INT 6
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37395: LD_ADDR_VAR 0 32
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 3
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: LD_INT 3
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: LD_INT 4
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: LD_INT 4
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: LD_INT 3
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: LD_INT 5
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: LD_INT 5
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: LD_INT 4
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 6
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 6
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 5
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37538: LD_ADDR_VAR 0 33
37542: PUSH
37543: LD_INT 2
37545: NEG
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 3
37556: NEG
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 3
37567: NEG
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 3
37579: NEG
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 4
37590: NEG
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 4
37601: NEG
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 4
37613: NEG
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 5
37624: NEG
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 5
37635: NEG
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 5
37647: NEG
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 6
37658: NEG
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 6
37669: NEG
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37693: LD_ADDR_VAR 0 34
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: LD_INT 3
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 3
37712: NEG
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 3
37724: NEG
37725: PUSH
37726: LD_INT 3
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 3
37736: NEG
37737: PUSH
37738: LD_INT 4
37740: NEG
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 4
37748: NEG
37749: PUSH
37750: LD_INT 3
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 4
37760: NEG
37761: PUSH
37762: LD_INT 4
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 4
37772: NEG
37773: PUSH
37774: LD_INT 5
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 5
37784: NEG
37785: PUSH
37786: LD_INT 4
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 5
37796: NEG
37797: PUSH
37798: LD_INT 5
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 5
37808: NEG
37809: PUSH
37810: LD_INT 6
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 6
37820: NEG
37821: PUSH
37822: LD_INT 5
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 6
37832: NEG
37833: PUSH
37834: LD_INT 6
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37856: LD_ADDR_VAR 0 41
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 2
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: LD_INT 3
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: LD_INT 2
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37900: LD_ADDR_VAR 0 42
37904: PUSH
37905: LD_INT 2
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 3
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37941: LD_ADDR_VAR 0 43
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: LD_INT 2
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 3
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: LD_INT 3
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: LIST
37980: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37981: LD_ADDR_VAR 0 44
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: LD_INT 2
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: LD_INT 3
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38022: LD_ADDR_VAR 0 45
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 3
38051: NEG
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38066: LD_ADDR_VAR 0 46
38070: PUSH
38071: LD_INT 2
38073: NEG
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 2
38085: NEG
38086: PUSH
38087: LD_INT 3
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: NEG
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: LIST
38111: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38112: LD_ADDR_VAR 0 47
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: LD_INT 3
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: LD_INT 3
38135: NEG
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38145: LD_ADDR_VAR 0 48
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: LD_INT 2
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38176: LD_ADDR_VAR 0 49
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 3
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38205: LD_ADDR_VAR 0 50
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: LD_INT 3
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: LD_INT 3
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38234: LD_ADDR_VAR 0 51
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38265: LD_ADDR_VAR 0 52
38269: PUSH
38270: LD_INT 3
38272: NEG
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 3
38284: NEG
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38298: LD_ADDR_VAR 0 53
38302: PUSH
38303: LD_INT 1
38305: NEG
38306: PUSH
38307: LD_INT 3
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: LD_INT 3
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: LD_INT 2
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: LIST
38341: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38342: LD_ADDR_VAR 0 54
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 3
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 3
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38383: LD_ADDR_VAR 0 55
38387: PUSH
38388: LD_INT 3
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 3
38400: PUSH
38401: LD_INT 3
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: LD_INT 3
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38423: LD_ADDR_VAR 0 56
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: LD_INT 3
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 2
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38464: LD_ADDR_VAR 0 57
38468: PUSH
38469: LD_INT 2
38471: NEG
38472: PUSH
38473: LD_INT 1
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 3
38482: NEG
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 3
38493: NEG
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38508: LD_ADDR_VAR 0 58
38512: PUSH
38513: LD_INT 2
38515: NEG
38516: PUSH
38517: LD_INT 3
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 3
38527: NEG
38528: PUSH
38529: LD_INT 2
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 3
38539: NEG
38540: PUSH
38541: LD_INT 3
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38554: LD_ADDR_VAR 0 59
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: LD_INT 2
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: LD_INT 2
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38598: LD_ADDR_VAR 0 60
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 1
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: LIST
38638: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38639: LD_ADDR_VAR 0 61
38643: PUSH
38644: LD_INT 2
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: PUSH
38657: LD_INT 2
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: LD_INT 2
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38679: LD_ADDR_VAR 0 62
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: LIST
38719: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38720: LD_ADDR_VAR 0 63
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 2
38749: NEG
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: LIST
38763: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38764: LD_ADDR_VAR 0 64
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: LD_INT 2
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: ST_TO_ADDR
// end ; 2 :
38810: GO 42076
38812: LD_INT 2
38814: DOUBLE
38815: EQUAL
38816: IFTRUE 38820
38818: GO 42075
38820: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38821: LD_ADDR_VAR 0 29
38825: PUSH
38826: LD_INT 4
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 4
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 5
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 5
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 4
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 3
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 3
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 3
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 5
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: PUSH
38922: LD_INT 3
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 4
38941: PUSH
38942: LD_INT 3
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 4
38951: PUSH
38952: LD_INT 4
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 3
38961: PUSH
38962: LD_INT 4
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 2
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 2
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 4
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: LD_INT 4
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: LD_INT 4
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 3
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 4
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 5
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: LD_INT 5
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: LD_INT 4
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 3
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 5
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: LD_INT 3
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 3
39104: NEG
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 3
39149: NEG
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 4
39160: NEG
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 4
39171: NEG
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 4
39183: NEG
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 2
39195: NEG
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 4
39206: NEG
39207: PUSH
39208: LD_INT 4
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 4
39218: NEG
39219: PUSH
39220: LD_INT 5
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 3
39230: NEG
39231: PUSH
39232: LD_INT 4
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 3
39242: NEG
39243: PUSH
39244: LD_INT 3
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 4
39254: NEG
39255: PUSH
39256: LD_INT 3
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 5
39266: NEG
39267: PUSH
39268: LD_INT 4
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 5
39278: NEG
39279: PUSH
39280: LD_INT 5
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 3
39290: NEG
39291: PUSH
39292: LD_INT 5
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 5
39302: NEG
39303: PUSH
39304: LD_INT 3
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39359: LD_ADDR_VAR 0 30
39363: PUSH
39364: LD_INT 4
39366: PUSH
39367: LD_INT 4
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 4
39376: PUSH
39377: LD_INT 3
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 5
39386: PUSH
39387: LD_INT 4
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 5
39396: PUSH
39397: LD_INT 5
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 4
39406: PUSH
39407: LD_INT 5
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: PUSH
39417: LD_INT 4
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 3
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 5
39436: PUSH
39437: LD_INT 3
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 3
39446: PUSH
39447: LD_INT 5
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: LD_INT 3
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: PUSH
39477: LD_INT 3
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: LD_INT 4
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 4
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 3
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: LD_INT 4
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 4
39549: NEG
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 4
39560: NEG
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 3
39572: NEG
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 3
39583: NEG
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 4
39594: NEG
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 5
39605: NEG
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 5
39616: NEG
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 5
39628: NEG
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 3
39640: NEG
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 3
39651: NEG
39652: PUSH
39653: LD_INT 3
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 3
39663: NEG
39664: PUSH
39665: LD_INT 4
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 2
39675: NEG
39676: PUSH
39677: LD_INT 3
39679: NEG
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 2
39687: NEG
39688: PUSH
39689: LD_INT 2
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 3
39699: NEG
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 4
39711: NEG
39712: PUSH
39713: LD_INT 3
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 4
39723: NEG
39724: PUSH
39725: LD_INT 4
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: LD_INT 4
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 4
39747: NEG
39748: PUSH
39749: LD_INT 2
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 4
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 5
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: LD_INT 4
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: LD_INT 3
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: LD_INT 3
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: LD_INT 4
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: LD_INT 5
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 2
39838: PUSH
39839: LD_INT 3
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: LD_INT 5
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39906: LD_ADDR_VAR 0 31
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 4
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 4
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: LD_INT 5
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 5
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 4
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: LD_INT 3
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 5
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: LD_INT 3
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 3
40006: NEG
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 3
40017: NEG
40018: PUSH
40019: LD_INT 1
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: NEG
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 3
40051: NEG
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 4
40062: NEG
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 4
40073: NEG
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 4
40085: NEG
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 2
40097: NEG
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 4
40108: NEG
40109: PUSH
40110: LD_INT 4
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 4
40120: NEG
40121: PUSH
40122: LD_INT 5
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 3
40132: NEG
40133: PUSH
40134: LD_INT 4
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 3
40144: NEG
40145: PUSH
40146: LD_INT 3
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 4
40156: NEG
40157: PUSH
40158: LD_INT 3
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 5
40168: NEG
40169: PUSH
40170: LD_INT 4
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 5
40180: NEG
40181: PUSH
40182: LD_INT 5
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 3
40192: NEG
40193: PUSH
40194: LD_INT 5
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 5
40204: NEG
40205: PUSH
40206: LD_INT 3
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 3
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 4
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: LD_INT 3
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 2
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 2
40263: NEG
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: LD_INT 3
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: LD_INT 4
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 2
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: LD_INT 4
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 4
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 4
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 5
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 5
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 4
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 3
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 3
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 3
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 5
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40456: LD_ADDR_VAR 0 32
40460: PUSH
40461: LD_INT 4
40463: NEG
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 4
40474: NEG
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 3
40486: NEG
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 3
40497: NEG
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 4
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 5
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 5
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 5
40542: NEG
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 3
40554: NEG
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 3
40565: NEG
40566: PUSH
40567: LD_INT 3
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 3
40577: NEG
40578: PUSH
40579: LD_INT 4
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: LD_INT 3
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 2
40601: NEG
40602: PUSH
40603: LD_INT 2
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 3
40613: NEG
40614: PUSH
40615: LD_INT 2
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 4
40625: NEG
40626: PUSH
40627: LD_INT 3
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 4
40637: NEG
40638: PUSH
40639: LD_INT 4
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 2
40649: NEG
40650: PUSH
40651: LD_INT 4
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 4
40661: NEG
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: LD_INT 4
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: LD_INT 5
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: LD_INT 4
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 3
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 3
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 4
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: LD_INT 5
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: LD_INT 3
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 2
40763: NEG
40764: PUSH
40765: LD_INT 5
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 3
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 4
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 4
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 3
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 4
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 4
40868: PUSH
40869: LD_INT 4
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 4
40878: PUSH
40879: LD_INT 3
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 5
40888: PUSH
40889: LD_INT 4
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 5
40898: PUSH
40899: LD_INT 5
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 4
40908: PUSH
40909: LD_INT 5
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 3
40918: PUSH
40919: LD_INT 4
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 3
40928: PUSH
40929: LD_INT 3
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 5
40938: PUSH
40939: LD_INT 3
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 3
40948: PUSH
40949: LD_INT 5
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41003: LD_ADDR_VAR 0 33
41007: PUSH
41008: LD_INT 4
41010: NEG
41011: PUSH
41012: LD_INT 4
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 4
41022: NEG
41023: PUSH
41024: LD_INT 5
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 3
41034: NEG
41035: PUSH
41036: LD_INT 4
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 3
41046: NEG
41047: PUSH
41048: LD_INT 3
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 4
41058: NEG
41059: PUSH
41060: LD_INT 3
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 5
41070: NEG
41071: PUSH
41072: LD_INT 4
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 5
41082: NEG
41083: PUSH
41084: LD_INT 5
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 3
41094: NEG
41095: PUSH
41096: LD_INT 5
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 5
41106: NEG
41107: PUSH
41108: LD_INT 3
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 3
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 4
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: LD_INT 3
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 2
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 3
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 4
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: NEG
41209: PUSH
41210: LD_INT 4
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 4
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 4
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 5
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 5
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 4
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 3
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 3
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 3
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 5
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 3
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 4
41333: PUSH
41334: LD_INT 3
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 4
41343: PUSH
41344: LD_INT 4
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 3
41353: PUSH
41354: LD_INT 4
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: LD_INT 3
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 4
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: LD_INT 4
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: LD_INT 4
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: LD_INT 3
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: LD_INT 4
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: LD_INT 5
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 5
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 4
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 3
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 5
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: LD_INT 3
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41541: LD_ADDR_VAR 0 34
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: LD_INT 4
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 5
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 4
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: LD_INT 3
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 3
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 4
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: LD_INT 5
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: LD_INT 3
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: NEG
41639: PUSH
41640: LD_INT 5
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 3
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 3
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 4
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 4
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 3
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 4
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 4
41743: PUSH
41744: LD_INT 4
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 4
41753: PUSH
41754: LD_INT 3
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 5
41763: PUSH
41764: LD_INT 4
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 5
41773: PUSH
41774: LD_INT 5
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 4
41783: PUSH
41784: LD_INT 5
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 3
41793: PUSH
41794: LD_INT 4
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 3
41803: PUSH
41804: LD_INT 3
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 5
41813: PUSH
41814: LD_INT 3
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 3
41823: PUSH
41824: LD_INT 5
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 3
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 3
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 4
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 4
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 4
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 4
41926: NEG
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 4
41937: NEG
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 3
41949: NEG
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 3
41960: NEG
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 4
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 5
41982: NEG
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 5
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 5
42005: NEG
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 3
42017: NEG
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: ST_TO_ADDR
// end ; end ;
42073: GO 42076
42075: POP
// case btype of b_depot , b_warehouse :
42076: LD_VAR 0 1
42080: PUSH
42081: LD_INT 0
42083: DOUBLE
42084: EQUAL
42085: IFTRUE 42095
42087: LD_INT 1
42089: DOUBLE
42090: EQUAL
42091: IFTRUE 42095
42093: GO 42296
42095: POP
// case nation of nation_american :
42096: LD_VAR 0 5
42100: PUSH
42101: LD_INT 1
42103: DOUBLE
42104: EQUAL
42105: IFTRUE 42109
42107: GO 42165
42109: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42110: LD_ADDR_VAR 0 9
42114: PUSH
42115: LD_VAR 0 11
42119: PUSH
42120: LD_VAR 0 12
42124: PUSH
42125: LD_VAR 0 13
42129: PUSH
42130: LD_VAR 0 14
42134: PUSH
42135: LD_VAR 0 15
42139: PUSH
42140: LD_VAR 0 16
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: PUSH
42153: LD_VAR 0 4
42157: PUSH
42158: LD_INT 1
42160: PLUS
42161: ARRAY
42162: ST_TO_ADDR
42163: GO 42294
42165: LD_INT 2
42167: DOUBLE
42168: EQUAL
42169: IFTRUE 42173
42171: GO 42229
42173: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42174: LD_ADDR_VAR 0 9
42178: PUSH
42179: LD_VAR 0 17
42183: PUSH
42184: LD_VAR 0 18
42188: PUSH
42189: LD_VAR 0 19
42193: PUSH
42194: LD_VAR 0 20
42198: PUSH
42199: LD_VAR 0 21
42203: PUSH
42204: LD_VAR 0 22
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: PUSH
42217: LD_VAR 0 4
42221: PUSH
42222: LD_INT 1
42224: PLUS
42225: ARRAY
42226: ST_TO_ADDR
42227: GO 42294
42229: LD_INT 3
42231: DOUBLE
42232: EQUAL
42233: IFTRUE 42237
42235: GO 42293
42237: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42238: LD_ADDR_VAR 0 9
42242: PUSH
42243: LD_VAR 0 23
42247: PUSH
42248: LD_VAR 0 24
42252: PUSH
42253: LD_VAR 0 25
42257: PUSH
42258: LD_VAR 0 26
42262: PUSH
42263: LD_VAR 0 27
42267: PUSH
42268: LD_VAR 0 28
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: PUSH
42281: LD_VAR 0 4
42285: PUSH
42286: LD_INT 1
42288: PLUS
42289: ARRAY
42290: ST_TO_ADDR
42291: GO 42294
42293: POP
42294: GO 42849
42296: LD_INT 2
42298: DOUBLE
42299: EQUAL
42300: IFTRUE 42310
42302: LD_INT 3
42304: DOUBLE
42305: EQUAL
42306: IFTRUE 42310
42308: GO 42366
42310: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42311: LD_ADDR_VAR 0 9
42315: PUSH
42316: LD_VAR 0 29
42320: PUSH
42321: LD_VAR 0 30
42325: PUSH
42326: LD_VAR 0 31
42330: PUSH
42331: LD_VAR 0 32
42335: PUSH
42336: LD_VAR 0 33
42340: PUSH
42341: LD_VAR 0 34
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: PUSH
42354: LD_VAR 0 4
42358: PUSH
42359: LD_INT 1
42361: PLUS
42362: ARRAY
42363: ST_TO_ADDR
42364: GO 42849
42366: LD_INT 16
42368: DOUBLE
42369: EQUAL
42370: IFTRUE 42428
42372: LD_INT 17
42374: DOUBLE
42375: EQUAL
42376: IFTRUE 42428
42378: LD_INT 18
42380: DOUBLE
42381: EQUAL
42382: IFTRUE 42428
42384: LD_INT 19
42386: DOUBLE
42387: EQUAL
42388: IFTRUE 42428
42390: LD_INT 22
42392: DOUBLE
42393: EQUAL
42394: IFTRUE 42428
42396: LD_INT 20
42398: DOUBLE
42399: EQUAL
42400: IFTRUE 42428
42402: LD_INT 21
42404: DOUBLE
42405: EQUAL
42406: IFTRUE 42428
42408: LD_INT 23
42410: DOUBLE
42411: EQUAL
42412: IFTRUE 42428
42414: LD_INT 24
42416: DOUBLE
42417: EQUAL
42418: IFTRUE 42428
42420: LD_INT 25
42422: DOUBLE
42423: EQUAL
42424: IFTRUE 42428
42426: GO 42484
42428: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42429: LD_ADDR_VAR 0 9
42433: PUSH
42434: LD_VAR 0 35
42438: PUSH
42439: LD_VAR 0 36
42443: PUSH
42444: LD_VAR 0 37
42448: PUSH
42449: LD_VAR 0 38
42453: PUSH
42454: LD_VAR 0 39
42458: PUSH
42459: LD_VAR 0 40
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: PUSH
42472: LD_VAR 0 4
42476: PUSH
42477: LD_INT 1
42479: PLUS
42480: ARRAY
42481: ST_TO_ADDR
42482: GO 42849
42484: LD_INT 6
42486: DOUBLE
42487: EQUAL
42488: IFTRUE 42540
42490: LD_INT 7
42492: DOUBLE
42493: EQUAL
42494: IFTRUE 42540
42496: LD_INT 8
42498: DOUBLE
42499: EQUAL
42500: IFTRUE 42540
42502: LD_INT 13
42504: DOUBLE
42505: EQUAL
42506: IFTRUE 42540
42508: LD_INT 12
42510: DOUBLE
42511: EQUAL
42512: IFTRUE 42540
42514: LD_INT 15
42516: DOUBLE
42517: EQUAL
42518: IFTRUE 42540
42520: LD_INT 11
42522: DOUBLE
42523: EQUAL
42524: IFTRUE 42540
42526: LD_INT 14
42528: DOUBLE
42529: EQUAL
42530: IFTRUE 42540
42532: LD_INT 10
42534: DOUBLE
42535: EQUAL
42536: IFTRUE 42540
42538: GO 42596
42540: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42541: LD_ADDR_VAR 0 9
42545: PUSH
42546: LD_VAR 0 41
42550: PUSH
42551: LD_VAR 0 42
42555: PUSH
42556: LD_VAR 0 43
42560: PUSH
42561: LD_VAR 0 44
42565: PUSH
42566: LD_VAR 0 45
42570: PUSH
42571: LD_VAR 0 46
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: PUSH
42584: LD_VAR 0 4
42588: PUSH
42589: LD_INT 1
42591: PLUS
42592: ARRAY
42593: ST_TO_ADDR
42594: GO 42849
42596: LD_INT 36
42598: DOUBLE
42599: EQUAL
42600: IFTRUE 42604
42602: GO 42660
42604: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42605: LD_ADDR_VAR 0 9
42609: PUSH
42610: LD_VAR 0 47
42614: PUSH
42615: LD_VAR 0 48
42619: PUSH
42620: LD_VAR 0 49
42624: PUSH
42625: LD_VAR 0 50
42629: PUSH
42630: LD_VAR 0 51
42634: PUSH
42635: LD_VAR 0 52
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: PUSH
42648: LD_VAR 0 4
42652: PUSH
42653: LD_INT 1
42655: PLUS
42656: ARRAY
42657: ST_TO_ADDR
42658: GO 42849
42660: LD_INT 4
42662: DOUBLE
42663: EQUAL
42664: IFTRUE 42686
42666: LD_INT 5
42668: DOUBLE
42669: EQUAL
42670: IFTRUE 42686
42672: LD_INT 34
42674: DOUBLE
42675: EQUAL
42676: IFTRUE 42686
42678: LD_INT 37
42680: DOUBLE
42681: EQUAL
42682: IFTRUE 42686
42684: GO 42742
42686: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42687: LD_ADDR_VAR 0 9
42691: PUSH
42692: LD_VAR 0 53
42696: PUSH
42697: LD_VAR 0 54
42701: PUSH
42702: LD_VAR 0 55
42706: PUSH
42707: LD_VAR 0 56
42711: PUSH
42712: LD_VAR 0 57
42716: PUSH
42717: LD_VAR 0 58
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: PUSH
42730: LD_VAR 0 4
42734: PUSH
42735: LD_INT 1
42737: PLUS
42738: ARRAY
42739: ST_TO_ADDR
42740: GO 42849
42742: LD_INT 31
42744: DOUBLE
42745: EQUAL
42746: IFTRUE 42792
42748: LD_INT 32
42750: DOUBLE
42751: EQUAL
42752: IFTRUE 42792
42754: LD_INT 33
42756: DOUBLE
42757: EQUAL
42758: IFTRUE 42792
42760: LD_INT 27
42762: DOUBLE
42763: EQUAL
42764: IFTRUE 42792
42766: LD_INT 26
42768: DOUBLE
42769: EQUAL
42770: IFTRUE 42792
42772: LD_INT 28
42774: DOUBLE
42775: EQUAL
42776: IFTRUE 42792
42778: LD_INT 29
42780: DOUBLE
42781: EQUAL
42782: IFTRUE 42792
42784: LD_INT 30
42786: DOUBLE
42787: EQUAL
42788: IFTRUE 42792
42790: GO 42848
42792: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42793: LD_ADDR_VAR 0 9
42797: PUSH
42798: LD_VAR 0 59
42802: PUSH
42803: LD_VAR 0 60
42807: PUSH
42808: LD_VAR 0 61
42812: PUSH
42813: LD_VAR 0 62
42817: PUSH
42818: LD_VAR 0 63
42822: PUSH
42823: LD_VAR 0 64
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: PUSH
42836: LD_VAR 0 4
42840: PUSH
42841: LD_INT 1
42843: PLUS
42844: ARRAY
42845: ST_TO_ADDR
42846: GO 42849
42848: POP
// temp_list2 = [ ] ;
42849: LD_ADDR_VAR 0 10
42853: PUSH
42854: EMPTY
42855: ST_TO_ADDR
// for i in temp_list do
42856: LD_ADDR_VAR 0 8
42860: PUSH
42861: LD_VAR 0 9
42865: PUSH
42866: FOR_IN
42867: IFFALSE 42919
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42869: LD_ADDR_VAR 0 10
42873: PUSH
42874: LD_VAR 0 10
42878: PUSH
42879: LD_VAR 0 8
42883: PUSH
42884: LD_INT 1
42886: ARRAY
42887: PUSH
42888: LD_VAR 0 2
42892: PLUS
42893: PUSH
42894: LD_VAR 0 8
42898: PUSH
42899: LD_INT 2
42901: ARRAY
42902: PUSH
42903: LD_VAR 0 3
42907: PLUS
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: EMPTY
42914: LIST
42915: ADD
42916: ST_TO_ADDR
42917: GO 42866
42919: POP
42920: POP
// result = temp_list2 ;
42921: LD_ADDR_VAR 0 7
42925: PUSH
42926: LD_VAR 0 10
42930: ST_TO_ADDR
// end ;
42931: LD_VAR 0 7
42935: RET
// export function EnemyInRange ( unit , dist ) ; begin
42936: LD_INT 0
42938: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42939: LD_ADDR_VAR 0 3
42943: PUSH
42944: LD_VAR 0 1
42948: PPUSH
42949: CALL_OW 255
42953: PPUSH
42954: LD_VAR 0 1
42958: PPUSH
42959: CALL_OW 250
42963: PPUSH
42964: LD_VAR 0 1
42968: PPUSH
42969: CALL_OW 251
42973: PPUSH
42974: LD_VAR 0 2
42978: PPUSH
42979: CALL 16224 0 4
42983: PUSH
42984: LD_INT 4
42986: ARRAY
42987: ST_TO_ADDR
// end ;
42988: LD_VAR 0 3
42992: RET
// export function PlayerSeeMe ( unit ) ; begin
42993: LD_INT 0
42995: PPUSH
// result := See ( your_side , unit ) ;
42996: LD_ADDR_VAR 0 2
43000: PUSH
43001: LD_OWVAR 2
43005: PPUSH
43006: LD_VAR 0 1
43010: PPUSH
43011: CALL_OW 292
43015: ST_TO_ADDR
// end ;
43016: LD_VAR 0 2
43020: RET
// export function ReverseDir ( unit ) ; begin
43021: LD_INT 0
43023: PPUSH
// if not unit then
43024: LD_VAR 0 1
43028: NOT
43029: IFFALSE 43033
// exit ;
43031: GO 43056
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43033: LD_ADDR_VAR 0 2
43037: PUSH
43038: LD_VAR 0 1
43042: PPUSH
43043: CALL_OW 254
43047: PUSH
43048: LD_INT 3
43050: PLUS
43051: PUSH
43052: LD_INT 6
43054: MOD
43055: ST_TO_ADDR
// end ;
43056: LD_VAR 0 2
43060: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
43061: LD_INT 0
43063: PPUSH
43064: PPUSH
43065: PPUSH
43066: PPUSH
43067: PPUSH
// if not hexes then
43068: LD_VAR 0 2
43072: NOT
43073: IFFALSE 43077
// exit ;
43075: GO 43225
// dist := 9999 ;
43077: LD_ADDR_VAR 0 5
43081: PUSH
43082: LD_INT 9999
43084: ST_TO_ADDR
// for i = 1 to hexes do
43085: LD_ADDR_VAR 0 4
43089: PUSH
43090: DOUBLE
43091: LD_INT 1
43093: DEC
43094: ST_TO_ADDR
43095: LD_VAR 0 2
43099: PUSH
43100: FOR_TO
43101: IFFALSE 43213
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
43103: LD_VAR 0 1
43107: PPUSH
43108: LD_VAR 0 2
43112: PUSH
43113: LD_VAR 0 4
43117: ARRAY
43118: PUSH
43119: LD_INT 1
43121: ARRAY
43122: PPUSH
43123: LD_VAR 0 2
43127: PUSH
43128: LD_VAR 0 4
43132: ARRAY
43133: PUSH
43134: LD_INT 2
43136: ARRAY
43137: PPUSH
43138: CALL_OW 297
43142: PUSH
43143: LD_VAR 0 5
43147: LESS
43148: IFFALSE 43211
// begin hex := hexes [ i ] ;
43150: LD_ADDR_VAR 0 7
43154: PUSH
43155: LD_VAR 0 2
43159: PUSH
43160: LD_VAR 0 4
43164: ARRAY
43165: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43166: LD_ADDR_VAR 0 5
43170: PUSH
43171: LD_VAR 0 1
43175: PPUSH
43176: LD_VAR 0 2
43180: PUSH
43181: LD_VAR 0 4
43185: ARRAY
43186: PUSH
43187: LD_INT 1
43189: ARRAY
43190: PPUSH
43191: LD_VAR 0 2
43195: PUSH
43196: LD_VAR 0 4
43200: ARRAY
43201: PUSH
43202: LD_INT 2
43204: ARRAY
43205: PPUSH
43206: CALL_OW 297
43210: ST_TO_ADDR
// end ; end ;
43211: GO 43100
43213: POP
43214: POP
// result := hex ;
43215: LD_ADDR_VAR 0 3
43219: PUSH
43220: LD_VAR 0 7
43224: ST_TO_ADDR
// end ;
43225: LD_VAR 0 3
43229: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43230: LD_INT 0
43232: PPUSH
43233: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43234: LD_VAR 0 1
43238: NOT
43239: PUSH
43240: LD_VAR 0 1
43244: PUSH
43245: LD_INT 21
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 23
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PPUSH
43269: CALL_OW 69
43273: IN
43274: NOT
43275: OR
43276: IFFALSE 43280
// exit ;
43278: GO 43327
// for i = 1 to 3 do
43280: LD_ADDR_VAR 0 3
43284: PUSH
43285: DOUBLE
43286: LD_INT 1
43288: DEC
43289: ST_TO_ADDR
43290: LD_INT 3
43292: PUSH
43293: FOR_TO
43294: IFFALSE 43325
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43296: LD_VAR 0 1
43300: PPUSH
43301: CALL_OW 250
43305: PPUSH
43306: LD_VAR 0 1
43310: PPUSH
43311: CALL_OW 251
43315: PPUSH
43316: LD_INT 1
43318: PPUSH
43319: CALL_OW 453
43323: GO 43293
43325: POP
43326: POP
// end ;
43327: LD_VAR 0 2
43331: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43332: LD_INT 0
43334: PPUSH
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
43340: LD_VAR 0 1
43344: NOT
43345: PUSH
43346: LD_VAR 0 2
43350: NOT
43351: OR
43352: PUSH
43353: LD_VAR 0 1
43357: PPUSH
43358: CALL_OW 314
43362: OR
43363: IFFALSE 43367
// exit ;
43365: GO 43808
// x := GetX ( enemy_unit ) ;
43367: LD_ADDR_VAR 0 7
43371: PUSH
43372: LD_VAR 0 2
43376: PPUSH
43377: CALL_OW 250
43381: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43382: LD_ADDR_VAR 0 8
43386: PUSH
43387: LD_VAR 0 2
43391: PPUSH
43392: CALL_OW 251
43396: ST_TO_ADDR
// if not x or not y then
43397: LD_VAR 0 7
43401: NOT
43402: PUSH
43403: LD_VAR 0 8
43407: NOT
43408: OR
43409: IFFALSE 43413
// exit ;
43411: GO 43808
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43413: LD_ADDR_VAR 0 6
43417: PUSH
43418: LD_VAR 0 7
43422: PPUSH
43423: LD_INT 0
43425: PPUSH
43426: LD_INT 4
43428: PPUSH
43429: CALL_OW 272
43433: PUSH
43434: LD_VAR 0 8
43438: PPUSH
43439: LD_INT 0
43441: PPUSH
43442: LD_INT 4
43444: PPUSH
43445: CALL_OW 273
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_VAR 0 7
43458: PPUSH
43459: LD_INT 1
43461: PPUSH
43462: LD_INT 4
43464: PPUSH
43465: CALL_OW 272
43469: PUSH
43470: LD_VAR 0 8
43474: PPUSH
43475: LD_INT 1
43477: PPUSH
43478: LD_INT 4
43480: PPUSH
43481: CALL_OW 273
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_VAR 0 7
43494: PPUSH
43495: LD_INT 2
43497: PPUSH
43498: LD_INT 4
43500: PPUSH
43501: CALL_OW 272
43505: PUSH
43506: LD_VAR 0 8
43510: PPUSH
43511: LD_INT 2
43513: PPUSH
43514: LD_INT 4
43516: PPUSH
43517: CALL_OW 273
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_VAR 0 7
43530: PPUSH
43531: LD_INT 3
43533: PPUSH
43534: LD_INT 4
43536: PPUSH
43537: CALL_OW 272
43541: PUSH
43542: LD_VAR 0 8
43546: PPUSH
43547: LD_INT 3
43549: PPUSH
43550: LD_INT 4
43552: PPUSH
43553: CALL_OW 273
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_VAR 0 7
43566: PPUSH
43567: LD_INT 4
43569: PPUSH
43570: LD_INT 4
43572: PPUSH
43573: CALL_OW 272
43577: PUSH
43578: LD_VAR 0 8
43582: PPUSH
43583: LD_INT 4
43585: PPUSH
43586: LD_INT 4
43588: PPUSH
43589: CALL_OW 273
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_VAR 0 7
43602: PPUSH
43603: LD_INT 5
43605: PPUSH
43606: LD_INT 4
43608: PPUSH
43609: CALL_OW 272
43613: PUSH
43614: LD_VAR 0 8
43618: PPUSH
43619: LD_INT 5
43621: PPUSH
43622: LD_INT 4
43624: PPUSH
43625: CALL_OW 273
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: ST_TO_ADDR
// for i = tmp downto 1 do
43642: LD_ADDR_VAR 0 4
43646: PUSH
43647: DOUBLE
43648: LD_VAR 0 6
43652: INC
43653: ST_TO_ADDR
43654: LD_INT 1
43656: PUSH
43657: FOR_DOWNTO
43658: IFFALSE 43759
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43660: LD_VAR 0 6
43664: PUSH
43665: LD_VAR 0 4
43669: ARRAY
43670: PUSH
43671: LD_INT 1
43673: ARRAY
43674: PPUSH
43675: LD_VAR 0 6
43679: PUSH
43680: LD_VAR 0 4
43684: ARRAY
43685: PUSH
43686: LD_INT 2
43688: ARRAY
43689: PPUSH
43690: CALL_OW 488
43694: NOT
43695: PUSH
43696: LD_VAR 0 6
43700: PUSH
43701: LD_VAR 0 4
43705: ARRAY
43706: PUSH
43707: LD_INT 1
43709: ARRAY
43710: PPUSH
43711: LD_VAR 0 6
43715: PUSH
43716: LD_VAR 0 4
43720: ARRAY
43721: PUSH
43722: LD_INT 2
43724: ARRAY
43725: PPUSH
43726: CALL_OW 428
43730: PUSH
43731: LD_INT 0
43733: NONEQUAL
43734: OR
43735: IFFALSE 43757
// tmp := Delete ( tmp , i ) ;
43737: LD_ADDR_VAR 0 6
43741: PUSH
43742: LD_VAR 0 6
43746: PPUSH
43747: LD_VAR 0 4
43751: PPUSH
43752: CALL_OW 3
43756: ST_TO_ADDR
43757: GO 43657
43759: POP
43760: POP
// j := GetClosestHex ( unit , tmp ) ;
43761: LD_ADDR_VAR 0 5
43765: PUSH
43766: LD_VAR 0 1
43770: PPUSH
43771: LD_VAR 0 6
43775: PPUSH
43776: CALL 43061 0 2
43780: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43781: LD_VAR 0 1
43785: PPUSH
43786: LD_VAR 0 5
43790: PUSH
43791: LD_INT 1
43793: ARRAY
43794: PPUSH
43795: LD_VAR 0 5
43799: PUSH
43800: LD_INT 2
43802: ARRAY
43803: PPUSH
43804: CALL_OW 111
// end ;
43808: LD_VAR 0 3
43812: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43813: LD_INT 0
43815: PPUSH
43816: PPUSH
43817: PPUSH
// uc_side = 0 ;
43818: LD_ADDR_OWVAR 20
43822: PUSH
43823: LD_INT 0
43825: ST_TO_ADDR
// uc_nation = 0 ;
43826: LD_ADDR_OWVAR 21
43830: PUSH
43831: LD_INT 0
43833: ST_TO_ADDR
// InitHc_All ( ) ;
43834: CALL_OW 584
// InitVc ;
43838: CALL_OW 20
// if mastodonts then
43842: LD_VAR 0 6
43846: IFFALSE 43913
// for i = 1 to mastodonts do
43848: LD_ADDR_VAR 0 11
43852: PUSH
43853: DOUBLE
43854: LD_INT 1
43856: DEC
43857: ST_TO_ADDR
43858: LD_VAR 0 6
43862: PUSH
43863: FOR_TO
43864: IFFALSE 43911
// begin vc_chassis := 31 ;
43866: LD_ADDR_OWVAR 37
43870: PUSH
43871: LD_INT 31
43873: ST_TO_ADDR
// vc_control := control_rider ;
43874: LD_ADDR_OWVAR 38
43878: PUSH
43879: LD_INT 4
43881: ST_TO_ADDR
// animal := CreateVehicle ;
43882: LD_ADDR_VAR 0 12
43886: PUSH
43887: CALL_OW 45
43891: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43892: LD_VAR 0 12
43896: PPUSH
43897: LD_VAR 0 8
43901: PPUSH
43902: LD_INT 0
43904: PPUSH
43905: CALL 46048 0 3
// end ;
43909: GO 43863
43911: POP
43912: POP
// if horses then
43913: LD_VAR 0 5
43917: IFFALSE 43984
// for i = 1 to horses do
43919: LD_ADDR_VAR 0 11
43923: PUSH
43924: DOUBLE
43925: LD_INT 1
43927: DEC
43928: ST_TO_ADDR
43929: LD_VAR 0 5
43933: PUSH
43934: FOR_TO
43935: IFFALSE 43982
// begin hc_class := 21 ;
43937: LD_ADDR_OWVAR 28
43941: PUSH
43942: LD_INT 21
43944: ST_TO_ADDR
// hc_gallery :=  ;
43945: LD_ADDR_OWVAR 33
43949: PUSH
43950: LD_STRING 
43952: ST_TO_ADDR
// animal := CreateHuman ;
43953: LD_ADDR_VAR 0 12
43957: PUSH
43958: CALL_OW 44
43962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43963: LD_VAR 0 12
43967: PPUSH
43968: LD_VAR 0 8
43972: PPUSH
43973: LD_INT 0
43975: PPUSH
43976: CALL 46048 0 3
// end ;
43980: GO 43934
43982: POP
43983: POP
// if birds then
43984: LD_VAR 0 1
43988: IFFALSE 44055
// for i = 1 to birds do
43990: LD_ADDR_VAR 0 11
43994: PUSH
43995: DOUBLE
43996: LD_INT 1
43998: DEC
43999: ST_TO_ADDR
44000: LD_VAR 0 1
44004: PUSH
44005: FOR_TO
44006: IFFALSE 44053
// begin hc_class = 18 ;
44008: LD_ADDR_OWVAR 28
44012: PUSH
44013: LD_INT 18
44015: ST_TO_ADDR
// hc_gallery =  ;
44016: LD_ADDR_OWVAR 33
44020: PUSH
44021: LD_STRING 
44023: ST_TO_ADDR
// animal := CreateHuman ;
44024: LD_ADDR_VAR 0 12
44028: PUSH
44029: CALL_OW 44
44033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44034: LD_VAR 0 12
44038: PPUSH
44039: LD_VAR 0 8
44043: PPUSH
44044: LD_INT 0
44046: PPUSH
44047: CALL 46048 0 3
// end ;
44051: GO 44005
44053: POP
44054: POP
// if tigers then
44055: LD_VAR 0 2
44059: IFFALSE 44143
// for i = 1 to tigers do
44061: LD_ADDR_VAR 0 11
44065: PUSH
44066: DOUBLE
44067: LD_INT 1
44069: DEC
44070: ST_TO_ADDR
44071: LD_VAR 0 2
44075: PUSH
44076: FOR_TO
44077: IFFALSE 44141
// begin hc_class = class_tiger ;
44079: LD_ADDR_OWVAR 28
44083: PUSH
44084: LD_INT 14
44086: ST_TO_ADDR
// hc_gallery =  ;
44087: LD_ADDR_OWVAR 33
44091: PUSH
44092: LD_STRING 
44094: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44095: LD_ADDR_OWVAR 35
44099: PUSH
44100: LD_INT 7
44102: NEG
44103: PPUSH
44104: LD_INT 7
44106: PPUSH
44107: CALL_OW 12
44111: ST_TO_ADDR
// animal := CreateHuman ;
44112: LD_ADDR_VAR 0 12
44116: PUSH
44117: CALL_OW 44
44121: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44122: LD_VAR 0 12
44126: PPUSH
44127: LD_VAR 0 8
44131: PPUSH
44132: LD_INT 0
44134: PPUSH
44135: CALL 46048 0 3
// end ;
44139: GO 44076
44141: POP
44142: POP
// if apemans then
44143: LD_VAR 0 3
44147: IFFALSE 44270
// for i = 1 to apemans do
44149: LD_ADDR_VAR 0 11
44153: PUSH
44154: DOUBLE
44155: LD_INT 1
44157: DEC
44158: ST_TO_ADDR
44159: LD_VAR 0 3
44163: PUSH
44164: FOR_TO
44165: IFFALSE 44268
// begin hc_class = class_apeman ;
44167: LD_ADDR_OWVAR 28
44171: PUSH
44172: LD_INT 12
44174: ST_TO_ADDR
// hc_gallery =  ;
44175: LD_ADDR_OWVAR 33
44179: PUSH
44180: LD_STRING 
44182: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44183: LD_ADDR_OWVAR 35
44187: PUSH
44188: LD_INT 2
44190: NEG
44191: PPUSH
44192: LD_INT 2
44194: PPUSH
44195: CALL_OW 12
44199: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44200: LD_ADDR_OWVAR 31
44204: PUSH
44205: LD_INT 1
44207: PPUSH
44208: LD_INT 3
44210: PPUSH
44211: CALL_OW 12
44215: PUSH
44216: LD_INT 1
44218: PPUSH
44219: LD_INT 3
44221: PPUSH
44222: CALL_OW 12
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: ST_TO_ADDR
// animal := CreateHuman ;
44239: LD_ADDR_VAR 0 12
44243: PUSH
44244: CALL_OW 44
44248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44249: LD_VAR 0 12
44253: PPUSH
44254: LD_VAR 0 8
44258: PPUSH
44259: LD_INT 0
44261: PPUSH
44262: CALL 46048 0 3
// end ;
44266: GO 44164
44268: POP
44269: POP
// if enchidnas then
44270: LD_VAR 0 4
44274: IFFALSE 44341
// for i = 1 to enchidnas do
44276: LD_ADDR_VAR 0 11
44280: PUSH
44281: DOUBLE
44282: LD_INT 1
44284: DEC
44285: ST_TO_ADDR
44286: LD_VAR 0 4
44290: PUSH
44291: FOR_TO
44292: IFFALSE 44339
// begin hc_class = 13 ;
44294: LD_ADDR_OWVAR 28
44298: PUSH
44299: LD_INT 13
44301: ST_TO_ADDR
// hc_gallery =  ;
44302: LD_ADDR_OWVAR 33
44306: PUSH
44307: LD_STRING 
44309: ST_TO_ADDR
// animal := CreateHuman ;
44310: LD_ADDR_VAR 0 12
44314: PUSH
44315: CALL_OW 44
44319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44320: LD_VAR 0 12
44324: PPUSH
44325: LD_VAR 0 8
44329: PPUSH
44330: LD_INT 0
44332: PPUSH
44333: CALL 46048 0 3
// end ;
44337: GO 44291
44339: POP
44340: POP
// if fishes then
44341: LD_VAR 0 7
44345: IFFALSE 44412
// for i = 1 to fishes do
44347: LD_ADDR_VAR 0 11
44351: PUSH
44352: DOUBLE
44353: LD_INT 1
44355: DEC
44356: ST_TO_ADDR
44357: LD_VAR 0 7
44361: PUSH
44362: FOR_TO
44363: IFFALSE 44410
// begin hc_class = 20 ;
44365: LD_ADDR_OWVAR 28
44369: PUSH
44370: LD_INT 20
44372: ST_TO_ADDR
// hc_gallery =  ;
44373: LD_ADDR_OWVAR 33
44377: PUSH
44378: LD_STRING 
44380: ST_TO_ADDR
// animal := CreateHuman ;
44381: LD_ADDR_VAR 0 12
44385: PUSH
44386: CALL_OW 44
44390: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44391: LD_VAR 0 12
44395: PPUSH
44396: LD_VAR 0 9
44400: PPUSH
44401: LD_INT 0
44403: PPUSH
44404: CALL 46048 0 3
// end ;
44408: GO 44362
44410: POP
44411: POP
// end ;
44412: LD_VAR 0 10
44416: RET
// export function WantHeal ( sci , unit ) ; begin
44417: LD_INT 0
44419: PPUSH
// if GetTaskList ( sci ) > 0 then
44420: LD_VAR 0 1
44424: PPUSH
44425: CALL_OW 437
44429: PUSH
44430: LD_INT 0
44432: GREATER
44433: IFFALSE 44503
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44435: LD_VAR 0 1
44439: PPUSH
44440: CALL_OW 437
44444: PUSH
44445: LD_INT 1
44447: ARRAY
44448: PUSH
44449: LD_INT 1
44451: ARRAY
44452: PUSH
44453: LD_STRING l
44455: EQUAL
44456: PUSH
44457: LD_VAR 0 1
44461: PPUSH
44462: CALL_OW 437
44466: PUSH
44467: LD_INT 1
44469: ARRAY
44470: PUSH
44471: LD_INT 4
44473: ARRAY
44474: PUSH
44475: LD_VAR 0 2
44479: EQUAL
44480: AND
44481: IFFALSE 44493
// result := true else
44483: LD_ADDR_VAR 0 3
44487: PUSH
44488: LD_INT 1
44490: ST_TO_ADDR
44491: GO 44501
// result := false ;
44493: LD_ADDR_VAR 0 3
44497: PUSH
44498: LD_INT 0
44500: ST_TO_ADDR
// end else
44501: GO 44511
// result := false ;
44503: LD_ADDR_VAR 0 3
44507: PUSH
44508: LD_INT 0
44510: ST_TO_ADDR
// end ;
44511: LD_VAR 0 3
44515: RET
// export function HealTarget ( sci ) ; begin
44516: LD_INT 0
44518: PPUSH
// if not sci then
44519: LD_VAR 0 1
44523: NOT
44524: IFFALSE 44528
// exit ;
44526: GO 44593
// result := 0 ;
44528: LD_ADDR_VAR 0 2
44532: PUSH
44533: LD_INT 0
44535: ST_TO_ADDR
// if GetTaskList ( sci ) then
44536: LD_VAR 0 1
44540: PPUSH
44541: CALL_OW 437
44545: IFFALSE 44593
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44547: LD_VAR 0 1
44551: PPUSH
44552: CALL_OW 437
44556: PUSH
44557: LD_INT 1
44559: ARRAY
44560: PUSH
44561: LD_INT 1
44563: ARRAY
44564: PUSH
44565: LD_STRING l
44567: EQUAL
44568: IFFALSE 44593
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44570: LD_ADDR_VAR 0 2
44574: PUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: CALL_OW 437
44584: PUSH
44585: LD_INT 1
44587: ARRAY
44588: PUSH
44589: LD_INT 4
44591: ARRAY
44592: ST_TO_ADDR
// end ;
44593: LD_VAR 0 2
44597: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44598: LD_INT 0
44600: PPUSH
44601: PPUSH
44602: PPUSH
44603: PPUSH
// if not base_units then
44604: LD_VAR 0 1
44608: NOT
44609: IFFALSE 44613
// exit ;
44611: GO 44700
// result := false ;
44613: LD_ADDR_VAR 0 2
44617: PUSH
44618: LD_INT 0
44620: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44621: LD_ADDR_VAR 0 5
44625: PUSH
44626: LD_VAR 0 1
44630: PPUSH
44631: LD_INT 21
44633: PUSH
44634: LD_INT 3
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PPUSH
44641: CALL_OW 72
44645: ST_TO_ADDR
// if not tmp then
44646: LD_VAR 0 5
44650: NOT
44651: IFFALSE 44655
// exit ;
44653: GO 44700
// for i in tmp do
44655: LD_ADDR_VAR 0 3
44659: PUSH
44660: LD_VAR 0 5
44664: PUSH
44665: FOR_IN
44666: IFFALSE 44698
// begin result := EnemyInRange ( i , 22 ) ;
44668: LD_ADDR_VAR 0 2
44672: PUSH
44673: LD_VAR 0 3
44677: PPUSH
44678: LD_INT 22
44680: PPUSH
44681: CALL 42936 0 2
44685: ST_TO_ADDR
// if result then
44686: LD_VAR 0 2
44690: IFFALSE 44696
// exit ;
44692: POP
44693: POP
44694: GO 44700
// end ;
44696: GO 44665
44698: POP
44699: POP
// end ;
44700: LD_VAR 0 2
44704: RET
// export function FilterByTag ( units , tag ) ; begin
44705: LD_INT 0
44707: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44708: LD_ADDR_VAR 0 3
44712: PUSH
44713: LD_VAR 0 1
44717: PPUSH
44718: LD_INT 120
44720: PUSH
44721: LD_VAR 0 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PPUSH
44730: CALL_OW 72
44734: ST_TO_ADDR
// end ;
44735: LD_VAR 0 3
44739: RET
// export function IsDriver ( un ) ; begin
44740: LD_INT 0
44742: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44743: LD_ADDR_VAR 0 2
44747: PUSH
44748: LD_VAR 0 1
44752: PUSH
44753: LD_INT 55
44755: PUSH
44756: EMPTY
44757: LIST
44758: PPUSH
44759: CALL_OW 69
44763: IN
44764: ST_TO_ADDR
// end ;
44765: LD_VAR 0 2
44769: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44770: LD_INT 0
44772: PPUSH
44773: PPUSH
// list := [ ] ;
44774: LD_ADDR_VAR 0 5
44778: PUSH
44779: EMPTY
44780: ST_TO_ADDR
// case d of 0 :
44781: LD_VAR 0 3
44785: PUSH
44786: LD_INT 0
44788: DOUBLE
44789: EQUAL
44790: IFTRUE 44794
44792: GO 44927
44794: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44795: LD_ADDR_VAR 0 5
44799: PUSH
44800: LD_VAR 0 1
44804: PUSH
44805: LD_INT 4
44807: MINUS
44808: PUSH
44809: LD_VAR 0 2
44813: PUSH
44814: LD_INT 4
44816: MINUS
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: PUSH
44826: LD_VAR 0 1
44830: PUSH
44831: LD_INT 3
44833: MINUS
44834: PUSH
44835: LD_VAR 0 2
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: PUSH
44848: LD_VAR 0 1
44852: PUSH
44853: LD_INT 4
44855: PLUS
44856: PUSH
44857: LD_VAR 0 2
44861: PUSH
44862: LD_INT 4
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: LIST
44869: PUSH
44870: LD_VAR 0 1
44874: PUSH
44875: LD_INT 3
44877: PLUS
44878: PUSH
44879: LD_VAR 0 2
44883: PUSH
44884: LD_INT 3
44886: PLUS
44887: PUSH
44888: LD_INT 5
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: PUSH
44896: LD_VAR 0 1
44900: PUSH
44901: LD_VAR 0 2
44905: PUSH
44906: LD_INT 4
44908: PLUS
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: ST_TO_ADDR
// end ; 1 :
44925: GO 45625
44927: LD_INT 1
44929: DOUBLE
44930: EQUAL
44931: IFTRUE 44935
44933: GO 45068
44935: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44936: LD_ADDR_VAR 0 5
44940: PUSH
44941: LD_VAR 0 1
44945: PUSH
44946: LD_VAR 0 2
44950: PUSH
44951: LD_INT 4
44953: MINUS
44954: PUSH
44955: LD_INT 3
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: LIST
44962: PUSH
44963: LD_VAR 0 1
44967: PUSH
44968: LD_INT 3
44970: MINUS
44971: PUSH
44972: LD_VAR 0 2
44976: PUSH
44977: LD_INT 3
44979: MINUS
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: LIST
44988: PUSH
44989: LD_VAR 0 1
44993: PUSH
44994: LD_INT 4
44996: MINUS
44997: PUSH
44998: LD_VAR 0 2
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: PUSH
45011: LD_VAR 0 1
45015: PUSH
45016: LD_VAR 0 2
45020: PUSH
45021: LD_INT 3
45023: PLUS
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: PUSH
45033: LD_VAR 0 1
45037: PUSH
45038: LD_INT 4
45040: PLUS
45041: PUSH
45042: LD_VAR 0 2
45046: PUSH
45047: LD_INT 4
45049: PLUS
45050: PUSH
45051: LD_INT 5
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: ST_TO_ADDR
// end ; 2 :
45066: GO 45625
45068: LD_INT 2
45070: DOUBLE
45071: EQUAL
45072: IFTRUE 45076
45074: GO 45205
45076: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45077: LD_ADDR_VAR 0 5
45081: PUSH
45082: LD_VAR 0 1
45086: PUSH
45087: LD_VAR 0 2
45091: PUSH
45092: LD_INT 3
45094: MINUS
45095: PUSH
45096: LD_INT 3
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: LIST
45103: PUSH
45104: LD_VAR 0 1
45108: PUSH
45109: LD_INT 4
45111: PLUS
45112: PUSH
45113: LD_VAR 0 2
45117: PUSH
45118: LD_INT 4
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: PUSH
45126: LD_VAR 0 1
45130: PUSH
45131: LD_VAR 0 2
45135: PUSH
45136: LD_INT 4
45138: PLUS
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: LIST
45147: PUSH
45148: LD_VAR 0 1
45152: PUSH
45153: LD_INT 3
45155: MINUS
45156: PUSH
45157: LD_VAR 0 2
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: PUSH
45170: LD_VAR 0 1
45174: PUSH
45175: LD_INT 4
45177: MINUS
45178: PUSH
45179: LD_VAR 0 2
45183: PUSH
45184: LD_INT 4
45186: MINUS
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: LIST
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: ST_TO_ADDR
// end ; 3 :
45203: GO 45625
45205: LD_INT 3
45207: DOUBLE
45208: EQUAL
45209: IFTRUE 45213
45211: GO 45346
45213: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45214: LD_ADDR_VAR 0 5
45218: PUSH
45219: LD_VAR 0 1
45223: PUSH
45224: LD_INT 3
45226: PLUS
45227: PUSH
45228: LD_VAR 0 2
45232: PUSH
45233: LD_INT 4
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: PUSH
45241: LD_VAR 0 1
45245: PUSH
45246: LD_INT 4
45248: PLUS
45249: PUSH
45250: LD_VAR 0 2
45254: PUSH
45255: LD_INT 4
45257: PLUS
45258: PUSH
45259: LD_INT 5
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: PUSH
45267: LD_VAR 0 1
45271: PUSH
45272: LD_INT 4
45274: MINUS
45275: PUSH
45276: LD_VAR 0 2
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: PUSH
45289: LD_VAR 0 1
45293: PUSH
45294: LD_VAR 0 2
45298: PUSH
45299: LD_INT 4
45301: MINUS
45302: PUSH
45303: LD_INT 3
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: LIST
45310: PUSH
45311: LD_VAR 0 1
45315: PUSH
45316: LD_INT 3
45318: MINUS
45319: PUSH
45320: LD_VAR 0 2
45324: PUSH
45325: LD_INT 3
45327: MINUS
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: LIST
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: ST_TO_ADDR
// end ; 4 :
45344: GO 45625
45346: LD_INT 4
45348: DOUBLE
45349: EQUAL
45350: IFTRUE 45354
45352: GO 45487
45354: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45355: LD_ADDR_VAR 0 5
45359: PUSH
45360: LD_VAR 0 1
45364: PUSH
45365: LD_VAR 0 2
45369: PUSH
45370: LD_INT 4
45372: PLUS
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: LIST
45381: PUSH
45382: LD_VAR 0 1
45386: PUSH
45387: LD_INT 3
45389: PLUS
45390: PUSH
45391: LD_VAR 0 2
45395: PUSH
45396: LD_INT 3
45398: PLUS
45399: PUSH
45400: LD_INT 5
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: LIST
45407: PUSH
45408: LD_VAR 0 1
45412: PUSH
45413: LD_INT 4
45415: PLUS
45416: PUSH
45417: LD_VAR 0 2
45421: PUSH
45422: LD_INT 4
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: PUSH
45430: LD_VAR 0 1
45434: PUSH
45435: LD_VAR 0 2
45439: PUSH
45440: LD_INT 3
45442: MINUS
45443: PUSH
45444: LD_INT 3
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: LIST
45451: PUSH
45452: LD_VAR 0 1
45456: PUSH
45457: LD_INT 4
45459: MINUS
45460: PUSH
45461: LD_VAR 0 2
45465: PUSH
45466: LD_INT 4
45468: MINUS
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: ST_TO_ADDR
// end ; 5 :
45485: GO 45625
45487: LD_INT 5
45489: DOUBLE
45490: EQUAL
45491: IFTRUE 45495
45493: GO 45624
45495: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45496: LD_ADDR_VAR 0 5
45500: PUSH
45501: LD_VAR 0 1
45505: PUSH
45506: LD_INT 4
45508: MINUS
45509: PUSH
45510: LD_VAR 0 2
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: PUSH
45523: LD_VAR 0 1
45527: PUSH
45528: LD_VAR 0 2
45532: PUSH
45533: LD_INT 4
45535: MINUS
45536: PUSH
45537: LD_INT 3
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: LIST
45544: PUSH
45545: LD_VAR 0 1
45549: PUSH
45550: LD_INT 4
45552: PLUS
45553: PUSH
45554: LD_VAR 0 2
45558: PUSH
45559: LD_INT 4
45561: PLUS
45562: PUSH
45563: LD_INT 5
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: LIST
45570: PUSH
45571: LD_VAR 0 1
45575: PUSH
45576: LD_INT 3
45578: PLUS
45579: PUSH
45580: LD_VAR 0 2
45584: PUSH
45585: LD_INT 4
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: PUSH
45593: LD_VAR 0 1
45597: PUSH
45598: LD_VAR 0 2
45602: PUSH
45603: LD_INT 3
45605: PLUS
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: ST_TO_ADDR
// end ; end ;
45622: GO 45625
45624: POP
// result := list ;
45625: LD_ADDR_VAR 0 4
45629: PUSH
45630: LD_VAR 0 5
45634: ST_TO_ADDR
// end ;
45635: LD_VAR 0 4
45639: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45640: LD_INT 0
45642: PPUSH
45643: PPUSH
45644: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45645: LD_VAR 0 1
45649: NOT
45650: PUSH
45651: LD_VAR 0 2
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: LD_INT 3
45664: PUSH
45665: LD_INT 4
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: IN
45674: NOT
45675: OR
45676: IFFALSE 45680
// exit ;
45678: GO 45772
// tmp := [ ] ;
45680: LD_ADDR_VAR 0 5
45684: PUSH
45685: EMPTY
45686: ST_TO_ADDR
// for i in units do
45687: LD_ADDR_VAR 0 4
45691: PUSH
45692: LD_VAR 0 1
45696: PUSH
45697: FOR_IN
45698: IFFALSE 45741
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
45700: LD_ADDR_VAR 0 5
45704: PUSH
45705: LD_VAR 0 5
45709: PPUSH
45710: LD_VAR 0 5
45714: PUSH
45715: LD_INT 1
45717: PLUS
45718: PPUSH
45719: LD_VAR 0 4
45723: PPUSH
45724: LD_VAR 0 2
45728: PPUSH
45729: CALL_OW 259
45733: PPUSH
45734: CALL_OW 2
45738: ST_TO_ADDR
45739: GO 45697
45741: POP
45742: POP
// if not tmp then
45743: LD_VAR 0 5
45747: NOT
45748: IFFALSE 45752
// exit ;
45750: GO 45772
// result := SortListByListDesc ( units , tmp ) ;
45752: LD_ADDR_VAR 0 3
45756: PUSH
45757: LD_VAR 0 1
45761: PPUSH
45762: LD_VAR 0 5
45766: PPUSH
45767: CALL_OW 77
45771: ST_TO_ADDR
// end ;
45772: LD_VAR 0 3
45776: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45777: LD_INT 0
45779: PPUSH
45780: PPUSH
45781: PPUSH
// result := false ;
45782: LD_ADDR_VAR 0 3
45786: PUSH
45787: LD_INT 0
45789: ST_TO_ADDR
// x := GetX ( building ) ;
45790: LD_ADDR_VAR 0 4
45794: PUSH
45795: LD_VAR 0 2
45799: PPUSH
45800: CALL_OW 250
45804: ST_TO_ADDR
// y := GetY ( building ) ;
45805: LD_ADDR_VAR 0 5
45809: PUSH
45810: LD_VAR 0 2
45814: PPUSH
45815: CALL_OW 251
45819: ST_TO_ADDR
// if not building or not x or not y then
45820: LD_VAR 0 2
45824: NOT
45825: PUSH
45826: LD_VAR 0 4
45830: NOT
45831: OR
45832: PUSH
45833: LD_VAR 0 5
45837: NOT
45838: OR
45839: IFFALSE 45843
// exit ;
45841: GO 45935
// if GetTaskList ( unit ) then
45843: LD_VAR 0 1
45847: PPUSH
45848: CALL_OW 437
45852: IFFALSE 45935
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45854: LD_STRING e
45856: PUSH
45857: LD_VAR 0 1
45861: PPUSH
45862: CALL_OW 437
45866: PUSH
45867: LD_INT 1
45869: ARRAY
45870: PUSH
45871: LD_INT 1
45873: ARRAY
45874: EQUAL
45875: PUSH
45876: LD_VAR 0 4
45880: PUSH
45881: LD_VAR 0 1
45885: PPUSH
45886: CALL_OW 437
45890: PUSH
45891: LD_INT 1
45893: ARRAY
45894: PUSH
45895: LD_INT 2
45897: ARRAY
45898: EQUAL
45899: AND
45900: PUSH
45901: LD_VAR 0 5
45905: PUSH
45906: LD_VAR 0 1
45910: PPUSH
45911: CALL_OW 437
45915: PUSH
45916: LD_INT 1
45918: ARRAY
45919: PUSH
45920: LD_INT 3
45922: ARRAY
45923: EQUAL
45924: AND
45925: IFFALSE 45935
// result := true end ;
45927: LD_ADDR_VAR 0 3
45931: PUSH
45932: LD_INT 1
45934: ST_TO_ADDR
// end ;
45935: LD_VAR 0 3
45939: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45940: LD_INT 0
45942: PPUSH
// result := false ;
45943: LD_ADDR_VAR 0 4
45947: PUSH
45948: LD_INT 0
45950: ST_TO_ADDR
// if GetTaskList ( unit ) then
45951: LD_VAR 0 1
45955: PPUSH
45956: CALL_OW 437
45960: IFFALSE 46043
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45962: LD_STRING M
45964: PUSH
45965: LD_VAR 0 1
45969: PPUSH
45970: CALL_OW 437
45974: PUSH
45975: LD_INT 1
45977: ARRAY
45978: PUSH
45979: LD_INT 1
45981: ARRAY
45982: EQUAL
45983: PUSH
45984: LD_VAR 0 2
45988: PUSH
45989: LD_VAR 0 1
45993: PPUSH
45994: CALL_OW 437
45998: PUSH
45999: LD_INT 1
46001: ARRAY
46002: PUSH
46003: LD_INT 2
46005: ARRAY
46006: EQUAL
46007: AND
46008: PUSH
46009: LD_VAR 0 3
46013: PUSH
46014: LD_VAR 0 1
46018: PPUSH
46019: CALL_OW 437
46023: PUSH
46024: LD_INT 1
46026: ARRAY
46027: PUSH
46028: LD_INT 3
46030: ARRAY
46031: EQUAL
46032: AND
46033: IFFALSE 46043
// result := true ;
46035: LD_ADDR_VAR 0 4
46039: PUSH
46040: LD_INT 1
46042: ST_TO_ADDR
// end ; end ;
46043: LD_VAR 0 4
46047: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46048: LD_INT 0
46050: PPUSH
46051: PPUSH
46052: PPUSH
46053: PPUSH
// if not unit or not area then
46054: LD_VAR 0 1
46058: NOT
46059: PUSH
46060: LD_VAR 0 2
46064: NOT
46065: OR
46066: IFFALSE 46070
// exit ;
46068: GO 46234
// tmp := AreaToList ( area , i ) ;
46070: LD_ADDR_VAR 0 6
46074: PUSH
46075: LD_VAR 0 2
46079: PPUSH
46080: LD_VAR 0 5
46084: PPUSH
46085: CALL_OW 517
46089: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46090: LD_ADDR_VAR 0 5
46094: PUSH
46095: DOUBLE
46096: LD_INT 1
46098: DEC
46099: ST_TO_ADDR
46100: LD_VAR 0 6
46104: PUSH
46105: LD_INT 1
46107: ARRAY
46108: PUSH
46109: FOR_TO
46110: IFFALSE 46232
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46112: LD_ADDR_VAR 0 7
46116: PUSH
46117: LD_VAR 0 6
46121: PUSH
46122: LD_INT 1
46124: ARRAY
46125: PUSH
46126: LD_VAR 0 5
46130: ARRAY
46131: PUSH
46132: LD_VAR 0 6
46136: PUSH
46137: LD_INT 2
46139: ARRAY
46140: PUSH
46141: LD_VAR 0 5
46145: ARRAY
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
46151: LD_VAR 0 7
46155: PUSH
46156: LD_INT 1
46158: ARRAY
46159: PPUSH
46160: LD_VAR 0 7
46164: PUSH
46165: LD_INT 2
46167: ARRAY
46168: PPUSH
46169: CALL_OW 428
46173: PUSH
46174: LD_INT 0
46176: EQUAL
46177: IFFALSE 46230
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46179: LD_VAR 0 1
46183: PPUSH
46184: LD_VAR 0 7
46188: PUSH
46189: LD_INT 1
46191: ARRAY
46192: PPUSH
46193: LD_VAR 0 7
46197: PUSH
46198: LD_INT 2
46200: ARRAY
46201: PPUSH
46202: LD_VAR 0 3
46206: PPUSH
46207: CALL_OW 48
// result := IsPlaced ( unit ) ;
46211: LD_ADDR_VAR 0 4
46215: PUSH
46216: LD_VAR 0 1
46220: PPUSH
46221: CALL_OW 305
46225: ST_TO_ADDR
// exit ;
46226: POP
46227: POP
46228: GO 46234
// end ; end ;
46230: GO 46109
46232: POP
46233: POP
// end ;
46234: LD_VAR 0 4
46238: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46239: LD_INT 0
46241: PPUSH
46242: PPUSH
46243: PPUSH
// if not side or side > 8 then
46244: LD_VAR 0 1
46248: NOT
46249: PUSH
46250: LD_VAR 0 1
46254: PUSH
46255: LD_INT 8
46257: GREATER
46258: OR
46259: IFFALSE 46263
// exit ;
46261: GO 46450
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46263: LD_ADDR_VAR 0 4
46267: PUSH
46268: LD_INT 22
46270: PUSH
46271: LD_VAR 0 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 21
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PPUSH
46294: CALL_OW 69
46298: ST_TO_ADDR
// if not tmp then
46299: LD_VAR 0 4
46303: NOT
46304: IFFALSE 46308
// exit ;
46306: GO 46450
// enable_addtolog := true ;
46308: LD_ADDR_OWVAR 81
46312: PUSH
46313: LD_INT 1
46315: ST_TO_ADDR
// AddToLog ( [ ) ;
46316: LD_STRING [
46318: PPUSH
46319: CALL_OW 561
// for i in tmp do
46323: LD_ADDR_VAR 0 3
46327: PUSH
46328: LD_VAR 0 4
46332: PUSH
46333: FOR_IN
46334: IFFALSE 46441
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46336: LD_STRING [
46338: PUSH
46339: LD_VAR 0 3
46343: PPUSH
46344: CALL_OW 266
46348: STR
46349: PUSH
46350: LD_STRING , 
46352: STR
46353: PUSH
46354: LD_VAR 0 3
46358: PPUSH
46359: CALL_OW 250
46363: STR
46364: PUSH
46365: LD_STRING , 
46367: STR
46368: PUSH
46369: LD_VAR 0 3
46373: PPUSH
46374: CALL_OW 251
46378: STR
46379: PUSH
46380: LD_STRING , 
46382: STR
46383: PUSH
46384: LD_VAR 0 3
46388: PPUSH
46389: CALL_OW 254
46393: STR
46394: PUSH
46395: LD_STRING , 
46397: STR
46398: PUSH
46399: LD_VAR 0 3
46403: PPUSH
46404: LD_INT 1
46406: PPUSH
46407: CALL_OW 268
46411: STR
46412: PUSH
46413: LD_STRING , 
46415: STR
46416: PUSH
46417: LD_VAR 0 3
46421: PPUSH
46422: LD_INT 2
46424: PPUSH
46425: CALL_OW 268
46429: STR
46430: PUSH
46431: LD_STRING ],
46433: STR
46434: PPUSH
46435: CALL_OW 561
// end ;
46439: GO 46333
46441: POP
46442: POP
// AddToLog ( ]; ) ;
46443: LD_STRING ];
46445: PPUSH
46446: CALL_OW 561
// end ;
46450: LD_VAR 0 2
46454: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46455: LD_INT 0
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
// if not area or not rate or not max then
46462: LD_VAR 0 1
46466: NOT
46467: PUSH
46468: LD_VAR 0 2
46472: NOT
46473: OR
46474: PUSH
46475: LD_VAR 0 4
46479: NOT
46480: OR
46481: IFFALSE 46485
// exit ;
46483: GO 46674
// while 1 do
46485: LD_INT 1
46487: IFFALSE 46674
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46489: LD_ADDR_VAR 0 9
46493: PUSH
46494: LD_VAR 0 1
46498: PPUSH
46499: LD_INT 1
46501: PPUSH
46502: CALL_OW 287
46506: PUSH
46507: LD_INT 10
46509: MUL
46510: ST_TO_ADDR
// r := rate / 10 ;
46511: LD_ADDR_VAR 0 7
46515: PUSH
46516: LD_VAR 0 2
46520: PUSH
46521: LD_INT 10
46523: DIVREAL
46524: ST_TO_ADDR
// time := 1 1$00 ;
46525: LD_ADDR_VAR 0 8
46529: PUSH
46530: LD_INT 2100
46532: ST_TO_ADDR
// if amount < min then
46533: LD_VAR 0 9
46537: PUSH
46538: LD_VAR 0 3
46542: LESS
46543: IFFALSE 46561
// r := r * 2 else
46545: LD_ADDR_VAR 0 7
46549: PUSH
46550: LD_VAR 0 7
46554: PUSH
46555: LD_INT 2
46557: MUL
46558: ST_TO_ADDR
46559: GO 46587
// if amount > max then
46561: LD_VAR 0 9
46565: PUSH
46566: LD_VAR 0 4
46570: GREATER
46571: IFFALSE 46587
// r := r / 2 ;
46573: LD_ADDR_VAR 0 7
46577: PUSH
46578: LD_VAR 0 7
46582: PUSH
46583: LD_INT 2
46585: DIVREAL
46586: ST_TO_ADDR
// time := time / r ;
46587: LD_ADDR_VAR 0 8
46591: PUSH
46592: LD_VAR 0 8
46596: PUSH
46597: LD_VAR 0 7
46601: DIVREAL
46602: ST_TO_ADDR
// if time < 0 then
46603: LD_VAR 0 8
46607: PUSH
46608: LD_INT 0
46610: LESS
46611: IFFALSE 46628
// time := time * - 1 ;
46613: LD_ADDR_VAR 0 8
46617: PUSH
46618: LD_VAR 0 8
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: MUL
46627: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46628: LD_VAR 0 8
46632: PUSH
46633: LD_INT 35
46635: PPUSH
46636: LD_INT 875
46638: PPUSH
46639: CALL_OW 12
46643: PLUS
46644: PPUSH
46645: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46649: LD_INT 1
46651: PPUSH
46652: LD_INT 5
46654: PPUSH
46655: CALL_OW 12
46659: PPUSH
46660: LD_VAR 0 1
46664: PPUSH
46665: LD_INT 1
46667: PPUSH
46668: CALL_OW 55
// end ;
46672: GO 46485
// end ;
46674: LD_VAR 0 5
46678: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46679: LD_INT 0
46681: PPUSH
46682: PPUSH
46683: PPUSH
46684: PPUSH
46685: PPUSH
46686: PPUSH
46687: PPUSH
46688: PPUSH
// if not turrets or not factories then
46689: LD_VAR 0 1
46693: NOT
46694: PUSH
46695: LD_VAR 0 2
46699: NOT
46700: OR
46701: IFFALSE 46705
// exit ;
46703: GO 47012
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46705: LD_ADDR_VAR 0 10
46709: PUSH
46710: LD_INT 5
46712: PUSH
46713: LD_INT 6
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: LD_INT 4
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 3
46732: PUSH
46733: LD_INT 5
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 24
46747: PUSH
46748: LD_INT 25
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 23
46757: PUSH
46758: LD_INT 27
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 42
46771: PUSH
46772: LD_INT 43
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 44
46781: PUSH
46782: LD_INT 46
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 45
46791: PUSH
46792: LD_INT 47
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: ST_TO_ADDR
// result := [ ] ;
46809: LD_ADDR_VAR 0 3
46813: PUSH
46814: EMPTY
46815: ST_TO_ADDR
// for i in turrets do
46816: LD_ADDR_VAR 0 4
46820: PUSH
46821: LD_VAR 0 1
46825: PUSH
46826: FOR_IN
46827: IFFALSE 47010
// begin nat := GetNation ( i ) ;
46829: LD_ADDR_VAR 0 7
46833: PUSH
46834: LD_VAR 0 4
46838: PPUSH
46839: CALL_OW 248
46843: ST_TO_ADDR
// weapon := 0 ;
46844: LD_ADDR_VAR 0 8
46848: PUSH
46849: LD_INT 0
46851: ST_TO_ADDR
// if not nat then
46852: LD_VAR 0 7
46856: NOT
46857: IFFALSE 46861
// continue ;
46859: GO 46826
// for j in list [ nat ] do
46861: LD_ADDR_VAR 0 5
46865: PUSH
46866: LD_VAR 0 10
46870: PUSH
46871: LD_VAR 0 7
46875: ARRAY
46876: PUSH
46877: FOR_IN
46878: IFFALSE 46919
// if GetBWeapon ( i ) = j [ 1 ] then
46880: LD_VAR 0 4
46884: PPUSH
46885: CALL_OW 269
46889: PUSH
46890: LD_VAR 0 5
46894: PUSH
46895: LD_INT 1
46897: ARRAY
46898: EQUAL
46899: IFFALSE 46917
// begin weapon := j [ 2 ] ;
46901: LD_ADDR_VAR 0 8
46905: PUSH
46906: LD_VAR 0 5
46910: PUSH
46911: LD_INT 2
46913: ARRAY
46914: ST_TO_ADDR
// break ;
46915: GO 46919
// end ;
46917: GO 46877
46919: POP
46920: POP
// if not weapon then
46921: LD_VAR 0 8
46925: NOT
46926: IFFALSE 46930
// continue ;
46928: GO 46826
// for k in factories do
46930: LD_ADDR_VAR 0 6
46934: PUSH
46935: LD_VAR 0 2
46939: PUSH
46940: FOR_IN
46941: IFFALSE 47006
// begin weapons := AvailableWeaponList ( k ) ;
46943: LD_ADDR_VAR 0 9
46947: PUSH
46948: LD_VAR 0 6
46952: PPUSH
46953: CALL_OW 478
46957: ST_TO_ADDR
// if not weapons then
46958: LD_VAR 0 9
46962: NOT
46963: IFFALSE 46967
// continue ;
46965: GO 46940
// if weapon in weapons then
46967: LD_VAR 0 8
46971: PUSH
46972: LD_VAR 0 9
46976: IN
46977: IFFALSE 47004
// begin result := [ i , weapon ] ;
46979: LD_ADDR_VAR 0 3
46983: PUSH
46984: LD_VAR 0 4
46988: PUSH
46989: LD_VAR 0 8
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: ST_TO_ADDR
// exit ;
46998: POP
46999: POP
47000: POP
47001: POP
47002: GO 47012
// end ; end ;
47004: GO 46940
47006: POP
47007: POP
// end ;
47008: GO 46826
47010: POP
47011: POP
// end ;
47012: LD_VAR 0 3
47016: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47017: LD_INT 0
47019: PPUSH
// if not side or side > 8 then
47020: LD_VAR 0 3
47024: NOT
47025: PUSH
47026: LD_VAR 0 3
47030: PUSH
47031: LD_INT 8
47033: GREATER
47034: OR
47035: IFFALSE 47039
// exit ;
47037: GO 47098
// if not range then
47039: LD_VAR 0 4
47043: NOT
47044: IFFALSE 47055
// range := - 12 ;
47046: LD_ADDR_VAR 0 4
47050: PUSH
47051: LD_INT 12
47053: NEG
47054: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47055: LD_VAR 0 1
47059: PPUSH
47060: LD_VAR 0 2
47064: PPUSH
47065: LD_VAR 0 3
47069: PPUSH
47070: LD_VAR 0 4
47074: PPUSH
47075: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47079: LD_VAR 0 1
47083: PPUSH
47084: LD_VAR 0 2
47088: PPUSH
47089: LD_VAR 0 3
47093: PPUSH
47094: CALL_OW 331
// end ;
47098: LD_VAR 0 5
47102: RET
// export function Video ( mode ) ; begin
47103: LD_INT 0
47105: PPUSH
// ingame_video = mode ;
47106: LD_ADDR_OWVAR 52
47110: PUSH
47111: LD_VAR 0 1
47115: ST_TO_ADDR
// interface_hidden = mode ;
47116: LD_ADDR_OWVAR 54
47120: PUSH
47121: LD_VAR 0 1
47125: ST_TO_ADDR
// end ;
47126: LD_VAR 0 2
47130: RET
// export function Join ( array , element ) ; begin
47131: LD_INT 0
47133: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47134: LD_ADDR_VAR 0 3
47138: PUSH
47139: LD_VAR 0 1
47143: PPUSH
47144: LD_VAR 0 1
47148: PUSH
47149: LD_INT 1
47151: PLUS
47152: PPUSH
47153: LD_VAR 0 2
47157: PPUSH
47158: CALL_OW 1
47162: ST_TO_ADDR
// end ;
47163: LD_VAR 0 3
47167: RET
// export function JoinUnion ( array , element ) ; begin
47168: LD_INT 0
47170: PPUSH
// result := array union element ;
47171: LD_ADDR_VAR 0 3
47175: PUSH
47176: LD_VAR 0 1
47180: PUSH
47181: LD_VAR 0 2
47185: UNION
47186: ST_TO_ADDR
// end ;
47187: LD_VAR 0 3
47191: RET
// export function GetBehemoths ( side ) ; begin
47192: LD_INT 0
47194: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
47195: LD_ADDR_VAR 0 2
47199: PUSH
47200: LD_INT 22
47202: PUSH
47203: LD_VAR 0 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 31
47214: PUSH
47215: LD_INT 25
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PPUSH
47226: CALL_OW 69
47230: ST_TO_ADDR
// end ;
47231: LD_VAR 0 2
47235: RET
// export function Shuffle ( array ) ; var i , index ; begin
47236: LD_INT 0
47238: PPUSH
47239: PPUSH
47240: PPUSH
// result := [ ] ;
47241: LD_ADDR_VAR 0 2
47245: PUSH
47246: EMPTY
47247: ST_TO_ADDR
// if not array then
47248: LD_VAR 0 1
47252: NOT
47253: IFFALSE 47257
// exit ;
47255: GO 47356
// Randomize ;
47257: CALL_OW 10
// for i = array downto 1 do
47261: LD_ADDR_VAR 0 3
47265: PUSH
47266: DOUBLE
47267: LD_VAR 0 1
47271: INC
47272: ST_TO_ADDR
47273: LD_INT 1
47275: PUSH
47276: FOR_DOWNTO
47277: IFFALSE 47354
// begin index := rand ( 1 , array ) ;
47279: LD_ADDR_VAR 0 4
47283: PUSH
47284: LD_INT 1
47286: PPUSH
47287: LD_VAR 0 1
47291: PPUSH
47292: CALL_OW 12
47296: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47297: LD_ADDR_VAR 0 2
47301: PUSH
47302: LD_VAR 0 2
47306: PPUSH
47307: LD_VAR 0 2
47311: PUSH
47312: LD_INT 1
47314: PLUS
47315: PPUSH
47316: LD_VAR 0 1
47320: PUSH
47321: LD_VAR 0 4
47325: ARRAY
47326: PPUSH
47327: CALL_OW 2
47331: ST_TO_ADDR
// array := Delete ( array , index ) ;
47332: LD_ADDR_VAR 0 1
47336: PUSH
47337: LD_VAR 0 1
47341: PPUSH
47342: LD_VAR 0 4
47346: PPUSH
47347: CALL_OW 3
47351: ST_TO_ADDR
// end ;
47352: GO 47276
47354: POP
47355: POP
// end ;
47356: LD_VAR 0 2
47360: RET
// export function GetBaseMaterials ( base ) ; begin
47361: LD_INT 0
47363: PPUSH
// result := [ 0 , 0 , 0 ] ;
47364: LD_ADDR_VAR 0 2
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: ST_TO_ADDR
// if not base then
47383: LD_VAR 0 1
47387: NOT
47388: IFFALSE 47392
// exit ;
47390: GO 47441
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47392: LD_ADDR_VAR 0 2
47396: PUSH
47397: LD_VAR 0 1
47401: PPUSH
47402: LD_INT 1
47404: PPUSH
47405: CALL_OW 275
47409: PUSH
47410: LD_VAR 0 1
47414: PPUSH
47415: LD_INT 2
47417: PPUSH
47418: CALL_OW 275
47422: PUSH
47423: LD_VAR 0 1
47427: PPUSH
47428: LD_INT 3
47430: PPUSH
47431: CALL_OW 275
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: LIST
47440: ST_TO_ADDR
// end ;
47441: LD_VAR 0 2
47445: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47446: LD_INT 0
47448: PPUSH
47449: PPUSH
// result := array ;
47450: LD_ADDR_VAR 0 3
47454: PUSH
47455: LD_VAR 0 1
47459: ST_TO_ADDR
// if size > 0 then
47460: LD_VAR 0 2
47464: PUSH
47465: LD_INT 0
47467: GREATER
47468: IFFALSE 47514
// for i := array downto size do
47470: LD_ADDR_VAR 0 4
47474: PUSH
47475: DOUBLE
47476: LD_VAR 0 1
47480: INC
47481: ST_TO_ADDR
47482: LD_VAR 0 2
47486: PUSH
47487: FOR_DOWNTO
47488: IFFALSE 47512
// result := Delete ( result , result ) ;
47490: LD_ADDR_VAR 0 3
47494: PUSH
47495: LD_VAR 0 3
47499: PPUSH
47500: LD_VAR 0 3
47504: PPUSH
47505: CALL_OW 3
47509: ST_TO_ADDR
47510: GO 47487
47512: POP
47513: POP
// end ;
47514: LD_VAR 0 3
47518: RET
// export function ComExit ( unit ) ; var tmp ; begin
47519: LD_INT 0
47521: PPUSH
47522: PPUSH
// if not IsInUnit ( unit ) then
47523: LD_VAR 0 1
47527: PPUSH
47528: CALL_OW 310
47532: NOT
47533: IFFALSE 47537
// exit ;
47535: GO 47597
// tmp := IsInUnit ( unit ) ;
47537: LD_ADDR_VAR 0 3
47541: PUSH
47542: LD_VAR 0 1
47546: PPUSH
47547: CALL_OW 310
47551: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47552: LD_VAR 0 3
47556: PPUSH
47557: CALL_OW 247
47561: PUSH
47562: LD_INT 2
47564: EQUAL
47565: IFFALSE 47578
// ComExitVehicle ( unit ) else
47567: LD_VAR 0 1
47571: PPUSH
47572: CALL_OW 121
47576: GO 47587
// ComExitBuilding ( unit ) ;
47578: LD_VAR 0 1
47582: PPUSH
47583: CALL_OW 122
// result := tmp ;
47587: LD_ADDR_VAR 0 2
47591: PUSH
47592: LD_VAR 0 3
47596: ST_TO_ADDR
// end ;
47597: LD_VAR 0 2
47601: RET
// export function ComExitAll ( units ) ; var i ; begin
47602: LD_INT 0
47604: PPUSH
47605: PPUSH
// if not units then
47606: LD_VAR 0 1
47610: NOT
47611: IFFALSE 47615
// exit ;
47613: GO 47641
// for i in units do
47615: LD_ADDR_VAR 0 3
47619: PUSH
47620: LD_VAR 0 1
47624: PUSH
47625: FOR_IN
47626: IFFALSE 47639
// ComExit ( i ) ;
47628: LD_VAR 0 3
47632: PPUSH
47633: CALL 47519 0 1
47637: GO 47625
47639: POP
47640: POP
// end ;
47641: LD_VAR 0 2
47645: RET
// export function ResetHc ; begin
47646: LD_INT 0
47648: PPUSH
// InitHc ;
47649: CALL_OW 19
// hc_importance := 0 ;
47653: LD_ADDR_OWVAR 32
47657: PUSH
47658: LD_INT 0
47660: ST_TO_ADDR
// end ;
47661: LD_VAR 0 1
47665: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47666: LD_INT 0
47668: PPUSH
47669: PPUSH
47670: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47671: LD_ADDR_VAR 0 6
47675: PUSH
47676: LD_VAR 0 1
47680: PUSH
47681: LD_VAR 0 3
47685: PLUS
47686: PUSH
47687: LD_INT 2
47689: DIV
47690: ST_TO_ADDR
// if _x < 0 then
47691: LD_VAR 0 6
47695: PUSH
47696: LD_INT 0
47698: LESS
47699: IFFALSE 47716
// _x := _x * - 1 ;
47701: LD_ADDR_VAR 0 6
47705: PUSH
47706: LD_VAR 0 6
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: MUL
47715: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47716: LD_ADDR_VAR 0 7
47720: PUSH
47721: LD_VAR 0 2
47725: PUSH
47726: LD_VAR 0 4
47730: PLUS
47731: PUSH
47732: LD_INT 2
47734: DIV
47735: ST_TO_ADDR
// if _y < 0 then
47736: LD_VAR 0 7
47740: PUSH
47741: LD_INT 0
47743: LESS
47744: IFFALSE 47761
// _y := _y * - 1 ;
47746: LD_ADDR_VAR 0 7
47750: PUSH
47751: LD_VAR 0 7
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: MUL
47760: ST_TO_ADDR
// result := [ _x , _y ] ;
47761: LD_ADDR_VAR 0 5
47765: PUSH
47766: LD_VAR 0 6
47770: PUSH
47771: LD_VAR 0 7
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: ST_TO_ADDR
// end ;
47780: LD_VAR 0 5
47784: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47785: LD_INT 0
47787: PPUSH
47788: PPUSH
47789: PPUSH
47790: PPUSH
// task := GetTaskList ( unit ) ;
47791: LD_ADDR_VAR 0 7
47795: PUSH
47796: LD_VAR 0 1
47800: PPUSH
47801: CALL_OW 437
47805: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47806: LD_VAR 0 7
47810: NOT
47811: PUSH
47812: LD_VAR 0 1
47816: PPUSH
47817: LD_VAR 0 2
47821: PPUSH
47822: CALL_OW 308
47826: NOT
47827: AND
47828: IFFALSE 47832
// exit ;
47830: GO 47950
// if IsInArea ( unit , area ) then
47832: LD_VAR 0 1
47836: PPUSH
47837: LD_VAR 0 2
47841: PPUSH
47842: CALL_OW 308
47846: IFFALSE 47864
// begin ComMoveToArea ( unit , goAway ) ;
47848: LD_VAR 0 1
47852: PPUSH
47853: LD_VAR 0 3
47857: PPUSH
47858: CALL_OW 113
// exit ;
47862: GO 47950
// end ; if task [ 1 ] [ 1 ] <> M then
47864: LD_VAR 0 7
47868: PUSH
47869: LD_INT 1
47871: ARRAY
47872: PUSH
47873: LD_INT 1
47875: ARRAY
47876: PUSH
47877: LD_STRING M
47879: NONEQUAL
47880: IFFALSE 47884
// exit ;
47882: GO 47950
// x := task [ 1 ] [ 2 ] ;
47884: LD_ADDR_VAR 0 5
47888: PUSH
47889: LD_VAR 0 7
47893: PUSH
47894: LD_INT 1
47896: ARRAY
47897: PUSH
47898: LD_INT 2
47900: ARRAY
47901: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47902: LD_ADDR_VAR 0 6
47906: PUSH
47907: LD_VAR 0 7
47911: PUSH
47912: LD_INT 1
47914: ARRAY
47915: PUSH
47916: LD_INT 3
47918: ARRAY
47919: ST_TO_ADDR
// if InArea ( x , y , area ) then
47920: LD_VAR 0 5
47924: PPUSH
47925: LD_VAR 0 6
47929: PPUSH
47930: LD_VAR 0 2
47934: PPUSH
47935: CALL_OW 309
47939: IFFALSE 47950
// ComStop ( unit ) ;
47941: LD_VAR 0 1
47945: PPUSH
47946: CALL_OW 141
// end ;
47950: LD_VAR 0 4
47954: RET
// export function Abs ( value ) ; begin
47955: LD_INT 0
47957: PPUSH
// result := value ;
47958: LD_ADDR_VAR 0 2
47962: PUSH
47963: LD_VAR 0 1
47967: ST_TO_ADDR
// if value < 0 then
47968: LD_VAR 0 1
47972: PUSH
47973: LD_INT 0
47975: LESS
47976: IFFALSE 47993
// result := value * - 1 ;
47978: LD_ADDR_VAR 0 2
47982: PUSH
47983: LD_VAR 0 1
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: MUL
47992: ST_TO_ADDR
// end ;
47993: LD_VAR 0 2
47997: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47998: LD_INT 0
48000: PPUSH
48001: PPUSH
48002: PPUSH
48003: PPUSH
48004: PPUSH
48005: PPUSH
48006: PPUSH
48007: PPUSH
// if not unit or not building then
48008: LD_VAR 0 1
48012: NOT
48013: PUSH
48014: LD_VAR 0 2
48018: NOT
48019: OR
48020: IFFALSE 48024
// exit ;
48022: GO 48250
// x := GetX ( building ) ;
48024: LD_ADDR_VAR 0 4
48028: PUSH
48029: LD_VAR 0 2
48033: PPUSH
48034: CALL_OW 250
48038: ST_TO_ADDR
// y := GetY ( building ) ;
48039: LD_ADDR_VAR 0 6
48043: PUSH
48044: LD_VAR 0 2
48048: PPUSH
48049: CALL_OW 251
48053: ST_TO_ADDR
// d := GetDir ( building ) ;
48054: LD_ADDR_VAR 0 8
48058: PUSH
48059: LD_VAR 0 2
48063: PPUSH
48064: CALL_OW 254
48068: ST_TO_ADDR
// r := 4 ;
48069: LD_ADDR_VAR 0 9
48073: PUSH
48074: LD_INT 4
48076: ST_TO_ADDR
// for i := 1 to 5 do
48077: LD_ADDR_VAR 0 10
48081: PUSH
48082: DOUBLE
48083: LD_INT 1
48085: DEC
48086: ST_TO_ADDR
48087: LD_INT 5
48089: PUSH
48090: FOR_TO
48091: IFFALSE 48248
// begin _x := ShiftX ( x , d , r + i ) ;
48093: LD_ADDR_VAR 0 5
48097: PUSH
48098: LD_VAR 0 4
48102: PPUSH
48103: LD_VAR 0 8
48107: PPUSH
48108: LD_VAR 0 9
48112: PUSH
48113: LD_VAR 0 10
48117: PLUS
48118: PPUSH
48119: CALL_OW 272
48123: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48124: LD_ADDR_VAR 0 7
48128: PUSH
48129: LD_VAR 0 6
48133: PPUSH
48134: LD_VAR 0 8
48138: PPUSH
48139: LD_VAR 0 9
48143: PUSH
48144: LD_VAR 0 10
48148: PLUS
48149: PPUSH
48150: CALL_OW 273
48154: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48155: LD_VAR 0 5
48159: PPUSH
48160: LD_VAR 0 7
48164: PPUSH
48165: CALL_OW 488
48169: PUSH
48170: LD_VAR 0 5
48174: PPUSH
48175: LD_VAR 0 7
48179: PPUSH
48180: CALL_OW 428
48184: PPUSH
48185: CALL_OW 247
48189: PUSH
48190: LD_INT 3
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: IN
48200: NOT
48201: AND
48202: IFFALSE 48246
// begin ComMoveXY ( unit , _x , _y ) ;
48204: LD_VAR 0 1
48208: PPUSH
48209: LD_VAR 0 5
48213: PPUSH
48214: LD_VAR 0 7
48218: PPUSH
48219: CALL_OW 111
// result := [ _x , _y ] ;
48223: LD_ADDR_VAR 0 3
48227: PUSH
48228: LD_VAR 0 5
48232: PUSH
48233: LD_VAR 0 7
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: ST_TO_ADDR
// exit ;
48242: POP
48243: POP
48244: GO 48250
// end ; end ;
48246: GO 48090
48248: POP
48249: POP
// end ;
48250: LD_VAR 0 3
48254: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48255: LD_INT 0
48257: PPUSH
48258: PPUSH
48259: PPUSH
// result := 0 ;
48260: LD_ADDR_VAR 0 3
48264: PUSH
48265: LD_INT 0
48267: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48268: LD_VAR 0 1
48272: PUSH
48273: LD_INT 0
48275: LESS
48276: PUSH
48277: LD_VAR 0 1
48281: PUSH
48282: LD_INT 8
48284: GREATER
48285: OR
48286: PUSH
48287: LD_VAR 0 2
48291: PUSH
48292: LD_INT 0
48294: LESS
48295: OR
48296: PUSH
48297: LD_VAR 0 2
48301: PUSH
48302: LD_INT 8
48304: GREATER
48305: OR
48306: IFFALSE 48310
// exit ;
48308: GO 48385
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48310: LD_ADDR_VAR 0 4
48314: PUSH
48315: LD_INT 22
48317: PUSH
48318: LD_VAR 0 2
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PPUSH
48327: CALL_OW 69
48331: PUSH
48332: FOR_IN
48333: IFFALSE 48383
// begin un := UnitShoot ( i ) ;
48335: LD_ADDR_VAR 0 5
48339: PUSH
48340: LD_VAR 0 4
48344: PPUSH
48345: CALL_OW 504
48349: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48350: LD_VAR 0 5
48354: PPUSH
48355: CALL_OW 255
48359: PUSH
48360: LD_VAR 0 1
48364: EQUAL
48365: IFFALSE 48381
// begin result := un ;
48367: LD_ADDR_VAR 0 3
48371: PUSH
48372: LD_VAR 0 5
48376: ST_TO_ADDR
// exit ;
48377: POP
48378: POP
48379: GO 48385
// end ; end ;
48381: GO 48332
48383: POP
48384: POP
// end ;
48385: LD_VAR 0 3
48389: RET
// export function GetCargoBay ( units ) ; begin
48390: LD_INT 0
48392: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48393: LD_ADDR_VAR 0 2
48397: PUSH
48398: LD_VAR 0 1
48402: PPUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 34
48408: PUSH
48409: LD_INT 12
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 34
48418: PUSH
48419: LD_INT 51
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 34
48428: PUSH
48429: LD_INT 32
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 34
48438: PUSH
48439: LD_EXP 93
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: PPUSH
48455: CALL_OW 72
48459: ST_TO_ADDR
// end ;
48460: LD_VAR 0 2
48464: RET
// export function Negate ( value ) ; begin
48465: LD_INT 0
48467: PPUSH
// result := not value ;
48468: LD_ADDR_VAR 0 2
48472: PUSH
48473: LD_VAR 0 1
48477: NOT
48478: ST_TO_ADDR
// end ;
48479: LD_VAR 0 2
48483: RET
// export function Inc ( value ) ; begin
48484: LD_INT 0
48486: PPUSH
// result := value + 1 ;
48487: LD_ADDR_VAR 0 2
48491: PUSH
48492: LD_VAR 0 1
48496: PUSH
48497: LD_INT 1
48499: PLUS
48500: ST_TO_ADDR
// end ;
48501: LD_VAR 0 2
48505: RET
// export function Dec ( value ) ; begin
48506: LD_INT 0
48508: PPUSH
// result := value - 1 ;
48509: LD_ADDR_VAR 0 2
48513: PUSH
48514: LD_VAR 0 1
48518: PUSH
48519: LD_INT 1
48521: MINUS
48522: ST_TO_ADDR
// end ;
48523: LD_VAR 0 2
48527: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48528: LD_INT 0
48530: PPUSH
48531: PPUSH
48532: PPUSH
48533: PPUSH
48534: PPUSH
48535: PPUSH
48536: PPUSH
48537: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48538: LD_VAR 0 1
48542: PPUSH
48543: LD_VAR 0 2
48547: PPUSH
48548: CALL_OW 488
48552: NOT
48553: PUSH
48554: LD_VAR 0 3
48558: PPUSH
48559: LD_VAR 0 4
48563: PPUSH
48564: CALL_OW 488
48568: NOT
48569: OR
48570: IFFALSE 48583
// begin result := - 1 ;
48572: LD_ADDR_VAR 0 5
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: ST_TO_ADDR
// exit ;
48581: GO 48818
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48583: LD_ADDR_VAR 0 12
48587: PUSH
48588: LD_VAR 0 1
48592: PPUSH
48593: LD_VAR 0 2
48597: PPUSH
48598: LD_VAR 0 3
48602: PPUSH
48603: LD_VAR 0 4
48607: PPUSH
48608: CALL 47666 0 4
48612: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48613: LD_ADDR_VAR 0 11
48617: PUSH
48618: LD_VAR 0 1
48622: PPUSH
48623: LD_VAR 0 2
48627: PPUSH
48628: LD_VAR 0 12
48632: PUSH
48633: LD_INT 1
48635: ARRAY
48636: PPUSH
48637: LD_VAR 0 12
48641: PUSH
48642: LD_INT 2
48644: ARRAY
48645: PPUSH
48646: CALL_OW 298
48650: ST_TO_ADDR
// distance := 9999 ;
48651: LD_ADDR_VAR 0 10
48655: PUSH
48656: LD_INT 9999
48658: ST_TO_ADDR
// for i := 0 to 5 do
48659: LD_ADDR_VAR 0 6
48663: PUSH
48664: DOUBLE
48665: LD_INT 0
48667: DEC
48668: ST_TO_ADDR
48669: LD_INT 5
48671: PUSH
48672: FOR_TO
48673: IFFALSE 48816
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48675: LD_ADDR_VAR 0 7
48679: PUSH
48680: LD_VAR 0 1
48684: PPUSH
48685: LD_VAR 0 6
48689: PPUSH
48690: LD_VAR 0 11
48694: PPUSH
48695: CALL_OW 272
48699: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48700: LD_ADDR_VAR 0 8
48704: PUSH
48705: LD_VAR 0 2
48709: PPUSH
48710: LD_VAR 0 6
48714: PPUSH
48715: LD_VAR 0 11
48719: PPUSH
48720: CALL_OW 273
48724: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48725: LD_VAR 0 7
48729: PPUSH
48730: LD_VAR 0 8
48734: PPUSH
48735: CALL_OW 488
48739: NOT
48740: IFFALSE 48744
// continue ;
48742: GO 48672
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48744: LD_ADDR_VAR 0 9
48748: PUSH
48749: LD_VAR 0 12
48753: PUSH
48754: LD_INT 1
48756: ARRAY
48757: PPUSH
48758: LD_VAR 0 12
48762: PUSH
48763: LD_INT 2
48765: ARRAY
48766: PPUSH
48767: LD_VAR 0 7
48771: PPUSH
48772: LD_VAR 0 8
48776: PPUSH
48777: CALL_OW 298
48781: ST_TO_ADDR
// if tmp < distance then
48782: LD_VAR 0 9
48786: PUSH
48787: LD_VAR 0 10
48791: LESS
48792: IFFALSE 48814
// begin result := i ;
48794: LD_ADDR_VAR 0 5
48798: PUSH
48799: LD_VAR 0 6
48803: ST_TO_ADDR
// distance := tmp ;
48804: LD_ADDR_VAR 0 10
48808: PUSH
48809: LD_VAR 0 9
48813: ST_TO_ADDR
// end ; end ;
48814: GO 48672
48816: POP
48817: POP
// end ;
48818: LD_VAR 0 5
48822: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48823: LD_INT 0
48825: PPUSH
48826: PPUSH
// if not driver or not IsInUnit ( driver ) then
48827: LD_VAR 0 1
48831: NOT
48832: PUSH
48833: LD_VAR 0 1
48837: PPUSH
48838: CALL_OW 310
48842: NOT
48843: OR
48844: IFFALSE 48848
// exit ;
48846: GO 48938
// vehicle := IsInUnit ( driver ) ;
48848: LD_ADDR_VAR 0 3
48852: PUSH
48853: LD_VAR 0 1
48857: PPUSH
48858: CALL_OW 310
48862: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48863: LD_VAR 0 1
48867: PPUSH
48868: LD_STRING \
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: PUSH
48898: LD_STRING E
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_VAR 0 3
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PPUSH
48934: CALL_OW 446
// end ;
48938: LD_VAR 0 2
48942: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48943: LD_INT 0
48945: PPUSH
48946: PPUSH
// if not driver or not IsInUnit ( driver ) then
48947: LD_VAR 0 1
48951: NOT
48952: PUSH
48953: LD_VAR 0 1
48957: PPUSH
48958: CALL_OW 310
48962: NOT
48963: OR
48964: IFFALSE 48968
// exit ;
48966: GO 49058
// vehicle := IsInUnit ( driver ) ;
48968: LD_ADDR_VAR 0 3
48972: PUSH
48973: LD_VAR 0 1
48977: PPUSH
48978: CALL_OW 310
48982: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48983: LD_VAR 0 1
48987: PPUSH
48988: LD_STRING \
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: PUSH
49018: LD_STRING E
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: LD_VAR 0 3
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PPUSH
49054: CALL_OW 447
// end ;
49058: LD_VAR 0 2
49062: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49063: LD_INT 0
49065: PPUSH
49066: PPUSH
49067: PPUSH
// tmp := [ ] ;
49068: LD_ADDR_VAR 0 5
49072: PUSH
49073: EMPTY
49074: ST_TO_ADDR
// for i in units do
49075: LD_ADDR_VAR 0 4
49079: PUSH
49080: LD_VAR 0 1
49084: PUSH
49085: FOR_IN
49086: IFFALSE 49124
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49088: LD_ADDR_VAR 0 5
49092: PUSH
49093: LD_VAR 0 5
49097: PPUSH
49098: LD_VAR 0 5
49102: PUSH
49103: LD_INT 1
49105: PLUS
49106: PPUSH
49107: LD_VAR 0 4
49111: PPUSH
49112: CALL_OW 256
49116: PPUSH
49117: CALL_OW 2
49121: ST_TO_ADDR
49122: GO 49085
49124: POP
49125: POP
// if not tmp then
49126: LD_VAR 0 5
49130: NOT
49131: IFFALSE 49135
// exit ;
49133: GO 49183
// if asc then
49135: LD_VAR 0 2
49139: IFFALSE 49163
// result := SortListByListAsc ( units , tmp ) else
49141: LD_ADDR_VAR 0 3
49145: PUSH
49146: LD_VAR 0 1
49150: PPUSH
49151: LD_VAR 0 5
49155: PPUSH
49156: CALL_OW 76
49160: ST_TO_ADDR
49161: GO 49183
// result := SortListByListDesc ( units , tmp ) ;
49163: LD_ADDR_VAR 0 3
49167: PUSH
49168: LD_VAR 0 1
49172: PPUSH
49173: LD_VAR 0 5
49177: PPUSH
49178: CALL_OW 77
49182: ST_TO_ADDR
// end ;
49183: LD_VAR 0 3
49187: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49188: LD_INT 0
49190: PPUSH
49191: PPUSH
// task := GetTaskList ( mech ) ;
49192: LD_ADDR_VAR 0 4
49196: PUSH
49197: LD_VAR 0 1
49201: PPUSH
49202: CALL_OW 437
49206: ST_TO_ADDR
// if not task then
49207: LD_VAR 0 4
49211: NOT
49212: IFFALSE 49216
// exit ;
49214: GO 49258
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49216: LD_ADDR_VAR 0 3
49220: PUSH
49221: LD_VAR 0 4
49225: PUSH
49226: LD_INT 1
49228: ARRAY
49229: PUSH
49230: LD_INT 1
49232: ARRAY
49233: PUSH
49234: LD_STRING r
49236: EQUAL
49237: PUSH
49238: LD_VAR 0 4
49242: PUSH
49243: LD_INT 1
49245: ARRAY
49246: PUSH
49247: LD_INT 4
49249: ARRAY
49250: PUSH
49251: LD_VAR 0 2
49255: EQUAL
49256: AND
49257: ST_TO_ADDR
// end ;
49258: LD_VAR 0 3
49262: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49263: LD_INT 0
49265: PPUSH
// SetDir ( unit , d ) ;
49266: LD_VAR 0 1
49270: PPUSH
49271: LD_VAR 0 4
49275: PPUSH
49276: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
49280: LD_VAR 0 1
49284: PPUSH
49285: LD_VAR 0 2
49289: PPUSH
49290: LD_VAR 0 3
49294: PPUSH
49295: LD_VAR 0 5
49299: PPUSH
49300: CALL_OW 48
// end ;
49304: LD_VAR 0 6
49308: RET
// export function ToNaturalNumber ( number ) ; begin
49309: LD_INT 0
49311: PPUSH
// result := number div 1 ;
49312: LD_ADDR_VAR 0 2
49316: PUSH
49317: LD_VAR 0 1
49321: PUSH
49322: LD_INT 1
49324: DIV
49325: ST_TO_ADDR
// if number < 0 then
49326: LD_VAR 0 1
49330: PUSH
49331: LD_INT 0
49333: LESS
49334: IFFALSE 49344
// result := 0 ;
49336: LD_ADDR_VAR 0 2
49340: PUSH
49341: LD_INT 0
49343: ST_TO_ADDR
// end ;
49344: LD_VAR 0 2
49348: RET
// export function SortByClass ( units , class ) ; var un ; begin
49349: LD_INT 0
49351: PPUSH
49352: PPUSH
// if not units or not class then
49353: LD_VAR 0 1
49357: NOT
49358: PUSH
49359: LD_VAR 0 2
49363: NOT
49364: OR
49365: IFFALSE 49369
// exit ;
49367: GO 49464
// result := [ ] ;
49369: LD_ADDR_VAR 0 3
49373: PUSH
49374: EMPTY
49375: ST_TO_ADDR
// for un in units do
49376: LD_ADDR_VAR 0 4
49380: PUSH
49381: LD_VAR 0 1
49385: PUSH
49386: FOR_IN
49387: IFFALSE 49462
// if GetClass ( un ) = class then
49389: LD_VAR 0 4
49393: PPUSH
49394: CALL_OW 257
49398: PUSH
49399: LD_VAR 0 2
49403: EQUAL
49404: IFFALSE 49431
// result := Insert ( result , 1 , un ) else
49406: LD_ADDR_VAR 0 3
49410: PUSH
49411: LD_VAR 0 3
49415: PPUSH
49416: LD_INT 1
49418: PPUSH
49419: LD_VAR 0 4
49423: PPUSH
49424: CALL_OW 2
49428: ST_TO_ADDR
49429: GO 49460
// result := Replace ( result , result + 1 , un ) ;
49431: LD_ADDR_VAR 0 3
49435: PUSH
49436: LD_VAR 0 3
49440: PPUSH
49441: LD_VAR 0 3
49445: PUSH
49446: LD_INT 1
49448: PLUS
49449: PPUSH
49450: LD_VAR 0 4
49454: PPUSH
49455: CALL_OW 1
49459: ST_TO_ADDR
49460: GO 49386
49462: POP
49463: POP
// end ;
49464: LD_VAR 0 3
49468: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49469: LD_INT 0
49471: PPUSH
49472: PPUSH
49473: PPUSH
49474: PPUSH
49475: PPUSH
49476: PPUSH
49477: PPUSH
// result := [ ] ;
49478: LD_ADDR_VAR 0 4
49482: PUSH
49483: EMPTY
49484: ST_TO_ADDR
// if x - r < 0 then
49485: LD_VAR 0 1
49489: PUSH
49490: LD_VAR 0 3
49494: MINUS
49495: PUSH
49496: LD_INT 0
49498: LESS
49499: IFFALSE 49511
// min_x := 0 else
49501: LD_ADDR_VAR 0 8
49505: PUSH
49506: LD_INT 0
49508: ST_TO_ADDR
49509: GO 49527
// min_x := x - r ;
49511: LD_ADDR_VAR 0 8
49515: PUSH
49516: LD_VAR 0 1
49520: PUSH
49521: LD_VAR 0 3
49525: MINUS
49526: ST_TO_ADDR
// if y - r < 0 then
49527: LD_VAR 0 2
49531: PUSH
49532: LD_VAR 0 3
49536: MINUS
49537: PUSH
49538: LD_INT 0
49540: LESS
49541: IFFALSE 49553
// min_y := 0 else
49543: LD_ADDR_VAR 0 7
49547: PUSH
49548: LD_INT 0
49550: ST_TO_ADDR
49551: GO 49569
// min_y := y - r ;
49553: LD_ADDR_VAR 0 7
49557: PUSH
49558: LD_VAR 0 2
49562: PUSH
49563: LD_VAR 0 3
49567: MINUS
49568: ST_TO_ADDR
// max_x := x + r ;
49569: LD_ADDR_VAR 0 9
49573: PUSH
49574: LD_VAR 0 1
49578: PUSH
49579: LD_VAR 0 3
49583: PLUS
49584: ST_TO_ADDR
// max_y := y + r ;
49585: LD_ADDR_VAR 0 10
49589: PUSH
49590: LD_VAR 0 2
49594: PUSH
49595: LD_VAR 0 3
49599: PLUS
49600: ST_TO_ADDR
// for _x = min_x to max_x do
49601: LD_ADDR_VAR 0 5
49605: PUSH
49606: DOUBLE
49607: LD_VAR 0 8
49611: DEC
49612: ST_TO_ADDR
49613: LD_VAR 0 9
49617: PUSH
49618: FOR_TO
49619: IFFALSE 49720
// for _y = min_y to max_y do
49621: LD_ADDR_VAR 0 6
49625: PUSH
49626: DOUBLE
49627: LD_VAR 0 7
49631: DEC
49632: ST_TO_ADDR
49633: LD_VAR 0 10
49637: PUSH
49638: FOR_TO
49639: IFFALSE 49716
// begin if not ValidHex ( _x , _y ) then
49641: LD_VAR 0 5
49645: PPUSH
49646: LD_VAR 0 6
49650: PPUSH
49651: CALL_OW 488
49655: NOT
49656: IFFALSE 49660
// continue ;
49658: GO 49638
// if GetResourceTypeXY ( _x , _y ) then
49660: LD_VAR 0 5
49664: PPUSH
49665: LD_VAR 0 6
49669: PPUSH
49670: CALL_OW 283
49674: IFFALSE 49714
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49676: LD_ADDR_VAR 0 4
49680: PUSH
49681: LD_VAR 0 4
49685: PPUSH
49686: LD_VAR 0 4
49690: PUSH
49691: LD_INT 1
49693: PLUS
49694: PPUSH
49695: LD_VAR 0 5
49699: PUSH
49700: LD_VAR 0 6
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PPUSH
49709: CALL_OW 1
49713: ST_TO_ADDR
// end ;
49714: GO 49638
49716: POP
49717: POP
49718: GO 49618
49720: POP
49721: POP
// end ;
49722: LD_VAR 0 4
49726: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49727: LD_INT 0
49729: PPUSH
49730: PPUSH
49731: PPUSH
49732: PPUSH
49733: PPUSH
49734: PPUSH
49735: PPUSH
49736: PPUSH
// if not units then
49737: LD_VAR 0 1
49741: NOT
49742: IFFALSE 49746
// exit ;
49744: GO 50257
// result := UnitFilter ( units , [ f_ok ] ) ;
49746: LD_ADDR_VAR 0 3
49750: PUSH
49751: LD_VAR 0 1
49755: PPUSH
49756: LD_INT 50
49758: PUSH
49759: EMPTY
49760: LIST
49761: PPUSH
49762: CALL_OW 72
49766: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49767: LD_ADDR_VAR 0 8
49771: PUSH
49772: LD_VAR 0 1
49776: PUSH
49777: LD_INT 1
49779: ARRAY
49780: PPUSH
49781: CALL_OW 255
49785: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49786: LD_ADDR_VAR 0 10
49790: PUSH
49791: LD_INT 29
49793: PUSH
49794: LD_EXP 96
49798: PUSH
49799: LD_INT 49
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// if not result then
49807: LD_VAR 0 3
49811: NOT
49812: IFFALSE 49816
// exit ;
49814: GO 50257
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49816: LD_ADDR_VAR 0 5
49820: PUSH
49821: LD_INT 81
49823: PUSH
49824: LD_VAR 0 8
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PPUSH
49833: CALL_OW 69
49837: ST_TO_ADDR
// for i in result do
49838: LD_ADDR_VAR 0 4
49842: PUSH
49843: LD_VAR 0 3
49847: PUSH
49848: FOR_IN
49849: IFFALSE 50255
// begin tag := GetTag ( i ) + 1 ;
49851: LD_ADDR_VAR 0 9
49855: PUSH
49856: LD_VAR 0 4
49860: PPUSH
49861: CALL_OW 110
49865: PUSH
49866: LD_INT 1
49868: PLUS
49869: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
49870: LD_ADDR_VAR 0 7
49874: PUSH
49875: LD_VAR 0 4
49879: PPUSH
49880: CALL_OW 250
49884: PPUSH
49885: LD_VAR 0 4
49889: PPUSH
49890: CALL_OW 251
49894: PPUSH
49895: LD_INT 6
49897: PPUSH
49898: CALL 49469 0 3
49902: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
49903: LD_VAR 0 7
49907: PUSH
49908: LD_VAR 0 4
49912: PPUSH
49913: CALL_OW 264
49917: PUSH
49918: LD_VAR 0 10
49922: IN
49923: NOT
49924: AND
49925: IFFALSE 49964
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49927: LD_VAR 0 4
49931: PPUSH
49932: LD_VAR 0 7
49936: PUSH
49937: LD_INT 1
49939: ARRAY
49940: PUSH
49941: LD_INT 1
49943: ARRAY
49944: PPUSH
49945: LD_VAR 0 7
49949: PUSH
49950: LD_INT 1
49952: ARRAY
49953: PUSH
49954: LD_INT 2
49956: ARRAY
49957: PPUSH
49958: CALL_OW 116
49962: GO 50253
// if path > tag then
49964: LD_VAR 0 2
49968: PUSH
49969: LD_VAR 0 9
49973: GREATER
49974: IFFALSE 50182
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
49976: LD_ADDR_VAR 0 6
49980: PUSH
49981: LD_VAR 0 5
49985: PPUSH
49986: LD_INT 91
49988: PUSH
49989: LD_VAR 0 4
49993: PUSH
49994: LD_INT 12
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: LIST
50001: PPUSH
50002: CALL_OW 72
50006: ST_TO_ADDR
// if nearEnemy then
50007: LD_VAR 0 6
50011: IFFALSE 50080
// begin if GetWeapon ( i ) = ru_time_lapser then
50013: LD_VAR 0 4
50017: PPUSH
50018: CALL_OW 264
50022: PUSH
50023: LD_INT 49
50025: EQUAL
50026: IFFALSE 50054
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50028: LD_VAR 0 4
50032: PPUSH
50033: LD_VAR 0 6
50037: PPUSH
50038: LD_VAR 0 4
50042: PPUSH
50043: CALL_OW 74
50047: PPUSH
50048: CALL_OW 112
50052: GO 50078
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50054: LD_VAR 0 4
50058: PPUSH
50059: LD_VAR 0 6
50063: PPUSH
50064: LD_VAR 0 4
50068: PPUSH
50069: CALL_OW 74
50073: PPUSH
50074: CALL_OW 115
// end else
50078: GO 50180
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50080: LD_VAR 0 4
50084: PPUSH
50085: LD_VAR 0 2
50089: PUSH
50090: LD_VAR 0 9
50094: ARRAY
50095: PUSH
50096: LD_INT 1
50098: ARRAY
50099: PPUSH
50100: LD_VAR 0 2
50104: PUSH
50105: LD_VAR 0 9
50109: ARRAY
50110: PUSH
50111: LD_INT 2
50113: ARRAY
50114: PPUSH
50115: CALL_OW 297
50119: PUSH
50120: LD_INT 6
50122: GREATER
50123: IFFALSE 50166
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50125: LD_VAR 0 4
50129: PPUSH
50130: LD_VAR 0 2
50134: PUSH
50135: LD_VAR 0 9
50139: ARRAY
50140: PUSH
50141: LD_INT 1
50143: ARRAY
50144: PPUSH
50145: LD_VAR 0 2
50149: PUSH
50150: LD_VAR 0 9
50154: ARRAY
50155: PUSH
50156: LD_INT 2
50158: ARRAY
50159: PPUSH
50160: CALL_OW 114
50164: GO 50180
// SetTag ( i , tag ) ;
50166: LD_VAR 0 4
50170: PPUSH
50171: LD_VAR 0 9
50175: PPUSH
50176: CALL_OW 109
// end else
50180: GO 50253
// if enemy then
50182: LD_VAR 0 5
50186: IFFALSE 50253
// begin if GetWeapon ( i ) = ru_time_lapser then
50188: LD_VAR 0 4
50192: PPUSH
50193: CALL_OW 264
50197: PUSH
50198: LD_INT 49
50200: EQUAL
50201: IFFALSE 50229
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50203: LD_VAR 0 4
50207: PPUSH
50208: LD_VAR 0 5
50212: PPUSH
50213: LD_VAR 0 4
50217: PPUSH
50218: CALL_OW 74
50222: PPUSH
50223: CALL_OW 112
50227: GO 50253
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50229: LD_VAR 0 4
50233: PPUSH
50234: LD_VAR 0 5
50238: PPUSH
50239: LD_VAR 0 4
50243: PPUSH
50244: CALL_OW 74
50248: PPUSH
50249: CALL_OW 115
// end ; end ;
50253: GO 49848
50255: POP
50256: POP
// end ;
50257: LD_VAR 0 3
50261: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50262: LD_INT 0
50264: PPUSH
50265: PPUSH
50266: PPUSH
// if not unit or IsInUnit ( unit ) then
50267: LD_VAR 0 1
50271: NOT
50272: PUSH
50273: LD_VAR 0 1
50277: PPUSH
50278: CALL_OW 310
50282: OR
50283: IFFALSE 50287
// exit ;
50285: GO 50378
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50287: LD_ADDR_VAR 0 4
50291: PUSH
50292: LD_VAR 0 1
50296: PPUSH
50297: CALL_OW 250
50301: PPUSH
50302: LD_VAR 0 2
50306: PPUSH
50307: LD_INT 1
50309: PPUSH
50310: CALL_OW 272
50314: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50315: LD_ADDR_VAR 0 5
50319: PUSH
50320: LD_VAR 0 1
50324: PPUSH
50325: CALL_OW 251
50329: PPUSH
50330: LD_VAR 0 2
50334: PPUSH
50335: LD_INT 1
50337: PPUSH
50338: CALL_OW 273
50342: ST_TO_ADDR
// if ValidHex ( x , y ) then
50343: LD_VAR 0 4
50347: PPUSH
50348: LD_VAR 0 5
50352: PPUSH
50353: CALL_OW 488
50357: IFFALSE 50378
// ComTurnXY ( unit , x , y ) ;
50359: LD_VAR 0 1
50363: PPUSH
50364: LD_VAR 0 4
50368: PPUSH
50369: LD_VAR 0 5
50373: PPUSH
50374: CALL_OW 118
// end ;
50378: LD_VAR 0 3
50382: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50383: LD_INT 0
50385: PPUSH
50386: PPUSH
// result := false ;
50387: LD_ADDR_VAR 0 3
50391: PUSH
50392: LD_INT 0
50394: ST_TO_ADDR
// if not units then
50395: LD_VAR 0 2
50399: NOT
50400: IFFALSE 50404
// exit ;
50402: GO 50449
// for i in units do
50404: LD_ADDR_VAR 0 4
50408: PUSH
50409: LD_VAR 0 2
50413: PUSH
50414: FOR_IN
50415: IFFALSE 50447
// if See ( side , i ) then
50417: LD_VAR 0 1
50421: PPUSH
50422: LD_VAR 0 4
50426: PPUSH
50427: CALL_OW 292
50431: IFFALSE 50445
// begin result := true ;
50433: LD_ADDR_VAR 0 3
50437: PUSH
50438: LD_INT 1
50440: ST_TO_ADDR
// exit ;
50441: POP
50442: POP
50443: GO 50449
// end ;
50445: GO 50414
50447: POP
50448: POP
// end ;
50449: LD_VAR 0 3
50453: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50454: LD_INT 0
50456: PPUSH
50457: PPUSH
50458: PPUSH
50459: PPUSH
// if not unit or not points then
50460: LD_VAR 0 1
50464: NOT
50465: PUSH
50466: LD_VAR 0 2
50470: NOT
50471: OR
50472: IFFALSE 50476
// exit ;
50474: GO 50566
// dist := 99999 ;
50476: LD_ADDR_VAR 0 5
50480: PUSH
50481: LD_INT 99999
50483: ST_TO_ADDR
// for i in points do
50484: LD_ADDR_VAR 0 4
50488: PUSH
50489: LD_VAR 0 2
50493: PUSH
50494: FOR_IN
50495: IFFALSE 50564
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50497: LD_ADDR_VAR 0 6
50501: PUSH
50502: LD_VAR 0 1
50506: PPUSH
50507: LD_VAR 0 4
50511: PUSH
50512: LD_INT 1
50514: ARRAY
50515: PPUSH
50516: LD_VAR 0 4
50520: PUSH
50521: LD_INT 2
50523: ARRAY
50524: PPUSH
50525: CALL_OW 297
50529: ST_TO_ADDR
// if tmpDist < dist then
50530: LD_VAR 0 6
50534: PUSH
50535: LD_VAR 0 5
50539: LESS
50540: IFFALSE 50562
// begin result := i ;
50542: LD_ADDR_VAR 0 3
50546: PUSH
50547: LD_VAR 0 4
50551: ST_TO_ADDR
// dist := tmpDist ;
50552: LD_ADDR_VAR 0 5
50556: PUSH
50557: LD_VAR 0 6
50561: ST_TO_ADDR
// end ; end ;
50562: GO 50494
50564: POP
50565: POP
// end ;
50566: LD_VAR 0 3
50570: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50571: LD_INT 0
50573: PPUSH
// uc_side := side ;
50574: LD_ADDR_OWVAR 20
50578: PUSH
50579: LD_VAR 0 1
50583: ST_TO_ADDR
// uc_nation := 3 ;
50584: LD_ADDR_OWVAR 21
50588: PUSH
50589: LD_INT 3
50591: ST_TO_ADDR
// vc_chassis := 25 ;
50592: LD_ADDR_OWVAR 37
50596: PUSH
50597: LD_INT 25
50599: ST_TO_ADDR
// vc_engine := engine_siberite ;
50600: LD_ADDR_OWVAR 39
50604: PUSH
50605: LD_INT 3
50607: ST_TO_ADDR
// vc_control := control_computer ;
50608: LD_ADDR_OWVAR 38
50612: PUSH
50613: LD_INT 3
50615: ST_TO_ADDR
// vc_weapon := 59 ;
50616: LD_ADDR_OWVAR 40
50620: PUSH
50621: LD_INT 59
50623: ST_TO_ADDR
// result := CreateVehicle ;
50624: LD_ADDR_VAR 0 5
50628: PUSH
50629: CALL_OW 45
50633: ST_TO_ADDR
// SetDir ( result , d ) ;
50634: LD_VAR 0 5
50638: PPUSH
50639: LD_VAR 0 4
50643: PPUSH
50644: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50648: LD_VAR 0 5
50652: PPUSH
50653: LD_VAR 0 2
50657: PPUSH
50658: LD_VAR 0 3
50662: PPUSH
50663: LD_INT 0
50665: PPUSH
50666: CALL_OW 48
// end ;
50670: LD_VAR 0 5
50674: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50675: LD_INT 0
50677: PPUSH
50678: PPUSH
50679: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50680: LD_ADDR_VAR 0 2
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50703: LD_VAR 0 1
50707: NOT
50708: PUSH
50709: LD_VAR 0 1
50713: PPUSH
50714: CALL_OW 264
50718: PUSH
50719: LD_INT 12
50721: PUSH
50722: LD_INT 51
50724: PUSH
50725: LD_INT 32
50727: PUSH
50728: LD_EXP 93
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: IN
50739: NOT
50740: OR
50741: IFFALSE 50745
// exit ;
50743: GO 50843
// for i := 1 to 3 do
50745: LD_ADDR_VAR 0 3
50749: PUSH
50750: DOUBLE
50751: LD_INT 1
50753: DEC
50754: ST_TO_ADDR
50755: LD_INT 3
50757: PUSH
50758: FOR_TO
50759: IFFALSE 50841
// begin tmp := GetCargo ( cargo , i ) ;
50761: LD_ADDR_VAR 0 4
50765: PUSH
50766: LD_VAR 0 1
50770: PPUSH
50771: LD_VAR 0 3
50775: PPUSH
50776: CALL_OW 289
50780: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50781: LD_ADDR_VAR 0 2
50785: PUSH
50786: LD_VAR 0 2
50790: PPUSH
50791: LD_VAR 0 3
50795: PPUSH
50796: LD_VAR 0 4
50800: PPUSH
50801: CALL_OW 1
50805: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50806: LD_ADDR_VAR 0 2
50810: PUSH
50811: LD_VAR 0 2
50815: PPUSH
50816: LD_INT 4
50818: PPUSH
50819: LD_VAR 0 2
50823: PUSH
50824: LD_INT 4
50826: ARRAY
50827: PUSH
50828: LD_VAR 0 4
50832: PLUS
50833: PPUSH
50834: CALL_OW 1
50838: ST_TO_ADDR
// end ;
50839: GO 50758
50841: POP
50842: POP
// end ;
50843: LD_VAR 0 2
50847: RET
// export function Length ( array ) ; begin
50848: LD_INT 0
50850: PPUSH
// result := array + 0 ;
50851: LD_ADDR_VAR 0 2
50855: PUSH
50856: LD_VAR 0 1
50860: PUSH
50861: LD_INT 0
50863: PLUS
50864: ST_TO_ADDR
// end ;
50865: LD_VAR 0 2
50869: RET
// export function PrepareBuilding ( side , nation , level , typ , x , y , dir , isInBuildingStage ) ; begin
50870: LD_INT 0
50872: PPUSH
// uc_side := side ;
50873: LD_ADDR_OWVAR 20
50877: PUSH
50878: LD_VAR 0 1
50882: ST_TO_ADDR
// uc_nation := nation ;
50883: LD_ADDR_OWVAR 21
50887: PUSH
50888: LD_VAR 0 2
50892: ST_TO_ADDR
// bc_level := level ;
50893: LD_ADDR_OWVAR 43
50897: PUSH
50898: LD_VAR 0 3
50902: ST_TO_ADDR
// bc_type := typ ;
50903: LD_ADDR_OWVAR 42
50907: PUSH
50908: LD_VAR 0 4
50912: ST_TO_ADDR
// bc_kind1 := - 1 ;
50913: LD_ADDR_OWVAR 44
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: ST_TO_ADDR
// bc_kind2 := - 1 ;
50922: LD_ADDR_OWVAR 45
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: ST_TO_ADDR
// result := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
50931: LD_ADDR_VAR 0 9
50935: PUSH
50936: LD_VAR 0 5
50940: PPUSH
50941: LD_VAR 0 6
50945: PPUSH
50946: LD_VAR 0 7
50950: PPUSH
50951: CALL_OW 47
50955: ST_TO_ADDR
// if isInBuildingStage then
50956: LD_VAR 0 8
50960: IFFALSE 50971
// SetBuildingStage ( result ) ;
50962: LD_VAR 0 9
50966: PPUSH
50967: CALL_OW 593
// end ;
50971: LD_VAR 0 9
50975: RET
// export function SayNoFaceRadio ( un , ident ) ; begin
50976: LD_INT 0
50978: PPUSH
// SayEx ( un , ident , false , true , true , false ) ;
50979: LD_VAR 0 1
50983: PPUSH
50984: LD_VAR 0 2
50988: PPUSH
50989: LD_INT 0
50991: PPUSH
50992: LD_INT 1
50994: PPUSH
50995: LD_INT 1
50997: PPUSH
50998: LD_INT 0
51000: PPUSH
51001: CALL_OW 587
// end ; end_of_file
51005: LD_VAR 0 3
51009: RET
// every 0 0$1 do
51010: GO 51012
51012: DISABLE
// begin enable ;
51013: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
51014: LD_STRING updateTimer(
51016: PUSH
51017: LD_OWVAR 1
51021: STR
51022: PUSH
51023: LD_STRING );
51025: STR
51026: PPUSH
51027: CALL_OW 559
// end ;
51031: END
// export function SOS_MapStart ( ) ; begin
51032: LD_INT 0
51034: PPUSH
// if streamModeActive then
51035: LD_EXP 112
51039: IFFALSE 51048
// DefineStreamItems ( true ) ;
51041: LD_INT 1
51043: PPUSH
51044: CALL 52698 0 1
// UpdateFactoryWaypoints ( ) ;
51048: CALL 66282 0 0
// end ;
51052: LD_VAR 0 1
51056: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51057: LD_INT 0
51059: PPUSH
// if p2 = 100 then
51060: LD_VAR 0 2
51064: PUSH
51065: LD_INT 100
51067: EQUAL
51068: IFFALSE 52071
// begin if not StreamModeActive then
51070: LD_EXP 112
51074: NOT
51075: IFFALSE 51085
// StreamModeActive := true ;
51077: LD_ADDR_EXP 112
51081: PUSH
51082: LD_INT 1
51084: ST_TO_ADDR
// if p3 = 0 then
51085: LD_VAR 0 3
51089: PUSH
51090: LD_INT 0
51092: EQUAL
51093: IFFALSE 51099
// InitStreamMode ;
51095: CALL 52234 0 0
// if p3 = 1 then
51099: LD_VAR 0 3
51103: PUSH
51104: LD_INT 1
51106: EQUAL
51107: IFFALSE 51117
// sRocket := true ;
51109: LD_ADDR_EXP 117
51113: PUSH
51114: LD_INT 1
51116: ST_TO_ADDR
// if p3 = 2 then
51117: LD_VAR 0 3
51121: PUSH
51122: LD_INT 2
51124: EQUAL
51125: IFFALSE 51135
// sSpeed := true ;
51127: LD_ADDR_EXP 116
51131: PUSH
51132: LD_INT 1
51134: ST_TO_ADDR
// if p3 = 3 then
51135: LD_VAR 0 3
51139: PUSH
51140: LD_INT 3
51142: EQUAL
51143: IFFALSE 51153
// sEngine := true ;
51145: LD_ADDR_EXP 118
51149: PUSH
51150: LD_INT 1
51152: ST_TO_ADDR
// if p3 = 4 then
51153: LD_VAR 0 3
51157: PUSH
51158: LD_INT 4
51160: EQUAL
51161: IFFALSE 51171
// sSpec := true ;
51163: LD_ADDR_EXP 115
51167: PUSH
51168: LD_INT 1
51170: ST_TO_ADDR
// if p3 = 5 then
51171: LD_VAR 0 3
51175: PUSH
51176: LD_INT 5
51178: EQUAL
51179: IFFALSE 51189
// sLevel := true ;
51181: LD_ADDR_EXP 119
51185: PUSH
51186: LD_INT 1
51188: ST_TO_ADDR
// if p3 = 6 then
51189: LD_VAR 0 3
51193: PUSH
51194: LD_INT 6
51196: EQUAL
51197: IFFALSE 51207
// sArmoury := true ;
51199: LD_ADDR_EXP 120
51203: PUSH
51204: LD_INT 1
51206: ST_TO_ADDR
// if p3 = 7 then
51207: LD_VAR 0 3
51211: PUSH
51212: LD_INT 7
51214: EQUAL
51215: IFFALSE 51225
// sRadar := true ;
51217: LD_ADDR_EXP 121
51221: PUSH
51222: LD_INT 1
51224: ST_TO_ADDR
// if p3 = 8 then
51225: LD_VAR 0 3
51229: PUSH
51230: LD_INT 8
51232: EQUAL
51233: IFFALSE 51243
// sBunker := true ;
51235: LD_ADDR_EXP 122
51239: PUSH
51240: LD_INT 1
51242: ST_TO_ADDR
// if p3 = 9 then
51243: LD_VAR 0 3
51247: PUSH
51248: LD_INT 9
51250: EQUAL
51251: IFFALSE 51261
// sHack := true ;
51253: LD_ADDR_EXP 123
51257: PUSH
51258: LD_INT 1
51260: ST_TO_ADDR
// if p3 = 10 then
51261: LD_VAR 0 3
51265: PUSH
51266: LD_INT 10
51268: EQUAL
51269: IFFALSE 51279
// sFire := true ;
51271: LD_ADDR_EXP 124
51275: PUSH
51276: LD_INT 1
51278: ST_TO_ADDR
// if p3 = 11 then
51279: LD_VAR 0 3
51283: PUSH
51284: LD_INT 11
51286: EQUAL
51287: IFFALSE 51297
// sRefresh := true ;
51289: LD_ADDR_EXP 125
51293: PUSH
51294: LD_INT 1
51296: ST_TO_ADDR
// if p3 = 12 then
51297: LD_VAR 0 3
51301: PUSH
51302: LD_INT 12
51304: EQUAL
51305: IFFALSE 51315
// sExp := true ;
51307: LD_ADDR_EXP 126
51311: PUSH
51312: LD_INT 1
51314: ST_TO_ADDR
// if p3 = 13 then
51315: LD_VAR 0 3
51319: PUSH
51320: LD_INT 13
51322: EQUAL
51323: IFFALSE 51333
// sDepot := true ;
51325: LD_ADDR_EXP 127
51329: PUSH
51330: LD_INT 1
51332: ST_TO_ADDR
// if p3 = 14 then
51333: LD_VAR 0 3
51337: PUSH
51338: LD_INT 14
51340: EQUAL
51341: IFFALSE 51351
// sFlag := true ;
51343: LD_ADDR_EXP 128
51347: PUSH
51348: LD_INT 1
51350: ST_TO_ADDR
// if p3 = 15 then
51351: LD_VAR 0 3
51355: PUSH
51356: LD_INT 15
51358: EQUAL
51359: IFFALSE 51369
// sKamikadze := true ;
51361: LD_ADDR_EXP 136
51365: PUSH
51366: LD_INT 1
51368: ST_TO_ADDR
// if p3 = 16 then
51369: LD_VAR 0 3
51373: PUSH
51374: LD_INT 16
51376: EQUAL
51377: IFFALSE 51387
// sTroll := true ;
51379: LD_ADDR_EXP 137
51383: PUSH
51384: LD_INT 1
51386: ST_TO_ADDR
// if p3 = 17 then
51387: LD_VAR 0 3
51391: PUSH
51392: LD_INT 17
51394: EQUAL
51395: IFFALSE 51405
// sSlow := true ;
51397: LD_ADDR_EXP 138
51401: PUSH
51402: LD_INT 1
51404: ST_TO_ADDR
// if p3 = 18 then
51405: LD_VAR 0 3
51409: PUSH
51410: LD_INT 18
51412: EQUAL
51413: IFFALSE 51423
// sLack := true ;
51415: LD_ADDR_EXP 139
51419: PUSH
51420: LD_INT 1
51422: ST_TO_ADDR
// if p3 = 19 then
51423: LD_VAR 0 3
51427: PUSH
51428: LD_INT 19
51430: EQUAL
51431: IFFALSE 51441
// sTank := true ;
51433: LD_ADDR_EXP 141
51437: PUSH
51438: LD_INT 1
51440: ST_TO_ADDR
// if p3 = 20 then
51441: LD_VAR 0 3
51445: PUSH
51446: LD_INT 20
51448: EQUAL
51449: IFFALSE 51459
// sRemote := true ;
51451: LD_ADDR_EXP 142
51455: PUSH
51456: LD_INT 1
51458: ST_TO_ADDR
// if p3 = 21 then
51459: LD_VAR 0 3
51463: PUSH
51464: LD_INT 21
51466: EQUAL
51467: IFFALSE 51477
// sPowell := true ;
51469: LD_ADDR_EXP 143
51473: PUSH
51474: LD_INT 1
51476: ST_TO_ADDR
// if p3 = 22 then
51477: LD_VAR 0 3
51481: PUSH
51482: LD_INT 22
51484: EQUAL
51485: IFFALSE 51495
// sTeleport := true ;
51487: LD_ADDR_EXP 146
51491: PUSH
51492: LD_INT 1
51494: ST_TO_ADDR
// if p3 = 23 then
51495: LD_VAR 0 3
51499: PUSH
51500: LD_INT 23
51502: EQUAL
51503: IFFALSE 51513
// sOilTower := true ;
51505: LD_ADDR_EXP 148
51509: PUSH
51510: LD_INT 1
51512: ST_TO_ADDR
// if p3 = 24 then
51513: LD_VAR 0 3
51517: PUSH
51518: LD_INT 24
51520: EQUAL
51521: IFFALSE 51531
// sShovel := true ;
51523: LD_ADDR_EXP 149
51527: PUSH
51528: LD_INT 1
51530: ST_TO_ADDR
// if p3 = 25 then
51531: LD_VAR 0 3
51535: PUSH
51536: LD_INT 25
51538: EQUAL
51539: IFFALSE 51549
// sSheik := true ;
51541: LD_ADDR_EXP 150
51545: PUSH
51546: LD_INT 1
51548: ST_TO_ADDR
// if p3 = 26 then
51549: LD_VAR 0 3
51553: PUSH
51554: LD_INT 26
51556: EQUAL
51557: IFFALSE 51567
// sEarthquake := true ;
51559: LD_ADDR_EXP 152
51563: PUSH
51564: LD_INT 1
51566: ST_TO_ADDR
// if p3 = 27 then
51567: LD_VAR 0 3
51571: PUSH
51572: LD_INT 27
51574: EQUAL
51575: IFFALSE 51585
// sAI := true ;
51577: LD_ADDR_EXP 153
51581: PUSH
51582: LD_INT 1
51584: ST_TO_ADDR
// if p3 = 28 then
51585: LD_VAR 0 3
51589: PUSH
51590: LD_INT 28
51592: EQUAL
51593: IFFALSE 51603
// sCargo := true ;
51595: LD_ADDR_EXP 156
51599: PUSH
51600: LD_INT 1
51602: ST_TO_ADDR
// if p3 = 29 then
51603: LD_VAR 0 3
51607: PUSH
51608: LD_INT 29
51610: EQUAL
51611: IFFALSE 51621
// sDLaser := true ;
51613: LD_ADDR_EXP 157
51617: PUSH
51618: LD_INT 1
51620: ST_TO_ADDR
// if p3 = 30 then
51621: LD_VAR 0 3
51625: PUSH
51626: LD_INT 30
51628: EQUAL
51629: IFFALSE 51639
// sExchange := true ;
51631: LD_ADDR_EXP 158
51635: PUSH
51636: LD_INT 1
51638: ST_TO_ADDR
// if p3 = 31 then
51639: LD_VAR 0 3
51643: PUSH
51644: LD_INT 31
51646: EQUAL
51647: IFFALSE 51657
// sFac := true ;
51649: LD_ADDR_EXP 159
51653: PUSH
51654: LD_INT 1
51656: ST_TO_ADDR
// if p3 = 32 then
51657: LD_VAR 0 3
51661: PUSH
51662: LD_INT 32
51664: EQUAL
51665: IFFALSE 51675
// sPower := true ;
51667: LD_ADDR_EXP 160
51671: PUSH
51672: LD_INT 1
51674: ST_TO_ADDR
// if p3 = 33 then
51675: LD_VAR 0 3
51679: PUSH
51680: LD_INT 33
51682: EQUAL
51683: IFFALSE 51693
// sRandom := true ;
51685: LD_ADDR_EXP 161
51689: PUSH
51690: LD_INT 1
51692: ST_TO_ADDR
// if p3 = 34 then
51693: LD_VAR 0 3
51697: PUSH
51698: LD_INT 34
51700: EQUAL
51701: IFFALSE 51711
// sShield := true ;
51703: LD_ADDR_EXP 162
51707: PUSH
51708: LD_INT 1
51710: ST_TO_ADDR
// if p3 = 35 then
51711: LD_VAR 0 3
51715: PUSH
51716: LD_INT 35
51718: EQUAL
51719: IFFALSE 51729
// sTime := true ;
51721: LD_ADDR_EXP 163
51725: PUSH
51726: LD_INT 1
51728: ST_TO_ADDR
// if p3 = 36 then
51729: LD_VAR 0 3
51733: PUSH
51734: LD_INT 36
51736: EQUAL
51737: IFFALSE 51747
// sTools := true ;
51739: LD_ADDR_EXP 164
51743: PUSH
51744: LD_INT 1
51746: ST_TO_ADDR
// if p3 = 101 then
51747: LD_VAR 0 3
51751: PUSH
51752: LD_INT 101
51754: EQUAL
51755: IFFALSE 51765
// sSold := true ;
51757: LD_ADDR_EXP 129
51761: PUSH
51762: LD_INT 1
51764: ST_TO_ADDR
// if p3 = 102 then
51765: LD_VAR 0 3
51769: PUSH
51770: LD_INT 102
51772: EQUAL
51773: IFFALSE 51783
// sDiff := true ;
51775: LD_ADDR_EXP 130
51779: PUSH
51780: LD_INT 1
51782: ST_TO_ADDR
// if p3 = 103 then
51783: LD_VAR 0 3
51787: PUSH
51788: LD_INT 103
51790: EQUAL
51791: IFFALSE 51801
// sFog := true ;
51793: LD_ADDR_EXP 133
51797: PUSH
51798: LD_INT 1
51800: ST_TO_ADDR
// if p3 = 104 then
51801: LD_VAR 0 3
51805: PUSH
51806: LD_INT 104
51808: EQUAL
51809: IFFALSE 51819
// sReset := true ;
51811: LD_ADDR_EXP 134
51815: PUSH
51816: LD_INT 1
51818: ST_TO_ADDR
// if p3 = 105 then
51819: LD_VAR 0 3
51823: PUSH
51824: LD_INT 105
51826: EQUAL
51827: IFFALSE 51837
// sSun := true ;
51829: LD_ADDR_EXP 135
51833: PUSH
51834: LD_INT 1
51836: ST_TO_ADDR
// if p3 = 106 then
51837: LD_VAR 0 3
51841: PUSH
51842: LD_INT 106
51844: EQUAL
51845: IFFALSE 51855
// sTiger := true ;
51847: LD_ADDR_EXP 131
51851: PUSH
51852: LD_INT 1
51854: ST_TO_ADDR
// if p3 = 107 then
51855: LD_VAR 0 3
51859: PUSH
51860: LD_INT 107
51862: EQUAL
51863: IFFALSE 51873
// sBomb := true ;
51865: LD_ADDR_EXP 132
51869: PUSH
51870: LD_INT 1
51872: ST_TO_ADDR
// if p3 = 108 then
51873: LD_VAR 0 3
51877: PUSH
51878: LD_INT 108
51880: EQUAL
51881: IFFALSE 51891
// sWound := true ;
51883: LD_ADDR_EXP 140
51887: PUSH
51888: LD_INT 1
51890: ST_TO_ADDR
// if p3 = 109 then
51891: LD_VAR 0 3
51895: PUSH
51896: LD_INT 109
51898: EQUAL
51899: IFFALSE 51909
// sBetray := true ;
51901: LD_ADDR_EXP 144
51905: PUSH
51906: LD_INT 1
51908: ST_TO_ADDR
// if p3 = 110 then
51909: LD_VAR 0 3
51913: PUSH
51914: LD_INT 110
51916: EQUAL
51917: IFFALSE 51927
// sContamin := true ;
51919: LD_ADDR_EXP 145
51923: PUSH
51924: LD_INT 1
51926: ST_TO_ADDR
// if p3 = 111 then
51927: LD_VAR 0 3
51931: PUSH
51932: LD_INT 111
51934: EQUAL
51935: IFFALSE 51945
// sOil := true ;
51937: LD_ADDR_EXP 147
51941: PUSH
51942: LD_INT 1
51944: ST_TO_ADDR
// if p3 = 112 then
51945: LD_VAR 0 3
51949: PUSH
51950: LD_INT 112
51952: EQUAL
51953: IFFALSE 51963
// sStu := true ;
51955: LD_ADDR_EXP 151
51959: PUSH
51960: LD_INT 1
51962: ST_TO_ADDR
// if p3 = 113 then
51963: LD_VAR 0 3
51967: PUSH
51968: LD_INT 113
51970: EQUAL
51971: IFFALSE 51981
// sBazooka := true ;
51973: LD_ADDR_EXP 154
51977: PUSH
51978: LD_INT 1
51980: ST_TO_ADDR
// if p3 = 114 then
51981: LD_VAR 0 3
51985: PUSH
51986: LD_INT 114
51988: EQUAL
51989: IFFALSE 51999
// sMortar := true ;
51991: LD_ADDR_EXP 155
51995: PUSH
51996: LD_INT 1
51998: ST_TO_ADDR
// if p3 = 115 then
51999: LD_VAR 0 3
52003: PUSH
52004: LD_INT 115
52006: EQUAL
52007: IFFALSE 52017
// sRanger := true ;
52009: LD_ADDR_EXP 165
52013: PUSH
52014: LD_INT 1
52016: ST_TO_ADDR
// if p3 = 116 then
52017: LD_VAR 0 3
52021: PUSH
52022: LD_INT 116
52024: EQUAL
52025: IFFALSE 52035
// sComputer := true ;
52027: LD_ADDR_EXP 166
52031: PUSH
52032: LD_INT 1
52034: ST_TO_ADDR
// if p3 = 117 then
52035: LD_VAR 0 3
52039: PUSH
52040: LD_INT 117
52042: EQUAL
52043: IFFALSE 52053
// s30 := true ;
52045: LD_ADDR_EXP 167
52049: PUSH
52050: LD_INT 1
52052: ST_TO_ADDR
// if p3 = 118 then
52053: LD_VAR 0 3
52057: PUSH
52058: LD_INT 118
52060: EQUAL
52061: IFFALSE 52071
// s60 := true ;
52063: LD_ADDR_EXP 168
52067: PUSH
52068: LD_INT 1
52070: ST_TO_ADDR
// end ; if p2 = 101 then
52071: LD_VAR 0 2
52075: PUSH
52076: LD_INT 101
52078: EQUAL
52079: IFFALSE 52207
// begin case p3 of 1 :
52081: LD_VAR 0 3
52085: PUSH
52086: LD_INT 1
52088: DOUBLE
52089: EQUAL
52090: IFTRUE 52094
52092: GO 52101
52094: POP
// hHackUnlimitedResources ; 2 :
52095: CALL 64305 0 0
52099: GO 52207
52101: LD_INT 2
52103: DOUBLE
52104: EQUAL
52105: IFTRUE 52109
52107: GO 52116
52109: POP
// hHackSetLevel10 ; 3 :
52110: CALL 64438 0 0
52114: GO 52207
52116: LD_INT 3
52118: DOUBLE
52119: EQUAL
52120: IFTRUE 52124
52122: GO 52131
52124: POP
// hHackSetLevel10YourUnits ; 4 :
52125: CALL 64523 0 0
52129: GO 52207
52131: LD_INT 4
52133: DOUBLE
52134: EQUAL
52135: IFTRUE 52139
52137: GO 52146
52139: POP
// hHackInvincible ; 5 :
52140: CALL 64971 0 0
52144: GO 52207
52146: LD_INT 5
52148: DOUBLE
52149: EQUAL
52150: IFTRUE 52154
52152: GO 52161
52154: POP
// hHackInvisible ; 6 :
52155: CALL 65082 0 0
52159: GO 52207
52161: LD_INT 6
52163: DOUBLE
52164: EQUAL
52165: IFTRUE 52169
52167: GO 52176
52169: POP
// hHackChangeYourSide ; 7 :
52170: CALL 65139 0 0
52174: GO 52207
52176: LD_INT 7
52178: DOUBLE
52179: EQUAL
52180: IFTRUE 52184
52182: GO 52191
52184: POP
// hHackChangeUnitSide ; 8 :
52185: CALL 65181 0 0
52189: GO 52207
52191: LD_INT 8
52193: DOUBLE
52194: EQUAL
52195: IFTRUE 52199
52197: GO 52206
52199: POP
// hHackFog ; end ;
52200: CALL 65282 0 0
52204: GO 52207
52206: POP
// end ; end ;
52207: LD_VAR 0 7
52211: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
52212: GO 52214
52214: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
52215: LD_STRING initStreamRollete();
52217: PPUSH
52218: CALL_OW 559
// InitStreamMode ;
52222: CALL 52234 0 0
// DefineStreamItems ( false ) ;
52226: LD_INT 0
52228: PPUSH
52229: CALL 52698 0 1
// end ;
52233: END
// function InitStreamMode ; begin
52234: LD_INT 0
52236: PPUSH
// streamModeActive := false ;
52237: LD_ADDR_EXP 112
52241: PUSH
52242: LD_INT 0
52244: ST_TO_ADDR
// normalCounter := 36 ;
52245: LD_ADDR_EXP 113
52249: PUSH
52250: LD_INT 36
52252: ST_TO_ADDR
// hardcoreCounter := 18 ;
52253: LD_ADDR_EXP 114
52257: PUSH
52258: LD_INT 18
52260: ST_TO_ADDR
// sRocket := false ;
52261: LD_ADDR_EXP 117
52265: PUSH
52266: LD_INT 0
52268: ST_TO_ADDR
// sSpeed := false ;
52269: LD_ADDR_EXP 116
52273: PUSH
52274: LD_INT 0
52276: ST_TO_ADDR
// sEngine := false ;
52277: LD_ADDR_EXP 118
52281: PUSH
52282: LD_INT 0
52284: ST_TO_ADDR
// sSpec := false ;
52285: LD_ADDR_EXP 115
52289: PUSH
52290: LD_INT 0
52292: ST_TO_ADDR
// sLevel := false ;
52293: LD_ADDR_EXP 119
52297: PUSH
52298: LD_INT 0
52300: ST_TO_ADDR
// sArmoury := false ;
52301: LD_ADDR_EXP 120
52305: PUSH
52306: LD_INT 0
52308: ST_TO_ADDR
// sRadar := false ;
52309: LD_ADDR_EXP 121
52313: PUSH
52314: LD_INT 0
52316: ST_TO_ADDR
// sBunker := false ;
52317: LD_ADDR_EXP 122
52321: PUSH
52322: LD_INT 0
52324: ST_TO_ADDR
// sHack := false ;
52325: LD_ADDR_EXP 123
52329: PUSH
52330: LD_INT 0
52332: ST_TO_ADDR
// sFire := false ;
52333: LD_ADDR_EXP 124
52337: PUSH
52338: LD_INT 0
52340: ST_TO_ADDR
// sRefresh := false ;
52341: LD_ADDR_EXP 125
52345: PUSH
52346: LD_INT 0
52348: ST_TO_ADDR
// sExp := false ;
52349: LD_ADDR_EXP 126
52353: PUSH
52354: LD_INT 0
52356: ST_TO_ADDR
// sDepot := false ;
52357: LD_ADDR_EXP 127
52361: PUSH
52362: LD_INT 0
52364: ST_TO_ADDR
// sFlag := false ;
52365: LD_ADDR_EXP 128
52369: PUSH
52370: LD_INT 0
52372: ST_TO_ADDR
// sKamikadze := false ;
52373: LD_ADDR_EXP 136
52377: PUSH
52378: LD_INT 0
52380: ST_TO_ADDR
// sTroll := false ;
52381: LD_ADDR_EXP 137
52385: PUSH
52386: LD_INT 0
52388: ST_TO_ADDR
// sSlow := false ;
52389: LD_ADDR_EXP 138
52393: PUSH
52394: LD_INT 0
52396: ST_TO_ADDR
// sLack := false ;
52397: LD_ADDR_EXP 139
52401: PUSH
52402: LD_INT 0
52404: ST_TO_ADDR
// sTank := false ;
52405: LD_ADDR_EXP 141
52409: PUSH
52410: LD_INT 0
52412: ST_TO_ADDR
// sRemote := false ;
52413: LD_ADDR_EXP 142
52417: PUSH
52418: LD_INT 0
52420: ST_TO_ADDR
// sPowell := false ;
52421: LD_ADDR_EXP 143
52425: PUSH
52426: LD_INT 0
52428: ST_TO_ADDR
// sTeleport := false ;
52429: LD_ADDR_EXP 146
52433: PUSH
52434: LD_INT 0
52436: ST_TO_ADDR
// sOilTower := false ;
52437: LD_ADDR_EXP 148
52441: PUSH
52442: LD_INT 0
52444: ST_TO_ADDR
// sShovel := false ;
52445: LD_ADDR_EXP 149
52449: PUSH
52450: LD_INT 0
52452: ST_TO_ADDR
// sSheik := false ;
52453: LD_ADDR_EXP 150
52457: PUSH
52458: LD_INT 0
52460: ST_TO_ADDR
// sEarthquake := false ;
52461: LD_ADDR_EXP 152
52465: PUSH
52466: LD_INT 0
52468: ST_TO_ADDR
// sAI := false ;
52469: LD_ADDR_EXP 153
52473: PUSH
52474: LD_INT 0
52476: ST_TO_ADDR
// sCargo := false ;
52477: LD_ADDR_EXP 156
52481: PUSH
52482: LD_INT 0
52484: ST_TO_ADDR
// sDLaser := false ;
52485: LD_ADDR_EXP 157
52489: PUSH
52490: LD_INT 0
52492: ST_TO_ADDR
// sExchange := false ;
52493: LD_ADDR_EXP 158
52497: PUSH
52498: LD_INT 0
52500: ST_TO_ADDR
// sFac := false ;
52501: LD_ADDR_EXP 159
52505: PUSH
52506: LD_INT 0
52508: ST_TO_ADDR
// sPower := false ;
52509: LD_ADDR_EXP 160
52513: PUSH
52514: LD_INT 0
52516: ST_TO_ADDR
// sRandom := false ;
52517: LD_ADDR_EXP 161
52521: PUSH
52522: LD_INT 0
52524: ST_TO_ADDR
// sShield := false ;
52525: LD_ADDR_EXP 162
52529: PUSH
52530: LD_INT 0
52532: ST_TO_ADDR
// sTime := false ;
52533: LD_ADDR_EXP 163
52537: PUSH
52538: LD_INT 0
52540: ST_TO_ADDR
// sTools := false ;
52541: LD_ADDR_EXP 164
52545: PUSH
52546: LD_INT 0
52548: ST_TO_ADDR
// sSold := false ;
52549: LD_ADDR_EXP 129
52553: PUSH
52554: LD_INT 0
52556: ST_TO_ADDR
// sDiff := false ;
52557: LD_ADDR_EXP 130
52561: PUSH
52562: LD_INT 0
52564: ST_TO_ADDR
// sFog := false ;
52565: LD_ADDR_EXP 133
52569: PUSH
52570: LD_INT 0
52572: ST_TO_ADDR
// sReset := false ;
52573: LD_ADDR_EXP 134
52577: PUSH
52578: LD_INT 0
52580: ST_TO_ADDR
// sSun := false ;
52581: LD_ADDR_EXP 135
52585: PUSH
52586: LD_INT 0
52588: ST_TO_ADDR
// sTiger := false ;
52589: LD_ADDR_EXP 131
52593: PUSH
52594: LD_INT 0
52596: ST_TO_ADDR
// sBomb := false ;
52597: LD_ADDR_EXP 132
52601: PUSH
52602: LD_INT 0
52604: ST_TO_ADDR
// sWound := false ;
52605: LD_ADDR_EXP 140
52609: PUSH
52610: LD_INT 0
52612: ST_TO_ADDR
// sBetray := false ;
52613: LD_ADDR_EXP 144
52617: PUSH
52618: LD_INT 0
52620: ST_TO_ADDR
// sContamin := false ;
52621: LD_ADDR_EXP 145
52625: PUSH
52626: LD_INT 0
52628: ST_TO_ADDR
// sOil := false ;
52629: LD_ADDR_EXP 147
52633: PUSH
52634: LD_INT 0
52636: ST_TO_ADDR
// sStu := false ;
52637: LD_ADDR_EXP 151
52641: PUSH
52642: LD_INT 0
52644: ST_TO_ADDR
// sBazooka := false ;
52645: LD_ADDR_EXP 154
52649: PUSH
52650: LD_INT 0
52652: ST_TO_ADDR
// sMortar := false ;
52653: LD_ADDR_EXP 155
52657: PUSH
52658: LD_INT 0
52660: ST_TO_ADDR
// sRanger := false ;
52661: LD_ADDR_EXP 165
52665: PUSH
52666: LD_INT 0
52668: ST_TO_ADDR
// sComputer := false ;
52669: LD_ADDR_EXP 166
52673: PUSH
52674: LD_INT 0
52676: ST_TO_ADDR
// s30 := false ;
52677: LD_ADDR_EXP 167
52681: PUSH
52682: LD_INT 0
52684: ST_TO_ADDR
// s60 := false ;
52685: LD_ADDR_EXP 168
52689: PUSH
52690: LD_INT 0
52692: ST_TO_ADDR
// end ;
52693: LD_VAR 0 1
52697: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52698: LD_INT 0
52700: PPUSH
52701: PPUSH
52702: PPUSH
52703: PPUSH
52704: PPUSH
52705: PPUSH
52706: PPUSH
// result := [ ] ;
52707: LD_ADDR_VAR 0 2
52711: PUSH
52712: EMPTY
52713: ST_TO_ADDR
// if campaign_id = 1 then
52714: LD_OWVAR 69
52718: PUSH
52719: LD_INT 1
52721: EQUAL
52722: IFFALSE 55888
// begin case mission_number of 1 :
52724: LD_OWVAR 70
52728: PUSH
52729: LD_INT 1
52731: DOUBLE
52732: EQUAL
52733: IFTRUE 52737
52735: GO 52813
52737: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52738: LD_ADDR_VAR 0 2
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: LD_INT 4
52748: PUSH
52749: LD_INT 11
52751: PUSH
52752: LD_INT 12
52754: PUSH
52755: LD_INT 15
52757: PUSH
52758: LD_INT 16
52760: PUSH
52761: LD_INT 22
52763: PUSH
52764: LD_INT 23
52766: PUSH
52767: LD_INT 26
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 101
52783: PUSH
52784: LD_INT 102
52786: PUSH
52787: LD_INT 106
52789: PUSH
52790: LD_INT 116
52792: PUSH
52793: LD_INT 117
52795: PUSH
52796: LD_INT 118
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: ST_TO_ADDR
52811: GO 55886
52813: LD_INT 2
52815: DOUBLE
52816: EQUAL
52817: IFTRUE 52821
52819: GO 52905
52821: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52822: LD_ADDR_VAR 0 2
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: LD_INT 4
52832: PUSH
52833: LD_INT 11
52835: PUSH
52836: LD_INT 12
52838: PUSH
52839: LD_INT 15
52841: PUSH
52842: LD_INT 16
52844: PUSH
52845: LD_INT 22
52847: PUSH
52848: LD_INT 23
52850: PUSH
52851: LD_INT 26
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 101
52867: PUSH
52868: LD_INT 102
52870: PUSH
52871: LD_INT 105
52873: PUSH
52874: LD_INT 106
52876: PUSH
52877: LD_INT 108
52879: PUSH
52880: LD_INT 116
52882: PUSH
52883: LD_INT 117
52885: PUSH
52886: LD_INT 118
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: ST_TO_ADDR
52903: GO 55886
52905: LD_INT 3
52907: DOUBLE
52908: EQUAL
52909: IFTRUE 52913
52911: GO 53001
52913: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52914: LD_ADDR_VAR 0 2
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 4
52924: PUSH
52925: LD_INT 5
52927: PUSH
52928: LD_INT 11
52930: PUSH
52931: LD_INT 12
52933: PUSH
52934: LD_INT 15
52936: PUSH
52937: LD_INT 16
52939: PUSH
52940: LD_INT 22
52942: PUSH
52943: LD_INT 26
52945: PUSH
52946: LD_INT 36
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 101
52963: PUSH
52964: LD_INT 102
52966: PUSH
52967: LD_INT 105
52969: PUSH
52970: LD_INT 106
52972: PUSH
52973: LD_INT 108
52975: PUSH
52976: LD_INT 116
52978: PUSH
52979: LD_INT 117
52981: PUSH
52982: LD_INT 118
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: ST_TO_ADDR
52999: GO 55886
53001: LD_INT 4
53003: DOUBLE
53004: EQUAL
53005: IFTRUE 53009
53007: GO 53105
53009: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53010: LD_ADDR_VAR 0 2
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: LD_INT 4
53020: PUSH
53021: LD_INT 5
53023: PUSH
53024: LD_INT 8
53026: PUSH
53027: LD_INT 11
53029: PUSH
53030: LD_INT 12
53032: PUSH
53033: LD_INT 15
53035: PUSH
53036: LD_INT 16
53038: PUSH
53039: LD_INT 22
53041: PUSH
53042: LD_INT 23
53044: PUSH
53045: LD_INT 26
53047: PUSH
53048: LD_INT 36
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 101
53067: PUSH
53068: LD_INT 102
53070: PUSH
53071: LD_INT 105
53073: PUSH
53074: LD_INT 106
53076: PUSH
53077: LD_INT 108
53079: PUSH
53080: LD_INT 116
53082: PUSH
53083: LD_INT 117
53085: PUSH
53086: LD_INT 118
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: ST_TO_ADDR
53103: GO 55886
53105: LD_INT 5
53107: DOUBLE
53108: EQUAL
53109: IFTRUE 53113
53111: GO 53225
53113: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53114: LD_ADDR_VAR 0 2
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 4
53124: PUSH
53125: LD_INT 5
53127: PUSH
53128: LD_INT 6
53130: PUSH
53131: LD_INT 8
53133: PUSH
53134: LD_INT 11
53136: PUSH
53137: LD_INT 12
53139: PUSH
53140: LD_INT 15
53142: PUSH
53143: LD_INT 16
53145: PUSH
53146: LD_INT 22
53148: PUSH
53149: LD_INT 23
53151: PUSH
53152: LD_INT 25
53154: PUSH
53155: LD_INT 26
53157: PUSH
53158: LD_INT 36
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 101
53179: PUSH
53180: LD_INT 102
53182: PUSH
53183: LD_INT 105
53185: PUSH
53186: LD_INT 106
53188: PUSH
53189: LD_INT 108
53191: PUSH
53192: LD_INT 109
53194: PUSH
53195: LD_INT 112
53197: PUSH
53198: LD_INT 116
53200: PUSH
53201: LD_INT 117
53203: PUSH
53204: LD_INT 118
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: ST_TO_ADDR
53223: GO 55886
53225: LD_INT 6
53227: DOUBLE
53228: EQUAL
53229: IFTRUE 53233
53231: GO 53365
53233: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
53234: LD_ADDR_VAR 0 2
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: LD_INT 4
53244: PUSH
53245: LD_INT 5
53247: PUSH
53248: LD_INT 6
53250: PUSH
53251: LD_INT 8
53253: PUSH
53254: LD_INT 11
53256: PUSH
53257: LD_INT 12
53259: PUSH
53260: LD_INT 15
53262: PUSH
53263: LD_INT 16
53265: PUSH
53266: LD_INT 20
53268: PUSH
53269: LD_INT 21
53271: PUSH
53272: LD_INT 22
53274: PUSH
53275: LD_INT 23
53277: PUSH
53278: LD_INT 25
53280: PUSH
53281: LD_INT 26
53283: PUSH
53284: LD_INT 30
53286: PUSH
53287: LD_INT 31
53289: PUSH
53290: LD_INT 32
53292: PUSH
53293: LD_INT 36
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 101
53319: PUSH
53320: LD_INT 102
53322: PUSH
53323: LD_INT 105
53325: PUSH
53326: LD_INT 106
53328: PUSH
53329: LD_INT 108
53331: PUSH
53332: LD_INT 109
53334: PUSH
53335: LD_INT 112
53337: PUSH
53338: LD_INT 116
53340: PUSH
53341: LD_INT 117
53343: PUSH
53344: LD_INT 118
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: ST_TO_ADDR
53363: GO 55886
53365: LD_INT 7
53367: DOUBLE
53368: EQUAL
53369: IFTRUE 53373
53371: GO 53485
53373: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
53374: LD_ADDR_VAR 0 2
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 4
53384: PUSH
53385: LD_INT 5
53387: PUSH
53388: LD_INT 7
53390: PUSH
53391: LD_INT 11
53393: PUSH
53394: LD_INT 12
53396: PUSH
53397: LD_INT 15
53399: PUSH
53400: LD_INT 16
53402: PUSH
53403: LD_INT 20
53405: PUSH
53406: LD_INT 21
53408: PUSH
53409: LD_INT 22
53411: PUSH
53412: LD_INT 23
53414: PUSH
53415: LD_INT 25
53417: PUSH
53418: LD_INT 26
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 101
53439: PUSH
53440: LD_INT 102
53442: PUSH
53443: LD_INT 103
53445: PUSH
53446: LD_INT 105
53448: PUSH
53449: LD_INT 106
53451: PUSH
53452: LD_INT 108
53454: PUSH
53455: LD_INT 112
53457: PUSH
53458: LD_INT 116
53460: PUSH
53461: LD_INT 117
53463: PUSH
53464: LD_INT 118
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: ST_TO_ADDR
53483: GO 55886
53485: LD_INT 8
53487: DOUBLE
53488: EQUAL
53489: IFTRUE 53493
53491: GO 53633
53493: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53494: LD_ADDR_VAR 0 2
53498: PUSH
53499: LD_INT 2
53501: PUSH
53502: LD_INT 4
53504: PUSH
53505: LD_INT 5
53507: PUSH
53508: LD_INT 6
53510: PUSH
53511: LD_INT 7
53513: PUSH
53514: LD_INT 8
53516: PUSH
53517: LD_INT 11
53519: PUSH
53520: LD_INT 12
53522: PUSH
53523: LD_INT 15
53525: PUSH
53526: LD_INT 16
53528: PUSH
53529: LD_INT 20
53531: PUSH
53532: LD_INT 21
53534: PUSH
53535: LD_INT 22
53537: PUSH
53538: LD_INT 23
53540: PUSH
53541: LD_INT 25
53543: PUSH
53544: LD_INT 26
53546: PUSH
53547: LD_INT 30
53549: PUSH
53550: LD_INT 31
53552: PUSH
53553: LD_INT 32
53555: PUSH
53556: LD_INT 36
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 101
53583: PUSH
53584: LD_INT 102
53586: PUSH
53587: LD_INT 103
53589: PUSH
53590: LD_INT 105
53592: PUSH
53593: LD_INT 106
53595: PUSH
53596: LD_INT 108
53598: PUSH
53599: LD_INT 109
53601: PUSH
53602: LD_INT 112
53604: PUSH
53605: LD_INT 116
53607: PUSH
53608: LD_INT 117
53610: PUSH
53611: LD_INT 118
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: ST_TO_ADDR
53631: GO 55886
53633: LD_INT 9
53635: DOUBLE
53636: EQUAL
53637: IFTRUE 53641
53639: GO 53789
53641: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53642: LD_ADDR_VAR 0 2
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 4
53652: PUSH
53653: LD_INT 5
53655: PUSH
53656: LD_INT 6
53658: PUSH
53659: LD_INT 7
53661: PUSH
53662: LD_INT 8
53664: PUSH
53665: LD_INT 11
53667: PUSH
53668: LD_INT 12
53670: PUSH
53671: LD_INT 15
53673: PUSH
53674: LD_INT 16
53676: PUSH
53677: LD_INT 20
53679: PUSH
53680: LD_INT 21
53682: PUSH
53683: LD_INT 22
53685: PUSH
53686: LD_INT 23
53688: PUSH
53689: LD_INT 25
53691: PUSH
53692: LD_INT 26
53694: PUSH
53695: LD_INT 28
53697: PUSH
53698: LD_INT 30
53700: PUSH
53701: LD_INT 31
53703: PUSH
53704: LD_INT 32
53706: PUSH
53707: LD_INT 36
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 101
53735: PUSH
53736: LD_INT 102
53738: PUSH
53739: LD_INT 103
53741: PUSH
53742: LD_INT 105
53744: PUSH
53745: LD_INT 106
53747: PUSH
53748: LD_INT 108
53750: PUSH
53751: LD_INT 109
53753: PUSH
53754: LD_INT 112
53756: PUSH
53757: LD_INT 114
53759: PUSH
53760: LD_INT 116
53762: PUSH
53763: LD_INT 117
53765: PUSH
53766: LD_INT 118
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: ST_TO_ADDR
53787: GO 55886
53789: LD_INT 10
53791: DOUBLE
53792: EQUAL
53793: IFTRUE 53797
53795: GO 53993
53797: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53798: LD_ADDR_VAR 0 2
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 4
53808: PUSH
53809: LD_INT 5
53811: PUSH
53812: LD_INT 6
53814: PUSH
53815: LD_INT 7
53817: PUSH
53818: LD_INT 8
53820: PUSH
53821: LD_INT 9
53823: PUSH
53824: LD_INT 10
53826: PUSH
53827: LD_INT 11
53829: PUSH
53830: LD_INT 12
53832: PUSH
53833: LD_INT 13
53835: PUSH
53836: LD_INT 14
53838: PUSH
53839: LD_INT 15
53841: PUSH
53842: LD_INT 16
53844: PUSH
53845: LD_INT 17
53847: PUSH
53848: LD_INT 18
53850: PUSH
53851: LD_INT 19
53853: PUSH
53854: LD_INT 20
53856: PUSH
53857: LD_INT 21
53859: PUSH
53860: LD_INT 22
53862: PUSH
53863: LD_INT 23
53865: PUSH
53866: LD_INT 24
53868: PUSH
53869: LD_INT 25
53871: PUSH
53872: LD_INT 26
53874: PUSH
53875: LD_INT 28
53877: PUSH
53878: LD_INT 30
53880: PUSH
53881: LD_INT 31
53883: PUSH
53884: LD_INT 32
53886: PUSH
53887: LD_INT 36
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 101
53923: PUSH
53924: LD_INT 102
53926: PUSH
53927: LD_INT 103
53929: PUSH
53930: LD_INT 104
53932: PUSH
53933: LD_INT 105
53935: PUSH
53936: LD_INT 106
53938: PUSH
53939: LD_INT 107
53941: PUSH
53942: LD_INT 108
53944: PUSH
53945: LD_INT 109
53947: PUSH
53948: LD_INT 110
53950: PUSH
53951: LD_INT 111
53953: PUSH
53954: LD_INT 112
53956: PUSH
53957: LD_INT 114
53959: PUSH
53960: LD_INT 116
53962: PUSH
53963: LD_INT 117
53965: PUSH
53966: LD_INT 118
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: ST_TO_ADDR
53991: GO 55886
53993: LD_INT 11
53995: DOUBLE
53996: EQUAL
53997: IFTRUE 54001
53999: GO 54205
54001: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54002: LD_ADDR_VAR 0 2
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: LD_INT 4
54015: PUSH
54016: LD_INT 5
54018: PUSH
54019: LD_INT 6
54021: PUSH
54022: LD_INT 7
54024: PUSH
54025: LD_INT 8
54027: PUSH
54028: LD_INT 9
54030: PUSH
54031: LD_INT 10
54033: PUSH
54034: LD_INT 11
54036: PUSH
54037: LD_INT 12
54039: PUSH
54040: LD_INT 13
54042: PUSH
54043: LD_INT 14
54045: PUSH
54046: LD_INT 15
54048: PUSH
54049: LD_INT 16
54051: PUSH
54052: LD_INT 17
54054: PUSH
54055: LD_INT 18
54057: PUSH
54058: LD_INT 19
54060: PUSH
54061: LD_INT 20
54063: PUSH
54064: LD_INT 21
54066: PUSH
54067: LD_INT 22
54069: PUSH
54070: LD_INT 23
54072: PUSH
54073: LD_INT 24
54075: PUSH
54076: LD_INT 25
54078: PUSH
54079: LD_INT 26
54081: PUSH
54082: LD_INT 28
54084: PUSH
54085: LD_INT 30
54087: PUSH
54088: LD_INT 31
54090: PUSH
54091: LD_INT 32
54093: PUSH
54094: LD_INT 34
54096: PUSH
54097: LD_INT 36
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 101
54135: PUSH
54136: LD_INT 102
54138: PUSH
54139: LD_INT 103
54141: PUSH
54142: LD_INT 104
54144: PUSH
54145: LD_INT 105
54147: PUSH
54148: LD_INT 106
54150: PUSH
54151: LD_INT 107
54153: PUSH
54154: LD_INT 108
54156: PUSH
54157: LD_INT 109
54159: PUSH
54160: LD_INT 110
54162: PUSH
54163: LD_INT 111
54165: PUSH
54166: LD_INT 112
54168: PUSH
54169: LD_INT 114
54171: PUSH
54172: LD_INT 116
54174: PUSH
54175: LD_INT 117
54177: PUSH
54178: LD_INT 118
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: ST_TO_ADDR
54203: GO 55886
54205: LD_INT 12
54207: DOUBLE
54208: EQUAL
54209: IFTRUE 54213
54211: GO 54433
54213: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
54214: LD_ADDR_VAR 0 2
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: LD_INT 3
54227: PUSH
54228: LD_INT 4
54230: PUSH
54231: LD_INT 5
54233: PUSH
54234: LD_INT 6
54236: PUSH
54237: LD_INT 7
54239: PUSH
54240: LD_INT 8
54242: PUSH
54243: LD_INT 9
54245: PUSH
54246: LD_INT 10
54248: PUSH
54249: LD_INT 11
54251: PUSH
54252: LD_INT 12
54254: PUSH
54255: LD_INT 13
54257: PUSH
54258: LD_INT 14
54260: PUSH
54261: LD_INT 15
54263: PUSH
54264: LD_INT 16
54266: PUSH
54267: LD_INT 17
54269: PUSH
54270: LD_INT 18
54272: PUSH
54273: LD_INT 19
54275: PUSH
54276: LD_INT 20
54278: PUSH
54279: LD_INT 21
54281: PUSH
54282: LD_INT 22
54284: PUSH
54285: LD_INT 23
54287: PUSH
54288: LD_INT 24
54290: PUSH
54291: LD_INT 25
54293: PUSH
54294: LD_INT 26
54296: PUSH
54297: LD_INT 27
54299: PUSH
54300: LD_INT 28
54302: PUSH
54303: LD_INT 30
54305: PUSH
54306: LD_INT 31
54308: PUSH
54309: LD_INT 32
54311: PUSH
54312: LD_INT 33
54314: PUSH
54315: LD_INT 34
54317: PUSH
54318: LD_INT 36
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 101
54359: PUSH
54360: LD_INT 102
54362: PUSH
54363: LD_INT 103
54365: PUSH
54366: LD_INT 104
54368: PUSH
54369: LD_INT 105
54371: PUSH
54372: LD_INT 106
54374: PUSH
54375: LD_INT 107
54377: PUSH
54378: LD_INT 108
54380: PUSH
54381: LD_INT 109
54383: PUSH
54384: LD_INT 110
54386: PUSH
54387: LD_INT 111
54389: PUSH
54390: LD_INT 112
54392: PUSH
54393: LD_INT 113
54395: PUSH
54396: LD_INT 114
54398: PUSH
54399: LD_INT 116
54401: PUSH
54402: LD_INT 117
54404: PUSH
54405: LD_INT 118
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: ST_TO_ADDR
54431: GO 55886
54433: LD_INT 13
54435: DOUBLE
54436: EQUAL
54437: IFTRUE 54441
54439: GO 54649
54441: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54442: LD_ADDR_VAR 0 2
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: LD_INT 3
54455: PUSH
54456: LD_INT 4
54458: PUSH
54459: LD_INT 5
54461: PUSH
54462: LD_INT 8
54464: PUSH
54465: LD_INT 9
54467: PUSH
54468: LD_INT 10
54470: PUSH
54471: LD_INT 11
54473: PUSH
54474: LD_INT 12
54476: PUSH
54477: LD_INT 14
54479: PUSH
54480: LD_INT 15
54482: PUSH
54483: LD_INT 16
54485: PUSH
54486: LD_INT 17
54488: PUSH
54489: LD_INT 18
54491: PUSH
54492: LD_INT 19
54494: PUSH
54495: LD_INT 20
54497: PUSH
54498: LD_INT 21
54500: PUSH
54501: LD_INT 22
54503: PUSH
54504: LD_INT 23
54506: PUSH
54507: LD_INT 24
54509: PUSH
54510: LD_INT 25
54512: PUSH
54513: LD_INT 26
54515: PUSH
54516: LD_INT 27
54518: PUSH
54519: LD_INT 28
54521: PUSH
54522: LD_INT 30
54524: PUSH
54525: LD_INT 31
54527: PUSH
54528: LD_INT 32
54530: PUSH
54531: LD_INT 33
54533: PUSH
54534: LD_INT 34
54536: PUSH
54537: LD_INT 36
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 101
54575: PUSH
54576: LD_INT 102
54578: PUSH
54579: LD_INT 103
54581: PUSH
54582: LD_INT 104
54584: PUSH
54585: LD_INT 105
54587: PUSH
54588: LD_INT 106
54590: PUSH
54591: LD_INT 107
54593: PUSH
54594: LD_INT 108
54596: PUSH
54597: LD_INT 109
54599: PUSH
54600: LD_INT 110
54602: PUSH
54603: LD_INT 111
54605: PUSH
54606: LD_INT 112
54608: PUSH
54609: LD_INT 113
54611: PUSH
54612: LD_INT 114
54614: PUSH
54615: LD_INT 116
54617: PUSH
54618: LD_INT 117
54620: PUSH
54621: LD_INT 118
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: ST_TO_ADDR
54647: GO 55886
54649: LD_INT 14
54651: DOUBLE
54652: EQUAL
54653: IFTRUE 54657
54655: GO 54881
54657: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54658: LD_ADDR_VAR 0 2
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: LD_INT 3
54671: PUSH
54672: LD_INT 4
54674: PUSH
54675: LD_INT 5
54677: PUSH
54678: LD_INT 6
54680: PUSH
54681: LD_INT 7
54683: PUSH
54684: LD_INT 8
54686: PUSH
54687: LD_INT 9
54689: PUSH
54690: LD_INT 10
54692: PUSH
54693: LD_INT 11
54695: PUSH
54696: LD_INT 12
54698: PUSH
54699: LD_INT 13
54701: PUSH
54702: LD_INT 14
54704: PUSH
54705: LD_INT 15
54707: PUSH
54708: LD_INT 16
54710: PUSH
54711: LD_INT 17
54713: PUSH
54714: LD_INT 18
54716: PUSH
54717: LD_INT 19
54719: PUSH
54720: LD_INT 20
54722: PUSH
54723: LD_INT 21
54725: PUSH
54726: LD_INT 22
54728: PUSH
54729: LD_INT 23
54731: PUSH
54732: LD_INT 24
54734: PUSH
54735: LD_INT 25
54737: PUSH
54738: LD_INT 26
54740: PUSH
54741: LD_INT 27
54743: PUSH
54744: LD_INT 28
54746: PUSH
54747: LD_INT 29
54749: PUSH
54750: LD_INT 30
54752: PUSH
54753: LD_INT 31
54755: PUSH
54756: LD_INT 32
54758: PUSH
54759: LD_INT 33
54761: PUSH
54762: LD_INT 34
54764: PUSH
54765: LD_INT 36
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 101
54807: PUSH
54808: LD_INT 102
54810: PUSH
54811: LD_INT 103
54813: PUSH
54814: LD_INT 104
54816: PUSH
54817: LD_INT 105
54819: PUSH
54820: LD_INT 106
54822: PUSH
54823: LD_INT 107
54825: PUSH
54826: LD_INT 108
54828: PUSH
54829: LD_INT 109
54831: PUSH
54832: LD_INT 110
54834: PUSH
54835: LD_INT 111
54837: PUSH
54838: LD_INT 112
54840: PUSH
54841: LD_INT 113
54843: PUSH
54844: LD_INT 114
54846: PUSH
54847: LD_INT 116
54849: PUSH
54850: LD_INT 117
54852: PUSH
54853: LD_INT 118
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: ST_TO_ADDR
54879: GO 55886
54881: LD_INT 15
54883: DOUBLE
54884: EQUAL
54885: IFTRUE 54889
54887: GO 55113
54889: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54890: LD_ADDR_VAR 0 2
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 3
54903: PUSH
54904: LD_INT 4
54906: PUSH
54907: LD_INT 5
54909: PUSH
54910: LD_INT 6
54912: PUSH
54913: LD_INT 7
54915: PUSH
54916: LD_INT 8
54918: PUSH
54919: LD_INT 9
54921: PUSH
54922: LD_INT 10
54924: PUSH
54925: LD_INT 11
54927: PUSH
54928: LD_INT 12
54930: PUSH
54931: LD_INT 13
54933: PUSH
54934: LD_INT 14
54936: PUSH
54937: LD_INT 15
54939: PUSH
54940: LD_INT 16
54942: PUSH
54943: LD_INT 17
54945: PUSH
54946: LD_INT 18
54948: PUSH
54949: LD_INT 19
54951: PUSH
54952: LD_INT 20
54954: PUSH
54955: LD_INT 21
54957: PUSH
54958: LD_INT 22
54960: PUSH
54961: LD_INT 23
54963: PUSH
54964: LD_INT 24
54966: PUSH
54967: LD_INT 25
54969: PUSH
54970: LD_INT 26
54972: PUSH
54973: LD_INT 27
54975: PUSH
54976: LD_INT 28
54978: PUSH
54979: LD_INT 29
54981: PUSH
54982: LD_INT 30
54984: PUSH
54985: LD_INT 31
54987: PUSH
54988: LD_INT 32
54990: PUSH
54991: LD_INT 33
54993: PUSH
54994: LD_INT 34
54996: PUSH
54997: LD_INT 36
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 101
55039: PUSH
55040: LD_INT 102
55042: PUSH
55043: LD_INT 103
55045: PUSH
55046: LD_INT 104
55048: PUSH
55049: LD_INT 105
55051: PUSH
55052: LD_INT 106
55054: PUSH
55055: LD_INT 107
55057: PUSH
55058: LD_INT 108
55060: PUSH
55061: LD_INT 109
55063: PUSH
55064: LD_INT 110
55066: PUSH
55067: LD_INT 111
55069: PUSH
55070: LD_INT 112
55072: PUSH
55073: LD_INT 113
55075: PUSH
55076: LD_INT 114
55078: PUSH
55079: LD_INT 116
55081: PUSH
55082: LD_INT 117
55084: PUSH
55085: LD_INT 118
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: ST_TO_ADDR
55111: GO 55886
55113: LD_INT 16
55115: DOUBLE
55116: EQUAL
55117: IFTRUE 55121
55119: GO 55257
55121: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55122: LD_ADDR_VAR 0 2
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: LD_INT 4
55132: PUSH
55133: LD_INT 5
55135: PUSH
55136: LD_INT 7
55138: PUSH
55139: LD_INT 11
55141: PUSH
55142: LD_INT 12
55144: PUSH
55145: LD_INT 15
55147: PUSH
55148: LD_INT 16
55150: PUSH
55151: LD_INT 20
55153: PUSH
55154: LD_INT 21
55156: PUSH
55157: LD_INT 22
55159: PUSH
55160: LD_INT 23
55162: PUSH
55163: LD_INT 25
55165: PUSH
55166: LD_INT 26
55168: PUSH
55169: LD_INT 30
55171: PUSH
55172: LD_INT 31
55174: PUSH
55175: LD_INT 32
55177: PUSH
55178: LD_INT 33
55180: PUSH
55181: LD_INT 34
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 101
55207: PUSH
55208: LD_INT 102
55210: PUSH
55211: LD_INT 103
55213: PUSH
55214: LD_INT 106
55216: PUSH
55217: LD_INT 108
55219: PUSH
55220: LD_INT 112
55222: PUSH
55223: LD_INT 113
55225: PUSH
55226: LD_INT 114
55228: PUSH
55229: LD_INT 116
55231: PUSH
55232: LD_INT 117
55234: PUSH
55235: LD_INT 118
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: ST_TO_ADDR
55255: GO 55886
55257: LD_INT 17
55259: DOUBLE
55260: EQUAL
55261: IFTRUE 55265
55263: GO 55489
55265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
55266: LD_ADDR_VAR 0 2
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: LD_INT 4
55282: PUSH
55283: LD_INT 5
55285: PUSH
55286: LD_INT 6
55288: PUSH
55289: LD_INT 7
55291: PUSH
55292: LD_INT 8
55294: PUSH
55295: LD_INT 9
55297: PUSH
55298: LD_INT 10
55300: PUSH
55301: LD_INT 11
55303: PUSH
55304: LD_INT 12
55306: PUSH
55307: LD_INT 13
55309: PUSH
55310: LD_INT 14
55312: PUSH
55313: LD_INT 15
55315: PUSH
55316: LD_INT 16
55318: PUSH
55319: LD_INT 17
55321: PUSH
55322: LD_INT 18
55324: PUSH
55325: LD_INT 19
55327: PUSH
55328: LD_INT 20
55330: PUSH
55331: LD_INT 21
55333: PUSH
55334: LD_INT 22
55336: PUSH
55337: LD_INT 23
55339: PUSH
55340: LD_INT 24
55342: PUSH
55343: LD_INT 25
55345: PUSH
55346: LD_INT 26
55348: PUSH
55349: LD_INT 27
55351: PUSH
55352: LD_INT 28
55354: PUSH
55355: LD_INT 29
55357: PUSH
55358: LD_INT 30
55360: PUSH
55361: LD_INT 31
55363: PUSH
55364: LD_INT 32
55366: PUSH
55367: LD_INT 33
55369: PUSH
55370: LD_INT 34
55372: PUSH
55373: LD_INT 36
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 101
55415: PUSH
55416: LD_INT 102
55418: PUSH
55419: LD_INT 103
55421: PUSH
55422: LD_INT 104
55424: PUSH
55425: LD_INT 105
55427: PUSH
55428: LD_INT 106
55430: PUSH
55431: LD_INT 107
55433: PUSH
55434: LD_INT 108
55436: PUSH
55437: LD_INT 109
55439: PUSH
55440: LD_INT 110
55442: PUSH
55443: LD_INT 111
55445: PUSH
55446: LD_INT 112
55448: PUSH
55449: LD_INT 113
55451: PUSH
55452: LD_INT 114
55454: PUSH
55455: LD_INT 116
55457: PUSH
55458: LD_INT 117
55460: PUSH
55461: LD_INT 118
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: ST_TO_ADDR
55487: GO 55886
55489: LD_INT 18
55491: DOUBLE
55492: EQUAL
55493: IFTRUE 55497
55495: GO 55645
55497: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55498: LD_ADDR_VAR 0 2
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: LD_INT 4
55508: PUSH
55509: LD_INT 5
55511: PUSH
55512: LD_INT 7
55514: PUSH
55515: LD_INT 11
55517: PUSH
55518: LD_INT 12
55520: PUSH
55521: LD_INT 15
55523: PUSH
55524: LD_INT 16
55526: PUSH
55527: LD_INT 20
55529: PUSH
55530: LD_INT 21
55532: PUSH
55533: LD_INT 22
55535: PUSH
55536: LD_INT 23
55538: PUSH
55539: LD_INT 25
55541: PUSH
55542: LD_INT 26
55544: PUSH
55545: LD_INT 30
55547: PUSH
55548: LD_INT 31
55550: PUSH
55551: LD_INT 32
55553: PUSH
55554: LD_INT 33
55556: PUSH
55557: LD_INT 34
55559: PUSH
55560: LD_INT 35
55562: PUSH
55563: LD_INT 36
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 101
55591: PUSH
55592: LD_INT 102
55594: PUSH
55595: LD_INT 103
55597: PUSH
55598: LD_INT 106
55600: PUSH
55601: LD_INT 108
55603: PUSH
55604: LD_INT 112
55606: PUSH
55607: LD_INT 113
55609: PUSH
55610: LD_INT 114
55612: PUSH
55613: LD_INT 115
55615: PUSH
55616: LD_INT 116
55618: PUSH
55619: LD_INT 117
55621: PUSH
55622: LD_INT 118
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: ST_TO_ADDR
55643: GO 55886
55645: LD_INT 19
55647: DOUBLE
55648: EQUAL
55649: IFTRUE 55653
55651: GO 55885
55653: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55654: LD_ADDR_VAR 0 2
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: LD_INT 4
55670: PUSH
55671: LD_INT 5
55673: PUSH
55674: LD_INT 6
55676: PUSH
55677: LD_INT 7
55679: PUSH
55680: LD_INT 8
55682: PUSH
55683: LD_INT 9
55685: PUSH
55686: LD_INT 10
55688: PUSH
55689: LD_INT 11
55691: PUSH
55692: LD_INT 12
55694: PUSH
55695: LD_INT 13
55697: PUSH
55698: LD_INT 14
55700: PUSH
55701: LD_INT 15
55703: PUSH
55704: LD_INT 16
55706: PUSH
55707: LD_INT 17
55709: PUSH
55710: LD_INT 18
55712: PUSH
55713: LD_INT 19
55715: PUSH
55716: LD_INT 20
55718: PUSH
55719: LD_INT 21
55721: PUSH
55722: LD_INT 22
55724: PUSH
55725: LD_INT 23
55727: PUSH
55728: LD_INT 24
55730: PUSH
55731: LD_INT 25
55733: PUSH
55734: LD_INT 26
55736: PUSH
55737: LD_INT 27
55739: PUSH
55740: LD_INT 28
55742: PUSH
55743: LD_INT 29
55745: PUSH
55746: LD_INT 30
55748: PUSH
55749: LD_INT 31
55751: PUSH
55752: LD_INT 32
55754: PUSH
55755: LD_INT 33
55757: PUSH
55758: LD_INT 34
55760: PUSH
55761: LD_INT 35
55763: PUSH
55764: LD_INT 36
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 101
55807: PUSH
55808: LD_INT 102
55810: PUSH
55811: LD_INT 103
55813: PUSH
55814: LD_INT 104
55816: PUSH
55817: LD_INT 105
55819: PUSH
55820: LD_INT 106
55822: PUSH
55823: LD_INT 107
55825: PUSH
55826: LD_INT 108
55828: PUSH
55829: LD_INT 109
55831: PUSH
55832: LD_INT 110
55834: PUSH
55835: LD_INT 111
55837: PUSH
55838: LD_INT 112
55840: PUSH
55841: LD_INT 113
55843: PUSH
55844: LD_INT 114
55846: PUSH
55847: LD_INT 115
55849: PUSH
55850: LD_INT 116
55852: PUSH
55853: LD_INT 117
55855: PUSH
55856: LD_INT 118
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: ST_TO_ADDR
55883: GO 55886
55885: POP
// end else
55886: GO 56117
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55888: LD_ADDR_VAR 0 2
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: LD_INT 3
55901: PUSH
55902: LD_INT 4
55904: PUSH
55905: LD_INT 5
55907: PUSH
55908: LD_INT 6
55910: PUSH
55911: LD_INT 7
55913: PUSH
55914: LD_INT 8
55916: PUSH
55917: LD_INT 9
55919: PUSH
55920: LD_INT 10
55922: PUSH
55923: LD_INT 11
55925: PUSH
55926: LD_INT 12
55928: PUSH
55929: LD_INT 13
55931: PUSH
55932: LD_INT 14
55934: PUSH
55935: LD_INT 15
55937: PUSH
55938: LD_INT 16
55940: PUSH
55941: LD_INT 17
55943: PUSH
55944: LD_INT 18
55946: PUSH
55947: LD_INT 19
55949: PUSH
55950: LD_INT 20
55952: PUSH
55953: LD_INT 21
55955: PUSH
55956: LD_INT 22
55958: PUSH
55959: LD_INT 23
55961: PUSH
55962: LD_INT 24
55964: PUSH
55965: LD_INT 25
55967: PUSH
55968: LD_INT 26
55970: PUSH
55971: LD_INT 27
55973: PUSH
55974: LD_INT 28
55976: PUSH
55977: LD_INT 29
55979: PUSH
55980: LD_INT 30
55982: PUSH
55983: LD_INT 31
55985: PUSH
55986: LD_INT 32
55988: PUSH
55989: LD_INT 33
55991: PUSH
55992: LD_INT 34
55994: PUSH
55995: LD_INT 35
55997: PUSH
55998: LD_INT 36
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 101
56041: PUSH
56042: LD_INT 102
56044: PUSH
56045: LD_INT 103
56047: PUSH
56048: LD_INT 104
56050: PUSH
56051: LD_INT 105
56053: PUSH
56054: LD_INT 106
56056: PUSH
56057: LD_INT 107
56059: PUSH
56060: LD_INT 108
56062: PUSH
56063: LD_INT 109
56065: PUSH
56066: LD_INT 110
56068: PUSH
56069: LD_INT 111
56071: PUSH
56072: LD_INT 112
56074: PUSH
56075: LD_INT 113
56077: PUSH
56078: LD_INT 114
56080: PUSH
56081: LD_INT 115
56083: PUSH
56084: LD_INT 116
56086: PUSH
56087: LD_INT 117
56089: PUSH
56090: LD_INT 118
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: ST_TO_ADDR
// if result then
56117: LD_VAR 0 2
56121: IFFALSE 56907
// begin normal :=  ;
56123: LD_ADDR_VAR 0 5
56127: PUSH
56128: LD_STRING 
56130: ST_TO_ADDR
// hardcore :=  ;
56131: LD_ADDR_VAR 0 6
56135: PUSH
56136: LD_STRING 
56138: ST_TO_ADDR
// active :=  ;
56139: LD_ADDR_VAR 0 7
56143: PUSH
56144: LD_STRING 
56146: ST_TO_ADDR
// for i = 1 to normalCounter do
56147: LD_ADDR_VAR 0 8
56151: PUSH
56152: DOUBLE
56153: LD_INT 1
56155: DEC
56156: ST_TO_ADDR
56157: LD_EXP 113
56161: PUSH
56162: FOR_TO
56163: IFFALSE 56264
// begin tmp := 0 ;
56165: LD_ADDR_VAR 0 3
56169: PUSH
56170: LD_STRING 0
56172: ST_TO_ADDR
// if result [ 1 ] then
56173: LD_VAR 0 2
56177: PUSH
56178: LD_INT 1
56180: ARRAY
56181: IFFALSE 56246
// if result [ 1 ] [ 1 ] = i then
56183: LD_VAR 0 2
56187: PUSH
56188: LD_INT 1
56190: ARRAY
56191: PUSH
56192: LD_INT 1
56194: ARRAY
56195: PUSH
56196: LD_VAR 0 8
56200: EQUAL
56201: IFFALSE 56246
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
56203: LD_ADDR_VAR 0 2
56207: PUSH
56208: LD_VAR 0 2
56212: PPUSH
56213: LD_INT 1
56215: PPUSH
56216: LD_VAR 0 2
56220: PUSH
56221: LD_INT 1
56223: ARRAY
56224: PPUSH
56225: LD_INT 1
56227: PPUSH
56228: CALL_OW 3
56232: PPUSH
56233: CALL_OW 1
56237: ST_TO_ADDR
// tmp := 1 ;
56238: LD_ADDR_VAR 0 3
56242: PUSH
56243: LD_STRING 1
56245: ST_TO_ADDR
// end ; normal := normal & tmp ;
56246: LD_ADDR_VAR 0 5
56250: PUSH
56251: LD_VAR 0 5
56255: PUSH
56256: LD_VAR 0 3
56260: STR
56261: ST_TO_ADDR
// end ;
56262: GO 56162
56264: POP
56265: POP
// for i = 1 to hardcoreCounter do
56266: LD_ADDR_VAR 0 8
56270: PUSH
56271: DOUBLE
56272: LD_INT 1
56274: DEC
56275: ST_TO_ADDR
56276: LD_EXP 114
56280: PUSH
56281: FOR_TO
56282: IFFALSE 56387
// begin tmp := 0 ;
56284: LD_ADDR_VAR 0 3
56288: PUSH
56289: LD_STRING 0
56291: ST_TO_ADDR
// if result [ 2 ] then
56292: LD_VAR 0 2
56296: PUSH
56297: LD_INT 2
56299: ARRAY
56300: IFFALSE 56369
// if result [ 2 ] [ 1 ] = 100 + i then
56302: LD_VAR 0 2
56306: PUSH
56307: LD_INT 2
56309: ARRAY
56310: PUSH
56311: LD_INT 1
56313: ARRAY
56314: PUSH
56315: LD_INT 100
56317: PUSH
56318: LD_VAR 0 8
56322: PLUS
56323: EQUAL
56324: IFFALSE 56369
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
56326: LD_ADDR_VAR 0 2
56330: PUSH
56331: LD_VAR 0 2
56335: PPUSH
56336: LD_INT 2
56338: PPUSH
56339: LD_VAR 0 2
56343: PUSH
56344: LD_INT 2
56346: ARRAY
56347: PPUSH
56348: LD_INT 1
56350: PPUSH
56351: CALL_OW 3
56355: PPUSH
56356: CALL_OW 1
56360: ST_TO_ADDR
// tmp := 1 ;
56361: LD_ADDR_VAR 0 3
56365: PUSH
56366: LD_STRING 1
56368: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
56369: LD_ADDR_VAR 0 6
56373: PUSH
56374: LD_VAR 0 6
56378: PUSH
56379: LD_VAR 0 3
56383: STR
56384: ST_TO_ADDR
// end ;
56385: GO 56281
56387: POP
56388: POP
// if isGameLoad then
56389: LD_VAR 0 1
56393: IFFALSE 56868
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
56395: LD_ADDR_VAR 0 4
56399: PUSH
56400: LD_EXP 117
56404: PUSH
56405: LD_EXP 116
56409: PUSH
56410: LD_EXP 118
56414: PUSH
56415: LD_EXP 115
56419: PUSH
56420: LD_EXP 119
56424: PUSH
56425: LD_EXP 120
56429: PUSH
56430: LD_EXP 121
56434: PUSH
56435: LD_EXP 122
56439: PUSH
56440: LD_EXP 123
56444: PUSH
56445: LD_EXP 124
56449: PUSH
56450: LD_EXP 125
56454: PUSH
56455: LD_EXP 126
56459: PUSH
56460: LD_EXP 127
56464: PUSH
56465: LD_EXP 128
56469: PUSH
56470: LD_EXP 136
56474: PUSH
56475: LD_EXP 137
56479: PUSH
56480: LD_EXP 138
56484: PUSH
56485: LD_EXP 139
56489: PUSH
56490: LD_EXP 141
56494: PUSH
56495: LD_EXP 142
56499: PUSH
56500: LD_EXP 143
56504: PUSH
56505: LD_EXP 146
56509: PUSH
56510: LD_EXP 148
56514: PUSH
56515: LD_EXP 149
56519: PUSH
56520: LD_EXP 150
56524: PUSH
56525: LD_EXP 152
56529: PUSH
56530: LD_EXP 153
56534: PUSH
56535: LD_EXP 156
56539: PUSH
56540: LD_EXP 157
56544: PUSH
56545: LD_EXP 158
56549: PUSH
56550: LD_EXP 159
56554: PUSH
56555: LD_EXP 160
56559: PUSH
56560: LD_EXP 161
56564: PUSH
56565: LD_EXP 162
56569: PUSH
56570: LD_EXP 163
56574: PUSH
56575: LD_EXP 164
56579: PUSH
56580: LD_EXP 129
56584: PUSH
56585: LD_EXP 130
56589: PUSH
56590: LD_EXP 133
56594: PUSH
56595: LD_EXP 134
56599: PUSH
56600: LD_EXP 135
56604: PUSH
56605: LD_EXP 131
56609: PUSH
56610: LD_EXP 132
56614: PUSH
56615: LD_EXP 140
56619: PUSH
56620: LD_EXP 144
56624: PUSH
56625: LD_EXP 145
56629: PUSH
56630: LD_EXP 147
56634: PUSH
56635: LD_EXP 151
56639: PUSH
56640: LD_EXP 154
56644: PUSH
56645: LD_EXP 155
56649: PUSH
56650: LD_EXP 165
56654: PUSH
56655: LD_EXP 166
56659: PUSH
56660: LD_EXP 167
56664: PUSH
56665: LD_EXP 168
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: ST_TO_ADDR
// tmp :=  ;
56726: LD_ADDR_VAR 0 3
56730: PUSH
56731: LD_STRING 
56733: ST_TO_ADDR
// for i = 1 to normalCounter do
56734: LD_ADDR_VAR 0 8
56738: PUSH
56739: DOUBLE
56740: LD_INT 1
56742: DEC
56743: ST_TO_ADDR
56744: LD_EXP 113
56748: PUSH
56749: FOR_TO
56750: IFFALSE 56786
// begin if flags [ i ] then
56752: LD_VAR 0 4
56756: PUSH
56757: LD_VAR 0 8
56761: ARRAY
56762: IFFALSE 56784
// tmp := tmp & i & ; ;
56764: LD_ADDR_VAR 0 3
56768: PUSH
56769: LD_VAR 0 3
56773: PUSH
56774: LD_VAR 0 8
56778: STR
56779: PUSH
56780: LD_STRING ;
56782: STR
56783: ST_TO_ADDR
// end ;
56784: GO 56749
56786: POP
56787: POP
// for i = 1 to hardcoreCounter do
56788: LD_ADDR_VAR 0 8
56792: PUSH
56793: DOUBLE
56794: LD_INT 1
56796: DEC
56797: ST_TO_ADDR
56798: LD_EXP 114
56802: PUSH
56803: FOR_TO
56804: IFFALSE 56850
// begin if flags [ normalCounter + i ] then
56806: LD_VAR 0 4
56810: PUSH
56811: LD_EXP 113
56815: PUSH
56816: LD_VAR 0 8
56820: PLUS
56821: ARRAY
56822: IFFALSE 56848
// tmp := tmp & ( 100 + i ) & ; ;
56824: LD_ADDR_VAR 0 3
56828: PUSH
56829: LD_VAR 0 3
56833: PUSH
56834: LD_INT 100
56836: PUSH
56837: LD_VAR 0 8
56841: PLUS
56842: STR
56843: PUSH
56844: LD_STRING ;
56846: STR
56847: ST_TO_ADDR
// end ;
56848: GO 56803
56850: POP
56851: POP
// if tmp then
56852: LD_VAR 0 3
56856: IFFALSE 56868
// active := tmp ;
56858: LD_ADDR_VAR 0 7
56862: PUSH
56863: LD_VAR 0 3
56867: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56868: LD_STRING getStreamItemsFromMission("
56870: PUSH
56871: LD_VAR 0 5
56875: STR
56876: PUSH
56877: LD_STRING ","
56879: STR
56880: PUSH
56881: LD_VAR 0 6
56885: STR
56886: PUSH
56887: LD_STRING ","
56889: STR
56890: PUSH
56891: LD_VAR 0 7
56895: STR
56896: PUSH
56897: LD_STRING ")
56899: STR
56900: PPUSH
56901: CALL_OW 559
// end else
56905: GO 56914
// ToLua ( getStreamItemsFromMission("","","") ) ;
56907: LD_STRING getStreamItemsFromMission("","","")
56909: PPUSH
56910: CALL_OW 559
// end ;
56914: LD_VAR 0 2
56918: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56919: LD_EXP 112
56923: PUSH
56924: LD_EXP 117
56928: AND
56929: IFFALSE 57053
56931: GO 56933
56933: DISABLE
56934: LD_INT 0
56936: PPUSH
56937: PPUSH
// begin enable ;
56938: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56939: LD_ADDR_VAR 0 2
56943: PUSH
56944: LD_INT 22
56946: PUSH
56947: LD_OWVAR 2
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: PUSH
56959: LD_INT 34
56961: PUSH
56962: LD_INT 7
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 34
56971: PUSH
56972: LD_INT 45
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 34
56981: PUSH
56982: LD_INT 28
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 34
56991: PUSH
56992: LD_INT 47
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PPUSH
57010: CALL_OW 69
57014: ST_TO_ADDR
// if not tmp then
57015: LD_VAR 0 2
57019: NOT
57020: IFFALSE 57024
// exit ;
57022: GO 57053
// for i in tmp do
57024: LD_ADDR_VAR 0 1
57028: PUSH
57029: LD_VAR 0 2
57033: PUSH
57034: FOR_IN
57035: IFFALSE 57051
// begin SetLives ( i , 0 ) ;
57037: LD_VAR 0 1
57041: PPUSH
57042: LD_INT 0
57044: PPUSH
57045: CALL_OW 234
// end ;
57049: GO 57034
57051: POP
57052: POP
// end ;
57053: PPOPN 2
57055: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57056: LD_EXP 112
57060: PUSH
57061: LD_EXP 118
57065: AND
57066: IFFALSE 57150
57068: GO 57070
57070: DISABLE
57071: LD_INT 0
57073: PPUSH
57074: PPUSH
// begin enable ;
57075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57076: LD_ADDR_VAR 0 2
57080: PUSH
57081: LD_INT 22
57083: PUSH
57084: LD_OWVAR 2
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 32
57095: PUSH
57096: LD_INT 3
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PPUSH
57107: CALL_OW 69
57111: ST_TO_ADDR
// if not tmp then
57112: LD_VAR 0 2
57116: NOT
57117: IFFALSE 57121
// exit ;
57119: GO 57150
// for i in tmp do
57121: LD_ADDR_VAR 0 1
57125: PUSH
57126: LD_VAR 0 2
57130: PUSH
57131: FOR_IN
57132: IFFALSE 57148
// begin SetLives ( i , 0 ) ;
57134: LD_VAR 0 1
57138: PPUSH
57139: LD_INT 0
57141: PPUSH
57142: CALL_OW 234
// end ;
57146: GO 57131
57148: POP
57149: POP
// end ;
57150: PPOPN 2
57152: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
57153: LD_EXP 112
57157: PUSH
57158: LD_EXP 115
57162: AND
57163: IFFALSE 57256
57165: GO 57167
57167: DISABLE
57168: LD_INT 0
57170: PPUSH
// begin enable ;
57171: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
57172: LD_ADDR_VAR 0 1
57176: PUSH
57177: LD_INT 22
57179: PUSH
57180: LD_OWVAR 2
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: LD_INT 25
57194: PUSH
57195: LD_INT 5
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 25
57204: PUSH
57205: LD_INT 9
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 25
57214: PUSH
57215: LD_INT 8
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PPUSH
57232: CALL_OW 69
57236: PUSH
57237: FOR_IN
57238: IFFALSE 57254
// begin SetClass ( i , 1 ) ;
57240: LD_VAR 0 1
57244: PPUSH
57245: LD_INT 1
57247: PPUSH
57248: CALL_OW 336
// end ;
57252: GO 57237
57254: POP
57255: POP
// end ;
57256: PPOPN 1
57258: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
57259: LD_EXP 112
57263: PUSH
57264: LD_EXP 116
57268: AND
57269: PUSH
57270: LD_OWVAR 65
57274: PUSH
57275: LD_INT 7
57277: LESS
57278: AND
57279: IFFALSE 57293
57281: GO 57283
57283: DISABLE
// begin enable ;
57284: ENABLE
// game_speed := 7 ;
57285: LD_ADDR_OWVAR 65
57289: PUSH
57290: LD_INT 7
57292: ST_TO_ADDR
// end ;
57293: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
57294: LD_EXP 112
57298: PUSH
57299: LD_EXP 119
57303: AND
57304: IFFALSE 57506
57306: GO 57308
57308: DISABLE
57309: LD_INT 0
57311: PPUSH
57312: PPUSH
57313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57314: LD_ADDR_VAR 0 3
57318: PUSH
57319: LD_INT 81
57321: PUSH
57322: LD_OWVAR 2
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 21
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PPUSH
57345: CALL_OW 69
57349: ST_TO_ADDR
// if not tmp then
57350: LD_VAR 0 3
57354: NOT
57355: IFFALSE 57359
// exit ;
57357: GO 57506
// if tmp > 5 then
57359: LD_VAR 0 3
57363: PUSH
57364: LD_INT 5
57366: GREATER
57367: IFFALSE 57379
// k := 5 else
57369: LD_ADDR_VAR 0 2
57373: PUSH
57374: LD_INT 5
57376: ST_TO_ADDR
57377: GO 57389
// k := tmp ;
57379: LD_ADDR_VAR 0 2
57383: PUSH
57384: LD_VAR 0 3
57388: ST_TO_ADDR
// for i := 1 to k do
57389: LD_ADDR_VAR 0 1
57393: PUSH
57394: DOUBLE
57395: LD_INT 1
57397: DEC
57398: ST_TO_ADDR
57399: LD_VAR 0 2
57403: PUSH
57404: FOR_TO
57405: IFFALSE 57504
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
57407: LD_VAR 0 3
57411: PUSH
57412: LD_VAR 0 1
57416: ARRAY
57417: PPUSH
57418: LD_VAR 0 1
57422: PUSH
57423: LD_INT 4
57425: MOD
57426: PUSH
57427: LD_INT 1
57429: PLUS
57430: PPUSH
57431: CALL_OW 259
57435: PUSH
57436: LD_INT 10
57438: LESS
57439: IFFALSE 57502
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57441: LD_VAR 0 3
57445: PUSH
57446: LD_VAR 0 1
57450: ARRAY
57451: PPUSH
57452: LD_VAR 0 1
57456: PUSH
57457: LD_INT 4
57459: MOD
57460: PUSH
57461: LD_INT 1
57463: PLUS
57464: PPUSH
57465: LD_VAR 0 3
57469: PUSH
57470: LD_VAR 0 1
57474: ARRAY
57475: PPUSH
57476: LD_VAR 0 1
57480: PUSH
57481: LD_INT 4
57483: MOD
57484: PUSH
57485: LD_INT 1
57487: PLUS
57488: PPUSH
57489: CALL_OW 259
57493: PUSH
57494: LD_INT 1
57496: PLUS
57497: PPUSH
57498: CALL_OW 237
57502: GO 57404
57504: POP
57505: POP
// end ;
57506: PPOPN 3
57508: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57509: LD_EXP 112
57513: PUSH
57514: LD_EXP 120
57518: AND
57519: IFFALSE 57539
57521: GO 57523
57523: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57524: LD_INT 4
57526: PPUSH
57527: LD_OWVAR 2
57531: PPUSH
57532: LD_INT 0
57534: PPUSH
57535: CALL_OW 324
57539: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57540: LD_EXP 112
57544: PUSH
57545: LD_EXP 149
57549: AND
57550: IFFALSE 57570
57552: GO 57554
57554: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
57555: LD_INT 19
57557: PPUSH
57558: LD_OWVAR 2
57562: PPUSH
57563: LD_INT 0
57565: PPUSH
57566: CALL_OW 324
57570: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
57571: LD_EXP 112
57575: PUSH
57576: LD_EXP 121
57580: AND
57581: IFFALSE 57683
57583: GO 57585
57585: DISABLE
57586: LD_INT 0
57588: PPUSH
57589: PPUSH
// begin enable ;
57590: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57591: LD_ADDR_VAR 0 2
57595: PUSH
57596: LD_INT 22
57598: PUSH
57599: LD_OWVAR 2
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: LD_INT 34
57613: PUSH
57614: LD_INT 11
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 34
57623: PUSH
57624: LD_INT 30
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PPUSH
57640: CALL_OW 69
57644: ST_TO_ADDR
// if not tmp then
57645: LD_VAR 0 2
57649: NOT
57650: IFFALSE 57654
// exit ;
57652: GO 57683
// for i in tmp do
57654: LD_ADDR_VAR 0 1
57658: PUSH
57659: LD_VAR 0 2
57663: PUSH
57664: FOR_IN
57665: IFFALSE 57681
// begin SetLives ( i , 0 ) ;
57667: LD_VAR 0 1
57671: PPUSH
57672: LD_INT 0
57674: PPUSH
57675: CALL_OW 234
// end ;
57679: GO 57664
57681: POP
57682: POP
// end ;
57683: PPOPN 2
57685: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57686: LD_EXP 112
57690: PUSH
57691: LD_EXP 122
57695: AND
57696: IFFALSE 57716
57698: GO 57700
57700: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57701: LD_INT 32
57703: PPUSH
57704: LD_OWVAR 2
57708: PPUSH
57709: LD_INT 0
57711: PPUSH
57712: CALL_OW 324
57716: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57717: LD_EXP 112
57721: PUSH
57722: LD_EXP 123
57726: AND
57727: IFFALSE 57908
57729: GO 57731
57731: DISABLE
57732: LD_INT 0
57734: PPUSH
57735: PPUSH
57736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57737: LD_ADDR_VAR 0 2
57741: PUSH
57742: LD_INT 22
57744: PUSH
57745: LD_OWVAR 2
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 33
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PPUSH
57768: CALL_OW 69
57772: ST_TO_ADDR
// if not tmp then
57773: LD_VAR 0 2
57777: NOT
57778: IFFALSE 57782
// exit ;
57780: GO 57908
// side := 0 ;
57782: LD_ADDR_VAR 0 3
57786: PUSH
57787: LD_INT 0
57789: ST_TO_ADDR
// for i := 1 to 8 do
57790: LD_ADDR_VAR 0 1
57794: PUSH
57795: DOUBLE
57796: LD_INT 1
57798: DEC
57799: ST_TO_ADDR
57800: LD_INT 8
57802: PUSH
57803: FOR_TO
57804: IFFALSE 57852
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57806: LD_OWVAR 2
57810: PUSH
57811: LD_VAR 0 1
57815: NONEQUAL
57816: PUSH
57817: LD_OWVAR 2
57821: PPUSH
57822: LD_VAR 0 1
57826: PPUSH
57827: CALL_OW 81
57831: PUSH
57832: LD_INT 2
57834: EQUAL
57835: AND
57836: IFFALSE 57850
// begin side := i ;
57838: LD_ADDR_VAR 0 3
57842: PUSH
57843: LD_VAR 0 1
57847: ST_TO_ADDR
// break ;
57848: GO 57852
// end ;
57850: GO 57803
57852: POP
57853: POP
// if not side then
57854: LD_VAR 0 3
57858: NOT
57859: IFFALSE 57863
// exit ;
57861: GO 57908
// for i := 1 to tmp do
57863: LD_ADDR_VAR 0 1
57867: PUSH
57868: DOUBLE
57869: LD_INT 1
57871: DEC
57872: ST_TO_ADDR
57873: LD_VAR 0 2
57877: PUSH
57878: FOR_TO
57879: IFFALSE 57906
// if Prob ( 60 ) then
57881: LD_INT 60
57883: PPUSH
57884: CALL_OW 13
57888: IFFALSE 57904
// SetSide ( i , side ) ;
57890: LD_VAR 0 1
57894: PPUSH
57895: LD_VAR 0 3
57899: PPUSH
57900: CALL_OW 235
57904: GO 57878
57906: POP
57907: POP
// end ;
57908: PPOPN 3
57910: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57911: LD_EXP 112
57915: PUSH
57916: LD_EXP 125
57920: AND
57921: IFFALSE 58040
57923: GO 57925
57925: DISABLE
57926: LD_INT 0
57928: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57929: LD_ADDR_VAR 0 1
57933: PUSH
57934: LD_INT 22
57936: PUSH
57937: LD_OWVAR 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 21
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: LD_INT 23
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: LIST
57977: PPUSH
57978: CALL_OW 69
57982: PUSH
57983: FOR_IN
57984: IFFALSE 58038
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57986: LD_VAR 0 1
57990: PPUSH
57991: CALL_OW 257
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 2
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: LD_INT 4
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: IN
58014: IFFALSE 58036
// SetClass ( un , rand ( 1 , 4 ) ) ;
58016: LD_VAR 0 1
58020: PPUSH
58021: LD_INT 1
58023: PPUSH
58024: LD_INT 4
58026: PPUSH
58027: CALL_OW 12
58031: PPUSH
58032: CALL_OW 336
58036: GO 57983
58038: POP
58039: POP
// end ;
58040: PPOPN 1
58042: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58043: LD_EXP 112
58047: PUSH
58048: LD_EXP 124
58052: AND
58053: IFFALSE 58132
58055: GO 58057
58057: DISABLE
58058: LD_INT 0
58060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58061: LD_ADDR_VAR 0 1
58065: PUSH
58066: LD_INT 22
58068: PUSH
58069: LD_OWVAR 2
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 21
58080: PUSH
58081: LD_INT 3
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PPUSH
58092: CALL_OW 69
58096: ST_TO_ADDR
// if not tmp then
58097: LD_VAR 0 1
58101: NOT
58102: IFFALSE 58106
// exit ;
58104: GO 58132
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58106: LD_VAR 0 1
58110: PUSH
58111: LD_INT 1
58113: PPUSH
58114: LD_VAR 0 1
58118: PPUSH
58119: CALL_OW 12
58123: ARRAY
58124: PPUSH
58125: LD_INT 100
58127: PPUSH
58128: CALL_OW 234
// end ;
58132: PPOPN 1
58134: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
58135: LD_EXP 112
58139: PUSH
58140: LD_EXP 126
58144: AND
58145: IFFALSE 58243
58147: GO 58149
58149: DISABLE
58150: LD_INT 0
58152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58153: LD_ADDR_VAR 0 1
58157: PUSH
58158: LD_INT 22
58160: PUSH
58161: LD_OWVAR 2
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 21
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PPUSH
58184: CALL_OW 69
58188: ST_TO_ADDR
// if not tmp then
58189: LD_VAR 0 1
58193: NOT
58194: IFFALSE 58198
// exit ;
58196: GO 58243
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
58198: LD_VAR 0 1
58202: PUSH
58203: LD_INT 1
58205: PPUSH
58206: LD_VAR 0 1
58210: PPUSH
58211: CALL_OW 12
58215: ARRAY
58216: PPUSH
58217: LD_INT 1
58219: PPUSH
58220: LD_INT 4
58222: PPUSH
58223: CALL_OW 12
58227: PPUSH
58228: LD_INT 3000
58230: PPUSH
58231: LD_INT 9000
58233: PPUSH
58234: CALL_OW 12
58238: PPUSH
58239: CALL_OW 492
// end ;
58243: PPOPN 1
58245: END
// every 0 0$1 trigger StreamModeActive and sDepot do
58246: LD_EXP 112
58250: PUSH
58251: LD_EXP 127
58255: AND
58256: IFFALSE 58276
58258: GO 58260
58260: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
58261: LD_INT 1
58263: PPUSH
58264: LD_OWVAR 2
58268: PPUSH
58269: LD_INT 0
58271: PPUSH
58272: CALL_OW 324
58276: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
58277: LD_EXP 112
58281: PUSH
58282: LD_EXP 128
58286: AND
58287: IFFALSE 58370
58289: GO 58291
58291: DISABLE
58292: LD_INT 0
58294: PPUSH
58295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58296: LD_ADDR_VAR 0 2
58300: PUSH
58301: LD_INT 22
58303: PUSH
58304: LD_OWVAR 2
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 21
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PPUSH
58327: CALL_OW 69
58331: ST_TO_ADDR
// if not tmp then
58332: LD_VAR 0 2
58336: NOT
58337: IFFALSE 58341
// exit ;
58339: GO 58370
// for i in tmp do
58341: LD_ADDR_VAR 0 1
58345: PUSH
58346: LD_VAR 0 2
58350: PUSH
58351: FOR_IN
58352: IFFALSE 58368
// SetBLevel ( i , 10 ) ;
58354: LD_VAR 0 1
58358: PPUSH
58359: LD_INT 10
58361: PPUSH
58362: CALL_OW 241
58366: GO 58351
58368: POP
58369: POP
// end ;
58370: PPOPN 2
58372: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
58373: LD_EXP 112
58377: PUSH
58378: LD_EXP 129
58382: AND
58383: IFFALSE 58494
58385: GO 58387
58387: DISABLE
58388: LD_INT 0
58390: PPUSH
58391: PPUSH
58392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58393: LD_ADDR_VAR 0 3
58397: PUSH
58398: LD_INT 22
58400: PUSH
58401: LD_OWVAR 2
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 25
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PPUSH
58424: CALL_OW 69
58428: ST_TO_ADDR
// if not tmp then
58429: LD_VAR 0 3
58433: NOT
58434: IFFALSE 58438
// exit ;
58436: GO 58494
// un := tmp [ rand ( 1 , tmp ) ] ;
58438: LD_ADDR_VAR 0 2
58442: PUSH
58443: LD_VAR 0 3
58447: PUSH
58448: LD_INT 1
58450: PPUSH
58451: LD_VAR 0 3
58455: PPUSH
58456: CALL_OW 12
58460: ARRAY
58461: ST_TO_ADDR
// if Crawls ( un ) then
58462: LD_VAR 0 2
58466: PPUSH
58467: CALL_OW 318
58471: IFFALSE 58482
// ComWalk ( un ) ;
58473: LD_VAR 0 2
58477: PPUSH
58478: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58482: LD_VAR 0 2
58486: PPUSH
58487: LD_INT 5
58489: PPUSH
58490: CALL_OW 336
// end ;
58494: PPOPN 3
58496: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58497: LD_EXP 112
58501: PUSH
58502: LD_EXP 130
58506: AND
58507: PUSH
58508: LD_OWVAR 67
58512: PUSH
58513: LD_INT 4
58515: LESS
58516: AND
58517: IFFALSE 58536
58519: GO 58521
58521: DISABLE
// begin Difficulty := Difficulty + 1 ;
58522: LD_ADDR_OWVAR 67
58526: PUSH
58527: LD_OWVAR 67
58531: PUSH
58532: LD_INT 1
58534: PLUS
58535: ST_TO_ADDR
// end ;
58536: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58537: LD_EXP 112
58541: PUSH
58542: LD_EXP 131
58546: AND
58547: IFFALSE 58650
58549: GO 58551
58551: DISABLE
58552: LD_INT 0
58554: PPUSH
// begin for i := 1 to 5 do
58555: LD_ADDR_VAR 0 1
58559: PUSH
58560: DOUBLE
58561: LD_INT 1
58563: DEC
58564: ST_TO_ADDR
58565: LD_INT 5
58567: PUSH
58568: FOR_TO
58569: IFFALSE 58648
// begin uc_nation := nation_nature ;
58571: LD_ADDR_OWVAR 21
58575: PUSH
58576: LD_INT 0
58578: ST_TO_ADDR
// uc_side := 0 ;
58579: LD_ADDR_OWVAR 20
58583: PUSH
58584: LD_INT 0
58586: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58587: LD_ADDR_OWVAR 29
58591: PUSH
58592: LD_INT 12
58594: PUSH
58595: LD_INT 12
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: ST_TO_ADDR
// hc_agressivity := 20 ;
58602: LD_ADDR_OWVAR 35
58606: PUSH
58607: LD_INT 20
58609: ST_TO_ADDR
// hc_class := class_tiger ;
58610: LD_ADDR_OWVAR 28
58614: PUSH
58615: LD_INT 14
58617: ST_TO_ADDR
// hc_gallery :=  ;
58618: LD_ADDR_OWVAR 33
58622: PUSH
58623: LD_STRING 
58625: ST_TO_ADDR
// hc_name :=  ;
58626: LD_ADDR_OWVAR 26
58630: PUSH
58631: LD_STRING 
58633: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
58634: CALL_OW 44
58638: PPUSH
58639: LD_INT 0
58641: PPUSH
58642: CALL_OW 51
// end ;
58646: GO 58568
58648: POP
58649: POP
// end ;
58650: PPOPN 1
58652: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58653: LD_EXP 112
58657: PUSH
58658: LD_EXP 132
58662: AND
58663: IFFALSE 58672
58665: GO 58667
58667: DISABLE
// StreamSibBomb ;
58668: CALL 58673 0 0
58672: END
// export function StreamSibBomb ; var i , x , y ; begin
58673: LD_INT 0
58675: PPUSH
58676: PPUSH
58677: PPUSH
58678: PPUSH
// result := false ;
58679: LD_ADDR_VAR 0 1
58683: PUSH
58684: LD_INT 0
58686: ST_TO_ADDR
// for i := 1 to 16 do
58687: LD_ADDR_VAR 0 2
58691: PUSH
58692: DOUBLE
58693: LD_INT 1
58695: DEC
58696: ST_TO_ADDR
58697: LD_INT 16
58699: PUSH
58700: FOR_TO
58701: IFFALSE 58900
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58703: LD_ADDR_VAR 0 3
58707: PUSH
58708: LD_INT 10
58710: PUSH
58711: LD_INT 20
58713: PUSH
58714: LD_INT 30
58716: PUSH
58717: LD_INT 40
58719: PUSH
58720: LD_INT 50
58722: PUSH
58723: LD_INT 60
58725: PUSH
58726: LD_INT 70
58728: PUSH
58729: LD_INT 80
58731: PUSH
58732: LD_INT 90
58734: PUSH
58735: LD_INT 100
58737: PUSH
58738: LD_INT 110
58740: PUSH
58741: LD_INT 120
58743: PUSH
58744: LD_INT 130
58746: PUSH
58747: LD_INT 140
58749: PUSH
58750: LD_INT 150
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PPUSH
58773: LD_INT 15
58775: PPUSH
58776: CALL_OW 12
58780: ARRAY
58781: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58782: LD_ADDR_VAR 0 4
58786: PUSH
58787: LD_INT 10
58789: PUSH
58790: LD_INT 20
58792: PUSH
58793: LD_INT 30
58795: PUSH
58796: LD_INT 40
58798: PUSH
58799: LD_INT 50
58801: PUSH
58802: LD_INT 60
58804: PUSH
58805: LD_INT 70
58807: PUSH
58808: LD_INT 80
58810: PUSH
58811: LD_INT 90
58813: PUSH
58814: LD_INT 100
58816: PUSH
58817: LD_INT 110
58819: PUSH
58820: LD_INT 120
58822: PUSH
58823: LD_INT 130
58825: PUSH
58826: LD_INT 140
58828: PUSH
58829: LD_INT 150
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PPUSH
58852: LD_INT 15
58854: PPUSH
58855: CALL_OW 12
58859: ARRAY
58860: ST_TO_ADDR
// if ValidHex ( x , y ) then
58861: LD_VAR 0 3
58865: PPUSH
58866: LD_VAR 0 4
58870: PPUSH
58871: CALL_OW 488
58875: IFFALSE 58898
// begin result := [ x , y ] ;
58877: LD_ADDR_VAR 0 1
58881: PUSH
58882: LD_VAR 0 3
58886: PUSH
58887: LD_VAR 0 4
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: ST_TO_ADDR
// break ;
58896: GO 58900
// end ; end ;
58898: GO 58700
58900: POP
58901: POP
// if result then
58902: LD_VAR 0 1
58906: IFFALSE 58966
// begin ToLua ( playSibBomb() ) ;
58908: LD_STRING playSibBomb()
58910: PPUSH
58911: CALL_OW 559
// wait ( 0 0$14 ) ;
58915: LD_INT 490
58917: PPUSH
58918: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58922: LD_VAR 0 1
58926: PUSH
58927: LD_INT 1
58929: ARRAY
58930: PPUSH
58931: LD_VAR 0 1
58935: PUSH
58936: LD_INT 2
58938: ARRAY
58939: PPUSH
58940: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58944: LD_VAR 0 1
58948: PUSH
58949: LD_INT 1
58951: ARRAY
58952: PPUSH
58953: LD_VAR 0 1
58957: PUSH
58958: LD_INT 2
58960: ARRAY
58961: PPUSH
58962: CALL_OW 429
// end ; end ;
58966: LD_VAR 0 1
58970: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58971: LD_EXP 112
58975: PUSH
58976: LD_EXP 134
58980: AND
58981: IFFALSE 58993
58983: GO 58985
58985: DISABLE
// YouLost (  ) ;
58986: LD_STRING 
58988: PPUSH
58989: CALL_OW 104
58993: END
// every 0 0$1 trigger StreamModeActive and sFog do
58994: LD_EXP 112
58998: PUSH
58999: LD_EXP 133
59003: AND
59004: IFFALSE 59018
59006: GO 59008
59008: DISABLE
// FogOff ( your_side ) ;
59009: LD_OWVAR 2
59013: PPUSH
59014: CALL_OW 344
59018: END
// every 0 0$1 trigger StreamModeActive and sSun do
59019: LD_EXP 112
59023: PUSH
59024: LD_EXP 135
59028: AND
59029: IFFALSE 59057
59031: GO 59033
59033: DISABLE
// begin solar_recharge_percent := 0 ;
59034: LD_ADDR_OWVAR 79
59038: PUSH
59039: LD_INT 0
59041: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59042: LD_INT 10500
59044: PPUSH
59045: CALL_OW 67
// solar_recharge_percent := 100 ;
59049: LD_ADDR_OWVAR 79
59053: PUSH
59054: LD_INT 100
59056: ST_TO_ADDR
// end ;
59057: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59058: LD_EXP 112
59062: PUSH
59063: LD_EXP 136
59067: AND
59068: IFFALSE 59307
59070: GO 59072
59072: DISABLE
59073: LD_INT 0
59075: PPUSH
59076: PPUSH
59077: PPUSH
// begin tmp := [ ] ;
59078: LD_ADDR_VAR 0 3
59082: PUSH
59083: EMPTY
59084: ST_TO_ADDR
// for i := 1 to 6 do
59085: LD_ADDR_VAR 0 1
59089: PUSH
59090: DOUBLE
59091: LD_INT 1
59093: DEC
59094: ST_TO_ADDR
59095: LD_INT 6
59097: PUSH
59098: FOR_TO
59099: IFFALSE 59204
// begin uc_nation := nation_nature ;
59101: LD_ADDR_OWVAR 21
59105: PUSH
59106: LD_INT 0
59108: ST_TO_ADDR
// uc_side := 0 ;
59109: LD_ADDR_OWVAR 20
59113: PUSH
59114: LD_INT 0
59116: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59117: LD_ADDR_OWVAR 29
59121: PUSH
59122: LD_INT 12
59124: PUSH
59125: LD_INT 12
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: ST_TO_ADDR
// hc_agressivity := 20 ;
59132: LD_ADDR_OWVAR 35
59136: PUSH
59137: LD_INT 20
59139: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
59140: LD_ADDR_OWVAR 28
59144: PUSH
59145: LD_INT 17
59147: ST_TO_ADDR
// hc_gallery :=  ;
59148: LD_ADDR_OWVAR 33
59152: PUSH
59153: LD_STRING 
59155: ST_TO_ADDR
// hc_name :=  ;
59156: LD_ADDR_OWVAR 26
59160: PUSH
59161: LD_STRING 
59163: ST_TO_ADDR
// un := CreateHuman ;
59164: LD_ADDR_VAR 0 2
59168: PUSH
59169: CALL_OW 44
59173: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
59174: LD_VAR 0 2
59178: PPUSH
59179: LD_INT 1
59181: PPUSH
59182: CALL_OW 51
// tmp := tmp ^ un ;
59186: LD_ADDR_VAR 0 3
59190: PUSH
59191: LD_VAR 0 3
59195: PUSH
59196: LD_VAR 0 2
59200: ADD
59201: ST_TO_ADDR
// end ;
59202: GO 59098
59204: POP
59205: POP
// repeat wait ( 0 0$1 ) ;
59206: LD_INT 35
59208: PPUSH
59209: CALL_OW 67
// for un in tmp do
59213: LD_ADDR_VAR 0 2
59217: PUSH
59218: LD_VAR 0 3
59222: PUSH
59223: FOR_IN
59224: IFFALSE 59298
// begin if IsDead ( un ) then
59226: LD_VAR 0 2
59230: PPUSH
59231: CALL_OW 301
59235: IFFALSE 59255
// begin tmp := tmp diff un ;
59237: LD_ADDR_VAR 0 3
59241: PUSH
59242: LD_VAR 0 3
59246: PUSH
59247: LD_VAR 0 2
59251: DIFF
59252: ST_TO_ADDR
// continue ;
59253: GO 59223
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
59255: LD_VAR 0 2
59259: PPUSH
59260: LD_INT 3
59262: PUSH
59263: LD_INT 22
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PPUSH
59277: CALL_OW 69
59281: PPUSH
59282: LD_VAR 0 2
59286: PPUSH
59287: CALL_OW 74
59291: PPUSH
59292: CALL_OW 115
// end ;
59296: GO 59223
59298: POP
59299: POP
// until not tmp ;
59300: LD_VAR 0 3
59304: NOT
59305: IFFALSE 59206
// end ;
59307: PPOPN 3
59309: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59310: LD_EXP 112
59314: PUSH
59315: LD_EXP 137
59319: AND
59320: IFFALSE 59374
59322: GO 59324
59324: DISABLE
// begin ToLua ( displayTroll(); ) ;
59325: LD_STRING displayTroll();
59327: PPUSH
59328: CALL_OW 559
// wait ( 3 3$00 ) ;
59332: LD_INT 6300
59334: PPUSH
59335: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59339: LD_STRING hideTroll();
59341: PPUSH
59342: CALL_OW 559
// wait ( 1 1$00 ) ;
59346: LD_INT 2100
59348: PPUSH
59349: CALL_OW 67
// ToLua ( displayTroll(); ) ;
59353: LD_STRING displayTroll();
59355: PPUSH
59356: CALL_OW 559
// wait ( 1 1$00 ) ;
59360: LD_INT 2100
59362: PPUSH
59363: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59367: LD_STRING hideTroll();
59369: PPUSH
59370: CALL_OW 559
// end ;
59374: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
59375: LD_EXP 112
59379: PUSH
59380: LD_EXP 138
59384: AND
59385: IFFALSE 59448
59387: GO 59389
59389: DISABLE
59390: LD_INT 0
59392: PPUSH
// begin p := 0 ;
59393: LD_ADDR_VAR 0 1
59397: PUSH
59398: LD_INT 0
59400: ST_TO_ADDR
// repeat game_speed := 1 ;
59401: LD_ADDR_OWVAR 65
59405: PUSH
59406: LD_INT 1
59408: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59409: LD_INT 35
59411: PPUSH
59412: CALL_OW 67
// p := p + 1 ;
59416: LD_ADDR_VAR 0 1
59420: PUSH
59421: LD_VAR 0 1
59425: PUSH
59426: LD_INT 1
59428: PLUS
59429: ST_TO_ADDR
// until p >= 60 ;
59430: LD_VAR 0 1
59434: PUSH
59435: LD_INT 60
59437: GREATEREQUAL
59438: IFFALSE 59401
// game_speed := 4 ;
59440: LD_ADDR_OWVAR 65
59444: PUSH
59445: LD_INT 4
59447: ST_TO_ADDR
// end ;
59448: PPOPN 1
59450: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59451: LD_EXP 112
59455: PUSH
59456: LD_EXP 139
59460: AND
59461: IFFALSE 59607
59463: GO 59465
59465: DISABLE
59466: LD_INT 0
59468: PPUSH
59469: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59470: LD_ADDR_VAR 0 1
59474: PUSH
59475: LD_INT 22
59477: PUSH
59478: LD_OWVAR 2
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: LD_INT 30
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 30
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: LIST
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PPUSH
59519: CALL_OW 69
59523: ST_TO_ADDR
// if not depot then
59524: LD_VAR 0 1
59528: NOT
59529: IFFALSE 59533
// exit ;
59531: GO 59607
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59533: LD_ADDR_VAR 0 2
59537: PUSH
59538: LD_VAR 0 1
59542: PUSH
59543: LD_INT 1
59545: PPUSH
59546: LD_VAR 0 1
59550: PPUSH
59551: CALL_OW 12
59555: ARRAY
59556: PPUSH
59557: CALL_OW 274
59561: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
59562: LD_VAR 0 2
59566: PPUSH
59567: LD_INT 1
59569: PPUSH
59570: LD_INT 0
59572: PPUSH
59573: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
59577: LD_VAR 0 2
59581: PPUSH
59582: LD_INT 2
59584: PPUSH
59585: LD_INT 0
59587: PPUSH
59588: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59592: LD_VAR 0 2
59596: PPUSH
59597: LD_INT 3
59599: PPUSH
59600: LD_INT 0
59602: PPUSH
59603: CALL_OW 277
// end ;
59607: PPOPN 2
59609: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
59610: LD_EXP 112
59614: PUSH
59615: LD_EXP 140
59619: AND
59620: IFFALSE 59717
59622: GO 59624
59624: DISABLE
59625: LD_INT 0
59627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59628: LD_ADDR_VAR 0 1
59632: PUSH
59633: LD_INT 22
59635: PUSH
59636: LD_OWVAR 2
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 21
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: LD_INT 23
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: LIST
59676: PPUSH
59677: CALL_OW 69
59681: ST_TO_ADDR
// if not tmp then
59682: LD_VAR 0 1
59686: NOT
59687: IFFALSE 59691
// exit ;
59689: GO 59717
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59691: LD_VAR 0 1
59695: PUSH
59696: LD_INT 1
59698: PPUSH
59699: LD_VAR 0 1
59703: PPUSH
59704: CALL_OW 12
59708: ARRAY
59709: PPUSH
59710: LD_INT 200
59712: PPUSH
59713: CALL_OW 234
// end ;
59717: PPOPN 1
59719: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59720: LD_EXP 112
59724: PUSH
59725: LD_EXP 141
59729: AND
59730: IFFALSE 59809
59732: GO 59734
59734: DISABLE
59735: LD_INT 0
59737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59738: LD_ADDR_VAR 0 1
59742: PUSH
59743: LD_INT 22
59745: PUSH
59746: LD_OWVAR 2
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 21
59757: PUSH
59758: LD_INT 2
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PPUSH
59769: CALL_OW 69
59773: ST_TO_ADDR
// if not tmp then
59774: LD_VAR 0 1
59778: NOT
59779: IFFALSE 59783
// exit ;
59781: GO 59809
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59783: LD_VAR 0 1
59787: PUSH
59788: LD_INT 1
59790: PPUSH
59791: LD_VAR 0 1
59795: PPUSH
59796: CALL_OW 12
59800: ARRAY
59801: PPUSH
59802: LD_INT 60
59804: PPUSH
59805: CALL_OW 234
// end ;
59809: PPOPN 1
59811: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59812: LD_EXP 112
59816: PUSH
59817: LD_EXP 142
59821: AND
59822: IFFALSE 59921
59824: GO 59826
59826: DISABLE
59827: LD_INT 0
59829: PPUSH
59830: PPUSH
// begin enable ;
59831: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59832: LD_ADDR_VAR 0 1
59836: PUSH
59837: LD_INT 22
59839: PUSH
59840: LD_OWVAR 2
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 61
59851: PUSH
59852: EMPTY
59853: LIST
59854: PUSH
59855: LD_INT 33
59857: PUSH
59858: LD_INT 2
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: LIST
59869: PPUSH
59870: CALL_OW 69
59874: ST_TO_ADDR
// if not tmp then
59875: LD_VAR 0 1
59879: NOT
59880: IFFALSE 59884
// exit ;
59882: GO 59921
// for i in tmp do
59884: LD_ADDR_VAR 0 2
59888: PUSH
59889: LD_VAR 0 1
59893: PUSH
59894: FOR_IN
59895: IFFALSE 59919
// if IsControledBy ( i ) then
59897: LD_VAR 0 2
59901: PPUSH
59902: CALL_OW 312
59906: IFFALSE 59917
// ComUnlink ( i ) ;
59908: LD_VAR 0 2
59912: PPUSH
59913: CALL_OW 136
59917: GO 59894
59919: POP
59920: POP
// end ;
59921: PPOPN 2
59923: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59924: LD_EXP 112
59928: PUSH
59929: LD_EXP 143
59933: AND
59934: IFFALSE 60074
59936: GO 59938
59938: DISABLE
59939: LD_INT 0
59941: PPUSH
59942: PPUSH
// begin ToLua ( displayPowell(); ) ;
59943: LD_STRING displayPowell();
59945: PPUSH
59946: CALL_OW 559
// uc_side := 0 ;
59950: LD_ADDR_OWVAR 20
59954: PUSH
59955: LD_INT 0
59957: ST_TO_ADDR
// uc_nation := 2 ;
59958: LD_ADDR_OWVAR 21
59962: PUSH
59963: LD_INT 2
59965: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59966: LD_ADDR_OWVAR 37
59970: PUSH
59971: LD_INT 14
59973: ST_TO_ADDR
// vc_engine := engine_siberite ;
59974: LD_ADDR_OWVAR 39
59978: PUSH
59979: LD_INT 3
59981: ST_TO_ADDR
// vc_control := control_apeman ;
59982: LD_ADDR_OWVAR 38
59986: PUSH
59987: LD_INT 5
59989: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59990: LD_ADDR_OWVAR 40
59994: PUSH
59995: LD_INT 29
59997: ST_TO_ADDR
// un := CreateVehicle ;
59998: LD_ADDR_VAR 0 2
60002: PUSH
60003: CALL_OW 45
60007: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60008: LD_VAR 0 2
60012: PPUSH
60013: LD_INT 1
60015: PPUSH
60016: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60020: LD_INT 35
60022: PPUSH
60023: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60027: LD_VAR 0 2
60031: PPUSH
60032: LD_INT 22
60034: PUSH
60035: LD_OWVAR 2
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PPUSH
60044: CALL_OW 69
60048: PPUSH
60049: LD_VAR 0 2
60053: PPUSH
60054: CALL_OW 74
60058: PPUSH
60059: CALL_OW 115
// until IsDead ( un ) ;
60063: LD_VAR 0 2
60067: PPUSH
60068: CALL_OW 301
60072: IFFALSE 60020
// end ;
60074: PPOPN 2
60076: END
// every 0 0$1 trigger StreamModeActive and sStu do
60077: LD_EXP 112
60081: PUSH
60082: LD_EXP 151
60086: AND
60087: IFFALSE 60103
60089: GO 60091
60091: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60092: LD_STRING displayStucuk();
60094: PPUSH
60095: CALL_OW 559
// ResetFog ;
60099: CALL_OW 335
// end ;
60103: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60104: LD_EXP 112
60108: PUSH
60109: LD_EXP 144
60113: AND
60114: IFFALSE 60255
60116: GO 60118
60118: DISABLE
60119: LD_INT 0
60121: PPUSH
60122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60123: LD_ADDR_VAR 0 2
60127: PUSH
60128: LD_INT 22
60130: PUSH
60131: LD_OWVAR 2
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 21
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PPUSH
60154: CALL_OW 69
60158: ST_TO_ADDR
// if not tmp then
60159: LD_VAR 0 2
60163: NOT
60164: IFFALSE 60168
// exit ;
60166: GO 60255
// un := tmp [ rand ( 1 , tmp ) ] ;
60168: LD_ADDR_VAR 0 1
60172: PUSH
60173: LD_VAR 0 2
60177: PUSH
60178: LD_INT 1
60180: PPUSH
60181: LD_VAR 0 2
60185: PPUSH
60186: CALL_OW 12
60190: ARRAY
60191: ST_TO_ADDR
// SetSide ( un , 0 ) ;
60192: LD_VAR 0 1
60196: PPUSH
60197: LD_INT 0
60199: PPUSH
60200: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
60204: LD_VAR 0 1
60208: PPUSH
60209: LD_OWVAR 3
60213: PUSH
60214: LD_VAR 0 1
60218: DIFF
60219: PPUSH
60220: LD_VAR 0 1
60224: PPUSH
60225: CALL_OW 74
60229: PPUSH
60230: CALL_OW 115
// wait ( 0 0$20 ) ;
60234: LD_INT 700
60236: PPUSH
60237: CALL_OW 67
// SetSide ( un , your_side ) ;
60241: LD_VAR 0 1
60245: PPUSH
60246: LD_OWVAR 2
60250: PPUSH
60251: CALL_OW 235
// end ;
60255: PPOPN 2
60257: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
60258: LD_EXP 112
60262: PUSH
60263: LD_EXP 145
60267: AND
60268: IFFALSE 60374
60270: GO 60272
60272: DISABLE
60273: LD_INT 0
60275: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60276: LD_ADDR_VAR 0 1
60280: PUSH
60281: LD_INT 22
60283: PUSH
60284: LD_OWVAR 2
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 2
60295: PUSH
60296: LD_INT 30
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 30
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: LIST
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PPUSH
60325: CALL_OW 69
60329: ST_TO_ADDR
// if not depot then
60330: LD_VAR 0 1
60334: NOT
60335: IFFALSE 60339
// exit ;
60337: GO 60374
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
60339: LD_VAR 0 1
60343: PUSH
60344: LD_INT 1
60346: ARRAY
60347: PPUSH
60348: CALL_OW 250
60352: PPUSH
60353: LD_VAR 0 1
60357: PUSH
60358: LD_INT 1
60360: ARRAY
60361: PPUSH
60362: CALL_OW 251
60366: PPUSH
60367: LD_INT 70
60369: PPUSH
60370: CALL_OW 495
// end ;
60374: PPOPN 1
60376: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
60377: LD_EXP 112
60381: PUSH
60382: LD_EXP 146
60386: AND
60387: IFFALSE 60598
60389: GO 60391
60391: DISABLE
60392: LD_INT 0
60394: PPUSH
60395: PPUSH
60396: PPUSH
60397: PPUSH
60398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60399: LD_ADDR_VAR 0 5
60403: PUSH
60404: LD_INT 22
60406: PUSH
60407: LD_OWVAR 2
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 21
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PPUSH
60430: CALL_OW 69
60434: ST_TO_ADDR
// if not tmp then
60435: LD_VAR 0 5
60439: NOT
60440: IFFALSE 60444
// exit ;
60442: GO 60598
// for i in tmp do
60444: LD_ADDR_VAR 0 1
60448: PUSH
60449: LD_VAR 0 5
60453: PUSH
60454: FOR_IN
60455: IFFALSE 60596
// begin d := rand ( 0 , 5 ) ;
60457: LD_ADDR_VAR 0 4
60461: PUSH
60462: LD_INT 0
60464: PPUSH
60465: LD_INT 5
60467: PPUSH
60468: CALL_OW 12
60472: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60473: LD_ADDR_VAR 0 2
60477: PUSH
60478: LD_VAR 0 1
60482: PPUSH
60483: CALL_OW 250
60487: PPUSH
60488: LD_VAR 0 4
60492: PPUSH
60493: LD_INT 3
60495: PPUSH
60496: LD_INT 12
60498: PPUSH
60499: CALL_OW 12
60503: PPUSH
60504: CALL_OW 272
60508: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60509: LD_ADDR_VAR 0 3
60513: PUSH
60514: LD_VAR 0 1
60518: PPUSH
60519: CALL_OW 251
60523: PPUSH
60524: LD_VAR 0 4
60528: PPUSH
60529: LD_INT 3
60531: PPUSH
60532: LD_INT 12
60534: PPUSH
60535: CALL_OW 12
60539: PPUSH
60540: CALL_OW 273
60544: ST_TO_ADDR
// if ValidHex ( x , y ) then
60545: LD_VAR 0 2
60549: PPUSH
60550: LD_VAR 0 3
60554: PPUSH
60555: CALL_OW 488
60559: IFFALSE 60594
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
60561: LD_VAR 0 1
60565: PPUSH
60566: LD_VAR 0 2
60570: PPUSH
60571: LD_VAR 0 3
60575: PPUSH
60576: LD_INT 3
60578: PPUSH
60579: LD_INT 6
60581: PPUSH
60582: CALL_OW 12
60586: PPUSH
60587: LD_INT 1
60589: PPUSH
60590: CALL_OW 483
// end ;
60594: GO 60454
60596: POP
60597: POP
// end ;
60598: PPOPN 5
60600: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60601: LD_EXP 112
60605: PUSH
60606: LD_EXP 147
60610: AND
60611: IFFALSE 60705
60613: GO 60615
60615: DISABLE
60616: LD_INT 0
60618: PPUSH
60619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
60620: LD_ADDR_VAR 0 2
60624: PUSH
60625: LD_INT 22
60627: PUSH
60628: LD_OWVAR 2
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 32
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 21
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: PPUSH
60662: CALL_OW 69
60666: ST_TO_ADDR
// if not tmp then
60667: LD_VAR 0 2
60671: NOT
60672: IFFALSE 60676
// exit ;
60674: GO 60705
// for i in tmp do
60676: LD_ADDR_VAR 0 1
60680: PUSH
60681: LD_VAR 0 2
60685: PUSH
60686: FOR_IN
60687: IFFALSE 60703
// SetFuel ( i , 0 ) ;
60689: LD_VAR 0 1
60693: PPUSH
60694: LD_INT 0
60696: PPUSH
60697: CALL_OW 240
60701: GO 60686
60703: POP
60704: POP
// end ;
60705: PPOPN 2
60707: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60708: LD_EXP 112
60712: PUSH
60713: LD_EXP 148
60717: AND
60718: IFFALSE 60784
60720: GO 60722
60722: DISABLE
60723: LD_INT 0
60725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60726: LD_ADDR_VAR 0 1
60730: PUSH
60731: LD_INT 22
60733: PUSH
60734: LD_OWVAR 2
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 30
60745: PUSH
60746: LD_INT 29
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PPUSH
60757: CALL_OW 69
60761: ST_TO_ADDR
// if not tmp then
60762: LD_VAR 0 1
60766: NOT
60767: IFFALSE 60771
// exit ;
60769: GO 60784
// DestroyUnit ( tmp [ 1 ] ) ;
60771: LD_VAR 0 1
60775: PUSH
60776: LD_INT 1
60778: ARRAY
60779: PPUSH
60780: CALL_OW 65
// end ;
60784: PPOPN 1
60786: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60787: LD_EXP 112
60791: PUSH
60792: LD_EXP 150
60796: AND
60797: IFFALSE 60926
60799: GO 60801
60801: DISABLE
60802: LD_INT 0
60804: PPUSH
// begin uc_side := 0 ;
60805: LD_ADDR_OWVAR 20
60809: PUSH
60810: LD_INT 0
60812: ST_TO_ADDR
// uc_nation := nation_arabian ;
60813: LD_ADDR_OWVAR 21
60817: PUSH
60818: LD_INT 2
60820: ST_TO_ADDR
// hc_gallery :=  ;
60821: LD_ADDR_OWVAR 33
60825: PUSH
60826: LD_STRING 
60828: ST_TO_ADDR
// hc_name :=  ;
60829: LD_ADDR_OWVAR 26
60833: PUSH
60834: LD_STRING 
60836: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60837: LD_INT 1
60839: PPUSH
60840: LD_INT 11
60842: PPUSH
60843: LD_INT 10
60845: PPUSH
60846: CALL_OW 380
// un := CreateHuman ;
60850: LD_ADDR_VAR 0 1
60854: PUSH
60855: CALL_OW 44
60859: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60860: LD_VAR 0 1
60864: PPUSH
60865: LD_INT 1
60867: PPUSH
60868: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60872: LD_INT 35
60874: PPUSH
60875: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60879: LD_VAR 0 1
60883: PPUSH
60884: LD_INT 22
60886: PUSH
60887: LD_OWVAR 2
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PPUSH
60896: CALL_OW 69
60900: PPUSH
60901: LD_VAR 0 1
60905: PPUSH
60906: CALL_OW 74
60910: PPUSH
60911: CALL_OW 115
// until IsDead ( un ) ;
60915: LD_VAR 0 1
60919: PPUSH
60920: CALL_OW 301
60924: IFFALSE 60872
// end ;
60926: PPOPN 1
60928: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60929: LD_EXP 112
60933: PUSH
60934: LD_EXP 152
60938: AND
60939: IFFALSE 60951
60941: GO 60943
60943: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60944: LD_STRING earthquake(getX(game), 0, 32)
60946: PPUSH
60947: CALL_OW 559
60951: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60952: LD_EXP 112
60956: PUSH
60957: LD_EXP 153
60961: AND
60962: IFFALSE 61053
60964: GO 60966
60966: DISABLE
60967: LD_INT 0
60969: PPUSH
// begin enable ;
60970: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60971: LD_ADDR_VAR 0 1
60975: PUSH
60976: LD_INT 22
60978: PUSH
60979: LD_OWVAR 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 21
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 33
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: LIST
61012: PPUSH
61013: CALL_OW 69
61017: ST_TO_ADDR
// if not tmp then
61018: LD_VAR 0 1
61022: NOT
61023: IFFALSE 61027
// exit ;
61025: GO 61053
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61027: LD_VAR 0 1
61031: PUSH
61032: LD_INT 1
61034: PPUSH
61035: LD_VAR 0 1
61039: PPUSH
61040: CALL_OW 12
61044: ARRAY
61045: PPUSH
61046: LD_INT 1
61048: PPUSH
61049: CALL_OW 234
// end ;
61053: PPOPN 1
61055: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61056: LD_EXP 112
61060: PUSH
61061: LD_EXP 154
61065: AND
61066: IFFALSE 61207
61068: GO 61070
61070: DISABLE
61071: LD_INT 0
61073: PPUSH
61074: PPUSH
61075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61076: LD_ADDR_VAR 0 3
61080: PUSH
61081: LD_INT 22
61083: PUSH
61084: LD_OWVAR 2
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 25
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PPUSH
61107: CALL_OW 69
61111: ST_TO_ADDR
// if not tmp then
61112: LD_VAR 0 3
61116: NOT
61117: IFFALSE 61121
// exit ;
61119: GO 61207
// un := tmp [ rand ( 1 , tmp ) ] ;
61121: LD_ADDR_VAR 0 2
61125: PUSH
61126: LD_VAR 0 3
61130: PUSH
61131: LD_INT 1
61133: PPUSH
61134: LD_VAR 0 3
61138: PPUSH
61139: CALL_OW 12
61143: ARRAY
61144: ST_TO_ADDR
// if Crawls ( un ) then
61145: LD_VAR 0 2
61149: PPUSH
61150: CALL_OW 318
61154: IFFALSE 61165
// ComWalk ( un ) ;
61156: LD_VAR 0 2
61160: PPUSH
61161: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
61165: LD_VAR 0 2
61169: PPUSH
61170: LD_INT 9
61172: PPUSH
61173: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
61177: LD_INT 28
61179: PPUSH
61180: LD_OWVAR 2
61184: PPUSH
61185: LD_INT 2
61187: PPUSH
61188: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
61192: LD_INT 29
61194: PPUSH
61195: LD_OWVAR 2
61199: PPUSH
61200: LD_INT 2
61202: PPUSH
61203: CALL_OW 322
// end ;
61207: PPOPN 3
61209: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
61210: LD_EXP 112
61214: PUSH
61215: LD_EXP 155
61219: AND
61220: IFFALSE 61331
61222: GO 61224
61224: DISABLE
61225: LD_INT 0
61227: PPUSH
61228: PPUSH
61229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61230: LD_ADDR_VAR 0 3
61234: PUSH
61235: LD_INT 22
61237: PUSH
61238: LD_OWVAR 2
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 25
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PPUSH
61261: CALL_OW 69
61265: ST_TO_ADDR
// if not tmp then
61266: LD_VAR 0 3
61270: NOT
61271: IFFALSE 61275
// exit ;
61273: GO 61331
// un := tmp [ rand ( 1 , tmp ) ] ;
61275: LD_ADDR_VAR 0 2
61279: PUSH
61280: LD_VAR 0 3
61284: PUSH
61285: LD_INT 1
61287: PPUSH
61288: LD_VAR 0 3
61292: PPUSH
61293: CALL_OW 12
61297: ARRAY
61298: ST_TO_ADDR
// if Crawls ( un ) then
61299: LD_VAR 0 2
61303: PPUSH
61304: CALL_OW 318
61308: IFFALSE 61319
// ComWalk ( un ) ;
61310: LD_VAR 0 2
61314: PPUSH
61315: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61319: LD_VAR 0 2
61323: PPUSH
61324: LD_INT 8
61326: PPUSH
61327: CALL_OW 336
// end ;
61331: PPOPN 3
61333: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
61334: LD_EXP 112
61338: PUSH
61339: LD_EXP 156
61343: AND
61344: IFFALSE 61488
61346: GO 61348
61348: DISABLE
61349: LD_INT 0
61351: PPUSH
61352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
61353: LD_ADDR_VAR 0 2
61357: PUSH
61358: LD_INT 22
61360: PUSH
61361: LD_OWVAR 2
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 21
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: LD_INT 34
61385: PUSH
61386: LD_INT 12
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 34
61395: PUSH
61396: LD_INT 51
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 34
61405: PUSH
61406: LD_INT 32
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: LIST
61423: PPUSH
61424: CALL_OW 69
61428: ST_TO_ADDR
// if not tmp then
61429: LD_VAR 0 2
61433: NOT
61434: IFFALSE 61438
// exit ;
61436: GO 61488
// for i in tmp do
61438: LD_ADDR_VAR 0 1
61442: PUSH
61443: LD_VAR 0 2
61447: PUSH
61448: FOR_IN
61449: IFFALSE 61486
// if GetCargo ( i , mat_artifact ) = 0 then
61451: LD_VAR 0 1
61455: PPUSH
61456: LD_INT 4
61458: PPUSH
61459: CALL_OW 289
61463: PUSH
61464: LD_INT 0
61466: EQUAL
61467: IFFALSE 61484
// SetCargo ( i , mat_siberit , 100 ) ;
61469: LD_VAR 0 1
61473: PPUSH
61474: LD_INT 3
61476: PPUSH
61477: LD_INT 100
61479: PPUSH
61480: CALL_OW 290
61484: GO 61448
61486: POP
61487: POP
// end ;
61488: PPOPN 2
61490: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61491: LD_EXP 112
61495: PUSH
61496: LD_EXP 157
61500: AND
61501: IFFALSE 61684
61503: GO 61505
61505: DISABLE
61506: LD_INT 0
61508: PPUSH
61509: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61510: LD_ADDR_VAR 0 2
61514: PUSH
61515: LD_INT 22
61517: PUSH
61518: LD_OWVAR 2
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PPUSH
61527: CALL_OW 69
61531: ST_TO_ADDR
// if not tmp then
61532: LD_VAR 0 2
61536: NOT
61537: IFFALSE 61541
// exit ;
61539: GO 61684
// for i := 1 to 2 do
61541: LD_ADDR_VAR 0 1
61545: PUSH
61546: DOUBLE
61547: LD_INT 1
61549: DEC
61550: ST_TO_ADDR
61551: LD_INT 2
61553: PUSH
61554: FOR_TO
61555: IFFALSE 61682
// begin uc_side := your_side ;
61557: LD_ADDR_OWVAR 20
61561: PUSH
61562: LD_OWVAR 2
61566: ST_TO_ADDR
// uc_nation := nation_american ;
61567: LD_ADDR_OWVAR 21
61571: PUSH
61572: LD_INT 1
61574: ST_TO_ADDR
// vc_chassis := us_morphling ;
61575: LD_ADDR_OWVAR 37
61579: PUSH
61580: LD_INT 5
61582: ST_TO_ADDR
// vc_engine := engine_siberite ;
61583: LD_ADDR_OWVAR 39
61587: PUSH
61588: LD_INT 3
61590: ST_TO_ADDR
// vc_control := control_computer ;
61591: LD_ADDR_OWVAR 38
61595: PUSH
61596: LD_INT 3
61598: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61599: LD_ADDR_OWVAR 40
61603: PUSH
61604: LD_INT 10
61606: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
61607: LD_VAR 0 2
61611: PUSH
61612: LD_INT 1
61614: ARRAY
61615: PPUSH
61616: CALL_OW 310
61620: NOT
61621: IFFALSE 61668
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
61623: CALL_OW 45
61627: PPUSH
61628: LD_VAR 0 2
61632: PUSH
61633: LD_INT 1
61635: ARRAY
61636: PPUSH
61637: CALL_OW 250
61641: PPUSH
61642: LD_VAR 0 2
61646: PUSH
61647: LD_INT 1
61649: ARRAY
61650: PPUSH
61651: CALL_OW 251
61655: PPUSH
61656: LD_INT 12
61658: PPUSH
61659: LD_INT 1
61661: PPUSH
61662: CALL_OW 50
61666: GO 61680
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61668: CALL_OW 45
61672: PPUSH
61673: LD_INT 1
61675: PPUSH
61676: CALL_OW 51
// end ;
61680: GO 61554
61682: POP
61683: POP
// end ;
61684: PPOPN 2
61686: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61687: LD_EXP 112
61691: PUSH
61692: LD_EXP 158
61696: AND
61697: IFFALSE 61919
61699: GO 61701
61701: DISABLE
61702: LD_INT 0
61704: PPUSH
61705: PPUSH
61706: PPUSH
61707: PPUSH
61708: PPUSH
61709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61710: LD_ADDR_VAR 0 6
61714: PUSH
61715: LD_INT 22
61717: PUSH
61718: LD_OWVAR 2
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 21
61729: PUSH
61730: LD_INT 1
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 3
61739: PUSH
61740: LD_INT 23
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: LIST
61758: PPUSH
61759: CALL_OW 69
61763: ST_TO_ADDR
// if not tmp then
61764: LD_VAR 0 6
61768: NOT
61769: IFFALSE 61773
// exit ;
61771: GO 61919
// s1 := rand ( 1 , 4 ) ;
61773: LD_ADDR_VAR 0 2
61777: PUSH
61778: LD_INT 1
61780: PPUSH
61781: LD_INT 4
61783: PPUSH
61784: CALL_OW 12
61788: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61789: LD_ADDR_VAR 0 4
61793: PUSH
61794: LD_VAR 0 6
61798: PUSH
61799: LD_INT 1
61801: ARRAY
61802: PPUSH
61803: LD_VAR 0 2
61807: PPUSH
61808: CALL_OW 259
61812: ST_TO_ADDR
// if s1 = 1 then
61813: LD_VAR 0 2
61817: PUSH
61818: LD_INT 1
61820: EQUAL
61821: IFFALSE 61841
// s2 := rand ( 2 , 4 ) else
61823: LD_ADDR_VAR 0 3
61827: PUSH
61828: LD_INT 2
61830: PPUSH
61831: LD_INT 4
61833: PPUSH
61834: CALL_OW 12
61838: ST_TO_ADDR
61839: GO 61849
// s2 := 1 ;
61841: LD_ADDR_VAR 0 3
61845: PUSH
61846: LD_INT 1
61848: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61849: LD_ADDR_VAR 0 5
61853: PUSH
61854: LD_VAR 0 6
61858: PUSH
61859: LD_INT 1
61861: ARRAY
61862: PPUSH
61863: LD_VAR 0 3
61867: PPUSH
61868: CALL_OW 259
61872: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61873: LD_VAR 0 6
61877: PUSH
61878: LD_INT 1
61880: ARRAY
61881: PPUSH
61882: LD_VAR 0 2
61886: PPUSH
61887: LD_VAR 0 5
61891: PPUSH
61892: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61896: LD_VAR 0 6
61900: PUSH
61901: LD_INT 1
61903: ARRAY
61904: PPUSH
61905: LD_VAR 0 3
61909: PPUSH
61910: LD_VAR 0 4
61914: PPUSH
61915: CALL_OW 237
// end ;
61919: PPOPN 6
61921: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61922: LD_EXP 112
61926: PUSH
61927: LD_EXP 159
61931: AND
61932: IFFALSE 62011
61934: GO 61936
61936: DISABLE
61937: LD_INT 0
61939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61940: LD_ADDR_VAR 0 1
61944: PUSH
61945: LD_INT 22
61947: PUSH
61948: LD_OWVAR 2
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 30
61959: PUSH
61960: LD_INT 3
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PPUSH
61971: CALL_OW 69
61975: ST_TO_ADDR
// if not tmp then
61976: LD_VAR 0 1
61980: NOT
61981: IFFALSE 61985
// exit ;
61983: GO 62011
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61985: LD_VAR 0 1
61989: PUSH
61990: LD_INT 1
61992: PPUSH
61993: LD_VAR 0 1
61997: PPUSH
61998: CALL_OW 12
62002: ARRAY
62003: PPUSH
62004: LD_INT 1
62006: PPUSH
62007: CALL_OW 234
// end ;
62011: PPOPN 1
62013: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62014: LD_EXP 112
62018: PUSH
62019: LD_EXP 160
62023: AND
62024: IFFALSE 62136
62026: GO 62028
62028: DISABLE
62029: LD_INT 0
62031: PPUSH
62032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62033: LD_ADDR_VAR 0 2
62037: PUSH
62038: LD_INT 22
62040: PUSH
62041: LD_OWVAR 2
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: PUSH
62053: LD_INT 30
62055: PUSH
62056: LD_INT 27
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 30
62065: PUSH
62066: LD_INT 26
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 30
62075: PUSH
62076: LD_INT 28
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PPUSH
62093: CALL_OW 69
62097: ST_TO_ADDR
// if not tmp then
62098: LD_VAR 0 2
62102: NOT
62103: IFFALSE 62107
// exit ;
62105: GO 62136
// for i in tmp do
62107: LD_ADDR_VAR 0 1
62111: PUSH
62112: LD_VAR 0 2
62116: PUSH
62117: FOR_IN
62118: IFFALSE 62134
// SetLives ( i , 1 ) ;
62120: LD_VAR 0 1
62124: PPUSH
62125: LD_INT 1
62127: PPUSH
62128: CALL_OW 234
62132: GO 62117
62134: POP
62135: POP
// end ;
62136: PPOPN 2
62138: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
62139: LD_EXP 112
62143: PUSH
62144: LD_EXP 161
62148: AND
62149: IFFALSE 62436
62151: GO 62153
62153: DISABLE
62154: LD_INT 0
62156: PPUSH
62157: PPUSH
62158: PPUSH
// begin i := rand ( 1 , 7 ) ;
62159: LD_ADDR_VAR 0 1
62163: PUSH
62164: LD_INT 1
62166: PPUSH
62167: LD_INT 7
62169: PPUSH
62170: CALL_OW 12
62174: ST_TO_ADDR
// case i of 1 :
62175: LD_VAR 0 1
62179: PUSH
62180: LD_INT 1
62182: DOUBLE
62183: EQUAL
62184: IFTRUE 62188
62186: GO 62198
62188: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
62189: LD_STRING earthquake(getX(game), 0, 32)
62191: PPUSH
62192: CALL_OW 559
62196: GO 62436
62198: LD_INT 2
62200: DOUBLE
62201: EQUAL
62202: IFTRUE 62206
62204: GO 62220
62206: POP
// begin ToLua ( displayStucuk(); ) ;
62207: LD_STRING displayStucuk();
62209: PPUSH
62210: CALL_OW 559
// ResetFog ;
62214: CALL_OW 335
// end ; 3 :
62218: GO 62436
62220: LD_INT 3
62222: DOUBLE
62223: EQUAL
62224: IFTRUE 62228
62226: GO 62332
62228: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62229: LD_ADDR_VAR 0 2
62233: PUSH
62234: LD_INT 22
62236: PUSH
62237: LD_OWVAR 2
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 25
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PPUSH
62260: CALL_OW 69
62264: ST_TO_ADDR
// if not tmp then
62265: LD_VAR 0 2
62269: NOT
62270: IFFALSE 62274
// exit ;
62272: GO 62436
// un := tmp [ rand ( 1 , tmp ) ] ;
62274: LD_ADDR_VAR 0 3
62278: PUSH
62279: LD_VAR 0 2
62283: PUSH
62284: LD_INT 1
62286: PPUSH
62287: LD_VAR 0 2
62291: PPUSH
62292: CALL_OW 12
62296: ARRAY
62297: ST_TO_ADDR
// if Crawls ( un ) then
62298: LD_VAR 0 3
62302: PPUSH
62303: CALL_OW 318
62307: IFFALSE 62318
// ComWalk ( un ) ;
62309: LD_VAR 0 3
62313: PPUSH
62314: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62318: LD_VAR 0 3
62322: PPUSH
62323: LD_INT 8
62325: PPUSH
62326: CALL_OW 336
// end ; 4 :
62330: GO 62436
62332: LD_INT 4
62334: DOUBLE
62335: EQUAL
62336: IFTRUE 62340
62338: GO 62414
62340: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62341: LD_ADDR_VAR 0 2
62345: PUSH
62346: LD_INT 22
62348: PUSH
62349: LD_OWVAR 2
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 30
62360: PUSH
62361: LD_INT 29
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PPUSH
62372: CALL_OW 69
62376: ST_TO_ADDR
// if not tmp then
62377: LD_VAR 0 2
62381: NOT
62382: IFFALSE 62386
// exit ;
62384: GO 62436
// CenterNowOnUnits ( tmp [ 1 ] ) ;
62386: LD_VAR 0 2
62390: PUSH
62391: LD_INT 1
62393: ARRAY
62394: PPUSH
62395: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
62399: LD_VAR 0 2
62403: PUSH
62404: LD_INT 1
62406: ARRAY
62407: PPUSH
62408: CALL_OW 65
// end ; 5 .. 7 :
62412: GO 62436
62414: LD_INT 5
62416: DOUBLE
62417: GREATEREQUAL
62418: IFFALSE 62426
62420: LD_INT 7
62422: DOUBLE
62423: LESSEQUAL
62424: IFTRUE 62428
62426: GO 62435
62428: POP
// StreamSibBomb ; end ;
62429: CALL 58673 0 0
62433: GO 62436
62435: POP
// end ;
62436: PPOPN 3
62438: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62439: LD_EXP 112
62443: PUSH
62444: LD_EXP 162
62448: AND
62449: IFFALSE 62605
62451: GO 62453
62453: DISABLE
62454: LD_INT 0
62456: PPUSH
62457: PPUSH
62458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62459: LD_ADDR_VAR 0 2
62463: PUSH
62464: LD_INT 81
62466: PUSH
62467: LD_OWVAR 2
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: LD_INT 21
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 21
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: LIST
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PPUSH
62508: CALL_OW 69
62512: ST_TO_ADDR
// if not tmp then
62513: LD_VAR 0 2
62517: NOT
62518: IFFALSE 62522
// exit ;
62520: GO 62605
// p := 0 ;
62522: LD_ADDR_VAR 0 3
62526: PUSH
62527: LD_INT 0
62529: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62530: LD_INT 35
62532: PPUSH
62533: CALL_OW 67
// p := p + 1 ;
62537: LD_ADDR_VAR 0 3
62541: PUSH
62542: LD_VAR 0 3
62546: PUSH
62547: LD_INT 1
62549: PLUS
62550: ST_TO_ADDR
// for i in tmp do
62551: LD_ADDR_VAR 0 1
62555: PUSH
62556: LD_VAR 0 2
62560: PUSH
62561: FOR_IN
62562: IFFALSE 62593
// if GetLives ( i ) < 1000 then
62564: LD_VAR 0 1
62568: PPUSH
62569: CALL_OW 256
62573: PUSH
62574: LD_INT 1000
62576: LESS
62577: IFFALSE 62591
// SetLives ( i , 1000 ) ;
62579: LD_VAR 0 1
62583: PPUSH
62584: LD_INT 1000
62586: PPUSH
62587: CALL_OW 234
62591: GO 62561
62593: POP
62594: POP
// until p > 20 ;
62595: LD_VAR 0 3
62599: PUSH
62600: LD_INT 20
62602: GREATER
62603: IFFALSE 62530
// end ;
62605: PPOPN 3
62607: END
// every 0 0$1 trigger StreamModeActive and sTime do
62608: LD_EXP 112
62612: PUSH
62613: LD_EXP 163
62617: AND
62618: IFFALSE 62653
62620: GO 62622
62622: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
62623: LD_INT 28
62625: PPUSH
62626: LD_OWVAR 2
62630: PPUSH
62631: LD_INT 2
62633: PPUSH
62634: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
62638: LD_INT 30
62640: PPUSH
62641: LD_OWVAR 2
62645: PPUSH
62646: LD_INT 2
62648: PPUSH
62649: CALL_OW 322
// end ;
62653: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62654: LD_EXP 112
62658: PUSH
62659: LD_EXP 164
62663: AND
62664: IFFALSE 62785
62666: GO 62668
62668: DISABLE
62669: LD_INT 0
62671: PPUSH
62672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62673: LD_ADDR_VAR 0 2
62677: PUSH
62678: LD_INT 22
62680: PUSH
62681: LD_OWVAR 2
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 21
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 3
62702: PUSH
62703: LD_INT 23
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: LIST
62721: PPUSH
62722: CALL_OW 69
62726: ST_TO_ADDR
// if not tmp then
62727: LD_VAR 0 2
62731: NOT
62732: IFFALSE 62736
// exit ;
62734: GO 62785
// for i in tmp do
62736: LD_ADDR_VAR 0 1
62740: PUSH
62741: LD_VAR 0 2
62745: PUSH
62746: FOR_IN
62747: IFFALSE 62783
// begin if Crawls ( i ) then
62749: LD_VAR 0 1
62753: PPUSH
62754: CALL_OW 318
62758: IFFALSE 62769
// ComWalk ( i ) ;
62760: LD_VAR 0 1
62764: PPUSH
62765: CALL_OW 138
// SetClass ( i , 2 ) ;
62769: LD_VAR 0 1
62773: PPUSH
62774: LD_INT 2
62776: PPUSH
62777: CALL_OW 336
// end ;
62781: GO 62746
62783: POP
62784: POP
// end ;
62785: PPOPN 2
62787: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62788: LD_EXP 112
62792: PUSH
62793: LD_EXP 165
62797: AND
62798: IFFALSE 63086
62800: GO 62802
62802: DISABLE
62803: LD_INT 0
62805: PPUSH
62806: PPUSH
62807: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62808: LD_OWVAR 2
62812: PPUSH
62813: LD_INT 9
62815: PPUSH
62816: LD_INT 1
62818: PPUSH
62819: LD_INT 1
62821: PPUSH
62822: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62826: LD_INT 9
62828: PPUSH
62829: LD_OWVAR 2
62833: PPUSH
62834: CALL_OW 343
// uc_side := 9 ;
62838: LD_ADDR_OWVAR 20
62842: PUSH
62843: LD_INT 9
62845: ST_TO_ADDR
// uc_nation := 2 ;
62846: LD_ADDR_OWVAR 21
62850: PUSH
62851: LD_INT 2
62853: ST_TO_ADDR
// hc_name := Dark Warrior ;
62854: LD_ADDR_OWVAR 26
62858: PUSH
62859: LD_STRING Dark Warrior
62861: ST_TO_ADDR
// hc_gallery :=  ;
62862: LD_ADDR_OWVAR 33
62866: PUSH
62867: LD_STRING 
62869: ST_TO_ADDR
// hc_noskilllimit := true ;
62870: LD_ADDR_OWVAR 76
62874: PUSH
62875: LD_INT 1
62877: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62878: LD_ADDR_OWVAR 31
62882: PUSH
62883: LD_INT 30
62885: PUSH
62886: LD_INT 30
62888: PUSH
62889: LD_INT 30
62891: PUSH
62892: LD_INT 30
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: ST_TO_ADDR
// un := CreateHuman ;
62901: LD_ADDR_VAR 0 3
62905: PUSH
62906: CALL_OW 44
62910: ST_TO_ADDR
// hc_noskilllimit := false ;
62911: LD_ADDR_OWVAR 76
62915: PUSH
62916: LD_INT 0
62918: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62919: LD_VAR 0 3
62923: PPUSH
62924: LD_INT 1
62926: PPUSH
62927: CALL_OW 51
// ToLua ( playRanger() ) ;
62931: LD_STRING playRanger()
62933: PPUSH
62934: CALL_OW 559
// p := 0 ;
62938: LD_ADDR_VAR 0 2
62942: PUSH
62943: LD_INT 0
62945: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62946: LD_INT 35
62948: PPUSH
62949: CALL_OW 67
// p := p + 1 ;
62953: LD_ADDR_VAR 0 2
62957: PUSH
62958: LD_VAR 0 2
62962: PUSH
62963: LD_INT 1
62965: PLUS
62966: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62967: LD_VAR 0 3
62971: PPUSH
62972: CALL_OW 256
62976: PUSH
62977: LD_INT 1000
62979: LESS
62980: IFFALSE 62994
// SetLives ( un , 1000 ) ;
62982: LD_VAR 0 3
62986: PPUSH
62987: LD_INT 1000
62989: PPUSH
62990: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62994: LD_VAR 0 3
62998: PPUSH
62999: LD_INT 81
63001: PUSH
63002: LD_OWVAR 2
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 91
63013: PUSH
63014: LD_VAR 0 3
63018: PUSH
63019: LD_INT 30
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: LIST
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PPUSH
63031: CALL_OW 69
63035: PPUSH
63036: LD_VAR 0 3
63040: PPUSH
63041: CALL_OW 74
63045: PPUSH
63046: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63050: LD_VAR 0 2
63054: PUSH
63055: LD_INT 80
63057: GREATER
63058: PUSH
63059: LD_VAR 0 3
63063: PPUSH
63064: CALL_OW 301
63068: OR
63069: IFFALSE 62946
// if un then
63071: LD_VAR 0 3
63075: IFFALSE 63086
// RemoveUnit ( un ) ;
63077: LD_VAR 0 3
63081: PPUSH
63082: CALL_OW 64
// end ;
63086: PPOPN 3
63088: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63089: LD_EXP 166
63093: IFFALSE 63209
63095: GO 63097
63097: DISABLE
63098: LD_INT 0
63100: PPUSH
63101: PPUSH
63102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63103: LD_ADDR_VAR 0 2
63107: PUSH
63108: LD_INT 81
63110: PUSH
63111: LD_OWVAR 2
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 21
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PPUSH
63134: CALL_OW 69
63138: ST_TO_ADDR
// ToLua ( playComputer() ) ;
63139: LD_STRING playComputer()
63141: PPUSH
63142: CALL_OW 559
// if not tmp then
63146: LD_VAR 0 2
63150: NOT
63151: IFFALSE 63155
// exit ;
63153: GO 63209
// for i in tmp do
63155: LD_ADDR_VAR 0 1
63159: PUSH
63160: LD_VAR 0 2
63164: PUSH
63165: FOR_IN
63166: IFFALSE 63207
// for j := 1 to 4 do
63168: LD_ADDR_VAR 0 3
63172: PUSH
63173: DOUBLE
63174: LD_INT 1
63176: DEC
63177: ST_TO_ADDR
63178: LD_INT 4
63180: PUSH
63181: FOR_TO
63182: IFFALSE 63203
// SetSkill ( i , j , 10 ) ;
63184: LD_VAR 0 1
63188: PPUSH
63189: LD_VAR 0 3
63193: PPUSH
63194: LD_INT 10
63196: PPUSH
63197: CALL_OW 237
63201: GO 63181
63203: POP
63204: POP
63205: GO 63165
63207: POP
63208: POP
// end ;
63209: PPOPN 3
63211: END
// every 0 0$1 trigger s30 do var i , tmp ;
63212: LD_EXP 167
63216: IFFALSE 63285
63218: GO 63220
63220: DISABLE
63221: LD_INT 0
63223: PPUSH
63224: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63225: LD_ADDR_VAR 0 2
63229: PUSH
63230: LD_INT 22
63232: PUSH
63233: LD_OWVAR 2
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PPUSH
63242: CALL_OW 69
63246: ST_TO_ADDR
// if not tmp then
63247: LD_VAR 0 2
63251: NOT
63252: IFFALSE 63256
// exit ;
63254: GO 63285
// for i in tmp do
63256: LD_ADDR_VAR 0 1
63260: PUSH
63261: LD_VAR 0 2
63265: PUSH
63266: FOR_IN
63267: IFFALSE 63283
// SetLives ( i , 300 ) ;
63269: LD_VAR 0 1
63273: PPUSH
63274: LD_INT 300
63276: PPUSH
63277: CALL_OW 234
63281: GO 63266
63283: POP
63284: POP
// end ;
63285: PPOPN 2
63287: END
// every 0 0$1 trigger s60 do var i , tmp ;
63288: LD_EXP 168
63292: IFFALSE 63361
63294: GO 63296
63296: DISABLE
63297: LD_INT 0
63299: PPUSH
63300: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63301: LD_ADDR_VAR 0 2
63305: PUSH
63306: LD_INT 22
63308: PUSH
63309: LD_OWVAR 2
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PPUSH
63318: CALL_OW 69
63322: ST_TO_ADDR
// if not tmp then
63323: LD_VAR 0 2
63327: NOT
63328: IFFALSE 63332
// exit ;
63330: GO 63361
// for i in tmp do
63332: LD_ADDR_VAR 0 1
63336: PUSH
63337: LD_VAR 0 2
63341: PUSH
63342: FOR_IN
63343: IFFALSE 63359
// SetLives ( i , 600 ) ;
63345: LD_VAR 0 1
63349: PPUSH
63350: LD_INT 600
63352: PPUSH
63353: CALL_OW 234
63357: GO 63342
63359: POP
63360: POP
// end ;
63361: PPOPN 2
63363: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63364: LD_INT 0
63366: PPUSH
// case cmd of 301 :
63367: LD_VAR 0 1
63371: PUSH
63372: LD_INT 301
63374: DOUBLE
63375: EQUAL
63376: IFTRUE 63380
63378: GO 63412
63380: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
63381: LD_VAR 0 6
63385: PPUSH
63386: LD_VAR 0 7
63390: PPUSH
63391: LD_VAR 0 8
63395: PPUSH
63396: LD_VAR 0 4
63400: PPUSH
63401: LD_VAR 0 5
63405: PPUSH
63406: CALL 64613 0 5
63410: GO 63533
63412: LD_INT 302
63414: DOUBLE
63415: EQUAL
63416: IFTRUE 63420
63418: GO 63457
63420: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63421: LD_VAR 0 6
63425: PPUSH
63426: LD_VAR 0 7
63430: PPUSH
63431: LD_VAR 0 8
63435: PPUSH
63436: LD_VAR 0 9
63440: PPUSH
63441: LD_VAR 0 4
63445: PPUSH
63446: LD_VAR 0 5
63450: PPUSH
63451: CALL 64704 0 6
63455: GO 63533
63457: LD_INT 303
63459: DOUBLE
63460: EQUAL
63461: IFTRUE 63465
63463: GO 63502
63465: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63466: LD_VAR 0 6
63470: PPUSH
63471: LD_VAR 0 7
63475: PPUSH
63476: LD_VAR 0 8
63480: PPUSH
63481: LD_VAR 0 9
63485: PPUSH
63486: LD_VAR 0 4
63490: PPUSH
63491: LD_VAR 0 5
63495: PPUSH
63496: CALL 63538 0 6
63500: GO 63533
63502: LD_INT 304
63504: DOUBLE
63505: EQUAL
63506: IFTRUE 63510
63508: GO 63532
63510: POP
// hHackTeleport ( unit , x , y ) ; end ;
63511: LD_VAR 0 2
63515: PPUSH
63516: LD_VAR 0 4
63520: PPUSH
63521: LD_VAR 0 5
63525: PPUSH
63526: CALL 65297 0 3
63530: GO 63533
63532: POP
// end ;
63533: LD_VAR 0 12
63537: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63538: LD_INT 0
63540: PPUSH
63541: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63542: LD_VAR 0 1
63546: PUSH
63547: LD_INT 1
63549: LESS
63550: PUSH
63551: LD_VAR 0 1
63555: PUSH
63556: LD_INT 3
63558: GREATER
63559: OR
63560: PUSH
63561: LD_VAR 0 5
63565: PPUSH
63566: LD_VAR 0 6
63570: PPUSH
63571: CALL_OW 428
63575: OR
63576: IFFALSE 63580
// exit ;
63578: GO 64300
// uc_side := your_side ;
63580: LD_ADDR_OWVAR 20
63584: PUSH
63585: LD_OWVAR 2
63589: ST_TO_ADDR
// uc_nation := nation ;
63590: LD_ADDR_OWVAR 21
63594: PUSH
63595: LD_VAR 0 1
63599: ST_TO_ADDR
// bc_level = 1 ;
63600: LD_ADDR_OWVAR 43
63604: PUSH
63605: LD_INT 1
63607: ST_TO_ADDR
// case btype of 1 :
63608: LD_VAR 0 2
63612: PUSH
63613: LD_INT 1
63615: DOUBLE
63616: EQUAL
63617: IFTRUE 63621
63619: GO 63632
63621: POP
// bc_type := b_depot ; 2 :
63622: LD_ADDR_OWVAR 42
63626: PUSH
63627: LD_INT 0
63629: ST_TO_ADDR
63630: GO 64244
63632: LD_INT 2
63634: DOUBLE
63635: EQUAL
63636: IFTRUE 63640
63638: GO 63651
63640: POP
// bc_type := b_warehouse ; 3 :
63641: LD_ADDR_OWVAR 42
63645: PUSH
63646: LD_INT 1
63648: ST_TO_ADDR
63649: GO 64244
63651: LD_INT 3
63653: DOUBLE
63654: EQUAL
63655: IFTRUE 63659
63657: GO 63670
63659: POP
// bc_type := b_lab ; 4 .. 9 :
63660: LD_ADDR_OWVAR 42
63664: PUSH
63665: LD_INT 6
63667: ST_TO_ADDR
63668: GO 64244
63670: LD_INT 4
63672: DOUBLE
63673: GREATEREQUAL
63674: IFFALSE 63682
63676: LD_INT 9
63678: DOUBLE
63679: LESSEQUAL
63680: IFTRUE 63684
63682: GO 63736
63684: POP
// begin bc_type := b_lab_half ;
63685: LD_ADDR_OWVAR 42
63689: PUSH
63690: LD_INT 7
63692: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63693: LD_ADDR_OWVAR 44
63697: PUSH
63698: LD_INT 10
63700: PUSH
63701: LD_INT 11
63703: PUSH
63704: LD_INT 12
63706: PUSH
63707: LD_INT 15
63709: PUSH
63710: LD_INT 14
63712: PUSH
63713: LD_INT 13
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: PUSH
63724: LD_VAR 0 2
63728: PUSH
63729: LD_INT 3
63731: MINUS
63732: ARRAY
63733: ST_TO_ADDR
// end ; 10 .. 13 :
63734: GO 64244
63736: LD_INT 10
63738: DOUBLE
63739: GREATEREQUAL
63740: IFFALSE 63748
63742: LD_INT 13
63744: DOUBLE
63745: LESSEQUAL
63746: IFTRUE 63750
63748: GO 63827
63750: POP
// begin bc_type := b_lab_full ;
63751: LD_ADDR_OWVAR 42
63755: PUSH
63756: LD_INT 8
63758: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63759: LD_ADDR_OWVAR 44
63763: PUSH
63764: LD_INT 10
63766: PUSH
63767: LD_INT 12
63769: PUSH
63770: LD_INT 14
63772: PUSH
63773: LD_INT 13
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: PUSH
63782: LD_VAR 0 2
63786: PUSH
63787: LD_INT 9
63789: MINUS
63790: ARRAY
63791: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63792: LD_ADDR_OWVAR 45
63796: PUSH
63797: LD_INT 11
63799: PUSH
63800: LD_INT 15
63802: PUSH
63803: LD_INT 12
63805: PUSH
63806: LD_INT 15
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: PUSH
63815: LD_VAR 0 2
63819: PUSH
63820: LD_INT 9
63822: MINUS
63823: ARRAY
63824: ST_TO_ADDR
// end ; 14 :
63825: GO 64244
63827: LD_INT 14
63829: DOUBLE
63830: EQUAL
63831: IFTRUE 63835
63833: GO 63846
63835: POP
// bc_type := b_workshop ; 15 :
63836: LD_ADDR_OWVAR 42
63840: PUSH
63841: LD_INT 2
63843: ST_TO_ADDR
63844: GO 64244
63846: LD_INT 15
63848: DOUBLE
63849: EQUAL
63850: IFTRUE 63854
63852: GO 63865
63854: POP
// bc_type := b_factory ; 16 :
63855: LD_ADDR_OWVAR 42
63859: PUSH
63860: LD_INT 3
63862: ST_TO_ADDR
63863: GO 64244
63865: LD_INT 16
63867: DOUBLE
63868: EQUAL
63869: IFTRUE 63873
63871: GO 63884
63873: POP
// bc_type := b_ext_gun ; 17 :
63874: LD_ADDR_OWVAR 42
63878: PUSH
63879: LD_INT 17
63881: ST_TO_ADDR
63882: GO 64244
63884: LD_INT 17
63886: DOUBLE
63887: EQUAL
63888: IFTRUE 63892
63890: GO 63920
63892: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63893: LD_ADDR_OWVAR 42
63897: PUSH
63898: LD_INT 19
63900: PUSH
63901: LD_INT 23
63903: PUSH
63904: LD_INT 19
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: PUSH
63912: LD_VAR 0 1
63916: ARRAY
63917: ST_TO_ADDR
63918: GO 64244
63920: LD_INT 18
63922: DOUBLE
63923: EQUAL
63924: IFTRUE 63928
63926: GO 63939
63928: POP
// bc_type := b_ext_radar ; 19 :
63929: LD_ADDR_OWVAR 42
63933: PUSH
63934: LD_INT 20
63936: ST_TO_ADDR
63937: GO 64244
63939: LD_INT 19
63941: DOUBLE
63942: EQUAL
63943: IFTRUE 63947
63945: GO 63958
63947: POP
// bc_type := b_ext_radio ; 20 :
63948: LD_ADDR_OWVAR 42
63952: PUSH
63953: LD_INT 22
63955: ST_TO_ADDR
63956: GO 64244
63958: LD_INT 20
63960: DOUBLE
63961: EQUAL
63962: IFTRUE 63966
63964: GO 63977
63966: POP
// bc_type := b_ext_siberium ; 21 :
63967: LD_ADDR_OWVAR 42
63971: PUSH
63972: LD_INT 21
63974: ST_TO_ADDR
63975: GO 64244
63977: LD_INT 21
63979: DOUBLE
63980: EQUAL
63981: IFTRUE 63985
63983: GO 63996
63985: POP
// bc_type := b_ext_computer ; 22 :
63986: LD_ADDR_OWVAR 42
63990: PUSH
63991: LD_INT 24
63993: ST_TO_ADDR
63994: GO 64244
63996: LD_INT 22
63998: DOUBLE
63999: EQUAL
64000: IFTRUE 64004
64002: GO 64015
64004: POP
// bc_type := b_ext_track ; 23 :
64005: LD_ADDR_OWVAR 42
64009: PUSH
64010: LD_INT 16
64012: ST_TO_ADDR
64013: GO 64244
64015: LD_INT 23
64017: DOUBLE
64018: EQUAL
64019: IFTRUE 64023
64021: GO 64034
64023: POP
// bc_type := b_ext_laser ; 24 :
64024: LD_ADDR_OWVAR 42
64028: PUSH
64029: LD_INT 25
64031: ST_TO_ADDR
64032: GO 64244
64034: LD_INT 24
64036: DOUBLE
64037: EQUAL
64038: IFTRUE 64042
64040: GO 64053
64042: POP
// bc_type := b_control_tower ; 25 :
64043: LD_ADDR_OWVAR 42
64047: PUSH
64048: LD_INT 36
64050: ST_TO_ADDR
64051: GO 64244
64053: LD_INT 25
64055: DOUBLE
64056: EQUAL
64057: IFTRUE 64061
64059: GO 64072
64061: POP
// bc_type := b_breastwork ; 26 :
64062: LD_ADDR_OWVAR 42
64066: PUSH
64067: LD_INT 31
64069: ST_TO_ADDR
64070: GO 64244
64072: LD_INT 26
64074: DOUBLE
64075: EQUAL
64076: IFTRUE 64080
64078: GO 64091
64080: POP
// bc_type := b_bunker ; 27 :
64081: LD_ADDR_OWVAR 42
64085: PUSH
64086: LD_INT 32
64088: ST_TO_ADDR
64089: GO 64244
64091: LD_INT 27
64093: DOUBLE
64094: EQUAL
64095: IFTRUE 64099
64097: GO 64110
64099: POP
// bc_type := b_turret ; 28 :
64100: LD_ADDR_OWVAR 42
64104: PUSH
64105: LD_INT 33
64107: ST_TO_ADDR
64108: GO 64244
64110: LD_INT 28
64112: DOUBLE
64113: EQUAL
64114: IFTRUE 64118
64116: GO 64129
64118: POP
// bc_type := b_armoury ; 29 :
64119: LD_ADDR_OWVAR 42
64123: PUSH
64124: LD_INT 4
64126: ST_TO_ADDR
64127: GO 64244
64129: LD_INT 29
64131: DOUBLE
64132: EQUAL
64133: IFTRUE 64137
64135: GO 64148
64137: POP
// bc_type := b_barracks ; 30 :
64138: LD_ADDR_OWVAR 42
64142: PUSH
64143: LD_INT 5
64145: ST_TO_ADDR
64146: GO 64244
64148: LD_INT 30
64150: DOUBLE
64151: EQUAL
64152: IFTRUE 64156
64154: GO 64167
64156: POP
// bc_type := b_solar_power ; 31 :
64157: LD_ADDR_OWVAR 42
64161: PUSH
64162: LD_INT 27
64164: ST_TO_ADDR
64165: GO 64244
64167: LD_INT 31
64169: DOUBLE
64170: EQUAL
64171: IFTRUE 64175
64173: GO 64186
64175: POP
// bc_type := b_oil_power ; 32 :
64176: LD_ADDR_OWVAR 42
64180: PUSH
64181: LD_INT 26
64183: ST_TO_ADDR
64184: GO 64244
64186: LD_INT 32
64188: DOUBLE
64189: EQUAL
64190: IFTRUE 64194
64192: GO 64205
64194: POP
// bc_type := b_siberite_power ; 33 :
64195: LD_ADDR_OWVAR 42
64199: PUSH
64200: LD_INT 28
64202: ST_TO_ADDR
64203: GO 64244
64205: LD_INT 33
64207: DOUBLE
64208: EQUAL
64209: IFTRUE 64213
64211: GO 64224
64213: POP
// bc_type := b_oil_mine ; 34 :
64214: LD_ADDR_OWVAR 42
64218: PUSH
64219: LD_INT 29
64221: ST_TO_ADDR
64222: GO 64244
64224: LD_INT 34
64226: DOUBLE
64227: EQUAL
64228: IFTRUE 64232
64230: GO 64243
64232: POP
// bc_type := b_siberite_mine ; end ;
64233: LD_ADDR_OWVAR 42
64237: PUSH
64238: LD_INT 30
64240: ST_TO_ADDR
64241: GO 64244
64243: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64244: LD_ADDR_VAR 0 8
64248: PUSH
64249: LD_VAR 0 5
64253: PPUSH
64254: LD_VAR 0 6
64258: PPUSH
64259: LD_VAR 0 3
64263: PPUSH
64264: CALL_OW 47
64268: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64269: LD_OWVAR 42
64273: PUSH
64274: LD_INT 32
64276: PUSH
64277: LD_INT 33
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: IN
64284: IFFALSE 64300
// PlaceWeaponTurret ( b , weapon ) ;
64286: LD_VAR 0 8
64290: PPUSH
64291: LD_VAR 0 4
64295: PPUSH
64296: CALL_OW 431
// end ;
64300: LD_VAR 0 7
64304: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64305: LD_INT 0
64307: PPUSH
64308: PPUSH
64309: PPUSH
64310: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64311: LD_ADDR_VAR 0 4
64315: PUSH
64316: LD_INT 22
64318: PUSH
64319: LD_OWVAR 2
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 2
64330: PUSH
64331: LD_INT 30
64333: PUSH
64334: LD_INT 0
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 30
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: LIST
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PPUSH
64360: CALL_OW 69
64364: ST_TO_ADDR
// if not tmp then
64365: LD_VAR 0 4
64369: NOT
64370: IFFALSE 64374
// exit ;
64372: GO 64433
// for i in tmp do
64374: LD_ADDR_VAR 0 2
64378: PUSH
64379: LD_VAR 0 4
64383: PUSH
64384: FOR_IN
64385: IFFALSE 64431
// for j = 1 to 3 do
64387: LD_ADDR_VAR 0 3
64391: PUSH
64392: DOUBLE
64393: LD_INT 1
64395: DEC
64396: ST_TO_ADDR
64397: LD_INT 3
64399: PUSH
64400: FOR_TO
64401: IFFALSE 64427
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64403: LD_VAR 0 2
64407: PPUSH
64408: CALL_OW 274
64412: PPUSH
64413: LD_VAR 0 3
64417: PPUSH
64418: LD_INT 99999
64420: PPUSH
64421: CALL_OW 277
64425: GO 64400
64427: POP
64428: POP
64429: GO 64384
64431: POP
64432: POP
// end ;
64433: LD_VAR 0 1
64437: RET
// export function hHackSetLevel10 ; var i , j ; begin
64438: LD_INT 0
64440: PPUSH
64441: PPUSH
64442: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64443: LD_ADDR_VAR 0 2
64447: PUSH
64448: LD_INT 21
64450: PUSH
64451: LD_INT 1
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PPUSH
64458: CALL_OW 69
64462: PUSH
64463: FOR_IN
64464: IFFALSE 64516
// if IsSelected ( i ) then
64466: LD_VAR 0 2
64470: PPUSH
64471: CALL_OW 306
64475: IFFALSE 64514
// begin for j := 1 to 4 do
64477: LD_ADDR_VAR 0 3
64481: PUSH
64482: DOUBLE
64483: LD_INT 1
64485: DEC
64486: ST_TO_ADDR
64487: LD_INT 4
64489: PUSH
64490: FOR_TO
64491: IFFALSE 64512
// SetSkill ( i , j , 10 ) ;
64493: LD_VAR 0 2
64497: PPUSH
64498: LD_VAR 0 3
64502: PPUSH
64503: LD_INT 10
64505: PPUSH
64506: CALL_OW 237
64510: GO 64490
64512: POP
64513: POP
// end ;
64514: GO 64463
64516: POP
64517: POP
// end ;
64518: LD_VAR 0 1
64522: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64523: LD_INT 0
64525: PPUSH
64526: PPUSH
64527: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64528: LD_ADDR_VAR 0 2
64532: PUSH
64533: LD_INT 22
64535: PUSH
64536: LD_OWVAR 2
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 21
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PPUSH
64559: CALL_OW 69
64563: PUSH
64564: FOR_IN
64565: IFFALSE 64606
// begin for j := 1 to 4 do
64567: LD_ADDR_VAR 0 3
64571: PUSH
64572: DOUBLE
64573: LD_INT 1
64575: DEC
64576: ST_TO_ADDR
64577: LD_INT 4
64579: PUSH
64580: FOR_TO
64581: IFFALSE 64602
// SetSkill ( i , j , 10 ) ;
64583: LD_VAR 0 2
64587: PPUSH
64588: LD_VAR 0 3
64592: PPUSH
64593: LD_INT 10
64595: PPUSH
64596: CALL_OW 237
64600: GO 64580
64602: POP
64603: POP
// end ;
64604: GO 64564
64606: POP
64607: POP
// end ;
64608: LD_VAR 0 1
64612: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
64613: LD_INT 0
64615: PPUSH
// uc_side := your_side ;
64616: LD_ADDR_OWVAR 20
64620: PUSH
64621: LD_OWVAR 2
64625: ST_TO_ADDR
// uc_nation := nation ;
64626: LD_ADDR_OWVAR 21
64630: PUSH
64631: LD_VAR 0 1
64635: ST_TO_ADDR
// InitHc ;
64636: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64640: LD_INT 0
64642: PPUSH
64643: LD_VAR 0 2
64647: PPUSH
64648: LD_VAR 0 3
64652: PPUSH
64653: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64657: LD_VAR 0 4
64661: PPUSH
64662: LD_VAR 0 5
64666: PPUSH
64667: CALL_OW 428
64671: PUSH
64672: LD_INT 0
64674: EQUAL
64675: IFFALSE 64699
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64677: CALL_OW 44
64681: PPUSH
64682: LD_VAR 0 4
64686: PPUSH
64687: LD_VAR 0 5
64691: PPUSH
64692: LD_INT 1
64694: PPUSH
64695: CALL_OW 48
// end ;
64699: LD_VAR 0 6
64703: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64704: LD_INT 0
64706: PPUSH
64707: PPUSH
// uc_side := your_side ;
64708: LD_ADDR_OWVAR 20
64712: PUSH
64713: LD_OWVAR 2
64717: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64718: LD_VAR 0 1
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: LD_INT 2
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: LD_INT 4
64734: PUSH
64735: LD_INT 5
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: IN
64745: IFFALSE 64757
// uc_nation := nation_american else
64747: LD_ADDR_OWVAR 21
64751: PUSH
64752: LD_INT 1
64754: ST_TO_ADDR
64755: GO 64800
// if chassis in [ 11 , 12 , 13 , 14 ] then
64757: LD_VAR 0 1
64761: PUSH
64762: LD_INT 11
64764: PUSH
64765: LD_INT 12
64767: PUSH
64768: LD_INT 13
64770: PUSH
64771: LD_INT 14
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: IN
64780: IFFALSE 64792
// uc_nation := nation_arabian else
64782: LD_ADDR_OWVAR 21
64786: PUSH
64787: LD_INT 2
64789: ST_TO_ADDR
64790: GO 64800
// uc_nation := nation_russian ;
64792: LD_ADDR_OWVAR 21
64796: PUSH
64797: LD_INT 3
64799: ST_TO_ADDR
// vc_chassis := chassis ;
64800: LD_ADDR_OWVAR 37
64804: PUSH
64805: LD_VAR 0 1
64809: ST_TO_ADDR
// vc_engine := engine ;
64810: LD_ADDR_OWVAR 39
64814: PUSH
64815: LD_VAR 0 2
64819: ST_TO_ADDR
// vc_control := control ;
64820: LD_ADDR_OWVAR 38
64824: PUSH
64825: LD_VAR 0 3
64829: ST_TO_ADDR
// vc_weapon := weapon ;
64830: LD_ADDR_OWVAR 40
64834: PUSH
64835: LD_VAR 0 4
64839: ST_TO_ADDR
// un := CreateVehicle ;
64840: LD_ADDR_VAR 0 8
64844: PUSH
64845: CALL_OW 45
64849: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64850: LD_VAR 0 8
64854: PPUSH
64855: LD_INT 0
64857: PPUSH
64858: LD_INT 5
64860: PPUSH
64861: CALL_OW 12
64865: PPUSH
64866: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64870: LD_VAR 0 8
64874: PPUSH
64875: LD_VAR 0 5
64879: PPUSH
64880: LD_VAR 0 6
64884: PPUSH
64885: LD_INT 1
64887: PPUSH
64888: CALL_OW 48
// end ;
64892: LD_VAR 0 7
64896: RET
// export hInvincible ; every 1 do
64897: GO 64899
64899: DISABLE
// hInvincible := [ ] ;
64900: LD_ADDR_EXP 169
64904: PUSH
64905: EMPTY
64906: ST_TO_ADDR
64907: END
// every 10 do var i ;
64908: GO 64910
64910: DISABLE
64911: LD_INT 0
64913: PPUSH
// begin enable ;
64914: ENABLE
// if not hInvincible then
64915: LD_EXP 169
64919: NOT
64920: IFFALSE 64924
// exit ;
64922: GO 64968
// for i in hInvincible do
64924: LD_ADDR_VAR 0 1
64928: PUSH
64929: LD_EXP 169
64933: PUSH
64934: FOR_IN
64935: IFFALSE 64966
// if GetLives ( i ) < 1000 then
64937: LD_VAR 0 1
64941: PPUSH
64942: CALL_OW 256
64946: PUSH
64947: LD_INT 1000
64949: LESS
64950: IFFALSE 64964
// SetLives ( i , 1000 ) ;
64952: LD_VAR 0 1
64956: PPUSH
64957: LD_INT 1000
64959: PPUSH
64960: CALL_OW 234
64964: GO 64934
64966: POP
64967: POP
// end ;
64968: PPOPN 1
64970: END
// export function hHackInvincible ; var i ; begin
64971: LD_INT 0
64973: PPUSH
64974: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64975: LD_ADDR_VAR 0 2
64979: PUSH
64980: LD_INT 2
64982: PUSH
64983: LD_INT 21
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 21
64995: PUSH
64996: LD_INT 2
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: LIST
65007: PPUSH
65008: CALL_OW 69
65012: PUSH
65013: FOR_IN
65014: IFFALSE 65075
// if IsSelected ( i ) then
65016: LD_VAR 0 2
65020: PPUSH
65021: CALL_OW 306
65025: IFFALSE 65073
// begin if i in hInvincible then
65027: LD_VAR 0 2
65031: PUSH
65032: LD_EXP 169
65036: IN
65037: IFFALSE 65057
// hInvincible := hInvincible diff i else
65039: LD_ADDR_EXP 169
65043: PUSH
65044: LD_EXP 169
65048: PUSH
65049: LD_VAR 0 2
65053: DIFF
65054: ST_TO_ADDR
65055: GO 65073
// hInvincible := hInvincible union i ;
65057: LD_ADDR_EXP 169
65061: PUSH
65062: LD_EXP 169
65066: PUSH
65067: LD_VAR 0 2
65071: UNION
65072: ST_TO_ADDR
// end ;
65073: GO 65013
65075: POP
65076: POP
// end ;
65077: LD_VAR 0 1
65081: RET
// export function hHackInvisible ; var i , j ; begin
65082: LD_INT 0
65084: PPUSH
65085: PPUSH
65086: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65087: LD_ADDR_VAR 0 2
65091: PUSH
65092: LD_INT 21
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PPUSH
65102: CALL_OW 69
65106: PUSH
65107: FOR_IN
65108: IFFALSE 65132
// if IsSelected ( i ) then
65110: LD_VAR 0 2
65114: PPUSH
65115: CALL_OW 306
65119: IFFALSE 65130
// ComForceInvisible ( i ) ;
65121: LD_VAR 0 2
65125: PPUSH
65126: CALL_OW 496
65130: GO 65107
65132: POP
65133: POP
// end ;
65134: LD_VAR 0 1
65138: RET
// export function hHackChangeYourSide ; begin
65139: LD_INT 0
65141: PPUSH
// if your_side = 8 then
65142: LD_OWVAR 2
65146: PUSH
65147: LD_INT 8
65149: EQUAL
65150: IFFALSE 65162
// your_side := 0 else
65152: LD_ADDR_OWVAR 2
65156: PUSH
65157: LD_INT 0
65159: ST_TO_ADDR
65160: GO 65176
// your_side := your_side + 1 ;
65162: LD_ADDR_OWVAR 2
65166: PUSH
65167: LD_OWVAR 2
65171: PUSH
65172: LD_INT 1
65174: PLUS
65175: ST_TO_ADDR
// end ;
65176: LD_VAR 0 1
65180: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65181: LD_INT 0
65183: PPUSH
65184: PPUSH
65185: PPUSH
// for i in all_units do
65186: LD_ADDR_VAR 0 2
65190: PUSH
65191: LD_OWVAR 3
65195: PUSH
65196: FOR_IN
65197: IFFALSE 65275
// if IsSelected ( i ) then
65199: LD_VAR 0 2
65203: PPUSH
65204: CALL_OW 306
65208: IFFALSE 65273
// begin j := GetSide ( i ) ;
65210: LD_ADDR_VAR 0 3
65214: PUSH
65215: LD_VAR 0 2
65219: PPUSH
65220: CALL_OW 255
65224: ST_TO_ADDR
// if j = 8 then
65225: LD_VAR 0 3
65229: PUSH
65230: LD_INT 8
65232: EQUAL
65233: IFFALSE 65245
// j := 0 else
65235: LD_ADDR_VAR 0 3
65239: PUSH
65240: LD_INT 0
65242: ST_TO_ADDR
65243: GO 65259
// j := j + 1 ;
65245: LD_ADDR_VAR 0 3
65249: PUSH
65250: LD_VAR 0 3
65254: PUSH
65255: LD_INT 1
65257: PLUS
65258: ST_TO_ADDR
// SetSide ( i , j ) ;
65259: LD_VAR 0 2
65263: PPUSH
65264: LD_VAR 0 3
65268: PPUSH
65269: CALL_OW 235
// end ;
65273: GO 65196
65275: POP
65276: POP
// end ;
65277: LD_VAR 0 1
65281: RET
// export function hHackFog ; begin
65282: LD_INT 0
65284: PPUSH
// FogOff ( true ) ;
65285: LD_INT 1
65287: PPUSH
65288: CALL_OW 344
// end ;
65292: LD_VAR 0 1
65296: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65297: LD_INT 0
65299: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65300: LD_VAR 0 1
65304: PPUSH
65305: LD_VAR 0 2
65309: PPUSH
65310: LD_VAR 0 3
65314: PPUSH
65315: LD_INT 1
65317: PPUSH
65318: LD_INT 1
65320: PPUSH
65321: CALL_OW 483
// CenterOnXY ( x , y ) ;
65325: LD_VAR 0 2
65329: PPUSH
65330: LD_VAR 0 3
65334: PPUSH
65335: CALL_OW 84
// end ; end_of_file
65339: LD_VAR 0 4
65343: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65344: LD_INT 0
65346: PPUSH
65347: PPUSH
65348: PPUSH
65349: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65350: LD_VAR 0 1
65354: PPUSH
65355: CALL_OW 264
65359: PUSH
65360: LD_EXP 96
65364: EQUAL
65365: IFFALSE 65437
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65367: LD_INT 68
65369: PPUSH
65370: LD_VAR 0 1
65374: PPUSH
65375: CALL_OW 255
65379: PPUSH
65380: CALL_OW 321
65384: PUSH
65385: LD_INT 2
65387: EQUAL
65388: IFFALSE 65400
// eff := 70 else
65390: LD_ADDR_VAR 0 4
65394: PUSH
65395: LD_INT 70
65397: ST_TO_ADDR
65398: GO 65408
// eff := 30 ;
65400: LD_ADDR_VAR 0 4
65404: PUSH
65405: LD_INT 30
65407: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65408: LD_VAR 0 1
65412: PPUSH
65413: CALL_OW 250
65417: PPUSH
65418: LD_VAR 0 1
65422: PPUSH
65423: CALL_OW 251
65427: PPUSH
65428: LD_VAR 0 4
65432: PPUSH
65433: CALL_OW 495
// end ; end ;
65437: LD_VAR 0 2
65441: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65442: LD_INT 0
65444: PPUSH
// end ;
65445: LD_VAR 0 4
65449: RET
// export function SOS_Command ( cmd ) ; begin
65450: LD_INT 0
65452: PPUSH
// end ;
65453: LD_VAR 0 2
65457: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65458: LD_INT 0
65460: PPUSH
// end ;
65461: LD_VAR 0 6
65465: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65466: LD_INT 0
65468: PPUSH
65469: PPUSH
// if not vehicle or not factory then
65470: LD_VAR 0 1
65474: NOT
65475: PUSH
65476: LD_VAR 0 2
65480: NOT
65481: OR
65482: IFFALSE 65486
// exit ;
65484: GO 65717
// if factoryWaypoints >= factory then
65486: LD_EXP 170
65490: PUSH
65491: LD_VAR 0 2
65495: GREATEREQUAL
65496: IFFALSE 65717
// if factoryWaypoints [ factory ] then
65498: LD_EXP 170
65502: PUSH
65503: LD_VAR 0 2
65507: ARRAY
65508: IFFALSE 65717
// begin if GetControl ( vehicle ) = control_manual then
65510: LD_VAR 0 1
65514: PPUSH
65515: CALL_OW 263
65519: PUSH
65520: LD_INT 1
65522: EQUAL
65523: IFFALSE 65604
// begin driver := IsDrivenBy ( vehicle ) ;
65525: LD_ADDR_VAR 0 4
65529: PUSH
65530: LD_VAR 0 1
65534: PPUSH
65535: CALL_OW 311
65539: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65540: LD_VAR 0 4
65544: PPUSH
65545: LD_EXP 170
65549: PUSH
65550: LD_VAR 0 2
65554: ARRAY
65555: PUSH
65556: LD_INT 3
65558: ARRAY
65559: PPUSH
65560: LD_EXP 170
65564: PUSH
65565: LD_VAR 0 2
65569: ARRAY
65570: PUSH
65571: LD_INT 4
65573: ARRAY
65574: PPUSH
65575: CALL_OW 171
// AddComExitVehicle ( driver ) ;
65579: LD_VAR 0 4
65583: PPUSH
65584: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
65588: LD_VAR 0 4
65592: PPUSH
65593: LD_VAR 0 2
65597: PPUSH
65598: CALL_OW 180
// end else
65602: GO 65717
// if GetControl ( vehicle ) = control_remote then
65604: LD_VAR 0 1
65608: PPUSH
65609: CALL_OW 263
65613: PUSH
65614: LD_INT 2
65616: EQUAL
65617: IFFALSE 65678
// begin wait ( 0 0$2 ) ;
65619: LD_INT 70
65621: PPUSH
65622: CALL_OW 67
// if Connect ( vehicle ) then
65626: LD_VAR 0 1
65630: PPUSH
65631: CALL 18407 0 1
65635: IFFALSE 65676
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65637: LD_VAR 0 1
65641: PPUSH
65642: LD_EXP 170
65646: PUSH
65647: LD_VAR 0 2
65651: ARRAY
65652: PUSH
65653: LD_INT 3
65655: ARRAY
65656: PPUSH
65657: LD_EXP 170
65661: PUSH
65662: LD_VAR 0 2
65666: ARRAY
65667: PUSH
65668: LD_INT 4
65670: ARRAY
65671: PPUSH
65672: CALL_OW 171
// end else
65676: GO 65717
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65678: LD_VAR 0 1
65682: PPUSH
65683: LD_EXP 170
65687: PUSH
65688: LD_VAR 0 2
65692: ARRAY
65693: PUSH
65694: LD_INT 3
65696: ARRAY
65697: PPUSH
65698: LD_EXP 170
65702: PUSH
65703: LD_VAR 0 2
65707: ARRAY
65708: PUSH
65709: LD_INT 4
65711: ARRAY
65712: PPUSH
65713: CALL_OW 171
// end ; end ;
65717: LD_VAR 0 3
65721: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65722: LD_INT 0
65724: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65725: LD_VAR 0 1
65729: PUSH
65730: LD_INT 250
65732: EQUAL
65733: PUSH
65734: LD_VAR 0 2
65738: PPUSH
65739: CALL_OW 264
65743: PUSH
65744: LD_EXP 99
65748: EQUAL
65749: AND
65750: IFFALSE 65771
// MinerPlaceMine ( unit , x , y ) ;
65752: LD_VAR 0 2
65756: PPUSH
65757: LD_VAR 0 4
65761: PPUSH
65762: LD_VAR 0 5
65766: PPUSH
65767: CALL 68499 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65771: LD_VAR 0 1
65775: PUSH
65776: LD_INT 251
65778: EQUAL
65779: PUSH
65780: LD_VAR 0 2
65784: PPUSH
65785: CALL_OW 264
65789: PUSH
65790: LD_EXP 99
65794: EQUAL
65795: AND
65796: IFFALSE 65817
// MinerDetonateMine ( unit , x , y ) ;
65798: LD_VAR 0 2
65802: PPUSH
65803: LD_VAR 0 4
65807: PPUSH
65808: LD_VAR 0 5
65812: PPUSH
65813: CALL 68776 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65817: LD_VAR 0 1
65821: PUSH
65822: LD_INT 252
65824: EQUAL
65825: PUSH
65826: LD_VAR 0 2
65830: PPUSH
65831: CALL_OW 264
65835: PUSH
65836: LD_EXP 99
65840: EQUAL
65841: AND
65842: IFFALSE 65863
// MinerCreateMinefield ( unit , x , y ) ;
65844: LD_VAR 0 2
65848: PPUSH
65849: LD_VAR 0 4
65853: PPUSH
65854: LD_VAR 0 5
65858: PPUSH
65859: CALL 69193 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65863: LD_VAR 0 1
65867: PUSH
65868: LD_INT 253
65870: EQUAL
65871: PUSH
65872: LD_VAR 0 2
65876: PPUSH
65877: CALL_OW 257
65881: PUSH
65882: LD_INT 5
65884: EQUAL
65885: AND
65886: IFFALSE 65907
// ComBinocular ( unit , x , y ) ;
65888: LD_VAR 0 2
65892: PPUSH
65893: LD_VAR 0 4
65897: PPUSH
65898: LD_VAR 0 5
65902: PPUSH
65903: CALL 69564 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65907: LD_VAR 0 1
65911: PUSH
65912: LD_INT 254
65914: EQUAL
65915: PUSH
65916: LD_VAR 0 2
65920: PPUSH
65921: CALL_OW 264
65925: PUSH
65926: LD_EXP 94
65930: EQUAL
65931: AND
65932: PUSH
65933: LD_VAR 0 3
65937: PPUSH
65938: CALL_OW 263
65942: PUSH
65943: LD_INT 3
65945: EQUAL
65946: AND
65947: IFFALSE 65963
// HackDestroyVehicle ( unit , selectedUnit ) ;
65949: LD_VAR 0 2
65953: PPUSH
65954: LD_VAR 0 3
65958: PPUSH
65959: CALL 67859 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65963: LD_VAR 0 1
65967: PUSH
65968: LD_INT 255
65970: EQUAL
65971: PUSH
65972: LD_VAR 0 2
65976: PPUSH
65977: CALL_OW 264
65981: PUSH
65982: LD_INT 14
65984: PUSH
65985: LD_INT 53
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: IN
65992: AND
65993: PUSH
65994: LD_VAR 0 4
65998: PPUSH
65999: LD_VAR 0 5
66003: PPUSH
66004: CALL_OW 488
66008: AND
66009: IFFALSE 66033
// CutTreeXYR ( unit , x , y , 12 ) ;
66011: LD_VAR 0 2
66015: PPUSH
66016: LD_VAR 0 4
66020: PPUSH
66021: LD_VAR 0 5
66025: PPUSH
66026: LD_INT 12
66028: PPUSH
66029: CALL 66425 0 4
// if cmd = 256 then
66033: LD_VAR 0 1
66037: PUSH
66038: LD_INT 256
66040: EQUAL
66041: IFFALSE 66062
// SetFactoryWaypoint ( unit , x , y ) ;
66043: LD_VAR 0 2
66047: PPUSH
66048: LD_VAR 0 4
66052: PPUSH
66053: LD_VAR 0 5
66057: PPUSH
66058: CALL 66067 0 3
// end ;
66062: LD_VAR 0 6
66066: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66067: LD_INT 0
66069: PPUSH
66070: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66071: LD_VAR 0 1
66075: NOT
66076: PUSH
66077: LD_VAR 0 2
66081: PPUSH
66082: LD_VAR 0 3
66086: PPUSH
66087: CALL_OW 488
66091: NOT
66092: OR
66093: PUSH
66094: LD_VAR 0 1
66098: PPUSH
66099: CALL_OW 266
66103: PUSH
66104: LD_INT 3
66106: NONEQUAL
66107: PUSH
66108: LD_VAR 0 1
66112: PPUSH
66113: CALL_OW 247
66117: PUSH
66118: LD_INT 1
66120: EQUAL
66121: NOT
66122: AND
66123: OR
66124: IFFALSE 66128
// exit ;
66126: GO 66277
// if GetType ( factory ) = unit_human then
66128: LD_VAR 0 1
66132: PPUSH
66133: CALL_OW 247
66137: PUSH
66138: LD_INT 1
66140: EQUAL
66141: IFFALSE 66158
// factory := IsInUnit ( factory ) ;
66143: LD_ADDR_VAR 0 1
66147: PUSH
66148: LD_VAR 0 1
66152: PPUSH
66153: CALL_OW 310
66157: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66158: LD_VAR 0 1
66162: PPUSH
66163: CALL_OW 266
66167: PUSH
66168: LD_INT 3
66170: NONEQUAL
66171: IFFALSE 66175
// exit ;
66173: GO 66277
// if HexInfo ( x , y ) = factory then
66175: LD_VAR 0 2
66179: PPUSH
66180: LD_VAR 0 3
66184: PPUSH
66185: CALL_OW 428
66189: PUSH
66190: LD_VAR 0 1
66194: EQUAL
66195: IFFALSE 66222
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
66197: LD_ADDR_EXP 170
66201: PUSH
66202: LD_EXP 170
66206: PPUSH
66207: LD_VAR 0 1
66211: PPUSH
66212: LD_INT 0
66214: PPUSH
66215: CALL_OW 1
66219: ST_TO_ADDR
66220: GO 66273
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
66222: LD_ADDR_EXP 170
66226: PUSH
66227: LD_EXP 170
66231: PPUSH
66232: LD_VAR 0 1
66236: PPUSH
66237: LD_VAR 0 1
66241: PPUSH
66242: CALL_OW 255
66246: PUSH
66247: LD_VAR 0 1
66251: PUSH
66252: LD_VAR 0 2
66256: PUSH
66257: LD_VAR 0 3
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: PPUSH
66268: CALL_OW 1
66272: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66273: CALL 66282 0 0
// end ;
66277: LD_VAR 0 4
66281: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
66282: LD_INT 0
66284: PPUSH
66285: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66286: LD_STRING resetFactoryWaypoint();
66288: PPUSH
66289: CALL_OW 559
// if factoryWaypoints then
66293: LD_EXP 170
66297: IFFALSE 66420
// begin for i := 1 to factoryWaypoints do
66299: LD_ADDR_VAR 0 2
66303: PUSH
66304: DOUBLE
66305: LD_INT 1
66307: DEC
66308: ST_TO_ADDR
66309: LD_EXP 170
66313: PUSH
66314: FOR_TO
66315: IFFALSE 66418
// if factoryWaypoints [ i ] then
66317: LD_EXP 170
66321: PUSH
66322: LD_VAR 0 2
66326: ARRAY
66327: IFFALSE 66416
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
66329: LD_STRING setFactoryWaypointXY(
66331: PUSH
66332: LD_EXP 170
66336: PUSH
66337: LD_VAR 0 2
66341: ARRAY
66342: PUSH
66343: LD_INT 1
66345: ARRAY
66346: STR
66347: PUSH
66348: LD_STRING ,
66350: STR
66351: PUSH
66352: LD_EXP 170
66356: PUSH
66357: LD_VAR 0 2
66361: ARRAY
66362: PUSH
66363: LD_INT 2
66365: ARRAY
66366: STR
66367: PUSH
66368: LD_STRING ,
66370: STR
66371: PUSH
66372: LD_EXP 170
66376: PUSH
66377: LD_VAR 0 2
66381: ARRAY
66382: PUSH
66383: LD_INT 3
66385: ARRAY
66386: STR
66387: PUSH
66388: LD_STRING ,
66390: STR
66391: PUSH
66392: LD_EXP 170
66396: PUSH
66397: LD_VAR 0 2
66401: ARRAY
66402: PUSH
66403: LD_INT 4
66405: ARRAY
66406: STR
66407: PUSH
66408: LD_STRING )
66410: STR
66411: PPUSH
66412: CALL_OW 559
66416: GO 66314
66418: POP
66419: POP
// end ; end ;
66420: LD_VAR 0 1
66424: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66425: LD_INT 0
66427: PPUSH
66428: PPUSH
66429: PPUSH
66430: PPUSH
66431: PPUSH
66432: PPUSH
66433: PPUSH
66434: PPUSH
66435: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
66436: LD_VAR 0 1
66440: NOT
66441: PUSH
66442: LD_VAR 0 2
66446: PPUSH
66447: LD_VAR 0 3
66451: PPUSH
66452: CALL_OW 488
66456: NOT
66457: OR
66458: PUSH
66459: LD_VAR 0 4
66463: NOT
66464: OR
66465: IFFALSE 66469
// exit ;
66467: GO 66809
// list := [ ] ;
66469: LD_ADDR_VAR 0 13
66473: PUSH
66474: EMPTY
66475: ST_TO_ADDR
// if x - r < 0 then
66476: LD_VAR 0 2
66480: PUSH
66481: LD_VAR 0 4
66485: MINUS
66486: PUSH
66487: LD_INT 0
66489: LESS
66490: IFFALSE 66502
// min_x := 0 else
66492: LD_ADDR_VAR 0 7
66496: PUSH
66497: LD_INT 0
66499: ST_TO_ADDR
66500: GO 66518
// min_x := x - r ;
66502: LD_ADDR_VAR 0 7
66506: PUSH
66507: LD_VAR 0 2
66511: PUSH
66512: LD_VAR 0 4
66516: MINUS
66517: ST_TO_ADDR
// if y - r < 0 then
66518: LD_VAR 0 3
66522: PUSH
66523: LD_VAR 0 4
66527: MINUS
66528: PUSH
66529: LD_INT 0
66531: LESS
66532: IFFALSE 66544
// min_y := 0 else
66534: LD_ADDR_VAR 0 8
66538: PUSH
66539: LD_INT 0
66541: ST_TO_ADDR
66542: GO 66560
// min_y := y - r ;
66544: LD_ADDR_VAR 0 8
66548: PUSH
66549: LD_VAR 0 3
66553: PUSH
66554: LD_VAR 0 4
66558: MINUS
66559: ST_TO_ADDR
// max_x := x + r ;
66560: LD_ADDR_VAR 0 9
66564: PUSH
66565: LD_VAR 0 2
66569: PUSH
66570: LD_VAR 0 4
66574: PLUS
66575: ST_TO_ADDR
// max_y := y + r ;
66576: LD_ADDR_VAR 0 10
66580: PUSH
66581: LD_VAR 0 3
66585: PUSH
66586: LD_VAR 0 4
66590: PLUS
66591: ST_TO_ADDR
// for _x = min_x to max_x do
66592: LD_ADDR_VAR 0 11
66596: PUSH
66597: DOUBLE
66598: LD_VAR 0 7
66602: DEC
66603: ST_TO_ADDR
66604: LD_VAR 0 9
66608: PUSH
66609: FOR_TO
66610: IFFALSE 66727
// for _y = min_y to max_y do
66612: LD_ADDR_VAR 0 12
66616: PUSH
66617: DOUBLE
66618: LD_VAR 0 8
66622: DEC
66623: ST_TO_ADDR
66624: LD_VAR 0 10
66628: PUSH
66629: FOR_TO
66630: IFFALSE 66723
// begin if not ValidHex ( _x , _y ) then
66632: LD_VAR 0 11
66636: PPUSH
66637: LD_VAR 0 12
66641: PPUSH
66642: CALL_OW 488
66646: NOT
66647: IFFALSE 66651
// continue ;
66649: GO 66629
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66651: LD_VAR 0 11
66655: PPUSH
66656: LD_VAR 0 12
66660: PPUSH
66661: CALL_OW 351
66665: PUSH
66666: LD_VAR 0 11
66670: PPUSH
66671: LD_VAR 0 12
66675: PPUSH
66676: CALL_OW 554
66680: AND
66681: IFFALSE 66721
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66683: LD_ADDR_VAR 0 13
66687: PUSH
66688: LD_VAR 0 13
66692: PPUSH
66693: LD_VAR 0 13
66697: PUSH
66698: LD_INT 1
66700: PLUS
66701: PPUSH
66702: LD_VAR 0 11
66706: PUSH
66707: LD_VAR 0 12
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PPUSH
66716: CALL_OW 2
66720: ST_TO_ADDR
// end ;
66721: GO 66629
66723: POP
66724: POP
66725: GO 66609
66727: POP
66728: POP
// if not list then
66729: LD_VAR 0 13
66733: NOT
66734: IFFALSE 66738
// exit ;
66736: GO 66809
// for i in list do
66738: LD_ADDR_VAR 0 6
66742: PUSH
66743: LD_VAR 0 13
66747: PUSH
66748: FOR_IN
66749: IFFALSE 66807
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66751: LD_VAR 0 1
66755: PPUSH
66756: LD_STRING M
66758: PUSH
66759: LD_VAR 0 6
66763: PUSH
66764: LD_INT 1
66766: ARRAY
66767: PUSH
66768: LD_VAR 0 6
66772: PUSH
66773: LD_INT 2
66775: ARRAY
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: PUSH
66798: EMPTY
66799: LIST
66800: PPUSH
66801: CALL_OW 447
66805: GO 66748
66807: POP
66808: POP
// end ;
66809: LD_VAR 0 5
66813: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66814: LD_EXP 171
66818: NOT
66819: IFFALSE 66869
66821: GO 66823
66823: DISABLE
// begin initHack := true ;
66824: LD_ADDR_EXP 171
66828: PUSH
66829: LD_INT 1
66831: ST_TO_ADDR
// hackTanks := [ ] ;
66832: LD_ADDR_EXP 172
66836: PUSH
66837: EMPTY
66838: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66839: LD_ADDR_EXP 173
66843: PUSH
66844: EMPTY
66845: ST_TO_ADDR
// hackLimit := 3 ;
66846: LD_ADDR_EXP 174
66850: PUSH
66851: LD_INT 3
66853: ST_TO_ADDR
// hackDist := 12 ;
66854: LD_ADDR_EXP 175
66858: PUSH
66859: LD_INT 12
66861: ST_TO_ADDR
// hackCounter := [ ] ;
66862: LD_ADDR_EXP 176
66866: PUSH
66867: EMPTY
66868: ST_TO_ADDR
// end ;
66869: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
66870: LD_EXP 171
66874: PUSH
66875: LD_INT 34
66877: PUSH
66878: LD_EXP 94
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PPUSH
66887: CALL_OW 69
66891: AND
66892: IFFALSE 67147
66894: GO 66896
66896: DISABLE
66897: LD_INT 0
66899: PPUSH
66900: PPUSH
// begin enable ;
66901: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66902: LD_ADDR_VAR 0 1
66906: PUSH
66907: LD_INT 34
66909: PUSH
66910: LD_EXP 94
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PPUSH
66919: CALL_OW 69
66923: PUSH
66924: FOR_IN
66925: IFFALSE 67145
// begin if not i in hackTanks then
66927: LD_VAR 0 1
66931: PUSH
66932: LD_EXP 172
66936: IN
66937: NOT
66938: IFFALSE 67021
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66940: LD_ADDR_EXP 172
66944: PUSH
66945: LD_EXP 172
66949: PPUSH
66950: LD_EXP 172
66954: PUSH
66955: LD_INT 1
66957: PLUS
66958: PPUSH
66959: LD_VAR 0 1
66963: PPUSH
66964: CALL_OW 1
66968: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66969: LD_ADDR_EXP 173
66973: PUSH
66974: LD_EXP 173
66978: PPUSH
66979: LD_EXP 173
66983: PUSH
66984: LD_INT 1
66986: PLUS
66987: PPUSH
66988: EMPTY
66989: PPUSH
66990: CALL_OW 1
66994: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66995: LD_ADDR_EXP 176
66999: PUSH
67000: LD_EXP 176
67004: PPUSH
67005: LD_EXP 176
67009: PUSH
67010: LD_INT 1
67012: PLUS
67013: PPUSH
67014: EMPTY
67015: PPUSH
67016: CALL_OW 1
67020: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67021: LD_VAR 0 1
67025: PPUSH
67026: CALL_OW 302
67030: NOT
67031: IFFALSE 67044
// begin HackUnlinkAll ( i ) ;
67033: LD_VAR 0 1
67037: PPUSH
67038: CALL 67150 0 1
// continue ;
67042: GO 66924
// end ; HackCheckCapturedStatus ( i ) ;
67044: LD_VAR 0 1
67048: PPUSH
67049: CALL 67593 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67053: LD_ADDR_VAR 0 2
67057: PUSH
67058: LD_INT 81
67060: PUSH
67061: LD_VAR 0 1
67065: PPUSH
67066: CALL_OW 255
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 33
67077: PUSH
67078: LD_INT 3
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 91
67087: PUSH
67088: LD_VAR 0 1
67092: PUSH
67093: LD_EXP 175
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 50
67105: PUSH
67106: EMPTY
67107: LIST
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: PPUSH
67115: CALL_OW 69
67119: ST_TO_ADDR
// if not tmp then
67120: LD_VAR 0 2
67124: NOT
67125: IFFALSE 67129
// continue ;
67127: GO 66924
// HackLink ( i , tmp ) ;
67129: LD_VAR 0 1
67133: PPUSH
67134: LD_VAR 0 2
67138: PPUSH
67139: CALL 67286 0 2
// end ;
67143: GO 66924
67145: POP
67146: POP
// end ;
67147: PPOPN 2
67149: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67150: LD_INT 0
67152: PPUSH
67153: PPUSH
67154: PPUSH
// if not hack in hackTanks then
67155: LD_VAR 0 1
67159: PUSH
67160: LD_EXP 172
67164: IN
67165: NOT
67166: IFFALSE 67170
// exit ;
67168: GO 67281
// index := GetElementIndex ( hackTanks , hack ) ;
67170: LD_ADDR_VAR 0 4
67174: PUSH
67175: LD_EXP 172
67179: PPUSH
67180: LD_VAR 0 1
67184: PPUSH
67185: CALL 15113 0 2
67189: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67190: LD_EXP 173
67194: PUSH
67195: LD_VAR 0 4
67199: ARRAY
67200: IFFALSE 67281
// begin for i in hackTanksCaptured [ index ] do
67202: LD_ADDR_VAR 0 3
67206: PUSH
67207: LD_EXP 173
67211: PUSH
67212: LD_VAR 0 4
67216: ARRAY
67217: PUSH
67218: FOR_IN
67219: IFFALSE 67245
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67221: LD_VAR 0 3
67225: PUSH
67226: LD_INT 1
67228: ARRAY
67229: PPUSH
67230: LD_VAR 0 3
67234: PUSH
67235: LD_INT 2
67237: ARRAY
67238: PPUSH
67239: CALL_OW 235
67243: GO 67218
67245: POP
67246: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67247: LD_ADDR_EXP 173
67251: PUSH
67252: LD_EXP 173
67256: PPUSH
67257: LD_VAR 0 4
67261: PPUSH
67262: EMPTY
67263: PPUSH
67264: CALL_OW 1
67268: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67269: LD_VAR 0 1
67273: PPUSH
67274: LD_INT 0
67276: PPUSH
67277: CALL_OW 505
// end ; end ;
67281: LD_VAR 0 2
67285: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67286: LD_INT 0
67288: PPUSH
67289: PPUSH
67290: PPUSH
// if not hack in hackTanks or not vehicles then
67291: LD_VAR 0 1
67295: PUSH
67296: LD_EXP 172
67300: IN
67301: NOT
67302: PUSH
67303: LD_VAR 0 2
67307: NOT
67308: OR
67309: IFFALSE 67313
// exit ;
67311: GO 67588
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67313: LD_ADDR_VAR 0 2
67317: PUSH
67318: LD_VAR 0 1
67322: PPUSH
67323: LD_VAR 0 2
67327: PPUSH
67328: LD_INT 1
67330: PPUSH
67331: LD_INT 1
67333: PPUSH
67334: CALL 15763 0 4
67338: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67339: LD_ADDR_VAR 0 5
67343: PUSH
67344: LD_EXP 172
67348: PPUSH
67349: LD_VAR 0 1
67353: PPUSH
67354: CALL 15113 0 2
67358: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67359: LD_EXP 173
67363: PUSH
67364: LD_VAR 0 5
67368: ARRAY
67369: PUSH
67370: LD_EXP 174
67374: LESS
67375: IFFALSE 67564
// begin for i := 1 to vehicles do
67377: LD_ADDR_VAR 0 4
67381: PUSH
67382: DOUBLE
67383: LD_INT 1
67385: DEC
67386: ST_TO_ADDR
67387: LD_VAR 0 2
67391: PUSH
67392: FOR_TO
67393: IFFALSE 67562
// begin if hackTanksCaptured [ index ] = hackLimit then
67395: LD_EXP 173
67399: PUSH
67400: LD_VAR 0 5
67404: ARRAY
67405: PUSH
67406: LD_EXP 174
67410: EQUAL
67411: IFFALSE 67415
// break ;
67413: GO 67562
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67415: LD_ADDR_EXP 176
67419: PUSH
67420: LD_EXP 176
67424: PPUSH
67425: LD_VAR 0 5
67429: PPUSH
67430: LD_EXP 176
67434: PUSH
67435: LD_VAR 0 5
67439: ARRAY
67440: PUSH
67441: LD_INT 1
67443: PLUS
67444: PPUSH
67445: CALL_OW 1
67449: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67450: LD_ADDR_EXP 173
67454: PUSH
67455: LD_EXP 173
67459: PPUSH
67460: LD_VAR 0 5
67464: PUSH
67465: LD_EXP 173
67469: PUSH
67470: LD_VAR 0 5
67474: ARRAY
67475: PUSH
67476: LD_INT 1
67478: PLUS
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PPUSH
67484: LD_VAR 0 2
67488: PUSH
67489: LD_VAR 0 4
67493: ARRAY
67494: PUSH
67495: LD_VAR 0 2
67499: PUSH
67500: LD_VAR 0 4
67504: ARRAY
67505: PPUSH
67506: CALL_OW 255
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PPUSH
67515: CALL 15328 0 3
67519: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67520: LD_VAR 0 2
67524: PUSH
67525: LD_VAR 0 4
67529: ARRAY
67530: PPUSH
67531: LD_VAR 0 1
67535: PPUSH
67536: CALL_OW 255
67540: PPUSH
67541: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
67545: LD_VAR 0 2
67549: PUSH
67550: LD_VAR 0 4
67554: ARRAY
67555: PPUSH
67556: CALL_OW 141
// end ;
67560: GO 67392
67562: POP
67563: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67564: LD_VAR 0 1
67568: PPUSH
67569: LD_EXP 173
67573: PUSH
67574: LD_VAR 0 5
67578: ARRAY
67579: PUSH
67580: LD_INT 0
67582: PLUS
67583: PPUSH
67584: CALL_OW 505
// end ;
67588: LD_VAR 0 3
67592: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67593: LD_INT 0
67595: PPUSH
67596: PPUSH
67597: PPUSH
67598: PPUSH
// if not hack in hackTanks then
67599: LD_VAR 0 1
67603: PUSH
67604: LD_EXP 172
67608: IN
67609: NOT
67610: IFFALSE 67614
// exit ;
67612: GO 67854
// index := GetElementIndex ( hackTanks , hack ) ;
67614: LD_ADDR_VAR 0 4
67618: PUSH
67619: LD_EXP 172
67623: PPUSH
67624: LD_VAR 0 1
67628: PPUSH
67629: CALL 15113 0 2
67633: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67634: LD_ADDR_VAR 0 3
67638: PUSH
67639: DOUBLE
67640: LD_EXP 173
67644: PUSH
67645: LD_VAR 0 4
67649: ARRAY
67650: INC
67651: ST_TO_ADDR
67652: LD_INT 1
67654: PUSH
67655: FOR_DOWNTO
67656: IFFALSE 67828
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67658: LD_ADDR_VAR 0 5
67662: PUSH
67663: LD_EXP 173
67667: PUSH
67668: LD_VAR 0 4
67672: ARRAY
67673: PUSH
67674: LD_VAR 0 3
67678: ARRAY
67679: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67680: LD_VAR 0 5
67684: PUSH
67685: LD_INT 1
67687: ARRAY
67688: PPUSH
67689: CALL_OW 302
67693: NOT
67694: PUSH
67695: LD_VAR 0 5
67699: PUSH
67700: LD_INT 1
67702: ARRAY
67703: PPUSH
67704: CALL_OW 255
67708: PUSH
67709: LD_VAR 0 1
67713: PPUSH
67714: CALL_OW 255
67718: NONEQUAL
67719: OR
67720: IFFALSE 67826
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
67722: LD_VAR 0 5
67726: PUSH
67727: LD_INT 1
67729: ARRAY
67730: PPUSH
67731: CALL_OW 305
67735: PUSH
67736: LD_VAR 0 5
67740: PUSH
67741: LD_INT 1
67743: ARRAY
67744: PPUSH
67745: CALL_OW 255
67749: PUSH
67750: LD_VAR 0 1
67754: PPUSH
67755: CALL_OW 255
67759: EQUAL
67760: AND
67761: IFFALSE 67785
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
67763: LD_VAR 0 5
67767: PUSH
67768: LD_INT 1
67770: ARRAY
67771: PPUSH
67772: LD_VAR 0 5
67776: PUSH
67777: LD_INT 2
67779: ARRAY
67780: PPUSH
67781: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67785: LD_ADDR_EXP 173
67789: PUSH
67790: LD_EXP 173
67794: PPUSH
67795: LD_VAR 0 4
67799: PPUSH
67800: LD_EXP 173
67804: PUSH
67805: LD_VAR 0 4
67809: ARRAY
67810: PPUSH
67811: LD_VAR 0 3
67815: PPUSH
67816: CALL_OW 3
67820: PPUSH
67821: CALL_OW 1
67825: ST_TO_ADDR
// end ; end ;
67826: GO 67655
67828: POP
67829: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67830: LD_VAR 0 1
67834: PPUSH
67835: LD_EXP 173
67839: PUSH
67840: LD_VAR 0 4
67844: ARRAY
67845: PUSH
67846: LD_INT 0
67848: PLUS
67849: PPUSH
67850: CALL_OW 505
// end ;
67854: LD_VAR 0 2
67858: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
67859: LD_INT 0
67861: PPUSH
67862: PPUSH
67863: PPUSH
67864: PPUSH
// if not hack in hackTanks then
67865: LD_VAR 0 1
67869: PUSH
67870: LD_EXP 172
67874: IN
67875: NOT
67876: IFFALSE 67880
// exit ;
67878: GO 67965
// index := GetElementIndex ( hackTanks , hack ) ;
67880: LD_ADDR_VAR 0 5
67884: PUSH
67885: LD_EXP 172
67889: PPUSH
67890: LD_VAR 0 1
67894: PPUSH
67895: CALL 15113 0 2
67899: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67900: LD_ADDR_VAR 0 4
67904: PUSH
67905: DOUBLE
67906: LD_INT 1
67908: DEC
67909: ST_TO_ADDR
67910: LD_EXP 173
67914: PUSH
67915: LD_VAR 0 5
67919: ARRAY
67920: PUSH
67921: FOR_TO
67922: IFFALSE 67963
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67924: LD_EXP 173
67928: PUSH
67929: LD_VAR 0 5
67933: ARRAY
67934: PUSH
67935: LD_VAR 0 4
67939: ARRAY
67940: PUSH
67941: LD_INT 1
67943: ARRAY
67944: PUSH
67945: LD_VAR 0 2
67949: EQUAL
67950: IFFALSE 67961
// KillUnit ( vehicle ) ;
67952: LD_VAR 0 2
67956: PPUSH
67957: CALL_OW 66
67961: GO 67921
67963: POP
67964: POP
// end ;
67965: LD_VAR 0 3
67969: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67970: LD_EXP 177
67974: NOT
67975: IFFALSE 68010
67977: GO 67979
67979: DISABLE
// begin initMiner := true ;
67980: LD_ADDR_EXP 177
67984: PUSH
67985: LD_INT 1
67987: ST_TO_ADDR
// minersList := [ ] ;
67988: LD_ADDR_EXP 178
67992: PUSH
67993: EMPTY
67994: ST_TO_ADDR
// minerMinesList := [ ] ;
67995: LD_ADDR_EXP 179
67999: PUSH
68000: EMPTY
68001: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
68002: LD_ADDR_EXP 180
68006: PUSH
68007: LD_INT 5
68009: ST_TO_ADDR
// end ;
68010: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
68011: LD_EXP 177
68015: PUSH
68016: LD_INT 34
68018: PUSH
68019: LD_EXP 99
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PPUSH
68028: CALL_OW 69
68032: AND
68033: IFFALSE 68496
68035: GO 68037
68037: DISABLE
68038: LD_INT 0
68040: PPUSH
68041: PPUSH
68042: PPUSH
68043: PPUSH
// begin enable ;
68044: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68045: LD_ADDR_VAR 0 1
68049: PUSH
68050: LD_INT 34
68052: PUSH
68053: LD_EXP 99
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PPUSH
68062: CALL_OW 69
68066: PUSH
68067: FOR_IN
68068: IFFALSE 68140
// begin if not i in minersList then
68070: LD_VAR 0 1
68074: PUSH
68075: LD_EXP 178
68079: IN
68080: NOT
68081: IFFALSE 68138
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68083: LD_ADDR_EXP 178
68087: PUSH
68088: LD_EXP 178
68092: PPUSH
68093: LD_EXP 178
68097: PUSH
68098: LD_INT 1
68100: PLUS
68101: PPUSH
68102: LD_VAR 0 1
68106: PPUSH
68107: CALL_OW 1
68111: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68112: LD_ADDR_EXP 179
68116: PUSH
68117: LD_EXP 179
68121: PPUSH
68122: LD_EXP 179
68126: PUSH
68127: LD_INT 1
68129: PLUS
68130: PPUSH
68131: EMPTY
68132: PPUSH
68133: CALL_OW 1
68137: ST_TO_ADDR
// end end ;
68138: GO 68067
68140: POP
68141: POP
// for i := minerMinesList downto 1 do
68142: LD_ADDR_VAR 0 1
68146: PUSH
68147: DOUBLE
68148: LD_EXP 179
68152: INC
68153: ST_TO_ADDR
68154: LD_INT 1
68156: PUSH
68157: FOR_DOWNTO
68158: IFFALSE 68494
// begin if IsLive ( minersList [ i ] ) then
68160: LD_EXP 178
68164: PUSH
68165: LD_VAR 0 1
68169: ARRAY
68170: PPUSH
68171: CALL_OW 300
68175: IFFALSE 68203
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68177: LD_EXP 178
68181: PUSH
68182: LD_VAR 0 1
68186: ARRAY
68187: PPUSH
68188: LD_EXP 179
68192: PUSH
68193: LD_VAR 0 1
68197: ARRAY
68198: PPUSH
68199: CALL_OW 505
// if not minerMinesList [ i ] then
68203: LD_EXP 179
68207: PUSH
68208: LD_VAR 0 1
68212: ARRAY
68213: NOT
68214: IFFALSE 68218
// continue ;
68216: GO 68157
// for j := minerMinesList [ i ] downto 1 do
68218: LD_ADDR_VAR 0 2
68222: PUSH
68223: DOUBLE
68224: LD_EXP 179
68228: PUSH
68229: LD_VAR 0 1
68233: ARRAY
68234: INC
68235: ST_TO_ADDR
68236: LD_INT 1
68238: PUSH
68239: FOR_DOWNTO
68240: IFFALSE 68490
// begin side := GetSide ( minersList [ i ] ) ;
68242: LD_ADDR_VAR 0 3
68246: PUSH
68247: LD_EXP 178
68251: PUSH
68252: LD_VAR 0 1
68256: ARRAY
68257: PPUSH
68258: CALL_OW 255
68262: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68263: LD_ADDR_VAR 0 4
68267: PUSH
68268: LD_EXP 179
68272: PUSH
68273: LD_VAR 0 1
68277: ARRAY
68278: PUSH
68279: LD_VAR 0 2
68283: ARRAY
68284: PUSH
68285: LD_INT 1
68287: ARRAY
68288: PPUSH
68289: LD_EXP 179
68293: PUSH
68294: LD_VAR 0 1
68298: ARRAY
68299: PUSH
68300: LD_VAR 0 2
68304: ARRAY
68305: PUSH
68306: LD_INT 2
68308: ARRAY
68309: PPUSH
68310: CALL_OW 428
68314: ST_TO_ADDR
// if not tmp then
68315: LD_VAR 0 4
68319: NOT
68320: IFFALSE 68324
// continue ;
68322: GO 68239
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68324: LD_VAR 0 4
68328: PUSH
68329: LD_INT 81
68331: PUSH
68332: LD_VAR 0 3
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PPUSH
68341: CALL_OW 69
68345: IN
68346: PUSH
68347: LD_EXP 179
68351: PUSH
68352: LD_VAR 0 1
68356: ARRAY
68357: PUSH
68358: LD_VAR 0 2
68362: ARRAY
68363: PUSH
68364: LD_INT 1
68366: ARRAY
68367: PPUSH
68368: LD_EXP 179
68372: PUSH
68373: LD_VAR 0 1
68377: ARRAY
68378: PUSH
68379: LD_VAR 0 2
68383: ARRAY
68384: PUSH
68385: LD_INT 2
68387: ARRAY
68388: PPUSH
68389: CALL_OW 458
68393: AND
68394: IFFALSE 68488
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68396: LD_EXP 179
68400: PUSH
68401: LD_VAR 0 1
68405: ARRAY
68406: PUSH
68407: LD_VAR 0 2
68411: ARRAY
68412: PUSH
68413: LD_INT 1
68415: ARRAY
68416: PPUSH
68417: LD_EXP 179
68421: PUSH
68422: LD_VAR 0 1
68426: ARRAY
68427: PUSH
68428: LD_VAR 0 2
68432: ARRAY
68433: PUSH
68434: LD_INT 2
68436: ARRAY
68437: PPUSH
68438: LD_VAR 0 3
68442: PPUSH
68443: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68447: LD_ADDR_EXP 179
68451: PUSH
68452: LD_EXP 179
68456: PPUSH
68457: LD_VAR 0 1
68461: PPUSH
68462: LD_EXP 179
68466: PUSH
68467: LD_VAR 0 1
68471: ARRAY
68472: PPUSH
68473: LD_VAR 0 2
68477: PPUSH
68478: CALL_OW 3
68482: PPUSH
68483: CALL_OW 1
68487: ST_TO_ADDR
// end ; end ;
68488: GO 68239
68490: POP
68491: POP
// end ;
68492: GO 68157
68494: POP
68495: POP
// end ;
68496: PPOPN 4
68498: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68499: LD_INT 0
68501: PPUSH
68502: PPUSH
// result := false ;
68503: LD_ADDR_VAR 0 4
68507: PUSH
68508: LD_INT 0
68510: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68511: LD_VAR 0 1
68515: PPUSH
68516: CALL_OW 264
68520: PUSH
68521: LD_EXP 99
68525: EQUAL
68526: NOT
68527: IFFALSE 68531
// exit ;
68529: GO 68771
// index := GetElementIndex ( minersList , unit ) ;
68531: LD_ADDR_VAR 0 5
68535: PUSH
68536: LD_EXP 178
68540: PPUSH
68541: LD_VAR 0 1
68545: PPUSH
68546: CALL 15113 0 2
68550: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
68551: LD_EXP 179
68555: PUSH
68556: LD_VAR 0 5
68560: ARRAY
68561: PUSH
68562: LD_EXP 180
68566: GREATEREQUAL
68567: IFFALSE 68571
// exit ;
68569: GO 68771
// ComMoveXY ( unit , x , y ) ;
68571: LD_VAR 0 1
68575: PPUSH
68576: LD_VAR 0 2
68580: PPUSH
68581: LD_VAR 0 3
68585: PPUSH
68586: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68590: LD_INT 35
68592: PPUSH
68593: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68597: LD_VAR 0 1
68601: PPUSH
68602: LD_VAR 0 2
68606: PPUSH
68607: LD_VAR 0 3
68611: PPUSH
68612: CALL 45940 0 3
68616: NOT
68617: PUSH
68618: LD_VAR 0 1
68622: PPUSH
68623: CALL_OW 314
68627: AND
68628: IFFALSE 68632
// exit ;
68630: GO 68771
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68632: LD_VAR 0 2
68636: PPUSH
68637: LD_VAR 0 3
68641: PPUSH
68642: CALL_OW 428
68646: PUSH
68647: LD_VAR 0 1
68651: EQUAL
68652: PUSH
68653: LD_VAR 0 1
68657: PPUSH
68658: CALL_OW 314
68662: NOT
68663: AND
68664: IFFALSE 68590
// PlaySoundXY ( x , y , PlantMine ) ;
68666: LD_VAR 0 2
68670: PPUSH
68671: LD_VAR 0 3
68675: PPUSH
68676: LD_STRING PlantMine
68678: PPUSH
68679: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
68683: LD_VAR 0 2
68687: PPUSH
68688: LD_VAR 0 3
68692: PPUSH
68693: LD_VAR 0 1
68697: PPUSH
68698: CALL_OW 255
68702: PPUSH
68703: LD_INT 0
68705: PPUSH
68706: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68710: LD_ADDR_EXP 179
68714: PUSH
68715: LD_EXP 179
68719: PPUSH
68720: LD_VAR 0 5
68724: PUSH
68725: LD_EXP 179
68729: PUSH
68730: LD_VAR 0 5
68734: ARRAY
68735: PUSH
68736: LD_INT 1
68738: PLUS
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PPUSH
68744: LD_VAR 0 2
68748: PUSH
68749: LD_VAR 0 3
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PPUSH
68758: CALL 15328 0 3
68762: ST_TO_ADDR
// result := true ;
68763: LD_ADDR_VAR 0 4
68767: PUSH
68768: LD_INT 1
68770: ST_TO_ADDR
// end ;
68771: LD_VAR 0 4
68775: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68776: LD_INT 0
68778: PPUSH
68779: PPUSH
68780: PPUSH
// if not unit in minersList then
68781: LD_VAR 0 1
68785: PUSH
68786: LD_EXP 178
68790: IN
68791: NOT
68792: IFFALSE 68796
// exit ;
68794: GO 69188
// index := GetElementIndex ( minersList , unit ) ;
68796: LD_ADDR_VAR 0 6
68800: PUSH
68801: LD_EXP 178
68805: PPUSH
68806: LD_VAR 0 1
68810: PPUSH
68811: CALL 15113 0 2
68815: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68816: LD_ADDR_VAR 0 5
68820: PUSH
68821: DOUBLE
68822: LD_EXP 179
68826: PUSH
68827: LD_VAR 0 6
68831: ARRAY
68832: INC
68833: ST_TO_ADDR
68834: LD_INT 1
68836: PUSH
68837: FOR_DOWNTO
68838: IFFALSE 68999
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68840: LD_EXP 179
68844: PUSH
68845: LD_VAR 0 6
68849: ARRAY
68850: PUSH
68851: LD_VAR 0 5
68855: ARRAY
68856: PUSH
68857: LD_INT 1
68859: ARRAY
68860: PUSH
68861: LD_VAR 0 2
68865: EQUAL
68866: PUSH
68867: LD_EXP 179
68871: PUSH
68872: LD_VAR 0 6
68876: ARRAY
68877: PUSH
68878: LD_VAR 0 5
68882: ARRAY
68883: PUSH
68884: LD_INT 2
68886: ARRAY
68887: PUSH
68888: LD_VAR 0 3
68892: EQUAL
68893: AND
68894: IFFALSE 68997
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68896: LD_EXP 179
68900: PUSH
68901: LD_VAR 0 6
68905: ARRAY
68906: PUSH
68907: LD_VAR 0 5
68911: ARRAY
68912: PUSH
68913: LD_INT 1
68915: ARRAY
68916: PPUSH
68917: LD_EXP 179
68921: PUSH
68922: LD_VAR 0 6
68926: ARRAY
68927: PUSH
68928: LD_VAR 0 5
68932: ARRAY
68933: PUSH
68934: LD_INT 2
68936: ARRAY
68937: PPUSH
68938: LD_VAR 0 1
68942: PPUSH
68943: CALL_OW 255
68947: PPUSH
68948: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68952: LD_ADDR_EXP 179
68956: PUSH
68957: LD_EXP 179
68961: PPUSH
68962: LD_VAR 0 6
68966: PPUSH
68967: LD_EXP 179
68971: PUSH
68972: LD_VAR 0 6
68976: ARRAY
68977: PPUSH
68978: LD_VAR 0 5
68982: PPUSH
68983: CALL_OW 3
68987: PPUSH
68988: CALL_OW 1
68992: ST_TO_ADDR
// exit ;
68993: POP
68994: POP
68995: GO 69188
// end ; end ;
68997: GO 68837
68999: POP
69000: POP
// for i := minerMinesList [ index ] downto 1 do
69001: LD_ADDR_VAR 0 5
69005: PUSH
69006: DOUBLE
69007: LD_EXP 179
69011: PUSH
69012: LD_VAR 0 6
69016: ARRAY
69017: INC
69018: ST_TO_ADDR
69019: LD_INT 1
69021: PUSH
69022: FOR_DOWNTO
69023: IFFALSE 69186
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69025: LD_EXP 179
69029: PUSH
69030: LD_VAR 0 6
69034: ARRAY
69035: PUSH
69036: LD_VAR 0 5
69040: ARRAY
69041: PUSH
69042: LD_INT 1
69044: ARRAY
69045: PPUSH
69046: LD_EXP 179
69050: PUSH
69051: LD_VAR 0 6
69055: ARRAY
69056: PUSH
69057: LD_VAR 0 5
69061: ARRAY
69062: PUSH
69063: LD_INT 2
69065: ARRAY
69066: PPUSH
69067: LD_VAR 0 2
69071: PPUSH
69072: LD_VAR 0 3
69076: PPUSH
69077: CALL_OW 298
69081: PUSH
69082: LD_INT 6
69084: LESS
69085: IFFALSE 69184
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69087: LD_EXP 179
69091: PUSH
69092: LD_VAR 0 6
69096: ARRAY
69097: PUSH
69098: LD_VAR 0 5
69102: ARRAY
69103: PUSH
69104: LD_INT 1
69106: ARRAY
69107: PPUSH
69108: LD_EXP 179
69112: PUSH
69113: LD_VAR 0 6
69117: ARRAY
69118: PUSH
69119: LD_VAR 0 5
69123: ARRAY
69124: PUSH
69125: LD_INT 2
69127: ARRAY
69128: PPUSH
69129: LD_VAR 0 1
69133: PPUSH
69134: CALL_OW 255
69138: PPUSH
69139: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69143: LD_ADDR_EXP 179
69147: PUSH
69148: LD_EXP 179
69152: PPUSH
69153: LD_VAR 0 6
69157: PPUSH
69158: LD_EXP 179
69162: PUSH
69163: LD_VAR 0 6
69167: ARRAY
69168: PPUSH
69169: LD_VAR 0 5
69173: PPUSH
69174: CALL_OW 3
69178: PPUSH
69179: CALL_OW 1
69183: ST_TO_ADDR
// end ; end ;
69184: GO 69022
69186: POP
69187: POP
// end ;
69188: LD_VAR 0 4
69192: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69193: LD_INT 0
69195: PPUSH
69196: PPUSH
69197: PPUSH
69198: PPUSH
69199: PPUSH
69200: PPUSH
69201: PPUSH
69202: PPUSH
69203: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69204: LD_VAR 0 1
69208: PPUSH
69209: CALL_OW 264
69213: PUSH
69214: LD_EXP 99
69218: EQUAL
69219: NOT
69220: PUSH
69221: LD_VAR 0 1
69225: PUSH
69226: LD_EXP 178
69230: IN
69231: NOT
69232: OR
69233: IFFALSE 69237
// exit ;
69235: GO 69559
// index := GetElementIndex ( minersList , unit ) ;
69237: LD_ADDR_VAR 0 6
69241: PUSH
69242: LD_EXP 178
69246: PPUSH
69247: LD_VAR 0 1
69251: PPUSH
69252: CALL 15113 0 2
69256: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69257: LD_ADDR_VAR 0 8
69261: PUSH
69262: LD_EXP 180
69266: PUSH
69267: LD_EXP 179
69271: PUSH
69272: LD_VAR 0 6
69276: ARRAY
69277: MINUS
69278: ST_TO_ADDR
// if not minesFreeAmount then
69279: LD_VAR 0 8
69283: NOT
69284: IFFALSE 69288
// exit ;
69286: GO 69559
// tmp := [ ] ;
69288: LD_ADDR_VAR 0 7
69292: PUSH
69293: EMPTY
69294: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69295: LD_ADDR_VAR 0 5
69299: PUSH
69300: DOUBLE
69301: LD_INT 1
69303: DEC
69304: ST_TO_ADDR
69305: LD_VAR 0 8
69309: PUSH
69310: FOR_TO
69311: IFFALSE 69506
// begin _d := rand ( 0 , 5 ) ;
69313: LD_ADDR_VAR 0 11
69317: PUSH
69318: LD_INT 0
69320: PPUSH
69321: LD_INT 5
69323: PPUSH
69324: CALL_OW 12
69328: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69329: LD_ADDR_VAR 0 12
69333: PUSH
69334: LD_INT 2
69336: PPUSH
69337: LD_INT 6
69339: PPUSH
69340: CALL_OW 12
69344: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69345: LD_ADDR_VAR 0 9
69349: PUSH
69350: LD_VAR 0 2
69354: PPUSH
69355: LD_VAR 0 11
69359: PPUSH
69360: LD_VAR 0 12
69364: PPUSH
69365: CALL_OW 272
69369: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69370: LD_ADDR_VAR 0 10
69374: PUSH
69375: LD_VAR 0 3
69379: PPUSH
69380: LD_VAR 0 11
69384: PPUSH
69385: LD_VAR 0 12
69389: PPUSH
69390: CALL_OW 273
69394: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69395: LD_VAR 0 9
69399: PPUSH
69400: LD_VAR 0 10
69404: PPUSH
69405: CALL_OW 488
69409: PUSH
69410: LD_VAR 0 9
69414: PUSH
69415: LD_VAR 0 10
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_VAR 0 7
69428: IN
69429: NOT
69430: AND
69431: PUSH
69432: LD_VAR 0 9
69436: PPUSH
69437: LD_VAR 0 10
69441: PPUSH
69442: CALL_OW 458
69446: NOT
69447: AND
69448: IFFALSE 69490
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69450: LD_ADDR_VAR 0 7
69454: PUSH
69455: LD_VAR 0 7
69459: PPUSH
69460: LD_VAR 0 7
69464: PUSH
69465: LD_INT 1
69467: PLUS
69468: PPUSH
69469: LD_VAR 0 9
69473: PUSH
69474: LD_VAR 0 10
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PPUSH
69483: CALL_OW 1
69487: ST_TO_ADDR
69488: GO 69504
// i := i - 1 ;
69490: LD_ADDR_VAR 0 5
69494: PUSH
69495: LD_VAR 0 5
69499: PUSH
69500: LD_INT 1
69502: MINUS
69503: ST_TO_ADDR
// end ;
69504: GO 69310
69506: POP
69507: POP
// for i in tmp do
69508: LD_ADDR_VAR 0 5
69512: PUSH
69513: LD_VAR 0 7
69517: PUSH
69518: FOR_IN
69519: IFFALSE 69557
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69521: LD_VAR 0 1
69525: PPUSH
69526: LD_VAR 0 5
69530: PUSH
69531: LD_INT 1
69533: ARRAY
69534: PPUSH
69535: LD_VAR 0 5
69539: PUSH
69540: LD_INT 2
69542: ARRAY
69543: PPUSH
69544: CALL 68499 0 3
69548: NOT
69549: IFFALSE 69555
// exit ;
69551: POP
69552: POP
69553: GO 69559
69555: GO 69518
69557: POP
69558: POP
// end ;
69559: LD_VAR 0 4
69563: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
69564: LD_INT 0
69566: PPUSH
69567: PPUSH
69568: PPUSH
69569: PPUSH
69570: PPUSH
69571: PPUSH
69572: PPUSH
// if not GetClass ( unit ) = class_sniper then
69573: LD_VAR 0 1
69577: PPUSH
69578: CALL_OW 257
69582: PUSH
69583: LD_INT 5
69585: EQUAL
69586: NOT
69587: IFFALSE 69591
// exit ;
69589: GO 69979
// dist := 8 ;
69591: LD_ADDR_VAR 0 5
69595: PUSH
69596: LD_INT 8
69598: ST_TO_ADDR
// viewRange := 12 ;
69599: LD_ADDR_VAR 0 7
69603: PUSH
69604: LD_INT 12
69606: ST_TO_ADDR
// side := GetSide ( unit ) ;
69607: LD_ADDR_VAR 0 6
69611: PUSH
69612: LD_VAR 0 1
69616: PPUSH
69617: CALL_OW 255
69621: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69622: LD_INT 61
69624: PPUSH
69625: LD_VAR 0 6
69629: PPUSH
69630: CALL_OW 321
69634: PUSH
69635: LD_INT 2
69637: EQUAL
69638: IFFALSE 69648
// viewRange := 16 ;
69640: LD_ADDR_VAR 0 7
69644: PUSH
69645: LD_INT 16
69647: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69648: LD_VAR 0 1
69652: PPUSH
69653: LD_VAR 0 2
69657: PPUSH
69658: LD_VAR 0 3
69662: PPUSH
69663: CALL_OW 297
69667: PUSH
69668: LD_VAR 0 5
69672: GREATER
69673: IFFALSE 69752
// begin ComMoveXY ( unit , x , y ) ;
69675: LD_VAR 0 1
69679: PPUSH
69680: LD_VAR 0 2
69684: PPUSH
69685: LD_VAR 0 3
69689: PPUSH
69690: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69694: LD_INT 35
69696: PPUSH
69697: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69701: LD_VAR 0 1
69705: PPUSH
69706: LD_VAR 0 2
69710: PPUSH
69711: LD_VAR 0 3
69715: PPUSH
69716: CALL 45940 0 3
69720: NOT
69721: IFFALSE 69725
// exit ;
69723: GO 69979
// until GetDistUnitXY ( unit , x , y ) < dist ;
69725: LD_VAR 0 1
69729: PPUSH
69730: LD_VAR 0 2
69734: PPUSH
69735: LD_VAR 0 3
69739: PPUSH
69740: CALL_OW 297
69744: PUSH
69745: LD_VAR 0 5
69749: LESS
69750: IFFALSE 69694
// end ; ComTurnXY ( unit , x , y ) ;
69752: LD_VAR 0 1
69756: PPUSH
69757: LD_VAR 0 2
69761: PPUSH
69762: LD_VAR 0 3
69766: PPUSH
69767: CALL_OW 118
// wait ( 5 ) ;
69771: LD_INT 5
69773: PPUSH
69774: CALL_OW 67
// _d := GetDir ( unit ) ;
69778: LD_ADDR_VAR 0 10
69782: PUSH
69783: LD_VAR 0 1
69787: PPUSH
69788: CALL_OW 254
69792: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
69793: LD_ADDR_VAR 0 8
69797: PUSH
69798: LD_VAR 0 1
69802: PPUSH
69803: CALL_OW 250
69807: PPUSH
69808: LD_VAR 0 10
69812: PPUSH
69813: LD_VAR 0 5
69817: PPUSH
69818: CALL_OW 272
69822: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
69823: LD_ADDR_VAR 0 9
69827: PUSH
69828: LD_VAR 0 1
69832: PPUSH
69833: CALL_OW 251
69837: PPUSH
69838: LD_VAR 0 10
69842: PPUSH
69843: LD_VAR 0 5
69847: PPUSH
69848: CALL_OW 273
69852: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69853: LD_VAR 0 8
69857: PPUSH
69858: LD_VAR 0 9
69862: PPUSH
69863: CALL_OW 488
69867: NOT
69868: IFFALSE 69872
// exit ;
69870: GO 69979
// ComAnimCustom ( unit , 1 ) ;
69872: LD_VAR 0 1
69876: PPUSH
69877: LD_INT 1
69879: PPUSH
69880: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69884: LD_VAR 0 8
69888: PPUSH
69889: LD_VAR 0 9
69893: PPUSH
69894: LD_VAR 0 6
69898: PPUSH
69899: LD_VAR 0 7
69903: PPUSH
69904: CALL_OW 330
// repeat wait ( 1 ) ;
69908: LD_INT 1
69910: PPUSH
69911: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
69915: LD_VAR 0 1
69919: PPUSH
69920: CALL_OW 316
69924: PUSH
69925: LD_VAR 0 1
69929: PPUSH
69930: CALL_OW 314
69934: OR
69935: PUSH
69936: LD_VAR 0 1
69940: PPUSH
69941: CALL_OW 302
69945: NOT
69946: OR
69947: PUSH
69948: LD_VAR 0 1
69952: PPUSH
69953: CALL_OW 301
69957: OR
69958: IFFALSE 69908
// RemoveSeeing ( _x , _y , side ) ;
69960: LD_VAR 0 8
69964: PPUSH
69965: LD_VAR 0 9
69969: PPUSH
69970: LD_VAR 0 6
69974: PPUSH
69975: CALL_OW 331
// end ; end_of_file
69979: LD_VAR 0 4
69983: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69984: LD_VAR 0 1
69988: PUSH
69989: LD_INT 200
69991: DOUBLE
69992: GREATEREQUAL
69993: IFFALSE 70001
69995: LD_INT 299
69997: DOUBLE
69998: LESSEQUAL
69999: IFTRUE 70003
70001: GO 70035
70003: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70004: LD_VAR 0 1
70008: PPUSH
70009: LD_VAR 0 2
70013: PPUSH
70014: LD_VAR 0 3
70018: PPUSH
70019: LD_VAR 0 4
70023: PPUSH
70024: LD_VAR 0 5
70028: PPUSH
70029: CALL 65722 0 5
70033: GO 70112
70035: LD_INT 300
70037: DOUBLE
70038: GREATEREQUAL
70039: IFFALSE 70047
70041: LD_INT 399
70043: DOUBLE
70044: LESSEQUAL
70045: IFTRUE 70049
70047: GO 70111
70049: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70050: LD_VAR 0 1
70054: PPUSH
70055: LD_VAR 0 2
70059: PPUSH
70060: LD_VAR 0 3
70064: PPUSH
70065: LD_VAR 0 4
70069: PPUSH
70070: LD_VAR 0 5
70074: PPUSH
70075: LD_VAR 0 6
70079: PPUSH
70080: LD_VAR 0 7
70084: PPUSH
70085: LD_VAR 0 8
70089: PPUSH
70090: LD_VAR 0 9
70094: PPUSH
70095: LD_VAR 0 10
70099: PPUSH
70100: LD_VAR 0 11
70104: PPUSH
70105: CALL 63364 0 11
70109: GO 70112
70111: POP
// end ;
70112: PPOPN 11
70114: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70115: LD_VAR 0 1
70119: PPUSH
70120: LD_VAR 0 2
70124: PPUSH
70125: LD_VAR 0 3
70129: PPUSH
70130: LD_VAR 0 4
70134: PPUSH
70135: LD_VAR 0 5
70139: PPUSH
70140: CALL 65458 0 5
// end ;
70144: PPOPN 5
70146: END
