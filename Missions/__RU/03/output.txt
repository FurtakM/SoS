// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export kurinOpinion , platonovOpinion ; export vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 324 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 6
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 5
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// vehiclesToSave = [ ] ;
 113: LD_ADDR_EXP 7
 117: PUSH
 118: EMPTY
 119: ST_TO_ADDR
// scholtzeSpawned = false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// scholtzeSaved = false ;
 128: LD_ADDR_EXP 10
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 136: LD_ADDR_EXP 15
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// spawnCrates = true ;
 144: LD_ADDR_EXP 8
 148: PUSH
 149: LD_INT 1
 151: ST_TO_ADDR
// dialog_track = false ;
 152: LD_ADDR_EXP 13
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// dialog_workshop = false ;
 160: LD_ADDR_EXP 11
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// dialog_stop = false ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// counterEnable = false ;
 176: LD_ADDR_EXP 90
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// extraTime = 7 7$00 ;
 184: LD_ADDR_EXP 17
 188: PUSH
 189: LD_INT 14700
 191: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 192: LD_ADDR_EXP 16
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 200: LD_ADDR_EXP 18
 204: PUSH
 205: LD_INT 4200
 207: ST_TO_ADDR
// produceOnlyForYou = false ;
 208: LD_ADDR_EXP 20
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// produceMoreVehicles = false ;
 216: LD_ADDR_EXP 19
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// kurinCheckVehicles = false ;
 224: LD_ADDR_EXP 21
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// omicronSurrender = false ;
 232: LD_ADDR_EXP 26
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// canExitBattlefield = true ;
 240: LD_ADDR_EXP 27
 244: PUSH
 245: LD_INT 1
 247: ST_TO_ADDR
// immortalSurvivors = false ;
 248: LD_ADDR_EXP 28
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 256: LD_ADDR_EXP 29
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// endCutscene = false ;
 264: LD_ADDR_EXP 32
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 272: LD_ADDR_EXP 31
 276: PUSH
 277: EMPTY
 278: ST_TO_ADDR
// kirovFactory = 0 ;
 279: LD_ADDR_EXP 24
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// kirovCompleteFactory = false ;
 287: LD_ADDR_EXP 25
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// enableOmicronAI = true ;
 295: LD_ADDR_EXP 30
 299: PUSH
 300: LD_INT 1
 302: ST_TO_ADDR
// PrepareRussians ;
 303: CALL 1020 0 0
// PrepareAmericans ;
 307: CALL 5509 0 0
// Nef_PrepareNature ;
 311: CALL 31502 0 0
// MissionIntro ;
 315: CALL 21873 0 0
// end ; end_of_file
 319: LD_VAR 0 1
 323: RET
// export function InitMapConfig ; begin
 324: LD_INT 0
 326: PPUSH
// BaseMapConfig ;
 327: CALL 340 0 0
// MissionMapConfig ;
 331: CALL 442 0 0
// end ;
 335: LD_VAR 0 1
 339: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 340: LD_INT 0
 342: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 343: LD_ADDR_EXP 33
 347: PUSH
 348: LD_INT 8
 350: PUSH
 351: LD_INT 12
 353: PUSH
 354: LD_INT 6
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: LD_INT 3
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 370: LD_ADDR_EXP 34
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 2
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 393: LD_ADDR_EXP 35
 397: PUSH
 398: LD_INT 5
 400: NEG
 401: PPUSH
 402: LD_INT 5
 404: PPUSH
 405: CALL_OW 12
 409: PUSH
 410: EMPTY
 411: LIST
 412: ST_TO_ADDR
// debugMode = 0 ;
 413: LD_ADDR_EXP 38
 417: PUSH
 418: LD_INT 0
 420: ST_TO_ADDR
// missionPrefix = 03_ ;
 421: LD_ADDR_EXP 36
 425: PUSH
 426: LD_STRING 03_
 428: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 429: LD_ADDR_EXP 37
 433: PUSH
 434: LD_STRING 02_
 436: ST_TO_ADDR
// end ;
 437: LD_VAR 0 1
 441: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; export omicronBlockerPoints ; function MissionMapConfig ; begin
 442: LD_INT 0
 444: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 445: LD_ADDR_EXP 39
 449: PUSH
 450: LD_INT 7
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: LD_INT 6
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_OWVAR 67
 468: ARRAY
 469: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 470: LD_ADDR_EXP 41
 474: PUSH
 475: LD_INT 84000
 477: PUSH
 478: LD_INT 73500
 480: PUSH
 481: LD_INT 63000
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: PUSH
 489: LD_OWVAR 67
 493: ARRAY
 494: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 495: LD_ADDR_EXP 42
 499: PUSH
 500: LD_INT 150
 502: PUSH
 503: LD_INT 100
 505: PUSH
 506: LD_INT 50
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: LIST
 513: PUSH
 514: LD_OWVAR 67
 518: ARRAY
 519: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 520: LD_ADDR_EXP 43
 524: PUSH
 525: LD_INT 100
 527: PUSH
 528: LD_INT 50
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: PUSH
 539: LD_OWVAR 67
 543: ARRAY
 544: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 545: LD_ADDR_EXP 44
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: LD_INT 2
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: LD_OWVAR 67
 568: ARRAY
 569: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 570: LD_ADDR_EXP 47
 574: PUSH
 575: LD_INT 8
 577: PUSH
 578: LD_INT 6
 580: PUSH
 581: LD_INT 5
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: PUSH
 589: LD_OWVAR 67
 593: ARRAY
 594: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 595: LD_ADDR_EXP 48
 599: PUSH
 600: LD_INT 17850
 602: PUSH
 603: LD_INT 16800
 605: PUSH
 606: LD_INT 15750
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: PUSH
 614: LD_OWVAR 67
 618: ARRAY
 619: ST_TO_ADDR
// omicronBlockerPoints = [ [ 47 , 14 ] , [ 57 , 39 ] , [ 61 , 60 ] , [ 44 , 76 ] , [ 44 , 4 ] , [ 55 , 29 ] ] ;
 620: LD_ADDR_EXP 49
 624: PUSH
 625: LD_INT 47
 627: PUSH
 628: LD_INT 14
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 57
 637: PUSH
 638: LD_INT 39
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 61
 647: PUSH
 648: LD_INT 60
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PUSH
 655: LD_INT 44
 657: PUSH
 658: LD_INT 76
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: LD_INT 44
 667: PUSH
 668: LD_INT 4
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 55
 677: PUSH
 678: LD_INT 29
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: ST_TO_ADDR
// end ;
 693: LD_VAR 0 1
 697: RET
// every 0 0$1 trigger debugMode do var i ;
 698: LD_EXP 38
 702: IFFALSE 1017
 704: GO 706
 706: DISABLE
 707: LD_INT 0
 709: PPUSH
// begin enable ;
 710: ENABLE
// FogOff ( your_side ) ;
 711: LD_OWVAR 2
 715: PPUSH
 716: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 720: LD_ADDR_VAR 0 1
 724: PUSH
 725: LD_INT 22
 727: PUSH
 728: LD_OWVAR 2
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 2
 739: PUSH
 740: LD_INT 21
 742: PUSH
 743: LD_INT 1
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 21
 752: PUSH
 753: LD_INT 2
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: LIST
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PPUSH
 769: CALL_OW 69
 773: PUSH
 774: FOR_IN
 775: IFFALSE 791
// SetLives ( i , 1000 ) ;
 777: LD_VAR 0 1
 781: PPUSH
 782: LD_INT 1000
 784: PPUSH
 785: CALL_OW 234
 789: GO 774
 791: POP
 792: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 793: LD_ADDR_VAR 0 1
 797: PUSH
 798: LD_INT 22
 800: PUSH
 801: LD_OWVAR 2
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: LD_INT 21
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PUSH
 829: FOR_IN
 830: IFFALSE 894
// begin SetSkill ( i , skill_combat , 10 ) ;
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 1
 839: PPUSH
 840: LD_INT 10
 842: PPUSH
 843: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 847: LD_VAR 0 1
 851: PPUSH
 852: LD_INT 2
 854: PPUSH
 855: LD_INT 10
 857: PPUSH
 858: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 862: LD_VAR 0 1
 866: PPUSH
 867: LD_INT 3
 869: PPUSH
 870: LD_INT 10
 872: PPUSH
 873: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 877: LD_VAR 0 1
 881: PPUSH
 882: LD_INT 4
 884: PPUSH
 885: LD_INT 10
 887: PPUSH
 888: CALL_OW 237
// end ;
 892: GO 829
 894: POP
 895: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 896: LD_ADDR_VAR 0 1
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_OWVAR 2
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: LD_INT 30
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PUSH
 926: LD_INT 30
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PPUSH
 945: CALL_OW 69
 949: PUSH
 950: FOR_IN
 951: IFFALSE 1015
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 953: LD_VAR 0 1
 957: PPUSH
 958: CALL_OW 274
 962: PPUSH
 963: LD_INT 1
 965: PPUSH
 966: LD_INT 9999
 968: PPUSH
 969: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 973: LD_VAR 0 1
 977: PPUSH
 978: CALL_OW 274
 982: PPUSH
 983: LD_INT 2
 985: PPUSH
 986: LD_INT 9999
 988: PPUSH
 989: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 993: LD_VAR 0 1
 997: PPUSH
 998: CALL_OW 274
1002: PPUSH
1003: LD_INT 3
1005: PPUSH
1006: LD_INT 9999
1008: PPUSH
1009: CALL_OW 277
// end ;
1013: GO 950
1015: POP
1016: POP
// end ; end_of_file
1017: PPOPN 1
1019: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
1020: LD_INT 0
1022: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
1023: LD_ADDR_EXP 82
1027: PUSH
1028: LD_INT 0
1030: PUSH
1031: LD_INT 0
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: LD_INT 0
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
1046: LD_ADDR_EXP 76
1050: PUSH
1051: EMPTY
1052: ST_TO_ADDR
// PrepareKirovBase ;
1053: CALL 2109 0 0
// PrepareHeroes ;
1057: CALL 1090 0 0
// PrepareKirovPersonel ;
1061: CALL 2874 0 0
// PrepareBeriaBase ;
1065: CALL 1511 0 0
// PrepareSecondBaseTeam ;
1069: CALL 4037 0 0
// PrepareGrishko ;
1073: CALL 3202 0 0
// PrepareOtherBuildings ;
1077: CALL 3471 0 0
// PrepareVehicles ;
1081: CALL 3275 0 0
// end ;
1085: LD_VAR 0 1
1089: RET
// function PrepareHeroes ; begin
1090: LD_INT 0
1092: PPUSH
// uc_side = 3 ;
1093: LD_ADDR_OWVAR 20
1097: PUSH
1098: LD_INT 3
1100: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1101: LD_ADDR_EXP 50
1105: PUSH
1106: LD_STRING Burlak
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: CALL 6971 0 2
1116: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1117: LD_ADDR_EXP 51
1121: PUSH
1122: LD_STRING Gnyevko
1124: PPUSH
1125: LD_INT 1
1127: PPUSH
1128: CALL 6971 0 2
1132: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1133: LD_ADDR_EXP 53
1137: PUSH
1138: LD_STRING Kovalyuk
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: CALL 6971 0 2
1148: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1149: LD_ADDR_EXP 52
1153: PUSH
1154: LD_STRING Kirilenkova
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: CALL 6971 0 2
1164: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1165: LD_EXP 50
1169: PUSH
1170: LD_EXP 51
1174: PUSH
1175: LD_EXP 53
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: PPUSH
1185: LD_INT 3
1187: PPUSH
1188: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1192: LD_EXP 52
1196: PPUSH
1197: LD_INT 4
1199: PPUSH
1200: CALL_OW 336
// uc_side = 6 ;
1204: LD_ADDR_OWVAR 20
1208: PUSH
1209: LD_INT 6
1211: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1212: LD_EXP 1
1216: NOT
1217: PUSH
1218: LD_STRING 02_Belkov
1220: PPUSH
1221: CALL_OW 28
1225: AND
1226: IFFALSE 1327
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1228: LD_ADDR_EXP 54
1232: PUSH
1233: LD_STRING Belkov
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: CALL 6971 0 2
1243: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1244: LD_STRING 02_Belkov2
1246: PPUSH
1247: CALL_OW 28
1251: IFFALSE 1290
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1253: LD_ADDR_EXP 55
1257: PUSH
1258: LD_STRING Belkov2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL 6971 0 2
1268: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1269: LD_EXP 55
1273: PPUSH
1274: LD_INT 159
1276: PPUSH
1277: LD_INT 107
1279: PPUSH
1280: LD_INT 5
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1290: LD_ADDR_EXP 64
1294: PUSH
1295: LD_EXP 54
1299: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1300: LD_EXP 54
1304: PPUSH
1305: LD_INT 165
1307: PPUSH
1308: LD_INT 110
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 48
// ComHold ( Belkov ) ;
1318: LD_EXP 54
1322: PPUSH
1323: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1327: LD_EXP 1
1331: PUSH
1332: LD_STRING 02_Belkov2
1334: PPUSH
1335: CALL_OW 28
1339: AND
1340: IFFALSE 1395
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1342: LD_ADDR_EXP 55
1346: PUSH
1347: LD_STRING Belkov2
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: CALL 6971 0 2
1357: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1358: LD_ADDR_EXP 64
1362: PUSH
1363: LD_EXP 55
1367: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1368: LD_EXP 55
1372: PPUSH
1373: LD_INT 165
1375: PPUSH
1376: LD_INT 110
1378: PPUSH
1379: LD_INT 0
1381: PPUSH
1382: CALL_OW 48
// ComHold ( Belkov2 ) ;
1386: LD_EXP 55
1390: PPUSH
1391: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1395: LD_EXP 54
1399: PUSH
1400: LD_EXP 55
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PPUSH
1409: LD_INT 1
1411: PPUSH
1412: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1416: LD_EXP 50
1420: PPUSH
1421: LD_INT 164
1423: PPUSH
1424: LD_INT 108
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 48
// ComHold ( Burlak ) ;
1434: LD_EXP 50
1438: PPUSH
1439: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1443: LD_EXP 51
1447: PPUSH
1448: LD_INT 159
1450: PPUSH
1451: LD_INT 107
1453: PPUSH
1454: LD_INT 5
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1464: LD_EXP 53
1468: PPUSH
1469: LD_INT 159
1471: PPUSH
1472: LD_INT 107
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: LD_INT 0
1480: PPUSH
1481: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1485: LD_EXP 52
1489: PPUSH
1490: LD_INT 159
1492: PPUSH
1493: LD_INT 107
1495: PPUSH
1496: LD_INT 5
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: CALL_OW 50
// end ;
1506: LD_VAR 0 1
1510: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1516: LD_ADDR_EXP 60
1520: PUSH
1521: LD_STRING 02_BeriaBase_2
1523: PPUSH
1524: EMPTY
1525: PPUSH
1526: CALL_OW 30
1530: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1531: LD_ADDR_EXP 59
1535: PUSH
1536: LD_STRING 02_other_beria
1538: PPUSH
1539: CALL_OW 31
1543: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1544: LD_ADDR_EXP 57
1548: PUSH
1549: LD_STRING 02_other_survivors
1551: PPUSH
1552: CALL_OW 31
1556: ST_TO_ADDR
// uc_side = 3 ;
1557: LD_ADDR_OWVAR 20
1561: PUSH
1562: LD_INT 3
1564: ST_TO_ADDR
// uc_nation = 3 ;
1565: LD_ADDR_OWVAR 21
1569: PUSH
1570: LD_INT 3
1572: ST_TO_ADDR
// for i := 1 to beriaBase do
1573: LD_ADDR_VAR 0 2
1577: PUSH
1578: DOUBLE
1579: LD_INT 1
1581: DEC
1582: ST_TO_ADDR
1583: LD_EXP 60
1587: PUSH
1588: FOR_TO
1589: IFFALSE 1842
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1591: LD_ADDR_OWVAR 42
1595: PUSH
1596: LD_EXP 60
1600: PUSH
1601: LD_VAR 0 2
1605: ARRAY
1606: PUSH
1607: LD_INT 1
1609: ARRAY
1610: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1611: LD_ADDR_OWVAR 43
1615: PUSH
1616: LD_EXP 60
1620: PUSH
1621: LD_VAR 0 2
1625: ARRAY
1626: PUSH
1627: LD_INT 5
1629: ARRAY
1630: ST_TO_ADDR
// if bc_type = b_lab then
1631: LD_OWVAR 42
1635: PUSH
1636: LD_INT 6
1638: EQUAL
1639: IFFALSE 1657
// begin bc_kind1 = b_lab_basic ;
1641: LD_ADDR_OWVAR 44
1645: PUSH
1646: LD_INT 9
1648: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1649: LD_ADDR_OWVAR 45
1653: PUSH
1654: LD_INT 9
1656: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1657: LD_OWVAR 42
1661: PUSH
1662: LD_INT 7
1664: EQUAL
1665: PUSH
1666: LD_OWVAR 42
1670: PUSH
1671: LD_INT 8
1673: EQUAL
1674: OR
1675: IFFALSE 1791
// begin if beriaBase [ i ] [ 7 ] then
1677: LD_EXP 60
1681: PUSH
1682: LD_VAR 0 2
1686: ARRAY
1687: PUSH
1688: LD_INT 7
1690: ARRAY
1691: IFFALSE 1713
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1693: LD_ADDR_OWVAR 44
1697: PUSH
1698: LD_EXP 60
1702: PUSH
1703: LD_VAR 0 2
1707: ARRAY
1708: PUSH
1709: LD_INT 7
1711: ARRAY
1712: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1713: LD_EXP 60
1717: PUSH
1718: LD_VAR 0 2
1722: ARRAY
1723: PUSH
1724: LD_INT 8
1726: ARRAY
1727: IFFALSE 1749
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1729: LD_ADDR_OWVAR 45
1733: PUSH
1734: LD_EXP 60
1738: PUSH
1739: LD_VAR 0 2
1743: ARRAY
1744: PUSH
1745: LD_INT 8
1747: ARRAY
1748: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1749: LD_EXP 60
1753: PUSH
1754: LD_VAR 0 2
1758: ARRAY
1759: PUSH
1760: LD_INT 7
1762: ARRAY
1763: NOT
1764: PUSH
1765: LD_EXP 60
1769: PUSH
1770: LD_VAR 0 2
1774: ARRAY
1775: PUSH
1776: LD_INT 8
1778: ARRAY
1779: NOT
1780: AND
1781: IFFALSE 1791
// bc_type := b_lab ;
1783: LD_ADDR_OWVAR 42
1787: PUSH
1788: LD_INT 6
1790: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1791: LD_EXP 60
1795: PUSH
1796: LD_VAR 0 2
1800: ARRAY
1801: PUSH
1802: LD_INT 2
1804: ARRAY
1805: PPUSH
1806: LD_EXP 60
1810: PUSH
1811: LD_VAR 0 2
1815: ARRAY
1816: PUSH
1817: LD_INT 3
1819: ARRAY
1820: PPUSH
1821: LD_EXP 60
1825: PUSH
1826: LD_VAR 0 2
1830: ARRAY
1831: PUSH
1832: LD_INT 4
1834: ARRAY
1835: PPUSH
1836: CALL_OW 47
// end ;
1840: GO 1588
1842: POP
1843: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1844: LD_ADDR_EXP 61
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_INT 3
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 0
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PPUSH
1873: CALL_OW 69
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1882: LD_EXP 61
1886: PPUSH
1887: LD_STRING beria
1889: PPUSH
1890: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1894: LD_EXP 61
1898: PPUSH
1899: CALL_OW 274
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: LD_EXP 2
1911: PPUSH
1912: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1916: LD_EXP 61
1920: PPUSH
1921: CALL_OW 274
1925: PPUSH
1926: LD_INT 2
1928: PPUSH
1929: LD_EXP 3
1933: PPUSH
1934: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1938: LD_EXP 61
1942: PPUSH
1943: CALL_OW 274
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: LD_EXP 61
1955: PPUSH
1956: CALL_OW 274
1960: PPUSH
1961: LD_INT 2
1963: PPUSH
1964: CALL_OW 275
1968: PUSH
1969: LD_EXP 42
1973: PLUS
1974: PPUSH
1975: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1979: LD_EXP 61
1983: PPUSH
1984: CALL_OW 274
1988: PPUSH
1989: LD_INT 2
1991: PPUSH
1992: LD_EXP 61
1996: PPUSH
1997: CALL_OW 274
2001: PPUSH
2002: LD_INT 2
2004: PPUSH
2005: CALL_OW 275
2009: PUSH
2010: LD_EXP 43
2014: PLUS
2015: PPUSH
2016: CALL_OW 277
// uc_side = 6 ;
2020: LD_ADDR_OWVAR 20
2024: PUSH
2025: LD_INT 6
2027: ST_TO_ADDR
// for i in otherBeriaUnits do
2028: LD_ADDR_VAR 0 2
2032: PUSH
2033: LD_EXP 59
2037: PUSH
2038: FOR_IN
2039: IFFALSE 2064
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_INT 159
2048: PPUSH
2049: LD_INT 107
2051: PPUSH
2052: LD_INT 10
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 50
2062: GO 2038
2064: POP
2065: POP
// for i in other_survivors do
2066: LD_ADDR_VAR 0 2
2070: PUSH
2071: LD_EXP 57
2075: PUSH
2076: FOR_IN
2077: IFFALSE 2102
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2079: LD_VAR 0 2
2083: PPUSH
2084: LD_INT 159
2086: PPUSH
2087: LD_INT 107
2089: PPUSH
2090: LD_INT 10
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 50
2100: GO 2076
2102: POP
2103: POP
// end ;
2104: LD_VAR 0 1
2108: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2115: LD_ADDR_EXP 67
2119: PUSH
2120: LD_STRING 02_KirovBase_3
2122: PPUSH
2123: EMPTY
2124: PPUSH
2125: CALL_OW 30
2129: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2130: LD_ADDR_EXP 66
2134: PUSH
2135: LD_STRING 02_other_kirov
2137: PPUSH
2138: CALL_OW 31
2142: ST_TO_ADDR
// uc_side = 6 ;
2143: LD_ADDR_OWVAR 20
2147: PUSH
2148: LD_INT 6
2150: ST_TO_ADDR
// uc_nation = 3 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 3
2158: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2159: LD_ADDR_EXP 62
2163: PUSH
2164: LD_STRING Kurin
2166: PPUSH
2167: LD_INT 0
2169: PPUSH
2170: CALL 6971 0 2
2174: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2175: LD_EXP 62
2179: PPUSH
2180: LD_INT 166
2182: PPUSH
2183: LD_INT 109
2185: PPUSH
2186: LD_INT 0
2188: PPUSH
2189: CALL_OW 48
// ComHold ( Kurin ) ;
2193: LD_EXP 62
2197: PPUSH
2198: CALL_OW 140
// for i := 1 to kirovBase do
2202: LD_ADDR_VAR 0 2
2206: PUSH
2207: DOUBLE
2208: LD_INT 1
2210: DEC
2211: ST_TO_ADDR
2212: LD_EXP 67
2216: PUSH
2217: FOR_TO
2218: IFFALSE 2656
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2220: LD_ADDR_OWVAR 42
2224: PUSH
2225: LD_EXP 67
2229: PUSH
2230: LD_VAR 0 2
2234: ARRAY
2235: PUSH
2236: LD_INT 1
2238: ARRAY
2239: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2240: LD_ADDR_OWVAR 43
2244: PUSH
2245: LD_EXP 67
2249: PUSH
2250: LD_VAR 0 2
2254: ARRAY
2255: PUSH
2256: LD_INT 5
2258: ARRAY
2259: ST_TO_ADDR
// if bc_type = b_depot then
2260: LD_OWVAR 42
2264: PUSH
2265: LD_INT 0
2267: EQUAL
2268: IFFALSE 2278
// bc_type = b_warehouse ;
2270: LD_ADDR_OWVAR 42
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// if bc_type = b_armoury then
2278: LD_OWVAR 42
2282: PUSH
2283: LD_INT 4
2285: EQUAL
2286: IFFALSE 2296
// bc_type = b_barracks ;
2288: LD_ADDR_OWVAR 42
2292: PUSH
2293: LD_INT 5
2295: ST_TO_ADDR
// if bc_type = b_lab then
2296: LD_OWVAR 42
2300: PUSH
2301: LD_INT 6
2303: EQUAL
2304: IFFALSE 2322
// begin bc_kind1 = b_lab_weapon ;
2306: LD_ADDR_OWVAR 44
2310: PUSH
2311: LD_INT 10
2313: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2314: LD_ADDR_OWVAR 45
2318: PUSH
2319: LD_INT 9
2321: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2322: LD_OWVAR 42
2326: PUSH
2327: LD_INT 2
2329: EQUAL
2330: IFFALSE 2340
// bc_type = b_factory ;
2332: LD_ADDR_OWVAR 42
2336: PUSH
2337: LD_INT 3
2339: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2340: LD_OWVAR 42
2344: PUSH
2345: LD_INT 7
2347: EQUAL
2348: PUSH
2349: LD_OWVAR 42
2353: PUSH
2354: LD_INT 8
2356: EQUAL
2357: OR
2358: IFFALSE 2474
// begin if kirovBase [ i ] [ 7 ] then
2360: LD_EXP 67
2364: PUSH
2365: LD_VAR 0 2
2369: ARRAY
2370: PUSH
2371: LD_INT 7
2373: ARRAY
2374: IFFALSE 2396
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2376: LD_ADDR_OWVAR 44
2380: PUSH
2381: LD_EXP 67
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: PUSH
2392: LD_INT 7
2394: ARRAY
2395: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2396: LD_EXP 67
2400: PUSH
2401: LD_VAR 0 2
2405: ARRAY
2406: PUSH
2407: LD_INT 8
2409: ARRAY
2410: IFFALSE 2432
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2412: LD_ADDR_OWVAR 45
2416: PUSH
2417: LD_EXP 67
2421: PUSH
2422: LD_VAR 0 2
2426: ARRAY
2427: PUSH
2428: LD_INT 8
2430: ARRAY
2431: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2432: LD_EXP 67
2436: PUSH
2437: LD_VAR 0 2
2441: ARRAY
2442: PUSH
2443: LD_INT 7
2445: ARRAY
2446: NOT
2447: PUSH
2448: LD_EXP 67
2452: PUSH
2453: LD_VAR 0 2
2457: ARRAY
2458: PUSH
2459: LD_INT 8
2461: ARRAY
2462: NOT
2463: AND
2464: IFFALSE 2474
// bc_type := b_lab ;
2466: LD_ADDR_OWVAR 42
2470: PUSH
2471: LD_INT 6
2473: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2474: LD_OWVAR 42
2478: PUSH
2479: LD_INT 31
2481: EQUAL
2482: IFFALSE 2506
// begin bc_type = b_bunker ;
2484: LD_ADDR_OWVAR 42
2488: PUSH
2489: LD_INT 32
2491: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2492: LD_ADDR_EXP 78
2496: PUSH
2497: LD_EXP 78
2501: PUSH
2502: LD_INT 1
2504: PLUS
2505: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2506: LD_ADDR_VAR 0 4
2510: PUSH
2511: LD_EXP 67
2515: PUSH
2516: LD_VAR 0 2
2520: ARRAY
2521: PUSH
2522: LD_INT 2
2524: ARRAY
2525: PPUSH
2526: LD_EXP 67
2530: PUSH
2531: LD_VAR 0 2
2535: ARRAY
2536: PUSH
2537: LD_INT 3
2539: ARRAY
2540: PPUSH
2541: LD_EXP 67
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: PUSH
2552: LD_INT 4
2554: ARRAY
2555: PPUSH
2556: CALL_OW 47
2560: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 4
2568: LESS
2569: PUSH
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 32
2577: EQUAL
2578: AND
2579: IFFALSE 2628
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: LD_INT 42
2588: PUSH
2589: LD_INT 43
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: PUSH
2596: LD_INT 1
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 12
2606: ARRAY
2607: PPUSH
2608: CALL_OW 431
// tmp = tmp + 1 ;
2612: LD_ADDR_VAR 0 3
2616: PUSH
2617: LD_VAR 0 3
2621: PUSH
2622: LD_INT 1
2624: PLUS
2625: ST_TO_ADDR
// end else
2626: GO 2654
// if bc_type = b_bunker then
2628: LD_OWVAR 42
2632: PUSH
2633: LD_INT 32
2635: EQUAL
2636: IFFALSE 2654
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2638: LD_ADDR_EXP 73
2642: PUSH
2643: LD_EXP 73
2647: PUSH
2648: LD_VAR 0 4
2652: ADD
2653: ST_TO_ADDR
// end ;
2654: GO 2217
2656: POP
2657: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2658: LD_ADDR_EXP 68
2662: PUSH
2663: LD_INT 22
2665: PUSH
2666: LD_INT 6
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 30
2675: PUSH
2676: LD_INT 1
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PPUSH
2687: CALL_OW 69
2691: PUSH
2692: LD_INT 1
2694: ARRAY
2695: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2696: LD_EXP 68
2700: PPUSH
2701: LD_STRING kirov
2703: PPUSH
2704: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2708: LD_EXP 68
2712: PPUSH
2713: CALL_OW 274
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: LD_INT 5000
2723: PPUSH
2724: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2728: LD_EXP 68
2732: PPUSH
2733: CALL_OW 274
2737: PPUSH
2738: LD_INT 2
2740: PPUSH
2741: LD_INT 2000
2743: PPUSH
2744: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2748: LD_ADDR_EXP 70
2752: PUSH
2753: LD_INT 22
2755: PUSH
2756: LD_INT 6
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 21
2765: PUSH
2766: LD_INT 3
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: LD_INT 30
2775: PUSH
2776: LD_INT 5
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: LIST
2787: PPUSH
2788: CALL_OW 69
2792: PPUSH
2793: LD_INT 145
2795: PPUSH
2796: LD_INT 102
2798: PPUSH
2799: CALL_OW 73
2803: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2804: LD_ADDR_EXP 71
2808: PUSH
2809: LD_INT 22
2811: PUSH
2812: LD_INT 6
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: LD_INT 21
2821: PUSH
2822: LD_INT 3
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 30
2831: PUSH
2832: LD_INT 5
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: LIST
2843: PPUSH
2844: CALL_OW 69
2848: PUSH
2849: LD_EXP 70
2853: DIFF
2854: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2855: LD_ADDR_EXP 71
2859: PUSH
2860: LD_EXP 71
2864: PUSH
2865: LD_INT 1
2867: ARRAY
2868: ST_TO_ADDR
// end ;
2869: LD_VAR 0 1
2873: RET
// export function PrepareKirovPersonel ; var i ; begin
2874: LD_INT 0
2876: PPUSH
2877: PPUSH
// PrepareEngineer ( false , 7 ) ;
2878: LD_INT 0
2880: PPUSH
2881: LD_INT 7
2883: PPUSH
2884: CALL_OW 382
// kirovEng = CreateHuman ;
2888: LD_ADDR_EXP 72
2892: PUSH
2893: CALL_OW 44
2897: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2898: LD_EXP 72
2902: PPUSH
2903: LD_INT 159
2905: PPUSH
2906: LD_INT 107
2908: PPUSH
2909: LD_INT 10
2911: PPUSH
2912: LD_INT 0
2914: PPUSH
2915: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2919: LD_ADDR_EXP 63
2923: PUSH
2924: LD_STRING Popov
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL 6971 0 2
2934: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2935: LD_EXP 63
2939: PPUSH
2940: LD_INT 4
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2950: LD_EXP 63
2954: PPUSH
2955: LD_INT 98
2957: PPUSH
2958: LD_INT 36
2960: PPUSH
2961: CALL_OW 118
// hc_name :=  ;
2965: LD_ADDR_OWVAR 26
2969: PUSH
2970: LD_STRING 
2972: ST_TO_ADDR
// hc_gallery :=  ;
2973: LD_ADDR_OWVAR 33
2977: PUSH
2978: LD_STRING 
2980: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2981: LD_INT 0
2983: PPUSH
2984: LD_INT 2
2986: PPUSH
2987: CALL_OW 381
// ruScout = CreateHuman ;
2991: LD_ADDR_EXP 65
2995: PUSH
2996: CALL_OW 44
3000: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
3001: LD_EXP 65
3005: PPUSH
3006: LD_INT 3
3008: PPUSH
3009: LD_INT 0
3011: PPUSH
3012: CALL_OW 49
// ComCrawl ( ruScout ) ;
3016: LD_EXP 65
3020: PPUSH
3021: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
3025: LD_EXP 65
3029: PPUSH
3030: LD_INT 98
3032: PPUSH
3033: LD_INT 36
3035: PPUSH
3036: CALL_OW 178
// uc_side = 6 ;
3040: LD_ADDR_OWVAR 20
3044: PUSH
3045: LD_INT 6
3047: ST_TO_ADDR
// for i in otherKirovUnits do
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_EXP 66
3057: PUSH
3058: FOR_IN
3059: IFFALSE 3195
// begin SetSide ( i , 6 ) ;
3061: LD_VAR 0 2
3065: PPUSH
3066: LD_INT 6
3068: PPUSH
3069: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
3073: LD_VAR 0 2
3077: PPUSH
3078: CALL_OW 257
3082: PUSH
3083: LD_INT 1
3085: EQUAL
3086: PUSH
3087: LD_EXP 78
3091: PUSH
3092: LD_INT 0
3094: GREATER
3095: AND
3096: IFFALSE 3172
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3098: LD_VAR 0 2
3102: PPUSH
3103: LD_INT 18
3105: PPUSH
3106: LD_INT 22
3108: PUSH
3109: LD_INT 6
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 21
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_INT 32
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: LIST
3140: PPUSH
3141: CALL_OW 70
3145: PUSH
3146: LD_EXP 78
3150: ARRAY
3151: PPUSH
3152: CALL 8515 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3156: LD_ADDR_EXP 78
3160: PUSH
3161: LD_EXP 78
3165: PUSH
3166: LD_INT 1
3168: MINUS
3169: ST_TO_ADDR
// end else
3170: GO 3193
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3172: LD_VAR 0 2
3176: PPUSH
3177: LD_INT 159
3179: PPUSH
3180: LD_INT 107
3182: PPUSH
3183: LD_INT 10
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL_OW 50
// end ; end ;
3193: GO 3058
3195: POP
3196: POP
// end ;
3197: LD_VAR 0 1
3201: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3202: LD_INT 0
3204: PPUSH
3205: PPUSH
3206: PPUSH
3207: PPUSH
// uc_side = 6 ;
3208: LD_ADDR_OWVAR 20
3212: PUSH
3213: LD_INT 6
3215: ST_TO_ADDR
// uc_nation = 3 ;
3216: LD_ADDR_OWVAR 21
3220: PUSH
3221: LD_INT 3
3223: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3224: LD_ADDR_EXP 83
3228: PUSH
3229: LD_STRING Grishko
3231: PPUSH
3232: LD_INT 0
3234: PPUSH
3235: CALL 6971 0 2
3239: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3240: LD_EXP 83
3244: PPUSH
3245: LD_INT 218
3247: PPUSH
3248: LD_INT 108
3250: PPUSH
3251: LD_INT 3
3253: PPUSH
3254: LD_INT 0
3256: PPUSH
3257: CALL_OW 50
// ComHold ( Grishko ) ;
3261: LD_EXP 83
3265: PPUSH
3266: CALL_OW 140
// end ;
3270: LD_VAR 0 1
3274: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3275: LD_INT 0
3277: PPUSH
3278: PPUSH
3279: PPUSH
// uc_side = 3 ;
3280: LD_ADDR_OWVAR 20
3284: PUSH
3285: LD_INT 3
3287: ST_TO_ADDR
// uc_nation = 3 ;
3288: LD_ADDR_OWVAR 21
3292: PUSH
3293: LD_INT 3
3295: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3296: LD_ADDR_VAR 0 2
3300: PUSH
3301: DOUBLE
3302: LD_INT 1
3304: DEC
3305: ST_TO_ADDR
3306: LD_EXP 4
3310: PUSH
3311: FOR_TO
3312: IFFALSE 3464
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3314: LD_EXP 4
3318: PUSH
3319: LD_VAR 0 2
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_EXP 4
3333: PUSH
3334: LD_VAR 0 2
3338: ARRAY
3339: PUSH
3340: LD_INT 2
3342: ARRAY
3343: PPUSH
3344: LD_EXP 4
3348: PUSH
3349: LD_VAR 0 2
3353: ARRAY
3354: PUSH
3355: LD_INT 3
3357: ARRAY
3358: PPUSH
3359: LD_EXP 4
3363: PUSH
3364: LD_VAR 0 2
3368: ARRAY
3369: PUSH
3370: LD_INT 4
3372: ARRAY
3373: PPUSH
3374: LD_EXP 4
3378: PUSH
3379: LD_VAR 0 2
3383: ARRAY
3384: PUSH
3385: LD_INT 5
3387: ARRAY
3388: PPUSH
3389: CALL 37145 0 5
// vehicle = CreateVehicle ;
3393: LD_ADDR_VAR 0 3
3397: PUSH
3398: CALL_OW 45
3402: ST_TO_ADDR
// SetDir ( vehicle , rand ( 0 , 5 ) ) ;
3403: LD_VAR 0 3
3407: PPUSH
3408: LD_INT 0
3410: PPUSH
3411: LD_INT 5
3413: PPUSH
3414: CALL_OW 12
3418: PPUSH
3419: CALL_OW 233
// PlaceUnitArea ( vehicle , BeriaParkingArea , false ) ;
3423: LD_VAR 0 3
3427: PPUSH
3428: LD_INT 33
3430: PPUSH
3431: LD_INT 0
3433: PPUSH
3434: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3438: LD_VAR 0 3
3442: PPUSH
3443: LD_EXP 4
3447: PUSH
3448: LD_VAR 0 2
3452: ARRAY
3453: PUSH
3454: LD_INT 6
3456: ARRAY
3457: PPUSH
3458: CALL_OW 234
// end ;
3462: GO 3311
3464: POP
3465: POP
// end ;
3466: LD_VAR 0 1
3470: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3471: LD_INT 0
3473: PPUSH
3474: PPUSH
3475: PPUSH
3476: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_STRING 02_OtherBuildings_4
3484: PPUSH
3485: EMPTY
3486: PPUSH
3487: CALL_OW 30
3491: ST_TO_ADDR
// uc_side = 3 ;
3492: LD_ADDR_OWVAR 20
3496: PUSH
3497: LD_INT 3
3499: ST_TO_ADDR
// for i := 1 to otherBuildings do
3500: LD_ADDR_VAR 0 2
3504: PUSH
3505: DOUBLE
3506: LD_INT 1
3508: DEC
3509: ST_TO_ADDR
3510: LD_VAR 0 3
3514: PUSH
3515: FOR_TO
3516: IFFALSE 3777
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3518: LD_ADDR_OWVAR 21
3522: PUSH
3523: LD_VAR 0 3
3527: PUSH
3528: LD_VAR 0 2
3532: ARRAY
3533: PUSH
3534: LD_INT 6
3536: ARRAY
3537: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3538: LD_ADDR_OWVAR 42
3542: PUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_VAR 0 2
3552: ARRAY
3553: PUSH
3554: LD_INT 1
3556: ARRAY
3557: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3558: LD_ADDR_OWVAR 43
3562: PUSH
3563: LD_VAR 0 3
3567: PUSH
3568: LD_VAR 0 2
3572: ARRAY
3573: PUSH
3574: LD_INT 5
3576: ARRAY
3577: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_VAR 0 3
3587: PUSH
3588: LD_VAR 0 2
3592: ARRAY
3593: PUSH
3594: LD_INT 2
3596: ARRAY
3597: PPUSH
3598: LD_VAR 0 3
3602: PUSH
3603: LD_VAR 0 2
3607: ARRAY
3608: PUSH
3609: LD_INT 3
3611: ARRAY
3612: PPUSH
3613: LD_VAR 0 3
3617: PUSH
3618: LD_VAR 0 2
3622: ARRAY
3623: PUSH
3624: LD_INT 4
3626: ARRAY
3627: PPUSH
3628: CALL_OW 47
3632: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3633: LD_VAR 0 4
3637: PPUSH
3638: LD_VAR 0 3
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: PUSH
3649: LD_INT 7
3651: ARRAY
3652: PPUSH
3653: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3657: LD_VAR 0 4
3661: PPUSH
3662: CALL_OW 266
3666: PUSH
3667: LD_INT 0
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: IN
3677: IFFALSE 3775
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3679: LD_VAR 0 4
3683: PPUSH
3684: CALL_OW 274
3688: PPUSH
3689: LD_INT 1
3691: PPUSH
3692: LD_VAR 0 3
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: PUSH
3703: LD_INT 8
3705: ARRAY
3706: PPUSH
3707: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3711: LD_VAR 0 4
3715: PPUSH
3716: CALL_OW 274
3720: PPUSH
3721: LD_INT 1
3723: PPUSH
3724: LD_VAR 0 3
3728: PUSH
3729: LD_VAR 0 2
3733: ARRAY
3734: PUSH
3735: LD_INT 9
3737: ARRAY
3738: PPUSH
3739: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3743: LD_VAR 0 4
3747: PPUSH
3748: CALL_OW 274
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_VAR 0 3
3760: PUSH
3761: LD_VAR 0 2
3765: ARRAY
3766: PUSH
3767: LD_INT 10
3769: ARRAY
3770: PPUSH
3771: CALL_OW 277
// end ; end ;
3775: GO 3515
3777: POP
3778: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3779: LD_ADDR_VAR 0 3
3783: PUSH
3784: LD_STRING 02_AmericanBuildings_5
3786: PPUSH
3787: EMPTY
3788: PPUSH
3789: CALL_OW 30
3793: ST_TO_ADDR
// uc_side = 1 ;
3794: LD_ADDR_OWVAR 20
3798: PUSH
3799: LD_INT 1
3801: ST_TO_ADDR
// uc_nation = 1 ;
3802: LD_ADDR_OWVAR 21
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// for i := 1 to otherBuildings do
3810: LD_ADDR_VAR 0 2
3814: PUSH
3815: DOUBLE
3816: LD_INT 1
3818: DEC
3819: ST_TO_ADDR
3820: LD_VAR 0 3
3824: PUSH
3825: FOR_TO
3826: IFFALSE 4030
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3828: LD_ADDR_OWVAR 42
3832: PUSH
3833: LD_VAR 0 3
3837: PUSH
3838: LD_VAR 0 2
3842: ARRAY
3843: PUSH
3844: LD_INT 1
3846: ARRAY
3847: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3848: LD_ADDR_OWVAR 43
3852: PUSH
3853: LD_VAR 0 3
3857: PUSH
3858: LD_VAR 0 2
3862: ARRAY
3863: PUSH
3864: LD_INT 5
3866: ARRAY
3867: ST_TO_ADDR
// if bc_type = b_breastwork then
3868: LD_OWVAR 42
3872: PUSH
3873: LD_INT 31
3875: EQUAL
3876: IFFALSE 3949
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3878: LD_ADDR_VAR 0 4
3882: PUSH
3883: LD_VAR 0 3
3887: PUSH
3888: LD_VAR 0 2
3892: ARRAY
3893: PUSH
3894: LD_INT 2
3896: ARRAY
3897: PPUSH
3898: LD_VAR 0 3
3902: PUSH
3903: LD_VAR 0 2
3907: ARRAY
3908: PUSH
3909: LD_INT 3
3911: ARRAY
3912: PPUSH
3913: LD_VAR 0 3
3917: PUSH
3918: LD_VAR 0 2
3922: ARRAY
3923: PUSH
3924: LD_INT 4
3926: ARRAY
3927: PPUSH
3928: CALL_OW 47
3932: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3933: LD_EXP 44
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: CALL 8605 0 2
// end else
3947: GO 4004
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3949: LD_ADDR_VAR 0 4
3953: PUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 2
3963: ARRAY
3964: PUSH
3965: LD_INT 2
3967: ARRAY
3968: PPUSH
3969: LD_VAR 0 3
3973: PUSH
3974: LD_VAR 0 2
3978: ARRAY
3979: PUSH
3980: LD_INT 3
3982: ARRAY
3983: PPUSH
3984: LD_VAR 0 3
3988: PUSH
3989: LD_VAR 0 2
3993: ARRAY
3994: PUSH
3995: LD_INT 4
3997: ARRAY
3998: PPUSH
3999: CALL_OW 47
4003: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
4004: LD_VAR 0 4
4008: PPUSH
4009: LD_VAR 0 3
4013: PUSH
4014: LD_VAR 0 2
4018: ARRAY
4019: PUSH
4020: LD_INT 7
4022: ARRAY
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3825
4030: POP
4031: POP
// end ;
4032: LD_VAR 0 1
4036: RET
// export function PrepareSecondBaseTeam ; var i ; begin
4037: LD_INT 0
4039: PPUSH
4040: PPUSH
// secondBaseTeam = [ ] ;
4041: LD_ADDR_EXP 79
4045: PUSH
4046: EMPTY
4047: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
4048: LD_INT 226
4050: PPUSH
4051: LD_INT 109
4053: PPUSH
4054: LD_INT 6
4056: PPUSH
4057: CALL_OW 441
// uc_side = 6 ;
4061: LD_ADDR_OWVAR 20
4065: PUSH
4066: LD_INT 6
4068: ST_TO_ADDR
// uc_nation = 3 ;
4069: LD_ADDR_OWVAR 21
4073: PUSH
4074: LD_INT 3
4076: ST_TO_ADDR
// hc_name =  ;
4077: LD_ADDR_OWVAR 26
4081: PUSH
4082: LD_STRING 
4084: ST_TO_ADDR
// hc_gallery =  ;
4085: LD_ADDR_OWVAR 33
4089: PUSH
4090: LD_STRING 
4092: ST_TO_ADDR
// for i := 1 to 3 do
4093: LD_ADDR_VAR 0 2
4097: PUSH
4098: DOUBLE
4099: LD_INT 1
4101: DEC
4102: ST_TO_ADDR
4103: LD_INT 3
4105: PUSH
4106: FOR_TO
4107: IFFALSE 4160
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_EXP 44
4116: PPUSH
4117: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4121: LD_ADDR_EXP 79
4125: PUSH
4126: LD_EXP 79
4130: PUSH
4131: CALL_OW 44
4135: ADD
4136: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4137: LD_EXP 79
4141: PUSH
4142: LD_VAR 0 2
4146: ARRAY
4147: PPUSH
4148: LD_INT 19
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: CALL_OW 49
// end ;
4158: GO 4106
4160: POP
4161: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4162: LD_INT 0
4164: PPUSH
4165: LD_EXP 44
4169: PPUSH
4170: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4174: LD_ADDR_EXP 79
4178: PUSH
4179: LD_EXP 79
4183: PUSH
4184: CALL_OW 44
4188: ADD
4189: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4190: LD_EXP 79
4194: PUSH
4195: LD_INT 4
4197: ARRAY
4198: PPUSH
4199: LD_INT 19
4201: PPUSH
4202: LD_INT 0
4204: PPUSH
4205: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4209: LD_INT 0
4211: PPUSH
4212: LD_EXP 44
4216: PPUSH
4217: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4221: LD_ADDR_EXP 79
4225: PUSH
4226: LD_EXP 79
4230: PUSH
4231: CALL_OW 44
4235: ADD
4236: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4237: LD_EXP 79
4241: PUSH
4242: LD_INT 5
4244: ARRAY
4245: PPUSH
4246: LD_INT 19
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4256: LD_EXP 79
4260: PPUSH
4261: LD_INT 214
4263: PPUSH
4264: LD_INT 105
4266: PPUSH
4267: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4271: LD_EXP 79
4275: PPUSH
4276: LD_INT 25
4278: PUSH
4279: LD_INT 2
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PPUSH
4286: CALL_OW 72
4290: PPUSH
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 222
4296: PPUSH
4297: LD_INT 115
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4307: LD_EXP 79
4311: PPUSH
4312: LD_INT 25
4314: PUSH
4315: LD_INT 2
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 72
4326: PPUSH
4327: LD_INT 224
4329: PPUSH
4330: LD_INT 107
4332: PPUSH
4333: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4337: LD_EXP 79
4341: PPUSH
4342: LD_INT 25
4344: PUSH
4345: LD_INT 2
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PPUSH
4352: CALL_OW 72
4356: PPUSH
4357: LD_INT 228
4359: PPUSH
4360: LD_INT 110
4362: PPUSH
4363: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4367: LD_EXP 79
4371: PPUSH
4372: LD_INT 25
4374: PUSH
4375: LD_INT 2
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PPUSH
4382: CALL_OW 72
4386: PPUSH
4387: LD_INT 29
4389: PPUSH
4390: LD_INT 226
4392: PPUSH
4393: LD_INT 109
4395: PPUSH
4396: LD_INT 3
4398: PPUSH
4399: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4403: LD_EXP 79
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: PPUSH
4423: LD_INT 4
4425: PPUSH
4426: LD_INT 216
4428: PPUSH
4429: LD_INT 114
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4439: LD_EXP 79
4443: PPUSH
4444: LD_INT 25
4446: PUSH
4447: LD_INT 2
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PPUSH
4454: CALL_OW 72
4458: PPUSH
4459: LD_INT 31
4461: PPUSH
4462: LD_INT 215
4464: PPUSH
4465: LD_INT 103
4467: PPUSH
4468: LD_INT 3
4470: PPUSH
4471: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4475: LD_EXP 79
4479: PPUSH
4480: LD_INT 25
4482: PUSH
4483: LD_INT 2
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 72
4494: PPUSH
4495: LD_INT 31
4497: PPUSH
4498: LD_INT 227
4500: PPUSH
4501: LD_INT 116
4503: PPUSH
4504: LD_INT 5
4506: PPUSH
4507: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4511: LD_EXP 79
4515: PPUSH
4516: LD_INT 25
4518: PUSH
4519: LD_INT 2
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: PPUSH
4526: CALL_OW 72
4530: PPUSH
4531: LD_INT 208
4533: PPUSH
4534: LD_INT 106
4536: PPUSH
4537: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4541: LD_EXP 79
4545: PPUSH
4546: LD_INT 25
4548: PUSH
4549: LD_INT 2
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PPUSH
4556: CALL_OW 72
4560: PPUSH
4561: LD_INT 209
4563: PPUSH
4564: LD_INT 105
4566: PPUSH
4567: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4571: LD_EXP 79
4575: PUSH
4576: LD_INT 5
4578: ARRAY
4579: PPUSH
4580: LD_INT 209
4582: PPUSH
4583: LD_INT 105
4585: PPUSH
4586: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4590: LD_EXP 79
4594: PUSH
4595: LD_INT 5
4597: ARRAY
4598: PPUSH
4599: LD_INT 208
4601: PPUSH
4602: LD_INT 106
4604: PPUSH
4605: CALL_OW 178
// end ;
4609: LD_VAR 0 1
4613: RET
// export function SpawnKirovSupport ; var i , un ; begin
4614: LD_INT 0
4616: PPUSH
4617: PPUSH
4618: PPUSH
// uc_side = 6 ;
4619: LD_ADDR_OWVAR 20
4623: PUSH
4624: LD_INT 6
4626: ST_TO_ADDR
// uc_nation = 3 ;
4627: LD_ADDR_OWVAR 21
4631: PUSH
4632: LD_INT 3
4634: ST_TO_ADDR
// hc_name =  ;
4635: LD_ADDR_OWVAR 26
4639: PUSH
4640: LD_STRING 
4642: ST_TO_ADDR
// hc_gallery :=  ;
4643: LD_ADDR_OWVAR 33
4647: PUSH
4648: LD_STRING 
4650: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4651: LD_ADDR_VAR 0 2
4655: PUSH
4656: DOUBLE
4657: LD_INT 1
4659: DEC
4660: ST_TO_ADDR
4661: LD_EXP 81
4665: PUSH
4666: FOR_TO
4667: IFFALSE 4755
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4669: LD_INT 0
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 4
4677: PPUSH
4678: CALL_OW 12
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: LD_INT 2
4688: PPUSH
4689: CALL_OW 12
4693: PPUSH
4694: CALL_OW 380
// un = CreateHuman ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: CALL_OW 44
4707: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4708: LD_ADDR_EXP 80
4712: PUSH
4713: LD_EXP 80
4717: PUSH
4718: LD_VAR 0 3
4722: ADD
4723: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4724: LD_VAR 0 3
4728: PPUSH
4729: LD_INT 19
4731: PPUSH
4732: LD_INT 0
4734: PPUSH
4735: CALL_OW 49
// ComEnterUnit ( un , kirovDepot ) ;
4739: LD_VAR 0 3
4743: PPUSH
4744: LD_EXP 68
4748: PPUSH
4749: CALL_OW 120
// end ;
4753: GO 4666
4755: POP
4756: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4757: LD_ADDR_VAR 0 2
4761: PUSH
4762: DOUBLE
4763: LD_INT 1
4765: DEC
4766: ST_TO_ADDR
4767: LD_EXP 82
4771: PUSH
4772: LD_INT 1
4774: ARRAY
4775: PUSH
4776: LD_INT 4
4778: PLUS
4779: PUSH
4780: FOR_TO
4781: IFFALSE 4879
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4783: LD_INT 0
4785: PPUSH
4786: LD_INT 1
4788: PPUSH
4789: LD_INT 1
4791: PPUSH
4792: LD_INT 3
4794: PPUSH
4795: CALL_OW 12
4799: PPUSH
4800: CALL_OW 380
// un = CreateHuman ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: CALL_OW 44
4813: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_INT 19
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// if i > kirovBunkersToOccupy then
4829: LD_VAR 0 2
4833: PUSH
4834: LD_EXP 74
4838: GREATER
4839: IFFALSE 4857
// ComEnterUnit ( un , ru2_bar2 ) else
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_EXP 71
4850: PPUSH
4851: CALL_OW 120
4855: GO 4877
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4857: LD_VAR 0 3
4861: PPUSH
4862: LD_EXP 74
4866: PUSH
4867: LD_VAR 0 2
4871: ARRAY
4872: PPUSH
4873: CALL_OW 120
// end ;
4877: GO 4780
4879: POP
4880: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4881: LD_ADDR_VAR 0 2
4885: PUSH
4886: DOUBLE
4887: LD_INT 1
4889: DEC
4890: ST_TO_ADDR
4891: LD_EXP 82
4895: PUSH
4896: LD_INT 3
4898: ARRAY
4899: PUSH
4900: FOR_TO
4901: IFFALSE 5004
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4903: LD_INT 0
4905: PPUSH
4906: LD_INT 3
4908: PPUSH
4909: LD_INT 1
4911: PPUSH
4912: LD_INT 3
4914: PPUSH
4915: CALL_OW 12
4919: PPUSH
4920: CALL_OW 380
// un = CreateHuman ;
4924: LD_ADDR_VAR 0 3
4928: PUSH
4929: CALL_OW 44
4933: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4934: LD_VAR 0 3
4938: PPUSH
4939: LD_INT 19
4941: PPUSH
4942: LD_INT 0
4944: PPUSH
4945: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4949: LD_VAR 0 3
4953: PPUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 6
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 21
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 30
4976: PUSH
4977: LD_INT 3
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PPUSH
4989: CALL_OW 69
4993: PUSH
4994: LD_INT 1
4996: ARRAY
4997: PPUSH
4998: CALL_OW 120
// end ;
5002: GO 4900
5004: POP
5005: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
5006: LD_ADDR_VAR 0 2
5010: PUSH
5011: DOUBLE
5012: LD_INT 1
5014: DEC
5015: ST_TO_ADDR
5016: LD_EXP 82
5020: PUSH
5021: LD_INT 4
5023: ARRAY
5024: PUSH
5025: LD_INT 2
5027: PLUS
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5136
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_INT 4
5037: PPUSH
5038: LD_INT 1
5040: PPUSH
5041: LD_INT 3
5043: PPUSH
5044: CALL_OW 12
5048: PPUSH
5049: CALL_OW 380
// un = CreateHuman ;
5053: LD_ADDR_VAR 0 3
5057: PUSH
5058: CALL_OW 44
5062: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
5063: LD_VAR 0 3
5067: PPUSH
5068: LD_INT 19
5070: PPUSH
5071: LD_INT 0
5073: PPUSH
5074: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
5078: LD_VAR 0 3
5082: PPUSH
5083: LD_INT 18
5085: PPUSH
5086: LD_INT 22
5088: PUSH
5089: LD_INT 6
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 21
5098: PUSH
5099: LD_INT 3
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 30
5108: PUSH
5109: LD_INT 6
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: PPUSH
5121: CALL_OW 70
5125: PUSH
5126: LD_INT 1
5128: ARRAY
5129: PPUSH
5130: CALL_OW 120
// end ;
5134: GO 5029
5136: POP
5137: POP
// end ;
5138: LD_VAR 0 1
5142: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5143: LD_INT 0
5145: PPUSH
5146: PPUSH
5147: PPUSH
// survivorsArabianAttack = [ ] ;
5148: LD_ADDR_EXP 80
5152: PUSH
5153: EMPTY
5154: ST_TO_ADDR
// limit = 9 ;
5155: LD_ADDR_VAR 0 2
5159: PUSH
5160: LD_INT 9
5162: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5163: LD_ADDR_EXP 80
5167: PUSH
5168: LD_EXP 80
5172: PUSH
5173: LD_EXP 63
5177: ADD
5178: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5179: LD_EXP 54
5183: PPUSH
5184: CALL_OW 302
5188: PUSH
5189: LD_EXP 54
5193: PPUSH
5194: CALL_OW 255
5198: PUSH
5199: LD_INT 6
5201: EQUAL
5202: AND
5203: IFFALSE 5235
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5205: LD_ADDR_EXP 80
5209: PUSH
5210: LD_EXP 80
5214: PUSH
5215: LD_EXP 54
5219: ADD
5220: ST_TO_ADDR
// limit = limit - 1 ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_VAR 0 2
5230: PUSH
5231: LD_INT 1
5233: MINUS
5234: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5235: LD_EXP 55
5239: PPUSH
5240: CALL_OW 302
5244: PUSH
5245: LD_EXP 55
5249: PPUSH
5250: CALL_OW 255
5254: PUSH
5255: LD_INT 6
5257: EQUAL
5258: AND
5259: IFFALSE 5291
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5261: LD_ADDR_EXP 80
5265: PUSH
5266: LD_EXP 80
5270: PUSH
5271: LD_EXP 55
5275: ADD
5276: ST_TO_ADDR
// limit = limit - 1 ;
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: LD_VAR 0 2
5286: PUSH
5287: LD_INT 1
5289: MINUS
5290: ST_TO_ADDR
// end ; for unit in other_survivors do
5291: LD_ADDR_VAR 0 3
5295: PUSH
5296: LD_EXP 57
5300: PUSH
5301: FOR_IN
5302: IFFALSE 5362
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5304: LD_VAR 0 3
5308: PPUSH
5309: CALL_OW 302
5313: PUSH
5314: LD_VAR 0 3
5318: PPUSH
5319: CALL_OW 255
5323: PUSH
5324: LD_INT 6
5326: EQUAL
5327: AND
5328: IFFALSE 5360
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5330: LD_ADDR_EXP 80
5334: PUSH
5335: LD_EXP 80
5339: PUSH
5340: LD_VAR 0 3
5344: ADD
5345: ST_TO_ADDR
// limit = limit - 1 ;
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: LD_VAR 0 2
5355: PUSH
5356: LD_INT 1
5358: MINUS
5359: ST_TO_ADDR
// end ; end ;
5360: GO 5301
5362: POP
5363: POP
// for unit in otherBeriaUnits do
5364: LD_ADDR_VAR 0 3
5368: PUSH
5369: LD_EXP 59
5373: PUSH
5374: FOR_IN
5375: IFFALSE 5435
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5377: LD_VAR 0 3
5381: PPUSH
5382: CALL_OW 302
5386: PUSH
5387: LD_VAR 0 3
5391: PPUSH
5392: CALL_OW 255
5396: PUSH
5397: LD_INT 6
5399: EQUAL
5400: AND
5401: IFFALSE 5433
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5403: LD_ADDR_EXP 80
5407: PUSH
5408: LD_EXP 80
5412: PUSH
5413: LD_VAR 0 3
5417: ADD
5418: ST_TO_ADDR
// limit = limit - 1 ;
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 2
5428: PUSH
5429: LD_INT 1
5431: MINUS
5432: ST_TO_ADDR
// end ; end ;
5433: GO 5374
5435: POP
5436: POP
// if limit > 0 then
5437: LD_VAR 0 2
5441: PUSH
5442: LD_INT 0
5444: GREATER
5445: IFFALSE 5457
// survivorsToSpawn = limit ;
5447: LD_ADDR_EXP 81
5451: PUSH
5452: LD_VAR 0 2
5456: ST_TO_ADDR
// end ;
5457: LD_VAR 0 1
5461: RET
// export function PrepareScholtze ; begin
5462: LD_INT 0
5464: PPUSH
// uc_side = 8 ;
5465: LD_ADDR_OWVAR 20
5469: PUSH
5470: LD_INT 8
5472: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5473: LD_ADDR_EXP 56
5477: PUSH
5478: LD_STRING Scholtze
5480: PPUSH
5481: LD_INT 0
5483: PPUSH
5484: CALL 6971 0 2
5488: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5489: LD_EXP 56
5493: PPUSH
5494: LD_INT 30
5496: PPUSH
5497: LD_INT 1
5499: PPUSH
5500: CALL_OW 49
// end ; end_of_file
5504: LD_VAR 0 1
5508: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5509: LD_INT 0
5511: PPUSH
// amSupportTroops = [ ] ;
5512: LD_ADDR_EXP 85
5516: PUSH
5517: EMPTY
5518: ST_TO_ADDR
// PrepareOmicronBase ;
5519: CALL 5528 0 0
// end ;
5523: LD_VAR 0 1
5527: RET
// function PrepareOmicronBase ; var base ; begin
5528: LD_INT 0
5530: PPUSH
5531: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5532: LD_ADDR_EXP 87
5536: PUSH
5537: LD_INT 64
5539: PPUSH
5540: LD_INT 13
5542: PPUSH
5543: LD_STRING omikron
5545: PPUSH
5546: LD_INT 1
5548: PUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 2
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_OWVAR 67
5564: ARRAY
5565: PPUSH
5566: LD_INT 3000
5568: PUSH
5569: LD_INT 3000
5571: PUSH
5572: LD_INT 0
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: PPUSH
5580: LD_INT 7
5582: PUSH
5583: LD_INT 3
5585: PUSH
5586: LD_INT 4
5588: PUSH
5589: LD_INT 2
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: PPUSH
5598: CALL 40554 0 6
5602: ST_TO_ADDR
// case Difficulty of 2 :
5603: LD_OWVAR 67
5607: PUSH
5608: LD_INT 2
5610: DOUBLE
5611: EQUAL
5612: IFTRUE 5616
5614: GO 5632
5616: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5617: LD_INT 51
5619: PPUSH
5620: LD_INT 1
5622: PPUSH
5623: LD_INT 1
5625: PPUSH
5626: CALL_OW 322
// end ; 3 :
5630: GO 5670
5632: LD_INT 3
5634: DOUBLE
5635: EQUAL
5636: IFTRUE 5640
5638: GO 5669
5640: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5641: LD_INT 49
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5654: LD_INT 51
5656: PPUSH
5657: LD_INT 1
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 322
// end ; end ;
5667: GO 5670
5669: POP
// end ;
5670: LD_VAR 0 1
5674: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5675: LD_INT 0
5677: PPUSH
5678: PPUSH
5679: PPUSH
5680: PPUSH
// amIntroUnits = [ ] ;
5681: LD_ADDR_EXP 84
5685: PUSH
5686: EMPTY
5687: ST_TO_ADDR
// uc_side = 1 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 1
5695: ST_TO_ADDR
// uc_nation = nation_american ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5704: LD_ADDR_OWVAR 37
5708: PUSH
5709: LD_INT 3
5711: ST_TO_ADDR
// vc_control = control_manual ;
5712: LD_ADDR_OWVAR 38
5716: PUSH
5717: LD_INT 1
5719: ST_TO_ADDR
// vc_engine = engine_combustion ;
5720: LD_ADDR_OWVAR 39
5724: PUSH
5725: LD_INT 1
5727: ST_TO_ADDR
// vc_weapon = us_light_gun ;
5728: LD_ADDR_OWVAR 40
5732: PUSH
5733: LD_INT 3
5735: ST_TO_ADDR
// vc_fuel_battery = 100 ;
5736: LD_ADDR_OWVAR 41
5740: PUSH
5741: LD_INT 100
5743: ST_TO_ADDR
// veh = CreateVehicle ;
5744: LD_ADDR_VAR 0 3
5748: PUSH
5749: CALL_OW 45
5753: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5754: LD_VAR 0 3
5758: PPUSH
5759: LD_INT 4
5761: PPUSH
5762: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5766: LD_ADDR_EXP 84
5770: PUSH
5771: LD_EXP 84
5775: PUSH
5776: LD_VAR 0 3
5780: ADD
5781: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5782: LD_VAR 0 3
5786: PPUSH
5787: LD_INT 5
5789: PPUSH
5790: LD_INT 0
5792: PPUSH
5793: CALL_OW 49
// for i := 1 to 3 do
5797: LD_ADDR_VAR 0 2
5801: PUSH
5802: DOUBLE
5803: LD_INT 1
5805: DEC
5806: ST_TO_ADDR
5807: LD_INT 3
5809: PUSH
5810: FOR_TO
5811: IFFALSE 5932
// begin hc_name :=  ;
5813: LD_ADDR_OWVAR 26
5817: PUSH
5818: LD_STRING 
5820: ST_TO_ADDR
// hc_gallery :=  ;
5821: LD_ADDR_OWVAR 33
5825: PUSH
5826: LD_STRING 
5828: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
5829: LD_INT 0
5831: PPUSH
5832: LD_EXP 44
5836: PPUSH
5837: CALL_OW 381
// human = CreateHuman ;
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: CALL_OW 44
5850: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5851: LD_ADDR_EXP 84
5855: PUSH
5856: LD_EXP 84
5860: PUSH
5861: LD_VAR 0 4
5865: ADD
5866: ST_TO_ADDR
// if i < 3 then
5867: LD_VAR 0 2
5871: PUSH
5872: LD_INT 3
5874: LESS
5875: IFFALSE 5894
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5877: LD_VAR 0 4
5881: PPUSH
5882: LD_INT 5
5884: PPUSH
5885: LD_INT 0
5887: PPUSH
5888: CALL_OW 49
5892: GO 5930
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5894: LD_INT 0
5896: PPUSH
5897: LD_EXP 44
5901: PPUSH
5902: CALL_OW 383
// human = CreateHuman ;
5906: LD_ADDR_VAR 0 4
5910: PUSH
5911: CALL_OW 44
5915: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
5916: LD_VAR 0 4
5920: PPUSH
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 52
// end ; end ;
5930: GO 5810
5932: POP
5933: POP
// end ;
5934: LD_VAR 0 1
5938: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5939: LD_INT 0
5941: PPUSH
5942: PPUSH
5943: PPUSH
5944: PPUSH
5945: PPUSH
// uc_side := 1 ;
5946: LD_ADDR_OWVAR 20
5950: PUSH
5951: LD_INT 1
5953: ST_TO_ADDR
// uc_nation := 1 ;
5954: LD_ADDR_OWVAR 21
5958: PUSH
5959: LD_INT 1
5961: ST_TO_ADDR
// hc_name :=  ;
5962: LD_ADDR_OWVAR 26
5966: PUSH
5967: LD_STRING 
5969: ST_TO_ADDR
// hc_gallery :=  ;
5970: LD_ADDR_OWVAR 33
5974: PUSH
5975: LD_STRING 
5977: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5978: LD_ADDR_VAR 0 6
5982: PUSH
5983: DOUBLE
5984: LD_INT 1
5986: DEC
5987: ST_TO_ADDR
5988: LD_VAR 0 1
5992: PUSH
5993: FOR_TO
5994: IFFALSE 6053
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5996: LD_INT 0
5998: PPUSH
5999: LD_EXP 44
6003: PPUSH
6004: CALL_OW 381
// un = CreateHuman ;
6008: LD_ADDR_VAR 0 7
6012: PUSH
6013: CALL_OW 44
6017: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6018: LD_ADDR_EXP 85
6022: PUSH
6023: LD_EXP 85
6027: PUSH
6028: LD_VAR 0 7
6032: ADD
6033: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6034: LD_VAR 0 7
6038: PPUSH
6039: LD_VAR 0 4
6043: PPUSH
6044: LD_INT 0
6046: PPUSH
6047: CALL_OW 49
// end ;
6051: GO 5993
6053: POP
6054: POP
// for i := 1 to scientistsAmount do
6055: LD_ADDR_VAR 0 6
6059: PUSH
6060: DOUBLE
6061: LD_INT 1
6063: DEC
6064: ST_TO_ADDR
6065: LD_VAR 0 2
6069: PUSH
6070: FOR_TO
6071: IFFALSE 6130
// begin PrepareScientist ( false , enemySkillLevel ) ;
6073: LD_INT 0
6075: PPUSH
6076: LD_EXP 44
6080: PPUSH
6081: CALL_OW 384
// un = CreateHuman ;
6085: LD_ADDR_VAR 0 7
6089: PUSH
6090: CALL_OW 44
6094: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6095: LD_ADDR_EXP 85
6099: PUSH
6100: LD_EXP 85
6104: PUSH
6105: LD_VAR 0 7
6109: ADD
6110: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6111: LD_VAR 0 7
6115: PPUSH
6116: LD_VAR 0 4
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// end ;
6128: GO 6070
6130: POP
6131: POP
// for i := 1 to vehiclesAmount do
6132: LD_ADDR_VAR 0 6
6136: PUSH
6137: DOUBLE
6138: LD_INT 1
6140: DEC
6141: ST_TO_ADDR
6142: LD_VAR 0 3
6146: PUSH
6147: FOR_TO
6148: IFFALSE 6314
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6150: LD_ADDR_OWVAR 40
6154: PUSH
6155: LD_INT 2
6157: PUSH
6158: LD_INT 4
6160: PUSH
6161: LD_INT 3
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 3
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6181: LD_ADDR_OWVAR 37
6185: PUSH
6186: LD_INT 3
6188: ST_TO_ADDR
// vc_control = control_manual ;
6189: LD_ADDR_OWVAR 38
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// vc_engine = engine_combustion ;
6197: LD_ADDR_OWVAR 39
6201: PUSH
6202: LD_INT 1
6204: ST_TO_ADDR
// veh = CreateVehicle ;
6205: LD_ADDR_VAR 0 8
6209: PUSH
6210: CALL_OW 45
6214: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6215: LD_ADDR_EXP 85
6219: PUSH
6220: LD_EXP 85
6224: PUSH
6225: LD_VAR 0 8
6229: ADD
6230: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6231: LD_VAR 0 8
6235: PPUSH
6236: LD_VAR 0 4
6240: PPUSH
6241: LD_INT 0
6243: PPUSH
6244: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6248: LD_INT 0
6250: PPUSH
6251: LD_EXP 44
6255: PPUSH
6256: CALL_OW 383
// un = CreateHuman ;
6260: LD_ADDR_VAR 0 7
6264: PUSH
6265: CALL_OW 44
6269: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6270: LD_ADDR_EXP 85
6274: PUSH
6275: LD_EXP 85
6279: PUSH
6280: LD_VAR 0 7
6284: ADD
6285: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6286: LD_VAR 0 7
6290: PPUSH
6291: LD_VAR 0 8
6295: PPUSH
6296: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6300: LD_VAR 0 8
6304: PPUSH
6305: LD_INT 100
6307: PPUSH
6308: CALL_OW 240
// end ;
6312: GO 6147
6314: POP
6315: POP
// case area of NorthAmericanSpawnArea :
6316: LD_VAR 0 4
6320: PUSH
6321: LD_INT 7
6323: DOUBLE
6324: EQUAL
6325: IFTRUE 6329
6327: GO 6340
6329: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6330: LD_ADDR_VAR 0 9
6334: PUSH
6335: LD_INT 10
6337: ST_TO_ADDR
6338: GO 6379
6340: LD_INT 9
6342: DOUBLE
6343: EQUAL
6344: IFTRUE 6348
6346: GO 6359
6348: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6349: LD_ADDR_VAR 0 9
6353: PUSH
6354: LD_INT 11
6356: ST_TO_ADDR
6357: GO 6379
6359: LD_INT 8
6361: DOUBLE
6362: EQUAL
6363: IFTRUE 6367
6365: GO 6378
6367: POP
// road = SouthRoadArea2 ; end ;
6368: LD_ADDR_VAR 0 9
6372: PUSH
6373: LD_INT 12
6375: ST_TO_ADDR
6376: GO 6379
6378: POP
// MoveToBase ( amSupportTroops , road ) ;
6379: LD_EXP 85
6383: PPUSH
6384: LD_VAR 0 9
6388: PPUSH
6389: CALL 18979 0 2
// end ;
6393: LD_VAR 0 5
6397: RET
// export function PrepareAmericanPatrol ; var un ; begin
6398: LD_INT 0
6400: PPUSH
6401: PPUSH
// amPatrol = [ ] ;
6402: LD_ADDR_EXP 86
6406: PUSH
6407: EMPTY
6408: ST_TO_ADDR
// uc_side = 1 ;
6409: LD_ADDR_OWVAR 20
6413: PUSH
6414: LD_INT 1
6416: ST_TO_ADDR
// uc_nation = 1 ;
6417: LD_ADDR_OWVAR 21
6421: PUSH
6422: LD_INT 1
6424: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6425: LD_ADDR_VAR 0 2
6429: PUSH
6430: LD_STRING Campell
6432: PPUSH
6433: LD_INT 0
6435: PPUSH
6436: CALL 6971 0 2
6440: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6441: LD_ADDR_EXP 86
6445: PUSH
6446: LD_EXP 86
6450: PUSH
6451: LD_VAR 0 2
6455: ADD
6456: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6457: LD_VAR 0 2
6461: PPUSH
6462: LD_INT 14
6464: PPUSH
6465: LD_INT 0
6467: PPUSH
6468: CALL_OW 49
// SetClass ( un , 1 ) ;
6472: LD_VAR 0 2
6476: PPUSH
6477: LD_INT 1
6479: PPUSH
6480: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6484: LD_INT 1
6486: PPUSH
6487: LD_EXP 44
6491: PPUSH
6492: CALL_OW 381
// un = CreateHuman ;
6496: LD_ADDR_VAR 0 2
6500: PUSH
6501: CALL_OW 44
6505: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6506: LD_ADDR_EXP 86
6510: PUSH
6511: LD_EXP 86
6515: PUSH
6516: LD_VAR 0 2
6520: ADD
6521: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6522: LD_VAR 0 2
6526: PPUSH
6527: LD_INT 14
6529: PPUSH
6530: LD_INT 0
6532: PPUSH
6533: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6537: LD_EXP 86
6541: PPUSH
6542: LD_EXP 56
6546: PPUSH
6547: CALL_OW 115
// end ; end_of_file
6551: LD_VAR 0 1
6555: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6556: LD_INT 0
6558: PPUSH
6559: PPUSH
6560: PPUSH
6561: PPUSH
// northGroup = [ ] ;
6562: LD_ADDR_EXP 88
6566: PUSH
6567: EMPTY
6568: ST_TO_ADDR
// southGroup = [ ] ;
6569: LD_ADDR_EXP 89
6573: PUSH
6574: EMPTY
6575: ST_TO_ADDR
// uc_side = 2 ;
6576: LD_ADDR_OWVAR 20
6580: PUSH
6581: LD_INT 2
6583: ST_TO_ADDR
// uc_nation = 2 ;
6584: LD_ADDR_OWVAR 21
6588: PUSH
6589: LD_INT 2
6591: ST_TO_ADDR
// hc_name :=  ;
6592: LD_ADDR_OWVAR 26
6596: PUSH
6597: LD_STRING 
6599: ST_TO_ADDR
// hc_gallery :=  ;
6600: LD_ADDR_OWVAR 33
6604: PUSH
6605: LD_STRING 
6607: ST_TO_ADDR
// for i := 1 to 5 do
6608: LD_ADDR_VAR 0 2
6612: PUSH
6613: DOUBLE
6614: LD_INT 1
6616: DEC
6617: ST_TO_ADDR
6618: LD_INT 5
6620: PUSH
6621: FOR_TO
6622: IFFALSE 6736
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6624: LD_INT 13
6626: PPUSH
6627: LD_INT 1
6629: PPUSH
6630: LD_INT 1
6632: PPUSH
6633: LD_INT 26
6635: PPUSH
6636: LD_INT 100
6638: PPUSH
6639: CALL 37145 0 5
// veh = CreateVehicle ;
6643: LD_ADDR_VAR 0 4
6647: PUSH
6648: CALL_OW 45
6652: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6653: LD_ADDR_EXP 89
6657: PUSH
6658: LD_EXP 89
6662: PUSH
6663: LD_VAR 0 4
6667: ADD
6668: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6669: LD_VAR 0 4
6673: PPUSH
6674: LD_INT 23
6676: PPUSH
6677: LD_INT 0
6679: PPUSH
6680: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6684: LD_INT 0
6686: PPUSH
6687: LD_INT 8
6689: PPUSH
6690: CALL_OW 383
// un = CreateHuman ;
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: CALL_OW 44
6703: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6704: LD_ADDR_EXP 89
6708: PUSH
6709: LD_EXP 89
6713: PUSH
6714: LD_VAR 0 3
6718: ADD
6719: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6720: LD_VAR 0 3
6724: PPUSH
6725: LD_VAR 0 4
6729: PPUSH
6730: CALL_OW 52
// end ;
6734: GO 6621
6736: POP
6737: POP
// for i := 1 to 5 do
6738: LD_ADDR_VAR 0 2
6742: PUSH
6743: DOUBLE
6744: LD_INT 1
6746: DEC
6747: ST_TO_ADDR
6748: LD_INT 5
6750: PUSH
6751: FOR_TO
6752: IFFALSE 6807
// begin PrepareSoldier ( false , 8 ) ;
6754: LD_INT 0
6756: PPUSH
6757: LD_INT 8
6759: PPUSH
6760: CALL_OW 381
// un = CreateHuman ;
6764: LD_ADDR_VAR 0 3
6768: PUSH
6769: CALL_OW 44
6773: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6774: LD_ADDR_EXP 89
6778: PUSH
6779: LD_EXP 89
6783: PUSH
6784: LD_VAR 0 3
6788: ADD
6789: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6790: LD_VAR 0 3
6794: PPUSH
6795: LD_INT 23
6797: PPUSH
6798: LD_INT 0
6800: PPUSH
6801: CALL_OW 49
// end ;
6805: GO 6751
6807: POP
6808: POP
// for i := 1 to 10 do
6809: LD_ADDR_VAR 0 2
6813: PUSH
6814: DOUBLE
6815: LD_INT 1
6817: DEC
6818: ST_TO_ADDR
6819: LD_INT 10
6821: PUSH
6822: FOR_TO
6823: IFFALSE 6964
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6825: LD_INT 13
6827: PPUSH
6828: LD_INT 1
6830: PPUSH
6831: LD_INT 1
6833: PPUSH
6834: LD_INT 25
6836: PUSH
6837: LD_INT 27
6839: PUSH
6840: LD_INT 23
6842: PUSH
6843: LD_INT 26
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: LD_INT 1
6854: PPUSH
6855: LD_INT 4
6857: PPUSH
6858: CALL_OW 12
6862: ARRAY
6863: PPUSH
6864: LD_INT 100
6866: PPUSH
6867: CALL 37145 0 5
// veh = CreateVehicle ;
6871: LD_ADDR_VAR 0 4
6875: PUSH
6876: CALL_OW 45
6880: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6881: LD_ADDR_EXP 88
6885: PUSH
6886: LD_EXP 88
6890: PUSH
6891: LD_VAR 0 4
6895: ADD
6896: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6897: LD_VAR 0 4
6901: PPUSH
6902: LD_INT 22
6904: PPUSH
6905: LD_INT 0
6907: PPUSH
6908: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6912: LD_INT 0
6914: PPUSH
6915: LD_INT 8
6917: PPUSH
6918: CALL_OW 383
// un = CreateHuman ;
6922: LD_ADDR_VAR 0 3
6926: PUSH
6927: CALL_OW 44
6931: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6932: LD_ADDR_EXP 88
6936: PUSH
6937: LD_EXP 88
6941: PUSH
6942: LD_VAR 0 3
6946: ADD
6947: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6948: LD_VAR 0 3
6952: PPUSH
6953: LD_VAR 0 4
6957: PPUSH
6958: CALL_OW 52
// end ;
6962: GO 6822
6964: POP
6965: POP
// end ; end_of_file
6966: LD_VAR 0 1
6970: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6971: LD_INT 0
6973: PPUSH
6974: PPUSH
// if exist_mode then
6975: LD_VAR 0 2
6979: IFFALSE 7004
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6981: LD_ADDR_VAR 0 4
6985: PUSH
6986: LD_EXP 37
6990: PUSH
6991: LD_VAR 0 1
6995: STR
6996: PPUSH
6997: CALL_OW 34
7001: ST_TO_ADDR
7002: GO 7019
// unit := NewCharacter ( ident ) ;
7004: LD_ADDR_VAR 0 4
7008: PUSH
7009: LD_VAR 0 1
7013: PPUSH
7014: CALL_OW 25
7018: ST_TO_ADDR
// result := unit ;
7019: LD_ADDR_VAR 0 3
7023: PUSH
7024: LD_VAR 0 4
7028: ST_TO_ADDR
// end ;
7029: LD_VAR 0 3
7033: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
7034: LD_INT 0
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
// units = characters ;
7040: LD_ADDR_VAR 0 9
7044: PUSH
7045: LD_VAR 0 1
7049: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
7050: LD_ADDR_VAR 0 9
7054: PUSH
7055: LD_VAR 0 9
7059: PUSH
7060: LD_EXP 50
7064: PUSH
7065: LD_EXP 51
7069: PUSH
7070: LD_EXP 52
7074: PUSH
7075: LD_EXP 53
7079: PUSH
7080: LD_EXP 54
7084: PUSH
7085: LD_EXP 55
7089: PUSH
7090: LD_EXP 56
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: DIFF
7104: ST_TO_ADDR
// if not units and not canTalkHero then
7105: LD_VAR 0 9
7109: NOT
7110: PUSH
7111: LD_VAR 0 5
7115: NOT
7116: AND
7117: IFFALSE 7121
// exit ;
7119: GO 7294
// if not units then
7121: LD_VAR 0 9
7125: NOT
7126: IFFALSE 7147
// units = characters diff [ Burlak ] ;
7128: LD_ADDR_VAR 0 9
7132: PUSH
7133: LD_VAR 0 1
7137: PUSH
7138: LD_EXP 50
7142: PUSH
7143: EMPTY
7144: LIST
7145: DIFF
7146: ST_TO_ADDR
// if not units and canTalkHero then
7147: LD_VAR 0 9
7151: NOT
7152: PUSH
7153: LD_VAR 0 5
7157: AND
7158: IFFALSE 7162
// exit ;
7160: GO 7294
// speaker := units [ rand ( 1 , units ) ] ;
7162: LD_ADDR_VAR 0 8
7166: PUSH
7167: LD_VAR 0 9
7171: PUSH
7172: LD_INT 1
7174: PPUSH
7175: LD_VAR 0 9
7179: PPUSH
7180: CALL_OW 12
7184: ARRAY
7185: ST_TO_ADDR
// if radio then
7186: LD_VAR 0 4
7190: IFFALSE 7239
// begin if GetSex ( speaker ) = sex_male then
7192: LD_VAR 0 8
7196: PPUSH
7197: CALL_OW 258
7201: PUSH
7202: LD_INT 1
7204: EQUAL
7205: IFFALSE 7223
// SayRadio ( speaker , dialogMID ) else
7207: LD_VAR 0 8
7211: PPUSH
7212: LD_VAR 0 2
7216: PPUSH
7217: CALL_OW 94
7221: GO 7237
// SayRadio ( speaker , dialogFID ) ;
7223: LD_VAR 0 8
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: CALL_OW 94
// end else
7237: GO 7284
// begin if GetSex ( speaker ) = sex_male then
7239: LD_VAR 0 8
7243: PPUSH
7244: CALL_OW 258
7248: PUSH
7249: LD_INT 1
7251: EQUAL
7252: IFFALSE 7270
// Say ( speaker , dialogMID ) else
7254: LD_VAR 0 8
7258: PPUSH
7259: LD_VAR 0 2
7263: PPUSH
7264: CALL_OW 88
7268: GO 7284
// Say ( speaker , dialogFID ) ;
7270: LD_VAR 0 8
7274: PPUSH
7275: LD_VAR 0 3
7279: PPUSH
7280: CALL_OW 88
// end ; result := speaker ;
7284: LD_ADDR_VAR 0 6
7288: PUSH
7289: LD_VAR 0 8
7293: ST_TO_ADDR
// end ;
7294: LD_VAR 0 6
7298: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7299: LD_INT 0
7301: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL_OW 255
7311: PUSH
7312: LD_VAR 0 3
7316: EQUAL
7317: PUSH
7318: LD_VAR 0 1
7322: PPUSH
7323: CALL_OW 302
7327: AND
7328: IFFALSE 7350
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7330: LD_VAR 0 1
7334: PPUSH
7335: LD_EXP 36
7339: PUSH
7340: LD_VAR 0 2
7344: STR
7345: PPUSH
7346: CALL_OW 38
// end ;
7350: LD_VAR 0 4
7354: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7355: LD_INT 0
7357: PPUSH
7358: PPUSH
7359: PPUSH
// resultCharactersToSave = [ ] ;
7360: LD_ADDR_VAR 0 6
7364: PUSH
7365: EMPTY
7366: ST_TO_ADDR
// for unit in characters do
7367: LD_ADDR_VAR 0 5
7371: PUSH
7372: LD_VAR 0 1
7376: PUSH
7377: FOR_IN
7378: IFFALSE 7426
// if GetSide ( unit ) = side and IsOK ( unit ) then
7380: LD_VAR 0 5
7384: PPUSH
7385: CALL_OW 255
7389: PUSH
7390: LD_VAR 0 3
7394: EQUAL
7395: PUSH
7396: LD_VAR 0 5
7400: PPUSH
7401: CALL_OW 302
7405: AND
7406: IFFALSE 7424
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7408: LD_ADDR_VAR 0 6
7412: PUSH
7413: LD_VAR 0 6
7417: PUSH
7418: LD_VAR 0 5
7422: ADD
7423: ST_TO_ADDR
7424: GO 7377
7426: POP
7427: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7428: LD_VAR 0 6
7432: PPUSH
7433: LD_EXP 36
7437: PUSH
7438: LD_VAR 0 2
7442: STR
7443: PPUSH
7444: CALL_OW 38
// end ;
7448: LD_VAR 0 4
7452: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7453: LD_INT 0
7455: PPUSH
7456: PPUSH
7457: PPUSH
7458: PPUSH
// charsToChoose = otherKirovUnits ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: LD_EXP 66
7468: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7469: LD_ADDR_VAR 0 4
7473: PUSH
7474: LD_VAR 0 4
7478: PUSH
7479: LD_EXP 59
7483: ADD
7484: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7485: LD_ADDR_VAR 0 4
7489: PUSH
7490: LD_VAR 0 4
7494: PUSH
7495: LD_EXP 57
7499: ADD
7500: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7501: LD_ADDR_VAR 0 4
7505: PUSH
7506: LD_VAR 0 4
7510: PUSH
7511: LD_EXP 54
7515: ADD
7516: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7517: LD_ADDR_VAR 0 4
7521: PUSH
7522: LD_VAR 0 4
7526: PUSH
7527: LD_EXP 55
7531: ADD
7532: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7533: LD_ADDR_VAR 0 5
7537: PUSH
7538: LD_STRING text
7540: PPUSH
7541: LD_VAR 0 1
7545: PPUSH
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_INT -5
7553: PUSH
7554: LD_EXP 50
7558: PUSH
7559: LD_EXP 51
7563: PUSH
7564: LD_EXP 53
7568: PUSH
7569: LD_EXP 52
7573: PUSH
7574: LD_INT -6
7576: PUSH
7577: LD_INT -2
7579: PUSH
7580: LD_INT -3
7582: PUSH
7583: LD_INT -5
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: LD_VAR 0 4
7601: ADD
7602: PUSH
7603: LD_INT -6
7605: PUSH
7606: LD_INT -4
7608: PUSH
7609: LD_EXP 62
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: ADD
7619: PPUSH
7620: LD_INT 1
7622: PUSH
7623: LD_INT 3
7625: PUSH
7626: LD_INT 2
7628: PUSH
7629: LD_INT 1
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 4
7638: PUSH
7639: LD_INT 1
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: PPUSH
7652: CALL_OW 42
7656: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7657: LD_VAR 0 4
7661: PPUSH
7662: LD_INT 6
7664: PPUSH
7665: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7669: LD_VAR 0 5
7673: PPUSH
7674: LD_INT 3
7676: PPUSH
7677: CALL_OW 235
// SetSurvivorsArabianAttack ;
7681: CALL 5143 0 0
// MoveKurinUnitsToBuildings ;
7685: CALL 9223 0 0
// end ;
7689: LD_VAR 0 2
7693: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7694: LD_INT 0
7696: PPUSH
7697: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7698: LD_ADDR_VAR 0 5
7702: PUSH
7703: LD_VAR 0 1
7707: PPUSH
7708: LD_INT 22
7710: PUSH
7711: LD_VAR 0 2
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 21
7722: PUSH
7723: LD_INT 3
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 30
7732: PUSH
7733: LD_VAR 0 3
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: PPUSH
7747: CALL_OW 70
7751: PUSH
7752: FOR_IN
7753: IFFALSE 7786
// begin if UnitsInside ( building ) < 6 then
7755: LD_VAR 0 5
7759: PPUSH
7760: CALL_OW 313
7764: PUSH
7765: LD_INT 6
7767: LESS
7768: IFFALSE 7784
// begin result = building ;
7770: LD_ADDR_VAR 0 4
7774: PUSH
7775: LD_VAR 0 5
7779: ST_TO_ADDR
// exit ;
7780: POP
7781: POP
7782: GO 7796
// end ; end ;
7784: GO 7752
7786: POP
7787: POP
// result = 0 ;
7788: LD_ADDR_VAR 0 4
7792: PUSH
7793: LD_INT 0
7795: ST_TO_ADDR
// end ;
7796: LD_VAR 0 4
7800: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7801: LD_INT 0
7803: PPUSH
7804: PPUSH
7805: PPUSH
7806: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7807: LD_ADDR_VAR 0 6
7811: PUSH
7812: LD_INT 34
7814: PUSH
7815: LD_INT 71
7817: PUSH
7818: LD_INT 70
7820: PUSH
7821: LD_INT 69
7823: PUSH
7824: LD_INT 39
7826: PUSH
7827: LD_INT 31
7829: PUSH
7830: LD_INT 14
7832: PUSH
7833: LD_INT 10
7835: PUSH
7836: LD_INT 40
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: ST_TO_ADDR
// resultWeapons = [ ] ;
7850: LD_ADDR_VAR 0 5
7854: PUSH
7855: EMPTY
7856: ST_TO_ADDR
// for i := 1 to weaponTechs do
7857: LD_ADDR_VAR 0 4
7861: PUSH
7862: DOUBLE
7863: LD_INT 1
7865: DEC
7866: ST_TO_ADDR
7867: LD_VAR 0 6
7871: PUSH
7872: FOR_TO
7873: IFFALSE 8060
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7875: LD_VAR 0 6
7879: PUSH
7880: LD_VAR 0 4
7884: ARRAY
7885: PPUSH
7886: LD_VAR 0 2
7890: PPUSH
7891: CALL_OW 482
7895: PUSH
7896: LD_VAR 0 6
7900: PUSH
7901: LD_VAR 0 4
7905: ARRAY
7906: PPUSH
7907: LD_VAR 0 1
7911: PPUSH
7912: CALL_OW 321
7916: PUSH
7917: LD_INT 2
7919: EQUAL
7920: AND
7921: IFFALSE 8058
// case nation of nation_american :
7923: LD_VAR 0 2
7927: PUSH
7928: LD_INT 1
7930: DOUBLE
7931: EQUAL
7932: IFTRUE 7936
7934: GO 7971
7936: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7937: LD_ADDR_VAR 0 5
7941: PUSH
7942: LD_VAR 0 5
7946: PUSH
7947: LD_VAR 0 6
7951: PUSH
7952: LD_VAR 0 4
7956: ARRAY
7957: PPUSH
7958: LD_VAR 0 2
7962: PPUSH
7963: CALL 8077 0 2
7967: ADD
7968: ST_TO_ADDR
7969: GO 8058
7971: LD_INT 2
7973: DOUBLE
7974: EQUAL
7975: IFTRUE 7979
7977: GO 8014
7979: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7980: LD_ADDR_VAR 0 5
7984: PUSH
7985: LD_VAR 0 5
7989: PUSH
7990: LD_VAR 0 6
7994: PUSH
7995: LD_VAR 0 4
7999: ARRAY
8000: PPUSH
8001: LD_VAR 0 2
8005: PPUSH
8006: CALL 8077 0 2
8010: ADD
8011: ST_TO_ADDR
8012: GO 8058
8014: LD_INT 3
8016: DOUBLE
8017: EQUAL
8018: IFTRUE 8022
8020: GO 8057
8022: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
8023: LD_ADDR_VAR 0 5
8027: PUSH
8028: LD_VAR 0 5
8032: PUSH
8033: LD_VAR 0 6
8037: PUSH
8038: LD_VAR 0 4
8042: ARRAY
8043: PPUSH
8044: LD_VAR 0 2
8048: PPUSH
8049: CALL 8077 0 2
8053: ADD
8054: ST_TO_ADDR
8055: GO 8058
8057: POP
// end ;
8058: GO 7872
8060: POP
8061: POP
// result = resultWeapons ;
8062: LD_ADDR_VAR 0 3
8066: PUSH
8067: LD_VAR 0 5
8071: ST_TO_ADDR
// end ;
8072: LD_VAR 0 3
8076: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8077: LD_INT 0
8079: PPUSH
// case tech of tech_AdvMet :
8080: LD_VAR 0 1
8084: PUSH
8085: LD_INT 34
8087: DOUBLE
8088: EQUAL
8089: IFTRUE 8093
8091: GO 8121
8093: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8094: LD_ADDR_VAR 0 3
8098: PUSH
8099: LD_INT 6
8101: PUSH
8102: LD_STRING 
8104: PUSH
8105: LD_INT 46
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: PUSH
8113: LD_VAR 0 2
8117: ARRAY
8118: ST_TO_ADDR
8119: GO 8410
8121: LD_INT 71
8123: DOUBLE
8124: EQUAL
8125: IFTRUE 8129
8127: GO 8157
8129: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_STRING 
8137: PUSH
8138: LD_STRING 
8140: PUSH
8141: LD_INT 47
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: PUSH
8149: LD_VAR 0 2
8153: ARRAY
8154: ST_TO_ADDR
8155: GO 8410
8157: LD_INT 70
8159: DOUBLE
8160: EQUAL
8161: IFTRUE 8165
8163: GO 8193
8165: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8166: LD_ADDR_VAR 0 3
8170: PUSH
8171: LD_STRING 
8173: PUSH
8174: LD_INT 26
8176: PUSH
8177: LD_STRING 
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: LIST
8184: PUSH
8185: LD_VAR 0 2
8189: ARRAY
8190: ST_TO_ADDR
8191: GO 8410
8193: LD_INT 69
8195: DOUBLE
8196: EQUAL
8197: IFTRUE 8201
8199: GO 8229
8201: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8202: LD_ADDR_VAR 0 3
8206: PUSH
8207: LD_INT 4
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: LD_INT 43
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: PUSH
8221: LD_VAR 0 2
8225: ARRAY
8226: ST_TO_ADDR
8227: GO 8410
8229: LD_INT 39
8231: DOUBLE
8232: EQUAL
8233: IFTRUE 8237
8235: GO 8265
8237: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8238: LD_ADDR_VAR 0 3
8242: PUSH
8243: LD_INT 5
8245: PUSH
8246: LD_INT 27
8248: PUSH
8249: LD_INT 44
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: PUSH
8257: LD_VAR 0 2
8261: ARRAY
8262: ST_TO_ADDR
8263: GO 8410
8265: LD_INT 31
8267: DOUBLE
8268: EQUAL
8269: IFTRUE 8273
8271: GO 8301
8273: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8274: LD_ADDR_VAR 0 3
8278: PUSH
8279: LD_STRING 
8281: PUSH
8282: LD_STRING 
8284: PUSH
8285: LD_INT 49
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: LD_VAR 0 2
8297: ARRAY
8298: ST_TO_ADDR
8299: GO 8410
8301: LD_INT 14
8303: DOUBLE
8304: EQUAL
8305: IFTRUE 8309
8307: GO 8337
8309: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8310: LD_ADDR_VAR 0 3
8314: PUSH
8315: LD_INT 10
8317: PUSH
8318: LD_STRING 
8320: PUSH
8321: LD_STRING 
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: LIST
8328: PUSH
8329: LD_VAR 0 2
8333: ARRAY
8334: ST_TO_ADDR
8335: GO 8410
8337: LD_INT 10
8339: DOUBLE
8340: EQUAL
8341: IFTRUE 8345
8343: GO 8373
8345: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8346: LD_ADDR_VAR 0 3
8350: PUSH
8351: LD_INT 9
8353: PUSH
8354: LD_STRING 
8356: PUSH
8357: LD_STRING 
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: PUSH
8365: LD_VAR 0 2
8369: ARRAY
8370: ST_TO_ADDR
8371: GO 8410
8373: LD_INT 40
8375: DOUBLE
8376: EQUAL
8377: IFTRUE 8381
8379: GO 8409
8381: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_INT 7
8389: PUSH
8390: LD_INT 28
8392: PUSH
8393: LD_INT 45
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: PUSH
8401: LD_VAR 0 2
8405: ARRAY
8406: ST_TO_ADDR
8407: GO 8410
8409: POP
// end ;
8410: LD_VAR 0 3
8414: RET
// export function ComRefuelFromCargo ( units , cargo ) ; var veh ; begin
8415: LD_INT 0
8417: PPUSH
8418: PPUSH
// for veh in units do
8419: LD_ADDR_VAR 0 4
8423: PUSH
8424: LD_VAR 0 1
8428: PUSH
8429: FOR_IN
8430: IFFALSE 8508
// begin if GetType ( veh ) = unit_vehicle and GetFuel ( veh ) < 100 then
8432: LD_VAR 0 4
8436: PPUSH
8437: CALL_OW 247
8441: PUSH
8442: LD_INT 2
8444: EQUAL
8445: PUSH
8446: LD_VAR 0 4
8450: PPUSH
8451: CALL_OW 261
8455: PUSH
8456: LD_INT 100
8458: LESS
8459: AND
8460: IFFALSE 8506
// SetTaskList ( veh , [ [ X , 0 , 0 , cargo , 0 , 0 , 0 ] ] ) ;
8462: LD_VAR 0 4
8466: PPUSH
8467: LD_STRING X
8469: PUSH
8470: LD_INT 0
8472: PUSH
8473: LD_INT 0
8475: PUSH
8476: LD_VAR 0 2
8480: PUSH
8481: LD_INT 0
8483: PUSH
8484: LD_INT 0
8486: PUSH
8487: LD_INT 0
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: PUSH
8499: EMPTY
8500: LIST
8501: PPUSH
8502: CALL_OW 446
// end ;
8506: GO 8429
8508: POP
8509: POP
// end ;
8510: LD_VAR 0 3
8514: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8515: LD_INT 0
8517: PPUSH
8518: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8519: LD_ADDR_VAR 0 4
8523: PUSH
8524: LD_VAR 0 2
8528: PPUSH
8529: CALL_OW 254
8533: PUSH
8534: LD_INT 3
8536: MINUS
8537: ST_TO_ADDR
// if dir < 0 then
8538: LD_VAR 0 4
8542: PUSH
8543: LD_INT 0
8545: LESS
8546: IFFALSE 8562
// dir := 6 + dir ;
8548: LD_ADDR_VAR 0 4
8552: PUSH
8553: LD_INT 6
8555: PUSH
8556: LD_VAR 0 4
8560: PLUS
8561: ST_TO_ADDR
// SetDir ( un , dir ) ;
8562: LD_VAR 0 1
8566: PPUSH
8567: LD_VAR 0 4
8571: PPUSH
8572: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8576: LD_VAR 0 1
8580: PPUSH
8581: LD_VAR 0 2
8585: PPUSH
8586: CALL_OW 52
// result = un ;
8590: LD_ADDR_VAR 0 3
8594: PUSH
8595: LD_VAR 0 1
8599: ST_TO_ADDR
// end ;
8600: LD_VAR 0 3
8604: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8605: LD_INT 0
8607: PPUSH
8608: PPUSH
8609: PPUSH
// uc_side := GetSide ( b ) ;
8610: LD_ADDR_OWVAR 20
8614: PUSH
8615: LD_VAR 0 2
8619: PPUSH
8620: CALL_OW 255
8624: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8625: LD_ADDR_OWVAR 21
8629: PUSH
8630: LD_VAR 0 2
8634: PPUSH
8635: CALL_OW 248
8639: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8640: LD_INT 0
8642: PPUSH
8643: LD_INT 1
8645: PPUSH
8646: LD_VAR 0 1
8650: PPUSH
8651: CALL_OW 380
// un = CreateHuman ;
8655: LD_ADDR_VAR 0 4
8659: PUSH
8660: CALL_OW 44
8664: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8665: LD_ADDR_VAR 0 5
8669: PUSH
8670: LD_VAR 0 2
8674: PPUSH
8675: CALL_OW 254
8679: PUSH
8680: LD_INT 3
8682: MINUS
8683: ST_TO_ADDR
// if dir < 0 then
8684: LD_VAR 0 5
8688: PUSH
8689: LD_INT 0
8691: LESS
8692: IFFALSE 8708
// dir := 6 + dir ;
8694: LD_ADDR_VAR 0 5
8698: PUSH
8699: LD_INT 6
8701: PUSH
8702: LD_VAR 0 5
8706: PLUS
8707: ST_TO_ADDR
// SetDir ( un , dir ) ;
8708: LD_VAR 0 4
8712: PPUSH
8713: LD_VAR 0 5
8717: PPUSH
8718: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8722: LD_VAR 0 4
8726: PPUSH
8727: LD_VAR 0 2
8731: PPUSH
8732: CALL_OW 52
// result = un ;
8736: LD_ADDR_VAR 0 3
8740: PUSH
8741: LD_VAR 0 4
8745: ST_TO_ADDR
// end ;
8746: LD_VAR 0 3
8750: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8751: LD_INT 0
8753: PPUSH
8754: PPUSH
8755: PPUSH
8756: PPUSH
8757: PPUSH
// for building in buildings do
8758: LD_ADDR_VAR 0 5
8762: PUSH
8763: LD_VAR 0 2
8767: PUSH
8768: FOR_IN
8769: IFFALSE 8861
// begin x = GetX ( building ) ;
8771: LD_ADDR_VAR 0 6
8775: PUSH
8776: LD_VAR 0 5
8780: PPUSH
8781: CALL_OW 250
8785: ST_TO_ADDR
// y = GetY ( building ) ;
8786: LD_ADDR_VAR 0 7
8790: PUSH
8791: LD_VAR 0 5
8795: PPUSH
8796: CALL_OW 251
8800: ST_TO_ADDR
// dir = GetDir ( building ) ;
8801: LD_ADDR_VAR 0 8
8805: PUSH
8806: LD_VAR 0 5
8810: PPUSH
8811: CALL_OW 254
8815: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8816: LD_VAR 0 1
8820: PPUSH
8821: LD_VAR 0 5
8825: PPUSH
8826: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8830: LD_VAR 0 1
8834: PPUSH
8835: LD_VAR 0 3
8839: PPUSH
8840: LD_VAR 0 6
8844: PPUSH
8845: LD_VAR 0 7
8849: PPUSH
8850: LD_VAR 0 8
8854: PPUSH
8855: CALL_OW 205
// end ;
8859: GO 8768
8861: POP
8862: POP
// end ;
8863: LD_VAR 0 4
8867: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
8875: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8876: LD_ADDR_VAR 0 8
8880: PUSH
8881: LD_INT 48
8883: PUSH
8884: LD_INT 49
8886: PUSH
8887: LD_INT 50
8889: PUSH
8890: LD_INT 20
8892: PUSH
8893: LD_INT 1
8895: PUSH
8896: LD_INT 51
8898: PUSH
8899: LD_INT 52
8901: PUSH
8902: LD_INT 69
8904: PUSH
8905: LD_INT 39
8907: PUSH
8908: LD_INT 34
8910: PUSH
8911: LD_INT 40
8913: PUSH
8914: LD_INT 53
8916: PUSH
8917: LD_INT 71
8919: PUSH
8920: LD_INT 57
8922: PUSH
8923: LD_INT 58
8925: PUSH
8926: LD_INT 44
8928: PUSH
8929: LD_INT 32
8931: PUSH
8932: LD_INT 27
8934: PUSH
8935: LD_INT 23
8937: PUSH
8938: LD_INT 33
8940: PUSH
8941: LD_INT 59
8943: PUSH
8944: LD_INT 54
8946: PUSH
8947: LD_INT 55
8949: PUSH
8950: LD_INT 56
8952: PUSH
8953: LD_INT 63
8955: PUSH
8956: LD_INT 64
8958: PUSH
8959: LD_INT 65
8961: PUSH
8962: LD_INT 30
8964: PUSH
8965: LD_INT 31
8967: PUSH
8968: LD_INT 21
8970: PUSH
8971: LD_INT 22
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
9011: LD_ADDR_VAR 0 9
9015: PUSH
9016: LD_INT 1
9018: PPUSH
9019: LD_INT 1
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: CALL 32384 0 3
9029: ST_TO_ADDR
// for i = 1 to ru_tech_list do
9030: LD_ADDR_VAR 0 5
9034: PUSH
9035: DOUBLE
9036: LD_INT 1
9038: DEC
9039: ST_TO_ADDR
9040: LD_VAR 0 8
9044: PUSH
9045: FOR_TO
9046: IFFALSE 9122
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
9048: LD_VAR 0 8
9052: PUSH
9053: LD_VAR 0 5
9057: ARRAY
9058: PPUSH
9059: LD_VAR 0 1
9063: PPUSH
9064: CALL_OW 321
9068: PUSH
9069: LD_INT 1
9071: EQUAL
9072: PUSH
9073: LD_VAR 0 8
9077: PUSH
9078: LD_VAR 0 5
9082: ARRAY
9083: PPUSH
9084: LD_VAR 0 3
9088: PPUSH
9089: CALL_OW 482
9093: PUSH
9094: LD_INT 1
9096: EQUAL
9097: AND
9098: IFFALSE 9120
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
9100: LD_VAR 0 2
9104: PPUSH
9105: LD_VAR 0 8
9109: PUSH
9110: LD_VAR 0 5
9114: ARRAY
9115: PPUSH
9116: CALL_OW 184
9120: GO 9045
9122: POP
9123: POP
// for i = 1 to am_tech_list do
9124: LD_ADDR_VAR 0 5
9128: PUSH
9129: DOUBLE
9130: LD_INT 1
9132: DEC
9133: ST_TO_ADDR
9134: LD_VAR 0 9
9138: PUSH
9139: FOR_TO
9140: IFFALSE 9216
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
9142: LD_VAR 0 9
9146: PUSH
9147: LD_VAR 0 5
9151: ARRAY
9152: PPUSH
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 321
9162: PUSH
9163: LD_INT 1
9165: EQUAL
9166: PUSH
9167: LD_VAR 0 9
9171: PUSH
9172: LD_VAR 0 5
9176: ARRAY
9177: PPUSH
9178: LD_VAR 0 3
9182: PPUSH
9183: CALL_OW 482
9187: PUSH
9188: LD_INT 1
9190: EQUAL
9191: AND
9192: IFFALSE 9214
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9194: LD_VAR 0 2
9198: PPUSH
9199: LD_VAR 0 9
9203: PUSH
9204: LD_VAR 0 5
9208: ARRAY
9209: PPUSH
9210: CALL_OW 184
9214: GO 9139
9216: POP
9217: POP
// end ;
9218: LD_VAR 0 4
9222: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9223: LD_INT 0
9225: PPUSH
9226: PPUSH
9227: PPUSH
9228: PPUSH
9229: PPUSH
9230: PPUSH
9231: PPUSH
9232: PPUSH
9233: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9234: LD_ADDR_VAR 0 3
9238: PUSH
9239: LD_INT 22
9241: PUSH
9242: LD_INT 6
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PUSH
9249: LD_INT 21
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 30
9261: PUSH
9262: LD_INT 6
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: PPUSH
9274: CALL_OW 69
9278: PUSH
9279: LD_INT 1
9281: ARRAY
9282: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_INT 22
9290: PUSH
9291: LD_INT 6
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 21
9300: PUSH
9301: LD_INT 3
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: LD_INT 30
9310: PUSH
9311: LD_INT 3
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 69
9327: PUSH
9328: LD_INT 1
9330: ARRAY
9331: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9332: LD_ADDR_VAR 0 9
9336: PUSH
9337: LD_VAR 0 9
9341: PUSH
9342: LD_EXP 62
9346: ADD
9347: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9348: LD_ADDR_VAR 0 9
9352: PUSH
9353: LD_VAR 0 9
9357: PUSH
9358: LD_EXP 80
9362: ADD
9363: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9364: LD_ADDR_VAR 0 9
9368: PUSH
9369: LD_VAR 0 9
9373: PUSH
9374: LD_EXP 72
9378: ADD
9379: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9380: LD_ADDR_VAR 0 8
9384: PUSH
9385: LD_INT 18
9387: PPUSH
9388: LD_INT 22
9390: PUSH
9391: LD_INT 6
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: LD_INT 60
9413: PUSH
9414: EMPTY
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: PPUSH
9426: CALL_OW 70
9430: PUSH
9431: LD_VAR 0 9
9435: DIFF
9436: ST_TO_ADDR
// if not canTakeUnits then
9437: LD_VAR 0 8
9441: NOT
9442: IFFALSE 9475
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9444: LD_ADDR_EXP 82
9448: PUSH
9449: LD_EXP 82
9453: PPUSH
9454: LD_INT 4
9456: PPUSH
9457: LD_EXP 82
9461: PUSH
9462: LD_INT 3
9464: ARRAY
9465: PUSH
9466: LD_INT 2
9468: PLUS
9469: PPUSH
9470: CALL_OW 1
9474: ST_TO_ADDR
// if canTakeUnits > 2 then
9475: LD_VAR 0 8
9479: PUSH
9480: LD_INT 2
9482: GREATER
9483: IFFALSE 9553
// begin for i := 1 to rand ( 1 , 2 ) do
9485: LD_ADDR_VAR 0 2
9489: PUSH
9490: DOUBLE
9491: LD_INT 1
9493: DEC
9494: ST_TO_ADDR
9495: LD_INT 1
9497: PPUSH
9498: LD_INT 2
9500: PPUSH
9501: CALL_OW 12
9505: PUSH
9506: FOR_TO
9507: IFFALSE 9549
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9509: LD_VAR 0 8
9513: PUSH
9514: LD_VAR 0 2
9518: ARRAY
9519: PPUSH
9520: LD_VAR 0 3
9524: PPUSH
9525: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9529: LD_VAR 0 8
9533: PUSH
9534: LD_VAR 0 2
9538: ARRAY
9539: PPUSH
9540: LD_INT 4
9542: PPUSH
9543: CALL_OW 183
// end ;
9547: GO 9506
9549: POP
9550: POP
// end else
9551: GO 9621
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9553: LD_ADDR_VAR 0 2
9557: PUSH
9558: DOUBLE
9559: LD_INT 1
9561: DEC
9562: ST_TO_ADDR
9563: LD_INT 1
9565: PPUSH
9566: LD_VAR 0 8
9570: PPUSH
9571: CALL_OW 12
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9619
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9579: LD_VAR 0 8
9583: PUSH
9584: LD_VAR 0 2
9588: ARRAY
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9599: LD_VAR 0 8
9603: PUSH
9604: LD_VAR 0 2
9608: ARRAY
9609: PPUSH
9610: LD_INT 4
9612: PPUSH
9613: CALL_OW 183
// end ;
9617: GO 9576
9619: POP
9620: POP
// end ; wait ( 0 0$01 ) ;
9621: LD_INT 35
9623: PPUSH
9624: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9628: LD_ADDR_VAR 0 8
9632: PUSH
9633: LD_INT 18
9635: PPUSH
9636: LD_INT 22
9638: PUSH
9639: LD_INT 6
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PUSH
9646: LD_INT 21
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 3
9658: PUSH
9659: LD_INT 60
9661: PUSH
9662: EMPTY
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: PPUSH
9674: CALL_OW 70
9678: PUSH
9679: LD_VAR 0 9
9683: DIFF
9684: ST_TO_ADDR
// pom = 6 ;
9685: LD_ADDR_VAR 0 7
9689: PUSH
9690: LD_INT 6
9692: ST_TO_ADDR
// if canTakeUnits then
9693: LD_VAR 0 8
9697: IFFALSE 9814
// for i = 1 to canTakeUnits do
9699: LD_ADDR_VAR 0 2
9703: PUSH
9704: DOUBLE
9705: LD_INT 1
9707: DEC
9708: ST_TO_ADDR
9709: LD_VAR 0 8
9713: PUSH
9714: FOR_TO
9715: IFFALSE 9812
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9717: LD_VAR 0 8
9721: PUSH
9722: LD_VAR 0 2
9726: ARRAY
9727: PPUSH
9728: CALL_OW 257
9732: PUSH
9733: LD_INT 3
9735: NONEQUAL
9736: IFFALSE 9776
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9738: LD_VAR 0 8
9742: PUSH
9743: LD_VAR 0 2
9747: ARRAY
9748: PPUSH
9749: LD_VAR 0 4
9753: PPUSH
9754: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9758: LD_VAR 0 8
9762: PUSH
9763: LD_VAR 0 2
9767: ARRAY
9768: PPUSH
9769: LD_INT 3
9771: PPUSH
9772: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9776: LD_VAR 0 8
9780: PUSH
9781: LD_VAR 0 2
9785: ARRAY
9786: PPUSH
9787: LD_VAR 0 4
9791: PPUSH
9792: CALL_OW 120
// pom = pom - 1 ;
9796: LD_ADDR_VAR 0 7
9800: PUSH
9801: LD_VAR 0 7
9805: PUSH
9806: LD_INT 1
9808: MINUS
9809: ST_TO_ADDR
// end ;
9810: GO 9714
9812: POP
9813: POP
// if pom > 0 then
9814: LD_VAR 0 7
9818: PUSH
9819: LD_INT 0
9821: GREATER
9822: IFFALSE 9847
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9824: LD_ADDR_EXP 82
9828: PUSH
9829: LD_EXP 82
9833: PPUSH
9834: LD_INT 3
9836: PPUSH
9837: LD_VAR 0 7
9841: PPUSH
9842: CALL_OW 1
9846: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9847: LD_INT 35
9849: PPUSH
9850: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9854: LD_ADDR_VAR 0 5
9858: PUSH
9859: LD_INT 22
9861: PUSH
9862: LD_INT 6
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 21
9871: PUSH
9872: LD_INT 3
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 30
9881: PUSH
9882: LD_INT 32
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 3
9891: PUSH
9892: LD_INT 59
9894: PUSH
9895: EMPTY
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: PPUSH
9908: CALL_OW 69
9912: PUSH
9913: FOR_IN
9914: IFFALSE 10160
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9916: LD_ADDR_VAR 0 8
9920: PUSH
9921: LD_INT 18
9923: PPUSH
9924: LD_INT 22
9926: PUSH
9927: LD_INT 6
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 21
9936: PUSH
9937: LD_INT 1
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 3
9946: PUSH
9947: LD_INT 60
9949: PUSH
9950: EMPTY
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: PPUSH
9962: CALL_OW 70
9966: PUSH
9967: LD_VAR 0 9
9971: DIFF
9972: ST_TO_ADDR
// if canTakeUnits then
9973: LD_VAR 0 8
9977: IFFALSE 10111
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9979: LD_VAR 0 8
9983: PUSH
9984: LD_INT 1
9986: ARRAY
9987: PPUSH
9988: CALL_OW 257
9992: PUSH
9993: LD_INT 1
9995: NONEQUAL
9996: IFFALSE 10091
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9998: LD_VAR 0 8
10002: PUSH
10003: LD_INT 1
10005: ARRAY
10006: PPUSH
10007: LD_INT 22
10009: PUSH
10010: LD_INT 6
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: LD_INT 21
10019: PUSH
10020: LD_INT 3
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 30
10029: PUSH
10030: LD_INT 5
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: LIST
10041: PPUSH
10042: CALL_OW 69
10046: PUSH
10047: LD_INT 1
10049: ARRAY
10050: PPUSH
10051: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
10055: LD_VAR 0 8
10059: PUSH
10060: LD_INT 1
10062: ARRAY
10063: PPUSH
10064: LD_INT 1
10066: PPUSH
10067: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
10071: LD_VAR 0 8
10075: PUSH
10076: LD_INT 1
10078: ARRAY
10079: PPUSH
10080: CALL_OW 182
// wait ( 0 0$1 ) ;
10084: LD_INT 35
10086: PPUSH
10087: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
10091: LD_VAR 0 8
10095: PUSH
10096: LD_INT 1
10098: ARRAY
10099: PPUSH
10100: LD_VAR 0 5
10104: PPUSH
10105: CALL_OW 120
// end else
10109: GO 10158
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
10111: LD_ADDR_EXP 74
10115: PUSH
10116: LD_EXP 74
10120: PUSH
10121: LD_VAR 0 5
10125: ADD
10126: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
10127: LD_ADDR_EXP 82
10131: PUSH
10132: LD_EXP 82
10136: PPUSH
10137: LD_INT 1
10139: PPUSH
10140: LD_EXP 82
10144: PUSH
10145: LD_INT 1
10147: ARRAY
10148: PUSH
10149: LD_INT 1
10151: PLUS
10152: PPUSH
10153: CALL_OW 1
10157: ST_TO_ADDR
// end ; end ;
10158: GO 9913
10160: POP
10161: POP
// end ;
10162: LD_VAR 0 1
10166: RET
// export function IsEnemyNear ( unit , enemySide ) ; var nearUnit ; begin
10167: LD_INT 0
10169: PPUSH
10170: PPUSH
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , enemySide ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
10171: LD_ADDR_VAR 0 4
10175: PUSH
10176: LD_INT 22
10178: PUSH
10179: LD_VAR 0 2
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 50
10190: PUSH
10191: EMPTY
10192: LIST
10193: PUSH
10194: LD_INT 2
10196: PUSH
10197: LD_INT 21
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 21
10209: PUSH
10210: LD_INT 2
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: PPUSH
10227: CALL_OW 69
10231: PPUSH
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 74
10241: ST_TO_ADDR
// if GetDistUnits ( nearUnit , unit ) < 13 then
10242: LD_VAR 0 4
10246: PPUSH
10247: LD_VAR 0 1
10251: PPUSH
10252: CALL_OW 296
10256: PUSH
10257: LD_INT 13
10259: LESS
10260: IFFALSE 10272
// begin result = true ;
10262: LD_ADDR_VAR 0 3
10266: PUSH
10267: LD_INT 1
10269: ST_TO_ADDR
// exit ;
10270: GO 10280
// end ; result = false ;
10272: LD_ADDR_VAR 0 3
10276: PUSH
10277: LD_INT 0
10279: ST_TO_ADDR
// end ;
10280: LD_VAR 0 3
10284: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10285: LD_INT 0
10287: PPUSH
10288: PPUSH
10289: PPUSH
10290: PPUSH
10291: PPUSH
10292: PPUSH
10293: PPUSH
10294: PPUSH
10295: PPUSH
10296: PPUSH
10297: PPUSH
10298: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10299: LD_VAR 0 1
10303: PPUSH
10304: CALL_OW 302
10308: NOT
10309: PUSH
10310: LD_VAR 0 4
10314: PUSH
10315: LD_INT 1
10317: EQUAL
10318: OR
10319: PUSH
10320: LD_VAR 0 2
10324: PPUSH
10325: LD_VAR 0 3
10329: PPUSH
10330: CALL_OW 488
10334: NOT
10335: OR
10336: PUSH
10337: LD_VAR 0 1
10341: PPUSH
10342: LD_VAR 0 2
10346: PPUSH
10347: LD_VAR 0 3
10351: PPUSH
10352: CALL_OW 297
10356: PUSH
10357: LD_VAR 0 4
10361: GREATEREQUAL
10362: OR
10363: PUSH
10364: LD_VAR 0 5
10368: PUSH
10369: LD_INT 1
10371: PUSH
10372: LD_INT 0
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: IN
10379: NOT
10380: OR
10381: IFFALSE 10385
// exit ;
10383: GO 11942
// attempts = 0 ;
10385: LD_ADDR_VAR 0 17
10389: PUSH
10390: LD_INT 0
10392: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10393: LD_ADDR_VAR 0 7
10397: PUSH
10398: EMPTY
10399: ST_TO_ADDR
// list_coords = [ ] ;
10400: LD_ADDR_VAR 0 8
10404: PUSH
10405: EMPTY
10406: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10407: LD_ADDR_VAR 0 9
10411: PUSH
10412: LD_VAR 0 2
10416: PPUSH
10417: LD_VAR 0 3
10421: PPUSH
10422: LD_VAR 0 1
10426: PPUSH
10427: CALL_OW 250
10431: PPUSH
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 251
10441: PPUSH
10442: CALL 11947 0 4
10446: ST_TO_ADDR
// if attempts = 0 then
10447: LD_VAR 0 17
10451: PUSH
10452: LD_INT 0
10454: EQUAL
10455: IFFALSE 10563
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10457: LD_ADDR_VAR 0 10
10461: PUSH
10462: LD_VAR 0 9
10466: PUSH
10467: LD_VAR 0 9
10471: PUSH
10472: LD_INT 1
10474: PLUS
10475: PUSH
10476: LD_VAR 0 9
10480: PUSH
10481: LD_INT 1
10483: MINUS
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10490: LD_VAR 0 10
10494: PUSH
10495: LD_INT 2
10497: ARRAY
10498: PUSH
10499: LD_INT 6
10501: EQUAL
10502: IFFALSE 10525
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10504: LD_ADDR_VAR 0 10
10508: PUSH
10509: LD_VAR 0 10
10513: PPUSH
10514: LD_INT 2
10516: PPUSH
10517: LD_INT 0
10519: PPUSH
10520: CALL_OW 1
10524: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10525: LD_VAR 0 10
10529: PUSH
10530: LD_INT 3
10532: ARRAY
10533: PUSH
10534: LD_INT 1
10536: NEG
10537: EQUAL
10538: IFFALSE 10561
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10540: LD_ADDR_VAR 0 10
10544: PUSH
10545: LD_VAR 0 10
10549: PPUSH
10550: LD_INT 3
10552: PPUSH
10553: LD_INT 5
10555: PPUSH
10556: CALL_OW 1
10560: ST_TO_ADDR
// end else
10561: GO 10600
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10563: LD_ADDR_VAR 0 10
10567: PUSH
10568: LD_INT 0
10570: PUSH
10571: LD_INT 1
10573: PUSH
10574: LD_INT 2
10576: PUSH
10577: LD_INT 3
10579: PUSH
10580: LD_INT 4
10582: PUSH
10583: LD_INT 5
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: LD_VAR 0 9
10598: DIFF
10599: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10600: LD_ADDR_VAR 0 14
10604: PUSH
10605: DOUBLE
10606: LD_INT 1
10608: DEC
10609: ST_TO_ADDR
10610: LD_VAR 0 10
10614: PUSH
10615: LD_INT 0
10617: PLUS
10618: PUSH
10619: FOR_TO
10620: IFFALSE 10942
// case dir_list [ c ] of 0 :
10622: LD_VAR 0 10
10626: PUSH
10627: LD_VAR 0 14
10631: ARRAY
10632: PUSH
10633: LD_INT 0
10635: DOUBLE
10636: EQUAL
10637: IFTRUE 10641
10639: GO 10682
10641: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10642: LD_ADDR_VAR 0 8
10646: PUSH
10647: LD_VAR 0 8
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: LD_VAR 0 2
10659: PUSH
10660: LD_VAR 0 3
10664: PUSH
10665: LD_VAR 0 4
10669: MINUS
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PPUSH
10675: CALL_OW 2
10679: ST_TO_ADDR
10680: GO 10940
10682: LD_INT 1
10684: DOUBLE
10685: EQUAL
10686: IFTRUE 10690
10688: GO 10731
10690: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10691: LD_ADDR_VAR 0 8
10695: PUSH
10696: LD_VAR 0 8
10700: PPUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_VAR 0 2
10708: PUSH
10709: LD_VAR 0 4
10713: PLUS
10714: PUSH
10715: LD_VAR 0 3
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PPUSH
10724: CALL_OW 2
10728: ST_TO_ADDR
10729: GO 10940
10731: LD_INT 2
10733: DOUBLE
10734: EQUAL
10735: IFTRUE 10739
10737: GO 10786
10739: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10740: LD_ADDR_VAR 0 8
10744: PUSH
10745: LD_VAR 0 8
10749: PPUSH
10750: LD_INT 1
10752: PPUSH
10753: LD_VAR 0 2
10757: PUSH
10758: LD_VAR 0 4
10762: PLUS
10763: PUSH
10764: LD_VAR 0 3
10768: PUSH
10769: LD_VAR 0 4
10773: PLUS
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PPUSH
10779: CALL_OW 2
10783: ST_TO_ADDR
10784: GO 10940
10786: LD_INT 3
10788: DOUBLE
10789: EQUAL
10790: IFTRUE 10794
10792: GO 10835
10794: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10795: LD_ADDR_VAR 0 8
10799: PUSH
10800: LD_VAR 0 8
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: LD_VAR 0 2
10812: PUSH
10813: LD_VAR 0 3
10817: PUSH
10818: LD_VAR 0 4
10822: PLUS
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PPUSH
10828: CALL_OW 2
10832: ST_TO_ADDR
10833: GO 10940
10835: LD_INT 4
10837: DOUBLE
10838: EQUAL
10839: IFTRUE 10843
10841: GO 10884
10843: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10844: LD_ADDR_VAR 0 8
10848: PUSH
10849: LD_VAR 0 8
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: LD_VAR 0 2
10861: PUSH
10862: LD_VAR 0 4
10866: MINUS
10867: PUSH
10868: LD_VAR 0 3
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 2
10881: ST_TO_ADDR
10882: GO 10940
10884: LD_INT 5
10886: DOUBLE
10887: EQUAL
10888: IFTRUE 10892
10890: GO 10939
10892: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10893: LD_ADDR_VAR 0 8
10897: PUSH
10898: LD_VAR 0 8
10902: PPUSH
10903: LD_INT 1
10905: PPUSH
10906: LD_VAR 0 2
10910: PUSH
10911: LD_VAR 0 4
10915: MINUS
10916: PUSH
10917: LD_VAR 0 3
10921: PUSH
10922: LD_VAR 0 4
10926: MINUS
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PPUSH
10932: CALL_OW 2
10936: ST_TO_ADDR
10937: GO 10940
10939: POP
10940: GO 10619
10942: POP
10943: POP
// if dist < 30 then
10944: LD_VAR 0 4
10948: PUSH
10949: LD_INT 30
10951: LESS
10952: IFFALSE 10964
// c = 1 else
10954: LD_ADDR_VAR 0 14
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
10962: GO 10972
// c = 2 ;
10964: LD_ADDR_VAR 0 14
10968: PUSH
10969: LD_INT 2
10971: ST_TO_ADDR
// b = 1 ;
10972: LD_ADDR_VAR 0 11
10976: PUSH
10977: LD_INT 1
10979: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10980: LD_VAR 0 11
10984: PUSH
10985: LD_VAR 0 4
10989: PUSH
10990: LD_INT 1
10992: MINUS
10993: LESSEQUAL
10994: IFFALSE 11422
// begin if 0 in dir_list and 1 in dir_list then
10996: LD_INT 0
10998: PUSH
10999: LD_VAR 0 10
11003: IN
11004: PUSH
11005: LD_INT 1
11007: PUSH
11008: LD_VAR 0 10
11012: IN
11013: AND
11014: IFFALSE 11066
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
11016: LD_ADDR_VAR 0 8
11020: PUSH
11021: LD_VAR 0 8
11025: PPUSH
11026: LD_INT 1
11028: PPUSH
11029: LD_VAR 0 2
11033: PUSH
11034: LD_VAR 0 11
11038: PLUS
11039: PUSH
11040: LD_VAR 0 3
11044: PUSH
11045: LD_VAR 0 4
11049: MINUS
11050: PUSH
11051: LD_VAR 0 11
11055: PLUS
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PPUSH
11061: CALL_OW 2
11065: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
11066: LD_INT 1
11068: PUSH
11069: LD_VAR 0 10
11073: IN
11074: PUSH
11075: LD_INT 2
11077: PUSH
11078: LD_VAR 0 10
11082: IN
11083: AND
11084: IFFALSE 11130
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
11086: LD_ADDR_VAR 0 8
11090: PUSH
11091: LD_VAR 0 8
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: LD_VAR 0 2
11103: PUSH
11104: LD_VAR 0 4
11108: PLUS
11109: PUSH
11110: LD_VAR 0 3
11114: PUSH
11115: LD_VAR 0 11
11119: PLUS
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PPUSH
11125: CALL_OW 2
11129: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
11130: LD_INT 2
11132: PUSH
11133: LD_VAR 0 10
11137: IN
11138: PUSH
11139: LD_INT 3
11141: PUSH
11142: LD_VAR 0 10
11146: IN
11147: AND
11148: IFFALSE 11200
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
11150: LD_ADDR_VAR 0 8
11154: PUSH
11155: LD_VAR 0 8
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: LD_VAR 0 2
11167: PUSH
11168: LD_VAR 0 4
11172: PLUS
11173: PUSH
11174: LD_VAR 0 11
11178: MINUS
11179: PUSH
11180: LD_VAR 0 3
11184: PUSH
11185: LD_VAR 0 4
11189: PLUS
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PPUSH
11195: CALL_OW 2
11199: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
11200: LD_INT 3
11202: PUSH
11203: LD_VAR 0 10
11207: IN
11208: PUSH
11209: LD_INT 4
11211: PUSH
11212: LD_VAR 0 10
11216: IN
11217: AND
11218: IFFALSE 11270
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
11220: LD_ADDR_VAR 0 8
11224: PUSH
11225: LD_VAR 0 8
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: LD_VAR 0 2
11237: PUSH
11238: LD_VAR 0 11
11242: MINUS
11243: PUSH
11244: LD_VAR 0 3
11248: PUSH
11249: LD_VAR 0 4
11253: PLUS
11254: PUSH
11255: LD_VAR 0 11
11259: MINUS
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 2
11269: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
11270: LD_INT 4
11272: PUSH
11273: LD_VAR 0 10
11277: IN
11278: PUSH
11279: LD_INT 5
11281: PUSH
11282: LD_VAR 0 10
11286: IN
11287: AND
11288: IFFALSE 11334
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11290: LD_ADDR_VAR 0 8
11294: PUSH
11295: LD_VAR 0 8
11299: PPUSH
11300: LD_INT 1
11302: PPUSH
11303: LD_VAR 0 2
11307: PUSH
11308: LD_VAR 0 4
11312: MINUS
11313: PUSH
11314: LD_VAR 0 3
11318: PUSH
11319: LD_VAR 0 11
11323: MINUS
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PPUSH
11329: CALL_OW 2
11333: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11334: LD_INT 5
11336: PUSH
11337: LD_VAR 0 10
11341: IN
11342: PUSH
11343: LD_INT 0
11345: PUSH
11346: LD_VAR 0 10
11350: IN
11351: AND
11352: IFFALSE 11404
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11354: LD_ADDR_VAR 0 8
11358: PUSH
11359: LD_VAR 0 8
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: LD_VAR 0 2
11371: PUSH
11372: LD_VAR 0 4
11376: MINUS
11377: PUSH
11378: LD_VAR 0 11
11382: PLUS
11383: PUSH
11384: LD_VAR 0 3
11388: PUSH
11389: LD_VAR 0 4
11393: MINUS
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PPUSH
11399: CALL_OW 2
11403: ST_TO_ADDR
// b = b + c end ;
11404: LD_ADDR_VAR 0 11
11408: PUSH
11409: LD_VAR 0 11
11413: PUSH
11414: LD_VAR 0 14
11418: PLUS
11419: ST_TO_ADDR
11420: GO 10980
// if list_coords = 0 then
11422: LD_VAR 0 8
11426: PUSH
11427: LD_INT 0
11429: EQUAL
11430: IFFALSE 11434
// exit ;
11432: GO 11942
// repeat min_dist = 5000 ;
11434: LD_ADDR_VAR 0 12
11438: PUSH
11439: LD_INT 5000
11441: ST_TO_ADDR
// for b in list_coords do
11442: LD_ADDR_VAR 0 11
11446: PUSH
11447: LD_VAR 0 8
11451: PUSH
11452: FOR_IN
11453: IFFALSE 11512
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11455: LD_ADDR_VAR 0 13
11459: PUSH
11460: LD_VAR 0 1
11464: PPUSH
11465: LD_VAR 0 11
11469: PUSH
11470: LD_INT 1
11472: ARRAY
11473: PPUSH
11474: LD_VAR 0 11
11478: PUSH
11479: LD_INT 2
11481: ARRAY
11482: PPUSH
11483: CALL_OW 297
11487: ST_TO_ADDR
// if temp_dist < min_dist then
11488: LD_VAR 0 13
11492: PUSH
11493: LD_VAR 0 12
11497: LESS
11498: IFFALSE 11510
// min_dist = temp_dist ;
11500: LD_ADDR_VAR 0 12
11504: PUSH
11505: LD_VAR 0 13
11509: ST_TO_ADDR
// end ;
11510: GO 11452
11512: POP
11513: POP
// c = 0 ;
11514: LD_ADDR_VAR 0 14
11518: PUSH
11519: LD_INT 0
11521: ST_TO_ADDR
// repeat c = c + 1 ;
11522: LD_ADDR_VAR 0 14
11526: PUSH
11527: LD_VAR 0 14
11531: PUSH
11532: LD_INT 1
11534: PLUS
11535: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11536: LD_VAR 0 1
11540: PPUSH
11541: LD_VAR 0 8
11545: PUSH
11546: LD_VAR 0 14
11550: ARRAY
11551: PUSH
11552: LD_INT 1
11554: ARRAY
11555: PPUSH
11556: LD_VAR 0 8
11560: PUSH
11561: LD_VAR 0 14
11565: ARRAY
11566: PUSH
11567: LD_INT 2
11569: ARRAY
11570: PPUSH
11571: CALL_OW 297
11575: PUSH
11576: LD_VAR 0 12
11580: EQUAL
11581: IFFALSE 11646
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11583: LD_ADDR_VAR 0 7
11587: PUSH
11588: LD_VAR 0 7
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: LD_VAR 0 8
11600: PUSH
11601: LD_VAR 0 14
11605: ARRAY
11606: PPUSH
11607: CALL_OW 2
11611: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11612: LD_ADDR_VAR 0 8
11616: PUSH
11617: LD_VAR 0 8
11621: PPUSH
11622: LD_VAR 0 14
11626: PPUSH
11627: CALL_OW 3
11631: ST_TO_ADDR
// c = c - 1 ;
11632: LD_ADDR_VAR 0 14
11636: PUSH
11637: LD_VAR 0 14
11641: PUSH
11642: LD_INT 1
11644: MINUS
11645: ST_TO_ADDR
// end ; until c = list_coords ;
11646: LD_VAR 0 14
11650: PUSH
11651: LD_VAR 0 8
11655: EQUAL
11656: IFFALSE 11522
// c = 0 ;
11658: LD_ADDR_VAR 0 14
11662: PUSH
11663: LD_INT 0
11665: ST_TO_ADDR
// if list_nearest > 0 then
11666: LD_VAR 0 7
11670: PUSH
11671: LD_INT 0
11673: GREATER
11674: IFFALSE 11816
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11676: LD_ADDR_VAR 0 15
11680: PUSH
11681: LD_INT 1
11683: PPUSH
11684: LD_VAR 0 7
11688: PPUSH
11689: CALL_OW 12
11693: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11694: LD_ADDR_VAR 0 16
11698: PUSH
11699: LD_VAR 0 7
11703: PUSH
11704: LD_VAR 0 15
11708: ARRAY
11709: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11710: LD_VAR 0 16
11714: PUSH
11715: LD_INT 1
11717: ARRAY
11718: PPUSH
11719: LD_VAR 0 16
11723: PUSH
11724: LD_INT 2
11726: ARRAY
11727: PPUSH
11728: CALL_OW 488
11732: PUSH
11733: LD_INT 0
11735: GREATER
11736: PUSH
11737: LD_VAR 0 16
11741: PUSH
11742: LD_INT 1
11744: ARRAY
11745: PPUSH
11746: LD_VAR 0 16
11750: PUSH
11751: LD_INT 2
11753: ARRAY
11754: PPUSH
11755: CALL_OW 428
11759: PUSH
11760: LD_INT 0
11762: EQUAL
11763: AND
11764: IFFALSE 11776
// c = 1 else
11766: LD_ADDR_VAR 0 14
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
11774: GO 11796
// list_nearest = Delete ( list_nearest , rand_num ) ;
11776: LD_ADDR_VAR 0 7
11780: PUSH
11781: LD_VAR 0 7
11785: PPUSH
11786: LD_VAR 0 15
11790: PPUSH
11791: CALL_OW 3
11795: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11796: LD_VAR 0 14
11800: PUSH
11801: LD_INT 1
11803: EQUAL
11804: PUSH
11805: LD_VAR 0 7
11809: PUSH
11810: LD_INT 0
11812: EQUAL
11813: OR
11814: IFFALSE 11676
// end ; until c = 1 or list_coords = 0 ;
11816: LD_VAR 0 14
11820: PUSH
11821: LD_INT 1
11823: EQUAL
11824: PUSH
11825: LD_VAR 0 8
11829: PUSH
11830: LD_INT 0
11832: EQUAL
11833: OR
11834: IFFALSE 11434
// attempts = attempts + 1 ;
11836: LD_ADDR_VAR 0 17
11840: PUSH
11841: LD_VAR 0 17
11845: PUSH
11846: LD_INT 1
11848: PLUS
11849: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11850: LD_VAR 0 14
11854: PUSH
11855: LD_INT 1
11857: EQUAL
11858: PUSH
11859: LD_VAR 0 17
11863: PUSH
11864: LD_INT 1
11866: GREATER
11867: OR
11868: IFFALSE 10393
// if c = 1 then
11870: LD_VAR 0 14
11874: PUSH
11875: LD_INT 1
11877: EQUAL
11878: IFFALSE 11942
// if add then
11880: LD_VAR 0 5
11884: IFFALSE 11915
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11886: LD_VAR 0 1
11890: PPUSH
11891: LD_VAR 0 16
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: LD_VAR 0 16
11904: PUSH
11905: LD_INT 2
11907: ARRAY
11908: PPUSH
11909: CALL_OW 171
11913: GO 11942
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11915: LD_VAR 0 1
11919: PPUSH
11920: LD_VAR 0 16
11924: PUSH
11925: LD_INT 1
11927: ARRAY
11928: PPUSH
11929: LD_VAR 0 16
11933: PUSH
11934: LD_INT 2
11936: ARRAY
11937: PPUSH
11938: CALL_OW 111
// end ;
11942: LD_VAR 0 6
11946: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11947: LD_INT 0
11949: PPUSH
11950: PPUSH
11951: PPUSH
11952: PPUSH
11953: PPUSH
11954: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11955: LD_VAR 0 1
11959: PPUSH
11960: LD_VAR 0 2
11964: PPUSH
11965: CALL_OW 488
11969: NOT
11970: PUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 4
11980: PPUSH
11981: CALL_OW 488
11985: NOT
11986: OR
11987: IFFALSE 12000
// begin result = - 1 ;
11989: LD_ADDR_VAR 0 5
11993: PUSH
11994: LD_INT 1
11996: NEG
11997: ST_TO_ADDR
// exit ;
11998: GO 12160
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
12000: LD_ADDR_VAR 0 6
12004: PUSH
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_VAR 0 2
12014: PPUSH
12015: LD_VAR 0 3
12019: PPUSH
12020: LD_VAR 0 4
12024: PPUSH
12025: CALL_OW 298
12029: ST_TO_ADDR
// dist_2 = 99999 ;
12030: LD_ADDR_VAR 0 7
12034: PUSH
12035: LD_INT 99999
12037: ST_TO_ADDR
// for b = 0 to 5 do
12038: LD_ADDR_VAR 0 8
12042: PUSH
12043: DOUBLE
12044: LD_INT 0
12046: DEC
12047: ST_TO_ADDR
12048: LD_INT 5
12050: PUSH
12051: FOR_TO
12052: IFFALSE 12148
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
12054: LD_ADDR_VAR 0 9
12058: PUSH
12059: LD_VAR 0 1
12063: PPUSH
12064: LD_VAR 0 8
12068: PPUSH
12069: LD_VAR 0 6
12073: PPUSH
12074: CALL_OW 272
12078: PPUSH
12079: LD_VAR 0 2
12083: PPUSH
12084: LD_VAR 0 8
12088: PPUSH
12089: LD_VAR 0 6
12093: PPUSH
12094: CALL_OW 273
12098: PPUSH
12099: LD_VAR 0 3
12103: PPUSH
12104: LD_VAR 0 4
12108: PPUSH
12109: CALL_OW 298
12113: ST_TO_ADDR
// if temp_dist < dist_2 then
12114: LD_VAR 0 9
12118: PUSH
12119: LD_VAR 0 7
12123: LESS
12124: IFFALSE 12146
// begin dist_2 = temp_dist ;
12126: LD_ADDR_VAR 0 7
12130: PUSH
12131: LD_VAR 0 9
12135: ST_TO_ADDR
// dir = b ;
12136: LD_ADDR_VAR 0 10
12140: PUSH
12141: LD_VAR 0 8
12145: ST_TO_ADDR
// end ; end ;
12146: GO 12051
12148: POP
12149: POP
// result = dir ;
12150: LD_ADDR_VAR 0 5
12154: PUSH
12155: LD_VAR 0 10
12159: ST_TO_ADDR
// end ; end_of_file
12160: LD_VAR 0 5
12164: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
12165: LD_INT 0
12167: PPUSH
12168: PPUSH
12169: PPUSH
12170: PPUSH
12171: PPUSH
12172: PPUSH
12173: PPUSH
12174: PPUSH
12175: PPUSH
12176: PPUSH
12177: PPUSH
12178: PPUSH
12179: PPUSH
12180: PPUSH
12181: PPUSH
12182: PPUSH
12183: PPUSH
12184: PPUSH
12185: PPUSH
12186: PPUSH
12187: PPUSH
12188: PPUSH
12189: PPUSH
12190: PPUSH
12191: PPUSH
12192: PPUSH
12193: PPUSH
12194: PPUSH
// personel = [ ] ;
12195: LD_ADDR_VAR 0 18
12199: PUSH
12200: EMPTY
12201: ST_TO_ADDR
// vehicles = [ ] ;
12202: LD_ADDR_VAR 0 24
12206: PUSH
12207: EMPTY
12208: ST_TO_ADDR
// for unit in basePersonel do
12209: LD_ADDR_VAR 0 17
12213: PUSH
12214: LD_VAR 0 3
12218: PUSH
12219: FOR_IN
12220: IFFALSE 12268
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
12222: LD_ADDR_VAR 0 18
12226: PUSH
12227: LD_VAR 0 18
12231: PUSH
12232: LD_VAR 0 17
12236: PUSH
12237: LD_VAR 0 17
12241: PPUSH
12242: CALL_OW 310
12246: PUSH
12247: LD_VAR 0 17
12251: PPUSH
12252: CALL_OW 302
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: PUSH
12262: EMPTY
12263: LIST
12264: ADD
12265: ST_TO_ADDR
12266: GO 12219
12268: POP
12269: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
12270: LD_ADDR_VAR 0 23
12274: PUSH
12275: LD_VAR 0 4
12279: PPUSH
12280: LD_INT 22
12282: PUSH
12283: LD_VAR 0 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 21
12294: PUSH
12295: LD_INT 2
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 50
12304: PUSH
12305: EMPTY
12306: LIST
12307: PUSH
12308: LD_INT 3
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 12
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 34
12326: PUSH
12327: LD_INT 51
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 34
12336: PUSH
12337: LD_INT 32
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 70
12364: PUSH
12365: FOR_IN
12366: IFFALSE 12414
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12368: LD_ADDR_VAR 0 24
12372: PUSH
12373: LD_VAR 0 24
12377: PUSH
12378: LD_VAR 0 23
12382: PUSH
12383: LD_VAR 0 23
12387: PPUSH
12388: CALL_OW 310
12392: PUSH
12393: LD_VAR 0 23
12397: PPUSH
12398: CALL_OW 302
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: ADD
12411: ST_TO_ADDR
12412: GO 12365
12414: POP
12415: POP
// repeat soldiers = [ ] ;
12416: LD_ADDR_VAR 0 19
12420: PUSH
12421: EMPTY
12422: ST_TO_ADDR
// engineers = [ ] ;
12423: LD_ADDR_VAR 0 20
12427: PUSH
12428: EMPTY
12429: ST_TO_ADDR
// mechanics = [ ] ;
12430: LD_ADDR_VAR 0 21
12434: PUSH
12435: EMPTY
12436: ST_TO_ADDR
// scientists = [ ] ;
12437: LD_ADDR_VAR 0 22
12441: PUSH
12442: EMPTY
12443: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12444: LD_ADDR_VAR 0 29
12448: PUSH
12449: LD_VAR 0 4
12453: PPUSH
12454: LD_INT 22
12456: PUSH
12457: LD_VAR 0 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 3
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 50
12478: PUSH
12479: EMPTY
12480: LIST
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: LD_INT 30
12487: PUSH
12488: LD_INT 0
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 30
12497: PUSH
12498: LD_INT 1
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 70
12520: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12521: LD_ADDR_VAR 0 30
12525: PUSH
12526: LD_VAR 0 4
12530: PPUSH
12531: LD_INT 22
12533: PUSH
12534: LD_VAR 0 1
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 21
12545: PUSH
12546: LD_INT 3
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 50
12555: PUSH
12556: EMPTY
12557: LIST
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: LD_INT 30
12564: PUSH
12565: LD_INT 2
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 30
12574: PUSH
12575: LD_INT 3
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 70
12597: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12598: LD_ADDR_VAR 0 31
12602: PUSH
12603: LD_VAR 0 4
12607: PPUSH
12608: LD_INT 22
12610: PUSH
12611: LD_VAR 0 1
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 21
12622: PUSH
12623: LD_INT 3
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 50
12632: PUSH
12633: EMPTY
12634: LIST
12635: PUSH
12636: LD_INT 2
12638: PUSH
12639: LD_INT 30
12641: PUSH
12642: LD_INT 6
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 30
12651: PUSH
12652: LD_INT 7
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 30
12661: PUSH
12662: LD_INT 8
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 70
12685: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12686: LD_ADDR_VAR 0 32
12690: PUSH
12691: LD_VAR 0 4
12695: PPUSH
12696: LD_INT 22
12698: PUSH
12699: LD_VAR 0 1
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 21
12710: PUSH
12711: LD_INT 3
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 50
12720: PUSH
12721: EMPTY
12722: LIST
12723: PUSH
12724: LD_INT 2
12726: PUSH
12727: LD_INT 30
12729: PUSH
12730: LD_INT 31
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 30
12739: PUSH
12740: LD_INT 32
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 70
12762: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12763: LD_ADDR_VAR 0 33
12767: PUSH
12768: LD_VAR 0 4
12772: PPUSH
12773: LD_INT 22
12775: PUSH
12776: LD_VAR 0 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 21
12787: PUSH
12788: LD_INT 3
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 50
12797: PUSH
12798: EMPTY
12799: LIST
12800: PUSH
12801: LD_INT 2
12803: PUSH
12804: LD_INT 30
12806: PUSH
12807: LD_INT 4
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 30
12816: PUSH
12817: LD_INT 5
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 70
12839: ST_TO_ADDR
// for i := 1 to personel do
12840: LD_ADDR_VAR 0 13
12844: PUSH
12845: DOUBLE
12846: LD_INT 1
12848: DEC
12849: ST_TO_ADDR
12850: LD_VAR 0 18
12854: PUSH
12855: FOR_TO
12856: IFFALSE 13062
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12858: LD_VAR 0 18
12862: PUSH
12863: LD_VAR 0 13
12867: ARRAY
12868: PUSH
12869: LD_INT 1
12871: ARRAY
12872: PPUSH
12873: CALL_OW 256
12877: PUSH
12878: LD_INT 1000
12880: EQUAL
12881: IFFALSE 12923
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12883: LD_ADDR_VAR 0 18
12887: PUSH
12888: LD_VAR 0 18
12892: PPUSH
12893: LD_VAR 0 13
12897: PUSH
12898: LD_VAR 0 18
12902: PUSH
12903: LD_VAR 0 13
12907: ARRAY
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PPUSH
12913: LD_INT 1
12915: PPUSH
12916: CALL 37267 0 3
12920: ST_TO_ADDR
// end else
12921: GO 13010
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12923: LD_VAR 0 18
12927: PUSH
12928: LD_VAR 0 13
12932: ARRAY
12933: PUSH
12934: LD_INT 1
12936: ARRAY
12937: PPUSH
12938: CALL_OW 256
12942: PUSH
12943: LD_INT 950
12945: LESSEQUAL
12946: IFFALSE 13010
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
12948: LD_ADDR_VAR 0 18
12952: PUSH
12953: LD_VAR 0 18
12957: PPUSH
12958: LD_VAR 0 13
12962: PUSH
12963: LD_VAR 0 18
12967: PUSH
12968: LD_VAR 0 13
12972: ARRAY
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PPUSH
12978: LD_INT 0
12980: PPUSH
12981: CALL 37267 0 3
12985: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12986: LD_VAR 0 18
12990: PUSH
12991: LD_VAR 0 13
12995: ARRAY
12996: PUSH
12997: LD_INT 1
12999: ARRAY
13000: PPUSH
13001: LD_VAR 0 5
13005: PPUSH
13006: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
13010: LD_VAR 0 18
13014: PUSH
13015: LD_VAR 0 13
13019: ARRAY
13020: PUSH
13021: LD_INT 1
13023: ARRAY
13024: PPUSH
13025: CALL_OW 256
13029: PUSH
13030: LD_INT 250
13032: LESS
13033: IFFALSE 13060
// personel = personel diff [ personel [ i ] ] ;
13035: LD_ADDR_VAR 0 18
13039: PUSH
13040: LD_VAR 0 18
13044: PUSH
13045: LD_VAR 0 18
13049: PUSH
13050: LD_VAR 0 13
13054: ARRAY
13055: PUSH
13056: EMPTY
13057: LIST
13058: DIFF
13059: ST_TO_ADDR
// end ;
13060: GO 12855
13062: POP
13063: POP
// for i := 1 to vehicles do
13064: LD_ADDR_VAR 0 13
13068: PUSH
13069: DOUBLE
13070: LD_INT 1
13072: DEC
13073: ST_TO_ADDR
13074: LD_VAR 0 24
13078: PUSH
13079: FOR_TO
13080: IFFALSE 13466
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
13082: LD_VAR 0 24
13086: PUSH
13087: LD_VAR 0 13
13091: ARRAY
13092: PUSH
13093: LD_INT 1
13095: ARRAY
13096: PPUSH
13097: CALL_OW 261
13101: PUSH
13102: LD_INT 50
13104: LESS
13105: IFFALSE 13129
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
13107: LD_VAR 0 24
13111: PUSH
13112: LD_VAR 0 13
13116: ARRAY
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PPUSH
13122: LD_INT 100
13124: PPUSH
13125: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
13129: LD_VAR 0 24
13133: PUSH
13134: LD_VAR 0 13
13138: ARRAY
13139: PUSH
13140: LD_INT 1
13142: ARRAY
13143: PPUSH
13144: CALL_OW 256
13148: PUSH
13149: LD_INT 1000
13151: EQUAL
13152: IFFALSE 13327
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
13154: LD_VAR 0 24
13158: PUSH
13159: LD_VAR 0 13
13163: ARRAY
13164: PUSH
13165: LD_INT 1
13167: ARRAY
13168: PPUSH
13169: CALL_OW 263
13173: PUSH
13174: LD_INT 1
13176: EQUAL
13177: IFFALSE 13235
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
13179: LD_VAR 0 24
13183: PUSH
13184: LD_VAR 0 13
13188: ARRAY
13189: PUSH
13190: LD_INT 2
13192: ARRAY
13193: PPUSH
13194: CALL_OW 310
13198: NOT
13199: IFFALSE 13235
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
13201: LD_VAR 0 24
13205: PUSH
13206: LD_VAR 0 13
13210: ARRAY
13211: PUSH
13212: LD_INT 2
13214: ARRAY
13215: PPUSH
13216: LD_VAR 0 24
13220: PUSH
13221: LD_VAR 0 13
13225: ARRAY
13226: PUSH
13227: LD_INT 1
13229: ARRAY
13230: PPUSH
13231: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
13235: LD_VAR 0 24
13239: PUSH
13240: LD_VAR 0 10
13244: LESS
13245: IFFALSE 13287
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
13247: LD_ADDR_VAR 0 24
13251: PUSH
13252: LD_VAR 0 24
13256: PPUSH
13257: LD_VAR 0 13
13261: PUSH
13262: LD_VAR 0 24
13266: PUSH
13267: LD_VAR 0 13
13271: ARRAY
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL 37267 0 3
13284: ST_TO_ADDR
13285: GO 13325
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
13287: LD_ADDR_VAR 0 24
13291: PUSH
13292: LD_VAR 0 24
13296: PPUSH
13297: LD_VAR 0 13
13301: PUSH
13302: LD_VAR 0 24
13306: PUSH
13307: LD_VAR 0 13
13311: ARRAY
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PPUSH
13317: LD_INT 2
13319: PPUSH
13320: CALL 37267 0 3
13324: ST_TO_ADDR
// end else
13325: GO 13414
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13327: LD_VAR 0 24
13331: PUSH
13332: LD_VAR 0 13
13336: ARRAY
13337: PUSH
13338: LD_INT 1
13340: ARRAY
13341: PPUSH
13342: CALL_OW 256
13346: PUSH
13347: LD_INT 650
13349: LESSEQUAL
13350: IFFALSE 13414
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13352: LD_ADDR_VAR 0 24
13356: PUSH
13357: LD_VAR 0 24
13361: PPUSH
13362: LD_VAR 0 13
13366: PUSH
13367: LD_VAR 0 24
13371: PUSH
13372: LD_VAR 0 13
13376: ARRAY
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PPUSH
13382: LD_INT 0
13384: PPUSH
13385: CALL 37267 0 3
13389: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13390: LD_VAR 0 24
13394: PUSH
13395: LD_VAR 0 13
13399: ARRAY
13400: PUSH
13401: LD_INT 1
13403: ARRAY
13404: PPUSH
13405: LD_VAR 0 6
13409: PPUSH
13410: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13414: LD_VAR 0 24
13418: PUSH
13419: LD_VAR 0 13
13423: ARRAY
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: CALL_OW 256
13433: PUSH
13434: LD_INT 250
13436: LESS
13437: IFFALSE 13464
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13439: LD_ADDR_VAR 0 24
13443: PUSH
13444: LD_VAR 0 24
13448: PUSH
13449: LD_VAR 0 24
13453: PUSH
13454: LD_VAR 0 13
13458: ARRAY
13459: PUSH
13460: EMPTY
13461: LIST
13462: DIFF
13463: ST_TO_ADDR
// end ;
13464: GO 13079
13466: POP
13467: POP
// for i := 1 to personel do
13468: LD_ADDR_VAR 0 13
13472: PUSH
13473: DOUBLE
13474: LD_INT 1
13476: DEC
13477: ST_TO_ADDR
13478: LD_VAR 0 18
13482: PUSH
13483: FOR_TO
13484: IFFALSE 13525
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13486: LD_ADDR_VAR 0 19
13490: PUSH
13491: LD_VAR 0 19
13495: PUSH
13496: LD_VAR 0 18
13500: PUSH
13501: LD_VAR 0 13
13505: ARRAY
13506: PPUSH
13507: LD_INT 25
13509: PUSH
13510: LD_INT 1
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PPUSH
13517: CALL_OW 72
13521: ADD
13522: ST_TO_ADDR
13523: GO 13483
13525: POP
13526: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13527: LD_VAR 0 19
13531: PUSH
13532: LD_VAR 0 32
13536: PPUSH
13537: LD_INT 3
13539: PUSH
13540: LD_INT 59
13542: PUSH
13543: EMPTY
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 72
13554: AND
13555: IFFALSE 13843
// begin for i := 1 to personel do
13557: LD_ADDR_VAR 0 13
13561: PUSH
13562: DOUBLE
13563: LD_INT 1
13565: DEC
13566: ST_TO_ADDR
13567: LD_VAR 0 18
13571: PUSH
13572: FOR_TO
13573: IFFALSE 13839
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13575: LD_VAR 0 18
13579: PUSH
13580: LD_VAR 0 13
13584: ARRAY
13585: PUSH
13586: LD_INT 1
13588: ARRAY
13589: PPUSH
13590: CALL_OW 257
13594: PUSH
13595: LD_INT 1
13597: EQUAL
13598: PUSH
13599: LD_VAR 0 18
13603: PUSH
13604: LD_VAR 0 13
13608: ARRAY
13609: PUSH
13610: LD_INT 3
13612: ARRAY
13613: PUSH
13614: LD_INT 1
13616: EQUAL
13617: AND
13618: IFFALSE 13837
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13620: LD_VAR 0 18
13624: PUSH
13625: LD_VAR 0 13
13629: ARRAY
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: CALL_OW 437
13639: IFFALSE 13740
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13641: LD_VAR 0 18
13645: PUSH
13646: LD_VAR 0 13
13650: ARRAY
13651: PUSH
13652: LD_INT 1
13654: ARRAY
13655: PPUSH
13656: CALL_OW 437
13660: PUSH
13661: LD_INT 1
13663: ARRAY
13664: PUSH
13665: LD_INT 1
13667: ARRAY
13668: PUSH
13669: LD_STRING e
13671: EQUAL
13672: PUSH
13673: LD_VAR 0 18
13677: PUSH
13678: LD_VAR 0 13
13682: ARRAY
13683: PUSH
13684: LD_INT 1
13686: ARRAY
13687: PPUSH
13688: CALL_OW 437
13692: PUSH
13693: LD_INT 1
13695: ARRAY
13696: PUSH
13697: LD_INT 4
13699: ARRAY
13700: PPUSH
13701: CALL_OW 266
13705: PUSH
13706: LD_INT 4
13708: PUSH
13709: LD_INT 5
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: IN
13716: AND
13717: IFFALSE 13740
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13719: LD_VAR 0 18
13723: PUSH
13724: LD_VAR 0 13
13728: ARRAY
13729: PUSH
13730: LD_INT 1
13732: ARRAY
13733: PPUSH
13734: EMPTY
13735: PPUSH
13736: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13740: LD_ADDR_VAR 0 36
13744: PUSH
13745: LD_VAR 0 32
13749: PPUSH
13750: LD_INT 3
13752: PUSH
13753: LD_INT 59
13755: PUSH
13756: EMPTY
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 72
13767: PUSH
13768: FOR_IN
13769: IFFALSE 13835
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13771: LD_VAR 0 18
13775: PUSH
13776: LD_VAR 0 13
13780: ARRAY
13781: PUSH
13782: LD_INT 1
13784: ARRAY
13785: PPUSH
13786: CALL_OW 310
13790: PPUSH
13791: CALL_OW 266
13795: PUSH
13796: LD_INT 31
13798: PUSH
13799: LD_INT 32
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: IN
13806: NOT
13807: IFFALSE 13833
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13809: LD_VAR 0 18
13813: PUSH
13814: LD_VAR 0 13
13818: ARRAY
13819: PUSH
13820: LD_INT 1
13822: ARRAY
13823: PPUSH
13824: LD_VAR 0 36
13828: PPUSH
13829: CALL_OW 120
13833: GO 13768
13835: POP
13836: POP
// end ; end ;
13837: GO 13572
13839: POP
13840: POP
// end else
13841: GO 14058
// if soldiers and barracks then
13843: LD_VAR 0 19
13847: PUSH
13848: LD_VAR 0 33
13852: AND
13853: IFFALSE 14058
// for i := 1 to personel do
13855: LD_ADDR_VAR 0 13
13859: PUSH
13860: DOUBLE
13861: LD_INT 1
13863: DEC
13864: ST_TO_ADDR
13865: LD_VAR 0 18
13869: PUSH
13870: FOR_TO
13871: IFFALSE 14056
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13873: LD_VAR 0 18
13877: PUSH
13878: LD_VAR 0 13
13882: ARRAY
13883: PUSH
13884: LD_INT 1
13886: ARRAY
13887: PPUSH
13888: CALL_OW 257
13892: PUSH
13893: LD_INT 1
13895: EQUAL
13896: PUSH
13897: LD_VAR 0 18
13901: PUSH
13902: LD_VAR 0 13
13906: ARRAY
13907: PUSH
13908: LD_INT 3
13910: ARRAY
13911: PUSH
13912: LD_INT 1
13914: EQUAL
13915: AND
13916: PUSH
13917: LD_VAR 0 18
13921: PUSH
13922: LD_VAR 0 13
13926: ARRAY
13927: PUSH
13928: LD_INT 1
13930: ARRAY
13931: PPUSH
13932: LD_INT 56
13934: PUSH
13935: EMPTY
13936: LIST
13937: PPUSH
13938: CALL_OW 72
13942: AND
13943: IFFALSE 14054
// begin if not personel [ i ] [ 2 ] then
13945: LD_VAR 0 18
13949: PUSH
13950: LD_VAR 0 13
13954: ARRAY
13955: PUSH
13956: LD_INT 2
13958: ARRAY
13959: NOT
13960: IFFALSE 14020
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13962: LD_ADDR_VAR 0 18
13966: PUSH
13967: LD_VAR 0 18
13971: PPUSH
13972: LD_VAR 0 13
13976: PUSH
13977: LD_VAR 0 18
13981: PUSH
13982: LD_VAR 0 13
13986: ARRAY
13987: PUSH
13988: LD_INT 1
13990: MINUS
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: LD_VAR 0 33
14000: PUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_VAR 0 33
14008: PPUSH
14009: CALL_OW 12
14013: ARRAY
14014: PPUSH
14015: CALL 37267 0 3
14019: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14020: LD_VAR 0 18
14024: PUSH
14025: LD_VAR 0 13
14029: ARRAY
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: LD_VAR 0 18
14039: PUSH
14040: LD_VAR 0 13
14044: ARRAY
14045: PUSH
14046: LD_INT 2
14048: ARRAY
14049: PPUSH
14050: CALL_OW 120
// end ;
14054: GO 13870
14056: POP
14057: POP
// for i := 1 to personel do
14058: LD_ADDR_VAR 0 13
14062: PUSH
14063: DOUBLE
14064: LD_INT 1
14066: DEC
14067: ST_TO_ADDR
14068: LD_VAR 0 18
14072: PUSH
14073: FOR_TO
14074: IFFALSE 14115
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
14076: LD_ADDR_VAR 0 20
14080: PUSH
14081: LD_VAR 0 20
14085: PUSH
14086: LD_VAR 0 18
14090: PUSH
14091: LD_VAR 0 13
14095: ARRAY
14096: PPUSH
14097: LD_INT 25
14099: PUSH
14100: LD_INT 2
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 72
14111: ADD
14112: ST_TO_ADDR
14113: GO 14073
14115: POP
14116: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14117: LD_VAR 0 20
14121: PUSH
14122: LD_VAR 0 4
14126: PPUSH
14127: LD_INT 22
14129: PUSH
14130: LD_VAR 0 1
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 21
14141: PUSH
14142: LD_INT 3
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 3
14151: PUSH
14152: LD_INT 24
14154: PUSH
14155: LD_INT 1000
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: PPUSH
14171: CALL_OW 70
14175: AND
14176: IFFALSE 14452
// begin for i := 1 to personel do
14178: LD_ADDR_VAR 0 13
14182: PUSH
14183: DOUBLE
14184: LD_INT 1
14186: DEC
14187: ST_TO_ADDR
14188: LD_VAR 0 18
14192: PUSH
14193: FOR_TO
14194: IFFALSE 14448
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14196: LD_VAR 0 18
14200: PUSH
14201: LD_VAR 0 13
14205: ARRAY
14206: PUSH
14207: LD_INT 1
14209: ARRAY
14210: PPUSH
14211: CALL_OW 257
14215: PUSH
14216: LD_INT 2
14218: EQUAL
14219: PUSH
14220: LD_VAR 0 18
14224: PUSH
14225: LD_VAR 0 13
14229: ARRAY
14230: PUSH
14231: LD_INT 3
14233: ARRAY
14234: PUSH
14235: LD_INT 1
14237: EQUAL
14238: AND
14239: IFFALSE 14446
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14241: LD_VAR 0 18
14245: PUSH
14246: LD_VAR 0 13
14250: ARRAY
14251: PUSH
14252: LD_INT 1
14254: ARRAY
14255: PPUSH
14256: CALL_OW 437
14260: IFFALSE 14316
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14262: LD_VAR 0 18
14266: PUSH
14267: LD_VAR 0 13
14271: ARRAY
14272: PUSH
14273: LD_INT 1
14275: ARRAY
14276: PPUSH
14277: CALL_OW 437
14281: PUSH
14282: LD_INT 1
14284: ARRAY
14285: PUSH
14286: LD_INT 1
14288: ARRAY
14289: PUSH
14290: LD_STRING e
14292: EQUAL
14293: IFFALSE 14316
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14295: LD_VAR 0 18
14299: PUSH
14300: LD_VAR 0 13
14304: ARRAY
14305: PUSH
14306: LD_INT 1
14308: ARRAY
14309: PPUSH
14310: EMPTY
14311: PPUSH
14312: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14316: LD_VAR 0 18
14320: PUSH
14321: LD_VAR 0 13
14325: ARRAY
14326: PUSH
14327: LD_INT 1
14329: ARRAY
14330: PPUSH
14331: CALL_OW 310
14335: IFFALSE 14356
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14337: LD_VAR 0 18
14341: PUSH
14342: LD_VAR 0 13
14346: ARRAY
14347: PUSH
14348: LD_INT 1
14350: ARRAY
14351: PPUSH
14352: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14356: LD_ADDR_VAR 0 34
14360: PUSH
14361: LD_VAR 0 4
14365: PPUSH
14366: LD_INT 22
14368: PUSH
14369: LD_VAR 0 1
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: LD_INT 21
14380: PUSH
14381: LD_INT 3
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 3
14390: PUSH
14391: LD_INT 24
14393: PUSH
14394: LD_INT 1000
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 70
14414: PUSH
14415: FOR_IN
14416: IFFALSE 14444
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14418: LD_VAR 0 18
14422: PUSH
14423: LD_VAR 0 13
14427: ARRAY
14428: PUSH
14429: LD_INT 1
14431: ARRAY
14432: PPUSH
14433: LD_VAR 0 34
14437: PPUSH
14438: CALL_OW 190
14442: GO 14415
14444: POP
14445: POP
// end ;
14446: GO 14193
14448: POP
14449: POP
// end else
14450: GO 14714
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14452: LD_VAR 0 20
14456: PUSH
14457: LD_VAR 0 20
14461: PPUSH
14462: LD_INT 56
14464: PUSH
14465: EMPTY
14466: LIST
14467: PPUSH
14468: CALL_OW 72
14472: AND
14473: PUSH
14474: LD_VAR 0 29
14478: AND
14479: IFFALSE 14714
// for i := 1 to personel do
14481: LD_ADDR_VAR 0 13
14485: PUSH
14486: DOUBLE
14487: LD_INT 1
14489: DEC
14490: ST_TO_ADDR
14491: LD_VAR 0 18
14495: PUSH
14496: FOR_TO
14497: IFFALSE 14712
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14499: LD_VAR 0 18
14503: PUSH
14504: LD_VAR 0 13
14508: ARRAY
14509: PUSH
14510: LD_INT 1
14512: ARRAY
14513: PPUSH
14514: CALL_OW 257
14518: PUSH
14519: LD_INT 2
14521: EQUAL
14522: PUSH
14523: LD_VAR 0 18
14527: PUSH
14528: LD_VAR 0 13
14532: ARRAY
14533: PUSH
14534: LD_INT 3
14536: ARRAY
14537: PUSH
14538: LD_INT 1
14540: EQUAL
14541: AND
14542: IFFALSE 14710
// begin if not personel [ i ] [ 2 ] then
14544: LD_VAR 0 18
14548: PUSH
14549: LD_VAR 0 13
14553: ARRAY
14554: PUSH
14555: LD_INT 2
14557: ARRAY
14558: NOT
14559: IFFALSE 14676
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14561: LD_ADDR_VAR 0 18
14565: PUSH
14566: LD_VAR 0 18
14570: PPUSH
14571: LD_VAR 0 13
14575: PUSH
14576: LD_VAR 0 18
14580: PUSH
14581: LD_VAR 0 13
14585: ARRAY
14586: PUSH
14587: LD_INT 1
14589: MINUS
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PPUSH
14595: LD_VAR 0 4
14599: PPUSH
14600: LD_INT 22
14602: PUSH
14603: LD_VAR 0 1
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 21
14614: PUSH
14615: LD_INT 3
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 50
14624: PUSH
14625: EMPTY
14626: LIST
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 0
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 30
14643: PUSH
14644: LD_INT 1
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: LIST
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: PPUSH
14662: CALL_OW 70
14666: PUSH
14667: LD_INT 1
14669: ARRAY
14670: PPUSH
14671: CALL 37267 0 3
14675: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14676: LD_VAR 0 18
14680: PUSH
14681: LD_VAR 0 13
14685: ARRAY
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 18
14695: PUSH
14696: LD_VAR 0 13
14700: ARRAY
14701: PUSH
14702: LD_INT 2
14704: ARRAY
14705: PPUSH
14706: CALL_OW 120
// end ; end ;
14710: GO 14496
14712: POP
14713: POP
// for i := 1 to personel do
14714: LD_ADDR_VAR 0 13
14718: PUSH
14719: DOUBLE
14720: LD_INT 1
14722: DEC
14723: ST_TO_ADDR
14724: LD_VAR 0 18
14728: PUSH
14729: FOR_TO
14730: IFFALSE 14771
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14732: LD_ADDR_VAR 0 21
14736: PUSH
14737: LD_VAR 0 21
14741: PUSH
14742: LD_VAR 0 18
14746: PUSH
14747: LD_VAR 0 13
14751: ARRAY
14752: PPUSH
14753: LD_INT 25
14755: PUSH
14756: LD_INT 3
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 72
14767: ADD
14768: ST_TO_ADDR
14769: GO 14729
14771: POP
14772: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14773: LD_VAR 0 21
14777: PUSH
14778: LD_VAR 0 4
14782: PPUSH
14783: LD_INT 22
14785: PUSH
14786: LD_VAR 0 1
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 21
14797: PUSH
14798: LD_INT 2
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 3
14807: PUSH
14808: LD_INT 24
14810: PUSH
14811: LD_INT 1000
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: PPUSH
14827: CALL_OW 70
14831: AND
14832: IFFALSE 15436
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14834: LD_ADDR_VAR 0 35
14838: PUSH
14839: LD_VAR 0 4
14843: PPUSH
14844: LD_INT 22
14846: PUSH
14847: LD_VAR 0 1
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 2
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 3
14868: PUSH
14869: LD_INT 24
14871: PUSH
14872: LD_INT 1000
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: LIST
14887: PPUSH
14888: CALL_OW 70
14892: PUSH
14893: FOR_IN
14894: IFFALSE 15432
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14896: LD_VAR 0 35
14900: PPUSH
14901: LD_VAR 0 6
14905: PPUSH
14906: CALL_OW 299
14910: PUSH
14911: LD_INT 5
14913: LESS
14914: IFFALSE 15209
// begin for i := 1 to vehicles do
14916: LD_ADDR_VAR 0 13
14920: PUSH
14921: DOUBLE
14922: LD_INT 1
14924: DEC
14925: ST_TO_ADDR
14926: LD_VAR 0 24
14930: PUSH
14931: FOR_TO
14932: IFFALSE 15001
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14934: LD_VAR 0 24
14938: PUSH
14939: LD_VAR 0 13
14943: ARRAY
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PUSH
14949: LD_VAR 0 35
14953: EQUAL
14954: IFFALSE 14975
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14956: LD_VAR 0 24
14960: PUSH
14961: LD_VAR 0 13
14965: ARRAY
14966: PUSH
14967: LD_INT 2
14969: ARRAY
14970: PPUSH
14971: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14975: LD_VAR 0 24
14979: PUSH
14980: LD_VAR 0 13
14984: ARRAY
14985: PUSH
14986: LD_INT 2
14988: ARRAY
14989: PPUSH
14990: LD_VAR 0 35
14994: PPUSH
14995: CALL_OW 189
// end ;
14999: GO 14931
15001: POP
15002: POP
// for i := 1 to personel do
15003: LD_ADDR_VAR 0 13
15007: PUSH
15008: DOUBLE
15009: LD_INT 1
15011: DEC
15012: ST_TO_ADDR
15013: LD_VAR 0 18
15017: PUSH
15018: FOR_TO
15019: IFFALSE 15207
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15021: LD_VAR 0 18
15025: PUSH
15026: LD_VAR 0 13
15030: ARRAY
15031: PUSH
15032: LD_INT 1
15034: ARRAY
15035: PPUSH
15036: CALL_OW 257
15040: PUSH
15041: LD_INT 3
15043: EQUAL
15044: PUSH
15045: LD_VAR 0 18
15049: PUSH
15050: LD_VAR 0 13
15054: ARRAY
15055: PUSH
15056: LD_INT 3
15058: ARRAY
15059: PUSH
15060: LD_INT 1
15062: EQUAL
15063: AND
15064: IFFALSE 15205
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15066: LD_VAR 0 18
15070: PUSH
15071: LD_VAR 0 13
15075: ARRAY
15076: PUSH
15077: LD_INT 1
15079: ARRAY
15080: PPUSH
15081: CALL_OW 437
15085: IFFALSE 15141
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15087: LD_VAR 0 18
15091: PUSH
15092: LD_VAR 0 13
15096: ARRAY
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: PPUSH
15102: CALL_OW 437
15106: PUSH
15107: LD_INT 1
15109: ARRAY
15110: PUSH
15111: LD_INT 1
15113: ARRAY
15114: PUSH
15115: LD_STRING e
15117: EQUAL
15118: IFFALSE 15141
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15120: LD_VAR 0 18
15124: PUSH
15125: LD_VAR 0 13
15129: ARRAY
15130: PUSH
15131: LD_INT 1
15133: ARRAY
15134: PPUSH
15135: EMPTY
15136: PPUSH
15137: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15141: LD_VAR 0 18
15145: PUSH
15146: LD_VAR 0 13
15150: ARRAY
15151: PUSH
15152: LD_INT 1
15154: ARRAY
15155: PPUSH
15156: CALL_OW 310
15160: IFFALSE 15181
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15162: LD_VAR 0 18
15166: PUSH
15167: LD_VAR 0 13
15171: ARRAY
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: PPUSH
15177: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15181: LD_VAR 0 18
15185: PUSH
15186: LD_VAR 0 13
15190: ARRAY
15191: PUSH
15192: LD_INT 1
15194: ARRAY
15195: PPUSH
15196: LD_VAR 0 35
15200: PPUSH
15201: CALL_OW 189
// end ;
15205: GO 15018
15207: POP
15208: POP
// end ; if GetLives ( damageUnit ) < 250 then
15209: LD_VAR 0 35
15213: PPUSH
15214: CALL_OW 256
15218: PUSH
15219: LD_INT 250
15221: LESS
15222: IFFALSE 15430
// for i := 1 to personel do
15224: LD_ADDR_VAR 0 13
15228: PUSH
15229: DOUBLE
15230: LD_INT 1
15232: DEC
15233: ST_TO_ADDR
15234: LD_VAR 0 18
15238: PUSH
15239: FOR_TO
15240: IFFALSE 15428
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15242: LD_VAR 0 18
15246: PUSH
15247: LD_VAR 0 13
15251: ARRAY
15252: PUSH
15253: LD_INT 1
15255: ARRAY
15256: PPUSH
15257: CALL_OW 257
15261: PUSH
15262: LD_INT 3
15264: EQUAL
15265: PUSH
15266: LD_VAR 0 18
15270: PUSH
15271: LD_VAR 0 13
15275: ARRAY
15276: PUSH
15277: LD_INT 3
15279: ARRAY
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: AND
15285: IFFALSE 15426
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15287: LD_VAR 0 18
15291: PUSH
15292: LD_VAR 0 13
15296: ARRAY
15297: PUSH
15298: LD_INT 1
15300: ARRAY
15301: PPUSH
15302: CALL_OW 437
15306: IFFALSE 15362
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15308: LD_VAR 0 18
15312: PUSH
15313: LD_VAR 0 13
15317: ARRAY
15318: PUSH
15319: LD_INT 1
15321: ARRAY
15322: PPUSH
15323: CALL_OW 437
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PUSH
15332: LD_INT 1
15334: ARRAY
15335: PUSH
15336: LD_STRING e
15338: EQUAL
15339: IFFALSE 15362
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15341: LD_VAR 0 18
15345: PUSH
15346: LD_VAR 0 13
15350: ARRAY
15351: PUSH
15352: LD_INT 1
15354: ARRAY
15355: PPUSH
15356: EMPTY
15357: PPUSH
15358: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15362: LD_VAR 0 18
15366: PUSH
15367: LD_VAR 0 13
15371: ARRAY
15372: PUSH
15373: LD_INT 1
15375: ARRAY
15376: PPUSH
15377: CALL_OW 310
15381: IFFALSE 15402
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15383: LD_VAR 0 18
15387: PUSH
15388: LD_VAR 0 13
15392: ARRAY
15393: PUSH
15394: LD_INT 1
15396: ARRAY
15397: PPUSH
15398: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15402: LD_VAR 0 18
15406: PUSH
15407: LD_VAR 0 13
15411: ARRAY
15412: PUSH
15413: LD_INT 1
15415: ARRAY
15416: PPUSH
15417: LD_VAR 0 35
15421: PPUSH
15422: CALL_OW 189
// end ;
15426: GO 15239
15428: POP
15429: POP
// end ;
15430: GO 14893
15432: POP
15433: POP
// end else
15434: GO 15641
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15436: LD_VAR 0 21
15440: PUSH
15441: LD_VAR 0 21
15445: PPUSH
15446: LD_INT 56
15448: PUSH
15449: EMPTY
15450: LIST
15451: PPUSH
15452: CALL_OW 72
15456: AND
15457: PUSH
15458: LD_VAR 0 30
15462: AND
15463: IFFALSE 15641
// for i := 1 to personel do
15465: LD_ADDR_VAR 0 13
15469: PUSH
15470: DOUBLE
15471: LD_INT 1
15473: DEC
15474: ST_TO_ADDR
15475: LD_VAR 0 18
15479: PUSH
15480: FOR_TO
15481: IFFALSE 15639
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15483: LD_VAR 0 18
15487: PUSH
15488: LD_VAR 0 13
15492: ARRAY
15493: PUSH
15494: LD_INT 1
15496: ARRAY
15497: PPUSH
15498: CALL_OW 257
15502: PUSH
15503: LD_INT 3
15505: EQUAL
15506: PUSH
15507: LD_VAR 0 18
15511: PUSH
15512: LD_VAR 0 13
15516: ARRAY
15517: PUSH
15518: LD_INT 3
15520: ARRAY
15521: PUSH
15522: LD_INT 1
15524: EQUAL
15525: AND
15526: IFFALSE 15637
// begin if not personel [ i ] [ 2 ] then
15528: LD_VAR 0 18
15532: PUSH
15533: LD_VAR 0 13
15537: ARRAY
15538: PUSH
15539: LD_INT 2
15541: ARRAY
15542: NOT
15543: IFFALSE 15603
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15545: LD_ADDR_VAR 0 18
15549: PUSH
15550: LD_VAR 0 18
15554: PPUSH
15555: LD_VAR 0 13
15559: PUSH
15560: LD_VAR 0 18
15564: PUSH
15565: LD_VAR 0 13
15569: ARRAY
15570: PUSH
15571: LD_INT 1
15573: MINUS
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PPUSH
15579: LD_VAR 0 30
15583: PUSH
15584: LD_INT 1
15586: PPUSH
15587: LD_VAR 0 30
15591: PPUSH
15592: CALL_OW 12
15596: ARRAY
15597: PPUSH
15598: CALL 37267 0 3
15602: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15603: LD_VAR 0 18
15607: PUSH
15608: LD_VAR 0 13
15612: ARRAY
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: LD_VAR 0 18
15622: PUSH
15623: LD_VAR 0 13
15627: ARRAY
15628: PUSH
15629: LD_INT 2
15631: ARRAY
15632: PPUSH
15633: CALL_OW 120
// end ;
15637: GO 15480
15639: POP
15640: POP
// for i := 1 to personel do
15641: LD_ADDR_VAR 0 13
15645: PUSH
15646: DOUBLE
15647: LD_INT 1
15649: DEC
15650: ST_TO_ADDR
15651: LD_VAR 0 18
15655: PUSH
15656: FOR_TO
15657: IFFALSE 15698
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15659: LD_ADDR_VAR 0 22
15663: PUSH
15664: LD_VAR 0 22
15668: PUSH
15669: LD_VAR 0 18
15673: PUSH
15674: LD_VAR 0 13
15678: ARRAY
15679: PPUSH
15680: LD_INT 25
15682: PUSH
15683: LD_INT 4
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 72
15694: ADD
15695: ST_TO_ADDR
15696: GO 15656
15698: POP
15699: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15700: LD_VAR 0 22
15704: PUSH
15705: LD_VAR 0 4
15709: PPUSH
15710: LD_INT 22
15712: PUSH
15713: LD_VAR 0 1
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 21
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 3
15734: PUSH
15735: LD_INT 24
15737: PUSH
15738: LD_INT 1000
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: PPUSH
15754: CALL_OW 70
15758: AND
15759: IFFALSE 16276
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15761: LD_ADDR_VAR 0 35
15765: PUSH
15766: LD_VAR 0 4
15770: PPUSH
15771: LD_INT 22
15773: PUSH
15774: LD_VAR 0 1
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 21
15785: PUSH
15786: LD_INT 1
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 3
15795: PUSH
15796: LD_INT 24
15798: PUSH
15799: LD_INT 1000
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 70
15819: PUSH
15820: FOR_IN
15821: IFFALSE 16272
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15823: LD_VAR 0 35
15827: PPUSH
15828: LD_VAR 0 5
15832: PPUSH
15833: CALL_OW 299
15837: PUSH
15838: LD_INT 5
15840: LESS
15841: IFFALSE 16049
// for i := 1 to personel do
15843: LD_ADDR_VAR 0 13
15847: PUSH
15848: DOUBLE
15849: LD_INT 1
15851: DEC
15852: ST_TO_ADDR
15853: LD_VAR 0 18
15857: PUSH
15858: FOR_TO
15859: IFFALSE 16047
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15861: LD_VAR 0 18
15865: PUSH
15866: LD_VAR 0 13
15870: ARRAY
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PPUSH
15876: CALL_OW 257
15880: PUSH
15881: LD_INT 4
15883: EQUAL
15884: PUSH
15885: LD_VAR 0 18
15889: PUSH
15890: LD_VAR 0 13
15894: ARRAY
15895: PUSH
15896: LD_INT 3
15898: ARRAY
15899: PUSH
15900: LD_INT 1
15902: EQUAL
15903: AND
15904: IFFALSE 16045
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15906: LD_VAR 0 18
15910: PUSH
15911: LD_VAR 0 13
15915: ARRAY
15916: PUSH
15917: LD_INT 1
15919: ARRAY
15920: PPUSH
15921: CALL_OW 437
15925: IFFALSE 15981
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15927: LD_VAR 0 18
15931: PUSH
15932: LD_VAR 0 13
15936: ARRAY
15937: PUSH
15938: LD_INT 1
15940: ARRAY
15941: PPUSH
15942: CALL_OW 437
15946: PUSH
15947: LD_INT 1
15949: ARRAY
15950: PUSH
15951: LD_INT 1
15953: ARRAY
15954: PUSH
15955: LD_STRING e
15957: EQUAL
15958: IFFALSE 15981
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15960: LD_VAR 0 18
15964: PUSH
15965: LD_VAR 0 13
15969: ARRAY
15970: PUSH
15971: LD_INT 1
15973: ARRAY
15974: PPUSH
15975: EMPTY
15976: PPUSH
15977: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15981: LD_VAR 0 18
15985: PUSH
15986: LD_VAR 0 13
15990: ARRAY
15991: PUSH
15992: LD_INT 1
15994: ARRAY
15995: PPUSH
15996: CALL_OW 310
16000: IFFALSE 16021
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16002: LD_VAR 0 18
16006: PUSH
16007: LD_VAR 0 13
16011: ARRAY
16012: PUSH
16013: LD_INT 1
16015: ARRAY
16016: PPUSH
16017: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16021: LD_VAR 0 18
16025: PUSH
16026: LD_VAR 0 13
16030: ARRAY
16031: PUSH
16032: LD_INT 1
16034: ARRAY
16035: PPUSH
16036: LD_VAR 0 35
16040: PPUSH
16041: CALL_OW 188
// end ;
16045: GO 15858
16047: POP
16048: POP
// if GetLives ( damageUnit ) < 250 then
16049: LD_VAR 0 35
16053: PPUSH
16054: CALL_OW 256
16058: PUSH
16059: LD_INT 250
16061: LESS
16062: IFFALSE 16270
// for i := 1 to personel do
16064: LD_ADDR_VAR 0 13
16068: PUSH
16069: DOUBLE
16070: LD_INT 1
16072: DEC
16073: ST_TO_ADDR
16074: LD_VAR 0 18
16078: PUSH
16079: FOR_TO
16080: IFFALSE 16268
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16082: LD_VAR 0 18
16086: PUSH
16087: LD_VAR 0 13
16091: ARRAY
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PPUSH
16097: CALL_OW 257
16101: PUSH
16102: LD_INT 4
16104: EQUAL
16105: PUSH
16106: LD_VAR 0 18
16110: PUSH
16111: LD_VAR 0 13
16115: ARRAY
16116: PUSH
16117: LD_INT 3
16119: ARRAY
16120: PUSH
16121: LD_INT 1
16123: EQUAL
16124: AND
16125: IFFALSE 16266
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
16127: LD_VAR 0 18
16131: PUSH
16132: LD_VAR 0 13
16136: ARRAY
16137: PUSH
16138: LD_INT 1
16140: ARRAY
16141: PPUSH
16142: CALL_OW 437
16146: IFFALSE 16202
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
16148: LD_VAR 0 18
16152: PUSH
16153: LD_VAR 0 13
16157: ARRAY
16158: PUSH
16159: LD_INT 1
16161: ARRAY
16162: PPUSH
16163: CALL_OW 437
16167: PUSH
16168: LD_INT 1
16170: ARRAY
16171: PUSH
16172: LD_INT 1
16174: ARRAY
16175: PUSH
16176: LD_STRING e
16178: EQUAL
16179: IFFALSE 16202
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
16181: LD_VAR 0 18
16185: PUSH
16186: LD_VAR 0 13
16190: ARRAY
16191: PUSH
16192: LD_INT 1
16194: ARRAY
16195: PPUSH
16196: EMPTY
16197: PPUSH
16198: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
16202: LD_VAR 0 18
16206: PUSH
16207: LD_VAR 0 13
16211: ARRAY
16212: PUSH
16213: LD_INT 1
16215: ARRAY
16216: PPUSH
16217: CALL_OW 310
16221: IFFALSE 16242
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16223: LD_VAR 0 18
16227: PUSH
16228: LD_VAR 0 13
16232: ARRAY
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PPUSH
16238: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16242: LD_VAR 0 18
16246: PUSH
16247: LD_VAR 0 13
16251: ARRAY
16252: PUSH
16253: LD_INT 1
16255: ARRAY
16256: PPUSH
16257: LD_VAR 0 35
16261: PPUSH
16262: CALL_OW 188
// end ;
16266: GO 16079
16268: POP
16269: POP
// end ;
16270: GO 15820
16272: POP
16273: POP
// end else
16274: GO 16481
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
16276: LD_VAR 0 22
16280: PUSH
16281: LD_VAR 0 22
16285: PPUSH
16286: LD_INT 56
16288: PUSH
16289: EMPTY
16290: LIST
16291: PPUSH
16292: CALL_OW 72
16296: AND
16297: PUSH
16298: LD_VAR 0 31
16302: AND
16303: IFFALSE 16481
// for i := 1 to personel do
16305: LD_ADDR_VAR 0 13
16309: PUSH
16310: DOUBLE
16311: LD_INT 1
16313: DEC
16314: ST_TO_ADDR
16315: LD_VAR 0 18
16319: PUSH
16320: FOR_TO
16321: IFFALSE 16479
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16323: LD_VAR 0 18
16327: PUSH
16328: LD_VAR 0 13
16332: ARRAY
16333: PUSH
16334: LD_INT 1
16336: ARRAY
16337: PPUSH
16338: CALL_OW 257
16342: PUSH
16343: LD_INT 4
16345: EQUAL
16346: PUSH
16347: LD_VAR 0 18
16351: PUSH
16352: LD_VAR 0 13
16356: ARRAY
16357: PUSH
16358: LD_INT 3
16360: ARRAY
16361: PUSH
16362: LD_INT 1
16364: EQUAL
16365: AND
16366: IFFALSE 16477
// begin if not personel [ i ] [ 2 ] then
16368: LD_VAR 0 18
16372: PUSH
16373: LD_VAR 0 13
16377: ARRAY
16378: PUSH
16379: LD_INT 2
16381: ARRAY
16382: NOT
16383: IFFALSE 16443
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16385: LD_ADDR_VAR 0 18
16389: PUSH
16390: LD_VAR 0 18
16394: PPUSH
16395: LD_VAR 0 13
16399: PUSH
16400: LD_VAR 0 18
16404: PUSH
16405: LD_VAR 0 13
16409: ARRAY
16410: PUSH
16411: LD_INT 1
16413: MINUS
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PPUSH
16419: LD_VAR 0 31
16423: PUSH
16424: LD_INT 1
16426: PPUSH
16427: LD_VAR 0 31
16431: PPUSH
16432: CALL_OW 12
16436: ARRAY
16437: PPUSH
16438: CALL 37267 0 3
16442: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16443: LD_VAR 0 18
16447: PUSH
16448: LD_VAR 0 13
16452: ARRAY
16453: PUSH
16454: LD_INT 1
16456: ARRAY
16457: PPUSH
16458: LD_VAR 0 18
16462: PUSH
16463: LD_VAR 0 13
16467: ARRAY
16468: PUSH
16469: LD_INT 2
16471: ARRAY
16472: PPUSH
16473: CALL_OW 120
// end ;
16477: GO 16320
16479: POP
16480: POP
// wait ( 0 0$01 ) ;
16481: LD_INT 35
16483: PPUSH
16484: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16488: LD_VAR 0 24
16492: PUSH
16493: LD_VAR 0 8
16497: LESS
16498: PUSH
16499: LD_VAR 0 30
16503: AND
16504: IFFALSE 16754
// begin tmp = vehiclesAmount - vehicles ;
16506: LD_ADDR_VAR 0 15
16510: PUSH
16511: LD_VAR 0 8
16515: PUSH
16516: LD_VAR 0 24
16520: MINUS
16521: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16522: LD_ADDR_VAR 0 27
16526: PUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: LD_VAR 0 2
16536: PPUSH
16537: CALL 7801 0 2
16541: ST_TO_ADDR
// for i := 1 to tmp do
16542: LD_ADDR_VAR 0 13
16546: PUSH
16547: DOUBLE
16548: LD_INT 1
16550: DEC
16551: ST_TO_ADDR
16552: LD_VAR 0 15
16556: PUSH
16557: FOR_TO
16558: IFFALSE 16750
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16560: LD_ADDR_VAR 0 15
16564: PUSH
16565: LD_VAR 0 27
16569: PUSH
16570: LD_INT 1
16572: PPUSH
16573: LD_VAR 0 27
16577: PPUSH
16578: CALL_OW 12
16582: ARRAY
16583: ST_TO_ADDR
// if tmp then
16584: LD_VAR 0 15
16588: IFFALSE 16748
// begin if tmp in [ 34 , 14 , 71 ] then
16590: LD_VAR 0 15
16594: PUSH
16595: LD_INT 34
16597: PUSH
16598: LD_INT 14
16600: PUSH
16601: LD_INT 71
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: IN
16609: IFFALSE 16647
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16611: LD_ADDR_VAR 0 28
16615: PUSH
16616: LD_INT 4
16618: PUSH
16619: EMPTY
16620: LIST
16621: PUSH
16622: LD_INT 14
16624: PUSH
16625: EMPTY
16626: LIST
16627: PUSH
16628: LD_INT 24
16630: PUSH
16631: EMPTY
16632: LIST
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: PUSH
16639: LD_VAR 0 2
16643: ARRAY
16644: ST_TO_ADDR
16645: GO 16705
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16647: LD_ADDR_VAR 0 28
16651: PUSH
16652: LD_INT 2
16654: PUSH
16655: LD_INT 3
16657: PUSH
16658: LD_INT 4
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 13
16668: PUSH
16669: LD_INT 14
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 21
16678: PUSH
16679: LD_INT 23
16681: PUSH
16682: LD_INT 24
16684: PUSH
16685: LD_INT 22
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: LIST
16698: PUSH
16699: LD_VAR 0 2
16703: ARRAY
16704: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16705: LD_VAR 0 30
16709: PUSH
16710: LD_INT 1
16712: ARRAY
16713: PPUSH
16714: LD_VAR 0 28
16718: PUSH
16719: LD_INT 1
16721: PPUSH
16722: LD_VAR 0 28
16726: PPUSH
16727: CALL_OW 12
16731: ARRAY
16732: PPUSH
16733: LD_INT 1
16735: PPUSH
16736: LD_INT 1
16738: PPUSH
16739: LD_VAR 0 15
16743: PPUSH
16744: CALL_OW 185
// end ; end ;
16748: GO 16557
16750: POP
16751: POP
// end else
16752: GO 16767
// ComCancel ( factory [ 1 ] ) ;
16754: LD_VAR 0 30
16758: PUSH
16759: LD_INT 1
16761: ARRAY
16762: PPUSH
16763: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16767: LD_ADDR_VAR 0 23
16771: PUSH
16772: LD_VAR 0 4
16776: PPUSH
16777: LD_INT 22
16779: PUSH
16780: LD_VAR 0 1
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 21
16791: PUSH
16792: LD_INT 2
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PPUSH
16803: CALL_OW 70
16807: PUSH
16808: FOR_IN
16809: IFFALSE 16979
// begin vehicleInList = false ;
16811: LD_ADDR_VAR 0 25
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// for i := 1 to vehicles do
16819: LD_ADDR_VAR 0 13
16823: PUSH
16824: DOUBLE
16825: LD_INT 1
16827: DEC
16828: ST_TO_ADDR
16829: LD_VAR 0 24
16833: PUSH
16834: FOR_TO
16835: IFFALSE 16865
// begin if vehicle in vehicles [ i ] then
16837: LD_VAR 0 23
16841: PUSH
16842: LD_VAR 0 24
16846: PUSH
16847: LD_VAR 0 13
16851: ARRAY
16852: IN
16853: IFFALSE 16863
// vehicleInList = true ;
16855: LD_ADDR_VAR 0 25
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// end ;
16863: GO 16834
16865: POP
16866: POP
// if not vehicleInList then
16867: LD_VAR 0 25
16871: NOT
16872: IFFALSE 16977
// if vehicles < vehiclesToAttackAmount then
16874: LD_VAR 0 24
16878: PUSH
16879: LD_VAR 0 10
16883: LESS
16884: IFFALSE 16936
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16886: LD_ADDR_VAR 0 24
16890: PUSH
16891: LD_VAR 0 24
16895: PUSH
16896: LD_VAR 0 23
16900: PUSH
16901: LD_VAR 0 23
16905: PPUSH
16906: CALL_OW 313
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: PUSH
16915: LD_VAR 0 23
16919: PPUSH
16920: CALL_OW 302
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: ADD
16933: ST_TO_ADDR
16934: GO 16977
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16936: LD_ADDR_VAR 0 24
16940: PUSH
16941: LD_VAR 0 24
16945: PUSH
16946: LD_VAR 0 23
16950: PUSH
16951: LD_VAR 0 23
16955: PPUSH
16956: CALL_OW 313
16960: PUSH
16961: LD_INT 1
16963: ARRAY
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: LIST
16972: PUSH
16973: EMPTY
16974: LIST
16975: ADD
16976: ST_TO_ADDR
// end ;
16977: GO 16808
16979: POP
16980: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16981: LD_ADDR_VAR 0 37
16985: PUSH
16986: LD_VAR 0 7
16990: PPUSH
16991: LD_INT 81
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PPUSH
17003: CALL_OW 70
17007: PUSH
17008: FOR_IN
17009: IFFALSE 17188
// begin defenceUnits = [ ] ;
17011: LD_ADDR_VAR 0 26
17015: PUSH
17016: EMPTY
17017: ST_TO_ADDR
// for i := 1 to personel do
17018: LD_ADDR_VAR 0 13
17022: PUSH
17023: DOUBLE
17024: LD_INT 1
17026: DEC
17027: ST_TO_ADDR
17028: LD_VAR 0 18
17032: PUSH
17033: FOR_TO
17034: IFFALSE 17084
// if personel [ i ] [ 3 ] = 2 then
17036: LD_VAR 0 18
17040: PUSH
17041: LD_VAR 0 13
17045: ARRAY
17046: PUSH
17047: LD_INT 3
17049: ARRAY
17050: PUSH
17051: LD_INT 2
17053: EQUAL
17054: IFFALSE 17082
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
17056: LD_ADDR_VAR 0 26
17060: PUSH
17061: LD_VAR 0 26
17065: PUSH
17066: LD_VAR 0 18
17070: PUSH
17071: LD_VAR 0 13
17075: ARRAY
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: ADD
17081: ST_TO_ADDR
17082: GO 17033
17084: POP
17085: POP
// for i := 1 to vehicles do
17086: LD_ADDR_VAR 0 13
17090: PUSH
17091: DOUBLE
17092: LD_INT 1
17094: DEC
17095: ST_TO_ADDR
17096: LD_VAR 0 24
17100: PUSH
17101: FOR_TO
17102: IFFALSE 17152
// if vehicles [ i ] [ 3 ] = 2 then
17104: LD_VAR 0 24
17108: PUSH
17109: LD_VAR 0 13
17113: ARRAY
17114: PUSH
17115: LD_INT 3
17117: ARRAY
17118: PUSH
17119: LD_INT 2
17121: EQUAL
17122: IFFALSE 17150
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
17124: LD_ADDR_VAR 0 26
17128: PUSH
17129: LD_VAR 0 26
17133: PUSH
17134: LD_VAR 0 24
17138: PUSH
17139: LD_VAR 0 13
17143: ARRAY
17144: PUSH
17145: LD_INT 1
17147: ARRAY
17148: ADD
17149: ST_TO_ADDR
17150: GO 17101
17152: POP
17153: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
17154: LD_VAR 0 26
17158: PPUSH
17159: LD_INT 3
17161: PUSH
17162: LD_INT 60
17164: PUSH
17165: EMPTY
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 72
17176: PPUSH
17177: LD_VAR 0 37
17181: PPUSH
17182: CALL_OW 175
// end ;
17186: GO 17008
17188: POP
17189: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17190: LD_ADDR_VAR 0 38
17194: PUSH
17195: LD_INT 22
17197: PUSH
17198: LD_VAR 0 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 2
17209: PUSH
17210: LD_INT 30
17212: PUSH
17213: LD_INT 31
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 30
17222: PUSH
17223: LD_INT 32
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 30
17232: PUSH
17233: LD_INT 33
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 30
17242: PUSH
17243: LD_INT 4
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: LD_INT 5
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PPUSH
17272: CALL_OW 69
17276: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
17277: LD_ADDR_VAR 0 39
17281: PUSH
17282: LD_INT 81
17284: PUSH
17285: LD_VAR 0 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 21
17296: PUSH
17297: LD_INT 3
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 58
17306: PUSH
17307: EMPTY
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
17320: LD_VAR 0 38
17324: PUSH
17325: LD_VAR 0 39
17329: AND
17330: IFFALSE 17400
// for i in attackBuildings do
17332: LD_ADDR_VAR 0 13
17336: PUSH
17337: LD_VAR 0 38
17341: PUSH
17342: FOR_IN
17343: IFFALSE 17398
// for j in enemyBuildings do
17345: LD_ADDR_VAR 0 14
17349: PUSH
17350: LD_VAR 0 39
17354: PUSH
17355: FOR_IN
17356: IFFALSE 17394
// if GetDistUnits ( i , j ) < 12 then
17358: LD_VAR 0 13
17362: PPUSH
17363: LD_VAR 0 14
17367: PPUSH
17368: CALL_OW 296
17372: PUSH
17373: LD_INT 12
17375: LESS
17376: IFFALSE 17392
// ComAttackUnit ( i , j ) ;
17378: LD_VAR 0 13
17382: PPUSH
17383: LD_VAR 0 14
17387: PPUSH
17388: CALL_OW 115
17392: GO 17355
17394: POP
17395: POP
17396: GO 17342
17398: POP
17399: POP
// until not personel or not enableOmicronAI ;
17400: LD_VAR 0 18
17404: NOT
17405: PUSH
17406: LD_EXP 30
17410: NOT
17411: OR
17412: IFFALSE 12416
// end ;
17414: LD_VAR 0 12
17418: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17419: LD_INT 0
17421: PPUSH
17422: PPUSH
17423: PPUSH
// weapons = [ ru_gun ] ;
17424: LD_ADDR_VAR 0 3
17428: PUSH
17429: LD_INT 44
17431: PUSH
17432: EMPTY
17433: LIST
17434: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17435: LD_ADDR_VAR 0 2
17439: PUSH
17440: LD_EXP 73
17444: PUSH
17445: FOR_IN
17446: IFFALSE 17478
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17448: LD_VAR 0 2
17452: PPUSH
17453: LD_VAR 0 3
17457: PUSH
17458: LD_INT 1
17460: PPUSH
17461: LD_VAR 0 3
17465: PPUSH
17466: CALL_OW 12
17470: ARRAY
17471: PPUSH
17472: CALL_OW 208
17476: GO 17445
17478: POP
17479: POP
// end ;
17480: LD_VAR 0 1
17484: RET
// export function KirovProduceVehicles ( factory ) ; begin
17485: LD_INT 0
17487: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17488: LD_VAR 0 1
17492: PPUSH
17493: LD_INT 21
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: LD_INT 1
17501: PPUSH
17502: LD_INT 51
17504: PPUSH
17505: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17509: LD_VAR 0 1
17513: PPUSH
17514: LD_INT 21
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: LD_INT 1
17522: PPUSH
17523: LD_INT 51
17525: PPUSH
17526: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17530: LD_VAR 0 1
17534: PPUSH
17535: LD_INT 21
17537: PPUSH
17538: LD_INT 1
17540: PPUSH
17541: LD_INT 1
17543: PPUSH
17544: LD_INT 51
17546: PPUSH
17547: CALL_OW 185
// case Difficulty of 1 :
17551: LD_OWVAR 67
17555: PUSH
17556: LD_INT 1
17558: DOUBLE
17559: EQUAL
17560: IFTRUE 17564
17562: GO 17687
17564: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17565: LD_VAR 0 1
17569: PPUSH
17570: LD_INT 21
17572: PUSH
17573: LD_INT 23
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 1
17582: PPUSH
17583: LD_INT 2
17585: PPUSH
17586: CALL_OW 12
17590: ARRAY
17591: PPUSH
17592: LD_INT 1
17594: PPUSH
17595: LD_INT 1
17597: PPUSH
17598: LD_INT 43
17600: PPUSH
17601: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17605: LD_VAR 0 1
17609: PPUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 23
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 1
17622: PPUSH
17623: LD_INT 2
17625: PPUSH
17626: CALL_OW 12
17630: ARRAY
17631: PPUSH
17632: LD_INT 1
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: LD_INT 43
17640: PPUSH
17641: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_INT 21
17652: PUSH
17653: LD_INT 23
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 1
17662: PPUSH
17663: LD_INT 2
17665: PPUSH
17666: CALL_OW 12
17670: ARRAY
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: LD_INT 1
17677: PPUSH
17678: LD_INT 44
17680: PPUSH
17681: CALL_OW 185
// end ; 2 :
17685: GO 17950
17687: LD_INT 2
17689: DOUBLE
17690: EQUAL
17691: IFTRUE 17695
17693: GO 17818
17695: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_INT 21
17703: PUSH
17704: LD_INT 23
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 1
17713: PPUSH
17714: LD_INT 2
17716: PPUSH
17717: CALL_OW 12
17721: ARRAY
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: LD_INT 1
17728: PPUSH
17729: LD_INT 42
17731: PPUSH
17732: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17736: LD_VAR 0 1
17740: PPUSH
17741: LD_INT 21
17743: PUSH
17744: LD_INT 23
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 1
17753: PPUSH
17754: LD_INT 2
17756: PPUSH
17757: CALL_OW 12
17761: ARRAY
17762: PPUSH
17763: LD_INT 1
17765: PPUSH
17766: LD_INT 1
17768: PPUSH
17769: LD_INT 43
17771: PPUSH
17772: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17776: LD_VAR 0 1
17780: PPUSH
17781: LD_INT 21
17783: PUSH
17784: LD_INT 23
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: PPUSH
17794: LD_INT 2
17796: PPUSH
17797: CALL_OW 12
17801: ARRAY
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: LD_INT 44
17811: PPUSH
17812: CALL_OW 185
// end ; 3 :
17816: GO 17950
17818: LD_INT 3
17820: DOUBLE
17821: EQUAL
17822: IFTRUE 17826
17824: GO 17949
17826: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17827: LD_VAR 0 1
17831: PPUSH
17832: LD_INT 21
17834: PUSH
17835: LD_INT 23
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: PPUSH
17845: LD_INT 2
17847: PPUSH
17848: CALL_OW 12
17852: ARRAY
17853: PPUSH
17854: LD_INT 1
17856: PPUSH
17857: LD_INT 1
17859: PPUSH
17860: LD_INT 42
17862: PPUSH
17863: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17867: LD_VAR 0 1
17871: PPUSH
17872: LD_INT 21
17874: PUSH
17875: LD_INT 23
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 1
17884: PPUSH
17885: LD_INT 2
17887: PPUSH
17888: CALL_OW 12
17892: ARRAY
17893: PPUSH
17894: LD_INT 1
17896: PPUSH
17897: LD_INT 1
17899: PPUSH
17900: LD_INT 42
17902: PPUSH
17903: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17907: LD_VAR 0 1
17911: PPUSH
17912: LD_INT 21
17914: PUSH
17915: LD_INT 23
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 1
17924: PPUSH
17925: LD_INT 2
17927: PPUSH
17928: CALL_OW 12
17932: ARRAY
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: LD_INT 44
17942: PPUSH
17943: CALL_OW 185
// end ; end ;
17947: GO 17950
17949: POP
// end ;
17950: LD_VAR 0 2
17954: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs , cargo , cargoRefuel ; begin
17955: LD_INT 0
17957: PPUSH
17958: PPUSH
17959: PPUSH
17960: PPUSH
17961: PPUSH
17962: PPUSH
17963: PPUSH
// vehicles = [ ] ;
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: EMPTY
17970: ST_TO_ADDR
// cargoRefuel = [ ] ;
17971: LD_ADDR_VAR 0 7
17975: PUSH
17976: EMPTY
17977: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17978: LD_ADDR_VAR 0 4
17982: PUSH
17983: LD_EXP 77
17987: PUSH
17988: FOR_IN
17989: IFFALSE 18038
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17991: LD_ADDR_VAR 0 3
17995: PUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: LD_INT 1
18003: PPUSH
18004: LD_VAR 0 4
18008: PUSH
18009: LD_VAR 0 4
18013: PPUSH
18014: CALL_OW 313
18018: PUSH
18019: LD_INT 1
18021: ARRAY
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: LIST
18030: PPUSH
18031: CALL_OW 2
18035: ST_TO_ADDR
18036: GO 17988
18038: POP
18039: POP
// repeat for i := 1 to vehicles do
18040: LD_ADDR_VAR 0 2
18044: PUSH
18045: DOUBLE
18046: LD_INT 1
18048: DEC
18049: ST_TO_ADDR
18050: LD_VAR 0 3
18054: PUSH
18055: FOR_TO
18056: IFFALSE 18094
// if vehicles [ i ] [ 3 ] = 1 then
18058: LD_VAR 0 3
18062: PUSH
18063: LD_VAR 0 2
18067: ARRAY
18068: PUSH
18069: LD_INT 3
18071: ARRAY
18072: PUSH
18073: LD_INT 1
18075: EQUAL
18076: IFFALSE 18092
// goodVehs = goodVehs + 1 ;
18078: LD_ADDR_VAR 0 5
18082: PUSH
18083: LD_VAR 0 5
18087: PUSH
18088: LD_INT 1
18090: PLUS
18091: ST_TO_ADDR
18092: GO 18055
18094: POP
18095: POP
// if goodVehs = vehicles then
18096: LD_VAR 0 5
18100: PUSH
18101: LD_VAR 0 3
18105: EQUAL
18106: IFFALSE 18329
// for i := 1 to vehicles do
18108: LD_ADDR_VAR 0 2
18112: PUSH
18113: DOUBLE
18114: LD_INT 1
18116: DEC
18117: ST_TO_ADDR
18118: LD_VAR 0 3
18122: PUSH
18123: FOR_TO
18124: IFFALSE 18327
// begin if not HasTask ( vehicles [ i ] [ 1 ] ) then
18126: LD_VAR 0 3
18130: PUSH
18131: LD_VAR 0 2
18135: ARRAY
18136: PUSH
18137: LD_INT 1
18139: ARRAY
18140: PPUSH
18141: CALL_OW 314
18145: NOT
18146: IFFALSE 18325
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
18148: LD_VAR 0 3
18152: PUSH
18153: LD_VAR 0 2
18157: ARRAY
18158: PUSH
18159: LD_INT 1
18161: ARRAY
18162: PPUSH
18163: CALL_OW 261
18167: PUSH
18168: LD_INT 50
18170: LESS
18171: IFFALSE 18300
// begin for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] , [ f_ok ] ] ) do
18173: LD_ADDR_VAR 0 6
18177: PUSH
18178: LD_INT 22
18180: PUSH
18181: LD_INT 6
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 21
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 34
18200: PUSH
18201: LD_INT 51
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 50
18210: PUSH
18211: EMPTY
18212: LIST
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: PPUSH
18220: CALL_OW 69
18224: PUSH
18225: FOR_IN
18226: IFFALSE 18264
// if GetCargo ( cargo , mat_oil ) > 0 then
18228: LD_VAR 0 6
18232: PPUSH
18233: LD_INT 2
18235: PPUSH
18236: CALL_OW 289
18240: PUSH
18241: LD_INT 0
18243: GREATER
18244: IFFALSE 18262
// cargoRefuel = cargoRefuel ^ cargo ;
18246: LD_ADDR_VAR 0 7
18250: PUSH
18251: LD_VAR 0 7
18255: PUSH
18256: LD_VAR 0 6
18260: ADD
18261: ST_TO_ADDR
18262: GO 18225
18264: POP
18265: POP
// if cargo then
18266: LD_VAR 0 6
18270: IFFALSE 18300
// ComRefuelFromCargo ( vehicles [ i ] [ 1 ] , cargo [ 1 ] ) ;
18272: LD_VAR 0 3
18276: PUSH
18277: LD_VAR 0 2
18281: ARRAY
18282: PUSH
18283: LD_INT 1
18285: ARRAY
18286: PPUSH
18287: LD_VAR 0 6
18291: PUSH
18292: LD_INT 1
18294: ARRAY
18295: PPUSH
18296: CALL 8415 0 2
// end ; AddComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
18300: LD_VAR 0 3
18304: PUSH
18305: LD_VAR 0 2
18309: ARRAY
18310: PUSH
18311: LD_INT 1
18313: ARRAY
18314: PPUSH
18315: LD_INT 26
18317: PPUSH
18318: LD_INT 35
18320: PPUSH
18321: CALL_OW 174
// end ; end ;
18325: GO 18123
18327: POP
18328: POP
// if IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) and not IsInUnit ( vehicles [ i ] [ 2 ] ) then
18329: LD_VAR 0 3
18333: PUSH
18334: LD_VAR 0 2
18338: ARRAY
18339: PUSH
18340: LD_INT 1
18342: ARRAY
18343: PPUSH
18344: LD_INT 1
18346: PPUSH
18347: CALL 10167 0 2
18351: PUSH
18352: LD_VAR 0 3
18356: PUSH
18357: LD_VAR 0 2
18361: ARRAY
18362: PUSH
18363: LD_INT 2
18365: ARRAY
18366: PPUSH
18367: CALL_OW 310
18371: NOT
18372: AND
18373: IFFALSE 18409
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18375: LD_VAR 0 3
18379: PUSH
18380: LD_VAR 0 2
18384: ARRAY
18385: PUSH
18386: LD_INT 2
18388: ARRAY
18389: PPUSH
18390: LD_VAR 0 3
18394: PUSH
18395: LD_VAR 0 2
18399: ARRAY
18400: PUSH
18401: LD_INT 1
18403: ARRAY
18404: PPUSH
18405: CALL_OW 120
// goodVehs = 0 ;
18409: LD_ADDR_VAR 0 5
18413: PUSH
18414: LD_INT 0
18416: ST_TO_ADDR
// for i := 1 to vehicles do
18417: LD_ADDR_VAR 0 2
18421: PUSH
18422: DOUBLE
18423: LD_INT 1
18425: DEC
18426: ST_TO_ADDR
18427: LD_VAR 0 3
18431: PUSH
18432: FOR_TO
18433: IFFALSE 18959
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
18435: LD_VAR 0 3
18439: PUSH
18440: LD_VAR 0 2
18444: ARRAY
18445: PUSH
18446: LD_INT 1
18448: ARRAY
18449: PPUSH
18450: CALL_OW 256
18454: PUSH
18455: LD_INT 500
18457: LESS
18458: PUSH
18459: LD_VAR 0 3
18463: PUSH
18464: LD_VAR 0 2
18468: ARRAY
18469: PUSH
18470: LD_INT 1
18472: ARRAY
18473: PPUSH
18474: LD_INT 78
18476: PPUSH
18477: LD_INT 39
18479: PPUSH
18480: CALL_OW 297
18484: PUSH
18485: LD_INT 9
18487: LESS
18488: NOT
18489: AND
18490: IFFALSE 18555
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
18492: LD_ADDR_VAR 0 3
18496: PUSH
18497: LD_VAR 0 3
18501: PPUSH
18502: LD_VAR 0 2
18506: PUSH
18507: LD_VAR 0 3
18511: PUSH
18512: LD_VAR 0 2
18516: ARRAY
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PPUSH
18522: LD_INT 2
18524: PPUSH
18525: CALL 37267 0 3
18529: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
18530: LD_VAR 0 3
18534: PUSH
18535: LD_VAR 0 2
18539: ARRAY
18540: PUSH
18541: LD_INT 1
18543: ARRAY
18544: PPUSH
18545: LD_INT 78
18547: PPUSH
18548: LD_INT 39
18550: PPUSH
18551: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 and not IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) then
18555: LD_VAR 0 3
18559: PUSH
18560: LD_VAR 0 2
18564: ARRAY
18565: PUSH
18566: LD_INT 1
18568: ARRAY
18569: PPUSH
18570: CALL_OW 256
18574: PUSH
18575: LD_INT 500
18577: LESS
18578: PUSH
18579: LD_VAR 0 3
18583: PUSH
18584: LD_VAR 0 2
18588: ARRAY
18589: PUSH
18590: LD_INT 1
18592: ARRAY
18593: PPUSH
18594: LD_INT 78
18596: PPUSH
18597: LD_INT 39
18599: PPUSH
18600: CALL_OW 297
18604: PUSH
18605: LD_INT 9
18607: LESS
18608: AND
18609: PUSH
18610: LD_VAR 0 3
18614: PUSH
18615: LD_VAR 0 2
18619: ARRAY
18620: PUSH
18621: LD_INT 1
18623: ARRAY
18624: PPUSH
18625: LD_INT 1
18627: PPUSH
18628: CALL 10167 0 2
18632: NOT
18633: AND
18634: IFFALSE 18689
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18636: LD_VAR 0 3
18640: PUSH
18641: LD_VAR 0 2
18645: ARRAY
18646: PUSH
18647: LD_INT 2
18649: ARRAY
18650: PPUSH
18651: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18655: LD_VAR 0 3
18659: PUSH
18660: LD_VAR 0 2
18664: ARRAY
18665: PUSH
18666: LD_INT 2
18668: ARRAY
18669: PPUSH
18670: LD_VAR 0 3
18674: PUSH
18675: LD_VAR 0 2
18679: ARRAY
18680: PUSH
18681: LD_INT 1
18683: ARRAY
18684: PPUSH
18685: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18689: LD_VAR 0 3
18693: PUSH
18694: LD_VAR 0 2
18698: ARRAY
18699: PUSH
18700: LD_INT 1
18702: ARRAY
18703: PPUSH
18704: CALL_OW 256
18708: PUSH
18709: LD_INT 1000
18711: EQUAL
18712: PUSH
18713: LD_VAR 0 3
18717: PUSH
18718: LD_VAR 0 2
18722: ARRAY
18723: PUSH
18724: LD_INT 3
18726: ARRAY
18727: PUSH
18728: LD_INT 2
18730: EQUAL
18731: AND
18732: IFFALSE 18806
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18734: LD_ADDR_VAR 0 3
18738: PUSH
18739: LD_VAR 0 3
18743: PPUSH
18744: LD_VAR 0 2
18748: PUSH
18749: LD_VAR 0 3
18753: PUSH
18754: LD_VAR 0 2
18758: ARRAY
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PPUSH
18764: LD_INT 1
18766: PPUSH
18767: CALL 37267 0 3
18771: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18772: LD_VAR 0 3
18776: PUSH
18777: LD_VAR 0 2
18781: ARRAY
18782: PUSH
18783: LD_INT 2
18785: ARRAY
18786: PPUSH
18787: LD_VAR 0 3
18791: PUSH
18792: LD_VAR 0 2
18796: ARRAY
18797: PUSH
18798: LD_INT 1
18800: ARRAY
18801: PPUSH
18802: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18806: LD_VAR 0 3
18810: PUSH
18811: LD_VAR 0 2
18815: ARRAY
18816: PUSH
18817: LD_INT 1
18819: ARRAY
18820: PPUSH
18821: CALL_OW 256
18825: PUSH
18826: LD_INT 250
18828: LESS
18829: IFFALSE 18856
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18831: LD_ADDR_VAR 0 3
18835: PUSH
18836: LD_VAR 0 3
18840: PUSH
18841: LD_VAR 0 3
18845: PUSH
18846: LD_VAR 0 2
18850: ARRAY
18851: PUSH
18852: EMPTY
18853: LIST
18854: DIFF
18855: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18856: LD_VAR 0 3
18860: PUSH
18861: LD_VAR 0 2
18865: ARRAY
18866: PUSH
18867: LD_INT 2
18869: ARRAY
18870: PPUSH
18871: CALL_OW 256
18875: PUSH
18876: LD_INT 250
18878: LESS
18879: PUSH
18880: LD_VAR 0 3
18884: PUSH
18885: LD_VAR 0 2
18889: ARRAY
18890: PUSH
18891: LD_INT 1
18893: ARRAY
18894: PPUSH
18895: CALL_OW 256
18899: PUSH
18900: LD_INT 250
18902: GREATER
18903: AND
18904: IFFALSE 18957
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18906: LD_ADDR_EXP 31
18910: PUSH
18911: LD_EXP 31
18915: PUSH
18916: LD_VAR 0 3
18920: PUSH
18921: LD_VAR 0 2
18925: ARRAY
18926: PUSH
18927: LD_INT 1
18929: ARRAY
18930: ADD
18931: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18932: LD_ADDR_VAR 0 3
18936: PUSH
18937: LD_VAR 0 3
18941: PUSH
18942: LD_VAR 0 3
18946: PUSH
18947: LD_VAR 0 2
18951: ARRAY
18952: PUSH
18953: EMPTY
18954: LIST
18955: DIFF
18956: ST_TO_ADDR
// end ; end ;
18957: GO 18432
18959: POP
18960: POP
// wait ( 0 0$1 ) ;
18961: LD_INT 35
18963: PPUSH
18964: CALL_OW 67
// until omicronSurrender ;
18968: LD_EXP 26
18972: IFFALSE 18040
// end ;
18974: LD_VAR 0 1
18978: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18979: LD_INT 0
18981: PPUSH
18982: PPUSH
18983: PPUSH
18984: PPUSH
18985: PPUSH
18986: PPUSH
18987: PPUSH
18988: PPUSH
18989: PPUSH
18990: PPUSH
18991: PPUSH
18992: PPUSH
18993: PPUSH
18994: PPUSH
// inBase = false ;
18995: LD_ADDR_VAR 0 15
18999: PUSH
19000: LD_INT 0
19002: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
19003: LD_ADDR_VAR 0 8
19007: PUSH
19008: LD_VAR 0 2
19012: PPUSH
19013: LD_INT 22
19015: PUSH
19016: LD_INT 3
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: EMPTY
19024: LIST
19025: PPUSH
19026: CALL_OW 70
19030: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
19031: LD_ADDR_VAR 0 9
19035: PUSH
19036: LD_VAR 0 2
19040: PPUSH
19041: CALL_OW 435
19045: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
19046: LD_ADDR_VAR 0 12
19050: PUSH
19051: LD_VAR 0 1
19055: PPUSH
19056: LD_INT 50
19058: PUSH
19059: EMPTY
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 25
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 25
19077: PUSH
19078: LD_INT 3
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 2
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 72
19109: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
19110: LD_ADDR_VAR 0 13
19114: PUSH
19115: LD_VAR 0 1
19119: PPUSH
19120: LD_INT 50
19122: PUSH
19123: EMPTY
19124: LIST
19125: PUSH
19126: LD_INT 25
19128: PUSH
19129: LD_INT 4
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PPUSH
19140: CALL_OW 72
19144: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
19145: LD_ADDR_VAR 0 14
19149: PUSH
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_INT 3
19157: PUSH
19158: LD_INT 24
19160: PUSH
19161: LD_INT 1000
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 72
19176: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
19177: LD_ADDR_VAR 0 6
19181: PUSH
19182: LD_INT 22
19184: PUSH
19185: LD_INT 3
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: PPUSH
19195: CALL_OW 69
19199: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
19200: LD_ADDR_VAR 0 5
19204: PUSH
19205: LD_VAR 0 1
19209: PPUSH
19210: LD_INT 50
19212: PUSH
19213: EMPTY
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: PPUSH
19219: CALL_OW 72
19223: PUSH
19224: FOR_IN
19225: IFFALSE 19972
// begin if attackUnits and medics then
19227: LD_VAR 0 12
19231: PUSH
19232: LD_VAR 0 13
19236: AND
19237: IFFALSE 19304
// begin if damageUnits then
19239: LD_VAR 0 14
19243: IFFALSE 19265
// ComHeal ( medics , damageUnits [ 1 ] ) else
19245: LD_VAR 0 13
19249: PPUSH
19250: LD_VAR 0 14
19254: PUSH
19255: LD_INT 1
19257: ARRAY
19258: PPUSH
19259: CALL_OW 128
19263: GO 19302
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
19265: LD_VAR 0 13
19269: PPUSH
19270: LD_VAR 0 12
19274: PUSH
19275: LD_INT 1
19277: ARRAY
19278: PPUSH
19279: CALL_OW 250
19283: PPUSH
19284: LD_VAR 0 12
19288: PUSH
19289: LD_INT 1
19291: ARRAY
19292: PPUSH
19293: CALL_OW 251
19297: PPUSH
19298: CALL_OW 111
// end else
19302: GO 19333
// begin if not attackUnits and medics then
19304: LD_VAR 0 12
19308: NOT
19309: PUSH
19310: LD_VAR 0 13
19314: AND
19315: IFFALSE 19333
// attackUnits = attackUnits ^ medics ;
19317: LD_ADDR_VAR 0 12
19321: PUSH
19322: LD_VAR 0 12
19326: PUSH
19327: LD_VAR 0 13
19331: ADD
19332: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
19333: LD_ADDR_VAR 0 4
19337: PUSH
19338: DOUBLE
19339: LD_INT 1
19341: DEC
19342: ST_TO_ADDR
19343: LD_VAR 0 9
19347: PUSH
19348: LD_INT 2
19350: DIVREAL
19351: PUSH
19352: FOR_TO
19353: IFFALSE 19392
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
19355: LD_VAR 0 12
19359: PPUSH
19360: LD_VAR 0 9
19364: PUSH
19365: LD_VAR 0 4
19369: ARRAY
19370: PPUSH
19371: LD_VAR 0 9
19375: PUSH
19376: LD_VAR 0 4
19380: PUSH
19381: LD_INT 1
19383: PLUS
19384: ARRAY
19385: PPUSH
19386: CALL_OW 176
19390: GO 19352
19392: POP
19393: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19394: LD_VAR 0 12
19398: PPUSH
19399: LD_INT 21
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 3
19411: PUSH
19412: LD_INT 60
19414: PUSH
19415: EMPTY
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PPUSH
19426: CALL_OW 72
19430: PPUSH
19431: LD_INT 27
19433: PPUSH
19434: LD_INT 34
19436: PPUSH
19437: CALL_OW 111
// wait ( 0 0$01 ) ;
19441: LD_INT 35
19443: PPUSH
19444: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
19448: LD_VAR 0 8
19452: PUSH
19453: LD_VAR 0 12
19457: PPUSH
19458: LD_INT 21
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 3
19470: PUSH
19471: LD_INT 60
19473: PUSH
19474: EMPTY
19475: LIST
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 72
19489: AND
19490: IFFALSE 19673
// begin for playerUnit in playerUnits do
19492: LD_ADDR_VAR 0 7
19496: PUSH
19497: LD_VAR 0 6
19501: PUSH
19502: FOR_IN
19503: IFFALSE 19669
// begin if Attacks ( playerUnit ) then
19505: LD_VAR 0 7
19509: PPUSH
19510: CALL_OW 320
19514: IFFALSE 19601
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19516: LD_VAR 0 7
19520: PPUSH
19521: CALL_OW 320
19525: PUSH
19526: LD_VAR 0 1
19530: IN
19531: PUSH
19532: LD_VAR 0 7
19536: PPUSH
19537: LD_VAR 0 5
19541: PPUSH
19542: CALL_OW 296
19546: PUSH
19547: LD_INT 13
19549: LESS
19550: AND
19551: IFFALSE 19599
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
19553: LD_VAR 0 12
19557: PPUSH
19558: LD_INT 21
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 3
19570: PUSH
19571: LD_INT 60
19573: PUSH
19574: EMPTY
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PPUSH
19585: CALL_OW 72
19589: PPUSH
19590: LD_VAR 0 7
19594: PPUSH
19595: CALL_OW 115
19599: GO 19667
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19601: LD_ADDR_VAR 0 10
19605: PUSH
19606: LD_VAR 0 8
19610: PPUSH
19611: LD_VAR 0 5
19615: PPUSH
19616: CALL_OW 74
19620: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19621: LD_VAR 0 12
19625: PPUSH
19626: LD_INT 21
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 3
19638: PUSH
19639: LD_INT 60
19641: PUSH
19642: EMPTY
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PPUSH
19653: CALL_OW 72
19657: PPUSH
19658: LD_VAR 0 10
19662: PPUSH
19663: CALL_OW 115
// end ; end ;
19667: GO 19502
19669: POP
19670: POP
// end else
19671: GO 19720
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19673: LD_VAR 0 12
19677: PPUSH
19678: LD_INT 21
19680: PUSH
19681: LD_INT 1
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 3
19690: PUSH
19691: LD_INT 60
19693: PUSH
19694: EMPTY
19695: LIST
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PPUSH
19705: CALL_OW 72
19709: PPUSH
19710: LD_INT 27
19712: PPUSH
19713: LD_INT 34
19715: PPUSH
19716: CALL_OW 111
// if enemyUnitsOnRoad then
19720: LD_VAR 0 8
19724: IFFALSE 19908
// begin for playerUnit in playerUnits do
19726: LD_ADDR_VAR 0 7
19730: PUSH
19731: LD_VAR 0 6
19735: PUSH
19736: FOR_IN
19737: IFFALSE 19904
// begin if Attacks ( playerUnit ) then
19739: LD_VAR 0 7
19743: PPUSH
19744: CALL_OW 320
19748: IFFALSE 19821
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19750: LD_VAR 0 7
19754: PPUSH
19755: CALL_OW 320
19759: PUSH
19760: LD_VAR 0 1
19764: IN
19765: PUSH
19766: LD_VAR 0 7
19770: PPUSH
19771: LD_VAR 0 5
19775: PPUSH
19776: CALL_OW 296
19780: PUSH
19781: LD_INT 13
19783: LESS
19784: AND
19785: IFFALSE 19819
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19787: LD_VAR 0 12
19791: PPUSH
19792: LD_INT 21
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: PPUSH
19805: CALL_OW 72
19809: PPUSH
19810: LD_VAR 0 7
19814: PPUSH
19815: CALL_OW 115
19819: GO 19902
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
19821: LD_ADDR_VAR 0 10
19825: PUSH
19826: LD_VAR 0 8
19830: PPUSH
19831: LD_VAR 0 12
19835: PPUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 50
19848: PUSH
19849: EMPTY
19850: LIST
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PPUSH
19856: CALL_OW 72
19860: PUSH
19861: LD_INT 1
19863: ARRAY
19864: PPUSH
19865: CALL_OW 74
19869: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19870: LD_VAR 0 12
19874: PPUSH
19875: LD_INT 21
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: EMPTY
19886: LIST
19887: PPUSH
19888: CALL_OW 72
19892: PPUSH
19893: LD_VAR 0 10
19897: PPUSH
19898: CALL_OW 115
// end ; end ;
19902: GO 19736
19904: POP
19905: POP
// end else
19906: GO 19941
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19908: LD_VAR 0 12
19912: PPUSH
19913: LD_INT 21
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: PPUSH
19926: CALL_OW 72
19930: PPUSH
19931: LD_INT 27
19933: PPUSH
19934: LD_INT 34
19936: PPUSH
19937: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19941: LD_VAR 0 5
19945: PPUSH
19946: LD_INT 27
19948: PPUSH
19949: LD_INT 34
19951: PPUSH
19952: CALL_OW 297
19956: PUSH
19957: LD_INT 5
19959: LESS
19960: IFFALSE 19970
// inBase = true ;
19962: LD_ADDR_VAR 0 15
19966: PUSH
19967: LD_INT 1
19969: ST_TO_ADDR
// end ;
19970: GO 19224
19972: POP
19973: POP
// wait ( 0 0$1 ) ;
19974: LD_INT 35
19976: PPUSH
19977: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
19981: LD_VAR 0 1
19985: PPUSH
19986: LD_INT 50
19988: PUSH
19989: EMPTY
19990: LIST
19991: PPUSH
19992: CALL_OW 72
19996: PUSH
19997: LD_INT 0
19999: EQUAL
20000: PUSH
20001: LD_VAR 0 15
20005: OR
20006: IFFALSE 19003
// ComMoveXY ( UnitFilter ( units , [ [ f_type , unit_human ] , [ f_ok ] ] ) , 27 , 34 ) ;
20008: LD_VAR 0 1
20012: PPUSH
20013: LD_INT 21
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 50
20025: PUSH
20026: EMPTY
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PPUSH
20033: CALL_OW 72
20037: PPUSH
20038: LD_INT 27
20040: PPUSH
20041: LD_INT 34
20043: PPUSH
20044: CALL_OW 111
// for i := 1 to units do
20048: LD_ADDR_VAR 0 4
20052: PUSH
20053: DOUBLE
20054: LD_INT 1
20056: DEC
20057: ST_TO_ADDR
20058: LD_VAR 0 1
20062: PUSH
20063: FOR_TO
20064: IFFALSE 20099
// if IsOk ( units [ i ] ) then
20066: LD_VAR 0 1
20070: PUSH
20071: LD_VAR 0 4
20075: ARRAY
20076: PPUSH
20077: CALL_OW 302
20081: IFFALSE 20097
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
20083: LD_ADDR_EXP 15
20087: PUSH
20088: LD_EXP 15
20092: PUSH
20093: LD_INT 1
20095: PLUS
20096: ST_TO_ADDR
20097: GO 20063
20099: POP
20100: POP
// amSupportTroops = amSupportTroops diff units ;
20101: LD_ADDR_EXP 85
20105: PUSH
20106: LD_EXP 85
20110: PUSH
20111: LD_VAR 0 1
20115: DIFF
20116: ST_TO_ADDR
// newBase = amBase ;
20117: LD_ADDR_VAR 0 16
20121: PUSH
20122: LD_EXP 87
20126: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
20127: LD_ADDR_VAR 0 16
20131: PUSH
20132: LD_VAR 0 16
20136: PUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: LD_INT 50
20144: PUSH
20145: EMPTY
20146: LIST
20147: PPUSH
20148: CALL_OW 72
20152: ADD
20153: ST_TO_ADDR
// amBase = newBase ;
20154: LD_ADDR_EXP 87
20158: PUSH
20159: LD_VAR 0 16
20163: ST_TO_ADDR
// end ; end_of_file
20164: LD_VAR 0 3
20168: RET
// export function Lose_Burlak ; begin
20169: LD_INT 0
20171: PPUSH
// YouLost ( Burlak ) ;
20172: LD_STRING Burlak
20174: PPUSH
20175: CALL_OW 104
// end ;
20179: LD_VAR 0 1
20183: RET
// export function Lose_Omicron ; begin
20184: LD_INT 0
20186: PPUSH
// YouLost ( Omicron ) ;
20187: LD_STRING Omicron
20189: PPUSH
20190: CALL_OW 104
// end ;
20194: LD_VAR 0 1
20198: RET
// export function Lose_Vehicles ; begin
20199: LD_INT 0
20201: PPUSH
// YouLost ( Vehicles ) ;
20202: LD_STRING Vehicles
20204: PPUSH
20205: CALL_OW 104
// end ;
20209: LD_VAR 0 1
20213: RET
// export function Lose_SelfAttack ; begin
20214: LD_INT 0
20216: PPUSH
// YouLost ( SelfAttack ) ;
20217: LD_STRING SelfAttack
20219: PPUSH
20220: CALL_OW 104
// end ;
20224: LD_VAR 0 1
20228: RET
// export function Lose_Delay ; begin
20229: LD_INT 0
20231: PPUSH
// YouLost ( Delay ) ;
20232: LD_STRING Delay
20234: PPUSH
20235: CALL_OW 104
// end ; end_of_file
20239: LD_VAR 0 1
20243: RET
// export function FinishMission ; begin
20244: LD_INT 0
20246: PPUSH
// SetRewards ;
20247: CALL 20268 0 0
// SavePlayerCharacters ;
20251: CALL 20482 0 0
// SaveGlobalVariables ;
20255: CALL 20811 0 0
// YouWin ;
20259: CALL_OW 103
// end ;
20263: LD_VAR 0 1
20267: RET
// function SetRewards ; var unitsToReward ; begin
20268: LD_INT 0
20270: PPUSH
20271: PPUSH
// if produceMoreVehicles then
20272: LD_EXP 19
20276: IFFALSE 20290
// AddMedal ( Surplus , 1 ) else
20278: LD_STRING Surplus
20280: PPUSH
20281: LD_INT 1
20283: PPUSH
20284: CALL_OW 101
20288: GO 20320
// if produceOnlyForYou then
20290: LD_EXP 20
20294: IFFALSE 20309
// AddMedal ( Surplus , - 1 ) else
20296: LD_STRING Surplus
20298: PPUSH
20299: LD_INT 1
20301: NEG
20302: PPUSH
20303: CALL_OW 101
20307: GO 20320
// AddMedal ( Surplus , - 2 ) ;
20309: LD_STRING Surplus
20311: PPUSH
20312: LD_INT 2
20314: NEG
20315: PPUSH
20316: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
20320: LD_EXP 15
20324: PUSH
20325: LD_EXP 47
20329: LESS
20330: IFFALSE 20344
// AddMedal ( PreventReinforcements , 1 ) else
20332: LD_STRING PreventReinforcements
20334: PPUSH
20335: LD_INT 1
20337: PPUSH
20338: CALL_OW 101
20342: GO 20355
// AddMedal ( PreventReinforcements , - 1 ) ;
20344: LD_STRING PreventReinforcements
20346: PPUSH
20347: LD_INT 1
20349: NEG
20350: PPUSH
20351: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
20355: LD_EXP 10
20359: PUSH
20360: LD_EXP 56
20364: PPUSH
20365: CALL_OW 302
20369: AND
20370: IFFALSE 20384
// AddMedal ( Scholtze , 1 ) else
20372: LD_STRING Scholtze
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: CALL_OW 101
20382: GO 20395
// AddMedal ( Scholtze , - 1 ) ;
20384: LD_STRING Scholtze
20386: PPUSH
20387: LD_INT 1
20389: NEG
20390: PPUSH
20391: CALL_OW 101
// GiveMedals ( Main ) ;
20395: LD_STRING Main
20397: PPUSH
20398: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20402: LD_ADDR_VAR 0 2
20406: PUSH
20407: LD_INT 22
20409: PUSH
20410: LD_INT 3
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 21
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PPUSH
20431: CALL_OW 69
20435: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
20436: LD_ADDR_VAR 0 2
20440: PUSH
20441: LD_VAR 0 2
20445: PUSH
20446: LD_EXP 80
20450: ADD
20451: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
20452: LD_ADDR_VAR 0 2
20456: PUSH
20457: LD_VAR 0 2
20461: PUSH
20462: LD_EXP 63
20466: DIFF
20467: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
20468: LD_VAR 0 2
20472: PPUSH
20473: CALL_OW 43
// end ;
20477: LD_VAR 0 1
20481: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
20482: LD_INT 0
20484: PPUSH
20485: PPUSH
20486: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
20487: LD_EXP 50
20491: PPUSH
20492: LD_STRING Burlak
20494: PPUSH
20495: LD_INT 3
20497: PPUSH
20498: CALL 7299 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
20502: LD_EXP 51
20506: PPUSH
20507: LD_STRING Gnyevko
20509: PPUSH
20510: LD_INT 3
20512: PPUSH
20513: CALL 7299 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
20517: LD_EXP 53
20521: PPUSH
20522: LD_STRING Kovalyuk
20524: PPUSH
20525: LD_INT 3
20527: PPUSH
20528: CALL 7299 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
20532: LD_EXP 52
20536: PPUSH
20537: LD_STRING Kirilenkova
20539: PPUSH
20540: LD_INT 3
20542: PPUSH
20543: CALL 7299 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
20547: LD_EXP 56
20551: PPUSH
20552: LD_STRING Scholtze
20554: PPUSH
20555: LD_INT 3
20557: PPUSH
20558: CALL 7299 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
20562: LD_EXP 54
20566: PPUSH
20567: LD_STRING Belkov
20569: PPUSH
20570: LD_INT 3
20572: PPUSH
20573: CALL 7299 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
20577: LD_EXP 55
20581: PPUSH
20582: LD_STRING Belkov2
20584: PPUSH
20585: LD_INT 3
20587: PPUSH
20588: CALL 7299 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
20592: LD_EXP 54
20596: PPUSH
20597: LD_STRING Belkov
20599: PPUSH
20600: LD_INT 6
20602: PPUSH
20603: CALL 7299 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
20607: LD_EXP 55
20611: PPUSH
20612: LD_STRING Belkov2
20614: PPUSH
20615: LD_INT 6
20617: PPUSH
20618: CALL 7299 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
20622: LD_ADDR_VAR 0 2
20626: PUSH
20627: LD_INT 22
20629: PUSH
20630: LD_INT 3
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 21
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 50
20649: PUSH
20650: EMPTY
20651: LIST
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: LIST
20657: PPUSH
20658: CALL_OW 69
20662: PUSH
20663: LD_EXP 50
20667: PUSH
20668: LD_EXP 51
20672: PUSH
20673: LD_EXP 54
20677: PUSH
20678: LD_EXP 55
20682: PUSH
20683: LD_EXP 53
20687: PUSH
20688: LD_EXP 52
20692: PUSH
20693: LD_EXP 56
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: DIFF
20707: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20708: LD_VAR 0 2
20712: PPUSH
20713: LD_STRING other_survivors
20715: PPUSH
20716: LD_INT 3
20718: PPUSH
20719: CALL 7355 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20723: LD_ADDR_VAR 0 3
20727: PUSH
20728: LD_INT 22
20730: PUSH
20731: LD_INT 6
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 21
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 50
20750: PUSH
20751: EMPTY
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL_OW 69
20763: PUSH
20764: LD_EXP 62
20768: PUSH
20769: LD_EXP 63
20773: PUSH
20774: LD_EXP 54
20778: PUSH
20779: LD_EXP 55
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: DIFF
20790: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20791: LD_VAR 0 3
20795: PPUSH
20796: LD_STRING other_kirov
20798: PPUSH
20799: LD_INT 6
20801: PPUSH
20802: CALL 7355 0 3
// end ;
20806: LD_VAR 0 1
20810: RET
// function SaveGlobalVariables ; begin
20811: LD_INT 0
20813: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20814: LD_EXP 5
20818: PPUSH
20819: LD_STRING 03_KurinOpinion_1
20821: PPUSH
20822: CALL_OW 39
// SaveVariable ( vehiclesToSave , 03_SavedVehicles_2 ) ;
20826: LD_EXP 7
20830: PPUSH
20831: LD_STRING 03_SavedVehicles_2
20833: PPUSH
20834: CALL_OW 39
// end ; end_of_file
20838: LD_VAR 0 1
20842: RET
// export function CustomEvent ( event ) ; begin
20843: LD_INT 0
20845: PPUSH
// end ;
20846: LD_VAR 0 2
20850: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20851: LD_INT 0
20853: PPUSH
20854: PPUSH
20855: PPUSH
20856: PPUSH
20857: PPUSH
20858: PPUSH
20859: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20860: LD_ADDR_VAR 0 2
20864: PUSH
20865: LD_INT 22
20867: PUSH
20868: LD_INT 3
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 21
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PPUSH
20889: CALL_OW 69
20893: PUSH
20894: FOR_IN
20895: IFFALSE 21092
// if GetTaskList ( i ) > 0 then
20897: LD_VAR 0 2
20901: PPUSH
20902: CALL_OW 437
20906: PUSH
20907: LD_INT 0
20909: GREATER
20910: IFFALSE 21090
// for j = 1 to GetTaskList ( i ) do
20912: LD_ADDR_VAR 0 3
20916: PUSH
20917: DOUBLE
20918: LD_INT 1
20920: DEC
20921: ST_TO_ADDR
20922: LD_VAR 0 2
20926: PPUSH
20927: CALL_OW 437
20931: PUSH
20932: FOR_TO
20933: IFFALSE 21088
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20935: LD_ADDR_VAR 0 4
20939: PUSH
20940: LD_VAR 0 2
20944: PPUSH
20945: CALL_OW 437
20949: PUSH
20950: LD_VAR 0 3
20954: ARRAY
20955: PUSH
20956: LD_INT 4
20958: ARRAY
20959: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
20960: LD_ADDR_VAR 0 8
20964: PUSH
20965: LD_VAR 0 2
20969: PPUSH
20970: CALL_OW 437
20974: PUSH
20975: LD_VAR 0 3
20979: ARRAY
20980: PUSH
20981: LD_INT 5
20983: ARRAY
20984: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
20985: LD_ADDR_VAR 0 6
20989: PUSH
20990: LD_VAR 0 2
20994: PPUSH
20995: CALL_OW 437
20999: PUSH
21000: LD_VAR 0 3
21004: ARRAY
21005: PUSH
21006: LD_INT 2
21008: ARRAY
21009: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
21010: LD_ADDR_VAR 0 7
21014: PUSH
21015: LD_VAR 0 2
21019: PPUSH
21020: CALL_OW 437
21024: PUSH
21025: LD_VAR 0 3
21029: ARRAY
21030: PUSH
21031: LD_INT 3
21033: ARRAY
21034: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
21035: LD_VAR 0 4
21039: PPUSH
21040: CALL_OW 255
21044: PUSH
21045: LD_INT 6
21047: EQUAL
21048: PUSH
21049: LD_VAR 0 2
21053: PPUSH
21054: CALL_OW 437
21058: PUSH
21059: LD_VAR 0 3
21063: ARRAY
21064: PUSH
21065: LD_INT 1
21067: ARRAY
21068: PUSH
21069: LD_STRING <
21071: EQUAL
21072: AND
21073: IFFALSE 21086
// SetTaskList ( i , [ ] ) ;
21075: LD_VAR 0 2
21079: PPUSH
21080: EMPTY
21081: PPUSH
21082: CALL_OW 446
// end ;
21086: GO 20932
21088: POP
21089: POP
21090: GO 20894
21092: POP
21093: POP
// end ;
21094: PPOPN 8
21096: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
21097: LD_VAR 0 2
21101: PUSH
21102: LD_INT 6
21104: EQUAL
21105: IFFALSE 21119
// SetSide ( building , 6 ) ;
21107: LD_VAR 0 1
21111: PPUSH
21112: LD_INT 6
21114: PPUSH
21115: CALL_OW 235
// end ;
21119: PPOPN 3
21121: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
21122: LD_INT 0
21124: PPUSH
21125: PPUSH
// begin diffUnits = [ ] ;
21126: LD_ADDR_VAR 0 2
21130: PUSH
21131: EMPTY
21132: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 255
21142: PUSH
21143: LD_INT 3
21145: EQUAL
21146: PUSH
21147: LD_VAR 0 1
21151: PPUSH
21152: CALL_OW 266
21156: PUSH
21157: LD_INT 0
21159: EQUAL
21160: AND
21161: PUSH
21162: LD_VAR 0 1
21166: PPUSH
21167: LD_INT 21
21169: PPUSH
21170: CALL_OW 308
21174: AND
21175: IFFALSE 21189
// SetBName ( building , kagan ) ;
21177: LD_VAR 0 1
21181: PPUSH
21182: LD_STRING kagan
21184: PPUSH
21185: CALL_OW 500
// if GetSide ( building ) = 6 then
21189: LD_VAR 0 1
21193: PPUSH
21194: CALL_OW 255
21198: PUSH
21199: LD_INT 6
21201: EQUAL
21202: IFFALSE 21383
// begin if GetBType ( building ) = b_ext_noncombat then
21204: LD_VAR 0 1
21208: PPUSH
21209: CALL_OW 266
21213: PUSH
21214: LD_INT 19
21216: EQUAL
21217: IFFALSE 21223
// begin SpawnKirovSupport ;
21219: CALL 4614 0 0
// end ; if GetBType ( building ) = b_depot then
21223: LD_VAR 0 1
21227: PPUSH
21228: CALL_OW 266
21232: PUSH
21233: LD_INT 0
21235: EQUAL
21236: IFFALSE 21282
// begin kirovOilDepot = building ;
21238: LD_ADDR_EXP 69
21242: PUSH
21243: LD_VAR 0 1
21247: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
21248: LD_EXP 69
21252: PPUSH
21253: CALL_OW 274
21257: PPUSH
21258: LD_INT 2
21260: PPUSH
21261: LD_INT 3000
21263: PPUSH
21264: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
21268: LD_EXP 83
21272: PPUSH
21273: LD_VAR 0 1
21277: PPUSH
21278: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
21282: LD_VAR 0 1
21286: PPUSH
21287: CALL_OW 266
21291: PUSH
21292: LD_INT 31
21294: EQUAL
21295: PUSH
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 266
21305: PUSH
21306: LD_INT 4
21308: EQUAL
21309: OR
21310: PUSH
21311: LD_VAR 0 1
21315: PPUSH
21316: LD_INT 20
21318: PPUSH
21319: CALL_OW 308
21323: AND
21324: IFFALSE 21383
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
21326: LD_EXP 79
21330: PPUSH
21331: LD_INT 25
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 56
21343: PUSH
21344: EMPTY
21345: LIST
21346: PUSH
21347: LD_INT 3
21349: PUSH
21350: LD_INT 60
21352: PUSH
21353: EMPTY
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: PPUSH
21365: CALL_OW 72
21369: PUSH
21370: LD_INT 1
21372: ARRAY
21373: PPUSH
21374: LD_VAR 0 1
21378: PPUSH
21379: CALL_OW 120
// end ; end ;
21383: PPOPN 3
21385: END
// on UpgradeComplete ( building ) do var i , tmp ;
21386: LD_INT 0
21388: PPUSH
21389: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
21390: LD_VAR 0 1
21394: PPUSH
21395: CALL_OW 255
21399: PUSH
21400: LD_INT 3
21402: EQUAL
21403: PUSH
21404: LD_VAR 0 1
21408: PPUSH
21409: CALL_OW 266
21413: PUSH
21414: LD_INT 3
21416: EQUAL
21417: AND
21418: PUSH
21419: LD_EXP 11
21423: NOT
21424: AND
21425: IFFALSE 21436
// Dial_UpgradeWorkshop ( building ) ;
21427: LD_VAR 0 1
21431: PPUSH
21432: CALL 24576 0 1
// end ;
21436: PPOPN 3
21438: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
21439: LD_VAR 0 1
21443: PUSH
21444: LD_EXP 50
21448: EQUAL
21449: IFFALSE 21455
// Lose_Burlak ;
21451: CALL 20169 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
21455: LD_VAR 0 1
21459: PUSH
21460: LD_EXP 61
21464: EQUAL
21465: PUSH
21466: LD_EXP 29
21470: NOT
21471: AND
21472: IFFALSE 21478
// Lose_Omicron ;
21474: CALL 20184 0 0
// end ;
21478: PPOPN 1
21480: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
21481: LD_VAR 0 1
21485: PUSH
21486: LD_INT 3
21488: EQUAL
21489: PUSH
21490: LD_VAR 0 2
21494: PUSH
21495: LD_INT 6
21497: EQUAL
21498: AND
21499: IFFALSE 21505
// Lose_SelfAttack ;
21501: CALL 20214 0 0
// end ;
21505: PPOPN 2
21507: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
21508: LD_VAR 0 1
21512: PPUSH
21513: CALL_OW 255
21517: PUSH
21518: LD_INT 6
21520: EQUAL
21521: IFFALSE 21686
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 264
21532: PUSH
21533: LD_INT 51
21535: EQUAL
21536: PUSH
21537: LD_EXP 75
21541: NOT
21542: AND
21543: IFFALSE 21557
// kirovTransportCargo = vehicle else
21545: LD_ADDR_EXP 75
21549: PUSH
21550: LD_VAR 0 1
21554: ST_TO_ADDR
21555: GO 21629
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
21557: LD_VAR 0 1
21561: PPUSH
21562: CALL_OW 264
21566: PUSH
21567: LD_INT 51
21569: EQUAL
21570: IFFALSE 21629
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
21572: LD_VAR 0 1
21576: PPUSH
21577: LD_EXP 69
21581: PPUSH
21582: LD_INT 2
21584: PPUSH
21585: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
21589: LD_VAR 0 1
21593: PPUSH
21594: LD_INT 137
21596: PPUSH
21597: LD_INT 99
21599: PPUSH
21600: CALL_OW 171
// AddComHold ( vehicle ) ;
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
21613: LD_ADDR_EXP 76
21617: PUSH
21618: LD_EXP 76
21622: PUSH
21623: LD_VAR 0 1
21627: ADD
21628: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
21629: LD_VAR 0 1
21633: PPUSH
21634: CALL_OW 264
21638: PUSH
21639: LD_INT 42
21641: PUSH
21642: LD_INT 43
21644: PUSH
21645: LD_INT 44
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: LIST
21652: IN
21653: IFFALSE 21686
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
21655: LD_ADDR_EXP 77
21659: PUSH
21660: LD_EXP 77
21664: PUSH
21665: LD_VAR 0 1
21669: ADD
21670: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
21671: LD_VAR 0 1
21675: PPUSH
21676: LD_INT 137
21678: PPUSH
21679: LD_INT 99
21681: PPUSH
21682: CALL_OW 111
// end ; end ; end ;
21686: PPOPN 2
21688: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21689: LD_VAR 0 3
21693: PUSH
21694: LD_INT 6
21696: EQUAL
21697: PUSH
21698: LD_VAR 0 2
21702: PUSH
21703: LD_EXP 31
21707: IN
21708: NOT
21709: AND
21710: IFFALSE 21733
// begin ComExitVehicle ( capturing_unit ) ;
21712: LD_VAR 0 4
21716: PPUSH
21717: CALL_OW 121
// SetSide ( new , 6 ) ;
21721: LD_VAR 0 1
21725: PPUSH
21726: LD_INT 6
21728: PPUSH
21729: CALL_OW 235
// end ; end ;
21733: PPOPN 4
21735: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21736: LD_VAR 0 1
21740: PPUSH
21741: CALL_OW 255
21745: PUSH
21746: LD_INT 6
21748: EQUAL
21749: PUSH
21750: LD_EXP 22
21754: AND
21755: IFFALSE 21783
// begin wait ( 0 0$2 ) ;
21757: LD_INT 70
21759: PPUSH
21760: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21764: LD_VAR 0 1
21768: PPUSH
21769: LD_INT 78
21771: PPUSH
21772: LD_INT 39
21774: PPUSH
21775: CALL_OW 174
// KirovAttackOmicron ;
21779: CALL 17955 0 0
// end ; end ;
21783: PPOPN 2
21785: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21786: LD_VAR 0 2
21790: PPUSH
21791: CALL_OW 255
21795: PUSH
21796: LD_INT 6
21798: EQUAL
21799: PUSH
21800: LD_VAR 0 1
21804: PUSH
21805: LD_INT 39
21807: EQUAL
21808: AND
21809: IFFALSE 21870
// begin MountWeaponTurrent ;
21811: CALL 17419 0 0
// wait ( 3 3$30 ) ;
21815: LD_INT 7350
21817: PPUSH
21818: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21822: LD_INT 22
21824: PUSH
21825: LD_INT 6
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 21
21834: PUSH
21835: LD_INT 3
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 30
21844: PUSH
21845: LD_INT 3
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: PPUSH
21857: CALL_OW 69
21861: PUSH
21862: LD_INT 1
21864: ARRAY
21865: PPUSH
21866: CALL 17485 0 1
// end ; end ; end_of_file
21870: PPOPN 2
21872: END
// export function MissionIntro ; var i , unit , freeSlots , tmp , timer ; begin
21873: LD_INT 0
21875: PPUSH
21876: PPUSH
21877: PPUSH
21878: PPUSH
21879: PPUSH
21880: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21881: LD_EXP 50
21885: PUSH
21886: LD_EXP 62
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PPUSH
21895: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21899: LD_EXP 50
21903: PUSH
21904: LD_EXP 64
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PPUSH
21913: LD_EXP 62
21917: PPUSH
21918: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21922: LD_EXP 62
21926: PPUSH
21927: LD_EXP 50
21931: PPUSH
21932: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21936: LD_INT 3
21938: PPUSH
21939: LD_INT 24
21941: PPUSH
21942: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21946: LD_EXP 54
21950: PPUSH
21951: CALL_OW 305
21955: NOT
21956: PUSH
21957: LD_EXP 55
21961: PPUSH
21962: CALL_OW 305
21966: NOT
21967: AND
21968: IFFALSE 22056
// begin Say ( Kurin , D1a-Kur-1 ) ;
21970: LD_EXP 62
21974: PPUSH
21975: LD_STRING D1a-Kur-1
21977: PPUSH
21978: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
21982: LD_EXP 50
21986: PPUSH
21987: LD_STRING D1a-Bur-1
21989: PPUSH
21990: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
21994: LD_EXP 62
21998: PPUSH
21999: LD_STRING D1a-Kur-2
22001: PPUSH
22002: CALL_OW 88
// if platonovOpinion <= 1 then
22006: LD_EXP 6
22010: PUSH
22011: LD_INT 1
22013: LESSEQUAL
22014: IFFALSE 22030
// Say ( Kurin , D1a-Kur-2a ) else
22016: LD_EXP 62
22020: PPUSH
22021: LD_STRING D1a-Kur-2a
22023: PPUSH
22024: CALL_OW 88
22028: GO 22042
// Say ( Kurin , D1a-Kur-2b ) ;
22030: LD_EXP 62
22034: PPUSH
22035: LD_STRING D1a-Kur-2b
22037: PPUSH
22038: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
22042: LD_EXP 50
22046: PPUSH
22047: LD_STRING D1a-Bur-2
22049: PPUSH
22050: CALL_OW 88
// end else
22054: GO 22092
// begin Say ( Kurin , D1b-Kur-1 ) ;
22056: LD_EXP 62
22060: PPUSH
22061: LD_STRING D1b-Kur-1
22063: PPUSH
22064: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
22068: LD_EXP 64
22072: PPUSH
22073: LD_STRING D1b-Bel-1
22075: PPUSH
22076: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
22080: LD_EXP 62
22084: PPUSH
22085: LD_STRING D1b-Kur-2
22087: PPUSH
22088: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
22092: LD_EXP 62
22096: PPUSH
22097: LD_STRING D2-Kur-1
22099: PPUSH
22100: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
22104: LD_EXP 50
22108: PPUSH
22109: LD_STRING D2-Bur-1
22111: PPUSH
22112: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
22116: LD_EXP 62
22120: PPUSH
22121: LD_STRING D2-Kur-2
22123: PPUSH
22124: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
22128: LD_EXP 50
22132: PPUSH
22133: LD_STRING D2-Bur-2
22135: PPUSH
22136: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
22140: LD_EXP 62
22144: PPUSH
22145: LD_STRING D2-Kur-3
22147: PPUSH
22148: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
22152: LD_INT 1
22154: PPUSH
22155: LD_INT 6
22157: PPUSH
22158: LD_INT 1
22160: PPUSH
22161: LD_INT 1
22163: PPUSH
22164: CALL_OW 80
// PrepareAmericansMissionIntro ;
22168: CALL 5675 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
22172: LD_EXP 84
22176: PPUSH
22177: LD_INT 28
22179: PPUSH
22180: LD_INT 35
22182: PPUSH
22183: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
22187: LD_INT 93
22189: PPUSH
22190: LD_INT 36
22192: PPUSH
22193: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
22197: LD_INT 93
22199: PPUSH
22200: LD_INT 36
22202: PPUSH
22203: LD_INT 3
22205: PPUSH
22206: LD_INT 9
22208: NEG
22209: PPUSH
22210: CALL_OW 330
// wait ( 0 0$6 ) ;
22214: LD_INT 210
22216: PPUSH
22217: CALL_OW 67
// CenterOnUnits ( Popov ) ;
22221: LD_EXP 63
22225: PPUSH
22226: CALL_OW 85
// wait ( 0 0$1 ) ;
22230: LD_INT 35
22232: PPUSH
22233: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
22237: LD_EXP 63
22241: PPUSH
22242: LD_STRING D2-Pop-3
22244: PPUSH
22245: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
22249: LD_EXP 50
22253: PUSH
22254: LD_EXP 62
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PPUSH
22263: CALL_OW 87
// wait ( 0 0$1 ) ;
22267: LD_INT 35
22269: PPUSH
22270: CALL_OW 67
// Say ( Kurin , D2-Kur-4 ) ;
22274: LD_EXP 62
22278: PPUSH
22279: LD_STRING D2-Kur-4
22281: PPUSH
22282: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
22286: LD_EXP 50
22290: PPUSH
22291: LD_STRING D2-Bur-4
22293: PPUSH
22294: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
22298: LD_EXP 62
22302: PPUSH
22303: LD_STRING D2-Kur-5
22305: PPUSH
22306: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
22310: LD_EXP 50
22314: PPUSH
22315: LD_STRING D2-Bur-5
22317: PPUSH
22318: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
22322: LD_EXP 62
22326: PPUSH
22327: LD_STRING D2-Kur-6
22329: PPUSH
22330: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
22334: LD_EXP 51
22338: PPUSH
22339: CALL_OW 305
22343: IFFALSE 22359
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22345: LD_ADDR_EXP 39
22349: PUSH
22350: LD_EXP 39
22354: PUSH
22355: LD_INT 1
22357: MINUS
22358: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
22359: LD_EXP 53
22363: PPUSH
22364: CALL_OW 305
22368: IFFALSE 22384
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22370: LD_ADDR_EXP 39
22374: PUSH
22375: LD_EXP 39
22379: PUSH
22380: LD_INT 1
22382: MINUS
22383: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
22384: LD_EXP 52
22388: PPUSH
22389: CALL_OW 305
22393: IFFALSE 22409
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22395: LD_ADDR_EXP 39
22399: PUSH
22400: LD_EXP 39
22404: PUSH
22405: LD_INT 1
22407: MINUS
22408: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
22409: LD_EXP 39
22413: PPUSH
22414: CALL 7453 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
22418: LD_INT 93
22420: PPUSH
22421: LD_INT 36
22423: PPUSH
22424: LD_INT 3
22426: PPUSH
22427: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22431: LD_INT 3
22433: PPUSH
22434: LD_INT 24
22436: PPUSH
22437: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
22441: LD_INT 22
22443: PUSH
22444: LD_INT 3
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 21
22453: PUSH
22454: LD_INT 1
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PPUSH
22465: CALL_OW 69
22469: PPUSH
22470: CALL_OW 122
// wait ( 0 0$1 ) ;
22474: LD_INT 35
22476: PPUSH
22477: CALL_OW 67
// AddComMoveUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , beriaDepot ) ;
22481: LD_INT 22
22483: PUSH
22484: LD_INT 3
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 21
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PPUSH
22505: CALL_OW 69
22509: PPUSH
22510: LD_EXP 61
22514: PPUSH
22515: CALL_OW 172
// timer := 0 ;
22519: LD_ADDR_VAR 0 6
22523: PUSH
22524: LD_INT 0
22526: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22527: LD_INT 35
22529: PPUSH
22530: CALL_OW 67
// timer := timer + 1 ;
22534: LD_ADDR_VAR 0 6
22538: PUSH
22539: LD_VAR 0 6
22543: PUSH
22544: LD_INT 1
22546: PLUS
22547: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
22548: LD_EXP 50
22552: PPUSH
22553: CALL_OW 87
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , beriaDepot ) ;
22557: LD_INT 22
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 21
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PPUSH
22581: CALL_OW 69
22585: PPUSH
22586: LD_EXP 61
22590: PPUSH
22591: CALL_OW 112
// until GetDistUnits ( Burlak , beriaDepot ) < 6 or not HasTask ( Burlak ) or timer > 10 ;
22595: LD_EXP 50
22599: PPUSH
22600: LD_EXP 61
22604: PPUSH
22605: CALL_OW 296
22609: PUSH
22610: LD_INT 6
22612: LESS
22613: PUSH
22614: LD_EXP 50
22618: PPUSH
22619: CALL_OW 314
22623: NOT
22624: OR
22625: PUSH
22626: LD_VAR 0 6
22630: PUSH
22631: LD_INT 10
22633: GREATER
22634: OR
22635: IFFALSE 22527
// InGameOff ;
22637: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22641: LD_STRING M1
22643: PPUSH
22644: CALL_OW 337
// SaveForQuickRestart ;
22648: CALL_OW 22
// counterEnable = true ;
22652: LD_ADDR_EXP 90
22656: PUSH
22657: LD_INT 1
22659: ST_TO_ADDR
// counterIndex = 1 ;
22660: LD_ADDR_EXP 91
22664: PUSH
22665: LD_INT 1
22667: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22668: LD_INT 3
22670: PPUSH
22671: LD_INT 24
22673: PPUSH
22674: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
22678: LD_INT 6
22680: PPUSH
22681: LD_INT 22
22683: PUSH
22684: LD_INT 6
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 21
22693: PUSH
22694: LD_INT 3
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 30
22703: PUSH
22704: LD_INT 6
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: LIST
22715: PPUSH
22716: CALL_OW 69
22720: PUSH
22721: LD_INT 1
22723: ARRAY
22724: PPUSH
22725: LD_INT 3
22727: PPUSH
22728: CALL 8868 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22732: LD_INT 1
22734: PPUSH
22735: LD_INT 22
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 21
22747: PUSH
22748: LD_INT 3
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 30
22757: PUSH
22758: LD_INT 7
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: PPUSH
22770: CALL_OW 69
22774: PUSH
22775: LD_INT 1
22777: ARRAY
22778: PPUSH
22779: LD_INT 1
22781: PPUSH
22782: CALL 8868 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22786: LD_INT 18
22788: PPUSH
22789: LD_INT 22
22791: PUSH
22792: LD_INT 6
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 21
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 25
22811: PUSH
22812: LD_INT 2
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: PPUSH
22824: CALL_OW 70
22828: PPUSH
22829: LD_INT 17
22831: PPUSH
22832: LD_INT 159
22834: PPUSH
22835: LD_INT 116
22837: PPUSH
22838: LD_INT 0
22840: PPUSH
22841: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22845: LD_INT 18
22847: PPUSH
22848: LD_INT 22
22850: PUSH
22851: LD_INT 6
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 21
22860: PUSH
22861: LD_INT 1
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 25
22870: PUSH
22871: LD_INT 2
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 70
22887: PPUSH
22888: LD_INT 19
22890: PPUSH
22891: LD_INT 161
22893: PPUSH
22894: LD_INT 115
22896: PPUSH
22897: LD_INT 5
22899: PPUSH
22900: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22904: LD_INT 18
22906: PPUSH
22907: LD_INT 22
22909: PUSH
22910: LD_INT 6
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 21
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 25
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: PPUSH
22942: CALL_OW 70
22946: PPUSH
22947: LD_EXP 68
22951: PPUSH
22952: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
22956: LD_EXP 80
22960: PPUSH
22961: CALL_OW 139
// tmp = survivorsArabianAttack diff Popov ;
22965: LD_ADDR_VAR 0 5
22969: PUSH
22970: LD_EXP 80
22974: PUSH
22975: LD_EXP 63
22979: DIFF
22980: ST_TO_ADDR
// freeSlots = 6 - UnitsInside ( ru2_bar1 ) ;
22981: LD_ADDR_VAR 0 4
22985: PUSH
22986: LD_INT 6
22988: PUSH
22989: LD_EXP 70
22993: PPUSH
22994: CALL_OW 313
22998: MINUS
22999: ST_TO_ADDR
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
23000: LD_EXP 80
23004: PUSH
23005: LD_EXP 63
23009: DIFF
23010: PPUSH
23011: LD_EXP 70
23015: PPUSH
23016: CALL_OW 180
// for i = 1 to tmp do
23020: LD_ADDR_VAR 0 2
23024: PUSH
23025: DOUBLE
23026: LD_INT 1
23028: DEC
23029: ST_TO_ADDR
23030: LD_VAR 0 5
23034: PUSH
23035: FOR_TO
23036: IFFALSE 23088
// begin if freeSlots > 0 then
23038: LD_VAR 0 4
23042: PUSH
23043: LD_INT 0
23045: GREATER
23046: IFFALSE 23084
// begin ComEnterUnit ( tmp [ i ] , ru2_bar1 ) ;
23048: LD_VAR 0 5
23052: PUSH
23053: LD_VAR 0 2
23057: ARRAY
23058: PPUSH
23059: LD_EXP 70
23063: PPUSH
23064: CALL_OW 120
// freeSlots = freeSlots - 1 ;
23068: LD_ADDR_VAR 0 4
23072: PUSH
23073: LD_VAR 0 4
23077: PUSH
23078: LD_INT 1
23080: MINUS
23081: ST_TO_ADDR
// end else
23082: GO 23086
// break ;
23084: GO 23088
// end ;
23086: GO 23035
23088: POP
23089: POP
// wait ( 0 0$1 ) ;
23090: LD_INT 35
23092: PPUSH
23093: CALL_OW 67
// ComEnterUnit ( UnitFilter ( tmp , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) , kirovDepot ) ;
23097: LD_VAR 0 5
23101: PPUSH
23102: LD_INT 56
23104: PUSH
23105: EMPTY
23106: LIST
23107: PUSH
23108: LD_INT 3
23110: PUSH
23111: LD_INT 60
23113: PUSH
23114: EMPTY
23115: LIST
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 72
23129: PPUSH
23130: LD_EXP 68
23134: PPUSH
23135: CALL_OW 120
// ComWalk ( ruScout ) ;
23139: LD_EXP 65
23143: PPUSH
23144: CALL_OW 138
// wait ( 0 0$1 ) ;
23148: LD_INT 35
23150: PPUSH
23151: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
23155: LD_EXP 65
23159: PUSH
23160: LD_EXP 63
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PPUSH
23169: LD_INT 99
23171: PPUSH
23172: LD_INT 37
23174: PPUSH
23175: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
23179: LD_EXP 65
23183: PUSH
23184: LD_EXP 63
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PPUSH
23193: LD_INT 88
23195: PPUSH
23196: LD_INT 60
23198: PPUSH
23199: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
23203: LD_EXP 65
23207: PUSH
23208: LD_EXP 63
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PPUSH
23217: LD_INT 129
23219: PPUSH
23220: LD_INT 99
23222: PPUSH
23223: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
23227: LD_EXP 63
23231: PUSH
23232: LD_EXP 65
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PPUSH
23241: LD_EXP 68
23245: PPUSH
23246: CALL_OW 180
// end ;
23250: LD_VAR 0 1
23254: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
23255: LD_EXP 25
23259: IFFALSE 23531
23261: GO 23263
23263: DISABLE
23264: LD_INT 0
23266: PPUSH
23267: PPUSH
23268: PPUSH
23269: PPUSH
23270: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
23271: LD_ADDR_VAR 0 4
23275: PUSH
23276: LD_VAR 0 4
23280: PUSH
23281: LD_EXP 62
23285: ADD
23286: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
23287: LD_ADDR_VAR 0 4
23291: PUSH
23292: LD_VAR 0 4
23296: PUSH
23297: LD_EXP 80
23301: ADD
23302: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
23303: LD_ADDR_VAR 0 4
23307: PUSH
23308: LD_VAR 0 4
23312: PUSH
23313: LD_EXP 72
23317: ADD
23318: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
23319: LD_ADDR_VAR 0 5
23323: PUSH
23324: LD_INT 18
23326: PPUSH
23327: LD_INT 22
23329: PUSH
23330: LD_INT 6
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 21
23339: PUSH
23340: LD_INT 1
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PPUSH
23351: CALL_OW 70
23355: PUSH
23356: LD_VAR 0 4
23360: DIFF
23361: ST_TO_ADDR
// pom = 6 ;
23362: LD_ADDR_VAR 0 3
23366: PUSH
23367: LD_INT 6
23369: ST_TO_ADDR
// if canTakeUnits then
23370: LD_VAR 0 5
23374: IFFALSE 23498
// for i = 1 to canTakeUnits do
23376: LD_ADDR_VAR 0 1
23380: PUSH
23381: DOUBLE
23382: LD_INT 1
23384: DEC
23385: ST_TO_ADDR
23386: LD_VAR 0 5
23390: PUSH
23391: FOR_TO
23392: IFFALSE 23496
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
23394: LD_VAR 0 5
23398: PUSH
23399: LD_VAR 0 1
23403: ARRAY
23404: PPUSH
23405: CALL_OW 257
23409: PUSH
23410: LD_INT 3
23412: NONEQUAL
23413: IFFALSE 23460
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23415: LD_VAR 0 5
23419: PUSH
23420: LD_VAR 0 1
23424: ARRAY
23425: PPUSH
23426: LD_EXP 24
23430: PPUSH
23431: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
23435: LD_VAR 0 5
23439: PUSH
23440: LD_VAR 0 1
23444: ARRAY
23445: PPUSH
23446: LD_INT 1
23448: PPUSH
23449: CALL_OW 183
// wait ( 0 0$1 ) ;
23453: LD_INT 35
23455: PPUSH
23456: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23460: LD_VAR 0 5
23464: PUSH
23465: LD_VAR 0 1
23469: ARRAY
23470: PPUSH
23471: LD_EXP 24
23475: PPUSH
23476: CALL_OW 120
// pom = pom - 1 ;
23480: LD_ADDR_VAR 0 3
23484: PUSH
23485: LD_VAR 0 3
23489: PUSH
23490: LD_INT 1
23492: MINUS
23493: ST_TO_ADDR
// end ;
23494: GO 23391
23496: POP
23497: POP
// if pom > 0 then
23498: LD_VAR 0 3
23502: PUSH
23503: LD_INT 0
23505: GREATER
23506: IFFALSE 23531
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
23508: LD_ADDR_EXP 82
23512: PUSH
23513: LD_EXP 82
23517: PPUSH
23518: LD_INT 3
23520: PPUSH
23521: LD_VAR 0 3
23525: PPUSH
23526: CALL_OW 1
23530: ST_TO_ADDR
// end ;
23531: PPOPN 5
23533: END
// every 0 0$1 trigger kirovTransportCargo and not endCutscene do
23534: LD_EXP 75
23538: PUSH
23539: LD_EXP 32
23543: NOT
23544: AND
23545: IFFALSE 23594
23547: GO 23549
23549: DISABLE
// begin enable ;
23550: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
23551: LD_EXP 75
23555: PPUSH
23556: LD_EXP 69
23560: PPUSH
23561: LD_INT 2
23563: PPUSH
23564: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
23568: LD_EXP 75
23572: PPUSH
23573: LD_EXP 68
23577: PPUSH
23578: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
23582: LD_EXP 75
23586: PPUSH
23587: LD_INT 100
23589: PPUSH
23590: CALL_OW 240
// end ;
23594: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
23595: LD_INT 78
23597: PPUSH
23598: LD_INT 112
23600: PPUSH
23601: LD_INT 3
23603: PPUSH
23604: CALL_OW 440
23608: IFFALSE 23662
23610: GO 23612
23612: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
23613: LD_INT 78
23615: PPUSH
23616: LD_INT 112
23618: PPUSH
23619: CALL_OW 84
// DialogueOn ;
23623: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
23627: LD_EXP 50
23631: PPUSH
23632: LD_STRING D2a-Bur-1
23634: PPUSH
23635: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
23639: LD_EXP 62
23643: PPUSH
23644: LD_STRING D2a-Kur-1
23646: PPUSH
23647: CALL_OW 94
// DialogueOff ;
23651: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
23655: LD_STRING M2
23657: PPUSH
23658: CALL_OW 337
// end ;
23662: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
23663: LD_EXP 13
23667: NOT
23668: IFFALSE 23876
23670: GO 23672
23672: DISABLE
23673: LD_INT 0
23675: PPUSH
// begin enable ;
23676: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
23677: LD_ADDR_VAR 0 1
23681: PUSH
23682: LD_INT 22
23684: PUSH
23685: LD_INT 3
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 21
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 23
23704: PUSH
23705: LD_INT 3
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: LD_INT 31
23717: PUSH
23718: LD_INT 21
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 31
23727: PUSH
23728: LD_INT 23
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: PPUSH
23746: CALL_OW 69
23750: PUSH
23751: FOR_IN
23752: IFFALSE 23874
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
23754: LD_VAR 0 1
23758: PPUSH
23759: LD_INT 48
23761: PPUSH
23762: LD_INT 81
23764: PPUSH
23765: CALL_OW 297
23769: PUSH
23770: LD_INT 7
23772: LESS
23773: IFFALSE 23872
// begin dialog_track = true ;
23775: LD_ADDR_EXP 13
23779: PUSH
23780: LD_INT 1
23782: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
23783: LD_INT 48
23785: PPUSH
23786: LD_INT 81
23788: PPUSH
23789: CALL_OW 86
// DialogueOn ;
23793: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
23797: LD_EXP 50
23801: PPUSH
23802: LD_STRING D5a-Bur-1
23804: PPUSH
23805: CALL_OW 88
// DialogueOff ;
23809: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
23813: LD_INT 82
23815: PPUSH
23816: LD_INT 3
23818: PPUSH
23819: CALL_OW 321
23823: PUSH
23824: LD_INT 0
23826: EQUAL
23827: IFFALSE 23842
// SetTech ( 82 , 3 , state_enabled ) ;
23829: LD_INT 82
23831: PPUSH
23832: LD_INT 3
23834: PPUSH
23835: LD_INT 1
23837: PPUSH
23838: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
23842: LD_INT 84
23844: PPUSH
23845: LD_INT 3
23847: PPUSH
23848: LD_INT 1
23850: PPUSH
23851: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
23855: LD_INT 16
23857: PPUSH
23858: LD_INT 3
23860: PPUSH
23861: LD_INT 1
23863: PPUSH
23864: CALL_OW 324
// exit ;
23868: POP
23869: POP
23870: GO 23876
// end ;
23872: GO 23751
23874: POP
23875: POP
// end ;
23876: PPOPN 1
23878: END
// every 5 5$30 do
23879: GO 23881
23881: DISABLE
// begin PrepareScholtze ;
23882: CALL 5462 0 0
// wait ( 0 0$2 ) ;
23886: LD_INT 70
23888: PPUSH
23889: CALL_OW 67
// DialogueOn ;
23893: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23897: LD_EXP 56
23901: PPUSH
23902: LD_STRING D4-Sch-1
23904: PPUSH
23905: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23909: LD_EXP 50
23913: PPUSH
23914: LD_STRING D4-Bur-1
23916: PPUSH
23917: CALL_OW 88
// DialogueOff ;
23921: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23925: LD_STRING M4
23927: PPUSH
23928: CALL_OW 337
// ComHold ( Scholtze ) ;
23932: LD_EXP 56
23936: PPUSH
23937: CALL_OW 140
// scholtzeSpawned = true ;
23941: LD_ADDR_EXP 9
23945: PUSH
23946: LD_INT 1
23948: ST_TO_ADDR
// end ;
23949: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23950: LD_INT 3
23952: PPUSH
23953: LD_EXP 56
23957: PPUSH
23958: CALL_OW 292
23962: PUSH
23963: LD_EXP 9
23967: AND
23968: PUSH
23969: LD_EXP 10
23973: NOT
23974: AND
23975: IFFALSE 24156
23977: GO 23979
23979: DISABLE
// begin scholtzeSaved = true ;
23980: LD_ADDR_EXP 10
23984: PUSH
23985: LD_INT 1
23987: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
23988: LD_EXP 56
23992: PPUSH
23993: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
23997: LD_EXP 56
24001: PPUSH
24002: LD_INT 3
24004: PPUSH
24005: CALL_OW 235
// DialogueOn ;
24009: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
24013: LD_EXP 56
24017: PPUSH
24018: LD_STRING D4a-Sch-1
24020: PPUSH
24021: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
24025: LD_EXP 50
24029: PPUSH
24030: LD_STRING D4a-Bur-1
24032: PPUSH
24033: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
24037: LD_EXP 56
24041: PPUSH
24042: LD_STRING D4a-Sch-2
24044: PPUSH
24045: CALL_OW 88
// DialogueOff ;
24049: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
24053: LD_EXP 86
24057: PPUSH
24058: LD_INT 28
24060: PPUSH
24061: LD_INT 36
24063: PPUSH
24064: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
24068: LD_STRING MScholtzeOut
24070: PPUSH
24071: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
24075: LD_INT 49
24077: PPUSH
24078: LD_INT 3
24080: PPUSH
24081: LD_INT 1
24083: PPUSH
24084: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
24088: LD_INT 51
24090: PPUSH
24091: LD_INT 3
24093: PPUSH
24094: LD_INT 1
24096: PPUSH
24097: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
24101: LD_INT 82
24103: PPUSH
24104: LD_INT 3
24106: PPUSH
24107: CALL_OW 321
24111: PUSH
24112: LD_INT 0
24114: EQUAL
24115: IFFALSE 24130
// SetTech ( 82 , 3 , state_enabled ) ;
24117: LD_INT 82
24119: PPUSH
24120: LD_INT 3
24122: PPUSH
24123: LD_INT 1
24125: PPUSH
24126: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
24130: LD_INT 83
24132: PPUSH
24133: LD_INT 3
24135: PPUSH
24136: LD_INT 1
24138: PPUSH
24139: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
24143: LD_INT 19
24145: PPUSH
24146: LD_INT 3
24148: PPUSH
24149: LD_INT 1
24151: PPUSH
24152: CALL_OW 324
// end ;
24156: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
24157: LD_EXP 56
24161: PPUSH
24162: CALL_OW 305
24166: PUSH
24167: LD_EXP 10
24171: NOT
24172: AND
24173: IFFALSE 24182
24175: GO 24177
24177: DISABLE
// PrepareAmericanPatrol ;
24178: CALL 6398 0 0
24182: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
24183: LD_EXP 56
24187: PPUSH
24188: CALL_OW 305
24192: PUSH
24193: LD_EXP 56
24197: PPUSH
24198: CALL_OW 255
24202: PUSH
24203: LD_INT 8
24205: EQUAL
24206: AND
24207: PUSH
24208: LD_EXP 48
24212: PUSH
24213: LD_INT 35
24215: GREATER
24216: AND
24217: IFFALSE 24393
24219: GO 24221
24221: DISABLE
24222: LD_INT 0
24224: PPUSH
24225: PPUSH
// begin enable ;
24226: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
24227: LD_ADDR_EXP 48
24231: PUSH
24232: LD_EXP 48
24236: PUSH
24237: LD_INT 35
24239: MINUS
24240: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
24241: LD_ADDR_VAR 0 1
24245: PUSH
24246: LD_INT 22
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 25
24258: PUSH
24259: LD_INT 12
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PPUSH
24270: CALL_OW 69
24274: PUSH
24275: FOR_IN
24276: IFFALSE 24315
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24278: LD_VAR 0 1
24282: PPUSH
24283: LD_EXP 56
24287: PPUSH
24288: CALL_OW 250
24292: PPUSH
24293: LD_EXP 56
24297: PPUSH
24298: CALL_OW 251
24302: PPUSH
24303: LD_INT 12
24305: PPUSH
24306: LD_INT 0
24308: PPUSH
24309: CALL 10285 0 5
24313: GO 24275
24315: POP
24316: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
24317: LD_ADDR_VAR 0 2
24321: PUSH
24322: LD_INT 22
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 14
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PPUSH
24346: CALL_OW 69
24350: PUSH
24351: FOR_IN
24352: IFFALSE 24391
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24354: LD_VAR 0 2
24358: PPUSH
24359: LD_EXP 56
24363: PPUSH
24364: CALL_OW 250
24368: PPUSH
24369: LD_EXP 56
24373: PPUSH
24374: CALL_OW 251
24378: PPUSH
24379: LD_INT 12
24381: PPUSH
24382: LD_INT 0
24384: PPUSH
24385: CALL 10285 0 5
24389: GO 24351
24391: POP
24392: POP
// end ;
24393: PPOPN 2
24395: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
24396: LD_INT 1
24398: PPUSH
24399: LD_EXP 56
24403: PPUSH
24404: CALL_OW 292
24408: PUSH
24409: LD_EXP 86
24413: AND
24414: PUSH
24415: LD_EXP 10
24419: NOT
24420: AND
24421: IFFALSE 24575
24423: GO 24425
24425: DISABLE
// begin enable ;
24426: ENABLE
// if not IsPlaced ( Scholtze ) then
24427: LD_EXP 56
24431: PPUSH
24432: CALL_OW 305
24436: NOT
24437: IFFALSE 24441
// exit ;
24439: GO 24575
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
24441: LD_EXP 86
24445: PUSH
24446: LD_INT 1
24448: ARRAY
24449: PPUSH
24450: CALL_OW 320
24454: PUSH
24455: LD_EXP 56
24459: EQUAL
24460: PUSH
24461: LD_EXP 86
24465: PUSH
24466: LD_INT 2
24468: ARRAY
24469: PPUSH
24470: CALL_OW 320
24474: PUSH
24475: LD_EXP 56
24479: EQUAL
24480: OR
24481: IFFALSE 24575
// begin DialogueOn ;
24483: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
24487: LD_EXP 56
24491: PPUSH
24492: LD_STRING D4b-Sch-1
24494: PPUSH
24495: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
24499: LD_EXP 86
24503: PUSH
24504: LD_INT 2
24506: ARRAY
24507: PPUSH
24508: LD_STRING D4b-Sol1-1
24510: PPUSH
24511: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
24515: LD_EXP 86
24519: PUSH
24520: LD_INT 1
24522: ARRAY
24523: PPUSH
24524: LD_STRING D4b-Sol2-1
24526: PPUSH
24527: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
24531: LD_EXP 56
24535: PPUSH
24536: LD_STRING D4b-Sch-2
24538: PPUSH
24539: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
24543: LD_EXP 50
24547: PPUSH
24548: LD_STRING D4b-Bur-2
24550: PPUSH
24551: CALL_OW 88
// DialogueOff ;
24555: CALL_OW 7
// Killunit ( Scholtze ) ;
24559: LD_EXP 56
24563: PPUSH
24564: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
24568: LD_STRING MScholtzeDel
24570: PPUSH
24571: CALL_OW 337
// end ; end ;
24575: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
24576: LD_INT 0
24578: PPUSH
24579: PPUSH
24580: PPUSH
// dialog_workshop = true ;
24581: LD_ADDR_EXP 11
24585: PUSH
24586: LD_INT 1
24588: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
24589: LD_INT 22
24591: PUSH
24592: LD_INT 3
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 30
24601: PUSH
24602: LD_INT 26
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PPUSH
24613: CALL_OW 69
24617: NOT
24618: IFFALSE 25007
// begin CenterNowOnUnits ( building ) ;
24620: LD_VAR 0 1
24624: PPUSH
24625: CALL_OW 87
// DialogueOn ;
24629: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
24633: LD_EXP 50
24637: PPUSH
24638: LD_STRING D3aa-Bur-1
24640: PPUSH
24641: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
24645: LD_EXP 56
24649: PPUSH
24650: CALL_OW 302
24654: PUSH
24655: LD_EXP 56
24659: PPUSH
24660: CALL_OW 255
24664: PUSH
24665: LD_INT 3
24667: EQUAL
24668: AND
24669: IFFALSE 24685
// Say ( Scholtze , D3aa-Sch-1 ) else
24671: LD_EXP 56
24675: PPUSH
24676: LD_STRING D3aa-Sch-1
24678: PPUSH
24679: CALL_OW 88
24683: GO 24991
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24685: LD_ADDR_VAR 0 3
24689: PUSH
24690: LD_INT 22
24692: PUSH
24693: LD_INT 3
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 21
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 25
24712: PUSH
24713: LD_INT 4
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 26
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 50
24732: PUSH
24733: EMPTY
24734: LIST
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: PPUSH
24743: CALL_OW 69
24747: PUSH
24748: LD_EXP 50
24752: PUSH
24753: LD_EXP 51
24757: PUSH
24758: LD_EXP 53
24762: PUSH
24763: LD_EXP 54
24767: PUSH
24768: LD_EXP 55
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: DIFF
24780: ST_TO_ADDR
// if maleSci then
24781: LD_VAR 0 3
24785: IFFALSE 24805
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
24787: LD_VAR 0 3
24791: PUSH
24792: LD_INT 1
24794: ARRAY
24795: PPUSH
24796: LD_STRING D3aa-Sci1-1
24798: PPUSH
24799: CALL_OW 88
24803: GO 24991
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24805: LD_ADDR_VAR 0 4
24809: PUSH
24810: LD_INT 22
24812: PUSH
24813: LD_INT 3
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 21
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 26
24832: PUSH
24833: LD_INT 1
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 50
24842: PUSH
24843: EMPTY
24844: LIST
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: PPUSH
24852: CALL_OW 69
24856: PUSH
24857: LD_EXP 50
24861: PUSH
24862: LD_EXP 51
24866: PUSH
24867: LD_EXP 53
24871: PUSH
24872: LD_EXP 54
24876: PUSH
24877: LD_EXP 55
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: DIFF
24889: ST_TO_ADDR
// if maleOthers then
24890: LD_VAR 0 4
24894: IFFALSE 24914
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24896: LD_VAR 0 4
24900: PUSH
24901: LD_INT 1
24903: ARRAY
24904: PPUSH
24905: LD_STRING D3aa-Sci1-1
24907: PPUSH
24908: CALL_OW 88
24912: GO 24991
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24914: LD_ADDR_VAR 0 4
24918: PUSH
24919: LD_INT 22
24921: PUSH
24922: LD_INT 3
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 21
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 26
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 50
24951: PUSH
24952: EMPTY
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: PPUSH
24961: CALL_OW 69
24965: PUSH
24966: LD_EXP 50
24970: PUSH
24971: EMPTY
24972: LIST
24973: DIFF
24974: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
24975: LD_VAR 0 4
24979: PUSH
24980: LD_INT 1
24982: ARRAY
24983: PPUSH
24984: LD_STRING D3aa-Sci1-1
24986: PPUSH
24987: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
24991: LD_EXP 50
24995: PPUSH
24996: LD_STRING D3aa-Bur-2
24998: PPUSH
24999: CALL_OW 88
// DialogueOff ;
25003: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
25007: LD_STRING M3
25009: PPUSH
25010: CALL_OW 337
// end ;
25014: LD_VAR 0 2
25018: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
25019: LD_EXP 12
25023: NOT
25024: IFFALSE 25362
25026: GO 25028
25028: DISABLE
25029: LD_INT 0
25031: PPUSH
25032: PPUSH
// begin enable ;
25033: ENABLE
// for amUnit in amSupportTroops do
25034: LD_ADDR_VAR 0 1
25038: PUSH
25039: LD_EXP 85
25043: PUSH
25044: FOR_IN
25045: IFFALSE 25360
// begin if See ( 3 , amUnit ) then
25047: LD_INT 3
25049: PPUSH
25050: LD_VAR 0 1
25054: PPUSH
25055: CALL_OW 292
25059: IFFALSE 25358
// begin dialog_amSupportTroops = true ;
25061: LD_ADDR_EXP 12
25065: PUSH
25066: LD_INT 1
25068: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
25069: LD_VAR 0 1
25073: PPUSH
25074: CALL_OW 87
// DialogueOn ;
25078: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
25082: LD_ADDR_VAR 0 2
25086: PUSH
25087: LD_INT 22
25089: PUSH
25090: LD_INT 3
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 21
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 26
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 50
25119: PUSH
25120: EMPTY
25121: LIST
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: PPUSH
25129: CALL_OW 69
25133: PUSH
25134: LD_EXP 50
25138: PUSH
25139: LD_EXP 51
25143: PUSH
25144: LD_EXP 53
25148: PUSH
25149: LD_EXP 54
25153: PUSH
25154: LD_EXP 55
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: DIFF
25166: ST_TO_ADDR
// if randomMale then
25167: LD_VAR 0 2
25171: IFFALSE 25238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
25173: LD_INT 22
25175: PUSH
25176: LD_INT 3
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 21
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 26
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 50
25205: PUSH
25206: EMPTY
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: PPUSH
25215: CALL_OW 69
25219: PPUSH
25220: LD_STRING D3b-RSol1-1
25222: PPUSH
25223: LD_STRING 
25225: PPUSH
25226: LD_INT 0
25228: PPUSH
25229: LD_INT 1
25231: PPUSH
25232: CALL 7034 0 5
25236: GO 25315
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
25238: LD_ADDR_VAR 0 2
25242: PUSH
25243: LD_INT 22
25245: PUSH
25246: LD_INT 3
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 21
25255: PUSH
25256: LD_INT 1
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 26
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 50
25275: PUSH
25276: EMPTY
25277: LIST
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: PPUSH
25285: CALL_OW 69
25289: PUSH
25290: LD_EXP 50
25294: PUSH
25295: EMPTY
25296: LIST
25297: DIFF
25298: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
25299: LD_VAR 0 2
25303: PUSH
25304: LD_INT 1
25306: ARRAY
25307: PPUSH
25308: LD_STRING D3b-RSol1-1
25310: PPUSH
25311: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
25315: LD_EXP 51
25319: PPUSH
25320: CALL_OW 302
25324: IFFALSE 25338
// Say ( Gnyevko , D3b-Gny-1 ) ;
25326: LD_EXP 51
25330: PPUSH
25331: LD_STRING D3b-Gny-1
25333: PPUSH
25334: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
25338: LD_EXP 50
25342: PPUSH
25343: LD_STRING D3b-Bur-1
25345: PPUSH
25346: CALL_OW 88
// DialogueOff ;
25350: CALL_OW 7
// exit ;
25354: POP
25355: POP
25356: GO 25362
// end ; end ;
25358: GO 25044
25360: POP
25361: POP
// end ;
25362: PPOPN 2
25364: END
// every 2 2$0 trigger dialog_amSupportTroops do
25365: LD_EXP 12
25369: IFFALSE 25453
25371: GO 25373
25373: DISABLE
// begin if IsOK ( Kovalyuk ) then
25374: LD_EXP 53
25378: PPUSH
25379: CALL_OW 302
25383: IFFALSE 25397
// Say ( Kovalyuk , D3b-Kov-1 ) ;
25385: LD_EXP 53
25389: PPUSH
25390: LD_STRING D3b-Kov-1
25392: PPUSH
25393: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
25397: LD_INT 22
25399: PUSH
25400: LD_INT 3
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 21
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 26
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: LIST
25431: PPUSH
25432: CALL_OW 69
25436: PPUSH
25437: LD_STRING D3b-RSol1-2
25439: PPUSH
25440: LD_STRING 
25442: PPUSH
25443: LD_INT 0
25445: PPUSH
25446: LD_INT 0
25448: PPUSH
25449: CALL 7034 0 5
// end ;
25453: END
// every 1 trigger not endCutscene do
25454: LD_EXP 32
25458: NOT
25459: IFFALSE 25477
25461: GO 25463
25463: DISABLE
// begin enable ;
25464: ENABLE
// SetLives ( Kurin , 1000 ) ;
25465: LD_EXP 62
25469: PPUSH
25470: LD_INT 1000
25472: PPUSH
25473: CALL_OW 234
// end ;
25477: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
25478: LD_EXP 41
25482: PUSH
25483: LD_INT 35
25485: LESS
25486: IFFALSE 25714
25488: GO 25490
25490: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
25491: LD_EXP 62
25495: PPUSH
25496: CALL_OW 87
// InGameOn ;
25500: CALL_OW 8
// DialogueOn ;
25504: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
25508: LD_EXP 62
25512: PPUSH
25513: LD_STRING D5-Kur-1
25515: PPUSH
25516: CALL_OW 94
// case Query ( QVehicles ) of 1 :
25520: LD_STRING QVehicles
25522: PPUSH
25523: CALL_OW 97
25527: PUSH
25528: LD_INT 1
25530: DOUBLE
25531: EQUAL
25532: IFTRUE 25536
25534: GO 25579
25536: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
25537: LD_EXP 50
25541: PPUSH
25542: LD_STRING D6a-Bur-1
25544: PPUSH
25545: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
25549: LD_EXP 62
25553: PPUSH
25554: LD_STRING D6a-Kur-1
25556: PPUSH
25557: CALL_OW 94
// meetNearOmicronBase = true ;
25561: LD_ADDR_EXP 22
25565: PUSH
25566: LD_INT 1
25568: ST_TO_ADDR
// kurinCheckVehicles = true ;
25569: LD_ADDR_EXP 21
25573: PUSH
25574: LD_INT 1
25576: ST_TO_ADDR
// end ; 2 :
25577: GO 25706
25579: LD_INT 2
25581: DOUBLE
25582: EQUAL
25583: IFTRUE 25587
25585: GO 25634
25587: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
25588: LD_EXP 50
25592: PPUSH
25593: LD_STRING D6b-Bur-1
25595: PPUSH
25596: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
25600: LD_EXP 62
25604: PPUSH
25605: LD_STRING D6b-Kur-1
25607: PPUSH
25608: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
25612: LD_EXP 50
25616: PPUSH
25617: LD_STRING D6b-Bur-2
25619: PPUSH
25620: CALL_OW 88
// meetNearOmicronBase = true ;
25624: LD_ADDR_EXP 22
25628: PUSH
25629: LD_INT 1
25631: ST_TO_ADDR
// end ; 3 :
25632: GO 25706
25634: LD_INT 3
25636: DOUBLE
25637: EQUAL
25638: IFTRUE 25642
25640: GO 25705
25642: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
25643: LD_EXP 50
25647: PPUSH
25648: LD_STRING D6c-Bur-1
25650: PPUSH
25651: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
25655: LD_EXP 62
25659: PPUSH
25660: LD_STRING D6c-Kur-1
25662: PPUSH
25663: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
25667: LD_EXP 50
25671: PPUSH
25672: LD_STRING D6c-Bur-2
25674: PPUSH
25675: CALL_OW 88
// kurinGiveMoreTime = true ;
25679: LD_ADDR_EXP 16
25683: PUSH
25684: LD_INT 1
25686: ST_TO_ADDR
// kurinOpinion = 0 ;
25687: LD_ADDR_EXP 5
25691: PUSH
25692: LD_INT 0
25694: ST_TO_ADDR
// counterIndex = 4 ;
25695: LD_ADDR_EXP 91
25699: PUSH
25700: LD_INT 4
25702: ST_TO_ADDR
// end ; end ;
25703: GO 25706
25705: POP
// InGameOff ;
25706: CALL_OW 9
// DialogueOff ;
25710: CALL_OW 7
// end ;
25714: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
25715: LD_EXP 17
25719: PUSH
25720: LD_INT 35
25722: LESS
25723: PUSH
25724: LD_EXP 16
25728: AND
25729: IFFALSE 25762
25731: GO 25733
25733: DISABLE
// begin DialogueOn ;
25734: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
25738: LD_EXP 62
25742: PPUSH
25743: LD_STRING D6c-Kur-2
25745: PPUSH
25746: CALL_OW 94
// DialogueOff ;
25750: CALL_OW 7
// meetNearOmicronBase = true ;
25754: LD_ADDR_EXP 22
25758: PUSH
25759: LD_INT 1
25761: ST_TO_ADDR
// end ;
25762: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
25763: LD_EXP 22
25767: IFFALSE 26422
25769: GO 25771
25771: DISABLE
25772: LD_INT 0
25774: PPUSH
25775: PPUSH
25776: PPUSH
25777: PPUSH
25778: PPUSH
// begin mechs = [ ] ;
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: EMPTY
25785: ST_TO_ADDR
// vehs = [ ] ;
25786: LD_ADDR_VAR 0 4
25790: PUSH
25791: EMPTY
25792: ST_TO_ADDR
// haveVehs = 0 ;
25793: LD_ADDR_VAR 0 5
25797: PUSH
25798: LD_INT 0
25800: ST_TO_ADDR
// uc_side = 6 ;
25801: LD_ADDR_OWVAR 20
25805: PUSH
25806: LD_INT 6
25808: ST_TO_ADDR
// uc_nation = 3 ;
25809: LD_ADDR_OWVAR 21
25813: PUSH
25814: LD_INT 3
25816: ST_TO_ADDR
// for i := 1 to 2 do
25817: LD_ADDR_VAR 0 1
25821: PUSH
25822: DOUBLE
25823: LD_INT 1
25825: DEC
25826: ST_TO_ADDR
25827: LD_INT 2
25829: PUSH
25830: FOR_TO
25831: IFFALSE 25930
// begin PrepareMechanic ( false , 2 ) ;
25833: LD_INT 0
25835: PPUSH
25836: LD_INT 2
25838: PPUSH
25839: CALL_OW 383
// mech = CreateHuman ;
25843: LD_ADDR_VAR 0 2
25847: PUSH
25848: CALL_OW 44
25852: ST_TO_ADDR
// mechs = mechs ^ mech ;
25853: LD_ADDR_VAR 0 3
25857: PUSH
25858: LD_VAR 0 3
25862: PUSH
25863: LD_VAR 0 2
25867: ADD
25868: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
25869: LD_VAR 0 2
25873: PPUSH
25874: LD_EXP 68
25878: PPUSH
25879: CALL_OW 52
// ComExitBuilding ( mech ) ;
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL_OW 122
// wait ( 0 0$1 ) ;
25892: LD_INT 35
25894: PPUSH
25895: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25899: LD_VAR 0 2
25903: PPUSH
25904: LD_EXP 61
25908: PPUSH
25909: CALL_OW 250
25913: PPUSH
25914: LD_EXP 61
25918: PPUSH
25919: CALL_OW 251
25923: PPUSH
25924: CALL_OW 171
// end ;
25928: GO 25830
25930: POP
25931: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25932: LD_INT 22
25934: PUSH
25935: LD_INT 3
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 21
25944: PUSH
25945: LD_INT 2
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 23
25954: PUSH
25955: LD_INT 3
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: PPUSH
25967: CALL_OW 69
25971: PUSH
25972: LD_INT 22
25974: PUSH
25975: LD_INT 3
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 21
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PPUSH
25996: CALL_OW 69
26000: EQUAL
26001: IFFALSE 26011
// produceOnlyForYou = true ;
26003: LD_ADDR_EXP 20
26007: PUSH
26008: LD_INT 1
26010: ST_TO_ADDR
// wait ( 0 0$20 ) ;
26011: LD_INT 700
26013: PPUSH
26014: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
26018: LD_INT 22
26020: PUSH
26021: LD_INT 3
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 21
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 23
26040: PUSH
26041: LD_INT 3
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 3
26050: PUSH
26051: LD_INT 34
26053: PUSH
26054: LD_INT 51
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: PPUSH
26071: CALL_OW 69
26075: PUSH
26076: LD_INT 22
26078: PUSH
26079: LD_INT 3
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 21
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PPUSH
26100: CALL_OW 69
26104: PUSH
26105: LD_INT 2
26107: PLUS
26108: GREATEREQUAL
26109: IFFALSE 26392
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
26111: LD_ADDR_VAR 0 4
26115: PUSH
26116: LD_VAR 0 4
26120: PUSH
26121: LD_INT 22
26123: PUSH
26124: LD_INT 3
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 21
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 23
26143: PUSH
26144: LD_INT 3
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 3
26153: PUSH
26154: LD_INT 34
26156: PUSH
26157: LD_INT 51
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 59
26173: PUSH
26174: EMPTY
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: PPUSH
26188: CALL_OW 69
26192: PUSH
26193: LD_INT 1
26195: ARRAY
26196: ADD
26197: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
26198: LD_ADDR_VAR 0 4
26202: PUSH
26203: LD_VAR 0 4
26207: PUSH
26208: LD_INT 22
26210: PUSH
26211: LD_INT 3
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 21
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 23
26230: PUSH
26231: LD_INT 3
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 3
26240: PUSH
26241: LD_INT 34
26243: PUSH
26244: LD_INT 51
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: LD_INT 59
26260: PUSH
26261: EMPTY
26262: LIST
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: PPUSH
26275: CALL_OW 69
26279: PUSH
26280: LD_INT 2
26282: ARRAY
26283: ADD
26284: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
26285: LD_ADDR_EXP 77
26289: PUSH
26290: LD_EXP 77
26294: PUSH
26295: LD_VAR 0 4
26299: ADD
26300: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
26301: LD_VAR 0 4
26305: PPUSH
26306: LD_INT 6
26308: PPUSH
26309: CALL_OW 235
// produceMoreVehicles = true ;
26313: LD_ADDR_EXP 19
26317: PUSH
26318: LD_INT 1
26320: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
26321: LD_VAR 0 3
26325: PUSH
26326: LD_INT 1
26328: ARRAY
26329: PPUSH
26330: LD_VAR 0 4
26334: PUSH
26335: LD_INT 1
26337: ARRAY
26338: PPUSH
26339: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
26343: LD_VAR 0 3
26347: PUSH
26348: LD_INT 2
26350: ARRAY
26351: PPUSH
26352: LD_VAR 0 4
26356: PUSH
26357: LD_INT 2
26359: ARRAY
26360: PPUSH
26361: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
26365: LD_EXP 21
26369: PUSH
26370: LD_EXP 5
26374: PUSH
26375: LD_INT 0
26377: EQUAL
26378: NOT
26379: AND
26380: IFFALSE 26390
// kurinOpinion = 1 ;
26382: LD_ADDR_EXP 5
26386: PUSH
26387: LD_INT 1
26389: ST_TO_ADDR
// end else
26390: GO 26422
// begin if kurinCheckVehicles then
26392: LD_EXP 21
26396: IFFALSE 26422
// begin DialogueOn ;
26398: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
26402: LD_EXP 62
26406: PPUSH
26407: LD_STRING D6d-Kur-1
26409: PPUSH
26410: CALL_OW 94
// DialogueOff ;
26414: CALL_OW 7
// Lose_Vehicles ;
26418: CALL 20199 0 0
// end ; end ; end ;
26422: PPOPN 5
26424: END
// every 0 0$1 trigger meetNearOmicronBase do
26425: LD_EXP 22
26429: IFFALSE 26649
26431: GO 26433
26433: DISABLE
// begin spawnCrates = false ;
26434: LD_ADDR_EXP 8
26438: PUSH
26439: LD_INT 0
26441: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
26442: LD_INT 6
26444: PPUSH
26445: LD_INT 1
26447: PPUSH
26448: LD_INT 2
26450: PPUSH
26451: LD_INT 1
26453: PPUSH
26454: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
26458: LD_INT 0
26460: PPUSH
26461: LD_INT 3
26463: PPUSH
26464: LD_INT 0
26466: PPUSH
26467: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
26471: LD_STRING M3a
26473: PPUSH
26474: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
26478: LD_STRING M5
26480: PPUSH
26481: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
26485: LD_INT 15
26487: PPUSH
26488: LD_INT 1
26490: PPUSH
26491: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
26495: LD_EXP 77
26499: PPUSH
26500: LD_INT 75
26502: PPUSH
26503: LD_INT 38
26505: PPUSH
26506: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
26510: LD_EXP 76
26514: PPUSH
26515: LD_INT 75
26517: PPUSH
26518: LD_INT 38
26520: PPUSH
26521: CALL_OW 111
// counterIndex = 2 ;
26525: LD_ADDR_EXP 91
26529: PUSH
26530: LD_INT 2
26532: ST_TO_ADDR
// if not kurinOpinion = 0 then
26533: LD_EXP 5
26537: PUSH
26538: LD_INT 0
26540: EQUAL
26541: NOT
26542: IFFALSE 26552
// kurinOpinion = 1 ;
26544: LD_ADDR_EXP 5
26548: PUSH
26549: LD_INT 1
26551: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
26552: LD_INT 1
26554: PPUSH
26555: LD_INT 1
26557: PPUSH
26558: LD_INT 22
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 21
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PPUSH
26582: CALL_OW 69
26586: PPUSH
26587: LD_INT 13
26589: PPUSH
26590: LD_INT 28
26592: PPUSH
26593: LD_INT 17
26595: PPUSH
26596: LD_INT 29
26598: PPUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 3
26604: PUSH
26605: LD_INT 4
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: PUSH
26613: LD_OWVAR 67
26617: ARRAY
26618: PPUSH
26619: LD_INT 2
26621: PUSH
26622: LD_INT 3
26624: PUSH
26625: LD_INT 4
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: LIST
26632: PUSH
26633: LD_OWVAR 67
26637: ARRAY
26638: PPUSH
26639: LD_INT 0
26641: PPUSH
26642: LD_INT 0
26644: PPUSH
26645: CALL 12165 0 11
// end ;
26649: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
26650: LD_EXP 18
26654: PUSH
26655: LD_INT 35
26657: LESS
26658: PUSH
26659: LD_EXP 91
26663: PUSH
26664: LD_INT 2
26666: EQUAL
26667: AND
26668: IFFALSE 26717
26670: GO 26672
26672: DISABLE
// begin DialogueOn ;
26673: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
26677: LD_EXP 62
26681: PPUSH
26682: LD_STRING D7a-Kur-1
26684: PPUSH
26685: CALL_OW 94
// DialogueOff ;
26689: CALL_OW 7
// counterIndex = 3 ;
26693: LD_ADDR_EXP 91
26697: PUSH
26698: LD_INT 3
26700: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
26701: LD_ADDR_EXP 18
26705: PUSH
26706: LD_INT 4200
26708: ST_TO_ADDR
// kurinOpinion = 0 ;
26709: LD_ADDR_EXP 5
26713: PUSH
26714: LD_INT 0
26716: ST_TO_ADDR
// end ;
26717: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
26718: LD_EXP 18
26722: PUSH
26723: LD_INT 35
26725: LESS
26726: PUSH
26727: LD_EXP 91
26731: PUSH
26732: LD_INT 3
26734: EQUAL
26735: AND
26736: IFFALSE 26745
26738: GO 26740
26740: DISABLE
// Lose_Delay ;
26741: CALL 20229 0 0
26745: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26746: LD_EXP 22
26750: PUSH
26751: LD_INT 15
26753: PPUSH
26754: LD_INT 22
26756: PUSH
26757: LD_INT 3
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 21
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PPUSH
26778: CALL_OW 71
26782: PUSH
26783: LD_INT 0
26785: EQUAL
26786: AND
26787: IFFALSE 26875
26789: GO 26791
26791: DISABLE
// begin counterEnable = false ;
26792: LD_ADDR_EXP 90
26796: PUSH
26797: LD_INT 0
26799: ST_TO_ADDR
// Display_strings = [ ] ;
26800: LD_ADDR_OWVAR 47
26804: PUSH
26805: EMPTY
26806: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
26807: LD_INT 15
26809: PPUSH
26810: LD_INT 0
26812: PPUSH
26813: CALL_OW 424
// canExitBattlefield = false ;
26817: LD_ADDR_EXP 27
26821: PUSH
26822: LD_INT 0
26824: ST_TO_ADDR
// DialogueOn ;
26825: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
26829: LD_EXP 50
26833: PPUSH
26834: LD_STRING D7-Bur-1
26836: PPUSH
26837: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
26841: LD_EXP 62
26845: PPUSH
26846: LD_STRING D7-Kur-1
26848: PPUSH
26849: CALL_OW 94
// DialogueOff ;
26853: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
26857: LD_STRING M5a
26859: PPUSH
26860: CALL_OW 337
// Query ( QRefuel ) ;
26864: LD_STRING QRefuel
26866: PPUSH
26867: CALL_OW 97
// KirovAttackOmicron ;
26871: CALL 17955 0 0
// end ;
26875: END
// every 1 trigger not canExitBattlefield do var unit ;
26876: LD_EXP 27
26880: NOT
26881: IFFALSE 27050
26883: GO 26885
26885: DISABLE
26886: LD_INT 0
26888: PPUSH
// begin enable ;
26889: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26890: LD_ADDR_VAR 0 1
26894: PUSH
26895: LD_INT 22
26897: PUSH
26898: LD_INT 3
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 2
26907: PUSH
26908: LD_INT 21
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 21
26920: PUSH
26921: LD_INT 2
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PPUSH
26937: CALL_OW 69
26941: PUSH
26942: FOR_IN
26943: IFFALSE 27048
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26945: LD_VAR 0 1
26949: PPUSH
26950: LD_INT 26
26952: PPUSH
26953: CALL_OW 308
26957: NOT
26958: PUSH
26959: LD_VAR 0 1
26963: PPUSH
26964: LD_INT 21
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PPUSH
26974: CALL_OW 72
26978: PUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 313
26988: OR
26989: AND
26990: IFFALSE 27046
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
26992: LD_VAR 0 1
26996: PPUSH
26997: LD_INT 26
26999: PPUSH
27000: CALL_OW 113
// if not dialog_stop then
27004: LD_EXP 14
27008: NOT
27009: IFFALSE 27046
// begin dialog_stop = true ;
27011: LD_ADDR_EXP 14
27015: PUSH
27016: LD_INT 1
27018: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27019: LD_EXP 62
27023: PPUSH
27024: LD_STRING D12-Kur-1
27026: PPUSH
27027: CALL_OW 88
// wait ( 0 0$5 ) ;
27031: LD_INT 175
27033: PPUSH
27034: CALL_OW 67
// dialog_stop = false ;
27038: LD_ADDR_EXP 14
27042: PUSH
27043: LD_INT 0
27045: ST_TO_ADDR
// end ; end ;
27046: GO 26942
27048: POP
27049: POP
// end ;
27050: PPOPN 1
27052: END
// every 1 do var unit ;
27053: GO 27055
27055: DISABLE
27056: LD_INT 0
27058: PPUSH
// begin enable ;
27059: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
27060: LD_ADDR_VAR 0 1
27064: PUSH
27065: LD_INT 22
27067: PUSH
27068: LD_INT 3
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: LD_INT 21
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 21
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: LIST
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PPUSH
27107: CALL_OW 69
27111: PUSH
27112: FOR_IN
27113: IFFALSE 27188
// if IsInArea ( unit , SecondKurinBase ) then
27115: LD_VAR 0 1
27119: PPUSH
27120: LD_INT 20
27122: PPUSH
27123: CALL_OW 308
27127: IFFALSE 27186
// begin ComMoveXY ( unit , 200 , 114 ) ;
27129: LD_VAR 0 1
27133: PPUSH
27134: LD_INT 200
27136: PPUSH
27137: LD_INT 114
27139: PPUSH
27140: CALL_OW 111
// if not dialog_stop then
27144: LD_EXP 14
27148: NOT
27149: IFFALSE 27186
// begin dialog_stop = true ;
27151: LD_ADDR_EXP 14
27155: PUSH
27156: LD_INT 1
27158: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27159: LD_EXP 62
27163: PPUSH
27164: LD_STRING D12-Kur-1
27166: PPUSH
27167: CALL_OW 88
// wait ( 0 0$5 ) ;
27171: LD_INT 175
27173: PPUSH
27174: CALL_OW 67
// dialog_stop = false ;
27178: LD_ADDR_EXP 14
27182: PUSH
27183: LD_INT 0
27185: ST_TO_ADDR
// end ; end ;
27186: GO 27112
27188: POP
27189: POP
// end ;
27190: PPOPN 1
27192: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
27193: LD_EXP 22
27197: NOT
27198: PUSH
27199: LD_INT 290
27201: PPUSH
27202: CALL_OW 302
27206: AND
27207: IFFALSE 27717
27209: GO 27211
27211: DISABLE
27212: LD_INT 0
27214: PPUSH
27215: PPUSH
27216: PPUSH
27217: PPUSH
27218: PPUSH
27219: PPUSH
27220: PPUSH
// begin enable ;
27221: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
27222: LD_ADDR_VAR 0 2
27226: PUSH
27227: LD_INT 13
27229: PPUSH
27230: LD_INT 22
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 2
27242: PUSH
27243: LD_INT 21
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 21
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 21
27265: PUSH
27266: LD_INT 3
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 70
27287: PUSH
27288: FOR_IN
27289: IFFALSE 27715
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
27291: LD_VAR 0 2
27295: PPUSH
27296: LD_INT 22
27298: PUSH
27299: LD_INT 3
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 2
27308: PUSH
27309: LD_INT 21
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 21
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: LIST
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: PPUSH
27343: LD_VAR 0 2
27347: PPUSH
27348: CALL_OW 74
27352: PPUSH
27353: CALL_OW 296
27357: PUSH
27358: LD_INT 17
27360: LESS
27361: IFFALSE 27713
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
27363: LD_ADDR_VAR 0 6
27367: PUSH
27368: LD_INT 22
27370: PUSH
27371: LD_INT 3
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 50
27380: PUSH
27381: EMPTY
27382: LIST
27383: PUSH
27384: LD_INT 2
27386: PUSH
27387: LD_INT 21
27389: PUSH
27390: LD_INT 1
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 21
27399: PUSH
27400: LD_INT 2
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: PPUSH
27417: CALL_OW 69
27421: PPUSH
27422: LD_VAR 0 2
27426: PPUSH
27427: CALL_OW 74
27431: ST_TO_ADDR
// currentDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ 1 ] [ 1 ] , omicronBlockerPoints [ 1 ] [ 2 ] ) ;
27432: LD_ADDR_VAR 0 4
27436: PUSH
27437: LD_VAR 0 6
27441: PPUSH
27442: LD_EXP 49
27446: PUSH
27447: LD_INT 1
27449: ARRAY
27450: PUSH
27451: LD_INT 1
27453: ARRAY
27454: PPUSH
27455: LD_EXP 49
27459: PUSH
27460: LD_INT 1
27462: ARRAY
27463: PUSH
27464: LD_INT 2
27466: ARRAY
27467: PPUSH
27468: CALL_OW 297
27472: ST_TO_ADDR
// index = 1 ;
27473: LD_ADDR_VAR 0 7
27477: PUSH
27478: LD_INT 1
27480: ST_TO_ADDR
// for i = 2 to omicronBlockerPoints do
27481: LD_ADDR_VAR 0 1
27485: PUSH
27486: DOUBLE
27487: LD_INT 2
27489: DEC
27490: ST_TO_ADDR
27491: LD_EXP 49
27495: PUSH
27496: FOR_TO
27497: IFFALSE 27578
// begin tmpDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ i ] [ 1 ] , omicronBlockerPoints [ i ] [ 2 ] ) ;
27499: LD_ADDR_VAR 0 5
27503: PUSH
27504: LD_VAR 0 6
27508: PPUSH
27509: LD_EXP 49
27513: PUSH
27514: LD_VAR 0 1
27518: ARRAY
27519: PUSH
27520: LD_INT 1
27522: ARRAY
27523: PPUSH
27524: LD_EXP 49
27528: PUSH
27529: LD_VAR 0 1
27533: ARRAY
27534: PUSH
27535: LD_INT 2
27537: ARRAY
27538: PPUSH
27539: CALL_OW 297
27543: ST_TO_ADDR
// if tmpDist < currentDist then
27544: LD_VAR 0 5
27548: PUSH
27549: LD_VAR 0 4
27553: LESS
27554: IFFALSE 27576
// begin index = i ;
27556: LD_ADDR_VAR 0 7
27560: PUSH
27561: LD_VAR 0 1
27565: ST_TO_ADDR
// currentDist = tmpDist ;
27566: LD_ADDR_VAR 0 4
27570: PUSH
27571: LD_VAR 0 5
27575: ST_TO_ADDR
// end ; end ;
27576: GO 27496
27578: POP
27579: POP
// ComMoveXY ( nearUnit , omicronBlockerPoints [ index ] [ 1 ] , omicronBlockerPoints [ index ] [ 2 ] ) ;
27580: LD_VAR 0 6
27584: PPUSH
27585: LD_EXP 49
27589: PUSH
27590: LD_VAR 0 7
27594: ARRAY
27595: PUSH
27596: LD_INT 1
27598: ARRAY
27599: PPUSH
27600: LD_EXP 49
27604: PUSH
27605: LD_VAR 0 7
27609: ARRAY
27610: PUSH
27611: LD_INT 2
27613: ARRAY
27614: PPUSH
27615: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
27619: LD_ADDR_VAR 0 3
27623: PUSH
27624: LD_INT 1
27626: PPUSH
27627: LD_INT 2
27629: PPUSH
27630: CALL_OW 12
27634: ST_TO_ADDR
// if not dialog_stop then
27635: LD_EXP 14
27639: NOT
27640: IFFALSE 27713
// begin dialog_stop = true ;
27642: LD_ADDR_EXP 14
27646: PUSH
27647: LD_INT 1
27649: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
27650: LD_VAR 0 3
27654: PUSH
27655: LD_INT 1
27657: EQUAL
27658: PUSH
27659: LD_EXP 51
27663: PPUSH
27664: CALL_OW 302
27668: NOT
27669: OR
27670: IFFALSE 27686
// SayRadio ( Kurin , D11-Kur-1 ) else
27672: LD_EXP 62
27676: PPUSH
27677: LD_STRING D11-Kur-1
27679: PPUSH
27680: CALL_OW 94
27684: GO 27698
// Say ( Gnyevko , D11-Gny-1 ) ;
27686: LD_EXP 51
27690: PPUSH
27691: LD_STRING D11-Gny-1
27693: PPUSH
27694: CALL_OW 88
// wait ( 0 0$5 ) ;
27698: LD_INT 175
27700: PPUSH
27701: CALL_OW 67
// dialog_stop = false ;
27705: LD_ADDR_EXP 14
27709: PUSH
27710: LD_INT 0
27712: ST_TO_ADDR
// end ; end ;
27713: GO 27288
27715: POP
27716: POP
// end ;
27717: PPOPN 7
27719: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets , emptyVehicles ;
27720: LD_INT 290
27722: PPUSH
27723: CALL_OW 301
27727: PUSH
27728: LD_INT 22
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 21
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PPUSH
27752: CALL_OW 69
27756: PUSH
27757: LD_INT 5
27759: LESS
27760: AND
27761: IFFALSE 31058
27763: GO 27765
27765: DISABLE
27766: LD_INT 0
27768: PPUSH
27769: PPUSH
27770: PPUSH
27771: PPUSH
27772: PPUSH
27773: PPUSH
27774: PPUSH
27775: PPUSH
27776: PPUSH
// begin omicronSurrender = true ;
27777: LD_ADDR_EXP 26
27781: PUSH
27782: LD_INT 1
27784: ST_TO_ADDR
// canExitBattlefield = true ;
27785: LD_ADDR_EXP 27
27789: PUSH
27790: LD_INT 1
27792: ST_TO_ADDR
// enableOmicronAI = false ;
27793: LD_ADDR_EXP 30
27797: PUSH
27798: LD_INT 0
27800: ST_TO_ADDR
// endCutscene = true ;
27801: LD_ADDR_EXP 32
27805: PUSH
27806: LD_INT 1
27808: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
27809: LD_INT 1
27811: PPUSH
27812: LD_INT 3
27814: PPUSH
27815: LD_INT 1
27817: PPUSH
27818: LD_INT 0
27820: PPUSH
27821: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
27825: LD_INT 2
27827: PPUSH
27828: LD_INT 3
27830: PPUSH
27831: LD_INT 1
27833: PPUSH
27834: LD_INT 1
27836: PPUSH
27837: CALL_OW 80
// if not IsOk ( beriaBase ) or not beriaBase then
27841: LD_EXP 60
27845: PPUSH
27846: CALL_OW 302
27850: NOT
27851: PUSH
27852: LD_EXP 60
27856: NOT
27857: OR
27858: IFFALSE 27926
// beriaBase = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ b_warehouse ] ] ] ) [ 1 ] ;
27860: LD_ADDR_EXP 60
27864: PUSH
27865: LD_INT 25
27867: PPUSH
27868: LD_INT 22
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 21
27880: PUSH
27881: LD_INT 3
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: LD_INT 30
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: EMPTY
27905: LIST
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: PPUSH
27917: CALL_OW 70
27921: PUSH
27922: LD_INT 1
27924: ARRAY
27925: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
27926: LD_EXP 50
27930: PPUSH
27931: CALL_OW 87
// uc_side = 1 ;
27935: LD_ADDR_OWVAR 20
27939: PUSH
27940: LD_INT 1
27942: ST_TO_ADDR
// uc_nation = 1 ;
27943: LD_ADDR_OWVAR 21
27947: PUSH
27948: LD_INT 1
27950: ST_TO_ADDR
// hc_name :=  ;
27951: LD_ADDR_OWVAR 26
27955: PUSH
27956: LD_STRING 
27958: ST_TO_ADDR
// hc_gallery =  ;
27959: LD_ADDR_OWVAR 33
27963: PUSH
27964: LD_STRING 
27966: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
27967: LD_INT 1
27969: PPUSH
27970: LD_INT 1
27972: PPUSH
27973: CALL_OW 381
// tmpUs = CreateHuman ;
27977: LD_ADDR_VAR 0 2
27981: PUSH
27982: CALL_OW 44
27986: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
27987: LD_INT 22
27989: PUSH
27990: LD_INT 3
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PPUSH
27997: CALL_OW 69
28001: PPUSH
28002: CALL_OW 141
// InGameOn ;
28006: CALL_OW 8
// DialogueOn ;
28010: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
28014: LD_INT 26
28016: PPUSH
28017: LD_INT 33
28019: PPUSH
28020: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
28024: LD_VAR 0 2
28028: PPUSH
28029: LD_STRING D8-Sol1-1
28031: PPUSH
28032: CALL_OW 94
// if IsOk ( Kovalyuk ) then
28036: LD_EXP 53
28040: PPUSH
28041: CALL_OW 302
28045: IFFALSE 28059
// Say ( Kovalyuk , D8-Kov-1 ) ;
28047: LD_EXP 53
28051: PPUSH
28052: LD_STRING D8-Kov-1
28054: PPUSH
28055: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
28059: LD_ADDR_VAR 0 3
28063: PUSH
28064: LD_INT 22
28066: PUSH
28067: LD_INT 3
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 21
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 26
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: PPUSH
28099: CALL_OW 69
28103: PPUSH
28104: LD_STRING D8-RSol1-1
28106: PPUSH
28107: LD_STRING 
28109: PPUSH
28110: LD_INT 0
28112: PPUSH
28113: LD_INT 0
28115: PPUSH
28116: CALL 7034 0 5
28120: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
28121: LD_EXP 51
28125: PPUSH
28126: CALL_OW 302
28130: IFFALSE 28144
// Say ( Gnyevko , D8-Gny-1 ) ;
28132: LD_EXP 51
28136: PPUSH
28137: LD_STRING D8-Gny-1
28139: PPUSH
28140: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
28144: LD_INT 22
28146: PUSH
28147: LD_INT 3
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 21
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 26
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: PPUSH
28179: CALL_OW 69
28183: PUSH
28184: LD_VAR 0 3
28188: DIFF
28189: PPUSH
28190: LD_STRING D8-RSol2-1
28192: PPUSH
28193: LD_STRING 
28195: PPUSH
28196: LD_INT 0
28198: PPUSH
28199: LD_INT 0
28201: PPUSH
28202: CALL 7034 0 5
// DialogueOff ;
28206: CALL_OW 7
// PrepareArabian ;
28210: CALL 6556 0 0
// CenterNowOnXY ( 234 , 122 ) ;
28214: LD_INT 234
28216: PPUSH
28217: LD_INT 122
28219: PPUSH
28220: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
28224: LD_EXP 88
28228: PPUSH
28229: LD_INT 221
28231: PPUSH
28232: LD_INT 110
28234: PPUSH
28235: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28239: LD_EXP 89
28243: PPUSH
28244: LD_INT 21
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PPUSH
28254: CALL_OW 72
28258: PPUSH
28259: LD_INT 221
28261: PPUSH
28262: LD_INT 110
28264: PPUSH
28265: CALL_OW 114
// wait ( 0 0$7 ) ;
28269: LD_INT 245
28271: PPUSH
28272: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
28276: LD_EXP 89
28280: PPUSH
28281: LD_INT 221
28283: PPUSH
28284: LD_INT 110
28286: PPUSH
28287: CALL_OW 174
// wait ( 0 0$8 ) ;
28291: LD_INT 280
28293: PPUSH
28294: CALL_OW 67
// music_nat = nation_arabian ;
28298: LD_ADDR_OWVAR 71
28302: PUSH
28303: LD_INT 2
28305: ST_TO_ADDR
// music_class = music_combat ;
28306: LD_ADDR_OWVAR 72
28310: PUSH
28311: LD_INT 1
28313: ST_TO_ADDR
// game_speed = 4 ;
28314: LD_ADDR_OWVAR 65
28318: PUSH
28319: LD_INT 4
28321: ST_TO_ADDR
// DialogueOn ;
28322: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
28326: LD_EXP 83
28330: PPUSH
28331: LD_STRING D9-Gri-1
28333: PPUSH
28334: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
28338: LD_EXP 62
28342: PPUSH
28343: LD_STRING D9-Kur-1
28345: PPUSH
28346: CALL_OW 94
// DialogueOff ;
28350: CALL_OW 7
// CenterOnXY ( 221 , 109 ) ;
28354: LD_INT 221
28356: PPUSH
28357: LD_INT 109
28359: PPUSH
28360: CALL_OW 84
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
28364: LD_EXP 79
28368: PPUSH
28369: LD_INT 25
28371: PUSH
28372: LD_INT 2
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 72
28383: PPUSH
28384: LD_INT 158
28386: PPUSH
28387: LD_INT 105
28389: PPUSH
28390: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
28394: LD_EXP 79
28398: PPUSH
28399: LD_INT 25
28401: PUSH
28402: LD_INT 4
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PPUSH
28409: CALL_OW 72
28413: PPUSH
28414: LD_INT 158
28416: PPUSH
28417: LD_INT 105
28419: PPUSH
28420: CALL_OW 111
// ComMoveXY ( kirovTransportCargo , 158 , 105 ) ;
28424: LD_EXP 75
28428: PPUSH
28429: LD_INT 158
28431: PPUSH
28432: LD_INT 105
28434: PPUSH
28435: CALL_OW 111
// if not beriaDepot then
28439: LD_EXP 61
28443: NOT
28444: IFFALSE 28514
// begin AddComMoveToArea ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , EndMissionMeetArea ) ;
28446: LD_EXP 79
28450: PPUSH
28451: LD_INT 25
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 72
28465: PPUSH
28466: LD_INT 32
28468: PPUSH
28469: CALL_OW 173
// AddComMoveToArea ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , EndMissionMeetArea ) ;
28473: LD_EXP 79
28477: PPUSH
28478: LD_INT 25
28480: PUSH
28481: LD_INT 4
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 72
28492: PPUSH
28493: LD_INT 32
28495: PPUSH
28496: CALL_OW 173
// AddComMoveToArea ( kirovTransportCargo , EndMissionMeetArea ) ;
28500: LD_EXP 75
28504: PPUSH
28505: LD_INT 32
28507: PPUSH
28508: CALL_OW 173
// end else
28512: GO 28631
// begin AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28514: LD_EXP 79
28518: PPUSH
28519: LD_INT 25
28521: PUSH
28522: LD_INT 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PPUSH
28529: CALL_OW 72
28533: PPUSH
28534: LD_EXP 61
28538: PPUSH
28539: CALL_OW 250
28543: PPUSH
28544: LD_EXP 61
28548: PPUSH
28549: CALL_OW 251
28553: PPUSH
28554: CALL_OW 171
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28558: LD_EXP 79
28562: PPUSH
28563: LD_INT 25
28565: PUSH
28566: LD_INT 4
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PPUSH
28573: CALL_OW 72
28577: PPUSH
28578: LD_EXP 61
28582: PPUSH
28583: CALL_OW 250
28587: PPUSH
28588: LD_EXP 61
28592: PPUSH
28593: CALL_OW 251
28597: PPUSH
28598: CALL_OW 171
// AddComMoveXY ( kirovTransportCargo , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28602: LD_EXP 75
28606: PPUSH
28607: LD_EXP 61
28611: PPUSH
28612: CALL_OW 250
28616: PPUSH
28617: LD_EXP 61
28621: PPUSH
28622: CALL_OW 251
28626: PPUSH
28627: CALL_OW 171
// end ; wait ( 0 0$2.5 ) ;
28631: LD_INT 88
28633: PPUSH
28634: CALL_OW 67
// DialogueOn ;
28638: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
28642: LD_EXP 83
28646: PPUSH
28647: LD_STRING D9-Gri-2
28649: PPUSH
28650: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
28654: LD_EXP 62
28658: PPUSH
28659: LD_STRING D9-Kur-2
28661: PPUSH
28662: CALL_OW 94
// DialogueOff ;
28666: CALL_OW 7
// repeat wait ( 1 ) ;
28670: LD_INT 1
28672: PPUSH
28673: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
28677: LD_EXP 83
28681: PPUSH
28682: CALL_OW 256
28686: PUSH
28687: LD_INT 1000
28689: LESS
28690: IFFALSE 28670
// DialogueOn ;
28692: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
28696: LD_EXP 83
28700: PPUSH
28701: LD_STRING D9-Gri-3
28703: PPUSH
28704: CALL_OW 94
// DialogueOff ;
28708: CALL_OW 7
// KillUnit ( Grishko ) ;
28712: LD_EXP 83
28716: PPUSH
28717: CALL_OW 66
// wait ( 0 0$12 ) ;
28721: LD_INT 420
28723: PPUSH
28724: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
28728: LD_EXP 62
28732: PPUSH
28733: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
28737: LD_EXP 62
28741: PPUSH
28742: LD_STRING D9-Kur-3
28744: PPUSH
28745: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
28749: LD_INT 176
28751: PPUSH
28752: LD_INT 110
28754: PPUSH
28755: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28759: LD_EXP 89
28763: PPUSH
28764: LD_INT 21
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 72
28778: PPUSH
28779: LD_INT 221
28781: PPUSH
28782: LD_INT 110
28784: PPUSH
28785: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
28789: LD_EXP 88
28793: PPUSH
28794: LD_INT 161
28796: PPUSH
28797: LD_INT 109
28799: PPUSH
28800: CALL_OW 114
// wait ( 0 0$7 ) ;
28804: LD_INT 245
28806: PPUSH
28807: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
28811: LD_EXP 89
28815: PPUSH
28816: LD_INT 161
28818: PPUSH
28819: LD_INT 109
28821: PPUSH
28822: CALL_OW 114
// wait ( 0 0$11 ) ;
28826: LD_INT 385
28828: PPUSH
28829: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
28833: LD_EXP 62
28837: PPUSH
28838: LD_EXP 68
28842: PPUSH
28843: CALL_OW 120
// DialogueOn ;
28847: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
28851: LD_EXP 62
28855: PPUSH
28856: LD_STRING D9a-Kur-1
28858: PPUSH
28859: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
28863: LD_EXP 50
28867: PPUSH
28868: LD_STRING D9a-Bur-1
28870: PPUSH
28871: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
28875: LD_EXP 62
28879: PPUSH
28880: LD_STRING D9a-Kur-2
28882: PPUSH
28883: CALL_OW 94
// DialogueOff ;
28887: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
28891: LD_EXP 80
28895: PPUSH
28896: CALL_OW 122
// wait ( 0 0$1 ) ;
28900: LD_INT 35
28902: PPUSH
28903: CALL_OW 67
// if not beriaBase then
28907: LD_EXP 60
28911: NOT
28912: IFFALSE 28928
// ComMoveToArea ( survivorsArabianAttack , EndMissionMeetArea ) else
28914: LD_EXP 80
28918: PPUSH
28919: LD_INT 32
28921: PPUSH
28922: CALL_OW 113
28926: GO 28957
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28928: LD_EXP 80
28932: PPUSH
28933: LD_EXP 61
28937: PPUSH
28938: CALL_OW 250
28942: PPUSH
28943: LD_EXP 61
28947: PPUSH
28948: CALL_OW 251
28952: PPUSH
28953: CALL_OW 111
// immortalSurvivors = true ;
28957: LD_ADDR_EXP 28
28961: PUSH
28962: LD_INT 1
28964: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
28965: LD_ADDR_VAR 0 2
28969: PUSH
28970: LD_INT 22
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 21
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 50
28992: PUSH
28993: EMPTY
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: PPUSH
29001: CALL_OW 69
29005: PUSH
29006: FOR_IN
29007: IFFALSE 29020
// RemoveUnit ( tmpUS ) ;
29009: LD_VAR 0 2
29013: PPUSH
29014: CALL_OW 64
29018: GO 29006
29020: POP
29021: POP
// repeat wait ( 0 0$1 ) ;
29022: LD_INT 35
29024: PPUSH
29025: CALL_OW 67
// until IsDead ( Kurin ) ;
29029: LD_EXP 62
29033: PPUSH
29034: CALL_OW 301
29038: IFFALSE 29022
// wait ( 0 0$1 ) ;
29040: LD_INT 35
29042: PPUSH
29043: CALL_OW 67
// nearTurrets = [ ] ;
29047: LD_ADDR_VAR 0 8
29051: PUSH
29052: EMPTY
29053: ST_TO_ADDR
// turrets = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) ;
29054: LD_ADDR_VAR 0 7
29058: PUSH
29059: LD_INT 22
29061: PUSH
29062: LD_INT 6
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 30
29071: PUSH
29072: LD_INT 32
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 50
29081: PUSH
29082: EMPTY
29083: LIST
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: LIST
29089: PPUSH
29090: CALL_OW 69
29094: ST_TO_ADDR
// for i = 1 to 2 do
29095: LD_ADDR_VAR 0 1
29099: PUSH
29100: DOUBLE
29101: LD_INT 1
29103: DEC
29104: ST_TO_ADDR
29105: LD_INT 2
29107: PUSH
29108: FOR_TO
29109: IFFALSE 29240
// begin nearTurrets = nearTurrets ^ NearestUnitToXY ( turrets , 129 , 99 ) ;
29111: LD_ADDR_VAR 0 8
29115: PUSH
29116: LD_VAR 0 8
29120: PUSH
29121: LD_VAR 0 7
29125: PPUSH
29126: LD_INT 129
29128: PPUSH
29129: LD_INT 99
29131: PPUSH
29132: CALL_OW 73
29136: ADD
29137: ST_TO_ADDR
// turrets = turrets diff nearTurrets ;
29138: LD_ADDR_VAR 0 7
29142: PUSH
29143: LD_VAR 0 7
29147: PUSH
29148: LD_VAR 0 8
29152: DIFF
29153: ST_TO_ADDR
// tmpRu = UnitsInside ( nearTurrets [ i ] ) [ 1 ] ;
29154: LD_ADDR_VAR 0 3
29158: PUSH
29159: LD_VAR 0 8
29163: PUSH
29164: LD_VAR 0 1
29168: ARRAY
29169: PPUSH
29170: CALL_OW 313
29174: PUSH
29175: LD_INT 1
29177: ARRAY
29178: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
29179: LD_VAR 0 3
29183: PPUSH
29184: CALL_OW 122
// if not beriaDepot then
29188: LD_EXP 61
29192: NOT
29193: IFFALSE 29209
// AddComMoveToArea ( tmpRu , EndMissionMeetArea ) else
29195: LD_VAR 0 3
29199: PPUSH
29200: LD_INT 32
29202: PPUSH
29203: CALL_OW 173
29207: GO 29238
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29209: LD_VAR 0 3
29213: PPUSH
29214: LD_EXP 61
29218: PPUSH
29219: CALL_OW 250
29223: PPUSH
29224: LD_EXP 61
29228: PPUSH
29229: CALL_OW 251
29233: PPUSH
29234: CALL_OW 171
// end ;
29238: GO 29108
29240: POP
29241: POP
// tmpRu = UnitsInside ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) [ 1 ] ) ;
29242: LD_ADDR_VAR 0 3
29246: PUSH
29247: LD_INT 22
29249: PUSH
29250: LD_INT 6
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 21
29259: PUSH
29260: LD_INT 3
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: LD_INT 30
29272: PUSH
29273: LD_INT 6
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 30
29282: PUSH
29283: LD_INT 7
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: LIST
29299: PPUSH
29300: CALL_OW 69
29304: PUSH
29305: LD_INT 1
29307: ARRAY
29308: PPUSH
29309: CALL_OW 313
29313: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
29314: LD_VAR 0 3
29318: PPUSH
29319: CALL_OW 122
// if not beriaDepot then
29323: LD_EXP 61
29327: NOT
29328: IFFALSE 29344
// AddComMoveToArea ( tmpRu , EndMissionMeetArea ) else
29330: LD_VAR 0 3
29334: PPUSH
29335: LD_INT 32
29337: PPUSH
29338: CALL_OW 173
29342: GO 29373
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29344: LD_VAR 0 3
29348: PPUSH
29349: LD_EXP 61
29353: PPUSH
29354: CALL_OW 250
29358: PPUSH
29359: LD_EXP 61
29363: PPUSH
29364: CALL_OW 251
29368: PPUSH
29369: CALL_OW 171
// wait ( 0 0$14 ) ;
29373: LD_INT 490
29375: PPUSH
29376: CALL_OW 67
// ComExitVehicle ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
29380: LD_INT 26
29382: PPUSH
29383: LD_INT 22
29385: PUSH
29386: LD_INT 6
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 21
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PPUSH
29407: CALL_OW 70
29411: PPUSH
29412: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
29416: LD_ADDR_VAR 0 1
29420: PUSH
29421: LD_INT 26
29423: PPUSH
29424: LD_INT 22
29426: PUSH
29427: LD_INT 6
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 21
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PPUSH
29448: CALL_OW 70
29452: PUSH
29453: FOR_IN
29454: IFFALSE 29565
// begin if GetLives ( i ) < 15 then
29456: LD_VAR 0 1
29460: PPUSH
29461: CALL_OW 256
29465: PUSH
29466: LD_INT 15
29468: LESS
29469: IFFALSE 29534
// begin tmpRu = UnitsInside ( i ) ;
29471: LD_ADDR_VAR 0 3
29475: PUSH
29476: LD_VAR 0 1
29480: PPUSH
29481: CALL_OW 313
29485: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29486: LD_VAR 0 3
29490: PUSH
29491: LD_INT 1
29493: ARRAY
29494: PPUSH
29495: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29499: LD_VAR 0 3
29503: PUSH
29504: LD_INT 1
29506: ARRAY
29507: PPUSH
29508: LD_EXP 61
29512: PPUSH
29513: CALL_OW 250
29517: PPUSH
29518: LD_EXP 61
29522: PPUSH
29523: CALL_OW 251
29527: PPUSH
29528: CALL_OW 171
// end else
29532: GO 29563
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29534: LD_VAR 0 1
29538: PPUSH
29539: LD_EXP 61
29543: PPUSH
29544: CALL_OW 250
29548: PPUSH
29549: LD_EXP 61
29553: PPUSH
29554: CALL_OW 251
29558: PPUSH
29559: CALL_OW 171
// end ;
29563: GO 29453
29565: POP
29566: POP
// wait ( 0 0$1 ) ;
29567: LD_INT 35
29569: PPUSH
29570: CALL_OW 67
// AddComMoveXY ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29574: LD_INT 26
29576: PPUSH
29577: LD_INT 22
29579: PUSH
29580: LD_INT 6
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 21
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PPUSH
29601: CALL_OW 70
29605: PPUSH
29606: LD_EXP 61
29610: PPUSH
29611: CALL_OW 250
29615: PPUSH
29616: LD_EXP 61
29620: PPUSH
29621: CALL_OW 251
29625: PPUSH
29626: CALL_OW 171
// ComExitVehicle ( UnitsInside ( kirovTransportCargo ) [ 1 ] ) ;
29630: LD_EXP 75
29634: PPUSH
29635: CALL_OW 313
29639: PUSH
29640: LD_INT 1
29642: ARRAY
29643: PPUSH
29644: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
29648: LD_ADDR_VAR 0 1
29652: PUSH
29653: LD_INT 26
29655: PPUSH
29656: LD_INT 22
29658: PUSH
29659: LD_INT 3
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 21
29668: PUSH
29669: LD_INT 2
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PPUSH
29680: CALL_OW 70
29684: PUSH
29685: FOR_IN
29686: IFFALSE 29843
// begin if GetLives ( i ) < 15 then
29688: LD_VAR 0 1
29692: PPUSH
29693: CALL_OW 256
29697: PUSH
29698: LD_INT 15
29700: LESS
29701: IFFALSE 29791
// begin tmpRu = UnitsInside ( i ) ;
29703: LD_ADDR_VAR 0 3
29707: PUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: CALL_OW 313
29717: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29718: LD_VAR 0 3
29722: PUSH
29723: LD_INT 1
29725: ARRAY
29726: PPUSH
29727: CALL_OW 121
// if not beriaDepot then
29731: LD_EXP 61
29735: NOT
29736: IFFALSE 29756
// AddComMoveToArea ( tmpRu [ 1 ] , EndMissionMeetArea ) else
29738: LD_VAR 0 3
29742: PUSH
29743: LD_INT 1
29745: ARRAY
29746: PPUSH
29747: LD_INT 32
29749: PPUSH
29750: CALL_OW 173
29754: GO 29789
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29756: LD_VAR 0 3
29760: PUSH
29761: LD_INT 1
29763: ARRAY
29764: PPUSH
29765: LD_EXP 61
29769: PPUSH
29770: CALL_OW 250
29774: PPUSH
29775: LD_EXP 61
29779: PPUSH
29780: CALL_OW 251
29784: PPUSH
29785: CALL_OW 171
// end else
29789: GO 29841
// if not beriaDepot then
29791: LD_EXP 61
29795: NOT
29796: IFFALSE 29812
// AddComMoveToArea ( i , EndMissionMeetArea ) else
29798: LD_VAR 0 1
29802: PPUSH
29803: LD_INT 32
29805: PPUSH
29806: CALL_OW 173
29810: GO 29841
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29812: LD_VAR 0 1
29816: PPUSH
29817: LD_EXP 61
29821: PPUSH
29822: CALL_OW 250
29826: PPUSH
29827: LD_EXP 61
29831: PPUSH
29832: CALL_OW 251
29836: PPUSH
29837: CALL_OW 171
// end ;
29841: GO 29685
29843: POP
29844: POP
// wait ( 0 0$1 ) ;
29845: LD_INT 35
29847: PPUSH
29848: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29852: LD_INT 22
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 21
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PPUSH
29876: CALL_OW 69
29880: PPUSH
29881: LD_EXP 63
29885: PPUSH
29886: CALL_OW 250
29890: PPUSH
29891: LD_EXP 63
29895: PPUSH
29896: CALL_OW 251
29900: PPUSH
29901: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29905: LD_INT 22
29907: PUSH
29908: LD_INT 3
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 21
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PPUSH
29929: CALL_OW 69
29933: PPUSH
29934: LD_EXP 63
29938: PPUSH
29939: CALL_OW 250
29943: PPUSH
29944: LD_EXP 63
29948: PPUSH
29949: CALL_OW 251
29953: PPUSH
29954: CALL_OW 111
// ComMoveXY ( IsInUnit ( Burlak ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29958: LD_EXP 50
29962: PPUSH
29963: CALL_OW 310
29967: PPUSH
29968: LD_EXP 63
29972: PPUSH
29973: CALL_OW 250
29977: PPUSH
29978: LD_EXP 63
29982: PPUSH
29983: CALL_OW 251
29987: PPUSH
29988: CALL_OW 111
// if IsInUnit ( Burlak ) then
29992: LD_EXP 50
29996: PPUSH
29997: CALL_OW 310
30001: IFFALSE 30019
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) else
30003: LD_EXP 50
30007: PPUSH
30008: CALL_OW 310
30012: PPUSH
30013: CALL_OW 87
30017: GO 30028
// CenterNowOnUnits ( Burlak ) ;
30019: LD_EXP 50
30023: PPUSH
30024: CALL_OW 87
// wait ( 0 0$1 ) ;
30028: LD_INT 35
30030: PPUSH
30031: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 or ( IsInUnit ( Burlak ) < 8 and IsInUnit ( Burlak ) ) ;
30035: LD_EXP 50
30039: PPUSH
30040: LD_EXP 63
30044: PPUSH
30045: CALL_OW 296
30049: PUSH
30050: LD_INT 8
30052: LESS
30053: PUSH
30054: LD_EXP 50
30058: PPUSH
30059: CALL_OW 310
30063: PUSH
30064: LD_INT 8
30066: LESS
30067: PUSH
30068: LD_EXP 50
30072: PPUSH
30073: CALL_OW 310
30077: AND
30078: OR
30079: IFFALSE 29905
// if IsInUnit ( Burlak ) then
30081: LD_EXP 50
30085: PPUSH
30086: CALL_OW 310
30090: IFFALSE 30108
// begin ComExitVehicle ( Burlak ) ;
30092: LD_EXP 50
30096: PPUSH
30097: CALL_OW 121
// wait ( 0 0$1 ) ;
30101: LD_INT 35
30103: PPUSH
30104: CALL_OW 67
// end ; CenterNowOnUnits ( [ Burlak , Popov ] ) ;
30108: LD_EXP 50
30112: PUSH
30113: LD_EXP 63
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PPUSH
30122: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
30126: LD_EXP 50
30130: PPUSH
30131: LD_EXP 63
30135: PPUSH
30136: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
30140: LD_EXP 63
30144: PPUSH
30145: LD_EXP 50
30149: PPUSH
30150: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
30154: LD_EXP 50
30158: PPUSH
30159: LD_STRING D10a-Bur-1
30161: PPUSH
30162: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
30166: LD_EXP 63
30170: PPUSH
30171: LD_STRING D10a-Pop-1
30173: PPUSH
30174: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
30178: LD_EXP 50
30182: PPUSH
30183: LD_STRING D10a-Bur-2
30185: PPUSH
30186: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
30190: LD_EXP 63
30194: PPUSH
30195: LD_STRING D10a-Pop-2
30197: PPUSH
30198: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
30202: LD_EXP 50
30206: PPUSH
30207: LD_STRING D10a-Bur-3
30209: PPUSH
30210: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
30214: LD_EXP 63
30218: PPUSH
30219: LD_STRING D10a-Pop-3
30221: PPUSH
30222: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
30226: LD_EXP 50
30230: PPUSH
30231: LD_STRING D10a-Bur-4
30233: PPUSH
30234: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
30238: LD_EXP 63
30242: PPUSH
30243: LD_STRING D10a-Pop-4
30245: PPUSH
30246: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
30250: LD_EXP 50
30254: PPUSH
30255: LD_STRING D10a-Bur-5
30257: PPUSH
30258: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
30262: LD_EXP 63
30266: PPUSH
30267: LD_STRING D10a-Pop-5
30269: PPUSH
30270: CALL_OW 88
// survivorsArabianAttack = [ ] ;
30274: LD_ADDR_EXP 80
30278: PUSH
30279: EMPTY
30280: ST_TO_ADDR
// survivorsArabianAttack = FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
30281: LD_ADDR_EXP 80
30285: PUSH
30286: LD_INT 22
30288: PUSH
30289: LD_INT 6
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 50
30298: PUSH
30299: EMPTY
30300: LIST
30301: PUSH
30302: LD_INT 21
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: PPUSH
30317: CALL_OW 69
30321: ST_TO_ADDR
// emptyVehicles = [ ] ;
30322: LD_ADDR_VAR 0 9
30326: PUSH
30327: EMPTY
30328: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
30329: LD_ADDR_VAR 0 1
30333: PUSH
30334: LD_INT 22
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 21
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 50
30356: PUSH
30357: EMPTY
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: PPUSH
30365: CALL_OW 69
30369: PUSH
30370: FOR_IN
30371: IFFALSE 30406
// if GetFuel ( i ) >= 50 then
30373: LD_VAR 0 1
30377: PPUSH
30378: CALL_OW 261
30382: PUSH
30383: LD_INT 50
30385: GREATEREQUAL
30386: IFFALSE 30404
// emptyVehicles = emptyVehicles ^ i ;
30388: LD_ADDR_VAR 0 9
30392: PUSH
30393: LD_VAR 0 9
30397: PUSH
30398: LD_VAR 0 1
30402: ADD
30403: ST_TO_ADDR
30404: GO 30370
30406: POP
30407: POP
// if emptyVehicles then
30408: LD_VAR 0 9
30412: IFFALSE 30605
// for i = 1 to emptyVehicles do
30414: LD_ADDR_VAR 0 1
30418: PUSH
30419: DOUBLE
30420: LD_INT 1
30422: DEC
30423: ST_TO_ADDR
30424: LD_VAR 0 9
30428: PUSH
30429: FOR_TO
30430: IFFALSE 30603
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) [ i ] , emptyVehicles [ i ] ) ;
30432: LD_INT 22
30434: PUSH
30435: LD_INT 3
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 21
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: LD_INT 60
30457: PUSH
30458: EMPTY
30459: LIST
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: LIST
30469: PPUSH
30470: CALL_OW 69
30474: PUSH
30475: LD_VAR 0 1
30479: ARRAY
30480: PPUSH
30481: LD_VAR 0 9
30485: PUSH
30486: LD_VAR 0 1
30490: ARRAY
30491: PPUSH
30492: CALL_OW 180
// if GetFuel ( emptyVehicles [ i ] ) >= 65 then
30496: LD_VAR 0 9
30500: PUSH
30501: LD_VAR 0 1
30505: ARRAY
30506: PPUSH
30507: CALL_OW 261
30511: PUSH
30512: LD_INT 65
30514: GREATEREQUAL
30515: IFFALSE 30601
// vehiclesToSave = vehiclesToSave ^ [ [ GetChassis ( emptyVehicles [ i ] ) , GetEngine ( emptyVehicles [ i ] ) , GetControl ( emptyVehicles [ i ] ) , GetWeapon ( emptyVehicles [ i ] ) ] ] ;
30517: LD_ADDR_EXP 7
30521: PUSH
30522: LD_EXP 7
30526: PUSH
30527: LD_VAR 0 9
30531: PUSH
30532: LD_VAR 0 1
30536: ARRAY
30537: PPUSH
30538: CALL_OW 265
30542: PUSH
30543: LD_VAR 0 9
30547: PUSH
30548: LD_VAR 0 1
30552: ARRAY
30553: PPUSH
30554: CALL_OW 262
30558: PUSH
30559: LD_VAR 0 9
30563: PUSH
30564: LD_VAR 0 1
30568: ARRAY
30569: PPUSH
30570: CALL_OW 263
30574: PUSH
30575: LD_VAR 0 9
30579: PUSH
30580: LD_VAR 0 1
30584: ARRAY
30585: PPUSH
30586: CALL_OW 264
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: ADD
30600: ST_TO_ADDR
// end ;
30601: GO 30429
30603: POP
30604: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
30605: LD_ADDR_VAR 0 1
30609: PUSH
30610: LD_INT 22
30612: PUSH
30613: LD_INT 6
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 21
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 50
30632: PUSH
30633: EMPTY
30634: LIST
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: PPUSH
30641: CALL_OW 69
30645: PUSH
30646: FOR_IN
30647: IFFALSE 30726
// if GetFuel ( i ) >= 65 then
30649: LD_VAR 0 1
30653: PPUSH
30654: CALL_OW 261
30658: PUSH
30659: LD_INT 65
30661: GREATEREQUAL
30662: IFFALSE 30724
// vehiclesToSave = vehiclesToSave ^ [ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
30664: LD_ADDR_EXP 7
30668: PUSH
30669: LD_EXP 7
30673: PUSH
30674: LD_VAR 0 1
30678: PPUSH
30679: CALL_OW 265
30683: PUSH
30684: LD_VAR 0 1
30688: PPUSH
30689: CALL_OW 262
30693: PUSH
30694: LD_VAR 0 1
30698: PPUSH
30699: CALL_OW 263
30703: PUSH
30704: LD_VAR 0 1
30708: PPUSH
30709: CALL_OW 264
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: PUSH
30720: EMPTY
30721: LIST
30722: ADD
30723: ST_TO_ADDR
30724: GO 30646
30726: POP
30727: POP
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , 83 , 157 ) ;
30728: LD_INT 22
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 2
30740: PUSH
30741: LD_INT 21
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 21
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PPUSH
30770: CALL_OW 69
30774: PPUSH
30775: LD_INT 83
30777: PPUSH
30778: LD_INT 157
30780: PPUSH
30781: CALL_OW 171
// AddComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
30785: LD_EXP 80
30789: PPUSH
30790: LD_INT 83
30792: PPUSH
30793: LD_INT 157
30795: PPUSH
30796: CALL_OW 171
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , 83 , 157 ) ;
30800: LD_INT 22
30802: PUSH
30803: LD_INT 6
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 21
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PPUSH
30824: CALL_OW 69
30828: PPUSH
30829: LD_INT 83
30831: PPUSH
30832: LD_INT 157
30834: PPUSH
30835: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
30839: LD_EXP 50
30843: PPUSH
30844: CALL_OW 87
// wait ( 0 0$1 ) ;
30848: LD_INT 35
30850: PPUSH
30851: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 23 ;
30855: LD_EXP 50
30859: PPUSH
30860: LD_EXP 61
30864: PPUSH
30865: CALL_OW 296
30869: PUSH
30870: LD_INT 23
30872: GREATER
30873: IFFALSE 30800
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
30875: LD_INT 113
30877: PPUSH
30878: LD_INT 96
30880: PPUSH
30881: LD_INT 3
30883: PPUSH
30884: LD_INT 12
30886: NEG
30887: PPUSH
30888: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
30892: LD_INT 113
30894: PPUSH
30895: LD_INT 96
30897: PPUSH
30898: CALL_OW 86
// canDestroyBeriaBase = true ;
30902: LD_ADDR_EXP 29
30906: PUSH
30907: LD_INT 1
30909: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
30910: LD_ADDR_VAR 0 5
30914: PUSH
30915: LD_INT 25
30917: PPUSH
30918: LD_INT 22
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 21
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PPUSH
30942: CALL_OW 70
30946: ST_TO_ADDR
// for i = 1 to beriaBuildings do
30947: LD_ADDR_VAR 0 1
30951: PUSH
30952: DOUBLE
30953: LD_INT 1
30955: DEC
30956: ST_TO_ADDR
30957: LD_VAR 0 5
30961: PUSH
30962: FOR_TO
30963: IFFALSE 31045
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
30965: LD_ADDR_VAR 0 6
30969: PUSH
30970: LD_VAR 0 5
30974: PPUSH
30975: LD_INT 22
30977: PUSH
30978: LD_INT 2
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PPUSH
30985: CALL_OW 69
30989: PUSH
30990: LD_INT 1
30992: ARRAY
30993: PPUSH
30994: CALL_OW 74
30998: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
30999: LD_ADDR_VAR 0 5
31003: PUSH
31004: LD_VAR 0 5
31008: PUSH
31009: LD_VAR 0 6
31013: DIFF
31014: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
31015: LD_EXP 88
31019: PPUSH
31020: LD_VAR 0 6
31024: PPUSH
31025: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
31029: LD_EXP 89
31033: PPUSH
31034: LD_VAR 0 6
31038: PPUSH
31039: CALL_OW 175
// end ;
31043: GO 30962
31045: POP
31046: POP
// wait ( 0 0$35 ) ;
31047: LD_INT 1225
31049: PPUSH
31050: CALL_OW 67
// FinishMission ;
31054: CALL 20244 0 0
// end ;
31058: PPOPN 9
31060: END
// every 1 trigger immortalSurvivors do var unit ;
31061: LD_EXP 28
31065: IFFALSE 31103
31067: GO 31069
31069: DISABLE
31070: LD_INT 0
31072: PPUSH
// begin enable ;
31073: ENABLE
// for unit in survivorsArabianAttack do
31074: LD_ADDR_VAR 0 1
31078: PUSH
31079: LD_EXP 80
31083: PUSH
31084: FOR_IN
31085: IFFALSE 31101
// SetLives ( unit , 1000 ) ;
31087: LD_VAR 0 1
31091: PPUSH
31092: LD_INT 1000
31094: PPUSH
31095: CALL_OW 234
31099: GO 31084
31101: POP
31102: POP
// end ; end_of_file
31103: PPOPN 1
31105: END
// every 0 0$30 do
31106: GO 31108
31108: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
31109: LD_INT 3
31111: PPUSH
31112: LD_INT 5
31114: PPUSH
31115: CALL_OW 12
31119: PPUSH
31120: LD_INT 76
31122: PPUSH
31123: LD_INT 111
31125: PPUSH
31126: LD_INT 5
31128: PPUSH
31129: LD_INT 1
31131: PPUSH
31132: CALL_OW 56
31136: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
31137: LD_EXP 8
31141: IFFALSE 31213
31143: GO 31145
31145: DISABLE
31146: LD_INT 0
31148: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
31149: LD_INT 50
31151: PPUSH
31152: LD_INT 4200
31154: PPUSH
31155: CALL_OW 12
31159: PPUSH
31160: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
31164: LD_VAR 0 1
31168: PUSH
31169: LD_INT 175
31171: MUL
31172: PPUSH
31173: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
31177: LD_ADDR_VAR 0 1
31181: PUSH
31182: LD_VAR 0 1
31186: PUSH
31187: LD_INT 1
31189: PLUS
31190: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
31191: LD_INT 3
31193: PPUSH
31194: LD_INT 5
31196: PPUSH
31197: CALL_OW 12
31201: PPUSH
31202: LD_INT 6
31204: PPUSH
31205: LD_INT 1
31207: PPUSH
31208: CALL_OW 55
// enable ;
31212: ENABLE
// end ; end_of_file
31213: PPOPN 1
31215: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
31216: LD_EXP 90
31220: IFFALSE 31383
31222: GO 31224
31224: DISABLE
// begin enable ;
31225: ENABLE
// case counterIndex of 1 :
31226: LD_EXP 91
31230: PUSH
31231: LD_INT 1
31233: DOUBLE
31234: EQUAL
31235: IFTRUE 31239
31237: GO 31256
31239: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
31240: LD_ADDR_EXP 41
31244: PUSH
31245: LD_EXP 41
31249: PUSH
31250: LD_INT 35
31252: MINUS
31253: ST_TO_ADDR
31254: GO 31383
31256: LD_INT 2
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31298
31264: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
31265: LD_ADDR_OWVAR 47
31269: PUSH
31270: LD_STRING #Ru03-1
31272: PUSH
31273: LD_EXP 18
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
31282: LD_ADDR_EXP 18
31286: PUSH
31287: LD_EXP 18
31291: PUSH
31292: LD_INT 35
31294: MINUS
31295: ST_TO_ADDR
// end ; 3 :
31296: GO 31383
31298: LD_INT 3
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31340
31306: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
31307: LD_ADDR_OWVAR 47
31311: PUSH
31312: LD_STRING #Ru03-2
31314: PUSH
31315: LD_EXP 18
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
31324: LD_ADDR_EXP 18
31328: PUSH
31329: LD_EXP 18
31333: PUSH
31334: LD_INT 35
31336: MINUS
31337: ST_TO_ADDR
// end ; 4 :
31338: GO 31383
31340: LD_INT 4
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31382
31348: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
31349: LD_ADDR_OWVAR 47
31353: PUSH
31354: LD_STRING #Ru03-3
31356: PUSH
31357: LD_EXP 17
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
31366: LD_ADDR_EXP 17
31370: PUSH
31371: LD_EXP 17
31375: PUSH
31376: LD_INT 35
31378: MINUS
31379: ST_TO_ADDR
// end ; end ;
31380: GO 31383
31382: POP
// end ; end_of_file
31383: END
// every 7 7$0 do
31384: GO 31386
31386: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , NorthAmericanSpawnArea ) ;
31387: LD_INT 3
31389: PPUSH
31390: LD_INT 1
31392: PPUSH
31393: LD_INT 0
31395: PPUSH
31396: LD_INT 7
31398: PPUSH
31399: CALL 5939 0 4
31403: END
// every 12 12$0 do
31404: GO 31406
31406: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
31407: LD_INT 2
31409: PPUSH
31410: LD_INT 2
31412: PPUSH
31413: LD_INT 1
31415: PPUSH
31416: LD_INT 9
31418: PUSH
31419: LD_INT 8
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: PPUSH
31429: LD_INT 2
31431: PPUSH
31432: CALL_OW 12
31436: ARRAY
31437: PPUSH
31438: CALL 5939 0 4
31442: END
// every 20 20$0 do
31443: GO 31445
31445: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , NorthAmericanSpawnArea ) ;
31446: LD_INT 4
31448: PPUSH
31449: LD_INT 2
31451: PPUSH
31452: LD_INT 0
31454: PPUSH
31455: LD_INT 7
31457: PPUSH
31458: CALL 5939 0 4
31462: END
// every 23 23$0 do
31463: GO 31465
31465: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ; end_of_file
31466: LD_INT 3
31468: PPUSH
31469: LD_INT 1
31471: PPUSH
31472: LD_INT 2
31474: PPUSH
31475: LD_INT 9
31477: PUSH
31478: LD_INT 8
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 1
31487: PPUSH
31488: LD_INT 2
31490: PPUSH
31491: CALL_OW 12
31495: ARRAY
31496: PPUSH
31497: CALL 5939 0 4
31501: END
// export function Nef_PrepareNature ; var i , un ; begin
31502: LD_INT 0
31504: PPUSH
31505: PPUSH
31506: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
31507: LD_ADDR_VAR 0 2
31511: PUSH
31512: DOUBLE
31513: LD_INT 1
31515: DEC
31516: ST_TO_ADDR
31517: LD_EXP 33
31521: PUSH
31522: LD_INT 1
31524: ARRAY
31525: PUSH
31526: FOR_TO
31527: IFFALSE 31637
// begin uc_side = 0 ;
31529: LD_ADDR_OWVAR 20
31533: PUSH
31534: LD_INT 0
31536: ST_TO_ADDR
// uc_nation = nation_nature ;
31537: LD_ADDR_OWVAR 21
31541: PUSH
31542: LD_INT 0
31544: ST_TO_ADDR
// hc_class = class_apeman ;
31545: LD_ADDR_OWVAR 28
31549: PUSH
31550: LD_INT 12
31552: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31553: LD_ADDR_OWVAR 31
31557: PUSH
31558: LD_EXP 34
31562: PUSH
31563: LD_INT 1
31565: ARRAY
31566: PUSH
31567: LD_EXP 34
31571: PUSH
31572: LD_INT 2
31574: ARRAY
31575: PUSH
31576: LD_EXP 34
31580: PUSH
31581: LD_INT 3
31583: ARRAY
31584: PUSH
31585: LD_EXP 34
31589: PUSH
31590: LD_INT 4
31592: ARRAY
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31600: LD_ADDR_OWVAR 35
31604: PUSH
31605: LD_EXP 35
31609: ST_TO_ADDR
// un = CreateHuman ;
31610: LD_ADDR_VAR 0 3
31614: PUSH
31615: CALL_OW 44
31619: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31620: LD_VAR 0 3
31624: PPUSH
31625: LD_INT 27
31627: PPUSH
31628: LD_INT 0
31630: PPUSH
31631: CALL_OW 49
// end ;
31635: GO 31526
31637: POP
31638: POP
// for i := 1 to animalsAmount [ 2 ] do
31639: LD_ADDR_VAR 0 2
31643: PUSH
31644: DOUBLE
31645: LD_INT 1
31647: DEC
31648: ST_TO_ADDR
31649: LD_EXP 33
31653: PUSH
31654: LD_INT 2
31656: ARRAY
31657: PUSH
31658: FOR_TO
31659: IFFALSE 31769
// begin uc_side = 0 ;
31661: LD_ADDR_OWVAR 20
31665: PUSH
31666: LD_INT 0
31668: ST_TO_ADDR
// uc_nation = nation_nature ;
31669: LD_ADDR_OWVAR 21
31673: PUSH
31674: LD_INT 0
31676: ST_TO_ADDR
// hc_class = class_phororhacos ;
31677: LD_ADDR_OWVAR 28
31681: PUSH
31682: LD_INT 18
31684: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31685: LD_ADDR_OWVAR 31
31689: PUSH
31690: LD_EXP 34
31694: PUSH
31695: LD_INT 1
31697: ARRAY
31698: PUSH
31699: LD_EXP 34
31703: PUSH
31704: LD_INT 2
31706: ARRAY
31707: PUSH
31708: LD_EXP 34
31712: PUSH
31713: LD_INT 3
31715: ARRAY
31716: PUSH
31717: LD_EXP 34
31721: PUSH
31722: LD_INT 4
31724: ARRAY
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31732: LD_ADDR_OWVAR 35
31736: PUSH
31737: LD_EXP 35
31741: ST_TO_ADDR
// un = CreateHuman ;
31742: LD_ADDR_VAR 0 3
31746: PUSH
31747: CALL_OW 44
31751: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31752: LD_VAR 0 3
31756: PPUSH
31757: LD_INT 27
31759: PPUSH
31760: LD_INT 0
31762: PPUSH
31763: CALL_OW 49
// end ;
31767: GO 31658
31769: POP
31770: POP
// for i := 1 to animalsAmount [ 3 ] do
31771: LD_ADDR_VAR 0 2
31775: PUSH
31776: DOUBLE
31777: LD_INT 1
31779: DEC
31780: ST_TO_ADDR
31781: LD_EXP 33
31785: PUSH
31786: LD_INT 3
31788: ARRAY
31789: PUSH
31790: FOR_TO
31791: IFFALSE 31901
// begin uc_side = 0 ;
31793: LD_ADDR_OWVAR 20
31797: PUSH
31798: LD_INT 0
31800: ST_TO_ADDR
// uc_nation = nation_nature ;
31801: LD_ADDR_OWVAR 21
31805: PUSH
31806: LD_INT 0
31808: ST_TO_ADDR
// hc_class = class_tiger ;
31809: LD_ADDR_OWVAR 28
31813: PUSH
31814: LD_INT 14
31816: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31817: LD_ADDR_OWVAR 31
31821: PUSH
31822: LD_EXP 34
31826: PUSH
31827: LD_INT 1
31829: ARRAY
31830: PUSH
31831: LD_EXP 34
31835: PUSH
31836: LD_INT 2
31838: ARRAY
31839: PUSH
31840: LD_EXP 34
31844: PUSH
31845: LD_INT 3
31847: ARRAY
31848: PUSH
31849: LD_EXP 34
31853: PUSH
31854: LD_INT 4
31856: ARRAY
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31864: LD_ADDR_OWVAR 35
31868: PUSH
31869: LD_EXP 35
31873: ST_TO_ADDR
// un = CreateHuman ;
31874: LD_ADDR_VAR 0 3
31878: PUSH
31879: CALL_OW 44
31883: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31884: LD_VAR 0 3
31888: PPUSH
31889: LD_INT 27
31891: PPUSH
31892: LD_INT 0
31894: PPUSH
31895: CALL_OW 49
// end ;
31899: GO 31790
31901: POP
31902: POP
// for i := 1 to animalsAmount [ 4 ] do
31903: LD_ADDR_VAR 0 2
31907: PUSH
31908: DOUBLE
31909: LD_INT 1
31911: DEC
31912: ST_TO_ADDR
31913: LD_EXP 33
31917: PUSH
31918: LD_INT 4
31920: ARRAY
31921: PUSH
31922: FOR_TO
31923: IFFALSE 32033
// begin uc_side = 0 ;
31925: LD_ADDR_OWVAR 20
31929: PUSH
31930: LD_INT 0
31932: ST_TO_ADDR
// uc_nation = nation_nature ;
31933: LD_ADDR_OWVAR 21
31937: PUSH
31938: LD_INT 0
31940: ST_TO_ADDR
// hc_class = 21 ;
31941: LD_ADDR_OWVAR 28
31945: PUSH
31946: LD_INT 21
31948: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31949: LD_ADDR_OWVAR 31
31953: PUSH
31954: LD_EXP 34
31958: PUSH
31959: LD_INT 1
31961: ARRAY
31962: PUSH
31963: LD_EXP 34
31967: PUSH
31968: LD_INT 2
31970: ARRAY
31971: PUSH
31972: LD_EXP 34
31976: PUSH
31977: LD_INT 3
31979: ARRAY
31980: PUSH
31981: LD_EXP 34
31985: PUSH
31986: LD_INT 4
31988: ARRAY
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31996: LD_ADDR_OWVAR 35
32000: PUSH
32001: LD_EXP 35
32005: ST_TO_ADDR
// un = CreateHuman ;
32006: LD_ADDR_VAR 0 3
32010: PUSH
32011: CALL_OW 44
32015: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
32016: LD_VAR 0 3
32020: PPUSH
32021: LD_INT 27
32023: PPUSH
32024: LD_INT 0
32026: PPUSH
32027: CALL_OW 49
// end ;
32031: GO 31922
32033: POP
32034: POP
// for i := 1 to animalsAmount [ 5 ] do
32035: LD_ADDR_VAR 0 2
32039: PUSH
32040: DOUBLE
32041: LD_INT 1
32043: DEC
32044: ST_TO_ADDR
32045: LD_EXP 33
32049: PUSH
32050: LD_INT 5
32052: ARRAY
32053: PUSH
32054: FOR_TO
32055: IFFALSE 32116
// begin uc_side = 0 ;
32057: LD_ADDR_OWVAR 20
32061: PUSH
32062: LD_INT 0
32064: ST_TO_ADDR
// uc_nation = nation_nature ;
32065: LD_ADDR_OWVAR 21
32069: PUSH
32070: LD_INT 0
32072: ST_TO_ADDR
// vc_chassis := 31 ;
32073: LD_ADDR_OWVAR 37
32077: PUSH
32078: LD_INT 31
32080: ST_TO_ADDR
// vc_control := control_rider ;
32081: LD_ADDR_OWVAR 38
32085: PUSH
32086: LD_INT 4
32088: ST_TO_ADDR
// un := CreateVehicle ;
32089: LD_ADDR_VAR 0 3
32093: PUSH
32094: CALL_OW 45
32098: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
32099: LD_VAR 0 3
32103: PPUSH
32104: LD_INT 27
32106: PPUSH
32107: LD_INT 0
32109: PPUSH
32110: CALL_OW 49
// end ;
32114: GO 32054
32116: POP
32117: POP
// end ; end_of_file
32118: LD_VAR 0 1
32122: RET
// every 1 trigger scholtzeSaved do
32123: LD_EXP 10
32127: IFFALSE 32139
32129: GO 32131
32131: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
32132: LD_STRING ACH_PROFESSOR
32134: PPUSH
32135: CALL_OW 543
32139: END
// every 1 trigger IsDead ( Sikorski ) do
32140: LD_INT 290
32142: PPUSH
32143: CALL_OW 301
32147: IFFALSE 32159
32149: GO 32151
32151: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
32152: LD_STRING ACH_SIKORSKI
32154: PPUSH
32155: CALL_OW 543
32159: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
32160: LD_EXP 15
32164: NOT
32165: PUSH
32166: LD_EXP 27
32170: NOT
32171: AND
32172: IFFALSE 32184
32174: GO 32176
32176: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
32177: LD_STRING ACH_REINFORCE
32179: PPUSH
32180: CALL_OW 543
32184: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
32185: LD_INT 0
32187: PPUSH
// ar_crane := 88 ;
32188: LD_ADDR_EXP 98
32192: PUSH
32193: LD_INT 88
32195: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
32196: LD_ADDR_EXP 93
32200: PUSH
32201: LD_INT 89
32203: ST_TO_ADDR
// us_hack := 99 ;
32204: LD_ADDR_EXP 94
32208: PUSH
32209: LD_INT 99
32211: ST_TO_ADDR
// us_artillery := 97 ;
32212: LD_ADDR_EXP 95
32216: PUSH
32217: LD_INT 97
32219: ST_TO_ADDR
// ar_bio_bomb := 91 ;
32220: LD_ADDR_EXP 96
32224: PUSH
32225: LD_INT 91
32227: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
32228: LD_ADDR_EXP 97
32232: PUSH
32233: LD_INT 92
32235: ST_TO_ADDR
// ru_radar := 98 ;
32236: LD_ADDR_EXP 92
32240: PUSH
32241: LD_INT 98
32243: ST_TO_ADDR
// tech_Artillery := 80 ;
32244: LD_ADDR_EXP 99
32248: PUSH
32249: LD_INT 80
32251: ST_TO_ADDR
// tech_RadMat := 81 ;
32252: LD_ADDR_EXP 100
32256: PUSH
32257: LD_INT 81
32259: ST_TO_ADDR
// tech_BasicTools := 82 ;
32260: LD_ADDR_EXP 101
32264: PUSH
32265: LD_INT 82
32267: ST_TO_ADDR
// tech_Cargo := 83 ;
32268: LD_ADDR_EXP 102
32272: PUSH
32273: LD_INT 83
32275: ST_TO_ADDR
// tech_Track := 84 ;
32276: LD_ADDR_EXP 103
32280: PUSH
32281: LD_INT 84
32283: ST_TO_ADDR
// tech_Crane := 85 ;
32284: LD_ADDR_EXP 104
32288: PUSH
32289: LD_INT 85
32291: ST_TO_ADDR
// tech_Bulldozer := 86 ;
32292: LD_ADDR_EXP 105
32296: PUSH
32297: LD_INT 86
32299: ST_TO_ADDR
// tech_Hovercraft := 87 ;
32300: LD_ADDR_EXP 106
32304: PUSH
32305: LD_INT 87
32307: ST_TO_ADDR
// end ;
32308: LD_VAR 0 1
32312: RET
// every 1 do
32313: GO 32315
32315: DISABLE
// InitGlobalVariables ; end_of_file
32316: CALL 32185 0 0
32320: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32321: LD_INT 0
32323: PPUSH
32324: PPUSH
// if exist_mode then
32325: LD_VAR 0 2
32329: IFFALSE 32354
// unit := CreateCharacter ( prefix & ident ) else
32331: LD_ADDR_VAR 0 5
32335: PUSH
32336: LD_VAR 0 3
32340: PUSH
32341: LD_VAR 0 1
32345: STR
32346: PPUSH
32347: CALL_OW 34
32351: ST_TO_ADDR
32352: GO 32369
// unit := NewCharacter ( ident ) ;
32354: LD_ADDR_VAR 0 5
32358: PUSH
32359: LD_VAR 0 1
32363: PPUSH
32364: CALL_OW 25
32368: ST_TO_ADDR
// result := unit ;
32369: LD_ADDR_VAR 0 4
32373: PUSH
32374: LD_VAR 0 5
32378: ST_TO_ADDR
// end ;
32379: LD_VAR 0 4
32383: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32384: LD_INT 0
32386: PPUSH
32387: PPUSH
// if not side or not nation then
32388: LD_VAR 0 1
32392: NOT
32393: PUSH
32394: LD_VAR 0 2
32398: NOT
32399: OR
32400: IFFALSE 32404
// exit ;
32402: GO 33168
// case nation of nation_american :
32404: LD_VAR 0 2
32408: PUSH
32409: LD_INT 1
32411: DOUBLE
32412: EQUAL
32413: IFTRUE 32417
32415: GO 32631
32417: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32418: LD_ADDR_VAR 0 4
32422: PUSH
32423: LD_INT 35
32425: PUSH
32426: LD_INT 45
32428: PUSH
32429: LD_INT 46
32431: PUSH
32432: LD_INT 47
32434: PUSH
32435: LD_INT 82
32437: PUSH
32438: LD_INT 83
32440: PUSH
32441: LD_INT 84
32443: PUSH
32444: LD_INT 85
32446: PUSH
32447: LD_INT 86
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: LD_INT 6
32458: PUSH
32459: LD_INT 15
32461: PUSH
32462: LD_INT 16
32464: PUSH
32465: LD_INT 7
32467: PUSH
32468: LD_INT 12
32470: PUSH
32471: LD_INT 13
32473: PUSH
32474: LD_INT 10
32476: PUSH
32477: LD_INT 14
32479: PUSH
32480: LD_INT 20
32482: PUSH
32483: LD_INT 21
32485: PUSH
32486: LD_INT 22
32488: PUSH
32489: LD_INT 25
32491: PUSH
32492: LD_INT 32
32494: PUSH
32495: LD_INT 27
32497: PUSH
32498: LD_INT 36
32500: PUSH
32501: LD_INT 69
32503: PUSH
32504: LD_INT 39
32506: PUSH
32507: LD_INT 34
32509: PUSH
32510: LD_INT 40
32512: PUSH
32513: LD_INT 48
32515: PUSH
32516: LD_INT 49
32518: PUSH
32519: LD_INT 50
32521: PUSH
32522: LD_INT 51
32524: PUSH
32525: LD_INT 52
32527: PUSH
32528: LD_INT 53
32530: PUSH
32531: LD_INT 54
32533: PUSH
32534: LD_INT 55
32536: PUSH
32537: LD_INT 56
32539: PUSH
32540: LD_INT 57
32542: PUSH
32543: LD_INT 58
32545: PUSH
32546: LD_INT 59
32548: PUSH
32549: LD_INT 60
32551: PUSH
32552: LD_INT 61
32554: PUSH
32555: LD_INT 62
32557: PUSH
32558: LD_INT 80
32560: PUSH
32561: LD_INT 82
32563: PUSH
32564: LD_INT 83
32566: PUSH
32567: LD_INT 84
32569: PUSH
32570: LD_INT 85
32572: PUSH
32573: LD_INT 86
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: ST_TO_ADDR
32629: GO 33092
32631: LD_INT 2
32633: DOUBLE
32634: EQUAL
32635: IFTRUE 32639
32637: GO 32861
32639: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
32640: LD_ADDR_VAR 0 4
32644: PUSH
32645: LD_INT 35
32647: PUSH
32648: LD_INT 45
32650: PUSH
32651: LD_INT 46
32653: PUSH
32654: LD_INT 47
32656: PUSH
32657: LD_INT 82
32659: PUSH
32660: LD_INT 83
32662: PUSH
32663: LD_INT 84
32665: PUSH
32666: LD_INT 85
32668: PUSH
32669: LD_INT 87
32671: PUSH
32672: LD_INT 70
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: LD_INT 11
32680: PUSH
32681: LD_INT 3
32683: PUSH
32684: LD_INT 4
32686: PUSH
32687: LD_INT 5
32689: PUSH
32690: LD_INT 6
32692: PUSH
32693: LD_INT 15
32695: PUSH
32696: LD_INT 18
32698: PUSH
32699: LD_INT 7
32701: PUSH
32702: LD_INT 17
32704: PUSH
32705: LD_INT 8
32707: PUSH
32708: LD_INT 20
32710: PUSH
32711: LD_INT 21
32713: PUSH
32714: LD_INT 22
32716: PUSH
32717: LD_INT 72
32719: PUSH
32720: LD_INT 26
32722: PUSH
32723: LD_INT 69
32725: PUSH
32726: LD_INT 39
32728: PUSH
32729: LD_INT 40
32731: PUSH
32732: LD_INT 41
32734: PUSH
32735: LD_INT 42
32737: PUSH
32738: LD_INT 43
32740: PUSH
32741: LD_INT 48
32743: PUSH
32744: LD_INT 49
32746: PUSH
32747: LD_INT 50
32749: PUSH
32750: LD_INT 51
32752: PUSH
32753: LD_INT 52
32755: PUSH
32756: LD_INT 53
32758: PUSH
32759: LD_INT 54
32761: PUSH
32762: LD_INT 55
32764: PUSH
32765: LD_INT 56
32767: PUSH
32768: LD_INT 60
32770: PUSH
32771: LD_INT 61
32773: PUSH
32774: LD_INT 62
32776: PUSH
32777: LD_INT 66
32779: PUSH
32780: LD_INT 67
32782: PUSH
32783: LD_INT 68
32785: PUSH
32786: LD_INT 81
32788: PUSH
32789: LD_INT 82
32791: PUSH
32792: LD_INT 83
32794: PUSH
32795: LD_INT 84
32797: PUSH
32798: LD_INT 85
32800: PUSH
32801: LD_INT 87
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: ST_TO_ADDR
32859: GO 33092
32861: LD_INT 3
32863: DOUBLE
32864: EQUAL
32865: IFTRUE 32869
32867: GO 33091
32869: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32870: LD_ADDR_VAR 0 4
32874: PUSH
32875: LD_INT 46
32877: PUSH
32878: LD_INT 47
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: LD_INT 82
32889: PUSH
32890: LD_INT 83
32892: PUSH
32893: LD_INT 84
32895: PUSH
32896: LD_INT 85
32898: PUSH
32899: LD_INT 86
32901: PUSH
32902: LD_INT 11
32904: PUSH
32905: LD_INT 9
32907: PUSH
32908: LD_INT 20
32910: PUSH
32911: LD_INT 19
32913: PUSH
32914: LD_INT 21
32916: PUSH
32917: LD_INT 24
32919: PUSH
32920: LD_INT 22
32922: PUSH
32923: LD_INT 25
32925: PUSH
32926: LD_INT 28
32928: PUSH
32929: LD_INT 29
32931: PUSH
32932: LD_INT 30
32934: PUSH
32935: LD_INT 31
32937: PUSH
32938: LD_INT 37
32940: PUSH
32941: LD_INT 38
32943: PUSH
32944: LD_INT 32
32946: PUSH
32947: LD_INT 27
32949: PUSH
32950: LD_INT 33
32952: PUSH
32953: LD_INT 69
32955: PUSH
32956: LD_INT 39
32958: PUSH
32959: LD_INT 34
32961: PUSH
32962: LD_INT 40
32964: PUSH
32965: LD_INT 71
32967: PUSH
32968: LD_INT 23
32970: PUSH
32971: LD_INT 44
32973: PUSH
32974: LD_INT 48
32976: PUSH
32977: LD_INT 49
32979: PUSH
32980: LD_INT 50
32982: PUSH
32983: LD_INT 51
32985: PUSH
32986: LD_INT 52
32988: PUSH
32989: LD_INT 53
32991: PUSH
32992: LD_INT 54
32994: PUSH
32995: LD_INT 55
32997: PUSH
32998: LD_INT 56
33000: PUSH
33001: LD_INT 57
33003: PUSH
33004: LD_INT 58
33006: PUSH
33007: LD_INT 59
33009: PUSH
33010: LD_INT 63
33012: PUSH
33013: LD_INT 64
33015: PUSH
33016: LD_INT 65
33018: PUSH
33019: LD_INT 82
33021: PUSH
33022: LD_INT 83
33024: PUSH
33025: LD_INT 84
33027: PUSH
33028: LD_INT 85
33030: PUSH
33031: LD_INT 86
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: ST_TO_ADDR
33089: GO 33092
33091: POP
// if state > - 1 and state < 3 then
33092: LD_VAR 0 3
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: GREATER
33101: PUSH
33102: LD_VAR 0 3
33106: PUSH
33107: LD_INT 3
33109: LESS
33110: AND
33111: IFFALSE 33168
// for i in result do
33113: LD_ADDR_VAR 0 5
33117: PUSH
33118: LD_VAR 0 4
33122: PUSH
33123: FOR_IN
33124: IFFALSE 33166
// if GetTech ( i , side ) <> state then
33126: LD_VAR 0 5
33130: PPUSH
33131: LD_VAR 0 1
33135: PPUSH
33136: CALL_OW 321
33140: PUSH
33141: LD_VAR 0 3
33145: NONEQUAL
33146: IFFALSE 33164
// result := result diff i ;
33148: LD_ADDR_VAR 0 4
33152: PUSH
33153: LD_VAR 0 4
33157: PUSH
33158: LD_VAR 0 5
33162: DIFF
33163: ST_TO_ADDR
33164: GO 33123
33166: POP
33167: POP
// end ;
33168: LD_VAR 0 4
33172: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33173: LD_INT 0
33175: PPUSH
33176: PPUSH
33177: PPUSH
// result := true ;
33178: LD_ADDR_VAR 0 3
33182: PUSH
33183: LD_INT 1
33185: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33186: LD_ADDR_VAR 0 5
33190: PUSH
33191: LD_VAR 0 2
33195: PPUSH
33196: CALL_OW 480
33200: ST_TO_ADDR
// if not tmp then
33201: LD_VAR 0 5
33205: NOT
33206: IFFALSE 33210
// exit ;
33208: GO 33259
// for i in tmp do
33210: LD_ADDR_VAR 0 4
33214: PUSH
33215: LD_VAR 0 5
33219: PUSH
33220: FOR_IN
33221: IFFALSE 33257
// if GetTech ( i , side ) <> state_researched then
33223: LD_VAR 0 4
33227: PPUSH
33228: LD_VAR 0 1
33232: PPUSH
33233: CALL_OW 321
33237: PUSH
33238: LD_INT 2
33240: NONEQUAL
33241: IFFALSE 33255
// begin result := false ;
33243: LD_ADDR_VAR 0 3
33247: PUSH
33248: LD_INT 0
33250: ST_TO_ADDR
// exit ;
33251: POP
33252: POP
33253: GO 33259
// end ;
33255: GO 33220
33257: POP
33258: POP
// end ;
33259: LD_VAR 0 3
33263: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33264: LD_INT 0
33266: PPUSH
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
33271: PPUSH
33272: PPUSH
33273: PPUSH
33274: PPUSH
33275: PPUSH
33276: PPUSH
33277: PPUSH
33278: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33279: LD_VAR 0 1
33283: NOT
33284: PUSH
33285: LD_VAR 0 1
33289: PPUSH
33290: CALL_OW 257
33294: PUSH
33295: LD_INT 9
33297: NONEQUAL
33298: OR
33299: IFFALSE 33303
// exit ;
33301: GO 33876
// side := GetSide ( unit ) ;
33303: LD_ADDR_VAR 0 9
33307: PUSH
33308: LD_VAR 0 1
33312: PPUSH
33313: CALL_OW 255
33317: ST_TO_ADDR
// tech_space := tech_spacanom ;
33318: LD_ADDR_VAR 0 12
33322: PUSH
33323: LD_INT 29
33325: ST_TO_ADDR
// tech_time := tech_taurad ;
33326: LD_ADDR_VAR 0 13
33330: PUSH
33331: LD_INT 28
33333: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33334: LD_ADDR_VAR 0 11
33338: PUSH
33339: LD_VAR 0 1
33343: PPUSH
33344: CALL_OW 310
33348: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33349: LD_VAR 0 11
33353: PPUSH
33354: CALL_OW 247
33358: PUSH
33359: LD_INT 2
33361: EQUAL
33362: IFFALSE 33366
// exit ;
33364: GO 33876
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33366: LD_ADDR_VAR 0 8
33370: PUSH
33371: LD_INT 81
33373: PUSH
33374: LD_VAR 0 9
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 3
33385: PUSH
33386: LD_INT 21
33388: PUSH
33389: LD_INT 3
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PPUSH
33404: CALL_OW 69
33408: ST_TO_ADDR
// if not tmp then
33409: LD_VAR 0 8
33413: NOT
33414: IFFALSE 33418
// exit ;
33416: GO 33876
// if in_unit then
33418: LD_VAR 0 11
33422: IFFALSE 33446
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33424: LD_ADDR_VAR 0 10
33428: PUSH
33429: LD_VAR 0 8
33433: PPUSH
33434: LD_VAR 0 11
33438: PPUSH
33439: CALL_OW 74
33443: ST_TO_ADDR
33444: GO 33466
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33446: LD_ADDR_VAR 0 10
33450: PUSH
33451: LD_VAR 0 8
33455: PPUSH
33456: LD_VAR 0 1
33460: PPUSH
33461: CALL_OW 74
33465: ST_TO_ADDR
// if not enemy then
33466: LD_VAR 0 10
33470: NOT
33471: IFFALSE 33475
// exit ;
33473: GO 33876
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33475: LD_VAR 0 11
33479: PUSH
33480: LD_VAR 0 11
33484: PPUSH
33485: LD_VAR 0 10
33489: PPUSH
33490: CALL_OW 296
33494: PUSH
33495: LD_INT 13
33497: GREATER
33498: AND
33499: PUSH
33500: LD_VAR 0 1
33504: PPUSH
33505: LD_VAR 0 10
33509: PPUSH
33510: CALL_OW 296
33514: PUSH
33515: LD_INT 12
33517: GREATER
33518: OR
33519: IFFALSE 33523
// exit ;
33521: GO 33876
// missile := [ 1 ] ;
33523: LD_ADDR_VAR 0 14
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: EMPTY
33532: LIST
33533: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33534: LD_VAR 0 9
33538: PPUSH
33539: LD_VAR 0 12
33543: PPUSH
33544: CALL_OW 325
33548: IFFALSE 33577
// missile := Insert ( missile , missile + 1 , 2 ) ;
33550: LD_ADDR_VAR 0 14
33554: PUSH
33555: LD_VAR 0 14
33559: PPUSH
33560: LD_VAR 0 14
33564: PUSH
33565: LD_INT 1
33567: PLUS
33568: PPUSH
33569: LD_INT 2
33571: PPUSH
33572: CALL_OW 2
33576: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33577: LD_VAR 0 9
33581: PPUSH
33582: LD_VAR 0 13
33586: PPUSH
33587: CALL_OW 325
33591: PUSH
33592: LD_VAR 0 10
33596: PPUSH
33597: CALL_OW 255
33601: PPUSH
33602: LD_VAR 0 13
33606: PPUSH
33607: CALL_OW 325
33611: NOT
33612: AND
33613: IFFALSE 33642
// missile := Insert ( missile , missile + 1 , 3 ) ;
33615: LD_ADDR_VAR 0 14
33619: PUSH
33620: LD_VAR 0 14
33624: PPUSH
33625: LD_VAR 0 14
33629: PUSH
33630: LD_INT 1
33632: PLUS
33633: PPUSH
33634: LD_INT 3
33636: PPUSH
33637: CALL_OW 2
33641: ST_TO_ADDR
// if missile < 2 then
33642: LD_VAR 0 14
33646: PUSH
33647: LD_INT 2
33649: LESS
33650: IFFALSE 33654
// exit ;
33652: GO 33876
// x := GetX ( enemy ) ;
33654: LD_ADDR_VAR 0 4
33658: PUSH
33659: LD_VAR 0 10
33663: PPUSH
33664: CALL_OW 250
33668: ST_TO_ADDR
// y := GetY ( enemy ) ;
33669: LD_ADDR_VAR 0 5
33673: PUSH
33674: LD_VAR 0 10
33678: PPUSH
33679: CALL_OW 251
33683: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33684: LD_ADDR_VAR 0 6
33688: PUSH
33689: LD_VAR 0 4
33693: PUSH
33694: LD_INT 1
33696: NEG
33697: PPUSH
33698: LD_INT 1
33700: PPUSH
33701: CALL_OW 12
33705: PLUS
33706: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33707: LD_ADDR_VAR 0 7
33711: PUSH
33712: LD_VAR 0 5
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PPUSH
33721: LD_INT 1
33723: PPUSH
33724: CALL_OW 12
33728: PLUS
33729: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33730: LD_VAR 0 6
33734: PPUSH
33735: LD_VAR 0 7
33739: PPUSH
33740: CALL_OW 488
33744: NOT
33745: IFFALSE 33767
// begin _x := x ;
33747: LD_ADDR_VAR 0 6
33751: PUSH
33752: LD_VAR 0 4
33756: ST_TO_ADDR
// _y := y ;
33757: LD_ADDR_VAR 0 7
33761: PUSH
33762: LD_VAR 0 5
33766: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33767: LD_ADDR_VAR 0 3
33771: PUSH
33772: LD_INT 1
33774: PPUSH
33775: LD_VAR 0 14
33779: PPUSH
33780: CALL_OW 12
33784: ST_TO_ADDR
// case i of 1 :
33785: LD_VAR 0 3
33789: PUSH
33790: LD_INT 1
33792: DOUBLE
33793: EQUAL
33794: IFTRUE 33798
33796: GO 33815
33798: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33799: LD_VAR 0 1
33803: PPUSH
33804: LD_VAR 0 10
33808: PPUSH
33809: CALL_OW 115
33813: GO 33876
33815: LD_INT 2
33817: DOUBLE
33818: EQUAL
33819: IFTRUE 33823
33821: GO 33845
33823: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33824: LD_VAR 0 1
33828: PPUSH
33829: LD_VAR 0 6
33833: PPUSH
33834: LD_VAR 0 7
33838: PPUSH
33839: CALL_OW 153
33843: GO 33876
33845: LD_INT 3
33847: DOUBLE
33848: EQUAL
33849: IFTRUE 33853
33851: GO 33875
33853: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33854: LD_VAR 0 1
33858: PPUSH
33859: LD_VAR 0 6
33863: PPUSH
33864: LD_VAR 0 7
33868: PPUSH
33869: CALL_OW 154
33873: GO 33876
33875: POP
// end ;
33876: LD_VAR 0 2
33880: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33881: LD_INT 0
33883: PPUSH
33884: PPUSH
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
// if not unit or not building then
33889: LD_VAR 0 1
33893: NOT
33894: PUSH
33895: LD_VAR 0 2
33899: NOT
33900: OR
33901: IFFALSE 33905
// exit ;
33903: GO 34063
// x := GetX ( building ) ;
33905: LD_ADDR_VAR 0 5
33909: PUSH
33910: LD_VAR 0 2
33914: PPUSH
33915: CALL_OW 250
33919: ST_TO_ADDR
// y := GetY ( building ) ;
33920: LD_ADDR_VAR 0 6
33924: PUSH
33925: LD_VAR 0 2
33929: PPUSH
33930: CALL_OW 251
33934: ST_TO_ADDR
// for i = 0 to 5 do
33935: LD_ADDR_VAR 0 4
33939: PUSH
33940: DOUBLE
33941: LD_INT 0
33943: DEC
33944: ST_TO_ADDR
33945: LD_INT 5
33947: PUSH
33948: FOR_TO
33949: IFFALSE 34061
// begin _x := ShiftX ( x , i , 3 ) ;
33951: LD_ADDR_VAR 0 7
33955: PUSH
33956: LD_VAR 0 5
33960: PPUSH
33961: LD_VAR 0 4
33965: PPUSH
33966: LD_INT 3
33968: PPUSH
33969: CALL_OW 272
33973: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33974: LD_ADDR_VAR 0 8
33978: PUSH
33979: LD_VAR 0 6
33983: PPUSH
33984: LD_VAR 0 4
33988: PPUSH
33989: LD_INT 3
33991: PPUSH
33992: CALL_OW 273
33996: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33997: LD_VAR 0 7
34001: PPUSH
34002: LD_VAR 0 8
34006: PPUSH
34007: CALL_OW 488
34011: NOT
34012: IFFALSE 34016
// continue ;
34014: GO 33948
// if HexInfo ( _x , _y ) = 0 then
34016: LD_VAR 0 7
34020: PPUSH
34021: LD_VAR 0 8
34025: PPUSH
34026: CALL_OW 428
34030: PUSH
34031: LD_INT 0
34033: EQUAL
34034: IFFALSE 34059
// begin ComMoveXY ( unit , _x , _y ) ;
34036: LD_VAR 0 1
34040: PPUSH
34041: LD_VAR 0 7
34045: PPUSH
34046: LD_VAR 0 8
34050: PPUSH
34051: CALL_OW 111
// exit ;
34055: POP
34056: POP
34057: GO 34063
// end ; end ;
34059: GO 33948
34061: POP
34062: POP
// end ;
34063: LD_VAR 0 3
34067: RET
// export function ScanBase ( side , base_area ) ; begin
34068: LD_INT 0
34070: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34071: LD_ADDR_VAR 0 3
34075: PUSH
34076: LD_VAR 0 2
34080: PPUSH
34081: LD_INT 81
34083: PUSH
34084: LD_VAR 0 1
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PPUSH
34093: CALL_OW 70
34097: ST_TO_ADDR
// end ;
34098: LD_VAR 0 3
34102: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34103: LD_INT 0
34105: PPUSH
34106: PPUSH
34107: PPUSH
34108: PPUSH
// result := false ;
34109: LD_ADDR_VAR 0 2
34113: PUSH
34114: LD_INT 0
34116: ST_TO_ADDR
// side := GetSide ( unit ) ;
34117: LD_ADDR_VAR 0 3
34121: PUSH
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 255
34131: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34132: LD_ADDR_VAR 0 4
34136: PUSH
34137: LD_VAR 0 1
34141: PPUSH
34142: CALL_OW 248
34146: ST_TO_ADDR
// case nat of 1 :
34147: LD_VAR 0 4
34151: PUSH
34152: LD_INT 1
34154: DOUBLE
34155: EQUAL
34156: IFTRUE 34160
34158: GO 34171
34160: POP
// tech := tech_lassight ; 2 :
34161: LD_ADDR_VAR 0 5
34165: PUSH
34166: LD_INT 12
34168: ST_TO_ADDR
34169: GO 34210
34171: LD_INT 2
34173: DOUBLE
34174: EQUAL
34175: IFTRUE 34179
34177: GO 34190
34179: POP
// tech := tech_mortar ; 3 :
34180: LD_ADDR_VAR 0 5
34184: PUSH
34185: LD_INT 41
34187: ST_TO_ADDR
34188: GO 34210
34190: LD_INT 3
34192: DOUBLE
34193: EQUAL
34194: IFTRUE 34198
34196: GO 34209
34198: POP
// tech := tech_bazooka ; end ;
34199: LD_ADDR_VAR 0 5
34203: PUSH
34204: LD_INT 44
34206: ST_TO_ADDR
34207: GO 34210
34209: POP
// if Researched ( side , tech ) then
34210: LD_VAR 0 3
34214: PPUSH
34215: LD_VAR 0 5
34219: PPUSH
34220: CALL_OW 325
34224: IFFALSE 34251
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34226: LD_ADDR_VAR 0 2
34230: PUSH
34231: LD_INT 5
34233: PUSH
34234: LD_INT 8
34236: PUSH
34237: LD_INT 9
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: LIST
34244: PUSH
34245: LD_VAR 0 4
34249: ARRAY
34250: ST_TO_ADDR
// end ;
34251: LD_VAR 0 2
34255: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34256: LD_INT 0
34258: PPUSH
34259: PPUSH
34260: PPUSH
// if not mines then
34261: LD_VAR 0 2
34265: NOT
34266: IFFALSE 34270
// exit ;
34268: GO 34414
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34270: LD_ADDR_VAR 0 5
34274: PUSH
34275: LD_INT 81
34277: PUSH
34278: LD_VAR 0 1
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 3
34289: PUSH
34290: LD_INT 21
34292: PUSH
34293: LD_INT 3
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PPUSH
34308: CALL_OW 69
34312: ST_TO_ADDR
// for i in mines do
34313: LD_ADDR_VAR 0 4
34317: PUSH
34318: LD_VAR 0 2
34322: PUSH
34323: FOR_IN
34324: IFFALSE 34412
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34326: LD_VAR 0 4
34330: PUSH
34331: LD_INT 1
34333: ARRAY
34334: PPUSH
34335: LD_VAR 0 4
34339: PUSH
34340: LD_INT 2
34342: ARRAY
34343: PPUSH
34344: CALL_OW 458
34348: NOT
34349: IFFALSE 34353
// continue ;
34351: GO 34323
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34353: LD_VAR 0 4
34357: PUSH
34358: LD_INT 1
34360: ARRAY
34361: PPUSH
34362: LD_VAR 0 4
34366: PUSH
34367: LD_INT 2
34369: ARRAY
34370: PPUSH
34371: CALL_OW 428
34375: PUSH
34376: LD_VAR 0 5
34380: IN
34381: IFFALSE 34410
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34383: LD_VAR 0 4
34387: PUSH
34388: LD_INT 1
34390: ARRAY
34391: PPUSH
34392: LD_VAR 0 4
34396: PUSH
34397: LD_INT 2
34399: ARRAY
34400: PPUSH
34401: LD_VAR 0 1
34405: PPUSH
34406: CALL_OW 456
// end ;
34410: GO 34323
34412: POP
34413: POP
// end ;
34414: LD_VAR 0 3
34418: RET
// export function Count ( array ) ; var i ; begin
34419: LD_INT 0
34421: PPUSH
34422: PPUSH
// result := 0 ;
34423: LD_ADDR_VAR 0 2
34427: PUSH
34428: LD_INT 0
34430: ST_TO_ADDR
// for i in array do
34431: LD_ADDR_VAR 0 3
34435: PUSH
34436: LD_VAR 0 1
34440: PUSH
34441: FOR_IN
34442: IFFALSE 34466
// if i then
34444: LD_VAR 0 3
34448: IFFALSE 34464
// result := result + 1 ;
34450: LD_ADDR_VAR 0 2
34454: PUSH
34455: LD_VAR 0 2
34459: PUSH
34460: LD_INT 1
34462: PLUS
34463: ST_TO_ADDR
34464: GO 34441
34466: POP
34467: POP
// end ;
34468: LD_VAR 0 2
34472: RET
// export function IsEmpty ( building ) ; begin
34473: LD_INT 0
34475: PPUSH
// if not building then
34476: LD_VAR 0 1
34480: NOT
34481: IFFALSE 34485
// exit ;
34483: GO 34528
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34485: LD_ADDR_VAR 0 2
34489: PUSH
34490: LD_VAR 0 1
34494: PUSH
34495: LD_INT 22
34497: PUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 255
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 58
34514: PUSH
34515: EMPTY
34516: LIST
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PPUSH
34522: CALL_OW 69
34526: IN
34527: ST_TO_ADDR
// end ;
34528: LD_VAR 0 2
34532: RET
// export function IsNotFull ( building ) ; begin
34533: LD_INT 0
34535: PPUSH
// if not building then
34536: LD_VAR 0 1
34540: NOT
34541: IFFALSE 34545
// exit ;
34543: GO 34564
// result := UnitsInside ( building ) < 6 ;
34545: LD_ADDR_VAR 0 2
34549: PUSH
34550: LD_VAR 0 1
34554: PPUSH
34555: CALL_OW 313
34559: PUSH
34560: LD_INT 6
34562: LESS
34563: ST_TO_ADDR
// end ;
34564: LD_VAR 0 2
34568: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34569: LD_INT 0
34571: PPUSH
34572: PPUSH
34573: PPUSH
34574: PPUSH
// tmp := [ ] ;
34575: LD_ADDR_VAR 0 3
34579: PUSH
34580: EMPTY
34581: ST_TO_ADDR
// list := [ ] ;
34582: LD_ADDR_VAR 0 5
34586: PUSH
34587: EMPTY
34588: ST_TO_ADDR
// for i = 16 to 25 do
34589: LD_ADDR_VAR 0 4
34593: PUSH
34594: DOUBLE
34595: LD_INT 16
34597: DEC
34598: ST_TO_ADDR
34599: LD_INT 25
34601: PUSH
34602: FOR_TO
34603: IFFALSE 34676
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34605: LD_ADDR_VAR 0 3
34609: PUSH
34610: LD_VAR 0 3
34614: PUSH
34615: LD_INT 22
34617: PUSH
34618: LD_VAR 0 1
34622: PPUSH
34623: CALL_OW 255
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 91
34634: PUSH
34635: LD_VAR 0 1
34639: PUSH
34640: LD_INT 6
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 30
34650: PUSH
34651: LD_VAR 0 4
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: LIST
34664: PUSH
34665: EMPTY
34666: LIST
34667: PPUSH
34668: CALL_OW 69
34672: ADD
34673: ST_TO_ADDR
34674: GO 34602
34676: POP
34677: POP
// for i = 1 to tmp do
34678: LD_ADDR_VAR 0 4
34682: PUSH
34683: DOUBLE
34684: LD_INT 1
34686: DEC
34687: ST_TO_ADDR
34688: LD_VAR 0 3
34692: PUSH
34693: FOR_TO
34694: IFFALSE 34782
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34696: LD_ADDR_VAR 0 5
34700: PUSH
34701: LD_VAR 0 5
34705: PUSH
34706: LD_VAR 0 3
34710: PUSH
34711: LD_VAR 0 4
34715: ARRAY
34716: PPUSH
34717: CALL_OW 266
34721: PUSH
34722: LD_VAR 0 3
34726: PUSH
34727: LD_VAR 0 4
34731: ARRAY
34732: PPUSH
34733: CALL_OW 250
34737: PUSH
34738: LD_VAR 0 3
34742: PUSH
34743: LD_VAR 0 4
34747: ARRAY
34748: PPUSH
34749: CALL_OW 251
34753: PUSH
34754: LD_VAR 0 3
34758: PUSH
34759: LD_VAR 0 4
34763: ARRAY
34764: PPUSH
34765: CALL_OW 254
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: PUSH
34776: EMPTY
34777: LIST
34778: ADD
34779: ST_TO_ADDR
34780: GO 34693
34782: POP
34783: POP
// result := list ;
34784: LD_ADDR_VAR 0 2
34788: PUSH
34789: LD_VAR 0 5
34793: ST_TO_ADDR
// end ;
34794: LD_VAR 0 2
34798: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34799: LD_INT 0
34801: PPUSH
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
34806: PPUSH
34807: PPUSH
// if not factory then
34808: LD_VAR 0 1
34812: NOT
34813: IFFALSE 34817
// exit ;
34815: GO 35410
// if control = control_apeman then
34817: LD_VAR 0 4
34821: PUSH
34822: LD_INT 5
34824: EQUAL
34825: IFFALSE 34934
// begin tmp := UnitsInside ( factory ) ;
34827: LD_ADDR_VAR 0 8
34831: PUSH
34832: LD_VAR 0 1
34836: PPUSH
34837: CALL_OW 313
34841: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34842: LD_VAR 0 8
34846: PPUSH
34847: LD_INT 25
34849: PUSH
34850: LD_INT 12
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PPUSH
34857: CALL_OW 72
34861: NOT
34862: IFFALSE 34872
// control := control_manual ;
34864: LD_ADDR_VAR 0 4
34868: PUSH
34869: LD_INT 1
34871: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34872: LD_ADDR_VAR 0 8
34876: PUSH
34877: LD_VAR 0 1
34881: PPUSH
34882: CALL 34569 0 1
34886: ST_TO_ADDR
// if tmp then
34887: LD_VAR 0 8
34891: IFFALSE 34934
// begin for i in tmp do
34893: LD_ADDR_VAR 0 7
34897: PUSH
34898: LD_VAR 0 8
34902: PUSH
34903: FOR_IN
34904: IFFALSE 34932
// if i [ 1 ] = b_ext_radio then
34906: LD_VAR 0 7
34910: PUSH
34911: LD_INT 1
34913: ARRAY
34914: PUSH
34915: LD_INT 22
34917: EQUAL
34918: IFFALSE 34930
// begin control := control_remote ;
34920: LD_ADDR_VAR 0 4
34924: PUSH
34925: LD_INT 2
34927: ST_TO_ADDR
// break ;
34928: GO 34932
// end ;
34930: GO 34903
34932: POP
34933: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34934: LD_VAR 0 1
34938: PPUSH
34939: LD_VAR 0 2
34943: PPUSH
34944: LD_VAR 0 3
34948: PPUSH
34949: LD_VAR 0 4
34953: PPUSH
34954: LD_VAR 0 5
34958: PPUSH
34959: CALL_OW 448
34963: IFFALSE 34998
// begin result := [ chassis , engine , control , weapon ] ;
34965: LD_ADDR_VAR 0 6
34969: PUSH
34970: LD_VAR 0 2
34974: PUSH
34975: LD_VAR 0 3
34979: PUSH
34980: LD_VAR 0 4
34984: PUSH
34985: LD_VAR 0 5
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: ST_TO_ADDR
// exit ;
34996: GO 35410
// end ; _chassis := AvailableChassisList ( factory ) ;
34998: LD_ADDR_VAR 0 9
35002: PUSH
35003: LD_VAR 0 1
35007: PPUSH
35008: CALL_OW 475
35012: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35013: LD_ADDR_VAR 0 11
35017: PUSH
35018: LD_VAR 0 1
35022: PPUSH
35023: CALL_OW 476
35027: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35028: LD_ADDR_VAR 0 12
35032: PUSH
35033: LD_VAR 0 1
35037: PPUSH
35038: CALL_OW 477
35042: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35043: LD_ADDR_VAR 0 10
35047: PUSH
35048: LD_VAR 0 1
35052: PPUSH
35053: CALL_OW 478
35057: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35058: LD_VAR 0 9
35062: NOT
35063: PUSH
35064: LD_VAR 0 11
35068: NOT
35069: OR
35070: PUSH
35071: LD_VAR 0 12
35075: NOT
35076: OR
35077: PUSH
35078: LD_VAR 0 10
35082: NOT
35083: OR
35084: IFFALSE 35119
// begin result := [ chassis , engine , control , weapon ] ;
35086: LD_ADDR_VAR 0 6
35090: PUSH
35091: LD_VAR 0 2
35095: PUSH
35096: LD_VAR 0 3
35100: PUSH
35101: LD_VAR 0 4
35105: PUSH
35106: LD_VAR 0 5
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
// exit ;
35117: GO 35410
// end ; if not chassis in _chassis then
35119: LD_VAR 0 2
35123: PUSH
35124: LD_VAR 0 9
35128: IN
35129: NOT
35130: IFFALSE 35156
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35132: LD_ADDR_VAR 0 2
35136: PUSH
35137: LD_VAR 0 9
35141: PUSH
35142: LD_INT 1
35144: PPUSH
35145: LD_VAR 0 9
35149: PPUSH
35150: CALL_OW 12
35154: ARRAY
35155: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35156: LD_VAR 0 2
35160: PPUSH
35161: LD_VAR 0 3
35165: PPUSH
35166: CALL 35415 0 2
35170: NOT
35171: IFFALSE 35230
// repeat engine := _engine [ 1 ] ;
35173: LD_ADDR_VAR 0 3
35177: PUSH
35178: LD_VAR 0 11
35182: PUSH
35183: LD_INT 1
35185: ARRAY
35186: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35187: LD_ADDR_VAR 0 11
35191: PUSH
35192: LD_VAR 0 11
35196: PPUSH
35197: LD_INT 1
35199: PPUSH
35200: CALL_OW 3
35204: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35205: LD_VAR 0 2
35209: PPUSH
35210: LD_VAR 0 3
35214: PPUSH
35215: CALL 35415 0 2
35219: PUSH
35220: LD_VAR 0 11
35224: PUSH
35225: EMPTY
35226: EQUAL
35227: OR
35228: IFFALSE 35173
// if not control in _control then
35230: LD_VAR 0 4
35234: PUSH
35235: LD_VAR 0 12
35239: IN
35240: NOT
35241: IFFALSE 35267
// control := _control [ rand ( 1 , _control ) ] ;
35243: LD_ADDR_VAR 0 4
35247: PUSH
35248: LD_VAR 0 12
35252: PUSH
35253: LD_INT 1
35255: PPUSH
35256: LD_VAR 0 12
35260: PPUSH
35261: CALL_OW 12
35265: ARRAY
35266: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35267: LD_VAR 0 2
35271: PPUSH
35272: LD_VAR 0 5
35276: PPUSH
35277: CALL 35635 0 2
35281: NOT
35282: IFFALSE 35341
// repeat weapon := _weapon [ 1 ] ;
35284: LD_ADDR_VAR 0 5
35288: PUSH
35289: LD_VAR 0 10
35293: PUSH
35294: LD_INT 1
35296: ARRAY
35297: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35298: LD_ADDR_VAR 0 10
35302: PUSH
35303: LD_VAR 0 10
35307: PPUSH
35308: LD_INT 1
35310: PPUSH
35311: CALL_OW 3
35315: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35316: LD_VAR 0 2
35320: PPUSH
35321: LD_VAR 0 5
35325: PPUSH
35326: CALL 35635 0 2
35330: PUSH
35331: LD_VAR 0 10
35335: PUSH
35336: EMPTY
35337: EQUAL
35338: OR
35339: IFFALSE 35284
// result := [ ] ;
35341: LD_ADDR_VAR 0 6
35345: PUSH
35346: EMPTY
35347: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35348: LD_VAR 0 1
35352: PPUSH
35353: LD_VAR 0 2
35357: PPUSH
35358: LD_VAR 0 3
35362: PPUSH
35363: LD_VAR 0 4
35367: PPUSH
35368: LD_VAR 0 5
35372: PPUSH
35373: CALL_OW 448
35377: IFFALSE 35410
// result := [ chassis , engine , control , weapon ] ;
35379: LD_ADDR_VAR 0 6
35383: PUSH
35384: LD_VAR 0 2
35388: PUSH
35389: LD_VAR 0 3
35393: PUSH
35394: LD_VAR 0 4
35398: PUSH
35399: LD_VAR 0 5
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: ST_TO_ADDR
// end ;
35410: LD_VAR 0 6
35414: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35415: LD_INT 0
35417: PPUSH
// if not chassis or not engine then
35418: LD_VAR 0 1
35422: NOT
35423: PUSH
35424: LD_VAR 0 2
35428: NOT
35429: OR
35430: IFFALSE 35434
// exit ;
35432: GO 35630
// case engine of engine_solar :
35434: LD_VAR 0 2
35438: PUSH
35439: LD_INT 2
35441: DOUBLE
35442: EQUAL
35443: IFTRUE 35447
35445: GO 35485
35447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35448: LD_ADDR_VAR 0 3
35452: PUSH
35453: LD_INT 11
35455: PUSH
35456: LD_INT 12
35458: PUSH
35459: LD_INT 13
35461: PUSH
35462: LD_INT 14
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 2
35470: PUSH
35471: LD_INT 3
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: ST_TO_ADDR
35483: GO 35614
35485: LD_INT 1
35487: DOUBLE
35488: EQUAL
35489: IFTRUE 35493
35491: GO 35555
35493: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35494: LD_ADDR_VAR 0 3
35498: PUSH
35499: LD_INT 11
35501: PUSH
35502: LD_INT 12
35504: PUSH
35505: LD_INT 13
35507: PUSH
35508: LD_INT 14
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: LD_INT 3
35519: PUSH
35520: LD_INT 4
35522: PUSH
35523: LD_INT 5
35525: PUSH
35526: LD_INT 21
35528: PUSH
35529: LD_INT 23
35531: PUSH
35532: LD_INT 22
35534: PUSH
35535: LD_INT 24
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: ST_TO_ADDR
35553: GO 35614
35555: LD_INT 3
35557: DOUBLE
35558: EQUAL
35559: IFTRUE 35563
35561: GO 35613
35563: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35564: LD_ADDR_VAR 0 3
35568: PUSH
35569: LD_INT 13
35571: PUSH
35572: LD_INT 14
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: LD_INT 4
35583: PUSH
35584: LD_INT 5
35586: PUSH
35587: LD_INT 21
35589: PUSH
35590: LD_INT 22
35592: PUSH
35593: LD_INT 23
35595: PUSH
35596: LD_INT 24
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: ST_TO_ADDR
35611: GO 35614
35613: POP
// result := ( chassis in result ) ;
35614: LD_ADDR_VAR 0 3
35618: PUSH
35619: LD_VAR 0 1
35623: PUSH
35624: LD_VAR 0 3
35628: IN
35629: ST_TO_ADDR
// end ;
35630: LD_VAR 0 3
35634: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35635: LD_INT 0
35637: PPUSH
// if not chassis or not weapon then
35638: LD_VAR 0 1
35642: NOT
35643: PUSH
35644: LD_VAR 0 2
35648: NOT
35649: OR
35650: IFFALSE 35654
// exit ;
35652: GO 36680
// case weapon of us_machine_gun :
35654: LD_VAR 0 2
35658: PUSH
35659: LD_INT 2
35661: DOUBLE
35662: EQUAL
35663: IFTRUE 35667
35665: GO 35697
35667: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35668: LD_ADDR_VAR 0 3
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: LD_INT 3
35681: PUSH
35682: LD_INT 4
35684: PUSH
35685: LD_INT 5
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: ST_TO_ADDR
35695: GO 36664
35697: LD_INT 3
35699: DOUBLE
35700: EQUAL
35701: IFTRUE 35705
35703: GO 35735
35705: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35706: LD_ADDR_VAR 0 3
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 3
35719: PUSH
35720: LD_INT 4
35722: PUSH
35723: LD_INT 5
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: ST_TO_ADDR
35733: GO 36664
35735: LD_INT 11
35737: DOUBLE
35738: EQUAL
35739: IFTRUE 35743
35741: GO 35773
35743: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35744: LD_ADDR_VAR 0 3
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: LD_INT 3
35757: PUSH
35758: LD_INT 4
35760: PUSH
35761: LD_INT 5
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: ST_TO_ADDR
35771: GO 36664
35773: LD_INT 4
35775: DOUBLE
35776: EQUAL
35777: IFTRUE 35781
35779: GO 35807
35781: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35782: LD_ADDR_VAR 0 3
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: LD_INT 3
35792: PUSH
35793: LD_INT 4
35795: PUSH
35796: LD_INT 5
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: ST_TO_ADDR
35805: GO 36664
35807: LD_INT 5
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35815
35813: GO 35841
35815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35816: LD_ADDR_VAR 0 3
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: LD_INT 3
35826: PUSH
35827: LD_INT 4
35829: PUSH
35830: LD_INT 5
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: ST_TO_ADDR
35839: GO 36664
35841: LD_INT 9
35843: DOUBLE
35844: EQUAL
35845: IFTRUE 35849
35847: GO 35875
35849: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35850: LD_ADDR_VAR 0 3
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 3
35860: PUSH
35861: LD_INT 4
35863: PUSH
35864: LD_INT 5
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
35873: GO 36664
35875: LD_INT 7
35877: DOUBLE
35878: EQUAL
35879: IFTRUE 35883
35881: GO 35909
35883: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35884: LD_ADDR_VAR 0 3
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: LD_INT 3
35894: PUSH
35895: LD_INT 4
35897: PUSH
35898: LD_INT 5
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: ST_TO_ADDR
35907: GO 36664
35909: LD_INT 12
35911: DOUBLE
35912: EQUAL
35913: IFTRUE 35917
35915: GO 35943
35917: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35918: LD_ADDR_VAR 0 3
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 3
35928: PUSH
35929: LD_INT 4
35931: PUSH
35932: LD_INT 5
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: ST_TO_ADDR
35941: GO 36664
35943: LD_INT 13
35945: DOUBLE
35946: EQUAL
35947: IFTRUE 35951
35949: GO 35977
35951: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35952: LD_ADDR_VAR 0 3
35956: PUSH
35957: LD_INT 2
35959: PUSH
35960: LD_INT 3
35962: PUSH
35963: LD_INT 4
35965: PUSH
35966: LD_INT 5
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: ST_TO_ADDR
35975: GO 36664
35977: LD_INT 14
35979: DOUBLE
35980: EQUAL
35981: IFTRUE 35985
35983: GO 36003
35985: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35986: LD_ADDR_VAR 0 3
35990: PUSH
35991: LD_INT 4
35993: PUSH
35994: LD_INT 5
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: ST_TO_ADDR
36001: GO 36664
36003: LD_INT 6
36005: DOUBLE
36006: EQUAL
36007: IFTRUE 36011
36009: GO 36029
36011: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36012: LD_ADDR_VAR 0 3
36016: PUSH
36017: LD_INT 4
36019: PUSH
36020: LD_INT 5
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: ST_TO_ADDR
36027: GO 36664
36029: LD_INT 10
36031: DOUBLE
36032: EQUAL
36033: IFTRUE 36037
36035: GO 36055
36037: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36038: LD_ADDR_VAR 0 3
36042: PUSH
36043: LD_INT 4
36045: PUSH
36046: LD_INT 5
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: ST_TO_ADDR
36053: GO 36664
36055: LD_INT 22
36057: DOUBLE
36058: EQUAL
36059: IFTRUE 36063
36061: GO 36089
36063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36064: LD_ADDR_VAR 0 3
36068: PUSH
36069: LD_INT 11
36071: PUSH
36072: LD_INT 12
36074: PUSH
36075: LD_INT 13
36077: PUSH
36078: LD_INT 14
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: ST_TO_ADDR
36087: GO 36664
36089: LD_INT 23
36091: DOUBLE
36092: EQUAL
36093: IFTRUE 36097
36095: GO 36123
36097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36098: LD_ADDR_VAR 0 3
36102: PUSH
36103: LD_INT 11
36105: PUSH
36106: LD_INT 12
36108: PUSH
36109: LD_INT 13
36111: PUSH
36112: LD_INT 14
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: ST_TO_ADDR
36121: GO 36664
36123: LD_INT 24
36125: DOUBLE
36126: EQUAL
36127: IFTRUE 36131
36129: GO 36157
36131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36132: LD_ADDR_VAR 0 3
36136: PUSH
36137: LD_INT 11
36139: PUSH
36140: LD_INT 12
36142: PUSH
36143: LD_INT 13
36145: PUSH
36146: LD_INT 14
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: ST_TO_ADDR
36155: GO 36664
36157: LD_INT 30
36159: DOUBLE
36160: EQUAL
36161: IFTRUE 36165
36163: GO 36191
36165: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36166: LD_ADDR_VAR 0 3
36170: PUSH
36171: LD_INT 11
36173: PUSH
36174: LD_INT 12
36176: PUSH
36177: LD_INT 13
36179: PUSH
36180: LD_INT 14
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: ST_TO_ADDR
36189: GO 36664
36191: LD_INT 25
36193: DOUBLE
36194: EQUAL
36195: IFTRUE 36199
36197: GO 36217
36199: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: LD_INT 13
36207: PUSH
36208: LD_INT 14
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: ST_TO_ADDR
36215: GO 36664
36217: LD_INT 27
36219: DOUBLE
36220: EQUAL
36221: IFTRUE 36225
36223: GO 36243
36225: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_INT 13
36233: PUSH
36234: LD_INT 14
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: ST_TO_ADDR
36241: GO 36664
36243: LD_INT 28
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36251
36249: GO 36269
36251: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: LD_INT 13
36259: PUSH
36260: LD_INT 14
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: ST_TO_ADDR
36267: GO 36664
36269: LD_INT 29
36271: DOUBLE
36272: EQUAL
36273: IFTRUE 36277
36275: GO 36295
36277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_INT 13
36285: PUSH
36286: LD_INT 14
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: ST_TO_ADDR
36293: GO 36664
36295: LD_INT 31
36297: DOUBLE
36298: EQUAL
36299: IFTRUE 36303
36301: GO 36321
36303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36304: LD_ADDR_VAR 0 3
36308: PUSH
36309: LD_INT 13
36311: PUSH
36312: LD_INT 14
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: ST_TO_ADDR
36319: GO 36664
36321: LD_INT 26
36323: DOUBLE
36324: EQUAL
36325: IFTRUE 36329
36327: GO 36347
36329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36330: LD_ADDR_VAR 0 3
36334: PUSH
36335: LD_INT 13
36337: PUSH
36338: LD_INT 14
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: ST_TO_ADDR
36345: GO 36664
36347: LD_INT 42
36349: DOUBLE
36350: EQUAL
36351: IFTRUE 36355
36353: GO 36381
36355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36356: LD_ADDR_VAR 0 3
36360: PUSH
36361: LD_INT 21
36363: PUSH
36364: LD_INT 22
36366: PUSH
36367: LD_INT 23
36369: PUSH
36370: LD_INT 24
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: ST_TO_ADDR
36379: GO 36664
36381: LD_INT 43
36383: DOUBLE
36384: EQUAL
36385: IFTRUE 36389
36387: GO 36415
36389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36390: LD_ADDR_VAR 0 3
36394: PUSH
36395: LD_INT 21
36397: PUSH
36398: LD_INT 22
36400: PUSH
36401: LD_INT 23
36403: PUSH
36404: LD_INT 24
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: ST_TO_ADDR
36413: GO 36664
36415: LD_INT 44
36417: DOUBLE
36418: EQUAL
36419: IFTRUE 36423
36421: GO 36449
36423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36424: LD_ADDR_VAR 0 3
36428: PUSH
36429: LD_INT 21
36431: PUSH
36432: LD_INT 22
36434: PUSH
36435: LD_INT 23
36437: PUSH
36438: LD_INT 24
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: ST_TO_ADDR
36447: GO 36664
36449: LD_INT 45
36451: DOUBLE
36452: EQUAL
36453: IFTRUE 36457
36455: GO 36483
36457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36458: LD_ADDR_VAR 0 3
36462: PUSH
36463: LD_INT 21
36465: PUSH
36466: LD_INT 22
36468: PUSH
36469: LD_INT 23
36471: PUSH
36472: LD_INT 24
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: ST_TO_ADDR
36481: GO 36664
36483: LD_INT 49
36485: DOUBLE
36486: EQUAL
36487: IFTRUE 36491
36489: GO 36517
36491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36492: LD_ADDR_VAR 0 3
36496: PUSH
36497: LD_INT 21
36499: PUSH
36500: LD_INT 22
36502: PUSH
36503: LD_INT 23
36505: PUSH
36506: LD_INT 24
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
36515: GO 36664
36517: LD_INT 51
36519: DOUBLE
36520: EQUAL
36521: IFTRUE 36525
36523: GO 36551
36525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36526: LD_ADDR_VAR 0 3
36530: PUSH
36531: LD_INT 21
36533: PUSH
36534: LD_INT 22
36536: PUSH
36537: LD_INT 23
36539: PUSH
36540: LD_INT 24
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
36549: GO 36664
36551: LD_INT 52
36553: DOUBLE
36554: EQUAL
36555: IFTRUE 36559
36557: GO 36585
36559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36560: LD_ADDR_VAR 0 3
36564: PUSH
36565: LD_INT 21
36567: PUSH
36568: LD_INT 22
36570: PUSH
36571: LD_INT 23
36573: PUSH
36574: LD_INT 24
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: ST_TO_ADDR
36583: GO 36664
36585: LD_INT 53
36587: DOUBLE
36588: EQUAL
36589: IFTRUE 36593
36591: GO 36611
36593: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36594: LD_ADDR_VAR 0 3
36598: PUSH
36599: LD_INT 23
36601: PUSH
36602: LD_INT 24
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: ST_TO_ADDR
36609: GO 36664
36611: LD_INT 46
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36637
36619: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36620: LD_ADDR_VAR 0 3
36624: PUSH
36625: LD_INT 23
36627: PUSH
36628: LD_INT 24
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: ST_TO_ADDR
36635: GO 36664
36637: LD_INT 47
36639: DOUBLE
36640: EQUAL
36641: IFTRUE 36645
36643: GO 36663
36645: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36646: LD_ADDR_VAR 0 3
36650: PUSH
36651: LD_INT 23
36653: PUSH
36654: LD_INT 24
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: ST_TO_ADDR
36661: GO 36664
36663: POP
// result := ( chassis in result ) ;
36664: LD_ADDR_VAR 0 3
36668: PUSH
36669: LD_VAR 0 1
36673: PUSH
36674: LD_VAR 0 3
36678: IN
36679: ST_TO_ADDR
// end ;
36680: LD_VAR 0 3
36684: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36685: LD_INT 0
36687: PPUSH
36688: PPUSH
36689: PPUSH
36690: PPUSH
36691: PPUSH
36692: PPUSH
36693: PPUSH
// result := array ;
36694: LD_ADDR_VAR 0 5
36698: PUSH
36699: LD_VAR 0 1
36703: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36704: LD_VAR 0 1
36708: NOT
36709: PUSH
36710: LD_VAR 0 2
36714: NOT
36715: OR
36716: PUSH
36717: LD_VAR 0 3
36721: NOT
36722: OR
36723: PUSH
36724: LD_VAR 0 2
36728: PUSH
36729: LD_VAR 0 1
36733: GREATER
36734: OR
36735: PUSH
36736: LD_VAR 0 3
36740: PUSH
36741: LD_VAR 0 1
36745: GREATER
36746: OR
36747: IFFALSE 36751
// exit ;
36749: GO 37047
// if direction then
36751: LD_VAR 0 4
36755: IFFALSE 36819
// begin d := 1 ;
36757: LD_ADDR_VAR 0 9
36761: PUSH
36762: LD_INT 1
36764: ST_TO_ADDR
// if i_from > i_to then
36765: LD_VAR 0 2
36769: PUSH
36770: LD_VAR 0 3
36774: GREATER
36775: IFFALSE 36801
// length := ( array - i_from ) + i_to else
36777: LD_ADDR_VAR 0 11
36781: PUSH
36782: LD_VAR 0 1
36786: PUSH
36787: LD_VAR 0 2
36791: MINUS
36792: PUSH
36793: LD_VAR 0 3
36797: PLUS
36798: ST_TO_ADDR
36799: GO 36817
// length := i_to - i_from ;
36801: LD_ADDR_VAR 0 11
36805: PUSH
36806: LD_VAR 0 3
36810: PUSH
36811: LD_VAR 0 2
36815: MINUS
36816: ST_TO_ADDR
// end else
36817: GO 36880
// begin d := - 1 ;
36819: LD_ADDR_VAR 0 9
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: ST_TO_ADDR
// if i_from > i_to then
36828: LD_VAR 0 2
36832: PUSH
36833: LD_VAR 0 3
36837: GREATER
36838: IFFALSE 36858
// length := i_from - i_to else
36840: LD_ADDR_VAR 0 11
36844: PUSH
36845: LD_VAR 0 2
36849: PUSH
36850: LD_VAR 0 3
36854: MINUS
36855: ST_TO_ADDR
36856: GO 36880
// length := ( array - i_to ) + i_from ;
36858: LD_ADDR_VAR 0 11
36862: PUSH
36863: LD_VAR 0 1
36867: PUSH
36868: LD_VAR 0 3
36872: MINUS
36873: PUSH
36874: LD_VAR 0 2
36878: PLUS
36879: ST_TO_ADDR
// end ; if not length then
36880: LD_VAR 0 11
36884: NOT
36885: IFFALSE 36889
// exit ;
36887: GO 37047
// tmp := array ;
36889: LD_ADDR_VAR 0 10
36893: PUSH
36894: LD_VAR 0 1
36898: ST_TO_ADDR
// for i = 1 to length do
36899: LD_ADDR_VAR 0 6
36903: PUSH
36904: DOUBLE
36905: LD_INT 1
36907: DEC
36908: ST_TO_ADDR
36909: LD_VAR 0 11
36913: PUSH
36914: FOR_TO
36915: IFFALSE 37035
// begin for j = 1 to array do
36917: LD_ADDR_VAR 0 7
36921: PUSH
36922: DOUBLE
36923: LD_INT 1
36925: DEC
36926: ST_TO_ADDR
36927: LD_VAR 0 1
36931: PUSH
36932: FOR_TO
36933: IFFALSE 37021
// begin k := j + d ;
36935: LD_ADDR_VAR 0 8
36939: PUSH
36940: LD_VAR 0 7
36944: PUSH
36945: LD_VAR 0 9
36949: PLUS
36950: ST_TO_ADDR
// if k > array then
36951: LD_VAR 0 8
36955: PUSH
36956: LD_VAR 0 1
36960: GREATER
36961: IFFALSE 36971
// k := 1 ;
36963: LD_ADDR_VAR 0 8
36967: PUSH
36968: LD_INT 1
36970: ST_TO_ADDR
// if not k then
36971: LD_VAR 0 8
36975: NOT
36976: IFFALSE 36988
// k := array ;
36978: LD_ADDR_VAR 0 8
36982: PUSH
36983: LD_VAR 0 1
36987: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36988: LD_ADDR_VAR 0 10
36992: PUSH
36993: LD_VAR 0 10
36997: PPUSH
36998: LD_VAR 0 8
37002: PPUSH
37003: LD_VAR 0 1
37007: PUSH
37008: LD_VAR 0 7
37012: ARRAY
37013: PPUSH
37014: CALL_OW 1
37018: ST_TO_ADDR
// end ;
37019: GO 36932
37021: POP
37022: POP
// array := tmp ;
37023: LD_ADDR_VAR 0 1
37027: PUSH
37028: LD_VAR 0 10
37032: ST_TO_ADDR
// end ;
37033: GO 36914
37035: POP
37036: POP
// result := array ;
37037: LD_ADDR_VAR 0 5
37041: PUSH
37042: LD_VAR 0 1
37046: ST_TO_ADDR
// end ;
37047: LD_VAR 0 5
37051: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37052: LD_INT 0
37054: PPUSH
37055: PPUSH
// result := 0 ;
37056: LD_ADDR_VAR 0 3
37060: PUSH
37061: LD_INT 0
37063: ST_TO_ADDR
// if not array or not value in array then
37064: LD_VAR 0 1
37068: NOT
37069: PUSH
37070: LD_VAR 0 2
37074: PUSH
37075: LD_VAR 0 1
37079: IN
37080: NOT
37081: OR
37082: IFFALSE 37086
// exit ;
37084: GO 37140
// for i = 1 to array do
37086: LD_ADDR_VAR 0 4
37090: PUSH
37091: DOUBLE
37092: LD_INT 1
37094: DEC
37095: ST_TO_ADDR
37096: LD_VAR 0 1
37100: PUSH
37101: FOR_TO
37102: IFFALSE 37138
// if value = array [ i ] then
37104: LD_VAR 0 2
37108: PUSH
37109: LD_VAR 0 1
37113: PUSH
37114: LD_VAR 0 4
37118: ARRAY
37119: EQUAL
37120: IFFALSE 37136
// begin result := i ;
37122: LD_ADDR_VAR 0 3
37126: PUSH
37127: LD_VAR 0 4
37131: ST_TO_ADDR
// exit ;
37132: POP
37133: POP
37134: GO 37140
// end ;
37136: GO 37101
37138: POP
37139: POP
// end ;
37140: LD_VAR 0 3
37144: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37145: LD_INT 0
37147: PPUSH
// vc_chassis := chassis ;
37148: LD_ADDR_OWVAR 37
37152: PUSH
37153: LD_VAR 0 1
37157: ST_TO_ADDR
// vc_engine := engine ;
37158: LD_ADDR_OWVAR 39
37162: PUSH
37163: LD_VAR 0 2
37167: ST_TO_ADDR
// vc_control := control ;
37168: LD_ADDR_OWVAR 38
37172: PUSH
37173: LD_VAR 0 3
37177: ST_TO_ADDR
// vc_weapon := weapon ;
37178: LD_ADDR_OWVAR 40
37182: PUSH
37183: LD_VAR 0 4
37187: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37188: LD_ADDR_OWVAR 41
37192: PUSH
37193: LD_VAR 0 5
37197: ST_TO_ADDR
// end ;
37198: LD_VAR 0 6
37202: RET
// export function WantPlant ( unit ) ; var task ; begin
37203: LD_INT 0
37205: PPUSH
37206: PPUSH
// result := false ;
37207: LD_ADDR_VAR 0 2
37211: PUSH
37212: LD_INT 0
37214: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37215: LD_ADDR_VAR 0 3
37219: PUSH
37220: LD_VAR 0 1
37224: PPUSH
37225: CALL_OW 437
37229: ST_TO_ADDR
// if task then
37230: LD_VAR 0 3
37234: IFFALSE 37262
// if task [ 1 ] [ 1 ] = p then
37236: LD_VAR 0 3
37240: PUSH
37241: LD_INT 1
37243: ARRAY
37244: PUSH
37245: LD_INT 1
37247: ARRAY
37248: PUSH
37249: LD_STRING p
37251: EQUAL
37252: IFFALSE 37262
// result := true ;
37254: LD_ADDR_VAR 0 2
37258: PUSH
37259: LD_INT 1
37261: ST_TO_ADDR
// end ;
37262: LD_VAR 0 2
37266: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37267: LD_INT 0
37269: PPUSH
37270: PPUSH
37271: PPUSH
37272: PPUSH
// if pos < 1 then
37273: LD_VAR 0 2
37277: PUSH
37278: LD_INT 1
37280: LESS
37281: IFFALSE 37285
// exit ;
37283: GO 37588
// if pos = 1 then
37285: LD_VAR 0 2
37289: PUSH
37290: LD_INT 1
37292: EQUAL
37293: IFFALSE 37326
// result := Replace ( arr , pos [ 1 ] , value ) else
37295: LD_ADDR_VAR 0 4
37299: PUSH
37300: LD_VAR 0 1
37304: PPUSH
37305: LD_VAR 0 2
37309: PUSH
37310: LD_INT 1
37312: ARRAY
37313: PPUSH
37314: LD_VAR 0 3
37318: PPUSH
37319: CALL_OW 1
37323: ST_TO_ADDR
37324: GO 37588
// begin tmp := arr ;
37326: LD_ADDR_VAR 0 6
37330: PUSH
37331: LD_VAR 0 1
37335: ST_TO_ADDR
// s_arr := [ tmp ] ;
37336: LD_ADDR_VAR 0 7
37340: PUSH
37341: LD_VAR 0 6
37345: PUSH
37346: EMPTY
37347: LIST
37348: ST_TO_ADDR
// for i = 1 to pos - 1 do
37349: LD_ADDR_VAR 0 5
37353: PUSH
37354: DOUBLE
37355: LD_INT 1
37357: DEC
37358: ST_TO_ADDR
37359: LD_VAR 0 2
37363: PUSH
37364: LD_INT 1
37366: MINUS
37367: PUSH
37368: FOR_TO
37369: IFFALSE 37414
// begin tmp := tmp [ pos [ i ] ] ;
37371: LD_ADDR_VAR 0 6
37375: PUSH
37376: LD_VAR 0 6
37380: PUSH
37381: LD_VAR 0 2
37385: PUSH
37386: LD_VAR 0 5
37390: ARRAY
37391: ARRAY
37392: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37393: LD_ADDR_VAR 0 7
37397: PUSH
37398: LD_VAR 0 7
37402: PUSH
37403: LD_VAR 0 6
37407: PUSH
37408: EMPTY
37409: LIST
37410: ADD
37411: ST_TO_ADDR
// end ;
37412: GO 37368
37414: POP
37415: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37416: LD_ADDR_VAR 0 6
37420: PUSH
37421: LD_VAR 0 6
37425: PPUSH
37426: LD_VAR 0 2
37430: PUSH
37431: LD_VAR 0 2
37435: ARRAY
37436: PPUSH
37437: LD_VAR 0 3
37441: PPUSH
37442: CALL_OW 1
37446: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37447: LD_ADDR_VAR 0 7
37451: PUSH
37452: LD_VAR 0 7
37456: PPUSH
37457: LD_VAR 0 7
37461: PPUSH
37462: LD_VAR 0 6
37466: PPUSH
37467: CALL_OW 1
37471: ST_TO_ADDR
// for i = s_arr downto 2 do
37472: LD_ADDR_VAR 0 5
37476: PUSH
37477: DOUBLE
37478: LD_VAR 0 7
37482: INC
37483: ST_TO_ADDR
37484: LD_INT 2
37486: PUSH
37487: FOR_DOWNTO
37488: IFFALSE 37572
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37490: LD_ADDR_VAR 0 6
37494: PUSH
37495: LD_VAR 0 7
37499: PUSH
37500: LD_VAR 0 5
37504: PUSH
37505: LD_INT 1
37507: MINUS
37508: ARRAY
37509: PPUSH
37510: LD_VAR 0 2
37514: PUSH
37515: LD_VAR 0 5
37519: PUSH
37520: LD_INT 1
37522: MINUS
37523: ARRAY
37524: PPUSH
37525: LD_VAR 0 7
37529: PUSH
37530: LD_VAR 0 5
37534: ARRAY
37535: PPUSH
37536: CALL_OW 1
37540: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37541: LD_ADDR_VAR 0 7
37545: PUSH
37546: LD_VAR 0 7
37550: PPUSH
37551: LD_VAR 0 5
37555: PUSH
37556: LD_INT 1
37558: MINUS
37559: PPUSH
37560: LD_VAR 0 6
37564: PPUSH
37565: CALL_OW 1
37569: ST_TO_ADDR
// end ;
37570: GO 37487
37572: POP
37573: POP
// result := s_arr [ 1 ] ;
37574: LD_ADDR_VAR 0 4
37578: PUSH
37579: LD_VAR 0 7
37583: PUSH
37584: LD_INT 1
37586: ARRAY
37587: ST_TO_ADDR
// end ; end ;
37588: LD_VAR 0 4
37592: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37593: LD_INT 0
37595: PPUSH
37596: PPUSH
// if not list then
37597: LD_VAR 0 1
37601: NOT
37602: IFFALSE 37606
// exit ;
37604: GO 37697
// i := list [ pos1 ] ;
37606: LD_ADDR_VAR 0 5
37610: PUSH
37611: LD_VAR 0 1
37615: PUSH
37616: LD_VAR 0 2
37620: ARRAY
37621: ST_TO_ADDR
// if not i then
37622: LD_VAR 0 5
37626: NOT
37627: IFFALSE 37631
// exit ;
37629: GO 37697
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37631: LD_ADDR_VAR 0 1
37635: PUSH
37636: LD_VAR 0 1
37640: PPUSH
37641: LD_VAR 0 2
37645: PPUSH
37646: LD_VAR 0 1
37650: PUSH
37651: LD_VAR 0 3
37655: ARRAY
37656: PPUSH
37657: CALL_OW 1
37661: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37662: LD_ADDR_VAR 0 1
37666: PUSH
37667: LD_VAR 0 1
37671: PPUSH
37672: LD_VAR 0 3
37676: PPUSH
37677: LD_VAR 0 5
37681: PPUSH
37682: CALL_OW 1
37686: ST_TO_ADDR
// result := list ;
37687: LD_ADDR_VAR 0 4
37691: PUSH
37692: LD_VAR 0 1
37696: ST_TO_ADDR
// end ;
37697: LD_VAR 0 4
37701: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37702: LD_INT 0
37704: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37705: LD_ADDR_VAR 0 5
37709: PUSH
37710: LD_VAR 0 1
37714: PPUSH
37715: CALL_OW 250
37719: PPUSH
37720: LD_VAR 0 1
37724: PPUSH
37725: CALL_OW 251
37729: PPUSH
37730: LD_VAR 0 2
37734: PPUSH
37735: LD_VAR 0 3
37739: PPUSH
37740: LD_VAR 0 4
37744: PPUSH
37745: CALL 37755 0 5
37749: ST_TO_ADDR
// end ;
37750: LD_VAR 0 5
37754: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37755: LD_INT 0
37757: PPUSH
37758: PPUSH
37759: PPUSH
37760: PPUSH
// if not list then
37761: LD_VAR 0 3
37765: NOT
37766: IFFALSE 37770
// exit ;
37768: GO 38158
// result := [ ] ;
37770: LD_ADDR_VAR 0 6
37774: PUSH
37775: EMPTY
37776: ST_TO_ADDR
// for i in list do
37777: LD_ADDR_VAR 0 7
37781: PUSH
37782: LD_VAR 0 3
37786: PUSH
37787: FOR_IN
37788: IFFALSE 37990
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37790: LD_ADDR_VAR 0 9
37794: PUSH
37795: LD_VAR 0 7
37799: PPUSH
37800: LD_VAR 0 1
37804: PPUSH
37805: LD_VAR 0 2
37809: PPUSH
37810: CALL_OW 297
37814: ST_TO_ADDR
// if not result then
37815: LD_VAR 0 6
37819: NOT
37820: IFFALSE 37846
// result := [ [ i , tmp ] ] else
37822: LD_ADDR_VAR 0 6
37826: PUSH
37827: LD_VAR 0 7
37831: PUSH
37832: LD_VAR 0 9
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: EMPTY
37842: LIST
37843: ST_TO_ADDR
37844: GO 37988
// begin if result [ result ] [ 2 ] < tmp then
37846: LD_VAR 0 6
37850: PUSH
37851: LD_VAR 0 6
37855: ARRAY
37856: PUSH
37857: LD_INT 2
37859: ARRAY
37860: PUSH
37861: LD_VAR 0 9
37865: LESS
37866: IFFALSE 37908
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37868: LD_ADDR_VAR 0 6
37872: PUSH
37873: LD_VAR 0 6
37877: PPUSH
37878: LD_VAR 0 6
37882: PUSH
37883: LD_INT 1
37885: PLUS
37886: PPUSH
37887: LD_VAR 0 7
37891: PUSH
37892: LD_VAR 0 9
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PPUSH
37901: CALL_OW 2
37905: ST_TO_ADDR
37906: GO 37988
// for j = 1 to result do
37908: LD_ADDR_VAR 0 8
37912: PUSH
37913: DOUBLE
37914: LD_INT 1
37916: DEC
37917: ST_TO_ADDR
37918: LD_VAR 0 6
37922: PUSH
37923: FOR_TO
37924: IFFALSE 37986
// begin if tmp < result [ j ] [ 2 ] then
37926: LD_VAR 0 9
37930: PUSH
37931: LD_VAR 0 6
37935: PUSH
37936: LD_VAR 0 8
37940: ARRAY
37941: PUSH
37942: LD_INT 2
37944: ARRAY
37945: LESS
37946: IFFALSE 37984
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37948: LD_ADDR_VAR 0 6
37952: PUSH
37953: LD_VAR 0 6
37957: PPUSH
37958: LD_VAR 0 8
37962: PPUSH
37963: LD_VAR 0 7
37967: PUSH
37968: LD_VAR 0 9
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PPUSH
37977: CALL_OW 2
37981: ST_TO_ADDR
// break ;
37982: GO 37986
// end ; end ;
37984: GO 37923
37986: POP
37987: POP
// end ; end ;
37988: GO 37787
37990: POP
37991: POP
// if result and not asc then
37992: LD_VAR 0 6
37996: PUSH
37997: LD_VAR 0 4
38001: NOT
38002: AND
38003: IFFALSE 38078
// begin tmp := result ;
38005: LD_ADDR_VAR 0 9
38009: PUSH
38010: LD_VAR 0 6
38014: ST_TO_ADDR
// for i = tmp downto 1 do
38015: LD_ADDR_VAR 0 7
38019: PUSH
38020: DOUBLE
38021: LD_VAR 0 9
38025: INC
38026: ST_TO_ADDR
38027: LD_INT 1
38029: PUSH
38030: FOR_DOWNTO
38031: IFFALSE 38076
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38033: LD_ADDR_VAR 0 6
38037: PUSH
38038: LD_VAR 0 6
38042: PPUSH
38043: LD_VAR 0 9
38047: PUSH
38048: LD_VAR 0 7
38052: MINUS
38053: PUSH
38054: LD_INT 1
38056: PLUS
38057: PPUSH
38058: LD_VAR 0 9
38062: PUSH
38063: LD_VAR 0 7
38067: ARRAY
38068: PPUSH
38069: CALL_OW 1
38073: ST_TO_ADDR
38074: GO 38030
38076: POP
38077: POP
// end ; tmp := [ ] ;
38078: LD_ADDR_VAR 0 9
38082: PUSH
38083: EMPTY
38084: ST_TO_ADDR
// if mode then
38085: LD_VAR 0 5
38089: IFFALSE 38158
// begin for i = 1 to result do
38091: LD_ADDR_VAR 0 7
38095: PUSH
38096: DOUBLE
38097: LD_INT 1
38099: DEC
38100: ST_TO_ADDR
38101: LD_VAR 0 6
38105: PUSH
38106: FOR_TO
38107: IFFALSE 38146
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38109: LD_ADDR_VAR 0 9
38113: PUSH
38114: LD_VAR 0 9
38118: PPUSH
38119: LD_VAR 0 7
38123: PPUSH
38124: LD_VAR 0 6
38128: PUSH
38129: LD_VAR 0 7
38133: ARRAY
38134: PUSH
38135: LD_INT 1
38137: ARRAY
38138: PPUSH
38139: CALL_OW 1
38143: ST_TO_ADDR
38144: GO 38106
38146: POP
38147: POP
// result := tmp ;
38148: LD_ADDR_VAR 0 6
38152: PUSH
38153: LD_VAR 0 9
38157: ST_TO_ADDR
// end ; end ;
38158: LD_VAR 0 6
38162: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38163: LD_INT 0
38165: PPUSH
38166: PPUSH
38167: PPUSH
38168: PPUSH
38169: PPUSH
38170: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38171: LD_ADDR_VAR 0 5
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: EMPTY
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// if not x or not y then
38193: LD_VAR 0 2
38197: NOT
38198: PUSH
38199: LD_VAR 0 3
38203: NOT
38204: OR
38205: IFFALSE 38209
// exit ;
38207: GO 39855
// if not range then
38209: LD_VAR 0 4
38213: NOT
38214: IFFALSE 38224
// range := 10 ;
38216: LD_ADDR_VAR 0 4
38220: PUSH
38221: LD_INT 10
38223: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38224: LD_ADDR_VAR 0 8
38228: PUSH
38229: LD_INT 81
38231: PUSH
38232: LD_VAR 0 1
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 92
38243: PUSH
38244: LD_VAR 0 2
38248: PUSH
38249: LD_VAR 0 3
38253: PUSH
38254: LD_VAR 0 4
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 3
38267: PUSH
38268: LD_INT 21
38270: PUSH
38271: LD_INT 3
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: LIST
38286: PPUSH
38287: CALL_OW 69
38291: ST_TO_ADDR
// if not tmp then
38292: LD_VAR 0 8
38296: NOT
38297: IFFALSE 38301
// exit ;
38299: GO 39855
// for i in tmp do
38301: LD_ADDR_VAR 0 6
38305: PUSH
38306: LD_VAR 0 8
38310: PUSH
38311: FOR_IN
38312: IFFALSE 39830
// begin points := [ 0 , 0 , 0 ] ;
38314: LD_ADDR_VAR 0 9
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: LIST
38332: ST_TO_ADDR
// bpoints := 1 ;
38333: LD_ADDR_VAR 0 10
38337: PUSH
38338: LD_INT 1
38340: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38341: LD_VAR 0 6
38345: PPUSH
38346: CALL_OW 247
38350: PUSH
38351: LD_INT 1
38353: DOUBLE
38354: EQUAL
38355: IFTRUE 38359
38357: GO 38937
38359: POP
// begin if GetClass ( i ) = 1 then
38360: LD_VAR 0 6
38364: PPUSH
38365: CALL_OW 257
38369: PUSH
38370: LD_INT 1
38372: EQUAL
38373: IFFALSE 38394
// points := [ 10 , 5 , 3 ] ;
38375: LD_ADDR_VAR 0 9
38379: PUSH
38380: LD_INT 10
38382: PUSH
38383: LD_INT 5
38385: PUSH
38386: LD_INT 3
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38394: LD_VAR 0 6
38398: PPUSH
38399: CALL_OW 257
38403: PUSH
38404: LD_INT 2
38406: PUSH
38407: LD_INT 3
38409: PUSH
38410: LD_INT 4
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: LIST
38417: IN
38418: IFFALSE 38439
// points := [ 3 , 2 , 1 ] ;
38420: LD_ADDR_VAR 0 9
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38439: LD_VAR 0 6
38443: PPUSH
38444: CALL_OW 257
38448: PUSH
38449: LD_INT 5
38451: EQUAL
38452: IFFALSE 38473
// points := [ 130 , 5 , 2 ] ;
38454: LD_ADDR_VAR 0 9
38458: PUSH
38459: LD_INT 130
38461: PUSH
38462: LD_INT 5
38464: PUSH
38465: LD_INT 2
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38473: LD_VAR 0 6
38477: PPUSH
38478: CALL_OW 257
38482: PUSH
38483: LD_INT 8
38485: EQUAL
38486: IFFALSE 38507
// points := [ 35 , 35 , 30 ] ;
38488: LD_ADDR_VAR 0 9
38492: PUSH
38493: LD_INT 35
38495: PUSH
38496: LD_INT 35
38498: PUSH
38499: LD_INT 30
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: LIST
38506: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38507: LD_VAR 0 6
38511: PPUSH
38512: CALL_OW 257
38516: PUSH
38517: LD_INT 9
38519: EQUAL
38520: IFFALSE 38541
// points := [ 20 , 55 , 40 ] ;
38522: LD_ADDR_VAR 0 9
38526: PUSH
38527: LD_INT 20
38529: PUSH
38530: LD_INT 55
38532: PUSH
38533: LD_INT 40
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: LIST
38540: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38541: LD_VAR 0 6
38545: PPUSH
38546: CALL_OW 257
38550: PUSH
38551: LD_INT 12
38553: PUSH
38554: LD_INT 16
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: IN
38561: IFFALSE 38582
// points := [ 5 , 3 , 2 ] ;
38563: LD_ADDR_VAR 0 9
38567: PUSH
38568: LD_INT 5
38570: PUSH
38571: LD_INT 3
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: LIST
38581: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38582: LD_VAR 0 6
38586: PPUSH
38587: CALL_OW 257
38591: PUSH
38592: LD_INT 17
38594: EQUAL
38595: IFFALSE 38616
// points := [ 100 , 50 , 75 ] ;
38597: LD_ADDR_VAR 0 9
38601: PUSH
38602: LD_INT 100
38604: PUSH
38605: LD_INT 50
38607: PUSH
38608: LD_INT 75
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38616: LD_VAR 0 6
38620: PPUSH
38621: CALL_OW 257
38625: PUSH
38626: LD_INT 15
38628: EQUAL
38629: IFFALSE 38650
// points := [ 10 , 5 , 3 ] ;
38631: LD_ADDR_VAR 0 9
38635: PUSH
38636: LD_INT 10
38638: PUSH
38639: LD_INT 5
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38650: LD_VAR 0 6
38654: PPUSH
38655: CALL_OW 257
38659: PUSH
38660: LD_INT 14
38662: EQUAL
38663: IFFALSE 38684
// points := [ 10 , 0 , 0 ] ;
38665: LD_ADDR_VAR 0 9
38669: PUSH
38670: LD_INT 10
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38684: LD_VAR 0 6
38688: PPUSH
38689: CALL_OW 257
38693: PUSH
38694: LD_INT 11
38696: EQUAL
38697: IFFALSE 38718
// points := [ 30 , 10 , 5 ] ;
38699: LD_ADDR_VAR 0 9
38703: PUSH
38704: LD_INT 30
38706: PUSH
38707: LD_INT 10
38709: PUSH
38710: LD_INT 5
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: LIST
38717: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38718: LD_VAR 0 1
38722: PPUSH
38723: LD_INT 5
38725: PPUSH
38726: CALL_OW 321
38730: PUSH
38731: LD_INT 2
38733: EQUAL
38734: IFFALSE 38751
// bpoints := bpoints * 1.8 ;
38736: LD_ADDR_VAR 0 10
38740: PUSH
38741: LD_VAR 0 10
38745: PUSH
38746: LD_REAL  1.80000000000000E+0000
38749: MUL
38750: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38751: LD_VAR 0 6
38755: PPUSH
38756: CALL_OW 257
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 3
38769: PUSH
38770: LD_INT 4
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: IN
38779: PUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: LD_INT 51
38787: PPUSH
38788: CALL_OW 321
38792: PUSH
38793: LD_INT 2
38795: EQUAL
38796: AND
38797: IFFALSE 38814
// bpoints := bpoints * 1.2 ;
38799: LD_ADDR_VAR 0 10
38803: PUSH
38804: LD_VAR 0 10
38808: PUSH
38809: LD_REAL  1.20000000000000E+0000
38812: MUL
38813: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38814: LD_VAR 0 6
38818: PPUSH
38819: CALL_OW 257
38823: PUSH
38824: LD_INT 5
38826: PUSH
38827: LD_INT 7
38829: PUSH
38830: LD_INT 9
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: IN
38838: PUSH
38839: LD_VAR 0 1
38843: PPUSH
38844: LD_INT 52
38846: PPUSH
38847: CALL_OW 321
38851: PUSH
38852: LD_INT 2
38854: EQUAL
38855: AND
38856: IFFALSE 38873
// bpoints := bpoints * 1.5 ;
38858: LD_ADDR_VAR 0 10
38862: PUSH
38863: LD_VAR 0 10
38867: PUSH
38868: LD_REAL  1.50000000000000E+0000
38871: MUL
38872: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38873: LD_VAR 0 1
38877: PPUSH
38878: LD_INT 66
38880: PPUSH
38881: CALL_OW 321
38885: PUSH
38886: LD_INT 2
38888: EQUAL
38889: IFFALSE 38906
// bpoints := bpoints * 1.1 ;
38891: LD_ADDR_VAR 0 10
38895: PUSH
38896: LD_VAR 0 10
38900: PUSH
38901: LD_REAL  1.10000000000000E+0000
38904: MUL
38905: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38906: LD_ADDR_VAR 0 10
38910: PUSH
38911: LD_VAR 0 10
38915: PUSH
38916: LD_VAR 0 6
38920: PPUSH
38921: LD_INT 1
38923: PPUSH
38924: CALL_OW 259
38928: PUSH
38929: LD_REAL  1.15000000000000E+0000
38932: MUL
38933: MUL
38934: ST_TO_ADDR
// end ; unit_vehicle :
38935: GO 39759
38937: LD_INT 2
38939: DOUBLE
38940: EQUAL
38941: IFTRUE 38945
38943: GO 39747
38945: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38946: LD_VAR 0 6
38950: PPUSH
38951: CALL_OW 264
38955: PUSH
38956: LD_INT 2
38958: PUSH
38959: LD_INT 42
38961: PUSH
38962: LD_INT 24
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: IN
38970: IFFALSE 38991
// points := [ 25 , 5 , 3 ] ;
38972: LD_ADDR_VAR 0 9
38976: PUSH
38977: LD_INT 25
38979: PUSH
38980: LD_INT 5
38982: PUSH
38983: LD_INT 3
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38991: LD_VAR 0 6
38995: PPUSH
38996: CALL_OW 264
39000: PUSH
39001: LD_INT 4
39003: PUSH
39004: LD_INT 43
39006: PUSH
39007: LD_INT 25
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: IN
39015: IFFALSE 39036
// points := [ 40 , 15 , 5 ] ;
39017: LD_ADDR_VAR 0 9
39021: PUSH
39022: LD_INT 40
39024: PUSH
39025: LD_INT 15
39027: PUSH
39028: LD_INT 5
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: LIST
39035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39036: LD_VAR 0 6
39040: PPUSH
39041: CALL_OW 264
39045: PUSH
39046: LD_INT 3
39048: PUSH
39049: LD_INT 23
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: IN
39056: IFFALSE 39077
// points := [ 7 , 25 , 8 ] ;
39058: LD_ADDR_VAR 0 9
39062: PUSH
39063: LD_INT 7
39065: PUSH
39066: LD_INT 25
39068: PUSH
39069: LD_INT 8
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39077: LD_VAR 0 6
39081: PPUSH
39082: CALL_OW 264
39086: PUSH
39087: LD_INT 5
39089: PUSH
39090: LD_INT 27
39092: PUSH
39093: LD_INT 44
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: IN
39101: IFFALSE 39122
// points := [ 14 , 50 , 16 ] ;
39103: LD_ADDR_VAR 0 9
39107: PUSH
39108: LD_INT 14
39110: PUSH
39111: LD_INT 50
39113: PUSH
39114: LD_INT 16
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39122: LD_VAR 0 6
39126: PPUSH
39127: CALL_OW 264
39131: PUSH
39132: LD_INT 6
39134: PUSH
39135: LD_INT 46
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: IN
39142: IFFALSE 39163
// points := [ 32 , 120 , 70 ] ;
39144: LD_ADDR_VAR 0 9
39148: PUSH
39149: LD_INT 32
39151: PUSH
39152: LD_INT 120
39154: PUSH
39155: LD_INT 70
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
39163: LD_VAR 0 6
39167: PPUSH
39168: CALL_OW 264
39172: PUSH
39173: LD_INT 7
39175: PUSH
39176: LD_INT 28
39178: PUSH
39179: LD_INT 45
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: IN
39187: IFFALSE 39208
// points := [ 35 , 20 , 45 ] ;
39189: LD_ADDR_VAR 0 9
39193: PUSH
39194: LD_INT 35
39196: PUSH
39197: LD_INT 20
39199: PUSH
39200: LD_INT 45
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: LIST
39207: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39208: LD_VAR 0 6
39212: PPUSH
39213: CALL_OW 264
39217: PUSH
39218: LD_INT 47
39220: PUSH
39221: EMPTY
39222: LIST
39223: IN
39224: IFFALSE 39245
// points := [ 67 , 45 , 75 ] ;
39226: LD_ADDR_VAR 0 9
39230: PUSH
39231: LD_INT 67
39233: PUSH
39234: LD_INT 45
39236: PUSH
39237: LD_INT 75
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: LIST
39244: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39245: LD_VAR 0 6
39249: PPUSH
39250: CALL_OW 264
39254: PUSH
39255: LD_INT 26
39257: PUSH
39258: EMPTY
39259: LIST
39260: IN
39261: IFFALSE 39282
// points := [ 120 , 30 , 80 ] ;
39263: LD_ADDR_VAR 0 9
39267: PUSH
39268: LD_INT 120
39270: PUSH
39271: LD_INT 30
39273: PUSH
39274: LD_INT 80
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39282: LD_VAR 0 6
39286: PPUSH
39287: CALL_OW 264
39291: PUSH
39292: LD_INT 22
39294: PUSH
39295: EMPTY
39296: LIST
39297: IN
39298: IFFALSE 39319
// points := [ 40 , 1 , 1 ] ;
39300: LD_ADDR_VAR 0 9
39304: PUSH
39305: LD_INT 40
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: LIST
39318: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39319: LD_VAR 0 6
39323: PPUSH
39324: CALL_OW 264
39328: PUSH
39329: LD_INT 29
39331: PUSH
39332: EMPTY
39333: LIST
39334: IN
39335: IFFALSE 39356
// points := [ 70 , 200 , 400 ] ;
39337: LD_ADDR_VAR 0 9
39341: PUSH
39342: LD_INT 70
39344: PUSH
39345: LD_INT 200
39347: PUSH
39348: LD_INT 400
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: LIST
39355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39356: LD_VAR 0 6
39360: PPUSH
39361: CALL_OW 264
39365: PUSH
39366: LD_INT 14
39368: PUSH
39369: LD_INT 53
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: IN
39376: IFFALSE 39397
// points := [ 40 , 10 , 20 ] ;
39378: LD_ADDR_VAR 0 9
39382: PUSH
39383: LD_INT 40
39385: PUSH
39386: LD_INT 10
39388: PUSH
39389: LD_INT 20
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: LIST
39396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39397: LD_VAR 0 6
39401: PPUSH
39402: CALL_OW 264
39406: PUSH
39407: LD_INT 9
39409: PUSH
39410: EMPTY
39411: LIST
39412: IN
39413: IFFALSE 39434
// points := [ 5 , 70 , 20 ] ;
39415: LD_ADDR_VAR 0 9
39419: PUSH
39420: LD_INT 5
39422: PUSH
39423: LD_INT 70
39425: PUSH
39426: LD_INT 20
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39434: LD_VAR 0 6
39438: PPUSH
39439: CALL_OW 264
39443: PUSH
39444: LD_INT 10
39446: PUSH
39447: EMPTY
39448: LIST
39449: IN
39450: IFFALSE 39471
// points := [ 35 , 110 , 70 ] ;
39452: LD_ADDR_VAR 0 9
39456: PUSH
39457: LD_INT 35
39459: PUSH
39460: LD_INT 110
39462: PUSH
39463: LD_INT 70
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: LIST
39470: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39471: LD_VAR 0 6
39475: PPUSH
39476: CALL_OW 265
39480: PUSH
39481: LD_INT 25
39483: EQUAL
39484: IFFALSE 39505
// points := [ 80 , 65 , 100 ] ;
39486: LD_ADDR_VAR 0 9
39490: PUSH
39491: LD_INT 80
39493: PUSH
39494: LD_INT 65
39496: PUSH
39497: LD_INT 100
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39505: LD_VAR 0 6
39509: PPUSH
39510: CALL_OW 263
39514: PUSH
39515: LD_INT 1
39517: EQUAL
39518: IFFALSE 39553
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39520: LD_ADDR_VAR 0 10
39524: PUSH
39525: LD_VAR 0 10
39529: PUSH
39530: LD_VAR 0 6
39534: PPUSH
39535: CALL_OW 311
39539: PPUSH
39540: LD_INT 3
39542: PPUSH
39543: CALL_OW 259
39547: PUSH
39548: LD_INT 4
39550: MUL
39551: MUL
39552: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39553: LD_VAR 0 6
39557: PPUSH
39558: CALL_OW 263
39562: PUSH
39563: LD_INT 2
39565: EQUAL
39566: IFFALSE 39617
// begin j := IsControledBy ( i ) ;
39568: LD_ADDR_VAR 0 7
39572: PUSH
39573: LD_VAR 0 6
39577: PPUSH
39578: CALL_OW 312
39582: ST_TO_ADDR
// if j then
39583: LD_VAR 0 7
39587: IFFALSE 39617
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39589: LD_ADDR_VAR 0 10
39593: PUSH
39594: LD_VAR 0 10
39598: PUSH
39599: LD_VAR 0 7
39603: PPUSH
39604: LD_INT 3
39606: PPUSH
39607: CALL_OW 259
39611: PUSH
39612: LD_INT 3
39614: MUL
39615: MUL
39616: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39617: LD_VAR 0 6
39621: PPUSH
39622: CALL_OW 264
39626: PUSH
39627: LD_INT 5
39629: PUSH
39630: LD_INT 6
39632: PUSH
39633: LD_INT 46
39635: PUSH
39636: LD_INT 44
39638: PUSH
39639: LD_INT 47
39641: PUSH
39642: LD_INT 45
39644: PUSH
39645: LD_INT 28
39647: PUSH
39648: LD_INT 7
39650: PUSH
39651: LD_INT 27
39653: PUSH
39654: LD_INT 29
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: IN
39669: PUSH
39670: LD_VAR 0 1
39674: PPUSH
39675: LD_INT 52
39677: PPUSH
39678: CALL_OW 321
39682: PUSH
39683: LD_INT 2
39685: EQUAL
39686: AND
39687: IFFALSE 39704
// bpoints := bpoints * 1.2 ;
39689: LD_ADDR_VAR 0 10
39693: PUSH
39694: LD_VAR 0 10
39698: PUSH
39699: LD_REAL  1.20000000000000E+0000
39702: MUL
39703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39704: LD_VAR 0 6
39708: PPUSH
39709: CALL_OW 264
39713: PUSH
39714: LD_INT 6
39716: PUSH
39717: LD_INT 46
39719: PUSH
39720: LD_INT 47
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: LIST
39727: IN
39728: IFFALSE 39745
// bpoints := bpoints * 1.2 ;
39730: LD_ADDR_VAR 0 10
39734: PUSH
39735: LD_VAR 0 10
39739: PUSH
39740: LD_REAL  1.20000000000000E+0000
39743: MUL
39744: ST_TO_ADDR
// end ; unit_building :
39745: GO 39759
39747: LD_INT 3
39749: DOUBLE
39750: EQUAL
39751: IFTRUE 39755
39753: GO 39758
39755: POP
// ; end ;
39756: GO 39759
39758: POP
// for j = 1 to 3 do
39759: LD_ADDR_VAR 0 7
39763: PUSH
39764: DOUBLE
39765: LD_INT 1
39767: DEC
39768: ST_TO_ADDR
39769: LD_INT 3
39771: PUSH
39772: FOR_TO
39773: IFFALSE 39826
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39775: LD_ADDR_VAR 0 5
39779: PUSH
39780: LD_VAR 0 5
39784: PPUSH
39785: LD_VAR 0 7
39789: PPUSH
39790: LD_VAR 0 5
39794: PUSH
39795: LD_VAR 0 7
39799: ARRAY
39800: PUSH
39801: LD_VAR 0 9
39805: PUSH
39806: LD_VAR 0 7
39810: ARRAY
39811: PUSH
39812: LD_VAR 0 10
39816: MUL
39817: PLUS
39818: PPUSH
39819: CALL_OW 1
39823: ST_TO_ADDR
39824: GO 39772
39826: POP
39827: POP
// end ;
39828: GO 38311
39830: POP
39831: POP
// result := Replace ( result , 4 , tmp ) ;
39832: LD_ADDR_VAR 0 5
39836: PUSH
39837: LD_VAR 0 5
39841: PPUSH
39842: LD_INT 4
39844: PPUSH
39845: LD_VAR 0 8
39849: PPUSH
39850: CALL_OW 1
39854: ST_TO_ADDR
// end ;
39855: LD_VAR 0 5
39859: RET
// export function DangerAtRange ( unit , range ) ; begin
39860: LD_INT 0
39862: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39863: LD_ADDR_VAR 0 3
39867: PUSH
39868: LD_VAR 0 1
39872: PPUSH
39873: CALL_OW 255
39877: PPUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 250
39887: PPUSH
39888: LD_VAR 0 1
39892: PPUSH
39893: CALL_OW 251
39897: PPUSH
39898: LD_VAR 0 2
39902: PPUSH
39903: CALL 38163 0 4
39907: ST_TO_ADDR
// end ;
39908: LD_VAR 0 3
39912: RET
// export function DangerInArea ( side , area ) ; begin
39913: LD_INT 0
39915: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39916: LD_ADDR_VAR 0 3
39920: PUSH
39921: LD_VAR 0 2
39925: PPUSH
39926: LD_INT 81
39928: PUSH
39929: LD_VAR 0 1
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PPUSH
39938: CALL_OW 70
39942: ST_TO_ADDR
// end ;
39943: LD_VAR 0 3
39947: RET
// export function IsExtension ( b ) ; begin
39948: LD_INT 0
39950: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39951: LD_ADDR_VAR 0 2
39955: PUSH
39956: LD_VAR 0 1
39960: PUSH
39961: LD_INT 23
39963: PUSH
39964: LD_INT 20
39966: PUSH
39967: LD_INT 22
39969: PUSH
39970: LD_INT 17
39972: PUSH
39973: LD_INT 24
39975: PUSH
39976: LD_INT 21
39978: PUSH
39979: LD_INT 19
39981: PUSH
39982: LD_INT 16
39984: PUSH
39985: LD_INT 25
39987: PUSH
39988: LD_INT 18
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: IN
40003: ST_TO_ADDR
// end ;
40004: LD_VAR 0 2
40008: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
40009: LD_INT 0
40011: PPUSH
40012: PPUSH
40013: PPUSH
// result := [ ] ;
40014: LD_ADDR_VAR 0 3
40018: PUSH
40019: EMPTY
40020: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40021: LD_ADDR_VAR 0 4
40025: PUSH
40026: LD_VAR 0 2
40030: PPUSH
40031: LD_INT 21
40033: PUSH
40034: LD_INT 3
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PPUSH
40041: CALL_OW 70
40045: ST_TO_ADDR
// if not tmp then
40046: LD_VAR 0 4
40050: NOT
40051: IFFALSE 40055
// exit ;
40053: GO 40113
// for i in tmp do
40055: LD_ADDR_VAR 0 5
40059: PUSH
40060: LD_VAR 0 4
40064: PUSH
40065: FOR_IN
40066: IFFALSE 40101
// if GetBase ( i ) <> base then
40068: LD_VAR 0 5
40072: PPUSH
40073: CALL_OW 274
40077: PUSH
40078: LD_VAR 0 1
40082: NONEQUAL
40083: IFFALSE 40099
// ComLinkToBase ( base , i ) ;
40085: LD_VAR 0 1
40089: PPUSH
40090: LD_VAR 0 5
40094: PPUSH
40095: CALL_OW 169
40099: GO 40065
40101: POP
40102: POP
// result := tmp ;
40103: LD_ADDR_VAR 0 3
40107: PUSH
40108: LD_VAR 0 4
40112: ST_TO_ADDR
// end ;
40113: LD_VAR 0 3
40117: RET
// export function ComComplete ( unit , b ) ; var i ; begin
40118: LD_INT 0
40120: PPUSH
40121: PPUSH
// if BuildingStatus ( b ) = bs_build then
40122: LD_VAR 0 2
40126: PPUSH
40127: CALL_OW 461
40131: PUSH
40132: LD_INT 1
40134: EQUAL
40135: IFFALSE 40195
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40137: LD_VAR 0 1
40141: PPUSH
40142: LD_STRING h
40144: PUSH
40145: LD_VAR 0 2
40149: PPUSH
40150: CALL_OW 250
40154: PUSH
40155: LD_VAR 0 2
40159: PPUSH
40160: CALL_OW 251
40164: PUSH
40165: LD_VAR 0 2
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: PUSH
40188: EMPTY
40189: LIST
40190: PPUSH
40191: CALL_OW 446
// end ;
40195: LD_VAR 0 3
40199: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40200: LD_INT 0
40202: PPUSH
40203: PPUSH
40204: PPUSH
40205: PPUSH
40206: PPUSH
40207: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
40208: LD_VAR 0 1
40212: NOT
40213: PUSH
40214: LD_VAR 0 1
40218: PPUSH
40219: CALL_OW 263
40223: PUSH
40224: LD_INT 2
40226: EQUAL
40227: NOT
40228: OR
40229: IFFALSE 40233
// exit ;
40231: GO 40549
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40233: LD_ADDR_VAR 0 6
40237: PUSH
40238: LD_INT 22
40240: PUSH
40241: LD_VAR 0 1
40245: PPUSH
40246: CALL_OW 255
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 30
40260: PUSH
40261: LD_INT 36
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 34
40270: PUSH
40271: LD_INT 31
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: LIST
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PPUSH
40287: CALL_OW 69
40291: ST_TO_ADDR
// if not tmp then
40292: LD_VAR 0 6
40296: NOT
40297: IFFALSE 40301
// exit ;
40299: GO 40549
// result := [ ] ;
40301: LD_ADDR_VAR 0 2
40305: PUSH
40306: EMPTY
40307: ST_TO_ADDR
// for i in tmp do
40308: LD_ADDR_VAR 0 3
40312: PUSH
40313: LD_VAR 0 6
40317: PUSH
40318: FOR_IN
40319: IFFALSE 40390
// begin t := UnitsInside ( i ) ;
40321: LD_ADDR_VAR 0 4
40325: PUSH
40326: LD_VAR 0 3
40330: PPUSH
40331: CALL_OW 313
40335: ST_TO_ADDR
// if t then
40336: LD_VAR 0 4
40340: IFFALSE 40388
// for j in t do
40342: LD_ADDR_VAR 0 7
40346: PUSH
40347: LD_VAR 0 4
40351: PUSH
40352: FOR_IN
40353: IFFALSE 40386
// result := Insert ( result , result + 1 , j ) ;
40355: LD_ADDR_VAR 0 2
40359: PUSH
40360: LD_VAR 0 2
40364: PPUSH
40365: LD_VAR 0 2
40369: PUSH
40370: LD_INT 1
40372: PLUS
40373: PPUSH
40374: LD_VAR 0 7
40378: PPUSH
40379: CALL_OW 2
40383: ST_TO_ADDR
40384: GO 40352
40386: POP
40387: POP
// end ;
40388: GO 40318
40390: POP
40391: POP
// if not result then
40392: LD_VAR 0 2
40396: NOT
40397: IFFALSE 40401
// exit ;
40399: GO 40549
// mech := result [ 1 ] ;
40401: LD_ADDR_VAR 0 5
40405: PUSH
40406: LD_VAR 0 2
40410: PUSH
40411: LD_INT 1
40413: ARRAY
40414: ST_TO_ADDR
// if result > 1 then
40415: LD_VAR 0 2
40419: PUSH
40420: LD_INT 1
40422: GREATER
40423: IFFALSE 40535
// for i = 2 to result do
40425: LD_ADDR_VAR 0 3
40429: PUSH
40430: DOUBLE
40431: LD_INT 2
40433: DEC
40434: ST_TO_ADDR
40435: LD_VAR 0 2
40439: PUSH
40440: FOR_TO
40441: IFFALSE 40533
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40443: LD_ADDR_VAR 0 4
40447: PUSH
40448: LD_VAR 0 2
40452: PUSH
40453: LD_VAR 0 3
40457: ARRAY
40458: PPUSH
40459: LD_INT 3
40461: PPUSH
40462: CALL_OW 259
40466: PUSH
40467: LD_VAR 0 2
40471: PUSH
40472: LD_VAR 0 3
40476: ARRAY
40477: PPUSH
40478: CALL_OW 432
40482: MINUS
40483: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40484: LD_VAR 0 4
40488: PUSH
40489: LD_VAR 0 5
40493: PPUSH
40494: LD_INT 3
40496: PPUSH
40497: CALL_OW 259
40501: PUSH
40502: LD_VAR 0 5
40506: PPUSH
40507: CALL_OW 432
40511: MINUS
40512: GREATEREQUAL
40513: IFFALSE 40531
// mech := result [ i ] ;
40515: LD_ADDR_VAR 0 5
40519: PUSH
40520: LD_VAR 0 2
40524: PUSH
40525: LD_VAR 0 3
40529: ARRAY
40530: ST_TO_ADDR
// end ;
40531: GO 40440
40533: POP
40534: POP
// ComLinkTo ( vehicle , mech ) ;
40535: LD_VAR 0 1
40539: PPUSH
40540: LD_VAR 0 5
40544: PPUSH
40545: CALL_OW 135
// end ;
40549: LD_VAR 0 2
40553: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40554: LD_INT 0
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
// result := [ ] ;
40569: LD_ADDR_VAR 0 7
40573: PUSH
40574: EMPTY
40575: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40576: LD_VAR 0 1
40580: PPUSH
40581: CALL_OW 266
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: IN
40596: NOT
40597: IFFALSE 40601
// exit ;
40599: GO 42232
// if name then
40601: LD_VAR 0 3
40605: IFFALSE 40621
// SetBName ( base_dep , name ) ;
40607: LD_VAR 0 1
40611: PPUSH
40612: LD_VAR 0 3
40616: PPUSH
40617: CALL_OW 500
// base := GetBase ( base_dep ) ;
40621: LD_ADDR_VAR 0 15
40625: PUSH
40626: LD_VAR 0 1
40630: PPUSH
40631: CALL_OW 274
40635: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40636: LD_ADDR_VAR 0 16
40640: PUSH
40641: LD_VAR 0 1
40645: PPUSH
40646: CALL_OW 255
40650: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40651: LD_ADDR_VAR 0 17
40655: PUSH
40656: LD_VAR 0 1
40660: PPUSH
40661: CALL_OW 248
40665: ST_TO_ADDR
// if sources then
40666: LD_VAR 0 5
40670: IFFALSE 40717
// for i = 1 to 3 do
40672: LD_ADDR_VAR 0 8
40676: PUSH
40677: DOUBLE
40678: LD_INT 1
40680: DEC
40681: ST_TO_ADDR
40682: LD_INT 3
40684: PUSH
40685: FOR_TO
40686: IFFALSE 40715
// AddResourceType ( base , i , sources [ i ] ) ;
40688: LD_VAR 0 15
40692: PPUSH
40693: LD_VAR 0 8
40697: PPUSH
40698: LD_VAR 0 5
40702: PUSH
40703: LD_VAR 0 8
40707: ARRAY
40708: PPUSH
40709: CALL_OW 276
40713: GO 40685
40715: POP
40716: POP
// buildings := GetBaseBuildings ( base , area ) ;
40717: LD_ADDR_VAR 0 18
40721: PUSH
40722: LD_VAR 0 15
40726: PPUSH
40727: LD_VAR 0 2
40731: PPUSH
40732: CALL 40009 0 2
40736: ST_TO_ADDR
// InitHc ;
40737: CALL_OW 19
// InitUc ;
40741: CALL_OW 18
// uc_side := side ;
40745: LD_ADDR_OWVAR 20
40749: PUSH
40750: LD_VAR 0 16
40754: ST_TO_ADDR
// uc_nation := nation ;
40755: LD_ADDR_OWVAR 21
40759: PUSH
40760: LD_VAR 0 17
40764: ST_TO_ADDR
// if buildings then
40765: LD_VAR 0 18
40769: IFFALSE 42091
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40771: LD_ADDR_VAR 0 19
40775: PUSH
40776: LD_VAR 0 18
40780: PPUSH
40781: LD_INT 2
40783: PUSH
40784: LD_INT 30
40786: PUSH
40787: LD_INT 29
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 30
40796: PUSH
40797: LD_INT 30
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: PPUSH
40809: CALL_OW 72
40813: ST_TO_ADDR
// if tmp then
40814: LD_VAR 0 19
40818: IFFALSE 40866
// for i in tmp do
40820: LD_ADDR_VAR 0 8
40824: PUSH
40825: LD_VAR 0 19
40829: PUSH
40830: FOR_IN
40831: IFFALSE 40864
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40833: LD_VAR 0 8
40837: PPUSH
40838: CALL_OW 250
40842: PPUSH
40843: LD_VAR 0 8
40847: PPUSH
40848: CALL_OW 251
40852: PPUSH
40853: LD_VAR 0 16
40857: PPUSH
40858: CALL_OW 441
40862: GO 40830
40864: POP
40865: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40866: LD_VAR 0 18
40870: PPUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 30
40876: PUSH
40877: LD_INT 32
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 30
40886: PUSH
40887: LD_INT 33
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: PPUSH
40899: CALL_OW 72
40903: IFFALSE 40991
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40905: LD_ADDR_VAR 0 8
40909: PUSH
40910: LD_VAR 0 18
40914: PPUSH
40915: LD_INT 2
40917: PUSH
40918: LD_INT 30
40920: PUSH
40921: LD_INT 32
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 30
40930: PUSH
40931: LD_INT 33
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: LIST
40942: PPUSH
40943: CALL_OW 72
40947: PUSH
40948: FOR_IN
40949: IFFALSE 40989
// begin if not GetBWeapon ( i ) then
40951: LD_VAR 0 8
40955: PPUSH
40956: CALL_OW 269
40960: NOT
40961: IFFALSE 40987
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40963: LD_VAR 0 8
40967: PPUSH
40968: LD_VAR 0 8
40972: PPUSH
40973: LD_VAR 0 2
40977: PPUSH
40978: CALL 42237 0 2
40982: PPUSH
40983: CALL_OW 431
// end ;
40987: GO 40948
40989: POP
40990: POP
// end ; for i = 1 to personel do
40991: LD_ADDR_VAR 0 8
40995: PUSH
40996: DOUBLE
40997: LD_INT 1
40999: DEC
41000: ST_TO_ADDR
41001: LD_VAR 0 6
41005: PUSH
41006: FOR_TO
41007: IFFALSE 42071
// begin if i > 4 then
41009: LD_VAR 0 8
41013: PUSH
41014: LD_INT 4
41016: GREATER
41017: IFFALSE 41021
// break ;
41019: GO 42071
// case i of 1 :
41021: LD_VAR 0 8
41025: PUSH
41026: LD_INT 1
41028: DOUBLE
41029: EQUAL
41030: IFTRUE 41034
41032: GO 41114
41034: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41035: LD_ADDR_VAR 0 12
41039: PUSH
41040: LD_VAR 0 18
41044: PPUSH
41045: LD_INT 22
41047: PUSH
41048: LD_VAR 0 16
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 58
41059: PUSH
41060: EMPTY
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: LD_INT 30
41068: PUSH
41069: LD_INT 32
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 30
41078: PUSH
41079: LD_INT 4
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 30
41088: PUSH
41089: LD_INT 5
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: PPUSH
41107: CALL_OW 72
41111: ST_TO_ADDR
41112: GO 41336
41114: LD_INT 2
41116: DOUBLE
41117: EQUAL
41118: IFTRUE 41122
41120: GO 41184
41122: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41123: LD_ADDR_VAR 0 12
41127: PUSH
41128: LD_VAR 0 18
41132: PPUSH
41133: LD_INT 22
41135: PUSH
41136: LD_VAR 0 16
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: LD_INT 30
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 30
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: LIST
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PPUSH
41177: CALL_OW 72
41181: ST_TO_ADDR
41182: GO 41336
41184: LD_INT 3
41186: DOUBLE
41187: EQUAL
41188: IFTRUE 41192
41190: GO 41254
41192: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41193: LD_ADDR_VAR 0 12
41197: PUSH
41198: LD_VAR 0 18
41202: PPUSH
41203: LD_INT 22
41205: PUSH
41206: LD_VAR 0 16
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: LD_INT 30
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 30
41230: PUSH
41231: LD_INT 3
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: LIST
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PPUSH
41247: CALL_OW 72
41251: ST_TO_ADDR
41252: GO 41336
41254: LD_INT 4
41256: DOUBLE
41257: EQUAL
41258: IFTRUE 41262
41260: GO 41335
41262: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41263: LD_ADDR_VAR 0 12
41267: PUSH
41268: LD_VAR 0 18
41272: PPUSH
41273: LD_INT 22
41275: PUSH
41276: LD_VAR 0 16
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: LD_INT 30
41290: PUSH
41291: LD_INT 6
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 30
41300: PUSH
41301: LD_INT 7
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 30
41310: PUSH
41311: LD_INT 8
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PPUSH
41328: CALL_OW 72
41332: ST_TO_ADDR
41333: GO 41336
41335: POP
// if i = 1 then
41336: LD_VAR 0 8
41340: PUSH
41341: LD_INT 1
41343: EQUAL
41344: IFFALSE 41455
// begin tmp := [ ] ;
41346: LD_ADDR_VAR 0 19
41350: PUSH
41351: EMPTY
41352: ST_TO_ADDR
// for j in f do
41353: LD_ADDR_VAR 0 9
41357: PUSH
41358: LD_VAR 0 12
41362: PUSH
41363: FOR_IN
41364: IFFALSE 41437
// if GetBType ( j ) = b_bunker then
41366: LD_VAR 0 9
41370: PPUSH
41371: CALL_OW 266
41375: PUSH
41376: LD_INT 32
41378: EQUAL
41379: IFFALSE 41406
// tmp := Insert ( tmp , 1 , j ) else
41381: LD_ADDR_VAR 0 19
41385: PUSH
41386: LD_VAR 0 19
41390: PPUSH
41391: LD_INT 1
41393: PPUSH
41394: LD_VAR 0 9
41398: PPUSH
41399: CALL_OW 2
41403: ST_TO_ADDR
41404: GO 41435
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41406: LD_ADDR_VAR 0 19
41410: PUSH
41411: LD_VAR 0 19
41415: PPUSH
41416: LD_VAR 0 19
41420: PUSH
41421: LD_INT 1
41423: PLUS
41424: PPUSH
41425: LD_VAR 0 9
41429: PPUSH
41430: CALL_OW 2
41434: ST_TO_ADDR
41435: GO 41363
41437: POP
41438: POP
// if tmp then
41439: LD_VAR 0 19
41443: IFFALSE 41455
// f := tmp ;
41445: LD_ADDR_VAR 0 12
41449: PUSH
41450: LD_VAR 0 19
41454: ST_TO_ADDR
// end ; x := personel [ i ] ;
41455: LD_ADDR_VAR 0 13
41459: PUSH
41460: LD_VAR 0 6
41464: PUSH
41465: LD_VAR 0 8
41469: ARRAY
41470: ST_TO_ADDR
// if x = - 1 then
41471: LD_VAR 0 13
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: EQUAL
41480: IFFALSE 41689
// begin for j in f do
41482: LD_ADDR_VAR 0 9
41486: PUSH
41487: LD_VAR 0 12
41491: PUSH
41492: FOR_IN
41493: IFFALSE 41685
// repeat InitHc ;
41495: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41499: LD_VAR 0 9
41503: PPUSH
41504: CALL_OW 266
41508: PUSH
41509: LD_INT 5
41511: EQUAL
41512: IFFALSE 41582
// begin if UnitsInside ( j ) < 3 then
41514: LD_VAR 0 9
41518: PPUSH
41519: CALL_OW 313
41523: PUSH
41524: LD_INT 3
41526: LESS
41527: IFFALSE 41563
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41529: LD_INT 0
41531: PPUSH
41532: LD_INT 5
41534: PUSH
41535: LD_INT 8
41537: PUSH
41538: LD_INT 9
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: PUSH
41546: LD_VAR 0 17
41550: ARRAY
41551: PPUSH
41552: LD_VAR 0 4
41556: PPUSH
41557: CALL_OW 380
41561: GO 41580
// PrepareHuman ( false , i , skill ) ;
41563: LD_INT 0
41565: PPUSH
41566: LD_VAR 0 8
41570: PPUSH
41571: LD_VAR 0 4
41575: PPUSH
41576: CALL_OW 380
// end else
41580: GO 41599
// PrepareHuman ( false , i , skill ) ;
41582: LD_INT 0
41584: PPUSH
41585: LD_VAR 0 8
41589: PPUSH
41590: LD_VAR 0 4
41594: PPUSH
41595: CALL_OW 380
// un := CreateHuman ;
41599: LD_ADDR_VAR 0 14
41603: PUSH
41604: CALL_OW 44
41608: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41609: LD_ADDR_VAR 0 7
41613: PUSH
41614: LD_VAR 0 7
41618: PPUSH
41619: LD_INT 1
41621: PPUSH
41622: LD_VAR 0 14
41626: PPUSH
41627: CALL_OW 2
41631: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41632: LD_VAR 0 14
41636: PPUSH
41637: LD_VAR 0 9
41641: PPUSH
41642: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41646: LD_VAR 0 9
41650: PPUSH
41651: CALL_OW 313
41655: PUSH
41656: LD_INT 6
41658: EQUAL
41659: PUSH
41660: LD_VAR 0 9
41664: PPUSH
41665: CALL_OW 266
41669: PUSH
41670: LD_INT 32
41672: PUSH
41673: LD_INT 31
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: IN
41680: OR
41681: IFFALSE 41495
41683: GO 41492
41685: POP
41686: POP
// end else
41687: GO 42069
// for j = 1 to x do
41689: LD_ADDR_VAR 0 9
41693: PUSH
41694: DOUBLE
41695: LD_INT 1
41697: DEC
41698: ST_TO_ADDR
41699: LD_VAR 0 13
41703: PUSH
41704: FOR_TO
41705: IFFALSE 42067
// begin InitHc ;
41707: CALL_OW 19
// if not f then
41711: LD_VAR 0 12
41715: NOT
41716: IFFALSE 41805
// begin PrepareHuman ( false , i , skill ) ;
41718: LD_INT 0
41720: PPUSH
41721: LD_VAR 0 8
41725: PPUSH
41726: LD_VAR 0 4
41730: PPUSH
41731: CALL_OW 380
// un := CreateHuman ;
41735: LD_ADDR_VAR 0 14
41739: PUSH
41740: CALL_OW 44
41744: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41745: LD_ADDR_VAR 0 7
41749: PUSH
41750: LD_VAR 0 7
41754: PPUSH
41755: LD_INT 1
41757: PPUSH
41758: LD_VAR 0 14
41762: PPUSH
41763: CALL_OW 2
41767: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41768: LD_VAR 0 14
41772: PPUSH
41773: LD_VAR 0 1
41777: PPUSH
41778: CALL_OW 250
41782: PPUSH
41783: LD_VAR 0 1
41787: PPUSH
41788: CALL_OW 251
41792: PPUSH
41793: LD_INT 10
41795: PPUSH
41796: LD_INT 0
41798: PPUSH
41799: CALL_OW 50
// continue ;
41803: GO 41704
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41805: LD_VAR 0 12
41809: PUSH
41810: LD_INT 1
41812: ARRAY
41813: PPUSH
41814: CALL_OW 313
41818: PUSH
41819: LD_VAR 0 12
41823: PUSH
41824: LD_INT 1
41826: ARRAY
41827: PPUSH
41828: CALL_OW 266
41832: PUSH
41833: LD_INT 32
41835: PUSH
41836: LD_INT 31
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: IN
41843: AND
41844: PUSH
41845: LD_VAR 0 12
41849: PUSH
41850: LD_INT 1
41852: ARRAY
41853: PPUSH
41854: CALL_OW 313
41858: PUSH
41859: LD_INT 6
41861: EQUAL
41862: OR
41863: IFFALSE 41883
// f := Delete ( f , 1 ) ;
41865: LD_ADDR_VAR 0 12
41869: PUSH
41870: LD_VAR 0 12
41874: PPUSH
41875: LD_INT 1
41877: PPUSH
41878: CALL_OW 3
41882: ST_TO_ADDR
// if not f then
41883: LD_VAR 0 12
41887: NOT
41888: IFFALSE 41906
// begin x := x + 2 ;
41890: LD_ADDR_VAR 0 13
41894: PUSH
41895: LD_VAR 0 13
41899: PUSH
41900: LD_INT 2
41902: PLUS
41903: ST_TO_ADDR
// continue ;
41904: GO 41704
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41906: LD_VAR 0 12
41910: PUSH
41911: LD_INT 1
41913: ARRAY
41914: PPUSH
41915: CALL_OW 266
41919: PUSH
41920: LD_INT 5
41922: EQUAL
41923: IFFALSE 41997
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41925: LD_VAR 0 12
41929: PUSH
41930: LD_INT 1
41932: ARRAY
41933: PPUSH
41934: CALL_OW 313
41938: PUSH
41939: LD_INT 3
41941: LESS
41942: IFFALSE 41978
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41944: LD_INT 0
41946: PPUSH
41947: LD_INT 5
41949: PUSH
41950: LD_INT 8
41952: PUSH
41953: LD_INT 9
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: LIST
41960: PUSH
41961: LD_VAR 0 17
41965: ARRAY
41966: PPUSH
41967: LD_VAR 0 4
41971: PPUSH
41972: CALL_OW 380
41976: GO 41995
// PrepareHuman ( false , i , skill ) ;
41978: LD_INT 0
41980: PPUSH
41981: LD_VAR 0 8
41985: PPUSH
41986: LD_VAR 0 4
41990: PPUSH
41991: CALL_OW 380
// end else
41995: GO 42014
// PrepareHuman ( false , i , skill ) ;
41997: LD_INT 0
41999: PPUSH
42000: LD_VAR 0 8
42004: PPUSH
42005: LD_VAR 0 4
42009: PPUSH
42010: CALL_OW 380
// un := CreateHuman ;
42014: LD_ADDR_VAR 0 14
42018: PUSH
42019: CALL_OW 44
42023: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42024: LD_ADDR_VAR 0 7
42028: PUSH
42029: LD_VAR 0 7
42033: PPUSH
42034: LD_INT 1
42036: PPUSH
42037: LD_VAR 0 14
42041: PPUSH
42042: CALL_OW 2
42046: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42047: LD_VAR 0 14
42051: PPUSH
42052: LD_VAR 0 12
42056: PUSH
42057: LD_INT 1
42059: ARRAY
42060: PPUSH
42061: CALL_OW 52
// end ;
42065: GO 41704
42067: POP
42068: POP
// end ;
42069: GO 41006
42071: POP
42072: POP
// result := result ^ buildings ;
42073: LD_ADDR_VAR 0 7
42077: PUSH
42078: LD_VAR 0 7
42082: PUSH
42083: LD_VAR 0 18
42087: ADD
42088: ST_TO_ADDR
// end else
42089: GO 42232
// begin for i = 1 to personel do
42091: LD_ADDR_VAR 0 8
42095: PUSH
42096: DOUBLE
42097: LD_INT 1
42099: DEC
42100: ST_TO_ADDR
42101: LD_VAR 0 6
42105: PUSH
42106: FOR_TO
42107: IFFALSE 42230
// begin if i > 4 then
42109: LD_VAR 0 8
42113: PUSH
42114: LD_INT 4
42116: GREATER
42117: IFFALSE 42121
// break ;
42119: GO 42230
// x := personel [ i ] ;
42121: LD_ADDR_VAR 0 13
42125: PUSH
42126: LD_VAR 0 6
42130: PUSH
42131: LD_VAR 0 8
42135: ARRAY
42136: ST_TO_ADDR
// if x = - 1 then
42137: LD_VAR 0 13
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: EQUAL
42146: IFFALSE 42150
// continue ;
42148: GO 42106
// PrepareHuman ( false , i , skill ) ;
42150: LD_INT 0
42152: PPUSH
42153: LD_VAR 0 8
42157: PPUSH
42158: LD_VAR 0 4
42162: PPUSH
42163: CALL_OW 380
// un := CreateHuman ;
42167: LD_ADDR_VAR 0 14
42171: PUSH
42172: CALL_OW 44
42176: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42177: LD_VAR 0 14
42181: PPUSH
42182: LD_VAR 0 1
42186: PPUSH
42187: CALL_OW 250
42191: PPUSH
42192: LD_VAR 0 1
42196: PPUSH
42197: CALL_OW 251
42201: PPUSH
42202: LD_INT 10
42204: PPUSH
42205: LD_INT 0
42207: PPUSH
42208: CALL_OW 50
// result := result ^ un ;
42212: LD_ADDR_VAR 0 7
42216: PUSH
42217: LD_VAR 0 7
42221: PUSH
42222: LD_VAR 0 14
42226: ADD
42227: ST_TO_ADDR
// end ;
42228: GO 42106
42230: POP
42231: POP
// end ; end ;
42232: LD_VAR 0 7
42236: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42237: LD_INT 0
42239: PPUSH
42240: PPUSH
42241: PPUSH
42242: PPUSH
42243: PPUSH
42244: PPUSH
42245: PPUSH
42246: PPUSH
42247: PPUSH
42248: PPUSH
42249: PPUSH
42250: PPUSH
42251: PPUSH
42252: PPUSH
42253: PPUSH
42254: PPUSH
// result := false ;
42255: LD_ADDR_VAR 0 3
42259: PUSH
42260: LD_INT 0
42262: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42263: LD_VAR 0 1
42267: NOT
42268: PUSH
42269: LD_VAR 0 1
42273: PPUSH
42274: CALL_OW 266
42278: PUSH
42279: LD_INT 32
42281: PUSH
42282: LD_INT 33
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: IN
42289: NOT
42290: OR
42291: IFFALSE 42295
// exit ;
42293: GO 43431
// nat := GetNation ( tower ) ;
42295: LD_ADDR_VAR 0 12
42299: PUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 248
42309: ST_TO_ADDR
// side := GetSide ( tower ) ;
42310: LD_ADDR_VAR 0 16
42314: PUSH
42315: LD_VAR 0 1
42319: PPUSH
42320: CALL_OW 255
42324: ST_TO_ADDR
// x := GetX ( tower ) ;
42325: LD_ADDR_VAR 0 10
42329: PUSH
42330: LD_VAR 0 1
42334: PPUSH
42335: CALL_OW 250
42339: ST_TO_ADDR
// y := GetY ( tower ) ;
42340: LD_ADDR_VAR 0 11
42344: PUSH
42345: LD_VAR 0 1
42349: PPUSH
42350: CALL_OW 251
42354: ST_TO_ADDR
// if not x or not y then
42355: LD_VAR 0 10
42359: NOT
42360: PUSH
42361: LD_VAR 0 11
42365: NOT
42366: OR
42367: IFFALSE 42371
// exit ;
42369: GO 43431
// weapon := 0 ;
42371: LD_ADDR_VAR 0 18
42375: PUSH
42376: LD_INT 0
42378: ST_TO_ADDR
// fac_list := [ ] ;
42379: LD_ADDR_VAR 0 17
42383: PUSH
42384: EMPTY
42385: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
42386: LD_ADDR_VAR 0 6
42390: PUSH
42391: LD_VAR 0 1
42395: PPUSH
42396: CALL_OW 274
42400: PPUSH
42401: LD_VAR 0 2
42405: PPUSH
42406: CALL 40009 0 2
42410: PPUSH
42411: LD_INT 30
42413: PUSH
42414: LD_INT 3
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PPUSH
42421: CALL_OW 72
42425: ST_TO_ADDR
// if not factories then
42426: LD_VAR 0 6
42430: NOT
42431: IFFALSE 42435
// exit ;
42433: GO 43431
// for i in factories do
42435: LD_ADDR_VAR 0 8
42439: PUSH
42440: LD_VAR 0 6
42444: PUSH
42445: FOR_IN
42446: IFFALSE 42471
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42448: LD_ADDR_VAR 0 17
42452: PUSH
42453: LD_VAR 0 17
42457: PUSH
42458: LD_VAR 0 8
42462: PPUSH
42463: CALL_OW 478
42467: UNION
42468: ST_TO_ADDR
42469: GO 42445
42471: POP
42472: POP
// if not fac_list then
42473: LD_VAR 0 17
42477: NOT
42478: IFFALSE 42482
// exit ;
42480: GO 43431
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42482: LD_ADDR_VAR 0 5
42486: PUSH
42487: LD_INT 4
42489: PUSH
42490: LD_INT 5
42492: PUSH
42493: LD_INT 9
42495: PUSH
42496: LD_INT 10
42498: PUSH
42499: LD_INT 6
42501: PUSH
42502: LD_INT 7
42504: PUSH
42505: LD_INT 11
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 27
42519: PUSH
42520: LD_INT 28
42522: PUSH
42523: LD_INT 26
42525: PUSH
42526: LD_INT 30
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 43
42537: PUSH
42538: LD_INT 44
42540: PUSH
42541: LD_INT 46
42543: PUSH
42544: LD_INT 45
42546: PUSH
42547: LD_INT 47
42549: PUSH
42550: LD_INT 49
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: LIST
42565: PUSH
42566: LD_VAR 0 12
42570: ARRAY
42571: ST_TO_ADDR
// for i in list do
42572: LD_ADDR_VAR 0 8
42576: PUSH
42577: LD_VAR 0 5
42581: PUSH
42582: FOR_IN
42583: IFFALSE 42616
// if not i in fac_list then
42585: LD_VAR 0 8
42589: PUSH
42590: LD_VAR 0 17
42594: IN
42595: NOT
42596: IFFALSE 42614
// list := list diff i ;
42598: LD_ADDR_VAR 0 5
42602: PUSH
42603: LD_VAR 0 5
42607: PUSH
42608: LD_VAR 0 8
42612: DIFF
42613: ST_TO_ADDR
42614: GO 42582
42616: POP
42617: POP
// if not list then
42618: LD_VAR 0 5
42622: NOT
42623: IFFALSE 42627
// exit ;
42625: GO 43431
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42627: LD_VAR 0 12
42631: PUSH
42632: LD_INT 3
42634: EQUAL
42635: PUSH
42636: LD_INT 49
42638: PUSH
42639: LD_VAR 0 5
42643: IN
42644: AND
42645: PUSH
42646: LD_INT 31
42648: PPUSH
42649: LD_VAR 0 16
42653: PPUSH
42654: CALL_OW 321
42658: PUSH
42659: LD_INT 2
42661: EQUAL
42662: AND
42663: IFFALSE 42723
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42665: LD_INT 22
42667: PUSH
42668: LD_VAR 0 16
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 35
42679: PUSH
42680: LD_INT 49
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 91
42689: PUSH
42690: LD_VAR 0 1
42694: PUSH
42695: LD_INT 10
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: LIST
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: LIST
42707: PPUSH
42708: CALL_OW 69
42712: NOT
42713: IFFALSE 42723
// weapon := ru_time_lapser ;
42715: LD_ADDR_VAR 0 18
42719: PUSH
42720: LD_INT 49
42722: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42723: LD_VAR 0 12
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: IN
42738: PUSH
42739: LD_INT 11
42741: PUSH
42742: LD_VAR 0 5
42746: IN
42747: PUSH
42748: LD_INT 30
42750: PUSH
42751: LD_VAR 0 5
42755: IN
42756: OR
42757: AND
42758: PUSH
42759: LD_INT 6
42761: PPUSH
42762: LD_VAR 0 16
42766: PPUSH
42767: CALL_OW 321
42771: PUSH
42772: LD_INT 2
42774: EQUAL
42775: AND
42776: IFFALSE 42941
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42778: LD_INT 22
42780: PUSH
42781: LD_VAR 0 16
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: LD_INT 35
42795: PUSH
42796: LD_INT 11
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 35
42805: PUSH
42806: LD_INT 30
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 91
42820: PUSH
42821: LD_VAR 0 1
42825: PUSH
42826: LD_INT 18
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: LIST
42838: PPUSH
42839: CALL_OW 69
42843: NOT
42844: PUSH
42845: LD_INT 22
42847: PUSH
42848: LD_VAR 0 16
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 30
42862: PUSH
42863: LD_INT 32
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 30
42872: PUSH
42873: LD_INT 33
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 91
42887: PUSH
42888: LD_VAR 0 1
42892: PUSH
42893: LD_INT 12
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: PUSH
42906: EMPTY
42907: LIST
42908: PPUSH
42909: CALL_OW 69
42913: PUSH
42914: LD_INT 2
42916: GREATER
42917: AND
42918: IFFALSE 42941
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42920: LD_ADDR_VAR 0 18
42924: PUSH
42925: LD_INT 11
42927: PUSH
42928: LD_INT 30
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_VAR 0 12
42939: ARRAY
42940: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42941: LD_VAR 0 18
42945: NOT
42946: PUSH
42947: LD_INT 40
42949: PPUSH
42950: LD_VAR 0 16
42954: PPUSH
42955: CALL_OW 321
42959: PUSH
42960: LD_INT 2
42962: EQUAL
42963: AND
42964: PUSH
42965: LD_INT 7
42967: PUSH
42968: LD_VAR 0 5
42972: IN
42973: PUSH
42974: LD_INT 28
42976: PUSH
42977: LD_VAR 0 5
42981: IN
42982: OR
42983: PUSH
42984: LD_INT 45
42986: PUSH
42987: LD_VAR 0 5
42991: IN
42992: OR
42993: AND
42994: IFFALSE 43248
// begin hex := GetHexInfo ( x , y ) ;
42996: LD_ADDR_VAR 0 4
43000: PUSH
43001: LD_VAR 0 10
43005: PPUSH
43006: LD_VAR 0 11
43010: PPUSH
43011: CALL_OW 546
43015: ST_TO_ADDR
// if hex [ 1 ] then
43016: LD_VAR 0 4
43020: PUSH
43021: LD_INT 1
43023: ARRAY
43024: IFFALSE 43028
// exit ;
43026: GO 43431
// height := hex [ 2 ] ;
43028: LD_ADDR_VAR 0 15
43032: PUSH
43033: LD_VAR 0 4
43037: PUSH
43038: LD_INT 2
43040: ARRAY
43041: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43042: LD_ADDR_VAR 0 14
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 2
43052: PUSH
43053: LD_INT 3
43055: PUSH
43056: LD_INT 5
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: ST_TO_ADDR
// for i in tmp do
43065: LD_ADDR_VAR 0 8
43069: PUSH
43070: LD_VAR 0 14
43074: PUSH
43075: FOR_IN
43076: IFFALSE 43246
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43078: LD_ADDR_VAR 0 9
43082: PUSH
43083: LD_VAR 0 10
43087: PPUSH
43088: LD_VAR 0 8
43092: PPUSH
43093: LD_INT 5
43095: PPUSH
43096: CALL_OW 272
43100: PUSH
43101: LD_VAR 0 11
43105: PPUSH
43106: LD_VAR 0 8
43110: PPUSH
43111: LD_INT 5
43113: PPUSH
43114: CALL_OW 273
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43123: LD_VAR 0 9
43127: PUSH
43128: LD_INT 1
43130: ARRAY
43131: PPUSH
43132: LD_VAR 0 9
43136: PUSH
43137: LD_INT 2
43139: ARRAY
43140: PPUSH
43141: CALL_OW 488
43145: IFFALSE 43244
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43147: LD_ADDR_VAR 0 4
43151: PUSH
43152: LD_VAR 0 9
43156: PUSH
43157: LD_INT 1
43159: ARRAY
43160: PPUSH
43161: LD_VAR 0 9
43165: PUSH
43166: LD_INT 2
43168: ARRAY
43169: PPUSH
43170: CALL_OW 546
43174: ST_TO_ADDR
// if hex [ 1 ] then
43175: LD_VAR 0 4
43179: PUSH
43180: LD_INT 1
43182: ARRAY
43183: IFFALSE 43187
// continue ;
43185: GO 43075
// h := hex [ 2 ] ;
43187: LD_ADDR_VAR 0 13
43191: PUSH
43192: LD_VAR 0 4
43196: PUSH
43197: LD_INT 2
43199: ARRAY
43200: ST_TO_ADDR
// if h + 7 < height then
43201: LD_VAR 0 13
43205: PUSH
43206: LD_INT 7
43208: PLUS
43209: PUSH
43210: LD_VAR 0 15
43214: LESS
43215: IFFALSE 43244
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43217: LD_ADDR_VAR 0 18
43221: PUSH
43222: LD_INT 7
43224: PUSH
43225: LD_INT 28
43227: PUSH
43228: LD_INT 45
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: LIST
43235: PUSH
43236: LD_VAR 0 12
43240: ARRAY
43241: ST_TO_ADDR
// break ;
43242: GO 43246
// end ; end ; end ;
43244: GO 43075
43246: POP
43247: POP
// end ; if not weapon then
43248: LD_VAR 0 18
43252: NOT
43253: IFFALSE 43313
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43255: LD_ADDR_VAR 0 5
43259: PUSH
43260: LD_VAR 0 5
43264: PUSH
43265: LD_INT 11
43267: PUSH
43268: LD_INT 30
43270: PUSH
43271: LD_INT 49
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: LIST
43278: DIFF
43279: ST_TO_ADDR
// if not list then
43280: LD_VAR 0 5
43284: NOT
43285: IFFALSE 43289
// exit ;
43287: GO 43431
// weapon := list [ rand ( 1 , list ) ] ;
43289: LD_ADDR_VAR 0 18
43293: PUSH
43294: LD_VAR 0 5
43298: PUSH
43299: LD_INT 1
43301: PPUSH
43302: LD_VAR 0 5
43306: PPUSH
43307: CALL_OW 12
43311: ARRAY
43312: ST_TO_ADDR
// end ; if weapon then
43313: LD_VAR 0 18
43317: IFFALSE 43431
// begin tmp := CostOfWeapon ( weapon ) ;
43319: LD_ADDR_VAR 0 14
43323: PUSH
43324: LD_VAR 0 18
43328: PPUSH
43329: CALL_OW 451
43333: ST_TO_ADDR
// j := GetBase ( tower ) ;
43334: LD_ADDR_VAR 0 9
43338: PUSH
43339: LD_VAR 0 1
43343: PPUSH
43344: CALL_OW 274
43348: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43349: LD_VAR 0 9
43353: PPUSH
43354: LD_INT 1
43356: PPUSH
43357: CALL_OW 275
43361: PUSH
43362: LD_VAR 0 14
43366: PUSH
43367: LD_INT 1
43369: ARRAY
43370: GREATEREQUAL
43371: PUSH
43372: LD_VAR 0 9
43376: PPUSH
43377: LD_INT 2
43379: PPUSH
43380: CALL_OW 275
43384: PUSH
43385: LD_VAR 0 14
43389: PUSH
43390: LD_INT 2
43392: ARRAY
43393: GREATEREQUAL
43394: AND
43395: PUSH
43396: LD_VAR 0 9
43400: PPUSH
43401: LD_INT 3
43403: PPUSH
43404: CALL_OW 275
43408: PUSH
43409: LD_VAR 0 14
43413: PUSH
43414: LD_INT 3
43416: ARRAY
43417: GREATEREQUAL
43418: AND
43419: IFFALSE 43431
// result := weapon ;
43421: LD_ADDR_VAR 0 3
43425: PUSH
43426: LD_VAR 0 18
43430: ST_TO_ADDR
// end ; end ;
43431: LD_VAR 0 3
43435: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43436: LD_INT 0
43438: PPUSH
43439: PPUSH
// result := true ;
43440: LD_ADDR_VAR 0 3
43444: PUSH
43445: LD_INT 1
43447: ST_TO_ADDR
// if array1 = array2 then
43448: LD_VAR 0 1
43452: PUSH
43453: LD_VAR 0 2
43457: EQUAL
43458: IFFALSE 43518
// begin for i = 1 to array1 do
43460: LD_ADDR_VAR 0 4
43464: PUSH
43465: DOUBLE
43466: LD_INT 1
43468: DEC
43469: ST_TO_ADDR
43470: LD_VAR 0 1
43474: PUSH
43475: FOR_TO
43476: IFFALSE 43514
// if array1 [ i ] <> array2 [ i ] then
43478: LD_VAR 0 1
43482: PUSH
43483: LD_VAR 0 4
43487: ARRAY
43488: PUSH
43489: LD_VAR 0 2
43493: PUSH
43494: LD_VAR 0 4
43498: ARRAY
43499: NONEQUAL
43500: IFFALSE 43512
// begin result := false ;
43502: LD_ADDR_VAR 0 3
43506: PUSH
43507: LD_INT 0
43509: ST_TO_ADDR
// break ;
43510: GO 43514
// end ;
43512: GO 43475
43514: POP
43515: POP
// end else
43516: GO 43526
// result := false ;
43518: LD_ADDR_VAR 0 3
43522: PUSH
43523: LD_INT 0
43525: ST_TO_ADDR
// end ;
43526: LD_VAR 0 3
43530: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43531: LD_INT 0
43533: PPUSH
43534: PPUSH
43535: PPUSH
// pom := GetBase ( fac ) ;
43536: LD_ADDR_VAR 0 5
43540: PUSH
43541: LD_VAR 0 1
43545: PPUSH
43546: CALL_OW 274
43550: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43551: LD_ADDR_VAR 0 4
43555: PUSH
43556: LD_VAR 0 2
43560: PUSH
43561: LD_INT 1
43563: ARRAY
43564: PPUSH
43565: LD_VAR 0 2
43569: PUSH
43570: LD_INT 2
43572: ARRAY
43573: PPUSH
43574: LD_VAR 0 2
43578: PUSH
43579: LD_INT 3
43581: ARRAY
43582: PPUSH
43583: LD_VAR 0 2
43587: PUSH
43588: LD_INT 4
43590: ARRAY
43591: PPUSH
43592: CALL_OW 449
43596: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43597: LD_ADDR_VAR 0 3
43601: PUSH
43602: LD_VAR 0 5
43606: PPUSH
43607: LD_INT 1
43609: PPUSH
43610: CALL_OW 275
43614: PUSH
43615: LD_VAR 0 4
43619: PUSH
43620: LD_INT 1
43622: ARRAY
43623: GREATEREQUAL
43624: PUSH
43625: LD_VAR 0 5
43629: PPUSH
43630: LD_INT 2
43632: PPUSH
43633: CALL_OW 275
43637: PUSH
43638: LD_VAR 0 4
43642: PUSH
43643: LD_INT 2
43645: ARRAY
43646: GREATEREQUAL
43647: AND
43648: PUSH
43649: LD_VAR 0 5
43653: PPUSH
43654: LD_INT 3
43656: PPUSH
43657: CALL_OW 275
43661: PUSH
43662: LD_VAR 0 4
43666: PUSH
43667: LD_INT 3
43669: ARRAY
43670: GREATEREQUAL
43671: AND
43672: ST_TO_ADDR
// end ;
43673: LD_VAR 0 3
43677: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43678: LD_INT 0
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
// pom := GetBase ( building ) ;
43684: LD_ADDR_VAR 0 3
43688: PUSH
43689: LD_VAR 0 1
43693: PPUSH
43694: CALL_OW 274
43698: ST_TO_ADDR
// if not pom then
43699: LD_VAR 0 3
43703: NOT
43704: IFFALSE 43708
// exit ;
43706: GO 43878
// btype := GetBType ( building ) ;
43708: LD_ADDR_VAR 0 5
43712: PUSH
43713: LD_VAR 0 1
43717: PPUSH
43718: CALL_OW 266
43722: ST_TO_ADDR
// if btype = b_armoury then
43723: LD_VAR 0 5
43727: PUSH
43728: LD_INT 4
43730: EQUAL
43731: IFFALSE 43741
// btype := b_barracks ;
43733: LD_ADDR_VAR 0 5
43737: PUSH
43738: LD_INT 5
43740: ST_TO_ADDR
// if btype = b_depot then
43741: LD_VAR 0 5
43745: PUSH
43746: LD_INT 0
43748: EQUAL
43749: IFFALSE 43759
// btype := b_warehouse ;
43751: LD_ADDR_VAR 0 5
43755: PUSH
43756: LD_INT 1
43758: ST_TO_ADDR
// if btype = b_workshop then
43759: LD_VAR 0 5
43763: PUSH
43764: LD_INT 2
43766: EQUAL
43767: IFFALSE 43777
// btype := b_factory ;
43769: LD_ADDR_VAR 0 5
43773: PUSH
43774: LD_INT 3
43776: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43777: LD_ADDR_VAR 0 4
43781: PUSH
43782: LD_VAR 0 5
43786: PPUSH
43787: LD_VAR 0 1
43791: PPUSH
43792: CALL_OW 248
43796: PPUSH
43797: CALL_OW 450
43801: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43802: LD_ADDR_VAR 0 2
43806: PUSH
43807: LD_VAR 0 3
43811: PPUSH
43812: LD_INT 1
43814: PPUSH
43815: CALL_OW 275
43819: PUSH
43820: LD_VAR 0 4
43824: PUSH
43825: LD_INT 1
43827: ARRAY
43828: GREATEREQUAL
43829: PUSH
43830: LD_VAR 0 3
43834: PPUSH
43835: LD_INT 2
43837: PPUSH
43838: CALL_OW 275
43842: PUSH
43843: LD_VAR 0 4
43847: PUSH
43848: LD_INT 2
43850: ARRAY
43851: GREATEREQUAL
43852: AND
43853: PUSH
43854: LD_VAR 0 3
43858: PPUSH
43859: LD_INT 3
43861: PPUSH
43862: CALL_OW 275
43866: PUSH
43867: LD_VAR 0 4
43871: PUSH
43872: LD_INT 3
43874: ARRAY
43875: GREATEREQUAL
43876: AND
43877: ST_TO_ADDR
// end ;
43878: LD_VAR 0 2
43882: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43883: LD_INT 0
43885: PPUSH
43886: PPUSH
43887: PPUSH
// pom := GetBase ( building ) ;
43888: LD_ADDR_VAR 0 4
43892: PUSH
43893: LD_VAR 0 1
43897: PPUSH
43898: CALL_OW 274
43902: ST_TO_ADDR
// if not pom then
43903: LD_VAR 0 4
43907: NOT
43908: IFFALSE 43912
// exit ;
43910: GO 44013
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43912: LD_ADDR_VAR 0 5
43916: PUSH
43917: LD_VAR 0 2
43921: PPUSH
43922: LD_VAR 0 1
43926: PPUSH
43927: CALL_OW 248
43931: PPUSH
43932: CALL_OW 450
43936: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43937: LD_ADDR_VAR 0 3
43941: PUSH
43942: LD_VAR 0 4
43946: PPUSH
43947: LD_INT 1
43949: PPUSH
43950: CALL_OW 275
43954: PUSH
43955: LD_VAR 0 5
43959: PUSH
43960: LD_INT 1
43962: ARRAY
43963: GREATEREQUAL
43964: PUSH
43965: LD_VAR 0 4
43969: PPUSH
43970: LD_INT 2
43972: PPUSH
43973: CALL_OW 275
43977: PUSH
43978: LD_VAR 0 5
43982: PUSH
43983: LD_INT 2
43985: ARRAY
43986: GREATEREQUAL
43987: AND
43988: PUSH
43989: LD_VAR 0 4
43993: PPUSH
43994: LD_INT 3
43996: PPUSH
43997: CALL_OW 275
44001: PUSH
44002: LD_VAR 0 5
44006: PUSH
44007: LD_INT 3
44009: ARRAY
44010: GREATEREQUAL
44011: AND
44012: ST_TO_ADDR
// end ;
44013: LD_VAR 0 3
44017: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
44018: LD_INT 0
44020: PPUSH
44021: PPUSH
44022: PPUSH
44023: PPUSH
44024: PPUSH
44025: PPUSH
44026: PPUSH
44027: PPUSH
44028: PPUSH
44029: PPUSH
// result := false ;
44030: LD_ADDR_VAR 0 6
44034: PUSH
44035: LD_INT 0
44037: ST_TO_ADDR
// if not base or not btype or not x or not y then
44038: LD_VAR 0 1
44042: NOT
44043: PUSH
44044: LD_VAR 0 2
44048: NOT
44049: OR
44050: PUSH
44051: LD_VAR 0 3
44055: NOT
44056: OR
44057: PUSH
44058: LD_VAR 0 4
44062: NOT
44063: OR
44064: IFFALSE 44068
// exit ;
44066: GO 44677
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
44068: LD_ADDR_VAR 0 12
44072: PUSH
44073: LD_VAR 0 2
44077: PPUSH
44078: LD_VAR 0 3
44082: PPUSH
44083: LD_VAR 0 4
44087: PPUSH
44088: LD_VAR 0 5
44092: PPUSH
44093: LD_VAR 0 1
44097: PUSH
44098: LD_INT 1
44100: ARRAY
44101: PPUSH
44102: CALL_OW 248
44106: PPUSH
44107: LD_INT 0
44109: PPUSH
44110: CALL 45514 0 6
44114: ST_TO_ADDR
// if not hexes then
44115: LD_VAR 0 12
44119: NOT
44120: IFFALSE 44124
// exit ;
44122: GO 44677
// for i = 1 to hexes do
44124: LD_ADDR_VAR 0 7
44128: PUSH
44129: DOUBLE
44130: LD_INT 1
44132: DEC
44133: ST_TO_ADDR
44134: LD_VAR 0 12
44138: PUSH
44139: FOR_TO
44140: IFFALSE 44675
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44142: LD_ADDR_VAR 0 11
44146: PUSH
44147: LD_VAR 0 12
44151: PUSH
44152: LD_VAR 0 7
44156: ARRAY
44157: PUSH
44158: LD_INT 1
44160: ARRAY
44161: PPUSH
44162: LD_VAR 0 12
44166: PUSH
44167: LD_VAR 0 7
44171: ARRAY
44172: PUSH
44173: LD_INT 2
44175: ARRAY
44176: PPUSH
44177: CALL_OW 428
44181: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44182: LD_VAR 0 12
44186: PUSH
44187: LD_VAR 0 7
44191: ARRAY
44192: PUSH
44193: LD_INT 1
44195: ARRAY
44196: PPUSH
44197: LD_VAR 0 12
44201: PUSH
44202: LD_VAR 0 7
44206: ARRAY
44207: PUSH
44208: LD_INT 2
44210: ARRAY
44211: PPUSH
44212: CALL_OW 351
44216: PUSH
44217: LD_VAR 0 12
44221: PUSH
44222: LD_VAR 0 7
44226: ARRAY
44227: PUSH
44228: LD_INT 1
44230: ARRAY
44231: PPUSH
44232: LD_VAR 0 12
44236: PUSH
44237: LD_VAR 0 7
44241: ARRAY
44242: PUSH
44243: LD_INT 2
44245: ARRAY
44246: PPUSH
44247: CALL_OW 488
44251: NOT
44252: OR
44253: PUSH
44254: LD_VAR 0 11
44258: PPUSH
44259: CALL_OW 247
44263: PUSH
44264: LD_INT 3
44266: EQUAL
44267: OR
44268: IFFALSE 44274
// exit ;
44270: POP
44271: POP
44272: GO 44677
// if not tmp or not tmp in base then
44274: LD_VAR 0 11
44278: NOT
44279: PUSH
44280: LD_VAR 0 11
44284: PUSH
44285: LD_VAR 0 1
44289: IN
44290: NOT
44291: OR
44292: IFFALSE 44296
// continue ;
44294: GO 44139
// result := true ;
44296: LD_ADDR_VAR 0 6
44300: PUSH
44301: LD_INT 1
44303: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44304: LD_ADDR_VAR 0 15
44308: PUSH
44309: LD_VAR 0 1
44313: PPUSH
44314: LD_INT 22
44316: PUSH
44317: LD_VAR 0 11
44321: PPUSH
44322: CALL_OW 255
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 30
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 30
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: LIST
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PPUSH
44363: CALL_OW 72
44367: ST_TO_ADDR
// if dep then
44368: LD_VAR 0 15
44372: IFFALSE 44508
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44374: LD_ADDR_VAR 0 14
44378: PUSH
44379: LD_VAR 0 15
44383: PUSH
44384: LD_INT 1
44386: ARRAY
44387: PPUSH
44388: CALL_OW 250
44392: PPUSH
44393: LD_VAR 0 15
44397: PUSH
44398: LD_INT 1
44400: ARRAY
44401: PPUSH
44402: CALL_OW 254
44406: PPUSH
44407: LD_INT 5
44409: PPUSH
44410: CALL_OW 272
44414: PUSH
44415: LD_VAR 0 15
44419: PUSH
44420: LD_INT 1
44422: ARRAY
44423: PPUSH
44424: CALL_OW 251
44428: PPUSH
44429: LD_VAR 0 15
44433: PUSH
44434: LD_INT 1
44436: ARRAY
44437: PPUSH
44438: CALL_OW 254
44442: PPUSH
44443: LD_INT 5
44445: PPUSH
44446: CALL_OW 273
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44455: LD_VAR 0 14
44459: PUSH
44460: LD_INT 1
44462: ARRAY
44463: PPUSH
44464: LD_VAR 0 14
44468: PUSH
44469: LD_INT 2
44471: ARRAY
44472: PPUSH
44473: CALL_OW 488
44477: IFFALSE 44508
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44479: LD_VAR 0 11
44483: PPUSH
44484: LD_VAR 0 14
44488: PUSH
44489: LD_INT 1
44491: ARRAY
44492: PPUSH
44493: LD_VAR 0 14
44497: PUSH
44498: LD_INT 2
44500: ARRAY
44501: PPUSH
44502: CALL_OW 111
// continue ;
44506: GO 44139
// end ; end ; r := GetDir ( tmp ) ;
44508: LD_ADDR_VAR 0 13
44512: PUSH
44513: LD_VAR 0 11
44517: PPUSH
44518: CALL_OW 254
44522: ST_TO_ADDR
// if r = 5 then
44523: LD_VAR 0 13
44527: PUSH
44528: LD_INT 5
44530: EQUAL
44531: IFFALSE 44541
// r := 0 ;
44533: LD_ADDR_VAR 0 13
44537: PUSH
44538: LD_INT 0
44540: ST_TO_ADDR
// for j = r to 5 do
44541: LD_ADDR_VAR 0 8
44545: PUSH
44546: DOUBLE
44547: LD_VAR 0 13
44551: DEC
44552: ST_TO_ADDR
44553: LD_INT 5
44555: PUSH
44556: FOR_TO
44557: IFFALSE 44671
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44559: LD_ADDR_VAR 0 9
44563: PUSH
44564: LD_VAR 0 11
44568: PPUSH
44569: CALL_OW 250
44573: PPUSH
44574: LD_VAR 0 8
44578: PPUSH
44579: LD_INT 2
44581: PPUSH
44582: CALL_OW 272
44586: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44587: LD_ADDR_VAR 0 10
44591: PUSH
44592: LD_VAR 0 11
44596: PPUSH
44597: CALL_OW 251
44601: PPUSH
44602: LD_VAR 0 8
44606: PPUSH
44607: LD_INT 2
44609: PPUSH
44610: CALL_OW 273
44614: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44615: LD_VAR 0 9
44619: PPUSH
44620: LD_VAR 0 10
44624: PPUSH
44625: CALL_OW 488
44629: PUSH
44630: LD_VAR 0 9
44634: PPUSH
44635: LD_VAR 0 10
44639: PPUSH
44640: CALL_OW 428
44644: NOT
44645: AND
44646: IFFALSE 44669
// begin ComMoveXY ( tmp , _x , _y ) ;
44648: LD_VAR 0 11
44652: PPUSH
44653: LD_VAR 0 9
44657: PPUSH
44658: LD_VAR 0 10
44662: PPUSH
44663: CALL_OW 111
// break ;
44667: GO 44671
// end ; end ;
44669: GO 44556
44671: POP
44672: POP
// end ;
44673: GO 44139
44675: POP
44676: POP
// end ;
44677: LD_VAR 0 6
44681: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
44682: LD_INT 0
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
44693: PPUSH
// result := false ;
44694: LD_ADDR_VAR 0 6
44698: PUSH
44699: LD_INT 0
44701: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44702: LD_VAR 0 1
44706: NOT
44707: PUSH
44708: LD_VAR 0 1
44712: PPUSH
44713: CALL_OW 266
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: IN
44728: NOT
44729: OR
44730: PUSH
44731: LD_VAR 0 2
44735: NOT
44736: OR
44737: PUSH
44738: LD_VAR 0 5
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 3
44754: PUSH
44755: LD_INT 4
44757: PUSH
44758: LD_INT 5
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: IN
44769: NOT
44770: OR
44771: PUSH
44772: LD_VAR 0 3
44776: PPUSH
44777: LD_VAR 0 4
44781: PPUSH
44782: CALL_OW 488
44786: NOT
44787: OR
44788: IFFALSE 44792
// exit ;
44790: GO 45509
// pom := GetBase ( depot ) ;
44792: LD_ADDR_VAR 0 10
44796: PUSH
44797: LD_VAR 0 1
44801: PPUSH
44802: CALL_OW 274
44806: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44807: LD_ADDR_VAR 0 11
44811: PUSH
44812: LD_VAR 0 2
44816: PPUSH
44817: LD_VAR 0 1
44821: PPUSH
44822: CALL_OW 248
44826: PPUSH
44827: CALL_OW 450
44831: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44832: LD_VAR 0 10
44836: PPUSH
44837: LD_INT 1
44839: PPUSH
44840: CALL_OW 275
44844: PUSH
44845: LD_VAR 0 11
44849: PUSH
44850: LD_INT 1
44852: ARRAY
44853: GREATEREQUAL
44854: PUSH
44855: LD_VAR 0 10
44859: PPUSH
44860: LD_INT 2
44862: PPUSH
44863: CALL_OW 275
44867: PUSH
44868: LD_VAR 0 11
44872: PUSH
44873: LD_INT 2
44875: ARRAY
44876: GREATEREQUAL
44877: AND
44878: PUSH
44879: LD_VAR 0 10
44883: PPUSH
44884: LD_INT 3
44886: PPUSH
44887: CALL_OW 275
44891: PUSH
44892: LD_VAR 0 11
44896: PUSH
44897: LD_INT 3
44899: ARRAY
44900: GREATEREQUAL
44901: AND
44902: NOT
44903: IFFALSE 44907
// exit ;
44905: GO 45509
// if GetBType ( depot ) = b_depot then
44907: LD_VAR 0 1
44911: PPUSH
44912: CALL_OW 266
44916: PUSH
44917: LD_INT 0
44919: EQUAL
44920: IFFALSE 44932
// dist := 28 else
44922: LD_ADDR_VAR 0 14
44926: PUSH
44927: LD_INT 28
44929: ST_TO_ADDR
44930: GO 44940
// dist := 36 ;
44932: LD_ADDR_VAR 0 14
44936: PUSH
44937: LD_INT 36
44939: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44940: LD_VAR 0 1
44944: PPUSH
44945: LD_VAR 0 3
44949: PPUSH
44950: LD_VAR 0 4
44954: PPUSH
44955: CALL_OW 297
44959: PUSH
44960: LD_VAR 0 14
44964: GREATER
44965: IFFALSE 44969
// exit ;
44967: GO 45509
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44969: LD_ADDR_VAR 0 12
44973: PUSH
44974: LD_VAR 0 2
44978: PPUSH
44979: LD_VAR 0 3
44983: PPUSH
44984: LD_VAR 0 4
44988: PPUSH
44989: LD_VAR 0 5
44993: PPUSH
44994: LD_VAR 0 1
44998: PPUSH
44999: CALL_OW 248
45003: PPUSH
45004: LD_INT 0
45006: PPUSH
45007: CALL 45514 0 6
45011: ST_TO_ADDR
// if not hexes then
45012: LD_VAR 0 12
45016: NOT
45017: IFFALSE 45021
// exit ;
45019: GO 45509
// hex := GetHexInfo ( x , y ) ;
45021: LD_ADDR_VAR 0 15
45025: PUSH
45026: LD_VAR 0 3
45030: PPUSH
45031: LD_VAR 0 4
45035: PPUSH
45036: CALL_OW 546
45040: ST_TO_ADDR
// if hex [ 1 ] then
45041: LD_VAR 0 15
45045: PUSH
45046: LD_INT 1
45048: ARRAY
45049: IFFALSE 45053
// exit ;
45051: GO 45509
// height := hex [ 2 ] ;
45053: LD_ADDR_VAR 0 13
45057: PUSH
45058: LD_VAR 0 15
45062: PUSH
45063: LD_INT 2
45065: ARRAY
45066: ST_TO_ADDR
// for i = 1 to hexes do
45067: LD_ADDR_VAR 0 7
45071: PUSH
45072: DOUBLE
45073: LD_INT 1
45075: DEC
45076: ST_TO_ADDR
45077: LD_VAR 0 12
45081: PUSH
45082: FOR_TO
45083: IFFALSE 45413
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45085: LD_VAR 0 12
45089: PUSH
45090: LD_VAR 0 7
45094: ARRAY
45095: PUSH
45096: LD_INT 1
45098: ARRAY
45099: PPUSH
45100: LD_VAR 0 12
45104: PUSH
45105: LD_VAR 0 7
45109: ARRAY
45110: PUSH
45111: LD_INT 2
45113: ARRAY
45114: PPUSH
45115: CALL_OW 488
45119: NOT
45120: PUSH
45121: LD_VAR 0 12
45125: PUSH
45126: LD_VAR 0 7
45130: ARRAY
45131: PUSH
45132: LD_INT 1
45134: ARRAY
45135: PPUSH
45136: LD_VAR 0 12
45140: PUSH
45141: LD_VAR 0 7
45145: ARRAY
45146: PUSH
45147: LD_INT 2
45149: ARRAY
45150: PPUSH
45151: CALL_OW 428
45155: PUSH
45156: LD_INT 0
45158: GREATER
45159: OR
45160: PUSH
45161: LD_VAR 0 12
45165: PUSH
45166: LD_VAR 0 7
45170: ARRAY
45171: PUSH
45172: LD_INT 1
45174: ARRAY
45175: PPUSH
45176: LD_VAR 0 12
45180: PUSH
45181: LD_VAR 0 7
45185: ARRAY
45186: PUSH
45187: LD_INT 2
45189: ARRAY
45190: PPUSH
45191: CALL_OW 351
45195: OR
45196: IFFALSE 45202
// exit ;
45198: POP
45199: POP
45200: GO 45509
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45202: LD_ADDR_VAR 0 8
45206: PUSH
45207: LD_VAR 0 12
45211: PUSH
45212: LD_VAR 0 7
45216: ARRAY
45217: PUSH
45218: LD_INT 1
45220: ARRAY
45221: PPUSH
45222: LD_VAR 0 12
45226: PUSH
45227: LD_VAR 0 7
45231: ARRAY
45232: PUSH
45233: LD_INT 2
45235: ARRAY
45236: PPUSH
45237: CALL_OW 546
45241: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45242: LD_VAR 0 8
45246: PUSH
45247: LD_INT 1
45249: ARRAY
45250: PUSH
45251: LD_VAR 0 8
45255: PUSH
45256: LD_INT 2
45258: ARRAY
45259: PUSH
45260: LD_VAR 0 13
45264: PUSH
45265: LD_INT 2
45267: PLUS
45268: GREATER
45269: OR
45270: PUSH
45271: LD_VAR 0 8
45275: PUSH
45276: LD_INT 2
45278: ARRAY
45279: PUSH
45280: LD_VAR 0 13
45284: PUSH
45285: LD_INT 2
45287: MINUS
45288: LESS
45289: OR
45290: PUSH
45291: LD_VAR 0 8
45295: PUSH
45296: LD_INT 3
45298: ARRAY
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 8
45305: PUSH
45306: LD_INT 9
45308: PUSH
45309: LD_INT 10
45311: PUSH
45312: LD_INT 11
45314: PUSH
45315: LD_INT 12
45317: PUSH
45318: LD_INT 13
45320: PUSH
45321: LD_INT 16
45323: PUSH
45324: LD_INT 17
45326: PUSH
45327: LD_INT 18
45329: PUSH
45330: LD_INT 19
45332: PUSH
45333: LD_INT 20
45335: PUSH
45336: LD_INT 21
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: IN
45354: NOT
45355: OR
45356: PUSH
45357: LD_VAR 0 8
45361: PUSH
45362: LD_INT 5
45364: ARRAY
45365: NOT
45366: OR
45367: PUSH
45368: LD_VAR 0 8
45372: PUSH
45373: LD_INT 6
45375: ARRAY
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: LD_INT 7
45385: PUSH
45386: LD_INT 9
45388: PUSH
45389: LD_INT 10
45391: PUSH
45392: LD_INT 11
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: IN
45403: NOT
45404: OR
45405: IFFALSE 45411
// exit ;
45407: POP
45408: POP
45409: GO 45509
// end ;
45411: GO 45082
45413: POP
45414: POP
// side := GetSide ( depot ) ;
45415: LD_ADDR_VAR 0 9
45419: PUSH
45420: LD_VAR 0 1
45424: PPUSH
45425: CALL_OW 255
45429: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45430: LD_VAR 0 9
45434: PPUSH
45435: LD_VAR 0 3
45439: PPUSH
45440: LD_VAR 0 4
45444: PPUSH
45445: LD_INT 20
45447: PPUSH
45448: CALL 38163 0 4
45452: PUSH
45453: LD_INT 4
45455: ARRAY
45456: IFFALSE 45460
// exit ;
45458: GO 45509
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45460: LD_VAR 0 2
45464: PUSH
45465: LD_INT 29
45467: PUSH
45468: LD_INT 30
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: IN
45475: PUSH
45476: LD_VAR 0 3
45480: PPUSH
45481: LD_VAR 0 4
45485: PPUSH
45486: LD_VAR 0 9
45490: PPUSH
45491: CALL_OW 440
45495: NOT
45496: AND
45497: IFFALSE 45501
// exit ;
45499: GO 45509
// result := true ;
45501: LD_ADDR_VAR 0 6
45505: PUSH
45506: LD_INT 1
45508: ST_TO_ADDR
// end ;
45509: LD_VAR 0 6
45513: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
45514: LD_INT 0
45516: PPUSH
45517: PPUSH
45518: PPUSH
45519: PPUSH
45520: PPUSH
45521: PPUSH
45522: PPUSH
45523: PPUSH
45524: PPUSH
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
45529: PPUSH
45530: PPUSH
45531: PPUSH
45532: PPUSH
45533: PPUSH
45534: PPUSH
45535: PPUSH
45536: PPUSH
45537: PPUSH
45538: PPUSH
45539: PPUSH
45540: PPUSH
45541: PPUSH
45542: PPUSH
45543: PPUSH
45544: PPUSH
45545: PPUSH
45546: PPUSH
45547: PPUSH
45548: PPUSH
45549: PPUSH
45550: PPUSH
45551: PPUSH
45552: PPUSH
45553: PPUSH
45554: PPUSH
45555: PPUSH
45556: PPUSH
45557: PPUSH
45558: PPUSH
45559: PPUSH
45560: PPUSH
45561: PPUSH
45562: PPUSH
45563: PPUSH
45564: PPUSH
45565: PPUSH
45566: PPUSH
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
45571: PPUSH
45572: PPUSH
45573: PPUSH
// result = [ ] ;
45574: LD_ADDR_VAR 0 7
45578: PUSH
45579: EMPTY
45580: ST_TO_ADDR
// temp_list = [ ] ;
45581: LD_ADDR_VAR 0 9
45585: PUSH
45586: EMPTY
45587: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45588: LD_VAR 0 4
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 3
45604: PUSH
45605: LD_INT 4
45607: PUSH
45608: LD_INT 5
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: IN
45619: NOT
45620: PUSH
45621: LD_VAR 0 1
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: IN
45636: PUSH
45637: LD_VAR 0 5
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: LD_INT 3
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: IN
45656: NOT
45657: AND
45658: OR
45659: IFFALSE 45663
// exit ;
45661: GO 64054
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45663: LD_VAR 0 1
45667: PUSH
45668: LD_INT 6
45670: PUSH
45671: LD_INT 7
45673: PUSH
45674: LD_INT 8
45676: PUSH
45677: LD_INT 13
45679: PUSH
45680: LD_INT 12
45682: PUSH
45683: LD_INT 15
45685: PUSH
45686: LD_INT 11
45688: PUSH
45689: LD_INT 14
45691: PUSH
45692: LD_INT 10
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: IN
45706: IFFALSE 45716
// btype = b_lab ;
45708: LD_ADDR_VAR 0 1
45712: PUSH
45713: LD_INT 6
45715: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45716: LD_VAR 0 6
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: IN
45735: NOT
45736: PUSH
45737: LD_VAR 0 1
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 3
45753: PUSH
45754: LD_INT 6
45756: PUSH
45757: LD_INT 36
45759: PUSH
45760: LD_INT 4
45762: PUSH
45763: LD_INT 5
45765: PUSH
45766: LD_INT 31
45768: PUSH
45769: LD_INT 32
45771: PUSH
45772: LD_INT 33
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: IN
45788: NOT
45789: PUSH
45790: LD_VAR 0 6
45794: PUSH
45795: LD_INT 1
45797: EQUAL
45798: AND
45799: OR
45800: PUSH
45801: LD_VAR 0 1
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 3
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: IN
45816: NOT
45817: PUSH
45818: LD_VAR 0 6
45822: PUSH
45823: LD_INT 2
45825: EQUAL
45826: AND
45827: OR
45828: IFFALSE 45838
// mode = 0 ;
45830: LD_ADDR_VAR 0 6
45834: PUSH
45835: LD_INT 0
45837: ST_TO_ADDR
// case mode of 0 :
45838: LD_VAR 0 6
45842: PUSH
45843: LD_INT 0
45845: DOUBLE
45846: EQUAL
45847: IFTRUE 45851
45849: GO 57304
45851: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45852: LD_ADDR_VAR 0 11
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 3
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46045: LD_ADDR_VAR 0 12
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 3
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 3
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46241: LD_ADDR_VAR 0 13
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 3
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 3
46400: NEG
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 3
46412: NEG
46413: PUSH
46414: LD_INT 3
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46440: LD_ADDR_VAR 0 14
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 3
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 3
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46636: LD_ADDR_VAR 0 15
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 3
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46829: LD_ADDR_VAR 0 16
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 3
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 3
46986: PUSH
46987: LD_INT 3
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: LD_INT 3
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47022: LD_ADDR_VAR 0 17
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47252: LD_ADDR_VAR 0 18
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47482: LD_ADDR_VAR 0 19
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47712: LD_ADDR_VAR 0 20
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: NEG
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47942: LD_ADDR_VAR 0 21
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: LD_INT 2
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48172: LD_ADDR_VAR 0 22
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48402: LD_ADDR_VAR 0 23
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 2
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: LD_INT 3
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 3
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48682: LD_ADDR_VAR 0 24
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 3
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48958: LD_ADDR_VAR 0 25
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 3
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 3
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: LD_INT 3
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 3
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49232: LD_ADDR_VAR 0 26
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: LD_INT 3
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 3
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49508: LD_ADDR_VAR 0 27
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 3
49753: NEG
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49788: LD_ADDR_VAR 0 28
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: NEG
50000: PUSH
50001: LD_INT 3
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 3
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50070: LD_ADDR_VAR 0 29
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 2
50260: NEG
50261: PUSH
50262: LD_INT 3
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 3
50314: NEG
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50349: LD_ADDR_VAR 0 30
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: LD_INT 3
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 3
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: LD_INT 3
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 3
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50627: LD_ADDR_VAR 0 31
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: LD_INT 2
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 3
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 3
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 3
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 3
50870: NEG
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50905: LD_ADDR_VAR 0 32
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 2
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 3
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: LD_INT 3
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: NEG
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51183: LD_ADDR_VAR 0 33
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 3
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 3
51427: NEG
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51462: LD_ADDR_VAR 0 34
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 1
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 3
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: NEG
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51742: LD_ADDR_VAR 0 35
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51854: LD_ADDR_VAR 0 36
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51966: LD_ADDR_VAR 0 37
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52078: LD_ADDR_VAR 0 38
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52190: LD_ADDR_VAR 0 39
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 2
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52302: LD_ADDR_VAR 0 40
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52414: LD_ADDR_VAR 0 41
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 3
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 3
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: LD_INT 3
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 3
52688: NEG
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 3
52699: NEG
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 3
52711: NEG
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 3
52723: NEG
52724: PUSH
52725: LD_INT 3
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52764: LD_ADDR_VAR 0 42
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: LD_INT 3
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: LD_INT 3
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 3
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 3
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 3
53010: PUSH
53011: LD_INT 3
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 3
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 3
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 3
53073: NEG
53074: PUSH
53075: LD_INT 3
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53114: LD_ADDR_VAR 0 43
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 3
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 3
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: LD_INT 2
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 3
53410: NEG
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 3
53421: NEG
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53462: LD_ADDR_VAR 0 44
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: LD_INT 2
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 3
53685: PUSH
53686: LD_INT 1
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 3
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 3
53705: PUSH
53706: LD_INT 3
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: LD_INT 3
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: NEG
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53812: LD_ADDR_VAR 0 45
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: NEG
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: LD_INT 3
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: LD_INT 3
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 3
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 3
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 3
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 3
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 3
54109: NEG
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 3
54121: NEG
54122: PUSH
54123: LD_INT 3
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54162: LD_ADDR_VAR 0 46
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 3
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: LD_INT 3
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 3
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 3
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 3
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 3
54458: NEG
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 3
54469: NEG
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54510: LD_ADDR_VAR 0 47
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54661: LD_ADDR_VAR 0 48
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54808: LD_ADDR_VAR 0 49
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: LD_INT 2
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54952: LD_ADDR_VAR 0 50
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 2
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55096: LD_ADDR_VAR 0 51
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55243: LD_ADDR_VAR 0 52
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55394: LD_ADDR_VAR 0 53
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 2
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55624: LD_ADDR_VAR 0 54
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 2
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55854: LD_ADDR_VAR 0 55
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 2
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 2
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56084: LD_ADDR_VAR 0 56
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56314: LD_ADDR_VAR 0 57
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: LD_INT 2
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56544: LD_ADDR_VAR 0 58
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 2
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: NEG
56744: PUSH
56745: LD_INT 2
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56774: LD_ADDR_VAR 0 59
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56862: LD_ADDR_VAR 0 60
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56950: LD_ADDR_VAR 0 61
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57038: LD_ADDR_VAR 0 62
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57126: LD_ADDR_VAR 0 63
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57214: LD_ADDR_VAR 0 64
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: ST_TO_ADDR
// end ; 1 :
57302: GO 63199
57304: LD_INT 1
57306: DOUBLE
57307: EQUAL
57308: IFTRUE 57312
57310: GO 59935
57312: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57313: LD_ADDR_VAR 0 11
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 3
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: LIST
57356: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57357: LD_ADDR_VAR 0 12
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 3
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: LIST
57397: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57398: LD_ADDR_VAR 0 13
57402: PUSH
57403: LD_INT 3
57405: PUSH
57406: LD_INT 2
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: PUSH
57416: LD_INT 3
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: LD_INT 3
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: LIST
57437: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57438: LD_ADDR_VAR 0 14
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: LIST
57478: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57479: LD_ADDR_VAR 0 15
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: LIST
57522: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57523: LD_ADDR_VAR 0 16
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: LD_INT 3
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 3
57542: NEG
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 3
57554: NEG
57555: PUSH
57556: LD_INT 3
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: LIST
57568: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57569: LD_ADDR_VAR 0 17
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 3
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: LIST
57612: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57613: LD_ADDR_VAR 0 18
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 3
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: LIST
57653: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57654: LD_ADDR_VAR 0 19
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 3
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: LIST
57693: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57694: LD_ADDR_VAR 0 20
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 3
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: LIST
57734: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57735: LD_ADDR_VAR 0 21
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: NEG
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 3
57764: NEG
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57779: LD_ADDR_VAR 0 22
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: LD_INT 3
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 3
57798: NEG
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 3
57810: NEG
57811: PUSH
57812: LD_INT 3
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: LIST
57824: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57825: LD_ADDR_VAR 0 23
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: LD_INT 3
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: LD_INT 4
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: LIST
57868: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57869: LD_ADDR_VAR 0 24
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 4
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: LIST
57909: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57910: LD_ADDR_VAR 0 25
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 4
57927: PUSH
57928: LD_INT 3
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: LD_INT 4
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: LIST
57949: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57950: LD_ADDR_VAR 0 26
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 3
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: LD_INT 4
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57991: LD_ADDR_VAR 0 27
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 4
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: LIST
58034: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58035: LD_ADDR_VAR 0 28
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: LD_INT 3
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: LD_INT 4
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 4
58066: NEG
58067: PUSH
58068: LD_INT 3
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: LIST
58080: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58081: LD_ADDR_VAR 0 29
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: LD_INT 3
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: LD_INT 4
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: LD_INT 4
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: LD_INT 3
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 5
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: LD_INT 5
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: LD_INT 4
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 6
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 6
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 5
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58236: LD_ADDR_VAR 0 30
58240: PUSH
58241: LD_INT 2
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 3
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 3
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 4
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 4
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 4
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 5
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 5
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 5
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 6
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 6
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58379: LD_ADDR_VAR 0 31
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: LD_INT 3
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 4
58416: PUSH
58417: LD_INT 3
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 4
58426: PUSH
58427: LD_INT 4
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 3
58436: PUSH
58437: LD_INT 4
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 5
58446: PUSH
58447: LD_INT 4
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: LD_INT 5
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 4
58466: PUSH
58467: LD_INT 5
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 6
58476: PUSH
58477: LD_INT 5
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 6
58486: PUSH
58487: LD_INT 6
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 5
58496: PUSH
58497: LD_INT 6
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58518: LD_ADDR_VAR 0 32
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: LD_INT 3
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 3
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 4
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 3
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: LD_INT 5
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 5
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: LD_INT 4
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: LD_INT 6
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: LD_INT 6
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: LD_INT 5
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58661: LD_ADDR_VAR 0 33
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 3
58679: NEG
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: NEG
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: NEG
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 4
58713: NEG
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 4
58724: NEG
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 4
58736: NEG
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 5
58747: NEG
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 5
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 5
58770: NEG
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 6
58781: NEG
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 6
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58816: LD_ADDR_VAR 0 34
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: LD_INT 3
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 3
58859: NEG
58860: PUSH
58861: LD_INT 4
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 4
58871: NEG
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 4
58883: NEG
58884: PUSH
58885: LD_INT 4
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 4
58895: NEG
58896: PUSH
58897: LD_INT 5
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 5
58907: NEG
58908: PUSH
58909: LD_INT 4
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 5
58919: NEG
58920: PUSH
58921: LD_INT 5
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 5
58931: NEG
58932: PUSH
58933: LD_INT 6
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 6
58943: NEG
58944: PUSH
58945: LD_INT 5
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 6
58955: NEG
58956: PUSH
58957: LD_INT 6
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58979: LD_ADDR_VAR 0 41
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 3
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: LIST
59022: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59023: LD_ADDR_VAR 0 42
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 3
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: LIST
59063: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59064: LD_ADDR_VAR 0 43
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 3
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59104: LD_ADDR_VAR 0 44
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: LIST
59144: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59145: LD_ADDR_VAR 0 45
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 3
59174: NEG
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: LIST
59188: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59189: LD_ADDR_VAR 0 46
59193: PUSH
59194: LD_INT 2
59196: NEG
59197: PUSH
59198: LD_INT 2
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 3
59220: NEG
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: LIST
59234: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59235: LD_ADDR_VAR 0 47
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59268: LD_ADDR_VAR 0 48
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 2
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59299: LD_ADDR_VAR 0 49
59303: PUSH
59304: LD_INT 3
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 3
59316: PUSH
59317: LD_INT 2
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59328: LD_ADDR_VAR 0 50
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59357: LD_ADDR_VAR 0 51
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59388: LD_ADDR_VAR 0 52
59392: PUSH
59393: LD_INT 3
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59421: LD_ADDR_VAR 0 53
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 3
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 3
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: LIST
59464: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59465: LD_ADDR_VAR 0 54
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: LIST
59505: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59506: LD_ADDR_VAR 0 55
59510: PUSH
59511: LD_INT 3
59513: PUSH
59514: LD_INT 2
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 3
59523: PUSH
59524: LD_INT 3
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: LD_INT 3
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: LIST
59545: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59546: LD_ADDR_VAR 0 56
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 3
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 3
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: LD_INT 2
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59587: LD_ADDR_VAR 0 57
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 3
59616: NEG
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59631: LD_ADDR_VAR 0 58
59635: PUSH
59636: LD_INT 2
59638: NEG
59639: PUSH
59640: LD_INT 3
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: LD_INT 2
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: NEG
59663: PUSH
59664: LD_INT 3
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: LIST
59676: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59677: LD_ADDR_VAR 0 59
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: LIST
59720: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59721: LD_ADDR_VAR 0 60
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 2
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: LIST
59761: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59762: LD_ADDR_VAR 0 61
59766: PUSH
59767: LD_INT 2
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: LIST
59801: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59802: LD_ADDR_VAR 0 62
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59843: LD_ADDR_VAR 0 63
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59887: LD_ADDR_VAR 0 64
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: LIST
59932: ST_TO_ADDR
// end ; 2 :
59933: GO 63199
59935: LD_INT 2
59937: DOUBLE
59938: EQUAL
59939: IFTRUE 59943
59941: GO 63198
59943: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59944: LD_ADDR_VAR 0 29
59948: PUSH
59949: LD_INT 4
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 4
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 5
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 5
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 4
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 3
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 3
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 3
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 5
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 3
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 3
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 4
60064: PUSH
60065: LD_INT 3
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 4
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 3
60084: PUSH
60085: LD_INT 4
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: LD_INT 3
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 4
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 4
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_INT 4
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 4
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 5
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 5
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 4
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: LD_INT 5
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: LD_INT 3
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: NEG
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 3
60238: NEG
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 4
60283: NEG
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 4
60294: NEG
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 4
60306: NEG
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 4
60329: NEG
60330: PUSH
60331: LD_INT 4
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 4
60341: NEG
60342: PUSH
60343: LD_INT 5
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 3
60353: NEG
60354: PUSH
60355: LD_INT 4
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: LD_INT 3
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 4
60377: NEG
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 5
60389: NEG
60390: PUSH
60391: LD_INT 4
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 5
60401: NEG
60402: PUSH
60403: LD_INT 5
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 3
60413: NEG
60414: PUSH
60415: LD_INT 5
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 5
60425: NEG
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60482: LD_ADDR_VAR 0 30
60486: PUSH
60487: LD_INT 4
60489: PUSH
60490: LD_INT 4
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 4
60499: PUSH
60500: LD_INT 3
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 5
60509: PUSH
60510: LD_INT 4
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 5
60519: PUSH
60520: LD_INT 5
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 4
60529: PUSH
60530: LD_INT 5
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 3
60539: PUSH
60540: LD_INT 4
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 3
60549: PUSH
60550: LD_INT 3
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 5
60559: PUSH
60560: LD_INT 3
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 3
60569: PUSH
60570: LD_INT 5
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: LD_INT 3
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: LD_INT 3
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: LD_INT 4
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 4
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: LD_INT 3
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: PUSH
60652: LD_INT 4
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 4
60672: NEG
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 4
60683: NEG
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 3
60695: NEG
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 3
60706: NEG
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 4
60717: NEG
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 5
60728: NEG
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 5
60739: NEG
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 5
60751: NEG
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: LD_INT 2
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 3
60774: NEG
60775: PUSH
60776: LD_INT 3
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 3
60786: NEG
60787: PUSH
60788: LD_INT 4
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: LD_INT 3
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 3
60822: NEG
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 4
60834: NEG
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 4
60846: NEG
60847: PUSH
60848: LD_INT 4
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: LD_INT 4
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 4
60870: NEG
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: LD_INT 4
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 5
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 4
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: LD_INT 3
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 3
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: NEG
60938: PUSH
60939: LD_INT 4
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 5
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: LD_INT 3
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: NEG
60973: PUSH
60974: LD_INT 5
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61029: LD_ADDR_VAR 0 31
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 4
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 3
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 4
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: LD_INT 5
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 5
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: LD_INT 4
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 5
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: LD_INT 3
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: NEG
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 3
61140: NEG
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 4
61185: NEG
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 4
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 4
61208: NEG
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 2
61220: NEG
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 4
61231: NEG
61232: PUSH
61233: LD_INT 4
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 4
61243: NEG
61244: PUSH
61245: LD_INT 5
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 3
61255: NEG
61256: PUSH
61257: LD_INT 4
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 3
61267: NEG
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 4
61279: NEG
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 5
61291: NEG
61292: PUSH
61293: LD_INT 4
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 5
61303: NEG
61304: PUSH
61305: LD_INT 5
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 3
61315: NEG
61316: PUSH
61317: LD_INT 5
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 5
61327: NEG
61328: PUSH
61329: LD_INT 3
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: LD_INT 3
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: LD_INT 4
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: LD_INT 3
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: LD_INT 2
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: LD_INT 3
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: LD_INT 4
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: LD_INT 2
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: LD_INT 4
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 4
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 4
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 5
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 5
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 4
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 3
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 5
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61579: LD_ADDR_VAR 0 32
61583: PUSH
61584: LD_INT 4
61586: NEG
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 4
61597: NEG
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 3
61609: NEG
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 3
61620: NEG
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 4
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 5
61642: NEG
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 5
61653: NEG
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 5
61665: NEG
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 3
61677: NEG
61678: PUSH
61679: LD_INT 2
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 3
61688: NEG
61689: PUSH
61690: LD_INT 3
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: LD_INT 4
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: LD_INT 3
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 3
61736: NEG
61737: PUSH
61738: LD_INT 2
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 4
61748: NEG
61749: PUSH
61750: LD_INT 3
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 4
61760: NEG
61761: PUSH
61762: LD_INT 4
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: LD_INT 4
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 4
61784: NEG
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 4
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 5
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 4
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: LD_INT 3
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: LD_INT 3
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: LD_INT 4
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: LD_INT 5
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: PUSH
61876: LD_INT 3
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: LD_INT 5
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 3
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 3
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 4
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 4
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 3
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 4
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 4
61991: PUSH
61992: LD_INT 4
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 4
62001: PUSH
62002: LD_INT 3
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 5
62011: PUSH
62012: LD_INT 4
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 5
62021: PUSH
62022: LD_INT 5
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 4
62031: PUSH
62032: LD_INT 5
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 3
62041: PUSH
62042: LD_INT 4
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: LD_INT 3
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 5
62061: PUSH
62062: LD_INT 3
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 3
62071: PUSH
62072: LD_INT 5
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62126: LD_ADDR_VAR 0 33
62130: PUSH
62131: LD_INT 4
62133: NEG
62134: PUSH
62135: LD_INT 4
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 4
62145: NEG
62146: PUSH
62147: LD_INT 5
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: LD_INT 4
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 4
62181: NEG
62182: PUSH
62183: LD_INT 3
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 5
62193: NEG
62194: PUSH
62195: LD_INT 4
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 5
62205: NEG
62206: PUSH
62207: LD_INT 5
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 3
62217: NEG
62218: PUSH
62219: LD_INT 5
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 5
62229: NEG
62230: PUSH
62231: LD_INT 3
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 3
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: LD_INT 4
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 3
62266: NEG
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: LD_INT 2
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 2
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: NEG
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 4
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: LD_INT 2
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 2
62331: NEG
62332: PUSH
62333: LD_INT 4
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 4
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 4
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 5
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 5
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 4
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 5
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 3
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 3
62446: PUSH
62447: LD_INT 2
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 4
62456: PUSH
62457: LD_INT 3
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 4
62466: PUSH
62467: LD_INT 4
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: PUSH
62477: LD_INT 4
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 2
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 2
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 4
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 2
62516: PUSH
62517: LD_INT 4
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: LD_INT 4
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: LD_INT 3
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: LD_INT 5
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: LD_INT 5
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: LD_INT 4
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: LD_INT 3
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: PUSH
62599: LD_INT 5
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 2
62608: NEG
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62664: LD_ADDR_VAR 0 34
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 4
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: LD_INT 5
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: LD_INT 4
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: LD_INT 3
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: LD_INT 3
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: LD_INT 4
62730: NEG
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 1
62738: NEG
62739: PUSH
62740: LD_INT 5
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 2
62750: PUSH
62751: LD_INT 3
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 2
62761: NEG
62762: PUSH
62763: LD_INT 5
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 3
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 3
62783: PUSH
62784: LD_INT 1
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 4
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 4
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 3
62814: PUSH
62815: LD_INT 1
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 2
62824: PUSH
62825: LD_INT 0
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 2
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: LD_INT 2
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 4
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 4
62866: PUSH
62867: LD_INT 4
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 4
62876: PUSH
62877: LD_INT 3
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 5
62886: PUSH
62887: LD_INT 4
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 5
62896: PUSH
62897: LD_INT 5
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 4
62906: PUSH
62907: LD_INT 5
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: LD_INT 4
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 3
62926: PUSH
62927: LD_INT 3
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 5
62936: PUSH
62937: LD_INT 3
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 3
62946: PUSH
62947: LD_INT 5
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: LD_INT 3
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: LD_INT 4
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: LD_INT 4
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: LD_INT 3
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: LD_INT 2
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: PUSH
63029: LD_INT 4
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: LD_INT 2
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 4
63049: NEG
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 4
63060: NEG
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 3
63072: NEG
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 3
63083: NEG
63084: PUSH
63085: LD_INT 1
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 4
63094: NEG
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 5
63105: NEG
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 5
63116: NEG
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 5
63128: NEG
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 3
63140: NEG
63141: PUSH
63142: LD_INT 2
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: ST_TO_ADDR
// end ; end ;
63196: GO 63199
63198: POP
// case btype of b_depot , b_warehouse :
63199: LD_VAR 0 1
63203: PUSH
63204: LD_INT 0
63206: DOUBLE
63207: EQUAL
63208: IFTRUE 63218
63210: LD_INT 1
63212: DOUBLE
63213: EQUAL
63214: IFTRUE 63218
63216: GO 63419
63218: POP
// case nation of nation_american :
63219: LD_VAR 0 5
63223: PUSH
63224: LD_INT 1
63226: DOUBLE
63227: EQUAL
63228: IFTRUE 63232
63230: GO 63288
63232: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
63233: LD_ADDR_VAR 0 9
63237: PUSH
63238: LD_VAR 0 11
63242: PUSH
63243: LD_VAR 0 12
63247: PUSH
63248: LD_VAR 0 13
63252: PUSH
63253: LD_VAR 0 14
63257: PUSH
63258: LD_VAR 0 15
63262: PUSH
63263: LD_VAR 0 16
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: PUSH
63276: LD_VAR 0 4
63280: PUSH
63281: LD_INT 1
63283: PLUS
63284: ARRAY
63285: ST_TO_ADDR
63286: GO 63417
63288: LD_INT 2
63290: DOUBLE
63291: EQUAL
63292: IFTRUE 63296
63294: GO 63352
63296: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
63297: LD_ADDR_VAR 0 9
63301: PUSH
63302: LD_VAR 0 17
63306: PUSH
63307: LD_VAR 0 18
63311: PUSH
63312: LD_VAR 0 19
63316: PUSH
63317: LD_VAR 0 20
63321: PUSH
63322: LD_VAR 0 21
63326: PUSH
63327: LD_VAR 0 22
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: PUSH
63340: LD_VAR 0 4
63344: PUSH
63345: LD_INT 1
63347: PLUS
63348: ARRAY
63349: ST_TO_ADDR
63350: GO 63417
63352: LD_INT 3
63354: DOUBLE
63355: EQUAL
63356: IFTRUE 63360
63358: GO 63416
63360: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63361: LD_ADDR_VAR 0 9
63365: PUSH
63366: LD_VAR 0 23
63370: PUSH
63371: LD_VAR 0 24
63375: PUSH
63376: LD_VAR 0 25
63380: PUSH
63381: LD_VAR 0 26
63385: PUSH
63386: LD_VAR 0 27
63390: PUSH
63391: LD_VAR 0 28
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: PUSH
63404: LD_VAR 0 4
63408: PUSH
63409: LD_INT 1
63411: PLUS
63412: ARRAY
63413: ST_TO_ADDR
63414: GO 63417
63416: POP
63417: GO 63972
63419: LD_INT 2
63421: DOUBLE
63422: EQUAL
63423: IFTRUE 63433
63425: LD_INT 3
63427: DOUBLE
63428: EQUAL
63429: IFTRUE 63433
63431: GO 63489
63433: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63434: LD_ADDR_VAR 0 9
63438: PUSH
63439: LD_VAR 0 29
63443: PUSH
63444: LD_VAR 0 30
63448: PUSH
63449: LD_VAR 0 31
63453: PUSH
63454: LD_VAR 0 32
63458: PUSH
63459: LD_VAR 0 33
63463: PUSH
63464: LD_VAR 0 34
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: PUSH
63477: LD_VAR 0 4
63481: PUSH
63482: LD_INT 1
63484: PLUS
63485: ARRAY
63486: ST_TO_ADDR
63487: GO 63972
63489: LD_INT 16
63491: DOUBLE
63492: EQUAL
63493: IFTRUE 63551
63495: LD_INT 17
63497: DOUBLE
63498: EQUAL
63499: IFTRUE 63551
63501: LD_INT 18
63503: DOUBLE
63504: EQUAL
63505: IFTRUE 63551
63507: LD_INT 19
63509: DOUBLE
63510: EQUAL
63511: IFTRUE 63551
63513: LD_INT 22
63515: DOUBLE
63516: EQUAL
63517: IFTRUE 63551
63519: LD_INT 20
63521: DOUBLE
63522: EQUAL
63523: IFTRUE 63551
63525: LD_INT 21
63527: DOUBLE
63528: EQUAL
63529: IFTRUE 63551
63531: LD_INT 23
63533: DOUBLE
63534: EQUAL
63535: IFTRUE 63551
63537: LD_INT 24
63539: DOUBLE
63540: EQUAL
63541: IFTRUE 63551
63543: LD_INT 25
63545: DOUBLE
63546: EQUAL
63547: IFTRUE 63551
63549: GO 63607
63551: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63552: LD_ADDR_VAR 0 9
63556: PUSH
63557: LD_VAR 0 35
63561: PUSH
63562: LD_VAR 0 36
63566: PUSH
63567: LD_VAR 0 37
63571: PUSH
63572: LD_VAR 0 38
63576: PUSH
63577: LD_VAR 0 39
63581: PUSH
63582: LD_VAR 0 40
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: PUSH
63595: LD_VAR 0 4
63599: PUSH
63600: LD_INT 1
63602: PLUS
63603: ARRAY
63604: ST_TO_ADDR
63605: GO 63972
63607: LD_INT 6
63609: DOUBLE
63610: EQUAL
63611: IFTRUE 63663
63613: LD_INT 7
63615: DOUBLE
63616: EQUAL
63617: IFTRUE 63663
63619: LD_INT 8
63621: DOUBLE
63622: EQUAL
63623: IFTRUE 63663
63625: LD_INT 13
63627: DOUBLE
63628: EQUAL
63629: IFTRUE 63663
63631: LD_INT 12
63633: DOUBLE
63634: EQUAL
63635: IFTRUE 63663
63637: LD_INT 15
63639: DOUBLE
63640: EQUAL
63641: IFTRUE 63663
63643: LD_INT 11
63645: DOUBLE
63646: EQUAL
63647: IFTRUE 63663
63649: LD_INT 14
63651: DOUBLE
63652: EQUAL
63653: IFTRUE 63663
63655: LD_INT 10
63657: DOUBLE
63658: EQUAL
63659: IFTRUE 63663
63661: GO 63719
63663: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
63664: LD_ADDR_VAR 0 9
63668: PUSH
63669: LD_VAR 0 41
63673: PUSH
63674: LD_VAR 0 42
63678: PUSH
63679: LD_VAR 0 43
63683: PUSH
63684: LD_VAR 0 44
63688: PUSH
63689: LD_VAR 0 45
63693: PUSH
63694: LD_VAR 0 46
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: PUSH
63707: LD_VAR 0 4
63711: PUSH
63712: LD_INT 1
63714: PLUS
63715: ARRAY
63716: ST_TO_ADDR
63717: GO 63972
63719: LD_INT 36
63721: DOUBLE
63722: EQUAL
63723: IFTRUE 63727
63725: GO 63783
63727: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63728: LD_ADDR_VAR 0 9
63732: PUSH
63733: LD_VAR 0 47
63737: PUSH
63738: LD_VAR 0 48
63742: PUSH
63743: LD_VAR 0 49
63747: PUSH
63748: LD_VAR 0 50
63752: PUSH
63753: LD_VAR 0 51
63757: PUSH
63758: LD_VAR 0 52
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: PUSH
63771: LD_VAR 0 4
63775: PUSH
63776: LD_INT 1
63778: PLUS
63779: ARRAY
63780: ST_TO_ADDR
63781: GO 63972
63783: LD_INT 4
63785: DOUBLE
63786: EQUAL
63787: IFTRUE 63809
63789: LD_INT 5
63791: DOUBLE
63792: EQUAL
63793: IFTRUE 63809
63795: LD_INT 34
63797: DOUBLE
63798: EQUAL
63799: IFTRUE 63809
63801: LD_INT 37
63803: DOUBLE
63804: EQUAL
63805: IFTRUE 63809
63807: GO 63865
63809: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63810: LD_ADDR_VAR 0 9
63814: PUSH
63815: LD_VAR 0 53
63819: PUSH
63820: LD_VAR 0 54
63824: PUSH
63825: LD_VAR 0 55
63829: PUSH
63830: LD_VAR 0 56
63834: PUSH
63835: LD_VAR 0 57
63839: PUSH
63840: LD_VAR 0 58
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: PUSH
63853: LD_VAR 0 4
63857: PUSH
63858: LD_INT 1
63860: PLUS
63861: ARRAY
63862: ST_TO_ADDR
63863: GO 63972
63865: LD_INT 31
63867: DOUBLE
63868: EQUAL
63869: IFTRUE 63915
63871: LD_INT 32
63873: DOUBLE
63874: EQUAL
63875: IFTRUE 63915
63877: LD_INT 33
63879: DOUBLE
63880: EQUAL
63881: IFTRUE 63915
63883: LD_INT 27
63885: DOUBLE
63886: EQUAL
63887: IFTRUE 63915
63889: LD_INT 26
63891: DOUBLE
63892: EQUAL
63893: IFTRUE 63915
63895: LD_INT 28
63897: DOUBLE
63898: EQUAL
63899: IFTRUE 63915
63901: LD_INT 29
63903: DOUBLE
63904: EQUAL
63905: IFTRUE 63915
63907: LD_INT 30
63909: DOUBLE
63910: EQUAL
63911: IFTRUE 63915
63913: GO 63971
63915: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
63916: LD_ADDR_VAR 0 9
63920: PUSH
63921: LD_VAR 0 59
63925: PUSH
63926: LD_VAR 0 60
63930: PUSH
63931: LD_VAR 0 61
63935: PUSH
63936: LD_VAR 0 62
63940: PUSH
63941: LD_VAR 0 63
63945: PUSH
63946: LD_VAR 0 64
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: PUSH
63959: LD_VAR 0 4
63963: PUSH
63964: LD_INT 1
63966: PLUS
63967: ARRAY
63968: ST_TO_ADDR
63969: GO 63972
63971: POP
// temp_list2 = [ ] ;
63972: LD_ADDR_VAR 0 10
63976: PUSH
63977: EMPTY
63978: ST_TO_ADDR
// for i in temp_list do
63979: LD_ADDR_VAR 0 8
63983: PUSH
63984: LD_VAR 0 9
63988: PUSH
63989: FOR_IN
63990: IFFALSE 64042
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63992: LD_ADDR_VAR 0 10
63996: PUSH
63997: LD_VAR 0 10
64001: PUSH
64002: LD_VAR 0 8
64006: PUSH
64007: LD_INT 1
64009: ARRAY
64010: PUSH
64011: LD_VAR 0 2
64015: PLUS
64016: PUSH
64017: LD_VAR 0 8
64021: PUSH
64022: LD_INT 2
64024: ARRAY
64025: PUSH
64026: LD_VAR 0 3
64030: PLUS
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: EMPTY
64037: LIST
64038: ADD
64039: ST_TO_ADDR
64040: GO 63989
64042: POP
64043: POP
// result = temp_list2 ;
64044: LD_ADDR_VAR 0 7
64048: PUSH
64049: LD_VAR 0 10
64053: ST_TO_ADDR
// end ;
64054: LD_VAR 0 7
64058: RET
// export function EnemyInRange ( unit , dist ) ; begin
64059: LD_INT 0
64061: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64062: LD_ADDR_VAR 0 3
64066: PUSH
64067: LD_VAR 0 1
64071: PPUSH
64072: CALL_OW 255
64076: PPUSH
64077: LD_VAR 0 1
64081: PPUSH
64082: CALL_OW 250
64086: PPUSH
64087: LD_VAR 0 1
64091: PPUSH
64092: CALL_OW 251
64096: PPUSH
64097: LD_VAR 0 2
64101: PPUSH
64102: CALL 38163 0 4
64106: PUSH
64107: LD_INT 4
64109: ARRAY
64110: ST_TO_ADDR
// end ;
64111: LD_VAR 0 3
64115: RET
// export function PlayerSeeMe ( unit ) ; begin
64116: LD_INT 0
64118: PPUSH
// result := See ( your_side , unit ) ;
64119: LD_ADDR_VAR 0 2
64123: PUSH
64124: LD_OWVAR 2
64128: PPUSH
64129: LD_VAR 0 1
64133: PPUSH
64134: CALL_OW 292
64138: ST_TO_ADDR
// end ;
64139: LD_VAR 0 2
64143: RET
// export function ReverseDir ( unit ) ; begin
64144: LD_INT 0
64146: PPUSH
// if not unit then
64147: LD_VAR 0 1
64151: NOT
64152: IFFALSE 64156
// exit ;
64154: GO 64179
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64156: LD_ADDR_VAR 0 2
64160: PUSH
64161: LD_VAR 0 1
64165: PPUSH
64166: CALL_OW 254
64170: PUSH
64171: LD_INT 3
64173: PLUS
64174: PUSH
64175: LD_INT 6
64177: MOD
64178: ST_TO_ADDR
// end ;
64179: LD_VAR 0 2
64183: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64184: LD_INT 0
64186: PPUSH
64187: PPUSH
64188: PPUSH
64189: PPUSH
64190: PPUSH
// if not hexes then
64191: LD_VAR 0 2
64195: NOT
64196: IFFALSE 64200
// exit ;
64198: GO 64348
// dist := 9999 ;
64200: LD_ADDR_VAR 0 5
64204: PUSH
64205: LD_INT 9999
64207: ST_TO_ADDR
// for i = 1 to hexes do
64208: LD_ADDR_VAR 0 4
64212: PUSH
64213: DOUBLE
64214: LD_INT 1
64216: DEC
64217: ST_TO_ADDR
64218: LD_VAR 0 2
64222: PUSH
64223: FOR_TO
64224: IFFALSE 64336
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64226: LD_VAR 0 1
64230: PPUSH
64231: LD_VAR 0 2
64235: PUSH
64236: LD_VAR 0 4
64240: ARRAY
64241: PUSH
64242: LD_INT 1
64244: ARRAY
64245: PPUSH
64246: LD_VAR 0 2
64250: PUSH
64251: LD_VAR 0 4
64255: ARRAY
64256: PUSH
64257: LD_INT 2
64259: ARRAY
64260: PPUSH
64261: CALL_OW 297
64265: PUSH
64266: LD_VAR 0 5
64270: LESS
64271: IFFALSE 64334
// begin hex := hexes [ i ] ;
64273: LD_ADDR_VAR 0 7
64277: PUSH
64278: LD_VAR 0 2
64282: PUSH
64283: LD_VAR 0 4
64287: ARRAY
64288: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64289: LD_ADDR_VAR 0 5
64293: PUSH
64294: LD_VAR 0 1
64298: PPUSH
64299: LD_VAR 0 2
64303: PUSH
64304: LD_VAR 0 4
64308: ARRAY
64309: PUSH
64310: LD_INT 1
64312: ARRAY
64313: PPUSH
64314: LD_VAR 0 2
64318: PUSH
64319: LD_VAR 0 4
64323: ARRAY
64324: PUSH
64325: LD_INT 2
64327: ARRAY
64328: PPUSH
64329: CALL_OW 297
64333: ST_TO_ADDR
// end ; end ;
64334: GO 64223
64336: POP
64337: POP
// result := hex ;
64338: LD_ADDR_VAR 0 3
64342: PUSH
64343: LD_VAR 0 7
64347: ST_TO_ADDR
// end ;
64348: LD_VAR 0 3
64352: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64353: LD_INT 0
64355: PPUSH
64356: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64357: LD_VAR 0 1
64361: NOT
64362: PUSH
64363: LD_VAR 0 1
64367: PUSH
64368: LD_INT 21
64370: PUSH
64371: LD_INT 2
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 23
64380: PUSH
64381: LD_INT 2
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PPUSH
64392: CALL_OW 69
64396: IN
64397: NOT
64398: OR
64399: IFFALSE 64403
// exit ;
64401: GO 64450
// for i = 1 to 3 do
64403: LD_ADDR_VAR 0 3
64407: PUSH
64408: DOUBLE
64409: LD_INT 1
64411: DEC
64412: ST_TO_ADDR
64413: LD_INT 3
64415: PUSH
64416: FOR_TO
64417: IFFALSE 64448
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64419: LD_VAR 0 1
64423: PPUSH
64424: CALL_OW 250
64428: PPUSH
64429: LD_VAR 0 1
64433: PPUSH
64434: CALL_OW 251
64438: PPUSH
64439: LD_INT 1
64441: PPUSH
64442: CALL_OW 453
64446: GO 64416
64448: POP
64449: POP
// end ;
64450: LD_VAR 0 2
64454: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64455: LD_INT 0
64457: PPUSH
64458: PPUSH
64459: PPUSH
64460: PPUSH
64461: PPUSH
64462: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64463: LD_VAR 0 1
64467: NOT
64468: PUSH
64469: LD_VAR 0 2
64473: NOT
64474: OR
64475: PUSH
64476: LD_VAR 0 1
64480: PPUSH
64481: CALL_OW 314
64485: OR
64486: IFFALSE 64490
// exit ;
64488: GO 64931
// x := GetX ( enemy_unit ) ;
64490: LD_ADDR_VAR 0 7
64494: PUSH
64495: LD_VAR 0 2
64499: PPUSH
64500: CALL_OW 250
64504: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64505: LD_ADDR_VAR 0 8
64509: PUSH
64510: LD_VAR 0 2
64514: PPUSH
64515: CALL_OW 251
64519: ST_TO_ADDR
// if not x or not y then
64520: LD_VAR 0 7
64524: NOT
64525: PUSH
64526: LD_VAR 0 8
64530: NOT
64531: OR
64532: IFFALSE 64536
// exit ;
64534: GO 64931
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64536: LD_ADDR_VAR 0 6
64540: PUSH
64541: LD_VAR 0 7
64545: PPUSH
64546: LD_INT 0
64548: PPUSH
64549: LD_INT 4
64551: PPUSH
64552: CALL_OW 272
64556: PUSH
64557: LD_VAR 0 8
64561: PPUSH
64562: LD_INT 0
64564: PPUSH
64565: LD_INT 4
64567: PPUSH
64568: CALL_OW 273
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_VAR 0 7
64581: PPUSH
64582: LD_INT 1
64584: PPUSH
64585: LD_INT 4
64587: PPUSH
64588: CALL_OW 272
64592: PUSH
64593: LD_VAR 0 8
64597: PPUSH
64598: LD_INT 1
64600: PPUSH
64601: LD_INT 4
64603: PPUSH
64604: CALL_OW 273
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_VAR 0 7
64617: PPUSH
64618: LD_INT 2
64620: PPUSH
64621: LD_INT 4
64623: PPUSH
64624: CALL_OW 272
64628: PUSH
64629: LD_VAR 0 8
64633: PPUSH
64634: LD_INT 2
64636: PPUSH
64637: LD_INT 4
64639: PPUSH
64640: CALL_OW 273
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_VAR 0 7
64653: PPUSH
64654: LD_INT 3
64656: PPUSH
64657: LD_INT 4
64659: PPUSH
64660: CALL_OW 272
64664: PUSH
64665: LD_VAR 0 8
64669: PPUSH
64670: LD_INT 3
64672: PPUSH
64673: LD_INT 4
64675: PPUSH
64676: CALL_OW 273
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_VAR 0 7
64689: PPUSH
64690: LD_INT 4
64692: PPUSH
64693: LD_INT 4
64695: PPUSH
64696: CALL_OW 272
64700: PUSH
64701: LD_VAR 0 8
64705: PPUSH
64706: LD_INT 4
64708: PPUSH
64709: LD_INT 4
64711: PPUSH
64712: CALL_OW 273
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_VAR 0 7
64725: PPUSH
64726: LD_INT 5
64728: PPUSH
64729: LD_INT 4
64731: PPUSH
64732: CALL_OW 272
64736: PUSH
64737: LD_VAR 0 8
64741: PPUSH
64742: LD_INT 5
64744: PPUSH
64745: LD_INT 4
64747: PPUSH
64748: CALL_OW 273
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: ST_TO_ADDR
// for i = tmp downto 1 do
64765: LD_ADDR_VAR 0 4
64769: PUSH
64770: DOUBLE
64771: LD_VAR 0 6
64775: INC
64776: ST_TO_ADDR
64777: LD_INT 1
64779: PUSH
64780: FOR_DOWNTO
64781: IFFALSE 64882
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64783: LD_VAR 0 6
64787: PUSH
64788: LD_VAR 0 4
64792: ARRAY
64793: PUSH
64794: LD_INT 1
64796: ARRAY
64797: PPUSH
64798: LD_VAR 0 6
64802: PUSH
64803: LD_VAR 0 4
64807: ARRAY
64808: PUSH
64809: LD_INT 2
64811: ARRAY
64812: PPUSH
64813: CALL_OW 488
64817: NOT
64818: PUSH
64819: LD_VAR 0 6
64823: PUSH
64824: LD_VAR 0 4
64828: ARRAY
64829: PUSH
64830: LD_INT 1
64832: ARRAY
64833: PPUSH
64834: LD_VAR 0 6
64838: PUSH
64839: LD_VAR 0 4
64843: ARRAY
64844: PUSH
64845: LD_INT 2
64847: ARRAY
64848: PPUSH
64849: CALL_OW 428
64853: PUSH
64854: LD_INT 0
64856: NONEQUAL
64857: OR
64858: IFFALSE 64880
// tmp := Delete ( tmp , i ) ;
64860: LD_ADDR_VAR 0 6
64864: PUSH
64865: LD_VAR 0 6
64869: PPUSH
64870: LD_VAR 0 4
64874: PPUSH
64875: CALL_OW 3
64879: ST_TO_ADDR
64880: GO 64780
64882: POP
64883: POP
// j := GetClosestHex ( unit , tmp ) ;
64884: LD_ADDR_VAR 0 5
64888: PUSH
64889: LD_VAR 0 1
64893: PPUSH
64894: LD_VAR 0 6
64898: PPUSH
64899: CALL 64184 0 2
64903: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64904: LD_VAR 0 1
64908: PPUSH
64909: LD_VAR 0 5
64913: PUSH
64914: LD_INT 1
64916: ARRAY
64917: PPUSH
64918: LD_VAR 0 5
64922: PUSH
64923: LD_INT 2
64925: ARRAY
64926: PPUSH
64927: CALL_OW 111
// end ;
64931: LD_VAR 0 3
64935: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64936: LD_INT 0
64938: PPUSH
64939: PPUSH
64940: PPUSH
// uc_side = 0 ;
64941: LD_ADDR_OWVAR 20
64945: PUSH
64946: LD_INT 0
64948: ST_TO_ADDR
// uc_nation = 0 ;
64949: LD_ADDR_OWVAR 21
64953: PUSH
64954: LD_INT 0
64956: ST_TO_ADDR
// InitHc ;
64957: CALL_OW 19
// InitVc ;
64961: CALL_OW 20
// if mastodonts then
64965: LD_VAR 0 6
64969: IFFALSE 65036
// for i = 1 to mastodonts do
64971: LD_ADDR_VAR 0 11
64975: PUSH
64976: DOUBLE
64977: LD_INT 1
64979: DEC
64980: ST_TO_ADDR
64981: LD_VAR 0 6
64985: PUSH
64986: FOR_TO
64987: IFFALSE 65034
// begin vc_chassis := 31 ;
64989: LD_ADDR_OWVAR 37
64993: PUSH
64994: LD_INT 31
64996: ST_TO_ADDR
// vc_control := control_rider ;
64997: LD_ADDR_OWVAR 38
65001: PUSH
65002: LD_INT 4
65004: ST_TO_ADDR
// animal := CreateVehicle ;
65005: LD_ADDR_VAR 0 12
65009: PUSH
65010: CALL_OW 45
65014: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65015: LD_VAR 0 12
65019: PPUSH
65020: LD_VAR 0 8
65024: PPUSH
65025: LD_INT 0
65027: PPUSH
65028: CALL 67105 0 3
// end ;
65032: GO 64986
65034: POP
65035: POP
// if horses then
65036: LD_VAR 0 5
65040: IFFALSE 65107
// for i = 1 to horses do
65042: LD_ADDR_VAR 0 11
65046: PUSH
65047: DOUBLE
65048: LD_INT 1
65050: DEC
65051: ST_TO_ADDR
65052: LD_VAR 0 5
65056: PUSH
65057: FOR_TO
65058: IFFALSE 65105
// begin hc_class := 21 ;
65060: LD_ADDR_OWVAR 28
65064: PUSH
65065: LD_INT 21
65067: ST_TO_ADDR
// hc_gallery :=  ;
65068: LD_ADDR_OWVAR 33
65072: PUSH
65073: LD_STRING 
65075: ST_TO_ADDR
// animal := CreateHuman ;
65076: LD_ADDR_VAR 0 12
65080: PUSH
65081: CALL_OW 44
65085: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65086: LD_VAR 0 12
65090: PPUSH
65091: LD_VAR 0 8
65095: PPUSH
65096: LD_INT 0
65098: PPUSH
65099: CALL 67105 0 3
// end ;
65103: GO 65057
65105: POP
65106: POP
// if birds then
65107: LD_VAR 0 1
65111: IFFALSE 65178
// for i = 1 to birds do
65113: LD_ADDR_VAR 0 11
65117: PUSH
65118: DOUBLE
65119: LD_INT 1
65121: DEC
65122: ST_TO_ADDR
65123: LD_VAR 0 1
65127: PUSH
65128: FOR_TO
65129: IFFALSE 65176
// begin hc_class = 18 ;
65131: LD_ADDR_OWVAR 28
65135: PUSH
65136: LD_INT 18
65138: ST_TO_ADDR
// hc_gallery =  ;
65139: LD_ADDR_OWVAR 33
65143: PUSH
65144: LD_STRING 
65146: ST_TO_ADDR
// animal := CreateHuman ;
65147: LD_ADDR_VAR 0 12
65151: PUSH
65152: CALL_OW 44
65156: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65157: LD_VAR 0 12
65161: PPUSH
65162: LD_VAR 0 8
65166: PPUSH
65167: LD_INT 0
65169: PPUSH
65170: CALL 67105 0 3
// end ;
65174: GO 65128
65176: POP
65177: POP
// if tigers then
65178: LD_VAR 0 2
65182: IFFALSE 65266
// for i = 1 to tigers do
65184: LD_ADDR_VAR 0 11
65188: PUSH
65189: DOUBLE
65190: LD_INT 1
65192: DEC
65193: ST_TO_ADDR
65194: LD_VAR 0 2
65198: PUSH
65199: FOR_TO
65200: IFFALSE 65264
// begin hc_class = class_tiger ;
65202: LD_ADDR_OWVAR 28
65206: PUSH
65207: LD_INT 14
65209: ST_TO_ADDR
// hc_gallery =  ;
65210: LD_ADDR_OWVAR 33
65214: PUSH
65215: LD_STRING 
65217: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65218: LD_ADDR_OWVAR 35
65222: PUSH
65223: LD_INT 7
65225: NEG
65226: PPUSH
65227: LD_INT 7
65229: PPUSH
65230: CALL_OW 12
65234: ST_TO_ADDR
// animal := CreateHuman ;
65235: LD_ADDR_VAR 0 12
65239: PUSH
65240: CALL_OW 44
65244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65245: LD_VAR 0 12
65249: PPUSH
65250: LD_VAR 0 8
65254: PPUSH
65255: LD_INT 0
65257: PPUSH
65258: CALL 67105 0 3
// end ;
65262: GO 65199
65264: POP
65265: POP
// if apemans then
65266: LD_VAR 0 3
65270: IFFALSE 65393
// for i = 1 to apemans do
65272: LD_ADDR_VAR 0 11
65276: PUSH
65277: DOUBLE
65278: LD_INT 1
65280: DEC
65281: ST_TO_ADDR
65282: LD_VAR 0 3
65286: PUSH
65287: FOR_TO
65288: IFFALSE 65391
// begin hc_class = class_apeman ;
65290: LD_ADDR_OWVAR 28
65294: PUSH
65295: LD_INT 12
65297: ST_TO_ADDR
// hc_gallery =  ;
65298: LD_ADDR_OWVAR 33
65302: PUSH
65303: LD_STRING 
65305: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
65306: LD_ADDR_OWVAR 35
65310: PUSH
65311: LD_INT 5
65313: NEG
65314: PPUSH
65315: LD_INT 5
65317: PPUSH
65318: CALL_OW 12
65322: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65323: LD_ADDR_OWVAR 31
65327: PUSH
65328: LD_INT 1
65330: PPUSH
65331: LD_INT 3
65333: PPUSH
65334: CALL_OW 12
65338: PUSH
65339: LD_INT 1
65341: PPUSH
65342: LD_INT 3
65344: PPUSH
65345: CALL_OW 12
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: ST_TO_ADDR
// animal := CreateHuman ;
65362: LD_ADDR_VAR 0 12
65366: PUSH
65367: CALL_OW 44
65371: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65372: LD_VAR 0 12
65376: PPUSH
65377: LD_VAR 0 8
65381: PPUSH
65382: LD_INT 0
65384: PPUSH
65385: CALL 67105 0 3
// end ;
65389: GO 65287
65391: POP
65392: POP
// if enchidnas then
65393: LD_VAR 0 4
65397: IFFALSE 65464
// for i = 1 to enchidnas do
65399: LD_ADDR_VAR 0 11
65403: PUSH
65404: DOUBLE
65405: LD_INT 1
65407: DEC
65408: ST_TO_ADDR
65409: LD_VAR 0 4
65413: PUSH
65414: FOR_TO
65415: IFFALSE 65462
// begin hc_class = 13 ;
65417: LD_ADDR_OWVAR 28
65421: PUSH
65422: LD_INT 13
65424: ST_TO_ADDR
// hc_gallery =  ;
65425: LD_ADDR_OWVAR 33
65429: PUSH
65430: LD_STRING 
65432: ST_TO_ADDR
// animal := CreateHuman ;
65433: LD_ADDR_VAR 0 12
65437: PUSH
65438: CALL_OW 44
65442: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65443: LD_VAR 0 12
65447: PPUSH
65448: LD_VAR 0 8
65452: PPUSH
65453: LD_INT 0
65455: PPUSH
65456: CALL 67105 0 3
// end ;
65460: GO 65414
65462: POP
65463: POP
// if fishes then
65464: LD_VAR 0 7
65468: IFFALSE 65535
// for i = 1 to fishes do
65470: LD_ADDR_VAR 0 11
65474: PUSH
65475: DOUBLE
65476: LD_INT 1
65478: DEC
65479: ST_TO_ADDR
65480: LD_VAR 0 7
65484: PUSH
65485: FOR_TO
65486: IFFALSE 65533
// begin hc_class = 20 ;
65488: LD_ADDR_OWVAR 28
65492: PUSH
65493: LD_INT 20
65495: ST_TO_ADDR
// hc_gallery =  ;
65496: LD_ADDR_OWVAR 33
65500: PUSH
65501: LD_STRING 
65503: ST_TO_ADDR
// animal := CreateHuman ;
65504: LD_ADDR_VAR 0 12
65508: PUSH
65509: CALL_OW 44
65513: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65514: LD_VAR 0 12
65518: PPUSH
65519: LD_VAR 0 9
65523: PPUSH
65524: LD_INT 0
65526: PPUSH
65527: CALL 67105 0 3
// end ;
65531: GO 65485
65533: POP
65534: POP
// end ;
65535: LD_VAR 0 10
65539: RET
// export function WantHeal ( sci , unit ) ; begin
65540: LD_INT 0
65542: PPUSH
// if GetTaskList ( sci ) > 0 then
65543: LD_VAR 0 1
65547: PPUSH
65548: CALL_OW 437
65552: PUSH
65553: LD_INT 0
65555: GREATER
65556: IFFALSE 65626
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65558: LD_VAR 0 1
65562: PPUSH
65563: CALL_OW 437
65567: PUSH
65568: LD_INT 1
65570: ARRAY
65571: PUSH
65572: LD_INT 1
65574: ARRAY
65575: PUSH
65576: LD_STRING l
65578: EQUAL
65579: PUSH
65580: LD_VAR 0 1
65584: PPUSH
65585: CALL_OW 437
65589: PUSH
65590: LD_INT 1
65592: ARRAY
65593: PUSH
65594: LD_INT 4
65596: ARRAY
65597: PUSH
65598: LD_VAR 0 2
65602: EQUAL
65603: AND
65604: IFFALSE 65616
// result := true else
65606: LD_ADDR_VAR 0 3
65610: PUSH
65611: LD_INT 1
65613: ST_TO_ADDR
65614: GO 65624
// result := false ;
65616: LD_ADDR_VAR 0 3
65620: PUSH
65621: LD_INT 0
65623: ST_TO_ADDR
// end else
65624: GO 65634
// result := false ;
65626: LD_ADDR_VAR 0 3
65630: PUSH
65631: LD_INT 0
65633: ST_TO_ADDR
// end ;
65634: LD_VAR 0 3
65638: RET
// export function HealTarget ( sci ) ; begin
65639: LD_INT 0
65641: PPUSH
// if not sci then
65642: LD_VAR 0 1
65646: NOT
65647: IFFALSE 65651
// exit ;
65649: GO 65716
// result := 0 ;
65651: LD_ADDR_VAR 0 2
65655: PUSH
65656: LD_INT 0
65658: ST_TO_ADDR
// if GetTaskList ( sci ) then
65659: LD_VAR 0 1
65663: PPUSH
65664: CALL_OW 437
65668: IFFALSE 65716
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65670: LD_VAR 0 1
65674: PPUSH
65675: CALL_OW 437
65679: PUSH
65680: LD_INT 1
65682: ARRAY
65683: PUSH
65684: LD_INT 1
65686: ARRAY
65687: PUSH
65688: LD_STRING l
65690: EQUAL
65691: IFFALSE 65716
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65693: LD_ADDR_VAR 0 2
65697: PUSH
65698: LD_VAR 0 1
65702: PPUSH
65703: CALL_OW 437
65707: PUSH
65708: LD_INT 1
65710: ARRAY
65711: PUSH
65712: LD_INT 4
65714: ARRAY
65715: ST_TO_ADDR
// end ;
65716: LD_VAR 0 2
65720: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65721: LD_INT 0
65723: PPUSH
65724: PPUSH
65725: PPUSH
65726: PPUSH
// if not base_units then
65727: LD_VAR 0 1
65731: NOT
65732: IFFALSE 65736
// exit ;
65734: GO 65823
// result := false ;
65736: LD_ADDR_VAR 0 2
65740: PUSH
65741: LD_INT 0
65743: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65744: LD_ADDR_VAR 0 5
65748: PUSH
65749: LD_VAR 0 1
65753: PPUSH
65754: LD_INT 21
65756: PUSH
65757: LD_INT 3
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PPUSH
65764: CALL_OW 72
65768: ST_TO_ADDR
// if not tmp then
65769: LD_VAR 0 5
65773: NOT
65774: IFFALSE 65778
// exit ;
65776: GO 65823
// for i in tmp do
65778: LD_ADDR_VAR 0 3
65782: PUSH
65783: LD_VAR 0 5
65787: PUSH
65788: FOR_IN
65789: IFFALSE 65821
// begin result := EnemyInRange ( i , 22 ) ;
65791: LD_ADDR_VAR 0 2
65795: PUSH
65796: LD_VAR 0 3
65800: PPUSH
65801: LD_INT 22
65803: PPUSH
65804: CALL 64059 0 2
65808: ST_TO_ADDR
// if result then
65809: LD_VAR 0 2
65813: IFFALSE 65819
// exit ;
65815: POP
65816: POP
65817: GO 65823
// end ;
65819: GO 65788
65821: POP
65822: POP
// end ;
65823: LD_VAR 0 2
65827: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65828: LD_INT 0
65830: PPUSH
65831: PPUSH
// if not units then
65832: LD_VAR 0 1
65836: NOT
65837: IFFALSE 65841
// exit ;
65839: GO 65911
// result := [ ] ;
65841: LD_ADDR_VAR 0 3
65845: PUSH
65846: EMPTY
65847: ST_TO_ADDR
// for i in units do
65848: LD_ADDR_VAR 0 4
65852: PUSH
65853: LD_VAR 0 1
65857: PUSH
65858: FOR_IN
65859: IFFALSE 65909
// if GetTag ( i ) = tag then
65861: LD_VAR 0 4
65865: PPUSH
65866: CALL_OW 110
65870: PUSH
65871: LD_VAR 0 2
65875: EQUAL
65876: IFFALSE 65907
// result := Insert ( result , result + 1 , i ) ;
65878: LD_ADDR_VAR 0 3
65882: PUSH
65883: LD_VAR 0 3
65887: PPUSH
65888: LD_VAR 0 3
65892: PUSH
65893: LD_INT 1
65895: PLUS
65896: PPUSH
65897: LD_VAR 0 4
65901: PPUSH
65902: CALL_OW 2
65906: ST_TO_ADDR
65907: GO 65858
65909: POP
65910: POP
// end ;
65911: LD_VAR 0 3
65915: RET
// export function IsDriver ( un ) ; begin
65916: LD_INT 0
65918: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65919: LD_ADDR_VAR 0 2
65923: PUSH
65924: LD_VAR 0 1
65928: PUSH
65929: LD_INT 55
65931: PUSH
65932: EMPTY
65933: LIST
65934: PPUSH
65935: CALL_OW 69
65939: IN
65940: ST_TO_ADDR
// end ;
65941: LD_VAR 0 2
65945: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65946: LD_INT 0
65948: PPUSH
65949: PPUSH
// list := [ ] ;
65950: LD_ADDR_VAR 0 5
65954: PUSH
65955: EMPTY
65956: ST_TO_ADDR
// case d of 0 :
65957: LD_VAR 0 3
65961: PUSH
65962: LD_INT 0
65964: DOUBLE
65965: EQUAL
65966: IFTRUE 65970
65968: GO 66103
65970: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65971: LD_ADDR_VAR 0 5
65975: PUSH
65976: LD_VAR 0 1
65980: PUSH
65981: LD_INT 4
65983: MINUS
65984: PUSH
65985: LD_VAR 0 2
65989: PUSH
65990: LD_INT 4
65992: MINUS
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: LIST
66001: PUSH
66002: LD_VAR 0 1
66006: PUSH
66007: LD_INT 3
66009: MINUS
66010: PUSH
66011: LD_VAR 0 2
66015: PUSH
66016: LD_INT 1
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: LIST
66023: PUSH
66024: LD_VAR 0 1
66028: PUSH
66029: LD_INT 4
66031: PLUS
66032: PUSH
66033: LD_VAR 0 2
66037: PUSH
66038: LD_INT 4
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: LIST
66045: PUSH
66046: LD_VAR 0 1
66050: PUSH
66051: LD_INT 3
66053: PLUS
66054: PUSH
66055: LD_VAR 0 2
66059: PUSH
66060: LD_INT 3
66062: PLUS
66063: PUSH
66064: LD_INT 5
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: LIST
66071: PUSH
66072: LD_VAR 0 1
66076: PUSH
66077: LD_VAR 0 2
66081: PUSH
66082: LD_INT 4
66084: PLUS
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: LIST
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: ST_TO_ADDR
// end ; 1 :
66101: GO 66801
66103: LD_INT 1
66105: DOUBLE
66106: EQUAL
66107: IFTRUE 66111
66109: GO 66244
66111: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66112: LD_ADDR_VAR 0 5
66116: PUSH
66117: LD_VAR 0 1
66121: PUSH
66122: LD_VAR 0 2
66126: PUSH
66127: LD_INT 4
66129: MINUS
66130: PUSH
66131: LD_INT 3
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: PUSH
66139: LD_VAR 0 1
66143: PUSH
66144: LD_INT 3
66146: MINUS
66147: PUSH
66148: LD_VAR 0 2
66152: PUSH
66153: LD_INT 3
66155: MINUS
66156: PUSH
66157: LD_INT 2
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: LIST
66164: PUSH
66165: LD_VAR 0 1
66169: PUSH
66170: LD_INT 4
66172: MINUS
66173: PUSH
66174: LD_VAR 0 2
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: LIST
66186: PUSH
66187: LD_VAR 0 1
66191: PUSH
66192: LD_VAR 0 2
66196: PUSH
66197: LD_INT 3
66199: PLUS
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: LIST
66208: PUSH
66209: LD_VAR 0 1
66213: PUSH
66214: LD_INT 4
66216: PLUS
66217: PUSH
66218: LD_VAR 0 2
66222: PUSH
66223: LD_INT 4
66225: PLUS
66226: PUSH
66227: LD_INT 5
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: LIST
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: ST_TO_ADDR
// end ; 2 :
66242: GO 66801
66244: LD_INT 2
66246: DOUBLE
66247: EQUAL
66248: IFTRUE 66252
66250: GO 66381
66252: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66253: LD_ADDR_VAR 0 5
66257: PUSH
66258: LD_VAR 0 1
66262: PUSH
66263: LD_VAR 0 2
66267: PUSH
66268: LD_INT 3
66270: MINUS
66271: PUSH
66272: LD_INT 3
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: LIST
66279: PUSH
66280: LD_VAR 0 1
66284: PUSH
66285: LD_INT 4
66287: PLUS
66288: PUSH
66289: LD_VAR 0 2
66293: PUSH
66294: LD_INT 4
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: LIST
66301: PUSH
66302: LD_VAR 0 1
66306: PUSH
66307: LD_VAR 0 2
66311: PUSH
66312: LD_INT 4
66314: PLUS
66315: PUSH
66316: LD_INT 0
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: LIST
66323: PUSH
66324: LD_VAR 0 1
66328: PUSH
66329: LD_INT 3
66331: MINUS
66332: PUSH
66333: LD_VAR 0 2
66337: PUSH
66338: LD_INT 1
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: LIST
66345: PUSH
66346: LD_VAR 0 1
66350: PUSH
66351: LD_INT 4
66353: MINUS
66354: PUSH
66355: LD_VAR 0 2
66359: PUSH
66360: LD_INT 4
66362: MINUS
66363: PUSH
66364: LD_INT 2
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: LIST
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: ST_TO_ADDR
// end ; 3 :
66379: GO 66801
66381: LD_INT 3
66383: DOUBLE
66384: EQUAL
66385: IFTRUE 66389
66387: GO 66522
66389: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66390: LD_ADDR_VAR 0 5
66394: PUSH
66395: LD_VAR 0 1
66399: PUSH
66400: LD_INT 3
66402: PLUS
66403: PUSH
66404: LD_VAR 0 2
66408: PUSH
66409: LD_INT 4
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: PUSH
66417: LD_VAR 0 1
66421: PUSH
66422: LD_INT 4
66424: PLUS
66425: PUSH
66426: LD_VAR 0 2
66430: PUSH
66431: LD_INT 4
66433: PLUS
66434: PUSH
66435: LD_INT 5
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: LIST
66442: PUSH
66443: LD_VAR 0 1
66447: PUSH
66448: LD_INT 4
66450: MINUS
66451: PUSH
66452: LD_VAR 0 2
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: LIST
66464: PUSH
66465: LD_VAR 0 1
66469: PUSH
66470: LD_VAR 0 2
66474: PUSH
66475: LD_INT 4
66477: MINUS
66478: PUSH
66479: LD_INT 3
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: LIST
66486: PUSH
66487: LD_VAR 0 1
66491: PUSH
66492: LD_INT 3
66494: MINUS
66495: PUSH
66496: LD_VAR 0 2
66500: PUSH
66501: LD_INT 3
66503: MINUS
66504: PUSH
66505: LD_INT 2
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: LIST
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: ST_TO_ADDR
// end ; 4 :
66520: GO 66801
66522: LD_INT 4
66524: DOUBLE
66525: EQUAL
66526: IFTRUE 66530
66528: GO 66663
66530: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66531: LD_ADDR_VAR 0 5
66535: PUSH
66536: LD_VAR 0 1
66540: PUSH
66541: LD_VAR 0 2
66545: PUSH
66546: LD_INT 4
66548: PLUS
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: LIST
66557: PUSH
66558: LD_VAR 0 1
66562: PUSH
66563: LD_INT 3
66565: PLUS
66566: PUSH
66567: LD_VAR 0 2
66571: PUSH
66572: LD_INT 3
66574: PLUS
66575: PUSH
66576: LD_INT 5
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: LIST
66583: PUSH
66584: LD_VAR 0 1
66588: PUSH
66589: LD_INT 4
66591: PLUS
66592: PUSH
66593: LD_VAR 0 2
66597: PUSH
66598: LD_INT 4
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: LIST
66605: PUSH
66606: LD_VAR 0 1
66610: PUSH
66611: LD_VAR 0 2
66615: PUSH
66616: LD_INT 3
66618: MINUS
66619: PUSH
66620: LD_INT 3
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: LIST
66627: PUSH
66628: LD_VAR 0 1
66632: PUSH
66633: LD_INT 4
66635: MINUS
66636: PUSH
66637: LD_VAR 0 2
66641: PUSH
66642: LD_INT 4
66644: MINUS
66645: PUSH
66646: LD_INT 2
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: ST_TO_ADDR
// end ; 5 :
66661: GO 66801
66663: LD_INT 5
66665: DOUBLE
66666: EQUAL
66667: IFTRUE 66671
66669: GO 66800
66671: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66672: LD_ADDR_VAR 0 5
66676: PUSH
66677: LD_VAR 0 1
66681: PUSH
66682: LD_INT 4
66684: MINUS
66685: PUSH
66686: LD_VAR 0 2
66690: PUSH
66691: LD_INT 1
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: LIST
66698: PUSH
66699: LD_VAR 0 1
66703: PUSH
66704: LD_VAR 0 2
66708: PUSH
66709: LD_INT 4
66711: MINUS
66712: PUSH
66713: LD_INT 3
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: LIST
66720: PUSH
66721: LD_VAR 0 1
66725: PUSH
66726: LD_INT 4
66728: PLUS
66729: PUSH
66730: LD_VAR 0 2
66734: PUSH
66735: LD_INT 4
66737: PLUS
66738: PUSH
66739: LD_INT 5
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: LIST
66746: PUSH
66747: LD_VAR 0 1
66751: PUSH
66752: LD_INT 3
66754: PLUS
66755: PUSH
66756: LD_VAR 0 2
66760: PUSH
66761: LD_INT 4
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: LIST
66768: PUSH
66769: LD_VAR 0 1
66773: PUSH
66774: LD_VAR 0 2
66778: PUSH
66779: LD_INT 3
66781: PLUS
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: LIST
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: ST_TO_ADDR
// end ; end ;
66798: GO 66801
66800: POP
// result := list ;
66801: LD_ADDR_VAR 0 4
66805: PUSH
66806: LD_VAR 0 5
66810: ST_TO_ADDR
// end ;
66811: LD_VAR 0 4
66815: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66816: LD_INT 0
66818: PPUSH
66819: PPUSH
66820: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66821: LD_VAR 0 1
66825: NOT
66826: PUSH
66827: LD_VAR 0 2
66831: PUSH
66832: LD_INT 1
66834: PUSH
66835: LD_INT 2
66837: PUSH
66838: LD_INT 3
66840: PUSH
66841: LD_INT 4
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: IN
66850: NOT
66851: OR
66852: IFFALSE 66856
// exit ;
66854: GO 66948
// tmp := [ ] ;
66856: LD_ADDR_VAR 0 5
66860: PUSH
66861: EMPTY
66862: ST_TO_ADDR
// for i in units do
66863: LD_ADDR_VAR 0 4
66867: PUSH
66868: LD_VAR 0 1
66872: PUSH
66873: FOR_IN
66874: IFFALSE 66917
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66876: LD_ADDR_VAR 0 5
66880: PUSH
66881: LD_VAR 0 5
66885: PPUSH
66886: LD_VAR 0 5
66890: PUSH
66891: LD_INT 1
66893: PLUS
66894: PPUSH
66895: LD_VAR 0 4
66899: PPUSH
66900: LD_VAR 0 2
66904: PPUSH
66905: CALL_OW 259
66909: PPUSH
66910: CALL_OW 2
66914: ST_TO_ADDR
66915: GO 66873
66917: POP
66918: POP
// if not tmp then
66919: LD_VAR 0 5
66923: NOT
66924: IFFALSE 66928
// exit ;
66926: GO 66948
// result := SortListByListDesc ( units , tmp ) ;
66928: LD_ADDR_VAR 0 3
66932: PUSH
66933: LD_VAR 0 1
66937: PPUSH
66938: LD_VAR 0 5
66942: PPUSH
66943: CALL_OW 77
66947: ST_TO_ADDR
// end ;
66948: LD_VAR 0 3
66952: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66953: LD_INT 0
66955: PPUSH
66956: PPUSH
66957: PPUSH
// x := GetX ( building ) ;
66958: LD_ADDR_VAR 0 4
66962: PUSH
66963: LD_VAR 0 2
66967: PPUSH
66968: CALL_OW 250
66972: ST_TO_ADDR
// y := GetY ( building ) ;
66973: LD_ADDR_VAR 0 5
66977: PUSH
66978: LD_VAR 0 2
66982: PPUSH
66983: CALL_OW 251
66987: ST_TO_ADDR
// if GetTaskList ( unit ) then
66988: LD_VAR 0 1
66992: PPUSH
66993: CALL_OW 437
66997: IFFALSE 67092
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66999: LD_STRING e
67001: PUSH
67002: LD_VAR 0 1
67006: PPUSH
67007: CALL_OW 437
67011: PUSH
67012: LD_INT 1
67014: ARRAY
67015: PUSH
67016: LD_INT 1
67018: ARRAY
67019: EQUAL
67020: PUSH
67021: LD_VAR 0 4
67025: PUSH
67026: LD_VAR 0 1
67030: PPUSH
67031: CALL_OW 437
67035: PUSH
67036: LD_INT 1
67038: ARRAY
67039: PUSH
67040: LD_INT 2
67042: ARRAY
67043: EQUAL
67044: AND
67045: PUSH
67046: LD_VAR 0 5
67050: PUSH
67051: LD_VAR 0 1
67055: PPUSH
67056: CALL_OW 437
67060: PUSH
67061: LD_INT 1
67063: ARRAY
67064: PUSH
67065: LD_INT 3
67067: ARRAY
67068: EQUAL
67069: AND
67070: IFFALSE 67082
// result := true else
67072: LD_ADDR_VAR 0 3
67076: PUSH
67077: LD_INT 1
67079: ST_TO_ADDR
67080: GO 67090
// result := false ;
67082: LD_ADDR_VAR 0 3
67086: PUSH
67087: LD_INT 0
67089: ST_TO_ADDR
// end else
67090: GO 67100
// result := false ;
67092: LD_ADDR_VAR 0 3
67096: PUSH
67097: LD_INT 0
67099: ST_TO_ADDR
// end ;
67100: LD_VAR 0 3
67104: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67105: LD_INT 0
67107: PPUSH
67108: PPUSH
67109: PPUSH
67110: PPUSH
// if not unit or not area then
67111: LD_VAR 0 1
67115: NOT
67116: PUSH
67117: LD_VAR 0 2
67121: NOT
67122: OR
67123: IFFALSE 67127
// exit ;
67125: GO 67291
// tmp := AreaToList ( area , i ) ;
67127: LD_ADDR_VAR 0 6
67131: PUSH
67132: LD_VAR 0 2
67136: PPUSH
67137: LD_VAR 0 5
67141: PPUSH
67142: CALL_OW 517
67146: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67147: LD_ADDR_VAR 0 5
67151: PUSH
67152: DOUBLE
67153: LD_INT 1
67155: DEC
67156: ST_TO_ADDR
67157: LD_VAR 0 6
67161: PUSH
67162: LD_INT 1
67164: ARRAY
67165: PUSH
67166: FOR_TO
67167: IFFALSE 67289
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67169: LD_ADDR_VAR 0 7
67173: PUSH
67174: LD_VAR 0 6
67178: PUSH
67179: LD_INT 1
67181: ARRAY
67182: PUSH
67183: LD_VAR 0 5
67187: ARRAY
67188: PUSH
67189: LD_VAR 0 6
67193: PUSH
67194: LD_INT 2
67196: ARRAY
67197: PUSH
67198: LD_VAR 0 5
67202: ARRAY
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67208: LD_VAR 0 7
67212: PUSH
67213: LD_INT 1
67215: ARRAY
67216: PPUSH
67217: LD_VAR 0 7
67221: PUSH
67222: LD_INT 2
67224: ARRAY
67225: PPUSH
67226: CALL_OW 428
67230: PUSH
67231: LD_INT 0
67233: EQUAL
67234: IFFALSE 67287
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67236: LD_VAR 0 1
67240: PPUSH
67241: LD_VAR 0 7
67245: PUSH
67246: LD_INT 1
67248: ARRAY
67249: PPUSH
67250: LD_VAR 0 7
67254: PUSH
67255: LD_INT 2
67257: ARRAY
67258: PPUSH
67259: LD_VAR 0 3
67263: PPUSH
67264: CALL_OW 48
// result := IsPlaced ( unit ) ;
67268: LD_ADDR_VAR 0 4
67272: PUSH
67273: LD_VAR 0 1
67277: PPUSH
67278: CALL_OW 305
67282: ST_TO_ADDR
// exit ;
67283: POP
67284: POP
67285: GO 67291
// end ; end ;
67287: GO 67166
67289: POP
67290: POP
// end ;
67291: LD_VAR 0 4
67295: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67296: LD_INT 0
67298: PPUSH
67299: PPUSH
67300: PPUSH
// if not side or side > 8 then
67301: LD_VAR 0 1
67305: NOT
67306: PUSH
67307: LD_VAR 0 1
67311: PUSH
67312: LD_INT 8
67314: GREATER
67315: OR
67316: IFFALSE 67320
// exit ;
67318: GO 67507
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67320: LD_ADDR_VAR 0 4
67324: PUSH
67325: LD_INT 22
67327: PUSH
67328: LD_VAR 0 1
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 21
67339: PUSH
67340: LD_INT 3
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PPUSH
67351: CALL_OW 69
67355: ST_TO_ADDR
// if not tmp then
67356: LD_VAR 0 4
67360: NOT
67361: IFFALSE 67365
// exit ;
67363: GO 67507
// enable_addtolog := true ;
67365: LD_ADDR_OWVAR 81
67369: PUSH
67370: LD_INT 1
67372: ST_TO_ADDR
// AddToLog ( [ ) ;
67373: LD_STRING [
67375: PPUSH
67376: CALL_OW 561
// for i in tmp do
67380: LD_ADDR_VAR 0 3
67384: PUSH
67385: LD_VAR 0 4
67389: PUSH
67390: FOR_IN
67391: IFFALSE 67498
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67393: LD_STRING [
67395: PUSH
67396: LD_VAR 0 3
67400: PPUSH
67401: CALL_OW 266
67405: STR
67406: PUSH
67407: LD_STRING , 
67409: STR
67410: PUSH
67411: LD_VAR 0 3
67415: PPUSH
67416: CALL_OW 250
67420: STR
67421: PUSH
67422: LD_STRING , 
67424: STR
67425: PUSH
67426: LD_VAR 0 3
67430: PPUSH
67431: CALL_OW 251
67435: STR
67436: PUSH
67437: LD_STRING , 
67439: STR
67440: PUSH
67441: LD_VAR 0 3
67445: PPUSH
67446: CALL_OW 254
67450: STR
67451: PUSH
67452: LD_STRING , 
67454: STR
67455: PUSH
67456: LD_VAR 0 3
67460: PPUSH
67461: LD_INT 1
67463: PPUSH
67464: CALL_OW 268
67468: STR
67469: PUSH
67470: LD_STRING , 
67472: STR
67473: PUSH
67474: LD_VAR 0 3
67478: PPUSH
67479: LD_INT 2
67481: PPUSH
67482: CALL_OW 268
67486: STR
67487: PUSH
67488: LD_STRING ],
67490: STR
67491: PPUSH
67492: CALL_OW 561
// end ;
67496: GO 67390
67498: POP
67499: POP
// AddToLog ( ]; ) ;
67500: LD_STRING ];
67502: PPUSH
67503: CALL_OW 561
// end ;
67507: LD_VAR 0 2
67511: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67512: LD_INT 0
67514: PPUSH
67515: PPUSH
67516: PPUSH
67517: PPUSH
67518: PPUSH
// if not area or not rate or not max then
67519: LD_VAR 0 1
67523: NOT
67524: PUSH
67525: LD_VAR 0 2
67529: NOT
67530: OR
67531: PUSH
67532: LD_VAR 0 4
67536: NOT
67537: OR
67538: IFFALSE 67542
// exit ;
67540: GO 67734
// while 1 do
67542: LD_INT 1
67544: IFFALSE 67734
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67546: LD_ADDR_VAR 0 9
67550: PUSH
67551: LD_VAR 0 1
67555: PPUSH
67556: LD_INT 1
67558: PPUSH
67559: CALL_OW 287
67563: PUSH
67564: LD_INT 10
67566: MUL
67567: ST_TO_ADDR
// r := rate / 10 ;
67568: LD_ADDR_VAR 0 7
67572: PUSH
67573: LD_VAR 0 2
67577: PUSH
67578: LD_INT 10
67580: DIVREAL
67581: ST_TO_ADDR
// time := 1 1$00 ;
67582: LD_ADDR_VAR 0 8
67586: PUSH
67587: LD_INT 2100
67589: ST_TO_ADDR
// if amount < min then
67590: LD_VAR 0 9
67594: PUSH
67595: LD_VAR 0 3
67599: LESS
67600: IFFALSE 67618
// r := r * 2 else
67602: LD_ADDR_VAR 0 7
67606: PUSH
67607: LD_VAR 0 7
67611: PUSH
67612: LD_INT 2
67614: MUL
67615: ST_TO_ADDR
67616: GO 67644
// if amount > max then
67618: LD_VAR 0 9
67622: PUSH
67623: LD_VAR 0 4
67627: GREATER
67628: IFFALSE 67644
// r := r / 2 ;
67630: LD_ADDR_VAR 0 7
67634: PUSH
67635: LD_VAR 0 7
67639: PUSH
67640: LD_INT 2
67642: DIVREAL
67643: ST_TO_ADDR
// time := time / r ;
67644: LD_ADDR_VAR 0 8
67648: PUSH
67649: LD_VAR 0 8
67653: PUSH
67654: LD_VAR 0 7
67658: DIVREAL
67659: ST_TO_ADDR
// if time < 0 then
67660: LD_VAR 0 8
67664: PUSH
67665: LD_INT 0
67667: LESS
67668: IFFALSE 67685
// time := time * - 1 ;
67670: LD_ADDR_VAR 0 8
67674: PUSH
67675: LD_VAR 0 8
67679: PUSH
67680: LD_INT 1
67682: NEG
67683: MUL
67684: ST_TO_ADDR
// wait ( time ) ;
67685: LD_VAR 0 8
67689: PPUSH
67690: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67694: LD_INT 35
67696: PPUSH
67697: LD_INT 875
67699: PPUSH
67700: CALL_OW 12
67704: PPUSH
67705: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67709: LD_INT 1
67711: PPUSH
67712: LD_INT 5
67714: PPUSH
67715: CALL_OW 12
67719: PPUSH
67720: LD_VAR 0 1
67724: PPUSH
67725: LD_INT 1
67727: PPUSH
67728: CALL_OW 55
// end ;
67732: GO 67542
// end ;
67734: LD_VAR 0 5
67738: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67739: LD_INT 0
67741: PPUSH
67742: PPUSH
67743: PPUSH
67744: PPUSH
67745: PPUSH
67746: PPUSH
67747: PPUSH
67748: PPUSH
// if not turrets or not factories then
67749: LD_VAR 0 1
67753: NOT
67754: PUSH
67755: LD_VAR 0 2
67759: NOT
67760: OR
67761: IFFALSE 67765
// exit ;
67763: GO 68072
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67765: LD_ADDR_VAR 0 10
67769: PUSH
67770: LD_INT 5
67772: PUSH
67773: LD_INT 6
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 2
67782: PUSH
67783: LD_INT 4
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 3
67792: PUSH
67793: LD_INT 5
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 24
67807: PUSH
67808: LD_INT 25
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 23
67817: PUSH
67818: LD_INT 27
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 42
67831: PUSH
67832: LD_INT 43
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 44
67841: PUSH
67842: LD_INT 46
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 45
67851: PUSH
67852: LD_INT 47
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: LIST
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: LIST
67868: ST_TO_ADDR
// result := [ ] ;
67869: LD_ADDR_VAR 0 3
67873: PUSH
67874: EMPTY
67875: ST_TO_ADDR
// for i in turrets do
67876: LD_ADDR_VAR 0 4
67880: PUSH
67881: LD_VAR 0 1
67885: PUSH
67886: FOR_IN
67887: IFFALSE 68070
// begin nat := GetNation ( i ) ;
67889: LD_ADDR_VAR 0 7
67893: PUSH
67894: LD_VAR 0 4
67898: PPUSH
67899: CALL_OW 248
67903: ST_TO_ADDR
// weapon := 0 ;
67904: LD_ADDR_VAR 0 8
67908: PUSH
67909: LD_INT 0
67911: ST_TO_ADDR
// if not nat then
67912: LD_VAR 0 7
67916: NOT
67917: IFFALSE 67921
// continue ;
67919: GO 67886
// for j in list [ nat ] do
67921: LD_ADDR_VAR 0 5
67925: PUSH
67926: LD_VAR 0 10
67930: PUSH
67931: LD_VAR 0 7
67935: ARRAY
67936: PUSH
67937: FOR_IN
67938: IFFALSE 67979
// if GetBWeapon ( i ) = j [ 1 ] then
67940: LD_VAR 0 4
67944: PPUSH
67945: CALL_OW 269
67949: PUSH
67950: LD_VAR 0 5
67954: PUSH
67955: LD_INT 1
67957: ARRAY
67958: EQUAL
67959: IFFALSE 67977
// begin weapon := j [ 2 ] ;
67961: LD_ADDR_VAR 0 8
67965: PUSH
67966: LD_VAR 0 5
67970: PUSH
67971: LD_INT 2
67973: ARRAY
67974: ST_TO_ADDR
// break ;
67975: GO 67979
// end ;
67977: GO 67937
67979: POP
67980: POP
// if not weapon then
67981: LD_VAR 0 8
67985: NOT
67986: IFFALSE 67990
// continue ;
67988: GO 67886
// for k in factories do
67990: LD_ADDR_VAR 0 6
67994: PUSH
67995: LD_VAR 0 2
67999: PUSH
68000: FOR_IN
68001: IFFALSE 68066
// begin weapons := AvailableWeaponList ( k ) ;
68003: LD_ADDR_VAR 0 9
68007: PUSH
68008: LD_VAR 0 6
68012: PPUSH
68013: CALL_OW 478
68017: ST_TO_ADDR
// if not weapons then
68018: LD_VAR 0 9
68022: NOT
68023: IFFALSE 68027
// continue ;
68025: GO 68000
// if weapon in weapons then
68027: LD_VAR 0 8
68031: PUSH
68032: LD_VAR 0 9
68036: IN
68037: IFFALSE 68064
// begin result := [ i , weapon ] ;
68039: LD_ADDR_VAR 0 3
68043: PUSH
68044: LD_VAR 0 4
68048: PUSH
68049: LD_VAR 0 8
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: ST_TO_ADDR
// exit ;
68058: POP
68059: POP
68060: POP
68061: POP
68062: GO 68072
// end ; end ;
68064: GO 68000
68066: POP
68067: POP
// end ;
68068: GO 67886
68070: POP
68071: POP
// end ;
68072: LD_VAR 0 3
68076: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68077: LD_INT 0
68079: PPUSH
// if not side or side > 8 then
68080: LD_VAR 0 3
68084: NOT
68085: PUSH
68086: LD_VAR 0 3
68090: PUSH
68091: LD_INT 8
68093: GREATER
68094: OR
68095: IFFALSE 68099
// exit ;
68097: GO 68158
// if not range then
68099: LD_VAR 0 4
68103: NOT
68104: IFFALSE 68115
// range := - 12 ;
68106: LD_ADDR_VAR 0 4
68110: PUSH
68111: LD_INT 12
68113: NEG
68114: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68115: LD_VAR 0 1
68119: PPUSH
68120: LD_VAR 0 2
68124: PPUSH
68125: LD_VAR 0 3
68129: PPUSH
68130: LD_VAR 0 4
68134: PPUSH
68135: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68139: LD_VAR 0 1
68143: PPUSH
68144: LD_VAR 0 2
68148: PPUSH
68149: LD_VAR 0 3
68153: PPUSH
68154: CALL_OW 331
// end ;
68158: LD_VAR 0 5
68162: RET
// export function Video ( mode ) ; begin
68163: LD_INT 0
68165: PPUSH
// ingame_video = mode ;
68166: LD_ADDR_OWVAR 52
68170: PUSH
68171: LD_VAR 0 1
68175: ST_TO_ADDR
// interface_hidden = mode ;
68176: LD_ADDR_OWVAR 54
68180: PUSH
68181: LD_VAR 0 1
68185: ST_TO_ADDR
// end ;
68186: LD_VAR 0 2
68190: RET
// export function Join ( array , element ) ; begin
68191: LD_INT 0
68193: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68194: LD_ADDR_VAR 0 3
68198: PUSH
68199: LD_VAR 0 1
68203: PPUSH
68204: LD_VAR 0 1
68208: PUSH
68209: LD_INT 1
68211: PLUS
68212: PPUSH
68213: LD_VAR 0 2
68217: PPUSH
68218: CALL_OW 1
68222: ST_TO_ADDR
// end ;
68223: LD_VAR 0 3
68227: RET
// export function JoinUnion ( array , element ) ; begin
68228: LD_INT 0
68230: PPUSH
// result := array union element ;
68231: LD_ADDR_VAR 0 3
68235: PUSH
68236: LD_VAR 0 1
68240: PUSH
68241: LD_VAR 0 2
68245: UNION
68246: ST_TO_ADDR
// end ;
68247: LD_VAR 0 3
68251: RET
// export function GetBehemoths ( side ) ; begin
68252: LD_INT 0
68254: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68255: LD_ADDR_VAR 0 2
68259: PUSH
68260: LD_INT 22
68262: PUSH
68263: LD_VAR 0 1
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 31
68274: PUSH
68275: LD_INT 25
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PPUSH
68286: CALL_OW 69
68290: ST_TO_ADDR
// end ;
68291: LD_VAR 0 2
68295: RET
// export function Shuffle ( array ) ; var i , index ; begin
68296: LD_INT 0
68298: PPUSH
68299: PPUSH
68300: PPUSH
// result := [ ] ;
68301: LD_ADDR_VAR 0 2
68305: PUSH
68306: EMPTY
68307: ST_TO_ADDR
// if not array then
68308: LD_VAR 0 1
68312: NOT
68313: IFFALSE 68317
// exit ;
68315: GO 68416
// Randomize ;
68317: CALL_OW 10
// for i = array downto 1 do
68321: LD_ADDR_VAR 0 3
68325: PUSH
68326: DOUBLE
68327: LD_VAR 0 1
68331: INC
68332: ST_TO_ADDR
68333: LD_INT 1
68335: PUSH
68336: FOR_DOWNTO
68337: IFFALSE 68414
// begin index := rand ( 1 , array ) ;
68339: LD_ADDR_VAR 0 4
68343: PUSH
68344: LD_INT 1
68346: PPUSH
68347: LD_VAR 0 1
68351: PPUSH
68352: CALL_OW 12
68356: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68357: LD_ADDR_VAR 0 2
68361: PUSH
68362: LD_VAR 0 2
68366: PPUSH
68367: LD_VAR 0 2
68371: PUSH
68372: LD_INT 1
68374: PLUS
68375: PPUSH
68376: LD_VAR 0 1
68380: PUSH
68381: LD_VAR 0 4
68385: ARRAY
68386: PPUSH
68387: CALL_OW 2
68391: ST_TO_ADDR
// array := Delete ( array , index ) ;
68392: LD_ADDR_VAR 0 1
68396: PUSH
68397: LD_VAR 0 1
68401: PPUSH
68402: LD_VAR 0 4
68406: PPUSH
68407: CALL_OW 3
68411: ST_TO_ADDR
// end ;
68412: GO 68336
68414: POP
68415: POP
// end ;
68416: LD_VAR 0 2
68420: RET
// export function GetBaseMaterials ( base ) ; begin
68421: LD_INT 0
68423: PPUSH
// result := [ 0 , 0 , 0 ] ;
68424: LD_ADDR_VAR 0 2
68428: PUSH
68429: LD_INT 0
68431: PUSH
68432: LD_INT 0
68434: PUSH
68435: LD_INT 0
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: LIST
68442: ST_TO_ADDR
// if not base then
68443: LD_VAR 0 1
68447: NOT
68448: IFFALSE 68452
// exit ;
68450: GO 68501
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68452: LD_ADDR_VAR 0 2
68456: PUSH
68457: LD_VAR 0 1
68461: PPUSH
68462: LD_INT 1
68464: PPUSH
68465: CALL_OW 275
68469: PUSH
68470: LD_VAR 0 1
68474: PPUSH
68475: LD_INT 2
68477: PPUSH
68478: CALL_OW 275
68482: PUSH
68483: LD_VAR 0 1
68487: PPUSH
68488: LD_INT 3
68490: PPUSH
68491: CALL_OW 275
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: LIST
68500: ST_TO_ADDR
// end ;
68501: LD_VAR 0 2
68505: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68506: LD_INT 0
68508: PPUSH
68509: PPUSH
// result := array ;
68510: LD_ADDR_VAR 0 3
68514: PUSH
68515: LD_VAR 0 1
68519: ST_TO_ADDR
// if size > 0 then
68520: LD_VAR 0 2
68524: PUSH
68525: LD_INT 0
68527: GREATER
68528: IFFALSE 68574
// for i := array downto size do
68530: LD_ADDR_VAR 0 4
68534: PUSH
68535: DOUBLE
68536: LD_VAR 0 1
68540: INC
68541: ST_TO_ADDR
68542: LD_VAR 0 2
68546: PUSH
68547: FOR_DOWNTO
68548: IFFALSE 68572
// result := Delete ( result , result ) ;
68550: LD_ADDR_VAR 0 3
68554: PUSH
68555: LD_VAR 0 3
68559: PPUSH
68560: LD_VAR 0 3
68564: PPUSH
68565: CALL_OW 3
68569: ST_TO_ADDR
68570: GO 68547
68572: POP
68573: POP
// end ;
68574: LD_VAR 0 3
68578: RET
// export function ComExit ( unit ) ; var tmp ; begin
68579: LD_INT 0
68581: PPUSH
68582: PPUSH
// if not IsInUnit ( unit ) then
68583: LD_VAR 0 1
68587: PPUSH
68588: CALL_OW 310
68592: NOT
68593: IFFALSE 68597
// exit ;
68595: GO 68657
// tmp := IsInUnit ( unit ) ;
68597: LD_ADDR_VAR 0 3
68601: PUSH
68602: LD_VAR 0 1
68606: PPUSH
68607: CALL_OW 310
68611: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68612: LD_VAR 0 3
68616: PPUSH
68617: CALL_OW 247
68621: PUSH
68622: LD_INT 2
68624: EQUAL
68625: IFFALSE 68638
// ComExitVehicle ( unit ) else
68627: LD_VAR 0 1
68631: PPUSH
68632: CALL_OW 121
68636: GO 68647
// ComExitBuilding ( unit ) ;
68638: LD_VAR 0 1
68642: PPUSH
68643: CALL_OW 122
// result := tmp ;
68647: LD_ADDR_VAR 0 2
68651: PUSH
68652: LD_VAR 0 3
68656: ST_TO_ADDR
// end ;
68657: LD_VAR 0 2
68661: RET
// export function ResetHc ; begin
68662: LD_INT 0
68664: PPUSH
// InitHc ;
68665: CALL_OW 19
// hc_importance := 0 ;
68669: LD_ADDR_OWVAR 32
68673: PUSH
68674: LD_INT 0
68676: ST_TO_ADDR
// end ; end_of_file
68677: LD_VAR 0 1
68681: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
68682: LD_VAR 0 2
68686: PUSH
68687: LD_INT 100
68689: EQUAL
68690: IFFALSE 69639
// begin if not StreamModeActive then
68692: LD_EXP 107
68696: NOT
68697: IFFALSE 68707
// StreamModeActive := true ;
68699: LD_ADDR_EXP 107
68703: PUSH
68704: LD_INT 1
68706: ST_TO_ADDR
// if p3 = 0 then
68707: LD_VAR 0 3
68711: PUSH
68712: LD_INT 0
68714: EQUAL
68715: IFFALSE 68721
// InitStreamMode ;
68717: CALL 69872 0 0
// if p3 = 1 then
68721: LD_VAR 0 3
68725: PUSH
68726: LD_INT 1
68728: EQUAL
68729: IFFALSE 68739
// sRocket := true ;
68731: LD_ADDR_EXP 112
68735: PUSH
68736: LD_INT 1
68738: ST_TO_ADDR
// if p3 = 2 then
68739: LD_VAR 0 3
68743: PUSH
68744: LD_INT 2
68746: EQUAL
68747: IFFALSE 68757
// sSpeed := true ;
68749: LD_ADDR_EXP 111
68753: PUSH
68754: LD_INT 1
68756: ST_TO_ADDR
// if p3 = 3 then
68757: LD_VAR 0 3
68761: PUSH
68762: LD_INT 3
68764: EQUAL
68765: IFFALSE 68775
// sEngine := true ;
68767: LD_ADDR_EXP 113
68771: PUSH
68772: LD_INT 1
68774: ST_TO_ADDR
// if p3 = 4 then
68775: LD_VAR 0 3
68779: PUSH
68780: LD_INT 4
68782: EQUAL
68783: IFFALSE 68793
// sSpec := true ;
68785: LD_ADDR_EXP 110
68789: PUSH
68790: LD_INT 1
68792: ST_TO_ADDR
// if p3 = 5 then
68793: LD_VAR 0 3
68797: PUSH
68798: LD_INT 5
68800: EQUAL
68801: IFFALSE 68811
// sLevel := true ;
68803: LD_ADDR_EXP 114
68807: PUSH
68808: LD_INT 1
68810: ST_TO_ADDR
// if p3 = 6 then
68811: LD_VAR 0 3
68815: PUSH
68816: LD_INT 6
68818: EQUAL
68819: IFFALSE 68829
// sArmoury := true ;
68821: LD_ADDR_EXP 115
68825: PUSH
68826: LD_INT 1
68828: ST_TO_ADDR
// if p3 = 7 then
68829: LD_VAR 0 3
68833: PUSH
68834: LD_INT 7
68836: EQUAL
68837: IFFALSE 68847
// sRadar := true ;
68839: LD_ADDR_EXP 116
68843: PUSH
68844: LD_INT 1
68846: ST_TO_ADDR
// if p3 = 8 then
68847: LD_VAR 0 3
68851: PUSH
68852: LD_INT 8
68854: EQUAL
68855: IFFALSE 68865
// sBunker := true ;
68857: LD_ADDR_EXP 117
68861: PUSH
68862: LD_INT 1
68864: ST_TO_ADDR
// if p3 = 9 then
68865: LD_VAR 0 3
68869: PUSH
68870: LD_INT 9
68872: EQUAL
68873: IFFALSE 68883
// sHack := true ;
68875: LD_ADDR_EXP 118
68879: PUSH
68880: LD_INT 1
68882: ST_TO_ADDR
// if p3 = 10 then
68883: LD_VAR 0 3
68887: PUSH
68888: LD_INT 10
68890: EQUAL
68891: IFFALSE 68901
// sFire := true ;
68893: LD_ADDR_EXP 119
68897: PUSH
68898: LD_INT 1
68900: ST_TO_ADDR
// if p3 = 11 then
68901: LD_VAR 0 3
68905: PUSH
68906: LD_INT 11
68908: EQUAL
68909: IFFALSE 68919
// sRefresh := true ;
68911: LD_ADDR_EXP 120
68915: PUSH
68916: LD_INT 1
68918: ST_TO_ADDR
// if p3 = 12 then
68919: LD_VAR 0 3
68923: PUSH
68924: LD_INT 12
68926: EQUAL
68927: IFFALSE 68937
// sExp := true ;
68929: LD_ADDR_EXP 121
68933: PUSH
68934: LD_INT 1
68936: ST_TO_ADDR
// if p3 = 13 then
68937: LD_VAR 0 3
68941: PUSH
68942: LD_INT 13
68944: EQUAL
68945: IFFALSE 68955
// sDepot := true ;
68947: LD_ADDR_EXP 122
68951: PUSH
68952: LD_INT 1
68954: ST_TO_ADDR
// if p3 = 14 then
68955: LD_VAR 0 3
68959: PUSH
68960: LD_INT 14
68962: EQUAL
68963: IFFALSE 68973
// sFlag := true ;
68965: LD_ADDR_EXP 123
68969: PUSH
68970: LD_INT 1
68972: ST_TO_ADDR
// if p3 = 15 then
68973: LD_VAR 0 3
68977: PUSH
68978: LD_INT 15
68980: EQUAL
68981: IFFALSE 68991
// sKamikadze := true ;
68983: LD_ADDR_EXP 131
68987: PUSH
68988: LD_INT 1
68990: ST_TO_ADDR
// if p3 = 16 then
68991: LD_VAR 0 3
68995: PUSH
68996: LD_INT 16
68998: EQUAL
68999: IFFALSE 69009
// sTroll := true ;
69001: LD_ADDR_EXP 132
69005: PUSH
69006: LD_INT 1
69008: ST_TO_ADDR
// if p3 = 17 then
69009: LD_VAR 0 3
69013: PUSH
69014: LD_INT 17
69016: EQUAL
69017: IFFALSE 69027
// sSlow := true ;
69019: LD_ADDR_EXP 133
69023: PUSH
69024: LD_INT 1
69026: ST_TO_ADDR
// if p3 = 18 then
69027: LD_VAR 0 3
69031: PUSH
69032: LD_INT 18
69034: EQUAL
69035: IFFALSE 69045
// sLack := true ;
69037: LD_ADDR_EXP 134
69041: PUSH
69042: LD_INT 1
69044: ST_TO_ADDR
// if p3 = 19 then
69045: LD_VAR 0 3
69049: PUSH
69050: LD_INT 19
69052: EQUAL
69053: IFFALSE 69063
// sTank := true ;
69055: LD_ADDR_EXP 136
69059: PUSH
69060: LD_INT 1
69062: ST_TO_ADDR
// if p3 = 20 then
69063: LD_VAR 0 3
69067: PUSH
69068: LD_INT 20
69070: EQUAL
69071: IFFALSE 69081
// sRemote := true ;
69073: LD_ADDR_EXP 137
69077: PUSH
69078: LD_INT 1
69080: ST_TO_ADDR
// if p3 = 21 then
69081: LD_VAR 0 3
69085: PUSH
69086: LD_INT 21
69088: EQUAL
69089: IFFALSE 69099
// sPowell := true ;
69091: LD_ADDR_EXP 138
69095: PUSH
69096: LD_INT 1
69098: ST_TO_ADDR
// if p3 = 22 then
69099: LD_VAR 0 3
69103: PUSH
69104: LD_INT 22
69106: EQUAL
69107: IFFALSE 69117
// sTeleport := true ;
69109: LD_ADDR_EXP 141
69113: PUSH
69114: LD_INT 1
69116: ST_TO_ADDR
// if p3 = 23 then
69117: LD_VAR 0 3
69121: PUSH
69122: LD_INT 23
69124: EQUAL
69125: IFFALSE 69135
// sOilTower := true ;
69127: LD_ADDR_EXP 143
69131: PUSH
69132: LD_INT 1
69134: ST_TO_ADDR
// if p3 = 24 then
69135: LD_VAR 0 3
69139: PUSH
69140: LD_INT 24
69142: EQUAL
69143: IFFALSE 69153
// sShovel := true ;
69145: LD_ADDR_EXP 144
69149: PUSH
69150: LD_INT 1
69152: ST_TO_ADDR
// if p3 = 25 then
69153: LD_VAR 0 3
69157: PUSH
69158: LD_INT 25
69160: EQUAL
69161: IFFALSE 69171
// sSheik := true ;
69163: LD_ADDR_EXP 145
69167: PUSH
69168: LD_INT 1
69170: ST_TO_ADDR
// if p3 = 26 then
69171: LD_VAR 0 3
69175: PUSH
69176: LD_INT 26
69178: EQUAL
69179: IFFALSE 69189
// sEarthquake := true ;
69181: LD_ADDR_EXP 147
69185: PUSH
69186: LD_INT 1
69188: ST_TO_ADDR
// if p3 = 27 then
69189: LD_VAR 0 3
69193: PUSH
69194: LD_INT 27
69196: EQUAL
69197: IFFALSE 69207
// sAI := true ;
69199: LD_ADDR_EXP 148
69203: PUSH
69204: LD_INT 1
69206: ST_TO_ADDR
// if p3 = 28 then
69207: LD_VAR 0 3
69211: PUSH
69212: LD_INT 28
69214: EQUAL
69215: IFFALSE 69225
// sCargo := true ;
69217: LD_ADDR_EXP 151
69221: PUSH
69222: LD_INT 1
69224: ST_TO_ADDR
// if p3 = 29 then
69225: LD_VAR 0 3
69229: PUSH
69230: LD_INT 29
69232: EQUAL
69233: IFFALSE 69243
// sDLaser := true ;
69235: LD_ADDR_EXP 152
69239: PUSH
69240: LD_INT 1
69242: ST_TO_ADDR
// if p3 = 30 then
69243: LD_VAR 0 3
69247: PUSH
69248: LD_INT 30
69250: EQUAL
69251: IFFALSE 69261
// sExchange := true ;
69253: LD_ADDR_EXP 153
69257: PUSH
69258: LD_INT 1
69260: ST_TO_ADDR
// if p3 = 31 then
69261: LD_VAR 0 3
69265: PUSH
69266: LD_INT 31
69268: EQUAL
69269: IFFALSE 69279
// sFac := true ;
69271: LD_ADDR_EXP 154
69275: PUSH
69276: LD_INT 1
69278: ST_TO_ADDR
// if p3 = 32 then
69279: LD_VAR 0 3
69283: PUSH
69284: LD_INT 32
69286: EQUAL
69287: IFFALSE 69297
// sPower := true ;
69289: LD_ADDR_EXP 155
69293: PUSH
69294: LD_INT 1
69296: ST_TO_ADDR
// if p3 = 33 then
69297: LD_VAR 0 3
69301: PUSH
69302: LD_INT 33
69304: EQUAL
69305: IFFALSE 69315
// sRandom := true ;
69307: LD_ADDR_EXP 156
69311: PUSH
69312: LD_INT 1
69314: ST_TO_ADDR
// if p3 = 34 then
69315: LD_VAR 0 3
69319: PUSH
69320: LD_INT 34
69322: EQUAL
69323: IFFALSE 69333
// sShield := true ;
69325: LD_ADDR_EXP 157
69329: PUSH
69330: LD_INT 1
69332: ST_TO_ADDR
// if p3 = 35 then
69333: LD_VAR 0 3
69337: PUSH
69338: LD_INT 35
69340: EQUAL
69341: IFFALSE 69351
// sTime := true ;
69343: LD_ADDR_EXP 158
69347: PUSH
69348: LD_INT 1
69350: ST_TO_ADDR
// if p3 = 36 then
69351: LD_VAR 0 3
69355: PUSH
69356: LD_INT 36
69358: EQUAL
69359: IFFALSE 69369
// sTools := true ;
69361: LD_ADDR_EXP 159
69365: PUSH
69366: LD_INT 1
69368: ST_TO_ADDR
// if p3 = 101 then
69369: LD_VAR 0 3
69373: PUSH
69374: LD_INT 101
69376: EQUAL
69377: IFFALSE 69387
// sSold := true ;
69379: LD_ADDR_EXP 124
69383: PUSH
69384: LD_INT 1
69386: ST_TO_ADDR
// if p3 = 102 then
69387: LD_VAR 0 3
69391: PUSH
69392: LD_INT 102
69394: EQUAL
69395: IFFALSE 69405
// sDiff := true ;
69397: LD_ADDR_EXP 125
69401: PUSH
69402: LD_INT 1
69404: ST_TO_ADDR
// if p3 = 103 then
69405: LD_VAR 0 3
69409: PUSH
69410: LD_INT 103
69412: EQUAL
69413: IFFALSE 69423
// sFog := true ;
69415: LD_ADDR_EXP 128
69419: PUSH
69420: LD_INT 1
69422: ST_TO_ADDR
// if p3 = 104 then
69423: LD_VAR 0 3
69427: PUSH
69428: LD_INT 104
69430: EQUAL
69431: IFFALSE 69441
// sReset := true ;
69433: LD_ADDR_EXP 129
69437: PUSH
69438: LD_INT 1
69440: ST_TO_ADDR
// if p3 = 105 then
69441: LD_VAR 0 3
69445: PUSH
69446: LD_INT 105
69448: EQUAL
69449: IFFALSE 69459
// sSun := true ;
69451: LD_ADDR_EXP 130
69455: PUSH
69456: LD_INT 1
69458: ST_TO_ADDR
// if p3 = 106 then
69459: LD_VAR 0 3
69463: PUSH
69464: LD_INT 106
69466: EQUAL
69467: IFFALSE 69477
// sTiger := true ;
69469: LD_ADDR_EXP 126
69473: PUSH
69474: LD_INT 1
69476: ST_TO_ADDR
// if p3 = 107 then
69477: LD_VAR 0 3
69481: PUSH
69482: LD_INT 107
69484: EQUAL
69485: IFFALSE 69495
// sBomb := true ;
69487: LD_ADDR_EXP 127
69491: PUSH
69492: LD_INT 1
69494: ST_TO_ADDR
// if p3 = 108 then
69495: LD_VAR 0 3
69499: PUSH
69500: LD_INT 108
69502: EQUAL
69503: IFFALSE 69513
// sWound := true ;
69505: LD_ADDR_EXP 135
69509: PUSH
69510: LD_INT 1
69512: ST_TO_ADDR
// if p3 = 109 then
69513: LD_VAR 0 3
69517: PUSH
69518: LD_INT 109
69520: EQUAL
69521: IFFALSE 69531
// sBetray := true ;
69523: LD_ADDR_EXP 139
69527: PUSH
69528: LD_INT 1
69530: ST_TO_ADDR
// if p3 = 110 then
69531: LD_VAR 0 3
69535: PUSH
69536: LD_INT 110
69538: EQUAL
69539: IFFALSE 69549
// sContamin := true ;
69541: LD_ADDR_EXP 140
69545: PUSH
69546: LD_INT 1
69548: ST_TO_ADDR
// if p3 = 111 then
69549: LD_VAR 0 3
69553: PUSH
69554: LD_INT 111
69556: EQUAL
69557: IFFALSE 69567
// sOil := true ;
69559: LD_ADDR_EXP 142
69563: PUSH
69564: LD_INT 1
69566: ST_TO_ADDR
// if p3 = 112 then
69567: LD_VAR 0 3
69571: PUSH
69572: LD_INT 112
69574: EQUAL
69575: IFFALSE 69585
// sStu := true ;
69577: LD_ADDR_EXP 146
69581: PUSH
69582: LD_INT 1
69584: ST_TO_ADDR
// if p3 = 113 then
69585: LD_VAR 0 3
69589: PUSH
69590: LD_INT 113
69592: EQUAL
69593: IFFALSE 69603
// sBazooka := true ;
69595: LD_ADDR_EXP 149
69599: PUSH
69600: LD_INT 1
69602: ST_TO_ADDR
// if p3 = 114 then
69603: LD_VAR 0 3
69607: PUSH
69608: LD_INT 114
69610: EQUAL
69611: IFFALSE 69621
// sMortar := true ;
69613: LD_ADDR_EXP 150
69617: PUSH
69618: LD_INT 1
69620: ST_TO_ADDR
// if p3 = 115 then
69621: LD_VAR 0 3
69625: PUSH
69626: LD_INT 115
69628: EQUAL
69629: IFFALSE 69639
// sRanger := true ;
69631: LD_ADDR_EXP 160
69635: PUSH
69636: LD_INT 1
69638: ST_TO_ADDR
// end ; if p2 = 101 then
69639: LD_VAR 0 2
69643: PUSH
69644: LD_INT 101
69646: EQUAL
69647: IFFALSE 69850
// begin case p3 of 1 :
69649: LD_VAR 0 3
69653: PUSH
69654: LD_INT 1
69656: DOUBLE
69657: EQUAL
69658: IFTRUE 69662
69660: GO 69669
69662: POP
// hHackUnlimitedResources ; 2 :
69663: CALL 79944 0 0
69667: GO 69850
69669: LD_INT 2
69671: DOUBLE
69672: EQUAL
69673: IFTRUE 69677
69675: GO 69684
69677: POP
// hHackSetLevel10 ; 3 :
69678: CALL 80077 0 0
69682: GO 69850
69684: LD_INT 3
69686: DOUBLE
69687: EQUAL
69688: IFTRUE 69692
69690: GO 69699
69692: POP
// hHackSetLevel10YourUnits ; 4 :
69693: CALL 80162 0 0
69697: GO 69850
69699: LD_INT 4
69701: DOUBLE
69702: EQUAL
69703: IFTRUE 69707
69705: GO 69729
69707: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
69708: LD_VAR 0 4
69712: PPUSH
69713: LD_VAR 0 5
69717: PPUSH
69718: LD_VAR 0 6
69722: PPUSH
69723: CALL 80252 0 3
69727: GO 69850
69729: LD_INT 5
69731: DOUBLE
69732: EQUAL
69733: IFTRUE 69737
69735: GO 69744
69737: POP
// hHackSpawnVehicle ; 6 :
69738: CALL 80313 0 0
69742: GO 69850
69744: LD_INT 6
69746: DOUBLE
69747: EQUAL
69748: IFTRUE 69752
69750: GO 69759
69752: POP
// hHackInvincible ; 7 :
69753: CALL 80859 0 0
69757: GO 69850
69759: LD_INT 7
69761: DOUBLE
69762: EQUAL
69763: IFTRUE 69767
69765: GO 69774
69767: POP
// hHackInvisible ; 8 :
69768: CALL 80970 0 0
69772: GO 69850
69774: LD_INT 8
69776: DOUBLE
69777: EQUAL
69778: IFTRUE 69782
69780: GO 69789
69782: POP
// hHackChangeYourSide ; 9 :
69783: CALL 81027 0 0
69787: GO 69850
69789: LD_INT 9
69791: DOUBLE
69792: EQUAL
69793: IFTRUE 69797
69795: GO 69804
69797: POP
// hHackChangeUnitSide ; 10 :
69798: CALL 81069 0 0
69802: GO 69850
69804: LD_INT 10
69806: DOUBLE
69807: EQUAL
69808: IFTRUE 69812
69810: GO 69819
69812: POP
// hHackFog ; 11 :
69813: CALL 81170 0 0
69817: GO 69850
69819: LD_INT 11
69821: DOUBLE
69822: EQUAL
69823: IFTRUE 69827
69825: GO 69834
69827: POP
// hHackApeman ; 12 :
69828: CALL 81185 0 0
69832: GO 69850
69834: LD_INT 12
69836: DOUBLE
69837: EQUAL
69838: IFTRUE 69842
69840: GO 69849
69842: POP
// hHackBoom ; end ;
69843: CALL 81270 0 0
69847: GO 69850
69849: POP
// end ; end ;
69850: PPOPN 6
69852: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
69853: GO 69855
69855: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69856: LD_STRING initStreamRollete();
69858: PPUSH
69859: CALL_OW 559
// InitStreamMode ;
69863: CALL 69872 0 0
// DefineStreamItems ( ) ;
69867: CALL 70312 0 0
// end ;
69871: END
// function InitStreamMode ; begin
69872: LD_INT 0
69874: PPUSH
// streamModeActive := false ;
69875: LD_ADDR_EXP 107
69879: PUSH
69880: LD_INT 0
69882: ST_TO_ADDR
// normalCounter := 36 ;
69883: LD_ADDR_EXP 108
69887: PUSH
69888: LD_INT 36
69890: ST_TO_ADDR
// hardcoreCounter := 16 ;
69891: LD_ADDR_EXP 109
69895: PUSH
69896: LD_INT 16
69898: ST_TO_ADDR
// sRocket := false ;
69899: LD_ADDR_EXP 112
69903: PUSH
69904: LD_INT 0
69906: ST_TO_ADDR
// sSpeed := false ;
69907: LD_ADDR_EXP 111
69911: PUSH
69912: LD_INT 0
69914: ST_TO_ADDR
// sEngine := false ;
69915: LD_ADDR_EXP 113
69919: PUSH
69920: LD_INT 0
69922: ST_TO_ADDR
// sSpec := false ;
69923: LD_ADDR_EXP 110
69927: PUSH
69928: LD_INT 0
69930: ST_TO_ADDR
// sLevel := false ;
69931: LD_ADDR_EXP 114
69935: PUSH
69936: LD_INT 0
69938: ST_TO_ADDR
// sArmoury := false ;
69939: LD_ADDR_EXP 115
69943: PUSH
69944: LD_INT 0
69946: ST_TO_ADDR
// sRadar := false ;
69947: LD_ADDR_EXP 116
69951: PUSH
69952: LD_INT 0
69954: ST_TO_ADDR
// sBunker := false ;
69955: LD_ADDR_EXP 117
69959: PUSH
69960: LD_INT 0
69962: ST_TO_ADDR
// sHack := false ;
69963: LD_ADDR_EXP 118
69967: PUSH
69968: LD_INT 0
69970: ST_TO_ADDR
// sFire := false ;
69971: LD_ADDR_EXP 119
69975: PUSH
69976: LD_INT 0
69978: ST_TO_ADDR
// sRefresh := false ;
69979: LD_ADDR_EXP 120
69983: PUSH
69984: LD_INT 0
69986: ST_TO_ADDR
// sExp := false ;
69987: LD_ADDR_EXP 121
69991: PUSH
69992: LD_INT 0
69994: ST_TO_ADDR
// sDepot := false ;
69995: LD_ADDR_EXP 122
69999: PUSH
70000: LD_INT 0
70002: ST_TO_ADDR
// sFlag := false ;
70003: LD_ADDR_EXP 123
70007: PUSH
70008: LD_INT 0
70010: ST_TO_ADDR
// sKamikadze := false ;
70011: LD_ADDR_EXP 131
70015: PUSH
70016: LD_INT 0
70018: ST_TO_ADDR
// sTroll := false ;
70019: LD_ADDR_EXP 132
70023: PUSH
70024: LD_INT 0
70026: ST_TO_ADDR
// sSlow := false ;
70027: LD_ADDR_EXP 133
70031: PUSH
70032: LD_INT 0
70034: ST_TO_ADDR
// sLack := false ;
70035: LD_ADDR_EXP 134
70039: PUSH
70040: LD_INT 0
70042: ST_TO_ADDR
// sTank := false ;
70043: LD_ADDR_EXP 136
70047: PUSH
70048: LD_INT 0
70050: ST_TO_ADDR
// sRemote := false ;
70051: LD_ADDR_EXP 137
70055: PUSH
70056: LD_INT 0
70058: ST_TO_ADDR
// sPowell := false ;
70059: LD_ADDR_EXP 138
70063: PUSH
70064: LD_INT 0
70066: ST_TO_ADDR
// sTeleport := false ;
70067: LD_ADDR_EXP 141
70071: PUSH
70072: LD_INT 0
70074: ST_TO_ADDR
// sOilTower := false ;
70075: LD_ADDR_EXP 143
70079: PUSH
70080: LD_INT 0
70082: ST_TO_ADDR
// sShovel := false ;
70083: LD_ADDR_EXP 144
70087: PUSH
70088: LD_INT 0
70090: ST_TO_ADDR
// sSheik := false ;
70091: LD_ADDR_EXP 145
70095: PUSH
70096: LD_INT 0
70098: ST_TO_ADDR
// sEarthquake := false ;
70099: LD_ADDR_EXP 147
70103: PUSH
70104: LD_INT 0
70106: ST_TO_ADDR
// sAI := false ;
70107: LD_ADDR_EXP 148
70111: PUSH
70112: LD_INT 0
70114: ST_TO_ADDR
// sCargo := false ;
70115: LD_ADDR_EXP 151
70119: PUSH
70120: LD_INT 0
70122: ST_TO_ADDR
// sDLaser := false ;
70123: LD_ADDR_EXP 152
70127: PUSH
70128: LD_INT 0
70130: ST_TO_ADDR
// sExchange := false ;
70131: LD_ADDR_EXP 153
70135: PUSH
70136: LD_INT 0
70138: ST_TO_ADDR
// sFac := false ;
70139: LD_ADDR_EXP 154
70143: PUSH
70144: LD_INT 0
70146: ST_TO_ADDR
// sPower := false ;
70147: LD_ADDR_EXP 155
70151: PUSH
70152: LD_INT 0
70154: ST_TO_ADDR
// sRandom := false ;
70155: LD_ADDR_EXP 156
70159: PUSH
70160: LD_INT 0
70162: ST_TO_ADDR
// sShield := false ;
70163: LD_ADDR_EXP 157
70167: PUSH
70168: LD_INT 0
70170: ST_TO_ADDR
// sTime := false ;
70171: LD_ADDR_EXP 158
70175: PUSH
70176: LD_INT 0
70178: ST_TO_ADDR
// sTools := false ;
70179: LD_ADDR_EXP 159
70183: PUSH
70184: LD_INT 0
70186: ST_TO_ADDR
// sSold := false ;
70187: LD_ADDR_EXP 124
70191: PUSH
70192: LD_INT 0
70194: ST_TO_ADDR
// sDiff := false ;
70195: LD_ADDR_EXP 125
70199: PUSH
70200: LD_INT 0
70202: ST_TO_ADDR
// sFog := false ;
70203: LD_ADDR_EXP 128
70207: PUSH
70208: LD_INT 0
70210: ST_TO_ADDR
// sReset := false ;
70211: LD_ADDR_EXP 129
70215: PUSH
70216: LD_INT 0
70218: ST_TO_ADDR
// sSun := false ;
70219: LD_ADDR_EXP 130
70223: PUSH
70224: LD_INT 0
70226: ST_TO_ADDR
// sTiger := false ;
70227: LD_ADDR_EXP 126
70231: PUSH
70232: LD_INT 0
70234: ST_TO_ADDR
// sBomb := false ;
70235: LD_ADDR_EXP 127
70239: PUSH
70240: LD_INT 0
70242: ST_TO_ADDR
// sWound := false ;
70243: LD_ADDR_EXP 135
70247: PUSH
70248: LD_INT 0
70250: ST_TO_ADDR
// sBetray := false ;
70251: LD_ADDR_EXP 139
70255: PUSH
70256: LD_INT 0
70258: ST_TO_ADDR
// sContamin := false ;
70259: LD_ADDR_EXP 140
70263: PUSH
70264: LD_INT 0
70266: ST_TO_ADDR
// sOil := false ;
70267: LD_ADDR_EXP 142
70271: PUSH
70272: LD_INT 0
70274: ST_TO_ADDR
// sStu := false ;
70275: LD_ADDR_EXP 146
70279: PUSH
70280: LD_INT 0
70282: ST_TO_ADDR
// sBazooka := false ;
70283: LD_ADDR_EXP 149
70287: PUSH
70288: LD_INT 0
70290: ST_TO_ADDR
// sMortar := false ;
70291: LD_ADDR_EXP 150
70295: PUSH
70296: LD_INT 0
70298: ST_TO_ADDR
// sRanger := false ;
70299: LD_ADDR_EXP 160
70303: PUSH
70304: LD_INT 0
70306: ST_TO_ADDR
// end ;
70307: LD_VAR 0 1
70311: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
70312: LD_INT 0
70314: PPUSH
70315: PPUSH
70316: PPUSH
70317: PPUSH
70318: PPUSH
// result := [ ] ;
70319: LD_ADDR_VAR 0 1
70323: PUSH
70324: EMPTY
70325: ST_TO_ADDR
// if campaign_id = 1 then
70326: LD_OWVAR 69
70330: PUSH
70331: LD_INT 1
70333: EQUAL
70334: IFFALSE 73272
// begin case mission_number of 1 :
70336: LD_OWVAR 70
70340: PUSH
70341: LD_INT 1
70343: DOUBLE
70344: EQUAL
70345: IFTRUE 70349
70347: GO 70413
70349: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
70350: LD_ADDR_VAR 0 1
70354: PUSH
70355: LD_INT 2
70357: PUSH
70358: LD_INT 4
70360: PUSH
70361: LD_INT 11
70363: PUSH
70364: LD_INT 12
70366: PUSH
70367: LD_INT 15
70369: PUSH
70370: LD_INT 16
70372: PUSH
70373: LD_INT 22
70375: PUSH
70376: LD_INT 23
70378: PUSH
70379: LD_INT 26
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 101
70395: PUSH
70396: LD_INT 102
70398: PUSH
70399: LD_INT 106
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: LIST
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: ST_TO_ADDR
70411: GO 73270
70413: LD_INT 2
70415: DOUBLE
70416: EQUAL
70417: IFTRUE 70421
70419: GO 70493
70421: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
70422: LD_ADDR_VAR 0 1
70426: PUSH
70427: LD_INT 2
70429: PUSH
70430: LD_INT 4
70432: PUSH
70433: LD_INT 11
70435: PUSH
70436: LD_INT 12
70438: PUSH
70439: LD_INT 15
70441: PUSH
70442: LD_INT 16
70444: PUSH
70445: LD_INT 22
70447: PUSH
70448: LD_INT 23
70450: PUSH
70451: LD_INT 26
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 101
70467: PUSH
70468: LD_INT 102
70470: PUSH
70471: LD_INT 105
70473: PUSH
70474: LD_INT 106
70476: PUSH
70477: LD_INT 108
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: ST_TO_ADDR
70491: GO 73270
70493: LD_INT 3
70495: DOUBLE
70496: EQUAL
70497: IFTRUE 70501
70499: GO 70577
70501: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
70502: LD_ADDR_VAR 0 1
70506: PUSH
70507: LD_INT 2
70509: PUSH
70510: LD_INT 4
70512: PUSH
70513: LD_INT 5
70515: PUSH
70516: LD_INT 11
70518: PUSH
70519: LD_INT 12
70521: PUSH
70522: LD_INT 15
70524: PUSH
70525: LD_INT 16
70527: PUSH
70528: LD_INT 22
70530: PUSH
70531: LD_INT 26
70533: PUSH
70534: LD_INT 36
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 101
70551: PUSH
70552: LD_INT 102
70554: PUSH
70555: LD_INT 105
70557: PUSH
70558: LD_INT 106
70560: PUSH
70561: LD_INT 108
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: ST_TO_ADDR
70575: GO 73270
70577: LD_INT 4
70579: DOUBLE
70580: EQUAL
70581: IFTRUE 70585
70583: GO 70669
70585: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
70586: LD_ADDR_VAR 0 1
70590: PUSH
70591: LD_INT 2
70593: PUSH
70594: LD_INT 4
70596: PUSH
70597: LD_INT 5
70599: PUSH
70600: LD_INT 8
70602: PUSH
70603: LD_INT 11
70605: PUSH
70606: LD_INT 12
70608: PUSH
70609: LD_INT 15
70611: PUSH
70612: LD_INT 16
70614: PUSH
70615: LD_INT 22
70617: PUSH
70618: LD_INT 23
70620: PUSH
70621: LD_INT 26
70623: PUSH
70624: LD_INT 36
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 101
70643: PUSH
70644: LD_INT 102
70646: PUSH
70647: LD_INT 105
70649: PUSH
70650: LD_INT 106
70652: PUSH
70653: LD_INT 108
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: ST_TO_ADDR
70667: GO 73270
70669: LD_INT 5
70671: DOUBLE
70672: EQUAL
70673: IFTRUE 70677
70675: GO 70777
70677: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
70678: LD_ADDR_VAR 0 1
70682: PUSH
70683: LD_INT 2
70685: PUSH
70686: LD_INT 4
70688: PUSH
70689: LD_INT 5
70691: PUSH
70692: LD_INT 6
70694: PUSH
70695: LD_INT 8
70697: PUSH
70698: LD_INT 11
70700: PUSH
70701: LD_INT 12
70703: PUSH
70704: LD_INT 15
70706: PUSH
70707: LD_INT 16
70709: PUSH
70710: LD_INT 22
70712: PUSH
70713: LD_INT 23
70715: PUSH
70716: LD_INT 25
70718: PUSH
70719: LD_INT 26
70721: PUSH
70722: LD_INT 36
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 101
70743: PUSH
70744: LD_INT 102
70746: PUSH
70747: LD_INT 105
70749: PUSH
70750: LD_INT 106
70752: PUSH
70753: LD_INT 108
70755: PUSH
70756: LD_INT 109
70758: PUSH
70759: LD_INT 112
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: ST_TO_ADDR
70775: GO 73270
70777: LD_INT 6
70779: DOUBLE
70780: EQUAL
70781: IFTRUE 70785
70783: GO 70905
70785: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
70786: LD_ADDR_VAR 0 1
70790: PUSH
70791: LD_INT 2
70793: PUSH
70794: LD_INT 4
70796: PUSH
70797: LD_INT 5
70799: PUSH
70800: LD_INT 6
70802: PUSH
70803: LD_INT 8
70805: PUSH
70806: LD_INT 11
70808: PUSH
70809: LD_INT 12
70811: PUSH
70812: LD_INT 15
70814: PUSH
70815: LD_INT 16
70817: PUSH
70818: LD_INT 20
70820: PUSH
70821: LD_INT 21
70823: PUSH
70824: LD_INT 22
70826: PUSH
70827: LD_INT 23
70829: PUSH
70830: LD_INT 25
70832: PUSH
70833: LD_INT 26
70835: PUSH
70836: LD_INT 30
70838: PUSH
70839: LD_INT 31
70841: PUSH
70842: LD_INT 32
70844: PUSH
70845: LD_INT 36
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: PUSH
70869: LD_INT 101
70871: PUSH
70872: LD_INT 102
70874: PUSH
70875: LD_INT 105
70877: PUSH
70878: LD_INT 106
70880: PUSH
70881: LD_INT 108
70883: PUSH
70884: LD_INT 109
70886: PUSH
70887: LD_INT 112
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: ST_TO_ADDR
70903: GO 73270
70905: LD_INT 7
70907: DOUBLE
70908: EQUAL
70909: IFTRUE 70913
70911: GO 71013
70913: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
70914: LD_ADDR_VAR 0 1
70918: PUSH
70919: LD_INT 2
70921: PUSH
70922: LD_INT 4
70924: PUSH
70925: LD_INT 5
70927: PUSH
70928: LD_INT 7
70930: PUSH
70931: LD_INT 11
70933: PUSH
70934: LD_INT 12
70936: PUSH
70937: LD_INT 15
70939: PUSH
70940: LD_INT 16
70942: PUSH
70943: LD_INT 20
70945: PUSH
70946: LD_INT 21
70948: PUSH
70949: LD_INT 22
70951: PUSH
70952: LD_INT 23
70954: PUSH
70955: LD_INT 25
70957: PUSH
70958: LD_INT 26
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 101
70979: PUSH
70980: LD_INT 102
70982: PUSH
70983: LD_INT 103
70985: PUSH
70986: LD_INT 105
70988: PUSH
70989: LD_INT 106
70991: PUSH
70992: LD_INT 108
70994: PUSH
70995: LD_INT 112
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: ST_TO_ADDR
71011: GO 73270
71013: LD_INT 8
71015: DOUBLE
71016: EQUAL
71017: IFTRUE 71021
71019: GO 71149
71021: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
71022: LD_ADDR_VAR 0 1
71026: PUSH
71027: LD_INT 2
71029: PUSH
71030: LD_INT 4
71032: PUSH
71033: LD_INT 5
71035: PUSH
71036: LD_INT 6
71038: PUSH
71039: LD_INT 7
71041: PUSH
71042: LD_INT 8
71044: PUSH
71045: LD_INT 11
71047: PUSH
71048: LD_INT 12
71050: PUSH
71051: LD_INT 15
71053: PUSH
71054: LD_INT 16
71056: PUSH
71057: LD_INT 20
71059: PUSH
71060: LD_INT 21
71062: PUSH
71063: LD_INT 22
71065: PUSH
71066: LD_INT 23
71068: PUSH
71069: LD_INT 25
71071: PUSH
71072: LD_INT 26
71074: PUSH
71075: LD_INT 30
71077: PUSH
71078: LD_INT 31
71080: PUSH
71081: LD_INT 32
71083: PUSH
71084: LD_INT 36
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 101
71111: PUSH
71112: LD_INT 102
71114: PUSH
71115: LD_INT 103
71117: PUSH
71118: LD_INT 105
71120: PUSH
71121: LD_INT 106
71123: PUSH
71124: LD_INT 108
71126: PUSH
71127: LD_INT 109
71129: PUSH
71130: LD_INT 112
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: ST_TO_ADDR
71147: GO 73270
71149: LD_INT 9
71151: DOUBLE
71152: EQUAL
71153: IFTRUE 71157
71155: GO 71293
71157: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
71158: LD_ADDR_VAR 0 1
71162: PUSH
71163: LD_INT 2
71165: PUSH
71166: LD_INT 4
71168: PUSH
71169: LD_INT 5
71171: PUSH
71172: LD_INT 6
71174: PUSH
71175: LD_INT 7
71177: PUSH
71178: LD_INT 8
71180: PUSH
71181: LD_INT 11
71183: PUSH
71184: LD_INT 12
71186: PUSH
71187: LD_INT 15
71189: PUSH
71190: LD_INT 16
71192: PUSH
71193: LD_INT 20
71195: PUSH
71196: LD_INT 21
71198: PUSH
71199: LD_INT 22
71201: PUSH
71202: LD_INT 23
71204: PUSH
71205: LD_INT 25
71207: PUSH
71208: LD_INT 26
71210: PUSH
71211: LD_INT 28
71213: PUSH
71214: LD_INT 30
71216: PUSH
71217: LD_INT 31
71219: PUSH
71220: LD_INT 32
71222: PUSH
71223: LD_INT 36
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 101
71251: PUSH
71252: LD_INT 102
71254: PUSH
71255: LD_INT 103
71257: PUSH
71258: LD_INT 105
71260: PUSH
71261: LD_INT 106
71263: PUSH
71264: LD_INT 108
71266: PUSH
71267: LD_INT 109
71269: PUSH
71270: LD_INT 112
71272: PUSH
71273: LD_INT 114
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: ST_TO_ADDR
71291: GO 73270
71293: LD_INT 10
71295: DOUBLE
71296: EQUAL
71297: IFTRUE 71301
71299: GO 71485
71301: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
71302: LD_ADDR_VAR 0 1
71306: PUSH
71307: LD_INT 2
71309: PUSH
71310: LD_INT 4
71312: PUSH
71313: LD_INT 5
71315: PUSH
71316: LD_INT 6
71318: PUSH
71319: LD_INT 7
71321: PUSH
71322: LD_INT 8
71324: PUSH
71325: LD_INT 9
71327: PUSH
71328: LD_INT 10
71330: PUSH
71331: LD_INT 11
71333: PUSH
71334: LD_INT 12
71336: PUSH
71337: LD_INT 13
71339: PUSH
71340: LD_INT 14
71342: PUSH
71343: LD_INT 15
71345: PUSH
71346: LD_INT 16
71348: PUSH
71349: LD_INT 17
71351: PUSH
71352: LD_INT 18
71354: PUSH
71355: LD_INT 19
71357: PUSH
71358: LD_INT 20
71360: PUSH
71361: LD_INT 21
71363: PUSH
71364: LD_INT 22
71366: PUSH
71367: LD_INT 23
71369: PUSH
71370: LD_INT 24
71372: PUSH
71373: LD_INT 25
71375: PUSH
71376: LD_INT 26
71378: PUSH
71379: LD_INT 28
71381: PUSH
71382: LD_INT 30
71384: PUSH
71385: LD_INT 31
71387: PUSH
71388: LD_INT 32
71390: PUSH
71391: LD_INT 36
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 101
71427: PUSH
71428: LD_INT 102
71430: PUSH
71431: LD_INT 103
71433: PUSH
71434: LD_INT 104
71436: PUSH
71437: LD_INT 105
71439: PUSH
71440: LD_INT 106
71442: PUSH
71443: LD_INT 107
71445: PUSH
71446: LD_INT 108
71448: PUSH
71449: LD_INT 109
71451: PUSH
71452: LD_INT 110
71454: PUSH
71455: LD_INT 111
71457: PUSH
71458: LD_INT 112
71460: PUSH
71461: LD_INT 114
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: ST_TO_ADDR
71483: GO 73270
71485: LD_INT 11
71487: DOUBLE
71488: EQUAL
71489: IFTRUE 71493
71491: GO 71685
71493: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
71494: LD_ADDR_VAR 0 1
71498: PUSH
71499: LD_INT 2
71501: PUSH
71502: LD_INT 3
71504: PUSH
71505: LD_INT 4
71507: PUSH
71508: LD_INT 5
71510: PUSH
71511: LD_INT 6
71513: PUSH
71514: LD_INT 7
71516: PUSH
71517: LD_INT 8
71519: PUSH
71520: LD_INT 9
71522: PUSH
71523: LD_INT 10
71525: PUSH
71526: LD_INT 11
71528: PUSH
71529: LD_INT 12
71531: PUSH
71532: LD_INT 13
71534: PUSH
71535: LD_INT 14
71537: PUSH
71538: LD_INT 15
71540: PUSH
71541: LD_INT 16
71543: PUSH
71544: LD_INT 17
71546: PUSH
71547: LD_INT 18
71549: PUSH
71550: LD_INT 19
71552: PUSH
71553: LD_INT 20
71555: PUSH
71556: LD_INT 21
71558: PUSH
71559: LD_INT 22
71561: PUSH
71562: LD_INT 23
71564: PUSH
71565: LD_INT 24
71567: PUSH
71568: LD_INT 25
71570: PUSH
71571: LD_INT 26
71573: PUSH
71574: LD_INT 28
71576: PUSH
71577: LD_INT 30
71579: PUSH
71580: LD_INT 31
71582: PUSH
71583: LD_INT 32
71585: PUSH
71586: LD_INT 34
71588: PUSH
71589: LD_INT 36
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 101
71627: PUSH
71628: LD_INT 102
71630: PUSH
71631: LD_INT 103
71633: PUSH
71634: LD_INT 104
71636: PUSH
71637: LD_INT 105
71639: PUSH
71640: LD_INT 106
71642: PUSH
71643: LD_INT 107
71645: PUSH
71646: LD_INT 108
71648: PUSH
71649: LD_INT 109
71651: PUSH
71652: LD_INT 110
71654: PUSH
71655: LD_INT 111
71657: PUSH
71658: LD_INT 112
71660: PUSH
71661: LD_INT 114
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: ST_TO_ADDR
71683: GO 73270
71685: LD_INT 12
71687: DOUBLE
71688: EQUAL
71689: IFTRUE 71693
71691: GO 71901
71693: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
71694: LD_ADDR_VAR 0 1
71698: PUSH
71699: LD_INT 1
71701: PUSH
71702: LD_INT 2
71704: PUSH
71705: LD_INT 3
71707: PUSH
71708: LD_INT 4
71710: PUSH
71711: LD_INT 5
71713: PUSH
71714: LD_INT 6
71716: PUSH
71717: LD_INT 7
71719: PUSH
71720: LD_INT 8
71722: PUSH
71723: LD_INT 9
71725: PUSH
71726: LD_INT 10
71728: PUSH
71729: LD_INT 11
71731: PUSH
71732: LD_INT 12
71734: PUSH
71735: LD_INT 13
71737: PUSH
71738: LD_INT 14
71740: PUSH
71741: LD_INT 15
71743: PUSH
71744: LD_INT 16
71746: PUSH
71747: LD_INT 17
71749: PUSH
71750: LD_INT 18
71752: PUSH
71753: LD_INT 19
71755: PUSH
71756: LD_INT 20
71758: PUSH
71759: LD_INT 21
71761: PUSH
71762: LD_INT 22
71764: PUSH
71765: LD_INT 23
71767: PUSH
71768: LD_INT 24
71770: PUSH
71771: LD_INT 25
71773: PUSH
71774: LD_INT 26
71776: PUSH
71777: LD_INT 27
71779: PUSH
71780: LD_INT 28
71782: PUSH
71783: LD_INT 30
71785: PUSH
71786: LD_INT 31
71788: PUSH
71789: LD_INT 32
71791: PUSH
71792: LD_INT 33
71794: PUSH
71795: LD_INT 34
71797: PUSH
71798: LD_INT 36
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 101
71839: PUSH
71840: LD_INT 102
71842: PUSH
71843: LD_INT 103
71845: PUSH
71846: LD_INT 104
71848: PUSH
71849: LD_INT 105
71851: PUSH
71852: LD_INT 106
71854: PUSH
71855: LD_INT 107
71857: PUSH
71858: LD_INT 108
71860: PUSH
71861: LD_INT 109
71863: PUSH
71864: LD_INT 110
71866: PUSH
71867: LD_INT 111
71869: PUSH
71870: LD_INT 112
71872: PUSH
71873: LD_INT 113
71875: PUSH
71876: LD_INT 114
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: ST_TO_ADDR
71899: GO 73270
71901: LD_INT 13
71903: DOUBLE
71904: EQUAL
71905: IFTRUE 71909
71907: GO 72105
71909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
71910: LD_ADDR_VAR 0 1
71914: PUSH
71915: LD_INT 1
71917: PUSH
71918: LD_INT 2
71920: PUSH
71921: LD_INT 3
71923: PUSH
71924: LD_INT 4
71926: PUSH
71927: LD_INT 5
71929: PUSH
71930: LD_INT 8
71932: PUSH
71933: LD_INT 9
71935: PUSH
71936: LD_INT 10
71938: PUSH
71939: LD_INT 11
71941: PUSH
71942: LD_INT 12
71944: PUSH
71945: LD_INT 14
71947: PUSH
71948: LD_INT 15
71950: PUSH
71951: LD_INT 16
71953: PUSH
71954: LD_INT 17
71956: PUSH
71957: LD_INT 18
71959: PUSH
71960: LD_INT 19
71962: PUSH
71963: LD_INT 20
71965: PUSH
71966: LD_INT 21
71968: PUSH
71969: LD_INT 22
71971: PUSH
71972: LD_INT 23
71974: PUSH
71975: LD_INT 24
71977: PUSH
71978: LD_INT 25
71980: PUSH
71981: LD_INT 26
71983: PUSH
71984: LD_INT 27
71986: PUSH
71987: LD_INT 28
71989: PUSH
71990: LD_INT 30
71992: PUSH
71993: LD_INT 31
71995: PUSH
71996: LD_INT 32
71998: PUSH
71999: LD_INT 33
72001: PUSH
72002: LD_INT 34
72004: PUSH
72005: LD_INT 36
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 101
72043: PUSH
72044: LD_INT 102
72046: PUSH
72047: LD_INT 103
72049: PUSH
72050: LD_INT 104
72052: PUSH
72053: LD_INT 105
72055: PUSH
72056: LD_INT 106
72058: PUSH
72059: LD_INT 107
72061: PUSH
72062: LD_INT 108
72064: PUSH
72065: LD_INT 109
72067: PUSH
72068: LD_INT 110
72070: PUSH
72071: LD_INT 111
72073: PUSH
72074: LD_INT 112
72076: PUSH
72077: LD_INT 113
72079: PUSH
72080: LD_INT 114
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: ST_TO_ADDR
72103: GO 73270
72105: LD_INT 14
72107: DOUBLE
72108: EQUAL
72109: IFTRUE 72113
72111: GO 72325
72113: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
72114: LD_ADDR_VAR 0 1
72118: PUSH
72119: LD_INT 1
72121: PUSH
72122: LD_INT 2
72124: PUSH
72125: LD_INT 3
72127: PUSH
72128: LD_INT 4
72130: PUSH
72131: LD_INT 5
72133: PUSH
72134: LD_INT 6
72136: PUSH
72137: LD_INT 7
72139: PUSH
72140: LD_INT 8
72142: PUSH
72143: LD_INT 9
72145: PUSH
72146: LD_INT 10
72148: PUSH
72149: LD_INT 11
72151: PUSH
72152: LD_INT 12
72154: PUSH
72155: LD_INT 13
72157: PUSH
72158: LD_INT 14
72160: PUSH
72161: LD_INT 15
72163: PUSH
72164: LD_INT 16
72166: PUSH
72167: LD_INT 17
72169: PUSH
72170: LD_INT 18
72172: PUSH
72173: LD_INT 19
72175: PUSH
72176: LD_INT 20
72178: PUSH
72179: LD_INT 21
72181: PUSH
72182: LD_INT 22
72184: PUSH
72185: LD_INT 23
72187: PUSH
72188: LD_INT 24
72190: PUSH
72191: LD_INT 25
72193: PUSH
72194: LD_INT 26
72196: PUSH
72197: LD_INT 27
72199: PUSH
72200: LD_INT 28
72202: PUSH
72203: LD_INT 29
72205: PUSH
72206: LD_INT 30
72208: PUSH
72209: LD_INT 31
72211: PUSH
72212: LD_INT 32
72214: PUSH
72215: LD_INT 33
72217: PUSH
72218: LD_INT 34
72220: PUSH
72221: LD_INT 36
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 101
72263: PUSH
72264: LD_INT 102
72266: PUSH
72267: LD_INT 103
72269: PUSH
72270: LD_INT 104
72272: PUSH
72273: LD_INT 105
72275: PUSH
72276: LD_INT 106
72278: PUSH
72279: LD_INT 107
72281: PUSH
72282: LD_INT 108
72284: PUSH
72285: LD_INT 109
72287: PUSH
72288: LD_INT 110
72290: PUSH
72291: LD_INT 111
72293: PUSH
72294: LD_INT 112
72296: PUSH
72297: LD_INT 113
72299: PUSH
72300: LD_INT 114
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: ST_TO_ADDR
72323: GO 73270
72325: LD_INT 15
72327: DOUBLE
72328: EQUAL
72329: IFTRUE 72333
72331: GO 72545
72333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
72334: LD_ADDR_VAR 0 1
72338: PUSH
72339: LD_INT 1
72341: PUSH
72342: LD_INT 2
72344: PUSH
72345: LD_INT 3
72347: PUSH
72348: LD_INT 4
72350: PUSH
72351: LD_INT 5
72353: PUSH
72354: LD_INT 6
72356: PUSH
72357: LD_INT 7
72359: PUSH
72360: LD_INT 8
72362: PUSH
72363: LD_INT 9
72365: PUSH
72366: LD_INT 10
72368: PUSH
72369: LD_INT 11
72371: PUSH
72372: LD_INT 12
72374: PUSH
72375: LD_INT 13
72377: PUSH
72378: LD_INT 14
72380: PUSH
72381: LD_INT 15
72383: PUSH
72384: LD_INT 16
72386: PUSH
72387: LD_INT 17
72389: PUSH
72390: LD_INT 18
72392: PUSH
72393: LD_INT 19
72395: PUSH
72396: LD_INT 20
72398: PUSH
72399: LD_INT 21
72401: PUSH
72402: LD_INT 22
72404: PUSH
72405: LD_INT 23
72407: PUSH
72408: LD_INT 24
72410: PUSH
72411: LD_INT 25
72413: PUSH
72414: LD_INT 26
72416: PUSH
72417: LD_INT 27
72419: PUSH
72420: LD_INT 28
72422: PUSH
72423: LD_INT 29
72425: PUSH
72426: LD_INT 30
72428: PUSH
72429: LD_INT 31
72431: PUSH
72432: LD_INT 32
72434: PUSH
72435: LD_INT 33
72437: PUSH
72438: LD_INT 34
72440: PUSH
72441: LD_INT 36
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 101
72483: PUSH
72484: LD_INT 102
72486: PUSH
72487: LD_INT 103
72489: PUSH
72490: LD_INT 104
72492: PUSH
72493: LD_INT 105
72495: PUSH
72496: LD_INT 106
72498: PUSH
72499: LD_INT 107
72501: PUSH
72502: LD_INT 108
72504: PUSH
72505: LD_INT 109
72507: PUSH
72508: LD_INT 110
72510: PUSH
72511: LD_INT 111
72513: PUSH
72514: LD_INT 112
72516: PUSH
72517: LD_INT 113
72519: PUSH
72520: LD_INT 114
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: ST_TO_ADDR
72543: GO 73270
72545: LD_INT 16
72547: DOUBLE
72548: EQUAL
72549: IFTRUE 72553
72551: GO 72677
72553: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
72554: LD_ADDR_VAR 0 1
72558: PUSH
72559: LD_INT 2
72561: PUSH
72562: LD_INT 4
72564: PUSH
72565: LD_INT 5
72567: PUSH
72568: LD_INT 7
72570: PUSH
72571: LD_INT 11
72573: PUSH
72574: LD_INT 12
72576: PUSH
72577: LD_INT 15
72579: PUSH
72580: LD_INT 16
72582: PUSH
72583: LD_INT 20
72585: PUSH
72586: LD_INT 21
72588: PUSH
72589: LD_INT 22
72591: PUSH
72592: LD_INT 23
72594: PUSH
72595: LD_INT 25
72597: PUSH
72598: LD_INT 26
72600: PUSH
72601: LD_INT 30
72603: PUSH
72604: LD_INT 31
72606: PUSH
72607: LD_INT 32
72609: PUSH
72610: LD_INT 33
72612: PUSH
72613: LD_INT 34
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 101
72639: PUSH
72640: LD_INT 102
72642: PUSH
72643: LD_INT 103
72645: PUSH
72646: LD_INT 106
72648: PUSH
72649: LD_INT 108
72651: PUSH
72652: LD_INT 112
72654: PUSH
72655: LD_INT 113
72657: PUSH
72658: LD_INT 114
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: ST_TO_ADDR
72675: GO 73270
72677: LD_INT 17
72679: DOUBLE
72680: EQUAL
72681: IFTRUE 72685
72683: GO 72897
72685: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
72686: LD_ADDR_VAR 0 1
72690: PUSH
72691: LD_INT 1
72693: PUSH
72694: LD_INT 2
72696: PUSH
72697: LD_INT 3
72699: PUSH
72700: LD_INT 4
72702: PUSH
72703: LD_INT 5
72705: PUSH
72706: LD_INT 6
72708: PUSH
72709: LD_INT 7
72711: PUSH
72712: LD_INT 8
72714: PUSH
72715: LD_INT 9
72717: PUSH
72718: LD_INT 10
72720: PUSH
72721: LD_INT 11
72723: PUSH
72724: LD_INT 12
72726: PUSH
72727: LD_INT 13
72729: PUSH
72730: LD_INT 14
72732: PUSH
72733: LD_INT 15
72735: PUSH
72736: LD_INT 16
72738: PUSH
72739: LD_INT 17
72741: PUSH
72742: LD_INT 18
72744: PUSH
72745: LD_INT 19
72747: PUSH
72748: LD_INT 20
72750: PUSH
72751: LD_INT 21
72753: PUSH
72754: LD_INT 22
72756: PUSH
72757: LD_INT 23
72759: PUSH
72760: LD_INT 24
72762: PUSH
72763: LD_INT 25
72765: PUSH
72766: LD_INT 26
72768: PUSH
72769: LD_INT 27
72771: PUSH
72772: LD_INT 28
72774: PUSH
72775: LD_INT 29
72777: PUSH
72778: LD_INT 30
72780: PUSH
72781: LD_INT 31
72783: PUSH
72784: LD_INT 32
72786: PUSH
72787: LD_INT 33
72789: PUSH
72790: LD_INT 34
72792: PUSH
72793: LD_INT 36
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 101
72835: PUSH
72836: LD_INT 102
72838: PUSH
72839: LD_INT 103
72841: PUSH
72842: LD_INT 104
72844: PUSH
72845: LD_INT 105
72847: PUSH
72848: LD_INT 106
72850: PUSH
72851: LD_INT 107
72853: PUSH
72854: LD_INT 108
72856: PUSH
72857: LD_INT 109
72859: PUSH
72860: LD_INT 110
72862: PUSH
72863: LD_INT 111
72865: PUSH
72866: LD_INT 112
72868: PUSH
72869: LD_INT 113
72871: PUSH
72872: LD_INT 114
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: ST_TO_ADDR
72895: GO 73270
72897: LD_INT 18
72899: DOUBLE
72900: EQUAL
72901: IFTRUE 72905
72903: GO 73041
72905: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
72906: LD_ADDR_VAR 0 1
72910: PUSH
72911: LD_INT 2
72913: PUSH
72914: LD_INT 4
72916: PUSH
72917: LD_INT 5
72919: PUSH
72920: LD_INT 7
72922: PUSH
72923: LD_INT 11
72925: PUSH
72926: LD_INT 12
72928: PUSH
72929: LD_INT 15
72931: PUSH
72932: LD_INT 16
72934: PUSH
72935: LD_INT 20
72937: PUSH
72938: LD_INT 21
72940: PUSH
72941: LD_INT 22
72943: PUSH
72944: LD_INT 23
72946: PUSH
72947: LD_INT 25
72949: PUSH
72950: LD_INT 26
72952: PUSH
72953: LD_INT 30
72955: PUSH
72956: LD_INT 31
72958: PUSH
72959: LD_INT 32
72961: PUSH
72962: LD_INT 33
72964: PUSH
72965: LD_INT 34
72967: PUSH
72968: LD_INT 35
72970: PUSH
72971: LD_INT 36
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 101
72999: PUSH
73000: LD_INT 102
73002: PUSH
73003: LD_INT 103
73005: PUSH
73006: LD_INT 106
73008: PUSH
73009: LD_INT 108
73011: PUSH
73012: LD_INT 112
73014: PUSH
73015: LD_INT 113
73017: PUSH
73018: LD_INT 114
73020: PUSH
73021: LD_INT 115
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: ST_TO_ADDR
73039: GO 73270
73041: LD_INT 19
73043: DOUBLE
73044: EQUAL
73045: IFTRUE 73049
73047: GO 73269
73049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
73050: LD_ADDR_VAR 0 1
73054: PUSH
73055: LD_INT 1
73057: PUSH
73058: LD_INT 2
73060: PUSH
73061: LD_INT 3
73063: PUSH
73064: LD_INT 4
73066: PUSH
73067: LD_INT 5
73069: PUSH
73070: LD_INT 6
73072: PUSH
73073: LD_INT 7
73075: PUSH
73076: LD_INT 8
73078: PUSH
73079: LD_INT 9
73081: PUSH
73082: LD_INT 10
73084: PUSH
73085: LD_INT 11
73087: PUSH
73088: LD_INT 12
73090: PUSH
73091: LD_INT 13
73093: PUSH
73094: LD_INT 14
73096: PUSH
73097: LD_INT 15
73099: PUSH
73100: LD_INT 16
73102: PUSH
73103: LD_INT 17
73105: PUSH
73106: LD_INT 18
73108: PUSH
73109: LD_INT 19
73111: PUSH
73112: LD_INT 20
73114: PUSH
73115: LD_INT 21
73117: PUSH
73118: LD_INT 22
73120: PUSH
73121: LD_INT 23
73123: PUSH
73124: LD_INT 24
73126: PUSH
73127: LD_INT 25
73129: PUSH
73130: LD_INT 26
73132: PUSH
73133: LD_INT 27
73135: PUSH
73136: LD_INT 28
73138: PUSH
73139: LD_INT 29
73141: PUSH
73142: LD_INT 30
73144: PUSH
73145: LD_INT 31
73147: PUSH
73148: LD_INT 32
73150: PUSH
73151: LD_INT 33
73153: PUSH
73154: LD_INT 34
73156: PUSH
73157: LD_INT 35
73159: PUSH
73160: LD_INT 36
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 101
73203: PUSH
73204: LD_INT 102
73206: PUSH
73207: LD_INT 103
73209: PUSH
73210: LD_INT 104
73212: PUSH
73213: LD_INT 105
73215: PUSH
73216: LD_INT 106
73218: PUSH
73219: LD_INT 107
73221: PUSH
73222: LD_INT 108
73224: PUSH
73225: LD_INT 109
73227: PUSH
73228: LD_INT 110
73230: PUSH
73231: LD_INT 111
73233: PUSH
73234: LD_INT 112
73236: PUSH
73237: LD_INT 113
73239: PUSH
73240: LD_INT 114
73242: PUSH
73243: LD_INT 115
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: ST_TO_ADDR
73267: GO 73270
73269: POP
// end else
73270: GO 73489
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
73272: LD_ADDR_VAR 0 1
73276: PUSH
73277: LD_INT 1
73279: PUSH
73280: LD_INT 2
73282: PUSH
73283: LD_INT 3
73285: PUSH
73286: LD_INT 4
73288: PUSH
73289: LD_INT 5
73291: PUSH
73292: LD_INT 6
73294: PUSH
73295: LD_INT 7
73297: PUSH
73298: LD_INT 8
73300: PUSH
73301: LD_INT 9
73303: PUSH
73304: LD_INT 10
73306: PUSH
73307: LD_INT 11
73309: PUSH
73310: LD_INT 12
73312: PUSH
73313: LD_INT 13
73315: PUSH
73316: LD_INT 14
73318: PUSH
73319: LD_INT 15
73321: PUSH
73322: LD_INT 16
73324: PUSH
73325: LD_INT 17
73327: PUSH
73328: LD_INT 18
73330: PUSH
73331: LD_INT 19
73333: PUSH
73334: LD_INT 20
73336: PUSH
73337: LD_INT 21
73339: PUSH
73340: LD_INT 22
73342: PUSH
73343: LD_INT 23
73345: PUSH
73346: LD_INT 24
73348: PUSH
73349: LD_INT 25
73351: PUSH
73352: LD_INT 26
73354: PUSH
73355: LD_INT 27
73357: PUSH
73358: LD_INT 28
73360: PUSH
73361: LD_INT 29
73363: PUSH
73364: LD_INT 30
73366: PUSH
73367: LD_INT 31
73369: PUSH
73370: LD_INT 32
73372: PUSH
73373: LD_INT 33
73375: PUSH
73376: LD_INT 34
73378: PUSH
73379: LD_INT 35
73381: PUSH
73382: LD_INT 36
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: LIST
73391: LIST
73392: LIST
73393: LIST
73394: LIST
73395: LIST
73396: LIST
73397: LIST
73398: LIST
73399: LIST
73400: LIST
73401: LIST
73402: LIST
73403: LIST
73404: LIST
73405: LIST
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 101
73425: PUSH
73426: LD_INT 102
73428: PUSH
73429: LD_INT 103
73431: PUSH
73432: LD_INT 104
73434: PUSH
73435: LD_INT 105
73437: PUSH
73438: LD_INT 106
73440: PUSH
73441: LD_INT 107
73443: PUSH
73444: LD_INT 108
73446: PUSH
73447: LD_INT 109
73449: PUSH
73450: LD_INT 110
73452: PUSH
73453: LD_INT 111
73455: PUSH
73456: LD_INT 112
73458: PUSH
73459: LD_INT 113
73461: PUSH
73462: LD_INT 114
73464: PUSH
73465: LD_INT 115
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: LIST
73480: LIST
73481: LIST
73482: LIST
73483: LIST
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: ST_TO_ADDR
// if result then
73489: LD_VAR 0 1
73493: IFFALSE 73782
// begin normal :=  ;
73495: LD_ADDR_VAR 0 3
73499: PUSH
73500: LD_STRING 
73502: ST_TO_ADDR
// hardcore :=  ;
73503: LD_ADDR_VAR 0 4
73507: PUSH
73508: LD_STRING 
73510: ST_TO_ADDR
// for i = 1 to normalCounter do
73511: LD_ADDR_VAR 0 5
73515: PUSH
73516: DOUBLE
73517: LD_INT 1
73519: DEC
73520: ST_TO_ADDR
73521: LD_EXP 108
73525: PUSH
73526: FOR_TO
73527: IFFALSE 73628
// begin tmp := 0 ;
73529: LD_ADDR_VAR 0 2
73533: PUSH
73534: LD_STRING 0
73536: ST_TO_ADDR
// if result [ 1 ] then
73537: LD_VAR 0 1
73541: PUSH
73542: LD_INT 1
73544: ARRAY
73545: IFFALSE 73610
// if result [ 1 ] [ 1 ] = i then
73547: LD_VAR 0 1
73551: PUSH
73552: LD_INT 1
73554: ARRAY
73555: PUSH
73556: LD_INT 1
73558: ARRAY
73559: PUSH
73560: LD_VAR 0 5
73564: EQUAL
73565: IFFALSE 73610
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
73567: LD_ADDR_VAR 0 1
73571: PUSH
73572: LD_VAR 0 1
73576: PPUSH
73577: LD_INT 1
73579: PPUSH
73580: LD_VAR 0 1
73584: PUSH
73585: LD_INT 1
73587: ARRAY
73588: PPUSH
73589: LD_INT 1
73591: PPUSH
73592: CALL_OW 3
73596: PPUSH
73597: CALL_OW 1
73601: ST_TO_ADDR
// tmp := 1 ;
73602: LD_ADDR_VAR 0 2
73606: PUSH
73607: LD_STRING 1
73609: ST_TO_ADDR
// end ; normal := normal & tmp ;
73610: LD_ADDR_VAR 0 3
73614: PUSH
73615: LD_VAR 0 3
73619: PUSH
73620: LD_VAR 0 2
73624: STR
73625: ST_TO_ADDR
// end ;
73626: GO 73526
73628: POP
73629: POP
// for i = 1 to hardcoreCounter do
73630: LD_ADDR_VAR 0 5
73634: PUSH
73635: DOUBLE
73636: LD_INT 1
73638: DEC
73639: ST_TO_ADDR
73640: LD_EXP 109
73644: PUSH
73645: FOR_TO
73646: IFFALSE 73751
// begin tmp := 0 ;
73648: LD_ADDR_VAR 0 2
73652: PUSH
73653: LD_STRING 0
73655: ST_TO_ADDR
// if result [ 2 ] then
73656: LD_VAR 0 1
73660: PUSH
73661: LD_INT 2
73663: ARRAY
73664: IFFALSE 73733
// if result [ 2 ] [ 1 ] = 100 + i then
73666: LD_VAR 0 1
73670: PUSH
73671: LD_INT 2
73673: ARRAY
73674: PUSH
73675: LD_INT 1
73677: ARRAY
73678: PUSH
73679: LD_INT 100
73681: PUSH
73682: LD_VAR 0 5
73686: PLUS
73687: EQUAL
73688: IFFALSE 73733
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
73690: LD_ADDR_VAR 0 1
73694: PUSH
73695: LD_VAR 0 1
73699: PPUSH
73700: LD_INT 2
73702: PPUSH
73703: LD_VAR 0 1
73707: PUSH
73708: LD_INT 2
73710: ARRAY
73711: PPUSH
73712: LD_INT 1
73714: PPUSH
73715: CALL_OW 3
73719: PPUSH
73720: CALL_OW 1
73724: ST_TO_ADDR
// tmp := 1 ;
73725: LD_ADDR_VAR 0 2
73729: PUSH
73730: LD_STRING 1
73732: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
73733: LD_ADDR_VAR 0 4
73737: PUSH
73738: LD_VAR 0 4
73742: PUSH
73743: LD_VAR 0 2
73747: STR
73748: ST_TO_ADDR
// end ;
73749: GO 73645
73751: POP
73752: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
73753: LD_STRING getStreamItemsFromMission("
73755: PUSH
73756: LD_VAR 0 3
73760: STR
73761: PUSH
73762: LD_STRING ","
73764: STR
73765: PUSH
73766: LD_VAR 0 4
73770: STR
73771: PUSH
73772: LD_STRING ")
73774: STR
73775: PPUSH
73776: CALL_OW 559
// end else
73780: GO 73789
// ToLua ( getStreamItemsFromMission("","") ) ;
73782: LD_STRING getStreamItemsFromMission("","")
73784: PPUSH
73785: CALL_OW 559
// end ;
73789: LD_VAR 0 1
73793: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
73794: LD_EXP 107
73798: PUSH
73799: LD_EXP 112
73803: AND
73804: IFFALSE 73928
73806: GO 73808
73808: DISABLE
73809: LD_INT 0
73811: PPUSH
73812: PPUSH
// begin enable ;
73813: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
73814: LD_ADDR_VAR 0 2
73818: PUSH
73819: LD_INT 22
73821: PUSH
73822: LD_OWVAR 2
73826: PUSH
73827: EMPTY
73828: LIST
73829: LIST
73830: PUSH
73831: LD_INT 2
73833: PUSH
73834: LD_INT 34
73836: PUSH
73837: LD_INT 7
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 34
73846: PUSH
73847: LD_INT 45
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 34
73856: PUSH
73857: LD_INT 28
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: PUSH
73864: LD_INT 34
73866: PUSH
73867: LD_INT 47
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: PPUSH
73885: CALL_OW 69
73889: ST_TO_ADDR
// if not tmp then
73890: LD_VAR 0 2
73894: NOT
73895: IFFALSE 73899
// exit ;
73897: GO 73928
// for i in tmp do
73899: LD_ADDR_VAR 0 1
73903: PUSH
73904: LD_VAR 0 2
73908: PUSH
73909: FOR_IN
73910: IFFALSE 73926
// begin SetLives ( i , 0 ) ;
73912: LD_VAR 0 1
73916: PPUSH
73917: LD_INT 0
73919: PPUSH
73920: CALL_OW 234
// end ;
73924: GO 73909
73926: POP
73927: POP
// end ;
73928: PPOPN 2
73930: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
73931: LD_EXP 107
73935: PUSH
73936: LD_EXP 113
73940: AND
73941: IFFALSE 74025
73943: GO 73945
73945: DISABLE
73946: LD_INT 0
73948: PPUSH
73949: PPUSH
// begin enable ;
73950: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
73951: LD_ADDR_VAR 0 2
73955: PUSH
73956: LD_INT 22
73958: PUSH
73959: LD_OWVAR 2
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 32
73970: PUSH
73971: LD_INT 3
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PPUSH
73982: CALL_OW 69
73986: ST_TO_ADDR
// if not tmp then
73987: LD_VAR 0 2
73991: NOT
73992: IFFALSE 73996
// exit ;
73994: GO 74025
// for i in tmp do
73996: LD_ADDR_VAR 0 1
74000: PUSH
74001: LD_VAR 0 2
74005: PUSH
74006: FOR_IN
74007: IFFALSE 74023
// begin SetLives ( i , 0 ) ;
74009: LD_VAR 0 1
74013: PPUSH
74014: LD_INT 0
74016: PPUSH
74017: CALL_OW 234
// end ;
74021: GO 74006
74023: POP
74024: POP
// end ;
74025: PPOPN 2
74027: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
74028: LD_EXP 107
74032: PUSH
74033: LD_EXP 110
74037: AND
74038: IFFALSE 74131
74040: GO 74042
74042: DISABLE
74043: LD_INT 0
74045: PPUSH
// begin enable ;
74046: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
74047: LD_ADDR_VAR 0 1
74051: PUSH
74052: LD_INT 22
74054: PUSH
74055: LD_OWVAR 2
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 2
74066: PUSH
74067: LD_INT 25
74069: PUSH
74070: LD_INT 5
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 25
74079: PUSH
74080: LD_INT 9
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 25
74089: PUSH
74090: LD_INT 8
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: LIST
74101: LIST
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PPUSH
74107: CALL_OW 69
74111: PUSH
74112: FOR_IN
74113: IFFALSE 74129
// begin SetClass ( i , 1 ) ;
74115: LD_VAR 0 1
74119: PPUSH
74120: LD_INT 1
74122: PPUSH
74123: CALL_OW 336
// end ;
74127: GO 74112
74129: POP
74130: POP
// end ;
74131: PPOPN 1
74133: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
74134: LD_EXP 107
74138: PUSH
74139: LD_EXP 111
74143: AND
74144: PUSH
74145: LD_OWVAR 65
74149: PUSH
74150: LD_INT 7
74152: LESS
74153: AND
74154: IFFALSE 74168
74156: GO 74158
74158: DISABLE
// begin enable ;
74159: ENABLE
// game_speed := 7 ;
74160: LD_ADDR_OWVAR 65
74164: PUSH
74165: LD_INT 7
74167: ST_TO_ADDR
// end ;
74168: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
74169: LD_EXP 107
74173: PUSH
74174: LD_EXP 114
74178: AND
74179: IFFALSE 74381
74181: GO 74183
74183: DISABLE
74184: LD_INT 0
74186: PPUSH
74187: PPUSH
74188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74189: LD_ADDR_VAR 0 3
74193: PUSH
74194: LD_INT 81
74196: PUSH
74197: LD_OWVAR 2
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 21
74208: PUSH
74209: LD_INT 1
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: PPUSH
74220: CALL_OW 69
74224: ST_TO_ADDR
// if not tmp then
74225: LD_VAR 0 3
74229: NOT
74230: IFFALSE 74234
// exit ;
74232: GO 74381
// if tmp > 5 then
74234: LD_VAR 0 3
74238: PUSH
74239: LD_INT 5
74241: GREATER
74242: IFFALSE 74254
// k := 5 else
74244: LD_ADDR_VAR 0 2
74248: PUSH
74249: LD_INT 5
74251: ST_TO_ADDR
74252: GO 74264
// k := tmp ;
74254: LD_ADDR_VAR 0 2
74258: PUSH
74259: LD_VAR 0 3
74263: ST_TO_ADDR
// for i := 1 to k do
74264: LD_ADDR_VAR 0 1
74268: PUSH
74269: DOUBLE
74270: LD_INT 1
74272: DEC
74273: ST_TO_ADDR
74274: LD_VAR 0 2
74278: PUSH
74279: FOR_TO
74280: IFFALSE 74379
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
74282: LD_VAR 0 3
74286: PUSH
74287: LD_VAR 0 1
74291: ARRAY
74292: PPUSH
74293: LD_VAR 0 1
74297: PUSH
74298: LD_INT 4
74300: MOD
74301: PUSH
74302: LD_INT 1
74304: PLUS
74305: PPUSH
74306: CALL_OW 259
74310: PUSH
74311: LD_INT 10
74313: LESS
74314: IFFALSE 74377
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
74316: LD_VAR 0 3
74320: PUSH
74321: LD_VAR 0 1
74325: ARRAY
74326: PPUSH
74327: LD_VAR 0 1
74331: PUSH
74332: LD_INT 4
74334: MOD
74335: PUSH
74336: LD_INT 1
74338: PLUS
74339: PPUSH
74340: LD_VAR 0 3
74344: PUSH
74345: LD_VAR 0 1
74349: ARRAY
74350: PPUSH
74351: LD_VAR 0 1
74355: PUSH
74356: LD_INT 4
74358: MOD
74359: PUSH
74360: LD_INT 1
74362: PLUS
74363: PPUSH
74364: CALL_OW 259
74368: PUSH
74369: LD_INT 1
74371: PLUS
74372: PPUSH
74373: CALL_OW 237
74377: GO 74279
74379: POP
74380: POP
// end ;
74381: PPOPN 3
74383: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
74384: LD_EXP 107
74388: PUSH
74389: LD_EXP 115
74393: AND
74394: IFFALSE 74414
74396: GO 74398
74398: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
74399: LD_INT 4
74401: PPUSH
74402: LD_OWVAR 2
74406: PPUSH
74407: LD_INT 0
74409: PPUSH
74410: CALL_OW 324
74414: END
// every 0 0$1 trigger StreamModeActive and sShovel do
74415: LD_EXP 107
74419: PUSH
74420: LD_EXP 144
74424: AND
74425: IFFALSE 74445
74427: GO 74429
74429: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
74430: LD_INT 19
74432: PPUSH
74433: LD_OWVAR 2
74437: PPUSH
74438: LD_INT 0
74440: PPUSH
74441: CALL_OW 324
74445: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
74446: LD_EXP 107
74450: PUSH
74451: LD_EXP 116
74455: AND
74456: IFFALSE 74558
74458: GO 74460
74460: DISABLE
74461: LD_INT 0
74463: PPUSH
74464: PPUSH
// begin enable ;
74465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
74466: LD_ADDR_VAR 0 2
74470: PUSH
74471: LD_INT 22
74473: PUSH
74474: LD_OWVAR 2
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: LD_INT 2
74485: PUSH
74486: LD_INT 34
74488: PUSH
74489: LD_INT 11
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: LD_INT 34
74498: PUSH
74499: LD_INT 30
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: LIST
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PPUSH
74515: CALL_OW 69
74519: ST_TO_ADDR
// if not tmp then
74520: LD_VAR 0 2
74524: NOT
74525: IFFALSE 74529
// exit ;
74527: GO 74558
// for i in tmp do
74529: LD_ADDR_VAR 0 1
74533: PUSH
74534: LD_VAR 0 2
74538: PUSH
74539: FOR_IN
74540: IFFALSE 74556
// begin SetLives ( i , 0 ) ;
74542: LD_VAR 0 1
74546: PPUSH
74547: LD_INT 0
74549: PPUSH
74550: CALL_OW 234
// end ;
74554: GO 74539
74556: POP
74557: POP
// end ;
74558: PPOPN 2
74560: END
// every 0 0$1 trigger StreamModeActive and sBunker do
74561: LD_EXP 107
74565: PUSH
74566: LD_EXP 117
74570: AND
74571: IFFALSE 74591
74573: GO 74575
74575: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
74576: LD_INT 32
74578: PPUSH
74579: LD_OWVAR 2
74583: PPUSH
74584: LD_INT 0
74586: PPUSH
74587: CALL_OW 324
74591: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
74592: LD_EXP 107
74596: PUSH
74597: LD_EXP 118
74601: AND
74602: IFFALSE 74783
74604: GO 74606
74606: DISABLE
74607: LD_INT 0
74609: PPUSH
74610: PPUSH
74611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
74612: LD_ADDR_VAR 0 2
74616: PUSH
74617: LD_INT 22
74619: PUSH
74620: LD_OWVAR 2
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 33
74631: PUSH
74632: LD_INT 3
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: PPUSH
74643: CALL_OW 69
74647: ST_TO_ADDR
// if not tmp then
74648: LD_VAR 0 2
74652: NOT
74653: IFFALSE 74657
// exit ;
74655: GO 74783
// side := 0 ;
74657: LD_ADDR_VAR 0 3
74661: PUSH
74662: LD_INT 0
74664: ST_TO_ADDR
// for i := 1 to 8 do
74665: LD_ADDR_VAR 0 1
74669: PUSH
74670: DOUBLE
74671: LD_INT 1
74673: DEC
74674: ST_TO_ADDR
74675: LD_INT 8
74677: PUSH
74678: FOR_TO
74679: IFFALSE 74727
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
74681: LD_OWVAR 2
74685: PUSH
74686: LD_VAR 0 1
74690: NONEQUAL
74691: PUSH
74692: LD_OWVAR 2
74696: PPUSH
74697: LD_VAR 0 1
74701: PPUSH
74702: CALL_OW 81
74706: PUSH
74707: LD_INT 2
74709: EQUAL
74710: AND
74711: IFFALSE 74725
// begin side := i ;
74713: LD_ADDR_VAR 0 3
74717: PUSH
74718: LD_VAR 0 1
74722: ST_TO_ADDR
// break ;
74723: GO 74727
// end ;
74725: GO 74678
74727: POP
74728: POP
// if not side then
74729: LD_VAR 0 3
74733: NOT
74734: IFFALSE 74738
// exit ;
74736: GO 74783
// for i := 1 to tmp do
74738: LD_ADDR_VAR 0 1
74742: PUSH
74743: DOUBLE
74744: LD_INT 1
74746: DEC
74747: ST_TO_ADDR
74748: LD_VAR 0 2
74752: PUSH
74753: FOR_TO
74754: IFFALSE 74781
// if Prob ( 60 ) then
74756: LD_INT 60
74758: PPUSH
74759: CALL_OW 13
74763: IFFALSE 74779
// SetSide ( i , side ) ;
74765: LD_VAR 0 1
74769: PPUSH
74770: LD_VAR 0 3
74774: PPUSH
74775: CALL_OW 235
74779: GO 74753
74781: POP
74782: POP
// end ;
74783: PPOPN 3
74785: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
74786: LD_EXP 107
74790: PUSH
74791: LD_EXP 120
74795: AND
74796: IFFALSE 74915
74798: GO 74800
74800: DISABLE
74801: LD_INT 0
74803: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
74804: LD_ADDR_VAR 0 1
74808: PUSH
74809: LD_INT 22
74811: PUSH
74812: LD_OWVAR 2
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: LD_INT 21
74823: PUSH
74824: LD_INT 1
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: PUSH
74831: LD_INT 3
74833: PUSH
74834: LD_INT 23
74836: PUSH
74837: LD_INT 0
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: LIST
74852: PPUSH
74853: CALL_OW 69
74857: PUSH
74858: FOR_IN
74859: IFFALSE 74913
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
74861: LD_VAR 0 1
74865: PPUSH
74866: CALL_OW 257
74870: PUSH
74871: LD_INT 1
74873: PUSH
74874: LD_INT 2
74876: PUSH
74877: LD_INT 3
74879: PUSH
74880: LD_INT 4
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: IN
74889: IFFALSE 74911
// SetClass ( un , rand ( 1 , 4 ) ) ;
74891: LD_VAR 0 1
74895: PPUSH
74896: LD_INT 1
74898: PPUSH
74899: LD_INT 4
74901: PPUSH
74902: CALL_OW 12
74906: PPUSH
74907: CALL_OW 336
74911: GO 74858
74913: POP
74914: POP
// end ;
74915: PPOPN 1
74917: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
74918: LD_EXP 107
74922: PUSH
74923: LD_EXP 119
74927: AND
74928: IFFALSE 75007
74930: GO 74932
74932: DISABLE
74933: LD_INT 0
74935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74936: LD_ADDR_VAR 0 1
74940: PUSH
74941: LD_INT 22
74943: PUSH
74944: LD_OWVAR 2
74948: PUSH
74949: EMPTY
74950: LIST
74951: LIST
74952: PUSH
74953: LD_INT 21
74955: PUSH
74956: LD_INT 3
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PPUSH
74967: CALL_OW 69
74971: ST_TO_ADDR
// if not tmp then
74972: LD_VAR 0 1
74976: NOT
74977: IFFALSE 74981
// exit ;
74979: GO 75007
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
74981: LD_VAR 0 1
74985: PUSH
74986: LD_INT 1
74988: PPUSH
74989: LD_VAR 0 1
74993: PPUSH
74994: CALL_OW 12
74998: ARRAY
74999: PPUSH
75000: LD_INT 100
75002: PPUSH
75003: CALL_OW 234
// end ;
75007: PPOPN 1
75009: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
75010: LD_EXP 107
75014: PUSH
75015: LD_EXP 121
75019: AND
75020: IFFALSE 75118
75022: GO 75024
75024: DISABLE
75025: LD_INT 0
75027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75028: LD_ADDR_VAR 0 1
75032: PUSH
75033: LD_INT 22
75035: PUSH
75036: LD_OWVAR 2
75040: PUSH
75041: EMPTY
75042: LIST
75043: LIST
75044: PUSH
75045: LD_INT 21
75047: PUSH
75048: LD_INT 1
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: PPUSH
75059: CALL_OW 69
75063: ST_TO_ADDR
// if not tmp then
75064: LD_VAR 0 1
75068: NOT
75069: IFFALSE 75073
// exit ;
75071: GO 75118
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
75073: LD_VAR 0 1
75077: PUSH
75078: LD_INT 1
75080: PPUSH
75081: LD_VAR 0 1
75085: PPUSH
75086: CALL_OW 12
75090: ARRAY
75091: PPUSH
75092: LD_INT 1
75094: PPUSH
75095: LD_INT 4
75097: PPUSH
75098: CALL_OW 12
75102: PPUSH
75103: LD_INT 3000
75105: PPUSH
75106: LD_INT 9000
75108: PPUSH
75109: CALL_OW 12
75113: PPUSH
75114: CALL_OW 492
// end ;
75118: PPOPN 1
75120: END
// every 0 0$1 trigger StreamModeActive and sDepot do
75121: LD_EXP 107
75125: PUSH
75126: LD_EXP 122
75130: AND
75131: IFFALSE 75151
75133: GO 75135
75135: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
75136: LD_INT 1
75138: PPUSH
75139: LD_OWVAR 2
75143: PPUSH
75144: LD_INT 0
75146: PPUSH
75147: CALL_OW 324
75151: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
75152: LD_EXP 107
75156: PUSH
75157: LD_EXP 123
75161: AND
75162: IFFALSE 75245
75164: GO 75166
75166: DISABLE
75167: LD_INT 0
75169: PPUSH
75170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75171: LD_ADDR_VAR 0 2
75175: PUSH
75176: LD_INT 22
75178: PUSH
75179: LD_OWVAR 2
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: PUSH
75188: LD_INT 21
75190: PUSH
75191: LD_INT 3
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PPUSH
75202: CALL_OW 69
75206: ST_TO_ADDR
// if not tmp then
75207: LD_VAR 0 2
75211: NOT
75212: IFFALSE 75216
// exit ;
75214: GO 75245
// for i in tmp do
75216: LD_ADDR_VAR 0 1
75220: PUSH
75221: LD_VAR 0 2
75225: PUSH
75226: FOR_IN
75227: IFFALSE 75243
// SetBLevel ( i , 10 ) ;
75229: LD_VAR 0 1
75233: PPUSH
75234: LD_INT 10
75236: PPUSH
75237: CALL_OW 241
75241: GO 75226
75243: POP
75244: POP
// end ;
75245: PPOPN 2
75247: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
75248: LD_EXP 107
75252: PUSH
75253: LD_EXP 124
75257: AND
75258: IFFALSE 75369
75260: GO 75262
75262: DISABLE
75263: LD_INT 0
75265: PPUSH
75266: PPUSH
75267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75268: LD_ADDR_VAR 0 3
75272: PUSH
75273: LD_INT 22
75275: PUSH
75276: LD_OWVAR 2
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: PUSH
75285: LD_INT 25
75287: PUSH
75288: LD_INT 1
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: EMPTY
75296: LIST
75297: LIST
75298: PPUSH
75299: CALL_OW 69
75303: ST_TO_ADDR
// if not tmp then
75304: LD_VAR 0 3
75308: NOT
75309: IFFALSE 75313
// exit ;
75311: GO 75369
// un := tmp [ rand ( 1 , tmp ) ] ;
75313: LD_ADDR_VAR 0 2
75317: PUSH
75318: LD_VAR 0 3
75322: PUSH
75323: LD_INT 1
75325: PPUSH
75326: LD_VAR 0 3
75330: PPUSH
75331: CALL_OW 12
75335: ARRAY
75336: ST_TO_ADDR
// if Crawls ( un ) then
75337: LD_VAR 0 2
75341: PPUSH
75342: CALL_OW 318
75346: IFFALSE 75357
// ComWalk ( un ) ;
75348: LD_VAR 0 2
75352: PPUSH
75353: CALL_OW 138
// SetClass ( un , class_sniper ) ;
75357: LD_VAR 0 2
75361: PPUSH
75362: LD_INT 5
75364: PPUSH
75365: CALL_OW 336
// end ;
75369: PPOPN 3
75371: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
75372: LD_EXP 107
75376: PUSH
75377: LD_EXP 125
75381: AND
75382: PUSH
75383: LD_OWVAR 67
75387: PUSH
75388: LD_INT 3
75390: LESS
75391: AND
75392: IFFALSE 75411
75394: GO 75396
75396: DISABLE
// Difficulty := Difficulty + 1 ;
75397: LD_ADDR_OWVAR 67
75401: PUSH
75402: LD_OWVAR 67
75406: PUSH
75407: LD_INT 1
75409: PLUS
75410: ST_TO_ADDR
75411: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
75412: LD_EXP 107
75416: PUSH
75417: LD_EXP 126
75421: AND
75422: IFFALSE 75525
75424: GO 75426
75426: DISABLE
75427: LD_INT 0
75429: PPUSH
// begin for i := 1 to 5 do
75430: LD_ADDR_VAR 0 1
75434: PUSH
75435: DOUBLE
75436: LD_INT 1
75438: DEC
75439: ST_TO_ADDR
75440: LD_INT 5
75442: PUSH
75443: FOR_TO
75444: IFFALSE 75523
// begin uc_nation := nation_nature ;
75446: LD_ADDR_OWVAR 21
75450: PUSH
75451: LD_INT 0
75453: ST_TO_ADDR
// uc_side := 0 ;
75454: LD_ADDR_OWVAR 20
75458: PUSH
75459: LD_INT 0
75461: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75462: LD_ADDR_OWVAR 29
75466: PUSH
75467: LD_INT 12
75469: PUSH
75470: LD_INT 12
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: ST_TO_ADDR
// hc_agressivity := 20 ;
75477: LD_ADDR_OWVAR 35
75481: PUSH
75482: LD_INT 20
75484: ST_TO_ADDR
// hc_class := class_tiger ;
75485: LD_ADDR_OWVAR 28
75489: PUSH
75490: LD_INT 14
75492: ST_TO_ADDR
// hc_gallery :=  ;
75493: LD_ADDR_OWVAR 33
75497: PUSH
75498: LD_STRING 
75500: ST_TO_ADDR
// hc_name :=  ;
75501: LD_ADDR_OWVAR 26
75505: PUSH
75506: LD_STRING 
75508: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
75509: CALL_OW 44
75513: PPUSH
75514: LD_INT 0
75516: PPUSH
75517: CALL_OW 51
// end ;
75521: GO 75443
75523: POP
75524: POP
// end ;
75525: PPOPN 1
75527: END
// every 0 0$1 trigger StreamModeActive and sBomb do
75528: LD_EXP 107
75532: PUSH
75533: LD_EXP 127
75537: AND
75538: IFFALSE 75547
75540: GO 75542
75542: DISABLE
// StreamSibBomb ;
75543: CALL 75548 0 0
75547: END
// export function StreamSibBomb ; var i , x , y ; begin
75548: LD_INT 0
75550: PPUSH
75551: PPUSH
75552: PPUSH
75553: PPUSH
// result := false ;
75554: LD_ADDR_VAR 0 1
75558: PUSH
75559: LD_INT 0
75561: ST_TO_ADDR
// for i := 1 to 16 do
75562: LD_ADDR_VAR 0 2
75566: PUSH
75567: DOUBLE
75568: LD_INT 1
75570: DEC
75571: ST_TO_ADDR
75572: LD_INT 16
75574: PUSH
75575: FOR_TO
75576: IFFALSE 75775
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75578: LD_ADDR_VAR 0 3
75582: PUSH
75583: LD_INT 10
75585: PUSH
75586: LD_INT 20
75588: PUSH
75589: LD_INT 30
75591: PUSH
75592: LD_INT 40
75594: PUSH
75595: LD_INT 50
75597: PUSH
75598: LD_INT 60
75600: PUSH
75601: LD_INT 70
75603: PUSH
75604: LD_INT 80
75606: PUSH
75607: LD_INT 90
75609: PUSH
75610: LD_INT 100
75612: PUSH
75613: LD_INT 110
75615: PUSH
75616: LD_INT 120
75618: PUSH
75619: LD_INT 130
75621: PUSH
75622: LD_INT 140
75624: PUSH
75625: LD_INT 150
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: PUSH
75645: LD_INT 1
75647: PPUSH
75648: LD_INT 15
75650: PPUSH
75651: CALL_OW 12
75655: ARRAY
75656: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75657: LD_ADDR_VAR 0 4
75661: PUSH
75662: LD_INT 10
75664: PUSH
75665: LD_INT 20
75667: PUSH
75668: LD_INT 30
75670: PUSH
75671: LD_INT 40
75673: PUSH
75674: LD_INT 50
75676: PUSH
75677: LD_INT 60
75679: PUSH
75680: LD_INT 70
75682: PUSH
75683: LD_INT 80
75685: PUSH
75686: LD_INT 90
75688: PUSH
75689: LD_INT 100
75691: PUSH
75692: LD_INT 110
75694: PUSH
75695: LD_INT 120
75697: PUSH
75698: LD_INT 130
75700: PUSH
75701: LD_INT 140
75703: PUSH
75704: LD_INT 150
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: LIST
75711: LIST
75712: LIST
75713: LIST
75714: LIST
75715: LIST
75716: LIST
75717: LIST
75718: LIST
75719: LIST
75720: LIST
75721: LIST
75722: LIST
75723: PUSH
75724: LD_INT 1
75726: PPUSH
75727: LD_INT 15
75729: PPUSH
75730: CALL_OW 12
75734: ARRAY
75735: ST_TO_ADDR
// if ValidHex ( x , y ) then
75736: LD_VAR 0 3
75740: PPUSH
75741: LD_VAR 0 4
75745: PPUSH
75746: CALL_OW 488
75750: IFFALSE 75773
// begin result := [ x , y ] ;
75752: LD_ADDR_VAR 0 1
75756: PUSH
75757: LD_VAR 0 3
75761: PUSH
75762: LD_VAR 0 4
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: ST_TO_ADDR
// break ;
75771: GO 75775
// end ; end ;
75773: GO 75575
75775: POP
75776: POP
// if result then
75777: LD_VAR 0 1
75781: IFFALSE 75841
// begin ToLua ( playSibBomb() ) ;
75783: LD_STRING playSibBomb()
75785: PPUSH
75786: CALL_OW 559
// wait ( 0 0$14 ) ;
75790: LD_INT 490
75792: PPUSH
75793: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
75797: LD_VAR 0 1
75801: PUSH
75802: LD_INT 1
75804: ARRAY
75805: PPUSH
75806: LD_VAR 0 1
75810: PUSH
75811: LD_INT 2
75813: ARRAY
75814: PPUSH
75815: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
75819: LD_VAR 0 1
75823: PUSH
75824: LD_INT 1
75826: ARRAY
75827: PPUSH
75828: LD_VAR 0 1
75832: PUSH
75833: LD_INT 2
75835: ARRAY
75836: PPUSH
75837: CALL_OW 429
// end ; end ;
75841: LD_VAR 0 1
75845: RET
// every 0 0$1 trigger StreamModeActive and sReset do
75846: LD_EXP 107
75850: PUSH
75851: LD_EXP 129
75855: AND
75856: IFFALSE 75868
75858: GO 75860
75860: DISABLE
// YouLost (  ) ;
75861: LD_STRING 
75863: PPUSH
75864: CALL_OW 104
75868: END
// every 0 0$1 trigger StreamModeActive and sFog do
75869: LD_EXP 107
75873: PUSH
75874: LD_EXP 128
75878: AND
75879: IFFALSE 75893
75881: GO 75883
75883: DISABLE
// FogOff ( your_side ) ;
75884: LD_OWVAR 2
75888: PPUSH
75889: CALL_OW 344
75893: END
// every 0 0$1 trigger StreamModeActive and sSun do
75894: LD_EXP 107
75898: PUSH
75899: LD_EXP 130
75903: AND
75904: IFFALSE 75932
75906: GO 75908
75908: DISABLE
// begin solar_recharge_percent := 0 ;
75909: LD_ADDR_OWVAR 79
75913: PUSH
75914: LD_INT 0
75916: ST_TO_ADDR
// wait ( 5 5$00 ) ;
75917: LD_INT 10500
75919: PPUSH
75920: CALL_OW 67
// solar_recharge_percent := 100 ;
75924: LD_ADDR_OWVAR 79
75928: PUSH
75929: LD_INT 100
75931: ST_TO_ADDR
// end ;
75932: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
75933: LD_EXP 107
75937: PUSH
75938: LD_EXP 131
75942: AND
75943: IFFALSE 76182
75945: GO 75947
75947: DISABLE
75948: LD_INT 0
75950: PPUSH
75951: PPUSH
75952: PPUSH
// begin tmp := [ ] ;
75953: LD_ADDR_VAR 0 3
75957: PUSH
75958: EMPTY
75959: ST_TO_ADDR
// for i := 1 to 6 do
75960: LD_ADDR_VAR 0 1
75964: PUSH
75965: DOUBLE
75966: LD_INT 1
75968: DEC
75969: ST_TO_ADDR
75970: LD_INT 6
75972: PUSH
75973: FOR_TO
75974: IFFALSE 76079
// begin uc_nation := nation_nature ;
75976: LD_ADDR_OWVAR 21
75980: PUSH
75981: LD_INT 0
75983: ST_TO_ADDR
// uc_side := 0 ;
75984: LD_ADDR_OWVAR 20
75988: PUSH
75989: LD_INT 0
75991: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75992: LD_ADDR_OWVAR 29
75996: PUSH
75997: LD_INT 12
75999: PUSH
76000: LD_INT 12
76002: PUSH
76003: EMPTY
76004: LIST
76005: LIST
76006: ST_TO_ADDR
// hc_agressivity := 20 ;
76007: LD_ADDR_OWVAR 35
76011: PUSH
76012: LD_INT 20
76014: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
76015: LD_ADDR_OWVAR 28
76019: PUSH
76020: LD_INT 17
76022: ST_TO_ADDR
// hc_gallery :=  ;
76023: LD_ADDR_OWVAR 33
76027: PUSH
76028: LD_STRING 
76030: ST_TO_ADDR
// hc_name :=  ;
76031: LD_ADDR_OWVAR 26
76035: PUSH
76036: LD_STRING 
76038: ST_TO_ADDR
// un := CreateHuman ;
76039: LD_ADDR_VAR 0 2
76043: PUSH
76044: CALL_OW 44
76048: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
76049: LD_VAR 0 2
76053: PPUSH
76054: LD_INT 1
76056: PPUSH
76057: CALL_OW 51
// tmp := tmp ^ un ;
76061: LD_ADDR_VAR 0 3
76065: PUSH
76066: LD_VAR 0 3
76070: PUSH
76071: LD_VAR 0 2
76075: ADD
76076: ST_TO_ADDR
// end ;
76077: GO 75973
76079: POP
76080: POP
// repeat wait ( 0 0$1 ) ;
76081: LD_INT 35
76083: PPUSH
76084: CALL_OW 67
// for un in tmp do
76088: LD_ADDR_VAR 0 2
76092: PUSH
76093: LD_VAR 0 3
76097: PUSH
76098: FOR_IN
76099: IFFALSE 76173
// begin if IsDead ( un ) then
76101: LD_VAR 0 2
76105: PPUSH
76106: CALL_OW 301
76110: IFFALSE 76130
// begin tmp := tmp diff un ;
76112: LD_ADDR_VAR 0 3
76116: PUSH
76117: LD_VAR 0 3
76121: PUSH
76122: LD_VAR 0 2
76126: DIFF
76127: ST_TO_ADDR
// continue ;
76128: GO 76098
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
76130: LD_VAR 0 2
76134: PPUSH
76135: LD_INT 3
76137: PUSH
76138: LD_INT 22
76140: PUSH
76141: LD_INT 0
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: PUSH
76148: EMPTY
76149: LIST
76150: LIST
76151: PPUSH
76152: CALL_OW 69
76156: PPUSH
76157: LD_VAR 0 2
76161: PPUSH
76162: CALL_OW 74
76166: PPUSH
76167: CALL_OW 115
// end ;
76171: GO 76098
76173: POP
76174: POP
// until not tmp ;
76175: LD_VAR 0 3
76179: NOT
76180: IFFALSE 76081
// end ;
76182: PPOPN 3
76184: END
// every 0 0$1 trigger StreamModeActive and sTroll do
76185: LD_EXP 107
76189: PUSH
76190: LD_EXP 132
76194: AND
76195: IFFALSE 76249
76197: GO 76199
76199: DISABLE
// begin ToLua ( displayTroll(); ) ;
76200: LD_STRING displayTroll();
76202: PPUSH
76203: CALL_OW 559
// wait ( 3 3$00 ) ;
76207: LD_INT 6300
76209: PPUSH
76210: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76214: LD_STRING hideTroll();
76216: PPUSH
76217: CALL_OW 559
// wait ( 1 1$00 ) ;
76221: LD_INT 2100
76223: PPUSH
76224: CALL_OW 67
// ToLua ( displayTroll(); ) ;
76228: LD_STRING displayTroll();
76230: PPUSH
76231: CALL_OW 559
// wait ( 1 1$00 ) ;
76235: LD_INT 2100
76237: PPUSH
76238: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76242: LD_STRING hideTroll();
76244: PPUSH
76245: CALL_OW 559
// end ;
76249: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
76250: LD_EXP 107
76254: PUSH
76255: LD_EXP 133
76259: AND
76260: IFFALSE 76323
76262: GO 76264
76264: DISABLE
76265: LD_INT 0
76267: PPUSH
// begin p := 0 ;
76268: LD_ADDR_VAR 0 1
76272: PUSH
76273: LD_INT 0
76275: ST_TO_ADDR
// repeat game_speed := 1 ;
76276: LD_ADDR_OWVAR 65
76280: PUSH
76281: LD_INT 1
76283: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76284: LD_INT 35
76286: PPUSH
76287: CALL_OW 67
// p := p + 1 ;
76291: LD_ADDR_VAR 0 1
76295: PUSH
76296: LD_VAR 0 1
76300: PUSH
76301: LD_INT 1
76303: PLUS
76304: ST_TO_ADDR
// until p >= 60 ;
76305: LD_VAR 0 1
76309: PUSH
76310: LD_INT 60
76312: GREATEREQUAL
76313: IFFALSE 76276
// game_speed := 4 ;
76315: LD_ADDR_OWVAR 65
76319: PUSH
76320: LD_INT 4
76322: ST_TO_ADDR
// end ;
76323: PPOPN 1
76325: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
76326: LD_EXP 107
76330: PUSH
76331: LD_EXP 134
76335: AND
76336: IFFALSE 76482
76338: GO 76340
76340: DISABLE
76341: LD_INT 0
76343: PPUSH
76344: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76345: LD_ADDR_VAR 0 1
76349: PUSH
76350: LD_INT 22
76352: PUSH
76353: LD_OWVAR 2
76357: PUSH
76358: EMPTY
76359: LIST
76360: LIST
76361: PUSH
76362: LD_INT 2
76364: PUSH
76365: LD_INT 30
76367: PUSH
76368: LD_INT 0
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: PUSH
76375: LD_INT 30
76377: PUSH
76378: LD_INT 1
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: LIST
76389: PUSH
76390: EMPTY
76391: LIST
76392: LIST
76393: PPUSH
76394: CALL_OW 69
76398: ST_TO_ADDR
// if not depot then
76399: LD_VAR 0 1
76403: NOT
76404: IFFALSE 76408
// exit ;
76406: GO 76482
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
76408: LD_ADDR_VAR 0 2
76412: PUSH
76413: LD_VAR 0 1
76417: PUSH
76418: LD_INT 1
76420: PPUSH
76421: LD_VAR 0 1
76425: PPUSH
76426: CALL_OW 12
76430: ARRAY
76431: PPUSH
76432: CALL_OW 274
76436: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
76437: LD_VAR 0 2
76441: PPUSH
76442: LD_INT 1
76444: PPUSH
76445: LD_INT 0
76447: PPUSH
76448: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
76452: LD_VAR 0 2
76456: PPUSH
76457: LD_INT 2
76459: PPUSH
76460: LD_INT 0
76462: PPUSH
76463: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
76467: LD_VAR 0 2
76471: PPUSH
76472: LD_INT 3
76474: PPUSH
76475: LD_INT 0
76477: PPUSH
76478: CALL_OW 277
// end ;
76482: PPOPN 2
76484: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
76485: LD_EXP 107
76489: PUSH
76490: LD_EXP 135
76494: AND
76495: IFFALSE 76592
76497: GO 76499
76499: DISABLE
76500: LD_INT 0
76502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76503: LD_ADDR_VAR 0 1
76507: PUSH
76508: LD_INT 22
76510: PUSH
76511: LD_OWVAR 2
76515: PUSH
76516: EMPTY
76517: LIST
76518: LIST
76519: PUSH
76520: LD_INT 21
76522: PUSH
76523: LD_INT 1
76525: PUSH
76526: EMPTY
76527: LIST
76528: LIST
76529: PUSH
76530: LD_INT 3
76532: PUSH
76533: LD_INT 23
76535: PUSH
76536: LD_INT 0
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: PUSH
76543: EMPTY
76544: LIST
76545: LIST
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: LIST
76551: PPUSH
76552: CALL_OW 69
76556: ST_TO_ADDR
// if not tmp then
76557: LD_VAR 0 1
76561: NOT
76562: IFFALSE 76566
// exit ;
76564: GO 76592
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
76566: LD_VAR 0 1
76570: PUSH
76571: LD_INT 1
76573: PPUSH
76574: LD_VAR 0 1
76578: PPUSH
76579: CALL_OW 12
76583: ARRAY
76584: PPUSH
76585: LD_INT 200
76587: PPUSH
76588: CALL_OW 234
// end ;
76592: PPOPN 1
76594: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
76595: LD_EXP 107
76599: PUSH
76600: LD_EXP 136
76604: AND
76605: IFFALSE 76684
76607: GO 76609
76609: DISABLE
76610: LD_INT 0
76612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
76613: LD_ADDR_VAR 0 1
76617: PUSH
76618: LD_INT 22
76620: PUSH
76621: LD_OWVAR 2
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: PUSH
76630: LD_INT 21
76632: PUSH
76633: LD_INT 2
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: PPUSH
76644: CALL_OW 69
76648: ST_TO_ADDR
// if not tmp then
76649: LD_VAR 0 1
76653: NOT
76654: IFFALSE 76658
// exit ;
76656: GO 76684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
76658: LD_VAR 0 1
76662: PUSH
76663: LD_INT 1
76665: PPUSH
76666: LD_VAR 0 1
76670: PPUSH
76671: CALL_OW 12
76675: ARRAY
76676: PPUSH
76677: LD_INT 60
76679: PPUSH
76680: CALL_OW 234
// end ;
76684: PPOPN 1
76686: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
76687: LD_EXP 107
76691: PUSH
76692: LD_EXP 137
76696: AND
76697: IFFALSE 76796
76699: GO 76701
76701: DISABLE
76702: LD_INT 0
76704: PPUSH
76705: PPUSH
// begin enable ;
76706: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
76707: LD_ADDR_VAR 0 1
76711: PUSH
76712: LD_INT 22
76714: PUSH
76715: LD_OWVAR 2
76719: PUSH
76720: EMPTY
76721: LIST
76722: LIST
76723: PUSH
76724: LD_INT 61
76726: PUSH
76727: EMPTY
76728: LIST
76729: PUSH
76730: LD_INT 33
76732: PUSH
76733: LD_INT 2
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: PUSH
76740: EMPTY
76741: LIST
76742: LIST
76743: LIST
76744: PPUSH
76745: CALL_OW 69
76749: ST_TO_ADDR
// if not tmp then
76750: LD_VAR 0 1
76754: NOT
76755: IFFALSE 76759
// exit ;
76757: GO 76796
// for i in tmp do
76759: LD_ADDR_VAR 0 2
76763: PUSH
76764: LD_VAR 0 1
76768: PUSH
76769: FOR_IN
76770: IFFALSE 76794
// if IsControledBy ( i ) then
76772: LD_VAR 0 2
76776: PPUSH
76777: CALL_OW 312
76781: IFFALSE 76792
// ComUnlink ( i ) ;
76783: LD_VAR 0 2
76787: PPUSH
76788: CALL_OW 136
76792: GO 76769
76794: POP
76795: POP
// end ;
76796: PPOPN 2
76798: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
76799: LD_EXP 107
76803: PUSH
76804: LD_EXP 138
76808: AND
76809: IFFALSE 76949
76811: GO 76813
76813: DISABLE
76814: LD_INT 0
76816: PPUSH
76817: PPUSH
// begin ToLua ( displayPowell(); ) ;
76818: LD_STRING displayPowell();
76820: PPUSH
76821: CALL_OW 559
// uc_side := 0 ;
76825: LD_ADDR_OWVAR 20
76829: PUSH
76830: LD_INT 0
76832: ST_TO_ADDR
// uc_nation := 2 ;
76833: LD_ADDR_OWVAR 21
76837: PUSH
76838: LD_INT 2
76840: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
76841: LD_ADDR_OWVAR 37
76845: PUSH
76846: LD_INT 14
76848: ST_TO_ADDR
// vc_engine := engine_siberite ;
76849: LD_ADDR_OWVAR 39
76853: PUSH
76854: LD_INT 3
76856: ST_TO_ADDR
// vc_control := control_apeman ;
76857: LD_ADDR_OWVAR 38
76861: PUSH
76862: LD_INT 5
76864: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
76865: LD_ADDR_OWVAR 40
76869: PUSH
76870: LD_INT 29
76872: ST_TO_ADDR
// un := CreateVehicle ;
76873: LD_ADDR_VAR 0 2
76877: PUSH
76878: CALL_OW 45
76882: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76883: LD_VAR 0 2
76887: PPUSH
76888: LD_INT 1
76890: PPUSH
76891: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76895: LD_INT 35
76897: PPUSH
76898: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76902: LD_VAR 0 2
76906: PPUSH
76907: LD_INT 22
76909: PUSH
76910: LD_OWVAR 2
76914: PUSH
76915: EMPTY
76916: LIST
76917: LIST
76918: PPUSH
76919: CALL_OW 69
76923: PPUSH
76924: LD_VAR 0 2
76928: PPUSH
76929: CALL_OW 74
76933: PPUSH
76934: CALL_OW 115
// until IsDead ( un ) ;
76938: LD_VAR 0 2
76942: PPUSH
76943: CALL_OW 301
76947: IFFALSE 76895
// end ;
76949: PPOPN 2
76951: END
// every 0 0$1 trigger StreamModeActive and sStu do
76952: LD_EXP 107
76956: PUSH
76957: LD_EXP 146
76961: AND
76962: IFFALSE 76978
76964: GO 76966
76966: DISABLE
// begin ToLua ( displayStucuk(); ) ;
76967: LD_STRING displayStucuk();
76969: PPUSH
76970: CALL_OW 559
// ResetFog ;
76974: CALL_OW 335
// end ;
76978: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
76979: LD_EXP 107
76983: PUSH
76984: LD_EXP 139
76988: AND
76989: IFFALSE 77130
76991: GO 76993
76993: DISABLE
76994: LD_INT 0
76996: PPUSH
76997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76998: LD_ADDR_VAR 0 2
77002: PUSH
77003: LD_INT 22
77005: PUSH
77006: LD_OWVAR 2
77010: PUSH
77011: EMPTY
77012: LIST
77013: LIST
77014: PUSH
77015: LD_INT 21
77017: PUSH
77018: LD_INT 1
77020: PUSH
77021: EMPTY
77022: LIST
77023: LIST
77024: PUSH
77025: EMPTY
77026: LIST
77027: LIST
77028: PPUSH
77029: CALL_OW 69
77033: ST_TO_ADDR
// if not tmp then
77034: LD_VAR 0 2
77038: NOT
77039: IFFALSE 77043
// exit ;
77041: GO 77130
// un := tmp [ rand ( 1 , tmp ) ] ;
77043: LD_ADDR_VAR 0 1
77047: PUSH
77048: LD_VAR 0 2
77052: PUSH
77053: LD_INT 1
77055: PPUSH
77056: LD_VAR 0 2
77060: PPUSH
77061: CALL_OW 12
77065: ARRAY
77066: ST_TO_ADDR
// SetSide ( un , 0 ) ;
77067: LD_VAR 0 1
77071: PPUSH
77072: LD_INT 0
77074: PPUSH
77075: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
77079: LD_VAR 0 1
77083: PPUSH
77084: LD_OWVAR 3
77088: PUSH
77089: LD_VAR 0 1
77093: DIFF
77094: PPUSH
77095: LD_VAR 0 1
77099: PPUSH
77100: CALL_OW 74
77104: PPUSH
77105: CALL_OW 115
// wait ( 0 0$20 ) ;
77109: LD_INT 700
77111: PPUSH
77112: CALL_OW 67
// SetSide ( un , your_side ) ;
77116: LD_VAR 0 1
77120: PPUSH
77121: LD_OWVAR 2
77125: PPUSH
77126: CALL_OW 235
// end ;
77130: PPOPN 2
77132: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
77133: LD_EXP 107
77137: PUSH
77138: LD_EXP 140
77142: AND
77143: IFFALSE 77249
77145: GO 77147
77147: DISABLE
77148: LD_INT 0
77150: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77151: LD_ADDR_VAR 0 1
77155: PUSH
77156: LD_INT 22
77158: PUSH
77159: LD_OWVAR 2
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: PUSH
77168: LD_INT 2
77170: PUSH
77171: LD_INT 30
77173: PUSH
77174: LD_INT 0
77176: PUSH
77177: EMPTY
77178: LIST
77179: LIST
77180: PUSH
77181: LD_INT 30
77183: PUSH
77184: LD_INT 1
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: LIST
77195: PUSH
77196: EMPTY
77197: LIST
77198: LIST
77199: PPUSH
77200: CALL_OW 69
77204: ST_TO_ADDR
// if not depot then
77205: LD_VAR 0 1
77209: NOT
77210: IFFALSE 77214
// exit ;
77212: GO 77249
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
77214: LD_VAR 0 1
77218: PUSH
77219: LD_INT 1
77221: ARRAY
77222: PPUSH
77223: CALL_OW 250
77227: PPUSH
77228: LD_VAR 0 1
77232: PUSH
77233: LD_INT 1
77235: ARRAY
77236: PPUSH
77237: CALL_OW 251
77241: PPUSH
77242: LD_INT 70
77244: PPUSH
77245: CALL_OW 495
// end ;
77249: PPOPN 1
77251: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
77252: LD_EXP 107
77256: PUSH
77257: LD_EXP 141
77261: AND
77262: IFFALSE 77473
77264: GO 77266
77266: DISABLE
77267: LD_INT 0
77269: PPUSH
77270: PPUSH
77271: PPUSH
77272: PPUSH
77273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77274: LD_ADDR_VAR 0 5
77278: PUSH
77279: LD_INT 22
77281: PUSH
77282: LD_OWVAR 2
77286: PUSH
77287: EMPTY
77288: LIST
77289: LIST
77290: PUSH
77291: LD_INT 21
77293: PUSH
77294: LD_INT 1
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: PUSH
77301: EMPTY
77302: LIST
77303: LIST
77304: PPUSH
77305: CALL_OW 69
77309: ST_TO_ADDR
// if not tmp then
77310: LD_VAR 0 5
77314: NOT
77315: IFFALSE 77319
// exit ;
77317: GO 77473
// for i in tmp do
77319: LD_ADDR_VAR 0 1
77323: PUSH
77324: LD_VAR 0 5
77328: PUSH
77329: FOR_IN
77330: IFFALSE 77471
// begin d := rand ( 0 , 5 ) ;
77332: LD_ADDR_VAR 0 4
77336: PUSH
77337: LD_INT 0
77339: PPUSH
77340: LD_INT 5
77342: PPUSH
77343: CALL_OW 12
77347: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
77348: LD_ADDR_VAR 0 2
77352: PUSH
77353: LD_VAR 0 1
77357: PPUSH
77358: CALL_OW 250
77362: PPUSH
77363: LD_VAR 0 4
77367: PPUSH
77368: LD_INT 3
77370: PPUSH
77371: LD_INT 12
77373: PPUSH
77374: CALL_OW 12
77378: PPUSH
77379: CALL_OW 272
77383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
77384: LD_ADDR_VAR 0 3
77388: PUSH
77389: LD_VAR 0 1
77393: PPUSH
77394: CALL_OW 251
77398: PPUSH
77399: LD_VAR 0 4
77403: PPUSH
77404: LD_INT 3
77406: PPUSH
77407: LD_INT 12
77409: PPUSH
77410: CALL_OW 12
77414: PPUSH
77415: CALL_OW 273
77419: ST_TO_ADDR
// if ValidHex ( x , y ) then
77420: LD_VAR 0 2
77424: PPUSH
77425: LD_VAR 0 3
77429: PPUSH
77430: CALL_OW 488
77434: IFFALSE 77469
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
77436: LD_VAR 0 1
77440: PPUSH
77441: LD_VAR 0 2
77445: PPUSH
77446: LD_VAR 0 3
77450: PPUSH
77451: LD_INT 3
77453: PPUSH
77454: LD_INT 6
77456: PPUSH
77457: CALL_OW 12
77461: PPUSH
77462: LD_INT 1
77464: PPUSH
77465: CALL_OW 483
// end ;
77469: GO 77329
77471: POP
77472: POP
// end ;
77473: PPOPN 5
77475: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
77476: LD_EXP 107
77480: PUSH
77481: LD_EXP 142
77485: AND
77486: IFFALSE 77580
77488: GO 77490
77490: DISABLE
77491: LD_INT 0
77493: PPUSH
77494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
77495: LD_ADDR_VAR 0 2
77499: PUSH
77500: LD_INT 22
77502: PUSH
77503: LD_OWVAR 2
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PUSH
77512: LD_INT 32
77514: PUSH
77515: LD_INT 1
77517: PUSH
77518: EMPTY
77519: LIST
77520: LIST
77521: PUSH
77522: LD_INT 21
77524: PUSH
77525: LD_INT 2
77527: PUSH
77528: EMPTY
77529: LIST
77530: LIST
77531: PUSH
77532: EMPTY
77533: LIST
77534: LIST
77535: LIST
77536: PPUSH
77537: CALL_OW 69
77541: ST_TO_ADDR
// if not tmp then
77542: LD_VAR 0 2
77546: NOT
77547: IFFALSE 77551
// exit ;
77549: GO 77580
// for i in tmp do
77551: LD_ADDR_VAR 0 1
77555: PUSH
77556: LD_VAR 0 2
77560: PUSH
77561: FOR_IN
77562: IFFALSE 77578
// SetFuel ( i , 0 ) ;
77564: LD_VAR 0 1
77568: PPUSH
77569: LD_INT 0
77571: PPUSH
77572: CALL_OW 240
77576: GO 77561
77578: POP
77579: POP
// end ;
77580: PPOPN 2
77582: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
77583: LD_EXP 107
77587: PUSH
77588: LD_EXP 143
77592: AND
77593: IFFALSE 77659
77595: GO 77597
77597: DISABLE
77598: LD_INT 0
77600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77601: LD_ADDR_VAR 0 1
77605: PUSH
77606: LD_INT 22
77608: PUSH
77609: LD_OWVAR 2
77613: PUSH
77614: EMPTY
77615: LIST
77616: LIST
77617: PUSH
77618: LD_INT 30
77620: PUSH
77621: LD_INT 29
77623: PUSH
77624: EMPTY
77625: LIST
77626: LIST
77627: PUSH
77628: EMPTY
77629: LIST
77630: LIST
77631: PPUSH
77632: CALL_OW 69
77636: ST_TO_ADDR
// if not tmp then
77637: LD_VAR 0 1
77641: NOT
77642: IFFALSE 77646
// exit ;
77644: GO 77659
// DestroyUnit ( tmp [ 1 ] ) ;
77646: LD_VAR 0 1
77650: PUSH
77651: LD_INT 1
77653: ARRAY
77654: PPUSH
77655: CALL_OW 65
// end ;
77659: PPOPN 1
77661: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
77662: LD_EXP 107
77666: PUSH
77667: LD_EXP 145
77671: AND
77672: IFFALSE 77801
77674: GO 77676
77676: DISABLE
77677: LD_INT 0
77679: PPUSH
// begin uc_side := 0 ;
77680: LD_ADDR_OWVAR 20
77684: PUSH
77685: LD_INT 0
77687: ST_TO_ADDR
// uc_nation := nation_arabian ;
77688: LD_ADDR_OWVAR 21
77692: PUSH
77693: LD_INT 2
77695: ST_TO_ADDR
// hc_gallery :=  ;
77696: LD_ADDR_OWVAR 33
77700: PUSH
77701: LD_STRING 
77703: ST_TO_ADDR
// hc_name :=  ;
77704: LD_ADDR_OWVAR 26
77708: PUSH
77709: LD_STRING 
77711: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
77712: LD_INT 1
77714: PPUSH
77715: LD_INT 11
77717: PPUSH
77718: LD_INT 10
77720: PPUSH
77721: CALL_OW 380
// un := CreateHuman ;
77725: LD_ADDR_VAR 0 1
77729: PUSH
77730: CALL_OW 44
77734: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77735: LD_VAR 0 1
77739: PPUSH
77740: LD_INT 1
77742: PPUSH
77743: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77747: LD_INT 35
77749: PPUSH
77750: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77754: LD_VAR 0 1
77758: PPUSH
77759: LD_INT 22
77761: PUSH
77762: LD_OWVAR 2
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PPUSH
77771: CALL_OW 69
77775: PPUSH
77776: LD_VAR 0 1
77780: PPUSH
77781: CALL_OW 74
77785: PPUSH
77786: CALL_OW 115
// until IsDead ( un ) ;
77790: LD_VAR 0 1
77794: PPUSH
77795: CALL_OW 301
77799: IFFALSE 77747
// end ;
77801: PPOPN 1
77803: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
77804: LD_EXP 107
77808: PUSH
77809: LD_EXP 147
77813: AND
77814: IFFALSE 77826
77816: GO 77818
77818: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
77819: LD_STRING earthquake(getX(game), 0, 32)
77821: PPUSH
77822: CALL_OW 559
77826: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
77827: LD_EXP 107
77831: PUSH
77832: LD_EXP 148
77836: AND
77837: IFFALSE 77928
77839: GO 77841
77841: DISABLE
77842: LD_INT 0
77844: PPUSH
// begin enable ;
77845: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
77846: LD_ADDR_VAR 0 1
77850: PUSH
77851: LD_INT 22
77853: PUSH
77854: LD_OWVAR 2
77858: PUSH
77859: EMPTY
77860: LIST
77861: LIST
77862: PUSH
77863: LD_INT 21
77865: PUSH
77866: LD_INT 2
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: PUSH
77873: LD_INT 33
77875: PUSH
77876: LD_INT 3
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: LIST
77887: PPUSH
77888: CALL_OW 69
77892: ST_TO_ADDR
// if not tmp then
77893: LD_VAR 0 1
77897: NOT
77898: IFFALSE 77902
// exit ;
77900: GO 77928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77902: LD_VAR 0 1
77906: PUSH
77907: LD_INT 1
77909: PPUSH
77910: LD_VAR 0 1
77914: PPUSH
77915: CALL_OW 12
77919: ARRAY
77920: PPUSH
77921: LD_INT 1
77923: PPUSH
77924: CALL_OW 234
// end ;
77928: PPOPN 1
77930: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
77931: LD_EXP 107
77935: PUSH
77936: LD_EXP 149
77940: AND
77941: IFFALSE 78082
77943: GO 77945
77945: DISABLE
77946: LD_INT 0
77948: PPUSH
77949: PPUSH
77950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77951: LD_ADDR_VAR 0 3
77955: PUSH
77956: LD_INT 22
77958: PUSH
77959: LD_OWVAR 2
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: PUSH
77968: LD_INT 25
77970: PUSH
77971: LD_INT 1
77973: PUSH
77974: EMPTY
77975: LIST
77976: LIST
77977: PUSH
77978: EMPTY
77979: LIST
77980: LIST
77981: PPUSH
77982: CALL_OW 69
77986: ST_TO_ADDR
// if not tmp then
77987: LD_VAR 0 3
77991: NOT
77992: IFFALSE 77996
// exit ;
77994: GO 78082
// un := tmp [ rand ( 1 , tmp ) ] ;
77996: LD_ADDR_VAR 0 2
78000: PUSH
78001: LD_VAR 0 3
78005: PUSH
78006: LD_INT 1
78008: PPUSH
78009: LD_VAR 0 3
78013: PPUSH
78014: CALL_OW 12
78018: ARRAY
78019: ST_TO_ADDR
// if Crawls ( un ) then
78020: LD_VAR 0 2
78024: PPUSH
78025: CALL_OW 318
78029: IFFALSE 78040
// ComWalk ( un ) ;
78031: LD_VAR 0 2
78035: PPUSH
78036: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
78040: LD_VAR 0 2
78044: PPUSH
78045: LD_INT 9
78047: PPUSH
78048: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
78052: LD_INT 28
78054: PPUSH
78055: LD_OWVAR 2
78059: PPUSH
78060: LD_INT 2
78062: PPUSH
78063: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
78067: LD_INT 29
78069: PPUSH
78070: LD_OWVAR 2
78074: PPUSH
78075: LD_INT 2
78077: PPUSH
78078: CALL_OW 322
// end ;
78082: PPOPN 3
78084: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
78085: LD_EXP 107
78089: PUSH
78090: LD_EXP 150
78094: AND
78095: IFFALSE 78206
78097: GO 78099
78099: DISABLE
78100: LD_INT 0
78102: PPUSH
78103: PPUSH
78104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78105: LD_ADDR_VAR 0 3
78109: PUSH
78110: LD_INT 22
78112: PUSH
78113: LD_OWVAR 2
78117: PUSH
78118: EMPTY
78119: LIST
78120: LIST
78121: PUSH
78122: LD_INT 25
78124: PUSH
78125: LD_INT 1
78127: PUSH
78128: EMPTY
78129: LIST
78130: LIST
78131: PUSH
78132: EMPTY
78133: LIST
78134: LIST
78135: PPUSH
78136: CALL_OW 69
78140: ST_TO_ADDR
// if not tmp then
78141: LD_VAR 0 3
78145: NOT
78146: IFFALSE 78150
// exit ;
78148: GO 78206
// un := tmp [ rand ( 1 , tmp ) ] ;
78150: LD_ADDR_VAR 0 2
78154: PUSH
78155: LD_VAR 0 3
78159: PUSH
78160: LD_INT 1
78162: PPUSH
78163: LD_VAR 0 3
78167: PPUSH
78168: CALL_OW 12
78172: ARRAY
78173: ST_TO_ADDR
// if Crawls ( un ) then
78174: LD_VAR 0 2
78178: PPUSH
78179: CALL_OW 318
78183: IFFALSE 78194
// ComWalk ( un ) ;
78185: LD_VAR 0 2
78189: PPUSH
78190: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78194: LD_VAR 0 2
78198: PPUSH
78199: LD_INT 8
78201: PPUSH
78202: CALL_OW 336
// end ;
78206: PPOPN 3
78208: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
78209: LD_EXP 107
78213: PUSH
78214: LD_EXP 151
78218: AND
78219: IFFALSE 78363
78221: GO 78223
78223: DISABLE
78224: LD_INT 0
78226: PPUSH
78227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
78228: LD_ADDR_VAR 0 2
78232: PUSH
78233: LD_INT 22
78235: PUSH
78236: LD_OWVAR 2
78240: PUSH
78241: EMPTY
78242: LIST
78243: LIST
78244: PUSH
78245: LD_INT 21
78247: PUSH
78248: LD_INT 2
78250: PUSH
78251: EMPTY
78252: LIST
78253: LIST
78254: PUSH
78255: LD_INT 2
78257: PUSH
78258: LD_INT 34
78260: PUSH
78261: LD_INT 12
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: PUSH
78268: LD_INT 34
78270: PUSH
78271: LD_INT 51
78273: PUSH
78274: EMPTY
78275: LIST
78276: LIST
78277: PUSH
78278: LD_INT 34
78280: PUSH
78281: LD_INT 32
78283: PUSH
78284: EMPTY
78285: LIST
78286: LIST
78287: PUSH
78288: EMPTY
78289: LIST
78290: LIST
78291: LIST
78292: LIST
78293: PUSH
78294: EMPTY
78295: LIST
78296: LIST
78297: LIST
78298: PPUSH
78299: CALL_OW 69
78303: ST_TO_ADDR
// if not tmp then
78304: LD_VAR 0 2
78308: NOT
78309: IFFALSE 78313
// exit ;
78311: GO 78363
// for i in tmp do
78313: LD_ADDR_VAR 0 1
78317: PUSH
78318: LD_VAR 0 2
78322: PUSH
78323: FOR_IN
78324: IFFALSE 78361
// if GetCargo ( i , mat_artifact ) = 0 then
78326: LD_VAR 0 1
78330: PPUSH
78331: LD_INT 4
78333: PPUSH
78334: CALL_OW 289
78338: PUSH
78339: LD_INT 0
78341: EQUAL
78342: IFFALSE 78359
// SetCargo ( i , mat_siberit , 100 ) ;
78344: LD_VAR 0 1
78348: PPUSH
78349: LD_INT 3
78351: PPUSH
78352: LD_INT 100
78354: PPUSH
78355: CALL_OW 290
78359: GO 78323
78361: POP
78362: POP
// end ;
78363: PPOPN 2
78365: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
78366: LD_EXP 107
78370: PUSH
78371: LD_EXP 152
78375: AND
78376: IFFALSE 78559
78378: GO 78380
78380: DISABLE
78381: LD_INT 0
78383: PPUSH
78384: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78385: LD_ADDR_VAR 0 2
78389: PUSH
78390: LD_INT 22
78392: PUSH
78393: LD_OWVAR 2
78397: PUSH
78398: EMPTY
78399: LIST
78400: LIST
78401: PPUSH
78402: CALL_OW 69
78406: ST_TO_ADDR
// if not tmp then
78407: LD_VAR 0 2
78411: NOT
78412: IFFALSE 78416
// exit ;
78414: GO 78559
// for i := 1 to 2 do
78416: LD_ADDR_VAR 0 1
78420: PUSH
78421: DOUBLE
78422: LD_INT 1
78424: DEC
78425: ST_TO_ADDR
78426: LD_INT 2
78428: PUSH
78429: FOR_TO
78430: IFFALSE 78557
// begin uc_side := your_side ;
78432: LD_ADDR_OWVAR 20
78436: PUSH
78437: LD_OWVAR 2
78441: ST_TO_ADDR
// uc_nation := nation_american ;
78442: LD_ADDR_OWVAR 21
78446: PUSH
78447: LD_INT 1
78449: ST_TO_ADDR
// vc_chassis := us_morphling ;
78450: LD_ADDR_OWVAR 37
78454: PUSH
78455: LD_INT 5
78457: ST_TO_ADDR
// vc_engine := engine_siberite ;
78458: LD_ADDR_OWVAR 39
78462: PUSH
78463: LD_INT 3
78465: ST_TO_ADDR
// vc_control := control_computer ;
78466: LD_ADDR_OWVAR 38
78470: PUSH
78471: LD_INT 3
78473: ST_TO_ADDR
// vc_weapon := us_double_laser ;
78474: LD_ADDR_OWVAR 40
78478: PUSH
78479: LD_INT 10
78481: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
78482: LD_VAR 0 2
78486: PUSH
78487: LD_INT 1
78489: ARRAY
78490: PPUSH
78491: CALL_OW 310
78495: NOT
78496: IFFALSE 78543
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
78498: CALL_OW 45
78502: PPUSH
78503: LD_VAR 0 2
78507: PUSH
78508: LD_INT 1
78510: ARRAY
78511: PPUSH
78512: CALL_OW 250
78516: PPUSH
78517: LD_VAR 0 2
78521: PUSH
78522: LD_INT 1
78524: ARRAY
78525: PPUSH
78526: CALL_OW 251
78530: PPUSH
78531: LD_INT 12
78533: PPUSH
78534: LD_INT 1
78536: PPUSH
78537: CALL_OW 50
78541: GO 78555
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
78543: CALL_OW 45
78547: PPUSH
78548: LD_INT 1
78550: PPUSH
78551: CALL_OW 51
// end ;
78555: GO 78429
78557: POP
78558: POP
// end ;
78559: PPOPN 2
78561: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
78562: LD_EXP 107
78566: PUSH
78567: LD_EXP 153
78571: AND
78572: IFFALSE 78794
78574: GO 78576
78576: DISABLE
78577: LD_INT 0
78579: PPUSH
78580: PPUSH
78581: PPUSH
78582: PPUSH
78583: PPUSH
78584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78585: LD_ADDR_VAR 0 6
78589: PUSH
78590: LD_INT 22
78592: PUSH
78593: LD_OWVAR 2
78597: PUSH
78598: EMPTY
78599: LIST
78600: LIST
78601: PUSH
78602: LD_INT 21
78604: PUSH
78605: LD_INT 1
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: PUSH
78612: LD_INT 3
78614: PUSH
78615: LD_INT 23
78617: PUSH
78618: LD_INT 0
78620: PUSH
78621: EMPTY
78622: LIST
78623: LIST
78624: PUSH
78625: EMPTY
78626: LIST
78627: LIST
78628: PUSH
78629: EMPTY
78630: LIST
78631: LIST
78632: LIST
78633: PPUSH
78634: CALL_OW 69
78638: ST_TO_ADDR
// if not tmp then
78639: LD_VAR 0 6
78643: NOT
78644: IFFALSE 78648
// exit ;
78646: GO 78794
// s1 := rand ( 1 , 4 ) ;
78648: LD_ADDR_VAR 0 2
78652: PUSH
78653: LD_INT 1
78655: PPUSH
78656: LD_INT 4
78658: PPUSH
78659: CALL_OW 12
78663: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
78664: LD_ADDR_VAR 0 4
78668: PUSH
78669: LD_VAR 0 6
78673: PUSH
78674: LD_INT 1
78676: ARRAY
78677: PPUSH
78678: LD_VAR 0 2
78682: PPUSH
78683: CALL_OW 259
78687: ST_TO_ADDR
// if s1 = 1 then
78688: LD_VAR 0 2
78692: PUSH
78693: LD_INT 1
78695: EQUAL
78696: IFFALSE 78716
// s2 := rand ( 2 , 4 ) else
78698: LD_ADDR_VAR 0 3
78702: PUSH
78703: LD_INT 2
78705: PPUSH
78706: LD_INT 4
78708: PPUSH
78709: CALL_OW 12
78713: ST_TO_ADDR
78714: GO 78724
// s2 := 1 ;
78716: LD_ADDR_VAR 0 3
78720: PUSH
78721: LD_INT 1
78723: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
78724: LD_ADDR_VAR 0 5
78728: PUSH
78729: LD_VAR 0 6
78733: PUSH
78734: LD_INT 1
78736: ARRAY
78737: PPUSH
78738: LD_VAR 0 3
78742: PPUSH
78743: CALL_OW 259
78747: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
78748: LD_VAR 0 6
78752: PUSH
78753: LD_INT 1
78755: ARRAY
78756: PPUSH
78757: LD_VAR 0 2
78761: PPUSH
78762: LD_VAR 0 5
78766: PPUSH
78767: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
78771: LD_VAR 0 6
78775: PUSH
78776: LD_INT 1
78778: ARRAY
78779: PPUSH
78780: LD_VAR 0 3
78784: PPUSH
78785: LD_VAR 0 4
78789: PPUSH
78790: CALL_OW 237
// end ;
78794: PPOPN 6
78796: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
78797: LD_EXP 107
78801: PUSH
78802: LD_EXP 154
78806: AND
78807: IFFALSE 78886
78809: GO 78811
78811: DISABLE
78812: LD_INT 0
78814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
78815: LD_ADDR_VAR 0 1
78819: PUSH
78820: LD_INT 22
78822: PUSH
78823: LD_OWVAR 2
78827: PUSH
78828: EMPTY
78829: LIST
78830: LIST
78831: PUSH
78832: LD_INT 30
78834: PUSH
78835: LD_INT 3
78837: PUSH
78838: EMPTY
78839: LIST
78840: LIST
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: PPUSH
78846: CALL_OW 69
78850: ST_TO_ADDR
// if not tmp then
78851: LD_VAR 0 1
78855: NOT
78856: IFFALSE 78860
// exit ;
78858: GO 78886
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78860: LD_VAR 0 1
78864: PUSH
78865: LD_INT 1
78867: PPUSH
78868: LD_VAR 0 1
78872: PPUSH
78873: CALL_OW 12
78877: ARRAY
78878: PPUSH
78879: LD_INT 1
78881: PPUSH
78882: CALL_OW 234
// end ;
78886: PPOPN 1
78888: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
78889: LD_EXP 107
78893: PUSH
78894: LD_EXP 155
78898: AND
78899: IFFALSE 79011
78901: GO 78903
78903: DISABLE
78904: LD_INT 0
78906: PPUSH
78907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
78908: LD_ADDR_VAR 0 2
78912: PUSH
78913: LD_INT 22
78915: PUSH
78916: LD_OWVAR 2
78920: PUSH
78921: EMPTY
78922: LIST
78923: LIST
78924: PUSH
78925: LD_INT 2
78927: PUSH
78928: LD_INT 30
78930: PUSH
78931: LD_INT 27
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: PUSH
78938: LD_INT 30
78940: PUSH
78941: LD_INT 26
78943: PUSH
78944: EMPTY
78945: LIST
78946: LIST
78947: PUSH
78948: LD_INT 30
78950: PUSH
78951: LD_INT 28
78953: PUSH
78954: EMPTY
78955: LIST
78956: LIST
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: PUSH
78964: EMPTY
78965: LIST
78966: LIST
78967: PPUSH
78968: CALL_OW 69
78972: ST_TO_ADDR
// if not tmp then
78973: LD_VAR 0 2
78977: NOT
78978: IFFALSE 78982
// exit ;
78980: GO 79011
// for i in tmp do
78982: LD_ADDR_VAR 0 1
78986: PUSH
78987: LD_VAR 0 2
78991: PUSH
78992: FOR_IN
78993: IFFALSE 79009
// SetLives ( i , 1 ) ;
78995: LD_VAR 0 1
78999: PPUSH
79000: LD_INT 1
79002: PPUSH
79003: CALL_OW 234
79007: GO 78992
79009: POP
79010: POP
// end ;
79011: PPOPN 2
79013: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
79014: LD_EXP 107
79018: PUSH
79019: LD_EXP 156
79023: AND
79024: IFFALSE 79298
79026: GO 79028
79028: DISABLE
79029: LD_INT 0
79031: PPUSH
79032: PPUSH
79033: PPUSH
// begin i := rand ( 1 , 7 ) ;
79034: LD_ADDR_VAR 0 1
79038: PUSH
79039: LD_INT 1
79041: PPUSH
79042: LD_INT 7
79044: PPUSH
79045: CALL_OW 12
79049: ST_TO_ADDR
// case i of 1 :
79050: LD_VAR 0 1
79054: PUSH
79055: LD_INT 1
79057: DOUBLE
79058: EQUAL
79059: IFTRUE 79063
79061: GO 79073
79063: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
79064: LD_STRING earthquake(getX(game), 0, 32)
79066: PPUSH
79067: CALL_OW 559
79071: GO 79298
79073: LD_INT 2
79075: DOUBLE
79076: EQUAL
79077: IFTRUE 79081
79079: GO 79095
79081: POP
// begin ToLua ( displayStucuk(); ) ;
79082: LD_STRING displayStucuk();
79084: PPUSH
79085: CALL_OW 559
// ResetFog ;
79089: CALL_OW 335
// end ; 3 :
79093: GO 79298
79095: LD_INT 3
79097: DOUBLE
79098: EQUAL
79099: IFTRUE 79103
79101: GO 79207
79103: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79104: LD_ADDR_VAR 0 2
79108: PUSH
79109: LD_INT 22
79111: PUSH
79112: LD_OWVAR 2
79116: PUSH
79117: EMPTY
79118: LIST
79119: LIST
79120: PUSH
79121: LD_INT 25
79123: PUSH
79124: LD_INT 1
79126: PUSH
79127: EMPTY
79128: LIST
79129: LIST
79130: PUSH
79131: EMPTY
79132: LIST
79133: LIST
79134: PPUSH
79135: CALL_OW 69
79139: ST_TO_ADDR
// if not tmp then
79140: LD_VAR 0 2
79144: NOT
79145: IFFALSE 79149
// exit ;
79147: GO 79298
// un := tmp [ rand ( 1 , tmp ) ] ;
79149: LD_ADDR_VAR 0 3
79153: PUSH
79154: LD_VAR 0 2
79158: PUSH
79159: LD_INT 1
79161: PPUSH
79162: LD_VAR 0 2
79166: PPUSH
79167: CALL_OW 12
79171: ARRAY
79172: ST_TO_ADDR
// if Crawls ( un ) then
79173: LD_VAR 0 3
79177: PPUSH
79178: CALL_OW 318
79182: IFFALSE 79193
// ComWalk ( un ) ;
79184: LD_VAR 0 3
79188: PPUSH
79189: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79193: LD_VAR 0 3
79197: PPUSH
79198: LD_INT 8
79200: PPUSH
79201: CALL_OW 336
// end ; 4 :
79205: GO 79298
79207: LD_INT 4
79209: DOUBLE
79210: EQUAL
79211: IFTRUE 79215
79213: GO 79276
79215: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79216: LD_ADDR_VAR 0 2
79220: PUSH
79221: LD_INT 22
79223: PUSH
79224: LD_OWVAR 2
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: PUSH
79233: LD_INT 30
79235: PUSH
79236: LD_INT 29
79238: PUSH
79239: EMPTY
79240: LIST
79241: LIST
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: PPUSH
79247: CALL_OW 69
79251: ST_TO_ADDR
// if not tmp then
79252: LD_VAR 0 2
79256: NOT
79257: IFFALSE 79261
// exit ;
79259: GO 79298
// DestroyUnit ( tmp [ 1 ] ) ;
79261: LD_VAR 0 2
79265: PUSH
79266: LD_INT 1
79268: ARRAY
79269: PPUSH
79270: CALL_OW 65
// end ; 5 .. 7 :
79274: GO 79298
79276: LD_INT 5
79278: DOUBLE
79279: GREATEREQUAL
79280: IFFALSE 79288
79282: LD_INT 7
79284: DOUBLE
79285: LESSEQUAL
79286: IFTRUE 79290
79288: GO 79297
79290: POP
// StreamSibBomb ; end ;
79291: CALL 75548 0 0
79295: GO 79298
79297: POP
// end ;
79298: PPOPN 3
79300: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
79301: LD_EXP 107
79305: PUSH
79306: LD_EXP 157
79310: AND
79311: IFFALSE 79467
79313: GO 79315
79315: DISABLE
79316: LD_INT 0
79318: PPUSH
79319: PPUSH
79320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
79321: LD_ADDR_VAR 0 2
79325: PUSH
79326: LD_INT 81
79328: PUSH
79329: LD_OWVAR 2
79333: PUSH
79334: EMPTY
79335: LIST
79336: LIST
79337: PUSH
79338: LD_INT 2
79340: PUSH
79341: LD_INT 21
79343: PUSH
79344: LD_INT 1
79346: PUSH
79347: EMPTY
79348: LIST
79349: LIST
79350: PUSH
79351: LD_INT 21
79353: PUSH
79354: LD_INT 2
79356: PUSH
79357: EMPTY
79358: LIST
79359: LIST
79360: PUSH
79361: EMPTY
79362: LIST
79363: LIST
79364: LIST
79365: PUSH
79366: EMPTY
79367: LIST
79368: LIST
79369: PPUSH
79370: CALL_OW 69
79374: ST_TO_ADDR
// if not tmp then
79375: LD_VAR 0 2
79379: NOT
79380: IFFALSE 79384
// exit ;
79382: GO 79467
// p := 0 ;
79384: LD_ADDR_VAR 0 3
79388: PUSH
79389: LD_INT 0
79391: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79392: LD_INT 35
79394: PPUSH
79395: CALL_OW 67
// p := p + 1 ;
79399: LD_ADDR_VAR 0 3
79403: PUSH
79404: LD_VAR 0 3
79408: PUSH
79409: LD_INT 1
79411: PLUS
79412: ST_TO_ADDR
// for i in tmp do
79413: LD_ADDR_VAR 0 1
79417: PUSH
79418: LD_VAR 0 2
79422: PUSH
79423: FOR_IN
79424: IFFALSE 79455
// if GetLives ( i ) < 1000 then
79426: LD_VAR 0 1
79430: PPUSH
79431: CALL_OW 256
79435: PUSH
79436: LD_INT 1000
79438: LESS
79439: IFFALSE 79453
// SetLives ( i , 1000 ) ;
79441: LD_VAR 0 1
79445: PPUSH
79446: LD_INT 1000
79448: PPUSH
79449: CALL_OW 234
79453: GO 79423
79455: POP
79456: POP
// until p > 20 ;
79457: LD_VAR 0 3
79461: PUSH
79462: LD_INT 20
79464: GREATER
79465: IFFALSE 79392
// end ;
79467: PPOPN 3
79469: END
// every 0 0$1 trigger StreamModeActive and sTime do
79470: LD_EXP 107
79474: PUSH
79475: LD_EXP 158
79479: AND
79480: IFFALSE 79515
79482: GO 79484
79484: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
79485: LD_INT 28
79487: PPUSH
79488: LD_OWVAR 2
79492: PPUSH
79493: LD_INT 2
79495: PPUSH
79496: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
79500: LD_INT 30
79502: PPUSH
79503: LD_OWVAR 2
79507: PPUSH
79508: LD_INT 2
79510: PPUSH
79511: CALL_OW 322
// end ;
79515: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
79516: LD_EXP 107
79520: PUSH
79521: LD_EXP 159
79525: AND
79526: IFFALSE 79647
79528: GO 79530
79530: DISABLE
79531: LD_INT 0
79533: PPUSH
79534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79535: LD_ADDR_VAR 0 2
79539: PUSH
79540: LD_INT 22
79542: PUSH
79543: LD_OWVAR 2
79547: PUSH
79548: EMPTY
79549: LIST
79550: LIST
79551: PUSH
79552: LD_INT 21
79554: PUSH
79555: LD_INT 1
79557: PUSH
79558: EMPTY
79559: LIST
79560: LIST
79561: PUSH
79562: LD_INT 3
79564: PUSH
79565: LD_INT 23
79567: PUSH
79568: LD_INT 0
79570: PUSH
79571: EMPTY
79572: LIST
79573: LIST
79574: PUSH
79575: EMPTY
79576: LIST
79577: LIST
79578: PUSH
79579: EMPTY
79580: LIST
79581: LIST
79582: LIST
79583: PPUSH
79584: CALL_OW 69
79588: ST_TO_ADDR
// if not tmp then
79589: LD_VAR 0 2
79593: NOT
79594: IFFALSE 79598
// exit ;
79596: GO 79647
// for i in tmp do
79598: LD_ADDR_VAR 0 1
79602: PUSH
79603: LD_VAR 0 2
79607: PUSH
79608: FOR_IN
79609: IFFALSE 79645
// begin if Crawls ( i ) then
79611: LD_VAR 0 1
79615: PPUSH
79616: CALL_OW 318
79620: IFFALSE 79631
// ComWalk ( i ) ;
79622: LD_VAR 0 1
79626: PPUSH
79627: CALL_OW 138
// SetClass ( i , 2 ) ;
79631: LD_VAR 0 1
79635: PPUSH
79636: LD_INT 2
79638: PPUSH
79639: CALL_OW 336
// end ;
79643: GO 79608
79645: POP
79646: POP
// end ;
79647: PPOPN 2
79649: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
79650: LD_EXP 107
79654: PUSH
79655: LD_EXP 160
79659: AND
79660: IFFALSE 79941
79662: GO 79664
79664: DISABLE
79665: LD_INT 0
79667: PPUSH
79668: PPUSH
79669: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
79670: LD_OWVAR 2
79674: PPUSH
79675: LD_INT 9
79677: PPUSH
79678: LD_INT 1
79680: PPUSH
79681: LD_INT 1
79683: PPUSH
79684: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
79688: LD_INT 9
79690: PPUSH
79691: LD_OWVAR 2
79695: PPUSH
79696: CALL_OW 343
// uc_side := 9 ;
79700: LD_ADDR_OWVAR 20
79704: PUSH
79705: LD_INT 9
79707: ST_TO_ADDR
// uc_nation := 2 ;
79708: LD_ADDR_OWVAR 21
79712: PUSH
79713: LD_INT 2
79715: ST_TO_ADDR
// hc_name := Dark Warrior ;
79716: LD_ADDR_OWVAR 26
79720: PUSH
79721: LD_STRING Dark Warrior
79723: ST_TO_ADDR
// hc_gallery :=  ;
79724: LD_ADDR_OWVAR 33
79728: PUSH
79729: LD_STRING 
79731: ST_TO_ADDR
// hc_noskilllimit := true ;
79732: LD_ADDR_OWVAR 76
79736: PUSH
79737: LD_INT 1
79739: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
79740: LD_ADDR_OWVAR 31
79744: PUSH
79745: LD_INT 30
79747: PUSH
79748: LD_INT 30
79750: PUSH
79751: LD_INT 30
79753: PUSH
79754: LD_INT 30
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: LIST
79761: LIST
79762: ST_TO_ADDR
// un := CreateHuman ;
79763: LD_ADDR_VAR 0 3
79767: PUSH
79768: CALL_OW 44
79772: ST_TO_ADDR
// hc_noskilllimit := false ;
79773: LD_ADDR_OWVAR 76
79777: PUSH
79778: LD_INT 0
79780: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79781: LD_VAR 0 3
79785: PPUSH
79786: LD_INT 1
79788: PPUSH
79789: CALL_OW 51
// p := 0 ;
79793: LD_ADDR_VAR 0 2
79797: PUSH
79798: LD_INT 0
79800: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79801: LD_INT 35
79803: PPUSH
79804: CALL_OW 67
// p := p + 1 ;
79808: LD_ADDR_VAR 0 2
79812: PUSH
79813: LD_VAR 0 2
79817: PUSH
79818: LD_INT 1
79820: PLUS
79821: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
79822: LD_VAR 0 3
79826: PPUSH
79827: CALL_OW 256
79831: PUSH
79832: LD_INT 1000
79834: LESS
79835: IFFALSE 79849
// SetLives ( un , 1000 ) ;
79837: LD_VAR 0 3
79841: PPUSH
79842: LD_INT 1000
79844: PPUSH
79845: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
79849: LD_VAR 0 3
79853: PPUSH
79854: LD_INT 81
79856: PUSH
79857: LD_OWVAR 2
79861: PUSH
79862: EMPTY
79863: LIST
79864: LIST
79865: PUSH
79866: LD_INT 91
79868: PUSH
79869: LD_VAR 0 3
79873: PUSH
79874: LD_INT 30
79876: PUSH
79877: EMPTY
79878: LIST
79879: LIST
79880: LIST
79881: PUSH
79882: EMPTY
79883: LIST
79884: LIST
79885: PPUSH
79886: CALL_OW 69
79890: PPUSH
79891: LD_VAR 0 3
79895: PPUSH
79896: CALL_OW 74
79900: PPUSH
79901: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
79905: LD_VAR 0 2
79909: PUSH
79910: LD_INT 60
79912: GREATER
79913: PUSH
79914: LD_VAR 0 3
79918: PPUSH
79919: CALL_OW 301
79923: OR
79924: IFFALSE 79801
// if un then
79926: LD_VAR 0 3
79930: IFFALSE 79941
// RemoveUnit ( un ) ;
79932: LD_VAR 0 3
79936: PPUSH
79937: CALL_OW 64
// end ;
79941: PPOPN 3
79943: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79944: LD_INT 0
79946: PPUSH
79947: PPUSH
79948: PPUSH
79949: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79950: LD_ADDR_VAR 0 4
79954: PUSH
79955: LD_INT 22
79957: PUSH
79958: LD_OWVAR 2
79962: PUSH
79963: EMPTY
79964: LIST
79965: LIST
79966: PUSH
79967: LD_INT 2
79969: PUSH
79970: LD_INT 30
79972: PUSH
79973: LD_INT 0
79975: PUSH
79976: EMPTY
79977: LIST
79978: LIST
79979: PUSH
79980: LD_INT 30
79982: PUSH
79983: LD_INT 1
79985: PUSH
79986: EMPTY
79987: LIST
79988: LIST
79989: PUSH
79990: EMPTY
79991: LIST
79992: LIST
79993: LIST
79994: PUSH
79995: EMPTY
79996: LIST
79997: LIST
79998: PPUSH
79999: CALL_OW 69
80003: ST_TO_ADDR
// if not tmp then
80004: LD_VAR 0 4
80008: NOT
80009: IFFALSE 80013
// exit ;
80011: GO 80072
// for i in tmp do
80013: LD_ADDR_VAR 0 2
80017: PUSH
80018: LD_VAR 0 4
80022: PUSH
80023: FOR_IN
80024: IFFALSE 80070
// for j = 1 to 3 do
80026: LD_ADDR_VAR 0 3
80030: PUSH
80031: DOUBLE
80032: LD_INT 1
80034: DEC
80035: ST_TO_ADDR
80036: LD_INT 3
80038: PUSH
80039: FOR_TO
80040: IFFALSE 80066
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
80042: LD_VAR 0 2
80046: PPUSH
80047: CALL_OW 274
80051: PPUSH
80052: LD_VAR 0 3
80056: PPUSH
80057: LD_INT 99999
80059: PPUSH
80060: CALL_OW 277
80064: GO 80039
80066: POP
80067: POP
80068: GO 80023
80070: POP
80071: POP
// end ;
80072: LD_VAR 0 1
80076: RET
// export function hHackSetLevel10 ; var i , j ; begin
80077: LD_INT 0
80079: PPUSH
80080: PPUSH
80081: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80082: LD_ADDR_VAR 0 2
80086: PUSH
80087: LD_INT 21
80089: PUSH
80090: LD_INT 1
80092: PUSH
80093: EMPTY
80094: LIST
80095: LIST
80096: PPUSH
80097: CALL_OW 69
80101: PUSH
80102: FOR_IN
80103: IFFALSE 80155
// if IsSelected ( i ) then
80105: LD_VAR 0 2
80109: PPUSH
80110: CALL_OW 306
80114: IFFALSE 80153
// begin for j := 1 to 4 do
80116: LD_ADDR_VAR 0 3
80120: PUSH
80121: DOUBLE
80122: LD_INT 1
80124: DEC
80125: ST_TO_ADDR
80126: LD_INT 4
80128: PUSH
80129: FOR_TO
80130: IFFALSE 80151
// SetSkill ( i , j , 10 ) ;
80132: LD_VAR 0 2
80136: PPUSH
80137: LD_VAR 0 3
80141: PPUSH
80142: LD_INT 10
80144: PPUSH
80145: CALL_OW 237
80149: GO 80129
80151: POP
80152: POP
// end ;
80153: GO 80102
80155: POP
80156: POP
// end ;
80157: LD_VAR 0 1
80161: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
80162: LD_INT 0
80164: PPUSH
80165: PPUSH
80166: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
80167: LD_ADDR_VAR 0 2
80171: PUSH
80172: LD_INT 22
80174: PUSH
80175: LD_OWVAR 2
80179: PUSH
80180: EMPTY
80181: LIST
80182: LIST
80183: PUSH
80184: LD_INT 21
80186: PUSH
80187: LD_INT 1
80189: PUSH
80190: EMPTY
80191: LIST
80192: LIST
80193: PUSH
80194: EMPTY
80195: LIST
80196: LIST
80197: PPUSH
80198: CALL_OW 69
80202: PUSH
80203: FOR_IN
80204: IFFALSE 80245
// begin for j := 1 to 4 do
80206: LD_ADDR_VAR 0 3
80210: PUSH
80211: DOUBLE
80212: LD_INT 1
80214: DEC
80215: ST_TO_ADDR
80216: LD_INT 4
80218: PUSH
80219: FOR_TO
80220: IFFALSE 80241
// SetSkill ( i , j , 10 ) ;
80222: LD_VAR 0 2
80226: PPUSH
80227: LD_VAR 0 3
80231: PPUSH
80232: LD_INT 10
80234: PPUSH
80235: CALL_OW 237
80239: GO 80219
80241: POP
80242: POP
// end ;
80243: GO 80203
80245: POP
80246: POP
// end ;
80247: LD_VAR 0 1
80251: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
80252: LD_INT 0
80254: PPUSH
// uc_side := your_side ;
80255: LD_ADDR_OWVAR 20
80259: PUSH
80260: LD_OWVAR 2
80264: ST_TO_ADDR
// uc_nation := nation ;
80265: LD_ADDR_OWVAR 21
80269: PUSH
80270: LD_VAR 0 1
80274: ST_TO_ADDR
// InitHc ;
80275: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
80279: LD_INT 0
80281: PPUSH
80282: LD_VAR 0 2
80286: PPUSH
80287: LD_VAR 0 3
80291: PPUSH
80292: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
80296: CALL_OW 44
80300: PPUSH
80301: LD_INT 1
80303: PPUSH
80304: CALL_OW 51
// end ;
80308: LD_VAR 0 4
80312: RET
// export function hHackSpawnVehicle ; begin
80313: LD_INT 0
80315: PPUSH
// uc_side := your_side ;
80316: LD_ADDR_OWVAR 20
80320: PUSH
80321: LD_OWVAR 2
80325: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
80326: LD_ADDR_OWVAR 21
80330: PUSH
80331: LD_INT 1
80333: PPUSH
80334: LD_INT 3
80336: PPUSH
80337: CALL_OW 12
80341: ST_TO_ADDR
// InitVc ;
80342: CALL_OW 20
// case uc_nation of 1 :
80346: LD_OWVAR 21
80350: PUSH
80351: LD_INT 1
80353: DOUBLE
80354: EQUAL
80355: IFTRUE 80359
80357: GO 80503
80359: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
80360: LD_ADDR_OWVAR 37
80364: PUSH
80365: LD_INT 1
80367: PUSH
80368: LD_INT 2
80370: PUSH
80371: LD_INT 3
80373: PUSH
80374: LD_INT 4
80376: PUSH
80377: LD_INT 5
80379: PUSH
80380: EMPTY
80381: LIST
80382: LIST
80383: LIST
80384: LIST
80385: LIST
80386: PUSH
80387: LD_INT 1
80389: PPUSH
80390: LD_INT 5
80392: PPUSH
80393: CALL_OW 12
80397: ARRAY
80398: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
80399: LD_ADDR_OWVAR 39
80403: PUSH
80404: LD_INT 1
80406: PPUSH
80407: LD_INT 3
80409: PPUSH
80410: CALL_OW 12
80414: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
80415: LD_ADDR_OWVAR 38
80419: PUSH
80420: LD_INT 1
80422: PUSH
80423: LD_INT 2
80425: PUSH
80426: LD_INT 3
80428: PUSH
80429: EMPTY
80430: LIST
80431: LIST
80432: LIST
80433: PUSH
80434: LD_INT 1
80436: PPUSH
80437: LD_INT 3
80439: PPUSH
80440: CALL_OW 12
80444: ARRAY
80445: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
80446: LD_ADDR_OWVAR 40
80450: PUSH
80451: LD_INT 2
80453: PUSH
80454: LD_INT 4
80456: PUSH
80457: LD_INT 5
80459: PUSH
80460: LD_INT 3
80462: PUSH
80463: LD_INT 7
80465: PUSH
80466: LD_INT 8
80468: PUSH
80469: LD_INT 9
80471: PUSH
80472: LD_INT 10
80474: PUSH
80475: LD_INT 6
80477: PUSH
80478: EMPTY
80479: LIST
80480: LIST
80481: LIST
80482: LIST
80483: LIST
80484: LIST
80485: LIST
80486: LIST
80487: LIST
80488: PUSH
80489: LD_INT 1
80491: PPUSH
80492: LD_INT 9
80494: PPUSH
80495: CALL_OW 12
80499: ARRAY
80500: ST_TO_ADDR
// end ; 2 :
80501: GO 80768
80503: LD_INT 2
80505: DOUBLE
80506: EQUAL
80507: IFTRUE 80511
80509: GO 80635
80511: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
80512: LD_ADDR_OWVAR 37
80516: PUSH
80517: LD_INT 11
80519: PUSH
80520: LD_INT 12
80522: PUSH
80523: LD_INT 13
80525: PUSH
80526: LD_INT 14
80528: PUSH
80529: EMPTY
80530: LIST
80531: LIST
80532: LIST
80533: LIST
80534: PUSH
80535: LD_INT 1
80537: PPUSH
80538: LD_INT 4
80540: PPUSH
80541: CALL_OW 12
80545: ARRAY
80546: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
80547: LD_ADDR_OWVAR 39
80551: PUSH
80552: LD_INT 1
80554: PPUSH
80555: LD_INT 3
80557: PPUSH
80558: CALL_OW 12
80562: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
80563: LD_ADDR_OWVAR 38
80567: PUSH
80568: LD_INT 1
80570: PUSH
80571: LD_INT 2
80573: PUSH
80574: LD_INT 5
80576: PUSH
80577: EMPTY
80578: LIST
80579: LIST
80580: LIST
80581: PUSH
80582: LD_INT 1
80584: PPUSH
80585: LD_INT 3
80587: PPUSH
80588: CALL_OW 12
80592: ARRAY
80593: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
80594: LD_ADDR_OWVAR 40
80598: PUSH
80599: LD_INT 24
80601: PUSH
80602: LD_INT 26
80604: PUSH
80605: LD_INT 27
80607: PUSH
80608: LD_INT 28
80610: PUSH
80611: LD_INT 29
80613: PUSH
80614: EMPTY
80615: LIST
80616: LIST
80617: LIST
80618: LIST
80619: LIST
80620: PUSH
80621: LD_INT 1
80623: PPUSH
80624: LD_INT 5
80626: PPUSH
80627: CALL_OW 12
80631: ARRAY
80632: ST_TO_ADDR
// end ; 3 :
80633: GO 80768
80635: LD_INT 3
80637: DOUBLE
80638: EQUAL
80639: IFTRUE 80643
80641: GO 80767
80643: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
80644: LD_ADDR_OWVAR 37
80648: PUSH
80649: LD_INT 21
80651: PUSH
80652: LD_INT 23
80654: PUSH
80655: LD_INT 22
80657: PUSH
80658: LD_INT 24
80660: PUSH
80661: EMPTY
80662: LIST
80663: LIST
80664: LIST
80665: LIST
80666: PUSH
80667: LD_INT 1
80669: PPUSH
80670: LD_INT 4
80672: PPUSH
80673: CALL_OW 12
80677: ARRAY
80678: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
80679: LD_ADDR_OWVAR 39
80683: PUSH
80684: LD_INT 1
80686: PPUSH
80687: LD_INT 3
80689: PPUSH
80690: CALL_OW 12
80694: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
80695: LD_ADDR_OWVAR 38
80699: PUSH
80700: LD_INT 1
80702: PUSH
80703: LD_INT 3
80705: PUSH
80706: EMPTY
80707: LIST
80708: LIST
80709: PUSH
80710: LD_INT 1
80712: PPUSH
80713: LD_INT 2
80715: PPUSH
80716: CALL_OW 12
80720: ARRAY
80721: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
80722: LD_ADDR_OWVAR 40
80726: PUSH
80727: LD_INT 42
80729: PUSH
80730: LD_INT 43
80732: PUSH
80733: LD_INT 44
80735: PUSH
80736: LD_INT 46
80738: PUSH
80739: LD_INT 48
80741: PUSH
80742: LD_INT 47
80744: PUSH
80745: EMPTY
80746: LIST
80747: LIST
80748: LIST
80749: LIST
80750: LIST
80751: LIST
80752: PUSH
80753: LD_INT 1
80755: PPUSH
80756: LD_INT 6
80758: PPUSH
80759: CALL_OW 12
80763: ARRAY
80764: ST_TO_ADDR
// end ; end ;
80765: GO 80768
80767: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
80768: CALL_OW 45
80772: PPUSH
80773: LD_INT 1
80775: PPUSH
80776: CALL_OW 51
// end ;
80780: LD_VAR 0 1
80784: RET
// export hInvincible ; every 1 do
80785: GO 80787
80787: DISABLE
// hInvincible := [ ] ;
80788: LD_ADDR_EXP 161
80792: PUSH
80793: EMPTY
80794: ST_TO_ADDR
80795: END
// every 10 do var i ;
80796: GO 80798
80798: DISABLE
80799: LD_INT 0
80801: PPUSH
// begin enable ;
80802: ENABLE
// if not hInvincible then
80803: LD_EXP 161
80807: NOT
80808: IFFALSE 80812
// exit ;
80810: GO 80856
// for i in hInvincible do
80812: LD_ADDR_VAR 0 1
80816: PUSH
80817: LD_EXP 161
80821: PUSH
80822: FOR_IN
80823: IFFALSE 80854
// if GetLives ( i ) < 1000 then
80825: LD_VAR 0 1
80829: PPUSH
80830: CALL_OW 256
80834: PUSH
80835: LD_INT 1000
80837: LESS
80838: IFFALSE 80852
// SetLives ( i , 1000 ) ;
80840: LD_VAR 0 1
80844: PPUSH
80845: LD_INT 1000
80847: PPUSH
80848: CALL_OW 234
80852: GO 80822
80854: POP
80855: POP
// end ;
80856: PPOPN 1
80858: END
// export function hHackInvincible ; var i ; begin
80859: LD_INT 0
80861: PPUSH
80862: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
80863: LD_ADDR_VAR 0 2
80867: PUSH
80868: LD_INT 2
80870: PUSH
80871: LD_INT 21
80873: PUSH
80874: LD_INT 1
80876: PUSH
80877: EMPTY
80878: LIST
80879: LIST
80880: PUSH
80881: LD_INT 21
80883: PUSH
80884: LD_INT 2
80886: PUSH
80887: EMPTY
80888: LIST
80889: LIST
80890: PUSH
80891: EMPTY
80892: LIST
80893: LIST
80894: LIST
80895: PPUSH
80896: CALL_OW 69
80900: PUSH
80901: FOR_IN
80902: IFFALSE 80963
// if IsSelected ( i ) then
80904: LD_VAR 0 2
80908: PPUSH
80909: CALL_OW 306
80913: IFFALSE 80961
// begin if i in hInvincible then
80915: LD_VAR 0 2
80919: PUSH
80920: LD_EXP 161
80924: IN
80925: IFFALSE 80945
// hInvincible := hInvincible diff i else
80927: LD_ADDR_EXP 161
80931: PUSH
80932: LD_EXP 161
80936: PUSH
80937: LD_VAR 0 2
80941: DIFF
80942: ST_TO_ADDR
80943: GO 80961
// hInvincible := hInvincible union i ;
80945: LD_ADDR_EXP 161
80949: PUSH
80950: LD_EXP 161
80954: PUSH
80955: LD_VAR 0 2
80959: UNION
80960: ST_TO_ADDR
// end ;
80961: GO 80901
80963: POP
80964: POP
// end ;
80965: LD_VAR 0 1
80969: RET
// export function hHackInvisible ; var i , j ; begin
80970: LD_INT 0
80972: PPUSH
80973: PPUSH
80974: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80975: LD_ADDR_VAR 0 2
80979: PUSH
80980: LD_INT 21
80982: PUSH
80983: LD_INT 1
80985: PUSH
80986: EMPTY
80987: LIST
80988: LIST
80989: PPUSH
80990: CALL_OW 69
80994: PUSH
80995: FOR_IN
80996: IFFALSE 81020
// if IsSelected ( i ) then
80998: LD_VAR 0 2
81002: PPUSH
81003: CALL_OW 306
81007: IFFALSE 81018
// ComForceInvisible ( i ) ;
81009: LD_VAR 0 2
81013: PPUSH
81014: CALL_OW 496
81018: GO 80995
81020: POP
81021: POP
// end ;
81022: LD_VAR 0 1
81026: RET
// export function hHackChangeYourSide ; begin
81027: LD_INT 0
81029: PPUSH
// if your_side = 8 then
81030: LD_OWVAR 2
81034: PUSH
81035: LD_INT 8
81037: EQUAL
81038: IFFALSE 81050
// your_side := 0 else
81040: LD_ADDR_OWVAR 2
81044: PUSH
81045: LD_INT 0
81047: ST_TO_ADDR
81048: GO 81064
// your_side := your_side + 1 ;
81050: LD_ADDR_OWVAR 2
81054: PUSH
81055: LD_OWVAR 2
81059: PUSH
81060: LD_INT 1
81062: PLUS
81063: ST_TO_ADDR
// end ;
81064: LD_VAR 0 1
81068: RET
// export function hHackChangeUnitSide ; var i , j ; begin
81069: LD_INT 0
81071: PPUSH
81072: PPUSH
81073: PPUSH
// for i in all_units do
81074: LD_ADDR_VAR 0 2
81078: PUSH
81079: LD_OWVAR 3
81083: PUSH
81084: FOR_IN
81085: IFFALSE 81163
// if IsSelected ( i ) then
81087: LD_VAR 0 2
81091: PPUSH
81092: CALL_OW 306
81096: IFFALSE 81161
// begin j := GetSide ( i ) ;
81098: LD_ADDR_VAR 0 3
81102: PUSH
81103: LD_VAR 0 2
81107: PPUSH
81108: CALL_OW 255
81112: ST_TO_ADDR
// if j = 8 then
81113: LD_VAR 0 3
81117: PUSH
81118: LD_INT 8
81120: EQUAL
81121: IFFALSE 81133
// j := 0 else
81123: LD_ADDR_VAR 0 3
81127: PUSH
81128: LD_INT 0
81130: ST_TO_ADDR
81131: GO 81147
// j := j + 1 ;
81133: LD_ADDR_VAR 0 3
81137: PUSH
81138: LD_VAR 0 3
81142: PUSH
81143: LD_INT 1
81145: PLUS
81146: ST_TO_ADDR
// SetSide ( i , j ) ;
81147: LD_VAR 0 2
81151: PPUSH
81152: LD_VAR 0 3
81156: PPUSH
81157: CALL_OW 235
// end ;
81161: GO 81084
81163: POP
81164: POP
// end ;
81165: LD_VAR 0 1
81169: RET
// export function hHackFog ; begin
81170: LD_INT 0
81172: PPUSH
// FogOff ( true ) ;
81173: LD_INT 1
81175: PPUSH
81176: CALL_OW 344
// end ;
81180: LD_VAR 0 1
81184: RET
// export function hHackApeman ; begin
81185: LD_INT 0
81187: PPUSH
// uc_side := your_side ;
81188: LD_ADDR_OWVAR 20
81192: PUSH
81193: LD_OWVAR 2
81197: ST_TO_ADDR
// uc_nation := 0 ;
81198: LD_ADDR_OWVAR 21
81202: PUSH
81203: LD_INT 0
81205: ST_TO_ADDR
// hc_name :=  ;
81206: LD_ADDR_OWVAR 26
81210: PUSH
81211: LD_STRING 
81213: ST_TO_ADDR
// hc_gallery :=  ;
81214: LD_ADDR_OWVAR 33
81218: PUSH
81219: LD_STRING 
81221: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
81222: LD_ADDR_OWVAR 31
81226: PUSH
81227: LD_INT 0
81229: PUSH
81230: LD_INT 0
81232: PUSH
81233: LD_INT 0
81235: PUSH
81236: LD_INT 0
81238: PUSH
81239: EMPTY
81240: LIST
81241: LIST
81242: LIST
81243: LIST
81244: ST_TO_ADDR
// hc_class := class_apeman ;
81245: LD_ADDR_OWVAR 28
81249: PUSH
81250: LD_INT 12
81252: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
81253: CALL_OW 44
81257: PPUSH
81258: LD_INT 1
81260: PPUSH
81261: CALL_OW 51
// end ;
81265: LD_VAR 0 1
81269: RET
// export function hHackBoom ; begin
81270: LD_INT 0
81272: PPUSH
// uc_side := your_side ;
81273: LD_ADDR_OWVAR 20
81277: PUSH
81278: LD_OWVAR 2
81282: ST_TO_ADDR
// uc_nation := 1 ;
81283: LD_ADDR_OWVAR 21
81287: PUSH
81288: LD_INT 1
81290: ST_TO_ADDR
// vc_chassis := us_morphling ;
81291: LD_ADDR_OWVAR 37
81295: PUSH
81296: LD_INT 5
81298: ST_TO_ADDR
// vc_engine := engine_siberite ;
81299: LD_ADDR_OWVAR 39
81303: PUSH
81304: LD_INT 3
81306: ST_TO_ADDR
// vc_control := control_computer ;
81307: LD_ADDR_OWVAR 38
81311: PUSH
81312: LD_INT 3
81314: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
81315: LD_ADDR_OWVAR 40
81319: PUSH
81320: LD_INT 8
81322: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
81323: CALL_OW 45
81327: PPUSH
81328: LD_INT 1
81330: PPUSH
81331: CALL_OW 51
// end ;
81335: LD_VAR 0 1
81339: RET
